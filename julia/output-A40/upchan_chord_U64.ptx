// PTX kernel code for the CUDA upchannelizer
// This file has been generated automatically by `upchan.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for upchan(::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE // -- Begin function _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func  (.param .b64 func_retval0) julia_power_by_squaring_13892
(
	.param .align 8 .b8 julia_power_by_squaring_13892_param_0[16],
	.param .b64 julia_power_by_squaring_13892_param_1,
	.param .b64 julia_power_by_squaring_13892_param_2
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception3390[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.visible .entry _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE(
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<259>;
	.reg .b16 	%rs<1185>;
	.reg .f32 	%f<914>;
	.reg .b32 	%r<8028>;
	.reg .b64 	%rd<158>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r181, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd20, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r182, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r182, 66815;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L11
	ld.param.u64 	%rd37, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8];
	ld.param.u64 	%rd21, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r183, %r2, 9;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r184, %r183, %r1;
	or.b32  	%r185, %r184, %r4;
	mul.wide.u32 	%rd43, %r185, 4;
	add.s64 	%rd4, %rd37, %rd43;
	mov.u32 	%r186, 1;
	st.global.u32 	[%rd4], %r186;
	ld.global.u32 	%r5, [%rd21];
	setp.lt.s32 	%p2, %r5, 0;
	@%p2 bra 	LBB0_7;
// %bb.3:                               // %L231
	ld.param.u64 	%rd25, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2];
	ld.global.u32 	%r6, [%rd25];
	setp.lt.s32 	%p3, %r6, %r5;
	setp.gt.s32 	%p4, %r6, 16384;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	LBB0_7;
// %bb.4:                               // %L241
	ld.param.u64 	%rd29, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3];
	ld.global.u32 	%r7, [%rd29];
	sub.s32 	%r187, %r6, %r5;
	and.b32  	%r188, %r187, 255;
	setp.ne.s32 	%p6, %r188, 0;
	setp.lt.s32 	%p7, %r7, 0;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	LBB0_7;
// %bb.5:                               // %L247
	ld.param.u64 	%rd33, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4];
	ld.global.u32 	%r8, [%rd33];
	setp.lt.s32 	%p9, %r8, %r7;
	setp.gt.s32 	%p10, %r8, 256;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	LBB0_7;
// %bb.6:                               // %L257
	not.b32 	%r189, %r7;
	add.s32 	%r190, %r189, %r8;
	and.b32  	%r191, %r190, 3;
	setp.eq.s32 	%p12, %r191, 0;
	@%p12 bra 	LBB0_8;
	bra.uni 	LBB0_7;
LBB0_8:                                 // %pass81
	bfe.u32 	%r134, %r1, 1, 1;
	and.b32  	%r135, %r1, 1;
	bfe.u32 	%r136, %r1, 2, 1;
	shr.u32 	%r137, %r1, 4;
	shl.b32 	%r199, %r137, 1;
	shl.b32 	%r200, %r136, 2;
	shl.b32 	%r201, %r135, 3;
	shl.b32 	%r202, %r134, 4;
	or.b32  	%r203, %r201, %r202;
	or.b32  	%r204, %r200, %r203;
	or.b32  	%r205, %r199, %r204;
	bfe.u32 	%r139, %r1, 3, 1;
	or.b32  	%r140, %r139, %r205;
	or.b32  	%r141, %r140, 32;
	mov.f32 	%f181, 0f40000000;
	mov.f32 	%f182, 0f437F0000;
	div.approx.f32 	%f143, %f182, %f181;
	cvt.rn.f32.s32 	%f183, %r140;
	sub.f32 	%f184, %f183, %f143;
	mov.f32 	%f213, 0f42800000;
	div.approx.f32 	%f145, %f184, %f213;
	setp.ne.f32 	%p18, %f145, 0f00000000;
	mov.f32 	%f881, 0f3F800000;
	mov.f32 	%f874, %f881;
	@%p18 bra 	LBB0_9;
	bra.uni 	LBB0_10;
LBB0_9:                                 // %L640
	sin.approx.f32 	%f214, %f145;
	div.approx.f32 	%f874, %f214, %f145;
LBB0_10:                                // %L643
	cvt.rn.f32.s32 	%f217, %r141;
	sub.f32 	%f218, %f217, %f143;
	div.approx.f32 	%f5, %f218, %f213;
	setp.eq.f32 	%p24, %f5, 0f00000000;
	mov.f32 	%f875, %f881;
	@%p24 bra 	LBB0_12;
// %bb.11:                              // %L660
	sin.approx.f32 	%f248, %f5;
	div.approx.f32 	%f875, %f248, %f5;
LBB0_12:                                // %L663
	shl.b32 	%r124, %r1, 2;
	shl.b32 	%r192, %r2, 3;
	or.b32  	%r223, %r140, 64;
	or.b32  	%r10, %r140, 96;
	cvt.rn.f32.s32 	%f252, %r223;
	sub.f32 	%f253, %f252, %f143;
	div.approx.f32 	%f9, %f253, %f213;
	setp.eq.f32 	%p30, %f9, 0f00000000;
	mov.f32 	%f876, %f881;
	@%p30 bra 	LBB0_14;
// %bb.13:                              // %L749
	sin.approx.f32 	%f283, %f9;
	div.approx.f32 	%f876, %f283, %f9;
LBB0_14:                                // %L752
	and.b32  	%r125, %r124, 32;
	and.b32  	%r126, %r192, 960;
	cvt.rn.f32.s32 	%f286, %r10;
	sub.f32 	%f287, %f286, %f143;
	div.approx.f32 	%f14, %f287, %f213;
	setp.eq.f32 	%p36, %f14, 0f00000000;
	mov.f32 	%f877, %f881;
	@%p36 bra 	LBB0_16;
// %bb.15:                              // %L769
	sin.approx.f32 	%f317, %f14;
	div.approx.f32 	%f877, %f317, %f14;
LBB0_16:                                // %L772
	or.b32  	%r193, %r126, %r125;
	and.b32  	%r127, %r124, 4;
	or.b32  	%r241, %r140, 128;
	or.b32  	%r12, %r140, 160;
	cvt.rn.f32.s32 	%f321, %r241;
	sub.f32 	%f322, %f321, %f143;
	div.approx.f32 	%f18, %f322, %f213;
	setp.eq.f32 	%p42, %f18, 0f00000000;
	mov.f32 	%f878, %f881;
	@%p42 bra 	LBB0_18;
// %bb.17:                              // %L858
	sin.approx.f32 	%f352, %f18;
	div.approx.f32 	%f878, %f352, %f18;
LBB0_18:                                // %L861
	or.b32  	%r194, %r193, %r127;
	and.b32  	%r128, %r1, 16;
	cvt.rn.f32.s32 	%f355, %r12;
	sub.f32 	%f356, %f355, %f143;
	div.approx.f32 	%f23, %f356, %f213;
	setp.eq.f32 	%p48, %f23, 0f00000000;
	mov.f32 	%f879, %f881;
	@%p48 bra 	LBB0_20;
// %bb.19:                              // %L878
	sin.approx.f32 	%f386, %f23;
	div.approx.f32 	%f879, %f386, %f23;
LBB0_20:                                // %L881
	or.b32  	%r195, %r194, %r128;
	and.b32  	%r129, %r1, 2;
	shl.b32 	%r130, %r1, 1;
	or.b32  	%r259, %r140, 192;
	or.b32  	%r14, %r140, 224;
	cvt.rn.f32.s32 	%f390, %r259;
	sub.f32 	%f391, %f390, %f143;
	div.approx.f32 	%f27, %f391, %f213;
	setp.eq.f32 	%p54, %f27, 0f00000000;
	mov.f32 	%f880, %f881;
	@%p54 bra 	LBB0_22;
// %bb.21:                              // %L967
	sin.approx.f32 	%f421, %f27;
	div.approx.f32 	%f880, %f421, %f27;
LBB0_22:                                // %L970
	or.b32  	%r196, %r195, %r129;
	and.b32  	%r131, %r130, 8;
	cvt.rn.f32.s32 	%f424, %r14;
	sub.f32 	%f425, %f424, %f143;
	div.approx.f32 	%f32, %f425, %f213;
	setp.eq.f32 	%p60, %f32, 0f00000000;
	@%p60 bra 	LBB0_24;
// %bb.23:                              // %L987
	sin.approx.f32 	%f455, %f32;
	div.approx.f32 	%f881, %f455, %f32;
LBB0_24:                                // %L990
	or.b32  	%r197, %r196, %r131;
	mul.lo.s32 	%r16, %r140, 63;
	cvt.rn.f32.s32 	%f458, %r16;
	div.approx.f32 	%f35, %f458, %f213;
	abs.f32 	%f884, %f35;
	setp.lt.f32 	%p61, %f884, 0f40000000;
	@%p61 bra 	LBB0_36;
// %bb.25:
	setp.gtu.f32 	%p62, %f884, 0f4B800000;
	@%p62 bra 	LBB0_32;
	bra.uni 	LBB0_26;
LBB0_32:
	mov.b32 	%r18, %f884;
	and.b32  	%r277, %r18, 8388607;
	or.b32  	%r7986, %r277, 1065353216;
	mov.b32 	%f883, %r7986;
	add.s32 	%r278, %r18, -1073741824;
	and.b32  	%r7987, %r278, -8388608;
	setp.eq.s32 	%p68, %r7987, 0;
	@%p68 bra 	LBB0_35;
// %bb.33:                              // %.lr.ph2382.preheader
	mov.f32 	%f469, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f468,%f469;
	// end inline asm
LBB0_34:                                // %.lr.ph2382
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r279, %r7987, 192937984;
	add.s32 	%r280, %r279, %r7986;
	mov.b32 	%f470, %r280;
	mul.f32 	%f471, %f468, %f470;
	sub.f32 	%f472, %f470, %f471;
	fma.rn.f32 	%f473, %f472, %f468, %f471;
	sub.f32 	%f474, %f470, %f473;
	fma.rz.f32 	%f475, %f474, %f468, %f473;
	cvt.rzi.f32.f32 	%f476, %f475;
	sub.f32 	%f883, %f470, %f476;
	sub.s32 	%r7987, %r7987, %r279;
	mov.b32 	%r7986, %f883;
	setp.ne.s32 	%p69, %r7987, 0;
	setp.ne.s32 	%p70, %r7986, 0;
	and.pred  	%p71, %p69, %p70;
	@%p71 bra 	LBB0_34;
LBB0_35:                                // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p72, %r18, 2139095039;
	selp.f32 	%f477, 0f7FFFFFFF, 0f4B800000, %p72;
	mul.f32 	%f478, %f883, 0f34000000;
	mul.f32 	%f884, %f477, %f478;
	bra.uni 	LBB0_36;
LBB0_26:                                // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f461, %f884, %f181;
	cvt.rzi.f32.f32 	%f37, %f461;
	fma.rn.f32 	%f38, %f37, 0fC0000000, %f884;
	mov.b32 	%r17, %f38;
	setp.lt.u32 	%p63, %r17, 1073741824;
	mov.f32 	%f882, %f37;
	@%p63 bra 	LBB0_31;
// %bb.27:
	setp.lt.u32 	%p64, %r17, -2147483647;
	@%p64 bra 	LBB0_29;
// %bb.28:
	add.f32 	%f466, %f37, 0fBF800000;
	setp.lt.f32 	%p67, %f38, 0fC0000000;
	selp.f32 	%f467, %f466, %f37, %p67;
	add.f32 	%f882, %f467, 0fBF800000;
	bra.uni 	LBB0_31;
LBB0_29:
	add.f32 	%f882, %f37, 0f3F800000;
	setp.ltu.f32 	%p65, %f38, 0f40800000;
	@%p65 bra 	LBB0_31;
// %bb.30:                              // %__nv_fmaf_rn.exit.i.i.i
	fma.rn.f32 	%f463, %f181, 0fC0400000, %f38;
	setp.ge.f32 	%p66, %f463, 0f00000000;
	selp.f32 	%f464, %f882, %f37, %p66;
	add.f32 	%f465, %f464, 0f3F800000;
	add.f32 	%f882, %f465, 0f3F800000;
LBB0_31:                                // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f884, %f882, 0fC0000000, %f884;
LBB0_36:                                // %__internal_fmodf_kernel.exit.i
	bfe.u32 	%r198, %r197, 1, 9;
	abs.f32 	%f479, %f884;
	setp.gtu.f32 	%p73, %f479, 0f7F800000;
	@%p73 bra 	LBB0_38;
// %bb.37:
	mov.b32 	%r281, %f35;
	and.b32  	%r282, %r281, -2147483648;
	mov.b32 	%r283, %f884;
	or.b32  	%r284, %r282, %r283;
	mov.b32 	%f884, %r284;
LBB0_38:                                // %__nv_fmodf.exit
	ld.param.u64 	%rd1, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5];
	mul.wide.u32 	%rd44, %r198, 4;
	add.s32 	%r293, %r16, 2016;
	cvt.rn.f32.s32 	%f510, %r293;
	div.approx.f32 	%f54, %f510, %f213;
	abs.f32 	%f888, %f54;
	setp.lt.f32 	%p81, %f888, 0f40000000;
	@%p81 bra 	LBB0_50;
// %bb.39:
	setp.gtu.f32 	%p82, %f888, 0f4B800000;
	@%p82 bra 	LBB0_46;
	bra.uni 	LBB0_40;
LBB0_46:
	mov.b32 	%r26, %f888;
	and.b32  	%r294, %r26, 8388607;
	or.b32  	%r7988, %r294, 1065353216;
	mov.b32 	%f887, %r7988;
	add.s32 	%r295, %r26, -1073741824;
	and.b32  	%r7989, %r295, -8388608;
	setp.eq.s32 	%p88, %r7989, 0;
	@%p88 bra 	LBB0_49;
// %bb.47:                              // %.lr.ph2377.preheader
	mov.f32 	%f521, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f520,%f521;
	// end inline asm
LBB0_48:                                // %.lr.ph2377
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r296, %r7989, 192937984;
	add.s32 	%r297, %r296, %r7988;
	mov.b32 	%f522, %r297;
	mul.f32 	%f523, %f520, %f522;
	sub.f32 	%f524, %f522, %f523;
	fma.rn.f32 	%f525, %f524, %f520, %f523;
	sub.f32 	%f526, %f522, %f525;
	fma.rz.f32 	%f527, %f526, %f520, %f525;
	cvt.rzi.f32.f32 	%f528, %f527;
	sub.f32 	%f887, %f522, %f528;
	sub.s32 	%r7989, %r7989, %r296;
	mov.b32 	%r7988, %f887;
	setp.ne.s32 	%p89, %r7989, 0;
	setp.ne.s32 	%p90, %r7988, 0;
	and.pred  	%p91, %p89, %p90;
	@%p91 bra 	LBB0_48;
LBB0_49:                                // %__internal_fmodf_slowpath_mod.exit.i.i1377
	setp.gt.u32 	%p92, %r26, 2139095039;
	selp.f32 	%f529, 0f7FFFFFFF, 0f4B800000, %p92;
	mul.f32 	%f530, %f887, 0f34000000;
	mul.f32 	%f888, %f529, %f530;
	bra.uni 	LBB0_50;
LBB0_40:                                // %__nv_fast_fdividef.exit.i.i.i1343
	div.approx.f32 	%f513, %f888, %f181;
	cvt.rzi.f32.f32 	%f56, %f513;
	fma.rn.f32 	%f57, %f56, 0fC0000000, %f888;
	mov.b32 	%r25, %f57;
	setp.lt.u32 	%p83, %r25, 1073741824;
	mov.f32 	%f886, %f56;
	@%p83 bra 	LBB0_45;
// %bb.41:
	setp.lt.u32 	%p84, %r25, -2147483647;
	@%p84 bra 	LBB0_43;
// %bb.42:
	add.f32 	%f518, %f56, 0fBF800000;
	setp.lt.f32 	%p87, %f57, 0fC0000000;
	selp.f32 	%f519, %f518, %f56, %p87;
	add.f32 	%f886, %f519, 0fBF800000;
	bra.uni 	LBB0_45;
LBB0_43:
	add.f32 	%f886, %f56, 0f3F800000;
	setp.ltu.f32 	%p85, %f57, 0f40800000;
	@%p85 bra 	LBB0_45;
// %bb.44:                              // %__nv_fmaf_rn.exit.i.i.i1348
	fma.rn.f32 	%f515, %f181, 0fC0400000, %f57;
	setp.ge.f32 	%p86, %f515, 0f00000000;
	selp.f32 	%f516, %f886, %f56, %p86;
	add.f32 	%f517, %f516, 0f3F800000;
	add.f32 	%f886, %f517, 0f3F800000;
LBB0_45:                                // %__internal_fmodf_fastpath_quot.exit.i.i1351
	fma.rn.f32 	%f888, %f886, 0fC0000000, %f888;
LBB0_50:                                // %__internal_fmodf_kernel.exit.i1380
	add.s64 	%rd45, %rd1, %rd44;
	abs.f32 	%f531, %f888;
	setp.gtu.f32 	%p93, %f531, 0f7F800000;
	@%p93 bra 	LBB0_52;
// %bb.51:
	mov.b32 	%r298, %f54;
	and.b32  	%r299, %r298, -2147483648;
	mov.b32 	%r300, %f888;
	or.b32  	%r301, %r299, %r300;
	mov.b32 	%f888, %r301;
LBB0_52:                                // %__nv_fmodf.exit1383
	ld.global.u32 	%r132, [%rd45];
	mov.u64 	%rd46, 2;
	mov.u64 	%rd47, 6;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd20;
	st.param.b32 	[param0+8], %r181;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd46;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd47;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_13892, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd48, [retval0+0];
	} // callseq 2
	setp.ne.s64 	%p101, %rd48, 64;
	@%p101 bra 	LBB0_128;
// %bb.53:                              // %L1096
	shr.u32 	%r133, %r1, 1;
	shr.u32 	%r138, %r1, 3;
	and.b32  	%r316, %r1, 3;
	and.b32  	%r317, %r138, 2;
	or.b32  	%r318, %r136, %r317;
	and.b32  	%r319, %r133, 4;
	or.b32  	%r35, %r318, %r319;
	mul.lo.s32 	%r320, %r316, %r35;
	shl.b32 	%r321, %r320, 1;
	neg.s32 	%r322, %r321;
	cvt.rn.f32.s32 	%f71, %r322;
	mov.f32 	%f564, 0f41000000;
	div.approx.f32 	%f72, %f71, %f564;
	abs.f32 	%f900, %f72;
	setp.lt.f32 	%p102, %f900, 0f40000000;
	mov.f32 	%f892, %f900;
	@%p102 bra 	LBB0_65;
// %bb.54:
	setp.gtu.f32 	%p103, %f900, 0f4B800000;
	@%p103 bra 	LBB0_61;
	bra.uni 	LBB0_55;
LBB0_61:
	mov.b32 	%r37, %f900;
	and.b32  	%r323, %r37, 8388607;
	or.b32  	%r7990, %r323, 1065353216;
	mov.b32 	%f891, %r7990;
	add.s32 	%r324, %r37, -1073741824;
	and.b32  	%r7991, %r324, -8388608;
	setp.eq.s32 	%p109, %r7991, 0;
	@%p109 bra 	LBB0_64;
// %bb.62:                              // %.lr.ph2367.preheader
	mov.f32 	%f574, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f573,%f574;
	// end inline asm
LBB0_63:                                // %.lr.ph2367
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r325, %r7991, 192937984;
	add.s32 	%r326, %r325, %r7990;
	mov.b32 	%f575, %r326;
	mul.f32 	%f576, %f573, %f575;
	sub.f32 	%f577, %f575, %f576;
	fma.rn.f32 	%f578, %f577, %f573, %f576;
	sub.f32 	%f579, %f575, %f578;
	fma.rz.f32 	%f580, %f579, %f573, %f578;
	cvt.rzi.f32.f32 	%f581, %f580;
	sub.f32 	%f891, %f575, %f581;
	sub.s32 	%r7991, %r7991, %r325;
	mov.b32 	%r7990, %f891;
	setp.ne.s32 	%p110, %r7991, 0;
	setp.ne.s32 	%p111, %r7990, 0;
	and.pred  	%p112, %p110, %p111;
	@%p112 bra 	LBB0_63;
LBB0_64:                                // %__internal_fmodf_slowpath_mod.exit.i.i1430
	setp.gt.u32 	%p113, %r37, 2139095039;
	selp.f32 	%f582, 0f7FFFFFFF, 0f4B800000, %p113;
	mul.f32 	%f583, %f891, 0f34000000;
	mul.f32 	%f892, %f582, %f583;
	bra.uni 	LBB0_65;
LBB0_55:                                // %__nv_fast_fdividef.exit.i.i.i1396
	div.approx.f32 	%f566, %f900, %f181;
	cvt.rzi.f32.f32 	%f74, %f566;
	fma.rn.f32 	%f75, %f74, 0fC0000000, %f900;
	mov.b32 	%r36, %f75;
	setp.lt.u32 	%p104, %r36, 1073741824;
	mov.f32 	%f890, %f74;
	@%p104 bra 	LBB0_60;
// %bb.56:
	setp.lt.u32 	%p105, %r36, -2147483647;
	@%p105 bra 	LBB0_58;
// %bb.57:
	add.f32 	%f571, %f74, 0fBF800000;
	setp.lt.f32 	%p108, %f75, 0fC0000000;
	selp.f32 	%f572, %f571, %f74, %p108;
	add.f32 	%f890, %f572, 0fBF800000;
	bra.uni 	LBB0_60;
LBB0_58:
	add.f32 	%f890, %f74, 0f3F800000;
	setp.ltu.f32 	%p106, %f75, 0f40800000;
	@%p106 bra 	LBB0_60;
// %bb.59:                              // %__nv_fmaf_rn.exit.i.i.i1401
	fma.rn.f32 	%f568, %f181, 0fC0400000, %f75;
	setp.ge.f32 	%p107, %f568, 0f00000000;
	selp.f32 	%f569, %f890, %f74, %p107;
	add.f32 	%f570, %f569, 0f3F800000;
	add.f32 	%f890, %f570, 0f3F800000;
LBB0_60:                                // %__internal_fmodf_fastpath_quot.exit.i.i1404
	fma.rn.f32 	%f892, %f890, 0fC0000000, %f900;
LBB0_65:                                // %__internal_fmodf_kernel.exit.i1433
	abs.f32 	%f584, %f892;
	setp.gtu.f32 	%p114, %f584, 0f7F800000;
	mov.b32 	%r327, %f72;
	and.b32  	%r44, %r327, -2147483648;
	@%p114 bra 	LBB0_67;
// %bb.66:
	mov.b32 	%r328, %f892;
	or.b32  	%r329, %r44, %r328;
	mov.b32 	%f892, %r329;
LBB0_67:                                // %__nv_fmodf.exit1436
	and.b32  	%r338, %r130, 6;
	mov.u32 	%r339, -8;
	sub.s32 	%r340, %r339, %r338;
	mul.lo.s32 	%r341, %r35, %r340;
	cvt.rn.f32.s32 	%f91, %r341;
	div.approx.f32 	%f92, %f91, %f564;
	abs.f32 	%f904, %f92;
	setp.lt.f32 	%p122, %f904, 0f40000000;
	mov.f32 	%f896, %f904;
	@%p122 bra 	LBB0_79;
// %bb.68:
	setp.gtu.f32 	%p123, %f904, 0f4B800000;
	@%p123 bra 	LBB0_75;
	bra.uni 	LBB0_69;
LBB0_75:
	mov.b32 	%r46, %f904;
	and.b32  	%r342, %r46, 8388607;
	or.b32  	%r7992, %r342, 1065353216;
	mov.b32 	%f895, %r7992;
	add.s32 	%r343, %r46, -1073741824;
	and.b32  	%r7993, %r343, -8388608;
	setp.eq.s32 	%p129, %r7993, 0;
	@%p129 bra 	LBB0_78;
// %bb.76:                              // %.lr.ph2357.preheader
	mov.f32 	%f625, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f624,%f625;
	// end inline asm
LBB0_77:                                // %.lr.ph2357
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r344, %r7993, 192937984;
	add.s32 	%r345, %r344, %r7992;
	mov.b32 	%f626, %r345;
	mul.f32 	%f627, %f624, %f626;
	sub.f32 	%f628, %f626, %f627;
	fma.rn.f32 	%f629, %f628, %f624, %f627;
	sub.f32 	%f630, %f626, %f629;
	fma.rz.f32 	%f631, %f630, %f624, %f629;
	cvt.rzi.f32.f32 	%f632, %f631;
	sub.f32 	%f895, %f626, %f632;
	sub.s32 	%r7993, %r7993, %r344;
	mov.b32 	%r7992, %f895;
	setp.ne.s32 	%p130, %r7993, 0;
	setp.ne.s32 	%p131, %r7992, 0;
	and.pred  	%p132, %p130, %p131;
	@%p132 bra 	LBB0_77;
LBB0_78:                                // %__internal_fmodf_slowpath_mod.exit.i.i1483
	setp.gt.u32 	%p133, %r46, 2139095039;
	selp.f32 	%f633, 0f7FFFFFFF, 0f4B800000, %p133;
	mul.f32 	%f634, %f895, 0f34000000;
	mul.f32 	%f896, %f633, %f634;
	bra.uni 	LBB0_79;
LBB0_69:                                // %__nv_fast_fdividef.exit.i.i.i1449
	div.approx.f32 	%f617, %f904, %f181;
	cvt.rzi.f32.f32 	%f94, %f617;
	fma.rn.f32 	%f95, %f94, 0fC0000000, %f904;
	mov.b32 	%r45, %f95;
	setp.lt.u32 	%p124, %r45, 1073741824;
	mov.f32 	%f894, %f94;
	@%p124 bra 	LBB0_74;
// %bb.70:
	setp.lt.u32 	%p125, %r45, -2147483647;
	@%p125 bra 	LBB0_72;
// %bb.71:
	add.f32 	%f622, %f94, 0fBF800000;
	setp.lt.f32 	%p128, %f95, 0fC0000000;
	selp.f32 	%f623, %f622, %f94, %p128;
	add.f32 	%f894, %f623, 0fBF800000;
	bra.uni 	LBB0_74;
LBB0_72:
	add.f32 	%f894, %f94, 0f3F800000;
	setp.ltu.f32 	%p126, %f95, 0f40800000;
	@%p126 bra 	LBB0_74;
// %bb.73:                              // %__nv_fmaf_rn.exit.i.i.i1454
	fma.rn.f32 	%f619, %f181, 0fC0400000, %f95;
	setp.ge.f32 	%p127, %f619, 0f00000000;
	selp.f32 	%f620, %f894, %f94, %p127;
	add.f32 	%f621, %f620, 0f3F800000;
	add.f32 	%f894, %f621, 0f3F800000;
LBB0_74:                                // %__internal_fmodf_fastpath_quot.exit.i.i1457
	fma.rn.f32 	%f896, %f894, 0fC0000000, %f904;
LBB0_79:                                // %__internal_fmodf_kernel.exit.i1486
	abs.f32 	%f635, %f896;
	setp.gtu.f32 	%p134, %f635, 0f7F800000;
	mov.b32 	%r346, %f92;
	and.b32  	%r53, %r346, -2147483648;
	@%p134 bra 	LBB0_81;
// %bb.80:
	mov.b32 	%r347, %f896;
	or.b32  	%r348, %r53, %r347;
	mov.b32 	%f896, %r348;
LBB0_81:                                // %__nv_fmodf.exit1489
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd20;
	st.param.b32 	[param0+8], %r181;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd46;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd47;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_13892, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd54, [retval0+0];
	} // callseq 5
	setp.ne.s64 	%p142, %rd54, 64;
	@%p142 bra 	LBB0_127;
// %bb.82:                              // %L1262
	{ // callseq 8, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd20;
	st.param.b32 	[param0+8], %r181;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd46;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd47;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_13892, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd60, [retval0+0];
	} // callseq 8
	cvt.rn.f32.s64 	%f668, %rd60;
	div.approx.f32 	%f109, %f71, %f668;
	abs.f32 	%f908, %f109;
	setp.lt.f32 	%p143, %f908, 0f40000000;
	@%p143 bra 	LBB0_136;
// %bb.83:
	setp.gtu.f32 	%p144, %f908, 0f4B800000;
	@%p144 bra 	LBB0_132;
	bra.uni 	LBB0_84;
LBB0_132:
	mov.b32 	%r143, %f908;
	and.b32  	%r369, %r143, 8388607;
	or.b32  	%r8024, %r369, 1065353216;
	mov.b32 	%f907, %r8024;
	add.s32 	%r370, %r143, -1073741824;
	and.b32  	%r8025, %r370, -8388608;
	setp.eq.s32 	%p150, %r8025, 0;
	@%p150 bra 	LBB0_135;
// %bb.133:                             // %.lr.ph2352.preheader
	mov.f32 	%f678, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f677,%f678;
	// end inline asm
LBB0_134:                               // %.lr.ph2352
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r371, %r8025, 192937984;
	add.s32 	%r372, %r371, %r8024;
	mov.b32 	%f679, %r372;
	mul.f32 	%f680, %f677, %f679;
	sub.f32 	%f681, %f679, %f680;
	fma.rn.f32 	%f682, %f681, %f677, %f680;
	sub.f32 	%f683, %f679, %f682;
	fma.rz.f32 	%f684, %f683, %f677, %f682;
	cvt.rzi.f32.f32 	%f685, %f684;
	sub.f32 	%f907, %f679, %f685;
	sub.s32 	%r8025, %r8025, %r371;
	mov.b32 	%r8024, %f907;
	setp.ne.s32 	%p151, %r8025, 0;
	setp.ne.s32 	%p152, %r8024, 0;
	and.pred  	%p153, %p151, %p152;
	@%p153 bra 	LBB0_134;
LBB0_135:                               // %__internal_fmodf_slowpath_mod.exit.i.i1642
	setp.gt.u32 	%p154, %r143, 2139095039;
	selp.f32 	%f686, 0f7FFFFFFF, 0f4B800000, %p154;
	mul.f32 	%f687, %f907, 0f34000000;
	mul.f32 	%f908, %f686, %f687;
	bra.uni 	LBB0_136;
LBB0_84:                                // %__nv_fast_fdividef.exit.i.i.i1608
	div.approx.f32 	%f670, %f908, %f181;
	cvt.rzi.f32.f32 	%f146, %f670;
	fma.rn.f32 	%f147, %f146, 0fC0000000, %f908;
	mov.b32 	%r142, %f147;
	setp.lt.u32 	%p145, %r142, 1073741824;
	mov.f32 	%f906, %f146;
	@%p145 bra 	LBB0_131;
// %bb.85:
	setp.lt.u32 	%p146, %r142, -2147483647;
	@%p146 bra 	LBB0_129;
// %bb.86:
	add.f32 	%f675, %f146, 0fBF800000;
	setp.lt.f32 	%p149, %f147, 0fC0000000;
	selp.f32 	%f676, %f675, %f146, %p149;
	add.f32 	%f906, %f676, 0fBF800000;
	bra.uni 	LBB0_131;
LBB0_129:
	add.f32 	%f906, %f146, 0f3F800000;
	setp.ltu.f32 	%p147, %f147, 0f40800000;
	@%p147 bra 	LBB0_131;
// %bb.130:                             // %__nv_fmaf_rn.exit.i.i.i1613
	fma.rn.f32 	%f672, %f181, 0fC0400000, %f147;
	setp.ge.f32 	%p148, %f672, 0f00000000;
	selp.f32 	%f673, %f906, %f146, %p148;
	add.f32 	%f674, %f673, 0f3F800000;
	add.f32 	%f906, %f674, 0f3F800000;
LBB0_131:                               // %__internal_fmodf_fastpath_quot.exit.i.i1616
	fma.rn.f32 	%f908, %f906, 0fC0000000, %f908;
LBB0_136:                               // %__internal_fmodf_kernel.exit.i1645
	abs.f32 	%f688, %f908;
	setp.gtu.f32 	%p155, %f688, 0f7F800000;
	@%p155 bra 	LBB0_138;
// %bb.137:
	mov.b32 	%r373, %f109;
	and.b32  	%r374, %r373, -2147483648;
	mov.b32 	%r375, %f908;
	or.b32  	%r376, %r374, %r375;
	mov.b32 	%f908, %r376;
LBB0_138:                               // %__nv_fmodf.exit1648
	{ // callseq 9, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd20;
	st.param.b32 	[param0+8], %r181;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd46;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd47;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_13892, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd64, [retval0+0];
	} // callseq 9
	cvt.rn.f32.s64 	%f719, %rd64;
	div.approx.f32 	%f163, %f91, %f719;
	abs.f32 	%f912, %f163;
	setp.lt.f32 	%p163, %f912, 0f40000000;
	@%p163 bra 	LBB0_150;
// %bb.139:
	setp.gtu.f32 	%p164, %f912, 0f4B800000;
	@%p164 bra 	LBB0_146;
	bra.uni 	LBB0_140;
LBB0_146:
	mov.b32 	%r151, %f912;
	and.b32  	%r385, %r151, 8388607;
	or.b32  	%r8026, %r385, 1065353216;
	mov.b32 	%f911, %r8026;
	add.s32 	%r386, %r151, -1073741824;
	and.b32  	%r8027, %r386, -8388608;
	setp.eq.s32 	%p170, %r8027, 0;
	@%p170 bra 	LBB0_149;
// %bb.147:                             // %.lr.ph2347.preheader
	mov.f32 	%f729, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f728,%f729;
	// end inline asm
LBB0_148:                               // %.lr.ph2347
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r387, %r8027, 192937984;
	add.s32 	%r388, %r387, %r8026;
	mov.b32 	%f730, %r388;
	mul.f32 	%f731, %f728, %f730;
	sub.f32 	%f732, %f730, %f731;
	fma.rn.f32 	%f733, %f732, %f728, %f731;
	sub.f32 	%f734, %f730, %f733;
	fma.rz.f32 	%f735, %f734, %f728, %f733;
	cvt.rzi.f32.f32 	%f736, %f735;
	sub.f32 	%f911, %f730, %f736;
	sub.s32 	%r8027, %r8027, %r387;
	mov.b32 	%r8026, %f911;
	setp.ne.s32 	%p171, %r8027, 0;
	setp.ne.s32 	%p172, %r8026, 0;
	and.pred  	%p173, %p171, %p172;
	@%p173 bra 	LBB0_148;
LBB0_149:                               // %__internal_fmodf_slowpath_mod.exit.i.i1695
	setp.gt.u32 	%p174, %r151, 2139095039;
	selp.f32 	%f737, 0f7FFFFFFF, 0f4B800000, %p174;
	mul.f32 	%f738, %f911, 0f34000000;
	mul.f32 	%f912, %f737, %f738;
	bra.uni 	LBB0_150;
LBB0_140:                               // %__nv_fast_fdividef.exit.i.i.i1661
	div.approx.f32 	%f721, %f912, %f181;
	cvt.rzi.f32.f32 	%f165, %f721;
	fma.rn.f32 	%f166, %f165, 0fC0000000, %f912;
	mov.b32 	%r150, %f166;
	setp.lt.u32 	%p165, %r150, 1073741824;
	mov.f32 	%f910, %f165;
	@%p165 bra 	LBB0_145;
// %bb.141:
	setp.lt.u32 	%p166, %r150, -2147483647;
	@%p166 bra 	LBB0_143;
// %bb.142:
	add.f32 	%f726, %f165, 0fBF800000;
	setp.lt.f32 	%p169, %f166, 0fC0000000;
	selp.f32 	%f727, %f726, %f165, %p169;
	add.f32 	%f910, %f727, 0fBF800000;
	bra.uni 	LBB0_145;
LBB0_143:
	add.f32 	%f910, %f165, 0f3F800000;
	setp.ltu.f32 	%p167, %f166, 0f40800000;
	@%p167 bra 	LBB0_145;
// %bb.144:                             // %__nv_fmaf_rn.exit.i.i.i1666
	fma.rn.f32 	%f723, %f181, 0fC0400000, %f166;
	setp.ge.f32 	%p168, %f723, 0f00000000;
	selp.f32 	%f724, %f910, %f165, %p168;
	add.f32 	%f725, %f724, 0f3F800000;
	add.f32 	%f910, %f725, 0f3F800000;
LBB0_145:                               // %__internal_fmodf_fastpath_quot.exit.i.i1669
	fma.rn.f32 	%f912, %f910, 0fC0000000, %f912;
LBB0_150:                               // %__internal_fmodf_kernel.exit.i1698
	abs.f32 	%f739, %f912;
	setp.gtu.f32 	%p175, %f739, 0f7F800000;
	@%p175 bra 	LBB0_152;
// %bb.151:
	mov.b32 	%r389, %f163;
	and.b32  	%r390, %r389, -2147483648;
	mov.b32 	%r391, %f912;
	or.b32  	%r392, %r390, %r391;
	mov.b32 	%f912, %r392;
LBB0_152:                               // %__nv_fmodf.exit1701
	{ // callseq 10, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd20;
	st.param.b32 	[param0+8], %r181;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd46;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd47;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_13892, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd68, [retval0+0];
	} // callseq 10
	setp.eq.s64 	%p183, %rd68, 64;
	@%p183 bra 	LBB0_87;
	bra.uni 	LBB0_153;
LBB0_87:                                // %L1441
	@%p102 bra 	LBB0_99;
// %bb.88:
	setp.gtu.f32 	%p185, %f900, 0f4B800000;
	@%p185 bra 	LBB0_95;
	bra.uni 	LBB0_89;
LBB0_95:
	mov.b32 	%r59, %f900;
	and.b32  	%r407, %r59, 8388607;
	or.b32  	%r7994, %r407, 1065353216;
	mov.b32 	%f899, %r7994;
	add.s32 	%r408, %r59, -1073741824;
	and.b32  	%r7995, %r408, -8388608;
	setp.eq.s32 	%p191, %r7995, 0;
	@%p191 bra 	LBB0_98;
// %bb.96:                              // %.lr.ph2337.preheader
	mov.f32 	%f781, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f780,%f781;
	// end inline asm
LBB0_97:                                // %.lr.ph2337
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r409, %r7995, 192937984;
	add.s32 	%r410, %r409, %r7994;
	mov.b32 	%f782, %r410;
	mul.f32 	%f783, %f780, %f782;
	sub.f32 	%f784, %f782, %f783;
	fma.rn.f32 	%f785, %f784, %f780, %f783;
	sub.f32 	%f786, %f782, %f785;
	fma.rz.f32 	%f787, %f786, %f780, %f785;
	cvt.rzi.f32.f32 	%f788, %f787;
	sub.f32 	%f899, %f782, %f788;
	sub.s32 	%r7995, %r7995, %r409;
	mov.b32 	%r7994, %f899;
	setp.ne.s32 	%p192, %r7995, 0;
	setp.ne.s32 	%p193, %r7994, 0;
	and.pred  	%p194, %p192, %p193;
	@%p194 bra 	LBB0_97;
LBB0_98:                                // %__internal_fmodf_slowpath_mod.exit.i.i1536
	setp.gt.u32 	%p195, %r59, 2139095039;
	selp.f32 	%f789, 0f7FFFFFFF, 0f4B800000, %p195;
	mul.f32 	%f790, %f899, 0f34000000;
	mul.f32 	%f900, %f789, %f790;
	bra.uni 	LBB0_99;
LBB0_89:                                // %__nv_fast_fdividef.exit.i.i.i1502
	div.approx.f32 	%f773, %f900, %f181;
	cvt.rzi.f32.f32 	%f111, %f773;
	fma.rn.f32 	%f112, %f111, 0fC0000000, %f900;
	mov.b32 	%r58, %f112;
	setp.lt.u32 	%p186, %r58, 1073741824;
	mov.f32 	%f898, %f111;
	@%p186 bra 	LBB0_94;
// %bb.90:
	setp.lt.u32 	%p187, %r58, -2147483647;
	@%p187 bra 	LBB0_92;
// %bb.91:
	add.f32 	%f778, %f111, 0fBF800000;
	setp.lt.f32 	%p190, %f112, 0fC0000000;
	selp.f32 	%f779, %f778, %f111, %p190;
	add.f32 	%f898, %f779, 0fBF800000;
	bra.uni 	LBB0_94;
LBB0_92:
	add.f32 	%f898, %f111, 0f3F800000;
	setp.ltu.f32 	%p188, %f112, 0f40800000;
	@%p188 bra 	LBB0_94;
// %bb.93:                              // %__nv_fmaf_rn.exit.i.i.i1507
	fma.rn.f32 	%f775, %f181, 0fC0400000, %f112;
	setp.ge.f32 	%p189, %f775, 0f00000000;
	selp.f32 	%f776, %f898, %f111, %p189;
	add.f32 	%f777, %f776, 0f3F800000;
	add.f32 	%f898, %f777, 0f3F800000;
LBB0_94:                                // %__internal_fmodf_fastpath_quot.exit.i.i1510
	fma.rn.f32 	%f900, %f898, 0fC0000000, %f900;
LBB0_99:                                // %__internal_fmodf_kernel.exit.i1539
	abs.f32 	%f791, %f900;
	setp.gtu.f32 	%p196, %f791, 0f7F800000;
	@%p196 bra 	LBB0_101;
// %bb.100:
	mov.b32 	%r411, %f900;
	or.b32  	%r412, %r44, %r411;
	mov.b32 	%f900, %r412;
LBB0_101:                               // %__nv_fmodf.exit1542
	@%p122 bra 	LBB0_113;
// %bb.102:
	setp.gtu.f32 	%p205, %f904, 0f4B800000;
	@%p205 bra 	LBB0_109;
	bra.uni 	LBB0_103;
LBB0_109:
	mov.b32 	%r67, %f904;
	and.b32  	%r421, %r67, 8388607;
	or.b32  	%r7996, %r421, 1065353216;
	mov.b32 	%f903, %r7996;
	add.s32 	%r422, %r67, -1073741824;
	and.b32  	%r7997, %r422, -8388608;
	setp.eq.s32 	%p211, %r7997, 0;
	@%p211 bra 	LBB0_112;
// %bb.110:                             // %.lr.ph.preheader
	mov.f32 	%f831, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f830,%f831;
	// end inline asm
LBB0_111:                               // %.lr.ph
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r423, %r7997, 192937984;
	add.s32 	%r424, %r423, %r7996;
	mov.b32 	%f832, %r424;
	mul.f32 	%f833, %f830, %f832;
	sub.f32 	%f834, %f832, %f833;
	fma.rn.f32 	%f835, %f834, %f830, %f833;
	sub.f32 	%f836, %f832, %f835;
	fma.rz.f32 	%f837, %f836, %f830, %f835;
	cvt.rzi.f32.f32 	%f838, %f837;
	sub.f32 	%f903, %f832, %f838;
	sub.s32 	%r7997, %r7997, %r423;
	mov.b32 	%r7996, %f903;
	setp.ne.s32 	%p212, %r7997, 0;
	setp.ne.s32 	%p213, %r7996, 0;
	and.pred  	%p214, %p212, %p213;
	@%p214 bra 	LBB0_111;
LBB0_112:                               // %__internal_fmodf_slowpath_mod.exit.i.i1589
	setp.gt.u32 	%p215, %r67, 2139095039;
	selp.f32 	%f839, 0f7FFFFFFF, 0f4B800000, %p215;
	mul.f32 	%f840, %f903, 0f34000000;
	mul.f32 	%f904, %f839, %f840;
	bra.uni 	LBB0_113;
LBB0_103:                               // %__nv_fast_fdividef.exit.i.i.i1555
	div.approx.f32 	%f823, %f904, %f181;
	cvt.rzi.f32.f32 	%f128, %f823;
	fma.rn.f32 	%f129, %f128, 0fC0000000, %f904;
	mov.b32 	%r66, %f129;
	setp.lt.u32 	%p206, %r66, 1073741824;
	mov.f32 	%f902, %f128;
	@%p206 bra 	LBB0_108;
// %bb.104:
	setp.lt.u32 	%p207, %r66, -2147483647;
	@%p207 bra 	LBB0_106;
// %bb.105:
	add.f32 	%f828, %f128, 0fBF800000;
	setp.lt.f32 	%p210, %f129, 0fC0000000;
	selp.f32 	%f829, %f828, %f128, %p210;
	add.f32 	%f902, %f829, 0fBF800000;
	bra.uni 	LBB0_108;
LBB0_106:
	add.f32 	%f902, %f128, 0f3F800000;
	setp.ltu.f32 	%p208, %f129, 0f40800000;
	@%p208 bra 	LBB0_108;
// %bb.107:                             // %__nv_fmaf_rn.exit.i.i.i1560
	fma.rn.f32 	%f825, %f181, 0fC0400000, %f129;
	setp.ge.f32 	%p209, %f825, 0f00000000;
	selp.f32 	%f826, %f902, %f128, %p209;
	add.f32 	%f827, %f826, 0f3F800000;
	add.f32 	%f902, %f827, 0f3F800000;
LBB0_108:                               // %__internal_fmodf_fastpath_quot.exit.i.i1563
	fma.rn.f32 	%f904, %f902, 0fC0000000, %f904;
LBB0_113:                               // %__internal_fmodf_kernel.exit.i1592
	abs.f32 	%f841, %f904;
	setp.gtu.f32 	%p216, %f841, 0f7F800000;
	@%p216 bra 	LBB0_115;
// %bb.114:
	mov.b32 	%r425, %f904;
	or.b32  	%r426, %r53, %r425;
	mov.b32 	%f904, %r426;
LBB0_115:                               // %__nv_fmodf.exit1595
	setp.le.s32 	%p224, %r6, %r5;
	mov.u32 	%r7983, 0;
	@%p224 bra 	LBB0_126;
// %bb.116:                             // %L1541.lr.ph
	mov.f32 	%f185, 0f43808000;
	div.approx.f32 	%f186, %f184, %f185;
	div.approx.f32 	%f220, %f218, %f185;
	div.approx.f32 	%f255, %f253, %f185;
	div.approx.f32 	%f289, %f287, %f185;
	div.approx.f32 	%f324, %f322, %f185;
	div.approx.f32 	%f358, %f356, %f185;
	div.approx.f32 	%f393, %f391, %f185;
	div.approx.f32 	%f427, %f425, %f185;
	abs.f32 	%f187, %f186;
	abs.f32 	%f221, %f220;
	abs.f32 	%f256, %f255;
	abs.f32 	%f290, %f289;
	abs.f32 	%f325, %f324;
	abs.f32 	%f359, %f358;
	abs.f32 	%f394, %f393;
	abs.f32 	%f428, %f427;
	setp.gt.f32 	%p13, %f187, 0f4B800000;
	mul.f32 	%f188, %f186, 0f00000000;
	setp.gt.f32 	%p19, %f221, 0f4B800000;
	mul.f32 	%f222, %f220, 0f00000000;
	setp.gt.f32 	%p25, %f256, 0f4B800000;
	mul.f32 	%f257, %f255, 0f00000000;
	setp.gt.f32 	%p31, %f290, 0f4B800000;
	mul.f32 	%f291, %f289, 0f00000000;
	setp.gt.f32 	%p37, %f325, 0f4B800000;
	mul.f32 	%f326, %f324, 0f00000000;
	setp.gt.f32 	%p43, %f359, 0f4B800000;
	mul.f32 	%f360, %f358, 0f00000000;
	setp.gt.f32 	%p49, %f394, 0f4B800000;
	mul.f32 	%f395, %f393, 0f00000000;
	setp.gt.f32 	%p55, %f428, 0f4B800000;
	mul.f32 	%f429, %f427, 0f00000000;
	selp.f32 	%f189, %f188, %f186, %p13;
	selp.f32 	%f223, %f222, %f220, %p19;
	selp.f32 	%f258, %f257, %f255, %p25;
	selp.f32 	%f292, %f291, %f289, %p31;
	selp.f32 	%f327, %f326, %f324, %p37;
	selp.f32 	%f361, %f360, %f358, %p43;
	selp.f32 	%f396, %f395, %f393, %p49;
	selp.f32 	%f430, %f429, %f427, %p55;
	add.f32 	%f585, %f892, %f892;
	add.f32 	%f636, %f896, %f896;
	add.f32 	%f190, %f189, %f189;
	add.f32 	%f224, %f223, %f223;
	add.f32 	%f259, %f258, %f258;
	add.f32 	%f293, %f292, %f292;
	add.f32 	%f328, %f327, %f327;
	add.f32 	%f362, %f361, %f361;
	add.f32 	%f397, %f396, %f396;
	add.f32 	%f431, %f430, %f430;
	add.f32 	%f480, %f884, %f884;
	add.f32 	%f532, %f888, %f888;
	mov.b32 	%r330, %f585;
	mov.b32 	%r361, %f636;
	add.f32 	%f689, %f908, %f908;
	add.f32 	%f740, %f912, %f912;
	mov.b32 	%r206, %f190;
	mov.b32 	%r213, %f224;
	mov.b32 	%r224, %f259;
	mov.b32 	%r231, %f293;
	mov.b32 	%r242, %f328;
	mov.b32 	%r249, %f362;
	mov.b32 	%r260, %f397;
	mov.b32 	%r267, %f431;
	mov.b32 	%r285, %f480;
	mov.b32 	%r308, %f532;
	and.b32  	%r331, %r330, -2147483648;
	and.b32  	%r362, %r361, -2147483648;
	mov.b32 	%r377, %f689;
	mov.b32 	%r399, %f740;
	and.b32  	%r207, %r206, -2147483648;
	and.b32  	%r214, %r213, -2147483648;
	and.b32  	%r225, %r224, -2147483648;
	and.b32  	%r232, %r231, -2147483648;
	and.b32  	%r243, %r242, -2147483648;
	and.b32  	%r250, %r249, -2147483648;
	and.b32  	%r261, %r260, -2147483648;
	and.b32  	%r268, %r267, -2147483648;
	and.b32  	%r286, %r285, -2147483648;
	and.b32  	%r309, %r308, -2147483648;
	or.b32  	%r332, %r331, 1056964608;
	or.b32  	%r363, %r362, 1056964608;
	and.b32  	%r378, %r377, -2147483648;
	and.b32  	%r400, %r399, -2147483648;
	add.f32 	%f792, %f900, %f900;
	or.b32  	%r208, %r207, 1056964608;
	or.b32  	%r215, %r214, 1056964608;
	or.b32  	%r226, %r225, 1056964608;
	or.b32  	%r233, %r232, 1056964608;
	or.b32  	%r244, %r243, 1056964608;
	or.b32  	%r251, %r250, 1056964608;
	or.b32  	%r262, %r261, 1056964608;
	or.b32  	%r269, %r268, 1056964608;
	or.b32  	%r287, %r286, 1056964608;
	or.b32  	%r310, %r309, 1056964608;
	mov.b32 	%f586, %r332;
	mov.b32 	%f637, %r363;
	or.b32  	%r379, %r378, 1056964608;
	or.b32  	%r401, %r400, 1056964608;
	mov.b32 	%r413, %f792;
	mov.b32 	%f191, %r208;
	mov.b32 	%f225, %r215;
	mov.b32 	%f260, %r226;
	mov.b32 	%f294, %r233;
	mov.b32 	%f329, %r244;
	mov.b32 	%f363, %r251;
	mov.b32 	%f398, %r262;
	mov.b32 	%f432, %r269;
	mov.b32 	%f481, %r287;
	mov.b32 	%f533, %r310;
	add.f32 	%f587, %f585, %f586;
	abs.f32 	%f589, %f585;
	add.f32 	%f638, %f636, %f637;
	abs.f32 	%f640, %f636;
	mov.b32 	%f690, %r379;
	mov.b32 	%f741, %r401;
	and.b32  	%r414, %r413, -2147483648;
	add.f32 	%f192, %f190, %f191;
	abs.f32 	%f194, %f190;
	add.f32 	%f226, %f224, %f225;
	abs.f32 	%f228, %f224;
	add.f32 	%f261, %f259, %f260;
	abs.f32 	%f263, %f259;
	add.f32 	%f295, %f293, %f294;
	abs.f32 	%f297, %f293;
	add.f32 	%f330, %f328, %f329;
	abs.f32 	%f332, %f328;
	add.f32 	%f364, %f362, %f363;
	abs.f32 	%f366, %f362;
	add.f32 	%f399, %f397, %f398;
	abs.f32 	%f401, %f397;
	add.f32 	%f433, %f431, %f432;
	abs.f32 	%f435, %f431;
	add.f32 	%f482, %f480, %f481;
	abs.f32 	%f484, %f480;
	add.f32 	%f534, %f532, %f533;
	abs.f32 	%f536, %f532;
	cvt.rzi.f32.f32 	%f588, %f587;
	setp.gt.f32 	%p115, %f589, 0f4B000000;
	cvt.rzi.f32.f32 	%f639, %f638;
	setp.gt.f32 	%p135, %f640, 0f4B000000;
	add.f32 	%f691, %f689, %f690;
	abs.f32 	%f693, %f689;
	add.f32 	%f742, %f740, %f741;
	abs.f32 	%f744, %f740;
	or.b32  	%r415, %r414, 1056964608;
	cvt.rzi.f32.f32 	%f193, %f192;
	setp.gt.f32 	%p14, %f194, 0f4B000000;
	cvt.rzi.f32.f32 	%f227, %f226;
	setp.gt.f32 	%p20, %f228, 0f4B000000;
	cvt.rzi.f32.f32 	%f262, %f261;
	setp.gt.f32 	%p26, %f263, 0f4B000000;
	cvt.rzi.f32.f32 	%f296, %f295;
	setp.gt.f32 	%p32, %f297, 0f4B000000;
	cvt.rzi.f32.f32 	%f331, %f330;
	setp.gt.f32 	%p38, %f332, 0f4B000000;
	cvt.rzi.f32.f32 	%f365, %f364;
	setp.gt.f32 	%p44, %f366, 0f4B000000;
	cvt.rzi.f32.f32 	%f400, %f399;
	setp.gt.f32 	%p50, %f401, 0f4B000000;
	cvt.rzi.f32.f32 	%f434, %f433;
	setp.gt.f32 	%p56, %f435, 0f4B000000;
	cvt.rzi.f32.f32 	%f483, %f482;
	setp.gt.f32 	%p74, %f484, 0f4B000000;
	cvt.rzi.f32.f32 	%f535, %f534;
	setp.gt.f32 	%p94, %f536, 0f4B000000;
	selp.f32 	%f590, %f585, %f588, %p115;
	cvt.rzi.f32.f32 	%f591, %f585;
	setp.lt.f32 	%p116, %f589, 0f3F000000;
	selp.f32 	%f641, %f636, %f639, %p135;
	cvt.rzi.f32.f32 	%f642, %f636;
	setp.lt.f32 	%p136, %f640, 0f3F000000;
	cvt.rzi.f32.f32 	%f692, %f691;
	setp.gt.f32 	%p156, %f693, 0f4B000000;
	cvt.rzi.f32.f32 	%f743, %f742;
	setp.gt.f32 	%p176, %f744, 0f4B000000;
	mov.b32 	%f793, %r415;
	selp.f32 	%f195, %f190, %f193, %p14;
	cvt.rzi.f32.f32 	%f196, %f190;
	setp.lt.f32 	%p15, %f194, 0f3F000000;
	selp.f32 	%f229, %f224, %f227, %p20;
	cvt.rzi.f32.f32 	%f230, %f224;
	setp.lt.f32 	%p21, %f228, 0f3F000000;
	selp.f32 	%f264, %f259, %f262, %p26;
	cvt.rzi.f32.f32 	%f265, %f259;
	setp.lt.f32 	%p27, %f263, 0f3F000000;
	selp.f32 	%f298, %f293, %f296, %p32;
	cvt.rzi.f32.f32 	%f299, %f293;
	setp.lt.f32 	%p33, %f297, 0f3F000000;
	selp.f32 	%f333, %f328, %f331, %p38;
	cvt.rzi.f32.f32 	%f334, %f328;
	setp.lt.f32 	%p39, %f332, 0f3F000000;
	selp.f32 	%f367, %f362, %f365, %p44;
	cvt.rzi.f32.f32 	%f368, %f362;
	setp.lt.f32 	%p45, %f366, 0f3F000000;
	selp.f32 	%f402, %f397, %f400, %p50;
	cvt.rzi.f32.f32 	%f403, %f397;
	setp.lt.f32 	%p51, %f401, 0f3F000000;
	selp.f32 	%f436, %f431, %f434, %p56;
	cvt.rzi.f32.f32 	%f437, %f431;
	setp.lt.f32 	%p57, %f435, 0f3F000000;
	selp.f32 	%f485, %f480, %f483, %p74;
	cvt.rzi.f32.f32 	%f486, %f480;
	setp.lt.f32 	%p75, %f484, 0f3F000000;
	selp.f32 	%f537, %f532, %f535, %p94;
	cvt.rzi.f32.f32 	%f538, %f532;
	setp.lt.f32 	%p95, %f536, 0f3F000000;
	selp.f32 	%f592, %f591, %f590, %p116;
	selp.f32 	%f643, %f642, %f641, %p136;
	selp.f32 	%f694, %f689, %f692, %p156;
	cvt.rzi.f32.f32 	%f695, %f689;
	setp.lt.f32 	%p157, %f693, 0f3F000000;
	selp.f32 	%f745, %f740, %f743, %p176;
	cvt.rzi.f32.f32 	%f746, %f740;
	setp.lt.f32 	%p177, %f744, 0f3F000000;
	add.f32 	%f794, %f792, %f793;
	abs.f32 	%f796, %f792;
	selp.f32 	%f197, %f196, %f195, %p15;
	selp.f32 	%f231, %f230, %f229, %p21;
	selp.f32 	%f266, %f265, %f264, %p27;
	selp.f32 	%f300, %f299, %f298, %p33;
	selp.f32 	%f335, %f334, %f333, %p39;
	selp.f32 	%f369, %f368, %f367, %p45;
	selp.f32 	%f404, %f403, %f402, %p51;
	selp.f32 	%f438, %f437, %f436, %p57;
	selp.f32 	%f487, %f486, %f485, %p75;
	selp.f32 	%f539, %f538, %f537, %p95;
	fma.rn.f32 	%f593, %f592, 0fBF000000, %f892;
	fma.rn.f32 	%f644, %f643, 0fBF000000, %f896;
	selp.f32 	%f696, %f695, %f694, %p157;
	selp.f32 	%f747, %f746, %f745, %p177;
	cvt.rzi.f32.f32 	%f795, %f794;
	setp.gt.f32 	%p198, %f796, 0f4B000000;
	fma.rn.f32 	%f198, %f197, 0fBF000000, %f189;
	fma.rn.f32 	%f232, %f231, 0fBF000000, %f223;
	fma.rn.f32 	%f267, %f266, 0fBF000000, %f258;
	fma.rn.f32 	%f301, %f300, 0fBF000000, %f292;
	fma.rn.f32 	%f336, %f335, 0fBF000000, %f327;
	fma.rn.f32 	%f370, %f369, 0fBF000000, %f361;
	fma.rn.f32 	%f405, %f404, 0fBF000000, %f396;
	fma.rn.f32 	%f439, %f438, 0fBF000000, %f430;
	fma.rn.f32 	%f488, %f487, 0fBF000000, %f884;
	fma.rn.f32 	%f540, %f539, 0fBF000000, %f888;
	mul.f32 	%f594, %f593, %f593;
	mul.f32 	%f645, %f644, %f644;
	fma.rn.f32 	%f697, %f696, 0fBF000000, %f908;
	fma.rn.f32 	%f748, %f747, 0fBF000000, %f912;
	selp.f32 	%f797, %f792, %f795, %p198;
	cvt.rzi.f32.f32 	%f798, %f792;
	setp.lt.f32 	%p199, %f796, 0f3F000000;
	mul.f32 	%f199, %f198, %f198;
	mul.f32 	%f233, %f232, %f232;
	mul.f32 	%f268, %f267, %f267;
	mul.f32 	%f302, %f301, %f301;
	mul.f32 	%f337, %f336, %f336;
	mul.f32 	%f371, %f370, %f370;
	mul.f32 	%f406, %f405, %f405;
	mul.f32 	%f440, %f439, %f439;
	mul.f32 	%f489, %f488, %f488;
	mul.f32 	%f541, %f540, %f540;
	fma.rn.f32 	%f595, %f594, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f596, %f594, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f646, %f645, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f647, %f645, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f698, %f697, %f697;
	mul.f32 	%f749, %f748, %f748;
	selp.f32 	%f799, %f798, %f797, %p199;
	cvt.rzi.s32.f32 	%r209, %f197;
	fma.rn.f32 	%f200, %f199, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f201, %f199, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r216, %f231;
	fma.rn.f32 	%f234, %f233, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f235, %f233, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r227, %f266;
	fma.rn.f32 	%f269, %f268, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f270, %f268, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r234, %f300;
	fma.rn.f32 	%f303, %f302, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f304, %f302, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r245, %f335;
	fma.rn.f32 	%f338, %f337, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f339, %f337, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r252, %f369;
	fma.rn.f32 	%f372, %f371, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f373, %f371, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r263, %f404;
	fma.rn.f32 	%f407, %f406, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f408, %f406, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r270, %f438;
	fma.rn.f32 	%f441, %f440, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f442, %f440, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f490, %f489, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f491, %f489, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f542, %f541, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f543, %f541, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r333, %f592;
	fma.rn.f32 	%f597, %f595, %f594, 0fC0A55DF6;
	fma.rn.f32 	%f598, %f596, %f594, 0f4081E0CF;
	fma.rn.f32 	%f599, %f594, %f593, 0f00000000;
	cvt.rzi.s32.f32 	%r364, %f643;
	fma.rn.f32 	%f648, %f646, %f645, 0fC0A55DF6;
	fma.rn.f32 	%f649, %f647, %f645, 0f4081E0CF;
	fma.rn.f32 	%f650, %f645, %f644, 0f00000000;
	fma.rn.f32 	%f699, %f698, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f700, %f698, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f750, %f749, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f751, %f749, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f800, %f799, 0fBF000000, %f900;
	add.s32 	%r210, %r209, 1;
	fma.rn.f32 	%f202, %f200, %f199, 0fC0A55DF6;
	fma.rn.f32 	%f203, %f201, %f199, 0f4081E0CF;
	fma.rn.f32 	%f204, %f199, %f198, 0f00000000;
	add.s32 	%r217, %r216, 1;
	fma.rn.f32 	%f236, %f234, %f233, 0fC0A55DF6;
	fma.rn.f32 	%f237, %f235, %f233, 0f4081E0CF;
	fma.rn.f32 	%f238, %f233, %f232, 0f00000000;
	add.s32 	%r228, %r227, 1;
	fma.rn.f32 	%f271, %f269, %f268, 0fC0A55DF6;
	fma.rn.f32 	%f272, %f270, %f268, 0f4081E0CF;
	fma.rn.f32 	%f273, %f268, %f267, 0f00000000;
	add.s32 	%r235, %r234, 1;
	fma.rn.f32 	%f305, %f303, %f302, 0fC0A55DF6;
	fma.rn.f32 	%f306, %f304, %f302, 0f4081E0CF;
	fma.rn.f32 	%f307, %f302, %f301, 0f00000000;
	add.s32 	%r246, %r245, 1;
	fma.rn.f32 	%f340, %f338, %f337, 0fC0A55DF6;
	fma.rn.f32 	%f341, %f339, %f337, 0f4081E0CF;
	fma.rn.f32 	%f342, %f337, %f336, 0f00000000;
	add.s32 	%r253, %r252, 1;
	fma.rn.f32 	%f374, %f372, %f371, 0fC0A55DF6;
	fma.rn.f32 	%f375, %f373, %f371, 0f4081E0CF;
	fma.rn.f32 	%f376, %f371, %f370, 0f00000000;
	add.s32 	%r264, %r263, 1;
	fma.rn.f32 	%f409, %f407, %f406, 0fC0A55DF6;
	fma.rn.f32 	%f410, %f408, %f406, 0f4081E0CF;
	fma.rn.f32 	%f411, %f406, %f405, 0f00000000;
	add.s32 	%r271, %r270, 1;
	fma.rn.f32 	%f443, %f441, %f440, 0fC0A55DF6;
	fma.rn.f32 	%f444, %f442, %f440, 0f4081E0CF;
	fma.rn.f32 	%f445, %f440, %f439, 0f00000000;
	cvt.rzi.s32.f32 	%r288, %f487;
	fma.rn.f32 	%f492, %f490, %f489, 0fC0A55DF6;
	fma.rn.f32 	%f493, %f491, %f489, 0f4081E0CF;
	fma.rn.f32 	%f494, %f489, %f488, 0f00000000;
	cvt.rzi.s32.f32 	%r311, %f539;
	fma.rn.f32 	%f544, %f542, %f541, 0fC0A55DF6;
	fma.rn.f32 	%f545, %f543, %f541, 0f4081E0CF;
	fma.rn.f32 	%f546, %f541, %f540, 0f00000000;
	fma.rn.f32 	%f600, %f598, %f594, 0fC09DE9E6;
	fma.rn.f32 	%f601, %f597, %f599, 0f00000000;
	and.b32  	%r334, %r333, 1;
	fma.rn.f32 	%f651, %f649, %f645, 0fC09DE9E6;
	fma.rn.f32 	%f652, %f648, %f650, 0f00000000;
	and.b32  	%r365, %r364, 1;
	cvt.rzi.s32.f32 	%r380, %f696;
	fma.rn.f32 	%f701, %f699, %f698, 0fC0A55DF6;
	fma.rn.f32 	%f702, %f700, %f698, 0f4081E0CF;
	fma.rn.f32 	%f703, %f698, %f697, 0f00000000;
	cvt.rzi.s32.f32 	%r402, %f747;
	fma.rn.f32 	%f752, %f750, %f749, 0fC0A55DF6;
	fma.rn.f32 	%f753, %f751, %f749, 0f4081E0CF;
	fma.rn.f32 	%f754, %f749, %f748, 0f00000000;
	mul.f32 	%f801, %f800, %f800;
	fma.rn.f32 	%f205, %f203, %f199, 0fC09DE9E6;
	fma.rn.f32 	%f206, %f202, %f204, 0f00000000;
	and.b32  	%r211, %r210, 1;
	fma.rn.f32 	%f239, %f237, %f233, 0fC09DE9E6;
	fma.rn.f32 	%f240, %f236, %f238, 0f00000000;
	and.b32  	%r218, %r217, 1;
	fma.rn.f32 	%f274, %f272, %f268, 0fC09DE9E6;
	fma.rn.f32 	%f275, %f271, %f273, 0f00000000;
	and.b32  	%r229, %r228, 1;
	fma.rn.f32 	%f308, %f306, %f302, 0fC09DE9E6;
	fma.rn.f32 	%f309, %f305, %f307, 0f00000000;
	and.b32  	%r236, %r235, 1;
	fma.rn.f32 	%f343, %f341, %f337, 0fC09DE9E6;
	fma.rn.f32 	%f344, %f340, %f342, 0f00000000;
	and.b32  	%r247, %r246, 1;
	fma.rn.f32 	%f377, %f375, %f371, 0fC09DE9E6;
	fma.rn.f32 	%f378, %f374, %f376, 0f00000000;
	and.b32  	%r254, %r253, 1;
	fma.rn.f32 	%f412, %f410, %f406, 0fC09DE9E6;
	fma.rn.f32 	%f413, %f409, %f411, 0f00000000;
	and.b32  	%r265, %r264, 1;
	fma.rn.f32 	%f446, %f444, %f440, 0fC09DE9E6;
	fma.rn.f32 	%f447, %f443, %f445, 0f00000000;
	and.b32  	%r272, %r271, 1;
	fma.rn.f32 	%f495, %f493, %f489, 0fC09DE9E6;
	fma.rn.f32 	%f496, %f492, %f494, 0f00000000;
	and.b32  	%r289, %r288, 1;
	fma.rn.f32 	%f547, %f545, %f541, 0fC09DE9E6;
	fma.rn.f32 	%f548, %f544, %f546, 0f00000000;
	and.b32  	%r312, %r311, 1;
	fma.rn.f32 	%f602, %f600, %f594, 0f3F800000;
	fma.rn.f32 	%f603, %f593, 0f40490FDB, %f601;
	setp.eq.b32 	%p117, %r334, 1;
	fma.rn.f32 	%f653, %f651, %f645, 0f3F800000;
	fma.rn.f32 	%f654, %f644, 0f40490FDB, %f652;
	setp.eq.b32 	%p137, %r365, 1;
	fma.rn.f32 	%f704, %f702, %f698, 0fC09DE9E6;
	fma.rn.f32 	%f705, %f701, %f703, 0f00000000;
	and.b32  	%r381, %r380, 1;
	fma.rn.f32 	%f755, %f753, %f749, 0fC09DE9E6;
	fma.rn.f32 	%f756, %f752, %f754, 0f00000000;
	and.b32  	%r403, %r402, 1;
	fma.rn.f32 	%f802, %f801, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f803, %f801, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f207, %f205, %f199, 0f3F800000;
	fma.rn.f32 	%f208, %f198, 0f40490FDB, %f206;
	setp.eq.b32 	%p16, %r211, 1;
	fma.rn.f32 	%f241, %f239, %f233, 0f3F800000;
	fma.rn.f32 	%f242, %f232, 0f40490FDB, %f240;
	setp.eq.b32 	%p22, %r218, 1;
	fma.rn.f32 	%f276, %f274, %f268, 0f3F800000;
	fma.rn.f32 	%f277, %f267, 0f40490FDB, %f275;
	setp.eq.b32 	%p28, %r229, 1;
	fma.rn.f32 	%f310, %f308, %f302, 0f3F800000;
	fma.rn.f32 	%f311, %f301, 0f40490FDB, %f309;
	setp.eq.b32 	%p34, %r236, 1;
	fma.rn.f32 	%f345, %f343, %f337, 0f3F800000;
	fma.rn.f32 	%f346, %f336, 0f40490FDB, %f344;
	setp.eq.b32 	%p40, %r247, 1;
	fma.rn.f32 	%f379, %f377, %f371, 0f3F800000;
	fma.rn.f32 	%f380, %f370, 0f40490FDB, %f378;
	setp.eq.b32 	%p46, %r254, 1;
	fma.rn.f32 	%f414, %f412, %f406, 0f3F800000;
	fma.rn.f32 	%f415, %f405, 0f40490FDB, %f413;
	setp.eq.b32 	%p52, %r265, 1;
	fma.rn.f32 	%f448, %f446, %f440, 0f3F800000;
	fma.rn.f32 	%f449, %f439, 0f40490FDB, %f447;
	setp.eq.b32 	%p58, %r272, 1;
	fma.rn.f32 	%f497, %f495, %f489, 0f3F800000;
	fma.rn.f32 	%f498, %f488, 0f40490FDB, %f496;
	setp.eq.b32 	%p76, %r289, 1;
	fma.rn.f32 	%f549, %f547, %f541, 0f3F800000;
	fma.rn.f32 	%f550, %f540, 0f40490FDB, %f548;
	setp.eq.b32 	%p96, %r312, 1;
	selp.f32 	%f604, %f602, %f603, %p117;
	and.b32  	%r335, %r333, 2;
	selp.f32 	%f655, %f653, %f654, %p137;
	and.b32  	%r366, %r364, 2;
	fma.rn.f32 	%f706, %f704, %f698, 0f3F800000;
	fma.rn.f32 	%f707, %f697, 0f40490FDB, %f705;
	setp.eq.b32 	%p158, %r381, 1;
	fma.rn.f32 	%f757, %f755, %f749, 0f3F800000;
	fma.rn.f32 	%f758, %f748, 0f40490FDB, %f756;
	setp.eq.b32 	%p178, %r403, 1;
	cvt.rzi.s32.f32 	%r416, %f799;
	fma.rn.f32 	%f804, %f802, %f801, 0fC0A55DF6;
	fma.rn.f32 	%f805, %f803, %f801, 0f4081E0CF;
	fma.rn.f32 	%f806, %f801, %f800, 0f00000000;
	selp.f32 	%f209, %f207, %f208, %p16;
	and.b32  	%r212, %r210, 2;
	mov.f32 	%f210, 0f00000000;
	selp.f32 	%f243, %f241, %f242, %p22;
	and.b32  	%r219, %r217, 2;
	selp.f32 	%f278, %f276, %f277, %p28;
	and.b32  	%r230, %r228, 2;
	selp.f32 	%f312, %f310, %f311, %p34;
	and.b32  	%r237, %r235, 2;
	selp.f32 	%f347, %f345, %f346, %p40;
	and.b32  	%r248, %r246, 2;
	selp.f32 	%f381, %f379, %f380, %p46;
	and.b32  	%r255, %r253, 2;
	selp.f32 	%f416, %f414, %f415, %p52;
	and.b32  	%r266, %r264, 2;
	selp.f32 	%f450, %f448, %f449, %p58;
	and.b32  	%r273, %r271, 2;
	selp.f32 	%f499, %f497, %f498, %p76;
	and.b32  	%r290, %r288, 2;
	selp.f32 	%f551, %f549, %f550, %p96;
	and.b32  	%r313, %r311, 2;
	setp.eq.s32 	%p118, %r335, 0;
	neg.f32 	%f606, %f604;
	add.s32 	%r336, %r333, 1;
	cvt.rzi.f32.f32 	%f611, %f892;
	setp.eq.s32 	%p138, %r366, 0;
	neg.f32 	%f657, %f655;
	add.s32 	%r367, %r364, 1;
	cvt.rzi.f32.f32 	%f662, %f896;
	selp.f32 	%f708, %f706, %f707, %p158;
	and.b32  	%r382, %r380, 2;
	selp.f32 	%f759, %f757, %f758, %p178;
	and.b32  	%r404, %r402, 2;
	fma.rn.f32 	%f807, %f805, %f801, 0fC09DE9E6;
	fma.rn.f32 	%f808, %f804, %f806, 0f00000000;
	and.b32  	%r417, %r416, 1;
	setp.eq.s32 	%p17, %r212, 0;
	sub.f32 	%f211, %f210, %f209;
	setp.eq.s32 	%p23, %r219, 0;
	sub.f32 	%f245, %f210, %f243;
	setp.eq.s32 	%p29, %r230, 0;
	sub.f32 	%f280, %f210, %f278;
	setp.eq.s32 	%p35, %r237, 0;
	sub.f32 	%f314, %f210, %f312;
	setp.eq.s32 	%p41, %r248, 0;
	sub.f32 	%f349, %f210, %f347;
	setp.eq.s32 	%p47, %r255, 0;
	sub.f32 	%f383, %f210, %f381;
	setp.eq.s32 	%p53, %r266, 0;
	sub.f32 	%f418, %f210, %f416;
	setp.eq.s32 	%p59, %r273, 0;
	sub.f32 	%f452, %f210, %f450;
	setp.eq.s32 	%p77, %r290, 0;
	neg.f32 	%f501, %f499;
	add.s32 	%r291, %r288, 1;
	cvt.rzi.f32.f32 	%f506, %f884;
	setp.eq.s32 	%p97, %r313, 0;
	neg.f32 	%f553, %f551;
	add.s32 	%r314, %r311, 1;
	cvt.rzi.f32.f32 	%f558, %f888;
	selp.f32 	%f605, %f603, %f602, %p117;
	selp.f32 	%f607, %f604, %f606, %p118;
	and.b32  	%r337, %r336, 2;
	setp.eq.f32 	%p120, %f611, %f892;
	mul.f32 	%f612, %f892, 0f00000000;
	selp.f32 	%f656, %f654, %f653, %p137;
	selp.f32 	%f658, %f655, %f657, %p138;
	and.b32  	%r368, %r367, 2;
	setp.eq.f32 	%p140, %f662, %f896;
	mul.f32 	%f663, %f896, 0f00000000;
	setp.eq.s32 	%p159, %r382, 0;
	neg.f32 	%f710, %f708;
	add.s32 	%r383, %r380, 1;
	cvt.rzi.f32.f32 	%f715, %f908;
	setp.eq.s32 	%p179, %r404, 0;
	neg.f32 	%f761, %f759;
	add.s32 	%r405, %r402, 1;
	cvt.rzi.f32.f32 	%f766, %f912;
	fma.rn.f32 	%f809, %f807, %f801, 0f3F800000;
	fma.rn.f32 	%f810, %f800, 0f40490FDB, %f808;
	setp.eq.b32 	%p200, %r417, 1;
	selp.f32 	%f212, %f209, %f211, %p17;
	selp.f32 	%f246, %f243, %f245, %p23;
	selp.f32 	%f281, %f278, %f280, %p29;
	selp.f32 	%f315, %f312, %f314, %p35;
	selp.f32 	%f350, %f347, %f349, %p41;
	selp.f32 	%f384, %f381, %f383, %p47;
	selp.f32 	%f419, %f416, %f418, %p53;
	selp.f32 	%f453, %f450, %f452, %p59;
	selp.f32 	%f500, %f498, %f497, %p76;
	selp.f32 	%f502, %f499, %f501, %p77;
	and.b32  	%r292, %r291, 2;
	setp.eq.f32 	%p79, %f506, %f884;
	mul.f32 	%f507, %f884, 0f00000000;
	selp.f32 	%f552, %f550, %f549, %p96;
	selp.f32 	%f554, %f551, %f553, %p97;
	and.b32  	%r315, %r314, 2;
	setp.eq.f32 	%p99, %f558, %f888;
	mul.f32 	%f559, %f888, 0f00000000;
	setp.eq.s32 	%p119, %r337, 0;
	sub.f32 	%f609, %f210, %f605;
	selp.f32 	%f89, %f612, %f607, %p120;
	abs.f32 	%f613, %f892;
	setp.eq.s32 	%p139, %r368, 0;
	sub.f32 	%f660, %f210, %f656;
	selp.f32 	%f664, %f663, %f658, %p140;
	abs.f32 	%f665, %f896;
	selp.f32 	%f709, %f707, %f706, %p158;
	selp.f32 	%f711, %f708, %f710, %p159;
	and.b32  	%r384, %r383, 2;
	setp.eq.f32 	%p161, %f715, %f908;
	mul.f32 	%f716, %f908, 0f00000000;
	selp.f32 	%f760, %f758, %f757, %p178;
	selp.f32 	%f762, %f759, %f761, %p179;
	and.b32  	%r406, %r405, 2;
	setp.eq.f32 	%p181, %f766, %f912;
	mul.f32 	%f767, %f912, 0f00000000;
	selp.f32 	%f811, %f809, %f810, %p200;
	and.b32  	%r418, %r416, 2;
	mul.f32 	%f144, %f212, %f212;
	mul.f32 	%f4, %f246, %f246;
	mul.f32 	%f8, %f281, %f281;
	mul.f32 	%f13, %f315, %f315;
	mul.f32 	%f17, %f350, %f350;
	mul.f32 	%f22, %f384, %f384;
	mul.f32 	%f26, %f419, %f419;
	mul.f32 	%f31, %f453, %f453;
	setp.eq.s32 	%p78, %r292, 0;
	sub.f32 	%f504, %f210, %f500;
	selp.f32 	%f52, %f507, %f502, %p79;
	abs.f32 	%f508, %f884;
	setp.eq.s32 	%p98, %r315, 0;
	sub.f32 	%f556, %f210, %f552;
	selp.f32 	%f560, %f559, %f554, %p99;
	abs.f32 	%f561, %f888;
	selp.f32 	%f610, %f605, %f609, %p119;
	setp.gt.f32 	%p121, %f613, 0f4B800000;
	add.f32 	%f614, %f89, 0f3F800000;
	selp.f32 	%f661, %f656, %f660, %p139;
	setp.gt.f32 	%p141, %f665, 0f4B800000;
	add.f32 	%f666, %f664, 0f3F800000;
	setp.eq.s32 	%p160, %r384, 0;
	sub.f32 	%f713, %f210, %f709;
	selp.f32 	%f161, %f716, %f711, %p161;
	abs.f32 	%f717, %f908;
	setp.eq.s32 	%p180, %r406, 0;
	sub.f32 	%f764, %f210, %f760;
	selp.f32 	%f768, %f767, %f762, %p181;
	abs.f32 	%f769, %f912;
	setp.eq.s32 	%p201, %r418, 0;
	neg.f32 	%f813, %f811;
	add.s32 	%r419, %r416, 1;
	cvt.rzi.f32.f32 	%f818, %f900;
	mul.f32 	%f216, %f144, 0f3C0AF64E;
	mul.f32 	%f250, %f4, 0f3C0AF64E;
	mul.f32 	%f285, %f8, 0f3C0AF64E;
	mul.f32 	%f319, %f13, 0f3C0AF64E;
	mul.f32 	%f354, %f17, 0f3C0AF64E;
	mul.f32 	%f388, %f22, 0f3C0AF64E;
	mul.f32 	%f423, %f26, 0f3C0AF64E;
	mul.f32 	%f456, %f31, 0f3C0AF64E;
	selp.f32 	%f505, %f500, %f504, %p78;
	setp.gt.f32 	%p80, %f508, 0f4B800000;
	add.f32 	%f509, %f52, 0f3F800000;
	selp.f32 	%f557, %f552, %f556, %p98;
	setp.gt.f32 	%p100, %f561, 0f4B800000;
	add.f32 	%f562, %f560, 0f3F800000;
	selp.f32 	%f90, %f614, %f610, %p121;
	selp.f32 	%f667, %f666, %f661, %p141;
	selp.f32 	%f714, %f709, %f713, %p160;
	setp.gt.f32 	%p162, %f717, 0f4B800000;
	add.f32 	%f718, %f161, 0f3F800000;
	selp.f32 	%f765, %f760, %f764, %p180;
	setp.gt.f32 	%p182, %f769, 0f4B800000;
	add.f32 	%f770, %f768, 0f3F800000;
	selp.f32 	%f812, %f810, %f809, %p200;
	selp.f32 	%f814, %f811, %f813, %p201;
	and.b32  	%r420, %r419, 2;
	setp.eq.f32 	%p203, %f818, %f900;
	mul.f32 	%f819, %f900, 0f00000000;
	mul.f32 	%f3, %f216, %f874;
	mul.f32 	%f251, %f250, %f875;
	mul.f32 	%f12, %f285, %f876;
	mul.f32 	%f320, %f319, %f877;
	mul.f32 	%f21, %f354, %f878;
	mul.f32 	%f389, %f388, %f879;
	mul.f32 	%f30, %f423, %f880;
	mul.f32 	%f457, %f456, %f881;
	selp.f32 	%f53, %f509, %f505, %p80;
	selp.f32 	%f563, %f562, %f557, %p100;
	mov.b32 	%r351, %f667;
	mov.b32 	%r350, %f90;
	mov.b32 	%r357, %f664;
	mov.b32 	%r356, %f89;
	selp.f32 	%f162, %f718, %f714, %p162;
	selp.f32 	%f771, %f770, %f765, %p182;
	setp.eq.s32 	%p202, %r420, 0;
	sub.f32 	%f816, %f210, %f812;
	selp.f32 	%f126, %f819, %f814, %p203;
	abs.f32 	%f820, %f900;
	ld.param.u64 	%rd2, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6];
	ld.param.u64 	%rd3, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7];
	mov.b32 	%r222, %f251;
	mov.b32 	%r221, %f3;
	mov.b32 	%r240, %f320;
	mov.b32 	%r239, %f12;
	mov.b32 	%r258, %f389;
	mov.b32 	%r257, %f21;
	mov.b32 	%r276, %f457;
	mov.b32 	%r275, %f30;
	mov.b32 	%r304, %f563;
	mov.b32 	%r303, %f53;
	mov.b32 	%r307, %f560;
	mov.b32 	%r306, %f52;
	xor.b32  	%r354, %r357, -2147483648;
	xor.b32  	%r353, %r356, -2147483648;
	mov.b32 	%r395, %f771;
	mov.b32 	%r394, %f162;
	mov.b32 	%r398, %f768;
	mov.b32 	%r397, %f161;
	selp.f32 	%f817, %f812, %f816, %p202;
	setp.gt.f32 	%p204, %f820, 0f4B800000;
	add.f32 	%f821, %f126, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r220, %r222, %r221;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r238, %r240, %r239;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r256, %r258, %r257;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r274, %r276, %r275;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r302, %r304, %r303;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r305, %r307, %r306;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r349, %r351, %r350;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r352, %r354, %r353;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r355, %r357, %r356;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r358, %r351, %r350;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r393, %r395, %r394;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r396, %r398, %r397;
	// end inline asm
	selp.f32 	%f127, %f821, %f817, %p204;
	add.f32 	%f842, %f904, %f904;
	mov.b32 	%r439, %f842;
	and.b32  	%r440, %r439, -2147483648;
	or.b32  	%r441, %r440, 1056964608;
	mov.b32 	%f843, %r441;
	add.f32 	%f844, %f842, %f843;
	cvt.rzi.f32.f32 	%f845, %f844;
	abs.f32 	%f846, %f842;
	setp.gt.f32 	%p217, %f846, 0f4B000000;
	selp.f32 	%f847, %f842, %f845, %p217;
	cvt.rzi.f32.f32 	%f848, %f842;
	setp.lt.f32 	%p218, %f846, 0f3F000000;
	selp.f32 	%f849, %f848, %f847, %p218;
	cvt.rzi.s32.f32 	%r442, %f849;
	fma.rn.f32 	%f850, %f849, 0fBF000000, %f904;
	mul.f32 	%f851, %f850, %f850;
	fma.rn.f32 	%f852, %f851, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f853, %f851, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f854, %f852, %f851, 0fC0A55DF6;
	fma.rn.f32 	%f855, %f853, %f851, 0f4081E0CF;
	fma.rn.f32 	%f856, %f851, %f850, 0f00000000;
	fma.rn.f32 	%f857, %f855, %f851, 0fC09DE9E6;
	fma.rn.f32 	%f858, %f854, %f856, 0f00000000;
	fma.rn.f32 	%f859, %f857, %f851, 0f3F800000;
	fma.rn.f32 	%f860, %f850, 0f40490FDB, %f858;
	and.b32  	%r443, %r442, 1;
	setp.eq.b32 	%p219, %r443, 1;
	selp.f32 	%f861, %f859, %f860, %p219;
	selp.f32 	%f862, %f860, %f859, %p219;
	and.b32  	%r444, %r442, 2;
	setp.eq.s32 	%p220, %r444, 0;
	neg.f32 	%f863, %f861;
	selp.f32 	%f864, %f861, %f863, %p220;
	add.s32 	%r445, %r442, 1;
	and.b32  	%r446, %r445, 2;
	setp.eq.s32 	%p221, %r446, 0;
	sub.f32 	%f866, %f210, %f862;
	selp.f32 	%f867, %f862, %f866, %p221;
	cvt.rzi.f32.f32 	%f868, %f904;
	setp.eq.f32 	%p222, %f868, %f904;
	mul.f32 	%f869, %f904, 0f00000000;
	selp.f32 	%f870, %f869, %f864, %p222;
	abs.f32 	%f871, %f904;
	setp.gt.f32 	%p223, %f871, 0f4B800000;
	add.f32 	%f872, %f870, 0f3F800000;
	selp.f32 	%f873, %f872, %f867, %p223;
	mov.b32 	%r429, %f873;
	mov.b32 	%r428, %f127;
	// begin inline asm
	cvt.rn.f16x2.f32 %r427, %r429, %r428;
	// end inline asm
	mov.b32 	%r435, %f870;
	xor.b32  	%r432, %r435, -2147483648;
	mov.b32 	%r434, %f126;
	xor.b32  	%r431, %r434, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r430, %r432, %r431;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r433, %r435, %r434;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r436, %r429, %r428;
	// end inline asm
	shl.b32 	%r78, %r5, 12;
	shl.b32 	%r448, %r2, 5;
	and.b32  	%r79, %r448, 128;
	and.b32  	%r449, %r124, 28;
	and.b32  	%r450, %r448, 96;
	or.b32  	%r451, %r79, %r78;
	or.b32  	%r452, %r451, %r450;
	or.b32  	%r80, %r452, %r449;
	and.b32  	%r453, %r448, 224;
	or.b32  	%r81, %r453, %r449;
	and.b32  	%r82, %r1, 8;
	shl.b32 	%r454, %r1, 4;
	or.b32  	%r455, %r454, %r82;
	shr.u32 	%r456, %r455, 2;
	and.b32  	%r457, %r456, 30;
	and.b32  	%r458, %r3, 1;
	mul.lo.s32 	%r459, %r458, 1040;
	mul.lo.s32 	%r460, %r137, 65;
	shr.u32 	%r461, %r3, 1;
	bfe.u32 	%r462, %r3, 1, 1;
	mul.lo.s32 	%r463, %r462, 520;
	shr.u32 	%r464, %r3, 3;
	mul.lo.s32 	%r465, %r464, 130;
	bfe.u32 	%r466, %r3, 2, 1;
	mul.lo.s32 	%r467, %r466, 260;
	add.s32 	%r468, %r459, %r457;
	add.s32 	%r469, %r468, %r460;
	add.s32 	%r470, %r469, %r463;
	add.s32 	%r471, %r470, %r465;
	add.s32 	%r472, %r471, %r467;
	mul.wide.u32 	%rd72, %r472, 4;
	mov.u64 	%rd73, shmem;
	add.s64 	%rd5, %rd73, %rd72;
	cvt.u64.u32 	%rd74, %r467;
	cvt.u64.u32 	%rd75, %r465;
	cvt.u64.u32 	%rd76, %r463;
	cvt.u64.u32 	%rd77, %r460;
	cvt.u64.u32 	%rd78, %r459;
	cvt.u64.u32 	%rd79, %r457;
	add.s64 	%rd80, %rd79, %rd78;
	add.s64 	%rd81, %rd80, %rd77;
	add.s64 	%rd82, %rd81, %rd76;
	add.s64 	%rd83, %rd82, %rd75;
	add.s64 	%rd84, %rd83, %rd74;
	shl.b64 	%rd85, %rd84, 2;
	add.s64 	%rd6, %rd73, %rd85;
	mul.lo.s32 	%r473, %r139, 1040;
	and.b32  	%r474, %r4, 32;
	mul.lo.s32 	%r475, %r134, 65;
	mul.lo.s32 	%r476, %r137, 520;
	mul.lo.s32 	%r477, %r135, 130;
	mul.lo.s32 	%r478, %r136, 260;
	or.b32  	%r479, %r473, %r461;
	or.b32  	%r480, %r461, 8;
	or.b32  	%r481, %r480, %r473;
	or.b32  	%r482, %r461, 16;
	or.b32  	%r483, %r461, 24;
	or.b32  	%r484, %r127, %r126;
	or.b32  	%r485, %r484, %r125;
	or.b32  	%r486, %r485, %r128;
	or.b32  	%r487, %r486, %r129;
	or.b32  	%r488, %r487, %r131;
	bfe.u32 	%r489, %r488, 1, 5;
	mul.lo.s32 	%r490, %r489, 65;
	shl.b32 	%r491, %r3, 1;
	or.b32  	%r492, %r491, %r137;
	mul.lo.s32 	%r493, %r492, 65;
	add.s32 	%r494, %r493, %r457;
	mul.wide.u32 	%rd86, %r494, 4;
	add.s64 	%rd7, %rd73, %rd86;
	cvt.u64.u32 	%rd87, %r493;
	add.s64 	%rd88, %rd79, %rd87;
	shl.b64 	%rd89, %rd88, 2;
	add.s64 	%rd8, %rd73, %rd89;
	shl.b32 	%r495, %r7, 18;
	add.s32 	%r496, %r495, -786432;
	or.b32  	%r497, %r138, %r126;
	shl.b32 	%r498, %r3, 10;
	shl.b32 	%r499, %r497, 8;
	or.b32  	%r83, %r498, %r499;
	or.b32  	%r84, %r450, %r449;
	cvt.s64.s32 	%rd9, %r496;
	add.s32 	%r500, %r480, %r490;
	add.s32 	%r501, %r500, %r474;
	mul.wide.u32 	%rd10, %r501, 4;
	add.s32 	%r502, %r461, %r490;
	add.s32 	%r503, %r502, %r474;
	mul.wide.u32 	%rd11, %r503, 4;
	add.s32 	%r504, %r483, %r490;
	add.s32 	%r505, %r504, %r474;
	mul.wide.u32 	%rd12, %r505, 4;
	add.s32 	%r506, %r483, %r473;
	add.s32 	%r507, %r506, %r476;
	add.s32 	%r508, %r507, %r478;
	add.s32 	%r509, %r508, %r477;
	add.s32 	%r510, %r509, %r475;
	add.s32 	%r511, %r510, %r474;
	mul.wide.u32 	%rd13, %r511, 4;
	add.s32 	%r512, %r482, %r490;
	add.s32 	%r513, %r512, %r474;
	mul.wide.u32 	%rd14, %r513, 4;
	add.s32 	%r514, %r482, %r473;
	add.s32 	%r515, %r514, %r476;
	add.s32 	%r516, %r515, %r478;
	add.s32 	%r517, %r516, %r477;
	add.s32 	%r518, %r517, %r475;
	add.s32 	%r519, %r518, %r474;
	mul.wide.u32 	%rd15, %r519, 4;
	add.s32 	%r520, %r481, %r476;
	add.s32 	%r521, %r520, %r478;
	add.s32 	%r522, %r521, %r477;
	add.s32 	%r523, %r522, %r475;
	add.s32 	%r524, %r523, %r474;
	mul.wide.u32 	%rd16, %r524, 4;
	add.s32 	%r525, %r479, %r476;
	add.s32 	%r526, %r525, %r478;
	add.s32 	%r527, %r526, %r477;
	add.s32 	%r528, %r527, %r475;
	add.s32 	%r529, %r528, %r474;
	mul.wide.u32 	%rd17, %r529, 4;
	setp.eq.s32 	%p225, %r82, 0;
	mov.u16 	%rs1176, 25600;
	mov.u16 	%rs1072, 21504;
	mov.u16 	%rs1184, 18432;
	mov.u16 	%rs1142, -14592;
	mov.u32 	%r85, %r7983;
	mov.u32 	%r8023, %r7983;
	mov.u32 	%r8022, %r7983;
	mov.u32 	%r8021, %r7983;
	mov.u32 	%r8020, %r7983;
	mov.u32 	%r8019, %r7983;
	mov.u32 	%r8018, %r7983;
	mov.u32 	%r8017, %r7983;
	mov.u32 	%r8016, %r7983;
	mov.u32 	%r8015, %r7983;
	mov.u32 	%r8014, %r7983;
	mov.u32 	%r8013, %r7983;
	mov.u32 	%r8012, %r7983;
	bra.uni 	LBB0_117;
LBB0_125:                               // %pass14979
                                        //   in Loop: Header=BB0_117 Depth=1
	or.b32  	%r7977, %r7985, %r83;
	or.b32  	%r7978, %r7977, %r84;
	or.b32  	%r7979, %r7978, 786432;
	cvt.s64.s32 	%rd143, %r7979;
	add.s64 	%rd144, %rd143, %rd9;
	shr.u64 	%rd145, %rd144, 39;
	add.s64 	%rd146, %rd144, %rd145;
	shr.s64 	%rd147, %rd146, 25;
	and.b64  	%rd148, %rd146, -33554432;
	setp.ne.s64 	%p253, %rd148, %rd144;
	setp.lt.s64 	%p254, %rd144, 0;
	and.pred  	%p255, %p254, %p253;
	selp.u64 	%rd149, 1, 0, %p255;
	sub.s64 	%rd150, %rd149, %rd147;
	shl.b64 	%rd151, %rd150, 25;
	add.s64 	%rd152, %rd151, %rd144;
	shl.b64 	%rd153, %rd152, 2;
	add.s64 	%rd154, %rd3, %rd153;
	st.global.v4.u32 	[%rd154], {%r176, %r178, %r177, %r179};
	setp.ne.s32 	%p256, %r85, 7936;
	add.s32 	%r85, %r85, 256;
	add.s32 	%r7980, %r85, %r5;
	setp.gt.s32 	%p257, %r6, %r7980;
	and.pred  	%p258, %p256, %p257;
	@%p258 bra 	LBB0_117;
	bra.uni 	LBB0_126;
LBB0_117:                               // %L1541
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_118 Depth 2
	or.b32  	%r595, %r128, %r85;
	or.b32  	%r596, %r595, %r3;
	or.b32  	%r597, %r596, %r125;
	shl.b32 	%r598, %r597, 12;
	add.s32 	%r599, %r80, %r598;
	shr.s32 	%r600, %r599, 31;
	shr.u32 	%r601, %r600, 7;
	add.s32 	%r602, %r599, %r601;
	shr.s32 	%r603, %r602, 25;
	and.b32  	%r604, %r602, -33554432;
	setp.ne.s32 	%p226, %r604, %r599;
	setp.lt.s32 	%p227, %r599, 0;
	and.pred  	%p228, %p227, %p226;
	selp.u32 	%r605, 1, 0, %p228;
	sub.s32 	%r606, %r605, %r603;
	shl.b32 	%r607, %r606, 25;
	add.s32 	%r608, %r607, %r599;
	mul.wide.s32 	%rd91, %r608, 4;
	add.s64 	%rd92, %rd2, %rd91;
	ld.global.v4.u32 	{%r609, %r610, %r611, %r612}, [%rd92];
	or.b32  	%r613, %r81, %r598;
	or.b32  	%r614, %r613, 262144;
	add.s32 	%r615, %r614, %r78;
	shr.s32 	%r616, %r615, 31;
	shr.u32 	%r617, %r616, 7;
	add.s32 	%r618, %r615, %r617;
	shr.s32 	%r619, %r618, 25;
	and.b32  	%r620, %r618, -33554432;
	setp.ne.s32 	%p229, %r620, %r615;
	setp.lt.s32 	%p230, %r615, 0;
	and.pred  	%p231, %p230, %p229;
	selp.u32 	%r621, 1, 0, %p231;
	sub.s32 	%r622, %r621, %r619;
	shl.b32 	%r623, %r622, 25;
	add.s32 	%r624, %r623, %r615;
	mul.wide.s32 	%rd93, %r624, 4;
	add.s64 	%rd94, %rd2, %rd93;
	ld.global.v4.u32 	{%r625, %r626, %r627, %r628}, [%rd94];
	or.b32  	%r629, %r613, 524288;
	add.s32 	%r630, %r629, %r78;
	shr.s32 	%r631, %r630, 31;
	shr.u32 	%r632, %r631, 7;
	add.s32 	%r633, %r630, %r632;
	shr.s32 	%r634, %r633, 25;
	and.b32  	%r635, %r633, -33554432;
	setp.ne.s32 	%p232, %r635, %r630;
	setp.lt.s32 	%p233, %r630, 0;
	and.pred  	%p234, %p233, %p232;
	selp.u32 	%r636, 1, 0, %p234;
	sub.s32 	%r637, %r636, %r634;
	shl.b32 	%r638, %r637, 25;
	add.s32 	%r639, %r638, %r630;
	mul.wide.s32 	%rd95, %r639, 4;
	add.s64 	%rd96, %rd2, %rd95;
	ld.global.v4.u32 	{%r640, %r641, %r642, %r643}, [%rd96];
	or.b32  	%r644, %r613, 786432;
	add.s32 	%r645, %r644, %r78;
	shr.s32 	%r646, %r645, 31;
	shr.u32 	%r647, %r646, 7;
	add.s32 	%r648, %r645, %r647;
	shr.s32 	%r649, %r648, 25;
	and.b32  	%r650, %r648, -33554432;
	setp.ne.s32 	%p235, %r650, %r645;
	setp.lt.s32 	%p236, %r645, 0;
	and.pred  	%p237, %p236, %p235;
	selp.u32 	%r651, 1, 0, %p237;
	sub.s32 	%r652, %r651, %r649;
	shl.b32 	%r653, %r652, 25;
	add.s32 	%r654, %r653, %r645;
	mul.wide.s32 	%rd97, %r654, 4;
	add.s64 	%rd98, %rd2, %rd97;
	ld.global.v4.u32 	{%r655, %r656, %r657, %r658}, [%rd98];
	selp.b32 	%r659, %r611, %r609, %p225;
	shfl.sync.bfly.b32	%r660, %r659, 8, 31, -1;
	selp.b32 	%r531, %r609, %r660, %p225;
	selp.b32 	%r532, %r660, %r611, %p225;
	selp.b32 	%r661, %r612, %r610, %p225;
	shfl.sync.bfly.b32	%r662, %r661, 8, 31, -1;
	selp.b32 	%r539, %r610, %r662, %p225;
	selp.b32 	%r540, %r662, %r612, %p225;
	selp.b32 	%r663, %r627, %r625, %p225;
	shfl.sync.bfly.b32	%r664, %r663, 8, 31, -1;
	selp.b32 	%r547, %r625, %r664, %p225;
	selp.b32 	%r548, %r664, %r627, %p225;
	selp.b32 	%r665, %r628, %r626, %p225;
	shfl.sync.bfly.b32	%r666, %r665, 8, 31, -1;
	selp.b32 	%r555, %r626, %r666, %p225;
	selp.b32 	%r556, %r666, %r628, %p225;
	selp.b32 	%r667, %r642, %r640, %p225;
	shfl.sync.bfly.b32	%r668, %r667, 8, 31, -1;
	selp.b32 	%r563, %r640, %r668, %p225;
	selp.b32 	%r564, %r668, %r642, %p225;
	selp.b32 	%r669, %r643, %r641, %p225;
	shfl.sync.bfly.b32	%r670, %r669, 8, 31, -1;
	selp.b32 	%r571, %r641, %r670, %p225;
	selp.b32 	%r572, %r670, %r643, %p225;
	selp.b32 	%r671, %r657, %r655, %p225;
	shfl.sync.bfly.b32	%r672, %r671, 8, 31, -1;
	selp.b32 	%r579, %r655, %r672, %p225;
	selp.b32 	%r580, %r672, %r657, %p225;
	selp.b32 	%r673, %r658, %r656, %p225;
	shfl.sync.bfly.b32	%r674, %r673, 8, 31, -1;
	selp.b32 	%r587, %r656, %r674, %p225;
	selp.b32 	%r588, %r674, %r658, %p225;
	mov.u32 	%r589, 21520;
	// begin inline asm
	prmt.b32 %r530, %r531, %r532, %r589;
	// end inline asm
	mov.u32 	%r593, 30258;
	// begin inline asm
	prmt.b32 %r534, %r531, %r532, %r593;
	// end inline asm
	// begin inline asm
	prmt.b32 %r538, %r539, %r540, %r589;
	// end inline asm
	// begin inline asm
	prmt.b32 %r542, %r539, %r540, %r593;
	// end inline asm
	// begin inline asm
	prmt.b32 %r546, %r547, %r548, %r589;
	// end inline asm
	// begin inline asm
	prmt.b32 %r550, %r547, %r548, %r593;
	// end inline asm
	// begin inline asm
	prmt.b32 %r554, %r555, %r556, %r589;
	// end inline asm
	// begin inline asm
	prmt.b32 %r558, %r555, %r556, %r593;
	// end inline asm
	// begin inline asm
	prmt.b32 %r562, %r563, %r564, %r589;
	// end inline asm
	// begin inline asm
	prmt.b32 %r566, %r563, %r564, %r593;
	// end inline asm
	// begin inline asm
	prmt.b32 %r570, %r571, %r572, %r589;
	// end inline asm
	// begin inline asm
	prmt.b32 %r574, %r571, %r572, %r593;
	// end inline asm
	// begin inline asm
	prmt.b32 %r578, %r579, %r580, %r589;
	// end inline asm
	// begin inline asm
	prmt.b32 %r582, %r579, %r580, %r593;
	// end inline asm
	// begin inline asm
	prmt.b32 %r586, %r587, %r588, %r589;
	// end inline asm
	// begin inline asm
	prmt.b32 %r590, %r587, %r588, %r593;
	// end inline asm
	st.shared.u32 	[%rd5], %r530;
	st.shared.u32 	[%rd6+128], %r534;
	st.shared.u32 	[%rd6+4], %r538;
	st.shared.u32 	[%rd6+132], %r542;
	st.shared.u32 	[%rd6+8324], %r546;
	st.shared.u32 	[%rd6+8452], %r550;
	st.shared.u32 	[%rd6+8328], %r554;
	st.shared.u32 	[%rd6+8456], %r558;
	st.shared.u32 	[%rd6+16648], %r562;
	st.shared.u32 	[%rd6+16776], %r566;
	st.shared.u32 	[%rd6+16652], %r570;
	st.shared.u32 	[%rd6+16780], %r574;
	st.shared.u32 	[%rd6+24972], %r578;
	st.shared.u32 	[%rd6+25100], %r582;
	st.shared.u32 	[%rd6+24976], %r586;
	st.shared.u32 	[%rd6+25104], %r590;
	bar.sync 	0;
	mov.u32 	%r8011, 256;
	mov.u64 	%rd157, %rd73;
LBB0_118:                               // %L12868
                                        //   Parent Loop BB0_117 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add.s64 	%rd99, %rd157, %rd17;
	ld.shared.u32 	%r7859, [%rd99];
	add.s64 	%rd100, %rd157, %rd16;
	ld.shared.u32 	%r7860, [%rd100];
	add.s64 	%rd101, %rd157, %rd15;
	ld.shared.u32 	%r7861, [%rd101];
	add.s64 	%rd102, %rd157, %rd13;
	ld.shared.u32 	%r7862, [%rd102];
	// begin inline asm
	mov.b32 %r680, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r691, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r679, %r7859, -2004318072;
	mov.u32 	%r678, 983055;
	// begin inline asm
	lop3.b32 %r677, %r678, %r679, %r680, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r681, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r682, %r680, %r681;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r685, %r677, %r682;
	// end inline asm
	mov.u32 	%r689, 15728880;
	// begin inline asm
	lop3.b32 %r688, %r689, %r679, %r691, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r692, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r693, %r691, %r692;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r696, %r688, %r693;
	// end inline asm
	shr.u32 	%r701, %r679, 8;
	// begin inline asm
	lop3.b32 %r699, %r678, %r701, %r680, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r703, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r704, %r680, %r703;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r707, %r699, %r704;
	// end inline asm
	// begin inline asm
	lop3.b32 %r710, %r689, %r701, %r691, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r714, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r715, %r691, %r714;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r718, %r710, %r715;
	// end inline asm
	// begin inline asm
	mov.b32 %r726, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r737, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r725, %r7860, -2004318072;
	// begin inline asm
	lop3.b32 %r723, %r678, %r725, %r726, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r727, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r728, %r726, %r727;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r731, %r723, %r728;
	// end inline asm
	// begin inline asm
	lop3.b32 %r734, %r689, %r725, %r737, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r738, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r739, %r737, %r738;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r742, %r734, %r739;
	// end inline asm
	shr.u32 	%r747, %r725, 8;
	// begin inline asm
	lop3.b32 %r745, %r678, %r747, %r726, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r749, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r750, %r726, %r749;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r753, %r745, %r750;
	// end inline asm
	// begin inline asm
	lop3.b32 %r756, %r689, %r747, %r737, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r760, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r761, %r737, %r760;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r764, %r756, %r761;
	// end inline asm
	// begin inline asm
	mov.b32 %r772, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r783, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r771, %r7861, -2004318072;
	// begin inline asm
	lop3.b32 %r769, %r678, %r771, %r772, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r773, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r774, %r772, %r773;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r777, %r769, %r774;
	// end inline asm
	// begin inline asm
	lop3.b32 %r780, %r689, %r771, %r783, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r784, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r785, %r783, %r784;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r788, %r780, %r785;
	// end inline asm
	shr.u32 	%r793, %r771, 8;
	// begin inline asm
	lop3.b32 %r791, %r678, %r793, %r772, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r795, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r796, %r772, %r795;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r799, %r791, %r796;
	// end inline asm
	// begin inline asm
	lop3.b32 %r802, %r689, %r793, %r783, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r806, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r807, %r783, %r806;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r810, %r802, %r807;
	// end inline asm
	// begin inline asm
	mov.b32 %r818, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r829, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r817, %r7862, -2004318072;
	// begin inline asm
	lop3.b32 %r815, %r678, %r817, %r818, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r819, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r820, %r818, %r819;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r823, %r815, %r820;
	// end inline asm
	// begin inline asm
	lop3.b32 %r826, %r689, %r817, %r829, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r830, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r831, %r829, %r830;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r834, %r826, %r831;
	// end inline asm
	shr.u32 	%r839, %r817, 8;
	// begin inline asm
	lop3.b32 %r837, %r678, %r839, %r818, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r841, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r842, %r818, %r841;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r845, %r837, %r842;
	// end inline asm
	// begin inline asm
	lop3.b32 %r848, %r689, %r839, %r829, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r852, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r853, %r829, %r852;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r856, %r848, %r853;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r859, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r861, %r859, %r685;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r864, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r866, %r864, %r696;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r869, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r871, %r869, %r707;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r874, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r876, %r874, %r718;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r879, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r881, %r879, %r731;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r884, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r886, %r884, %r742;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r889, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r891, %r889, %r753;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r894, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r896, %r894, %r764;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r899, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r901, %r899, %r777;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r904, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r906, %r904, %r788;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r909, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r911, %r909, %r799;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r914, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r916, %r914, %r810;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r919, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r921, %r919, %r823;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r924, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r926, %r924, %r834;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r929, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r931, %r929, %r845;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r934, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r936, %r934, %r856;
	// end inline asm
	// begin inline asm
	mov.b32 %r944, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r955, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r943, %r8012, -2004318072;
	// begin inline asm
	lop3.b32 %r941, %r678, %r943, %r944, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r945, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r946, %r944, %r945;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r949, %r941, %r946;
	// end inline asm
	// begin inline asm
	lop3.b32 %r952, %r689, %r943, %r955, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r956, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r957, %r955, %r956;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r960, %r952, %r957;
	// end inline asm
	shr.u32 	%r965, %r943, 8;
	// begin inline asm
	lop3.b32 %r963, %r678, %r965, %r944, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r967, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r968, %r944, %r967;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r971, %r963, %r968;
	// end inline asm
	// begin inline asm
	lop3.b32 %r974, %r689, %r965, %r955, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r978, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r979, %r955, %r978;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r982, %r974, %r979;
	// end inline asm
	// begin inline asm
	mov.b32 %r990, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1001, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r989, %r8013, -2004318072;
	// begin inline asm
	lop3.b32 %r987, %r678, %r989, %r990, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r991, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r992, %r990, %r991;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r995, %r987, %r992;
	// end inline asm
	// begin inline asm
	lop3.b32 %r998, %r689, %r989, %r1001, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1002, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1003, %r1001, %r1002;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1006, %r998, %r1003;
	// end inline asm
	shr.u32 	%r1011, %r989, 8;
	// begin inline asm
	lop3.b32 %r1009, %r678, %r1011, %r990, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1013, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1014, %r990, %r1013;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1017, %r1009, %r1014;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1020, %r689, %r1011, %r1001, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1024, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1025, %r1001, %r1024;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1028, %r1020, %r1025;
	// end inline asm
	// begin inline asm
	mov.b32 %r1036, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1047, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1035, %r8014, -2004318072;
	// begin inline asm
	lop3.b32 %r1033, %r678, %r1035, %r1036, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1037, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1038, %r1036, %r1037;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1041, %r1033, %r1038;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1044, %r689, %r1035, %r1047, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1048, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1049, %r1047, %r1048;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1052, %r1044, %r1049;
	// end inline asm
	shr.u32 	%r1057, %r1035, 8;
	// begin inline asm
	lop3.b32 %r1055, %r678, %r1057, %r1036, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1059, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1060, %r1036, %r1059;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1063, %r1055, %r1060;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1066, %r689, %r1057, %r1047, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1070, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1071, %r1047, %r1070;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1074, %r1066, %r1071;
	// end inline asm
	// begin inline asm
	mov.b32 %r1082, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1093, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1081, %r8015, -2004318072;
	// begin inline asm
	lop3.b32 %r1079, %r678, %r1081, %r1082, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1083, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1084, %r1082, %r1083;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1087, %r1079, %r1084;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1090, %r689, %r1081, %r1093, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1094, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1095, %r1093, %r1094;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1098, %r1090, %r1095;
	// end inline asm
	shr.u32 	%r1103, %r1081, 8;
	// begin inline asm
	lop3.b32 %r1101, %r678, %r1103, %r1082, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1105, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1106, %r1082, %r1105;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1109, %r1101, %r1106;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1112, %r689, %r1103, %r1093, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1116, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1117, %r1093, %r1116;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1120, %r1112, %r1117;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1123, %r220, %r949, %r861;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1127, %r220, %r960, %r866;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1131, %r220, %r971, %r871;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1135, %r220, %r982, %r876;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1139, %r220, %r995, %r881;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1143, %r220, %r1006, %r886;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1147, %r220, %r1017, %r891;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1151, %r220, %r1028, %r896;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1155, %r220, %r1041, %r901;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1159, %r220, %r1052, %r906;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1163, %r220, %r1063, %r911;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1167, %r220, %r1074, %r916;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1171, %r220, %r1087, %r921;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1175, %r220, %r1098, %r926;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1179, %r220, %r1109, %r931;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1183, %r220, %r1120, %r936;
	// end inline asm
	// begin inline asm
	mov.b32 %r1192, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1203, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1191, %r8016, -2004318072;
	// begin inline asm
	lop3.b32 %r1189, %r678, %r1191, %r1192, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1193, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1194, %r1192, %r1193;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1197, %r1189, %r1194;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1200, %r689, %r1191, %r1203, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1204, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1205, %r1203, %r1204;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1208, %r1200, %r1205;
	// end inline asm
	shr.u32 	%r1213, %r1191, 8;
	// begin inline asm
	lop3.b32 %r1211, %r678, %r1213, %r1192, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1215, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1216, %r1192, %r1215;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1219, %r1211, %r1216;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1222, %r689, %r1213, %r1203, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1226, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1227, %r1203, %r1226;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1230, %r1222, %r1227;
	// end inline asm
	// begin inline asm
	mov.b32 %r1238, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1249, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1237, %r8017, -2004318072;
	// begin inline asm
	lop3.b32 %r1235, %r678, %r1237, %r1238, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1239, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1240, %r1238, %r1239;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1243, %r1235, %r1240;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1246, %r689, %r1237, %r1249, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1250, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1251, %r1249, %r1250;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1254, %r1246, %r1251;
	// end inline asm
	shr.u32 	%r1259, %r1237, 8;
	// begin inline asm
	lop3.b32 %r1257, %r678, %r1259, %r1238, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1261, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1262, %r1238, %r1261;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1265, %r1257, %r1262;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1268, %r689, %r1259, %r1249, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1272, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1273, %r1249, %r1272;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1276, %r1268, %r1273;
	// end inline asm
	// begin inline asm
	mov.b32 %r1284, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1295, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1283, %r8018, -2004318072;
	// begin inline asm
	lop3.b32 %r1281, %r678, %r1283, %r1284, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1285, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1286, %r1284, %r1285;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1289, %r1281, %r1286;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1292, %r689, %r1283, %r1295, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1296, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1297, %r1295, %r1296;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1300, %r1292, %r1297;
	// end inline asm
	shr.u32 	%r1305, %r1283, 8;
	// begin inline asm
	lop3.b32 %r1303, %r678, %r1305, %r1284, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1307, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1308, %r1284, %r1307;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1311, %r1303, %r1308;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1314, %r689, %r1305, %r1295, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1318, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1319, %r1295, %r1318;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1322, %r1314, %r1319;
	// end inline asm
	// begin inline asm
	mov.b32 %r1330, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1341, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1329, %r8019, -2004318072;
	// begin inline asm
	lop3.b32 %r1327, %r678, %r1329, %r1330, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1331, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1332, %r1330, %r1331;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1335, %r1327, %r1332;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1338, %r689, %r1329, %r1341, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1342, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1343, %r1341, %r1342;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1346, %r1338, %r1343;
	// end inline asm
	shr.u32 	%r1351, %r1329, 8;
	// begin inline asm
	lop3.b32 %r1349, %r678, %r1351, %r1330, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1353, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1354, %r1330, %r1353;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1357, %r1349, %r1354;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1360, %r689, %r1351, %r1341, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1364, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1365, %r1341, %r1364;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1368, %r1360, %r1365;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1371, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1373, %r1371, %r1197, %r1123;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1377, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1379, %r1377, %r1208, %r1127;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1383, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1385, %r1383, %r1219, %r1131;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1389, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1391, %r1389, %r1230, %r1135;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1395, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1397, %r1395, %r1243, %r1139;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1401, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1403, %r1401, %r1254, %r1143;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1407, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1409, %r1407, %r1265, %r1147;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1413, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1415, %r1413, %r1276, %r1151;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1419, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1421, %r1419, %r1289, %r1155;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1425, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1427, %r1425, %r1300, %r1159;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1431, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1433, %r1431, %r1311, %r1163;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1437, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1439, %r1437, %r1322, %r1167;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1443, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1445, %r1443, %r1335, %r1171;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1449, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1451, %r1449, %r1346, %r1175;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1455, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1457, %r1455, %r1357, %r1179;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1461, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1463, %r1461, %r1368, %r1183;
	// end inline asm
	// begin inline asm
	mov.b32 %r1472, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1483, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1471, %r8020, -2004318072;
	// begin inline asm
	lop3.b32 %r1469, %r678, %r1471, %r1472, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1473, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1474, %r1472, %r1473;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1477, %r1469, %r1474;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1480, %r689, %r1471, %r1483, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1484, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1485, %r1483, %r1484;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1488, %r1480, %r1485;
	// end inline asm
	shr.u32 	%r1493, %r1471, 8;
	// begin inline asm
	lop3.b32 %r1491, %r678, %r1493, %r1472, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1495, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1496, %r1472, %r1495;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1499, %r1491, %r1496;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1502, %r689, %r1493, %r1483, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1506, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1507, %r1483, %r1506;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1510, %r1502, %r1507;
	// end inline asm
	// begin inline asm
	mov.b32 %r1518, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1529, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1517, %r8021, -2004318072;
	// begin inline asm
	lop3.b32 %r1515, %r678, %r1517, %r1518, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1519, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1520, %r1518, %r1519;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1523, %r1515, %r1520;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1526, %r689, %r1517, %r1529, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1530, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1531, %r1529, %r1530;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1534, %r1526, %r1531;
	// end inline asm
	shr.u32 	%r1539, %r1517, 8;
	// begin inline asm
	lop3.b32 %r1537, %r678, %r1539, %r1518, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1541, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1542, %r1518, %r1541;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1545, %r1537, %r1542;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1548, %r689, %r1539, %r1529, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1552, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1553, %r1529, %r1552;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1556, %r1548, %r1553;
	// end inline asm
	// begin inline asm
	mov.b32 %r1564, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1575, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1563, %r8022, -2004318072;
	// begin inline asm
	lop3.b32 %r1561, %r678, %r1563, %r1564, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1565, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1566, %r1564, %r1565;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1569, %r1561, %r1566;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1572, %r689, %r1563, %r1575, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1576, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1577, %r1575, %r1576;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1580, %r1572, %r1577;
	// end inline asm
	shr.u32 	%r1585, %r1563, 8;
	// begin inline asm
	lop3.b32 %r1583, %r678, %r1585, %r1564, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1587, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1588, %r1564, %r1587;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1591, %r1583, %r1588;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1594, %r689, %r1585, %r1575, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1598, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1599, %r1575, %r1598;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1602, %r1594, %r1599;
	// end inline asm
	// begin inline asm
	mov.b32 %r1610, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1621, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1609, %r8023, -2004318072;
	// begin inline asm
	lop3.b32 %r1607, %r678, %r1609, %r1610, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1611, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1612, %r1610, %r1611;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1615, %r1607, %r1612;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1618, %r689, %r1609, %r1621, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1622, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1623, %r1621, %r1622;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1626, %r1618, %r1623;
	// end inline asm
	shr.u32 	%r1631, %r1609, 8;
	// begin inline asm
	lop3.b32 %r1629, %r678, %r1631, %r1610, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1633, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1634, %r1610, %r1633;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1637, %r1629, %r1634;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1640, %r689, %r1631, %r1621, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1644, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1645, %r1621, %r1644;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1648, %r1640, %r1645;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1722, %r256, %r1477, %r1373;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1719, %r256, %r1488, %r1379;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1731, %r256, %r1499, %r1385;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1728, %r256, %r1510, %r1391;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1740, %r256, %r1523, %r1397;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1737, %r256, %r1534, %r1403;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1749, %r256, %r1545, %r1409;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1746, %r256, %r1556, %r1415;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1758, %r256, %r1569, %r1421;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1755, %r256, %r1580, %r1427;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1767, %r256, %r1591, %r1433;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1764, %r256, %r1602, %r1439;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1776, %r256, %r1615, %r1445;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1773, %r256, %r1626, %r1451;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1785, %r256, %r1637, %r1457;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1782, %r256, %r1648, %r1463;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1715, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1717, %r1715, %r1719;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1720, %r302, %r1722, %r1717;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1724, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1726, %r1724, %r1728;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1729, %r302, %r1731, %r1726;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1733, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1735, %r1733, %r1737;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1738, %r302, %r1740, %r1735;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1742, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1744, %r1742, %r1746;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1747, %r302, %r1749, %r1744;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1751, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1753, %r1751, %r1755;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1756, %r302, %r1758, %r1753;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1760, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1762, %r1760, %r1764;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1765, %r302, %r1767, %r1762;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1769, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1771, %r1769, %r1773;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1774, %r302, %r1776, %r1771;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1778, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1780, %r1778, %r1782;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1783, %r302, %r1785, %r1780;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1787, %r305, %r1722;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1790, %r302, %r1719, %r1787;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1794, %r305, %r1731;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1797, %r302, %r1728, %r1794;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1801, %r305, %r1740;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1804, %r302, %r1737, %r1801;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1808, %r305, %r1749;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1811, %r302, %r1746, %r1808;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1815, %r305, %r1758;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1818, %r302, %r1755, %r1815;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1822, %r305, %r1767;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1825, %r302, %r1764, %r1822;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1829, %r305, %r1776;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1832, %r302, %r1773, %r1829;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1836, %r305, %r1785;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1839, %r302, %r1782, %r1836;
	// end inline asm
	mov.u32 	%r1851, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1930, %r1927}, {%r349, %r355, %r352, %r358}, {%r1720, %r1790}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1939, %r1936}, {%r349, %r355, %r352, %r358}, {%r1729, %r1797}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1948, %r1945}, {%r349, %r355, %r352, %r358}, {%r1738, %r1804}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1957, %r1954}, {%r349, %r355, %r352, %r358}, {%r1747, %r1811}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1966, %r1963}, {%r349, %r355, %r352, %r358}, {%r1756, %r1818}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1975, %r1972}, {%r349, %r355, %r352, %r358}, {%r1765, %r1825}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1984, %r1981}, {%r349, %r355, %r352, %r358}, {%r1774, %r1832}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1993, %r1990}, {%r349, %r355, %r352, %r358}, {%r1783, %r1839}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1923, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1925, %r1923, %r1927;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1928, %r393, %r1930, %r1925;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1932, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1934, %r1932, %r1936;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1937, %r393, %r1939, %r1934;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1941, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1943, %r1941, %r1945;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1946, %r393, %r1948, %r1943;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1950, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1952, %r1950, %r1954;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1955, %r393, %r1957, %r1952;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1959, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1961, %r1959, %r1963;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1964, %r393, %r1966, %r1961;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1968, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1970, %r1968, %r1972;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1973, %r393, %r1975, %r1970;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1977, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1979, %r1977, %r1981;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1982, %r393, %r1984, %r1979;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1986, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1988, %r1986, %r1990;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1991, %r393, %r1993, %r1988;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1995, %r396, %r1930;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1998, %r393, %r1927, %r1995;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2002, %r396, %r1939;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2005, %r393, %r1936, %r2002;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2009, %r396, %r1948;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2012, %r393, %r1945, %r2009;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2016, %r396, %r1957;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2019, %r393, %r1954, %r2016;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2023, %r396, %r1966;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2026, %r393, %r1963, %r2023;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2030, %r396, %r1975;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2033, %r393, %r1972, %r2030;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2037, %r396, %r1984;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2040, %r393, %r1981, %r2037;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2044, %r396, %r1993;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2047, %r393, %r1990, %r2044;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2051, %r2052}, {%r427, %r433, %r430, %r436}, {%r1928, %r1998}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2061, %r2062}, {%r427, %r433, %r430, %r436}, {%r1937, %r2005}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2071, %r2072}, {%r427, %r433, %r430, %r436}, {%r1946, %r2012}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2081, %r2082}, {%r427, %r433, %r430, %r436}, {%r1955, %r2019}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2091, %r2092}, {%r427, %r433, %r430, %r436}, {%r1964, %r2026}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2101, %r2102}, {%r427, %r433, %r430, %r436}, {%r1973, %r2033}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2111, %r2112}, {%r427, %r433, %r430, %r436}, {%r1982, %r2040}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2121, %r2122}, {%r427, %r433, %r430, %r436}, {%r1991, %r2047}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2131, %r132, %r2051;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2134, %r132, %r2052;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2137, %r132, %r2061;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2140, %r132, %r2062;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2143, %r132, %r2071;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2146, %r132, %r2072;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2149, %r132, %r2081;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2152, %r132, %r2082;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2155, %r132, %r2091;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2158, %r132, %r2092;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2161, %r132, %r2101;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2164, %r132, %r2102;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2167, %r132, %r2111;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2170, %r132, %r2112;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2173, %r132, %r2121;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2176, %r132, %r2122;
	// end inline asm
	// begin inline asm
	mov.b32 %r2179, {%rs1142, %rs1142};
	// end inline asm
	mov.u16 	%rs195, 18176;
	// begin inline asm
	mov.b32 %r2180, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2181, %r2131, %r2179;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2184, %r2181, %r2180;
	// end inline asm
	// begin inline asm
	mov.b32 %r2187, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2188, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2189, %r2134, %r2187;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2192, %r2189, %r2188;
	// end inline asm
	// begin inline asm
	mov.b32 %r2195, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2196, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2197, %r2137, %r2195;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2200, %r2197, %r2196;
	// end inline asm
	// begin inline asm
	mov.b32 %r2203, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2204, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2205, %r2140, %r2203;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2208, %r2205, %r2204;
	// end inline asm
	// begin inline asm
	mov.b32 %r2211, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2212, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2213, %r2143, %r2211;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2216, %r2213, %r2212;
	// end inline asm
	// begin inline asm
	mov.b32 %r2219, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2220, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2221, %r2146, %r2219;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2224, %r2221, %r2220;
	// end inline asm
	// begin inline asm
	mov.b32 %r2227, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2228, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2229, %r2149, %r2227;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2232, %r2229, %r2228;
	// end inline asm
	// begin inline asm
	mov.b32 %r2235, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2236, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2237, %r2152, %r2235;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2240, %r2237, %r2236;
	// end inline asm
	// begin inline asm
	mov.b32 %r2243, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2244, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2245, %r2155, %r2243;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2248, %r2245, %r2244;
	// end inline asm
	// begin inline asm
	mov.b32 %r2251, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2252, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2253, %r2158, %r2251;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2256, %r2253, %r2252;
	// end inline asm
	// begin inline asm
	mov.b32 %r2259, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2260, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2261, %r2161, %r2259;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2264, %r2261, %r2260;
	// end inline asm
	// begin inline asm
	mov.b32 %r2267, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2268, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2269, %r2164, %r2267;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2272, %r2269, %r2268;
	// end inline asm
	// begin inline asm
	mov.b32 %r2275, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2276, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2277, %r2167, %r2275;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2280, %r2277, %r2276;
	// end inline asm
	// begin inline asm
	mov.b32 %r2283, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2284, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2285, %r2170, %r2283;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2288, %r2285, %r2284;
	// end inline asm
	// begin inline asm
	mov.b32 %r2291, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2292, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2293, %r2173, %r2291;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2296, %r2293, %r2292;
	// end inline asm
	// begin inline asm
	mov.b32 %r2299, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2300, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2301, %r2176, %r2299;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2304, %r2301, %r2300;
	// end inline asm
	// begin inline asm
	mov.b32 %r2310, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2308, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2309, %r2310, %r2308;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2312, %r2184, %r2309;
	// end inline asm
	// begin inline asm
	mov.b32 %r2315, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2316, %r2310, %r2315;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2319, %r2192, %r2316;
	// end inline asm
	// begin inline asm
	mov.b32 %r2322, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2323, %r2310, %r2322;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2326, %r2200, %r2323;
	// end inline asm
	// begin inline asm
	mov.b32 %r2329, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2330, %r2310, %r2329;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2333, %r2208, %r2330;
	// end inline asm
	mov.u32 	%r2339, 25152;
	// begin inline asm
	prmt.b32 %r2336, %r2312, %r2326, %r2339;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2340, %r2319, %r2333, %r2339;
	// end inline asm
	shl.b32 	%r2347, %r2340, 4;
	mov.u32 	%r2345, 252645135;
	// begin inline asm
	lop3.b32 %r2344, %r2345, %r2336, %r2347, 202;
	// end inline asm
	xor.b32  	%r7863, %r2344, -2004318072;
	// begin inline asm
	mov.b32 %r2351, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2349, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2350, %r2351, %r2349;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2353, %r2216, %r2350;
	// end inline asm
	// begin inline asm
	mov.b32 %r2356, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2357, %r2351, %r2356;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2360, %r2224, %r2357;
	// end inline asm
	// begin inline asm
	mov.b32 %r2363, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2364, %r2351, %r2363;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2367, %r2232, %r2364;
	// end inline asm
	// begin inline asm
	mov.b32 %r2370, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2371, %r2351, %r2370;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2374, %r2240, %r2371;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2377, %r2353, %r2367, %r2339;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2381, %r2360, %r2374, %r2339;
	// end inline asm
	shl.b32 	%r2388, %r2381, 4;
	// begin inline asm
	lop3.b32 %r2385, %r2345, %r2377, %r2388, 202;
	// end inline asm
	xor.b32  	%r7864, %r2385, -2004318072;
	// begin inline asm
	mov.b32 %r2392, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2390, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2391, %r2392, %r2390;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2394, %r2248, %r2391;
	// end inline asm
	// begin inline asm
	mov.b32 %r2397, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2398, %r2392, %r2397;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2401, %r2256, %r2398;
	// end inline asm
	// begin inline asm
	mov.b32 %r2404, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2405, %r2392, %r2404;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2408, %r2264, %r2405;
	// end inline asm
	// begin inline asm
	mov.b32 %r2411, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2412, %r2392, %r2411;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2415, %r2272, %r2412;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2418, %r2394, %r2408, %r2339;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2422, %r2401, %r2415, %r2339;
	// end inline asm
	shl.b32 	%r2429, %r2422, 4;
	// begin inline asm
	lop3.b32 %r2426, %r2345, %r2418, %r2429, 202;
	// end inline asm
	xor.b32  	%r7865, %r2426, -2004318072;
	// begin inline asm
	mov.b32 %r2433, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2431, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2432, %r2433, %r2431;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2435, %r2280, %r2432;
	// end inline asm
	// begin inline asm
	mov.b32 %r2438, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2439, %r2433, %r2438;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2442, %r2288, %r2439;
	// end inline asm
	// begin inline asm
	mov.b32 %r2445, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2446, %r2433, %r2445;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2449, %r2296, %r2446;
	// end inline asm
	// begin inline asm
	mov.b32 %r2452, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2453, %r2433, %r2452;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2456, %r2304, %r2453;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2459, %r2435, %r2449, %r2339;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2463, %r2442, %r2456, %r2339;
	// end inline asm
	shl.b32 	%r2470, %r2463, 4;
	// begin inline asm
	lop3.b32 %r2467, %r2345, %r2459, %r2470, 202;
	// end inline asm
	xor.b32  	%r7866, %r2467, -2004318072;
	add.s64 	%rd103, %rd157, %rd11;
	st.shared.u32 	[%rd103], %r7863;
	add.s64 	%rd104, %rd157, %rd10;
	st.shared.u32 	[%rd104], %r7864;
	add.s64 	%rd105, %rd157, %rd14;
	st.shared.u32 	[%rd105], %r7865;
	add.s64 	%rd106, %rd157, %rd12;
	st.shared.u32 	[%rd106], %r7866;
	ld.shared.u32 	%r8012, [%rd99];
	ld.shared.u32 	%r8013, [%rd100];
	ld.shared.u32 	%r8014, [%rd101];
	ld.shared.u32 	%r8015, [%rd102];
	// begin inline asm
	mov.b32 %r2476, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2487, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2475, %r8012, -2004318072;
	// begin inline asm
	lop3.b32 %r2473, %r678, %r2475, %r2476, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2477, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2478, %r2476, %r2477;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2481, %r2473, %r2478;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2484, %r689, %r2475, %r2487, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2488, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2489, %r2487, %r2488;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2492, %r2484, %r2489;
	// end inline asm
	shr.u32 	%r2497, %r2475, 8;
	// begin inline asm
	lop3.b32 %r2495, %r678, %r2497, %r2476, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2499, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2500, %r2476, %r2499;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2503, %r2495, %r2500;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2506, %r689, %r2497, %r2487, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2510, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2511, %r2487, %r2510;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2514, %r2506, %r2511;
	// end inline asm
	// begin inline asm
	mov.b32 %r2522, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2533, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2521, %r8013, -2004318072;
	// begin inline asm
	lop3.b32 %r2519, %r678, %r2521, %r2522, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2523, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2524, %r2522, %r2523;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2527, %r2519, %r2524;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2530, %r689, %r2521, %r2533, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2534, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2535, %r2533, %r2534;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2538, %r2530, %r2535;
	// end inline asm
	shr.u32 	%r2543, %r2521, 8;
	// begin inline asm
	lop3.b32 %r2541, %r678, %r2543, %r2522, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2545, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2546, %r2522, %r2545;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2549, %r2541, %r2546;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2552, %r689, %r2543, %r2533, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2556, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2557, %r2533, %r2556;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2560, %r2552, %r2557;
	// end inline asm
	// begin inline asm
	mov.b32 %r2568, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2579, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2567, %r8014, -2004318072;
	// begin inline asm
	lop3.b32 %r2565, %r678, %r2567, %r2568, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2569, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2570, %r2568, %r2569;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2573, %r2565, %r2570;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2576, %r689, %r2567, %r2579, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2580, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2581, %r2579, %r2580;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2584, %r2576, %r2581;
	// end inline asm
	shr.u32 	%r2589, %r2567, 8;
	// begin inline asm
	lop3.b32 %r2587, %r678, %r2589, %r2568, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2591, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2592, %r2568, %r2591;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2595, %r2587, %r2592;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2598, %r689, %r2589, %r2579, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2602, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2603, %r2579, %r2602;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2606, %r2598, %r2603;
	// end inline asm
	// begin inline asm
	mov.b32 %r2614, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2625, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2613, %r8015, -2004318072;
	// begin inline asm
	lop3.b32 %r2611, %r678, %r2613, %r2614, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2615, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2616, %r2614, %r2615;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2619, %r2611, %r2616;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2622, %r689, %r2613, %r2625, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2626, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2627, %r2625, %r2626;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2630, %r2622, %r2627;
	// end inline asm
	shr.u32 	%r2635, %r2613, 8;
	// begin inline asm
	lop3.b32 %r2633, %r678, %r2635, %r2614, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2637, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2638, %r2614, %r2637;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2641, %r2633, %r2638;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2644, %r689, %r2635, %r2625, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2648, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2649, %r2625, %r2648;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2652, %r2644, %r2649;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2655, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2657, %r2655, %r2481;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2660, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2662, %r2660, %r2492;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2665, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2667, %r2665, %r2503;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2670, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2672, %r2670, %r2514;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2675, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2677, %r2675, %r2527;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2680, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2682, %r2680, %r2538;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2685, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2687, %r2685, %r2549;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2690, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2692, %r2690, %r2560;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2695, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2697, %r2695, %r2573;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2700, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2702, %r2700, %r2584;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2705, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2707, %r2705, %r2595;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2710, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2712, %r2710, %r2606;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2715, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2717, %r2715, %r2619;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2720, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2722, %r2720, %r2630;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2725, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2727, %r2725, %r2641;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2730, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2732, %r2730, %r2652;
	// end inline asm
	// begin inline asm
	mov.b32 %r2740, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2751, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2737, %r678, %r1191, %r2740, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2741, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2742, %r2740, %r2741;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2745, %r2737, %r2742;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2748, %r689, %r1191, %r2751, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2752, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2753, %r2751, %r2752;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2756, %r2748, %r2753;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2759, %r678, %r1213, %r2740, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2763, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2764, %r2740, %r2763;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2767, %r2759, %r2764;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2770, %r689, %r1213, %r2751, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2774, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2775, %r2751, %r2774;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2778, %r2770, %r2775;
	// end inline asm
	// begin inline asm
	mov.b32 %r2786, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2797, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2783, %r678, %r1237, %r2786, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2787, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2788, %r2786, %r2787;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2791, %r2783, %r2788;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2794, %r689, %r1237, %r2797, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2798, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2799, %r2797, %r2798;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2802, %r2794, %r2799;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2805, %r678, %r1259, %r2786, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2809, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2810, %r2786, %r2809;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2813, %r2805, %r2810;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2816, %r689, %r1259, %r2797, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2820, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2821, %r2797, %r2820;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2824, %r2816, %r2821;
	// end inline asm
	// begin inline asm
	mov.b32 %r2832, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2843, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2829, %r678, %r1283, %r2832, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2833, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2834, %r2832, %r2833;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2837, %r2829, %r2834;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2840, %r689, %r1283, %r2843, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2844, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2845, %r2843, %r2844;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2848, %r2840, %r2845;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2851, %r678, %r1305, %r2832, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2855, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2856, %r2832, %r2855;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2859, %r2851, %r2856;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2862, %r689, %r1305, %r2843, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2866, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2867, %r2843, %r2866;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2870, %r2862, %r2867;
	// end inline asm
	// begin inline asm
	mov.b32 %r2878, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2889, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2875, %r678, %r1329, %r2878, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2879, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2880, %r2878, %r2879;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2883, %r2875, %r2880;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2886, %r689, %r1329, %r2889, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2890, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2891, %r2889, %r2890;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2894, %r2886, %r2891;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2897, %r678, %r1351, %r2878, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2901, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2902, %r2878, %r2901;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2905, %r2897, %r2902;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2908, %r689, %r1351, %r2889, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2912, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2913, %r2889, %r2912;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2916, %r2908, %r2913;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2919, %r220, %r2745, %r2657;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2923, %r220, %r2756, %r2662;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2927, %r220, %r2767, %r2667;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2931, %r220, %r2778, %r2672;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2935, %r220, %r2791, %r2677;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2939, %r220, %r2802, %r2682;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2943, %r220, %r2813, %r2687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2947, %r220, %r2824, %r2692;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2951, %r220, %r2837, %r2697;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2955, %r220, %r2848, %r2702;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2959, %r220, %r2859, %r2707;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2963, %r220, %r2870, %r2712;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2967, %r220, %r2883, %r2717;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2971, %r220, %r2894, %r2722;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2975, %r220, %r2905, %r2727;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2979, %r220, %r2916, %r2732;
	// end inline asm
	// begin inline asm
	mov.b32 %r2988, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2999, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2985, %r678, %r1471, %r2988, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2989, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2990, %r2988, %r2989;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2993, %r2985, %r2990;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2996, %r689, %r1471, %r2999, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3000, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3001, %r2999, %r3000;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3004, %r2996, %r3001;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3007, %r678, %r1493, %r2988, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3011, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3012, %r2988, %r3011;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3015, %r3007, %r3012;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3018, %r689, %r1493, %r2999, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3022, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3023, %r2999, %r3022;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3026, %r3018, %r3023;
	// end inline asm
	// begin inline asm
	mov.b32 %r3034, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3045, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3031, %r678, %r1517, %r3034, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3035, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3036, %r3034, %r3035;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3039, %r3031, %r3036;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3042, %r689, %r1517, %r3045, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3046, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3047, %r3045, %r3046;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3050, %r3042, %r3047;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3053, %r678, %r1539, %r3034, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3057, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3058, %r3034, %r3057;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3061, %r3053, %r3058;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3064, %r689, %r1539, %r3045, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3068, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3069, %r3045, %r3068;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3072, %r3064, %r3069;
	// end inline asm
	// begin inline asm
	mov.b32 %r3080, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3091, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3077, %r678, %r1563, %r3080, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3081, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3082, %r3080, %r3081;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3085, %r3077, %r3082;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3088, %r689, %r1563, %r3091, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3092, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3093, %r3091, %r3092;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3096, %r3088, %r3093;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3099, %r678, %r1585, %r3080, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3103, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3104, %r3080, %r3103;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3107, %r3099, %r3104;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3110, %r689, %r1585, %r3091, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3114, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3115, %r3091, %r3114;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3118, %r3110, %r3115;
	// end inline asm
	// begin inline asm
	mov.b32 %r3126, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3137, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3123, %r678, %r1609, %r3126, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3127, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3128, %r3126, %r3127;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3131, %r3123, %r3128;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3134, %r689, %r1609, %r3137, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3138, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3139, %r3137, %r3138;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3142, %r3134, %r3139;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3145, %r678, %r1631, %r3126, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3149, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3150, %r3126, %r3149;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3153, %r3145, %r3150;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3156, %r689, %r1631, %r3137, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3160, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3161, %r3137, %r3160;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3164, %r3156, %r3161;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3167, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3169, %r3167, %r2993, %r2919;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3173, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3175, %r3173, %r3004, %r2923;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3179, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3181, %r3179, %r3015, %r2927;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3185, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3187, %r3185, %r3026, %r2931;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3191, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3193, %r3191, %r3039, %r2935;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3197, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3199, %r3197, %r3050, %r2939;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3203, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3205, %r3203, %r3061, %r2943;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3209, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3211, %r3209, %r3072, %r2947;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3215, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3217, %r3215, %r3085, %r2951;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3221, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3223, %r3221, %r3096, %r2955;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3227, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3229, %r3227, %r3107, %r2959;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3233, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3235, %r3233, %r3118, %r2963;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3239, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3241, %r3239, %r3131, %r2967;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3245, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3247, %r3245, %r3142, %r2971;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3251, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3253, %r3251, %r3153, %r2975;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3257, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3259, %r3257, %r3164, %r2979;
	// end inline asm
	// begin inline asm
	mov.b32 %r3268, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3279, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3265, %r678, %r679, %r3268, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3269, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3270, %r3268, %r3269;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3273, %r3265, %r3270;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3276, %r689, %r679, %r3279, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3280, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3281, %r3279, %r3280;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3284, %r3276, %r3281;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3287, %r678, %r701, %r3268, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3291, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3292, %r3268, %r3291;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3295, %r3287, %r3292;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3298, %r689, %r701, %r3279, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3302, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3303, %r3279, %r3302;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3306, %r3298, %r3303;
	// end inline asm
	// begin inline asm
	mov.b32 %r3314, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3325, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3311, %r678, %r725, %r3314, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3315, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3316, %r3314, %r3315;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3319, %r3311, %r3316;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3322, %r689, %r725, %r3325, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3326, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3327, %r3325, %r3326;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3330, %r3322, %r3327;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3333, %r678, %r747, %r3314, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3337, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3338, %r3314, %r3337;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3341, %r3333, %r3338;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3344, %r689, %r747, %r3325, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3348, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3349, %r3325, %r3348;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3352, %r3344, %r3349;
	// end inline asm
	// begin inline asm
	mov.b32 %r3360, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3371, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3357, %r678, %r771, %r3360, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3361, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3362, %r3360, %r3361;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3365, %r3357, %r3362;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3368, %r689, %r771, %r3371, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3372, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3373, %r3371, %r3372;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3376, %r3368, %r3373;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3379, %r678, %r793, %r3360, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3383, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3384, %r3360, %r3383;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3387, %r3379, %r3384;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3390, %r689, %r793, %r3371, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3394, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3395, %r3371, %r3394;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3398, %r3390, %r3395;
	// end inline asm
	// begin inline asm
	mov.b32 %r3406, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3417, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3403, %r678, %r817, %r3406, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3407, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3408, %r3406, %r3407;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3411, %r3403, %r3408;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3414, %r689, %r817, %r3417, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3418, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3419, %r3417, %r3418;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3422, %r3414, %r3419;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3425, %r678, %r839, %r3406, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3429, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3430, %r3406, %r3429;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3433, %r3425, %r3430;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3436, %r689, %r839, %r3417, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3440, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3441, %r3417, %r3440;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3444, %r3436, %r3441;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3518, %r256, %r3273, %r3169;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3515, %r256, %r3284, %r3175;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3527, %r256, %r3295, %r3181;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3524, %r256, %r3306, %r3187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3536, %r256, %r3319, %r3193;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3533, %r256, %r3330, %r3199;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3545, %r256, %r3341, %r3205;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3542, %r256, %r3352, %r3211;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3554, %r256, %r3365, %r3217;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3551, %r256, %r3376, %r3223;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3563, %r256, %r3387, %r3229;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3560, %r256, %r3398, %r3235;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3572, %r256, %r3411, %r3241;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3569, %r256, %r3422, %r3247;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3581, %r256, %r3433, %r3253;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3578, %r256, %r3444, %r3259;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3511, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3513, %r3511, %r3515;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3516, %r302, %r3518, %r3513;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3520, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3522, %r3520, %r3524;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3525, %r302, %r3527, %r3522;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3529, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3531, %r3529, %r3533;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3534, %r302, %r3536, %r3531;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3538, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3540, %r3538, %r3542;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3543, %r302, %r3545, %r3540;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3547, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3549, %r3547, %r3551;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3552, %r302, %r3554, %r3549;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3556, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3558, %r3556, %r3560;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3561, %r302, %r3563, %r3558;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3565, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3567, %r3565, %r3569;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3570, %r302, %r3572, %r3567;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3574, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3576, %r3574, %r3578;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3579, %r302, %r3581, %r3576;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3583, %r305, %r3518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3586, %r302, %r3515, %r3583;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3590, %r305, %r3527;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3593, %r302, %r3524, %r3590;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3597, %r305, %r3536;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3600, %r302, %r3533, %r3597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3604, %r305, %r3545;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3607, %r302, %r3542, %r3604;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3611, %r305, %r3554;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3614, %r302, %r3551, %r3611;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3618, %r305, %r3563;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3621, %r302, %r3560, %r3618;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3625, %r305, %r3572;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3628, %r302, %r3569, %r3625;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3632, %r305, %r3581;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3635, %r302, %r3578, %r3632;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3726, %r3723}, {%r349, %r355, %r352, %r358}, {%r3516, %r3586}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3735, %r3732}, {%r349, %r355, %r352, %r358}, {%r3525, %r3593}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3744, %r3741}, {%r349, %r355, %r352, %r358}, {%r3534, %r3600}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3753, %r3750}, {%r349, %r355, %r352, %r358}, {%r3543, %r3607}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3762, %r3759}, {%r349, %r355, %r352, %r358}, {%r3552, %r3614}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3771, %r3768}, {%r349, %r355, %r352, %r358}, {%r3561, %r3621}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3780, %r3777}, {%r349, %r355, %r352, %r358}, {%r3570, %r3628}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3789, %r3786}, {%r349, %r355, %r352, %r358}, {%r3579, %r3635}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3719, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3721, %r3719, %r3723;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3724, %r393, %r3726, %r3721;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3728, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3730, %r3728, %r3732;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3733, %r393, %r3735, %r3730;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3737, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3739, %r3737, %r3741;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3742, %r393, %r3744, %r3739;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3746, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3748, %r3746, %r3750;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3751, %r393, %r3753, %r3748;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3755, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3757, %r3755, %r3759;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3760, %r393, %r3762, %r3757;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3764, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3766, %r3764, %r3768;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3769, %r393, %r3771, %r3766;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3773, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3775, %r3773, %r3777;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3778, %r393, %r3780, %r3775;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3782, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3784, %r3782, %r3786;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3787, %r393, %r3789, %r3784;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3791, %r396, %r3726;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3794, %r393, %r3723, %r3791;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3798, %r396, %r3735;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3801, %r393, %r3732, %r3798;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3805, %r396, %r3744;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3808, %r393, %r3741, %r3805;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3812, %r396, %r3753;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3815, %r393, %r3750, %r3812;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3819, %r396, %r3762;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3822, %r393, %r3759, %r3819;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3826, %r396, %r3771;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3829, %r393, %r3768, %r3826;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3833, %r396, %r3780;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3836, %r393, %r3777, %r3833;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3840, %r396, %r3789;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3843, %r393, %r3786, %r3840;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3847, %r3848}, {%r427, %r433, %r430, %r436}, {%r3724, %r3794}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3857, %r3858}, {%r427, %r433, %r430, %r436}, {%r3733, %r3801}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3867, %r3868}, {%r427, %r433, %r430, %r436}, {%r3742, %r3808}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3877, %r3878}, {%r427, %r433, %r430, %r436}, {%r3751, %r3815}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3887, %r3888}, {%r427, %r433, %r430, %r436}, {%r3760, %r3822}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3897, %r3898}, {%r427, %r433, %r430, %r436}, {%r3769, %r3829}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3907, %r3908}, {%r427, %r433, %r430, %r436}, {%r3778, %r3836}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3917, %r3918}, {%r427, %r433, %r430, %r436}, {%r3787, %r3843}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3927, %r132, %r3847;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3930, %r132, %r3848;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3933, %r132, %r3857;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3936, %r132, %r3858;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3939, %r132, %r3867;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3942, %r132, %r3868;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3945, %r132, %r3877;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3948, %r132, %r3878;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3951, %r132, %r3887;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3954, %r132, %r3888;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3957, %r132, %r3897;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3960, %r132, %r3898;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3963, %r132, %r3907;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3966, %r132, %r3908;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3969, %r132, %r3917;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3972, %r132, %r3918;
	// end inline asm
	// begin inline asm
	mov.b32 %r3975, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3976, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3977, %r3927, %r3975;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3980, %r3977, %r3976;
	// end inline asm
	// begin inline asm
	mov.b32 %r3983, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3984, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3985, %r3930, %r3983;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3988, %r3985, %r3984;
	// end inline asm
	// begin inline asm
	mov.b32 %r3991, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3992, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3993, %r3933, %r3991;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3996, %r3993, %r3992;
	// end inline asm
	// begin inline asm
	mov.b32 %r3999, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4000, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4001, %r3936, %r3999;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4004, %r4001, %r4000;
	// end inline asm
	// begin inline asm
	mov.b32 %r4007, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4008, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4009, %r3939, %r4007;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4012, %r4009, %r4008;
	// end inline asm
	// begin inline asm
	mov.b32 %r4015, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4016, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4017, %r3942, %r4015;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4020, %r4017, %r4016;
	// end inline asm
	// begin inline asm
	mov.b32 %r4023, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4024, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4025, %r3945, %r4023;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4028, %r4025, %r4024;
	// end inline asm
	// begin inline asm
	mov.b32 %r4031, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4032, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4033, %r3948, %r4031;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4036, %r4033, %r4032;
	// end inline asm
	// begin inline asm
	mov.b32 %r4039, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4040, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4041, %r3951, %r4039;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4044, %r4041, %r4040;
	// end inline asm
	// begin inline asm
	mov.b32 %r4047, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4048, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4049, %r3954, %r4047;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4052, %r4049, %r4048;
	// end inline asm
	// begin inline asm
	mov.b32 %r4055, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4056, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4057, %r3957, %r4055;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4060, %r4057, %r4056;
	// end inline asm
	// begin inline asm
	mov.b32 %r4063, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4064, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4065, %r3960, %r4063;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4068, %r4065, %r4064;
	// end inline asm
	// begin inline asm
	mov.b32 %r4071, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4072, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4073, %r3963, %r4071;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4076, %r4073, %r4072;
	// end inline asm
	// begin inline asm
	mov.b32 %r4079, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4080, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4081, %r3966, %r4079;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4084, %r4081, %r4080;
	// end inline asm
	// begin inline asm
	mov.b32 %r4087, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4088, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4089, %r3969, %r4087;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4092, %r4089, %r4088;
	// end inline asm
	// begin inline asm
	mov.b32 %r4095, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4096, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4097, %r3972, %r4095;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4100, %r4097, %r4096;
	// end inline asm
	// begin inline asm
	mov.b32 %r4106, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4104, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4105, %r4106, %r4104;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4108, %r3980, %r4105;
	// end inline asm
	// begin inline asm
	mov.b32 %r4111, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4112, %r4106, %r4111;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4115, %r3988, %r4112;
	// end inline asm
	// begin inline asm
	mov.b32 %r4118, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4119, %r4106, %r4118;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4122, %r3996, %r4119;
	// end inline asm
	// begin inline asm
	mov.b32 %r4125, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4126, %r4106, %r4125;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4129, %r4004, %r4126;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4132, %r4108, %r4122, %r2339;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4136, %r4115, %r4129, %r2339;
	// end inline asm
	shl.b32 	%r4143, %r4136, 4;
	// begin inline asm
	lop3.b32 %r4140, %r2345, %r4132, %r4143, 202;
	// end inline asm
	xor.b32  	%r7867, %r4140, -2004318072;
	// begin inline asm
	mov.b32 %r4147, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4145, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4146, %r4147, %r4145;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4149, %r4012, %r4146;
	// end inline asm
	// begin inline asm
	mov.b32 %r4152, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4153, %r4147, %r4152;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4156, %r4020, %r4153;
	// end inline asm
	// begin inline asm
	mov.b32 %r4159, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4160, %r4147, %r4159;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4163, %r4028, %r4160;
	// end inline asm
	// begin inline asm
	mov.b32 %r4166, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4167, %r4147, %r4166;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4170, %r4036, %r4167;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4173, %r4149, %r4163, %r2339;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4177, %r4156, %r4170, %r2339;
	// end inline asm
	shl.b32 	%r4184, %r4177, 4;
	// begin inline asm
	lop3.b32 %r4181, %r2345, %r4173, %r4184, 202;
	// end inline asm
	xor.b32  	%r7868, %r4181, -2004318072;
	// begin inline asm
	mov.b32 %r4188, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4186, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4187, %r4188, %r4186;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4190, %r4044, %r4187;
	// end inline asm
	// begin inline asm
	mov.b32 %r4193, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4194, %r4188, %r4193;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4197, %r4052, %r4194;
	// end inline asm
	// begin inline asm
	mov.b32 %r4200, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4201, %r4188, %r4200;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4204, %r4060, %r4201;
	// end inline asm
	// begin inline asm
	mov.b32 %r4207, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4208, %r4188, %r4207;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4211, %r4068, %r4208;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4214, %r4190, %r4204, %r2339;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4218, %r4197, %r4211, %r2339;
	// end inline asm
	shl.b32 	%r4225, %r4218, 4;
	// begin inline asm
	lop3.b32 %r4222, %r2345, %r4214, %r4225, 202;
	// end inline asm
	xor.b32  	%r7869, %r4222, -2004318072;
	// begin inline asm
	mov.b32 %r4229, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4227, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4228, %r4229, %r4227;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4231, %r4076, %r4228;
	// end inline asm
	// begin inline asm
	mov.b32 %r4234, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4235, %r4229, %r4234;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4238, %r4084, %r4235;
	// end inline asm
	// begin inline asm
	mov.b32 %r4241, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4242, %r4229, %r4241;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4245, %r4092, %r4242;
	// end inline asm
	// begin inline asm
	mov.b32 %r4248, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4249, %r4229, %r4248;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4252, %r4100, %r4249;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4255, %r4231, %r4245, %r2339;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4259, %r4238, %r4252, %r2339;
	// end inline asm
	shl.b32 	%r4266, %r4259, 4;
	// begin inline asm
	lop3.b32 %r4263, %r2345, %r4255, %r4266, 202;
	// end inline asm
	xor.b32  	%r7870, %r4263, -2004318072;
	st.shared.u32 	[%rd103], %r7867;
	st.shared.u32 	[%rd104], %r7868;
	st.shared.u32 	[%rd105], %r7869;
	st.shared.u32 	[%rd106], %r7870;
	ld.shared.u32 	%r8016, [%rd99];
	ld.shared.u32 	%r8017, [%rd100];
	ld.shared.u32 	%r8018, [%rd101];
	ld.shared.u32 	%r8019, [%rd102];
	// begin inline asm
	mov.b32 %r4272, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4283, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4271, %r8016, -2004318072;
	// begin inline asm
	lop3.b32 %r4269, %r678, %r4271, %r4272, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4273, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4274, %r4272, %r4273;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4277, %r4269, %r4274;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4280, %r689, %r4271, %r4283, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4284, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4285, %r4283, %r4284;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4288, %r4280, %r4285;
	// end inline asm
	shr.u32 	%r4293, %r4271, 8;
	// begin inline asm
	lop3.b32 %r4291, %r678, %r4293, %r4272, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4295, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4296, %r4272, %r4295;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4299, %r4291, %r4296;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4302, %r689, %r4293, %r4283, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4306, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4307, %r4283, %r4306;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4310, %r4302, %r4307;
	// end inline asm
	// begin inline asm
	mov.b32 %r4318, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4329, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4317, %r8017, -2004318072;
	// begin inline asm
	lop3.b32 %r4315, %r678, %r4317, %r4318, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4319, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4320, %r4318, %r4319;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4323, %r4315, %r4320;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4326, %r689, %r4317, %r4329, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4330, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4331, %r4329, %r4330;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4334, %r4326, %r4331;
	// end inline asm
	shr.u32 	%r4339, %r4317, 8;
	// begin inline asm
	lop3.b32 %r4337, %r678, %r4339, %r4318, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4341, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4342, %r4318, %r4341;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4345, %r4337, %r4342;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4348, %r689, %r4339, %r4329, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4352, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4353, %r4329, %r4352;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4356, %r4348, %r4353;
	// end inline asm
	// begin inline asm
	mov.b32 %r4364, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4375, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4363, %r8018, -2004318072;
	// begin inline asm
	lop3.b32 %r4361, %r678, %r4363, %r4364, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4365, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4366, %r4364, %r4365;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4369, %r4361, %r4366;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4372, %r689, %r4363, %r4375, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4376, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4377, %r4375, %r4376;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4380, %r4372, %r4377;
	// end inline asm
	shr.u32 	%r4385, %r4363, 8;
	// begin inline asm
	lop3.b32 %r4383, %r678, %r4385, %r4364, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4387, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4388, %r4364, %r4387;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4391, %r4383, %r4388;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4394, %r689, %r4385, %r4375, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4398, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4399, %r4375, %r4398;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4402, %r4394, %r4399;
	// end inline asm
	// begin inline asm
	mov.b32 %r4410, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4421, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4409, %r8019, -2004318072;
	// begin inline asm
	lop3.b32 %r4407, %r678, %r4409, %r4410, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4411, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4412, %r4410, %r4411;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4415, %r4407, %r4412;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4418, %r689, %r4409, %r4421, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4422, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4423, %r4421, %r4422;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4426, %r4418, %r4423;
	// end inline asm
	shr.u32 	%r4431, %r4409, 8;
	// begin inline asm
	lop3.b32 %r4429, %r678, %r4431, %r4410, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4433, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4434, %r4410, %r4433;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4437, %r4429, %r4434;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4440, %r689, %r4431, %r4421, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4444, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4445, %r4421, %r4444;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4448, %r4440, %r4445;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4451, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4453, %r4451, %r4277;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4456, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4458, %r4456, %r4288;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4461, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4463, %r4461, %r4299;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4466, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4468, %r4466, %r4310;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4471, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4473, %r4471, %r4323;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4476, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4478, %r4476, %r4334;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4481, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4483, %r4481, %r4345;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4486, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4488, %r4486, %r4356;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4491, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4493, %r4491, %r4369;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4496, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4498, %r4496, %r4380;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4501, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4503, %r4501, %r4391;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4506, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4508, %r4506, %r4402;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4511, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4513, %r4511, %r4415;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4516, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4518, %r4516, %r4426;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4521, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4523, %r4521, %r4437;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4526, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4528, %r4526, %r4448;
	// end inline asm
	// begin inline asm
	mov.b32 %r4536, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4547, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4533, %r678, %r1471, %r4536, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4537, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4538, %r4536, %r4537;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4541, %r4533, %r4538;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4544, %r689, %r1471, %r4547, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4548, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4549, %r4547, %r4548;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4552, %r4544, %r4549;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4555, %r678, %r1493, %r4536, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4559, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4560, %r4536, %r4559;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4563, %r4555, %r4560;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4566, %r689, %r1493, %r4547, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4570, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4571, %r4547, %r4570;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4574, %r4566, %r4571;
	// end inline asm
	// begin inline asm
	mov.b32 %r4582, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4593, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4579, %r678, %r1517, %r4582, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4583, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4584, %r4582, %r4583;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4587, %r4579, %r4584;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4590, %r689, %r1517, %r4593, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4594, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4595, %r4593, %r4594;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4598, %r4590, %r4595;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4601, %r678, %r1539, %r4582, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4605, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4606, %r4582, %r4605;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4609, %r4601, %r4606;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4612, %r689, %r1539, %r4593, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4616, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4617, %r4593, %r4616;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4620, %r4612, %r4617;
	// end inline asm
	// begin inline asm
	mov.b32 %r4628, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4639, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4625, %r678, %r1563, %r4628, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4629, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4630, %r4628, %r4629;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4633, %r4625, %r4630;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4636, %r689, %r1563, %r4639, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4640, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4641, %r4639, %r4640;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4644, %r4636, %r4641;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4647, %r678, %r1585, %r4628, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4651, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4652, %r4628, %r4651;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4655, %r4647, %r4652;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4658, %r689, %r1585, %r4639, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4662, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4663, %r4639, %r4662;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4666, %r4658, %r4663;
	// end inline asm
	// begin inline asm
	mov.b32 %r4674, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4685, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4671, %r678, %r1609, %r4674, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4675, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4676, %r4674, %r4675;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4679, %r4671, %r4676;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4682, %r689, %r1609, %r4685, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4686, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4687, %r4685, %r4686;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4690, %r4682, %r4687;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4693, %r678, %r1631, %r4674, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4697, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4698, %r4674, %r4697;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4701, %r4693, %r4698;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4704, %r689, %r1631, %r4685, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4708, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4709, %r4685, %r4708;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4712, %r4704, %r4709;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4715, %r220, %r4541, %r4453;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4719, %r220, %r4552, %r4458;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4723, %r220, %r4563, %r4463;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4727, %r220, %r4574, %r4468;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4731, %r220, %r4587, %r4473;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4735, %r220, %r4598, %r4478;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4739, %r220, %r4609, %r4483;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4743, %r220, %r4620, %r4488;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4747, %r220, %r4633, %r4493;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4751, %r220, %r4644, %r4498;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4755, %r220, %r4655, %r4503;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4759, %r220, %r4666, %r4508;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4763, %r220, %r4679, %r4513;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4767, %r220, %r4690, %r4518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4771, %r220, %r4701, %r4523;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4775, %r220, %r4712, %r4528;
	// end inline asm
	// begin inline asm
	mov.b32 %r4784, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4795, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4781, %r678, %r679, %r4784, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4785, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4786, %r4784, %r4785;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4789, %r4781, %r4786;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4792, %r689, %r679, %r4795, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4796, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4797, %r4795, %r4796;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4800, %r4792, %r4797;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4803, %r678, %r701, %r4784, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4807, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4808, %r4784, %r4807;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4811, %r4803, %r4808;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4814, %r689, %r701, %r4795, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4818, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4819, %r4795, %r4818;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4822, %r4814, %r4819;
	// end inline asm
	// begin inline asm
	mov.b32 %r4830, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4841, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4827, %r678, %r725, %r4830, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4831, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4832, %r4830, %r4831;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4835, %r4827, %r4832;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4838, %r689, %r725, %r4841, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4842, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4843, %r4841, %r4842;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4846, %r4838, %r4843;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4849, %r678, %r747, %r4830, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4853, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4854, %r4830, %r4853;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4857, %r4849, %r4854;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4860, %r689, %r747, %r4841, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4864, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4865, %r4841, %r4864;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4868, %r4860, %r4865;
	// end inline asm
	// begin inline asm
	mov.b32 %r4876, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4887, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4873, %r678, %r771, %r4876, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4877, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4878, %r4876, %r4877;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4881, %r4873, %r4878;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4884, %r689, %r771, %r4887, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4888, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4889, %r4887, %r4888;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4892, %r4884, %r4889;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4895, %r678, %r793, %r4876, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4899, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4900, %r4876, %r4899;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4903, %r4895, %r4900;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4906, %r689, %r793, %r4887, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4910, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4911, %r4887, %r4910;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4914, %r4906, %r4911;
	// end inline asm
	// begin inline asm
	mov.b32 %r4922, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4933, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4919, %r678, %r817, %r4922, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4923, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4924, %r4922, %r4923;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4927, %r4919, %r4924;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4930, %r689, %r817, %r4933, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4934, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4935, %r4933, %r4934;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4938, %r4930, %r4935;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4941, %r678, %r839, %r4922, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4945, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4946, %r4922, %r4945;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4949, %r4941, %r4946;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4952, %r689, %r839, %r4933, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4956, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4957, %r4933, %r4956;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4960, %r4952, %r4957;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4963, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4965, %r4963, %r4789, %r4715;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4969, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4971, %r4969, %r4800, %r4719;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4975, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4977, %r4975, %r4811, %r4723;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4981, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4983, %r4981, %r4822, %r4727;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4987, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4989, %r4987, %r4835, %r4731;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4993, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4995, %r4993, %r4846, %r4735;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4999, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5001, %r4999, %r4857, %r4739;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5005, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5007, %r5005, %r4868, %r4743;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5011, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5013, %r5011, %r4881, %r4747;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5017, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5019, %r5017, %r4892, %r4751;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5023, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5025, %r5023, %r4903, %r4755;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5029, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5031, %r5029, %r4914, %r4759;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5035, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5037, %r5035, %r4927, %r4763;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5041, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5043, %r5041, %r4938, %r4767;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5047, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5049, %r5047, %r4949, %r4771;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5053, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5055, %r5053, %r4960, %r4775;
	// end inline asm
	// begin inline asm
	mov.b32 %r5064, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5075, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5061, %r678, %r2475, %r5064, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5065, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5066, %r5064, %r5065;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5069, %r5061, %r5066;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5072, %r689, %r2475, %r5075, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5076, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5077, %r5075, %r5076;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5080, %r5072, %r5077;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5083, %r678, %r2497, %r5064, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5087, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5088, %r5064, %r5087;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5091, %r5083, %r5088;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5094, %r689, %r2497, %r5075, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5098, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5099, %r5075, %r5098;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5102, %r5094, %r5099;
	// end inline asm
	// begin inline asm
	mov.b32 %r5110, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5121, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5107, %r678, %r2521, %r5110, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5111, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5112, %r5110, %r5111;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5115, %r5107, %r5112;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5118, %r689, %r2521, %r5121, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5122, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5123, %r5121, %r5122;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5126, %r5118, %r5123;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5129, %r678, %r2543, %r5110, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5133, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5134, %r5110, %r5133;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5137, %r5129, %r5134;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5140, %r689, %r2543, %r5121, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5144, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5145, %r5121, %r5144;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5148, %r5140, %r5145;
	// end inline asm
	// begin inline asm
	mov.b32 %r5156, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5167, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5153, %r678, %r2567, %r5156, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5157, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5158, %r5156, %r5157;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5161, %r5153, %r5158;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5164, %r689, %r2567, %r5167, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5168, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5169, %r5167, %r5168;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5172, %r5164, %r5169;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5175, %r678, %r2589, %r5156, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5179, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5180, %r5156, %r5179;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5183, %r5175, %r5180;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5186, %r689, %r2589, %r5167, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5190, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5191, %r5167, %r5190;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5194, %r5186, %r5191;
	// end inline asm
	// begin inline asm
	mov.b32 %r5202, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5213, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5199, %r678, %r2613, %r5202, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5203, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5204, %r5202, %r5203;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5207, %r5199, %r5204;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5210, %r689, %r2613, %r5213, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5214, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5215, %r5213, %r5214;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5218, %r5210, %r5215;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5221, %r678, %r2635, %r5202, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5225, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5226, %r5202, %r5225;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5229, %r5221, %r5226;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5232, %r689, %r2635, %r5213, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5236, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5237, %r5213, %r5236;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5240, %r5232, %r5237;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5314, %r256, %r5069, %r4965;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5311, %r256, %r5080, %r4971;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5323, %r256, %r5091, %r4977;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5320, %r256, %r5102, %r4983;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5332, %r256, %r5115, %r4989;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5329, %r256, %r5126, %r4995;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5341, %r256, %r5137, %r5001;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5338, %r256, %r5148, %r5007;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5350, %r256, %r5161, %r5013;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5347, %r256, %r5172, %r5019;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5359, %r256, %r5183, %r5025;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5356, %r256, %r5194, %r5031;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5368, %r256, %r5207, %r5037;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5365, %r256, %r5218, %r5043;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5377, %r256, %r5229, %r5049;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5374, %r256, %r5240, %r5055;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5307, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5309, %r5307, %r5311;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5312, %r302, %r5314, %r5309;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5316, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5318, %r5316, %r5320;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5321, %r302, %r5323, %r5318;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5325, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5327, %r5325, %r5329;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5330, %r302, %r5332, %r5327;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5334, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5336, %r5334, %r5338;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5339, %r302, %r5341, %r5336;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5343, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5345, %r5343, %r5347;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5348, %r302, %r5350, %r5345;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5352, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5354, %r5352, %r5356;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5357, %r302, %r5359, %r5354;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5361, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5363, %r5361, %r5365;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5366, %r302, %r5368, %r5363;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5370, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5372, %r5370, %r5374;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5375, %r302, %r5377, %r5372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5379, %r305, %r5314;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5382, %r302, %r5311, %r5379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5386, %r305, %r5323;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5389, %r302, %r5320, %r5386;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5393, %r305, %r5332;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5396, %r302, %r5329, %r5393;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5400, %r305, %r5341;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5403, %r302, %r5338, %r5400;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5407, %r305, %r5350;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5410, %r302, %r5347, %r5407;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5414, %r305, %r5359;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5417, %r302, %r5356, %r5414;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5421, %r305, %r5368;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5424, %r302, %r5365, %r5421;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5428, %r305, %r5377;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5431, %r302, %r5374, %r5428;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5522, %r5519}, {%r349, %r355, %r352, %r358}, {%r5312, %r5382}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5531, %r5528}, {%r349, %r355, %r352, %r358}, {%r5321, %r5389}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5540, %r5537}, {%r349, %r355, %r352, %r358}, {%r5330, %r5396}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5549, %r5546}, {%r349, %r355, %r352, %r358}, {%r5339, %r5403}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5558, %r5555}, {%r349, %r355, %r352, %r358}, {%r5348, %r5410}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5567, %r5564}, {%r349, %r355, %r352, %r358}, {%r5357, %r5417}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5576, %r5573}, {%r349, %r355, %r352, %r358}, {%r5366, %r5424}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5585, %r5582}, {%r349, %r355, %r352, %r358}, {%r5375, %r5431}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5515, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5517, %r5515, %r5519;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5520, %r393, %r5522, %r5517;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5524, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5526, %r5524, %r5528;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5529, %r393, %r5531, %r5526;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5533, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5535, %r5533, %r5537;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5538, %r393, %r5540, %r5535;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5542, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5544, %r5542, %r5546;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5547, %r393, %r5549, %r5544;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5551, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5553, %r5551, %r5555;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5556, %r393, %r5558, %r5553;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5560, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5562, %r5560, %r5564;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5565, %r393, %r5567, %r5562;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5569, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5571, %r5569, %r5573;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5574, %r393, %r5576, %r5571;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5578, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5580, %r5578, %r5582;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5583, %r393, %r5585, %r5580;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5587, %r396, %r5522;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5590, %r393, %r5519, %r5587;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5594, %r396, %r5531;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5597, %r393, %r5528, %r5594;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5601, %r396, %r5540;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5604, %r393, %r5537, %r5601;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5608, %r396, %r5549;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5611, %r393, %r5546, %r5608;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5615, %r396, %r5558;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5618, %r393, %r5555, %r5615;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5622, %r396, %r5567;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5625, %r393, %r5564, %r5622;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5629, %r396, %r5576;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5632, %r393, %r5573, %r5629;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5636, %r396, %r5585;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5639, %r393, %r5582, %r5636;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5643, %r5644}, {%r427, %r433, %r430, %r436}, {%r5520, %r5590}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5653, %r5654}, {%r427, %r433, %r430, %r436}, {%r5529, %r5597}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5663, %r5664}, {%r427, %r433, %r430, %r436}, {%r5538, %r5604}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5673, %r5674}, {%r427, %r433, %r430, %r436}, {%r5547, %r5611}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5683, %r5684}, {%r427, %r433, %r430, %r436}, {%r5556, %r5618}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5693, %r5694}, {%r427, %r433, %r430, %r436}, {%r5565, %r5625}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5703, %r5704}, {%r427, %r433, %r430, %r436}, {%r5574, %r5632}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5713, %r5714}, {%r427, %r433, %r430, %r436}, {%r5583, %r5639}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5723, %r132, %r5643;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5726, %r132, %r5644;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5729, %r132, %r5653;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5732, %r132, %r5654;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5735, %r132, %r5663;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5738, %r132, %r5664;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5741, %r132, %r5673;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5744, %r132, %r5674;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5747, %r132, %r5683;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5750, %r132, %r5684;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5753, %r132, %r5693;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5756, %r132, %r5694;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5759, %r132, %r5703;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5762, %r132, %r5704;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5765, %r132, %r5713;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5768, %r132, %r5714;
	// end inline asm
	// begin inline asm
	mov.b32 %r5771, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5772, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5773, %r5723, %r5771;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5776, %r5773, %r5772;
	// end inline asm
	// begin inline asm
	mov.b32 %r5779, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5780, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5781, %r5726, %r5779;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5784, %r5781, %r5780;
	// end inline asm
	// begin inline asm
	mov.b32 %r5787, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5788, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5789, %r5729, %r5787;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5792, %r5789, %r5788;
	// end inline asm
	// begin inline asm
	mov.b32 %r5795, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5796, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5797, %r5732, %r5795;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5800, %r5797, %r5796;
	// end inline asm
	// begin inline asm
	mov.b32 %r5803, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5804, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5805, %r5735, %r5803;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5808, %r5805, %r5804;
	// end inline asm
	// begin inline asm
	mov.b32 %r5811, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5812, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5813, %r5738, %r5811;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5816, %r5813, %r5812;
	// end inline asm
	// begin inline asm
	mov.b32 %r5819, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5820, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5821, %r5741, %r5819;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5824, %r5821, %r5820;
	// end inline asm
	// begin inline asm
	mov.b32 %r5827, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5828, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5829, %r5744, %r5827;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5832, %r5829, %r5828;
	// end inline asm
	// begin inline asm
	mov.b32 %r5835, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5836, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5837, %r5747, %r5835;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5840, %r5837, %r5836;
	// end inline asm
	// begin inline asm
	mov.b32 %r5843, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5844, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5845, %r5750, %r5843;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5848, %r5845, %r5844;
	// end inline asm
	// begin inline asm
	mov.b32 %r5851, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5852, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5853, %r5753, %r5851;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5856, %r5853, %r5852;
	// end inline asm
	// begin inline asm
	mov.b32 %r5859, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5860, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5861, %r5756, %r5859;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5864, %r5861, %r5860;
	// end inline asm
	// begin inline asm
	mov.b32 %r5867, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5868, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5869, %r5759, %r5867;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5872, %r5869, %r5868;
	// end inline asm
	// begin inline asm
	mov.b32 %r5875, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5876, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5877, %r5762, %r5875;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5880, %r5877, %r5876;
	// end inline asm
	// begin inline asm
	mov.b32 %r5883, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5884, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5885, %r5765, %r5883;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5888, %r5885, %r5884;
	// end inline asm
	// begin inline asm
	mov.b32 %r5891, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5892, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5893, %r5768, %r5891;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5896, %r5893, %r5892;
	// end inline asm
	// begin inline asm
	mov.b32 %r5902, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5900, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5901, %r5902, %r5900;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5904, %r5776, %r5901;
	// end inline asm
	// begin inline asm
	mov.b32 %r5907, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5908, %r5902, %r5907;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5911, %r5784, %r5908;
	// end inline asm
	// begin inline asm
	mov.b32 %r5914, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5915, %r5902, %r5914;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5918, %r5792, %r5915;
	// end inline asm
	// begin inline asm
	mov.b32 %r5921, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5922, %r5902, %r5921;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5925, %r5800, %r5922;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5928, %r5904, %r5918, %r2339;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5932, %r5911, %r5925, %r2339;
	// end inline asm
	shl.b32 	%r5939, %r5932, 4;
	// begin inline asm
	lop3.b32 %r5936, %r2345, %r5928, %r5939, 202;
	// end inline asm
	xor.b32  	%r7871, %r5936, -2004318072;
	// begin inline asm
	mov.b32 %r5943, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5941, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5942, %r5943, %r5941;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5945, %r5808, %r5942;
	// end inline asm
	// begin inline asm
	mov.b32 %r5948, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5949, %r5943, %r5948;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5952, %r5816, %r5949;
	// end inline asm
	// begin inline asm
	mov.b32 %r5955, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5956, %r5943, %r5955;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5959, %r5824, %r5956;
	// end inline asm
	// begin inline asm
	mov.b32 %r5962, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5963, %r5943, %r5962;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5966, %r5832, %r5963;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5969, %r5945, %r5959, %r2339;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5973, %r5952, %r5966, %r2339;
	// end inline asm
	shl.b32 	%r5980, %r5973, 4;
	// begin inline asm
	lop3.b32 %r5977, %r2345, %r5969, %r5980, 202;
	// end inline asm
	xor.b32  	%r7872, %r5977, -2004318072;
	// begin inline asm
	mov.b32 %r5984, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5982, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5983, %r5984, %r5982;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5986, %r5840, %r5983;
	// end inline asm
	// begin inline asm
	mov.b32 %r5989, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5990, %r5984, %r5989;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5993, %r5848, %r5990;
	// end inline asm
	// begin inline asm
	mov.b32 %r5996, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5997, %r5984, %r5996;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6000, %r5856, %r5997;
	// end inline asm
	// begin inline asm
	mov.b32 %r6003, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6004, %r5984, %r6003;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6007, %r5864, %r6004;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6010, %r5986, %r6000, %r2339;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6014, %r5993, %r6007, %r2339;
	// end inline asm
	shl.b32 	%r6021, %r6014, 4;
	// begin inline asm
	lop3.b32 %r6018, %r2345, %r6010, %r6021, 202;
	// end inline asm
	xor.b32  	%r7873, %r6018, -2004318072;
	// begin inline asm
	mov.b32 %r6025, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6023, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6024, %r6025, %r6023;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6027, %r5872, %r6024;
	// end inline asm
	// begin inline asm
	mov.b32 %r6030, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6031, %r6025, %r6030;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6034, %r5880, %r6031;
	// end inline asm
	// begin inline asm
	mov.b32 %r6037, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6038, %r6025, %r6037;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6041, %r5888, %r6038;
	// end inline asm
	// begin inline asm
	mov.b32 %r6044, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6045, %r6025, %r6044;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6048, %r5896, %r6045;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6051, %r6027, %r6041, %r2339;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6055, %r6034, %r6048, %r2339;
	// end inline asm
	shl.b32 	%r6062, %r6055, 4;
	// begin inline asm
	lop3.b32 %r6059, %r2345, %r6051, %r6062, 202;
	// end inline asm
	xor.b32  	%r7874, %r6059, -2004318072;
	st.shared.u32 	[%rd103], %r7871;
	st.shared.u32 	[%rd104], %r7872;
	st.shared.u32 	[%rd105], %r7873;
	st.shared.u32 	[%rd106], %r7874;
	ld.shared.u32 	%r8020, [%rd99];
	ld.shared.u32 	%r8021, [%rd100];
	ld.shared.u32 	%r8022, [%rd101];
	ld.shared.u32 	%r8023, [%rd102];
	// begin inline asm
	mov.b32 %r6068, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6079, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6067, %r8020, -2004318072;
	// begin inline asm
	lop3.b32 %r6065, %r678, %r6067, %r6068, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6069, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6070, %r6068, %r6069;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6073, %r6065, %r6070;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6076, %r689, %r6067, %r6079, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6080, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6081, %r6079, %r6080;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6084, %r6076, %r6081;
	// end inline asm
	shr.u32 	%r6089, %r6067, 8;
	// begin inline asm
	lop3.b32 %r6087, %r678, %r6089, %r6068, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6091, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6092, %r6068, %r6091;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6095, %r6087, %r6092;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6098, %r689, %r6089, %r6079, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6102, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6103, %r6079, %r6102;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6106, %r6098, %r6103;
	// end inline asm
	// begin inline asm
	mov.b32 %r6114, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6125, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6113, %r8021, -2004318072;
	// begin inline asm
	lop3.b32 %r6111, %r678, %r6113, %r6114, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6115, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6116, %r6114, %r6115;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6119, %r6111, %r6116;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6122, %r689, %r6113, %r6125, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6126, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6127, %r6125, %r6126;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6130, %r6122, %r6127;
	// end inline asm
	shr.u32 	%r6135, %r6113, 8;
	// begin inline asm
	lop3.b32 %r6133, %r678, %r6135, %r6114, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6137, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6138, %r6114, %r6137;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6141, %r6133, %r6138;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6144, %r689, %r6135, %r6125, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6148, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6149, %r6125, %r6148;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6152, %r6144, %r6149;
	// end inline asm
	// begin inline asm
	mov.b32 %r6160, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6171, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6159, %r8022, -2004318072;
	// begin inline asm
	lop3.b32 %r6157, %r678, %r6159, %r6160, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6161, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6162, %r6160, %r6161;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6165, %r6157, %r6162;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6168, %r689, %r6159, %r6171, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6172, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6173, %r6171, %r6172;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6176, %r6168, %r6173;
	// end inline asm
	shr.u32 	%r6181, %r6159, 8;
	// begin inline asm
	lop3.b32 %r6179, %r678, %r6181, %r6160, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6183, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6184, %r6160, %r6183;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6187, %r6179, %r6184;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6190, %r689, %r6181, %r6171, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6194, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6195, %r6171, %r6194;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6198, %r6190, %r6195;
	// end inline asm
	// begin inline asm
	mov.b32 %r6206, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6217, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6205, %r8023, -2004318072;
	// begin inline asm
	lop3.b32 %r6203, %r678, %r6205, %r6206, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6207, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6208, %r6206, %r6207;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6211, %r6203, %r6208;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6214, %r689, %r6205, %r6217, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6218, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6219, %r6217, %r6218;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6222, %r6214, %r6219;
	// end inline asm
	shr.u32 	%r6227, %r6205, 8;
	// begin inline asm
	lop3.b32 %r6225, %r678, %r6227, %r6206, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6229, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6230, %r6206, %r6229;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6233, %r6225, %r6230;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6236, %r689, %r6227, %r6217, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6240, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6241, %r6217, %r6240;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6244, %r6236, %r6241;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6247, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6249, %r6247, %r6073;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6252, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6254, %r6252, %r6084;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6257, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6259, %r6257, %r6095;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6262, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6264, %r6262, %r6106;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6267, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6269, %r6267, %r6119;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6272, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6274, %r6272, %r6130;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6277, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6279, %r6277, %r6141;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6282, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6284, %r6282, %r6152;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6287, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6289, %r6287, %r6165;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6292, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6294, %r6292, %r6176;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6297, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6299, %r6297, %r6187;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6302, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6304, %r6302, %r6198;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6307, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6309, %r6307, %r6211;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6312, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6314, %r6312, %r6222;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6317, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6319, %r6317, %r6233;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6322, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6324, %r6322, %r6244;
	// end inline asm
	// begin inline asm
	mov.b32 %r6332, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6343, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6329, %r678, %r679, %r6332, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6333, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6334, %r6332, %r6333;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6337, %r6329, %r6334;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6340, %r689, %r679, %r6343, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6344, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6345, %r6343, %r6344;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6348, %r6340, %r6345;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6351, %r678, %r701, %r6332, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6355, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6356, %r6332, %r6355;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6359, %r6351, %r6356;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6362, %r689, %r701, %r6343, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6366, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6367, %r6343, %r6366;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6370, %r6362, %r6367;
	// end inline asm
	// begin inline asm
	mov.b32 %r6378, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6389, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6375, %r678, %r725, %r6378, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6379, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6380, %r6378, %r6379;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6383, %r6375, %r6380;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6386, %r689, %r725, %r6389, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6390, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6391, %r6389, %r6390;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6394, %r6386, %r6391;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6397, %r678, %r747, %r6378, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6401, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6402, %r6378, %r6401;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6405, %r6397, %r6402;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6408, %r689, %r747, %r6389, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6412, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6413, %r6389, %r6412;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6416, %r6408, %r6413;
	// end inline asm
	// begin inline asm
	mov.b32 %r6424, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6435, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6421, %r678, %r771, %r6424, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6425, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6426, %r6424, %r6425;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6429, %r6421, %r6426;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6432, %r689, %r771, %r6435, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6436, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6437, %r6435, %r6436;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6440, %r6432, %r6437;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6443, %r678, %r793, %r6424, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6447, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6448, %r6424, %r6447;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6451, %r6443, %r6448;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6454, %r689, %r793, %r6435, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6458, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6459, %r6435, %r6458;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6462, %r6454, %r6459;
	// end inline asm
	// begin inline asm
	mov.b32 %r6470, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6481, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6467, %r678, %r817, %r6470, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6471, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6472, %r6470, %r6471;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6475, %r6467, %r6472;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6478, %r689, %r817, %r6481, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6482, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6483, %r6481, %r6482;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6486, %r6478, %r6483;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6489, %r678, %r839, %r6470, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6493, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6494, %r6470, %r6493;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6497, %r6489, %r6494;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6500, %r689, %r839, %r6481, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6504, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6505, %r6481, %r6504;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6508, %r6500, %r6505;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6511, %r220, %r6337, %r6249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6515, %r220, %r6348, %r6254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6519, %r220, %r6359, %r6259;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6523, %r220, %r6370, %r6264;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6527, %r220, %r6383, %r6269;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6531, %r220, %r6394, %r6274;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6535, %r220, %r6405, %r6279;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6539, %r220, %r6416, %r6284;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6543, %r220, %r6429, %r6289;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6547, %r220, %r6440, %r6294;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6551, %r220, %r6451, %r6299;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6555, %r220, %r6462, %r6304;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6559, %r220, %r6475, %r6309;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6563, %r220, %r6486, %r6314;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6567, %r220, %r6497, %r6319;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6571, %r220, %r6508, %r6324;
	// end inline asm
	// begin inline asm
	mov.b32 %r6580, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6591, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6577, %r678, %r2475, %r6580, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6581, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6582, %r6580, %r6581;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6585, %r6577, %r6582;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6588, %r689, %r2475, %r6591, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6592, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6593, %r6591, %r6592;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6596, %r6588, %r6593;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6599, %r678, %r2497, %r6580, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6603, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6604, %r6580, %r6603;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6607, %r6599, %r6604;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6610, %r689, %r2497, %r6591, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6614, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6615, %r6591, %r6614;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6618, %r6610, %r6615;
	// end inline asm
	// begin inline asm
	mov.b32 %r6626, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6637, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6623, %r678, %r2521, %r6626, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6627, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6628, %r6626, %r6627;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6631, %r6623, %r6628;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6634, %r689, %r2521, %r6637, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6638, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6639, %r6637, %r6638;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6642, %r6634, %r6639;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6645, %r678, %r2543, %r6626, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6649, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6650, %r6626, %r6649;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6653, %r6645, %r6650;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6656, %r689, %r2543, %r6637, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6660, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6661, %r6637, %r6660;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6664, %r6656, %r6661;
	// end inline asm
	// begin inline asm
	mov.b32 %r6672, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6683, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6669, %r678, %r2567, %r6672, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6673, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6674, %r6672, %r6673;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6677, %r6669, %r6674;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6680, %r689, %r2567, %r6683, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6684, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6685, %r6683, %r6684;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6688, %r6680, %r6685;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6691, %r678, %r2589, %r6672, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6695, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6696, %r6672, %r6695;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6699, %r6691, %r6696;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6702, %r689, %r2589, %r6683, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6706, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6707, %r6683, %r6706;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6710, %r6702, %r6707;
	// end inline asm
	// begin inline asm
	mov.b32 %r6718, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6729, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6715, %r678, %r2613, %r6718, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6719, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6720, %r6718, %r6719;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6723, %r6715, %r6720;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6726, %r689, %r2613, %r6729, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6730, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6731, %r6729, %r6730;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6734, %r6726, %r6731;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6737, %r678, %r2635, %r6718, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6741, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6742, %r6718, %r6741;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6745, %r6737, %r6742;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6748, %r689, %r2635, %r6729, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6752, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6753, %r6729, %r6752;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6756, %r6748, %r6753;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6759, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6761, %r6759, %r6585, %r6511;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6765, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6767, %r6765, %r6596, %r6515;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6771, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6773, %r6771, %r6607, %r6519;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6777, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6779, %r6777, %r6618, %r6523;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6783, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6785, %r6783, %r6631, %r6527;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6789, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6791, %r6789, %r6642, %r6531;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6795, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6797, %r6795, %r6653, %r6535;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6801, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6803, %r6801, %r6664, %r6539;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6807, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6809, %r6807, %r6677, %r6543;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6813, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6815, %r6813, %r6688, %r6547;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6819, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6821, %r6819, %r6699, %r6551;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6825, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6827, %r6825, %r6710, %r6555;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6831, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6833, %r6831, %r6723, %r6559;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6837, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6839, %r6837, %r6734, %r6563;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6843, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6845, %r6843, %r6745, %r6567;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6849, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6851, %r6849, %r6756, %r6571;
	// end inline asm
	// begin inline asm
	mov.b32 %r6860, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6871, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6857, %r678, %r4271, %r6860, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6861, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6862, %r6860, %r6861;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6865, %r6857, %r6862;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6868, %r689, %r4271, %r6871, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6872, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6873, %r6871, %r6872;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6876, %r6868, %r6873;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6879, %r678, %r4293, %r6860, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6883, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6884, %r6860, %r6883;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6887, %r6879, %r6884;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6890, %r689, %r4293, %r6871, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6894, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6895, %r6871, %r6894;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6898, %r6890, %r6895;
	// end inline asm
	// begin inline asm
	mov.b32 %r6906, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6917, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6903, %r678, %r4317, %r6906, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6907, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6908, %r6906, %r6907;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6911, %r6903, %r6908;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6914, %r689, %r4317, %r6917, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6918, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6919, %r6917, %r6918;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6922, %r6914, %r6919;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6925, %r678, %r4339, %r6906, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6929, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6930, %r6906, %r6929;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6933, %r6925, %r6930;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6936, %r689, %r4339, %r6917, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6940, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6941, %r6917, %r6940;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6944, %r6936, %r6941;
	// end inline asm
	// begin inline asm
	mov.b32 %r6952, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6963, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6949, %r678, %r4363, %r6952, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6953, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6954, %r6952, %r6953;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6957, %r6949, %r6954;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6960, %r689, %r4363, %r6963, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6964, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6965, %r6963, %r6964;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6968, %r6960, %r6965;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6971, %r678, %r4385, %r6952, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6975, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6976, %r6952, %r6975;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6979, %r6971, %r6976;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6982, %r689, %r4385, %r6963, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6986, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6987, %r6963, %r6986;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6990, %r6982, %r6987;
	// end inline asm
	// begin inline asm
	mov.b32 %r6998, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7009, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6995, %r678, %r4409, %r6998, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6999, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7000, %r6998, %r6999;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r7003, %r6995, %r7000;
	// end inline asm
	// begin inline asm
	lop3.b32 %r7006, %r689, %r4409, %r7009, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r7010, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7011, %r7009, %r7010;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r7014, %r7006, %r7011;
	// end inline asm
	// begin inline asm
	lop3.b32 %r7017, %r678, %r4431, %r6998, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r7021, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7022, %r6998, %r7021;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r7025, %r7017, %r7022;
	// end inline asm
	// begin inline asm
	lop3.b32 %r7028, %r689, %r4431, %r7009, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r7032, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7033, %r7009, %r7032;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r7036, %r7028, %r7033;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7110, %r256, %r6865, %r6761;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7107, %r256, %r6876, %r6767;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7119, %r256, %r6887, %r6773;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7116, %r256, %r6898, %r6779;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7128, %r256, %r6911, %r6785;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7125, %r256, %r6922, %r6791;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7137, %r256, %r6933, %r6797;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7134, %r256, %r6944, %r6803;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7146, %r256, %r6957, %r6809;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7143, %r256, %r6968, %r6815;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7155, %r256, %r6979, %r6821;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7152, %r256, %r6990, %r6827;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7164, %r256, %r7003, %r6833;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7161, %r256, %r7014, %r6839;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7173, %r256, %r7025, %r6845;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7170, %r256, %r7036, %r6851;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7103, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7105, %r7103, %r7107;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7108, %r302, %r7110, %r7105;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7112, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7114, %r7112, %r7116;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7117, %r302, %r7119, %r7114;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7121, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7123, %r7121, %r7125;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7126, %r302, %r7128, %r7123;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7130, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7132, %r7130, %r7134;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7135, %r302, %r7137, %r7132;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7139, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7141, %r7139, %r7143;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7144, %r302, %r7146, %r7141;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7148, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7150, %r7148, %r7152;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7153, %r302, %r7155, %r7150;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7157, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7159, %r7157, %r7161;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7162, %r302, %r7164, %r7159;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7166, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7168, %r7166, %r7170;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7171, %r302, %r7173, %r7168;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7175, %r305, %r7110;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7178, %r302, %r7107, %r7175;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7182, %r305, %r7119;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7185, %r302, %r7116, %r7182;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7189, %r305, %r7128;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7192, %r302, %r7125, %r7189;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7196, %r305, %r7137;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7199, %r302, %r7134, %r7196;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7203, %r305, %r7146;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7206, %r302, %r7143, %r7203;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7210, %r305, %r7155;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7213, %r302, %r7152, %r7210;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7217, %r305, %r7164;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7220, %r302, %r7161, %r7217;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7224, %r305, %r7173;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7227, %r302, %r7170, %r7224;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7318, %r7315}, {%r349, %r355, %r352, %r358}, {%r7108, %r7178}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7327, %r7324}, {%r349, %r355, %r352, %r358}, {%r7117, %r7185}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7336, %r7333}, {%r349, %r355, %r352, %r358}, {%r7126, %r7192}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7345, %r7342}, {%r349, %r355, %r352, %r358}, {%r7135, %r7199}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7354, %r7351}, {%r349, %r355, %r352, %r358}, {%r7144, %r7206}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7363, %r7360}, {%r349, %r355, %r352, %r358}, {%r7153, %r7213}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7372, %r7369}, {%r349, %r355, %r352, %r358}, {%r7162, %r7220}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7381, %r7378}, {%r349, %r355, %r352, %r358}, {%r7171, %r7227}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7311, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7313, %r7311, %r7315;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7316, %r393, %r7318, %r7313;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7320, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7322, %r7320, %r7324;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7325, %r393, %r7327, %r7322;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7329, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7331, %r7329, %r7333;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7334, %r393, %r7336, %r7331;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7338, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7340, %r7338, %r7342;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7343, %r393, %r7345, %r7340;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7347, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7349, %r7347, %r7351;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7352, %r393, %r7354, %r7349;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7356, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7358, %r7356, %r7360;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7361, %r393, %r7363, %r7358;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7365, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7367, %r7365, %r7369;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7370, %r393, %r7372, %r7367;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7374, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7376, %r7374, %r7378;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7379, %r393, %r7381, %r7376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7383, %r396, %r7318;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7386, %r393, %r7315, %r7383;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7390, %r396, %r7327;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7393, %r393, %r7324, %r7390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7397, %r396, %r7336;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7400, %r393, %r7333, %r7397;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7404, %r396, %r7345;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7407, %r393, %r7342, %r7404;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7411, %r396, %r7354;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7414, %r393, %r7351, %r7411;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7418, %r396, %r7363;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7421, %r393, %r7360, %r7418;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7425, %r396, %r7372;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7428, %r393, %r7369, %r7425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7432, %r396, %r7381;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7435, %r393, %r7378, %r7432;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7439, %r7440}, {%r427, %r433, %r430, %r436}, {%r7316, %r7386}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7449, %r7450}, {%r427, %r433, %r430, %r436}, {%r7325, %r7393}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7459, %r7460}, {%r427, %r433, %r430, %r436}, {%r7334, %r7400}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7469, %r7470}, {%r427, %r433, %r430, %r436}, {%r7343, %r7407}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7479, %r7480}, {%r427, %r433, %r430, %r436}, {%r7352, %r7414}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7489, %r7490}, {%r427, %r433, %r430, %r436}, {%r7361, %r7421}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7499, %r7500}, {%r427, %r433, %r430, %r436}, {%r7370, %r7428}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7509, %r7510}, {%r427, %r433, %r430, %r436}, {%r7379, %r7435}, {%r1851, %r1851};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7519, %r132, %r7439;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7522, %r132, %r7440;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7525, %r132, %r7449;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7528, %r132, %r7450;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7531, %r132, %r7459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7534, %r132, %r7460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7537, %r132, %r7469;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7540, %r132, %r7470;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7543, %r132, %r7479;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7546, %r132, %r7480;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7549, %r132, %r7489;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7552, %r132, %r7490;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7555, %r132, %r7499;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7558, %r132, %r7500;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7561, %r132, %r7509;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7564, %r132, %r7510;
	// end inline asm
	// begin inline asm
	mov.b32 %r7567, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7568, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7569, %r7519, %r7567;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7572, %r7569, %r7568;
	// end inline asm
	// begin inline asm
	mov.b32 %r7575, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7576, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7577, %r7522, %r7575;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7580, %r7577, %r7576;
	// end inline asm
	// begin inline asm
	mov.b32 %r7583, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7584, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7585, %r7525, %r7583;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7588, %r7585, %r7584;
	// end inline asm
	// begin inline asm
	mov.b32 %r7591, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7592, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7593, %r7528, %r7591;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7596, %r7593, %r7592;
	// end inline asm
	// begin inline asm
	mov.b32 %r7599, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7600, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7601, %r7531, %r7599;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7604, %r7601, %r7600;
	// end inline asm
	// begin inline asm
	mov.b32 %r7607, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7608, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7609, %r7534, %r7607;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7612, %r7609, %r7608;
	// end inline asm
	// begin inline asm
	mov.b32 %r7615, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7616, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7617, %r7537, %r7615;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7620, %r7617, %r7616;
	// end inline asm
	// begin inline asm
	mov.b32 %r7623, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7624, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7625, %r7540, %r7623;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7628, %r7625, %r7624;
	// end inline asm
	// begin inline asm
	mov.b32 %r7631, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7632, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7633, %r7543, %r7631;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7636, %r7633, %r7632;
	// end inline asm
	// begin inline asm
	mov.b32 %r7639, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7640, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7641, %r7546, %r7639;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7644, %r7641, %r7640;
	// end inline asm
	// begin inline asm
	mov.b32 %r7647, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7648, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7649, %r7549, %r7647;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7652, %r7649, %r7648;
	// end inline asm
	// begin inline asm
	mov.b32 %r7655, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7656, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7657, %r7552, %r7655;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7660, %r7657, %r7656;
	// end inline asm
	// begin inline asm
	mov.b32 %r7663, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7664, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7665, %r7555, %r7663;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7668, %r7665, %r7664;
	// end inline asm
	// begin inline asm
	mov.b32 %r7671, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7672, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7673, %r7558, %r7671;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7676, %r7673, %r7672;
	// end inline asm
	// begin inline asm
	mov.b32 %r7679, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7680, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7681, %r7561, %r7679;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7684, %r7681, %r7680;
	// end inline asm
	// begin inline asm
	mov.b32 %r7687, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7688, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7689, %r7564, %r7687;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7692, %r7689, %r7688;
	// end inline asm
	// begin inline asm
	mov.b32 %r7698, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7696, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7697, %r7698, %r7696;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7700, %r7572, %r7697;
	// end inline asm
	// begin inline asm
	mov.b32 %r7703, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7704, %r7698, %r7703;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7707, %r7580, %r7704;
	// end inline asm
	// begin inline asm
	mov.b32 %r7710, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7711, %r7698, %r7710;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7714, %r7588, %r7711;
	// end inline asm
	// begin inline asm
	mov.b32 %r7717, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7718, %r7698, %r7717;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7721, %r7596, %r7718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7724, %r7700, %r7714, %r2339;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7728, %r7707, %r7721, %r2339;
	// end inline asm
	shl.b32 	%r7735, %r7728, 4;
	// begin inline asm
	lop3.b32 %r7732, %r2345, %r7724, %r7735, 202;
	// end inline asm
	xor.b32  	%r7875, %r7732, -2004318072;
	// begin inline asm
	mov.b32 %r7739, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7737, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7738, %r7739, %r7737;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7741, %r7604, %r7738;
	// end inline asm
	// begin inline asm
	mov.b32 %r7744, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7745, %r7739, %r7744;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7748, %r7612, %r7745;
	// end inline asm
	// begin inline asm
	mov.b32 %r7751, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7752, %r7739, %r7751;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7755, %r7620, %r7752;
	// end inline asm
	// begin inline asm
	mov.b32 %r7758, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7759, %r7739, %r7758;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7762, %r7628, %r7759;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7765, %r7741, %r7755, %r2339;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7769, %r7748, %r7762, %r2339;
	// end inline asm
	shl.b32 	%r7776, %r7769, 4;
	// begin inline asm
	lop3.b32 %r7773, %r2345, %r7765, %r7776, 202;
	// end inline asm
	xor.b32  	%r7876, %r7773, -2004318072;
	// begin inline asm
	mov.b32 %r7780, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7778, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7779, %r7780, %r7778;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7782, %r7636, %r7779;
	// end inline asm
	// begin inline asm
	mov.b32 %r7785, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7786, %r7780, %r7785;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7789, %r7644, %r7786;
	// end inline asm
	// begin inline asm
	mov.b32 %r7792, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7793, %r7780, %r7792;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7796, %r7652, %r7793;
	// end inline asm
	// begin inline asm
	mov.b32 %r7799, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7800, %r7780, %r7799;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7803, %r7660, %r7800;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7806, %r7782, %r7796, %r2339;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7810, %r7789, %r7803, %r2339;
	// end inline asm
	shl.b32 	%r7817, %r7810, 4;
	// begin inline asm
	lop3.b32 %r7814, %r2345, %r7806, %r7817, 202;
	// end inline asm
	xor.b32  	%r7877, %r7814, -2004318072;
	// begin inline asm
	mov.b32 %r7821, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7819, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7820, %r7821, %r7819;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7823, %r7668, %r7820;
	// end inline asm
	// begin inline asm
	mov.b32 %r7826, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7827, %r7821, %r7826;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7830, %r7676, %r7827;
	// end inline asm
	// begin inline asm
	mov.b32 %r7833, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7834, %r7821, %r7833;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7837, %r7684, %r7834;
	// end inline asm
	// begin inline asm
	mov.b32 %r7840, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7841, %r7821, %r7840;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7844, %r7692, %r7841;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7847, %r7823, %r7837, %r2339;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7851, %r7830, %r7844, %r2339;
	// end inline asm
	shl.b32 	%r7858, %r7851, 4;
	// begin inline asm
	lop3.b32 %r7855, %r2345, %r7847, %r7858, 202;
	// end inline asm
	xor.b32  	%r7878, %r7855, -2004318072;
	st.shared.u32 	[%rd103], %r7875;
	st.shared.u32 	[%rd104], %r7876;
	st.shared.u32 	[%rd105], %r7877;
	st.shared.u32 	[%rd106], %r7878;
	add.s32 	%r8011, %r8011, -64;
	add.s64 	%rd157, %rd157, 8324;
	setp.eq.s32 	%p238, %r8011, 0;
	@%p238 bra 	LBB0_119;
	bra.uni 	LBB0_118;
LBB0_119:                               // %guard_pass15294
                                        //   in Loop: Header=BB0_117 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r7884, [%rd7];
	ld.shared.u32 	%r7885, [%rd8+128];
	ld.shared.u32 	%r7892, [%rd8+4];
	ld.shared.u32 	%r7893, [%rd8+132];
	ld.shared.u32 	%r7900, [%rd8+8324];
	ld.shared.u32 	%r7901, [%rd8+8452];
	ld.shared.u32 	%r7908, [%rd8+8328];
	ld.shared.u32 	%r7909, [%rd8+8456];
	ld.shared.u32 	%r7916, [%rd8+16648];
	ld.shared.u32 	%r7917, [%rd8+16776];
	ld.shared.u32 	%r7924, [%rd8+16652];
	ld.shared.u32 	%r7925, [%rd8+16780];
	ld.shared.u32 	%r7932, [%rd8+24972];
	ld.shared.u32 	%r7933, [%rd8+25100];
	ld.shared.u32 	%r7940, [%rd8+24976];
	ld.shared.u32 	%r7941, [%rd8+25104];
	// begin inline asm
	prmt.b32 %r7879, %r7884, %r7885, %r589;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7883, %r7884, %r7885, %r593;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7887, %r7892, %r7893, %r589;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7891, %r7892, %r7893, %r593;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7895, %r7900, %r7901, %r589;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7899, %r7900, %r7901, %r593;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7903, %r7908, %r7909, %r589;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7907, %r7908, %r7909, %r593;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7911, %r7916, %r7917, %r589;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7915, %r7916, %r7917, %r593;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7919, %r7924, %r7925, %r589;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7923, %r7924, %r7925, %r593;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7927, %r7932, %r7933, %r589;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7931, %r7932, %r7933, %r593;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7935, %r7940, %r7941, %r589;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7939, %r7940, %r7941, %r593;
	// end inline asm
	selp.b32 	%r7943, %r7883, %r7879, %p225;
	shfl.sync.bfly.b32	%r166, %r7943, 8, 31, -1;
	selp.b32 	%r7944, %r7891, %r7887, %p225;
	shfl.sync.bfly.b32	%r167, %r7944, 8, 31, -1;
	selp.b32 	%r7945, %r7899, %r7895, %p225;
	shfl.sync.bfly.b32	%r7946, %r7945, 8, 31, -1;
	selp.b32 	%r7947, %r7907, %r7903, %p225;
	shfl.sync.bfly.b32	%r7948, %r7947, 8, 31, -1;
	selp.b32 	%r7949, %r7915, %r7911, %p225;
	shfl.sync.bfly.b32	%r7950, %r7949, 8, 31, -1;
	selp.b32 	%r7951, %r7923, %r7919, %p225;
	shfl.sync.bfly.b32	%r7952, %r7951, 8, 31, -1;
	selp.b32 	%r7953, %r7931, %r7927, %p225;
	shfl.sync.bfly.b32	%r7954, %r7953, 8, 31, -1;
	selp.b32 	%r7955, %r7939, %r7935, %p225;
	shfl.sync.bfly.b32	%r7956, %r7955, 8, 31, -1;
	and.b32  	%r180, %r85, 256;
	setp.eq.s32 	%p240, %r180, 0;
	shl.b32 	%r7984, %r85, 12;
	@%p240 bra 	LBB0_121;
// %bb.120:                             // %L45460
                                        //   in Loop: Header=BB0_117 Depth=1
	selp.b32 	%r7957, %r167, %r7891, %p225;
	selp.b32 	%r7958, %r7887, %r167, %p225;
	selp.b32 	%r7959, %r166, %r7883, %p225;
	selp.b32 	%r7960, %r7879, %r166, %p225;
	or.b32  	%r7962, %r79, %r7984;
	or.b32  	%r7963, %r7962, %r83;
	or.b32  	%r7964, %r7963, %r84;
	cvt.u64.u32 	%rd107, %r7964;
	add.s64 	%rd108, %rd107, %rd9;
	shr.u64 	%rd109, %rd108, 39;
	add.s64 	%rd110, %rd108, %rd109;
	shr.s64 	%rd111, %rd110, 25;
	and.b64  	%rd112, %rd110, -33554432;
	setp.ne.s64 	%p242, %rd112, %rd108;
	setp.lt.s64 	%p243, %rd108, 0;
	and.pred  	%p244, %p243, %p242;
	selp.u64 	%rd113, 1, 0, %p244;
	sub.s64 	%rd114, %rd113, %rd111;
	shl.b64 	%rd115, %rd114, 25;
	add.s64 	%rd116, %rd115, %rd108;
	shl.b64 	%rd117, %rd116, 2;
	add.s64 	%rd118, %rd3, %rd117;
	st.global.v4.u32 	[%rd118], {%r7960, %r7958, %r7959, %r7957};
LBB0_121:                               // %pass14801
                                        //   in Loop: Header=BB0_117 Depth=1
	or.b32  	%r7965, %r180, 64;
	setp.gt.u32 	%p245, %r7965, 191;
	@%p245 bra 	LBB0_122;
	bra.uni 	LBB0_123;
LBB0_122:                               // %L45682
                                        //   in Loop: Header=BB0_117 Depth=1
	selp.b32 	%r168, %r7895, %r7946, %p225;
	selp.b32 	%r169, %r7946, %r7899, %p225;
	selp.b32 	%r170, %r7903, %r7948, %p225;
	selp.b32 	%r171, %r7948, %r7907, %p225;
	or.b32  	%r7967, %r7984, %r79;
	or.b32  	%r7968, %r7967, %r83;
	or.b32  	%r7969, %r7968, %r84;
	or.b32  	%r7970, %r7969, 262144;
	cvt.s64.s32 	%rd119, %r7970;
	add.s64 	%rd120, %rd119, %rd9;
	shr.u64 	%rd121, %rd120, 39;
	add.s64 	%rd122, %rd120, %rd121;
	shr.s64 	%rd123, %rd122, 25;
	and.b64  	%rd124, %rd122, -33554432;
	setp.ne.s64 	%p246, %rd124, %rd120;
	setp.lt.s64 	%p247, %rd120, 0;
	and.pred  	%p248, %p247, %p246;
	selp.u64 	%rd125, 1, 0, %p248;
	sub.s64 	%rd126, %rd125, %rd123;
	shl.b64 	%rd127, %rd126, 25;
	add.s64 	%rd128, %rd127, %rd120;
	shl.b64 	%rd129, %rd128, 2;
	add.s64 	%rd130, %rd3, %rd129;
	st.global.v4.u32 	[%rd130], {%r168, %r170, %r169, %r171};
LBB0_123:                               // %pass14890
                                        //   in Loop: Header=BB0_117 Depth=1
	selp.b32 	%r176, %r7927, %r7954, %p225;
	selp.b32 	%r177, %r7954, %r7931, %p225;
	selp.b32 	%r178, %r7935, %r7956, %p225;
	selp.b32 	%r179, %r7956, %r7939, %p225;
	or.b32  	%r7971, %r180, 128;
	setp.gt.u32 	%p249, %r7971, 191;
	or.b32  	%r7985, %r7984, %r79;
	@%p249 bra 	LBB0_124;
	bra.uni 	LBB0_125;
LBB0_124:                               // %L45905
                                        //   in Loop: Header=BB0_117 Depth=1
	selp.b32 	%r172, %r7911, %r7950, %p225;
	selp.b32 	%r173, %r7950, %r7915, %p225;
	selp.b32 	%r174, %r7919, %r7952, %p225;
	selp.b32 	%r175, %r7952, %r7923, %p225;
	or.b32  	%r7973, %r7985, %r83;
	or.b32  	%r7974, %r7973, %r84;
	or.b32  	%r7975, %r7974, 524288;
	cvt.s64.s32 	%rd131, %r7975;
	add.s64 	%rd132, %rd131, %rd9;
	shr.u64 	%rd133, %rd132, 39;
	add.s64 	%rd134, %rd132, %rd133;
	shr.s64 	%rd135, %rd134, 25;
	and.b64  	%rd136, %rd134, -33554432;
	setp.ne.s64 	%p250, %rd136, %rd132;
	setp.lt.s64 	%p251, %rd132, 0;
	and.pred  	%p252, %p251, %p250;
	selp.u64 	%rd137, 1, 0, %p252;
	sub.s64 	%rd138, %rd137, %rd135;
	shl.b64 	%rd139, %rd138, 25;
	add.s64 	%rd140, %rd139, %rd132;
	shl.b64 	%rd141, %rd140, 2;
	add.s64 	%rd142, %rd3, %rd141;
	st.global.v4.u32 	[%rd142], {%r172, %r174, %r173, %r175};
	bra.uni 	LBB0_125;
LBB0_126:                               // %L46358
	st.global.u32 	[%rd4], %r7983;
	ret;
LBB0_7:                                 // %L291
	mov.u32 	%r7982, 2;
	st.global.u32 	[%rd4], %r7982;
	mov.u64 	%rd155, exception3390;
	cvta.global.u64 	%rd156, %rd155;
	{ // callseq 13, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd156;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 13
	{ // callseq 14, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd20;
	st.param.b32 	[param0+8], %r181;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 14
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_1:                                 // %L9
	mov.u64 	%rd41, exception1;
	cvta.global.u64 	%rd42, %rd41;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd42;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd20;
	st.param.b32 	[param0+8], %r181;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_128:                               // %L46469
	mov.u64 	%rd50, exception1;
	cvta.global.u64 	%rd51, %rd50;
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd51;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 3
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd20;
	st.param.b32 	[param0+8], %r181;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 4
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_127:                               // %L46466
	mov.u64 	%rd56, exception1;
	cvta.global.u64 	%rd57, %rd56;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd57;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd20;
	st.param.b32 	[param0+8], %r181;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_153:                               // %L46463
	mov.u64 	%rd70, exception1;
	cvta.global.u64 	%rd71, %rd70;
	{ // callseq 11, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd71;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 11
	{ // callseq 12, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd20;
	st.param.b32 	[param0+8], %r181;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 12
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
