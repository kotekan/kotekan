// PTX kernel code for the CUDA upchannelizer
// This file has been generated automatically by `upchan.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for upchan(::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.func julia_AssertionError_11685
()
.noreturn
{
	trap;
}
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.func  (.param .b64 func_retval0) julia_power_by_squaring_11696
(
	.param .align 8 .b8 julia_power_by_squaring_11696_param_0[16],
	.param .b64 julia_power_by_squaring_11696_param_1,
	.param .b64 julia_power_by_squaring_11696_param_2
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception3405[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<263>;
	.reg .b16 	%rs<1185>;
	.reg .b32 	%r<8041>;
	.reg .f32 	%f<914>;
	.reg .b64 	%rd<178>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r185, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd36, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r190, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r190, 66815;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd37, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	ld.param.u32 	%r186, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r191, %r2, 9;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r192, %r191, %r1;
	or.b32  	%r193, %r192, %r4;
	mul.wide.u32 	%rd43, %r193, 4;
	add.s64 	%rd4, %rd37, %rd43;
	mov.u32 	%r194, 1;
	st.global.u32 	[%rd4], %r194;
	setp.lt.s32 	%p2, %r186, 0;
	@%p2 bra 	$L__BB0_7;
// %bb.3:                               // %L115
	ld.param.u32 	%r187, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p3, %r187, %r186;
	setp.gt.s32 	%p4, %r187, 262144;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_7;
// %bb.4:                               // %L125
	ld.param.u32 	%r188, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r195, %r187, %r186;
	and.b32  	%r196, %r195, 255;
	setp.ne.s32 	%p6, %r196, 0;
	setp.lt.s32 	%p7, %r188, 0;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L131
	ld.param.u32 	%r189, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.lt.s32 	%p9, %r189, %r188;
	setp.gt.s32 	%p10, %r189, 4096;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L141
	not.b32 	%r197, %r188;
	add.s32 	%r198, %r197, %r189;
	and.b32  	%r199, %r198, 3;
	setp.eq.s32 	%p12, %r199, 0;
	@%p12 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_7;
$L__BB0_8:                              // %pass145
	bfe.u32 	%r120, %r1, 2, 1;
	shr.u32 	%r121, %r1, 4;
	shl.b32 	%r206, %r121, 1;
	shl.b32 	%r207, %r120, 2;
	shl.b32 	%r208, %r1, 3;
	and.b32  	%r209, %r208, 24;
	or.b32  	%r210, %r207, %r209;
	or.b32  	%r211, %r206, %r210;
	bfe.u32 	%r212, %r1, 3, 1;
	or.b32  	%r123, %r212, %r211;
	or.b32  	%r124, %r123, 32;
	mov.f32 	%f181, 0f40000000;
	mov.f32 	%f182, 0f437F0000;
	div.approx.f32 	%f153, %f182, %f181;
	cvt.rn.f32.s32 	%f183, %r123;
	sub.f32 	%f184, %f183, %f153;
	mov.f32 	%f213, 0f42800000;
	div.approx.f32 	%f155, %f184, %f213;
	setp.ne.f32 	%p18, %f155, 0f00000000;
	mov.f32 	%f881, 0f3F800000;
	mov.f32 	%f874, %f881;
	@%p18 bra 	$L__BB0_9;
	bra.uni 	$L__BB0_10;
$L__BB0_9:                              // %L484
	sin.approx.f32 	%f214, %f155;
	div.approx.f32 	%f874, %f214, %f155;
$L__BB0_10:                             // %L487
	cvt.rn.f32.s32 	%f217, %r124;
	sub.f32 	%f218, %f217, %f153;
	div.approx.f32 	%f5, %f218, %f213;
	setp.eq.f32 	%p24, %f5, 0f00000000;
	mov.f32 	%f875, %f881;
	@%p24 bra 	$L__BB0_12;
// %bb.11:                              // %L504
	sin.approx.f32 	%f248, %f5;
	div.approx.f32 	%f875, %f248, %f5;
$L__BB0_12:                             // %L507
	or.b32  	%r230, %r123, 64;
	or.b32  	%r6, %r123, 96;
	cvt.rn.f32.s32 	%f252, %r230;
	sub.f32 	%f253, %f252, %f153;
	div.approx.f32 	%f9, %f253, %f213;
	setp.eq.f32 	%p30, %f9, 0f00000000;
	mov.f32 	%f876, %f881;
	@%p30 bra 	$L__BB0_14;
// %bb.13:                              // %L586
	sin.approx.f32 	%f283, %f9;
	div.approx.f32 	%f876, %f283, %f9;
$L__BB0_14:                             // %L589
	shl.b32 	%r200, %r2, 3;
	cvt.rn.f32.s32 	%f286, %r6;
	sub.f32 	%f287, %f286, %f153;
	div.approx.f32 	%f14, %f287, %f213;
	setp.eq.f32 	%p36, %f14, 0f00000000;
	mov.f32 	%f877, %f881;
	@%p36 bra 	$L__BB0_16;
// %bb.15:                              // %L606
	sin.approx.f32 	%f317, %f14;
	div.approx.f32 	%f877, %f317, %f14;
$L__BB0_16:                             // %L609
	and.b32  	%r111, %r200, 960;
	shl.b32 	%r112, %r1, 1;
	and.b32  	%r117, %r1, 18;
	or.b32  	%r248, %r123, 128;
	or.b32  	%r8, %r123, 160;
	cvt.rn.f32.s32 	%f321, %r248;
	sub.f32 	%f322, %f321, %f153;
	div.approx.f32 	%f18, %f322, %f213;
	setp.eq.f32 	%p42, %f18, 0f00000000;
	mov.f32 	%f878, %f881;
	@%p42 bra 	$L__BB0_18;
// %bb.17:                              // %L688
	sin.approx.f32 	%f352, %f18;
	div.approx.f32 	%f878, %f352, %f18;
$L__BB0_18:                             // %L691
	and.b32  	%r113, %r112, 8;
	shl.b32 	%r114, %r1, 2;
	or.b32  	%r201, %r117, %r111;
	cvt.rn.f32.s32 	%f355, %r8;
	sub.f32 	%f356, %f355, %f153;
	div.approx.f32 	%f23, %f356, %f213;
	setp.eq.f32 	%p48, %f23, 0f00000000;
	mov.f32 	%f879, %f881;
	@%p48 bra 	$L__BB0_20;
// %bb.19:                              // %L708
	sin.approx.f32 	%f386, %f23;
	div.approx.f32 	%f879, %f386, %f23;
$L__BB0_20:                             // %L711
	and.b32  	%r115, %r114, 32;
	or.b32  	%r202, %r201, %r113;
	or.b32  	%r266, %r123, 192;
	or.b32  	%r10, %r123, 224;
	cvt.rn.f32.s32 	%f390, %r266;
	sub.f32 	%f391, %f390, %f153;
	div.approx.f32 	%f27, %f391, %f213;
	setp.eq.f32 	%p54, %f27, 0f00000000;
	mov.f32 	%f880, %f881;
	@%p54 bra 	$L__BB0_22;
// %bb.21:                              // %L790
	sin.approx.f32 	%f421, %f27;
	div.approx.f32 	%f880, %f421, %f27;
$L__BB0_22:                             // %L793
	and.b32  	%r116, %r114, 4;
	or.b32  	%r203, %r202, %r115;
	cvt.rn.f32.s32 	%f424, %r10;
	sub.f32 	%f425, %f424, %f153;
	div.approx.f32 	%f32, %f425, %f213;
	setp.eq.f32 	%p60, %f32, 0f00000000;
	@%p60 bra 	$L__BB0_24;
// %bb.23:                              // %L810
	sin.approx.f32 	%f455, %f32;
	div.approx.f32 	%f881, %f455, %f32;
$L__BB0_24:                             // %L813
	or.b32  	%r204, %r203, %r116;
	mul.lo.s32 	%r12, %r123, 63;
	cvt.rn.f32.s32 	%f458, %r12;
	div.approx.f32 	%f35, %f458, %f213;
	abs.f32 	%f884, %f35;
	setp.lt.f32 	%p61, %f884, 0f40000000;
	@%p61 bra 	$L__BB0_36;
// %bb.25:
	setp.gtu.f32 	%p62, %f884, 0f4B800000;
	@%p62 bra 	$L__BB0_32;
	bra.uni 	$L__BB0_26;
$L__BB0_32:
	mov.b32 	%r14, %f884;
	and.b32  	%r284, %r14, 8388607;
	or.b32  	%r7997, %r284, 1065353216;
	mov.b32 	%f883, %r7997;
	add.s32 	%r285, %r14, -1073741824;
	and.b32  	%r7998, %r285, -8388608;
	setp.eq.s32 	%p68, %r7998, 0;
	@%p68 bra 	$L__BB0_35;
// %bb.33:                              // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f469, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f468,%f469;
	// end inline asm
$L__BB0_34:                             // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r286, %r7998, 192937984;
	add.s32 	%r287, %r7997, %r286;
	mov.b32 	%f470, %r287;
	mul.f32 	%f471, %f468, %f470;
	sub.f32 	%f472, %f470, %f471;
	fma.rn.f32 	%f473, %f472, %f468, %f471;
	sub.f32 	%f474, %f470, %f473;
	fma.rz.f32 	%f475, %f474, %f468, %f473;
	cvt.rzi.f32.f32 	%f476, %f475;
	sub.f32 	%f883, %f470, %f476;
	sub.s32 	%r7998, %r7998, %r286;
	mov.b32 	%r7997, %f883;
	setp.ne.s32 	%p69, %r7998, 0;
	setp.ne.s32 	%p70, %r7997, 0;
	and.pred  	%p71, %p69, %p70;
	@%p71 bra 	$L__BB0_34;
$L__BB0_35:                             // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p72, %r14, 2139095039;
	selp.f32 	%f477, 0f7FFFFFFF, 0f4B800000, %p72;
	mul.f32 	%f478, %f883, 0f34000000;
	mul.f32 	%f884, %f477, %f478;
	bra.uni 	$L__BB0_36;
$L__BB0_26:                             // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f461, %f884, %f181;
	cvt.rzi.f32.f32 	%f882, %f461;
	fma.rn.f32 	%f38, %f882, 0fC0000000, %f884;
	mov.b32 	%r13, %f38;
	setp.lt.u32 	%p63, %r13, 1073741824;
	@%p63 bra 	$L__BB0_31;
// %bb.27:
	setp.lt.u32 	%p64, %r13, -2147483647;
	@%p64 bra 	$L__BB0_29;
// %bb.28:
	add.f32 	%f466, %f882, 0fBF800000;
	setp.lt.f32 	%p67, %f38, 0fC0000000;
	add.f32 	%f467, %f466, 0fBF800000;
	selp.f32 	%f882, %f467, %f466, %p67;
	bra.uni 	$L__BB0_31;
$L__BB0_29:
	add.f32 	%f882, %f882, 0f3F800000;
	setp.ltu.f32 	%p65, %f38, 0f40800000;
	@%p65 bra 	$L__BB0_31;
// %bb.30:                              // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f462, %f882, 0f3F800000;
	fma.rn.f32 	%f464, %f181, 0fC0400000, %f38;
	setp.ge.f32 	%p66, %f464, 0f00000000;
	add.f32 	%f465, %f462, 0f3F800000;
	selp.f32 	%f882, %f465, %f462, %p66;
$L__BB0_31:                             // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f884, %f882, 0fC0000000, %f884;
$L__BB0_36:                             // %__internal_fmodf_kernel.exit.i
	shr.u32 	%r205, %r204, 1;
	abs.f32 	%f479, %f884;
	setp.gtu.f32 	%p73, %f479, 0f7F800000;
	@%p73 bra 	$L__BB0_38;
// %bb.37:
	mov.b32 	%r288, %f35;
	and.b32  	%r289, %r288, -2147483648;
	mov.b32 	%r290, %f884;
	or.b32  	%r291, %r289, %r290;
	mov.b32 	%f884, %r291;
$L__BB0_38:                             // %__nv_fmodf.exit
	ld.param.u64 	%rd1, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	mul.wide.u32 	%rd44, %r205, 4;
	add.s32 	%r300, %r12, 2016;
	cvt.rn.f32.s32 	%f510, %r300;
	div.approx.f32 	%f54, %f510, %f213;
	abs.f32 	%f888, %f54;
	setp.lt.f32 	%p81, %f888, 0f40000000;
	@%p81 bra 	$L__BB0_50;
// %bb.39:
	setp.gtu.f32 	%p82, %f888, 0f4B800000;
	@%p82 bra 	$L__BB0_46;
	bra.uni 	$L__BB0_40;
$L__BB0_46:
	mov.b32 	%r22, %f888;
	and.b32  	%r301, %r22, 8388607;
	or.b32  	%r7999, %r301, 1065353216;
	mov.b32 	%f887, %r7999;
	add.s32 	%r302, %r22, -1073741824;
	and.b32  	%r8000, %r302, -8388608;
	setp.eq.s32 	%p88, %r8000, 0;
	@%p88 bra 	$L__BB0_49;
// %bb.47:                              // %__nv_fmaf_rn.exit4.i.i.i861.preheader
	mov.f32 	%f521, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f520,%f521;
	// end inline asm
$L__BB0_48:                             // %__nv_fmaf_rn.exit4.i.i.i861
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r303, %r8000, 192937984;
	add.s32 	%r304, %r7999, %r303;
	mov.b32 	%f522, %r304;
	mul.f32 	%f523, %f520, %f522;
	sub.f32 	%f524, %f522, %f523;
	fma.rn.f32 	%f525, %f524, %f520, %f523;
	sub.f32 	%f526, %f522, %f525;
	fma.rz.f32 	%f527, %f526, %f520, %f525;
	cvt.rzi.f32.f32 	%f528, %f527;
	sub.f32 	%f887, %f522, %f528;
	sub.s32 	%r8000, %r8000, %r303;
	mov.b32 	%r7999, %f887;
	setp.ne.s32 	%p89, %r8000, 0;
	setp.ne.s32 	%p90, %r7999, 0;
	and.pred  	%p91, %p89, %p90;
	@%p91 bra 	$L__BB0_48;
$L__BB0_49:                             // %__internal_fmodf_slowpath_mod.exit.i.i863
	setp.gt.u32 	%p92, %r22, 2139095039;
	selp.f32 	%f529, 0f7FFFFFFF, 0f4B800000, %p92;
	mul.f32 	%f530, %f887, 0f34000000;
	mul.f32 	%f888, %f529, %f530;
	bra.uni 	$L__BB0_50;
$L__BB0_40:                             // %__nv_fast_fdividef.exit.i.i.i840
	div.approx.f32 	%f513, %f888, %f181;
	cvt.rzi.f32.f32 	%f886, %f513;
	fma.rn.f32 	%f57, %f886, 0fC0000000, %f888;
	mov.b32 	%r21, %f57;
	setp.lt.u32 	%p83, %r21, 1073741824;
	@%p83 bra 	$L__BB0_45;
// %bb.41:
	setp.lt.u32 	%p84, %r21, -2147483647;
	@%p84 bra 	$L__BB0_43;
// %bb.42:
	add.f32 	%f518, %f886, 0fBF800000;
	setp.lt.f32 	%p87, %f57, 0fC0000000;
	add.f32 	%f519, %f518, 0fBF800000;
	selp.f32 	%f886, %f519, %f518, %p87;
	bra.uni 	$L__BB0_45;
$L__BB0_43:
	add.f32 	%f886, %f886, 0f3F800000;
	setp.ltu.f32 	%p85, %f57, 0f40800000;
	@%p85 bra 	$L__BB0_45;
// %bb.44:                              // %__nv_fmaf_rn.exit.i.i.i844
	add.f32 	%f514, %f886, 0f3F800000;
	fma.rn.f32 	%f516, %f181, 0fC0400000, %f57;
	setp.ge.f32 	%p86, %f516, 0f00000000;
	add.f32 	%f517, %f514, 0f3F800000;
	selp.f32 	%f886, %f517, %f514, %p86;
$L__BB0_45:                             // %__internal_fmodf_fastpath_quot.exit.i.i847
	fma.rn.f32 	%f888, %f886, 0fC0000000, %f888;
$L__BB0_50:                             // %__internal_fmodf_kernel.exit.i866
	add.s64 	%rd45, %rd1, %rd44;
	abs.f32 	%f531, %f888;
	setp.gtu.f32 	%p93, %f531, 0f7F800000;
	@%p93 bra 	$L__BB0_52;
// %bb.51:
	mov.b32 	%r305, %f54;
	and.b32  	%r306, %r305, -2147483648;
	mov.b32 	%r307, %f888;
	or.b32  	%r308, %r306, %r307;
	mov.b32 	%f888, %r308;
$L__BB0_52:                             // %__nv_fmodf.exit867
	ld.global.u32 	%r118, [%rd45];
	mov.u64 	%rd46, 2;
	mov.u64 	%rd47, 6;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r185;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd46;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd47;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11696, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd48, [retval0+0];
	} // callseq 2
	setp.eq.s64 	%p101, %rd48, 64;
	@%p101 bra 	$L__BB0_54;
	bra.uni 	$L__BB0_53;
$L__BB0_54:                             // %pass300
	shr.u32 	%r119, %r1, 1;
	shr.u32 	%r122, %r1, 3;
	and.b32  	%r323, %r1, 3;
	and.b32  	%r324, %r122, 2;
	or.b32  	%r325, %r120, %r324;
	and.b32  	%r326, %r119, 4;
	or.b32  	%r125, %r325, %r326;
	mul.lo.s32 	%r327, %r323, %r125;
	shl.b32 	%r328, %r327, 1;
	neg.s32 	%r329, %r328;
	cvt.rn.f32.s32 	%f156, %r329;
	mov.f32 	%f564, 0f41000000;
	div.approx.f32 	%f157, %f156, %f564;
	abs.f32 	%f904, %f157;
	setp.lt.f32 	%p102, %f904, 0f40000000;
	mov.f32 	%f892, %f904;
	@%p102 bra 	$L__BB0_66;
// %bb.55:
	setp.gtu.f32 	%p103, %f904, 0f4B800000;
	@%p103 bra 	$L__BB0_62;
	bra.uni 	$L__BB0_56;
$L__BB0_62:
	mov.b32 	%r32, %f904;
	and.b32  	%r330, %r32, 8388607;
	or.b32  	%r8001, %r330, 1065353216;
	mov.b32 	%f891, %r8001;
	add.s32 	%r331, %r32, -1073741824;
	and.b32  	%r8002, %r331, -8388608;
	setp.eq.s32 	%p109, %r8002, 0;
	@%p109 bra 	$L__BB0_65;
// %bb.63:                              // %__nv_fmaf_rn.exit4.i.i.i892.preheader
	mov.f32 	%f574, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f573,%f574;
	// end inline asm
$L__BB0_64:                             // %__nv_fmaf_rn.exit4.i.i.i892
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r332, %r8002, 192937984;
	add.s32 	%r333, %r8001, %r332;
	mov.b32 	%f575, %r333;
	mul.f32 	%f576, %f573, %f575;
	sub.f32 	%f577, %f575, %f576;
	fma.rn.f32 	%f578, %f577, %f573, %f576;
	sub.f32 	%f579, %f575, %f578;
	fma.rz.f32 	%f580, %f579, %f573, %f578;
	cvt.rzi.f32.f32 	%f581, %f580;
	sub.f32 	%f891, %f575, %f581;
	sub.s32 	%r8002, %r8002, %r332;
	mov.b32 	%r8001, %f891;
	setp.ne.s32 	%p110, %r8002, 0;
	setp.ne.s32 	%p111, %r8001, 0;
	and.pred  	%p112, %p110, %p111;
	@%p112 bra 	$L__BB0_64;
$L__BB0_65:                             // %__internal_fmodf_slowpath_mod.exit.i.i894
	setp.gt.u32 	%p113, %r32, 2139095039;
	selp.f32 	%f582, 0f7FFFFFFF, 0f4B800000, %p113;
	mul.f32 	%f583, %f891, 0f34000000;
	mul.f32 	%f892, %f582, %f583;
	bra.uni 	$L__BB0_66;
$L__BB0_56:                             // %__nv_fast_fdividef.exit.i.i.i871
	div.approx.f32 	%f566, %f904, %f181;
	cvt.rzi.f32.f32 	%f890, %f566;
	fma.rn.f32 	%f72, %f890, 0fC0000000, %f904;
	mov.b32 	%r31, %f72;
	setp.lt.u32 	%p104, %r31, 1073741824;
	@%p104 bra 	$L__BB0_61;
// %bb.57:
	setp.lt.u32 	%p105, %r31, -2147483647;
	@%p105 bra 	$L__BB0_59;
// %bb.58:
	add.f32 	%f571, %f890, 0fBF800000;
	setp.lt.f32 	%p108, %f72, 0fC0000000;
	add.f32 	%f572, %f571, 0fBF800000;
	selp.f32 	%f890, %f572, %f571, %p108;
	bra.uni 	$L__BB0_61;
$L__BB0_59:
	add.f32 	%f890, %f890, 0f3F800000;
	setp.ltu.f32 	%p106, %f72, 0f40800000;
	@%p106 bra 	$L__BB0_61;
// %bb.60:                              // %__nv_fmaf_rn.exit.i.i.i875
	add.f32 	%f567, %f890, 0f3F800000;
	fma.rn.f32 	%f569, %f181, 0fC0400000, %f72;
	setp.ge.f32 	%p107, %f569, 0f00000000;
	add.f32 	%f570, %f567, 0f3F800000;
	selp.f32 	%f890, %f570, %f567, %p107;
$L__BB0_61:                             // %__internal_fmodf_fastpath_quot.exit.i.i878
	fma.rn.f32 	%f892, %f890, 0fC0000000, %f904;
$L__BB0_66:                             // %__internal_fmodf_kernel.exit.i897
	abs.f32 	%f584, %f892;
	setp.gtu.f32 	%p114, %f584, 0f7F800000;
	mov.b32 	%r334, %f157;
	and.b32  	%r39, %r334, -2147483648;
	@%p114 bra 	$L__BB0_68;
// %bb.67:
	mov.b32 	%r335, %f892;
	or.b32  	%r336, %r39, %r335;
	mov.b32 	%f892, %r336;
$L__BB0_68:                             // %__nv_fmodf.exit898
	and.b32  	%r345, %r112, 6;
	mov.u32 	%r346, -8;
	sub.s32 	%r347, %r346, %r345;
	mul.lo.s32 	%r348, %r125, %r347;
	cvt.rn.f32.s32 	%f88, %r348;
	div.approx.f32 	%f89, %f88, %f564;
	abs.f32 	%f908, %f89;
	setp.lt.f32 	%p122, %f908, 0f40000000;
	mov.f32 	%f896, %f908;
	@%p122 bra 	$L__BB0_80;
// %bb.69:
	setp.gtu.f32 	%p123, %f908, 0f4B800000;
	@%p123 bra 	$L__BB0_76;
	bra.uni 	$L__BB0_70;
$L__BB0_76:
	mov.b32 	%r41, %f908;
	and.b32  	%r349, %r41, 8388607;
	or.b32  	%r8003, %r349, 1065353216;
	mov.b32 	%f895, %r8003;
	add.s32 	%r350, %r41, -1073741824;
	and.b32  	%r8004, %r350, -8388608;
	setp.eq.s32 	%p129, %r8004, 0;
	@%p129 bra 	$L__BB0_79;
// %bb.77:                              // %__nv_fmaf_rn.exit4.i.i.i923.preheader
	mov.f32 	%f625, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f624,%f625;
	// end inline asm
$L__BB0_78:                             // %__nv_fmaf_rn.exit4.i.i.i923
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r351, %r8004, 192937984;
	add.s32 	%r352, %r8003, %r351;
	mov.b32 	%f626, %r352;
	mul.f32 	%f627, %f624, %f626;
	sub.f32 	%f628, %f626, %f627;
	fma.rn.f32 	%f629, %f628, %f624, %f627;
	sub.f32 	%f630, %f626, %f629;
	fma.rz.f32 	%f631, %f630, %f624, %f629;
	cvt.rzi.f32.f32 	%f632, %f631;
	sub.f32 	%f895, %f626, %f632;
	sub.s32 	%r8004, %r8004, %r351;
	mov.b32 	%r8003, %f895;
	setp.ne.s32 	%p130, %r8004, 0;
	setp.ne.s32 	%p131, %r8003, 0;
	and.pred  	%p132, %p130, %p131;
	@%p132 bra 	$L__BB0_78;
$L__BB0_79:                             // %__internal_fmodf_slowpath_mod.exit.i.i925
	setp.gt.u32 	%p133, %r41, 2139095039;
	selp.f32 	%f633, 0f7FFFFFFF, 0f4B800000, %p133;
	mul.f32 	%f634, %f895, 0f34000000;
	mul.f32 	%f896, %f633, %f634;
	bra.uni 	$L__BB0_80;
$L__BB0_70:                             // %__nv_fast_fdividef.exit.i.i.i902
	div.approx.f32 	%f617, %f908, %f181;
	cvt.rzi.f32.f32 	%f894, %f617;
	fma.rn.f32 	%f92, %f894, 0fC0000000, %f908;
	mov.b32 	%r40, %f92;
	setp.lt.u32 	%p124, %r40, 1073741824;
	@%p124 bra 	$L__BB0_75;
// %bb.71:
	setp.lt.u32 	%p125, %r40, -2147483647;
	@%p125 bra 	$L__BB0_73;
// %bb.72:
	add.f32 	%f622, %f894, 0fBF800000;
	setp.lt.f32 	%p128, %f92, 0fC0000000;
	add.f32 	%f623, %f622, 0fBF800000;
	selp.f32 	%f894, %f623, %f622, %p128;
	bra.uni 	$L__BB0_75;
$L__BB0_73:
	add.f32 	%f894, %f894, 0f3F800000;
	setp.ltu.f32 	%p126, %f92, 0f40800000;
	@%p126 bra 	$L__BB0_75;
// %bb.74:                              // %__nv_fmaf_rn.exit.i.i.i906
	add.f32 	%f618, %f894, 0f3F800000;
	fma.rn.f32 	%f620, %f181, 0fC0400000, %f92;
	setp.ge.f32 	%p127, %f620, 0f00000000;
	add.f32 	%f621, %f618, 0f3F800000;
	selp.f32 	%f894, %f621, %f618, %p127;
$L__BB0_75:                             // %__internal_fmodf_fastpath_quot.exit.i.i909
	fma.rn.f32 	%f896, %f894, 0fC0000000, %f908;
$L__BB0_80:                             // %__internal_fmodf_kernel.exit.i928
	abs.f32 	%f635, %f896;
	setp.gtu.f32 	%p134, %f635, 0f7F800000;
	mov.b32 	%r353, %f89;
	and.b32  	%r48, %r353, -2147483648;
	@%p134 bra 	$L__BB0_82;
// %bb.81:
	mov.b32 	%r354, %f896;
	or.b32  	%r355, %r48, %r354;
	mov.b32 	%f896, %r355;
$L__BB0_82:                             // %__nv_fmodf.exit929
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r185;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd46;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd47;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11696, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd54, [retval0+0];
	} // callseq 6
	setp.eq.s64 	%p142, %rd54, 64;
	@%p142 bra 	$L__BB0_133;
	bra.uni 	$L__BB0_83;
$L__BB0_133:                            // %pass377
	{ // callseq 10, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r185;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd46;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd47;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11696, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd60, [retval0+0];
	} // callseq 10
	cvt.rn.f32.s64 	%f668, %rd60;
	div.approx.f32 	%f159, %f156, %f668;
	abs.f32 	%f912, %f159;
	setp.lt.f32 	%p143, %f912, 0f40000000;
	@%p143 bra 	$L__BB0_145;
// %bb.134:
	setp.gtu.f32 	%p144, %f912, 0f4B800000;
	@%p144 bra 	$L__BB0_141;
	bra.uni 	$L__BB0_135;
$L__BB0_141:
	mov.b32 	%r127, %f912;
	and.b32  	%r376, %r127, 8388607;
	or.b32  	%r8024, %r376, 1065353216;
	mov.b32 	%f911, %r8024;
	add.s32 	%r377, %r127, -1073741824;
	and.b32  	%r8025, %r377, -8388608;
	setp.eq.s32 	%p150, %r8025, 0;
	@%p150 bra 	$L__BB0_144;
// %bb.142:                             // %__nv_fmaf_rn.exit4.i.i.i1047.preheader
	mov.f32 	%f678, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f677,%f678;
	// end inline asm
$L__BB0_143:                            // %__nv_fmaf_rn.exit4.i.i.i1047
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r378, %r8025, 192937984;
	add.s32 	%r379, %r8024, %r378;
	mov.b32 	%f679, %r379;
	mul.f32 	%f680, %f677, %f679;
	sub.f32 	%f681, %f679, %f680;
	fma.rn.f32 	%f682, %f681, %f677, %f680;
	sub.f32 	%f683, %f679, %f682;
	fma.rz.f32 	%f684, %f683, %f677, %f682;
	cvt.rzi.f32.f32 	%f685, %f684;
	sub.f32 	%f911, %f679, %f685;
	sub.s32 	%r8025, %r8025, %r378;
	mov.b32 	%r8024, %f911;
	setp.ne.s32 	%p151, %r8025, 0;
	setp.ne.s32 	%p152, %r8024, 0;
	and.pred  	%p153, %p151, %p152;
	@%p153 bra 	$L__BB0_143;
$L__BB0_144:                            // %__internal_fmodf_slowpath_mod.exit.i.i1049
	setp.gt.u32 	%p154, %r127, 2139095039;
	selp.f32 	%f686, 0f7FFFFFFF, 0f4B800000, %p154;
	mul.f32 	%f687, %f911, 0f34000000;
	mul.f32 	%f912, %f686, %f687;
	bra.uni 	$L__BB0_145;
$L__BB0_135:                            // %__nv_fast_fdividef.exit.i.i.i1026
	div.approx.f32 	%f670, %f912, %f181;
	cvt.rzi.f32.f32 	%f910, %f670;
	fma.rn.f32 	%f162, %f910, 0fC0000000, %f912;
	mov.b32 	%r126, %f162;
	setp.lt.u32 	%p145, %r126, 1073741824;
	@%p145 bra 	$L__BB0_140;
// %bb.136:
	setp.lt.u32 	%p146, %r126, -2147483647;
	@%p146 bra 	$L__BB0_138;
// %bb.137:
	add.f32 	%f675, %f910, 0fBF800000;
	setp.lt.f32 	%p149, %f162, 0fC0000000;
	add.f32 	%f676, %f675, 0fBF800000;
	selp.f32 	%f910, %f676, %f675, %p149;
	bra.uni 	$L__BB0_140;
$L__BB0_138:
	add.f32 	%f910, %f910, 0f3F800000;
	setp.ltu.f32 	%p147, %f162, 0f40800000;
	@%p147 bra 	$L__BB0_140;
// %bb.139:                             // %__nv_fmaf_rn.exit.i.i.i1030
	add.f32 	%f671, %f910, 0f3F800000;
	fma.rn.f32 	%f673, %f181, 0fC0400000, %f162;
	setp.ge.f32 	%p148, %f673, 0f00000000;
	add.f32 	%f674, %f671, 0f3F800000;
	selp.f32 	%f910, %f674, %f671, %p148;
$L__BB0_140:                            // %__internal_fmodf_fastpath_quot.exit.i.i1033
	fma.rn.f32 	%f912, %f910, 0fC0000000, %f912;
$L__BB0_145:                            // %__internal_fmodf_kernel.exit.i1052
	abs.f32 	%f688, %f912;
	setp.gtu.f32 	%p155, %f688, 0f7F800000;
	@%p155 bra 	$L__BB0_147;
// %bb.146:
	mov.b32 	%r380, %f159;
	and.b32  	%r381, %r380, -2147483648;
	mov.b32 	%r382, %f912;
	or.b32  	%r383, %r381, %r382;
	mov.b32 	%f912, %r383;
$L__BB0_147:                            // %__nv_fmodf.exit1053
	{ // callseq 11, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r185;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd46;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd47;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11696, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd64, [retval0+0];
	} // callseq 11
	cvt.rn.f32.s64 	%f719, %rd64;
	div.approx.f32 	%f178, %f88, %f719;
	abs.f32 	%f900, %f178;
	setp.lt.f32 	%p163, %f900, 0f40000000;
	@%p163 bra 	$L__BB0_95;
// %bb.84:
	setp.gtu.f32 	%p164, %f900, 0f4B800000;
	@%p164 bra 	$L__BB0_91;
	bra.uni 	$L__BB0_85;
$L__BB0_91:
	mov.b32 	%r54, %f900;
	and.b32  	%r392, %r54, 8388607;
	or.b32  	%r8005, %r392, 1065353216;
	mov.b32 	%f899, %r8005;
	add.s32 	%r393, %r54, -1073741824;
	and.b32  	%r8006, %r393, -8388608;
	setp.eq.s32 	%p170, %r8006, 0;
	@%p170 bra 	$L__BB0_94;
// %bb.92:                              // %__nv_fmaf_rn.exit4.i.i.i954.preheader
	mov.f32 	%f729, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f728,%f729;
	// end inline asm
$L__BB0_93:                             // %__nv_fmaf_rn.exit4.i.i.i954
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r394, %r8006, 192937984;
	add.s32 	%r395, %r8005, %r394;
	mov.b32 	%f730, %r395;
	mul.f32 	%f731, %f728, %f730;
	sub.f32 	%f732, %f730, %f731;
	fma.rn.f32 	%f733, %f732, %f728, %f731;
	sub.f32 	%f734, %f730, %f733;
	fma.rz.f32 	%f735, %f734, %f728, %f733;
	cvt.rzi.f32.f32 	%f736, %f735;
	sub.f32 	%f899, %f730, %f736;
	sub.s32 	%r8006, %r8006, %r394;
	mov.b32 	%r8005, %f899;
	setp.ne.s32 	%p171, %r8006, 0;
	setp.ne.s32 	%p172, %r8005, 0;
	and.pred  	%p173, %p171, %p172;
	@%p173 bra 	$L__BB0_93;
$L__BB0_94:                             // %__internal_fmodf_slowpath_mod.exit.i.i956
	setp.gt.u32 	%p174, %r54, 2139095039;
	selp.f32 	%f737, 0f7FFFFFFF, 0f4B800000, %p174;
	mul.f32 	%f738, %f899, 0f34000000;
	mul.f32 	%f900, %f737, %f738;
	bra.uni 	$L__BB0_95;
$L__BB0_85:                             // %__nv_fast_fdividef.exit.i.i.i933
	div.approx.f32 	%f721, %f900, %f181;
	cvt.rzi.f32.f32 	%f898, %f721;
	fma.rn.f32 	%f107, %f898, 0fC0000000, %f900;
	mov.b32 	%r53, %f107;
	setp.lt.u32 	%p165, %r53, 1073741824;
	@%p165 bra 	$L__BB0_90;
// %bb.86:
	setp.lt.u32 	%p166, %r53, -2147483647;
	@%p166 bra 	$L__BB0_88;
// %bb.87:
	add.f32 	%f726, %f898, 0fBF800000;
	setp.lt.f32 	%p169, %f107, 0fC0000000;
	add.f32 	%f727, %f726, 0fBF800000;
	selp.f32 	%f898, %f727, %f726, %p169;
	bra.uni 	$L__BB0_90;
$L__BB0_88:
	add.f32 	%f898, %f898, 0f3F800000;
	setp.ltu.f32 	%p167, %f107, 0f40800000;
	@%p167 bra 	$L__BB0_90;
// %bb.89:                              // %__nv_fmaf_rn.exit.i.i.i937
	add.f32 	%f722, %f898, 0f3F800000;
	fma.rn.f32 	%f724, %f181, 0fC0400000, %f107;
	setp.ge.f32 	%p168, %f724, 0f00000000;
	add.f32 	%f725, %f722, 0f3F800000;
	selp.f32 	%f898, %f725, %f722, %p168;
$L__BB0_90:                             // %__internal_fmodf_fastpath_quot.exit.i.i940
	fma.rn.f32 	%f900, %f898, 0fC0000000, %f900;
$L__BB0_95:                             // %__internal_fmodf_kernel.exit.i959
	abs.f32 	%f739, %f900;
	setp.gtu.f32 	%p175, %f739, 0f7F800000;
	@%p175 bra 	$L__BB0_97;
// %bb.96:
	mov.b32 	%r396, %f178;
	and.b32  	%r397, %r396, -2147483648;
	mov.b32 	%r398, %f900;
	or.b32  	%r399, %r397, %r398;
	mov.b32 	%f900, %r399;
$L__BB0_97:                             // %__nv_fmodf.exit960
	{ // callseq 12, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r185;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd46;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd47;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11696, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd68, [retval0+0];
	} // callseq 12
	setp.eq.s64 	%p183, %rd68, 64;
	@%p183 bra 	$L__BB0_99;
	bra.uni 	$L__BB0_98;
$L__BB0_99:                             // %pass442
	@%p102 bra 	$L__BB0_111;
// %bb.100:
	setp.gtu.f32 	%p185, %f904, 0f4B800000;
	@%p185 bra 	$L__BB0_107;
	bra.uni 	$L__BB0_101;
$L__BB0_107:
	mov.b32 	%r64, %f904;
	and.b32  	%r414, %r64, 8388607;
	or.b32  	%r8007, %r414, 1065353216;
	mov.b32 	%f903, %r8007;
	add.s32 	%r415, %r64, -1073741824;
	and.b32  	%r8008, %r415, -8388608;
	setp.eq.s32 	%p191, %r8008, 0;
	@%p191 bra 	$L__BB0_110;
// %bb.108:                             // %__nv_fmaf_rn.exit4.i.i.i985.preheader
	mov.f32 	%f781, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f780,%f781;
	// end inline asm
$L__BB0_109:                            // %__nv_fmaf_rn.exit4.i.i.i985
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r416, %r8008, 192937984;
	add.s32 	%r417, %r8007, %r416;
	mov.b32 	%f782, %r417;
	mul.f32 	%f783, %f780, %f782;
	sub.f32 	%f784, %f782, %f783;
	fma.rn.f32 	%f785, %f784, %f780, %f783;
	sub.f32 	%f786, %f782, %f785;
	fma.rz.f32 	%f787, %f786, %f780, %f785;
	cvt.rzi.f32.f32 	%f788, %f787;
	sub.f32 	%f903, %f782, %f788;
	sub.s32 	%r8008, %r8008, %r416;
	mov.b32 	%r8007, %f903;
	setp.ne.s32 	%p192, %r8008, 0;
	setp.ne.s32 	%p193, %r8007, 0;
	and.pred  	%p194, %p192, %p193;
	@%p194 bra 	$L__BB0_109;
$L__BB0_110:                            // %__internal_fmodf_slowpath_mod.exit.i.i987
	setp.gt.u32 	%p195, %r64, 2139095039;
	selp.f32 	%f789, 0f7FFFFFFF, 0f4B800000, %p195;
	mul.f32 	%f790, %f903, 0f34000000;
	mul.f32 	%f904, %f789, %f790;
	bra.uni 	$L__BB0_111;
$L__BB0_101:                            // %__nv_fast_fdividef.exit.i.i.i964
	div.approx.f32 	%f773, %f904, %f181;
	cvt.rzi.f32.f32 	%f902, %f773;
	fma.rn.f32 	%f122, %f902, 0fC0000000, %f904;
	mov.b32 	%r63, %f122;
	setp.lt.u32 	%p186, %r63, 1073741824;
	@%p186 bra 	$L__BB0_106;
// %bb.102:
	setp.lt.u32 	%p187, %r63, -2147483647;
	@%p187 bra 	$L__BB0_104;
// %bb.103:
	add.f32 	%f778, %f902, 0fBF800000;
	setp.lt.f32 	%p190, %f122, 0fC0000000;
	add.f32 	%f779, %f778, 0fBF800000;
	selp.f32 	%f902, %f779, %f778, %p190;
	bra.uni 	$L__BB0_106;
$L__BB0_104:
	add.f32 	%f902, %f902, 0f3F800000;
	setp.ltu.f32 	%p188, %f122, 0f40800000;
	@%p188 bra 	$L__BB0_106;
// %bb.105:                             // %__nv_fmaf_rn.exit.i.i.i968
	add.f32 	%f774, %f902, 0f3F800000;
	fma.rn.f32 	%f776, %f181, 0fC0400000, %f122;
	setp.ge.f32 	%p189, %f776, 0f00000000;
	add.f32 	%f777, %f774, 0f3F800000;
	selp.f32 	%f902, %f777, %f774, %p189;
$L__BB0_106:                            // %__internal_fmodf_fastpath_quot.exit.i.i971
	fma.rn.f32 	%f904, %f902, 0fC0000000, %f904;
$L__BB0_111:                            // %__internal_fmodf_kernel.exit.i990
	abs.f32 	%f791, %f904;
	setp.gtu.f32 	%p196, %f791, 0f7F800000;
	@%p196 bra 	$L__BB0_113;
// %bb.112:
	mov.b32 	%r418, %f904;
	or.b32  	%r419, %r39, %r418;
	mov.b32 	%f904, %r419;
$L__BB0_113:                            // %__nv_fmodf.exit991
	@%p122 bra 	$L__BB0_125;
// %bb.114:
	setp.gtu.f32 	%p205, %f908, 0f4B800000;
	@%p205 bra 	$L__BB0_121;
	bra.uni 	$L__BB0_115;
$L__BB0_121:
	mov.b32 	%r72, %f908;
	and.b32  	%r428, %r72, 8388607;
	or.b32  	%r8009, %r428, 1065353216;
	mov.b32 	%f907, %r8009;
	add.s32 	%r429, %r72, -1073741824;
	and.b32  	%r8010, %r429, -8388608;
	setp.eq.s32 	%p211, %r8010, 0;
	@%p211 bra 	$L__BB0_124;
// %bb.122:                             // %__nv_fmaf_rn.exit4.i.i.i1016.preheader
	mov.f32 	%f831, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f830,%f831;
	// end inline asm
$L__BB0_123:                            // %__nv_fmaf_rn.exit4.i.i.i1016
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r430, %r8010, 192937984;
	add.s32 	%r431, %r8009, %r430;
	mov.b32 	%f832, %r431;
	mul.f32 	%f833, %f830, %f832;
	sub.f32 	%f834, %f832, %f833;
	fma.rn.f32 	%f835, %f834, %f830, %f833;
	sub.f32 	%f836, %f832, %f835;
	fma.rz.f32 	%f837, %f836, %f830, %f835;
	cvt.rzi.f32.f32 	%f838, %f837;
	sub.f32 	%f907, %f832, %f838;
	sub.s32 	%r8010, %r8010, %r430;
	mov.b32 	%r8009, %f907;
	setp.ne.s32 	%p212, %r8010, 0;
	setp.ne.s32 	%p213, %r8009, 0;
	and.pred  	%p214, %p212, %p213;
	@%p214 bra 	$L__BB0_123;
$L__BB0_124:                            // %__internal_fmodf_slowpath_mod.exit.i.i1018
	setp.gt.u32 	%p215, %r72, 2139095039;
	selp.f32 	%f839, 0f7FFFFFFF, 0f4B800000, %p215;
	mul.f32 	%f840, %f907, 0f34000000;
	mul.f32 	%f908, %f839, %f840;
	bra.uni 	$L__BB0_125;
$L__BB0_115:                            // %__nv_fast_fdividef.exit.i.i.i995
	div.approx.f32 	%f823, %f908, %f181;
	cvt.rzi.f32.f32 	%f906, %f823;
	fma.rn.f32 	%f139, %f906, 0fC0000000, %f908;
	mov.b32 	%r71, %f139;
	setp.lt.u32 	%p206, %r71, 1073741824;
	@%p206 bra 	$L__BB0_120;
// %bb.116:
	setp.lt.u32 	%p207, %r71, -2147483647;
	@%p207 bra 	$L__BB0_118;
// %bb.117:
	add.f32 	%f828, %f906, 0fBF800000;
	setp.lt.f32 	%p210, %f139, 0fC0000000;
	add.f32 	%f829, %f828, 0fBF800000;
	selp.f32 	%f906, %f829, %f828, %p210;
	bra.uni 	$L__BB0_120;
$L__BB0_118:
	add.f32 	%f906, %f906, 0f3F800000;
	setp.ltu.f32 	%p208, %f139, 0f40800000;
	@%p208 bra 	$L__BB0_120;
// %bb.119:                             // %__nv_fmaf_rn.exit.i.i.i999
	add.f32 	%f824, %f906, 0f3F800000;
	fma.rn.f32 	%f826, %f181, 0fC0400000, %f139;
	setp.ge.f32 	%p209, %f826, 0f00000000;
	add.f32 	%f827, %f824, 0f3F800000;
	selp.f32 	%f906, %f827, %f824, %p209;
$L__BB0_120:                            // %__internal_fmodf_fastpath_quot.exit.i.i1002
	fma.rn.f32 	%f908, %f906, 0fC0000000, %f908;
$L__BB0_125:                            // %__internal_fmodf_kernel.exit.i1021
	abs.f32 	%f841, %f908;
	setp.gtu.f32 	%p216, %f841, 0f7F800000;
	@%p216 bra 	$L__BB0_127;
// %bb.126:
	mov.b32 	%r432, %f908;
	or.b32  	%r433, %r48, %r432;
	mov.b32 	%f908, %r433;
$L__BB0_127:                            // %__nv_fmodf.exit1022
	setp.le.s32 	%p224, %r187, %r186;
	mov.u32 	%r7994, 0;
	@%p224 bra 	$L__BB0_153;
// %bb.128:                             // %L1473.lr.ph
	mov.f32 	%f185, 0f43808000;
	div.approx.f32 	%f186, %f184, %f185;
	div.approx.f32 	%f220, %f218, %f185;
	div.approx.f32 	%f255, %f253, %f185;
	div.approx.f32 	%f289, %f287, %f185;
	div.approx.f32 	%f324, %f322, %f185;
	div.approx.f32 	%f358, %f356, %f185;
	div.approx.f32 	%f393, %f391, %f185;
	div.approx.f32 	%f427, %f425, %f185;
	abs.f32 	%f187, %f186;
	abs.f32 	%f221, %f220;
	abs.f32 	%f256, %f255;
	abs.f32 	%f290, %f289;
	abs.f32 	%f325, %f324;
	abs.f32 	%f359, %f358;
	abs.f32 	%f394, %f393;
	abs.f32 	%f428, %f427;
	setp.gt.f32 	%p13, %f187, 0f4B800000;
	mul.f32 	%f188, %f186, 0f00000000;
	setp.gt.f32 	%p19, %f221, 0f4B800000;
	mul.f32 	%f222, %f220, 0f00000000;
	setp.gt.f32 	%p25, %f256, 0f4B800000;
	mul.f32 	%f257, %f255, 0f00000000;
	setp.gt.f32 	%p31, %f290, 0f4B800000;
	mul.f32 	%f291, %f289, 0f00000000;
	setp.gt.f32 	%p37, %f325, 0f4B800000;
	mul.f32 	%f326, %f324, 0f00000000;
	setp.gt.f32 	%p43, %f359, 0f4B800000;
	mul.f32 	%f360, %f358, 0f00000000;
	setp.gt.f32 	%p49, %f394, 0f4B800000;
	mul.f32 	%f395, %f393, 0f00000000;
	setp.gt.f32 	%p55, %f428, 0f4B800000;
	mul.f32 	%f429, %f427, 0f00000000;
	selp.f32 	%f189, %f188, %f186, %p13;
	selp.f32 	%f223, %f222, %f220, %p19;
	selp.f32 	%f258, %f257, %f255, %p25;
	selp.f32 	%f292, %f291, %f289, %p31;
	selp.f32 	%f327, %f326, %f324, %p37;
	selp.f32 	%f361, %f360, %f358, %p43;
	selp.f32 	%f396, %f395, %f393, %p49;
	selp.f32 	%f430, %f429, %f427, %p55;
	add.f32 	%f190, %f189, %f189;
	add.f32 	%f224, %f223, %f223;
	add.f32 	%f259, %f258, %f258;
	add.f32 	%f293, %f292, %f292;
	add.f32 	%f328, %f327, %f327;
	add.f32 	%f362, %f361, %f361;
	add.f32 	%f397, %f396, %f396;
	add.f32 	%f431, %f430, %f430;
	add.f32 	%f480, %f884, %f884;
	add.f32 	%f532, %f888, %f888;
	add.f32 	%f585, %f892, %f892;
	add.f32 	%f636, %f896, %f896;
	mov.b32 	%r213, %f190;
	mov.b32 	%r220, %f224;
	mov.b32 	%r231, %f259;
	mov.b32 	%r238, %f293;
	mov.b32 	%r249, %f328;
	mov.b32 	%r256, %f362;
	mov.b32 	%r267, %f397;
	mov.b32 	%r274, %f431;
	mov.b32 	%r292, %f480;
	mov.b32 	%r315, %f532;
	mov.b32 	%r337, %f585;
	mov.b32 	%r368, %f636;
	and.b32  	%r214, %r213, -2147483648;
	and.b32  	%r221, %r220, -2147483648;
	and.b32  	%r232, %r231, -2147483648;
	and.b32  	%r239, %r238, -2147483648;
	and.b32  	%r250, %r249, -2147483648;
	and.b32  	%r257, %r256, -2147483648;
	and.b32  	%r268, %r267, -2147483648;
	and.b32  	%r275, %r274, -2147483648;
	and.b32  	%r293, %r292, -2147483648;
	and.b32  	%r316, %r315, -2147483648;
	and.b32  	%r338, %r337, -2147483648;
	and.b32  	%r369, %r368, -2147483648;
	add.f32 	%f689, %f912, %f912;
	add.f32 	%f740, %f900, %f900;
	or.b32  	%r215, %r214, 1056964608;
	or.b32  	%r222, %r221, 1056964608;
	or.b32  	%r233, %r232, 1056964608;
	or.b32  	%r240, %r239, 1056964608;
	or.b32  	%r251, %r250, 1056964608;
	or.b32  	%r258, %r257, 1056964608;
	or.b32  	%r269, %r268, 1056964608;
	or.b32  	%r276, %r275, 1056964608;
	or.b32  	%r294, %r293, 1056964608;
	or.b32  	%r317, %r316, 1056964608;
	or.b32  	%r339, %r338, 1056964608;
	or.b32  	%r370, %r369, 1056964608;
	mov.b32 	%r384, %f689;
	mov.b32 	%r406, %f740;
	mov.b32 	%f191, %r215;
	mov.b32 	%f225, %r222;
	mov.b32 	%f260, %r233;
	mov.b32 	%f294, %r240;
	mov.b32 	%f329, %r251;
	mov.b32 	%f363, %r258;
	mov.b32 	%f398, %r269;
	mov.b32 	%f432, %r276;
	mov.b32 	%f481, %r294;
	mov.b32 	%f533, %r317;
	mov.b32 	%f586, %r339;
	mov.b32 	%f637, %r370;
	and.b32  	%r385, %r384, -2147483648;
	and.b32  	%r407, %r406, -2147483648;
	add.f32 	%f792, %f904, %f904;
	add.f32 	%f192, %f190, %f191;
	abs.f32 	%f194, %f190;
	add.f32 	%f226, %f224, %f225;
	abs.f32 	%f228, %f224;
	add.f32 	%f261, %f259, %f260;
	abs.f32 	%f263, %f259;
	add.f32 	%f295, %f293, %f294;
	abs.f32 	%f297, %f293;
	add.f32 	%f330, %f328, %f329;
	abs.f32 	%f332, %f328;
	add.f32 	%f364, %f362, %f363;
	abs.f32 	%f366, %f362;
	add.f32 	%f399, %f397, %f398;
	abs.f32 	%f401, %f397;
	add.f32 	%f433, %f431, %f432;
	abs.f32 	%f435, %f431;
	add.f32 	%f482, %f480, %f481;
	abs.f32 	%f484, %f480;
	add.f32 	%f534, %f532, %f533;
	abs.f32 	%f536, %f532;
	add.f32 	%f587, %f585, %f586;
	abs.f32 	%f589, %f585;
	add.f32 	%f638, %f636, %f637;
	abs.f32 	%f640, %f636;
	or.b32  	%r386, %r385, 1056964608;
	or.b32  	%r408, %r407, 1056964608;
	mov.b32 	%r420, %f792;
	cvt.rzi.f32.f32 	%f193, %f192;
	setp.gt.f32 	%p14, %f194, 0f4B000000;
	cvt.rzi.f32.f32 	%f227, %f226;
	setp.gt.f32 	%p20, %f228, 0f4B000000;
	cvt.rzi.f32.f32 	%f262, %f261;
	setp.gt.f32 	%p26, %f263, 0f4B000000;
	cvt.rzi.f32.f32 	%f296, %f295;
	setp.gt.f32 	%p32, %f297, 0f4B000000;
	cvt.rzi.f32.f32 	%f331, %f330;
	setp.gt.f32 	%p38, %f332, 0f4B000000;
	cvt.rzi.f32.f32 	%f365, %f364;
	setp.gt.f32 	%p44, %f366, 0f4B000000;
	cvt.rzi.f32.f32 	%f400, %f399;
	setp.gt.f32 	%p50, %f401, 0f4B000000;
	cvt.rzi.f32.f32 	%f434, %f433;
	setp.gt.f32 	%p56, %f435, 0f4B000000;
	cvt.rzi.f32.f32 	%f483, %f482;
	setp.gt.f32 	%p74, %f484, 0f4B000000;
	cvt.rzi.f32.f32 	%f535, %f534;
	setp.gt.f32 	%p94, %f536, 0f4B000000;
	cvt.rzi.f32.f32 	%f588, %f587;
	setp.gt.f32 	%p115, %f589, 0f4B000000;
	cvt.rzi.f32.f32 	%f639, %f638;
	setp.gt.f32 	%p135, %f640, 0f4B000000;
	mov.b32 	%f690, %r386;
	mov.b32 	%f741, %r408;
	and.b32  	%r421, %r420, -2147483648;
	selp.f32 	%f195, %f190, %f193, %p14;
	cvt.rzi.f32.f32 	%f196, %f190;
	setp.lt.f32 	%p15, %f194, 0f3F000000;
	selp.f32 	%f229, %f224, %f227, %p20;
	cvt.rzi.f32.f32 	%f230, %f224;
	setp.lt.f32 	%p21, %f228, 0f3F000000;
	selp.f32 	%f264, %f259, %f262, %p26;
	cvt.rzi.f32.f32 	%f265, %f259;
	setp.lt.f32 	%p27, %f263, 0f3F000000;
	selp.f32 	%f298, %f293, %f296, %p32;
	cvt.rzi.f32.f32 	%f299, %f293;
	setp.lt.f32 	%p33, %f297, 0f3F000000;
	selp.f32 	%f333, %f328, %f331, %p38;
	cvt.rzi.f32.f32 	%f334, %f328;
	setp.lt.f32 	%p39, %f332, 0f3F000000;
	selp.f32 	%f367, %f362, %f365, %p44;
	cvt.rzi.f32.f32 	%f368, %f362;
	setp.lt.f32 	%p45, %f366, 0f3F000000;
	selp.f32 	%f402, %f397, %f400, %p50;
	cvt.rzi.f32.f32 	%f403, %f397;
	setp.lt.f32 	%p51, %f401, 0f3F000000;
	selp.f32 	%f436, %f431, %f434, %p56;
	cvt.rzi.f32.f32 	%f437, %f431;
	setp.lt.f32 	%p57, %f435, 0f3F000000;
	selp.f32 	%f485, %f480, %f483, %p74;
	cvt.rzi.f32.f32 	%f486, %f480;
	setp.lt.f32 	%p75, %f484, 0f3F000000;
	selp.f32 	%f537, %f532, %f535, %p94;
	cvt.rzi.f32.f32 	%f538, %f532;
	setp.lt.f32 	%p95, %f536, 0f3F000000;
	selp.f32 	%f590, %f585, %f588, %p115;
	cvt.rzi.f32.f32 	%f591, %f585;
	setp.lt.f32 	%p116, %f589, 0f3F000000;
	selp.f32 	%f641, %f636, %f639, %p135;
	cvt.rzi.f32.f32 	%f642, %f636;
	setp.lt.f32 	%p136, %f640, 0f3F000000;
	add.f32 	%f691, %f689, %f690;
	abs.f32 	%f693, %f689;
	add.f32 	%f742, %f740, %f741;
	abs.f32 	%f744, %f740;
	or.b32  	%r422, %r421, 1056964608;
	selp.f32 	%f197, %f196, %f195, %p15;
	selp.f32 	%f231, %f230, %f229, %p21;
	selp.f32 	%f266, %f265, %f264, %p27;
	selp.f32 	%f300, %f299, %f298, %p33;
	selp.f32 	%f335, %f334, %f333, %p39;
	selp.f32 	%f369, %f368, %f367, %p45;
	selp.f32 	%f404, %f403, %f402, %p51;
	selp.f32 	%f438, %f437, %f436, %p57;
	selp.f32 	%f487, %f486, %f485, %p75;
	selp.f32 	%f539, %f538, %f537, %p95;
	selp.f32 	%f592, %f591, %f590, %p116;
	selp.f32 	%f643, %f642, %f641, %p136;
	cvt.rzi.f32.f32 	%f692, %f691;
	setp.gt.f32 	%p156, %f693, 0f4B000000;
	cvt.rzi.f32.f32 	%f743, %f742;
	setp.gt.f32 	%p176, %f744, 0f4B000000;
	mov.b32 	%f793, %r422;
	fma.rn.f32 	%f198, %f197, 0fBF000000, %f189;
	fma.rn.f32 	%f232, %f231, 0fBF000000, %f223;
	fma.rn.f32 	%f267, %f266, 0fBF000000, %f258;
	fma.rn.f32 	%f301, %f300, 0fBF000000, %f292;
	fma.rn.f32 	%f336, %f335, 0fBF000000, %f327;
	fma.rn.f32 	%f370, %f369, 0fBF000000, %f361;
	fma.rn.f32 	%f405, %f404, 0fBF000000, %f396;
	fma.rn.f32 	%f439, %f438, 0fBF000000, %f430;
	fma.rn.f32 	%f488, %f487, 0fBF000000, %f884;
	fma.rn.f32 	%f540, %f539, 0fBF000000, %f888;
	fma.rn.f32 	%f593, %f592, 0fBF000000, %f892;
	fma.rn.f32 	%f644, %f643, 0fBF000000, %f896;
	selp.f32 	%f694, %f689, %f692, %p156;
	cvt.rzi.f32.f32 	%f695, %f689;
	setp.lt.f32 	%p157, %f693, 0f3F000000;
	selp.f32 	%f745, %f740, %f743, %p176;
	cvt.rzi.f32.f32 	%f746, %f740;
	setp.lt.f32 	%p177, %f744, 0f3F000000;
	add.f32 	%f794, %f792, %f793;
	abs.f32 	%f796, %f792;
	mul.f32 	%f199, %f198, %f198;
	mul.f32 	%f233, %f232, %f232;
	mul.f32 	%f268, %f267, %f267;
	mul.f32 	%f302, %f301, %f301;
	mul.f32 	%f337, %f336, %f336;
	mul.f32 	%f371, %f370, %f370;
	mul.f32 	%f406, %f405, %f405;
	mul.f32 	%f440, %f439, %f439;
	mul.f32 	%f489, %f488, %f488;
	mul.f32 	%f541, %f540, %f540;
	mul.f32 	%f594, %f593, %f593;
	mul.f32 	%f645, %f644, %f644;
	selp.f32 	%f696, %f695, %f694, %p157;
	selp.f32 	%f747, %f746, %f745, %p177;
	cvt.rzi.f32.f32 	%f795, %f794;
	setp.gt.f32 	%p198, %f796, 0f4B000000;
	cvt.rzi.s32.f32 	%r216, %f197;
	fma.rn.f32 	%f200, %f199, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f201, %f199, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r223, %f231;
	fma.rn.f32 	%f234, %f233, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f235, %f233, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r234, %f266;
	fma.rn.f32 	%f269, %f268, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f270, %f268, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r241, %f300;
	fma.rn.f32 	%f303, %f302, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f304, %f302, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r252, %f335;
	fma.rn.f32 	%f338, %f337, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f339, %f337, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r259, %f369;
	fma.rn.f32 	%f372, %f371, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f373, %f371, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r270, %f404;
	fma.rn.f32 	%f407, %f406, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f408, %f406, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r277, %f438;
	fma.rn.f32 	%f441, %f440, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f442, %f440, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f490, %f489, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f491, %f489, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f542, %f541, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f543, %f541, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f595, %f594, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f596, %f594, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f646, %f645, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f647, %f645, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f697, %f696, 0fBF000000, %f912;
	fma.rn.f32 	%f748, %f747, 0fBF000000, %f900;
	selp.f32 	%f797, %f792, %f795, %p198;
	cvt.rzi.f32.f32 	%f798, %f792;
	setp.lt.f32 	%p199, %f796, 0f3F000000;
	add.s32 	%r217, %r216, 1;
	fma.rn.f32 	%f202, %f200, %f199, 0fC0A55DF6;
	fma.rn.f32 	%f203, %f201, %f199, 0f4081E0CF;
	fma.rn.f32 	%f204, %f199, %f198, 0f00000000;
	add.s32 	%r224, %r223, 1;
	fma.rn.f32 	%f236, %f234, %f233, 0fC0A55DF6;
	fma.rn.f32 	%f237, %f235, %f233, 0f4081E0CF;
	fma.rn.f32 	%f238, %f233, %f232, 0f00000000;
	add.s32 	%r235, %r234, 1;
	fma.rn.f32 	%f271, %f269, %f268, 0fC0A55DF6;
	fma.rn.f32 	%f272, %f270, %f268, 0f4081E0CF;
	fma.rn.f32 	%f273, %f268, %f267, 0f00000000;
	add.s32 	%r242, %r241, 1;
	fma.rn.f32 	%f305, %f303, %f302, 0fC0A55DF6;
	fma.rn.f32 	%f306, %f304, %f302, 0f4081E0CF;
	fma.rn.f32 	%f307, %f302, %f301, 0f00000000;
	add.s32 	%r253, %r252, 1;
	fma.rn.f32 	%f340, %f338, %f337, 0fC0A55DF6;
	fma.rn.f32 	%f341, %f339, %f337, 0f4081E0CF;
	fma.rn.f32 	%f342, %f337, %f336, 0f00000000;
	add.s32 	%r260, %r259, 1;
	fma.rn.f32 	%f374, %f372, %f371, 0fC0A55DF6;
	fma.rn.f32 	%f375, %f373, %f371, 0f4081E0CF;
	fma.rn.f32 	%f376, %f371, %f370, 0f00000000;
	add.s32 	%r271, %r270, 1;
	fma.rn.f32 	%f409, %f407, %f406, 0fC0A55DF6;
	fma.rn.f32 	%f410, %f408, %f406, 0f4081E0CF;
	fma.rn.f32 	%f411, %f406, %f405, 0f00000000;
	add.s32 	%r278, %r277, 1;
	fma.rn.f32 	%f443, %f441, %f440, 0fC0A55DF6;
	fma.rn.f32 	%f444, %f442, %f440, 0f4081E0CF;
	fma.rn.f32 	%f445, %f440, %f439, 0f00000000;
	cvt.rzi.s32.f32 	%r295, %f487;
	fma.rn.f32 	%f492, %f490, %f489, 0fC0A55DF6;
	fma.rn.f32 	%f493, %f491, %f489, 0f4081E0CF;
	fma.rn.f32 	%f494, %f489, %f488, 0f00000000;
	cvt.rzi.s32.f32 	%r318, %f539;
	fma.rn.f32 	%f544, %f542, %f541, 0fC0A55DF6;
	fma.rn.f32 	%f545, %f543, %f541, 0f4081E0CF;
	fma.rn.f32 	%f546, %f541, %f540, 0f00000000;
	cvt.rzi.s32.f32 	%r340, %f592;
	fma.rn.f32 	%f597, %f595, %f594, 0fC0A55DF6;
	fma.rn.f32 	%f598, %f596, %f594, 0f4081E0CF;
	fma.rn.f32 	%f599, %f594, %f593, 0f00000000;
	cvt.rzi.s32.f32 	%r371, %f643;
	fma.rn.f32 	%f648, %f646, %f645, 0fC0A55DF6;
	fma.rn.f32 	%f649, %f647, %f645, 0f4081E0CF;
	fma.rn.f32 	%f650, %f645, %f644, 0f00000000;
	mul.f32 	%f698, %f697, %f697;
	mul.f32 	%f749, %f748, %f748;
	selp.f32 	%f799, %f798, %f797, %p199;
	fma.rn.f32 	%f205, %f203, %f199, 0fC09DE9E6;
	fma.rn.f32 	%f206, %f202, %f204, 0f00000000;
	and.b32  	%r218, %r217, 1;
	fma.rn.f32 	%f239, %f237, %f233, 0fC09DE9E6;
	fma.rn.f32 	%f240, %f236, %f238, 0f00000000;
	and.b32  	%r225, %r224, 1;
	fma.rn.f32 	%f274, %f272, %f268, 0fC09DE9E6;
	fma.rn.f32 	%f275, %f271, %f273, 0f00000000;
	and.b32  	%r236, %r235, 1;
	fma.rn.f32 	%f308, %f306, %f302, 0fC09DE9E6;
	fma.rn.f32 	%f309, %f305, %f307, 0f00000000;
	and.b32  	%r243, %r242, 1;
	fma.rn.f32 	%f343, %f341, %f337, 0fC09DE9E6;
	fma.rn.f32 	%f344, %f340, %f342, 0f00000000;
	and.b32  	%r254, %r253, 1;
	fma.rn.f32 	%f377, %f375, %f371, 0fC09DE9E6;
	fma.rn.f32 	%f378, %f374, %f376, 0f00000000;
	and.b32  	%r261, %r260, 1;
	fma.rn.f32 	%f412, %f410, %f406, 0fC09DE9E6;
	fma.rn.f32 	%f413, %f409, %f411, 0f00000000;
	and.b32  	%r272, %r271, 1;
	fma.rn.f32 	%f446, %f444, %f440, 0fC09DE9E6;
	fma.rn.f32 	%f447, %f443, %f445, 0f00000000;
	and.b32  	%r279, %r278, 1;
	fma.rn.f32 	%f495, %f493, %f489, 0fC09DE9E6;
	fma.rn.f32 	%f496, %f492, %f494, 0f00000000;
	and.b32  	%r296, %r295, 1;
	fma.rn.f32 	%f547, %f545, %f541, 0fC09DE9E6;
	fma.rn.f32 	%f548, %f544, %f546, 0f00000000;
	and.b32  	%r319, %r318, 1;
	fma.rn.f32 	%f600, %f598, %f594, 0fC09DE9E6;
	fma.rn.f32 	%f601, %f597, %f599, 0f00000000;
	and.b32  	%r341, %r340, 1;
	fma.rn.f32 	%f651, %f649, %f645, 0fC09DE9E6;
	fma.rn.f32 	%f652, %f648, %f650, 0f00000000;
	and.b32  	%r372, %r371, 1;
	fma.rn.f32 	%f699, %f698, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f700, %f698, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f750, %f749, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f751, %f749, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f800, %f799, 0fBF000000, %f904;
	fma.rn.f32 	%f207, %f205, %f199, 0f3F800000;
	fma.rn.f32 	%f208, %f198, 0f40490FDB, %f206;
	setp.eq.b32 	%p16, %r218, 1;
	fma.rn.f32 	%f241, %f239, %f233, 0f3F800000;
	fma.rn.f32 	%f242, %f232, 0f40490FDB, %f240;
	setp.eq.b32 	%p22, %r225, 1;
	fma.rn.f32 	%f276, %f274, %f268, 0f3F800000;
	fma.rn.f32 	%f277, %f267, 0f40490FDB, %f275;
	setp.eq.b32 	%p28, %r236, 1;
	fma.rn.f32 	%f310, %f308, %f302, 0f3F800000;
	fma.rn.f32 	%f311, %f301, 0f40490FDB, %f309;
	setp.eq.b32 	%p34, %r243, 1;
	fma.rn.f32 	%f345, %f343, %f337, 0f3F800000;
	fma.rn.f32 	%f346, %f336, 0f40490FDB, %f344;
	setp.eq.b32 	%p40, %r254, 1;
	fma.rn.f32 	%f379, %f377, %f371, 0f3F800000;
	fma.rn.f32 	%f380, %f370, 0f40490FDB, %f378;
	setp.eq.b32 	%p46, %r261, 1;
	fma.rn.f32 	%f414, %f412, %f406, 0f3F800000;
	fma.rn.f32 	%f415, %f405, 0f40490FDB, %f413;
	setp.eq.b32 	%p52, %r272, 1;
	fma.rn.f32 	%f448, %f446, %f440, 0f3F800000;
	fma.rn.f32 	%f449, %f439, 0f40490FDB, %f447;
	setp.eq.b32 	%p58, %r279, 1;
	fma.rn.f32 	%f497, %f495, %f489, 0f3F800000;
	fma.rn.f32 	%f498, %f488, 0f40490FDB, %f496;
	setp.eq.b32 	%p76, %r296, 1;
	fma.rn.f32 	%f549, %f547, %f541, 0f3F800000;
	fma.rn.f32 	%f550, %f540, 0f40490FDB, %f548;
	setp.eq.b32 	%p96, %r319, 1;
	fma.rn.f32 	%f602, %f600, %f594, 0f3F800000;
	fma.rn.f32 	%f603, %f593, 0f40490FDB, %f601;
	setp.eq.b32 	%p117, %r341, 1;
	fma.rn.f32 	%f653, %f651, %f645, 0f3F800000;
	fma.rn.f32 	%f654, %f644, 0f40490FDB, %f652;
	setp.eq.b32 	%p137, %r372, 1;
	cvt.rzi.s32.f32 	%r387, %f696;
	fma.rn.f32 	%f701, %f699, %f698, 0fC0A55DF6;
	fma.rn.f32 	%f702, %f700, %f698, 0f4081E0CF;
	fma.rn.f32 	%f703, %f698, %f697, 0f00000000;
	cvt.rzi.s32.f32 	%r409, %f747;
	fma.rn.f32 	%f752, %f750, %f749, 0fC0A55DF6;
	fma.rn.f32 	%f753, %f751, %f749, 0f4081E0CF;
	fma.rn.f32 	%f754, %f749, %f748, 0f00000000;
	mul.f32 	%f801, %f800, %f800;
	selp.f32 	%f209, %f207, %f208, %p16;
	and.b32  	%r219, %r217, 2;
	mov.f32 	%f210, 0f00000000;
	selp.f32 	%f243, %f241, %f242, %p22;
	and.b32  	%r226, %r224, 2;
	selp.f32 	%f278, %f276, %f277, %p28;
	and.b32  	%r237, %r235, 2;
	selp.f32 	%f312, %f310, %f311, %p34;
	and.b32  	%r244, %r242, 2;
	selp.f32 	%f347, %f345, %f346, %p40;
	and.b32  	%r255, %r253, 2;
	selp.f32 	%f381, %f379, %f380, %p46;
	and.b32  	%r262, %r260, 2;
	selp.f32 	%f416, %f414, %f415, %p52;
	and.b32  	%r273, %r271, 2;
	selp.f32 	%f450, %f448, %f449, %p58;
	and.b32  	%r280, %r278, 2;
	selp.f32 	%f499, %f497, %f498, %p76;
	and.b32  	%r297, %r295, 2;
	selp.f32 	%f551, %f549, %f550, %p96;
	and.b32  	%r320, %r318, 2;
	selp.f32 	%f604, %f602, %f603, %p117;
	and.b32  	%r342, %r340, 2;
	selp.f32 	%f655, %f653, %f654, %p137;
	and.b32  	%r373, %r371, 2;
	fma.rn.f32 	%f704, %f702, %f698, 0fC09DE9E6;
	fma.rn.f32 	%f705, %f701, %f703, 0f00000000;
	and.b32  	%r388, %r387, 1;
	fma.rn.f32 	%f755, %f753, %f749, 0fC09DE9E6;
	fma.rn.f32 	%f756, %f752, %f754, 0f00000000;
	and.b32  	%r410, %r409, 1;
	fma.rn.f32 	%f802, %f801, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f803, %f801, 0f3E684E12, 0fBFAAD2E0;
	setp.eq.s32 	%p17, %r219, 0;
	sub.f32 	%f211, %f210, %f209;
	setp.eq.s32 	%p23, %r226, 0;
	sub.f32 	%f245, %f210, %f243;
	setp.eq.s32 	%p29, %r237, 0;
	sub.f32 	%f280, %f210, %f278;
	setp.eq.s32 	%p35, %r244, 0;
	sub.f32 	%f314, %f210, %f312;
	setp.eq.s32 	%p41, %r255, 0;
	sub.f32 	%f349, %f210, %f347;
	setp.eq.s32 	%p47, %r262, 0;
	sub.f32 	%f383, %f210, %f381;
	setp.eq.s32 	%p53, %r273, 0;
	sub.f32 	%f418, %f210, %f416;
	setp.eq.s32 	%p59, %r280, 0;
	sub.f32 	%f452, %f210, %f450;
	setp.eq.s32 	%p77, %r297, 0;
	neg.f32 	%f501, %f499;
	add.s32 	%r298, %r295, 1;
	cvt.rzi.f32.f32 	%f506, %f884;
	setp.eq.s32 	%p97, %r320, 0;
	neg.f32 	%f553, %f551;
	add.s32 	%r321, %r318, 1;
	cvt.rzi.f32.f32 	%f558, %f888;
	setp.eq.s32 	%p118, %r342, 0;
	neg.f32 	%f606, %f604;
	add.s32 	%r343, %r340, 1;
	cvt.rzi.f32.f32 	%f611, %f892;
	setp.eq.s32 	%p138, %r373, 0;
	neg.f32 	%f657, %f655;
	add.s32 	%r374, %r371, 1;
	cvt.rzi.f32.f32 	%f662, %f896;
	fma.rn.f32 	%f706, %f704, %f698, 0f3F800000;
	fma.rn.f32 	%f707, %f697, 0f40490FDB, %f705;
	setp.eq.b32 	%p158, %r388, 1;
	fma.rn.f32 	%f757, %f755, %f749, 0f3F800000;
	fma.rn.f32 	%f758, %f748, 0f40490FDB, %f756;
	setp.eq.b32 	%p178, %r410, 1;
	cvt.rzi.s32.f32 	%r423, %f799;
	fma.rn.f32 	%f804, %f802, %f801, 0fC0A55DF6;
	fma.rn.f32 	%f805, %f803, %f801, 0f4081E0CF;
	fma.rn.f32 	%f806, %f801, %f800, 0f00000000;
	selp.f32 	%f212, %f209, %f211, %p17;
	selp.f32 	%f246, %f243, %f245, %p23;
	selp.f32 	%f281, %f278, %f280, %p29;
	selp.f32 	%f315, %f312, %f314, %p35;
	selp.f32 	%f350, %f347, %f349, %p41;
	selp.f32 	%f384, %f381, %f383, %p47;
	selp.f32 	%f419, %f416, %f418, %p53;
	selp.f32 	%f453, %f450, %f452, %p59;
	selp.f32 	%f500, %f498, %f497, %p76;
	selp.f32 	%f502, %f499, %f501, %p77;
	and.b32  	%r299, %r298, 2;
	setp.eq.f32 	%p79, %f506, %f884;
	mul.f32 	%f507, %f884, 0f00000000;
	selp.f32 	%f552, %f550, %f549, %p96;
	selp.f32 	%f554, %f551, %f553, %p97;
	and.b32  	%r322, %r321, 2;
	setp.eq.f32 	%p99, %f558, %f888;
	mul.f32 	%f559, %f888, 0f00000000;
	selp.f32 	%f605, %f603, %f602, %p117;
	selp.f32 	%f607, %f604, %f606, %p118;
	and.b32  	%r344, %r343, 2;
	setp.eq.f32 	%p120, %f611, %f892;
	mul.f32 	%f612, %f892, 0f00000000;
	selp.f32 	%f656, %f654, %f653, %p137;
	selp.f32 	%f658, %f655, %f657, %p138;
	and.b32  	%r375, %r374, 2;
	setp.eq.f32 	%p140, %f662, %f896;
	mul.f32 	%f663, %f896, 0f00000000;
	selp.f32 	%f708, %f706, %f707, %p158;
	and.b32  	%r389, %r387, 2;
	selp.f32 	%f759, %f757, %f758, %p178;
	and.b32  	%r411, %r409, 2;
	fma.rn.f32 	%f807, %f805, %f801, 0fC09DE9E6;
	fma.rn.f32 	%f808, %f804, %f806, 0f00000000;
	and.b32  	%r424, %r423, 1;
	mul.f32 	%f154, %f212, %f212;
	mul.f32 	%f4, %f246, %f246;
	mul.f32 	%f8, %f281, %f281;
	mul.f32 	%f13, %f315, %f315;
	mul.f32 	%f17, %f350, %f350;
	mul.f32 	%f22, %f384, %f384;
	mul.f32 	%f26, %f419, %f419;
	mul.f32 	%f31, %f453, %f453;
	setp.eq.s32 	%p78, %r299, 0;
	sub.f32 	%f504, %f210, %f500;
	selp.f32 	%f52, %f507, %f502, %p79;
	abs.f32 	%f508, %f884;
	setp.eq.s32 	%p98, %r322, 0;
	sub.f32 	%f556, %f210, %f552;
	selp.f32 	%f560, %f559, %f554, %p99;
	abs.f32 	%f561, %f888;
	setp.eq.s32 	%p119, %r344, 0;
	sub.f32 	%f609, %f210, %f605;
	selp.f32 	%f86, %f612, %f607, %p120;
	abs.f32 	%f613, %f892;
	setp.eq.s32 	%p139, %r375, 0;
	sub.f32 	%f660, %f210, %f656;
	selp.f32 	%f664, %f663, %f658, %p140;
	abs.f32 	%f665, %f896;
	setp.eq.s32 	%p159, %r389, 0;
	neg.f32 	%f710, %f708;
	add.s32 	%r390, %r387, 1;
	cvt.rzi.f32.f32 	%f715, %f912;
	setp.eq.s32 	%p179, %r411, 0;
	neg.f32 	%f761, %f759;
	add.s32 	%r412, %r409, 1;
	cvt.rzi.f32.f32 	%f766, %f900;
	fma.rn.f32 	%f809, %f807, %f801, 0f3F800000;
	fma.rn.f32 	%f810, %f800, 0f40490FDB, %f808;
	setp.eq.b32 	%p200, %r424, 1;
	mul.f32 	%f216, %f154, 0f3C0AF64E;
	mul.f32 	%f250, %f4, 0f3C0AF64E;
	mul.f32 	%f285, %f8, 0f3C0AF64E;
	mul.f32 	%f319, %f13, 0f3C0AF64E;
	mul.f32 	%f354, %f17, 0f3C0AF64E;
	mul.f32 	%f388, %f22, 0f3C0AF64E;
	mul.f32 	%f423, %f26, 0f3C0AF64E;
	mul.f32 	%f456, %f31, 0f3C0AF64E;
	selp.f32 	%f505, %f500, %f504, %p78;
	setp.gt.f32 	%p80, %f508, 0f4B800000;
	add.f32 	%f509, %f52, 0f3F800000;
	selp.f32 	%f557, %f552, %f556, %p98;
	setp.gt.f32 	%p100, %f561, 0f4B800000;
	add.f32 	%f562, %f560, 0f3F800000;
	selp.f32 	%f610, %f605, %f609, %p119;
	setp.gt.f32 	%p121, %f613, 0f4B800000;
	add.f32 	%f614, %f86, 0f3F800000;
	selp.f32 	%f661, %f656, %f660, %p139;
	setp.gt.f32 	%p141, %f665, 0f4B800000;
	add.f32 	%f666, %f664, 0f3F800000;
	selp.f32 	%f709, %f707, %f706, %p158;
	selp.f32 	%f711, %f708, %f710, %p159;
	and.b32  	%r391, %r390, 2;
	setp.eq.f32 	%p161, %f715, %f912;
	mul.f32 	%f716, %f912, 0f00000000;
	selp.f32 	%f760, %f758, %f757, %p178;
	selp.f32 	%f762, %f759, %f761, %p179;
	and.b32  	%r413, %r412, 2;
	setp.eq.f32 	%p181, %f766, %f900;
	mul.f32 	%f767, %f900, 0f00000000;
	selp.f32 	%f811, %f809, %f810, %p200;
	and.b32  	%r425, %r423, 2;
	mul.f32 	%f3, %f216, %f874;
	mul.f32 	%f251, %f250, %f875;
	mul.f32 	%f12, %f285, %f876;
	mul.f32 	%f320, %f319, %f877;
	mul.f32 	%f21, %f354, %f878;
	mul.f32 	%f389, %f388, %f879;
	mul.f32 	%f30, %f423, %f880;
	mul.f32 	%f457, %f456, %f881;
	selp.f32 	%f53, %f509, %f505, %p80;
	selp.f32 	%f563, %f562, %f557, %p100;
	selp.f32 	%f87, %f614, %f610, %p121;
	selp.f32 	%f667, %f666, %f661, %p141;
	setp.eq.s32 	%p160, %r391, 0;
	sub.f32 	%f713, %f210, %f709;
	selp.f32 	%f176, %f716, %f711, %p161;
	abs.f32 	%f717, %f912;
	setp.eq.s32 	%p180, %r413, 0;
	sub.f32 	%f764, %f210, %f760;
	selp.f32 	%f768, %f767, %f762, %p181;
	abs.f32 	%f769, %f900;
	setp.eq.s32 	%p201, %r425, 0;
	neg.f32 	%f813, %f811;
	add.s32 	%r426, %r423, 1;
	cvt.rzi.f32.f32 	%f818, %f904;
	ld.param.u64 	%rd2, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	ld.param.u64 	%rd3, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mov.b32 	%r229, %f251;
	mov.b32 	%r228, %f3;
	mov.b32 	%r247, %f320;
	mov.b32 	%r246, %f12;
	mov.b32 	%r265, %f389;
	mov.b32 	%r264, %f21;
	mov.b32 	%r283, %f457;
	mov.b32 	%r282, %f30;
	mov.b32 	%r311, %f563;
	mov.b32 	%r310, %f53;
	mov.b32 	%r314, %f560;
	mov.b32 	%r313, %f52;
	mov.b32 	%r358, %f667;
	mov.b32 	%r357, %f87;
	mov.b32 	%r364, %f664;
	mov.b32 	%r363, %f86;
	selp.f32 	%f714, %f709, %f713, %p160;
	setp.gt.f32 	%p162, %f717, 0f4B800000;
	add.f32 	%f718, %f176, 0f3F800000;
	selp.f32 	%f765, %f760, %f764, %p180;
	setp.gt.f32 	%p182, %f769, 0f4B800000;
	add.f32 	%f770, %f768, 0f3F800000;
	selp.f32 	%f812, %f810, %f809, %p200;
	selp.f32 	%f814, %f811, %f813, %p201;
	and.b32  	%r427, %r426, 2;
	setp.eq.f32 	%p203, %f818, %f904;
	mul.f32 	%f819, %f904, 0f00000000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r227, %r229, %r228;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r245, %r247, %r246;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r263, %r265, %r264;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r281, %r283, %r282;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r309, %r311, %r310;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r312, %r314, %r313;
	// end inline asm
	xor.b32  	%r361, %r364, -2147483648;
	xor.b32  	%r360, %r363, -2147483648;
	selp.f32 	%f177, %f718, %f714, %p162;
	selp.f32 	%f771, %f770, %f765, %p182;
	setp.eq.s32 	%p202, %r427, 0;
	sub.f32 	%f816, %f210, %f812;
	selp.f32 	%f136, %f819, %f814, %p203;
	abs.f32 	%f820, %f904;
	// begin inline asm
	cvt.rn.f16x2.f32 %r356, %r358, %r357;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r359, %r361, %r360;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r362, %r364, %r363;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r365, %r358, %r357;
	// end inline asm
	mov.b32 	%r402, %f771;
	mov.b32 	%r401, %f177;
	mov.b32 	%r405, %f768;
	mov.b32 	%r404, %f176;
	selp.f32 	%f817, %f812, %f816, %p202;
	setp.gt.f32 	%p204, %f820, 0f4B800000;
	add.f32 	%f821, %f136, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r400, %r402, %r401;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r403, %r405, %r404;
	// end inline asm
	selp.f32 	%f137, %f821, %f817, %p204;
	add.f32 	%f842, %f908, %f908;
	mov.b32 	%r446, %f842;
	and.b32  	%r447, %r446, -2147483648;
	or.b32  	%r448, %r447, 1056964608;
	mov.b32 	%f843, %r448;
	add.f32 	%f844, %f842, %f843;
	cvt.rzi.f32.f32 	%f845, %f844;
	abs.f32 	%f846, %f842;
	setp.gt.f32 	%p217, %f846, 0f4B000000;
	selp.f32 	%f847, %f842, %f845, %p217;
	cvt.rzi.f32.f32 	%f848, %f842;
	setp.lt.f32 	%p218, %f846, 0f3F000000;
	selp.f32 	%f849, %f848, %f847, %p218;
	cvt.rzi.s32.f32 	%r449, %f849;
	fma.rn.f32 	%f850, %f849, 0fBF000000, %f908;
	mul.f32 	%f851, %f850, %f850;
	fma.rn.f32 	%f852, %f851, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f853, %f851, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f854, %f852, %f851, 0fC0A55DF6;
	fma.rn.f32 	%f855, %f853, %f851, 0f4081E0CF;
	fma.rn.f32 	%f856, %f851, %f850, 0f00000000;
	fma.rn.f32 	%f857, %f855, %f851, 0fC09DE9E6;
	fma.rn.f32 	%f858, %f854, %f856, 0f00000000;
	fma.rn.f32 	%f859, %f857, %f851, 0f3F800000;
	fma.rn.f32 	%f860, %f850, 0f40490FDB, %f858;
	and.b32  	%r450, %r449, 1;
	setp.eq.b32 	%p219, %r450, 1;
	selp.f32 	%f861, %f859, %f860, %p219;
	selp.f32 	%f862, %f860, %f859, %p219;
	and.b32  	%r451, %r449, 2;
	setp.eq.s32 	%p220, %r451, 0;
	neg.f32 	%f863, %f861;
	selp.f32 	%f864, %f861, %f863, %p220;
	add.s32 	%r452, %r449, 1;
	and.b32  	%r453, %r452, 2;
	setp.eq.s32 	%p221, %r453, 0;
	sub.f32 	%f866, %f210, %f862;
	selp.f32 	%f867, %f862, %f866, %p221;
	cvt.rzi.f32.f32 	%f868, %f908;
	setp.eq.f32 	%p222, %f868, %f908;
	mul.f32 	%f869, %f908, 0f00000000;
	selp.f32 	%f870, %f869, %f864, %p222;
	abs.f32 	%f871, %f908;
	setp.gt.f32 	%p223, %f871, 0f4B800000;
	add.f32 	%f872, %f870, 0f3F800000;
	selp.f32 	%f873, %f872, %f867, %p223;
	mov.b32 	%r436, %f873;
	mov.b32 	%r435, %f137;
	// begin inline asm
	cvt.rn.f16x2.f32 %r434, %r436, %r435;
	// end inline asm
	mov.b32 	%r442, %f870;
	xor.b32  	%r439, %r442, -2147483648;
	mov.b32 	%r441, %f136;
	xor.b32  	%r438, %r441, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r437, %r439, %r438;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r440, %r442, %r441;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r443, %r436, %r435;
	// end inline asm
	shl.b32 	%r455, %r186, 12;
	shl.b32 	%r456, %r2, 5;
	and.b32  	%r457, %r114, 28;
	and.b32  	%r458, %r456, 96;
	or.b32  	%r459, %r458, %r457;
	or.b32  	%r83, %r1, %r115;
	and.b32  	%r84, %r456, 128;
	or.b32  	%r460, %r459, %r84;
	or.b32  	%r85, %r460, %r455;
	bfe.s32 	%r461, %r1, 3, 1;
	and.b32  	%r86, %r1, 8;
	shl.b32 	%r462, %r1, 4;
	or.b32  	%r463, %r86, %r462;
	shr.u32 	%r464, %r463, 2;
	and.b32  	%r465, %r464, 30;
	shr.u32 	%r466, %r3, 1;
	and.b32  	%r87, %r1, 4;
	and.b32  	%r467, %r4, 32;
	or.b32  	%r468, %r467, %r466;
	or.b32  	%r469, %r468, 8;
	or.b32  	%r470, %r468, 16;
	or.b32  	%r471, %r468, 24;
	or.b32  	%r472, %r117, %r115;
	or.b32  	%r473, %r472, %r113;
	or.b32  	%r474, %r473, %r116;
	shr.u32 	%r475, %r474, 1;
	mul.lo.s32 	%r476, %r475, 65;
	add.s32 	%r477, %r468, %r476;
	add.s32 	%r478, %r469, %r476;
	add.s32 	%r479, %r470, %r476;
	add.s32 	%r480, %r471, %r476;
	shl.b32 	%r481, %r3, 1;
	or.b32  	%r482, %r121, %r481;
	mul.lo.s32 	%r483, %r482, 65;
	add.s32 	%r484, %r465, %r483;
	mul.wide.u32 	%rd72, %r484, 4;
	mov.u64 	%rd73, shmem;
	add.s64 	%rd5, %rd73, %rd72;
	cvt.u64.u32 	%rd74, %r465;
	cvt.u64.u32 	%rd75, %r483;
	add.s64 	%rd76, %rd75, %rd74;
	shl.b64 	%rd77, %rd76, 2;
	add.s64 	%rd6, %rd73, %rd77;
	shl.b32 	%r485, %r188, 18;
	add.s32 	%r486, %r485, -786432;
	or.b32  	%r487, %r111, %r122;
	shl.b32 	%r488, %r3, 10;
	shl.b32 	%r489, %r487, 8;
	or.b32  	%r490, %r488, %r489;
	or.b32  	%r88, %r459, %r490;
	cvt.s64.s32 	%rd7, %r486;
	or.b32  	%r491, %r457, %r488;
	or.b32  	%r492, %r491, %r458;
	or.b32  	%r493, %r492, %r84;
	or.b32  	%r89, %r493, %r489;
	mul.lo.s32 	%r494, %r121, 65;
	bfe.s32 	%r495, %r3, 2, 1;
	and.b32  	%r496, %r3, 4;
	setp.eq.s32 	%p225, %r496, 0;
	and.b32  	%r497, %r495, 260;
	and.b32  	%r498, %r3, 1;
	neg.s32 	%r499, %r498;
	setp.eq.b32 	%p226, %r498, 1;
	and.b32  	%r500, %r499, 1040;
	bfe.s32 	%r501, %r3, 1, 1;
	and.b32  	%r502, %r3, 2;
	setp.eq.s32 	%p227, %r502, 0;
	and.b32  	%r503, %r501, 520;
	shr.u32 	%r504, %r3, 3;
	mul.lo.s32 	%r505, %r504, 130;
	add.s32 	%r506, %r500, %r465;
	add.s32 	%r507, %r506, %r494;
	add.s32 	%r508, %r507, %r497;
	add.s32 	%r509, %r508, %r503;
	add.s32 	%r510, %r509, %r505;
	mul.wide.u32 	%rd78, %r510, 4;
	add.s64 	%rd8, %rd73, %rd78;
	cvt.u64.u32 	%rd79, %r505;
	selp.b64 	%rd80, 0, 520, %p227;
	selp.b64 	%rd81, 0, 260, %p225;
	cvt.u64.u32 	%rd82, %r494;
	selp.b64 	%rd83, 1040, 0, %p226;
	add.s64 	%rd84, %rd74, %rd83;
	add.s64 	%rd85, %rd84, %rd82;
	add.s64 	%rd86, %rd85, %rd81;
	add.s64 	%rd87, %rd86, %rd80;
	add.s64 	%rd88, %rd87, %rd79;
	shl.b64 	%rd89, %rd88, 2;
	add.s64 	%rd9, %rd73, %rd89;
	cvt.u64.u32 	%rd90, %r508;
	add.s64 	%rd91, %rd90, %rd80;
	add.s64 	%rd92, %rd91, %rd79;
	shl.b64 	%rd93, %rd92, 2;
	add.s64 	%rd10, %rd73, %rd93;
	add.s32 	%r511, %r510, 2113;
	mul.wide.u32 	%rd94, %r511, 4;
	add.s64 	%rd11, %rd73, %rd94;
	add.s32 	%r512, %r510, 2082;
	mul.wide.u32 	%rd95, %r512, 4;
	add.s64 	%rd12, %rd73, %rd95;
	add.s32 	%r513, %r510, 2114;
	mul.wide.u32 	%rd96, %r513, 4;
	add.s64 	%rd13, %rd73, %rd96;
	add.s32 	%r514, %r510, 4194;
	mul.wide.u32 	%rd97, %r514, 4;
	add.s64 	%rd14, %rd73, %rd97;
	add.s32 	%r515, %r510, 4163;
	mul.wide.u32 	%rd98, %r515, 4;
	add.s64 	%rd15, %rd73, %rd98;
	add.s32 	%r516, %r510, 4195;
	mul.wide.u32 	%rd99, %r516, 4;
	add.s64 	%rd16, %rd73, %rd99;
	add.s32 	%r517, %r510, 6275;
	mul.wide.u32 	%rd100, %r517, 4;
	add.s64 	%rd17, %rd73, %rd100;
	add.s32 	%r518, %r510, 6244;
	mul.wide.u32 	%rd101, %r518, 4;
	add.s64 	%rd18, %rd73, %rd101;
	add.s32 	%r519, %r510, 6276;
	mul.wide.u32 	%rd102, %r519, 4;
	add.s64 	%rd19, %rd73, %rd102;
	bfe.s32 	%r520, %r1, 1, 1;
	and.b32  	%r521, %r520, 65;
	and.b32  	%r522, %r461, 1040;
	setp.lt.u32 	%p228, %r1, 16;
	selp.b32 	%r90, 0, 520, %p228;
	and.b32  	%r523, %r1, 1;
	neg.s32 	%r524, %r523;
	and.b32  	%r91, %r524, 130;
	or.b32  	%r525, %r468, %r522;
	add.s32 	%r92, %r525, %r521;
	or.b32  	%r526, %r469, %r522;
	add.s32 	%r93, %r526, %r521;
	add.s32 	%r527, %r470, %r522;
	add.s32 	%r94, %r527, %r521;
	add.s32 	%r528, %r471, %r522;
	add.s32 	%r95, %r528, %r521;
	mul.wide.u32 	%rd103, %r480, 4;
	add.s64 	%rd20, %rd73, %rd103;
	mul.wide.u32 	%rd104, %r479, 4;
	add.s64 	%rd21, %rd73, %rd104;
	mul.wide.u32 	%rd105, %r478, 4;
	add.s64 	%rd22, %rd73, %rd105;
	mul.wide.u32 	%rd106, %r477, 4;
	add.s64 	%rd23, %rd73, %rd106;
	setp.eq.s32 	%p229, %r86, 0;
	mov.u16 	%rs1176, 25600;
	mov.u16 	%rs1072, 21504;
	mov.u16 	%rs1184, 18432;
	mov.u16 	%rs1142, -14592;
	mov.u32 	%r8039, %r7994;
	mov.u32 	%r8038, %r7994;
	mov.u32 	%r8037, %r7994;
	mov.u32 	%r8036, %r7994;
	mov.u32 	%r8035, %r7994;
	mov.u32 	%r8034, %r7994;
	mov.u32 	%r8033, %r7994;
	mov.u32 	%r8032, %r7994;
	mov.u32 	%r8031, %r7994;
	mov.u32 	%r8030, %r7994;
	mov.u32 	%r8029, %r7994;
	mov.u32 	%r8028, %r7994;
	mov.u32 	%r108, %r7994;
	bra.uni 	$L__BB0_129;
$L__BB0_152:                            // %pass16878
                                        //   in Loop: Header=BB0_129 Depth=1
	or.b32  	%r7990, %r7996, 786432;
	cvt.s64.s32 	%rd160, %r7990;
	add.s64 	%rd161, %rd160, %rd7;
	shr.u64 	%rd162, %rd161, 35;
	add.s64 	%rd163, %rd161, %rd162;
	shr.s64 	%rd164, %rd163, 29;
	setp.lt.s64 	%p257, %rd161, 0;
	and.b64  	%rd165, %rd163, -536870912;
	setp.ne.s64 	%p258, %rd165, %rd161;
	and.pred  	%p259, %p257, %p258;
	selp.u64 	%rd166, 1, 0, %p259;
	sub.s64 	%rd167, %rd166, %rd164;
	shl.b64 	%rd168, %rd167, 29;
	add.s64 	%rd169, %rd168, %rd161;
	shl.b64 	%rd170, %rd169, 2;
	add.s64 	%rd171, %rd3, %rd170;
	st.global.v4.u32 	[%rd171], {%r180, %r182, %r181, %r183};
	setp.ne.s32 	%p260, %r108, 130816;
	add.s32 	%r108, %r108, 256;
	add.s32 	%r7991, %r108, %r186;
	setp.lt.s32 	%p261, %r7991, %r187;
	and.pred  	%p262, %p260, %p261;
	@%p262 bra 	$L__BB0_129;
	bra.uni 	$L__BB0_153;
$L__BB0_129:                            // %L1473
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_130 Depth 2
	or.b32  	%r594, %r108, %r83;
	and.b32  	%r595, %r594, 130864;
	or.b32  	%r596, %r595, %r3;
	shl.b32 	%r597, %r596, 12;
	add.s32 	%r598, %r85, %r597;
	shr.s32 	%r599, %r598, 31;
	shr.u32 	%r600, %r599, 3;
	add.s32 	%r601, %r598, %r600;
	shr.s32 	%r602, %r601, 29;
	setp.lt.s32 	%p230, %r598, 0;
	and.b32  	%r603, %r601, -536870912;
	setp.ne.s32 	%p231, %r603, %r598;
	and.pred  	%p232, %p230, %p231;
	selp.u32 	%r604, 1, 0, %p232;
	sub.s32 	%r605, %r604, %r602;
	shl.b32 	%r606, %r605, 29;
	add.s32 	%r607, %r606, %r598;
	mul.wide.s32 	%rd107, %r607, 4;
	add.s64 	%rd108, %rd2, %rd107;
	ld.global.v4.u32 	{%r608, %r609, %r610, %r611}, [%rd108];
	or.b32  	%r612, %r597, 262144;
	add.s32 	%r613, %r85, %r612;
	shr.s32 	%r614, %r613, 31;
	shr.u32 	%r615, %r614, 3;
	add.s32 	%r616, %r613, %r615;
	shr.s32 	%r617, %r616, 29;
	setp.lt.s32 	%p233, %r613, 0;
	and.b32  	%r618, %r616, -536870912;
	setp.ne.s32 	%p234, %r618, %r613;
	and.pred  	%p235, %p233, %p234;
	selp.u32 	%r619, 1, 0, %p235;
	sub.s32 	%r620, %r619, %r617;
	shl.b32 	%r621, %r620, 29;
	add.s32 	%r622, %r621, %r613;
	mul.wide.s32 	%rd109, %r622, 4;
	add.s64 	%rd110, %rd2, %rd109;
	ld.global.v4.u32 	{%r623, %r624, %r625, %r626}, [%rd110];
	or.b32  	%r627, %r597, 524288;
	add.s32 	%r628, %r85, %r627;
	shr.s32 	%r629, %r628, 31;
	shr.u32 	%r630, %r629, 3;
	add.s32 	%r631, %r628, %r630;
	shr.s32 	%r632, %r631, 29;
	setp.lt.s32 	%p236, %r628, 0;
	and.b32  	%r633, %r631, -536870912;
	setp.ne.s32 	%p237, %r633, %r628;
	and.pred  	%p238, %p236, %p237;
	selp.u32 	%r634, 1, 0, %p238;
	sub.s32 	%r635, %r634, %r632;
	shl.b32 	%r636, %r635, 29;
	add.s32 	%r637, %r636, %r628;
	mul.wide.s32 	%rd111, %r637, 4;
	add.s64 	%rd112, %rd2, %rd111;
	ld.global.v4.u32 	{%r638, %r639, %r640, %r641}, [%rd112];
	or.b32  	%r642, %r597, 786432;
	add.s32 	%r643, %r85, %r642;
	shr.s32 	%r644, %r643, 31;
	shr.u32 	%r645, %r644, 3;
	add.s32 	%r646, %r643, %r645;
	shr.s32 	%r647, %r646, 29;
	setp.lt.s32 	%p239, %r643, 0;
	and.b32  	%r648, %r646, -536870912;
	setp.ne.s32 	%p240, %r648, %r643;
	and.pred  	%p241, %p239, %p240;
	selp.u32 	%r649, 1, 0, %p241;
	sub.s32 	%r650, %r649, %r647;
	shl.b32 	%r651, %r650, 29;
	add.s32 	%r652, %r651, %r643;
	mul.wide.s32 	%rd113, %r652, 4;
	add.s64 	%rd114, %rd2, %rd113;
	ld.global.v4.u32 	{%r653, %r654, %r655, %r656}, [%rd114];
	selp.b32 	%r657, %r610, %r608, %p229;
	shfl.sync.bfly.b32	%r658, %r657, 8, 31, -1;
	selp.b32 	%r530, %r608, %r658, %p229;
	selp.b32 	%r531, %r658, %r610, %p229;
	selp.b32 	%r659, %r611, %r609, %p229;
	shfl.sync.bfly.b32	%r660, %r659, 8, 31, -1;
	selp.b32 	%r538, %r609, %r660, %p229;
	selp.b32 	%r539, %r660, %r611, %p229;
	selp.b32 	%r661, %r625, %r623, %p229;
	shfl.sync.bfly.b32	%r662, %r661, 8, 31, -1;
	selp.b32 	%r546, %r623, %r662, %p229;
	selp.b32 	%r547, %r662, %r625, %p229;
	selp.b32 	%r663, %r626, %r624, %p229;
	shfl.sync.bfly.b32	%r664, %r663, 8, 31, -1;
	selp.b32 	%r554, %r624, %r664, %p229;
	selp.b32 	%r555, %r664, %r626, %p229;
	selp.b32 	%r665, %r640, %r638, %p229;
	shfl.sync.bfly.b32	%r666, %r665, 8, 31, -1;
	selp.b32 	%r562, %r638, %r666, %p229;
	selp.b32 	%r563, %r666, %r640, %p229;
	selp.b32 	%r667, %r641, %r639, %p229;
	shfl.sync.bfly.b32	%r668, %r667, 8, 31, -1;
	selp.b32 	%r570, %r639, %r668, %p229;
	selp.b32 	%r571, %r668, %r641, %p229;
	selp.b32 	%r669, %r655, %r653, %p229;
	shfl.sync.bfly.b32	%r670, %r669, 8, 31, -1;
	selp.b32 	%r578, %r653, %r670, %p229;
	selp.b32 	%r579, %r670, %r655, %p229;
	selp.b32 	%r671, %r656, %r654, %p229;
	shfl.sync.bfly.b32	%r672, %r671, 8, 31, -1;
	selp.b32 	%r586, %r654, %r672, %p229;
	selp.b32 	%r587, %r672, %r656, %p229;
	mov.u32 	%r588, 21520;
	// begin inline asm
	prmt.b32 %r529, %r530, %r531, %r588;
	// end inline asm
	mov.u32 	%r592, 30258;
	// begin inline asm
	prmt.b32 %r533, %r530, %r531, %r592;
	// end inline asm
	// begin inline asm
	prmt.b32 %r537, %r538, %r539, %r588;
	// end inline asm
	// begin inline asm
	prmt.b32 %r541, %r538, %r539, %r592;
	// end inline asm
	// begin inline asm
	prmt.b32 %r545, %r546, %r547, %r588;
	// end inline asm
	// begin inline asm
	prmt.b32 %r549, %r546, %r547, %r592;
	// end inline asm
	// begin inline asm
	prmt.b32 %r553, %r554, %r555, %r588;
	// end inline asm
	// begin inline asm
	prmt.b32 %r557, %r554, %r555, %r592;
	// end inline asm
	// begin inline asm
	prmt.b32 %r561, %r562, %r563, %r588;
	// end inline asm
	// begin inline asm
	prmt.b32 %r565, %r562, %r563, %r592;
	// end inline asm
	// begin inline asm
	prmt.b32 %r569, %r570, %r571, %r588;
	// end inline asm
	// begin inline asm
	prmt.b32 %r573, %r570, %r571, %r592;
	// end inline asm
	// begin inline asm
	prmt.b32 %r577, %r578, %r579, %r588;
	// end inline asm
	// begin inline asm
	prmt.b32 %r581, %r578, %r579, %r592;
	// end inline asm
	// begin inline asm
	prmt.b32 %r585, %r586, %r587, %r588;
	// end inline asm
	// begin inline asm
	prmt.b32 %r589, %r586, %r587, %r592;
	// end inline asm
	st.shared.u32 	[%rd8], %r529;
	st.shared.u32 	[%rd9+128], %r533;
	st.shared.u32 	[%rd9+4], %r537;
	st.shared.u32 	[%rd9+132], %r541;
	st.shared.u32 	[%rd10+8324], %r545;
	st.shared.u32 	[%rd11], %r549;
	st.shared.u32 	[%rd12], %r553;
	st.shared.u32 	[%rd13], %r557;
	st.shared.u32 	[%rd10+16648], %r561;
	st.shared.u32 	[%rd14], %r565;
	st.shared.u32 	[%rd15], %r569;
	st.shared.u32 	[%rd16], %r573;
	st.shared.u32 	[%rd10+24972], %r577;
	st.shared.u32 	[%rd17], %r581;
	st.shared.u32 	[%rd18], %r585;
	st.shared.u32 	[%rd19], %r589;
	bar.sync 	0;
	or.b32  	%r109, %r108, %r87;
	shr.u32 	%r8026, %r109, 6;
	mov.u64 	%rd174, %rd23;
	mov.u64 	%rd175, %rd22;
	mov.u64 	%rd176, %rd21;
	mov.u64 	%rd177, %rd20;
	mov.u32 	%r8027, %r7994;
$L__BB0_130:                            // %pass5557
                                        //   Parent Loop BB0_129 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add.s32 	%r7857, %r109, %r8027;
	bfe.s32 	%r7858, %r7857, 2, 1;
	and.b32  	%r7859, %r7858, 260;
	and.b32  	%r7860, %r8026, 3;
	mul.lo.s32 	%r7861, %r7860, 2081;
	add.s32 	%r7862, %r92, %r7859;
	add.s32 	%r7863, %r7862, %r7861;
	add.s32 	%r7864, %r7863, %r90;
	add.s32 	%r7865, %r7864, %r91;
	mul.wide.u32 	%rd115, %r7865, 4;
	add.s64 	%rd117, %rd73, %rd115;
	ld.shared.u32 	%r7866, [%rd117];
	add.s32 	%r7867, %r93, %r7859;
	add.s32 	%r7868, %r7867, %r7861;
	add.s32 	%r7869, %r7868, %r90;
	add.s32 	%r7870, %r7869, %r91;
	mul.wide.u32 	%rd118, %r7870, 4;
	add.s64 	%rd119, %rd73, %rd118;
	ld.shared.u32 	%r7871, [%rd119];
	add.s32 	%r7872, %r94, %r7859;
	add.s32 	%r7873, %r7872, %r7861;
	add.s32 	%r7874, %r7873, %r90;
	add.s32 	%r7875, %r7874, %r91;
	mul.wide.u32 	%rd120, %r7875, 4;
	add.s64 	%rd121, %rd73, %rd120;
	ld.shared.u32 	%r7876, [%rd121];
	add.s32 	%r7877, %r95, %r7859;
	add.s32 	%r7878, %r7877, %r7861;
	add.s32 	%r7879, %r7878, %r90;
	add.s32 	%r7880, %r7879, %r91;
	mul.wide.u32 	%rd122, %r7880, 4;
	add.s64 	%rd123, %rd73, %rd122;
	ld.shared.u32 	%r7881, [%rd123];
	// begin inline asm
	mov.b32 %r678, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r689, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r677, %r7866, -2004318072;
	mov.u32 	%r676, 983055;
	// begin inline asm
	lop3.b32 %r675, %r676, %r677, %r678, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r679, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r680, %r678, %r679;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r683, %r675, %r680;
	// end inline asm
	mov.u32 	%r687, 15728880;
	// begin inline asm
	lop3.b32 %r686, %r687, %r677, %r689, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r690, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r691, %r689, %r690;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r694, %r686, %r691;
	// end inline asm
	shr.u32 	%r699, %r677, 8;
	// begin inline asm
	lop3.b32 %r697, %r676, %r699, %r678, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r701, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r702, %r678, %r701;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r705, %r697, %r702;
	// end inline asm
	// begin inline asm
	lop3.b32 %r708, %r687, %r699, %r689, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r712, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r713, %r689, %r712;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r716, %r708, %r713;
	// end inline asm
	// begin inline asm
	mov.b32 %r724, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r735, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r723, %r7871, -2004318072;
	// begin inline asm
	lop3.b32 %r721, %r676, %r723, %r724, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r725, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r726, %r724, %r725;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r729, %r721, %r726;
	// end inline asm
	// begin inline asm
	lop3.b32 %r732, %r687, %r723, %r735, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r736, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r737, %r735, %r736;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r740, %r732, %r737;
	// end inline asm
	shr.u32 	%r745, %r723, 8;
	// begin inline asm
	lop3.b32 %r743, %r676, %r745, %r724, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r747, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r748, %r724, %r747;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r751, %r743, %r748;
	// end inline asm
	// begin inline asm
	lop3.b32 %r754, %r687, %r745, %r735, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r758, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r759, %r735, %r758;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r762, %r754, %r759;
	// end inline asm
	// begin inline asm
	mov.b32 %r770, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r781, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r769, %r7876, -2004318072;
	// begin inline asm
	lop3.b32 %r767, %r676, %r769, %r770, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r771, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r772, %r770, %r771;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r775, %r767, %r772;
	// end inline asm
	// begin inline asm
	lop3.b32 %r778, %r687, %r769, %r781, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r782, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r783, %r781, %r782;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r786, %r778, %r783;
	// end inline asm
	shr.u32 	%r791, %r769, 8;
	// begin inline asm
	lop3.b32 %r789, %r676, %r791, %r770, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r793, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r794, %r770, %r793;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r797, %r789, %r794;
	// end inline asm
	// begin inline asm
	lop3.b32 %r800, %r687, %r791, %r781, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r804, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r805, %r781, %r804;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r808, %r800, %r805;
	// end inline asm
	// begin inline asm
	mov.b32 %r816, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r827, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r815, %r7881, -2004318072;
	// begin inline asm
	lop3.b32 %r813, %r676, %r815, %r816, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r817, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r818, %r816, %r817;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r821, %r813, %r818;
	// end inline asm
	// begin inline asm
	lop3.b32 %r824, %r687, %r815, %r827, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r828, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r829, %r827, %r828;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r832, %r824, %r829;
	// end inline asm
	shr.u32 	%r837, %r815, 8;
	// begin inline asm
	lop3.b32 %r835, %r676, %r837, %r816, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r839, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r840, %r816, %r839;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r843, %r835, %r840;
	// end inline asm
	// begin inline asm
	lop3.b32 %r846, %r687, %r837, %r827, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r850, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r851, %r827, %r850;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r854, %r846, %r851;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r857, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r859, %r857, %r683;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r862, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r864, %r862, %r694;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r867, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r869, %r867, %r705;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r872, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r874, %r872, %r716;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r877, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r879, %r877, %r729;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r882, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r884, %r882, %r740;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r887, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r889, %r887, %r751;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r892, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r894, %r892, %r762;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r897, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r899, %r897, %r775;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r902, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r904, %r902, %r786;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r907, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r909, %r907, %r797;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r912, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r914, %r912, %r808;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r917, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r919, %r917, %r821;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r922, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r924, %r922, %r832;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r927, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r929, %r927, %r843;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r932, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r934, %r932, %r854;
	// end inline asm
	// begin inline asm
	mov.b32 %r942, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r953, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r941, %r8039, -2004318072;
	// begin inline asm
	lop3.b32 %r939, %r676, %r941, %r942, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r943, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r944, %r942, %r943;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r947, %r939, %r944;
	// end inline asm
	// begin inline asm
	lop3.b32 %r950, %r687, %r941, %r953, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r954, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r955, %r953, %r954;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r958, %r950, %r955;
	// end inline asm
	shr.u32 	%r963, %r941, 8;
	// begin inline asm
	lop3.b32 %r961, %r676, %r963, %r942, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r965, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r966, %r942, %r965;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r969, %r961, %r966;
	// end inline asm
	// begin inline asm
	lop3.b32 %r972, %r687, %r963, %r953, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r976, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r977, %r953, %r976;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r980, %r972, %r977;
	// end inline asm
	// begin inline asm
	mov.b32 %r988, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r999, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r987, %r8038, -2004318072;
	// begin inline asm
	lop3.b32 %r985, %r676, %r987, %r988, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r989, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r990, %r988, %r989;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r993, %r985, %r990;
	// end inline asm
	// begin inline asm
	lop3.b32 %r996, %r687, %r987, %r999, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1000, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1001, %r999, %r1000;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1004, %r996, %r1001;
	// end inline asm
	shr.u32 	%r1009, %r987, 8;
	// begin inline asm
	lop3.b32 %r1007, %r676, %r1009, %r988, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1011, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1012, %r988, %r1011;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1015, %r1007, %r1012;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1018, %r687, %r1009, %r999, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1022, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1023, %r999, %r1022;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1026, %r1018, %r1023;
	// end inline asm
	// begin inline asm
	mov.b32 %r1034, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1045, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1033, %r8037, -2004318072;
	// begin inline asm
	lop3.b32 %r1031, %r676, %r1033, %r1034, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1035, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1036, %r1034, %r1035;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1039, %r1031, %r1036;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1042, %r687, %r1033, %r1045, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1046, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1047, %r1045, %r1046;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1050, %r1042, %r1047;
	// end inline asm
	shr.u32 	%r1055, %r1033, 8;
	// begin inline asm
	lop3.b32 %r1053, %r676, %r1055, %r1034, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1057, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1058, %r1034, %r1057;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1061, %r1053, %r1058;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1064, %r687, %r1055, %r1045, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1068, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1069, %r1045, %r1068;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1072, %r1064, %r1069;
	// end inline asm
	// begin inline asm
	mov.b32 %r1080, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1091, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1079, %r8036, -2004318072;
	// begin inline asm
	lop3.b32 %r1077, %r676, %r1079, %r1080, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1081, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1082, %r1080, %r1081;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1085, %r1077, %r1082;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1088, %r687, %r1079, %r1091, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1092, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1093, %r1091, %r1092;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1096, %r1088, %r1093;
	// end inline asm
	shr.u32 	%r1101, %r1079, 8;
	// begin inline asm
	lop3.b32 %r1099, %r676, %r1101, %r1080, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1103, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1104, %r1080, %r1103;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1107, %r1099, %r1104;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1110, %r687, %r1101, %r1091, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1114, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1115, %r1091, %r1114;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1118, %r1110, %r1115;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1121, %r227, %r947, %r859;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1125, %r227, %r958, %r864;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1129, %r227, %r969, %r869;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1133, %r227, %r980, %r874;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1137, %r227, %r993, %r879;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1141, %r227, %r1004, %r884;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1145, %r227, %r1015, %r889;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1149, %r227, %r1026, %r894;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1153, %r227, %r1039, %r899;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1157, %r227, %r1050, %r904;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1161, %r227, %r1061, %r909;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1165, %r227, %r1072, %r914;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1169, %r227, %r1085, %r919;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1173, %r227, %r1096, %r924;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1177, %r227, %r1107, %r929;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1181, %r227, %r1118, %r934;
	// end inline asm
	// begin inline asm
	mov.b32 %r1190, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1201, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1189, %r8035, -2004318072;
	// begin inline asm
	lop3.b32 %r1187, %r676, %r1189, %r1190, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1191, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1192, %r1190, %r1191;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1195, %r1187, %r1192;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1198, %r687, %r1189, %r1201, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1202, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1203, %r1201, %r1202;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1206, %r1198, %r1203;
	// end inline asm
	shr.u32 	%r1211, %r1189, 8;
	// begin inline asm
	lop3.b32 %r1209, %r676, %r1211, %r1190, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1213, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1214, %r1190, %r1213;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1217, %r1209, %r1214;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1220, %r687, %r1211, %r1201, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1224, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1225, %r1201, %r1224;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1228, %r1220, %r1225;
	// end inline asm
	// begin inline asm
	mov.b32 %r1236, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1247, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1235, %r8034, -2004318072;
	// begin inline asm
	lop3.b32 %r1233, %r676, %r1235, %r1236, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1237, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1238, %r1236, %r1237;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1241, %r1233, %r1238;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1244, %r687, %r1235, %r1247, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1248, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1249, %r1247, %r1248;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1252, %r1244, %r1249;
	// end inline asm
	shr.u32 	%r1257, %r1235, 8;
	// begin inline asm
	lop3.b32 %r1255, %r676, %r1257, %r1236, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1259, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1260, %r1236, %r1259;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1263, %r1255, %r1260;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1266, %r687, %r1257, %r1247, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1270, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1271, %r1247, %r1270;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1274, %r1266, %r1271;
	// end inline asm
	// begin inline asm
	mov.b32 %r1282, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1293, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1281, %r8033, -2004318072;
	// begin inline asm
	lop3.b32 %r1279, %r676, %r1281, %r1282, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1283, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1284, %r1282, %r1283;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1287, %r1279, %r1284;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1290, %r687, %r1281, %r1293, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1294, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1295, %r1293, %r1294;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1298, %r1290, %r1295;
	// end inline asm
	shr.u32 	%r1303, %r1281, 8;
	// begin inline asm
	lop3.b32 %r1301, %r676, %r1303, %r1282, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1305, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1306, %r1282, %r1305;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1309, %r1301, %r1306;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1312, %r687, %r1303, %r1293, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1316, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1317, %r1293, %r1316;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1320, %r1312, %r1317;
	// end inline asm
	// begin inline asm
	mov.b32 %r1328, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1339, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1327, %r8032, -2004318072;
	// begin inline asm
	lop3.b32 %r1325, %r676, %r1327, %r1328, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1329, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1330, %r1328, %r1329;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1333, %r1325, %r1330;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1336, %r687, %r1327, %r1339, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1340, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1341, %r1339, %r1340;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1344, %r1336, %r1341;
	// end inline asm
	shr.u32 	%r1349, %r1327, 8;
	// begin inline asm
	lop3.b32 %r1347, %r676, %r1349, %r1328, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1351, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1352, %r1328, %r1351;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1355, %r1347, %r1352;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1358, %r687, %r1349, %r1339, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1362, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1363, %r1339, %r1362;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1366, %r1358, %r1363;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1369, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1371, %r1369, %r1195, %r1121;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1375, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1377, %r1375, %r1206, %r1125;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1381, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1383, %r1381, %r1217, %r1129;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1387, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1389, %r1387, %r1228, %r1133;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1393, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1395, %r1393, %r1241, %r1137;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1399, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1401, %r1399, %r1252, %r1141;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1405, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1407, %r1405, %r1263, %r1145;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1411, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1413, %r1411, %r1274, %r1149;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1417, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1419, %r1417, %r1287, %r1153;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1423, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1425, %r1423, %r1298, %r1157;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1429, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1431, %r1429, %r1309, %r1161;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1435, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1437, %r1435, %r1320, %r1165;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1441, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1443, %r1441, %r1333, %r1169;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1447, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1449, %r1447, %r1344, %r1173;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1453, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1455, %r1453, %r1355, %r1177;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1459, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1461, %r1459, %r1366, %r1181;
	// end inline asm
	// begin inline asm
	mov.b32 %r1470, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1481, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1469, %r8031, -2004318072;
	// begin inline asm
	lop3.b32 %r1467, %r676, %r1469, %r1470, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1471, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1472, %r1470, %r1471;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1475, %r1467, %r1472;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1478, %r687, %r1469, %r1481, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1482, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1483, %r1481, %r1482;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1486, %r1478, %r1483;
	// end inline asm
	shr.u32 	%r1491, %r1469, 8;
	// begin inline asm
	lop3.b32 %r1489, %r676, %r1491, %r1470, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1493, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1494, %r1470, %r1493;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1497, %r1489, %r1494;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1500, %r687, %r1491, %r1481, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1504, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1505, %r1481, %r1504;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1508, %r1500, %r1505;
	// end inline asm
	// begin inline asm
	mov.b32 %r1516, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1527, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1515, %r8030, -2004318072;
	// begin inline asm
	lop3.b32 %r1513, %r676, %r1515, %r1516, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1517, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1518, %r1516, %r1517;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1521, %r1513, %r1518;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1524, %r687, %r1515, %r1527, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1528, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1529, %r1527, %r1528;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1532, %r1524, %r1529;
	// end inline asm
	shr.u32 	%r1537, %r1515, 8;
	// begin inline asm
	lop3.b32 %r1535, %r676, %r1537, %r1516, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1539, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1540, %r1516, %r1539;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1543, %r1535, %r1540;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1546, %r687, %r1537, %r1527, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1550, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1551, %r1527, %r1550;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1554, %r1546, %r1551;
	// end inline asm
	// begin inline asm
	mov.b32 %r1562, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1573, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1561, %r8029, -2004318072;
	// begin inline asm
	lop3.b32 %r1559, %r676, %r1561, %r1562, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1563, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1564, %r1562, %r1563;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1567, %r1559, %r1564;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1570, %r687, %r1561, %r1573, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1574, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1575, %r1573, %r1574;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1578, %r1570, %r1575;
	// end inline asm
	shr.u32 	%r1583, %r1561, 8;
	// begin inline asm
	lop3.b32 %r1581, %r676, %r1583, %r1562, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1585, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1586, %r1562, %r1585;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1589, %r1581, %r1586;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1592, %r687, %r1583, %r1573, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1596, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1597, %r1573, %r1596;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1600, %r1592, %r1597;
	// end inline asm
	// begin inline asm
	mov.b32 %r1608, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1619, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1607, %r8028, -2004318072;
	// begin inline asm
	lop3.b32 %r1605, %r676, %r1607, %r1608, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1609, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1610, %r1608, %r1609;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1613, %r1605, %r1610;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1616, %r687, %r1607, %r1619, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1620, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1621, %r1619, %r1620;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1624, %r1616, %r1621;
	// end inline asm
	shr.u32 	%r1629, %r1607, 8;
	// begin inline asm
	lop3.b32 %r1627, %r676, %r1629, %r1608, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1631, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1632, %r1608, %r1631;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1635, %r1627, %r1632;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1638, %r687, %r1629, %r1619, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1642, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1643, %r1619, %r1642;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1646, %r1638, %r1643;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1720, %r263, %r1475, %r1371;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1717, %r263, %r1486, %r1377;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1729, %r263, %r1497, %r1383;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1726, %r263, %r1508, %r1389;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1738, %r263, %r1521, %r1395;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1735, %r263, %r1532, %r1401;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1747, %r263, %r1543, %r1407;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1744, %r263, %r1554, %r1413;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1756, %r263, %r1567, %r1419;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1753, %r263, %r1578, %r1425;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1765, %r263, %r1589, %r1431;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1762, %r263, %r1600, %r1437;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1774, %r263, %r1613, %r1443;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1771, %r263, %r1624, %r1449;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1783, %r263, %r1635, %r1455;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1780, %r263, %r1646, %r1461;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1713, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1715, %r1713, %r1717;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1718, %r309, %r1720, %r1715;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1722, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1724, %r1722, %r1726;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1727, %r309, %r1729, %r1724;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1731, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1733, %r1731, %r1735;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1736, %r309, %r1738, %r1733;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1740, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1742, %r1740, %r1744;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1745, %r309, %r1747, %r1742;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1749, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1751, %r1749, %r1753;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1754, %r309, %r1756, %r1751;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1758, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1760, %r1758, %r1762;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1763, %r309, %r1765, %r1760;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1767, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1769, %r1767, %r1771;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1772, %r309, %r1774, %r1769;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1776, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1778, %r1776, %r1780;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1781, %r309, %r1783, %r1778;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1785, %r312, %r1720;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1788, %r309, %r1717, %r1785;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1792, %r312, %r1729;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1795, %r309, %r1726, %r1792;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1799, %r312, %r1738;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1802, %r309, %r1735, %r1799;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1806, %r312, %r1747;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1809, %r309, %r1744, %r1806;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1813, %r312, %r1756;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1816, %r309, %r1753, %r1813;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1820, %r312, %r1765;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1823, %r309, %r1762, %r1820;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1827, %r312, %r1774;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1830, %r309, %r1771, %r1827;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1834, %r312, %r1783;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1837, %r309, %r1780, %r1834;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1928, %r1925}, {%r356, %r362, %r359, %r365}, {%r1718, %r1788}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1937, %r1934}, {%r356, %r362, %r359, %r365}, {%r1727, %r1795}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1946, %r1943}, {%r356, %r362, %r359, %r365}, {%r1736, %r1802}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1955, %r1952}, {%r356, %r362, %r359, %r365}, {%r1745, %r1809}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1964, %r1961}, {%r356, %r362, %r359, %r365}, {%r1754, %r1816}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1973, %r1970}, {%r356, %r362, %r359, %r365}, {%r1763, %r1823}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1982, %r1979}, {%r356, %r362, %r359, %r365}, {%r1772, %r1830}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1991, %r1988}, {%r356, %r362, %r359, %r365}, {%r1781, %r1837}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1921, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1923, %r1921, %r1925;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1926, %r400, %r1928, %r1923;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1930, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1932, %r1930, %r1934;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1935, %r400, %r1937, %r1932;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1939, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1941, %r1939, %r1943;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1944, %r400, %r1946, %r1941;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1948, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1950, %r1948, %r1952;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1953, %r400, %r1955, %r1950;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1957, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1959, %r1957, %r1961;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1962, %r400, %r1964, %r1959;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1966, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1968, %r1966, %r1970;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1971, %r400, %r1973, %r1968;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1975, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1977, %r1975, %r1979;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1980, %r400, %r1982, %r1977;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1984, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1986, %r1984, %r1988;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1989, %r400, %r1991, %r1986;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1993, %r403, %r1928;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1996, %r400, %r1925, %r1993;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2000, %r403, %r1937;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2003, %r400, %r1934, %r2000;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2007, %r403, %r1946;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2010, %r400, %r1943, %r2007;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2014, %r403, %r1955;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2017, %r400, %r1952, %r2014;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2021, %r403, %r1964;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2024, %r400, %r1961, %r2021;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2028, %r403, %r1973;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2031, %r400, %r1970, %r2028;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2035, %r403, %r1982;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2038, %r400, %r1979, %r2035;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2042, %r403, %r1991;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2045, %r400, %r1988, %r2042;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2049, %r2050}, {%r434, %r440, %r437, %r443}, {%r1926, %r1996}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2059, %r2060}, {%r434, %r440, %r437, %r443}, {%r1935, %r2003}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2069, %r2070}, {%r434, %r440, %r437, %r443}, {%r1944, %r2010}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2079, %r2080}, {%r434, %r440, %r437, %r443}, {%r1953, %r2017}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2089, %r2090}, {%r434, %r440, %r437, %r443}, {%r1962, %r2024}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2099, %r2100}, {%r434, %r440, %r437, %r443}, {%r1971, %r2031}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2109, %r2110}, {%r434, %r440, %r437, %r443}, {%r1980, %r2038}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2119, %r2120}, {%r434, %r440, %r437, %r443}, {%r1989, %r2045}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2129, %r118, %r2049;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2132, %r118, %r2050;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2135, %r118, %r2059;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2138, %r118, %r2060;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2141, %r118, %r2069;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2144, %r118, %r2070;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2147, %r118, %r2079;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2150, %r118, %r2080;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2153, %r118, %r2089;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2156, %r118, %r2090;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2159, %r118, %r2099;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2162, %r118, %r2100;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2165, %r118, %r2109;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2168, %r118, %r2110;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2171, %r118, %r2119;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2174, %r118, %r2120;
	// end inline asm
	// begin inline asm
	mov.b32 %r2177, {%rs1142, %rs1142};
	// end inline asm
	mov.u16 	%rs195, 18176;
	// begin inline asm
	mov.b32 %r2178, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2179, %r2129, %r2177;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2182, %r2179, %r2178;
	// end inline asm
	// begin inline asm
	mov.b32 %r2185, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2186, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2187, %r2132, %r2185;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2190, %r2187, %r2186;
	// end inline asm
	// begin inline asm
	mov.b32 %r2193, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2194, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2195, %r2135, %r2193;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2198, %r2195, %r2194;
	// end inline asm
	// begin inline asm
	mov.b32 %r2201, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2202, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2203, %r2138, %r2201;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2206, %r2203, %r2202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2209, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2210, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2211, %r2141, %r2209;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2214, %r2211, %r2210;
	// end inline asm
	// begin inline asm
	mov.b32 %r2217, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2218, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2219, %r2144, %r2217;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2222, %r2219, %r2218;
	// end inline asm
	// begin inline asm
	mov.b32 %r2225, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2226, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2227, %r2147, %r2225;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2230, %r2227, %r2226;
	// end inline asm
	// begin inline asm
	mov.b32 %r2233, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2234, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2235, %r2150, %r2233;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2238, %r2235, %r2234;
	// end inline asm
	// begin inline asm
	mov.b32 %r2241, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2242, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2243, %r2153, %r2241;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2246, %r2243, %r2242;
	// end inline asm
	// begin inline asm
	mov.b32 %r2249, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2250, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2251, %r2156, %r2249;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2254, %r2251, %r2250;
	// end inline asm
	// begin inline asm
	mov.b32 %r2257, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2258, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2259, %r2159, %r2257;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2262, %r2259, %r2258;
	// end inline asm
	// begin inline asm
	mov.b32 %r2265, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2266, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2267, %r2162, %r2265;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2270, %r2267, %r2266;
	// end inline asm
	// begin inline asm
	mov.b32 %r2273, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2274, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2275, %r2165, %r2273;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2278, %r2275, %r2274;
	// end inline asm
	// begin inline asm
	mov.b32 %r2281, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2282, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2283, %r2168, %r2281;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2286, %r2283, %r2282;
	// end inline asm
	// begin inline asm
	mov.b32 %r2289, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2290, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2291, %r2171, %r2289;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2294, %r2291, %r2290;
	// end inline asm
	// begin inline asm
	mov.b32 %r2297, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2298, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2299, %r2174, %r2297;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2302, %r2299, %r2298;
	// end inline asm
	// begin inline asm
	mov.b32 %r2308, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2306, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2307, %r2308, %r2306;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2310, %r2182, %r2307;
	// end inline asm
	// begin inline asm
	mov.b32 %r2313, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2314, %r2308, %r2313;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2317, %r2190, %r2314;
	// end inline asm
	// begin inline asm
	mov.b32 %r2320, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2321, %r2308, %r2320;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2324, %r2198, %r2321;
	// end inline asm
	// begin inline asm
	mov.b32 %r2327, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2328, %r2308, %r2327;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2331, %r2206, %r2328;
	// end inline asm
	mov.u32 	%r2337, 25152;
	// begin inline asm
	prmt.b32 %r2334, %r2310, %r2324, %r2337;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2338, %r2317, %r2331, %r2337;
	// end inline asm
	shl.b32 	%r2345, %r2338, 4;
	mov.u32 	%r2343, 252645135;
	// begin inline asm
	lop3.b32 %r2342, %r2343, %r2334, %r2345, 202;
	// end inline asm
	xor.b32  	%r7882, %r2342, -2004318072;
	// begin inline asm
	mov.b32 %r2349, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2347, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2348, %r2349, %r2347;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2351, %r2214, %r2348;
	// end inline asm
	// begin inline asm
	mov.b32 %r2354, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2355, %r2349, %r2354;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2358, %r2222, %r2355;
	// end inline asm
	// begin inline asm
	mov.b32 %r2361, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2362, %r2349, %r2361;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2365, %r2230, %r2362;
	// end inline asm
	// begin inline asm
	mov.b32 %r2368, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2369, %r2349, %r2368;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2372, %r2238, %r2369;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2375, %r2351, %r2365, %r2337;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2379, %r2358, %r2372, %r2337;
	// end inline asm
	shl.b32 	%r2386, %r2379, 4;
	// begin inline asm
	lop3.b32 %r2383, %r2343, %r2375, %r2386, 202;
	// end inline asm
	xor.b32  	%r7883, %r2383, -2004318072;
	// begin inline asm
	mov.b32 %r2390, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2388, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2389, %r2390, %r2388;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2392, %r2246, %r2389;
	// end inline asm
	// begin inline asm
	mov.b32 %r2395, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2396, %r2390, %r2395;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2399, %r2254, %r2396;
	// end inline asm
	// begin inline asm
	mov.b32 %r2402, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2403, %r2390, %r2402;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2406, %r2262, %r2403;
	// end inline asm
	// begin inline asm
	mov.b32 %r2409, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2410, %r2390, %r2409;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2413, %r2270, %r2410;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2416, %r2392, %r2406, %r2337;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2420, %r2399, %r2413, %r2337;
	// end inline asm
	shl.b32 	%r2427, %r2420, 4;
	// begin inline asm
	lop3.b32 %r2424, %r2343, %r2416, %r2427, 202;
	// end inline asm
	xor.b32  	%r7884, %r2424, -2004318072;
	// begin inline asm
	mov.b32 %r2431, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2429, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2430, %r2431, %r2429;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2433, %r2278, %r2430;
	// end inline asm
	// begin inline asm
	mov.b32 %r2436, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2437, %r2431, %r2436;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2440, %r2286, %r2437;
	// end inline asm
	// begin inline asm
	mov.b32 %r2443, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2444, %r2431, %r2443;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2447, %r2294, %r2444;
	// end inline asm
	// begin inline asm
	mov.b32 %r2450, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2451, %r2431, %r2450;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2454, %r2302, %r2451;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2457, %r2433, %r2447, %r2337;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2461, %r2440, %r2454, %r2337;
	// end inline asm
	shl.b32 	%r2468, %r2461, 4;
	// begin inline asm
	lop3.b32 %r2465, %r2343, %r2457, %r2468, 202;
	// end inline asm
	xor.b32  	%r7885, %r2465, -2004318072;
	st.shared.u32 	[%rd174], %r7882;
	st.shared.u32 	[%rd175], %r7883;
	st.shared.u32 	[%rd176], %r7884;
	st.shared.u32 	[%rd177], %r7885;
	ld.shared.u32 	%r8039, [%rd117];
	ld.shared.u32 	%r8038, [%rd119];
	ld.shared.u32 	%r8037, [%rd121];
	ld.shared.u32 	%r8036, [%rd123];
	// begin inline asm
	mov.b32 %r2474, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2485, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2473, %r8039, -2004318072;
	// begin inline asm
	lop3.b32 %r2471, %r676, %r2473, %r2474, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2475, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2476, %r2474, %r2475;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2479, %r2471, %r2476;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2482, %r687, %r2473, %r2485, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2486, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2487, %r2485, %r2486;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2490, %r2482, %r2487;
	// end inline asm
	shr.u32 	%r2495, %r2473, 8;
	// begin inline asm
	lop3.b32 %r2493, %r676, %r2495, %r2474, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2497, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2498, %r2474, %r2497;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2501, %r2493, %r2498;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2504, %r687, %r2495, %r2485, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2508, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2509, %r2485, %r2508;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2512, %r2504, %r2509;
	// end inline asm
	// begin inline asm
	mov.b32 %r2520, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2531, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2519, %r8038, -2004318072;
	// begin inline asm
	lop3.b32 %r2517, %r676, %r2519, %r2520, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2521, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2522, %r2520, %r2521;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2525, %r2517, %r2522;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2528, %r687, %r2519, %r2531, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2532, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2533, %r2531, %r2532;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2536, %r2528, %r2533;
	// end inline asm
	shr.u32 	%r2541, %r2519, 8;
	// begin inline asm
	lop3.b32 %r2539, %r676, %r2541, %r2520, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2543, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2544, %r2520, %r2543;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2547, %r2539, %r2544;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2550, %r687, %r2541, %r2531, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2554, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2555, %r2531, %r2554;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2558, %r2550, %r2555;
	// end inline asm
	// begin inline asm
	mov.b32 %r2566, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2577, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2565, %r8037, -2004318072;
	// begin inline asm
	lop3.b32 %r2563, %r676, %r2565, %r2566, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2567, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2568, %r2566, %r2567;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2571, %r2563, %r2568;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2574, %r687, %r2565, %r2577, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2578, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2579, %r2577, %r2578;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2582, %r2574, %r2579;
	// end inline asm
	shr.u32 	%r2587, %r2565, 8;
	// begin inline asm
	lop3.b32 %r2585, %r676, %r2587, %r2566, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2589, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2590, %r2566, %r2589;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2593, %r2585, %r2590;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2596, %r687, %r2587, %r2577, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2600, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2601, %r2577, %r2600;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2604, %r2596, %r2601;
	// end inline asm
	// begin inline asm
	mov.b32 %r2612, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2623, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2611, %r8036, -2004318072;
	// begin inline asm
	lop3.b32 %r2609, %r676, %r2611, %r2612, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2613, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2614, %r2612, %r2613;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2617, %r2609, %r2614;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2620, %r687, %r2611, %r2623, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2624, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2625, %r2623, %r2624;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2628, %r2620, %r2625;
	// end inline asm
	shr.u32 	%r2633, %r2611, 8;
	// begin inline asm
	lop3.b32 %r2631, %r676, %r2633, %r2612, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2635, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2636, %r2612, %r2635;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2639, %r2631, %r2636;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2642, %r687, %r2633, %r2623, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2646, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2647, %r2623, %r2646;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2650, %r2642, %r2647;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2653, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2655, %r2653, %r2479;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2658, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2660, %r2658, %r2490;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2663, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2665, %r2663, %r2501;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2668, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2670, %r2668, %r2512;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2673, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2675, %r2673, %r2525;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2678, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2680, %r2678, %r2536;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2683, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2685, %r2683, %r2547;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2688, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2690, %r2688, %r2558;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2693, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2695, %r2693, %r2571;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2698, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2700, %r2698, %r2582;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2703, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2705, %r2703, %r2593;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2708, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2710, %r2708, %r2604;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2713, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2715, %r2713, %r2617;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2718, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2720, %r2718, %r2628;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2723, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2725, %r2723, %r2639;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2728, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2730, %r2728, %r2650;
	// end inline asm
	// begin inline asm
	mov.b32 %r2738, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2749, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2735, %r676, %r1189, %r2738, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2739, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2740, %r2738, %r2739;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2743, %r2735, %r2740;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2746, %r687, %r1189, %r2749, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2750, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2751, %r2749, %r2750;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2754, %r2746, %r2751;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2757, %r676, %r1211, %r2738, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2761, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2762, %r2738, %r2761;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2765, %r2757, %r2762;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2768, %r687, %r1211, %r2749, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2772, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2773, %r2749, %r2772;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2776, %r2768, %r2773;
	// end inline asm
	// begin inline asm
	mov.b32 %r2784, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2795, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2781, %r676, %r1235, %r2784, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2785, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2786, %r2784, %r2785;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2789, %r2781, %r2786;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2792, %r687, %r1235, %r2795, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2796, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2797, %r2795, %r2796;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2800, %r2792, %r2797;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2803, %r676, %r1257, %r2784, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2807, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2808, %r2784, %r2807;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2811, %r2803, %r2808;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2814, %r687, %r1257, %r2795, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2818, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2819, %r2795, %r2818;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2822, %r2814, %r2819;
	// end inline asm
	// begin inline asm
	mov.b32 %r2830, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2841, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2827, %r676, %r1281, %r2830, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2831, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2832, %r2830, %r2831;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2835, %r2827, %r2832;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2838, %r687, %r1281, %r2841, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2842, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2843, %r2841, %r2842;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2846, %r2838, %r2843;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2849, %r676, %r1303, %r2830, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2853, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2854, %r2830, %r2853;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2857, %r2849, %r2854;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2860, %r687, %r1303, %r2841, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2864, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2865, %r2841, %r2864;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2868, %r2860, %r2865;
	// end inline asm
	// begin inline asm
	mov.b32 %r2876, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2887, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2873, %r676, %r1327, %r2876, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2877, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2878, %r2876, %r2877;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2881, %r2873, %r2878;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2884, %r687, %r1327, %r2887, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2888, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2889, %r2887, %r2888;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2892, %r2884, %r2889;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2895, %r676, %r1349, %r2876, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2899, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2900, %r2876, %r2899;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2903, %r2895, %r2900;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2906, %r687, %r1349, %r2887, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2910, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2911, %r2887, %r2910;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2914, %r2906, %r2911;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2917, %r227, %r2743, %r2655;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2921, %r227, %r2754, %r2660;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2925, %r227, %r2765, %r2665;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2929, %r227, %r2776, %r2670;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2933, %r227, %r2789, %r2675;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2937, %r227, %r2800, %r2680;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2941, %r227, %r2811, %r2685;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2945, %r227, %r2822, %r2690;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2949, %r227, %r2835, %r2695;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2953, %r227, %r2846, %r2700;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2957, %r227, %r2857, %r2705;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2961, %r227, %r2868, %r2710;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2965, %r227, %r2881, %r2715;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2969, %r227, %r2892, %r2720;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2973, %r227, %r2903, %r2725;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2977, %r227, %r2914, %r2730;
	// end inline asm
	// begin inline asm
	mov.b32 %r2986, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2997, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2983, %r676, %r1469, %r2986, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2987, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2988, %r2986, %r2987;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2991, %r2983, %r2988;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2994, %r687, %r1469, %r2997, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2998, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2999, %r2997, %r2998;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3002, %r2994, %r2999;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3005, %r676, %r1491, %r2986, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3009, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3010, %r2986, %r3009;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3013, %r3005, %r3010;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3016, %r687, %r1491, %r2997, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3020, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3021, %r2997, %r3020;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3024, %r3016, %r3021;
	// end inline asm
	// begin inline asm
	mov.b32 %r3032, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3043, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3029, %r676, %r1515, %r3032, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3033, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3034, %r3032, %r3033;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3037, %r3029, %r3034;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3040, %r687, %r1515, %r3043, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3044, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3045, %r3043, %r3044;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3048, %r3040, %r3045;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3051, %r676, %r1537, %r3032, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3055, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3056, %r3032, %r3055;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3059, %r3051, %r3056;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3062, %r687, %r1537, %r3043, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3066, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3067, %r3043, %r3066;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3070, %r3062, %r3067;
	// end inline asm
	// begin inline asm
	mov.b32 %r3078, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3089, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3075, %r676, %r1561, %r3078, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3079, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3080, %r3078, %r3079;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3083, %r3075, %r3080;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3086, %r687, %r1561, %r3089, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3090, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3091, %r3089, %r3090;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3094, %r3086, %r3091;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3097, %r676, %r1583, %r3078, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3101, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3102, %r3078, %r3101;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3105, %r3097, %r3102;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3108, %r687, %r1583, %r3089, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3112, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3113, %r3089, %r3112;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3116, %r3108, %r3113;
	// end inline asm
	// begin inline asm
	mov.b32 %r3124, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3135, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3121, %r676, %r1607, %r3124, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3125, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3126, %r3124, %r3125;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3129, %r3121, %r3126;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3132, %r687, %r1607, %r3135, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3136, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3137, %r3135, %r3136;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3140, %r3132, %r3137;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3143, %r676, %r1629, %r3124, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3147, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3148, %r3124, %r3147;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3151, %r3143, %r3148;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3154, %r687, %r1629, %r3135, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3158, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3159, %r3135, %r3158;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3162, %r3154, %r3159;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3165, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3167, %r3165, %r2991, %r2917;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3171, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3173, %r3171, %r3002, %r2921;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3177, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3179, %r3177, %r3013, %r2925;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3183, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3185, %r3183, %r3024, %r2929;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3189, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3191, %r3189, %r3037, %r2933;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3195, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3197, %r3195, %r3048, %r2937;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3201, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3203, %r3201, %r3059, %r2941;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3207, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3209, %r3207, %r3070, %r2945;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3213, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3215, %r3213, %r3083, %r2949;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3219, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3221, %r3219, %r3094, %r2953;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3225, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3227, %r3225, %r3105, %r2957;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3231, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3233, %r3231, %r3116, %r2961;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3237, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3239, %r3237, %r3129, %r2965;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3243, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3245, %r3243, %r3140, %r2969;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3249, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3251, %r3249, %r3151, %r2973;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3255, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3257, %r3255, %r3162, %r2977;
	// end inline asm
	// begin inline asm
	mov.b32 %r3266, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3277, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3263, %r676, %r677, %r3266, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3267, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3268, %r3266, %r3267;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3271, %r3263, %r3268;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3274, %r687, %r677, %r3277, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3278, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3279, %r3277, %r3278;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3282, %r3274, %r3279;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3285, %r676, %r699, %r3266, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3289, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3290, %r3266, %r3289;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3293, %r3285, %r3290;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3296, %r687, %r699, %r3277, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3300, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3301, %r3277, %r3300;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3304, %r3296, %r3301;
	// end inline asm
	// begin inline asm
	mov.b32 %r3312, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3323, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3309, %r676, %r723, %r3312, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3313, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3314, %r3312, %r3313;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3317, %r3309, %r3314;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3320, %r687, %r723, %r3323, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3324, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3325, %r3323, %r3324;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3328, %r3320, %r3325;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3331, %r676, %r745, %r3312, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3335, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3336, %r3312, %r3335;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3339, %r3331, %r3336;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3342, %r687, %r745, %r3323, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3346, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3347, %r3323, %r3346;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3350, %r3342, %r3347;
	// end inline asm
	// begin inline asm
	mov.b32 %r3358, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3369, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3355, %r676, %r769, %r3358, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3359, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3360, %r3358, %r3359;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3363, %r3355, %r3360;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3366, %r687, %r769, %r3369, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3370, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3371, %r3369, %r3370;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3374, %r3366, %r3371;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3377, %r676, %r791, %r3358, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3381, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3382, %r3358, %r3381;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3385, %r3377, %r3382;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3388, %r687, %r791, %r3369, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3392, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3393, %r3369, %r3392;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3396, %r3388, %r3393;
	// end inline asm
	// begin inline asm
	mov.b32 %r3404, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3415, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3401, %r676, %r815, %r3404, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3405, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3406, %r3404, %r3405;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3409, %r3401, %r3406;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3412, %r687, %r815, %r3415, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3416, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3417, %r3415, %r3416;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3420, %r3412, %r3417;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3423, %r676, %r837, %r3404, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3427, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3428, %r3404, %r3427;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3431, %r3423, %r3428;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3434, %r687, %r837, %r3415, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3438, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3439, %r3415, %r3438;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3442, %r3434, %r3439;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3516, %r263, %r3271, %r3167;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3513, %r263, %r3282, %r3173;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3525, %r263, %r3293, %r3179;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3522, %r263, %r3304, %r3185;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3534, %r263, %r3317, %r3191;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3531, %r263, %r3328, %r3197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3543, %r263, %r3339, %r3203;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3540, %r263, %r3350, %r3209;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3552, %r263, %r3363, %r3215;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3549, %r263, %r3374, %r3221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3561, %r263, %r3385, %r3227;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3558, %r263, %r3396, %r3233;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3570, %r263, %r3409, %r3239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3567, %r263, %r3420, %r3245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3579, %r263, %r3431, %r3251;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3576, %r263, %r3442, %r3257;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3509, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3511, %r3509, %r3513;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3514, %r309, %r3516, %r3511;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3518, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3520, %r3518, %r3522;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3523, %r309, %r3525, %r3520;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3527, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3529, %r3527, %r3531;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3532, %r309, %r3534, %r3529;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3536, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3538, %r3536, %r3540;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3541, %r309, %r3543, %r3538;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3545, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3547, %r3545, %r3549;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3550, %r309, %r3552, %r3547;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3554, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3556, %r3554, %r3558;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3559, %r309, %r3561, %r3556;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3563, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3565, %r3563, %r3567;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3568, %r309, %r3570, %r3565;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3572, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3574, %r3572, %r3576;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3577, %r309, %r3579, %r3574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3581, %r312, %r3516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3584, %r309, %r3513, %r3581;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3588, %r312, %r3525;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3591, %r309, %r3522, %r3588;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3595, %r312, %r3534;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3598, %r309, %r3531, %r3595;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3602, %r312, %r3543;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3605, %r309, %r3540, %r3602;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3609, %r312, %r3552;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3612, %r309, %r3549, %r3609;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3616, %r312, %r3561;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3619, %r309, %r3558, %r3616;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3623, %r312, %r3570;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3626, %r309, %r3567, %r3623;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3630, %r312, %r3579;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3633, %r309, %r3576, %r3630;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3724, %r3721}, {%r356, %r362, %r359, %r365}, {%r3514, %r3584}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3733, %r3730}, {%r356, %r362, %r359, %r365}, {%r3523, %r3591}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3742, %r3739}, {%r356, %r362, %r359, %r365}, {%r3532, %r3598}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3751, %r3748}, {%r356, %r362, %r359, %r365}, {%r3541, %r3605}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3760, %r3757}, {%r356, %r362, %r359, %r365}, {%r3550, %r3612}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3769, %r3766}, {%r356, %r362, %r359, %r365}, {%r3559, %r3619}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3778, %r3775}, {%r356, %r362, %r359, %r365}, {%r3568, %r3626}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3787, %r3784}, {%r356, %r362, %r359, %r365}, {%r3577, %r3633}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3717, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3719, %r3717, %r3721;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3722, %r400, %r3724, %r3719;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3726, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3728, %r3726, %r3730;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3731, %r400, %r3733, %r3728;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3735, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3737, %r3735, %r3739;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3740, %r400, %r3742, %r3737;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3744, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3746, %r3744, %r3748;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3749, %r400, %r3751, %r3746;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3753, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3755, %r3753, %r3757;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3758, %r400, %r3760, %r3755;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3762, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3764, %r3762, %r3766;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3767, %r400, %r3769, %r3764;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3771, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3773, %r3771, %r3775;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3776, %r400, %r3778, %r3773;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3780, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3782, %r3780, %r3784;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3785, %r400, %r3787, %r3782;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3789, %r403, %r3724;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3792, %r400, %r3721, %r3789;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3796, %r403, %r3733;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3799, %r400, %r3730, %r3796;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3803, %r403, %r3742;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3806, %r400, %r3739, %r3803;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3810, %r403, %r3751;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3813, %r400, %r3748, %r3810;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3817, %r403, %r3760;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3820, %r400, %r3757, %r3817;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3824, %r403, %r3769;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3827, %r400, %r3766, %r3824;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3831, %r403, %r3778;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3834, %r400, %r3775, %r3831;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3838, %r403, %r3787;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3841, %r400, %r3784, %r3838;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3845, %r3846}, {%r434, %r440, %r437, %r443}, {%r3722, %r3792}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3855, %r3856}, {%r434, %r440, %r437, %r443}, {%r3731, %r3799}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3865, %r3866}, {%r434, %r440, %r437, %r443}, {%r3740, %r3806}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3875, %r3876}, {%r434, %r440, %r437, %r443}, {%r3749, %r3813}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3885, %r3886}, {%r434, %r440, %r437, %r443}, {%r3758, %r3820}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3895, %r3896}, {%r434, %r440, %r437, %r443}, {%r3767, %r3827}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3905, %r3906}, {%r434, %r440, %r437, %r443}, {%r3776, %r3834}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3915, %r3916}, {%r434, %r440, %r437, %r443}, {%r3785, %r3841}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3925, %r118, %r3845;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3928, %r118, %r3846;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3931, %r118, %r3855;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3934, %r118, %r3856;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3937, %r118, %r3865;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3940, %r118, %r3866;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3943, %r118, %r3875;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3946, %r118, %r3876;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3949, %r118, %r3885;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3952, %r118, %r3886;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3955, %r118, %r3895;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3958, %r118, %r3896;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3961, %r118, %r3905;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3964, %r118, %r3906;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3967, %r118, %r3915;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3970, %r118, %r3916;
	// end inline asm
	// begin inline asm
	mov.b32 %r3973, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3974, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3975, %r3925, %r3973;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3978, %r3975, %r3974;
	// end inline asm
	// begin inline asm
	mov.b32 %r3981, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3982, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3983, %r3928, %r3981;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3986, %r3983, %r3982;
	// end inline asm
	// begin inline asm
	mov.b32 %r3989, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3990, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3991, %r3931, %r3989;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3994, %r3991, %r3990;
	// end inline asm
	// begin inline asm
	mov.b32 %r3997, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3998, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3999, %r3934, %r3997;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4002, %r3999, %r3998;
	// end inline asm
	// begin inline asm
	mov.b32 %r4005, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4006, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4007, %r3937, %r4005;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4010, %r4007, %r4006;
	// end inline asm
	// begin inline asm
	mov.b32 %r4013, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4014, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4015, %r3940, %r4013;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4018, %r4015, %r4014;
	// end inline asm
	// begin inline asm
	mov.b32 %r4021, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4022, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4023, %r3943, %r4021;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4026, %r4023, %r4022;
	// end inline asm
	// begin inline asm
	mov.b32 %r4029, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4030, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4031, %r3946, %r4029;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4034, %r4031, %r4030;
	// end inline asm
	// begin inline asm
	mov.b32 %r4037, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4038, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4039, %r3949, %r4037;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4042, %r4039, %r4038;
	// end inline asm
	// begin inline asm
	mov.b32 %r4045, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4046, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4047, %r3952, %r4045;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4050, %r4047, %r4046;
	// end inline asm
	// begin inline asm
	mov.b32 %r4053, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4054, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4055, %r3955, %r4053;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4058, %r4055, %r4054;
	// end inline asm
	// begin inline asm
	mov.b32 %r4061, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4062, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4063, %r3958, %r4061;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4066, %r4063, %r4062;
	// end inline asm
	// begin inline asm
	mov.b32 %r4069, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4070, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4071, %r3961, %r4069;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4074, %r4071, %r4070;
	// end inline asm
	// begin inline asm
	mov.b32 %r4077, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4078, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4079, %r3964, %r4077;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4082, %r4079, %r4078;
	// end inline asm
	// begin inline asm
	mov.b32 %r4085, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4086, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4087, %r3967, %r4085;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4090, %r4087, %r4086;
	// end inline asm
	// begin inline asm
	mov.b32 %r4093, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4094, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4095, %r3970, %r4093;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4098, %r4095, %r4094;
	// end inline asm
	// begin inline asm
	mov.b32 %r4104, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4102, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4103, %r4104, %r4102;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4106, %r3978, %r4103;
	// end inline asm
	// begin inline asm
	mov.b32 %r4109, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4110, %r4104, %r4109;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4113, %r3986, %r4110;
	// end inline asm
	// begin inline asm
	mov.b32 %r4116, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4117, %r4104, %r4116;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4120, %r3994, %r4117;
	// end inline asm
	// begin inline asm
	mov.b32 %r4123, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4124, %r4104, %r4123;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4127, %r4002, %r4124;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4130, %r4106, %r4120, %r2337;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4134, %r4113, %r4127, %r2337;
	// end inline asm
	shl.b32 	%r4141, %r4134, 4;
	// begin inline asm
	lop3.b32 %r4138, %r2343, %r4130, %r4141, 202;
	// end inline asm
	xor.b32  	%r7886, %r4138, -2004318072;
	// begin inline asm
	mov.b32 %r4145, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4143, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4144, %r4145, %r4143;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4147, %r4010, %r4144;
	// end inline asm
	// begin inline asm
	mov.b32 %r4150, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4151, %r4145, %r4150;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4154, %r4018, %r4151;
	// end inline asm
	// begin inline asm
	mov.b32 %r4157, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4158, %r4145, %r4157;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4161, %r4026, %r4158;
	// end inline asm
	// begin inline asm
	mov.b32 %r4164, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4165, %r4145, %r4164;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4168, %r4034, %r4165;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4171, %r4147, %r4161, %r2337;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4175, %r4154, %r4168, %r2337;
	// end inline asm
	shl.b32 	%r4182, %r4175, 4;
	// begin inline asm
	lop3.b32 %r4179, %r2343, %r4171, %r4182, 202;
	// end inline asm
	xor.b32  	%r7887, %r4179, -2004318072;
	// begin inline asm
	mov.b32 %r4186, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4184, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4185, %r4186, %r4184;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4188, %r4042, %r4185;
	// end inline asm
	// begin inline asm
	mov.b32 %r4191, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4192, %r4186, %r4191;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4195, %r4050, %r4192;
	// end inline asm
	// begin inline asm
	mov.b32 %r4198, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4199, %r4186, %r4198;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4202, %r4058, %r4199;
	// end inline asm
	// begin inline asm
	mov.b32 %r4205, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4206, %r4186, %r4205;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4209, %r4066, %r4206;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4212, %r4188, %r4202, %r2337;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4216, %r4195, %r4209, %r2337;
	// end inline asm
	shl.b32 	%r4223, %r4216, 4;
	// begin inline asm
	lop3.b32 %r4220, %r2343, %r4212, %r4223, 202;
	// end inline asm
	xor.b32  	%r7888, %r4220, -2004318072;
	// begin inline asm
	mov.b32 %r4227, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4225, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4226, %r4227, %r4225;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4229, %r4074, %r4226;
	// end inline asm
	// begin inline asm
	mov.b32 %r4232, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4233, %r4227, %r4232;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4236, %r4082, %r4233;
	// end inline asm
	// begin inline asm
	mov.b32 %r4239, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4240, %r4227, %r4239;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4243, %r4090, %r4240;
	// end inline asm
	// begin inline asm
	mov.b32 %r4246, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4247, %r4227, %r4246;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4250, %r4098, %r4247;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4253, %r4229, %r4243, %r2337;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4257, %r4236, %r4250, %r2337;
	// end inline asm
	shl.b32 	%r4264, %r4257, 4;
	// begin inline asm
	lop3.b32 %r4261, %r2343, %r4253, %r4264, 202;
	// end inline asm
	xor.b32  	%r7889, %r4261, -2004318072;
	st.shared.u32 	[%rd174], %r7886;
	st.shared.u32 	[%rd175], %r7887;
	st.shared.u32 	[%rd176], %r7888;
	st.shared.u32 	[%rd177], %r7889;
	ld.shared.u32 	%r8035, [%rd117];
	ld.shared.u32 	%r8034, [%rd119];
	ld.shared.u32 	%r8033, [%rd121];
	ld.shared.u32 	%r8032, [%rd123];
	// begin inline asm
	mov.b32 %r4270, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4281, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4269, %r8035, -2004318072;
	// begin inline asm
	lop3.b32 %r4267, %r676, %r4269, %r4270, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4271, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4272, %r4270, %r4271;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4275, %r4267, %r4272;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4278, %r687, %r4269, %r4281, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4282, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4283, %r4281, %r4282;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4286, %r4278, %r4283;
	// end inline asm
	shr.u32 	%r4291, %r4269, 8;
	// begin inline asm
	lop3.b32 %r4289, %r676, %r4291, %r4270, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4293, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4294, %r4270, %r4293;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4297, %r4289, %r4294;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4300, %r687, %r4291, %r4281, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4304, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4305, %r4281, %r4304;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4308, %r4300, %r4305;
	// end inline asm
	// begin inline asm
	mov.b32 %r4316, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4327, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4315, %r8034, -2004318072;
	// begin inline asm
	lop3.b32 %r4313, %r676, %r4315, %r4316, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4317, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4318, %r4316, %r4317;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4321, %r4313, %r4318;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4324, %r687, %r4315, %r4327, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4328, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4329, %r4327, %r4328;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4332, %r4324, %r4329;
	// end inline asm
	shr.u32 	%r4337, %r4315, 8;
	// begin inline asm
	lop3.b32 %r4335, %r676, %r4337, %r4316, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4339, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4340, %r4316, %r4339;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4343, %r4335, %r4340;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4346, %r687, %r4337, %r4327, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4350, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4351, %r4327, %r4350;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4354, %r4346, %r4351;
	// end inline asm
	// begin inline asm
	mov.b32 %r4362, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4373, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4361, %r8033, -2004318072;
	// begin inline asm
	lop3.b32 %r4359, %r676, %r4361, %r4362, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4363, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4364, %r4362, %r4363;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4367, %r4359, %r4364;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4370, %r687, %r4361, %r4373, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4374, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4375, %r4373, %r4374;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4378, %r4370, %r4375;
	// end inline asm
	shr.u32 	%r4383, %r4361, 8;
	// begin inline asm
	lop3.b32 %r4381, %r676, %r4383, %r4362, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4385, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4386, %r4362, %r4385;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4389, %r4381, %r4386;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4392, %r687, %r4383, %r4373, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4396, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4397, %r4373, %r4396;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4400, %r4392, %r4397;
	// end inline asm
	// begin inline asm
	mov.b32 %r4408, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4419, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4407, %r8032, -2004318072;
	// begin inline asm
	lop3.b32 %r4405, %r676, %r4407, %r4408, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4409, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4410, %r4408, %r4409;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4413, %r4405, %r4410;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4416, %r687, %r4407, %r4419, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4420, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4421, %r4419, %r4420;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4424, %r4416, %r4421;
	// end inline asm
	shr.u32 	%r4429, %r4407, 8;
	// begin inline asm
	lop3.b32 %r4427, %r676, %r4429, %r4408, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4431, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4432, %r4408, %r4431;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4435, %r4427, %r4432;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4438, %r687, %r4429, %r4419, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4442, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4443, %r4419, %r4442;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4446, %r4438, %r4443;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4449, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4451, %r4449, %r4275;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4454, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4456, %r4454, %r4286;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4459, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4461, %r4459, %r4297;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4464, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4466, %r4464, %r4308;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4469, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4471, %r4469, %r4321;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4474, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4476, %r4474, %r4332;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4479, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4481, %r4479, %r4343;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4484, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4486, %r4484, %r4354;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4489, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4491, %r4489, %r4367;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4494, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4496, %r4494, %r4378;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4499, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4501, %r4499, %r4389;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4504, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4506, %r4504, %r4400;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4509, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4511, %r4509, %r4413;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4514, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4516, %r4514, %r4424;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4519, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4521, %r4519, %r4435;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4524, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4526, %r4524, %r4446;
	// end inline asm
	// begin inline asm
	mov.b32 %r4534, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4545, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4531, %r676, %r1469, %r4534, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4535, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4536, %r4534, %r4535;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4539, %r4531, %r4536;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4542, %r687, %r1469, %r4545, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4546, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4547, %r4545, %r4546;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4550, %r4542, %r4547;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4553, %r676, %r1491, %r4534, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4557, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4558, %r4534, %r4557;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4561, %r4553, %r4558;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4564, %r687, %r1491, %r4545, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4568, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4569, %r4545, %r4568;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4572, %r4564, %r4569;
	// end inline asm
	// begin inline asm
	mov.b32 %r4580, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4591, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4577, %r676, %r1515, %r4580, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4581, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4582, %r4580, %r4581;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4585, %r4577, %r4582;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4588, %r687, %r1515, %r4591, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4592, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4593, %r4591, %r4592;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4596, %r4588, %r4593;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4599, %r676, %r1537, %r4580, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4603, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4604, %r4580, %r4603;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4607, %r4599, %r4604;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4610, %r687, %r1537, %r4591, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4614, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4615, %r4591, %r4614;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4618, %r4610, %r4615;
	// end inline asm
	// begin inline asm
	mov.b32 %r4626, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4637, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4623, %r676, %r1561, %r4626, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4627, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4628, %r4626, %r4627;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4631, %r4623, %r4628;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4634, %r687, %r1561, %r4637, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4638, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4639, %r4637, %r4638;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4642, %r4634, %r4639;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4645, %r676, %r1583, %r4626, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4649, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4650, %r4626, %r4649;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4653, %r4645, %r4650;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4656, %r687, %r1583, %r4637, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4660, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4661, %r4637, %r4660;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4664, %r4656, %r4661;
	// end inline asm
	// begin inline asm
	mov.b32 %r4672, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4683, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4669, %r676, %r1607, %r4672, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4673, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4674, %r4672, %r4673;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4677, %r4669, %r4674;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4680, %r687, %r1607, %r4683, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4684, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4685, %r4683, %r4684;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4688, %r4680, %r4685;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4691, %r676, %r1629, %r4672, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4695, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4696, %r4672, %r4695;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4699, %r4691, %r4696;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4702, %r687, %r1629, %r4683, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4706, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4707, %r4683, %r4706;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4710, %r4702, %r4707;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4713, %r227, %r4539, %r4451;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4717, %r227, %r4550, %r4456;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4721, %r227, %r4561, %r4461;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4725, %r227, %r4572, %r4466;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4729, %r227, %r4585, %r4471;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4733, %r227, %r4596, %r4476;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4737, %r227, %r4607, %r4481;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4741, %r227, %r4618, %r4486;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4745, %r227, %r4631, %r4491;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4749, %r227, %r4642, %r4496;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4753, %r227, %r4653, %r4501;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4757, %r227, %r4664, %r4506;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4761, %r227, %r4677, %r4511;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4765, %r227, %r4688, %r4516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4769, %r227, %r4699, %r4521;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4773, %r227, %r4710, %r4526;
	// end inline asm
	// begin inline asm
	mov.b32 %r4782, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4793, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4779, %r676, %r677, %r4782, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4783, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4784, %r4782, %r4783;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4787, %r4779, %r4784;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4790, %r687, %r677, %r4793, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4794, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4795, %r4793, %r4794;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4798, %r4790, %r4795;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4801, %r676, %r699, %r4782, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4805, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4806, %r4782, %r4805;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4809, %r4801, %r4806;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4812, %r687, %r699, %r4793, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4816, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4817, %r4793, %r4816;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4820, %r4812, %r4817;
	// end inline asm
	// begin inline asm
	mov.b32 %r4828, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4839, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4825, %r676, %r723, %r4828, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4829, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4830, %r4828, %r4829;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4833, %r4825, %r4830;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4836, %r687, %r723, %r4839, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4840, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4841, %r4839, %r4840;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4844, %r4836, %r4841;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4847, %r676, %r745, %r4828, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4851, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4852, %r4828, %r4851;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4855, %r4847, %r4852;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4858, %r687, %r745, %r4839, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4862, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4863, %r4839, %r4862;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4866, %r4858, %r4863;
	// end inline asm
	// begin inline asm
	mov.b32 %r4874, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4885, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4871, %r676, %r769, %r4874, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4875, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4876, %r4874, %r4875;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4879, %r4871, %r4876;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4882, %r687, %r769, %r4885, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4886, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4887, %r4885, %r4886;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4890, %r4882, %r4887;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4893, %r676, %r791, %r4874, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4897, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4898, %r4874, %r4897;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4901, %r4893, %r4898;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4904, %r687, %r791, %r4885, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4908, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4909, %r4885, %r4908;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4912, %r4904, %r4909;
	// end inline asm
	// begin inline asm
	mov.b32 %r4920, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4931, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4917, %r676, %r815, %r4920, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4921, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4922, %r4920, %r4921;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4925, %r4917, %r4922;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4928, %r687, %r815, %r4931, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4932, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4933, %r4931, %r4932;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4936, %r4928, %r4933;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4939, %r676, %r837, %r4920, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4943, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4944, %r4920, %r4943;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4947, %r4939, %r4944;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4950, %r687, %r837, %r4931, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4954, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4955, %r4931, %r4954;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4958, %r4950, %r4955;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4961, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4963, %r4961, %r4787, %r4713;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4967, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4969, %r4967, %r4798, %r4717;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4973, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4975, %r4973, %r4809, %r4721;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4979, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4981, %r4979, %r4820, %r4725;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4985, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4987, %r4985, %r4833, %r4729;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4991, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4993, %r4991, %r4844, %r4733;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4997, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4999, %r4997, %r4855, %r4737;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5003, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5005, %r5003, %r4866, %r4741;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5009, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5011, %r5009, %r4879, %r4745;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5015, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5017, %r5015, %r4890, %r4749;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5021, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5023, %r5021, %r4901, %r4753;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5027, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5029, %r5027, %r4912, %r4757;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5033, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5035, %r5033, %r4925, %r4761;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5039, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5041, %r5039, %r4936, %r4765;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5045, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5047, %r5045, %r4947, %r4769;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5051, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5053, %r5051, %r4958, %r4773;
	// end inline asm
	// begin inline asm
	mov.b32 %r5062, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5073, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5059, %r676, %r2473, %r5062, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5063, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5064, %r5062, %r5063;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5067, %r5059, %r5064;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5070, %r687, %r2473, %r5073, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5074, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5075, %r5073, %r5074;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5078, %r5070, %r5075;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5081, %r676, %r2495, %r5062, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5085, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5086, %r5062, %r5085;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5089, %r5081, %r5086;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5092, %r687, %r2495, %r5073, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5096, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5097, %r5073, %r5096;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5100, %r5092, %r5097;
	// end inline asm
	// begin inline asm
	mov.b32 %r5108, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5119, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5105, %r676, %r2519, %r5108, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5109, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5110, %r5108, %r5109;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5113, %r5105, %r5110;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5116, %r687, %r2519, %r5119, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5120, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5121, %r5119, %r5120;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5124, %r5116, %r5121;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5127, %r676, %r2541, %r5108, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5131, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5132, %r5108, %r5131;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5135, %r5127, %r5132;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5138, %r687, %r2541, %r5119, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5142, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5143, %r5119, %r5142;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5146, %r5138, %r5143;
	// end inline asm
	// begin inline asm
	mov.b32 %r5154, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5165, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5151, %r676, %r2565, %r5154, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5155, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5156, %r5154, %r5155;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5159, %r5151, %r5156;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5162, %r687, %r2565, %r5165, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5166, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5167, %r5165, %r5166;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5170, %r5162, %r5167;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5173, %r676, %r2587, %r5154, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5177, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5178, %r5154, %r5177;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5181, %r5173, %r5178;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5184, %r687, %r2587, %r5165, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5188, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5189, %r5165, %r5188;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5192, %r5184, %r5189;
	// end inline asm
	// begin inline asm
	mov.b32 %r5200, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5211, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5197, %r676, %r2611, %r5200, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5201, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5202, %r5200, %r5201;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5205, %r5197, %r5202;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5208, %r687, %r2611, %r5211, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5212, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5213, %r5211, %r5212;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5216, %r5208, %r5213;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5219, %r676, %r2633, %r5200, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5223, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5224, %r5200, %r5223;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5227, %r5219, %r5224;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5230, %r687, %r2633, %r5211, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5234, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5235, %r5211, %r5234;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5238, %r5230, %r5235;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5312, %r263, %r5067, %r4963;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5309, %r263, %r5078, %r4969;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5321, %r263, %r5089, %r4975;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5318, %r263, %r5100, %r4981;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5330, %r263, %r5113, %r4987;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5327, %r263, %r5124, %r4993;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5339, %r263, %r5135, %r4999;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5336, %r263, %r5146, %r5005;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5348, %r263, %r5159, %r5011;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5345, %r263, %r5170, %r5017;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5357, %r263, %r5181, %r5023;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5354, %r263, %r5192, %r5029;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5366, %r263, %r5205, %r5035;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5363, %r263, %r5216, %r5041;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5375, %r263, %r5227, %r5047;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5372, %r263, %r5238, %r5053;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5305, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5307, %r5305, %r5309;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5310, %r309, %r5312, %r5307;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5314, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5316, %r5314, %r5318;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5319, %r309, %r5321, %r5316;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5323, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5325, %r5323, %r5327;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5328, %r309, %r5330, %r5325;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5332, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5334, %r5332, %r5336;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5337, %r309, %r5339, %r5334;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5341, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5343, %r5341, %r5345;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5346, %r309, %r5348, %r5343;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5350, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5352, %r5350, %r5354;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5355, %r309, %r5357, %r5352;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5359, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5361, %r5359, %r5363;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5364, %r309, %r5366, %r5361;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5368, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5370, %r5368, %r5372;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5373, %r309, %r5375, %r5370;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5377, %r312, %r5312;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5380, %r309, %r5309, %r5377;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5384, %r312, %r5321;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5387, %r309, %r5318, %r5384;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5391, %r312, %r5330;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5394, %r309, %r5327, %r5391;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5398, %r312, %r5339;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5401, %r309, %r5336, %r5398;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5405, %r312, %r5348;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5408, %r309, %r5345, %r5405;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5412, %r312, %r5357;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5415, %r309, %r5354, %r5412;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5419, %r312, %r5366;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5422, %r309, %r5363, %r5419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5426, %r312, %r5375;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5429, %r309, %r5372, %r5426;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5520, %r5517}, {%r356, %r362, %r359, %r365}, {%r5310, %r5380}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5529, %r5526}, {%r356, %r362, %r359, %r365}, {%r5319, %r5387}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5538, %r5535}, {%r356, %r362, %r359, %r365}, {%r5328, %r5394}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5547, %r5544}, {%r356, %r362, %r359, %r365}, {%r5337, %r5401}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5556, %r5553}, {%r356, %r362, %r359, %r365}, {%r5346, %r5408}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5565, %r5562}, {%r356, %r362, %r359, %r365}, {%r5355, %r5415}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5574, %r5571}, {%r356, %r362, %r359, %r365}, {%r5364, %r5422}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5583, %r5580}, {%r356, %r362, %r359, %r365}, {%r5373, %r5429}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5513, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5515, %r5513, %r5517;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5518, %r400, %r5520, %r5515;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5522, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5524, %r5522, %r5526;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5527, %r400, %r5529, %r5524;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5531, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5533, %r5531, %r5535;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5536, %r400, %r5538, %r5533;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5540, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5542, %r5540, %r5544;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5545, %r400, %r5547, %r5542;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5549, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5551, %r5549, %r5553;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5554, %r400, %r5556, %r5551;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5558, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5560, %r5558, %r5562;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5563, %r400, %r5565, %r5560;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5567, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5569, %r5567, %r5571;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5572, %r400, %r5574, %r5569;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5576, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5578, %r5576, %r5580;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5581, %r400, %r5583, %r5578;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5585, %r403, %r5520;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5588, %r400, %r5517, %r5585;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5592, %r403, %r5529;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5595, %r400, %r5526, %r5592;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5599, %r403, %r5538;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5602, %r400, %r5535, %r5599;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5606, %r403, %r5547;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5609, %r400, %r5544, %r5606;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5613, %r403, %r5556;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5616, %r400, %r5553, %r5613;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5620, %r403, %r5565;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5623, %r400, %r5562, %r5620;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5627, %r403, %r5574;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5630, %r400, %r5571, %r5627;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5634, %r403, %r5583;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5637, %r400, %r5580, %r5634;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5641, %r5642}, {%r434, %r440, %r437, %r443}, {%r5518, %r5588}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5651, %r5652}, {%r434, %r440, %r437, %r443}, {%r5527, %r5595}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5661, %r5662}, {%r434, %r440, %r437, %r443}, {%r5536, %r5602}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5671, %r5672}, {%r434, %r440, %r437, %r443}, {%r5545, %r5609}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5681, %r5682}, {%r434, %r440, %r437, %r443}, {%r5554, %r5616}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5691, %r5692}, {%r434, %r440, %r437, %r443}, {%r5563, %r5623}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5701, %r5702}, {%r434, %r440, %r437, %r443}, {%r5572, %r5630}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5711, %r5712}, {%r434, %r440, %r437, %r443}, {%r5581, %r5637}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5721, %r118, %r5641;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5724, %r118, %r5642;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5727, %r118, %r5651;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5730, %r118, %r5652;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5733, %r118, %r5661;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5736, %r118, %r5662;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5739, %r118, %r5671;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5742, %r118, %r5672;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5745, %r118, %r5681;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5748, %r118, %r5682;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5751, %r118, %r5691;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5754, %r118, %r5692;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5757, %r118, %r5701;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5760, %r118, %r5702;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5763, %r118, %r5711;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5766, %r118, %r5712;
	// end inline asm
	// begin inline asm
	mov.b32 %r5769, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5770, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5771, %r5721, %r5769;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5774, %r5771, %r5770;
	// end inline asm
	// begin inline asm
	mov.b32 %r5777, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5778, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5779, %r5724, %r5777;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5782, %r5779, %r5778;
	// end inline asm
	// begin inline asm
	mov.b32 %r5785, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5786, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5787, %r5727, %r5785;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5790, %r5787, %r5786;
	// end inline asm
	// begin inline asm
	mov.b32 %r5793, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5794, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5795, %r5730, %r5793;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5798, %r5795, %r5794;
	// end inline asm
	// begin inline asm
	mov.b32 %r5801, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5802, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5803, %r5733, %r5801;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5806, %r5803, %r5802;
	// end inline asm
	// begin inline asm
	mov.b32 %r5809, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5810, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5811, %r5736, %r5809;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5814, %r5811, %r5810;
	// end inline asm
	// begin inline asm
	mov.b32 %r5817, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5818, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5819, %r5739, %r5817;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5822, %r5819, %r5818;
	// end inline asm
	// begin inline asm
	mov.b32 %r5825, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5826, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5827, %r5742, %r5825;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5830, %r5827, %r5826;
	// end inline asm
	// begin inline asm
	mov.b32 %r5833, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5834, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5835, %r5745, %r5833;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5838, %r5835, %r5834;
	// end inline asm
	// begin inline asm
	mov.b32 %r5841, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5842, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5843, %r5748, %r5841;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5846, %r5843, %r5842;
	// end inline asm
	// begin inline asm
	mov.b32 %r5849, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5850, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5851, %r5751, %r5849;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5854, %r5851, %r5850;
	// end inline asm
	// begin inline asm
	mov.b32 %r5857, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5858, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5859, %r5754, %r5857;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5862, %r5859, %r5858;
	// end inline asm
	// begin inline asm
	mov.b32 %r5865, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5866, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5867, %r5757, %r5865;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5870, %r5867, %r5866;
	// end inline asm
	// begin inline asm
	mov.b32 %r5873, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5874, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5875, %r5760, %r5873;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5878, %r5875, %r5874;
	// end inline asm
	// begin inline asm
	mov.b32 %r5881, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5882, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5883, %r5763, %r5881;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5886, %r5883, %r5882;
	// end inline asm
	// begin inline asm
	mov.b32 %r5889, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5890, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5891, %r5766, %r5889;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5894, %r5891, %r5890;
	// end inline asm
	// begin inline asm
	mov.b32 %r5900, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5898, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5899, %r5900, %r5898;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5902, %r5774, %r5899;
	// end inline asm
	// begin inline asm
	mov.b32 %r5905, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5906, %r5900, %r5905;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5909, %r5782, %r5906;
	// end inline asm
	// begin inline asm
	mov.b32 %r5912, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5913, %r5900, %r5912;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5916, %r5790, %r5913;
	// end inline asm
	// begin inline asm
	mov.b32 %r5919, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5920, %r5900, %r5919;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5923, %r5798, %r5920;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5926, %r5902, %r5916, %r2337;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5930, %r5909, %r5923, %r2337;
	// end inline asm
	shl.b32 	%r5937, %r5930, 4;
	// begin inline asm
	lop3.b32 %r5934, %r2343, %r5926, %r5937, 202;
	// end inline asm
	xor.b32  	%r7890, %r5934, -2004318072;
	// begin inline asm
	mov.b32 %r5941, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5939, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5940, %r5941, %r5939;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5943, %r5806, %r5940;
	// end inline asm
	// begin inline asm
	mov.b32 %r5946, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5947, %r5941, %r5946;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5950, %r5814, %r5947;
	// end inline asm
	// begin inline asm
	mov.b32 %r5953, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5954, %r5941, %r5953;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5957, %r5822, %r5954;
	// end inline asm
	// begin inline asm
	mov.b32 %r5960, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5961, %r5941, %r5960;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5964, %r5830, %r5961;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5967, %r5943, %r5957, %r2337;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5971, %r5950, %r5964, %r2337;
	// end inline asm
	shl.b32 	%r5978, %r5971, 4;
	// begin inline asm
	lop3.b32 %r5975, %r2343, %r5967, %r5978, 202;
	// end inline asm
	xor.b32  	%r7891, %r5975, -2004318072;
	// begin inline asm
	mov.b32 %r5982, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5980, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5981, %r5982, %r5980;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5984, %r5838, %r5981;
	// end inline asm
	// begin inline asm
	mov.b32 %r5987, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5988, %r5982, %r5987;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5991, %r5846, %r5988;
	// end inline asm
	// begin inline asm
	mov.b32 %r5994, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5995, %r5982, %r5994;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5998, %r5854, %r5995;
	// end inline asm
	// begin inline asm
	mov.b32 %r6001, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6002, %r5982, %r6001;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6005, %r5862, %r6002;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6008, %r5984, %r5998, %r2337;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6012, %r5991, %r6005, %r2337;
	// end inline asm
	shl.b32 	%r6019, %r6012, 4;
	// begin inline asm
	lop3.b32 %r6016, %r2343, %r6008, %r6019, 202;
	// end inline asm
	xor.b32  	%r7892, %r6016, -2004318072;
	// begin inline asm
	mov.b32 %r6023, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6021, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6022, %r6023, %r6021;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6025, %r5870, %r6022;
	// end inline asm
	// begin inline asm
	mov.b32 %r6028, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6029, %r6023, %r6028;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6032, %r5878, %r6029;
	// end inline asm
	// begin inline asm
	mov.b32 %r6035, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6036, %r6023, %r6035;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6039, %r5886, %r6036;
	// end inline asm
	// begin inline asm
	mov.b32 %r6042, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6043, %r6023, %r6042;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6046, %r5894, %r6043;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6049, %r6025, %r6039, %r2337;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6053, %r6032, %r6046, %r2337;
	// end inline asm
	shl.b32 	%r6060, %r6053, 4;
	// begin inline asm
	lop3.b32 %r6057, %r2343, %r6049, %r6060, 202;
	// end inline asm
	xor.b32  	%r7893, %r6057, -2004318072;
	st.shared.u32 	[%rd174], %r7890;
	st.shared.u32 	[%rd175], %r7891;
	st.shared.u32 	[%rd176], %r7892;
	st.shared.u32 	[%rd177], %r7893;
	ld.shared.u32 	%r8031, [%rd117];
	ld.shared.u32 	%r8030, [%rd119];
	ld.shared.u32 	%r8029, [%rd121];
	ld.shared.u32 	%r8028, [%rd123];
	// begin inline asm
	mov.b32 %r6066, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6077, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6065, %r8031, -2004318072;
	// begin inline asm
	lop3.b32 %r6063, %r676, %r6065, %r6066, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6067, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6068, %r6066, %r6067;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6071, %r6063, %r6068;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6074, %r687, %r6065, %r6077, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6078, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6079, %r6077, %r6078;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6082, %r6074, %r6079;
	// end inline asm
	shr.u32 	%r6087, %r6065, 8;
	// begin inline asm
	lop3.b32 %r6085, %r676, %r6087, %r6066, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6089, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6090, %r6066, %r6089;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6093, %r6085, %r6090;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6096, %r687, %r6087, %r6077, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6100, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6101, %r6077, %r6100;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6104, %r6096, %r6101;
	// end inline asm
	// begin inline asm
	mov.b32 %r6112, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6123, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6111, %r8030, -2004318072;
	// begin inline asm
	lop3.b32 %r6109, %r676, %r6111, %r6112, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6113, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6114, %r6112, %r6113;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6117, %r6109, %r6114;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6120, %r687, %r6111, %r6123, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6124, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6125, %r6123, %r6124;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6128, %r6120, %r6125;
	// end inline asm
	shr.u32 	%r6133, %r6111, 8;
	// begin inline asm
	lop3.b32 %r6131, %r676, %r6133, %r6112, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6135, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6136, %r6112, %r6135;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6139, %r6131, %r6136;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6142, %r687, %r6133, %r6123, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6146, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6147, %r6123, %r6146;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6150, %r6142, %r6147;
	// end inline asm
	// begin inline asm
	mov.b32 %r6158, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6169, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6157, %r8029, -2004318072;
	// begin inline asm
	lop3.b32 %r6155, %r676, %r6157, %r6158, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6159, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6160, %r6158, %r6159;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6163, %r6155, %r6160;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6166, %r687, %r6157, %r6169, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6170, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6171, %r6169, %r6170;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6174, %r6166, %r6171;
	// end inline asm
	shr.u32 	%r6179, %r6157, 8;
	// begin inline asm
	lop3.b32 %r6177, %r676, %r6179, %r6158, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6181, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6182, %r6158, %r6181;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6185, %r6177, %r6182;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6188, %r687, %r6179, %r6169, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6192, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6193, %r6169, %r6192;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6196, %r6188, %r6193;
	// end inline asm
	// begin inline asm
	mov.b32 %r6204, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6215, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6203, %r8028, -2004318072;
	// begin inline asm
	lop3.b32 %r6201, %r676, %r6203, %r6204, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6205, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6206, %r6204, %r6205;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6209, %r6201, %r6206;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6212, %r687, %r6203, %r6215, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6216, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6217, %r6215, %r6216;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6220, %r6212, %r6217;
	// end inline asm
	shr.u32 	%r6225, %r6203, 8;
	// begin inline asm
	lop3.b32 %r6223, %r676, %r6225, %r6204, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6227, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6228, %r6204, %r6227;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6231, %r6223, %r6228;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6234, %r687, %r6225, %r6215, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6238, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6239, %r6215, %r6238;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6242, %r6234, %r6239;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6245, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6247, %r6245, %r6071;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6250, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6252, %r6250, %r6082;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6255, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6257, %r6255, %r6093;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6260, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6262, %r6260, %r6104;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6265, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6267, %r6265, %r6117;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6270, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6272, %r6270, %r6128;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6275, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6277, %r6275, %r6139;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6280, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6282, %r6280, %r6150;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6285, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6287, %r6285, %r6163;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6290, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6292, %r6290, %r6174;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6295, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6297, %r6295, %r6185;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6300, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6302, %r6300, %r6196;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6305, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6307, %r6305, %r6209;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6310, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6312, %r6310, %r6220;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6315, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6317, %r6315, %r6231;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6320, %r281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6322, %r6320, %r6242;
	// end inline asm
	// begin inline asm
	mov.b32 %r6330, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6341, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6327, %r676, %r677, %r6330, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6331, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6332, %r6330, %r6331;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6335, %r6327, %r6332;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6338, %r687, %r677, %r6341, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6342, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6343, %r6341, %r6342;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6346, %r6338, %r6343;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6349, %r676, %r699, %r6330, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6353, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6354, %r6330, %r6353;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6357, %r6349, %r6354;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6360, %r687, %r699, %r6341, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6364, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6365, %r6341, %r6364;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6368, %r6360, %r6365;
	// end inline asm
	// begin inline asm
	mov.b32 %r6376, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6387, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6373, %r676, %r723, %r6376, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6377, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6378, %r6376, %r6377;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6381, %r6373, %r6378;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6384, %r687, %r723, %r6387, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6388, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6389, %r6387, %r6388;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6392, %r6384, %r6389;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6395, %r676, %r745, %r6376, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6399, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6400, %r6376, %r6399;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6403, %r6395, %r6400;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6406, %r687, %r745, %r6387, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6410, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6411, %r6387, %r6410;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6414, %r6406, %r6411;
	// end inline asm
	// begin inline asm
	mov.b32 %r6422, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6433, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6419, %r676, %r769, %r6422, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6423, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6424, %r6422, %r6423;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6427, %r6419, %r6424;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6430, %r687, %r769, %r6433, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6434, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6435, %r6433, %r6434;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6438, %r6430, %r6435;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6441, %r676, %r791, %r6422, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6445, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6446, %r6422, %r6445;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6449, %r6441, %r6446;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6452, %r687, %r791, %r6433, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6456, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6457, %r6433, %r6456;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6460, %r6452, %r6457;
	// end inline asm
	// begin inline asm
	mov.b32 %r6468, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6479, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6465, %r676, %r815, %r6468, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6469, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6470, %r6468, %r6469;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6473, %r6465, %r6470;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6476, %r687, %r815, %r6479, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6480, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6481, %r6479, %r6480;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6484, %r6476, %r6481;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6487, %r676, %r837, %r6468, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6491, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6492, %r6468, %r6491;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6495, %r6487, %r6492;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6498, %r687, %r837, %r6479, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6502, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6503, %r6479, %r6502;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6506, %r6498, %r6503;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6509, %r227, %r6335, %r6247;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6513, %r227, %r6346, %r6252;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6517, %r227, %r6357, %r6257;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6521, %r227, %r6368, %r6262;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6525, %r227, %r6381, %r6267;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6529, %r227, %r6392, %r6272;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6533, %r227, %r6403, %r6277;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6537, %r227, %r6414, %r6282;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6541, %r227, %r6427, %r6287;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6545, %r227, %r6438, %r6292;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6549, %r227, %r6449, %r6297;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6553, %r227, %r6460, %r6302;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6557, %r227, %r6473, %r6307;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6561, %r227, %r6484, %r6312;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6565, %r227, %r6495, %r6317;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6569, %r227, %r6506, %r6322;
	// end inline asm
	// begin inline asm
	mov.b32 %r6578, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6589, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6575, %r676, %r2473, %r6578, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6579, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6580, %r6578, %r6579;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6583, %r6575, %r6580;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6586, %r687, %r2473, %r6589, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6590, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6591, %r6589, %r6590;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6594, %r6586, %r6591;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6597, %r676, %r2495, %r6578, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6601, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6602, %r6578, %r6601;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6605, %r6597, %r6602;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6608, %r687, %r2495, %r6589, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6612, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6613, %r6589, %r6612;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6616, %r6608, %r6613;
	// end inline asm
	// begin inline asm
	mov.b32 %r6624, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6635, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6621, %r676, %r2519, %r6624, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6625, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6626, %r6624, %r6625;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6629, %r6621, %r6626;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6632, %r687, %r2519, %r6635, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6636, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6637, %r6635, %r6636;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6640, %r6632, %r6637;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6643, %r676, %r2541, %r6624, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6647, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6648, %r6624, %r6647;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6651, %r6643, %r6648;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6654, %r687, %r2541, %r6635, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6658, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6659, %r6635, %r6658;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6662, %r6654, %r6659;
	// end inline asm
	// begin inline asm
	mov.b32 %r6670, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6681, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6667, %r676, %r2565, %r6670, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6671, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6672, %r6670, %r6671;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6675, %r6667, %r6672;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6678, %r687, %r2565, %r6681, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6682, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6683, %r6681, %r6682;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6686, %r6678, %r6683;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6689, %r676, %r2587, %r6670, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6693, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6694, %r6670, %r6693;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6697, %r6689, %r6694;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6700, %r687, %r2587, %r6681, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6704, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6705, %r6681, %r6704;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6708, %r6700, %r6705;
	// end inline asm
	// begin inline asm
	mov.b32 %r6716, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6727, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6713, %r676, %r2611, %r6716, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6717, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6718, %r6716, %r6717;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6721, %r6713, %r6718;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6724, %r687, %r2611, %r6727, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6728, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6729, %r6727, %r6728;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6732, %r6724, %r6729;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6735, %r676, %r2633, %r6716, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6739, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6740, %r6716, %r6739;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6743, %r6735, %r6740;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6746, %r687, %r2633, %r6727, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6750, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6751, %r6727, %r6750;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6754, %r6746, %r6751;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6757, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6759, %r6757, %r6583, %r6509;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6763, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6765, %r6763, %r6594, %r6513;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6769, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6771, %r6769, %r6605, %r6517;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6775, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6777, %r6775, %r6616, %r6521;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6781, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6783, %r6781, %r6629, %r6525;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6787, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6789, %r6787, %r6640, %r6529;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6793, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6795, %r6793, %r6651, %r6533;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6799, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6801, %r6799, %r6662, %r6537;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6805, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6807, %r6805, %r6675, %r6541;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6811, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6813, %r6811, %r6686, %r6545;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6817, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6819, %r6817, %r6697, %r6549;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6823, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6825, %r6823, %r6708, %r6553;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6829, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6831, %r6829, %r6721, %r6557;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6835, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6837, %r6835, %r6732, %r6561;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6841, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6843, %r6841, %r6743, %r6565;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6847, %r245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6849, %r6847, %r6754, %r6569;
	// end inline asm
	// begin inline asm
	mov.b32 %r6858, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6869, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6855, %r676, %r4269, %r6858, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6859, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6860, %r6858, %r6859;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6863, %r6855, %r6860;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6866, %r687, %r4269, %r6869, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6870, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6871, %r6869, %r6870;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6874, %r6866, %r6871;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6877, %r676, %r4291, %r6858, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6881, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6882, %r6858, %r6881;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6885, %r6877, %r6882;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6888, %r687, %r4291, %r6869, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6892, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6893, %r6869, %r6892;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6896, %r6888, %r6893;
	// end inline asm
	// begin inline asm
	mov.b32 %r6904, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6915, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6901, %r676, %r4315, %r6904, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6905, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6906, %r6904, %r6905;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6909, %r6901, %r6906;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6912, %r687, %r4315, %r6915, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6916, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6917, %r6915, %r6916;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6920, %r6912, %r6917;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6923, %r676, %r4337, %r6904, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6927, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6928, %r6904, %r6927;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6931, %r6923, %r6928;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6934, %r687, %r4337, %r6915, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6938, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6939, %r6915, %r6938;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6942, %r6934, %r6939;
	// end inline asm
	// begin inline asm
	mov.b32 %r6950, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6961, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6947, %r676, %r4361, %r6950, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6951, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6952, %r6950, %r6951;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6955, %r6947, %r6952;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6958, %r687, %r4361, %r6961, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6962, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6963, %r6961, %r6962;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6966, %r6958, %r6963;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6969, %r676, %r4383, %r6950, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6973, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6974, %r6950, %r6973;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6977, %r6969, %r6974;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6980, %r687, %r4383, %r6961, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6984, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6985, %r6961, %r6984;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6988, %r6980, %r6985;
	// end inline asm
	// begin inline asm
	mov.b32 %r6996, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7007, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6993, %r676, %r4407, %r6996, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6997, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6998, %r6996, %r6997;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r7001, %r6993, %r6998;
	// end inline asm
	// begin inline asm
	lop3.b32 %r7004, %r687, %r4407, %r7007, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r7008, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7009, %r7007, %r7008;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r7012, %r7004, %r7009;
	// end inline asm
	// begin inline asm
	lop3.b32 %r7015, %r676, %r4429, %r6996, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r7019, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7020, %r6996, %r7019;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r7023, %r7015, %r7020;
	// end inline asm
	// begin inline asm
	lop3.b32 %r7026, %r687, %r4429, %r7007, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r7030, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7031, %r7007, %r7030;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r7034, %r7026, %r7031;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7108, %r263, %r6863, %r6759;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7105, %r263, %r6874, %r6765;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7117, %r263, %r6885, %r6771;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7114, %r263, %r6896, %r6777;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7126, %r263, %r6909, %r6783;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7123, %r263, %r6920, %r6789;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7135, %r263, %r6931, %r6795;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7132, %r263, %r6942, %r6801;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7144, %r263, %r6955, %r6807;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7141, %r263, %r6966, %r6813;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7153, %r263, %r6977, %r6819;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7150, %r263, %r6988, %r6825;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7162, %r263, %r7001, %r6831;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7159, %r263, %r7012, %r6837;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7171, %r263, %r7023, %r6843;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7168, %r263, %r7034, %r6849;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7101, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7103, %r7101, %r7105;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7106, %r309, %r7108, %r7103;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7110, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7112, %r7110, %r7114;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7115, %r309, %r7117, %r7112;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7119, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7121, %r7119, %r7123;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7124, %r309, %r7126, %r7121;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7128, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7130, %r7128, %r7132;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7133, %r309, %r7135, %r7130;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7137, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7139, %r7137, %r7141;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7142, %r309, %r7144, %r7139;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7146, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7148, %r7146, %r7150;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7151, %r309, %r7153, %r7148;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7155, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7157, %r7155, %r7159;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7160, %r309, %r7162, %r7157;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7164, %r312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7166, %r7164, %r7168;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7169, %r309, %r7171, %r7166;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7173, %r312, %r7108;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7176, %r309, %r7105, %r7173;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7180, %r312, %r7117;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7183, %r309, %r7114, %r7180;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7187, %r312, %r7126;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7190, %r309, %r7123, %r7187;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7194, %r312, %r7135;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7197, %r309, %r7132, %r7194;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7201, %r312, %r7144;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7204, %r309, %r7141, %r7201;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7208, %r312, %r7153;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7211, %r309, %r7150, %r7208;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7215, %r312, %r7162;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7218, %r309, %r7159, %r7215;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7222, %r312, %r7171;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7225, %r309, %r7168, %r7222;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7316, %r7313}, {%r356, %r362, %r359, %r365}, {%r7106, %r7176}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7325, %r7322}, {%r356, %r362, %r359, %r365}, {%r7115, %r7183}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7334, %r7331}, {%r356, %r362, %r359, %r365}, {%r7124, %r7190}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7343, %r7340}, {%r356, %r362, %r359, %r365}, {%r7133, %r7197}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7352, %r7349}, {%r356, %r362, %r359, %r365}, {%r7142, %r7204}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7361, %r7358}, {%r356, %r362, %r359, %r365}, {%r7151, %r7211}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7370, %r7367}, {%r356, %r362, %r359, %r365}, {%r7160, %r7218}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7379, %r7376}, {%r356, %r362, %r359, %r365}, {%r7169, %r7225}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7309, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7311, %r7309, %r7313;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7314, %r400, %r7316, %r7311;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7318, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7320, %r7318, %r7322;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7323, %r400, %r7325, %r7320;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7327, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7329, %r7327, %r7331;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7332, %r400, %r7334, %r7329;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7336, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7338, %r7336, %r7340;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7341, %r400, %r7343, %r7338;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7345, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7347, %r7345, %r7349;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7350, %r400, %r7352, %r7347;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7354, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7356, %r7354, %r7358;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7359, %r400, %r7361, %r7356;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7363, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7365, %r7363, %r7367;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7368, %r400, %r7370, %r7365;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7372, %r403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7374, %r7372, %r7376;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7377, %r400, %r7379, %r7374;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7381, %r403, %r7316;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7384, %r400, %r7313, %r7381;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7388, %r403, %r7325;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7391, %r400, %r7322, %r7388;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7395, %r403, %r7334;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7398, %r400, %r7331, %r7395;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7402, %r403, %r7343;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7405, %r400, %r7340, %r7402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7409, %r403, %r7352;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7412, %r400, %r7349, %r7409;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7416, %r403, %r7361;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7419, %r400, %r7358, %r7416;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7423, %r403, %r7370;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7426, %r400, %r7367, %r7423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7430, %r403, %r7379;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7433, %r400, %r7376, %r7430;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7437, %r7438}, {%r434, %r440, %r437, %r443}, {%r7314, %r7384}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7447, %r7448}, {%r434, %r440, %r437, %r443}, {%r7323, %r7391}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7457, %r7458}, {%r434, %r440, %r437, %r443}, {%r7332, %r7398}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7467, %r7468}, {%r434, %r440, %r437, %r443}, {%r7341, %r7405}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7477, %r7478}, {%r434, %r440, %r437, %r443}, {%r7350, %r7412}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7487, %r7488}, {%r434, %r440, %r437, %r443}, {%r7359, %r7419}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7497, %r7498}, {%r434, %r440, %r437, %r443}, {%r7368, %r7426}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7507, %r7508}, {%r434, %r440, %r437, %r443}, {%r7377, %r7433}, {%r7994, %r7994};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7517, %r118, %r7437;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7520, %r118, %r7438;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7523, %r118, %r7447;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7526, %r118, %r7448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7529, %r118, %r7457;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7532, %r118, %r7458;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7535, %r118, %r7467;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7538, %r118, %r7468;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7541, %r118, %r7477;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7544, %r118, %r7478;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7547, %r118, %r7487;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7550, %r118, %r7488;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7553, %r118, %r7497;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7556, %r118, %r7498;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7559, %r118, %r7507;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7562, %r118, %r7508;
	// end inline asm
	// begin inline asm
	mov.b32 %r7565, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7566, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7567, %r7517, %r7565;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7570, %r7567, %r7566;
	// end inline asm
	// begin inline asm
	mov.b32 %r7573, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7574, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7575, %r7520, %r7573;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7578, %r7575, %r7574;
	// end inline asm
	// begin inline asm
	mov.b32 %r7581, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7582, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7583, %r7523, %r7581;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7586, %r7583, %r7582;
	// end inline asm
	// begin inline asm
	mov.b32 %r7589, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7590, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7591, %r7526, %r7589;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7594, %r7591, %r7590;
	// end inline asm
	// begin inline asm
	mov.b32 %r7597, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7598, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7599, %r7529, %r7597;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7602, %r7599, %r7598;
	// end inline asm
	// begin inline asm
	mov.b32 %r7605, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7606, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7607, %r7532, %r7605;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7610, %r7607, %r7606;
	// end inline asm
	// begin inline asm
	mov.b32 %r7613, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7614, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7615, %r7535, %r7613;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7618, %r7615, %r7614;
	// end inline asm
	// begin inline asm
	mov.b32 %r7621, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7622, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7623, %r7538, %r7621;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7626, %r7623, %r7622;
	// end inline asm
	// begin inline asm
	mov.b32 %r7629, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7630, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7631, %r7541, %r7629;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7634, %r7631, %r7630;
	// end inline asm
	// begin inline asm
	mov.b32 %r7637, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7638, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7639, %r7544, %r7637;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7642, %r7639, %r7638;
	// end inline asm
	// begin inline asm
	mov.b32 %r7645, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7646, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7647, %r7547, %r7645;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7650, %r7647, %r7646;
	// end inline asm
	// begin inline asm
	mov.b32 %r7653, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7654, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7655, %r7550, %r7653;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7658, %r7655, %r7654;
	// end inline asm
	// begin inline asm
	mov.b32 %r7661, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7662, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7663, %r7553, %r7661;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7666, %r7663, %r7662;
	// end inline asm
	// begin inline asm
	mov.b32 %r7669, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7670, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7671, %r7556, %r7669;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7674, %r7671, %r7670;
	// end inline asm
	// begin inline asm
	mov.b32 %r7677, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7678, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7679, %r7559, %r7677;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7682, %r7679, %r7678;
	// end inline asm
	// begin inline asm
	mov.b32 %r7685, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7686, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7687, %r7562, %r7685;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7690, %r7687, %r7686;
	// end inline asm
	// begin inline asm
	mov.b32 %r7696, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7694, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7695, %r7696, %r7694;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7698, %r7570, %r7695;
	// end inline asm
	// begin inline asm
	mov.b32 %r7701, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7702, %r7696, %r7701;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7705, %r7578, %r7702;
	// end inline asm
	// begin inline asm
	mov.b32 %r7708, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7709, %r7696, %r7708;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7712, %r7586, %r7709;
	// end inline asm
	// begin inline asm
	mov.b32 %r7715, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7716, %r7696, %r7715;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7719, %r7594, %r7716;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7722, %r7698, %r7712, %r2337;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7726, %r7705, %r7719, %r2337;
	// end inline asm
	shl.b32 	%r7733, %r7726, 4;
	// begin inline asm
	lop3.b32 %r7730, %r2343, %r7722, %r7733, 202;
	// end inline asm
	xor.b32  	%r7894, %r7730, -2004318072;
	// begin inline asm
	mov.b32 %r7737, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7735, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7736, %r7737, %r7735;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7739, %r7602, %r7736;
	// end inline asm
	// begin inline asm
	mov.b32 %r7742, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7743, %r7737, %r7742;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7746, %r7610, %r7743;
	// end inline asm
	// begin inline asm
	mov.b32 %r7749, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7750, %r7737, %r7749;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7753, %r7618, %r7750;
	// end inline asm
	// begin inline asm
	mov.b32 %r7756, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7757, %r7737, %r7756;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7760, %r7626, %r7757;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7763, %r7739, %r7753, %r2337;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7767, %r7746, %r7760, %r2337;
	// end inline asm
	shl.b32 	%r7774, %r7767, 4;
	// begin inline asm
	lop3.b32 %r7771, %r2343, %r7763, %r7774, 202;
	// end inline asm
	xor.b32  	%r7895, %r7771, -2004318072;
	// begin inline asm
	mov.b32 %r7778, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7776, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7777, %r7778, %r7776;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7780, %r7634, %r7777;
	// end inline asm
	// begin inline asm
	mov.b32 %r7783, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7784, %r7778, %r7783;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7787, %r7642, %r7784;
	// end inline asm
	// begin inline asm
	mov.b32 %r7790, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7791, %r7778, %r7790;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7794, %r7650, %r7791;
	// end inline asm
	// begin inline asm
	mov.b32 %r7797, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7798, %r7778, %r7797;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7801, %r7658, %r7798;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7804, %r7780, %r7794, %r2337;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7808, %r7787, %r7801, %r2337;
	// end inline asm
	shl.b32 	%r7815, %r7808, 4;
	// begin inline asm
	lop3.b32 %r7812, %r2343, %r7804, %r7815, 202;
	// end inline asm
	xor.b32  	%r7896, %r7812, -2004318072;
	// begin inline asm
	mov.b32 %r7819, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7817, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7818, %r7819, %r7817;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7821, %r7666, %r7818;
	// end inline asm
	// begin inline asm
	mov.b32 %r7824, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7825, %r7819, %r7824;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7828, %r7674, %r7825;
	// end inline asm
	// begin inline asm
	mov.b32 %r7831, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7832, %r7819, %r7831;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7835, %r7682, %r7832;
	// end inline asm
	// begin inline asm
	mov.b32 %r7838, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7839, %r7819, %r7838;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7842, %r7690, %r7839;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7845, %r7821, %r7835, %r2337;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7849, %r7828, %r7842, %r2337;
	// end inline asm
	shl.b32 	%r7856, %r7849, 4;
	// begin inline asm
	lop3.b32 %r7853, %r2343, %r7845, %r7856, 202;
	// end inline asm
	xor.b32  	%r7897, %r7853, -2004318072;
	st.shared.u32 	[%rd174], %r7894;
	st.shared.u32 	[%rd175], %r7895;
	st.shared.u32 	[%rd176], %r7896;
	st.shared.u32 	[%rd177], %r7897;
	add.s32 	%r8027, %r8027, 64;
	add.s64 	%rd177, %rd177, 8324;
	add.s64 	%rd176, %rd176, 8324;
	add.s64 	%rd175, %rd175, 8324;
	add.s64 	%rd174, %rd174, 8324;
	add.s32 	%r8026, %r8026, 1;
	setp.eq.s32 	%p242, %r8027, 256;
	@%p242 bra 	$L__BB0_131;
	bra.uni 	$L__BB0_130;
$L__BB0_131:                            // %guard_exit17381
                                        //   in Loop: Header=BB0_129 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r7903, [%rd5];
	ld.shared.u32 	%r7904, [%rd6+128];
	ld.shared.u32 	%r7911, [%rd6+4];
	ld.shared.u32 	%r7912, [%rd6+132];
	ld.shared.u32 	%r7919, [%rd5+8324];
	ld.shared.u32 	%r7920, [%rd6+8452];
	ld.shared.u32 	%r7927, [%rd6+8328];
	ld.shared.u32 	%r7928, [%rd6+8456];
	ld.shared.u32 	%r7935, [%rd5+16648];
	ld.shared.u32 	%r7936, [%rd6+16776];
	ld.shared.u32 	%r7943, [%rd6+16652];
	ld.shared.u32 	%r7944, [%rd6+16780];
	ld.shared.u32 	%r7951, [%rd5+24972];
	ld.shared.u32 	%r7952, [%rd6+25100];
	ld.shared.u32 	%r7959, [%rd6+24976];
	ld.shared.u32 	%r7960, [%rd6+25104];
	// begin inline asm
	prmt.b32 %r7898, %r7903, %r7904, %r588;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7902, %r7903, %r7904, %r592;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7906, %r7911, %r7912, %r588;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7910, %r7911, %r7912, %r592;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7914, %r7919, %r7920, %r588;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7918, %r7919, %r7920, %r592;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7922, %r7927, %r7928, %r588;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7926, %r7927, %r7928, %r592;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7930, %r7935, %r7936, %r588;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7934, %r7935, %r7936, %r592;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7938, %r7943, %r7944, %r588;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7942, %r7943, %r7944, %r592;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7946, %r7951, %r7952, %r588;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7950, %r7951, %r7952, %r592;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7954, %r7959, %r7960, %r588;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7958, %r7959, %r7960, %r592;
	// end inline asm
	selp.b32 	%r7962, %r7902, %r7898, %p229;
	shfl.sync.bfly.b32	%r170, %r7962, 8, 31, -1;
	selp.b32 	%r7963, %r7910, %r7906, %p229;
	shfl.sync.bfly.b32	%r171, %r7963, 8, 31, -1;
	selp.b32 	%r7964, %r7918, %r7914, %p229;
	shfl.sync.bfly.b32	%r7965, %r7964, 8, 31, -1;
	selp.b32 	%r7966, %r7926, %r7922, %p229;
	shfl.sync.bfly.b32	%r7967, %r7966, 8, 31, -1;
	selp.b32 	%r7968, %r7934, %r7930, %p229;
	shfl.sync.bfly.b32	%r7969, %r7968, 8, 31, -1;
	selp.b32 	%r7970, %r7942, %r7938, %p229;
	shfl.sync.bfly.b32	%r7971, %r7970, 8, 31, -1;
	selp.b32 	%r7972, %r7950, %r7946, %p229;
	shfl.sync.bfly.b32	%r7973, %r7972, 8, 31, -1;
	selp.b32 	%r7974, %r7958, %r7954, %p229;
	shfl.sync.bfly.b32	%r7975, %r7974, 8, 31, -1;
	and.b32  	%r184, %r108, 256;
	setp.eq.s32 	%p244, %r184, 0;
	shl.b32 	%r8040, %r108, 12;
	@%p244 bra 	$L__BB0_148;
// %bb.132:                             // %pass16578
                                        //   in Loop: Header=BB0_129 Depth=1
	selp.b32 	%r7976, %r171, %r7910, %p229;
	selp.b32 	%r7977, %r7906, %r171, %p229;
	selp.b32 	%r7978, %r170, %r7902, %p229;
	selp.b32 	%r7979, %r7898, %r170, %p229;
	or.b32  	%r7981, %r8040, %r88;
	or.b32  	%r7982, %r7981, %r84;
	cvt.s64.s32 	%rd124, %r7982;
	add.s64 	%rd125, %rd124, %rd7;
	shr.u64 	%rd126, %rd125, 35;
	add.s64 	%rd127, %rd125, %rd126;
	shr.s64 	%rd128, %rd127, 29;
	setp.lt.s64 	%p246, %rd125, 0;
	and.b64  	%rd129, %rd127, -536870912;
	setp.ne.s64 	%p247, %rd129, %rd125;
	and.pred  	%p248, %p246, %p247;
	selp.u64 	%rd130, 1, 0, %p248;
	sub.s64 	%rd131, %rd130, %rd128;
	shl.b64 	%rd132, %rd131, 29;
	add.s64 	%rd133, %rd132, %rd125;
	shl.b64 	%rd134, %rd133, 2;
	add.s64 	%rd135, %rd3, %rd134;
	st.global.v4.u32 	[%rd135], {%r7979, %r7977, %r7978, %r7976};
$L__BB0_148:                            // %pass16584
                                        //   in Loop: Header=BB0_129 Depth=1
	or.b32  	%r7983, %r184, 64;
	setp.gt.u32 	%p249, %r7983, 191;
	@%p249 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_150;
$L__BB0_149:                            // %pass16678
                                        //   in Loop: Header=BB0_129 Depth=1
	selp.b32 	%r172, %r7914, %r7965, %p229;
	selp.b32 	%r173, %r7965, %r7918, %p229;
	selp.b32 	%r174, %r7922, %r7967, %p229;
	selp.b32 	%r175, %r7967, %r7926, %p229;
	or.b32  	%r7984, %r8040, %r89;
	or.b32  	%r7985, %r7984, 262144;
	cvt.s64.s32 	%rd136, %r7985;
	add.s64 	%rd137, %rd136, %rd7;
	shr.u64 	%rd138, %rd137, 35;
	add.s64 	%rd139, %rd137, %rd138;
	shr.s64 	%rd140, %rd139, 29;
	setp.lt.s64 	%p250, %rd137, 0;
	and.b64  	%rd141, %rd139, -536870912;
	setp.ne.s64 	%p251, %rd141, %rd137;
	and.pred  	%p252, %p250, %p251;
	selp.u64 	%rd142, 1, 0, %p252;
	sub.s64 	%rd143, %rd142, %rd140;
	shl.b64 	%rd144, %rd143, 29;
	add.s64 	%rd145, %rd144, %rd137;
	shl.b64 	%rd146, %rd145, 2;
	add.s64 	%rd147, %rd3, %rd146;
	st.global.v4.u32 	[%rd147], {%r172, %r174, %r173, %r175};
$L__BB0_150:                            // %pass16684
                                        //   in Loop: Header=BB0_129 Depth=1
	selp.b32 	%r180, %r7946, %r7973, %p229;
	selp.b32 	%r181, %r7973, %r7950, %p229;
	selp.b32 	%r182, %r7954, %r7975, %p229;
	selp.b32 	%r183, %r7975, %r7958, %p229;
	or.b32  	%r7986, %r184, 128;
	setp.lt.u32 	%p253, %r7986, 192;
	or.b32  	%r7996, %r8040, %r89;
	@%p253 bra 	$L__BB0_152;
// %bb.151:                             // %pass16778
                                        //   in Loop: Header=BB0_129 Depth=1
	selp.b32 	%r176, %r7930, %r7969, %p229;
	selp.b32 	%r177, %r7969, %r7934, %p229;
	selp.b32 	%r178, %r7938, %r7971, %p229;
	selp.b32 	%r179, %r7971, %r7942, %p229;
	or.b32  	%r7988, %r7996, 524288;
	cvt.s64.s32 	%rd148, %r7988;
	add.s64 	%rd149, %rd148, %rd7;
	shr.u64 	%rd150, %rd149, 35;
	add.s64 	%rd151, %rd149, %rd150;
	shr.s64 	%rd152, %rd151, 29;
	setp.lt.s64 	%p254, %rd149, 0;
	and.b64  	%rd153, %rd151, -536870912;
	setp.ne.s64 	%p255, %rd153, %rd149;
	and.pred  	%p256, %p254, %p255;
	selp.u64 	%rd154, 1, 0, %p256;
	sub.s64 	%rd155, %rd154, %rd152;
	shl.b64 	%rd156, %rd155, 29;
	add.s64 	%rd157, %rd156, %rd149;
	shl.b64 	%rd158, %rd157, 2;
	add.s64 	%rd159, %rd3, %rd158;
	st.global.v4.u32 	[%rd159], {%r176, %r178, %r177, %r179};
	bra.uni 	$L__BB0_152;
$L__BB0_153:                            // %L40408
	st.global.u32 	[%rd4], %r7994;
	ret;
$L__BB0_7:                              // %L157
	mov.u32 	%r7993, 2;
	st.global.u32 	[%rd4], %r7993;
	mov.u64 	%rd172, exception3405;
	cvta.global.u64 	%rd173, %rd172;
	{ // callseq 16, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd173;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 16
	{ // callseq 17, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r185;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 17
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd41, exception1;
	cvta.global.u64 	%rd42, %rd41;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd42;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r185;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_53:                             // %L40507
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_11685, 
	(
	);
	} // callseq 3
	mov.u64 	%rd50, exception1;
	cvta.global.u64 	%rd51, %rd50;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd51;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r185;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_83:                             // %L40504
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_11685, 
	(
	);
	} // callseq 7
	mov.u64 	%rd56, exception1;
	cvta.global.u64 	%rd57, %rd56;
	{ // callseq 8, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd57;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 8
	{ // callseq 9, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r185;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 9
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_98:                             // %L40501
	{ // callseq 13, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_11685, 
	(
	);
	} // callseq 13
	mov.u64 	%rd70, exception1;
	cvta.global.u64 	%rd71, %rd70;
	{ // callseq 14, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd71;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 14
	{ // callseq 15, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r185;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 15
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
