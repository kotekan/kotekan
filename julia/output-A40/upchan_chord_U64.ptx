// PTX kernel code for the CUDA upchannelizer
// This file has been generated automatically by `upchan.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for upchan(::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE // -- Begin function _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.func julia_AssertionError_11695
()
.noreturn
{
	trap;
}
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func  (.param .b64 func_retval0) julia_power_by_squaring_11706
(
	.param .align 8 .b8 julia_power_by_squaring_11706_param_0[16],
	.param .b64 julia_power_by_squaring_11706_param_1,
	.param .b64 julia_power_by_squaring_11706_param_2
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception3406[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception13427[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.visible .entry _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE(
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<262>;
	.reg .b16 	%rs<1185>;
	.reg .b32 	%r<8042>;
	.reg .f32 	%f<914>;
	.reg .b64 	%rd<189>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r187, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd35, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r188, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r188, 66815;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	ld.param.u64 	%rd52, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8];
	ld.param.u64 	%rd36, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r189, %r2, 9;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r190, %r189, %r1;
	or.b32  	%r191, %r190, %r4;
	mul.wide.u32 	%rd58, %r191, 4;
	add.s64 	%rd4, %rd52, %rd58;
	mov.u32 	%r192, 1;
	st.global.u32 	[%rd4], %r192;
	ld.global.u32 	%r5, [%rd36];
	setp.lt.s32 	%p2, %r5, 0;
	@%p2 bra 	$L__BB0_7;
// %bb.3:                               // %L204
	ld.param.u64 	%rd40, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2];
	ld.global.u32 	%r6, [%rd40];
	setp.lt.s32 	%p3, %r6, %r5;
	setp.gt.s32 	%p4, %r6, 262144;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_7;
// %bb.4:                               // %L214
	ld.param.u64 	%rd44, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3];
	ld.global.u32 	%r7, [%rd44];
	sub.s32 	%r193, %r6, %r5;
	and.b32  	%r194, %r193, 255;
	setp.ne.s32 	%p6, %r194, 0;
	setp.lt.s32 	%p7, %r7, 0;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L220
	ld.param.u64 	%rd48, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4];
	ld.global.u32 	%r8, [%rd48];
	setp.lt.s32 	%p9, %r8, %r7;
	setp.gt.s32 	%p10, %r8, 4096;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L230
	not.b32 	%r195, %r7;
	add.s32 	%r196, %r195, %r8;
	and.b32  	%r197, %r196, 3;
	setp.eq.s32 	%p12, %r197, 0;
	@%p12 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_7;
$L__BB0_8:                              // %pass170
	bfe.u32 	%r121, %r1, 2, 1;
	shr.u32 	%r122, %r1, 4;
	shl.b32 	%r206, %r122, 1;
	shl.b32 	%r207, %r121, 2;
	shl.b32 	%r123, %r1, 3;
	and.b32  	%r208, %r123, 24;
	or.b32  	%r209, %r207, %r208;
	or.b32  	%r210, %r206, %r209;
	bfe.u32 	%r211, %r1, 3, 1;
	or.b32  	%r125, %r211, %r210;
	or.b32  	%r126, %r125, 32;
	mov.f32 	%f181, 0f40000000;
	mov.f32 	%f182, 0f437F0000;
	div.approx.f32 	%f153, %f182, %f181;
	cvt.rn.f32.s32 	%f183, %r125;
	sub.f32 	%f184, %f183, %f153;
	mov.f32 	%f213, 0f42800000;
	div.approx.f32 	%f155, %f184, %f213;
	setp.ne.f32 	%p18, %f155, 0f00000000;
	mov.f32 	%f881, 0f3F800000;
	mov.f32 	%f874, %f881;
	@%p18 bra 	$L__BB0_9;
	bra.uni 	$L__BB0_10;
$L__BB0_9:                              // %L573
	sin.approx.f32 	%f214, %f155;
	div.approx.f32 	%f874, %f214, %f155;
$L__BB0_10:                             // %L576
	cvt.rn.f32.s32 	%f217, %r126;
	sub.f32 	%f218, %f217, %f153;
	div.approx.f32 	%f5, %f218, %f213;
	setp.eq.f32 	%p24, %f5, 0f00000000;
	mov.f32 	%f875, %f881;
	@%p24 bra 	$L__BB0_12;
// %bb.11:                              // %L593
	sin.approx.f32 	%f248, %f5;
	div.approx.f32 	%f875, %f248, %f5;
$L__BB0_12:                             // %L596
	or.b32  	%r229, %r125, 64;
	or.b32  	%r10, %r125, 96;
	cvt.rn.f32.s32 	%f252, %r229;
	sub.f32 	%f253, %f252, %f153;
	div.approx.f32 	%f9, %f253, %f213;
	setp.eq.f32 	%p30, %f9, 0f00000000;
	mov.f32 	%f876, %f881;
	@%p30 bra 	$L__BB0_14;
// %bb.13:                              // %L675
	sin.approx.f32 	%f283, %f9;
	div.approx.f32 	%f876, %f283, %f9;
$L__BB0_14:                             // %L678
	shl.b32 	%r115, %r1, 1;
	cvt.rn.f32.s32 	%f286, %r10;
	sub.f32 	%f287, %f286, %f153;
	div.approx.f32 	%f14, %f287, %f213;
	setp.eq.f32 	%p36, %f14, 0f00000000;
	mov.f32 	%f877, %f881;
	@%p36 bra 	$L__BB0_16;
// %bb.15:                              // %L695
	sin.approx.f32 	%f317, %f14;
	div.approx.f32 	%f877, %f317, %f14;
$L__BB0_16:                             // %L698
	shl.b32 	%r114, %r1, 2;
	and.b32  	%r199, %r115, 8;
	and.b32  	%r201, %r1, 18;
	or.b32  	%r247, %r125, 128;
	or.b32  	%r12, %r125, 160;
	cvt.rn.f32.s32 	%f321, %r247;
	sub.f32 	%f322, %f321, %f153;
	div.approx.f32 	%f18, %f322, %f213;
	setp.eq.f32 	%p42, %f18, 0f00000000;
	mov.f32 	%f878, %f881;
	@%p42 bra 	$L__BB0_18;
// %bb.17:                              // %L777
	sin.approx.f32 	%f352, %f18;
	div.approx.f32 	%f878, %f352, %f18;
$L__BB0_18:                             // %L780
	and.b32  	%r198, %r114, 4;
	shl.b32 	%r200, %r2, 3;
	or.b32  	%r202, %r201, %r199;
	cvt.rn.f32.s32 	%f355, %r12;
	sub.f32 	%f356, %f355, %f153;
	div.approx.f32 	%f23, %f356, %f213;
	setp.eq.f32 	%p48, %f23, 0f00000000;
	mov.f32 	%f879, %f881;
	@%p48 bra 	$L__BB0_20;
// %bb.19:                              // %L797
	sin.approx.f32 	%f386, %f23;
	div.approx.f32 	%f879, %f386, %f23;
$L__BB0_20:                             // %L800
	and.b32  	%r116, %r200, 960;
	or.b32  	%r118, %r202, %r198;
	or.b32  	%r265, %r125, 192;
	or.b32  	%r14, %r125, 224;
	cvt.rn.f32.s32 	%f390, %r265;
	sub.f32 	%f391, %f390, %f153;
	div.approx.f32 	%f27, %f391, %f213;
	setp.eq.f32 	%p54, %f27, 0f00000000;
	mov.f32 	%f880, %f881;
	@%p54 bra 	$L__BB0_22;
// %bb.21:                              // %L879
	sin.approx.f32 	%f421, %f27;
	div.approx.f32 	%f880, %f421, %f27;
$L__BB0_22:                             // %L882
	and.b32  	%r117, %r114, 32;
	or.b32  	%r203, %r118, %r116;
	cvt.rn.f32.s32 	%f424, %r14;
	sub.f32 	%f425, %f424, %f153;
	div.approx.f32 	%f32, %f425, %f213;
	setp.eq.f32 	%p60, %f32, 0f00000000;
	@%p60 bra 	$L__BB0_24;
// %bb.23:                              // %L899
	sin.approx.f32 	%f455, %f32;
	div.approx.f32 	%f881, %f455, %f32;
$L__BB0_24:                             // %L902
	or.b32  	%r204, %r203, %r117;
	mul.lo.s32 	%r16, %r125, 63;
	cvt.rn.f32.s32 	%f458, %r16;
	div.approx.f32 	%f35, %f458, %f213;
	abs.f32 	%f884, %f35;
	setp.lt.f32 	%p61, %f884, 0f40000000;
	@%p61 bra 	$L__BB0_36;
// %bb.25:
	setp.gtu.f32 	%p62, %f884, 0f4B800000;
	@%p62 bra 	$L__BB0_32;
	bra.uni 	$L__BB0_26;
$L__BB0_32:
	mov.b32 	%r18, %f884;
	and.b32  	%r283, %r18, 8388607;
	or.b32  	%r7998, %r283, 1065353216;
	mov.b32 	%f883, %r7998;
	add.s32 	%r284, %r18, -1073741824;
	and.b32  	%r7999, %r284, -8388608;
	setp.eq.s32 	%p68, %r7999, 0;
	@%p68 bra 	$L__BB0_35;
// %bb.33:                              // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f469, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f468,%f469;
	// end inline asm
$L__BB0_34:                             // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r285, %r7999, 192937984;
	add.s32 	%r286, %r7998, %r285;
	mov.b32 	%f470, %r286;
	mul.f32 	%f471, %f468, %f470;
	sub.f32 	%f472, %f470, %f471;
	fma.rn.f32 	%f473, %f472, %f468, %f471;
	sub.f32 	%f474, %f470, %f473;
	fma.rz.f32 	%f475, %f474, %f468, %f473;
	cvt.rzi.f32.f32 	%f476, %f475;
	sub.f32 	%f883, %f470, %f476;
	sub.s32 	%r7999, %r7999, %r285;
	mov.b32 	%r7998, %f883;
	setp.ne.s32 	%p69, %r7999, 0;
	setp.ne.s32 	%p70, %r7998, 0;
	and.pred  	%p71, %p69, %p70;
	@%p71 bra 	$L__BB0_34;
$L__BB0_35:                             // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p72, %r18, 2139095039;
	selp.f32 	%f477, 0f7FFFFFFF, 0f4B800000, %p72;
	mul.f32 	%f478, %f883, 0f34000000;
	mul.f32 	%f884, %f477, %f478;
	bra.uni 	$L__BB0_36;
$L__BB0_26:                             // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f461, %f884, %f181;
	cvt.rzi.f32.f32 	%f882, %f461;
	fma.rn.f32 	%f38, %f882, 0fC0000000, %f884;
	mov.b32 	%r17, %f38;
	setp.lt.u32 	%p63, %r17, 1073741824;
	@%p63 bra 	$L__BB0_31;
// %bb.27:
	setp.lt.u32 	%p64, %r17, -2147483647;
	@%p64 bra 	$L__BB0_29;
// %bb.28:
	add.f32 	%f466, %f882, 0fBF800000;
	setp.lt.f32 	%p67, %f38, 0fC0000000;
	add.f32 	%f467, %f466, 0fBF800000;
	selp.f32 	%f882, %f467, %f466, %p67;
	bra.uni 	$L__BB0_31;
$L__BB0_29:
	add.f32 	%f882, %f882, 0f3F800000;
	setp.ltu.f32 	%p65, %f38, 0f40800000;
	@%p65 bra 	$L__BB0_31;
// %bb.30:                              // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f462, %f882, 0f3F800000;
	fma.rn.f32 	%f464, %f181, 0fC0400000, %f38;
	setp.ge.f32 	%p66, %f464, 0f00000000;
	add.f32 	%f465, %f462, 0f3F800000;
	selp.f32 	%f882, %f465, %f462, %p66;
$L__BB0_31:                             // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f884, %f882, 0fC0000000, %f884;
$L__BB0_36:                             // %__internal_fmodf_kernel.exit.i
	shr.u32 	%r205, %r204, 1;
	abs.f32 	%f479, %f884;
	setp.gtu.f32 	%p73, %f479, 0f7F800000;
	@%p73 bra 	$L__BB0_38;
// %bb.37:
	mov.b32 	%r287, %f35;
	and.b32  	%r288, %r287, -2147483648;
	mov.b32 	%r289, %f884;
	or.b32  	%r290, %r288, %r289;
	mov.b32 	%f884, %r290;
$L__BB0_38:                             // %__nv_fmodf.exit
	ld.param.u64 	%rd1, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5];
	mul.wide.u32 	%rd59, %r205, 4;
	add.s32 	%r299, %r16, 2016;
	cvt.rn.f32.s32 	%f510, %r299;
	div.approx.f32 	%f54, %f510, %f213;
	abs.f32 	%f888, %f54;
	setp.lt.f32 	%p81, %f888, 0f40000000;
	@%p81 bra 	$L__BB0_50;
// %bb.39:
	setp.gtu.f32 	%p82, %f888, 0f4B800000;
	@%p82 bra 	$L__BB0_46;
	bra.uni 	$L__BB0_40;
$L__BB0_46:
	mov.b32 	%r26, %f888;
	and.b32  	%r300, %r26, 8388607;
	or.b32  	%r8000, %r300, 1065353216;
	mov.b32 	%f887, %r8000;
	add.s32 	%r301, %r26, -1073741824;
	and.b32  	%r8001, %r301, -8388608;
	setp.eq.s32 	%p88, %r8001, 0;
	@%p88 bra 	$L__BB0_49;
// %bb.47:                              // %__nv_fmaf_rn.exit4.i.i.i897.preheader
	mov.f32 	%f521, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f520,%f521;
	// end inline asm
$L__BB0_48:                             // %__nv_fmaf_rn.exit4.i.i.i897
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r302, %r8001, 192937984;
	add.s32 	%r303, %r8000, %r302;
	mov.b32 	%f522, %r303;
	mul.f32 	%f523, %f520, %f522;
	sub.f32 	%f524, %f522, %f523;
	fma.rn.f32 	%f525, %f524, %f520, %f523;
	sub.f32 	%f526, %f522, %f525;
	fma.rz.f32 	%f527, %f526, %f520, %f525;
	cvt.rzi.f32.f32 	%f528, %f527;
	sub.f32 	%f887, %f522, %f528;
	sub.s32 	%r8001, %r8001, %r302;
	mov.b32 	%r8000, %f887;
	setp.ne.s32 	%p89, %r8001, 0;
	setp.ne.s32 	%p90, %r8000, 0;
	and.pred  	%p91, %p89, %p90;
	@%p91 bra 	$L__BB0_48;
$L__BB0_49:                             // %__internal_fmodf_slowpath_mod.exit.i.i899
	setp.gt.u32 	%p92, %r26, 2139095039;
	selp.f32 	%f529, 0f7FFFFFFF, 0f4B800000, %p92;
	mul.f32 	%f530, %f887, 0f34000000;
	mul.f32 	%f888, %f529, %f530;
	bra.uni 	$L__BB0_50;
$L__BB0_40:                             // %__nv_fast_fdividef.exit.i.i.i876
	div.approx.f32 	%f513, %f888, %f181;
	cvt.rzi.f32.f32 	%f886, %f513;
	fma.rn.f32 	%f57, %f886, 0fC0000000, %f888;
	mov.b32 	%r25, %f57;
	setp.lt.u32 	%p83, %r25, 1073741824;
	@%p83 bra 	$L__BB0_45;
// %bb.41:
	setp.lt.u32 	%p84, %r25, -2147483647;
	@%p84 bra 	$L__BB0_43;
// %bb.42:
	add.f32 	%f518, %f886, 0fBF800000;
	setp.lt.f32 	%p87, %f57, 0fC0000000;
	add.f32 	%f519, %f518, 0fBF800000;
	selp.f32 	%f886, %f519, %f518, %p87;
	bra.uni 	$L__BB0_45;
$L__BB0_43:
	add.f32 	%f886, %f886, 0f3F800000;
	setp.ltu.f32 	%p85, %f57, 0f40800000;
	@%p85 bra 	$L__BB0_45;
// %bb.44:                              // %__nv_fmaf_rn.exit.i.i.i880
	add.f32 	%f514, %f886, 0f3F800000;
	fma.rn.f32 	%f516, %f181, 0fC0400000, %f57;
	setp.ge.f32 	%p86, %f516, 0f00000000;
	add.f32 	%f517, %f514, 0f3F800000;
	selp.f32 	%f886, %f517, %f514, %p86;
$L__BB0_45:                             // %__internal_fmodf_fastpath_quot.exit.i.i883
	fma.rn.f32 	%f888, %f886, 0fC0000000, %f888;
$L__BB0_50:                             // %__internal_fmodf_kernel.exit.i902
	add.s64 	%rd60, %rd1, %rd59;
	abs.f32 	%f531, %f888;
	setp.gtu.f32 	%p93, %f531, 0f7F800000;
	@%p93 bra 	$L__BB0_52;
// %bb.51:
	mov.b32 	%r304, %f54;
	and.b32  	%r305, %r304, -2147483648;
	mov.b32 	%r306, %f888;
	or.b32  	%r307, %r305, %r306;
	mov.b32 	%f888, %r307;
$L__BB0_52:                             // %__nv_fmodf.exit903
	ld.global.u32 	%r119, [%rd60];
	mov.u64 	%rd61, 2;
	mov.u64 	%rd62, 6;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r187;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd61;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd62;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11706, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd63, [retval0+0];
	} // callseq 2
	setp.eq.s64 	%p101, %rd63, 64;
	@%p101 bra 	$L__BB0_54;
	bra.uni 	$L__BB0_53;
$L__BB0_54:                             // %pass326
	shr.u32 	%r120, %r1, 1;
	shr.u32 	%r124, %r1, 3;
	and.b32  	%r322, %r1, 3;
	and.b32  	%r323, %r124, 2;
	or.b32  	%r324, %r121, %r323;
	and.b32  	%r325, %r120, 4;
	or.b32  	%r127, %r324, %r325;
	mul.lo.s32 	%r326, %r322, %r127;
	shl.b32 	%r327, %r326, 1;
	neg.s32 	%r328, %r327;
	cvt.rn.f32.s32 	%f156, %r328;
	mov.f32 	%f564, 0f41000000;
	div.approx.f32 	%f157, %f156, %f564;
	abs.f32 	%f904, %f157;
	setp.lt.f32 	%p102, %f904, 0f40000000;
	mov.f32 	%f892, %f904;
	@%p102 bra 	$L__BB0_66;
// %bb.55:
	setp.gtu.f32 	%p103, %f904, 0f4B800000;
	@%p103 bra 	$L__BB0_62;
	bra.uni 	$L__BB0_56;
$L__BB0_62:
	mov.b32 	%r36, %f904;
	and.b32  	%r329, %r36, 8388607;
	or.b32  	%r8002, %r329, 1065353216;
	mov.b32 	%f891, %r8002;
	add.s32 	%r330, %r36, -1073741824;
	and.b32  	%r8003, %r330, -8388608;
	setp.eq.s32 	%p109, %r8003, 0;
	@%p109 bra 	$L__BB0_65;
// %bb.63:                              // %__nv_fmaf_rn.exit4.i.i.i928.preheader
	mov.f32 	%f574, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f573,%f574;
	// end inline asm
$L__BB0_64:                             // %__nv_fmaf_rn.exit4.i.i.i928
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r331, %r8003, 192937984;
	add.s32 	%r332, %r8002, %r331;
	mov.b32 	%f575, %r332;
	mul.f32 	%f576, %f573, %f575;
	sub.f32 	%f577, %f575, %f576;
	fma.rn.f32 	%f578, %f577, %f573, %f576;
	sub.f32 	%f579, %f575, %f578;
	fma.rz.f32 	%f580, %f579, %f573, %f578;
	cvt.rzi.f32.f32 	%f581, %f580;
	sub.f32 	%f891, %f575, %f581;
	sub.s32 	%r8003, %r8003, %r331;
	mov.b32 	%r8002, %f891;
	setp.ne.s32 	%p110, %r8003, 0;
	setp.ne.s32 	%p111, %r8002, 0;
	and.pred  	%p112, %p110, %p111;
	@%p112 bra 	$L__BB0_64;
$L__BB0_65:                             // %__internal_fmodf_slowpath_mod.exit.i.i930
	setp.gt.u32 	%p113, %r36, 2139095039;
	selp.f32 	%f582, 0f7FFFFFFF, 0f4B800000, %p113;
	mul.f32 	%f583, %f891, 0f34000000;
	mul.f32 	%f892, %f582, %f583;
	bra.uni 	$L__BB0_66;
$L__BB0_56:                             // %__nv_fast_fdividef.exit.i.i.i907
	div.approx.f32 	%f566, %f904, %f181;
	cvt.rzi.f32.f32 	%f890, %f566;
	fma.rn.f32 	%f72, %f890, 0fC0000000, %f904;
	mov.b32 	%r35, %f72;
	setp.lt.u32 	%p104, %r35, 1073741824;
	@%p104 bra 	$L__BB0_61;
// %bb.57:
	setp.lt.u32 	%p105, %r35, -2147483647;
	@%p105 bra 	$L__BB0_59;
// %bb.58:
	add.f32 	%f571, %f890, 0fBF800000;
	setp.lt.f32 	%p108, %f72, 0fC0000000;
	add.f32 	%f572, %f571, 0fBF800000;
	selp.f32 	%f890, %f572, %f571, %p108;
	bra.uni 	$L__BB0_61;
$L__BB0_59:
	add.f32 	%f890, %f890, 0f3F800000;
	setp.ltu.f32 	%p106, %f72, 0f40800000;
	@%p106 bra 	$L__BB0_61;
// %bb.60:                              // %__nv_fmaf_rn.exit.i.i.i911
	add.f32 	%f567, %f890, 0f3F800000;
	fma.rn.f32 	%f569, %f181, 0fC0400000, %f72;
	setp.ge.f32 	%p107, %f569, 0f00000000;
	add.f32 	%f570, %f567, 0f3F800000;
	selp.f32 	%f890, %f570, %f567, %p107;
$L__BB0_61:                             // %__internal_fmodf_fastpath_quot.exit.i.i914
	fma.rn.f32 	%f892, %f890, 0fC0000000, %f904;
$L__BB0_66:                             // %__internal_fmodf_kernel.exit.i933
	abs.f32 	%f584, %f892;
	setp.gtu.f32 	%p114, %f584, 0f7F800000;
	mov.b32 	%r333, %f157;
	and.b32  	%r43, %r333, -2147483648;
	@%p114 bra 	$L__BB0_68;
// %bb.67:
	mov.b32 	%r334, %f892;
	or.b32  	%r335, %r43, %r334;
	mov.b32 	%f892, %r335;
$L__BB0_68:                             // %__nv_fmodf.exit934
	and.b32  	%r344, %r115, 6;
	mov.u32 	%r345, -8;
	sub.s32 	%r346, %r345, %r344;
	mul.lo.s32 	%r347, %r127, %r346;
	cvt.rn.f32.s32 	%f88, %r347;
	div.approx.f32 	%f89, %f88, %f564;
	abs.f32 	%f908, %f89;
	setp.lt.f32 	%p122, %f908, 0f40000000;
	mov.f32 	%f896, %f908;
	@%p122 bra 	$L__BB0_80;
// %bb.69:
	setp.gtu.f32 	%p123, %f908, 0f4B800000;
	@%p123 bra 	$L__BB0_76;
	bra.uni 	$L__BB0_70;
$L__BB0_76:
	mov.b32 	%r45, %f908;
	and.b32  	%r348, %r45, 8388607;
	or.b32  	%r8004, %r348, 1065353216;
	mov.b32 	%f895, %r8004;
	add.s32 	%r349, %r45, -1073741824;
	and.b32  	%r8005, %r349, -8388608;
	setp.eq.s32 	%p129, %r8005, 0;
	@%p129 bra 	$L__BB0_79;
// %bb.77:                              // %__nv_fmaf_rn.exit4.i.i.i959.preheader
	mov.f32 	%f625, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f624,%f625;
	// end inline asm
$L__BB0_78:                             // %__nv_fmaf_rn.exit4.i.i.i959
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r350, %r8005, 192937984;
	add.s32 	%r351, %r8004, %r350;
	mov.b32 	%f626, %r351;
	mul.f32 	%f627, %f624, %f626;
	sub.f32 	%f628, %f626, %f627;
	fma.rn.f32 	%f629, %f628, %f624, %f627;
	sub.f32 	%f630, %f626, %f629;
	fma.rz.f32 	%f631, %f630, %f624, %f629;
	cvt.rzi.f32.f32 	%f632, %f631;
	sub.f32 	%f895, %f626, %f632;
	sub.s32 	%r8005, %r8005, %r350;
	mov.b32 	%r8004, %f895;
	setp.ne.s32 	%p130, %r8005, 0;
	setp.ne.s32 	%p131, %r8004, 0;
	and.pred  	%p132, %p130, %p131;
	@%p132 bra 	$L__BB0_78;
$L__BB0_79:                             // %__internal_fmodf_slowpath_mod.exit.i.i961
	setp.gt.u32 	%p133, %r45, 2139095039;
	selp.f32 	%f633, 0f7FFFFFFF, 0f4B800000, %p133;
	mul.f32 	%f634, %f895, 0f34000000;
	mul.f32 	%f896, %f633, %f634;
	bra.uni 	$L__BB0_80;
$L__BB0_70:                             // %__nv_fast_fdividef.exit.i.i.i938
	div.approx.f32 	%f617, %f908, %f181;
	cvt.rzi.f32.f32 	%f894, %f617;
	fma.rn.f32 	%f92, %f894, 0fC0000000, %f908;
	mov.b32 	%r44, %f92;
	setp.lt.u32 	%p124, %r44, 1073741824;
	@%p124 bra 	$L__BB0_75;
// %bb.71:
	setp.lt.u32 	%p125, %r44, -2147483647;
	@%p125 bra 	$L__BB0_73;
// %bb.72:
	add.f32 	%f622, %f894, 0fBF800000;
	setp.lt.f32 	%p128, %f92, 0fC0000000;
	add.f32 	%f623, %f622, 0fBF800000;
	selp.f32 	%f894, %f623, %f622, %p128;
	bra.uni 	$L__BB0_75;
$L__BB0_73:
	add.f32 	%f894, %f894, 0f3F800000;
	setp.ltu.f32 	%p126, %f92, 0f40800000;
	@%p126 bra 	$L__BB0_75;
// %bb.74:                              // %__nv_fmaf_rn.exit.i.i.i942
	add.f32 	%f618, %f894, 0f3F800000;
	fma.rn.f32 	%f620, %f181, 0fC0400000, %f92;
	setp.ge.f32 	%p127, %f620, 0f00000000;
	add.f32 	%f621, %f618, 0f3F800000;
	selp.f32 	%f894, %f621, %f618, %p127;
$L__BB0_75:                             // %__internal_fmodf_fastpath_quot.exit.i.i945
	fma.rn.f32 	%f896, %f894, 0fC0000000, %f908;
$L__BB0_80:                             // %__internal_fmodf_kernel.exit.i964
	abs.f32 	%f635, %f896;
	setp.gtu.f32 	%p134, %f635, 0f7F800000;
	mov.b32 	%r352, %f89;
	and.b32  	%r52, %r352, -2147483648;
	@%p134 bra 	$L__BB0_82;
// %bb.81:
	mov.b32 	%r353, %f896;
	or.b32  	%r354, %r52, %r353;
	mov.b32 	%f896, %r354;
$L__BB0_82:                             // %__nv_fmodf.exit965
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r187;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd61;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd62;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11706, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd69, [retval0+0];
	} // callseq 6
	setp.eq.s64 	%p142, %rd69, 64;
	@%p142 bra 	$L__BB0_135;
	bra.uni 	$L__BB0_83;
$L__BB0_135:                            // %pass403
	{ // callseq 10, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r187;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd61;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd62;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11706, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd75, [retval0+0];
	} // callseq 10
	cvt.rn.f32.s64 	%f668, %rd75;
	div.approx.f32 	%f159, %f156, %f668;
	abs.f32 	%f912, %f159;
	setp.lt.f32 	%p143, %f912, 0f40000000;
	@%p143 bra 	$L__BB0_147;
// %bb.136:
	setp.gtu.f32 	%p144, %f912, 0f4B800000;
	@%p144 bra 	$L__BB0_143;
	bra.uni 	$L__BB0_137;
$L__BB0_143:
	mov.b32 	%r129, %f912;
	and.b32  	%r375, %r129, 8388607;
	or.b32  	%r8025, %r375, 1065353216;
	mov.b32 	%f911, %r8025;
	add.s32 	%r376, %r129, -1073741824;
	and.b32  	%r8026, %r376, -8388608;
	setp.eq.s32 	%p150, %r8026, 0;
	@%p150 bra 	$L__BB0_146;
// %bb.144:                             // %__nv_fmaf_rn.exit4.i.i.i1083.preheader
	mov.f32 	%f678, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f677,%f678;
	// end inline asm
$L__BB0_145:                            // %__nv_fmaf_rn.exit4.i.i.i1083
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r377, %r8026, 192937984;
	add.s32 	%r378, %r8025, %r377;
	mov.b32 	%f679, %r378;
	mul.f32 	%f680, %f677, %f679;
	sub.f32 	%f681, %f679, %f680;
	fma.rn.f32 	%f682, %f681, %f677, %f680;
	sub.f32 	%f683, %f679, %f682;
	fma.rz.f32 	%f684, %f683, %f677, %f682;
	cvt.rzi.f32.f32 	%f685, %f684;
	sub.f32 	%f911, %f679, %f685;
	sub.s32 	%r8026, %r8026, %r377;
	mov.b32 	%r8025, %f911;
	setp.ne.s32 	%p151, %r8026, 0;
	setp.ne.s32 	%p152, %r8025, 0;
	and.pred  	%p153, %p151, %p152;
	@%p153 bra 	$L__BB0_145;
$L__BB0_146:                            // %__internal_fmodf_slowpath_mod.exit.i.i1085
	setp.gt.u32 	%p154, %r129, 2139095039;
	selp.f32 	%f686, 0f7FFFFFFF, 0f4B800000, %p154;
	mul.f32 	%f687, %f911, 0f34000000;
	mul.f32 	%f912, %f686, %f687;
	bra.uni 	$L__BB0_147;
$L__BB0_137:                            // %__nv_fast_fdividef.exit.i.i.i1062
	div.approx.f32 	%f670, %f912, %f181;
	cvt.rzi.f32.f32 	%f910, %f670;
	fma.rn.f32 	%f162, %f910, 0fC0000000, %f912;
	mov.b32 	%r128, %f162;
	setp.lt.u32 	%p145, %r128, 1073741824;
	@%p145 bra 	$L__BB0_142;
// %bb.138:
	setp.lt.u32 	%p146, %r128, -2147483647;
	@%p146 bra 	$L__BB0_140;
// %bb.139:
	add.f32 	%f675, %f910, 0fBF800000;
	setp.lt.f32 	%p149, %f162, 0fC0000000;
	add.f32 	%f676, %f675, 0fBF800000;
	selp.f32 	%f910, %f676, %f675, %p149;
	bra.uni 	$L__BB0_142;
$L__BB0_140:
	add.f32 	%f910, %f910, 0f3F800000;
	setp.ltu.f32 	%p147, %f162, 0f40800000;
	@%p147 bra 	$L__BB0_142;
// %bb.141:                             // %__nv_fmaf_rn.exit.i.i.i1066
	add.f32 	%f671, %f910, 0f3F800000;
	fma.rn.f32 	%f673, %f181, 0fC0400000, %f162;
	setp.ge.f32 	%p148, %f673, 0f00000000;
	add.f32 	%f674, %f671, 0f3F800000;
	selp.f32 	%f910, %f674, %f671, %p148;
$L__BB0_142:                            // %__internal_fmodf_fastpath_quot.exit.i.i1069
	fma.rn.f32 	%f912, %f910, 0fC0000000, %f912;
$L__BB0_147:                            // %__internal_fmodf_kernel.exit.i1088
	abs.f32 	%f688, %f912;
	setp.gtu.f32 	%p155, %f688, 0f7F800000;
	@%p155 bra 	$L__BB0_149;
// %bb.148:
	mov.b32 	%r379, %f159;
	and.b32  	%r380, %r379, -2147483648;
	mov.b32 	%r381, %f912;
	or.b32  	%r382, %r380, %r381;
	mov.b32 	%f912, %r382;
$L__BB0_149:                            // %__nv_fmodf.exit1089
	{ // callseq 11, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r187;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd61;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd62;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11706, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd79, [retval0+0];
	} // callseq 11
	cvt.rn.f32.s64 	%f719, %rd79;
	div.approx.f32 	%f178, %f88, %f719;
	abs.f32 	%f900, %f178;
	setp.lt.f32 	%p163, %f900, 0f40000000;
	@%p163 bra 	$L__BB0_95;
// %bb.84:
	setp.gtu.f32 	%p164, %f900, 0f4B800000;
	@%p164 bra 	$L__BB0_91;
	bra.uni 	$L__BB0_85;
$L__BB0_91:
	mov.b32 	%r58, %f900;
	and.b32  	%r391, %r58, 8388607;
	or.b32  	%r8006, %r391, 1065353216;
	mov.b32 	%f899, %r8006;
	add.s32 	%r392, %r58, -1073741824;
	and.b32  	%r8007, %r392, -8388608;
	setp.eq.s32 	%p170, %r8007, 0;
	@%p170 bra 	$L__BB0_94;
// %bb.92:                              // %__nv_fmaf_rn.exit4.i.i.i990.preheader
	mov.f32 	%f729, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f728,%f729;
	// end inline asm
$L__BB0_93:                             // %__nv_fmaf_rn.exit4.i.i.i990
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r393, %r8007, 192937984;
	add.s32 	%r394, %r8006, %r393;
	mov.b32 	%f730, %r394;
	mul.f32 	%f731, %f728, %f730;
	sub.f32 	%f732, %f730, %f731;
	fma.rn.f32 	%f733, %f732, %f728, %f731;
	sub.f32 	%f734, %f730, %f733;
	fma.rz.f32 	%f735, %f734, %f728, %f733;
	cvt.rzi.f32.f32 	%f736, %f735;
	sub.f32 	%f899, %f730, %f736;
	sub.s32 	%r8007, %r8007, %r393;
	mov.b32 	%r8006, %f899;
	setp.ne.s32 	%p171, %r8007, 0;
	setp.ne.s32 	%p172, %r8006, 0;
	and.pred  	%p173, %p171, %p172;
	@%p173 bra 	$L__BB0_93;
$L__BB0_94:                             // %__internal_fmodf_slowpath_mod.exit.i.i992
	setp.gt.u32 	%p174, %r58, 2139095039;
	selp.f32 	%f737, 0f7FFFFFFF, 0f4B800000, %p174;
	mul.f32 	%f738, %f899, 0f34000000;
	mul.f32 	%f900, %f737, %f738;
	bra.uni 	$L__BB0_95;
$L__BB0_85:                             // %__nv_fast_fdividef.exit.i.i.i969
	div.approx.f32 	%f721, %f900, %f181;
	cvt.rzi.f32.f32 	%f898, %f721;
	fma.rn.f32 	%f107, %f898, 0fC0000000, %f900;
	mov.b32 	%r57, %f107;
	setp.lt.u32 	%p165, %r57, 1073741824;
	@%p165 bra 	$L__BB0_90;
// %bb.86:
	setp.lt.u32 	%p166, %r57, -2147483647;
	@%p166 bra 	$L__BB0_88;
// %bb.87:
	add.f32 	%f726, %f898, 0fBF800000;
	setp.lt.f32 	%p169, %f107, 0fC0000000;
	add.f32 	%f727, %f726, 0fBF800000;
	selp.f32 	%f898, %f727, %f726, %p169;
	bra.uni 	$L__BB0_90;
$L__BB0_88:
	add.f32 	%f898, %f898, 0f3F800000;
	setp.ltu.f32 	%p167, %f107, 0f40800000;
	@%p167 bra 	$L__BB0_90;
// %bb.89:                              // %__nv_fmaf_rn.exit.i.i.i973
	add.f32 	%f722, %f898, 0f3F800000;
	fma.rn.f32 	%f724, %f181, 0fC0400000, %f107;
	setp.ge.f32 	%p168, %f724, 0f00000000;
	add.f32 	%f725, %f722, 0f3F800000;
	selp.f32 	%f898, %f725, %f722, %p168;
$L__BB0_90:                             // %__internal_fmodf_fastpath_quot.exit.i.i976
	fma.rn.f32 	%f900, %f898, 0fC0000000, %f900;
$L__BB0_95:                             // %__internal_fmodf_kernel.exit.i995
	abs.f32 	%f739, %f900;
	setp.gtu.f32 	%p175, %f739, 0f7F800000;
	@%p175 bra 	$L__BB0_97;
// %bb.96:
	mov.b32 	%r395, %f178;
	and.b32  	%r396, %r395, -2147483648;
	mov.b32 	%r397, %f900;
	or.b32  	%r398, %r396, %r397;
	mov.b32 	%f900, %r398;
$L__BB0_97:                             // %__nv_fmodf.exit996
	{ // callseq 12, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r187;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd61;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd62;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11706, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd83, [retval0+0];
	} // callseq 12
	setp.eq.s64 	%p183, %rd83, 64;
	@%p183 bra 	$L__BB0_99;
	bra.uni 	$L__BB0_98;
$L__BB0_99:                             // %pass468
	@%p102 bra 	$L__BB0_111;
// %bb.100:
	setp.gtu.f32 	%p185, %f904, 0f4B800000;
	@%p185 bra 	$L__BB0_107;
	bra.uni 	$L__BB0_101;
$L__BB0_107:
	mov.b32 	%r68, %f904;
	and.b32  	%r413, %r68, 8388607;
	or.b32  	%r8008, %r413, 1065353216;
	mov.b32 	%f903, %r8008;
	add.s32 	%r414, %r68, -1073741824;
	and.b32  	%r8009, %r414, -8388608;
	setp.eq.s32 	%p191, %r8009, 0;
	@%p191 bra 	$L__BB0_110;
// %bb.108:                             // %__nv_fmaf_rn.exit4.i.i.i1021.preheader
	mov.f32 	%f781, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f780,%f781;
	// end inline asm
$L__BB0_109:                            // %__nv_fmaf_rn.exit4.i.i.i1021
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r415, %r8009, 192937984;
	add.s32 	%r416, %r8008, %r415;
	mov.b32 	%f782, %r416;
	mul.f32 	%f783, %f780, %f782;
	sub.f32 	%f784, %f782, %f783;
	fma.rn.f32 	%f785, %f784, %f780, %f783;
	sub.f32 	%f786, %f782, %f785;
	fma.rz.f32 	%f787, %f786, %f780, %f785;
	cvt.rzi.f32.f32 	%f788, %f787;
	sub.f32 	%f903, %f782, %f788;
	sub.s32 	%r8009, %r8009, %r415;
	mov.b32 	%r8008, %f903;
	setp.ne.s32 	%p192, %r8009, 0;
	setp.ne.s32 	%p193, %r8008, 0;
	and.pred  	%p194, %p192, %p193;
	@%p194 bra 	$L__BB0_109;
$L__BB0_110:                            // %__internal_fmodf_slowpath_mod.exit.i.i1023
	setp.gt.u32 	%p195, %r68, 2139095039;
	selp.f32 	%f789, 0f7FFFFFFF, 0f4B800000, %p195;
	mul.f32 	%f790, %f903, 0f34000000;
	mul.f32 	%f904, %f789, %f790;
	bra.uni 	$L__BB0_111;
$L__BB0_101:                            // %__nv_fast_fdividef.exit.i.i.i1000
	div.approx.f32 	%f773, %f904, %f181;
	cvt.rzi.f32.f32 	%f902, %f773;
	fma.rn.f32 	%f122, %f902, 0fC0000000, %f904;
	mov.b32 	%r67, %f122;
	setp.lt.u32 	%p186, %r67, 1073741824;
	@%p186 bra 	$L__BB0_106;
// %bb.102:
	setp.lt.u32 	%p187, %r67, -2147483647;
	@%p187 bra 	$L__BB0_104;
// %bb.103:
	add.f32 	%f778, %f902, 0fBF800000;
	setp.lt.f32 	%p190, %f122, 0fC0000000;
	add.f32 	%f779, %f778, 0fBF800000;
	selp.f32 	%f902, %f779, %f778, %p190;
	bra.uni 	$L__BB0_106;
$L__BB0_104:
	add.f32 	%f902, %f902, 0f3F800000;
	setp.ltu.f32 	%p188, %f122, 0f40800000;
	@%p188 bra 	$L__BB0_106;
// %bb.105:                             // %__nv_fmaf_rn.exit.i.i.i1004
	add.f32 	%f774, %f902, 0f3F800000;
	fma.rn.f32 	%f776, %f181, 0fC0400000, %f122;
	setp.ge.f32 	%p189, %f776, 0f00000000;
	add.f32 	%f777, %f774, 0f3F800000;
	selp.f32 	%f902, %f777, %f774, %p189;
$L__BB0_106:                            // %__internal_fmodf_fastpath_quot.exit.i.i1007
	fma.rn.f32 	%f904, %f902, 0fC0000000, %f904;
$L__BB0_111:                            // %__internal_fmodf_kernel.exit.i1026
	abs.f32 	%f791, %f904;
	setp.gtu.f32 	%p196, %f791, 0f7F800000;
	@%p196 bra 	$L__BB0_113;
// %bb.112:
	mov.b32 	%r417, %f904;
	or.b32  	%r418, %r43, %r417;
	mov.b32 	%f904, %r418;
$L__BB0_113:                            // %__nv_fmodf.exit1027
	@%p122 bra 	$L__BB0_125;
// %bb.114:
	setp.gtu.f32 	%p205, %f908, 0f4B800000;
	@%p205 bra 	$L__BB0_121;
	bra.uni 	$L__BB0_115;
$L__BB0_121:
	mov.b32 	%r76, %f908;
	and.b32  	%r427, %r76, 8388607;
	or.b32  	%r8010, %r427, 1065353216;
	mov.b32 	%f907, %r8010;
	add.s32 	%r428, %r76, -1073741824;
	and.b32  	%r8011, %r428, -8388608;
	setp.eq.s32 	%p211, %r8011, 0;
	@%p211 bra 	$L__BB0_124;
// %bb.122:                             // %__nv_fmaf_rn.exit4.i.i.i1052.preheader
	mov.f32 	%f831, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f830,%f831;
	// end inline asm
$L__BB0_123:                            // %__nv_fmaf_rn.exit4.i.i.i1052
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r429, %r8011, 192937984;
	add.s32 	%r430, %r8010, %r429;
	mov.b32 	%f832, %r430;
	mul.f32 	%f833, %f830, %f832;
	sub.f32 	%f834, %f832, %f833;
	fma.rn.f32 	%f835, %f834, %f830, %f833;
	sub.f32 	%f836, %f832, %f835;
	fma.rz.f32 	%f837, %f836, %f830, %f835;
	cvt.rzi.f32.f32 	%f838, %f837;
	sub.f32 	%f907, %f832, %f838;
	sub.s32 	%r8011, %r8011, %r429;
	mov.b32 	%r8010, %f907;
	setp.ne.s32 	%p212, %r8011, 0;
	setp.ne.s32 	%p213, %r8010, 0;
	and.pred  	%p214, %p212, %p213;
	@%p214 bra 	$L__BB0_123;
$L__BB0_124:                            // %__internal_fmodf_slowpath_mod.exit.i.i1054
	setp.gt.u32 	%p215, %r76, 2139095039;
	selp.f32 	%f839, 0f7FFFFFFF, 0f4B800000, %p215;
	mul.f32 	%f840, %f907, 0f34000000;
	mul.f32 	%f908, %f839, %f840;
	bra.uni 	$L__BB0_125;
$L__BB0_115:                            // %__nv_fast_fdividef.exit.i.i.i1031
	div.approx.f32 	%f823, %f908, %f181;
	cvt.rzi.f32.f32 	%f906, %f823;
	fma.rn.f32 	%f139, %f906, 0fC0000000, %f908;
	mov.b32 	%r75, %f139;
	setp.lt.u32 	%p206, %r75, 1073741824;
	@%p206 bra 	$L__BB0_120;
// %bb.116:
	setp.lt.u32 	%p207, %r75, -2147483647;
	@%p207 bra 	$L__BB0_118;
// %bb.117:
	add.f32 	%f828, %f906, 0fBF800000;
	setp.lt.f32 	%p210, %f139, 0fC0000000;
	add.f32 	%f829, %f828, 0fBF800000;
	selp.f32 	%f906, %f829, %f828, %p210;
	bra.uni 	$L__BB0_120;
$L__BB0_118:
	add.f32 	%f906, %f906, 0f3F800000;
	setp.ltu.f32 	%p208, %f139, 0f40800000;
	@%p208 bra 	$L__BB0_120;
// %bb.119:                             // %__nv_fmaf_rn.exit.i.i.i1035
	add.f32 	%f824, %f906, 0f3F800000;
	fma.rn.f32 	%f826, %f181, 0fC0400000, %f139;
	setp.ge.f32 	%p209, %f826, 0f00000000;
	add.f32 	%f827, %f824, 0f3F800000;
	selp.f32 	%f906, %f827, %f824, %p209;
$L__BB0_120:                            // %__internal_fmodf_fastpath_quot.exit.i.i1038
	fma.rn.f32 	%f908, %f906, 0fC0000000, %f908;
$L__BB0_125:                            // %__internal_fmodf_kernel.exit.i1057
	abs.f32 	%f841, %f908;
	setp.gtu.f32 	%p216, %f841, 0f7F800000;
	@%p216 bra 	$L__BB0_127;
// %bb.126:
	mov.b32 	%r431, %f908;
	or.b32  	%r432, %r52, %r431;
	mov.b32 	%f908, %r432;
$L__BB0_127:                            // %__nv_fmodf.exit1058
	setp.le.s32 	%p224, %r6, %r5;
	mov.u32 	%r7995, 0;
	@%p224 bra 	$L__BB0_154;
// %bb.128:                             // %L1562.lr.ph
	mov.f32 	%f185, 0f43808000;
	div.approx.f32 	%f186, %f184, %f185;
	div.approx.f32 	%f220, %f218, %f185;
	div.approx.f32 	%f255, %f253, %f185;
	div.approx.f32 	%f289, %f287, %f185;
	div.approx.f32 	%f324, %f322, %f185;
	div.approx.f32 	%f358, %f356, %f185;
	div.approx.f32 	%f393, %f391, %f185;
	div.approx.f32 	%f427, %f425, %f185;
	abs.f32 	%f187, %f186;
	abs.f32 	%f221, %f220;
	abs.f32 	%f256, %f255;
	abs.f32 	%f290, %f289;
	abs.f32 	%f325, %f324;
	abs.f32 	%f359, %f358;
	abs.f32 	%f394, %f393;
	abs.f32 	%f428, %f427;
	setp.gt.f32 	%p13, %f187, 0f4B800000;
	mul.f32 	%f188, %f186, 0f00000000;
	setp.gt.f32 	%p19, %f221, 0f4B800000;
	mul.f32 	%f222, %f220, 0f00000000;
	setp.gt.f32 	%p25, %f256, 0f4B800000;
	mul.f32 	%f257, %f255, 0f00000000;
	setp.gt.f32 	%p31, %f290, 0f4B800000;
	mul.f32 	%f291, %f289, 0f00000000;
	setp.gt.f32 	%p37, %f325, 0f4B800000;
	mul.f32 	%f326, %f324, 0f00000000;
	setp.gt.f32 	%p43, %f359, 0f4B800000;
	mul.f32 	%f360, %f358, 0f00000000;
	setp.gt.f32 	%p49, %f394, 0f4B800000;
	mul.f32 	%f395, %f393, 0f00000000;
	setp.gt.f32 	%p55, %f428, 0f4B800000;
	mul.f32 	%f429, %f427, 0f00000000;
	selp.f32 	%f189, %f188, %f186, %p13;
	selp.f32 	%f223, %f222, %f220, %p19;
	selp.f32 	%f258, %f257, %f255, %p25;
	selp.f32 	%f292, %f291, %f289, %p31;
	selp.f32 	%f327, %f326, %f324, %p37;
	selp.f32 	%f361, %f360, %f358, %p43;
	selp.f32 	%f396, %f395, %f393, %p49;
	selp.f32 	%f430, %f429, %f427, %p55;
	add.f32 	%f190, %f189, %f189;
	add.f32 	%f224, %f223, %f223;
	add.f32 	%f259, %f258, %f258;
	add.f32 	%f293, %f292, %f292;
	add.f32 	%f328, %f327, %f327;
	add.f32 	%f362, %f361, %f361;
	add.f32 	%f397, %f396, %f396;
	add.f32 	%f431, %f430, %f430;
	add.f32 	%f480, %f884, %f884;
	add.f32 	%f532, %f888, %f888;
	add.f32 	%f585, %f892, %f892;
	add.f32 	%f636, %f896, %f896;
	mov.b32 	%r212, %f190;
	mov.b32 	%r219, %f224;
	mov.b32 	%r230, %f259;
	mov.b32 	%r237, %f293;
	mov.b32 	%r248, %f328;
	mov.b32 	%r255, %f362;
	mov.b32 	%r266, %f397;
	mov.b32 	%r273, %f431;
	mov.b32 	%r291, %f480;
	mov.b32 	%r314, %f532;
	mov.b32 	%r336, %f585;
	mov.b32 	%r367, %f636;
	and.b32  	%r213, %r212, -2147483648;
	and.b32  	%r220, %r219, -2147483648;
	and.b32  	%r231, %r230, -2147483648;
	and.b32  	%r238, %r237, -2147483648;
	and.b32  	%r249, %r248, -2147483648;
	and.b32  	%r256, %r255, -2147483648;
	and.b32  	%r267, %r266, -2147483648;
	and.b32  	%r274, %r273, -2147483648;
	and.b32  	%r292, %r291, -2147483648;
	and.b32  	%r315, %r314, -2147483648;
	and.b32  	%r337, %r336, -2147483648;
	and.b32  	%r368, %r367, -2147483648;
	add.f32 	%f689, %f912, %f912;
	add.f32 	%f740, %f900, %f900;
	or.b32  	%r214, %r213, 1056964608;
	or.b32  	%r221, %r220, 1056964608;
	or.b32  	%r232, %r231, 1056964608;
	or.b32  	%r239, %r238, 1056964608;
	or.b32  	%r250, %r249, 1056964608;
	or.b32  	%r257, %r256, 1056964608;
	or.b32  	%r268, %r267, 1056964608;
	or.b32  	%r275, %r274, 1056964608;
	or.b32  	%r293, %r292, 1056964608;
	or.b32  	%r316, %r315, 1056964608;
	or.b32  	%r338, %r337, 1056964608;
	or.b32  	%r369, %r368, 1056964608;
	mov.b32 	%r383, %f689;
	mov.b32 	%r405, %f740;
	mov.b32 	%f191, %r214;
	mov.b32 	%f225, %r221;
	mov.b32 	%f260, %r232;
	mov.b32 	%f294, %r239;
	mov.b32 	%f329, %r250;
	mov.b32 	%f363, %r257;
	mov.b32 	%f398, %r268;
	mov.b32 	%f432, %r275;
	mov.b32 	%f481, %r293;
	mov.b32 	%f533, %r316;
	mov.b32 	%f586, %r338;
	mov.b32 	%f637, %r369;
	and.b32  	%r384, %r383, -2147483648;
	and.b32  	%r406, %r405, -2147483648;
	add.f32 	%f792, %f904, %f904;
	add.f32 	%f192, %f190, %f191;
	abs.f32 	%f194, %f190;
	add.f32 	%f226, %f224, %f225;
	abs.f32 	%f228, %f224;
	add.f32 	%f261, %f259, %f260;
	abs.f32 	%f263, %f259;
	add.f32 	%f295, %f293, %f294;
	abs.f32 	%f297, %f293;
	add.f32 	%f330, %f328, %f329;
	abs.f32 	%f332, %f328;
	add.f32 	%f364, %f362, %f363;
	abs.f32 	%f366, %f362;
	add.f32 	%f399, %f397, %f398;
	abs.f32 	%f401, %f397;
	add.f32 	%f433, %f431, %f432;
	abs.f32 	%f435, %f431;
	add.f32 	%f482, %f480, %f481;
	abs.f32 	%f484, %f480;
	add.f32 	%f534, %f532, %f533;
	abs.f32 	%f536, %f532;
	add.f32 	%f587, %f585, %f586;
	abs.f32 	%f589, %f585;
	add.f32 	%f638, %f636, %f637;
	abs.f32 	%f640, %f636;
	or.b32  	%r385, %r384, 1056964608;
	or.b32  	%r407, %r406, 1056964608;
	mov.b32 	%r419, %f792;
	cvt.rzi.f32.f32 	%f193, %f192;
	setp.gt.f32 	%p14, %f194, 0f4B000000;
	cvt.rzi.f32.f32 	%f227, %f226;
	setp.gt.f32 	%p20, %f228, 0f4B000000;
	cvt.rzi.f32.f32 	%f262, %f261;
	setp.gt.f32 	%p26, %f263, 0f4B000000;
	cvt.rzi.f32.f32 	%f296, %f295;
	setp.gt.f32 	%p32, %f297, 0f4B000000;
	cvt.rzi.f32.f32 	%f331, %f330;
	setp.gt.f32 	%p38, %f332, 0f4B000000;
	cvt.rzi.f32.f32 	%f365, %f364;
	setp.gt.f32 	%p44, %f366, 0f4B000000;
	cvt.rzi.f32.f32 	%f400, %f399;
	setp.gt.f32 	%p50, %f401, 0f4B000000;
	cvt.rzi.f32.f32 	%f434, %f433;
	setp.gt.f32 	%p56, %f435, 0f4B000000;
	cvt.rzi.f32.f32 	%f483, %f482;
	setp.gt.f32 	%p74, %f484, 0f4B000000;
	cvt.rzi.f32.f32 	%f535, %f534;
	setp.gt.f32 	%p94, %f536, 0f4B000000;
	cvt.rzi.f32.f32 	%f588, %f587;
	setp.gt.f32 	%p115, %f589, 0f4B000000;
	cvt.rzi.f32.f32 	%f639, %f638;
	setp.gt.f32 	%p135, %f640, 0f4B000000;
	mov.b32 	%f690, %r385;
	mov.b32 	%f741, %r407;
	and.b32  	%r420, %r419, -2147483648;
	selp.f32 	%f195, %f190, %f193, %p14;
	cvt.rzi.f32.f32 	%f196, %f190;
	setp.lt.f32 	%p15, %f194, 0f3F000000;
	selp.f32 	%f229, %f224, %f227, %p20;
	cvt.rzi.f32.f32 	%f230, %f224;
	setp.lt.f32 	%p21, %f228, 0f3F000000;
	selp.f32 	%f264, %f259, %f262, %p26;
	cvt.rzi.f32.f32 	%f265, %f259;
	setp.lt.f32 	%p27, %f263, 0f3F000000;
	selp.f32 	%f298, %f293, %f296, %p32;
	cvt.rzi.f32.f32 	%f299, %f293;
	setp.lt.f32 	%p33, %f297, 0f3F000000;
	selp.f32 	%f333, %f328, %f331, %p38;
	cvt.rzi.f32.f32 	%f334, %f328;
	setp.lt.f32 	%p39, %f332, 0f3F000000;
	selp.f32 	%f367, %f362, %f365, %p44;
	cvt.rzi.f32.f32 	%f368, %f362;
	setp.lt.f32 	%p45, %f366, 0f3F000000;
	selp.f32 	%f402, %f397, %f400, %p50;
	cvt.rzi.f32.f32 	%f403, %f397;
	setp.lt.f32 	%p51, %f401, 0f3F000000;
	selp.f32 	%f436, %f431, %f434, %p56;
	cvt.rzi.f32.f32 	%f437, %f431;
	setp.lt.f32 	%p57, %f435, 0f3F000000;
	selp.f32 	%f485, %f480, %f483, %p74;
	cvt.rzi.f32.f32 	%f486, %f480;
	setp.lt.f32 	%p75, %f484, 0f3F000000;
	selp.f32 	%f537, %f532, %f535, %p94;
	cvt.rzi.f32.f32 	%f538, %f532;
	setp.lt.f32 	%p95, %f536, 0f3F000000;
	selp.f32 	%f590, %f585, %f588, %p115;
	cvt.rzi.f32.f32 	%f591, %f585;
	setp.lt.f32 	%p116, %f589, 0f3F000000;
	selp.f32 	%f641, %f636, %f639, %p135;
	cvt.rzi.f32.f32 	%f642, %f636;
	setp.lt.f32 	%p136, %f640, 0f3F000000;
	add.f32 	%f691, %f689, %f690;
	abs.f32 	%f693, %f689;
	add.f32 	%f742, %f740, %f741;
	abs.f32 	%f744, %f740;
	or.b32  	%r421, %r420, 1056964608;
	selp.f32 	%f197, %f196, %f195, %p15;
	selp.f32 	%f231, %f230, %f229, %p21;
	selp.f32 	%f266, %f265, %f264, %p27;
	selp.f32 	%f300, %f299, %f298, %p33;
	selp.f32 	%f335, %f334, %f333, %p39;
	selp.f32 	%f369, %f368, %f367, %p45;
	selp.f32 	%f404, %f403, %f402, %p51;
	selp.f32 	%f438, %f437, %f436, %p57;
	selp.f32 	%f487, %f486, %f485, %p75;
	selp.f32 	%f539, %f538, %f537, %p95;
	selp.f32 	%f592, %f591, %f590, %p116;
	selp.f32 	%f643, %f642, %f641, %p136;
	cvt.rzi.f32.f32 	%f692, %f691;
	setp.gt.f32 	%p156, %f693, 0f4B000000;
	cvt.rzi.f32.f32 	%f743, %f742;
	setp.gt.f32 	%p176, %f744, 0f4B000000;
	mov.b32 	%f793, %r421;
	fma.rn.f32 	%f198, %f197, 0fBF000000, %f189;
	fma.rn.f32 	%f232, %f231, 0fBF000000, %f223;
	fma.rn.f32 	%f267, %f266, 0fBF000000, %f258;
	fma.rn.f32 	%f301, %f300, 0fBF000000, %f292;
	fma.rn.f32 	%f336, %f335, 0fBF000000, %f327;
	fma.rn.f32 	%f370, %f369, 0fBF000000, %f361;
	fma.rn.f32 	%f405, %f404, 0fBF000000, %f396;
	fma.rn.f32 	%f439, %f438, 0fBF000000, %f430;
	fma.rn.f32 	%f488, %f487, 0fBF000000, %f884;
	fma.rn.f32 	%f540, %f539, 0fBF000000, %f888;
	fma.rn.f32 	%f593, %f592, 0fBF000000, %f892;
	fma.rn.f32 	%f644, %f643, 0fBF000000, %f896;
	selp.f32 	%f694, %f689, %f692, %p156;
	cvt.rzi.f32.f32 	%f695, %f689;
	setp.lt.f32 	%p157, %f693, 0f3F000000;
	selp.f32 	%f745, %f740, %f743, %p176;
	cvt.rzi.f32.f32 	%f746, %f740;
	setp.lt.f32 	%p177, %f744, 0f3F000000;
	add.f32 	%f794, %f792, %f793;
	abs.f32 	%f796, %f792;
	mul.f32 	%f199, %f198, %f198;
	mul.f32 	%f233, %f232, %f232;
	mul.f32 	%f268, %f267, %f267;
	mul.f32 	%f302, %f301, %f301;
	mul.f32 	%f337, %f336, %f336;
	mul.f32 	%f371, %f370, %f370;
	mul.f32 	%f406, %f405, %f405;
	mul.f32 	%f440, %f439, %f439;
	mul.f32 	%f489, %f488, %f488;
	mul.f32 	%f541, %f540, %f540;
	mul.f32 	%f594, %f593, %f593;
	mul.f32 	%f645, %f644, %f644;
	selp.f32 	%f696, %f695, %f694, %p157;
	selp.f32 	%f747, %f746, %f745, %p177;
	cvt.rzi.f32.f32 	%f795, %f794;
	setp.gt.f32 	%p198, %f796, 0f4B000000;
	cvt.rzi.s32.f32 	%r215, %f197;
	fma.rn.f32 	%f200, %f199, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f201, %f199, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r222, %f231;
	fma.rn.f32 	%f234, %f233, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f235, %f233, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r233, %f266;
	fma.rn.f32 	%f269, %f268, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f270, %f268, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r240, %f300;
	fma.rn.f32 	%f303, %f302, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f304, %f302, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r251, %f335;
	fma.rn.f32 	%f338, %f337, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f339, %f337, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r258, %f369;
	fma.rn.f32 	%f372, %f371, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f373, %f371, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r269, %f404;
	fma.rn.f32 	%f407, %f406, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f408, %f406, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r276, %f438;
	fma.rn.f32 	%f441, %f440, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f442, %f440, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f490, %f489, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f491, %f489, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f542, %f541, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f543, %f541, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f595, %f594, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f596, %f594, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f646, %f645, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f647, %f645, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f697, %f696, 0fBF000000, %f912;
	fma.rn.f32 	%f748, %f747, 0fBF000000, %f900;
	selp.f32 	%f797, %f792, %f795, %p198;
	cvt.rzi.f32.f32 	%f798, %f792;
	setp.lt.f32 	%p199, %f796, 0f3F000000;
	add.s32 	%r216, %r215, 1;
	fma.rn.f32 	%f202, %f200, %f199, 0fC0A55DF6;
	fma.rn.f32 	%f203, %f201, %f199, 0f4081E0CF;
	fma.rn.f32 	%f204, %f199, %f198, 0f00000000;
	add.s32 	%r223, %r222, 1;
	fma.rn.f32 	%f236, %f234, %f233, 0fC0A55DF6;
	fma.rn.f32 	%f237, %f235, %f233, 0f4081E0CF;
	fma.rn.f32 	%f238, %f233, %f232, 0f00000000;
	add.s32 	%r234, %r233, 1;
	fma.rn.f32 	%f271, %f269, %f268, 0fC0A55DF6;
	fma.rn.f32 	%f272, %f270, %f268, 0f4081E0CF;
	fma.rn.f32 	%f273, %f268, %f267, 0f00000000;
	add.s32 	%r241, %r240, 1;
	fma.rn.f32 	%f305, %f303, %f302, 0fC0A55DF6;
	fma.rn.f32 	%f306, %f304, %f302, 0f4081E0CF;
	fma.rn.f32 	%f307, %f302, %f301, 0f00000000;
	add.s32 	%r252, %r251, 1;
	fma.rn.f32 	%f340, %f338, %f337, 0fC0A55DF6;
	fma.rn.f32 	%f341, %f339, %f337, 0f4081E0CF;
	fma.rn.f32 	%f342, %f337, %f336, 0f00000000;
	add.s32 	%r259, %r258, 1;
	fma.rn.f32 	%f374, %f372, %f371, 0fC0A55DF6;
	fma.rn.f32 	%f375, %f373, %f371, 0f4081E0CF;
	fma.rn.f32 	%f376, %f371, %f370, 0f00000000;
	add.s32 	%r270, %r269, 1;
	fma.rn.f32 	%f409, %f407, %f406, 0fC0A55DF6;
	fma.rn.f32 	%f410, %f408, %f406, 0f4081E0CF;
	fma.rn.f32 	%f411, %f406, %f405, 0f00000000;
	add.s32 	%r277, %r276, 1;
	fma.rn.f32 	%f443, %f441, %f440, 0fC0A55DF6;
	fma.rn.f32 	%f444, %f442, %f440, 0f4081E0CF;
	fma.rn.f32 	%f445, %f440, %f439, 0f00000000;
	cvt.rzi.s32.f32 	%r294, %f487;
	fma.rn.f32 	%f492, %f490, %f489, 0fC0A55DF6;
	fma.rn.f32 	%f493, %f491, %f489, 0f4081E0CF;
	fma.rn.f32 	%f494, %f489, %f488, 0f00000000;
	cvt.rzi.s32.f32 	%r317, %f539;
	fma.rn.f32 	%f544, %f542, %f541, 0fC0A55DF6;
	fma.rn.f32 	%f545, %f543, %f541, 0f4081E0CF;
	fma.rn.f32 	%f546, %f541, %f540, 0f00000000;
	cvt.rzi.s32.f32 	%r339, %f592;
	fma.rn.f32 	%f597, %f595, %f594, 0fC0A55DF6;
	fma.rn.f32 	%f598, %f596, %f594, 0f4081E0CF;
	fma.rn.f32 	%f599, %f594, %f593, 0f00000000;
	cvt.rzi.s32.f32 	%r370, %f643;
	fma.rn.f32 	%f648, %f646, %f645, 0fC0A55DF6;
	fma.rn.f32 	%f649, %f647, %f645, 0f4081E0CF;
	fma.rn.f32 	%f650, %f645, %f644, 0f00000000;
	mul.f32 	%f698, %f697, %f697;
	mul.f32 	%f749, %f748, %f748;
	selp.f32 	%f799, %f798, %f797, %p199;
	fma.rn.f32 	%f205, %f203, %f199, 0fC09DE9E6;
	fma.rn.f32 	%f206, %f202, %f204, 0f00000000;
	and.b32  	%r217, %r216, 1;
	fma.rn.f32 	%f239, %f237, %f233, 0fC09DE9E6;
	fma.rn.f32 	%f240, %f236, %f238, 0f00000000;
	and.b32  	%r224, %r223, 1;
	fma.rn.f32 	%f274, %f272, %f268, 0fC09DE9E6;
	fma.rn.f32 	%f275, %f271, %f273, 0f00000000;
	and.b32  	%r235, %r234, 1;
	fma.rn.f32 	%f308, %f306, %f302, 0fC09DE9E6;
	fma.rn.f32 	%f309, %f305, %f307, 0f00000000;
	and.b32  	%r242, %r241, 1;
	fma.rn.f32 	%f343, %f341, %f337, 0fC09DE9E6;
	fma.rn.f32 	%f344, %f340, %f342, 0f00000000;
	and.b32  	%r253, %r252, 1;
	fma.rn.f32 	%f377, %f375, %f371, 0fC09DE9E6;
	fma.rn.f32 	%f378, %f374, %f376, 0f00000000;
	and.b32  	%r260, %r259, 1;
	fma.rn.f32 	%f412, %f410, %f406, 0fC09DE9E6;
	fma.rn.f32 	%f413, %f409, %f411, 0f00000000;
	and.b32  	%r271, %r270, 1;
	fma.rn.f32 	%f446, %f444, %f440, 0fC09DE9E6;
	fma.rn.f32 	%f447, %f443, %f445, 0f00000000;
	and.b32  	%r278, %r277, 1;
	fma.rn.f32 	%f495, %f493, %f489, 0fC09DE9E6;
	fma.rn.f32 	%f496, %f492, %f494, 0f00000000;
	and.b32  	%r295, %r294, 1;
	fma.rn.f32 	%f547, %f545, %f541, 0fC09DE9E6;
	fma.rn.f32 	%f548, %f544, %f546, 0f00000000;
	and.b32  	%r318, %r317, 1;
	fma.rn.f32 	%f600, %f598, %f594, 0fC09DE9E6;
	fma.rn.f32 	%f601, %f597, %f599, 0f00000000;
	and.b32  	%r340, %r339, 1;
	fma.rn.f32 	%f651, %f649, %f645, 0fC09DE9E6;
	fma.rn.f32 	%f652, %f648, %f650, 0f00000000;
	and.b32  	%r371, %r370, 1;
	fma.rn.f32 	%f699, %f698, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f700, %f698, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f750, %f749, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f751, %f749, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f800, %f799, 0fBF000000, %f904;
	fma.rn.f32 	%f207, %f205, %f199, 0f3F800000;
	fma.rn.f32 	%f208, %f198, 0f40490FDB, %f206;
	setp.eq.b32 	%p16, %r217, 1;
	fma.rn.f32 	%f241, %f239, %f233, 0f3F800000;
	fma.rn.f32 	%f242, %f232, 0f40490FDB, %f240;
	setp.eq.b32 	%p22, %r224, 1;
	fma.rn.f32 	%f276, %f274, %f268, 0f3F800000;
	fma.rn.f32 	%f277, %f267, 0f40490FDB, %f275;
	setp.eq.b32 	%p28, %r235, 1;
	fma.rn.f32 	%f310, %f308, %f302, 0f3F800000;
	fma.rn.f32 	%f311, %f301, 0f40490FDB, %f309;
	setp.eq.b32 	%p34, %r242, 1;
	fma.rn.f32 	%f345, %f343, %f337, 0f3F800000;
	fma.rn.f32 	%f346, %f336, 0f40490FDB, %f344;
	setp.eq.b32 	%p40, %r253, 1;
	fma.rn.f32 	%f379, %f377, %f371, 0f3F800000;
	fma.rn.f32 	%f380, %f370, 0f40490FDB, %f378;
	setp.eq.b32 	%p46, %r260, 1;
	fma.rn.f32 	%f414, %f412, %f406, 0f3F800000;
	fma.rn.f32 	%f415, %f405, 0f40490FDB, %f413;
	setp.eq.b32 	%p52, %r271, 1;
	fma.rn.f32 	%f448, %f446, %f440, 0f3F800000;
	fma.rn.f32 	%f449, %f439, 0f40490FDB, %f447;
	setp.eq.b32 	%p58, %r278, 1;
	fma.rn.f32 	%f497, %f495, %f489, 0f3F800000;
	fma.rn.f32 	%f498, %f488, 0f40490FDB, %f496;
	setp.eq.b32 	%p76, %r295, 1;
	fma.rn.f32 	%f549, %f547, %f541, 0f3F800000;
	fma.rn.f32 	%f550, %f540, 0f40490FDB, %f548;
	setp.eq.b32 	%p96, %r318, 1;
	fma.rn.f32 	%f602, %f600, %f594, 0f3F800000;
	fma.rn.f32 	%f603, %f593, 0f40490FDB, %f601;
	setp.eq.b32 	%p117, %r340, 1;
	fma.rn.f32 	%f653, %f651, %f645, 0f3F800000;
	fma.rn.f32 	%f654, %f644, 0f40490FDB, %f652;
	setp.eq.b32 	%p137, %r371, 1;
	cvt.rzi.s32.f32 	%r386, %f696;
	fma.rn.f32 	%f701, %f699, %f698, 0fC0A55DF6;
	fma.rn.f32 	%f702, %f700, %f698, 0f4081E0CF;
	fma.rn.f32 	%f703, %f698, %f697, 0f00000000;
	cvt.rzi.s32.f32 	%r408, %f747;
	fma.rn.f32 	%f752, %f750, %f749, 0fC0A55DF6;
	fma.rn.f32 	%f753, %f751, %f749, 0f4081E0CF;
	fma.rn.f32 	%f754, %f749, %f748, 0f00000000;
	mul.f32 	%f801, %f800, %f800;
	selp.f32 	%f209, %f207, %f208, %p16;
	and.b32  	%r218, %r216, 2;
	mov.f32 	%f210, 0f00000000;
	selp.f32 	%f243, %f241, %f242, %p22;
	and.b32  	%r225, %r223, 2;
	selp.f32 	%f278, %f276, %f277, %p28;
	and.b32  	%r236, %r234, 2;
	selp.f32 	%f312, %f310, %f311, %p34;
	and.b32  	%r243, %r241, 2;
	selp.f32 	%f347, %f345, %f346, %p40;
	and.b32  	%r254, %r252, 2;
	selp.f32 	%f381, %f379, %f380, %p46;
	and.b32  	%r261, %r259, 2;
	selp.f32 	%f416, %f414, %f415, %p52;
	and.b32  	%r272, %r270, 2;
	selp.f32 	%f450, %f448, %f449, %p58;
	and.b32  	%r279, %r277, 2;
	selp.f32 	%f499, %f497, %f498, %p76;
	and.b32  	%r296, %r294, 2;
	selp.f32 	%f551, %f549, %f550, %p96;
	and.b32  	%r319, %r317, 2;
	selp.f32 	%f604, %f602, %f603, %p117;
	and.b32  	%r341, %r339, 2;
	selp.f32 	%f655, %f653, %f654, %p137;
	and.b32  	%r372, %r370, 2;
	fma.rn.f32 	%f704, %f702, %f698, 0fC09DE9E6;
	fma.rn.f32 	%f705, %f701, %f703, 0f00000000;
	and.b32  	%r387, %r386, 1;
	fma.rn.f32 	%f755, %f753, %f749, 0fC09DE9E6;
	fma.rn.f32 	%f756, %f752, %f754, 0f00000000;
	and.b32  	%r409, %r408, 1;
	fma.rn.f32 	%f802, %f801, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f803, %f801, 0f3E684E12, 0fBFAAD2E0;
	setp.eq.s32 	%p17, %r218, 0;
	sub.f32 	%f211, %f210, %f209;
	setp.eq.s32 	%p23, %r225, 0;
	sub.f32 	%f245, %f210, %f243;
	setp.eq.s32 	%p29, %r236, 0;
	sub.f32 	%f280, %f210, %f278;
	setp.eq.s32 	%p35, %r243, 0;
	sub.f32 	%f314, %f210, %f312;
	setp.eq.s32 	%p41, %r254, 0;
	sub.f32 	%f349, %f210, %f347;
	setp.eq.s32 	%p47, %r261, 0;
	sub.f32 	%f383, %f210, %f381;
	setp.eq.s32 	%p53, %r272, 0;
	sub.f32 	%f418, %f210, %f416;
	setp.eq.s32 	%p59, %r279, 0;
	sub.f32 	%f452, %f210, %f450;
	setp.eq.s32 	%p77, %r296, 0;
	neg.f32 	%f501, %f499;
	add.s32 	%r297, %r294, 1;
	cvt.rzi.f32.f32 	%f506, %f884;
	setp.eq.s32 	%p97, %r319, 0;
	neg.f32 	%f553, %f551;
	add.s32 	%r320, %r317, 1;
	cvt.rzi.f32.f32 	%f558, %f888;
	setp.eq.s32 	%p118, %r341, 0;
	neg.f32 	%f606, %f604;
	add.s32 	%r342, %r339, 1;
	cvt.rzi.f32.f32 	%f611, %f892;
	setp.eq.s32 	%p138, %r372, 0;
	neg.f32 	%f657, %f655;
	add.s32 	%r373, %r370, 1;
	cvt.rzi.f32.f32 	%f662, %f896;
	fma.rn.f32 	%f706, %f704, %f698, 0f3F800000;
	fma.rn.f32 	%f707, %f697, 0f40490FDB, %f705;
	setp.eq.b32 	%p158, %r387, 1;
	fma.rn.f32 	%f757, %f755, %f749, 0f3F800000;
	fma.rn.f32 	%f758, %f748, 0f40490FDB, %f756;
	setp.eq.b32 	%p178, %r409, 1;
	cvt.rzi.s32.f32 	%r422, %f799;
	fma.rn.f32 	%f804, %f802, %f801, 0fC0A55DF6;
	fma.rn.f32 	%f805, %f803, %f801, 0f4081E0CF;
	fma.rn.f32 	%f806, %f801, %f800, 0f00000000;
	selp.f32 	%f212, %f209, %f211, %p17;
	selp.f32 	%f246, %f243, %f245, %p23;
	selp.f32 	%f281, %f278, %f280, %p29;
	selp.f32 	%f315, %f312, %f314, %p35;
	selp.f32 	%f350, %f347, %f349, %p41;
	selp.f32 	%f384, %f381, %f383, %p47;
	selp.f32 	%f419, %f416, %f418, %p53;
	selp.f32 	%f453, %f450, %f452, %p59;
	selp.f32 	%f500, %f498, %f497, %p76;
	selp.f32 	%f502, %f499, %f501, %p77;
	and.b32  	%r298, %r297, 2;
	setp.eq.f32 	%p79, %f506, %f884;
	mul.f32 	%f507, %f884, 0f00000000;
	selp.f32 	%f552, %f550, %f549, %p96;
	selp.f32 	%f554, %f551, %f553, %p97;
	and.b32  	%r321, %r320, 2;
	setp.eq.f32 	%p99, %f558, %f888;
	mul.f32 	%f559, %f888, 0f00000000;
	selp.f32 	%f605, %f603, %f602, %p117;
	selp.f32 	%f607, %f604, %f606, %p118;
	and.b32  	%r343, %r342, 2;
	setp.eq.f32 	%p120, %f611, %f892;
	mul.f32 	%f612, %f892, 0f00000000;
	selp.f32 	%f656, %f654, %f653, %p137;
	selp.f32 	%f658, %f655, %f657, %p138;
	and.b32  	%r374, %r373, 2;
	setp.eq.f32 	%p140, %f662, %f896;
	mul.f32 	%f663, %f896, 0f00000000;
	selp.f32 	%f708, %f706, %f707, %p158;
	and.b32  	%r388, %r386, 2;
	selp.f32 	%f759, %f757, %f758, %p178;
	and.b32  	%r410, %r408, 2;
	fma.rn.f32 	%f807, %f805, %f801, 0fC09DE9E6;
	fma.rn.f32 	%f808, %f804, %f806, 0f00000000;
	and.b32  	%r423, %r422, 1;
	mul.f32 	%f154, %f212, %f212;
	mul.f32 	%f4, %f246, %f246;
	mul.f32 	%f8, %f281, %f281;
	mul.f32 	%f13, %f315, %f315;
	mul.f32 	%f17, %f350, %f350;
	mul.f32 	%f22, %f384, %f384;
	mul.f32 	%f26, %f419, %f419;
	mul.f32 	%f31, %f453, %f453;
	setp.eq.s32 	%p78, %r298, 0;
	sub.f32 	%f504, %f210, %f500;
	selp.f32 	%f52, %f507, %f502, %p79;
	abs.f32 	%f508, %f884;
	setp.eq.s32 	%p98, %r321, 0;
	sub.f32 	%f556, %f210, %f552;
	selp.f32 	%f560, %f559, %f554, %p99;
	abs.f32 	%f561, %f888;
	setp.eq.s32 	%p119, %r343, 0;
	sub.f32 	%f609, %f210, %f605;
	selp.f32 	%f86, %f612, %f607, %p120;
	abs.f32 	%f613, %f892;
	setp.eq.s32 	%p139, %r374, 0;
	sub.f32 	%f660, %f210, %f656;
	selp.f32 	%f664, %f663, %f658, %p140;
	abs.f32 	%f665, %f896;
	setp.eq.s32 	%p159, %r388, 0;
	neg.f32 	%f710, %f708;
	add.s32 	%r389, %r386, 1;
	cvt.rzi.f32.f32 	%f715, %f912;
	setp.eq.s32 	%p179, %r410, 0;
	neg.f32 	%f761, %f759;
	add.s32 	%r411, %r408, 1;
	cvt.rzi.f32.f32 	%f766, %f900;
	fma.rn.f32 	%f809, %f807, %f801, 0f3F800000;
	fma.rn.f32 	%f810, %f800, 0f40490FDB, %f808;
	setp.eq.b32 	%p200, %r423, 1;
	mul.f32 	%f216, %f154, 0f3C0AF64E;
	mul.f32 	%f250, %f4, 0f3C0AF64E;
	mul.f32 	%f285, %f8, 0f3C0AF64E;
	mul.f32 	%f319, %f13, 0f3C0AF64E;
	mul.f32 	%f354, %f17, 0f3C0AF64E;
	mul.f32 	%f388, %f22, 0f3C0AF64E;
	mul.f32 	%f423, %f26, 0f3C0AF64E;
	mul.f32 	%f456, %f31, 0f3C0AF64E;
	selp.f32 	%f505, %f500, %f504, %p78;
	setp.gt.f32 	%p80, %f508, 0f4B800000;
	add.f32 	%f509, %f52, 0f3F800000;
	selp.f32 	%f557, %f552, %f556, %p98;
	setp.gt.f32 	%p100, %f561, 0f4B800000;
	add.f32 	%f562, %f560, 0f3F800000;
	selp.f32 	%f610, %f605, %f609, %p119;
	setp.gt.f32 	%p121, %f613, 0f4B800000;
	add.f32 	%f614, %f86, 0f3F800000;
	selp.f32 	%f661, %f656, %f660, %p139;
	setp.gt.f32 	%p141, %f665, 0f4B800000;
	add.f32 	%f666, %f664, 0f3F800000;
	selp.f32 	%f709, %f707, %f706, %p158;
	selp.f32 	%f711, %f708, %f710, %p159;
	and.b32  	%r390, %r389, 2;
	setp.eq.f32 	%p161, %f715, %f912;
	mul.f32 	%f716, %f912, 0f00000000;
	selp.f32 	%f760, %f758, %f757, %p178;
	selp.f32 	%f762, %f759, %f761, %p179;
	and.b32  	%r412, %r411, 2;
	setp.eq.f32 	%p181, %f766, %f900;
	mul.f32 	%f767, %f900, 0f00000000;
	selp.f32 	%f811, %f809, %f810, %p200;
	and.b32  	%r424, %r422, 2;
	mul.f32 	%f3, %f216, %f874;
	mul.f32 	%f251, %f250, %f875;
	mul.f32 	%f12, %f285, %f876;
	mul.f32 	%f320, %f319, %f877;
	mul.f32 	%f21, %f354, %f878;
	mul.f32 	%f389, %f388, %f879;
	mul.f32 	%f30, %f423, %f880;
	mul.f32 	%f457, %f456, %f881;
	selp.f32 	%f53, %f509, %f505, %p80;
	selp.f32 	%f563, %f562, %f557, %p100;
	selp.f32 	%f87, %f614, %f610, %p121;
	selp.f32 	%f667, %f666, %f661, %p141;
	setp.eq.s32 	%p160, %r390, 0;
	sub.f32 	%f713, %f210, %f709;
	selp.f32 	%f176, %f716, %f711, %p161;
	abs.f32 	%f717, %f912;
	setp.eq.s32 	%p180, %r412, 0;
	sub.f32 	%f764, %f210, %f760;
	selp.f32 	%f768, %f767, %f762, %p181;
	abs.f32 	%f769, %f900;
	setp.eq.s32 	%p201, %r424, 0;
	neg.f32 	%f813, %f811;
	add.s32 	%r425, %r422, 1;
	cvt.rzi.f32.f32 	%f818, %f904;
	ld.param.u64 	%rd2, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6];
	ld.param.u64 	%rd3, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7];
	mov.b32 	%r228, %f251;
	mov.b32 	%r227, %f3;
	mov.b32 	%r246, %f320;
	mov.b32 	%r245, %f12;
	mov.b32 	%r264, %f389;
	mov.b32 	%r263, %f21;
	mov.b32 	%r282, %f457;
	mov.b32 	%r281, %f30;
	mov.b32 	%r310, %f563;
	mov.b32 	%r309, %f53;
	mov.b32 	%r313, %f560;
	mov.b32 	%r312, %f52;
	mov.b32 	%r357, %f667;
	mov.b32 	%r356, %f87;
	mov.b32 	%r363, %f664;
	mov.b32 	%r362, %f86;
	selp.f32 	%f714, %f709, %f713, %p160;
	setp.gt.f32 	%p162, %f717, 0f4B800000;
	add.f32 	%f718, %f176, 0f3F800000;
	selp.f32 	%f765, %f760, %f764, %p180;
	setp.gt.f32 	%p182, %f769, 0f4B800000;
	add.f32 	%f770, %f768, 0f3F800000;
	selp.f32 	%f812, %f810, %f809, %p200;
	selp.f32 	%f814, %f811, %f813, %p201;
	and.b32  	%r426, %r425, 2;
	setp.eq.f32 	%p203, %f818, %f904;
	mul.f32 	%f819, %f904, 0f00000000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r226, %r228, %r227;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r244, %r246, %r245;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r262, %r264, %r263;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r280, %r282, %r281;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r308, %r310, %r309;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r311, %r313, %r312;
	// end inline asm
	xor.b32  	%r360, %r363, -2147483648;
	xor.b32  	%r359, %r362, -2147483648;
	selp.f32 	%f177, %f718, %f714, %p162;
	selp.f32 	%f771, %f770, %f765, %p182;
	setp.eq.s32 	%p202, %r426, 0;
	sub.f32 	%f816, %f210, %f812;
	selp.f32 	%f136, %f819, %f814, %p203;
	abs.f32 	%f820, %f904;
	// begin inline asm
	cvt.rn.f16x2.f32 %r355, %r357, %r356;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r358, %r360, %r359;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r361, %r363, %r362;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r364, %r357, %r356;
	// end inline asm
	mov.b32 	%r401, %f771;
	mov.b32 	%r400, %f177;
	mov.b32 	%r404, %f768;
	mov.b32 	%r403, %f176;
	selp.f32 	%f817, %f812, %f816, %p202;
	setp.gt.f32 	%p204, %f820, 0f4B800000;
	add.f32 	%f821, %f136, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r399, %r401, %r400;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r402, %r404, %r403;
	// end inline asm
	selp.f32 	%f137, %f821, %f817, %p204;
	add.f32 	%f842, %f908, %f908;
	mov.b32 	%r445, %f842;
	and.b32  	%r446, %r445, -2147483648;
	or.b32  	%r447, %r446, 1056964608;
	mov.b32 	%f843, %r447;
	add.f32 	%f844, %f842, %f843;
	cvt.rzi.f32.f32 	%f845, %f844;
	abs.f32 	%f846, %f842;
	setp.gt.f32 	%p217, %f846, 0f4B000000;
	selp.f32 	%f847, %f842, %f845, %p217;
	cvt.rzi.f32.f32 	%f848, %f842;
	setp.lt.f32 	%p218, %f846, 0f3F000000;
	selp.f32 	%f849, %f848, %f847, %p218;
	cvt.rzi.s32.f32 	%r448, %f849;
	fma.rn.f32 	%f850, %f849, 0fBF000000, %f908;
	mul.f32 	%f851, %f850, %f850;
	fma.rn.f32 	%f852, %f851, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f853, %f851, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f854, %f852, %f851, 0fC0A55DF6;
	fma.rn.f32 	%f855, %f853, %f851, 0f4081E0CF;
	fma.rn.f32 	%f856, %f851, %f850, 0f00000000;
	fma.rn.f32 	%f857, %f855, %f851, 0fC09DE9E6;
	fma.rn.f32 	%f858, %f854, %f856, 0f00000000;
	fma.rn.f32 	%f859, %f857, %f851, 0f3F800000;
	fma.rn.f32 	%f860, %f850, 0f40490FDB, %f858;
	and.b32  	%r449, %r448, 1;
	setp.eq.b32 	%p219, %r449, 1;
	selp.f32 	%f861, %f859, %f860, %p219;
	selp.f32 	%f862, %f860, %f859, %p219;
	and.b32  	%r450, %r448, 2;
	setp.eq.s32 	%p220, %r450, 0;
	neg.f32 	%f863, %f861;
	selp.f32 	%f864, %f861, %f863, %p220;
	add.s32 	%r451, %r448, 1;
	and.b32  	%r452, %r451, 2;
	setp.eq.s32 	%p221, %r452, 0;
	sub.f32 	%f866, %f210, %f862;
	selp.f32 	%f867, %f862, %f866, %p221;
	cvt.rzi.f32.f32 	%f868, %f908;
	setp.eq.f32 	%p222, %f868, %f908;
	mul.f32 	%f869, %f908, 0f00000000;
	selp.f32 	%f870, %f869, %f864, %p222;
	abs.f32 	%f871, %f908;
	setp.gt.f32 	%p223, %f871, 0f4B800000;
	add.f32 	%f872, %f870, 0f3F800000;
	selp.f32 	%f873, %f872, %f867, %p223;
	mov.b32 	%r435, %f873;
	mov.b32 	%r434, %f137;
	// begin inline asm
	cvt.rn.f16x2.f32 %r433, %r435, %r434;
	// end inline asm
	mov.b32 	%r441, %f870;
	xor.b32  	%r438, %r441, -2147483648;
	mov.b32 	%r440, %f136;
	xor.b32  	%r437, %r440, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r436, %r438, %r437;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r439, %r441, %r440;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r442, %r435, %r434;
	// end inline asm
	shl.b32 	%r454, %r5, 12;
	and.b32  	%r455, %r114, 28;
	shl.b32 	%r456, %r2, 5;
	and.b32  	%r457, %r456, 96;
	or.b32  	%r87, %r455, %r457;
	and.b32  	%r88, %r456, 128;
	or.b32  	%r458, %r88, %r87;
	or.b32  	%r89, %r454, %r458;
	and.b32  	%r90, %r1, 8;
	shl.b32 	%r459, %r1, 4;
	or.b32  	%r460, %r459, %r90;
	shr.u32 	%r461, %r460, 2;
	and.b32  	%r462, %r461, 30;
	and.b32  	%r91, %r1, 4;
	shr.u32 	%r463, %r3, 1;
	and.b32  	%r464, %r4, 32;
	or.b32  	%r93, %r464, %r463;
	or.b32  	%r94, %r93, 8;
	or.b32  	%r95, %r93, 16;
	or.b32  	%r96, %r93, 24;
	or.b32  	%r465, %r118, %r117;
	shr.u32 	%r466, %r465, 1;
	mul.lo.s32 	%r467, %r466, 65;
	add.s32 	%r468, %r93, %r467;
	add.s32 	%r469, %r94, %r467;
	add.s32 	%r470, %r95, %r467;
	add.s32 	%r471, %r96, %r467;
	shl.b32 	%r472, %r3, 1;
	or.b32  	%r473, %r472, %r122;
	mul.lo.s32 	%r474, %r473, 65;
	add.s32 	%r475, %r462, %r474;
	mul.wide.u32 	%rd87, %r475, 4;
	mov.u64 	%rd88, shmem;
	add.s64 	%rd5, %rd88, %rd87;
	cvt.u64.u32 	%rd89, %r462;
	cvt.u64.u32 	%rd90, %r474;
	add.s64 	%rd91, %rd90, %rd89;
	shl.b64 	%rd92, %rd91, 2;
	add.s64 	%rd6, %rd88, %rd92;
	shl.b32 	%r476, %r7, 18;
	add.s32 	%r477, %r476, -786432;
	shl.b32 	%r478, %r3, 2;
	or.b32  	%r479, %r124, %r478;
	or.b32  	%r480, %r479, %r116;
	shl.b32 	%r97, %r480, 8;
	cvt.s64.s32 	%rd7, %r477;
	or.b32  	%r98, %r97, %r88;
	mul.lo.s32 	%r481, %r122, 65;
	and.b32  	%r482, %r3, 1;
	neg.s32 	%r483, %r482;
	setp.eq.b32 	%p225, %r482, 1;
	and.b32  	%r484, %r483, 1040;
	bfe.s32 	%r485, %r3, 1, 1;
	and.b32  	%r486, %r3, 2;
	setp.eq.s32 	%p226, %r486, 0;
	and.b32  	%r487, %r485, 520;
	shr.u32 	%r488, %r3, 3;
	mul.lo.s32 	%r489, %r488, 130;
	bfe.s32 	%r490, %r3, 2, 1;
	and.b32  	%r491, %r3, 4;
	setp.eq.s32 	%p227, %r491, 0;
	and.b32  	%r492, %r490, 260;
	add.s32 	%r493, %r484, %r462;
	add.s32 	%r494, %r493, %r481;
	add.s32 	%r495, %r494, %r487;
	add.s32 	%r496, %r495, %r489;
	add.s32 	%r497, %r496, %r492;
	mul.wide.u32 	%rd93, %r497, 4;
	add.s64 	%rd8, %rd88, %rd93;
	selp.b64 	%rd94, 0, 260, %p227;
	cvt.u64.u32 	%rd95, %r489;
	selp.b64 	%rd96, 0, 520, %p226;
	cvt.u64.u32 	%rd97, %r481;
	selp.b64 	%rd98, 1040, 0, %p225;
	add.s64 	%rd99, %rd89, %rd98;
	add.s64 	%rd100, %rd99, %rd97;
	add.s64 	%rd101, %rd100, %rd96;
	add.s64 	%rd102, %rd101, %rd95;
	add.s64 	%rd103, %rd102, %rd94;
	shl.b64 	%rd104, %rd103, 2;
	add.s64 	%rd9, %rd88, %rd104;
	add.s32 	%r498, %r497, 2113;
	mul.wide.u32 	%rd105, %r498, 4;
	add.s64 	%rd10, %rd88, %rd105;
	add.s32 	%r499, %r497, 2082;
	mul.wide.u32 	%rd106, %r499, 4;
	add.s64 	%rd11, %rd88, %rd106;
	add.s32 	%r500, %r497, 2114;
	mul.wide.u32 	%rd107, %r500, 4;
	add.s64 	%rd12, %rd88, %rd107;
	add.s32 	%r501, %r497, 4194;
	mul.wide.u32 	%rd108, %r501, 4;
	add.s64 	%rd13, %rd88, %rd108;
	add.s32 	%r502, %r497, 4163;
	mul.wide.u32 	%rd109, %r502, 4;
	add.s64 	%rd14, %rd88, %rd109;
	add.s32 	%r503, %r497, 4195;
	mul.wide.u32 	%rd110, %r503, 4;
	add.s64 	%rd15, %rd88, %rd110;
	add.s32 	%r504, %r497, 6275;
	mul.wide.u32 	%rd111, %r504, 4;
	add.s64 	%rd16, %rd88, %rd111;
	add.s32 	%r505, %r497, 6244;
	mul.wide.u32 	%rd112, %r505, 4;
	add.s64 	%rd17, %rd88, %rd112;
	add.s32 	%r506, %r497, 6276;
	mul.wide.u32 	%rd113, %r506, 4;
	add.s64 	%rd18, %rd88, %rd113;
	mul.wide.u32 	%rd114, %r471, 4;
	add.s64 	%rd19, %rd88, %rd114;
	mul.wide.u32 	%rd115, %r470, 4;
	add.s64 	%rd20, %rd88, %rd115;
	mul.wide.u32 	%rd116, %r469, 4;
	add.s64 	%rd21, %rd88, %rd116;
	mul.wide.u32 	%rd117, %r468, 4;
	add.s64 	%rd22, %rd88, %rd117;
	setp.eq.s32 	%p228, %r90, 0;
	mov.u16 	%rs1176, 25600;
	mov.u16 	%rs1072, 21504;
	mov.u16 	%rs1184, 18432;
	mov.u16 	%rs1142, -14592;
	mov.u32 	%r8040, %r7995;
	mov.u32 	%r8039, %r7995;
	mov.u32 	%r8038, %r7995;
	mov.u32 	%r8037, %r7995;
	mov.u32 	%r8036, %r7995;
	mov.u32 	%r8035, %r7995;
	mov.u32 	%r8034, %r7995;
	mov.u32 	%r8033, %r7995;
	mov.u32 	%r8032, %r7995;
	mov.u32 	%r8031, %r7995;
	mov.u32 	%r8030, %r7995;
	mov.u32 	%r8029, %r7995;
	mov.u32 	%r111, %r7995;
	bra.uni 	$L__BB0_129;
$L__BB0_153:                            // %pass16867
                                        //   in Loop: Header=BB0_129 Depth=1
	or.b32  	%r7991, %r7997, 786432;
	cvt.s64.s32 	%rd171, %r7991;
	add.s64 	%rd172, %rd171, %rd7;
	shr.u64 	%rd173, %rd172, 35;
	add.s64 	%rd174, %rd172, %rd173;
	shr.s64 	%rd175, %rd174, 29;
	setp.lt.s64 	%p256, %rd172, 0;
	and.b64  	%rd176, %rd174, -536870912;
	setp.ne.s64 	%p257, %rd176, %rd172;
	and.pred  	%p258, %p256, %p257;
	selp.u64 	%rd177, 1, 0, %p258;
	sub.s64 	%rd178, %rd177, %rd175;
	shl.b64 	%rd179, %rd178, 29;
	add.s64 	%rd180, %rd179, %rd172;
	shl.b64 	%rd181, %rd180, 2;
	add.s64 	%rd182, %rd3, %rd181;
	st.global.v4.u32 	[%rd182], {%r182, %r184, %r183, %r185};
	setp.ne.s32 	%p259, %r111, 130816;
	add.s32 	%r111, %r111, 256;
	add.s32 	%r7992, %r111, %r5;
	setp.gt.s32 	%p260, %r6, %r7992;
	and.pred  	%p261, %p259, %p260;
	@%p261 bra 	$L__BB0_129;
	bra.uni 	$L__BB0_154;
$L__BB0_129:                            // %L1562
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_130 Depth 2
	or.b32  	%r572, %r111, %r1;
	and.b32  	%r573, %r572, 130832;
	or.b32  	%r574, %r573, %r117;
	or.b32  	%r575, %r574, %r3;
	shl.b32 	%r576, %r575, 12;
	add.s32 	%r577, %r89, %r576;
	shr.s32 	%r578, %r577, 31;
	shr.u32 	%r579, %r578, 3;
	add.s32 	%r580, %r577, %r579;
	shr.s32 	%r581, %r580, 29;
	setp.lt.s32 	%p229, %r577, 0;
	and.b32  	%r582, %r580, -536870912;
	setp.ne.s32 	%p230, %r582, %r577;
	and.pred  	%p231, %p229, %p230;
	selp.u32 	%r583, 1, 0, %p231;
	sub.s32 	%r584, %r583, %r581;
	shl.b32 	%r585, %r584, 29;
	add.s32 	%r586, %r585, %r577;
	mul.wide.s32 	%rd118, %r586, 4;
	add.s64 	%rd119, %rd2, %rd118;
	ld.global.v4.u32 	{%r587, %r588, %r589, %r590}, [%rd119];
	or.b32  	%r591, %r576, 262144;
	add.s32 	%r592, %r89, %r591;
	shr.s32 	%r593, %r592, 31;
	shr.u32 	%r594, %r593, 3;
	add.s32 	%r595, %r592, %r594;
	shr.s32 	%r596, %r595, 29;
	setp.lt.s32 	%p232, %r592, 0;
	and.b32  	%r597, %r595, -536870912;
	setp.ne.s32 	%p233, %r597, %r592;
	and.pred  	%p234, %p232, %p233;
	selp.u32 	%r598, 1, 0, %p234;
	sub.s32 	%r599, %r598, %r596;
	shl.b32 	%r600, %r599, 29;
	add.s32 	%r601, %r600, %r592;
	mul.wide.s32 	%rd120, %r601, 4;
	add.s64 	%rd121, %rd2, %rd120;
	ld.global.v4.u32 	{%r602, %r603, %r604, %r605}, [%rd121];
	or.b32  	%r606, %r576, 524288;
	add.s32 	%r607, %r89, %r606;
	shr.s32 	%r608, %r607, 31;
	shr.u32 	%r609, %r608, 3;
	add.s32 	%r610, %r607, %r609;
	shr.s32 	%r611, %r610, 29;
	setp.lt.s32 	%p235, %r607, 0;
	and.b32  	%r612, %r610, -536870912;
	setp.ne.s32 	%p236, %r612, %r607;
	and.pred  	%p237, %p235, %p236;
	selp.u32 	%r613, 1, 0, %p237;
	sub.s32 	%r614, %r613, %r611;
	shl.b32 	%r615, %r614, 29;
	add.s32 	%r616, %r615, %r607;
	mul.wide.s32 	%rd122, %r616, 4;
	add.s64 	%rd123, %rd2, %rd122;
	ld.global.v4.u32 	{%r617, %r618, %r619, %r620}, [%rd123];
	or.b32  	%r621, %r576, 786432;
	add.s32 	%r622, %r89, %r621;
	shr.s32 	%r623, %r622, 31;
	shr.u32 	%r624, %r623, 3;
	add.s32 	%r625, %r622, %r624;
	shr.s32 	%r626, %r625, 29;
	setp.lt.s32 	%p238, %r622, 0;
	and.b32  	%r627, %r625, -536870912;
	setp.ne.s32 	%p239, %r627, %r622;
	and.pred  	%p240, %p238, %p239;
	selp.u32 	%r628, 1, 0, %p240;
	sub.s32 	%r629, %r628, %r626;
	shl.b32 	%r630, %r629, 29;
	add.s32 	%r631, %r630, %r622;
	mul.wide.s32 	%rd124, %r631, 4;
	add.s64 	%rd125, %rd2, %rd124;
	ld.global.v4.u32 	{%r632, %r633, %r634, %r635}, [%rd125];
	selp.b32 	%r636, %r589, %r587, %p228;
	shfl.sync.bfly.b32	%r637, %r636, 8, 31, -1;
	selp.b32 	%r508, %r587, %r637, %p228;
	selp.b32 	%r509, %r637, %r589, %p228;
	selp.b32 	%r638, %r590, %r588, %p228;
	shfl.sync.bfly.b32	%r639, %r638, 8, 31, -1;
	selp.b32 	%r516, %r588, %r639, %p228;
	selp.b32 	%r517, %r639, %r590, %p228;
	selp.b32 	%r640, %r604, %r602, %p228;
	shfl.sync.bfly.b32	%r641, %r640, 8, 31, -1;
	selp.b32 	%r524, %r602, %r641, %p228;
	selp.b32 	%r525, %r641, %r604, %p228;
	selp.b32 	%r642, %r605, %r603, %p228;
	shfl.sync.bfly.b32	%r643, %r642, 8, 31, -1;
	selp.b32 	%r532, %r603, %r643, %p228;
	selp.b32 	%r533, %r643, %r605, %p228;
	selp.b32 	%r644, %r619, %r617, %p228;
	shfl.sync.bfly.b32	%r645, %r644, 8, 31, -1;
	selp.b32 	%r540, %r617, %r645, %p228;
	selp.b32 	%r541, %r645, %r619, %p228;
	selp.b32 	%r646, %r620, %r618, %p228;
	shfl.sync.bfly.b32	%r647, %r646, 8, 31, -1;
	selp.b32 	%r548, %r618, %r647, %p228;
	selp.b32 	%r549, %r647, %r620, %p228;
	selp.b32 	%r648, %r634, %r632, %p228;
	shfl.sync.bfly.b32	%r649, %r648, 8, 31, -1;
	selp.b32 	%r556, %r632, %r649, %p228;
	selp.b32 	%r557, %r649, %r634, %p228;
	selp.b32 	%r650, %r635, %r633, %p228;
	shfl.sync.bfly.b32	%r651, %r650, 8, 31, -1;
	selp.b32 	%r564, %r633, %r651, %p228;
	selp.b32 	%r565, %r651, %r635, %p228;
	mov.u32 	%r566, 21520;
	// begin inline asm
	prmt.b32 %r507, %r508, %r509, %r566;
	// end inline asm
	mov.u32 	%r570, 30258;
	// begin inline asm
	prmt.b32 %r511, %r508, %r509, %r570;
	// end inline asm
	// begin inline asm
	prmt.b32 %r515, %r516, %r517, %r566;
	// end inline asm
	// begin inline asm
	prmt.b32 %r519, %r516, %r517, %r570;
	// end inline asm
	// begin inline asm
	prmt.b32 %r523, %r524, %r525, %r566;
	// end inline asm
	// begin inline asm
	prmt.b32 %r527, %r524, %r525, %r570;
	// end inline asm
	// begin inline asm
	prmt.b32 %r531, %r532, %r533, %r566;
	// end inline asm
	// begin inline asm
	prmt.b32 %r535, %r532, %r533, %r570;
	// end inline asm
	// begin inline asm
	prmt.b32 %r539, %r540, %r541, %r566;
	// end inline asm
	// begin inline asm
	prmt.b32 %r543, %r540, %r541, %r570;
	// end inline asm
	// begin inline asm
	prmt.b32 %r547, %r548, %r549, %r566;
	// end inline asm
	// begin inline asm
	prmt.b32 %r551, %r548, %r549, %r570;
	// end inline asm
	// begin inline asm
	prmt.b32 %r555, %r556, %r557, %r566;
	// end inline asm
	// begin inline asm
	prmt.b32 %r559, %r556, %r557, %r570;
	// end inline asm
	// begin inline asm
	prmt.b32 %r563, %r564, %r565, %r566;
	// end inline asm
	// begin inline asm
	prmt.b32 %r567, %r564, %r565, %r570;
	// end inline asm
	st.shared.u32 	[%rd8], %r507;
	st.shared.u32 	[%rd9+128], %r511;
	st.shared.u32 	[%rd9+4], %r515;
	st.shared.u32 	[%rd9+132], %r519;
	st.shared.u32 	[%rd8+8324], %r523;
	st.shared.u32 	[%rd10], %r527;
	st.shared.u32 	[%rd11], %r531;
	st.shared.u32 	[%rd12], %r535;
	st.shared.u32 	[%rd8+16648], %r539;
	st.shared.u32 	[%rd13], %r543;
	st.shared.u32 	[%rd14], %r547;
	st.shared.u32 	[%rd15], %r551;
	st.shared.u32 	[%rd8+24972], %r555;
	st.shared.u32 	[%rd16], %r559;
	st.shared.u32 	[%rd17], %r563;
	st.shared.u32 	[%rd18], %r567;
	bar.sync 	0;
	or.b32  	%r652, %r111, %r124;
	or.b32  	%r112, %r652, %r91;
	shr.u32 	%r8027, %r112, 6;
	mov.u64 	%rd185, %rd22;
	mov.u64 	%rd186, %rd21;
	mov.u64 	%rd187, %rd20;
	mov.u64 	%rd188, %rd19;
	mov.u32 	%r8028, %r7995;
$L__BB0_130:                            // %pass5580
                                        //   Parent Loop BB0_129 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add.s32 	%r7837, %r112, %r8028;
	or.b32  	%r7838, %r7837, %r208;
	bfe.s32 	%r7839, %r7838, 4, 1;
	and.b32  	%r7840, %r7839, 65;
	and.b32  	%r7841, %r7837, 1;
	neg.s32 	%r7842, %r7841;
	and.b32  	%r7843, %r7842, 1040;
	bfe.s32 	%r7844, %r7837, 1, 1;
	and.b32  	%r7845, %r7844, 520;
	bfe.s32 	%r7846, %r7838, 3, 1;
	and.b32  	%r7847, %r7846, 130;
	bfe.s32 	%r7848, %r7837, 2, 1;
	and.b32  	%r7849, %r7848, 260;
	and.b32  	%r7850, %r8027, 3;
	mul.lo.s32 	%r7851, %r7850, 2081;
	or.b32  	%r7852, %r93, %r7843;
	add.s32 	%r7853, %r7852, %r7840;
	add.s32 	%r7854, %r7853, %r7845;
	add.s32 	%r7855, %r7854, %r7847;
	add.s32 	%r7856, %r7855, %r7849;
	add.s32 	%r7857, %r7856, %r7851;
	mul.wide.u32 	%rd126, %r7857, 4;
	add.s64 	%rd128, %rd88, %rd126;
	ld.shared.u32 	%r7858, [%rd128];
	or.b32  	%r7859, %r94, %r7843;
	add.s32 	%r7860, %r7859, %r7840;
	add.s32 	%r7861, %r7860, %r7845;
	add.s32 	%r7862, %r7861, %r7847;
	add.s32 	%r7863, %r7862, %r7849;
	add.s32 	%r7864, %r7863, %r7851;
	mul.wide.u32 	%rd129, %r7864, 4;
	add.s64 	%rd130, %rd88, %rd129;
	ld.shared.u32 	%r7865, [%rd130];
	add.s32 	%r7866, %r95, %r7843;
	add.s32 	%r7867, %r7866, %r7840;
	add.s32 	%r7868, %r7867, %r7845;
	add.s32 	%r7869, %r7868, %r7847;
	add.s32 	%r7870, %r7869, %r7849;
	add.s32 	%r7871, %r7870, %r7851;
	mul.wide.u32 	%rd131, %r7871, 4;
	add.s64 	%rd132, %rd88, %rd131;
	ld.shared.u32 	%r7872, [%rd132];
	add.s32 	%r7873, %r96, %r7843;
	add.s32 	%r7874, %r7873, %r7840;
	add.s32 	%r7875, %r7874, %r7845;
	add.s32 	%r7876, %r7875, %r7847;
	add.s32 	%r7877, %r7876, %r7849;
	add.s32 	%r7878, %r7877, %r7851;
	mul.wide.u32 	%rd133, %r7878, 4;
	add.s64 	%rd134, %rd88, %rd133;
	ld.shared.u32 	%r7879, [%rd134];
	// begin inline asm
	mov.b32 %r658, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r669, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r657, %r7858, -2004318072;
	mov.u32 	%r656, 983055;
	// begin inline asm
	lop3.b32 %r655, %r656, %r657, %r658, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r659, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r660, %r658, %r659;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r663, %r655, %r660;
	// end inline asm
	mov.u32 	%r667, 15728880;
	// begin inline asm
	lop3.b32 %r666, %r667, %r657, %r669, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r670, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r671, %r669, %r670;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r674, %r666, %r671;
	// end inline asm
	shr.u32 	%r679, %r657, 8;
	// begin inline asm
	lop3.b32 %r677, %r656, %r679, %r658, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r681, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r682, %r658, %r681;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r685, %r677, %r682;
	// end inline asm
	// begin inline asm
	lop3.b32 %r688, %r667, %r679, %r669, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r692, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r693, %r669, %r692;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r696, %r688, %r693;
	// end inline asm
	// begin inline asm
	mov.b32 %r704, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r715, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r703, %r7865, -2004318072;
	// begin inline asm
	lop3.b32 %r701, %r656, %r703, %r704, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r705, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r706, %r704, %r705;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r709, %r701, %r706;
	// end inline asm
	// begin inline asm
	lop3.b32 %r712, %r667, %r703, %r715, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r716, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r717, %r715, %r716;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r720, %r712, %r717;
	// end inline asm
	shr.u32 	%r725, %r703, 8;
	// begin inline asm
	lop3.b32 %r723, %r656, %r725, %r704, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r727, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r728, %r704, %r727;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r731, %r723, %r728;
	// end inline asm
	// begin inline asm
	lop3.b32 %r734, %r667, %r725, %r715, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r738, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r739, %r715, %r738;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r742, %r734, %r739;
	// end inline asm
	// begin inline asm
	mov.b32 %r750, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r761, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r749, %r7872, -2004318072;
	// begin inline asm
	lop3.b32 %r747, %r656, %r749, %r750, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r751, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r752, %r750, %r751;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r755, %r747, %r752;
	// end inline asm
	// begin inline asm
	lop3.b32 %r758, %r667, %r749, %r761, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r762, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r763, %r761, %r762;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r766, %r758, %r763;
	// end inline asm
	shr.u32 	%r771, %r749, 8;
	// begin inline asm
	lop3.b32 %r769, %r656, %r771, %r750, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r773, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r774, %r750, %r773;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r777, %r769, %r774;
	// end inline asm
	// begin inline asm
	lop3.b32 %r780, %r667, %r771, %r761, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r784, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r785, %r761, %r784;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r788, %r780, %r785;
	// end inline asm
	// begin inline asm
	mov.b32 %r796, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r807, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r795, %r7879, -2004318072;
	// begin inline asm
	lop3.b32 %r793, %r656, %r795, %r796, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r797, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r798, %r796, %r797;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r801, %r793, %r798;
	// end inline asm
	// begin inline asm
	lop3.b32 %r804, %r667, %r795, %r807, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r808, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r809, %r807, %r808;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r812, %r804, %r809;
	// end inline asm
	shr.u32 	%r817, %r795, 8;
	// begin inline asm
	lop3.b32 %r815, %r656, %r817, %r796, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r819, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r820, %r796, %r819;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r823, %r815, %r820;
	// end inline asm
	// begin inline asm
	lop3.b32 %r826, %r667, %r817, %r807, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r830, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r831, %r807, %r830;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r834, %r826, %r831;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r837, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r839, %r837, %r663;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r842, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r844, %r842, %r674;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r847, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r849, %r847, %r685;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r852, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r854, %r852, %r696;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r857, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r859, %r857, %r709;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r862, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r864, %r862, %r720;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r867, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r869, %r867, %r731;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r872, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r874, %r872, %r742;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r877, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r879, %r877, %r755;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r882, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r884, %r882, %r766;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r887, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r889, %r887, %r777;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r892, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r894, %r892, %r788;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r897, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r899, %r897, %r801;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r902, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r904, %r902, %r812;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r907, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r909, %r907, %r823;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r912, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r914, %r912, %r834;
	// end inline asm
	// begin inline asm
	mov.b32 %r922, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r933, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r921, %r8040, -2004318072;
	// begin inline asm
	lop3.b32 %r919, %r656, %r921, %r922, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r923, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r924, %r922, %r923;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r927, %r919, %r924;
	// end inline asm
	// begin inline asm
	lop3.b32 %r930, %r667, %r921, %r933, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r934, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r935, %r933, %r934;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r938, %r930, %r935;
	// end inline asm
	shr.u32 	%r943, %r921, 8;
	// begin inline asm
	lop3.b32 %r941, %r656, %r943, %r922, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r945, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r946, %r922, %r945;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r949, %r941, %r946;
	// end inline asm
	// begin inline asm
	lop3.b32 %r952, %r667, %r943, %r933, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r956, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r957, %r933, %r956;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r960, %r952, %r957;
	// end inline asm
	// begin inline asm
	mov.b32 %r968, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r979, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r967, %r8039, -2004318072;
	// begin inline asm
	lop3.b32 %r965, %r656, %r967, %r968, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r969, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r970, %r968, %r969;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r973, %r965, %r970;
	// end inline asm
	// begin inline asm
	lop3.b32 %r976, %r667, %r967, %r979, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r980, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r981, %r979, %r980;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r984, %r976, %r981;
	// end inline asm
	shr.u32 	%r989, %r967, 8;
	// begin inline asm
	lop3.b32 %r987, %r656, %r989, %r968, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r991, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r992, %r968, %r991;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r995, %r987, %r992;
	// end inline asm
	// begin inline asm
	lop3.b32 %r998, %r667, %r989, %r979, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1002, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1003, %r979, %r1002;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1006, %r998, %r1003;
	// end inline asm
	// begin inline asm
	mov.b32 %r1014, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1025, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1013, %r8038, -2004318072;
	// begin inline asm
	lop3.b32 %r1011, %r656, %r1013, %r1014, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1015, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1016, %r1014, %r1015;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1019, %r1011, %r1016;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1022, %r667, %r1013, %r1025, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1026, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1027, %r1025, %r1026;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1030, %r1022, %r1027;
	// end inline asm
	shr.u32 	%r1035, %r1013, 8;
	// begin inline asm
	lop3.b32 %r1033, %r656, %r1035, %r1014, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1037, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1038, %r1014, %r1037;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1041, %r1033, %r1038;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1044, %r667, %r1035, %r1025, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1048, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1049, %r1025, %r1048;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1052, %r1044, %r1049;
	// end inline asm
	// begin inline asm
	mov.b32 %r1060, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1071, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1059, %r8037, -2004318072;
	// begin inline asm
	lop3.b32 %r1057, %r656, %r1059, %r1060, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1061, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1062, %r1060, %r1061;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1065, %r1057, %r1062;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1068, %r667, %r1059, %r1071, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1072, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1073, %r1071, %r1072;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1076, %r1068, %r1073;
	// end inline asm
	shr.u32 	%r1081, %r1059, 8;
	// begin inline asm
	lop3.b32 %r1079, %r656, %r1081, %r1060, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1083, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1084, %r1060, %r1083;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1087, %r1079, %r1084;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1090, %r667, %r1081, %r1071, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1094, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1095, %r1071, %r1094;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1098, %r1090, %r1095;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1101, %r226, %r927, %r839;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1105, %r226, %r938, %r844;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1109, %r226, %r949, %r849;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1113, %r226, %r960, %r854;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1117, %r226, %r973, %r859;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1121, %r226, %r984, %r864;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1125, %r226, %r995, %r869;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1129, %r226, %r1006, %r874;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1133, %r226, %r1019, %r879;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1137, %r226, %r1030, %r884;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1141, %r226, %r1041, %r889;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1145, %r226, %r1052, %r894;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1149, %r226, %r1065, %r899;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1153, %r226, %r1076, %r904;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1157, %r226, %r1087, %r909;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1161, %r226, %r1098, %r914;
	// end inline asm
	// begin inline asm
	mov.b32 %r1170, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1181, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1169, %r8036, -2004318072;
	// begin inline asm
	lop3.b32 %r1167, %r656, %r1169, %r1170, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1171, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1172, %r1170, %r1171;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1175, %r1167, %r1172;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1178, %r667, %r1169, %r1181, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1182, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1183, %r1181, %r1182;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1186, %r1178, %r1183;
	// end inline asm
	shr.u32 	%r1191, %r1169, 8;
	// begin inline asm
	lop3.b32 %r1189, %r656, %r1191, %r1170, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1193, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1194, %r1170, %r1193;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1197, %r1189, %r1194;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1200, %r667, %r1191, %r1181, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1204, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1205, %r1181, %r1204;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1208, %r1200, %r1205;
	// end inline asm
	// begin inline asm
	mov.b32 %r1216, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1227, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1215, %r8035, -2004318072;
	// begin inline asm
	lop3.b32 %r1213, %r656, %r1215, %r1216, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1217, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1218, %r1216, %r1217;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1221, %r1213, %r1218;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1224, %r667, %r1215, %r1227, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1228, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1229, %r1227, %r1228;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1232, %r1224, %r1229;
	// end inline asm
	shr.u32 	%r1237, %r1215, 8;
	// begin inline asm
	lop3.b32 %r1235, %r656, %r1237, %r1216, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1239, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1240, %r1216, %r1239;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1243, %r1235, %r1240;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1246, %r667, %r1237, %r1227, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1250, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1251, %r1227, %r1250;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1254, %r1246, %r1251;
	// end inline asm
	// begin inline asm
	mov.b32 %r1262, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1273, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1261, %r8034, -2004318072;
	// begin inline asm
	lop3.b32 %r1259, %r656, %r1261, %r1262, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1263, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1264, %r1262, %r1263;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1267, %r1259, %r1264;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1270, %r667, %r1261, %r1273, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1274, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1275, %r1273, %r1274;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1278, %r1270, %r1275;
	// end inline asm
	shr.u32 	%r1283, %r1261, 8;
	// begin inline asm
	lop3.b32 %r1281, %r656, %r1283, %r1262, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1285, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1286, %r1262, %r1285;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1289, %r1281, %r1286;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1292, %r667, %r1283, %r1273, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1296, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1297, %r1273, %r1296;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1300, %r1292, %r1297;
	// end inline asm
	// begin inline asm
	mov.b32 %r1308, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1319, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1307, %r8033, -2004318072;
	// begin inline asm
	lop3.b32 %r1305, %r656, %r1307, %r1308, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1309, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1310, %r1308, %r1309;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1313, %r1305, %r1310;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1316, %r667, %r1307, %r1319, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1320, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1321, %r1319, %r1320;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1324, %r1316, %r1321;
	// end inline asm
	shr.u32 	%r1329, %r1307, 8;
	// begin inline asm
	lop3.b32 %r1327, %r656, %r1329, %r1308, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1331, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1332, %r1308, %r1331;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1335, %r1327, %r1332;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1338, %r667, %r1329, %r1319, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1342, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1343, %r1319, %r1342;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1346, %r1338, %r1343;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1349, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1351, %r1349, %r1175, %r1101;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1355, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1357, %r1355, %r1186, %r1105;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1361, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1363, %r1361, %r1197, %r1109;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1367, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1369, %r1367, %r1208, %r1113;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1373, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1375, %r1373, %r1221, %r1117;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1379, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1381, %r1379, %r1232, %r1121;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1385, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1387, %r1385, %r1243, %r1125;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1391, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1393, %r1391, %r1254, %r1129;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1397, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1399, %r1397, %r1267, %r1133;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1403, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1405, %r1403, %r1278, %r1137;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1409, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1411, %r1409, %r1289, %r1141;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1415, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1417, %r1415, %r1300, %r1145;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1421, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1423, %r1421, %r1313, %r1149;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1427, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1429, %r1427, %r1324, %r1153;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1433, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1435, %r1433, %r1335, %r1157;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1439, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1441, %r1439, %r1346, %r1161;
	// end inline asm
	// begin inline asm
	mov.b32 %r1450, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1461, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1449, %r8032, -2004318072;
	// begin inline asm
	lop3.b32 %r1447, %r656, %r1449, %r1450, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1451, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1452, %r1450, %r1451;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1455, %r1447, %r1452;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1458, %r667, %r1449, %r1461, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1462, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1463, %r1461, %r1462;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1466, %r1458, %r1463;
	// end inline asm
	shr.u32 	%r1471, %r1449, 8;
	// begin inline asm
	lop3.b32 %r1469, %r656, %r1471, %r1450, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1473, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1474, %r1450, %r1473;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1477, %r1469, %r1474;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1480, %r667, %r1471, %r1461, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1484, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1485, %r1461, %r1484;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1488, %r1480, %r1485;
	// end inline asm
	// begin inline asm
	mov.b32 %r1496, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1507, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1495, %r8031, -2004318072;
	// begin inline asm
	lop3.b32 %r1493, %r656, %r1495, %r1496, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1497, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1498, %r1496, %r1497;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1501, %r1493, %r1498;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1504, %r667, %r1495, %r1507, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1508, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1509, %r1507, %r1508;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1512, %r1504, %r1509;
	// end inline asm
	shr.u32 	%r1517, %r1495, 8;
	// begin inline asm
	lop3.b32 %r1515, %r656, %r1517, %r1496, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1519, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1520, %r1496, %r1519;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1523, %r1515, %r1520;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1526, %r667, %r1517, %r1507, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1530, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1531, %r1507, %r1530;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1534, %r1526, %r1531;
	// end inline asm
	// begin inline asm
	mov.b32 %r1542, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1553, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1541, %r8030, -2004318072;
	// begin inline asm
	lop3.b32 %r1539, %r656, %r1541, %r1542, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1543, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1544, %r1542, %r1543;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1547, %r1539, %r1544;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1550, %r667, %r1541, %r1553, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1554, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1555, %r1553, %r1554;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1558, %r1550, %r1555;
	// end inline asm
	shr.u32 	%r1563, %r1541, 8;
	// begin inline asm
	lop3.b32 %r1561, %r656, %r1563, %r1542, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1565, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1566, %r1542, %r1565;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1569, %r1561, %r1566;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1572, %r667, %r1563, %r1553, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1576, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1577, %r1553, %r1576;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1580, %r1572, %r1577;
	// end inline asm
	// begin inline asm
	mov.b32 %r1588, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1599, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1587, %r8029, -2004318072;
	// begin inline asm
	lop3.b32 %r1585, %r656, %r1587, %r1588, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1589, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1590, %r1588, %r1589;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1593, %r1585, %r1590;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1596, %r667, %r1587, %r1599, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1600, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1601, %r1599, %r1600;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1604, %r1596, %r1601;
	// end inline asm
	shr.u32 	%r1609, %r1587, 8;
	// begin inline asm
	lop3.b32 %r1607, %r656, %r1609, %r1588, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1611, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1612, %r1588, %r1611;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1615, %r1607, %r1612;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1618, %r667, %r1609, %r1599, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1622, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1623, %r1599, %r1622;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1626, %r1618, %r1623;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1700, %r262, %r1455, %r1351;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1697, %r262, %r1466, %r1357;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1709, %r262, %r1477, %r1363;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1706, %r262, %r1488, %r1369;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1718, %r262, %r1501, %r1375;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1715, %r262, %r1512, %r1381;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1727, %r262, %r1523, %r1387;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1724, %r262, %r1534, %r1393;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1736, %r262, %r1547, %r1399;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1733, %r262, %r1558, %r1405;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1745, %r262, %r1569, %r1411;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1742, %r262, %r1580, %r1417;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1754, %r262, %r1593, %r1423;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1751, %r262, %r1604, %r1429;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1763, %r262, %r1615, %r1435;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1760, %r262, %r1626, %r1441;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1693, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1695, %r1693, %r1697;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1698, %r308, %r1700, %r1695;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1702, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1704, %r1702, %r1706;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1707, %r308, %r1709, %r1704;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1711, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1713, %r1711, %r1715;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1716, %r308, %r1718, %r1713;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1720, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1722, %r1720, %r1724;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1725, %r308, %r1727, %r1722;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1729, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1731, %r1729, %r1733;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1734, %r308, %r1736, %r1731;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1738, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1740, %r1738, %r1742;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1743, %r308, %r1745, %r1740;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1747, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1749, %r1747, %r1751;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1752, %r308, %r1754, %r1749;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1756, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1758, %r1756, %r1760;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1761, %r308, %r1763, %r1758;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1765, %r311, %r1700;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1768, %r308, %r1697, %r1765;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1772, %r311, %r1709;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1775, %r308, %r1706, %r1772;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1779, %r311, %r1718;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1782, %r308, %r1715, %r1779;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1786, %r311, %r1727;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1789, %r308, %r1724, %r1786;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1793, %r311, %r1736;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1796, %r308, %r1733, %r1793;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1800, %r311, %r1745;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1803, %r308, %r1742, %r1800;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1807, %r311, %r1754;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1810, %r308, %r1751, %r1807;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1814, %r311, %r1763;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1817, %r308, %r1760, %r1814;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1908, %r1905}, {%r355, %r361, %r358, %r364}, {%r1698, %r1768}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1917, %r1914}, {%r355, %r361, %r358, %r364}, {%r1707, %r1775}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1926, %r1923}, {%r355, %r361, %r358, %r364}, {%r1716, %r1782}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1935, %r1932}, {%r355, %r361, %r358, %r364}, {%r1725, %r1789}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1944, %r1941}, {%r355, %r361, %r358, %r364}, {%r1734, %r1796}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1953, %r1950}, {%r355, %r361, %r358, %r364}, {%r1743, %r1803}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1962, %r1959}, {%r355, %r361, %r358, %r364}, {%r1752, %r1810}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1971, %r1968}, {%r355, %r361, %r358, %r364}, {%r1761, %r1817}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1901, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1903, %r1901, %r1905;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1906, %r399, %r1908, %r1903;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1910, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1912, %r1910, %r1914;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1915, %r399, %r1917, %r1912;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1919, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1921, %r1919, %r1923;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1924, %r399, %r1926, %r1921;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1928, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1930, %r1928, %r1932;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1933, %r399, %r1935, %r1930;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1937, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1939, %r1937, %r1941;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1942, %r399, %r1944, %r1939;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1946, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1948, %r1946, %r1950;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1951, %r399, %r1953, %r1948;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1955, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1957, %r1955, %r1959;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1960, %r399, %r1962, %r1957;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1964, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1966, %r1964, %r1968;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1969, %r399, %r1971, %r1966;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1973, %r402, %r1908;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1976, %r399, %r1905, %r1973;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1980, %r402, %r1917;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1983, %r399, %r1914, %r1980;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1987, %r402, %r1926;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1990, %r399, %r1923, %r1987;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1994, %r402, %r1935;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1997, %r399, %r1932, %r1994;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2001, %r402, %r1944;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2004, %r399, %r1941, %r2001;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2008, %r402, %r1953;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2011, %r399, %r1950, %r2008;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2015, %r402, %r1962;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2018, %r399, %r1959, %r2015;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2022, %r402, %r1971;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2025, %r399, %r1968, %r2022;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2029, %r2030}, {%r433, %r439, %r436, %r442}, {%r1906, %r1976}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2039, %r2040}, {%r433, %r439, %r436, %r442}, {%r1915, %r1983}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2049, %r2050}, {%r433, %r439, %r436, %r442}, {%r1924, %r1990}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2059, %r2060}, {%r433, %r439, %r436, %r442}, {%r1933, %r1997}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2069, %r2070}, {%r433, %r439, %r436, %r442}, {%r1942, %r2004}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2079, %r2080}, {%r433, %r439, %r436, %r442}, {%r1951, %r2011}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2089, %r2090}, {%r433, %r439, %r436, %r442}, {%r1960, %r2018}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2099, %r2100}, {%r433, %r439, %r436, %r442}, {%r1969, %r2025}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2109, %r119, %r2029;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2112, %r119, %r2030;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2115, %r119, %r2039;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2118, %r119, %r2040;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2121, %r119, %r2049;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2124, %r119, %r2050;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2127, %r119, %r2059;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2130, %r119, %r2060;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2133, %r119, %r2069;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2136, %r119, %r2070;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2139, %r119, %r2079;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2142, %r119, %r2080;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2145, %r119, %r2089;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2148, %r119, %r2090;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2151, %r119, %r2099;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2154, %r119, %r2100;
	// end inline asm
	// begin inline asm
	mov.b32 %r2157, {%rs1142, %rs1142};
	// end inline asm
	mov.u16 	%rs195, 18176;
	// begin inline asm
	mov.b32 %r2158, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2159, %r2109, %r2157;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2162, %r2159, %r2158;
	// end inline asm
	// begin inline asm
	mov.b32 %r2165, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2166, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2167, %r2112, %r2165;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2170, %r2167, %r2166;
	// end inline asm
	// begin inline asm
	mov.b32 %r2173, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2174, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2175, %r2115, %r2173;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2178, %r2175, %r2174;
	// end inline asm
	// begin inline asm
	mov.b32 %r2181, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2182, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2183, %r2118, %r2181;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2186, %r2183, %r2182;
	// end inline asm
	// begin inline asm
	mov.b32 %r2189, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2190, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2191, %r2121, %r2189;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2194, %r2191, %r2190;
	// end inline asm
	// begin inline asm
	mov.b32 %r2197, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2198, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2199, %r2124, %r2197;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2202, %r2199, %r2198;
	// end inline asm
	// begin inline asm
	mov.b32 %r2205, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2206, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2207, %r2127, %r2205;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2210, %r2207, %r2206;
	// end inline asm
	// begin inline asm
	mov.b32 %r2213, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2214, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2215, %r2130, %r2213;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2218, %r2215, %r2214;
	// end inline asm
	// begin inline asm
	mov.b32 %r2221, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2222, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2223, %r2133, %r2221;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2226, %r2223, %r2222;
	// end inline asm
	// begin inline asm
	mov.b32 %r2229, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2230, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2231, %r2136, %r2229;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2234, %r2231, %r2230;
	// end inline asm
	// begin inline asm
	mov.b32 %r2237, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2238, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2239, %r2139, %r2237;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2242, %r2239, %r2238;
	// end inline asm
	// begin inline asm
	mov.b32 %r2245, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2246, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2247, %r2142, %r2245;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2250, %r2247, %r2246;
	// end inline asm
	// begin inline asm
	mov.b32 %r2253, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2254, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2255, %r2145, %r2253;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2258, %r2255, %r2254;
	// end inline asm
	// begin inline asm
	mov.b32 %r2261, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2262, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2263, %r2148, %r2261;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2266, %r2263, %r2262;
	// end inline asm
	// begin inline asm
	mov.b32 %r2269, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2270, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2271, %r2151, %r2269;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2274, %r2271, %r2270;
	// end inline asm
	// begin inline asm
	mov.b32 %r2277, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2278, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2279, %r2154, %r2277;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2282, %r2279, %r2278;
	// end inline asm
	// begin inline asm
	mov.b32 %r2288, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2286, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2287, %r2288, %r2286;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2290, %r2162, %r2287;
	// end inline asm
	// begin inline asm
	mov.b32 %r2293, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2294, %r2288, %r2293;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2297, %r2170, %r2294;
	// end inline asm
	// begin inline asm
	mov.b32 %r2300, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2301, %r2288, %r2300;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2304, %r2178, %r2301;
	// end inline asm
	// begin inline asm
	mov.b32 %r2307, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2308, %r2288, %r2307;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2311, %r2186, %r2308;
	// end inline asm
	mov.u32 	%r2317, 25152;
	// begin inline asm
	prmt.b32 %r2314, %r2290, %r2304, %r2317;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2318, %r2297, %r2311, %r2317;
	// end inline asm
	shl.b32 	%r2325, %r2318, 4;
	mov.u32 	%r2323, 252645135;
	// begin inline asm
	lop3.b32 %r2322, %r2323, %r2314, %r2325, 202;
	// end inline asm
	xor.b32  	%r7880, %r2322, -2004318072;
	// begin inline asm
	mov.b32 %r2329, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2327, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2328, %r2329, %r2327;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2331, %r2194, %r2328;
	// end inline asm
	// begin inline asm
	mov.b32 %r2334, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2335, %r2329, %r2334;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2338, %r2202, %r2335;
	// end inline asm
	// begin inline asm
	mov.b32 %r2341, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2342, %r2329, %r2341;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2345, %r2210, %r2342;
	// end inline asm
	// begin inline asm
	mov.b32 %r2348, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2349, %r2329, %r2348;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2352, %r2218, %r2349;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2355, %r2331, %r2345, %r2317;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2359, %r2338, %r2352, %r2317;
	// end inline asm
	shl.b32 	%r2366, %r2359, 4;
	// begin inline asm
	lop3.b32 %r2363, %r2323, %r2355, %r2366, 202;
	// end inline asm
	xor.b32  	%r7881, %r2363, -2004318072;
	// begin inline asm
	mov.b32 %r2370, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2368, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2369, %r2370, %r2368;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2372, %r2226, %r2369;
	// end inline asm
	// begin inline asm
	mov.b32 %r2375, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2376, %r2370, %r2375;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2379, %r2234, %r2376;
	// end inline asm
	// begin inline asm
	mov.b32 %r2382, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2383, %r2370, %r2382;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2386, %r2242, %r2383;
	// end inline asm
	// begin inline asm
	mov.b32 %r2389, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2390, %r2370, %r2389;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2393, %r2250, %r2390;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2396, %r2372, %r2386, %r2317;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2400, %r2379, %r2393, %r2317;
	// end inline asm
	shl.b32 	%r2407, %r2400, 4;
	// begin inline asm
	lop3.b32 %r2404, %r2323, %r2396, %r2407, 202;
	// end inline asm
	xor.b32  	%r7882, %r2404, -2004318072;
	// begin inline asm
	mov.b32 %r2411, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2409, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2410, %r2411, %r2409;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2413, %r2258, %r2410;
	// end inline asm
	// begin inline asm
	mov.b32 %r2416, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2417, %r2411, %r2416;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2420, %r2266, %r2417;
	// end inline asm
	// begin inline asm
	mov.b32 %r2423, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2424, %r2411, %r2423;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2427, %r2274, %r2424;
	// end inline asm
	// begin inline asm
	mov.b32 %r2430, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2431, %r2411, %r2430;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2434, %r2282, %r2431;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2437, %r2413, %r2427, %r2317;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2441, %r2420, %r2434, %r2317;
	// end inline asm
	shl.b32 	%r2448, %r2441, 4;
	// begin inline asm
	lop3.b32 %r2445, %r2323, %r2437, %r2448, 202;
	// end inline asm
	xor.b32  	%r7883, %r2445, -2004318072;
	st.shared.u32 	[%rd185], %r7880;
	st.shared.u32 	[%rd186], %r7881;
	st.shared.u32 	[%rd187], %r7882;
	st.shared.u32 	[%rd188], %r7883;
	ld.shared.u32 	%r8040, [%rd128];
	ld.shared.u32 	%r8039, [%rd130];
	ld.shared.u32 	%r8038, [%rd132];
	ld.shared.u32 	%r8037, [%rd134];
	// begin inline asm
	mov.b32 %r2454, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2465, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2453, %r8040, -2004318072;
	// begin inline asm
	lop3.b32 %r2451, %r656, %r2453, %r2454, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2455, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2456, %r2454, %r2455;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2459, %r2451, %r2456;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2462, %r667, %r2453, %r2465, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2466, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2467, %r2465, %r2466;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2470, %r2462, %r2467;
	// end inline asm
	shr.u32 	%r2475, %r2453, 8;
	// begin inline asm
	lop3.b32 %r2473, %r656, %r2475, %r2454, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2477, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2478, %r2454, %r2477;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2481, %r2473, %r2478;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2484, %r667, %r2475, %r2465, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2488, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2489, %r2465, %r2488;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2492, %r2484, %r2489;
	// end inline asm
	// begin inline asm
	mov.b32 %r2500, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2511, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2499, %r8039, -2004318072;
	// begin inline asm
	lop3.b32 %r2497, %r656, %r2499, %r2500, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2501, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2502, %r2500, %r2501;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2505, %r2497, %r2502;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2508, %r667, %r2499, %r2511, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2512, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2513, %r2511, %r2512;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2516, %r2508, %r2513;
	// end inline asm
	shr.u32 	%r2521, %r2499, 8;
	// begin inline asm
	lop3.b32 %r2519, %r656, %r2521, %r2500, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2523, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2524, %r2500, %r2523;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2527, %r2519, %r2524;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2530, %r667, %r2521, %r2511, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2534, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2535, %r2511, %r2534;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2538, %r2530, %r2535;
	// end inline asm
	// begin inline asm
	mov.b32 %r2546, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2557, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2545, %r8038, -2004318072;
	// begin inline asm
	lop3.b32 %r2543, %r656, %r2545, %r2546, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2547, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2548, %r2546, %r2547;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2551, %r2543, %r2548;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2554, %r667, %r2545, %r2557, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2558, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2559, %r2557, %r2558;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2562, %r2554, %r2559;
	// end inline asm
	shr.u32 	%r2567, %r2545, 8;
	// begin inline asm
	lop3.b32 %r2565, %r656, %r2567, %r2546, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2569, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2570, %r2546, %r2569;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2573, %r2565, %r2570;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2576, %r667, %r2567, %r2557, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2580, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2581, %r2557, %r2580;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2584, %r2576, %r2581;
	// end inline asm
	// begin inline asm
	mov.b32 %r2592, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2603, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2591, %r8037, -2004318072;
	// begin inline asm
	lop3.b32 %r2589, %r656, %r2591, %r2592, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2593, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2594, %r2592, %r2593;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2597, %r2589, %r2594;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2600, %r667, %r2591, %r2603, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2604, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2605, %r2603, %r2604;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2608, %r2600, %r2605;
	// end inline asm
	shr.u32 	%r2613, %r2591, 8;
	// begin inline asm
	lop3.b32 %r2611, %r656, %r2613, %r2592, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2615, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2616, %r2592, %r2615;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2619, %r2611, %r2616;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2622, %r667, %r2613, %r2603, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2626, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2627, %r2603, %r2626;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2630, %r2622, %r2627;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2633, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2635, %r2633, %r2459;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2638, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2640, %r2638, %r2470;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2643, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2645, %r2643, %r2481;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2648, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2650, %r2648, %r2492;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2653, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2655, %r2653, %r2505;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2658, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2660, %r2658, %r2516;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2663, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2665, %r2663, %r2527;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2668, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2670, %r2668, %r2538;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2673, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2675, %r2673, %r2551;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2678, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2680, %r2678, %r2562;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2683, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2685, %r2683, %r2573;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2688, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2690, %r2688, %r2584;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2693, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2695, %r2693, %r2597;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2698, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2700, %r2698, %r2608;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2703, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2705, %r2703, %r2619;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2708, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2710, %r2708, %r2630;
	// end inline asm
	// begin inline asm
	mov.b32 %r2718, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2729, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2715, %r656, %r1169, %r2718, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2719, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2720, %r2718, %r2719;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2723, %r2715, %r2720;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2726, %r667, %r1169, %r2729, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2730, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2731, %r2729, %r2730;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2734, %r2726, %r2731;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2737, %r656, %r1191, %r2718, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2741, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2742, %r2718, %r2741;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2745, %r2737, %r2742;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2748, %r667, %r1191, %r2729, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2752, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2753, %r2729, %r2752;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2756, %r2748, %r2753;
	// end inline asm
	// begin inline asm
	mov.b32 %r2764, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2775, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2761, %r656, %r1215, %r2764, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2765, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2766, %r2764, %r2765;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2769, %r2761, %r2766;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2772, %r667, %r1215, %r2775, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2776, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2777, %r2775, %r2776;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2780, %r2772, %r2777;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2783, %r656, %r1237, %r2764, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2787, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2788, %r2764, %r2787;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2791, %r2783, %r2788;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2794, %r667, %r1237, %r2775, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2798, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2799, %r2775, %r2798;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2802, %r2794, %r2799;
	// end inline asm
	// begin inline asm
	mov.b32 %r2810, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2821, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2807, %r656, %r1261, %r2810, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2811, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2812, %r2810, %r2811;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2815, %r2807, %r2812;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2818, %r667, %r1261, %r2821, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2822, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2823, %r2821, %r2822;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2826, %r2818, %r2823;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2829, %r656, %r1283, %r2810, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2833, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2834, %r2810, %r2833;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2837, %r2829, %r2834;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2840, %r667, %r1283, %r2821, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2844, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2845, %r2821, %r2844;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2848, %r2840, %r2845;
	// end inline asm
	// begin inline asm
	mov.b32 %r2856, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2867, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2853, %r656, %r1307, %r2856, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2857, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2858, %r2856, %r2857;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2861, %r2853, %r2858;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2864, %r667, %r1307, %r2867, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2868, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2869, %r2867, %r2868;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2872, %r2864, %r2869;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2875, %r656, %r1329, %r2856, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2879, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2880, %r2856, %r2879;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2883, %r2875, %r2880;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2886, %r667, %r1329, %r2867, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2890, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2891, %r2867, %r2890;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2894, %r2886, %r2891;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2897, %r226, %r2723, %r2635;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2901, %r226, %r2734, %r2640;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2905, %r226, %r2745, %r2645;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2909, %r226, %r2756, %r2650;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2913, %r226, %r2769, %r2655;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2917, %r226, %r2780, %r2660;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2921, %r226, %r2791, %r2665;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2925, %r226, %r2802, %r2670;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2929, %r226, %r2815, %r2675;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2933, %r226, %r2826, %r2680;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2937, %r226, %r2837, %r2685;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2941, %r226, %r2848, %r2690;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2945, %r226, %r2861, %r2695;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2949, %r226, %r2872, %r2700;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2953, %r226, %r2883, %r2705;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2957, %r226, %r2894, %r2710;
	// end inline asm
	// begin inline asm
	mov.b32 %r2966, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2977, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2963, %r656, %r1449, %r2966, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2967, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2968, %r2966, %r2967;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2971, %r2963, %r2968;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2974, %r667, %r1449, %r2977, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2978, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2979, %r2977, %r2978;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2982, %r2974, %r2979;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2985, %r656, %r1471, %r2966, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2989, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2990, %r2966, %r2989;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2993, %r2985, %r2990;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2996, %r667, %r1471, %r2977, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3000, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3001, %r2977, %r3000;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3004, %r2996, %r3001;
	// end inline asm
	// begin inline asm
	mov.b32 %r3012, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3023, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3009, %r656, %r1495, %r3012, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3013, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3014, %r3012, %r3013;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3017, %r3009, %r3014;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3020, %r667, %r1495, %r3023, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3024, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3025, %r3023, %r3024;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3028, %r3020, %r3025;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3031, %r656, %r1517, %r3012, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3035, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3036, %r3012, %r3035;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3039, %r3031, %r3036;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3042, %r667, %r1517, %r3023, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3046, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3047, %r3023, %r3046;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3050, %r3042, %r3047;
	// end inline asm
	// begin inline asm
	mov.b32 %r3058, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3069, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3055, %r656, %r1541, %r3058, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3059, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3060, %r3058, %r3059;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3063, %r3055, %r3060;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3066, %r667, %r1541, %r3069, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3070, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3071, %r3069, %r3070;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3074, %r3066, %r3071;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3077, %r656, %r1563, %r3058, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3081, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3082, %r3058, %r3081;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3085, %r3077, %r3082;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3088, %r667, %r1563, %r3069, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3092, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3093, %r3069, %r3092;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3096, %r3088, %r3093;
	// end inline asm
	// begin inline asm
	mov.b32 %r3104, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3115, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3101, %r656, %r1587, %r3104, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3105, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3106, %r3104, %r3105;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3109, %r3101, %r3106;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3112, %r667, %r1587, %r3115, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3116, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3117, %r3115, %r3116;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3120, %r3112, %r3117;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3123, %r656, %r1609, %r3104, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3127, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3128, %r3104, %r3127;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3131, %r3123, %r3128;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3134, %r667, %r1609, %r3115, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3138, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3139, %r3115, %r3138;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3142, %r3134, %r3139;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3145, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3147, %r3145, %r2971, %r2897;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3151, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3153, %r3151, %r2982, %r2901;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3157, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3159, %r3157, %r2993, %r2905;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3163, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3165, %r3163, %r3004, %r2909;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3169, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3171, %r3169, %r3017, %r2913;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3175, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3177, %r3175, %r3028, %r2917;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3181, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3183, %r3181, %r3039, %r2921;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3187, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3189, %r3187, %r3050, %r2925;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3193, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3195, %r3193, %r3063, %r2929;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3199, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3201, %r3199, %r3074, %r2933;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3205, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3207, %r3205, %r3085, %r2937;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3211, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3213, %r3211, %r3096, %r2941;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3217, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3219, %r3217, %r3109, %r2945;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3223, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3225, %r3223, %r3120, %r2949;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3229, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3231, %r3229, %r3131, %r2953;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3235, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3237, %r3235, %r3142, %r2957;
	// end inline asm
	// begin inline asm
	mov.b32 %r3246, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3257, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3243, %r656, %r657, %r3246, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3247, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3248, %r3246, %r3247;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3251, %r3243, %r3248;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3254, %r667, %r657, %r3257, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3258, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3259, %r3257, %r3258;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3262, %r3254, %r3259;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3265, %r656, %r679, %r3246, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3269, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3270, %r3246, %r3269;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3273, %r3265, %r3270;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3276, %r667, %r679, %r3257, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3280, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3281, %r3257, %r3280;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3284, %r3276, %r3281;
	// end inline asm
	// begin inline asm
	mov.b32 %r3292, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3303, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3289, %r656, %r703, %r3292, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3293, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3294, %r3292, %r3293;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3297, %r3289, %r3294;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3300, %r667, %r703, %r3303, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3304, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3305, %r3303, %r3304;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3308, %r3300, %r3305;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3311, %r656, %r725, %r3292, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3315, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3316, %r3292, %r3315;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3319, %r3311, %r3316;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3322, %r667, %r725, %r3303, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3326, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3327, %r3303, %r3326;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3330, %r3322, %r3327;
	// end inline asm
	// begin inline asm
	mov.b32 %r3338, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3349, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3335, %r656, %r749, %r3338, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3339, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3340, %r3338, %r3339;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3343, %r3335, %r3340;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3346, %r667, %r749, %r3349, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3350, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3351, %r3349, %r3350;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3354, %r3346, %r3351;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3357, %r656, %r771, %r3338, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3361, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3362, %r3338, %r3361;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3365, %r3357, %r3362;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3368, %r667, %r771, %r3349, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3372, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3373, %r3349, %r3372;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3376, %r3368, %r3373;
	// end inline asm
	// begin inline asm
	mov.b32 %r3384, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3395, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3381, %r656, %r795, %r3384, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3385, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3386, %r3384, %r3385;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3389, %r3381, %r3386;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3392, %r667, %r795, %r3395, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3396, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3397, %r3395, %r3396;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3400, %r3392, %r3397;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3403, %r656, %r817, %r3384, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3407, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3408, %r3384, %r3407;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3411, %r3403, %r3408;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3414, %r667, %r817, %r3395, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3418, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3419, %r3395, %r3418;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3422, %r3414, %r3419;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3496, %r262, %r3251, %r3147;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3493, %r262, %r3262, %r3153;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3505, %r262, %r3273, %r3159;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3502, %r262, %r3284, %r3165;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3514, %r262, %r3297, %r3171;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3511, %r262, %r3308, %r3177;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3523, %r262, %r3319, %r3183;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3520, %r262, %r3330, %r3189;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3532, %r262, %r3343, %r3195;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3529, %r262, %r3354, %r3201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3541, %r262, %r3365, %r3207;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3538, %r262, %r3376, %r3213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3550, %r262, %r3389, %r3219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3547, %r262, %r3400, %r3225;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3559, %r262, %r3411, %r3231;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3556, %r262, %r3422, %r3237;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3489, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3491, %r3489, %r3493;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3494, %r308, %r3496, %r3491;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3498, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3500, %r3498, %r3502;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3503, %r308, %r3505, %r3500;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3507, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3509, %r3507, %r3511;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3512, %r308, %r3514, %r3509;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3516, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3518, %r3516, %r3520;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3521, %r308, %r3523, %r3518;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3525, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3527, %r3525, %r3529;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3530, %r308, %r3532, %r3527;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3534, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3536, %r3534, %r3538;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3539, %r308, %r3541, %r3536;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3543, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3545, %r3543, %r3547;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3548, %r308, %r3550, %r3545;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3552, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3554, %r3552, %r3556;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3557, %r308, %r3559, %r3554;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3561, %r311, %r3496;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3564, %r308, %r3493, %r3561;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3568, %r311, %r3505;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3571, %r308, %r3502, %r3568;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3575, %r311, %r3514;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3578, %r308, %r3511, %r3575;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3582, %r311, %r3523;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3585, %r308, %r3520, %r3582;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3589, %r311, %r3532;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3592, %r308, %r3529, %r3589;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3596, %r311, %r3541;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3599, %r308, %r3538, %r3596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3603, %r311, %r3550;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3606, %r308, %r3547, %r3603;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3610, %r311, %r3559;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3613, %r308, %r3556, %r3610;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3704, %r3701}, {%r355, %r361, %r358, %r364}, {%r3494, %r3564}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3713, %r3710}, {%r355, %r361, %r358, %r364}, {%r3503, %r3571}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3722, %r3719}, {%r355, %r361, %r358, %r364}, {%r3512, %r3578}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3731, %r3728}, {%r355, %r361, %r358, %r364}, {%r3521, %r3585}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3740, %r3737}, {%r355, %r361, %r358, %r364}, {%r3530, %r3592}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3749, %r3746}, {%r355, %r361, %r358, %r364}, {%r3539, %r3599}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3758, %r3755}, {%r355, %r361, %r358, %r364}, {%r3548, %r3606}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3767, %r3764}, {%r355, %r361, %r358, %r364}, {%r3557, %r3613}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3697, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3699, %r3697, %r3701;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3702, %r399, %r3704, %r3699;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3706, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3708, %r3706, %r3710;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3711, %r399, %r3713, %r3708;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3715, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3717, %r3715, %r3719;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3720, %r399, %r3722, %r3717;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3724, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3726, %r3724, %r3728;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3729, %r399, %r3731, %r3726;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3733, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3735, %r3733, %r3737;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3738, %r399, %r3740, %r3735;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3742, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3744, %r3742, %r3746;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3747, %r399, %r3749, %r3744;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3751, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3753, %r3751, %r3755;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3756, %r399, %r3758, %r3753;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3760, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3762, %r3760, %r3764;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3765, %r399, %r3767, %r3762;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3769, %r402, %r3704;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3772, %r399, %r3701, %r3769;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3776, %r402, %r3713;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3779, %r399, %r3710, %r3776;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3783, %r402, %r3722;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3786, %r399, %r3719, %r3783;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3790, %r402, %r3731;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3793, %r399, %r3728, %r3790;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3797, %r402, %r3740;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3800, %r399, %r3737, %r3797;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3804, %r402, %r3749;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3807, %r399, %r3746, %r3804;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3811, %r402, %r3758;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3814, %r399, %r3755, %r3811;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3818, %r402, %r3767;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3821, %r399, %r3764, %r3818;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3825, %r3826}, {%r433, %r439, %r436, %r442}, {%r3702, %r3772}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3835, %r3836}, {%r433, %r439, %r436, %r442}, {%r3711, %r3779}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3845, %r3846}, {%r433, %r439, %r436, %r442}, {%r3720, %r3786}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3855, %r3856}, {%r433, %r439, %r436, %r442}, {%r3729, %r3793}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3865, %r3866}, {%r433, %r439, %r436, %r442}, {%r3738, %r3800}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3875, %r3876}, {%r433, %r439, %r436, %r442}, {%r3747, %r3807}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3885, %r3886}, {%r433, %r439, %r436, %r442}, {%r3756, %r3814}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3895, %r3896}, {%r433, %r439, %r436, %r442}, {%r3765, %r3821}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3905, %r119, %r3825;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3908, %r119, %r3826;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3911, %r119, %r3835;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3914, %r119, %r3836;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3917, %r119, %r3845;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3920, %r119, %r3846;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3923, %r119, %r3855;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3926, %r119, %r3856;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3929, %r119, %r3865;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3932, %r119, %r3866;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3935, %r119, %r3875;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3938, %r119, %r3876;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3941, %r119, %r3885;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3944, %r119, %r3886;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3947, %r119, %r3895;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3950, %r119, %r3896;
	// end inline asm
	// begin inline asm
	mov.b32 %r3953, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3954, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3955, %r3905, %r3953;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3958, %r3955, %r3954;
	// end inline asm
	// begin inline asm
	mov.b32 %r3961, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3962, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3963, %r3908, %r3961;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3966, %r3963, %r3962;
	// end inline asm
	// begin inline asm
	mov.b32 %r3969, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3970, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3971, %r3911, %r3969;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3974, %r3971, %r3970;
	// end inline asm
	// begin inline asm
	mov.b32 %r3977, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3978, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3979, %r3914, %r3977;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3982, %r3979, %r3978;
	// end inline asm
	// begin inline asm
	mov.b32 %r3985, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3986, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3987, %r3917, %r3985;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3990, %r3987, %r3986;
	// end inline asm
	// begin inline asm
	mov.b32 %r3993, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3994, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3995, %r3920, %r3993;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3998, %r3995, %r3994;
	// end inline asm
	// begin inline asm
	mov.b32 %r4001, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4002, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4003, %r3923, %r4001;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4006, %r4003, %r4002;
	// end inline asm
	// begin inline asm
	mov.b32 %r4009, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4010, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4011, %r3926, %r4009;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4014, %r4011, %r4010;
	// end inline asm
	// begin inline asm
	mov.b32 %r4017, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4018, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4019, %r3929, %r4017;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4022, %r4019, %r4018;
	// end inline asm
	// begin inline asm
	mov.b32 %r4025, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4026, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4027, %r3932, %r4025;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4030, %r4027, %r4026;
	// end inline asm
	// begin inline asm
	mov.b32 %r4033, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4034, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4035, %r3935, %r4033;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4038, %r4035, %r4034;
	// end inline asm
	// begin inline asm
	mov.b32 %r4041, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4042, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4043, %r3938, %r4041;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4046, %r4043, %r4042;
	// end inline asm
	// begin inline asm
	mov.b32 %r4049, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4050, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4051, %r3941, %r4049;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4054, %r4051, %r4050;
	// end inline asm
	// begin inline asm
	mov.b32 %r4057, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4058, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4059, %r3944, %r4057;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4062, %r4059, %r4058;
	// end inline asm
	// begin inline asm
	mov.b32 %r4065, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4066, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4067, %r3947, %r4065;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4070, %r4067, %r4066;
	// end inline asm
	// begin inline asm
	mov.b32 %r4073, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4074, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4075, %r3950, %r4073;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4078, %r4075, %r4074;
	// end inline asm
	// begin inline asm
	mov.b32 %r4084, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4082, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4083, %r4084, %r4082;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4086, %r3958, %r4083;
	// end inline asm
	// begin inline asm
	mov.b32 %r4089, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4090, %r4084, %r4089;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4093, %r3966, %r4090;
	// end inline asm
	// begin inline asm
	mov.b32 %r4096, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4097, %r4084, %r4096;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4100, %r3974, %r4097;
	// end inline asm
	// begin inline asm
	mov.b32 %r4103, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4104, %r4084, %r4103;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4107, %r3982, %r4104;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4110, %r4086, %r4100, %r2317;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4114, %r4093, %r4107, %r2317;
	// end inline asm
	shl.b32 	%r4121, %r4114, 4;
	// begin inline asm
	lop3.b32 %r4118, %r2323, %r4110, %r4121, 202;
	// end inline asm
	xor.b32  	%r7884, %r4118, -2004318072;
	// begin inline asm
	mov.b32 %r4125, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4123, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4124, %r4125, %r4123;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4127, %r3990, %r4124;
	// end inline asm
	// begin inline asm
	mov.b32 %r4130, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4131, %r4125, %r4130;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4134, %r3998, %r4131;
	// end inline asm
	// begin inline asm
	mov.b32 %r4137, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4138, %r4125, %r4137;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4141, %r4006, %r4138;
	// end inline asm
	// begin inline asm
	mov.b32 %r4144, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4145, %r4125, %r4144;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4148, %r4014, %r4145;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4151, %r4127, %r4141, %r2317;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4155, %r4134, %r4148, %r2317;
	// end inline asm
	shl.b32 	%r4162, %r4155, 4;
	// begin inline asm
	lop3.b32 %r4159, %r2323, %r4151, %r4162, 202;
	// end inline asm
	xor.b32  	%r7885, %r4159, -2004318072;
	// begin inline asm
	mov.b32 %r4166, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4164, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4165, %r4166, %r4164;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4168, %r4022, %r4165;
	// end inline asm
	// begin inline asm
	mov.b32 %r4171, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4172, %r4166, %r4171;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4175, %r4030, %r4172;
	// end inline asm
	// begin inline asm
	mov.b32 %r4178, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4179, %r4166, %r4178;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4182, %r4038, %r4179;
	// end inline asm
	// begin inline asm
	mov.b32 %r4185, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4186, %r4166, %r4185;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4189, %r4046, %r4186;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4192, %r4168, %r4182, %r2317;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4196, %r4175, %r4189, %r2317;
	// end inline asm
	shl.b32 	%r4203, %r4196, 4;
	// begin inline asm
	lop3.b32 %r4200, %r2323, %r4192, %r4203, 202;
	// end inline asm
	xor.b32  	%r7886, %r4200, -2004318072;
	// begin inline asm
	mov.b32 %r4207, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4205, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4206, %r4207, %r4205;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4209, %r4054, %r4206;
	// end inline asm
	// begin inline asm
	mov.b32 %r4212, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4213, %r4207, %r4212;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4216, %r4062, %r4213;
	// end inline asm
	// begin inline asm
	mov.b32 %r4219, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4220, %r4207, %r4219;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4223, %r4070, %r4220;
	// end inline asm
	// begin inline asm
	mov.b32 %r4226, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4227, %r4207, %r4226;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4230, %r4078, %r4227;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4233, %r4209, %r4223, %r2317;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4237, %r4216, %r4230, %r2317;
	// end inline asm
	shl.b32 	%r4244, %r4237, 4;
	// begin inline asm
	lop3.b32 %r4241, %r2323, %r4233, %r4244, 202;
	// end inline asm
	xor.b32  	%r7887, %r4241, -2004318072;
	st.shared.u32 	[%rd185], %r7884;
	st.shared.u32 	[%rd186], %r7885;
	st.shared.u32 	[%rd187], %r7886;
	st.shared.u32 	[%rd188], %r7887;
	ld.shared.u32 	%r8036, [%rd128];
	ld.shared.u32 	%r8035, [%rd130];
	ld.shared.u32 	%r8034, [%rd132];
	ld.shared.u32 	%r8033, [%rd134];
	// begin inline asm
	mov.b32 %r4250, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4261, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4249, %r8036, -2004318072;
	// begin inline asm
	lop3.b32 %r4247, %r656, %r4249, %r4250, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4251, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4252, %r4250, %r4251;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4255, %r4247, %r4252;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4258, %r667, %r4249, %r4261, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4262, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4263, %r4261, %r4262;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4266, %r4258, %r4263;
	// end inline asm
	shr.u32 	%r4271, %r4249, 8;
	// begin inline asm
	lop3.b32 %r4269, %r656, %r4271, %r4250, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4273, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4274, %r4250, %r4273;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4277, %r4269, %r4274;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4280, %r667, %r4271, %r4261, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4284, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4285, %r4261, %r4284;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4288, %r4280, %r4285;
	// end inline asm
	// begin inline asm
	mov.b32 %r4296, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4307, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4295, %r8035, -2004318072;
	// begin inline asm
	lop3.b32 %r4293, %r656, %r4295, %r4296, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4297, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4298, %r4296, %r4297;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4301, %r4293, %r4298;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4304, %r667, %r4295, %r4307, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4308, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4309, %r4307, %r4308;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4312, %r4304, %r4309;
	// end inline asm
	shr.u32 	%r4317, %r4295, 8;
	// begin inline asm
	lop3.b32 %r4315, %r656, %r4317, %r4296, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4319, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4320, %r4296, %r4319;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4323, %r4315, %r4320;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4326, %r667, %r4317, %r4307, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4330, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4331, %r4307, %r4330;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4334, %r4326, %r4331;
	// end inline asm
	// begin inline asm
	mov.b32 %r4342, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4353, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4341, %r8034, -2004318072;
	// begin inline asm
	lop3.b32 %r4339, %r656, %r4341, %r4342, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4343, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4344, %r4342, %r4343;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4347, %r4339, %r4344;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4350, %r667, %r4341, %r4353, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4354, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4355, %r4353, %r4354;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4358, %r4350, %r4355;
	// end inline asm
	shr.u32 	%r4363, %r4341, 8;
	// begin inline asm
	lop3.b32 %r4361, %r656, %r4363, %r4342, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4365, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4366, %r4342, %r4365;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4369, %r4361, %r4366;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4372, %r667, %r4363, %r4353, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4376, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4377, %r4353, %r4376;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4380, %r4372, %r4377;
	// end inline asm
	// begin inline asm
	mov.b32 %r4388, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4399, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4387, %r8033, -2004318072;
	// begin inline asm
	lop3.b32 %r4385, %r656, %r4387, %r4388, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4389, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4390, %r4388, %r4389;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4393, %r4385, %r4390;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4396, %r667, %r4387, %r4399, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4400, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4401, %r4399, %r4400;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4404, %r4396, %r4401;
	// end inline asm
	shr.u32 	%r4409, %r4387, 8;
	// begin inline asm
	lop3.b32 %r4407, %r656, %r4409, %r4388, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4411, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4412, %r4388, %r4411;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4415, %r4407, %r4412;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4418, %r667, %r4409, %r4399, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4422, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4423, %r4399, %r4422;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4426, %r4418, %r4423;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4429, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4431, %r4429, %r4255;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4434, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4436, %r4434, %r4266;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4439, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4441, %r4439, %r4277;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4444, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4446, %r4444, %r4288;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4449, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4451, %r4449, %r4301;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4454, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4456, %r4454, %r4312;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4459, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4461, %r4459, %r4323;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4464, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4466, %r4464, %r4334;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4469, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4471, %r4469, %r4347;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4474, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4476, %r4474, %r4358;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4479, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4481, %r4479, %r4369;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4484, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4486, %r4484, %r4380;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4489, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4491, %r4489, %r4393;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4494, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4496, %r4494, %r4404;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4499, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4501, %r4499, %r4415;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4504, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4506, %r4504, %r4426;
	// end inline asm
	// begin inline asm
	mov.b32 %r4514, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4525, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4511, %r656, %r1449, %r4514, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4515, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4516, %r4514, %r4515;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4519, %r4511, %r4516;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4522, %r667, %r1449, %r4525, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4526, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4527, %r4525, %r4526;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4530, %r4522, %r4527;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4533, %r656, %r1471, %r4514, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4537, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4538, %r4514, %r4537;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4541, %r4533, %r4538;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4544, %r667, %r1471, %r4525, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4548, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4549, %r4525, %r4548;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4552, %r4544, %r4549;
	// end inline asm
	// begin inline asm
	mov.b32 %r4560, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4571, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4557, %r656, %r1495, %r4560, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4561, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4562, %r4560, %r4561;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4565, %r4557, %r4562;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4568, %r667, %r1495, %r4571, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4572, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4573, %r4571, %r4572;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4576, %r4568, %r4573;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4579, %r656, %r1517, %r4560, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4583, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4584, %r4560, %r4583;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4587, %r4579, %r4584;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4590, %r667, %r1517, %r4571, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4594, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4595, %r4571, %r4594;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4598, %r4590, %r4595;
	// end inline asm
	// begin inline asm
	mov.b32 %r4606, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4617, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4603, %r656, %r1541, %r4606, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4607, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4608, %r4606, %r4607;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4611, %r4603, %r4608;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4614, %r667, %r1541, %r4617, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4618, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4619, %r4617, %r4618;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4622, %r4614, %r4619;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4625, %r656, %r1563, %r4606, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4629, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4630, %r4606, %r4629;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4633, %r4625, %r4630;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4636, %r667, %r1563, %r4617, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4640, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4641, %r4617, %r4640;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4644, %r4636, %r4641;
	// end inline asm
	// begin inline asm
	mov.b32 %r4652, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4663, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4649, %r656, %r1587, %r4652, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4653, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4654, %r4652, %r4653;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4657, %r4649, %r4654;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4660, %r667, %r1587, %r4663, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4664, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4665, %r4663, %r4664;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4668, %r4660, %r4665;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4671, %r656, %r1609, %r4652, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4675, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4676, %r4652, %r4675;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4679, %r4671, %r4676;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4682, %r667, %r1609, %r4663, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4686, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4687, %r4663, %r4686;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4690, %r4682, %r4687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4693, %r226, %r4519, %r4431;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4697, %r226, %r4530, %r4436;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4701, %r226, %r4541, %r4441;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4705, %r226, %r4552, %r4446;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4709, %r226, %r4565, %r4451;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4713, %r226, %r4576, %r4456;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4717, %r226, %r4587, %r4461;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4721, %r226, %r4598, %r4466;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4725, %r226, %r4611, %r4471;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4729, %r226, %r4622, %r4476;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4733, %r226, %r4633, %r4481;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4737, %r226, %r4644, %r4486;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4741, %r226, %r4657, %r4491;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4745, %r226, %r4668, %r4496;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4749, %r226, %r4679, %r4501;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4753, %r226, %r4690, %r4506;
	// end inline asm
	// begin inline asm
	mov.b32 %r4762, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4773, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4759, %r656, %r657, %r4762, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4763, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4764, %r4762, %r4763;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4767, %r4759, %r4764;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4770, %r667, %r657, %r4773, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4774, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4775, %r4773, %r4774;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4778, %r4770, %r4775;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4781, %r656, %r679, %r4762, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4785, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4786, %r4762, %r4785;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4789, %r4781, %r4786;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4792, %r667, %r679, %r4773, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4796, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4797, %r4773, %r4796;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4800, %r4792, %r4797;
	// end inline asm
	// begin inline asm
	mov.b32 %r4808, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4819, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4805, %r656, %r703, %r4808, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4809, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4810, %r4808, %r4809;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4813, %r4805, %r4810;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4816, %r667, %r703, %r4819, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4820, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4821, %r4819, %r4820;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4824, %r4816, %r4821;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4827, %r656, %r725, %r4808, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4831, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4832, %r4808, %r4831;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4835, %r4827, %r4832;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4838, %r667, %r725, %r4819, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4842, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4843, %r4819, %r4842;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4846, %r4838, %r4843;
	// end inline asm
	// begin inline asm
	mov.b32 %r4854, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4865, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4851, %r656, %r749, %r4854, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4855, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4856, %r4854, %r4855;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4859, %r4851, %r4856;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4862, %r667, %r749, %r4865, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4866, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4867, %r4865, %r4866;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4870, %r4862, %r4867;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4873, %r656, %r771, %r4854, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4877, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4878, %r4854, %r4877;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4881, %r4873, %r4878;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4884, %r667, %r771, %r4865, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4888, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4889, %r4865, %r4888;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4892, %r4884, %r4889;
	// end inline asm
	// begin inline asm
	mov.b32 %r4900, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4911, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4897, %r656, %r795, %r4900, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4901, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4902, %r4900, %r4901;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4905, %r4897, %r4902;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4908, %r667, %r795, %r4911, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4912, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4913, %r4911, %r4912;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4916, %r4908, %r4913;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4919, %r656, %r817, %r4900, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4923, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4924, %r4900, %r4923;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4927, %r4919, %r4924;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4930, %r667, %r817, %r4911, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4934, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4935, %r4911, %r4934;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4938, %r4930, %r4935;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4941, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4943, %r4941, %r4767, %r4693;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4947, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4949, %r4947, %r4778, %r4697;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4953, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4955, %r4953, %r4789, %r4701;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4959, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4961, %r4959, %r4800, %r4705;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4965, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4967, %r4965, %r4813, %r4709;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4971, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4973, %r4971, %r4824, %r4713;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4977, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4979, %r4977, %r4835, %r4717;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4983, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4985, %r4983, %r4846, %r4721;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4989, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4991, %r4989, %r4859, %r4725;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4995, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4997, %r4995, %r4870, %r4729;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5001, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5003, %r5001, %r4881, %r4733;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5007, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5009, %r5007, %r4892, %r4737;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5013, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5015, %r5013, %r4905, %r4741;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5019, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5021, %r5019, %r4916, %r4745;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5025, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5027, %r5025, %r4927, %r4749;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5031, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5033, %r5031, %r4938, %r4753;
	// end inline asm
	// begin inline asm
	mov.b32 %r5042, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5053, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5039, %r656, %r2453, %r5042, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5043, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5044, %r5042, %r5043;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5047, %r5039, %r5044;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5050, %r667, %r2453, %r5053, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5054, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5055, %r5053, %r5054;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5058, %r5050, %r5055;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5061, %r656, %r2475, %r5042, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5065, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5066, %r5042, %r5065;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5069, %r5061, %r5066;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5072, %r667, %r2475, %r5053, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5076, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5077, %r5053, %r5076;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5080, %r5072, %r5077;
	// end inline asm
	// begin inline asm
	mov.b32 %r5088, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5099, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5085, %r656, %r2499, %r5088, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5089, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5090, %r5088, %r5089;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5093, %r5085, %r5090;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5096, %r667, %r2499, %r5099, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5100, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5101, %r5099, %r5100;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5104, %r5096, %r5101;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5107, %r656, %r2521, %r5088, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5111, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5112, %r5088, %r5111;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5115, %r5107, %r5112;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5118, %r667, %r2521, %r5099, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5122, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5123, %r5099, %r5122;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5126, %r5118, %r5123;
	// end inline asm
	// begin inline asm
	mov.b32 %r5134, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5145, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5131, %r656, %r2545, %r5134, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5135, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5136, %r5134, %r5135;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5139, %r5131, %r5136;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5142, %r667, %r2545, %r5145, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5146, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5147, %r5145, %r5146;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5150, %r5142, %r5147;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5153, %r656, %r2567, %r5134, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5157, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5158, %r5134, %r5157;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5161, %r5153, %r5158;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5164, %r667, %r2567, %r5145, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5168, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5169, %r5145, %r5168;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5172, %r5164, %r5169;
	// end inline asm
	// begin inline asm
	mov.b32 %r5180, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5191, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5177, %r656, %r2591, %r5180, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5181, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5182, %r5180, %r5181;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5185, %r5177, %r5182;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5188, %r667, %r2591, %r5191, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5192, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5193, %r5191, %r5192;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5196, %r5188, %r5193;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5199, %r656, %r2613, %r5180, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5203, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5204, %r5180, %r5203;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5207, %r5199, %r5204;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5210, %r667, %r2613, %r5191, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5214, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5215, %r5191, %r5214;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5218, %r5210, %r5215;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5292, %r262, %r5047, %r4943;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5289, %r262, %r5058, %r4949;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5301, %r262, %r5069, %r4955;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5298, %r262, %r5080, %r4961;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5310, %r262, %r5093, %r4967;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5307, %r262, %r5104, %r4973;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5319, %r262, %r5115, %r4979;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5316, %r262, %r5126, %r4985;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5328, %r262, %r5139, %r4991;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5325, %r262, %r5150, %r4997;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5337, %r262, %r5161, %r5003;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5334, %r262, %r5172, %r5009;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5346, %r262, %r5185, %r5015;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5343, %r262, %r5196, %r5021;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5355, %r262, %r5207, %r5027;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5352, %r262, %r5218, %r5033;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5285, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5287, %r5285, %r5289;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5290, %r308, %r5292, %r5287;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5294, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5296, %r5294, %r5298;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5299, %r308, %r5301, %r5296;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5303, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5305, %r5303, %r5307;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5308, %r308, %r5310, %r5305;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5312, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5314, %r5312, %r5316;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5317, %r308, %r5319, %r5314;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5321, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5323, %r5321, %r5325;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5326, %r308, %r5328, %r5323;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5330, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5332, %r5330, %r5334;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5335, %r308, %r5337, %r5332;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5339, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5341, %r5339, %r5343;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5344, %r308, %r5346, %r5341;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5348, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5350, %r5348, %r5352;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5353, %r308, %r5355, %r5350;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5357, %r311, %r5292;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5360, %r308, %r5289, %r5357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5364, %r311, %r5301;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5367, %r308, %r5298, %r5364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5371, %r311, %r5310;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5374, %r308, %r5307, %r5371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5378, %r311, %r5319;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5381, %r308, %r5316, %r5378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5385, %r311, %r5328;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5388, %r308, %r5325, %r5385;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5392, %r311, %r5337;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5395, %r308, %r5334, %r5392;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5399, %r311, %r5346;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5402, %r308, %r5343, %r5399;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5406, %r311, %r5355;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5409, %r308, %r5352, %r5406;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5500, %r5497}, {%r355, %r361, %r358, %r364}, {%r5290, %r5360}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5509, %r5506}, {%r355, %r361, %r358, %r364}, {%r5299, %r5367}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5518, %r5515}, {%r355, %r361, %r358, %r364}, {%r5308, %r5374}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5527, %r5524}, {%r355, %r361, %r358, %r364}, {%r5317, %r5381}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5536, %r5533}, {%r355, %r361, %r358, %r364}, {%r5326, %r5388}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5545, %r5542}, {%r355, %r361, %r358, %r364}, {%r5335, %r5395}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5554, %r5551}, {%r355, %r361, %r358, %r364}, {%r5344, %r5402}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5563, %r5560}, {%r355, %r361, %r358, %r364}, {%r5353, %r5409}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5493, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5495, %r5493, %r5497;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5498, %r399, %r5500, %r5495;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5502, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5504, %r5502, %r5506;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5507, %r399, %r5509, %r5504;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5511, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5513, %r5511, %r5515;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5516, %r399, %r5518, %r5513;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5520, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5522, %r5520, %r5524;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5525, %r399, %r5527, %r5522;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5529, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5531, %r5529, %r5533;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5534, %r399, %r5536, %r5531;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5538, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5540, %r5538, %r5542;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5543, %r399, %r5545, %r5540;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5547, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5549, %r5547, %r5551;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5552, %r399, %r5554, %r5549;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5556, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5558, %r5556, %r5560;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5561, %r399, %r5563, %r5558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5565, %r402, %r5500;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5568, %r399, %r5497, %r5565;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5572, %r402, %r5509;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5575, %r399, %r5506, %r5572;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5579, %r402, %r5518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5582, %r399, %r5515, %r5579;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5586, %r402, %r5527;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5589, %r399, %r5524, %r5586;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5593, %r402, %r5536;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5596, %r399, %r5533, %r5593;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5600, %r402, %r5545;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5603, %r399, %r5542, %r5600;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5607, %r402, %r5554;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5610, %r399, %r5551, %r5607;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5614, %r402, %r5563;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5617, %r399, %r5560, %r5614;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5621, %r5622}, {%r433, %r439, %r436, %r442}, {%r5498, %r5568}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5631, %r5632}, {%r433, %r439, %r436, %r442}, {%r5507, %r5575}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5641, %r5642}, {%r433, %r439, %r436, %r442}, {%r5516, %r5582}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5651, %r5652}, {%r433, %r439, %r436, %r442}, {%r5525, %r5589}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5661, %r5662}, {%r433, %r439, %r436, %r442}, {%r5534, %r5596}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5671, %r5672}, {%r433, %r439, %r436, %r442}, {%r5543, %r5603}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5681, %r5682}, {%r433, %r439, %r436, %r442}, {%r5552, %r5610}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5691, %r5692}, {%r433, %r439, %r436, %r442}, {%r5561, %r5617}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5701, %r119, %r5621;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5704, %r119, %r5622;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5707, %r119, %r5631;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5710, %r119, %r5632;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5713, %r119, %r5641;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5716, %r119, %r5642;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5719, %r119, %r5651;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5722, %r119, %r5652;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5725, %r119, %r5661;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5728, %r119, %r5662;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5731, %r119, %r5671;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5734, %r119, %r5672;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5737, %r119, %r5681;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5740, %r119, %r5682;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5743, %r119, %r5691;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5746, %r119, %r5692;
	// end inline asm
	// begin inline asm
	mov.b32 %r5749, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5750, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5751, %r5701, %r5749;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5754, %r5751, %r5750;
	// end inline asm
	// begin inline asm
	mov.b32 %r5757, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5758, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5759, %r5704, %r5757;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5762, %r5759, %r5758;
	// end inline asm
	// begin inline asm
	mov.b32 %r5765, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5766, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5767, %r5707, %r5765;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5770, %r5767, %r5766;
	// end inline asm
	// begin inline asm
	mov.b32 %r5773, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5774, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5775, %r5710, %r5773;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5778, %r5775, %r5774;
	// end inline asm
	// begin inline asm
	mov.b32 %r5781, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5782, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5783, %r5713, %r5781;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5786, %r5783, %r5782;
	// end inline asm
	// begin inline asm
	mov.b32 %r5789, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5790, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5791, %r5716, %r5789;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5794, %r5791, %r5790;
	// end inline asm
	// begin inline asm
	mov.b32 %r5797, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5798, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5799, %r5719, %r5797;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5802, %r5799, %r5798;
	// end inline asm
	// begin inline asm
	mov.b32 %r5805, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5806, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5807, %r5722, %r5805;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5810, %r5807, %r5806;
	// end inline asm
	// begin inline asm
	mov.b32 %r5813, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5814, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5815, %r5725, %r5813;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5818, %r5815, %r5814;
	// end inline asm
	// begin inline asm
	mov.b32 %r5821, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5822, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5823, %r5728, %r5821;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5826, %r5823, %r5822;
	// end inline asm
	// begin inline asm
	mov.b32 %r5829, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5830, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5831, %r5731, %r5829;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5834, %r5831, %r5830;
	// end inline asm
	// begin inline asm
	mov.b32 %r5837, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5838, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5839, %r5734, %r5837;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5842, %r5839, %r5838;
	// end inline asm
	// begin inline asm
	mov.b32 %r5845, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5846, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5847, %r5737, %r5845;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5850, %r5847, %r5846;
	// end inline asm
	// begin inline asm
	mov.b32 %r5853, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5854, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5855, %r5740, %r5853;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5858, %r5855, %r5854;
	// end inline asm
	// begin inline asm
	mov.b32 %r5861, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5862, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5863, %r5743, %r5861;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5866, %r5863, %r5862;
	// end inline asm
	// begin inline asm
	mov.b32 %r5869, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5870, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5871, %r5746, %r5869;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5874, %r5871, %r5870;
	// end inline asm
	// begin inline asm
	mov.b32 %r5880, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5878, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5879, %r5880, %r5878;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5882, %r5754, %r5879;
	// end inline asm
	// begin inline asm
	mov.b32 %r5885, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5886, %r5880, %r5885;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5889, %r5762, %r5886;
	// end inline asm
	// begin inline asm
	mov.b32 %r5892, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5893, %r5880, %r5892;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5896, %r5770, %r5893;
	// end inline asm
	// begin inline asm
	mov.b32 %r5899, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5900, %r5880, %r5899;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5903, %r5778, %r5900;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5906, %r5882, %r5896, %r2317;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5910, %r5889, %r5903, %r2317;
	// end inline asm
	shl.b32 	%r5917, %r5910, 4;
	// begin inline asm
	lop3.b32 %r5914, %r2323, %r5906, %r5917, 202;
	// end inline asm
	xor.b32  	%r7888, %r5914, -2004318072;
	// begin inline asm
	mov.b32 %r5921, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5919, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5920, %r5921, %r5919;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5923, %r5786, %r5920;
	// end inline asm
	// begin inline asm
	mov.b32 %r5926, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5927, %r5921, %r5926;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5930, %r5794, %r5927;
	// end inline asm
	// begin inline asm
	mov.b32 %r5933, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5934, %r5921, %r5933;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5937, %r5802, %r5934;
	// end inline asm
	// begin inline asm
	mov.b32 %r5940, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5941, %r5921, %r5940;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5944, %r5810, %r5941;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5947, %r5923, %r5937, %r2317;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5951, %r5930, %r5944, %r2317;
	// end inline asm
	shl.b32 	%r5958, %r5951, 4;
	// begin inline asm
	lop3.b32 %r5955, %r2323, %r5947, %r5958, 202;
	// end inline asm
	xor.b32  	%r7889, %r5955, -2004318072;
	// begin inline asm
	mov.b32 %r5962, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5960, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5961, %r5962, %r5960;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5964, %r5818, %r5961;
	// end inline asm
	// begin inline asm
	mov.b32 %r5967, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5968, %r5962, %r5967;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5971, %r5826, %r5968;
	// end inline asm
	// begin inline asm
	mov.b32 %r5974, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5975, %r5962, %r5974;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5978, %r5834, %r5975;
	// end inline asm
	// begin inline asm
	mov.b32 %r5981, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5982, %r5962, %r5981;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5985, %r5842, %r5982;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5988, %r5964, %r5978, %r2317;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5992, %r5971, %r5985, %r2317;
	// end inline asm
	shl.b32 	%r5999, %r5992, 4;
	// begin inline asm
	lop3.b32 %r5996, %r2323, %r5988, %r5999, 202;
	// end inline asm
	xor.b32  	%r7890, %r5996, -2004318072;
	// begin inline asm
	mov.b32 %r6003, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6001, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6002, %r6003, %r6001;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6005, %r5850, %r6002;
	// end inline asm
	// begin inline asm
	mov.b32 %r6008, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6009, %r6003, %r6008;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6012, %r5858, %r6009;
	// end inline asm
	// begin inline asm
	mov.b32 %r6015, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6016, %r6003, %r6015;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6019, %r5866, %r6016;
	// end inline asm
	// begin inline asm
	mov.b32 %r6022, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6023, %r6003, %r6022;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6026, %r5874, %r6023;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6029, %r6005, %r6019, %r2317;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6033, %r6012, %r6026, %r2317;
	// end inline asm
	shl.b32 	%r6040, %r6033, 4;
	// begin inline asm
	lop3.b32 %r6037, %r2323, %r6029, %r6040, 202;
	// end inline asm
	xor.b32  	%r7891, %r6037, -2004318072;
	st.shared.u32 	[%rd185], %r7888;
	st.shared.u32 	[%rd186], %r7889;
	st.shared.u32 	[%rd187], %r7890;
	st.shared.u32 	[%rd188], %r7891;
	ld.shared.u32 	%r8032, [%rd128];
	ld.shared.u32 	%r8031, [%rd130];
	ld.shared.u32 	%r8030, [%rd132];
	ld.shared.u32 	%r8029, [%rd134];
	// begin inline asm
	mov.b32 %r6046, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6057, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6045, %r8032, -2004318072;
	// begin inline asm
	lop3.b32 %r6043, %r656, %r6045, %r6046, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6047, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6048, %r6046, %r6047;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6051, %r6043, %r6048;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6054, %r667, %r6045, %r6057, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6058, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6059, %r6057, %r6058;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6062, %r6054, %r6059;
	// end inline asm
	shr.u32 	%r6067, %r6045, 8;
	// begin inline asm
	lop3.b32 %r6065, %r656, %r6067, %r6046, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6069, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6070, %r6046, %r6069;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6073, %r6065, %r6070;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6076, %r667, %r6067, %r6057, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6080, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6081, %r6057, %r6080;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6084, %r6076, %r6081;
	// end inline asm
	// begin inline asm
	mov.b32 %r6092, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6103, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6091, %r8031, -2004318072;
	// begin inline asm
	lop3.b32 %r6089, %r656, %r6091, %r6092, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6093, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6094, %r6092, %r6093;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6097, %r6089, %r6094;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6100, %r667, %r6091, %r6103, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6104, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6105, %r6103, %r6104;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6108, %r6100, %r6105;
	// end inline asm
	shr.u32 	%r6113, %r6091, 8;
	// begin inline asm
	lop3.b32 %r6111, %r656, %r6113, %r6092, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6115, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6116, %r6092, %r6115;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6119, %r6111, %r6116;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6122, %r667, %r6113, %r6103, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6126, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6127, %r6103, %r6126;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6130, %r6122, %r6127;
	// end inline asm
	// begin inline asm
	mov.b32 %r6138, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6149, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6137, %r8030, -2004318072;
	// begin inline asm
	lop3.b32 %r6135, %r656, %r6137, %r6138, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6139, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6140, %r6138, %r6139;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6143, %r6135, %r6140;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6146, %r667, %r6137, %r6149, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6150, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6151, %r6149, %r6150;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6154, %r6146, %r6151;
	// end inline asm
	shr.u32 	%r6159, %r6137, 8;
	// begin inline asm
	lop3.b32 %r6157, %r656, %r6159, %r6138, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6161, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6162, %r6138, %r6161;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6165, %r6157, %r6162;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6168, %r667, %r6159, %r6149, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6172, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6173, %r6149, %r6172;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6176, %r6168, %r6173;
	// end inline asm
	// begin inline asm
	mov.b32 %r6184, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6195, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6183, %r8029, -2004318072;
	// begin inline asm
	lop3.b32 %r6181, %r656, %r6183, %r6184, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6185, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6186, %r6184, %r6185;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6189, %r6181, %r6186;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6192, %r667, %r6183, %r6195, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6196, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6197, %r6195, %r6196;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6200, %r6192, %r6197;
	// end inline asm
	shr.u32 	%r6205, %r6183, 8;
	// begin inline asm
	lop3.b32 %r6203, %r656, %r6205, %r6184, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6207, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6208, %r6184, %r6207;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6211, %r6203, %r6208;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6214, %r667, %r6205, %r6195, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6218, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6219, %r6195, %r6218;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6222, %r6214, %r6219;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6225, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6227, %r6225, %r6051;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6230, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6232, %r6230, %r6062;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6235, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6237, %r6235, %r6073;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6240, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6242, %r6240, %r6084;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6245, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6247, %r6245, %r6097;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6250, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6252, %r6250, %r6108;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6255, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6257, %r6255, %r6119;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6260, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6262, %r6260, %r6130;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6265, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6267, %r6265, %r6143;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6270, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6272, %r6270, %r6154;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6275, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6277, %r6275, %r6165;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6280, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6282, %r6280, %r6176;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6285, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6287, %r6285, %r6189;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6290, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6292, %r6290, %r6200;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6295, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6297, %r6295, %r6211;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6300, %r280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6302, %r6300, %r6222;
	// end inline asm
	// begin inline asm
	mov.b32 %r6310, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6321, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6307, %r656, %r657, %r6310, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6311, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6312, %r6310, %r6311;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6315, %r6307, %r6312;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6318, %r667, %r657, %r6321, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6322, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6323, %r6321, %r6322;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6326, %r6318, %r6323;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6329, %r656, %r679, %r6310, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6333, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6334, %r6310, %r6333;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6337, %r6329, %r6334;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6340, %r667, %r679, %r6321, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6344, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6345, %r6321, %r6344;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6348, %r6340, %r6345;
	// end inline asm
	// begin inline asm
	mov.b32 %r6356, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6367, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6353, %r656, %r703, %r6356, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6357, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6358, %r6356, %r6357;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6361, %r6353, %r6358;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6364, %r667, %r703, %r6367, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6368, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6369, %r6367, %r6368;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6372, %r6364, %r6369;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6375, %r656, %r725, %r6356, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6379, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6380, %r6356, %r6379;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6383, %r6375, %r6380;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6386, %r667, %r725, %r6367, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6390, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6391, %r6367, %r6390;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6394, %r6386, %r6391;
	// end inline asm
	// begin inline asm
	mov.b32 %r6402, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6413, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6399, %r656, %r749, %r6402, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6403, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6404, %r6402, %r6403;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6407, %r6399, %r6404;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6410, %r667, %r749, %r6413, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6414, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6415, %r6413, %r6414;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6418, %r6410, %r6415;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6421, %r656, %r771, %r6402, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6425, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6426, %r6402, %r6425;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6429, %r6421, %r6426;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6432, %r667, %r771, %r6413, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6436, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6437, %r6413, %r6436;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6440, %r6432, %r6437;
	// end inline asm
	// begin inline asm
	mov.b32 %r6448, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6459, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6445, %r656, %r795, %r6448, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6449, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6450, %r6448, %r6449;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6453, %r6445, %r6450;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6456, %r667, %r795, %r6459, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6460, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6461, %r6459, %r6460;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6464, %r6456, %r6461;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6467, %r656, %r817, %r6448, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6471, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6472, %r6448, %r6471;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6475, %r6467, %r6472;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6478, %r667, %r817, %r6459, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6482, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6483, %r6459, %r6482;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6486, %r6478, %r6483;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6489, %r226, %r6315, %r6227;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6493, %r226, %r6326, %r6232;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6497, %r226, %r6337, %r6237;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6501, %r226, %r6348, %r6242;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6505, %r226, %r6361, %r6247;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6509, %r226, %r6372, %r6252;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6513, %r226, %r6383, %r6257;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6517, %r226, %r6394, %r6262;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6521, %r226, %r6407, %r6267;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6525, %r226, %r6418, %r6272;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6529, %r226, %r6429, %r6277;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6533, %r226, %r6440, %r6282;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6537, %r226, %r6453, %r6287;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6541, %r226, %r6464, %r6292;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6545, %r226, %r6475, %r6297;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6549, %r226, %r6486, %r6302;
	// end inline asm
	// begin inline asm
	mov.b32 %r6558, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6569, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6555, %r656, %r2453, %r6558, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6559, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6560, %r6558, %r6559;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6563, %r6555, %r6560;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6566, %r667, %r2453, %r6569, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6570, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6571, %r6569, %r6570;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6574, %r6566, %r6571;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6577, %r656, %r2475, %r6558, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6581, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6582, %r6558, %r6581;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6585, %r6577, %r6582;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6588, %r667, %r2475, %r6569, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6592, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6593, %r6569, %r6592;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6596, %r6588, %r6593;
	// end inline asm
	// begin inline asm
	mov.b32 %r6604, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6615, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6601, %r656, %r2499, %r6604, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6605, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6606, %r6604, %r6605;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6609, %r6601, %r6606;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6612, %r667, %r2499, %r6615, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6616, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6617, %r6615, %r6616;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6620, %r6612, %r6617;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6623, %r656, %r2521, %r6604, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6627, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6628, %r6604, %r6627;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6631, %r6623, %r6628;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6634, %r667, %r2521, %r6615, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6638, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6639, %r6615, %r6638;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6642, %r6634, %r6639;
	// end inline asm
	// begin inline asm
	mov.b32 %r6650, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6661, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6647, %r656, %r2545, %r6650, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6651, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6652, %r6650, %r6651;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6655, %r6647, %r6652;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6658, %r667, %r2545, %r6661, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6662, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6663, %r6661, %r6662;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6666, %r6658, %r6663;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6669, %r656, %r2567, %r6650, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6673, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6674, %r6650, %r6673;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6677, %r6669, %r6674;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6680, %r667, %r2567, %r6661, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6684, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6685, %r6661, %r6684;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6688, %r6680, %r6685;
	// end inline asm
	// begin inline asm
	mov.b32 %r6696, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6707, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6693, %r656, %r2591, %r6696, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6697, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6698, %r6696, %r6697;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6701, %r6693, %r6698;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6704, %r667, %r2591, %r6707, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6708, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6709, %r6707, %r6708;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6712, %r6704, %r6709;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6715, %r656, %r2613, %r6696, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6719, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6720, %r6696, %r6719;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6723, %r6715, %r6720;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6726, %r667, %r2613, %r6707, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6730, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6731, %r6707, %r6730;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6734, %r6726, %r6731;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6737, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6739, %r6737, %r6563, %r6489;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6743, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6745, %r6743, %r6574, %r6493;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6749, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6751, %r6749, %r6585, %r6497;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6755, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6757, %r6755, %r6596, %r6501;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6761, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6763, %r6761, %r6609, %r6505;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6767, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6769, %r6767, %r6620, %r6509;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6773, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6775, %r6773, %r6631, %r6513;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6779, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6781, %r6779, %r6642, %r6517;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6785, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6787, %r6785, %r6655, %r6521;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6791, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6793, %r6791, %r6666, %r6525;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6797, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6799, %r6797, %r6677, %r6529;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6803, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6805, %r6803, %r6688, %r6533;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6809, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6811, %r6809, %r6701, %r6537;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6815, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6817, %r6815, %r6712, %r6541;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6821, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6823, %r6821, %r6723, %r6545;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6827, %r244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6829, %r6827, %r6734, %r6549;
	// end inline asm
	// begin inline asm
	mov.b32 %r6838, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6849, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6835, %r656, %r4249, %r6838, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6839, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6840, %r6838, %r6839;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6843, %r6835, %r6840;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6846, %r667, %r4249, %r6849, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6850, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6851, %r6849, %r6850;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6854, %r6846, %r6851;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6857, %r656, %r4271, %r6838, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6861, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6862, %r6838, %r6861;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6865, %r6857, %r6862;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6868, %r667, %r4271, %r6849, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6872, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6873, %r6849, %r6872;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6876, %r6868, %r6873;
	// end inline asm
	// begin inline asm
	mov.b32 %r6884, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6895, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6881, %r656, %r4295, %r6884, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6885, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6886, %r6884, %r6885;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6889, %r6881, %r6886;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6892, %r667, %r4295, %r6895, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6896, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6897, %r6895, %r6896;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6900, %r6892, %r6897;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6903, %r656, %r4317, %r6884, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6907, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6908, %r6884, %r6907;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6911, %r6903, %r6908;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6914, %r667, %r4317, %r6895, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6918, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6919, %r6895, %r6918;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6922, %r6914, %r6919;
	// end inline asm
	// begin inline asm
	mov.b32 %r6930, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6941, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6927, %r656, %r4341, %r6930, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6931, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6932, %r6930, %r6931;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6935, %r6927, %r6932;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6938, %r667, %r4341, %r6941, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6942, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6943, %r6941, %r6942;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6946, %r6938, %r6943;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6949, %r656, %r4363, %r6930, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6953, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6954, %r6930, %r6953;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6957, %r6949, %r6954;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6960, %r667, %r4363, %r6941, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6964, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6965, %r6941, %r6964;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6968, %r6960, %r6965;
	// end inline asm
	// begin inline asm
	mov.b32 %r6976, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6987, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6973, %r656, %r4387, %r6976, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6977, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6978, %r6976, %r6977;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6981, %r6973, %r6978;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6984, %r667, %r4387, %r6987, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6988, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6989, %r6987, %r6988;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6992, %r6984, %r6989;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6995, %r656, %r4409, %r6976, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6999, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7000, %r6976, %r6999;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r7003, %r6995, %r7000;
	// end inline asm
	// begin inline asm
	lop3.b32 %r7006, %r667, %r4409, %r6987, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r7010, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7011, %r6987, %r7010;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r7014, %r7006, %r7011;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7088, %r262, %r6843, %r6739;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7085, %r262, %r6854, %r6745;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7097, %r262, %r6865, %r6751;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7094, %r262, %r6876, %r6757;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7106, %r262, %r6889, %r6763;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7103, %r262, %r6900, %r6769;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7115, %r262, %r6911, %r6775;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7112, %r262, %r6922, %r6781;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7124, %r262, %r6935, %r6787;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7121, %r262, %r6946, %r6793;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7133, %r262, %r6957, %r6799;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7130, %r262, %r6968, %r6805;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7142, %r262, %r6981, %r6811;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7139, %r262, %r6992, %r6817;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7151, %r262, %r7003, %r6823;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7148, %r262, %r7014, %r6829;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7081, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7083, %r7081, %r7085;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7086, %r308, %r7088, %r7083;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7090, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7092, %r7090, %r7094;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7095, %r308, %r7097, %r7092;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7099, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7101, %r7099, %r7103;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7104, %r308, %r7106, %r7101;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7108, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7110, %r7108, %r7112;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7113, %r308, %r7115, %r7110;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7117, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7119, %r7117, %r7121;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7122, %r308, %r7124, %r7119;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7126, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7128, %r7126, %r7130;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7131, %r308, %r7133, %r7128;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7135, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7137, %r7135, %r7139;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7140, %r308, %r7142, %r7137;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7144, %r311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7146, %r7144, %r7148;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7149, %r308, %r7151, %r7146;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7153, %r311, %r7088;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7156, %r308, %r7085, %r7153;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7160, %r311, %r7097;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7163, %r308, %r7094, %r7160;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7167, %r311, %r7106;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7170, %r308, %r7103, %r7167;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7174, %r311, %r7115;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7177, %r308, %r7112, %r7174;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7181, %r311, %r7124;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7184, %r308, %r7121, %r7181;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7188, %r311, %r7133;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7191, %r308, %r7130, %r7188;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7195, %r311, %r7142;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7198, %r308, %r7139, %r7195;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7202, %r311, %r7151;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7205, %r308, %r7148, %r7202;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7296, %r7293}, {%r355, %r361, %r358, %r364}, {%r7086, %r7156}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7305, %r7302}, {%r355, %r361, %r358, %r364}, {%r7095, %r7163}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7314, %r7311}, {%r355, %r361, %r358, %r364}, {%r7104, %r7170}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7323, %r7320}, {%r355, %r361, %r358, %r364}, {%r7113, %r7177}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7332, %r7329}, {%r355, %r361, %r358, %r364}, {%r7122, %r7184}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7341, %r7338}, {%r355, %r361, %r358, %r364}, {%r7131, %r7191}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7350, %r7347}, {%r355, %r361, %r358, %r364}, {%r7140, %r7198}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7359, %r7356}, {%r355, %r361, %r358, %r364}, {%r7149, %r7205}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7289, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7291, %r7289, %r7293;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7294, %r399, %r7296, %r7291;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7298, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7300, %r7298, %r7302;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7303, %r399, %r7305, %r7300;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7307, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7309, %r7307, %r7311;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7312, %r399, %r7314, %r7309;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7316, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7318, %r7316, %r7320;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7321, %r399, %r7323, %r7318;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7325, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7327, %r7325, %r7329;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7330, %r399, %r7332, %r7327;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7334, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7336, %r7334, %r7338;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7339, %r399, %r7341, %r7336;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7343, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7345, %r7343, %r7347;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7348, %r399, %r7350, %r7345;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7352, %r402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7354, %r7352, %r7356;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7357, %r399, %r7359, %r7354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7361, %r402, %r7296;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7364, %r399, %r7293, %r7361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7368, %r402, %r7305;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7371, %r399, %r7302, %r7368;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7375, %r402, %r7314;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7378, %r399, %r7311, %r7375;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7382, %r402, %r7323;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7385, %r399, %r7320, %r7382;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7389, %r402, %r7332;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7392, %r399, %r7329, %r7389;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7396, %r402, %r7341;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7399, %r399, %r7338, %r7396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7403, %r402, %r7350;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7406, %r399, %r7347, %r7403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7410, %r402, %r7359;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7413, %r399, %r7356, %r7410;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7417, %r7418}, {%r433, %r439, %r436, %r442}, {%r7294, %r7364}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7427, %r7428}, {%r433, %r439, %r436, %r442}, {%r7303, %r7371}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7437, %r7438}, {%r433, %r439, %r436, %r442}, {%r7312, %r7378}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7447, %r7448}, {%r433, %r439, %r436, %r442}, {%r7321, %r7385}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7457, %r7458}, {%r433, %r439, %r436, %r442}, {%r7330, %r7392}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7467, %r7468}, {%r433, %r439, %r436, %r442}, {%r7339, %r7399}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7477, %r7478}, {%r433, %r439, %r436, %r442}, {%r7348, %r7406}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7487, %r7488}, {%r433, %r439, %r436, %r442}, {%r7357, %r7413}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7497, %r119, %r7417;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7500, %r119, %r7418;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7503, %r119, %r7427;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7506, %r119, %r7428;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7509, %r119, %r7437;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7512, %r119, %r7438;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7515, %r119, %r7447;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7518, %r119, %r7448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7521, %r119, %r7457;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7524, %r119, %r7458;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7527, %r119, %r7467;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7530, %r119, %r7468;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7533, %r119, %r7477;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7536, %r119, %r7478;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7539, %r119, %r7487;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7542, %r119, %r7488;
	// end inline asm
	// begin inline asm
	mov.b32 %r7545, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7546, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7547, %r7497, %r7545;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7550, %r7547, %r7546;
	// end inline asm
	// begin inline asm
	mov.b32 %r7553, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7554, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7555, %r7500, %r7553;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7558, %r7555, %r7554;
	// end inline asm
	// begin inline asm
	mov.b32 %r7561, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7562, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7563, %r7503, %r7561;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7566, %r7563, %r7562;
	// end inline asm
	// begin inline asm
	mov.b32 %r7569, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7570, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7571, %r7506, %r7569;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7574, %r7571, %r7570;
	// end inline asm
	// begin inline asm
	mov.b32 %r7577, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7578, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7579, %r7509, %r7577;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7582, %r7579, %r7578;
	// end inline asm
	// begin inline asm
	mov.b32 %r7585, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7586, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7587, %r7512, %r7585;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7590, %r7587, %r7586;
	// end inline asm
	// begin inline asm
	mov.b32 %r7593, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7594, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7595, %r7515, %r7593;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7598, %r7595, %r7594;
	// end inline asm
	// begin inline asm
	mov.b32 %r7601, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7602, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7603, %r7518, %r7601;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7606, %r7603, %r7602;
	// end inline asm
	// begin inline asm
	mov.b32 %r7609, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7610, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7611, %r7521, %r7609;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7614, %r7611, %r7610;
	// end inline asm
	// begin inline asm
	mov.b32 %r7617, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7618, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7619, %r7524, %r7617;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7622, %r7619, %r7618;
	// end inline asm
	// begin inline asm
	mov.b32 %r7625, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7626, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7627, %r7527, %r7625;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7630, %r7627, %r7626;
	// end inline asm
	// begin inline asm
	mov.b32 %r7633, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7634, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7635, %r7530, %r7633;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7638, %r7635, %r7634;
	// end inline asm
	// begin inline asm
	mov.b32 %r7641, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7642, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7643, %r7533, %r7641;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7646, %r7643, %r7642;
	// end inline asm
	// begin inline asm
	mov.b32 %r7649, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7650, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7651, %r7536, %r7649;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7654, %r7651, %r7650;
	// end inline asm
	// begin inline asm
	mov.b32 %r7657, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7658, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7659, %r7539, %r7657;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7662, %r7659, %r7658;
	// end inline asm
	// begin inline asm
	mov.b32 %r7665, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7666, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7667, %r7542, %r7665;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7670, %r7667, %r7666;
	// end inline asm
	// begin inline asm
	mov.b32 %r7676, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7674, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7675, %r7676, %r7674;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7678, %r7550, %r7675;
	// end inline asm
	// begin inline asm
	mov.b32 %r7681, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7682, %r7676, %r7681;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7685, %r7558, %r7682;
	// end inline asm
	// begin inline asm
	mov.b32 %r7688, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7689, %r7676, %r7688;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7692, %r7566, %r7689;
	// end inline asm
	// begin inline asm
	mov.b32 %r7695, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7696, %r7676, %r7695;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7699, %r7574, %r7696;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7702, %r7678, %r7692, %r2317;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7706, %r7685, %r7699, %r2317;
	// end inline asm
	shl.b32 	%r7713, %r7706, 4;
	// begin inline asm
	lop3.b32 %r7710, %r2323, %r7702, %r7713, 202;
	// end inline asm
	xor.b32  	%r7892, %r7710, -2004318072;
	// begin inline asm
	mov.b32 %r7717, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7715, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7716, %r7717, %r7715;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7719, %r7582, %r7716;
	// end inline asm
	// begin inline asm
	mov.b32 %r7722, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7723, %r7717, %r7722;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7726, %r7590, %r7723;
	// end inline asm
	// begin inline asm
	mov.b32 %r7729, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7730, %r7717, %r7729;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7733, %r7598, %r7730;
	// end inline asm
	// begin inline asm
	mov.b32 %r7736, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7737, %r7717, %r7736;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7740, %r7606, %r7737;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7743, %r7719, %r7733, %r2317;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7747, %r7726, %r7740, %r2317;
	// end inline asm
	shl.b32 	%r7754, %r7747, 4;
	// begin inline asm
	lop3.b32 %r7751, %r2323, %r7743, %r7754, 202;
	// end inline asm
	xor.b32  	%r7893, %r7751, -2004318072;
	// begin inline asm
	mov.b32 %r7758, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7756, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7757, %r7758, %r7756;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7760, %r7614, %r7757;
	// end inline asm
	// begin inline asm
	mov.b32 %r7763, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7764, %r7758, %r7763;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7767, %r7622, %r7764;
	// end inline asm
	// begin inline asm
	mov.b32 %r7770, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7771, %r7758, %r7770;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7774, %r7630, %r7771;
	// end inline asm
	// begin inline asm
	mov.b32 %r7777, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7778, %r7758, %r7777;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7781, %r7638, %r7778;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7784, %r7760, %r7774, %r2317;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7788, %r7767, %r7781, %r2317;
	// end inline asm
	shl.b32 	%r7795, %r7788, 4;
	// begin inline asm
	lop3.b32 %r7792, %r2323, %r7784, %r7795, 202;
	// end inline asm
	xor.b32  	%r7894, %r7792, -2004318072;
	// begin inline asm
	mov.b32 %r7799, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7797, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7798, %r7799, %r7797;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7801, %r7646, %r7798;
	// end inline asm
	// begin inline asm
	mov.b32 %r7804, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7805, %r7799, %r7804;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7808, %r7654, %r7805;
	// end inline asm
	// begin inline asm
	mov.b32 %r7811, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7812, %r7799, %r7811;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7815, %r7662, %r7812;
	// end inline asm
	// begin inline asm
	mov.b32 %r7818, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7819, %r7799, %r7818;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7822, %r7670, %r7819;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7825, %r7801, %r7815, %r2317;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7829, %r7808, %r7822, %r2317;
	// end inline asm
	shl.b32 	%r7836, %r7829, 4;
	// begin inline asm
	lop3.b32 %r7833, %r2323, %r7825, %r7836, 202;
	// end inline asm
	xor.b32  	%r7895, %r7833, -2004318072;
	st.shared.u32 	[%rd185], %r7892;
	st.shared.u32 	[%rd186], %r7893;
	st.shared.u32 	[%rd187], %r7894;
	st.shared.u32 	[%rd188], %r7895;
	add.s32 	%r8028, %r8028, 64;
	add.s64 	%rd188, %rd188, 8324;
	add.s64 	%rd187, %rd187, 8324;
	add.s64 	%rd186, %rd186, 8324;
	add.s64 	%rd185, %rd185, 8324;
	add.s32 	%r8027, %r8027, 1;
	setp.eq.s32 	%p241, %r8028, 256;
	@%p241 bra 	$L__BB0_131;
	bra.uni 	$L__BB0_130;
$L__BB0_131:                            // %guard_exit17427
                                        //   in Loop: Header=BB0_129 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r7901, [%rd5];
	ld.shared.u32 	%r7902, [%rd6+128];
	ld.shared.u32 	%r7909, [%rd6+4];
	ld.shared.u32 	%r7910, [%rd6+132];
	ld.shared.u32 	%r7917, [%rd5+8324];
	ld.shared.u32 	%r7918, [%rd6+8452];
	ld.shared.u32 	%r7925, [%rd6+8328];
	ld.shared.u32 	%r7926, [%rd6+8456];
	ld.shared.u32 	%r7933, [%rd5+16648];
	ld.shared.u32 	%r7934, [%rd6+16776];
	ld.shared.u32 	%r7941, [%rd6+16652];
	ld.shared.u32 	%r7942, [%rd6+16780];
	ld.shared.u32 	%r7949, [%rd5+24972];
	ld.shared.u32 	%r7950, [%rd6+25100];
	ld.shared.u32 	%r7957, [%rd6+24976];
	ld.shared.u32 	%r7958, [%rd6+25104];
	// begin inline asm
	prmt.b32 %r7896, %r7901, %r7902, %r566;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7900, %r7901, %r7902, %r570;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7904, %r7909, %r7910, %r566;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7908, %r7909, %r7910, %r570;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7912, %r7917, %r7918, %r566;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7916, %r7917, %r7918, %r570;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7920, %r7925, %r7926, %r566;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7924, %r7925, %r7926, %r570;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7928, %r7933, %r7934, %r566;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7932, %r7933, %r7934, %r570;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7936, %r7941, %r7942, %r566;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7940, %r7941, %r7942, %r570;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7944, %r7949, %r7950, %r566;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7948, %r7949, %r7950, %r570;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7952, %r7957, %r7958, %r566;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7956, %r7957, %r7958, %r570;
	// end inline asm
	selp.b32 	%r7960, %r7900, %r7896, %p228;
	shfl.sync.bfly.b32	%r172, %r7960, 8, 31, -1;
	selp.b32 	%r7961, %r7908, %r7904, %p228;
	shfl.sync.bfly.b32	%r173, %r7961, 8, 31, -1;
	selp.b32 	%r7962, %r7916, %r7912, %p228;
	shfl.sync.bfly.b32	%r7963, %r7962, 8, 31, -1;
	selp.b32 	%r7964, %r7924, %r7920, %p228;
	shfl.sync.bfly.b32	%r7965, %r7964, 8, 31, -1;
	selp.b32 	%r7966, %r7932, %r7928, %p228;
	shfl.sync.bfly.b32	%r7967, %r7966, 8, 31, -1;
	selp.b32 	%r7968, %r7940, %r7936, %p228;
	shfl.sync.bfly.b32	%r7969, %r7968, 8, 31, -1;
	selp.b32 	%r7970, %r7948, %r7944, %p228;
	shfl.sync.bfly.b32	%r7971, %r7970, 8, 31, -1;
	selp.b32 	%r7972, %r7956, %r7952, %p228;
	shfl.sync.bfly.b32	%r7973, %r7972, 8, 31, -1;
	and.b32  	%r186, %r111, 256;
	setp.eq.s32 	%p243, %r186, 0;
	shl.b32 	%r7996, %r111, 12;
	@%p243 bra 	$L__BB0_133;
// %bb.132:                             // %pass16561
                                        //   in Loop: Header=BB0_129 Depth=1
	selp.b32 	%r7974, %r173, %r7908, %p228;
	selp.b32 	%r7975, %r7904, %r173, %p228;
	selp.b32 	%r7976, %r172, %r7900, %p228;
	selp.b32 	%r7977, %r7896, %r172, %p228;
	or.b32  	%r7979, %r7996, %r87;
	or.b32  	%r7980, %r7979, %r97;
	or.b32  	%r7981, %r7980, %r88;
	cvt.s64.s32 	%rd135, %r7981;
	add.s64 	%rd136, %rd135, %rd7;
	shr.u64 	%rd137, %rd136, 35;
	add.s64 	%rd138, %rd136, %rd137;
	shr.s64 	%rd139, %rd138, 29;
	setp.lt.s64 	%p245, %rd136, 0;
	and.b64  	%rd140, %rd138, -536870912;
	setp.ne.s64 	%p246, %rd140, %rd136;
	and.pred  	%p247, %p245, %p246;
	selp.u64 	%rd141, 1, 0, %p247;
	sub.s64 	%rd142, %rd141, %rd139;
	shl.b64 	%rd143, %rd142, 29;
	add.s64 	%rd144, %rd143, %rd136;
	shl.b64 	%rd145, %rd144, 2;
	add.s64 	%rd146, %rd3, %rd145;
	st.global.v4.u32 	[%rd146], {%r7977, %r7975, %r7976, %r7974};
$L__BB0_133:                            // %pass16620
                                        //   in Loop: Header=BB0_129 Depth=1
	or.b32  	%r7982, %r186, 64;
	setp.gt.u32 	%p248, %r7982, 191;
	@%p248 bra 	$L__BB0_150;
// %bb.134:                             // %pass16620.pass16722_crit_edge
                                        //   in Loop: Header=BB0_129 Depth=1
	or.b32  	%r8041, %r7996, %r87;
	bra.uni 	$L__BB0_151;
$L__BB0_150:                            // %pass16663
                                        //   in Loop: Header=BB0_129 Depth=1
	selp.b32 	%r174, %r7912, %r7963, %p228;
	selp.b32 	%r175, %r7963, %r7916, %p228;
	selp.b32 	%r176, %r7920, %r7965, %p228;
	selp.b32 	%r177, %r7965, %r7924, %p228;
	or.b32  	%r8041, %r7996, %r87;
	or.b32  	%r7984, %r8041, %r98;
	or.b32  	%r7985, %r7984, 262144;
	cvt.s64.s32 	%rd147, %r7985;
	add.s64 	%rd148, %rd147, %rd7;
	shr.u64 	%rd149, %rd148, 35;
	add.s64 	%rd150, %rd148, %rd149;
	shr.s64 	%rd151, %rd150, 29;
	setp.lt.s64 	%p249, %rd148, 0;
	and.b64  	%rd152, %rd150, -536870912;
	setp.ne.s64 	%p250, %rd152, %rd148;
	and.pred  	%p251, %p249, %p250;
	selp.u64 	%rd153, 1, 0, %p251;
	sub.s64 	%rd154, %rd153, %rd151;
	shl.b64 	%rd155, %rd154, 29;
	add.s64 	%rd156, %rd155, %rd148;
	shl.b64 	%rd157, %rd156, 2;
	add.s64 	%rd158, %rd3, %rd157;
	st.global.v4.u32 	[%rd158], {%r174, %r176, %r175, %r177};
$L__BB0_151:                            // %pass16722
                                        //   in Loop: Header=BB0_129 Depth=1
	selp.b32 	%r182, %r7944, %r7971, %p228;
	selp.b32 	%r183, %r7971, %r7948, %p228;
	selp.b32 	%r184, %r7952, %r7973, %p228;
	selp.b32 	%r185, %r7973, %r7956, %p228;
	or.b32  	%r7987, %r186, 128;
	setp.lt.u32 	%p252, %r7987, 192;
	or.b32  	%r7997, %r8041, %r98;
	@%p252 bra 	$L__BB0_153;
// %bb.152:                             // %pass16765
                                        //   in Loop: Header=BB0_129 Depth=1
	selp.b32 	%r178, %r7928, %r7967, %p228;
	selp.b32 	%r179, %r7967, %r7932, %p228;
	selp.b32 	%r180, %r7936, %r7969, %p228;
	selp.b32 	%r181, %r7969, %r7940, %p228;
	or.b32  	%r7989, %r7997, 524288;
	cvt.s64.s32 	%rd159, %r7989;
	add.s64 	%rd160, %rd159, %rd7;
	shr.u64 	%rd161, %rd160, 35;
	add.s64 	%rd162, %rd160, %rd161;
	shr.s64 	%rd163, %rd162, 29;
	setp.lt.s64 	%p253, %rd160, 0;
	and.b64  	%rd164, %rd162, -536870912;
	setp.ne.s64 	%p254, %rd164, %rd160;
	and.pred  	%p255, %p253, %p254;
	selp.u64 	%rd165, 1, 0, %p255;
	sub.s64 	%rd166, %rd165, %rd163;
	shl.b64 	%rd167, %rd166, 29;
	add.s64 	%rd168, %rd167, %rd160;
	shl.b64 	%rd169, %rd168, 2;
	add.s64 	%rd170, %rd3, %rd169;
	st.global.v4.u32 	[%rd170], {%r178, %r180, %r179, %r181};
	bra.uni 	$L__BB0_153;
$L__BB0_154:                            // %L40513
	st.global.u32 	[%rd4], %r7995;
	ret;
$L__BB0_7:                              // %L246
	mov.u32 	%r7994, 2;
	st.global.u32 	[%rd4], %r7994;
	mov.u64 	%rd183, exception3406;
	cvta.global.u64 	%rd184, %rd183;
	{ // callseq 16, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd184;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 16
	{ // callseq 17, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r187;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 17
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd56, exception13427;
	cvta.global.u64 	%rd57, %rd56;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd57;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r187;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_53:                             // %L40612
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_11695, 
	(
	);
	} // callseq 3
	mov.u64 	%rd65, exception13427;
	cvta.global.u64 	%rd66, %rd65;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd66;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r187;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_83:                             // %L40609
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_11695, 
	(
	);
	} // callseq 7
	mov.u64 	%rd71, exception13427;
	cvta.global.u64 	%rd72, %rd71;
	{ // callseq 8, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd72;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 8
	{ // callseq 9, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r187;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 9
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_98:                             // %L40606
	{ // callseq 13, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_11695, 
	(
	);
	} // callseq 13
	mov.u64 	%rd85, exception13427;
	cvta.global.u64 	%rd86, %rd85;
	{ // callseq 14, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd86;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 14
	{ // callseq 15, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r187;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 15
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
