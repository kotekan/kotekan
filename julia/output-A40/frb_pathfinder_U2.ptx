// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=192, blocks_per_sm=4

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception1911[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1951[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 192, 1, 1
.minnctapersm 4
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<318>;
	.reg .b16 	%rs<195>;
	.reg .b32 	%r<3068>;
	.reg .f32 	%f<790>;
	.reg .b64 	%rd<319>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r282, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd12, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r291, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p4, %r291, 13919;
	@%p4 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd13, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r283, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %ctaid.x;
	mul.lo.s32 	%r2, %r1, 192;
	mov.u32 	%r292, %tid.x;
	mov.u32 	%r4, %tid.y;
	shl.b32 	%r5, %r4, 5;
	or.b32  	%r293, %r2, %r292;
	add.s32 	%r294, %r293, %r5;
	mul.wide.u32 	%rd20, %r294, 4;
	add.s64 	%rd6, %rd13, %rd20;
	mov.u32 	%r295, 1;
	st.global.u32 	[%rd6], %r295;
	setp.gt.u32 	%p5, %r283, 16383;
	@%p5 bra 	$L__BB0_6;
// %bb.3:                               // %L122
	ld.param.u32 	%r284, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p6, %r284, %r283;
	setp.gt.s32 	%p7, %r284, 32767;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_6;
// %bb.4:                               // %L129
	ld.param.u32 	%r285, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r284, %r283;
	mad.lo.s32 	%r296, %r6, -1431655765, 715827872;
	shf.r.wrap.b32 	%r297, %r296, %r296, 4;
	setp.gt.u32 	%p9, %r297, 89478484;
	setp.gt.u32 	%p10, %r285, 511;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_6;
// %bb.5:                               // %L140
	ld.param.u32 	%r286, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p12, %r286, %r285;
	setp.lt.s32 	%p13, %r286, 1024;
	and.pred  	%p14, %p12, %p13;
	@%p14 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r298, %r286, %r285;
	shr.s32 	%r299, %r6, 31;
	shr.u32 	%r300, %r299, 25;
	add.s32 	%r301, %r6, %r300;
	shr.s32 	%r302, %r301, 7;
	setp.eq.s32 	%p15, %r298, %r302;
	@%p15 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L262
	ld.param.u32 	%r287, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p16, %r287, 0;
	@%p16 bra 	$L__BB0_13;
// %bb.9:                               // %L264
	ld.param.u32 	%r288, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p17, %r288, %r287;
	setp.gt.s32 	%p18, %r288, 256;
	or.pred  	%p19, %p17, %p18;
	@%p19 bra 	$L__BB0_13;
// %bb.10:                              // %L274
	ld.param.u32 	%r289, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r7, %r288, %r287;
	and.b32  	%r303, %r7, 1;
	setp.eq.b32 	%p20, %r303, 1;
	setp.lt.s32 	%p21, %r289, 0;
	or.pred  	%p22, %p20, %p21;
	@%p22 bra 	$L__BB0_13;
// %bb.11:                              // %L280
	ld.param.u32 	%r290, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p23, %r290, %r289;
	setp.gt.s32 	%p24, %r290, 4096;
	or.pred  	%p25, %p23, %p24;
	@%p25 bra 	$L__BB0_13;
// %bb.12:                              // %L290
	sub.s32 	%r304, %r290, %r289;
	and.b32  	%r305, %r304, 1;
	setp.eq.b32 	%p26, %r305, 1;
	not.pred 	%p27, %p26;
	setp.eq.s32 	%p28, %r304, %r7;
	and.pred  	%p29, %p27, %p28;
	@%p29 bra 	$L__BB0_175;
	bra.uni 	$L__BB0_13;
$L__BB0_175:                            // %pass162
	and.b32  	%r143, %r292, 3;
	shr.u32 	%r144, %r292, 2;
	mul.lo.s32 	%r306, %r143, %r144;
	and.b32  	%r307, %r306, 7;
	cvt.rn.f32.s32 	%f205, %r307;
	mov.f32 	%f206, 0f40800000;
	div.approx.f32 	%f169, %f205, %f206;
	abs.f32 	%f788, %f169;
	setp.lt.f32 	%p30, %f788, 0f40000000;
	setp.gtu.f32 	%p317, %f788, 0f4B800000;
	mov.f32 	%f784, %f788;
	@%p30 bra 	$L__BB0_187;
// %bb.176:
	@%p317 bra 	$L__BB0_183;
	bra.uni 	$L__BB0_177;
$L__BB0_183:
	mov.b32 	%r146, %f788;
	and.b32  	%r308, %r146, 8388607;
	or.b32  	%r3051, %r308, 1065353216;
	mov.b32 	%f783, %r3051;
	add.s32 	%r309, %r146, -1073741824;
	and.b32  	%r3052, %r309, -8388608;
	setp.eq.s32 	%p37, %r3052, 0;
	@%p37 bra 	$L__BB0_186;
// %bb.184:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f216, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f215,%f216;
	// end inline asm
$L__BB0_185:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r310, %r3052, 192937984;
	add.s32 	%r311, %r3051, %r310;
	mov.b32 	%f217, %r311;
	mul.f32 	%f218, %f215, %f217;
	sub.f32 	%f219, %f217, %f218;
	fma.rn.f32 	%f220, %f219, %f215, %f218;
	sub.f32 	%f221, %f217, %f220;
	fma.rz.f32 	%f222, %f221, %f215, %f220;
	cvt.rzi.f32.f32 	%f223, %f222;
	sub.f32 	%f783, %f217, %f223;
	sub.s32 	%r3052, %r3052, %r310;
	mov.b32 	%r3051, %f783;
	setp.ne.s32 	%p38, %r3052, 0;
	setp.ne.s32 	%p39, %r3051, 0;
	and.pred  	%p40, %p38, %p39;
	@%p40 bra 	$L__BB0_185;
$L__BB0_186:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p41, %r146, 2139095039;
	selp.f32 	%f224, 0f7FFFFFFF, 0f4B800000, %p41;
	mul.f32 	%f225, %f783, 0f34000000;
	mul.f32 	%f784, %f224, %f225;
	bra.uni 	$L__BB0_187;
$L__BB0_177:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f207, 0f40000000;
	div.approx.f32 	%f208, %f788, %f207;
	cvt.rzi.f32.f32 	%f782, %f208;
	fma.rn.f32 	%f172, %f782, 0fC0000000, %f788;
	mov.b32 	%r145, %f172;
	setp.lt.u32 	%p32, %r145, 1073741824;
	@%p32 bra 	$L__BB0_182;
// %bb.178:
	setp.lt.u32 	%p33, %r145, -2147483647;
	@%p33 bra 	$L__BB0_180;
// %bb.179:
	add.f32 	%f213, %f782, 0fBF800000;
	setp.lt.f32 	%p36, %f172, 0fC0000000;
	add.f32 	%f214, %f213, 0fBF800000;
	selp.f32 	%f782, %f214, %f213, %p36;
	bra.uni 	$L__BB0_182;
$L__BB0_180:
	add.f32 	%f782, %f782, 0f3F800000;
	setp.ltu.f32 	%p34, %f172, 0f40800000;
	@%p34 bra 	$L__BB0_182;
// %bb.181:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f209, %f782, 0f3F800000;
	fma.rn.f32 	%f211, %f207, 0fC0400000, %f172;
	setp.ge.f32 	%p35, %f211, 0f00000000;
	add.f32 	%f212, %f209, 0f3F800000;
	selp.f32 	%f782, %f212, %f209, %p35;
$L__BB0_182:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f784, %f782, 0fC0000000, %f788;
$L__BB0_187:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f226, %f784;
	setp.gtu.f32 	%p42, %f226, 0f7F800000;
	mov.b32 	%r312, %f169;
	and.b32  	%r153, %r312, -2147483648;
	@%p42 bra 	$L__BB0_189;
// %bb.188:
	mov.b32 	%r313, %f784;
	or.b32  	%r314, %r153, %r313;
	mov.b32 	%f784, %r314;
$L__BB0_189:                            // %__nv_fmodf.exit
	shl.b32 	%r156, %r292, 1;
	and.b32  	%r157, %r156, 2;
	mul.lo.s32 	%r329, %r157, %r144;
	cvt.rn.f32.s32 	%f259, %r329;
	mov.f32 	%f260, 0f41400000;
	div.approx.f32 	%f186, %f259, %f260;
	abs.f32 	%f734, %f186;
	setp.lt.f32 	%p50, %f734, 0f40000000;
	@%p50 bra 	$L__BB0_25;
// %bb.14:
	setp.gtu.f32 	%p51, %f734, 0f4B800000;
	@%p51 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_15;
$L__BB0_21:
	mov.b32 	%r9, %f734;
	and.b32  	%r330, %r9, 8388607;
	or.b32  	%r3001, %r330, 1065353216;
	mov.b32 	%f733, %r3001;
	add.s32 	%r331, %r9, -1073741824;
	and.b32  	%r3002, %r331, -8388608;
	setp.eq.s32 	%p57, %r3002, 0;
	@%p57 bra 	$L__BB0_24;
// %bb.22:                              // %__nv_fmaf_rn.exit4.i.i.i1988.preheader
	mov.f32 	%f270, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f269,%f270;
	// end inline asm
$L__BB0_23:                             // %__nv_fmaf_rn.exit4.i.i.i1988
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r332, %r3002, 192937984;
	add.s32 	%r333, %r3001, %r332;
	mov.b32 	%f271, %r333;
	mul.f32 	%f272, %f269, %f271;
	sub.f32 	%f273, %f271, %f272;
	fma.rn.f32 	%f274, %f273, %f269, %f272;
	sub.f32 	%f275, %f271, %f274;
	fma.rz.f32 	%f276, %f275, %f269, %f274;
	cvt.rzi.f32.f32 	%f277, %f276;
	sub.f32 	%f733, %f271, %f277;
	sub.s32 	%r3002, %r3002, %r332;
	mov.b32 	%r3001, %f733;
	setp.ne.s32 	%p58, %r3002, 0;
	setp.ne.s32 	%p59, %r3001, 0;
	and.pred  	%p60, %p58, %p59;
	@%p60 bra 	$L__BB0_23;
$L__BB0_24:                             // %__internal_fmodf_slowpath_mod.exit.i.i1990
	setp.gt.u32 	%p61, %r9, 2139095039;
	selp.f32 	%f278, 0f7FFFFFFF, 0f4B800000, %p61;
	mul.f32 	%f279, %f733, 0f34000000;
	mul.f32 	%f734, %f278, %f279;
	bra.uni 	$L__BB0_25;
$L__BB0_15:                             // %__nv_fast_fdividef.exit.i.i.i1967
	mov.f32 	%f261, 0f40000000;
	div.approx.f32 	%f262, %f734, %f261;
	cvt.rzi.f32.f32 	%f732, %f262;
	fma.rn.f32 	%f2, %f732, 0fC0000000, %f734;
	mov.b32 	%r8, %f2;
	setp.lt.u32 	%p52, %r8, 1073741824;
	@%p52 bra 	$L__BB0_20;
// %bb.16:
	setp.lt.u32 	%p53, %r8, -2147483647;
	@%p53 bra 	$L__BB0_18;
// %bb.17:
	add.f32 	%f267, %f732, 0fBF800000;
	setp.lt.f32 	%p56, %f2, 0fC0000000;
	add.f32 	%f268, %f267, 0fBF800000;
	selp.f32 	%f732, %f268, %f267, %p56;
	bra.uni 	$L__BB0_20;
$L__BB0_18:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p54, %f2, 0f40800000;
	@%p54 bra 	$L__BB0_20;
// %bb.19:                              // %__nv_fmaf_rn.exit.i.i.i1971
	add.f32 	%f263, %f732, 0f3F800000;
	fma.rn.f32 	%f265, %f261, 0fC0400000, %f2;
	setp.ge.f32 	%p55, %f265, 0f00000000;
	add.f32 	%f266, %f263, 0f3F800000;
	selp.f32 	%f732, %f266, %f263, %p55;
$L__BB0_20:                             // %__internal_fmodf_fastpath_quot.exit.i.i1974
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_25:                             // %__internal_fmodf_kernel.exit.i1993
	or.b32  	%r158, %r157, 1;
	abs.f32 	%f280, %f734;
	setp.gtu.f32 	%p62, %f280, 0f7F800000;
	@%p62 bra 	$L__BB0_27;
// %bb.26:
	mov.b32 	%r334, %f186;
	and.b32  	%r335, %r334, -2147483648;
	mov.b32 	%r336, %f734;
	or.b32  	%r337, %r335, %r336;
	mov.b32 	%f734, %r337;
$L__BB0_27:                             // %__nv_fmodf.exit1994
	mov.f32 	%f250, 0f00000000;
	setp.eq.s32 	%p70, %r158, 3;
	mov.f32 	%f37, %f250;
	mov.f32 	%f38, %f250;
	@%p70 bra 	$L__BB0_43;
// %bb.28:                              // %L531
	mul.lo.s32 	%r346, %r158, %r144;
	mul.hi.u32 	%r347, %r346, -1431655765;
	shr.u32 	%r348, %r347, 4;
	mul.lo.s32 	%r349, %r348, 24;
	sub.s32 	%r350, %r346, %r349;
	cvt.rn.f32.s32 	%f311, %r350;
	div.approx.f32 	%f18, %f311, %f260;
	abs.f32 	%f738, %f18;
	setp.lt.f32 	%p71, %f738, 0f40000000;
	@%p71 bra 	$L__BB0_40;
// %bb.29:
	setp.gtu.f32 	%p72, %f738, 0f4B800000;
	@%p72 bra 	$L__BB0_36;
	bra.uni 	$L__BB0_30;
$L__BB0_36:
	mov.b32 	%r17, %f738;
	and.b32  	%r351, %r17, 8388607;
	or.b32  	%r3003, %r351, 1065353216;
	mov.b32 	%f737, %r3003;
	add.s32 	%r352, %r17, -1073741824;
	and.b32  	%r3004, %r352, -8388608;
	setp.eq.s32 	%p78, %r3004, 0;
	@%p78 bra 	$L__BB0_39;
// %bb.37:                              // %__nv_fmaf_rn.exit4.i.i.i2019.preheader
	mov.f32 	%f322, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f321,%f322;
	// end inline asm
$L__BB0_38:                             // %__nv_fmaf_rn.exit4.i.i.i2019
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r353, %r3004, 192937984;
	add.s32 	%r354, %r3003, %r353;
	mov.b32 	%f323, %r354;
	mul.f32 	%f324, %f321, %f323;
	sub.f32 	%f325, %f323, %f324;
	fma.rn.f32 	%f326, %f325, %f321, %f324;
	sub.f32 	%f327, %f323, %f326;
	fma.rz.f32 	%f328, %f327, %f321, %f326;
	cvt.rzi.f32.f32 	%f329, %f328;
	sub.f32 	%f737, %f323, %f329;
	sub.s32 	%r3004, %r3004, %r353;
	mov.b32 	%r3003, %f737;
	setp.ne.s32 	%p79, %r3004, 0;
	setp.ne.s32 	%p80, %r3003, 0;
	and.pred  	%p81, %p79, %p80;
	@%p81 bra 	$L__BB0_38;
$L__BB0_39:                             // %__internal_fmodf_slowpath_mod.exit.i.i2021
	setp.gt.u32 	%p82, %r17, 2139095039;
	selp.f32 	%f330, 0f7FFFFFFF, 0f4B800000, %p82;
	mul.f32 	%f331, %f737, 0f34000000;
	mul.f32 	%f738, %f330, %f331;
	bra.uni 	$L__BB0_40;
$L__BB0_30:                             // %__nv_fast_fdividef.exit.i.i.i1998
	mov.f32 	%f313, 0f40000000;
	div.approx.f32 	%f314, %f738, %f313;
	cvt.rzi.f32.f32 	%f736, %f314;
	fma.rn.f32 	%f21, %f736, 0fC0000000, %f738;
	mov.b32 	%r16, %f21;
	setp.lt.u32 	%p73, %r16, 1073741824;
	@%p73 bra 	$L__BB0_35;
// %bb.31:
	setp.lt.u32 	%p74, %r16, -2147483647;
	@%p74 bra 	$L__BB0_33;
// %bb.32:
	add.f32 	%f319, %f736, 0fBF800000;
	setp.lt.f32 	%p77, %f21, 0fC0000000;
	add.f32 	%f320, %f319, 0fBF800000;
	selp.f32 	%f736, %f320, %f319, %p77;
	bra.uni 	$L__BB0_35;
$L__BB0_33:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p75, %f21, 0f40800000;
	@%p75 bra 	$L__BB0_35;
// %bb.34:                              // %__nv_fmaf_rn.exit.i.i.i2002
	add.f32 	%f315, %f736, 0f3F800000;
	fma.rn.f32 	%f317, %f313, 0fC0400000, %f21;
	setp.ge.f32 	%p76, %f317, 0f00000000;
	add.f32 	%f318, %f315, 0f3F800000;
	selp.f32 	%f736, %f318, %f315, %p76;
$L__BB0_35:                             // %__internal_fmodf_fastpath_quot.exit.i.i2005
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_40:                             // %__internal_fmodf_kernel.exit.i2024
	abs.f32 	%f332, %f738;
	setp.gtu.f32 	%p83, %f332, 0f7F800000;
	@%p83 bra 	$L__BB0_42;
// %bb.41:
	mov.b32 	%r355, %f18;
	and.b32  	%r356, %r355, -2147483648;
	mov.b32 	%r357, %f738;
	or.b32  	%r358, %r356, %r357;
	mov.b32 	%f738, %r358;
$L__BB0_42:                             // %__nv_fmodf.exit2025
	add.f32 	%f333, %f738, %f738;
	mov.b32 	%r359, %f333;
	and.b32  	%r360, %r359, -2147483648;
	or.b32  	%r361, %r360, 1056964608;
	mov.b32 	%f334, %r361;
	add.f32 	%f335, %f333, %f334;
	cvt.rzi.f32.f32 	%f336, %f335;
	abs.f32 	%f337, %f333;
	setp.gt.f32 	%p84, %f337, 0f4B000000;
	selp.f32 	%f338, %f333, %f336, %p84;
	cvt.rzi.f32.f32 	%f339, %f333;
	setp.lt.f32 	%p85, %f337, 0f3F000000;
	selp.f32 	%f340, %f339, %f338, %p85;
	cvt.rzi.s32.f32 	%r362, %f340;
	fma.rn.f32 	%f341, %f340, 0fBF000000, %f738;
	mul.f32 	%f342, %f341, %f341;
	fma.rn.f32 	%f343, %f342, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f344, %f342, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f345, %f343, %f342, 0fC0A55DF6;
	fma.rn.f32 	%f346, %f344, %f342, 0f4081E0CF;
	fma.rn.f32 	%f347, %f342, %f341, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f342, 0fC09DE9E6;
	fma.rn.f32 	%f349, %f345, %f347, 0f00000000;
	fma.rn.f32 	%f350, %f348, %f342, 0f3F800000;
	fma.rn.f32 	%f351, %f341, 0f40490FDB, %f349;
	and.b32  	%r363, %r362, 1;
	setp.eq.b32 	%p86, %r363, 1;
	selp.f32 	%f352, %f350, %f351, %p86;
	selp.f32 	%f353, %f351, %f350, %p86;
	and.b32  	%r364, %r362, 2;
	setp.eq.s32 	%p87, %r364, 0;
	neg.f32 	%f354, %f352;
	selp.f32 	%f355, %f352, %f354, %p87;
	add.s32 	%r365, %r362, 1;
	and.b32  	%r366, %r365, 2;
	setp.eq.s32 	%p88, %r366, 0;
	mov.f32 	%f356, 0f00000000;
	sub.f32 	%f357, %f356, %f353;
	selp.f32 	%f358, %f353, %f357, %p88;
	cvt.rzi.f32.f32 	%f359, %f738;
	setp.eq.f32 	%p89, %f359, %f738;
	mul.f32 	%f360, %f738, 0f00000000;
	selp.f32 	%f38, %f360, %f355, %p89;
	abs.f32 	%f361, %f738;
	setp.gt.f32 	%p90, %f361, 0f4B800000;
	add.f32 	%f362, %f38, 0f3F800000;
	selp.f32 	%f37, %f362, %f358, %p90;
$L__BB0_43:                             // %L565
	and.b32  	%r26, %r144, 3;
	setp.eq.s32 	%p91, %r26, 3;
	mov.f32 	%f731, 0f3FC00000;
	mov.f32 	%f746, %f250;
	mov.f32 	%f755, %f250;
	@%p91 bra 	$L__BB0_59;
// %bb.44:                              // %L603
	mul.lo.s32 	%r373, %r157, %r26;
	cvt.u16.u32 	%rs9, %r373;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 9;
	mul.lo.s16 	%rs12, %rs11, 3;
	sub.s16 	%rs13, %rs9, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f364, %rs14;
	div.approx.f32 	%f39, %f364, %f731;
	abs.f32 	%f744, %f39;
	setp.lt.f32 	%p92, %f744, 0f40000000;
	@%p92 bra 	$L__BB0_56;
// %bb.45:
	setp.gtu.f32 	%p93, %f744, 0f4B800000;
	@%p93 bra 	$L__BB0_52;
	bra.uni 	$L__BB0_46;
$L__BB0_52:
	mov.b32 	%r28, %f744;
	and.b32  	%r374, %r28, 8388607;
	or.b32  	%r3005, %r374, 1065353216;
	mov.b32 	%f743, %r3005;
	add.s32 	%r375, %r28, -1073741824;
	and.b32  	%r3006, %r375, -8388608;
	setp.eq.s32 	%p99, %r3006, 0;
	@%p99 bra 	$L__BB0_55;
// %bb.53:                              // %__nv_fmaf_rn.exit4.i.i.i2050.preheader
	mov.f32 	%f375, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f374,%f375;
	// end inline asm
$L__BB0_54:                             // %__nv_fmaf_rn.exit4.i.i.i2050
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r376, %r3006, 192937984;
	add.s32 	%r377, %r3005, %r376;
	mov.b32 	%f376, %r377;
	mul.f32 	%f377, %f374, %f376;
	sub.f32 	%f378, %f376, %f377;
	fma.rn.f32 	%f379, %f378, %f374, %f377;
	sub.f32 	%f380, %f376, %f379;
	fma.rz.f32 	%f381, %f380, %f374, %f379;
	cvt.rzi.f32.f32 	%f382, %f381;
	sub.f32 	%f743, %f376, %f382;
	sub.s32 	%r3006, %r3006, %r376;
	mov.b32 	%r3005, %f743;
	setp.ne.s32 	%p100, %r3006, 0;
	setp.ne.s32 	%p101, %r3005, 0;
	and.pred  	%p102, %p100, %p101;
	@%p102 bra 	$L__BB0_54;
$L__BB0_55:                             // %__internal_fmodf_slowpath_mod.exit.i.i2052
	setp.gt.u32 	%p103, %r28, 2139095039;
	selp.f32 	%f383, 0f7FFFFFFF, 0f4B800000, %p103;
	mul.f32 	%f384, %f743, 0f34000000;
	mul.f32 	%f744, %f383, %f384;
	bra.uni 	$L__BB0_56;
$L__BB0_46:                             // %__nv_fast_fdividef.exit.i.i.i2029
	mov.f32 	%f366, 0f40000000;
	div.approx.f32 	%f367, %f744, %f366;
	cvt.rzi.f32.f32 	%f742, %f367;
	fma.rn.f32 	%f42, %f742, 0fC0000000, %f744;
	mov.b32 	%r27, %f42;
	setp.lt.u32 	%p94, %r27, 1073741824;
	@%p94 bra 	$L__BB0_51;
// %bb.47:
	setp.lt.u32 	%p95, %r27, -2147483647;
	@%p95 bra 	$L__BB0_49;
// %bb.48:
	add.f32 	%f372, %f742, 0fBF800000;
	setp.lt.f32 	%p98, %f42, 0fC0000000;
	add.f32 	%f373, %f372, 0fBF800000;
	selp.f32 	%f742, %f373, %f372, %p98;
	bra.uni 	$L__BB0_51;
$L__BB0_49:
	add.f32 	%f742, %f742, 0f3F800000;
	setp.ltu.f32 	%p96, %f42, 0f40800000;
	@%p96 bra 	$L__BB0_51;
// %bb.50:                              // %__nv_fmaf_rn.exit.i.i.i2033
	add.f32 	%f368, %f742, 0f3F800000;
	fma.rn.f32 	%f370, %f366, 0fC0400000, %f42;
	setp.ge.f32 	%p97, %f370, 0f00000000;
	add.f32 	%f371, %f368, 0f3F800000;
	selp.f32 	%f742, %f371, %f368, %p97;
$L__BB0_51:                             // %__internal_fmodf_fastpath_quot.exit.i.i2036
	fma.rn.f32 	%f744, %f742, 0fC0000000, %f744;
$L__BB0_56:                             // %__internal_fmodf_kernel.exit.i2055
	abs.f32 	%f385, %f744;
	setp.gtu.f32 	%p104, %f385, 0f7F800000;
	@%p104 bra 	$L__BB0_58;
// %bb.57:
	mov.b32 	%r378, %f39;
	and.b32  	%r379, %r378, -2147483648;
	mov.b32 	%r380, %f744;
	or.b32  	%r381, %r379, %r380;
	mov.b32 	%f744, %r381;
$L__BB0_58:                             // %__nv_fmodf.exit2056
	add.f32 	%f386, %f744, %f744;
	mov.b32 	%r382, %f386;
	and.b32  	%r383, %r382, -2147483648;
	or.b32  	%r384, %r383, 1056964608;
	mov.b32 	%f387, %r384;
	add.f32 	%f388, %f386, %f387;
	cvt.rzi.f32.f32 	%f389, %f388;
	abs.f32 	%f390, %f386;
	setp.gt.f32 	%p105, %f390, 0f4B000000;
	selp.f32 	%f391, %f386, %f389, %p105;
	cvt.rzi.f32.f32 	%f392, %f386;
	setp.lt.f32 	%p106, %f390, 0f3F000000;
	selp.f32 	%f393, %f392, %f391, %p106;
	cvt.rzi.s32.f32 	%r385, %f393;
	fma.rn.f32 	%f394, %f393, 0fBF000000, %f744;
	mul.f32 	%f395, %f394, %f394;
	fma.rn.f32 	%f396, %f395, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f397, %f395, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f398, %f396, %f395, 0fC0A55DF6;
	fma.rn.f32 	%f399, %f397, %f395, 0f4081E0CF;
	fma.rn.f32 	%f400, %f395, %f394, 0f00000000;
	fma.rn.f32 	%f401, %f399, %f395, 0fC09DE9E6;
	fma.rn.f32 	%f402, %f398, %f400, 0f00000000;
	fma.rn.f32 	%f403, %f401, %f395, 0f3F800000;
	fma.rn.f32 	%f404, %f394, 0f40490FDB, %f402;
	and.b32  	%r386, %r385, 1;
	setp.eq.b32 	%p107, %r386, 1;
	selp.f32 	%f405, %f403, %f404, %p107;
	selp.f32 	%f406, %f404, %f403, %p107;
	and.b32  	%r387, %r385, 2;
	setp.eq.s32 	%p108, %r387, 0;
	neg.f32 	%f407, %f405;
	selp.f32 	%f408, %f405, %f407, %p108;
	add.s32 	%r388, %r385, 1;
	and.b32  	%r389, %r388, 2;
	setp.eq.s32 	%p109, %r389, 0;
	mov.f32 	%f409, 0f00000000;
	sub.f32 	%f410, %f409, %f406;
	selp.f32 	%f411, %f406, %f410, %p109;
	cvt.rzi.f32.f32 	%f412, %f744;
	setp.eq.f32 	%p110, %f412, %f744;
	mul.f32 	%f413, %f744, 0f00000000;
	selp.f32 	%f755, %f413, %f408, %p110;
	abs.f32 	%f414, %f744;
	setp.gt.f32 	%p111, %f414, 0f4B800000;
	add.f32 	%f415, %f755, 0f3F800000;
	selp.f32 	%f746, %f415, %f411, %p111;
$L__BB0_59:                             // %L637
	or.pred  	%p114, %p70, %p91;
	mov.f32 	%f752, %f250;
	mov.f32 	%f757, %f250;
	@%p114 bra 	$L__BB0_75;
// %bb.60:                              // %L645
	mul.lo.s32 	%r390, %r158, %r26;
	mul.hi.u32 	%r391, %r390, -1431655765;
	shr.u32 	%r392, %r391, 1;
	mul.lo.s32 	%r393, %r392, 3;
	sub.s32 	%r394, %r390, %r393;
	cvt.rn.f32.s32 	%f417, %r394;
	div.approx.f32 	%f60, %f417, %f731;
	abs.f32 	%f750, %f60;
	setp.lt.f32 	%p115, %f750, 0f40000000;
	@%p115 bra 	$L__BB0_72;
// %bb.61:
	setp.gtu.f32 	%p116, %f750, 0f4B800000;
	@%p116 bra 	$L__BB0_68;
	bra.uni 	$L__BB0_62;
$L__BB0_68:
	mov.b32 	%r36, %f750;
	and.b32  	%r395, %r36, 8388607;
	or.b32  	%r3007, %r395, 1065353216;
	mov.b32 	%f749, %r3007;
	add.s32 	%r396, %r36, -1073741824;
	and.b32  	%r3008, %r396, -8388608;
	setp.eq.s32 	%p122, %r3008, 0;
	@%p122 bra 	$L__BB0_71;
// %bb.69:                              // %__nv_fmaf_rn.exit4.i.i.i2081.preheader
	mov.f32 	%f428, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f427,%f428;
	// end inline asm
$L__BB0_70:                             // %__nv_fmaf_rn.exit4.i.i.i2081
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r397, %r3008, 192937984;
	add.s32 	%r398, %r3007, %r397;
	mov.b32 	%f429, %r398;
	mul.f32 	%f430, %f427, %f429;
	sub.f32 	%f431, %f429, %f430;
	fma.rn.f32 	%f432, %f431, %f427, %f430;
	sub.f32 	%f433, %f429, %f432;
	fma.rz.f32 	%f434, %f433, %f427, %f432;
	cvt.rzi.f32.f32 	%f435, %f434;
	sub.f32 	%f749, %f429, %f435;
	sub.s32 	%r3008, %r3008, %r397;
	mov.b32 	%r3007, %f749;
	setp.ne.s32 	%p123, %r3008, 0;
	setp.ne.s32 	%p124, %r3007, 0;
	and.pred  	%p125, %p123, %p124;
	@%p125 bra 	$L__BB0_70;
$L__BB0_71:                             // %__internal_fmodf_slowpath_mod.exit.i.i2083
	setp.gt.u32 	%p126, %r36, 2139095039;
	selp.f32 	%f436, 0f7FFFFFFF, 0f4B800000, %p126;
	mul.f32 	%f437, %f749, 0f34000000;
	mul.f32 	%f750, %f436, %f437;
	bra.uni 	$L__BB0_72;
$L__BB0_62:                             // %__nv_fast_fdividef.exit.i.i.i2060
	mov.f32 	%f419, 0f40000000;
	div.approx.f32 	%f420, %f750, %f419;
	cvt.rzi.f32.f32 	%f748, %f420;
	fma.rn.f32 	%f63, %f748, 0fC0000000, %f750;
	mov.b32 	%r35, %f63;
	setp.lt.u32 	%p117, %r35, 1073741824;
	@%p117 bra 	$L__BB0_67;
// %bb.63:
	setp.lt.u32 	%p118, %r35, -2147483647;
	@%p118 bra 	$L__BB0_65;
// %bb.64:
	add.f32 	%f425, %f748, 0fBF800000;
	setp.lt.f32 	%p121, %f63, 0fC0000000;
	add.f32 	%f426, %f425, 0fBF800000;
	selp.f32 	%f748, %f426, %f425, %p121;
	bra.uni 	$L__BB0_67;
$L__BB0_65:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p119, %f63, 0f40800000;
	@%p119 bra 	$L__BB0_67;
// %bb.66:                              // %__nv_fmaf_rn.exit.i.i.i2064
	add.f32 	%f421, %f748, 0f3F800000;
	fma.rn.f32 	%f423, %f419, 0fC0400000, %f63;
	setp.ge.f32 	%p120, %f423, 0f00000000;
	add.f32 	%f424, %f421, 0f3F800000;
	selp.f32 	%f748, %f424, %f421, %p120;
$L__BB0_67:                             // %__internal_fmodf_fastpath_quot.exit.i.i2067
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_72:                             // %__internal_fmodf_kernel.exit.i2086
	abs.f32 	%f438, %f750;
	setp.gtu.f32 	%p127, %f438, 0f7F800000;
	@%p127 bra 	$L__BB0_74;
// %bb.73:
	mov.b32 	%r399, %f60;
	and.b32  	%r400, %r399, -2147483648;
	mov.b32 	%r401, %f750;
	or.b32  	%r402, %r400, %r401;
	mov.b32 	%f750, %r402;
$L__BB0_74:                             // %__nv_fmodf.exit2087
	add.f32 	%f439, %f750, %f750;
	mov.b32 	%r403, %f439;
	and.b32  	%r404, %r403, -2147483648;
	or.b32  	%r405, %r404, 1056964608;
	mov.b32 	%f440, %r405;
	add.f32 	%f441, %f439, %f440;
	cvt.rzi.f32.f32 	%f442, %f441;
	abs.f32 	%f443, %f439;
	setp.gt.f32 	%p128, %f443, 0f4B000000;
	selp.f32 	%f444, %f439, %f442, %p128;
	cvt.rzi.f32.f32 	%f445, %f439;
	setp.lt.f32 	%p129, %f443, 0f3F000000;
	selp.f32 	%f446, %f445, %f444, %p129;
	cvt.rzi.s32.f32 	%r406, %f446;
	fma.rn.f32 	%f447, %f446, 0fBF000000, %f750;
	mul.f32 	%f448, %f447, %f447;
	fma.rn.f32 	%f449, %f448, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f450, %f448, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f451, %f449, %f448, 0fC0A55DF6;
	fma.rn.f32 	%f452, %f450, %f448, 0f4081E0CF;
	fma.rn.f32 	%f453, %f448, %f447, 0f00000000;
	fma.rn.f32 	%f454, %f452, %f448, 0fC09DE9E6;
	fma.rn.f32 	%f455, %f451, %f453, 0f00000000;
	fma.rn.f32 	%f456, %f454, %f448, 0f3F800000;
	fma.rn.f32 	%f457, %f447, 0f40490FDB, %f455;
	and.b32  	%r407, %r406, 1;
	setp.eq.b32 	%p130, %r407, 1;
	selp.f32 	%f458, %f456, %f457, %p130;
	selp.f32 	%f459, %f457, %f456, %p130;
	and.b32  	%r408, %r406, 2;
	setp.eq.s32 	%p131, %r408, 0;
	neg.f32 	%f460, %f458;
	selp.f32 	%f461, %f458, %f460, %p131;
	add.s32 	%r409, %r406, 1;
	and.b32  	%r410, %r409, 2;
	setp.eq.s32 	%p132, %r410, 0;
	mov.f32 	%f462, 0f00000000;
	sub.f32 	%f463, %f462, %f459;
	selp.f32 	%f464, %f459, %f463, %p132;
	cvt.rzi.f32.f32 	%f465, %f750;
	setp.eq.f32 	%p133, %f465, %f750;
	mul.f32 	%f466, %f750, 0f00000000;
	selp.f32 	%f757, %f466, %f461, %p133;
	abs.f32 	%f467, %f750;
	setp.gt.f32 	%p134, %f467, 0f4B800000;
	add.f32 	%f468, %f757, 0f3F800000;
	selp.f32 	%f752, %f468, %f464, %p134;
$L__BB0_75:                             // %L679
	and.b32  	%r43, %r292, 2;
	setp.eq.s32 	%p135, %r43, 0;
	mov.f32 	%f83, %f746;
	mov.f32 	%f85, %f752;
	@%p135 bra 	$L__BB0_77;
// %bb.76:                              // %L688
	neg.f32 	%f85, %f757;
	neg.f32 	%f83, %f755;
	mov.f32 	%f755, %f746;
	mov.f32 	%f757, %f752;
$L__BB0_77:                             // %L690
	@%p30 bra 	$L__BB0_197;
// %bb.78:
	@%p317 bra 	$L__BB0_193;
	bra.uni 	$L__BB0_79;
$L__BB0_193:
	mov.b32 	%r160, %f788;
	and.b32  	%r417, %r160, 8388607;
	or.b32  	%r3053, %r417, 1065353216;
	mov.b32 	%f787, %r3053;
	add.s32 	%r418, %r160, -1073741824;
	and.b32  	%r3054, %r418, -8388608;
	setp.eq.s32 	%p143, %r3054, 0;
	@%p143 bra 	$L__BB0_196;
// %bb.194:                             // %__nv_fmaf_rn.exit4.i.i.i2112.preheader
	mov.f32 	%f478, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f477,%f478;
	// end inline asm
$L__BB0_195:                            // %__nv_fmaf_rn.exit4.i.i.i2112
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r419, %r3054, 192937984;
	add.s32 	%r420, %r3053, %r419;
	mov.b32 	%f479, %r420;
	mul.f32 	%f480, %f477, %f479;
	sub.f32 	%f481, %f479, %f480;
	fma.rn.f32 	%f482, %f481, %f477, %f480;
	sub.f32 	%f483, %f479, %f482;
	fma.rz.f32 	%f484, %f483, %f477, %f482;
	cvt.rzi.f32.f32 	%f485, %f484;
	sub.f32 	%f787, %f479, %f485;
	sub.s32 	%r3054, %r3054, %r419;
	mov.b32 	%r3053, %f787;
	setp.ne.s32 	%p144, %r3054, 0;
	setp.ne.s32 	%p145, %r3053, 0;
	and.pred  	%p146, %p144, %p145;
	@%p146 bra 	$L__BB0_195;
$L__BB0_196:                            // %__internal_fmodf_slowpath_mod.exit.i.i2114
	setp.gt.u32 	%p147, %r160, 2139095039;
	selp.f32 	%f486, 0f7FFFFFFF, 0f4B800000, %p147;
	mul.f32 	%f487, %f787, 0f34000000;
	mul.f32 	%f788, %f486, %f487;
	bra.uni 	$L__BB0_197;
$L__BB0_79:                             // %__nv_fast_fdividef.exit.i.i.i2091
	mov.f32 	%f469, 0f40000000;
	div.approx.f32 	%f470, %f788, %f469;
	cvt.rzi.f32.f32 	%f786, %f470;
	fma.rn.f32 	%f189, %f786, 0fC0000000, %f788;
	mov.b32 	%r159, %f189;
	setp.lt.u32 	%p138, %r159, 1073741824;
	@%p138 bra 	$L__BB0_192;
// %bb.80:
	setp.lt.u32 	%p139, %r159, -2147483647;
	@%p139 bra 	$L__BB0_190;
// %bb.81:
	add.f32 	%f475, %f786, 0fBF800000;
	setp.lt.f32 	%p142, %f189, 0fC0000000;
	add.f32 	%f476, %f475, 0fBF800000;
	selp.f32 	%f786, %f476, %f475, %p142;
	bra.uni 	$L__BB0_192;
$L__BB0_190:
	add.f32 	%f786, %f786, 0f3F800000;
	setp.ltu.f32 	%p140, %f189, 0f40800000;
	@%p140 bra 	$L__BB0_192;
// %bb.191:                             // %__nv_fmaf_rn.exit.i.i.i2095
	add.f32 	%f471, %f786, 0f3F800000;
	fma.rn.f32 	%f473, %f469, 0fC0400000, %f189;
	setp.ge.f32 	%p141, %f473, 0f00000000;
	add.f32 	%f474, %f471, 0f3F800000;
	selp.f32 	%f786, %f474, %f471, %p141;
$L__BB0_192:                            // %__internal_fmodf_fastpath_quot.exit.i.i2098
	fma.rn.f32 	%f788, %f786, 0fC0000000, %f788;
$L__BB0_197:                            // %__internal_fmodf_kernel.exit.i2117
	abs.f32 	%f488, %f788;
	setp.gtu.f32 	%p148, %f488, 0f7F800000;
	@%p148 bra 	$L__BB0_199;
// %bb.198:
	mov.b32 	%r421, %f788;
	or.b32  	%r422, %r153, %r421;
	mov.b32 	%f788, %r422;
$L__BB0_199:                            // %__nv_fmodf.exit2118
	mov.f32 	%f512, 0f00000000;
	mov.f32 	%f521, 0f41000000;
	div.approx.f32 	%f203, %f512, %f521;
	abs.f32 	%f760, %f203;
	setp.lt.f32 	%p156, %f760, 0f40000000;
	@%p156 bra 	$L__BB0_93;
// %bb.82:
	setp.gtu.f32 	%p157, %f760, 0f4B800000;
	@%p157 bra 	$L__BB0_89;
	bra.uni 	$L__BB0_83;
$L__BB0_89:
	mov.b32 	%r47, %f760;
	and.b32  	%r437, %r47, 8388607;
	or.b32  	%r3009, %r437, 1065353216;
	mov.b32 	%f759, %r3009;
	add.s32 	%r438, %r47, -1073741824;
	and.b32  	%r3010, %r438, -8388608;
	setp.eq.s32 	%p163, %r3010, 0;
	@%p163 bra 	$L__BB0_92;
// %bb.90:                              // %__nv_fmaf_rn.exit4.i.i.i2143.preheader
	mov.f32 	%f531, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f530,%f531;
	// end inline asm
$L__BB0_91:                             // %__nv_fmaf_rn.exit4.i.i.i2143
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r439, %r3010, 192937984;
	add.s32 	%r440, %r3009, %r439;
	mov.b32 	%f532, %r440;
	mul.f32 	%f533, %f530, %f532;
	sub.f32 	%f534, %f532, %f533;
	fma.rn.f32 	%f535, %f534, %f530, %f533;
	sub.f32 	%f536, %f532, %f535;
	fma.rz.f32 	%f537, %f536, %f530, %f535;
	cvt.rzi.f32.f32 	%f538, %f537;
	sub.f32 	%f759, %f532, %f538;
	sub.s32 	%r3010, %r3010, %r439;
	mov.b32 	%r3009, %f759;
	setp.ne.s32 	%p164, %r3010, 0;
	setp.ne.s32 	%p165, %r3009, 0;
	and.pred  	%p166, %p164, %p165;
	@%p166 bra 	$L__BB0_91;
$L__BB0_92:                             // %__internal_fmodf_slowpath_mod.exit.i.i2145
	setp.gt.u32 	%p167, %r47, 2139095039;
	selp.f32 	%f539, 0f7FFFFFFF, 0f4B800000, %p167;
	mul.f32 	%f540, %f759, 0f34000000;
	mul.f32 	%f760, %f539, %f540;
	bra.uni 	$L__BB0_93;
$L__BB0_83:                             // %__nv_fast_fdividef.exit.i.i.i2122
	mov.f32 	%f522, 0f40000000;
	div.approx.f32 	%f523, %f760, %f522;
	cvt.rzi.f32.f32 	%f758, %f523;
	fma.rn.f32 	%f88, %f758, 0fC0000000, %f760;
	mov.b32 	%r46, %f88;
	setp.lt.u32 	%p158, %r46, 1073741824;
	@%p158 bra 	$L__BB0_88;
// %bb.84:
	setp.lt.u32 	%p159, %r46, -2147483647;
	@%p159 bra 	$L__BB0_86;
// %bb.85:
	add.f32 	%f528, %f758, 0fBF800000;
	setp.lt.f32 	%p162, %f88, 0fC0000000;
	add.f32 	%f529, %f528, 0fBF800000;
	selp.f32 	%f758, %f529, %f528, %p162;
	bra.uni 	$L__BB0_88;
$L__BB0_86:
	add.f32 	%f758, %f758, 0f3F800000;
	setp.ltu.f32 	%p160, %f88, 0f40800000;
	@%p160 bra 	$L__BB0_88;
// %bb.87:                              // %__nv_fmaf_rn.exit.i.i.i2126
	add.f32 	%f524, %f758, 0f3F800000;
	fma.rn.f32 	%f526, %f522, 0fC0400000, %f88;
	setp.ge.f32 	%p161, %f526, 0f00000000;
	add.f32 	%f527, %f524, 0f3F800000;
	selp.f32 	%f758, %f527, %f524, %p161;
$L__BB0_88:                             // %__internal_fmodf_fastpath_quot.exit.i.i2129
	fma.rn.f32 	%f760, %f758, 0fC0000000, %f760;
$L__BB0_93:                             // %__internal_fmodf_kernel.exit.i2148
	abs.f32 	%f541, %f760;
	setp.gtu.f32 	%p168, %f541, 0f7F800000;
	@%p168 bra 	$L__BB0_95;
// %bb.94:
	mov.b32 	%r441, %f203;
	and.b32  	%r442, %r441, -2147483648;
	mov.b32 	%r443, %f760;
	or.b32  	%r444, %r442, %r443;
	mov.b32 	%f760, %r444;
$L__BB0_95:                             // %__nv_fmodf.exit2149
	cvt.rn.f32.s32 	%f572, %r144;
	div.approx.f32 	%f104, %f572, %f521;
	abs.f32 	%f764, %f104;
	setp.lt.f32 	%p176, %f764, 0f40000000;
	@%p176 bra 	$L__BB0_107;
// %bb.96:
	setp.gtu.f32 	%p177, %f764, 0f4B800000;
	@%p177 bra 	$L__BB0_103;
	bra.uni 	$L__BB0_97;
$L__BB0_103:
	mov.b32 	%r55, %f764;
	and.b32  	%r453, %r55, 8388607;
	or.b32  	%r3011, %r453, 1065353216;
	mov.b32 	%f763, %r3011;
	add.s32 	%r454, %r55, -1073741824;
	and.b32  	%r3012, %r454, -8388608;
	setp.eq.s32 	%p183, %r3012, 0;
	@%p183 bra 	$L__BB0_106;
// %bb.104:                             // %__nv_fmaf_rn.exit4.i.i.i2174.preheader
	mov.f32 	%f583, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f582,%f583;
	// end inline asm
$L__BB0_105:                            // %__nv_fmaf_rn.exit4.i.i.i2174
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r455, %r3012, 192937984;
	add.s32 	%r456, %r3011, %r455;
	mov.b32 	%f584, %r456;
	mul.f32 	%f585, %f582, %f584;
	sub.f32 	%f586, %f584, %f585;
	fma.rn.f32 	%f587, %f586, %f582, %f585;
	sub.f32 	%f588, %f584, %f587;
	fma.rz.f32 	%f589, %f588, %f582, %f587;
	cvt.rzi.f32.f32 	%f590, %f589;
	sub.f32 	%f763, %f584, %f590;
	sub.s32 	%r3012, %r3012, %r455;
	mov.b32 	%r3011, %f763;
	setp.ne.s32 	%p184, %r3012, 0;
	setp.ne.s32 	%p185, %r3011, 0;
	and.pred  	%p186, %p184, %p185;
	@%p186 bra 	$L__BB0_105;
$L__BB0_106:                            // %__internal_fmodf_slowpath_mod.exit.i.i2176
	setp.gt.u32 	%p187, %r55, 2139095039;
	selp.f32 	%f591, 0f7FFFFFFF, 0f4B800000, %p187;
	mul.f32 	%f592, %f763, 0f34000000;
	mul.f32 	%f764, %f591, %f592;
	bra.uni 	$L__BB0_107;
$L__BB0_97:                             // %__nv_fast_fdividef.exit.i.i.i2153
	mov.f32 	%f574, 0f40000000;
	div.approx.f32 	%f575, %f764, %f574;
	cvt.rzi.f32.f32 	%f762, %f575;
	fma.rn.f32 	%f107, %f762, 0fC0000000, %f764;
	mov.b32 	%r54, %f107;
	setp.lt.u32 	%p178, %r54, 1073741824;
	@%p178 bra 	$L__BB0_102;
// %bb.98:
	setp.lt.u32 	%p179, %r54, -2147483647;
	@%p179 bra 	$L__BB0_100;
// %bb.99:
	add.f32 	%f580, %f762, 0fBF800000;
	setp.lt.f32 	%p182, %f107, 0fC0000000;
	add.f32 	%f581, %f580, 0fBF800000;
	selp.f32 	%f762, %f581, %f580, %p182;
	bra.uni 	$L__BB0_102;
$L__BB0_100:
	add.f32 	%f762, %f762, 0f3F800000;
	setp.ltu.f32 	%p180, %f107, 0f40800000;
	@%p180 bra 	$L__BB0_102;
// %bb.101:                             // %__nv_fmaf_rn.exit.i.i.i2157
	add.f32 	%f576, %f762, 0f3F800000;
	fma.rn.f32 	%f578, %f574, 0fC0400000, %f107;
	setp.ge.f32 	%p181, %f578, 0f00000000;
	add.f32 	%f579, %f576, 0f3F800000;
	selp.f32 	%f762, %f579, %f576, %p181;
$L__BB0_102:                            // %__internal_fmodf_fastpath_quot.exit.i.i2160
	fma.rn.f32 	%f764, %f762, 0fC0000000, %f764;
$L__BB0_107:                            // %__internal_fmodf_kernel.exit.i2179
	abs.f32 	%f593, %f764;
	setp.gtu.f32 	%p188, %f593, 0f7F800000;
	@%p188 bra 	$L__BB0_109;
// %bb.108:
	mov.b32 	%r457, %f104;
	and.b32  	%r458, %r457, -2147483648;
	mov.b32 	%r459, %f764;
	or.b32  	%r460, %r458, %r459;
	mov.b32 	%f764, %r460;
$L__BB0_109:                            // %__nv_fmodf.exit2180
	and.b32  	%r65, %r292, 1;
	shr.u32 	%r66, %r292, 4;
	setp.ne.s32 	%p196, %r65, %r66;
	mov.f32 	%f770, %f512;
	mov.f32 	%f779, %f512;
	@%p196 bra 	$L__BB0_125;
// %bb.110:                             // %L895
	mov.f32 	%f626, 0f3F800000;
	mov.f32 	%f627, 0f00000000;
	div.approx.f32 	%f121, %f627, %f626;
	abs.f32 	%f768, %f121;
	setp.lt.f32 	%p197, %f768, 0f40000000;
	@%p197 bra 	$L__BB0_122;
// %bb.111:
	setp.gtu.f32 	%p198, %f768, 0f4B800000;
	@%p198 bra 	$L__BB0_118;
	bra.uni 	$L__BB0_112;
$L__BB0_118:
	mov.b32 	%r68, %f768;
	and.b32  	%r475, %r68, 8388607;
	or.b32  	%r3013, %r475, 1065353216;
	mov.b32 	%f767, %r3013;
	add.s32 	%r476, %r68, -1073741824;
	and.b32  	%r3014, %r476, -8388608;
	setp.eq.s32 	%p204, %r3014, 0;
	@%p204 bra 	$L__BB0_121;
// %bb.119:                             // %__nv_fmaf_rn.exit4.i.i.i2205.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f636,%f626;
	// end inline asm
$L__BB0_120:                            // %__nv_fmaf_rn.exit4.i.i.i2205
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r477, %r3014, 192937984;
	add.s32 	%r478, %r3013, %r477;
	mov.b32 	%f638, %r478;
	mul.f32 	%f639, %f636, %f638;
	sub.f32 	%f640, %f638, %f639;
	fma.rn.f32 	%f641, %f640, %f636, %f639;
	sub.f32 	%f642, %f638, %f641;
	fma.rz.f32 	%f643, %f642, %f636, %f641;
	cvt.rzi.f32.f32 	%f644, %f643;
	sub.f32 	%f767, %f638, %f644;
	sub.s32 	%r3014, %r3014, %r477;
	mov.b32 	%r3013, %f767;
	setp.ne.s32 	%p205, %r3014, 0;
	setp.ne.s32 	%p206, %r3013, 0;
	and.pred  	%p207, %p205, %p206;
	@%p207 bra 	$L__BB0_120;
$L__BB0_121:                            // %__internal_fmodf_slowpath_mod.exit.i.i2207
	setp.gt.u32 	%p208, %r68, 2139095039;
	selp.f32 	%f645, 0f7FFFFFFF, 0f4B800000, %p208;
	mul.f32 	%f646, %f767, 0f34000000;
	mul.f32 	%f768, %f645, %f646;
	bra.uni 	$L__BB0_122;
$L__BB0_112:                            // %__nv_fast_fdividef.exit.i.i.i2184
	mov.f32 	%f628, 0f40000000;
	div.approx.f32 	%f629, %f768, %f628;
	cvt.rzi.f32.f32 	%f766, %f629;
	fma.rn.f32 	%f124, %f766, 0fC0000000, %f768;
	mov.b32 	%r67, %f124;
	setp.lt.u32 	%p199, %r67, 1073741824;
	@%p199 bra 	$L__BB0_117;
// %bb.113:
	setp.lt.u32 	%p200, %r67, -2147483647;
	@%p200 bra 	$L__BB0_115;
// %bb.114:
	add.f32 	%f634, %f766, 0fBF800000;
	setp.lt.f32 	%p203, %f124, 0fC0000000;
	add.f32 	%f635, %f634, 0fBF800000;
	selp.f32 	%f766, %f635, %f634, %p203;
	bra.uni 	$L__BB0_117;
$L__BB0_115:
	add.f32 	%f766, %f766, 0f3F800000;
	setp.ltu.f32 	%p201, %f124, 0f40800000;
	@%p201 bra 	$L__BB0_117;
// %bb.116:                             // %__nv_fmaf_rn.exit.i.i.i2188
	add.f32 	%f630, %f766, 0f3F800000;
	fma.rn.f32 	%f632, %f628, 0fC0400000, %f124;
	setp.ge.f32 	%p202, %f632, 0f00000000;
	add.f32 	%f633, %f630, 0f3F800000;
	selp.f32 	%f766, %f633, %f630, %p202;
$L__BB0_117:                            // %__internal_fmodf_fastpath_quot.exit.i.i2191
	fma.rn.f32 	%f768, %f766, 0fC0000000, %f768;
$L__BB0_122:                            // %__internal_fmodf_kernel.exit.i2210
	abs.f32 	%f647, %f768;
	setp.gtu.f32 	%p209, %f647, 0f7F800000;
	@%p209 bra 	$L__BB0_124;
// %bb.123:
	mov.b32 	%r479, %f121;
	and.b32  	%r480, %r479, -2147483648;
	mov.b32 	%r481, %f768;
	or.b32  	%r482, %r480, %r481;
	mov.b32 	%f768, %r482;
$L__BB0_124:                            // %__nv_fmodf.exit2211
	add.f32 	%f648, %f768, %f768;
	mov.b32 	%r483, %f648;
	and.b32  	%r484, %r483, -2147483648;
	or.b32  	%r485, %r484, 1056964608;
	mov.b32 	%f649, %r485;
	add.f32 	%f650, %f648, %f649;
	cvt.rzi.f32.f32 	%f651, %f650;
	abs.f32 	%f652, %f648;
	setp.gt.f32 	%p210, %f652, 0f4B000000;
	selp.f32 	%f653, %f648, %f651, %p210;
	cvt.rzi.f32.f32 	%f654, %f648;
	setp.lt.f32 	%p211, %f652, 0f3F000000;
	selp.f32 	%f655, %f654, %f653, %p211;
	cvt.rzi.s32.f32 	%r486, %f655;
	fma.rn.f32 	%f656, %f655, 0fBF000000, %f768;
	mul.f32 	%f657, %f656, %f656;
	fma.rn.f32 	%f658, %f657, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f659, %f657, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f660, %f658, %f657, 0fC0A55DF6;
	fma.rn.f32 	%f661, %f659, %f657, 0f4081E0CF;
	fma.rn.f32 	%f662, %f657, %f656, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f657, 0fC09DE9E6;
	fma.rn.f32 	%f664, %f660, %f662, 0f00000000;
	fma.rn.f32 	%f665, %f663, %f657, 0f3F800000;
	fma.rn.f32 	%f666, %f656, 0f40490FDB, %f664;
	and.b32  	%r487, %r486, 1;
	setp.eq.b32 	%p212, %r487, 1;
	selp.f32 	%f667, %f665, %f666, %p212;
	selp.f32 	%f668, %f666, %f665, %p212;
	and.b32  	%r488, %r486, 2;
	setp.eq.s32 	%p213, %r488, 0;
	neg.f32 	%f669, %f667;
	selp.f32 	%f670, %f667, %f669, %p213;
	add.s32 	%r489, %r486, 1;
	and.b32  	%r490, %r489, 2;
	setp.eq.s32 	%p214, %r490, 0;
	sub.f32 	%f672, %f627, %f668;
	selp.f32 	%f673, %f668, %f672, %p214;
	cvt.rzi.f32.f32 	%f674, %f768;
	setp.eq.f32 	%p215, %f674, %f768;
	mul.f32 	%f675, %f768, 0f00000000;
	selp.f32 	%f779, %f675, %f670, %p215;
	abs.f32 	%f676, %f768;
	setp.gt.f32 	%p216, %f676, 0f4B800000;
	add.f32 	%f677, %f779, 0f3F800000;
	selp.f32 	%f770, %f677, %f673, %p216;
$L__BB0_125:                            // %L934
	and.b32  	%r64, %r144, 1;
	mov.f32 	%f776, %f512;
	mov.f32 	%f781, %f512;
	@%p196 bra 	$L__BB0_141;
// %bb.126:                             // %L937
	cvt.rn.f32.s32 	%f679, %r64;
	mov.f32 	%f680, 0f3F800000;
	div.approx.f32 	%f142, %f679, %f680;
	abs.f32 	%f774, %f142;
	setp.lt.f32 	%p218, %f774, 0f40000000;
	@%p218 bra 	$L__BB0_138;
// %bb.127:
	setp.gtu.f32 	%p219, %f774, 0f4B800000;
	@%p219 bra 	$L__BB0_134;
	bra.uni 	$L__BB0_128;
$L__BB0_134:
	mov.b32 	%r76, %f774;
	and.b32  	%r491, %r76, 8388607;
	or.b32  	%r3015, %r491, 1065353216;
	mov.b32 	%f773, %r3015;
	add.s32 	%r492, %r76, -1073741824;
	and.b32  	%r3016, %r492, -8388608;
	setp.eq.s32 	%p225, %r3016, 0;
	@%p225 bra 	$L__BB0_137;
// %bb.135:                             // %__nv_fmaf_rn.exit4.i.i.i2236.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f689,%f680;
	// end inline asm
$L__BB0_136:                            // %__nv_fmaf_rn.exit4.i.i.i2236
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r493, %r3016, 192937984;
	add.s32 	%r494, %r3015, %r493;
	mov.b32 	%f691, %r494;
	mul.f32 	%f692, %f689, %f691;
	sub.f32 	%f693, %f691, %f692;
	fma.rn.f32 	%f694, %f693, %f689, %f692;
	sub.f32 	%f695, %f691, %f694;
	fma.rz.f32 	%f696, %f695, %f689, %f694;
	cvt.rzi.f32.f32 	%f697, %f696;
	sub.f32 	%f773, %f691, %f697;
	sub.s32 	%r3016, %r3016, %r493;
	mov.b32 	%r3015, %f773;
	setp.ne.s32 	%p226, %r3016, 0;
	setp.ne.s32 	%p227, %r3015, 0;
	and.pred  	%p228, %p226, %p227;
	@%p228 bra 	$L__BB0_136;
$L__BB0_137:                            // %__internal_fmodf_slowpath_mod.exit.i.i2238
	setp.gt.u32 	%p229, %r76, 2139095039;
	selp.f32 	%f698, 0f7FFFFFFF, 0f4B800000, %p229;
	mul.f32 	%f699, %f773, 0f34000000;
	mul.f32 	%f774, %f698, %f699;
	bra.uni 	$L__BB0_138;
$L__BB0_128:                            // %__nv_fast_fdividef.exit.i.i.i2215
	mov.f32 	%f681, 0f40000000;
	div.approx.f32 	%f682, %f774, %f681;
	cvt.rzi.f32.f32 	%f772, %f682;
	fma.rn.f32 	%f145, %f772, 0fC0000000, %f774;
	mov.b32 	%r75, %f145;
	setp.lt.u32 	%p220, %r75, 1073741824;
	@%p220 bra 	$L__BB0_133;
// %bb.129:
	setp.lt.u32 	%p221, %r75, -2147483647;
	@%p221 bra 	$L__BB0_131;
// %bb.130:
	add.f32 	%f687, %f772, 0fBF800000;
	setp.lt.f32 	%p224, %f145, 0fC0000000;
	add.f32 	%f688, %f687, 0fBF800000;
	selp.f32 	%f772, %f688, %f687, %p224;
	bra.uni 	$L__BB0_133;
$L__BB0_131:
	add.f32 	%f772, %f772, 0f3F800000;
	setp.ltu.f32 	%p222, %f145, 0f40800000;
	@%p222 bra 	$L__BB0_133;
// %bb.132:                             // %__nv_fmaf_rn.exit.i.i.i2219
	add.f32 	%f683, %f772, 0f3F800000;
	fma.rn.f32 	%f685, %f681, 0fC0400000, %f145;
	setp.ge.f32 	%p223, %f685, 0f00000000;
	add.f32 	%f686, %f683, 0f3F800000;
	selp.f32 	%f772, %f686, %f683, %p223;
$L__BB0_133:                            // %__internal_fmodf_fastpath_quot.exit.i.i2222
	fma.rn.f32 	%f774, %f772, 0fC0000000, %f774;
$L__BB0_138:                            // %__internal_fmodf_kernel.exit.i2241
	abs.f32 	%f700, %f774;
	setp.gtu.f32 	%p230, %f700, 0f7F800000;
	@%p230 bra 	$L__BB0_140;
// %bb.139:
	mov.b32 	%r495, %f142;
	and.b32  	%r496, %r495, -2147483648;
	mov.b32 	%r497, %f774;
	or.b32  	%r498, %r496, %r497;
	mov.b32 	%f774, %r498;
$L__BB0_140:                            // %__nv_fmodf.exit2242
	add.f32 	%f701, %f774, %f774;
	mov.b32 	%r499, %f701;
	and.b32  	%r500, %r499, -2147483648;
	or.b32  	%r501, %r500, 1056964608;
	mov.b32 	%f702, %r501;
	add.f32 	%f703, %f701, %f702;
	cvt.rzi.f32.f32 	%f704, %f703;
	abs.f32 	%f705, %f701;
	setp.gt.f32 	%p231, %f705, 0f4B000000;
	selp.f32 	%f706, %f701, %f704, %p231;
	cvt.rzi.f32.f32 	%f707, %f701;
	setp.lt.f32 	%p232, %f705, 0f3F000000;
	selp.f32 	%f708, %f707, %f706, %p232;
	cvt.rzi.s32.f32 	%r502, %f708;
	fma.rn.f32 	%f709, %f708, 0fBF000000, %f774;
	mul.f32 	%f710, %f709, %f709;
	fma.rn.f32 	%f711, %f710, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f712, %f710, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f713, %f711, %f710, 0fC0A55DF6;
	fma.rn.f32 	%f714, %f712, %f710, 0f4081E0CF;
	fma.rn.f32 	%f715, %f710, %f709, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f710, 0fC09DE9E6;
	fma.rn.f32 	%f717, %f713, %f715, 0f00000000;
	fma.rn.f32 	%f718, %f716, %f710, 0f3F800000;
	fma.rn.f32 	%f719, %f709, 0f40490FDB, %f717;
	and.b32  	%r503, %r502, 1;
	setp.eq.b32 	%p233, %r503, 1;
	selp.f32 	%f720, %f718, %f719, %p233;
	selp.f32 	%f721, %f719, %f718, %p233;
	and.b32  	%r504, %r502, 2;
	setp.eq.s32 	%p234, %r504, 0;
	neg.f32 	%f722, %f720;
	selp.f32 	%f723, %f720, %f722, %p234;
	add.s32 	%r505, %r502, 1;
	and.b32  	%r506, %r505, 2;
	setp.eq.s32 	%p235, %r506, 0;
	mov.f32 	%f724, 0f00000000;
	sub.f32 	%f725, %f724, %f721;
	selp.f32 	%f726, %f721, %f725, %p235;
	cvt.rzi.f32.f32 	%f727, %f774;
	setp.eq.f32 	%p236, %f727, %f774;
	mul.f32 	%f728, %f774, 0f00000000;
	selp.f32 	%f781, %f728, %f723, %p236;
	abs.f32 	%f729, %f774;
	setp.gt.f32 	%p237, %f729, 0f4B800000;
	add.f32 	%f730, %f781, 0f3F800000;
	selp.f32 	%f776, %f730, %f726, %p237;
$L__BB0_141:                            // %L971
	mov.f32 	%f165, %f770;
	mov.f32 	%f167, %f776;
	@%p135 bra 	$L__BB0_143;
// %bb.142:                             // %L980
	neg.f32 	%f167, %f781;
	neg.f32 	%f165, %f779;
	mov.f32 	%f779, %f770;
	mov.f32 	%f781, %f776;
$L__BB0_143:                            // %L982
	setp.gt.u32 	%p239, %r292, 15;
	mov.u32 	%r169, 999999999;
	@%p239 bra 	$L__BB0_201;
// %bb.144:                             // %L1012
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	mad.lo.s32 	%r514, %r292, 6, %r4;
	cvt.u16.u32 	%rs15, %r514;
	and.b16  	%rs16, %rs15, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 14;
	mul.lo.s16 	%rs19, %rs18, 96;
	sub.s16 	%rs20, %rs15, %rs19;
	cvt.u32.u16 	%r515, %rs20;
	and.b32  	%r516, %r515, 255;
	mul.wide.u32 	%rd21, %r516, 4;
	add.s64 	%rd22, %rd1, %rd21;
	ld.global.u32 	%r517, [%rd22];
	shl.b32 	%r518, %r517, 16;
	cvt.s32.s16 	%r85, %r517;
	shr.s32 	%r86, %r517, 16;
	or.b32  	%r519, %r518, 65535;
	setp.lt.u32 	%p240, %r519, 589823;
	setp.lt.u32 	%p241, %r517, 786432;
	and.pred  	%p242, %p240, %p241;
	@%p242 bra 	$L__BB0_200;
	bra.uni 	$L__BB0_145;
$L__BB0_200:                            // %L1254
	mul.lo.s32 	%r523, %r86, 290;
	mad.lo.s32 	%r169, %r85, 33, %r523;
$L__BB0_201:                            // %pass537
	add.f32 	%f227, %f784, %f784;
	mov.b32 	%r321, %f227;
	add.f32 	%f489, %f788, %f788;
	and.b32  	%r322, %r321, -2147483648;
	add.f32 	%f282, %f734, %f734;
	mov.b32 	%r429, %f489;
	or.b32  	%r323, %r322, 1056964608;
	mov.b32 	%r338, %f282;
	and.b32  	%r430, %r429, -2147483648;
	add.f32 	%f542, %f760, %f760;
	add.f32 	%f595, %f764, %f764;
	mov.b32 	%f228, %r323;
	and.b32  	%r339, %r338, -2147483648;
	or.b32  	%r431, %r430, 1056964608;
	mov.b32 	%r445, %f542;
	mov.b32 	%r467, %f595;
	add.f32 	%f229, %f227, %f228;
	abs.f32 	%f231, %f227;
	or.b32  	%r340, %r339, 1056964608;
	mov.b32 	%f490, %r431;
	and.b32  	%r446, %r445, -2147483648;
	and.b32  	%r468, %r467, -2147483648;
	cvt.rzi.f32.f32 	%f230, %f229;
	setp.gt.f32 	%p43, %f231, 0f4B000000;
	mov.b32 	%f283, %r340;
	add.f32 	%f491, %f489, %f490;
	abs.f32 	%f493, %f489;
	or.b32  	%r447, %r446, 1056964608;
	or.b32  	%r469, %r468, 1056964608;
	selp.f32 	%f232, %f227, %f230, %p43;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p44, %f231, 0f3F000000;
	add.f32 	%f284, %f282, %f283;
	abs.f32 	%f286, %f282;
	cvt.rzi.f32.f32 	%f492, %f491;
	setp.gt.f32 	%p149, %f493, 0f4B000000;
	mov.b32 	%f543, %r447;
	mov.b32 	%f596, %r469;
	selp.f32 	%f234, %f233, %f232, %p44;
	cvt.rzi.f32.f32 	%f285, %f284;
	setp.gt.f32 	%p63, %f286, 0f4B000000;
	selp.f32 	%f494, %f489, %f492, %p149;
	cvt.rzi.f32.f32 	%f495, %f489;
	setp.lt.f32 	%p150, %f493, 0f3F000000;
	add.f32 	%f544, %f542, %f543;
	abs.f32 	%f546, %f542;
	add.f32 	%f597, %f595, %f596;
	abs.f32 	%f599, %f595;
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f784;
	selp.f32 	%f287, %f282, %f285, %p63;
	cvt.rzi.f32.f32 	%f288, %f282;
	setp.lt.f32 	%p64, %f286, 0f3F000000;
	selp.f32 	%f496, %f495, %f494, %p150;
	cvt.rzi.f32.f32 	%f545, %f544;
	setp.gt.f32 	%p169, %f546, 0f4B000000;
	cvt.rzi.f32.f32 	%f598, %f597;
	setp.gt.f32 	%p189, %f599, 0f4B000000;
	mul.f32 	%f236, %f235, %f235;
	selp.f32 	%f289, %f288, %f287, %p64;
	fma.rn.f32 	%f497, %f496, 0fBF000000, %f788;
	selp.f32 	%f547, %f542, %f545, %p169;
	cvt.rzi.f32.f32 	%f548, %f542;
	setp.lt.f32 	%p170, %f546, 0f3F000000;
	selp.f32 	%f600, %f595, %f598, %p189;
	cvt.rzi.f32.f32 	%f601, %f595;
	setp.lt.f32 	%p190, %f599, 0f3F000000;
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f290, %f289, 0fBF000000, %f734;
	mul.f32 	%f498, %f497, %f497;
	selp.f32 	%f549, %f548, %f547, %p170;
	selp.f32 	%f602, %f601, %f600, %p190;
	cvt.rzi.s32.f32 	%r324, %f234;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	mul.f32 	%f291, %f290, %f290;
	fma.rn.f32 	%f499, %f498, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f500, %f498, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f550, %f549, 0fBF000000, %f760;
	fma.rn.f32 	%f603, %f602, 0fBF000000, %f764;
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r325, %r324, 1;
	fma.rn.f32 	%f292, %f291, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f293, %f291, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r432, %f496;
	fma.rn.f32 	%f501, %f499, %f498, 0fC0A55DF6;
	fma.rn.f32 	%f502, %f500, %f498, 0f4081E0CF;
	fma.rn.f32 	%f503, %f498, %f497, 0f00000000;
	mul.f32 	%f551, %f550, %f550;
	mul.f32 	%f604, %f603, %f603;
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p45, %r325, 1;
	cvt.rzi.s32.f32 	%r341, %f289;
	fma.rn.f32 	%f294, %f292, %f291, 0fC0A55DF6;
	fma.rn.f32 	%f295, %f293, %f291, 0f4081E0CF;
	fma.rn.f32 	%f296, %f291, %f290, 0f00000000;
	fma.rn.f32 	%f504, %f502, %f498, 0fC09DE9E6;
	fma.rn.f32 	%f505, %f501, %f503, 0f00000000;
	and.b32  	%r433, %r432, 1;
	fma.rn.f32 	%f552, %f551, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f553, %f551, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f604, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f606, %f604, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f246, %f244, %f245, %p45;
	and.b32  	%r326, %r324, 2;
	fma.rn.f32 	%f297, %f295, %f291, 0fC09DE9E6;
	fma.rn.f32 	%f298, %f294, %f296, 0f00000000;
	and.b32  	%r342, %r341, 1;
	fma.rn.f32 	%f506, %f504, %f498, 0f3F800000;
	fma.rn.f32 	%f507, %f497, 0f40490FDB, %f505;
	setp.eq.b32 	%p151, %r433, 1;
	cvt.rzi.s32.f32 	%r448, %f549;
	fma.rn.f32 	%f554, %f552, %f551, 0fC0A55DF6;
	fma.rn.f32 	%f555, %f553, %f551, 0f4081E0CF;
	fma.rn.f32 	%f556, %f551, %f550, 0f00000000;
	cvt.rzi.s32.f32 	%r470, %f602;
	fma.rn.f32 	%f607, %f605, %f604, 0fC0A55DF6;
	fma.rn.f32 	%f608, %f606, %f604, 0f4081E0CF;
	fma.rn.f32 	%f609, %f604, %f603, 0f00000000;
	setp.eq.s32 	%p46, %r326, 0;
	neg.f32 	%f248, %f246;
	add.s32 	%r327, %r324, 1;
	cvt.rzi.f32.f32 	%f253, %f784;
	fma.rn.f32 	%f299, %f297, %f291, 0f3F800000;
	fma.rn.f32 	%f300, %f290, 0f40490FDB, %f298;
	setp.eq.b32 	%p65, %r342, 1;
	selp.f32 	%f508, %f506, %f507, %p151;
	and.b32  	%r434, %r432, 2;
	fma.rn.f32 	%f557, %f555, %f551, 0fC09DE9E6;
	fma.rn.f32 	%f558, %f554, %f556, 0f00000000;
	and.b32  	%r449, %r448, 1;
	fma.rn.f32 	%f610, %f608, %f604, 0fC09DE9E6;
	fma.rn.f32 	%f611, %f607, %f609, 0f00000000;
	and.b32  	%r471, %r470, 1;
	selp.f32 	%f247, %f245, %f244, %p45;
	selp.f32 	%f249, %f246, %f248, %p46;
	and.b32  	%r328, %r327, 2;
	setp.eq.f32 	%p48, %f253, %f784;
	mul.f32 	%f254, %f784, 0f00000000;
	selp.f32 	%f301, %f299, %f300, %p65;
	and.b32  	%r343, %r341, 2;
	setp.eq.s32 	%p152, %r434, 0;
	neg.f32 	%f510, %f508;
	add.s32 	%r435, %r432, 1;
	cvt.rzi.f32.f32 	%f515, %f788;
	fma.rn.f32 	%f559, %f557, %f551, 0f3F800000;
	fma.rn.f32 	%f560, %f550, 0f40490FDB, %f558;
	setp.eq.b32 	%p171, %r449, 1;
	fma.rn.f32 	%f612, %f610, %f604, 0f3F800000;
	fma.rn.f32 	%f613, %f603, 0f40490FDB, %f611;
	setp.eq.b32 	%p191, %r471, 1;
	setp.eq.s32 	%p47, %r328, 0;
	sub.f32 	%f251, %f250, %f247;
	selp.f32 	%f255, %f254, %f249, %p48;
	abs.f32 	%f256, %f784;
	setp.eq.s32 	%p66, %r343, 0;
	neg.f32 	%f303, %f301;
	add.s32 	%r344, %r341, 1;
	cvt.rzi.f32.f32 	%f307, %f734;
	selp.f32 	%f509, %f507, %f506, %p151;
	selp.f32 	%f511, %f508, %f510, %p152;
	and.b32  	%r436, %r435, 2;
	setp.eq.f32 	%p154, %f515, %f788;
	mul.f32 	%f516, %f788, 0f00000000;
	selp.f32 	%f561, %f559, %f560, %p171;
	and.b32  	%r450, %r448, 2;
	selp.f32 	%f614, %f612, %f613, %p191;
	and.b32  	%r472, %r470, 2;
	selp.f32 	%f252, %f247, %f251, %p47;
	setp.gt.f32 	%p49, %f256, 0f4B800000;
	add.f32 	%f257, %f255, 0f3F800000;
	selp.f32 	%f302, %f300, %f299, %p65;
	selp.f32 	%f304, %f301, %f303, %p66;
	and.b32  	%r345, %r344, 2;
	setp.eq.f32 	%p68, %f307, %f734;
	mul.f32 	%f308, %f734, 0f00000000;
	setp.eq.s32 	%p153, %r436, 0;
	sub.f32 	%f513, %f512, %f509;
	selp.f32 	%f517, %f516, %f511, %p154;
	abs.f32 	%f518, %f788;
	setp.eq.s32 	%p172, %r450, 0;
	neg.f32 	%f563, %f561;
	add.s32 	%r451, %r448, 1;
	cvt.rzi.f32.f32 	%f568, %f760;
	setp.eq.s32 	%p192, %r472, 0;
	neg.f32 	%f616, %f614;
	add.s32 	%r473, %r470, 1;
	cvt.rzi.f32.f32 	%f620, %f764;
	selp.f32 	%f258, %f257, %f252, %p49;
	setp.eq.s32 	%p67, %r345, 0;
	sub.f32 	%f305, %f250, %f302;
	selp.f32 	%f16, %f308, %f304, %p68;
	abs.f32 	%f309, %f734;
	selp.f32 	%f514, %f509, %f513, %p153;
	setp.gt.f32 	%p155, %f518, 0f4B800000;
	add.f32 	%f519, %f517, 0f3F800000;
	selp.f32 	%f562, %f560, %f559, %p171;
	selp.f32 	%f564, %f561, %f563, %p172;
	and.b32  	%r452, %r451, 2;
	setp.eq.f32 	%p174, %f568, %f760;
	mul.f32 	%f569, %f760, 0f00000000;
	selp.f32 	%f615, %f613, %f612, %p191;
	selp.f32 	%f617, %f614, %f616, %p192;
	and.b32  	%r474, %r473, 2;
	setp.eq.f32 	%p194, %f620, %f764;
	mul.f32 	%f621, %f764, 0f00000000;
	mov.b32 	%r317, %f258;
	mov.b32 	%r320, %f255;
	selp.f32 	%f306, %f302, %f305, %p67;
	setp.gt.f32 	%p69, %f309, 0f4B800000;
	add.f32 	%f310, %f16, 0f3F800000;
	selp.f32 	%f520, %f519, %f514, %p155;
	setp.eq.s32 	%p173, %r452, 0;
	sub.f32 	%f566, %f512, %f562;
	selp.f32 	%f102, %f569, %f564, %p174;
	abs.f32 	%f570, %f760;
	setp.eq.s32 	%p193, %r474, 0;
	sub.f32 	%f618, %f512, %f615;
	selp.f32 	%f622, %f621, %f617, %p194;
	abs.f32 	%f623, %f764;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r316, %r320, -2147483648;
	selp.f32 	%f17, %f310, %f306, %p69;
	mov.b32 	%r425, %f520;
	mov.b32 	%r428, %f517;
	selp.f32 	%f567, %f562, %f566, %p173;
	setp.gt.f32 	%p175, %f570, 0f4B800000;
	add.f32 	%f571, %f102, 0f3F800000;
	selp.f32 	%f619, %f615, %f618, %p193;
	setp.gt.f32 	%p195, %f623, 0f4B800000;
	add.f32 	%f624, %f622, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r315, %r317, %r316;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r318, %r320, %r317;
	// end inline asm
	mov.b32 	%r368, %f17;
	mov.b32 	%r369, %f37;
	mov.b32 	%r371, %f16;
	mov.b32 	%r372, %f38;
	mov.b32 	%r412, %f83;
	mov.b32 	%r413, %f85;
	mov.b32 	%r415, %f755;
	mov.b32 	%r416, %f757;
	xor.b32  	%r424, %r428, -2147483648;
	selp.f32 	%f103, %f571, %f567, %p175;
	selp.f32 	%f625, %f624, %f619, %p195;
	// begin inline asm
	cvt.rn.f16x2.f32 %r367, %r369, %r368;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r370, %r372, %r371;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r411, %r413, %r412;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r414, %r416, %r415;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r423, %r425, %r424;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r426, %r428, %r425;
	// end inline asm
	mov.b32 	%r463, %f625;
	mov.b32 	%r462, %f103;
	mov.b32 	%r466, %f622;
	mov.b32 	%r465, %f102;
	// begin inline asm
	cvt.rn.f16x2.f32 %r461, %r463, %r462;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r464, %r466, %r465;
	// end inline asm
	mov.b32 	%r508, %f165;
	mov.b32 	%r509, %f167;
	// begin inline asm
	cvt.rn.f16x2.f32 %r507, %r509, %r508;
	// end inline asm
	mov.b32 	%r511, %f779;
	mov.b32 	%r512, %f781;
	// begin inline asm
	cvt.rn.f16x2.f32 %r510, %r512, %r511;
	// end inline asm
	shr.u32 	%r170, %r292, 3;
	bfe.u32 	%r525, %r292, 3, 1;
	shl.b32 	%r526, %r4, 1;
	and.b32  	%r527, %r526, 2;
	or.b32  	%r528, %r525, %r527;
	and.b32  	%r529, %r170, 2;
	or.b32  	%r171, %r529, %r64;
	cvt.u16.u32 	%rs23, %r171;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 9;
	mul.lo.s16 	%rs26, %rs25, 3;
	sub.s16 	%rs27, %rs23, %rs26;
	cvt.u32.u16 	%r530, %rs27;
	and.b32  	%r531, %r530, 255;
	and.b16  	%rs28, %rs27, 255;
	mul.wide.u16 	%r532, %rs28, 8;
	mul.lo.s32 	%r533, %r143, 24;
	add.s32 	%r534, %r533, %r2;
	or.b32  	%r535, %r534, %r528;
	add.s32 	%r536, %r535, %r532;
	mul.wide.u32 	%rd28, %r536, 4;
	add.s64 	%rd29, %rd2, %rd28;
	ld.global.u32 	%r172, [%rd29];
	cvt.u64.u32 	%rd30, %r532;
	cvt.u64.u32 	%rd31, %r528;
	cvt.u64.u32 	%rd32, %r533;
	cvt.u64.u32 	%rd33, %r2;
	add.s64 	%rd34, %rd33, %rd32;
	add.s64 	%rd35, %rd34, %rd31;
	add.s64 	%rd36, %rd35, %rd30;
	shl.b64 	%rd37, %rd36, 2;
	add.s64 	%rd38, %rd2, %rd37;
	ld.global.u32 	%r173, [%rd38+16];
	ld.global.u32 	%r174, [%rd38+384];
	ld.global.u32 	%r175, [%rd38+400];
	shl.b32 	%r537, %r283, 13;
	shl.b32 	%r538, %r287, 5;
	add.s32 	%r176, %r538, %r537;
	shl.b32 	%r177, %r4, 2;
	shl.b32 	%r539, %r292, 2;
	and.b32  	%r178, %r539, 12;
	shl.b32 	%r540, %r1, 5;
	and.b32  	%r541, %r539, 16;
	or.b32  	%r179, %r541, %r540;
	and.b32  	%r180, %r292, 4;
	shl.b32 	%r542, %r292, 4;
	and.b32  	%r543, %r156, 8;
	or.b32  	%r544, %r543, %r542;
	bfe.u32 	%r545, %r544, 3, 3;
	mul.lo.s32 	%r181, %r545, 260;
	cvt.u16.u32 	%rs29, %r292;
	and.b16  	%rs30, %rs29, 255;
	mul.lo.s16 	%rs31, %rs30, 171;
	shr.u16 	%rs32, %rs31, 12;
	mul.lo.s16 	%rs33, %rs32, 24;
	sub.s16 	%rs34, %rs29, %rs33;
	cvt.u32.u16 	%r546, %rs34;
	and.b32  	%r182, %r546, 255;
	add.s32 	%r547, %r4, 6;
	shr.u32 	%r548, %r547, 3;
	add.s32 	%r549, %r5, 192;
	and.b32  	%r550, %r549, 224;
	mad.lo.s32 	%r183, %r548, 260, %r550;
	add.s32 	%r551, %r4, 12;
	shr.u32 	%r552, %r551, 3;
	add.s32 	%r553, %r5, 128;
	and.b32  	%r554, %r553, 224;
	mad.lo.s32 	%r184, %r552, 260, %r554;
	add.s32 	%r555, %r4, 18;
	shr.u32 	%r556, %r555, 3;
	add.s32 	%r557, %r5, 64;
	and.b32  	%r558, %r557, 224;
	mad.lo.s32 	%r185, %r556, 260, %r558;
	or.b32  	%r186, %r5, 780;
	add.s32 	%r559, %r4, 30;
	shr.u32 	%r560, %r559, 3;
	mad.lo.s32 	%r187, %r560, 260, %r550;
	add.s32 	%r561, %r4, 36;
	shr.u32 	%r562, %r561, 3;
	mad.lo.s32 	%r188, %r562, 260, %r554;
	add.s32 	%r563, %r4, 42;
	shr.u32 	%r564, %r563, 3;
	mad.lo.s32 	%r189, %r564, 260, %r558;
	or.b32  	%r190, %r5, 1560;
	add.s32 	%r565, %r4, 54;
	shr.u32 	%r566, %r565, 3;
	mad.lo.s32 	%r191, %r566, 260, %r550;
	add.s32 	%r567, %r4, 60;
	bfe.u32 	%r568, %r567, 3, 3;
	mad.lo.s32 	%r192, %r568, 260, %r554;
	mul.lo.s32 	%r569, %r143, 870;
	shr.u32 	%r570, %r4, 1;
	cvt.u16.u32 	%rs35, %r570;
	and.b16  	%rs36, %rs35, 255;
	mul.lo.s16 	%rs37, %rs36, 171;
	shr.u16 	%rs38, %rs37, 9;
	mul.lo.s16 	%rs39, %rs38, 3;
	sub.s16 	%rs40, %rs35, %rs39;
	cvt.u32.u16 	%r571, %rs40;
	and.b32  	%r193, %r571, 255;
	mad.lo.s32 	%r572, %r528, 33, %r569;
	mad.lo.s32 	%r194, %r531, 290, %r572;
	add.s32 	%r195, %r194, 132;
	setp.lt.u32 	%p243, %r292, 4;
	setp.eq.s32 	%p244, %r144, 1;
	setp.eq.s32 	%p245, %r144, 4;
	setp.eq.s32 	%p246, %r144, 5;
	bfe.s32 	%r573, %r4, 1, 1;
	and.b32  	%r574, %r573, 196;
	and.b32  	%r575, %r156, 6;
	and.b32  	%r576, %r4, 1;
	neg.s32 	%r577, %r576;
	and.b32  	%r578, %r577, 392;
	mul.lo.s32 	%r579, %r66, 784;
	bfe.s32 	%r580, %r292, 3, 1;
	and.b32  	%r581, %r580, 1576;
	shr.u32 	%r582, %r4, 2;
	or.b32  	%r583, %r64, %r575;
	or.b32  	%r584, %r583, %r579;
	mad.lo.s32 	%r585, %r582, 98, %r584;
	add.s32 	%r586, %r585, %r574;
	add.s32 	%r587, %r586, %r578;
	add.s32 	%r196, %r587, %r581;
	add.s32 	%r197, %r196, 8;
	mul.lo.s32 	%r588, %r285, 786432;
	mad.lo.s32 	%r589, %r289, 192, %r588;
	and.b32  	%r590, %r292, 7;
	or.b32  	%r198, %r2, %r590;
	or.b32  	%r591, %r170, %r177;
	cvt.u16.u32 	%rs41, %r591;
	and.b16  	%rs42, %rs41, 255;
	mul.lo.s16 	%rs43, %rs42, 171;
	shr.u16 	%rs44, %rs43, 9;
	and.b16  	%rs45, %rs44, 24;
	add.s16 	%rs46, %rs41, %rs45;
	shl.b16 	%rs47, %rs46, 3;
	cvt.u32.u16 	%r592, %rs47;
	and.b32  	%r199, %r592, 248;
	cvt.s64.s32 	%rd7, %r589;
	add.s32 	%r593, %r194, %r193;
	mul.wide.u32 	%rd39, %r593, 4;
	mov.u64 	%rd40, shmem;
	add.s64 	%rd8, %rd40, %rd39;
	add.s32 	%r594, %r195, %r193;
	mul.wide.u32 	%rd41, %r594, 4;
	add.s64 	%rd9, %rd40, %rd41;
	cvt.u64.u32 	%rd42, %r194;
	cvt.u64.u16 	%rd43, %rs40;
	and.b64  	%rd44, %rd43, 255;
	add.s64 	%rd45, %rd42, %rd44;
	shl.b64 	%rd46, %rd45, 2;
	add.s64 	%rd10, %rd40, %rd46;
	cvt.u64.u32 	%rd47, %r195;
	add.s64 	%rd48, %rd47, %rd44;
	shl.b64 	%rd49, %rd48, 2;
	add.s64 	%rd11, %rd40, %rd49;
	or.pred  	%p247, %p243, %p244;
	and.b32  	%r595, %r292, 24;
	setp.eq.s32 	%p248, %r595, 8;
	or.pred  	%p249, %p247, %p248;
	or.pred  	%p250, %p249, %p245;
	setp.eq.s32 	%p251, %r595, 24;
	or.pred  	%p252, %p246, %p251;
	selp.b32 	%r200, 1145324612, -286331154, %p249;
	or.pred  	%p1, %p250, %p252;
	selp.b32 	%r201, 1145324612, -286331154, %p247;
	add.s32 	%r596, %r144, -1;
	setp.lt.u32 	%p253, %r596, 3;
	or.pred  	%p2, %p243, %p253;
	setp.eq.s32 	%p254, %r595, 16;
	or.pred  	%p3, %p254, %p251;
	selp.b32 	%r202, 1145324612, -286331154, %p254;
	mov.u32 	%r88, 0;
	mov.u16 	%rs2, 0;
	mov.u16 	%rs1, 29;
	selp.b32 	%r252, %r201, %r202, %p2;
	or.pred  	%p285, %p2, %p3;
	mov.u32 	%r108, %r88;
	mov.u32 	%r109, %r88;
	mov.u32 	%r110, %r88;
	bra.uni 	$L__BB0_202;
$L__BB0_173:                            // %L24428
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r142, %r88, 48;
	add.s16 	%rs2, %rs2, 48;
	add.s16 	%rs1, %rs1, 48;
	setp.ne.s32 	%p316, %r88, 16320;
	mov.u32 	%r88, %r142;
	@%p316 bra 	$L__BB0_202;
	bra.uni 	$L__BB0_174;
$L__BB0_202:                            // %L1937
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_163 Depth 2
                                        //     Child Loop BB0_167 Depth 2
	add.s32 	%r597, %r88, %r283;
	setp.lt.s32 	%p255, %r597, %r284;
	@%p255 bra 	$L__BB0_203;
	bra.uni 	$L__BB0_174;
$L__BB0_203:                            // %oksrem863
                                        //   in Loop: Header=BB0_202 Depth=1
	setp.eq.s32 	%p256, %r180, 0;
	mul.hi.u32 	%r694, %r88, -1431655765;
	shr.u32 	%r695, %r694, 5;
	mul.lo.s32 	%r203, %r695, 48;
	add.s32 	%r696, %r203, %r177;
	or.b32  	%r697, %r696, %r170;
	shr.s32 	%r698, %r696, 31;
	shr.u32 	%r699, %r698, 18;
	add.s32 	%r700, %r697, %r699;
	and.b32  	%r701, %r700, 507904;
	sub.s32 	%r702, %r697, %r701;
	shl.b32 	%r703, %r702, 13;
	or.b32  	%r704, %r703, %r178;
	or.b32  	%r705, %r179, %r704;
	add.s32 	%r706, %r176, %r705;
	shr.s32 	%r707, %r706, 31;
	shr.u32 	%r708, %r707, 5;
	add.s32 	%r709, %r706, %r708;
	shr.s32 	%r710, %r709, 27;
	setp.lt.s32 	%p257, %r706, 0;
	and.b32  	%r711, %r709, -134217728;
	setp.ne.s32 	%p258, %r711, %r706;
	and.pred  	%p259, %p257, %p258;
	selp.u32 	%r712, 1, 0, %p259;
	sub.s32 	%r713, %r712, %r710;
	shl.b32 	%r714, %r713, 27;
	add.s32 	%r715, %r714, %r706;
	mul.wide.s32 	%rd50, %r715, 4;
	add.s64 	%rd51, %rd3, %rd50;
	ld.global.v4.u32 	{%r716, %r717, %r718, %r719}, [%rd51];
	add.s32 	%r720, %r697, 24;
	shr.s32 	%r721, %r720, 31;
	shr.u32 	%r722, %r721, 18;
	add.s32 	%r723, %r720, %r722;
	and.b32  	%r724, %r723, 507904;
	sub.s32 	%r725, %r720, %r724;
	shl.b32 	%r726, %r725, 13;
	or.b32  	%r727, %r726, %r178;
	or.b32  	%r728, %r179, %r727;
	add.s32 	%r729, %r176, %r728;
	shr.s32 	%r730, %r729, 31;
	shr.u32 	%r731, %r730, 5;
	add.s32 	%r732, %r729, %r731;
	shr.s32 	%r733, %r732, 27;
	setp.lt.s32 	%p260, %r729, 0;
	and.b32  	%r734, %r732, -134217728;
	setp.ne.s32 	%p261, %r734, %r729;
	and.pred  	%p262, %p260, %p261;
	selp.u32 	%r735, 1, 0, %p262;
	sub.s32 	%r736, %r735, %r733;
	shl.b32 	%r737, %r736, 27;
	add.s32 	%r738, %r737, %r729;
	mul.wide.s32 	%rd52, %r738, 4;
	add.s64 	%rd53, %rd3, %rd52;
	ld.global.v4.u32 	{%r739, %r740, %r741, %r742}, [%rd53];
	selp.b32 	%r743, %r718, %r716, %p256;
	shfl.sync.bfly.b32	%r744, %r743, 4, 31, -1;
	selp.b32 	%r600, %r716, %r744, %p256;
	selp.b32 	%r605, %r744, %r718, %p256;
	selp.b32 	%r745, %r719, %r717, %p256;
	shfl.sync.bfly.b32	%r746, %r745, 4, 31, -1;
	selp.b32 	%r608, %r717, %r746, %p256;
	selp.b32 	%r613, %r746, %r719, %p256;
	selp.b32 	%r747, %r741, %r739, %p256;
	shfl.sync.bfly.b32	%r748, %r747, 4, 31, -1;
	selp.b32 	%r616, %r739, %r748, %p256;
	selp.b32 	%r621, %r748, %r741, %p256;
	selp.b32 	%r749, %r742, %r740, %p256;
	shfl.sync.bfly.b32	%r750, %r749, 4, 31, -1;
	selp.b32 	%r624, %r740, %r750, %p256;
	selp.b32 	%r629, %r750, %r742, %p256;
	shl.b32 	%r601, %r605, 4;
	mov.u32 	%r599, 252645135;
	// begin inline asm
	lop3.b32 %r631, %r599, %r600, %r601, 202;
	// end inline asm
	shr.u32 	%r604, %r600, 4;
	// begin inline asm
	lop3.b32 %r647, %r599, %r604, %r605, 202;
	// end inline asm
	shl.b32 	%r609, %r613, 4;
	// begin inline asm
	lop3.b32 %r639, %r599, %r608, %r609, 202;
	// end inline asm
	shr.u32 	%r612, %r608, 4;
	// begin inline asm
	lop3.b32 %r655, %r599, %r612, %r613, 202;
	// end inline asm
	shl.b32 	%r617, %r621, 4;
	// begin inline asm
	lop3.b32 %r632, %r599, %r616, %r617, 202;
	// end inline asm
	shr.u32 	%r620, %r616, 4;
	// begin inline asm
	lop3.b32 %r648, %r599, %r620, %r621, 202;
	// end inline asm
	shl.b32 	%r625, %r629, 4;
	// begin inline asm
	lop3.b32 %r640, %r599, %r624, %r625, 202;
	// end inline asm
	shr.u32 	%r628, %r624, 4;
	// begin inline asm
	lop3.b32 %r656, %r599, %r628, %r629, 202;
	// end inline asm
	mov.u32 	%r633, 25152;
	// begin inline asm
	prmt.b32 %r663, %r631, %r632, %r633;
	// end inline asm
	mov.u32 	%r637, 29521;
	// begin inline asm
	prmt.b32 %r679, %r631, %r632, %r637;
	// end inline asm
	// begin inline asm
	prmt.b32 %r671, %r639, %r640, %r633;
	// end inline asm
	// begin inline asm
	prmt.b32 %r687, %r639, %r640, %r637;
	// end inline asm
	// begin inline asm
	prmt.b32 %r664, %r647, %r648, %r633;
	// end inline asm
	// begin inline asm
	prmt.b32 %r680, %r647, %r648, %r637;
	// end inline asm
	// begin inline asm
	prmt.b32 %r672, %r655, %r656, %r633;
	// end inline asm
	// begin inline asm
	prmt.b32 %r688, %r655, %r656, %r637;
	// end inline asm
	mov.u32 	%r665, 21520;
	// begin inline asm
	prmt.b32 %r662, %r663, %r664, %r665;
	// end inline asm
	mov.u32 	%r669, 30258;
	// begin inline asm
	prmt.b32 %r666, %r663, %r664, %r669;
	// end inline asm
	// begin inline asm
	prmt.b32 %r670, %r671, %r672, %r665;
	// end inline asm
	// begin inline asm
	prmt.b32 %r674, %r671, %r672, %r669;
	// end inline asm
	// begin inline asm
	prmt.b32 %r678, %r679, %r680, %r665;
	// end inline asm
	// begin inline asm
	prmt.b32 %r682, %r679, %r680, %r669;
	// end inline asm
	// begin inline asm
	prmt.b32 %r686, %r687, %r688, %r665;
	// end inline asm
	// begin inline asm
	prmt.b32 %r690, %r687, %r688, %r669;
	// end inline asm
	mul.hi.s32 	%r751, %r697, 715827883;
	shr.u32 	%r752, %r751, 31;
	shr.s32 	%r753, %r751, 2;
	add.s32 	%r754, %r753, %r752;
	mul.lo.s32 	%r755, %r754, 24;
	sub.s32 	%r756, %r697, %r755;
	add.s32 	%r757, %r756, %r181;
	mul.wide.s32 	%rd54, %r757, 4;
	add.s64 	%rd56, %rd40, %rd54;
	st.shared.u32 	[%rd56], %r662;
	add.s32 	%r758, %r757, 128;
	mul.wide.u32 	%rd57, %r758, 4;
	add.s64 	%rd58, %rd40, %rd57;
	st.shared.u32 	[%rd58], %r670;
	add.s32 	%r759, %r757, 64;
	mul.wide.u32 	%rd59, %r759, 4;
	add.s64 	%rd60, %rd40, %rd59;
	st.shared.u32 	[%rd60], %r666;
	add.s32 	%r760, %r757, 192;
	mul.wide.u32 	%rd61, %r760, 4;
	add.s64 	%rd62, %rd40, %rd61;
	st.shared.u32 	[%rd62], %r674;
	add.s32 	%r761, %r757, 32;
	mul.wide.u32 	%rd63, %r761, 4;
	add.s64 	%rd64, %rd40, %rd63;
	st.shared.u32 	[%rd64], %r678;
	add.s32 	%r762, %r757, 160;
	mul.wide.u32 	%rd65, %r762, 4;
	add.s64 	%rd66, %rd40, %rd65;
	st.shared.u32 	[%rd66], %r686;
	add.s32 	%r763, %r757, 96;
	mul.wide.u32 	%rd67, %r763, 4;
	add.s64 	%rd68, %rd40, %rd67;
	st.shared.u32 	[%rd68], %r682;
	add.s32 	%r764, %r757, 224;
	mul.wide.u32 	%rd69, %r764, 4;
	add.s64 	%rd70, %rd40, %rd69;
	st.shared.u32 	[%rd70], %r690;
	bar.sync 	0;
	add.s32 	%r765, %r203, %r182;
	cvt.u16.u32 	%rs48, %r765;
	mul.hi.s16 	%rs49, %rs48, 10923;
	shr.u16 	%rs50, %rs49, 15;
	shr.s16 	%rs51, %rs49, 2;
	add.s16 	%rs52, %rs51, %rs50;
	mul.lo.s16 	%rs53, %rs52, 24;
	sub.s16 	%rs54, %rs48, %rs53;
	cvt.s32.s16 	%r204, %rs54;
	add.s32 	%r766, %r5, %r204;
	mul.wide.s32 	%rd71, %r766, 4;
	add.s64 	%rd72, %rd40, %rd71;
	ld.shared.u32 	%r205, [%rd72];
	add.s32 	%r767, %r183, %r204;
	mul.wide.s32 	%rd73, %r767, 4;
	add.s64 	%rd74, %rd40, %rd73;
	ld.shared.u32 	%r206, [%rd74];
	add.s32 	%r768, %r184, %r204;
	mul.wide.u32 	%rd75, %r768, 4;
	add.s64 	%rd76, %rd40, %rd75;
	ld.shared.u32 	%r207, [%rd76];
	add.s32 	%r769, %r185, %r204;
	mul.wide.u32 	%rd77, %r769, 4;
	add.s64 	%rd78, %rd40, %rd77;
	ld.shared.u32 	%r208, [%rd78];
	add.s32 	%r770, %r186, %r204;
	mul.wide.u32 	%rd79, %r770, 4;
	add.s64 	%rd80, %rd40, %rd79;
	ld.shared.u32 	%r209, [%rd80];
	add.s32 	%r771, %r187, %r204;
	mul.wide.u32 	%rd81, %r771, 4;
	add.s64 	%rd82, %rd40, %rd81;
	ld.shared.u32 	%r210, [%rd82];
	add.s32 	%r772, %r188, %r204;
	mul.wide.u32 	%rd83, %r772, 4;
	add.s64 	%rd84, %rd40, %rd83;
	ld.shared.u32 	%r211, [%rd84];
	add.s32 	%r773, %r189, %r204;
	mul.wide.u32 	%rd85, %r773, 4;
	add.s64 	%rd86, %rd40, %rd85;
	ld.shared.u32 	%r212, [%rd86];
	add.s32 	%r774, %r190, %r204;
	mul.wide.u32 	%rd87, %r774, 4;
	add.s64 	%rd88, %rd40, %rd87;
	ld.shared.u32 	%r213, [%rd88];
	add.s32 	%r775, %r191, %r204;
	mul.wide.u32 	%rd89, %r775, 4;
	add.s64 	%rd90, %rd40, %rd89;
	ld.shared.u32 	%r214, [%rd90];
	add.s32 	%r776, %r192, %r204;
	mul.wide.s32 	%rd91, %r776, 4;
	add.s64 	%rd92, %rd40, %rd91;
	ld.shared.u32 	%r215, [%rd92];
	bar.sync 	0;
	shfl.sync.idx.b32	%r216, %r169, 0, 31, -1;
	shfl.sync.idx.b32	%r217, %r169, 1, 31, -1;
	shfl.sync.idx.b32	%r218, %r169, 2, 31, -1;
	shfl.sync.idx.b32	%r219, %r169, 3, 31, -1;
	shfl.sync.idx.b32	%r220, %r169, 4, 31, -1;
	shfl.sync.idx.b32	%r221, %r169, 5, 31, -1;
	shfl.sync.idx.b32	%r222, %r169, 6, 31, -1;
	shfl.sync.idx.b32	%r223, %r169, 7, 31, -1;
	shfl.sync.idx.b32	%r224, %r169, 8, 31, -1;
	shfl.sync.idx.b32	%r225, %r169, 9, 31, -1;
	shfl.sync.idx.b32	%r226, %r169, 10, 31, -1;
	shfl.sync.idx.b32	%r227, %r169, 11, 31, -1;
	shfl.sync.idx.b32	%r228, %r169, 12, 31, -1;
	shfl.sync.idx.b32	%r229, %r169, 13, 31, -1;
	shfl.sync.idx.b32	%r230, %r169, 14, 31, -1;
	shfl.sync.idx.b32	%r231, %r169, 15, 31, -1;
	setp.eq.s32 	%p263, %r216, 999999999;
	@%p263 bra 	$L__BB0_146;
// %bb.204:                             // %oksrem2306
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r777, %r216, %r204;
	mul.wide.s32 	%rd93, %r777, 4;
	add.s64 	%rd95, %rd40, %rd93;
	st.shared.u32 	[%rd95], %r205;
	setp.eq.s32 	%p264, %r217, 999999999;
	@%p264 bra 	$L__BB0_147;
// %bb.205:                             // %oksrem2374
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r778, %r217, %r204;
	mul.wide.s32 	%rd96, %r778, 4;
	add.s64 	%rd98, %rd40, %rd96;
	st.shared.u32 	[%rd98], %r206;
	setp.eq.s32 	%p265, %r218, 999999999;
	@%p265 bra 	$L__BB0_148;
// %bb.206:                             // %oksrem2442
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r779, %r218, %r204;
	mul.wide.s32 	%rd99, %r779, 4;
	add.s64 	%rd101, %rd40, %rd99;
	st.shared.u32 	[%rd101], %r207;
	setp.eq.s32 	%p266, %r219, 999999999;
	@%p266 bra 	$L__BB0_149;
// %bb.207:                             // %oksrem2510
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r780, %r219, %r204;
	mul.wide.s32 	%rd102, %r780, 4;
	add.s64 	%rd104, %rd40, %rd102;
	st.shared.u32 	[%rd104], %r208;
	setp.eq.s32 	%p267, %r220, 999999999;
	@%p267 bra 	$L__BB0_150;
// %bb.208:                             // %oksrem2578
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r781, %r220, %r204;
	mul.wide.s32 	%rd105, %r781, 4;
	add.s64 	%rd107, %rd40, %rd105;
	st.shared.u32 	[%rd107], %r209;
	setp.eq.s32 	%p268, %r221, 999999999;
	@%p268 bra 	$L__BB0_151;
// %bb.209:                             // %oksrem2646
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r782, %r221, %r204;
	mul.wide.s32 	%rd108, %r782, 4;
	add.s64 	%rd110, %rd40, %rd108;
	st.shared.u32 	[%rd110], %r210;
	setp.eq.s32 	%p269, %r222, 999999999;
	@%p269 bra 	$L__BB0_152;
// %bb.210:                             // %oksrem2714
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r783, %r222, %r204;
	mul.wide.s32 	%rd111, %r783, 4;
	add.s64 	%rd113, %rd40, %rd111;
	st.shared.u32 	[%rd113], %r211;
	setp.eq.s32 	%p270, %r223, 999999999;
	@%p270 bra 	$L__BB0_153;
// %bb.211:                             // %oksrem2782
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r784, %r223, %r204;
	mul.wide.s32 	%rd114, %r784, 4;
	add.s64 	%rd116, %rd40, %rd114;
	st.shared.u32 	[%rd116], %r212;
	setp.eq.s32 	%p271, %r224, 999999999;
	@%p271 bra 	$L__BB0_154;
// %bb.212:                             // %oksrem2850
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r785, %r224, %r204;
	mul.wide.s32 	%rd117, %r785, 4;
	add.s64 	%rd119, %rd40, %rd117;
	st.shared.u32 	[%rd119], %r213;
	setp.eq.s32 	%p272, %r225, 999999999;
	@%p272 bra 	$L__BB0_155;
// %bb.213:                             // %oksrem2918
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r786, %r225, %r204;
	mul.wide.s32 	%rd120, %r786, 4;
	add.s64 	%rd122, %rd40, %rd120;
	st.shared.u32 	[%rd122], %r214;
	setp.eq.s32 	%p273, %r226, 999999999;
	@%p273 bra 	$L__BB0_156;
// %bb.214:                             // %oksrem2987
                                        //   in Loop: Header=BB0_202 Depth=1
	setp.gt.u32 	%p274, %r4, 3;
	selp.b32 	%r787, 0, %r215, %p274;
	add.s32 	%r788, %r226, %r204;
	mul.wide.s32 	%rd123, %r788, 4;
	add.s64 	%rd125, %rd40, %rd123;
	st.shared.u32 	[%rd125], %r787;
	setp.eq.s32 	%p275, %r227, 999999999;
	@%p275 bra 	$L__BB0_157;
// %bb.215:                             // %oksrem3055
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r789, %r227, %r204;
	mul.wide.s32 	%rd126, %r789, 4;
	add.s64 	%rd128, %rd40, %rd126;
	mov.u32 	%r790, 0;
	st.shared.u32 	[%rd128], %r790;
	setp.eq.s32 	%p276, %r228, 999999999;
	@%p276 bra 	$L__BB0_158;
// %bb.216:                             // %oksrem3122
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r791, %r228, %r204;
	mul.wide.s32 	%rd129, %r791, 4;
	add.s64 	%rd131, %rd40, %rd129;
	st.shared.u32 	[%rd131], %r790;
	setp.eq.s32 	%p277, %r229, 999999999;
	@%p277 bra 	$L__BB0_159;
// %bb.217:                             // %oksrem3189
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r793, %r229, %r204;
	mul.wide.s32 	%rd132, %r793, 4;
	add.s64 	%rd134, %rd40, %rd132;
	st.shared.u32 	[%rd134], %r790;
	setp.eq.s32 	%p278, %r230, 999999999;
	@%p278 bra 	$L__BB0_160;
// %bb.218:                             // %oksrem3256
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r795, %r230, %r204;
	mul.wide.s32 	%rd135, %r795, 4;
	add.s64 	%rd137, %rd40, %rd135;
	st.shared.u32 	[%rd137], %r790;
	setp.eq.s32 	%p279, %r231, 999999999;
	@%p279 bra 	$L__BB0_161;
// %bb.219:                             // %oksrem3323
                                        //   in Loop: Header=BB0_202 Depth=1
	setp.eq.s32 	%p280, %r171, 3;
	add.s32 	%r798, %r231, %r204;
	mul.wide.s32 	%rd138, %r798, 4;
	add.s64 	%rd140, %rd40, %rd138;
	st.shared.u32 	[%rd140], %r790;
	bar.sync 	0;
	mov.u32 	%r92, %r790;
	mov.u32 	%r93, %r790;
	mov.u32 	%r94, %r790;
	mov.u32 	%r95, %r790;
	mov.u32 	%r96, %r790;
	mov.u32 	%r97, %r790;
	mov.u32 	%r98, %r790;
	mov.u32 	%r99, %r790;
	mov.u32 	%r100, %r790;
	mov.u32 	%r101, %r790;
	mov.u32 	%r102, %r790;
	mov.u32 	%r103, %r790;
	mov.u32 	%r104, %r790;
	mov.u32 	%r105, %r790;
	mov.u32 	%r106, %r790;
	mov.u32 	%r107, %r790;
	@%p280 bra 	$L__BB0_162;
// %bb.220:                             // %oksrem3430
                                        //   in Loop: Header=BB0_202 Depth=1
	add.s32 	%r799, %r203, %r193;
	ld.shared.u32 	%r92, [%rd8];
	ld.shared.u32 	%r93, [%rd9];
	ld.shared.u32 	%r94, [%rd10+12];
	ld.shared.u32 	%r95, [%rd11+12];
	ld.shared.u32 	%r96, [%rd10+24];
	ld.shared.u32 	%r97, [%rd11+24];
	ld.shared.u32 	%r98, [%rd10+36];
	ld.shared.u32 	%r99, [%rd11+36];
	add.s32 	%r800, %r799, 12;
	mul.hi.u32 	%r801, %r800, -1431655765;
	shr.u32 	%r802, %r801, 4;
	mul.lo.s32 	%r803, %r802, 24;
	sub.s32 	%r804, %r800, %r803;
	add.s32 	%r805, %r194, %r804;
	mul.wide.u32 	%rd141, %r805, 4;
	add.s64 	%rd143, %rd40, %rd141;
	ld.shared.u32 	%r100, [%rd143];
	add.s32 	%r806, %r195, %r804;
	mul.wide.u32 	%rd144, %r806, 4;
	add.s64 	%rd145, %rd40, %rd144;
	ld.shared.u32 	%r101, [%rd145];
	ld.shared.u32 	%r102, [%rd10+60];
	ld.shared.u32 	%r103, [%rd11+60];
	ld.shared.u32 	%r104, [%rd10+72];
	ld.shared.u32 	%r105, [%rd11+72];
	ld.shared.u32 	%r106, [%rd10+84];
	ld.shared.u32 	%r107, [%rd11+84];
$L__BB0_162:                            // %L10631
                                        //   in Loop: Header=BB0_202 Depth=1
	bar.sync 	0;
	mov.u16 	%rs3, %rs2;
	mov.u32 	%r111, %r790;
	bra.uni 	$L__BB0_163;
$L__BB0_165:                            // %L17520
                                        //   in Loop: Header=BB0_163 Depth=2
	bar.sync 	0;
	add.s32 	%r111, %r111, 6;
	add.s16 	%rs3, %rs3, 6;
	setp.ne.s32 	%p298, %r111, 24;
	@%p298 bra 	$L__BB0_163;
	bra.uni 	$L__BB0_166;
$L__BB0_163:                            // %L10649
                                        //   Parent Loop BB0_202 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p281, %r111, 0;
	selp.b32 	%r1200, %r92, 0, %p281;
	setp.eq.s32 	%p282, %r111, 6;
	selp.b32 	%r1201, %r96, %r1200, %p282;
	setp.eq.s32 	%p283, %r111, 12;
	selp.b32 	%r1202, %r100, %r1201, %p283;
	setp.eq.s32 	%p284, %r111, 18;
	selp.b32 	%r1203, %r104, %r1202, %p284;
	selp.b32 	%r1204, %r93, 0, %p281;
	selp.b32 	%r1205, %r97, %r1204, %p282;
	selp.b32 	%r1206, %r101, %r1205, %p283;
	selp.b32 	%r1207, %r105, %r1206, %p284;
	selp.b32 	%r1208, %r94, 0, %p281;
	selp.b32 	%r1209, %r98, %r1208, %p282;
	selp.b32 	%r1210, %r102, %r1209, %p283;
	selp.b32 	%r1211, %r106, %r1210, %p284;
	selp.b32 	%r1212, %r95, 0, %p281;
	selp.b32 	%r1213, %r99, %r1212, %p282;
	selp.b32 	%r1214, %r103, %r1213, %p283;
	selp.b32 	%r1215, %r107, %r1214, %p284;
	mov.u16 	%rs92, 25600;
	// begin inline asm
	mov.b32 %r813, {%rs92, %rs92};
	// end inline asm
	mov.u16 	%rs94, 21504;
	// begin inline asm
	mov.b32 %r824, {%rs94, %rs94};
	// end inline asm
	xor.b32  	%r812, %r1203, -2004318072;
	mov.u32 	%r949, 983055;
	// begin inline asm
	lop3.b32 %r810, %r949, %r812, %r813, 202;
	// end inline asm
	mov.u16 	%rs98, 18432;
	// begin inline asm
	mov.b32 %r814, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r815, %r813, %r814;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r818, %r810, %r815;
	// end inline asm
	mov.u32 	%r960, 15728880;
	// begin inline asm
	lop3.b32 %r821, %r960, %r812, %r824, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r825, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r826, %r824, %r825;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r829, %r821, %r826;
	// end inline asm
	// begin inline asm
	mov.b32 %r859, {%rs92, %rs92};
	// end inline asm
	// begin inline asm
	mov.b32 %r870, {%rs94, %rs94};
	// end inline asm
	xor.b32  	%r858, %r1207, -2004318072;
	// begin inline asm
	lop3.b32 %r856, %r949, %r858, %r859, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r860, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r861, %r859, %r860;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r864, %r856, %r861;
	// end inline asm
	// begin inline asm
	lop3.b32 %r867, %r960, %r858, %r870, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r871, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r872, %r870, %r871;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r875, %r867, %r872;
	// end inline asm
	// begin inline asm
	mov.b32 %r905, {%rs92, %rs92};
	// end inline asm
	// begin inline asm
	mov.b32 %r916, {%rs94, %rs94};
	// end inline asm
	xor.b32  	%r904, %r1211, -2004318072;
	// begin inline asm
	lop3.b32 %r902, %r949, %r904, %r905, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r906, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r907, %r905, %r906;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r910, %r902, %r907;
	// end inline asm
	// begin inline asm
	lop3.b32 %r913, %r960, %r904, %r916, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r917, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r918, %r916, %r917;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r921, %r913, %r918;
	// end inline asm
	// begin inline asm
	mov.b32 %r951, {%rs92, %rs92};
	// end inline asm
	// begin inline asm
	mov.b32 %r962, {%rs94, %rs94};
	// end inline asm
	xor.b32  	%r950, %r1215, -2004318072;
	// begin inline asm
	lop3.b32 %r948, %r949, %r950, %r951, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r952, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r953, %r951, %r952;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r956, %r948, %r953;
	// end inline asm
	// begin inline asm
	lop3.b32 %r959, %r960, %r950, %r962, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r963, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r964, %r962, %r963;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r967, %r959, %r964;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r818;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r992, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r864;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r995, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r174;
    mov.b32 {%r2re, %r2im}, %r829;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r998, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r175;
    mov.b32 {%r2re, %r2im}, %r875;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1001, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r910;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1004, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r956;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1007, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r174;
    mov.b32 {%r2re, %r2im}, %r921;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1010, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r175;
    mov.b32 {%r2re, %r2im}, %r967;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1013, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1016, %r1017}, {%r315, %r318}, {%r992}, {%r790, %r790};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1023, %r1024}, {%r315, %r318}, {%r995}, {%r790, %r790};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1030, %r1031}, {%r315, %r318}, {%r998}, {%r790, %r790};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1037, %r1038}, {%r315, %r318}, {%r1001}, {%r790, %r790};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1044, %r1045}, {%r315, %r318}, {%r1004}, {%r790, %r790};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1051, %r1052}, {%r315, %r318}, {%r1007}, {%r790, %r790};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1058, %r1059}, {%r315, %r318}, {%r1010}, {%r790, %r790};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1065, %r1066}, {%r315, %r318}, {%r1013}, {%r790, %r790};
	// end inline asm
	@%p1 bra 	$L__BB0_221;
	bra.uni 	$L__BB0_164;
$L__BB0_221:                            // %pass4747
                                        //   in Loop: Header=BB0_163 Depth=2
	// begin inline asm
	neg.f16x2 %r1072, %r370;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1074, %r1072, %r1017;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1077, %r367, %r1016, %r1074;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1081, %r370;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1083, %r1081, %r1024;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1086, %r367, %r1023, %r1083;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1090, %r370;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1092, %r1090, %r1031;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1095, %r367, %r1030, %r1092;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1099, %r370;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1101, %r1099, %r1038;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1104, %r367, %r1037, %r1101;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1108, %r370;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1110, %r1108, %r1045;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1113, %r367, %r1044, %r1110;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1117, %r370;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1119, %r1117, %r1052;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1122, %r367, %r1051, %r1119;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1126, %r370;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1128, %r1126, %r1059;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1131, %r367, %r1058, %r1128;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1135, %r370;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1137, %r1135, %r1066;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1140, %r367, %r1065, %r1137;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1144, %r370, %r1016;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1147, %r367, %r1017, %r1144;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1151, %r370, %r1023;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1154, %r367, %r1024, %r1151;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1158, %r370, %r1030;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1161, %r367, %r1031, %r1158;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1165, %r370, %r1037;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1168, %r367, %r1038, %r1165;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1172, %r370, %r1044;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1175, %r367, %r1045, %r1172;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1179, %r370, %r1051;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1182, %r367, %r1052, %r1179;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1186, %r370, %r1058;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1189, %r367, %r1059, %r1186;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1193, %r370, %r1065;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1196, %r367, %r1066, %r1193;
	// end inline asm
	mov.u32 	%r1365, 0;
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1216, %r1217}, {%r411, %r414}, {%r1077, %r1147}, {%r1365, %r1365}, %r200, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1225, %r1226}, {%r411, %r414}, {%r1086, %r1154}, {%r1365, %r1365}, %r200, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1234, %r1235}, {%r411, %r414}, {%r1095, %r1161}, {%r1365, %r1365}, %r200, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1243, %r1244}, {%r411, %r414}, {%r1104, %r1168}, {%r1365, %r1365}, %r200, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1252, %r1253}, {%r411, %r414}, {%r1113, %r1175}, {%r1365, %r1365}, %r200, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1261, %r1262}, {%r411, %r414}, {%r1122, %r1182}, {%r1365, %r1365}, %r200, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1270, %r1271}, {%r411, %r414}, {%r1131, %r1189}, {%r1365, %r1365}, %r200, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1279, %r1280}, {%r411, %r414}, {%r1140, %r1196}, {%r1365, %r1365}, %r200, 0;
	// end inline asm
	bar.sync 	0;
	mul.hi.s16 	%rs103, %rs3, 10923;
	shr.u16 	%rs104, %rs103, 15;
	add.s16 	%rs105, %rs103, %rs104;
	mul.lo.s16 	%rs106, %rs105, 6;
	sub.s16 	%rs107, %rs3, %rs106;
	mul.wide.s16 	%r1398, %rs107, 16;
	add.s32 	%r1399, %r196, %r1398;
	mul.wide.s32 	%rd148, %r1399, 4;
	add.s64 	%rd150, %rd40, %rd148;
	ld.shared.u32 	%r1356, [%rd150];
	add.s32 	%r1400, %r197, %r1398;
	mul.wide.s32 	%rd151, %r1400, 4;
	add.s64 	%rd152, %rd40, %rd151;
	ld.shared.u32 	%r1363, [%rd152];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1352, %r1353}, {%r423, %r426}, {%r1356}, {%r1365, %r1365};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1359, %r1360}, {%r423, %r426}, {%r1363}, {%r1365, %r1365};
	// end inline asm
	@%p285 bra 	$L__BB0_223;
	bra.uni 	$L__BB0_222;
$L__BB0_223:                            // %pass5243
                                        //   in Loop: Header=BB0_163 Depth=2
	// begin inline asm
	neg.f16x2 %r1366, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1368, %r1366, %r1353;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1371, %r461, %r1352, %r1368;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1375, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1377, %r1375, %r1360;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1380, %r461, %r1359, %r1377;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1384, %r464, %r1352;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1387, %r461, %r1353, %r1384;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1391, %r464, %r1359;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1394, %r461, %r1360, %r1391;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1420, %r1423}, {%r507, %r510}, {%r1371, %r1387}, {%r1365, %r1365}, %r252, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1427, %r1431}, {%r507, %r510}, {%r1380, %r1394}, {%r1365, %r1365}, %r252, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1419, %r1420, %r1420;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1422, %r1423, %r1423, %r1419;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1426, %r1427, %r1427, %r1422;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1430, %r1431, %r1431, %r1426;
	// end inline asm
	mov.u32 	%r1518, 335549440;
	// begin inline asm
	fma.rn.f16x2 %r1434, %r1518, %r1430, %r110;
	// end inline asm
	add.s32 	%r253, %r88, %r111;
	add.s32 	%r1521, %r253, 1;
	mul.hi.u32 	%r1522, %r1521, -1431655765;
	shr.u32 	%r1523, %r1522, 2;
	mul.lo.s32 	%r1524, %r1523, 6;
	sub.s32 	%r1525, %r1521, %r1524;
	shl.b32 	%r1526, %r1525, 4;
	add.s32 	%r1527, %r196, %r1526;
	mul.wide.u32 	%rd155, %r1527, 4;
	add.s64 	%rd157, %rd40, %rd155;
	ld.shared.u32 	%r1442, [%rd157];
	add.s32 	%r1528, %r197, %r1526;
	mul.wide.u32 	%rd158, %r1528, 4;
	add.s64 	%rd159, %rd40, %rd158;
	ld.shared.u32 	%r1449, [%rd159];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1459, %r1456}, {%r423, %r426}, {%r1442}, {%r1365, %r1365};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1468, %r1465}, {%r423, %r426}, {%r1449}, {%r1365, %r1365};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1452, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1454, %r1452, %r1456;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1457, %r461, %r1459, %r1454;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1461, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1463, %r1461, %r1465;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1466, %r461, %r1468, %r1463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1470, %r464, %r1459;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1473, %r461, %r1456, %r1470;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1477, %r464, %r1468;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1480, %r461, %r1465, %r1477;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1503, %r1506}, {%r507, %r510}, {%r1457, %r1473}, {%r1365, %r1365}, %r252, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1510, %r1514}, {%r507, %r510}, {%r1466, %r1480}, {%r1365, %r1365}, %r252, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1502, %r1503, %r1503;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1505, %r1506, %r1506, %r1502;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1509, %r1510, %r1510, %r1505;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1513, %r1514, %r1514, %r1509;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3058, %r1518, %r1513, %r1434;
	// end inline asm
	add.s32 	%r3056, %r108, 2;
	setp.ne.s32 	%p286, %r3056, 128;
	@%p286 bra 	$L__BB0_225;
// %bb.224:                             // %pass5701
                                        //   in Loop: Header=BB0_163 Depth=2
	mul.lo.s32 	%r1530, %r109, 786432;
	or.b32  	%r1531, %r1530, %r198;
	add.s32 	%r1532, %r1531, %r199;
	cvt.u64.u32 	%rd160, %r1532;
	add.s64 	%rd161, %rd160, %rd7;
	mul.hi.s64 	%rd162, %rd161, 3074457345618258603;
	shr.u64 	%rd163, %rd162, 63;
	shr.s64 	%rd164, %rd162, 26;
	add.s64 	%rd165, %rd164, %rd163;
	setp.lt.s64 	%p287, %rd161, 0;
	mul.lo.s64 	%rd166, %rd165, 402653184;
	setp.ne.s64 	%p288, %rd166, %rd161;
	and.pred  	%p289, %p287, %p288;
	selp.s64 	%rd167, -1, 0, %p289;
	add.s64 	%rd168, %rd165, %rd167;
	mul.lo.s64 	%rd169, %rd168, -402653184;
	add.s64 	%rd170, %rd169, %rd161;
	shl.b64 	%rd171, %rd170, 2;
	add.s64 	%rd172, %rd4, %rd171;
	st.global.u32 	[%rd172], %r3058;
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r3056, 0;
	mov.u32 	%r3058, %r3056;
$L__BB0_225:                            // %oksrem5809
                                        //   in Loop: Header=BB0_163 Depth=2
	add.s32 	%r1699, %r253, 2;
	mul.hi.u32 	%r1700, %r1699, -1431655765;
	shr.u32 	%r1701, %r1700, 2;
	mul.lo.s32 	%r1702, %r1701, 6;
	sub.s32 	%r1703, %r1699, %r1702;
	shl.b32 	%r1704, %r1703, 4;
	add.s32 	%r1705, %r196, %r1704;
	mul.wide.u32 	%rd173, %r1705, 4;
	add.s64 	%rd175, %rd40, %rd173;
	ld.shared.u32 	%r1537, [%rd175];
	add.s32 	%r1706, %r197, %r1704;
	mul.wide.u32 	%rd176, %r1706, 4;
	add.s64 	%rd177, %rd40, %rd176;
	ld.shared.u32 	%r1544, [%rd177];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1554, %r1551}, {%r423, %r426}, {%r1537}, {%r1365, %r1365};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1563, %r1560}, {%r423, %r426}, {%r1544}, {%r1365, %r1365};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1547, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1549, %r1547, %r1551;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1552, %r461, %r1554, %r1549;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1556, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1558, %r1556, %r1560;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1561, %r461, %r1563, %r1558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1565, %r464, %r1554;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1568, %r461, %r1551, %r1565;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1572, %r464, %r1563;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1575, %r461, %r1560, %r1572;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1598, %r1601}, {%r507, %r510}, {%r1552, %r1568}, {%r1365, %r1365}, %r252, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1605, %r1609}, {%r507, %r510}, {%r1561, %r1575}, {%r1365, %r1365}, %r252, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1597, %r1598, %r1598;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1600, %r1601, %r1601, %r1597;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1604, %r1605, %r1605, %r1600;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1608, %r1609, %r1609, %r1604;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1612, %r1518, %r1608, %r3058;
	// end inline asm
	add.s32 	%r1707, %r253, 3;
	mul.hi.u32 	%r1708, %r1707, -1431655765;
	shr.u32 	%r1709, %r1708, 2;
	mul.lo.s32 	%r1710, %r1709, 6;
	sub.s32 	%r1711, %r1707, %r1710;
	shl.b32 	%r1712, %r1711, 4;
	add.s32 	%r1713, %r196, %r1712;
	mul.wide.u32 	%rd178, %r1713, 4;
	add.s64 	%rd179, %rd40, %rd178;
	ld.shared.u32 	%r1620, [%rd179];
	add.s32 	%r1714, %r197, %r1712;
	mul.wide.u32 	%rd180, %r1714, 4;
	add.s64 	%rd181, %rd40, %rd180;
	ld.shared.u32 	%r1627, [%rd181];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1637, %r1634}, {%r423, %r426}, {%r1620}, {%r1365, %r1365};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1646, %r1643}, {%r423, %r426}, {%r1627}, {%r1365, %r1365};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1630, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1632, %r1630, %r1634;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1635, %r461, %r1637, %r1632;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1639, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1641, %r1639, %r1643;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1644, %r461, %r1646, %r1641;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1648, %r464, %r1637;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1651, %r461, %r1634, %r1648;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1655, %r464, %r1646;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1658, %r461, %r1643, %r1655;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1681, %r1684}, {%r507, %r510}, {%r1635, %r1651}, {%r1365, %r1365}, %r252, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1688, %r1692}, {%r507, %r510}, {%r1644, %r1658}, {%r1365, %r1365}, %r252, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1680, %r1681, %r1681;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1683, %r1684, %r1684, %r1680;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1687, %r1688, %r1688, %r1683;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1691, %r1692, %r1692, %r1687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3061, %r1518, %r1691, %r1612;
	// end inline asm
	add.s32 	%r3059, %r3056, 2;
	setp.ne.s32 	%p290, %r3059, 128;
	@%p290 bra 	$L__BB0_227;
// %bb.226:                             // %pass6581
                                        //   in Loop: Header=BB0_163 Depth=2
	mul.lo.s32 	%r1716, %r109, 786432;
	or.b32  	%r1717, %r1716, %r198;
	add.s32 	%r1718, %r1717, %r199;
	cvt.u64.u32 	%rd182, %r1718;
	add.s64 	%rd183, %rd182, %rd7;
	mul.hi.s64 	%rd184, %rd183, 3074457345618258603;
	shr.u64 	%rd185, %rd184, 63;
	shr.s64 	%rd186, %rd184, 26;
	add.s64 	%rd187, %rd186, %rd185;
	setp.lt.s64 	%p291, %rd183, 0;
	mul.lo.s64 	%rd188, %rd187, 402653184;
	setp.ne.s64 	%p292, %rd188, %rd183;
	and.pred  	%p293, %p291, %p292;
	selp.s64 	%rd189, -1, 0, %p293;
	add.s64 	%rd190, %rd187, %rd189;
	mul.lo.s64 	%rd191, %rd190, -402653184;
	add.s64 	%rd192, %rd191, %rd183;
	shl.b64 	%rd193, %rd192, 2;
	add.s64 	%rd194, %rd4, %rd193;
	st.global.u32 	[%rd194], %r3061;
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r3059, 0;
	mov.u32 	%r3061, %r3059;
$L__BB0_227:                            // %oksrem6689
                                        //   in Loop: Header=BB0_163 Depth=2
	add.s32 	%r1885, %r253, 4;
	mul.hi.u32 	%r1886, %r1885, -1431655765;
	shr.u32 	%r1887, %r1886, 2;
	mul.lo.s32 	%r1888, %r1887, 6;
	sub.s32 	%r1889, %r1885, %r1888;
	shl.b32 	%r1890, %r1889, 4;
	add.s32 	%r1891, %r196, %r1890;
	mul.wide.u32 	%rd195, %r1891, 4;
	add.s64 	%rd197, %rd40, %rd195;
	ld.shared.u32 	%r1723, [%rd197];
	add.s32 	%r1892, %r197, %r1890;
	mul.wide.u32 	%rd198, %r1892, 4;
	add.s64 	%rd199, %rd40, %rd198;
	ld.shared.u32 	%r1730, [%rd199];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1740, %r1737}, {%r423, %r426}, {%r1723}, {%r1365, %r1365};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1749, %r1746}, {%r423, %r426}, {%r1730}, {%r1365, %r1365};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1733, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1735, %r1733, %r1737;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1738, %r461, %r1740, %r1735;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1742, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1744, %r1742, %r1746;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1747, %r461, %r1749, %r1744;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1751, %r464, %r1740;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1754, %r461, %r1737, %r1751;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1758, %r464, %r1749;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1761, %r461, %r1746, %r1758;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1784, %r1787}, {%r507, %r510}, {%r1738, %r1754}, {%r1365, %r1365}, %r252, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1791, %r1795}, {%r507, %r510}, {%r1747, %r1761}, {%r1365, %r1365}, %r252, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1783, %r1784, %r1784;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1786, %r1787, %r1787, %r1783;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1790, %r1791, %r1791, %r1786;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1794, %r1795, %r1795, %r1790;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1798, %r1518, %r1794, %r3061;
	// end inline asm
	add.s32 	%r1893, %r253, 5;
	mul.hi.u32 	%r1894, %r1893, -1431655765;
	shr.u32 	%r1895, %r1894, 2;
	mul.lo.s32 	%r1896, %r1895, 6;
	sub.s32 	%r1897, %r1893, %r1896;
	shl.b32 	%r1898, %r1897, 4;
	add.s32 	%r1899, %r196, %r1898;
	mul.wide.u32 	%rd200, %r1899, 4;
	add.s64 	%rd201, %rd40, %rd200;
	ld.shared.u32 	%r1806, [%rd201];
	add.s32 	%r1900, %r197, %r1898;
	mul.wide.u32 	%rd202, %r1900, 4;
	add.s64 	%rd203, %rd40, %rd202;
	ld.shared.u32 	%r1813, [%rd203];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1823, %r1820}, {%r423, %r426}, {%r1806}, {%r1365, %r1365};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1832, %r1829}, {%r423, %r426}, {%r1813}, {%r1365, %r1365};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1816, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1818, %r1816, %r1820;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1821, %r461, %r1823, %r1818;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1825, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1827, %r1825, %r1829;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1830, %r461, %r1832, %r1827;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1834, %r464, %r1823;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1837, %r461, %r1820, %r1834;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1841, %r464, %r1832;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1844, %r461, %r1829, %r1841;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1867, %r1870}, {%r507, %r510}, {%r1821, %r1837}, {%r1365, %r1365}, %r252, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1874, %r1878}, {%r507, %r510}, {%r1830, %r1844}, {%r1365, %r1365}, %r252, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1866, %r1867, %r1867;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1869, %r1870, %r1870, %r1866;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1873, %r1874, %r1874, %r1869;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1877, %r1878, %r1878, %r1873;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r110, %r1518, %r1877, %r1798;
	// end inline asm
	add.s32 	%r108, %r3059, 2;
	setp.ne.s32 	%p294, %r108, 128;
	@%p294 bra 	$L__BB0_165;
// %bb.228:                             // %pass7461
                                        //   in Loop: Header=BB0_163 Depth=2
	mul.lo.s32 	%r1902, %r109, 786432;
	or.b32  	%r1903, %r1902, %r198;
	add.s32 	%r1904, %r1903, %r199;
	cvt.u64.u32 	%rd204, %r1904;
	add.s64 	%rd205, %rd204, %rd7;
	mul.hi.s64 	%rd206, %rd205, 3074457345618258603;
	shr.u64 	%rd207, %rd206, 63;
	shr.s64 	%rd208, %rd206, 26;
	add.s64 	%rd209, %rd208, %rd207;
	setp.lt.s64 	%p295, %rd205, 0;
	mul.lo.s64 	%rd210, %rd209, 402653184;
	setp.ne.s64 	%p296, %rd210, %rd205;
	and.pred  	%p297, %p295, %p296;
	selp.s64 	%rd211, -1, 0, %p297;
	add.s64 	%rd212, %rd209, %rd211;
	mul.lo.s64 	%rd213, %rd212, -402653184;
	add.s64 	%rd214, %rd213, %rd205;
	shl.b64 	%rd215, %rd214, 2;
	add.s64 	%rd216, %rd4, %rd215;
	st.global.u32 	[%rd216], %r110;
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r108, 0;
	mov.u32 	%r110, %r108;
	bra.uni 	$L__BB0_165;
$L__BB0_166:                            // %L17541.preheader
                                        //   in Loop: Header=BB0_202 Depth=1
	mov.u16 	%rs194, %rs1;
	mov.u32 	%r3047, %r1365;
	bra.uni 	$L__BB0_167;
$L__BB0_172:                            // %L24412
                                        //   in Loop: Header=BB0_167 Depth=2
	bar.sync 	0;
	add.s32 	%r3047, %r3047, 6;
	add.s16 	%rs194, %rs194, 6;
	setp.ne.s32 	%p315, %r3047, 24;
	@%p315 bra 	$L__BB0_167;
	bra.uni 	$L__BB0_173;
$L__BB0_167:                            // %L17541
                                        //   Parent Loop BB0_202 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p299, %r3047, 0;
	selp.b32 	%r2600, %r92, 0, %p299;
	setp.eq.s32 	%p300, %r3047, 6;
	selp.b32 	%r2601, %r96, %r2600, %p300;
	setp.eq.s32 	%p301, %r3047, 12;
	selp.b32 	%r2602, %r100, %r2601, %p301;
	setp.eq.s32 	%p302, %r3047, 18;
	selp.b32 	%r2603, %r104, %r2602, %p302;
	selp.b32 	%r2604, %r93, 0, %p299;
	selp.b32 	%r2605, %r97, %r2604, %p300;
	selp.b32 	%r2606, %r101, %r2605, %p301;
	selp.b32 	%r2607, %r105, %r2606, %p302;
	selp.b32 	%r2608, %r94, 0, %p299;
	selp.b32 	%r2609, %r98, %r2608, %p300;
	selp.b32 	%r2610, %r102, %r2609, %p301;
	selp.b32 	%r2611, %r106, %r2610, %p302;
	selp.b32 	%r2612, %r95, 0, %p299;
	selp.b32 	%r2613, %r99, %r2612, %p300;
	selp.b32 	%r2614, %r103, %r2613, %p301;
	selp.b32 	%r2615, %r107, %r2614, %p302;
	// begin inline asm
	mov.b32 %r1933, {%rs92, %rs92};
	// end inline asm
	// begin inline asm
	mov.b32 %r1944, {%rs94, %rs94};
	// end inline asm
	shr.u32 	%r2616, %r2603, 8;
	xor.b32  	%r1943, %r2616, 8947848;
	// begin inline asm
	lop3.b32 %r1930, %r949, %r1943, %r1933, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1934, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1935, %r1933, %r1934;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1938, %r1930, %r1935;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1941, %r960, %r1943, %r1944, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1945, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1946, %r1944, %r1945;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1949, %r1941, %r1946;
	// end inline asm
	// begin inline asm
	mov.b32 %r1979, {%rs92, %rs92};
	// end inline asm
	// begin inline asm
	mov.b32 %r1990, {%rs94, %rs94};
	// end inline asm
	shr.u32 	%r2617, %r2607, 8;
	xor.b32  	%r1989, %r2617, 8947848;
	// begin inline asm
	lop3.b32 %r1976, %r949, %r1989, %r1979, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1980, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1981, %r1979, %r1980;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1984, %r1976, %r1981;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1987, %r960, %r1989, %r1990, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1991, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1992, %r1990, %r1991;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1995, %r1987, %r1992;
	// end inline asm
	// begin inline asm
	mov.b32 %r2025, {%rs92, %rs92};
	// end inline asm
	// begin inline asm
	mov.b32 %r2036, {%rs94, %rs94};
	// end inline asm
	shr.u32 	%r2618, %r2611, 8;
	xor.b32  	%r2035, %r2618, 8947848;
	// begin inline asm
	lop3.b32 %r2022, %r949, %r2035, %r2025, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2026, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2027, %r2025, %r2026;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2030, %r2022, %r2027;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2033, %r960, %r2035, %r2036, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2037, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2038, %r2036, %r2037;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2041, %r2033, %r2038;
	// end inline asm
	// begin inline asm
	mov.b32 %r2071, {%rs92, %rs92};
	// end inline asm
	// begin inline asm
	mov.b32 %r2082, {%rs94, %rs94};
	// end inline asm
	shr.u32 	%r2619, %r2615, 8;
	xor.b32  	%r2081, %r2619, 8947848;
	// begin inline asm
	lop3.b32 %r2068, %r949, %r2081, %r2071, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2072, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2073, %r2071, %r2072;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2076, %r2068, %r2073;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2079, %r960, %r2081, %r2082, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2083, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2084, %r2082, %r2083;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2087, %r2079, %r2084;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r1938;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2090, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r1984;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2093, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r174;
    mov.b32 {%r2re, %r2im}, %r1949;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2096, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r175;
    mov.b32 {%r2re, %r2im}, %r1995;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2099, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2030;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2102, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r2076;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2105, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r174;
    mov.b32 {%r2re, %r2im}, %r2041;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2108, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r175;
    mov.b32 {%r2re, %r2im}, %r2087;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2111, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2177, %r2174}, {%r315, %r318}, {%r2090}, {%r1365, %r1365};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2186, %r2183}, {%r315, %r318}, {%r2093}, {%r1365, %r1365};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2195, %r2192}, {%r315, %r318}, {%r2096}, {%r1365, %r1365};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2204, %r2201}, {%r315, %r318}, {%r2099}, {%r1365, %r1365};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2213, %r2210}, {%r315, %r318}, {%r2102}, {%r1365, %r1365};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2222, %r2219}, {%r315, %r318}, {%r2105}, {%r1365, %r1365};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2231, %r2228}, {%r315, %r318}, {%r2108}, {%r1365, %r1365};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2240, %r2237}, {%r315, %r318}, {%r2111}, {%r1365, %r1365};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2170, %r370;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2172, %r2170, %r2174;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2175, %r367, %r2177, %r2172;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2179, %r370;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2181, %r2179, %r2183;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2184, %r367, %r2186, %r2181;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2188, %r370;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2190, %r2188, %r2192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2193, %r367, %r2195, %r2190;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2197, %r370;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2199, %r2197, %r2201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2202, %r367, %r2204, %r2199;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2206, %r370;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2208, %r2206, %r2210;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2211, %r367, %r2213, %r2208;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2215, %r370;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2217, %r2215, %r2219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2220, %r367, %r2222, %r2217;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2224, %r370;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2226, %r2224, %r2228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2229, %r367, %r2231, %r2226;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2233, %r370;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2235, %r2233, %r2237;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2238, %r367, %r2240, %r2235;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2242, %r370, %r2177;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2245, %r367, %r2174, %r2242;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2249, %r370, %r2186;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2252, %r367, %r2183, %r2249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2256, %r370, %r2195;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2259, %r367, %r2192, %r2256;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2263, %r370, %r2204;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2266, %r367, %r2201, %r2263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2270, %r370, %r2213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2273, %r367, %r2210, %r2270;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2277, %r370, %r2222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2280, %r367, %r2219, %r2277;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2284, %r370, %r2231;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2287, %r367, %r2228, %r2284;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2291, %r370, %r2240;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2294, %r367, %r2237, %r2291;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2298, %r2299}, {%r411, %r414}, {%r2175, %r2245}, {%r1365, %r1365}, %r200, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2307, %r2308}, {%r411, %r414}, {%r2184, %r2252}, {%r1365, %r1365}, %r200, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2316, %r2317}, {%r411, %r414}, {%r2193, %r2259}, {%r1365, %r1365}, %r200, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2325, %r2326}, {%r411, %r414}, {%r2202, %r2266}, {%r1365, %r1365}, %r200, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2334, %r2335}, {%r411, %r414}, {%r2211, %r2273}, {%r1365, %r1365}, %r200, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2343, %r2344}, {%r411, %r414}, {%r2220, %r2280}, {%r1365, %r1365}, %r200, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2352, %r2353}, {%r411, %r414}, {%r2229, %r2287}, {%r1365, %r1365}, %r200, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2361, %r2362}, {%r411, %r414}, {%r2238, %r2294}, {%r1365, %r1365}, %r200, 0;
	// end inline asm
	bar.sync 	0;
	add.s16 	%rs156, %rs194, -5;
	mul.hi.s16 	%rs157, %rs156, 10923;
	shr.u16 	%rs158, %rs157, 15;
	add.s16 	%rs159, %rs157, %rs158;
	mul.lo.s16 	%rs160, %rs159, 6;
	sub.s16 	%rs161, %rs156, %rs160;
	mul.wide.s16 	%r2620, %rs161, 16;
	add.s32 	%r2621, %r196, %r2620;
	mul.wide.s32 	%rd217, %r2621, 4;
	add.s64 	%rd219, %rd40, %rd217;
	ld.shared.u32 	%r2438, [%rd219];
	add.s32 	%r2622, %r197, %r2620;
	mul.wide.s32 	%rd220, %r2622, 4;
	add.s64 	%rd221, %rd40, %rd220;
	ld.shared.u32 	%r2445, [%rd221];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2455, %r2452}, {%r423, %r426}, {%r2438}, {%r1365, %r1365};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2464, %r2461}, {%r423, %r426}, {%r2445}, {%r1365, %r1365};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2448, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2450, %r2448, %r2452;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2453, %r461, %r2455, %r2450;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2457, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2459, %r2457, %r2461;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2462, %r461, %r2464, %r2459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2466, %r464, %r2455;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2469, %r461, %r2452, %r2466;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2473, %r464, %r2464;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2476, %r461, %r2461, %r2473;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2499, %r2502}, {%r507, %r510}, {%r2453, %r2469}, {%r1365, %r1365}, %r252, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2506, %r2510}, {%r507, %r510}, {%r2462, %r2476}, {%r1365, %r1365}, %r252, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2498, %r2499, %r2499;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2501, %r2502, %r2502, %r2498;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2505, %r2506, %r2506, %r2501;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2509, %r2510, %r2510, %r2505;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2513, %r1518, %r2509, %r110;
	// end inline asm
	add.s16 	%rs162, %rs194, -4;
	mul.hi.s16 	%rs163, %rs162, 10923;
	shr.u16 	%rs164, %rs163, 15;
	add.s16 	%rs165, %rs163, %rs164;
	mul.lo.s16 	%rs166, %rs165, 6;
	sub.s16 	%rs167, %rs162, %rs166;
	mul.wide.s16 	%r2623, %rs167, 16;
	add.s32 	%r2624, %r196, %r2623;
	mul.wide.s32 	%rd222, %r2624, 4;
	add.s64 	%rd223, %rd40, %rd222;
	ld.shared.u32 	%r2521, [%rd223];
	add.s32 	%r2625, %r197, %r2623;
	mul.wide.s32 	%rd224, %r2625, 4;
	add.s64 	%rd225, %rd40, %rd224;
	ld.shared.u32 	%r2528, [%rd225];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2538, %r2535}, {%r423, %r426}, {%r2521}, {%r1365, %r1365};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2547, %r2544}, {%r423, %r426}, {%r2528}, {%r1365, %r1365};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2531, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2533, %r2531, %r2535;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2536, %r461, %r2538, %r2533;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2540, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2542, %r2540, %r2544;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2545, %r461, %r2547, %r2542;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2549, %r464, %r2538;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2552, %r461, %r2535, %r2549;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2556, %r464, %r2547;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2559, %r461, %r2544, %r2556;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2582, %r2585}, {%r507, %r510}, {%r2536, %r2552}, {%r1365, %r1365}, %r252, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2589, %r2593}, {%r507, %r510}, {%r2545, %r2559}, {%r1365, %r1365}, %r252, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2581, %r2582, %r2582;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2584, %r2585, %r2585, %r2581;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2588, %r2589, %r2589, %r2584;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2592, %r2593, %r2593, %r2588;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3064, %r1518, %r2592, %r2513;
	// end inline asm
	add.s32 	%r3062, %r108, 2;
	setp.eq.s32 	%p303, %r3062, 128;
	@%p303 bra 	$L__BB0_168;
	bra.uni 	$L__BB0_169;
$L__BB0_168:                            // %pass8526
                                        //   in Loop: Header=BB0_167 Depth=2
	mul.lo.s32 	%r2627, %r109, 786432;
	or.b32  	%r2628, %r2627, %r198;
	add.s32 	%r2629, %r2628, %r199;
	cvt.u64.u32 	%rd226, %r2629;
	add.s64 	%rd227, %rd226, %rd7;
	mul.hi.s64 	%rd228, %rd227, 3074457345618258603;
	shr.u64 	%rd229, %rd228, 63;
	shr.s64 	%rd230, %rd228, 26;
	add.s64 	%rd231, %rd230, %rd229;
	setp.lt.s64 	%p304, %rd227, 0;
	mul.lo.s64 	%rd232, %rd231, 402653184;
	setp.ne.s64 	%p305, %rd232, %rd227;
	and.pred  	%p306, %p304, %p305;
	selp.s64 	%rd233, -1, 0, %p306;
	add.s64 	%rd234, %rd231, %rd233;
	mul.lo.s64 	%rd235, %rd234, -402653184;
	add.s64 	%rd236, %rd235, %rd227;
	shl.b64 	%rd237, %rd236, 2;
	add.s64 	%rd238, %rd4, %rd237;
	st.global.u32 	[%rd238], %r3064;
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r3062, 0;
	mov.u32 	%r3064, %r3062;
$L__BB0_169:                            // %oksrem8634
                                        //   in Loop: Header=BB0_167 Depth=2
	add.s16 	%rs168, %rs194, -3;
	mul.hi.s16 	%rs169, %rs168, 10923;
	shr.u16 	%rs170, %rs169, 15;
	add.s16 	%rs171, %rs169, %rs170;
	mul.lo.s16 	%rs172, %rs171, 6;
	sub.s16 	%rs173, %rs168, %rs172;
	mul.wide.s16 	%r2796, %rs173, 16;
	add.s32 	%r2797, %r196, %r2796;
	mul.wide.s32 	%rd239, %r2797, 4;
	add.s64 	%rd241, %rd40, %rd239;
	ld.shared.u32 	%r2634, [%rd241];
	add.s32 	%r2798, %r197, %r2796;
	mul.wide.s32 	%rd242, %r2798, 4;
	add.s64 	%rd243, %rd40, %rd242;
	ld.shared.u32 	%r2641, [%rd243];
	mov.u32 	%r2811, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2651, %r2648}, {%r423, %r426}, {%r2634}, {%r2811, %r2811};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2660, %r2657}, {%r423, %r426}, {%r2641}, {%r2811, %r2811};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2644, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2646, %r2644, %r2648;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2649, %r461, %r2651, %r2646;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2653, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2655, %r2653, %r2657;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2658, %r461, %r2660, %r2655;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2662, %r464, %r2651;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2665, %r461, %r2648, %r2662;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2669, %r464, %r2660;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2672, %r461, %r2657, %r2669;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2695, %r2698}, {%r507, %r510}, {%r2649, %r2665}, {%r2811, %r2811}, %r252, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2702, %r2706}, {%r507, %r510}, {%r2658, %r2672}, {%r2811, %r2811}, %r252, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2694, %r2695, %r2695;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2697, %r2698, %r2698, %r2694;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2701, %r2702, %r2702, %r2697;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2705, %r2706, %r2706, %r2701;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2709, %r1518, %r2705, %r3064;
	// end inline asm
	add.s16 	%rs174, %rs194, -2;
	mul.hi.s16 	%rs175, %rs174, 10923;
	shr.u16 	%rs176, %rs175, 15;
	add.s16 	%rs177, %rs175, %rs176;
	mul.lo.s16 	%rs178, %rs177, 6;
	sub.s16 	%rs179, %rs174, %rs178;
	mul.wide.s16 	%r2799, %rs179, 16;
	add.s32 	%r2800, %r196, %r2799;
	mul.wide.s32 	%rd244, %r2800, 4;
	add.s64 	%rd245, %rd40, %rd244;
	ld.shared.u32 	%r2717, [%rd245];
	add.s32 	%r2801, %r197, %r2799;
	mul.wide.s32 	%rd246, %r2801, 4;
	add.s64 	%rd247, %rd40, %rd246;
	ld.shared.u32 	%r2724, [%rd247];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2734, %r2731}, {%r423, %r426}, {%r2717}, {%r2811, %r2811};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2743, %r2740}, {%r423, %r426}, {%r2724}, {%r2811, %r2811};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2727, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2729, %r2727, %r2731;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2732, %r461, %r2734, %r2729;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2736, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2738, %r2736, %r2740;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2741, %r461, %r2743, %r2738;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2745, %r464, %r2734;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2748, %r461, %r2731, %r2745;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2752, %r464, %r2743;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2755, %r461, %r2740, %r2752;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2778, %r2781}, {%r507, %r510}, {%r2732, %r2748}, {%r2811, %r2811}, %r252, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2785, %r2789}, {%r507, %r510}, {%r2741, %r2755}, {%r2811, %r2811}, %r252, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2777, %r2778, %r2778;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2780, %r2781, %r2781, %r2777;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2784, %r2785, %r2785, %r2780;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2788, %r2789, %r2789, %r2784;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3067, %r1518, %r2788, %r2709;
	// end inline asm
	add.s32 	%r3065, %r3062, 2;
	setp.ne.s32 	%p307, %r3065, 128;
	@%p307 bra 	$L__BB0_171;
// %bb.170:                             // %pass9406
                                        //   in Loop: Header=BB0_167 Depth=2
	mul.lo.s32 	%r2803, %r109, 786432;
	or.b32  	%r2804, %r2803, %r198;
	add.s32 	%r2805, %r2804, %r199;
	cvt.u64.u32 	%rd248, %r2805;
	add.s64 	%rd249, %rd248, %rd7;
	mul.hi.s64 	%rd250, %rd249, 3074457345618258603;
	shr.u64 	%rd251, %rd250, 63;
	shr.s64 	%rd252, %rd250, 26;
	add.s64 	%rd253, %rd252, %rd251;
	setp.lt.s64 	%p308, %rd249, 0;
	mul.lo.s64 	%rd254, %rd253, 402653184;
	setp.ne.s64 	%p309, %rd254, %rd249;
	and.pred  	%p310, %p308, %p309;
	selp.s64 	%rd255, -1, 0, %p310;
	add.s64 	%rd256, %rd253, %rd255;
	mul.lo.s64 	%rd257, %rd256, -402653184;
	add.s64 	%rd258, %rd257, %rd249;
	shl.b64 	%rd259, %rd258, 2;
	add.s64 	%rd260, %rd4, %rd259;
	st.global.u32 	[%rd260], %r3067;
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r3065, 0;
	mov.u32 	%r3067, %r3065;
$L__BB0_171:                            // %oksrem9514
                                        //   in Loop: Header=BB0_167 Depth=2
	add.s16 	%rs180, %rs194, -1;
	mul.hi.s16 	%rs181, %rs180, 10923;
	shr.u16 	%rs182, %rs181, 15;
	add.s16 	%rs183, %rs181, %rs182;
	mul.lo.s16 	%rs184, %rs183, 6;
	sub.s16 	%rs185, %rs180, %rs184;
	mul.wide.s16 	%r2972, %rs185, 16;
	add.s32 	%r2973, %r196, %r2972;
	mul.wide.s32 	%rd261, %r2973, 4;
	add.s64 	%rd263, %rd40, %rd261;
	ld.shared.u32 	%r2810, [%rd263];
	add.s32 	%r2974, %r197, %r2972;
	mul.wide.s32 	%rd264, %r2974, 4;
	add.s64 	%rd265, %rd40, %rd264;
	ld.shared.u32 	%r2817, [%rd265];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2827, %r2824}, {%r423, %r426}, {%r2810}, {%r2811, %r2811};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2836, %r2833}, {%r423, %r426}, {%r2817}, {%r2811, %r2811};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2820, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2822, %r2820, %r2824;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2825, %r461, %r2827, %r2822;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2829, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2831, %r2829, %r2833;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2834, %r461, %r2836, %r2831;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2838, %r464, %r2827;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2841, %r461, %r2824, %r2838;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2845, %r464, %r2836;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2848, %r461, %r2833, %r2845;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2871, %r2874}, {%r507, %r510}, {%r2825, %r2841}, {%r2811, %r2811}, %r252, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2878, %r2882}, {%r507, %r510}, {%r2834, %r2848}, {%r2811, %r2811}, %r252, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2870, %r2871, %r2871;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2873, %r2874, %r2874, %r2870;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2877, %r2878, %r2878, %r2873;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2881, %r2882, %r2882, %r2877;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2885, %r1518, %r2881, %r3067;
	// end inline asm
	mul.hi.s16 	%rs186, %rs194, 10923;
	shr.u16 	%rs187, %rs186, 15;
	add.s16 	%rs188, %rs186, %rs187;
	mul.lo.s16 	%rs189, %rs188, 6;
	sub.s16 	%rs190, %rs194, %rs189;
	mul.wide.s16 	%r2975, %rs190, 16;
	add.s32 	%r2976, %r196, %r2975;
	mul.wide.s32 	%rd266, %r2976, 4;
	add.s64 	%rd267, %rd40, %rd266;
	ld.shared.u32 	%r2893, [%rd267];
	add.s32 	%r2977, %r197, %r2975;
	mul.wide.s32 	%rd268, %r2977, 4;
	add.s64 	%rd269, %rd40, %rd268;
	ld.shared.u32 	%r2900, [%rd269];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2910, %r2907}, {%r423, %r426}, {%r2893}, {%r2811, %r2811};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2919, %r2916}, {%r423, %r426}, {%r2900}, {%r2811, %r2811};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2903, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2905, %r2903, %r2907;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2908, %r461, %r2910, %r2905;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2912, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2914, %r2912, %r2916;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2917, %r461, %r2919, %r2914;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2921, %r464, %r2910;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2924, %r461, %r2907, %r2921;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2928, %r464, %r2919;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2931, %r461, %r2916, %r2928;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2954, %r2957}, {%r507, %r510}, {%r2908, %r2924}, {%r2811, %r2811}, %r252, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2961, %r2965}, {%r507, %r510}, {%r2917, %r2931}, {%r2811, %r2811}, %r252, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2953, %r2954, %r2954;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2956, %r2957, %r2957, %r2953;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2960, %r2961, %r2961, %r2956;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2964, %r2965, %r2965, %r2960;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r110, %r1518, %r2964, %r2885;
	// end inline asm
	add.s32 	%r108, %r3065, 2;
	setp.ne.s32 	%p311, %r108, 128;
	@%p311 bra 	$L__BB0_172;
// %bb.229:                             // %pass10286
                                        //   in Loop: Header=BB0_167 Depth=2
	mul.lo.s32 	%r2979, %r109, 786432;
	or.b32  	%r2980, %r2979, %r198;
	add.s32 	%r2981, %r2980, %r199;
	cvt.u64.u32 	%rd270, %r2981;
	add.s64 	%rd271, %rd270, %rd7;
	mul.hi.s64 	%rd272, %rd271, 3074457345618258603;
	shr.u64 	%rd273, %rd272, 63;
	shr.s64 	%rd274, %rd272, 26;
	add.s64 	%rd275, %rd274, %rd273;
	setp.lt.s64 	%p312, %rd271, 0;
	mul.lo.s64 	%rd276, %rd275, 402653184;
	setp.ne.s64 	%p313, %rd276, %rd271;
	and.pred  	%p314, %p312, %p313;
	selp.s64 	%rd277, -1, 0, %p314;
	add.s64 	%rd278, %rd275, %rd277;
	mul.lo.s64 	%rd279, %rd278, -402653184;
	add.s64 	%rd280, %rd279, %rd271;
	shl.b64 	%rd281, %rd280, 2;
	add.s64 	%rd282, %rd4, %rd281;
	st.global.u32 	[%rd282], %r110;
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r108, %r2811;
	mov.u32 	%r110, %r2811;
	bra.uni 	$L__BB0_172;
$L__BB0_174:                            // %L24443
	mov.u32 	%r2982, 0;
	st.global.u32 	[%rd6], %r2982;
	ret;
$L__BB0_164:                            // %post_box_union
	mov.u64 	%rd146, exception1951;
	cvta.global.u64 	%rd147, %rd146;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd147;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_222:                            // %post_box_union5238
	mov.u64 	%rd153, exception1951;
	cvta.global.u64 	%rd154, %rd153;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd154;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L5137
	mov.u32 	%r2998, 5;
	st.global.u32 	[%rd6], %r2998;
	mov.u64 	%rd313, exception1911;
	cvta.global.u64 	%rd314, %rd313;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd314;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L5297
	mov.u32 	%r2997, 5;
	st.global.u32 	[%rd6], %r2997;
	mov.u64 	%rd311, exception1911;
	cvta.global.u64 	%rd312, %rd311;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd312;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L5457
	mov.u32 	%r2996, 5;
	st.global.u32 	[%rd6], %r2996;
	mov.u64 	%rd309, exception1911;
	cvta.global.u64 	%rd310, %rd309;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd310;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L5617
	mov.u32 	%r2995, 5;
	st.global.u32 	[%rd6], %r2995;
	mov.u64 	%rd307, exception1911;
	cvta.global.u64 	%rd308, %rd307;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd308;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L5777
	mov.u32 	%r2994, 5;
	st.global.u32 	[%rd6], %r2994;
	mov.u64 	%rd305, exception1911;
	cvta.global.u64 	%rd306, %rd305;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd306;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_151:                            // %L5937
	mov.u32 	%r2993, 5;
	st.global.u32 	[%rd6], %r2993;
	mov.u64 	%rd303, exception1911;
	cvta.global.u64 	%rd304, %rd303;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd304;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_152:                            // %L6097
	mov.u32 	%r2992, 5;
	st.global.u32 	[%rd6], %r2992;
	mov.u64 	%rd301, exception1911;
	cvta.global.u64 	%rd302, %rd301;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd302;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_153:                            // %L6257
	mov.u32 	%r2991, 5;
	st.global.u32 	[%rd6], %r2991;
	mov.u64 	%rd299, exception1911;
	cvta.global.u64 	%rd300, %rd299;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd300;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_154:                            // %L6417
	mov.u32 	%r2990, 5;
	st.global.u32 	[%rd6], %r2990;
	mov.u64 	%rd297, exception1911;
	cvta.global.u64 	%rd298, %rd297;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd298;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_155:                            // %L6577
	mov.u32 	%r2989, 5;
	st.global.u32 	[%rd6], %r2989;
	mov.u64 	%rd295, exception1911;
	cvta.global.u64 	%rd296, %rd295;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd296;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_156:                            // %L6763
	mov.u32 	%r2988, 5;
	st.global.u32 	[%rd6], %r2988;
	mov.u64 	%rd293, exception1911;
	cvta.global.u64 	%rd294, %rd293;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd294;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_157:                            // %L6923
	mov.u32 	%r2987, 5;
	st.global.u32 	[%rd6], %r2987;
	mov.u64 	%rd291, exception1911;
	cvta.global.u64 	%rd292, %rd291;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd292;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_158:                            // %L7083
	mov.u32 	%r2986, 5;
	st.global.u32 	[%rd6], %r2986;
	mov.u64 	%rd289, exception1911;
	cvta.global.u64 	%rd290, %rd289;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd290;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_159:                            // %L7243
	mov.u32 	%r2985, 5;
	st.global.u32 	[%rd6], %r2985;
	mov.u64 	%rd287, exception1911;
	cvta.global.u64 	%rd288, %rd287;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd288;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_160:                            // %L7403
	mov.u32 	%r2984, 5;
	st.global.u32 	[%rd6], %r2984;
	mov.u64 	%rd285, exception1911;
	cvta.global.u64 	%rd286, %rd285;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd286;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_161:                            // %L7563
	mov.u32 	%r2983, 5;
	st.global.u32 	[%rd6], %r2983;
	mov.u64 	%rd283, exception1911;
	cvta.global.u64 	%rd284, %rd283;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd284;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L169
	mov.u32 	%r3000, 2;
	st.global.u32 	[%rd6], %r3000;
	mov.u64 	%rd317, exception1911;
	cvta.global.u64 	%rd318, %rd317;
	{ // callseq 90, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd318;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 90
	{ // callseq 91, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 91
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_13:                             // %L312
	mov.u32 	%r2999, 3;
	st.global.u32 	[%rd6], %r2999;
	mov.u64 	%rd315, exception1911;
	cvta.global.u64 	%rd316, %rd315;
	{ // callseq 88, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd316;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 88
	{ // callseq 89, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 89
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 47
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 48
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L1158
	add.u64 	%rd17, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r292, %r4};
	st.local.v2.u32 	[%rd5+8], {%r1, %r85};
	st.local.u32 	[%rd5+16], %r86;
	mov.u64 	%rd23, __unnamed_1;
	cvta.global.u64 	%rd24, %rd23;
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd24;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd17;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r520, [retval0+0];
	} // callseq 49
	mov.u32 	%r522, 4;
	st.global.u32 	[%rd6], %r522;
	mov.u64 	%rd26, exception1911;
	cvta.global.u64 	%rd27, %rd26;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd27;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
