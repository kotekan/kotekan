// PTX kernel code for CUDA baseband beamformer
// This file has been generated automatically by `bb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for bb(::Int32, ::Int32, ::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=128, blocks_per_sm=8

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception716[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32]
)
.reqntid 128, 1, 1
.minnctapersm 8
{
	.reg .pred 	%p<60>;
	.reg .b32 	%r<869>;
	.reg .b64 	%rd<87>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r64, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd20, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r67, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p6, %r67, 8319;
	@%p6 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r68, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p7, %r68, 13439;
	@%p7 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L26
	ld.param.u32 	%r65, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	ld.param.u64 	%rd5, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r69, %r1, 7;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %tid.x;
	or.b32  	%r70, %r3, %r4;
	or.b32  	%r71, %r70, %r69;
	mul.wide.u32 	%rd25, %r71, 4;
	add.s64 	%rd7, %rd5, %rd25;
	mov.u32 	%r72, 1;
	st.global.u32 	[%rd7], %r72;
	setp.gt.u32 	%p8, %r65, 65535;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L131
	ld.param.u32 	%r66, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p9, %r66, %r65;
	setp.gt.s32 	%p10, %r66, 131071;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L138
	sub.s32 	%r73, %r66, %r65;
	and.b32  	%r74, %r73, 127;
	setp.eq.s32 	%p12, %r74, 0;
	@%p12 bra 	$L__BB0_20;
	bra.uni 	$L__BB0_7;
$L__BB0_20:                             // %pass120
	ld.param.u64 	%rd3, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	shl.b32 	%r75, %r1, 4;
	shr.u32 	%r59, %r4, 3;
	shl.b32 	%r60, %r2, 2;
	or.b32  	%r61, %r59, %r60;
	or.b32  	%r76, %r61, %r75;
	mul.wide.u32 	%rd26, %r76, 4;
	add.s64 	%rd27, %rd3, %rd26;
	ld.global.u32 	%r77, [%rd27];
	add.s32 	%r63, %r77, -4;
	setp.lt.u32 	%p13, %r63, 31;
	@%p13 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_21;
$L__BB0_8:                              // %L457
	ld.param.u64 	%rd1, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	ld.param.u64 	%rd6, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	add.s32 	%r62, %r77, -3;
	or.b32  	%r79, %r4, %r2;
	setp.ne.s32 	%p1, %r79, 0;
	mul.wide.u32 	%rd30, %r1, 4;
	add.s64 	%rd8, %rd6, %rd30;
	mov.u32 	%r860, 0;
	@%p1 bra 	$L__BB0_10;
// %bb.9:                               // %L480
	st.global.u32 	[%rd8], %r860;
$L__BB0_10:                             // %L526
	ld.param.u64 	%rd2, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	ld.param.u64 	%rd4, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	bar.sync 	0;
	shl.b32 	%r210, %r1, 13;
	shr.u32 	%r5, %r4, 2;
	and.b32  	%r211, %r5, 6;
	and.b32  	%r212, %r60, 8;
	or.b32  	%r213, %r211, %r212;
	shl.b32 	%r214, %r213, 9;
	shl.b32 	%r215, %r2, 8;
	shl.b32 	%r216, %r4, 6;
	and.b32  	%r217, %r216, 64;
	shl.b32 	%r218, %r4, 3;
	and.b32  	%r219, %r218, 48;
	and.b32  	%r220, %r215, 256;
	or.b32  	%r221, %r220, %r217;
	or.b32  	%r222, %r221, %r219;
	or.b32  	%r223, %r222, %r210;
	or.b32  	%r224, %r223, %r214;
	cvt.u64.u32 	%rd31, %r224;
	add.s64 	%rd32, %rd1, %rd31;
	ld.global.v4.u32 	{%r82, %r83, %r90, %r91}, [%rd32];
	ld.global.v4.u32 	{%r98, %r99, %r106, %r107}, [%rd32+128];
	shl.b32 	%r225, %r1, 11;
	or.b32  	%r226, %r212, %r5;
	shl.b32 	%r227, %r226, 7;
	shl.b32 	%r228, %r2, 6;
	shl.b32 	%r229, %r4, 4;
	and.b32  	%r6, %r229, 16;
	shl.b32 	%r230, %r4, 1;
	and.b32  	%r231, %r230, 12;
	or.b32  	%r232, %r6, %r228;
	or.b32  	%r233, %r232, %r231;
	or.b32  	%r234, %r233, %r225;
	or.b32  	%r235, %r234, %r227;
	or.b32  	%r236, %r235, 128;
	mul.wide.u32 	%rd33, %r236, 4;
	add.s64 	%rd34, %rd1, %rd33;
	ld.global.v4.u32 	{%r114, %r115, %r122, %r123}, [%rd34];
	or.b32  	%r237, %r235, 160;
	mul.wide.u32 	%rd35, %r237, 4;
	add.s64 	%rd36, %rd1, %rd35;
	ld.global.v4.u32 	{%r130, %r131, %r138, %r139}, [%rd36];
	mov.u32 	%r84, 21520;
	// begin inline asm
	prmt.b32 %r146, %r82, %r83, %r84;
	// end inline asm
	mov.u32 	%r88, 30258;
	// begin inline asm
	prmt.b32 %r147, %r82, %r83, %r88;
	// end inline asm
	// begin inline asm
	prmt.b32 %r154, %r90, %r91, %r84;
	// end inline asm
	// begin inline asm
	prmt.b32 %r155, %r90, %r91, %r88;
	// end inline asm
	// begin inline asm
	prmt.b32 %r162, %r98, %r99, %r84;
	// end inline asm
	// begin inline asm
	prmt.b32 %r163, %r98, %r99, %r88;
	// end inline asm
	// begin inline asm
	prmt.b32 %r170, %r106, %r107, %r84;
	// end inline asm
	// begin inline asm
	prmt.b32 %r171, %r106, %r107, %r88;
	// end inline asm
	// begin inline asm
	prmt.b32 %r178, %r114, %r115, %r84;
	// end inline asm
	// begin inline asm
	prmt.b32 %r179, %r114, %r115, %r88;
	// end inline asm
	// begin inline asm
	prmt.b32 %r186, %r122, %r123, %r84;
	// end inline asm
	// begin inline asm
	prmt.b32 %r187, %r122, %r123, %r88;
	// end inline asm
	// begin inline asm
	prmt.b32 %r194, %r130, %r131, %r84;
	// end inline asm
	// begin inline asm
	prmt.b32 %r195, %r130, %r131, %r88;
	// end inline asm
	// begin inline asm
	prmt.b32 %r202, %r138, %r139, %r84;
	// end inline asm
	// begin inline asm
	prmt.b32 %r203, %r138, %r139, %r88;
	// end inline asm
	mov.u32 	%r148, 25152;
	// begin inline asm
	prmt.b32 %r145, %r146, %r147, %r148;
	// end inline asm
	mov.u32 	%r152, 29521;
	// begin inline asm
	prmt.b32 %r149, %r146, %r147, %r152;
	// end inline asm
	// begin inline asm
	prmt.b32 %r153, %r154, %r155, %r148;
	// end inline asm
	// begin inline asm
	prmt.b32 %r157, %r154, %r155, %r152;
	// end inline asm
	// begin inline asm
	prmt.b32 %r161, %r162, %r163, %r148;
	// end inline asm
	// begin inline asm
	prmt.b32 %r165, %r162, %r163, %r152;
	// end inline asm
	// begin inline asm
	prmt.b32 %r169, %r170, %r171, %r148;
	// end inline asm
	// begin inline asm
	prmt.b32 %r173, %r170, %r171, %r152;
	// end inline asm
	// begin inline asm
	prmt.b32 %r177, %r178, %r179, %r148;
	// end inline asm
	// begin inline asm
	prmt.b32 %r181, %r178, %r179, %r152;
	// end inline asm
	// begin inline asm
	prmt.b32 %r185, %r186, %r187, %r148;
	// end inline asm
	// begin inline asm
	prmt.b32 %r189, %r186, %r187, %r152;
	// end inline asm
	// begin inline asm
	prmt.b32 %r193, %r194, %r195, %r148;
	// end inline asm
	// begin inline asm
	prmt.b32 %r197, %r194, %r195, %r152;
	// end inline asm
	// begin inline asm
	prmt.b32 %r201, %r202, %r203, %r148;
	// end inline asm
	// begin inline asm
	prmt.b32 %r205, %r202, %r203, %r152;
	// end inline asm
	and.b32  	%r7, %r4, 2;
	setp.eq.s32 	%p15, %r7, 0;
	selp.b32 	%r238, %r161, %r145, %p15;
	shfl.sync.bfly.b32	%r239, %r238, 2, 31, -1;
	selp.b32 	%r240, %r145, %r239, %p15;
	selp.b32 	%r241, %r239, %r161, %p15;
	selp.b32 	%r242, %r165, %r149, %p15;
	shfl.sync.bfly.b32	%r243, %r242, 2, 31, -1;
	selp.b32 	%r244, %r149, %r243, %p15;
	selp.b32 	%r245, %r243, %r165, %p15;
	selp.b32 	%r246, %r169, %r153, %p15;
	shfl.sync.bfly.b32	%r247, %r246, 2, 31, -1;
	selp.b32 	%r248, %r153, %r247, %p15;
	selp.b32 	%r249, %r247, %r169, %p15;
	selp.b32 	%r250, %r173, %r157, %p15;
	shfl.sync.bfly.b32	%r251, %r250, 2, 31, -1;
	selp.b32 	%r252, %r157, %r251, %p15;
	selp.b32 	%r253, %r251, %r173, %p15;
	selp.b32 	%r254, %r193, %r177, %p15;
	shfl.sync.bfly.b32	%r255, %r254, 2, 31, -1;
	selp.b32 	%r256, %r177, %r255, %p15;
	selp.b32 	%r257, %r255, %r193, %p15;
	selp.b32 	%r258, %r197, %r181, %p15;
	shfl.sync.bfly.b32	%r259, %r258, 2, 31, -1;
	selp.b32 	%r260, %r181, %r259, %p15;
	selp.b32 	%r261, %r259, %r197, %p15;
	selp.b32 	%r262, %r201, %r185, %p15;
	shfl.sync.bfly.b32	%r263, %r262, 2, 31, -1;
	selp.b32 	%r264, %r185, %r263, %p15;
	selp.b32 	%r265, %r263, %r201, %p15;
	selp.b32 	%r266, %r205, %r189, %p15;
	shfl.sync.bfly.b32	%r267, %r266, 2, 31, -1;
	selp.b32 	%r268, %r189, %r267, %p15;
	selp.b32 	%r269, %r267, %r205, %p15;
	and.b32  	%r8, %r4, 4;
	setp.eq.s32 	%p16, %r8, 0;
	selp.b32 	%r270, %r256, %r240, %p16;
	shfl.sync.bfly.b32	%r271, %r270, 4, 31, -1;
	selp.b32 	%r420, %r240, %r271, %p16;
	selp.b32 	%r548, %r271, %r256, %p16;
	selp.b32 	%r272, %r260, %r244, %p16;
	shfl.sync.bfly.b32	%r273, %r272, 4, 31, -1;
	selp.b32 	%r426, %r244, %r273, %p16;
	selp.b32 	%r554, %r273, %r260, %p16;
	selp.b32 	%r274, %r264, %r248, %p16;
	shfl.sync.bfly.b32	%r275, %r274, 4, 31, -1;
	selp.b32 	%r452, %r248, %r275, %p16;
	selp.b32 	%r580, %r275, %r264, %p16;
	selp.b32 	%r276, %r268, %r252, %p16;
	shfl.sync.bfly.b32	%r277, %r276, 4, 31, -1;
	selp.b32 	%r458, %r252, %r277, %p16;
	selp.b32 	%r586, %r277, %r268, %p16;
	selp.b32 	%r278, %r257, %r241, %p16;
	shfl.sync.bfly.b32	%r279, %r278, 4, 31, -1;
	selp.b32 	%r484, %r241, %r279, %p16;
	selp.b32 	%r612, %r279, %r257, %p16;
	selp.b32 	%r280, %r261, %r245, %p16;
	shfl.sync.bfly.b32	%r281, %r280, 4, 31, -1;
	selp.b32 	%r490, %r245, %r281, %p16;
	selp.b32 	%r618, %r281, %r261, %p16;
	selp.b32 	%r282, %r265, %r249, %p16;
	shfl.sync.bfly.b32	%r283, %r282, 4, 31, -1;
	selp.b32 	%r516, %r249, %r283, %p16;
	selp.b32 	%r644, %r283, %r265, %p16;
	selp.b32 	%r284, %r269, %r253, %p16;
	shfl.sync.bfly.b32	%r285, %r284, 4, 31, -1;
	selp.b32 	%r522, %r253, %r285, %p16;
	selp.b32 	%r650, %r285, %r269, %p16;
	shl.b32 	%r286, %r65, 13;
	shl.b32 	%r287, %r1, 6;
	shl.b32 	%r288, %r4, 2;
	and.b32  	%r289, %r288, 28;
	and.b32  	%r290, %r3, 32;
	shl.b32 	%r291, %r2, 1;
	and.b32  	%r292, %r291, 4;
	or.b32  	%r25, %r59, %r292;
	or.b32  	%r293, %r289, %r290;
	or.b32  	%r294, %r293, %r287;
	or.b32  	%r26, %r294, %r286;
	and.b32  	%r295, %r218, 24;
	or.b32  	%r27, %r295, %r290;
	and.b32  	%r296, %r2, 1;
	neg.s32 	%r297, %r296;
	and.b32  	%r298, %r297, 640;
	and.b32  	%r28, %r230, 6;
	or.b32  	%r29, %r226, %r298;
	and.b32  	%r299, %r4, 7;
	or.b32  	%r300, %r61, 640;
	shl.b32 	%r302, %r72, %r63;
	setp.gt.u32 	%p17, %r63, 31;
	selp.b32 	%r30, 0, %r302, %p17;
	min.u32 	%r31, %r62, 31;
	and.b32  	%r32, %r4, 1;
	and.b32  	%r303, %r218, 32;
	shl.b32 	%r304, %r4, 5;
	and.b32  	%r305, %r304, 64;
	or.b32  	%r33, %r303, %r305;
	shl.b32 	%r306, %r1, 14;
	shl.b32 	%r307, %r2, 23;
	shl.b32 	%r308, %r4, 18;
	and.b32  	%r309, %r308, 6291456;
	or.b32  	%r310, %r309, %r307;
	or.b32  	%r34, %r310, %r306;
	mul.lo.s32 	%r311, %r25, 65;
	add.s32 	%r312, %r293, %r311;
	mul.wide.u32 	%rd37, %r312, 4;
	mov.u64 	%rd38, shmem;
	add.s64 	%rd9, %rd38, %rd37;
	cvt.u64.u32 	%rd39, %r311;
	cvt.u64.u32 	%rd10, %r293;
	add.s64 	%rd40, %rd10, %rd39;
	shl.b64 	%rd41, %rd40, 2;
	add.s64 	%rd11, %rd38, %rd41;
	mul.lo.s32 	%r313, %r299, 20;
	add.s32 	%r314, %r313, %r61;
	mul.wide.u32 	%rd42, %r314, 4;
	add.s64 	%rd43, %rd38, 8320;
	add.s64 	%rd12, %rd43, %rd42;
	add.s32 	%r315, %r313, %r300;
	mul.wide.u32 	%rd44, %r315, 4;
	add.s64 	%rd13, %rd43, %rd44;
	add.s32 	%r316, %r313, 160;
	add.s32 	%r317, %r316, %r61;
	mul.wide.u32 	%rd45, %r317, 4;
	add.s64 	%rd14, %rd43, %rd45;
	add.s32 	%r318, %r316, %r300;
	mul.wide.u32 	%rd46, %r318, 4;
	add.s64 	%rd15, %rd43, %rd46;
	add.s32 	%r319, %r313, 320;
	add.s32 	%r320, %r319, %r61;
	mul.wide.u32 	%rd47, %r320, 4;
	add.s64 	%rd16, %rd43, %rd47;
	add.s32 	%r321, %r319, %r300;
	mul.wide.u32 	%rd48, %r321, 4;
	add.s64 	%rd17, %rd43, %rd48;
	or.b32  	%r322, %r4, 24;
	mul.lo.s32 	%r323, %r322, 20;
	add.s32 	%r324, %r323, %r61;
	mul.wide.u32 	%rd49, %r324, 4;
	add.s64 	%rd18, %rd43, %rd49;
	add.s32 	%r325, %r323, %r300;
	mul.wide.u32 	%rd50, %r325, 4;
	add.s64 	%rd19, %rd43, %rd50;
	mov.pred 	%p59, 0;
$L__BB0_11:                             // %L1558
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_13 Depth 2
                                        //       Child Loop BB0_14 Depth 3
	add.s32 	%r326, %r860, %r65;
	setp.ge.s32 	%p18, %r326, %r66;
	@%p18 bra 	$L__BB0_17;
// %bb.12:                              // %L1566.preheader
                                        //   in Loop: Header=BB0_11 Depth=1
	or.b32  	%r36, %r860, %r25;
	or.b32  	%r37, %r36, 8;
	or.b32  	%r38, %r36, 16;
	or.b32  	%r39, %r36, 24;
	mov.u32 	%r422, 0;
	mov.u32 	%r861, %r422;
	mov.u32 	%r862, %r422;
	mov.u32 	%r863, %r422;
	mov.u32 	%r864, %r422;
	mov.u32 	%r865, %r422;
	mov.u32 	%r866, %r422;
	mov.u32 	%r867, %r422;
$L__BB0_13:                             // %L1566
                                        //   Parent Loop BB0_11 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_14 Depth 3
	cvt.u32.u64 	%r329, %rd10;
	add.s32 	%r330, %r36, %r861;
	shl.b32 	%r331, %r330, 13;
	add.s32 	%r332, %r26, %r331;
	shr.s32 	%r333, %r332, 31;
	shr.u32 	%r334, %r333, 3;
	add.s32 	%r335, %r332, %r334;
	shr.s32 	%r336, %r335, 29;
	setp.lt.s32 	%p19, %r332, 0;
	and.b32  	%r337, %r335, -536870912;
	setp.ne.s32 	%p20, %r337, %r332;
	and.pred  	%p21, %p19, %p20;
	selp.u32 	%r338, 1, 0, %p21;
	sub.s32 	%r339, %r338, %r336;
	shl.b32 	%r340, %r339, 29;
	or.b32  	%r341, %r332, 1;
	add.s32 	%r342, %r341, %r340;
	mul.wide.s32 	%rd51, %r342, 4;
	add.s64 	%rd52, %rd2, %rd51;
	ld.global.v4.u32 	{%r343, %r344, %r345, %r346}, [%rd52+-4];
	add.s32 	%r347, %r861, %r37;
	shl.b32 	%r348, %r347, 13;
	and.b32  	%r349, %r348, 536862720;
	add.s32 	%r350, %r26, %r349;
	shr.s32 	%r351, %r350, 31;
	shr.u32 	%r352, %r351, 3;
	add.s32 	%r353, %r350, %r352;
	shr.s32 	%r354, %r353, 29;
	setp.lt.s32 	%p22, %r350, 0;
	and.b32  	%r355, %r353, -536870912;
	setp.ne.s32 	%p23, %r355, %r350;
	and.pred  	%p24, %p22, %p23;
	selp.u32 	%r356, 1, 0, %p24;
	sub.s32 	%r357, %r356, %r354;
	shl.b32 	%r358, %r357, 29;
	or.b32  	%r359, %r350, 1;
	add.s32 	%r360, %r359, %r358;
	mul.wide.s32 	%rd53, %r360, 4;
	add.s64 	%rd54, %rd2, %rd53;
	ld.global.v4.u32 	{%r361, %r362, %r363, %r364}, [%rd54+-4];
	add.s32 	%r365, %r861, %r38;
	shl.b32 	%r366, %r365, 13;
	and.b32  	%r367, %r366, 536862720;
	add.s32 	%r368, %r26, %r367;
	shr.s32 	%r369, %r368, 31;
	shr.u32 	%r370, %r369, 3;
	add.s32 	%r371, %r368, %r370;
	shr.s32 	%r372, %r371, 29;
	setp.lt.s32 	%p25, %r368, 0;
	and.b32  	%r373, %r371, -536870912;
	setp.ne.s32 	%p26, %r373, %r368;
	and.pred  	%p27, %p25, %p26;
	selp.u32 	%r374, 1, 0, %p27;
	sub.s32 	%r375, %r374, %r372;
	shl.b32 	%r376, %r375, 29;
	or.b32  	%r377, %r368, 1;
	add.s32 	%r378, %r377, %r376;
	mul.wide.s32 	%rd55, %r378, 4;
	add.s64 	%rd56, %rd2, %rd55;
	ld.global.v4.u32 	{%r379, %r380, %r381, %r382}, [%rd56+-4];
	add.s32 	%r383, %r861, %r39;
	shl.b32 	%r384, %r383, 13;
	and.b32  	%r385, %r384, 536862720;
	add.s32 	%r386, %r26, %r385;
	shr.s32 	%r387, %r386, 31;
	shr.u32 	%r388, %r387, 3;
	add.s32 	%r389, %r386, %r388;
	shr.s32 	%r390, %r389, 29;
	setp.lt.s32 	%p28, %r386, 0;
	and.b32  	%r391, %r389, -536870912;
	setp.ne.s32 	%p29, %r391, %r386;
	and.pred  	%p30, %p28, %p29;
	selp.u32 	%r392, 1, 0, %p30;
	sub.s32 	%r393, %r392, %r390;
	shl.b32 	%r394, %r393, 29;
	or.b32  	%r395, %r386, 1;
	add.s32 	%r396, %r395, %r394;
	mul.wide.s32 	%rd57, %r396, 4;
	add.s64 	%rd58, %rd2, %rd57;
	ld.global.v4.u32 	{%r397, %r398, %r399, %r400}, [%rd58+-4];
	st.shared.u32 	[%rd9], %r343;
	st.shared.u32 	[%rd11+4], %r344;
	st.shared.u32 	[%rd11+8], %r345;
	st.shared.u32 	[%rd11+12], %r346;
	and.b32  	%r401, %r347, 31;
	mul.lo.s32 	%r402, %r401, 65;
	add.s32 	%r403, %r329, %r402;
	mul.wide.u32 	%rd59, %r403, 4;
	add.s64 	%rd61, %rd38, %rd59;
	st.shared.u32 	[%rd61], %r361;
	cvt.u64.u32 	%rd62, %r402;
	add.s64 	%rd63, %rd10, %rd62;
	shl.b64 	%rd64, %rd63, 2;
	add.s64 	%rd65, %rd38, %rd64;
	st.shared.u32 	[%rd65+4], %r362;
	st.shared.u32 	[%rd65+8], %r363;
	st.shared.u32 	[%rd65+12], %r364;
	and.b32  	%r404, %r365, 31;
	mul.lo.s32 	%r405, %r404, 65;
	add.s32 	%r406, %r329, %r405;
	mul.wide.u32 	%rd66, %r406, 4;
	add.s64 	%rd67, %rd38, %rd66;
	st.shared.u32 	[%rd67], %r379;
	cvt.u64.u32 	%rd68, %r405;
	add.s64 	%rd69, %rd10, %rd68;
	shl.b64 	%rd70, %rd69, 2;
	add.s64 	%rd71, %rd38, %rd70;
	st.shared.u32 	[%rd71+4], %r380;
	st.shared.u32 	[%rd71+8], %r381;
	st.shared.u32 	[%rd71+12], %r382;
	and.b32  	%r407, %r383, 31;
	mul.lo.s32 	%r408, %r407, 65;
	add.s32 	%r409, %r329, %r408;
	mul.wide.u32 	%rd72, %r409, 4;
	add.s64 	%rd73, %rd38, %rd72;
	st.shared.u32 	[%rd73], %r397;
	cvt.u64.u32 	%rd74, %r408;
	add.s64 	%rd75, %rd10, %rd74;
	shl.b64 	%rd76, %rd75, 2;
	add.s64 	%rd77, %rd38, %rd76;
	st.shared.u32 	[%rd77+4], %r398;
	st.shared.u32 	[%rd77+8], %r399;
	st.shared.u32 	[%rd77+12], %r400;
	bar.sync 	0;
	add.s32 	%r47, %r861, %r860;
	mov.u32 	%r868, %r422;
$L__BB0_14:                             // %L4970
                                        //   Parent Loop BB0_11 Depth=1
                                        //     Parent Loop BB0_13 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r672, %r868, %r5;
	add.s32 	%r673, %r47, %r672;
	shr.s32 	%r674, %r673, 31;
	shr.u32 	%r675, %r674, 27;
	add.s32 	%r676, %r673, %r675;
	and.b32  	%r677, %r676, -32;
	sub.s32 	%r678, %r673, %r677;
	mad.lo.s32 	%r679, %r678, 65, %r27;
	mul.wide.s32 	%rd78, %r679, 4;
	add.s64 	%rd80, %rd38, %rd78;
	ld.shared.u32 	%r411, [%rd80];
	mov.u32 	%r412, 134744072;
	mov.u32 	%r413, 252645135;
	// begin inline asm
	lop3.b32 %r410, %r411, %r412, %r413, 40;
	// end inline asm
	add.s32 	%r680, %r410, 2021161080;
	xor.b32  	%r421, %r680, -2139062144;
	shr.u32 	%r415, %r411, 4;
	// begin inline asm
	lop3.b32 %r414, %r415, %r412, %r413, 40;
	// end inline asm
	add.s32 	%r681, %r414, 2021161080;
	xor.b32  	%r427, %r681, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r418, %r419}, {%r420}, {%r421}, {%r422, %r422};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r424, %r425}, {%r426}, {%r427}, {%r422, %r422};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r430, %r431}, {%r420}, {%r427}, {%r422, %r422};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r436, %r437}, {%r426}, {%r421}, {%r430, %r431};
	// end inline asm
	ld.shared.u32 	%r443, [%rd80+4];
	// begin inline asm
	lop3.b32 %r442, %r443, %r412, %r413, 40;
	// end inline asm
	add.s32 	%r682, %r442, 2021161080;
	xor.b32  	%r453, %r682, -2139062144;
	shr.u32 	%r447, %r443, 4;
	// begin inline asm
	lop3.b32 %r446, %r447, %r412, %r413, 40;
	// end inline asm
	add.s32 	%r683, %r446, 2021161080;
	xor.b32  	%r459, %r683, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r450, %r451}, {%r452}, {%r453}, {%r418, %r419};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r456, %r457}, {%r458}, {%r459}, {%r424, %r425};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r462, %r463}, {%r452}, {%r459}, {%r436, %r437};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r468, %r469}, {%r458}, {%r453}, {%r462, %r463};
	// end inline asm
	ld.shared.u32 	%r475, [%rd80+8];
	// begin inline asm
	lop3.b32 %r474, %r475, %r412, %r413, 40;
	// end inline asm
	add.s32 	%r684, %r474, 2021161080;
	xor.b32  	%r485, %r684, -2139062144;
	shr.u32 	%r479, %r475, 4;
	// begin inline asm
	lop3.b32 %r478, %r479, %r412, %r413, 40;
	// end inline asm
	add.s32 	%r685, %r478, 2021161080;
	xor.b32  	%r491, %r685, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r482, %r483}, {%r484}, {%r485}, {%r450, %r451};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r488, %r489}, {%r490}, {%r491}, {%r456, %r457};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r494, %r495}, {%r484}, {%r491}, {%r468, %r469};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r500, %r501}, {%r490}, {%r485}, {%r494, %r495};
	// end inline asm
	ld.shared.u32 	%r507, [%rd80+12];
	// begin inline asm
	lop3.b32 %r506, %r507, %r412, %r413, 40;
	// end inline asm
	add.s32 	%r686, %r506, 2021161080;
	xor.b32  	%r517, %r686, -2139062144;
	shr.u32 	%r511, %r507, 4;
	// begin inline asm
	lop3.b32 %r510, %r511, %r412, %r413, 40;
	// end inline asm
	add.s32 	%r687, %r510, 2021161080;
	xor.b32  	%r523, %r687, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r514, %r515}, {%r516}, {%r517}, {%r482, %r483};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r520, %r521}, {%r522}, {%r523}, {%r488, %r489};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r526, %r527}, {%r516}, {%r523}, {%r500, %r501};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r532, %r533}, {%r522}, {%r517}, {%r526, %r527};
	// end inline asm
	ld.shared.u32 	%r539, [%rd80+16];
	// begin inline asm
	lop3.b32 %r538, %r539, %r412, %r413, 40;
	// end inline asm
	add.s32 	%r688, %r538, 2021161080;
	xor.b32  	%r549, %r688, -2139062144;
	shr.u32 	%r543, %r539, 4;
	// begin inline asm
	lop3.b32 %r542, %r543, %r412, %r413, 40;
	// end inline asm
	add.s32 	%r689, %r542, 2021161080;
	xor.b32  	%r555, %r689, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r546, %r547}, {%r548}, {%r549}, {%r514, %r515};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r552, %r553}, {%r554}, {%r555}, {%r520, %r521};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r558, %r559}, {%r548}, {%r555}, {%r532, %r533};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r564, %r565}, {%r554}, {%r549}, {%r558, %r559};
	// end inline asm
	ld.shared.u32 	%r571, [%rd80+20];
	// begin inline asm
	lop3.b32 %r570, %r571, %r412, %r413, 40;
	// end inline asm
	add.s32 	%r690, %r570, 2021161080;
	xor.b32  	%r581, %r690, -2139062144;
	shr.u32 	%r575, %r571, 4;
	// begin inline asm
	lop3.b32 %r574, %r575, %r412, %r413, 40;
	// end inline asm
	add.s32 	%r691, %r574, 2021161080;
	xor.b32  	%r587, %r691, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r578, %r579}, {%r580}, {%r581}, {%r546, %r547};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r584, %r585}, {%r586}, {%r587}, {%r552, %r553};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r590, %r591}, {%r580}, {%r587}, {%r564, %r565};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r596, %r597}, {%r586}, {%r581}, {%r590, %r591};
	// end inline asm
	ld.shared.u32 	%r603, [%rd80+24];
	// begin inline asm
	lop3.b32 %r602, %r603, %r412, %r413, 40;
	// end inline asm
	add.s32 	%r692, %r602, 2021161080;
	xor.b32  	%r613, %r692, -2139062144;
	shr.u32 	%r607, %r603, 4;
	// begin inline asm
	lop3.b32 %r606, %r607, %r412, %r413, 40;
	// end inline asm
	add.s32 	%r693, %r606, 2021161080;
	xor.b32  	%r619, %r693, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r610, %r611}, {%r612}, {%r613}, {%r578, %r579};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r616, %r617}, {%r618}, {%r619}, {%r584, %r585};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r622, %r623}, {%r612}, {%r619}, {%r596, %r597};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r628, %r629}, {%r618}, {%r613}, {%r622, %r623};
	// end inline asm
	ld.shared.u32 	%r635, [%rd80+28];
	// begin inline asm
	lop3.b32 %r634, %r635, %r412, %r413, 40;
	// end inline asm
	add.s32 	%r694, %r634, 2021161080;
	xor.b32  	%r645, %r694, -2139062144;
	shr.u32 	%r639, %r635, 4;
	// begin inline asm
	lop3.b32 %r638, %r639, %r412, %r413, 40;
	// end inline asm
	add.s32 	%r695, %r638, 2021161080;
	xor.b32  	%r651, %r695, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r642, %r643}, {%r644}, {%r645}, {%r610, %r611};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r648, %r649}, {%r650}, {%r651}, {%r616, %r617};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r654, %r655}, {%r644}, {%r651}, {%r628, %r629};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r660, %r661}, {%r650}, {%r645}, {%r654, %r655};
	// end inline asm
	sub.s32 	%r696, %r642, %r648;
	add.s32 	%r697, %r696, 4;
	shr.s32 	%r668, %r697, 3;
	add.s32 	%r698, %r660, 4;
	shr.s32 	%r667, %r698, 3;
	sub.s32 	%r699, %r643, %r649;
	add.s32 	%r700, %r699, 4;
	shr.s32 	%r671, %r700, 3;
	add.s32 	%r701, %r661, 4;
	shr.s32 	%r670, %r701, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r666, %r667, %r668;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r669, %r670, %r671;
	// end inline asm
	or.b32  	%r702, %r28, %r868;
	mad.lo.s32 	%r703, %r702, 20, %r29;
	mul.wide.u32 	%rd81, %r703, 4;
	add.s64 	%rd82, %rd38, %rd81;
	st.shared.u32 	[%rd82+8320], %r666;
	st.shared.u32 	[%rd82+8400], %r669;
	add.s32 	%r868, %r868, 8;
	setp.ne.s32 	%p31, %r868, 32;
	@%p31 bra 	$L__BB0_14;
// %bb.15:                              // %L6837
                                        //   in Loop: Header=BB0_13 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r722, [%rd12];
	ld.shared.u32 	%r723, [%rd13];
	ld.shared.u32 	%r724, [%rd14];
	ld.shared.u32 	%r725, [%rd15];
	ld.shared.u32 	%r726, [%rd16];
	ld.shared.u32 	%r727, [%rd17];
	ld.shared.u32 	%r728, [%rd18];
	ld.shared.u32 	%r729, [%rd19];
	cvt.s32.s16 	%r730, %r722;
	shr.s32 	%r731, %r722, 16;
	cvt.s32.s16 	%r732, %r723;
	shr.s32 	%r733, %r723, 16;
	cvt.s32.s16 	%r734, %r724;
	shr.s32 	%r735, %r724, 16;
	cvt.s32.s16 	%r736, %r725;
	shr.s32 	%r737, %r725, 16;
	cvt.s32.s16 	%r738, %r726;
	shr.s32 	%r739, %r726, 16;
	cvt.s32.s16 	%r740, %r727;
	shr.s32 	%r741, %r727, 16;
	cvt.s32.s16 	%r742, %r728;
	shr.s32 	%r743, %r728, 16;
	cvt.s32.s16 	%r744, %r729;
	shr.s32 	%r745, %r729, 16;
	add.s32 	%r746, %r730, %r30;
	add.s32 	%r747, %r746, %r732;
	shr.s32 	%r748, %r747, %r31;
	add.s32 	%r749, %r731, %r30;
	add.s32 	%r750, %r749, %r733;
	shr.s32 	%r751, %r750, %r31;
	add.s32 	%r752, %r734, %r30;
	add.s32 	%r753, %r752, %r736;
	shr.s32 	%r754, %r753, %r31;
	add.s32 	%r755, %r735, %r30;
	add.s32 	%r756, %r755, %r737;
	shr.s32 	%r757, %r756, %r31;
	add.s32 	%r758, %r738, %r30;
	add.s32 	%r759, %r758, %r740;
	shr.s32 	%r760, %r759, %r31;
	add.s32 	%r761, %r739, %r30;
	add.s32 	%r762, %r761, %r741;
	shr.s32 	%r763, %r762, %r31;
	add.s32 	%r764, %r742, %r30;
	add.s32 	%r765, %r764, %r744;
	shr.s32 	%r766, %r765, %r31;
	add.s32 	%r767, %r743, %r30;
	add.s32 	%r768, %r767, %r745;
	shr.s32 	%r769, %r768, %r31;
	max.s32 	%r770, %r748, -7;
	min.s32 	%r709, %r770, 7;
	setp.ne.s32 	%p32, %r709, %r748;
	or.pred  	%p33, %p59, %p32;
	max.s32 	%r771, %r751, -7;
	min.s32 	%r716, %r771, 7;
	setp.ne.s32 	%p34, %r716, %r751;
	or.pred  	%p35, %p34, %p33;
	max.s32 	%r772, %r754, -7;
	min.s32 	%r708, %r772, 7;
	setp.ne.s32 	%p36, %r708, %r754;
	or.pred  	%p37, %p35, %p36;
	max.s32 	%r773, %r757, -7;
	min.s32 	%r715, %r773, 7;
	setp.ne.s32 	%p38, %r715, %r757;
	or.pred  	%p39, %p38, %p37;
	max.s32 	%r774, %r760, -7;
	min.s32 	%r706, %r774, 7;
	setp.ne.s32 	%p40, %r706, %r760;
	or.pred  	%p41, %p39, %p40;
	max.s32 	%r775, %r763, -7;
	min.s32 	%r713, %r775, 7;
	setp.ne.s32 	%p42, %r713, %r763;
	or.pred  	%p43, %p42, %p41;
	max.s32 	%r776, %r766, -7;
	min.s32 	%r705, %r776, 7;
	setp.ne.s32 	%p44, %r705, %r766;
	or.pred  	%p45, %p43, %p44;
	max.s32 	%r777, %r769, -7;
	min.s32 	%r712, %r777, 7;
	setp.ne.s32 	%p46, %r712, %r769;
	or.pred  	%p59, %p46, %p45;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r704, %r705, %r706, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r707, %r708, %r709, %r704;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r711, %r712, %r713, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r714, %r715, %r716, %r711;
	// end inline asm
	shl.b32 	%r721, %r714, 4;
	// begin inline asm
	lop3.b32 %r788, %r413, %r707, %r721, 202;
	// end inline asm
	setp.eq.s32 	%p47, %r861, 0;
	selp.b32 	%r866, %r788, %r866, %p47;
	selp.b32 	%r867, %r788, %r867, %p47;
	setp.eq.s32 	%p48, %r861, 32;
	selp.b32 	%r862, %r788, %r862, %p48;
	selp.b32 	%r863, %r788, %r863, %p48;
	setp.eq.s32 	%p49, %r861, 64;
	selp.b32 	%r864, %r788, %r864, %p49;
	selp.b32 	%r865, %r788, %r865, %p49;
	add.s32 	%r57, %r861, 32;
	setp.ne.s32 	%p50, %r861, 96;
	mov.u32 	%r861, %r57;
	@%p50 bra 	$L__BB0_13;
// %bb.16:                              // %L8115.L8121_crit_edge
                                        //   in Loop: Header=BB0_11 Depth=1
	setp.eq.s32 	%p51, %r32, 0;
	// begin inline asm
	prmt.b32 %r778, %r866, %r862, %r148;
	// end inline asm
	// begin inline asm
	prmt.b32 %r782, %r867, %r863, %r152;
	// end inline asm
	// begin inline asm
	prmt.b32 %r786, %r864, %r788, %r148;
	// end inline asm
	// begin inline asm
	prmt.b32 %r790, %r865, %r788, %r152;
	// end inline asm
	selp.b32 	%r826, %r782, %r778, %p51;
	shfl.sync.bfly.b32	%r827, %r826, 1, 31, -1;
	selp.b32 	%r795, %r778, %r827, %p51;
	selp.b32 	%r796, %r827, %r782, %p51;
	selp.b32 	%r828, %r790, %r786, %p51;
	shfl.sync.bfly.b32	%r829, %r828, 1, 31, -1;
	selp.b32 	%r803, %r786, %r829, %p51;
	selp.b32 	%r804, %r829, %r790, %p51;
	// begin inline asm
	prmt.b32 %r794, %r795, %r796, %r148;
	// end inline asm
	// begin inline asm
	prmt.b32 %r798, %r795, %r796, %r152;
	// end inline asm
	// begin inline asm
	prmt.b32 %r802, %r803, %r804, %r148;
	// end inline asm
	// begin inline asm
	prmt.b32 %r806, %r803, %r804, %r152;
	// end inline asm
	selp.b32 	%r830, %r802, %r794, %p15;
	shfl.sync.bfly.b32	%r831, %r830, 2, 31, -1;
	selp.b32 	%r811, %r794, %r831, %p15;
	selp.b32 	%r812, %r831, %r802, %p15;
	selp.b32 	%r832, %r806, %r798, %p15;
	shfl.sync.bfly.b32	%r833, %r832, 2, 31, -1;
	selp.b32 	%r819, %r798, %r833, %p15;
	selp.b32 	%r820, %r833, %r806, %p15;
	// begin inline asm
	prmt.b32 %r810, %r811, %r812, %r84;
	// end inline asm
	// begin inline asm
	prmt.b32 %r814, %r811, %r812, %r88;
	// end inline asm
	// begin inline asm
	prmt.b32 %r818, %r819, %r820, %r84;
	// end inline asm
	// begin inline asm
	prmt.b32 %r822, %r819, %r820, %r88;
	// end inline asm
	selp.b32 	%r834, %r818, %r810, %p16;
	shfl.sync.bfly.b32	%r835, %r834, 4, 31, -1;
	selp.b32 	%r836, %r810, %r835, %p16;
	selp.b32 	%r837, %r835, %r818, %p16;
	selp.b32 	%r838, %r822, %r814, %p16;
	shfl.sync.bfly.b32	%r839, %r838, 4, 31, -1;
	selp.b32 	%r840, %r814, %r839, %p16;
	selp.b32 	%r841, %r839, %r822, %p16;
	selp.b32 	%r842, %r840, %r836, %p51;
	shfl.sync.bfly.b32	%r843, %r842, 1, 31, -1;
	selp.b32 	%r844, %r836, %r843, %p51;
	selp.b32 	%r845, %r843, %r840, %p51;
	selp.b32 	%r846, %r841, %r837, %p51;
	shfl.sync.bfly.b32	%r847, %r846, 1, 31, -1;
	selp.b32 	%r848, %r837, %r847, %p51;
	selp.b32 	%r849, %r847, %r841, %p51;
	and.b32  	%r850, %r860, 16256;
	or.b32  	%r851, %r850, %r33;
	or.b32  	%r852, %r851, %r6;
	or.b32  	%r853, %r34, %r852;
	cvt.u64.u32 	%rd83, %r853;
	add.s64 	%rd84, %rd4, %rd83;
	st.global.v4.u32 	[%rd84], {%r844, %r848, %r845, %r849};
	add.s32 	%r58, %r860, 128;
	setp.ne.s32 	%p54, %r860, 65408;
	mov.u32 	%r860, %r58;
	@%p54 bra 	$L__BB0_11;
$L__BB0_17:                             // %L8501
	selp.u32 	%r854, 1, 0, %p59;
	{ 
	.reg .pred 	%p1; 
	.reg .pred 	%p2; 
	setp.ne.u32 	%p1, %r854, 0; 
	bar.red.or.pred 	%p2, 0, %p1; 
	selp.u32 	%r855, 1, 0, %p2; 
	}
	setp.eq.s32 	%p55, %r855, 0;
	or.pred  	%p56, %p55, %p1;
	@%p56 bra 	$L__BB0_19;
// %bb.18:                              // %L8531
	st.global.u32 	[%rd8], %r72;
$L__BB0_19:                             // %L8577
	mov.u32 	%r857, 0;
	st.global.u32 	[%rd7], %r857;
	ret;
$L__BB0_7:                              // %L149
	mov.u32 	%r858, 2;
	st.global.u32 	[%rd7], %r858;
	mov.u64 	%rd85, exception716;
	cvta.global.u64 	%rd86, %rd85;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd86;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd20;
	st.param.b32 	[param0+8], %r64;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd21, exception1;
	cvta.global.u64 	%rd22, %rd21;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd22;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd20;
	st.param.b32 	[param0+8], %r64;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L24
	mov.u64 	%rd23, exception1;
	cvta.global.u64 	%rd24, %rd23;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd24;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd20;
	st.param.b32 	[param0+8], %r64;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_21:                             // %L365
	mov.u32 	%r78, 3;
	st.global.u32 	[%rd7], %r78;
	mov.u64 	%rd28, exception716;
	cvta.global.u64 	%rd29, %rd28;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd29;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd20;
	st.param.b32 	[param0+8], %r64;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
