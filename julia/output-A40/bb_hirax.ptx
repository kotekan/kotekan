// PTX kernel code for CUDA baseband beamformer
// This file has been generated automatically by `bb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for bb(::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=128, blocks_per_sm=8

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE // -- Begin function _Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception761[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.visible .entry _Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7[32]
)
.reqntid 128, 1, 1
.minnctapersm 8
{
	.reg .pred 	%p<33>;
	.reg .b32 	%r<873>;
	.reg .b64 	%rd<88>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r64, [_Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd17, [_Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r65, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r65, 8319;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r66, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r66, 13439;
	@%p2 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L26
	ld.param.u64 	%rd1, [_Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1];
	ld.param.u64 	%rd7, [_Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %ctaid.x;
	shl.b32 	%r4, %r3, 7;
	mov.u32 	%r5, %tid.x;
	or.b32  	%r67, %r4, %r5;
	or.b32  	%r68, %r67, %r2;
	mul.wide.u32 	%rd22, %r68, 4;
	add.s64 	%rd8, %rd7, %rd22;
	mov.u32 	%r69, 1;
	st.global.u32 	[%rd8], %r69;
	ld.global.u32 	%r6, [%rd1];
	setp.lt.s32 	%p3, %r6, 0;
	@%p3 bra 	$L__BB0_7;
// %bb.5:                               // %L172
	ld.param.u64 	%rd2, [_Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2];
	ld.global.u32 	%r7, [%rd2];
	setp.lt.s32 	%p4, %r7, %r6;
	setp.gt.s32 	%p5, %r7, 16384;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_7;
// %bb.6:                               // %L182
	sub.s32 	%r70, %r7, %r6;
	and.b32  	%r71, %r70, 127;
	setp.eq.s32 	%p7, %r71, 0;
	@%p7 bra 	$L__BB0_16;
	bra.uni 	$L__BB0_7;
$L__BB0_16:                             // %pass100
	ld.param.u64 	%rd5, [_Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5];
	shr.u32 	%r27, %r5, 3;
	shl.b32 	%r28, %r1, 2;
	or.b32  	%r29, %r27, %r28;
	and.b32  	%r72, %r3, 2032;
	or.b32  	%r73, %r29, %r72;
	mul.wide.u32 	%rd23, %r73, 4;
	add.s64 	%rd24, %rd5, %rd23;
	ld.global.u32 	%r30, [%rd24];
	add.s32 	%r31, %r30, -4;
	setp.gt.u32 	%p8, %r31, 30;
	@%p8 bra 	$L__BB0_8;
// %bb.17:                              // %pass203
	ld.param.u64 	%rd3, [_Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3];
	ld.param.u64 	%rd4, [_Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4];
	ld.param.u64 	%rd6, [_Z2bb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_I6Int8x4Li1ELi1EES_I6Int4x8Li1ELi1EES_IS0_Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6];
	add.s32 	%r204, %r30, -3;
	shr.u32 	%r32, %r5, 2;
	and.b32  	%r205, %r32, 6;
	and.b32  	%r206, %r28, 8;
	or.b32  	%r207, %r205, %r206;
	shl.b32 	%r208, %r207, 9;
	shl.b32 	%r209, %r1, 8;
	shl.b32 	%r210, %r5, 3;
	or.b32  	%r211, %r209, %r210;
	shl.b32 	%r212, %r5, 6;
	and.b32  	%r213, %r212, 64;
	and.b32  	%r214, %r211, 304;
	or.b32  	%r215, %r213, %r214;
	shl.b32 	%r216, %r3, 9;
	or.b32  	%r217, %r208, %r215;
	and.b32  	%r218, %r216, 1040384;
	or.b32  	%r219, %r217, %r218;
	cvt.u64.u32 	%rd27, %r219;
	add.s64 	%rd28, %rd3, %rd27;
	ld.global.v4.u32 	{%r76, %r77, %r84, %r85}, [%rd28];
	shl.b32 	%r220, %r207, 7;
	shl.b32 	%r221, %r1, 6;
	and.b32  	%r222, %r221, 64;
	shl.b32 	%r223, %r5, 1;
	and.b32  	%r224, %r223, 12;
	or.b32  	%r225, %r222, %r224;
	shl.b32 	%r226, %r5, 4;
	and.b32  	%r227, %r226, 16;
	or.b32  	%r228, %r227, %r225;
	and.b32  	%r229, %r4, 258048;
	and.b32  	%r230, %r4, 2048;
	or.b32  	%r231, %r230, 1;
	or.b32  	%r232, %r231, %r229;
	or.b32  	%r233, %r232, %r220;
	or.b32  	%r234, %r228, %r233;
	shl.b32 	%r235, %r234, 2;
	or.b32  	%r236, %r235, 128;
	cvt.u64.u32 	%rd29, %r236;
	add.s64 	%rd30, %rd3, %rd29;
	ld.global.v4.u32 	{%r92, %r93, %r100, %r101}, [%rd30+-4];
	or.b32  	%r237, %r206, %r32;
	shl.b32 	%r238, %r237, 7;
	or.b32  	%r239, %r221, %r223;
	and.b32  	%r240, %r239, 76;
	or.b32  	%r241, %r227, %r240;
	or.b32  	%r242, %r238, %r241;
	or.b32  	%r243, %r229, %r242;
	or.b32  	%r244, %r243, 128;
	add.s32 	%r245, %r244, %r230;
	mul.wide.u32 	%rd31, %r245, 4;
	add.s64 	%rd32, %rd3, %rd31;
	ld.global.v4.u32 	{%r108, %r109, %r116, %r117}, [%rd32];
	or.b32  	%r246, %r238, %r228;
	or.b32  	%r247, %r229, %r246;
	or.b32  	%r248, %r247, 160;
	add.s32 	%r249, %r231, %r248;
	mul.wide.u32 	%rd33, %r249, 4;
	add.s64 	%rd34, %rd3, %rd33;
	ld.global.v4.u32 	{%r124, %r125, %r132, %r133}, [%rd34+-4];
	mov.u32 	%r134, 21520;
	// begin inline asm
	prmt.b32 %r140, %r76, %r77, %r134;
	// end inline asm
	mov.u32 	%r138, 30258;
	// begin inline asm
	prmt.b32 %r141, %r76, %r77, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r148, %r84, %r85, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r149, %r84, %r85, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r156, %r92, %r93, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r157, %r92, %r93, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r164, %r100, %r101, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r165, %r100, %r101, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r172, %r108, %r109, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r173, %r108, %r109, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r180, %r116, %r117, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r181, %r116, %r117, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r188, %r124, %r125, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r189, %r124, %r125, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r196, %r132, %r133, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r197, %r132, %r133, %r138;
	// end inline asm
	mov.u32 	%r198, 25152;
	// begin inline asm
	prmt.b32 %r139, %r140, %r141, %r198;
	// end inline asm
	mov.u32 	%r202, 29521;
	// begin inline asm
	prmt.b32 %r143, %r140, %r141, %r202;
	// end inline asm
	// begin inline asm
	prmt.b32 %r147, %r148, %r149, %r198;
	// end inline asm
	// begin inline asm
	prmt.b32 %r151, %r148, %r149, %r202;
	// end inline asm
	// begin inline asm
	prmt.b32 %r155, %r156, %r157, %r198;
	// end inline asm
	// begin inline asm
	prmt.b32 %r159, %r156, %r157, %r202;
	// end inline asm
	// begin inline asm
	prmt.b32 %r163, %r164, %r165, %r198;
	// end inline asm
	// begin inline asm
	prmt.b32 %r167, %r164, %r165, %r202;
	// end inline asm
	// begin inline asm
	prmt.b32 %r171, %r172, %r173, %r198;
	// end inline asm
	// begin inline asm
	prmt.b32 %r175, %r172, %r173, %r202;
	// end inline asm
	// begin inline asm
	prmt.b32 %r179, %r180, %r181, %r198;
	// end inline asm
	// begin inline asm
	prmt.b32 %r183, %r180, %r181, %r202;
	// end inline asm
	// begin inline asm
	prmt.b32 %r187, %r188, %r189, %r198;
	// end inline asm
	// begin inline asm
	prmt.b32 %r191, %r188, %r189, %r202;
	// end inline asm
	// begin inline asm
	prmt.b32 %r195, %r196, %r197, %r198;
	// end inline asm
	// begin inline asm
	prmt.b32 %r199, %r196, %r197, %r202;
	// end inline asm
	and.b32  	%r33, %r5, 2;
	setp.eq.s32 	%p9, %r33, 0;
	selp.b32 	%r250, %r155, %r139, %p9;
	shfl.sync.bfly.b32	%r251, %r250, 2, 31, -1;
	selp.b32 	%r252, %r139, %r251, %p9;
	selp.b32 	%r253, %r251, %r155, %p9;
	selp.b32 	%r254, %r159, %r143, %p9;
	shfl.sync.bfly.b32	%r255, %r254, 2, 31, -1;
	selp.b32 	%r256, %r143, %r255, %p9;
	selp.b32 	%r257, %r255, %r159, %p9;
	selp.b32 	%r258, %r163, %r147, %p9;
	shfl.sync.bfly.b32	%r259, %r258, 2, 31, -1;
	selp.b32 	%r260, %r147, %r259, %p9;
	selp.b32 	%r261, %r259, %r163, %p9;
	selp.b32 	%r262, %r167, %r151, %p9;
	shfl.sync.bfly.b32	%r263, %r262, 2, 31, -1;
	selp.b32 	%r264, %r151, %r263, %p9;
	selp.b32 	%r265, %r263, %r167, %p9;
	selp.b32 	%r266, %r187, %r171, %p9;
	shfl.sync.bfly.b32	%r267, %r266, 2, 31, -1;
	selp.b32 	%r268, %r171, %r267, %p9;
	selp.b32 	%r269, %r267, %r187, %p9;
	selp.b32 	%r270, %r191, %r175, %p9;
	shfl.sync.bfly.b32	%r271, %r270, 2, 31, -1;
	selp.b32 	%r272, %r175, %r271, %p9;
	selp.b32 	%r273, %r271, %r191, %p9;
	selp.b32 	%r274, %r195, %r179, %p9;
	shfl.sync.bfly.b32	%r275, %r274, 2, 31, -1;
	selp.b32 	%r276, %r179, %r275, %p9;
	selp.b32 	%r277, %r275, %r195, %p9;
	selp.b32 	%r278, %r199, %r183, %p9;
	shfl.sync.bfly.b32	%r279, %r278, 2, 31, -1;
	selp.b32 	%r280, %r183, %r279, %p9;
	selp.b32 	%r281, %r279, %r199, %p9;
	and.b32  	%r34, %r5, 4;
	setp.eq.s32 	%p10, %r34, 0;
	selp.b32 	%r282, %r268, %r252, %p10;
	shfl.sync.bfly.b32	%r283, %r282, 4, 31, -1;
	selp.b32 	%r35, %r252, %r283, %p10;
	selp.b32 	%r36, %r283, %r268, %p10;
	selp.b32 	%r284, %r272, %r256, %p10;
	shfl.sync.bfly.b32	%r285, %r284, 4, 31, -1;
	selp.b32 	%r37, %r256, %r285, %p10;
	selp.b32 	%r38, %r285, %r272, %p10;
	selp.b32 	%r286, %r276, %r260, %p10;
	shfl.sync.bfly.b32	%r287, %r286, 4, 31, -1;
	selp.b32 	%r39, %r260, %r287, %p10;
	selp.b32 	%r40, %r287, %r276, %p10;
	selp.b32 	%r288, %r280, %r264, %p10;
	shfl.sync.bfly.b32	%r289, %r288, 4, 31, -1;
	selp.b32 	%r41, %r264, %r289, %p10;
	selp.b32 	%r42, %r289, %r280, %p10;
	selp.b32 	%r290, %r269, %r253, %p10;
	shfl.sync.bfly.b32	%r291, %r290, 4, 31, -1;
	selp.b32 	%r43, %r253, %r291, %p10;
	selp.b32 	%r44, %r291, %r269, %p10;
	selp.b32 	%r292, %r273, %r257, %p10;
	shfl.sync.bfly.b32	%r293, %r292, 4, 31, -1;
	selp.b32 	%r45, %r257, %r293, %p10;
	selp.b32 	%r46, %r293, %r273, %p10;
	selp.b32 	%r294, %r277, %r261, %p10;
	shfl.sync.bfly.b32	%r295, %r294, 4, 31, -1;
	selp.b32 	%r47, %r261, %r295, %p10;
	selp.b32 	%r48, %r295, %r277, %p10;
	selp.b32 	%r296, %r281, %r265, %p10;
	shfl.sync.bfly.b32	%r297, %r296, 4, 31, -1;
	selp.b32 	%r49, %r265, %r297, %p10;
	selp.b32 	%r50, %r297, %r281, %p10;
	shl.b32 	%r298, %r6, 13;
	shl.b32 	%r299, %r5, 2;
	and.b32  	%r300, %r299, 28;
	and.b32  	%r301, %r2, 32;
	or.b32  	%r51, %r301, %r300;
	shl.b32 	%r302, %r3, 2;
	and.b32  	%r303, %r216, 7680;
	or.b32  	%r52, %r303, %r27;
	shl.b32 	%r304, %r1, 1;
	and.b32  	%r53, %r304, 4;
	and.b32  	%r305, %r302, 8128;
	or.b32  	%r306, %r305, %r51;
	or.b32  	%r54, %r306, %r298;
	and.b32  	%r307, %r210, 24;
	or.b32  	%r55, %r307, %r301;
	and.b32  	%r308, %r1, 1;
	neg.s32 	%r309, %r308;
	and.b32  	%r310, %r309, 640;
	and.b32  	%r56, %r223, 6;
	or.b32  	%r57, %r237, %r310;
	and.b32  	%r311, %r5, 7;
	or.b32  	%r312, %r29, 640;
	shl.b32 	%r58, %r69, %r31;
	min.u32 	%r59, %r204, 31;
	and.b32  	%r60, %r5, 1;
	shl.b32 	%r314, %r1, 20;
	shl.b32 	%r315, %r5, 15;
	and.b32  	%r316, %r315, 786432;
	or.b32  	%r317, %r316, %r314;
	and.b32  	%r318, %r210, 32;
	shl.b32 	%r319, %r5, 5;
	and.b32  	%r61, %r319, 64;
	and.b32  	%r320, %r4, 260096;
	or.b32  	%r62, %r317, %r320;
	or.b32  	%r321, %r216, %r227;
	or.b32  	%r63, %r321, %r318;
	mul.lo.s32 	%r322, %r311, 20;
	add.s32 	%r323, %r322, %r29;
	mul.wide.u32 	%rd35, %r323, 4;
	mov.u64 	%rd36, shmem;
	add.s64 	%rd37, %rd36, 8320;
	add.s64 	%rd9, %rd37, %rd35;
	add.s32 	%r324, %r322, %r312;
	mul.wide.u32 	%rd38, %r324, 4;
	add.s64 	%rd10, %rd37, %rd38;
	add.s32 	%r325, %r322, 160;
	add.s32 	%r326, %r325, %r29;
	mul.wide.u32 	%rd39, %r326, 4;
	add.s64 	%rd11, %rd37, %rd39;
	add.s32 	%r327, %r325, %r312;
	mul.wide.u32 	%rd40, %r327, 4;
	add.s64 	%rd12, %rd37, %rd40;
	add.s32 	%r328, %r322, 320;
	add.s32 	%r329, %r328, %r29;
	mul.wide.u32 	%rd41, %r329, 4;
	add.s64 	%rd13, %rd37, %rd41;
	add.s32 	%r330, %r328, %r312;
	mul.wide.u32 	%rd42, %r330, 4;
	add.s64 	%rd14, %rd37, %rd42;
	or.b32  	%r331, %r5, 24;
	mul.lo.s32 	%r332, %r331, 20;
	add.s32 	%r333, %r332, %r29;
	mul.wide.u32 	%rd43, %r333, 4;
	add.s64 	%rd15, %rd37, %rd43;
	add.s32 	%r334, %r332, %r312;
	mul.wide.u32 	%rd44, %r334, 4;
	add.s64 	%rd16, %rd37, %rd44;
	mov.u32 	%r864, 0;
$L__BB0_9:                              // %L1526
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_11 Depth 2
                                        //       Child Loop BB0_12 Depth 3
	add.s32 	%r335, %r864, %r6;
	setp.le.s32 	%p11, %r7, %r335;
	@%p11 bra 	$L__BB0_15;
// %bb.10:                              // %L1533.preheader
                                        //   in Loop: Header=BB0_9 Depth=1
	mov.u32 	%r436, 0;
	mov.u32 	%r865, %r436;
	mov.u32 	%r866, %r436;
	mov.u32 	%r867, %r436;
	mov.u32 	%r868, %r436;
	mov.u32 	%r869, %r436;
	mov.u32 	%r870, %r436;
	mov.u32 	%r871, %r436;
$L__BB0_11:                             // %L1533
                                        //   Parent Loop BB0_9 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_12 Depth 3
	add.s32 	%r338, %r52, %r865;
	or.b32  	%r339, %r338, %r53;
	add.s32 	%r340, %r339, %r864;
	shl.b32 	%r341, %r340, 13;
	and.b32  	%r342, %r341, 67100672;
	add.s32 	%r343, %r54, %r342;
	shr.s32 	%r344, %r343, 31;
	shr.u32 	%r345, %r344, 6;
	add.s32 	%r346, %r343, %r345;
	shr.s32 	%r347, %r346, 26;
	setp.lt.s32 	%p12, %r343, 0;
	and.b32  	%r348, %r346, -67108864;
	setp.ne.s32 	%p13, %r348, %r343;
	and.pred  	%p14, %p12, %p13;
	selp.u32 	%r349, 1, 0, %p14;
	sub.s32 	%r350, %r349, %r347;
	shl.b32 	%r351, %r350, 26;
	or.b32  	%r352, %r343, 1;
	add.s32 	%r353, %r352, %r351;
	mul.wide.s32 	%rd45, %r353, 4;
	add.s64 	%rd46, %rd4, %rd45;
	ld.global.v4.u32 	{%r354, %r355, %r356, %r357}, [%rd46+-4];
	or.b32  	%r358, %r340, 8;
	shl.b32 	%r359, %r358, 13;
	and.b32  	%r360, %r359, 67100672;
	add.s32 	%r361, %r54, %r360;
	shr.s32 	%r362, %r361, 31;
	shr.u32 	%r363, %r362, 6;
	add.s32 	%r364, %r361, %r363;
	shr.s32 	%r365, %r364, 26;
	setp.lt.s32 	%p15, %r361, 0;
	and.b32  	%r366, %r364, -67108864;
	setp.ne.s32 	%p16, %r366, %r361;
	and.pred  	%p17, %p15, %p16;
	selp.u32 	%r367, 1, 0, %p17;
	sub.s32 	%r368, %r367, %r365;
	shl.b32 	%r369, %r368, 26;
	or.b32  	%r370, %r361, 1;
	add.s32 	%r371, %r370, %r369;
	mul.wide.s32 	%rd47, %r371, 4;
	add.s64 	%rd48, %rd4, %rd47;
	ld.global.v4.u32 	{%r372, %r373, %r374, %r375}, [%rd48+-4];
	or.b32  	%r376, %r340, 16;
	shl.b32 	%r377, %r376, 13;
	and.b32  	%r378, %r377, 67100672;
	add.s32 	%r379, %r54, %r378;
	shr.s32 	%r380, %r379, 31;
	shr.u32 	%r381, %r380, 6;
	add.s32 	%r382, %r379, %r381;
	shr.s32 	%r383, %r382, 26;
	setp.lt.s32 	%p18, %r379, 0;
	and.b32  	%r384, %r382, -67108864;
	setp.ne.s32 	%p19, %r384, %r379;
	and.pred  	%p20, %p18, %p19;
	selp.u32 	%r385, 1, 0, %p20;
	sub.s32 	%r386, %r385, %r383;
	shl.b32 	%r387, %r386, 26;
	or.b32  	%r388, %r379, 1;
	add.s32 	%r389, %r388, %r387;
	mul.wide.s32 	%rd49, %r389, 4;
	add.s64 	%rd50, %rd4, %rd49;
	ld.global.v4.u32 	{%r390, %r391, %r392, %r393}, [%rd50+-4];
	or.b32  	%r394, %r340, 24;
	shl.b32 	%r395, %r394, 13;
	and.b32  	%r396, %r395, 67100672;
	add.s32 	%r397, %r54, %r396;
	shr.s32 	%r398, %r397, 31;
	shr.u32 	%r399, %r398, 6;
	add.s32 	%r400, %r397, %r399;
	shr.s32 	%r401, %r400, 26;
	setp.lt.s32 	%p21, %r397, 0;
	and.b32  	%r402, %r400, -67108864;
	setp.ne.s32 	%p22, %r402, %r397;
	and.pred  	%p23, %p21, %p22;
	selp.u32 	%r403, 1, 0, %p23;
	sub.s32 	%r404, %r403, %r401;
	shl.b32 	%r405, %r404, 26;
	or.b32  	%r406, %r397, 1;
	add.s32 	%r407, %r406, %r405;
	mul.wide.s32 	%rd51, %r407, 4;
	add.s64 	%rd52, %rd4, %rd51;
	ld.global.v4.u32 	{%r408, %r409, %r410, %r411}, [%rd52+-4];
	and.b32  	%r412, %r340, 31;
	mul.lo.s32 	%r413, %r412, 65;
	add.s32 	%r414, %r51, %r413;
	mul.wide.u32 	%rd53, %r414, 4;
	add.s64 	%rd55, %rd36, %rd53;
	st.shared.u32 	[%rd55], %r354;
	cvt.u64.u32 	%rd56, %r413;
	cvt.u64.u32 	%rd57, %r51;
	add.s64 	%rd58, %rd57, %rd56;
	shl.b64 	%rd59, %rd58, 2;
	add.s64 	%rd60, %rd36, %rd59;
	st.shared.u32 	[%rd60+4], %r355;
	st.shared.u32 	[%rd60+8], %r356;
	st.shared.u32 	[%rd60+12], %r357;
	and.b32  	%r415, %r358, 31;
	mul.lo.s32 	%r416, %r415, 65;
	add.s32 	%r417, %r51, %r416;
	mul.wide.u32 	%rd61, %r417, 4;
	add.s64 	%rd62, %rd36, %rd61;
	st.shared.u32 	[%rd62], %r372;
	cvt.u64.u32 	%rd63, %r416;
	add.s64 	%rd64, %rd57, %rd63;
	shl.b64 	%rd65, %rd64, 2;
	add.s64 	%rd66, %rd36, %rd65;
	st.shared.u32 	[%rd66+4], %r373;
	st.shared.u32 	[%rd66+8], %r374;
	st.shared.u32 	[%rd66+12], %r375;
	and.b32  	%r418, %r376, 31;
	mul.lo.s32 	%r419, %r418, 65;
	add.s32 	%r420, %r51, %r419;
	mul.wide.u32 	%rd67, %r420, 4;
	add.s64 	%rd68, %rd36, %rd67;
	st.shared.u32 	[%rd68], %r390;
	cvt.u64.u32 	%rd69, %r419;
	add.s64 	%rd70, %rd57, %rd69;
	shl.b64 	%rd71, %rd70, 2;
	add.s64 	%rd72, %rd36, %rd71;
	st.shared.u32 	[%rd72+4], %r391;
	st.shared.u32 	[%rd72+8], %r392;
	st.shared.u32 	[%rd72+12], %r393;
	and.b32  	%r421, %r394, 31;
	mul.lo.s32 	%r422, %r421, 65;
	add.s32 	%r423, %r51, %r422;
	mul.wide.u32 	%rd73, %r423, 4;
	add.s64 	%rd74, %rd36, %rd73;
	st.shared.u32 	[%rd74], %r408;
	cvt.u64.u32 	%rd75, %r422;
	add.s64 	%rd76, %rd57, %rd75;
	shl.b64 	%rd77, %rd76, 2;
	add.s64 	%rd78, %rd36, %rd77;
	st.shared.u32 	[%rd78+4], %r409;
	st.shared.u32 	[%rd78+8], %r410;
	st.shared.u32 	[%rd78+12], %r411;
	bar.sync 	0;
	mov.u32 	%r872, %r436;
$L__BB0_12:                             // %L5398
                                        //   Parent Loop BB0_9 Depth=1
                                        //     Parent Loop BB0_11 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r686, %r872, %r32;
	mad.lo.s32 	%r687, %r686, 65, %r55;
	mul.wide.u32 	%rd79, %r687, 4;
	add.s64 	%rd81, %rd36, %rd79;
	ld.shared.u32 	%r425, [%rd81];
	mov.u32 	%r426, 134744072;
	mov.u32 	%r427, 252645135;
	// begin inline asm
	lop3.b32 %r424, %r425, %r426, %r427, 40;
	// end inline asm
	add.s32 	%r688, %r424, 2021161080;
	xor.b32  	%r435, %r688, -2139062144;
	shr.u32 	%r429, %r425, 4;
	// begin inline asm
	lop3.b32 %r428, %r429, %r426, %r427, 40;
	// end inline asm
	add.s32 	%r689, %r428, 2021161080;
	xor.b32  	%r441, %r689, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r432, %r433}, {%r35}, {%r435}, {%r436, %r436};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r438, %r439}, {%r37}, {%r441}, {%r436, %r436};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r444, %r445}, {%r35}, {%r441}, {%r436, %r436};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r450, %r451}, {%r37}, {%r435}, {%r444, %r445};
	// end inline asm
	ld.shared.u32 	%r457, [%rd81+4];
	// begin inline asm
	lop3.b32 %r456, %r457, %r426, %r427, 40;
	// end inline asm
	add.s32 	%r690, %r456, 2021161080;
	xor.b32  	%r467, %r690, -2139062144;
	shr.u32 	%r461, %r457, 4;
	// begin inline asm
	lop3.b32 %r460, %r461, %r426, %r427, 40;
	// end inline asm
	add.s32 	%r691, %r460, 2021161080;
	xor.b32  	%r473, %r691, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r464, %r465}, {%r39}, {%r467}, {%r432, %r433};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r470, %r471}, {%r41}, {%r473}, {%r438, %r439};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r476, %r477}, {%r39}, {%r473}, {%r450, %r451};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r482, %r483}, {%r41}, {%r467}, {%r476, %r477};
	// end inline asm
	ld.shared.u32 	%r489, [%rd81+8];
	// begin inline asm
	lop3.b32 %r488, %r489, %r426, %r427, 40;
	// end inline asm
	add.s32 	%r692, %r488, 2021161080;
	xor.b32  	%r499, %r692, -2139062144;
	shr.u32 	%r493, %r489, 4;
	// begin inline asm
	lop3.b32 %r492, %r493, %r426, %r427, 40;
	// end inline asm
	add.s32 	%r693, %r492, 2021161080;
	xor.b32  	%r505, %r693, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r496, %r497}, {%r43}, {%r499}, {%r464, %r465};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r502, %r503}, {%r45}, {%r505}, {%r470, %r471};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r508, %r509}, {%r43}, {%r505}, {%r482, %r483};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r514, %r515}, {%r45}, {%r499}, {%r508, %r509};
	// end inline asm
	ld.shared.u32 	%r521, [%rd81+12];
	// begin inline asm
	lop3.b32 %r520, %r521, %r426, %r427, 40;
	// end inline asm
	add.s32 	%r694, %r520, 2021161080;
	xor.b32  	%r531, %r694, -2139062144;
	shr.u32 	%r525, %r521, 4;
	// begin inline asm
	lop3.b32 %r524, %r525, %r426, %r427, 40;
	// end inline asm
	add.s32 	%r695, %r524, 2021161080;
	xor.b32  	%r537, %r695, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r528, %r529}, {%r47}, {%r531}, {%r496, %r497};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r534, %r535}, {%r49}, {%r537}, {%r502, %r503};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r540, %r541}, {%r47}, {%r537}, {%r514, %r515};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r546, %r547}, {%r49}, {%r531}, {%r540, %r541};
	// end inline asm
	ld.shared.u32 	%r553, [%rd81+16];
	// begin inline asm
	lop3.b32 %r552, %r553, %r426, %r427, 40;
	// end inline asm
	add.s32 	%r696, %r552, 2021161080;
	xor.b32  	%r563, %r696, -2139062144;
	shr.u32 	%r557, %r553, 4;
	// begin inline asm
	lop3.b32 %r556, %r557, %r426, %r427, 40;
	// end inline asm
	add.s32 	%r697, %r556, 2021161080;
	xor.b32  	%r569, %r697, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r560, %r561}, {%r36}, {%r563}, {%r528, %r529};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r566, %r567}, {%r38}, {%r569}, {%r534, %r535};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r572, %r573}, {%r36}, {%r569}, {%r546, %r547};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r578, %r579}, {%r38}, {%r563}, {%r572, %r573};
	// end inline asm
	ld.shared.u32 	%r585, [%rd81+20];
	// begin inline asm
	lop3.b32 %r584, %r585, %r426, %r427, 40;
	// end inline asm
	add.s32 	%r698, %r584, 2021161080;
	xor.b32  	%r595, %r698, -2139062144;
	shr.u32 	%r589, %r585, 4;
	// begin inline asm
	lop3.b32 %r588, %r589, %r426, %r427, 40;
	// end inline asm
	add.s32 	%r699, %r588, 2021161080;
	xor.b32  	%r601, %r699, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r592, %r593}, {%r40}, {%r595}, {%r560, %r561};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r598, %r599}, {%r42}, {%r601}, {%r566, %r567};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r604, %r605}, {%r40}, {%r601}, {%r578, %r579};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r610, %r611}, {%r42}, {%r595}, {%r604, %r605};
	// end inline asm
	ld.shared.u32 	%r617, [%rd81+24];
	// begin inline asm
	lop3.b32 %r616, %r617, %r426, %r427, 40;
	// end inline asm
	add.s32 	%r700, %r616, 2021161080;
	xor.b32  	%r627, %r700, -2139062144;
	shr.u32 	%r621, %r617, 4;
	// begin inline asm
	lop3.b32 %r620, %r621, %r426, %r427, 40;
	// end inline asm
	add.s32 	%r701, %r620, 2021161080;
	xor.b32  	%r633, %r701, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r624, %r625}, {%r44}, {%r627}, {%r592, %r593};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r630, %r631}, {%r46}, {%r633}, {%r598, %r599};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r636, %r637}, {%r44}, {%r633}, {%r610, %r611};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r642, %r643}, {%r46}, {%r627}, {%r636, %r637};
	// end inline asm
	ld.shared.u32 	%r649, [%rd81+28];
	// begin inline asm
	lop3.b32 %r648, %r649, %r426, %r427, 40;
	// end inline asm
	add.s32 	%r702, %r648, 2021161080;
	xor.b32  	%r659, %r702, -2139062144;
	shr.u32 	%r653, %r649, 4;
	// begin inline asm
	lop3.b32 %r652, %r653, %r426, %r427, 40;
	// end inline asm
	add.s32 	%r703, %r652, 2021161080;
	xor.b32  	%r665, %r703, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r656, %r657}, {%r48}, {%r659}, {%r624, %r625};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r662, %r663}, {%r50}, {%r665}, {%r630, %r631};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r668, %r669}, {%r48}, {%r665}, {%r642, %r643};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r674, %r675}, {%r50}, {%r659}, {%r668, %r669};
	// end inline asm
	sub.s32 	%r704, %r656, %r662;
	add.s32 	%r705, %r704, 4;
	shr.s32 	%r682, %r705, 3;
	add.s32 	%r706, %r674, 4;
	shr.s32 	%r681, %r706, 3;
	sub.s32 	%r707, %r657, %r663;
	add.s32 	%r708, %r707, 4;
	shr.s32 	%r685, %r708, 3;
	add.s32 	%r709, %r675, 4;
	shr.s32 	%r684, %r709, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r680, %r681, %r682;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r683, %r684, %r685;
	// end inline asm
	or.b32  	%r710, %r56, %r872;
	mad.lo.s32 	%r711, %r710, 20, %r57;
	mul.wide.u32 	%rd82, %r711, 4;
	add.s64 	%rd83, %rd36, %rd82;
	st.shared.u32 	[%rd83+8320], %r680;
	st.shared.u32 	[%rd83+8400], %r683;
	add.s32 	%r872, %r872, 8;
	setp.ne.s32 	%p24, %r872, 32;
	@%p24 bra 	$L__BB0_12;
// %bb.13:                              // %L7488
                                        //   in Loop: Header=BB0_11 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r730, [%rd9];
	ld.shared.u32 	%r731, [%rd10];
	ld.shared.u32 	%r732, [%rd11];
	ld.shared.u32 	%r733, [%rd12];
	ld.shared.u32 	%r734, [%rd13];
	ld.shared.u32 	%r735, [%rd14];
	ld.shared.u32 	%r736, [%rd15];
	ld.shared.u32 	%r737, [%rd16];
	cvt.s32.s16 	%r738, %r730;
	shr.s32 	%r739, %r730, 16;
	cvt.s32.s16 	%r740, %r731;
	shr.s32 	%r741, %r731, 16;
	cvt.s32.s16 	%r742, %r732;
	shr.s32 	%r743, %r732, 16;
	cvt.s32.s16 	%r744, %r733;
	shr.s32 	%r745, %r733, 16;
	cvt.s32.s16 	%r746, %r734;
	shr.s32 	%r747, %r734, 16;
	cvt.s32.s16 	%r748, %r735;
	shr.s32 	%r749, %r735, 16;
	cvt.s32.s16 	%r750, %r736;
	shr.s32 	%r751, %r736, 16;
	cvt.s32.s16 	%r752, %r737;
	shr.s32 	%r753, %r737, 16;
	add.s32 	%r754, %r738, %r58;
	add.s32 	%r755, %r754, %r740;
	shr.s32 	%r756, %r755, %r59;
	add.s32 	%r757, %r739, %r58;
	add.s32 	%r758, %r757, %r741;
	shr.s32 	%r759, %r758, %r59;
	add.s32 	%r760, %r742, %r58;
	add.s32 	%r761, %r760, %r744;
	shr.s32 	%r762, %r761, %r59;
	add.s32 	%r763, %r743, %r58;
	add.s32 	%r764, %r763, %r745;
	shr.s32 	%r765, %r764, %r59;
	add.s32 	%r766, %r746, %r58;
	add.s32 	%r767, %r766, %r748;
	shr.s32 	%r768, %r767, %r59;
	add.s32 	%r769, %r747, %r58;
	add.s32 	%r770, %r769, %r749;
	shr.s32 	%r771, %r770, %r59;
	add.s32 	%r772, %r750, %r58;
	add.s32 	%r773, %r772, %r752;
	shr.s32 	%r774, %r773, %r59;
	add.s32 	%r775, %r751, %r58;
	add.s32 	%r776, %r775, %r753;
	shr.s32 	%r777, %r776, %r59;
	max.s32 	%r778, %r756, -7;
	min.s32 	%r717, %r778, 7;
	max.s32 	%r779, %r759, -7;
	min.s32 	%r724, %r779, 7;
	max.s32 	%r780, %r762, -7;
	min.s32 	%r716, %r780, 7;
	max.s32 	%r781, %r765, -7;
	min.s32 	%r723, %r781, 7;
	max.s32 	%r782, %r768, -7;
	min.s32 	%r714, %r782, 7;
	max.s32 	%r783, %r771, -7;
	min.s32 	%r721, %r783, 7;
	max.s32 	%r784, %r774, -7;
	min.s32 	%r713, %r784, 7;
	max.s32 	%r785, %r777, -7;
	min.s32 	%r720, %r785, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r712, %r713, %r714, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r715, %r716, %r717, %r712;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r719, %r720, %r721, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r722, %r723, %r724, %r719;
	// end inline asm
	shl.b32 	%r729, %r722, 4;
	// begin inline asm
	lop3.b32 %r796, %r427, %r715, %r729, 202;
	// end inline asm
	setp.eq.s32 	%p25, %r865, 0;
	selp.b32 	%r870, %r796, %r870, %p25;
	selp.b32 	%r871, %r796, %r871, %p25;
	setp.eq.s32 	%p26, %r865, 32;
	selp.b32 	%r866, %r796, %r866, %p26;
	selp.b32 	%r867, %r796, %r867, %p26;
	setp.eq.s32 	%p27, %r865, 64;
	selp.b32 	%r868, %r796, %r868, %p27;
	selp.b32 	%r869, %r796, %r869, %p27;
	add.s32 	%r25, %r865, 32;
	setp.ne.s32 	%p28, %r865, 96;
	mov.u32 	%r865, %r25;
	@%p28 bra 	$L__BB0_11;
// %bb.14:                              // %L8922
                                        //   in Loop: Header=BB0_9 Depth=1
	setp.eq.s32 	%p29, %r60, 0;
	// begin inline asm
	prmt.b32 %r786, %r870, %r866, %r198;
	// end inline asm
	// begin inline asm
	prmt.b32 %r790, %r871, %r867, %r202;
	// end inline asm
	// begin inline asm
	prmt.b32 %r794, %r868, %r796, %r198;
	// end inline asm
	// begin inline asm
	prmt.b32 %r798, %r869, %r796, %r202;
	// end inline asm
	selp.b32 	%r834, %r790, %r786, %p29;
	shfl.sync.bfly.b32	%r835, %r834, 1, 31, -1;
	selp.b32 	%r803, %r786, %r835, %p29;
	selp.b32 	%r804, %r835, %r790, %p29;
	selp.b32 	%r836, %r798, %r794, %p29;
	shfl.sync.bfly.b32	%r837, %r836, 1, 31, -1;
	selp.b32 	%r811, %r794, %r837, %p29;
	selp.b32 	%r812, %r837, %r798, %p29;
	// begin inline asm
	prmt.b32 %r802, %r803, %r804, %r198;
	// end inline asm
	// begin inline asm
	prmt.b32 %r806, %r803, %r804, %r202;
	// end inline asm
	// begin inline asm
	prmt.b32 %r810, %r811, %r812, %r198;
	// end inline asm
	// begin inline asm
	prmt.b32 %r814, %r811, %r812, %r202;
	// end inline asm
	selp.b32 	%r838, %r810, %r802, %p9;
	shfl.sync.bfly.b32	%r839, %r838, 2, 31, -1;
	selp.b32 	%r819, %r802, %r839, %p9;
	selp.b32 	%r820, %r839, %r810, %p9;
	selp.b32 	%r840, %r814, %r806, %p9;
	shfl.sync.bfly.b32	%r841, %r840, 2, 31, -1;
	selp.b32 	%r827, %r806, %r841, %p9;
	selp.b32 	%r828, %r841, %r814, %p9;
	// begin inline asm
	prmt.b32 %r818, %r819, %r820, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r822, %r819, %r820, %r138;
	// end inline asm
	// begin inline asm
	prmt.b32 %r826, %r827, %r828, %r134;
	// end inline asm
	// begin inline asm
	prmt.b32 %r830, %r827, %r828, %r138;
	// end inline asm
	selp.b32 	%r842, %r826, %r818, %p10;
	shfl.sync.bfly.b32	%r843, %r842, 4, 31, -1;
	selp.b32 	%r844, %r818, %r843, %p10;
	selp.b32 	%r845, %r843, %r826, %p10;
	selp.b32 	%r846, %r830, %r822, %p10;
	shfl.sync.bfly.b32	%r847, %r846, 4, 31, -1;
	selp.b32 	%r848, %r822, %r847, %p10;
	selp.b32 	%r849, %r847, %r830, %p10;
	selp.b32 	%r850, %r848, %r844, %p29;
	shfl.sync.bfly.b32	%r851, %r850, 1, 31, -1;
	selp.b32 	%r852, %r844, %r851, %p29;
	selp.b32 	%r853, %r851, %r848, %p29;
	selp.b32 	%r854, %r849, %r845, %p29;
	shfl.sync.bfly.b32	%r855, %r854, 1, 31, -1;
	selp.b32 	%r856, %r845, %r855, %p29;
	selp.b32 	%r857, %r855, %r849, %p29;
	add.s32 	%r858, %r63, %r864;
	and.b32  	%r859, %r858, 1968;
	or.b32  	%r860, %r859, %r61;
	or.b32  	%r861, %r62, %r860;
	cvt.u64.u32 	%rd84, %r861;
	add.s64 	%rd85, %rd6, %rd84;
	st.global.v4.u32 	[%rd85], {%r852, %r856, %r853, %r857};
	add.s32 	%r26, %r864, 128;
	setp.ne.s32 	%p32, %r864, 384;
	mov.u32 	%r864, %r26;
	@%p32 bra 	$L__BB0_9;
$L__BB0_15:                             // %L9324
	mov.u32 	%r862, 0;
	st.global.u32 	[%rd8], %r862;
	ret;
$L__BB0_7:                              // %L191
	mov.u32 	%r863, 2;
	st.global.u32 	[%rd8], %r863;
	mov.u64 	%rd86, exception761;
	cvta.global.u64 	%rd87, %rd86;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd87;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r64;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r64;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L24
	mov.u64 	%rd20, exception1;
	cvta.global.u64 	%rd21, %rd20;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd21;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r64;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_8:                              // %L410
	mov.u32 	%r74, 2;
	st.global.u32 	[%rd8], %r74;
	mov.u64 	%rd25, exception761;
	cvta.global.u64 	%rd26, %rd25;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd26;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r64;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
