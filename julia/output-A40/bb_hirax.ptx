// PTX kernel code for CUDA baseband beamformer
// This file has been generated automatically by `bb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for bb(::Int32, ::Int32, ::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=128, blocks_per_sm=8

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception716[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1723[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32]
)
.reqntid 128, 1, 1
.minnctapersm 8
{
	.reg .pred 	%p<60>;
	.reg .b32 	%r<876>;
	.reg .b64 	%rd<89>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r63, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd20, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r66, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p6, %r66, 8319;
	@%p6 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r67, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p7, %r67, 13439;
	@%p7 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L26
	ld.param.u32 	%r64, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	ld.param.u64 	%rd5, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r68, %r2, 7;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r69, %r68, %r1;
	or.b32  	%r70, %r69, %r4;
	mul.wide.u32 	%rd25, %r70, 4;
	add.s64 	%rd7, %rd5, %rd25;
	mov.u32 	%r71, 1;
	st.global.u32 	[%rd7], %r71;
	setp.gt.u32 	%p8, %r64, 32767;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L133
	ld.param.u32 	%r65, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p9, %r65, %r64;
	setp.gt.s32 	%p10, %r65, 65535;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L140
	sub.s32 	%r72, %r65, %r64;
	and.b32  	%r73, %r72, 127;
	setp.eq.s32 	%p12, %r73, 0;
	@%p12 bra 	$L__BB0_20;
	bra.uni 	$L__BB0_7;
$L__BB0_20:                             // %pass120
	ld.param.u64 	%rd3, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	shl.b32 	%r58, %r3, 2;
	shl.b32 	%r74, %r2, 4;
	shr.u32 	%r59, %r1, 3;
	or.b32  	%r60, %r58, %r59;
	or.b32  	%r75, %r60, %r74;
	mul.wide.u32 	%rd26, %r75, 4;
	add.s64 	%rd27, %rd3, %rd26;
	ld.global.u32 	%r76, [%rd27];
	add.s32 	%r62, %r76, -4;
	setp.lt.u32 	%p13, %r62, 31;
	@%p13 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_21;
$L__BB0_8:                              // %L463
	ld.param.u64 	%rd1, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	ld.param.u64 	%rd6, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	add.s32 	%r61, %r76, -3;
	or.b32  	%r78, %r1, %r3;
	setp.ne.s32 	%p1, %r78, 0;
	mul.wide.u32 	%rd30, %r2, 4;
	add.s64 	%rd8, %rd6, %rd30;
	mov.u32 	%r867, 0;
	@%p1 bra 	$L__BB0_10;
// %bb.9:                               // %L487
	st.global.u32 	[%rd8], %r867;
$L__BB0_10:                             // %L533
	ld.param.u64 	%rd2, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	ld.param.u64 	%rd4, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	bar.sync 	0;
	shl.b32 	%r209, %r2, 13;
	shl.b32 	%r210, %r3, 8;
	shl.b32 	%r211, %r1, 3;
	or.b32  	%r212, %r210, %r211;
	shl.b32 	%r213, %r1, 6;
	and.b32  	%r214, %r213, 64;
	and.b32  	%r215, %r212, 304;
	shr.u32 	%r5, %r1, 2;
	and.b32  	%r216, %r5, 6;
	and.b32  	%r217, %r58, 8;
	or.b32  	%r218, %r216, %r217;
	shl.b32 	%r219, %r218, 9;
	or.b32  	%r220, %r209, %r214;
	or.b32  	%r221, %r220, %r215;
	or.b32  	%r222, %r221, %r219;
	cvt.u64.u32 	%rd31, %r222;
	add.s64 	%rd32, %rd31, %rd1;
	ld.global.v4.u32 	{%r81, %r82, %r89, %r90}, [%rd32];
	and.b32  	%r223, %r210, 256;
	and.b32  	%r224, %r211, 48;
	or.b32  	%r225, %r223, %r224;
	or.b32  	%r226, %r214, %r225;
	or.b32  	%r227, %r209, %r226;
	or.b32  	%r228, %r227, %r219;
	cvt.u64.u32 	%rd33, %r228;
	add.s64 	%rd34, %rd1, %rd33;
	ld.global.v4.u32 	{%r97, %r98, %r105, %r106}, [%rd34+128];
	shl.b32 	%r229, %r2, 11;
	shl.b32 	%r230, %r3, 6;
	shl.b32 	%r231, %r1, 1;
	or.b32  	%r232, %r230, %r231;
	shl.b32 	%r233, %r1, 4;
	and.b32  	%r6, %r233, 16;
	and.b32  	%r234, %r232, 76;
	or.b32  	%r235, %r217, %r5;
	or.b32  	%r236, %r229, %r6;
	or.b32  	%r237, %r236, %r234;
	shl.b32 	%r238, %r235, 9;
	shl.b32 	%r239, %r237, 2;
	or.b32  	%r240, %r238, %r239;
	or.b32  	%r241, %r240, 516;
	cvt.u64.u32 	%rd35, %r241;
	add.s64 	%rd36, %rd1, %rd35;
	ld.global.v4.u32 	{%r113, %r114, %r121, %r122}, [%rd36+-4];
	or.b32  	%r242, %r209, %r224;
	or.b32  	%r243, %r242, %r210;
	or.b32  	%r244, %r243, %r214;
	or.b32  	%r245, %r244, %r238;
	or.b32  	%r246, %r245, 640;
	cvt.u64.u32 	%rd37, %r246;
	add.s64 	%rd38, %rd1, %rd37;
	ld.global.v4.u32 	{%r129, %r130, %r137, %r138}, [%rd38];
	mov.u32 	%r83, 21520;
	// begin inline asm
	prmt.b32 %r145, %r81, %r82, %r83;
	// end inline asm
	mov.u32 	%r87, 30258;
	// begin inline asm
	prmt.b32 %r146, %r81, %r82, %r87;
	// end inline asm
	// begin inline asm
	prmt.b32 %r153, %r89, %r90, %r83;
	// end inline asm
	// begin inline asm
	prmt.b32 %r154, %r89, %r90, %r87;
	// end inline asm
	// begin inline asm
	prmt.b32 %r161, %r97, %r98, %r83;
	// end inline asm
	// begin inline asm
	prmt.b32 %r162, %r97, %r98, %r87;
	// end inline asm
	// begin inline asm
	prmt.b32 %r169, %r105, %r106, %r83;
	// end inline asm
	// begin inline asm
	prmt.b32 %r170, %r105, %r106, %r87;
	// end inline asm
	// begin inline asm
	prmt.b32 %r177, %r113, %r114, %r83;
	// end inline asm
	// begin inline asm
	prmt.b32 %r178, %r113, %r114, %r87;
	// end inline asm
	// begin inline asm
	prmt.b32 %r185, %r121, %r122, %r83;
	// end inline asm
	// begin inline asm
	prmt.b32 %r186, %r121, %r122, %r87;
	// end inline asm
	// begin inline asm
	prmt.b32 %r193, %r129, %r130, %r83;
	// end inline asm
	// begin inline asm
	prmt.b32 %r194, %r129, %r130, %r87;
	// end inline asm
	// begin inline asm
	prmt.b32 %r201, %r137, %r138, %r83;
	// end inline asm
	// begin inline asm
	prmt.b32 %r202, %r137, %r138, %r87;
	// end inline asm
	mov.u32 	%r147, 25152;
	// begin inline asm
	prmt.b32 %r144, %r145, %r146, %r147;
	// end inline asm
	mov.u32 	%r151, 29521;
	// begin inline asm
	prmt.b32 %r148, %r145, %r146, %r151;
	// end inline asm
	// begin inline asm
	prmt.b32 %r152, %r153, %r154, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r156, %r153, %r154, %r151;
	// end inline asm
	// begin inline asm
	prmt.b32 %r160, %r161, %r162, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r164, %r161, %r162, %r151;
	// end inline asm
	// begin inline asm
	prmt.b32 %r168, %r169, %r170, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r172, %r169, %r170, %r151;
	// end inline asm
	// begin inline asm
	prmt.b32 %r176, %r177, %r178, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r180, %r177, %r178, %r151;
	// end inline asm
	// begin inline asm
	prmt.b32 %r184, %r185, %r186, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r188, %r185, %r186, %r151;
	// end inline asm
	// begin inline asm
	prmt.b32 %r192, %r193, %r194, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r196, %r193, %r194, %r151;
	// end inline asm
	// begin inline asm
	prmt.b32 %r200, %r201, %r202, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r204, %r201, %r202, %r151;
	// end inline asm
	and.b32  	%r7, %r1, 2;
	setp.eq.s32 	%p15, %r7, 0;
	selp.b32 	%r247, %r160, %r144, %p15;
	shfl.sync.bfly.b32	%r248, %r247, 2, 31, -1;
	selp.b32 	%r249, %r144, %r248, %p15;
	selp.b32 	%r250, %r248, %r160, %p15;
	selp.b32 	%r251, %r164, %r148, %p15;
	shfl.sync.bfly.b32	%r252, %r251, 2, 31, -1;
	selp.b32 	%r253, %r148, %r252, %p15;
	selp.b32 	%r254, %r252, %r164, %p15;
	selp.b32 	%r255, %r168, %r152, %p15;
	shfl.sync.bfly.b32	%r256, %r255, 2, 31, -1;
	selp.b32 	%r257, %r152, %r256, %p15;
	selp.b32 	%r258, %r256, %r168, %p15;
	selp.b32 	%r259, %r172, %r156, %p15;
	shfl.sync.bfly.b32	%r260, %r259, 2, 31, -1;
	selp.b32 	%r261, %r156, %r260, %p15;
	selp.b32 	%r262, %r260, %r172, %p15;
	selp.b32 	%r263, %r192, %r176, %p15;
	shfl.sync.bfly.b32	%r264, %r263, 2, 31, -1;
	selp.b32 	%r265, %r176, %r264, %p15;
	selp.b32 	%r266, %r264, %r192, %p15;
	selp.b32 	%r267, %r196, %r180, %p15;
	shfl.sync.bfly.b32	%r268, %r267, 2, 31, -1;
	selp.b32 	%r269, %r180, %r268, %p15;
	selp.b32 	%r270, %r268, %r196, %p15;
	selp.b32 	%r271, %r200, %r184, %p15;
	shfl.sync.bfly.b32	%r272, %r271, 2, 31, -1;
	selp.b32 	%r273, %r184, %r272, %p15;
	selp.b32 	%r274, %r272, %r200, %p15;
	selp.b32 	%r275, %r204, %r188, %p15;
	shfl.sync.bfly.b32	%r276, %r275, 2, 31, -1;
	selp.b32 	%r277, %r188, %r276, %p15;
	selp.b32 	%r278, %r276, %r204, %p15;
	and.b32  	%r8, %r1, 4;
	setp.eq.s32 	%p16, %r8, 0;
	selp.b32 	%r279, %r265, %r249, %p16;
	shfl.sync.bfly.b32	%r280, %r279, 4, 31, -1;
	selp.b32 	%r432, %r249, %r280, %p16;
	selp.b32 	%r560, %r280, %r265, %p16;
	selp.b32 	%r281, %r269, %r253, %p16;
	shfl.sync.bfly.b32	%r282, %r281, 4, 31, -1;
	selp.b32 	%r438, %r253, %r282, %p16;
	selp.b32 	%r566, %r282, %r269, %p16;
	selp.b32 	%r283, %r273, %r257, %p16;
	shfl.sync.bfly.b32	%r284, %r283, 4, 31, -1;
	selp.b32 	%r464, %r257, %r284, %p16;
	selp.b32 	%r592, %r284, %r273, %p16;
	selp.b32 	%r285, %r277, %r261, %p16;
	shfl.sync.bfly.b32	%r286, %r285, 4, 31, -1;
	selp.b32 	%r470, %r261, %r286, %p16;
	selp.b32 	%r598, %r286, %r277, %p16;
	selp.b32 	%r287, %r266, %r250, %p16;
	shfl.sync.bfly.b32	%r288, %r287, 4, 31, -1;
	selp.b32 	%r496, %r250, %r288, %p16;
	selp.b32 	%r624, %r288, %r266, %p16;
	selp.b32 	%r289, %r270, %r254, %p16;
	shfl.sync.bfly.b32	%r290, %r289, 4, 31, -1;
	selp.b32 	%r502, %r254, %r290, %p16;
	selp.b32 	%r630, %r290, %r270, %p16;
	selp.b32 	%r291, %r274, %r258, %p16;
	shfl.sync.bfly.b32	%r292, %r291, 4, 31, -1;
	selp.b32 	%r528, %r258, %r292, %p16;
	selp.b32 	%r656, %r292, %r274, %p16;
	selp.b32 	%r293, %r278, %r262, %p16;
	shfl.sync.bfly.b32	%r294, %r293, 4, 31, -1;
	selp.b32 	%r534, %r262, %r294, %p16;
	selp.b32 	%r662, %r294, %r278, %p16;
	shl.b32 	%r295, %r64, 13;
	shl.b32 	%r296, %r3, 1;
	and.b32  	%r297, %r296, 4;
	or.b32  	%r25, %r297, %r59;
	shl.b32 	%r298, %r1, 2;
	and.b32  	%r299, %r298, 28;
	and.b32  	%r300, %r4, 32;
	or.b32  	%r301, %r299, %r300;
	shl.b32 	%r302, %r2, 6;
	or.b32  	%r303, %r302, %r301;
	or.b32  	%r26, %r303, %r295;
	and.b32  	%r304, %r211, 24;
	or.b32  	%r27, %r300, %r304;
	and.b32  	%r28, %r231, 6;
	and.b32  	%r305, %r3, 1;
	neg.s32 	%r306, %r305;
	and.b32  	%r307, %r306, 640;
	or.b32  	%r29, %r235, %r307;
	and.b32  	%r308, %r1, 7;
	or.b32  	%r309, %r60, 640;
	shl.b32 	%r311, %r71, %r62;
	setp.gt.u32 	%p17, %r62, 31;
	selp.b32 	%r30, 0, %r311, %p17;
	min.u32 	%r31, %r61, 31;
	and.b32  	%r32, %r1, 1;
	and.b32  	%r33, %r211, 32;
	shl.b32 	%r312, %r1, 5;
	and.b32  	%r34, %r312, 64;
	shl.b32 	%r313, %r3, 20;
	shl.b32 	%r314, %r1, 15;
	and.b32  	%r315, %r314, 786432;
	or.b32  	%r316, %r315, %r313;
	or.b32  	%r317, %r316, %r229;
	mul.lo.s32 	%r318, %r25, 65;
	add.s32 	%r319, %r301, %r318;
	mul.wide.u32 	%rd39, %r319, 4;
	mov.u64 	%rd40, shmem;
	add.s64 	%rd9, %rd40, %rd39;
	cvt.u64.u32 	%rd41, %r318;
	cvt.u64.u32 	%rd10, %r301;
	add.s64 	%rd42, %rd10, %rd41;
	shl.b64 	%rd43, %rd42, 2;
	add.s64 	%rd11, %rd40, %rd43;
	mul.lo.s32 	%r320, %r308, 20;
	add.s32 	%r321, %r320, %r60;
	mul.wide.u32 	%rd44, %r321, 4;
	add.s64 	%rd45, %rd40, 8320;
	add.s64 	%rd12, %rd45, %rd44;
	add.s32 	%r322, %r309, %r320;
	mul.wide.u32 	%rd46, %r322, 4;
	add.s64 	%rd13, %rd45, %rd46;
	add.s32 	%r323, %r320, 160;
	add.s32 	%r324, %r323, %r60;
	mul.wide.u32 	%rd47, %r324, 4;
	add.s64 	%rd14, %rd45, %rd47;
	add.s32 	%r325, %r309, %r323;
	mul.wide.u32 	%rd48, %r325, 4;
	add.s64 	%rd15, %rd45, %rd48;
	add.s32 	%r326, %r320, 320;
	add.s32 	%r327, %r326, %r60;
	mul.wide.u32 	%rd49, %r327, 4;
	add.s64 	%rd16, %rd45, %rd49;
	add.s32 	%r328, %r309, %r326;
	mul.wide.u32 	%rd50, %r328, 4;
	add.s64 	%rd17, %rd45, %rd50;
	or.b32  	%r329, %r1, 24;
	mul.lo.s32 	%r330, %r329, 20;
	add.s32 	%r331, %r330, %r60;
	mul.wide.u32 	%rd51, %r331, 4;
	add.s64 	%rd18, %rd45, %rd51;
	add.s32 	%r332, %r309, %r330;
	mul.wide.u32 	%rd52, %r332, 4;
	add.s64 	%rd19, %rd45, %rd52;
	shl.b32 	%r35, %r317, 2;
	mov.pred 	%p59, 0;
$L__BB0_11:                             // %L1565
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_13 Depth 2
                                        //       Child Loop BB0_14 Depth 3
	add.s32 	%r333, %r867, %r64;
	setp.ge.s32 	%p18, %r333, %r65;
	@%p18 bra 	$L__BB0_17;
// %bb.12:                              // %L1573.preheader
                                        //   in Loop: Header=BB0_11 Depth=1
	or.b32  	%r37, %r867, 8;
	or.b32  	%r38, %r867, 16;
	or.b32  	%r39, %r867, 24;
	mov.u32 	%r434, 0;
	mov.u32 	%r868, %r434;
	mov.u32 	%r869, %r434;
	mov.u32 	%r870, %r434;
	mov.u32 	%r871, %r434;
	mov.u32 	%r872, %r434;
	mov.u32 	%r873, %r434;
	mov.u32 	%r874, %r434;
$L__BB0_13:                             // %L1573
                                        //   Parent Loop BB0_11 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_14 Depth 3
	cvt.u32.u64 	%r336, %rd10;
	add.s32 	%r337, %r868, %r867;
	or.b32  	%r338, %r25, %r337;
	shl.b32 	%r339, %r338, 13;
	and.b32  	%r340, %r339, 268230656;
	add.s32 	%r341, %r26, %r340;
	shr.s32 	%r342, %r341, 31;
	shr.u32 	%r343, %r342, 4;
	add.s32 	%r344, %r341, %r343;
	shr.s32 	%r345, %r344, 28;
	setp.lt.s32 	%p19, %r341, 0;
	and.b32  	%r346, %r344, -268435456;
	setp.ne.s32 	%p20, %r346, %r341;
	and.pred  	%p21, %p19, %p20;
	selp.u32 	%r347, 1, 0, %p21;
	sub.s32 	%r348, %r347, %r345;
	shl.b32 	%r349, %r348, 28;
	or.b32  	%r350, %r341, 1;
	add.s32 	%r351, %r350, %r349;
	mul.wide.s32 	%rd53, %r351, 4;
	add.s64 	%rd54, %rd2, %rd53;
	ld.global.v4.u32 	{%r352, %r353, %r354, %r355}, [%rd54+-4];
	add.s32 	%r356, %r37, %r868;
	or.b32  	%r357, %r25, %r356;
	shl.b32 	%r358, %r357, 13;
	and.b32  	%r359, %r358, 268296192;
	add.s32 	%r360, %r26, %r359;
	shr.s32 	%r361, %r360, 31;
	shr.u32 	%r362, %r361, 4;
	add.s32 	%r363, %r360, %r362;
	shr.s32 	%r364, %r363, 28;
	setp.lt.s32 	%p22, %r360, 0;
	and.b32  	%r365, %r363, -268435456;
	setp.ne.s32 	%p23, %r365, %r360;
	and.pred  	%p24, %p22, %p23;
	selp.u32 	%r366, 1, 0, %p24;
	sub.s32 	%r367, %r366, %r364;
	shl.b32 	%r368, %r367, 28;
	or.b32  	%r369, %r360, 1;
	add.s32 	%r370, %r369, %r368;
	mul.wide.s32 	%rd55, %r370, 4;
	add.s64 	%rd56, %rd2, %rd55;
	ld.global.v4.u32 	{%r371, %r372, %r373, %r374}, [%rd56+-4];
	add.s32 	%r375, %r38, %r868;
	or.b32  	%r376, %r25, %r375;
	shl.b32 	%r377, %r376, 13;
	and.b32  	%r378, %r377, 268361728;
	add.s32 	%r379, %r26, %r378;
	shr.s32 	%r380, %r379, 31;
	shr.u32 	%r381, %r380, 4;
	add.s32 	%r382, %r379, %r381;
	shr.s32 	%r383, %r382, 28;
	setp.lt.s32 	%p25, %r379, 0;
	and.b32  	%r384, %r382, -268435456;
	setp.ne.s32 	%p26, %r384, %r379;
	and.pred  	%p27, %p25, %p26;
	selp.u32 	%r385, 1, 0, %p27;
	sub.s32 	%r386, %r385, %r383;
	shl.b32 	%r387, %r386, 28;
	or.b32  	%r388, %r379, 1;
	add.s32 	%r389, %r388, %r387;
	mul.wide.s32 	%rd57, %r389, 4;
	add.s64 	%rd58, %rd2, %rd57;
	ld.global.v4.u32 	{%r390, %r391, %r392, %r393}, [%rd58+-4];
	add.s32 	%r394, %r39, %r868;
	or.b32  	%r395, %r25, %r394;
	shl.b32 	%r396, %r395, 13;
	and.b32  	%r397, %r396, 268427264;
	add.s32 	%r398, %r26, %r397;
	shr.s32 	%r399, %r398, 31;
	shr.u32 	%r400, %r399, 4;
	add.s32 	%r401, %r398, %r400;
	shr.s32 	%r402, %r401, 28;
	setp.lt.s32 	%p28, %r398, 0;
	and.b32  	%r403, %r401, -268435456;
	setp.ne.s32 	%p29, %r403, %r398;
	and.pred  	%p30, %p28, %p29;
	selp.u32 	%r404, 1, 0, %p30;
	sub.s32 	%r405, %r404, %r402;
	shl.b32 	%r406, %r405, 28;
	or.b32  	%r407, %r398, 1;
	add.s32 	%r408, %r407, %r406;
	mul.wide.s32 	%rd59, %r408, 4;
	add.s64 	%rd60, %rd2, %rd59;
	ld.global.v4.u32 	{%r409, %r410, %r411, %r412}, [%rd60+-4];
	st.shared.u32 	[%rd9], %r352;
	st.shared.u32 	[%rd11+4], %r353;
	st.shared.u32 	[%rd11+8], %r354;
	st.shared.u32 	[%rd11+12], %r355;
	and.b32  	%r413, %r357, 15;
	mul.lo.s32 	%r414, %r413, 65;
	add.s32 	%r415, %r336, %r414;
	mul.wide.u32 	%rd61, %r415, 4;
	add.s64 	%rd63, %rd40, %rd61;
	st.shared.u32 	[%rd63], %r371;
	cvt.u64.u32 	%rd64, %r414;
	add.s64 	%rd65, %rd10, %rd64;
	shl.b64 	%rd66, %rd65, 2;
	add.s64 	%rd67, %rd40, %rd66;
	st.shared.u32 	[%rd67+4], %r372;
	st.shared.u32 	[%rd67+8], %r373;
	st.shared.u32 	[%rd67+12], %r374;
	and.b32  	%r416, %r376, 23;
	mul.lo.s32 	%r417, %r416, 65;
	add.s32 	%r418, %r336, %r417;
	mul.wide.u32 	%rd68, %r418, 4;
	add.s64 	%rd69, %rd40, %rd68;
	st.shared.u32 	[%rd69], %r390;
	cvt.u64.u32 	%rd70, %r417;
	add.s64 	%rd71, %rd10, %rd70;
	shl.b64 	%rd72, %rd71, 2;
	add.s64 	%rd73, %rd40, %rd72;
	st.shared.u32 	[%rd73+4], %r391;
	st.shared.u32 	[%rd73+8], %r392;
	st.shared.u32 	[%rd73+12], %r393;
	and.b32  	%r419, %r395, 31;
	mul.lo.s32 	%r420, %r419, 65;
	add.s32 	%r421, %r336, %r420;
	mul.wide.u32 	%rd74, %r421, 4;
	add.s64 	%rd75, %rd40, %rd74;
	st.shared.u32 	[%rd75], %r409;
	cvt.u64.u32 	%rd76, %r420;
	add.s64 	%rd77, %rd10, %rd76;
	shl.b64 	%rd78, %rd77, 2;
	add.s64 	%rd79, %rd40, %rd78;
	st.shared.u32 	[%rd79+4], %r410;
	st.shared.u32 	[%rd79+8], %r411;
	st.shared.u32 	[%rd79+12], %r412;
	bar.sync 	0;
	mov.u32 	%r875, %r434;
$L__BB0_14:                             // %L5008
                                        //   Parent Loop BB0_11 Depth=1
                                        //     Parent Loop BB0_13 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r684, %r5, %r875;
	mad.lo.s32 	%r685, %r684, 65, %r27;
	mul.wide.u32 	%rd80, %r685, 4;
	add.s64 	%rd82, %rd40, %rd80;
	ld.shared.u32 	%r423, [%rd82];
	mov.u32 	%r424, 134744072;
	mov.u32 	%r425, 252645135;
	// begin inline asm
	lop3.b32 %r422, %r423, %r424, %r425, 40;
	// end inline asm
	add.s32 	%r686, %r422, 2021161080;
	xor.b32  	%r433, %r686, -2139062144;
	shr.u32 	%r427, %r423, 4;
	// begin inline asm
	lop3.b32 %r426, %r427, %r424, %r425, 40;
	// end inline asm
	add.s32 	%r687, %r426, 2021161080;
	xor.b32  	%r439, %r687, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r430, %r431}, {%r432}, {%r433}, {%r434, %r434};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r436, %r437}, {%r438}, {%r439}, {%r434, %r434};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r442, %r443}, {%r432}, {%r439}, {%r434, %r434};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r448, %r449}, {%r438}, {%r433}, {%r442, %r443};
	// end inline asm
	ld.shared.u32 	%r455, [%rd82+4];
	// begin inline asm
	lop3.b32 %r454, %r455, %r424, %r425, 40;
	// end inline asm
	add.s32 	%r688, %r454, 2021161080;
	xor.b32  	%r465, %r688, -2139062144;
	shr.u32 	%r459, %r455, 4;
	// begin inline asm
	lop3.b32 %r458, %r459, %r424, %r425, 40;
	// end inline asm
	add.s32 	%r689, %r458, 2021161080;
	xor.b32  	%r471, %r689, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r462, %r463}, {%r464}, {%r465}, {%r430, %r431};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r468, %r469}, {%r470}, {%r471}, {%r436, %r437};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r474, %r475}, {%r464}, {%r471}, {%r448, %r449};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r480, %r481}, {%r470}, {%r465}, {%r474, %r475};
	// end inline asm
	ld.shared.u32 	%r487, [%rd82+8];
	// begin inline asm
	lop3.b32 %r486, %r487, %r424, %r425, 40;
	// end inline asm
	add.s32 	%r690, %r486, 2021161080;
	xor.b32  	%r497, %r690, -2139062144;
	shr.u32 	%r491, %r487, 4;
	// begin inline asm
	lop3.b32 %r490, %r491, %r424, %r425, 40;
	// end inline asm
	add.s32 	%r691, %r490, 2021161080;
	xor.b32  	%r503, %r691, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r494, %r495}, {%r496}, {%r497}, {%r462, %r463};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r500, %r501}, {%r502}, {%r503}, {%r468, %r469};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r506, %r507}, {%r496}, {%r503}, {%r480, %r481};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r512, %r513}, {%r502}, {%r497}, {%r506, %r507};
	// end inline asm
	ld.shared.u32 	%r519, [%rd82+12];
	// begin inline asm
	lop3.b32 %r518, %r519, %r424, %r425, 40;
	// end inline asm
	add.s32 	%r692, %r518, 2021161080;
	xor.b32  	%r529, %r692, -2139062144;
	shr.u32 	%r523, %r519, 4;
	// begin inline asm
	lop3.b32 %r522, %r523, %r424, %r425, 40;
	// end inline asm
	add.s32 	%r693, %r522, 2021161080;
	xor.b32  	%r535, %r693, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r526, %r527}, {%r528}, {%r529}, {%r494, %r495};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r532, %r533}, {%r534}, {%r535}, {%r500, %r501};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r538, %r539}, {%r528}, {%r535}, {%r512, %r513};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r544, %r545}, {%r534}, {%r529}, {%r538, %r539};
	// end inline asm
	ld.shared.u32 	%r551, [%rd82+16];
	// begin inline asm
	lop3.b32 %r550, %r551, %r424, %r425, 40;
	// end inline asm
	add.s32 	%r694, %r550, 2021161080;
	xor.b32  	%r561, %r694, -2139062144;
	shr.u32 	%r555, %r551, 4;
	// begin inline asm
	lop3.b32 %r554, %r555, %r424, %r425, 40;
	// end inline asm
	add.s32 	%r695, %r554, 2021161080;
	xor.b32  	%r567, %r695, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r558, %r559}, {%r560}, {%r561}, {%r526, %r527};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r564, %r565}, {%r566}, {%r567}, {%r532, %r533};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r570, %r571}, {%r560}, {%r567}, {%r544, %r545};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r576, %r577}, {%r566}, {%r561}, {%r570, %r571};
	// end inline asm
	ld.shared.u32 	%r583, [%rd82+20];
	// begin inline asm
	lop3.b32 %r582, %r583, %r424, %r425, 40;
	// end inline asm
	add.s32 	%r696, %r582, 2021161080;
	xor.b32  	%r593, %r696, -2139062144;
	shr.u32 	%r587, %r583, 4;
	// begin inline asm
	lop3.b32 %r586, %r587, %r424, %r425, 40;
	// end inline asm
	add.s32 	%r697, %r586, 2021161080;
	xor.b32  	%r599, %r697, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r590, %r591}, {%r592}, {%r593}, {%r558, %r559};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r596, %r597}, {%r598}, {%r599}, {%r564, %r565};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r602, %r603}, {%r592}, {%r599}, {%r576, %r577};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r608, %r609}, {%r598}, {%r593}, {%r602, %r603};
	// end inline asm
	ld.shared.u32 	%r615, [%rd82+24];
	// begin inline asm
	lop3.b32 %r614, %r615, %r424, %r425, 40;
	// end inline asm
	add.s32 	%r698, %r614, 2021161080;
	xor.b32  	%r625, %r698, -2139062144;
	shr.u32 	%r619, %r615, 4;
	// begin inline asm
	lop3.b32 %r618, %r619, %r424, %r425, 40;
	// end inline asm
	add.s32 	%r699, %r618, 2021161080;
	xor.b32  	%r631, %r699, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r622, %r623}, {%r624}, {%r625}, {%r590, %r591};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r628, %r629}, {%r630}, {%r631}, {%r596, %r597};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r634, %r635}, {%r624}, {%r631}, {%r608, %r609};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r640, %r641}, {%r630}, {%r625}, {%r634, %r635};
	// end inline asm
	ld.shared.u32 	%r647, [%rd82+28];
	// begin inline asm
	lop3.b32 %r646, %r647, %r424, %r425, 40;
	// end inline asm
	add.s32 	%r700, %r646, 2021161080;
	xor.b32  	%r657, %r700, -2139062144;
	shr.u32 	%r651, %r647, 4;
	// begin inline asm
	lop3.b32 %r650, %r651, %r424, %r425, 40;
	// end inline asm
	add.s32 	%r701, %r650, 2021161080;
	xor.b32  	%r663, %r701, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r654, %r655}, {%r656}, {%r657}, {%r622, %r623};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r660, %r661}, {%r662}, {%r663}, {%r628, %r629};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r666, %r667}, {%r656}, {%r663}, {%r640, %r641};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r672, %r673}, {%r662}, {%r657}, {%r666, %r667};
	// end inline asm
	sub.s32 	%r702, %r654, %r660;
	add.s32 	%r703, %r702, 4;
	shr.s32 	%r680, %r703, 3;
	add.s32 	%r704, %r672, 4;
	shr.s32 	%r679, %r704, 3;
	sub.s32 	%r705, %r655, %r661;
	add.s32 	%r706, %r705, 4;
	shr.s32 	%r683, %r706, 3;
	add.s32 	%r707, %r673, 4;
	shr.s32 	%r682, %r707, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r678, %r679, %r680;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r681, %r682, %r683;
	// end inline asm
	or.b32  	%r708, %r28, %r875;
	mad.lo.s32 	%r709, %r708, 20, %r29;
	mul.wide.u32 	%rd83, %r709, 4;
	add.s64 	%rd84, %rd40, %rd83;
	st.shared.u32 	[%rd84+8320], %r678;
	st.shared.u32 	[%rd84+8400], %r681;
	add.s32 	%r875, %r875, 8;
	setp.ne.s32 	%p31, %r875, 32;
	@%p31 bra 	$L__BB0_14;
// %bb.15:                              // %L6879
                                        //   in Loop: Header=BB0_13 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r728, [%rd12];
	ld.shared.u32 	%r729, [%rd13];
	ld.shared.u32 	%r730, [%rd14];
	ld.shared.u32 	%r731, [%rd15];
	ld.shared.u32 	%r732, [%rd16];
	ld.shared.u32 	%r733, [%rd17];
	ld.shared.u32 	%r734, [%rd18];
	ld.shared.u32 	%r735, [%rd19];
	cvt.s32.s16 	%r736, %r728;
	shr.s32 	%r737, %r728, 16;
	cvt.s32.s16 	%r738, %r729;
	shr.s32 	%r739, %r729, 16;
	cvt.s32.s16 	%r740, %r730;
	shr.s32 	%r741, %r730, 16;
	cvt.s32.s16 	%r742, %r731;
	shr.s32 	%r743, %r731, 16;
	cvt.s32.s16 	%r744, %r732;
	shr.s32 	%r745, %r732, 16;
	cvt.s32.s16 	%r746, %r733;
	shr.s32 	%r747, %r733, 16;
	cvt.s32.s16 	%r748, %r734;
	shr.s32 	%r749, %r734, 16;
	cvt.s32.s16 	%r750, %r735;
	shr.s32 	%r751, %r735, 16;
	add.s32 	%r752, %r736, %r30;
	add.s32 	%r753, %r752, %r738;
	shr.s32 	%r754, %r753, %r31;
	add.s32 	%r755, %r737, %r30;
	add.s32 	%r756, %r755, %r739;
	shr.s32 	%r757, %r756, %r31;
	add.s32 	%r758, %r740, %r30;
	add.s32 	%r759, %r758, %r742;
	shr.s32 	%r760, %r759, %r31;
	add.s32 	%r761, %r741, %r30;
	add.s32 	%r762, %r761, %r743;
	shr.s32 	%r763, %r762, %r31;
	add.s32 	%r764, %r744, %r30;
	add.s32 	%r765, %r764, %r746;
	shr.s32 	%r766, %r765, %r31;
	add.s32 	%r767, %r745, %r30;
	add.s32 	%r768, %r767, %r747;
	shr.s32 	%r769, %r768, %r31;
	add.s32 	%r770, %r748, %r30;
	add.s32 	%r771, %r770, %r750;
	shr.s32 	%r772, %r771, %r31;
	add.s32 	%r773, %r749, %r30;
	add.s32 	%r774, %r773, %r751;
	shr.s32 	%r775, %r774, %r31;
	max.s32 	%r776, %r754, -7;
	min.s32 	%r715, %r776, 7;
	setp.ne.s32 	%p32, %r715, %r754;
	or.pred  	%p33, %p59, %p32;
	max.s32 	%r777, %r757, -7;
	min.s32 	%r722, %r777, 7;
	setp.ne.s32 	%p34, %r722, %r757;
	or.pred  	%p35, %p34, %p33;
	max.s32 	%r778, %r760, -7;
	min.s32 	%r714, %r778, 7;
	setp.ne.s32 	%p36, %r714, %r760;
	or.pred  	%p37, %p35, %p36;
	max.s32 	%r779, %r763, -7;
	min.s32 	%r721, %r779, 7;
	setp.ne.s32 	%p38, %r721, %r763;
	or.pred  	%p39, %p38, %p37;
	max.s32 	%r780, %r766, -7;
	min.s32 	%r712, %r780, 7;
	setp.ne.s32 	%p40, %r712, %r766;
	or.pred  	%p41, %p39, %p40;
	max.s32 	%r781, %r769, -7;
	min.s32 	%r719, %r781, 7;
	setp.ne.s32 	%p42, %r719, %r769;
	or.pred  	%p43, %p42, %p41;
	max.s32 	%r782, %r772, -7;
	min.s32 	%r711, %r782, 7;
	setp.ne.s32 	%p44, %r711, %r772;
	or.pred  	%p45, %p43, %p44;
	max.s32 	%r783, %r775, -7;
	min.s32 	%r718, %r783, 7;
	setp.ne.s32 	%p46, %r718, %r775;
	or.pred  	%p59, %p46, %p45;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r710, %r711, %r712, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r713, %r714, %r715, %r710;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r717, %r718, %r719, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r720, %r721, %r722, %r717;
	// end inline asm
	shl.b32 	%r727, %r720, 4;
	// begin inline asm
	lop3.b32 %r794, %r425, %r713, %r727, 202;
	// end inline asm
	setp.eq.s32 	%p47, %r868, 0;
	selp.b32 	%r873, %r794, %r873, %p47;
	selp.b32 	%r874, %r794, %r874, %p47;
	setp.eq.s32 	%p48, %r868, 32;
	selp.b32 	%r869, %r794, %r869, %p48;
	selp.b32 	%r870, %r794, %r870, %p48;
	setp.eq.s32 	%p49, %r868, 64;
	selp.b32 	%r871, %r794, %r871, %p49;
	selp.b32 	%r872, %r794, %r872, %p49;
	add.s32 	%r56, %r868, 32;
	setp.ne.s32 	%p50, %r868, 96;
	mov.u32 	%r868, %r56;
	@%p50 bra 	$L__BB0_13;
// %bb.16:                              // %L8157.L8163_crit_edge
                                        //   in Loop: Header=BB0_11 Depth=1
	setp.eq.s32 	%p51, %r32, 0;
	// begin inline asm
	prmt.b32 %r784, %r873, %r869, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r788, %r874, %r870, %r151;
	// end inline asm
	// begin inline asm
	prmt.b32 %r792, %r871, %r794, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r796, %r872, %r794, %r151;
	// end inline asm
	selp.b32 	%r832, %r788, %r784, %p51;
	shfl.sync.bfly.b32	%r833, %r832, 1, 31, -1;
	selp.b32 	%r801, %r784, %r833, %p51;
	selp.b32 	%r802, %r833, %r788, %p51;
	selp.b32 	%r834, %r796, %r792, %p51;
	shfl.sync.bfly.b32	%r835, %r834, 1, 31, -1;
	selp.b32 	%r809, %r792, %r835, %p51;
	selp.b32 	%r810, %r835, %r796, %p51;
	// begin inline asm
	prmt.b32 %r800, %r801, %r802, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r804, %r801, %r802, %r151;
	// end inline asm
	// begin inline asm
	prmt.b32 %r808, %r809, %r810, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r812, %r809, %r810, %r151;
	// end inline asm
	selp.b32 	%r836, %r808, %r800, %p15;
	shfl.sync.bfly.b32	%r837, %r836, 2, 31, -1;
	selp.b32 	%r817, %r800, %r837, %p15;
	selp.b32 	%r818, %r837, %r808, %p15;
	selp.b32 	%r838, %r812, %r804, %p15;
	shfl.sync.bfly.b32	%r839, %r838, 2, 31, -1;
	selp.b32 	%r825, %r804, %r839, %p15;
	selp.b32 	%r826, %r839, %r812, %p15;
	// begin inline asm
	prmt.b32 %r816, %r817, %r818, %r83;
	// end inline asm
	// begin inline asm
	prmt.b32 %r820, %r817, %r818, %r87;
	// end inline asm
	// begin inline asm
	prmt.b32 %r824, %r825, %r826, %r83;
	// end inline asm
	// begin inline asm
	prmt.b32 %r828, %r825, %r826, %r87;
	// end inline asm
	selp.b32 	%r840, %r824, %r816, %p16;
	shfl.sync.bfly.b32	%r841, %r840, 4, 31, -1;
	selp.b32 	%r842, %r816, %r841, %p16;
	selp.b32 	%r843, %r841, %r824, %p16;
	selp.b32 	%r844, %r828, %r820, %p16;
	shfl.sync.bfly.b32	%r845, %r844, 4, 31, -1;
	selp.b32 	%r846, %r820, %r845, %p16;
	selp.b32 	%r847, %r845, %r828, %p16;
	selp.b32 	%r848, %r846, %r842, %p51;
	shfl.sync.bfly.b32	%r849, %r848, 1, 31, -1;
	selp.b32 	%r850, %r842, %r849, %p51;
	selp.b32 	%r851, %r849, %r846, %p51;
	selp.b32 	%r852, %r847, %r843, %p51;
	shfl.sync.bfly.b32	%r853, %r852, 1, 31, -1;
	selp.b32 	%r854, %r843, %r853, %p51;
	selp.b32 	%r855, %r853, %r847, %p51;
	and.b32  	%r856, %r867, 8064;
	or.b32  	%r857, %r856, %r6;
	or.b32  	%r858, %r857, %r33;
	or.b32  	%r859, %r858, %r34;
	or.b32  	%r860, %r859, %r35;
	cvt.u64.u32 	%rd85, %r860;
	add.s64 	%rd86, %rd4, %rd85;
	st.global.v4.u32 	[%rd86], {%r850, %r854, %r851, %r855};
	add.s32 	%r57, %r867, 128;
	setp.ne.s32 	%p54, %r867, 32640;
	mov.u32 	%r867, %r57;
	@%p54 bra 	$L__BB0_11;
$L__BB0_17:                             // %L8544
	selp.u32 	%r861, 1, 0, %p59;
	{ 
	.reg .pred 	%p1; 
	.reg .pred 	%p2; 
	setp.ne.u32 	%p1, %r861, 0; 
	bar.red.or.pred 	%p2, 0, %p1; 
	selp.u32 	%r862, 1, 0, %p2; 
	}
	setp.eq.s32 	%p55, %r862, 0;
	or.pred  	%p56, %p55, %p1;
	@%p56 bra 	$L__BB0_19;
// %bb.18:                              // %L8575
	st.global.u32 	[%rd8], %r71;
$L__BB0_19:                             // %L8621
	mov.u32 	%r864, 0;
	st.global.u32 	[%rd7], %r864;
	ret;
$L__BB0_7:                              // %L152
	mov.u32 	%r865, 2;
	st.global.u32 	[%rd7], %r865;
	mov.u64 	%rd87, exception716;
	cvta.global.u64 	%rd88, %rd87;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd88;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd20;
	st.param.b32 	[param0+8], %r63;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd21, exception1723;
	cvta.global.u64 	%rd22, %rd21;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd22;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd20;
	st.param.b32 	[param0+8], %r63;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L24
	mov.u64 	%rd23, exception1723;
	cvta.global.u64 	%rd24, %rd23;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd24;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd20;
	st.param.b32 	[param0+8], %r63;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_21:                             // %L370
	mov.u32 	%r77, 3;
	st.global.u32 	[%rd7], %r77;
	mov.u64 	%rd28, exception716;
	cvta.global.u64 	%rd29, %rd28;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd29;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd20;
	st.param.b32 	[param0+8], %r63;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
