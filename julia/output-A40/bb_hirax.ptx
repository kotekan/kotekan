// PTX kernel code for CUDA baseband beamformer
// This file has been generated automatically by `bb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for bb(::Int32, ::Int32, ::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=128, blocks_per_sm=8

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception761[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32]
)
.reqntid 128, 1, 1
.minnctapersm 8
{
	.reg .pred 	%p<33>;
	.reg .b32 	%r<875>;
	.reg .b64 	%rd<86>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r61, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd15, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r64, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r64, 8319;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r65, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r65, 13439;
	@%p2 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L26
	ld.param.u32 	%r62, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	ld.param.u64 	%rd5, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r4, %ctaid.x;
	shl.b32 	%r5, %r4, 7;
	or.b32  	%r66, %r2, %r3;
	or.b32  	%r67, %r66, %r5;
	mul.wide.u32 	%rd20, %r67, 4;
	add.s64 	%rd6, %rd5, %rd20;
	mov.u32 	%r68, 1;
	st.global.u32 	[%rd6], %r68;
	setp.lt.s32 	%p3, %r62, 0;
	@%p3 bra 	$L__BB0_7;
// %bb.5:                               // %L128
	ld.param.u32 	%r63, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p4, %r63, %r62;
	setp.gt.s32 	%p5, %r63, 131072;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_7;
// %bb.6:                               // %L138
	sub.s32 	%r69, %r63, %r62;
	and.b32  	%r70, %r69, 127;
	setp.eq.s32 	%p7, %r70, 0;
	@%p7 bra 	$L__BB0_16;
	bra.uni 	$L__BB0_7;
$L__BB0_16:                             // %pass122
	ld.param.u64 	%rd3, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	shr.u32 	%r25, %r3, 3;
	shl.b32 	%r26, %r1, 2;
	or.b32  	%r27, %r25, %r26;
	and.b32  	%r71, %r4, 2032;
	or.b32  	%r72, %r27, %r71;
	mul.wide.u32 	%rd21, %r72, 4;
	add.s64 	%rd22, %rd3, %rd21;
	ld.global.u32 	%r28, [%rd22];
	add.s32 	%r29, %r28, -4;
	setp.gt.u32 	%p8, %r29, 30;
	@%p8 bra 	$L__BB0_8;
// %bb.17:                              // %pass202
	ld.param.u64 	%rd1, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	ld.param.u64 	%rd2, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	ld.param.u64 	%rd4, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	add.s32 	%r203, %r28, -3;
	shl.b32 	%r204, %r3, 6;
	and.b32  	%r205, %r204, 64;
	shl.b32 	%r206, %r1, 8;
	shl.b32 	%r207, %r3, 3;
	and.b32  	%r208, %r207, 48;
	and.b32  	%r209, %r206, 256;
	or.b32  	%r210, %r205, %r209;
	or.b32  	%r211, %r208, %r210;
	shl.b32 	%r212, %r4, 9;
	and.b32  	%r213, %r212, 8192;
	shr.u32 	%r30, %r3, 2;
	and.b32  	%r214, %r30, 6;
	and.b32  	%r215, %r26, 8;
	or.b32  	%r216, %r214, %r215;
	shl.b32 	%r217, %r216, 9;
	and.b32  	%r218, %r212, 1032192;
	or.b32  	%r219, %r213, %r211;
	or.b32  	%r220, %r219, %r217;
	or.b32  	%r221, %r220, %r218;
	cvt.u64.u32 	%rd25, %r221;
	add.s64 	%rd26, %rd1, %rd25;
	ld.global.v4.u32 	{%r75, %r76, %r83, %r84}, [%rd26];
	shl.b32 	%r222, %r3, 4;
	and.b32  	%r223, %r222, 16;
	shl.b32 	%r224, %r1, 6;
	and.b32  	%r225, %r224, 64;
	or.b32  	%r226, %r223, %r225;
	shl.b32 	%r227, %r3, 1;
	and.b32  	%r228, %r227, 12;
	or.b32  	%r229, %r228, %r226;
	and.b32  	%r230, %r5, 2048;
	shl.b32 	%r231, %r216, 7;
	and.b32  	%r232, %r5, 258048;
	or.b32  	%r233, %r230, %r229;
	or.b32  	%r234, %r233, %r231;
	or.b32  	%r235, %r234, %r232;
	or.b32  	%r236, %r235, 32;
	mul.wide.u32 	%rd27, %r236, 4;
	add.s64 	%rd28, %rd1, %rd27;
	ld.global.v4.u32 	{%r91, %r92, %r99, %r100}, [%rd28];
	or.b32  	%r237, %r215, %r30;
	shl.b32 	%r238, %r237, 7;
	or.b32  	%r239, %r224, %r223;
	or.b32  	%r240, %r239, %r228;
	or.b32  	%r241, %r240, %r230;
	or.b32  	%r242, %r241, %r232;
	or.b32  	%r243, %r242, %r238;
	or.b32  	%r244, %r243, 128;
	mul.wide.u32 	%rd29, %r244, 4;
	add.s64 	%rd30, %rd1, %rd29;
	ld.global.v4.u32 	{%r107, %r108, %r115, %r116}, [%rd30];
	or.b32  	%r245, %r243, 160;
	add.s32 	%r246, %r245, 1;
	mul.wide.u32 	%rd31, %r246, 4;
	add.s64 	%rd32, %rd1, %rd31;
	ld.global.v4.u32 	{%r123, %r124, %r131, %r132}, [%rd32+-4];
	mov.u32 	%r133, 21520;
	// begin inline asm
	prmt.b32 %r139, %r75, %r76, %r133;
	// end inline asm
	mov.u32 	%r137, 30258;
	// begin inline asm
	prmt.b32 %r140, %r75, %r76, %r137;
	// end inline asm
	// begin inline asm
	prmt.b32 %r147, %r83, %r84, %r133;
	// end inline asm
	// begin inline asm
	prmt.b32 %r148, %r83, %r84, %r137;
	// end inline asm
	// begin inline asm
	prmt.b32 %r155, %r91, %r92, %r133;
	// end inline asm
	// begin inline asm
	prmt.b32 %r156, %r91, %r92, %r137;
	// end inline asm
	// begin inline asm
	prmt.b32 %r163, %r99, %r100, %r133;
	// end inline asm
	// begin inline asm
	prmt.b32 %r164, %r99, %r100, %r137;
	// end inline asm
	// begin inline asm
	prmt.b32 %r171, %r107, %r108, %r133;
	// end inline asm
	// begin inline asm
	prmt.b32 %r172, %r107, %r108, %r137;
	// end inline asm
	// begin inline asm
	prmt.b32 %r179, %r115, %r116, %r133;
	// end inline asm
	// begin inline asm
	prmt.b32 %r180, %r115, %r116, %r137;
	// end inline asm
	// begin inline asm
	prmt.b32 %r187, %r123, %r124, %r133;
	// end inline asm
	// begin inline asm
	prmt.b32 %r188, %r123, %r124, %r137;
	// end inline asm
	// begin inline asm
	prmt.b32 %r195, %r131, %r132, %r133;
	// end inline asm
	// begin inline asm
	prmt.b32 %r196, %r131, %r132, %r137;
	// end inline asm
	mov.u32 	%r197, 25152;
	// begin inline asm
	prmt.b32 %r138, %r139, %r140, %r197;
	// end inline asm
	mov.u32 	%r201, 29521;
	// begin inline asm
	prmt.b32 %r142, %r139, %r140, %r201;
	// end inline asm
	// begin inline asm
	prmt.b32 %r146, %r147, %r148, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r150, %r147, %r148, %r201;
	// end inline asm
	// begin inline asm
	prmt.b32 %r154, %r155, %r156, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r158, %r155, %r156, %r201;
	// end inline asm
	// begin inline asm
	prmt.b32 %r162, %r163, %r164, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r166, %r163, %r164, %r201;
	// end inline asm
	// begin inline asm
	prmt.b32 %r170, %r171, %r172, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r174, %r171, %r172, %r201;
	// end inline asm
	// begin inline asm
	prmt.b32 %r178, %r179, %r180, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r182, %r179, %r180, %r201;
	// end inline asm
	// begin inline asm
	prmt.b32 %r186, %r187, %r188, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r190, %r187, %r188, %r201;
	// end inline asm
	// begin inline asm
	prmt.b32 %r194, %r195, %r196, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r198, %r195, %r196, %r201;
	// end inline asm
	and.b32  	%r31, %r3, 2;
	setp.eq.s32 	%p9, %r31, 0;
	selp.b32 	%r247, %r154, %r138, %p9;
	shfl.sync.bfly.b32	%r248, %r247, 2, 31, -1;
	selp.b32 	%r249, %r138, %r248, %p9;
	selp.b32 	%r250, %r248, %r154, %p9;
	selp.b32 	%r251, %r158, %r142, %p9;
	shfl.sync.bfly.b32	%r252, %r251, 2, 31, -1;
	selp.b32 	%r253, %r142, %r252, %p9;
	selp.b32 	%r254, %r252, %r158, %p9;
	selp.b32 	%r255, %r162, %r146, %p9;
	shfl.sync.bfly.b32	%r256, %r255, 2, 31, -1;
	selp.b32 	%r257, %r146, %r256, %p9;
	selp.b32 	%r258, %r256, %r162, %p9;
	selp.b32 	%r259, %r166, %r150, %p9;
	shfl.sync.bfly.b32	%r260, %r259, 2, 31, -1;
	selp.b32 	%r261, %r150, %r260, %p9;
	selp.b32 	%r262, %r260, %r166, %p9;
	selp.b32 	%r263, %r186, %r170, %p9;
	shfl.sync.bfly.b32	%r264, %r263, 2, 31, -1;
	selp.b32 	%r265, %r170, %r264, %p9;
	selp.b32 	%r266, %r264, %r186, %p9;
	selp.b32 	%r267, %r190, %r174, %p9;
	shfl.sync.bfly.b32	%r268, %r267, 2, 31, -1;
	selp.b32 	%r269, %r174, %r268, %p9;
	selp.b32 	%r270, %r268, %r190, %p9;
	selp.b32 	%r271, %r194, %r178, %p9;
	shfl.sync.bfly.b32	%r272, %r271, 2, 31, -1;
	selp.b32 	%r273, %r178, %r272, %p9;
	selp.b32 	%r274, %r272, %r194, %p9;
	selp.b32 	%r275, %r198, %r182, %p9;
	shfl.sync.bfly.b32	%r276, %r275, 2, 31, -1;
	selp.b32 	%r277, %r182, %r276, %p9;
	selp.b32 	%r278, %r276, %r198, %p9;
	and.b32  	%r32, %r3, 4;
	setp.eq.s32 	%p10, %r32, 0;
	selp.b32 	%r279, %r265, %r249, %p10;
	shfl.sync.bfly.b32	%r280, %r279, 4, 31, -1;
	selp.b32 	%r33, %r249, %r280, %p10;
	selp.b32 	%r34, %r280, %r265, %p10;
	selp.b32 	%r281, %r269, %r253, %p10;
	shfl.sync.bfly.b32	%r282, %r281, 4, 31, -1;
	selp.b32 	%r35, %r253, %r282, %p10;
	selp.b32 	%r36, %r282, %r269, %p10;
	selp.b32 	%r283, %r273, %r257, %p10;
	shfl.sync.bfly.b32	%r284, %r283, 4, 31, -1;
	selp.b32 	%r37, %r257, %r284, %p10;
	selp.b32 	%r38, %r284, %r273, %p10;
	selp.b32 	%r285, %r277, %r261, %p10;
	shfl.sync.bfly.b32	%r286, %r285, 4, 31, -1;
	selp.b32 	%r39, %r261, %r286, %p10;
	selp.b32 	%r40, %r286, %r277, %p10;
	selp.b32 	%r287, %r266, %r250, %p10;
	shfl.sync.bfly.b32	%r288, %r287, 4, 31, -1;
	selp.b32 	%r41, %r250, %r288, %p10;
	selp.b32 	%r42, %r288, %r266, %p10;
	selp.b32 	%r289, %r270, %r254, %p10;
	shfl.sync.bfly.b32	%r290, %r289, 4, 31, -1;
	selp.b32 	%r43, %r254, %r290, %p10;
	selp.b32 	%r44, %r290, %r270, %p10;
	selp.b32 	%r291, %r274, %r258, %p10;
	shfl.sync.bfly.b32	%r292, %r291, 4, 31, -1;
	selp.b32 	%r45, %r258, %r292, %p10;
	selp.b32 	%r46, %r292, %r274, %p10;
	selp.b32 	%r293, %r278, %r262, %p10;
	shfl.sync.bfly.b32	%r294, %r293, 4, 31, -1;
	selp.b32 	%r47, %r262, %r294, %p10;
	selp.b32 	%r48, %r294, %r278, %p10;
	shl.b32 	%r295, %r62, 13;
	shl.b32 	%r296, %r3, 2;
	and.b32  	%r297, %r296, 28;
	and.b32  	%r298, %r2, 32;
	or.b32  	%r49, %r298, %r297;
	shl.b32 	%r299, %r4, 2;
	and.b32  	%r300, %r299, 64;
	or.b32  	%r301, %r300, %r49;
	shl.b32 	%r302, %r1, 1;
	and.b32  	%r50, %r302, 4;
	shl.b32 	%r303, %r4, 12;
	and.b32  	%r51, %r303, 61440;
	and.b32  	%r304, %r299, 8064;
	or.b32  	%r305, %r295, %r304;
	or.b32  	%r52, %r305, %r301;
	and.b32  	%r306, %r207, 24;
	or.b32  	%r53, %r298, %r306;
	and.b32  	%r307, %r1, 1;
	neg.s32 	%r308, %r307;
	and.b32  	%r309, %r308, 640;
	and.b32  	%r54, %r227, 6;
	or.b32  	%r55, %r237, %r309;
	and.b32  	%r310, %r3, 7;
	or.b32  	%r311, %r27, 640;
	shl.b32 	%r56, %r68, %r29;
	min.u32 	%r57, %r203, 31;
	and.b32  	%r58, %r3, 1;
	and.b32  	%r313, %r207, 32;
	shl.b32 	%r314, %r3, 5;
	and.b32  	%r315, %r314, 64;
	or.b32  	%r316, %r315, %r313;
	shl.b32 	%r317, %r4, 10;
	shl.b32 	%r318, %r1, 23;
	shl.b32 	%r319, %r3, 18;
	and.b32  	%r320, %r319, 6291456;
	or.b32  	%r321, %r320, %r318;
	and.b32  	%r322, %r317, 2080768;
	or.b32  	%r59, %r321, %r322;
	or.b32  	%r323, %r3, 24;
	or.b32  	%r324, %r316, %r303;
	or.b32  	%r60, %r324, %r223;
	mul.lo.s32 	%r325, %r323, 20;
	add.s32 	%r326, %r325, %r311;
	mul.wide.u32 	%rd33, %r326, 4;
	mov.u64 	%rd34, shmem;
	add.s64 	%rd35, %rd34, 8320;
	add.s64 	%rd7, %rd35, %rd33;
	mul.lo.s32 	%r327, %r310, 20;
	add.s32 	%r328, %r327, %r27;
	mul.wide.u32 	%rd36, %r328, 4;
	add.s64 	%rd8, %rd35, %rd36;
	add.s32 	%r329, %r327, %r311;
	mul.wide.u32 	%rd37, %r329, 4;
	add.s64 	%rd9, %rd35, %rd37;
	add.s32 	%r330, %r327, 160;
	add.s32 	%r331, %r330, %r27;
	mul.wide.u32 	%rd38, %r331, 4;
	add.s64 	%rd10, %rd35, %rd38;
	add.s32 	%r332, %r330, %r311;
	mul.wide.u32 	%rd39, %r332, 4;
	add.s64 	%rd11, %rd35, %rd39;
	add.s32 	%r333, %r327, 320;
	add.s32 	%r334, %r333, %r27;
	mul.wide.u32 	%rd40, %r334, 4;
	add.s64 	%rd12, %rd35, %rd40;
	add.s32 	%r335, %r333, %r311;
	mul.wide.u32 	%rd41, %r335, 4;
	add.s64 	%rd13, %rd35, %rd41;
	add.s32 	%r336, %r325, %r27;
	mul.wide.u32 	%rd42, %r336, 4;
	add.s64 	%rd14, %rd35, %rd42;
	mov.u32 	%r866, 0;
$L__BB0_9:                              // %L1482
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_11 Depth 2
                                        //       Child Loop BB0_12 Depth 3
	add.s32 	%r337, %r866, %r62;
	setp.ge.s32 	%p11, %r337, %r63;
	@%p11 bra 	$L__BB0_15;
// %bb.10:                              // %L1489.preheader
                                        //   in Loop: Header=BB0_9 Depth=1
	mov.u32 	%r439, 0;
	mov.u32 	%r867, %r439;
	mov.u32 	%r868, %r439;
	mov.u32 	%r869, %r439;
	mov.u32 	%r870, %r439;
	mov.u32 	%r871, %r439;
	mov.u32 	%r872, %r439;
	mov.u32 	%r873, %r439;
$L__BB0_11:                             // %L1489
                                        //   Parent Loop BB0_9 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_12 Depth 3
	add.s32 	%r340, %r867, %r866;
	or.b32  	%r341, %r340, %r50;
	or.b32  	%r342, %r341, %r25;
	add.s32 	%r343, %r342, %r51;
	shl.b32 	%r344, %r343, 13;
	and.b32  	%r345, %r344, 536666112;
	add.s32 	%r346, %r52, %r345;
	shr.s32 	%r347, %r346, 31;
	shr.u32 	%r348, %r347, 3;
	add.s32 	%r349, %r346, %r348;
	shr.s32 	%r350, %r349, 29;
	setp.lt.s32 	%p12, %r346, 0;
	and.b32  	%r351, %r349, -536870912;
	setp.ne.s32 	%p13, %r351, %r346;
	and.pred  	%p14, %p12, %p13;
	selp.u32 	%r352, 1, 0, %p14;
	sub.s32 	%r353, %r352, %r350;
	shl.b32 	%r354, %r353, 29;
	or.b32  	%r355, %r346, 1;
	add.s32 	%r356, %r355, %r354;
	mul.wide.s32 	%rd43, %r356, 4;
	add.s64 	%rd44, %rd2, %rd43;
	ld.global.v4.u32 	{%r357, %r358, %r359, %r360}, [%rd44+-4];
	or.b32  	%r361, %r343, 8;
	shl.b32 	%r362, %r361, 13;
	and.b32  	%r363, %r362, 536862720;
	add.s32 	%r364, %r52, %r363;
	shr.s32 	%r365, %r364, 31;
	shr.u32 	%r366, %r365, 3;
	add.s32 	%r367, %r364, %r366;
	shr.s32 	%r368, %r367, 29;
	setp.lt.s32 	%p15, %r364, 0;
	and.b32  	%r369, %r367, -536870912;
	setp.ne.s32 	%p16, %r369, %r364;
	and.pred  	%p17, %p15, %p16;
	selp.u32 	%r370, 1, 0, %p17;
	sub.s32 	%r371, %r370, %r368;
	shl.b32 	%r372, %r371, 29;
	or.b32  	%r373, %r364, 1;
	add.s32 	%r374, %r373, %r372;
	mul.wide.s32 	%rd45, %r374, 4;
	add.s64 	%rd46, %rd2, %rd45;
	ld.global.v4.u32 	{%r375, %r376, %r377, %r378}, [%rd46+-4];
	or.b32  	%r379, %r343, 16;
	shl.b32 	%r380, %r379, 13;
	and.b32  	%r381, %r380, 536862720;
	add.s32 	%r382, %r52, %r381;
	shr.s32 	%r383, %r382, 31;
	shr.u32 	%r384, %r383, 3;
	add.s32 	%r385, %r382, %r384;
	shr.s32 	%r386, %r385, 29;
	setp.lt.s32 	%p18, %r382, 0;
	and.b32  	%r387, %r385, -536870912;
	setp.ne.s32 	%p19, %r387, %r382;
	and.pred  	%p20, %p18, %p19;
	selp.u32 	%r388, 1, 0, %p20;
	sub.s32 	%r389, %r388, %r386;
	shl.b32 	%r390, %r389, 29;
	or.b32  	%r391, %r382, 1;
	add.s32 	%r392, %r391, %r390;
	mul.wide.s32 	%rd47, %r392, 4;
	add.s64 	%rd48, %rd2, %rd47;
	ld.global.v4.u32 	{%r393, %r394, %r395, %r396}, [%rd48+-4];
	or.b32  	%r397, %r343, 24;
	shl.b32 	%r398, %r397, 13;
	and.b32  	%r399, %r398, 536862720;
	add.s32 	%r400, %r52, %r399;
	shr.s32 	%r401, %r400, 31;
	shr.u32 	%r402, %r401, 3;
	add.s32 	%r403, %r400, %r402;
	shr.s32 	%r404, %r403, 29;
	setp.lt.s32 	%p21, %r400, 0;
	and.b32  	%r405, %r403, -536870912;
	setp.ne.s32 	%p22, %r405, %r400;
	and.pred  	%p23, %p21, %p22;
	selp.u32 	%r406, 1, 0, %p23;
	sub.s32 	%r407, %r406, %r404;
	shl.b32 	%r408, %r407, 29;
	or.b32  	%r409, %r400, 1;
	add.s32 	%r410, %r409, %r408;
	mul.wide.s32 	%rd49, %r410, 4;
	add.s64 	%rd50, %rd2, %rd49;
	ld.global.v4.u32 	{%r411, %r412, %r413, %r414}, [%rd50+-4];
	and.b32  	%r415, %r343, 7;
	mul.lo.s32 	%r416, %r415, 65;
	add.s32 	%r417, %r49, %r416;
	mul.wide.u32 	%rd51, %r417, 4;
	add.s64 	%rd53, %rd34, %rd51;
	st.shared.u32 	[%rd53], %r357;
	cvt.u64.u32 	%rd54, %r416;
	cvt.u64.u32 	%rd55, %r49;
	add.s64 	%rd56, %rd55, %rd54;
	shl.b64 	%rd57, %rd56, 2;
	add.s64 	%rd58, %rd34, %rd57;
	st.shared.u32 	[%rd58+4], %r358;
	st.shared.u32 	[%rd58+8], %r359;
	st.shared.u32 	[%rd58+12], %r360;
	and.b32  	%r418, %r361, 31;
	mul.lo.s32 	%r419, %r418, 65;
	add.s32 	%r420, %r49, %r419;
	mul.wide.u32 	%rd59, %r420, 4;
	add.s64 	%rd60, %rd34, %rd59;
	st.shared.u32 	[%rd60], %r375;
	cvt.u64.u32 	%rd61, %r419;
	add.s64 	%rd62, %rd55, %rd61;
	shl.b64 	%rd63, %rd62, 2;
	add.s64 	%rd64, %rd34, %rd63;
	st.shared.u32 	[%rd64+4], %r376;
	st.shared.u32 	[%rd64+8], %r377;
	st.shared.u32 	[%rd64+12], %r378;
	and.b32  	%r421, %r379, 31;
	mul.lo.s32 	%r422, %r421, 65;
	add.s32 	%r423, %r49, %r422;
	mul.wide.u32 	%rd65, %r423, 4;
	add.s64 	%rd66, %rd34, %rd65;
	st.shared.u32 	[%rd66], %r393;
	cvt.u64.u32 	%rd67, %r422;
	add.s64 	%rd68, %rd55, %rd67;
	shl.b64 	%rd69, %rd68, 2;
	add.s64 	%rd70, %rd34, %rd69;
	st.shared.u32 	[%rd70+4], %r394;
	st.shared.u32 	[%rd70+8], %r395;
	st.shared.u32 	[%rd70+12], %r396;
	and.b32  	%r424, %r397, 31;
	mul.lo.s32 	%r425, %r424, 65;
	add.s32 	%r426, %r49, %r425;
	mul.wide.u32 	%rd71, %r426, 4;
	add.s64 	%rd72, %rd34, %rd71;
	st.shared.u32 	[%rd72], %r411;
	cvt.u64.u32 	%rd73, %r425;
	add.s64 	%rd74, %rd55, %rd73;
	shl.b64 	%rd75, %rd74, 2;
	add.s64 	%rd76, %rd34, %rd75;
	st.shared.u32 	[%rd76+4], %r412;
	st.shared.u32 	[%rd76+8], %r413;
	st.shared.u32 	[%rd76+12], %r414;
	bar.sync 	0;
	mov.u32 	%r874, %r439;
$L__BB0_12:                             // %L5354
                                        //   Parent Loop BB0_9 Depth=1
                                        //     Parent Loop BB0_11 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r689, %r30, %r874;
	mad.lo.s32 	%r690, %r689, 65, %r53;
	mul.wide.u32 	%rd77, %r690, 4;
	add.s64 	%rd79, %rd34, %rd77;
	ld.shared.u32 	%r428, [%rd79];
	mov.u32 	%r429, 134744072;
	mov.u32 	%r430, 252645135;
	// begin inline asm
	lop3.b32 %r427, %r428, %r429, %r430, 40;
	// end inline asm
	add.s32 	%r691, %r427, 2021161080;
	xor.b32  	%r438, %r691, -2139062144;
	shr.u32 	%r432, %r428, 4;
	// begin inline asm
	lop3.b32 %r431, %r432, %r429, %r430, 40;
	// end inline asm
	add.s32 	%r692, %r431, 2021161080;
	xor.b32  	%r444, %r692, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r435, %r436}, {%r33}, {%r438}, {%r439, %r439};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r441, %r442}, {%r35}, {%r444}, {%r439, %r439};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r447, %r448}, {%r33}, {%r444}, {%r439, %r439};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r453, %r454}, {%r35}, {%r438}, {%r447, %r448};
	// end inline asm
	ld.shared.u32 	%r460, [%rd79+4];
	// begin inline asm
	lop3.b32 %r459, %r460, %r429, %r430, 40;
	// end inline asm
	add.s32 	%r693, %r459, 2021161080;
	xor.b32  	%r470, %r693, -2139062144;
	shr.u32 	%r464, %r460, 4;
	// begin inline asm
	lop3.b32 %r463, %r464, %r429, %r430, 40;
	// end inline asm
	add.s32 	%r694, %r463, 2021161080;
	xor.b32  	%r476, %r694, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r467, %r468}, {%r37}, {%r470}, {%r435, %r436};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r473, %r474}, {%r39}, {%r476}, {%r441, %r442};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r479, %r480}, {%r37}, {%r476}, {%r453, %r454};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r485, %r486}, {%r39}, {%r470}, {%r479, %r480};
	// end inline asm
	ld.shared.u32 	%r492, [%rd79+8];
	// begin inline asm
	lop3.b32 %r491, %r492, %r429, %r430, 40;
	// end inline asm
	add.s32 	%r695, %r491, 2021161080;
	xor.b32  	%r502, %r695, -2139062144;
	shr.u32 	%r496, %r492, 4;
	// begin inline asm
	lop3.b32 %r495, %r496, %r429, %r430, 40;
	// end inline asm
	add.s32 	%r696, %r495, 2021161080;
	xor.b32  	%r508, %r696, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r499, %r500}, {%r41}, {%r502}, {%r467, %r468};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r505, %r506}, {%r43}, {%r508}, {%r473, %r474};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r511, %r512}, {%r41}, {%r508}, {%r485, %r486};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r517, %r518}, {%r43}, {%r502}, {%r511, %r512};
	// end inline asm
	ld.shared.u32 	%r524, [%rd79+12];
	// begin inline asm
	lop3.b32 %r523, %r524, %r429, %r430, 40;
	// end inline asm
	add.s32 	%r697, %r523, 2021161080;
	xor.b32  	%r534, %r697, -2139062144;
	shr.u32 	%r528, %r524, 4;
	// begin inline asm
	lop3.b32 %r527, %r528, %r429, %r430, 40;
	// end inline asm
	add.s32 	%r698, %r527, 2021161080;
	xor.b32  	%r540, %r698, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r531, %r532}, {%r45}, {%r534}, {%r499, %r500};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r537, %r538}, {%r47}, {%r540}, {%r505, %r506};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r543, %r544}, {%r45}, {%r540}, {%r517, %r518};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r549, %r550}, {%r47}, {%r534}, {%r543, %r544};
	// end inline asm
	ld.shared.u32 	%r556, [%rd79+16];
	// begin inline asm
	lop3.b32 %r555, %r556, %r429, %r430, 40;
	// end inline asm
	add.s32 	%r699, %r555, 2021161080;
	xor.b32  	%r566, %r699, -2139062144;
	shr.u32 	%r560, %r556, 4;
	// begin inline asm
	lop3.b32 %r559, %r560, %r429, %r430, 40;
	// end inline asm
	add.s32 	%r700, %r559, 2021161080;
	xor.b32  	%r572, %r700, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r563, %r564}, {%r34}, {%r566}, {%r531, %r532};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r569, %r570}, {%r36}, {%r572}, {%r537, %r538};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r575, %r576}, {%r34}, {%r572}, {%r549, %r550};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r581, %r582}, {%r36}, {%r566}, {%r575, %r576};
	// end inline asm
	ld.shared.u32 	%r588, [%rd79+20];
	// begin inline asm
	lop3.b32 %r587, %r588, %r429, %r430, 40;
	// end inline asm
	add.s32 	%r701, %r587, 2021161080;
	xor.b32  	%r598, %r701, -2139062144;
	shr.u32 	%r592, %r588, 4;
	// begin inline asm
	lop3.b32 %r591, %r592, %r429, %r430, 40;
	// end inline asm
	add.s32 	%r702, %r591, 2021161080;
	xor.b32  	%r604, %r702, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r595, %r596}, {%r38}, {%r598}, {%r563, %r564};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r601, %r602}, {%r40}, {%r604}, {%r569, %r570};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r607, %r608}, {%r38}, {%r604}, {%r581, %r582};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r613, %r614}, {%r40}, {%r598}, {%r607, %r608};
	// end inline asm
	ld.shared.u32 	%r620, [%rd79+24];
	// begin inline asm
	lop3.b32 %r619, %r620, %r429, %r430, 40;
	// end inline asm
	add.s32 	%r703, %r619, 2021161080;
	xor.b32  	%r630, %r703, -2139062144;
	shr.u32 	%r624, %r620, 4;
	// begin inline asm
	lop3.b32 %r623, %r624, %r429, %r430, 40;
	// end inline asm
	add.s32 	%r704, %r623, 2021161080;
	xor.b32  	%r636, %r704, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r627, %r628}, {%r42}, {%r630}, {%r595, %r596};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r633, %r634}, {%r44}, {%r636}, {%r601, %r602};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r639, %r640}, {%r42}, {%r636}, {%r613, %r614};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r645, %r646}, {%r44}, {%r630}, {%r639, %r640};
	// end inline asm
	ld.shared.u32 	%r652, [%rd79+28];
	// begin inline asm
	lop3.b32 %r651, %r652, %r429, %r430, 40;
	// end inline asm
	add.s32 	%r705, %r651, 2021161080;
	xor.b32  	%r662, %r705, -2139062144;
	shr.u32 	%r656, %r652, 4;
	// begin inline asm
	lop3.b32 %r655, %r656, %r429, %r430, 40;
	// end inline asm
	add.s32 	%r706, %r655, 2021161080;
	xor.b32  	%r668, %r706, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r659, %r660}, {%r46}, {%r662}, {%r627, %r628};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r665, %r666}, {%r48}, {%r668}, {%r633, %r634};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r671, %r672}, {%r46}, {%r668}, {%r645, %r646};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r677, %r678}, {%r48}, {%r662}, {%r671, %r672};
	// end inline asm
	sub.s32 	%r707, %r659, %r665;
	add.s32 	%r708, %r707, 4;
	shr.s32 	%r685, %r708, 3;
	add.s32 	%r709, %r677, 4;
	shr.s32 	%r684, %r709, 3;
	sub.s32 	%r710, %r660, %r666;
	add.s32 	%r711, %r710, 4;
	shr.s32 	%r688, %r711, 3;
	add.s32 	%r712, %r678, 4;
	shr.s32 	%r687, %r712, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r683, %r684, %r685;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r686, %r687, %r688;
	// end inline asm
	or.b32  	%r713, %r54, %r874;
	mad.lo.s32 	%r714, %r713, 20, %r55;
	mul.wide.u32 	%rd80, %r714, 4;
	add.s64 	%rd81, %rd34, %rd80;
	st.shared.u32 	[%rd81+8320], %r683;
	st.shared.u32 	[%rd81+8400], %r686;
	add.s32 	%r874, %r874, 8;
	setp.ne.s32 	%p24, %r874, 32;
	@%p24 bra 	$L__BB0_12;
// %bb.13:                              // %L7444
                                        //   in Loop: Header=BB0_11 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r733, [%rd8];
	ld.shared.u32 	%r734, [%rd9];
	ld.shared.u32 	%r735, [%rd10];
	ld.shared.u32 	%r736, [%rd11];
	ld.shared.u32 	%r737, [%rd12];
	ld.shared.u32 	%r738, [%rd13];
	ld.shared.u32 	%r739, [%rd14];
	ld.shared.u32 	%r740, [%rd7];
	cvt.s32.s16 	%r741, %r733;
	shr.s32 	%r742, %r733, 16;
	cvt.s32.s16 	%r743, %r734;
	shr.s32 	%r744, %r734, 16;
	cvt.s32.s16 	%r745, %r735;
	shr.s32 	%r746, %r735, 16;
	cvt.s32.s16 	%r747, %r736;
	shr.s32 	%r748, %r736, 16;
	cvt.s32.s16 	%r749, %r737;
	shr.s32 	%r750, %r737, 16;
	cvt.s32.s16 	%r751, %r738;
	shr.s32 	%r752, %r738, 16;
	cvt.s32.s16 	%r753, %r739;
	shr.s32 	%r754, %r739, 16;
	cvt.s32.s16 	%r755, %r740;
	shr.s32 	%r756, %r740, 16;
	add.s32 	%r757, %r741, %r56;
	add.s32 	%r758, %r757, %r743;
	shr.s32 	%r759, %r758, %r57;
	add.s32 	%r760, %r742, %r56;
	add.s32 	%r761, %r760, %r744;
	shr.s32 	%r762, %r761, %r57;
	add.s32 	%r763, %r745, %r56;
	add.s32 	%r764, %r763, %r747;
	shr.s32 	%r765, %r764, %r57;
	add.s32 	%r766, %r746, %r56;
	add.s32 	%r767, %r766, %r748;
	shr.s32 	%r768, %r767, %r57;
	add.s32 	%r769, %r749, %r56;
	add.s32 	%r770, %r769, %r751;
	shr.s32 	%r771, %r770, %r57;
	add.s32 	%r772, %r750, %r56;
	add.s32 	%r773, %r772, %r752;
	shr.s32 	%r774, %r773, %r57;
	add.s32 	%r775, %r753, %r56;
	add.s32 	%r776, %r775, %r755;
	shr.s32 	%r777, %r776, %r57;
	add.s32 	%r778, %r754, %r56;
	add.s32 	%r779, %r778, %r756;
	shr.s32 	%r780, %r779, %r57;
	max.s32 	%r781, %r759, -7;
	min.s32 	%r720, %r781, 7;
	max.s32 	%r782, %r762, -7;
	min.s32 	%r727, %r782, 7;
	max.s32 	%r783, %r765, -7;
	min.s32 	%r719, %r783, 7;
	max.s32 	%r784, %r768, -7;
	min.s32 	%r726, %r784, 7;
	max.s32 	%r785, %r771, -7;
	min.s32 	%r717, %r785, 7;
	max.s32 	%r786, %r774, -7;
	min.s32 	%r724, %r786, 7;
	max.s32 	%r787, %r777, -7;
	min.s32 	%r716, %r787, 7;
	max.s32 	%r788, %r780, -7;
	min.s32 	%r723, %r788, 7;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r715, %r716, %r717, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r718, %r719, %r720, %r715;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r722, %r723, %r724, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r725, %r726, %r727, %r722;
	// end inline asm
	shl.b32 	%r732, %r725, 4;
	// begin inline asm
	lop3.b32 %r799, %r430, %r718, %r732, 202;
	// end inline asm
	setp.eq.s32 	%p25, %r867, 0;
	selp.b32 	%r872, %r799, %r872, %p25;
	selp.b32 	%r873, %r799, %r873, %p25;
	setp.eq.s32 	%p26, %r867, 32;
	selp.b32 	%r868, %r799, %r868, %p26;
	selp.b32 	%r869, %r799, %r869, %p26;
	setp.eq.s32 	%p27, %r867, 64;
	selp.b32 	%r870, %r799, %r870, %p27;
	selp.b32 	%r871, %r799, %r871, %p27;
	add.s32 	%r23, %r867, 32;
	setp.ne.s32 	%p28, %r867, 96;
	mov.u32 	%r867, %r23;
	@%p28 bra 	$L__BB0_11;
// %bb.14:                              // %L8878
                                        //   in Loop: Header=BB0_9 Depth=1
	setp.eq.s32 	%p29, %r58, 0;
	// begin inline asm
	prmt.b32 %r789, %r872, %r868, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r793, %r873, %r869, %r201;
	// end inline asm
	// begin inline asm
	prmt.b32 %r797, %r870, %r799, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r801, %r871, %r799, %r201;
	// end inline asm
	selp.b32 	%r837, %r793, %r789, %p29;
	shfl.sync.bfly.b32	%r838, %r837, 1, 31, -1;
	selp.b32 	%r806, %r789, %r838, %p29;
	selp.b32 	%r807, %r838, %r793, %p29;
	selp.b32 	%r839, %r801, %r797, %p29;
	shfl.sync.bfly.b32	%r840, %r839, 1, 31, -1;
	selp.b32 	%r814, %r797, %r840, %p29;
	selp.b32 	%r815, %r840, %r801, %p29;
	// begin inline asm
	prmt.b32 %r805, %r806, %r807, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r809, %r806, %r807, %r201;
	// end inline asm
	// begin inline asm
	prmt.b32 %r813, %r814, %r815, %r197;
	// end inline asm
	// begin inline asm
	prmt.b32 %r817, %r814, %r815, %r201;
	// end inline asm
	selp.b32 	%r841, %r813, %r805, %p9;
	shfl.sync.bfly.b32	%r842, %r841, 2, 31, -1;
	selp.b32 	%r822, %r805, %r842, %p9;
	selp.b32 	%r823, %r842, %r813, %p9;
	selp.b32 	%r843, %r817, %r809, %p9;
	shfl.sync.bfly.b32	%r844, %r843, 2, 31, -1;
	selp.b32 	%r830, %r809, %r844, %p9;
	selp.b32 	%r831, %r844, %r817, %p9;
	// begin inline asm
	prmt.b32 %r821, %r822, %r823, %r133;
	// end inline asm
	// begin inline asm
	prmt.b32 %r825, %r822, %r823, %r137;
	// end inline asm
	// begin inline asm
	prmt.b32 %r829, %r830, %r831, %r133;
	// end inline asm
	// begin inline asm
	prmt.b32 %r833, %r830, %r831, %r137;
	// end inline asm
	selp.b32 	%r845, %r829, %r821, %p10;
	shfl.sync.bfly.b32	%r846, %r845, 4, 31, -1;
	selp.b32 	%r847, %r821, %r846, %p10;
	selp.b32 	%r848, %r846, %r829, %p10;
	selp.b32 	%r849, %r833, %r825, %p10;
	shfl.sync.bfly.b32	%r850, %r849, 4, 31, -1;
	selp.b32 	%r851, %r825, %r850, %p10;
	selp.b32 	%r852, %r850, %r833, %p10;
	selp.b32 	%r853, %r851, %r847, %p29;
	shfl.sync.bfly.b32	%r854, %r853, 1, 31, -1;
	selp.b32 	%r855, %r847, %r854, %p29;
	selp.b32 	%r856, %r854, %r851, %p29;
	selp.b32 	%r857, %r852, %r848, %p29;
	shfl.sync.bfly.b32	%r858, %r857, 1, 31, -1;
	selp.b32 	%r859, %r848, %r858, %p29;
	selp.b32 	%r860, %r858, %r852, %p29;
	add.s32 	%r861, %r60, %r866;
	and.b32  	%r862, %r861, 16368;
	or.b32  	%r863, %r59, %r862;
	cvt.u64.u32 	%rd82, %r863;
	add.s64 	%rd83, %rd4, %rd82;
	st.global.v4.u32 	[%rd83], {%r855, %r859, %r856, %r860};
	add.s32 	%r24, %r866, 128;
	setp.ne.s32 	%p32, %r866, 3968;
	mov.u32 	%r866, %r24;
	@%p32 bra 	$L__BB0_9;
$L__BB0_15:                             // %L9280
	mov.u32 	%r864, 0;
	st.global.u32 	[%rd6], %r864;
	ret;
$L__BB0_7:                              // %L147
	mov.u32 	%r865, 2;
	st.global.u32 	[%rd6], %r865;
	mov.u64 	%rd84, exception761;
	cvta.global.u64 	%rd85, %rd84;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd85;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r61;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd16, exception1;
	cvta.global.u64 	%rd17, %rd16;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd17;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r61;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L24
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r61;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_8:                              // %L366
	mov.u32 	%r73, 2;
	st.global.u32 	[%rd6], %r73;
	mov.u64 	%rd23, exception761;
	cvta.global.u64 	%rd24, %rd23;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd24;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r61;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
