// PTX kernel code for CUDA baseband beamformer
// This file has been generated automatically by `bb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for bb(::Int32, ::Int32, ::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=128, blocks_per_sm=8

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception716[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32]
)
.reqntid 128, 1, 1
.minnctapersm 8
{
	.reg .pred 	%p<60>;
	.reg .b32 	%r<878>;
	.reg .b64 	%rd<89>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r60, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd17, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r63, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p6, %r63, 8319;
	@%p6 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r64, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p7, %r64, 13439;
	@%p7 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L26
	ld.param.u32 	%r61, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	ld.param.u64 	%rd5, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r4, %ctaid.x;
	shl.b32 	%r65, %r4, 7;
	or.b32  	%r66, %r2, %r3;
	or.b32  	%r67, %r66, %r65;
	mul.wide.u32 	%rd22, %r67, 4;
	add.s64 	%rd7, %rd5, %rd22;
	mov.u32 	%r68, 1;
	st.global.u32 	[%rd7], %r68;
	setp.gt.u32 	%p8, %r61, 65535;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L133
	ld.param.u32 	%r62, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p9, %r62, %r61;
	setp.gt.s32 	%p10, %r62, 131071;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L140
	sub.s32 	%r69, %r62, %r61;
	and.b32  	%r70, %r69, 127;
	setp.eq.s32 	%p12, %r70, 0;
	@%p12 bra 	$L__BB0_20;
	bra.uni 	$L__BB0_7;
$L__BB0_20:                             // %pass120
	ld.param.u64 	%rd3, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	shl.b32 	%r55, %r1, 2;
	shl.b32 	%r71, %r4, 4;
	shr.u32 	%r56, %r3, 3;
	or.b32  	%r57, %r55, %r56;
	or.b32  	%r72, %r57, %r71;
	mul.wide.u32 	%rd23, %r72, 4;
	add.s64 	%rd24, %rd3, %rd23;
	ld.global.u32 	%r73, [%rd24];
	add.s32 	%r59, %r73, -4;
	setp.lt.u32 	%p13, %r59, 31;
	@%p13 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_21;
$L__BB0_8:                              // %L463
	ld.param.u64 	%rd1, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	ld.param.u64 	%rd6, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	add.s32 	%r58, %r73, -3;
	or.b32  	%r75, %r3, %r1;
	setp.ne.s32 	%p1, %r75, 0;
	mul.wide.u32 	%rd27, %r4, 4;
	add.s64 	%rd8, %rd6, %rd27;
	mov.u32 	%r869, 0;
	@%p1 bra 	$L__BB0_10;
// %bb.9:                               // %L487
	st.global.u32 	[%rd8], %r869;
$L__BB0_10:                             // %L533
	ld.param.u64 	%rd2, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	ld.param.u64 	%rd4, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	bar.sync 	0;
	shl.b32 	%r206, %r4, 13;
	shl.b32 	%r207, %r3, 6;
	and.b32  	%r208, %r207, 64;
	shl.b32 	%r209, %r1, 8;
	shl.b32 	%r210, %r3, 3;
	and.b32  	%r211, %r210, 48;
	and.b32  	%r212, %r209, 256;
	and.b32  	%r213, %r55, 8;
	shr.u32 	%r5, %r3, 2;
	and.b32  	%r214, %r5, 6;
	or.b32  	%r215, %r213, %r214;
	shl.b32 	%r216, %r215, 9;
	or.b32  	%r217, %r212, %r208;
	or.b32  	%r218, %r217, %r206;
	or.b32  	%r219, %r218, %r211;
	or.b32  	%r220, %r219, %r216;
	cvt.u64.u32 	%rd28, %r220;
	add.s64 	%rd29, %rd28, %rd1;
	ld.global.v4.u32 	{%r78, %r79, %r86, %r87}, [%rd29];
	or.b32  	%r221, %r211, %r217;
	or.b32  	%r222, %r206, %r221;
	or.b32  	%r223, %r222, %r216;
	cvt.u64.u32 	%rd30, %r223;
	add.s64 	%rd31, %rd1, %rd30;
	ld.global.v4.u32 	{%r94, %r95, %r102, %r103}, [%rd31+128];
	shl.b32 	%r224, %r4, 11;
	shl.b32 	%r225, %r3, 4;
	and.b32  	%r226, %r225, 16;
	shl.b32 	%r227, %r1, 6;
	shl.b32 	%r228, %r3, 1;
	and.b32  	%r229, %r228, 12;
	or.b32  	%r230, %r213, %r5;
	shl.b32 	%r231, %r230, 7;
	or.b32  	%r232, %r224, %r227;
	or.b32  	%r233, %r232, %r226;
	or.b32  	%r234, %r233, %r229;
	or.b32  	%r235, %r234, %r231;
	or.b32  	%r236, %r235, 129;
	mul.wide.u32 	%rd32, %r236, 4;
	add.s64 	%rd33, %rd1, %rd32;
	ld.global.v4.u32 	{%r110, %r111, %r118, %r119}, [%rd33+-4];
	shl.b32 	%r237, %r230, 9;
	or.b32  	%r238, %r206, %r209;
	or.b32  	%r239, %r238, %r208;
	or.b32  	%r240, %r239, %r211;
	or.b32  	%r241, %r240, %r237;
	or.b32  	%r242, %r241, 640;
	cvt.u64.u32 	%rd34, %r242;
	add.s64 	%rd35, %rd1, %rd34;
	ld.global.v4.u32 	{%r126, %r127, %r134, %r135}, [%rd35];
	mov.u32 	%r80, 21520;
	// begin inline asm
	prmt.b32 %r142, %r78, %r79, %r80;
	// end inline asm
	mov.u32 	%r84, 30258;
	// begin inline asm
	prmt.b32 %r143, %r78, %r79, %r84;
	// end inline asm
	// begin inline asm
	prmt.b32 %r150, %r86, %r87, %r80;
	// end inline asm
	// begin inline asm
	prmt.b32 %r151, %r86, %r87, %r84;
	// end inline asm
	// begin inline asm
	prmt.b32 %r158, %r94, %r95, %r80;
	// end inline asm
	// begin inline asm
	prmt.b32 %r159, %r94, %r95, %r84;
	// end inline asm
	// begin inline asm
	prmt.b32 %r166, %r102, %r103, %r80;
	// end inline asm
	// begin inline asm
	prmt.b32 %r167, %r102, %r103, %r84;
	// end inline asm
	// begin inline asm
	prmt.b32 %r174, %r110, %r111, %r80;
	// end inline asm
	// begin inline asm
	prmt.b32 %r175, %r110, %r111, %r84;
	// end inline asm
	// begin inline asm
	prmt.b32 %r182, %r118, %r119, %r80;
	// end inline asm
	// begin inline asm
	prmt.b32 %r183, %r118, %r119, %r84;
	// end inline asm
	// begin inline asm
	prmt.b32 %r190, %r126, %r127, %r80;
	// end inline asm
	// begin inline asm
	prmt.b32 %r191, %r126, %r127, %r84;
	// end inline asm
	// begin inline asm
	prmt.b32 %r198, %r134, %r135, %r80;
	// end inline asm
	// begin inline asm
	prmt.b32 %r199, %r134, %r135, %r84;
	// end inline asm
	mov.u32 	%r144, 25152;
	// begin inline asm
	prmt.b32 %r141, %r142, %r143, %r144;
	// end inline asm
	mov.u32 	%r148, 29521;
	// begin inline asm
	prmt.b32 %r145, %r142, %r143, %r148;
	// end inline asm
	// begin inline asm
	prmt.b32 %r149, %r150, %r151, %r144;
	// end inline asm
	// begin inline asm
	prmt.b32 %r153, %r150, %r151, %r148;
	// end inline asm
	// begin inline asm
	prmt.b32 %r157, %r158, %r159, %r144;
	// end inline asm
	// begin inline asm
	prmt.b32 %r161, %r158, %r159, %r148;
	// end inline asm
	// begin inline asm
	prmt.b32 %r165, %r166, %r167, %r144;
	// end inline asm
	// begin inline asm
	prmt.b32 %r169, %r166, %r167, %r148;
	// end inline asm
	// begin inline asm
	prmt.b32 %r173, %r174, %r175, %r144;
	// end inline asm
	// begin inline asm
	prmt.b32 %r177, %r174, %r175, %r148;
	// end inline asm
	// begin inline asm
	prmt.b32 %r181, %r182, %r183, %r144;
	// end inline asm
	// begin inline asm
	prmt.b32 %r185, %r182, %r183, %r148;
	// end inline asm
	// begin inline asm
	prmt.b32 %r189, %r190, %r191, %r144;
	// end inline asm
	// begin inline asm
	prmt.b32 %r193, %r190, %r191, %r148;
	// end inline asm
	// begin inline asm
	prmt.b32 %r197, %r198, %r199, %r144;
	// end inline asm
	// begin inline asm
	prmt.b32 %r201, %r198, %r199, %r148;
	// end inline asm
	and.b32  	%r6, %r3, 2;
	setp.eq.s32 	%p15, %r6, 0;
	selp.b32 	%r243, %r157, %r141, %p15;
	shfl.sync.bfly.b32	%r244, %r243, 2, 31, -1;
	selp.b32 	%r245, %r141, %r244, %p15;
	selp.b32 	%r246, %r244, %r157, %p15;
	selp.b32 	%r247, %r161, %r145, %p15;
	shfl.sync.bfly.b32	%r248, %r247, 2, 31, -1;
	selp.b32 	%r249, %r145, %r248, %p15;
	selp.b32 	%r250, %r248, %r161, %p15;
	selp.b32 	%r251, %r165, %r149, %p15;
	shfl.sync.bfly.b32	%r252, %r251, 2, 31, -1;
	selp.b32 	%r253, %r149, %r252, %p15;
	selp.b32 	%r254, %r252, %r165, %p15;
	selp.b32 	%r255, %r169, %r153, %p15;
	shfl.sync.bfly.b32	%r256, %r255, 2, 31, -1;
	selp.b32 	%r257, %r153, %r256, %p15;
	selp.b32 	%r258, %r256, %r169, %p15;
	selp.b32 	%r259, %r189, %r173, %p15;
	shfl.sync.bfly.b32	%r260, %r259, 2, 31, -1;
	selp.b32 	%r261, %r173, %r260, %p15;
	selp.b32 	%r262, %r260, %r189, %p15;
	selp.b32 	%r263, %r193, %r177, %p15;
	shfl.sync.bfly.b32	%r264, %r263, 2, 31, -1;
	selp.b32 	%r265, %r177, %r264, %p15;
	selp.b32 	%r266, %r264, %r193, %p15;
	selp.b32 	%r267, %r197, %r181, %p15;
	shfl.sync.bfly.b32	%r268, %r267, 2, 31, -1;
	selp.b32 	%r269, %r181, %r268, %p15;
	selp.b32 	%r270, %r268, %r197, %p15;
	selp.b32 	%r271, %r201, %r185, %p15;
	shfl.sync.bfly.b32	%r272, %r271, 2, 31, -1;
	selp.b32 	%r273, %r185, %r272, %p15;
	selp.b32 	%r274, %r272, %r201, %p15;
	and.b32  	%r7, %r3, 4;
	setp.eq.s32 	%p16, %r7, 0;
	selp.b32 	%r275, %r261, %r245, %p16;
	shfl.sync.bfly.b32	%r276, %r275, 4, 31, -1;
	selp.b32 	%r430, %r245, %r276, %p16;
	selp.b32 	%r558, %r276, %r261, %p16;
	selp.b32 	%r277, %r265, %r249, %p16;
	shfl.sync.bfly.b32	%r278, %r277, 4, 31, -1;
	selp.b32 	%r436, %r249, %r278, %p16;
	selp.b32 	%r564, %r278, %r265, %p16;
	selp.b32 	%r279, %r269, %r253, %p16;
	shfl.sync.bfly.b32	%r280, %r279, 4, 31, -1;
	selp.b32 	%r462, %r253, %r280, %p16;
	selp.b32 	%r590, %r280, %r269, %p16;
	selp.b32 	%r281, %r273, %r257, %p16;
	shfl.sync.bfly.b32	%r282, %r281, 4, 31, -1;
	selp.b32 	%r468, %r257, %r282, %p16;
	selp.b32 	%r596, %r282, %r273, %p16;
	selp.b32 	%r283, %r262, %r246, %p16;
	shfl.sync.bfly.b32	%r284, %r283, 4, 31, -1;
	selp.b32 	%r494, %r246, %r284, %p16;
	selp.b32 	%r622, %r284, %r262, %p16;
	selp.b32 	%r285, %r266, %r250, %p16;
	shfl.sync.bfly.b32	%r286, %r285, 4, 31, -1;
	selp.b32 	%r500, %r250, %r286, %p16;
	selp.b32 	%r628, %r286, %r266, %p16;
	selp.b32 	%r287, %r270, %r254, %p16;
	shfl.sync.bfly.b32	%r288, %r287, 4, 31, -1;
	selp.b32 	%r526, %r254, %r288, %p16;
	selp.b32 	%r654, %r288, %r270, %p16;
	selp.b32 	%r289, %r274, %r258, %p16;
	shfl.sync.bfly.b32	%r290, %r289, 4, 31, -1;
	selp.b32 	%r532, %r258, %r290, %p16;
	selp.b32 	%r660, %r290, %r274, %p16;
	shl.b32 	%r291, %r61, 13;
	shl.b32 	%r292, %r3, 2;
	and.b32  	%r293, %r292, 28;
	and.b32  	%r294, %r2, 32;
	shl.b32 	%r295, %r4, 6;
	shl.b32 	%r296, %r1, 1;
	and.b32  	%r297, %r296, 4;
	or.b32  	%r24, %r297, %r56;
	or.b32  	%r25, %r293, %r294;
	or.b32  	%r298, %r25, %r295;
	or.b32  	%r26, %r298, %r291;
	and.b32  	%r299, %r210, 24;
	or.b32  	%r27, %r299, %r294;
	and.b32  	%r300, %r1, 1;
	neg.s32 	%r301, %r300;
	and.b32  	%r302, %r301, 640;
	and.b32  	%r28, %r228, 6;
	or.b32  	%r29, %r230, %r302;
	and.b32  	%r303, %r3, 7;
	or.b32  	%r304, %r57, 640;
	shl.b32 	%r306, %r68, %r59;
	setp.gt.u32 	%p17, %r59, 31;
	selp.b32 	%r30, 0, %r306, %p17;
	min.u32 	%r31, %r58, 31;
	and.b32  	%r32, %r3, 1;
	shl.b32 	%r307, %r4, 14;
	and.b32  	%r308, %r210, 32;
	or.b32  	%r309, %r308, %r226;
	shl.b32 	%r310, %r3, 5;
	and.b32  	%r311, %r310, 64;
	or.b32  	%r33, %r311, %r309;
	shl.b32 	%r312, %r1, 23;
	shl.b32 	%r313, %r3, 18;
	and.b32  	%r314, %r313, 6291456;
	or.b32  	%r315, %r314, %r312;
	or.b32  	%r34, %r315, %r307;
	mul.lo.s32 	%r316, %r303, 20;
	add.s32 	%r317, %r316, %r57;
	mul.wide.u32 	%rd36, %r317, 4;
	mov.u64 	%rd37, shmem;
	add.s64 	%rd38, %rd37, 8320;
	add.s64 	%rd9, %rd38, %rd36;
	add.s32 	%r318, %r316, %r304;
	mul.wide.u32 	%rd39, %r318, 4;
	add.s64 	%rd10, %rd38, %rd39;
	add.s32 	%r319, %r316, 160;
	add.s32 	%r320, %r319, %r57;
	mul.wide.u32 	%rd40, %r320, 4;
	add.s64 	%rd11, %rd38, %rd40;
	add.s32 	%r321, %r319, %r304;
	mul.wide.u32 	%rd41, %r321, 4;
	add.s64 	%rd12, %rd38, %rd41;
	add.s32 	%r322, %r316, 320;
	add.s32 	%r323, %r322, %r57;
	mul.wide.u32 	%rd42, %r323, 4;
	add.s64 	%rd13, %rd38, %rd42;
	add.s32 	%r324, %r322, %r304;
	mul.wide.u32 	%rd43, %r324, 4;
	add.s64 	%rd14, %rd38, %rd43;
	or.b32  	%r325, %r3, 24;
	mul.lo.s32 	%r326, %r325, 20;
	add.s32 	%r327, %r326, %r57;
	mul.wide.u32 	%rd44, %r327, 4;
	add.s64 	%rd15, %rd38, %rd44;
	add.s32 	%r328, %r326, %r304;
	mul.wide.u32 	%rd45, %r328, 4;
	add.s64 	%rd16, %rd38, %rd45;
	mov.pred 	%p59, 0;
$L__BB0_11:                             // %L1557
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_13 Depth 2
                                        //       Child Loop BB0_14 Depth 3
	add.s32 	%r329, %r869, %r61;
	setp.ge.s32 	%p18, %r329, %r62;
	@%p18 bra 	$L__BB0_17;
// %bb.12:                              // %L1565.preheader
                                        //   in Loop: Header=BB0_11 Depth=1
	mov.u32 	%r432, 0;
	mov.u32 	%r870, %r432;
	mov.u32 	%r871, %r432;
	mov.u32 	%r872, %r432;
	mov.u32 	%r873, %r432;
	mov.u32 	%r874, %r432;
	mov.u32 	%r875, %r432;
	mov.u32 	%r876, %r432;
$L__BB0_13:                             // %L1565
                                        //   Parent Loop BB0_11 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_14 Depth 3
	or.b32  	%r332, %r24, %r870;
	add.s32 	%r333, %r332, %r869;
	shl.b32 	%r334, %r333, 13;
	and.b32  	%r335, %r334, 536666112;
	add.s32 	%r336, %r26, %r335;
	shr.s32 	%r337, %r336, 31;
	shr.u32 	%r338, %r337, 3;
	add.s32 	%r339, %r336, %r338;
	shr.s32 	%r340, %r339, 29;
	setp.lt.s32 	%p19, %r336, 0;
	and.b32  	%r341, %r339, -536870912;
	setp.ne.s32 	%p20, %r341, %r336;
	and.pred  	%p21, %p19, %p20;
	selp.u32 	%r342, 1, 0, %p21;
	sub.s32 	%r343, %r342, %r340;
	shl.b32 	%r344, %r343, 29;
	or.b32  	%r345, %r336, 1;
	add.s32 	%r346, %r345, %r344;
	mul.wide.s32 	%rd46, %r346, 4;
	add.s64 	%rd47, %rd2, %rd46;
	ld.global.v4.u32 	{%r347, %r348, %r349, %r350}, [%rd47+-4];
	or.b32  	%r351, %r332, 8;
	add.s32 	%r352, %r351, %r869;
	shl.b32 	%r353, %r352, 13;
	and.b32  	%r354, %r353, 536862720;
	add.s32 	%r355, %r26, %r354;
	shr.s32 	%r356, %r355, 31;
	shr.u32 	%r357, %r356, 3;
	add.s32 	%r358, %r355, %r357;
	shr.s32 	%r359, %r358, 29;
	setp.lt.s32 	%p22, %r355, 0;
	and.b32  	%r360, %r358, -536870912;
	setp.ne.s32 	%p23, %r360, %r355;
	and.pred  	%p24, %p22, %p23;
	selp.u32 	%r361, 1, 0, %p24;
	sub.s32 	%r362, %r361, %r359;
	shl.b32 	%r363, %r362, 29;
	or.b32  	%r364, %r355, 1;
	add.s32 	%r365, %r364, %r363;
	mul.wide.s32 	%rd48, %r365, 4;
	add.s64 	%rd49, %rd2, %rd48;
	ld.global.v4.u32 	{%r366, %r367, %r368, %r369}, [%rd49+-4];
	or.b32  	%r370, %r332, 16;
	add.s32 	%r371, %r370, %r869;
	shl.b32 	%r372, %r371, 13;
	and.b32  	%r373, %r372, 536862720;
	add.s32 	%r374, %r26, %r373;
	shr.s32 	%r375, %r374, 31;
	shr.u32 	%r376, %r375, 3;
	add.s32 	%r377, %r374, %r376;
	shr.s32 	%r378, %r377, 29;
	setp.lt.s32 	%p25, %r374, 0;
	and.b32  	%r379, %r377, -536870912;
	setp.ne.s32 	%p26, %r379, %r374;
	and.pred  	%p27, %p25, %p26;
	selp.u32 	%r380, 1, 0, %p27;
	sub.s32 	%r381, %r380, %r378;
	shl.b32 	%r382, %r381, 29;
	or.b32  	%r383, %r374, 1;
	add.s32 	%r384, %r383, %r382;
	mul.wide.s32 	%rd50, %r384, 4;
	add.s64 	%rd51, %rd2, %rd50;
	ld.global.v4.u32 	{%r385, %r386, %r387, %r388}, [%rd51+-4];
	or.b32  	%r389, %r332, 24;
	add.s32 	%r390, %r389, %r869;
	shl.b32 	%r391, %r390, 13;
	and.b32  	%r392, %r391, 536862720;
	add.s32 	%r393, %r26, %r392;
	shr.s32 	%r394, %r393, 31;
	shr.u32 	%r395, %r394, 3;
	add.s32 	%r396, %r393, %r395;
	shr.s32 	%r397, %r396, 29;
	setp.lt.s32 	%p28, %r393, 0;
	and.b32  	%r398, %r396, -536870912;
	setp.ne.s32 	%p29, %r398, %r393;
	and.pred  	%p30, %p28, %p29;
	selp.u32 	%r399, 1, 0, %p30;
	sub.s32 	%r400, %r399, %r397;
	shl.b32 	%r401, %r400, 29;
	or.b32  	%r402, %r393, 1;
	add.s32 	%r403, %r402, %r401;
	mul.wide.s32 	%rd52, %r403, 4;
	add.s64 	%rd53, %rd2, %rd52;
	ld.global.v4.u32 	{%r404, %r405, %r406, %r407}, [%rd53+-4];
	and.b32  	%r408, %r333, 7;
	mul.lo.s32 	%r409, %r408, 65;
	add.s32 	%r410, %r25, %r409;
	mul.wide.u32 	%rd54, %r410, 4;
	add.s64 	%rd56, %rd37, %rd54;
	st.shared.u32 	[%rd56], %r347;
	cvt.u64.u32 	%rd57, %r409;
	cvt.u64.u32 	%rd58, %r25;
	add.s64 	%rd59, %rd58, %rd57;
	shl.b64 	%rd60, %rd59, 2;
	add.s64 	%rd61, %rd37, %rd60;
	st.shared.u32 	[%rd61+4], %r348;
	st.shared.u32 	[%rd61+8], %r349;
	st.shared.u32 	[%rd61+12], %r350;
	and.b32  	%r411, %r352, 31;
	mul.lo.s32 	%r412, %r411, 65;
	add.s32 	%r413, %r25, %r412;
	mul.wide.u32 	%rd62, %r413, 4;
	add.s64 	%rd63, %rd37, %rd62;
	st.shared.u32 	[%rd63], %r366;
	cvt.u64.u32 	%rd64, %r412;
	add.s64 	%rd65, %rd58, %rd64;
	shl.b64 	%rd66, %rd65, 2;
	add.s64 	%rd67, %rd37, %rd66;
	st.shared.u32 	[%rd67+4], %r367;
	st.shared.u32 	[%rd67+8], %r368;
	st.shared.u32 	[%rd67+12], %r369;
	and.b32  	%r414, %r371, 31;
	mul.lo.s32 	%r415, %r414, 65;
	add.s32 	%r416, %r25, %r415;
	mul.wide.u32 	%rd68, %r416, 4;
	add.s64 	%rd69, %rd37, %rd68;
	st.shared.u32 	[%rd69], %r385;
	cvt.u64.u32 	%rd70, %r415;
	add.s64 	%rd71, %rd58, %rd70;
	shl.b64 	%rd72, %rd71, 2;
	add.s64 	%rd73, %rd37, %rd72;
	st.shared.u32 	[%rd73+4], %r386;
	st.shared.u32 	[%rd73+8], %r387;
	st.shared.u32 	[%rd73+12], %r388;
	and.b32  	%r417, %r390, 31;
	mul.lo.s32 	%r418, %r417, 65;
	add.s32 	%r419, %r25, %r418;
	mul.wide.u32 	%rd74, %r419, 4;
	add.s64 	%rd75, %rd37, %rd74;
	st.shared.u32 	[%rd75], %r404;
	cvt.u64.u32 	%rd76, %r418;
	add.s64 	%rd77, %rd58, %rd76;
	shl.b64 	%rd78, %rd77, 2;
	add.s64 	%rd79, %rd37, %rd78;
	st.shared.u32 	[%rd79+4], %r405;
	st.shared.u32 	[%rd79+8], %r406;
	st.shared.u32 	[%rd79+12], %r407;
	bar.sync 	0;
	add.s32 	%r43, %r870, %r869;
	mov.u32 	%r877, %r432;
$L__BB0_14:                             // %L5000
                                        //   Parent Loop BB0_11 Depth=1
                                        //     Parent Loop BB0_13 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r682, %r877, %r5;
	add.s32 	%r683, %r43, %r682;
	shr.s32 	%r684, %r683, 31;
	shr.u32 	%r685, %r684, 27;
	add.s32 	%r686, %r683, %r685;
	and.b32  	%r687, %r686, -32;
	sub.s32 	%r688, %r683, %r687;
	mad.lo.s32 	%r689, %r688, 65, %r27;
	mul.wide.s32 	%rd80, %r689, 4;
	add.s64 	%rd82, %rd37, %rd80;
	ld.shared.u32 	%r421, [%rd82];
	mov.u32 	%r422, 134744072;
	mov.u32 	%r423, 252645135;
	// begin inline asm
	lop3.b32 %r420, %r421, %r422, %r423, 40;
	// end inline asm
	add.s32 	%r690, %r420, 2021161080;
	xor.b32  	%r431, %r690, -2139062144;
	shr.u32 	%r425, %r421, 4;
	// begin inline asm
	lop3.b32 %r424, %r425, %r422, %r423, 40;
	// end inline asm
	add.s32 	%r691, %r424, 2021161080;
	xor.b32  	%r437, %r691, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r428, %r429}, {%r430}, {%r431}, {%r432, %r432};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r434, %r435}, {%r436}, {%r437}, {%r432, %r432};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r440, %r441}, {%r430}, {%r437}, {%r432, %r432};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r446, %r447}, {%r436}, {%r431}, {%r440, %r441};
	// end inline asm
	ld.shared.u32 	%r453, [%rd82+4];
	// begin inline asm
	lop3.b32 %r452, %r453, %r422, %r423, 40;
	// end inline asm
	add.s32 	%r692, %r452, 2021161080;
	xor.b32  	%r463, %r692, -2139062144;
	shr.u32 	%r457, %r453, 4;
	// begin inline asm
	lop3.b32 %r456, %r457, %r422, %r423, 40;
	// end inline asm
	add.s32 	%r693, %r456, 2021161080;
	xor.b32  	%r469, %r693, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r460, %r461}, {%r462}, {%r463}, {%r428, %r429};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r466, %r467}, {%r468}, {%r469}, {%r434, %r435};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r472, %r473}, {%r462}, {%r469}, {%r446, %r447};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r478, %r479}, {%r468}, {%r463}, {%r472, %r473};
	// end inline asm
	ld.shared.u32 	%r485, [%rd82+8];
	// begin inline asm
	lop3.b32 %r484, %r485, %r422, %r423, 40;
	// end inline asm
	add.s32 	%r694, %r484, 2021161080;
	xor.b32  	%r495, %r694, -2139062144;
	shr.u32 	%r489, %r485, 4;
	// begin inline asm
	lop3.b32 %r488, %r489, %r422, %r423, 40;
	// end inline asm
	add.s32 	%r695, %r488, 2021161080;
	xor.b32  	%r501, %r695, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r492, %r493}, {%r494}, {%r495}, {%r460, %r461};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r498, %r499}, {%r500}, {%r501}, {%r466, %r467};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r504, %r505}, {%r494}, {%r501}, {%r478, %r479};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r510, %r511}, {%r500}, {%r495}, {%r504, %r505};
	// end inline asm
	ld.shared.u32 	%r517, [%rd82+12];
	// begin inline asm
	lop3.b32 %r516, %r517, %r422, %r423, 40;
	// end inline asm
	add.s32 	%r696, %r516, 2021161080;
	xor.b32  	%r527, %r696, -2139062144;
	shr.u32 	%r521, %r517, 4;
	// begin inline asm
	lop3.b32 %r520, %r521, %r422, %r423, 40;
	// end inline asm
	add.s32 	%r697, %r520, 2021161080;
	xor.b32  	%r533, %r697, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r524, %r525}, {%r526}, {%r527}, {%r492, %r493};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r530, %r531}, {%r532}, {%r533}, {%r498, %r499};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r536, %r537}, {%r526}, {%r533}, {%r510, %r511};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r542, %r543}, {%r532}, {%r527}, {%r536, %r537};
	// end inline asm
	ld.shared.u32 	%r549, [%rd82+16];
	// begin inline asm
	lop3.b32 %r548, %r549, %r422, %r423, 40;
	// end inline asm
	add.s32 	%r698, %r548, 2021161080;
	xor.b32  	%r559, %r698, -2139062144;
	shr.u32 	%r553, %r549, 4;
	// begin inline asm
	lop3.b32 %r552, %r553, %r422, %r423, 40;
	// end inline asm
	add.s32 	%r699, %r552, 2021161080;
	xor.b32  	%r565, %r699, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r556, %r557}, {%r558}, {%r559}, {%r524, %r525};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r562, %r563}, {%r564}, {%r565}, {%r530, %r531};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r568, %r569}, {%r558}, {%r565}, {%r542, %r543};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r574, %r575}, {%r564}, {%r559}, {%r568, %r569};
	// end inline asm
	ld.shared.u32 	%r581, [%rd82+20];
	// begin inline asm
	lop3.b32 %r580, %r581, %r422, %r423, 40;
	// end inline asm
	add.s32 	%r700, %r580, 2021161080;
	xor.b32  	%r591, %r700, -2139062144;
	shr.u32 	%r585, %r581, 4;
	// begin inline asm
	lop3.b32 %r584, %r585, %r422, %r423, 40;
	// end inline asm
	add.s32 	%r701, %r584, 2021161080;
	xor.b32  	%r597, %r701, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r588, %r589}, {%r590}, {%r591}, {%r556, %r557};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r594, %r595}, {%r596}, {%r597}, {%r562, %r563};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r600, %r601}, {%r590}, {%r597}, {%r574, %r575};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r606, %r607}, {%r596}, {%r591}, {%r600, %r601};
	// end inline asm
	ld.shared.u32 	%r613, [%rd82+24];
	// begin inline asm
	lop3.b32 %r612, %r613, %r422, %r423, 40;
	// end inline asm
	add.s32 	%r702, %r612, 2021161080;
	xor.b32  	%r623, %r702, -2139062144;
	shr.u32 	%r617, %r613, 4;
	// begin inline asm
	lop3.b32 %r616, %r617, %r422, %r423, 40;
	// end inline asm
	add.s32 	%r703, %r616, 2021161080;
	xor.b32  	%r629, %r703, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r620, %r621}, {%r622}, {%r623}, {%r588, %r589};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r626, %r627}, {%r628}, {%r629}, {%r594, %r595};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r632, %r633}, {%r622}, {%r629}, {%r606, %r607};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r638, %r639}, {%r628}, {%r623}, {%r632, %r633};
	// end inline asm
	ld.shared.u32 	%r645, [%rd82+28];
	// begin inline asm
	lop3.b32 %r644, %r645, %r422, %r423, 40;
	// end inline asm
	add.s32 	%r704, %r644, 2021161080;
	xor.b32  	%r655, %r704, -2139062144;
	shr.u32 	%r649, %r645, 4;
	// begin inline asm
	lop3.b32 %r648, %r649, %r422, %r423, 40;
	// end inline asm
	add.s32 	%r705, %r648, 2021161080;
	xor.b32  	%r661, %r705, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r652, %r653}, {%r654}, {%r655}, {%r620, %r621};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r658, %r659}, {%r660}, {%r661}, {%r626, %r627};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r664, %r665}, {%r654}, {%r661}, {%r638, %r639};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r670, %r671}, {%r660}, {%r655}, {%r664, %r665};
	// end inline asm
	sub.s32 	%r706, %r652, %r658;
	add.s32 	%r707, %r706, 4;
	shr.s32 	%r678, %r707, 3;
	add.s32 	%r708, %r670, 4;
	shr.s32 	%r677, %r708, 3;
	sub.s32 	%r709, %r653, %r659;
	add.s32 	%r710, %r709, 4;
	shr.s32 	%r681, %r710, 3;
	add.s32 	%r711, %r671, 4;
	shr.s32 	%r680, %r711, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r676, %r677, %r678;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r679, %r680, %r681;
	// end inline asm
	or.b32  	%r712, %r877, %r28;
	mad.lo.s32 	%r713, %r712, 20, %r29;
	mul.wide.u32 	%rd83, %r713, 4;
	add.s64 	%rd84, %rd37, %rd83;
	st.shared.u32 	[%rd84+8320], %r676;
	st.shared.u32 	[%rd84+8400], %r679;
	add.s32 	%r877, %r877, 8;
	setp.ne.s32 	%p31, %r877, 32;
	@%p31 bra 	$L__BB0_14;
// %bb.15:                              // %L6871
                                        //   in Loop: Header=BB0_13 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r732, [%rd9];
	ld.shared.u32 	%r733, [%rd10];
	ld.shared.u32 	%r734, [%rd11];
	ld.shared.u32 	%r735, [%rd12];
	ld.shared.u32 	%r736, [%rd13];
	ld.shared.u32 	%r737, [%rd14];
	ld.shared.u32 	%r738, [%rd15];
	ld.shared.u32 	%r739, [%rd16];
	cvt.s32.s16 	%r740, %r732;
	shr.s32 	%r741, %r732, 16;
	cvt.s32.s16 	%r742, %r733;
	shr.s32 	%r743, %r733, 16;
	cvt.s32.s16 	%r744, %r734;
	shr.s32 	%r745, %r734, 16;
	cvt.s32.s16 	%r746, %r735;
	shr.s32 	%r747, %r735, 16;
	cvt.s32.s16 	%r748, %r736;
	shr.s32 	%r749, %r736, 16;
	cvt.s32.s16 	%r750, %r737;
	shr.s32 	%r751, %r737, 16;
	cvt.s32.s16 	%r752, %r738;
	shr.s32 	%r753, %r738, 16;
	cvt.s32.s16 	%r754, %r739;
	shr.s32 	%r755, %r739, 16;
	add.s32 	%r756, %r740, %r30;
	add.s32 	%r757, %r756, %r742;
	shr.s32 	%r758, %r757, %r31;
	add.s32 	%r759, %r741, %r30;
	add.s32 	%r760, %r759, %r743;
	shr.s32 	%r761, %r760, %r31;
	add.s32 	%r762, %r744, %r30;
	add.s32 	%r763, %r762, %r746;
	shr.s32 	%r764, %r763, %r31;
	add.s32 	%r765, %r745, %r30;
	add.s32 	%r766, %r765, %r747;
	shr.s32 	%r767, %r766, %r31;
	add.s32 	%r768, %r748, %r30;
	add.s32 	%r769, %r768, %r750;
	shr.s32 	%r770, %r769, %r31;
	add.s32 	%r771, %r749, %r30;
	add.s32 	%r772, %r771, %r751;
	shr.s32 	%r773, %r772, %r31;
	add.s32 	%r774, %r752, %r30;
	add.s32 	%r775, %r774, %r754;
	shr.s32 	%r776, %r775, %r31;
	add.s32 	%r777, %r753, %r30;
	add.s32 	%r778, %r777, %r755;
	shr.s32 	%r779, %r778, %r31;
	max.s32 	%r780, %r758, -7;
	min.s32 	%r719, %r780, 7;
	setp.ne.s32 	%p32, %r719, %r758;
	or.pred  	%p33, %p59, %p32;
	max.s32 	%r781, %r761, -7;
	min.s32 	%r726, %r781, 7;
	setp.ne.s32 	%p34, %r726, %r761;
	or.pred  	%p35, %p34, %p33;
	max.s32 	%r782, %r764, -7;
	min.s32 	%r718, %r782, 7;
	setp.ne.s32 	%p36, %r718, %r764;
	or.pred  	%p37, %p35, %p36;
	max.s32 	%r783, %r767, -7;
	min.s32 	%r725, %r783, 7;
	setp.ne.s32 	%p38, %r725, %r767;
	or.pred  	%p39, %p38, %p37;
	max.s32 	%r784, %r770, -7;
	min.s32 	%r716, %r784, 7;
	setp.ne.s32 	%p40, %r716, %r770;
	or.pred  	%p41, %p39, %p40;
	max.s32 	%r785, %r773, -7;
	min.s32 	%r723, %r785, 7;
	setp.ne.s32 	%p42, %r723, %r773;
	or.pred  	%p43, %p42, %p41;
	max.s32 	%r786, %r776, -7;
	min.s32 	%r715, %r786, 7;
	setp.ne.s32 	%p44, %r715, %r776;
	or.pred  	%p45, %p43, %p44;
	max.s32 	%r787, %r779, -7;
	min.s32 	%r722, %r787, 7;
	setp.ne.s32 	%p46, %r722, %r779;
	or.pred  	%p59, %p46, %p45;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r714, %r715, %r716, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r717, %r718, %r719, %r714;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r721, %r722, %r723, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r724, %r725, %r726, %r721;
	// end inline asm
	shl.b32 	%r731, %r724, 4;
	// begin inline asm
	lop3.b32 %r798, %r423, %r717, %r731, 202;
	// end inline asm
	setp.eq.s32 	%p47, %r870, 0;
	selp.b32 	%r875, %r798, %r875, %p47;
	selp.b32 	%r876, %r798, %r876, %p47;
	setp.eq.s32 	%p48, %r870, 32;
	selp.b32 	%r871, %r798, %r871, %p48;
	selp.b32 	%r872, %r798, %r872, %p48;
	setp.eq.s32 	%p49, %r870, 64;
	selp.b32 	%r873, %r798, %r873, %p49;
	selp.b32 	%r874, %r798, %r874, %p49;
	add.s32 	%r53, %r870, 32;
	setp.ne.s32 	%p50, %r870, 96;
	mov.u32 	%r870, %r53;
	@%p50 bra 	$L__BB0_13;
// %bb.16:                              // %L8149.L8155_crit_edge
                                        //   in Loop: Header=BB0_11 Depth=1
	setp.eq.s32 	%p51, %r32, 0;
	// begin inline asm
	prmt.b32 %r788, %r875, %r871, %r144;
	// end inline asm
	// begin inline asm
	prmt.b32 %r792, %r876, %r872, %r148;
	// end inline asm
	// begin inline asm
	prmt.b32 %r796, %r873, %r798, %r144;
	// end inline asm
	// begin inline asm
	prmt.b32 %r800, %r874, %r798, %r148;
	// end inline asm
	selp.b32 	%r836, %r792, %r788, %p51;
	shfl.sync.bfly.b32	%r837, %r836, 1, 31, -1;
	selp.b32 	%r805, %r788, %r837, %p51;
	selp.b32 	%r806, %r837, %r792, %p51;
	selp.b32 	%r838, %r800, %r796, %p51;
	shfl.sync.bfly.b32	%r839, %r838, 1, 31, -1;
	selp.b32 	%r813, %r796, %r839, %p51;
	selp.b32 	%r814, %r839, %r800, %p51;
	// begin inline asm
	prmt.b32 %r804, %r805, %r806, %r144;
	// end inline asm
	// begin inline asm
	prmt.b32 %r808, %r805, %r806, %r148;
	// end inline asm
	// begin inline asm
	prmt.b32 %r812, %r813, %r814, %r144;
	// end inline asm
	// begin inline asm
	prmt.b32 %r816, %r813, %r814, %r148;
	// end inline asm
	selp.b32 	%r840, %r812, %r804, %p15;
	shfl.sync.bfly.b32	%r841, %r840, 2, 31, -1;
	selp.b32 	%r821, %r804, %r841, %p15;
	selp.b32 	%r822, %r841, %r812, %p15;
	selp.b32 	%r842, %r816, %r808, %p15;
	shfl.sync.bfly.b32	%r843, %r842, 2, 31, -1;
	selp.b32 	%r829, %r808, %r843, %p15;
	selp.b32 	%r830, %r843, %r816, %p15;
	// begin inline asm
	prmt.b32 %r820, %r821, %r822, %r80;
	// end inline asm
	// begin inline asm
	prmt.b32 %r824, %r821, %r822, %r84;
	// end inline asm
	// begin inline asm
	prmt.b32 %r828, %r829, %r830, %r80;
	// end inline asm
	// begin inline asm
	prmt.b32 %r832, %r829, %r830, %r84;
	// end inline asm
	selp.b32 	%r844, %r828, %r820, %p16;
	shfl.sync.bfly.b32	%r845, %r844, 4, 31, -1;
	selp.b32 	%r846, %r820, %r845, %p16;
	selp.b32 	%r847, %r845, %r828, %p16;
	selp.b32 	%r848, %r832, %r824, %p16;
	shfl.sync.bfly.b32	%r849, %r848, 4, 31, -1;
	selp.b32 	%r850, %r824, %r849, %p16;
	selp.b32 	%r851, %r849, %r832, %p16;
	selp.b32 	%r852, %r850, %r846, %p51;
	shfl.sync.bfly.b32	%r853, %r852, 1, 31, -1;
	selp.b32 	%r854, %r846, %r853, %p51;
	selp.b32 	%r855, %r853, %r850, %p51;
	selp.b32 	%r856, %r851, %r847, %p51;
	shfl.sync.bfly.b32	%r857, %r856, 1, 31, -1;
	selp.b32 	%r858, %r847, %r857, %p51;
	selp.b32 	%r859, %r857, %r851, %p51;
	and.b32  	%r860, %r869, 16256;
	or.b32  	%r861, %r860, %r33;
	or.b32  	%r862, %r34, %r861;
	cvt.u64.u32 	%rd85, %r862;
	add.s64 	%rd86, %rd4, %rd85;
	st.global.v4.u32 	[%rd86], {%r854, %r858, %r855, %r859};
	add.s32 	%r54, %r869, 128;
	setp.ne.s32 	%p54, %r869, 65408;
	mov.u32 	%r869, %r54;
	@%p54 bra 	$L__BB0_11;
$L__BB0_17:                             // %L8536
	selp.u32 	%r863, 1, 0, %p59;
	{ 
	.reg .pred 	%p1; 
	.reg .pred 	%p2; 
	setp.ne.u32 	%p1, %r863, 0; 
	bar.red.or.pred 	%p2, 0, %p1; 
	selp.u32 	%r864, 1, 0, %p2; 
	}
	setp.eq.s32 	%p55, %r864, 0;
	or.pred  	%p56, %p55, %p1;
	@%p56 bra 	$L__BB0_19;
// %bb.18:                              // %L8567
	st.global.u32 	[%rd8], %r68;
$L__BB0_19:                             // %L8613
	mov.u32 	%r866, 0;
	st.global.u32 	[%rd7], %r866;
	ret;
$L__BB0_7:                              // %L152
	mov.u32 	%r867, 2;
	st.global.u32 	[%rd7], %r867;
	mov.u64 	%rd87, exception716;
	cvta.global.u64 	%rd88, %rd87;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd88;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r60;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r60;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L24
	mov.u64 	%rd20, exception1;
	cvta.global.u64 	%rd21, %rd20;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd21;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r60;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_21:                             // %L370
	mov.u32 	%r74, 3;
	st.global.u32 	[%rd7], %r74;
	mov.u64 	%rd25, exception716;
	cvta.global.u64 	%rd26, %rd25;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd26;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r60;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
