// PTX kernel code for CUDA baseband beamformer
// This file has been generated automatically by `bb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for bb(::Int32, ::Int32, ::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=128, blocks_per_sm=8

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception716[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32]
)
.reqntid 128, 1, 1
.minnctapersm 8
{
	.reg .pred 	%p<60>;
	.reg .b32 	%r<879>;
	.reg .b64 	%rd<89>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r63, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd17, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r66, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p6, %r66, 8319;
	@%p6 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r67, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p7, %r67, 13439;
	@%p7 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L26
	ld.param.u32 	%r64, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	ld.param.u64 	%rd5, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %ctaid.x;
	shl.b32 	%r68, %r3, 7;
	mov.u32 	%r4, %tid.x;
	or.b32  	%r69, %r68, %r4;
	or.b32  	%r70, %r69, %r2;
	mul.wide.u32 	%rd22, %r70, 4;
	add.s64 	%rd7, %rd5, %rd22;
	mov.u32 	%r71, 1;
	st.global.u32 	[%rd7], %r71;
	setp.gt.u32 	%p8, %r64, 65535;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L133
	ld.param.u32 	%r65, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p9, %r65, %r64;
	setp.gt.s32 	%p10, %r65, 131071;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L140
	sub.s32 	%r72, %r65, %r64;
	and.b32  	%r73, %r72, 127;
	setp.eq.s32 	%p12, %r73, 0;
	@%p12 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_7;
$L__BB0_8:                              // %L245
	ld.param.u64 	%rd3, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	shl.b32 	%r74, %r3, 4;
	shr.u32 	%r5, %r4, 3;
	shl.b32 	%r6, %r1, 2;
	or.b32  	%r7, %r5, %r6;
	or.b32  	%r75, %r7, %r74;
	mul.wide.u32 	%rd23, %r75, 4;
	add.s64 	%rd24, %rd3, %rd23;
	ld.global.u32 	%r76, [%rd24];
	add.s32 	%r9, %r76, -4;
	setp.lt.u32 	%p13, %r9, 31;
	@%p13 bra 	$L__BB0_10;
	bra.uni 	$L__BB0_9;
$L__BB0_10:                             // %L463
	ld.param.u64 	%rd1, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	ld.param.u64 	%rd6, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	add.s32 	%r8, %r76, -3;
	or.b32  	%r78, %r4, %r1;
	setp.ne.s32 	%p1, %r78, 0;
	mul.wide.u32 	%rd27, %r3, 4;
	add.s64 	%rd8, %rd6, %rd27;
	mov.u32 	%r870, 0;
	@%p1 bra 	$L__BB0_12;
// %bb.11:                              // %L487
	st.global.u32 	[%rd8], %r870;
$L__BB0_12:                             // %L533
	ld.param.u64 	%rd2, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	ld.param.u64 	%rd4, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	bar.sync 	0;
	shl.b32 	%r209, %r3, 13;
	and.b32  	%r210, %r209, 8192;
	and.b32  	%r211, %r6, 8;
	shr.u32 	%r10, %r4, 2;
	and.b32  	%r212, %r10, 6;
	or.b32  	%r213, %r211, %r212;
	shl.b32 	%r214, %r213, 9;
	shl.b32 	%r215, %r4, 6;
	and.b32  	%r216, %r215, 64;
	shl.b32 	%r217, %r4, 3;
	shl.b32 	%r218, %r1, 8;
	or.b32  	%r219, %r217, %r218;
	and.b32  	%r220, %r219, 304;
	or.b32  	%r221, %r216, %r220;
	and.b32  	%r222, %r209, 1032192;
	or.b32  	%r223, %r214, %r210;
	or.b32  	%r224, %r223, %r221;
	or.b32  	%r225, %r224, %r222;
	cvt.u64.u32 	%rd28, %r225;
	add.s64 	%rd29, %rd1, %rd28;
	ld.global.v4.u32 	{%r81, %r82, %r89, %r90}, [%rd29];
	and.b32  	%r226, %r217, 48;
	and.b32  	%r227, %r218, 256;
	or.b32  	%r228, %r227, %r226;
	or.b32  	%r229, %r228, %r210;
	or.b32  	%r230, %r229, %r216;
	or.b32  	%r231, %r230, %r222;
	or.b32  	%r232, %r231, %r214;
	cvt.u64.u32 	%rd30, %r232;
	add.s64 	%rd31, %rd1, %rd30;
	ld.global.v4.u32 	{%r97, %r98, %r105, %r106}, [%rd31+128];
	shl.b32 	%r233, %r3, 11;
	and.b32  	%r234, %r233, 2048;
	or.b32  	%r235, %r211, %r10;
	shl.b32 	%r236, %r235, 7;
	or.b32  	%r237, %r236, %r234;
	shl.b32 	%r238, %r4, 4;
	and.b32  	%r239, %r238, 16;
	shl.b32 	%r240, %r4, 1;
	shl.b32 	%r241, %r1, 6;
	or.b32  	%r242, %r240, %r241;
	and.b32  	%r243, %r242, 76;
	or.b32  	%r244, %r239, %r243;
	and.b32  	%r245, %r233, 258048;
	or.b32  	%r246, %r237, 128;
	or.b32  	%r247, %r244, %r245;
	or.b32  	%r248, %r247, %r246;
	mul.wide.u32 	%rd32, %r248, 4;
	add.s64 	%rd33, %rd1, %rd32;
	ld.global.v4.u32 	{%r113, %r114, %r121, %r122}, [%rd33];
	and.b32  	%r249, %r240, 12;
	or.b32  	%r250, %r245, %r239;
	or.b32  	%r251, %r250, %r241;
	or.b32  	%r252, %r251, %r249;
	or.b32  	%r253, %r252, %r246;
	or.b32  	%r254, %r253, 32;
	mul.wide.u32 	%rd34, %r254, 4;
	add.s64 	%rd35, %rd1, %rd34;
	ld.global.v4.u32 	{%r129, %r130, %r137, %r138}, [%rd35];
	mov.u32 	%r83, 21520;
	// begin inline asm
	prmt.b32 %r145, %r81, %r82, %r83;
	// end inline asm
	mov.u32 	%r87, 30258;
	// begin inline asm
	prmt.b32 %r146, %r81, %r82, %r87;
	// end inline asm
	// begin inline asm
	prmt.b32 %r153, %r89, %r90, %r83;
	// end inline asm
	// begin inline asm
	prmt.b32 %r154, %r89, %r90, %r87;
	// end inline asm
	// begin inline asm
	prmt.b32 %r161, %r97, %r98, %r83;
	// end inline asm
	// begin inline asm
	prmt.b32 %r162, %r97, %r98, %r87;
	// end inline asm
	// begin inline asm
	prmt.b32 %r169, %r105, %r106, %r83;
	// end inline asm
	// begin inline asm
	prmt.b32 %r170, %r105, %r106, %r87;
	// end inline asm
	// begin inline asm
	prmt.b32 %r177, %r113, %r114, %r83;
	// end inline asm
	// begin inline asm
	prmt.b32 %r178, %r113, %r114, %r87;
	// end inline asm
	// begin inline asm
	prmt.b32 %r185, %r121, %r122, %r83;
	// end inline asm
	// begin inline asm
	prmt.b32 %r186, %r121, %r122, %r87;
	// end inline asm
	// begin inline asm
	prmt.b32 %r193, %r129, %r130, %r83;
	// end inline asm
	// begin inline asm
	prmt.b32 %r194, %r129, %r130, %r87;
	// end inline asm
	// begin inline asm
	prmt.b32 %r201, %r137, %r138, %r83;
	// end inline asm
	// begin inline asm
	prmt.b32 %r202, %r137, %r138, %r87;
	// end inline asm
	mov.u32 	%r147, 25152;
	// begin inline asm
	prmt.b32 %r144, %r145, %r146, %r147;
	// end inline asm
	mov.u32 	%r151, 29521;
	// begin inline asm
	prmt.b32 %r148, %r145, %r146, %r151;
	// end inline asm
	// begin inline asm
	prmt.b32 %r152, %r153, %r154, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r156, %r153, %r154, %r151;
	// end inline asm
	// begin inline asm
	prmt.b32 %r160, %r161, %r162, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r164, %r161, %r162, %r151;
	// end inline asm
	// begin inline asm
	prmt.b32 %r168, %r169, %r170, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r172, %r169, %r170, %r151;
	// end inline asm
	// begin inline asm
	prmt.b32 %r176, %r177, %r178, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r180, %r177, %r178, %r151;
	// end inline asm
	// begin inline asm
	prmt.b32 %r184, %r185, %r186, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r188, %r185, %r186, %r151;
	// end inline asm
	// begin inline asm
	prmt.b32 %r192, %r193, %r194, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r196, %r193, %r194, %r151;
	// end inline asm
	// begin inline asm
	prmt.b32 %r200, %r201, %r202, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r204, %r201, %r202, %r151;
	// end inline asm
	and.b32  	%r11, %r4, 2;
	setp.eq.s32 	%p15, %r11, 0;
	selp.b32 	%r255, %r160, %r144, %p15;
	shfl.sync.bfly.b32	%r256, %r255, 2, 31, -1;
	selp.b32 	%r257, %r144, %r256, %p15;
	selp.b32 	%r258, %r256, %r160, %p15;
	selp.b32 	%r259, %r164, %r148, %p15;
	shfl.sync.bfly.b32	%r260, %r259, 2, 31, -1;
	selp.b32 	%r261, %r148, %r260, %p15;
	selp.b32 	%r262, %r260, %r164, %p15;
	selp.b32 	%r263, %r168, %r152, %p15;
	shfl.sync.bfly.b32	%r264, %r263, 2, 31, -1;
	selp.b32 	%r265, %r152, %r264, %p15;
	selp.b32 	%r266, %r264, %r168, %p15;
	selp.b32 	%r267, %r172, %r156, %p15;
	shfl.sync.bfly.b32	%r268, %r267, 2, 31, -1;
	selp.b32 	%r269, %r156, %r268, %p15;
	selp.b32 	%r270, %r268, %r172, %p15;
	selp.b32 	%r271, %r192, %r176, %p15;
	shfl.sync.bfly.b32	%r272, %r271, 2, 31, -1;
	selp.b32 	%r273, %r176, %r272, %p15;
	selp.b32 	%r274, %r272, %r192, %p15;
	selp.b32 	%r275, %r196, %r180, %p15;
	shfl.sync.bfly.b32	%r276, %r275, 2, 31, -1;
	selp.b32 	%r277, %r180, %r276, %p15;
	selp.b32 	%r278, %r276, %r196, %p15;
	selp.b32 	%r279, %r200, %r184, %p15;
	shfl.sync.bfly.b32	%r280, %r279, 2, 31, -1;
	selp.b32 	%r281, %r184, %r280, %p15;
	selp.b32 	%r282, %r280, %r200, %p15;
	selp.b32 	%r283, %r204, %r188, %p15;
	shfl.sync.bfly.b32	%r284, %r283, 2, 31, -1;
	selp.b32 	%r285, %r188, %r284, %p15;
	selp.b32 	%r286, %r284, %r204, %p15;
	and.b32  	%r12, %r4, 4;
	setp.eq.s32 	%p16, %r12, 0;
	selp.b32 	%r287, %r273, %r257, %p16;
	shfl.sync.bfly.b32	%r288, %r287, 4, 31, -1;
	selp.b32 	%r437, %r257, %r288, %p16;
	selp.b32 	%r565, %r288, %r273, %p16;
	selp.b32 	%r289, %r277, %r261, %p16;
	shfl.sync.bfly.b32	%r290, %r289, 4, 31, -1;
	selp.b32 	%r443, %r261, %r290, %p16;
	selp.b32 	%r571, %r290, %r277, %p16;
	selp.b32 	%r291, %r281, %r265, %p16;
	shfl.sync.bfly.b32	%r292, %r291, 4, 31, -1;
	selp.b32 	%r469, %r265, %r292, %p16;
	selp.b32 	%r597, %r292, %r281, %p16;
	selp.b32 	%r293, %r285, %r269, %p16;
	shfl.sync.bfly.b32	%r294, %r293, 4, 31, -1;
	selp.b32 	%r475, %r269, %r294, %p16;
	selp.b32 	%r603, %r294, %r285, %p16;
	selp.b32 	%r295, %r274, %r258, %p16;
	shfl.sync.bfly.b32	%r296, %r295, 4, 31, -1;
	selp.b32 	%r501, %r258, %r296, %p16;
	selp.b32 	%r629, %r296, %r274, %p16;
	selp.b32 	%r297, %r278, %r262, %p16;
	shfl.sync.bfly.b32	%r298, %r297, 4, 31, -1;
	selp.b32 	%r507, %r262, %r298, %p16;
	selp.b32 	%r635, %r298, %r278, %p16;
	selp.b32 	%r299, %r282, %r266, %p16;
	shfl.sync.bfly.b32	%r300, %r299, 4, 31, -1;
	selp.b32 	%r533, %r266, %r300, %p16;
	selp.b32 	%r661, %r300, %r282, %p16;
	selp.b32 	%r301, %r286, %r270, %p16;
	shfl.sync.bfly.b32	%r302, %r301, 4, 31, -1;
	selp.b32 	%r539, %r270, %r302, %p16;
	selp.b32 	%r667, %r302, %r286, %p16;
	shl.b32 	%r303, %r64, 13;
	shl.b32 	%r304, %r3, 6;
	shl.b32 	%r305, %r1, 1;
	and.b32  	%r29, %r305, 4;
	shl.b32 	%r306, %r4, 2;
	and.b32  	%r307, %r306, 28;
	and.b32  	%r308, %r2, 32;
	or.b32  	%r30, %r307, %r308;
	or.b32  	%r309, %r304, %r30;
	or.b32  	%r31, %r309, %r303;
	and.b32  	%r310, %r217, 24;
	or.b32  	%r32, %r310, %r308;
	and.b32  	%r311, %r1, 1;
	neg.s32 	%r312, %r311;
	and.b32  	%r313, %r312, 640;
	and.b32  	%r33, %r240, 6;
	or.b32  	%r34, %r235, %r313;
	and.b32  	%r314, %r4, 7;
	or.b32  	%r315, %r7, 640;
	shl.b32 	%r317, %r71, %r9;
	setp.gt.u32 	%p17, %r9, 31;
	selp.b32 	%r35, 0, %r317, %p17;
	min.u32 	%r36, %r8, 31;
	and.b32  	%r37, %r4, 1;
	shl.b32 	%r318, %r3, 14;
	and.b32  	%r319, %r217, 32;
	or.b32  	%r320, %r319, %r239;
	shl.b32 	%r321, %r4, 5;
	and.b32  	%r322, %r321, 64;
	or.b32  	%r38, %r322, %r320;
	shl.b32 	%r323, %r1, 23;
	shl.b32 	%r324, %r4, 18;
	and.b32  	%r325, %r324, 6291456;
	or.b32  	%r326, %r325, %r323;
	or.b32  	%r39, %r326, %r318;
	mul.lo.s32 	%r327, %r314, 20;
	add.s32 	%r328, %r327, %r7;
	mul.wide.u32 	%rd36, %r328, 4;
	mov.u64 	%rd37, shmem;
	add.s64 	%rd38, %rd37, 8320;
	add.s64 	%rd9, %rd38, %rd36;
	add.s32 	%r329, %r327, %r315;
	mul.wide.u32 	%rd39, %r329, 4;
	add.s64 	%rd10, %rd38, %rd39;
	add.s32 	%r330, %r327, 160;
	add.s32 	%r331, %r330, %r7;
	mul.wide.u32 	%rd40, %r331, 4;
	add.s64 	%rd11, %rd38, %rd40;
	add.s32 	%r332, %r330, %r315;
	mul.wide.u32 	%rd41, %r332, 4;
	add.s64 	%rd12, %rd38, %rd41;
	add.s32 	%r333, %r327, 320;
	add.s32 	%r334, %r333, %r7;
	mul.wide.u32 	%rd42, %r334, 4;
	add.s64 	%rd13, %rd38, %rd42;
	add.s32 	%r335, %r333, %r315;
	mul.wide.u32 	%rd43, %r335, 4;
	add.s64 	%rd14, %rd38, %rd43;
	or.b32  	%r336, %r4, 24;
	mul.lo.s32 	%r337, %r336, 20;
	add.s32 	%r338, %r337, %r7;
	mul.wide.u32 	%rd44, %r338, 4;
	add.s64 	%rd15, %rd38, %rd44;
	add.s32 	%r339, %r337, %r315;
	mul.wide.u32 	%rd45, %r339, 4;
	add.s64 	%rd16, %rd38, %rd45;
	mov.pred 	%p59, 0;
$L__BB0_13:                             // %L1565
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_15 Depth 2
                                        //       Child Loop BB0_16 Depth 3
	add.s32 	%r340, %r870, %r64;
	setp.ge.s32 	%p18, %r340, %r65;
	@%p18 bra 	$L__BB0_19;
// %bb.14:                              // %L1573.preheader
                                        //   in Loop: Header=BB0_13 Depth=1
	or.b32  	%r41, %r870, %r29;
	or.b32  	%r42, %r41, 8;
	or.b32  	%r43, %r41, 16;
	or.b32  	%r44, %r41, 24;
	mov.u32 	%r439, 0;
	mov.u32 	%r871, %r439;
	mov.u32 	%r872, %r439;
	mov.u32 	%r873, %r439;
	mov.u32 	%r874, %r439;
	mov.u32 	%r875, %r439;
	mov.u32 	%r876, %r439;
	mov.u32 	%r877, %r439;
$L__BB0_15:                             // %L1573
                                        //   Parent Loop BB0_13 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_16 Depth 3
	add.s32 	%r343, %r41, %r871;
	or.b32  	%r344, %r343, %r5;
	shl.b32 	%r345, %r344, 13;
	and.b32  	%r346, %r345, 536666112;
	add.s32 	%r347, %r31, %r346;
	shr.s32 	%r348, %r347, 31;
	shr.u32 	%r349, %r348, 3;
	add.s32 	%r350, %r347, %r349;
	shr.s32 	%r351, %r350, 29;
	setp.lt.s32 	%p19, %r347, 0;
	and.b32  	%r352, %r350, -536870912;
	setp.ne.s32 	%p20, %r352, %r347;
	and.pred  	%p21, %p19, %p20;
	selp.u32 	%r353, 1, 0, %p21;
	sub.s32 	%r354, %r353, %r351;
	shl.b32 	%r355, %r354, 29;
	add.s32 	%r356, %r355, %r347;
	mul.wide.s32 	%rd46, %r356, 4;
	add.s64 	%rd47, %rd2, %rd46;
	ld.global.v4.u32 	{%r357, %r358, %r359, %r360}, [%rd47];
	add.s32 	%r361, %r42, %r871;
	or.b32  	%r362, %r361, %r5;
	shl.b32 	%r363, %r362, 13;
	and.b32  	%r364, %r363, 536731648;
	add.s32 	%r365, %r31, %r364;
	shr.s32 	%r366, %r365, 31;
	shr.u32 	%r367, %r366, 3;
	add.s32 	%r368, %r365, %r367;
	shr.s32 	%r369, %r368, 29;
	setp.lt.s32 	%p22, %r365, 0;
	and.b32  	%r370, %r368, -536870912;
	setp.ne.s32 	%p23, %r370, %r365;
	and.pred  	%p24, %p22, %p23;
	selp.u32 	%r371, 1, 0, %p24;
	sub.s32 	%r372, %r371, %r369;
	shl.b32 	%r373, %r372, 29;
	add.s32 	%r374, %r373, %r365;
	mul.wide.s32 	%rd48, %r374, 4;
	add.s64 	%rd49, %rd2, %rd48;
	ld.global.v4.u32 	{%r375, %r376, %r377, %r378}, [%rd49];
	add.s32 	%r379, %r43, %r871;
	or.b32  	%r380, %r379, %r5;
	shl.b32 	%r381, %r380, 13;
	and.b32  	%r382, %r381, 536797184;
	add.s32 	%r383, %r31, %r382;
	shr.s32 	%r384, %r383, 31;
	shr.u32 	%r385, %r384, 3;
	add.s32 	%r386, %r383, %r385;
	shr.s32 	%r387, %r386, 29;
	setp.lt.s32 	%p25, %r383, 0;
	and.b32  	%r388, %r386, -536870912;
	setp.ne.s32 	%p26, %r388, %r383;
	and.pred  	%p27, %p25, %p26;
	selp.u32 	%r389, 1, 0, %p27;
	sub.s32 	%r390, %r389, %r387;
	shl.b32 	%r391, %r390, 29;
	add.s32 	%r392, %r391, %r383;
	mul.wide.s32 	%rd50, %r392, 4;
	add.s64 	%rd51, %rd2, %rd50;
	ld.global.v4.u32 	{%r393, %r394, %r395, %r396}, [%rd51];
	add.s32 	%r397, %r44, %r871;
	or.b32  	%r398, %r397, %r5;
	shl.b32 	%r399, %r398, 13;
	and.b32  	%r400, %r399, 536862720;
	add.s32 	%r401, %r31, %r400;
	shr.s32 	%r402, %r401, 31;
	shr.u32 	%r403, %r402, 3;
	add.s32 	%r404, %r401, %r403;
	shr.s32 	%r405, %r404, 29;
	setp.lt.s32 	%p28, %r401, 0;
	and.b32  	%r406, %r404, -536870912;
	setp.ne.s32 	%p29, %r406, %r401;
	and.pred  	%p30, %p28, %p29;
	selp.u32 	%r407, 1, 0, %p30;
	sub.s32 	%r408, %r407, %r405;
	shl.b32 	%r409, %r408, 29;
	add.s32 	%r410, %r409, %r401;
	mul.wide.s32 	%rd52, %r410, 4;
	add.s64 	%rd53, %rd2, %rd52;
	ld.global.v4.u32 	{%r411, %r412, %r413, %r414}, [%rd53];
	and.b32  	%r415, %r344, 7;
	mul.lo.s32 	%r416, %r415, 65;
	add.s32 	%r417, %r30, %r416;
	mul.wide.u32 	%rd54, %r417, 4;
	add.s64 	%rd56, %rd37, %rd54;
	st.shared.u32 	[%rd56], %r357;
	cvt.u64.u32 	%rd57, %r416;
	cvt.u64.u32 	%rd58, %r30;
	add.s64 	%rd59, %rd58, %rd57;
	shl.b64 	%rd60, %rd59, 2;
	add.s64 	%rd61, %rd37, %rd60;
	st.shared.u32 	[%rd61+4], %r358;
	st.shared.u32 	[%rd61+8], %r359;
	st.shared.u32 	[%rd61+12], %r360;
	and.b32  	%r418, %r362, 15;
	mul.lo.s32 	%r419, %r418, 65;
	add.s32 	%r420, %r30, %r419;
	mul.wide.u32 	%rd62, %r420, 4;
	add.s64 	%rd63, %rd37, %rd62;
	st.shared.u32 	[%rd63], %r375;
	cvt.u64.u32 	%rd64, %r419;
	add.s64 	%rd65, %rd58, %rd64;
	shl.b64 	%rd66, %rd65, 2;
	add.s64 	%rd67, %rd37, %rd66;
	st.shared.u32 	[%rd67+4], %r376;
	st.shared.u32 	[%rd67+8], %r377;
	st.shared.u32 	[%rd67+12], %r378;
	and.b32  	%r421, %r380, 23;
	mul.lo.s32 	%r422, %r421, 65;
	add.s32 	%r423, %r30, %r422;
	mul.wide.u32 	%rd68, %r423, 4;
	add.s64 	%rd69, %rd37, %rd68;
	st.shared.u32 	[%rd69], %r393;
	cvt.u64.u32 	%rd70, %r422;
	add.s64 	%rd71, %rd58, %rd70;
	shl.b64 	%rd72, %rd71, 2;
	add.s64 	%rd73, %rd37, %rd72;
	st.shared.u32 	[%rd73+4], %r394;
	st.shared.u32 	[%rd73+8], %r395;
	st.shared.u32 	[%rd73+12], %r396;
	and.b32  	%r424, %r398, 31;
	mul.lo.s32 	%r425, %r424, 65;
	add.s32 	%r426, %r30, %r425;
	mul.wide.u32 	%rd74, %r426, 4;
	add.s64 	%rd75, %rd37, %rd74;
	st.shared.u32 	[%rd75], %r411;
	cvt.u64.u32 	%rd76, %r425;
	add.s64 	%rd77, %rd58, %rd76;
	shl.b64 	%rd78, %rd77, 2;
	add.s64 	%rd79, %rd37, %rd78;
	st.shared.u32 	[%rd79+4], %r412;
	st.shared.u32 	[%rd79+8], %r413;
	st.shared.u32 	[%rd79+12], %r414;
	bar.sync 	0;
	mov.u32 	%r878, %r439;
$L__BB0_16:                             // %L5008
                                        //   Parent Loop BB0_13 Depth=1
                                        //     Parent Loop BB0_15 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r689, %r10, %r878;
	mad.lo.s32 	%r690, %r689, 65, %r32;
	mul.wide.u32 	%rd80, %r690, 4;
	add.s64 	%rd82, %rd37, %rd80;
	ld.shared.u32 	%r428, [%rd82];
	mov.u32 	%r429, 134744072;
	mov.u32 	%r430, 252645135;
	// begin inline asm
	lop3.b32 %r427, %r428, %r429, %r430, 40;
	// end inline asm
	add.s32 	%r691, %r427, 2021161080;
	xor.b32  	%r438, %r691, -2139062144;
	shr.u32 	%r432, %r428, 4;
	// begin inline asm
	lop3.b32 %r431, %r432, %r429, %r430, 40;
	// end inline asm
	add.s32 	%r692, %r431, 2021161080;
	xor.b32  	%r444, %r692, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r435, %r436}, {%r437}, {%r438}, {%r439, %r439};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r441, %r442}, {%r443}, {%r444}, {%r439, %r439};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r447, %r448}, {%r437}, {%r444}, {%r439, %r439};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r453, %r454}, {%r443}, {%r438}, {%r447, %r448};
	// end inline asm
	ld.shared.u32 	%r460, [%rd82+4];
	// begin inline asm
	lop3.b32 %r459, %r460, %r429, %r430, 40;
	// end inline asm
	add.s32 	%r693, %r459, 2021161080;
	xor.b32  	%r470, %r693, -2139062144;
	shr.u32 	%r464, %r460, 4;
	// begin inline asm
	lop3.b32 %r463, %r464, %r429, %r430, 40;
	// end inline asm
	add.s32 	%r694, %r463, 2021161080;
	xor.b32  	%r476, %r694, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r467, %r468}, {%r469}, {%r470}, {%r435, %r436};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r473, %r474}, {%r475}, {%r476}, {%r441, %r442};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r479, %r480}, {%r469}, {%r476}, {%r453, %r454};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r485, %r486}, {%r475}, {%r470}, {%r479, %r480};
	// end inline asm
	ld.shared.u32 	%r492, [%rd82+8];
	// begin inline asm
	lop3.b32 %r491, %r492, %r429, %r430, 40;
	// end inline asm
	add.s32 	%r695, %r491, 2021161080;
	xor.b32  	%r502, %r695, -2139062144;
	shr.u32 	%r496, %r492, 4;
	// begin inline asm
	lop3.b32 %r495, %r496, %r429, %r430, 40;
	// end inline asm
	add.s32 	%r696, %r495, 2021161080;
	xor.b32  	%r508, %r696, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r499, %r500}, {%r501}, {%r502}, {%r467, %r468};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r505, %r506}, {%r507}, {%r508}, {%r473, %r474};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r511, %r512}, {%r501}, {%r508}, {%r485, %r486};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r517, %r518}, {%r507}, {%r502}, {%r511, %r512};
	// end inline asm
	ld.shared.u32 	%r524, [%rd82+12];
	// begin inline asm
	lop3.b32 %r523, %r524, %r429, %r430, 40;
	// end inline asm
	add.s32 	%r697, %r523, 2021161080;
	xor.b32  	%r534, %r697, -2139062144;
	shr.u32 	%r528, %r524, 4;
	// begin inline asm
	lop3.b32 %r527, %r528, %r429, %r430, 40;
	// end inline asm
	add.s32 	%r698, %r527, 2021161080;
	xor.b32  	%r540, %r698, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r531, %r532}, {%r533}, {%r534}, {%r499, %r500};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r537, %r538}, {%r539}, {%r540}, {%r505, %r506};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r543, %r544}, {%r533}, {%r540}, {%r517, %r518};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r549, %r550}, {%r539}, {%r534}, {%r543, %r544};
	// end inline asm
	ld.shared.u32 	%r556, [%rd82+16];
	// begin inline asm
	lop3.b32 %r555, %r556, %r429, %r430, 40;
	// end inline asm
	add.s32 	%r699, %r555, 2021161080;
	xor.b32  	%r566, %r699, -2139062144;
	shr.u32 	%r560, %r556, 4;
	// begin inline asm
	lop3.b32 %r559, %r560, %r429, %r430, 40;
	// end inline asm
	add.s32 	%r700, %r559, 2021161080;
	xor.b32  	%r572, %r700, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r563, %r564}, {%r565}, {%r566}, {%r531, %r532};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r569, %r570}, {%r571}, {%r572}, {%r537, %r538};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r575, %r576}, {%r565}, {%r572}, {%r549, %r550};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r581, %r582}, {%r571}, {%r566}, {%r575, %r576};
	// end inline asm
	ld.shared.u32 	%r588, [%rd82+20];
	// begin inline asm
	lop3.b32 %r587, %r588, %r429, %r430, 40;
	// end inline asm
	add.s32 	%r701, %r587, 2021161080;
	xor.b32  	%r598, %r701, -2139062144;
	shr.u32 	%r592, %r588, 4;
	// begin inline asm
	lop3.b32 %r591, %r592, %r429, %r430, 40;
	// end inline asm
	add.s32 	%r702, %r591, 2021161080;
	xor.b32  	%r604, %r702, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r595, %r596}, {%r597}, {%r598}, {%r563, %r564};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r601, %r602}, {%r603}, {%r604}, {%r569, %r570};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r607, %r608}, {%r597}, {%r604}, {%r581, %r582};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r613, %r614}, {%r603}, {%r598}, {%r607, %r608};
	// end inline asm
	ld.shared.u32 	%r620, [%rd82+24];
	// begin inline asm
	lop3.b32 %r619, %r620, %r429, %r430, 40;
	// end inline asm
	add.s32 	%r703, %r619, 2021161080;
	xor.b32  	%r630, %r703, -2139062144;
	shr.u32 	%r624, %r620, 4;
	// begin inline asm
	lop3.b32 %r623, %r624, %r429, %r430, 40;
	// end inline asm
	add.s32 	%r704, %r623, 2021161080;
	xor.b32  	%r636, %r704, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r627, %r628}, {%r629}, {%r630}, {%r595, %r596};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r633, %r634}, {%r635}, {%r636}, {%r601, %r602};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r639, %r640}, {%r629}, {%r636}, {%r613, %r614};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r645, %r646}, {%r635}, {%r630}, {%r639, %r640};
	// end inline asm
	ld.shared.u32 	%r652, [%rd82+28];
	// begin inline asm
	lop3.b32 %r651, %r652, %r429, %r430, 40;
	// end inline asm
	add.s32 	%r705, %r651, 2021161080;
	xor.b32  	%r662, %r705, -2139062144;
	shr.u32 	%r656, %r652, 4;
	// begin inline asm
	lop3.b32 %r655, %r656, %r429, %r430, 40;
	// end inline asm
	add.s32 	%r706, %r655, 2021161080;
	xor.b32  	%r668, %r706, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r659, %r660}, {%r661}, {%r662}, {%r627, %r628};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r665, %r666}, {%r667}, {%r668}, {%r633, %r634};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r671, %r672}, {%r661}, {%r668}, {%r645, %r646};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r677, %r678}, {%r667}, {%r662}, {%r671, %r672};
	// end inline asm
	sub.s32 	%r707, %r659, %r665;
	add.s32 	%r708, %r707, 4;
	shr.s32 	%r685, %r708, 3;
	add.s32 	%r709, %r677, 4;
	shr.s32 	%r684, %r709, 3;
	sub.s32 	%r710, %r660, %r666;
	add.s32 	%r711, %r710, 4;
	shr.s32 	%r688, %r711, 3;
	add.s32 	%r712, %r678, 4;
	shr.s32 	%r687, %r712, 3;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r683, %r684, %r685;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r686, %r687, %r688;
	// end inline asm
	or.b32  	%r713, %r33, %r878;
	mad.lo.s32 	%r714, %r713, 20, %r34;
	mul.wide.u32 	%rd83, %r714, 4;
	add.s64 	%rd84, %rd37, %rd83;
	st.shared.u32 	[%rd84+8320], %r683;
	st.shared.u32 	[%rd84+8400], %r686;
	add.s32 	%r878, %r878, 8;
	setp.ne.s32 	%p31, %r878, 32;
	@%p31 bra 	$L__BB0_16;
// %bb.17:                              // %L6879
                                        //   in Loop: Header=BB0_15 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r733, [%rd9];
	ld.shared.u32 	%r734, [%rd10];
	ld.shared.u32 	%r735, [%rd11];
	ld.shared.u32 	%r736, [%rd12];
	ld.shared.u32 	%r737, [%rd13];
	ld.shared.u32 	%r738, [%rd14];
	ld.shared.u32 	%r739, [%rd15];
	ld.shared.u32 	%r740, [%rd16];
	cvt.s32.s16 	%r741, %r733;
	shr.s32 	%r742, %r733, 16;
	cvt.s32.s16 	%r743, %r734;
	shr.s32 	%r744, %r734, 16;
	cvt.s32.s16 	%r745, %r735;
	shr.s32 	%r746, %r735, 16;
	cvt.s32.s16 	%r747, %r736;
	shr.s32 	%r748, %r736, 16;
	cvt.s32.s16 	%r749, %r737;
	shr.s32 	%r750, %r737, 16;
	cvt.s32.s16 	%r751, %r738;
	shr.s32 	%r752, %r738, 16;
	cvt.s32.s16 	%r753, %r739;
	shr.s32 	%r754, %r739, 16;
	cvt.s32.s16 	%r755, %r740;
	shr.s32 	%r756, %r740, 16;
	add.s32 	%r757, %r741, %r35;
	add.s32 	%r758, %r757, %r743;
	shr.s32 	%r759, %r758, %r36;
	add.s32 	%r760, %r742, %r35;
	add.s32 	%r761, %r760, %r744;
	shr.s32 	%r762, %r761, %r36;
	add.s32 	%r763, %r745, %r35;
	add.s32 	%r764, %r763, %r747;
	shr.s32 	%r765, %r764, %r36;
	add.s32 	%r766, %r746, %r35;
	add.s32 	%r767, %r766, %r748;
	shr.s32 	%r768, %r767, %r36;
	add.s32 	%r769, %r749, %r35;
	add.s32 	%r770, %r769, %r751;
	shr.s32 	%r771, %r770, %r36;
	add.s32 	%r772, %r750, %r35;
	add.s32 	%r773, %r772, %r752;
	shr.s32 	%r774, %r773, %r36;
	add.s32 	%r775, %r753, %r35;
	add.s32 	%r776, %r775, %r755;
	shr.s32 	%r777, %r776, %r36;
	add.s32 	%r778, %r754, %r35;
	add.s32 	%r779, %r778, %r756;
	shr.s32 	%r780, %r779, %r36;
	max.s32 	%r781, %r759, -7;
	min.s32 	%r720, %r781, 7;
	setp.ne.s32 	%p32, %r720, %r759;
	or.pred  	%p33, %p59, %p32;
	max.s32 	%r782, %r762, -7;
	min.s32 	%r727, %r782, 7;
	setp.ne.s32 	%p34, %r727, %r762;
	or.pred  	%p35, %p34, %p33;
	max.s32 	%r783, %r765, -7;
	min.s32 	%r719, %r783, 7;
	setp.ne.s32 	%p36, %r719, %r765;
	or.pred  	%p37, %p35, %p36;
	max.s32 	%r784, %r768, -7;
	min.s32 	%r726, %r784, 7;
	setp.ne.s32 	%p38, %r726, %r768;
	or.pred  	%p39, %p38, %p37;
	max.s32 	%r785, %r771, -7;
	min.s32 	%r717, %r785, 7;
	setp.ne.s32 	%p40, %r717, %r771;
	or.pred  	%p41, %p39, %p40;
	max.s32 	%r786, %r774, -7;
	min.s32 	%r724, %r786, 7;
	setp.ne.s32 	%p42, %r724, %r774;
	or.pred  	%p43, %p42, %p41;
	max.s32 	%r787, %r777, -7;
	min.s32 	%r716, %r787, 7;
	setp.ne.s32 	%p44, %r716, %r777;
	or.pred  	%p45, %p43, %p44;
	max.s32 	%r788, %r780, -7;
	min.s32 	%r723, %r788, 7;
	setp.ne.s32 	%p46, %r723, %r780;
	or.pred  	%p59, %p46, %p45;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r715, %r716, %r717, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r718, %r719, %r720, %r715;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r722, %r723, %r724, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r725, %r726, %r727, %r722;
	// end inline asm
	shl.b32 	%r732, %r725, 4;
	// begin inline asm
	lop3.b32 %r799, %r430, %r718, %r732, 202;
	// end inline asm
	setp.eq.s32 	%p47, %r871, 0;
	selp.b32 	%r876, %r799, %r876, %p47;
	selp.b32 	%r877, %r799, %r877, %p47;
	setp.eq.s32 	%p48, %r871, 32;
	selp.b32 	%r872, %r799, %r872, %p48;
	selp.b32 	%r873, %r799, %r873, %p48;
	setp.eq.s32 	%p49, %r871, 64;
	selp.b32 	%r874, %r799, %r874, %p49;
	selp.b32 	%r875, %r799, %r875, %p49;
	add.s32 	%r61, %r871, 32;
	setp.ne.s32 	%p50, %r871, 96;
	mov.u32 	%r871, %r61;
	@%p50 bra 	$L__BB0_15;
// %bb.18:                              // %L8157.L8163_crit_edge
                                        //   in Loop: Header=BB0_13 Depth=1
	setp.eq.s32 	%p51, %r37, 0;
	// begin inline asm
	prmt.b32 %r789, %r876, %r872, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r793, %r877, %r873, %r151;
	// end inline asm
	// begin inline asm
	prmt.b32 %r797, %r874, %r799, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r801, %r875, %r799, %r151;
	// end inline asm
	selp.b32 	%r837, %r793, %r789, %p51;
	shfl.sync.bfly.b32	%r838, %r837, 1, 31, -1;
	selp.b32 	%r806, %r789, %r838, %p51;
	selp.b32 	%r807, %r838, %r793, %p51;
	selp.b32 	%r839, %r801, %r797, %p51;
	shfl.sync.bfly.b32	%r840, %r839, 1, 31, -1;
	selp.b32 	%r814, %r797, %r840, %p51;
	selp.b32 	%r815, %r840, %r801, %p51;
	// begin inline asm
	prmt.b32 %r805, %r806, %r807, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r809, %r806, %r807, %r151;
	// end inline asm
	// begin inline asm
	prmt.b32 %r813, %r814, %r815, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r817, %r814, %r815, %r151;
	// end inline asm
	selp.b32 	%r841, %r813, %r805, %p15;
	shfl.sync.bfly.b32	%r842, %r841, 2, 31, -1;
	selp.b32 	%r822, %r805, %r842, %p15;
	selp.b32 	%r823, %r842, %r813, %p15;
	selp.b32 	%r843, %r817, %r809, %p15;
	shfl.sync.bfly.b32	%r844, %r843, 2, 31, -1;
	selp.b32 	%r830, %r809, %r844, %p15;
	selp.b32 	%r831, %r844, %r817, %p15;
	// begin inline asm
	prmt.b32 %r821, %r822, %r823, %r83;
	// end inline asm
	// begin inline asm
	prmt.b32 %r825, %r822, %r823, %r87;
	// end inline asm
	// begin inline asm
	prmt.b32 %r829, %r830, %r831, %r83;
	// end inline asm
	// begin inline asm
	prmt.b32 %r833, %r830, %r831, %r87;
	// end inline asm
	selp.b32 	%r845, %r829, %r821, %p16;
	shfl.sync.bfly.b32	%r846, %r845, 4, 31, -1;
	selp.b32 	%r847, %r821, %r846, %p16;
	selp.b32 	%r848, %r846, %r829, %p16;
	selp.b32 	%r849, %r833, %r825, %p16;
	shfl.sync.bfly.b32	%r850, %r849, 4, 31, -1;
	selp.b32 	%r851, %r825, %r850, %p16;
	selp.b32 	%r852, %r850, %r833, %p16;
	selp.b32 	%r853, %r851, %r847, %p51;
	shfl.sync.bfly.b32	%r854, %r853, 1, 31, -1;
	selp.b32 	%r855, %r847, %r854, %p51;
	selp.b32 	%r856, %r854, %r851, %p51;
	selp.b32 	%r857, %r852, %r848, %p51;
	shfl.sync.bfly.b32	%r858, %r857, 1, 31, -1;
	selp.b32 	%r859, %r848, %r858, %p51;
	selp.b32 	%r860, %r858, %r852, %p51;
	and.b32  	%r861, %r870, 16256;
	or.b32  	%r862, %r861, %r38;
	or.b32  	%r863, %r39, %r862;
	cvt.u64.u32 	%rd85, %r863;
	add.s64 	%rd86, %rd4, %rd85;
	st.global.v4.u32 	[%rd86], {%r855, %r859, %r856, %r860};
	add.s32 	%r62, %r870, 128;
	setp.ne.s32 	%p54, %r870, 65408;
	mov.u32 	%r870, %r62;
	@%p54 bra 	$L__BB0_13;
$L__BB0_19:                             // %L8544
	selp.u32 	%r864, 1, 0, %p59;
	{ 
	.reg .pred 	%p1; 
	.reg .pred 	%p2; 
	setp.ne.u32 	%p1, %r864, 0; 
	bar.red.or.pred 	%p2, 0, %p1; 
	selp.u32 	%r865, 1, 0, %p2; 
	}
	setp.eq.s32 	%p55, %r865, 0;
	or.pred  	%p56, %p55, %p1;
	@%p56 bra 	$L__BB0_21;
// %bb.20:                              // %L8575
	st.global.u32 	[%rd8], %r71;
$L__BB0_21:                             // %L8621
	mov.u32 	%r867, 0;
	st.global.u32 	[%rd7], %r867;
	ret;
$L__BB0_7:                              // %L152
	mov.u32 	%r868, 2;
	st.global.u32 	[%rd7], %r868;
	mov.u64 	%rd87, exception716;
	cvta.global.u64 	%rd88, %rd87;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd88;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r63;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r63;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L24
	mov.u64 	%rd20, exception1;
	cvta.global.u64 	%rd21, %rd20;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd21;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r63;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_9:                              // %L370
	mov.u32 	%r77, 3;
	st.global.u32 	[%rd7], %r77;
	mov.u64 	%rd25, exception716;
	cvta.global.u64 	%rd26, %rd25;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd26;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd17;
	st.param.b32 	[param0+8], %r63;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
