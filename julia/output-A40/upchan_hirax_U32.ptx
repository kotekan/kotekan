// PTX kernel code for the CUDA upchannelizer
// This file has been generated automatically by `upchan.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for upchan(::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception2082[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<229>;
	.reg .b16 	%rs<297>;
	.reg .b32 	%r<2569>;
	.reg .f32 	%f<847>;
	.reg .b64 	%rd<141>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r141, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd30, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r146, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r146, 67839;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd31, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	ld.param.u32 	%r142, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r147, %r1, 9;
	mov.u32 	%r2, %tid.x;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r148, %r147, %r2;
	or.b32  	%r149, %r148, %r4;
	mul.wide.u32 	%rd37, %r149, 4;
	add.s64 	%rd4, %rd31, %rd37;
	mov.u32 	%r150, 1;
	st.global.u32 	[%rd4], %r150;
	setp.lt.s32 	%p2, %r142, 0;
	@%p2 bra 	$L__BB0_7;
// %bb.3:                               // %L115
	ld.param.u32 	%r143, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p3, %r143, %r142;
	setp.gt.s32 	%p4, %r143, 65536;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_7;
// %bb.4:                               // %L125
	ld.param.u32 	%r144, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r151, %r143, %r142;
	and.b32  	%r152, %r151, 255;
	setp.ne.s32 	%p6, %r152, 0;
	setp.lt.s32 	%p7, %r144, 0;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L131
	ld.param.u32 	%r145, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.lt.s32 	%p9, %r145, %r144;
	setp.gt.s32 	%p10, %r145, 2048;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L141
	sub.s32 	%r153, %r145, %r144;
	add.s32 	%r154, %r153, 3;
	and.b32  	%r155, %r154, 7;
	setp.eq.s32 	%p12, %r155, 0;
	@%p12 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_7;
$L__BB0_8:                              // %pass136
	bfe.u32 	%r88, %r2, 1, 1;
	and.b32  	%r89, %r2, 1;
	bfe.u32 	%r90, %r2, 2, 1;
	shl.b32 	%r163, %r90, 1;
	shl.b32 	%r164, %r89, 2;
	shl.b32 	%r165, %r88, 3;
	or.b32  	%r166, %r164, %r165;
	or.b32  	%r167, %r163, %r166;
	shr.u32 	%r91, %r2, 4;
	or.b32  	%r92, %r91, %r167;
	or.b32  	%r93, %r92, 16;
	mov.f32 	%f148, 0f40000000;
	mov.f32 	%f149, 0f42FE0000;
	div.approx.f32 	%f105, %f149, %f148;
	cvt.rn.f32.s32 	%f150, %r92;
	sub.f32 	%f151, %f150, %f105;
	mov.f32 	%f180, 0f42000000;
	div.approx.f32 	%f107, %f151, %f180;
	setp.ne.f32 	%p18, %f107, 0f00000000;
	mov.f32 	%f822, 0f3F800000;
	mov.f32 	%f815, %f822;
	@%p18 bra 	$L__BB0_9;
	bra.uni 	$L__BB0_10;
$L__BB0_9:                              // %L461
	sin.approx.f32 	%f181, %f107;
	div.approx.f32 	%f815, %f181, %f107;
$L__BB0_10:                             // %L464
	cvt.rn.f32.s32 	%f184, %r93;
	sub.f32 	%f185, %f184, %f105;
	div.approx.f32 	%f5, %f185, %f180;
	setp.eq.f32 	%p24, %f5, 0f00000000;
	mov.f32 	%f816, %f822;
	@%p24 bra 	$L__BB0_12;
// %bb.11:                              // %L481
	sin.approx.f32 	%f215, %f5;
	div.approx.f32 	%f816, %f215, %f5;
$L__BB0_12:                             // %L484
	or.b32  	%r185, %r92, 32;
	or.b32  	%r6, %r92, 48;
	cvt.rn.f32.s32 	%f219, %r185;
	sub.f32 	%f220, %f219, %f105;
	div.approx.f32 	%f9, %f220, %f180;
	setp.eq.f32 	%p30, %f9, 0f00000000;
	mov.f32 	%f817, %f822;
	@%p30 bra 	$L__BB0_14;
// %bb.13:                              // %L563
	sin.approx.f32 	%f250, %f9;
	div.approx.f32 	%f817, %f250, %f9;
$L__BB0_14:                             // %L566
	cvt.rn.f32.s32 	%f253, %r6;
	sub.f32 	%f254, %f253, %f105;
	div.approx.f32 	%f14, %f254, %f180;
	setp.eq.f32 	%p36, %f14, 0f00000000;
	mov.f32 	%f818, %f822;
	@%p36 bra 	$L__BB0_16;
// %bb.15:                              // %L583
	sin.approx.f32 	%f284, %f14;
	div.approx.f32 	%f818, %f284, %f14;
$L__BB0_16:                             // %L586
	or.b32  	%r203, %r92, 64;
	or.b32  	%r8, %r92, 80;
	cvt.rn.f32.s32 	%f288, %r203;
	sub.f32 	%f289, %f288, %f105;
	div.approx.f32 	%f18, %f289, %f180;
	setp.eq.f32 	%p42, %f18, 0f00000000;
	mov.f32 	%f819, %f822;
	@%p42 bra 	$L__BB0_18;
// %bb.17:                              // %L665
	sin.approx.f32 	%f319, %f18;
	div.approx.f32 	%f819, %f319, %f18;
$L__BB0_18:                             // %L668
	cvt.rn.f32.s32 	%f322, %r8;
	sub.f32 	%f323, %f322, %f105;
	div.approx.f32 	%f23, %f323, %f180;
	setp.eq.f32 	%p48, %f23, 0f00000000;
	mov.f32 	%f820, %f822;
	@%p48 bra 	$L__BB0_20;
// %bb.19:                              // %L685
	sin.approx.f32 	%f353, %f23;
	div.approx.f32 	%f820, %f353, %f23;
$L__BB0_20:                             // %L688
	or.b32  	%r221, %r92, 96;
	or.b32  	%r10, %r92, 112;
	cvt.rn.f32.s32 	%f357, %r221;
	sub.f32 	%f358, %f357, %f105;
	div.approx.f32 	%f27, %f358, %f180;
	setp.eq.f32 	%p54, %f27, 0f00000000;
	mov.f32 	%f821, %f822;
	@%p54 bra 	$L__BB0_22;
// %bb.21:                              // %L767
	sin.approx.f32 	%f388, %f27;
	div.approx.f32 	%f821, %f388, %f27;
$L__BB0_22:                             // %L770
	shr.u32 	%r87, %r2, 1;
	cvt.rn.f32.s32 	%f391, %r10;
	sub.f32 	%f392, %f391, %f105;
	div.approx.f32 	%f32, %f392, %f180;
	setp.eq.f32 	%p60, %f32, 0f00000000;
	@%p60 bra 	$L__BB0_24;
// %bb.23:                              // %L787
	sin.approx.f32 	%f422, %f32;
	div.approx.f32 	%f822, %f422, %f32;
$L__BB0_24:                             // %L790
	shr.u32 	%r14, %r2, 3;
	and.b32  	%r265, %r14, 2;
	and.b32  	%r266, %r87, 4;
	or.b32  	%r15, %r90, %r265;
	or.b32  	%r16, %r15, %r266;
	and.b32  	%r267, %r2, 3;
	mul.lo.s32 	%r268, %r267, %r16;
	shl.b32 	%r269, %r268, 1;
	neg.s32 	%r270, %r269;
	cvt.rn.f32.s32 	%f493, %r270;
	mov.f32 	%f494, 0f41000000;
	div.approx.f32 	%f35, %f493, %f494;
	abs.f32 	%f841, %f35;
	setp.lt.f32 	%p75, %f841, 0f40000000;
	@%p75 bra 	$L__BB0_101;
// %bb.25:
	setp.gtu.f32 	%p76, %f841, 0f4B800000;
	@%p76 bra 	$L__BB0_97;
	bra.uni 	$L__BB0_26;
$L__BB0_97:
	mov.b32 	%r95, %f841;
	and.b32  	%r271, %r95, 8388607;
	or.b32  	%r2557, %r271, 1065353216;
	mov.b32 	%f840, %r2557;
	add.s32 	%r272, %r95, -1073741824;
	and.b32  	%r2558, %r272, -8388608;
	setp.eq.s32 	%p82, %r2558, 0;
	@%p82 bra 	$L__BB0_100;
// %bb.98:                              // %__nv_fmaf_rn.exit4.i.i.i680.preheader
	mov.f32 	%f504, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f503,%f504;
	// end inline asm
$L__BB0_99:                             // %__nv_fmaf_rn.exit4.i.i.i680
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r273, %r2558, 192937984;
	add.s32 	%r274, %r2557, %r273;
	mov.b32 	%f505, %r274;
	mul.f32 	%f506, %f503, %f505;
	sub.f32 	%f507, %f505, %f506;
	fma.rn.f32 	%f508, %f507, %f503, %f506;
	sub.f32 	%f509, %f505, %f508;
	fma.rz.f32 	%f510, %f509, %f503, %f508;
	cvt.rzi.f32.f32 	%f511, %f510;
	sub.f32 	%f840, %f505, %f511;
	sub.s32 	%r2558, %r2558, %r273;
	mov.b32 	%r2557, %f840;
	setp.ne.s32 	%p83, %r2558, 0;
	setp.ne.s32 	%p84, %r2557, 0;
	and.pred  	%p85, %p83, %p84;
	@%p85 bra 	$L__BB0_99;
$L__BB0_100:                            // %__internal_fmodf_slowpath_mod.exit.i.i682
	setp.gt.u32 	%p86, %r95, 2139095039;
	selp.f32 	%f512, 0f7FFFFFFF, 0f4B800000, %p86;
	mul.f32 	%f513, %f840, 0f34000000;
	mul.f32 	%f841, %f512, %f513;
	bra.uni 	$L__BB0_101;
$L__BB0_26:                             // %__nv_fast_fdividef.exit.i.i.i659
	div.approx.f32 	%f496, %f841, %f148;
	cvt.rzi.f32.f32 	%f839, %f496;
	fma.rn.f32 	%f109, %f839, 0fC0000000, %f841;
	mov.b32 	%r94, %f109;
	setp.lt.u32 	%p77, %r94, 1073741824;
	@%p77 bra 	$L__BB0_96;
// %bb.27:
	setp.lt.u32 	%p78, %r94, -2147483647;
	@%p78 bra 	$L__BB0_94;
// %bb.28:
	add.f32 	%f501, %f839, 0fBF800000;
	setp.lt.f32 	%p81, %f109, 0fC0000000;
	add.f32 	%f502, %f501, 0fBF800000;
	selp.f32 	%f839, %f502, %f501, %p81;
	bra.uni 	$L__BB0_96;
$L__BB0_94:
	add.f32 	%f839, %f839, 0f3F800000;
	setp.ltu.f32 	%p79, %f109, 0f40800000;
	@%p79 bra 	$L__BB0_96;
// %bb.95:                              // %__nv_fmaf_rn.exit.i.i.i663
	add.f32 	%f497, %f839, 0f3F800000;
	fma.rn.f32 	%f499, %f148, 0fC0400000, %f109;
	setp.ge.f32 	%p80, %f499, 0f00000000;
	add.f32 	%f500, %f497, 0f3F800000;
	selp.f32 	%f839, %f500, %f497, %p80;
$L__BB0_96:                             // %__internal_fmodf_fastpath_quot.exit.i.i666
	fma.rn.f32 	%f841, %f839, 0fC0000000, %f841;
$L__BB0_101:                            // %__internal_fmodf_kernel.exit.i685
	shl.b32 	%r83, %r2, 1;
	abs.f32 	%f514, %f841;
	setp.gtu.f32 	%p87, %f514, 0f7F800000;
	@%p87 bra 	$L__BB0_103;
// %bb.102:
	mov.b32 	%r275, %f35;
	and.b32  	%r276, %r275, -2147483648;
	mov.b32 	%r277, %f841;
	or.b32  	%r278, %r276, %r277;
	mov.b32 	%f841, %r278;
$L__BB0_103:                            // %__nv_fmodf.exit686
	and.b32  	%r287, %r83, 6;
	mov.u32 	%r288, -8;
	sub.s32 	%r289, %r288, %r287;
	mul.lo.s32 	%r290, %r16, %r289;
	cvt.rn.f32.s32 	%f545, %r290;
	div.approx.f32 	%f125, %f545, %f494;
	abs.f32 	%f825, %f125;
	setp.lt.f32 	%p95, %f825, 0f40000000;
	@%p95 bra 	$L__BB0_40;
// %bb.29:
	setp.gtu.f32 	%p96, %f825, 0f4B800000;
	@%p96 bra 	$L__BB0_36;
	bra.uni 	$L__BB0_30;
$L__BB0_36:
	mov.b32 	%r18, %f825;
	and.b32  	%r291, %r18, 8388607;
	or.b32  	%r2542, %r291, 1065353216;
	mov.b32 	%f824, %r2542;
	add.s32 	%r292, %r18, -1073741824;
	and.b32  	%r2543, %r292, -8388608;
	setp.eq.s32 	%p102, %r2543, 0;
	@%p102 bra 	$L__BB0_39;
// %bb.37:                              // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f556, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f555,%f556;
	// end inline asm
$L__BB0_38:                             // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r293, %r2543, 192937984;
	add.s32 	%r294, %r2542, %r293;
	mov.b32 	%f557, %r294;
	mul.f32 	%f558, %f555, %f557;
	sub.f32 	%f559, %f557, %f558;
	fma.rn.f32 	%f560, %f559, %f555, %f558;
	sub.f32 	%f561, %f557, %f560;
	fma.rz.f32 	%f562, %f561, %f555, %f560;
	cvt.rzi.f32.f32 	%f563, %f562;
	sub.f32 	%f824, %f557, %f563;
	sub.s32 	%r2543, %r2543, %r293;
	mov.b32 	%r2542, %f824;
	setp.ne.s32 	%p103, %r2543, 0;
	setp.ne.s32 	%p104, %r2542, 0;
	and.pred  	%p105, %p103, %p104;
	@%p105 bra 	$L__BB0_38;
$L__BB0_39:                             // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p106, %r18, 2139095039;
	selp.f32 	%f564, 0f7FFFFFFF, 0f4B800000, %p106;
	mul.f32 	%f565, %f824, 0f34000000;
	mul.f32 	%f825, %f564, %f565;
	bra.uni 	$L__BB0_40;
$L__BB0_30:                             // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f548, %f825, %f148;
	cvt.rzi.f32.f32 	%f823, %f548;
	fma.rn.f32 	%f38, %f823, 0fC0000000, %f825;
	mov.b32 	%r17, %f38;
	setp.lt.u32 	%p97, %r17, 1073741824;
	@%p97 bra 	$L__BB0_35;
// %bb.31:
	setp.lt.u32 	%p98, %r17, -2147483647;
	@%p98 bra 	$L__BB0_33;
// %bb.32:
	add.f32 	%f553, %f823, 0fBF800000;
	setp.lt.f32 	%p101, %f38, 0fC0000000;
	add.f32 	%f554, %f553, 0fBF800000;
	selp.f32 	%f823, %f554, %f553, %p101;
	bra.uni 	$L__BB0_35;
$L__BB0_33:
	add.f32 	%f823, %f823, 0f3F800000;
	setp.ltu.f32 	%p99, %f38, 0f40800000;
	@%p99 bra 	$L__BB0_35;
// %bb.34:                              // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f549, %f823, 0f3F800000;
	fma.rn.f32 	%f551, %f148, 0fC0400000, %f38;
	setp.ge.f32 	%p100, %f551, 0f00000000;
	add.f32 	%f552, %f549, 0f3F800000;
	selp.f32 	%f823, %f552, %f549, %p100;
$L__BB0_35:                             // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f825, %f823, 0fC0000000, %f825;
$L__BB0_40:                             // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f566, %f825;
	setp.gtu.f32 	%p107, %f566, 0f7F800000;
	@%p107 bra 	$L__BB0_42;
// %bb.41:
	mov.b32 	%r295, %f125;
	and.b32  	%r296, %r295, -2147483648;
	mov.b32 	%r297, %f825;
	or.b32  	%r298, %r296, %r297;
	mov.b32 	%f825, %r298;
$L__BB0_42:                             // %__nv_fmodf.exit
	shl.b32 	%r319, %r88, 1;
	neg.s32 	%r29, %r319;
	mul.lo.s32 	%r30, %r29, %r16;
	cvt.rn.f32.s32 	%f599, %r30;
	div.approx.f32 	%f52, %f599, %f180;
	abs.f32 	%f829, %f52;
	setp.lt.f32 	%p115, %f829, 0f40000000;
	@%p115 bra 	$L__BB0_54;
// %bb.43:
	setp.gtu.f32 	%p116, %f829, 0f4B800000;
	@%p116 bra 	$L__BB0_50;
	bra.uni 	$L__BB0_44;
$L__BB0_50:
	mov.b32 	%r32, %f829;
	and.b32  	%r320, %r32, 8388607;
	or.b32  	%r2544, %r320, 1065353216;
	mov.b32 	%f828, %r2544;
	add.s32 	%r321, %r32, -1073741824;
	and.b32  	%r2545, %r321, -8388608;
	setp.eq.s32 	%p122, %r2545, 0;
	@%p122 bra 	$L__BB0_53;
// %bb.51:                              // %__nv_fmaf_rn.exit4.i.i.i587.preheader
	mov.f32 	%f610, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f609,%f610;
	// end inline asm
$L__BB0_52:                             // %__nv_fmaf_rn.exit4.i.i.i587
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r322, %r2545, 192937984;
	add.s32 	%r323, %r2544, %r322;
	mov.b32 	%f611, %r323;
	mul.f32 	%f612, %f609, %f611;
	sub.f32 	%f613, %f611, %f612;
	fma.rn.f32 	%f614, %f613, %f609, %f612;
	sub.f32 	%f615, %f611, %f614;
	fma.rz.f32 	%f616, %f615, %f609, %f614;
	cvt.rzi.f32.f32 	%f617, %f616;
	sub.f32 	%f828, %f611, %f617;
	sub.s32 	%r2545, %r2545, %r322;
	mov.b32 	%r2544, %f828;
	setp.ne.s32 	%p123, %r2545, 0;
	setp.ne.s32 	%p124, %r2544, 0;
	and.pred  	%p125, %p123, %p124;
	@%p125 bra 	$L__BB0_52;
$L__BB0_53:                             // %__internal_fmodf_slowpath_mod.exit.i.i589
	setp.gt.u32 	%p126, %r32, 2139095039;
	selp.f32 	%f618, 0f7FFFFFFF, 0f4B800000, %p126;
	mul.f32 	%f619, %f828, 0f34000000;
	mul.f32 	%f829, %f618, %f619;
	bra.uni 	$L__BB0_54;
$L__BB0_44:                             // %__nv_fast_fdividef.exit.i.i.i566
	div.approx.f32 	%f602, %f829, %f148;
	cvt.rzi.f32.f32 	%f827, %f602;
	fma.rn.f32 	%f55, %f827, 0fC0000000, %f829;
	mov.b32 	%r31, %f55;
	setp.lt.u32 	%p117, %r31, 1073741824;
	@%p117 bra 	$L__BB0_49;
// %bb.45:
	setp.lt.u32 	%p118, %r31, -2147483647;
	@%p118 bra 	$L__BB0_47;
// %bb.46:
	add.f32 	%f607, %f827, 0fBF800000;
	setp.lt.f32 	%p121, %f55, 0fC0000000;
	add.f32 	%f608, %f607, 0fBF800000;
	selp.f32 	%f827, %f608, %f607, %p121;
	bra.uni 	$L__BB0_49;
$L__BB0_47:
	add.f32 	%f827, %f827, 0f3F800000;
	setp.ltu.f32 	%p119, %f55, 0f40800000;
	@%p119 bra 	$L__BB0_49;
// %bb.48:                              // %__nv_fmaf_rn.exit.i.i.i570
	add.f32 	%f603, %f827, 0f3F800000;
	fma.rn.f32 	%f605, %f148, 0fC0400000, %f55;
	setp.ge.f32 	%p120, %f605, 0f00000000;
	add.f32 	%f606, %f603, 0f3F800000;
	selp.f32 	%f827, %f606, %f603, %p120;
$L__BB0_49:                             // %__internal_fmodf_fastpath_quot.exit.i.i573
	fma.rn.f32 	%f829, %f827, 0fC0000000, %f829;
$L__BB0_54:                             // %__internal_fmodf_kernel.exit.i592
	abs.f32 	%f620, %f829;
	setp.gtu.f32 	%p127, %f620, 0f7F800000;
	@%p127 bra 	$L__BB0_56;
// %bb.55:
	mov.b32 	%r324, %f52;
	and.b32  	%r325, %r324, -2147483648;
	mov.b32 	%r326, %f829;
	or.b32  	%r327, %r325, %r326;
	mov.b32 	%f829, %r327;
$L__BB0_56:                             // %__nv_fmodf.exit593
	shl.b32 	%r336, %r16, 2;
	sub.s32 	%r337, %r30, %r336;
	cvt.rn.f32.s32 	%f651, %r337;
	div.approx.f32 	%f71, %f651, %f180;
	abs.f32 	%f833, %f71;
	setp.lt.f32 	%p135, %f833, 0f40000000;
	@%p135 bra 	$L__BB0_68;
// %bb.57:
	setp.gtu.f32 	%p136, %f833, 0f4B800000;
	@%p136 bra 	$L__BB0_64;
	bra.uni 	$L__BB0_58;
$L__BB0_64:
	mov.b32 	%r40, %f833;
	and.b32  	%r338, %r40, 8388607;
	or.b32  	%r2546, %r338, 1065353216;
	mov.b32 	%f832, %r2546;
	add.s32 	%r339, %r40, -1073741824;
	and.b32  	%r2547, %r339, -8388608;
	setp.eq.s32 	%p142, %r2547, 0;
	@%p142 bra 	$L__BB0_67;
// %bb.65:                              // %__nv_fmaf_rn.exit4.i.i.i618.preheader
	mov.f32 	%f662, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f661,%f662;
	// end inline asm
$L__BB0_66:                             // %__nv_fmaf_rn.exit4.i.i.i618
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r340, %r2547, 192937984;
	add.s32 	%r341, %r2546, %r340;
	mov.b32 	%f663, %r341;
	mul.f32 	%f664, %f661, %f663;
	sub.f32 	%f665, %f663, %f664;
	fma.rn.f32 	%f666, %f665, %f661, %f664;
	sub.f32 	%f667, %f663, %f666;
	fma.rz.f32 	%f668, %f667, %f661, %f666;
	cvt.rzi.f32.f32 	%f669, %f668;
	sub.f32 	%f832, %f663, %f669;
	sub.s32 	%r2547, %r2547, %r340;
	mov.b32 	%r2546, %f832;
	setp.ne.s32 	%p143, %r2547, 0;
	setp.ne.s32 	%p144, %r2546, 0;
	and.pred  	%p145, %p143, %p144;
	@%p145 bra 	$L__BB0_66;
$L__BB0_67:                             // %__internal_fmodf_slowpath_mod.exit.i.i620
	setp.gt.u32 	%p146, %r40, 2139095039;
	selp.f32 	%f670, 0f7FFFFFFF, 0f4B800000, %p146;
	mul.f32 	%f671, %f832, 0f34000000;
	mul.f32 	%f833, %f670, %f671;
	bra.uni 	$L__BB0_68;
$L__BB0_58:                             // %__nv_fast_fdividef.exit.i.i.i597
	div.approx.f32 	%f654, %f833, %f148;
	cvt.rzi.f32.f32 	%f831, %f654;
	fma.rn.f32 	%f74, %f831, 0fC0000000, %f833;
	mov.b32 	%r39, %f74;
	setp.lt.u32 	%p137, %r39, 1073741824;
	@%p137 bra 	$L__BB0_63;
// %bb.59:
	setp.lt.u32 	%p138, %r39, -2147483647;
	@%p138 bra 	$L__BB0_61;
// %bb.60:
	add.f32 	%f659, %f831, 0fBF800000;
	setp.lt.f32 	%p141, %f74, 0fC0000000;
	add.f32 	%f660, %f659, 0fBF800000;
	selp.f32 	%f831, %f660, %f659, %p141;
	bra.uni 	$L__BB0_63;
$L__BB0_61:
	add.f32 	%f831, %f831, 0f3F800000;
	setp.ltu.f32 	%p139, %f74, 0f40800000;
	@%p139 bra 	$L__BB0_63;
// %bb.62:                              // %__nv_fmaf_rn.exit.i.i.i601
	add.f32 	%f655, %f831, 0f3F800000;
	fma.rn.f32 	%f657, %f148, 0fC0400000, %f74;
	setp.ge.f32 	%p140, %f657, 0f00000000;
	add.f32 	%f658, %f655, 0f3F800000;
	selp.f32 	%f831, %f658, %f655, %p140;
$L__BB0_63:                             // %__internal_fmodf_fastpath_quot.exit.i.i604
	fma.rn.f32 	%f833, %f831, 0fC0000000, %f833;
$L__BB0_68:                             // %__internal_fmodf_kernel.exit.i623
	abs.f32 	%f672, %f833;
	setp.gtu.f32 	%p147, %f672, 0f7F800000;
	@%p147 bra 	$L__BB0_70;
// %bb.69:
	mov.b32 	%r342, %f71;
	and.b32  	%r343, %r342, -2147483648;
	mov.b32 	%r344, %f833;
	or.b32  	%r345, %r343, %r344;
	mov.b32 	%f833, %r345;
$L__BB0_70:                             // %__nv_fmodf.exit624
	mul.lo.s32 	%r50, %r29, %r15;
	cvt.rn.f32.s32 	%f705, %r50;
	mov.f32 	%f706, 0f40800000;
	div.approx.f32 	%f88, %f705, %f706;
	abs.f32 	%f845, %f88;
	setp.lt.f32 	%p155, %f845, 0f40000000;
	@%p155 bra 	$L__BB0_111;
// %bb.71:
	setp.gtu.f32 	%p156, %f845, 0f4B800000;
	@%p156 bra 	$L__BB0_107;
	bra.uni 	$L__BB0_72;
$L__BB0_107:
	mov.b32 	%r103, %f845;
	and.b32  	%r360, %r103, 8388607;
	or.b32  	%r2559, %r360, 1065353216;
	mov.b32 	%f844, %r2559;
	add.s32 	%r361, %r103, -1073741824;
	and.b32  	%r2560, %r361, -8388608;
	setp.eq.s32 	%p162, %r2560, 0;
	@%p162 bra 	$L__BB0_110;
// %bb.108:                             // %__nv_fmaf_rn.exit4.i.i.i711.preheader
	mov.f32 	%f716, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f715,%f716;
	// end inline asm
$L__BB0_109:                            // %__nv_fmaf_rn.exit4.i.i.i711
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r362, %r2560, 192937984;
	add.s32 	%r363, %r2559, %r362;
	mov.b32 	%f717, %r363;
	mul.f32 	%f718, %f715, %f717;
	sub.f32 	%f719, %f717, %f718;
	fma.rn.f32 	%f720, %f719, %f715, %f718;
	sub.f32 	%f721, %f717, %f720;
	fma.rz.f32 	%f722, %f721, %f715, %f720;
	cvt.rzi.f32.f32 	%f723, %f722;
	sub.f32 	%f844, %f717, %f723;
	sub.s32 	%r2560, %r2560, %r362;
	mov.b32 	%r2559, %f844;
	setp.ne.s32 	%p163, %r2560, 0;
	setp.ne.s32 	%p164, %r2559, 0;
	and.pred  	%p165, %p163, %p164;
	@%p165 bra 	$L__BB0_109;
$L__BB0_110:                            // %__internal_fmodf_slowpath_mod.exit.i.i713
	setp.gt.u32 	%p166, %r103, 2139095039;
	selp.f32 	%f724, 0f7FFFFFFF, 0f4B800000, %p166;
	mul.f32 	%f725, %f844, 0f34000000;
	mul.f32 	%f845, %f724, %f725;
	bra.uni 	$L__BB0_111;
$L__BB0_72:                             // %__nv_fast_fdividef.exit.i.i.i690
	div.approx.f32 	%f708, %f845, %f148;
	cvt.rzi.f32.f32 	%f843, %f708;
	fma.rn.f32 	%f128, %f843, 0fC0000000, %f845;
	mov.b32 	%r102, %f128;
	setp.lt.u32 	%p157, %r102, 1073741824;
	@%p157 bra 	$L__BB0_106;
// %bb.73:
	setp.lt.u32 	%p158, %r102, -2147483647;
	@%p158 bra 	$L__BB0_104;
// %bb.74:
	add.f32 	%f713, %f843, 0fBF800000;
	setp.lt.f32 	%p161, %f128, 0fC0000000;
	add.f32 	%f714, %f713, 0fBF800000;
	selp.f32 	%f843, %f714, %f713, %p161;
	bra.uni 	$L__BB0_106;
$L__BB0_104:
	add.f32 	%f843, %f843, 0f3F800000;
	setp.ltu.f32 	%p159, %f128, 0f40800000;
	@%p159 bra 	$L__BB0_106;
// %bb.105:                             // %__nv_fmaf_rn.exit.i.i.i694
	add.f32 	%f709, %f843, 0f3F800000;
	fma.rn.f32 	%f711, %f148, 0fC0400000, %f128;
	setp.ge.f32 	%p160, %f711, 0f00000000;
	add.f32 	%f712, %f709, 0f3F800000;
	selp.f32 	%f843, %f712, %f709, %p160;
$L__BB0_106:                            // %__internal_fmodf_fastpath_quot.exit.i.i697
	fma.rn.f32 	%f845, %f843, 0fC0000000, %f845;
$L__BB0_111:                            // %__internal_fmodf_kernel.exit.i716
	abs.f32 	%f726, %f845;
	setp.gtu.f32 	%p167, %f726, 0f7F800000;
	@%p167 bra 	$L__BB0_113;
// %bb.112:
	mov.b32 	%r364, %f88;
	and.b32  	%r365, %r364, -2147483648;
	mov.b32 	%r366, %f845;
	or.b32  	%r367, %r365, %r366;
	mov.b32 	%f845, %r367;
$L__BB0_113:                            // %__nv_fmodf.exit717
	shl.b32 	%r376, %r15, 2;
	sub.s32 	%r377, %r50, %r376;
	cvt.rn.f32.s32 	%f759, %r377;
	div.approx.f32 	%f145, %f759, %f706;
	abs.f32 	%f837, %f145;
	setp.lt.f32 	%p176, %f837, 0f40000000;
	@%p176 bra 	$L__BB0_86;
// %bb.75:
	setp.gtu.f32 	%p177, %f837, 0f4B800000;
	@%p177 bra 	$L__BB0_82;
	bra.uni 	$L__BB0_76;
$L__BB0_82:
	mov.b32 	%r52, %f837;
	and.b32  	%r378, %r52, 8388607;
	or.b32  	%r2548, %r378, 1065353216;
	mov.b32 	%f836, %r2548;
	add.s32 	%r379, %r52, -1073741824;
	and.b32  	%r2549, %r379, -8388608;
	setp.eq.s32 	%p183, %r2549, 0;
	@%p183 bra 	$L__BB0_85;
// %bb.83:                              // %__nv_fmaf_rn.exit4.i.i.i649.preheader
	mov.f32 	%f770, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f769,%f770;
	// end inline asm
$L__BB0_84:                             // %__nv_fmaf_rn.exit4.i.i.i649
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r380, %r2549, 192937984;
	add.s32 	%r381, %r2548, %r380;
	mov.b32 	%f771, %r381;
	mul.f32 	%f772, %f769, %f771;
	sub.f32 	%f773, %f771, %f772;
	fma.rn.f32 	%f774, %f773, %f769, %f772;
	sub.f32 	%f775, %f771, %f774;
	fma.rz.f32 	%f776, %f775, %f769, %f774;
	cvt.rzi.f32.f32 	%f777, %f776;
	sub.f32 	%f836, %f771, %f777;
	sub.s32 	%r2549, %r2549, %r380;
	mov.b32 	%r2548, %f836;
	setp.ne.s32 	%p184, %r2549, 0;
	setp.ne.s32 	%p185, %r2548, 0;
	and.pred  	%p186, %p184, %p185;
	@%p186 bra 	$L__BB0_84;
$L__BB0_85:                             // %__internal_fmodf_slowpath_mod.exit.i.i651
	setp.gt.u32 	%p187, %r52, 2139095039;
	selp.f32 	%f778, 0f7FFFFFFF, 0f4B800000, %p187;
	mul.f32 	%f779, %f836, 0f34000000;
	mul.f32 	%f837, %f778, %f779;
	bra.uni 	$L__BB0_86;
$L__BB0_76:                             // %__nv_fast_fdividef.exit.i.i.i628
	div.approx.f32 	%f762, %f837, %f148;
	cvt.rzi.f32.f32 	%f835, %f762;
	fma.rn.f32 	%f91, %f835, 0fC0000000, %f837;
	mov.b32 	%r51, %f91;
	setp.lt.u32 	%p178, %r51, 1073741824;
	@%p178 bra 	$L__BB0_81;
// %bb.77:
	setp.lt.u32 	%p179, %r51, -2147483647;
	@%p179 bra 	$L__BB0_79;
// %bb.78:
	add.f32 	%f767, %f835, 0fBF800000;
	setp.lt.f32 	%p182, %f91, 0fC0000000;
	add.f32 	%f768, %f767, 0fBF800000;
	selp.f32 	%f835, %f768, %f767, %p182;
	bra.uni 	$L__BB0_81;
$L__BB0_79:
	add.f32 	%f835, %f835, 0f3F800000;
	setp.ltu.f32 	%p180, %f91, 0f40800000;
	@%p180 bra 	$L__BB0_81;
// %bb.80:                              // %__nv_fmaf_rn.exit.i.i.i632
	add.f32 	%f763, %f835, 0f3F800000;
	fma.rn.f32 	%f765, %f148, 0fC0400000, %f91;
	setp.ge.f32 	%p181, %f765, 0f00000000;
	add.f32 	%f766, %f763, 0f3F800000;
	selp.f32 	%f835, %f766, %f763, %p181;
$L__BB0_81:                             // %__internal_fmodf_fastpath_quot.exit.i.i635
	fma.rn.f32 	%f837, %f835, 0fC0000000, %f837;
$L__BB0_86:                             // %__internal_fmodf_kernel.exit.i654
	abs.f32 	%f780, %f837;
	setp.gtu.f32 	%p188, %f780, 0f7F800000;
	@%p188 bra 	$L__BB0_88;
// %bb.87:
	mov.b32 	%r382, %f145;
	and.b32  	%r383, %r382, -2147483648;
	mov.b32 	%r384, %f837;
	or.b32  	%r385, %r383, %r384;
	mov.b32 	%f837, %r385;
$L__BB0_88:                             // %__nv_fmodf.exit655
	setp.le.s32 	%p196, %r143, %r142;
	mov.u32 	%r2540, 0;
	@%p196 bra 	$L__BB0_116;
// %bb.89:                              // %L1352.lr.ph
	mov.f32 	%f152, 0f43010000;
	mul.lo.s32 	%r245, %r92, 31;
	div.approx.f32 	%f153, %f151, %f152;
	div.approx.f32 	%f187, %f185, %f152;
	div.approx.f32 	%f222, %f220, %f152;
	div.approx.f32 	%f256, %f254, %f152;
	div.approx.f32 	%f291, %f289, %f152;
	div.approx.f32 	%f325, %f323, %f152;
	div.approx.f32 	%f360, %f358, %f152;
	div.approx.f32 	%f394, %f392, %f152;
	add.s32 	%r255, %r245, 48;
	abs.f32 	%f154, %f153;
	abs.f32 	%f188, %f187;
	abs.f32 	%f223, %f222;
	abs.f32 	%f257, %f256;
	abs.f32 	%f292, %f291;
	abs.f32 	%f326, %f325;
	abs.f32 	%f361, %f360;
	abs.f32 	%f395, %f394;
	and.b32  	%r246, %r245, 63;
	and.b32  	%r256, %r255, 63;
	setp.gt.f32 	%p13, %f154, 0f4B800000;
	mul.f32 	%f155, %f153, 0f00000000;
	setp.gt.f32 	%p19, %f188, 0f4B800000;
	mul.f32 	%f189, %f187, 0f00000000;
	setp.gt.f32 	%p25, %f223, 0f4B800000;
	mul.f32 	%f224, %f222, 0f00000000;
	setp.gt.f32 	%p31, %f257, 0f4B800000;
	mul.f32 	%f258, %f256, 0f00000000;
	setp.gt.f32 	%p37, %f292, 0f4B800000;
	mul.f32 	%f293, %f291, 0f00000000;
	setp.gt.f32 	%p43, %f326, 0f4B800000;
	mul.f32 	%f327, %f325, 0f00000000;
	setp.gt.f32 	%p49, %f361, 0f4B800000;
	mul.f32 	%f362, %f360, 0f00000000;
	setp.gt.f32 	%p55, %f395, 0f4B800000;
	mul.f32 	%f396, %f394, 0f00000000;
	cvt.rn.f32.s32 	%f425, %r246;
	cvt.rn.f32.s32 	%f460, %r256;
	selp.f32 	%f156, %f155, %f153, %p13;
	selp.f32 	%f190, %f189, %f187, %p19;
	selp.f32 	%f225, %f224, %f222, %p25;
	selp.f32 	%f259, %f258, %f256, %p31;
	selp.f32 	%f294, %f293, %f291, %p37;
	selp.f32 	%f328, %f327, %f325, %p43;
	selp.f32 	%f363, %f362, %f360, %p49;
	selp.f32 	%f397, %f396, %f394, %p55;
	div.approx.f32 	%f427, %f425, %f180;
	div.approx.f32 	%f461, %f460, %f180;
	add.f32 	%f157, %f156, %f156;
	add.f32 	%f191, %f190, %f190;
	add.f32 	%f226, %f225, %f225;
	add.f32 	%f260, %f259, %f259;
	add.f32 	%f295, %f294, %f294;
	add.f32 	%f329, %f328, %f328;
	add.f32 	%f364, %f363, %f363;
	add.f32 	%f398, %f397, %f397;
	add.f32 	%f428, %f427, %f427;
	add.f32 	%f462, %f461, %f461;
	add.f32 	%f515, %f841, %f841;
	add.f32 	%f567, %f825, %f825;
	mov.b32 	%r168, %f157;
	mov.b32 	%r175, %f191;
	mov.b32 	%r186, %f226;
	mov.b32 	%r193, %f260;
	mov.b32 	%r204, %f295;
	mov.b32 	%r211, %f329;
	mov.b32 	%r222, %f364;
	mov.b32 	%r229, %f398;
	mov.b32 	%r247, %f428;
	mov.b32 	%r257, %f462;
	mov.b32 	%r279, %f515;
	mov.b32 	%r311, %f567;
	add.f32 	%f621, %f829, %f829;
	add.f32 	%f673, %f833, %f833;
	and.b32  	%r169, %r168, -2147483648;
	and.b32  	%r176, %r175, -2147483648;
	and.b32  	%r187, %r186, -2147483648;
	and.b32  	%r194, %r193, -2147483648;
	and.b32  	%r205, %r204, -2147483648;
	and.b32  	%r212, %r211, -2147483648;
	and.b32  	%r223, %r222, -2147483648;
	and.b32  	%r230, %r229, -2147483648;
	and.b32  	%r248, %r247, -2147483648;
	and.b32  	%r258, %r257, -2147483648;
	and.b32  	%r280, %r279, -2147483648;
	and.b32  	%r312, %r311, -2147483648;
	mov.b32 	%r328, %f621;
	mov.b32 	%r352, %f673;
	add.f32 	%f727, %f845, %f845;
	or.b32  	%r170, %r169, 1056964608;
	or.b32  	%r177, %r176, 1056964608;
	or.b32  	%r188, %r187, 1056964608;
	or.b32  	%r195, %r194, 1056964608;
	or.b32  	%r206, %r205, 1056964608;
	or.b32  	%r213, %r212, 1056964608;
	or.b32  	%r224, %r223, 1056964608;
	or.b32  	%r231, %r230, 1056964608;
	or.b32  	%r249, %r248, 1056964608;
	or.b32  	%r259, %r258, 1056964608;
	or.b32  	%r281, %r280, 1056964608;
	or.b32  	%r313, %r312, 1056964608;
	and.b32  	%r329, %r328, -2147483648;
	and.b32  	%r353, %r352, -2147483648;
	mov.b32 	%r368, %f727;
	mov.b32 	%f158, %r170;
	mov.b32 	%f192, %r177;
	mov.b32 	%f227, %r188;
	mov.b32 	%f261, %r195;
	mov.b32 	%f296, %r206;
	mov.b32 	%f330, %r213;
	mov.b32 	%f365, %r224;
	mov.b32 	%f399, %r231;
	mov.b32 	%f429, %r249;
	mov.b32 	%f463, %r259;
	mov.b32 	%f516, %r281;
	mov.b32 	%f568, %r313;
	or.b32  	%r330, %r329, 1056964608;
	or.b32  	%r354, %r353, 1056964608;
	and.b32  	%r369, %r368, -2147483648;
	add.f32 	%f159, %f157, %f158;
	abs.f32 	%f161, %f157;
	add.f32 	%f193, %f191, %f192;
	abs.f32 	%f195, %f191;
	add.f32 	%f228, %f226, %f227;
	abs.f32 	%f230, %f226;
	add.f32 	%f262, %f260, %f261;
	abs.f32 	%f264, %f260;
	add.f32 	%f297, %f295, %f296;
	abs.f32 	%f299, %f295;
	add.f32 	%f331, %f329, %f330;
	abs.f32 	%f333, %f329;
	add.f32 	%f366, %f364, %f365;
	abs.f32 	%f368, %f364;
	add.f32 	%f400, %f398, %f399;
	abs.f32 	%f402, %f398;
	add.f32 	%f430, %f428, %f429;
	abs.f32 	%f432, %f428;
	add.f32 	%f464, %f462, %f463;
	abs.f32 	%f466, %f462;
	add.f32 	%f517, %f515, %f516;
	abs.f32 	%f519, %f515;
	add.f32 	%f569, %f567, %f568;
	abs.f32 	%f571, %f567;
	mov.b32 	%f622, %r330;
	mov.b32 	%f674, %r354;
	or.b32  	%r370, %r369, 1056964608;
	cvt.rzi.f32.f32 	%f160, %f159;
	setp.gt.f32 	%p14, %f161, 0f4B000000;
	cvt.rzi.f32.f32 	%f194, %f193;
	setp.gt.f32 	%p20, %f195, 0f4B000000;
	cvt.rzi.f32.f32 	%f229, %f228;
	setp.gt.f32 	%p26, %f230, 0f4B000000;
	cvt.rzi.f32.f32 	%f263, %f262;
	setp.gt.f32 	%p32, %f264, 0f4B000000;
	cvt.rzi.f32.f32 	%f298, %f297;
	setp.gt.f32 	%p38, %f299, 0f4B000000;
	cvt.rzi.f32.f32 	%f332, %f331;
	setp.gt.f32 	%p44, %f333, 0f4B000000;
	cvt.rzi.f32.f32 	%f367, %f366;
	setp.gt.f32 	%p50, %f368, 0f4B000000;
	cvt.rzi.f32.f32 	%f401, %f400;
	setp.gt.f32 	%p56, %f402, 0f4B000000;
	cvt.rzi.f32.f32 	%f431, %f430;
	setp.gt.f32 	%p61, %f432, 0f4B000000;
	cvt.rzi.f32.f32 	%f465, %f464;
	setp.gt.f32 	%p68, %f466, 0f4B000000;
	cvt.rzi.f32.f32 	%f518, %f517;
	setp.gt.f32 	%p88, %f519, 0f4B000000;
	cvt.rzi.f32.f32 	%f570, %f569;
	setp.gt.f32 	%p108, %f571, 0f4B000000;
	add.f32 	%f623, %f621, %f622;
	abs.f32 	%f625, %f621;
	add.f32 	%f675, %f673, %f674;
	abs.f32 	%f677, %f673;
	mov.b32 	%f728, %r370;
	selp.f32 	%f162, %f157, %f160, %p14;
	cvt.rzi.f32.f32 	%f163, %f157;
	setp.lt.f32 	%p15, %f161, 0f3F000000;
	selp.f32 	%f196, %f191, %f194, %p20;
	cvt.rzi.f32.f32 	%f197, %f191;
	setp.lt.f32 	%p21, %f195, 0f3F000000;
	selp.f32 	%f231, %f226, %f229, %p26;
	cvt.rzi.f32.f32 	%f232, %f226;
	setp.lt.f32 	%p27, %f230, 0f3F000000;
	selp.f32 	%f265, %f260, %f263, %p32;
	cvt.rzi.f32.f32 	%f266, %f260;
	setp.lt.f32 	%p33, %f264, 0f3F000000;
	selp.f32 	%f300, %f295, %f298, %p38;
	cvt.rzi.f32.f32 	%f301, %f295;
	setp.lt.f32 	%p39, %f299, 0f3F000000;
	selp.f32 	%f334, %f329, %f332, %p44;
	cvt.rzi.f32.f32 	%f335, %f329;
	setp.lt.f32 	%p45, %f333, 0f3F000000;
	selp.f32 	%f369, %f364, %f367, %p50;
	cvt.rzi.f32.f32 	%f370, %f364;
	setp.lt.f32 	%p51, %f368, 0f3F000000;
	selp.f32 	%f403, %f398, %f401, %p56;
	cvt.rzi.f32.f32 	%f404, %f398;
	setp.lt.f32 	%p57, %f402, 0f3F000000;
	selp.f32 	%f433, %f428, %f431, %p61;
	cvt.rzi.f32.f32 	%f434, %f428;
	setp.lt.f32 	%p62, %f432, 0f3F000000;
	selp.f32 	%f467, %f462, %f465, %p68;
	cvt.rzi.f32.f32 	%f468, %f462;
	setp.lt.f32 	%p69, %f466, 0f3F000000;
	selp.f32 	%f520, %f515, %f518, %p88;
	cvt.rzi.f32.f32 	%f521, %f515;
	setp.lt.f32 	%p89, %f519, 0f3F000000;
	selp.f32 	%f572, %f567, %f570, %p108;
	cvt.rzi.f32.f32 	%f573, %f567;
	setp.lt.f32 	%p109, %f571, 0f3F000000;
	cvt.rzi.f32.f32 	%f624, %f623;
	setp.gt.f32 	%p128, %f625, 0f4B000000;
	cvt.rzi.f32.f32 	%f676, %f675;
	setp.gt.f32 	%p148, %f677, 0f4B000000;
	add.f32 	%f729, %f727, %f728;
	abs.f32 	%f731, %f727;
	selp.f32 	%f164, %f163, %f162, %p15;
	selp.f32 	%f198, %f197, %f196, %p21;
	selp.f32 	%f233, %f232, %f231, %p27;
	selp.f32 	%f267, %f266, %f265, %p33;
	selp.f32 	%f302, %f301, %f300, %p39;
	selp.f32 	%f336, %f335, %f334, %p45;
	selp.f32 	%f371, %f370, %f369, %p51;
	selp.f32 	%f405, %f404, %f403, %p57;
	selp.f32 	%f435, %f434, %f433, %p62;
	selp.f32 	%f469, %f468, %f467, %p69;
	selp.f32 	%f522, %f521, %f520, %p89;
	selp.f32 	%f574, %f573, %f572, %p109;
	selp.f32 	%f626, %f621, %f624, %p128;
	cvt.rzi.f32.f32 	%f627, %f621;
	setp.lt.f32 	%p129, %f625, 0f3F000000;
	selp.f32 	%f678, %f673, %f676, %p148;
	cvt.rzi.f32.f32 	%f679, %f673;
	setp.lt.f32 	%p149, %f677, 0f3F000000;
	cvt.rzi.f32.f32 	%f730, %f729;
	setp.gt.f32 	%p169, %f731, 0f4B000000;
	fma.rn.f32 	%f165, %f164, 0fBF000000, %f156;
	fma.rn.f32 	%f199, %f198, 0fBF000000, %f190;
	fma.rn.f32 	%f234, %f233, 0fBF000000, %f225;
	fma.rn.f32 	%f268, %f267, 0fBF000000, %f259;
	fma.rn.f32 	%f303, %f302, 0fBF000000, %f294;
	fma.rn.f32 	%f337, %f336, 0fBF000000, %f328;
	fma.rn.f32 	%f372, %f371, 0fBF000000, %f363;
	fma.rn.f32 	%f406, %f405, 0fBF000000, %f397;
	fma.rn.f32 	%f436, %f435, 0fBF000000, %f427;
	fma.rn.f32 	%f470, %f469, 0fBF000000, %f461;
	fma.rn.f32 	%f523, %f522, 0fBF000000, %f841;
	fma.rn.f32 	%f575, %f574, 0fBF000000, %f825;
	selp.f32 	%f628, %f627, %f626, %p129;
	selp.f32 	%f680, %f679, %f678, %p149;
	selp.f32 	%f732, %f727, %f730, %p169;
	cvt.rzi.f32.f32 	%f733, %f727;
	setp.lt.f32 	%p170, %f731, 0f3F000000;
	mul.f32 	%f166, %f165, %f165;
	mul.f32 	%f200, %f199, %f199;
	mul.f32 	%f235, %f234, %f234;
	mul.f32 	%f269, %f268, %f268;
	mul.f32 	%f304, %f303, %f303;
	mul.f32 	%f338, %f337, %f337;
	mul.f32 	%f373, %f372, %f372;
	mul.f32 	%f407, %f406, %f406;
	mul.f32 	%f437, %f436, %f436;
	mul.f32 	%f471, %f470, %f470;
	mul.f32 	%f524, %f523, %f523;
	mul.f32 	%f576, %f575, %f575;
	fma.rn.f32 	%f629, %f628, 0fBF000000, %f829;
	fma.rn.f32 	%f681, %f680, 0fBF000000, %f833;
	selp.f32 	%f734, %f733, %f732, %p170;
	cvt.rzi.s32.f32 	%r171, %f164;
	fma.rn.f32 	%f167, %f166, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f168, %f166, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r178, %f198;
	fma.rn.f32 	%f201, %f200, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f202, %f200, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r189, %f233;
	fma.rn.f32 	%f236, %f235, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f237, %f235, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r196, %f267;
	fma.rn.f32 	%f270, %f269, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f271, %f269, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r207, %f302;
	fma.rn.f32 	%f305, %f304, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f306, %f304, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r214, %f336;
	fma.rn.f32 	%f339, %f338, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f340, %f338, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r225, %f371;
	fma.rn.f32 	%f374, %f373, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f375, %f373, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r232, %f405;
	fma.rn.f32 	%f408, %f407, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f409, %f407, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f438, %f437, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f439, %f437, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f472, %f471, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f473, %f471, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f525, %f524, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f526, %f524, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f577, %f576, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f578, %f576, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f630, %f629, %f629;
	mul.f32 	%f682, %f681, %f681;
	fma.rn.f32 	%f735, %f734, 0fBF000000, %f845;
	add.s32 	%r172, %r171, 1;
	fma.rn.f32 	%f169, %f167, %f166, 0fC0A55DF6;
	fma.rn.f32 	%f170, %f168, %f166, 0f4081E0CF;
	fma.rn.f32 	%f171, %f166, %f165, 0f00000000;
	add.s32 	%r179, %r178, 1;
	fma.rn.f32 	%f203, %f201, %f200, 0fC0A55DF6;
	fma.rn.f32 	%f204, %f202, %f200, 0f4081E0CF;
	fma.rn.f32 	%f205, %f200, %f199, 0f00000000;
	add.s32 	%r190, %r189, 1;
	fma.rn.f32 	%f238, %f236, %f235, 0fC0A55DF6;
	fma.rn.f32 	%f239, %f237, %f235, 0f4081E0CF;
	fma.rn.f32 	%f240, %f235, %f234, 0f00000000;
	add.s32 	%r197, %r196, 1;
	fma.rn.f32 	%f272, %f270, %f269, 0fC0A55DF6;
	fma.rn.f32 	%f273, %f271, %f269, 0f4081E0CF;
	fma.rn.f32 	%f274, %f269, %f268, 0f00000000;
	add.s32 	%r208, %r207, 1;
	fma.rn.f32 	%f307, %f305, %f304, 0fC0A55DF6;
	fma.rn.f32 	%f308, %f306, %f304, 0f4081E0CF;
	fma.rn.f32 	%f309, %f304, %f303, 0f00000000;
	add.s32 	%r215, %r214, 1;
	fma.rn.f32 	%f341, %f339, %f338, 0fC0A55DF6;
	fma.rn.f32 	%f342, %f340, %f338, 0f4081E0CF;
	fma.rn.f32 	%f343, %f338, %f337, 0f00000000;
	add.s32 	%r226, %r225, 1;
	fma.rn.f32 	%f376, %f374, %f373, 0fC0A55DF6;
	fma.rn.f32 	%f377, %f375, %f373, 0f4081E0CF;
	fma.rn.f32 	%f378, %f373, %f372, 0f00000000;
	add.s32 	%r233, %r232, 1;
	fma.rn.f32 	%f410, %f408, %f407, 0fC0A55DF6;
	fma.rn.f32 	%f411, %f409, %f407, 0f4081E0CF;
	fma.rn.f32 	%f412, %f407, %f406, 0f00000000;
	cvt.rzi.s32.f32 	%r250, %f435;
	fma.rn.f32 	%f440, %f438, %f437, 0fC0A55DF6;
	fma.rn.f32 	%f441, %f439, %f437, 0f4081E0CF;
	fma.rn.f32 	%f442, %f437, %f436, 0f00000000;
	cvt.rzi.s32.f32 	%r260, %f469;
	fma.rn.f32 	%f474, %f472, %f471, 0fC0A55DF6;
	fma.rn.f32 	%f475, %f473, %f471, 0f4081E0CF;
	fma.rn.f32 	%f476, %f471, %f470, 0f00000000;
	cvt.rzi.s32.f32 	%r282, %f522;
	fma.rn.f32 	%f527, %f525, %f524, 0fC0A55DF6;
	fma.rn.f32 	%f528, %f526, %f524, 0f4081E0CF;
	fma.rn.f32 	%f529, %f524, %f523, 0f00000000;
	cvt.rzi.s32.f32 	%r314, %f574;
	fma.rn.f32 	%f579, %f577, %f576, 0fC0A55DF6;
	fma.rn.f32 	%f580, %f578, %f576, 0f4081E0CF;
	fma.rn.f32 	%f581, %f576, %f575, 0f00000000;
	fma.rn.f32 	%f631, %f630, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f632, %f630, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f683, %f682, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f684, %f682, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f736, %f735, %f735;
	shl.b32 	%r82, %r2, 2;
	fma.rn.f32 	%f172, %f170, %f166, 0fC09DE9E6;
	fma.rn.f32 	%f173, %f169, %f171, 0f00000000;
	and.b32  	%r173, %r172, 1;
	fma.rn.f32 	%f206, %f204, %f200, 0fC09DE9E6;
	fma.rn.f32 	%f207, %f203, %f205, 0f00000000;
	and.b32  	%r180, %r179, 1;
	fma.rn.f32 	%f241, %f239, %f235, 0fC09DE9E6;
	fma.rn.f32 	%f242, %f238, %f240, 0f00000000;
	and.b32  	%r191, %r190, 1;
	fma.rn.f32 	%f275, %f273, %f269, 0fC09DE9E6;
	fma.rn.f32 	%f276, %f272, %f274, 0f00000000;
	and.b32  	%r198, %r197, 1;
	fma.rn.f32 	%f310, %f308, %f304, 0fC09DE9E6;
	fma.rn.f32 	%f311, %f307, %f309, 0f00000000;
	and.b32  	%r209, %r208, 1;
	fma.rn.f32 	%f344, %f342, %f338, 0fC09DE9E6;
	fma.rn.f32 	%f345, %f341, %f343, 0f00000000;
	and.b32  	%r216, %r215, 1;
	fma.rn.f32 	%f379, %f377, %f373, 0fC09DE9E6;
	fma.rn.f32 	%f380, %f376, %f378, 0f00000000;
	and.b32  	%r227, %r226, 1;
	fma.rn.f32 	%f413, %f411, %f407, 0fC09DE9E6;
	fma.rn.f32 	%f414, %f410, %f412, 0f00000000;
	and.b32  	%r234, %r233, 1;
	fma.rn.f32 	%f443, %f441, %f437, 0fC09DE9E6;
	fma.rn.f32 	%f444, %f440, %f442, 0f00000000;
	and.b32  	%r251, %r250, 1;
	fma.rn.f32 	%f477, %f475, %f471, 0fC09DE9E6;
	fma.rn.f32 	%f478, %f474, %f476, 0f00000000;
	and.b32  	%r261, %r260, 1;
	fma.rn.f32 	%f530, %f528, %f524, 0fC09DE9E6;
	fma.rn.f32 	%f531, %f527, %f529, 0f00000000;
	and.b32  	%r283, %r282, 1;
	fma.rn.f32 	%f582, %f580, %f576, 0fC09DE9E6;
	fma.rn.f32 	%f583, %f579, %f581, 0f00000000;
	and.b32  	%r315, %r314, 1;
	cvt.rzi.s32.f32 	%r331, %f628;
	fma.rn.f32 	%f633, %f631, %f630, 0fC0A55DF6;
	fma.rn.f32 	%f634, %f632, %f630, 0f4081E0CF;
	fma.rn.f32 	%f635, %f630, %f629, 0f00000000;
	cvt.rzi.s32.f32 	%r355, %f680;
	fma.rn.f32 	%f685, %f683, %f682, 0fC0A55DF6;
	fma.rn.f32 	%f686, %f684, %f682, 0f4081E0CF;
	fma.rn.f32 	%f687, %f682, %f681, 0f00000000;
	fma.rn.f32 	%f737, %f736, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f738, %f736, 0f3E684E12, 0fBFAAD2E0;
	and.b32  	%r156, %r82, 4;
	and.b32  	%r159, %r2, 18;
	fma.rn.f32 	%f174, %f172, %f166, 0f3F800000;
	fma.rn.f32 	%f175, %f165, 0f40490FDB, %f173;
	setp.eq.b32 	%p16, %r173, 1;
	fma.rn.f32 	%f208, %f206, %f200, 0f3F800000;
	fma.rn.f32 	%f209, %f199, 0f40490FDB, %f207;
	setp.eq.b32 	%p22, %r180, 1;
	fma.rn.f32 	%f243, %f241, %f235, 0f3F800000;
	fma.rn.f32 	%f244, %f234, 0f40490FDB, %f242;
	setp.eq.b32 	%p28, %r191, 1;
	fma.rn.f32 	%f277, %f275, %f269, 0f3F800000;
	fma.rn.f32 	%f278, %f268, 0f40490FDB, %f276;
	setp.eq.b32 	%p34, %r198, 1;
	fma.rn.f32 	%f312, %f310, %f304, 0f3F800000;
	fma.rn.f32 	%f313, %f303, 0f40490FDB, %f311;
	setp.eq.b32 	%p40, %r209, 1;
	fma.rn.f32 	%f346, %f344, %f338, 0f3F800000;
	fma.rn.f32 	%f347, %f337, 0f40490FDB, %f345;
	setp.eq.b32 	%p46, %r216, 1;
	fma.rn.f32 	%f381, %f379, %f373, 0f3F800000;
	fma.rn.f32 	%f382, %f372, 0f40490FDB, %f380;
	setp.eq.b32 	%p52, %r227, 1;
	fma.rn.f32 	%f415, %f413, %f407, 0f3F800000;
	fma.rn.f32 	%f416, %f406, 0f40490FDB, %f414;
	setp.eq.b32 	%p58, %r234, 1;
	fma.rn.f32 	%f445, %f443, %f437, 0f3F800000;
	fma.rn.f32 	%f446, %f436, 0f40490FDB, %f444;
	setp.eq.b32 	%p63, %r251, 1;
	fma.rn.f32 	%f479, %f477, %f471, 0f3F800000;
	fma.rn.f32 	%f480, %f470, 0f40490FDB, %f478;
	setp.eq.b32 	%p70, %r261, 1;
	fma.rn.f32 	%f532, %f530, %f524, 0f3F800000;
	fma.rn.f32 	%f533, %f523, 0f40490FDB, %f531;
	setp.eq.b32 	%p90, %r283, 1;
	fma.rn.f32 	%f584, %f582, %f576, 0f3F800000;
	fma.rn.f32 	%f585, %f575, 0f40490FDB, %f583;
	setp.eq.b32 	%p110, %r315, 1;
	fma.rn.f32 	%f636, %f634, %f630, 0fC09DE9E6;
	fma.rn.f32 	%f637, %f633, %f635, 0f00000000;
	and.b32  	%r332, %r331, 1;
	fma.rn.f32 	%f688, %f686, %f682, 0fC09DE9E6;
	fma.rn.f32 	%f689, %f685, %f687, 0f00000000;
	and.b32  	%r356, %r355, 1;
	cvt.rzi.s32.f32 	%r371, %f734;
	fma.rn.f32 	%f739, %f737, %f736, 0fC0A55DF6;
	fma.rn.f32 	%f740, %f738, %f736, 0f4081E0CF;
	fma.rn.f32 	%f741, %f736, %f735, 0f00000000;
	and.b32  	%r157, %r83, 8;
	shl.b32 	%r158, %r1, 3;
	or.b32  	%r160, %r159, %r156;
	selp.f32 	%f176, %f174, %f175, %p16;
	and.b32  	%r174, %r172, 2;
	mov.f32 	%f177, 0f00000000;
	selp.f32 	%f210, %f208, %f209, %p22;
	and.b32  	%r181, %r179, 2;
	selp.f32 	%f245, %f243, %f244, %p28;
	and.b32  	%r192, %r190, 2;
	selp.f32 	%f279, %f277, %f278, %p34;
	and.b32  	%r199, %r197, 2;
	selp.f32 	%f314, %f312, %f313, %p40;
	and.b32  	%r210, %r208, 2;
	selp.f32 	%f348, %f346, %f347, %p46;
	and.b32  	%r217, %r215, 2;
	selp.f32 	%f383, %f381, %f382, %p52;
	and.b32  	%r228, %r226, 2;
	selp.f32 	%f417, %f415, %f416, %p58;
	and.b32  	%r235, %r233, 2;
	selp.f32 	%f447, %f445, %f446, %p63;
	and.b32  	%r252, %r250, 2;
	selp.f32 	%f481, %f479, %f480, %p70;
	and.b32  	%r262, %r260, 2;
	selp.f32 	%f534, %f532, %f533, %p90;
	and.b32  	%r284, %r282, 2;
	selp.f32 	%f586, %f584, %f585, %p110;
	and.b32  	%r316, %r314, 2;
	fma.rn.f32 	%f638, %f636, %f630, 0f3F800000;
	fma.rn.f32 	%f639, %f629, 0f40490FDB, %f637;
	setp.eq.b32 	%p130, %r332, 1;
	fma.rn.f32 	%f690, %f688, %f682, 0f3F800000;
	fma.rn.f32 	%f691, %f681, 0f40490FDB, %f689;
	setp.eq.b32 	%p150, %r356, 1;
	fma.rn.f32 	%f742, %f740, %f736, 0fC09DE9E6;
	fma.rn.f32 	%f743, %f739, %f741, 0f00000000;
	and.b32  	%r372, %r371, 1;
	and.b32  	%r84, %r158, 2016;
	or.b32  	%r85, %r160, %r157;
	setp.eq.s32 	%p17, %r174, 0;
	sub.f32 	%f178, %f177, %f176;
	setp.eq.s32 	%p23, %r181, 0;
	sub.f32 	%f212, %f177, %f210;
	setp.eq.s32 	%p29, %r192, 0;
	sub.f32 	%f247, %f177, %f245;
	setp.eq.s32 	%p35, %r199, 0;
	sub.f32 	%f281, %f177, %f279;
	setp.eq.s32 	%p41, %r210, 0;
	sub.f32 	%f316, %f177, %f314;
	setp.eq.s32 	%p47, %r217, 0;
	sub.f32 	%f350, %f177, %f348;
	setp.eq.s32 	%p53, %r228, 0;
	sub.f32 	%f385, %f177, %f383;
	setp.eq.s32 	%p59, %r235, 0;
	sub.f32 	%f419, %f177, %f417;
	setp.eq.s32 	%p64, %r252, 0;
	neg.f32 	%f449, %f447;
	add.s32 	%r253, %r250, 1;
	cvt.rzi.f32.f32 	%f454, %f427;
	setp.eq.s32 	%p71, %r262, 0;
	neg.f32 	%f483, %f481;
	add.s32 	%r263, %r260, 1;
	cvt.rzi.f32.f32 	%f487, %f461;
	setp.eq.s32 	%p91, %r284, 0;
	neg.f32 	%f536, %f534;
	add.s32 	%r285, %r282, 1;
	cvt.rzi.f32.f32 	%f541, %f841;
	setp.eq.s32 	%p111, %r316, 0;
	neg.f32 	%f588, %f586;
	add.s32 	%r317, %r314, 1;
	cvt.rzi.f32.f32 	%f593, %f825;
	selp.f32 	%f640, %f638, %f639, %p130;
	and.b32  	%r333, %r331, 2;
	selp.f32 	%f692, %f690, %f691, %p150;
	and.b32  	%r357, %r355, 2;
	fma.rn.f32 	%f744, %f742, %f736, 0f3F800000;
	fma.rn.f32 	%f745, %f735, 0f40490FDB, %f743;
	setp.eq.b32 	%p171, %r372, 1;
	or.b32  	%r161, %r85, %r84;
	selp.f32 	%f179, %f176, %f178, %p17;
	selp.f32 	%f213, %f210, %f212, %p23;
	selp.f32 	%f248, %f245, %f247, %p29;
	selp.f32 	%f282, %f279, %f281, %p35;
	selp.f32 	%f317, %f314, %f316, %p41;
	selp.f32 	%f351, %f348, %f350, %p47;
	selp.f32 	%f386, %f383, %f385, %p53;
	selp.f32 	%f420, %f417, %f419, %p59;
	selp.f32 	%f448, %f446, %f445, %p63;
	selp.f32 	%f450, %f447, %f449, %p64;
	and.b32  	%r254, %r253, 2;
	setp.eq.f32 	%p66, %f454, %f427;
	mul.f32 	%f455, %f427, 0f00000000;
	selp.f32 	%f482, %f480, %f479, %p70;
	selp.f32 	%f484, %f481, %f483, %p71;
	and.b32  	%r264, %r263, 2;
	setp.eq.f32 	%p73, %f487, %f461;
	mul.f32 	%f488, %f461, 0f00000000;
	selp.f32 	%f535, %f533, %f532, %p90;
	selp.f32 	%f537, %f534, %f536, %p91;
	and.b32  	%r286, %r285, 2;
	setp.eq.f32 	%p93, %f541, %f841;
	mul.f32 	%f542, %f841, 0f00000000;
	selp.f32 	%f587, %f585, %f584, %p110;
	selp.f32 	%f589, %f586, %f588, %p111;
	and.b32  	%r318, %r317, 2;
	setp.eq.f32 	%p113, %f593, %f825;
	mul.f32 	%f594, %f825, 0f00000000;
	setp.eq.s32 	%p131, %r333, 0;
	neg.f32 	%f642, %f640;
	add.s32 	%r334, %r331, 1;
	cvt.rzi.f32.f32 	%f647, %f829;
	setp.eq.s32 	%p151, %r357, 0;
	neg.f32 	%f694, %f692;
	add.s32 	%r358, %r355, 1;
	cvt.rzi.f32.f32 	%f699, %f833;
	selp.f32 	%f746, %f744, %f745, %p171;
	and.b32  	%r373, %r371, 2;
	shr.u32 	%r162, %r161, 1;
	mul.f32 	%f106, %f179, %f179;
	mul.f32 	%f4, %f213, %f213;
	mul.f32 	%f8, %f248, %f248;
	mul.f32 	%f13, %f282, %f282;
	mul.f32 	%f17, %f317, %f317;
	mul.f32 	%f22, %f351, %f351;
	mul.f32 	%f26, %f386, %f386;
	mul.f32 	%f31, %f420, %f420;
	setp.eq.s32 	%p65, %r254, 0;
	sub.f32 	%f452, %f177, %f448;
	selp.f32 	%f456, %f455, %f450, %p66;
	abs.f32 	%f457, %f427;
	setp.eq.s32 	%p72, %r264, 0;
	sub.f32 	%f485, %f177, %f482;
	selp.f32 	%f489, %f488, %f484, %p73;
	abs.f32 	%f490, %f461;
	setp.eq.s32 	%p92, %r286, 0;
	sub.f32 	%f539, %f177, %f535;
	selp.f32 	%f123, %f542, %f537, %p93;
	abs.f32 	%f543, %f841;
	setp.eq.s32 	%p112, %r318, 0;
	sub.f32 	%f591, %f177, %f587;
	selp.f32 	%f595, %f594, %f589, %p113;
	abs.f32 	%f596, %f825;
	selp.f32 	%f641, %f639, %f638, %p130;
	selp.f32 	%f643, %f640, %f642, %p131;
	and.b32  	%r335, %r334, 2;
	setp.eq.f32 	%p133, %f647, %f829;
	mul.f32 	%f648, %f829, 0f00000000;
	selp.f32 	%f693, %f691, %f690, %p150;
	selp.f32 	%f695, %f692, %f694, %p151;
	and.b32  	%r359, %r358, 2;
	setp.eq.f32 	%p153, %f699, %f833;
	mul.f32 	%f700, %f833, 0f00000000;
	setp.eq.s32 	%p172, %r373, 0;
	neg.f32 	%f748, %f746;
	add.s32 	%r374, %r371, 1;
	cvt.rzi.f32.f32 	%f753, %f845;
	ld.param.u64 	%rd1, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	mul.wide.u32 	%rd38, %r162, 4;
	mul.f32 	%f183, %f106, 0f3C8A83B8;
	mul.f32 	%f217, %f4, 0f3C8A83B8;
	mul.f32 	%f252, %f8, 0f3C8A83B8;
	mul.f32 	%f286, %f13, 0f3C8A83B8;
	mul.f32 	%f321, %f17, 0f3C8A83B8;
	mul.f32 	%f355, %f22, 0f3C8A83B8;
	mul.f32 	%f390, %f26, 0f3C8A83B8;
	mul.f32 	%f423, %f31, 0f3C8A83B8;
	selp.f32 	%f453, %f448, %f452, %p65;
	setp.gt.f32 	%p67, %f457, 0f4B800000;
	add.f32 	%f458, %f456, 0f3F800000;
	selp.f32 	%f486, %f482, %f485, %p72;
	setp.gt.f32 	%p74, %f490, 0f4B800000;
	add.f32 	%f491, %f489, 0f3F800000;
	selp.f32 	%f540, %f535, %f539, %p92;
	setp.gt.f32 	%p94, %f543, 0f4B800000;
	add.f32 	%f544, %f123, 0f3F800000;
	selp.f32 	%f592, %f587, %f591, %p112;
	setp.gt.f32 	%p114, %f596, 0f4B800000;
	add.f32 	%f597, %f595, 0f3F800000;
	setp.eq.s32 	%p132, %r335, 0;
	sub.f32 	%f645, %f177, %f641;
	selp.f32 	%f69, %f648, %f643, %p133;
	abs.f32 	%f649, %f829;
	setp.eq.s32 	%p152, %r359, 0;
	sub.f32 	%f697, %f177, %f693;
	selp.f32 	%f701, %f700, %f695, %p153;
	abs.f32 	%f702, %f833;
	selp.f32 	%f747, %f745, %f744, %p171;
	selp.f32 	%f749, %f746, %f748, %p172;
	and.b32  	%r375, %r374, 2;
	setp.eq.f32 	%p174, %f753, %f845;
	mul.f32 	%f754, %f845, 0f00000000;
	add.s64 	%rd39, %rd1, %rd38;
	mul.f32 	%f3, %f183, %f815;
	mul.f32 	%f218, %f217, %f816;
	mul.f32 	%f12, %f252, %f817;
	mul.f32 	%f287, %f286, %f818;
	mul.f32 	%f21, %f321, %f819;
	mul.f32 	%f356, %f355, %f820;
	mul.f32 	%f30, %f390, %f821;
	mul.f32 	%f424, %f423, %f822;
	selp.f32 	%f459, %f458, %f453, %p67;
	selp.f32 	%f492, %f491, %f486, %p74;
	selp.f32 	%f124, %f544, %f540, %p94;
	selp.f32 	%f598, %f597, %f592, %p114;
	selp.f32 	%f646, %f641, %f645, %p132;
	setp.gt.f32 	%p134, %f649, 0f4B800000;
	add.f32 	%f650, %f69, 0f3F800000;
	selp.f32 	%f698, %f693, %f697, %p152;
	setp.gt.f32 	%p154, %f702, 0f4B800000;
	add.f32 	%f703, %f701, 0f3F800000;
	and.b32  	%r49, %r14, 1;
	setp.eq.s32 	%p173, %r375, 0;
	sub.f32 	%f751, %f177, %f747;
	selp.f32 	%f755, %f754, %f749, %p174;
	abs.f32 	%f756, %f845;
	ld.param.u64 	%rd2, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	ld.param.u64 	%rd3, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	ld.global.u32 	%r86, [%rd39];
	mov.b32 	%r184, %f218;
	mov.b32 	%r183, %f3;
	mov.b32 	%r202, %f287;
	mov.b32 	%r201, %f12;
	mov.b32 	%r220, %f356;
	mov.b32 	%r219, %f21;
	mov.b32 	%r238, %f424;
	mov.b32 	%r237, %f30;
	mov.b32 	%r240, %f459;
	mov.b32 	%r241, %f492;
	mov.b32 	%r243, %f456;
	mov.b32 	%r244, %f489;
	mov.b32 	%r301, %f598;
	mov.b32 	%r300, %f124;
	mov.b32 	%r307, %f595;
	mov.b32 	%r306, %f123;
	selp.f32 	%f70, %f650, %f646, %p134;
	selp.f32 	%f704, %f703, %f698, %p154;
	setp.eq.s32 	%p168, %r49, %r89;
	selp.f32 	%f752, %f747, %f751, %p173;
	setp.gt.f32 	%p175, %f756, 0f4B800000;
	add.f32 	%f757, %f755, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r182, %r184, %r183;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r200, %r202, %r201;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r218, %r220, %r219;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r236, %r238, %r237;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r239, %r241, %r240;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r242, %r244, %r243;
	// end inline asm
	xor.b32  	%r304, %r307, -2147483648;
	xor.b32  	%r303, %r306, -2147483648;
	mov.b32 	%r348, %f704;
	mov.b32 	%r347, %f70;
	mov.b32 	%r351, %f701;
	mov.b32 	%r350, %f69;
	selp.f32 	%f758, %f757, %f752, %p175;
	selp.f32 	%f142, 0f3F800000, 0f00000000, %p168;
	// begin inline asm
	cvt.rn.f16x2.f32 %r299, %r301, %r300;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r302, %r304, %r303;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r305, %r307, %r306;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r308, %r301, %r300;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r346, %r348, %r347;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r349, %r351, %r350;
	// end inline asm
	mul.f32 	%f143, %f758, %f142;
	mul.f32 	%f144, %f755, %f142;
	add.f32 	%f781, %f837, %f837;
	mov.b32 	%r398, %f781;
	and.b32  	%r399, %r398, -2147483648;
	or.b32  	%r400, %r399, 1056964608;
	mov.b32 	%f782, %r400;
	add.f32 	%f783, %f781, %f782;
	cvt.rzi.f32.f32 	%f784, %f783;
	abs.f32 	%f785, %f781;
	setp.gt.f32 	%p189, %f785, 0f4B000000;
	selp.f32 	%f786, %f781, %f784, %p189;
	cvt.rzi.f32.f32 	%f787, %f781;
	setp.lt.f32 	%p190, %f785, 0f3F000000;
	selp.f32 	%f788, %f787, %f786, %p190;
	cvt.rzi.s32.f32 	%r401, %f788;
	fma.rn.f32 	%f789, %f788, 0fBF000000, %f837;
	mul.f32 	%f790, %f789, %f789;
	fma.rn.f32 	%f791, %f790, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f792, %f790, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f793, %f791, %f790, 0fC0A55DF6;
	fma.rn.f32 	%f794, %f792, %f790, 0f4081E0CF;
	fma.rn.f32 	%f795, %f790, %f789, 0f00000000;
	fma.rn.f32 	%f796, %f794, %f790, 0fC09DE9E6;
	fma.rn.f32 	%f797, %f793, %f795, 0f00000000;
	fma.rn.f32 	%f798, %f796, %f790, 0f3F800000;
	fma.rn.f32 	%f799, %f789, 0f40490FDB, %f797;
	and.b32  	%r402, %r401, 1;
	setp.eq.b32 	%p191, %r402, 1;
	selp.f32 	%f800, %f798, %f799, %p191;
	selp.f32 	%f801, %f799, %f798, %p191;
	and.b32  	%r403, %r401, 2;
	setp.eq.s32 	%p192, %r403, 0;
	neg.f32 	%f802, %f800;
	selp.f32 	%f803, %f800, %f802, %p192;
	add.s32 	%r404, %r401, 1;
	and.b32  	%r405, %r404, 2;
	setp.eq.s32 	%p193, %r405, 0;
	sub.f32 	%f805, %f177, %f801;
	selp.f32 	%f806, %f801, %f805, %p193;
	cvt.rzi.f32.f32 	%f807, %f837;
	setp.eq.f32 	%p194, %f807, %f837;
	mul.f32 	%f808, %f837, 0f00000000;
	selp.f32 	%f809, %f808, %f803, %p194;
	abs.f32 	%f810, %f837;
	setp.gt.f32 	%p195, %f810, 0f4B800000;
	add.f32 	%f811, %f809, 0f3F800000;
	selp.f32 	%f812, %f811, %f806, %p195;
	mul.f32 	%f813, %f812, %f142;
	mul.f32 	%f814, %f809, %f142;
	mov.b32 	%r388, %f813;
	mov.b32 	%r387, %f143;
	// begin inline asm
	cvt.rn.f16x2.f32 %r386, %r388, %r387;
	// end inline asm
	mov.b32 	%r394, %f814;
	xor.b32  	%r391, %r394, -2147483648;
	mov.b32 	%r393, %f144;
	xor.b32  	%r390, %r393, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r389, %r391, %r390;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r392, %r394, %r393;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r395, %r388, %r387;
	// end inline asm
	shl.b32 	%r407, %r142, 13;
	and.b32  	%r408, %r87, 8;
	and.b32  	%r409, %r83, 16;
	or.b32  	%r410, %r408, %r409;
	shl.b32 	%r411, %r3, 2;
	and.b32  	%r63, %r411, 32;
	or.b32  	%r64, %r63, %r410;
	and.b32  	%r65, %r3, 7;
	shl.b32 	%r412, %r1, 10;
	and.b32  	%r413, %r412, 4096;
	shl.b32 	%r414, %r1, 5;
	and.b32  	%r66, %r414, 64;
	and.b32  	%r415, %r82, 28;
	and.b32  	%r416, %r414, 32;
	or.b32  	%r67, %r415, %r416;
	or.b32  	%r417, %r66, %r413;
	or.b32  	%r418, %r417, %r67;
	or.b32  	%r68, %r418, %r407;
	and.b32  	%r69, %r2, 8;
	shl.b32 	%r419, %r2, 4;
	or.b32  	%r420, %r419, %r69;
	shr.u32 	%r421, %r420, 2;
	and.b32  	%r422, %r421, 30;
	and.b32  	%r423, %r87, 2;
	or.b32  	%r70, %r423, %r91;
	and.b32  	%r71, %r82, 12;
	and.b32  	%r424, %r4, 32;
	shl.b32 	%r425, %r3, 1;
	shl.b32 	%r426, %r2, 3;
	and.b32  	%r427, %r426, 64;
	or.b32  	%r428, %r427, %r425;
	shr.u32 	%r429, %r428, 2;
	or.b32  	%r72, %r429, %r424;
	or.b32  	%r73, %r72, 8;
	shr.u32 	%r430, %r85, 1;
	mul.lo.s32 	%r431, %r430, 65;
	add.s32 	%r432, %r72, %r431;
	add.s32 	%r433, %r73, %r431;
	shl.b32 	%r434, %r144, 18;
	add.s32 	%r435, %r434, -786432;
	and.b32  	%r436, %r411, 28;
	or.b32  	%r437, %r436, %r14;
	or.b32  	%r438, %r437, %r84;
	shl.b32 	%r74, %r438, 7;
	cvt.s64.s32 	%rd5, %r435;
	shr.u32 	%r439, %r3, 3;
	or.b32  	%r440, %r439, 2;
	or.b32  	%r441, %r439, 4;
	or.b32  	%r442, %r439, 6;
	mul.lo.s32 	%r443, %r91, 65;
	bfe.s32 	%r444, %r3, 1, 1;
	and.b32  	%r445, %r3, 2;
	setp.eq.s32 	%p197, %r445, 0;
	and.b32  	%r446, %r444, 260;
	and.b32  	%r447, %r3, 1;
	neg.s32 	%r448, %r447;
	setp.eq.b32 	%p198, %r447, 1;
	and.b32  	%r449, %r448, 520;
	mul.lo.s32 	%r450, %r439, 1057;
	bfe.s32 	%r451, %r3, 2, 1;
	and.b32  	%r452, %r3, 4;
	setp.eq.s32 	%p199, %r452, 0;
	and.b32  	%r453, %r451, 130;
	add.s32 	%r454, %r449, %r422;
	add.s32 	%r455, %r454, %r446;
	add.s32 	%r456, %r455, %r443;
	add.s32 	%r457, %r456, %r450;
	add.s32 	%r458, %r457, %r453;
	mul.wide.u32 	%rd40, %r458, 4;
	mov.u64 	%rd41, shmem;
	add.s64 	%rd6, %rd41, %rd40;
	selp.b64 	%rd42, 0, 130, %p199;
	cvt.u64.u32 	%rd43, %r450;
	selp.b64 	%rd44, 0, 260, %p197;
	cvt.u64.u32 	%rd45, %r443;
	selp.b64 	%rd46, 520, 0, %p198;
	cvt.u64.u32 	%rd47, %r422;
	add.s64 	%rd48, %rd47, %rd46;
	add.s64 	%rd49, %rd48, %rd45;
	add.s64 	%rd50, %rd49, %rd44;
	add.s64 	%rd51, %rd50, %rd43;
	add.s64 	%rd52, %rd51, %rd42;
	shl.b64 	%rd53, %rd52, 2;
	add.s64 	%rd7, %rd41, %rd53;
	bfe.u32 	%r459, %r87, 3, 1;
	mul.lo.s32 	%r460, %r459, 65;
	mul.lo.s32 	%r461, %r440, 1057;
	add.s32 	%r462, %r455, %r460;
	add.s32 	%r463, %r462, %r461;
	add.s32 	%r464, %r463, %r453;
	mul.wide.u32 	%rd54, %r464, 4;
	add.s64 	%rd8, %rd41, %rd54;
	cvt.u64.u32 	%rd55, %r461;
	cvt.u64.u32 	%rd56, %r460;
	add.s64 	%rd57, %rd48, %rd56;
	add.s64 	%rd58, %rd57, %rd44;
	add.s64 	%rd59, %rd58, %rd55;
	add.s64 	%rd60, %rd59, %rd42;
	shl.b64 	%rd61, %rd60, 2;
	add.s64 	%rd9, %rd41, %rd61;
	mul.lo.s32 	%r465, %r441, 1057;
	add.s32 	%r466, %r462, %r465;
	add.s32 	%r467, %r466, %r453;
	mul.wide.u32 	%rd62, %r467, 4;
	add.s64 	%rd10, %rd41, %rd62;
	cvt.u64.u32 	%rd63, %r465;
	add.s64 	%rd64, %rd58, %rd63;
	add.s64 	%rd65, %rd64, %rd42;
	shl.b64 	%rd66, %rd65, 2;
	add.s64 	%rd11, %rd41, %rd66;
	mul.lo.s32 	%r468, %r442, 1057;
	add.s32 	%r469, %r462, %r468;
	add.s32 	%r470, %r469, %r453;
	mul.wide.u32 	%rd67, %r470, 4;
	add.s64 	%rd12, %rd41, %rd67;
	cvt.u64.u32 	%rd68, %r468;
	add.s64 	%rd69, %rd58, %rd68;
	add.s64 	%rd70, %rd69, %rd42;
	shl.b64 	%rd71, %rd70, 2;
	add.s64 	%rd13, %rd41, %rd71;
	and.b32  	%r471, %r425, 14;
	or.b32  	%r472, %r471, %r91;
	mul.lo.s32 	%r473, %r472, 65;
	add.s32 	%r474, %r473, %r422;
	add.s32 	%r475, %r474, %r450;
	mul.wide.u32 	%rd72, %r475, 4;
	add.s64 	%rd14, %rd41, %rd72;
	cvt.u64.u32 	%rd73, %r473;
	add.s64 	%rd74, %rd73, %rd47;
	add.s64 	%rd75, %rd74, %rd43;
	shl.b64 	%rd76, %rd75, 2;
	add.s64 	%rd15, %rd41, %rd76;
	add.s32 	%r476, %r474, %r461;
	mul.wide.u32 	%rd77, %r476, 4;
	add.s64 	%rd16, %rd41, %rd77;
	add.s64 	%rd78, %rd74, %rd55;
	shl.b64 	%rd79, %rd78, 2;
	add.s64 	%rd17, %rd41, %rd79;
	add.s32 	%r477, %r474, %r465;
	mul.wide.u32 	%rd80, %r477, 4;
	add.s64 	%rd18, %rd41, %rd80;
	add.s64 	%rd81, %rd74, %rd63;
	shl.b64 	%rd82, %rd81, 2;
	add.s64 	%rd19, %rd41, %rd82;
	add.s32 	%r478, %r474, %r468;
	mul.wide.u32 	%rd83, %r478, 4;
	add.s64 	%rd20, %rd41, %rd83;
	add.s64 	%rd84, %rd74, %rd68;
	shl.b64 	%rd85, %rd84, 2;
	add.s64 	%rd21, %rd41, %rd85;
	mul.wide.u32 	%rd86, %r433, 4;
	add.s64 	%rd22, %rd41, %rd86;
	mul.wide.u32 	%rd87, %r432, 4;
	add.s64 	%rd23, %rd41, %rd87;
	setp.eq.s32 	%p200, %r69, 0;
	mov.u16 	%rs288, 25600;
	mov.u16 	%rs236, 21504;
	mov.u16 	%rs296, 18432;
	mov.u16 	%rs274, -14592;
	setp.gt.u32 	%p214, %r3, 7;
	mov.u32 	%r2550, %r2540;
	mov.u32 	%r2551, %r2540;
	mov.u32 	%r2552, %r2540;
	mov.u32 	%r2553, %r2540;
	mov.u32 	%r2561, %r2540;
	mov.u32 	%r2562, %r2540;
	mov.u32 	%r81, %r2540;
	bra.uni 	$L__BB0_90;
$L__BB0_114:                            // %pass9968
                                        //   in Loop: Header=BB0_90 Depth=1
	selp.b32 	%r2524, %r131, %r2474, %p200;
	selp.b32 	%r2525, %r2470, %r131, %p200;
	selp.b32 	%r2526, %r130, %r2466, %p200;
	selp.b32 	%r2527, %r2462, %r130, %p200;
	or.b32  	%r2529, %r2541, %r74;
	or.b32  	%r2530, %r2529, %r66;
	or.b32  	%r2568, %r2530, %r67;
	or.b32  	%r2531, %r2568, 524288;
	cvt.s64.s32 	%rd101, %r2531;
	add.s64 	%rd102, %rd101, %rd5;
	shr.u64 	%rd103, %rd102, 36;
	add.s64 	%rd104, %rd102, %rd103;
	shr.s64 	%rd105, %rd104, 28;
	setp.lt.s64 	%p217, %rd102, 0;
	and.b64  	%rd106, %rd104, -268435456;
	setp.ne.s64 	%p218, %rd106, %rd102;
	and.pred  	%p219, %p217, %p218;
	selp.u64 	%rd107, 1, 0, %p219;
	sub.s64 	%rd108, %rd107, %rd105;
	shl.b64 	%rd109, %rd108, 28;
	add.s64 	%rd110, %rd109, %rd102;
	shl.b64 	%rd111, %rd110, 2;
	add.s64 	%rd112, %rd3, %rd111;
	st.global.v4.u32 	[%rd112], {%r2527, %r2525, %r2526, %r2524};
$L__BB0_115:                            // %pass10078
                                        //   in Loop: Header=BB0_90 Depth=1
	or.b32  	%r2535, %r2568, 1048576;
	cvt.s64.s32 	%rd113, %r2535;
	add.s64 	%rd114, %rd113, %rd5;
	shr.u64 	%rd115, %rd114, 36;
	add.s64 	%rd116, %rd114, %rd115;
	shr.s64 	%rd117, %rd116, 28;
	setp.lt.s64 	%p220, %rd114, 0;
	and.b64  	%rd118, %rd116, -268435456;
	setp.ne.s64 	%p221, %rd118, %rd114;
	and.pred  	%p222, %p220, %p221;
	selp.u64 	%rd119, 1, 0, %p222;
	sub.s64 	%rd120, %rd119, %rd117;
	shl.b64 	%rd121, %rd120, 28;
	add.s64 	%rd122, %rd121, %rd114;
	shl.b64 	%rd123, %rd122, 2;
	add.s64 	%rd124, %rd3, %rd123;
	st.global.v4.u32 	[%rd124], {%r132, %r134, %r133, %r135};
	or.b32  	%r2536, %r2568, 1572864;
	cvt.s64.s32 	%rd125, %r2536;
	add.s64 	%rd126, %rd125, %rd5;
	shr.u64 	%rd127, %rd126, 36;
	add.s64 	%rd128, %rd126, %rd127;
	shr.s64 	%rd129, %rd128, 28;
	setp.lt.s64 	%p223, %rd126, 0;
	and.b64  	%rd130, %rd128, -268435456;
	setp.ne.s64 	%p224, %rd130, %rd126;
	and.pred  	%p225, %p223, %p224;
	selp.u64 	%rd131, 1, 0, %p225;
	sub.s64 	%rd132, %rd131, %rd129;
	shl.b64 	%rd133, %rd132, 28;
	add.s64 	%rd134, %rd133, %rd126;
	shl.b64 	%rd135, %rd134, 2;
	add.s64 	%rd136, %rd3, %rd135;
	st.global.v4.u32 	[%rd136], {%r136, %r138, %r137, %r139};
	setp.ne.s32 	%p226, %r81, 32512;
	add.s32 	%r81, %r81, 256;
	add.s32 	%r2537, %r81, %r142;
	setp.lt.s32 	%p227, %r2537, %r143;
	and.pred  	%p228, %p226, %p227;
	@%p228 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_116;
$L__BB0_90:                             // %L1352
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_91 Depth 2
	or.b32  	%r544, %r81, %r64;
	or.b32  	%r545, %r544, %r65;
	shl.b32 	%r546, %r545, 13;
	add.s32 	%r547, %r68, %r546;
	shr.s32 	%r548, %r547, 31;
	shr.u32 	%r549, %r548, 4;
	add.s32 	%r550, %r547, %r549;
	shr.s32 	%r551, %r550, 28;
	setp.lt.s32 	%p201, %r547, 0;
	and.b32  	%r552, %r550, -268435456;
	setp.ne.s32 	%p202, %r552, %r547;
	and.pred  	%p203, %p201, %p202;
	selp.u32 	%r553, 1, 0, %p203;
	sub.s32 	%r554, %r553, %r551;
	shl.b32 	%r555, %r554, 28;
	add.s32 	%r556, %r555, %r547;
	mul.wide.s32 	%rd88, %r556, 4;
	add.s64 	%rd89, %rd2, %rd88;
	ld.global.v4.u32 	{%r557, %r558, %r559, %r560}, [%rd89];
	or.b32  	%r561, %r546, 524288;
	add.s32 	%r562, %r68, %r561;
	shr.s32 	%r563, %r562, 31;
	shr.u32 	%r564, %r563, 4;
	add.s32 	%r565, %r562, %r564;
	shr.s32 	%r566, %r565, 28;
	setp.lt.s32 	%p204, %r562, 0;
	and.b32  	%r567, %r565, -268435456;
	setp.ne.s32 	%p205, %r567, %r562;
	and.pred  	%p206, %p204, %p205;
	selp.u32 	%r568, 1, 0, %p206;
	sub.s32 	%r569, %r568, %r566;
	shl.b32 	%r570, %r569, 28;
	add.s32 	%r571, %r570, %r562;
	mul.wide.s32 	%rd90, %r571, 4;
	add.s64 	%rd91, %rd2, %rd90;
	ld.global.v4.u32 	{%r572, %r573, %r574, %r575}, [%rd91];
	or.b32  	%r576, %r546, 1048576;
	add.s32 	%r577, %r68, %r576;
	shr.s32 	%r578, %r577, 31;
	shr.u32 	%r579, %r578, 4;
	add.s32 	%r580, %r577, %r579;
	shr.s32 	%r581, %r580, 28;
	setp.lt.s32 	%p207, %r577, 0;
	and.b32  	%r582, %r580, -268435456;
	setp.ne.s32 	%p208, %r582, %r577;
	and.pred  	%p209, %p207, %p208;
	selp.u32 	%r583, 1, 0, %p209;
	sub.s32 	%r584, %r583, %r581;
	shl.b32 	%r585, %r584, 28;
	add.s32 	%r586, %r585, %r577;
	mul.wide.s32 	%rd92, %r586, 4;
	add.s64 	%rd93, %rd2, %rd92;
	ld.global.v4.u32 	{%r587, %r588, %r589, %r590}, [%rd93];
	or.b32  	%r591, %r546, 1572864;
	add.s32 	%r592, %r68, %r591;
	shr.s32 	%r593, %r592, 31;
	shr.u32 	%r594, %r593, 4;
	add.s32 	%r595, %r592, %r594;
	shr.s32 	%r596, %r595, 28;
	setp.lt.s32 	%p210, %r592, 0;
	and.b32  	%r597, %r595, -268435456;
	setp.ne.s32 	%p211, %r597, %r592;
	and.pred  	%p212, %p210, %p211;
	selp.u32 	%r598, 1, 0, %p212;
	sub.s32 	%r599, %r598, %r596;
	shl.b32 	%r600, %r599, 28;
	add.s32 	%r601, %r600, %r592;
	mul.wide.s32 	%rd94, %r601, 4;
	add.s64 	%rd95, %rd2, %rd94;
	ld.global.v4.u32 	{%r602, %r603, %r604, %r605}, [%rd95];
	selp.b32 	%r606, %r559, %r557, %p200;
	shfl.sync.bfly.b32	%r607, %r606, 8, 31, -1;
	selp.b32 	%r480, %r557, %r607, %p200;
	selp.b32 	%r481, %r607, %r559, %p200;
	selp.b32 	%r608, %r560, %r558, %p200;
	shfl.sync.bfly.b32	%r609, %r608, 8, 31, -1;
	selp.b32 	%r488, %r558, %r609, %p200;
	selp.b32 	%r489, %r609, %r560, %p200;
	selp.b32 	%r610, %r574, %r572, %p200;
	shfl.sync.bfly.b32	%r611, %r610, 8, 31, -1;
	selp.b32 	%r496, %r572, %r611, %p200;
	selp.b32 	%r497, %r611, %r574, %p200;
	selp.b32 	%r612, %r575, %r573, %p200;
	shfl.sync.bfly.b32	%r613, %r612, 8, 31, -1;
	selp.b32 	%r504, %r573, %r613, %p200;
	selp.b32 	%r505, %r613, %r575, %p200;
	selp.b32 	%r614, %r589, %r587, %p200;
	shfl.sync.bfly.b32	%r615, %r614, 8, 31, -1;
	selp.b32 	%r512, %r587, %r615, %p200;
	selp.b32 	%r513, %r615, %r589, %p200;
	selp.b32 	%r616, %r590, %r588, %p200;
	shfl.sync.bfly.b32	%r617, %r616, 8, 31, -1;
	selp.b32 	%r520, %r588, %r617, %p200;
	selp.b32 	%r521, %r617, %r590, %p200;
	selp.b32 	%r618, %r604, %r602, %p200;
	shfl.sync.bfly.b32	%r619, %r618, 8, 31, -1;
	selp.b32 	%r528, %r602, %r619, %p200;
	selp.b32 	%r529, %r619, %r604, %p200;
	selp.b32 	%r620, %r605, %r603, %p200;
	shfl.sync.bfly.b32	%r621, %r620, 8, 31, -1;
	selp.b32 	%r536, %r603, %r621, %p200;
	selp.b32 	%r537, %r621, %r605, %p200;
	mov.u32 	%r538, 21520;
	// begin inline asm
	prmt.b32 %r479, %r480, %r481, %r538;
	// end inline asm
	mov.u32 	%r542, 30258;
	// begin inline asm
	prmt.b32 %r483, %r480, %r481, %r542;
	// end inline asm
	// begin inline asm
	prmt.b32 %r487, %r488, %r489, %r538;
	// end inline asm
	// begin inline asm
	prmt.b32 %r491, %r488, %r489, %r542;
	// end inline asm
	// begin inline asm
	prmt.b32 %r495, %r496, %r497, %r538;
	// end inline asm
	// begin inline asm
	prmt.b32 %r499, %r496, %r497, %r542;
	// end inline asm
	// begin inline asm
	prmt.b32 %r503, %r504, %r505, %r538;
	// end inline asm
	// begin inline asm
	prmt.b32 %r507, %r504, %r505, %r542;
	// end inline asm
	// begin inline asm
	prmt.b32 %r511, %r512, %r513, %r538;
	// end inline asm
	// begin inline asm
	prmt.b32 %r515, %r512, %r513, %r542;
	// end inline asm
	// begin inline asm
	prmt.b32 %r519, %r520, %r521, %r538;
	// end inline asm
	// begin inline asm
	prmt.b32 %r523, %r520, %r521, %r542;
	// end inline asm
	// begin inline asm
	prmt.b32 %r527, %r528, %r529, %r538;
	// end inline asm
	// begin inline asm
	prmt.b32 %r531, %r528, %r529, %r542;
	// end inline asm
	// begin inline asm
	prmt.b32 %r535, %r536, %r537, %r538;
	// end inline asm
	// begin inline asm
	prmt.b32 %r539, %r536, %r537, %r542;
	// end inline asm
	st.shared.u32 	[%rd6], %r479;
	st.shared.u32 	[%rd7+128], %r483;
	st.shared.u32 	[%rd7+4], %r487;
	st.shared.u32 	[%rd7+132], %r491;
	st.shared.u32 	[%rd8], %r495;
	st.shared.u32 	[%rd9+128], %r499;
	st.shared.u32 	[%rd9+4], %r503;
	st.shared.u32 	[%rd9+132], %r507;
	st.shared.u32 	[%rd10], %r511;
	st.shared.u32 	[%rd11+128], %r515;
	st.shared.u32 	[%rd11+4], %r519;
	st.shared.u32 	[%rd11+132], %r523;
	st.shared.u32 	[%rd12], %r527;
	st.shared.u32 	[%rd13+128], %r531;
	st.shared.u32 	[%rd13+4], %r535;
	st.shared.u32 	[%rd13+132], %r539;
	bar.sync 	0;
	mov.u64 	%rd139, %rd23;
	mov.u64 	%rd140, %rd22;
	mov.u32 	%r2563, %r2540;
	mov.u32 	%r2564, %r2553;
	mov.u32 	%r2565, %r2552;
	mov.u32 	%r2566, %r2551;
	mov.u32 	%r2567, %r2550;
$L__BB0_91:                             // %pass5675
                                        //   Parent Loop BB0_90 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov.u32 	%r2551, %r2562;
	mov.u32 	%r2550, %r2561;
	or.b32  	%r2418, %r70, %r2563;
	add.s32 	%r2419, %r2418, %r81;
	or.b32  	%r2420, %r2419, %r71;
	bfe.s32 	%r2421, %r2420, 3, 1;
	and.b32  	%r2422, %r2421, 65;
	bfe.s32 	%r2423, %r2419, 1, 1;
	and.b32  	%r2424, %r2423, 260;
	and.b32  	%r2425, %r2419, 1;
	neg.s32 	%r2426, %r2425;
	and.b32  	%r2427, %r2426, 520;
	bfe.u32 	%r2428, %r2419, 5, 3;
	mul.lo.s32 	%r2429, %r2428, 1057;
	bfe.s32 	%r2430, %r2420, 2, 1;
	and.b32  	%r2431, %r2430, 130;
	or.b32  	%r2432, %r72, %r2427;
	add.s32 	%r2433, %r2432, %r2422;
	add.s32 	%r2434, %r2433, %r2424;
	add.s32 	%r2435, %r2434, %r2429;
	add.s32 	%r2436, %r2435, %r2431;
	mul.wide.u32 	%rd96, %r2436, 4;
	add.s64 	%rd98, %rd41, %rd96;
	ld.shared.u32 	%r2552, [%rd98];
	add.s32 	%r2437, %r73, %r2427;
	add.s32 	%r2438, %r2437, %r2422;
	add.s32 	%r2439, %r2438, %r2424;
	add.s32 	%r2440, %r2439, %r2429;
	add.s32 	%r2441, %r2440, %r2431;
	mul.wide.u32 	%rd99, %r2441, 4;
	add.s64 	%rd100, %rd41, %rd99;
	ld.shared.u32 	%r2553, [%rd100];
	// begin inline asm
	mov.b32 %r627, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r638, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r626, %r2552, -2004318072;
	mov.u32 	%r625, 983055;
	// begin inline asm
	lop3.b32 %r624, %r625, %r626, %r627, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r628, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r629, %r627, %r628;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r632, %r624, %r629;
	// end inline asm
	mov.u32 	%r636, 15728880;
	// begin inline asm
	lop3.b32 %r635, %r636, %r626, %r638, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r639, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r640, %r638, %r639;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r643, %r635, %r640;
	// end inline asm
	shr.u32 	%r648, %r626, 8;
	// begin inline asm
	lop3.b32 %r646, %r625, %r648, %r627, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r650, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r651, %r627, %r650;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r654, %r646, %r651;
	// end inline asm
	// begin inline asm
	lop3.b32 %r657, %r636, %r648, %r638, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r661, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r662, %r638, %r661;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r665, %r657, %r662;
	// end inline asm
	// begin inline asm
	mov.b32 %r673, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r684, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r672, %r2553, -2004318072;
	// begin inline asm
	lop3.b32 %r670, %r625, %r672, %r673, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r674, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r675, %r673, %r674;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r678, %r670, %r675;
	// end inline asm
	// begin inline asm
	lop3.b32 %r681, %r636, %r672, %r684, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r685, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r686, %r684, %r685;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r689, %r681, %r686;
	// end inline asm
	shr.u32 	%r694, %r672, 8;
	// begin inline asm
	lop3.b32 %r692, %r625, %r694, %r673, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r696, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r697, %r673, %r696;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r700, %r692, %r697;
	// end inline asm
	// begin inline asm
	lop3.b32 %r703, %r636, %r694, %r684, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r707, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r708, %r684, %r707;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r711, %r703, %r708;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r714, %r236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r716, %r714, %r632;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r719, %r236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r721, %r719, %r643;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r724, %r236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r726, %r724, %r654;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r729, %r236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r731, %r729, %r665;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r734, %r236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r736, %r734, %r678;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r739, %r236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r741, %r739, %r689;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r744, %r236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r746, %r744, %r700;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r749, %r236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r751, %r749, %r711;
	// end inline asm
	// begin inline asm
	mov.b32 %r759, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r770, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r758, %r2567, -2004318072;
	// begin inline asm
	lop3.b32 %r756, %r625, %r758, %r759, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r760, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r761, %r759, %r760;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r764, %r756, %r761;
	// end inline asm
	// begin inline asm
	lop3.b32 %r767, %r636, %r758, %r770, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r771, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r772, %r770, %r771;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r775, %r767, %r772;
	// end inline asm
	shr.u32 	%r780, %r758, 8;
	// begin inline asm
	lop3.b32 %r778, %r625, %r780, %r759, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r782, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r783, %r759, %r782;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r786, %r778, %r783;
	// end inline asm
	// begin inline asm
	lop3.b32 %r789, %r636, %r780, %r770, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r793, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r794, %r770, %r793;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r797, %r789, %r794;
	// end inline asm
	// begin inline asm
	mov.b32 %r805, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r816, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r804, %r2566, -2004318072;
	// begin inline asm
	lop3.b32 %r802, %r625, %r804, %r805, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r806, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r807, %r805, %r806;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r810, %r802, %r807;
	// end inline asm
	// begin inline asm
	lop3.b32 %r813, %r636, %r804, %r816, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r817, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r818, %r816, %r817;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r821, %r813, %r818;
	// end inline asm
	shr.u32 	%r826, %r804, 8;
	// begin inline asm
	lop3.b32 %r824, %r625, %r826, %r805, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r828, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r829, %r805, %r828;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r832, %r824, %r829;
	// end inline asm
	// begin inline asm
	lop3.b32 %r835, %r636, %r826, %r816, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r839, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r840, %r816, %r839;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r843, %r835, %r840;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r846, %r182, %r764, %r716;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r850, %r182, %r775, %r721;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r854, %r182, %r786, %r726;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r858, %r182, %r797, %r731;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r862, %r182, %r810, %r736;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r866, %r182, %r821, %r741;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r870, %r182, %r832, %r746;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r874, %r182, %r843, %r751;
	// end inline asm
	// begin inline asm
	mov.b32 %r883, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r894, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r882, %r2565, -2004318072;
	// begin inline asm
	lop3.b32 %r880, %r625, %r882, %r883, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r884, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r885, %r883, %r884;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r888, %r880, %r885;
	// end inline asm
	// begin inline asm
	lop3.b32 %r891, %r636, %r882, %r894, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r895, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r896, %r894, %r895;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r899, %r891, %r896;
	// end inline asm
	shr.u32 	%r904, %r882, 8;
	// begin inline asm
	lop3.b32 %r902, %r625, %r904, %r883, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r906, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r907, %r883, %r906;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r910, %r902, %r907;
	// end inline asm
	// begin inline asm
	lop3.b32 %r913, %r636, %r904, %r894, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r917, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r918, %r894, %r917;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r921, %r913, %r918;
	// end inline asm
	// begin inline asm
	mov.b32 %r929, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r940, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r928, %r2564, -2004318072;
	// begin inline asm
	lop3.b32 %r926, %r625, %r928, %r929, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r930, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r931, %r929, %r930;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r934, %r926, %r931;
	// end inline asm
	// begin inline asm
	lop3.b32 %r937, %r636, %r928, %r940, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r941, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r942, %r940, %r941;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r945, %r937, %r942;
	// end inline asm
	shr.u32 	%r950, %r928, 8;
	// begin inline asm
	lop3.b32 %r948, %r625, %r950, %r929, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r952, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r953, %r929, %r952;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r956, %r948, %r953;
	// end inline asm
	// begin inline asm
	lop3.b32 %r959, %r636, %r950, %r940, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r963, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r964, %r940, %r963;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r967, %r959, %r964;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r970, %r200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r972, %r970, %r888, %r846;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r976, %r200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r978, %r976, %r899, %r850;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r982, %r200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r984, %r982, %r910, %r854;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r988, %r200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r990, %r988, %r921, %r858;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r994, %r200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r996, %r994, %r934, %r862;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1000, %r200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1002, %r1000, %r945, %r866;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1006, %r200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1008, %r1006, %r956, %r870;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1012, %r200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1014, %r1012, %r967, %r874;
	// end inline asm
	// begin inline asm
	mov.b32 %r1023, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1034, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1022, %r2550, -2004318072;
	// begin inline asm
	lop3.b32 %r1020, %r625, %r1022, %r1023, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1024, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1025, %r1023, %r1024;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1028, %r1020, %r1025;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1031, %r636, %r1022, %r1034, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1035, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1036, %r1034, %r1035;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1039, %r1031, %r1036;
	// end inline asm
	shr.u32 	%r1044, %r1022, 8;
	// begin inline asm
	lop3.b32 %r1042, %r625, %r1044, %r1023, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1046, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1047, %r1023, %r1046;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1050, %r1042, %r1047;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1053, %r636, %r1044, %r1034, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1057, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1058, %r1034, %r1057;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1061, %r1053, %r1058;
	// end inline asm
	// begin inline asm
	mov.b32 %r1069, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1080, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1068, %r2551, -2004318072;
	// begin inline asm
	lop3.b32 %r1066, %r625, %r1068, %r1069, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1070, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1071, %r1069, %r1070;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1074, %r1066, %r1071;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1077, %r636, %r1068, %r1080, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1081, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1082, %r1080, %r1081;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1085, %r1077, %r1082;
	// end inline asm
	shr.u32 	%r1090, %r1068, 8;
	// begin inline asm
	lop3.b32 %r1088, %r625, %r1090, %r1069, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1092, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1093, %r1069, %r1092;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1096, %r1088, %r1093;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1099, %r636, %r1090, %r1080, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1103, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1104, %r1080, %r1103;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1107, %r1099, %r1104;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1149, %r218, %r1028, %r972;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1146, %r218, %r1039, %r978;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1158, %r218, %r1050, %r984;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1155, %r218, %r1061, %r990;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1167, %r218, %r1074, %r996;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1164, %r218, %r1085, %r1002;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1176, %r218, %r1096, %r1008;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1173, %r218, %r1107, %r1014;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1142, %r242;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1144, %r1142, %r1146;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1147, %r239, %r1149, %r1144;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1151, %r242;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1153, %r1151, %r1155;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1156, %r239, %r1158, %r1153;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1160, %r242;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1162, %r1160, %r1164;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1165, %r239, %r1167, %r1162;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1169, %r242;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1171, %r1169, %r1173;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1174, %r239, %r1176, %r1171;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1178, %r242, %r1149;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1181, %r239, %r1146, %r1178;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1185, %r242, %r1158;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1188, %r239, %r1155, %r1185;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1192, %r242, %r1167;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1195, %r239, %r1164, %r1192;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1199, %r242, %r1176;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1202, %r239, %r1173, %r1199;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1253, %r1250}, {%r299, %r305, %r302, %r308}, {%r1147, %r1181}, {%r2540, %r2540};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1262, %r1259}, {%r299, %r305, %r302, %r308}, {%r1156, %r1188}, {%r2540, %r2540};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1271, %r1268}, {%r299, %r305, %r302, %r308}, {%r1165, %r1195}, {%r2540, %r2540};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1280, %r1277}, {%r299, %r305, %r302, %r308}, {%r1174, %r1202}, {%r2540, %r2540};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1246, %r349;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1248, %r1246, %r1250;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1251, %r346, %r1253, %r1248;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1255, %r349;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1257, %r1255, %r1259;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1260, %r346, %r1262, %r1257;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1264, %r349;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1266, %r1264, %r1268;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1269, %r346, %r1271, %r1266;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1273, %r349;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1275, %r1273, %r1277;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1278, %r346, %r1280, %r1275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1282, %r349, %r1253;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1285, %r346, %r1250, %r1282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1289, %r349, %r1262;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1292, %r346, %r1259, %r1289;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1296, %r349, %r1271;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1299, %r346, %r1268, %r1296;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1303, %r349, %r1280;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1306, %r346, %r1277, %r1303;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1310, %r1311}, {%r386, %r392, %r389, %r395}, {%r1251, %r1285}, {%r2540, %r2540};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1320, %r1321}, {%r386, %r392, %r389, %r395}, {%r1260, %r1292}, {%r2540, %r2540};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1330, %r1331}, {%r386, %r392, %r389, %r395}, {%r1269, %r1299}, {%r2540, %r2540};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1340, %r1341}, {%r386, %r392, %r389, %r395}, {%r1278, %r1306}, {%r2540, %r2540};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1350, %r86, %r1310;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1353, %r86, %r1311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1356, %r86, %r1320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1359, %r86, %r1321;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1362, %r86, %r1330;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1365, %r86, %r1331;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1368, %r86, %r1340;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1371, %r86, %r1341;
	// end inline asm
	// begin inline asm
	mov.b32 %r1374, {%rs274, %rs274};
	// end inline asm
	mov.u16 	%rs99, 18176;
	// begin inline asm
	mov.b32 %r1375, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1376, %r1350, %r1374;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1379, %r1376, %r1375;
	// end inline asm
	// begin inline asm
	mov.b32 %r1382, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1383, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1384, %r1353, %r1382;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1387, %r1384, %r1383;
	// end inline asm
	// begin inline asm
	mov.b32 %r1390, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1391, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1392, %r1356, %r1390;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1395, %r1392, %r1391;
	// end inline asm
	// begin inline asm
	mov.b32 %r1398, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1399, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1400, %r1359, %r1398;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1403, %r1400, %r1399;
	// end inline asm
	// begin inline asm
	mov.b32 %r1406, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1407, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1408, %r1362, %r1406;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1411, %r1408, %r1407;
	// end inline asm
	// begin inline asm
	mov.b32 %r1414, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1415, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1416, %r1365, %r1414;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1419, %r1416, %r1415;
	// end inline asm
	// begin inline asm
	mov.b32 %r1422, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1423, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1424, %r1368, %r1422;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1427, %r1424, %r1423;
	// end inline asm
	// begin inline asm
	mov.b32 %r1430, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1431, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1432, %r1371, %r1430;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1435, %r1432, %r1431;
	// end inline asm
	// begin inline asm
	mov.b32 %r1441, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1439, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1440, %r1441, %r1439;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1443, %r1379, %r1440;
	// end inline asm
	// begin inline asm
	mov.b32 %r1446, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1447, %r1441, %r1446;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1450, %r1387, %r1447;
	// end inline asm
	// begin inline asm
	mov.b32 %r1453, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1454, %r1441, %r1453;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1457, %r1395, %r1454;
	// end inline asm
	// begin inline asm
	mov.b32 %r1460, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1461, %r1441, %r1460;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1464, %r1403, %r1461;
	// end inline asm
	mov.u32 	%r1470, 25152;
	// begin inline asm
	prmt.b32 %r1467, %r1443, %r1457, %r1470;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1471, %r1450, %r1464, %r1470;
	// end inline asm
	shl.b32 	%r1478, %r1471, 4;
	mov.u32 	%r1476, 252645135;
	// begin inline asm
	lop3.b32 %r1475, %r1476, %r1467, %r1478, 202;
	// end inline asm
	xor.b32  	%r2442, %r1475, -2004318072;
	// begin inline asm
	mov.b32 %r1482, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1480, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1481, %r1482, %r1480;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1484, %r1411, %r1481;
	// end inline asm
	// begin inline asm
	mov.b32 %r1487, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1488, %r1482, %r1487;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1491, %r1419, %r1488;
	// end inline asm
	// begin inline asm
	mov.b32 %r1494, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1495, %r1482, %r1494;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1498, %r1427, %r1495;
	// end inline asm
	// begin inline asm
	mov.b32 %r1501, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1502, %r1482, %r1501;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1505, %r1435, %r1502;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1508, %r1484, %r1498, %r1470;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1512, %r1491, %r1505, %r1470;
	// end inline asm
	shl.b32 	%r1519, %r1512, 4;
	// begin inline asm
	lop3.b32 %r1516, %r1476, %r1508, %r1519, 202;
	// end inline asm
	xor.b32  	%r2443, %r1516, -2004318072;
	st.shared.u32 	[%rd139], %r2442;
	st.shared.u32 	[%rd140], %r2443;
	ld.shared.u32 	%r2561, [%rd98];
	ld.shared.u32 	%r2562, [%rd100];
	// begin inline asm
	mov.b32 %r1525, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1536, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1524, %r2561, -2004318072;
	// begin inline asm
	lop3.b32 %r1522, %r625, %r1524, %r1525, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1526, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1527, %r1525, %r1526;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1530, %r1522, %r1527;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1533, %r636, %r1524, %r1536, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1537, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1538, %r1536, %r1537;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1541, %r1533, %r1538;
	// end inline asm
	shr.u32 	%r1546, %r1524, 8;
	// begin inline asm
	lop3.b32 %r1544, %r625, %r1546, %r1525, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1548, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1549, %r1525, %r1548;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1552, %r1544, %r1549;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1555, %r636, %r1546, %r1536, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1559, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1560, %r1536, %r1559;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1563, %r1555, %r1560;
	// end inline asm
	// begin inline asm
	mov.b32 %r1571, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1582, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1570, %r2562, -2004318072;
	// begin inline asm
	lop3.b32 %r1568, %r625, %r1570, %r1571, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1572, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1573, %r1571, %r1572;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1576, %r1568, %r1573;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1579, %r636, %r1570, %r1582, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1583, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1584, %r1582, %r1583;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1587, %r1579, %r1584;
	// end inline asm
	shr.u32 	%r1592, %r1570, 8;
	// begin inline asm
	lop3.b32 %r1590, %r625, %r1592, %r1571, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1594, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1595, %r1571, %r1594;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1598, %r1590, %r1595;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1601, %r636, %r1592, %r1582, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1605, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1606, %r1582, %r1605;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1609, %r1601, %r1606;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1612, %r236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1614, %r1612, %r1530;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1617, %r236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1619, %r1617, %r1541;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1622, %r236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1624, %r1622, %r1552;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1627, %r236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1629, %r1627, %r1563;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1632, %r236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1634, %r1632, %r1576;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1637, %r236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1639, %r1637, %r1587;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1642, %r236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1644, %r1642, %r1598;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1647, %r236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1649, %r1647, %r1609;
	// end inline asm
	// begin inline asm
	mov.b32 %r1657, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1668, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1654, %r625, %r882, %r1657, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1658, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1659, %r1657, %r1658;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1662, %r1654, %r1659;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1665, %r636, %r882, %r1668, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1669, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1670, %r1668, %r1669;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1673, %r1665, %r1670;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1676, %r625, %r904, %r1657, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1680, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1681, %r1657, %r1680;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1684, %r1676, %r1681;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1687, %r636, %r904, %r1668, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1691, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1692, %r1668, %r1691;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1695, %r1687, %r1692;
	// end inline asm
	// begin inline asm
	mov.b32 %r1703, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1714, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1700, %r625, %r928, %r1703, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1704, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1705, %r1703, %r1704;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1708, %r1700, %r1705;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1711, %r636, %r928, %r1714, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1715, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1716, %r1714, %r1715;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1719, %r1711, %r1716;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1722, %r625, %r950, %r1703, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1726, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1727, %r1703, %r1726;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1730, %r1722, %r1727;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1733, %r636, %r950, %r1714, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1737, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1738, %r1714, %r1737;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1741, %r1733, %r1738;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1744, %r182, %r1662, %r1614;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1748, %r182, %r1673, %r1619;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1752, %r182, %r1684, %r1624;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1756, %r182, %r1695, %r1629;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1760, %r182, %r1708, %r1634;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1764, %r182, %r1719, %r1639;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1768, %r182, %r1730, %r1644;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1772, %r182, %r1741, %r1649;
	// end inline asm
	// begin inline asm
	mov.b32 %r1781, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1792, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1778, %r625, %r1022, %r1781, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1782, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1783, %r1781, %r1782;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1786, %r1778, %r1783;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1789, %r636, %r1022, %r1792, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1793, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1794, %r1792, %r1793;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1797, %r1789, %r1794;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1800, %r625, %r1044, %r1781, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1804, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1805, %r1781, %r1804;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1808, %r1800, %r1805;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1811, %r636, %r1044, %r1792, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1815, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1816, %r1792, %r1815;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1819, %r1811, %r1816;
	// end inline asm
	// begin inline asm
	mov.b32 %r1827, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1838, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1824, %r625, %r1068, %r1827, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1828, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1829, %r1827, %r1828;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1832, %r1824, %r1829;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1835, %r636, %r1068, %r1838, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1839, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1840, %r1838, %r1839;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1843, %r1835, %r1840;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1846, %r625, %r1090, %r1827, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1850, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1851, %r1827, %r1850;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1854, %r1846, %r1851;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1857, %r636, %r1090, %r1838, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1861, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1862, %r1838, %r1861;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1865, %r1857, %r1862;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1868, %r200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1870, %r1868, %r1786, %r1744;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1874, %r200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1876, %r1874, %r1797, %r1748;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1880, %r200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1882, %r1880, %r1808, %r1752;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1886, %r200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1888, %r1886, %r1819, %r1756;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1892, %r200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1894, %r1892, %r1832, %r1760;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1898, %r200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1900, %r1898, %r1843, %r1764;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1904, %r200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1906, %r1904, %r1854, %r1768;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1910, %r200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1912, %r1910, %r1865, %r1772;
	// end inline asm
	// begin inline asm
	mov.b32 %r1921, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1932, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1918, %r625, %r626, %r1921, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1922, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1923, %r1921, %r1922;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1926, %r1918, %r1923;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1929, %r636, %r626, %r1932, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1933, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1934, %r1932, %r1933;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1937, %r1929, %r1934;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1940, %r625, %r648, %r1921, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1944, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1945, %r1921, %r1944;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1948, %r1940, %r1945;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1951, %r636, %r648, %r1932, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1955, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1956, %r1932, %r1955;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1959, %r1951, %r1956;
	// end inline asm
	// begin inline asm
	mov.b32 %r1967, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1978, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1964, %r625, %r672, %r1967, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1968, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1969, %r1967, %r1968;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1972, %r1964, %r1969;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1975, %r636, %r672, %r1978, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1979, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1980, %r1978, %r1979;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1983, %r1975, %r1980;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1986, %r625, %r694, %r1967, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1990, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1991, %r1967, %r1990;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1994, %r1986, %r1991;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1997, %r636, %r694, %r1978, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2001, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2002, %r1978, %r2001;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2005, %r1997, %r2002;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2047, %r218, %r1926, %r1870;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2044, %r218, %r1937, %r1876;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2056, %r218, %r1948, %r1882;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2053, %r218, %r1959, %r1888;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2065, %r218, %r1972, %r1894;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2062, %r218, %r1983, %r1900;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2074, %r218, %r1994, %r1906;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2071, %r218, %r2005, %r1912;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2040, %r242;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2042, %r2040, %r2044;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2045, %r239, %r2047, %r2042;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2049, %r242;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2051, %r2049, %r2053;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2054, %r239, %r2056, %r2051;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2058, %r242;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2060, %r2058, %r2062;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2063, %r239, %r2065, %r2060;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2067, %r242;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2069, %r2067, %r2071;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2072, %r239, %r2074, %r2069;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2076, %r242, %r2047;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2079, %r239, %r2044, %r2076;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2083, %r242, %r2056;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2086, %r239, %r2053, %r2083;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2090, %r242, %r2065;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2093, %r239, %r2062, %r2090;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2097, %r242, %r2074;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2100, %r239, %r2071, %r2097;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2151, %r2148}, {%r299, %r305, %r302, %r308}, {%r2045, %r2079}, {%r2540, %r2540};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2160, %r2157}, {%r299, %r305, %r302, %r308}, {%r2054, %r2086}, {%r2540, %r2540};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2169, %r2166}, {%r299, %r305, %r302, %r308}, {%r2063, %r2093}, {%r2540, %r2540};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2178, %r2175}, {%r299, %r305, %r302, %r308}, {%r2072, %r2100}, {%r2540, %r2540};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2144, %r349;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2146, %r2144, %r2148;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2149, %r346, %r2151, %r2146;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2153, %r349;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2155, %r2153, %r2157;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2158, %r346, %r2160, %r2155;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2162, %r349;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2164, %r2162, %r2166;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2167, %r346, %r2169, %r2164;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2171, %r349;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2173, %r2171, %r2175;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2176, %r346, %r2178, %r2173;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2180, %r349, %r2151;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2183, %r346, %r2148, %r2180;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2187, %r349, %r2160;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2190, %r346, %r2157, %r2187;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2194, %r349, %r2169;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2197, %r346, %r2166, %r2194;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2201, %r349, %r2178;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2204, %r346, %r2175, %r2201;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2208, %r2209}, {%r386, %r392, %r389, %r395}, {%r2149, %r2183}, {%r2540, %r2540};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2218, %r2219}, {%r386, %r392, %r389, %r395}, {%r2158, %r2190}, {%r2540, %r2540};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2228, %r2229}, {%r386, %r392, %r389, %r395}, {%r2167, %r2197}, {%r2540, %r2540};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2238, %r2239}, {%r386, %r392, %r389, %r395}, {%r2176, %r2204}, {%r2540, %r2540};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2248, %r86, %r2208;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2251, %r86, %r2209;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2254, %r86, %r2218;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2257, %r86, %r2219;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2260, %r86, %r2228;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2263, %r86, %r2229;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2266, %r86, %r2238;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2269, %r86, %r2239;
	// end inline asm
	// begin inline asm
	mov.b32 %r2272, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2273, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2274, %r2248, %r2272;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2277, %r2274, %r2273;
	// end inline asm
	// begin inline asm
	mov.b32 %r2280, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2281, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2282, %r2251, %r2280;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2285, %r2282, %r2281;
	// end inline asm
	// begin inline asm
	mov.b32 %r2288, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2289, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2290, %r2254, %r2288;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2293, %r2290, %r2289;
	// end inline asm
	// begin inline asm
	mov.b32 %r2296, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2297, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2298, %r2257, %r2296;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2301, %r2298, %r2297;
	// end inline asm
	// begin inline asm
	mov.b32 %r2304, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2305, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2306, %r2260, %r2304;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2309, %r2306, %r2305;
	// end inline asm
	// begin inline asm
	mov.b32 %r2312, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2313, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2314, %r2263, %r2312;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2317, %r2314, %r2313;
	// end inline asm
	// begin inline asm
	mov.b32 %r2320, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2321, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2322, %r2266, %r2320;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2325, %r2322, %r2321;
	// end inline asm
	// begin inline asm
	mov.b32 %r2328, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2329, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2330, %r2269, %r2328;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2333, %r2330, %r2329;
	// end inline asm
	// begin inline asm
	mov.b32 %r2339, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r2337, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2338, %r2339, %r2337;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2341, %r2277, %r2338;
	// end inline asm
	// begin inline asm
	mov.b32 %r2344, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2345, %r2339, %r2344;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2348, %r2285, %r2345;
	// end inline asm
	// begin inline asm
	mov.b32 %r2351, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2352, %r2339, %r2351;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2355, %r2293, %r2352;
	// end inline asm
	// begin inline asm
	mov.b32 %r2358, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2359, %r2339, %r2358;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2362, %r2301, %r2359;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2365, %r2341, %r2355, %r1470;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2369, %r2348, %r2362, %r1470;
	// end inline asm
	shl.b32 	%r2376, %r2369, 4;
	// begin inline asm
	lop3.b32 %r2373, %r1476, %r2365, %r2376, 202;
	// end inline asm
	xor.b32  	%r2444, %r2373, -2004318072;
	// begin inline asm
	mov.b32 %r2380, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r2378, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2379, %r2380, %r2378;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2382, %r2309, %r2379;
	// end inline asm
	// begin inline asm
	mov.b32 %r2385, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2386, %r2380, %r2385;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2389, %r2317, %r2386;
	// end inline asm
	// begin inline asm
	mov.b32 %r2392, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2393, %r2380, %r2392;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2396, %r2325, %r2393;
	// end inline asm
	// begin inline asm
	mov.b32 %r2399, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2400, %r2380, %r2399;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2403, %r2333, %r2400;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2406, %r2382, %r2396, %r1470;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2410, %r2389, %r2403, %r1470;
	// end inline asm
	shl.b32 	%r2417, %r2410, 4;
	// begin inline asm
	lop3.b32 %r2414, %r1476, %r2406, %r2417, 202;
	// end inline asm
	xor.b32  	%r2445, %r2414, -2004318072;
	st.shared.u32 	[%rd139], %r2444;
	st.shared.u32 	[%rd140], %r2445;
	add.s32 	%r2563, %r2563, 32;
	add.s64 	%rd140, %rd140, 4228;
	add.s64 	%rd139, %rd139, 4228;
	setp.eq.s32 	%p213, %r2563, 256;
	mov.u32 	%r2564, %r2553;
	mov.u32 	%r2565, %r2552;
	mov.u32 	%r2566, %r2551;
	mov.u32 	%r2567, %r2550;
	@%p213 bra 	$L__BB0_92;
	bra.uni 	$L__BB0_91;
$L__BB0_92:                             // %guard_exit10511
                                        //   in Loop: Header=BB0_90 Depth=1
	bar.sync 	0;
	or.b32  	%r125, %r81, %r63;
	ld.shared.u32 	%r2451, [%rd14];
	ld.shared.u32 	%r2452, [%rd15+128];
	ld.shared.u32 	%r2459, [%rd15+4];
	ld.shared.u32 	%r2460, [%rd15+132];
	ld.shared.u32 	%r2467, [%rd16];
	ld.shared.u32 	%r2468, [%rd17+128];
	ld.shared.u32 	%r2475, [%rd17+4];
	ld.shared.u32 	%r2476, [%rd17+132];
	ld.shared.u32 	%r2483, [%rd18];
	ld.shared.u32 	%r2484, [%rd19+128];
	ld.shared.u32 	%r2491, [%rd19+4];
	ld.shared.u32 	%r2492, [%rd19+132];
	ld.shared.u32 	%r2499, [%rd20];
	ld.shared.u32 	%r2500, [%rd21+128];
	ld.shared.u32 	%r2507, [%rd21+4];
	ld.shared.u32 	%r2508, [%rd21+132];
	// begin inline asm
	prmt.b32 %r2446, %r2451, %r2452, %r538;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2450, %r2451, %r2452, %r542;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2454, %r2459, %r2460, %r538;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2458, %r2459, %r2460, %r542;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2462, %r2467, %r2468, %r538;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2466, %r2467, %r2468, %r542;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2470, %r2475, %r2476, %r538;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2474, %r2475, %r2476, %r542;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2478, %r2483, %r2484, %r538;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2482, %r2483, %r2484, %r542;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2486, %r2491, %r2492, %r538;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2490, %r2491, %r2492, %r542;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2494, %r2499, %r2500, %r538;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2498, %r2499, %r2500, %r542;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2502, %r2507, %r2508, %r538;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2506, %r2507, %r2508, %r542;
	// end inline asm
	selp.b32 	%r2510, %r2450, %r2446, %p200;
	shfl.sync.bfly.b32	%r2511, %r2510, 8, 31, -1;
	selp.b32 	%r2512, %r2458, %r2454, %p200;
	shfl.sync.bfly.b32	%r2513, %r2512, 8, 31, -1;
	selp.b32 	%r2514, %r2466, %r2462, %p200;
	shfl.sync.bfly.b32	%r130, %r2514, 8, 31, -1;
	selp.b32 	%r2515, %r2474, %r2470, %p200;
	shfl.sync.bfly.b32	%r131, %r2515, 8, 31, -1;
	selp.b32 	%r2516, %r2482, %r2478, %p200;
	shfl.sync.bfly.b32	%r2517, %r2516, 8, 31, -1;
	selp.b32 	%r132, %r2478, %r2517, %p200;
	selp.b32 	%r133, %r2517, %r2482, %p200;
	selp.b32 	%r2518, %r2490, %r2486, %p200;
	shfl.sync.bfly.b32	%r2519, %r2518, 8, 31, -1;
	selp.b32 	%r134, %r2486, %r2519, %p200;
	selp.b32 	%r135, %r2519, %r2490, %p200;
	selp.b32 	%r2520, %r2498, %r2494, %p200;
	shfl.sync.bfly.b32	%r2521, %r2520, 8, 31, -1;
	selp.b32 	%r136, %r2494, %r2521, %p200;
	selp.b32 	%r137, %r2521, %r2498, %p200;
	selp.b32 	%r2522, %r2506, %r2502, %p200;
	shfl.sync.bfly.b32	%r2523, %r2522, 8, 31, -1;
	selp.b32 	%r138, %r2502, %r2523, %p200;
	selp.b32 	%r139, %r2523, %r2506, %p200;
	shl.b32 	%r2541, %r125, 13;
	@%p214 bra 	$L__BB0_114;
// %bb.93:                              // %guard_exit10511.pass10078_crit_edge
                                        //   in Loop: Header=BB0_90 Depth=1
	or.b32  	%r2533, %r2541, %r74;
	or.b32  	%r2534, %r2533, %r66;
	or.b32  	%r2568, %r2534, %r67;
	bra.uni 	$L__BB0_115;
$L__BB0_116:                            // %L23743
	st.global.u32 	[%rd4], %r2540;
	ret;
$L__BB0_7:                              // %L157
	mov.u32 	%r2539, 2;
	st.global.u32 	[%rd4], %r2539;
	mov.u64 	%rd137, exception2082;
	cvta.global.u64 	%rd138, %rd137;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd138;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd30;
	st.param.b32 	[param0+8], %r141;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd35, exception1;
	cvta.global.u64 	%rd36, %rd35;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd36;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd30;
	st.param.b32 	[param0+8], %r141;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
