// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE // -- Begin function _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.visible .entry _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE(
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<246>;
	.reg .b16 	%rs<251>;
	.reg .b32 	%r<3693>;
	.reg .f32 	%f<787>;
	.reg .b64 	%rd<240>;

// %bb.0:                               // %conversion
	// begin inline asm
	mov.u32 %r309, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p3, %r309, 76895;
	@%p3 bra 	$L__BB0_161;
	bra.uni 	$L__BB0_1;
$L__BB0_161:                            // %L10
	ld.param.u64 	%rd37, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5];
	mov.u32 	%r1, %ctaid.x;
	mul.lo.s32 	%r310, %r1, 768;
	mov.u32 	%r2, %tid.x;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r311, %r310, %r2;
	add.s32 	%r312, %r311, %r4;
	mul.wide.u32 	%rd43, %r312, 4;
	add.s64 	%rd5, %rd37, %rd43;
	mov.u32 	%r313, 1;
	st.global.u32 	[%rd5], %r313;
	and.b32  	%r5, %r2, 3;
	shr.u32 	%r6, %r2, 2;
	mul.lo.s32 	%r314, %r5, %r6;
	and.b32  	%r315, %r314, 7;
	cvt.rn.f32.s32 	%f201, %r315;
	mov.f32 	%f202, 0f40800000;
	div.approx.f32 	%f1, %f201, %f202;
	abs.f32 	%f785, %f1;
	setp.lt.f32 	%p4, %f785, 0f40000000;
	setp.gtu.f32 	%p245, %f785, 0f4B800000;
	mov.f32 	%f781, %f785;
	@%p4 bra 	$L__BB0_173;
// %bb.162:
	@%p245 bra 	$L__BB0_169;
	bra.uni 	$L__BB0_163;
$L__BB0_169:
	mov.b32 	%r224, %f785;
	and.b32  	%r316, %r224, 8388607;
	or.b32  	%r3688, %r316, 1065353216;
	mov.b32 	%f780, %r3688;
	add.s32 	%r317, %r224, -1073741824;
	and.b32  	%r3689, %r317, -8388608;
	setp.eq.s32 	%p11, %r3689, 0;
	@%p11 bra 	$L__BB0_172;
// %bb.170:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f212, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f211,%f212;
	// end inline asm
$L__BB0_171:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r318, %r3689, 192937984;
	add.s32 	%r319, %r3688, %r318;
	mov.b32 	%f213, %r319;
	mul.f32 	%f214, %f211, %f213;
	sub.f32 	%f215, %f213, %f214;
	fma.rn.f32 	%f216, %f215, %f211, %f214;
	sub.f32 	%f217, %f213, %f216;
	fma.rz.f32 	%f218, %f217, %f211, %f216;
	cvt.rzi.f32.f32 	%f219, %f218;
	sub.f32 	%f780, %f213, %f219;
	sub.s32 	%r3689, %r3689, %r318;
	mov.b32 	%r3688, %f780;
	setp.ne.s32 	%p12, %r3689, 0;
	setp.ne.s32 	%p13, %r3688, 0;
	and.pred  	%p14, %p12, %p13;
	@%p14 bra 	$L__BB0_171;
$L__BB0_172:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p15, %r224, 2139095039;
	selp.f32 	%f220, 0f7FFFFFFF, 0f4B800000, %p15;
	mul.f32 	%f221, %f780, 0f34000000;
	mul.f32 	%f781, %f220, %f221;
	bra.uni 	$L__BB0_173;
$L__BB0_163:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f203, 0f40000000;
	div.approx.f32 	%f204, %f785, %f203;
	cvt.rzi.f32.f32 	%f779, %f204;
	fma.rn.f32 	%f172, %f779, 0fC0000000, %f785;
	mov.b32 	%r223, %f172;
	setp.lt.u32 	%p6, %r223, 1073741824;
	@%p6 bra 	$L__BB0_168;
// %bb.164:
	setp.lt.u32 	%p7, %r223, -2147483647;
	@%p7 bra 	$L__BB0_166;
// %bb.165:
	add.f32 	%f209, %f779, 0fBF800000;
	setp.lt.f32 	%p10, %f172, 0fC0000000;
	add.f32 	%f210, %f209, 0fBF800000;
	selp.f32 	%f779, %f210, %f209, %p10;
	bra.uni 	$L__BB0_168;
$L__BB0_166:
	add.f32 	%f779, %f779, 0f3F800000;
	setp.ltu.f32 	%p8, %f172, 0f40800000;
	@%p8 bra 	$L__BB0_168;
// %bb.167:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f205, %f779, 0f3F800000;
	fma.rn.f32 	%f207, %f203, 0fC0400000, %f172;
	setp.ge.f32 	%p9, %f207, 0f00000000;
	add.f32 	%f208, %f205, 0f3F800000;
	selp.f32 	%f779, %f208, %f205, %p9;
$L__BB0_168:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f781, %f779, 0fC0000000, %f785;
$L__BB0_173:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f222, %f781;
	setp.gtu.f32 	%p16, %f222, 0f7F800000;
	mov.b32 	%r320, %f1;
	and.b32  	%r231, %r320, -2147483648;
	@%p16 bra 	$L__BB0_175;
// %bb.174:
	mov.b32 	%r321, %f781;
	or.b32  	%r322, %r231, %r321;
	mov.b32 	%f781, %r322;
$L__BB0_175:                            // %__nv_fmodf.exit
	add.f32 	%f224, %f781, %f781;
	mov.b32 	%r329, %f224;
	and.b32  	%r330, %r329, -2147483648;
	or.b32  	%r331, %r330, 1056964608;
	mov.b32 	%f225, %r331;
	add.f32 	%f226, %f224, %f225;
	cvt.rzi.f32.f32 	%f227, %f226;
	abs.f32 	%f228, %f224;
	setp.gt.f32 	%p17, %f228, 0f4B000000;
	selp.f32 	%f229, %f224, %f227, %p17;
	cvt.rzi.f32.f32 	%f230, %f224;
	setp.lt.f32 	%p18, %f228, 0f3F000000;
	selp.f32 	%f231, %f230, %f229, %p18;
	fma.rn.f32 	%f232, %f231, 0fBF000000, %f781;
	mul.f32 	%f233, %f232, %f232;
	fma.rn.f32 	%f234, %f233, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f235, %f233, 0f3E684E12, 0fBFAAD2E0;
	mov.f32 	%f223, 0f00000000;
	shl.b32 	%r234, %r2, 1;
	and.b32  	%r235, %r234, 6;
	or.b32  	%r236, %r235, 1;
	setp.eq.s32 	%p24, %r235, 6;
	mov.f32 	%f729, 0f41C00000;
	mul.lo.s32 	%r3587, %r235, %r6;
	mov.f32 	%f735, %f223;
	mov.f32 	%f736, %f223;
	@%p24 bra 	$L__BB0_17;
// %bb.2:                               // %L204
	cvt.u16.u32 	%rs1, %r3587;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 13;
	mul.lo.s16 	%rs5, %rs4, 48;
	sub.s16 	%rs6, %rs1, %rs5;
	and.b16  	%rs7, %rs6, 255;
	cvt.rn.f32.u16 	%f255, %rs7;
	div.approx.f32 	%f3, %f255, %f729;
	abs.f32 	%f733, %f3;
	setp.lt.f32 	%p25, %f733, 0f40000000;
	@%p25 bra 	$L__BB0_14;
// %bb.3:
	setp.gtu.f32 	%p26, %f733, 0f4B800000;
	@%p26 bra 	$L__BB0_10;
	bra.uni 	$L__BB0_4;
$L__BB0_10:
	mov.b32 	%r8, %f733;
	and.b32  	%r338, %r8, 8388607;
	or.b32  	%r3590, %r338, 1065353216;
	mov.b32 	%f732, %r3590;
	add.s32 	%r339, %r8, -1073741824;
	and.b32  	%r3591, %r339, -8388608;
	setp.eq.s32 	%p32, %r3591, 0;
	@%p32 bra 	$L__BB0_13;
// %bb.11:                              // %__nv_fmaf_rn.exit4.i.i.i991.preheader
	mov.f32 	%f266, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f265,%f266;
	// end inline asm
$L__BB0_12:                             // %__nv_fmaf_rn.exit4.i.i.i991
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r340, %r3591, 192937984;
	add.s32 	%r341, %r3590, %r340;
	mov.b32 	%f267, %r341;
	mul.f32 	%f268, %f265, %f267;
	sub.f32 	%f269, %f267, %f268;
	fma.rn.f32 	%f270, %f269, %f265, %f268;
	sub.f32 	%f271, %f267, %f270;
	fma.rz.f32 	%f272, %f271, %f265, %f270;
	cvt.rzi.f32.f32 	%f273, %f272;
	sub.f32 	%f732, %f267, %f273;
	sub.s32 	%r3591, %r3591, %r340;
	mov.b32 	%r3590, %f732;
	setp.ne.s32 	%p33, %r3591, 0;
	setp.ne.s32 	%p34, %r3590, 0;
	and.pred  	%p35, %p33, %p34;
	@%p35 bra 	$L__BB0_12;
$L__BB0_13:                             // %__internal_fmodf_slowpath_mod.exit.i.i993
	setp.gt.u32 	%p36, %r8, 2139095039;
	selp.f32 	%f274, 0f7FFFFFFF, 0f4B800000, %p36;
	mul.f32 	%f275, %f732, 0f34000000;
	mul.f32 	%f733, %f274, %f275;
	bra.uni 	$L__BB0_14;
$L__BB0_4:                              // %__nv_fast_fdividef.exit.i.i.i970
	mov.f32 	%f257, 0f40000000;
	div.approx.f32 	%f258, %f733, %f257;
	cvt.rzi.f32.f32 	%f731, %f258;
	fma.rn.f32 	%f6, %f731, 0fC0000000, %f733;
	mov.b32 	%r7, %f6;
	setp.lt.u32 	%p27, %r7, 1073741824;
	@%p27 bra 	$L__BB0_9;
// %bb.5:
	setp.lt.u32 	%p28, %r7, -2147483647;
	@%p28 bra 	$L__BB0_7;
// %bb.6:
	add.f32 	%f263, %f731, 0fBF800000;
	setp.lt.f32 	%p31, %f6, 0fC0000000;
	add.f32 	%f264, %f263, 0fBF800000;
	selp.f32 	%f731, %f264, %f263, %p31;
	bra.uni 	$L__BB0_9;
$L__BB0_7:
	add.f32 	%f731, %f731, 0f3F800000;
	setp.ltu.f32 	%p29, %f6, 0f40800000;
	@%p29 bra 	$L__BB0_9;
// %bb.8:                               // %__nv_fmaf_rn.exit.i.i.i974
	add.f32 	%f259, %f731, 0f3F800000;
	fma.rn.f32 	%f261, %f257, 0fC0400000, %f6;
	setp.ge.f32 	%p30, %f261, 0f00000000;
	add.f32 	%f262, %f259, 0f3F800000;
	selp.f32 	%f731, %f262, %f259, %p30;
$L__BB0_9:                              // %__internal_fmodf_fastpath_quot.exit.i.i977
	fma.rn.f32 	%f733, %f731, 0fC0000000, %f733;
$L__BB0_14:                             // %__internal_fmodf_kernel.exit.i996
	abs.f32 	%f276, %f733;
	setp.gtu.f32 	%p37, %f276, 0f7F800000;
	@%p37 bra 	$L__BB0_16;
// %bb.15:
	mov.b32 	%r342, %f3;
	and.b32  	%r343, %r342, -2147483648;
	mov.b32 	%r344, %f733;
	or.b32  	%r345, %r343, %r344;
	mov.b32 	%f733, %r345;
$L__BB0_16:                             // %__nv_fmodf.exit997
	add.f32 	%f277, %f733, %f733;
	mov.b32 	%r346, %f277;
	and.b32  	%r347, %r346, -2147483648;
	or.b32  	%r348, %r347, 1056964608;
	mov.b32 	%f278, %r348;
	add.f32 	%f279, %f277, %f278;
	cvt.rzi.f32.f32 	%f280, %f279;
	abs.f32 	%f281, %f277;
	setp.gt.f32 	%p38, %f281, 0f4B000000;
	selp.f32 	%f282, %f277, %f280, %p38;
	cvt.rzi.f32.f32 	%f283, %f277;
	setp.lt.f32 	%p39, %f281, 0f3F000000;
	selp.f32 	%f284, %f283, %f282, %p39;
	cvt.rzi.s32.f32 	%r349, %f284;
	fma.rn.f32 	%f285, %f284, 0fBF000000, %f733;
	mul.f32 	%f286, %f285, %f285;
	fma.rn.f32 	%f287, %f286, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f288, %f286, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f289, %f287, %f286, 0fC0A55DF6;
	fma.rn.f32 	%f290, %f288, %f286, 0f4081E0CF;
	fma.rn.f32 	%f291, %f286, %f285, 0f00000000;
	fma.rn.f32 	%f292, %f290, %f286, 0fC09DE9E6;
	fma.rn.f32 	%f293, %f289, %f291, 0f00000000;
	fma.rn.f32 	%f294, %f292, %f286, 0f3F800000;
	fma.rn.f32 	%f295, %f285, 0f40490FDB, %f293;
	and.b32  	%r350, %r349, 1;
	setp.eq.b32 	%p40, %r350, 1;
	selp.f32 	%f296, %f294, %f295, %p40;
	selp.f32 	%f297, %f295, %f294, %p40;
	and.b32  	%r351, %r349, 2;
	setp.eq.s32 	%p41, %r351, 0;
	neg.f32 	%f298, %f296;
	selp.f32 	%f299, %f296, %f298, %p41;
	add.s32 	%r352, %r349, 1;
	and.b32  	%r353, %r352, 2;
	setp.eq.s32 	%p42, %r353, 0;
	mov.f32 	%f300, 0f00000000;
	sub.f32 	%f301, %f300, %f297;
	selp.f32 	%f302, %f297, %f301, %p42;
	cvt.rzi.f32.f32 	%f303, %f733;
	setp.eq.f32 	%p43, %f303, %f733;
	mul.f32 	%f304, %f733, 0f00000000;
	selp.f32 	%f736, %f304, %f299, %p43;
	abs.f32 	%f305, %f733;
	setp.gt.f32 	%p44, %f305, 0f4B800000;
	add.f32 	%f306, %f736, 0f3F800000;
	selp.f32 	%f735, %f306, %f302, %p44;
$L__BB0_17:                             // %L238
	cvt.rzi.s32.f32 	%r332, %f231;
	fma.rn.f32 	%f236, %f234, %f233, 0fC0A55DF6;
	fma.rn.f32 	%f237, %f235, %f233, 0f4081E0CF;
	fma.rn.f32 	%f238, %f233, %f232, 0f00000000;
	setp.gt.u32 	%p45, %r236, 5;
	mul.lo.s32 	%r3588, %r236, %r6;
	mov.f32 	%f741, %f223;
	mov.f32 	%f742, %f223;
	@%p45 bra 	$L__BB0_33;
// %bb.18:                              // %L242
	mul.hi.u32 	%r355, %r3588, -1431655765;
	shr.u32 	%r356, %r355, 5;
	mul.lo.s32 	%r357, %r356, 48;
	sub.s32 	%r358, %r3588, %r357;
	cvt.rn.f32.s32 	%f308, %r358;
	div.approx.f32 	%f24, %f308, %f729;
	abs.f32 	%f739, %f24;
	setp.lt.f32 	%p46, %f739, 0f40000000;
	@%p46 bra 	$L__BB0_30;
// %bb.19:
	setp.gtu.f32 	%p47, %f739, 0f4B800000;
	@%p47 bra 	$L__BB0_26;
	bra.uni 	$L__BB0_20;
$L__BB0_26:
	mov.b32 	%r16, %f739;
	and.b32  	%r359, %r16, 8388607;
	or.b32  	%r3592, %r359, 1065353216;
	mov.b32 	%f738, %r3592;
	add.s32 	%r360, %r16, -1073741824;
	and.b32  	%r3593, %r360, -8388608;
	setp.eq.s32 	%p53, %r3593, 0;
	@%p53 bra 	$L__BB0_29;
// %bb.27:                              // %__nv_fmaf_rn.exit4.i.i.i1022.preheader
	mov.f32 	%f319, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f318,%f319;
	// end inline asm
$L__BB0_28:                             // %__nv_fmaf_rn.exit4.i.i.i1022
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r361, %r3593, 192937984;
	add.s32 	%r362, %r3592, %r361;
	mov.b32 	%f320, %r362;
	mul.f32 	%f321, %f318, %f320;
	sub.f32 	%f322, %f320, %f321;
	fma.rn.f32 	%f323, %f322, %f318, %f321;
	sub.f32 	%f324, %f320, %f323;
	fma.rz.f32 	%f325, %f324, %f318, %f323;
	cvt.rzi.f32.f32 	%f326, %f325;
	sub.f32 	%f738, %f320, %f326;
	sub.s32 	%r3593, %r3593, %r361;
	mov.b32 	%r3592, %f738;
	setp.ne.s32 	%p54, %r3593, 0;
	setp.ne.s32 	%p55, %r3592, 0;
	and.pred  	%p56, %p54, %p55;
	@%p56 bra 	$L__BB0_28;
$L__BB0_29:                             // %__internal_fmodf_slowpath_mod.exit.i.i1024
	setp.gt.u32 	%p57, %r16, 2139095039;
	selp.f32 	%f327, 0f7FFFFFFF, 0f4B800000, %p57;
	mul.f32 	%f328, %f738, 0f34000000;
	mul.f32 	%f739, %f327, %f328;
	bra.uni 	$L__BB0_30;
$L__BB0_20:                             // %__nv_fast_fdividef.exit.i.i.i1001
	mov.f32 	%f310, 0f40000000;
	div.approx.f32 	%f311, %f739, %f310;
	cvt.rzi.f32.f32 	%f737, %f311;
	fma.rn.f32 	%f27, %f737, 0fC0000000, %f739;
	mov.b32 	%r15, %f27;
	setp.lt.u32 	%p48, %r15, 1073741824;
	@%p48 bra 	$L__BB0_25;
// %bb.21:
	setp.lt.u32 	%p49, %r15, -2147483647;
	@%p49 bra 	$L__BB0_23;
// %bb.22:
	add.f32 	%f316, %f737, 0fBF800000;
	setp.lt.f32 	%p52, %f27, 0fC0000000;
	add.f32 	%f317, %f316, 0fBF800000;
	selp.f32 	%f737, %f317, %f316, %p52;
	bra.uni 	$L__BB0_25;
$L__BB0_23:
	add.f32 	%f737, %f737, 0f3F800000;
	setp.ltu.f32 	%p50, %f27, 0f40800000;
	@%p50 bra 	$L__BB0_25;
// %bb.24:                              // %__nv_fmaf_rn.exit.i.i.i1005
	add.f32 	%f312, %f737, 0f3F800000;
	fma.rn.f32 	%f314, %f310, 0fC0400000, %f27;
	setp.ge.f32 	%p51, %f314, 0f00000000;
	add.f32 	%f315, %f312, 0f3F800000;
	selp.f32 	%f737, %f315, %f312, %p51;
$L__BB0_25:                             // %__internal_fmodf_fastpath_quot.exit.i.i1008
	fma.rn.f32 	%f739, %f737, 0fC0000000, %f739;
$L__BB0_30:                             // %__internal_fmodf_kernel.exit.i1027
	abs.f32 	%f329, %f739;
	setp.gtu.f32 	%p58, %f329, 0f7F800000;
	@%p58 bra 	$L__BB0_32;
// %bb.31:
	mov.b32 	%r363, %f24;
	and.b32  	%r364, %r363, -2147483648;
	mov.b32 	%r365, %f739;
	or.b32  	%r366, %r364, %r365;
	mov.b32 	%f739, %r366;
$L__BB0_32:                             // %__nv_fmodf.exit1028
	add.f32 	%f330, %f739, %f739;
	mov.b32 	%r367, %f330;
	and.b32  	%r368, %r367, -2147483648;
	or.b32  	%r369, %r368, 1056964608;
	mov.b32 	%f331, %r369;
	add.f32 	%f332, %f330, %f331;
	cvt.rzi.f32.f32 	%f333, %f332;
	abs.f32 	%f334, %f330;
	setp.gt.f32 	%p59, %f334, 0f4B000000;
	selp.f32 	%f335, %f330, %f333, %p59;
	cvt.rzi.f32.f32 	%f336, %f330;
	setp.lt.f32 	%p60, %f334, 0f3F000000;
	selp.f32 	%f337, %f336, %f335, %p60;
	cvt.rzi.s32.f32 	%r370, %f337;
	fma.rn.f32 	%f338, %f337, 0fBF000000, %f739;
	mul.f32 	%f339, %f338, %f338;
	fma.rn.f32 	%f340, %f339, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f341, %f339, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f342, %f340, %f339, 0fC0A55DF6;
	fma.rn.f32 	%f343, %f341, %f339, 0f4081E0CF;
	fma.rn.f32 	%f344, %f339, %f338, 0f00000000;
	fma.rn.f32 	%f345, %f343, %f339, 0fC09DE9E6;
	fma.rn.f32 	%f346, %f342, %f344, 0f00000000;
	fma.rn.f32 	%f347, %f345, %f339, 0f3F800000;
	fma.rn.f32 	%f348, %f338, 0f40490FDB, %f346;
	and.b32  	%r371, %r370, 1;
	setp.eq.b32 	%p61, %r371, 1;
	selp.f32 	%f349, %f347, %f348, %p61;
	selp.f32 	%f350, %f348, %f347, %p61;
	and.b32  	%r372, %r370, 2;
	setp.eq.s32 	%p62, %r372, 0;
	neg.f32 	%f351, %f349;
	selp.f32 	%f352, %f349, %f351, %p62;
	add.s32 	%r373, %r370, 1;
	and.b32  	%r374, %r373, 2;
	setp.eq.s32 	%p63, %r374, 0;
	mov.f32 	%f353, 0f00000000;
	sub.f32 	%f354, %f353, %f350;
	selp.f32 	%f355, %f350, %f354, %p63;
	cvt.rzi.f32.f32 	%f356, %f739;
	setp.eq.f32 	%p64, %f356, %f739;
	mul.f32 	%f357, %f739, 0f00000000;
	selp.f32 	%f742, %f357, %f352, %p64;
	abs.f32 	%f358, %f739;
	setp.gt.f32 	%p65, %f358, 0f4B800000;
	add.f32 	%f359, %f742, 0f3F800000;
	selp.f32 	%f741, %f359, %f355, %p65;
$L__BB0_33:                             // %L276
	fma.rn.f32 	%f239, %f237, %f233, 0fC09DE9E6;
	fma.rn.f32 	%f240, %f236, %f238, 0f00000000;
	and.b32  	%r333, %r332, 1;
	setp.gt.u32 	%p67, %r2, 23;
	or.pred  	%p1, %p24, %p67;
	mov.f32 	%f730, 0f40400000;
	mov.f32 	%f747, %f223;
	mov.f32 	%f748, %f223;
	@%p1 bra 	$L__BB0_49;
// %bb.34:                              // %L314
	cvt.u16.u32 	%rs8, %r3587;
	and.b16  	%rs9, %rs8, 255;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 10;
	mul.lo.s16 	%rs12, %rs11, 6;
	sub.s16 	%rs13, %rs8, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f361, %rs14;
	div.approx.f32 	%f45, %f361, %f730;
	abs.f32 	%f745, %f45;
	setp.lt.f32 	%p68, %f745, 0f40000000;
	@%p68 bra 	$L__BB0_46;
// %bb.35:
	setp.gtu.f32 	%p69, %f745, 0f4B800000;
	@%p69 bra 	$L__BB0_42;
	bra.uni 	$L__BB0_36;
$L__BB0_42:
	mov.b32 	%r26, %f745;
	and.b32  	%r382, %r26, 8388607;
	or.b32  	%r3594, %r382, 1065353216;
	mov.b32 	%f744, %r3594;
	add.s32 	%r383, %r26, -1073741824;
	and.b32  	%r3595, %r383, -8388608;
	setp.eq.s32 	%p75, %r3595, 0;
	@%p75 bra 	$L__BB0_45;
// %bb.43:                              // %__nv_fmaf_rn.exit4.i.i.i1053.preheader
	mov.f32 	%f372, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f371,%f372;
	// end inline asm
$L__BB0_44:                             // %__nv_fmaf_rn.exit4.i.i.i1053
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r384, %r3595, 192937984;
	add.s32 	%r385, %r3594, %r384;
	mov.b32 	%f373, %r385;
	mul.f32 	%f374, %f371, %f373;
	sub.f32 	%f375, %f373, %f374;
	fma.rn.f32 	%f376, %f375, %f371, %f374;
	sub.f32 	%f377, %f373, %f376;
	fma.rz.f32 	%f378, %f377, %f371, %f376;
	cvt.rzi.f32.f32 	%f379, %f378;
	sub.f32 	%f744, %f373, %f379;
	sub.s32 	%r3595, %r3595, %r384;
	mov.b32 	%r3594, %f744;
	setp.ne.s32 	%p76, %r3595, 0;
	setp.ne.s32 	%p77, %r3594, 0;
	and.pred  	%p78, %p76, %p77;
	@%p78 bra 	$L__BB0_44;
$L__BB0_45:                             // %__internal_fmodf_slowpath_mod.exit.i.i1055
	setp.gt.u32 	%p79, %r26, 2139095039;
	selp.f32 	%f380, 0f7FFFFFFF, 0f4B800000, %p79;
	mul.f32 	%f381, %f744, 0f34000000;
	mul.f32 	%f745, %f380, %f381;
	bra.uni 	$L__BB0_46;
$L__BB0_36:                             // %__nv_fast_fdividef.exit.i.i.i1032
	mov.f32 	%f363, 0f40000000;
	div.approx.f32 	%f364, %f745, %f363;
	cvt.rzi.f32.f32 	%f743, %f364;
	fma.rn.f32 	%f48, %f743, 0fC0000000, %f745;
	mov.b32 	%r25, %f48;
	setp.lt.u32 	%p70, %r25, 1073741824;
	@%p70 bra 	$L__BB0_41;
// %bb.37:
	setp.lt.u32 	%p71, %r25, -2147483647;
	@%p71 bra 	$L__BB0_39;
// %bb.38:
	add.f32 	%f369, %f743, 0fBF800000;
	setp.lt.f32 	%p74, %f48, 0fC0000000;
	add.f32 	%f370, %f369, 0fBF800000;
	selp.f32 	%f743, %f370, %f369, %p74;
	bra.uni 	$L__BB0_41;
$L__BB0_39:
	add.f32 	%f743, %f743, 0f3F800000;
	setp.ltu.f32 	%p72, %f48, 0f40800000;
	@%p72 bra 	$L__BB0_41;
// %bb.40:                              // %__nv_fmaf_rn.exit.i.i.i1036
	add.f32 	%f365, %f743, 0f3F800000;
	fma.rn.f32 	%f367, %f363, 0fC0400000, %f48;
	setp.ge.f32 	%p73, %f367, 0f00000000;
	add.f32 	%f368, %f365, 0f3F800000;
	selp.f32 	%f743, %f368, %f365, %p73;
$L__BB0_41:                             // %__internal_fmodf_fastpath_quot.exit.i.i1039
	fma.rn.f32 	%f745, %f743, 0fC0000000, %f745;
$L__BB0_46:                             // %__internal_fmodf_kernel.exit.i1058
	abs.f32 	%f382, %f745;
	setp.gtu.f32 	%p80, %f382, 0f7F800000;
	@%p80 bra 	$L__BB0_48;
// %bb.47:
	mov.b32 	%r386, %f45;
	and.b32  	%r387, %r386, -2147483648;
	mov.b32 	%r388, %f745;
	or.b32  	%r389, %r387, %r388;
	mov.b32 	%f745, %r389;
$L__BB0_48:                             // %__nv_fmodf.exit1059
	add.f32 	%f383, %f745, %f745;
	mov.b32 	%r390, %f383;
	and.b32  	%r391, %r390, -2147483648;
	or.b32  	%r392, %r391, 1056964608;
	mov.b32 	%f384, %r392;
	add.f32 	%f385, %f383, %f384;
	cvt.rzi.f32.f32 	%f386, %f385;
	abs.f32 	%f387, %f383;
	setp.gt.f32 	%p81, %f387, 0f4B000000;
	selp.f32 	%f388, %f383, %f386, %p81;
	cvt.rzi.f32.f32 	%f389, %f383;
	setp.lt.f32 	%p82, %f387, 0f3F000000;
	selp.f32 	%f390, %f389, %f388, %p82;
	cvt.rzi.s32.f32 	%r393, %f390;
	fma.rn.f32 	%f391, %f390, 0fBF000000, %f745;
	mul.f32 	%f392, %f391, %f391;
	fma.rn.f32 	%f393, %f392, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f394, %f392, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f395, %f393, %f392, 0fC0A55DF6;
	fma.rn.f32 	%f396, %f394, %f392, 0f4081E0CF;
	fma.rn.f32 	%f397, %f392, %f391, 0f00000000;
	fma.rn.f32 	%f398, %f396, %f392, 0fC09DE9E6;
	fma.rn.f32 	%f399, %f395, %f397, 0f00000000;
	fma.rn.f32 	%f400, %f398, %f392, 0f3F800000;
	fma.rn.f32 	%f401, %f391, 0f40490FDB, %f399;
	and.b32  	%r394, %r393, 1;
	setp.eq.b32 	%p83, %r394, 1;
	selp.f32 	%f402, %f400, %f401, %p83;
	selp.f32 	%f403, %f401, %f400, %p83;
	and.b32  	%r395, %r393, 2;
	setp.eq.s32 	%p84, %r395, 0;
	neg.f32 	%f404, %f402;
	selp.f32 	%f405, %f402, %f404, %p84;
	add.s32 	%r396, %r393, 1;
	and.b32  	%r397, %r396, 2;
	setp.eq.s32 	%p85, %r397, 0;
	mov.f32 	%f406, 0f00000000;
	sub.f32 	%f407, %f406, %f403;
	selp.f32 	%f408, %f403, %f407, %p85;
	cvt.rzi.f32.f32 	%f409, %f745;
	setp.eq.f32 	%p86, %f409, %f745;
	mul.f32 	%f410, %f745, 0f00000000;
	selp.f32 	%f748, %f410, %f405, %p86;
	abs.f32 	%f411, %f745;
	setp.gt.f32 	%p87, %f411, 0f4B800000;
	add.f32 	%f412, %f748, 0f3F800000;
	selp.f32 	%f747, %f412, %f408, %p87;
$L__BB0_49:                             // %L348
	fma.rn.f32 	%f241, %f239, %f233, 0f3F800000;
	fma.rn.f32 	%f242, %f232, 0f40490FDB, %f240;
	setp.eq.b32 	%p19, %r333, 1;
	or.pred  	%p2, %p45, %p67;
	mov.f32 	%f753, %f223;
	mov.f32 	%f754, %f223;
	@%p2 bra 	$L__BB0_65;
// %bb.50:                              // %L356
	mul.hi.u32 	%r399, %r3588, -1431655765;
	shr.u32 	%r400, %r399, 2;
	mul.lo.s32 	%r401, %r400, 6;
	sub.s32 	%r402, %r3588, %r401;
	cvt.rn.f32.s32 	%f414, %r402;
	div.approx.f32 	%f66, %f414, %f730;
	abs.f32 	%f751, %f66;
	setp.lt.f32 	%p90, %f751, 0f40000000;
	@%p90 bra 	$L__BB0_62;
// %bb.51:
	setp.gtu.f32 	%p91, %f751, 0f4B800000;
	@%p91 bra 	$L__BB0_58;
	bra.uni 	$L__BB0_52;
$L__BB0_58:
	mov.b32 	%r34, %f751;
	and.b32  	%r403, %r34, 8388607;
	or.b32  	%r3596, %r403, 1065353216;
	mov.b32 	%f750, %r3596;
	add.s32 	%r404, %r34, -1073741824;
	and.b32  	%r3597, %r404, -8388608;
	setp.eq.s32 	%p97, %r3597, 0;
	@%p97 bra 	$L__BB0_61;
// %bb.59:                              // %__nv_fmaf_rn.exit4.i.i.i1084.preheader
	mov.f32 	%f425, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f424,%f425;
	// end inline asm
$L__BB0_60:                             // %__nv_fmaf_rn.exit4.i.i.i1084
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r405, %r3597, 192937984;
	add.s32 	%r406, %r3596, %r405;
	mov.b32 	%f426, %r406;
	mul.f32 	%f427, %f424, %f426;
	sub.f32 	%f428, %f426, %f427;
	fma.rn.f32 	%f429, %f428, %f424, %f427;
	sub.f32 	%f430, %f426, %f429;
	fma.rz.f32 	%f431, %f430, %f424, %f429;
	cvt.rzi.f32.f32 	%f432, %f431;
	sub.f32 	%f750, %f426, %f432;
	sub.s32 	%r3597, %r3597, %r405;
	mov.b32 	%r3596, %f750;
	setp.ne.s32 	%p98, %r3597, 0;
	setp.ne.s32 	%p99, %r3596, 0;
	and.pred  	%p100, %p98, %p99;
	@%p100 bra 	$L__BB0_60;
$L__BB0_61:                             // %__internal_fmodf_slowpath_mod.exit.i.i1086
	setp.gt.u32 	%p101, %r34, 2139095039;
	selp.f32 	%f433, 0f7FFFFFFF, 0f4B800000, %p101;
	mul.f32 	%f434, %f750, 0f34000000;
	mul.f32 	%f751, %f433, %f434;
	bra.uni 	$L__BB0_62;
$L__BB0_52:                             // %__nv_fast_fdividef.exit.i.i.i1063
	mov.f32 	%f416, 0f40000000;
	div.approx.f32 	%f417, %f751, %f416;
	cvt.rzi.f32.f32 	%f749, %f417;
	fma.rn.f32 	%f69, %f749, 0fC0000000, %f751;
	mov.b32 	%r33, %f69;
	setp.lt.u32 	%p92, %r33, 1073741824;
	@%p92 bra 	$L__BB0_57;
// %bb.53:
	setp.lt.u32 	%p93, %r33, -2147483647;
	@%p93 bra 	$L__BB0_55;
// %bb.54:
	add.f32 	%f422, %f749, 0fBF800000;
	setp.lt.f32 	%p96, %f69, 0fC0000000;
	add.f32 	%f423, %f422, 0fBF800000;
	selp.f32 	%f749, %f423, %f422, %p96;
	bra.uni 	$L__BB0_57;
$L__BB0_55:
	add.f32 	%f749, %f749, 0f3F800000;
	setp.ltu.f32 	%p94, %f69, 0f40800000;
	@%p94 bra 	$L__BB0_57;
// %bb.56:                              // %__nv_fmaf_rn.exit.i.i.i1067
	add.f32 	%f418, %f749, 0f3F800000;
	fma.rn.f32 	%f420, %f416, 0fC0400000, %f69;
	setp.ge.f32 	%p95, %f420, 0f00000000;
	add.f32 	%f421, %f418, 0f3F800000;
	selp.f32 	%f749, %f421, %f418, %p95;
$L__BB0_57:                             // %__internal_fmodf_fastpath_quot.exit.i.i1070
	fma.rn.f32 	%f751, %f749, 0fC0000000, %f751;
$L__BB0_62:                             // %__internal_fmodf_kernel.exit.i1089
	abs.f32 	%f435, %f751;
	setp.gtu.f32 	%p102, %f435, 0f7F800000;
	@%p102 bra 	$L__BB0_64;
// %bb.63:
	mov.b32 	%r407, %f66;
	and.b32  	%r408, %r407, -2147483648;
	mov.b32 	%r409, %f751;
	or.b32  	%r410, %r408, %r409;
	mov.b32 	%f751, %r410;
$L__BB0_64:                             // %__nv_fmodf.exit1090
	add.f32 	%f436, %f751, %f751;
	mov.b32 	%r411, %f436;
	and.b32  	%r412, %r411, -2147483648;
	or.b32  	%r413, %r412, 1056964608;
	mov.b32 	%f437, %r413;
	add.f32 	%f438, %f436, %f437;
	cvt.rzi.f32.f32 	%f439, %f438;
	abs.f32 	%f440, %f436;
	setp.gt.f32 	%p103, %f440, 0f4B000000;
	selp.f32 	%f441, %f436, %f439, %p103;
	cvt.rzi.f32.f32 	%f442, %f436;
	setp.lt.f32 	%p104, %f440, 0f3F000000;
	selp.f32 	%f443, %f442, %f441, %p104;
	cvt.rzi.s32.f32 	%r414, %f443;
	fma.rn.f32 	%f444, %f443, 0fBF000000, %f751;
	mul.f32 	%f445, %f444, %f444;
	fma.rn.f32 	%f446, %f445, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f447, %f445, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f448, %f446, %f445, 0fC0A55DF6;
	fma.rn.f32 	%f449, %f447, %f445, 0f4081E0CF;
	fma.rn.f32 	%f450, %f445, %f444, 0f00000000;
	fma.rn.f32 	%f451, %f449, %f445, 0fC09DE9E6;
	fma.rn.f32 	%f452, %f448, %f450, 0f00000000;
	fma.rn.f32 	%f453, %f451, %f445, 0f3F800000;
	fma.rn.f32 	%f454, %f444, 0f40490FDB, %f452;
	and.b32  	%r415, %r414, 1;
	setp.eq.b32 	%p105, %r415, 1;
	selp.f32 	%f455, %f453, %f454, %p105;
	selp.f32 	%f456, %f454, %f453, %p105;
	and.b32  	%r416, %r414, 2;
	setp.eq.s32 	%p106, %r416, 0;
	neg.f32 	%f457, %f455;
	selp.f32 	%f458, %f455, %f457, %p106;
	add.s32 	%r417, %r414, 1;
	and.b32  	%r418, %r417, 2;
	setp.eq.s32 	%p107, %r418, 0;
	mov.f32 	%f459, 0f00000000;
	sub.f32 	%f460, %f459, %f456;
	selp.f32 	%f461, %f456, %f460, %p107;
	cvt.rzi.f32.f32 	%f462, %f751;
	setp.eq.f32 	%p108, %f462, %f751;
	mul.f32 	%f463, %f751, 0f00000000;
	selp.f32 	%f754, %f463, %f458, %p108;
	abs.f32 	%f464, %f751;
	setp.gt.f32 	%p109, %f464, 0f4B800000;
	add.f32 	%f465, %f754, 0f3F800000;
	selp.f32 	%f753, %f465, %f461, %p109;
$L__BB0_65:                             // %L390
	selp.f32 	%f243, %f241, %f242, %p19;
	and.b32  	%r334, %r332, 2;
	@%p4 bra 	$L__BB0_183;
// %bb.66:
	@%p245 bra 	$L__BB0_179;
	bra.uni 	$L__BB0_67;
$L__BB0_179:
	mov.b32 	%r238, %f785;
	and.b32  	%r431, %r238, 8388607;
	or.b32  	%r3690, %r431, 1065353216;
	mov.b32 	%f784, %r3690;
	add.s32 	%r432, %r238, -1073741824;
	and.b32  	%r3691, %r432, -8388608;
	setp.eq.s32 	%p117, %r3691, 0;
	@%p117 bra 	$L__BB0_182;
// %bb.180:                             // %__nv_fmaf_rn.exit4.i.i.i1115.preheader
	mov.f32 	%f475, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f474,%f475;
	// end inline asm
$L__BB0_181:                            // %__nv_fmaf_rn.exit4.i.i.i1115
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r433, %r3691, 192937984;
	add.s32 	%r434, %r3690, %r433;
	mov.b32 	%f476, %r434;
	mul.f32 	%f477, %f474, %f476;
	sub.f32 	%f478, %f476, %f477;
	fma.rn.f32 	%f479, %f478, %f474, %f477;
	sub.f32 	%f480, %f476, %f479;
	fma.rz.f32 	%f481, %f480, %f474, %f479;
	cvt.rzi.f32.f32 	%f482, %f481;
	sub.f32 	%f784, %f476, %f482;
	sub.s32 	%r3691, %r3691, %r433;
	mov.b32 	%r3690, %f784;
	setp.ne.s32 	%p118, %r3691, 0;
	setp.ne.s32 	%p119, %r3690, 0;
	and.pred  	%p120, %p118, %p119;
	@%p120 bra 	$L__BB0_181;
$L__BB0_182:                            // %__internal_fmodf_slowpath_mod.exit.i.i1117
	setp.gt.u32 	%p121, %r238, 2139095039;
	selp.f32 	%f483, 0f7FFFFFFF, 0f4B800000, %p121;
	mul.f32 	%f484, %f784, 0f34000000;
	mul.f32 	%f785, %f483, %f484;
	bra.uni 	$L__BB0_183;
$L__BB0_67:                             // %__nv_fast_fdividef.exit.i.i.i1094
	mov.f32 	%f466, 0f40000000;
	div.approx.f32 	%f467, %f785, %f466;
	cvt.rzi.f32.f32 	%f783, %f467;
	fma.rn.f32 	%f187, %f783, 0fC0000000, %f785;
	mov.b32 	%r237, %f187;
	setp.lt.u32 	%p112, %r237, 1073741824;
	@%p112 bra 	$L__BB0_178;
// %bb.68:
	setp.lt.u32 	%p113, %r237, -2147483647;
	@%p113 bra 	$L__BB0_176;
// %bb.69:
	add.f32 	%f472, %f783, 0fBF800000;
	setp.lt.f32 	%p116, %f187, 0fC0000000;
	add.f32 	%f473, %f472, 0fBF800000;
	selp.f32 	%f783, %f473, %f472, %p116;
	bra.uni 	$L__BB0_178;
$L__BB0_176:
	add.f32 	%f783, %f783, 0f3F800000;
	setp.ltu.f32 	%p114, %f187, 0f40800000;
	@%p114 bra 	$L__BB0_178;
// %bb.177:                             // %__nv_fmaf_rn.exit.i.i.i1098
	add.f32 	%f468, %f783, 0f3F800000;
	fma.rn.f32 	%f470, %f466, 0fC0400000, %f187;
	setp.ge.f32 	%p115, %f470, 0f00000000;
	add.f32 	%f471, %f468, 0f3F800000;
	selp.f32 	%f783, %f471, %f468, %p115;
$L__BB0_178:                            // %__internal_fmodf_fastpath_quot.exit.i.i1101
	fma.rn.f32 	%f785, %f783, 0fC0000000, %f785;
$L__BB0_183:                            // %__internal_fmodf_kernel.exit.i1120
	setp.eq.s32 	%p20, %r334, 0;
	neg.f32 	%f245, %f243;
	add.s32 	%r335, %r332, 1;
	cvt.rzi.f32.f32 	%f249, %f781;
	abs.f32 	%f485, %f785;
	setp.gtu.f32 	%p122, %f485, 0f7F800000;
	@%p122 bra 	$L__BB0_185;
// %bb.184:
	mov.b32 	%r435, %f785;
	or.b32  	%r436, %r231, %r435;
	mov.b32 	%f785, %r436;
$L__BB0_185:                            // %__nv_fmodf.exit1121
	selp.f32 	%f244, %f242, %f241, %p19;
	selp.f32 	%f246, %f243, %f245, %p20;
	and.b32  	%r336, %r335, 2;
	setp.eq.f32 	%p22, %f249, %f781;
	mul.f32 	%f250, %f781, 0f00000000;
	add.f32 	%f487, %f785, %f785;
	mov.b32 	%r443, %f487;
	and.b32  	%r444, %r443, -2147483648;
	or.b32  	%r445, %r444, 1056964608;
	mov.b32 	%f488, %r445;
	add.f32 	%f489, %f487, %f488;
	cvt.rzi.f32.f32 	%f490, %f489;
	abs.f32 	%f491, %f487;
	setp.gt.f32 	%p124, %f491, 0f4B000000;
	selp.f32 	%f492, %f487, %f490, %p124;
	cvt.rzi.f32.f32 	%f493, %f487;
	setp.lt.f32 	%p125, %f491, 0f3F000000;
	selp.f32 	%f494, %f493, %f492, %p125;
	cvt.rzi.s32.f32 	%r446, %f494;
	fma.rn.f32 	%f495, %f494, 0fBF000000, %f785;
	mul.f32 	%f496, %f495, %f495;
	fma.rn.f32 	%f497, %f496, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f498, %f496, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f499, %f497, %f496, 0fC0A55DF6;
	fma.rn.f32 	%f500, %f498, %f496, 0f4081E0CF;
	fma.rn.f32 	%f501, %f496, %f495, 0f00000000;
	fma.rn.f32 	%f502, %f500, %f496, 0fC09DE9E6;
	fma.rn.f32 	%f503, %f499, %f501, 0f00000000;
	fma.rn.f32 	%f504, %f502, %f496, 0f3F800000;
	fma.rn.f32 	%f505, %f495, 0f40490FDB, %f503;
	and.b32  	%r447, %r446, 1;
	setp.eq.b32 	%p126, %r447, 1;
	selp.f32 	%f506, %f504, %f505, %p126;
	selp.f32 	%f507, %f505, %f504, %p126;
	and.b32  	%r448, %r446, 2;
	setp.eq.s32 	%p127, %r448, 0;
	neg.f32 	%f508, %f506;
	selp.f32 	%f509, %f506, %f508, %p127;
	add.s32 	%r449, %r446, 1;
	and.b32  	%r450, %r449, 2;
	mov.f32 	%f777, 0f00000000;
	cvt.rzi.f32.f32 	%f512, %f785;
	setp.eq.f32 	%p129, %f512, %f785;
	mul.f32 	%f513, %f785, 0f00000000;
	mov.f32 	%f759, %f777;
	mov.f32 	%f760, %f777;
	@%p24 bra 	$L__BB0_85;
// %bb.70:                              // %L492
	cvt.u16.u32 	%rs15, %r3587;
	and.b16  	%rs16, %rs15, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 13;
	mul.lo.s16 	%rs19, %rs18, 48;
	sub.s16 	%rs20, %rs15, %rs19;
	and.b16  	%rs21, %rs20, 255;
	cvt.rn.f32.u16 	%f518, %rs21;
	div.approx.f32 	%f87, %f518, %f729;
	abs.f32 	%f757, %f87;
	setp.lt.f32 	%p131, %f757, 0f40000000;
	@%p131 bra 	$L__BB0_82;
// %bb.71:
	setp.gtu.f32 	%p132, %f757, 0f4B800000;
	@%p132 bra 	$L__BB0_78;
	bra.uni 	$L__BB0_72;
$L__BB0_78:
	mov.b32 	%r46, %f757;
	and.b32  	%r452, %r46, 8388607;
	or.b32  	%r3598, %r452, 1065353216;
	mov.b32 	%f756, %r3598;
	add.s32 	%r453, %r46, -1073741824;
	and.b32  	%r3599, %r453, -8388608;
	setp.eq.s32 	%p138, %r3599, 0;
	@%p138 bra 	$L__BB0_81;
// %bb.79:                              // %__nv_fmaf_rn.exit4.i.i.i1146.preheader
	mov.f32 	%f529, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f528,%f529;
	// end inline asm
$L__BB0_80:                             // %__nv_fmaf_rn.exit4.i.i.i1146
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r454, %r3599, 192937984;
	add.s32 	%r455, %r3598, %r454;
	mov.b32 	%f530, %r455;
	mul.f32 	%f531, %f528, %f530;
	sub.f32 	%f532, %f530, %f531;
	fma.rn.f32 	%f533, %f532, %f528, %f531;
	sub.f32 	%f534, %f530, %f533;
	fma.rz.f32 	%f535, %f534, %f528, %f533;
	cvt.rzi.f32.f32 	%f536, %f535;
	sub.f32 	%f756, %f530, %f536;
	sub.s32 	%r3599, %r3599, %r454;
	mov.b32 	%r3598, %f756;
	setp.ne.s32 	%p139, %r3599, 0;
	setp.ne.s32 	%p140, %r3598, 0;
	and.pred  	%p141, %p139, %p140;
	@%p141 bra 	$L__BB0_80;
$L__BB0_81:                             // %__internal_fmodf_slowpath_mod.exit.i.i1148
	setp.gt.u32 	%p142, %r46, 2139095039;
	selp.f32 	%f537, 0f7FFFFFFF, 0f4B800000, %p142;
	mul.f32 	%f538, %f756, 0f34000000;
	mul.f32 	%f757, %f537, %f538;
	bra.uni 	$L__BB0_82;
$L__BB0_72:                             // %__nv_fast_fdividef.exit.i.i.i1125
	mov.f32 	%f520, 0f40000000;
	div.approx.f32 	%f521, %f757, %f520;
	cvt.rzi.f32.f32 	%f755, %f521;
	fma.rn.f32 	%f90, %f755, 0fC0000000, %f757;
	mov.b32 	%r45, %f90;
	setp.lt.u32 	%p133, %r45, 1073741824;
	@%p133 bra 	$L__BB0_77;
// %bb.73:
	setp.lt.u32 	%p134, %r45, -2147483647;
	@%p134 bra 	$L__BB0_75;
// %bb.74:
	add.f32 	%f526, %f755, 0fBF800000;
	setp.lt.f32 	%p137, %f90, 0fC0000000;
	add.f32 	%f527, %f526, 0fBF800000;
	selp.f32 	%f755, %f527, %f526, %p137;
	bra.uni 	$L__BB0_77;
$L__BB0_75:
	add.f32 	%f755, %f755, 0f3F800000;
	setp.ltu.f32 	%p135, %f90, 0f40800000;
	@%p135 bra 	$L__BB0_77;
// %bb.76:                              // %__nv_fmaf_rn.exit.i.i.i1129
	add.f32 	%f522, %f755, 0f3F800000;
	fma.rn.f32 	%f524, %f520, 0fC0400000, %f90;
	setp.ge.f32 	%p136, %f524, 0f00000000;
	add.f32 	%f525, %f522, 0f3F800000;
	selp.f32 	%f755, %f525, %f522, %p136;
$L__BB0_77:                             // %__internal_fmodf_fastpath_quot.exit.i.i1132
	fma.rn.f32 	%f757, %f755, 0fC0000000, %f757;
$L__BB0_82:                             // %__internal_fmodf_kernel.exit.i1151
	abs.f32 	%f539, %f757;
	setp.gtu.f32 	%p143, %f539, 0f7F800000;
	@%p143 bra 	$L__BB0_84;
// %bb.83:
	mov.b32 	%r456, %f87;
	and.b32  	%r457, %r456, -2147483648;
	mov.b32 	%r458, %f757;
	or.b32  	%r459, %r457, %r458;
	mov.b32 	%f757, %r459;
$L__BB0_84:                             // %__nv_fmodf.exit1152
	add.f32 	%f540, %f757, %f757;
	mov.b32 	%r460, %f540;
	and.b32  	%r461, %r460, -2147483648;
	or.b32  	%r462, %r461, 1056964608;
	mov.b32 	%f541, %r462;
	add.f32 	%f542, %f540, %f541;
	cvt.rzi.f32.f32 	%f543, %f542;
	abs.f32 	%f544, %f540;
	setp.gt.f32 	%p144, %f544, 0f4B000000;
	selp.f32 	%f545, %f540, %f543, %p144;
	cvt.rzi.f32.f32 	%f546, %f540;
	setp.lt.f32 	%p145, %f544, 0f3F000000;
	selp.f32 	%f547, %f546, %f545, %p145;
	cvt.rzi.s32.f32 	%r463, %f547;
	fma.rn.f32 	%f548, %f547, 0fBF000000, %f757;
	mul.f32 	%f549, %f548, %f548;
	fma.rn.f32 	%f550, %f549, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f551, %f549, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f552, %f550, %f549, 0fC0A55DF6;
	fma.rn.f32 	%f553, %f551, %f549, 0f4081E0CF;
	fma.rn.f32 	%f554, %f549, %f548, 0f00000000;
	fma.rn.f32 	%f555, %f553, %f549, 0fC09DE9E6;
	fma.rn.f32 	%f556, %f552, %f554, 0f00000000;
	fma.rn.f32 	%f557, %f555, %f549, 0f3F800000;
	fma.rn.f32 	%f558, %f548, 0f40490FDB, %f556;
	and.b32  	%r464, %r463, 1;
	setp.eq.b32 	%p146, %r464, 1;
	selp.f32 	%f559, %f557, %f558, %p146;
	selp.f32 	%f560, %f558, %f557, %p146;
	and.b32  	%r465, %r463, 2;
	setp.eq.s32 	%p147, %r465, 0;
	neg.f32 	%f561, %f559;
	selp.f32 	%f562, %f559, %f561, %p147;
	add.s32 	%r466, %r463, 1;
	and.b32  	%r467, %r466, 2;
	setp.eq.s32 	%p148, %r467, 0;
	mov.f32 	%f563, 0f00000000;
	sub.f32 	%f564, %f563, %f560;
	selp.f32 	%f565, %f560, %f564, %p148;
	cvt.rzi.f32.f32 	%f566, %f757;
	setp.eq.f32 	%p149, %f566, %f757;
	mul.f32 	%f567, %f757, 0f00000000;
	selp.f32 	%f760, %f567, %f562, %p149;
	abs.f32 	%f568, %f757;
	setp.gt.f32 	%p150, %f568, 0f4B800000;
	add.f32 	%f569, %f760, 0f3F800000;
	selp.f32 	%f759, %f569, %f565, %p150;
$L__BB0_85:                             // %L526
	setp.eq.s32 	%p21, %r336, 0;
	sub.f32 	%f247, %f223, %f244;
	selp.f32 	%f251, %f250, %f246, %p22;
	abs.f32 	%f252, %f781;
	setp.eq.s32 	%p128, %r450, 0;
	sub.f32 	%f510, %f777, %f507;
	selp.f32 	%f514, %f513, %f509, %p129;
	abs.f32 	%f515, %f785;
	mov.f32 	%f765, %f777;
	mov.f32 	%f766, %f777;
	@%p45 bra 	$L__BB0_101;
// %bb.86:                              // %L530
	mul.hi.u32 	%r469, %r3588, -1431655765;
	shr.u32 	%r470, %r469, 5;
	mul.lo.s32 	%r471, %r470, 48;
	sub.s32 	%r472, %r3588, %r471;
	cvt.rn.f32.s32 	%f571, %r472;
	div.approx.f32 	%f108, %f571, %f729;
	abs.f32 	%f763, %f108;
	setp.lt.f32 	%p152, %f763, 0f40000000;
	@%p152 bra 	$L__BB0_98;
// %bb.87:
	setp.gtu.f32 	%p153, %f763, 0f4B800000;
	@%p153 bra 	$L__BB0_94;
	bra.uni 	$L__BB0_88;
$L__BB0_94:
	mov.b32 	%r54, %f763;
	and.b32  	%r473, %r54, 8388607;
	or.b32  	%r3600, %r473, 1065353216;
	mov.b32 	%f762, %r3600;
	add.s32 	%r474, %r54, -1073741824;
	and.b32  	%r3601, %r474, -8388608;
	setp.eq.s32 	%p159, %r3601, 0;
	@%p159 bra 	$L__BB0_97;
// %bb.95:                              // %__nv_fmaf_rn.exit4.i.i.i1177.preheader
	mov.f32 	%f582, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f581,%f582;
	// end inline asm
$L__BB0_96:                             // %__nv_fmaf_rn.exit4.i.i.i1177
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r475, %r3601, 192937984;
	add.s32 	%r476, %r3600, %r475;
	mov.b32 	%f583, %r476;
	mul.f32 	%f584, %f581, %f583;
	sub.f32 	%f585, %f583, %f584;
	fma.rn.f32 	%f586, %f585, %f581, %f584;
	sub.f32 	%f587, %f583, %f586;
	fma.rz.f32 	%f588, %f587, %f581, %f586;
	cvt.rzi.f32.f32 	%f589, %f588;
	sub.f32 	%f762, %f583, %f589;
	sub.s32 	%r3601, %r3601, %r475;
	mov.b32 	%r3600, %f762;
	setp.ne.s32 	%p160, %r3601, 0;
	setp.ne.s32 	%p161, %r3600, 0;
	and.pred  	%p162, %p160, %p161;
	@%p162 bra 	$L__BB0_96;
$L__BB0_97:                             // %__internal_fmodf_slowpath_mod.exit.i.i1179
	setp.gt.u32 	%p163, %r54, 2139095039;
	selp.f32 	%f590, 0f7FFFFFFF, 0f4B800000, %p163;
	mul.f32 	%f591, %f762, 0f34000000;
	mul.f32 	%f763, %f590, %f591;
	bra.uni 	$L__BB0_98;
$L__BB0_88:                             // %__nv_fast_fdividef.exit.i.i.i1156
	mov.f32 	%f573, 0f40000000;
	div.approx.f32 	%f574, %f763, %f573;
	cvt.rzi.f32.f32 	%f761, %f574;
	fma.rn.f32 	%f111, %f761, 0fC0000000, %f763;
	mov.b32 	%r53, %f111;
	setp.lt.u32 	%p154, %r53, 1073741824;
	@%p154 bra 	$L__BB0_93;
// %bb.89:
	setp.lt.u32 	%p155, %r53, -2147483647;
	@%p155 bra 	$L__BB0_91;
// %bb.90:
	add.f32 	%f579, %f761, 0fBF800000;
	setp.lt.f32 	%p158, %f111, 0fC0000000;
	add.f32 	%f580, %f579, 0fBF800000;
	selp.f32 	%f761, %f580, %f579, %p158;
	bra.uni 	$L__BB0_93;
$L__BB0_91:
	add.f32 	%f761, %f761, 0f3F800000;
	setp.ltu.f32 	%p156, %f111, 0f40800000;
	@%p156 bra 	$L__BB0_93;
// %bb.92:                              // %__nv_fmaf_rn.exit.i.i.i1160
	add.f32 	%f575, %f761, 0f3F800000;
	fma.rn.f32 	%f577, %f573, 0fC0400000, %f111;
	setp.ge.f32 	%p157, %f577, 0f00000000;
	add.f32 	%f578, %f575, 0f3F800000;
	selp.f32 	%f761, %f578, %f575, %p157;
$L__BB0_93:                             // %__internal_fmodf_fastpath_quot.exit.i.i1163
	fma.rn.f32 	%f763, %f761, 0fC0000000, %f763;
$L__BB0_98:                             // %__internal_fmodf_kernel.exit.i1182
	abs.f32 	%f592, %f763;
	setp.gtu.f32 	%p164, %f592, 0f7F800000;
	@%p164 bra 	$L__BB0_100;
// %bb.99:
	mov.b32 	%r477, %f108;
	and.b32  	%r478, %r477, -2147483648;
	mov.b32 	%r479, %f763;
	or.b32  	%r480, %r478, %r479;
	mov.b32 	%f763, %r480;
$L__BB0_100:                            // %__nv_fmodf.exit1183
	add.f32 	%f593, %f763, %f763;
	mov.b32 	%r481, %f593;
	and.b32  	%r482, %r481, -2147483648;
	or.b32  	%r483, %r482, 1056964608;
	mov.b32 	%f594, %r483;
	add.f32 	%f595, %f593, %f594;
	cvt.rzi.f32.f32 	%f596, %f595;
	abs.f32 	%f597, %f593;
	setp.gt.f32 	%p165, %f597, 0f4B000000;
	selp.f32 	%f598, %f593, %f596, %p165;
	cvt.rzi.f32.f32 	%f599, %f593;
	setp.lt.f32 	%p166, %f597, 0f3F000000;
	selp.f32 	%f600, %f599, %f598, %p166;
	cvt.rzi.s32.f32 	%r484, %f600;
	fma.rn.f32 	%f601, %f600, 0fBF000000, %f763;
	mul.f32 	%f602, %f601, %f601;
	fma.rn.f32 	%f603, %f602, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f604, %f602, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f603, %f602, 0fC0A55DF6;
	fma.rn.f32 	%f606, %f604, %f602, 0f4081E0CF;
	fma.rn.f32 	%f607, %f602, %f601, 0f00000000;
	fma.rn.f32 	%f608, %f606, %f602, 0fC09DE9E6;
	fma.rn.f32 	%f609, %f605, %f607, 0f00000000;
	fma.rn.f32 	%f610, %f608, %f602, 0f3F800000;
	fma.rn.f32 	%f611, %f601, 0f40490FDB, %f609;
	and.b32  	%r485, %r484, 1;
	setp.eq.b32 	%p167, %r485, 1;
	selp.f32 	%f612, %f610, %f611, %p167;
	selp.f32 	%f613, %f611, %f610, %p167;
	and.b32  	%r486, %r484, 2;
	setp.eq.s32 	%p168, %r486, 0;
	neg.f32 	%f614, %f612;
	selp.f32 	%f615, %f612, %f614, %p168;
	add.s32 	%r487, %r484, 1;
	and.b32  	%r488, %r487, 2;
	setp.eq.s32 	%p169, %r488, 0;
	mov.f32 	%f616, 0f00000000;
	sub.f32 	%f617, %f616, %f613;
	selp.f32 	%f618, %f613, %f617, %p169;
	cvt.rzi.f32.f32 	%f619, %f763;
	setp.eq.f32 	%p170, %f619, %f763;
	mul.f32 	%f620, %f763, 0f00000000;
	selp.f32 	%f766, %f620, %f615, %p170;
	abs.f32 	%f621, %f763;
	setp.gt.f32 	%p171, %f621, 0f4B800000;
	add.f32 	%f622, %f766, 0f3F800000;
	selp.f32 	%f765, %f622, %f618, %p171;
$L__BB0_101:                            // %L564
	selp.f32 	%f248, %f244, %f247, %p21;
	setp.gt.f32 	%p23, %f252, 0f4B800000;
	add.f32 	%f253, %f251, 0f3F800000;
	selp.f32 	%f511, %f507, %f510, %p128;
	setp.gt.f32 	%p130, %f515, 0f4B800000;
	add.f32 	%f516, %f514, 0f3F800000;
	mov.f32 	%f771, %f777;
	mov.f32 	%f772, %f777;
	@%p1 bra 	$L__BB0_117;
// %bb.102:                             // %L602
	cvt.u16.u32 	%rs22, %r3587;
	and.b16  	%rs23, %rs22, 255;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 10;
	mul.lo.s16 	%rs26, %rs25, 6;
	sub.s16 	%rs27, %rs22, %rs26;
	and.b16  	%rs28, %rs27, 255;
	cvt.rn.f32.u16 	%f624, %rs28;
	div.approx.f32 	%f129, %f624, %f730;
	abs.f32 	%f769, %f129;
	setp.lt.f32 	%p172, %f769, 0f40000000;
	@%p172 bra 	$L__BB0_114;
// %bb.103:
	setp.gtu.f32 	%p173, %f769, 0f4B800000;
	@%p173 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_104;
$L__BB0_110:
	mov.b32 	%r64, %f769;
	and.b32  	%r496, %r64, 8388607;
	or.b32  	%r3602, %r496, 1065353216;
	mov.b32 	%f768, %r3602;
	add.s32 	%r497, %r64, -1073741824;
	and.b32  	%r3603, %r497, -8388608;
	setp.eq.s32 	%p179, %r3603, 0;
	@%p179 bra 	$L__BB0_113;
// %bb.111:                             // %__nv_fmaf_rn.exit4.i.i.i1208.preheader
	mov.f32 	%f635, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f634,%f635;
	// end inline asm
$L__BB0_112:                            // %__nv_fmaf_rn.exit4.i.i.i1208
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r498, %r3603, 192937984;
	add.s32 	%r499, %r3602, %r498;
	mov.b32 	%f636, %r499;
	mul.f32 	%f637, %f634, %f636;
	sub.f32 	%f638, %f636, %f637;
	fma.rn.f32 	%f639, %f638, %f634, %f637;
	sub.f32 	%f640, %f636, %f639;
	fma.rz.f32 	%f641, %f640, %f634, %f639;
	cvt.rzi.f32.f32 	%f642, %f641;
	sub.f32 	%f768, %f636, %f642;
	sub.s32 	%r3603, %r3603, %r498;
	mov.b32 	%r3602, %f768;
	setp.ne.s32 	%p180, %r3603, 0;
	setp.ne.s32 	%p181, %r3602, 0;
	and.pred  	%p182, %p180, %p181;
	@%p182 bra 	$L__BB0_112;
$L__BB0_113:                            // %__internal_fmodf_slowpath_mod.exit.i.i1210
	setp.gt.u32 	%p183, %r64, 2139095039;
	selp.f32 	%f643, 0f7FFFFFFF, 0f4B800000, %p183;
	mul.f32 	%f644, %f768, 0f34000000;
	mul.f32 	%f769, %f643, %f644;
	bra.uni 	$L__BB0_114;
$L__BB0_104:                            // %__nv_fast_fdividef.exit.i.i.i1187
	mov.f32 	%f626, 0f40000000;
	div.approx.f32 	%f627, %f769, %f626;
	cvt.rzi.f32.f32 	%f767, %f627;
	fma.rn.f32 	%f132, %f767, 0fC0000000, %f769;
	mov.b32 	%r63, %f132;
	setp.lt.u32 	%p174, %r63, 1073741824;
	@%p174 bra 	$L__BB0_109;
// %bb.105:
	setp.lt.u32 	%p175, %r63, -2147483647;
	@%p175 bra 	$L__BB0_107;
// %bb.106:
	add.f32 	%f632, %f767, 0fBF800000;
	setp.lt.f32 	%p178, %f132, 0fC0000000;
	add.f32 	%f633, %f632, 0fBF800000;
	selp.f32 	%f767, %f633, %f632, %p178;
	bra.uni 	$L__BB0_109;
$L__BB0_107:
	add.f32 	%f767, %f767, 0f3F800000;
	setp.ltu.f32 	%p176, %f132, 0f40800000;
	@%p176 bra 	$L__BB0_109;
// %bb.108:                             // %__nv_fmaf_rn.exit.i.i.i1191
	add.f32 	%f628, %f767, 0f3F800000;
	fma.rn.f32 	%f630, %f626, 0fC0400000, %f132;
	setp.ge.f32 	%p177, %f630, 0f00000000;
	add.f32 	%f631, %f628, 0f3F800000;
	selp.f32 	%f767, %f631, %f628, %p177;
$L__BB0_109:                            // %__internal_fmodf_fastpath_quot.exit.i.i1194
	fma.rn.f32 	%f769, %f767, 0fC0000000, %f769;
$L__BB0_114:                            // %__internal_fmodf_kernel.exit.i1213
	abs.f32 	%f645, %f769;
	setp.gtu.f32 	%p184, %f645, 0f7F800000;
	@%p184 bra 	$L__BB0_116;
// %bb.115:
	mov.b32 	%r500, %f129;
	and.b32  	%r501, %r500, -2147483648;
	mov.b32 	%r502, %f769;
	or.b32  	%r503, %r501, %r502;
	mov.b32 	%f769, %r503;
$L__BB0_116:                            // %__nv_fmodf.exit1214
	add.f32 	%f646, %f769, %f769;
	mov.b32 	%r504, %f646;
	and.b32  	%r505, %r504, -2147483648;
	or.b32  	%r506, %r505, 1056964608;
	mov.b32 	%f647, %r506;
	add.f32 	%f648, %f646, %f647;
	cvt.rzi.f32.f32 	%f649, %f648;
	abs.f32 	%f650, %f646;
	setp.gt.f32 	%p185, %f650, 0f4B000000;
	selp.f32 	%f651, %f646, %f649, %p185;
	cvt.rzi.f32.f32 	%f652, %f646;
	setp.lt.f32 	%p186, %f650, 0f3F000000;
	selp.f32 	%f653, %f652, %f651, %p186;
	cvt.rzi.s32.f32 	%r507, %f653;
	fma.rn.f32 	%f654, %f653, 0fBF000000, %f769;
	mul.f32 	%f655, %f654, %f654;
	fma.rn.f32 	%f656, %f655, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f657, %f655, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f658, %f656, %f655, 0fC0A55DF6;
	fma.rn.f32 	%f659, %f657, %f655, 0f4081E0CF;
	fma.rn.f32 	%f660, %f655, %f654, 0f00000000;
	fma.rn.f32 	%f661, %f659, %f655, 0fC09DE9E6;
	fma.rn.f32 	%f662, %f658, %f660, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f655, 0f3F800000;
	fma.rn.f32 	%f664, %f654, 0f40490FDB, %f662;
	and.b32  	%r508, %r507, 1;
	setp.eq.b32 	%p187, %r508, 1;
	selp.f32 	%f665, %f663, %f664, %p187;
	selp.f32 	%f666, %f664, %f663, %p187;
	and.b32  	%r509, %r507, 2;
	setp.eq.s32 	%p188, %r509, 0;
	neg.f32 	%f667, %f665;
	selp.f32 	%f668, %f665, %f667, %p188;
	add.s32 	%r510, %r507, 1;
	and.b32  	%r511, %r510, 2;
	setp.eq.s32 	%p189, %r511, 0;
	mov.f32 	%f669, 0f00000000;
	sub.f32 	%f670, %f669, %f666;
	selp.f32 	%f671, %f666, %f670, %p189;
	cvt.rzi.f32.f32 	%f672, %f769;
	setp.eq.f32 	%p190, %f672, %f769;
	mul.f32 	%f673, %f769, 0f00000000;
	selp.f32 	%f772, %f673, %f668, %p190;
	abs.f32 	%f674, %f769;
	setp.gt.f32 	%p191, %f674, 0f4B800000;
	add.f32 	%f675, %f772, 0f3F800000;
	selp.f32 	%f771, %f675, %f671, %p191;
$L__BB0_117:                            // %L636
	selp.f32 	%f254, %f253, %f248, %p23;
	selp.f32 	%f517, %f516, %f511, %p130;
	mov.f32 	%f778, %f777;
	@%p2 bra 	$L__BB0_133;
// %bb.118:                             // %L644
	mul.hi.u32 	%r513, %r3588, -1431655765;
	shr.u32 	%r514, %r513, 2;
	mul.lo.s32 	%r515, %r514, 6;
	sub.s32 	%r516, %r3588, %r515;
	cvt.rn.f32.s32 	%f677, %r516;
	div.approx.f32 	%f150, %f677, %f730;
	abs.f32 	%f775, %f150;
	setp.lt.f32 	%p192, %f775, 0f40000000;
	@%p192 bra 	$L__BB0_130;
// %bb.119:
	setp.gtu.f32 	%p193, %f775, 0f4B800000;
	@%p193 bra 	$L__BB0_126;
	bra.uni 	$L__BB0_120;
$L__BB0_126:
	mov.b32 	%r72, %f775;
	and.b32  	%r517, %r72, 8388607;
	or.b32  	%r3604, %r517, 1065353216;
	mov.b32 	%f774, %r3604;
	add.s32 	%r518, %r72, -1073741824;
	and.b32  	%r3605, %r518, -8388608;
	setp.eq.s32 	%p199, %r3605, 0;
	@%p199 bra 	$L__BB0_129;
// %bb.127:                             // %__nv_fmaf_rn.exit4.i.i.i1239.preheader
	mov.f32 	%f688, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f687,%f688;
	// end inline asm
$L__BB0_128:                            // %__nv_fmaf_rn.exit4.i.i.i1239
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r519, %r3605, 192937984;
	add.s32 	%r520, %r3604, %r519;
	mov.b32 	%f689, %r520;
	mul.f32 	%f690, %f687, %f689;
	sub.f32 	%f691, %f689, %f690;
	fma.rn.f32 	%f692, %f691, %f687, %f690;
	sub.f32 	%f693, %f689, %f692;
	fma.rz.f32 	%f694, %f693, %f687, %f692;
	cvt.rzi.f32.f32 	%f695, %f694;
	sub.f32 	%f774, %f689, %f695;
	sub.s32 	%r3605, %r3605, %r519;
	mov.b32 	%r3604, %f774;
	setp.ne.s32 	%p200, %r3605, 0;
	setp.ne.s32 	%p201, %r3604, 0;
	and.pred  	%p202, %p200, %p201;
	@%p202 bra 	$L__BB0_128;
$L__BB0_129:                            // %__internal_fmodf_slowpath_mod.exit.i.i1241
	setp.gt.u32 	%p203, %r72, 2139095039;
	selp.f32 	%f696, 0f7FFFFFFF, 0f4B800000, %p203;
	mul.f32 	%f697, %f774, 0f34000000;
	mul.f32 	%f775, %f696, %f697;
	bra.uni 	$L__BB0_130;
$L__BB0_120:                            // %__nv_fast_fdividef.exit.i.i.i1218
	mov.f32 	%f679, 0f40000000;
	div.approx.f32 	%f680, %f775, %f679;
	cvt.rzi.f32.f32 	%f773, %f680;
	fma.rn.f32 	%f153, %f773, 0fC0000000, %f775;
	mov.b32 	%r71, %f153;
	setp.lt.u32 	%p194, %r71, 1073741824;
	@%p194 bra 	$L__BB0_125;
// %bb.121:
	setp.lt.u32 	%p195, %r71, -2147483647;
	@%p195 bra 	$L__BB0_123;
// %bb.122:
	add.f32 	%f685, %f773, 0fBF800000;
	setp.lt.f32 	%p198, %f153, 0fC0000000;
	add.f32 	%f686, %f685, 0fBF800000;
	selp.f32 	%f773, %f686, %f685, %p198;
	bra.uni 	$L__BB0_125;
$L__BB0_123:
	add.f32 	%f773, %f773, 0f3F800000;
	setp.ltu.f32 	%p196, %f153, 0f40800000;
	@%p196 bra 	$L__BB0_125;
// %bb.124:                             // %__nv_fmaf_rn.exit.i.i.i1222
	add.f32 	%f681, %f773, 0f3F800000;
	fma.rn.f32 	%f683, %f679, 0fC0400000, %f153;
	setp.ge.f32 	%p197, %f683, 0f00000000;
	add.f32 	%f684, %f681, 0f3F800000;
	selp.f32 	%f773, %f684, %f681, %p197;
$L__BB0_125:                            // %__internal_fmodf_fastpath_quot.exit.i.i1225
	fma.rn.f32 	%f775, %f773, 0fC0000000, %f775;
$L__BB0_130:                            // %__internal_fmodf_kernel.exit.i1244
	abs.f32 	%f698, %f775;
	setp.gtu.f32 	%p204, %f698, 0f7F800000;
	@%p204 bra 	$L__BB0_132;
// %bb.131:
	mov.b32 	%r521, %f150;
	and.b32  	%r522, %r521, -2147483648;
	mov.b32 	%r523, %f775;
	or.b32  	%r524, %r522, %r523;
	mov.b32 	%f775, %r524;
$L__BB0_132:                            // %__nv_fmodf.exit1245
	add.f32 	%f699, %f775, %f775;
	mov.b32 	%r525, %f699;
	and.b32  	%r526, %r525, -2147483648;
	or.b32  	%r527, %r526, 1056964608;
	mov.b32 	%f700, %r527;
	add.f32 	%f701, %f699, %f700;
	cvt.rzi.f32.f32 	%f702, %f701;
	abs.f32 	%f703, %f699;
	setp.gt.f32 	%p205, %f703, 0f4B000000;
	selp.f32 	%f704, %f699, %f702, %p205;
	cvt.rzi.f32.f32 	%f705, %f699;
	setp.lt.f32 	%p206, %f703, 0f3F000000;
	selp.f32 	%f706, %f705, %f704, %p206;
	cvt.rzi.s32.f32 	%r528, %f706;
	fma.rn.f32 	%f707, %f706, 0fBF000000, %f775;
	mul.f32 	%f708, %f707, %f707;
	fma.rn.f32 	%f709, %f708, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f710, %f708, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f711, %f709, %f708, 0fC0A55DF6;
	fma.rn.f32 	%f712, %f710, %f708, 0f4081E0CF;
	fma.rn.f32 	%f713, %f708, %f707, 0f00000000;
	fma.rn.f32 	%f714, %f712, %f708, 0fC09DE9E6;
	fma.rn.f32 	%f715, %f711, %f713, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f708, 0f3F800000;
	fma.rn.f32 	%f717, %f707, 0f40490FDB, %f715;
	and.b32  	%r529, %r528, 1;
	setp.eq.b32 	%p207, %r529, 1;
	selp.f32 	%f718, %f716, %f717, %p207;
	selp.f32 	%f719, %f717, %f716, %p207;
	and.b32  	%r530, %r528, 2;
	setp.eq.s32 	%p208, %r530, 0;
	neg.f32 	%f720, %f718;
	selp.f32 	%f721, %f718, %f720, %p208;
	add.s32 	%r531, %r528, 1;
	and.b32  	%r532, %r531, 2;
	setp.eq.s32 	%p209, %r532, 0;
	mov.f32 	%f722, 0f00000000;
	sub.f32 	%f723, %f722, %f719;
	selp.f32 	%f724, %f719, %f723, %p209;
	cvt.rzi.f32.f32 	%f725, %f775;
	setp.eq.f32 	%p210, %f725, %f775;
	mul.f32 	%f726, %f775, 0f00000000;
	selp.f32 	%f778, %f726, %f721, %p210;
	abs.f32 	%f727, %f775;
	setp.gt.f32 	%p211, %f727, 0f4B800000;
	add.f32 	%f728, %f778, 0f3F800000;
	selp.f32 	%f777, %f728, %f724, %p211;
$L__BB0_133:                            // %L678
	mov.b32 	%r325, %f254;
	mov.b32 	%r328, %f251;
	mov.b32 	%r420, %f747;
	mov.b32 	%r421, %f753;
	mov.b32 	%r426, %f748;
	mov.b32 	%r427, %f754;
	mov.b32 	%r439, %f517;
	mov.b32 	%r442, %f514;
	mov.b32 	%r534, %f771;
	mov.b32 	%r535, %f777;
	mov.b32 	%r540, %f772;
	mov.b32 	%r541, %f778;
	mov.u32 	%r3692, 999999999;
	cvt.u16.u32 	%rs249, %r2;
	@%p67 bra 	$L__BB0_135;
// %bb.134:                             // %L714
	ld.param.u64 	%rd1, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1];
	and.b16  	%rs30, %rs249, 255;
	mul.lo.s16 	%rs31, %rs30, 171;
	shr.u16 	%rs32, %rs31, 12;
	mul.lo.s16 	%rs33, %rs32, 24;
	sub.s16 	%rs34, %rs249, %rs33;
	cvt.u32.u16 	%r546, %rs34;
	and.b32  	%r547, %r546, 255;
	mad.lo.s32 	%r548, %r547, 24, %r3;
	cvt.u16.u32 	%rs35, %r548;
	mul.hi.u16 	%rs36, %rs35, -7281;
	shr.u16 	%rs37, %rs36, 9;
	mul.lo.s16 	%rs38, %rs37, 576;
	sub.s16 	%rs39, %rs35, %rs38;
	cvt.u32.u16 	%r549, %rs39;
	mul.wide.u32 	%rd44, %r549, 4;
	add.s64 	%rd45, %rd1, %rd44;
	ld.global.u32 	%r550, [%rd45];
	cvt.s32.s16 	%r551, %r550;
	shr.s32 	%r552, %r550, 16;
	mul.lo.s32 	%r553, %r552, 801;
	mad.lo.s32 	%r3692, %r551, 33, %r553;
$L__BB0_135:                            // %pass348
	xor.b32  	%r324, %r328, -2147483648;
	mov.b32 	%r376, %f735;
	mov.b32 	%r377, %f741;
	mov.b32 	%r379, %f736;
	mov.b32 	%r380, %f742;
	xor.b32  	%r423, %r426, -2147483648;
	xor.b32  	%r424, %r427, -2147483648;
	xor.b32  	%r438, %r442, -2147483648;
	mov.b32 	%r490, %f759;
	mov.b32 	%r491, %f765;
	mov.b32 	%r493, %f760;
	mov.b32 	%r494, %f766;
	xor.b32  	%r537, %r540, -2147483648;
	xor.b32  	%r538, %r541, -2147483648;
	and.b32  	%r554, %r2, 24;
	setp.ne.s32 	%p213, %r554, 24;
	cvt.u16.u32 	%rs250, %r6;
	@%p213 bra 	$L__BB0_136;
// %bb.186:                             // %pass348.L1048_crit_edge
	mul.lo.s16 	%rs47, %rs250, 171;
	shr.u16 	%rs48, %rs47, 10;
	mul.lo.s16 	%rs49, %rs48, 6;
	sub.s16 	%rs50, %rs250, %rs49;
	cvt.u32.u16 	%r567, %rs50;
	and.b32  	%r3606, %r567, 255;
	mov.u32 	%r3607, 0;
	mov.u32 	%r3608, %r3607;
	bra.uni 	$L__BB0_137;
$L__BB0_136:                            // %pass374
	ld.param.u64 	%rd2, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2];
	mul.lo.s32 	%r555, %r5, 144;
	mul.lo.s16 	%rs41, %rs250, 171;
	shr.u16 	%rs42, %rs41, 10;
	mul.lo.s16 	%rs43, %rs42, 6;
	sub.s16 	%rs44, %rs250, %rs43;
	cvt.u32.u16 	%r556, %rs44;
	and.b32  	%r3606, %r556, 255;
	and.b16  	%rs45, %rs44, 255;
	mul.wide.u16 	%r557, %rs45, 24;
	mul.lo.s32 	%r558, %r1, 1152;
	or.b32  	%r559, %r558, %r3;
	add.s32 	%r560, %r559, %r555;
	add.s32 	%r561, %r560, %r557;
	mul.wide.u32 	%rd46, %r561, 4;
	add.s64 	%rd47, %rd2, %rd46;
	ld.global.u32 	%r3607, [%rd47];
	or.b32  	%r562, %r3, 576;
	add.s32 	%r563, %r562, %r558;
	add.s32 	%r564, %r563, %r555;
	add.s32 	%r565, %r564, %r557;
	mul.wide.u32 	%rd48, %r565, 4;
	add.s64 	%rd49, %rd2, %rd48;
	ld.global.u32 	%r3608, [%rd49];
$L__BB0_137:                            // %L1048
	ld.param.u64 	%rd3, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3];
	ld.param.u64 	%rd4, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4];
	// begin inline asm
	cvt.rn.f16x2.f32 %r323, %r325, %r324;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r326, %r328, %r325;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r375, %r377, %r376;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r378, %r380, %r379;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r419, %r421, %r420;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r422, %r424, %r423;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r425, %r427, %r426;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r428, %r421, %r420;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r437, %r439, %r438;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r440, %r442, %r439;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r489, %r491, %r490;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r492, %r494, %r493;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r533, %r535, %r534;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r536, %r538, %r537;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r539, %r541, %r540;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r542, %r535, %r534;
	// end inline asm
	mov.u32 	%r3589, 0;
	shl.b32 	%r87, %r2, 2;
	and.b32  	%r88, %r87, 60;
	shl.b32 	%r569, %r2, 3;
	and.b32  	%r89, %r569, 128;
	shl.b32 	%r90, %r1, 8;
	or.b32  	%r570, %r90, %r89;
	or.b32  	%r91, %r570, 65;
	add.s32 	%r92, %r3, 24;
	and.b32  	%r571, %r234, 30;
	shr.u32 	%r572, %r2, 4;
	or.b32  	%r573, %r571, %r572;
	mul.lo.s32 	%r93, %r573, 257;
	or.b32  	%r574, %r572, %r234;
	or.b32  	%r575, %r574, 32;
	mul.lo.s32 	%r94, %r575, 257;
	and.b32  	%r576, %r4, 224;
	and.b16  	%rs52, %rs249, 255;
	mul.lo.s16 	%rs53, %rs52, 171;
	shr.u16 	%rs54, %rs53, 12;
	mul.lo.s16 	%rs55, %rs54, 24;
	sub.s16 	%rs56, %rs249, %rs55;
	cvt.u32.u16 	%r577, %rs56;
	and.b32  	%r95, %r577, 255;
	shr.u32 	%r578, %r3, 3;
	mad.lo.s32 	%r96, %r578, 257, %r576;
	shr.u32 	%r579, %r92, 3;
	mad.lo.s32 	%r97, %r579, 257, %r576;
	add.s32 	%r580, %r3, 48;
	shr.u32 	%r581, %r580, 3;
	mad.lo.s32 	%r98, %r581, 257, %r576;
	add.s32 	%r582, %r3, 72;
	shr.u32 	%r583, %r582, 3;
	mad.lo.s32 	%r99, %r583, 257, %r576;
	or.b32  	%r584, %r578, 12;
	mad.lo.s32 	%r100, %r584, 257, %r576;
	add.s32 	%r585, %r3, 120;
	shr.u32 	%r586, %r585, 3;
	mad.lo.s32 	%r101, %r586, 257, %r576;
	add.s32 	%r587, %r3, 144;
	shr.u32 	%r588, %r587, 3;
	mad.lo.s32 	%r102, %r588, 257, %r576;
	add.s32 	%r589, %r3, 168;
	shr.u32 	%r590, %r589, 3;
	mad.lo.s32 	%r103, %r590, 257, %r576;
	or.b32  	%r591, %r578, 24;
	mad.lo.s32 	%r104, %r591, 257, %r576;
	add.s32 	%r592, %r3, 216;
	shr.u32 	%r593, %r592, 3;
	mad.lo.s32 	%r105, %r593, 257, %r576;
	add.s32 	%r594, %r3, 240;
	shr.u32 	%r595, %r594, 3;
	mad.lo.s32 	%r106, %r595, 257, %r576;
	add.s32 	%r596, %r3, 264;
	shr.u32 	%r597, %r596, 3;
	mad.lo.s32 	%r107, %r597, 257, %r576;
	or.b32  	%r598, %r578, 36;
	mad.lo.s32 	%r108, %r598, 257, %r576;
	add.s32 	%r599, %r3, 312;
	shr.u32 	%r600, %r599, 3;
	mad.lo.s32 	%r109, %r600, 257, %r576;
	add.s32 	%r601, %r3, 336;
	shr.u32 	%r602, %r601, 3;
	mad.lo.s32 	%r110, %r602, 257, %r576;
	add.s32 	%r603, %r3, 360;
	shr.u32 	%r604, %r603, 3;
	mad.lo.s32 	%r111, %r604, 257, %r576;
	or.b32  	%r605, %r578, 48;
	mad.lo.s32 	%r112, %r605, 257, %r576;
	add.s32 	%r606, %r3, 408;
	shr.u32 	%r607, %r606, 3;
	mad.lo.s32 	%r113, %r607, 257, %r576;
	add.s32 	%r608, %r3, 432;
	shr.u32 	%r609, %r608, 3;
	mad.lo.s32 	%r114, %r609, 257, %r576;
	add.s32 	%r610, %r3, 456;
	shr.u32 	%r611, %r610, 3;
	mad.lo.s32 	%r115, %r611, 257, %r576;
	or.b32  	%r612, %r578, 60;
	mad.lo.s32 	%r116, %r612, 257, %r576;
	add.s32 	%r613, %r3, 504;
	bfe.u32 	%r614, %r613, 3, 6;
	mad.lo.s32 	%r117, %r614, 257, %r576;
	mul.lo.s32 	%r615, %r3, 33;
	mad.lo.s32 	%r616, %r5, 4806, %r615;
	mad.lo.s32 	%r617, %r3606, 801, %r616;
	bfe.s32 	%r618, %r2, 1, 1;
	and.b32  	%r619, %r618, 2056;
	bfe.s32 	%r620, %r2, 3, 1;
	and.b32  	%r621, %r620, 514;
	bfe.s32 	%r622, %r2, 2, 1;
	and.b32  	%r623, %r622, 1028;
	and.b32  	%r624, %r2, 1;
	neg.s32 	%r625, %r624;
	and.b32  	%r626, %r625, 4112;
	mul.lo.s32 	%r627, %r572, 257;
	add.s32 	%r628, %r627, %r3;
	add.s32 	%r629, %r628, %r619;
	add.s32 	%r630, %r629, %r621;
	add.s32 	%r631, %r630, %r623;
	add.s32 	%r632, %r631, %r626;
	mul.wide.u32 	%rd50, %r632, 4;
	mov.u64 	%rd51, shmem;
	add.s64 	%rd6, %rd51, %rd50;
	add.s32 	%r633, %r619, %r3;
	or.b32  	%r634, %r633, 8256;
	add.s32 	%r635, %r621, %r627;
	add.s32 	%r636, %r635, %r623;
	add.s32 	%r637, %r636, %r626;
	add.s32 	%r638, %r637, %r634;
	mul.wide.u32 	%rd52, %r638, 4;
	add.s64 	%rd7, %rd51, %rd52;
	or.b32  	%r639, %r3, 32;
	add.s32 	%r640, %r627, %r639;
	add.s32 	%r641, %r640, %r619;
	add.s32 	%r642, %r641, %r621;
	add.s32 	%r643, %r642, %r623;
	add.s32 	%r644, %r643, %r626;
	mul.wide.u32 	%rd53, %r644, 4;
	add.s64 	%rd8, %rd51, %rd53;
	or.b32  	%r645, %r3, 8288;
	add.s32 	%r646, %r645, %r627;
	add.s32 	%r647, %r646, %r619;
	add.s32 	%r648, %r647, %r621;
	add.s32 	%r649, %r648, %r623;
	add.s32 	%r650, %r649, %r626;
	mul.wide.u32 	%rd54, %r650, 4;
	add.s64 	%rd9, %rd51, %rd54;
	mul.lo.s32 	%r651, %r5, 6;
	bfe.s32 	%r652, %r3, 2, 1;
	and.b32  	%r653, %r652, 2056;
	and.b32  	%r654, %r3, 1;
	neg.s32 	%r655, %r654;
	and.b32  	%r656, %r655, 8256;
	shr.u32 	%r657, %r3, 4;
	mul.lo.s32 	%r658, %r657, 514;
	bfe.s32 	%r659, %r3, 3, 1;
	and.b32  	%r660, %r3, 8;
	setp.eq.s32 	%p214, %r660, 0;
	and.b32  	%r661, %r659, 1028;
	bfe.s32 	%r662, %r3, 1, 1;
	and.b32  	%r663, %r662, 4112;
	add.s32 	%r664, %r658, %r651;
	add.s32 	%r665, %r664, %r653;
	add.s32 	%r666, %r665, %r656;
	add.s32 	%r667, %r666, %r661;
	add.s32 	%r668, %r667, %r663;
	add.s32 	%r669, %r668, %r3606;
	mul.wide.u32 	%rd55, %r669, 4;
	add.s64 	%rd10, %rd51, %rd55;
	bfe.s32 	%r670, %r92, 4, 1;
	and.b32  	%r671, %r670, 514;
	selp.b32 	%r672, 1028, 0, %p214;
	shr.u32 	%r673, %r92, 5;
	mul.lo.s32 	%r674, %r673, 257;
	add.s32 	%r675, %r653, %r651;
	or.b32  	%r676, %r675, %r656;
	add.s32 	%r677, %r676, %r672;
	add.s32 	%r678, %r677, %r663;
	add.s32 	%r679, %r678, %r674;
	add.s32 	%r680, %r679, %r3606;
	add.s32 	%r681, %r680, %r671;
	mul.wide.u32 	%rd56, %r681, 4;
	add.s64 	%rd11, %rd51, %rd56;
	add.s32 	%r682, %r676, 32;
	add.s32 	%r683, %r682, %r658;
	add.s32 	%r684, %r683, %r661;
	add.s32 	%r685, %r684, %r663;
	add.s32 	%r686, %r685, %r3606;
	mul.wide.u32 	%rd57, %r686, 4;
	add.s64 	%rd12, %rd51, %rd57;
	add.s32 	%r687, %r682, %r672;
	add.s32 	%r688, %r687, %r663;
	add.s32 	%r689, %r688, %r674;
	add.s32 	%r690, %r689, %r3606;
	add.s32 	%r691, %r690, %r671;
	mul.wide.u32 	%rd58, %r691, 4;
	add.s64 	%rd13, %rd51, %rd58;
	mul.lo.s32 	%r692, %r1, 58752;
	mad.lo.s32 	%r693, %r3, 24, %r692;
	add.s32 	%r118, %r693, %r95;
	cvt.u16.u32 	%rs57, %r92;
	and.b16  	%rs58, %rs57, 255;
	mul.lo.s16 	%rs59, %rs58, 171;
	shr.u16 	%rs60, %rs59, 13;
	mul.lo.s16 	%rs61, %rs60, 48;
	sub.s16 	%rs62, %rs57, %rs61;
	cvt.u32.u16 	%r694, %rs62;
	and.b32  	%r695, %r694, 255;
	or.b32  	%r696, %r692, %r95;
	mad.lo.s32 	%r119, %r695, 24, %r696;
	mul.wide.u32 	%rd59, %r617, 4;
	add.s64 	%rd14, %rd51, %rd59;
	add.s32 	%r697, %r632, 64;
	mul.wide.u32 	%rd60, %r697, 4;
	add.s64 	%rd15, %rd51, %rd60;
	add.s32 	%r698, %r644, 64;
	mul.wide.u32 	%rd61, %r698, 4;
	add.s64 	%rd16, %rd51, %rd61;
	add.s32 	%r699, %r650, 64;
	mul.wide.u32 	%rd62, %r699, 4;
	add.s64 	%rd17, %rd51, %rd62;
	add.s32 	%r700, %r632, 128;
	mul.wide.u32 	%rd63, %r700, 4;
	add.s64 	%rd18, %rd51, %rd63;
	add.s32 	%r701, %r644, 128;
	mul.wide.u32 	%rd64, %r701, 4;
	add.s64 	%rd19, %rd51, %rd64;
	add.s32 	%r702, %r650, 128;
	mul.wide.u32 	%rd65, %r702, 4;
	add.s64 	%rd20, %rd51, %rd65;
	add.s32 	%r703, %r632, 192;
	mul.wide.u32 	%rd66, %r703, 4;
	add.s64 	%rd21, %rd51, %rd66;
	add.s32 	%r704, %r644, 192;
	mul.wide.u32 	%rd67, %r704, 4;
	add.s64 	%rd22, %rd51, %rd67;
	add.s32 	%r705, %r650, 192;
	mul.wide.u32 	%rd68, %r705, 4;
	add.s64 	%rd23, %rd51, %rd68;
	add.s32 	%r706, %r669, 64;
	mul.wide.u32 	%rd69, %r706, 4;
	add.s64 	%rd24, %rd51, %rd69;
	add.s32 	%r707, %r681, 64;
	mul.wide.u32 	%rd70, %r707, 4;
	add.s64 	%rd25, %rd51, %rd70;
	add.s32 	%r708, %r686, 64;
	mul.wide.u32 	%rd71, %r708, 4;
	add.s64 	%rd26, %rd51, %rd71;
	add.s32 	%r709, %r691, 64;
	mul.wide.u32 	%rd72, %r709, 4;
	add.s64 	%rd27, %rd51, %rd72;
	add.s32 	%r710, %r669, 128;
	mul.wide.u32 	%rd73, %r710, 4;
	add.s64 	%rd28, %rd51, %rd73;
	add.s32 	%r711, %r681, 128;
	mul.wide.u32 	%rd74, %r711, 4;
	add.s64 	%rd29, %rd51, %rd74;
	add.s32 	%r712, %r686, 128;
	mul.wide.u32 	%rd75, %r712, 4;
	add.s64 	%rd30, %rd51, %rd75;
	add.s32 	%r713, %r691, 128;
	mul.wide.u32 	%rd76, %r713, 4;
	add.s64 	%rd31, %rd51, %rd76;
	add.s32 	%r714, %r669, 192;
	mul.wide.u32 	%rd77, %r714, 4;
	add.s64 	%rd32, %rd51, %rd77;
	add.s32 	%r715, %r681, 192;
	mul.wide.u32 	%rd78, %r715, 4;
	add.s64 	%rd33, %rd51, %rd78;
	add.s32 	%r716, %r686, 192;
	mul.wide.u32 	%rd79, %r716, 4;
	add.s64 	%rd34, %rd51, %rd79;
	add.s32 	%r717, %r691, 192;
	mul.wide.u32 	%rd80, %r717, 4;
	add.s64 	%rd35, %rd51, %rd80;
	setp.gt.u32 	%p215, %r3, 7;
	setp.lt.u32 	%p216, %r2, 16;
	setp.lt.u32 	%p217, %r2, 24;
	mov.u32 	%r3609, %r3589;
	mov.u32 	%r3639, %r3589;
	mov.u32 	%r3640, %r3589;
	mov.u32 	%r3641, %r3589;
	mov.u32 	%r3642, %r3589;
	bra.uni 	$L__BB0_138;
$L__BB0_159:                            // %L30345
                                        //   in Loop: Header=BB0_138 Depth=1
	add.s32 	%r222, %r3609, 48;
	setp.ne.s32 	%p244, %r3609, 2016;
	mov.u32 	%r3609, %r222;
	@%p244 bra 	$L__BB0_138;
	bra.uni 	$L__BB0_160;
$L__BB0_138:                            // %L1051
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_140 Depth 2
                                        //     Child Loop BB0_150 Depth 2
	mul.hi.u32 	%r911, %r3609, -1431655765;
	shr.u32 	%r912, %r911, 5;
	mul.lo.s32 	%r125, %r912, 48;
	add.s32 	%r913, %r125, %r3;
	cvt.u16.u32 	%rs63, %r913;
	mul.hi.s16 	%rs64, %rs63, 16257;
	shr.u16 	%rs65, %rs64, 15;
	shr.s16 	%rs66, %rs64, 9;
	add.s16 	%rs67, %rs66, %rs65;
	mul.lo.s16 	%rs68, %rs67, 2064;
	sub.s16 	%rs69, %rs63, %rs68;
	cvt.u32.u16 	%r914, %rs69;
	shl.b32 	%r915, %r914, 16;
	or.b32  	%r916, %r915, %r88;
	or.b32  	%r917, %r916, %r89;
	or.b32  	%r918, %r917, %r90;
	mul.wide.s32 	%rd81, %r918, 4;
	add.s64 	%rd82, %rd3, %rd81;
	ld.global.v4.u32 	{%r919, %r920, %r921, %r922}, [%rd82];
	or.b32  	%r923, %r915, %r87;
	or.b32  	%r924, %r91, %r923;
	add.s32 	%r925, %r924, -1;
	mul.wide.s32 	%rd83, %r925, 4;
	add.s64 	%rd84, %rd3, %rd83;
	ld.global.v4.u32 	{%r926, %r927, %r928, %r929}, [%rd84];
	add.s32 	%r930, %r92, %r125;
	cvt.u16.u32 	%rs70, %r930;
	mul.hi.s16 	%rs71, %rs70, 16257;
	shr.u16 	%rs72, %rs71, 15;
	shr.s16 	%rs73, %rs71, 9;
	add.s16 	%rs74, %rs73, %rs72;
	mul.lo.s16 	%rs75, %rs74, 2064;
	sub.s16 	%rs76, %rs70, %rs75;
	cvt.u32.u16 	%r931, %rs76;
	shl.b32 	%r932, %r931, 16;
	or.b32  	%r933, %r932, %r88;
	or.b32  	%r934, %r933, %r89;
	or.b32  	%r935, %r934, %r90;
	mul.wide.s32 	%rd85, %r935, 4;
	add.s64 	%rd86, %rd3, %rd85;
	ld.global.v4.u32 	{%r936, %r937, %r938, %r939}, [%rd86];
	or.b32  	%r940, %r932, %r87;
	or.b32  	%r941, %r91, %r940;
	add.s32 	%r942, %r941, -1;
	mul.wide.s32 	%rd87, %r942, 4;
	add.s64 	%rd88, %rd3, %rd87;
	ld.global.v4.u32 	{%r943, %r944, %r945, %r946}, [%rd88];
	selp.b32 	%r947, %r921, %r919, %p216;
	shfl.sync.bfly.b32	%r948, %r947, 16, 31, -1;
	selp.b32 	%r720, %r919, %r948, %p216;
	selp.b32 	%r725, %r948, %r921, %p216;
	selp.b32 	%r949, %r922, %r920, %p216;
	shfl.sync.bfly.b32	%r950, %r949, 16, 31, -1;
	selp.b32 	%r728, %r920, %r950, %p216;
	selp.b32 	%r733, %r950, %r922, %p216;
	selp.b32 	%r951, %r928, %r926, %p216;
	shfl.sync.bfly.b32	%r952, %r951, 16, 31, -1;
	selp.b32 	%r736, %r926, %r952, %p216;
	selp.b32 	%r741, %r952, %r928, %p216;
	selp.b32 	%r953, %r929, %r927, %p216;
	shfl.sync.bfly.b32	%r954, %r953, 16, 31, -1;
	selp.b32 	%r744, %r927, %r954, %p216;
	selp.b32 	%r749, %r954, %r929, %p216;
	selp.b32 	%r955, %r938, %r936, %p216;
	shfl.sync.bfly.b32	%r956, %r955, 16, 31, -1;
	selp.b32 	%r752, %r936, %r956, %p216;
	selp.b32 	%r757, %r956, %r938, %p216;
	selp.b32 	%r957, %r939, %r937, %p216;
	shfl.sync.bfly.b32	%r958, %r957, 16, 31, -1;
	selp.b32 	%r760, %r937, %r958, %p216;
	selp.b32 	%r765, %r958, %r939, %p216;
	selp.b32 	%r959, %r945, %r943, %p216;
	shfl.sync.bfly.b32	%r960, %r959, 16, 31, -1;
	selp.b32 	%r768, %r943, %r960, %p216;
	selp.b32 	%r773, %r960, %r945, %p216;
	selp.b32 	%r961, %r946, %r944, %p216;
	shfl.sync.bfly.b32	%r962, %r961, 16, 31, -1;
	selp.b32 	%r776, %r944, %r962, %p216;
	selp.b32 	%r781, %r962, %r946, %p216;
	shl.b32 	%r721, %r725, 4;
	mov.u32 	%r719, 252645135;
	// begin inline asm
	lop3.b32 %r783, %r719, %r720, %r721, 202;
	// end inline asm
	shr.u32 	%r724, %r720, 4;
	// begin inline asm
	lop3.b32 %r799, %r719, %r724, %r725, 202;
	// end inline asm
	shl.b32 	%r729, %r733, 4;
	// begin inline asm
	lop3.b32 %r791, %r719, %r728, %r729, 202;
	// end inline asm
	shr.u32 	%r732, %r728, 4;
	// begin inline asm
	lop3.b32 %r807, %r719, %r732, %r733, 202;
	// end inline asm
	shl.b32 	%r737, %r741, 4;
	// begin inline asm
	lop3.b32 %r815, %r719, %r736, %r737, 202;
	// end inline asm
	shr.u32 	%r740, %r736, 4;
	// begin inline asm
	lop3.b32 %r831, %r719, %r740, %r741, 202;
	// end inline asm
	shl.b32 	%r745, %r749, 4;
	// begin inline asm
	lop3.b32 %r823, %r719, %r744, %r745, 202;
	// end inline asm
	shr.u32 	%r748, %r744, 4;
	// begin inline asm
	lop3.b32 %r839, %r719, %r748, %r749, 202;
	// end inline asm
	shl.b32 	%r753, %r757, 4;
	// begin inline asm
	lop3.b32 %r784, %r719, %r752, %r753, 202;
	// end inline asm
	shr.u32 	%r756, %r752, 4;
	// begin inline asm
	lop3.b32 %r800, %r719, %r756, %r757, 202;
	// end inline asm
	shl.b32 	%r761, %r765, 4;
	// begin inline asm
	lop3.b32 %r792, %r719, %r760, %r761, 202;
	// end inline asm
	shr.u32 	%r764, %r760, 4;
	// begin inline asm
	lop3.b32 %r808, %r719, %r764, %r765, 202;
	// end inline asm
	shl.b32 	%r769, %r773, 4;
	// begin inline asm
	lop3.b32 %r816, %r719, %r768, %r769, 202;
	// end inline asm
	shr.u32 	%r772, %r768, 4;
	// begin inline asm
	lop3.b32 %r832, %r719, %r772, %r773, 202;
	// end inline asm
	shl.b32 	%r777, %r781, 4;
	// begin inline asm
	lop3.b32 %r824, %r719, %r776, %r777, 202;
	// end inline asm
	shr.u32 	%r780, %r776, 4;
	// begin inline asm
	lop3.b32 %r840, %r719, %r780, %r781, 202;
	// end inline asm
	mov.u32 	%r785, 25152;
	// begin inline asm
	prmt.b32 %r847, %r783, %r784, %r785;
	// end inline asm
	mov.u32 	%r789, 29521;
	// begin inline asm
	prmt.b32 %r879, %r783, %r784, %r789;
	// end inline asm
	// begin inline asm
	prmt.b32 %r855, %r791, %r792, %r785;
	// end inline asm
	// begin inline asm
	prmt.b32 %r887, %r791, %r792, %r789;
	// end inline asm
	// begin inline asm
	prmt.b32 %r848, %r799, %r800, %r785;
	// end inline asm
	// begin inline asm
	prmt.b32 %r880, %r799, %r800, %r789;
	// end inline asm
	// begin inline asm
	prmt.b32 %r856, %r807, %r808, %r785;
	// end inline asm
	// begin inline asm
	prmt.b32 %r888, %r807, %r808, %r789;
	// end inline asm
	// begin inline asm
	prmt.b32 %r863, %r815, %r816, %r785;
	// end inline asm
	// begin inline asm
	prmt.b32 %r895, %r815, %r816, %r789;
	// end inline asm
	// begin inline asm
	prmt.b32 %r871, %r823, %r824, %r785;
	// end inline asm
	// begin inline asm
	prmt.b32 %r903, %r823, %r824, %r789;
	// end inline asm
	// begin inline asm
	prmt.b32 %r864, %r831, %r832, %r785;
	// end inline asm
	// begin inline asm
	prmt.b32 %r896, %r831, %r832, %r789;
	// end inline asm
	// begin inline asm
	prmt.b32 %r872, %r839, %r840, %r785;
	// end inline asm
	// begin inline asm
	prmt.b32 %r904, %r839, %r840, %r789;
	// end inline asm
	mov.u32 	%r905, 21520;
	// begin inline asm
	prmt.b32 %r846, %r847, %r848, %r905;
	// end inline asm
	mov.u32 	%r909, 30258;
	// begin inline asm
	prmt.b32 %r850, %r847, %r848, %r909;
	// end inline asm
	// begin inline asm
	prmt.b32 %r854, %r855, %r856, %r905;
	// end inline asm
	// begin inline asm
	prmt.b32 %r858, %r855, %r856, %r909;
	// end inline asm
	// begin inline asm
	prmt.b32 %r862, %r863, %r864, %r905;
	// end inline asm
	// begin inline asm
	prmt.b32 %r866, %r863, %r864, %r909;
	// end inline asm
	// begin inline asm
	prmt.b32 %r870, %r871, %r872, %r905;
	// end inline asm
	// begin inline asm
	prmt.b32 %r874, %r871, %r872, %r909;
	// end inline asm
	// begin inline asm
	prmt.b32 %r878, %r879, %r880, %r905;
	// end inline asm
	// begin inline asm
	prmt.b32 %r882, %r879, %r880, %r909;
	// end inline asm
	// begin inline asm
	prmt.b32 %r886, %r887, %r888, %r905;
	// end inline asm
	// begin inline asm
	prmt.b32 %r890, %r887, %r888, %r909;
	// end inline asm
	// begin inline asm
	prmt.b32 %r894, %r895, %r896, %r905;
	// end inline asm
	// begin inline asm
	prmt.b32 %r898, %r895, %r896, %r909;
	// end inline asm
	// begin inline asm
	prmt.b32 %r902, %r903, %r904, %r905;
	// end inline asm
	// begin inline asm
	prmt.b32 %r906, %r903, %r904, %r909;
	// end inline asm
	mul.hi.s16 	%rs77, %rs63, 10923;
	shr.u16 	%rs78, %rs77, 15;
	shr.s16 	%rs79, %rs77, 2;
	add.s16 	%rs80, %rs79, %rs78;
	mul.lo.s16 	%rs81, %rs80, 24;
	sub.s16 	%rs82, %rs63, %rs81;
	cvt.s32.s16 	%r963, %rs82;
	add.s32 	%r964, %r93, %r963;
	mul.wide.s32 	%rd89, %r964, 4;
	add.s64 	%rd91, %rd51, %rd89;
	st.shared.u32 	[%rd91], %r846;
	add.s32 	%r965, %r964, 128;
	mul.wide.u32 	%rd92, %r965, 4;
	add.s64 	%rd93, %rd51, %rd92;
	st.shared.u32 	[%rd93], %r854;
	add.s32 	%r966, %r964, 64;
	mul.wide.u32 	%rd94, %r966, 4;
	add.s64 	%rd95, %rd51, %rd94;
	st.shared.u32 	[%rd95], %r850;
	add.s32 	%r967, %r964, 192;
	mul.wide.u32 	%rd96, %r967, 4;
	add.s64 	%rd97, %rd51, %rd96;
	st.shared.u32 	[%rd97], %r858;
	add.s32 	%r968, %r94, %r963;
	mul.wide.u32 	%rd98, %r968, 4;
	add.s64 	%rd99, %rd51, %rd98;
	st.shared.u32 	[%rd99], %r862;
	add.s32 	%r969, %r968, 128;
	mul.wide.u32 	%rd100, %r969, 4;
	add.s64 	%rd101, %rd51, %rd100;
	st.shared.u32 	[%rd101], %r870;
	add.s32 	%r970, %r968, 64;
	mul.wide.u32 	%rd102, %r970, 4;
	add.s64 	%rd103, %rd51, %rd102;
	st.shared.u32 	[%rd103], %r866;
	add.s32 	%r971, %r968, 192;
	mul.wide.u32 	%rd104, %r971, 4;
	add.s64 	%rd105, %rd51, %rd104;
	st.shared.u32 	[%rd105], %r874;
	add.s32 	%r972, %r964, 32;
	mul.wide.u32 	%rd106, %r972, 4;
	add.s64 	%rd107, %rd51, %rd106;
	st.shared.u32 	[%rd107], %r878;
	add.s32 	%r973, %r964, 160;
	mul.wide.u32 	%rd108, %r973, 4;
	add.s64 	%rd109, %rd51, %rd108;
	st.shared.u32 	[%rd109], %r886;
	add.s32 	%r974, %r964, 96;
	mul.wide.u32 	%rd110, %r974, 4;
	add.s64 	%rd111, %rd51, %rd110;
	st.shared.u32 	[%rd111], %r882;
	add.s32 	%r975, %r964, 224;
	mul.wide.u32 	%rd112, %r975, 4;
	add.s64 	%rd113, %rd51, %rd112;
	st.shared.u32 	[%rd113], %r890;
	add.s32 	%r976, %r968, 32;
	mul.wide.u32 	%rd114, %r976, 4;
	add.s64 	%rd115, %rd51, %rd114;
	st.shared.u32 	[%rd115], %r894;
	add.s32 	%r977, %r968, 160;
	mul.wide.u32 	%rd116, %r977, 4;
	add.s64 	%rd117, %rd51, %rd116;
	st.shared.u32 	[%rd117], %r902;
	add.s32 	%r978, %r968, 96;
	mul.wide.u32 	%rd118, %r978, 4;
	add.s64 	%rd119, %rd51, %rd118;
	st.shared.u32 	[%rd119], %r898;
	add.s32 	%r979, %r968, 224;
	mul.wide.u32 	%rd120, %r979, 4;
	add.s64 	%rd121, %rd51, %rd120;
	st.shared.u32 	[%rd121], %r906;
	bar.sync 	0;
	add.s32 	%r980, %r125, %r95;
	cvt.u16.u32 	%rs83, %r980;
	mul.hi.s16 	%rs84, %rs83, 10923;
	shr.u16 	%rs85, %rs84, 15;
	shr.s16 	%rs86, %rs84, 2;
	add.s16 	%rs87, %rs86, %rs85;
	mul.lo.s16 	%rs88, %rs87, 24;
	sub.s16 	%rs89, %rs83, %rs88;
	cvt.s32.s16 	%r981, %rs89;
	add.s32 	%r982, %r96, %r981;
	mul.wide.s32 	%rd122, %r982, 4;
	add.s64 	%rd123, %rd51, %rd122;
	ld.shared.u32 	%r983, [%rd123];
	add.s32 	%r984, %r97, %r981;
	mul.wide.u32 	%rd124, %r984, 4;
	add.s64 	%rd125, %rd51, %rd124;
	ld.shared.u32 	%r985, [%rd125];
	add.s32 	%r986, %r98, %r981;
	mul.wide.u32 	%rd126, %r986, 4;
	add.s64 	%rd127, %rd51, %rd126;
	ld.shared.u32 	%r987, [%rd127];
	add.s32 	%r988, %r99, %r981;
	mul.wide.u32 	%rd128, %r988, 4;
	add.s64 	%rd129, %rd51, %rd128;
	ld.shared.u32 	%r989, [%rd129];
	add.s32 	%r990, %r100, %r981;
	mul.wide.u32 	%rd130, %r990, 4;
	add.s64 	%rd131, %rd51, %rd130;
	ld.shared.u32 	%r991, [%rd131];
	add.s32 	%r992, %r101, %r981;
	mul.wide.u32 	%rd132, %r992, 4;
	add.s64 	%rd133, %rd51, %rd132;
	ld.shared.u32 	%r993, [%rd133];
	add.s32 	%r994, %r102, %r981;
	mul.wide.u32 	%rd134, %r994, 4;
	add.s64 	%rd135, %rd51, %rd134;
	ld.shared.u32 	%r995, [%rd135];
	add.s32 	%r996, %r103, %r981;
	mul.wide.u32 	%rd136, %r996, 4;
	add.s64 	%rd137, %rd51, %rd136;
	ld.shared.u32 	%r997, [%rd137];
	add.s32 	%r998, %r104, %r981;
	mul.wide.u32 	%rd138, %r998, 4;
	add.s64 	%rd139, %rd51, %rd138;
	ld.shared.u32 	%r999, [%rd139];
	add.s32 	%r1000, %r105, %r981;
	mul.wide.u32 	%rd140, %r1000, 4;
	add.s64 	%rd141, %rd51, %rd140;
	ld.shared.u32 	%r1001, [%rd141];
	add.s32 	%r1002, %r106, %r981;
	mul.wide.u32 	%rd142, %r1002, 4;
	add.s64 	%rd143, %rd51, %rd142;
	ld.shared.u32 	%r1003, [%rd143];
	add.s32 	%r1004, %r107, %r981;
	mul.wide.u32 	%rd144, %r1004, 4;
	add.s64 	%rd145, %rd51, %rd144;
	ld.shared.u32 	%r1005, [%rd145];
	add.s32 	%r1006, %r108, %r981;
	mul.wide.u32 	%rd146, %r1006, 4;
	add.s64 	%rd147, %rd51, %rd146;
	ld.shared.u32 	%r1007, [%rd147];
	add.s32 	%r1008, %r109, %r981;
	mul.wide.u32 	%rd148, %r1008, 4;
	add.s64 	%rd149, %rd51, %rd148;
	ld.shared.u32 	%r1009, [%rd149];
	add.s32 	%r1010, %r110, %r981;
	mul.wide.u32 	%rd150, %r1010, 4;
	add.s64 	%rd151, %rd51, %rd150;
	ld.shared.u32 	%r1011, [%rd151];
	add.s32 	%r1012, %r111, %r981;
	mul.wide.u32 	%rd152, %r1012, 4;
	add.s64 	%rd153, %rd51, %rd152;
	ld.shared.u32 	%r1013, [%rd153];
	add.s32 	%r1014, %r112, %r981;
	mul.wide.u32 	%rd154, %r1014, 4;
	add.s64 	%rd155, %rd51, %rd154;
	ld.shared.u32 	%r1015, [%rd155];
	add.s32 	%r1016, %r113, %r981;
	mul.wide.u32 	%rd156, %r1016, 4;
	add.s64 	%rd157, %rd51, %rd156;
	ld.shared.u32 	%r1017, [%rd157];
	add.s32 	%r1018, %r114, %r981;
	mul.wide.u32 	%rd158, %r1018, 4;
	add.s64 	%rd159, %rd51, %rd158;
	ld.shared.u32 	%r1019, [%rd159];
	add.s32 	%r1020, %r115, %r981;
	mul.wide.u32 	%rd160, %r1020, 4;
	add.s64 	%rd161, %rd51, %rd160;
	ld.shared.u32 	%r1021, [%rd161];
	add.s32 	%r1022, %r116, %r981;
	mul.wide.u32 	%rd162, %r1022, 4;
	add.s64 	%rd163, %rd51, %rd162;
	ld.shared.u32 	%r1023, [%rd163];
	add.s32 	%r1024, %r117, %r981;
	mul.wide.s32 	%rd164, %r1024, 4;
	add.s64 	%rd165, %rd51, %rd164;
	ld.shared.u32 	%r1025, [%rd165];
	bar.sync 	0;
	shfl.sync.idx.b32	%r1026, %r3692, 0, 31, -1;
	shfl.sync.idx.b32	%r1027, %r3692, 1, 31, -1;
	shfl.sync.idx.b32	%r1028, %r3692, 2, 31, -1;
	shfl.sync.idx.b32	%r1029, %r3692, 3, 31, -1;
	shfl.sync.idx.b32	%r1030, %r3692, 4, 31, -1;
	shfl.sync.idx.b32	%r1031, %r3692, 5, 31, -1;
	shfl.sync.idx.b32	%r1032, %r3692, 6, 31, -1;
	shfl.sync.idx.b32	%r1033, %r3692, 7, 31, -1;
	shfl.sync.idx.b32	%r1034, %r3692, 8, 31, -1;
	shfl.sync.idx.b32	%r1035, %r3692, 9, 31, -1;
	shfl.sync.idx.b32	%r1036, %r3692, 10, 31, -1;
	shfl.sync.idx.b32	%r1037, %r3692, 11, 31, -1;
	shfl.sync.idx.b32	%r1038, %r3692, 12, 31, -1;
	shfl.sync.idx.b32	%r1039, %r3692, 13, 31, -1;
	shfl.sync.idx.b32	%r1040, %r3692, 14, 31, -1;
	shfl.sync.idx.b32	%r1041, %r3692, 15, 31, -1;
	shfl.sync.idx.b32	%r1042, %r3692, 16, 31, -1;
	shfl.sync.idx.b32	%r1043, %r3692, 17, 31, -1;
	shfl.sync.idx.b32	%r1044, %r3692, 18, 31, -1;
	shfl.sync.idx.b32	%r1045, %r3692, 19, 31, -1;
	shfl.sync.idx.b32	%r1046, %r3692, 20, 31, -1;
	shfl.sync.idx.b32	%r1047, %r3692, 21, 31, -1;
	shfl.sync.idx.b32	%r1048, %r3692, 22, 31, -1;
	shfl.sync.idx.b32	%r1049, %r3692, 23, 31, -1;
	add.s32 	%r1050, %r1026, %r981;
	mul.wide.s32 	%rd166, %r1050, 4;
	add.s64 	%rd167, %rd51, %rd166;
	st.shared.u32 	[%rd167], %r983;
	add.s32 	%r1051, %r1027, %r981;
	mul.wide.s32 	%rd168, %r1051, 4;
	add.s64 	%rd169, %rd51, %rd168;
	st.shared.u32 	[%rd169], %r985;
	add.s32 	%r1052, %r1028, %r981;
	mul.wide.s32 	%rd170, %r1052, 4;
	add.s64 	%rd171, %rd51, %rd170;
	st.shared.u32 	[%rd171], %r987;
	add.s32 	%r1053, %r1029, %r981;
	mul.wide.s32 	%rd172, %r1053, 4;
	add.s64 	%rd173, %rd51, %rd172;
	st.shared.u32 	[%rd173], %r989;
	add.s32 	%r1054, %r1030, %r981;
	mul.wide.s32 	%rd174, %r1054, 4;
	add.s64 	%rd175, %rd51, %rd174;
	st.shared.u32 	[%rd175], %r991;
	add.s32 	%r1055, %r1031, %r981;
	mul.wide.s32 	%rd176, %r1055, 4;
	add.s64 	%rd177, %rd51, %rd176;
	st.shared.u32 	[%rd177], %r993;
	add.s32 	%r1056, %r1032, %r981;
	mul.wide.s32 	%rd178, %r1056, 4;
	add.s64 	%rd179, %rd51, %rd178;
	st.shared.u32 	[%rd179], %r995;
	add.s32 	%r1057, %r1033, %r981;
	mul.wide.s32 	%rd180, %r1057, 4;
	add.s64 	%rd181, %rd51, %rd180;
	st.shared.u32 	[%rd181], %r997;
	add.s32 	%r1058, %r1034, %r981;
	mul.wide.s32 	%rd182, %r1058, 4;
	add.s64 	%rd183, %rd51, %rd182;
	st.shared.u32 	[%rd183], %r999;
	add.s32 	%r1059, %r1035, %r981;
	mul.wide.s32 	%rd184, %r1059, 4;
	add.s64 	%rd185, %rd51, %rd184;
	st.shared.u32 	[%rd185], %r1001;
	add.s32 	%r1060, %r1036, %r981;
	mul.wide.s32 	%rd186, %r1060, 4;
	add.s64 	%rd187, %rd51, %rd186;
	st.shared.u32 	[%rd187], %r1003;
	add.s32 	%r1061, %r1037, %r981;
	mul.wide.s32 	%rd188, %r1061, 4;
	add.s64 	%rd189, %rd51, %rd188;
	st.shared.u32 	[%rd189], %r1005;
	add.s32 	%r1062, %r1038, %r981;
	mul.wide.s32 	%rd190, %r1062, 4;
	add.s64 	%rd191, %rd51, %rd190;
	st.shared.u32 	[%rd191], %r1007;
	add.s32 	%r1063, %r1039, %r981;
	mul.wide.s32 	%rd192, %r1063, 4;
	add.s64 	%rd193, %rd51, %rd192;
	st.shared.u32 	[%rd193], %r1009;
	add.s32 	%r1064, %r1040, %r981;
	mul.wide.s32 	%rd194, %r1064, 4;
	add.s64 	%rd195, %rd51, %rd194;
	st.shared.u32 	[%rd195], %r1011;
	add.s32 	%r1065, %r1041, %r981;
	mul.wide.s32 	%rd196, %r1065, 4;
	add.s64 	%rd197, %rd51, %rd196;
	st.shared.u32 	[%rd197], %r1013;
	add.s32 	%r1066, %r1042, %r981;
	mul.wide.s32 	%rd198, %r1066, 4;
	add.s64 	%rd199, %rd51, %rd198;
	st.shared.u32 	[%rd199], %r1015;
	add.s32 	%r1067, %r1043, %r981;
	mul.wide.s32 	%rd200, %r1067, 4;
	add.s64 	%rd201, %rd51, %rd200;
	st.shared.u32 	[%rd201], %r1017;
	add.s32 	%r1068, %r1044, %r981;
	mul.wide.s32 	%rd202, %r1068, 4;
	add.s64 	%rd203, %rd51, %rd202;
	st.shared.u32 	[%rd203], %r1019;
	add.s32 	%r1069, %r1045, %r981;
	mul.wide.s32 	%rd204, %r1069, 4;
	add.s64 	%rd205, %rd51, %rd204;
	st.shared.u32 	[%rd205], %r1021;
	add.s32 	%r1070, %r1046, %r981;
	mul.wide.s32 	%rd206, %r1070, 4;
	add.s64 	%rd207, %rd51, %rd206;
	st.shared.u32 	[%rd207], %r1023;
	selp.b32 	%r1071, 0, %r1025, %p215;
	add.s32 	%r1072, %r1047, %r981;
	mul.wide.s32 	%rd208, %r1072, 4;
	add.s64 	%rd209, %rd51, %rd208;
	st.shared.u32 	[%rd209], %r1071;
	add.s32 	%r1073, %r1048, %r981;
	mul.wide.s32 	%rd210, %r1073, 4;
	add.s64 	%rd211, %rd51, %rd210;
	st.shared.u32 	[%rd211], %r3589;
	add.s32 	%r1074, %r1049, %r981;
	mul.wide.s32 	%rd212, %r1074, 4;
	add.s64 	%rd213, %rd51, %rd212;
	st.shared.u32 	[%rd213], %r3589;
	bar.sync 	0;
	mov.u32 	%r3614, %r3589;
	mov.u32 	%r3615, %r3589;
	mov.u32 	%r3616, %r3589;
	mov.u32 	%r3617, %r3589;
	mov.u32 	%r3618, %r3589;
	mov.u32 	%r3619, %r3589;
	mov.u32 	%r3620, %r3589;
	mov.u32 	%r3621, %r3589;
	mov.u32 	%r3622, %r3589;
	mov.u32 	%r3623, %r3589;
	mov.u32 	%r3624, %r3589;
	mov.u32 	%r3625, %r3589;
	mov.u32 	%r3626, %r3589;
	mov.u32 	%r3627, %r3589;
	mov.u32 	%r3628, %r3589;
	mov.u32 	%r3629, %r3589;
	mov.u32 	%r3630, %r3589;
	mov.u32 	%r3631, %r3589;
	mov.u32 	%r3632, %r3589;
	mov.u32 	%r3633, %r3589;
	mov.u32 	%r3634, %r3589;
	mov.u32 	%r3635, %r3589;
	mov.u32 	%r3636, %r3589;
	mov.u32 	%r3637, %r3589;
	@%p217 bra 	$L__BB0_187;
	bra.uni 	$L__BB0_139;
$L__BB0_187:                            // %oksrem3787
                                        //   in Loop: Header=BB0_138 Depth=1
	cvt.u16.u32 	%rs90, %r125;
	mul.hi.s16 	%rs91, %rs90, 10923;
	shr.u16 	%rs92, %rs91, 15;
	shr.s16 	%rs93, %rs91, 2;
	add.s16 	%rs94, %rs93, %rs92;
	mul.lo.s16 	%rs95, %rs94, 24;
	sub.s16 	%rs96, %rs90, %rs95;
	cvt.s32.s16 	%r1075, %rs96;
	mul.wide.s32 	%rd214, %r1075, 4;
	add.s64 	%rd215, %rd14, %rd214;
	ld.shared.u32 	%r3614, [%rd215];
	ld.shared.u32 	%r3615, [%rd14+4];
	ld.shared.u32 	%r3616, [%rd14+8];
	ld.shared.u32 	%r3617, [%rd14+12];
	ld.shared.u32 	%r3618, [%rd14+16];
	ld.shared.u32 	%r3619, [%rd14+20];
	ld.shared.u32 	%r3620, [%rd14+24];
	ld.shared.u32 	%r3621, [%rd14+28];
	ld.shared.u32 	%r3622, [%rd14+32];
	ld.shared.u32 	%r3623, [%rd14+36];
	ld.shared.u32 	%r3624, [%rd14+40];
	ld.shared.u32 	%r3625, [%rd14+44];
	ld.shared.u32 	%r3626, [%rd14+48];
	ld.shared.u32 	%r3627, [%rd14+52];
	ld.shared.u32 	%r3628, [%rd14+56];
	ld.shared.u32 	%r3629, [%rd14+60];
	add.s16 	%rs97, %rs90, 16;
	mul.hi.s16 	%rs98, %rs97, 10923;
	shr.u16 	%rs99, %rs98, 15;
	shr.s16 	%rs100, %rs98, 2;
	add.s16 	%rs101, %rs100, %rs99;
	mul.lo.s16 	%rs102, %rs101, 24;
	sub.s16 	%rs103, %rs97, %rs102;
	cvt.s32.s16 	%r1076, %rs103;
	mul.wide.s32 	%rd216, %r1076, 4;
	add.s64 	%rd217, %rd14, %rd216;
	ld.shared.u32 	%r3630, [%rd217];
	add.s16 	%rs104, %rs90, 17;
	mul.hi.s16 	%rs105, %rs104, 10923;
	shr.u16 	%rs106, %rs105, 15;
	shr.s16 	%rs107, %rs105, 2;
	add.s16 	%rs108, %rs107, %rs106;
	mul.lo.s16 	%rs109, %rs108, 24;
	sub.s16 	%rs110, %rs104, %rs109;
	cvt.s32.s16 	%r1077, %rs110;
	mul.wide.s32 	%rd218, %r1077, 4;
	add.s64 	%rd219, %rd14, %rd218;
	ld.shared.u32 	%r3631, [%rd219];
	add.s16 	%rs111, %rs90, 18;
	mul.hi.s16 	%rs112, %rs111, 10923;
	shr.u16 	%rs113, %rs112, 15;
	shr.s16 	%rs114, %rs112, 2;
	add.s16 	%rs115, %rs114, %rs113;
	mul.lo.s16 	%rs116, %rs115, 24;
	sub.s16 	%rs117, %rs111, %rs116;
	cvt.s32.s16 	%r1078, %rs117;
	mul.wide.s32 	%rd220, %r1078, 4;
	add.s64 	%rd221, %rd14, %rd220;
	ld.shared.u32 	%r3632, [%rd221];
	add.s16 	%rs118, %rs90, 19;
	mul.hi.s16 	%rs119, %rs118, 10923;
	shr.u16 	%rs120, %rs119, 15;
	shr.s16 	%rs121, %rs119, 2;
	add.s16 	%rs122, %rs121, %rs120;
	mul.lo.s16 	%rs123, %rs122, 24;
	sub.s16 	%rs124, %rs118, %rs123;
	cvt.s32.s16 	%r1079, %rs124;
	mul.wide.s32 	%rd222, %r1079, 4;
	add.s64 	%rd223, %rd14, %rd222;
	ld.shared.u32 	%r3633, [%rd223];
	add.s16 	%rs125, %rs90, 20;
	mul.hi.s16 	%rs126, %rs125, 10923;
	shr.u16 	%rs127, %rs126, 15;
	shr.s16 	%rs128, %rs126, 2;
	add.s16 	%rs129, %rs128, %rs127;
	mul.lo.s16 	%rs130, %rs129, 24;
	sub.s16 	%rs131, %rs125, %rs130;
	cvt.s32.s16 	%r1080, %rs131;
	mul.wide.s32 	%rd224, %r1080, 4;
	add.s64 	%rd225, %rd14, %rd224;
	ld.shared.u32 	%r3634, [%rd225];
	add.s16 	%rs132, %rs90, 21;
	mul.hi.s16 	%rs133, %rs132, 10923;
	shr.u16 	%rs134, %rs133, 15;
	shr.s16 	%rs135, %rs133, 2;
	add.s16 	%rs136, %rs135, %rs134;
	mul.lo.s16 	%rs137, %rs136, 24;
	sub.s16 	%rs138, %rs132, %rs137;
	cvt.s32.s16 	%r1081, %rs138;
	mul.wide.s32 	%rd226, %r1081, 4;
	add.s64 	%rd227, %rd14, %rd226;
	ld.shared.u32 	%r3635, [%rd227];
	add.s16 	%rs139, %rs90, 22;
	mul.hi.s16 	%rs140, %rs139, 10923;
	shr.u16 	%rs141, %rs140, 15;
	shr.s16 	%rs142, %rs140, 2;
	add.s16 	%rs143, %rs142, %rs141;
	mul.lo.s16 	%rs144, %rs143, 24;
	sub.s16 	%rs145, %rs139, %rs144;
	cvt.s32.s16 	%r1082, %rs145;
	mul.wide.s32 	%rd228, %r1082, 4;
	add.s64 	%rd229, %rd14, %rd228;
	ld.shared.u32 	%r3636, [%rd229];
	add.s16 	%rs146, %rs90, 23;
	mul.hi.s16 	%rs147, %rs146, 10923;
	shr.u16 	%rs148, %rs147, 15;
	shr.s16 	%rs149, %rs147, 2;
	add.s16 	%rs150, %rs149, %rs148;
	mul.lo.s16 	%rs151, %rs150, 24;
	sub.s16 	%rs152, %rs146, %rs151;
	cvt.s32.s16 	%r1083, %rs152;
	mul.wide.s32 	%rd230, %r1083, 4;
	add.s64 	%rd231, %rd14, %rd230;
	ld.shared.u32 	%r3637, [%rd231];
$L__BB0_139:                            // %L11134
                                        //   in Loop: Header=BB0_138 Depth=1
	bar.sync 	0;
	mov.u32 	%r3638, 12;
	bra.uni 	$L__BB0_140;
$L__BB0_147:                            // %L20730
                                        //   in Loop: Header=BB0_140 Depth=2
	add.s32 	%r3640, %r3640, 1;
	mov.u32 	%r3639, 0;
	mov.u32 	%r3641, %r3639;
	mov.u32 	%r3642, %r3639;
$L__BB0_148:                            // %L20731
                                        //   in Loop: Header=BB0_140 Depth=2
	bar.sync 	0;
	add.s32 	%r3638, %r3638, -4;
	setp.ne.s32 	%p230, %r3638, -12;
	@%p230 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_149;
$L__BB0_140:                            // %L11160
                                        //   Parent Loop BB0_138 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p219, %r3638, 12;
	selp.b32 	%r1622, %r3614, 0, %p219;
	setp.eq.s32 	%p220, %r3638, 8;
	selp.b32 	%r1623, %r3618, %r1622, %p220;
	setp.eq.s32 	%p221, %r3638, 4;
	selp.b32 	%r1624, %r3622, %r1623, %p221;
	setp.eq.s32 	%p222, %r3638, 0;
	selp.b32 	%r1625, %r3626, %r1624, %p222;
	setp.eq.s32 	%p223, %r3638, -4;
	selp.b32 	%r1626, %r3630, %r1625, %p223;
	setp.eq.s32 	%p224, %r3638, -8;
	selp.b32 	%r1627, %r3634, %r1626, %p224;
	selp.b32 	%r1628, %r3615, 0, %p219;
	selp.b32 	%r1629, %r3619, %r1628, %p220;
	selp.b32 	%r1630, %r3623, %r1629, %p221;
	selp.b32 	%r1631, %r3627, %r1630, %p222;
	selp.b32 	%r1632, %r3631, %r1631, %p223;
	selp.b32 	%r1633, %r3635, %r1632, %p224;
	selp.b32 	%r1634, %r3616, 0, %p219;
	selp.b32 	%r1635, %r3620, %r1634, %p220;
	selp.b32 	%r1636, %r3624, %r1635, %p221;
	selp.b32 	%r1637, %r3628, %r1636, %p222;
	selp.b32 	%r1638, %r3632, %r1637, %p223;
	selp.b32 	%r1639, %r3636, %r1638, %p224;
	selp.b32 	%r1640, %r3617, 0, %p219;
	selp.b32 	%r1641, %r3621, %r1640, %p220;
	selp.b32 	%r1642, %r3625, %r1641, %p221;
	selp.b32 	%r1643, %r3629, %r1642, %p222;
	selp.b32 	%r1644, %r3633, %r1643, %p223;
	selp.b32 	%r1645, %r3637, %r1644, %p224;
	mov.u16 	%rs190, 25600;
	// begin inline asm
	mov.b32 %r1090, {%rs190, %rs190};
	// end inline asm
	mov.u16 	%rs192, 21504;
	// begin inline asm
	mov.b32 %r1101, {%rs192, %rs192};
	// end inline asm
	xor.b32  	%r1089, %r1627, -2004318072;
	mov.u32 	%r1226, 983055;
	// begin inline asm
	lop3.b32 %r1087, %r1226, %r1089, %r1090, 202;
	// end inline asm
	mov.u16 	%rs196, 18432;
	// begin inline asm
	mov.b32 %r1091, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1092, %r1090, %r1091;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1095, %r1087, %r1092;
	// end inline asm
	mov.u32 	%r1237, 15728880;
	// begin inline asm
	lop3.b32 %r1098, %r1237, %r1089, %r1101, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1102, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1103, %r1101, %r1102;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1106, %r1098, %r1103;
	// end inline asm
	// begin inline asm
	mov.b32 %r1136, {%rs190, %rs190};
	// end inline asm
	// begin inline asm
	mov.b32 %r1147, {%rs192, %rs192};
	// end inline asm
	xor.b32  	%r1135, %r1633, -2004318072;
	// begin inline asm
	lop3.b32 %r1133, %r1226, %r1135, %r1136, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1137, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1138, %r1136, %r1137;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1141, %r1133, %r1138;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1144, %r1237, %r1135, %r1147, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1148, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1149, %r1147, %r1148;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1152, %r1144, %r1149;
	// end inline asm
	// begin inline asm
	mov.b32 %r1182, {%rs190, %rs190};
	// end inline asm
	// begin inline asm
	mov.b32 %r1193, {%rs192, %rs192};
	// end inline asm
	xor.b32  	%r1181, %r1639, -2004318072;
	// begin inline asm
	lop3.b32 %r1179, %r1226, %r1181, %r1182, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1183, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1184, %r1182, %r1183;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1187, %r1179, %r1184;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1190, %r1237, %r1181, %r1193, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1194, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1195, %r1193, %r1194;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1198, %r1190, %r1195;
	// end inline asm
	// begin inline asm
	mov.b32 %r1228, {%rs190, %rs190};
	// end inline asm
	// begin inline asm
	mov.b32 %r1239, {%rs192, %rs192};
	// end inline asm
	xor.b32  	%r1227, %r1645, -2004318072;
	// begin inline asm
	lop3.b32 %r1225, %r1226, %r1227, %r1228, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1229, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1230, %r1228, %r1229;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1233, %r1225, %r1230;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1236, %r1237, %r1227, %r1239, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1240, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1241, %r1239, %r1240;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1244, %r1236, %r1241;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3607;
    mov.b32 {%r2re, %r2im}, %r1095;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1269, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3608;
    mov.b32 {%r2re, %r2im}, %r1106;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1272, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3607;
    mov.b32 {%r2re, %r2im}, %r1141;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1275, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3608;
    mov.b32 {%r2re, %r2im}, %r1152;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1278, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3607;
    mov.b32 {%r2re, %r2im}, %r1187;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1281, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3608;
    mov.b32 {%r2re, %r2im}, %r1198;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1284, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3607;
    mov.b32 {%r2re, %r2im}, %r1233;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1287, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3608;
    mov.b32 {%r2re, %r2im}, %r1244;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1290, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1621, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1356, %r1353}, {%r323, %r326}, {%r1269}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1365, %r1362}, {%r323, %r326}, {%r1272}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1374, %r1371}, {%r323, %r326}, {%r1275}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1383, %r1380}, {%r323, %r326}, {%r1278}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1392, %r1389}, {%r323, %r326}, {%r1281}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1401, %r1398}, {%r323, %r326}, {%r1284}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1410, %r1407}, {%r323, %r326}, {%r1287}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1419, %r1416}, {%r323, %r326}, {%r1290}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1349, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1351, %r1349, %r1353;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1354, %r375, %r1356, %r1351;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1358, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1360, %r1358, %r1362;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1363, %r375, %r1365, %r1360;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1367, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1369, %r1367, %r1371;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1372, %r375, %r1374, %r1369;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1376, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1378, %r1376, %r1380;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1381, %r375, %r1383, %r1378;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1385, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1387, %r1385, %r1389;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1390, %r375, %r1392, %r1387;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1394, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1396, %r1394, %r1398;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1399, %r375, %r1401, %r1396;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1403, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1405, %r1403, %r1407;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1408, %r375, %r1410, %r1405;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1412, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1414, %r1412, %r1416;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1417, %r375, %r1419, %r1414;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1421, %r378, %r1356;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1424, %r375, %r1353, %r1421;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1428, %r378, %r1365;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1431, %r375, %r1362, %r1428;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1435, %r378, %r1374;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1438, %r375, %r1371, %r1435;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1442, %r378, %r1383;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1445, %r375, %r1380, %r1442;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1449, %r378, %r1392;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1452, %r375, %r1389, %r1449;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1456, %r378, %r1401;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1459, %r375, %r1398, %r1456;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1463, %r378, %r1410;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1466, %r375, %r1407, %r1463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1470, %r378, %r1419;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1473, %r375, %r1416, %r1470;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1558, %r1559}, {%r419, %r425, %r422, %r428}, {%r1354, %r1424}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1566, %r1567}, {%r419, %r425, %r422, %r428}, {%r1363, %r1431}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1574, %r1575}, {%r419, %r425, %r422, %r428}, {%r1372, %r1438}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1582, %r1583}, {%r419, %r425, %r422, %r428}, {%r1381, %r1445}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1590, %r1591}, {%r419, %r425, %r422, %r428}, {%r1390, %r1452}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1598, %r1599}, {%r419, %r425, %r422, %r428}, {%r1399, %r1459}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1606, %r1607}, {%r419, %r425, %r422, %r428}, {%r1408, %r1466}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1614, %r1615}, {%r419, %r425, %r422, %r428}, {%r1417, %r1473}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	prmt.b32 %r1557, %r1558, %r1559, %r905;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1561, %r1558, %r1559, %r909;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1565, %r1566, %r1567, %r905;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1569, %r1566, %r1567, %r909;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1573, %r1574, %r1575, %r905;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1577, %r1574, %r1575, %r909;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1581, %r1582, %r1583, %r905;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1585, %r1582, %r1583, %r909;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1589, %r1590, %r1591, %r905;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1593, %r1590, %r1591, %r909;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1597, %r1598, %r1599, %r905;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1601, %r1598, %r1599, %r909;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1605, %r1606, %r1607, %r905;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1609, %r1606, %r1607, %r909;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1613, %r1614, %r1615, %r905;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1617, %r1614, %r1615, %r909;
	// end inline asm
	st.shared.u32 	[%rd6], %r1557;
	st.shared.u32 	[%rd7], %r1561;
	st.shared.u32 	[%rd8], %r1565;
	st.shared.u32 	[%rd9], %r1569;
	st.shared.u32 	[%rd15], %r1573;
	st.shared.u32 	[%rd7+256], %r1577;
	st.shared.u32 	[%rd16], %r1581;
	st.shared.u32 	[%rd17], %r1585;
	st.shared.u32 	[%rd18], %r1589;
	st.shared.u32 	[%rd7+512], %r1593;
	st.shared.u32 	[%rd19], %r1597;
	st.shared.u32 	[%rd20], %r1601;
	st.shared.u32 	[%rd21], %r1605;
	st.shared.u32 	[%rd7+768], %r1609;
	st.shared.u32 	[%rd22], %r1613;
	st.shared.u32 	[%rd23], %r1617;
	bar.sync 	0;
	mov.u32 	%r3643, %r1621;
	mov.u32 	%r3644, %r1621;
	mov.u32 	%r3645, %r1621;
	mov.u32 	%r3646, %r1621;
	@%p217 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_141;
$L__BB0_188:                            // %pass7422
                                        //   in Loop: Header=BB0_140 Depth=2
	ld.shared.u32 	%r3643, [%rd10];
	ld.shared.u32 	%r3644, [%rd11];
	ld.shared.u32 	%r3645, [%rd12];
	ld.shared.u32 	%r3646, [%rd13];
$L__BB0_141:                            // %L16665
                                        //   in Loop: Header=BB0_140 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1681, %r1678}, {%r437, %r440}, {%r3643}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1690, %r1687}, {%r437, %r440}, {%r3644}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1699, %r1696}, {%r437, %r440}, {%r3645}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1708, %r1705}, {%r437, %r440}, {%r3646}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1674, %r492;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1676, %r1674, %r1678;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1679, %r489, %r1681, %r1676;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1683, %r492;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1685, %r1683, %r1687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1688, %r489, %r1690, %r1685;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1692, %r492;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1694, %r1692, %r1696;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1697, %r489, %r1699, %r1694;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1701, %r492;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1703, %r1701, %r1705;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1706, %r489, %r1708, %r1703;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1710, %r492, %r1681;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1713, %r489, %r1678, %r1710;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1717, %r492, %r1690;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1720, %r489, %r1687, %r1717;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1724, %r492, %r1699;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1727, %r489, %r1696, %r1724;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1731, %r492, %r1708;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1734, %r489, %r1705, %r1731;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1779, %r1782}, {%r533, %r539, %r536, %r542}, {%r1679, %r1713}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1798, %r1801}, {%r533, %r539, %r536, %r542}, {%r1688, %r1720}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1786, %r1790}, {%r533, %r539, %r536, %r542}, {%r1697, %r1727}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1805, %r1809}, {%r533, %r539, %r536, %r542}, {%r1706, %r1734}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1778, %r1779, %r1779;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1781, %r1782, %r1782, %r1778;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1785, %r1786, %r1786, %r1781;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1789, %r1790, %r1790, %r1785;
	// end inline asm
	mov.u32 	%r1813, 442899046;
	// begin inline asm
	fma.rn.f16x2 %r1793, %r1813, %r1789, %r3642;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1797, %r1798, %r1798;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1800, %r1801, %r1801, %r1797;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1804, %r1805, %r1805, %r1800;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1808, %r1809, %r1809, %r1804;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1812, %r1813, %r1808, %r3641;
	// end inline asm
	mov.u32 	%r3647, %r1621;
	mov.u32 	%r3648, %r1621;
	mov.u32 	%r3649, %r1621;
	mov.u32 	%r3650, %r1621;
	@%p217 bra 	$L__BB0_189;
	bra.uni 	$L__BB0_142;
$L__BB0_189:                            // %pass8027
                                        //   in Loop: Header=BB0_140 Depth=2
	ld.shared.u32 	%r3647, [%rd24];
	ld.shared.u32 	%r3648, [%rd25];
	ld.shared.u32 	%r3649, [%rd26];
	ld.shared.u32 	%r3650, [%rd27];
$L__BB0_142:                            // %L17872
                                        //   in Loop: Header=BB0_140 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1852, %r1849}, {%r437, %r440}, {%r3647}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1861, %r1858}, {%r437, %r440}, {%r3648}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1870, %r1867}, {%r437, %r440}, {%r3649}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1879, %r1876}, {%r437, %r440}, {%r3650}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1845, %r492;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1847, %r1845, %r1849;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1850, %r489, %r1852, %r1847;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1854, %r492;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1856, %r1854, %r1858;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1859, %r489, %r1861, %r1856;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1863, %r492;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1865, %r1863, %r1867;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1868, %r489, %r1870, %r1865;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1872, %r492;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1874, %r1872, %r1876;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1877, %r489, %r1879, %r1874;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1881, %r492, %r1852;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1884, %r489, %r1849, %r1881;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1888, %r492, %r1861;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1891, %r489, %r1858, %r1888;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1895, %r492, %r1870;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1898, %r489, %r1867, %r1895;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1902, %r492, %r1879;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1905, %r489, %r1876, %r1902;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1950, %r1953}, {%r533, %r539, %r536, %r542}, {%r1850, %r1884}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1969, %r1972}, {%r533, %r539, %r536, %r542}, {%r1859, %r1891}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1957, %r1961}, {%r533, %r539, %r536, %r542}, {%r1868, %r1898}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1976, %r1980}, {%r533, %r539, %r536, %r542}, {%r1877, %r1905}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1949, %r1950, %r1950;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1952, %r1953, %r1953, %r1949;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1956, %r1957, %r1957, %r1952;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1960, %r1961, %r1961, %r1956;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1964, %r1813, %r1960, %r1793;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1968, %r1969, %r1969;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1971, %r1972, %r1972, %r1968;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1975, %r1976, %r1976, %r1971;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1979, %r1980, %r1980, %r1975;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1983, %r1813, %r1979, %r1812;
	// end inline asm
	mov.u32 	%r3651, %r1621;
	mov.u32 	%r3652, %r1621;
	mov.u32 	%r3653, %r1621;
	mov.u32 	%r3654, %r1621;
	@%p217 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_143;
$L__BB0_190:                            // %pass8632
                                        //   in Loop: Header=BB0_140 Depth=2
	ld.shared.u32 	%r3651, [%rd28];
	ld.shared.u32 	%r3652, [%rd29];
	ld.shared.u32 	%r3653, [%rd30];
	ld.shared.u32 	%r3654, [%rd31];
$L__BB0_143:                            // %L19079
                                        //   in Loop: Header=BB0_140 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2023, %r2020}, {%r437, %r440}, {%r3651}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2032, %r2029}, {%r437, %r440}, {%r3652}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2041, %r2038}, {%r437, %r440}, {%r3653}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2050, %r2047}, {%r437, %r440}, {%r3654}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2016, %r492;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2018, %r2016, %r2020;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2021, %r489, %r2023, %r2018;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2025, %r492;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2027, %r2025, %r2029;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2030, %r489, %r2032, %r2027;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2034, %r492;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2036, %r2034, %r2038;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2039, %r489, %r2041, %r2036;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2043, %r492;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2045, %r2043, %r2047;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2048, %r489, %r2050, %r2045;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2052, %r492, %r2023;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2055, %r489, %r2020, %r2052;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2059, %r492, %r2032;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2062, %r489, %r2029, %r2059;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2066, %r492, %r2041;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2069, %r489, %r2038, %r2066;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2073, %r492, %r2050;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2076, %r489, %r2047, %r2073;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2121, %r2124}, {%r533, %r539, %r536, %r542}, {%r2021, %r2055}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2140, %r2143}, {%r533, %r539, %r536, %r542}, {%r2030, %r2062}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2128, %r2132}, {%r533, %r539, %r536, %r542}, {%r2039, %r2069}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2147, %r2151}, {%r533, %r539, %r536, %r542}, {%r2048, %r2076}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2120, %r2121, %r2121;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2123, %r2124, %r2124, %r2120;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2127, %r2128, %r2128, %r2123;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2131, %r2132, %r2132, %r2127;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2135, %r1813, %r2131, %r1964;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2139, %r2140, %r2140;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2142, %r2143, %r2143, %r2139;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2146, %r2147, %r2147, %r2142;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2150, %r2151, %r2151, %r2146;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2154, %r1813, %r2150, %r1983;
	// end inline asm
	mov.u32 	%r3655, %r1621;
	mov.u32 	%r3656, %r1621;
	mov.u32 	%r3657, %r1621;
	mov.u32 	%r3658, %r1621;
	@%p217 bra 	$L__BB0_191;
	bra.uni 	$L__BB0_144;
$L__BB0_191:                            // %pass9237
                                        //   in Loop: Header=BB0_140 Depth=2
	ld.shared.u32 	%r3655, [%rd32];
	ld.shared.u32 	%r3656, [%rd33];
	ld.shared.u32 	%r3657, [%rd34];
	ld.shared.u32 	%r3658, [%rd35];
$L__BB0_144:                            // %L20286
                                        //   in Loop: Header=BB0_140 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2194, %r2191}, {%r437, %r440}, {%r3655}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2203, %r2200}, {%r437, %r440}, {%r3656}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2212, %r2209}, {%r437, %r440}, {%r3657}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2221, %r2218}, {%r437, %r440}, {%r3658}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2187, %r492;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2189, %r2187, %r2191;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2192, %r489, %r2194, %r2189;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2196, %r492;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2198, %r2196, %r2200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2201, %r489, %r2203, %r2198;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2205, %r492;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2207, %r2205, %r2209;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2210, %r489, %r2212, %r2207;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2214, %r492;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2216, %r2214, %r2218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2219, %r489, %r2221, %r2216;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2223, %r492, %r2194;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2226, %r489, %r2191, %r2223;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2230, %r492, %r2203;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2233, %r489, %r2200, %r2230;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2237, %r492, %r2212;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2240, %r489, %r2209, %r2237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2244, %r492, %r2221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2247, %r489, %r2218, %r2244;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2292, %r2295}, {%r533, %r539, %r536, %r542}, {%r2192, %r2226}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2311, %r2314}, {%r533, %r539, %r536, %r542}, {%r2201, %r2233}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2299, %r2303}, {%r533, %r539, %r536, %r542}, {%r2210, %r2240}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2318, %r2322}, {%r533, %r539, %r536, %r542}, {%r2219, %r2247}, {%r1621, %r1621};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2291, %r2292, %r2292;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2294, %r2295, %r2295, %r2291;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2298, %r2299, %r2299, %r2294;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2302, %r2303, %r2303, %r2298;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3642, %r1813, %r2302, %r2135;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2310, %r2311, %r2311;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2313, %r2314, %r2314, %r2310;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2317, %r2318, %r2318, %r2313;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2321, %r2322, %r2322, %r2317;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3641, %r1813, %r2321, %r2154;
	// end inline asm
	add.s32 	%r3639, %r3639, 4;
	setp.ne.s32 	%p228, %r3639, 40;
	@%p228 bra 	$L__BB0_148;
// %bb.145:                             // %L20436
                                        //   in Loop: Header=BB0_140 Depth=2
	@%p67 bra 	$L__BB0_147;
// %bb.146:                             // %L20496
                                        //   in Loop: Header=BB0_140 Depth=2
	mul.lo.s32 	%r2329, %r3640, 1152;
	add.s32 	%r2330, %r118, %r2329;
	mul.wide.u32 	%rd232, %r2330, 4;
	add.s64 	%rd233, %rd4, %rd232;
	st.global.u32 	[%rd233], %r3642;
	add.s32 	%r2331, %r119, %r2329;
	mul.wide.u32 	%rd234, %r2331, 4;
	add.s64 	%rd235, %rd4, %rd234;
	st.global.u32 	[%rd235], %r3641;
	bra.uni 	$L__BB0_147;
$L__BB0_149:                            // %L20756.preheader
                                        //   in Loop: Header=BB0_138 Depth=1
	mov.u32 	%r3663, 12;
	bra.uni 	$L__BB0_150;
$L__BB0_157:                            // %L30326
                                        //   in Loop: Header=BB0_150 Depth=2
	add.s32 	%r3640, %r3640, 1;
	mov.u32 	%r3639, 0;
	mov.u32 	%r3641, %r3639;
	mov.u32 	%r3642, %r3639;
$L__BB0_158:                            // %L30327
                                        //   in Loop: Header=BB0_150 Depth=2
	bar.sync 	0;
	add.s32 	%r3663, %r3663, -4;
	setp.ne.s32 	%p243, %r3663, -12;
	@%p243 bra 	$L__BB0_150;
	bra.uni 	$L__BB0_159;
$L__BB0_150:                            // %L20756
                                        //   Parent Loop BB0_138 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p232, %r3663, 12;
	selp.b32 	%r2871, %r3614, 0, %p232;
	setp.eq.s32 	%p233, %r3663, 8;
	selp.b32 	%r2872, %r3618, %r2871, %p233;
	setp.eq.s32 	%p234, %r3663, 4;
	selp.b32 	%r2873, %r3622, %r2872, %p234;
	setp.eq.s32 	%p235, %r3663, 0;
	selp.b32 	%r2874, %r3626, %r2873, %p235;
	setp.eq.s32 	%p236, %r3663, -4;
	selp.b32 	%r2875, %r3630, %r2874, %p236;
	setp.eq.s32 	%p237, %r3663, -8;
	selp.b32 	%r2876, %r3634, %r2875, %p237;
	selp.b32 	%r2877, %r3615, 0, %p232;
	selp.b32 	%r2878, %r3619, %r2877, %p233;
	selp.b32 	%r2879, %r3623, %r2878, %p234;
	selp.b32 	%r2880, %r3627, %r2879, %p235;
	selp.b32 	%r2881, %r3631, %r2880, %p236;
	selp.b32 	%r2882, %r3635, %r2881, %p237;
	selp.b32 	%r2883, %r3616, 0, %p232;
	selp.b32 	%r2884, %r3620, %r2883, %p233;
	selp.b32 	%r2885, %r3624, %r2884, %p234;
	selp.b32 	%r2886, %r3628, %r2885, %p235;
	selp.b32 	%r2887, %r3632, %r2886, %p236;
	selp.b32 	%r2888, %r3636, %r2887, %p237;
	selp.b32 	%r2889, %r3617, 0, %p232;
	selp.b32 	%r2890, %r3621, %r2889, %p233;
	selp.b32 	%r2891, %r3625, %r2890, %p234;
	selp.b32 	%r2892, %r3629, %r2891, %p235;
	selp.b32 	%r2893, %r3633, %r2892, %p236;
	selp.b32 	%r2894, %r3637, %r2893, %p237;
	// begin inline asm
	mov.b32 %r2361, {%rs190, %rs190};
	// end inline asm
	// begin inline asm
	mov.b32 %r2372, {%rs192, %rs192};
	// end inline asm
	shr.u32 	%r2895, %r2876, 8;
	xor.b32  	%r2371, %r2895, 8947848;
	// begin inline asm
	lop3.b32 %r2358, %r1226, %r2371, %r2361, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2362, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2363, %r2361, %r2362;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2366, %r2358, %r2363;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2369, %r1237, %r2371, %r2372, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2373, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2374, %r2372, %r2373;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2377, %r2369, %r2374;
	// end inline asm
	// begin inline asm
	mov.b32 %r2407, {%rs190, %rs190};
	// end inline asm
	// begin inline asm
	mov.b32 %r2418, {%rs192, %rs192};
	// end inline asm
	shr.u32 	%r2896, %r2882, 8;
	xor.b32  	%r2417, %r2896, 8947848;
	// begin inline asm
	lop3.b32 %r2404, %r1226, %r2417, %r2407, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2408, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2409, %r2407, %r2408;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2412, %r2404, %r2409;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2415, %r1237, %r2417, %r2418, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2419, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2420, %r2418, %r2419;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2423, %r2415, %r2420;
	// end inline asm
	// begin inline asm
	mov.b32 %r2453, {%rs190, %rs190};
	// end inline asm
	// begin inline asm
	mov.b32 %r2464, {%rs192, %rs192};
	// end inline asm
	shr.u32 	%r2897, %r2888, 8;
	xor.b32  	%r2463, %r2897, 8947848;
	// begin inline asm
	lop3.b32 %r2450, %r1226, %r2463, %r2453, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2454, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2455, %r2453, %r2454;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2458, %r2450, %r2455;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2461, %r1237, %r2463, %r2464, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2465, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2466, %r2464, %r2465;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2469, %r2461, %r2466;
	// end inline asm
	// begin inline asm
	mov.b32 %r2499, {%rs190, %rs190};
	// end inline asm
	// begin inline asm
	mov.b32 %r2510, {%rs192, %rs192};
	// end inline asm
	shr.u32 	%r2898, %r2894, 8;
	xor.b32  	%r2509, %r2898, 8947848;
	// begin inline asm
	lop3.b32 %r2496, %r1226, %r2509, %r2499, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2500, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2501, %r2499, %r2500;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2504, %r2496, %r2501;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2507, %r1237, %r2509, %r2510, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2511, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2512, %r2510, %r2511;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2515, %r2507, %r2512;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3607;
    mov.b32 {%r2re, %r2im}, %r2366;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2518, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3608;
    mov.b32 {%r2re, %r2im}, %r2377;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2521, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3607;
    mov.b32 {%r2re, %r2im}, %r2412;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2524, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3608;
    mov.b32 {%r2re, %r2im}, %r2423;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2527, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3607;
    mov.b32 {%r2re, %r2im}, %r2458;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2530, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3608;
    mov.b32 {%r2re, %r2im}, %r2469;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2533, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3607;
    mov.b32 {%r2re, %r2im}, %r2504;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2536, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3608;
    mov.b32 {%r2re, %r2im}, %r2515;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2539, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r2870, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2605, %r2602}, {%r323, %r326}, {%r2518}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2614, %r2611}, {%r323, %r326}, {%r2521}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2623, %r2620}, {%r323, %r326}, {%r2524}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2632, %r2629}, {%r323, %r326}, {%r2527}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2641, %r2638}, {%r323, %r326}, {%r2530}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2650, %r2647}, {%r323, %r326}, {%r2533}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2659, %r2656}, {%r323, %r326}, {%r2536}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2668, %r2665}, {%r323, %r326}, {%r2539}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2598, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2600, %r2598, %r2602;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2603, %r375, %r2605, %r2600;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2607, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2609, %r2607, %r2611;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2612, %r375, %r2614, %r2609;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2616, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2618, %r2616, %r2620;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2621, %r375, %r2623, %r2618;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2625, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2627, %r2625, %r2629;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2630, %r375, %r2632, %r2627;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2634, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2636, %r2634, %r2638;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2639, %r375, %r2641, %r2636;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2643, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2645, %r2643, %r2647;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2648, %r375, %r2650, %r2645;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2652, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2654, %r2652, %r2656;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2657, %r375, %r2659, %r2654;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2661, %r378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2663, %r2661, %r2665;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2666, %r375, %r2668, %r2663;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2670, %r378, %r2605;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2673, %r375, %r2602, %r2670;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2677, %r378, %r2614;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2680, %r375, %r2611, %r2677;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2684, %r378, %r2623;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2687, %r375, %r2620, %r2684;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2691, %r378, %r2632;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2694, %r375, %r2629, %r2691;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2698, %r378, %r2641;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2701, %r375, %r2638, %r2698;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2705, %r378, %r2650;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2708, %r375, %r2647, %r2705;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2712, %r378, %r2659;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2715, %r375, %r2656, %r2712;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2719, %r378, %r2668;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2722, %r375, %r2665, %r2719;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2807, %r2808}, {%r419, %r425, %r422, %r428}, {%r2603, %r2673}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2815, %r2816}, {%r419, %r425, %r422, %r428}, {%r2612, %r2680}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2823, %r2824}, {%r419, %r425, %r422, %r428}, {%r2621, %r2687}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2831, %r2832}, {%r419, %r425, %r422, %r428}, {%r2630, %r2694}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2839, %r2840}, {%r419, %r425, %r422, %r428}, {%r2639, %r2701}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2847, %r2848}, {%r419, %r425, %r422, %r428}, {%r2648, %r2708}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2855, %r2856}, {%r419, %r425, %r422, %r428}, {%r2657, %r2715}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2863, %r2864}, {%r419, %r425, %r422, %r428}, {%r2666, %r2722}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	prmt.b32 %r2806, %r2807, %r2808, %r905;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2810, %r2807, %r2808, %r909;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2814, %r2815, %r2816, %r905;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2818, %r2815, %r2816, %r909;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2822, %r2823, %r2824, %r905;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2826, %r2823, %r2824, %r909;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2830, %r2831, %r2832, %r905;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2834, %r2831, %r2832, %r909;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2838, %r2839, %r2840, %r905;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2842, %r2839, %r2840, %r909;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2846, %r2847, %r2848, %r905;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2850, %r2847, %r2848, %r909;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2854, %r2855, %r2856, %r905;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2858, %r2855, %r2856, %r909;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2862, %r2863, %r2864, %r905;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2866, %r2863, %r2864, %r909;
	// end inline asm
	st.shared.u32 	[%rd6], %r2806;
	st.shared.u32 	[%rd7], %r2810;
	st.shared.u32 	[%rd8], %r2814;
	st.shared.u32 	[%rd9], %r2818;
	st.shared.u32 	[%rd15], %r2822;
	st.shared.u32 	[%rd7+256], %r2826;
	st.shared.u32 	[%rd16], %r2830;
	st.shared.u32 	[%rd17], %r2834;
	st.shared.u32 	[%rd18], %r2838;
	st.shared.u32 	[%rd7+512], %r2842;
	st.shared.u32 	[%rd19], %r2846;
	st.shared.u32 	[%rd20], %r2850;
	st.shared.u32 	[%rd21], %r2854;
	st.shared.u32 	[%rd7+768], %r2858;
	st.shared.u32 	[%rd22], %r2862;
	st.shared.u32 	[%rd23], %r2866;
	bar.sync 	0;
	mov.u32 	%r3668, %r2870;
	mov.u32 	%r3669, %r2870;
	mov.u32 	%r3670, %r2870;
	mov.u32 	%r3671, %r2870;
	@%p217 bra 	$L__BB0_192;
	bra.uni 	$L__BB0_151;
$L__BB0_192:                            // %pass12112
                                        //   in Loop: Header=BB0_150 Depth=2
	ld.shared.u32 	%r3671, [%rd10];
	ld.shared.u32 	%r3670, [%rd11];
	ld.shared.u32 	%r3669, [%rd12];
	ld.shared.u32 	%r3668, [%rd13];
$L__BB0_151:                            // %L26261
                                        //   in Loop: Header=BB0_150 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2934, %r2931}, {%r437, %r440}, {%r3671}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2943, %r2940}, {%r437, %r440}, {%r3670}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2952, %r2949}, {%r437, %r440}, {%r3669}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2961, %r2958}, {%r437, %r440}, {%r3668}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2927, %r492;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2929, %r2927, %r2931;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2932, %r489, %r2934, %r2929;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2936, %r492;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2938, %r2936, %r2940;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2941, %r489, %r2943, %r2938;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2945, %r492;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2947, %r2945, %r2949;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2950, %r489, %r2952, %r2947;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2954, %r492;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2956, %r2954, %r2958;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2959, %r489, %r2961, %r2956;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2963, %r492, %r2934;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2966, %r489, %r2931, %r2963;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2970, %r492, %r2943;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2973, %r489, %r2940, %r2970;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2977, %r492, %r2952;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2980, %r489, %r2949, %r2977;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2984, %r492, %r2961;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2987, %r489, %r2958, %r2984;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3032, %r3035}, {%r533, %r539, %r536, %r542}, {%r2932, %r2966}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3051, %r3054}, {%r533, %r539, %r536, %r542}, {%r2941, %r2973}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3039, %r3043}, {%r533, %r539, %r536, %r542}, {%r2950, %r2980}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3058, %r3062}, {%r533, %r539, %r536, %r542}, {%r2959, %r2987}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3031, %r3032, %r3032;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3034, %r3035, %r3035, %r3031;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3038, %r3039, %r3039, %r3034;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3042, %r3043, %r3043, %r3038;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3046, %r1813, %r3042, %r3642;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3050, %r3051, %r3051;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3053, %r3054, %r3054, %r3050;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3057, %r3058, %r3058, %r3053;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3061, %r3062, %r3062, %r3057;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3065, %r1813, %r3061, %r3641;
	// end inline asm
	mov.u32 	%r3672, %r2870;
	mov.u32 	%r3673, %r2870;
	mov.u32 	%r3674, %r2870;
	mov.u32 	%r3675, %r2870;
	@%p217 bra 	$L__BB0_193;
	bra.uni 	$L__BB0_152;
$L__BB0_193:                            // %pass12717
                                        //   in Loop: Header=BB0_150 Depth=2
	ld.shared.u32 	%r3675, [%rd24];
	ld.shared.u32 	%r3674, [%rd25];
	ld.shared.u32 	%r3673, [%rd26];
	ld.shared.u32 	%r3672, [%rd27];
$L__BB0_152:                            // %L27468
                                        //   in Loop: Header=BB0_150 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3105, %r3102}, {%r437, %r440}, {%r3675}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3114, %r3111}, {%r437, %r440}, {%r3674}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3123, %r3120}, {%r437, %r440}, {%r3673}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3132, %r3129}, {%r437, %r440}, {%r3672}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3098, %r492;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3100, %r3098, %r3102;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3103, %r489, %r3105, %r3100;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3107, %r492;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3109, %r3107, %r3111;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3112, %r489, %r3114, %r3109;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3116, %r492;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3118, %r3116, %r3120;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3121, %r489, %r3123, %r3118;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3125, %r492;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3127, %r3125, %r3129;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3130, %r489, %r3132, %r3127;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3134, %r492, %r3105;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3137, %r489, %r3102, %r3134;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3141, %r492, %r3114;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3144, %r489, %r3111, %r3141;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3148, %r492, %r3123;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3151, %r489, %r3120, %r3148;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3155, %r492, %r3132;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3158, %r489, %r3129, %r3155;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3203, %r3206}, {%r533, %r539, %r536, %r542}, {%r3103, %r3137}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3222, %r3225}, {%r533, %r539, %r536, %r542}, {%r3112, %r3144}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3210, %r3214}, {%r533, %r539, %r536, %r542}, {%r3121, %r3151}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3229, %r3233}, {%r533, %r539, %r536, %r542}, {%r3130, %r3158}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3202, %r3203, %r3203;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3205, %r3206, %r3206, %r3202;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3209, %r3210, %r3210, %r3205;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3213, %r3214, %r3214, %r3209;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3217, %r1813, %r3213, %r3046;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3221, %r3222, %r3222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3224, %r3225, %r3225, %r3221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3228, %r3229, %r3229, %r3224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3232, %r3233, %r3233, %r3228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3236, %r1813, %r3232, %r3065;
	// end inline asm
	mov.u32 	%r3676, %r2870;
	mov.u32 	%r3677, %r2870;
	mov.u32 	%r3678, %r2870;
	mov.u32 	%r3679, %r2870;
	@%p217 bra 	$L__BB0_194;
	bra.uni 	$L__BB0_153;
$L__BB0_194:                            // %pass13322
                                        //   in Loop: Header=BB0_150 Depth=2
	ld.shared.u32 	%r3679, [%rd28];
	ld.shared.u32 	%r3678, [%rd29];
	ld.shared.u32 	%r3677, [%rd30];
	ld.shared.u32 	%r3676, [%rd31];
$L__BB0_153:                            // %L28675
                                        //   in Loop: Header=BB0_150 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3276, %r3273}, {%r437, %r440}, {%r3679}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3285, %r3282}, {%r437, %r440}, {%r3678}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3294, %r3291}, {%r437, %r440}, {%r3677}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3303, %r3300}, {%r437, %r440}, {%r3676}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3269, %r492;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3271, %r3269, %r3273;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3274, %r489, %r3276, %r3271;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3278, %r492;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3280, %r3278, %r3282;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3283, %r489, %r3285, %r3280;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3287, %r492;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3289, %r3287, %r3291;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3292, %r489, %r3294, %r3289;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3296, %r492;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3298, %r3296, %r3300;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3301, %r489, %r3303, %r3298;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3305, %r492, %r3276;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3308, %r489, %r3273, %r3305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3312, %r492, %r3285;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3315, %r489, %r3282, %r3312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3319, %r492, %r3294;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3322, %r489, %r3291, %r3319;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3326, %r492, %r3303;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3329, %r489, %r3300, %r3326;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3374, %r3377}, {%r533, %r539, %r536, %r542}, {%r3274, %r3308}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3393, %r3396}, {%r533, %r539, %r536, %r542}, {%r3283, %r3315}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3381, %r3385}, {%r533, %r539, %r536, %r542}, {%r3292, %r3322}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3400, %r3404}, {%r533, %r539, %r536, %r542}, {%r3301, %r3329}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3373, %r3374, %r3374;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3376, %r3377, %r3377, %r3373;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3380, %r3381, %r3381, %r3376;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3384, %r3385, %r3385, %r3380;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3388, %r1813, %r3384, %r3217;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3392, %r3393, %r3393;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3395, %r3396, %r3396, %r3392;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3399, %r3400, %r3400, %r3395;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3403, %r3404, %r3404, %r3399;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3407, %r1813, %r3403, %r3236;
	// end inline asm
	mov.u32 	%r3680, %r2870;
	mov.u32 	%r3681, %r2870;
	mov.u32 	%r3682, %r2870;
	mov.u32 	%r3683, %r2870;
	@%p217 bra 	$L__BB0_195;
	bra.uni 	$L__BB0_154;
$L__BB0_195:                            // %pass13927
                                        //   in Loop: Header=BB0_150 Depth=2
	ld.shared.u32 	%r3683, [%rd32];
	ld.shared.u32 	%r3682, [%rd33];
	ld.shared.u32 	%r3681, [%rd34];
	ld.shared.u32 	%r3680, [%rd35];
$L__BB0_154:                            // %L29882
                                        //   in Loop: Header=BB0_150 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3447, %r3444}, {%r437, %r440}, {%r3683}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3456, %r3453}, {%r437, %r440}, {%r3682}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3465, %r3462}, {%r437, %r440}, {%r3681}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3474, %r3471}, {%r437, %r440}, {%r3680}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3440, %r492;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3442, %r3440, %r3444;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3445, %r489, %r3447, %r3442;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3449, %r492;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3451, %r3449, %r3453;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3454, %r489, %r3456, %r3451;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3458, %r492;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3460, %r3458, %r3462;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3463, %r489, %r3465, %r3460;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3467, %r492;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3469, %r3467, %r3471;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3472, %r489, %r3474, %r3469;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3476, %r492, %r3447;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3479, %r489, %r3444, %r3476;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3483, %r492, %r3456;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3486, %r489, %r3453, %r3483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3490, %r492, %r3465;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3493, %r489, %r3462, %r3490;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3497, %r492, %r3474;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3500, %r489, %r3471, %r3497;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3545, %r3548}, {%r533, %r539, %r536, %r542}, {%r3445, %r3479}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3564, %r3567}, {%r533, %r539, %r536, %r542}, {%r3454, %r3486}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3552, %r3556}, {%r533, %r539, %r536, %r542}, {%r3463, %r3493}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3571, %r3575}, {%r533, %r539, %r536, %r542}, {%r3472, %r3500}, {%r2870, %r2870};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3544, %r3545, %r3545;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3547, %r3548, %r3548, %r3544;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3551, %r3552, %r3552, %r3547;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3555, %r3556, %r3556, %r3551;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3642, %r1813, %r3555, %r3388;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3563, %r3564, %r3564;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3566, %r3567, %r3567, %r3563;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3570, %r3571, %r3571, %r3566;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3574, %r3575, %r3575, %r3570;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3641, %r1813, %r3574, %r3407;
	// end inline asm
	add.s32 	%r3639, %r3639, 4;
	setp.ne.s32 	%p241, %r3639, 40;
	@%p241 bra 	$L__BB0_158;
// %bb.155:                             // %L30032
                                        //   in Loop: Header=BB0_150 Depth=2
	@%p67 bra 	$L__BB0_157;
// %bb.156:                             // %L30092
                                        //   in Loop: Header=BB0_150 Depth=2
	mul.lo.s32 	%r3582, %r3640, 1152;
	add.s32 	%r3583, %r118, %r3582;
	mul.wide.u32 	%rd236, %r3583, 4;
	add.s64 	%rd237, %rd4, %rd236;
	st.global.u32 	[%rd237], %r3642;
	add.s32 	%r3584, %r119, %r3582;
	mul.wide.u32 	%rd238, %r3584, 4;
	add.s64 	%rd239, %rd4, %rd238;
	st.global.u32 	[%rd239], %r3641;
	bra.uni 	$L__BB0_157;
$L__BB0_160:                            // %L30362
	mov.u32 	%r3586, 0;
	st.global.u32 	[%rd5], %r3586;
	ret;
$L__BB0_1:                              // %L8
	ld.param.u32 	%r308, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd36, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0];
	mov.u64 	%rd41, exception1;
	cvta.global.u64 	%rd42, %rd41;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd42;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r308;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
