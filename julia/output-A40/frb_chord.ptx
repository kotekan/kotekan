// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE // -- Begin function _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception12818[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.visible .entry _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE(
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<248>;
	.reg .b16 	%rs<257>;
	.reg .b32 	%r<3721>;
	.reg .f32 	%f<787>;
	.reg .b64 	%rd<246>;

// %bb.0:                               // %conversion
	// begin inline asm
	mov.u32 %r305, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p3, %r305, 76895;
	@%p3 bra 	$L__BB0_160;
	bra.uni 	$L__BB0_1;
$L__BB0_160:                            // %L10
	ld.param.u64 	%rd40, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r4, %ctaid.x;
	or.b32  	%r306, %r2, %r3;
	mad.lo.s32 	%r307, %r4, 768, %r306;
	mul.wide.u32 	%rd46, %r307, 4;
	add.s64 	%rd5, %rd40, %rd46;
	mov.u32 	%r308, 1;
	st.global.u32 	[%rd5], %r308;
	and.b32  	%r5, %r3, 3;
	shr.u32 	%r6, %r3, 2;
	mul.lo.s32 	%r309, %r5, %r6;
	and.b32  	%r310, %r309, 7;
	cvt.rn.f32.s32 	%f201, %r310;
	mov.f32 	%f202, 0f40800000;
	div.approx.f32 	%f1, %f201, %f202;
	abs.f32 	%f785, %f1;
	setp.lt.f32 	%p4, %f785, 0f40000000;
	setp.gtu.f32 	%p247, %f785, 0f4B800000;
	mov.f32 	%f781, %f785;
	@%p4 bra 	$L__BB0_172;
// %bb.161:
	@%p247 bra 	$L__BB0_168;
	bra.uni 	$L__BB0_162;
$L__BB0_168:
	mov.b32 	%r221, %f785;
	and.b32  	%r311, %r221, 8388607;
	or.b32  	%r3716, %r311, 1065353216;
	mov.b32 	%f780, %r3716;
	add.s32 	%r312, %r221, -1073741824;
	and.b32  	%r3717, %r312, -8388608;
	setp.eq.s32 	%p11, %r3717, 0;
	@%p11 bra 	$L__BB0_171;
// %bb.169:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f212, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f211,%f212;
	// end inline asm
$L__BB0_170:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r313, %r3717, 192937984;
	add.s32 	%r314, %r3716, %r313;
	mov.b32 	%f213, %r314;
	mul.f32 	%f214, %f211, %f213;
	sub.f32 	%f215, %f213, %f214;
	fma.rn.f32 	%f216, %f215, %f211, %f214;
	sub.f32 	%f217, %f213, %f216;
	fma.rz.f32 	%f218, %f217, %f211, %f216;
	cvt.rzi.f32.f32 	%f219, %f218;
	sub.f32 	%f780, %f213, %f219;
	sub.s32 	%r3717, %r3717, %r313;
	mov.b32 	%r3716, %f780;
	setp.ne.s32 	%p12, %r3717, 0;
	setp.ne.s32 	%p13, %r3716, 0;
	and.pred  	%p14, %p12, %p13;
	@%p14 bra 	$L__BB0_170;
$L__BB0_171:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p15, %r221, 2139095039;
	selp.f32 	%f220, 0f7FFFFFFF, 0f4B800000, %p15;
	mul.f32 	%f221, %f780, 0f34000000;
	mul.f32 	%f781, %f220, %f221;
	bra.uni 	$L__BB0_172;
$L__BB0_162:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f203, 0f40000000;
	div.approx.f32 	%f204, %f785, %f203;
	cvt.rzi.f32.f32 	%f779, %f204;
	fma.rn.f32 	%f172, %f779, 0fC0000000, %f785;
	mov.b32 	%r220, %f172;
	setp.lt.u32 	%p6, %r220, 1073741824;
	@%p6 bra 	$L__BB0_167;
// %bb.163:
	setp.lt.u32 	%p7, %r220, -2147483647;
	@%p7 bra 	$L__BB0_165;
// %bb.164:
	add.f32 	%f209, %f779, 0fBF800000;
	setp.lt.f32 	%p10, %f172, 0fC0000000;
	add.f32 	%f210, %f209, 0fBF800000;
	selp.f32 	%f779, %f210, %f209, %p10;
	bra.uni 	$L__BB0_167;
$L__BB0_165:
	add.f32 	%f779, %f779, 0f3F800000;
	setp.ltu.f32 	%p8, %f172, 0f40800000;
	@%p8 bra 	$L__BB0_167;
// %bb.166:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f205, %f779, 0f3F800000;
	fma.rn.f32 	%f207, %f203, 0fC0400000, %f172;
	setp.ge.f32 	%p9, %f207, 0f00000000;
	add.f32 	%f208, %f205, 0f3F800000;
	selp.f32 	%f779, %f208, %f205, %p9;
$L__BB0_167:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f781, %f779, 0fC0000000, %f785;
$L__BB0_172:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f222, %f781;
	setp.gtu.f32 	%p16, %f222, 0f7F800000;
	mov.b32 	%r315, %f1;
	and.b32  	%r228, %r315, -2147483648;
	@%p16 bra 	$L__BB0_174;
// %bb.173:
	mov.b32 	%r316, %f781;
	or.b32  	%r317, %r228, %r316;
	mov.b32 	%f781, %r317;
$L__BB0_174:                            // %__nv_fmodf.exit
	add.f32 	%f224, %f781, %f781;
	mov.b32 	%r324, %f224;
	and.b32  	%r325, %r324, -2147483648;
	or.b32  	%r326, %r325, 1056964608;
	mov.b32 	%f225, %r326;
	add.f32 	%f226, %f224, %f225;
	cvt.rzi.f32.f32 	%f227, %f226;
	abs.f32 	%f228, %f224;
	setp.gt.f32 	%p17, %f228, 0f4B000000;
	selp.f32 	%f229, %f224, %f227, %p17;
	cvt.rzi.f32.f32 	%f230, %f224;
	setp.lt.f32 	%p18, %f228, 0f3F000000;
	selp.f32 	%f231, %f230, %f229, %p18;
	fma.rn.f32 	%f232, %f231, 0fBF000000, %f781;
	mul.f32 	%f233, %f232, %f232;
	fma.rn.f32 	%f234, %f233, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f235, %f233, 0f3E684E12, 0fBFAAD2E0;
	mov.f32 	%f223, 0f00000000;
	shl.b32 	%r231, %r3, 1;
	and.b32  	%r232, %r231, 6;
	or.b32  	%r233, %r232, 1;
	setp.eq.s32 	%p24, %r232, 6;
	mov.f32 	%f729, 0f41C00000;
	mul.lo.s32 	%r3617, %r232, %r6;
	mov.f32 	%f735, %f223;
	mov.f32 	%f736, %f223;
	@%p24 bra 	$L__BB0_17;
// %bb.2:                               // %L204
	cvt.u16.u32 	%rs3, %r3617;
	and.b16  	%rs4, %rs3, 255;
	mul.lo.s16 	%rs5, %rs4, 171;
	shr.u16 	%rs6, %rs5, 13;
	mul.lo.s16 	%rs7, %rs6, 48;
	sub.s16 	%rs8, %rs3, %rs7;
	and.b16  	%rs9, %rs8, 255;
	cvt.rn.f32.u16 	%f255, %rs9;
	div.approx.f32 	%f3, %f255, %f729;
	abs.f32 	%f733, %f3;
	setp.lt.f32 	%p25, %f733, 0f40000000;
	@%p25 bra 	$L__BB0_14;
// %bb.3:
	setp.gtu.f32 	%p26, %f733, 0f4B800000;
	@%p26 bra 	$L__BB0_10;
	bra.uni 	$L__BB0_4;
$L__BB0_10:
	mov.b32 	%r8, %f733;
	and.b32  	%r333, %r8, 8388607;
	or.b32  	%r3619, %r333, 1065353216;
	mov.b32 	%f732, %r3619;
	add.s32 	%r334, %r8, -1073741824;
	and.b32  	%r3620, %r334, -8388608;
	setp.eq.s32 	%p32, %r3620, 0;
	@%p32 bra 	$L__BB0_13;
// %bb.11:                              // %__nv_fmaf_rn.exit4.i.i.i991.preheader
	mov.f32 	%f266, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f265,%f266;
	// end inline asm
$L__BB0_12:                             // %__nv_fmaf_rn.exit4.i.i.i991
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r335, %r3620, 192937984;
	add.s32 	%r336, %r3619, %r335;
	mov.b32 	%f267, %r336;
	mul.f32 	%f268, %f265, %f267;
	sub.f32 	%f269, %f267, %f268;
	fma.rn.f32 	%f270, %f269, %f265, %f268;
	sub.f32 	%f271, %f267, %f270;
	fma.rz.f32 	%f272, %f271, %f265, %f270;
	cvt.rzi.f32.f32 	%f273, %f272;
	sub.f32 	%f732, %f267, %f273;
	sub.s32 	%r3620, %r3620, %r335;
	mov.b32 	%r3619, %f732;
	setp.ne.s32 	%p33, %r3620, 0;
	setp.ne.s32 	%p34, %r3619, 0;
	and.pred  	%p35, %p33, %p34;
	@%p35 bra 	$L__BB0_12;
$L__BB0_13:                             // %__internal_fmodf_slowpath_mod.exit.i.i993
	setp.gt.u32 	%p36, %r8, 2139095039;
	selp.f32 	%f274, 0f7FFFFFFF, 0f4B800000, %p36;
	mul.f32 	%f275, %f732, 0f34000000;
	mul.f32 	%f733, %f274, %f275;
	bra.uni 	$L__BB0_14;
$L__BB0_4:                              // %__nv_fast_fdividef.exit.i.i.i970
	mov.f32 	%f257, 0f40000000;
	div.approx.f32 	%f258, %f733, %f257;
	cvt.rzi.f32.f32 	%f731, %f258;
	fma.rn.f32 	%f6, %f731, 0fC0000000, %f733;
	mov.b32 	%r7, %f6;
	setp.lt.u32 	%p27, %r7, 1073741824;
	@%p27 bra 	$L__BB0_9;
// %bb.5:
	setp.lt.u32 	%p28, %r7, -2147483647;
	@%p28 bra 	$L__BB0_7;
// %bb.6:
	add.f32 	%f263, %f731, 0fBF800000;
	setp.lt.f32 	%p31, %f6, 0fC0000000;
	add.f32 	%f264, %f263, 0fBF800000;
	selp.f32 	%f731, %f264, %f263, %p31;
	bra.uni 	$L__BB0_9;
$L__BB0_7:
	add.f32 	%f731, %f731, 0f3F800000;
	setp.ltu.f32 	%p29, %f6, 0f40800000;
	@%p29 bra 	$L__BB0_9;
// %bb.8:                               // %__nv_fmaf_rn.exit.i.i.i974
	add.f32 	%f259, %f731, 0f3F800000;
	fma.rn.f32 	%f261, %f257, 0fC0400000, %f6;
	setp.ge.f32 	%p30, %f261, 0f00000000;
	add.f32 	%f262, %f259, 0f3F800000;
	selp.f32 	%f731, %f262, %f259, %p30;
$L__BB0_9:                              // %__internal_fmodf_fastpath_quot.exit.i.i977
	fma.rn.f32 	%f733, %f731, 0fC0000000, %f733;
$L__BB0_14:                             // %__internal_fmodf_kernel.exit.i996
	abs.f32 	%f276, %f733;
	setp.gtu.f32 	%p37, %f276, 0f7F800000;
	@%p37 bra 	$L__BB0_16;
// %bb.15:
	mov.b32 	%r337, %f3;
	and.b32  	%r338, %r337, -2147483648;
	mov.b32 	%r339, %f733;
	or.b32  	%r340, %r338, %r339;
	mov.b32 	%f733, %r340;
$L__BB0_16:                             // %__nv_fmodf.exit997
	add.f32 	%f277, %f733, %f733;
	mov.b32 	%r341, %f277;
	and.b32  	%r342, %r341, -2147483648;
	or.b32  	%r343, %r342, 1056964608;
	mov.b32 	%f278, %r343;
	add.f32 	%f279, %f277, %f278;
	cvt.rzi.f32.f32 	%f280, %f279;
	abs.f32 	%f281, %f277;
	setp.gt.f32 	%p38, %f281, 0f4B000000;
	selp.f32 	%f282, %f277, %f280, %p38;
	cvt.rzi.f32.f32 	%f283, %f277;
	setp.lt.f32 	%p39, %f281, 0f3F000000;
	selp.f32 	%f284, %f283, %f282, %p39;
	cvt.rzi.s32.f32 	%r344, %f284;
	fma.rn.f32 	%f285, %f284, 0fBF000000, %f733;
	mul.f32 	%f286, %f285, %f285;
	fma.rn.f32 	%f287, %f286, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f288, %f286, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f289, %f287, %f286, 0fC0A55DF6;
	fma.rn.f32 	%f290, %f288, %f286, 0f4081E0CF;
	fma.rn.f32 	%f291, %f286, %f285, 0f00000000;
	fma.rn.f32 	%f292, %f290, %f286, 0fC09DE9E6;
	fma.rn.f32 	%f293, %f289, %f291, 0f00000000;
	fma.rn.f32 	%f294, %f292, %f286, 0f3F800000;
	fma.rn.f32 	%f295, %f285, 0f40490FDB, %f293;
	and.b32  	%r345, %r344, 1;
	setp.eq.b32 	%p40, %r345, 1;
	selp.f32 	%f296, %f294, %f295, %p40;
	selp.f32 	%f297, %f295, %f294, %p40;
	and.b32  	%r346, %r344, 2;
	setp.eq.s32 	%p41, %r346, 0;
	neg.f32 	%f298, %f296;
	selp.f32 	%f299, %f296, %f298, %p41;
	add.s32 	%r347, %r344, 1;
	and.b32  	%r348, %r347, 2;
	setp.eq.s32 	%p42, %r348, 0;
	mov.f32 	%f300, 0f00000000;
	sub.f32 	%f301, %f300, %f297;
	selp.f32 	%f302, %f297, %f301, %p42;
	cvt.rzi.f32.f32 	%f303, %f733;
	setp.eq.f32 	%p43, %f303, %f733;
	mul.f32 	%f304, %f733, 0f00000000;
	selp.f32 	%f736, %f304, %f299, %p43;
	abs.f32 	%f305, %f733;
	setp.gt.f32 	%p44, %f305, 0f4B800000;
	add.f32 	%f306, %f736, 0f3F800000;
	selp.f32 	%f735, %f306, %f302, %p44;
$L__BB0_17:                             // %L238
	cvt.rzi.s32.f32 	%r327, %f231;
	fma.rn.f32 	%f236, %f234, %f233, 0fC0A55DF6;
	fma.rn.f32 	%f237, %f235, %f233, 0f4081E0CF;
	fma.rn.f32 	%f238, %f233, %f232, 0f00000000;
	setp.gt.u32 	%p45, %r233, 5;
	mul.lo.s32 	%r3618, %r233, %r6;
	mov.f32 	%f741, %f223;
	mov.f32 	%f742, %f223;
	@%p45 bra 	$L__BB0_33;
// %bb.18:                              // %L242
	mul.hi.u32 	%r350, %r3618, -1431655765;
	shr.u32 	%r351, %r350, 5;
	mul.lo.s32 	%r352, %r351, 48;
	sub.s32 	%r353, %r3618, %r352;
	cvt.rn.f32.s32 	%f308, %r353;
	div.approx.f32 	%f24, %f308, %f729;
	abs.f32 	%f739, %f24;
	setp.lt.f32 	%p46, %f739, 0f40000000;
	@%p46 bra 	$L__BB0_30;
// %bb.19:
	setp.gtu.f32 	%p47, %f739, 0f4B800000;
	@%p47 bra 	$L__BB0_26;
	bra.uni 	$L__BB0_20;
$L__BB0_26:
	mov.b32 	%r16, %f739;
	and.b32  	%r354, %r16, 8388607;
	or.b32  	%r3621, %r354, 1065353216;
	mov.b32 	%f738, %r3621;
	add.s32 	%r355, %r16, -1073741824;
	and.b32  	%r3622, %r355, -8388608;
	setp.eq.s32 	%p53, %r3622, 0;
	@%p53 bra 	$L__BB0_29;
// %bb.27:                              // %__nv_fmaf_rn.exit4.i.i.i1022.preheader
	mov.f32 	%f319, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f318,%f319;
	// end inline asm
$L__BB0_28:                             // %__nv_fmaf_rn.exit4.i.i.i1022
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r356, %r3622, 192937984;
	add.s32 	%r357, %r3621, %r356;
	mov.b32 	%f320, %r357;
	mul.f32 	%f321, %f318, %f320;
	sub.f32 	%f322, %f320, %f321;
	fma.rn.f32 	%f323, %f322, %f318, %f321;
	sub.f32 	%f324, %f320, %f323;
	fma.rz.f32 	%f325, %f324, %f318, %f323;
	cvt.rzi.f32.f32 	%f326, %f325;
	sub.f32 	%f738, %f320, %f326;
	sub.s32 	%r3622, %r3622, %r356;
	mov.b32 	%r3621, %f738;
	setp.ne.s32 	%p54, %r3622, 0;
	setp.ne.s32 	%p55, %r3621, 0;
	and.pred  	%p56, %p54, %p55;
	@%p56 bra 	$L__BB0_28;
$L__BB0_29:                             // %__internal_fmodf_slowpath_mod.exit.i.i1024
	setp.gt.u32 	%p57, %r16, 2139095039;
	selp.f32 	%f327, 0f7FFFFFFF, 0f4B800000, %p57;
	mul.f32 	%f328, %f738, 0f34000000;
	mul.f32 	%f739, %f327, %f328;
	bra.uni 	$L__BB0_30;
$L__BB0_20:                             // %__nv_fast_fdividef.exit.i.i.i1001
	mov.f32 	%f310, 0f40000000;
	div.approx.f32 	%f311, %f739, %f310;
	cvt.rzi.f32.f32 	%f737, %f311;
	fma.rn.f32 	%f27, %f737, 0fC0000000, %f739;
	mov.b32 	%r15, %f27;
	setp.lt.u32 	%p48, %r15, 1073741824;
	@%p48 bra 	$L__BB0_25;
// %bb.21:
	setp.lt.u32 	%p49, %r15, -2147483647;
	@%p49 bra 	$L__BB0_23;
// %bb.22:
	add.f32 	%f316, %f737, 0fBF800000;
	setp.lt.f32 	%p52, %f27, 0fC0000000;
	add.f32 	%f317, %f316, 0fBF800000;
	selp.f32 	%f737, %f317, %f316, %p52;
	bra.uni 	$L__BB0_25;
$L__BB0_23:
	add.f32 	%f737, %f737, 0f3F800000;
	setp.ltu.f32 	%p50, %f27, 0f40800000;
	@%p50 bra 	$L__BB0_25;
// %bb.24:                              // %__nv_fmaf_rn.exit.i.i.i1005
	add.f32 	%f312, %f737, 0f3F800000;
	fma.rn.f32 	%f314, %f310, 0fC0400000, %f27;
	setp.ge.f32 	%p51, %f314, 0f00000000;
	add.f32 	%f315, %f312, 0f3F800000;
	selp.f32 	%f737, %f315, %f312, %p51;
$L__BB0_25:                             // %__internal_fmodf_fastpath_quot.exit.i.i1008
	fma.rn.f32 	%f739, %f737, 0fC0000000, %f739;
$L__BB0_30:                             // %__internal_fmodf_kernel.exit.i1027
	abs.f32 	%f329, %f739;
	setp.gtu.f32 	%p58, %f329, 0f7F800000;
	@%p58 bra 	$L__BB0_32;
// %bb.31:
	mov.b32 	%r358, %f24;
	and.b32  	%r359, %r358, -2147483648;
	mov.b32 	%r360, %f739;
	or.b32  	%r361, %r359, %r360;
	mov.b32 	%f739, %r361;
$L__BB0_32:                             // %__nv_fmodf.exit1028
	add.f32 	%f330, %f739, %f739;
	mov.b32 	%r362, %f330;
	and.b32  	%r363, %r362, -2147483648;
	or.b32  	%r364, %r363, 1056964608;
	mov.b32 	%f331, %r364;
	add.f32 	%f332, %f330, %f331;
	cvt.rzi.f32.f32 	%f333, %f332;
	abs.f32 	%f334, %f330;
	setp.gt.f32 	%p59, %f334, 0f4B000000;
	selp.f32 	%f335, %f330, %f333, %p59;
	cvt.rzi.f32.f32 	%f336, %f330;
	setp.lt.f32 	%p60, %f334, 0f3F000000;
	selp.f32 	%f337, %f336, %f335, %p60;
	cvt.rzi.s32.f32 	%r365, %f337;
	fma.rn.f32 	%f338, %f337, 0fBF000000, %f739;
	mul.f32 	%f339, %f338, %f338;
	fma.rn.f32 	%f340, %f339, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f341, %f339, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f342, %f340, %f339, 0fC0A55DF6;
	fma.rn.f32 	%f343, %f341, %f339, 0f4081E0CF;
	fma.rn.f32 	%f344, %f339, %f338, 0f00000000;
	fma.rn.f32 	%f345, %f343, %f339, 0fC09DE9E6;
	fma.rn.f32 	%f346, %f342, %f344, 0f00000000;
	fma.rn.f32 	%f347, %f345, %f339, 0f3F800000;
	fma.rn.f32 	%f348, %f338, 0f40490FDB, %f346;
	and.b32  	%r366, %r365, 1;
	setp.eq.b32 	%p61, %r366, 1;
	selp.f32 	%f349, %f347, %f348, %p61;
	selp.f32 	%f350, %f348, %f347, %p61;
	and.b32  	%r367, %r365, 2;
	setp.eq.s32 	%p62, %r367, 0;
	neg.f32 	%f351, %f349;
	selp.f32 	%f352, %f349, %f351, %p62;
	add.s32 	%r368, %r365, 1;
	and.b32  	%r369, %r368, 2;
	setp.eq.s32 	%p63, %r369, 0;
	mov.f32 	%f353, 0f00000000;
	sub.f32 	%f354, %f353, %f350;
	selp.f32 	%f355, %f350, %f354, %p63;
	cvt.rzi.f32.f32 	%f356, %f739;
	setp.eq.f32 	%p64, %f356, %f739;
	mul.f32 	%f357, %f739, 0f00000000;
	selp.f32 	%f742, %f357, %f352, %p64;
	abs.f32 	%f358, %f739;
	setp.gt.f32 	%p65, %f358, 0f4B800000;
	add.f32 	%f359, %f742, 0f3F800000;
	selp.f32 	%f741, %f359, %f355, %p65;
$L__BB0_33:                             // %L276
	fma.rn.f32 	%f239, %f237, %f233, 0fC09DE9E6;
	fma.rn.f32 	%f240, %f236, %f238, 0f00000000;
	and.b32  	%r328, %r327, 1;
	setp.gt.u32 	%p67, %r3, 23;
	or.pred  	%p1, %p24, %p67;
	mov.f32 	%f730, 0f40400000;
	mov.f32 	%f747, %f223;
	mov.f32 	%f748, %f223;
	@%p1 bra 	$L__BB0_49;
// %bb.34:                              // %L314
	cvt.u16.u32 	%rs10, %r3617;
	and.b16  	%rs11, %rs10, 255;
	mul.lo.s16 	%rs12, %rs11, 171;
	shr.u16 	%rs13, %rs12, 10;
	mul.lo.s16 	%rs14, %rs13, 6;
	sub.s16 	%rs15, %rs10, %rs14;
	and.b16  	%rs16, %rs15, 255;
	cvt.rn.f32.u16 	%f361, %rs16;
	div.approx.f32 	%f45, %f361, %f730;
	abs.f32 	%f745, %f45;
	setp.lt.f32 	%p68, %f745, 0f40000000;
	@%p68 bra 	$L__BB0_46;
// %bb.35:
	setp.gtu.f32 	%p69, %f745, 0f4B800000;
	@%p69 bra 	$L__BB0_42;
	bra.uni 	$L__BB0_36;
$L__BB0_42:
	mov.b32 	%r26, %f745;
	and.b32  	%r377, %r26, 8388607;
	or.b32  	%r3623, %r377, 1065353216;
	mov.b32 	%f744, %r3623;
	add.s32 	%r378, %r26, -1073741824;
	and.b32  	%r3624, %r378, -8388608;
	setp.eq.s32 	%p75, %r3624, 0;
	@%p75 bra 	$L__BB0_45;
// %bb.43:                              // %__nv_fmaf_rn.exit4.i.i.i1053.preheader
	mov.f32 	%f372, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f371,%f372;
	// end inline asm
$L__BB0_44:                             // %__nv_fmaf_rn.exit4.i.i.i1053
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r379, %r3624, 192937984;
	add.s32 	%r380, %r3623, %r379;
	mov.b32 	%f373, %r380;
	mul.f32 	%f374, %f371, %f373;
	sub.f32 	%f375, %f373, %f374;
	fma.rn.f32 	%f376, %f375, %f371, %f374;
	sub.f32 	%f377, %f373, %f376;
	fma.rz.f32 	%f378, %f377, %f371, %f376;
	cvt.rzi.f32.f32 	%f379, %f378;
	sub.f32 	%f744, %f373, %f379;
	sub.s32 	%r3624, %r3624, %r379;
	mov.b32 	%r3623, %f744;
	setp.ne.s32 	%p76, %r3624, 0;
	setp.ne.s32 	%p77, %r3623, 0;
	and.pred  	%p78, %p76, %p77;
	@%p78 bra 	$L__BB0_44;
$L__BB0_45:                             // %__internal_fmodf_slowpath_mod.exit.i.i1055
	setp.gt.u32 	%p79, %r26, 2139095039;
	selp.f32 	%f380, 0f7FFFFFFF, 0f4B800000, %p79;
	mul.f32 	%f381, %f744, 0f34000000;
	mul.f32 	%f745, %f380, %f381;
	bra.uni 	$L__BB0_46;
$L__BB0_36:                             // %__nv_fast_fdividef.exit.i.i.i1032
	mov.f32 	%f363, 0f40000000;
	div.approx.f32 	%f364, %f745, %f363;
	cvt.rzi.f32.f32 	%f743, %f364;
	fma.rn.f32 	%f48, %f743, 0fC0000000, %f745;
	mov.b32 	%r25, %f48;
	setp.lt.u32 	%p70, %r25, 1073741824;
	@%p70 bra 	$L__BB0_41;
// %bb.37:
	setp.lt.u32 	%p71, %r25, -2147483647;
	@%p71 bra 	$L__BB0_39;
// %bb.38:
	add.f32 	%f369, %f743, 0fBF800000;
	setp.lt.f32 	%p74, %f48, 0fC0000000;
	add.f32 	%f370, %f369, 0fBF800000;
	selp.f32 	%f743, %f370, %f369, %p74;
	bra.uni 	$L__BB0_41;
$L__BB0_39:
	add.f32 	%f743, %f743, 0f3F800000;
	setp.ltu.f32 	%p72, %f48, 0f40800000;
	@%p72 bra 	$L__BB0_41;
// %bb.40:                              // %__nv_fmaf_rn.exit.i.i.i1036
	add.f32 	%f365, %f743, 0f3F800000;
	fma.rn.f32 	%f367, %f363, 0fC0400000, %f48;
	setp.ge.f32 	%p73, %f367, 0f00000000;
	add.f32 	%f368, %f365, 0f3F800000;
	selp.f32 	%f743, %f368, %f365, %p73;
$L__BB0_41:                             // %__internal_fmodf_fastpath_quot.exit.i.i1039
	fma.rn.f32 	%f745, %f743, 0fC0000000, %f745;
$L__BB0_46:                             // %__internal_fmodf_kernel.exit.i1058
	abs.f32 	%f382, %f745;
	setp.gtu.f32 	%p80, %f382, 0f7F800000;
	@%p80 bra 	$L__BB0_48;
// %bb.47:
	mov.b32 	%r381, %f45;
	and.b32  	%r382, %r381, -2147483648;
	mov.b32 	%r383, %f745;
	or.b32  	%r384, %r382, %r383;
	mov.b32 	%f745, %r384;
$L__BB0_48:                             // %__nv_fmodf.exit1059
	add.f32 	%f383, %f745, %f745;
	mov.b32 	%r385, %f383;
	and.b32  	%r386, %r385, -2147483648;
	or.b32  	%r387, %r386, 1056964608;
	mov.b32 	%f384, %r387;
	add.f32 	%f385, %f383, %f384;
	cvt.rzi.f32.f32 	%f386, %f385;
	abs.f32 	%f387, %f383;
	setp.gt.f32 	%p81, %f387, 0f4B000000;
	selp.f32 	%f388, %f383, %f386, %p81;
	cvt.rzi.f32.f32 	%f389, %f383;
	setp.lt.f32 	%p82, %f387, 0f3F000000;
	selp.f32 	%f390, %f389, %f388, %p82;
	cvt.rzi.s32.f32 	%r388, %f390;
	fma.rn.f32 	%f391, %f390, 0fBF000000, %f745;
	mul.f32 	%f392, %f391, %f391;
	fma.rn.f32 	%f393, %f392, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f394, %f392, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f395, %f393, %f392, 0fC0A55DF6;
	fma.rn.f32 	%f396, %f394, %f392, 0f4081E0CF;
	fma.rn.f32 	%f397, %f392, %f391, 0f00000000;
	fma.rn.f32 	%f398, %f396, %f392, 0fC09DE9E6;
	fma.rn.f32 	%f399, %f395, %f397, 0f00000000;
	fma.rn.f32 	%f400, %f398, %f392, 0f3F800000;
	fma.rn.f32 	%f401, %f391, 0f40490FDB, %f399;
	and.b32  	%r389, %r388, 1;
	setp.eq.b32 	%p83, %r389, 1;
	selp.f32 	%f402, %f400, %f401, %p83;
	selp.f32 	%f403, %f401, %f400, %p83;
	and.b32  	%r390, %r388, 2;
	setp.eq.s32 	%p84, %r390, 0;
	neg.f32 	%f404, %f402;
	selp.f32 	%f405, %f402, %f404, %p84;
	add.s32 	%r391, %r388, 1;
	and.b32  	%r392, %r391, 2;
	setp.eq.s32 	%p85, %r392, 0;
	mov.f32 	%f406, 0f00000000;
	sub.f32 	%f407, %f406, %f403;
	selp.f32 	%f408, %f403, %f407, %p85;
	cvt.rzi.f32.f32 	%f409, %f745;
	setp.eq.f32 	%p86, %f409, %f745;
	mul.f32 	%f410, %f745, 0f00000000;
	selp.f32 	%f748, %f410, %f405, %p86;
	abs.f32 	%f411, %f745;
	setp.gt.f32 	%p87, %f411, 0f4B800000;
	add.f32 	%f412, %f748, 0f3F800000;
	selp.f32 	%f747, %f412, %f408, %p87;
$L__BB0_49:                             // %L348
	fma.rn.f32 	%f241, %f239, %f233, 0f3F800000;
	fma.rn.f32 	%f242, %f232, 0f40490FDB, %f240;
	setp.eq.b32 	%p19, %r328, 1;
	or.pred  	%p2, %p45, %p67;
	mov.f32 	%f753, %f223;
	mov.f32 	%f754, %f223;
	@%p2 bra 	$L__BB0_65;
// %bb.50:                              // %L356
	mul.hi.u32 	%r394, %r3618, -1431655765;
	shr.u32 	%r395, %r394, 2;
	mul.lo.s32 	%r396, %r395, 6;
	sub.s32 	%r397, %r3618, %r396;
	cvt.rn.f32.s32 	%f414, %r397;
	div.approx.f32 	%f66, %f414, %f730;
	abs.f32 	%f751, %f66;
	setp.lt.f32 	%p90, %f751, 0f40000000;
	@%p90 bra 	$L__BB0_62;
// %bb.51:
	setp.gtu.f32 	%p91, %f751, 0f4B800000;
	@%p91 bra 	$L__BB0_58;
	bra.uni 	$L__BB0_52;
$L__BB0_58:
	mov.b32 	%r34, %f751;
	and.b32  	%r398, %r34, 8388607;
	or.b32  	%r3625, %r398, 1065353216;
	mov.b32 	%f750, %r3625;
	add.s32 	%r399, %r34, -1073741824;
	and.b32  	%r3626, %r399, -8388608;
	setp.eq.s32 	%p97, %r3626, 0;
	@%p97 bra 	$L__BB0_61;
// %bb.59:                              // %__nv_fmaf_rn.exit4.i.i.i1084.preheader
	mov.f32 	%f425, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f424,%f425;
	// end inline asm
$L__BB0_60:                             // %__nv_fmaf_rn.exit4.i.i.i1084
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r400, %r3626, 192937984;
	add.s32 	%r401, %r3625, %r400;
	mov.b32 	%f426, %r401;
	mul.f32 	%f427, %f424, %f426;
	sub.f32 	%f428, %f426, %f427;
	fma.rn.f32 	%f429, %f428, %f424, %f427;
	sub.f32 	%f430, %f426, %f429;
	fma.rz.f32 	%f431, %f430, %f424, %f429;
	cvt.rzi.f32.f32 	%f432, %f431;
	sub.f32 	%f750, %f426, %f432;
	sub.s32 	%r3626, %r3626, %r400;
	mov.b32 	%r3625, %f750;
	setp.ne.s32 	%p98, %r3626, 0;
	setp.ne.s32 	%p99, %r3625, 0;
	and.pred  	%p100, %p98, %p99;
	@%p100 bra 	$L__BB0_60;
$L__BB0_61:                             // %__internal_fmodf_slowpath_mod.exit.i.i1086
	setp.gt.u32 	%p101, %r34, 2139095039;
	selp.f32 	%f433, 0f7FFFFFFF, 0f4B800000, %p101;
	mul.f32 	%f434, %f750, 0f34000000;
	mul.f32 	%f751, %f433, %f434;
	bra.uni 	$L__BB0_62;
$L__BB0_52:                             // %__nv_fast_fdividef.exit.i.i.i1063
	mov.f32 	%f416, 0f40000000;
	div.approx.f32 	%f417, %f751, %f416;
	cvt.rzi.f32.f32 	%f749, %f417;
	fma.rn.f32 	%f69, %f749, 0fC0000000, %f751;
	mov.b32 	%r33, %f69;
	setp.lt.u32 	%p92, %r33, 1073741824;
	@%p92 bra 	$L__BB0_57;
// %bb.53:
	setp.lt.u32 	%p93, %r33, -2147483647;
	@%p93 bra 	$L__BB0_55;
// %bb.54:
	add.f32 	%f422, %f749, 0fBF800000;
	setp.lt.f32 	%p96, %f69, 0fC0000000;
	add.f32 	%f423, %f422, 0fBF800000;
	selp.f32 	%f749, %f423, %f422, %p96;
	bra.uni 	$L__BB0_57;
$L__BB0_55:
	add.f32 	%f749, %f749, 0f3F800000;
	setp.ltu.f32 	%p94, %f69, 0f40800000;
	@%p94 bra 	$L__BB0_57;
// %bb.56:                              // %__nv_fmaf_rn.exit.i.i.i1067
	add.f32 	%f418, %f749, 0f3F800000;
	fma.rn.f32 	%f420, %f416, 0fC0400000, %f69;
	setp.ge.f32 	%p95, %f420, 0f00000000;
	add.f32 	%f421, %f418, 0f3F800000;
	selp.f32 	%f749, %f421, %f418, %p95;
$L__BB0_57:                             // %__internal_fmodf_fastpath_quot.exit.i.i1070
	fma.rn.f32 	%f751, %f749, 0fC0000000, %f751;
$L__BB0_62:                             // %__internal_fmodf_kernel.exit.i1089
	abs.f32 	%f435, %f751;
	setp.gtu.f32 	%p102, %f435, 0f7F800000;
	@%p102 bra 	$L__BB0_64;
// %bb.63:
	mov.b32 	%r402, %f66;
	and.b32  	%r403, %r402, -2147483648;
	mov.b32 	%r404, %f751;
	or.b32  	%r405, %r403, %r404;
	mov.b32 	%f751, %r405;
$L__BB0_64:                             // %__nv_fmodf.exit1090
	add.f32 	%f436, %f751, %f751;
	mov.b32 	%r406, %f436;
	and.b32  	%r407, %r406, -2147483648;
	or.b32  	%r408, %r407, 1056964608;
	mov.b32 	%f437, %r408;
	add.f32 	%f438, %f436, %f437;
	cvt.rzi.f32.f32 	%f439, %f438;
	abs.f32 	%f440, %f436;
	setp.gt.f32 	%p103, %f440, 0f4B000000;
	selp.f32 	%f441, %f436, %f439, %p103;
	cvt.rzi.f32.f32 	%f442, %f436;
	setp.lt.f32 	%p104, %f440, 0f3F000000;
	selp.f32 	%f443, %f442, %f441, %p104;
	cvt.rzi.s32.f32 	%r409, %f443;
	fma.rn.f32 	%f444, %f443, 0fBF000000, %f751;
	mul.f32 	%f445, %f444, %f444;
	fma.rn.f32 	%f446, %f445, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f447, %f445, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f448, %f446, %f445, 0fC0A55DF6;
	fma.rn.f32 	%f449, %f447, %f445, 0f4081E0CF;
	fma.rn.f32 	%f450, %f445, %f444, 0f00000000;
	fma.rn.f32 	%f451, %f449, %f445, 0fC09DE9E6;
	fma.rn.f32 	%f452, %f448, %f450, 0f00000000;
	fma.rn.f32 	%f453, %f451, %f445, 0f3F800000;
	fma.rn.f32 	%f454, %f444, 0f40490FDB, %f452;
	and.b32  	%r410, %r409, 1;
	setp.eq.b32 	%p105, %r410, 1;
	selp.f32 	%f455, %f453, %f454, %p105;
	selp.f32 	%f456, %f454, %f453, %p105;
	and.b32  	%r411, %r409, 2;
	setp.eq.s32 	%p106, %r411, 0;
	neg.f32 	%f457, %f455;
	selp.f32 	%f458, %f455, %f457, %p106;
	add.s32 	%r412, %r409, 1;
	and.b32  	%r413, %r412, 2;
	setp.eq.s32 	%p107, %r413, 0;
	mov.f32 	%f459, 0f00000000;
	sub.f32 	%f460, %f459, %f456;
	selp.f32 	%f461, %f456, %f460, %p107;
	cvt.rzi.f32.f32 	%f462, %f751;
	setp.eq.f32 	%p108, %f462, %f751;
	mul.f32 	%f463, %f751, 0f00000000;
	selp.f32 	%f754, %f463, %f458, %p108;
	abs.f32 	%f464, %f751;
	setp.gt.f32 	%p109, %f464, 0f4B800000;
	add.f32 	%f465, %f754, 0f3F800000;
	selp.f32 	%f753, %f465, %f461, %p109;
$L__BB0_65:                             // %L390
	selp.f32 	%f243, %f241, %f242, %p19;
	and.b32  	%r329, %r327, 2;
	@%p4 bra 	$L__BB0_182;
// %bb.66:
	@%p247 bra 	$L__BB0_178;
	bra.uni 	$L__BB0_67;
$L__BB0_178:
	mov.b32 	%r235, %f785;
	and.b32  	%r426, %r235, 8388607;
	or.b32  	%r3718, %r426, 1065353216;
	mov.b32 	%f784, %r3718;
	add.s32 	%r427, %r235, -1073741824;
	and.b32  	%r3719, %r427, -8388608;
	setp.eq.s32 	%p117, %r3719, 0;
	@%p117 bra 	$L__BB0_181;
// %bb.179:                             // %__nv_fmaf_rn.exit4.i.i.i1115.preheader
	mov.f32 	%f475, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f474,%f475;
	// end inline asm
$L__BB0_180:                            // %__nv_fmaf_rn.exit4.i.i.i1115
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r428, %r3719, 192937984;
	add.s32 	%r429, %r3718, %r428;
	mov.b32 	%f476, %r429;
	mul.f32 	%f477, %f474, %f476;
	sub.f32 	%f478, %f476, %f477;
	fma.rn.f32 	%f479, %f478, %f474, %f477;
	sub.f32 	%f480, %f476, %f479;
	fma.rz.f32 	%f481, %f480, %f474, %f479;
	cvt.rzi.f32.f32 	%f482, %f481;
	sub.f32 	%f784, %f476, %f482;
	sub.s32 	%r3719, %r3719, %r428;
	mov.b32 	%r3718, %f784;
	setp.ne.s32 	%p118, %r3719, 0;
	setp.ne.s32 	%p119, %r3718, 0;
	and.pred  	%p120, %p118, %p119;
	@%p120 bra 	$L__BB0_180;
$L__BB0_181:                            // %__internal_fmodf_slowpath_mod.exit.i.i1117
	setp.gt.u32 	%p121, %r235, 2139095039;
	selp.f32 	%f483, 0f7FFFFFFF, 0f4B800000, %p121;
	mul.f32 	%f484, %f784, 0f34000000;
	mul.f32 	%f785, %f483, %f484;
	bra.uni 	$L__BB0_182;
$L__BB0_67:                             // %__nv_fast_fdividef.exit.i.i.i1094
	mov.f32 	%f466, 0f40000000;
	div.approx.f32 	%f467, %f785, %f466;
	cvt.rzi.f32.f32 	%f783, %f467;
	fma.rn.f32 	%f187, %f783, 0fC0000000, %f785;
	mov.b32 	%r234, %f187;
	setp.lt.u32 	%p112, %r234, 1073741824;
	@%p112 bra 	$L__BB0_177;
// %bb.68:
	setp.lt.u32 	%p113, %r234, -2147483647;
	@%p113 bra 	$L__BB0_175;
// %bb.69:
	add.f32 	%f472, %f783, 0fBF800000;
	setp.lt.f32 	%p116, %f187, 0fC0000000;
	add.f32 	%f473, %f472, 0fBF800000;
	selp.f32 	%f783, %f473, %f472, %p116;
	bra.uni 	$L__BB0_177;
$L__BB0_175:
	add.f32 	%f783, %f783, 0f3F800000;
	setp.ltu.f32 	%p114, %f187, 0f40800000;
	@%p114 bra 	$L__BB0_177;
// %bb.176:                             // %__nv_fmaf_rn.exit.i.i.i1098
	add.f32 	%f468, %f783, 0f3F800000;
	fma.rn.f32 	%f470, %f466, 0fC0400000, %f187;
	setp.ge.f32 	%p115, %f470, 0f00000000;
	add.f32 	%f471, %f468, 0f3F800000;
	selp.f32 	%f783, %f471, %f468, %p115;
$L__BB0_177:                            // %__internal_fmodf_fastpath_quot.exit.i.i1101
	fma.rn.f32 	%f785, %f783, 0fC0000000, %f785;
$L__BB0_182:                            // %__internal_fmodf_kernel.exit.i1120
	setp.eq.s32 	%p20, %r329, 0;
	neg.f32 	%f245, %f243;
	add.s32 	%r330, %r327, 1;
	cvt.rzi.f32.f32 	%f249, %f781;
	abs.f32 	%f485, %f785;
	setp.gtu.f32 	%p122, %f485, 0f7F800000;
	@%p122 bra 	$L__BB0_184;
// %bb.183:
	mov.b32 	%r430, %f785;
	or.b32  	%r431, %r228, %r430;
	mov.b32 	%f785, %r431;
$L__BB0_184:                            // %__nv_fmodf.exit1121
	selp.f32 	%f244, %f242, %f241, %p19;
	selp.f32 	%f246, %f243, %f245, %p20;
	and.b32  	%r331, %r330, 2;
	setp.eq.f32 	%p22, %f249, %f781;
	mul.f32 	%f250, %f781, 0f00000000;
	add.f32 	%f487, %f785, %f785;
	mov.b32 	%r438, %f487;
	and.b32  	%r439, %r438, -2147483648;
	or.b32  	%r440, %r439, 1056964608;
	mov.b32 	%f488, %r440;
	add.f32 	%f489, %f487, %f488;
	cvt.rzi.f32.f32 	%f490, %f489;
	abs.f32 	%f491, %f487;
	setp.gt.f32 	%p124, %f491, 0f4B000000;
	selp.f32 	%f492, %f487, %f490, %p124;
	cvt.rzi.f32.f32 	%f493, %f487;
	setp.lt.f32 	%p125, %f491, 0f3F000000;
	selp.f32 	%f494, %f493, %f492, %p125;
	cvt.rzi.s32.f32 	%r441, %f494;
	fma.rn.f32 	%f495, %f494, 0fBF000000, %f785;
	mul.f32 	%f496, %f495, %f495;
	fma.rn.f32 	%f497, %f496, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f498, %f496, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f499, %f497, %f496, 0fC0A55DF6;
	fma.rn.f32 	%f500, %f498, %f496, 0f4081E0CF;
	fma.rn.f32 	%f501, %f496, %f495, 0f00000000;
	fma.rn.f32 	%f502, %f500, %f496, 0fC09DE9E6;
	fma.rn.f32 	%f503, %f499, %f501, 0f00000000;
	fma.rn.f32 	%f504, %f502, %f496, 0f3F800000;
	fma.rn.f32 	%f505, %f495, 0f40490FDB, %f503;
	and.b32  	%r442, %r441, 1;
	setp.eq.b32 	%p126, %r442, 1;
	selp.f32 	%f506, %f504, %f505, %p126;
	selp.f32 	%f507, %f505, %f504, %p126;
	and.b32  	%r443, %r441, 2;
	setp.eq.s32 	%p127, %r443, 0;
	neg.f32 	%f508, %f506;
	selp.f32 	%f509, %f506, %f508, %p127;
	add.s32 	%r444, %r441, 1;
	and.b32  	%r445, %r444, 2;
	mov.f32 	%f777, 0f00000000;
	cvt.rzi.f32.f32 	%f512, %f785;
	setp.eq.f32 	%p129, %f512, %f785;
	mul.f32 	%f513, %f785, 0f00000000;
	mov.f32 	%f759, %f777;
	mov.f32 	%f760, %f777;
	@%p24 bra 	$L__BB0_85;
// %bb.70:                              // %L492
	cvt.u16.u32 	%rs17, %r3617;
	and.b16  	%rs18, %rs17, 255;
	mul.lo.s16 	%rs19, %rs18, 171;
	shr.u16 	%rs20, %rs19, 13;
	mul.lo.s16 	%rs21, %rs20, 48;
	sub.s16 	%rs22, %rs17, %rs21;
	and.b16  	%rs23, %rs22, 255;
	cvt.rn.f32.u16 	%f518, %rs23;
	div.approx.f32 	%f87, %f518, %f729;
	abs.f32 	%f757, %f87;
	setp.lt.f32 	%p131, %f757, 0f40000000;
	@%p131 bra 	$L__BB0_82;
// %bb.71:
	setp.gtu.f32 	%p132, %f757, 0f4B800000;
	@%p132 bra 	$L__BB0_78;
	bra.uni 	$L__BB0_72;
$L__BB0_78:
	mov.b32 	%r46, %f757;
	and.b32  	%r447, %r46, 8388607;
	or.b32  	%r3627, %r447, 1065353216;
	mov.b32 	%f756, %r3627;
	add.s32 	%r448, %r46, -1073741824;
	and.b32  	%r3628, %r448, -8388608;
	setp.eq.s32 	%p138, %r3628, 0;
	@%p138 bra 	$L__BB0_81;
// %bb.79:                              // %__nv_fmaf_rn.exit4.i.i.i1146.preheader
	mov.f32 	%f529, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f528,%f529;
	// end inline asm
$L__BB0_80:                             // %__nv_fmaf_rn.exit4.i.i.i1146
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r449, %r3628, 192937984;
	add.s32 	%r450, %r3627, %r449;
	mov.b32 	%f530, %r450;
	mul.f32 	%f531, %f528, %f530;
	sub.f32 	%f532, %f530, %f531;
	fma.rn.f32 	%f533, %f532, %f528, %f531;
	sub.f32 	%f534, %f530, %f533;
	fma.rz.f32 	%f535, %f534, %f528, %f533;
	cvt.rzi.f32.f32 	%f536, %f535;
	sub.f32 	%f756, %f530, %f536;
	sub.s32 	%r3628, %r3628, %r449;
	mov.b32 	%r3627, %f756;
	setp.ne.s32 	%p139, %r3628, 0;
	setp.ne.s32 	%p140, %r3627, 0;
	and.pred  	%p141, %p139, %p140;
	@%p141 bra 	$L__BB0_80;
$L__BB0_81:                             // %__internal_fmodf_slowpath_mod.exit.i.i1148
	setp.gt.u32 	%p142, %r46, 2139095039;
	selp.f32 	%f537, 0f7FFFFFFF, 0f4B800000, %p142;
	mul.f32 	%f538, %f756, 0f34000000;
	mul.f32 	%f757, %f537, %f538;
	bra.uni 	$L__BB0_82;
$L__BB0_72:                             // %__nv_fast_fdividef.exit.i.i.i1125
	mov.f32 	%f520, 0f40000000;
	div.approx.f32 	%f521, %f757, %f520;
	cvt.rzi.f32.f32 	%f755, %f521;
	fma.rn.f32 	%f90, %f755, 0fC0000000, %f757;
	mov.b32 	%r45, %f90;
	setp.lt.u32 	%p133, %r45, 1073741824;
	@%p133 bra 	$L__BB0_77;
// %bb.73:
	setp.lt.u32 	%p134, %r45, -2147483647;
	@%p134 bra 	$L__BB0_75;
// %bb.74:
	add.f32 	%f526, %f755, 0fBF800000;
	setp.lt.f32 	%p137, %f90, 0fC0000000;
	add.f32 	%f527, %f526, 0fBF800000;
	selp.f32 	%f755, %f527, %f526, %p137;
	bra.uni 	$L__BB0_77;
$L__BB0_75:
	add.f32 	%f755, %f755, 0f3F800000;
	setp.ltu.f32 	%p135, %f90, 0f40800000;
	@%p135 bra 	$L__BB0_77;
// %bb.76:                              // %__nv_fmaf_rn.exit.i.i.i1129
	add.f32 	%f522, %f755, 0f3F800000;
	fma.rn.f32 	%f524, %f520, 0fC0400000, %f90;
	setp.ge.f32 	%p136, %f524, 0f00000000;
	add.f32 	%f525, %f522, 0f3F800000;
	selp.f32 	%f755, %f525, %f522, %p136;
$L__BB0_77:                             // %__internal_fmodf_fastpath_quot.exit.i.i1132
	fma.rn.f32 	%f757, %f755, 0fC0000000, %f757;
$L__BB0_82:                             // %__internal_fmodf_kernel.exit.i1151
	abs.f32 	%f539, %f757;
	setp.gtu.f32 	%p143, %f539, 0f7F800000;
	@%p143 bra 	$L__BB0_84;
// %bb.83:
	mov.b32 	%r451, %f87;
	and.b32  	%r452, %r451, -2147483648;
	mov.b32 	%r453, %f757;
	or.b32  	%r454, %r452, %r453;
	mov.b32 	%f757, %r454;
$L__BB0_84:                             // %__nv_fmodf.exit1152
	add.f32 	%f540, %f757, %f757;
	mov.b32 	%r455, %f540;
	and.b32  	%r456, %r455, -2147483648;
	or.b32  	%r457, %r456, 1056964608;
	mov.b32 	%f541, %r457;
	add.f32 	%f542, %f540, %f541;
	cvt.rzi.f32.f32 	%f543, %f542;
	abs.f32 	%f544, %f540;
	setp.gt.f32 	%p144, %f544, 0f4B000000;
	selp.f32 	%f545, %f540, %f543, %p144;
	cvt.rzi.f32.f32 	%f546, %f540;
	setp.lt.f32 	%p145, %f544, 0f3F000000;
	selp.f32 	%f547, %f546, %f545, %p145;
	cvt.rzi.s32.f32 	%r458, %f547;
	fma.rn.f32 	%f548, %f547, 0fBF000000, %f757;
	mul.f32 	%f549, %f548, %f548;
	fma.rn.f32 	%f550, %f549, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f551, %f549, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f552, %f550, %f549, 0fC0A55DF6;
	fma.rn.f32 	%f553, %f551, %f549, 0f4081E0CF;
	fma.rn.f32 	%f554, %f549, %f548, 0f00000000;
	fma.rn.f32 	%f555, %f553, %f549, 0fC09DE9E6;
	fma.rn.f32 	%f556, %f552, %f554, 0f00000000;
	fma.rn.f32 	%f557, %f555, %f549, 0f3F800000;
	fma.rn.f32 	%f558, %f548, 0f40490FDB, %f556;
	and.b32  	%r459, %r458, 1;
	setp.eq.b32 	%p146, %r459, 1;
	selp.f32 	%f559, %f557, %f558, %p146;
	selp.f32 	%f560, %f558, %f557, %p146;
	and.b32  	%r460, %r458, 2;
	setp.eq.s32 	%p147, %r460, 0;
	neg.f32 	%f561, %f559;
	selp.f32 	%f562, %f559, %f561, %p147;
	add.s32 	%r461, %r458, 1;
	and.b32  	%r462, %r461, 2;
	setp.eq.s32 	%p148, %r462, 0;
	mov.f32 	%f563, 0f00000000;
	sub.f32 	%f564, %f563, %f560;
	selp.f32 	%f565, %f560, %f564, %p148;
	cvt.rzi.f32.f32 	%f566, %f757;
	setp.eq.f32 	%p149, %f566, %f757;
	mul.f32 	%f567, %f757, 0f00000000;
	selp.f32 	%f760, %f567, %f562, %p149;
	abs.f32 	%f568, %f757;
	setp.gt.f32 	%p150, %f568, 0f4B800000;
	add.f32 	%f569, %f760, 0f3F800000;
	selp.f32 	%f759, %f569, %f565, %p150;
$L__BB0_85:                             // %L526
	setp.eq.s32 	%p21, %r331, 0;
	sub.f32 	%f247, %f223, %f244;
	selp.f32 	%f251, %f250, %f246, %p22;
	abs.f32 	%f252, %f781;
	setp.eq.s32 	%p128, %r445, 0;
	sub.f32 	%f510, %f777, %f507;
	selp.f32 	%f514, %f513, %f509, %p129;
	abs.f32 	%f515, %f785;
	mov.f32 	%f765, %f777;
	mov.f32 	%f766, %f777;
	@%p45 bra 	$L__BB0_101;
// %bb.86:                              // %L530
	mul.hi.u32 	%r464, %r3618, -1431655765;
	shr.u32 	%r465, %r464, 5;
	mul.lo.s32 	%r466, %r465, 48;
	sub.s32 	%r467, %r3618, %r466;
	cvt.rn.f32.s32 	%f571, %r467;
	div.approx.f32 	%f108, %f571, %f729;
	abs.f32 	%f763, %f108;
	setp.lt.f32 	%p152, %f763, 0f40000000;
	@%p152 bra 	$L__BB0_98;
// %bb.87:
	setp.gtu.f32 	%p153, %f763, 0f4B800000;
	@%p153 bra 	$L__BB0_94;
	bra.uni 	$L__BB0_88;
$L__BB0_94:
	mov.b32 	%r54, %f763;
	and.b32  	%r468, %r54, 8388607;
	or.b32  	%r3629, %r468, 1065353216;
	mov.b32 	%f762, %r3629;
	add.s32 	%r469, %r54, -1073741824;
	and.b32  	%r3630, %r469, -8388608;
	setp.eq.s32 	%p159, %r3630, 0;
	@%p159 bra 	$L__BB0_97;
// %bb.95:                              // %__nv_fmaf_rn.exit4.i.i.i1177.preheader
	mov.f32 	%f582, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f581,%f582;
	// end inline asm
$L__BB0_96:                             // %__nv_fmaf_rn.exit4.i.i.i1177
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r470, %r3630, 192937984;
	add.s32 	%r471, %r3629, %r470;
	mov.b32 	%f583, %r471;
	mul.f32 	%f584, %f581, %f583;
	sub.f32 	%f585, %f583, %f584;
	fma.rn.f32 	%f586, %f585, %f581, %f584;
	sub.f32 	%f587, %f583, %f586;
	fma.rz.f32 	%f588, %f587, %f581, %f586;
	cvt.rzi.f32.f32 	%f589, %f588;
	sub.f32 	%f762, %f583, %f589;
	sub.s32 	%r3630, %r3630, %r470;
	mov.b32 	%r3629, %f762;
	setp.ne.s32 	%p160, %r3630, 0;
	setp.ne.s32 	%p161, %r3629, 0;
	and.pred  	%p162, %p160, %p161;
	@%p162 bra 	$L__BB0_96;
$L__BB0_97:                             // %__internal_fmodf_slowpath_mod.exit.i.i1179
	setp.gt.u32 	%p163, %r54, 2139095039;
	selp.f32 	%f590, 0f7FFFFFFF, 0f4B800000, %p163;
	mul.f32 	%f591, %f762, 0f34000000;
	mul.f32 	%f763, %f590, %f591;
	bra.uni 	$L__BB0_98;
$L__BB0_88:                             // %__nv_fast_fdividef.exit.i.i.i1156
	mov.f32 	%f573, 0f40000000;
	div.approx.f32 	%f574, %f763, %f573;
	cvt.rzi.f32.f32 	%f761, %f574;
	fma.rn.f32 	%f111, %f761, 0fC0000000, %f763;
	mov.b32 	%r53, %f111;
	setp.lt.u32 	%p154, %r53, 1073741824;
	@%p154 bra 	$L__BB0_93;
// %bb.89:
	setp.lt.u32 	%p155, %r53, -2147483647;
	@%p155 bra 	$L__BB0_91;
// %bb.90:
	add.f32 	%f579, %f761, 0fBF800000;
	setp.lt.f32 	%p158, %f111, 0fC0000000;
	add.f32 	%f580, %f579, 0fBF800000;
	selp.f32 	%f761, %f580, %f579, %p158;
	bra.uni 	$L__BB0_93;
$L__BB0_91:
	add.f32 	%f761, %f761, 0f3F800000;
	setp.ltu.f32 	%p156, %f111, 0f40800000;
	@%p156 bra 	$L__BB0_93;
// %bb.92:                              // %__nv_fmaf_rn.exit.i.i.i1160
	add.f32 	%f575, %f761, 0f3F800000;
	fma.rn.f32 	%f577, %f573, 0fC0400000, %f111;
	setp.ge.f32 	%p157, %f577, 0f00000000;
	add.f32 	%f578, %f575, 0f3F800000;
	selp.f32 	%f761, %f578, %f575, %p157;
$L__BB0_93:                             // %__internal_fmodf_fastpath_quot.exit.i.i1163
	fma.rn.f32 	%f763, %f761, 0fC0000000, %f763;
$L__BB0_98:                             // %__internal_fmodf_kernel.exit.i1182
	abs.f32 	%f592, %f763;
	setp.gtu.f32 	%p164, %f592, 0f7F800000;
	@%p164 bra 	$L__BB0_100;
// %bb.99:
	mov.b32 	%r472, %f108;
	and.b32  	%r473, %r472, -2147483648;
	mov.b32 	%r474, %f763;
	or.b32  	%r475, %r473, %r474;
	mov.b32 	%f763, %r475;
$L__BB0_100:                            // %__nv_fmodf.exit1183
	add.f32 	%f593, %f763, %f763;
	mov.b32 	%r476, %f593;
	and.b32  	%r477, %r476, -2147483648;
	or.b32  	%r478, %r477, 1056964608;
	mov.b32 	%f594, %r478;
	add.f32 	%f595, %f593, %f594;
	cvt.rzi.f32.f32 	%f596, %f595;
	abs.f32 	%f597, %f593;
	setp.gt.f32 	%p165, %f597, 0f4B000000;
	selp.f32 	%f598, %f593, %f596, %p165;
	cvt.rzi.f32.f32 	%f599, %f593;
	setp.lt.f32 	%p166, %f597, 0f3F000000;
	selp.f32 	%f600, %f599, %f598, %p166;
	cvt.rzi.s32.f32 	%r479, %f600;
	fma.rn.f32 	%f601, %f600, 0fBF000000, %f763;
	mul.f32 	%f602, %f601, %f601;
	fma.rn.f32 	%f603, %f602, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f604, %f602, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f603, %f602, 0fC0A55DF6;
	fma.rn.f32 	%f606, %f604, %f602, 0f4081E0CF;
	fma.rn.f32 	%f607, %f602, %f601, 0f00000000;
	fma.rn.f32 	%f608, %f606, %f602, 0fC09DE9E6;
	fma.rn.f32 	%f609, %f605, %f607, 0f00000000;
	fma.rn.f32 	%f610, %f608, %f602, 0f3F800000;
	fma.rn.f32 	%f611, %f601, 0f40490FDB, %f609;
	and.b32  	%r480, %r479, 1;
	setp.eq.b32 	%p167, %r480, 1;
	selp.f32 	%f612, %f610, %f611, %p167;
	selp.f32 	%f613, %f611, %f610, %p167;
	and.b32  	%r481, %r479, 2;
	setp.eq.s32 	%p168, %r481, 0;
	neg.f32 	%f614, %f612;
	selp.f32 	%f615, %f612, %f614, %p168;
	add.s32 	%r482, %r479, 1;
	and.b32  	%r483, %r482, 2;
	setp.eq.s32 	%p169, %r483, 0;
	mov.f32 	%f616, 0f00000000;
	sub.f32 	%f617, %f616, %f613;
	selp.f32 	%f618, %f613, %f617, %p169;
	cvt.rzi.f32.f32 	%f619, %f763;
	setp.eq.f32 	%p170, %f619, %f763;
	mul.f32 	%f620, %f763, 0f00000000;
	selp.f32 	%f766, %f620, %f615, %p170;
	abs.f32 	%f621, %f763;
	setp.gt.f32 	%p171, %f621, 0f4B800000;
	add.f32 	%f622, %f766, 0f3F800000;
	selp.f32 	%f765, %f622, %f618, %p171;
$L__BB0_101:                            // %L564
	selp.f32 	%f248, %f244, %f247, %p21;
	setp.gt.f32 	%p23, %f252, 0f4B800000;
	add.f32 	%f253, %f251, 0f3F800000;
	selp.f32 	%f511, %f507, %f510, %p128;
	setp.gt.f32 	%p130, %f515, 0f4B800000;
	add.f32 	%f516, %f514, 0f3F800000;
	mov.f32 	%f771, %f777;
	mov.f32 	%f772, %f777;
	@%p1 bra 	$L__BB0_117;
// %bb.102:                             // %L602
	cvt.u16.u32 	%rs24, %r3617;
	and.b16  	%rs25, %rs24, 255;
	mul.lo.s16 	%rs26, %rs25, 171;
	shr.u16 	%rs27, %rs26, 10;
	mul.lo.s16 	%rs28, %rs27, 6;
	sub.s16 	%rs29, %rs24, %rs28;
	and.b16  	%rs30, %rs29, 255;
	cvt.rn.f32.u16 	%f624, %rs30;
	div.approx.f32 	%f129, %f624, %f730;
	abs.f32 	%f769, %f129;
	setp.lt.f32 	%p172, %f769, 0f40000000;
	@%p172 bra 	$L__BB0_114;
// %bb.103:
	setp.gtu.f32 	%p173, %f769, 0f4B800000;
	@%p173 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_104;
$L__BB0_110:
	mov.b32 	%r64, %f769;
	and.b32  	%r491, %r64, 8388607;
	or.b32  	%r3631, %r491, 1065353216;
	mov.b32 	%f768, %r3631;
	add.s32 	%r492, %r64, -1073741824;
	and.b32  	%r3632, %r492, -8388608;
	setp.eq.s32 	%p179, %r3632, 0;
	@%p179 bra 	$L__BB0_113;
// %bb.111:                             // %__nv_fmaf_rn.exit4.i.i.i1208.preheader
	mov.f32 	%f635, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f634,%f635;
	// end inline asm
$L__BB0_112:                            // %__nv_fmaf_rn.exit4.i.i.i1208
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r493, %r3632, 192937984;
	add.s32 	%r494, %r3631, %r493;
	mov.b32 	%f636, %r494;
	mul.f32 	%f637, %f634, %f636;
	sub.f32 	%f638, %f636, %f637;
	fma.rn.f32 	%f639, %f638, %f634, %f637;
	sub.f32 	%f640, %f636, %f639;
	fma.rz.f32 	%f641, %f640, %f634, %f639;
	cvt.rzi.f32.f32 	%f642, %f641;
	sub.f32 	%f768, %f636, %f642;
	sub.s32 	%r3632, %r3632, %r493;
	mov.b32 	%r3631, %f768;
	setp.ne.s32 	%p180, %r3632, 0;
	setp.ne.s32 	%p181, %r3631, 0;
	and.pred  	%p182, %p180, %p181;
	@%p182 bra 	$L__BB0_112;
$L__BB0_113:                            // %__internal_fmodf_slowpath_mod.exit.i.i1210
	setp.gt.u32 	%p183, %r64, 2139095039;
	selp.f32 	%f643, 0f7FFFFFFF, 0f4B800000, %p183;
	mul.f32 	%f644, %f768, 0f34000000;
	mul.f32 	%f769, %f643, %f644;
	bra.uni 	$L__BB0_114;
$L__BB0_104:                            // %__nv_fast_fdividef.exit.i.i.i1187
	mov.f32 	%f626, 0f40000000;
	div.approx.f32 	%f627, %f769, %f626;
	cvt.rzi.f32.f32 	%f767, %f627;
	fma.rn.f32 	%f132, %f767, 0fC0000000, %f769;
	mov.b32 	%r63, %f132;
	setp.lt.u32 	%p174, %r63, 1073741824;
	@%p174 bra 	$L__BB0_109;
// %bb.105:
	setp.lt.u32 	%p175, %r63, -2147483647;
	@%p175 bra 	$L__BB0_107;
// %bb.106:
	add.f32 	%f632, %f767, 0fBF800000;
	setp.lt.f32 	%p178, %f132, 0fC0000000;
	add.f32 	%f633, %f632, 0fBF800000;
	selp.f32 	%f767, %f633, %f632, %p178;
	bra.uni 	$L__BB0_109;
$L__BB0_107:
	add.f32 	%f767, %f767, 0f3F800000;
	setp.ltu.f32 	%p176, %f132, 0f40800000;
	@%p176 bra 	$L__BB0_109;
// %bb.108:                             // %__nv_fmaf_rn.exit.i.i.i1191
	add.f32 	%f628, %f767, 0f3F800000;
	fma.rn.f32 	%f630, %f626, 0fC0400000, %f132;
	setp.ge.f32 	%p177, %f630, 0f00000000;
	add.f32 	%f631, %f628, 0f3F800000;
	selp.f32 	%f767, %f631, %f628, %p177;
$L__BB0_109:                            // %__internal_fmodf_fastpath_quot.exit.i.i1194
	fma.rn.f32 	%f769, %f767, 0fC0000000, %f769;
$L__BB0_114:                            // %__internal_fmodf_kernel.exit.i1213
	abs.f32 	%f645, %f769;
	setp.gtu.f32 	%p184, %f645, 0f7F800000;
	@%p184 bra 	$L__BB0_116;
// %bb.115:
	mov.b32 	%r495, %f129;
	and.b32  	%r496, %r495, -2147483648;
	mov.b32 	%r497, %f769;
	or.b32  	%r498, %r496, %r497;
	mov.b32 	%f769, %r498;
$L__BB0_116:                            // %__nv_fmodf.exit1214
	add.f32 	%f646, %f769, %f769;
	mov.b32 	%r499, %f646;
	and.b32  	%r500, %r499, -2147483648;
	or.b32  	%r501, %r500, 1056964608;
	mov.b32 	%f647, %r501;
	add.f32 	%f648, %f646, %f647;
	cvt.rzi.f32.f32 	%f649, %f648;
	abs.f32 	%f650, %f646;
	setp.gt.f32 	%p185, %f650, 0f4B000000;
	selp.f32 	%f651, %f646, %f649, %p185;
	cvt.rzi.f32.f32 	%f652, %f646;
	setp.lt.f32 	%p186, %f650, 0f3F000000;
	selp.f32 	%f653, %f652, %f651, %p186;
	cvt.rzi.s32.f32 	%r502, %f653;
	fma.rn.f32 	%f654, %f653, 0fBF000000, %f769;
	mul.f32 	%f655, %f654, %f654;
	fma.rn.f32 	%f656, %f655, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f657, %f655, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f658, %f656, %f655, 0fC0A55DF6;
	fma.rn.f32 	%f659, %f657, %f655, 0f4081E0CF;
	fma.rn.f32 	%f660, %f655, %f654, 0f00000000;
	fma.rn.f32 	%f661, %f659, %f655, 0fC09DE9E6;
	fma.rn.f32 	%f662, %f658, %f660, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f655, 0f3F800000;
	fma.rn.f32 	%f664, %f654, 0f40490FDB, %f662;
	and.b32  	%r503, %r502, 1;
	setp.eq.b32 	%p187, %r503, 1;
	selp.f32 	%f665, %f663, %f664, %p187;
	selp.f32 	%f666, %f664, %f663, %p187;
	and.b32  	%r504, %r502, 2;
	setp.eq.s32 	%p188, %r504, 0;
	neg.f32 	%f667, %f665;
	selp.f32 	%f668, %f665, %f667, %p188;
	add.s32 	%r505, %r502, 1;
	and.b32  	%r506, %r505, 2;
	setp.eq.s32 	%p189, %r506, 0;
	mov.f32 	%f669, 0f00000000;
	sub.f32 	%f670, %f669, %f666;
	selp.f32 	%f671, %f666, %f670, %p189;
	cvt.rzi.f32.f32 	%f672, %f769;
	setp.eq.f32 	%p190, %f672, %f769;
	mul.f32 	%f673, %f769, 0f00000000;
	selp.f32 	%f772, %f673, %f668, %p190;
	abs.f32 	%f674, %f769;
	setp.gt.f32 	%p191, %f674, 0f4B800000;
	add.f32 	%f675, %f772, 0f3F800000;
	selp.f32 	%f771, %f675, %f671, %p191;
$L__BB0_117:                            // %L636
	selp.f32 	%f254, %f253, %f248, %p23;
	selp.f32 	%f517, %f516, %f511, %p130;
	mov.f32 	%f778, %f777;
	@%p2 bra 	$L__BB0_133;
// %bb.118:                             // %L644
	mul.hi.u32 	%r508, %r3618, -1431655765;
	shr.u32 	%r509, %r508, 2;
	mul.lo.s32 	%r510, %r509, 6;
	sub.s32 	%r511, %r3618, %r510;
	cvt.rn.f32.s32 	%f677, %r511;
	div.approx.f32 	%f150, %f677, %f730;
	abs.f32 	%f775, %f150;
	setp.lt.f32 	%p192, %f775, 0f40000000;
	@%p192 bra 	$L__BB0_130;
// %bb.119:
	setp.gtu.f32 	%p193, %f775, 0f4B800000;
	@%p193 bra 	$L__BB0_126;
	bra.uni 	$L__BB0_120;
$L__BB0_126:
	mov.b32 	%r72, %f775;
	and.b32  	%r512, %r72, 8388607;
	or.b32  	%r3633, %r512, 1065353216;
	mov.b32 	%f774, %r3633;
	add.s32 	%r513, %r72, -1073741824;
	and.b32  	%r3634, %r513, -8388608;
	setp.eq.s32 	%p199, %r3634, 0;
	@%p199 bra 	$L__BB0_129;
// %bb.127:                             // %__nv_fmaf_rn.exit4.i.i.i1239.preheader
	mov.f32 	%f688, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f687,%f688;
	// end inline asm
$L__BB0_128:                            // %__nv_fmaf_rn.exit4.i.i.i1239
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r514, %r3634, 192937984;
	add.s32 	%r515, %r3633, %r514;
	mov.b32 	%f689, %r515;
	mul.f32 	%f690, %f687, %f689;
	sub.f32 	%f691, %f689, %f690;
	fma.rn.f32 	%f692, %f691, %f687, %f690;
	sub.f32 	%f693, %f689, %f692;
	fma.rz.f32 	%f694, %f693, %f687, %f692;
	cvt.rzi.f32.f32 	%f695, %f694;
	sub.f32 	%f774, %f689, %f695;
	sub.s32 	%r3634, %r3634, %r514;
	mov.b32 	%r3633, %f774;
	setp.ne.s32 	%p200, %r3634, 0;
	setp.ne.s32 	%p201, %r3633, 0;
	and.pred  	%p202, %p200, %p201;
	@%p202 bra 	$L__BB0_128;
$L__BB0_129:                            // %__internal_fmodf_slowpath_mod.exit.i.i1241
	setp.gt.u32 	%p203, %r72, 2139095039;
	selp.f32 	%f696, 0f7FFFFFFF, 0f4B800000, %p203;
	mul.f32 	%f697, %f774, 0f34000000;
	mul.f32 	%f775, %f696, %f697;
	bra.uni 	$L__BB0_130;
$L__BB0_120:                            // %__nv_fast_fdividef.exit.i.i.i1218
	mov.f32 	%f679, 0f40000000;
	div.approx.f32 	%f680, %f775, %f679;
	cvt.rzi.f32.f32 	%f773, %f680;
	fma.rn.f32 	%f153, %f773, 0fC0000000, %f775;
	mov.b32 	%r71, %f153;
	setp.lt.u32 	%p194, %r71, 1073741824;
	@%p194 bra 	$L__BB0_125;
// %bb.121:
	setp.lt.u32 	%p195, %r71, -2147483647;
	@%p195 bra 	$L__BB0_123;
// %bb.122:
	add.f32 	%f685, %f773, 0fBF800000;
	setp.lt.f32 	%p198, %f153, 0fC0000000;
	add.f32 	%f686, %f685, 0fBF800000;
	selp.f32 	%f773, %f686, %f685, %p198;
	bra.uni 	$L__BB0_125;
$L__BB0_123:
	add.f32 	%f773, %f773, 0f3F800000;
	setp.ltu.f32 	%p196, %f153, 0f40800000;
	@%p196 bra 	$L__BB0_125;
// %bb.124:                             // %__nv_fmaf_rn.exit.i.i.i1222
	add.f32 	%f681, %f773, 0f3F800000;
	fma.rn.f32 	%f683, %f679, 0fC0400000, %f153;
	setp.ge.f32 	%p197, %f683, 0f00000000;
	add.f32 	%f684, %f681, 0f3F800000;
	selp.f32 	%f773, %f684, %f681, %p197;
$L__BB0_125:                            // %__internal_fmodf_fastpath_quot.exit.i.i1225
	fma.rn.f32 	%f775, %f773, 0fC0000000, %f775;
$L__BB0_130:                            // %__internal_fmodf_kernel.exit.i1244
	abs.f32 	%f698, %f775;
	setp.gtu.f32 	%p204, %f698, 0f7F800000;
	@%p204 bra 	$L__BB0_132;
// %bb.131:
	mov.b32 	%r516, %f150;
	and.b32  	%r517, %r516, -2147483648;
	mov.b32 	%r518, %f775;
	or.b32  	%r519, %r517, %r518;
	mov.b32 	%f775, %r519;
$L__BB0_132:                            // %__nv_fmodf.exit1245
	add.f32 	%f699, %f775, %f775;
	mov.b32 	%r520, %f699;
	and.b32  	%r521, %r520, -2147483648;
	or.b32  	%r522, %r521, 1056964608;
	mov.b32 	%f700, %r522;
	add.f32 	%f701, %f699, %f700;
	cvt.rzi.f32.f32 	%f702, %f701;
	abs.f32 	%f703, %f699;
	setp.gt.f32 	%p205, %f703, 0f4B000000;
	selp.f32 	%f704, %f699, %f702, %p205;
	cvt.rzi.f32.f32 	%f705, %f699;
	setp.lt.f32 	%p206, %f703, 0f3F000000;
	selp.f32 	%f706, %f705, %f704, %p206;
	cvt.rzi.s32.f32 	%r523, %f706;
	fma.rn.f32 	%f707, %f706, 0fBF000000, %f775;
	mul.f32 	%f708, %f707, %f707;
	fma.rn.f32 	%f709, %f708, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f710, %f708, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f711, %f709, %f708, 0fC0A55DF6;
	fma.rn.f32 	%f712, %f710, %f708, 0f4081E0CF;
	fma.rn.f32 	%f713, %f708, %f707, 0f00000000;
	fma.rn.f32 	%f714, %f712, %f708, 0fC09DE9E6;
	fma.rn.f32 	%f715, %f711, %f713, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f708, 0f3F800000;
	fma.rn.f32 	%f717, %f707, 0f40490FDB, %f715;
	and.b32  	%r524, %r523, 1;
	setp.eq.b32 	%p207, %r524, 1;
	selp.f32 	%f718, %f716, %f717, %p207;
	selp.f32 	%f719, %f717, %f716, %p207;
	and.b32  	%r525, %r523, 2;
	setp.eq.s32 	%p208, %r525, 0;
	neg.f32 	%f720, %f718;
	selp.f32 	%f721, %f718, %f720, %p208;
	add.s32 	%r526, %r523, 1;
	and.b32  	%r527, %r526, 2;
	setp.eq.s32 	%p209, %r527, 0;
	mov.f32 	%f722, 0f00000000;
	sub.f32 	%f723, %f722, %f719;
	selp.f32 	%f724, %f719, %f723, %p209;
	cvt.rzi.f32.f32 	%f725, %f775;
	setp.eq.f32 	%p210, %f725, %f775;
	mul.f32 	%f726, %f775, 0f00000000;
	selp.f32 	%f778, %f726, %f721, %p210;
	abs.f32 	%f727, %f775;
	setp.gt.f32 	%p211, %f727, 0f4B800000;
	add.f32 	%f728, %f778, 0f3F800000;
	selp.f32 	%f777, %f728, %f724, %p211;
$L__BB0_133:                            // %L678
	mov.b32 	%r320, %f254;
	mov.b32 	%r323, %f251;
	mov.b32 	%r415, %f747;
	mov.b32 	%r416, %f753;
	mov.b32 	%r421, %f748;
	mov.b32 	%r422, %f754;
	mov.b32 	%r434, %f517;
	mov.b32 	%r437, %f514;
	mov.b32 	%r529, %f771;
	mov.b32 	%r530, %f777;
	mov.b32 	%r535, %f772;
	mov.b32 	%r536, %f778;
	mov.u32 	%r3720, 999999999;
	cvt.u16.u32 	%rs256, %r3;
	@%p67 bra 	$L__BB0_135;
// %bb.134:                             // %L714
	ld.param.u64 	%rd1, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1];
	and.b16  	%rs32, %rs256, 255;
	mul.lo.s16 	%rs33, %rs32, 171;
	shr.u16 	%rs34, %rs33, 12;
	mul.lo.s16 	%rs35, %rs34, 24;
	sub.s16 	%rs36, %rs256, %rs35;
	cvt.u32.u16 	%r541, %rs36;
	and.b32  	%r542, %r541, 255;
	mad.lo.s32 	%r543, %r542, 24, %r1;
	cvt.u16.u32 	%rs37, %r543;
	mul.hi.u16 	%rs38, %rs37, -7281;
	shr.u16 	%rs39, %rs38, 9;
	mul.lo.s16 	%rs40, %rs39, 576;
	sub.s16 	%rs41, %rs37, %rs40;
	cvt.u32.u16 	%r544, %rs41;
	mul.wide.u32 	%rd47, %r544, 4;
	add.s64 	%rd48, %rd1, %rd47;
	ld.global.u32 	%r545, [%rd48];
	cvt.s32.s16 	%r546, %r545;
	shr.s32 	%r547, %r545, 16;
	mul.lo.s32 	%r548, %r547, 801;
	mad.lo.s32 	%r3720, %r546, 33, %r548;
$L__BB0_135:                            // %pass348
	xor.b32  	%r319, %r323, -2147483648;
	mov.b32 	%r371, %f735;
	mov.b32 	%r372, %f741;
	mov.b32 	%r374, %f736;
	mov.b32 	%r375, %f742;
	xor.b32  	%r418, %r421, -2147483648;
	xor.b32  	%r419, %r422, -2147483648;
	xor.b32  	%r433, %r437, -2147483648;
	mov.b32 	%r485, %f759;
	mov.b32 	%r486, %f765;
	mov.b32 	%r488, %f760;
	mov.b32 	%r489, %f766;
	xor.b32  	%r532, %r535, -2147483648;
	xor.b32  	%r533, %r536, -2147483648;
	and.b32  	%r550, %r3, 24;
	setp.eq.s32 	%p213, %r550, 24;
	cvt.u16.u32 	%rs42, %r6;
	mul.lo.s16 	%rs43, %rs42, 171;
	shr.u16 	%rs44, %rs43, 10;
	mul.lo.s16 	%rs45, %rs44, 6;
	sub.s16 	%rs46, %rs42, %rs45;
	cvt.u32.u16 	%r551, %rs46;
	and.b32  	%r245, %r551, 255;
	mov.u32 	%r549, 0;
	mov.u32 	%r3635, %r549;
	mov.u32 	%r3636, %r549;
	@%p213 bra 	$L__BB0_136;
// %bb.185:                             // %pass352
	ld.param.u64 	%rd2, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2];
	mul.lo.s32 	%r552, %r245, 24;
	mul.lo.s32 	%r553, %r5, 144;
	mul.lo.s32 	%r554, %r4, 1152;
	or.b32  	%r555, %r554, %r1;
	add.s32 	%r556, %r555, %r553;
	add.s32 	%r557, %r556, %r552;
	mul.wide.u32 	%rd49, %r557, 4;
	add.s64 	%rd50, %rd2, %rd49;
	ld.global.u32 	%r3635, [%rd50];
	or.b32  	%r558, %r1, 576;
	add.s32 	%r559, %r558, %r554;
	add.s32 	%r560, %r559, %r553;
	add.s32 	%r561, %r560, %r552;
	mul.wide.u32 	%rd51, %r561, 4;
	add.s64 	%rd52, %rd2, %rd51;
	ld.global.u32 	%r3636, [%rd52];
$L__BB0_136:                            // %L1048
	ld.param.u64 	%rd3, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3];
	ld.param.u64 	%rd4, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4];
	// begin inline asm
	cvt.rn.f16x2.f32 %r318, %r320, %r319;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r321, %r323, %r320;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r370, %r372, %r371;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r373, %r375, %r374;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r414, %r416, %r415;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r417, %r419, %r418;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r420, %r422, %r421;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r423, %r416, %r415;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r432, %r434, %r433;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r435, %r437, %r434;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r484, %r486, %r485;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r487, %r489, %r488;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r528, %r530, %r529;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r531, %r533, %r532;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r534, %r536, %r535;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r537, %r530, %r529;
	// end inline asm
	shl.b32 	%r86, %r3, 2;
	and.b32  	%r87, %r86, 60;
	shl.b32 	%r563, %r3, 3;
	and.b32  	%r88, %r563, 128;
	shl.b32 	%r89, %r4, 8;
	or.b32  	%r564, %r89, %r88;
	or.b32  	%r90, %r564, 65;
	add.s32 	%r91, %r1, 24;
	and.b32  	%r565, %r231, 30;
	shr.u32 	%r566, %r3, 4;
	or.b32  	%r567, %r565, %r566;
	mul.lo.s32 	%r92, %r567, 257;
	or.b32  	%r568, %r566, %r231;
	or.b32  	%r569, %r568, 32;
	mul.lo.s32 	%r93, %r569, 257;
	and.b32  	%r570, %r2, 224;
	and.b16  	%rs48, %rs256, 255;
	mul.lo.s16 	%rs49, %rs48, 171;
	shr.u16 	%rs50, %rs49, 12;
	mul.lo.s16 	%rs51, %rs50, 24;
	sub.s16 	%rs1, %rs256, %rs51;
	cvt.u32.u16 	%r571, %rs1;
	and.b32  	%r572, %r571, 255;
	shr.u32 	%r573, %r1, 3;
	mad.lo.s32 	%r94, %r573, 257, %r570;
	shr.u32 	%r574, %r91, 3;
	mad.lo.s32 	%r95, %r574, 257, %r570;
	add.s32 	%r575, %r1, 48;
	shr.u32 	%r576, %r575, 3;
	mad.lo.s32 	%r96, %r576, 257, %r570;
	add.s32 	%r577, %r1, 72;
	shr.u32 	%r578, %r577, 3;
	mad.lo.s32 	%r97, %r578, 257, %r570;
	or.b32  	%r579, %r573, 12;
	mad.lo.s32 	%r98, %r579, 257, %r570;
	add.s32 	%r580, %r1, 120;
	shr.u32 	%r581, %r580, 3;
	mad.lo.s32 	%r99, %r581, 257, %r570;
	add.s32 	%r582, %r1, 144;
	shr.u32 	%r583, %r582, 3;
	mad.lo.s32 	%r100, %r583, 257, %r570;
	add.s32 	%r584, %r1, 168;
	shr.u32 	%r585, %r584, 3;
	mad.lo.s32 	%r101, %r585, 257, %r570;
	or.b32  	%r586, %r573, 24;
	mad.lo.s32 	%r102, %r586, 257, %r570;
	add.s32 	%r587, %r1, 216;
	shr.u32 	%r588, %r587, 3;
	mad.lo.s32 	%r103, %r588, 257, %r570;
	add.s32 	%r589, %r1, 240;
	shr.u32 	%r590, %r589, 3;
	mad.lo.s32 	%r104, %r590, 257, %r570;
	add.s32 	%r591, %r1, 264;
	shr.u32 	%r592, %r591, 3;
	mad.lo.s32 	%r105, %r592, 257, %r570;
	or.b32  	%r593, %r573, 36;
	mad.lo.s32 	%r106, %r593, 257, %r570;
	add.s32 	%r594, %r1, 312;
	shr.u32 	%r595, %r594, 3;
	mad.lo.s32 	%r107, %r595, 257, %r570;
	add.s32 	%r596, %r1, 336;
	shr.u32 	%r597, %r596, 3;
	mad.lo.s32 	%r108, %r597, 257, %r570;
	add.s32 	%r598, %r1, 360;
	shr.u32 	%r599, %r598, 3;
	mad.lo.s32 	%r109, %r599, 257, %r570;
	or.b32  	%r600, %r573, 48;
	mad.lo.s32 	%r110, %r600, 257, %r570;
	add.s32 	%r601, %r1, 408;
	shr.u32 	%r602, %r601, 3;
	mad.lo.s32 	%r111, %r602, 257, %r570;
	add.s32 	%r603, %r1, 432;
	shr.u32 	%r604, %r603, 3;
	mad.lo.s32 	%r112, %r604, 257, %r570;
	add.s32 	%r605, %r1, 456;
	shr.u32 	%r606, %r605, 3;
	mad.lo.s32 	%r113, %r606, 257, %r570;
	or.b32  	%r607, %r573, 60;
	mad.lo.s32 	%r114, %r607, 257, %r570;
	add.s32 	%r608, %r1, 504;
	bfe.u32 	%r609, %r608, 3, 6;
	mad.lo.s32 	%r115, %r609, 257, %r570;
	mul.lo.s32 	%r610, %r1, 33;
	mad.lo.s32 	%r611, %r5, 4806, %r610;
	mad.lo.s32 	%r612, %r245, 801, %r611;
	bfe.s32 	%r613, %r3, 1, 1;
	and.b32  	%r614, %r3, 2;
	setp.eq.s32 	%p214, %r614, 0;
	and.b32  	%r615, %r613, 2056;
	and.b32  	%r616, %r3, 1;
	neg.s32 	%r617, %r616;
	and.b32  	%r618, %r617, 4112;
	bfe.s32 	%r619, %r3, 2, 1;
	and.b32  	%r620, %r619, 1028;
	bfe.s32 	%r621, %r3, 3, 1;
	and.b32  	%r622, %r621, 514;
	or.b32  	%r623, %r615, %r618;
	mad.lo.s32 	%r624, %r566, 257, %r1;
	add.s32 	%r625, %r624, %r620;
	add.s32 	%r626, %r625, %r622;
	add.s32 	%r627, %r626, %r623;
	mul.wide.u32 	%rd53, %r627, 4;
	mov.u64 	%rd54, shmem;
	add.s64 	%rd6, %rd54, %rd53;
	selp.b32 	%r628, 8256, 10312, %p214;
	or.b32  	%r629, %r628, %r618;
	add.s32 	%r630, %r626, %r629;
	mul.wide.u32 	%rd55, %r630, 4;
	add.s64 	%rd7, %rd54, %rd55;
	selp.b32 	%r631, 32, 2088, %p214;
	or.b32  	%r632, %r631, %r618;
	add.s32 	%r633, %r626, %r632;
	mul.wide.u32 	%rd56, %r633, 4;
	add.s64 	%rd8, %rd54, %rd56;
	selp.b32 	%r634, 8288, 10344, %p214;
	or.b32  	%r635, %r634, %r618;
	add.s32 	%r636, %r626, %r635;
	mul.wide.u32 	%rd57, %r636, 4;
	add.s64 	%rd9, %rd54, %rd57;
	add.s32 	%r637, %r624, %r618;
	add.s32 	%r638, %r637, %r615;
	add.s32 	%r639, %r638, %r620;
	add.s32 	%r640, %r639, %r622;
	add.s32 	%r641, %r637, %r628;
	add.s32 	%r642, %r641, %r620;
	add.s32 	%r643, %r642, %r622;
	add.s32 	%r644, %r637, %r631;
	add.s32 	%r645, %r644, %r620;
	add.s32 	%r646, %r645, %r622;
	add.s32 	%r647, %r637, %r634;
	add.s32 	%r648, %r647, %r620;
	add.s32 	%r649, %r648, %r622;
	and.b32  	%r650, %r1, 1;
	neg.s32 	%r651, %r650;
	setp.eq.b32 	%p215, %r650, 1;
	and.b32  	%r652, %r651, 8256;
	bfe.s32 	%r653, %r1, 2, 1;
	and.b32  	%r654, %r653, 2056;
	bfe.s32 	%r655, %r1, 1, 1;
	and.b32  	%r656, %r655, 4112;
	bfe.s32 	%r657, %r1, 3, 1;
	and.b32  	%r658, %r1, 8;
	setp.eq.s32 	%p216, %r658, 0;
	and.b32  	%r659, %r657, 1028;
	mul.lo.s32 	%r660, %r5, 6;
	shr.u32 	%r661, %r1, 4;
	mad.lo.s32 	%r662, %r661, 514, %r660;
	add.s32 	%r663, %r662, %r654;
	add.s32 	%r664, %r663, %r652;
	add.s32 	%r665, %r664, %r656;
	add.s32 	%r666, %r665, %r659;
	add.s32 	%r667, %r666, %r245;
	mul.wide.u32 	%rd58, %r667, 4;
	add.s64 	%rd10, %rd54, %rd58;
	selp.b32 	%r668, 1028, 0, %p216;
	shr.u32 	%r669, %r91, 5;
	mul.lo.s32 	%r670, %r669, 257;
	bfe.s32 	%r671, %r91, 4, 1;
	and.b32  	%r672, %r671, 514;
	add.s32 	%r673, %r654, %r660;
	or.b32  	%r674, %r673, %r652;
	add.s32 	%r675, %r674, %r656;
	add.s32 	%r676, %r675, %r668;
	add.s32 	%r677, %r676, %r670;
	add.s32 	%r678, %r677, %r245;
	add.s32 	%r679, %r678, %r672;
	mul.wide.u32 	%rd59, %r679, 4;
	add.s64 	%rd11, %rd54, %rd59;
	selp.b32 	%r680, 8288, 32, %p215;
	add.s32 	%r681, %r663, %r680;
	add.s32 	%r682, %r681, %r656;
	add.s32 	%r683, %r682, %r659;
	add.s32 	%r684, %r683, %r245;
	mul.wide.u32 	%rd60, %r684, 4;
	add.s64 	%rd12, %rd54, %rd60;
	add.s32 	%r685, %r673, %r680;
	add.s32 	%r686, %r685, %r656;
	add.s32 	%r687, %r686, %r668;
	add.s32 	%r688, %r687, %r670;
	add.s32 	%r689, %r688, %r245;
	add.s32 	%r690, %r689, %r672;
	mul.wide.u32 	%rd61, %r690, 4;
	add.s64 	%rd13, %rd54, %rd61;
	or.b32  	%r691, %r652, %r654;
	add.s32 	%r692, %r662, %r656;
	add.s32 	%r693, %r692, %r659;
	add.s32 	%r694, %r693, %r691;
	add.s32 	%r695, %r694, %r245;
	add.s32 	%r696, %r656, %r660;
	add.s32 	%r697, %r696, %r668;
	add.s32 	%r698, %r697, %r670;
	add.s32 	%r699, %r698, %r691;
	add.s32 	%r700, %r699, %r245;
	add.s32 	%r701, %r700, %r672;
	or.b32  	%r702, %r680, %r654;
	add.s32 	%r703, %r693, %r702;
	add.s32 	%r704, %r703, %r245;
	add.s32 	%r705, %r698, %r702;
	add.s32 	%r706, %r705, %r245;
	add.s32 	%r707, %r706, %r672;
	mul.lo.s32 	%r708, %r4, 3456;
	mad.lo.s32 	%r709, %r1, 24, %r708;
	add.s32 	%r116, %r709, %r572;
	cvt.u16.u32 	%rs52, %r91;
	and.b16  	%rs53, %rs52, 255;
	mul.lo.s16 	%rs54, %rs53, 171;
	shr.u16 	%rs55, %rs54, 13;
	mul.lo.s16 	%rs56, %rs55, 48;
	sub.s16 	%rs57, %rs52, %rs56;
	cvt.u32.u16 	%r710, %rs57;
	and.b32  	%r711, %r710, 255;
	or.b32  	%r712, %r708, %r572;
	mad.lo.s32 	%r117, %r711, 24, %r712;
	mul.wide.u32 	%rd62, %r612, 4;
	add.s64 	%rd14, %rd54, %rd62;
	add.s32 	%r713, %r640, 64;
	mul.wide.u32 	%rd63, %r713, 4;
	add.s64 	%rd15, %rd54, %rd63;
	add.s32 	%r714, %r643, 64;
	mul.wide.u32 	%rd64, %r714, 4;
	add.s64 	%rd16, %rd54, %rd64;
	add.s32 	%r715, %r646, 64;
	mul.wide.u32 	%rd65, %r715, 4;
	add.s64 	%rd17, %rd54, %rd65;
	add.s32 	%r716, %r649, 64;
	mul.wide.u32 	%rd66, %r716, 4;
	add.s64 	%rd18, %rd54, %rd66;
	add.s32 	%r717, %r640, 128;
	mul.wide.u32 	%rd67, %r717, 4;
	add.s64 	%rd19, %rd54, %rd67;
	add.s32 	%r718, %r643, 128;
	mul.wide.u32 	%rd68, %r718, 4;
	add.s64 	%rd20, %rd54, %rd68;
	add.s32 	%r719, %r646, 128;
	mul.wide.u32 	%rd69, %r719, 4;
	add.s64 	%rd21, %rd54, %rd69;
	add.s32 	%r720, %r649, 128;
	mul.wide.u32 	%rd70, %r720, 4;
	add.s64 	%rd22, %rd54, %rd70;
	add.s32 	%r721, %r640, 192;
	mul.wide.u32 	%rd71, %r721, 4;
	add.s64 	%rd23, %rd54, %rd71;
	add.s32 	%r722, %r643, 192;
	mul.wide.u32 	%rd72, %r722, 4;
	add.s64 	%rd24, %rd54, %rd72;
	add.s32 	%r723, %r646, 192;
	mul.wide.u32 	%rd73, %r723, 4;
	add.s64 	%rd25, %rd54, %rd73;
	add.s32 	%r724, %r649, 192;
	mul.wide.u32 	%rd74, %r724, 4;
	add.s64 	%rd26, %rd54, %rd74;
	add.s32 	%r725, %r695, 64;
	mul.wide.u32 	%rd75, %r725, 4;
	add.s64 	%rd27, %rd54, %rd75;
	add.s32 	%r726, %r701, 64;
	mul.wide.u32 	%rd76, %r726, 4;
	add.s64 	%rd28, %rd54, %rd76;
	add.s32 	%r727, %r704, 64;
	mul.wide.u32 	%rd77, %r727, 4;
	add.s64 	%rd29, %rd54, %rd77;
	add.s32 	%r728, %r707, 64;
	mul.wide.u32 	%rd78, %r728, 4;
	add.s64 	%rd30, %rd54, %rd78;
	add.s32 	%r729, %r695, 128;
	mul.wide.u32 	%rd79, %r729, 4;
	add.s64 	%rd31, %rd54, %rd79;
	add.s32 	%r730, %r701, 128;
	mul.wide.u32 	%rd80, %r730, 4;
	add.s64 	%rd32, %rd54, %rd80;
	add.s32 	%r731, %r704, 128;
	mul.wide.u32 	%rd81, %r731, 4;
	add.s64 	%rd33, %rd54, %rd81;
	add.s32 	%r732, %r707, 128;
	mul.wide.u32 	%rd82, %r732, 4;
	add.s64 	%rd34, %rd54, %rd82;
	add.s32 	%r733, %r695, 192;
	mul.wide.u32 	%rd83, %r733, 4;
	add.s64 	%rd35, %rd54, %rd83;
	add.s32 	%r734, %r701, 192;
	mul.wide.u32 	%rd84, %r734, 4;
	add.s64 	%rd36, %rd54, %rd84;
	add.s32 	%r735, %r704, 192;
	mul.wide.u32 	%rd85, %r735, 4;
	add.s64 	%rd37, %rd54, %rd85;
	add.s32 	%r736, %r707, 192;
	mul.wide.u32 	%rd86, %r736, 4;
	add.s64 	%rd38, %rd54, %rd86;
	setp.gt.u32 	%p217, %r1, 7;
	setp.lt.u32 	%p218, %r3, 16;
	setp.lt.u32 	%p219, %r3, 24;
	mov.u32 	%r3637, %r549;
	mov.u32 	%r3667, %r549;
	mov.u32 	%r3668, %r549;
	mov.u32 	%r3669, %r549;
	mov.u32 	%r3670, %r549;
	bra.uni 	$L__BB0_137;
$L__BB0_158:                            // %L30353
                                        //   in Loop: Header=BB0_137 Depth=1
	add.s32 	%r219, %r3637, 48;
	setp.ne.s32 	%p246, %r3637, 96;
	mov.u32 	%r3637, %r219;
	@%p246 bra 	$L__BB0_137;
	bra.uni 	$L__BB0_159;
$L__BB0_137:                            // %L1051
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_139 Depth 2
                                        //     Child Loop BB0_149 Depth 2
	mul.hi.u32 	%r930, %r3637, -1431655765;
	shr.u32 	%r931, %r930, 5;
	mul.lo.s32 	%r932, %r931, 48;
	add.s32 	%r933, %r932, %r1;
	cvt.u16.u32 	%rs58, %r933;
	mul.hi.s16 	%rs59, %rs58, 3641;
	shr.u16 	%rs60, %rs59, 15;
	shr.s16 	%rs61, %rs59, 3;
	add.s16 	%rs62, %rs61, %rs60;
	mul.lo.s16 	%rs63, %rs62, 144;
	sub.s16 	%rs64, %rs58, %rs63;
	cvt.u32.u16 	%r934, %rs64;
	shl.b32 	%r935, %r934, 16;
	or.b32  	%r936, %r935, %r87;
	or.b32  	%r937, %r936, %r88;
	or.b32  	%r938, %r937, %r89;
	mul.wide.s32 	%rd87, %r938, 4;
	add.s64 	%rd88, %rd3, %rd87;
	ld.global.v4.u32 	{%r939, %r940, %r941, %r942}, [%rd88];
	or.b32  	%r943, %r935, %r86;
	or.b32  	%r944, %r90, %r943;
	add.s32 	%r945, %r944, -1;
	mul.wide.s32 	%rd89, %r945, 4;
	add.s64 	%rd90, %rd3, %rd89;
	ld.global.v4.u32 	{%r946, %r947, %r948, %r949}, [%rd90];
	add.s32 	%r950, %r91, %r932;
	cvt.u16.u32 	%rs65, %r950;
	mul.hi.s16 	%rs66, %rs65, 3641;
	shr.u16 	%rs67, %rs66, 15;
	shr.s16 	%rs68, %rs66, 3;
	add.s16 	%rs69, %rs68, %rs67;
	mul.lo.s16 	%rs70, %rs69, 144;
	sub.s16 	%rs71, %rs65, %rs70;
	cvt.u32.u16 	%r951, %rs71;
	shl.b32 	%r952, %r951, 16;
	or.b32  	%r953, %r952, %r87;
	or.b32  	%r954, %r953, %r88;
	or.b32  	%r955, %r954, %r89;
	mul.wide.s32 	%rd91, %r955, 4;
	add.s64 	%rd92, %rd3, %rd91;
	ld.global.v4.u32 	{%r956, %r957, %r958, %r959}, [%rd92];
	or.b32  	%r960, %r952, %r86;
	or.b32  	%r961, %r90, %r960;
	add.s32 	%r962, %r961, -1;
	mul.wide.s32 	%rd93, %r962, 4;
	add.s64 	%rd94, %rd3, %rd93;
	ld.global.v4.u32 	{%r963, %r964, %r965, %r966}, [%rd94];
	selp.b32 	%r967, %r941, %r939, %p218;
	shfl.sync.bfly.b32	%r968, %r967, 16, 31, -1;
	selp.b32 	%r739, %r939, %r968, %p218;
	selp.b32 	%r744, %r968, %r941, %p218;
	selp.b32 	%r969, %r942, %r940, %p218;
	shfl.sync.bfly.b32	%r970, %r969, 16, 31, -1;
	selp.b32 	%r747, %r940, %r970, %p218;
	selp.b32 	%r752, %r970, %r942, %p218;
	selp.b32 	%r971, %r948, %r946, %p218;
	shfl.sync.bfly.b32	%r972, %r971, 16, 31, -1;
	selp.b32 	%r755, %r946, %r972, %p218;
	selp.b32 	%r760, %r972, %r948, %p218;
	selp.b32 	%r973, %r949, %r947, %p218;
	shfl.sync.bfly.b32	%r974, %r973, 16, 31, -1;
	selp.b32 	%r763, %r947, %r974, %p218;
	selp.b32 	%r768, %r974, %r949, %p218;
	selp.b32 	%r975, %r958, %r956, %p218;
	shfl.sync.bfly.b32	%r976, %r975, 16, 31, -1;
	selp.b32 	%r771, %r956, %r976, %p218;
	selp.b32 	%r776, %r976, %r958, %p218;
	selp.b32 	%r977, %r959, %r957, %p218;
	shfl.sync.bfly.b32	%r978, %r977, 16, 31, -1;
	selp.b32 	%r779, %r957, %r978, %p218;
	selp.b32 	%r784, %r978, %r959, %p218;
	selp.b32 	%r979, %r965, %r963, %p218;
	shfl.sync.bfly.b32	%r980, %r979, 16, 31, -1;
	selp.b32 	%r787, %r963, %r980, %p218;
	selp.b32 	%r792, %r980, %r965, %p218;
	selp.b32 	%r981, %r966, %r964, %p218;
	shfl.sync.bfly.b32	%r982, %r981, 16, 31, -1;
	selp.b32 	%r795, %r964, %r982, %p218;
	selp.b32 	%r800, %r982, %r966, %p218;
	shl.b32 	%r740, %r744, 4;
	mov.u32 	%r738, 252645135;
	// begin inline asm
	lop3.b32 %r802, %r738, %r739, %r740, 202;
	// end inline asm
	shr.u32 	%r743, %r739, 4;
	// begin inline asm
	lop3.b32 %r818, %r738, %r743, %r744, 202;
	// end inline asm
	shl.b32 	%r748, %r752, 4;
	// begin inline asm
	lop3.b32 %r810, %r738, %r747, %r748, 202;
	// end inline asm
	shr.u32 	%r751, %r747, 4;
	// begin inline asm
	lop3.b32 %r826, %r738, %r751, %r752, 202;
	// end inline asm
	shl.b32 	%r756, %r760, 4;
	// begin inline asm
	lop3.b32 %r834, %r738, %r755, %r756, 202;
	// end inline asm
	shr.u32 	%r759, %r755, 4;
	// begin inline asm
	lop3.b32 %r850, %r738, %r759, %r760, 202;
	// end inline asm
	shl.b32 	%r764, %r768, 4;
	// begin inline asm
	lop3.b32 %r842, %r738, %r763, %r764, 202;
	// end inline asm
	shr.u32 	%r767, %r763, 4;
	// begin inline asm
	lop3.b32 %r858, %r738, %r767, %r768, 202;
	// end inline asm
	shl.b32 	%r772, %r776, 4;
	// begin inline asm
	lop3.b32 %r803, %r738, %r771, %r772, 202;
	// end inline asm
	shr.u32 	%r775, %r771, 4;
	// begin inline asm
	lop3.b32 %r819, %r738, %r775, %r776, 202;
	// end inline asm
	shl.b32 	%r780, %r784, 4;
	// begin inline asm
	lop3.b32 %r811, %r738, %r779, %r780, 202;
	// end inline asm
	shr.u32 	%r783, %r779, 4;
	// begin inline asm
	lop3.b32 %r827, %r738, %r783, %r784, 202;
	// end inline asm
	shl.b32 	%r788, %r792, 4;
	// begin inline asm
	lop3.b32 %r835, %r738, %r787, %r788, 202;
	// end inline asm
	shr.u32 	%r791, %r787, 4;
	// begin inline asm
	lop3.b32 %r851, %r738, %r791, %r792, 202;
	// end inline asm
	shl.b32 	%r796, %r800, 4;
	// begin inline asm
	lop3.b32 %r843, %r738, %r795, %r796, 202;
	// end inline asm
	shr.u32 	%r799, %r795, 4;
	// begin inline asm
	lop3.b32 %r859, %r738, %r799, %r800, 202;
	// end inline asm
	mov.u32 	%r804, 25152;
	// begin inline asm
	prmt.b32 %r866, %r802, %r803, %r804;
	// end inline asm
	mov.u32 	%r808, 29521;
	// begin inline asm
	prmt.b32 %r898, %r802, %r803, %r808;
	// end inline asm
	// begin inline asm
	prmt.b32 %r874, %r810, %r811, %r804;
	// end inline asm
	// begin inline asm
	prmt.b32 %r906, %r810, %r811, %r808;
	// end inline asm
	// begin inline asm
	prmt.b32 %r867, %r818, %r819, %r804;
	// end inline asm
	// begin inline asm
	prmt.b32 %r899, %r818, %r819, %r808;
	// end inline asm
	// begin inline asm
	prmt.b32 %r875, %r826, %r827, %r804;
	// end inline asm
	// begin inline asm
	prmt.b32 %r907, %r826, %r827, %r808;
	// end inline asm
	// begin inline asm
	prmt.b32 %r882, %r834, %r835, %r804;
	// end inline asm
	// begin inline asm
	prmt.b32 %r914, %r834, %r835, %r808;
	// end inline asm
	// begin inline asm
	prmt.b32 %r890, %r842, %r843, %r804;
	// end inline asm
	// begin inline asm
	prmt.b32 %r922, %r842, %r843, %r808;
	// end inline asm
	// begin inline asm
	prmt.b32 %r883, %r850, %r851, %r804;
	// end inline asm
	// begin inline asm
	prmt.b32 %r915, %r850, %r851, %r808;
	// end inline asm
	// begin inline asm
	prmt.b32 %r891, %r858, %r859, %r804;
	// end inline asm
	// begin inline asm
	prmt.b32 %r923, %r858, %r859, %r808;
	// end inline asm
	mov.u32 	%r924, 21520;
	// begin inline asm
	prmt.b32 %r865, %r866, %r867, %r924;
	// end inline asm
	mov.u32 	%r928, 30258;
	// begin inline asm
	prmt.b32 %r869, %r866, %r867, %r928;
	// end inline asm
	// begin inline asm
	prmt.b32 %r873, %r874, %r875, %r924;
	// end inline asm
	// begin inline asm
	prmt.b32 %r877, %r874, %r875, %r928;
	// end inline asm
	// begin inline asm
	prmt.b32 %r881, %r882, %r883, %r924;
	// end inline asm
	// begin inline asm
	prmt.b32 %r885, %r882, %r883, %r928;
	// end inline asm
	// begin inline asm
	prmt.b32 %r889, %r890, %r891, %r924;
	// end inline asm
	// begin inline asm
	prmt.b32 %r893, %r890, %r891, %r928;
	// end inline asm
	// begin inline asm
	prmt.b32 %r897, %r898, %r899, %r924;
	// end inline asm
	// begin inline asm
	prmt.b32 %r901, %r898, %r899, %r928;
	// end inline asm
	// begin inline asm
	prmt.b32 %r905, %r906, %r907, %r924;
	// end inline asm
	// begin inline asm
	prmt.b32 %r909, %r906, %r907, %r928;
	// end inline asm
	// begin inline asm
	prmt.b32 %r913, %r914, %r915, %r924;
	// end inline asm
	// begin inline asm
	prmt.b32 %r917, %r914, %r915, %r928;
	// end inline asm
	// begin inline asm
	prmt.b32 %r921, %r922, %r923, %r924;
	// end inline asm
	// begin inline asm
	prmt.b32 %r925, %r922, %r923, %r928;
	// end inline asm
	cvt.s16.s8 	%rs72, %rs58;
	mul.lo.s16 	%rs73, %rs72, 43;
	shr.u16 	%rs74, %rs73, 15;
	shr.s16 	%rs75, %rs73, 8;
	shr.u16 	%rs76, %rs75, 2;
	add.s16 	%rs77, %rs76, %rs74;
	mul.lo.s16 	%rs78, %rs77, 24;
	sub.s16 	%rs79, %rs58, %rs78;
	cvt.u32.u16 	%r983, %rs79;
	cvt.s32.s8 	%r984, %r983;
	add.s32 	%r985, %r92, %r984;
	mul.wide.s32 	%rd95, %r985, 4;
	add.s64 	%rd97, %rd54, %rd95;
	st.shared.u32 	[%rd97], %r865;
	add.s32 	%r986, %r985, 128;
	mul.wide.u32 	%rd98, %r986, 4;
	add.s64 	%rd99, %rd54, %rd98;
	st.shared.u32 	[%rd99], %r873;
	add.s32 	%r987, %r985, 64;
	mul.wide.u32 	%rd100, %r987, 4;
	add.s64 	%rd101, %rd54, %rd100;
	st.shared.u32 	[%rd101], %r869;
	add.s32 	%r988, %r985, 192;
	mul.wide.u32 	%rd102, %r988, 4;
	add.s64 	%rd103, %rd54, %rd102;
	st.shared.u32 	[%rd103], %r877;
	add.s32 	%r989, %r93, %r984;
	mul.wide.u32 	%rd104, %r989, 4;
	add.s64 	%rd105, %rd54, %rd104;
	st.shared.u32 	[%rd105], %r881;
	add.s32 	%r990, %r989, 128;
	mul.wide.u32 	%rd106, %r990, 4;
	add.s64 	%rd107, %rd54, %rd106;
	st.shared.u32 	[%rd107], %r889;
	add.s32 	%r991, %r989, 64;
	mul.wide.u32 	%rd108, %r991, 4;
	add.s64 	%rd109, %rd54, %rd108;
	st.shared.u32 	[%rd109], %r885;
	add.s32 	%r992, %r989, 192;
	mul.wide.u32 	%rd110, %r992, 4;
	add.s64 	%rd111, %rd54, %rd110;
	st.shared.u32 	[%rd111], %r893;
	add.s32 	%r993, %r985, 32;
	mul.wide.u32 	%rd112, %r993, 4;
	add.s64 	%rd113, %rd54, %rd112;
	st.shared.u32 	[%rd113], %r897;
	add.s32 	%r994, %r985, 160;
	mul.wide.u32 	%rd114, %r994, 4;
	add.s64 	%rd115, %rd54, %rd114;
	st.shared.u32 	[%rd115], %r905;
	add.s32 	%r995, %r985, 96;
	mul.wide.u32 	%rd116, %r995, 4;
	add.s64 	%rd117, %rd54, %rd116;
	st.shared.u32 	[%rd117], %r901;
	add.s32 	%r996, %r985, 224;
	mul.wide.u32 	%rd118, %r996, 4;
	add.s64 	%rd119, %rd54, %rd118;
	st.shared.u32 	[%rd119], %r909;
	add.s32 	%r997, %r989, 32;
	mul.wide.u32 	%rd120, %r997, 4;
	add.s64 	%rd121, %rd54, %rd120;
	st.shared.u32 	[%rd121], %r913;
	add.s32 	%r998, %r989, 160;
	mul.wide.u32 	%rd122, %r998, 4;
	add.s64 	%rd123, %rd54, %rd122;
	st.shared.u32 	[%rd123], %r921;
	add.s32 	%r999, %r989, 96;
	mul.wide.u32 	%rd124, %r999, 4;
	add.s64 	%rd125, %rd54, %rd124;
	st.shared.u32 	[%rd125], %r917;
	add.s32 	%r1000, %r989, 224;
	mul.wide.u32 	%rd126, %r1000, 4;
	add.s64 	%rd127, %rd54, %rd126;
	st.shared.u32 	[%rd127], %r925;
	bar.sync 	0;
	cvt.u16.u32 	%rs2, %r932;
	add.s16 	%rs80, %rs1, %rs2;
	cvt.s16.s8 	%rs81, %rs80;
	mul.lo.s16 	%rs82, %rs81, 43;
	shr.u16 	%rs83, %rs82, 15;
	shr.s16 	%rs84, %rs82, 8;
	shr.u16 	%rs85, %rs84, 2;
	add.s16 	%rs86, %rs85, %rs83;
	mul.lo.s16 	%rs87, %rs86, 24;
	sub.s16 	%rs88, %rs80, %rs87;
	cvt.u32.u16 	%r1001, %rs88;
	cvt.s32.s8 	%r1002, %r1001;
	add.s32 	%r1003, %r94, %r1002;
	mul.wide.s32 	%rd128, %r1003, 4;
	add.s64 	%rd129, %rd54, %rd128;
	ld.shared.u32 	%r1004, [%rd129];
	add.s32 	%r1005, %r95, %r1002;
	mul.wide.u32 	%rd130, %r1005, 4;
	add.s64 	%rd131, %rd54, %rd130;
	ld.shared.u32 	%r1006, [%rd131];
	add.s32 	%r1007, %r96, %r1002;
	mul.wide.u32 	%rd132, %r1007, 4;
	add.s64 	%rd133, %rd54, %rd132;
	ld.shared.u32 	%r1008, [%rd133];
	add.s32 	%r1009, %r97, %r1002;
	mul.wide.u32 	%rd134, %r1009, 4;
	add.s64 	%rd135, %rd54, %rd134;
	ld.shared.u32 	%r1010, [%rd135];
	add.s32 	%r1011, %r98, %r1002;
	mul.wide.u32 	%rd136, %r1011, 4;
	add.s64 	%rd137, %rd54, %rd136;
	ld.shared.u32 	%r1012, [%rd137];
	add.s32 	%r1013, %r99, %r1002;
	mul.wide.u32 	%rd138, %r1013, 4;
	add.s64 	%rd139, %rd54, %rd138;
	ld.shared.u32 	%r1014, [%rd139];
	add.s32 	%r1015, %r100, %r1002;
	mul.wide.u32 	%rd140, %r1015, 4;
	add.s64 	%rd141, %rd54, %rd140;
	ld.shared.u32 	%r1016, [%rd141];
	add.s32 	%r1017, %r101, %r1002;
	mul.wide.u32 	%rd142, %r1017, 4;
	add.s64 	%rd143, %rd54, %rd142;
	ld.shared.u32 	%r1018, [%rd143];
	add.s32 	%r1019, %r102, %r1002;
	mul.wide.u32 	%rd144, %r1019, 4;
	add.s64 	%rd145, %rd54, %rd144;
	ld.shared.u32 	%r1020, [%rd145];
	add.s32 	%r1021, %r103, %r1002;
	mul.wide.u32 	%rd146, %r1021, 4;
	add.s64 	%rd147, %rd54, %rd146;
	ld.shared.u32 	%r1022, [%rd147];
	add.s32 	%r1023, %r104, %r1002;
	mul.wide.u32 	%rd148, %r1023, 4;
	add.s64 	%rd149, %rd54, %rd148;
	ld.shared.u32 	%r1024, [%rd149];
	add.s32 	%r1025, %r105, %r1002;
	mul.wide.u32 	%rd150, %r1025, 4;
	add.s64 	%rd151, %rd54, %rd150;
	ld.shared.u32 	%r1026, [%rd151];
	add.s32 	%r1027, %r106, %r1002;
	mul.wide.u32 	%rd152, %r1027, 4;
	add.s64 	%rd153, %rd54, %rd152;
	ld.shared.u32 	%r1028, [%rd153];
	add.s32 	%r1029, %r107, %r1002;
	mul.wide.u32 	%rd154, %r1029, 4;
	add.s64 	%rd155, %rd54, %rd154;
	ld.shared.u32 	%r1030, [%rd155];
	add.s32 	%r1031, %r108, %r1002;
	mul.wide.u32 	%rd156, %r1031, 4;
	add.s64 	%rd157, %rd54, %rd156;
	ld.shared.u32 	%r1032, [%rd157];
	add.s32 	%r1033, %r109, %r1002;
	mul.wide.u32 	%rd158, %r1033, 4;
	add.s64 	%rd159, %rd54, %rd158;
	ld.shared.u32 	%r1034, [%rd159];
	add.s32 	%r1035, %r110, %r1002;
	mul.wide.u32 	%rd160, %r1035, 4;
	add.s64 	%rd161, %rd54, %rd160;
	ld.shared.u32 	%r1036, [%rd161];
	add.s32 	%r1037, %r111, %r1002;
	mul.wide.u32 	%rd162, %r1037, 4;
	add.s64 	%rd163, %rd54, %rd162;
	ld.shared.u32 	%r1038, [%rd163];
	add.s32 	%r1039, %r112, %r1002;
	mul.wide.u32 	%rd164, %r1039, 4;
	add.s64 	%rd165, %rd54, %rd164;
	ld.shared.u32 	%r1040, [%rd165];
	add.s32 	%r1041, %r113, %r1002;
	mul.wide.u32 	%rd166, %r1041, 4;
	add.s64 	%rd167, %rd54, %rd166;
	ld.shared.u32 	%r1042, [%rd167];
	add.s32 	%r1043, %r114, %r1002;
	mul.wide.u32 	%rd168, %r1043, 4;
	add.s64 	%rd169, %rd54, %rd168;
	ld.shared.u32 	%r1044, [%rd169];
	add.s32 	%r1045, %r115, %r1002;
	mul.wide.s32 	%rd170, %r1045, 4;
	add.s64 	%rd171, %rd54, %rd170;
	ld.shared.u32 	%r1046, [%rd171];
	bar.sync 	0;
	shfl.sync.idx.b32	%r1047, %r3720, 0, 31, -1;
	shfl.sync.idx.b32	%r1048, %r3720, 1, 31, -1;
	shfl.sync.idx.b32	%r1049, %r3720, 2, 31, -1;
	shfl.sync.idx.b32	%r1050, %r3720, 3, 31, -1;
	shfl.sync.idx.b32	%r1051, %r3720, 4, 31, -1;
	shfl.sync.idx.b32	%r1052, %r3720, 5, 31, -1;
	shfl.sync.idx.b32	%r1053, %r3720, 6, 31, -1;
	shfl.sync.idx.b32	%r1054, %r3720, 7, 31, -1;
	shfl.sync.idx.b32	%r1055, %r3720, 8, 31, -1;
	shfl.sync.idx.b32	%r1056, %r3720, 9, 31, -1;
	shfl.sync.idx.b32	%r1057, %r3720, 10, 31, -1;
	shfl.sync.idx.b32	%r1058, %r3720, 11, 31, -1;
	shfl.sync.idx.b32	%r1059, %r3720, 12, 31, -1;
	shfl.sync.idx.b32	%r1060, %r3720, 13, 31, -1;
	shfl.sync.idx.b32	%r1061, %r3720, 14, 31, -1;
	shfl.sync.idx.b32	%r1062, %r3720, 15, 31, -1;
	shfl.sync.idx.b32	%r1063, %r3720, 16, 31, -1;
	shfl.sync.idx.b32	%r1064, %r3720, 17, 31, -1;
	shfl.sync.idx.b32	%r1065, %r3720, 18, 31, -1;
	shfl.sync.idx.b32	%r1066, %r3720, 19, 31, -1;
	shfl.sync.idx.b32	%r1067, %r3720, 20, 31, -1;
	shfl.sync.idx.b32	%r1068, %r3720, 21, 31, -1;
	shfl.sync.idx.b32	%r1069, %r3720, 22, 31, -1;
	shfl.sync.idx.b32	%r1070, %r3720, 23, 31, -1;
	add.s32 	%r1071, %r1047, %r1002;
	mul.wide.s32 	%rd172, %r1071, 4;
	add.s64 	%rd173, %rd54, %rd172;
	st.shared.u32 	[%rd173], %r1004;
	add.s32 	%r1072, %r1048, %r1002;
	mul.wide.s32 	%rd174, %r1072, 4;
	add.s64 	%rd175, %rd54, %rd174;
	st.shared.u32 	[%rd175], %r1006;
	add.s32 	%r1073, %r1049, %r1002;
	mul.wide.s32 	%rd176, %r1073, 4;
	add.s64 	%rd177, %rd54, %rd176;
	st.shared.u32 	[%rd177], %r1008;
	add.s32 	%r1074, %r1050, %r1002;
	mul.wide.s32 	%rd178, %r1074, 4;
	add.s64 	%rd179, %rd54, %rd178;
	st.shared.u32 	[%rd179], %r1010;
	add.s32 	%r1075, %r1051, %r1002;
	mul.wide.s32 	%rd180, %r1075, 4;
	add.s64 	%rd181, %rd54, %rd180;
	st.shared.u32 	[%rd181], %r1012;
	add.s32 	%r1076, %r1052, %r1002;
	mul.wide.s32 	%rd182, %r1076, 4;
	add.s64 	%rd183, %rd54, %rd182;
	st.shared.u32 	[%rd183], %r1014;
	add.s32 	%r1077, %r1053, %r1002;
	mul.wide.s32 	%rd184, %r1077, 4;
	add.s64 	%rd185, %rd54, %rd184;
	st.shared.u32 	[%rd185], %r1016;
	add.s32 	%r1078, %r1054, %r1002;
	mul.wide.s32 	%rd186, %r1078, 4;
	add.s64 	%rd187, %rd54, %rd186;
	st.shared.u32 	[%rd187], %r1018;
	add.s32 	%r1079, %r1055, %r1002;
	mul.wide.s32 	%rd188, %r1079, 4;
	add.s64 	%rd189, %rd54, %rd188;
	st.shared.u32 	[%rd189], %r1020;
	add.s32 	%r1080, %r1056, %r1002;
	mul.wide.s32 	%rd190, %r1080, 4;
	add.s64 	%rd191, %rd54, %rd190;
	st.shared.u32 	[%rd191], %r1022;
	add.s32 	%r1081, %r1057, %r1002;
	mul.wide.s32 	%rd192, %r1081, 4;
	add.s64 	%rd193, %rd54, %rd192;
	st.shared.u32 	[%rd193], %r1024;
	add.s32 	%r1082, %r1058, %r1002;
	mul.wide.s32 	%rd194, %r1082, 4;
	add.s64 	%rd195, %rd54, %rd194;
	st.shared.u32 	[%rd195], %r1026;
	add.s32 	%r1083, %r1059, %r1002;
	mul.wide.s32 	%rd196, %r1083, 4;
	add.s64 	%rd197, %rd54, %rd196;
	st.shared.u32 	[%rd197], %r1028;
	add.s32 	%r1084, %r1060, %r1002;
	mul.wide.s32 	%rd198, %r1084, 4;
	add.s64 	%rd199, %rd54, %rd198;
	st.shared.u32 	[%rd199], %r1030;
	add.s32 	%r1085, %r1061, %r1002;
	mul.wide.s32 	%rd200, %r1085, 4;
	add.s64 	%rd201, %rd54, %rd200;
	st.shared.u32 	[%rd201], %r1032;
	add.s32 	%r1086, %r1062, %r1002;
	mul.wide.s32 	%rd202, %r1086, 4;
	add.s64 	%rd203, %rd54, %rd202;
	st.shared.u32 	[%rd203], %r1034;
	add.s32 	%r1087, %r1063, %r1002;
	mul.wide.s32 	%rd204, %r1087, 4;
	add.s64 	%rd205, %rd54, %rd204;
	st.shared.u32 	[%rd205], %r1036;
	add.s32 	%r1088, %r1064, %r1002;
	mul.wide.s32 	%rd206, %r1088, 4;
	add.s64 	%rd207, %rd54, %rd206;
	st.shared.u32 	[%rd207], %r1038;
	add.s32 	%r1089, %r1065, %r1002;
	mul.wide.s32 	%rd208, %r1089, 4;
	add.s64 	%rd209, %rd54, %rd208;
	st.shared.u32 	[%rd209], %r1040;
	add.s32 	%r1090, %r1066, %r1002;
	mul.wide.s32 	%rd210, %r1090, 4;
	add.s64 	%rd211, %rd54, %rd210;
	st.shared.u32 	[%rd211], %r1042;
	add.s32 	%r1091, %r1067, %r1002;
	mul.wide.s32 	%rd212, %r1091, 4;
	add.s64 	%rd213, %rd54, %rd212;
	st.shared.u32 	[%rd213], %r1044;
	selp.b32 	%r1092, 0, %r1046, %p217;
	add.s32 	%r1093, %r1068, %r1002;
	mul.wide.s32 	%rd214, %r1093, 4;
	add.s64 	%rd215, %rd54, %rd214;
	st.shared.u32 	[%rd215], %r1092;
	add.s32 	%r1094, %r1069, %r1002;
	mul.wide.s32 	%rd216, %r1094, 4;
	add.s64 	%rd217, %rd54, %rd216;
	st.shared.u32 	[%rd217], %r549;
	add.s32 	%r1095, %r1070, %r1002;
	mul.wide.s32 	%rd218, %r1095, 4;
	add.s64 	%rd219, %rd54, %rd218;
	st.shared.u32 	[%rd219], %r549;
	bar.sync 	0;
	mov.u32 	%r3642, %r549;
	mov.u32 	%r3643, %r549;
	mov.u32 	%r3644, %r549;
	mov.u32 	%r3645, %r549;
	mov.u32 	%r3646, %r549;
	mov.u32 	%r3647, %r549;
	mov.u32 	%r3648, %r549;
	mov.u32 	%r3649, %r549;
	mov.u32 	%r3650, %r549;
	mov.u32 	%r3651, %r549;
	mov.u32 	%r3652, %r549;
	mov.u32 	%r3653, %r549;
	mov.u32 	%r3654, %r549;
	mov.u32 	%r3655, %r549;
	mov.u32 	%r3656, %r549;
	mov.u32 	%r3657, %r549;
	mov.u32 	%r3658, %r549;
	mov.u32 	%r3659, %r549;
	mov.u32 	%r3660, %r549;
	mov.u32 	%r3661, %r549;
	mov.u32 	%r3662, %r549;
	mov.u32 	%r3663, %r549;
	mov.u32 	%r3664, %r549;
	mov.u32 	%r3665, %r549;
	@%p219 bra 	$L__BB0_186;
	bra.uni 	$L__BB0_138;
$L__BB0_186:                            // %oksrem3812
                                        //   in Loop: Header=BB0_137 Depth=1
	cvt.s16.s8 	%rs89, %rs2;
	mul.lo.s16 	%rs90, %rs89, 43;
	shr.u16 	%rs91, %rs90, 15;
	shr.s16 	%rs92, %rs90, 10;
	add.s16 	%rs93, %rs92, %rs91;
	mul.lo.s16 	%rs94, %rs93, 24;
	sub.s16 	%rs95, %rs2, %rs94;
	cvt.u32.u16 	%r1096, %rs95;
	cvt.s32.s8 	%r1097, %r1096;
	mul.wide.s32 	%rd220, %r1097, 4;
	add.s64 	%rd221, %rd14, %rd220;
	ld.shared.u32 	%r3642, [%rd221];
	ld.shared.u32 	%r3643, [%rd14+4];
	ld.shared.u32 	%r3644, [%rd14+8];
	ld.shared.u32 	%r3645, [%rd14+12];
	ld.shared.u32 	%r3646, [%rd14+16];
	ld.shared.u32 	%r3647, [%rd14+20];
	ld.shared.u32 	%r3648, [%rd14+24];
	ld.shared.u32 	%r3649, [%rd14+28];
	ld.shared.u32 	%r3650, [%rd14+32];
	ld.shared.u32 	%r3651, [%rd14+36];
	ld.shared.u32 	%r3652, [%rd14+40];
	ld.shared.u32 	%r3653, [%rd14+44];
	ld.shared.u32 	%r3654, [%rd14+48];
	ld.shared.u32 	%r3655, [%rd14+52];
	ld.shared.u32 	%r3656, [%rd14+56];
	ld.shared.u32 	%r3657, [%rd14+60];
	add.s16 	%rs96, %rs2, 16;
	cvt.s16.s8 	%rs97, %rs96;
	mul.lo.s16 	%rs98, %rs97, 43;
	shr.u16 	%rs99, %rs98, 15;
	shr.s16 	%rs100, %rs98, 10;
	add.s16 	%rs101, %rs100, %rs99;
	mul.lo.s16 	%rs102, %rs101, 24;
	sub.s16 	%rs103, %rs96, %rs102;
	cvt.u32.u16 	%r1098, %rs103;
	cvt.s32.s8 	%r1099, %r1098;
	mul.wide.s32 	%rd222, %r1099, 4;
	add.s64 	%rd223, %rd14, %rd222;
	ld.shared.u32 	%r3658, [%rd223];
	add.s16 	%rs104, %rs2, 17;
	cvt.s16.s8 	%rs105, %rs104;
	mul.lo.s16 	%rs106, %rs105, 43;
	shr.u16 	%rs107, %rs106, 15;
	shr.s16 	%rs108, %rs106, 10;
	add.s16 	%rs109, %rs108, %rs107;
	mul.lo.s16 	%rs110, %rs109, 24;
	sub.s16 	%rs111, %rs104, %rs110;
	cvt.u32.u16 	%r1100, %rs111;
	cvt.s32.s8 	%r1101, %r1100;
	mul.wide.s32 	%rd224, %r1101, 4;
	add.s64 	%rd225, %rd14, %rd224;
	ld.shared.u32 	%r3659, [%rd225];
	add.s16 	%rs112, %rs2, 18;
	cvt.s16.s8 	%rs113, %rs112;
	mul.lo.s16 	%rs114, %rs113, 43;
	shr.u16 	%rs115, %rs114, 15;
	shr.s16 	%rs116, %rs114, 10;
	add.s16 	%rs117, %rs116, %rs115;
	mul.lo.s16 	%rs118, %rs117, 24;
	sub.s16 	%rs119, %rs112, %rs118;
	cvt.u32.u16 	%r1102, %rs119;
	cvt.s32.s8 	%r1103, %r1102;
	mul.wide.s32 	%rd226, %r1103, 4;
	add.s64 	%rd227, %rd14, %rd226;
	ld.shared.u32 	%r3660, [%rd227];
	add.s16 	%rs120, %rs2, 19;
	cvt.s16.s8 	%rs121, %rs120;
	mul.lo.s16 	%rs122, %rs121, 43;
	shr.u16 	%rs123, %rs122, 15;
	shr.s16 	%rs124, %rs122, 10;
	add.s16 	%rs125, %rs124, %rs123;
	mul.lo.s16 	%rs126, %rs125, 24;
	sub.s16 	%rs127, %rs120, %rs126;
	cvt.u32.u16 	%r1104, %rs127;
	cvt.s32.s8 	%r1105, %r1104;
	mul.wide.s32 	%rd228, %r1105, 4;
	add.s64 	%rd229, %rd14, %rd228;
	ld.shared.u32 	%r3661, [%rd229];
	add.s16 	%rs128, %rs2, 20;
	cvt.s16.s8 	%rs129, %rs128;
	mul.lo.s16 	%rs130, %rs129, 43;
	shr.u16 	%rs131, %rs130, 15;
	shr.s16 	%rs132, %rs130, 10;
	add.s16 	%rs133, %rs132, %rs131;
	mul.lo.s16 	%rs134, %rs133, 24;
	sub.s16 	%rs135, %rs128, %rs134;
	cvt.u32.u16 	%r1106, %rs135;
	cvt.s32.s8 	%r1107, %r1106;
	mul.wide.s32 	%rd230, %r1107, 4;
	add.s64 	%rd231, %rd14, %rd230;
	ld.shared.u32 	%r3662, [%rd231];
	add.s16 	%rs136, %rs2, 21;
	cvt.s16.s8 	%rs137, %rs136;
	mul.lo.s16 	%rs138, %rs137, 43;
	shr.u16 	%rs139, %rs138, 15;
	shr.s16 	%rs140, %rs138, 10;
	add.s16 	%rs141, %rs140, %rs139;
	mul.lo.s16 	%rs142, %rs141, 24;
	sub.s16 	%rs143, %rs136, %rs142;
	cvt.u32.u16 	%r1108, %rs143;
	cvt.s32.s8 	%r1109, %r1108;
	mul.wide.s32 	%rd232, %r1109, 4;
	add.s64 	%rd233, %rd14, %rd232;
	ld.shared.u32 	%r3663, [%rd233];
	add.s16 	%rs144, %rs2, 22;
	cvt.s16.s8 	%rs145, %rs144;
	mul.lo.s16 	%rs146, %rs145, 43;
	shr.u16 	%rs147, %rs146, 15;
	shr.s16 	%rs148, %rs146, 10;
	add.s16 	%rs149, %rs148, %rs147;
	mul.lo.s16 	%rs150, %rs149, 24;
	sub.s16 	%rs151, %rs144, %rs150;
	cvt.u32.u16 	%r1110, %rs151;
	cvt.s32.s8 	%r1111, %r1110;
	mul.wide.s32 	%rd234, %r1111, 4;
	add.s64 	%rd235, %rd14, %rd234;
	ld.shared.u32 	%r3664, [%rd235];
	add.s16 	%rs152, %rs2, 23;
	cvt.s16.s8 	%rs153, %rs152;
	mul.lo.s16 	%rs154, %rs153, 43;
	shr.u16 	%rs155, %rs154, 15;
	shr.s16 	%rs156, %rs154, 10;
	add.s16 	%rs157, %rs156, %rs155;
	mul.lo.s16 	%rs158, %rs157, 24;
	sub.s16 	%rs159, %rs152, %rs158;
	cvt.u32.u16 	%r1112, %rs159;
	cvt.s32.s8 	%r1113, %r1112;
	mul.wide.s32 	%rd236, %r1113, 4;
	add.s64 	%rd237, %rd14, %rd236;
	ld.shared.u32 	%r3665, [%rd237];
$L__BB0_138:                            // %L11142
                                        //   in Loop: Header=BB0_137 Depth=1
	bar.sync 	0;
	mov.u32 	%r3666, 12;
	bra.uni 	$L__BB0_139;
$L__BB0_146:                            // %L20738
                                        //   in Loop: Header=BB0_139 Depth=2
	add.s32 	%r3668, %r3668, 1;
	mov.u32 	%r3667, 0;
	mov.u32 	%r3669, %r3667;
	mov.u32 	%r3670, %r3667;
$L__BB0_147:                            // %L20739
                                        //   in Loop: Header=BB0_139 Depth=2
	bar.sync 	0;
	add.s32 	%r3666, %r3666, -4;
	setp.ne.s32 	%p232, %r3666, -12;
	@%p232 bra 	$L__BB0_139;
	bra.uni 	$L__BB0_148;
$L__BB0_139:                            // %L11168
                                        //   Parent Loop BB0_137 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p221, %r3666, 12;
	selp.b32 	%r1652, %r3642, 0, %p221;
	setp.eq.s32 	%p222, %r3666, 8;
	selp.b32 	%r1653, %r3646, %r1652, %p222;
	setp.eq.s32 	%p223, %r3666, 4;
	selp.b32 	%r1654, %r3650, %r1653, %p223;
	setp.eq.s32 	%p224, %r3666, 0;
	selp.b32 	%r1655, %r3654, %r1654, %p224;
	setp.eq.s32 	%p225, %r3666, -4;
	selp.b32 	%r1656, %r3658, %r1655, %p225;
	setp.eq.s32 	%p226, %r3666, -8;
	selp.b32 	%r1657, %r3662, %r1656, %p226;
	selp.b32 	%r1658, %r3643, 0, %p221;
	selp.b32 	%r1659, %r3647, %r1658, %p222;
	selp.b32 	%r1660, %r3651, %r1659, %p223;
	selp.b32 	%r1661, %r3655, %r1660, %p224;
	selp.b32 	%r1662, %r3659, %r1661, %p225;
	selp.b32 	%r1663, %r3663, %r1662, %p226;
	selp.b32 	%r1664, %r3644, 0, %p221;
	selp.b32 	%r1665, %r3648, %r1664, %p222;
	selp.b32 	%r1666, %r3652, %r1665, %p223;
	selp.b32 	%r1667, %r3656, %r1666, %p224;
	selp.b32 	%r1668, %r3660, %r1667, %p225;
	selp.b32 	%r1669, %r3664, %r1668, %p226;
	selp.b32 	%r1670, %r3645, 0, %p221;
	selp.b32 	%r1671, %r3649, %r1670, %p222;
	selp.b32 	%r1672, %r3653, %r1671, %p223;
	selp.b32 	%r1673, %r3657, %r1672, %p224;
	selp.b32 	%r1674, %r3661, %r1673, %p225;
	selp.b32 	%r1675, %r3665, %r1674, %p226;
	mov.u16 	%rs197, 25600;
	// begin inline asm
	mov.b32 %r1120, {%rs197, %rs197};
	// end inline asm
	mov.u16 	%rs199, 21504;
	// begin inline asm
	mov.b32 %r1131, {%rs199, %rs199};
	// end inline asm
	xor.b32  	%r1119, %r1657, -2004318072;
	mov.u32 	%r1256, 983055;
	// begin inline asm
	lop3.b32 %r1117, %r1256, %r1119, %r1120, 202;
	// end inline asm
	mov.u16 	%rs203, 18432;
	// begin inline asm
	mov.b32 %r1121, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1122, %r1120, %r1121;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1125, %r1117, %r1122;
	// end inline asm
	mov.u32 	%r1267, 15728880;
	// begin inline asm
	lop3.b32 %r1128, %r1267, %r1119, %r1131, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1132, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1133, %r1131, %r1132;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1136, %r1128, %r1133;
	// end inline asm
	// begin inline asm
	mov.b32 %r1166, {%rs197, %rs197};
	// end inline asm
	// begin inline asm
	mov.b32 %r1177, {%rs199, %rs199};
	// end inline asm
	xor.b32  	%r1165, %r1663, -2004318072;
	// begin inline asm
	lop3.b32 %r1163, %r1256, %r1165, %r1166, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1167, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1168, %r1166, %r1167;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1171, %r1163, %r1168;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1174, %r1267, %r1165, %r1177, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1178, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1179, %r1177, %r1178;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1182, %r1174, %r1179;
	// end inline asm
	// begin inline asm
	mov.b32 %r1212, {%rs197, %rs197};
	// end inline asm
	// begin inline asm
	mov.b32 %r1223, {%rs199, %rs199};
	// end inline asm
	xor.b32  	%r1211, %r1669, -2004318072;
	// begin inline asm
	lop3.b32 %r1209, %r1256, %r1211, %r1212, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1213, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1214, %r1212, %r1213;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1217, %r1209, %r1214;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1220, %r1267, %r1211, %r1223, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1224, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1225, %r1223, %r1224;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1228, %r1220, %r1225;
	// end inline asm
	// begin inline asm
	mov.b32 %r1258, {%rs197, %rs197};
	// end inline asm
	// begin inline asm
	mov.b32 %r1269, {%rs199, %rs199};
	// end inline asm
	xor.b32  	%r1257, %r1675, -2004318072;
	// begin inline asm
	lop3.b32 %r1255, %r1256, %r1257, %r1258, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1259, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1260, %r1258, %r1259;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1263, %r1255, %r1260;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1266, %r1267, %r1257, %r1269, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1270, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1271, %r1269, %r1270;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1274, %r1266, %r1271;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3635;
    mov.b32 {%r2re, %r2im}, %r1125;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1299, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3636;
    mov.b32 {%r2re, %r2im}, %r1136;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1302, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3635;
    mov.b32 {%r2re, %r2im}, %r1171;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1305, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3636;
    mov.b32 {%r2re, %r2im}, %r1182;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1308, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3635;
    mov.b32 {%r2re, %r2im}, %r1217;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1311, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3636;
    mov.b32 {%r2re, %r2im}, %r1228;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1314, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3635;
    mov.b32 {%r2re, %r2im}, %r1263;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1317, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3636;
    mov.b32 {%r2re, %r2im}, %r1274;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1320, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1651, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1386, %r1383}, {%r318, %r321}, {%r1299}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1395, %r1392}, {%r318, %r321}, {%r1302}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1404, %r1401}, {%r318, %r321}, {%r1305}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1413, %r1410}, {%r318, %r321}, {%r1308}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1422, %r1419}, {%r318, %r321}, {%r1311}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1431, %r1428}, {%r318, %r321}, {%r1314}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1440, %r1437}, {%r318, %r321}, {%r1317}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1449, %r1446}, {%r318, %r321}, {%r1320}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1379, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1381, %r1379, %r1383;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1384, %r370, %r1386, %r1381;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1388, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1390, %r1388, %r1392;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1393, %r370, %r1395, %r1390;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1397, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1399, %r1397, %r1401;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1402, %r370, %r1404, %r1399;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1406, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1408, %r1406, %r1410;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1411, %r370, %r1413, %r1408;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1415, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1417, %r1415, %r1419;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1420, %r370, %r1422, %r1417;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1424, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1426, %r1424, %r1428;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1429, %r370, %r1431, %r1426;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1433, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1435, %r1433, %r1437;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1438, %r370, %r1440, %r1435;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1442, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1444, %r1442, %r1446;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1447, %r370, %r1449, %r1444;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1451, %r373, %r1386;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1454, %r370, %r1383, %r1451;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1458, %r373, %r1395;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1461, %r370, %r1392, %r1458;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1465, %r373, %r1404;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1468, %r370, %r1401, %r1465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1472, %r373, %r1413;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1475, %r370, %r1410, %r1472;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1479, %r373, %r1422;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1482, %r370, %r1419, %r1479;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1486, %r373, %r1431;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1489, %r370, %r1428, %r1486;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1493, %r373, %r1440;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1496, %r370, %r1437, %r1493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1500, %r373, %r1449;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1503, %r370, %r1446, %r1500;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1588, %r1589}, {%r414, %r420, %r417, %r423}, {%r1384, %r1454}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1596, %r1597}, {%r414, %r420, %r417, %r423}, {%r1393, %r1461}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1604, %r1605}, {%r414, %r420, %r417, %r423}, {%r1402, %r1468}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1612, %r1613}, {%r414, %r420, %r417, %r423}, {%r1411, %r1475}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1620, %r1621}, {%r414, %r420, %r417, %r423}, {%r1420, %r1482}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1628, %r1629}, {%r414, %r420, %r417, %r423}, {%r1429, %r1489}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1636, %r1637}, {%r414, %r420, %r417, %r423}, {%r1438, %r1496}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1644, %r1645}, {%r414, %r420, %r417, %r423}, {%r1447, %r1503}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	prmt.b32 %r1587, %r1588, %r1589, %r924;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1591, %r1588, %r1589, %r928;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1595, %r1596, %r1597, %r924;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1599, %r1596, %r1597, %r928;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1603, %r1604, %r1605, %r924;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1607, %r1604, %r1605, %r928;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1611, %r1612, %r1613, %r924;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1615, %r1612, %r1613, %r928;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1619, %r1620, %r1621, %r924;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1623, %r1620, %r1621, %r928;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1627, %r1628, %r1629, %r924;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1631, %r1628, %r1629, %r928;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1635, %r1636, %r1637, %r924;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1639, %r1636, %r1637, %r928;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1643, %r1644, %r1645, %r924;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1647, %r1644, %r1645, %r928;
	// end inline asm
	st.shared.u32 	[%rd6], %r1587;
	st.shared.u32 	[%rd7], %r1591;
	st.shared.u32 	[%rd8], %r1595;
	st.shared.u32 	[%rd9], %r1599;
	st.shared.u32 	[%rd15], %r1603;
	st.shared.u32 	[%rd16], %r1607;
	st.shared.u32 	[%rd17], %r1611;
	st.shared.u32 	[%rd18], %r1615;
	st.shared.u32 	[%rd19], %r1619;
	st.shared.u32 	[%rd20], %r1623;
	st.shared.u32 	[%rd21], %r1627;
	st.shared.u32 	[%rd22], %r1631;
	st.shared.u32 	[%rd23], %r1635;
	st.shared.u32 	[%rd24], %r1639;
	st.shared.u32 	[%rd25], %r1643;
	st.shared.u32 	[%rd26], %r1647;
	bar.sync 	0;
	mov.u32 	%r3671, %r1651;
	mov.u32 	%r3672, %r1651;
	mov.u32 	%r3673, %r1651;
	mov.u32 	%r3674, %r1651;
	@%p219 bra 	$L__BB0_187;
	bra.uni 	$L__BB0_140;
$L__BB0_187:                            // %pass7422
                                        //   in Loop: Header=BB0_139 Depth=2
	ld.shared.u32 	%r3671, [%rd10];
	ld.shared.u32 	%r3672, [%rd11];
	ld.shared.u32 	%r3673, [%rd12];
	ld.shared.u32 	%r3674, [%rd13];
$L__BB0_140:                            // %L16673
                                        //   in Loop: Header=BB0_139 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1711, %r1708}, {%r432, %r435}, {%r3671}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1720, %r1717}, {%r432, %r435}, {%r3672}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1729, %r1726}, {%r432, %r435}, {%r3673}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1738, %r1735}, {%r432, %r435}, {%r3674}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1704, %r487;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1706, %r1704, %r1708;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1709, %r484, %r1711, %r1706;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1713, %r487;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1715, %r1713, %r1717;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1718, %r484, %r1720, %r1715;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1722, %r487;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1724, %r1722, %r1726;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1727, %r484, %r1729, %r1724;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1731, %r487;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1733, %r1731, %r1735;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1736, %r484, %r1738, %r1733;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1740, %r487, %r1711;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1743, %r484, %r1708, %r1740;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1747, %r487, %r1720;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1750, %r484, %r1717, %r1747;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1754, %r487, %r1729;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1757, %r484, %r1726, %r1754;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1761, %r487, %r1738;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1764, %r484, %r1735, %r1761;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1809, %r1812}, {%r528, %r534, %r531, %r537}, {%r1709, %r1743}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1828, %r1831}, {%r528, %r534, %r531, %r537}, {%r1718, %r1750}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1816, %r1820}, {%r528, %r534, %r531, %r537}, {%r1727, %r1757}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1835, %r1839}, {%r528, %r534, %r531, %r537}, {%r1736, %r1764}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1808, %r1809, %r1809;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1811, %r1812, %r1812, %r1808;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1815, %r1816, %r1816, %r1811;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1819, %r1820, %r1820, %r1815;
	// end inline asm
	mov.u32 	%r1843, 442899046;
	// begin inline asm
	fma.rn.f16x2 %r1823, %r1843, %r1819, %r3670;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1827, %r1828, %r1828;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1830, %r1831, %r1831, %r1827;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1834, %r1835, %r1835, %r1830;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1838, %r1839, %r1839, %r1834;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1842, %r1843, %r1838, %r3669;
	// end inline asm
	mov.u32 	%r3675, %r1651;
	mov.u32 	%r3676, %r1651;
	mov.u32 	%r3677, %r1651;
	mov.u32 	%r3678, %r1651;
	@%p219 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_141;
$L__BB0_188:                            // %pass8027
                                        //   in Loop: Header=BB0_139 Depth=2
	ld.shared.u32 	%r3675, [%rd27];
	ld.shared.u32 	%r3676, [%rd28];
	ld.shared.u32 	%r3677, [%rd29];
	ld.shared.u32 	%r3678, [%rd30];
$L__BB0_141:                            // %L17880
                                        //   in Loop: Header=BB0_139 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1882, %r1879}, {%r432, %r435}, {%r3675}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1891, %r1888}, {%r432, %r435}, {%r3676}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1900, %r1897}, {%r432, %r435}, {%r3677}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1909, %r1906}, {%r432, %r435}, {%r3678}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1875, %r487;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1877, %r1875, %r1879;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1880, %r484, %r1882, %r1877;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1884, %r487;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1886, %r1884, %r1888;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1889, %r484, %r1891, %r1886;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1893, %r487;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1895, %r1893, %r1897;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1898, %r484, %r1900, %r1895;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1902, %r487;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1904, %r1902, %r1906;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1907, %r484, %r1909, %r1904;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1911, %r487, %r1882;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1914, %r484, %r1879, %r1911;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1918, %r487, %r1891;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1921, %r484, %r1888, %r1918;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1925, %r487, %r1900;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1928, %r484, %r1897, %r1925;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1932, %r487, %r1909;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1935, %r484, %r1906, %r1932;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1980, %r1983}, {%r528, %r534, %r531, %r537}, {%r1880, %r1914}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1999, %r2002}, {%r528, %r534, %r531, %r537}, {%r1889, %r1921}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1987, %r1991}, {%r528, %r534, %r531, %r537}, {%r1898, %r1928}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2006, %r2010}, {%r528, %r534, %r531, %r537}, {%r1907, %r1935}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1979, %r1980, %r1980;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1982, %r1983, %r1983, %r1979;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1986, %r1987, %r1987, %r1982;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1990, %r1991, %r1991, %r1986;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1994, %r1843, %r1990, %r1823;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1998, %r1999, %r1999;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2001, %r2002, %r2002, %r1998;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2005, %r2006, %r2006, %r2001;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2009, %r2010, %r2010, %r2005;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2013, %r1843, %r2009, %r1842;
	// end inline asm
	mov.u32 	%r3679, %r1651;
	mov.u32 	%r3680, %r1651;
	mov.u32 	%r3681, %r1651;
	mov.u32 	%r3682, %r1651;
	@%p219 bra 	$L__BB0_189;
	bra.uni 	$L__BB0_142;
$L__BB0_189:                            // %pass8632
                                        //   in Loop: Header=BB0_139 Depth=2
	ld.shared.u32 	%r3679, [%rd31];
	ld.shared.u32 	%r3680, [%rd32];
	ld.shared.u32 	%r3681, [%rd33];
	ld.shared.u32 	%r3682, [%rd34];
$L__BB0_142:                            // %L19087
                                        //   in Loop: Header=BB0_139 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2053, %r2050}, {%r432, %r435}, {%r3679}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2062, %r2059}, {%r432, %r435}, {%r3680}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2071, %r2068}, {%r432, %r435}, {%r3681}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2080, %r2077}, {%r432, %r435}, {%r3682}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2046, %r487;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2048, %r2046, %r2050;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2051, %r484, %r2053, %r2048;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2055, %r487;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2057, %r2055, %r2059;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2060, %r484, %r2062, %r2057;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2064, %r487;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2066, %r2064, %r2068;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2069, %r484, %r2071, %r2066;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2073, %r487;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2075, %r2073, %r2077;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2078, %r484, %r2080, %r2075;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2082, %r487, %r2053;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2085, %r484, %r2050, %r2082;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2089, %r487, %r2062;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2092, %r484, %r2059, %r2089;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2096, %r487, %r2071;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2099, %r484, %r2068, %r2096;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2103, %r487, %r2080;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2106, %r484, %r2077, %r2103;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2151, %r2154}, {%r528, %r534, %r531, %r537}, {%r2051, %r2085}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2170, %r2173}, {%r528, %r534, %r531, %r537}, {%r2060, %r2092}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2158, %r2162}, {%r528, %r534, %r531, %r537}, {%r2069, %r2099}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2177, %r2181}, {%r528, %r534, %r531, %r537}, {%r2078, %r2106}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2150, %r2151, %r2151;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2153, %r2154, %r2154, %r2150;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2157, %r2158, %r2158, %r2153;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2161, %r2162, %r2162, %r2157;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2165, %r1843, %r2161, %r1994;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2169, %r2170, %r2170;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2172, %r2173, %r2173, %r2169;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2176, %r2177, %r2177, %r2172;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2180, %r2181, %r2181, %r2176;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2184, %r1843, %r2180, %r2013;
	// end inline asm
	mov.u32 	%r3683, %r1651;
	mov.u32 	%r3684, %r1651;
	mov.u32 	%r3685, %r1651;
	mov.u32 	%r3686, %r1651;
	@%p219 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_143;
$L__BB0_190:                            // %pass9237
                                        //   in Loop: Header=BB0_139 Depth=2
	ld.shared.u32 	%r3683, [%rd35];
	ld.shared.u32 	%r3684, [%rd36];
	ld.shared.u32 	%r3685, [%rd37];
	ld.shared.u32 	%r3686, [%rd38];
$L__BB0_143:                            // %L20294
                                        //   in Loop: Header=BB0_139 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2224, %r2221}, {%r432, %r435}, {%r3683}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2233, %r2230}, {%r432, %r435}, {%r3684}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2242, %r2239}, {%r432, %r435}, {%r3685}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2251, %r2248}, {%r432, %r435}, {%r3686}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2217, %r487;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2219, %r2217, %r2221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2222, %r484, %r2224, %r2219;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2226, %r487;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2228, %r2226, %r2230;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2231, %r484, %r2233, %r2228;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2235, %r487;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2237, %r2235, %r2239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2240, %r484, %r2242, %r2237;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2244, %r487;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2246, %r2244, %r2248;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2249, %r484, %r2251, %r2246;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2253, %r487, %r2224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2256, %r484, %r2221, %r2253;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2260, %r487, %r2233;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2263, %r484, %r2230, %r2260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2267, %r487, %r2242;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2270, %r484, %r2239, %r2267;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2274, %r487, %r2251;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2277, %r484, %r2248, %r2274;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2322, %r2325}, {%r528, %r534, %r531, %r537}, {%r2222, %r2256}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2341, %r2344}, {%r528, %r534, %r531, %r537}, {%r2231, %r2263}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2329, %r2333}, {%r528, %r534, %r531, %r537}, {%r2240, %r2270}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2348, %r2352}, {%r528, %r534, %r531, %r537}, {%r2249, %r2277}, {%r1651, %r1651};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2321, %r2322, %r2322;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2324, %r2325, %r2325, %r2321;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2328, %r2329, %r2329, %r2324;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2332, %r2333, %r2333, %r2328;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3670, %r1843, %r2332, %r2165;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2340, %r2341, %r2341;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2343, %r2344, %r2344, %r2340;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2347, %r2348, %r2348, %r2343;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2351, %r2352, %r2352, %r2347;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3669, %r1843, %r2351, %r2184;
	// end inline asm
	add.s32 	%r3667, %r3667, 4;
	setp.ne.s32 	%p230, %r3667, 40;
	@%p230 bra 	$L__BB0_147;
// %bb.144:                             // %L20444
                                        //   in Loop: Header=BB0_139 Depth=2
	@%p67 bra 	$L__BB0_146;
// %bb.145:                             // %L20504
                                        //   in Loop: Header=BB0_139 Depth=2
	mul.lo.s32 	%r2359, %r3668, 1152;
	add.s32 	%r2360, %r116, %r2359;
	mul.wide.u32 	%rd238, %r2360, 4;
	add.s64 	%rd239, %rd4, %rd238;
	st.global.u32 	[%rd239], %r3670;
	add.s32 	%r2361, %r117, %r2359;
	mul.wide.u32 	%rd240, %r2361, 4;
	add.s64 	%rd241, %rd4, %rd240;
	st.global.u32 	[%rd241], %r3669;
	bra.uni 	$L__BB0_146;
$L__BB0_148:                            // %L20764.preheader
                                        //   in Loop: Header=BB0_137 Depth=1
	mov.u32 	%r3691, 12;
	bra.uni 	$L__BB0_149;
$L__BB0_156:                            // %L30334
                                        //   in Loop: Header=BB0_149 Depth=2
	add.s32 	%r3668, %r3668, 1;
	mov.u32 	%r3667, 0;
	mov.u32 	%r3669, %r3667;
	mov.u32 	%r3670, %r3667;
$L__BB0_157:                            // %L30335
                                        //   in Loop: Header=BB0_149 Depth=2
	bar.sync 	0;
	add.s32 	%r3691, %r3691, -4;
	setp.ne.s32 	%p245, %r3691, -12;
	@%p245 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_158;
$L__BB0_149:                            // %L20764
                                        //   Parent Loop BB0_137 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p234, %r3691, 12;
	selp.b32 	%r2901, %r3642, 0, %p234;
	setp.eq.s32 	%p235, %r3691, 8;
	selp.b32 	%r2902, %r3646, %r2901, %p235;
	setp.eq.s32 	%p236, %r3691, 4;
	selp.b32 	%r2903, %r3650, %r2902, %p236;
	setp.eq.s32 	%p237, %r3691, 0;
	selp.b32 	%r2904, %r3654, %r2903, %p237;
	setp.eq.s32 	%p238, %r3691, -4;
	selp.b32 	%r2905, %r3658, %r2904, %p238;
	setp.eq.s32 	%p239, %r3691, -8;
	selp.b32 	%r2906, %r3662, %r2905, %p239;
	selp.b32 	%r2907, %r3643, 0, %p234;
	selp.b32 	%r2908, %r3647, %r2907, %p235;
	selp.b32 	%r2909, %r3651, %r2908, %p236;
	selp.b32 	%r2910, %r3655, %r2909, %p237;
	selp.b32 	%r2911, %r3659, %r2910, %p238;
	selp.b32 	%r2912, %r3663, %r2911, %p239;
	selp.b32 	%r2913, %r3644, 0, %p234;
	selp.b32 	%r2914, %r3648, %r2913, %p235;
	selp.b32 	%r2915, %r3652, %r2914, %p236;
	selp.b32 	%r2916, %r3656, %r2915, %p237;
	selp.b32 	%r2917, %r3660, %r2916, %p238;
	selp.b32 	%r2918, %r3664, %r2917, %p239;
	selp.b32 	%r2919, %r3645, 0, %p234;
	selp.b32 	%r2920, %r3649, %r2919, %p235;
	selp.b32 	%r2921, %r3653, %r2920, %p236;
	selp.b32 	%r2922, %r3657, %r2921, %p237;
	selp.b32 	%r2923, %r3661, %r2922, %p238;
	selp.b32 	%r2924, %r3665, %r2923, %p239;
	// begin inline asm
	mov.b32 %r2391, {%rs197, %rs197};
	// end inline asm
	// begin inline asm
	mov.b32 %r2402, {%rs199, %rs199};
	// end inline asm
	shr.u32 	%r2925, %r2906, 8;
	xor.b32  	%r2401, %r2925, 8947848;
	// begin inline asm
	lop3.b32 %r2388, %r1256, %r2401, %r2391, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2392, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2393, %r2391, %r2392;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2396, %r2388, %r2393;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2399, %r1267, %r2401, %r2402, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2403, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2404, %r2402, %r2403;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2407, %r2399, %r2404;
	// end inline asm
	// begin inline asm
	mov.b32 %r2437, {%rs197, %rs197};
	// end inline asm
	// begin inline asm
	mov.b32 %r2448, {%rs199, %rs199};
	// end inline asm
	shr.u32 	%r2926, %r2912, 8;
	xor.b32  	%r2447, %r2926, 8947848;
	// begin inline asm
	lop3.b32 %r2434, %r1256, %r2447, %r2437, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2438, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2439, %r2437, %r2438;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2442, %r2434, %r2439;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2445, %r1267, %r2447, %r2448, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2449, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2450, %r2448, %r2449;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2453, %r2445, %r2450;
	// end inline asm
	// begin inline asm
	mov.b32 %r2483, {%rs197, %rs197};
	// end inline asm
	// begin inline asm
	mov.b32 %r2494, {%rs199, %rs199};
	// end inline asm
	shr.u32 	%r2927, %r2918, 8;
	xor.b32  	%r2493, %r2927, 8947848;
	// begin inline asm
	lop3.b32 %r2480, %r1256, %r2493, %r2483, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2484, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2485, %r2483, %r2484;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2488, %r2480, %r2485;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2491, %r1267, %r2493, %r2494, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2495, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2496, %r2494, %r2495;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2499, %r2491, %r2496;
	// end inline asm
	// begin inline asm
	mov.b32 %r2529, {%rs197, %rs197};
	// end inline asm
	// begin inline asm
	mov.b32 %r2540, {%rs199, %rs199};
	// end inline asm
	shr.u32 	%r2928, %r2924, 8;
	xor.b32  	%r2539, %r2928, 8947848;
	// begin inline asm
	lop3.b32 %r2526, %r1256, %r2539, %r2529, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2530, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2531, %r2529, %r2530;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2534, %r2526, %r2531;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2537, %r1267, %r2539, %r2540, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2541, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2542, %r2540, %r2541;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2545, %r2537, %r2542;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3635;
    mov.b32 {%r2re, %r2im}, %r2396;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2548, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3636;
    mov.b32 {%r2re, %r2im}, %r2407;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2551, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3635;
    mov.b32 {%r2re, %r2im}, %r2442;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2554, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3636;
    mov.b32 {%r2re, %r2im}, %r2453;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2557, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3635;
    mov.b32 {%r2re, %r2im}, %r2488;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2560, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3636;
    mov.b32 {%r2re, %r2im}, %r2499;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2563, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3635;
    mov.b32 {%r2re, %r2im}, %r2534;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2566, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3636;
    mov.b32 {%r2re, %r2im}, %r2545;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2569, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r2900, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2635, %r2632}, {%r318, %r321}, {%r2548}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2644, %r2641}, {%r318, %r321}, {%r2551}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2653, %r2650}, {%r318, %r321}, {%r2554}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2662, %r2659}, {%r318, %r321}, {%r2557}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2671, %r2668}, {%r318, %r321}, {%r2560}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2680, %r2677}, {%r318, %r321}, {%r2563}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2689, %r2686}, {%r318, %r321}, {%r2566}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2698, %r2695}, {%r318, %r321}, {%r2569}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2628, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2630, %r2628, %r2632;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2633, %r370, %r2635, %r2630;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2637, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2639, %r2637, %r2641;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2642, %r370, %r2644, %r2639;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2646, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2648, %r2646, %r2650;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2651, %r370, %r2653, %r2648;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2655, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2657, %r2655, %r2659;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2660, %r370, %r2662, %r2657;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2664, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2666, %r2664, %r2668;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2669, %r370, %r2671, %r2666;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2673, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2675, %r2673, %r2677;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2678, %r370, %r2680, %r2675;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2682, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2684, %r2682, %r2686;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2687, %r370, %r2689, %r2684;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2691, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2693, %r2691, %r2695;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2696, %r370, %r2698, %r2693;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2700, %r373, %r2635;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2703, %r370, %r2632, %r2700;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2707, %r373, %r2644;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2710, %r370, %r2641, %r2707;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2714, %r373, %r2653;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2717, %r370, %r2650, %r2714;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2721, %r373, %r2662;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2724, %r370, %r2659, %r2721;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2728, %r373, %r2671;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2731, %r370, %r2668, %r2728;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2735, %r373, %r2680;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2738, %r370, %r2677, %r2735;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2742, %r373, %r2689;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2745, %r370, %r2686, %r2742;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2749, %r373, %r2698;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2752, %r370, %r2695, %r2749;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2837, %r2838}, {%r414, %r420, %r417, %r423}, {%r2633, %r2703}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2845, %r2846}, {%r414, %r420, %r417, %r423}, {%r2642, %r2710}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2853, %r2854}, {%r414, %r420, %r417, %r423}, {%r2651, %r2717}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2861, %r2862}, {%r414, %r420, %r417, %r423}, {%r2660, %r2724}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2869, %r2870}, {%r414, %r420, %r417, %r423}, {%r2669, %r2731}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2877, %r2878}, {%r414, %r420, %r417, %r423}, {%r2678, %r2738}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2885, %r2886}, {%r414, %r420, %r417, %r423}, {%r2687, %r2745}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2893, %r2894}, {%r414, %r420, %r417, %r423}, {%r2696, %r2752}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	prmt.b32 %r2836, %r2837, %r2838, %r924;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2840, %r2837, %r2838, %r928;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2844, %r2845, %r2846, %r924;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2848, %r2845, %r2846, %r928;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2852, %r2853, %r2854, %r924;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2856, %r2853, %r2854, %r928;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2860, %r2861, %r2862, %r924;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2864, %r2861, %r2862, %r928;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2868, %r2869, %r2870, %r924;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2872, %r2869, %r2870, %r928;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2876, %r2877, %r2878, %r924;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2880, %r2877, %r2878, %r928;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2884, %r2885, %r2886, %r924;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2888, %r2885, %r2886, %r928;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2892, %r2893, %r2894, %r924;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2896, %r2893, %r2894, %r928;
	// end inline asm
	st.shared.u32 	[%rd6], %r2836;
	st.shared.u32 	[%rd7], %r2840;
	st.shared.u32 	[%rd8], %r2844;
	st.shared.u32 	[%rd9], %r2848;
	st.shared.u32 	[%rd15], %r2852;
	st.shared.u32 	[%rd16], %r2856;
	st.shared.u32 	[%rd17], %r2860;
	st.shared.u32 	[%rd18], %r2864;
	st.shared.u32 	[%rd19], %r2868;
	st.shared.u32 	[%rd20], %r2872;
	st.shared.u32 	[%rd21], %r2876;
	st.shared.u32 	[%rd22], %r2880;
	st.shared.u32 	[%rd23], %r2884;
	st.shared.u32 	[%rd24], %r2888;
	st.shared.u32 	[%rd25], %r2892;
	st.shared.u32 	[%rd26], %r2896;
	bar.sync 	0;
	mov.u32 	%r3696, %r2900;
	mov.u32 	%r3697, %r2900;
	mov.u32 	%r3698, %r2900;
	mov.u32 	%r3699, %r2900;
	@%p219 bra 	$L__BB0_191;
	bra.uni 	$L__BB0_150;
$L__BB0_191:                            // %pass12112
                                        //   in Loop: Header=BB0_149 Depth=2
	ld.shared.u32 	%r3699, [%rd10];
	ld.shared.u32 	%r3698, [%rd11];
	ld.shared.u32 	%r3697, [%rd12];
	ld.shared.u32 	%r3696, [%rd13];
$L__BB0_150:                            // %L26269
                                        //   in Loop: Header=BB0_149 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2964, %r2961}, {%r432, %r435}, {%r3699}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2973, %r2970}, {%r432, %r435}, {%r3698}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2982, %r2979}, {%r432, %r435}, {%r3697}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2991, %r2988}, {%r432, %r435}, {%r3696}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2957, %r487;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2959, %r2957, %r2961;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2962, %r484, %r2964, %r2959;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2966, %r487;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2968, %r2966, %r2970;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2971, %r484, %r2973, %r2968;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2975, %r487;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2977, %r2975, %r2979;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2980, %r484, %r2982, %r2977;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2984, %r487;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2986, %r2984, %r2988;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2989, %r484, %r2991, %r2986;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2993, %r487, %r2964;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2996, %r484, %r2961, %r2993;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3000, %r487, %r2973;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3003, %r484, %r2970, %r3000;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3007, %r487, %r2982;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3010, %r484, %r2979, %r3007;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3014, %r487, %r2991;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3017, %r484, %r2988, %r3014;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3062, %r3065}, {%r528, %r534, %r531, %r537}, {%r2962, %r2996}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3081, %r3084}, {%r528, %r534, %r531, %r537}, {%r2971, %r3003}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3069, %r3073}, {%r528, %r534, %r531, %r537}, {%r2980, %r3010}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3088, %r3092}, {%r528, %r534, %r531, %r537}, {%r2989, %r3017}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3061, %r3062, %r3062;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3064, %r3065, %r3065, %r3061;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3068, %r3069, %r3069, %r3064;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3072, %r3073, %r3073, %r3068;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3076, %r1843, %r3072, %r3670;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3080, %r3081, %r3081;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3083, %r3084, %r3084, %r3080;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3087, %r3088, %r3088, %r3083;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3091, %r3092, %r3092, %r3087;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3095, %r1843, %r3091, %r3669;
	// end inline asm
	mov.u32 	%r3700, %r2900;
	mov.u32 	%r3701, %r2900;
	mov.u32 	%r3702, %r2900;
	mov.u32 	%r3703, %r2900;
	@%p219 bra 	$L__BB0_192;
	bra.uni 	$L__BB0_151;
$L__BB0_192:                            // %pass12717
                                        //   in Loop: Header=BB0_149 Depth=2
	ld.shared.u32 	%r3703, [%rd27];
	ld.shared.u32 	%r3702, [%rd28];
	ld.shared.u32 	%r3701, [%rd29];
	ld.shared.u32 	%r3700, [%rd30];
$L__BB0_151:                            // %L27476
                                        //   in Loop: Header=BB0_149 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3135, %r3132}, {%r432, %r435}, {%r3703}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3144, %r3141}, {%r432, %r435}, {%r3702}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3153, %r3150}, {%r432, %r435}, {%r3701}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3162, %r3159}, {%r432, %r435}, {%r3700}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3128, %r487;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3130, %r3128, %r3132;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3133, %r484, %r3135, %r3130;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3137, %r487;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3139, %r3137, %r3141;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3142, %r484, %r3144, %r3139;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3146, %r487;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3148, %r3146, %r3150;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3151, %r484, %r3153, %r3148;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3155, %r487;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3157, %r3155, %r3159;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3160, %r484, %r3162, %r3157;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3164, %r487, %r3135;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3167, %r484, %r3132, %r3164;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3171, %r487, %r3144;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3174, %r484, %r3141, %r3171;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3178, %r487, %r3153;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3181, %r484, %r3150, %r3178;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3185, %r487, %r3162;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3188, %r484, %r3159, %r3185;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3233, %r3236}, {%r528, %r534, %r531, %r537}, {%r3133, %r3167}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3252, %r3255}, {%r528, %r534, %r531, %r537}, {%r3142, %r3174}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3240, %r3244}, {%r528, %r534, %r531, %r537}, {%r3151, %r3181}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3259, %r3263}, {%r528, %r534, %r531, %r537}, {%r3160, %r3188}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3232, %r3233, %r3233;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3235, %r3236, %r3236, %r3232;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3239, %r3240, %r3240, %r3235;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3243, %r3244, %r3244, %r3239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3247, %r1843, %r3243, %r3076;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3251, %r3252, %r3252;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3254, %r3255, %r3255, %r3251;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3258, %r3259, %r3259, %r3254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3262, %r3263, %r3263, %r3258;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3266, %r1843, %r3262, %r3095;
	// end inline asm
	mov.u32 	%r3704, %r2900;
	mov.u32 	%r3705, %r2900;
	mov.u32 	%r3706, %r2900;
	mov.u32 	%r3707, %r2900;
	@%p219 bra 	$L__BB0_193;
	bra.uni 	$L__BB0_152;
$L__BB0_193:                            // %pass13322
                                        //   in Loop: Header=BB0_149 Depth=2
	ld.shared.u32 	%r3707, [%rd31];
	ld.shared.u32 	%r3706, [%rd32];
	ld.shared.u32 	%r3705, [%rd33];
	ld.shared.u32 	%r3704, [%rd34];
$L__BB0_152:                            // %L28683
                                        //   in Loop: Header=BB0_149 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3306, %r3303}, {%r432, %r435}, {%r3707}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3315, %r3312}, {%r432, %r435}, {%r3706}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3324, %r3321}, {%r432, %r435}, {%r3705}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3333, %r3330}, {%r432, %r435}, {%r3704}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3299, %r487;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3301, %r3299, %r3303;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3304, %r484, %r3306, %r3301;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3308, %r487;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3310, %r3308, %r3312;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3313, %r484, %r3315, %r3310;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3317, %r487;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3319, %r3317, %r3321;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3322, %r484, %r3324, %r3319;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3326, %r487;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3328, %r3326, %r3330;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3331, %r484, %r3333, %r3328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3335, %r487, %r3306;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3338, %r484, %r3303, %r3335;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3342, %r487, %r3315;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3345, %r484, %r3312, %r3342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3349, %r487, %r3324;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3352, %r484, %r3321, %r3349;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3356, %r487, %r3333;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3359, %r484, %r3330, %r3356;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3404, %r3407}, {%r528, %r534, %r531, %r537}, {%r3304, %r3338}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3423, %r3426}, {%r528, %r534, %r531, %r537}, {%r3313, %r3345}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3411, %r3415}, {%r528, %r534, %r531, %r537}, {%r3322, %r3352}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3430, %r3434}, {%r528, %r534, %r531, %r537}, {%r3331, %r3359}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3403, %r3404, %r3404;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3406, %r3407, %r3407, %r3403;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3410, %r3411, %r3411, %r3406;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3414, %r3415, %r3415, %r3410;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3418, %r1843, %r3414, %r3247;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3422, %r3423, %r3423;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3425, %r3426, %r3426, %r3422;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3429, %r3430, %r3430, %r3425;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3433, %r3434, %r3434, %r3429;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3437, %r1843, %r3433, %r3266;
	// end inline asm
	mov.u32 	%r3708, %r2900;
	mov.u32 	%r3709, %r2900;
	mov.u32 	%r3710, %r2900;
	mov.u32 	%r3711, %r2900;
	@%p219 bra 	$L__BB0_194;
	bra.uni 	$L__BB0_153;
$L__BB0_194:                            // %pass13927
                                        //   in Loop: Header=BB0_149 Depth=2
	ld.shared.u32 	%r3711, [%rd35];
	ld.shared.u32 	%r3710, [%rd36];
	ld.shared.u32 	%r3709, [%rd37];
	ld.shared.u32 	%r3708, [%rd38];
$L__BB0_153:                            // %L29890
                                        //   in Loop: Header=BB0_149 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3477, %r3474}, {%r432, %r435}, {%r3711}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3486, %r3483}, {%r432, %r435}, {%r3710}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3495, %r3492}, {%r432, %r435}, {%r3709}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3504, %r3501}, {%r432, %r435}, {%r3708}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3470, %r487;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3472, %r3470, %r3474;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3475, %r484, %r3477, %r3472;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3479, %r487;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3481, %r3479, %r3483;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3484, %r484, %r3486, %r3481;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3488, %r487;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3490, %r3488, %r3492;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3493, %r484, %r3495, %r3490;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3497, %r487;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3499, %r3497, %r3501;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3502, %r484, %r3504, %r3499;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3506, %r487, %r3477;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3509, %r484, %r3474, %r3506;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3513, %r487, %r3486;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3516, %r484, %r3483, %r3513;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3520, %r487, %r3495;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3523, %r484, %r3492, %r3520;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3527, %r487, %r3504;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3530, %r484, %r3501, %r3527;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3575, %r3578}, {%r528, %r534, %r531, %r537}, {%r3475, %r3509}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3594, %r3597}, {%r528, %r534, %r531, %r537}, {%r3484, %r3516}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3582, %r3586}, {%r528, %r534, %r531, %r537}, {%r3493, %r3523}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3601, %r3605}, {%r528, %r534, %r531, %r537}, {%r3502, %r3530}, {%r2900, %r2900};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3574, %r3575, %r3575;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3577, %r3578, %r3578, %r3574;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3581, %r3582, %r3582, %r3577;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3585, %r3586, %r3586, %r3581;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3670, %r1843, %r3585, %r3418;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3593, %r3594, %r3594;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3596, %r3597, %r3597, %r3593;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3600, %r3601, %r3601, %r3596;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3604, %r3605, %r3605, %r3600;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3669, %r1843, %r3604, %r3437;
	// end inline asm
	add.s32 	%r3667, %r3667, 4;
	setp.ne.s32 	%p243, %r3667, 40;
	@%p243 bra 	$L__BB0_157;
// %bb.154:                             // %L30040
                                        //   in Loop: Header=BB0_149 Depth=2
	@%p67 bra 	$L__BB0_156;
// %bb.155:                             // %L30100
                                        //   in Loop: Header=BB0_149 Depth=2
	mul.lo.s32 	%r3612, %r3668, 1152;
	add.s32 	%r3613, %r116, %r3612;
	mul.wide.u32 	%rd242, %r3613, 4;
	add.s64 	%rd243, %rd4, %rd242;
	st.global.u32 	[%rd243], %r3670;
	add.s32 	%r3614, %r117, %r3612;
	mul.wide.u32 	%rd244, %r3614, 4;
	add.s64 	%rd245, %rd4, %rd244;
	st.global.u32 	[%rd245], %r3669;
	bra.uni 	$L__BB0_156;
$L__BB0_159:                            // %L30370
	mov.u32 	%r3616, 0;
	st.global.u32 	[%rd5], %r3616;
	ret;
$L__BB0_1:                              // %L8
	ld.param.u32 	%r304, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd39, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0];
	mov.u64 	%rd44, exception12818;
	cvta.global.u64 	%rd45, %rd44;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd45;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd39;
	st.param.b32 	[param0+8], %r304;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
