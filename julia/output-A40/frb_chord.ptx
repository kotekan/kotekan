// PTX CompilerJob of MethodInstance for frb(::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.1
.target sm_86
.address_size 64

	// .globl	_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE // -- Begin function _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.visible .entry _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE(
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<142>;
	.reg .b16 	%rs<272>;
	.reg .f32 	%f<397>;
	.reg .b32 	%r<3643>;
	.reg .b64 	%rd<291>;

// %bb.0:                               // %conversion
	// begin inline asm
	mov.u32 %r309, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r309, 76895;
	@%p1 bra 	LBB0_94;
	bra.uni 	LBB0_1;
LBB0_94:                                // %L11
	ld.param.u64 	%rd14, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5];
	mov.u32 	%r1, %ctaid.x;
	mul.lo.s32 	%r310, %r1, 768;
	mov.u32 	%r2, %tid.x;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r311, %r2, %r310;
	add.s32 	%r312, %r4, %r311;
	mul.wide.u32 	%rd20, %r312, 4;
	add.s64 	%rd5, %rd14, %rd20;
	mov.u32 	%r313, 1;
	st.global.u32 	[%rd5], %r313;
	and.b32  	%r5, %r2, 3;
	shr.u32 	%r6, %r2, 2;
	mul.lo.s32 	%r314, %r5, %r6;
	and.b32  	%r315, %r314, 7;
	cvt.rn.f32.u32 	%f102, %r315;
	mov.f32 	%f103, 0f40800000;
	div.approx.f32 	%f1, %f102, %f103;
	abs.f32 	%f395, %f1;
	setp.lt.f32 	%p2, %f395, 0f40000000;
	@%p2 bra 	LBB0_106;
// %bb.95:
	setp.gtu.f32 	%p3, %f395, 0f4B800000;
	@%p3 bra 	LBB0_102;
	bra.uni 	LBB0_96;
LBB0_102:
	mov.b32 	%r240, %f395;
	and.b32  	%r316, %r240, 8388607;
	or.b32  	%r3641, %r316, 1065353216;
	mov.b32 	%f394, %r3641;
	add.s32 	%r317, %r240, -1073741824;
	and.b32  	%r3642, %r317, -8388608;
	setp.eq.s32 	%p9, %r3642, 0;
	@%p9 bra 	LBB0_105;
// %bb.103:                             // %.lr.ph2970.preheader
	mov.f32 	%f113, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f112,%f113;
	// end inline asm
LBB0_104:                               // %.lr.ph2970
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r318, %r3642, 192937984;
	add.s32 	%r319, %r318, %r3641;
	mov.b32 	%f114, %r319;
	mul.f32 	%f115, %f112, %f114;
	sub.f32 	%f116, %f114, %f115;
	fma.rn.f32 	%f117, %f116, %f112, %f115;
	sub.f32 	%f118, %f114, %f117;
	fma.rz.f32 	%f119, %f118, %f112, %f117;
	cvt.rzi.f32.f32 	%f120, %f119;
	sub.f32 	%f394, %f114, %f120;
	sub.s32 	%r3642, %r3642, %r318;
	mov.b32 	%r3641, %f394;
	setp.ne.s32 	%p10, %r3642, 0;
	setp.ne.s32 	%p11, %r3641, 0;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	LBB0_104;
LBB0_105:                               // %__internal_fmodf_slowpath_mod.exit.i.i1396
	setp.gt.u32 	%p13, %r240, 2139095039;
	selp.f32 	%f121, 0f7FFFFFFF, 0f4B800000, %p13;
	mul.f32 	%f122, %f394, 0f34000000;
	mul.f32 	%f395, %f121, %f122;
	bra.uni 	LBB0_106;
LBB0_96:                                // %__nv_fast_fdividef.exit.i.i.i1362
	mov.f32 	%f104, 0f40000000;
	div.approx.f32 	%f105, %f395, %f104;
	cvt.rzi.f32.f32 	%f87, %f105;
	fma.rn.f32 	%f88, %f87, 0fC0000000, %f395;
	mov.b32 	%r239, %f88;
	setp.lt.u32 	%p4, %r239, 1073741824;
	mov.f32 	%f393, %f87;
	@%p4 bra 	LBB0_101;
// %bb.97:
	setp.lt.u32 	%p5, %r239, -2147483647;
	@%p5 bra 	LBB0_99;
// %bb.98:
	add.f32 	%f110, %f87, 0fBF800000;
	setp.lt.f32 	%p8, %f88, 0fC0000000;
	selp.f32 	%f111, %f110, %f87, %p8;
	add.f32 	%f393, %f111, 0fBF800000;
	bra.uni 	LBB0_101;
LBB0_99:
	add.f32 	%f393, %f87, 0f3F800000;
	setp.ltu.f32 	%p6, %f88, 0f40800000;
	@%p6 bra 	LBB0_101;
// %bb.100:                             // %__nv_fmaf_rn.exit.i.i.i1367
	fma.rn.f32 	%f107, %f104, 0fC0400000, %f88;
	setp.ge.f32 	%p7, %f107, 0f00000000;
	selp.f32 	%f108, %f393, %f87, %p7;
	add.f32 	%f109, %f108, 0f3F800000;
	add.f32 	%f393, %f109, 0f3F800000;
LBB0_101:                               // %__internal_fmodf_fastpath_quot.exit.i.i1370
	fma.rn.f32 	%f395, %f393, 0fC0000000, %f395;
LBB0_106:                               // %__internal_fmodf_kernel.exit.i1399
	abs.f32 	%f123, %f395;
	setp.gtu.f32 	%p14, %f123, 0f7F800000;
	@%p14 bra 	LBB0_108;
// %bb.107:
	mov.b32 	%r320, %f1;
	and.b32  	%r321, %r320, -2147483648;
	mov.b32 	%r322, %f395;
	or.b32  	%r323, %r321, %r322;
	mov.b32 	%f395, %r323;
LBB0_108:                               // %__nv_fmodf.exit1402
	add.f32 	%f125, %f395, %f395;
	mov.b32 	%r330, %f125;
	and.b32  	%r331, %r330, -2147483648;
	or.b32  	%r332, %r331, 1056964608;
	mov.b32 	%f126, %r332;
	add.f32 	%f127, %f125, %f126;
	cvt.rzi.f32.f32 	%f128, %f127;
	abs.f32 	%f129, %f125;
	setp.gt.f32 	%p15, %f129, 0f4B000000;
	selp.f32 	%f130, %f125, %f128, %p15;
	cvt.rzi.f32.f32 	%f131, %f125;
	setp.lt.f32 	%p16, %f129, 0f3F000000;
	selp.f32 	%f132, %f131, %f130, %p16;
	cvt.rzi.s32.f32 	%r333, %f132;
	fma.rn.f32 	%f133, %f132, 0fBF000000, %f395;
	mul.f32 	%f134, %f133, %f133;
	fma.rn.f32 	%f135, %f134, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f136, %f134, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f137, %f135, %f134, 0fC0A55DF6;
	fma.rn.f32 	%f138, %f136, %f134, 0f4081E0CF;
	fma.rn.f32 	%f139, %f134, %f133, 0f00000000;
	fma.rn.f32 	%f140, %f138, %f134, 0fC09DE9E6;
	fma.rn.f32 	%f141, %f137, %f139, 0f00000000;
	fma.rn.f32 	%f142, %f140, %f134, 0f3F800000;
	fma.rn.f32 	%f143, %f133, 0f40490FDB, %f141;
	and.b32  	%r334, %r333, 1;
	setp.eq.b32 	%p17, %r334, 1;
	selp.f32 	%f144, %f142, %f143, %p17;
	selp.f32 	%f145, %f143, %f142, %p17;
	and.b32  	%r335, %r333, 2;
	setp.eq.s32 	%p18, %r335, 0;
	neg.f32 	%f146, %f144;
	selp.f32 	%f147, %f144, %f146, %p18;
	add.s32 	%r336, %r333, 1;
	and.b32  	%r337, %r336, 2;
	mov.f32 	%f391, 0f00000000;
	cvt.rzi.f32.f32 	%f150, %f395;
	setp.eq.f32 	%p20, %f150, %f395;
	mul.f32 	%f151, %f395, 0f00000000;
	shl.b32 	%r249, %r2, 1;
	and.b32  	%r250, %r249, 6;
	or.b32  	%r251, %r250, 1;
	setp.eq.s32 	%p22, %r250, 6;
	mov.f32 	%f367, 0f41C00000;
	mul.lo.s32 	%r3542, %r250, %r6;
	mov.f32 	%f373, %f391;
	mov.f32 	%f374, %f391;
	@%p22 bra 	LBB0_17;
// %bb.2:                               // %L210
	cvt.u16.u32 	%rs1, %r3542;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 13;
	mul.lo.s16 	%rs5, %rs4, 48;
	sub.s16 	%rs6, %rs1, %rs5;
	and.b16  	%rs7, %rs6, 255;
	cvt.rn.f32.u16 	%f156, %rs7;
	div.approx.f32 	%f3, %f156, %f367;
	abs.f32 	%f371, %f3;
	setp.lt.f32 	%p23, %f371, 0f40000000;
	@%p23 bra 	LBB0_14;
// %bb.3:
	setp.gtu.f32 	%p24, %f371, 0f4B800000;
	@%p24 bra 	LBB0_10;
	bra.uni 	LBB0_4;
LBB0_10:
	mov.b32 	%r8, %f371;
	and.b32  	%r339, %r8, 8388607;
	or.b32  	%r3545, %r339, 1065353216;
	mov.b32 	%f370, %r3545;
	add.s32 	%r340, %r8, -1073741824;
	and.b32  	%r3546, %r340, -8388608;
	setp.eq.s32 	%p30, %r3546, 0;
	@%p30 bra 	LBB0_13;
// %bb.11:                              // %.lr.ph2965.preheader
	mov.f32 	%f167, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f166,%f167;
	// end inline asm
LBB0_12:                                // %.lr.ph2965
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r341, %r3546, 192937984;
	add.s32 	%r342, %r341, %r3545;
	mov.b32 	%f168, %r342;
	mul.f32 	%f169, %f166, %f168;
	sub.f32 	%f170, %f168, %f169;
	fma.rn.f32 	%f171, %f170, %f166, %f169;
	sub.f32 	%f172, %f168, %f171;
	fma.rz.f32 	%f173, %f172, %f166, %f171;
	cvt.rzi.f32.f32 	%f174, %f173;
	sub.f32 	%f370, %f168, %f174;
	sub.s32 	%r3546, %r3546, %r341;
	mov.b32 	%r3545, %f370;
	setp.ne.s32 	%p31, %r3546, 0;
	setp.ne.s32 	%p32, %r3545, 0;
	and.pred  	%p33, %p31, %p32;
	@%p33 bra 	LBB0_12;
LBB0_13:                                // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p34, %r8, 2139095039;
	selp.f32 	%f175, 0f7FFFFFFF, 0f4B800000, %p34;
	mul.f32 	%f176, %f370, 0f34000000;
	mul.f32 	%f371, %f175, %f176;
	bra.uni 	LBB0_14;
LBB0_4:                                 // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f158, 0f40000000;
	div.approx.f32 	%f159, %f371, %f158;
	cvt.rzi.f32.f32 	%f5, %f159;
	fma.rn.f32 	%f6, %f5, 0fC0000000, %f371;
	mov.b32 	%r7, %f6;
	setp.lt.u32 	%p25, %r7, 1073741824;
	mov.f32 	%f369, %f5;
	@%p25 bra 	LBB0_9;
// %bb.5:
	setp.lt.u32 	%p26, %r7, -2147483647;
	@%p26 bra 	LBB0_7;
// %bb.6:
	add.f32 	%f164, %f5, 0fBF800000;
	setp.lt.f32 	%p29, %f6, 0fC0000000;
	selp.f32 	%f165, %f164, %f5, %p29;
	add.f32 	%f369, %f165, 0fBF800000;
	bra.uni 	LBB0_9;
LBB0_7:
	add.f32 	%f369, %f5, 0f3F800000;
	setp.ltu.f32 	%p27, %f6, 0f40800000;
	@%p27 bra 	LBB0_9;
// %bb.8:                               // %__nv_fmaf_rn.exit.i.i.i
	fma.rn.f32 	%f161, %f158, 0fC0400000, %f6;
	setp.ge.f32 	%p28, %f161, 0f00000000;
	selp.f32 	%f162, %f369, %f5, %p28;
	add.f32 	%f163, %f162, 0f3F800000;
	add.f32 	%f369, %f163, 0f3F800000;
LBB0_9:                                 // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f371, %f369, 0fC0000000, %f371;
LBB0_14:                                // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f177, %f371;
	setp.gtu.f32 	%p35, %f177, 0f7F800000;
	@%p35 bra 	LBB0_16;
// %bb.15:
	mov.b32 	%r343, %f3;
	and.b32  	%r344, %r343, -2147483648;
	mov.b32 	%r345, %f371;
	or.b32  	%r346, %r344, %r345;
	mov.b32 	%f371, %r346;
LBB0_16:                                // %__nv_fmodf.exit
	add.f32 	%f178, %f371, %f371;
	mov.b32 	%r347, %f178;
	and.b32  	%r348, %r347, -2147483648;
	or.b32  	%r349, %r348, 1056964608;
	mov.b32 	%f179, %r349;
	add.f32 	%f180, %f178, %f179;
	cvt.rzi.f32.f32 	%f181, %f180;
	abs.f32 	%f182, %f178;
	setp.gt.f32 	%p36, %f182, 0f4B000000;
	selp.f32 	%f183, %f178, %f181, %p36;
	cvt.rzi.f32.f32 	%f184, %f178;
	setp.lt.f32 	%p37, %f182, 0f3F000000;
	selp.f32 	%f185, %f184, %f183, %p37;
	cvt.rzi.s32.f32 	%r350, %f185;
	fma.rn.f32 	%f186, %f185, 0fBF000000, %f371;
	mul.f32 	%f187, %f186, %f186;
	fma.rn.f32 	%f188, %f187, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f189, %f187, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f190, %f188, %f187, 0fC0A55DF6;
	fma.rn.f32 	%f191, %f189, %f187, 0f4081E0CF;
	fma.rn.f32 	%f192, %f187, %f186, 0f00000000;
	fma.rn.f32 	%f193, %f191, %f187, 0fC09DE9E6;
	fma.rn.f32 	%f194, %f190, %f192, 0f00000000;
	fma.rn.f32 	%f195, %f193, %f187, 0f3F800000;
	fma.rn.f32 	%f196, %f186, 0f40490FDB, %f194;
	and.b32  	%r351, %r350, 1;
	setp.eq.b32 	%p38, %r351, 1;
	selp.f32 	%f197, %f195, %f196, %p38;
	selp.f32 	%f198, %f196, %f195, %p38;
	and.b32  	%r352, %r350, 2;
	setp.eq.s32 	%p39, %r352, 0;
	neg.f32 	%f199, %f197;
	selp.f32 	%f200, %f197, %f199, %p39;
	add.s32 	%r353, %r350, 1;
	and.b32  	%r354, %r353, 2;
	setp.eq.s32 	%p40, %r354, 0;
	mov.f32 	%f201, 0f00000000;
	sub.f32 	%f202, %f201, %f198;
	selp.f32 	%f203, %f198, %f202, %p40;
	cvt.rzi.f32.f32 	%f204, %f371;
	setp.eq.f32 	%p41, %f204, %f371;
	mul.f32 	%f205, %f371, 0f00000000;
	selp.f32 	%f374, %f205, %f200, %p41;
	abs.f32 	%f206, %f371;
	setp.gt.f32 	%p42, %f206, 0f4B800000;
	add.f32 	%f207, %f374, 0f3F800000;
	selp.f32 	%f373, %f207, %f203, %p42;
LBB0_17:                                // %L226
	setp.eq.s32 	%p19, %r337, 0;
	sub.f32 	%f148, %f391, %f145;
	selp.f32 	%f152, %f151, %f147, %p20;
	abs.f32 	%f153, %f395;
	setp.gt.u32 	%p43, %r251, 5;
	mul.lo.s32 	%r3543, %r251, %r6;
	mov.f32 	%f379, %f391;
	mov.f32 	%f380, %f391;
	@%p43 bra 	LBB0_33;
// %bb.18:                              // %L230
	mul.hi.u32 	%r356, %r3543, -1431655765;
	shr.u32 	%r357, %r356, 5;
	mul.lo.s32 	%r358, %r357, 48;
	sub.s32 	%r359, %r3543, %r358;
	cvt.rn.f32.s32 	%f209, %r359;
	div.approx.f32 	%f24, %f209, %f367;
	abs.f32 	%f377, %f24;
	setp.lt.f32 	%p44, %f377, 0f40000000;
	@%p44 bra 	LBB0_30;
// %bb.19:
	setp.gtu.f32 	%p45, %f377, 0f4B800000;
	@%p45 bra 	LBB0_26;
	bra.uni 	LBB0_20;
LBB0_26:
	mov.b32 	%r16, %f377;
	and.b32  	%r360, %r16, 8388607;
	or.b32  	%r3547, %r360, 1065353216;
	mov.b32 	%f376, %r3547;
	add.s32 	%r361, %r16, -1073741824;
	and.b32  	%r3548, %r361, -8388608;
	setp.eq.s32 	%p51, %r3548, 0;
	@%p51 bra 	LBB0_29;
// %bb.27:                              // %.lr.ph2960.preheader
	mov.f32 	%f220, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f219,%f220;
	// end inline asm
LBB0_28:                                // %.lr.ph2960
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r362, %r3548, 192937984;
	add.s32 	%r363, %r362, %r3547;
	mov.b32 	%f221, %r363;
	mul.f32 	%f222, %f219, %f221;
	sub.f32 	%f223, %f221, %f222;
	fma.rn.f32 	%f224, %f223, %f219, %f222;
	sub.f32 	%f225, %f221, %f224;
	fma.rz.f32 	%f226, %f225, %f219, %f224;
	cvt.rzi.f32.f32 	%f227, %f226;
	sub.f32 	%f376, %f221, %f227;
	sub.s32 	%r3548, %r3548, %r362;
	mov.b32 	%r3547, %f376;
	setp.ne.s32 	%p52, %r3548, 0;
	setp.ne.s32 	%p53, %r3547, 0;
	and.pred  	%p54, %p52, %p53;
	@%p54 bra 	LBB0_28;
LBB0_29:                                // %__internal_fmodf_slowpath_mod.exit.i.i1237
	setp.gt.u32 	%p55, %r16, 2139095039;
	selp.f32 	%f228, 0f7FFFFFFF, 0f4B800000, %p55;
	mul.f32 	%f229, %f376, 0f34000000;
	mul.f32 	%f377, %f228, %f229;
	bra.uni 	LBB0_30;
LBB0_20:                                // %__nv_fast_fdividef.exit.i.i.i1203
	mov.f32 	%f211, 0f40000000;
	div.approx.f32 	%f212, %f377, %f211;
	cvt.rzi.f32.f32 	%f26, %f212;
	fma.rn.f32 	%f27, %f26, 0fC0000000, %f377;
	mov.b32 	%r15, %f27;
	setp.lt.u32 	%p46, %r15, 1073741824;
	mov.f32 	%f375, %f26;
	@%p46 bra 	LBB0_25;
// %bb.21:
	setp.lt.u32 	%p47, %r15, -2147483647;
	@%p47 bra 	LBB0_23;
// %bb.22:
	add.f32 	%f217, %f26, 0fBF800000;
	setp.lt.f32 	%p50, %f27, 0fC0000000;
	selp.f32 	%f218, %f217, %f26, %p50;
	add.f32 	%f375, %f218, 0fBF800000;
	bra.uni 	LBB0_25;
LBB0_23:
	add.f32 	%f375, %f26, 0f3F800000;
	setp.ltu.f32 	%p48, %f27, 0f40800000;
	@%p48 bra 	LBB0_25;
// %bb.24:                              // %__nv_fmaf_rn.exit.i.i.i1208
	fma.rn.f32 	%f214, %f211, 0fC0400000, %f27;
	setp.ge.f32 	%p49, %f214, 0f00000000;
	selp.f32 	%f215, %f375, %f26, %p49;
	add.f32 	%f216, %f215, 0f3F800000;
	add.f32 	%f375, %f216, 0f3F800000;
LBB0_25:                                // %__internal_fmodf_fastpath_quot.exit.i.i1211
	fma.rn.f32 	%f377, %f375, 0fC0000000, %f377;
LBB0_30:                                // %__internal_fmodf_kernel.exit.i1240
	abs.f32 	%f230, %f377;
	setp.gtu.f32 	%p56, %f230, 0f7F800000;
	@%p56 bra 	LBB0_32;
// %bb.31:
	mov.b32 	%r364, %f24;
	and.b32  	%r365, %r364, -2147483648;
	mov.b32 	%r366, %f377;
	or.b32  	%r367, %r365, %r366;
	mov.b32 	%f377, %r367;
LBB0_32:                                // %__nv_fmodf.exit1243
	add.f32 	%f231, %f377, %f377;
	mov.b32 	%r368, %f231;
	and.b32  	%r369, %r368, -2147483648;
	or.b32  	%r370, %r369, 1056964608;
	mov.b32 	%f232, %r370;
	add.f32 	%f233, %f231, %f232;
	cvt.rzi.f32.f32 	%f234, %f233;
	abs.f32 	%f235, %f231;
	setp.gt.f32 	%p57, %f235, 0f4B000000;
	selp.f32 	%f236, %f231, %f234, %p57;
	cvt.rzi.f32.f32 	%f237, %f231;
	setp.lt.f32 	%p58, %f235, 0f3F000000;
	selp.f32 	%f238, %f237, %f236, %p58;
	cvt.rzi.s32.f32 	%r371, %f238;
	fma.rn.f32 	%f239, %f238, 0fBF000000, %f377;
	mul.f32 	%f240, %f239, %f239;
	fma.rn.f32 	%f241, %f240, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f242, %f240, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f243, %f241, %f240, 0fC0A55DF6;
	fma.rn.f32 	%f244, %f242, %f240, 0f4081E0CF;
	fma.rn.f32 	%f245, %f240, %f239, 0f00000000;
	fma.rn.f32 	%f246, %f244, %f240, 0fC09DE9E6;
	fma.rn.f32 	%f247, %f243, %f245, 0f00000000;
	fma.rn.f32 	%f248, %f246, %f240, 0f3F800000;
	fma.rn.f32 	%f249, %f239, 0f40490FDB, %f247;
	and.b32  	%r372, %r371, 1;
	setp.eq.b32 	%p59, %r372, 1;
	selp.f32 	%f250, %f248, %f249, %p59;
	selp.f32 	%f251, %f249, %f248, %p59;
	and.b32  	%r373, %r371, 2;
	setp.eq.s32 	%p60, %r373, 0;
	neg.f32 	%f252, %f250;
	selp.f32 	%f253, %f250, %f252, %p60;
	add.s32 	%r374, %r371, 1;
	and.b32  	%r375, %r374, 2;
	setp.eq.s32 	%p61, %r375, 0;
	mov.f32 	%f254, 0f00000000;
	sub.f32 	%f255, %f254, %f251;
	selp.f32 	%f256, %f251, %f255, %p61;
	cvt.rzi.f32.f32 	%f257, %f377;
	setp.eq.f32 	%p62, %f257, %f377;
	mul.f32 	%f258, %f377, 0f00000000;
	selp.f32 	%f380, %f258, %f253, %p62;
	abs.f32 	%f259, %f377;
	setp.gt.f32 	%p63, %f259, 0f4B800000;
	add.f32 	%f260, %f380, 0f3F800000;
	selp.f32 	%f379, %f260, %f256, %p63;
LBB0_33:                                // %L246
	selp.f32 	%f149, %f145, %f148, %p19;
	setp.gt.f32 	%p21, %f153, 0f4B800000;
	add.f32 	%f154, %f152, 0f3F800000;
	setp.gt.u32 	%p65, %r2, 23;
	or.pred  	%p66, %p22, %p65;
	mov.f32 	%f368, 0f40400000;
	mov.f32 	%f385, %f391;
	mov.f32 	%f386, %f391;
	@%p66 bra 	LBB0_49;
// %bb.34:                              // %L288
	cvt.u16.u32 	%rs8, %r3542;
	and.b16  	%rs9, %rs8, 255;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 10;
	mul.lo.s16 	%rs12, %rs11, 6;
	sub.s16 	%rs13, %rs8, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f262, %rs14;
	div.approx.f32 	%f45, %f262, %f368;
	abs.f32 	%f383, %f45;
	setp.lt.f32 	%p67, %f383, 0f40000000;
	@%p67 bra 	LBB0_46;
// %bb.35:
	setp.gtu.f32 	%p68, %f383, 0f4B800000;
	@%p68 bra 	LBB0_42;
	bra.uni 	LBB0_36;
LBB0_42:
	mov.b32 	%r26, %f383;
	and.b32  	%r383, %r26, 8388607;
	or.b32  	%r3549, %r383, 1065353216;
	mov.b32 	%f382, %r3549;
	add.s32 	%r384, %r26, -1073741824;
	and.b32  	%r3550, %r384, -8388608;
	setp.eq.s32 	%p74, %r3550, 0;
	@%p74 bra 	LBB0_45;
// %bb.43:                              // %.lr.ph2955.preheader
	mov.f32 	%f273, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f272,%f273;
	// end inline asm
LBB0_44:                                // %.lr.ph2955
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r385, %r3550, 192937984;
	add.s32 	%r386, %r385, %r3549;
	mov.b32 	%f274, %r386;
	mul.f32 	%f275, %f272, %f274;
	sub.f32 	%f276, %f274, %f275;
	fma.rn.f32 	%f277, %f276, %f272, %f275;
	sub.f32 	%f278, %f274, %f277;
	fma.rz.f32 	%f279, %f278, %f272, %f277;
	cvt.rzi.f32.f32 	%f280, %f279;
	sub.f32 	%f382, %f274, %f280;
	sub.s32 	%r3550, %r3550, %r385;
	mov.b32 	%r3549, %f382;
	setp.ne.s32 	%p75, %r3550, 0;
	setp.ne.s32 	%p76, %r3549, 0;
	and.pred  	%p77, %p75, %p76;
	@%p77 bra 	LBB0_44;
LBB0_45:                                // %__internal_fmodf_slowpath_mod.exit.i.i1290
	setp.gt.u32 	%p78, %r26, 2139095039;
	selp.f32 	%f281, 0f7FFFFFFF, 0f4B800000, %p78;
	mul.f32 	%f282, %f382, 0f34000000;
	mul.f32 	%f383, %f281, %f282;
	bra.uni 	LBB0_46;
LBB0_36:                                // %__nv_fast_fdividef.exit.i.i.i1256
	mov.f32 	%f264, 0f40000000;
	div.approx.f32 	%f265, %f383, %f264;
	cvt.rzi.f32.f32 	%f47, %f265;
	fma.rn.f32 	%f48, %f47, 0fC0000000, %f383;
	mov.b32 	%r25, %f48;
	setp.lt.u32 	%p69, %r25, 1073741824;
	mov.f32 	%f381, %f47;
	@%p69 bra 	LBB0_41;
// %bb.37:
	setp.lt.u32 	%p70, %r25, -2147483647;
	@%p70 bra 	LBB0_39;
// %bb.38:
	add.f32 	%f270, %f47, 0fBF800000;
	setp.lt.f32 	%p73, %f48, 0fC0000000;
	selp.f32 	%f271, %f270, %f47, %p73;
	add.f32 	%f381, %f271, 0fBF800000;
	bra.uni 	LBB0_41;
LBB0_39:
	add.f32 	%f381, %f47, 0f3F800000;
	setp.ltu.f32 	%p71, %f48, 0f40800000;
	@%p71 bra 	LBB0_41;
// %bb.40:                              // %__nv_fmaf_rn.exit.i.i.i1261
	fma.rn.f32 	%f267, %f264, 0fC0400000, %f48;
	setp.ge.f32 	%p72, %f267, 0f00000000;
	selp.f32 	%f268, %f381, %f47, %p72;
	add.f32 	%f269, %f268, 0f3F800000;
	add.f32 	%f381, %f269, 0f3F800000;
LBB0_41:                                // %__internal_fmodf_fastpath_quot.exit.i.i1264
	fma.rn.f32 	%f383, %f381, 0fC0000000, %f383;
LBB0_46:                                // %__internal_fmodf_kernel.exit.i1293
	abs.f32 	%f283, %f383;
	setp.gtu.f32 	%p79, %f283, 0f7F800000;
	@%p79 bra 	LBB0_48;
// %bb.47:
	mov.b32 	%r387, %f45;
	and.b32  	%r388, %r387, -2147483648;
	mov.b32 	%r389, %f383;
	or.b32  	%r390, %r388, %r389;
	mov.b32 	%f383, %r390;
LBB0_48:                                // %__nv_fmodf.exit1296
	add.f32 	%f284, %f383, %f383;
	mov.b32 	%r391, %f284;
	and.b32  	%r392, %r391, -2147483648;
	or.b32  	%r393, %r392, 1056964608;
	mov.b32 	%f285, %r393;
	add.f32 	%f286, %f284, %f285;
	cvt.rzi.f32.f32 	%f287, %f286;
	abs.f32 	%f288, %f284;
	setp.gt.f32 	%p80, %f288, 0f4B000000;
	selp.f32 	%f289, %f284, %f287, %p80;
	cvt.rzi.f32.f32 	%f290, %f284;
	setp.lt.f32 	%p81, %f288, 0f3F000000;
	selp.f32 	%f291, %f290, %f289, %p81;
	cvt.rzi.s32.f32 	%r394, %f291;
	fma.rn.f32 	%f292, %f291, 0fBF000000, %f383;
	mul.f32 	%f293, %f292, %f292;
	fma.rn.f32 	%f294, %f293, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f295, %f293, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f296, %f294, %f293, 0fC0A55DF6;
	fma.rn.f32 	%f297, %f295, %f293, 0f4081E0CF;
	fma.rn.f32 	%f298, %f293, %f292, 0f00000000;
	fma.rn.f32 	%f299, %f297, %f293, 0fC09DE9E6;
	fma.rn.f32 	%f300, %f296, %f298, 0f00000000;
	fma.rn.f32 	%f301, %f299, %f293, 0f3F800000;
	fma.rn.f32 	%f302, %f292, 0f40490FDB, %f300;
	and.b32  	%r395, %r394, 1;
	setp.eq.b32 	%p82, %r395, 1;
	selp.f32 	%f303, %f301, %f302, %p82;
	selp.f32 	%f304, %f302, %f301, %p82;
	and.b32  	%r396, %r394, 2;
	setp.eq.s32 	%p83, %r396, 0;
	neg.f32 	%f305, %f303;
	selp.f32 	%f306, %f303, %f305, %p83;
	add.s32 	%r397, %r394, 1;
	and.b32  	%r398, %r397, 2;
	setp.eq.s32 	%p84, %r398, 0;
	mov.f32 	%f307, 0f00000000;
	sub.f32 	%f308, %f307, %f304;
	selp.f32 	%f309, %f304, %f308, %p84;
	cvt.rzi.f32.f32 	%f310, %f383;
	setp.eq.f32 	%p85, %f310, %f383;
	mul.f32 	%f311, %f383, 0f00000000;
	selp.f32 	%f386, %f311, %f306, %p85;
	abs.f32 	%f312, %f383;
	setp.gt.f32 	%p86, %f312, 0f4B800000;
	add.f32 	%f313, %f386, 0f3F800000;
	selp.f32 	%f385, %f313, %f309, %p86;
LBB0_49:                                // %L304
	selp.f32 	%f155, %f154, %f149, %p21;
	or.pred  	%p89, %p43, %p65;
	mov.f32 	%f392, %f391;
	@%p89 bra 	LBB0_65;
// %bb.50:                              // %L312
	mul.hi.u32 	%r400, %r3543, -1431655765;
	shr.u32 	%r401, %r400, 2;
	mul.lo.s32 	%r402, %r401, 6;
	sub.s32 	%r403, %r3543, %r402;
	cvt.rn.f32.s32 	%f315, %r403;
	div.approx.f32 	%f66, %f315, %f368;
	abs.f32 	%f389, %f66;
	setp.lt.f32 	%p90, %f389, 0f40000000;
	@%p90 bra 	LBB0_62;
// %bb.51:
	setp.gtu.f32 	%p91, %f389, 0f4B800000;
	@%p91 bra 	LBB0_58;
	bra.uni 	LBB0_52;
LBB0_58:
	mov.b32 	%r34, %f389;
	and.b32  	%r404, %r34, 8388607;
	or.b32  	%r3551, %r404, 1065353216;
	mov.b32 	%f388, %r3551;
	add.s32 	%r405, %r34, -1073741824;
	and.b32  	%r3552, %r405, -8388608;
	setp.eq.s32 	%p97, %r3552, 0;
	@%p97 bra 	LBB0_61;
// %bb.59:                              // %.lr.ph.preheader
	mov.f32 	%f326, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f325,%f326;
	// end inline asm
LBB0_60:                                // %.lr.ph
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r406, %r3552, 192937984;
	add.s32 	%r407, %r406, %r3551;
	mov.b32 	%f327, %r407;
	mul.f32 	%f328, %f325, %f327;
	sub.f32 	%f329, %f327, %f328;
	fma.rn.f32 	%f330, %f329, %f325, %f328;
	sub.f32 	%f331, %f327, %f330;
	fma.rz.f32 	%f332, %f331, %f325, %f330;
	cvt.rzi.f32.f32 	%f333, %f332;
	sub.f32 	%f388, %f327, %f333;
	sub.s32 	%r3552, %r3552, %r406;
	mov.b32 	%r3551, %f388;
	setp.ne.s32 	%p98, %r3552, 0;
	setp.ne.s32 	%p99, %r3551, 0;
	and.pred  	%p100, %p98, %p99;
	@%p100 bra 	LBB0_60;
LBB0_61:                                // %__internal_fmodf_slowpath_mod.exit.i.i1343
	setp.gt.u32 	%p101, %r34, 2139095039;
	selp.f32 	%f334, 0f7FFFFFFF, 0f4B800000, %p101;
	mul.f32 	%f335, %f388, 0f34000000;
	mul.f32 	%f389, %f334, %f335;
	bra.uni 	LBB0_62;
LBB0_52:                                // %__nv_fast_fdividef.exit.i.i.i1309
	mov.f32 	%f317, 0f40000000;
	div.approx.f32 	%f318, %f389, %f317;
	cvt.rzi.f32.f32 	%f68, %f318;
	fma.rn.f32 	%f69, %f68, 0fC0000000, %f389;
	mov.b32 	%r33, %f69;
	setp.lt.u32 	%p92, %r33, 1073741824;
	mov.f32 	%f387, %f68;
	@%p92 bra 	LBB0_57;
// %bb.53:
	setp.lt.u32 	%p93, %r33, -2147483647;
	@%p93 bra 	LBB0_55;
// %bb.54:
	add.f32 	%f323, %f68, 0fBF800000;
	setp.lt.f32 	%p96, %f69, 0fC0000000;
	selp.f32 	%f324, %f323, %f68, %p96;
	add.f32 	%f387, %f324, 0fBF800000;
	bra.uni 	LBB0_57;
LBB0_55:
	add.f32 	%f387, %f68, 0f3F800000;
	setp.ltu.f32 	%p94, %f69, 0f40800000;
	@%p94 bra 	LBB0_57;
// %bb.56:                              // %__nv_fmaf_rn.exit.i.i.i1314
	fma.rn.f32 	%f320, %f317, 0fC0400000, %f69;
	setp.ge.f32 	%p95, %f320, 0f00000000;
	selp.f32 	%f321, %f387, %f68, %p95;
	add.f32 	%f322, %f321, 0f3F800000;
	add.f32 	%f387, %f322, 0f3F800000;
LBB0_57:                                // %__internal_fmodf_fastpath_quot.exit.i.i1317
	fma.rn.f32 	%f389, %f387, 0fC0000000, %f389;
LBB0_62:                                // %__internal_fmodf_kernel.exit.i1346
	abs.f32 	%f336, %f389;
	setp.gtu.f32 	%p102, %f336, 0f7F800000;
	@%p102 bra 	LBB0_64;
// %bb.63:
	mov.b32 	%r408, %f66;
	and.b32  	%r409, %r408, -2147483648;
	mov.b32 	%r410, %f389;
	or.b32  	%r411, %r409, %r410;
	mov.b32 	%f389, %r411;
LBB0_64:                                // %__nv_fmodf.exit1349
	add.f32 	%f337, %f389, %f389;
	mov.b32 	%r412, %f337;
	and.b32  	%r413, %r412, -2147483648;
	or.b32  	%r414, %r413, 1056964608;
	mov.b32 	%f338, %r414;
	add.f32 	%f339, %f337, %f338;
	cvt.rzi.f32.f32 	%f340, %f339;
	abs.f32 	%f341, %f337;
	setp.gt.f32 	%p103, %f341, 0f4B000000;
	selp.f32 	%f342, %f337, %f340, %p103;
	cvt.rzi.f32.f32 	%f343, %f337;
	setp.lt.f32 	%p104, %f341, 0f3F000000;
	selp.f32 	%f344, %f343, %f342, %p104;
	cvt.rzi.s32.f32 	%r415, %f344;
	fma.rn.f32 	%f345, %f344, 0fBF000000, %f389;
	mul.f32 	%f346, %f345, %f345;
	fma.rn.f32 	%f347, %f346, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f348, %f346, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f349, %f347, %f346, 0fC0A55DF6;
	fma.rn.f32 	%f350, %f348, %f346, 0f4081E0CF;
	fma.rn.f32 	%f351, %f346, %f345, 0f00000000;
	fma.rn.f32 	%f352, %f350, %f346, 0fC09DE9E6;
	fma.rn.f32 	%f353, %f349, %f351, 0f00000000;
	fma.rn.f32 	%f354, %f352, %f346, 0f3F800000;
	fma.rn.f32 	%f355, %f345, 0f40490FDB, %f353;
	and.b32  	%r416, %r415, 1;
	setp.eq.b32 	%p105, %r416, 1;
	selp.f32 	%f356, %f354, %f355, %p105;
	selp.f32 	%f357, %f355, %f354, %p105;
	and.b32  	%r417, %r415, 2;
	setp.eq.s32 	%p106, %r417, 0;
	neg.f32 	%f358, %f356;
	selp.f32 	%f359, %f356, %f358, %p106;
	add.s32 	%r418, %r415, 1;
	and.b32  	%r419, %r418, 2;
	setp.eq.s32 	%p107, %r419, 0;
	mov.f32 	%f360, 0f00000000;
	sub.f32 	%f361, %f360, %f357;
	selp.f32 	%f362, %f357, %f361, %p107;
	cvt.rzi.f32.f32 	%f363, %f389;
	setp.eq.f32 	%p108, %f363, %f389;
	mul.f32 	%f364, %f389, 0f00000000;
	selp.f32 	%f392, %f364, %f359, %p108;
	abs.f32 	%f365, %f389;
	setp.gt.f32 	%p109, %f365, 0f4B800000;
	add.f32 	%f366, %f392, 0f3F800000;
	selp.f32 	%f391, %f366, %f362, %p109;
LBB0_65:                                // %L328
	mov.b32 	%r326, %f155;
	mov.b32 	%r329, %f152;
	mov.b32 	%r421, %f385;
	mov.b32 	%r422, %f391;
	mov.b32 	%r427, %f386;
	mov.b32 	%r428, %f392;
	mov.u32 	%r3553, 999999999;
	cvt.u16.u32 	%rs270, %r2;
	@%p65 bra 	LBB0_67;
// %bb.66:                              // %L371
	ld.param.u64 	%rd1, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1];
	and.b16  	%rs16, %rs270, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 12;
	mul.lo.s16 	%rs19, %rs18, 24;
	sub.s16 	%rs20, %rs270, %rs19;
	cvt.u32.u16 	%r433, %rs20;
	and.b32  	%r434, %r433, 255;
	mad.lo.s32 	%r435, %r434, 24, %r3;
	cvt.u16.u32 	%rs21, %r435;
	mul.hi.u16 	%rs22, %rs21, -7281;
	shr.u16 	%rs23, %rs22, 9;
	mul.lo.s16 	%rs24, %rs23, 576;
	sub.s16 	%rs25, %rs21, %rs24;
	cvt.u32.u16 	%r436, %rs25;
	mul.wide.u32 	%rd21, %r436, 4;
	add.s64 	%rd22, %rd1, %rd21;
	ld.global.u32 	%r437, [%rd22];
	cvt.s32.s16 	%r438, %r437;
	shr.s32 	%r439, %r437, 16;
	mul.lo.s32 	%r440, %r439, 801;
	mad.lo.s32 	%r3553, %r438, 33, %r440;
LBB0_67:                                // %L457
	xor.b32  	%r325, %r329, -2147483648;
	mov.b32 	%r377, %f373;
	mov.b32 	%r378, %f379;
	mov.b32 	%r380, %f374;
	mov.b32 	%r381, %f380;
	xor.b32  	%r424, %r427, -2147483648;
	xor.b32  	%r425, %r428, -2147483648;
	and.b32  	%r47, %r2, 24;
	setp.ne.s32 	%p111, %r47, 24;
	cvt.u16.u32 	%rs271, %r6;
	@%p111 bra 	LBB0_69;
// %bb.68:                              // %L457.L801_crit_edge
	mul.lo.s16 	%rs39, %rs271, 171;
	shr.u16 	%rs40, %rs39, 10;
	mul.lo.s16 	%rs41, %rs40, 6;
	sub.s16 	%rs42, %rs271, %rs41;
	cvt.u32.u16 	%r457, %rs42;
	and.b32  	%r3557, %r457, 255;
	cvt.u16.u32 	%rs43, %r3;
	and.b16  	%rs44, %rs43, 255;
	mul.lo.s16 	%rs45, %rs44, 171;
	shr.u16 	%rs46, %rs45, 10;
	cvt.u32.u16 	%r3556, %rs46;
	mul.lo.s16 	%rs47, %rs46, -6;
	add.s16 	%rs48, %rs47, %rs43;
	cvt.u32.u16 	%r459, %rs48;
	and.b32  	%r3555, %r459, 255;
	mul.wide.u16 	%r3554, %rs46, 6;
	mov.u32 	%r3558, 0;
	mov.u32 	%r3559, %r3558;
	bra.uni 	LBB0_70;
LBB0_69:                                // %L486
	ld.param.u64 	%rd2, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2];
	mul.lo.s32 	%r441, %r5, 144;
	cvt.u16.u32 	%rs26, %r3;
	and.b16  	%rs27, %rs26, 255;
	mul.lo.s16 	%rs28, %rs27, 171;
	shr.u16 	%rs29, %rs28, 10;
	mul.lo.s16 	%rs30, %rs29, -6;
	add.s16 	%rs31, %rs30, %rs26;
	cvt.u32.u16 	%r443, %rs31;
	and.b32  	%r3555, %r443, 255;
	mul.lo.s32 	%r444, %r1, 1152;
	mul.lo.s16 	%rs33, %rs271, 171;
	shr.u16 	%rs34, %rs33, 10;
	mul.lo.s16 	%rs35, %rs34, 6;
	sub.s16 	%rs36, %rs271, %rs35;
	cvt.u32.u16 	%r445, %rs36;
	and.b32  	%r3557, %r445, 255;
	and.b16  	%rs37, %rs36, 255;
	mul.wide.u16 	%r446, %rs37, 24;
	cvt.u32.u16 	%r3556, %rs29;
	mul.wide.u16 	%r3554, %rs29, 6;
	or.b32  	%r447, %r441, %r3555;
	add.s32 	%r448, %r447, %r444;
	add.s32 	%r449, %r448, %r446;
	add.s32 	%r450, %r449, %r3554;
	mul.wide.u32 	%rd23, %r450, 4;
	add.s64 	%rd24, %rd2, %rd23;
	ld.global.u32 	%r3558, [%rd24];
	add.s32 	%r451, %r441, 576;
	or.b32  	%r452, %r451, %r3555;
	add.s32 	%r453, %r452, %r444;
	add.s32 	%r454, %r453, %r446;
	add.s32 	%r455, %r454, %r3554;
	mul.wide.s32 	%rd25, %r455, 4;
	add.s64 	%rd26, %rd2, %rd25;
	ld.global.u32 	%r3559, [%rd26];
LBB0_70:                                // %L801
	ld.param.u64 	%rd3, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3];
	ld.param.u64 	%rd4, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4];
	// begin inline asm
	cvt.rn.f16x2.f32 %r324, %r326, %r325;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r327, %r329, %r326;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r376, %r378, %r377;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r379, %r381, %r380;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r420, %r422, %r421;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r423, %r425, %r424;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r426, %r428, %r427;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r429, %r422, %r421;
	// end inline asm
	mov.u32 	%r3544, 0;
	shl.b32 	%r461, %r2, 3;
	and.b32  	%r462, %r461, 128;
	shl.b32 	%r463, %r2, 2;
	and.b32  	%r464, %r463, 60;
	shl.b32 	%r465, %r1, 8;
	or.b32  	%r466, %r462, %r464;
	or.b32  	%r64, %r466, %r465;
	or.b32  	%r467, %r462, %r463;
	or.b32  	%r468, %r467, %r465;
	or.b32  	%r65, %r468, 64;
	shr.u32 	%r66, %r2, 4;
	and.b32  	%r469, %r249, 30;
	or.b32  	%r470, %r66, %r469;
	mul.lo.s32 	%r67, %r470, 257;
	or.b32  	%r471, %r249, %r66;
	or.b32  	%r472, %r471, 32;
	mul.lo.s32 	%r68, %r472, 257;
	shr.u32 	%r473, %r3, 3;
	mul.lo.s32 	%r69, %r473, 257;
	and.b16  	%rs50, %rs270, 255;
	mul.lo.s16 	%rs51, %rs50, 171;
	shr.u16 	%rs52, %rs51, 12;
	mul.lo.s16 	%rs53, %rs52, 24;
	sub.s16 	%rs54, %rs270, %rs53;
	cvt.u32.u16 	%r474, %rs54;
	and.b32  	%r70, %r474, 255;
	and.b32  	%r71, %r4, 224;
	add.s32 	%r475, %r3, 24;
	shr.u32 	%r476, %r475, 3;
	mul.lo.s32 	%r72, %r476, 257;
	add.s32 	%r477, %r3, 48;
	shr.u32 	%r478, %r477, 3;
	mul.lo.s32 	%r73, %r478, 257;
	add.s32 	%r479, %r3, 72;
	shr.u32 	%r480, %r479, 3;
	mul.lo.s32 	%r74, %r480, 257;
	or.b32  	%r481, %r473, 12;
	mul.lo.s32 	%r75, %r481, 257;
	add.s32 	%r482, %r3, 120;
	shr.u32 	%r483, %r482, 3;
	mul.lo.s32 	%r76, %r483, 257;
	add.s32 	%r484, %r3, 144;
	shr.u32 	%r485, %r484, 3;
	mul.lo.s32 	%r77, %r485, 257;
	add.s32 	%r486, %r3, 168;
	shr.u32 	%r487, %r486, 3;
	mul.lo.s32 	%r78, %r487, 257;
	or.b32  	%r488, %r473, 24;
	mul.lo.s32 	%r79, %r488, 257;
	add.s32 	%r489, %r3, 216;
	shr.u32 	%r490, %r489, 3;
	mul.lo.s32 	%r80, %r490, 257;
	add.s32 	%r491, %r3, 240;
	shr.u32 	%r492, %r491, 3;
	mul.lo.s32 	%r81, %r492, 257;
	add.s32 	%r493, %r3, 264;
	shr.u32 	%r494, %r493, 3;
	mul.lo.s32 	%r82, %r494, 257;
	or.b32  	%r495, %r473, 36;
	mul.lo.s32 	%r83, %r495, 257;
	add.s32 	%r496, %r3, 312;
	shr.u32 	%r497, %r496, 3;
	mul.lo.s32 	%r84, %r497, 257;
	add.s32 	%r498, %r3, 336;
	shr.u32 	%r499, %r498, 3;
	mul.lo.s32 	%r85, %r499, 257;
	add.s32 	%r500, %r3, 360;
	shr.u32 	%r501, %r500, 3;
	mul.lo.s32 	%r86, %r501, 257;
	or.b32  	%r502, %r473, 48;
	mul.lo.s32 	%r87, %r502, 257;
	add.s32 	%r503, %r3, 408;
	shr.u32 	%r504, %r503, 3;
	mul.lo.s32 	%r88, %r504, 257;
	add.s32 	%r505, %r3, 432;
	shr.u32 	%r506, %r505, 3;
	mul.lo.s32 	%r89, %r506, 257;
	add.s32 	%r507, %r3, 456;
	shr.u32 	%r508, %r507, 3;
	mul.lo.s32 	%r90, %r508, 257;
	or.b32  	%r509, %r473, 60;
	mul.lo.s32 	%r91, %r509, 257;
	add.s32 	%r510, %r3, 504;
	bfe.u32 	%r511, %r510, 3, 6;
	mul.lo.s32 	%r92, %r511, 257;
	mul.lo.s32 	%r93, %r5, 4806;
	mul.lo.s32 	%r94, %r3557, 801;
	mul.lo.s32 	%r95, %r3556, 198;
	mul.lo.s32 	%r96, %r3555, 33;
	and.b32  	%r512, %r6, 1;
	mul.lo.s32 	%r513, %r512, 1028;
	bfe.u32 	%r514, %r2, 3, 1;
	mul.lo.s32 	%r515, %r514, 514;
	and.b32  	%r516, %r2, 1;
	mul.lo.s32 	%r517, %r516, 4112;
	bfe.u32 	%r518, %r2, 1, 1;
	mul.lo.s32 	%r519, %r518, 2056;
	mul.lo.s32 	%r520, %r66, 257;
	add.s32 	%r521, %r515, %r513;
	add.s32 	%r522, %r521, %r517;
	add.s32 	%r523, %r522, %r519;
	add.s32 	%r524, %r523, %r3554;
	add.s32 	%r525, %r524, %r3555;
	add.s32 	%r97, %r525, %r520;
	mul.wide.u32 	%rd27, %r97, 4;
	mov.u64 	%rd28, shmem;
	add.s64 	%rd6, %rd28, %rd27;
	cvt.u64.u32 	%rd29, %r520;
	cvt.u64.u32 	%rd30, %r3555;
	cvt.u64.u32 	%rd31, %r3554;
	cvt.u64.u32 	%rd32, %r519;
	cvt.u64.u32 	%rd33, %r517;
	cvt.u64.u32 	%rd34, %r515;
	cvt.u64.u32 	%rd35, %r513;
	add.s64 	%rd36, %rd35, %rd34;
	add.s64 	%rd37, %rd36, %rd33;
	add.s64 	%rd38, %rd37, %rd32;
	add.s64 	%rd39, %rd38, %rd31;
	add.s64 	%rd40, %rd39, %rd30;
	add.s64 	%rd41, %rd40, %rd29;
	shl.b64 	%rd42, %rd41, 2;
	add.s64 	%rd7, %rd28, %rd42;
	bfe.u32 	%r526, %r3, 2, 1;
	mul.lo.s32 	%r527, %r526, 1028;
	bfe.u32 	%r528, %r3, 3, 1;
	and.b32  	%r529, %r3, 1;
	bfe.u32 	%r530, %r3, 1, 1;
	shr.u32 	%r531, %r3, 4;
	mad.lo.s32 	%r532, %r528, 514, %r527;
	mad.lo.s32 	%r533, %r529, 4112, %r532;
	mad.lo.s32 	%r534, %r530, 2056, %r533;
	mad.lo.s32 	%r535, %r5, 6, %r534;
	add.s32 	%r536, %r535, %r3557;
	mad.lo.s32 	%r98, %r531, 257, %r536;
	mul.wide.u32 	%rd43, %r98, 4;
	add.s64 	%rd8, %rd28, %rd43;
	add.s32 	%r537, %r98, 8256;
	mul.wide.u32 	%rd44, %r537, 4;
	add.s64 	%rd9, %rd28, %rd44;
	add.s32 	%r538, %r98, 32;
	mul.wide.u32 	%rd45, %r538, 4;
	add.s64 	%rd10, %rd28, %rd45;
	add.s32 	%r539, %r98, 8288;
	mul.wide.u32 	%rd46, %r539, 4;
	add.s64 	%rd11, %rd28, %rd46;
	cvt.u16.u32 	%rs55, %r3;
	shl.b16 	%rs56, %rs55, 1;
	and.b16  	%rs57, %rs56, 254;
	mul.lo.s16 	%rs58, %rs57, 171;
	shr.u16 	%rs59, %rs58, 13;
	mul.lo.s16 	%rs60, %rs59, 48;
	sub.s16 	%rs61, %rs56, %rs60;
	and.b16  	%rs62, %rs61, 254;
	mul.wide.u16 	%r99, %rs62, 24;
	mul.lo.s32 	%r100, %r1, 58752;
	or.b16  	%rs63, %rs56, 1;
	and.b16  	%rs64, %rs63, 255;
	mul.lo.s16 	%rs65, %rs64, 171;
	shr.u16 	%rs66, %rs65, 13;
	mul.lo.s16 	%rs67, %rs66, 48;
	sub.s16 	%rs68, %rs63, %rs67;
	and.b16  	%rs69, %rs68, 255;
	mul.wide.u16 	%r101, %rs69, 24;
	cvt.u64.u32 	%rd47, %r96;
	cvt.u64.u32 	%rd48, %r95;
	cvt.u64.u32 	%rd49, %r94;
	cvt.u64.u32 	%rd50, %r93;
	add.s64 	%rd51, %rd50, %rd49;
	add.s64 	%rd52, %rd51, %rd48;
	add.s64 	%rd53, %rd52, %rd47;
	shl.b64 	%rd54, %rd53, 2;
	add.s64 	%rd12, %rd28, %rd54;
	setp.gt.u32 	%p112, %r3, 7;
	setp.eq.s32 	%p113, %r66, 1;
	setp.lt.u32 	%p115, %r2, 24;
	mov.u32 	%r3560, %r3544;
	mov.u32 	%r3591, %r3544;
	mov.u32 	%r3592, %r3544;
	mov.u32 	%r3593, %r3544;
	mov.u32 	%r3594, %r3544;
	bra.uni 	LBB0_71;
LBB0_92:                                // %L35481
                                        //   in Loop: Header=BB0_71 Depth=1
	add.s32 	%r238, %r3560, 48;
	setp.ne.s32 	%p141, %r3560, 2016;
	mov.u32 	%r3560, %r238;
	@%p141 bra 	LBB0_71;
	bra.uni 	LBB0_93;
LBB0_71:                                // %L804
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_73 Depth 2
                                        //     Child Loop BB0_83 Depth 2
	mul.hi.u32 	%r733, %r3560, -1431655765;
	shr.u32 	%r734, %r733, 5;
	mul.lo.s32 	%r107, %r734, 48;
	add.s32 	%r735, %r3, %r107;
	cvt.u16.u32 	%rs70, %r735;
	mul.hi.s16 	%rs71, %rs70, 16257;
	shr.u16 	%rs72, %rs71, 15;
	shr.s16 	%rs73, %rs71, 9;
	add.s16 	%rs74, %rs73, %rs72;
	mul.lo.s16 	%rs75, %rs74, 2064;
	sub.s16 	%rs76, %rs70, %rs75;
	cvt.u32.u16 	%r736, %rs76;
	shl.b32 	%r737, %r736, 16;
	or.b32  	%r738, %r737, %r64;
	mul.wide.s32 	%rd55, %r738, 4;
	add.s64 	%rd56, %rd3, %rd55;
	ld.global.v4.u32 	{%r739, %r740, %r741, %r742}, [%rd56];
	or.b32  	%r743, %r65, %r737;
	mul.wide.s32 	%rd57, %r743, 4;
	add.s64 	%rd58, %rd3, %rd57;
	ld.global.v4.u32 	{%r744, %r745, %r746, %r747}, [%rd58];
	add.s16 	%rs77, %rs70, 24;
	mul.hi.s16 	%rs78, %rs77, 16257;
	shr.u16 	%rs79, %rs78, 15;
	shr.s16 	%rs80, %rs78, 9;
	add.s16 	%rs81, %rs80, %rs79;
	mul.lo.s16 	%rs82, %rs81, 2064;
	sub.s16 	%rs83, %rs77, %rs82;
	cvt.u32.u16 	%r748, %rs83;
	shl.b32 	%r749, %r748, 16;
	or.b32  	%r750, %r749, %r64;
	mul.wide.s32 	%rd59, %r750, 4;
	add.s64 	%rd60, %rd3, %rd59;
	ld.global.v4.u32 	{%r751, %r752, %r753, %r754}, [%rd60];
	or.b32  	%r755, %r65, %r749;
	mul.wide.s32 	%rd61, %r755, 4;
	add.s64 	%rd62, %rd3, %rd61;
	ld.global.v4.u32 	{%r756, %r757, %r758, %r759}, [%rd62];
	selp.b32 	%r760, %r739, %r741, %p113;
	shfl.sync.bfly.b32	%r761, %r760, 16, 31, -1;
	selp.b32 	%r542, %r761, %r739, %p113;
	selp.b32 	%r547, %r741, %r761, %p113;
	selp.b32 	%r762, %r740, %r742, %p113;
	shfl.sync.bfly.b32	%r763, %r762, 16, 31, -1;
	selp.b32 	%r550, %r763, %r740, %p113;
	selp.b32 	%r555, %r742, %r763, %p113;
	selp.b32 	%r764, %r744, %r746, %p113;
	shfl.sync.bfly.b32	%r765, %r764, 16, 31, -1;
	selp.b32 	%r558, %r765, %r744, %p113;
	selp.b32 	%r563, %r746, %r765, %p113;
	selp.b32 	%r766, %r745, %r747, %p113;
	shfl.sync.bfly.b32	%r767, %r766, 16, 31, -1;
	selp.b32 	%r566, %r767, %r745, %p113;
	selp.b32 	%r571, %r747, %r767, %p113;
	selp.b32 	%r768, %r751, %r753, %p113;
	shfl.sync.bfly.b32	%r769, %r768, 16, 31, -1;
	selp.b32 	%r574, %r769, %r751, %p113;
	selp.b32 	%r579, %r753, %r769, %p113;
	selp.b32 	%r770, %r752, %r754, %p113;
	shfl.sync.bfly.b32	%r771, %r770, 16, 31, -1;
	selp.b32 	%r582, %r771, %r752, %p113;
	selp.b32 	%r587, %r754, %r771, %p113;
	selp.b32 	%r772, %r756, %r758, %p113;
	shfl.sync.bfly.b32	%r773, %r772, 16, 31, -1;
	selp.b32 	%r590, %r773, %r756, %p113;
	selp.b32 	%r595, %r758, %r773, %p113;
	selp.b32 	%r774, %r757, %r759, %p113;
	shfl.sync.bfly.b32	%r775, %r774, 16, 31, -1;
	selp.b32 	%r598, %r775, %r757, %p113;
	selp.b32 	%r603, %r759, %r775, %p113;
	shl.b32 	%r543, %r547, 4;
	mov.u32 	%r541, 252645135;
	// begin inline asm
	lop3.b32 %r605, %r541, %r542, %r543, 202;
	// end inline asm
	shr.u32 	%r546, %r542, 4;
	// begin inline asm
	lop3.b32 %r621, %r541, %r546, %r547, 202;
	// end inline asm
	shl.b32 	%r551, %r555, 4;
	// begin inline asm
	lop3.b32 %r613, %r541, %r550, %r551, 202;
	// end inline asm
	shr.u32 	%r554, %r550, 4;
	// begin inline asm
	lop3.b32 %r629, %r541, %r554, %r555, 202;
	// end inline asm
	shl.b32 	%r559, %r563, 4;
	// begin inline asm
	lop3.b32 %r637, %r541, %r558, %r559, 202;
	// end inline asm
	shr.u32 	%r562, %r558, 4;
	// begin inline asm
	lop3.b32 %r653, %r541, %r562, %r563, 202;
	// end inline asm
	shl.b32 	%r567, %r571, 4;
	// begin inline asm
	lop3.b32 %r645, %r541, %r566, %r567, 202;
	// end inline asm
	shr.u32 	%r570, %r566, 4;
	// begin inline asm
	lop3.b32 %r661, %r541, %r570, %r571, 202;
	// end inline asm
	shl.b32 	%r575, %r579, 4;
	// begin inline asm
	lop3.b32 %r606, %r541, %r574, %r575, 202;
	// end inline asm
	shr.u32 	%r578, %r574, 4;
	// begin inline asm
	lop3.b32 %r622, %r541, %r578, %r579, 202;
	// end inline asm
	shl.b32 	%r583, %r587, 4;
	// begin inline asm
	lop3.b32 %r614, %r541, %r582, %r583, 202;
	// end inline asm
	shr.u32 	%r586, %r582, 4;
	// begin inline asm
	lop3.b32 %r630, %r541, %r586, %r587, 202;
	// end inline asm
	shl.b32 	%r591, %r595, 4;
	// begin inline asm
	lop3.b32 %r638, %r541, %r590, %r591, 202;
	// end inline asm
	shr.u32 	%r594, %r590, 4;
	// begin inline asm
	lop3.b32 %r654, %r541, %r594, %r595, 202;
	// end inline asm
	shl.b32 	%r599, %r603, 4;
	// begin inline asm
	lop3.b32 %r646, %r541, %r598, %r599, 202;
	// end inline asm
	shr.u32 	%r602, %r598, 4;
	// begin inline asm
	lop3.b32 %r662, %r541, %r602, %r603, 202;
	// end inline asm
	mov.u32 	%r607, 25152;
	// begin inline asm
	prmt.b32 %r669, %r605, %r606, %r607;
	// end inline asm
	mov.u32 	%r611, 29521;
	// begin inline asm
	prmt.b32 %r701, %r605, %r606, %r611;
	// end inline asm
	// begin inline asm
	prmt.b32 %r677, %r613, %r614, %r607;
	// end inline asm
	// begin inline asm
	prmt.b32 %r709, %r613, %r614, %r611;
	// end inline asm
	// begin inline asm
	prmt.b32 %r670, %r621, %r622, %r607;
	// end inline asm
	// begin inline asm
	prmt.b32 %r702, %r621, %r622, %r611;
	// end inline asm
	// begin inline asm
	prmt.b32 %r678, %r629, %r630, %r607;
	// end inline asm
	// begin inline asm
	prmt.b32 %r710, %r629, %r630, %r611;
	// end inline asm
	// begin inline asm
	prmt.b32 %r685, %r637, %r638, %r607;
	// end inline asm
	// begin inline asm
	prmt.b32 %r717, %r637, %r638, %r611;
	// end inline asm
	// begin inline asm
	prmt.b32 %r693, %r645, %r646, %r607;
	// end inline asm
	// begin inline asm
	prmt.b32 %r725, %r645, %r646, %r611;
	// end inline asm
	// begin inline asm
	prmt.b32 %r686, %r653, %r654, %r607;
	// end inline asm
	// begin inline asm
	prmt.b32 %r718, %r653, %r654, %r611;
	// end inline asm
	// begin inline asm
	prmt.b32 %r694, %r661, %r662, %r607;
	// end inline asm
	// begin inline asm
	prmt.b32 %r726, %r661, %r662, %r611;
	// end inline asm
	mov.u32 	%r727, 21520;
	// begin inline asm
	prmt.b32 %r668, %r669, %r670, %r727;
	// end inline asm
	mov.u32 	%r731, 30258;
	// begin inline asm
	prmt.b32 %r672, %r669, %r670, %r731;
	// end inline asm
	// begin inline asm
	prmt.b32 %r676, %r677, %r678, %r727;
	// end inline asm
	// begin inline asm
	prmt.b32 %r680, %r677, %r678, %r731;
	// end inline asm
	// begin inline asm
	prmt.b32 %r684, %r685, %r686, %r727;
	// end inline asm
	// begin inline asm
	prmt.b32 %r688, %r685, %r686, %r731;
	// end inline asm
	// begin inline asm
	prmt.b32 %r692, %r693, %r694, %r727;
	// end inline asm
	// begin inline asm
	prmt.b32 %r696, %r693, %r694, %r731;
	// end inline asm
	// begin inline asm
	prmt.b32 %r700, %r701, %r702, %r727;
	// end inline asm
	// begin inline asm
	prmt.b32 %r704, %r701, %r702, %r731;
	// end inline asm
	// begin inline asm
	prmt.b32 %r708, %r709, %r710, %r727;
	// end inline asm
	// begin inline asm
	prmt.b32 %r712, %r709, %r710, %r731;
	// end inline asm
	// begin inline asm
	prmt.b32 %r716, %r717, %r718, %r727;
	// end inline asm
	// begin inline asm
	prmt.b32 %r720, %r717, %r718, %r731;
	// end inline asm
	// begin inline asm
	prmt.b32 %r724, %r725, %r726, %r727;
	// end inline asm
	// begin inline asm
	prmt.b32 %r728, %r725, %r726, %r731;
	// end inline asm
	mul.hi.s16 	%rs84, %rs70, 10923;
	shr.u16 	%rs85, %rs84, 15;
	shr.s16 	%rs86, %rs84, 2;
	add.s16 	%rs87, %rs86, %rs85;
	mul.lo.s16 	%rs88, %rs87, 24;
	sub.s16 	%rs89, %rs70, %rs88;
	cvt.s32.s16 	%r776, %rs89;
	add.s32 	%r777, %r67, %r776;
	mul.wide.s32 	%rd63, %r777, 4;
	add.s64 	%rd65, %rd28, %rd63;
	st.shared.u32 	[%rd65], %r668;
	st.shared.u32 	[%rd65+512], %r676;
	st.shared.u32 	[%rd65+256], %r672;
	st.shared.u32 	[%rd65+768], %r680;
	add.s32 	%r778, %r68, %r776;
	mul.wide.s32 	%rd66, %r778, 4;
	add.s64 	%rd67, %rd28, %rd66;
	st.shared.u32 	[%rd67], %r684;
	st.shared.u32 	[%rd67+512], %r692;
	st.shared.u32 	[%rd67+256], %r688;
	st.shared.u32 	[%rd67+768], %r696;
	st.shared.u32 	[%rd65+128], %r700;
	st.shared.u32 	[%rd65+640], %r708;
	st.shared.u32 	[%rd65+384], %r704;
	st.shared.u32 	[%rd65+896], %r712;
	st.shared.u32 	[%rd67+128], %r716;
	st.shared.u32 	[%rd67+640], %r724;
	st.shared.u32 	[%rd67+384], %r720;
	st.shared.u32 	[%rd67+896], %r728;
	bar.sync 	0;
	add.s32 	%r779, %r107, %r70;
	cvt.u16.u32 	%rs90, %r779;
	mul.hi.s16 	%rs91, %rs90, 10923;
	shr.u16 	%rs92, %rs91, 15;
	shr.s16 	%rs93, %rs91, 2;
	add.s16 	%rs94, %rs93, %rs92;
	mul.lo.s16 	%rs95, %rs94, 24;
	sub.s16 	%rs96, %rs90, %rs95;
	cvt.s32.s16 	%r780, %rs96;
	add.s32 	%r781, %r69, %r780;
	add.s32 	%r782, %r781, %r71;
	mul.wide.s32 	%rd68, %r782, 4;
	add.s64 	%rd69, %rd28, %rd68;
	ld.shared.u32 	%r783, [%rd69];
	add.s32 	%r784, %r72, %r780;
	add.s32 	%r785, %r784, %r71;
	mul.wide.u32 	%rd70, %r785, 4;
	add.s64 	%rd71, %rd28, %rd70;
	ld.shared.u32 	%r786, [%rd71];
	add.s32 	%r787, %r73, %r780;
	add.s32 	%r788, %r787, %r71;
	mul.wide.u32 	%rd72, %r788, 4;
	add.s64 	%rd73, %rd28, %rd72;
	ld.shared.u32 	%r789, [%rd73];
	add.s32 	%r790, %r74, %r780;
	add.s32 	%r791, %r790, %r71;
	mul.wide.u32 	%rd74, %r791, 4;
	add.s64 	%rd75, %rd28, %rd74;
	ld.shared.u32 	%r792, [%rd75];
	add.s32 	%r793, %r75, %r780;
	add.s32 	%r794, %r793, %r71;
	mul.wide.s32 	%rd76, %r794, 4;
	add.s64 	%rd77, %rd28, %rd76;
	ld.shared.u32 	%r795, [%rd77];
	add.s32 	%r796, %r76, %r780;
	add.s32 	%r797, %r796, %r71;
	mul.wide.u32 	%rd78, %r797, 4;
	add.s64 	%rd79, %rd28, %rd78;
	ld.shared.u32 	%r798, [%rd79];
	add.s32 	%r799, %r77, %r780;
	add.s32 	%r800, %r799, %r71;
	mul.wide.u32 	%rd80, %r800, 4;
	add.s64 	%rd81, %rd28, %rd80;
	ld.shared.u32 	%r801, [%rd81];
	add.s32 	%r802, %r78, %r780;
	add.s32 	%r803, %r802, %r71;
	mul.wide.u32 	%rd82, %r803, 4;
	add.s64 	%rd83, %rd28, %rd82;
	ld.shared.u32 	%r804, [%rd83];
	add.s32 	%r805, %r79, %r780;
	add.s32 	%r806, %r805, %r71;
	mul.wide.s32 	%rd84, %r806, 4;
	add.s64 	%rd85, %rd28, %rd84;
	ld.shared.u32 	%r807, [%rd85];
	add.s32 	%r808, %r80, %r780;
	add.s32 	%r809, %r808, %r71;
	mul.wide.u32 	%rd86, %r809, 4;
	add.s64 	%rd87, %rd28, %rd86;
	ld.shared.u32 	%r810, [%rd87];
	add.s32 	%r811, %r81, %r780;
	add.s32 	%r812, %r811, %r71;
	mul.wide.u32 	%rd88, %r812, 4;
	add.s64 	%rd89, %rd28, %rd88;
	ld.shared.u32 	%r813, [%rd89];
	add.s32 	%r814, %r82, %r780;
	add.s32 	%r815, %r814, %r71;
	mul.wide.u32 	%rd90, %r815, 4;
	add.s64 	%rd91, %rd28, %rd90;
	ld.shared.u32 	%r816, [%rd91];
	add.s32 	%r817, %r83, %r780;
	add.s32 	%r818, %r817, %r71;
	mul.wide.s32 	%rd92, %r818, 4;
	add.s64 	%rd93, %rd28, %rd92;
	ld.shared.u32 	%r819, [%rd93];
	add.s32 	%r820, %r84, %r780;
	add.s32 	%r821, %r820, %r71;
	mul.wide.u32 	%rd94, %r821, 4;
	add.s64 	%rd95, %rd28, %rd94;
	ld.shared.u32 	%r822, [%rd95];
	add.s32 	%r823, %r85, %r780;
	add.s32 	%r824, %r823, %r71;
	mul.wide.u32 	%rd96, %r824, 4;
	add.s64 	%rd97, %rd28, %rd96;
	ld.shared.u32 	%r825, [%rd97];
	add.s32 	%r826, %r86, %r780;
	add.s32 	%r827, %r826, %r71;
	mul.wide.u32 	%rd98, %r827, 4;
	add.s64 	%rd99, %rd28, %rd98;
	ld.shared.u32 	%r828, [%rd99];
	add.s32 	%r829, %r87, %r780;
	add.s32 	%r830, %r829, %r71;
	mul.wide.s32 	%rd100, %r830, 4;
	add.s64 	%rd101, %rd28, %rd100;
	ld.shared.u32 	%r831, [%rd101];
	add.s32 	%r832, %r88, %r780;
	add.s32 	%r833, %r832, %r71;
	mul.wide.u32 	%rd102, %r833, 4;
	add.s64 	%rd103, %rd28, %rd102;
	ld.shared.u32 	%r834, [%rd103];
	add.s32 	%r835, %r89, %r780;
	add.s32 	%r836, %r835, %r71;
	mul.wide.u32 	%rd104, %r836, 4;
	add.s64 	%rd105, %rd28, %rd104;
	ld.shared.u32 	%r837, [%rd105];
	add.s32 	%r838, %r90, %r780;
	add.s32 	%r839, %r838, %r71;
	mul.wide.u32 	%rd106, %r839, 4;
	add.s64 	%rd107, %rd28, %rd106;
	ld.shared.u32 	%r840, [%rd107];
	add.s32 	%r841, %r91, %r780;
	add.s32 	%r842, %r841, %r71;
	mul.wide.s32 	%rd108, %r842, 4;
	add.s64 	%rd109, %rd28, %rd108;
	ld.shared.u32 	%r843, [%rd109];
	add.s32 	%r844, %r92, %r780;
	add.s32 	%r845, %r844, %r71;
	mul.wide.s32 	%rd110, %r845, 4;
	add.s64 	%rd111, %rd28, %rd110;
	ld.shared.u32 	%r846, [%rd111];
	bar.sync 	0;
	shfl.sync.idx.b32	%r847, %r3553, 0, 31, -1;
	shfl.sync.idx.b32	%r848, %r3553, 1, 31, -1;
	shfl.sync.idx.b32	%r849, %r3553, 2, 31, -1;
	shfl.sync.idx.b32	%r850, %r3553, 3, 31, -1;
	shfl.sync.idx.b32	%r851, %r3553, 4, 31, -1;
	shfl.sync.idx.b32	%r852, %r3553, 5, 31, -1;
	shfl.sync.idx.b32	%r853, %r3553, 6, 31, -1;
	shfl.sync.idx.b32	%r854, %r3553, 7, 31, -1;
	shfl.sync.idx.b32	%r855, %r3553, 8, 31, -1;
	shfl.sync.idx.b32	%r856, %r3553, 9, 31, -1;
	shfl.sync.idx.b32	%r857, %r3553, 10, 31, -1;
	shfl.sync.idx.b32	%r858, %r3553, 11, 31, -1;
	shfl.sync.idx.b32	%r859, %r3553, 12, 31, -1;
	shfl.sync.idx.b32	%r860, %r3553, 13, 31, -1;
	shfl.sync.idx.b32	%r861, %r3553, 14, 31, -1;
	shfl.sync.idx.b32	%r862, %r3553, 15, 31, -1;
	shfl.sync.idx.b32	%r863, %r3553, 16, 31, -1;
	shfl.sync.idx.b32	%r864, %r3553, 17, 31, -1;
	shfl.sync.idx.b32	%r865, %r3553, 18, 31, -1;
	shfl.sync.idx.b32	%r866, %r3553, 19, 31, -1;
	shfl.sync.idx.b32	%r867, %r3553, 20, 31, -1;
	shfl.sync.idx.b32	%r868, %r3553, 21, 31, -1;
	shfl.sync.idx.b32	%r869, %r3553, 22, 31, -1;
	shfl.sync.idx.b32	%r870, %r3553, 23, 31, -1;
	add.s32 	%r871, %r847, %r780;
	mul.wide.s32 	%rd112, %r871, 4;
	add.s64 	%rd113, %rd28, %rd112;
	st.shared.u32 	[%rd113], %r783;
	add.s32 	%r872, %r848, %r780;
	mul.wide.s32 	%rd114, %r872, 4;
	add.s64 	%rd115, %rd28, %rd114;
	st.shared.u32 	[%rd115], %r786;
	add.s32 	%r873, %r849, %r780;
	mul.wide.s32 	%rd116, %r873, 4;
	add.s64 	%rd117, %rd28, %rd116;
	st.shared.u32 	[%rd117], %r789;
	add.s32 	%r874, %r850, %r780;
	mul.wide.s32 	%rd118, %r874, 4;
	add.s64 	%rd119, %rd28, %rd118;
	st.shared.u32 	[%rd119], %r792;
	add.s32 	%r875, %r851, %r780;
	mul.wide.s32 	%rd120, %r875, 4;
	add.s64 	%rd121, %rd28, %rd120;
	st.shared.u32 	[%rd121], %r795;
	add.s32 	%r876, %r852, %r780;
	mul.wide.s32 	%rd122, %r876, 4;
	add.s64 	%rd123, %rd28, %rd122;
	st.shared.u32 	[%rd123], %r798;
	add.s32 	%r877, %r853, %r780;
	mul.wide.s32 	%rd124, %r877, 4;
	add.s64 	%rd125, %rd28, %rd124;
	st.shared.u32 	[%rd125], %r801;
	add.s32 	%r878, %r854, %r780;
	mul.wide.s32 	%rd126, %r878, 4;
	add.s64 	%rd127, %rd28, %rd126;
	st.shared.u32 	[%rd127], %r804;
	add.s32 	%r879, %r855, %r780;
	mul.wide.s32 	%rd128, %r879, 4;
	add.s64 	%rd129, %rd28, %rd128;
	st.shared.u32 	[%rd129], %r807;
	add.s32 	%r880, %r856, %r780;
	mul.wide.s32 	%rd130, %r880, 4;
	add.s64 	%rd131, %rd28, %rd130;
	st.shared.u32 	[%rd131], %r810;
	add.s32 	%r881, %r857, %r780;
	mul.wide.s32 	%rd132, %r881, 4;
	add.s64 	%rd133, %rd28, %rd132;
	st.shared.u32 	[%rd133], %r813;
	add.s32 	%r882, %r858, %r780;
	mul.wide.s32 	%rd134, %r882, 4;
	add.s64 	%rd135, %rd28, %rd134;
	st.shared.u32 	[%rd135], %r816;
	add.s32 	%r883, %r859, %r780;
	mul.wide.s32 	%rd136, %r883, 4;
	add.s64 	%rd137, %rd28, %rd136;
	st.shared.u32 	[%rd137], %r819;
	add.s32 	%r884, %r860, %r780;
	mul.wide.s32 	%rd138, %r884, 4;
	add.s64 	%rd139, %rd28, %rd138;
	st.shared.u32 	[%rd139], %r822;
	add.s32 	%r885, %r861, %r780;
	mul.wide.s32 	%rd140, %r885, 4;
	add.s64 	%rd141, %rd28, %rd140;
	st.shared.u32 	[%rd141], %r825;
	add.s32 	%r886, %r862, %r780;
	mul.wide.s32 	%rd142, %r886, 4;
	add.s64 	%rd143, %rd28, %rd142;
	st.shared.u32 	[%rd143], %r828;
	add.s32 	%r887, %r863, %r780;
	mul.wide.s32 	%rd144, %r887, 4;
	add.s64 	%rd145, %rd28, %rd144;
	st.shared.u32 	[%rd145], %r831;
	add.s32 	%r888, %r864, %r780;
	mul.wide.s32 	%rd146, %r888, 4;
	add.s64 	%rd147, %rd28, %rd146;
	st.shared.u32 	[%rd147], %r834;
	add.s32 	%r889, %r865, %r780;
	mul.wide.s32 	%rd148, %r889, 4;
	add.s64 	%rd149, %rd28, %rd148;
	st.shared.u32 	[%rd149], %r837;
	add.s32 	%r890, %r866, %r780;
	mul.wide.s32 	%rd150, %r890, 4;
	add.s64 	%rd151, %rd28, %rd150;
	st.shared.u32 	[%rd151], %r840;
	add.s32 	%r891, %r867, %r780;
	mul.wide.s32 	%rd152, %r891, 4;
	add.s64 	%rd153, %rd28, %rd152;
	st.shared.u32 	[%rd153], %r843;
	selp.b32 	%r892, 0, %r846, %p112;
	add.s32 	%r893, %r868, %r780;
	mul.wide.s32 	%rd154, %r893, 4;
	add.s64 	%rd155, %rd28, %rd154;
	st.shared.u32 	[%rd155], %r892;
	add.s32 	%r894, %r869, %r780;
	mul.wide.s32 	%rd156, %r894, 4;
	add.s64 	%rd157, %rd28, %rd156;
	st.shared.u32 	[%rd157], %r3544;
	add.s32 	%r895, %r870, %r780;
	mul.wide.s32 	%rd158, %r895, 4;
	add.s64 	%rd159, %rd28, %rd158;
	st.shared.u32 	[%rd159], %r3544;
	bar.sync 	0;
	mov.u32 	%r3565, %r3544;
	mov.u32 	%r3566, %r3544;
	mov.u32 	%r3567, %r3544;
	mov.u32 	%r3568, %r3544;
	mov.u32 	%r3569, %r3544;
	mov.u32 	%r3570, %r3544;
	mov.u32 	%r3571, %r3544;
	mov.u32 	%r3572, %r3544;
	mov.u32 	%r3573, %r3544;
	mov.u32 	%r3574, %r3544;
	mov.u32 	%r3575, %r3544;
	mov.u32 	%r3576, %r3544;
	mov.u32 	%r3577, %r3544;
	mov.u32 	%r3578, %r3544;
	mov.u32 	%r3579, %r3544;
	mov.u32 	%r3580, %r3544;
	mov.u32 	%r3581, %r3544;
	mov.u32 	%r3582, %r3544;
	mov.u32 	%r3583, %r3544;
	mov.u32 	%r3584, %r3544;
	mov.u32 	%r3585, %r3544;
	mov.u32 	%r3586, %r3544;
	mov.u32 	%r3587, %r3544;
	mov.u32 	%r3588, %r3544;
	@%p111 bra 	LBB0_109;
	bra.uni 	LBB0_72;
LBB0_109:                               // %oksrem3319
                                        //   in Loop: Header=BB0_71 Depth=1
	cvt.u16.u32 	%rs97, %r107;
	mul.hi.s16 	%rs98, %rs97, 10923;
	shr.u16 	%rs99, %rs98, 15;
	shr.s16 	%rs100, %rs98, 2;
	add.s16 	%rs101, %rs100, %rs99;
	mul.lo.s16 	%rs102, %rs101, 24;
	sub.s16 	%rs103, %rs97, %rs102;
	cvt.s32.s16 	%r896, %rs103;
	add.s32 	%r897, %r93, %r896;
	add.s32 	%r898, %r897, %r94;
	add.s32 	%r899, %r898, %r95;
	add.s32 	%r900, %r899, %r96;
	mul.wide.s32 	%rd160, %r900, 4;
	add.s64 	%rd162, %rd28, %rd160;
	ld.shared.u32 	%r3565, [%rd162];
	ld.shared.u32 	%r3566, [%rd12+4];
	ld.shared.u32 	%r3567, [%rd12+8];
	ld.shared.u32 	%r3568, [%rd12+12];
	ld.shared.u32 	%r3569, [%rd12+16];
	ld.shared.u32 	%r3570, [%rd12+20];
	ld.shared.u32 	%r3571, [%rd12+24];
	ld.shared.u32 	%r3572, [%rd12+28];
	ld.shared.u32 	%r3573, [%rd12+32];
	ld.shared.u32 	%r3574, [%rd12+36];
	ld.shared.u32 	%r3575, [%rd12+40];
	ld.shared.u32 	%r3576, [%rd12+44];
	ld.shared.u32 	%r3577, [%rd12+48];
	ld.shared.u32 	%r3578, [%rd12+52];
	ld.shared.u32 	%r3579, [%rd12+56];
	ld.shared.u32 	%r3580, [%rd12+60];
	add.s16 	%rs104, %rs97, 16;
	mul.hi.s16 	%rs105, %rs104, 10923;
	shr.u16 	%rs106, %rs105, 15;
	shr.s16 	%rs107, %rs105, 2;
	add.s16 	%rs108, %rs107, %rs106;
	mul.lo.s16 	%rs109, %rs108, 24;
	sub.s16 	%rs110, %rs104, %rs109;
	cvt.s32.s16 	%r901, %rs110;
	add.s32 	%r902, %r93, %r901;
	add.s32 	%r903, %r902, %r94;
	add.s32 	%r904, %r903, %r95;
	add.s32 	%r905, %r904, %r96;
	mul.wide.s32 	%rd163, %r905, 4;
	add.s64 	%rd164, %rd28, %rd163;
	ld.shared.u32 	%r3581, [%rd164];
	add.s16 	%rs111, %rs97, 17;
	mul.hi.s16 	%rs112, %rs111, 10923;
	shr.u16 	%rs113, %rs112, 15;
	shr.s16 	%rs114, %rs112, 2;
	add.s16 	%rs115, %rs114, %rs113;
	mul.lo.s16 	%rs116, %rs115, 24;
	sub.s16 	%rs117, %rs111, %rs116;
	cvt.s32.s16 	%r906, %rs117;
	add.s32 	%r907, %r93, %r906;
	add.s32 	%r908, %r907, %r94;
	add.s32 	%r909, %r908, %r95;
	add.s32 	%r910, %r909, %r96;
	mul.wide.s32 	%rd165, %r910, 4;
	add.s64 	%rd166, %rd28, %rd165;
	ld.shared.u32 	%r3582, [%rd166];
	add.s16 	%rs118, %rs97, 18;
	mul.hi.s16 	%rs119, %rs118, 10923;
	shr.u16 	%rs120, %rs119, 15;
	shr.s16 	%rs121, %rs119, 2;
	add.s16 	%rs122, %rs121, %rs120;
	mul.lo.s16 	%rs123, %rs122, 24;
	sub.s16 	%rs124, %rs118, %rs123;
	cvt.s32.s16 	%r911, %rs124;
	add.s32 	%r912, %r93, %r911;
	add.s32 	%r913, %r912, %r94;
	add.s32 	%r914, %r913, %r95;
	add.s32 	%r915, %r914, %r96;
	mul.wide.s32 	%rd167, %r915, 4;
	add.s64 	%rd168, %rd28, %rd167;
	ld.shared.u32 	%r3583, [%rd168];
	add.s16 	%rs125, %rs97, 19;
	mul.hi.s16 	%rs126, %rs125, 10923;
	shr.u16 	%rs127, %rs126, 15;
	shr.s16 	%rs128, %rs126, 2;
	add.s16 	%rs129, %rs128, %rs127;
	mul.lo.s16 	%rs130, %rs129, 24;
	sub.s16 	%rs131, %rs125, %rs130;
	cvt.s32.s16 	%r916, %rs131;
	add.s32 	%r917, %r93, %r916;
	add.s32 	%r918, %r917, %r94;
	add.s32 	%r919, %r918, %r95;
	add.s32 	%r920, %r919, %r96;
	mul.wide.s32 	%rd169, %r920, 4;
	add.s64 	%rd170, %rd28, %rd169;
	ld.shared.u32 	%r3584, [%rd170];
	add.s16 	%rs132, %rs97, 20;
	mul.hi.s16 	%rs133, %rs132, 10923;
	shr.u16 	%rs134, %rs133, 15;
	shr.s16 	%rs135, %rs133, 2;
	add.s16 	%rs136, %rs135, %rs134;
	mul.lo.s16 	%rs137, %rs136, 24;
	sub.s16 	%rs138, %rs132, %rs137;
	cvt.s32.s16 	%r921, %rs138;
	add.s32 	%r922, %r93, %r921;
	add.s32 	%r923, %r922, %r94;
	add.s32 	%r924, %r923, %r95;
	add.s32 	%r925, %r924, %r96;
	mul.wide.s32 	%rd171, %r925, 4;
	add.s64 	%rd172, %rd28, %rd171;
	ld.shared.u32 	%r3585, [%rd172];
	add.s16 	%rs139, %rs97, 21;
	mul.hi.s16 	%rs140, %rs139, 10923;
	shr.u16 	%rs141, %rs140, 15;
	shr.s16 	%rs142, %rs140, 2;
	add.s16 	%rs143, %rs142, %rs141;
	mul.lo.s16 	%rs144, %rs143, 24;
	sub.s16 	%rs145, %rs139, %rs144;
	cvt.s32.s16 	%r926, %rs145;
	add.s32 	%r927, %r93, %r926;
	add.s32 	%r928, %r927, %r94;
	add.s32 	%r929, %r928, %r95;
	add.s32 	%r930, %r929, %r96;
	mul.wide.s32 	%rd173, %r930, 4;
	add.s64 	%rd174, %rd28, %rd173;
	ld.shared.u32 	%r3586, [%rd174];
	add.s16 	%rs146, %rs97, 22;
	mul.hi.s16 	%rs147, %rs146, 10923;
	shr.u16 	%rs148, %rs147, 15;
	shr.s16 	%rs149, %rs147, 2;
	add.s16 	%rs150, %rs149, %rs148;
	mul.lo.s16 	%rs151, %rs150, 24;
	sub.s16 	%rs152, %rs146, %rs151;
	cvt.s32.s16 	%r931, %rs152;
	add.s32 	%r932, %r93, %r931;
	add.s32 	%r933, %r932, %r94;
	add.s32 	%r934, %r933, %r95;
	add.s32 	%r935, %r934, %r96;
	mul.wide.s32 	%rd175, %r935, 4;
	add.s64 	%rd176, %rd28, %rd175;
	ld.shared.u32 	%r3587, [%rd176];
	add.s16 	%rs153, %rs97, 23;
	mul.hi.s16 	%rs154, %rs153, 10923;
	shr.u16 	%rs155, %rs154, 15;
	shr.s16 	%rs156, %rs154, 2;
	add.s16 	%rs157, %rs156, %rs155;
	mul.lo.s16 	%rs158, %rs157, 24;
	sub.s16 	%rs159, %rs153, %rs158;
	cvt.s32.s16 	%r936, %rs159;
	add.s32 	%r937, %r93, %r936;
	add.s32 	%r938, %r937, %r94;
	add.s32 	%r939, %r938, %r95;
	add.s32 	%r940, %r939, %r96;
	mul.wide.s32 	%rd177, %r940, 4;
	add.s64 	%rd178, %rd28, %rd177;
	ld.shared.u32 	%r3588, [%rd178];
LBB0_72:                                // %L12806
                                        //   in Loop: Header=BB0_71 Depth=1
	bar.sync 	0;
	add.s32 	%r132, %r107, 1;
	add.s32 	%r133, %r107, 2;
	add.s32 	%r134, %r107, 3;
	mov.u32 	%r3589, 12;
	mov.u32 	%r3590, %r3544;
	bra.uni 	LBB0_73;
LBB0_80:                                // %L24132
                                        //   in Loop: Header=BB0_73 Depth=2
	add.s32 	%r3592, %r3592, 1;
	mov.u32 	%r3591, 0;
	mov.u32 	%r3593, %r3591;
	mov.u32 	%r3594, %r3591;
LBB0_81:                                // %L24133
                                        //   in Loop: Header=BB0_73 Depth=2
	bar.sync 	0;
	add.s32 	%r3590, %r3590, 1;
	add.s32 	%r3589, %r3589, -4;
	setp.ne.s32 	%p127, %r3589, -12;
	@%p127 bra 	LBB0_73;
	bra.uni 	LBB0_82;
LBB0_73:                                // %L12832
                                        //   Parent Loop BB0_71 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p116, %r3589, 12;
	selp.b32 	%r1480, %r3565, 0, %p116;
	setp.eq.s32 	%p117, %r3589, 8;
	selp.b32 	%r1481, %r3569, %r1480, %p117;
	setp.eq.s32 	%p118, %r3589, 4;
	selp.b32 	%r1482, %r3573, %r1481, %p118;
	setp.eq.s32 	%p119, %r3589, 0;
	selp.b32 	%r1483, %r3577, %r1482, %p119;
	setp.eq.s32 	%p120, %r3589, -4;
	selp.b32 	%r1484, %r3581, %r1483, %p120;
	setp.eq.s32 	%p121, %r3589, -8;
	selp.b32 	%r1485, %r3585, %r1484, %p121;
	selp.b32 	%r1486, %r3566, 0, %p116;
	selp.b32 	%r1487, %r3570, %r1486, %p117;
	selp.b32 	%r1488, %r3574, %r1487, %p118;
	selp.b32 	%r1489, %r3578, %r1488, %p119;
	selp.b32 	%r1490, %r3582, %r1489, %p120;
	selp.b32 	%r1491, %r3586, %r1490, %p121;
	selp.b32 	%r1492, %r3567, 0, %p116;
	selp.b32 	%r1493, %r3571, %r1492, %p117;
	selp.b32 	%r1494, %r3575, %r1493, %p118;
	selp.b32 	%r1495, %r3579, %r1494, %p119;
	selp.b32 	%r1496, %r3583, %r1495, %p120;
	selp.b32 	%r1497, %r3587, %r1496, %p121;
	selp.b32 	%r1498, %r3568, 0, %p116;
	selp.b32 	%r1499, %r3572, %r1498, %p117;
	selp.b32 	%r1500, %r3576, %r1499, %p118;
	selp.b32 	%r1501, %r3580, %r1500, %p119;
	selp.b32 	%r1502, %r3584, %r1501, %p120;
	selp.b32 	%r1503, %r3588, %r1502, %p121;
	mov.u16 	%rs197, 25600;
	// begin inline asm
	mov.b32 %r948, {%rs197, %rs197};
	// end inline asm
	mov.u16 	%rs199, 21504;
	// begin inline asm
	mov.b32 %r959, {%rs199, %rs199};
	// end inline asm
	xor.b32  	%r947, %r1485, -2004318072;
	mov.u32 	%r1084, 983055;
	// begin inline asm
	lop3.b32 %r945, %r1084, %r947, %r948, 202;
	// end inline asm
	mov.u16 	%rs203, 18432;
	// begin inline asm
	mov.b32 %r949, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r950, %r948, %r949;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r953, %r945, %r950;
	// end inline asm
	mov.u32 	%r1095, 15728880;
	// begin inline asm
	lop3.b32 %r956, %r1095, %r947, %r959, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r960, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r961, %r959, %r960;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r964, %r956, %r961;
	// end inline asm
	// begin inline asm
	mov.b32 %r994, {%rs197, %rs197};
	// end inline asm
	// begin inline asm
	mov.b32 %r1005, {%rs199, %rs199};
	// end inline asm
	xor.b32  	%r993, %r1491, -2004318072;
	// begin inline asm
	lop3.b32 %r991, %r1084, %r993, %r994, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r995, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r996, %r994, %r995;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r999, %r991, %r996;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1002, %r1095, %r993, %r1005, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1006, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1007, %r1005, %r1006;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1010, %r1002, %r1007;
	// end inline asm
	// begin inline asm
	mov.b32 %r1040, {%rs197, %rs197};
	// end inline asm
	// begin inline asm
	mov.b32 %r1051, {%rs199, %rs199};
	// end inline asm
	xor.b32  	%r1039, %r1497, -2004318072;
	// begin inline asm
	lop3.b32 %r1037, %r1084, %r1039, %r1040, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1041, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1042, %r1040, %r1041;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1045, %r1037, %r1042;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1048, %r1095, %r1039, %r1051, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1052, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1053, %r1051, %r1052;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1056, %r1048, %r1053;
	// end inline asm
	// begin inline asm
	mov.b32 %r1086, {%rs197, %rs197};
	// end inline asm
	// begin inline asm
	mov.b32 %r1097, {%rs199, %rs199};
	// end inline asm
	xor.b32  	%r1085, %r1503, -2004318072;
	// begin inline asm
	lop3.b32 %r1083, %r1084, %r1085, %r1086, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1087, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1088, %r1086, %r1087;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1091, %r1083, %r1088;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1094, %r1095, %r1085, %r1097, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1098, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1099, %r1097, %r1098;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1102, %r1094, %r1099;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3558;
    mov.b32 {%r2re, %r2im}, %r953;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1127, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3559;
    mov.b32 {%r2re, %r2im}, %r964;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1130, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3558;
    mov.b32 {%r2re, %r2im}, %r999;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1133, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3559;
    mov.b32 {%r2re, %r2im}, %r1010;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1136, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3558;
    mov.b32 {%r2re, %r2im}, %r1045;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1139, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3559;
    mov.b32 {%r2re, %r2im}, %r1056;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1142, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3558;
    mov.b32 {%r2re, %r2im}, %r1091;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1145, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3559;
    mov.b32 {%r2re, %r2im}, %r1102;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1148, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1214, %r1211}, {%r324, %r327}, {%r1127}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1223, %r1220}, {%r324, %r327}, {%r1130}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1232, %r1229}, {%r324, %r327}, {%r1133}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1241, %r1238}, {%r324, %r327}, {%r1136}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1250, %r1247}, {%r324, %r327}, {%r1139}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1259, %r1256}, {%r324, %r327}, {%r1142}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1268, %r1265}, {%r324, %r327}, {%r1145}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1277, %r1274}, {%r324, %r327}, {%r1148}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1207, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1209, %r1207, %r1211;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1212, %r376, %r1214, %r1209;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1216, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1218, %r1216, %r1220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1221, %r376, %r1223, %r1218;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1225, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1227, %r1225, %r1229;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1230, %r376, %r1232, %r1227;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1234, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1236, %r1234, %r1238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1239, %r376, %r1241, %r1236;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1243, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1245, %r1243, %r1247;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1248, %r376, %r1250, %r1245;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1252, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1254, %r1252, %r1256;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1257, %r376, %r1259, %r1254;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1261, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1263, %r1261, %r1265;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1266, %r376, %r1268, %r1263;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1270, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1272, %r1270, %r1274;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1275, %r376, %r1277, %r1272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1279, %r379, %r1214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1282, %r376, %r1211, %r1279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1286, %r379, %r1223;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1289, %r376, %r1220, %r1286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1293, %r379, %r1232;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1296, %r376, %r1229, %r1293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1300, %r379, %r1241;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1303, %r376, %r1238, %r1300;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1307, %r379, %r1250;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1310, %r376, %r1247, %r1307;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1314, %r379, %r1259;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1317, %r376, %r1256, %r1314;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1321, %r379, %r1268;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1324, %r376, %r1265, %r1321;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1328, %r379, %r1277;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1331, %r376, %r1274, %r1328;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1416, %r1417}, {%r420, %r426, %r423, %r429}, {%r1212, %r1282}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1424, %r1425}, {%r420, %r426, %r423, %r429}, {%r1221, %r1289}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1432, %r1433}, {%r420, %r426, %r423, %r429}, {%r1230, %r1296}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1440, %r1441}, {%r420, %r426, %r423, %r429}, {%r1239, %r1303}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1448, %r1449}, {%r420, %r426, %r423, %r429}, {%r1248, %r1310}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1456, %r1457}, {%r420, %r426, %r423, %r429}, {%r1257, %r1317}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1464, %r1465}, {%r420, %r426, %r423, %r429}, {%r1266, %r1324}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1472, %r1473}, {%r420, %r426, %r423, %r429}, {%r1275, %r1331}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	prmt.b32 %r1415, %r1416, %r1417, %r727;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1419, %r1416, %r1417, %r731;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1423, %r1424, %r1425, %r727;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1427, %r1424, %r1425, %r731;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1431, %r1432, %r1433, %r727;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1435, %r1432, %r1433, %r731;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1439, %r1440, %r1441, %r727;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1443, %r1440, %r1441, %r731;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1447, %r1448, %r1449, %r727;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1451, %r1448, %r1449, %r731;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1455, %r1456, %r1457, %r727;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1459, %r1456, %r1457, %r731;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1463, %r1464, %r1465, %r727;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1467, %r1464, %r1465, %r731;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1471, %r1472, %r1473, %r727;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1475, %r1472, %r1473, %r731;
	// end inline asm
	st.shared.u32 	[%rd6], %r1415;
	st.shared.u32 	[%rd7+33024], %r1419;
	st.shared.u32 	[%rd7+128], %r1423;
	st.shared.u32 	[%rd7+33152], %r1427;
	cvt.u16.u32 	%rs208, %r3590;
	and.b16  	%rs209, %rs208, 255;
	mul.lo.s16 	%rs210, %rs209, 171;
	shr.u16 	%rs211, %rs210, 10;
	mul.lo.s16 	%rs212, %rs211, 6;
	sub.s16 	%rs213, %rs208, %rs212;
	shl.b16 	%rs214, %rs213, 2;
	cvt.u32.u16 	%r1504, %rs214;
	and.b32  	%r1505, %r1504, 252;
	add.s32 	%r1506, %r132, %r1505;
	shr.s32 	%r1507, %r1506, 31;
	shr.u32 	%r1508, %r1507, 30;
	add.s32 	%r1509, %r1506, %r1508;
	and.b32  	%r1510, %r1509, 67108860;
	sub.s32 	%r1511, %r1506, %r1510;
	shl.b32 	%r141, %r1511, 6;
	add.s32 	%r1512, %r97, %r141;
	mul.wide.s32 	%rd179, %r1512, 4;
	add.s64 	%rd181, %rd28, %rd179;
	st.shared.u32 	[%rd181], %r1431;
	add.s32 	%r142, %r141, 8256;
	add.s32 	%r1513, %r97, %r142;
	mul.wide.u32 	%rd182, %r1513, 4;
	add.s64 	%rd183, %rd28, %rd182;
	st.shared.u32 	[%rd183], %r1435;
	or.b32  	%r143, %r141, 32;
	add.s32 	%r1514, %r97, %r143;
	mul.wide.s32 	%rd184, %r1514, 4;
	add.s64 	%rd185, %rd28, %rd184;
	st.shared.u32 	[%rd185], %r1439;
	add.s32 	%r144, %r141, 8288;
	add.s32 	%r1515, %r97, %r144;
	mul.wide.u32 	%rd186, %r1515, 4;
	add.s64 	%rd187, %rd28, %rd186;
	st.shared.u32 	[%rd187], %r1443;
	add.s32 	%r1516, %r133, %r1505;
	shr.s32 	%r1517, %r1516, 31;
	shr.u32 	%r1518, %r1517, 30;
	add.s32 	%r1519, %r1516, %r1518;
	and.b32  	%r1520, %r1519, 67108860;
	sub.s32 	%r1521, %r1516, %r1520;
	shl.b32 	%r145, %r1521, 6;
	add.s32 	%r1522, %r97, %r145;
	mul.wide.s32 	%rd188, %r1522, 4;
	add.s64 	%rd189, %rd28, %rd188;
	st.shared.u32 	[%rd189], %r1447;
	add.s32 	%r146, %r145, 8256;
	add.s32 	%r1523, %r97, %r146;
	mul.wide.u32 	%rd190, %r1523, 4;
	add.s64 	%rd191, %rd28, %rd190;
	st.shared.u32 	[%rd191], %r1451;
	or.b32  	%r147, %r145, 32;
	add.s32 	%r1524, %r97, %r147;
	mul.wide.s32 	%rd192, %r1524, 4;
	add.s64 	%rd193, %rd28, %rd192;
	st.shared.u32 	[%rd193], %r1455;
	add.s32 	%r148, %r145, 8288;
	add.s32 	%r1525, %r97, %r148;
	mul.wide.u32 	%rd194, %r1525, 4;
	add.s64 	%rd195, %rd28, %rd194;
	st.shared.u32 	[%rd195], %r1459;
	add.s32 	%r1526, %r134, %r1505;
	shr.s32 	%r1527, %r1526, 31;
	shr.u32 	%r1528, %r1527, 30;
	add.s32 	%r1529, %r1526, %r1528;
	and.b32  	%r1530, %r1529, 67108860;
	sub.s32 	%r1531, %r1526, %r1530;
	shl.b32 	%r149, %r1531, 6;
	add.s32 	%r1532, %r97, %r149;
	mul.wide.s32 	%rd196, %r1532, 4;
	add.s64 	%rd197, %rd28, %rd196;
	st.shared.u32 	[%rd197], %r1463;
	add.s32 	%r150, %r149, 8256;
	add.s32 	%r1533, %r97, %r150;
	mul.wide.u32 	%rd198, %r1533, 4;
	add.s64 	%rd199, %rd28, %rd198;
	st.shared.u32 	[%rd199], %r1467;
	or.b32  	%r151, %r149, 32;
	add.s32 	%r1534, %r97, %r151;
	mul.wide.s32 	%rd200, %r1534, 4;
	add.s64 	%rd201, %rd28, %rd200;
	st.shared.u32 	[%rd201], %r1471;
	add.s32 	%r152, %r149, 8288;
	add.s32 	%r1535, %r97, %r152;
	mul.wide.u32 	%rd202, %r1535, 4;
	add.s64 	%rd203, %rd28, %rd202;
	st.shared.u32 	[%rd203], %r1475;
	bar.sync 	0;
	mov.u32 	%r3595, %r3544;
	mov.u32 	%r3596, %r3544;
	mov.u32 	%r3597, %r3544;
	mov.u32 	%r3598, %r3544;
	@%p115 bra 	LBB0_110;
	bra.uni 	LBB0_74;
LBB0_110:                               // %oksrem7069
                                        //   in Loop: Header=BB0_73 Depth=2
	ld.shared.u32 	%r3595, [%rd8];
	ld.shared.u32 	%r3596, [%rd9];
	ld.shared.u32 	%r3597, [%rd10];
	ld.shared.u32 	%r3598, [%rd11];
LBB0_74:                                // %L19474
                                        //   in Loop: Header=BB0_73 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1571, %r1568}, {%r324, %r327}, {%r3595}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1580, %r1577}, {%r324, %r327}, {%r3596}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1589, %r1586}, {%r324, %r327}, {%r3597}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1598, %r1595}, {%r324, %r327}, {%r3598}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1564, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1566, %r1564, %r1568;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1569, %r376, %r1571, %r1566;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1573, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1575, %r1573, %r1577;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1578, %r376, %r1580, %r1575;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1582, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1584, %r1582, %r1586;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1587, %r376, %r1589, %r1584;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1591, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1593, %r1591, %r1595;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1596, %r376, %r1598, %r1593;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1600, %r379, %r1571;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1603, %r376, %r1568, %r1600;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1607, %r379, %r1580;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1610, %r376, %r1577, %r1607;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1614, %r379, %r1589;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1617, %r376, %r1586, %r1614;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1621, %r379, %r1598;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1624, %r376, %r1595, %r1621;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1669, %r1672}, {%r420, %r426, %r423, %r429}, {%r1569, %r1603}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1688, %r1691}, {%r420, %r426, %r423, %r429}, {%r1578, %r1610}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1676, %r1680}, {%r420, %r426, %r423, %r429}, {%r1587, %r1617}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1695, %r1699}, {%r420, %r426, %r423, %r429}, {%r1596, %r1624}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1668, %r1669, %r1669;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1671, %r1672, %r1672, %r1668;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1675, %r1676, %r1676, %r1671;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1679, %r1680, %r1680, %r1675;
	// end inline asm
	mov.u32 	%r1703, 442899046;
	// begin inline asm
	fma.rn.f16x2 %r1683, %r1703, %r1679, %r3594;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1687, %r1688, %r1688;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1690, %r1691, %r1691, %r1687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1694, %r1695, %r1695, %r1690;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1698, %r1699, %r1699, %r1694;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1702, %r1703, %r1698, %r3593;
	// end inline asm
	mov.u32 	%r3599, %r3544;
	mov.u32 	%r3600, %r3544;
	mov.u32 	%r3601, %r3544;
	mov.u32 	%r3602, %r3544;
	@%p115 bra 	LBB0_111;
	bra.uni 	LBB0_75;
LBB0_111:                               // %oksrem7604
                                        //   in Loop: Header=BB0_73 Depth=2
	add.s32 	%r1707, %r98, %r141;
	mul.wide.s32 	%rd204, %r1707, 4;
	add.s64 	%rd206, %rd28, %rd204;
	ld.shared.u32 	%r3599, [%rd206];
	add.s32 	%r1708, %r98, %r142;
	mul.wide.u32 	%rd207, %r1708, 4;
	add.s64 	%rd208, %rd28, %rd207;
	ld.shared.u32 	%r3600, [%rd208];
	add.s32 	%r1709, %r98, %r143;
	mul.wide.s32 	%rd209, %r1709, 4;
	add.s64 	%rd210, %rd28, %rd209;
	ld.shared.u32 	%r3601, [%rd210];
	add.s32 	%r1710, %r98, %r144;
	mul.wide.u32 	%rd211, %r1710, 4;
	add.s64 	%rd212, %rd28, %rd211;
	ld.shared.u32 	%r3602, [%rd212];
LBB0_75:                                // %L20856
                                        //   in Loop: Header=BB0_73 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1746, %r1743}, {%r324, %r327}, {%r3599}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1755, %r1752}, {%r324, %r327}, {%r3600}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1764, %r1761}, {%r324, %r327}, {%r3601}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1773, %r1770}, {%r324, %r327}, {%r3602}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1739, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1741, %r1739, %r1743;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1744, %r376, %r1746, %r1741;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1748, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1750, %r1748, %r1752;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1753, %r376, %r1755, %r1750;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1757, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1759, %r1757, %r1761;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1762, %r376, %r1764, %r1759;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1766, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1768, %r1766, %r1770;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1771, %r376, %r1773, %r1768;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1775, %r379, %r1746;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1778, %r376, %r1743, %r1775;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1782, %r379, %r1755;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1785, %r376, %r1752, %r1782;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1789, %r379, %r1764;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1792, %r376, %r1761, %r1789;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1796, %r379, %r1773;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1799, %r376, %r1770, %r1796;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1844, %r1847}, {%r420, %r426, %r423, %r429}, {%r1744, %r1778}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1863, %r1866}, {%r420, %r426, %r423, %r429}, {%r1753, %r1785}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1851, %r1855}, {%r420, %r426, %r423, %r429}, {%r1762, %r1792}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1870, %r1874}, {%r420, %r426, %r423, %r429}, {%r1771, %r1799}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1843, %r1844, %r1844;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1846, %r1847, %r1847, %r1843;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1850, %r1851, %r1851, %r1846;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1854, %r1855, %r1855, %r1850;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1858, %r1703, %r1854, %r1683;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1862, %r1863, %r1863;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1865, %r1866, %r1866, %r1862;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1869, %r1870, %r1870, %r1865;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1873, %r1874, %r1874, %r1869;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1877, %r1703, %r1873, %r1702;
	// end inline asm
	mov.u32 	%r3603, %r3544;
	mov.u32 	%r3604, %r3544;
	mov.u32 	%r3605, %r3544;
	mov.u32 	%r3606, %r3544;
	@%p115 bra 	LBB0_112;
	bra.uni 	LBB0_76;
LBB0_112:                               // %oksrem8139
                                        //   in Loop: Header=BB0_73 Depth=2
	add.s32 	%r1882, %r98, %r145;
	mul.wide.s32 	%rd213, %r1882, 4;
	add.s64 	%rd215, %rd28, %rd213;
	ld.shared.u32 	%r3603, [%rd215];
	add.s32 	%r1883, %r98, %r146;
	mul.wide.u32 	%rd216, %r1883, 4;
	add.s64 	%rd217, %rd28, %rd216;
	ld.shared.u32 	%r3604, [%rd217];
	add.s32 	%r1884, %r98, %r147;
	mul.wide.s32 	%rd218, %r1884, 4;
	add.s64 	%rd219, %rd28, %rd218;
	ld.shared.u32 	%r3605, [%rd219];
	add.s32 	%r1885, %r98, %r148;
	mul.wide.u32 	%rd220, %r1885, 4;
	add.s64 	%rd221, %rd28, %rd220;
	ld.shared.u32 	%r3606, [%rd221];
LBB0_76:                                // %L22238
                                        //   in Loop: Header=BB0_73 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1921, %r1918}, {%r324, %r327}, {%r3603}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1930, %r1927}, {%r324, %r327}, {%r3604}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1939, %r1936}, {%r324, %r327}, {%r3605}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1948, %r1945}, {%r324, %r327}, {%r3606}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1914, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1916, %r1914, %r1918;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1919, %r376, %r1921, %r1916;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1923, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1925, %r1923, %r1927;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1928, %r376, %r1930, %r1925;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1932, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1934, %r1932, %r1936;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1937, %r376, %r1939, %r1934;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1941, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1943, %r1941, %r1945;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1946, %r376, %r1948, %r1943;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1950, %r379, %r1921;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1953, %r376, %r1918, %r1950;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1957, %r379, %r1930;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1960, %r376, %r1927, %r1957;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1964, %r379, %r1939;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1967, %r376, %r1936, %r1964;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1971, %r379, %r1948;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1974, %r376, %r1945, %r1971;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2019, %r2022}, {%r420, %r426, %r423, %r429}, {%r1919, %r1953}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2038, %r2041}, {%r420, %r426, %r423, %r429}, {%r1928, %r1960}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2026, %r2030}, {%r420, %r426, %r423, %r429}, {%r1937, %r1967}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2045, %r2049}, {%r420, %r426, %r423, %r429}, {%r1946, %r1974}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2018, %r2019, %r2019;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2021, %r2022, %r2022, %r2018;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2025, %r2026, %r2026, %r2021;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2029, %r2030, %r2030, %r2025;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2033, %r1703, %r2029, %r1858;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2037, %r2038, %r2038;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2040, %r2041, %r2041, %r2037;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2044, %r2045, %r2045, %r2040;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2048, %r2049, %r2049, %r2044;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2052, %r1703, %r2048, %r1877;
	// end inline asm
	mov.u32 	%r3607, %r3544;
	mov.u32 	%r3608, %r3544;
	mov.u32 	%r3609, %r3544;
	mov.u32 	%r3610, %r3544;
	@%p115 bra 	LBB0_113;
	bra.uni 	LBB0_77;
LBB0_113:                               // %oksrem8674
                                        //   in Loop: Header=BB0_73 Depth=2
	add.s32 	%r2057, %r98, %r149;
	mul.wide.s32 	%rd222, %r2057, 4;
	add.s64 	%rd224, %rd28, %rd222;
	ld.shared.u32 	%r3607, [%rd224];
	add.s32 	%r2058, %r98, %r150;
	mul.wide.u32 	%rd225, %r2058, 4;
	add.s64 	%rd226, %rd28, %rd225;
	ld.shared.u32 	%r3608, [%rd226];
	add.s32 	%r2059, %r98, %r151;
	mul.wide.s32 	%rd227, %r2059, 4;
	add.s64 	%rd228, %rd28, %rd227;
	ld.shared.u32 	%r3609, [%rd228];
	add.s32 	%r2060, %r98, %r152;
	mul.wide.u32 	%rd229, %r2060, 4;
	add.s64 	%rd230, %rd28, %rd229;
	ld.shared.u32 	%r3610, [%rd230];
LBB0_77:                                // %L23620
                                        //   in Loop: Header=BB0_73 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2096, %r2093}, {%r324, %r327}, {%r3607}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2105, %r2102}, {%r324, %r327}, {%r3608}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2114, %r2111}, {%r324, %r327}, {%r3609}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2123, %r2120}, {%r324, %r327}, {%r3610}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2089, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2091, %r2089, %r2093;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2094, %r376, %r2096, %r2091;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2098, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2100, %r2098, %r2102;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2103, %r376, %r2105, %r2100;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2107, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2109, %r2107, %r2111;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2112, %r376, %r2114, %r2109;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2116, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2118, %r2116, %r2120;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2121, %r376, %r2123, %r2118;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2125, %r379, %r2096;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2128, %r376, %r2093, %r2125;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2132, %r379, %r2105;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2135, %r376, %r2102, %r2132;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2139, %r379, %r2114;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2142, %r376, %r2111, %r2139;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2146, %r379, %r2123;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2149, %r376, %r2120, %r2146;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2194, %r2197}, {%r420, %r426, %r423, %r429}, {%r2094, %r2128}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2213, %r2216}, {%r420, %r426, %r423, %r429}, {%r2103, %r2135}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2201, %r2205}, {%r420, %r426, %r423, %r429}, {%r2112, %r2142}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2220, %r2224}, {%r420, %r426, %r423, %r429}, {%r2121, %r2149}, {%r3544, %r3544};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2193, %r2194, %r2194;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2196, %r2197, %r2197, %r2193;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2200, %r2201, %r2201, %r2196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2204, %r2205, %r2205, %r2200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3594, %r1703, %r2204, %r2033;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2212, %r2213, %r2213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2215, %r2216, %r2216, %r2212;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2219, %r2220, %r2220, %r2215;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2223, %r2224, %r2224, %r2219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3593, %r1703, %r2223, %r2052;
	// end inline asm
	add.s32 	%r3591, %r3591, 4;
	setp.ne.s32 	%p125, %r3591, 40;
	@%p125 bra 	LBB0_81;
// %bb.78:                              // %L23808
                                        //   in Loop: Header=BB0_73 Depth=2
	@%p65 bra 	LBB0_80;
// %bb.79:                              // %L23874
                                        //   in Loop: Header=BB0_73 Depth=2
	mul.lo.s32 	%r2231, %r3592, 1152;
	or.b32  	%r2232, %r2231, %r70;
	add.s32 	%r2233, %r2232, %r99;
	add.s32 	%r2234, %r2233, %r100;
	mul.wide.u32 	%rd231, %r2234, 4;
	add.s64 	%rd232, %rd4, %rd231;
	st.global.u32 	[%rd232], %r3594;
	add.s32 	%r2235, %r101, %r2231;
	add.s32 	%r2236, %r2235, %r70;
	add.s32 	%r2237, %r2236, %r100;
	mul.wide.u32 	%rd233, %r2237, 4;
	add.s64 	%rd234, %rd4, %rd233;
	st.global.u32 	[%rd234], %r3593;
	bra.uni 	LBB0_80;
LBB0_82:                                // %L24160.preheader
                                        //   in Loop: Header=BB0_71 Depth=1
	add.s32 	%r185, %r107, 25;
	add.s32 	%r186, %r107, 26;
	add.s32 	%r187, %r107, 27;
	mov.u32 	%r2240, 0;
	mov.u32 	%r3615, 12;
	mov.u32 	%r3616, %r2240;
	bra.uni 	LBB0_83;
LBB0_90:                                // %L35460
                                        //   in Loop: Header=BB0_83 Depth=2
	add.s32 	%r3592, %r3592, 1;
	mov.u32 	%r3591, 0;
	mov.u32 	%r3593, %r3591;
	mov.u32 	%r3594, %r3591;
LBB0_91:                                // %L35461
                                        //   in Loop: Header=BB0_83 Depth=2
	bar.sync 	0;
	add.s32 	%r3616, %r3616, 1;
	add.s32 	%r3615, %r3615, -4;
	setp.ne.s32 	%p140, %r3615, -12;
	@%p140 bra 	LBB0_83;
	bra.uni 	LBB0_92;
LBB0_83:                                // %L24160
                                        //   Parent Loop BB0_71 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p129, %r3615, 12;
	selp.b32 	%r2778, %r3565, 0, %p129;
	setp.eq.s32 	%p130, %r3615, 8;
	selp.b32 	%r2779, %r3569, %r2778, %p130;
	setp.eq.s32 	%p131, %r3615, 4;
	selp.b32 	%r2780, %r3573, %r2779, %p131;
	setp.eq.s32 	%p132, %r3615, 0;
	selp.b32 	%r2781, %r3577, %r2780, %p132;
	setp.eq.s32 	%p133, %r3615, -4;
	selp.b32 	%r2782, %r3581, %r2781, %p133;
	setp.eq.s32 	%p134, %r3615, -8;
	selp.b32 	%r2783, %r3585, %r2782, %p134;
	selp.b32 	%r2784, %r3566, 0, %p129;
	selp.b32 	%r2785, %r3570, %r2784, %p130;
	selp.b32 	%r2786, %r3574, %r2785, %p131;
	selp.b32 	%r2787, %r3578, %r2786, %p132;
	selp.b32 	%r2788, %r3582, %r2787, %p133;
	selp.b32 	%r2789, %r3586, %r2788, %p134;
	selp.b32 	%r2790, %r3567, 0, %p129;
	selp.b32 	%r2791, %r3571, %r2790, %p130;
	selp.b32 	%r2792, %r3575, %r2791, %p131;
	selp.b32 	%r2793, %r3579, %r2792, %p132;
	selp.b32 	%r2794, %r3583, %r2793, %p133;
	selp.b32 	%r2795, %r3587, %r2794, %p134;
	selp.b32 	%r2796, %r3568, 0, %p129;
	selp.b32 	%r2797, %r3572, %r2796, %p130;
	selp.b32 	%r2798, %r3576, %r2797, %p131;
	selp.b32 	%r2799, %r3580, %r2798, %p132;
	selp.b32 	%r2800, %r3584, %r2799, %p133;
	selp.b32 	%r2801, %r3588, %r2800, %p134;
	// begin inline asm
	mov.b32 %r2268, {%rs197, %rs197};
	// end inline asm
	// begin inline asm
	mov.b32 %r2279, {%rs199, %rs199};
	// end inline asm
	shr.u32 	%r2802, %r2783, 8;
	xor.b32  	%r2278, %r2802, 8947848;
	// begin inline asm
	lop3.b32 %r2265, %r1084, %r2278, %r2268, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2269, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2270, %r2268, %r2269;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2273, %r2265, %r2270;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2276, %r1095, %r2278, %r2279, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2280, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2281, %r2279, %r2280;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2284, %r2276, %r2281;
	// end inline asm
	// begin inline asm
	mov.b32 %r2314, {%rs197, %rs197};
	// end inline asm
	// begin inline asm
	mov.b32 %r2325, {%rs199, %rs199};
	// end inline asm
	shr.u32 	%r2803, %r2789, 8;
	xor.b32  	%r2324, %r2803, 8947848;
	// begin inline asm
	lop3.b32 %r2311, %r1084, %r2324, %r2314, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2315, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2316, %r2314, %r2315;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2319, %r2311, %r2316;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2322, %r1095, %r2324, %r2325, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2326, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2327, %r2325, %r2326;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2330, %r2322, %r2327;
	// end inline asm
	// begin inline asm
	mov.b32 %r2360, {%rs197, %rs197};
	// end inline asm
	// begin inline asm
	mov.b32 %r2371, {%rs199, %rs199};
	// end inline asm
	shr.u32 	%r2804, %r2795, 8;
	xor.b32  	%r2370, %r2804, 8947848;
	// begin inline asm
	lop3.b32 %r2357, %r1084, %r2370, %r2360, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2361, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2362, %r2360, %r2361;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2365, %r2357, %r2362;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2368, %r1095, %r2370, %r2371, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2372, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2373, %r2371, %r2372;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2376, %r2368, %r2373;
	// end inline asm
	// begin inline asm
	mov.b32 %r2406, {%rs197, %rs197};
	// end inline asm
	// begin inline asm
	mov.b32 %r2417, {%rs199, %rs199};
	// end inline asm
	shr.u32 	%r2805, %r2801, 8;
	xor.b32  	%r2416, %r2805, 8947848;
	// begin inline asm
	lop3.b32 %r2403, %r1084, %r2416, %r2406, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2407, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2408, %r2406, %r2407;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2411, %r2403, %r2408;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2414, %r1095, %r2416, %r2417, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2418, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2419, %r2417, %r2418;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2422, %r2414, %r2419;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3558;
    mov.b32 {%r2re, %r2im}, %r2273;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2425, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3559;
    mov.b32 {%r2re, %r2im}, %r2284;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2428, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3558;
    mov.b32 {%r2re, %r2im}, %r2319;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2431, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3559;
    mov.b32 {%r2re, %r2im}, %r2330;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2434, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3558;
    mov.b32 {%r2re, %r2im}, %r2365;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2437, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3559;
    mov.b32 {%r2re, %r2im}, %r2376;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2440, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3558;
    mov.b32 {%r2re, %r2im}, %r2411;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2443, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3559;
    mov.b32 {%r2re, %r2im}, %r2422;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2446, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2512, %r2509}, {%r324, %r327}, {%r2425}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2521, %r2518}, {%r324, %r327}, {%r2428}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2530, %r2527}, {%r324, %r327}, {%r2431}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2539, %r2536}, {%r324, %r327}, {%r2434}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2548, %r2545}, {%r324, %r327}, {%r2437}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2557, %r2554}, {%r324, %r327}, {%r2440}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2566, %r2563}, {%r324, %r327}, {%r2443}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2575, %r2572}, {%r324, %r327}, {%r2446}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2505, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2507, %r2505, %r2509;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2510, %r376, %r2512, %r2507;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2514, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2516, %r2514, %r2518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2519, %r376, %r2521, %r2516;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2523, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2525, %r2523, %r2527;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2528, %r376, %r2530, %r2525;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2532, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2534, %r2532, %r2536;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2537, %r376, %r2539, %r2534;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2541, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2543, %r2541, %r2545;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2546, %r376, %r2548, %r2543;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2550, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2552, %r2550, %r2554;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2555, %r376, %r2557, %r2552;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2559, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2561, %r2559, %r2563;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2564, %r376, %r2566, %r2561;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2568, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2570, %r2568, %r2572;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2573, %r376, %r2575, %r2570;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2577, %r379, %r2512;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2580, %r376, %r2509, %r2577;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2584, %r379, %r2521;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2587, %r376, %r2518, %r2584;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2591, %r379, %r2530;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2594, %r376, %r2527, %r2591;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2598, %r379, %r2539;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2601, %r376, %r2536, %r2598;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2605, %r379, %r2548;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2608, %r376, %r2545, %r2605;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2612, %r379, %r2557;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2615, %r376, %r2554, %r2612;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2619, %r379, %r2566;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2622, %r376, %r2563, %r2619;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2626, %r379, %r2575;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2629, %r376, %r2572, %r2626;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2714, %r2715}, {%r420, %r426, %r423, %r429}, {%r2510, %r2580}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2722, %r2723}, {%r420, %r426, %r423, %r429}, {%r2519, %r2587}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2730, %r2731}, {%r420, %r426, %r423, %r429}, {%r2528, %r2594}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2738, %r2739}, {%r420, %r426, %r423, %r429}, {%r2537, %r2601}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2746, %r2747}, {%r420, %r426, %r423, %r429}, {%r2546, %r2608}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2754, %r2755}, {%r420, %r426, %r423, %r429}, {%r2555, %r2615}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2762, %r2763}, {%r420, %r426, %r423, %r429}, {%r2564, %r2622}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2770, %r2771}, {%r420, %r426, %r423, %r429}, {%r2573, %r2629}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	prmt.b32 %r2713, %r2714, %r2715, %r727;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2717, %r2714, %r2715, %r731;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2721, %r2722, %r2723, %r727;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2725, %r2722, %r2723, %r731;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2729, %r2730, %r2731, %r727;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2733, %r2730, %r2731, %r731;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2737, %r2738, %r2739, %r727;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2741, %r2738, %r2739, %r731;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2745, %r2746, %r2747, %r727;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2749, %r2746, %r2747, %r731;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2753, %r2754, %r2755, %r727;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2757, %r2754, %r2755, %r731;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2761, %r2762, %r2763, %r727;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2765, %r2762, %r2763, %r731;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2769, %r2770, %r2771, %r727;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2773, %r2770, %r2771, %r731;
	// end inline asm
	st.shared.u32 	[%rd6], %r2713;
	st.shared.u32 	[%rd7+33024], %r2717;
	st.shared.u32 	[%rd7+128], %r2721;
	st.shared.u32 	[%rd7+33152], %r2725;
	cvt.u16.u32 	%rs263, %r3616;
	and.b16  	%rs264, %rs263, 255;
	mul.lo.s16 	%rs265, %rs264, 171;
	shr.u16 	%rs266, %rs265, 10;
	mul.lo.s16 	%rs267, %rs266, 6;
	sub.s16 	%rs268, %rs263, %rs267;
	shl.b16 	%rs269, %rs268, 2;
	cvt.u32.u16 	%r2806, %rs269;
	and.b32  	%r2807, %r2806, 252;
	add.s32 	%r2808, %r185, %r2807;
	shr.s32 	%r2809, %r2808, 31;
	shr.u32 	%r2810, %r2809, 30;
	add.s32 	%r2811, %r2808, %r2810;
	and.b32  	%r2812, %r2811, 67108860;
	sub.s32 	%r2813, %r2808, %r2812;
	shl.b32 	%r194, %r2813, 6;
	add.s32 	%r2814, %r97, %r194;
	mul.wide.s32 	%rd235, %r2814, 4;
	add.s64 	%rd237, %rd28, %rd235;
	st.shared.u32 	[%rd237], %r2729;
	add.s32 	%r195, %r194, 8256;
	add.s32 	%r2815, %r97, %r195;
	mul.wide.u32 	%rd238, %r2815, 4;
	add.s64 	%rd239, %rd28, %rd238;
	st.shared.u32 	[%rd239], %r2733;
	or.b32  	%r196, %r194, 32;
	add.s32 	%r2816, %r97, %r196;
	mul.wide.s32 	%rd240, %r2816, 4;
	add.s64 	%rd241, %rd28, %rd240;
	st.shared.u32 	[%rd241], %r2737;
	add.s32 	%r197, %r194, 8288;
	add.s32 	%r2817, %r97, %r197;
	mul.wide.u32 	%rd242, %r2817, 4;
	add.s64 	%rd243, %rd28, %rd242;
	st.shared.u32 	[%rd243], %r2741;
	add.s32 	%r2818, %r186, %r2807;
	shr.s32 	%r2819, %r2818, 31;
	shr.u32 	%r2820, %r2819, 30;
	add.s32 	%r2821, %r2818, %r2820;
	and.b32  	%r2822, %r2821, 67108860;
	sub.s32 	%r2823, %r2818, %r2822;
	shl.b32 	%r198, %r2823, 6;
	add.s32 	%r2824, %r97, %r198;
	mul.wide.s32 	%rd244, %r2824, 4;
	add.s64 	%rd245, %rd28, %rd244;
	st.shared.u32 	[%rd245], %r2745;
	add.s32 	%r199, %r198, 8256;
	add.s32 	%r2825, %r97, %r199;
	mul.wide.u32 	%rd246, %r2825, 4;
	add.s64 	%rd247, %rd28, %rd246;
	st.shared.u32 	[%rd247], %r2749;
	or.b32  	%r200, %r198, 32;
	add.s32 	%r2826, %r97, %r200;
	mul.wide.s32 	%rd248, %r2826, 4;
	add.s64 	%rd249, %rd28, %rd248;
	st.shared.u32 	[%rd249], %r2753;
	add.s32 	%r201, %r198, 8288;
	add.s32 	%r2827, %r97, %r201;
	mul.wide.u32 	%rd250, %r2827, 4;
	add.s64 	%rd251, %rd28, %rd250;
	st.shared.u32 	[%rd251], %r2757;
	add.s32 	%r2828, %r187, %r2807;
	shr.s32 	%r2829, %r2828, 31;
	shr.u32 	%r2830, %r2829, 30;
	add.s32 	%r2831, %r2828, %r2830;
	and.b32  	%r2832, %r2831, 67108860;
	sub.s32 	%r2833, %r2828, %r2832;
	shl.b32 	%r202, %r2833, 6;
	add.s32 	%r2834, %r97, %r202;
	mul.wide.s32 	%rd252, %r2834, 4;
	add.s64 	%rd253, %rd28, %rd252;
	st.shared.u32 	[%rd253], %r2761;
	add.s32 	%r203, %r202, 8256;
	add.s32 	%r2835, %r97, %r203;
	mul.wide.u32 	%rd254, %r2835, 4;
	add.s64 	%rd255, %rd28, %rd254;
	st.shared.u32 	[%rd255], %r2765;
	or.b32  	%r204, %r202, 32;
	add.s32 	%r2836, %r97, %r204;
	mul.wide.s32 	%rd256, %r2836, 4;
	add.s64 	%rd257, %rd28, %rd256;
	st.shared.u32 	[%rd257], %r2769;
	add.s32 	%r205, %r202, 8288;
	add.s32 	%r2837, %r97, %r205;
	mul.wide.u32 	%rd258, %r2837, 4;
	add.s64 	%rd259, %rd28, %rd258;
	st.shared.u32 	[%rd259], %r2773;
	bar.sync 	0;
	mov.u32 	%r3621, %r2240;
	mov.u32 	%r3622, %r2240;
	mov.u32 	%r3623, %r2240;
	mov.u32 	%r3624, %r2240;
	@%p115 bra 	LBB0_114;
	bra.uni 	LBB0_84;
LBB0_114:                               // %oksrem11467
                                        //   in Loop: Header=BB0_83 Depth=2
	ld.shared.u32 	%r3624, [%rd8];
	ld.shared.u32 	%r3623, [%rd9];
	ld.shared.u32 	%r3622, [%rd10];
	ld.shared.u32 	%r3621, [%rd11];
LBB0_84:                                // %L30802
                                        //   in Loop: Header=BB0_83 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2873, %r2870}, {%r324, %r327}, {%r3624}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2882, %r2879}, {%r324, %r327}, {%r3623}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2891, %r2888}, {%r324, %r327}, {%r3622}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2900, %r2897}, {%r324, %r327}, {%r3621}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2866, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2868, %r2866, %r2870;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2871, %r376, %r2873, %r2868;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2875, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2877, %r2875, %r2879;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2880, %r376, %r2882, %r2877;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2884, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2886, %r2884, %r2888;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2889, %r376, %r2891, %r2886;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2893, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2895, %r2893, %r2897;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2898, %r376, %r2900, %r2895;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2902, %r379, %r2873;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2905, %r376, %r2870, %r2902;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2909, %r379, %r2882;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2912, %r376, %r2879, %r2909;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2916, %r379, %r2891;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2919, %r376, %r2888, %r2916;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2923, %r379, %r2900;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2926, %r376, %r2897, %r2923;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2971, %r2974}, {%r420, %r426, %r423, %r429}, {%r2871, %r2905}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2990, %r2993}, {%r420, %r426, %r423, %r429}, {%r2880, %r2912}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2978, %r2982}, {%r420, %r426, %r423, %r429}, {%r2889, %r2919}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2997, %r3001}, {%r420, %r426, %r423, %r429}, {%r2898, %r2926}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2970, %r2971, %r2971;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2973, %r2974, %r2974, %r2970;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2977, %r2978, %r2978, %r2973;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2981, %r2982, %r2982, %r2977;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2985, %r1703, %r2981, %r3594;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2989, %r2990, %r2990;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2992, %r2993, %r2993, %r2989;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2996, %r2997, %r2997, %r2992;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3000, %r3001, %r3001, %r2996;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3004, %r1703, %r3000, %r3593;
	// end inline asm
	mov.u32 	%r3625, %r2240;
	mov.u32 	%r3626, %r2240;
	mov.u32 	%r3627, %r2240;
	mov.u32 	%r3628, %r2240;
	@%p115 bra 	LBB0_115;
	bra.uni 	LBB0_85;
LBB0_115:                               // %oksrem12002
                                        //   in Loop: Header=BB0_83 Depth=2
	add.s32 	%r3009, %r98, %r194;
	mul.wide.s32 	%rd260, %r3009, 4;
	add.s64 	%rd262, %rd28, %rd260;
	ld.shared.u32 	%r3628, [%rd262];
	add.s32 	%r3010, %r98, %r195;
	mul.wide.u32 	%rd263, %r3010, 4;
	add.s64 	%rd264, %rd28, %rd263;
	ld.shared.u32 	%r3627, [%rd264];
	add.s32 	%r3011, %r98, %r196;
	mul.wide.s32 	%rd265, %r3011, 4;
	add.s64 	%rd266, %rd28, %rd265;
	ld.shared.u32 	%r3626, [%rd266];
	add.s32 	%r3012, %r98, %r197;
	mul.wide.u32 	%rd267, %r3012, 4;
	add.s64 	%rd268, %rd28, %rd267;
	ld.shared.u32 	%r3625, [%rd268];
LBB0_85:                                // %L32184
                                        //   in Loop: Header=BB0_83 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3048, %r3045}, {%r324, %r327}, {%r3628}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3057, %r3054}, {%r324, %r327}, {%r3627}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3066, %r3063}, {%r324, %r327}, {%r3626}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3075, %r3072}, {%r324, %r327}, {%r3625}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3041, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3043, %r3041, %r3045;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3046, %r376, %r3048, %r3043;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3050, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3052, %r3050, %r3054;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3055, %r376, %r3057, %r3052;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3059, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3061, %r3059, %r3063;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3064, %r376, %r3066, %r3061;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3068, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3070, %r3068, %r3072;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3073, %r376, %r3075, %r3070;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3077, %r379, %r3048;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3080, %r376, %r3045, %r3077;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3084, %r379, %r3057;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3087, %r376, %r3054, %r3084;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3091, %r379, %r3066;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3094, %r376, %r3063, %r3091;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3098, %r379, %r3075;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3101, %r376, %r3072, %r3098;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3146, %r3149}, {%r420, %r426, %r423, %r429}, {%r3046, %r3080}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3165, %r3168}, {%r420, %r426, %r423, %r429}, {%r3055, %r3087}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3153, %r3157}, {%r420, %r426, %r423, %r429}, {%r3064, %r3094}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3172, %r3176}, {%r420, %r426, %r423, %r429}, {%r3073, %r3101}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3145, %r3146, %r3146;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3148, %r3149, %r3149, %r3145;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3152, %r3153, %r3153, %r3148;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3156, %r3157, %r3157, %r3152;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3160, %r1703, %r3156, %r2985;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3164, %r3165, %r3165;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3167, %r3168, %r3168, %r3164;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3171, %r3172, %r3172, %r3167;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3175, %r3176, %r3176, %r3171;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3179, %r1703, %r3175, %r3004;
	// end inline asm
	mov.u32 	%r3629, %r2240;
	mov.u32 	%r3630, %r2240;
	mov.u32 	%r3631, %r2240;
	mov.u32 	%r3632, %r2240;
	@%p115 bra 	LBB0_116;
	bra.uni 	LBB0_86;
LBB0_116:                               // %oksrem12537
                                        //   in Loop: Header=BB0_83 Depth=2
	add.s32 	%r3184, %r98, %r198;
	mul.wide.s32 	%rd269, %r3184, 4;
	add.s64 	%rd271, %rd28, %rd269;
	ld.shared.u32 	%r3632, [%rd271];
	add.s32 	%r3185, %r98, %r199;
	mul.wide.u32 	%rd272, %r3185, 4;
	add.s64 	%rd273, %rd28, %rd272;
	ld.shared.u32 	%r3631, [%rd273];
	add.s32 	%r3186, %r98, %r200;
	mul.wide.s32 	%rd274, %r3186, 4;
	add.s64 	%rd275, %rd28, %rd274;
	ld.shared.u32 	%r3630, [%rd275];
	add.s32 	%r3187, %r98, %r201;
	mul.wide.u32 	%rd276, %r3187, 4;
	add.s64 	%rd277, %rd28, %rd276;
	ld.shared.u32 	%r3629, [%rd277];
LBB0_86:                                // %L33566
                                        //   in Loop: Header=BB0_83 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3223, %r3220}, {%r324, %r327}, {%r3632}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3232, %r3229}, {%r324, %r327}, {%r3631}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3241, %r3238}, {%r324, %r327}, {%r3630}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3250, %r3247}, {%r324, %r327}, {%r3629}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3216, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3218, %r3216, %r3220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3221, %r376, %r3223, %r3218;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3225, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3227, %r3225, %r3229;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3230, %r376, %r3232, %r3227;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3234, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3236, %r3234, %r3238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3239, %r376, %r3241, %r3236;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3243, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3245, %r3243, %r3247;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3248, %r376, %r3250, %r3245;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3252, %r379, %r3223;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3255, %r376, %r3220, %r3252;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3259, %r379, %r3232;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3262, %r376, %r3229, %r3259;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3266, %r379, %r3241;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3269, %r376, %r3238, %r3266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3273, %r379, %r3250;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3276, %r376, %r3247, %r3273;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3321, %r3324}, {%r420, %r426, %r423, %r429}, {%r3221, %r3255}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3340, %r3343}, {%r420, %r426, %r423, %r429}, {%r3230, %r3262}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3328, %r3332}, {%r420, %r426, %r423, %r429}, {%r3239, %r3269}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3347, %r3351}, {%r420, %r426, %r423, %r429}, {%r3248, %r3276}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3320, %r3321, %r3321;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3323, %r3324, %r3324, %r3320;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3327, %r3328, %r3328, %r3323;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3331, %r3332, %r3332, %r3327;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3335, %r1703, %r3331, %r3160;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3339, %r3340, %r3340;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3342, %r3343, %r3343, %r3339;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3346, %r3347, %r3347, %r3342;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3350, %r3351, %r3351, %r3346;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3354, %r1703, %r3350, %r3179;
	// end inline asm
	mov.u32 	%r3633, %r2240;
	mov.u32 	%r3634, %r2240;
	mov.u32 	%r3635, %r2240;
	mov.u32 	%r3636, %r2240;
	@%p115 bra 	LBB0_117;
	bra.uni 	LBB0_87;
LBB0_117:                               // %oksrem13072
                                        //   in Loop: Header=BB0_83 Depth=2
	add.s32 	%r3359, %r98, %r202;
	mul.wide.s32 	%rd278, %r3359, 4;
	add.s64 	%rd280, %rd28, %rd278;
	ld.shared.u32 	%r3636, [%rd280];
	add.s32 	%r3360, %r98, %r203;
	mul.wide.u32 	%rd281, %r3360, 4;
	add.s64 	%rd282, %rd28, %rd281;
	ld.shared.u32 	%r3635, [%rd282];
	add.s32 	%r3361, %r98, %r204;
	mul.wide.s32 	%rd283, %r3361, 4;
	add.s64 	%rd284, %rd28, %rd283;
	ld.shared.u32 	%r3634, [%rd284];
	add.s32 	%r3362, %r98, %r205;
	mul.wide.u32 	%rd285, %r3362, 4;
	add.s64 	%rd286, %rd28, %rd285;
	ld.shared.u32 	%r3633, [%rd286];
LBB0_87:                                // %L34948
                                        //   in Loop: Header=BB0_83 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3398, %r3395}, {%r324, %r327}, {%r3636}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3407, %r3404}, {%r324, %r327}, {%r3635}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3416, %r3413}, {%r324, %r327}, {%r3634}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3425, %r3422}, {%r324, %r327}, {%r3633}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3391, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3393, %r3391, %r3395;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3396, %r376, %r3398, %r3393;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3400, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3402, %r3400, %r3404;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3405, %r376, %r3407, %r3402;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3409, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3411, %r3409, %r3413;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3414, %r376, %r3416, %r3411;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3418, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3420, %r3418, %r3422;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3423, %r376, %r3425, %r3420;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3427, %r379, %r3398;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3430, %r376, %r3395, %r3427;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3434, %r379, %r3407;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3437, %r376, %r3404, %r3434;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3441, %r379, %r3416;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3444, %r376, %r3413, %r3441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3448, %r379, %r3425;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3451, %r376, %r3422, %r3448;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3496, %r3499}, {%r420, %r426, %r423, %r429}, {%r3396, %r3430}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3515, %r3518}, {%r420, %r426, %r423, %r429}, {%r3405, %r3437}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3503, %r3507}, {%r420, %r426, %r423, %r429}, {%r3414, %r3444}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3522, %r3526}, {%r420, %r426, %r423, %r429}, {%r3423, %r3451}, {%r2240, %r2240};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3495, %r3496, %r3496;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3498, %r3499, %r3499, %r3495;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3502, %r3503, %r3503, %r3498;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3506, %r3507, %r3507, %r3502;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3594, %r1703, %r3506, %r3335;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3514, %r3515, %r3515;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3517, %r3518, %r3518, %r3514;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3521, %r3522, %r3522, %r3517;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3525, %r3526, %r3526, %r3521;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3593, %r1703, %r3525, %r3354;
	// end inline asm
	add.s32 	%r3591, %r3591, 4;
	setp.ne.s32 	%p138, %r3591, 40;
	@%p138 bra 	LBB0_91;
// %bb.88:                              // %L35136
                                        //   in Loop: Header=BB0_83 Depth=2
	@%p65 bra 	LBB0_90;
// %bb.89:                              // %L35202
                                        //   in Loop: Header=BB0_83 Depth=2
	mul.lo.s32 	%r3533, %r3592, 1152;
	or.b32  	%r3534, %r3533, %r70;
	add.s32 	%r3535, %r3534, %r99;
	add.s32 	%r3536, %r3535, %r100;
	mul.wide.u32 	%rd287, %r3536, 4;
	add.s64 	%rd288, %rd4, %rd287;
	st.global.u32 	[%rd288], %r3594;
	add.s32 	%r3537, %r101, %r3533;
	add.s32 	%r3538, %r3537, %r70;
	add.s32 	%r3539, %r3538, %r100;
	mul.wide.u32 	%rd289, %r3539, 4;
	add.s64 	%rd290, %rd4, %rd289;
	st.global.u32 	[%rd290], %r3593;
	bra.uni 	LBB0_90;
LBB0_93:                                // %L35500
	mov.u32 	%r3541, 0;
	st.global.u32 	[%rd5], %r3541;
	ret;
LBB0_1:                                 // %L9
	ld.param.u32 	%r308, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd13, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0];
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd13;
	st.param.b32 	[param0+8], %r308;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
