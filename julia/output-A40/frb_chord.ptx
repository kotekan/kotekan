// PTX CompilerJob of MethodInstance for frb(::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.1
.target sm_86
.address_size 64

	// .globl	_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE // -- Begin function _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.visible .entry _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE(
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<142>;
	.reg .b16 	%rs<289>;
	.reg .b32 	%r<3549>;
	.reg .f32 	%f<397>;
	.reg .b64 	%rd<283>;

// %bb.0:                               // %conversion
	// begin inline asm
	mov.u32 %r288, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r288, 76895;
	@%p1 bra 	LBB0_94;
	bra.uni 	LBB0_1;
LBB0_94:                                // %L10
	ld.param.u64 	%rd14, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %ctaid.x;
	or.b32  	%r289, %r3, %r1;
	mad.lo.s32 	%r290, %r4, 768, %r289;
	mul.wide.u32 	%rd20, %r290, 4;
	add.s64 	%rd5, %rd14, %rd20;
	mov.u32 	%r291, 1;
	st.global.u32 	[%rd5], %r291;
	and.b32  	%r5, %r1, 3;
	shr.u32 	%r6, %r1, 2;
	mul.lo.s32 	%r292, %r5, %r6;
	and.b32  	%r293, %r292, 7;
	cvt.rn.f32.u32 	%f102, %r293;
	mov.f32 	%f103, 0f40800000;
	div.approx.f32 	%f1, %f102, %f103;
	abs.f32 	%f395, %f1;
	setp.lt.f32 	%p2, %f395, 0f40000000;
	@%p2 bra 	LBB0_106;
// %bb.95:
	setp.gtu.f32 	%p3, %f395, 0f4B800000;
	@%p3 bra 	LBB0_102;
	bra.uni 	LBB0_96;
LBB0_102:
	mov.b32 	%r219, %f395;
	and.b32  	%r294, %r219, 8388607;
	or.b32  	%r3547, %r294, 1065353216;
	mov.b32 	%f394, %r3547;
	add.s32 	%r295, %r219, -1073741824;
	and.b32  	%r3548, %r295, -8388608;
	setp.eq.s32 	%p9, %r3548, 0;
	@%p9 bra 	LBB0_105;
// %bb.103:                             // %__nv_fmaf_rn.exit4.i.i.i1286.preheader
	mov.f32 	%f113, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f112,%f113;
	// end inline asm
LBB0_104:                               // %__nv_fmaf_rn.exit4.i.i.i1286
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r296, %r3548, 192937984;
	add.s32 	%r297, %r296, %r3547;
	mov.b32 	%f114, %r297;
	mul.f32 	%f115, %f112, %f114;
	sub.f32 	%f116, %f114, %f115;
	fma.rn.f32 	%f117, %f116, %f112, %f115;
	sub.f32 	%f118, %f114, %f117;
	fma.rz.f32 	%f119, %f118, %f112, %f117;
	cvt.rzi.f32.f32 	%f120, %f119;
	sub.f32 	%f394, %f114, %f120;
	sub.s32 	%r3548, %r3548, %r296;
	mov.b32 	%r3547, %f394;
	setp.ne.s32 	%p10, %r3548, 0;
	setp.ne.s32 	%p11, %r3547, 0;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	LBB0_104;
LBB0_105:                               // %__internal_fmodf_slowpath_mod.exit.i.i1288
	setp.gt.u32 	%p13, %r219, 2139095039;
	selp.f32 	%f121, 0f7FFFFFFF, 0f4B800000, %p13;
	mul.f32 	%f122, %f394, 0f34000000;
	mul.f32 	%f395, %f121, %f122;
	bra.uni 	LBB0_106;
LBB0_96:                                // %__nv_fast_fdividef.exit.i.i.i1258
	mov.f32 	%f104, 0f40000000;
	div.approx.f32 	%f105, %f395, %f104;
	cvt.rzi.f32.f32 	%f393, %f105;
	fma.rn.f32 	%f88, %f393, 0fC0000000, %f395;
	mov.b32 	%r218, %f88;
	setp.lt.u32 	%p4, %r218, 1073741824;
	@%p4 bra 	LBB0_101;
// %bb.97:
	setp.lt.u32 	%p5, %r218, -2147483647;
	@%p5 bra 	LBB0_99;
// %bb.98:
	add.f32 	%f110, %f393, 0fBF800000;
	setp.lt.f32 	%p8, %f88, 0fC0000000;
	add.f32 	%f111, %f110, 0fBF800000;
	selp.f32 	%f393, %f111, %f110, %p8;
	bra.uni 	LBB0_101;
LBB0_99:
	add.f32 	%f393, %f393, 0f3F800000;
	setp.ltu.f32 	%p6, %f88, 0f40800000;
	@%p6 bra 	LBB0_101;
// %bb.100:                             // %__nv_fmaf_rn.exit.i.i.i1263
	add.f32 	%f106, %f393, 0f3F800000;
	fma.rn.f32 	%f108, %f104, 0fC0400000, %f88;
	setp.ge.f32 	%p7, %f108, 0f00000000;
	add.f32 	%f109, %f106, 0f3F800000;
	selp.f32 	%f393, %f109, %f106, %p7;
LBB0_101:                               // %__internal_fmodf_fastpath_quot.exit.i.i1267
	fma.rn.f32 	%f395, %f393, 0fC0000000, %f395;
LBB0_106:                               // %__internal_fmodf_kernel.exit.i1292
	abs.f32 	%f123, %f395;
	setp.gtu.f32 	%p14, %f123, 0f7F800000;
	@%p14 bra 	LBB0_108;
// %bb.107:
	mov.b32 	%r298, %f1;
	and.b32  	%r299, %r298, -2147483648;
	mov.b32 	%r300, %f395;
	or.b32  	%r301, %r299, %r300;
	mov.b32 	%f395, %r301;
LBB0_108:                               // %__nv_fmodf.exit1293
	add.f32 	%f125, %f395, %f395;
	mov.b32 	%r308, %f125;
	and.b32  	%r309, %r308, -2147483648;
	or.b32  	%r310, %r309, 1056964608;
	mov.b32 	%f126, %r310;
	add.f32 	%f127, %f125, %f126;
	cvt.rzi.f32.f32 	%f128, %f127;
	abs.f32 	%f129, %f125;
	setp.gt.f32 	%p15, %f129, 0f4B000000;
	selp.f32 	%f130, %f125, %f128, %p15;
	cvt.rzi.f32.f32 	%f131, %f125;
	setp.lt.f32 	%p16, %f129, 0f3F000000;
	selp.f32 	%f132, %f131, %f130, %p16;
	cvt.rzi.s32.f32 	%r311, %f132;
	fma.rn.f32 	%f133, %f132, 0fBF000000, %f395;
	mul.f32 	%f134, %f133, %f133;
	fma.rn.f32 	%f135, %f134, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f136, %f134, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f137, %f135, %f134, 0fC0A55DF6;
	fma.rn.f32 	%f138, %f136, %f134, 0f4081E0CF;
	fma.rn.f32 	%f139, %f134, %f133, 0f00000000;
	fma.rn.f32 	%f140, %f138, %f134, 0fC09DE9E6;
	fma.rn.f32 	%f141, %f137, %f139, 0f00000000;
	fma.rn.f32 	%f142, %f140, %f134, 0f3F800000;
	fma.rn.f32 	%f143, %f133, 0f40490FDB, %f141;
	and.b32  	%r312, %r311, 1;
	setp.eq.b32 	%p17, %r312, 1;
	selp.f32 	%f144, %f142, %f143, %p17;
	selp.f32 	%f145, %f143, %f142, %p17;
	and.b32  	%r313, %r311, 2;
	setp.eq.s32 	%p18, %r313, 0;
	neg.f32 	%f146, %f144;
	selp.f32 	%f147, %f144, %f146, %p18;
	add.s32 	%r314, %r311, 1;
	and.b32  	%r315, %r314, 2;
	mov.f32 	%f391, 0f00000000;
	cvt.rzi.f32.f32 	%f150, %f395;
	setp.eq.f32 	%p20, %f150, %f395;
	mul.f32 	%f151, %f395, 0f00000000;
	shl.b32 	%r228, %r1, 1;
	and.b32  	%r229, %r228, 6;
	or.b32  	%r230, %r229, 1;
	setp.eq.s32 	%p22, %r229, 6;
	mov.f32 	%f367, 0f41C00000;
	mul.lo.s32 	%r3448, %r229, %r6;
	mov.f32 	%f373, %f391;
	mov.f32 	%f374, %f391;
	@%p22 bra 	LBB0_17;
// %bb.2:                               // %L186
	cvt.u16.u32 	%rs2, %r3448;
	and.b16  	%rs3, %rs2, 255;
	mul.lo.s16 	%rs4, %rs3, 171;
	shr.u16 	%rs5, %rs4, 13;
	mul.lo.s16 	%rs6, %rs5, 48;
	sub.s16 	%rs7, %rs2, %rs6;
	and.b16  	%rs8, %rs7, 255;
	cvt.rn.f32.u16 	%f156, %rs8;
	div.approx.f32 	%f3, %f156, %f367;
	abs.f32 	%f371, %f3;
	setp.lt.f32 	%p23, %f371, 0f40000000;
	@%p23 bra 	LBB0_14;
// %bb.3:
	setp.gtu.f32 	%p24, %f371, 0f4B800000;
	@%p24 bra 	LBB0_10;
	bra.uni 	LBB0_4;
LBB0_10:
	mov.b32 	%r8, %f371;
	and.b32  	%r317, %r8, 8388607;
	or.b32  	%r3451, %r317, 1065353216;
	mov.b32 	%f370, %r3451;
	add.s32 	%r318, %r8, -1073741824;
	and.b32  	%r3452, %r318, -8388608;
	setp.eq.s32 	%p30, %r3452, 0;
	@%p30 bra 	LBB0_13;
// %bb.11:                              // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f167, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f166,%f167;
	// end inline asm
LBB0_12:                                // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r319, %r3452, 192937984;
	add.s32 	%r320, %r319, %r3451;
	mov.b32 	%f168, %r320;
	mul.f32 	%f169, %f166, %f168;
	sub.f32 	%f170, %f168, %f169;
	fma.rn.f32 	%f171, %f170, %f166, %f169;
	sub.f32 	%f172, %f168, %f171;
	fma.rz.f32 	%f173, %f172, %f166, %f171;
	cvt.rzi.f32.f32 	%f174, %f173;
	sub.f32 	%f370, %f168, %f174;
	sub.s32 	%r3452, %r3452, %r319;
	mov.b32 	%r3451, %f370;
	setp.ne.s32 	%p31, %r3452, 0;
	setp.ne.s32 	%p32, %r3451, 0;
	and.pred  	%p33, %p31, %p32;
	@%p33 bra 	LBB0_12;
LBB0_13:                                // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p34, %r8, 2139095039;
	selp.f32 	%f175, 0f7FFFFFFF, 0f4B800000, %p34;
	mul.f32 	%f176, %f370, 0f34000000;
	mul.f32 	%f371, %f175, %f176;
	bra.uni 	LBB0_14;
LBB0_4:                                 // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f158, 0f40000000;
	div.approx.f32 	%f159, %f371, %f158;
	cvt.rzi.f32.f32 	%f369, %f159;
	fma.rn.f32 	%f6, %f369, 0fC0000000, %f371;
	mov.b32 	%r7, %f6;
	setp.lt.u32 	%p25, %r7, 1073741824;
	@%p25 bra 	LBB0_9;
// %bb.5:
	setp.lt.u32 	%p26, %r7, -2147483647;
	@%p26 bra 	LBB0_7;
// %bb.6:
	add.f32 	%f164, %f369, 0fBF800000;
	setp.lt.f32 	%p29, %f6, 0fC0000000;
	add.f32 	%f165, %f164, 0fBF800000;
	selp.f32 	%f369, %f165, %f164, %p29;
	bra.uni 	LBB0_9;
LBB0_7:
	add.f32 	%f369, %f369, 0f3F800000;
	setp.ltu.f32 	%p27, %f6, 0f40800000;
	@%p27 bra 	LBB0_9;
// %bb.8:                               // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f160, %f369, 0f3F800000;
	fma.rn.f32 	%f162, %f158, 0fC0400000, %f6;
	setp.ge.f32 	%p28, %f162, 0f00000000;
	add.f32 	%f163, %f160, 0f3F800000;
	selp.f32 	%f369, %f163, %f160, %p28;
LBB0_9:                                 // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f371, %f369, 0fC0000000, %f371;
LBB0_14:                                // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f177, %f371;
	setp.gtu.f32 	%p35, %f177, 0f7F800000;
	@%p35 bra 	LBB0_16;
// %bb.15:
	mov.b32 	%r321, %f3;
	and.b32  	%r322, %r321, -2147483648;
	mov.b32 	%r323, %f371;
	or.b32  	%r324, %r322, %r323;
	mov.b32 	%f371, %r324;
LBB0_16:                                // %__nv_fmodf.exit
	add.f32 	%f178, %f371, %f371;
	mov.b32 	%r325, %f178;
	and.b32  	%r326, %r325, -2147483648;
	or.b32  	%r327, %r326, 1056964608;
	mov.b32 	%f179, %r327;
	add.f32 	%f180, %f178, %f179;
	cvt.rzi.f32.f32 	%f181, %f180;
	abs.f32 	%f182, %f178;
	setp.gt.f32 	%p36, %f182, 0f4B000000;
	selp.f32 	%f183, %f178, %f181, %p36;
	cvt.rzi.f32.f32 	%f184, %f178;
	setp.lt.f32 	%p37, %f182, 0f3F000000;
	selp.f32 	%f185, %f184, %f183, %p37;
	cvt.rzi.s32.f32 	%r328, %f185;
	fma.rn.f32 	%f186, %f185, 0fBF000000, %f371;
	mul.f32 	%f187, %f186, %f186;
	fma.rn.f32 	%f188, %f187, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f189, %f187, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f190, %f188, %f187, 0fC0A55DF6;
	fma.rn.f32 	%f191, %f189, %f187, 0f4081E0CF;
	fma.rn.f32 	%f192, %f187, %f186, 0f00000000;
	fma.rn.f32 	%f193, %f191, %f187, 0fC09DE9E6;
	fma.rn.f32 	%f194, %f190, %f192, 0f00000000;
	fma.rn.f32 	%f195, %f193, %f187, 0f3F800000;
	fma.rn.f32 	%f196, %f186, 0f40490FDB, %f194;
	and.b32  	%r329, %r328, 1;
	setp.eq.b32 	%p38, %r329, 1;
	selp.f32 	%f197, %f195, %f196, %p38;
	selp.f32 	%f198, %f196, %f195, %p38;
	and.b32  	%r330, %r328, 2;
	setp.eq.s32 	%p39, %r330, 0;
	neg.f32 	%f199, %f197;
	selp.f32 	%f200, %f197, %f199, %p39;
	add.s32 	%r331, %r328, 1;
	and.b32  	%r332, %r331, 2;
	setp.eq.s32 	%p40, %r332, 0;
	mov.f32 	%f201, 0f00000000;
	sub.f32 	%f202, %f201, %f198;
	selp.f32 	%f203, %f198, %f202, %p40;
	cvt.rzi.f32.f32 	%f204, %f371;
	setp.eq.f32 	%p41, %f204, %f371;
	mul.f32 	%f205, %f371, 0f00000000;
	selp.f32 	%f374, %f205, %f200, %p41;
	abs.f32 	%f206, %f371;
	setp.gt.f32 	%p42, %f206, 0f4B800000;
	add.f32 	%f207, %f374, 0f3F800000;
	selp.f32 	%f373, %f207, %f203, %p42;
LBB0_17:                                // %L202
	setp.eq.s32 	%p19, %r315, 0;
	sub.f32 	%f148, %f391, %f145;
	selp.f32 	%f152, %f151, %f147, %p20;
	abs.f32 	%f153, %f395;
	setp.gt.u32 	%p43, %r230, 5;
	mul.lo.s32 	%r3449, %r230, %r6;
	mov.f32 	%f379, %f391;
	mov.f32 	%f380, %f391;
	@%p43 bra 	LBB0_33;
// %bb.18:                              // %L206
	mul.hi.u32 	%r334, %r3449, -1431655765;
	shr.u32 	%r335, %r334, 5;
	mul.lo.s32 	%r336, %r335, 48;
	sub.s32 	%r337, %r3449, %r336;
	cvt.rn.f32.s32 	%f209, %r337;
	div.approx.f32 	%f24, %f209, %f367;
	abs.f32 	%f377, %f24;
	setp.lt.f32 	%p44, %f377, 0f40000000;
	@%p44 bra 	LBB0_30;
// %bb.19:
	setp.gtu.f32 	%p45, %f377, 0f4B800000;
	@%p45 bra 	LBB0_26;
	bra.uni 	LBB0_20;
LBB0_26:
	mov.b32 	%r16, %f377;
	and.b32  	%r338, %r16, 8388607;
	or.b32  	%r3453, %r338, 1065353216;
	mov.b32 	%f376, %r3453;
	add.s32 	%r339, %r16, -1073741824;
	and.b32  	%r3454, %r339, -8388608;
	setp.eq.s32 	%p51, %r3454, 0;
	@%p51 bra 	LBB0_29;
// %bb.27:                              // %__nv_fmaf_rn.exit4.i.i.i1148.preheader
	mov.f32 	%f220, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f219,%f220;
	// end inline asm
LBB0_28:                                // %__nv_fmaf_rn.exit4.i.i.i1148
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r340, %r3454, 192937984;
	add.s32 	%r341, %r340, %r3453;
	mov.b32 	%f221, %r341;
	mul.f32 	%f222, %f219, %f221;
	sub.f32 	%f223, %f221, %f222;
	fma.rn.f32 	%f224, %f223, %f219, %f222;
	sub.f32 	%f225, %f221, %f224;
	fma.rz.f32 	%f226, %f225, %f219, %f224;
	cvt.rzi.f32.f32 	%f227, %f226;
	sub.f32 	%f376, %f221, %f227;
	sub.s32 	%r3454, %r3454, %r340;
	mov.b32 	%r3453, %f376;
	setp.ne.s32 	%p52, %r3454, 0;
	setp.ne.s32 	%p53, %r3453, 0;
	and.pred  	%p54, %p52, %p53;
	@%p54 bra 	LBB0_28;
LBB0_29:                                // %__internal_fmodf_slowpath_mod.exit.i.i1150
	setp.gt.u32 	%p55, %r16, 2139095039;
	selp.f32 	%f228, 0f7FFFFFFF, 0f4B800000, %p55;
	mul.f32 	%f229, %f376, 0f34000000;
	mul.f32 	%f377, %f228, %f229;
	bra.uni 	LBB0_30;
LBB0_20:                                // %__nv_fast_fdividef.exit.i.i.i1120
	mov.f32 	%f211, 0f40000000;
	div.approx.f32 	%f212, %f377, %f211;
	cvt.rzi.f32.f32 	%f375, %f212;
	fma.rn.f32 	%f27, %f375, 0fC0000000, %f377;
	mov.b32 	%r15, %f27;
	setp.lt.u32 	%p46, %r15, 1073741824;
	@%p46 bra 	LBB0_25;
// %bb.21:
	setp.lt.u32 	%p47, %r15, -2147483647;
	@%p47 bra 	LBB0_23;
// %bb.22:
	add.f32 	%f217, %f375, 0fBF800000;
	setp.lt.f32 	%p50, %f27, 0fC0000000;
	add.f32 	%f218, %f217, 0fBF800000;
	selp.f32 	%f375, %f218, %f217, %p50;
	bra.uni 	LBB0_25;
LBB0_23:
	add.f32 	%f375, %f375, 0f3F800000;
	setp.ltu.f32 	%p48, %f27, 0f40800000;
	@%p48 bra 	LBB0_25;
// %bb.24:                              // %__nv_fmaf_rn.exit.i.i.i1125
	add.f32 	%f213, %f375, 0f3F800000;
	fma.rn.f32 	%f215, %f211, 0fC0400000, %f27;
	setp.ge.f32 	%p49, %f215, 0f00000000;
	add.f32 	%f216, %f213, 0f3F800000;
	selp.f32 	%f375, %f216, %f213, %p49;
LBB0_25:                                // %__internal_fmodf_fastpath_quot.exit.i.i1129
	fma.rn.f32 	%f377, %f375, 0fC0000000, %f377;
LBB0_30:                                // %__internal_fmodf_kernel.exit.i1154
	abs.f32 	%f230, %f377;
	setp.gtu.f32 	%p56, %f230, 0f7F800000;
	@%p56 bra 	LBB0_32;
// %bb.31:
	mov.b32 	%r342, %f24;
	and.b32  	%r343, %r342, -2147483648;
	mov.b32 	%r344, %f377;
	or.b32  	%r345, %r343, %r344;
	mov.b32 	%f377, %r345;
LBB0_32:                                // %__nv_fmodf.exit1155
	add.f32 	%f231, %f377, %f377;
	mov.b32 	%r346, %f231;
	and.b32  	%r347, %r346, -2147483648;
	or.b32  	%r348, %r347, 1056964608;
	mov.b32 	%f232, %r348;
	add.f32 	%f233, %f231, %f232;
	cvt.rzi.f32.f32 	%f234, %f233;
	abs.f32 	%f235, %f231;
	setp.gt.f32 	%p57, %f235, 0f4B000000;
	selp.f32 	%f236, %f231, %f234, %p57;
	cvt.rzi.f32.f32 	%f237, %f231;
	setp.lt.f32 	%p58, %f235, 0f3F000000;
	selp.f32 	%f238, %f237, %f236, %p58;
	cvt.rzi.s32.f32 	%r349, %f238;
	fma.rn.f32 	%f239, %f238, 0fBF000000, %f377;
	mul.f32 	%f240, %f239, %f239;
	fma.rn.f32 	%f241, %f240, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f242, %f240, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f243, %f241, %f240, 0fC0A55DF6;
	fma.rn.f32 	%f244, %f242, %f240, 0f4081E0CF;
	fma.rn.f32 	%f245, %f240, %f239, 0f00000000;
	fma.rn.f32 	%f246, %f244, %f240, 0fC09DE9E6;
	fma.rn.f32 	%f247, %f243, %f245, 0f00000000;
	fma.rn.f32 	%f248, %f246, %f240, 0f3F800000;
	fma.rn.f32 	%f249, %f239, 0f40490FDB, %f247;
	and.b32  	%r350, %r349, 1;
	setp.eq.b32 	%p59, %r350, 1;
	selp.f32 	%f250, %f248, %f249, %p59;
	selp.f32 	%f251, %f249, %f248, %p59;
	and.b32  	%r351, %r349, 2;
	setp.eq.s32 	%p60, %r351, 0;
	neg.f32 	%f252, %f250;
	selp.f32 	%f253, %f250, %f252, %p60;
	add.s32 	%r352, %r349, 1;
	and.b32  	%r353, %r352, 2;
	setp.eq.s32 	%p61, %r353, 0;
	mov.f32 	%f254, 0f00000000;
	sub.f32 	%f255, %f254, %f251;
	selp.f32 	%f256, %f251, %f255, %p61;
	cvt.rzi.f32.f32 	%f257, %f377;
	setp.eq.f32 	%p62, %f257, %f377;
	mul.f32 	%f258, %f377, 0f00000000;
	selp.f32 	%f380, %f258, %f253, %p62;
	abs.f32 	%f259, %f377;
	setp.gt.f32 	%p63, %f259, 0f4B800000;
	add.f32 	%f260, %f380, 0f3F800000;
	selp.f32 	%f379, %f260, %f256, %p63;
LBB0_33:                                // %L222
	selp.f32 	%f149, %f145, %f148, %p19;
	setp.gt.f32 	%p21, %f153, 0f4B800000;
	add.f32 	%f154, %f152, 0f3F800000;
	setp.gt.u32 	%p65, %r1, 23;
	or.pred  	%p66, %p22, %p65;
	mov.f32 	%f368, 0f40400000;
	mov.f32 	%f385, %f391;
	mov.f32 	%f386, %f391;
	@%p66 bra 	LBB0_49;
// %bb.34:                              // %L259
	cvt.u16.u32 	%rs9, %r3448;
	and.b16  	%rs10, %rs9, 255;
	mul.lo.s16 	%rs11, %rs10, 171;
	shr.u16 	%rs12, %rs11, 10;
	mul.lo.s16 	%rs13, %rs12, 6;
	sub.s16 	%rs14, %rs9, %rs13;
	and.b16  	%rs15, %rs14, 255;
	cvt.rn.f32.u16 	%f262, %rs15;
	div.approx.f32 	%f45, %f262, %f368;
	abs.f32 	%f383, %f45;
	setp.lt.f32 	%p67, %f383, 0f40000000;
	@%p67 bra 	LBB0_46;
// %bb.35:
	setp.gtu.f32 	%p68, %f383, 0f4B800000;
	@%p68 bra 	LBB0_42;
	bra.uni 	LBB0_36;
LBB0_42:
	mov.b32 	%r26, %f383;
	and.b32  	%r361, %r26, 8388607;
	or.b32  	%r3455, %r361, 1065353216;
	mov.b32 	%f382, %r3455;
	add.s32 	%r362, %r26, -1073741824;
	and.b32  	%r3456, %r362, -8388608;
	setp.eq.s32 	%p74, %r3456, 0;
	@%p74 bra 	LBB0_45;
// %bb.43:                              // %__nv_fmaf_rn.exit4.i.i.i1194.preheader
	mov.f32 	%f273, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f272,%f273;
	// end inline asm
LBB0_44:                                // %__nv_fmaf_rn.exit4.i.i.i1194
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r363, %r3456, 192937984;
	add.s32 	%r364, %r363, %r3455;
	mov.b32 	%f274, %r364;
	mul.f32 	%f275, %f272, %f274;
	sub.f32 	%f276, %f274, %f275;
	fma.rn.f32 	%f277, %f276, %f272, %f275;
	sub.f32 	%f278, %f274, %f277;
	fma.rz.f32 	%f279, %f278, %f272, %f277;
	cvt.rzi.f32.f32 	%f280, %f279;
	sub.f32 	%f382, %f274, %f280;
	sub.s32 	%r3456, %r3456, %r363;
	mov.b32 	%r3455, %f382;
	setp.ne.s32 	%p75, %r3456, 0;
	setp.ne.s32 	%p76, %r3455, 0;
	and.pred  	%p77, %p75, %p76;
	@%p77 bra 	LBB0_44;
LBB0_45:                                // %__internal_fmodf_slowpath_mod.exit.i.i1196
	setp.gt.u32 	%p78, %r26, 2139095039;
	selp.f32 	%f281, 0f7FFFFFFF, 0f4B800000, %p78;
	mul.f32 	%f282, %f382, 0f34000000;
	mul.f32 	%f383, %f281, %f282;
	bra.uni 	LBB0_46;
LBB0_36:                                // %__nv_fast_fdividef.exit.i.i.i1166
	mov.f32 	%f264, 0f40000000;
	div.approx.f32 	%f265, %f383, %f264;
	cvt.rzi.f32.f32 	%f381, %f265;
	fma.rn.f32 	%f48, %f381, 0fC0000000, %f383;
	mov.b32 	%r25, %f48;
	setp.lt.u32 	%p69, %r25, 1073741824;
	@%p69 bra 	LBB0_41;
// %bb.37:
	setp.lt.u32 	%p70, %r25, -2147483647;
	@%p70 bra 	LBB0_39;
// %bb.38:
	add.f32 	%f270, %f381, 0fBF800000;
	setp.lt.f32 	%p73, %f48, 0fC0000000;
	add.f32 	%f271, %f270, 0fBF800000;
	selp.f32 	%f381, %f271, %f270, %p73;
	bra.uni 	LBB0_41;
LBB0_39:
	add.f32 	%f381, %f381, 0f3F800000;
	setp.ltu.f32 	%p71, %f48, 0f40800000;
	@%p71 bra 	LBB0_41;
// %bb.40:                              // %__nv_fmaf_rn.exit.i.i.i1171
	add.f32 	%f266, %f381, 0f3F800000;
	fma.rn.f32 	%f268, %f264, 0fC0400000, %f48;
	setp.ge.f32 	%p72, %f268, 0f00000000;
	add.f32 	%f269, %f266, 0f3F800000;
	selp.f32 	%f381, %f269, %f266, %p72;
LBB0_41:                                // %__internal_fmodf_fastpath_quot.exit.i.i1175
	fma.rn.f32 	%f383, %f381, 0fC0000000, %f383;
LBB0_46:                                // %__internal_fmodf_kernel.exit.i1200
	abs.f32 	%f283, %f383;
	setp.gtu.f32 	%p79, %f283, 0f7F800000;
	@%p79 bra 	LBB0_48;
// %bb.47:
	mov.b32 	%r365, %f45;
	and.b32  	%r366, %r365, -2147483648;
	mov.b32 	%r367, %f383;
	or.b32  	%r368, %r366, %r367;
	mov.b32 	%f383, %r368;
LBB0_48:                                // %__nv_fmodf.exit1201
	add.f32 	%f284, %f383, %f383;
	mov.b32 	%r369, %f284;
	and.b32  	%r370, %r369, -2147483648;
	or.b32  	%r371, %r370, 1056964608;
	mov.b32 	%f285, %r371;
	add.f32 	%f286, %f284, %f285;
	cvt.rzi.f32.f32 	%f287, %f286;
	abs.f32 	%f288, %f284;
	setp.gt.f32 	%p80, %f288, 0f4B000000;
	selp.f32 	%f289, %f284, %f287, %p80;
	cvt.rzi.f32.f32 	%f290, %f284;
	setp.lt.f32 	%p81, %f288, 0f3F000000;
	selp.f32 	%f291, %f290, %f289, %p81;
	cvt.rzi.s32.f32 	%r372, %f291;
	fma.rn.f32 	%f292, %f291, 0fBF000000, %f383;
	mul.f32 	%f293, %f292, %f292;
	fma.rn.f32 	%f294, %f293, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f295, %f293, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f296, %f294, %f293, 0fC0A55DF6;
	fma.rn.f32 	%f297, %f295, %f293, 0f4081E0CF;
	fma.rn.f32 	%f298, %f293, %f292, 0f00000000;
	fma.rn.f32 	%f299, %f297, %f293, 0fC09DE9E6;
	fma.rn.f32 	%f300, %f296, %f298, 0f00000000;
	fma.rn.f32 	%f301, %f299, %f293, 0f3F800000;
	fma.rn.f32 	%f302, %f292, 0f40490FDB, %f300;
	and.b32  	%r373, %r372, 1;
	setp.eq.b32 	%p82, %r373, 1;
	selp.f32 	%f303, %f301, %f302, %p82;
	selp.f32 	%f304, %f302, %f301, %p82;
	and.b32  	%r374, %r372, 2;
	setp.eq.s32 	%p83, %r374, 0;
	neg.f32 	%f305, %f303;
	selp.f32 	%f306, %f303, %f305, %p83;
	add.s32 	%r375, %r372, 1;
	and.b32  	%r376, %r375, 2;
	setp.eq.s32 	%p84, %r376, 0;
	mov.f32 	%f307, 0f00000000;
	sub.f32 	%f308, %f307, %f304;
	selp.f32 	%f309, %f304, %f308, %p84;
	cvt.rzi.f32.f32 	%f310, %f383;
	setp.eq.f32 	%p85, %f310, %f383;
	mul.f32 	%f311, %f383, 0f00000000;
	selp.f32 	%f386, %f311, %f306, %p85;
	abs.f32 	%f312, %f383;
	setp.gt.f32 	%p86, %f312, 0f4B800000;
	add.f32 	%f313, %f386, 0f3F800000;
	selp.f32 	%f385, %f313, %f309, %p86;
LBB0_49:                                // %L275
	selp.f32 	%f155, %f154, %f149, %p21;
	or.pred  	%p89, %p43, %p65;
	mov.f32 	%f392, %f391;
	@%p89 bra 	LBB0_65;
// %bb.50:                              // %L283
	mul.hi.u32 	%r378, %r3449, -1431655765;
	shr.u32 	%r379, %r378, 2;
	mul.lo.s32 	%r380, %r379, 6;
	sub.s32 	%r381, %r3449, %r380;
	cvt.rn.f32.s32 	%f315, %r381;
	div.approx.f32 	%f66, %f315, %f368;
	abs.f32 	%f389, %f66;
	setp.lt.f32 	%p90, %f389, 0f40000000;
	@%p90 bra 	LBB0_62;
// %bb.51:
	setp.gtu.f32 	%p91, %f389, 0f4B800000;
	@%p91 bra 	LBB0_58;
	bra.uni 	LBB0_52;
LBB0_58:
	mov.b32 	%r34, %f389;
	and.b32  	%r382, %r34, 8388607;
	or.b32  	%r3457, %r382, 1065353216;
	mov.b32 	%f388, %r3457;
	add.s32 	%r383, %r34, -1073741824;
	and.b32  	%r3458, %r383, -8388608;
	setp.eq.s32 	%p97, %r3458, 0;
	@%p97 bra 	LBB0_61;
// %bb.59:                              // %__nv_fmaf_rn.exit4.i.i.i1240.preheader
	mov.f32 	%f326, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f325,%f326;
	// end inline asm
LBB0_60:                                // %__nv_fmaf_rn.exit4.i.i.i1240
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r384, %r3458, 192937984;
	add.s32 	%r385, %r384, %r3457;
	mov.b32 	%f327, %r385;
	mul.f32 	%f328, %f325, %f327;
	sub.f32 	%f329, %f327, %f328;
	fma.rn.f32 	%f330, %f329, %f325, %f328;
	sub.f32 	%f331, %f327, %f330;
	fma.rz.f32 	%f332, %f331, %f325, %f330;
	cvt.rzi.f32.f32 	%f333, %f332;
	sub.f32 	%f388, %f327, %f333;
	sub.s32 	%r3458, %r3458, %r384;
	mov.b32 	%r3457, %f388;
	setp.ne.s32 	%p98, %r3458, 0;
	setp.ne.s32 	%p99, %r3457, 0;
	and.pred  	%p100, %p98, %p99;
	@%p100 bra 	LBB0_60;
LBB0_61:                                // %__internal_fmodf_slowpath_mod.exit.i.i1242
	setp.gt.u32 	%p101, %r34, 2139095039;
	selp.f32 	%f334, 0f7FFFFFFF, 0f4B800000, %p101;
	mul.f32 	%f335, %f388, 0f34000000;
	mul.f32 	%f389, %f334, %f335;
	bra.uni 	LBB0_62;
LBB0_52:                                // %__nv_fast_fdividef.exit.i.i.i1212
	mov.f32 	%f317, 0f40000000;
	div.approx.f32 	%f318, %f389, %f317;
	cvt.rzi.f32.f32 	%f387, %f318;
	fma.rn.f32 	%f69, %f387, 0fC0000000, %f389;
	mov.b32 	%r33, %f69;
	setp.lt.u32 	%p92, %r33, 1073741824;
	@%p92 bra 	LBB0_57;
// %bb.53:
	setp.lt.u32 	%p93, %r33, -2147483647;
	@%p93 bra 	LBB0_55;
// %bb.54:
	add.f32 	%f323, %f387, 0fBF800000;
	setp.lt.f32 	%p96, %f69, 0fC0000000;
	add.f32 	%f324, %f323, 0fBF800000;
	selp.f32 	%f387, %f324, %f323, %p96;
	bra.uni 	LBB0_57;
LBB0_55:
	add.f32 	%f387, %f387, 0f3F800000;
	setp.ltu.f32 	%p94, %f69, 0f40800000;
	@%p94 bra 	LBB0_57;
// %bb.56:                              // %__nv_fmaf_rn.exit.i.i.i1217
	add.f32 	%f319, %f387, 0f3F800000;
	fma.rn.f32 	%f321, %f317, 0fC0400000, %f69;
	setp.ge.f32 	%p95, %f321, 0f00000000;
	add.f32 	%f322, %f319, 0f3F800000;
	selp.f32 	%f387, %f322, %f319, %p95;
LBB0_57:                                // %__internal_fmodf_fastpath_quot.exit.i.i1221
	fma.rn.f32 	%f389, %f387, 0fC0000000, %f389;
LBB0_62:                                // %__internal_fmodf_kernel.exit.i1246
	abs.f32 	%f336, %f389;
	setp.gtu.f32 	%p102, %f336, 0f7F800000;
	@%p102 bra 	LBB0_64;
// %bb.63:
	mov.b32 	%r386, %f66;
	and.b32  	%r387, %r386, -2147483648;
	mov.b32 	%r388, %f389;
	or.b32  	%r389, %r387, %r388;
	mov.b32 	%f389, %r389;
LBB0_64:                                // %__nv_fmodf.exit1247
	add.f32 	%f337, %f389, %f389;
	mov.b32 	%r390, %f337;
	and.b32  	%r391, %r390, -2147483648;
	or.b32  	%r392, %r391, 1056964608;
	mov.b32 	%f338, %r392;
	add.f32 	%f339, %f337, %f338;
	cvt.rzi.f32.f32 	%f340, %f339;
	abs.f32 	%f341, %f337;
	setp.gt.f32 	%p103, %f341, 0f4B000000;
	selp.f32 	%f342, %f337, %f340, %p103;
	cvt.rzi.f32.f32 	%f343, %f337;
	setp.lt.f32 	%p104, %f341, 0f3F000000;
	selp.f32 	%f344, %f343, %f342, %p104;
	cvt.rzi.s32.f32 	%r393, %f344;
	fma.rn.f32 	%f345, %f344, 0fBF000000, %f389;
	mul.f32 	%f346, %f345, %f345;
	fma.rn.f32 	%f347, %f346, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f348, %f346, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f349, %f347, %f346, 0fC0A55DF6;
	fma.rn.f32 	%f350, %f348, %f346, 0f4081E0CF;
	fma.rn.f32 	%f351, %f346, %f345, 0f00000000;
	fma.rn.f32 	%f352, %f350, %f346, 0fC09DE9E6;
	fma.rn.f32 	%f353, %f349, %f351, 0f00000000;
	fma.rn.f32 	%f354, %f352, %f346, 0f3F800000;
	fma.rn.f32 	%f355, %f345, 0f40490FDB, %f353;
	and.b32  	%r394, %r393, 1;
	setp.eq.b32 	%p105, %r394, 1;
	selp.f32 	%f356, %f354, %f355, %p105;
	selp.f32 	%f357, %f355, %f354, %p105;
	and.b32  	%r395, %r393, 2;
	setp.eq.s32 	%p106, %r395, 0;
	neg.f32 	%f358, %f356;
	selp.f32 	%f359, %f356, %f358, %p106;
	add.s32 	%r396, %r393, 1;
	and.b32  	%r397, %r396, 2;
	setp.eq.s32 	%p107, %r397, 0;
	mov.f32 	%f360, 0f00000000;
	sub.f32 	%f361, %f360, %f357;
	selp.f32 	%f362, %f357, %f361, %p107;
	cvt.rzi.f32.f32 	%f363, %f389;
	setp.eq.f32 	%p108, %f363, %f389;
	mul.f32 	%f364, %f389, 0f00000000;
	selp.f32 	%f392, %f364, %f359, %p108;
	abs.f32 	%f365, %f389;
	setp.gt.f32 	%p109, %f365, 0f4B800000;
	add.f32 	%f366, %f392, 0f3F800000;
	selp.f32 	%f391, %f366, %f362, %p109;
LBB0_65:                                // %L299
	mov.b32 	%r304, %f155;
	mov.b32 	%r307, %f152;
	mov.b32 	%r399, %f385;
	mov.b32 	%r400, %f391;
	mov.b32 	%r405, %f386;
	mov.b32 	%r406, %f392;
	mov.u32 	%r3459, 999999999;
	cvt.u16.u32 	%rs287, %r1;
	@%p65 bra 	LBB0_67;
// %bb.66:                              // %L335
	ld.param.u64 	%rd1, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1];
	and.b16  	%rs17, %rs287, 255;
	mul.lo.s16 	%rs18, %rs17, 171;
	shr.u16 	%rs19, %rs18, 12;
	mul.lo.s16 	%rs20, %rs19, 24;
	sub.s16 	%rs21, %rs287, %rs20;
	cvt.u32.u16 	%r411, %rs21;
	and.b32  	%r412, %r411, 255;
	mad.lo.s32 	%r413, %r412, 24, %r2;
	cvt.u16.u32 	%rs22, %r413;
	mul.hi.u16 	%rs23, %rs22, -7281;
	shr.u16 	%rs24, %rs23, 9;
	mul.lo.s16 	%rs25, %rs24, 576;
	sub.s16 	%rs26, %rs22, %rs25;
	cvt.u32.u16 	%r414, %rs26;
	mul.wide.u32 	%rd21, %r414, 4;
	add.s64 	%rd22, %rd1, %rd21;
	ld.global.u32 	%r415, [%rd22];
	cvt.s32.s16 	%r416, %r415;
	shr.s32 	%r417, %r415, 16;
	mul.lo.s32 	%r418, %r417, 801;
	mad.lo.s32 	%r3459, %r416, 33, %r418;
LBB0_67:                                // %L412
	xor.b32  	%r303, %r307, -2147483648;
	mov.b32 	%r355, %f373;
	mov.b32 	%r356, %f379;
	mov.b32 	%r358, %f374;
	mov.b32 	%r359, %f380;
	xor.b32  	%r402, %r405, -2147483648;
	xor.b32  	%r403, %r406, -2147483648;
	and.b32  	%r47, %r1, 24;
	setp.ne.s32 	%p111, %r47, 24;
	cvt.u16.u32 	%rs288, %r6;
	@%p111 bra 	LBB0_69;
// %bb.68:                              // %L412.L717_crit_edge
	mul.lo.s16 	%rs40, %rs288, 171;
	shr.u16 	%rs41, %rs40, 10;
	mul.lo.s16 	%rs42, %rs41, 6;
	sub.s16 	%rs43, %rs288, %rs42;
	cvt.u32.u16 	%r435, %rs43;
	and.b32  	%r3463, %r435, 255;
	cvt.u16.u32 	%rs44, %r2;
	and.b16  	%rs45, %rs44, 255;
	mul.lo.s16 	%rs46, %rs45, 171;
	shr.u16 	%rs47, %rs46, 10;
	mul.lo.s16 	%rs48, %rs47, -6;
	add.s16 	%rs49, %rs48, %rs44;
	cvt.u32.u16 	%r437, %rs49;
	and.b32  	%r3462, %r437, 255;
	cvt.u32.u16 	%r3461, %rs47;
	mul.wide.u16 	%r3460, %rs47, 6;
	mov.u32 	%r3464, 0;
	mov.u32 	%r3465, %r3464;
	bra.uni 	LBB0_70;
LBB0_69:                                // %L438
	ld.param.u64 	%rd2, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2];
	mul.lo.s32 	%r419, %r5, 144;
	mul.lo.s32 	%r420, %r4, 1152;
	cvt.u16.u32 	%rs27, %r2;
	and.b16  	%rs28, %rs27, 255;
	mul.lo.s16 	%rs29, %rs28, 171;
	shr.u16 	%rs30, %rs29, 10;
	cvt.u32.u16 	%r3461, %rs30;
	mul.wide.u16 	%r3460, %rs30, 6;
	mul.lo.s16 	%rs32, %rs288, 171;
	shr.u16 	%rs33, %rs32, 10;
	mul.lo.s16 	%rs34, %rs33, 6;
	sub.s16 	%rs35, %rs288, %rs34;
	cvt.u32.u16 	%r422, %rs35;
	and.b32  	%r3463, %r422, 255;
	and.b16  	%rs36, %rs35, 255;
	mul.wide.u16 	%r423, %rs36, 24;
	mul.lo.s16 	%rs37, %rs30, -6;
	add.s16 	%rs38, %rs37, %rs27;
	cvt.u32.u16 	%r424, %rs38;
	and.b32  	%r3462, %r424, 255;
	or.b32  	%r425, %r3460, %r420;
	or.b32  	%r426, %r419, %r3462;
	add.s32 	%r427, %r426, %r425;
	add.s32 	%r428, %r427, %r423;
	mul.wide.u32 	%rd23, %r428, 4;
	add.s64 	%rd24, %rd2, %rd23;
	ld.global.u32 	%r3464, [%rd24];
	or.b32  	%r429, %r3460, 576;
	add.s32 	%r430, %r419, %r420;
	or.b32  	%r431, %r430, %r3462;
	add.s32 	%r432, %r431, %r429;
	add.s32 	%r433, %r432, %r423;
	mul.wide.u32 	%rd25, %r433, 4;
	add.s64 	%rd26, %rd2, %rd25;
	ld.global.u32 	%r3465, [%rd26];
LBB0_70:                                // %L717
	ld.param.u64 	%rd3, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3];
	ld.param.u64 	%rd4, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4];
	// begin inline asm
	cvt.rn.f16x2.f32 %r302, %r304, %r303;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r305, %r307, %r304;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r354, %r356, %r355;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r357, %r359, %r358;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r398, %r400, %r399;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r401, %r403, %r402;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r404, %r406, %r405;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r407, %r400, %r399;
	// end inline asm
	mov.u32 	%r3450, 0;
	shl.b32 	%r439, %r1, 3;
	and.b32  	%r440, %r439, 128;
	shl.b32 	%r441, %r4, 8;
	shl.b32 	%r442, %r1, 2;
	and.b32  	%r443, %r442, 60;
	or.b32  	%r444, %r440, %r441;
	or.b32  	%r64, %r444, %r443;
	or.b32  	%r445, %r442, %r444;
	or.b32  	%r65, %r445, 64;
	add.s32 	%r66, %r2, 24;
	and.b16  	%rs1, %rs287, 16;
	shr.u32 	%r446, %r1, 4;
	and.b32  	%r447, %r228, 30;
	or.b32  	%r448, %r447, %r446;
	mul.lo.s32 	%r67, %r448, 257;
	or.b32  	%r449, %r228, %r446;
	or.b32  	%r450, %r449, 32;
	mul.lo.s32 	%r68, %r450, 257;
	shr.u32 	%r451, %r2, 3;
	and.b32  	%r452, %r3, 224;
	and.b16  	%rs51, %rs287, 255;
	mul.lo.s16 	%rs52, %rs51, 171;
	shr.u16 	%rs53, %rs52, 12;
	mul.lo.s16 	%rs54, %rs53, 24;
	sub.s16 	%rs55, %rs287, %rs54;
	cvt.u32.u16 	%r453, %rs55;
	and.b32  	%r69, %r453, 255;
	mad.lo.s32 	%r70, %r451, 257, %r452;
	shr.u32 	%r454, %r66, 3;
	mad.lo.s32 	%r71, %r454, 257, %r452;
	add.s32 	%r455, %r2, 48;
	shr.u32 	%r456, %r455, 3;
	mad.lo.s32 	%r72, %r456, 257, %r452;
	add.s32 	%r457, %r2, 72;
	shr.u32 	%r458, %r457, 3;
	mad.lo.s32 	%r73, %r458, 257, %r452;
	or.b32  	%r459, %r451, 12;
	mad.lo.s32 	%r74, %r459, 257, %r452;
	add.s32 	%r460, %r2, 120;
	shr.u32 	%r461, %r460, 3;
	mad.lo.s32 	%r75, %r461, 257, %r452;
	add.s32 	%r462, %r2, 144;
	shr.u32 	%r463, %r462, 3;
	mad.lo.s32 	%r76, %r463, 257, %r452;
	add.s32 	%r464, %r2, 168;
	shr.u32 	%r465, %r464, 3;
	mad.lo.s32 	%r77, %r465, 257, %r452;
	or.b32  	%r466, %r451, 24;
	mad.lo.s32 	%r78, %r466, 257, %r452;
	add.s32 	%r467, %r2, 216;
	shr.u32 	%r468, %r467, 3;
	mad.lo.s32 	%r79, %r468, 257, %r452;
	add.s32 	%r469, %r2, 240;
	shr.u32 	%r470, %r469, 3;
	mad.lo.s32 	%r80, %r470, 257, %r452;
	add.s32 	%r471, %r2, 264;
	shr.u32 	%r472, %r471, 3;
	mad.lo.s32 	%r81, %r472, 257, %r452;
	or.b32  	%r473, %r451, 36;
	mad.lo.s32 	%r82, %r473, 257, %r452;
	add.s32 	%r474, %r2, 312;
	shr.u32 	%r475, %r474, 3;
	mad.lo.s32 	%r83, %r475, 257, %r452;
	add.s32 	%r476, %r2, 336;
	shr.u32 	%r477, %r476, 3;
	mad.lo.s32 	%r84, %r477, 257, %r452;
	add.s32 	%r478, %r2, 360;
	shr.u32 	%r479, %r478, 3;
	mad.lo.s32 	%r85, %r479, 257, %r452;
	or.b32  	%r480, %r451, 48;
	mad.lo.s32 	%r86, %r480, 257, %r452;
	add.s32 	%r481, %r2, 408;
	shr.u32 	%r482, %r481, 3;
	mad.lo.s32 	%r87, %r482, 257, %r452;
	add.s32 	%r483, %r2, 432;
	shr.u32 	%r484, %r483, 3;
	mad.lo.s32 	%r88, %r484, 257, %r452;
	add.s32 	%r485, %r2, 456;
	shr.u32 	%r486, %r485, 3;
	mad.lo.s32 	%r89, %r486, 257, %r452;
	or.b32  	%r487, %r451, 60;
	mad.lo.s32 	%r90, %r487, 257, %r452;
	add.s32 	%r488, %r2, 504;
	bfe.u32 	%r489, %r488, 3, 6;
	mad.lo.s32 	%r91, %r489, 257, %r452;
	mul.lo.s32 	%r490, %r5, 4806;
	mad.lo.s32 	%r491, %r3462, 33, %r490;
	mad.lo.s32 	%r492, %r3461, 198, %r491;
	mad.lo.s32 	%r493, %r3463, 801, %r492;
	bfe.u32 	%r494, %r1, 1, 1;
	mul.lo.s32 	%r495, %r494, 2056;
	and.b32  	%r496, %r6, 1;
	mul.lo.s32 	%r497, %r496, 1028;
	bfe.u32 	%r498, %r1, 3, 1;
	mul.lo.s32 	%r499, %r498, 514;
	and.b32  	%r500, %r1, 1;
	mul.lo.s32 	%r501, %r500, 4112;
	mul.lo.s32 	%r502, %r446, 257;
	add.s32 	%r503, %r502, %r501;
	add.s32 	%r504, %r503, %r497;
	add.s32 	%r505, %r504, %r495;
	add.s32 	%r506, %r505, %r499;
	add.s32 	%r507, %r506, %r3462;
	add.s32 	%r92, %r507, %r3460;
	mul.wide.u32 	%rd27, %r92, 4;
	mov.u64 	%rd28, shmem;
	add.s64 	%rd6, %rd28, %rd27;
	add.s32 	%r93, %r92, 8256;
	cvt.u64.u32 	%rd29, %r3460;
	cvt.u64.u32 	%rd30, %r3462;
	cvt.u64.u32 	%rd31, %r499;
	cvt.u64.u32 	%rd32, %r495;
	cvt.u64.u32 	%rd33, %r497;
	cvt.u64.u32 	%rd34, %r502;
	cvt.u64.u32 	%rd35, %r501;
	add.s64 	%rd36, %rd35, %rd34;
	add.s64 	%rd37, %rd36, %rd33;
	add.s64 	%rd38, %rd37, %rd32;
	add.s64 	%rd39, %rd38, %rd31;
	add.s64 	%rd40, %rd39, %rd30;
	add.s64 	%rd41, %rd40, %rd29;
	shl.b64 	%rd42, %rd41, 2;
	add.s64 	%rd7, %rd28, %rd42;
	add.s32 	%r94, %r92, 32;
	add.s32 	%r95, %r92, 8288;
	bfe.u32 	%r508, %r2, 1, 1;
	bfe.u32 	%r509, %r2, 2, 1;
	bfe.u32 	%r510, %r2, 3, 1;
	and.b32  	%r511, %r2, 1;
	mul.lo.s32 	%r512, %r511, 4112;
	shr.u32 	%r513, %r2, 4;
	mad.lo.s32 	%r514, %r5, 6, %r512;
	mad.lo.s32 	%r515, %r513, 257, %r514;
	mad.lo.s32 	%r516, %r509, 1028, %r515;
	mad.lo.s32 	%r517, %r508, 2056, %r516;
	mad.lo.s32 	%r518, %r510, 514, %r517;
	add.s32 	%r96, %r518, %r3463;
	mul.wide.u32 	%rd43, %r96, 4;
	add.s64 	%rd8, %rd28, %rd43;
	add.s32 	%r97, %r96, 8256;
	mul.wide.u32 	%rd44, %r97, 4;
	add.s64 	%rd9, %rd28, %rd44;
	add.s32 	%r98, %r96, 32;
	mul.wide.u32 	%rd45, %r98, 4;
	add.s64 	%rd10, %rd28, %rd45;
	add.s32 	%r99, %r96, 8288;
	mul.wide.u32 	%rd46, %r99, 4;
	add.s64 	%rd11, %rd28, %rd46;
	mul.lo.s32 	%r519, %r4, 58752;
	cvt.u16.u32 	%rs56, %r2;
	shl.b16 	%rs57, %rs56, 1;
	and.b16  	%rs58, %rs57, 254;
	mul.lo.s16 	%rs59, %rs58, 171;
	shr.u16 	%rs60, %rs59, 13;
	mul.lo.s16 	%rs61, %rs60, 48;
	sub.s16 	%rs62, %rs57, %rs61;
	cvt.u32.u16 	%r520, %rs62;
	and.b32  	%r521, %r520, 254;
	or.b32  	%r522, %r519, %r69;
	mad.lo.s32 	%r100, %r521, 24, %r522;
	or.b16  	%rs63, %rs57, 1;
	and.b16  	%rs64, %rs63, 255;
	mul.lo.s16 	%rs65, %rs64, 171;
	shr.u16 	%rs66, %rs65, 13;
	mul.lo.s16 	%rs67, %rs66, 48;
	sub.s16 	%rs68, %rs63, %rs67;
	cvt.u32.u16 	%r523, %rs68;
	and.b32  	%r524, %r523, 255;
	mad.lo.s32 	%r101, %r524, 24, %r522;
	mul.wide.u32 	%rd47, %r493, 4;
	add.s64 	%rd12, %rd28, %rd47;
	setp.gt.u32 	%p112, %r2, 7;
	setp.eq.s16 	%p113, %rs1, 0;
	setp.lt.u32 	%p115, %r1, 24;
	mov.u32 	%r3466, %r3450;
	mov.u32 	%r3497, %r3450;
	mov.u32 	%r3498, %r3450;
	mov.u32 	%r3499, %r3450;
	mov.u32 	%r3500, %r3450;
	bra.uni 	LBB0_71;
LBB0_92:                                // %L31358
                                        //   in Loop: Header=BB0_71 Depth=1
	add.s32 	%r217, %r3466, 48;
	setp.ne.s32 	%p141, %r3466, 2016;
	mov.u32 	%r3466, %r217;
	@%p141 bra 	LBB0_71;
	bra.uni 	LBB0_93;
LBB0_71:                                // %L720
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_73 Depth 2
                                        //     Child Loop BB0_83 Depth 2
	mul.hi.u32 	%r718, %r3466, -1431655765;
	shr.u32 	%r719, %r718, 5;
	mul.lo.s32 	%r107, %r719, 48;
	add.s32 	%r720, %r107, %r2;
	cvt.u16.u32 	%rs69, %r720;
	mul.hi.s16 	%rs70, %rs69, 16257;
	shr.u16 	%rs71, %rs70, 15;
	shr.s16 	%rs72, %rs70, 9;
	add.s16 	%rs73, %rs72, %rs71;
	mul.lo.s16 	%rs74, %rs73, 2064;
	sub.s16 	%rs75, %rs69, %rs74;
	cvt.u32.u16 	%r721, %rs75;
	shl.b32 	%r722, %r721, 16;
	or.b32  	%r723, %r64, %r722;
	mul.wide.s32 	%rd48, %r723, 4;
	add.s64 	%rd49, %rd3, %rd48;
	ld.global.v4.u32 	{%r724, %r725, %r726, %r727}, [%rd49];
	or.b32  	%r728, %r65, %r722;
	mul.wide.s32 	%rd50, %r728, 4;
	add.s64 	%rd51, %rd3, %rd50;
	ld.global.v4.u32 	{%r729, %r730, %r731, %r732}, [%rd51];
	add.s32 	%r733, %r66, %r107;
	cvt.u16.u32 	%rs76, %r733;
	mul.hi.s16 	%rs77, %rs76, 16257;
	shr.u16 	%rs78, %rs77, 15;
	shr.s16 	%rs79, %rs77, 9;
	add.s16 	%rs80, %rs79, %rs78;
	mul.lo.s16 	%rs81, %rs80, 2064;
	sub.s16 	%rs82, %rs76, %rs81;
	cvt.u32.u16 	%r734, %rs82;
	shl.b32 	%r735, %r734, 16;
	or.b32  	%r736, %r64, %r735;
	mul.wide.s32 	%rd52, %r736, 4;
	add.s64 	%rd53, %rd3, %rd52;
	ld.global.v4.u32 	{%r737, %r738, %r739, %r740}, [%rd53];
	or.b32  	%r741, %r65, %r735;
	mul.wide.s32 	%rd54, %r741, 4;
	add.s64 	%rd55, %rd3, %rd54;
	ld.global.v4.u32 	{%r742, %r743, %r744, %r745}, [%rd55];
	selp.b32 	%r746, %r726, %r724, %p113;
	shfl.sync.bfly.b32	%r747, %r746, 16, 31, -1;
	selp.b32 	%r527, %r724, %r747, %p113;
	selp.b32 	%r532, %r747, %r726, %p113;
	selp.b32 	%r748, %r727, %r725, %p113;
	shfl.sync.bfly.b32	%r749, %r748, 16, 31, -1;
	selp.b32 	%r535, %r725, %r749, %p113;
	selp.b32 	%r540, %r749, %r727, %p113;
	selp.b32 	%r750, %r731, %r729, %p113;
	shfl.sync.bfly.b32	%r751, %r750, 16, 31, -1;
	selp.b32 	%r543, %r729, %r751, %p113;
	selp.b32 	%r548, %r751, %r731, %p113;
	selp.b32 	%r752, %r732, %r730, %p113;
	shfl.sync.bfly.b32	%r753, %r752, 16, 31, -1;
	selp.b32 	%r551, %r730, %r753, %p113;
	selp.b32 	%r556, %r753, %r732, %p113;
	selp.b32 	%r754, %r739, %r737, %p113;
	shfl.sync.bfly.b32	%r755, %r754, 16, 31, -1;
	selp.b32 	%r559, %r737, %r755, %p113;
	selp.b32 	%r564, %r755, %r739, %p113;
	selp.b32 	%r756, %r740, %r738, %p113;
	shfl.sync.bfly.b32	%r757, %r756, 16, 31, -1;
	selp.b32 	%r567, %r738, %r757, %p113;
	selp.b32 	%r572, %r757, %r740, %p113;
	selp.b32 	%r758, %r744, %r742, %p113;
	shfl.sync.bfly.b32	%r759, %r758, 16, 31, -1;
	selp.b32 	%r575, %r742, %r759, %p113;
	selp.b32 	%r580, %r759, %r744, %p113;
	selp.b32 	%r760, %r745, %r743, %p113;
	shfl.sync.bfly.b32	%r761, %r760, 16, 31, -1;
	selp.b32 	%r583, %r743, %r761, %p113;
	selp.b32 	%r588, %r761, %r745, %p113;
	shl.b32 	%r528, %r532, 4;
	mov.u32 	%r526, 252645135;
	// begin inline asm
	lop3.b32 %r590, %r526, %r527, %r528, 202;
	// end inline asm
	shr.u32 	%r531, %r527, 4;
	// begin inline asm
	lop3.b32 %r606, %r526, %r531, %r532, 202;
	// end inline asm
	shl.b32 	%r536, %r540, 4;
	// begin inline asm
	lop3.b32 %r598, %r526, %r535, %r536, 202;
	// end inline asm
	shr.u32 	%r539, %r535, 4;
	// begin inline asm
	lop3.b32 %r614, %r526, %r539, %r540, 202;
	// end inline asm
	shl.b32 	%r544, %r548, 4;
	// begin inline asm
	lop3.b32 %r622, %r526, %r543, %r544, 202;
	// end inline asm
	shr.u32 	%r547, %r543, 4;
	// begin inline asm
	lop3.b32 %r638, %r526, %r547, %r548, 202;
	// end inline asm
	shl.b32 	%r552, %r556, 4;
	// begin inline asm
	lop3.b32 %r630, %r526, %r551, %r552, 202;
	// end inline asm
	shr.u32 	%r555, %r551, 4;
	// begin inline asm
	lop3.b32 %r646, %r526, %r555, %r556, 202;
	// end inline asm
	shl.b32 	%r560, %r564, 4;
	// begin inline asm
	lop3.b32 %r591, %r526, %r559, %r560, 202;
	// end inline asm
	shr.u32 	%r563, %r559, 4;
	// begin inline asm
	lop3.b32 %r607, %r526, %r563, %r564, 202;
	// end inline asm
	shl.b32 	%r568, %r572, 4;
	// begin inline asm
	lop3.b32 %r599, %r526, %r567, %r568, 202;
	// end inline asm
	shr.u32 	%r571, %r567, 4;
	// begin inline asm
	lop3.b32 %r615, %r526, %r571, %r572, 202;
	// end inline asm
	shl.b32 	%r576, %r580, 4;
	// begin inline asm
	lop3.b32 %r623, %r526, %r575, %r576, 202;
	// end inline asm
	shr.u32 	%r579, %r575, 4;
	// begin inline asm
	lop3.b32 %r639, %r526, %r579, %r580, 202;
	// end inline asm
	shl.b32 	%r584, %r588, 4;
	// begin inline asm
	lop3.b32 %r631, %r526, %r583, %r584, 202;
	// end inline asm
	shr.u32 	%r587, %r583, 4;
	// begin inline asm
	lop3.b32 %r647, %r526, %r587, %r588, 202;
	// end inline asm
	mov.u32 	%r592, 25152;
	// begin inline asm
	prmt.b32 %r654, %r590, %r591, %r592;
	// end inline asm
	mov.u32 	%r596, 29521;
	// begin inline asm
	prmt.b32 %r686, %r590, %r591, %r596;
	// end inline asm
	// begin inline asm
	prmt.b32 %r662, %r598, %r599, %r592;
	// end inline asm
	// begin inline asm
	prmt.b32 %r694, %r598, %r599, %r596;
	// end inline asm
	// begin inline asm
	prmt.b32 %r655, %r606, %r607, %r592;
	// end inline asm
	// begin inline asm
	prmt.b32 %r687, %r606, %r607, %r596;
	// end inline asm
	// begin inline asm
	prmt.b32 %r663, %r614, %r615, %r592;
	// end inline asm
	// begin inline asm
	prmt.b32 %r695, %r614, %r615, %r596;
	// end inline asm
	// begin inline asm
	prmt.b32 %r670, %r622, %r623, %r592;
	// end inline asm
	// begin inline asm
	prmt.b32 %r702, %r622, %r623, %r596;
	// end inline asm
	// begin inline asm
	prmt.b32 %r678, %r630, %r631, %r592;
	// end inline asm
	// begin inline asm
	prmt.b32 %r710, %r630, %r631, %r596;
	// end inline asm
	// begin inline asm
	prmt.b32 %r671, %r638, %r639, %r592;
	// end inline asm
	// begin inline asm
	prmt.b32 %r703, %r638, %r639, %r596;
	// end inline asm
	// begin inline asm
	prmt.b32 %r679, %r646, %r647, %r592;
	// end inline asm
	// begin inline asm
	prmt.b32 %r711, %r646, %r647, %r596;
	// end inline asm
	mov.u32 	%r712, 21520;
	// begin inline asm
	prmt.b32 %r653, %r654, %r655, %r712;
	// end inline asm
	mov.u32 	%r716, 30258;
	// begin inline asm
	prmt.b32 %r657, %r654, %r655, %r716;
	// end inline asm
	// begin inline asm
	prmt.b32 %r661, %r662, %r663, %r712;
	// end inline asm
	// begin inline asm
	prmt.b32 %r665, %r662, %r663, %r716;
	// end inline asm
	// begin inline asm
	prmt.b32 %r669, %r670, %r671, %r712;
	// end inline asm
	// begin inline asm
	prmt.b32 %r673, %r670, %r671, %r716;
	// end inline asm
	// begin inline asm
	prmt.b32 %r677, %r678, %r679, %r712;
	// end inline asm
	// begin inline asm
	prmt.b32 %r681, %r678, %r679, %r716;
	// end inline asm
	// begin inline asm
	prmt.b32 %r685, %r686, %r687, %r712;
	// end inline asm
	// begin inline asm
	prmt.b32 %r689, %r686, %r687, %r716;
	// end inline asm
	// begin inline asm
	prmt.b32 %r693, %r694, %r695, %r712;
	// end inline asm
	// begin inline asm
	prmt.b32 %r697, %r694, %r695, %r716;
	// end inline asm
	// begin inline asm
	prmt.b32 %r701, %r702, %r703, %r712;
	// end inline asm
	// begin inline asm
	prmt.b32 %r705, %r702, %r703, %r716;
	// end inline asm
	// begin inline asm
	prmt.b32 %r709, %r710, %r711, %r712;
	// end inline asm
	// begin inline asm
	prmt.b32 %r713, %r710, %r711, %r716;
	// end inline asm
	mul.hi.s16 	%rs83, %rs69, 10923;
	shr.u16 	%rs84, %rs83, 15;
	shr.s16 	%rs85, %rs83, 2;
	add.s16 	%rs86, %rs85, %rs84;
	mul.lo.s16 	%rs87, %rs86, 24;
	sub.s16 	%rs88, %rs69, %rs87;
	cvt.s32.s16 	%r762, %rs88;
	add.s32 	%r763, %r67, %r762;
	mul.wide.s32 	%rd56, %r763, 4;
	add.s64 	%rd58, %rd28, %rd56;
	st.shared.u32 	[%rd58], %r653;
	st.shared.u32 	[%rd58+512], %r661;
	st.shared.u32 	[%rd58+256], %r657;
	st.shared.u32 	[%rd58+768], %r665;
	add.s32 	%r764, %r68, %r762;
	mul.wide.s32 	%rd59, %r764, 4;
	add.s64 	%rd60, %rd28, %rd59;
	st.shared.u32 	[%rd60], %r669;
	st.shared.u32 	[%rd60+512], %r677;
	st.shared.u32 	[%rd60+256], %r673;
	st.shared.u32 	[%rd60+768], %r681;
	st.shared.u32 	[%rd58+128], %r685;
	st.shared.u32 	[%rd58+640], %r693;
	st.shared.u32 	[%rd58+384], %r689;
	st.shared.u32 	[%rd58+896], %r697;
	st.shared.u32 	[%rd60+128], %r701;
	st.shared.u32 	[%rd60+640], %r709;
	st.shared.u32 	[%rd60+384], %r705;
	st.shared.u32 	[%rd60+896], %r713;
	bar.sync 	0;
	add.s32 	%r765, %r107, %r69;
	cvt.u16.u32 	%rs89, %r765;
	mul.hi.s16 	%rs90, %rs89, 10923;
	shr.u16 	%rs91, %rs90, 15;
	shr.s16 	%rs92, %rs90, 2;
	add.s16 	%rs93, %rs92, %rs91;
	mul.lo.s16 	%rs94, %rs93, 24;
	sub.s16 	%rs95, %rs89, %rs94;
	cvt.s32.s16 	%r766, %rs95;
	add.s32 	%r767, %r70, %r766;
	mul.wide.s32 	%rd61, %r767, 4;
	add.s64 	%rd62, %rd28, %rd61;
	ld.shared.u32 	%r768, [%rd62];
	add.s32 	%r769, %r71, %r766;
	mul.wide.u32 	%rd63, %r769, 4;
	add.s64 	%rd64, %rd28, %rd63;
	ld.shared.u32 	%r770, [%rd64];
	add.s32 	%r771, %r72, %r766;
	mul.wide.u32 	%rd65, %r771, 4;
	add.s64 	%rd66, %rd28, %rd65;
	ld.shared.u32 	%r772, [%rd66];
	add.s32 	%r773, %r73, %r766;
	mul.wide.u32 	%rd67, %r773, 4;
	add.s64 	%rd68, %rd28, %rd67;
	ld.shared.u32 	%r774, [%rd68];
	add.s32 	%r775, %r74, %r766;
	mul.wide.s32 	%rd69, %r775, 4;
	add.s64 	%rd70, %rd28, %rd69;
	ld.shared.u32 	%r776, [%rd70];
	add.s32 	%r777, %r75, %r766;
	mul.wide.u32 	%rd71, %r777, 4;
	add.s64 	%rd72, %rd28, %rd71;
	ld.shared.u32 	%r778, [%rd72];
	add.s32 	%r779, %r76, %r766;
	mul.wide.u32 	%rd73, %r779, 4;
	add.s64 	%rd74, %rd28, %rd73;
	ld.shared.u32 	%r780, [%rd74];
	add.s32 	%r781, %r77, %r766;
	mul.wide.u32 	%rd75, %r781, 4;
	add.s64 	%rd76, %rd28, %rd75;
	ld.shared.u32 	%r782, [%rd76];
	add.s32 	%r783, %r78, %r766;
	mul.wide.s32 	%rd77, %r783, 4;
	add.s64 	%rd78, %rd28, %rd77;
	ld.shared.u32 	%r784, [%rd78];
	add.s32 	%r785, %r79, %r766;
	mul.wide.u32 	%rd79, %r785, 4;
	add.s64 	%rd80, %rd28, %rd79;
	ld.shared.u32 	%r786, [%rd80];
	add.s32 	%r787, %r80, %r766;
	mul.wide.u32 	%rd81, %r787, 4;
	add.s64 	%rd82, %rd28, %rd81;
	ld.shared.u32 	%r788, [%rd82];
	add.s32 	%r789, %r81, %r766;
	mul.wide.u32 	%rd83, %r789, 4;
	add.s64 	%rd84, %rd28, %rd83;
	ld.shared.u32 	%r790, [%rd84];
	add.s32 	%r791, %r82, %r766;
	mul.wide.s32 	%rd85, %r791, 4;
	add.s64 	%rd86, %rd28, %rd85;
	ld.shared.u32 	%r792, [%rd86];
	add.s32 	%r793, %r83, %r766;
	mul.wide.u32 	%rd87, %r793, 4;
	add.s64 	%rd88, %rd28, %rd87;
	ld.shared.u32 	%r794, [%rd88];
	add.s32 	%r795, %r84, %r766;
	mul.wide.u32 	%rd89, %r795, 4;
	add.s64 	%rd90, %rd28, %rd89;
	ld.shared.u32 	%r796, [%rd90];
	add.s32 	%r797, %r85, %r766;
	mul.wide.u32 	%rd91, %r797, 4;
	add.s64 	%rd92, %rd28, %rd91;
	ld.shared.u32 	%r798, [%rd92];
	add.s32 	%r799, %r86, %r766;
	mul.wide.s32 	%rd93, %r799, 4;
	add.s64 	%rd94, %rd28, %rd93;
	ld.shared.u32 	%r800, [%rd94];
	add.s32 	%r801, %r87, %r766;
	mul.wide.u32 	%rd95, %r801, 4;
	add.s64 	%rd96, %rd28, %rd95;
	ld.shared.u32 	%r802, [%rd96];
	add.s32 	%r803, %r88, %r766;
	mul.wide.u32 	%rd97, %r803, 4;
	add.s64 	%rd98, %rd28, %rd97;
	ld.shared.u32 	%r804, [%rd98];
	add.s32 	%r805, %r89, %r766;
	mul.wide.u32 	%rd99, %r805, 4;
	add.s64 	%rd100, %rd28, %rd99;
	ld.shared.u32 	%r806, [%rd100];
	add.s32 	%r807, %r90, %r766;
	mul.wide.s32 	%rd101, %r807, 4;
	add.s64 	%rd102, %rd28, %rd101;
	ld.shared.u32 	%r808, [%rd102];
	add.s32 	%r809, %r91, %r766;
	mul.wide.s32 	%rd103, %r809, 4;
	add.s64 	%rd104, %rd28, %rd103;
	ld.shared.u32 	%r810, [%rd104];
	bar.sync 	0;
	shfl.sync.idx.b32	%r811, %r3459, 0, 31, -1;
	shfl.sync.idx.b32	%r812, %r3459, 1, 31, -1;
	shfl.sync.idx.b32	%r813, %r3459, 2, 31, -1;
	shfl.sync.idx.b32	%r814, %r3459, 3, 31, -1;
	shfl.sync.idx.b32	%r815, %r3459, 4, 31, -1;
	shfl.sync.idx.b32	%r816, %r3459, 5, 31, -1;
	shfl.sync.idx.b32	%r817, %r3459, 6, 31, -1;
	shfl.sync.idx.b32	%r818, %r3459, 7, 31, -1;
	shfl.sync.idx.b32	%r819, %r3459, 8, 31, -1;
	shfl.sync.idx.b32	%r820, %r3459, 9, 31, -1;
	shfl.sync.idx.b32	%r821, %r3459, 10, 31, -1;
	shfl.sync.idx.b32	%r822, %r3459, 11, 31, -1;
	shfl.sync.idx.b32	%r823, %r3459, 12, 31, -1;
	shfl.sync.idx.b32	%r824, %r3459, 13, 31, -1;
	shfl.sync.idx.b32	%r825, %r3459, 14, 31, -1;
	shfl.sync.idx.b32	%r826, %r3459, 15, 31, -1;
	shfl.sync.idx.b32	%r827, %r3459, 16, 31, -1;
	shfl.sync.idx.b32	%r828, %r3459, 17, 31, -1;
	shfl.sync.idx.b32	%r829, %r3459, 18, 31, -1;
	shfl.sync.idx.b32	%r830, %r3459, 19, 31, -1;
	shfl.sync.idx.b32	%r831, %r3459, 20, 31, -1;
	shfl.sync.idx.b32	%r832, %r3459, 21, 31, -1;
	shfl.sync.idx.b32	%r833, %r3459, 22, 31, -1;
	shfl.sync.idx.b32	%r834, %r3459, 23, 31, -1;
	add.s32 	%r835, %r811, %r766;
	mul.wide.s32 	%rd105, %r835, 4;
	add.s64 	%rd106, %rd28, %rd105;
	st.shared.u32 	[%rd106], %r768;
	add.s32 	%r836, %r812, %r766;
	mul.wide.s32 	%rd107, %r836, 4;
	add.s64 	%rd108, %rd28, %rd107;
	st.shared.u32 	[%rd108], %r770;
	add.s32 	%r837, %r813, %r766;
	mul.wide.s32 	%rd109, %r837, 4;
	add.s64 	%rd110, %rd28, %rd109;
	st.shared.u32 	[%rd110], %r772;
	add.s32 	%r838, %r814, %r766;
	mul.wide.s32 	%rd111, %r838, 4;
	add.s64 	%rd112, %rd28, %rd111;
	st.shared.u32 	[%rd112], %r774;
	add.s32 	%r839, %r815, %r766;
	mul.wide.s32 	%rd113, %r839, 4;
	add.s64 	%rd114, %rd28, %rd113;
	st.shared.u32 	[%rd114], %r776;
	add.s32 	%r840, %r816, %r766;
	mul.wide.s32 	%rd115, %r840, 4;
	add.s64 	%rd116, %rd28, %rd115;
	st.shared.u32 	[%rd116], %r778;
	add.s32 	%r841, %r817, %r766;
	mul.wide.s32 	%rd117, %r841, 4;
	add.s64 	%rd118, %rd28, %rd117;
	st.shared.u32 	[%rd118], %r780;
	add.s32 	%r842, %r818, %r766;
	mul.wide.s32 	%rd119, %r842, 4;
	add.s64 	%rd120, %rd28, %rd119;
	st.shared.u32 	[%rd120], %r782;
	add.s32 	%r843, %r819, %r766;
	mul.wide.s32 	%rd121, %r843, 4;
	add.s64 	%rd122, %rd28, %rd121;
	st.shared.u32 	[%rd122], %r784;
	add.s32 	%r844, %r820, %r766;
	mul.wide.s32 	%rd123, %r844, 4;
	add.s64 	%rd124, %rd28, %rd123;
	st.shared.u32 	[%rd124], %r786;
	add.s32 	%r845, %r821, %r766;
	mul.wide.s32 	%rd125, %r845, 4;
	add.s64 	%rd126, %rd28, %rd125;
	st.shared.u32 	[%rd126], %r788;
	add.s32 	%r846, %r822, %r766;
	mul.wide.s32 	%rd127, %r846, 4;
	add.s64 	%rd128, %rd28, %rd127;
	st.shared.u32 	[%rd128], %r790;
	add.s32 	%r847, %r823, %r766;
	mul.wide.s32 	%rd129, %r847, 4;
	add.s64 	%rd130, %rd28, %rd129;
	st.shared.u32 	[%rd130], %r792;
	add.s32 	%r848, %r824, %r766;
	mul.wide.s32 	%rd131, %r848, 4;
	add.s64 	%rd132, %rd28, %rd131;
	st.shared.u32 	[%rd132], %r794;
	add.s32 	%r849, %r825, %r766;
	mul.wide.s32 	%rd133, %r849, 4;
	add.s64 	%rd134, %rd28, %rd133;
	st.shared.u32 	[%rd134], %r796;
	add.s32 	%r850, %r826, %r766;
	mul.wide.s32 	%rd135, %r850, 4;
	add.s64 	%rd136, %rd28, %rd135;
	st.shared.u32 	[%rd136], %r798;
	add.s32 	%r851, %r827, %r766;
	mul.wide.s32 	%rd137, %r851, 4;
	add.s64 	%rd138, %rd28, %rd137;
	st.shared.u32 	[%rd138], %r800;
	add.s32 	%r852, %r828, %r766;
	mul.wide.s32 	%rd139, %r852, 4;
	add.s64 	%rd140, %rd28, %rd139;
	st.shared.u32 	[%rd140], %r802;
	add.s32 	%r853, %r829, %r766;
	mul.wide.s32 	%rd141, %r853, 4;
	add.s64 	%rd142, %rd28, %rd141;
	st.shared.u32 	[%rd142], %r804;
	add.s32 	%r854, %r830, %r766;
	mul.wide.s32 	%rd143, %r854, 4;
	add.s64 	%rd144, %rd28, %rd143;
	st.shared.u32 	[%rd144], %r806;
	add.s32 	%r855, %r831, %r766;
	mul.wide.s32 	%rd145, %r855, 4;
	add.s64 	%rd146, %rd28, %rd145;
	st.shared.u32 	[%rd146], %r808;
	selp.b32 	%r856, 0, %r810, %p112;
	add.s32 	%r857, %r832, %r766;
	mul.wide.s32 	%rd147, %r857, 4;
	add.s64 	%rd148, %rd28, %rd147;
	st.shared.u32 	[%rd148], %r856;
	add.s32 	%r858, %r833, %r766;
	mul.wide.s32 	%rd149, %r858, 4;
	add.s64 	%rd150, %rd28, %rd149;
	st.shared.u32 	[%rd150], %r3450;
	add.s32 	%r859, %r834, %r766;
	mul.wide.s32 	%rd151, %r859, 4;
	add.s64 	%rd152, %rd28, %rd151;
	st.shared.u32 	[%rd152], %r3450;
	bar.sync 	0;
	mov.u32 	%r3471, %r3450;
	mov.u32 	%r3472, %r3450;
	mov.u32 	%r3473, %r3450;
	mov.u32 	%r3474, %r3450;
	mov.u32 	%r3475, %r3450;
	mov.u32 	%r3476, %r3450;
	mov.u32 	%r3477, %r3450;
	mov.u32 	%r3478, %r3450;
	mov.u32 	%r3479, %r3450;
	mov.u32 	%r3480, %r3450;
	mov.u32 	%r3481, %r3450;
	mov.u32 	%r3482, %r3450;
	mov.u32 	%r3483, %r3450;
	mov.u32 	%r3484, %r3450;
	mov.u32 	%r3485, %r3450;
	mov.u32 	%r3486, %r3450;
	mov.u32 	%r3487, %r3450;
	mov.u32 	%r3488, %r3450;
	mov.u32 	%r3489, %r3450;
	mov.u32 	%r3490, %r3450;
	mov.u32 	%r3491, %r3450;
	mov.u32 	%r3492, %r3450;
	mov.u32 	%r3493, %r3450;
	mov.u32 	%r3494, %r3450;
	@%p111 bra 	LBB0_109;
	bra.uni 	LBB0_72;
LBB0_109:                               // %oksrem3284
                                        //   in Loop: Header=BB0_71 Depth=1
	cvt.u16.u32 	%rs96, %r107;
	mul.hi.s16 	%rs97, %rs96, 10923;
	shr.u16 	%rs98, %rs97, 15;
	shr.s16 	%rs99, %rs97, 2;
	add.s16 	%rs100, %rs99, %rs98;
	mul.lo.s16 	%rs101, %rs100, 24;
	sub.s16 	%rs102, %rs96, %rs101;
	cvt.s32.s16 	%r860, %rs102;
	mul.wide.s32 	%rd153, %r860, 4;
	add.s64 	%rd154, %rd12, %rd153;
	ld.shared.u32 	%r3471, [%rd154];
	ld.shared.u32 	%r3472, [%rd12+4];
	ld.shared.u32 	%r3473, [%rd12+8];
	ld.shared.u32 	%r3474, [%rd12+12];
	ld.shared.u32 	%r3475, [%rd12+16];
	ld.shared.u32 	%r3476, [%rd12+20];
	ld.shared.u32 	%r3477, [%rd12+24];
	ld.shared.u32 	%r3478, [%rd12+28];
	ld.shared.u32 	%r3479, [%rd12+32];
	ld.shared.u32 	%r3480, [%rd12+36];
	ld.shared.u32 	%r3481, [%rd12+40];
	ld.shared.u32 	%r3482, [%rd12+44];
	ld.shared.u32 	%r3483, [%rd12+48];
	ld.shared.u32 	%r3484, [%rd12+52];
	ld.shared.u32 	%r3485, [%rd12+56];
	ld.shared.u32 	%r3486, [%rd12+60];
	add.s16 	%rs103, %rs96, 16;
	mul.hi.s16 	%rs104, %rs103, 10923;
	shr.u16 	%rs105, %rs104, 15;
	shr.s16 	%rs106, %rs104, 2;
	add.s16 	%rs107, %rs106, %rs105;
	mul.lo.s16 	%rs108, %rs107, 24;
	sub.s16 	%rs109, %rs103, %rs108;
	cvt.s32.s16 	%r861, %rs109;
	mul.wide.s32 	%rd155, %r861, 4;
	add.s64 	%rd156, %rd12, %rd155;
	ld.shared.u32 	%r3487, [%rd156];
	add.s16 	%rs110, %rs96, 17;
	mul.hi.s16 	%rs111, %rs110, 10923;
	shr.u16 	%rs112, %rs111, 15;
	shr.s16 	%rs113, %rs111, 2;
	add.s16 	%rs114, %rs113, %rs112;
	mul.lo.s16 	%rs115, %rs114, 24;
	sub.s16 	%rs116, %rs110, %rs115;
	cvt.s32.s16 	%r862, %rs116;
	mul.wide.s32 	%rd157, %r862, 4;
	add.s64 	%rd158, %rd12, %rd157;
	ld.shared.u32 	%r3488, [%rd158];
	add.s16 	%rs117, %rs96, 18;
	mul.hi.s16 	%rs118, %rs117, 10923;
	shr.u16 	%rs119, %rs118, 15;
	shr.s16 	%rs120, %rs118, 2;
	add.s16 	%rs121, %rs120, %rs119;
	mul.lo.s16 	%rs122, %rs121, 24;
	sub.s16 	%rs123, %rs117, %rs122;
	cvt.s32.s16 	%r863, %rs123;
	mul.wide.s32 	%rd159, %r863, 4;
	add.s64 	%rd160, %rd12, %rd159;
	ld.shared.u32 	%r3489, [%rd160];
	add.s16 	%rs124, %rs96, 19;
	mul.hi.s16 	%rs125, %rs124, 10923;
	shr.u16 	%rs126, %rs125, 15;
	shr.s16 	%rs127, %rs125, 2;
	add.s16 	%rs128, %rs127, %rs126;
	mul.lo.s16 	%rs129, %rs128, 24;
	sub.s16 	%rs130, %rs124, %rs129;
	cvt.s32.s16 	%r864, %rs130;
	mul.wide.s32 	%rd161, %r864, 4;
	add.s64 	%rd162, %rd12, %rd161;
	ld.shared.u32 	%r3490, [%rd162];
	add.s16 	%rs131, %rs96, 20;
	mul.hi.s16 	%rs132, %rs131, 10923;
	shr.u16 	%rs133, %rs132, 15;
	shr.s16 	%rs134, %rs132, 2;
	add.s16 	%rs135, %rs134, %rs133;
	mul.lo.s16 	%rs136, %rs135, 24;
	sub.s16 	%rs137, %rs131, %rs136;
	cvt.s32.s16 	%r865, %rs137;
	mul.wide.s32 	%rd163, %r865, 4;
	add.s64 	%rd164, %rd12, %rd163;
	ld.shared.u32 	%r3491, [%rd164];
	add.s16 	%rs138, %rs96, 21;
	mul.hi.s16 	%rs139, %rs138, 10923;
	shr.u16 	%rs140, %rs139, 15;
	shr.s16 	%rs141, %rs139, 2;
	add.s16 	%rs142, %rs141, %rs140;
	mul.lo.s16 	%rs143, %rs142, 24;
	sub.s16 	%rs144, %rs138, %rs143;
	cvt.s32.s16 	%r866, %rs144;
	mul.wide.s32 	%rd165, %r866, 4;
	add.s64 	%rd166, %rd12, %rd165;
	ld.shared.u32 	%r3492, [%rd166];
	add.s16 	%rs145, %rs96, 22;
	mul.hi.s16 	%rs146, %rs145, 10923;
	shr.u16 	%rs147, %rs146, 15;
	shr.s16 	%rs148, %rs146, 2;
	add.s16 	%rs149, %rs148, %rs147;
	mul.lo.s16 	%rs150, %rs149, 24;
	sub.s16 	%rs151, %rs145, %rs150;
	cvt.s32.s16 	%r867, %rs151;
	mul.wide.s32 	%rd167, %r867, 4;
	add.s64 	%rd168, %rd12, %rd167;
	ld.shared.u32 	%r3493, [%rd168];
	add.s16 	%rs152, %rs96, 23;
	mul.hi.s16 	%rs153, %rs152, 10923;
	shr.u16 	%rs154, %rs153, 15;
	shr.s16 	%rs155, %rs153, 2;
	add.s16 	%rs156, %rs155, %rs154;
	mul.lo.s16 	%rs157, %rs156, 24;
	sub.s16 	%rs158, %rs152, %rs157;
	cvt.s32.s16 	%r868, %rs158;
	mul.wide.s32 	%rd169, %r868, 4;
	add.s64 	%rd170, %rd12, %rd169;
	ld.shared.u32 	%r3494, [%rd170];
LBB0_72:                                // %L11301
                                        //   in Loop: Header=BB0_71 Depth=1
	bar.sync 	0;
	mov.u32 	%r3495, 12;
	mov.u32 	%r3496, %r3450;
	bra.uni 	LBB0_73;
LBB0_80:                                // %L21320
                                        //   in Loop: Header=BB0_73 Depth=2
	add.s32 	%r3498, %r3498, 1;
	mov.u32 	%r3497, 0;
	mov.u32 	%r3499, %r3497;
	mov.u32 	%r3500, %r3497;
LBB0_81:                                // %L21321
                                        //   in Loop: Header=BB0_73 Depth=2
	bar.sync 	0;
	add.s32 	%r3496, %r3496, 1;
	add.s32 	%r3495, %r3495, -4;
	setp.ne.s32 	%p127, %r3495, -12;
	@%p127 bra 	LBB0_73;
	bra.uni 	LBB0_82;
LBB0_73:                                // %L11327
                                        //   Parent Loop BB0_71 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p116, %r3495, 12;
	selp.b32 	%r1408, %r3471, 0, %p116;
	setp.eq.s32 	%p117, %r3495, 8;
	selp.b32 	%r1409, %r3475, %r1408, %p117;
	setp.eq.s32 	%p118, %r3495, 4;
	selp.b32 	%r1410, %r3479, %r1409, %p118;
	setp.eq.s32 	%p119, %r3495, 0;
	selp.b32 	%r1411, %r3483, %r1410, %p119;
	setp.eq.s32 	%p120, %r3495, -4;
	selp.b32 	%r1412, %r3487, %r1411, %p120;
	setp.eq.s32 	%p121, %r3495, -8;
	selp.b32 	%r1413, %r3491, %r1412, %p121;
	selp.b32 	%r1414, %r3472, 0, %p116;
	selp.b32 	%r1415, %r3476, %r1414, %p117;
	selp.b32 	%r1416, %r3480, %r1415, %p118;
	selp.b32 	%r1417, %r3484, %r1416, %p119;
	selp.b32 	%r1418, %r3488, %r1417, %p120;
	selp.b32 	%r1419, %r3492, %r1418, %p121;
	selp.b32 	%r1420, %r3473, 0, %p116;
	selp.b32 	%r1421, %r3477, %r1420, %p117;
	selp.b32 	%r1422, %r3481, %r1421, %p118;
	selp.b32 	%r1423, %r3485, %r1422, %p119;
	selp.b32 	%r1424, %r3489, %r1423, %p120;
	selp.b32 	%r1425, %r3493, %r1424, %p121;
	selp.b32 	%r1426, %r3474, 0, %p116;
	selp.b32 	%r1427, %r3478, %r1426, %p117;
	selp.b32 	%r1428, %r3482, %r1427, %p118;
	selp.b32 	%r1429, %r3486, %r1428, %p119;
	selp.b32 	%r1430, %r3490, %r1429, %p120;
	selp.b32 	%r1431, %r3494, %r1430, %p121;
	mov.u16 	%rs196, 25600;
	// begin inline asm
	mov.b32 %r876, {%rs196, %rs196};
	// end inline asm
	mov.u16 	%rs198, 21504;
	// begin inline asm
	mov.b32 %r887, {%rs198, %rs198};
	// end inline asm
	xor.b32  	%r875, %r1413, -2004318072;
	mov.u32 	%r1012, 983055;
	// begin inline asm
	lop3.b32 %r873, %r1012, %r875, %r876, 202;
	// end inline asm
	mov.u16 	%rs202, 18432;
	// begin inline asm
	mov.b32 %r877, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r878, %r876, %r877;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r881, %r873, %r878;
	// end inline asm
	mov.u32 	%r1023, 15728880;
	// begin inline asm
	lop3.b32 %r884, %r1023, %r875, %r887, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r888, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r889, %r887, %r888;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r892, %r884, %r889;
	// end inline asm
	// begin inline asm
	mov.b32 %r922, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r933, {%rs198, %rs198};
	// end inline asm
	xor.b32  	%r921, %r1419, -2004318072;
	// begin inline asm
	lop3.b32 %r919, %r1012, %r921, %r922, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r923, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r924, %r922, %r923;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r927, %r919, %r924;
	// end inline asm
	// begin inline asm
	lop3.b32 %r930, %r1023, %r921, %r933, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r934, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r935, %r933, %r934;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r938, %r930, %r935;
	// end inline asm
	// begin inline asm
	mov.b32 %r968, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r979, {%rs198, %rs198};
	// end inline asm
	xor.b32  	%r967, %r1425, -2004318072;
	// begin inline asm
	lop3.b32 %r965, %r1012, %r967, %r968, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r969, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r970, %r968, %r969;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r973, %r965, %r970;
	// end inline asm
	// begin inline asm
	lop3.b32 %r976, %r1023, %r967, %r979, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r980, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r981, %r979, %r980;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r984, %r976, %r981;
	// end inline asm
	// begin inline asm
	mov.b32 %r1014, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r1025, {%rs198, %rs198};
	// end inline asm
	xor.b32  	%r1013, %r1431, -2004318072;
	// begin inline asm
	lop3.b32 %r1011, %r1012, %r1013, %r1014, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1015, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1016, %r1014, %r1015;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1019, %r1011, %r1016;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1022, %r1023, %r1013, %r1025, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1026, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1027, %r1025, %r1026;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1030, %r1022, %r1027;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3464;
    mov.b32 {%r2re, %r2im}, %r881;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1055, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3465;
    mov.b32 {%r2re, %r2im}, %r892;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1058, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3464;
    mov.b32 {%r2re, %r2im}, %r927;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1061, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3465;
    mov.b32 {%r2re, %r2im}, %r938;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1064, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3464;
    mov.b32 {%r2re, %r2im}, %r973;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1067, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3465;
    mov.b32 {%r2re, %r2im}, %r984;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1070, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3464;
    mov.b32 {%r2re, %r2im}, %r1019;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1073, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3465;
    mov.b32 {%r2re, %r2im}, %r1030;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1076, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1142, %r1139}, {%r302, %r305}, {%r1055}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1151, %r1148}, {%r302, %r305}, {%r1058}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1160, %r1157}, {%r302, %r305}, {%r1061}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1169, %r1166}, {%r302, %r305}, {%r1064}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1178, %r1175}, {%r302, %r305}, {%r1067}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1187, %r1184}, {%r302, %r305}, {%r1070}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1196, %r1193}, {%r302, %r305}, {%r1073}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1205, %r1202}, {%r302, %r305}, {%r1076}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1135, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1137, %r1135, %r1139;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1140, %r354, %r1142, %r1137;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1144, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1146, %r1144, %r1148;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1149, %r354, %r1151, %r1146;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1153, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1155, %r1153, %r1157;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1158, %r354, %r1160, %r1155;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1162, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1164, %r1162, %r1166;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1167, %r354, %r1169, %r1164;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1171, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1173, %r1171, %r1175;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1176, %r354, %r1178, %r1173;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1180, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1182, %r1180, %r1184;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1185, %r354, %r1187, %r1182;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1189, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1191, %r1189, %r1193;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1194, %r354, %r1196, %r1191;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1198, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1200, %r1198, %r1202;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1203, %r354, %r1205, %r1200;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1207, %r357, %r1142;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1210, %r354, %r1139, %r1207;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1214, %r357, %r1151;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1217, %r354, %r1148, %r1214;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1221, %r357, %r1160;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1224, %r354, %r1157, %r1221;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1228, %r357, %r1169;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1231, %r354, %r1166, %r1228;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1235, %r357, %r1178;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1238, %r354, %r1175, %r1235;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1242, %r357, %r1187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1245, %r354, %r1184, %r1242;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1249, %r357, %r1196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1252, %r354, %r1193, %r1249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1256, %r357, %r1205;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1259, %r354, %r1202, %r1256;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1344, %r1345}, {%r398, %r404, %r401, %r407}, {%r1140, %r1210}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1352, %r1353}, {%r398, %r404, %r401, %r407}, {%r1149, %r1217}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1360, %r1361}, {%r398, %r404, %r401, %r407}, {%r1158, %r1224}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1368, %r1369}, {%r398, %r404, %r401, %r407}, {%r1167, %r1231}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1376, %r1377}, {%r398, %r404, %r401, %r407}, {%r1176, %r1238}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1384, %r1385}, {%r398, %r404, %r401, %r407}, {%r1185, %r1245}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1392, %r1393}, {%r398, %r404, %r401, %r407}, {%r1194, %r1252}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1400, %r1401}, {%r398, %r404, %r401, %r407}, {%r1203, %r1259}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	prmt.b32 %r1343, %r1344, %r1345, %r712;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1347, %r1344, %r1345, %r716;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1351, %r1352, %r1353, %r712;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1355, %r1352, %r1353, %r716;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1359, %r1360, %r1361, %r712;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1363, %r1360, %r1361, %r716;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1367, %r1368, %r1369, %r712;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1371, %r1368, %r1369, %r716;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1375, %r1376, %r1377, %r712;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1379, %r1376, %r1377, %r716;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1383, %r1384, %r1385, %r712;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1387, %r1384, %r1385, %r716;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1391, %r1392, %r1393, %r712;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1395, %r1392, %r1393, %r716;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1399, %r1400, %r1401, %r712;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1403, %r1400, %r1401, %r716;
	// end inline asm
	st.shared.u32 	[%rd6], %r1343;
	st.shared.u32 	[%rd7+33024], %r1347;
	st.shared.u32 	[%rd7+128], %r1351;
	st.shared.u32 	[%rd7+33152], %r1355;
	cvt.u16.u32 	%rs207, %r3496;
	and.b16  	%rs208, %rs207, 255;
	mul.lo.s16 	%rs209, %rs208, 171;
	shr.u16 	%rs210, %rs209, 10;
	mul.lo.s16 	%rs211, %rs210, 6;
	sub.s16 	%rs212, %rs207, %rs211;
	shl.b16 	%rs213, %rs212, 2;
	cvt.u32.u16 	%r1432, %rs213;
	and.b32  	%r1433, %r1432, 252;
	add.s32 	%r1434, %r107, %r1433;
	add.s32 	%r1435, %r1434, 1;
	shr.s32 	%r1436, %r1435, 31;
	shr.u32 	%r1437, %r1436, 30;
	add.s32 	%r1438, %r1435, %r1437;
	and.b32  	%r1439, %r1438, 67108860;
	sub.s32 	%r1440, %r1435, %r1439;
	shl.b32 	%r138, %r1440, 6;
	add.s32 	%r1441, %r92, %r138;
	mul.wide.s32 	%rd171, %r1441, 4;
	add.s64 	%rd173, %rd28, %rd171;
	st.shared.u32 	[%rd173], %r1359;
	add.s32 	%r1442, %r93, %r138;
	mul.wide.u32 	%rd174, %r1442, 4;
	add.s64 	%rd175, %rd28, %rd174;
	st.shared.u32 	[%rd175], %r1363;
	add.s32 	%r1443, %r94, %r138;
	mul.wide.s32 	%rd176, %r1443, 4;
	add.s64 	%rd177, %rd28, %rd176;
	st.shared.u32 	[%rd177], %r1367;
	add.s32 	%r1444, %r95, %r138;
	mul.wide.u32 	%rd178, %r1444, 4;
	add.s64 	%rd179, %rd28, %rd178;
	st.shared.u32 	[%rd179], %r1371;
	add.s32 	%r1445, %r1434, 2;
	shr.s32 	%r1446, %r1445, 31;
	shr.u32 	%r1447, %r1446, 30;
	add.s32 	%r1448, %r1445, %r1447;
	and.b32  	%r1449, %r1448, 67108860;
	sub.s32 	%r1450, %r1445, %r1449;
	shl.b32 	%r139, %r1450, 6;
	add.s32 	%r1451, %r92, %r139;
	mul.wide.s32 	%rd180, %r1451, 4;
	add.s64 	%rd181, %rd28, %rd180;
	st.shared.u32 	[%rd181], %r1375;
	add.s32 	%r1452, %r93, %r139;
	mul.wide.u32 	%rd182, %r1452, 4;
	add.s64 	%rd183, %rd28, %rd182;
	st.shared.u32 	[%rd183], %r1379;
	add.s32 	%r1453, %r94, %r139;
	mul.wide.s32 	%rd184, %r1453, 4;
	add.s64 	%rd185, %rd28, %rd184;
	st.shared.u32 	[%rd185], %r1383;
	add.s32 	%r1454, %r95, %r139;
	mul.wide.u32 	%rd186, %r1454, 4;
	add.s64 	%rd187, %rd28, %rd186;
	st.shared.u32 	[%rd187], %r1387;
	add.s32 	%r1455, %r1434, 3;
	shr.s32 	%r1456, %r1455, 31;
	shr.u32 	%r1457, %r1456, 30;
	add.s32 	%r1458, %r1455, %r1457;
	and.b32  	%r1459, %r1458, 67108860;
	sub.s32 	%r1460, %r1455, %r1459;
	shl.b32 	%r140, %r1460, 6;
	add.s32 	%r1461, %r92, %r140;
	mul.wide.s32 	%rd188, %r1461, 4;
	add.s64 	%rd189, %rd28, %rd188;
	st.shared.u32 	[%rd189], %r1391;
	add.s32 	%r1462, %r93, %r140;
	mul.wide.u32 	%rd190, %r1462, 4;
	add.s64 	%rd191, %rd28, %rd190;
	st.shared.u32 	[%rd191], %r1395;
	add.s32 	%r1463, %r94, %r140;
	mul.wide.s32 	%rd192, %r1463, 4;
	add.s64 	%rd193, %rd28, %rd192;
	st.shared.u32 	[%rd193], %r1399;
	add.s32 	%r1464, %r95, %r140;
	mul.wide.u32 	%rd194, %r1464, 4;
	add.s64 	%rd195, %rd28, %rd194;
	st.shared.u32 	[%rd195], %r1403;
	bar.sync 	0;
	mov.u32 	%r3501, %r3450;
	mov.u32 	%r3502, %r3450;
	mov.u32 	%r3503, %r3450;
	mov.u32 	%r3504, %r3450;
	@%p115 bra 	LBB0_110;
	bra.uni 	LBB0_74;
LBB0_110:                               // %oksrem7103
                                        //   in Loop: Header=BB0_73 Depth=2
	ld.shared.u32 	%r3501, [%rd8];
	ld.shared.u32 	%r3502, [%rd9];
	ld.shared.u32 	%r3503, [%rd10];
	ld.shared.u32 	%r3504, [%rd11];
LBB0_74:                                // %L17202
                                        //   in Loop: Header=BB0_73 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1500, %r1497}, {%r302, %r305}, {%r3501}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1509, %r1506}, {%r302, %r305}, {%r3502}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1518, %r1515}, {%r302, %r305}, {%r3503}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1527, %r1524}, {%r302, %r305}, {%r3504}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1493, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1495, %r1493, %r1497;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1498, %r354, %r1500, %r1495;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1502, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1504, %r1502, %r1506;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1507, %r354, %r1509, %r1504;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1511, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1513, %r1511, %r1515;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1516, %r354, %r1518, %r1513;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1520, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1522, %r1520, %r1524;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1525, %r354, %r1527, %r1522;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1529, %r357, %r1500;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1532, %r354, %r1497, %r1529;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1536, %r357, %r1509;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1539, %r354, %r1506, %r1536;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1543, %r357, %r1518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1546, %r354, %r1515, %r1543;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1550, %r357, %r1527;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1553, %r354, %r1524, %r1550;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1598, %r1601}, {%r398, %r404, %r401, %r407}, {%r1498, %r1532}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1617, %r1620}, {%r398, %r404, %r401, %r407}, {%r1507, %r1539}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1605, %r1609}, {%r398, %r404, %r401, %r407}, {%r1516, %r1546}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1624, %r1628}, {%r398, %r404, %r401, %r407}, {%r1525, %r1553}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1597, %r1598, %r1598;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1600, %r1601, %r1601, %r1597;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1604, %r1605, %r1605, %r1600;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1608, %r1609, %r1609, %r1604;
	// end inline asm
	mov.u32 	%r1632, 442899046;
	// begin inline asm
	fma.rn.f16x2 %r1612, %r1632, %r1608, %r3500;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1616, %r1617, %r1617;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1619, %r1620, %r1620, %r1616;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1623, %r1624, %r1624, %r1619;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1627, %r1628, %r1628, %r1623;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1631, %r1632, %r1627, %r3499;
	// end inline asm
	mov.u32 	%r3505, %r3450;
	mov.u32 	%r3506, %r3450;
	mov.u32 	%r3507, %r3450;
	mov.u32 	%r3508, %r3450;
	@%p115 bra 	LBB0_111;
	bra.uni 	LBB0_75;
LBB0_111:                               // %oksrem7638
                                        //   in Loop: Header=BB0_73 Depth=2
	add.s32 	%r1636, %r96, %r138;
	mul.wide.s32 	%rd196, %r1636, 4;
	add.s64 	%rd198, %rd28, %rd196;
	ld.shared.u32 	%r3505, [%rd198];
	add.s32 	%r1637, %r97, %r138;
	mul.wide.u32 	%rd199, %r1637, 4;
	add.s64 	%rd200, %rd28, %rd199;
	ld.shared.u32 	%r3506, [%rd200];
	add.s32 	%r1638, %r98, %r138;
	mul.wide.s32 	%rd201, %r1638, 4;
	add.s64 	%rd202, %rd28, %rd201;
	ld.shared.u32 	%r3507, [%rd202];
	add.s32 	%r1639, %r99, %r138;
	mul.wide.u32 	%rd203, %r1639, 4;
	add.s64 	%rd204, %rd28, %rd203;
	ld.shared.u32 	%r3508, [%rd204];
LBB0_75:                                // %L18427
                                        //   in Loop: Header=BB0_73 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1675, %r1672}, {%r302, %r305}, {%r3505}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1684, %r1681}, {%r302, %r305}, {%r3506}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1693, %r1690}, {%r302, %r305}, {%r3507}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1702, %r1699}, {%r302, %r305}, {%r3508}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1668, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1670, %r1668, %r1672;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1673, %r354, %r1675, %r1670;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1677, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1679, %r1677, %r1681;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1682, %r354, %r1684, %r1679;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1686, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1688, %r1686, %r1690;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1691, %r354, %r1693, %r1688;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1695, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1697, %r1695, %r1699;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1700, %r354, %r1702, %r1697;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1704, %r357, %r1675;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1707, %r354, %r1672, %r1704;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1711, %r357, %r1684;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1714, %r354, %r1681, %r1711;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1718, %r357, %r1693;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1721, %r354, %r1690, %r1718;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1725, %r357, %r1702;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1728, %r354, %r1699, %r1725;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1773, %r1776}, {%r398, %r404, %r401, %r407}, {%r1673, %r1707}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1792, %r1795}, {%r398, %r404, %r401, %r407}, {%r1682, %r1714}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1780, %r1784}, {%r398, %r404, %r401, %r407}, {%r1691, %r1721}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1799, %r1803}, {%r398, %r404, %r401, %r407}, {%r1700, %r1728}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1772, %r1773, %r1773;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1775, %r1776, %r1776, %r1772;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1779, %r1780, %r1780, %r1775;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1783, %r1784, %r1784, %r1779;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1787, %r1632, %r1783, %r1612;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1791, %r1792, %r1792;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1794, %r1795, %r1795, %r1791;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1798, %r1799, %r1799, %r1794;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1802, %r1803, %r1803, %r1798;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1806, %r1632, %r1802, %r1631;
	// end inline asm
	mov.u32 	%r3509, %r3450;
	mov.u32 	%r3510, %r3450;
	mov.u32 	%r3511, %r3450;
	mov.u32 	%r3512, %r3450;
	@%p115 bra 	LBB0_112;
	bra.uni 	LBB0_76;
LBB0_112:                               // %oksrem8173
                                        //   in Loop: Header=BB0_73 Depth=2
	add.s32 	%r1811, %r96, %r139;
	mul.wide.s32 	%rd205, %r1811, 4;
	add.s64 	%rd207, %rd28, %rd205;
	ld.shared.u32 	%r3509, [%rd207];
	add.s32 	%r1812, %r97, %r139;
	mul.wide.u32 	%rd208, %r1812, 4;
	add.s64 	%rd209, %rd28, %rd208;
	ld.shared.u32 	%r3510, [%rd209];
	add.s32 	%r1813, %r98, %r139;
	mul.wide.s32 	%rd210, %r1813, 4;
	add.s64 	%rd211, %rd28, %rd210;
	ld.shared.u32 	%r3511, [%rd211];
	add.s32 	%r1814, %r99, %r139;
	mul.wide.u32 	%rd212, %r1814, 4;
	add.s64 	%rd213, %rd28, %rd212;
	ld.shared.u32 	%r3512, [%rd213];
LBB0_76:                                // %L19652
                                        //   in Loop: Header=BB0_73 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1850, %r1847}, {%r302, %r305}, {%r3509}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1859, %r1856}, {%r302, %r305}, {%r3510}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1868, %r1865}, {%r302, %r305}, {%r3511}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1877, %r1874}, {%r302, %r305}, {%r3512}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1843, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1845, %r1843, %r1847;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1848, %r354, %r1850, %r1845;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1852, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1854, %r1852, %r1856;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1857, %r354, %r1859, %r1854;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1861, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1863, %r1861, %r1865;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1866, %r354, %r1868, %r1863;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1870, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1872, %r1870, %r1874;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1875, %r354, %r1877, %r1872;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1879, %r357, %r1850;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1882, %r354, %r1847, %r1879;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1886, %r357, %r1859;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1889, %r354, %r1856, %r1886;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1893, %r357, %r1868;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1896, %r354, %r1865, %r1893;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1900, %r357, %r1877;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1903, %r354, %r1874, %r1900;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1948, %r1951}, {%r398, %r404, %r401, %r407}, {%r1848, %r1882}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1967, %r1970}, {%r398, %r404, %r401, %r407}, {%r1857, %r1889}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1955, %r1959}, {%r398, %r404, %r401, %r407}, {%r1866, %r1896}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1974, %r1978}, {%r398, %r404, %r401, %r407}, {%r1875, %r1903}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1947, %r1948, %r1948;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1950, %r1951, %r1951, %r1947;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1954, %r1955, %r1955, %r1950;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1958, %r1959, %r1959, %r1954;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1962, %r1632, %r1958, %r1787;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1966, %r1967, %r1967;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1969, %r1970, %r1970, %r1966;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1973, %r1974, %r1974, %r1969;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1977, %r1978, %r1978, %r1973;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1981, %r1632, %r1977, %r1806;
	// end inline asm
	mov.u32 	%r3513, %r3450;
	mov.u32 	%r3514, %r3450;
	mov.u32 	%r3515, %r3450;
	mov.u32 	%r3516, %r3450;
	@%p115 bra 	LBB0_113;
	bra.uni 	LBB0_77;
LBB0_113:                               // %oksrem8708
                                        //   in Loop: Header=BB0_73 Depth=2
	add.s32 	%r1986, %r96, %r140;
	mul.wide.s32 	%rd214, %r1986, 4;
	add.s64 	%rd216, %rd28, %rd214;
	ld.shared.u32 	%r3513, [%rd216];
	add.s32 	%r1987, %r97, %r140;
	mul.wide.u32 	%rd217, %r1987, 4;
	add.s64 	%rd218, %rd28, %rd217;
	ld.shared.u32 	%r3514, [%rd218];
	add.s32 	%r1988, %r98, %r140;
	mul.wide.s32 	%rd219, %r1988, 4;
	add.s64 	%rd220, %rd28, %rd219;
	ld.shared.u32 	%r3515, [%rd220];
	add.s32 	%r1989, %r99, %r140;
	mul.wide.u32 	%rd221, %r1989, 4;
	add.s64 	%rd222, %rd28, %rd221;
	ld.shared.u32 	%r3516, [%rd222];
LBB0_77:                                // %L20877
                                        //   in Loop: Header=BB0_73 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2025, %r2022}, {%r302, %r305}, {%r3513}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2034, %r2031}, {%r302, %r305}, {%r3514}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2043, %r2040}, {%r302, %r305}, {%r3515}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2052, %r2049}, {%r302, %r305}, {%r3516}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2018, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2020, %r2018, %r2022;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2023, %r354, %r2025, %r2020;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2027, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2029, %r2027, %r2031;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2032, %r354, %r2034, %r2029;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2036, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2038, %r2036, %r2040;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2041, %r354, %r2043, %r2038;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2045, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2047, %r2045, %r2049;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2050, %r354, %r2052, %r2047;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2054, %r357, %r2025;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2057, %r354, %r2022, %r2054;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2061, %r357, %r2034;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2064, %r354, %r2031, %r2061;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2068, %r357, %r2043;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2071, %r354, %r2040, %r2068;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2075, %r357, %r2052;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2078, %r354, %r2049, %r2075;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2123, %r2126}, {%r398, %r404, %r401, %r407}, {%r2023, %r2057}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2142, %r2145}, {%r398, %r404, %r401, %r407}, {%r2032, %r2064}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2130, %r2134}, {%r398, %r404, %r401, %r407}, {%r2041, %r2071}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2149, %r2153}, {%r398, %r404, %r401, %r407}, {%r2050, %r2078}, {%r3450, %r3450};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2122, %r2123, %r2123;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2125, %r2126, %r2126, %r2122;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2129, %r2130, %r2130, %r2125;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2133, %r2134, %r2134, %r2129;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3500, %r1632, %r2133, %r1962;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2141, %r2142, %r2142;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2144, %r2145, %r2145, %r2141;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2148, %r2149, %r2149, %r2144;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2152, %r2153, %r2153, %r2148;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3499, %r1632, %r2152, %r1981;
	// end inline asm
	add.s32 	%r3497, %r3497, 4;
	setp.ne.s32 	%p125, %r3497, 40;
	@%p125 bra 	LBB0_81;
// %bb.78:                              // %L21027
                                        //   in Loop: Header=BB0_73 Depth=2
	@%p65 bra 	LBB0_80;
// %bb.79:                              // %L21086
                                        //   in Loop: Header=BB0_73 Depth=2
	mul.lo.s32 	%r2160, %r3498, 1152;
	add.s32 	%r2161, %r100, %r2160;
	mul.wide.u32 	%rd223, %r2161, 4;
	add.s64 	%rd224, %rd4, %rd223;
	st.global.u32 	[%rd224], %r3500;
	add.s32 	%r2162, %r101, %r2160;
	mul.wide.u32 	%rd225, %r2162, 4;
	add.s64 	%rd226, %rd4, %rd225;
	st.global.u32 	[%rd226], %r3499;
	bra.uni 	LBB0_80;
LBB0_82:                                // %L21346.preheader
                                        //   in Loop: Header=BB0_71 Depth=1
	add.s32 	%r173, %r107, 25;
	add.s32 	%r174, %r107, 26;
	add.s32 	%r175, %r107, 27;
	mov.u32 	%r2165, 0;
	mov.u32 	%r3521, 12;
	mov.u32 	%r3522, %r2165;
	bra.uni 	LBB0_83;
LBB0_90:                                // %L31339
                                        //   in Loop: Header=BB0_83 Depth=2
	add.s32 	%r3498, %r3498, 1;
	mov.u32 	%r3497, 0;
	mov.u32 	%r3499, %r3497;
	mov.u32 	%r3500, %r3497;
LBB0_91:                                // %L31340
                                        //   in Loop: Header=BB0_83 Depth=2
	bar.sync 	0;
	add.s32 	%r3522, %r3522, 1;
	add.s32 	%r3521, %r3521, -4;
	setp.ne.s32 	%p140, %r3521, -12;
	@%p140 bra 	LBB0_83;
	bra.uni 	LBB0_92;
LBB0_83:                                // %L21346
                                        //   Parent Loop BB0_71 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p129, %r3521, 12;
	selp.b32 	%r2703, %r3471, 0, %p129;
	setp.eq.s32 	%p130, %r3521, 8;
	selp.b32 	%r2704, %r3475, %r2703, %p130;
	setp.eq.s32 	%p131, %r3521, 4;
	selp.b32 	%r2705, %r3479, %r2704, %p131;
	setp.eq.s32 	%p132, %r3521, 0;
	selp.b32 	%r2706, %r3483, %r2705, %p132;
	setp.eq.s32 	%p133, %r3521, -4;
	selp.b32 	%r2707, %r3487, %r2706, %p133;
	setp.eq.s32 	%p134, %r3521, -8;
	selp.b32 	%r2708, %r3491, %r2707, %p134;
	selp.b32 	%r2709, %r3472, 0, %p129;
	selp.b32 	%r2710, %r3476, %r2709, %p130;
	selp.b32 	%r2711, %r3480, %r2710, %p131;
	selp.b32 	%r2712, %r3484, %r2711, %p132;
	selp.b32 	%r2713, %r3488, %r2712, %p133;
	selp.b32 	%r2714, %r3492, %r2713, %p134;
	selp.b32 	%r2715, %r3473, 0, %p129;
	selp.b32 	%r2716, %r3477, %r2715, %p130;
	selp.b32 	%r2717, %r3481, %r2716, %p131;
	selp.b32 	%r2718, %r3485, %r2717, %p132;
	selp.b32 	%r2719, %r3489, %r2718, %p133;
	selp.b32 	%r2720, %r3493, %r2719, %p134;
	selp.b32 	%r2721, %r3474, 0, %p129;
	selp.b32 	%r2722, %r3478, %r2721, %p130;
	selp.b32 	%r2723, %r3482, %r2722, %p131;
	selp.b32 	%r2724, %r3486, %r2723, %p132;
	selp.b32 	%r2725, %r3490, %r2724, %p133;
	selp.b32 	%r2726, %r3494, %r2725, %p134;
	// begin inline asm
	mov.b32 %r2193, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r2204, {%rs198, %rs198};
	// end inline asm
	shr.u32 	%r2727, %r2708, 8;
	xor.b32  	%r2203, %r2727, 8947848;
	// begin inline asm
	lop3.b32 %r2190, %r1012, %r2203, %r2193, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2194, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2195, %r2193, %r2194;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2198, %r2190, %r2195;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2201, %r1023, %r2203, %r2204, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2205, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2206, %r2204, %r2205;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2209, %r2201, %r2206;
	// end inline asm
	// begin inline asm
	mov.b32 %r2239, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r2250, {%rs198, %rs198};
	// end inline asm
	shr.u32 	%r2728, %r2714, 8;
	xor.b32  	%r2249, %r2728, 8947848;
	// begin inline asm
	lop3.b32 %r2236, %r1012, %r2249, %r2239, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2240, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2241, %r2239, %r2240;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2244, %r2236, %r2241;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2247, %r1023, %r2249, %r2250, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2251, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2252, %r2250, %r2251;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2255, %r2247, %r2252;
	// end inline asm
	// begin inline asm
	mov.b32 %r2285, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r2296, {%rs198, %rs198};
	// end inline asm
	shr.u32 	%r2729, %r2720, 8;
	xor.b32  	%r2295, %r2729, 8947848;
	// begin inline asm
	lop3.b32 %r2282, %r1012, %r2295, %r2285, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2286, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2287, %r2285, %r2286;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2290, %r2282, %r2287;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2293, %r1023, %r2295, %r2296, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2297, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2298, %r2296, %r2297;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2301, %r2293, %r2298;
	// end inline asm
	// begin inline asm
	mov.b32 %r2331, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r2342, {%rs198, %rs198};
	// end inline asm
	shr.u32 	%r2730, %r2726, 8;
	xor.b32  	%r2341, %r2730, 8947848;
	// begin inline asm
	lop3.b32 %r2328, %r1012, %r2341, %r2331, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2332, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2333, %r2331, %r2332;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2336, %r2328, %r2333;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2339, %r1023, %r2341, %r2342, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2343, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2344, %r2342, %r2343;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2347, %r2339, %r2344;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3464;
    mov.b32 {%r2re, %r2im}, %r2198;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2350, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3465;
    mov.b32 {%r2re, %r2im}, %r2209;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2353, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3464;
    mov.b32 {%r2re, %r2im}, %r2244;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2356, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3465;
    mov.b32 {%r2re, %r2im}, %r2255;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2359, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3464;
    mov.b32 {%r2re, %r2im}, %r2290;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2362, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3465;
    mov.b32 {%r2re, %r2im}, %r2301;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2365, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3464;
    mov.b32 {%r2re, %r2im}, %r2336;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2368, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3465;
    mov.b32 {%r2re, %r2im}, %r2347;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2371, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2437, %r2434}, {%r302, %r305}, {%r2350}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2446, %r2443}, {%r302, %r305}, {%r2353}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2455, %r2452}, {%r302, %r305}, {%r2356}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2464, %r2461}, {%r302, %r305}, {%r2359}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2473, %r2470}, {%r302, %r305}, {%r2362}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2482, %r2479}, {%r302, %r305}, {%r2365}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2491, %r2488}, {%r302, %r305}, {%r2368}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2500, %r2497}, {%r302, %r305}, {%r2371}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2430, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2432, %r2430, %r2434;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2435, %r354, %r2437, %r2432;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2439, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2441, %r2439, %r2443;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2444, %r354, %r2446, %r2441;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2448, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2450, %r2448, %r2452;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2453, %r354, %r2455, %r2450;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2457, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2459, %r2457, %r2461;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2462, %r354, %r2464, %r2459;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2466, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2468, %r2466, %r2470;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2471, %r354, %r2473, %r2468;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2475, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2477, %r2475, %r2479;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2480, %r354, %r2482, %r2477;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2484, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2486, %r2484, %r2488;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2489, %r354, %r2491, %r2486;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2493, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2495, %r2493, %r2497;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2498, %r354, %r2500, %r2495;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2502, %r357, %r2437;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2505, %r354, %r2434, %r2502;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2509, %r357, %r2446;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2512, %r354, %r2443, %r2509;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2516, %r357, %r2455;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2519, %r354, %r2452, %r2516;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2523, %r357, %r2464;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2526, %r354, %r2461, %r2523;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2530, %r357, %r2473;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2533, %r354, %r2470, %r2530;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2537, %r357, %r2482;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2540, %r354, %r2479, %r2537;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2544, %r357, %r2491;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2547, %r354, %r2488, %r2544;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2551, %r357, %r2500;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2554, %r354, %r2497, %r2551;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2639, %r2640}, {%r398, %r404, %r401, %r407}, {%r2435, %r2505}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2647, %r2648}, {%r398, %r404, %r401, %r407}, {%r2444, %r2512}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2655, %r2656}, {%r398, %r404, %r401, %r407}, {%r2453, %r2519}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2663, %r2664}, {%r398, %r404, %r401, %r407}, {%r2462, %r2526}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2671, %r2672}, {%r398, %r404, %r401, %r407}, {%r2471, %r2533}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2679, %r2680}, {%r398, %r404, %r401, %r407}, {%r2480, %r2540}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2687, %r2688}, {%r398, %r404, %r401, %r407}, {%r2489, %r2547}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2695, %r2696}, {%r398, %r404, %r401, %r407}, {%r2498, %r2554}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	prmt.b32 %r2638, %r2639, %r2640, %r712;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2642, %r2639, %r2640, %r716;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2646, %r2647, %r2648, %r712;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2650, %r2647, %r2648, %r716;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2654, %r2655, %r2656, %r712;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2658, %r2655, %r2656, %r716;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2662, %r2663, %r2664, %r712;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2666, %r2663, %r2664, %r716;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2670, %r2671, %r2672, %r712;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2674, %r2671, %r2672, %r716;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2678, %r2679, %r2680, %r712;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2682, %r2679, %r2680, %r716;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2686, %r2687, %r2688, %r712;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2690, %r2687, %r2688, %r716;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2694, %r2695, %r2696, %r712;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2698, %r2695, %r2696, %r716;
	// end inline asm
	st.shared.u32 	[%rd6], %r2638;
	st.shared.u32 	[%rd7+33024], %r2642;
	st.shared.u32 	[%rd7+128], %r2646;
	st.shared.u32 	[%rd7+33152], %r2650;
	cvt.u16.u32 	%rs262, %r3522;
	and.b16  	%rs263, %rs262, 255;
	mul.lo.s16 	%rs264, %rs263, 171;
	shr.u16 	%rs265, %rs264, 10;
	mul.lo.s16 	%rs266, %rs265, 6;
	sub.s16 	%rs267, %rs262, %rs266;
	shl.b16 	%rs268, %rs267, 2;
	cvt.u32.u16 	%r2731, %rs268;
	and.b32  	%r2732, %r2731, 252;
	add.s32 	%r2733, %r173, %r2732;
	cvt.u16.u32 	%rs269, %r2733;
	shr.s16 	%rs270, %rs269, 15;
	shr.u16 	%rs271, %rs270, 14;
	add.s16 	%rs272, %rs269, %rs271;
	and.b16  	%rs273, %rs272, -4;
	sub.s16 	%rs274, %rs269, %rs273;
	mul.wide.s16 	%r182, %rs274, 64;
	add.s32 	%r2734, %r92, %r182;
	mul.wide.s32 	%rd227, %r2734, 4;
	add.s64 	%rd229, %rd28, %rd227;
	st.shared.u32 	[%rd229], %r2654;
	add.s32 	%r2735, %r93, %r182;
	mul.wide.u32 	%rd230, %r2735, 4;
	add.s64 	%rd231, %rd28, %rd230;
	st.shared.u32 	[%rd231], %r2658;
	add.s32 	%r2736, %r94, %r182;
	mul.wide.s32 	%rd232, %r2736, 4;
	add.s64 	%rd233, %rd28, %rd232;
	st.shared.u32 	[%rd233], %r2662;
	add.s32 	%r2737, %r95, %r182;
	mul.wide.u32 	%rd234, %r2737, 4;
	add.s64 	%rd235, %rd28, %rd234;
	st.shared.u32 	[%rd235], %r2666;
	add.s32 	%r2738, %r174, %r2732;
	cvt.u16.u32 	%rs275, %r2738;
	shr.s16 	%rs276, %rs275, 15;
	shr.u16 	%rs277, %rs276, 14;
	add.s16 	%rs278, %rs275, %rs277;
	and.b16  	%rs279, %rs278, -4;
	sub.s16 	%rs280, %rs275, %rs279;
	mul.wide.s16 	%r183, %rs280, 64;
	add.s32 	%r2739, %r92, %r183;
	mul.wide.s32 	%rd236, %r2739, 4;
	add.s64 	%rd237, %rd28, %rd236;
	st.shared.u32 	[%rd237], %r2670;
	add.s32 	%r2740, %r93, %r183;
	mul.wide.u32 	%rd238, %r2740, 4;
	add.s64 	%rd239, %rd28, %rd238;
	st.shared.u32 	[%rd239], %r2674;
	add.s32 	%r2741, %r94, %r183;
	mul.wide.s32 	%rd240, %r2741, 4;
	add.s64 	%rd241, %rd28, %rd240;
	st.shared.u32 	[%rd241], %r2678;
	add.s32 	%r2742, %r95, %r183;
	mul.wide.u32 	%rd242, %r2742, 4;
	add.s64 	%rd243, %rd28, %rd242;
	st.shared.u32 	[%rd243], %r2682;
	add.s32 	%r2743, %r175, %r2732;
	cvt.u16.u32 	%rs281, %r2743;
	shr.s16 	%rs282, %rs281, 15;
	shr.u16 	%rs283, %rs282, 14;
	add.s16 	%rs284, %rs281, %rs283;
	and.b16  	%rs285, %rs284, -4;
	sub.s16 	%rs286, %rs281, %rs285;
	mul.wide.s16 	%r184, %rs286, 64;
	add.s32 	%r2744, %r92, %r184;
	mul.wide.s32 	%rd244, %r2744, 4;
	add.s64 	%rd245, %rd28, %rd244;
	st.shared.u32 	[%rd245], %r2686;
	add.s32 	%r2745, %r93, %r184;
	mul.wide.u32 	%rd246, %r2745, 4;
	add.s64 	%rd247, %rd28, %rd246;
	st.shared.u32 	[%rd247], %r2690;
	add.s32 	%r2746, %r94, %r184;
	mul.wide.s32 	%rd248, %r2746, 4;
	add.s64 	%rd249, %rd28, %rd248;
	st.shared.u32 	[%rd249], %r2694;
	add.s32 	%r2747, %r95, %r184;
	mul.wide.u32 	%rd250, %r2747, 4;
	add.s64 	%rd251, %rd28, %rd250;
	st.shared.u32 	[%rd251], %r2698;
	bar.sync 	0;
	mov.u32 	%r3527, %r2165;
	mov.u32 	%r3528, %r2165;
	mov.u32 	%r3529, %r2165;
	mov.u32 	%r3530, %r2165;
	@%p115 bra 	LBB0_114;
	bra.uni 	LBB0_84;
LBB0_114:                               // %oksrem11501
                                        //   in Loop: Header=BB0_83 Depth=2
	ld.shared.u32 	%r3530, [%rd8];
	ld.shared.u32 	%r3529, [%rd9];
	ld.shared.u32 	%r3528, [%rd10];
	ld.shared.u32 	%r3527, [%rd11];
LBB0_84:                                // %L27221
                                        //   in Loop: Header=BB0_83 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2783, %r2780}, {%r302, %r305}, {%r3530}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2792, %r2789}, {%r302, %r305}, {%r3529}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2801, %r2798}, {%r302, %r305}, {%r3528}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2810, %r2807}, {%r302, %r305}, {%r3527}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2776, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2778, %r2776, %r2780;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2781, %r354, %r2783, %r2778;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2785, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2787, %r2785, %r2789;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2790, %r354, %r2792, %r2787;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2794, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2796, %r2794, %r2798;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2799, %r354, %r2801, %r2796;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2803, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2805, %r2803, %r2807;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2808, %r354, %r2810, %r2805;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2812, %r357, %r2783;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2815, %r354, %r2780, %r2812;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2819, %r357, %r2792;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2822, %r354, %r2789, %r2819;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2826, %r357, %r2801;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2829, %r354, %r2798, %r2826;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2833, %r357, %r2810;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2836, %r354, %r2807, %r2833;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2881, %r2884}, {%r398, %r404, %r401, %r407}, {%r2781, %r2815}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2900, %r2903}, {%r398, %r404, %r401, %r407}, {%r2790, %r2822}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2888, %r2892}, {%r398, %r404, %r401, %r407}, {%r2799, %r2829}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2907, %r2911}, {%r398, %r404, %r401, %r407}, {%r2808, %r2836}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2880, %r2881, %r2881;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2883, %r2884, %r2884, %r2880;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2887, %r2888, %r2888, %r2883;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2891, %r2892, %r2892, %r2887;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2895, %r1632, %r2891, %r3500;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2899, %r2900, %r2900;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2902, %r2903, %r2903, %r2899;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2906, %r2907, %r2907, %r2902;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2910, %r2911, %r2911, %r2906;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2914, %r1632, %r2910, %r3499;
	// end inline asm
	mov.u32 	%r3531, %r2165;
	mov.u32 	%r3532, %r2165;
	mov.u32 	%r3533, %r2165;
	mov.u32 	%r3534, %r2165;
	@%p115 bra 	LBB0_115;
	bra.uni 	LBB0_85;
LBB0_115:                               // %oksrem12036
                                        //   in Loop: Header=BB0_83 Depth=2
	add.s32 	%r2919, %r96, %r182;
	mul.wide.s32 	%rd252, %r2919, 4;
	add.s64 	%rd254, %rd28, %rd252;
	ld.shared.u32 	%r3534, [%rd254];
	add.s32 	%r2920, %r97, %r182;
	mul.wide.u32 	%rd255, %r2920, 4;
	add.s64 	%rd256, %rd28, %rd255;
	ld.shared.u32 	%r3533, [%rd256];
	add.s32 	%r2921, %r98, %r182;
	mul.wide.s32 	%rd257, %r2921, 4;
	add.s64 	%rd258, %rd28, %rd257;
	ld.shared.u32 	%r3532, [%rd258];
	add.s32 	%r2922, %r99, %r182;
	mul.wide.u32 	%rd259, %r2922, 4;
	add.s64 	%rd260, %rd28, %rd259;
	ld.shared.u32 	%r3531, [%rd260];
LBB0_85:                                // %L28446
                                        //   in Loop: Header=BB0_83 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2958, %r2955}, {%r302, %r305}, {%r3534}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2967, %r2964}, {%r302, %r305}, {%r3533}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2976, %r2973}, {%r302, %r305}, {%r3532}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2985, %r2982}, {%r302, %r305}, {%r3531}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2951, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2953, %r2951, %r2955;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2956, %r354, %r2958, %r2953;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2960, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2962, %r2960, %r2964;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2965, %r354, %r2967, %r2962;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2969, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2971, %r2969, %r2973;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2974, %r354, %r2976, %r2971;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2978, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2980, %r2978, %r2982;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2983, %r354, %r2985, %r2980;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2987, %r357, %r2958;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2990, %r354, %r2955, %r2987;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2994, %r357, %r2967;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2997, %r354, %r2964, %r2994;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3001, %r357, %r2976;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3004, %r354, %r2973, %r3001;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3008, %r357, %r2985;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3011, %r354, %r2982, %r3008;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3056, %r3059}, {%r398, %r404, %r401, %r407}, {%r2956, %r2990}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3075, %r3078}, {%r398, %r404, %r401, %r407}, {%r2965, %r2997}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3063, %r3067}, {%r398, %r404, %r401, %r407}, {%r2974, %r3004}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3082, %r3086}, {%r398, %r404, %r401, %r407}, {%r2983, %r3011}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3055, %r3056, %r3056;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3058, %r3059, %r3059, %r3055;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3062, %r3063, %r3063, %r3058;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3066, %r3067, %r3067, %r3062;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3070, %r1632, %r3066, %r2895;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3074, %r3075, %r3075;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3077, %r3078, %r3078, %r3074;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3081, %r3082, %r3082, %r3077;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3085, %r3086, %r3086, %r3081;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3089, %r1632, %r3085, %r2914;
	// end inline asm
	mov.u32 	%r3535, %r2165;
	mov.u32 	%r3536, %r2165;
	mov.u32 	%r3537, %r2165;
	mov.u32 	%r3538, %r2165;
	@%p115 bra 	LBB0_116;
	bra.uni 	LBB0_86;
LBB0_116:                               // %oksrem12571
                                        //   in Loop: Header=BB0_83 Depth=2
	add.s32 	%r3094, %r96, %r183;
	mul.wide.s32 	%rd261, %r3094, 4;
	add.s64 	%rd263, %rd28, %rd261;
	ld.shared.u32 	%r3538, [%rd263];
	add.s32 	%r3095, %r97, %r183;
	mul.wide.u32 	%rd264, %r3095, 4;
	add.s64 	%rd265, %rd28, %rd264;
	ld.shared.u32 	%r3537, [%rd265];
	add.s32 	%r3096, %r98, %r183;
	mul.wide.s32 	%rd266, %r3096, 4;
	add.s64 	%rd267, %rd28, %rd266;
	ld.shared.u32 	%r3536, [%rd267];
	add.s32 	%r3097, %r99, %r183;
	mul.wide.u32 	%rd268, %r3097, 4;
	add.s64 	%rd269, %rd28, %rd268;
	ld.shared.u32 	%r3535, [%rd269];
LBB0_86:                                // %L29671
                                        //   in Loop: Header=BB0_83 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3133, %r3130}, {%r302, %r305}, {%r3538}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3142, %r3139}, {%r302, %r305}, {%r3537}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3151, %r3148}, {%r302, %r305}, {%r3536}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3160, %r3157}, {%r302, %r305}, {%r3535}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3126, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3128, %r3126, %r3130;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3131, %r354, %r3133, %r3128;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3135, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3137, %r3135, %r3139;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3140, %r354, %r3142, %r3137;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3144, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3146, %r3144, %r3148;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3149, %r354, %r3151, %r3146;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3153, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3155, %r3153, %r3157;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3158, %r354, %r3160, %r3155;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3162, %r357, %r3133;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3165, %r354, %r3130, %r3162;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3169, %r357, %r3142;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3172, %r354, %r3139, %r3169;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3176, %r357, %r3151;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3179, %r354, %r3148, %r3176;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3183, %r357, %r3160;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3186, %r354, %r3157, %r3183;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3231, %r3234}, {%r398, %r404, %r401, %r407}, {%r3131, %r3165}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3250, %r3253}, {%r398, %r404, %r401, %r407}, {%r3140, %r3172}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3238, %r3242}, {%r398, %r404, %r401, %r407}, {%r3149, %r3179}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3257, %r3261}, {%r398, %r404, %r401, %r407}, {%r3158, %r3186}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3230, %r3231, %r3231;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3233, %r3234, %r3234, %r3230;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3237, %r3238, %r3238, %r3233;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3241, %r3242, %r3242, %r3237;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3245, %r1632, %r3241, %r3070;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3249, %r3250, %r3250;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3252, %r3253, %r3253, %r3249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3256, %r3257, %r3257, %r3252;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3260, %r3261, %r3261, %r3256;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3264, %r1632, %r3260, %r3089;
	// end inline asm
	mov.u32 	%r3539, %r2165;
	mov.u32 	%r3540, %r2165;
	mov.u32 	%r3541, %r2165;
	mov.u32 	%r3542, %r2165;
	@%p115 bra 	LBB0_117;
	bra.uni 	LBB0_87;
LBB0_117:                               // %oksrem13106
                                        //   in Loop: Header=BB0_83 Depth=2
	add.s32 	%r3269, %r96, %r184;
	mul.wide.s32 	%rd270, %r3269, 4;
	add.s64 	%rd272, %rd28, %rd270;
	ld.shared.u32 	%r3542, [%rd272];
	add.s32 	%r3270, %r97, %r184;
	mul.wide.u32 	%rd273, %r3270, 4;
	add.s64 	%rd274, %rd28, %rd273;
	ld.shared.u32 	%r3541, [%rd274];
	add.s32 	%r3271, %r98, %r184;
	mul.wide.s32 	%rd275, %r3271, 4;
	add.s64 	%rd276, %rd28, %rd275;
	ld.shared.u32 	%r3540, [%rd276];
	add.s32 	%r3272, %r99, %r184;
	mul.wide.u32 	%rd277, %r3272, 4;
	add.s64 	%rd278, %rd28, %rd277;
	ld.shared.u32 	%r3539, [%rd278];
LBB0_87:                                // %L30896
                                        //   in Loop: Header=BB0_83 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3308, %r3305}, {%r302, %r305}, {%r3542}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3317, %r3314}, {%r302, %r305}, {%r3541}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3326, %r3323}, {%r302, %r305}, {%r3540}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3335, %r3332}, {%r302, %r305}, {%r3539}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3301, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3303, %r3301, %r3305;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3306, %r354, %r3308, %r3303;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3310, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3312, %r3310, %r3314;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3315, %r354, %r3317, %r3312;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3319, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3321, %r3319, %r3323;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3324, %r354, %r3326, %r3321;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3328, %r357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3330, %r3328, %r3332;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3333, %r354, %r3335, %r3330;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3337, %r357, %r3308;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3340, %r354, %r3305, %r3337;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3344, %r357, %r3317;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3347, %r354, %r3314, %r3344;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3351, %r357, %r3326;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3354, %r354, %r3323, %r3351;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3358, %r357, %r3335;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3361, %r354, %r3332, %r3358;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3406, %r3409}, {%r398, %r404, %r401, %r407}, {%r3306, %r3340}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3425, %r3428}, {%r398, %r404, %r401, %r407}, {%r3315, %r3347}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3413, %r3417}, {%r398, %r404, %r401, %r407}, {%r3324, %r3354}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3432, %r3436}, {%r398, %r404, %r401, %r407}, {%r3333, %r3361}, {%r2165, %r2165};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3405, %r3406, %r3406;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3408, %r3409, %r3409, %r3405;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3412, %r3413, %r3413, %r3408;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3416, %r3417, %r3417, %r3412;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3500, %r1632, %r3416, %r3245;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3424, %r3425, %r3425;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3427, %r3428, %r3428, %r3424;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3431, %r3432, %r3432, %r3427;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3435, %r3436, %r3436, %r3431;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3499, %r1632, %r3435, %r3264;
	// end inline asm
	add.s32 	%r3497, %r3497, 4;
	setp.ne.s32 	%p138, %r3497, 40;
	@%p138 bra 	LBB0_91;
// %bb.88:                              // %L31046
                                        //   in Loop: Header=BB0_83 Depth=2
	@%p65 bra 	LBB0_90;
// %bb.89:                              // %L31105
                                        //   in Loop: Header=BB0_83 Depth=2
	mul.lo.s32 	%r3443, %r3498, 1152;
	add.s32 	%r3444, %r100, %r3443;
	mul.wide.u32 	%rd279, %r3444, 4;
	add.s64 	%rd280, %rd4, %rd279;
	st.global.u32 	[%rd280], %r3500;
	add.s32 	%r3445, %r101, %r3443;
	mul.wide.u32 	%rd281, %r3445, 4;
	add.s64 	%rd282, %rd4, %rd281;
	st.global.u32 	[%rd282], %r3499;
	bra.uni 	LBB0_90;
LBB0_93:                                // %L31375
	mov.u32 	%r3447, 0;
	st.global.u32 	[%rd5], %r3447;
	ret;
LBB0_1:                                 // %L8
	ld.param.u32 	%r287, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd13, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0];
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd13;
	st.param.b32 	[param0+8], %r287;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
