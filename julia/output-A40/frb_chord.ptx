// PTX CompilerJob of MethodInstance for frb(::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.1
.target sm_86
.address_size 64

	// .globl	_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE // -- Begin function _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.visible .entry _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE(
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<142>;
	.reg .b16 	%rs<271>;
	.reg .b32 	%r<3572>;
	.reg .f32 	%f<397>;
	.reg .b64 	%rd<283>;

// %bb.0:                               // %conversion
	// begin inline asm
	mov.u32 %r289, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r289, 76895;
	@%p1 bra 	LBB0_94;
	bra.uni 	LBB0_1;
LBB0_94:                                // %L10
	ld.param.u64 	%rd14, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r4, %ctaid.x;
	or.b32  	%r290, %r2, %r3;
	mad.lo.s32 	%r291, %r4, 768, %r290;
	mul.wide.u32 	%rd20, %r291, 4;
	add.s64 	%rd5, %rd14, %rd20;
	mov.u32 	%r292, 1;
	st.global.u32 	[%rd5], %r292;
	and.b32  	%r5, %r3, 3;
	shr.u32 	%r6, %r3, 2;
	mul.lo.s32 	%r293, %r5, %r6;
	and.b32  	%r294, %r293, 7;
	cvt.rn.f32.u32 	%f102, %r294;
	mov.f32 	%f103, 0f40800000;
	div.approx.f32 	%f1, %f102, %f103;
	abs.f32 	%f395, %f1;
	setp.lt.f32 	%p2, %f395, 0f40000000;
	@%p2 bra 	LBB0_106;
// %bb.95:
	setp.gtu.f32 	%p3, %f395, 0f4B800000;
	@%p3 bra 	LBB0_102;
	bra.uni 	LBB0_96;
LBB0_102:
	mov.b32 	%r220, %f395;
	and.b32  	%r295, %r220, 8388607;
	or.b32  	%r3570, %r295, 1065353216;
	mov.b32 	%f394, %r3570;
	add.s32 	%r296, %r220, -1073741824;
	and.b32  	%r3571, %r296, -8388608;
	setp.eq.s32 	%p9, %r3571, 0;
	@%p9 bra 	LBB0_105;
// %bb.103:                             // %__nv_fmaf_rn.exit4.i.i.i1286.preheader
	mov.f32 	%f113, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f112,%f113;
	// end inline asm
LBB0_104:                               // %__nv_fmaf_rn.exit4.i.i.i1286
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r297, %r3571, 192937984;
	add.s32 	%r298, %r297, %r3570;
	mov.b32 	%f114, %r298;
	mul.f32 	%f115, %f112, %f114;
	sub.f32 	%f116, %f114, %f115;
	fma.rn.f32 	%f117, %f116, %f112, %f115;
	sub.f32 	%f118, %f114, %f117;
	fma.rz.f32 	%f119, %f118, %f112, %f117;
	cvt.rzi.f32.f32 	%f120, %f119;
	sub.f32 	%f394, %f114, %f120;
	sub.s32 	%r3571, %r3571, %r297;
	mov.b32 	%r3570, %f394;
	setp.ne.s32 	%p10, %r3571, 0;
	setp.ne.s32 	%p11, %r3570, 0;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	LBB0_104;
LBB0_105:                               // %__internal_fmodf_slowpath_mod.exit.i.i1288
	setp.gt.u32 	%p13, %r220, 2139095039;
	selp.f32 	%f121, 0f7FFFFFFF, 0f4B800000, %p13;
	mul.f32 	%f122, %f394, 0f34000000;
	mul.f32 	%f395, %f121, %f122;
	bra.uni 	LBB0_106;
LBB0_96:                                // %__nv_fast_fdividef.exit.i.i.i1258
	mov.f32 	%f104, 0f40000000;
	div.approx.f32 	%f105, %f395, %f104;
	cvt.rzi.f32.f32 	%f393, %f105;
	fma.rn.f32 	%f88, %f393, 0fC0000000, %f395;
	mov.b32 	%r219, %f88;
	setp.lt.u32 	%p4, %r219, 1073741824;
	@%p4 bra 	LBB0_101;
// %bb.97:
	setp.lt.u32 	%p5, %r219, -2147483647;
	@%p5 bra 	LBB0_99;
// %bb.98:
	add.f32 	%f110, %f393, 0fBF800000;
	setp.lt.f32 	%p8, %f88, 0fC0000000;
	add.f32 	%f111, %f110, 0fBF800000;
	selp.f32 	%f393, %f111, %f110, %p8;
	bra.uni 	LBB0_101;
LBB0_99:
	add.f32 	%f393, %f393, 0f3F800000;
	setp.ltu.f32 	%p6, %f88, 0f40800000;
	@%p6 bra 	LBB0_101;
// %bb.100:                             // %__nv_fmaf_rn.exit.i.i.i1263
	add.f32 	%f106, %f393, 0f3F800000;
	fma.rn.f32 	%f108, %f104, 0fC0400000, %f88;
	setp.ge.f32 	%p7, %f108, 0f00000000;
	add.f32 	%f109, %f106, 0f3F800000;
	selp.f32 	%f393, %f109, %f106, %p7;
LBB0_101:                               // %__internal_fmodf_fastpath_quot.exit.i.i1267
	fma.rn.f32 	%f395, %f393, 0fC0000000, %f395;
LBB0_106:                               // %__internal_fmodf_kernel.exit.i1292
	abs.f32 	%f123, %f395;
	setp.gtu.f32 	%p14, %f123, 0f7F800000;
	@%p14 bra 	LBB0_108;
// %bb.107:
	mov.b32 	%r299, %f1;
	and.b32  	%r300, %r299, -2147483648;
	mov.b32 	%r301, %f395;
	or.b32  	%r302, %r300, %r301;
	mov.b32 	%f395, %r302;
LBB0_108:                               // %__nv_fmodf.exit1293
	add.f32 	%f125, %f395, %f395;
	mov.b32 	%r309, %f125;
	and.b32  	%r310, %r309, -2147483648;
	or.b32  	%r311, %r310, 1056964608;
	mov.b32 	%f126, %r311;
	add.f32 	%f127, %f125, %f126;
	cvt.rzi.f32.f32 	%f128, %f127;
	abs.f32 	%f129, %f125;
	setp.gt.f32 	%p15, %f129, 0f4B000000;
	selp.f32 	%f130, %f125, %f128, %p15;
	cvt.rzi.f32.f32 	%f131, %f125;
	setp.lt.f32 	%p16, %f129, 0f3F000000;
	selp.f32 	%f132, %f131, %f130, %p16;
	cvt.rzi.s32.f32 	%r312, %f132;
	fma.rn.f32 	%f133, %f132, 0fBF000000, %f395;
	mul.f32 	%f134, %f133, %f133;
	fma.rn.f32 	%f135, %f134, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f136, %f134, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f137, %f135, %f134, 0fC0A55DF6;
	fma.rn.f32 	%f138, %f136, %f134, 0f4081E0CF;
	fma.rn.f32 	%f139, %f134, %f133, 0f00000000;
	fma.rn.f32 	%f140, %f138, %f134, 0fC09DE9E6;
	fma.rn.f32 	%f141, %f137, %f139, 0f00000000;
	fma.rn.f32 	%f142, %f140, %f134, 0f3F800000;
	fma.rn.f32 	%f143, %f133, 0f40490FDB, %f141;
	and.b32  	%r313, %r312, 1;
	setp.eq.b32 	%p17, %r313, 1;
	selp.f32 	%f144, %f142, %f143, %p17;
	selp.f32 	%f145, %f143, %f142, %p17;
	and.b32  	%r314, %r312, 2;
	setp.eq.s32 	%p18, %r314, 0;
	neg.f32 	%f146, %f144;
	selp.f32 	%f147, %f144, %f146, %p18;
	add.s32 	%r315, %r312, 1;
	and.b32  	%r316, %r315, 2;
	mov.f32 	%f391, 0f00000000;
	cvt.rzi.f32.f32 	%f150, %f395;
	setp.eq.f32 	%p20, %f150, %f395;
	mul.f32 	%f151, %f395, 0f00000000;
	shl.b32 	%r229, %r3, 1;
	and.b32  	%r230, %r229, 6;
	or.b32  	%r231, %r230, 1;
	setp.eq.s32 	%p22, %r230, 6;
	mov.f32 	%f367, 0f41C00000;
	mul.lo.s32 	%r3471, %r230, %r6;
	mov.f32 	%f373, %f391;
	mov.f32 	%f374, %f391;
	@%p22 bra 	LBB0_17;
// %bb.2:                               // %L188
	cvt.u16.u32 	%rs2, %r3471;
	and.b16  	%rs3, %rs2, 255;
	mul.lo.s16 	%rs4, %rs3, 171;
	shr.u16 	%rs5, %rs4, 13;
	mul.lo.s16 	%rs6, %rs5, 48;
	sub.s16 	%rs7, %rs2, %rs6;
	and.b16  	%rs8, %rs7, 255;
	cvt.rn.f32.u16 	%f156, %rs8;
	div.approx.f32 	%f3, %f156, %f367;
	abs.f32 	%f371, %f3;
	setp.lt.f32 	%p23, %f371, 0f40000000;
	@%p23 bra 	LBB0_14;
// %bb.3:
	setp.gtu.f32 	%p24, %f371, 0f4B800000;
	@%p24 bra 	LBB0_10;
	bra.uni 	LBB0_4;
LBB0_10:
	mov.b32 	%r8, %f371;
	and.b32  	%r318, %r8, 8388607;
	or.b32  	%r3474, %r318, 1065353216;
	mov.b32 	%f370, %r3474;
	add.s32 	%r319, %r8, -1073741824;
	and.b32  	%r3475, %r319, -8388608;
	setp.eq.s32 	%p30, %r3475, 0;
	@%p30 bra 	LBB0_13;
// %bb.11:                              // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f167, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f166,%f167;
	// end inline asm
LBB0_12:                                // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r320, %r3475, 192937984;
	add.s32 	%r321, %r320, %r3474;
	mov.b32 	%f168, %r321;
	mul.f32 	%f169, %f166, %f168;
	sub.f32 	%f170, %f168, %f169;
	fma.rn.f32 	%f171, %f170, %f166, %f169;
	sub.f32 	%f172, %f168, %f171;
	fma.rz.f32 	%f173, %f172, %f166, %f171;
	cvt.rzi.f32.f32 	%f174, %f173;
	sub.f32 	%f370, %f168, %f174;
	sub.s32 	%r3475, %r3475, %r320;
	mov.b32 	%r3474, %f370;
	setp.ne.s32 	%p31, %r3475, 0;
	setp.ne.s32 	%p32, %r3474, 0;
	and.pred  	%p33, %p31, %p32;
	@%p33 bra 	LBB0_12;
LBB0_13:                                // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p34, %r8, 2139095039;
	selp.f32 	%f175, 0f7FFFFFFF, 0f4B800000, %p34;
	mul.f32 	%f176, %f370, 0f34000000;
	mul.f32 	%f371, %f175, %f176;
	bra.uni 	LBB0_14;
LBB0_4:                                 // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f158, 0f40000000;
	div.approx.f32 	%f159, %f371, %f158;
	cvt.rzi.f32.f32 	%f369, %f159;
	fma.rn.f32 	%f6, %f369, 0fC0000000, %f371;
	mov.b32 	%r7, %f6;
	setp.lt.u32 	%p25, %r7, 1073741824;
	@%p25 bra 	LBB0_9;
// %bb.5:
	setp.lt.u32 	%p26, %r7, -2147483647;
	@%p26 bra 	LBB0_7;
// %bb.6:
	add.f32 	%f164, %f369, 0fBF800000;
	setp.lt.f32 	%p29, %f6, 0fC0000000;
	add.f32 	%f165, %f164, 0fBF800000;
	selp.f32 	%f369, %f165, %f164, %p29;
	bra.uni 	LBB0_9;
LBB0_7:
	add.f32 	%f369, %f369, 0f3F800000;
	setp.ltu.f32 	%p27, %f6, 0f40800000;
	@%p27 bra 	LBB0_9;
// %bb.8:                               // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f160, %f369, 0f3F800000;
	fma.rn.f32 	%f162, %f158, 0fC0400000, %f6;
	setp.ge.f32 	%p28, %f162, 0f00000000;
	add.f32 	%f163, %f160, 0f3F800000;
	selp.f32 	%f369, %f163, %f160, %p28;
LBB0_9:                                 // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f371, %f369, 0fC0000000, %f371;
LBB0_14:                                // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f177, %f371;
	setp.gtu.f32 	%p35, %f177, 0f7F800000;
	@%p35 bra 	LBB0_16;
// %bb.15:
	mov.b32 	%r322, %f3;
	and.b32  	%r323, %r322, -2147483648;
	mov.b32 	%r324, %f371;
	or.b32  	%r325, %r323, %r324;
	mov.b32 	%f371, %r325;
LBB0_16:                                // %__nv_fmodf.exit
	add.f32 	%f178, %f371, %f371;
	mov.b32 	%r326, %f178;
	and.b32  	%r327, %r326, -2147483648;
	or.b32  	%r328, %r327, 1056964608;
	mov.b32 	%f179, %r328;
	add.f32 	%f180, %f178, %f179;
	cvt.rzi.f32.f32 	%f181, %f180;
	abs.f32 	%f182, %f178;
	setp.gt.f32 	%p36, %f182, 0f4B000000;
	selp.f32 	%f183, %f178, %f181, %p36;
	cvt.rzi.f32.f32 	%f184, %f178;
	setp.lt.f32 	%p37, %f182, 0f3F000000;
	selp.f32 	%f185, %f184, %f183, %p37;
	cvt.rzi.s32.f32 	%r329, %f185;
	fma.rn.f32 	%f186, %f185, 0fBF000000, %f371;
	mul.f32 	%f187, %f186, %f186;
	fma.rn.f32 	%f188, %f187, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f189, %f187, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f190, %f188, %f187, 0fC0A55DF6;
	fma.rn.f32 	%f191, %f189, %f187, 0f4081E0CF;
	fma.rn.f32 	%f192, %f187, %f186, 0f00000000;
	fma.rn.f32 	%f193, %f191, %f187, 0fC09DE9E6;
	fma.rn.f32 	%f194, %f190, %f192, 0f00000000;
	fma.rn.f32 	%f195, %f193, %f187, 0f3F800000;
	fma.rn.f32 	%f196, %f186, 0f40490FDB, %f194;
	and.b32  	%r330, %r329, 1;
	setp.eq.b32 	%p38, %r330, 1;
	selp.f32 	%f197, %f195, %f196, %p38;
	selp.f32 	%f198, %f196, %f195, %p38;
	and.b32  	%r331, %r329, 2;
	setp.eq.s32 	%p39, %r331, 0;
	neg.f32 	%f199, %f197;
	selp.f32 	%f200, %f197, %f199, %p39;
	add.s32 	%r332, %r329, 1;
	and.b32  	%r333, %r332, 2;
	setp.eq.s32 	%p40, %r333, 0;
	mov.f32 	%f201, 0f00000000;
	sub.f32 	%f202, %f201, %f198;
	selp.f32 	%f203, %f198, %f202, %p40;
	cvt.rzi.f32.f32 	%f204, %f371;
	setp.eq.f32 	%p41, %f204, %f371;
	mul.f32 	%f205, %f371, 0f00000000;
	selp.f32 	%f374, %f205, %f200, %p41;
	abs.f32 	%f206, %f371;
	setp.gt.f32 	%p42, %f206, 0f4B800000;
	add.f32 	%f207, %f374, 0f3F800000;
	selp.f32 	%f373, %f207, %f203, %p42;
LBB0_17:                                // %L204
	setp.eq.s32 	%p19, %r316, 0;
	sub.f32 	%f148, %f391, %f145;
	selp.f32 	%f152, %f151, %f147, %p20;
	abs.f32 	%f153, %f395;
	setp.gt.u32 	%p43, %r231, 5;
	mul.lo.s32 	%r3472, %r231, %r6;
	mov.f32 	%f379, %f391;
	mov.f32 	%f380, %f391;
	@%p43 bra 	LBB0_33;
// %bb.18:                              // %L208
	mul.hi.u32 	%r335, %r3472, -1431655765;
	shr.u32 	%r336, %r335, 5;
	mul.lo.s32 	%r337, %r336, 48;
	sub.s32 	%r338, %r3472, %r337;
	cvt.rn.f32.s32 	%f209, %r338;
	div.approx.f32 	%f24, %f209, %f367;
	abs.f32 	%f377, %f24;
	setp.lt.f32 	%p44, %f377, 0f40000000;
	@%p44 bra 	LBB0_30;
// %bb.19:
	setp.gtu.f32 	%p45, %f377, 0f4B800000;
	@%p45 bra 	LBB0_26;
	bra.uni 	LBB0_20;
LBB0_26:
	mov.b32 	%r16, %f377;
	and.b32  	%r339, %r16, 8388607;
	or.b32  	%r3476, %r339, 1065353216;
	mov.b32 	%f376, %r3476;
	add.s32 	%r340, %r16, -1073741824;
	and.b32  	%r3477, %r340, -8388608;
	setp.eq.s32 	%p51, %r3477, 0;
	@%p51 bra 	LBB0_29;
// %bb.27:                              // %__nv_fmaf_rn.exit4.i.i.i1148.preheader
	mov.f32 	%f220, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f219,%f220;
	// end inline asm
LBB0_28:                                // %__nv_fmaf_rn.exit4.i.i.i1148
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r341, %r3477, 192937984;
	add.s32 	%r342, %r341, %r3476;
	mov.b32 	%f221, %r342;
	mul.f32 	%f222, %f219, %f221;
	sub.f32 	%f223, %f221, %f222;
	fma.rn.f32 	%f224, %f223, %f219, %f222;
	sub.f32 	%f225, %f221, %f224;
	fma.rz.f32 	%f226, %f225, %f219, %f224;
	cvt.rzi.f32.f32 	%f227, %f226;
	sub.f32 	%f376, %f221, %f227;
	sub.s32 	%r3477, %r3477, %r341;
	mov.b32 	%r3476, %f376;
	setp.ne.s32 	%p52, %r3477, 0;
	setp.ne.s32 	%p53, %r3476, 0;
	and.pred  	%p54, %p52, %p53;
	@%p54 bra 	LBB0_28;
LBB0_29:                                // %__internal_fmodf_slowpath_mod.exit.i.i1150
	setp.gt.u32 	%p55, %r16, 2139095039;
	selp.f32 	%f228, 0f7FFFFFFF, 0f4B800000, %p55;
	mul.f32 	%f229, %f376, 0f34000000;
	mul.f32 	%f377, %f228, %f229;
	bra.uni 	LBB0_30;
LBB0_20:                                // %__nv_fast_fdividef.exit.i.i.i1120
	mov.f32 	%f211, 0f40000000;
	div.approx.f32 	%f212, %f377, %f211;
	cvt.rzi.f32.f32 	%f375, %f212;
	fma.rn.f32 	%f27, %f375, 0fC0000000, %f377;
	mov.b32 	%r15, %f27;
	setp.lt.u32 	%p46, %r15, 1073741824;
	@%p46 bra 	LBB0_25;
// %bb.21:
	setp.lt.u32 	%p47, %r15, -2147483647;
	@%p47 bra 	LBB0_23;
// %bb.22:
	add.f32 	%f217, %f375, 0fBF800000;
	setp.lt.f32 	%p50, %f27, 0fC0000000;
	add.f32 	%f218, %f217, 0fBF800000;
	selp.f32 	%f375, %f218, %f217, %p50;
	bra.uni 	LBB0_25;
LBB0_23:
	add.f32 	%f375, %f375, 0f3F800000;
	setp.ltu.f32 	%p48, %f27, 0f40800000;
	@%p48 bra 	LBB0_25;
// %bb.24:                              // %__nv_fmaf_rn.exit.i.i.i1125
	add.f32 	%f213, %f375, 0f3F800000;
	fma.rn.f32 	%f215, %f211, 0fC0400000, %f27;
	setp.ge.f32 	%p49, %f215, 0f00000000;
	add.f32 	%f216, %f213, 0f3F800000;
	selp.f32 	%f375, %f216, %f213, %p49;
LBB0_25:                                // %__internal_fmodf_fastpath_quot.exit.i.i1129
	fma.rn.f32 	%f377, %f375, 0fC0000000, %f377;
LBB0_30:                                // %__internal_fmodf_kernel.exit.i1154
	abs.f32 	%f230, %f377;
	setp.gtu.f32 	%p56, %f230, 0f7F800000;
	@%p56 bra 	LBB0_32;
// %bb.31:
	mov.b32 	%r343, %f24;
	and.b32  	%r344, %r343, -2147483648;
	mov.b32 	%r345, %f377;
	or.b32  	%r346, %r344, %r345;
	mov.b32 	%f377, %r346;
LBB0_32:                                // %__nv_fmodf.exit1155
	add.f32 	%f231, %f377, %f377;
	mov.b32 	%r347, %f231;
	and.b32  	%r348, %r347, -2147483648;
	or.b32  	%r349, %r348, 1056964608;
	mov.b32 	%f232, %r349;
	add.f32 	%f233, %f231, %f232;
	cvt.rzi.f32.f32 	%f234, %f233;
	abs.f32 	%f235, %f231;
	setp.gt.f32 	%p57, %f235, 0f4B000000;
	selp.f32 	%f236, %f231, %f234, %p57;
	cvt.rzi.f32.f32 	%f237, %f231;
	setp.lt.f32 	%p58, %f235, 0f3F000000;
	selp.f32 	%f238, %f237, %f236, %p58;
	cvt.rzi.s32.f32 	%r350, %f238;
	fma.rn.f32 	%f239, %f238, 0fBF000000, %f377;
	mul.f32 	%f240, %f239, %f239;
	fma.rn.f32 	%f241, %f240, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f242, %f240, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f243, %f241, %f240, 0fC0A55DF6;
	fma.rn.f32 	%f244, %f242, %f240, 0f4081E0CF;
	fma.rn.f32 	%f245, %f240, %f239, 0f00000000;
	fma.rn.f32 	%f246, %f244, %f240, 0fC09DE9E6;
	fma.rn.f32 	%f247, %f243, %f245, 0f00000000;
	fma.rn.f32 	%f248, %f246, %f240, 0f3F800000;
	fma.rn.f32 	%f249, %f239, 0f40490FDB, %f247;
	and.b32  	%r351, %r350, 1;
	setp.eq.b32 	%p59, %r351, 1;
	selp.f32 	%f250, %f248, %f249, %p59;
	selp.f32 	%f251, %f249, %f248, %p59;
	and.b32  	%r352, %r350, 2;
	setp.eq.s32 	%p60, %r352, 0;
	neg.f32 	%f252, %f250;
	selp.f32 	%f253, %f250, %f252, %p60;
	add.s32 	%r353, %r350, 1;
	and.b32  	%r354, %r353, 2;
	setp.eq.s32 	%p61, %r354, 0;
	mov.f32 	%f254, 0f00000000;
	sub.f32 	%f255, %f254, %f251;
	selp.f32 	%f256, %f251, %f255, %p61;
	cvt.rzi.f32.f32 	%f257, %f377;
	setp.eq.f32 	%p62, %f257, %f377;
	mul.f32 	%f258, %f377, 0f00000000;
	selp.f32 	%f380, %f258, %f253, %p62;
	abs.f32 	%f259, %f377;
	setp.gt.f32 	%p63, %f259, 0f4B800000;
	add.f32 	%f260, %f380, 0f3F800000;
	selp.f32 	%f379, %f260, %f256, %p63;
LBB0_33:                                // %L224
	selp.f32 	%f149, %f145, %f148, %p19;
	setp.gt.f32 	%p21, %f153, 0f4B800000;
	add.f32 	%f154, %f152, 0f3F800000;
	setp.gt.u32 	%p65, %r3, 23;
	or.pred  	%p66, %p22, %p65;
	mov.f32 	%f368, 0f40400000;
	mov.f32 	%f385, %f391;
	mov.f32 	%f386, %f391;
	@%p66 bra 	LBB0_49;
// %bb.34:                              // %L261
	cvt.u16.u32 	%rs9, %r3471;
	and.b16  	%rs10, %rs9, 255;
	mul.lo.s16 	%rs11, %rs10, 171;
	shr.u16 	%rs12, %rs11, 10;
	mul.lo.s16 	%rs13, %rs12, 6;
	sub.s16 	%rs14, %rs9, %rs13;
	and.b16  	%rs15, %rs14, 255;
	cvt.rn.f32.u16 	%f262, %rs15;
	div.approx.f32 	%f45, %f262, %f368;
	abs.f32 	%f383, %f45;
	setp.lt.f32 	%p67, %f383, 0f40000000;
	@%p67 bra 	LBB0_46;
// %bb.35:
	setp.gtu.f32 	%p68, %f383, 0f4B800000;
	@%p68 bra 	LBB0_42;
	bra.uni 	LBB0_36;
LBB0_42:
	mov.b32 	%r26, %f383;
	and.b32  	%r362, %r26, 8388607;
	or.b32  	%r3478, %r362, 1065353216;
	mov.b32 	%f382, %r3478;
	add.s32 	%r363, %r26, -1073741824;
	and.b32  	%r3479, %r363, -8388608;
	setp.eq.s32 	%p74, %r3479, 0;
	@%p74 bra 	LBB0_45;
// %bb.43:                              // %__nv_fmaf_rn.exit4.i.i.i1194.preheader
	mov.f32 	%f273, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f272,%f273;
	// end inline asm
LBB0_44:                                // %__nv_fmaf_rn.exit4.i.i.i1194
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r364, %r3479, 192937984;
	add.s32 	%r365, %r364, %r3478;
	mov.b32 	%f274, %r365;
	mul.f32 	%f275, %f272, %f274;
	sub.f32 	%f276, %f274, %f275;
	fma.rn.f32 	%f277, %f276, %f272, %f275;
	sub.f32 	%f278, %f274, %f277;
	fma.rz.f32 	%f279, %f278, %f272, %f277;
	cvt.rzi.f32.f32 	%f280, %f279;
	sub.f32 	%f382, %f274, %f280;
	sub.s32 	%r3479, %r3479, %r364;
	mov.b32 	%r3478, %f382;
	setp.ne.s32 	%p75, %r3479, 0;
	setp.ne.s32 	%p76, %r3478, 0;
	and.pred  	%p77, %p75, %p76;
	@%p77 bra 	LBB0_44;
LBB0_45:                                // %__internal_fmodf_slowpath_mod.exit.i.i1196
	setp.gt.u32 	%p78, %r26, 2139095039;
	selp.f32 	%f281, 0f7FFFFFFF, 0f4B800000, %p78;
	mul.f32 	%f282, %f382, 0f34000000;
	mul.f32 	%f383, %f281, %f282;
	bra.uni 	LBB0_46;
LBB0_36:                                // %__nv_fast_fdividef.exit.i.i.i1166
	mov.f32 	%f264, 0f40000000;
	div.approx.f32 	%f265, %f383, %f264;
	cvt.rzi.f32.f32 	%f381, %f265;
	fma.rn.f32 	%f48, %f381, 0fC0000000, %f383;
	mov.b32 	%r25, %f48;
	setp.lt.u32 	%p69, %r25, 1073741824;
	@%p69 bra 	LBB0_41;
// %bb.37:
	setp.lt.u32 	%p70, %r25, -2147483647;
	@%p70 bra 	LBB0_39;
// %bb.38:
	add.f32 	%f270, %f381, 0fBF800000;
	setp.lt.f32 	%p73, %f48, 0fC0000000;
	add.f32 	%f271, %f270, 0fBF800000;
	selp.f32 	%f381, %f271, %f270, %p73;
	bra.uni 	LBB0_41;
LBB0_39:
	add.f32 	%f381, %f381, 0f3F800000;
	setp.ltu.f32 	%p71, %f48, 0f40800000;
	@%p71 bra 	LBB0_41;
// %bb.40:                              // %__nv_fmaf_rn.exit.i.i.i1171
	add.f32 	%f266, %f381, 0f3F800000;
	fma.rn.f32 	%f268, %f264, 0fC0400000, %f48;
	setp.ge.f32 	%p72, %f268, 0f00000000;
	add.f32 	%f269, %f266, 0f3F800000;
	selp.f32 	%f381, %f269, %f266, %p72;
LBB0_41:                                // %__internal_fmodf_fastpath_quot.exit.i.i1175
	fma.rn.f32 	%f383, %f381, 0fC0000000, %f383;
LBB0_46:                                // %__internal_fmodf_kernel.exit.i1200
	abs.f32 	%f283, %f383;
	setp.gtu.f32 	%p79, %f283, 0f7F800000;
	@%p79 bra 	LBB0_48;
// %bb.47:
	mov.b32 	%r366, %f45;
	and.b32  	%r367, %r366, -2147483648;
	mov.b32 	%r368, %f383;
	or.b32  	%r369, %r367, %r368;
	mov.b32 	%f383, %r369;
LBB0_48:                                // %__nv_fmodf.exit1201
	add.f32 	%f284, %f383, %f383;
	mov.b32 	%r370, %f284;
	and.b32  	%r371, %r370, -2147483648;
	or.b32  	%r372, %r371, 1056964608;
	mov.b32 	%f285, %r372;
	add.f32 	%f286, %f284, %f285;
	cvt.rzi.f32.f32 	%f287, %f286;
	abs.f32 	%f288, %f284;
	setp.gt.f32 	%p80, %f288, 0f4B000000;
	selp.f32 	%f289, %f284, %f287, %p80;
	cvt.rzi.f32.f32 	%f290, %f284;
	setp.lt.f32 	%p81, %f288, 0f3F000000;
	selp.f32 	%f291, %f290, %f289, %p81;
	cvt.rzi.s32.f32 	%r373, %f291;
	fma.rn.f32 	%f292, %f291, 0fBF000000, %f383;
	mul.f32 	%f293, %f292, %f292;
	fma.rn.f32 	%f294, %f293, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f295, %f293, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f296, %f294, %f293, 0fC0A55DF6;
	fma.rn.f32 	%f297, %f295, %f293, 0f4081E0CF;
	fma.rn.f32 	%f298, %f293, %f292, 0f00000000;
	fma.rn.f32 	%f299, %f297, %f293, 0fC09DE9E6;
	fma.rn.f32 	%f300, %f296, %f298, 0f00000000;
	fma.rn.f32 	%f301, %f299, %f293, 0f3F800000;
	fma.rn.f32 	%f302, %f292, 0f40490FDB, %f300;
	and.b32  	%r374, %r373, 1;
	setp.eq.b32 	%p82, %r374, 1;
	selp.f32 	%f303, %f301, %f302, %p82;
	selp.f32 	%f304, %f302, %f301, %p82;
	and.b32  	%r375, %r373, 2;
	setp.eq.s32 	%p83, %r375, 0;
	neg.f32 	%f305, %f303;
	selp.f32 	%f306, %f303, %f305, %p83;
	add.s32 	%r376, %r373, 1;
	and.b32  	%r377, %r376, 2;
	setp.eq.s32 	%p84, %r377, 0;
	mov.f32 	%f307, 0f00000000;
	sub.f32 	%f308, %f307, %f304;
	selp.f32 	%f309, %f304, %f308, %p84;
	cvt.rzi.f32.f32 	%f310, %f383;
	setp.eq.f32 	%p85, %f310, %f383;
	mul.f32 	%f311, %f383, 0f00000000;
	selp.f32 	%f386, %f311, %f306, %p85;
	abs.f32 	%f312, %f383;
	setp.gt.f32 	%p86, %f312, 0f4B800000;
	add.f32 	%f313, %f386, 0f3F800000;
	selp.f32 	%f385, %f313, %f309, %p86;
LBB0_49:                                // %L277
	selp.f32 	%f155, %f154, %f149, %p21;
	or.pred  	%p89, %p43, %p65;
	mov.f32 	%f392, %f391;
	@%p89 bra 	LBB0_65;
// %bb.50:                              // %L285
	mul.hi.u32 	%r379, %r3472, -1431655765;
	shr.u32 	%r380, %r379, 2;
	mul.lo.s32 	%r381, %r380, 6;
	sub.s32 	%r382, %r3472, %r381;
	cvt.rn.f32.s32 	%f315, %r382;
	div.approx.f32 	%f66, %f315, %f368;
	abs.f32 	%f389, %f66;
	setp.lt.f32 	%p90, %f389, 0f40000000;
	@%p90 bra 	LBB0_62;
// %bb.51:
	setp.gtu.f32 	%p91, %f389, 0f4B800000;
	@%p91 bra 	LBB0_58;
	bra.uni 	LBB0_52;
LBB0_58:
	mov.b32 	%r34, %f389;
	and.b32  	%r383, %r34, 8388607;
	or.b32  	%r3480, %r383, 1065353216;
	mov.b32 	%f388, %r3480;
	add.s32 	%r384, %r34, -1073741824;
	and.b32  	%r3481, %r384, -8388608;
	setp.eq.s32 	%p97, %r3481, 0;
	@%p97 bra 	LBB0_61;
// %bb.59:                              // %__nv_fmaf_rn.exit4.i.i.i1240.preheader
	mov.f32 	%f326, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f325,%f326;
	// end inline asm
LBB0_60:                                // %__nv_fmaf_rn.exit4.i.i.i1240
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r385, %r3481, 192937984;
	add.s32 	%r386, %r385, %r3480;
	mov.b32 	%f327, %r386;
	mul.f32 	%f328, %f325, %f327;
	sub.f32 	%f329, %f327, %f328;
	fma.rn.f32 	%f330, %f329, %f325, %f328;
	sub.f32 	%f331, %f327, %f330;
	fma.rz.f32 	%f332, %f331, %f325, %f330;
	cvt.rzi.f32.f32 	%f333, %f332;
	sub.f32 	%f388, %f327, %f333;
	sub.s32 	%r3481, %r3481, %r385;
	mov.b32 	%r3480, %f388;
	setp.ne.s32 	%p98, %r3481, 0;
	setp.ne.s32 	%p99, %r3480, 0;
	and.pred  	%p100, %p98, %p99;
	@%p100 bra 	LBB0_60;
LBB0_61:                                // %__internal_fmodf_slowpath_mod.exit.i.i1242
	setp.gt.u32 	%p101, %r34, 2139095039;
	selp.f32 	%f334, 0f7FFFFFFF, 0f4B800000, %p101;
	mul.f32 	%f335, %f388, 0f34000000;
	mul.f32 	%f389, %f334, %f335;
	bra.uni 	LBB0_62;
LBB0_52:                                // %__nv_fast_fdividef.exit.i.i.i1212
	mov.f32 	%f317, 0f40000000;
	div.approx.f32 	%f318, %f389, %f317;
	cvt.rzi.f32.f32 	%f387, %f318;
	fma.rn.f32 	%f69, %f387, 0fC0000000, %f389;
	mov.b32 	%r33, %f69;
	setp.lt.u32 	%p92, %r33, 1073741824;
	@%p92 bra 	LBB0_57;
// %bb.53:
	setp.lt.u32 	%p93, %r33, -2147483647;
	@%p93 bra 	LBB0_55;
// %bb.54:
	add.f32 	%f323, %f387, 0fBF800000;
	setp.lt.f32 	%p96, %f69, 0fC0000000;
	add.f32 	%f324, %f323, 0fBF800000;
	selp.f32 	%f387, %f324, %f323, %p96;
	bra.uni 	LBB0_57;
LBB0_55:
	add.f32 	%f387, %f387, 0f3F800000;
	setp.ltu.f32 	%p94, %f69, 0f40800000;
	@%p94 bra 	LBB0_57;
// %bb.56:                              // %__nv_fmaf_rn.exit.i.i.i1217
	add.f32 	%f319, %f387, 0f3F800000;
	fma.rn.f32 	%f321, %f317, 0fC0400000, %f69;
	setp.ge.f32 	%p95, %f321, 0f00000000;
	add.f32 	%f322, %f319, 0f3F800000;
	selp.f32 	%f387, %f322, %f319, %p95;
LBB0_57:                                // %__internal_fmodf_fastpath_quot.exit.i.i1221
	fma.rn.f32 	%f389, %f387, 0fC0000000, %f389;
LBB0_62:                                // %__internal_fmodf_kernel.exit.i1246
	abs.f32 	%f336, %f389;
	setp.gtu.f32 	%p102, %f336, 0f7F800000;
	@%p102 bra 	LBB0_64;
// %bb.63:
	mov.b32 	%r387, %f66;
	and.b32  	%r388, %r387, -2147483648;
	mov.b32 	%r389, %f389;
	or.b32  	%r390, %r388, %r389;
	mov.b32 	%f389, %r390;
LBB0_64:                                // %__nv_fmodf.exit1247
	add.f32 	%f337, %f389, %f389;
	mov.b32 	%r391, %f337;
	and.b32  	%r392, %r391, -2147483648;
	or.b32  	%r393, %r392, 1056964608;
	mov.b32 	%f338, %r393;
	add.f32 	%f339, %f337, %f338;
	cvt.rzi.f32.f32 	%f340, %f339;
	abs.f32 	%f341, %f337;
	setp.gt.f32 	%p103, %f341, 0f4B000000;
	selp.f32 	%f342, %f337, %f340, %p103;
	cvt.rzi.f32.f32 	%f343, %f337;
	setp.lt.f32 	%p104, %f341, 0f3F000000;
	selp.f32 	%f344, %f343, %f342, %p104;
	cvt.rzi.s32.f32 	%r394, %f344;
	fma.rn.f32 	%f345, %f344, 0fBF000000, %f389;
	mul.f32 	%f346, %f345, %f345;
	fma.rn.f32 	%f347, %f346, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f348, %f346, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f349, %f347, %f346, 0fC0A55DF6;
	fma.rn.f32 	%f350, %f348, %f346, 0f4081E0CF;
	fma.rn.f32 	%f351, %f346, %f345, 0f00000000;
	fma.rn.f32 	%f352, %f350, %f346, 0fC09DE9E6;
	fma.rn.f32 	%f353, %f349, %f351, 0f00000000;
	fma.rn.f32 	%f354, %f352, %f346, 0f3F800000;
	fma.rn.f32 	%f355, %f345, 0f40490FDB, %f353;
	and.b32  	%r395, %r394, 1;
	setp.eq.b32 	%p105, %r395, 1;
	selp.f32 	%f356, %f354, %f355, %p105;
	selp.f32 	%f357, %f355, %f354, %p105;
	and.b32  	%r396, %r394, 2;
	setp.eq.s32 	%p106, %r396, 0;
	neg.f32 	%f358, %f356;
	selp.f32 	%f359, %f356, %f358, %p106;
	add.s32 	%r397, %r394, 1;
	and.b32  	%r398, %r397, 2;
	setp.eq.s32 	%p107, %r398, 0;
	mov.f32 	%f360, 0f00000000;
	sub.f32 	%f361, %f360, %f357;
	selp.f32 	%f362, %f357, %f361, %p107;
	cvt.rzi.f32.f32 	%f363, %f389;
	setp.eq.f32 	%p108, %f363, %f389;
	mul.f32 	%f364, %f389, 0f00000000;
	selp.f32 	%f392, %f364, %f359, %p108;
	abs.f32 	%f365, %f389;
	setp.gt.f32 	%p109, %f365, 0f4B800000;
	add.f32 	%f366, %f392, 0f3F800000;
	selp.f32 	%f391, %f366, %f362, %p109;
LBB0_65:                                // %L301
	mov.b32 	%r305, %f155;
	mov.b32 	%r308, %f152;
	mov.b32 	%r400, %f385;
	mov.b32 	%r401, %f391;
	mov.b32 	%r406, %f386;
	mov.b32 	%r407, %f392;
	mov.u32 	%r3482, 999999999;
	cvt.u16.u32 	%rs269, %r3;
	@%p65 bra 	LBB0_67;
// %bb.66:                              // %L337
	ld.param.u64 	%rd1, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1];
	and.b16  	%rs17, %rs269, 255;
	mul.lo.s16 	%rs18, %rs17, 171;
	shr.u16 	%rs19, %rs18, 12;
	mul.lo.s16 	%rs20, %rs19, 24;
	sub.s16 	%rs21, %rs269, %rs20;
	cvt.u32.u16 	%r412, %rs21;
	and.b32  	%r413, %r412, 255;
	mad.lo.s32 	%r414, %r413, 24, %r1;
	cvt.u16.u32 	%rs22, %r414;
	mul.hi.u16 	%rs23, %rs22, -7281;
	shr.u16 	%rs24, %rs23, 9;
	mul.lo.s16 	%rs25, %rs24, 576;
	sub.s16 	%rs26, %rs22, %rs25;
	cvt.u32.u16 	%r415, %rs26;
	mul.wide.u32 	%rd21, %r415, 4;
	add.s64 	%rd22, %rd1, %rd21;
	ld.global.u32 	%r416, [%rd22];
	cvt.s32.s16 	%r417, %r416;
	shr.s32 	%r418, %r416, 16;
	mul.lo.s32 	%r419, %r418, 801;
	mad.lo.s32 	%r3482, %r417, 33, %r419;
LBB0_67:                                // %L414
	xor.b32  	%r304, %r308, -2147483648;
	mov.b32 	%r356, %f373;
	mov.b32 	%r357, %f379;
	mov.b32 	%r359, %f374;
	mov.b32 	%r360, %f380;
	xor.b32  	%r403, %r406, -2147483648;
	xor.b32  	%r404, %r407, -2147483648;
	and.b32  	%r47, %r3, 24;
	setp.ne.s32 	%p111, %r47, 24;
	cvt.u16.u32 	%rs270, %r6;
	@%p111 bra 	LBB0_69;
// %bb.68:                              // %L414.L719_crit_edge
	cvt.u16.u32 	%rs39, %r1;
	and.b16  	%rs40, %rs39, 255;
	mul.lo.s16 	%rs41, %rs40, 171;
	shr.u16 	%rs42, %rs41, 10;
	mul.lo.s16 	%rs43, %rs42, -6;
	add.s16 	%rs44, %rs43, %rs39;
	cvt.u32.u16 	%r435, %rs44;
	and.b32  	%r3486, %r435, 255;
	cvt.u32.u16 	%r3485, %rs42;
	mul.lo.s16 	%rs46, %rs270, 171;
	shr.u16 	%rs47, %rs46, 10;
	mul.lo.s16 	%rs48, %rs47, 6;
	sub.s16 	%rs49, %rs270, %rs48;
	cvt.u32.u16 	%r436, %rs49;
	and.b32  	%r3484, %r436, 255;
	mul.wide.u16 	%r3483, %rs42, 6;
	mov.u32 	%r3487, 0;
	mov.u32 	%r3488, %r3487;
	bra.uni 	LBB0_70;
LBB0_69:                                // %L440
	ld.param.u64 	%rd2, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2];
	mul.lo.s32 	%r420, %r4, 1152;
	mul.lo.s16 	%rs28, %rs270, 171;
	shr.u16 	%rs29, %rs28, 10;
	mul.lo.s16 	%rs30, %rs29, 6;
	sub.s16 	%rs31, %rs270, %rs30;
	cvt.u32.u16 	%r421, %rs31;
	and.b32  	%r3484, %r421, 255;
	and.b16  	%rs32, %rs31, 255;
	mul.wide.u16 	%r422, %rs32, 24;
	cvt.u16.u32 	%rs33, %r1;
	and.b16  	%rs34, %rs33, 255;
	mul.lo.s16 	%rs35, %rs34, 171;
	shr.u16 	%rs36, %rs35, 10;
	cvt.u32.u16 	%r3485, %rs36;
	mul.wide.u16 	%r3483, %rs36, 6;
	mul.lo.s16 	%rs37, %rs36, -6;
	add.s16 	%rs38, %rs37, %rs33;
	cvt.u32.u16 	%r424, %rs38;
	and.b32  	%r3486, %r424, 255;
	mad.lo.s32 	%r425, %r5, 144, %r420;
	or.b32  	%r426, %r425, %r3486;
	add.s32 	%r427, %r426, %r3483;
	add.s32 	%r428, %r427, %r422;
	mul.wide.u32 	%rd23, %r428, 4;
	add.s64 	%rd24, %rd2, %rd23;
	ld.global.u32 	%r3487, [%rd24];
	add.s32 	%r429, %r425, 576;
	or.b32  	%r430, %r429, %r3486;
	add.s32 	%r431, %r430, %r3483;
	add.s32 	%r432, %r431, %r422;
	mul.wide.u32 	%rd25, %r432, 4;
	add.s64 	%rd26, %rd2, %rd25;
	ld.global.u32 	%r3488, [%rd26];
LBB0_70:                                // %L719
	ld.param.u64 	%rd3, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3];
	ld.param.u64 	%rd4, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4];
	// begin inline asm
	cvt.rn.f16x2.f32 %r303, %r305, %r304;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r306, %r308, %r305;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r355, %r357, %r356;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r358, %r360, %r359;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r399, %r401, %r400;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r402, %r404, %r403;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r405, %r407, %r406;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r408, %r401, %r400;
	// end inline asm
	mov.u32 	%r3473, 0;
	shl.b32 	%r64, %r3, 2;
	and.b32  	%r65, %r64, 60;
	shl.b32 	%r438, %r3, 3;
	and.b32  	%r66, %r438, 128;
	shl.b32 	%r67, %r4, 8;
	or.b32  	%r439, %r67, %r66;
	or.b32  	%r68, %r439, 65;
	add.s32 	%r69, %r1, 24;
	and.b16  	%rs1, %rs269, 16;
	and.b32  	%r440, %r229, 30;
	shr.u32 	%r441, %r3, 4;
	or.b32  	%r442, %r440, %r441;
	mul.lo.s32 	%r70, %r442, 257;
	or.b32  	%r443, %r441, %r229;
	or.b32  	%r444, %r443, 32;
	mul.lo.s32 	%r71, %r444, 257;
	shr.u32 	%r445, %r1, 3;
	and.b16  	%rs51, %rs269, 255;
	mul.lo.s16 	%rs52, %rs51, 171;
	shr.u16 	%rs53, %rs52, 12;
	mul.lo.s16 	%rs54, %rs53, 24;
	sub.s16 	%rs55, %rs269, %rs54;
	cvt.u32.u16 	%r446, %rs55;
	and.b32  	%r72, %r446, 255;
	and.b32  	%r447, %r2, 224;
	mad.lo.s32 	%r73, %r445, 257, %r447;
	shr.u32 	%r448, %r69, 3;
	mad.lo.s32 	%r74, %r448, 257, %r447;
	add.s32 	%r449, %r1, 48;
	shr.u32 	%r450, %r449, 3;
	mad.lo.s32 	%r75, %r450, 257, %r447;
	add.s32 	%r451, %r1, 72;
	shr.u32 	%r452, %r451, 3;
	mad.lo.s32 	%r76, %r452, 257, %r447;
	or.b32  	%r453, %r445, 12;
	mad.lo.s32 	%r77, %r453, 257, %r447;
	add.s32 	%r454, %r1, 120;
	shr.u32 	%r455, %r454, 3;
	mad.lo.s32 	%r78, %r455, 257, %r447;
	add.s32 	%r456, %r1, 144;
	shr.u32 	%r457, %r456, 3;
	mad.lo.s32 	%r79, %r457, 257, %r447;
	add.s32 	%r458, %r1, 168;
	shr.u32 	%r459, %r458, 3;
	mad.lo.s32 	%r80, %r459, 257, %r447;
	or.b32  	%r460, %r445, 24;
	mad.lo.s32 	%r81, %r460, 257, %r447;
	add.s32 	%r461, %r1, 216;
	shr.u32 	%r462, %r461, 3;
	mad.lo.s32 	%r82, %r462, 257, %r447;
	add.s32 	%r463, %r1, 240;
	shr.u32 	%r464, %r463, 3;
	mad.lo.s32 	%r83, %r464, 257, %r447;
	add.s32 	%r465, %r1, 264;
	shr.u32 	%r466, %r465, 3;
	mad.lo.s32 	%r84, %r466, 257, %r447;
	or.b32  	%r467, %r445, 36;
	mad.lo.s32 	%r85, %r467, 257, %r447;
	add.s32 	%r468, %r1, 312;
	shr.u32 	%r469, %r468, 3;
	mad.lo.s32 	%r86, %r469, 257, %r447;
	add.s32 	%r470, %r1, 336;
	shr.u32 	%r471, %r470, 3;
	mad.lo.s32 	%r87, %r471, 257, %r447;
	add.s32 	%r472, %r1, 360;
	shr.u32 	%r473, %r472, 3;
	mad.lo.s32 	%r88, %r473, 257, %r447;
	or.b32  	%r474, %r445, 48;
	mad.lo.s32 	%r89, %r474, 257, %r447;
	add.s32 	%r475, %r1, 408;
	shr.u32 	%r476, %r475, 3;
	mad.lo.s32 	%r90, %r476, 257, %r447;
	add.s32 	%r477, %r1, 432;
	shr.u32 	%r478, %r477, 3;
	mad.lo.s32 	%r91, %r478, 257, %r447;
	add.s32 	%r479, %r1, 456;
	shr.u32 	%r480, %r479, 3;
	mad.lo.s32 	%r92, %r480, 257, %r447;
	or.b32  	%r481, %r445, 60;
	mad.lo.s32 	%r93, %r481, 257, %r447;
	add.s32 	%r482, %r1, 504;
	bfe.u32 	%r483, %r482, 3, 6;
	mad.lo.s32 	%r94, %r483, 257, %r447;
	mul.lo.s32 	%r484, %r5, 4806;
	mad.lo.s32 	%r485, %r3485, 198, %r484;
	mad.lo.s32 	%r486, %r3486, 33, %r485;
	mad.lo.s32 	%r487, %r3484, 801, %r486;
	and.b32  	%r488, %r6, 1;
	mul.lo.s32 	%r489, %r488, 1028;
	mul.lo.s32 	%r490, %r441, 257;
	bfe.u32 	%r491, %r3, 1, 1;
	mul.lo.s32 	%r492, %r491, 2056;
	and.b32  	%r493, %r3, 1;
	mul.lo.s32 	%r494, %r493, 4112;
	bfe.u32 	%r495, %r3, 3, 1;
	mul.lo.s32 	%r496, %r495, 514;
	add.s32 	%r497, %r494, %r490;
	add.s32 	%r498, %r497, %r3486;
	add.s32 	%r499, %r498, %r489;
	add.s32 	%r500, %r499, %r492;
	add.s32 	%r501, %r500, %r496;
	add.s32 	%r95, %r501, %r3483;
	mul.wide.u32 	%rd27, %r95, 4;
	mov.u64 	%rd28, shmem;
	add.s64 	%rd6, %rd28, %rd27;
	add.s32 	%r502, %r497, %r489;
	add.s32 	%r503, %r502, %r3486;
	add.s32 	%r504, %r503, %r492;
	add.s32 	%r505, %r504, %r496;
	add.s32 	%r506, %r505, %r3483;
	add.s32 	%r96, %r506, 8256;
	cvt.u64.u32 	%rd29, %r3483;
	cvt.u64.u32 	%rd30, %r496;
	cvt.u64.u32 	%rd31, %r492;
	cvt.u64.u32 	%rd32, %r3486;
	cvt.u64.u32 	%rd33, %r489;
	cvt.u64.u32 	%rd34, %r494;
	cvt.u64.u32 	%rd35, %r490;
	add.s64 	%rd36, %rd35, %rd34;
	add.s64 	%rd37, %rd36, %rd33;
	add.s64 	%rd38, %rd37, %rd32;
	add.s64 	%rd39, %rd38, %rd31;
	add.s64 	%rd40, %rd39, %rd30;
	add.s64 	%rd41, %rd40, %rd29;
	shl.b64 	%rd42, %rd41, 2;
	add.s64 	%rd7, %rd28, %rd42;
	add.s32 	%r97, %r95, 32;
	add.s32 	%r98, %r506, 8288;
	bfe.u32 	%r507, %r1, 2, 1;
	shr.u32 	%r508, %r1, 4;
	mul.lo.s32 	%r509, %r508, 257;
	bfe.u32 	%r510, %r1, 1, 1;
	and.b32  	%r511, %r1, 1;
	bfe.u32 	%r512, %r1, 3, 1;
	mad.lo.s32 	%r513, %r5, 6, %r509;
	mad.lo.s32 	%r514, %r511, 4112, %r513;
	mad.lo.s32 	%r515, %r507, 1028, %r514;
	mad.lo.s32 	%r516, %r510, 2056, %r515;
	mad.lo.s32 	%r517, %r512, 514, %r516;
	add.s32 	%r99, %r517, %r3484;
	mul.wide.u32 	%rd43, %r99, 4;
	add.s64 	%rd8, %rd28, %rd43;
	add.s32 	%r100, %r99, 8256;
	mul.wide.u32 	%rd44, %r100, 4;
	add.s64 	%rd9, %rd28, %rd44;
	add.s32 	%r101, %r99, 32;
	mul.wide.u32 	%rd45, %r101, 4;
	add.s64 	%rd10, %rd28, %rd45;
	add.s32 	%r102, %r99, 8288;
	mul.wide.u32 	%rd46, %r102, 4;
	add.s64 	%rd11, %rd28, %rd46;
	mul.lo.s32 	%r518, %r4, 58752;
	cvt.u16.u32 	%rs56, %r1;
	shl.b16 	%rs57, %rs56, 1;
	and.b16  	%rs58, %rs57, 254;
	mul.lo.s16 	%rs59, %rs58, 171;
	shr.u16 	%rs60, %rs59, 13;
	mul.lo.s16 	%rs61, %rs60, 48;
	sub.s16 	%rs62, %rs57, %rs61;
	cvt.u32.u16 	%r519, %rs62;
	and.b32  	%r520, %r519, 254;
	or.b32  	%r521, %r518, %r72;
	mad.lo.s32 	%r103, %r520, 24, %r521;
	or.b16  	%rs63, %rs57, 1;
	and.b16  	%rs64, %rs63, 255;
	mul.lo.s16 	%rs65, %rs64, 171;
	shr.u16 	%rs66, %rs65, 13;
	mul.lo.s16 	%rs67, %rs66, 48;
	sub.s16 	%rs68, %rs63, %rs67;
	cvt.u32.u16 	%r522, %rs68;
	and.b32  	%r523, %r522, 255;
	mad.lo.s32 	%r104, %r523, 24, %r521;
	mul.wide.u32 	%rd47, %r487, 4;
	add.s64 	%rd12, %rd28, %rd47;
	setp.gt.u32 	%p112, %r1, 7;
	setp.eq.s16 	%p113, %rs1, 0;
	setp.lt.u32 	%p115, %r3, 24;
	mov.u32 	%r3489, %r3473;
	mov.u32 	%r3520, %r3473;
	mov.u32 	%r3521, %r3473;
	mov.u32 	%r3522, %r3473;
	mov.u32 	%r3523, %r3473;
	bra.uni 	LBB0_71;
LBB0_92:                                // %L31476
                                        //   in Loop: Header=BB0_71 Depth=1
	add.s32 	%r218, %r3489, 48;
	setp.ne.s32 	%p141, %r3489, 2016;
	mov.u32 	%r3489, %r218;
	@%p141 bra 	LBB0_71;
	bra.uni 	LBB0_93;
LBB0_71:                                // %L722
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_73 Depth 2
                                        //     Child Loop BB0_83 Depth 2
	mul.hi.u32 	%r717, %r3489, -1431655765;
	shr.u32 	%r718, %r717, 5;
	mul.lo.s32 	%r110, %r718, 48;
	add.s32 	%r719, %r110, %r1;
	cvt.u16.u32 	%rs69, %r719;
	mul.hi.s16 	%rs70, %rs69, 16257;
	shr.u16 	%rs71, %rs70, 15;
	shr.s16 	%rs72, %rs70, 9;
	add.s16 	%rs73, %rs72, %rs71;
	mul.lo.s16 	%rs74, %rs73, 2064;
	sub.s16 	%rs75, %rs69, %rs74;
	cvt.u32.u16 	%r720, %rs75;
	shl.b32 	%r721, %r720, 16;
	or.b32  	%r722, %r721, %r65;
	or.b32  	%r723, %r722, %r66;
	or.b32  	%r724, %r723, %r67;
	mul.wide.s32 	%rd48, %r724, 4;
	add.s64 	%rd49, %rd3, %rd48;
	ld.global.v4.u32 	{%r725, %r726, %r727, %r728}, [%rd49];
	or.b32  	%r729, %r721, %r64;
	or.b32  	%r730, %r68, %r729;
	add.s32 	%r731, %r730, -1;
	mul.wide.s32 	%rd50, %r731, 4;
	add.s64 	%rd51, %rd3, %rd50;
	ld.global.v4.u32 	{%r732, %r733, %r734, %r735}, [%rd51];
	add.s32 	%r736, %r69, %r110;
	cvt.u16.u32 	%rs76, %r736;
	mul.hi.s16 	%rs77, %rs76, 16257;
	shr.u16 	%rs78, %rs77, 15;
	shr.s16 	%rs79, %rs77, 9;
	add.s16 	%rs80, %rs79, %rs78;
	mul.lo.s16 	%rs81, %rs80, 2064;
	sub.s16 	%rs82, %rs76, %rs81;
	cvt.u32.u16 	%r737, %rs82;
	shl.b32 	%r738, %r737, 16;
	or.b32  	%r739, %r738, %r65;
	or.b32  	%r740, %r739, %r66;
	or.b32  	%r741, %r740, %r67;
	mul.wide.s32 	%rd52, %r741, 4;
	add.s64 	%rd53, %rd3, %rd52;
	ld.global.v4.u32 	{%r742, %r743, %r744, %r745}, [%rd53];
	or.b32  	%r746, %r738, %r64;
	or.b32  	%r747, %r68, %r746;
	add.s32 	%r748, %r747, -1;
	mul.wide.s32 	%rd54, %r748, 4;
	add.s64 	%rd55, %rd3, %rd54;
	ld.global.v4.u32 	{%r749, %r750, %r751, %r752}, [%rd55];
	selp.b32 	%r753, %r727, %r725, %p113;
	shfl.sync.bfly.b32	%r754, %r753, 16, 31, -1;
	selp.b32 	%r526, %r725, %r754, %p113;
	selp.b32 	%r531, %r754, %r727, %p113;
	selp.b32 	%r755, %r728, %r726, %p113;
	shfl.sync.bfly.b32	%r756, %r755, 16, 31, -1;
	selp.b32 	%r534, %r726, %r756, %p113;
	selp.b32 	%r539, %r756, %r728, %p113;
	selp.b32 	%r757, %r734, %r732, %p113;
	shfl.sync.bfly.b32	%r758, %r757, 16, 31, -1;
	selp.b32 	%r542, %r732, %r758, %p113;
	selp.b32 	%r547, %r758, %r734, %p113;
	selp.b32 	%r759, %r735, %r733, %p113;
	shfl.sync.bfly.b32	%r760, %r759, 16, 31, -1;
	selp.b32 	%r550, %r733, %r760, %p113;
	selp.b32 	%r555, %r760, %r735, %p113;
	selp.b32 	%r761, %r744, %r742, %p113;
	shfl.sync.bfly.b32	%r762, %r761, 16, 31, -1;
	selp.b32 	%r558, %r742, %r762, %p113;
	selp.b32 	%r563, %r762, %r744, %p113;
	selp.b32 	%r763, %r745, %r743, %p113;
	shfl.sync.bfly.b32	%r764, %r763, 16, 31, -1;
	selp.b32 	%r566, %r743, %r764, %p113;
	selp.b32 	%r571, %r764, %r745, %p113;
	selp.b32 	%r765, %r751, %r749, %p113;
	shfl.sync.bfly.b32	%r766, %r765, 16, 31, -1;
	selp.b32 	%r574, %r749, %r766, %p113;
	selp.b32 	%r579, %r766, %r751, %p113;
	selp.b32 	%r767, %r752, %r750, %p113;
	shfl.sync.bfly.b32	%r768, %r767, 16, 31, -1;
	selp.b32 	%r582, %r750, %r768, %p113;
	selp.b32 	%r587, %r768, %r752, %p113;
	shl.b32 	%r527, %r531, 4;
	mov.u32 	%r525, 252645135;
	// begin inline asm
	lop3.b32 %r589, %r525, %r526, %r527, 202;
	// end inline asm
	shr.u32 	%r530, %r526, 4;
	// begin inline asm
	lop3.b32 %r605, %r525, %r530, %r531, 202;
	// end inline asm
	shl.b32 	%r535, %r539, 4;
	// begin inline asm
	lop3.b32 %r597, %r525, %r534, %r535, 202;
	// end inline asm
	shr.u32 	%r538, %r534, 4;
	// begin inline asm
	lop3.b32 %r613, %r525, %r538, %r539, 202;
	// end inline asm
	shl.b32 	%r543, %r547, 4;
	// begin inline asm
	lop3.b32 %r621, %r525, %r542, %r543, 202;
	// end inline asm
	shr.u32 	%r546, %r542, 4;
	// begin inline asm
	lop3.b32 %r637, %r525, %r546, %r547, 202;
	// end inline asm
	shl.b32 	%r551, %r555, 4;
	// begin inline asm
	lop3.b32 %r629, %r525, %r550, %r551, 202;
	// end inline asm
	shr.u32 	%r554, %r550, 4;
	// begin inline asm
	lop3.b32 %r645, %r525, %r554, %r555, 202;
	// end inline asm
	shl.b32 	%r559, %r563, 4;
	// begin inline asm
	lop3.b32 %r590, %r525, %r558, %r559, 202;
	// end inline asm
	shr.u32 	%r562, %r558, 4;
	// begin inline asm
	lop3.b32 %r606, %r525, %r562, %r563, 202;
	// end inline asm
	shl.b32 	%r567, %r571, 4;
	// begin inline asm
	lop3.b32 %r598, %r525, %r566, %r567, 202;
	// end inline asm
	shr.u32 	%r570, %r566, 4;
	// begin inline asm
	lop3.b32 %r614, %r525, %r570, %r571, 202;
	// end inline asm
	shl.b32 	%r575, %r579, 4;
	// begin inline asm
	lop3.b32 %r622, %r525, %r574, %r575, 202;
	// end inline asm
	shr.u32 	%r578, %r574, 4;
	// begin inline asm
	lop3.b32 %r638, %r525, %r578, %r579, 202;
	// end inline asm
	shl.b32 	%r583, %r587, 4;
	// begin inline asm
	lop3.b32 %r630, %r525, %r582, %r583, 202;
	// end inline asm
	shr.u32 	%r586, %r582, 4;
	// begin inline asm
	lop3.b32 %r646, %r525, %r586, %r587, 202;
	// end inline asm
	mov.u32 	%r591, 25152;
	// begin inline asm
	prmt.b32 %r653, %r589, %r590, %r591;
	// end inline asm
	mov.u32 	%r595, 29521;
	// begin inline asm
	prmt.b32 %r685, %r589, %r590, %r595;
	// end inline asm
	// begin inline asm
	prmt.b32 %r661, %r597, %r598, %r591;
	// end inline asm
	// begin inline asm
	prmt.b32 %r693, %r597, %r598, %r595;
	// end inline asm
	// begin inline asm
	prmt.b32 %r654, %r605, %r606, %r591;
	// end inline asm
	// begin inline asm
	prmt.b32 %r686, %r605, %r606, %r595;
	// end inline asm
	// begin inline asm
	prmt.b32 %r662, %r613, %r614, %r591;
	// end inline asm
	// begin inline asm
	prmt.b32 %r694, %r613, %r614, %r595;
	// end inline asm
	// begin inline asm
	prmt.b32 %r669, %r621, %r622, %r591;
	// end inline asm
	// begin inline asm
	prmt.b32 %r701, %r621, %r622, %r595;
	// end inline asm
	// begin inline asm
	prmt.b32 %r677, %r629, %r630, %r591;
	// end inline asm
	// begin inline asm
	prmt.b32 %r709, %r629, %r630, %r595;
	// end inline asm
	// begin inline asm
	prmt.b32 %r670, %r637, %r638, %r591;
	// end inline asm
	// begin inline asm
	prmt.b32 %r702, %r637, %r638, %r595;
	// end inline asm
	// begin inline asm
	prmt.b32 %r678, %r645, %r646, %r591;
	// end inline asm
	// begin inline asm
	prmt.b32 %r710, %r645, %r646, %r595;
	// end inline asm
	mov.u32 	%r711, 21520;
	// begin inline asm
	prmt.b32 %r652, %r653, %r654, %r711;
	// end inline asm
	mov.u32 	%r715, 30258;
	// begin inline asm
	prmt.b32 %r656, %r653, %r654, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r660, %r661, %r662, %r711;
	// end inline asm
	// begin inline asm
	prmt.b32 %r664, %r661, %r662, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r668, %r669, %r670, %r711;
	// end inline asm
	// begin inline asm
	prmt.b32 %r672, %r669, %r670, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r676, %r677, %r678, %r711;
	// end inline asm
	// begin inline asm
	prmt.b32 %r680, %r677, %r678, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r684, %r685, %r686, %r711;
	// end inline asm
	// begin inline asm
	prmt.b32 %r688, %r685, %r686, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r692, %r693, %r694, %r711;
	// end inline asm
	// begin inline asm
	prmt.b32 %r696, %r693, %r694, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r700, %r701, %r702, %r711;
	// end inline asm
	// begin inline asm
	prmt.b32 %r704, %r701, %r702, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r708, %r709, %r710, %r711;
	// end inline asm
	// begin inline asm
	prmt.b32 %r712, %r709, %r710, %r715;
	// end inline asm
	mul.hi.s16 	%rs83, %rs69, 10923;
	shr.u16 	%rs84, %rs83, 15;
	shr.s16 	%rs85, %rs83, 2;
	add.s16 	%rs86, %rs85, %rs84;
	mul.lo.s16 	%rs87, %rs86, 24;
	sub.s16 	%rs88, %rs69, %rs87;
	cvt.s32.s16 	%r769, %rs88;
	add.s32 	%r770, %r70, %r769;
	mul.wide.s32 	%rd56, %r770, 4;
	add.s64 	%rd58, %rd28, %rd56;
	st.shared.u32 	[%rd58], %r652;
	st.shared.u32 	[%rd58+512], %r660;
	st.shared.u32 	[%rd58+256], %r656;
	st.shared.u32 	[%rd58+768], %r664;
	add.s32 	%r771, %r71, %r769;
	mul.wide.s32 	%rd59, %r771, 4;
	add.s64 	%rd60, %rd28, %rd59;
	st.shared.u32 	[%rd60], %r668;
	st.shared.u32 	[%rd60+512], %r676;
	st.shared.u32 	[%rd60+256], %r672;
	st.shared.u32 	[%rd60+768], %r680;
	st.shared.u32 	[%rd58+128], %r684;
	st.shared.u32 	[%rd58+640], %r692;
	st.shared.u32 	[%rd58+384], %r688;
	st.shared.u32 	[%rd58+896], %r696;
	st.shared.u32 	[%rd60+128], %r700;
	st.shared.u32 	[%rd60+640], %r708;
	st.shared.u32 	[%rd60+384], %r704;
	st.shared.u32 	[%rd60+896], %r712;
	bar.sync 	0;
	add.s32 	%r772, %r110, %r72;
	cvt.u16.u32 	%rs89, %r772;
	mul.hi.s16 	%rs90, %rs89, 10923;
	shr.u16 	%rs91, %rs90, 15;
	shr.s16 	%rs92, %rs90, 2;
	add.s16 	%rs93, %rs92, %rs91;
	mul.lo.s16 	%rs94, %rs93, 24;
	sub.s16 	%rs95, %rs89, %rs94;
	cvt.s32.s16 	%r773, %rs95;
	add.s32 	%r774, %r73, %r773;
	mul.wide.s32 	%rd61, %r774, 4;
	add.s64 	%rd62, %rd28, %rd61;
	ld.shared.u32 	%r775, [%rd62];
	add.s32 	%r776, %r74, %r773;
	mul.wide.u32 	%rd63, %r776, 4;
	add.s64 	%rd64, %rd28, %rd63;
	ld.shared.u32 	%r777, [%rd64];
	add.s32 	%r778, %r75, %r773;
	mul.wide.u32 	%rd65, %r778, 4;
	add.s64 	%rd66, %rd28, %rd65;
	ld.shared.u32 	%r779, [%rd66];
	add.s32 	%r780, %r76, %r773;
	mul.wide.u32 	%rd67, %r780, 4;
	add.s64 	%rd68, %rd28, %rd67;
	ld.shared.u32 	%r781, [%rd68];
	add.s32 	%r782, %r77, %r773;
	mul.wide.s32 	%rd69, %r782, 4;
	add.s64 	%rd70, %rd28, %rd69;
	ld.shared.u32 	%r783, [%rd70];
	add.s32 	%r784, %r78, %r773;
	mul.wide.u32 	%rd71, %r784, 4;
	add.s64 	%rd72, %rd28, %rd71;
	ld.shared.u32 	%r785, [%rd72];
	add.s32 	%r786, %r79, %r773;
	mul.wide.u32 	%rd73, %r786, 4;
	add.s64 	%rd74, %rd28, %rd73;
	ld.shared.u32 	%r787, [%rd74];
	add.s32 	%r788, %r80, %r773;
	mul.wide.u32 	%rd75, %r788, 4;
	add.s64 	%rd76, %rd28, %rd75;
	ld.shared.u32 	%r789, [%rd76];
	add.s32 	%r790, %r81, %r773;
	mul.wide.s32 	%rd77, %r790, 4;
	add.s64 	%rd78, %rd28, %rd77;
	ld.shared.u32 	%r791, [%rd78];
	add.s32 	%r792, %r82, %r773;
	mul.wide.u32 	%rd79, %r792, 4;
	add.s64 	%rd80, %rd28, %rd79;
	ld.shared.u32 	%r793, [%rd80];
	add.s32 	%r794, %r83, %r773;
	mul.wide.u32 	%rd81, %r794, 4;
	add.s64 	%rd82, %rd28, %rd81;
	ld.shared.u32 	%r795, [%rd82];
	add.s32 	%r796, %r84, %r773;
	mul.wide.u32 	%rd83, %r796, 4;
	add.s64 	%rd84, %rd28, %rd83;
	ld.shared.u32 	%r797, [%rd84];
	add.s32 	%r798, %r85, %r773;
	mul.wide.s32 	%rd85, %r798, 4;
	add.s64 	%rd86, %rd28, %rd85;
	ld.shared.u32 	%r799, [%rd86];
	add.s32 	%r800, %r86, %r773;
	mul.wide.u32 	%rd87, %r800, 4;
	add.s64 	%rd88, %rd28, %rd87;
	ld.shared.u32 	%r801, [%rd88];
	add.s32 	%r802, %r87, %r773;
	mul.wide.u32 	%rd89, %r802, 4;
	add.s64 	%rd90, %rd28, %rd89;
	ld.shared.u32 	%r803, [%rd90];
	add.s32 	%r804, %r88, %r773;
	mul.wide.u32 	%rd91, %r804, 4;
	add.s64 	%rd92, %rd28, %rd91;
	ld.shared.u32 	%r805, [%rd92];
	add.s32 	%r806, %r89, %r773;
	mul.wide.s32 	%rd93, %r806, 4;
	add.s64 	%rd94, %rd28, %rd93;
	ld.shared.u32 	%r807, [%rd94];
	add.s32 	%r808, %r90, %r773;
	mul.wide.u32 	%rd95, %r808, 4;
	add.s64 	%rd96, %rd28, %rd95;
	ld.shared.u32 	%r809, [%rd96];
	add.s32 	%r810, %r91, %r773;
	mul.wide.u32 	%rd97, %r810, 4;
	add.s64 	%rd98, %rd28, %rd97;
	ld.shared.u32 	%r811, [%rd98];
	add.s32 	%r812, %r92, %r773;
	mul.wide.u32 	%rd99, %r812, 4;
	add.s64 	%rd100, %rd28, %rd99;
	ld.shared.u32 	%r813, [%rd100];
	add.s32 	%r814, %r93, %r773;
	mul.wide.s32 	%rd101, %r814, 4;
	add.s64 	%rd102, %rd28, %rd101;
	ld.shared.u32 	%r815, [%rd102];
	add.s32 	%r816, %r94, %r773;
	mul.wide.s32 	%rd103, %r816, 4;
	add.s64 	%rd104, %rd28, %rd103;
	ld.shared.u32 	%r817, [%rd104];
	bar.sync 	0;
	shfl.sync.idx.b32	%r818, %r3482, 0, 31, -1;
	shfl.sync.idx.b32	%r819, %r3482, 1, 31, -1;
	shfl.sync.idx.b32	%r820, %r3482, 2, 31, -1;
	shfl.sync.idx.b32	%r821, %r3482, 3, 31, -1;
	shfl.sync.idx.b32	%r822, %r3482, 4, 31, -1;
	shfl.sync.idx.b32	%r823, %r3482, 5, 31, -1;
	shfl.sync.idx.b32	%r824, %r3482, 6, 31, -1;
	shfl.sync.idx.b32	%r825, %r3482, 7, 31, -1;
	shfl.sync.idx.b32	%r826, %r3482, 8, 31, -1;
	shfl.sync.idx.b32	%r827, %r3482, 9, 31, -1;
	shfl.sync.idx.b32	%r828, %r3482, 10, 31, -1;
	shfl.sync.idx.b32	%r829, %r3482, 11, 31, -1;
	shfl.sync.idx.b32	%r830, %r3482, 12, 31, -1;
	shfl.sync.idx.b32	%r831, %r3482, 13, 31, -1;
	shfl.sync.idx.b32	%r832, %r3482, 14, 31, -1;
	shfl.sync.idx.b32	%r833, %r3482, 15, 31, -1;
	shfl.sync.idx.b32	%r834, %r3482, 16, 31, -1;
	shfl.sync.idx.b32	%r835, %r3482, 17, 31, -1;
	shfl.sync.idx.b32	%r836, %r3482, 18, 31, -1;
	shfl.sync.idx.b32	%r837, %r3482, 19, 31, -1;
	shfl.sync.idx.b32	%r838, %r3482, 20, 31, -1;
	shfl.sync.idx.b32	%r839, %r3482, 21, 31, -1;
	shfl.sync.idx.b32	%r840, %r3482, 22, 31, -1;
	shfl.sync.idx.b32	%r841, %r3482, 23, 31, -1;
	add.s32 	%r842, %r818, %r773;
	mul.wide.s32 	%rd105, %r842, 4;
	add.s64 	%rd106, %rd28, %rd105;
	st.shared.u32 	[%rd106], %r775;
	add.s32 	%r843, %r819, %r773;
	mul.wide.s32 	%rd107, %r843, 4;
	add.s64 	%rd108, %rd28, %rd107;
	st.shared.u32 	[%rd108], %r777;
	add.s32 	%r844, %r820, %r773;
	mul.wide.s32 	%rd109, %r844, 4;
	add.s64 	%rd110, %rd28, %rd109;
	st.shared.u32 	[%rd110], %r779;
	add.s32 	%r845, %r821, %r773;
	mul.wide.s32 	%rd111, %r845, 4;
	add.s64 	%rd112, %rd28, %rd111;
	st.shared.u32 	[%rd112], %r781;
	add.s32 	%r846, %r822, %r773;
	mul.wide.s32 	%rd113, %r846, 4;
	add.s64 	%rd114, %rd28, %rd113;
	st.shared.u32 	[%rd114], %r783;
	add.s32 	%r847, %r823, %r773;
	mul.wide.s32 	%rd115, %r847, 4;
	add.s64 	%rd116, %rd28, %rd115;
	st.shared.u32 	[%rd116], %r785;
	add.s32 	%r848, %r824, %r773;
	mul.wide.s32 	%rd117, %r848, 4;
	add.s64 	%rd118, %rd28, %rd117;
	st.shared.u32 	[%rd118], %r787;
	add.s32 	%r849, %r825, %r773;
	mul.wide.s32 	%rd119, %r849, 4;
	add.s64 	%rd120, %rd28, %rd119;
	st.shared.u32 	[%rd120], %r789;
	add.s32 	%r850, %r826, %r773;
	mul.wide.s32 	%rd121, %r850, 4;
	add.s64 	%rd122, %rd28, %rd121;
	st.shared.u32 	[%rd122], %r791;
	add.s32 	%r851, %r827, %r773;
	mul.wide.s32 	%rd123, %r851, 4;
	add.s64 	%rd124, %rd28, %rd123;
	st.shared.u32 	[%rd124], %r793;
	add.s32 	%r852, %r828, %r773;
	mul.wide.s32 	%rd125, %r852, 4;
	add.s64 	%rd126, %rd28, %rd125;
	st.shared.u32 	[%rd126], %r795;
	add.s32 	%r853, %r829, %r773;
	mul.wide.s32 	%rd127, %r853, 4;
	add.s64 	%rd128, %rd28, %rd127;
	st.shared.u32 	[%rd128], %r797;
	add.s32 	%r854, %r830, %r773;
	mul.wide.s32 	%rd129, %r854, 4;
	add.s64 	%rd130, %rd28, %rd129;
	st.shared.u32 	[%rd130], %r799;
	add.s32 	%r855, %r831, %r773;
	mul.wide.s32 	%rd131, %r855, 4;
	add.s64 	%rd132, %rd28, %rd131;
	st.shared.u32 	[%rd132], %r801;
	add.s32 	%r856, %r832, %r773;
	mul.wide.s32 	%rd133, %r856, 4;
	add.s64 	%rd134, %rd28, %rd133;
	st.shared.u32 	[%rd134], %r803;
	add.s32 	%r857, %r833, %r773;
	mul.wide.s32 	%rd135, %r857, 4;
	add.s64 	%rd136, %rd28, %rd135;
	st.shared.u32 	[%rd136], %r805;
	add.s32 	%r858, %r834, %r773;
	mul.wide.s32 	%rd137, %r858, 4;
	add.s64 	%rd138, %rd28, %rd137;
	st.shared.u32 	[%rd138], %r807;
	add.s32 	%r859, %r835, %r773;
	mul.wide.s32 	%rd139, %r859, 4;
	add.s64 	%rd140, %rd28, %rd139;
	st.shared.u32 	[%rd140], %r809;
	add.s32 	%r860, %r836, %r773;
	mul.wide.s32 	%rd141, %r860, 4;
	add.s64 	%rd142, %rd28, %rd141;
	st.shared.u32 	[%rd142], %r811;
	add.s32 	%r861, %r837, %r773;
	mul.wide.s32 	%rd143, %r861, 4;
	add.s64 	%rd144, %rd28, %rd143;
	st.shared.u32 	[%rd144], %r813;
	add.s32 	%r862, %r838, %r773;
	mul.wide.s32 	%rd145, %r862, 4;
	add.s64 	%rd146, %rd28, %rd145;
	st.shared.u32 	[%rd146], %r815;
	selp.b32 	%r863, 0, %r817, %p112;
	add.s32 	%r864, %r839, %r773;
	mul.wide.s32 	%rd147, %r864, 4;
	add.s64 	%rd148, %rd28, %rd147;
	st.shared.u32 	[%rd148], %r863;
	add.s32 	%r865, %r840, %r773;
	mul.wide.s32 	%rd149, %r865, 4;
	add.s64 	%rd150, %rd28, %rd149;
	st.shared.u32 	[%rd150], %r3473;
	add.s32 	%r866, %r841, %r773;
	mul.wide.s32 	%rd151, %r866, 4;
	add.s64 	%rd152, %rd28, %rd151;
	st.shared.u32 	[%rd152], %r3473;
	bar.sync 	0;
	mov.u32 	%r3494, %r3473;
	mov.u32 	%r3495, %r3473;
	mov.u32 	%r3496, %r3473;
	mov.u32 	%r3497, %r3473;
	mov.u32 	%r3498, %r3473;
	mov.u32 	%r3499, %r3473;
	mov.u32 	%r3500, %r3473;
	mov.u32 	%r3501, %r3473;
	mov.u32 	%r3502, %r3473;
	mov.u32 	%r3503, %r3473;
	mov.u32 	%r3504, %r3473;
	mov.u32 	%r3505, %r3473;
	mov.u32 	%r3506, %r3473;
	mov.u32 	%r3507, %r3473;
	mov.u32 	%r3508, %r3473;
	mov.u32 	%r3509, %r3473;
	mov.u32 	%r3510, %r3473;
	mov.u32 	%r3511, %r3473;
	mov.u32 	%r3512, %r3473;
	mov.u32 	%r3513, %r3473;
	mov.u32 	%r3514, %r3473;
	mov.u32 	%r3515, %r3473;
	mov.u32 	%r3516, %r3473;
	mov.u32 	%r3517, %r3473;
	@%p111 bra 	LBB0_109;
	bra.uni 	LBB0_72;
LBB0_109:                               // %oksrem3319
                                        //   in Loop: Header=BB0_71 Depth=1
	cvt.u16.u32 	%rs96, %r110;
	mul.hi.s16 	%rs97, %rs96, 10923;
	shr.u16 	%rs98, %rs97, 15;
	shr.s16 	%rs99, %rs97, 2;
	add.s16 	%rs100, %rs99, %rs98;
	mul.lo.s16 	%rs101, %rs100, 24;
	sub.s16 	%rs102, %rs96, %rs101;
	cvt.s32.s16 	%r867, %rs102;
	mul.wide.s32 	%rd153, %r867, 4;
	add.s64 	%rd154, %rd12, %rd153;
	ld.shared.u32 	%r3494, [%rd154];
	ld.shared.u32 	%r3495, [%rd12+4];
	ld.shared.u32 	%r3496, [%rd12+8];
	ld.shared.u32 	%r3497, [%rd12+12];
	ld.shared.u32 	%r3498, [%rd12+16];
	ld.shared.u32 	%r3499, [%rd12+20];
	ld.shared.u32 	%r3500, [%rd12+24];
	ld.shared.u32 	%r3501, [%rd12+28];
	ld.shared.u32 	%r3502, [%rd12+32];
	ld.shared.u32 	%r3503, [%rd12+36];
	ld.shared.u32 	%r3504, [%rd12+40];
	ld.shared.u32 	%r3505, [%rd12+44];
	ld.shared.u32 	%r3506, [%rd12+48];
	ld.shared.u32 	%r3507, [%rd12+52];
	ld.shared.u32 	%r3508, [%rd12+56];
	ld.shared.u32 	%r3509, [%rd12+60];
	add.s16 	%rs103, %rs96, 16;
	mul.hi.s16 	%rs104, %rs103, 10923;
	shr.u16 	%rs105, %rs104, 15;
	shr.s16 	%rs106, %rs104, 2;
	add.s16 	%rs107, %rs106, %rs105;
	mul.lo.s16 	%rs108, %rs107, 24;
	sub.s16 	%rs109, %rs103, %rs108;
	cvt.s32.s16 	%r868, %rs109;
	mul.wide.s32 	%rd155, %r868, 4;
	add.s64 	%rd156, %rd12, %rd155;
	ld.shared.u32 	%r3510, [%rd156];
	add.s16 	%rs110, %rs96, 17;
	mul.hi.s16 	%rs111, %rs110, 10923;
	shr.u16 	%rs112, %rs111, 15;
	shr.s16 	%rs113, %rs111, 2;
	add.s16 	%rs114, %rs113, %rs112;
	mul.lo.s16 	%rs115, %rs114, 24;
	sub.s16 	%rs116, %rs110, %rs115;
	cvt.s32.s16 	%r869, %rs116;
	mul.wide.s32 	%rd157, %r869, 4;
	add.s64 	%rd158, %rd12, %rd157;
	ld.shared.u32 	%r3511, [%rd158];
	add.s16 	%rs117, %rs96, 18;
	mul.hi.s16 	%rs118, %rs117, 10923;
	shr.u16 	%rs119, %rs118, 15;
	shr.s16 	%rs120, %rs118, 2;
	add.s16 	%rs121, %rs120, %rs119;
	mul.lo.s16 	%rs122, %rs121, 24;
	sub.s16 	%rs123, %rs117, %rs122;
	cvt.s32.s16 	%r870, %rs123;
	mul.wide.s32 	%rd159, %r870, 4;
	add.s64 	%rd160, %rd12, %rd159;
	ld.shared.u32 	%r3512, [%rd160];
	add.s16 	%rs124, %rs96, 19;
	mul.hi.s16 	%rs125, %rs124, 10923;
	shr.u16 	%rs126, %rs125, 15;
	shr.s16 	%rs127, %rs125, 2;
	add.s16 	%rs128, %rs127, %rs126;
	mul.lo.s16 	%rs129, %rs128, 24;
	sub.s16 	%rs130, %rs124, %rs129;
	cvt.s32.s16 	%r871, %rs130;
	mul.wide.s32 	%rd161, %r871, 4;
	add.s64 	%rd162, %rd12, %rd161;
	ld.shared.u32 	%r3513, [%rd162];
	add.s16 	%rs131, %rs96, 20;
	mul.hi.s16 	%rs132, %rs131, 10923;
	shr.u16 	%rs133, %rs132, 15;
	shr.s16 	%rs134, %rs132, 2;
	add.s16 	%rs135, %rs134, %rs133;
	mul.lo.s16 	%rs136, %rs135, 24;
	sub.s16 	%rs137, %rs131, %rs136;
	cvt.s32.s16 	%r872, %rs137;
	mul.wide.s32 	%rd163, %r872, 4;
	add.s64 	%rd164, %rd12, %rd163;
	ld.shared.u32 	%r3514, [%rd164];
	add.s16 	%rs138, %rs96, 21;
	mul.hi.s16 	%rs139, %rs138, 10923;
	shr.u16 	%rs140, %rs139, 15;
	shr.s16 	%rs141, %rs139, 2;
	add.s16 	%rs142, %rs141, %rs140;
	mul.lo.s16 	%rs143, %rs142, 24;
	sub.s16 	%rs144, %rs138, %rs143;
	cvt.s32.s16 	%r873, %rs144;
	mul.wide.s32 	%rd165, %r873, 4;
	add.s64 	%rd166, %rd12, %rd165;
	ld.shared.u32 	%r3515, [%rd166];
	add.s16 	%rs145, %rs96, 22;
	mul.hi.s16 	%rs146, %rs145, 10923;
	shr.u16 	%rs147, %rs146, 15;
	shr.s16 	%rs148, %rs146, 2;
	add.s16 	%rs149, %rs148, %rs147;
	mul.lo.s16 	%rs150, %rs149, 24;
	sub.s16 	%rs151, %rs145, %rs150;
	cvt.s32.s16 	%r874, %rs151;
	mul.wide.s32 	%rd167, %r874, 4;
	add.s64 	%rd168, %rd12, %rd167;
	ld.shared.u32 	%r3516, [%rd168];
	add.s16 	%rs152, %rs96, 23;
	mul.hi.s16 	%rs153, %rs152, 10923;
	shr.u16 	%rs154, %rs153, 15;
	shr.s16 	%rs155, %rs153, 2;
	add.s16 	%rs156, %rs155, %rs154;
	mul.lo.s16 	%rs157, %rs156, 24;
	sub.s16 	%rs158, %rs152, %rs157;
	cvt.s32.s16 	%r875, %rs158;
	mul.wide.s32 	%rd169, %r875, 4;
	add.s64 	%rd170, %rd12, %rd169;
	ld.shared.u32 	%r3517, [%rd170];
LBB0_72:                                // %L11349
                                        //   in Loop: Header=BB0_71 Depth=1
	bar.sync 	0;
	mov.u32 	%r3518, 12;
	mov.u32 	%r3519, %r3473;
	bra.uni 	LBB0_73;
LBB0_80:                                // %L21403
                                        //   in Loop: Header=BB0_73 Depth=2
	add.s32 	%r3521, %r3521, 1;
	mov.u32 	%r3520, 0;
	mov.u32 	%r3522, %r3520;
	mov.u32 	%r3523, %r3520;
LBB0_81:                                // %L21404
                                        //   in Loop: Header=BB0_73 Depth=2
	bar.sync 	0;
	add.s32 	%r3519, %r3519, 1;
	add.s32 	%r3518, %r3518, -4;
	setp.ne.s32 	%p127, %r3518, -12;
	@%p127 bra 	LBB0_73;
	bra.uni 	LBB0_82;
LBB0_73:                                // %L11375
                                        //   Parent Loop BB0_71 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p116, %r3518, 12;
	selp.b32 	%r1415, %r3494, 0, %p116;
	setp.eq.s32 	%p117, %r3518, 8;
	selp.b32 	%r1416, %r3498, %r1415, %p117;
	setp.eq.s32 	%p118, %r3518, 4;
	selp.b32 	%r1417, %r3502, %r1416, %p118;
	setp.eq.s32 	%p119, %r3518, 0;
	selp.b32 	%r1418, %r3506, %r1417, %p119;
	setp.eq.s32 	%p120, %r3518, -4;
	selp.b32 	%r1419, %r3510, %r1418, %p120;
	setp.eq.s32 	%p121, %r3518, -8;
	selp.b32 	%r1420, %r3514, %r1419, %p121;
	selp.b32 	%r1421, %r3495, 0, %p116;
	selp.b32 	%r1422, %r3499, %r1421, %p117;
	selp.b32 	%r1423, %r3503, %r1422, %p118;
	selp.b32 	%r1424, %r3507, %r1423, %p119;
	selp.b32 	%r1425, %r3511, %r1424, %p120;
	selp.b32 	%r1426, %r3515, %r1425, %p121;
	selp.b32 	%r1427, %r3496, 0, %p116;
	selp.b32 	%r1428, %r3500, %r1427, %p117;
	selp.b32 	%r1429, %r3504, %r1428, %p118;
	selp.b32 	%r1430, %r3508, %r1429, %p119;
	selp.b32 	%r1431, %r3512, %r1430, %p120;
	selp.b32 	%r1432, %r3516, %r1431, %p121;
	selp.b32 	%r1433, %r3497, 0, %p116;
	selp.b32 	%r1434, %r3501, %r1433, %p117;
	selp.b32 	%r1435, %r3505, %r1434, %p118;
	selp.b32 	%r1436, %r3509, %r1435, %p119;
	selp.b32 	%r1437, %r3513, %r1436, %p120;
	selp.b32 	%r1438, %r3517, %r1437, %p121;
	mov.u16 	%rs196, 25600;
	// begin inline asm
	mov.b32 %r883, {%rs196, %rs196};
	// end inline asm
	mov.u16 	%rs198, 21504;
	// begin inline asm
	mov.b32 %r894, {%rs198, %rs198};
	// end inline asm
	xor.b32  	%r882, %r1420, -2004318072;
	mov.u32 	%r1019, 983055;
	// begin inline asm
	lop3.b32 %r880, %r1019, %r882, %r883, 202;
	// end inline asm
	mov.u16 	%rs202, 18432;
	// begin inline asm
	mov.b32 %r884, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r885, %r883, %r884;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r888, %r880, %r885;
	// end inline asm
	mov.u32 	%r1030, 15728880;
	// begin inline asm
	lop3.b32 %r891, %r1030, %r882, %r894, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r895, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r896, %r894, %r895;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r899, %r891, %r896;
	// end inline asm
	// begin inline asm
	mov.b32 %r929, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r940, {%rs198, %rs198};
	// end inline asm
	xor.b32  	%r928, %r1426, -2004318072;
	// begin inline asm
	lop3.b32 %r926, %r1019, %r928, %r929, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r930, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r931, %r929, %r930;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r934, %r926, %r931;
	// end inline asm
	// begin inline asm
	lop3.b32 %r937, %r1030, %r928, %r940, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r941, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r942, %r940, %r941;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r945, %r937, %r942;
	// end inline asm
	// begin inline asm
	mov.b32 %r975, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r986, {%rs198, %rs198};
	// end inline asm
	xor.b32  	%r974, %r1432, -2004318072;
	// begin inline asm
	lop3.b32 %r972, %r1019, %r974, %r975, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r976, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r977, %r975, %r976;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r980, %r972, %r977;
	// end inline asm
	// begin inline asm
	lop3.b32 %r983, %r1030, %r974, %r986, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r987, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r988, %r986, %r987;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r991, %r983, %r988;
	// end inline asm
	// begin inline asm
	mov.b32 %r1021, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r1032, {%rs198, %rs198};
	// end inline asm
	xor.b32  	%r1020, %r1438, -2004318072;
	// begin inline asm
	lop3.b32 %r1018, %r1019, %r1020, %r1021, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1022, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1023, %r1021, %r1022;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1026, %r1018, %r1023;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1029, %r1030, %r1020, %r1032, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1033, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1034, %r1032, %r1033;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1037, %r1029, %r1034;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3487;
    mov.b32 {%r2re, %r2im}, %r888;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1062, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3488;
    mov.b32 {%r2re, %r2im}, %r899;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1065, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3487;
    mov.b32 {%r2re, %r2im}, %r934;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1068, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3488;
    mov.b32 {%r2re, %r2im}, %r945;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1071, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3487;
    mov.b32 {%r2re, %r2im}, %r980;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1074, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3488;
    mov.b32 {%r2re, %r2im}, %r991;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1077, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3487;
    mov.b32 {%r2re, %r2im}, %r1026;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1080, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3488;
    mov.b32 {%r2re, %r2im}, %r1037;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1083, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1149, %r1146}, {%r303, %r306}, {%r1062}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1158, %r1155}, {%r303, %r306}, {%r1065}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1167, %r1164}, {%r303, %r306}, {%r1068}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1176, %r1173}, {%r303, %r306}, {%r1071}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1185, %r1182}, {%r303, %r306}, {%r1074}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1194, %r1191}, {%r303, %r306}, {%r1077}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1203, %r1200}, {%r303, %r306}, {%r1080}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1212, %r1209}, {%r303, %r306}, {%r1083}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1142, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1144, %r1142, %r1146;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1147, %r355, %r1149, %r1144;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1151, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1153, %r1151, %r1155;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1156, %r355, %r1158, %r1153;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1160, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1162, %r1160, %r1164;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1165, %r355, %r1167, %r1162;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1169, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1171, %r1169, %r1173;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1174, %r355, %r1176, %r1171;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1178, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1180, %r1178, %r1182;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1183, %r355, %r1185, %r1180;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1187, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1189, %r1187, %r1191;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1192, %r355, %r1194, %r1189;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1196, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1198, %r1196, %r1200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1201, %r355, %r1203, %r1198;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1205, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1207, %r1205, %r1209;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1210, %r355, %r1212, %r1207;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1214, %r358, %r1149;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1217, %r355, %r1146, %r1214;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1221, %r358, %r1158;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1224, %r355, %r1155, %r1221;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1228, %r358, %r1167;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1231, %r355, %r1164, %r1228;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1235, %r358, %r1176;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1238, %r355, %r1173, %r1235;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1242, %r358, %r1185;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1245, %r355, %r1182, %r1242;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1249, %r358, %r1194;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1252, %r355, %r1191, %r1249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1256, %r358, %r1203;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1259, %r355, %r1200, %r1256;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1263, %r358, %r1212;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1266, %r355, %r1209, %r1263;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1351, %r1352}, {%r399, %r405, %r402, %r408}, {%r1147, %r1217}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1359, %r1360}, {%r399, %r405, %r402, %r408}, {%r1156, %r1224}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1367, %r1368}, {%r399, %r405, %r402, %r408}, {%r1165, %r1231}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1375, %r1376}, {%r399, %r405, %r402, %r408}, {%r1174, %r1238}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1383, %r1384}, {%r399, %r405, %r402, %r408}, {%r1183, %r1245}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1391, %r1392}, {%r399, %r405, %r402, %r408}, {%r1192, %r1252}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1399, %r1400}, {%r399, %r405, %r402, %r408}, {%r1201, %r1259}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1407, %r1408}, {%r399, %r405, %r402, %r408}, {%r1210, %r1266}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	prmt.b32 %r1350, %r1351, %r1352, %r711;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1354, %r1351, %r1352, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1358, %r1359, %r1360, %r711;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1362, %r1359, %r1360, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1366, %r1367, %r1368, %r711;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1370, %r1367, %r1368, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1374, %r1375, %r1376, %r711;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1378, %r1375, %r1376, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1382, %r1383, %r1384, %r711;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1386, %r1383, %r1384, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1390, %r1391, %r1392, %r711;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1394, %r1391, %r1392, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1398, %r1399, %r1400, %r711;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1402, %r1399, %r1400, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1406, %r1407, %r1408, %r711;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1410, %r1407, %r1408, %r715;
	// end inline asm
	st.shared.u32 	[%rd6], %r1350;
	st.shared.u32 	[%rd7+33024], %r1354;
	st.shared.u32 	[%rd7+128], %r1358;
	st.shared.u32 	[%rd7+33152], %r1362;
	cvt.u16.u32 	%rs207, %r3519;
	and.b16  	%rs208, %rs207, 255;
	mul.lo.s16 	%rs209, %rs208, 171;
	shr.u16 	%rs210, %rs209, 10;
	mul.lo.s16 	%rs211, %rs210, 6;
	sub.s16 	%rs212, %rs207, %rs211;
	shl.b16 	%rs213, %rs212, 2;
	cvt.u32.u16 	%r1439, %rs213;
	and.b32  	%r1440, %r1439, 252;
	add.s32 	%r1441, %r110, %r1440;
	add.s32 	%r1442, %r1441, 1;
	shr.s32 	%r1443, %r1442, 31;
	shr.u32 	%r1444, %r1443, 30;
	add.s32 	%r1445, %r1442, %r1444;
	and.b32  	%r1446, %r1445, 67108860;
	sub.s32 	%r1447, %r1442, %r1446;
	shl.b32 	%r141, %r1447, 6;
	add.s32 	%r1448, %r95, %r141;
	mul.wide.s32 	%rd171, %r1448, 4;
	add.s64 	%rd173, %rd28, %rd171;
	st.shared.u32 	[%rd173], %r1366;
	add.s32 	%r1449, %r96, %r141;
	mul.wide.u32 	%rd174, %r1449, 4;
	add.s64 	%rd175, %rd28, %rd174;
	st.shared.u32 	[%rd175], %r1370;
	add.s32 	%r1450, %r97, %r141;
	mul.wide.s32 	%rd176, %r1450, 4;
	add.s64 	%rd177, %rd28, %rd176;
	st.shared.u32 	[%rd177], %r1374;
	add.s32 	%r1451, %r98, %r141;
	mul.wide.u32 	%rd178, %r1451, 4;
	add.s64 	%rd179, %rd28, %rd178;
	st.shared.u32 	[%rd179], %r1378;
	add.s32 	%r1452, %r1441, 2;
	shr.s32 	%r1453, %r1452, 31;
	shr.u32 	%r1454, %r1453, 30;
	add.s32 	%r1455, %r1452, %r1454;
	and.b32  	%r1456, %r1455, 67108860;
	sub.s32 	%r1457, %r1452, %r1456;
	shl.b32 	%r142, %r1457, 6;
	add.s32 	%r1458, %r95, %r142;
	mul.wide.s32 	%rd180, %r1458, 4;
	add.s64 	%rd181, %rd28, %rd180;
	st.shared.u32 	[%rd181], %r1382;
	add.s32 	%r1459, %r96, %r142;
	mul.wide.u32 	%rd182, %r1459, 4;
	add.s64 	%rd183, %rd28, %rd182;
	st.shared.u32 	[%rd183], %r1386;
	add.s32 	%r1460, %r97, %r142;
	mul.wide.s32 	%rd184, %r1460, 4;
	add.s64 	%rd185, %rd28, %rd184;
	st.shared.u32 	[%rd185], %r1390;
	add.s32 	%r1461, %r98, %r142;
	mul.wide.u32 	%rd186, %r1461, 4;
	add.s64 	%rd187, %rd28, %rd186;
	st.shared.u32 	[%rd187], %r1394;
	add.s32 	%r1462, %r1441, 3;
	shr.s32 	%r1463, %r1462, 31;
	shr.u32 	%r1464, %r1463, 30;
	add.s32 	%r1465, %r1462, %r1464;
	and.b32  	%r1466, %r1465, 67108860;
	sub.s32 	%r1467, %r1462, %r1466;
	shl.b32 	%r143, %r1467, 6;
	add.s32 	%r1468, %r95, %r143;
	mul.wide.s32 	%rd188, %r1468, 4;
	add.s64 	%rd189, %rd28, %rd188;
	st.shared.u32 	[%rd189], %r1398;
	add.s32 	%r1469, %r96, %r143;
	mul.wide.u32 	%rd190, %r1469, 4;
	add.s64 	%rd191, %rd28, %rd190;
	st.shared.u32 	[%rd191], %r1402;
	add.s32 	%r1470, %r97, %r143;
	mul.wide.s32 	%rd192, %r1470, 4;
	add.s64 	%rd193, %rd28, %rd192;
	st.shared.u32 	[%rd193], %r1406;
	add.s32 	%r1471, %r98, %r143;
	mul.wide.u32 	%rd194, %r1471, 4;
	add.s64 	%rd195, %rd28, %rd194;
	st.shared.u32 	[%rd195], %r1410;
	bar.sync 	0;
	mov.u32 	%r3524, %r3473;
	mov.u32 	%r3525, %r3473;
	mov.u32 	%r3526, %r3473;
	mov.u32 	%r3527, %r3473;
	@%p115 bra 	LBB0_110;
	bra.uni 	LBB0_74;
LBB0_110:                               // %oksrem7130
                                        //   in Loop: Header=BB0_73 Depth=2
	ld.shared.u32 	%r3524, [%rd8];
	ld.shared.u32 	%r3525, [%rd9];
	ld.shared.u32 	%r3526, [%rd10];
	ld.shared.u32 	%r3527, [%rd11];
LBB0_74:                                // %L17282
                                        //   in Loop: Header=BB0_73 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1507, %r1504}, {%r303, %r306}, {%r3524}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1516, %r1513}, {%r303, %r306}, {%r3525}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1525, %r1522}, {%r303, %r306}, {%r3526}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1534, %r1531}, {%r303, %r306}, {%r3527}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1500, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1502, %r1500, %r1504;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1505, %r355, %r1507, %r1502;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1509, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1511, %r1509, %r1513;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1514, %r355, %r1516, %r1511;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1518, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1520, %r1518, %r1522;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1523, %r355, %r1525, %r1520;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1527, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1529, %r1527, %r1531;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1532, %r355, %r1534, %r1529;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1536, %r358, %r1507;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1539, %r355, %r1504, %r1536;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1543, %r358, %r1516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1546, %r355, %r1513, %r1543;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1550, %r358, %r1525;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1553, %r355, %r1522, %r1550;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1557, %r358, %r1534;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1560, %r355, %r1531, %r1557;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1605, %r1608}, {%r399, %r405, %r402, %r408}, {%r1505, %r1539}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1624, %r1627}, {%r399, %r405, %r402, %r408}, {%r1514, %r1546}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1612, %r1616}, {%r399, %r405, %r402, %r408}, {%r1523, %r1553}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1631, %r1635}, {%r399, %r405, %r402, %r408}, {%r1532, %r1560}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1604, %r1605, %r1605;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1607, %r1608, %r1608, %r1604;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1611, %r1612, %r1612, %r1607;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1615, %r1616, %r1616, %r1611;
	// end inline asm
	mov.u32 	%r1639, 442899046;
	// begin inline asm
	fma.rn.f16x2 %r1619, %r1639, %r1615, %r3523;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1623, %r1624, %r1624;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1626, %r1627, %r1627, %r1623;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1630, %r1631, %r1631, %r1626;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1634, %r1635, %r1635, %r1630;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1638, %r1639, %r1634, %r3522;
	// end inline asm
	mov.u32 	%r3528, %r3473;
	mov.u32 	%r3529, %r3473;
	mov.u32 	%r3530, %r3473;
	mov.u32 	%r3531, %r3473;
	@%p115 bra 	LBB0_111;
	bra.uni 	LBB0_75;
LBB0_111:                               // %oksrem7665
                                        //   in Loop: Header=BB0_73 Depth=2
	add.s32 	%r1643, %r99, %r141;
	mul.wide.s32 	%rd196, %r1643, 4;
	add.s64 	%rd198, %rd28, %rd196;
	ld.shared.u32 	%r3528, [%rd198];
	add.s32 	%r1644, %r100, %r141;
	mul.wide.u32 	%rd199, %r1644, 4;
	add.s64 	%rd200, %rd28, %rd199;
	ld.shared.u32 	%r3529, [%rd200];
	add.s32 	%r1645, %r101, %r141;
	mul.wide.s32 	%rd201, %r1645, 4;
	add.s64 	%rd202, %rd28, %rd201;
	ld.shared.u32 	%r3530, [%rd202];
	add.s32 	%r1646, %r102, %r141;
	mul.wide.u32 	%rd203, %r1646, 4;
	add.s64 	%rd204, %rd28, %rd203;
	ld.shared.u32 	%r3531, [%rd204];
LBB0_75:                                // %L18507
                                        //   in Loop: Header=BB0_73 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1682, %r1679}, {%r303, %r306}, {%r3528}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1691, %r1688}, {%r303, %r306}, {%r3529}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1700, %r1697}, {%r303, %r306}, {%r3530}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1709, %r1706}, {%r303, %r306}, {%r3531}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1675, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1677, %r1675, %r1679;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1680, %r355, %r1682, %r1677;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1684, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1686, %r1684, %r1688;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1689, %r355, %r1691, %r1686;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1693, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1695, %r1693, %r1697;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1698, %r355, %r1700, %r1695;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1702, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1704, %r1702, %r1706;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1707, %r355, %r1709, %r1704;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1711, %r358, %r1682;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1714, %r355, %r1679, %r1711;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1718, %r358, %r1691;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1721, %r355, %r1688, %r1718;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1725, %r358, %r1700;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1728, %r355, %r1697, %r1725;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1732, %r358, %r1709;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1735, %r355, %r1706, %r1732;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1780, %r1783}, {%r399, %r405, %r402, %r408}, {%r1680, %r1714}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1799, %r1802}, {%r399, %r405, %r402, %r408}, {%r1689, %r1721}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1787, %r1791}, {%r399, %r405, %r402, %r408}, {%r1698, %r1728}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1806, %r1810}, {%r399, %r405, %r402, %r408}, {%r1707, %r1735}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1779, %r1780, %r1780;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1782, %r1783, %r1783, %r1779;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1786, %r1787, %r1787, %r1782;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1790, %r1791, %r1791, %r1786;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1794, %r1639, %r1790, %r1619;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1798, %r1799, %r1799;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1801, %r1802, %r1802, %r1798;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1805, %r1806, %r1806, %r1801;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1809, %r1810, %r1810, %r1805;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1813, %r1639, %r1809, %r1638;
	// end inline asm
	mov.u32 	%r3532, %r3473;
	mov.u32 	%r3533, %r3473;
	mov.u32 	%r3534, %r3473;
	mov.u32 	%r3535, %r3473;
	@%p115 bra 	LBB0_112;
	bra.uni 	LBB0_76;
LBB0_112:                               // %oksrem8200
                                        //   in Loop: Header=BB0_73 Depth=2
	add.s32 	%r1818, %r99, %r142;
	mul.wide.s32 	%rd205, %r1818, 4;
	add.s64 	%rd207, %rd28, %rd205;
	ld.shared.u32 	%r3532, [%rd207];
	add.s32 	%r1819, %r100, %r142;
	mul.wide.u32 	%rd208, %r1819, 4;
	add.s64 	%rd209, %rd28, %rd208;
	ld.shared.u32 	%r3533, [%rd209];
	add.s32 	%r1820, %r101, %r142;
	mul.wide.s32 	%rd210, %r1820, 4;
	add.s64 	%rd211, %rd28, %rd210;
	ld.shared.u32 	%r3534, [%rd211];
	add.s32 	%r1821, %r102, %r142;
	mul.wide.u32 	%rd212, %r1821, 4;
	add.s64 	%rd213, %rd28, %rd212;
	ld.shared.u32 	%r3535, [%rd213];
LBB0_76:                                // %L19732
                                        //   in Loop: Header=BB0_73 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1857, %r1854}, {%r303, %r306}, {%r3532}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1866, %r1863}, {%r303, %r306}, {%r3533}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1875, %r1872}, {%r303, %r306}, {%r3534}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1884, %r1881}, {%r303, %r306}, {%r3535}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1850, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1852, %r1850, %r1854;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1855, %r355, %r1857, %r1852;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1859, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1861, %r1859, %r1863;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1864, %r355, %r1866, %r1861;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1868, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1870, %r1868, %r1872;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1873, %r355, %r1875, %r1870;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1877, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1879, %r1877, %r1881;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1882, %r355, %r1884, %r1879;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1886, %r358, %r1857;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1889, %r355, %r1854, %r1886;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1893, %r358, %r1866;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1896, %r355, %r1863, %r1893;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1900, %r358, %r1875;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1903, %r355, %r1872, %r1900;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1907, %r358, %r1884;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1910, %r355, %r1881, %r1907;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1955, %r1958}, {%r399, %r405, %r402, %r408}, {%r1855, %r1889}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1974, %r1977}, {%r399, %r405, %r402, %r408}, {%r1864, %r1896}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1962, %r1966}, {%r399, %r405, %r402, %r408}, {%r1873, %r1903}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1981, %r1985}, {%r399, %r405, %r402, %r408}, {%r1882, %r1910}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1954, %r1955, %r1955;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1957, %r1958, %r1958, %r1954;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1961, %r1962, %r1962, %r1957;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1965, %r1966, %r1966, %r1961;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1969, %r1639, %r1965, %r1794;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1973, %r1974, %r1974;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1976, %r1977, %r1977, %r1973;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1980, %r1981, %r1981, %r1976;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1984, %r1985, %r1985, %r1980;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1988, %r1639, %r1984, %r1813;
	// end inline asm
	mov.u32 	%r3536, %r3473;
	mov.u32 	%r3537, %r3473;
	mov.u32 	%r3538, %r3473;
	mov.u32 	%r3539, %r3473;
	@%p115 bra 	LBB0_113;
	bra.uni 	LBB0_77;
LBB0_113:                               // %oksrem8735
                                        //   in Loop: Header=BB0_73 Depth=2
	add.s32 	%r1993, %r99, %r143;
	mul.wide.s32 	%rd214, %r1993, 4;
	add.s64 	%rd216, %rd28, %rd214;
	ld.shared.u32 	%r3536, [%rd216];
	add.s32 	%r1994, %r100, %r143;
	mul.wide.u32 	%rd217, %r1994, 4;
	add.s64 	%rd218, %rd28, %rd217;
	ld.shared.u32 	%r3537, [%rd218];
	add.s32 	%r1995, %r101, %r143;
	mul.wide.s32 	%rd219, %r1995, 4;
	add.s64 	%rd220, %rd28, %rd219;
	ld.shared.u32 	%r3538, [%rd220];
	add.s32 	%r1996, %r102, %r143;
	mul.wide.u32 	%rd221, %r1996, 4;
	add.s64 	%rd222, %rd28, %rd221;
	ld.shared.u32 	%r3539, [%rd222];
LBB0_77:                                // %L20957
                                        //   in Loop: Header=BB0_73 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2032, %r2029}, {%r303, %r306}, {%r3536}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2041, %r2038}, {%r303, %r306}, {%r3537}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2050, %r2047}, {%r303, %r306}, {%r3538}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2059, %r2056}, {%r303, %r306}, {%r3539}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2025, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2027, %r2025, %r2029;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2030, %r355, %r2032, %r2027;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2034, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2036, %r2034, %r2038;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2039, %r355, %r2041, %r2036;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2043, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2045, %r2043, %r2047;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2048, %r355, %r2050, %r2045;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2052, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2054, %r2052, %r2056;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2057, %r355, %r2059, %r2054;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2061, %r358, %r2032;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2064, %r355, %r2029, %r2061;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2068, %r358, %r2041;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2071, %r355, %r2038, %r2068;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2075, %r358, %r2050;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2078, %r355, %r2047, %r2075;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2082, %r358, %r2059;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2085, %r355, %r2056, %r2082;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2130, %r2133}, {%r399, %r405, %r402, %r408}, {%r2030, %r2064}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2149, %r2152}, {%r399, %r405, %r402, %r408}, {%r2039, %r2071}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2137, %r2141}, {%r399, %r405, %r402, %r408}, {%r2048, %r2078}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2156, %r2160}, {%r399, %r405, %r402, %r408}, {%r2057, %r2085}, {%r3473, %r3473};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2129, %r2130, %r2130;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2132, %r2133, %r2133, %r2129;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2136, %r2137, %r2137, %r2132;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2140, %r2141, %r2141, %r2136;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3523, %r1639, %r2140, %r1969;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2148, %r2149, %r2149;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2151, %r2152, %r2152, %r2148;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2155, %r2156, %r2156, %r2151;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2159, %r2160, %r2160, %r2155;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3522, %r1639, %r2159, %r1988;
	// end inline asm
	add.s32 	%r3520, %r3520, 4;
	setp.ne.s32 	%p125, %r3520, 40;
	@%p125 bra 	LBB0_81;
// %bb.78:                              // %L21107
                                        //   in Loop: Header=BB0_73 Depth=2
	@%p65 bra 	LBB0_80;
// %bb.79:                              // %L21167
                                        //   in Loop: Header=BB0_73 Depth=2
	mul.lo.s32 	%r2167, %r3521, 1152;
	add.s32 	%r2168, %r103, %r2167;
	mul.wide.u32 	%rd223, %r2168, 4;
	add.s64 	%rd224, %rd4, %rd223;
	st.global.u32 	[%rd224], %r3523;
	add.s32 	%r2169, %r104, %r2167;
	mul.wide.u32 	%rd225, %r2169, 4;
	add.s64 	%rd226, %rd4, %rd225;
	st.global.u32 	[%rd226], %r3522;
	bra.uni 	LBB0_80;
LBB0_82:                                // %L21429.preheader
                                        //   in Loop: Header=BB0_71 Depth=1
	add.s32 	%r176, %r110, 24;
	mov.u32 	%r2172, 0;
	mov.u32 	%r3544, 12;
	mov.u32 	%r3545, %r2172;
	bra.uni 	LBB0_83;
LBB0_90:                                // %L31457
                                        //   in Loop: Header=BB0_83 Depth=2
	add.s32 	%r3521, %r3521, 1;
	mov.u32 	%r3520, 0;
	mov.u32 	%r3522, %r3520;
	mov.u32 	%r3523, %r3520;
LBB0_91:                                // %L31458
                                        //   in Loop: Header=BB0_83 Depth=2
	bar.sync 	0;
	add.s32 	%r3545, %r3545, 1;
	add.s32 	%r3544, %r3544, -4;
	setp.ne.s32 	%p140, %r3544, -12;
	@%p140 bra 	LBB0_83;
	bra.uni 	LBB0_92;
LBB0_83:                                // %L21429
                                        //   Parent Loop BB0_71 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p129, %r3544, 12;
	selp.b32 	%r2710, %r3494, 0, %p129;
	setp.eq.s32 	%p130, %r3544, 8;
	selp.b32 	%r2711, %r3498, %r2710, %p130;
	setp.eq.s32 	%p131, %r3544, 4;
	selp.b32 	%r2712, %r3502, %r2711, %p131;
	setp.eq.s32 	%p132, %r3544, 0;
	selp.b32 	%r2713, %r3506, %r2712, %p132;
	setp.eq.s32 	%p133, %r3544, -4;
	selp.b32 	%r2714, %r3510, %r2713, %p133;
	setp.eq.s32 	%p134, %r3544, -8;
	selp.b32 	%r2715, %r3514, %r2714, %p134;
	selp.b32 	%r2716, %r3495, 0, %p129;
	selp.b32 	%r2717, %r3499, %r2716, %p130;
	selp.b32 	%r2718, %r3503, %r2717, %p131;
	selp.b32 	%r2719, %r3507, %r2718, %p132;
	selp.b32 	%r2720, %r3511, %r2719, %p133;
	selp.b32 	%r2721, %r3515, %r2720, %p134;
	selp.b32 	%r2722, %r3496, 0, %p129;
	selp.b32 	%r2723, %r3500, %r2722, %p130;
	selp.b32 	%r2724, %r3504, %r2723, %p131;
	selp.b32 	%r2725, %r3508, %r2724, %p132;
	selp.b32 	%r2726, %r3512, %r2725, %p133;
	selp.b32 	%r2727, %r3516, %r2726, %p134;
	selp.b32 	%r2728, %r3497, 0, %p129;
	selp.b32 	%r2729, %r3501, %r2728, %p130;
	selp.b32 	%r2730, %r3505, %r2729, %p131;
	selp.b32 	%r2731, %r3509, %r2730, %p132;
	selp.b32 	%r2732, %r3513, %r2731, %p133;
	selp.b32 	%r2733, %r3517, %r2732, %p134;
	// begin inline asm
	mov.b32 %r2200, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r2211, {%rs198, %rs198};
	// end inline asm
	shr.u32 	%r2734, %r2715, 8;
	xor.b32  	%r2210, %r2734, 8947848;
	// begin inline asm
	lop3.b32 %r2197, %r1019, %r2210, %r2200, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2201, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2202, %r2200, %r2201;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2205, %r2197, %r2202;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2208, %r1030, %r2210, %r2211, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2212, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2213, %r2211, %r2212;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2216, %r2208, %r2213;
	// end inline asm
	// begin inline asm
	mov.b32 %r2246, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r2257, {%rs198, %rs198};
	// end inline asm
	shr.u32 	%r2735, %r2721, 8;
	xor.b32  	%r2256, %r2735, 8947848;
	// begin inline asm
	lop3.b32 %r2243, %r1019, %r2256, %r2246, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2247, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2248, %r2246, %r2247;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2251, %r2243, %r2248;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2254, %r1030, %r2256, %r2257, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2258, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2259, %r2257, %r2258;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2262, %r2254, %r2259;
	// end inline asm
	// begin inline asm
	mov.b32 %r2292, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r2303, {%rs198, %rs198};
	// end inline asm
	shr.u32 	%r2736, %r2727, 8;
	xor.b32  	%r2302, %r2736, 8947848;
	// begin inline asm
	lop3.b32 %r2289, %r1019, %r2302, %r2292, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2293, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2294, %r2292, %r2293;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2297, %r2289, %r2294;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2300, %r1030, %r2302, %r2303, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2304, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2305, %r2303, %r2304;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2308, %r2300, %r2305;
	// end inline asm
	// begin inline asm
	mov.b32 %r2338, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r2349, {%rs198, %rs198};
	// end inline asm
	shr.u32 	%r2737, %r2733, 8;
	xor.b32  	%r2348, %r2737, 8947848;
	// begin inline asm
	lop3.b32 %r2335, %r1019, %r2348, %r2338, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2339, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2340, %r2338, %r2339;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2343, %r2335, %r2340;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2346, %r1030, %r2348, %r2349, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2350, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2351, %r2349, %r2350;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2354, %r2346, %r2351;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3487;
    mov.b32 {%r2re, %r2im}, %r2205;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2357, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3488;
    mov.b32 {%r2re, %r2im}, %r2216;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2360, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3487;
    mov.b32 {%r2re, %r2im}, %r2251;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2363, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3488;
    mov.b32 {%r2re, %r2im}, %r2262;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2366, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3487;
    mov.b32 {%r2re, %r2im}, %r2297;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2369, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3488;
    mov.b32 {%r2re, %r2im}, %r2308;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2372, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3487;
    mov.b32 {%r2re, %r2im}, %r2343;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2375, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3488;
    mov.b32 {%r2re, %r2im}, %r2354;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2378, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2444, %r2441}, {%r303, %r306}, {%r2357}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2453, %r2450}, {%r303, %r306}, {%r2360}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2462, %r2459}, {%r303, %r306}, {%r2363}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2471, %r2468}, {%r303, %r306}, {%r2366}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2480, %r2477}, {%r303, %r306}, {%r2369}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2489, %r2486}, {%r303, %r306}, {%r2372}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2498, %r2495}, {%r303, %r306}, {%r2375}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2507, %r2504}, {%r303, %r306}, {%r2378}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2437, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2439, %r2437, %r2441;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2442, %r355, %r2444, %r2439;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2446, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2448, %r2446, %r2450;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2451, %r355, %r2453, %r2448;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2455, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2457, %r2455, %r2459;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2460, %r355, %r2462, %r2457;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2464, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2466, %r2464, %r2468;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2469, %r355, %r2471, %r2466;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2473, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2475, %r2473, %r2477;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2478, %r355, %r2480, %r2475;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2482, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2484, %r2482, %r2486;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2487, %r355, %r2489, %r2484;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2491, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2493, %r2491, %r2495;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2496, %r355, %r2498, %r2493;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2500, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2502, %r2500, %r2504;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2505, %r355, %r2507, %r2502;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2509, %r358, %r2444;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2512, %r355, %r2441, %r2509;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2516, %r358, %r2453;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2519, %r355, %r2450, %r2516;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2523, %r358, %r2462;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2526, %r355, %r2459, %r2523;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2530, %r358, %r2471;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2533, %r355, %r2468, %r2530;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2537, %r358, %r2480;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2540, %r355, %r2477, %r2537;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2544, %r358, %r2489;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2547, %r355, %r2486, %r2544;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2551, %r358, %r2498;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2554, %r355, %r2495, %r2551;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2558, %r358, %r2507;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2561, %r355, %r2504, %r2558;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2646, %r2647}, {%r399, %r405, %r402, %r408}, {%r2442, %r2512}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2654, %r2655}, {%r399, %r405, %r402, %r408}, {%r2451, %r2519}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2662, %r2663}, {%r399, %r405, %r402, %r408}, {%r2460, %r2526}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2670, %r2671}, {%r399, %r405, %r402, %r408}, {%r2469, %r2533}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2678, %r2679}, {%r399, %r405, %r402, %r408}, {%r2478, %r2540}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2686, %r2687}, {%r399, %r405, %r402, %r408}, {%r2487, %r2547}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2694, %r2695}, {%r399, %r405, %r402, %r408}, {%r2496, %r2554}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2702, %r2703}, {%r399, %r405, %r402, %r408}, {%r2505, %r2561}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	prmt.b32 %r2645, %r2646, %r2647, %r711;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2649, %r2646, %r2647, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2653, %r2654, %r2655, %r711;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2657, %r2654, %r2655, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2661, %r2662, %r2663, %r711;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2665, %r2662, %r2663, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2669, %r2670, %r2671, %r711;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2673, %r2670, %r2671, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2677, %r2678, %r2679, %r711;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2681, %r2678, %r2679, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2685, %r2686, %r2687, %r711;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2689, %r2686, %r2687, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2693, %r2694, %r2695, %r711;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2697, %r2694, %r2695, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2701, %r2702, %r2703, %r711;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2705, %r2702, %r2703, %r715;
	// end inline asm
	st.shared.u32 	[%rd6], %r2645;
	st.shared.u32 	[%rd7+33024], %r2649;
	st.shared.u32 	[%rd7+128], %r2653;
	st.shared.u32 	[%rd7+33152], %r2657;
	cvt.u16.u32 	%rs262, %r3545;
	and.b16  	%rs263, %rs262, 255;
	mul.lo.s16 	%rs264, %rs263, 171;
	shr.u16 	%rs265, %rs264, 10;
	mul.lo.s16 	%rs266, %rs265, 6;
	sub.s16 	%rs267, %rs262, %rs266;
	shl.b16 	%rs268, %rs267, 2;
	cvt.u32.u16 	%r2738, %rs268;
	and.b32  	%r2739, %r2738, 252;
	add.s32 	%r2740, %r176, %r2739;
	add.s32 	%r2741, %r2740, 1;
	shr.s32 	%r2742, %r2741, 31;
	shr.u32 	%r2743, %r2742, 30;
	add.s32 	%r2744, %r2741, %r2743;
	and.b32  	%r2745, %r2744, 67108860;
	sub.s32 	%r2746, %r2741, %r2745;
	shl.b32 	%r183, %r2746, 6;
	add.s32 	%r2747, %r95, %r183;
	mul.wide.s32 	%rd227, %r2747, 4;
	add.s64 	%rd229, %rd28, %rd227;
	st.shared.u32 	[%rd229], %r2661;
	add.s32 	%r2748, %r96, %r183;
	mul.wide.u32 	%rd230, %r2748, 4;
	add.s64 	%rd231, %rd28, %rd230;
	st.shared.u32 	[%rd231], %r2665;
	add.s32 	%r2749, %r97, %r183;
	mul.wide.s32 	%rd232, %r2749, 4;
	add.s64 	%rd233, %rd28, %rd232;
	st.shared.u32 	[%rd233], %r2669;
	add.s32 	%r2750, %r98, %r183;
	mul.wide.u32 	%rd234, %r2750, 4;
	add.s64 	%rd235, %rd28, %rd234;
	st.shared.u32 	[%rd235], %r2673;
	add.s32 	%r2751, %r2740, 2;
	shr.s32 	%r2752, %r2751, 31;
	shr.u32 	%r2753, %r2752, 30;
	add.s32 	%r2754, %r2751, %r2753;
	and.b32  	%r2755, %r2754, 67108860;
	sub.s32 	%r2756, %r2751, %r2755;
	shl.b32 	%r184, %r2756, 6;
	add.s32 	%r2757, %r95, %r184;
	mul.wide.s32 	%rd236, %r2757, 4;
	add.s64 	%rd237, %rd28, %rd236;
	st.shared.u32 	[%rd237], %r2677;
	add.s32 	%r2758, %r96, %r184;
	mul.wide.u32 	%rd238, %r2758, 4;
	add.s64 	%rd239, %rd28, %rd238;
	st.shared.u32 	[%rd239], %r2681;
	add.s32 	%r2759, %r97, %r184;
	mul.wide.s32 	%rd240, %r2759, 4;
	add.s64 	%rd241, %rd28, %rd240;
	st.shared.u32 	[%rd241], %r2685;
	add.s32 	%r2760, %r98, %r184;
	mul.wide.u32 	%rd242, %r2760, 4;
	add.s64 	%rd243, %rd28, %rd242;
	st.shared.u32 	[%rd243], %r2689;
	add.s32 	%r2761, %r2740, 3;
	shr.s32 	%r2762, %r2761, 31;
	shr.u32 	%r2763, %r2762, 30;
	add.s32 	%r2764, %r2761, %r2763;
	and.b32  	%r2765, %r2764, 67108860;
	sub.s32 	%r2766, %r2761, %r2765;
	shl.b32 	%r185, %r2766, 6;
	add.s32 	%r2767, %r95, %r185;
	mul.wide.s32 	%rd244, %r2767, 4;
	add.s64 	%rd245, %rd28, %rd244;
	st.shared.u32 	[%rd245], %r2693;
	add.s32 	%r2768, %r96, %r185;
	mul.wide.u32 	%rd246, %r2768, 4;
	add.s64 	%rd247, %rd28, %rd246;
	st.shared.u32 	[%rd247], %r2697;
	add.s32 	%r2769, %r97, %r185;
	mul.wide.s32 	%rd248, %r2769, 4;
	add.s64 	%rd249, %rd28, %rd248;
	st.shared.u32 	[%rd249], %r2701;
	add.s32 	%r2770, %r98, %r185;
	mul.wide.u32 	%rd250, %r2770, 4;
	add.s64 	%rd251, %rd28, %rd250;
	st.shared.u32 	[%rd251], %r2705;
	bar.sync 	0;
	mov.u32 	%r3550, %r2172;
	mov.u32 	%r3551, %r2172;
	mov.u32 	%r3552, %r2172;
	mov.u32 	%r3553, %r2172;
	@%p115 bra 	LBB0_114;
	bra.uni 	LBB0_84;
LBB0_114:                               // %oksrem11528
                                        //   in Loop: Header=BB0_83 Depth=2
	ld.shared.u32 	%r3553, [%rd8];
	ld.shared.u32 	%r3552, [%rd9];
	ld.shared.u32 	%r3551, [%rd10];
	ld.shared.u32 	%r3550, [%rd11];
LBB0_84:                                // %L27336
                                        //   in Loop: Header=BB0_83 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2806, %r2803}, {%r303, %r306}, {%r3553}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2815, %r2812}, {%r303, %r306}, {%r3552}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2824, %r2821}, {%r303, %r306}, {%r3551}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2833, %r2830}, {%r303, %r306}, {%r3550}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2799, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2801, %r2799, %r2803;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2804, %r355, %r2806, %r2801;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2808, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2810, %r2808, %r2812;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2813, %r355, %r2815, %r2810;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2817, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2819, %r2817, %r2821;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2822, %r355, %r2824, %r2819;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2826, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2828, %r2826, %r2830;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2831, %r355, %r2833, %r2828;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2835, %r358, %r2806;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2838, %r355, %r2803, %r2835;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2842, %r358, %r2815;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2845, %r355, %r2812, %r2842;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2849, %r358, %r2824;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2852, %r355, %r2821, %r2849;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2856, %r358, %r2833;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2859, %r355, %r2830, %r2856;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2904, %r2907}, {%r399, %r405, %r402, %r408}, {%r2804, %r2838}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2923, %r2926}, {%r399, %r405, %r402, %r408}, {%r2813, %r2845}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2911, %r2915}, {%r399, %r405, %r402, %r408}, {%r2822, %r2852}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2930, %r2934}, {%r399, %r405, %r402, %r408}, {%r2831, %r2859}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2903, %r2904, %r2904;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2906, %r2907, %r2907, %r2903;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2910, %r2911, %r2911, %r2906;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2914, %r2915, %r2915, %r2910;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2918, %r1639, %r2914, %r3523;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2922, %r2923, %r2923;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2925, %r2926, %r2926, %r2922;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2929, %r2930, %r2930, %r2925;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2933, %r2934, %r2934, %r2929;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2937, %r1639, %r2933, %r3522;
	// end inline asm
	mov.u32 	%r3554, %r2172;
	mov.u32 	%r3555, %r2172;
	mov.u32 	%r3556, %r2172;
	mov.u32 	%r3557, %r2172;
	@%p115 bra 	LBB0_115;
	bra.uni 	LBB0_85;
LBB0_115:                               // %oksrem12063
                                        //   in Loop: Header=BB0_83 Depth=2
	add.s32 	%r2942, %r99, %r183;
	mul.wide.s32 	%rd252, %r2942, 4;
	add.s64 	%rd254, %rd28, %rd252;
	ld.shared.u32 	%r3557, [%rd254];
	add.s32 	%r2943, %r100, %r183;
	mul.wide.u32 	%rd255, %r2943, 4;
	add.s64 	%rd256, %rd28, %rd255;
	ld.shared.u32 	%r3556, [%rd256];
	add.s32 	%r2944, %r101, %r183;
	mul.wide.s32 	%rd257, %r2944, 4;
	add.s64 	%rd258, %rd28, %rd257;
	ld.shared.u32 	%r3555, [%rd258];
	add.s32 	%r2945, %r102, %r183;
	mul.wide.u32 	%rd259, %r2945, 4;
	add.s64 	%rd260, %rd28, %rd259;
	ld.shared.u32 	%r3554, [%rd260];
LBB0_85:                                // %L28561
                                        //   in Loop: Header=BB0_83 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2981, %r2978}, {%r303, %r306}, {%r3557}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2990, %r2987}, {%r303, %r306}, {%r3556}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2999, %r2996}, {%r303, %r306}, {%r3555}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3008, %r3005}, {%r303, %r306}, {%r3554}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2974, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2976, %r2974, %r2978;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2979, %r355, %r2981, %r2976;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2983, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2985, %r2983, %r2987;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2988, %r355, %r2990, %r2985;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2992, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2994, %r2992, %r2996;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2997, %r355, %r2999, %r2994;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3001, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3003, %r3001, %r3005;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3006, %r355, %r3008, %r3003;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3010, %r358, %r2981;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3013, %r355, %r2978, %r3010;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3017, %r358, %r2990;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3020, %r355, %r2987, %r3017;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3024, %r358, %r2999;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3027, %r355, %r2996, %r3024;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3031, %r358, %r3008;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3034, %r355, %r3005, %r3031;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3079, %r3082}, {%r399, %r405, %r402, %r408}, {%r2979, %r3013}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3098, %r3101}, {%r399, %r405, %r402, %r408}, {%r2988, %r3020}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3086, %r3090}, {%r399, %r405, %r402, %r408}, {%r2997, %r3027}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3105, %r3109}, {%r399, %r405, %r402, %r408}, {%r3006, %r3034}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3078, %r3079, %r3079;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3081, %r3082, %r3082, %r3078;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3085, %r3086, %r3086, %r3081;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3089, %r3090, %r3090, %r3085;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3093, %r1639, %r3089, %r2918;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3097, %r3098, %r3098;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3100, %r3101, %r3101, %r3097;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3104, %r3105, %r3105, %r3100;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3108, %r3109, %r3109, %r3104;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3112, %r1639, %r3108, %r2937;
	// end inline asm
	mov.u32 	%r3558, %r2172;
	mov.u32 	%r3559, %r2172;
	mov.u32 	%r3560, %r2172;
	mov.u32 	%r3561, %r2172;
	@%p115 bra 	LBB0_116;
	bra.uni 	LBB0_86;
LBB0_116:                               // %oksrem12598
                                        //   in Loop: Header=BB0_83 Depth=2
	add.s32 	%r3117, %r99, %r184;
	mul.wide.s32 	%rd261, %r3117, 4;
	add.s64 	%rd263, %rd28, %rd261;
	ld.shared.u32 	%r3561, [%rd263];
	add.s32 	%r3118, %r100, %r184;
	mul.wide.u32 	%rd264, %r3118, 4;
	add.s64 	%rd265, %rd28, %rd264;
	ld.shared.u32 	%r3560, [%rd265];
	add.s32 	%r3119, %r101, %r184;
	mul.wide.s32 	%rd266, %r3119, 4;
	add.s64 	%rd267, %rd28, %rd266;
	ld.shared.u32 	%r3559, [%rd267];
	add.s32 	%r3120, %r102, %r184;
	mul.wide.u32 	%rd268, %r3120, 4;
	add.s64 	%rd269, %rd28, %rd268;
	ld.shared.u32 	%r3558, [%rd269];
LBB0_86:                                // %L29786
                                        //   in Loop: Header=BB0_83 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3156, %r3153}, {%r303, %r306}, {%r3561}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3165, %r3162}, {%r303, %r306}, {%r3560}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3174, %r3171}, {%r303, %r306}, {%r3559}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3183, %r3180}, {%r303, %r306}, {%r3558}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3149, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3151, %r3149, %r3153;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3154, %r355, %r3156, %r3151;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3158, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3160, %r3158, %r3162;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3163, %r355, %r3165, %r3160;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3167, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3169, %r3167, %r3171;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3172, %r355, %r3174, %r3169;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3176, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3178, %r3176, %r3180;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3181, %r355, %r3183, %r3178;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3185, %r358, %r3156;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3188, %r355, %r3153, %r3185;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3192, %r358, %r3165;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3195, %r355, %r3162, %r3192;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3199, %r358, %r3174;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3202, %r355, %r3171, %r3199;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3206, %r358, %r3183;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3209, %r355, %r3180, %r3206;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3254, %r3257}, {%r399, %r405, %r402, %r408}, {%r3154, %r3188}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3273, %r3276}, {%r399, %r405, %r402, %r408}, {%r3163, %r3195}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3261, %r3265}, {%r399, %r405, %r402, %r408}, {%r3172, %r3202}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3280, %r3284}, {%r399, %r405, %r402, %r408}, {%r3181, %r3209}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3253, %r3254, %r3254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3256, %r3257, %r3257, %r3253;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3260, %r3261, %r3261, %r3256;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3264, %r3265, %r3265, %r3260;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3268, %r1639, %r3264, %r3093;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3272, %r3273, %r3273;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3275, %r3276, %r3276, %r3272;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3279, %r3280, %r3280, %r3275;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3283, %r3284, %r3284, %r3279;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3287, %r1639, %r3283, %r3112;
	// end inline asm
	mov.u32 	%r3562, %r2172;
	mov.u32 	%r3563, %r2172;
	mov.u32 	%r3564, %r2172;
	mov.u32 	%r3565, %r2172;
	@%p115 bra 	LBB0_117;
	bra.uni 	LBB0_87;
LBB0_117:                               // %oksrem13133
                                        //   in Loop: Header=BB0_83 Depth=2
	add.s32 	%r3292, %r99, %r185;
	mul.wide.s32 	%rd270, %r3292, 4;
	add.s64 	%rd272, %rd28, %rd270;
	ld.shared.u32 	%r3565, [%rd272];
	add.s32 	%r3293, %r100, %r185;
	mul.wide.u32 	%rd273, %r3293, 4;
	add.s64 	%rd274, %rd28, %rd273;
	ld.shared.u32 	%r3564, [%rd274];
	add.s32 	%r3294, %r101, %r185;
	mul.wide.s32 	%rd275, %r3294, 4;
	add.s64 	%rd276, %rd28, %rd275;
	ld.shared.u32 	%r3563, [%rd276];
	add.s32 	%r3295, %r102, %r185;
	mul.wide.u32 	%rd277, %r3295, 4;
	add.s64 	%rd278, %rd28, %rd277;
	ld.shared.u32 	%r3562, [%rd278];
LBB0_87:                                // %L31011
                                        //   in Loop: Header=BB0_83 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3331, %r3328}, {%r303, %r306}, {%r3565}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3340, %r3337}, {%r303, %r306}, {%r3564}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3349, %r3346}, {%r303, %r306}, {%r3563}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3358, %r3355}, {%r303, %r306}, {%r3562}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3324, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3326, %r3324, %r3328;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3329, %r355, %r3331, %r3326;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3333, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3335, %r3333, %r3337;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3338, %r355, %r3340, %r3335;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3342, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3344, %r3342, %r3346;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3347, %r355, %r3349, %r3344;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3351, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3353, %r3351, %r3355;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3356, %r355, %r3358, %r3353;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3360, %r358, %r3331;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3363, %r355, %r3328, %r3360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3367, %r358, %r3340;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3370, %r355, %r3337, %r3367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3374, %r358, %r3349;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3377, %r355, %r3346, %r3374;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3381, %r358, %r3358;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3384, %r355, %r3355, %r3381;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3429, %r3432}, {%r399, %r405, %r402, %r408}, {%r3329, %r3363}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3448, %r3451}, {%r399, %r405, %r402, %r408}, {%r3338, %r3370}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3436, %r3440}, {%r399, %r405, %r402, %r408}, {%r3347, %r3377}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3455, %r3459}, {%r399, %r405, %r402, %r408}, {%r3356, %r3384}, {%r2172, %r2172};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3428, %r3429, %r3429;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3431, %r3432, %r3432, %r3428;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3435, %r3436, %r3436, %r3431;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3439, %r3440, %r3440, %r3435;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3523, %r1639, %r3439, %r3268;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3447, %r3448, %r3448;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3450, %r3451, %r3451, %r3447;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3454, %r3455, %r3455, %r3450;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3458, %r3459, %r3459, %r3454;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3522, %r1639, %r3458, %r3287;
	// end inline asm
	add.s32 	%r3520, %r3520, 4;
	setp.ne.s32 	%p138, %r3520, 40;
	@%p138 bra 	LBB0_91;
// %bb.88:                              // %L31161
                                        //   in Loop: Header=BB0_83 Depth=2
	@%p65 bra 	LBB0_90;
// %bb.89:                              // %L31221
                                        //   in Loop: Header=BB0_83 Depth=2
	mul.lo.s32 	%r3466, %r3521, 1152;
	add.s32 	%r3467, %r103, %r3466;
	mul.wide.u32 	%rd279, %r3467, 4;
	add.s64 	%rd280, %rd4, %rd279;
	st.global.u32 	[%rd280], %r3523;
	add.s32 	%r3468, %r104, %r3466;
	mul.wide.u32 	%rd281, %r3468, 4;
	add.s64 	%rd282, %rd4, %rd281;
	st.global.u32 	[%rd282], %r3522;
	bra.uni 	LBB0_90;
LBB0_93:                                // %L31493
	mov.u32 	%r3470, 0;
	st.global.u32 	[%rd5], %r3470;
	ret;
LBB0_1:                                 // %L8
	ld.param.u32 	%r288, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd13, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0];
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd13;
	st.param.b32 	[param0+8], %r288;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
