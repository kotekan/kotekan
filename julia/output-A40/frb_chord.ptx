// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE // -- Begin function _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.visible .entry _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE(
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<246>;
	.reg .b16 	%rs<264>;
	.reg .b32 	%r<3703>;
	.reg .f32 	%f<787>;
	.reg .b64 	%rd<246>;

// %bb.0:                               // %conversion
	// begin inline asm
	mov.u32 %r304, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p3, %r304, 76895;
	@%p3 bra 	$L__BB0_159;
	bra.uni 	$L__BB0_1;
$L__BB0_159:                            // %L10
	ld.param.u64 	%rd40, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %ctaid.x;
	or.b32  	%r305, %r3, %r1;
	mad.lo.s32 	%r306, %r4, 768, %r305;
	mul.wide.u32 	%rd46, %r306, 4;
	add.s64 	%rd5, %rd40, %rd46;
	mov.u32 	%r307, 1;
	st.global.u32 	[%rd5], %r307;
	and.b32  	%r5, %r1, 3;
	shr.u32 	%r6, %r1, 2;
	mul.lo.s32 	%r308, %r5, %r6;
	and.b32  	%r309, %r308, 7;
	cvt.rn.f32.s32 	%f201, %r309;
	mov.f32 	%f202, 0f40800000;
	div.approx.f32 	%f1, %f201, %f202;
	abs.f32 	%f785, %f1;
	setp.lt.f32 	%p4, %f785, 0f40000000;
	setp.gtu.f32 	%p245, %f785, 0f4B800000;
	mov.f32 	%f781, %f785;
	@%p4 bra 	$L__BB0_171;
// %bb.160:
	@%p245 bra 	$L__BB0_167;
	bra.uni 	$L__BB0_161;
$L__BB0_167:
	mov.b32 	%r219, %f785;
	and.b32  	%r310, %r219, 8388607;
	or.b32  	%r3698, %r310, 1065353216;
	mov.b32 	%f780, %r3698;
	add.s32 	%r311, %r219, -1073741824;
	and.b32  	%r3699, %r311, -8388608;
	setp.eq.s32 	%p11, %r3699, 0;
	@%p11 bra 	$L__BB0_170;
// %bb.168:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f212, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f211,%f212;
	// end inline asm
$L__BB0_169:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r312, %r3699, 192937984;
	add.s32 	%r313, %r3698, %r312;
	mov.b32 	%f213, %r313;
	mul.f32 	%f214, %f211, %f213;
	sub.f32 	%f215, %f213, %f214;
	fma.rn.f32 	%f216, %f215, %f211, %f214;
	sub.f32 	%f217, %f213, %f216;
	fma.rz.f32 	%f218, %f217, %f211, %f216;
	cvt.rzi.f32.f32 	%f219, %f218;
	sub.f32 	%f780, %f213, %f219;
	sub.s32 	%r3699, %r3699, %r312;
	mov.b32 	%r3698, %f780;
	setp.ne.s32 	%p12, %r3699, 0;
	setp.ne.s32 	%p13, %r3698, 0;
	and.pred  	%p14, %p12, %p13;
	@%p14 bra 	$L__BB0_169;
$L__BB0_170:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p15, %r219, 2139095039;
	selp.f32 	%f220, 0f7FFFFFFF, 0f4B800000, %p15;
	mul.f32 	%f221, %f780, 0f34000000;
	mul.f32 	%f781, %f220, %f221;
	bra.uni 	$L__BB0_171;
$L__BB0_161:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f203, 0f40000000;
	div.approx.f32 	%f204, %f785, %f203;
	cvt.rzi.f32.f32 	%f779, %f204;
	fma.rn.f32 	%f172, %f779, 0fC0000000, %f785;
	mov.b32 	%r218, %f172;
	setp.lt.u32 	%p6, %r218, 1073741824;
	@%p6 bra 	$L__BB0_166;
// %bb.162:
	setp.lt.u32 	%p7, %r218, -2147483647;
	@%p7 bra 	$L__BB0_164;
// %bb.163:
	add.f32 	%f209, %f779, 0fBF800000;
	setp.lt.f32 	%p10, %f172, 0fC0000000;
	add.f32 	%f210, %f209, 0fBF800000;
	selp.f32 	%f779, %f210, %f209, %p10;
	bra.uni 	$L__BB0_166;
$L__BB0_164:
	add.f32 	%f779, %f779, 0f3F800000;
	setp.ltu.f32 	%p8, %f172, 0f40800000;
	@%p8 bra 	$L__BB0_166;
// %bb.165:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f205, %f779, 0f3F800000;
	fma.rn.f32 	%f207, %f203, 0fC0400000, %f172;
	setp.ge.f32 	%p9, %f207, 0f00000000;
	add.f32 	%f208, %f205, 0f3F800000;
	selp.f32 	%f779, %f208, %f205, %p9;
$L__BB0_166:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f781, %f779, 0fC0000000, %f785;
$L__BB0_171:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f222, %f781;
	setp.gtu.f32 	%p16, %f222, 0f7F800000;
	mov.b32 	%r314, %f1;
	and.b32  	%r226, %r314, -2147483648;
	@%p16 bra 	$L__BB0_173;
// %bb.172:
	mov.b32 	%r315, %f781;
	or.b32  	%r316, %r226, %r315;
	mov.b32 	%f781, %r316;
$L__BB0_173:                            // %__nv_fmodf.exit
	add.f32 	%f224, %f781, %f781;
	mov.b32 	%r323, %f224;
	and.b32  	%r324, %r323, -2147483648;
	or.b32  	%r325, %r324, 1056964608;
	mov.b32 	%f225, %r325;
	add.f32 	%f226, %f224, %f225;
	cvt.rzi.f32.f32 	%f227, %f226;
	abs.f32 	%f228, %f224;
	setp.gt.f32 	%p17, %f228, 0f4B000000;
	selp.f32 	%f229, %f224, %f227, %p17;
	cvt.rzi.f32.f32 	%f230, %f224;
	setp.lt.f32 	%p18, %f228, 0f3F000000;
	selp.f32 	%f231, %f230, %f229, %p18;
	fma.rn.f32 	%f232, %f231, 0fBF000000, %f781;
	mul.f32 	%f233, %f232, %f232;
	fma.rn.f32 	%f234, %f233, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f235, %f233, 0f3E684E12, 0fBFAAD2E0;
	mov.f32 	%f223, 0f00000000;
	shl.b32 	%r229, %r1, 1;
	and.b32  	%r230, %r229, 6;
	or.b32  	%r231, %r230, 1;
	setp.eq.s32 	%p24, %r230, 6;
	mov.f32 	%f729, 0f41C00000;
	mul.lo.s32 	%r3597, %r230, %r6;
	mov.f32 	%f735, %f223;
	mov.f32 	%f736, %f223;
	@%p24 bra 	$L__BB0_17;
// %bb.2:                               // %L204
	cvt.u16.u32 	%rs3, %r3597;
	and.b16  	%rs4, %rs3, 255;
	mul.lo.s16 	%rs5, %rs4, 171;
	shr.u16 	%rs6, %rs5, 13;
	mul.lo.s16 	%rs7, %rs6, 48;
	sub.s16 	%rs8, %rs3, %rs7;
	and.b16  	%rs9, %rs8, 255;
	cvt.rn.f32.u16 	%f255, %rs9;
	div.approx.f32 	%f3, %f255, %f729;
	abs.f32 	%f733, %f3;
	setp.lt.f32 	%p25, %f733, 0f40000000;
	@%p25 bra 	$L__BB0_14;
// %bb.3:
	setp.gtu.f32 	%p26, %f733, 0f4B800000;
	@%p26 bra 	$L__BB0_10;
	bra.uni 	$L__BB0_4;
$L__BB0_10:
	mov.b32 	%r8, %f733;
	and.b32  	%r332, %r8, 8388607;
	or.b32  	%r3600, %r332, 1065353216;
	mov.b32 	%f732, %r3600;
	add.s32 	%r333, %r8, -1073741824;
	and.b32  	%r3601, %r333, -8388608;
	setp.eq.s32 	%p32, %r3601, 0;
	@%p32 bra 	$L__BB0_13;
// %bb.11:                              // %__nv_fmaf_rn.exit4.i.i.i991.preheader
	mov.f32 	%f266, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f265,%f266;
	// end inline asm
$L__BB0_12:                             // %__nv_fmaf_rn.exit4.i.i.i991
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r334, %r3601, 192937984;
	add.s32 	%r335, %r3600, %r334;
	mov.b32 	%f267, %r335;
	mul.f32 	%f268, %f265, %f267;
	sub.f32 	%f269, %f267, %f268;
	fma.rn.f32 	%f270, %f269, %f265, %f268;
	sub.f32 	%f271, %f267, %f270;
	fma.rz.f32 	%f272, %f271, %f265, %f270;
	cvt.rzi.f32.f32 	%f273, %f272;
	sub.f32 	%f732, %f267, %f273;
	sub.s32 	%r3601, %r3601, %r334;
	mov.b32 	%r3600, %f732;
	setp.ne.s32 	%p33, %r3601, 0;
	setp.ne.s32 	%p34, %r3600, 0;
	and.pred  	%p35, %p33, %p34;
	@%p35 bra 	$L__BB0_12;
$L__BB0_13:                             // %__internal_fmodf_slowpath_mod.exit.i.i993
	setp.gt.u32 	%p36, %r8, 2139095039;
	selp.f32 	%f274, 0f7FFFFFFF, 0f4B800000, %p36;
	mul.f32 	%f275, %f732, 0f34000000;
	mul.f32 	%f733, %f274, %f275;
	bra.uni 	$L__BB0_14;
$L__BB0_4:                              // %__nv_fast_fdividef.exit.i.i.i970
	mov.f32 	%f257, 0f40000000;
	div.approx.f32 	%f258, %f733, %f257;
	cvt.rzi.f32.f32 	%f731, %f258;
	fma.rn.f32 	%f6, %f731, 0fC0000000, %f733;
	mov.b32 	%r7, %f6;
	setp.lt.u32 	%p27, %r7, 1073741824;
	@%p27 bra 	$L__BB0_9;
// %bb.5:
	setp.lt.u32 	%p28, %r7, -2147483647;
	@%p28 bra 	$L__BB0_7;
// %bb.6:
	add.f32 	%f263, %f731, 0fBF800000;
	setp.lt.f32 	%p31, %f6, 0fC0000000;
	add.f32 	%f264, %f263, 0fBF800000;
	selp.f32 	%f731, %f264, %f263, %p31;
	bra.uni 	$L__BB0_9;
$L__BB0_7:
	add.f32 	%f731, %f731, 0f3F800000;
	setp.ltu.f32 	%p29, %f6, 0f40800000;
	@%p29 bra 	$L__BB0_9;
// %bb.8:                               // %__nv_fmaf_rn.exit.i.i.i974
	add.f32 	%f259, %f731, 0f3F800000;
	fma.rn.f32 	%f261, %f257, 0fC0400000, %f6;
	setp.ge.f32 	%p30, %f261, 0f00000000;
	add.f32 	%f262, %f259, 0f3F800000;
	selp.f32 	%f731, %f262, %f259, %p30;
$L__BB0_9:                              // %__internal_fmodf_fastpath_quot.exit.i.i977
	fma.rn.f32 	%f733, %f731, 0fC0000000, %f733;
$L__BB0_14:                             // %__internal_fmodf_kernel.exit.i996
	abs.f32 	%f276, %f733;
	setp.gtu.f32 	%p37, %f276, 0f7F800000;
	@%p37 bra 	$L__BB0_16;
// %bb.15:
	mov.b32 	%r336, %f3;
	and.b32  	%r337, %r336, -2147483648;
	mov.b32 	%r338, %f733;
	or.b32  	%r339, %r337, %r338;
	mov.b32 	%f733, %r339;
$L__BB0_16:                             // %__nv_fmodf.exit997
	add.f32 	%f277, %f733, %f733;
	mov.b32 	%r340, %f277;
	and.b32  	%r341, %r340, -2147483648;
	or.b32  	%r342, %r341, 1056964608;
	mov.b32 	%f278, %r342;
	add.f32 	%f279, %f277, %f278;
	cvt.rzi.f32.f32 	%f280, %f279;
	abs.f32 	%f281, %f277;
	setp.gt.f32 	%p38, %f281, 0f4B000000;
	selp.f32 	%f282, %f277, %f280, %p38;
	cvt.rzi.f32.f32 	%f283, %f277;
	setp.lt.f32 	%p39, %f281, 0f3F000000;
	selp.f32 	%f284, %f283, %f282, %p39;
	cvt.rzi.s32.f32 	%r343, %f284;
	fma.rn.f32 	%f285, %f284, 0fBF000000, %f733;
	mul.f32 	%f286, %f285, %f285;
	fma.rn.f32 	%f287, %f286, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f288, %f286, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f289, %f287, %f286, 0fC0A55DF6;
	fma.rn.f32 	%f290, %f288, %f286, 0f4081E0CF;
	fma.rn.f32 	%f291, %f286, %f285, 0f00000000;
	fma.rn.f32 	%f292, %f290, %f286, 0fC09DE9E6;
	fma.rn.f32 	%f293, %f289, %f291, 0f00000000;
	fma.rn.f32 	%f294, %f292, %f286, 0f3F800000;
	fma.rn.f32 	%f295, %f285, 0f40490FDB, %f293;
	and.b32  	%r344, %r343, 1;
	setp.eq.b32 	%p40, %r344, 1;
	selp.f32 	%f296, %f294, %f295, %p40;
	selp.f32 	%f297, %f295, %f294, %p40;
	and.b32  	%r345, %r343, 2;
	setp.eq.s32 	%p41, %r345, 0;
	neg.f32 	%f298, %f296;
	selp.f32 	%f299, %f296, %f298, %p41;
	add.s32 	%r346, %r343, 1;
	and.b32  	%r347, %r346, 2;
	setp.eq.s32 	%p42, %r347, 0;
	mov.f32 	%f300, 0f00000000;
	sub.f32 	%f301, %f300, %f297;
	selp.f32 	%f302, %f297, %f301, %p42;
	cvt.rzi.f32.f32 	%f303, %f733;
	setp.eq.f32 	%p43, %f303, %f733;
	mul.f32 	%f304, %f733, 0f00000000;
	selp.f32 	%f736, %f304, %f299, %p43;
	abs.f32 	%f305, %f733;
	setp.gt.f32 	%p44, %f305, 0f4B800000;
	add.f32 	%f306, %f736, 0f3F800000;
	selp.f32 	%f735, %f306, %f302, %p44;
$L__BB0_17:                             // %L238
	cvt.rzi.s32.f32 	%r326, %f231;
	fma.rn.f32 	%f236, %f234, %f233, 0fC0A55DF6;
	fma.rn.f32 	%f237, %f235, %f233, 0f4081E0CF;
	fma.rn.f32 	%f238, %f233, %f232, 0f00000000;
	setp.gt.u32 	%p45, %r231, 5;
	mul.lo.s32 	%r3598, %r231, %r6;
	mov.f32 	%f741, %f223;
	mov.f32 	%f742, %f223;
	@%p45 bra 	$L__BB0_33;
// %bb.18:                              // %L242
	mul.hi.u32 	%r349, %r3598, -1431655765;
	shr.u32 	%r350, %r349, 5;
	mul.lo.s32 	%r351, %r350, 48;
	sub.s32 	%r352, %r3598, %r351;
	cvt.rn.f32.s32 	%f308, %r352;
	div.approx.f32 	%f24, %f308, %f729;
	abs.f32 	%f739, %f24;
	setp.lt.f32 	%p46, %f739, 0f40000000;
	@%p46 bra 	$L__BB0_30;
// %bb.19:
	setp.gtu.f32 	%p47, %f739, 0f4B800000;
	@%p47 bra 	$L__BB0_26;
	bra.uni 	$L__BB0_20;
$L__BB0_26:
	mov.b32 	%r16, %f739;
	and.b32  	%r353, %r16, 8388607;
	or.b32  	%r3602, %r353, 1065353216;
	mov.b32 	%f738, %r3602;
	add.s32 	%r354, %r16, -1073741824;
	and.b32  	%r3603, %r354, -8388608;
	setp.eq.s32 	%p53, %r3603, 0;
	@%p53 bra 	$L__BB0_29;
// %bb.27:                              // %__nv_fmaf_rn.exit4.i.i.i1022.preheader
	mov.f32 	%f319, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f318,%f319;
	// end inline asm
$L__BB0_28:                             // %__nv_fmaf_rn.exit4.i.i.i1022
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r355, %r3603, 192937984;
	add.s32 	%r356, %r3602, %r355;
	mov.b32 	%f320, %r356;
	mul.f32 	%f321, %f318, %f320;
	sub.f32 	%f322, %f320, %f321;
	fma.rn.f32 	%f323, %f322, %f318, %f321;
	sub.f32 	%f324, %f320, %f323;
	fma.rz.f32 	%f325, %f324, %f318, %f323;
	cvt.rzi.f32.f32 	%f326, %f325;
	sub.f32 	%f738, %f320, %f326;
	sub.s32 	%r3603, %r3603, %r355;
	mov.b32 	%r3602, %f738;
	setp.ne.s32 	%p54, %r3603, 0;
	setp.ne.s32 	%p55, %r3602, 0;
	and.pred  	%p56, %p54, %p55;
	@%p56 bra 	$L__BB0_28;
$L__BB0_29:                             // %__internal_fmodf_slowpath_mod.exit.i.i1024
	setp.gt.u32 	%p57, %r16, 2139095039;
	selp.f32 	%f327, 0f7FFFFFFF, 0f4B800000, %p57;
	mul.f32 	%f328, %f738, 0f34000000;
	mul.f32 	%f739, %f327, %f328;
	bra.uni 	$L__BB0_30;
$L__BB0_20:                             // %__nv_fast_fdividef.exit.i.i.i1001
	mov.f32 	%f310, 0f40000000;
	div.approx.f32 	%f311, %f739, %f310;
	cvt.rzi.f32.f32 	%f737, %f311;
	fma.rn.f32 	%f27, %f737, 0fC0000000, %f739;
	mov.b32 	%r15, %f27;
	setp.lt.u32 	%p48, %r15, 1073741824;
	@%p48 bra 	$L__BB0_25;
// %bb.21:
	setp.lt.u32 	%p49, %r15, -2147483647;
	@%p49 bra 	$L__BB0_23;
// %bb.22:
	add.f32 	%f316, %f737, 0fBF800000;
	setp.lt.f32 	%p52, %f27, 0fC0000000;
	add.f32 	%f317, %f316, 0fBF800000;
	selp.f32 	%f737, %f317, %f316, %p52;
	bra.uni 	$L__BB0_25;
$L__BB0_23:
	add.f32 	%f737, %f737, 0f3F800000;
	setp.ltu.f32 	%p50, %f27, 0f40800000;
	@%p50 bra 	$L__BB0_25;
// %bb.24:                              // %__nv_fmaf_rn.exit.i.i.i1005
	add.f32 	%f312, %f737, 0f3F800000;
	fma.rn.f32 	%f314, %f310, 0fC0400000, %f27;
	setp.ge.f32 	%p51, %f314, 0f00000000;
	add.f32 	%f315, %f312, 0f3F800000;
	selp.f32 	%f737, %f315, %f312, %p51;
$L__BB0_25:                             // %__internal_fmodf_fastpath_quot.exit.i.i1008
	fma.rn.f32 	%f739, %f737, 0fC0000000, %f739;
$L__BB0_30:                             // %__internal_fmodf_kernel.exit.i1027
	abs.f32 	%f329, %f739;
	setp.gtu.f32 	%p58, %f329, 0f7F800000;
	@%p58 bra 	$L__BB0_32;
// %bb.31:
	mov.b32 	%r357, %f24;
	and.b32  	%r358, %r357, -2147483648;
	mov.b32 	%r359, %f739;
	or.b32  	%r360, %r358, %r359;
	mov.b32 	%f739, %r360;
$L__BB0_32:                             // %__nv_fmodf.exit1028
	add.f32 	%f330, %f739, %f739;
	mov.b32 	%r361, %f330;
	and.b32  	%r362, %r361, -2147483648;
	or.b32  	%r363, %r362, 1056964608;
	mov.b32 	%f331, %r363;
	add.f32 	%f332, %f330, %f331;
	cvt.rzi.f32.f32 	%f333, %f332;
	abs.f32 	%f334, %f330;
	setp.gt.f32 	%p59, %f334, 0f4B000000;
	selp.f32 	%f335, %f330, %f333, %p59;
	cvt.rzi.f32.f32 	%f336, %f330;
	setp.lt.f32 	%p60, %f334, 0f3F000000;
	selp.f32 	%f337, %f336, %f335, %p60;
	cvt.rzi.s32.f32 	%r364, %f337;
	fma.rn.f32 	%f338, %f337, 0fBF000000, %f739;
	mul.f32 	%f339, %f338, %f338;
	fma.rn.f32 	%f340, %f339, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f341, %f339, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f342, %f340, %f339, 0fC0A55DF6;
	fma.rn.f32 	%f343, %f341, %f339, 0f4081E0CF;
	fma.rn.f32 	%f344, %f339, %f338, 0f00000000;
	fma.rn.f32 	%f345, %f343, %f339, 0fC09DE9E6;
	fma.rn.f32 	%f346, %f342, %f344, 0f00000000;
	fma.rn.f32 	%f347, %f345, %f339, 0f3F800000;
	fma.rn.f32 	%f348, %f338, 0f40490FDB, %f346;
	and.b32  	%r365, %r364, 1;
	setp.eq.b32 	%p61, %r365, 1;
	selp.f32 	%f349, %f347, %f348, %p61;
	selp.f32 	%f350, %f348, %f347, %p61;
	and.b32  	%r366, %r364, 2;
	setp.eq.s32 	%p62, %r366, 0;
	neg.f32 	%f351, %f349;
	selp.f32 	%f352, %f349, %f351, %p62;
	add.s32 	%r367, %r364, 1;
	and.b32  	%r368, %r367, 2;
	setp.eq.s32 	%p63, %r368, 0;
	mov.f32 	%f353, 0f00000000;
	sub.f32 	%f354, %f353, %f350;
	selp.f32 	%f355, %f350, %f354, %p63;
	cvt.rzi.f32.f32 	%f356, %f739;
	setp.eq.f32 	%p64, %f356, %f739;
	mul.f32 	%f357, %f739, 0f00000000;
	selp.f32 	%f742, %f357, %f352, %p64;
	abs.f32 	%f358, %f739;
	setp.gt.f32 	%p65, %f358, 0f4B800000;
	add.f32 	%f359, %f742, 0f3F800000;
	selp.f32 	%f741, %f359, %f355, %p65;
$L__BB0_33:                             // %L276
	fma.rn.f32 	%f239, %f237, %f233, 0fC09DE9E6;
	fma.rn.f32 	%f240, %f236, %f238, 0f00000000;
	and.b32  	%r327, %r326, 1;
	setp.gt.u32 	%p67, %r1, 23;
	or.pred  	%p1, %p24, %p67;
	mov.f32 	%f730, 0f40400000;
	mov.f32 	%f747, %f223;
	mov.f32 	%f748, %f223;
	@%p1 bra 	$L__BB0_49;
// %bb.34:                              // %L314
	cvt.u16.u32 	%rs10, %r3597;
	and.b16  	%rs11, %rs10, 255;
	mul.lo.s16 	%rs12, %rs11, 171;
	shr.u16 	%rs13, %rs12, 10;
	mul.lo.s16 	%rs14, %rs13, 6;
	sub.s16 	%rs15, %rs10, %rs14;
	and.b16  	%rs16, %rs15, 255;
	cvt.rn.f32.u16 	%f361, %rs16;
	div.approx.f32 	%f45, %f361, %f730;
	abs.f32 	%f745, %f45;
	setp.lt.f32 	%p68, %f745, 0f40000000;
	@%p68 bra 	$L__BB0_46;
// %bb.35:
	setp.gtu.f32 	%p69, %f745, 0f4B800000;
	@%p69 bra 	$L__BB0_42;
	bra.uni 	$L__BB0_36;
$L__BB0_42:
	mov.b32 	%r26, %f745;
	and.b32  	%r376, %r26, 8388607;
	or.b32  	%r3604, %r376, 1065353216;
	mov.b32 	%f744, %r3604;
	add.s32 	%r377, %r26, -1073741824;
	and.b32  	%r3605, %r377, -8388608;
	setp.eq.s32 	%p75, %r3605, 0;
	@%p75 bra 	$L__BB0_45;
// %bb.43:                              // %__nv_fmaf_rn.exit4.i.i.i1053.preheader
	mov.f32 	%f372, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f371,%f372;
	// end inline asm
$L__BB0_44:                             // %__nv_fmaf_rn.exit4.i.i.i1053
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r378, %r3605, 192937984;
	add.s32 	%r379, %r3604, %r378;
	mov.b32 	%f373, %r379;
	mul.f32 	%f374, %f371, %f373;
	sub.f32 	%f375, %f373, %f374;
	fma.rn.f32 	%f376, %f375, %f371, %f374;
	sub.f32 	%f377, %f373, %f376;
	fma.rz.f32 	%f378, %f377, %f371, %f376;
	cvt.rzi.f32.f32 	%f379, %f378;
	sub.f32 	%f744, %f373, %f379;
	sub.s32 	%r3605, %r3605, %r378;
	mov.b32 	%r3604, %f744;
	setp.ne.s32 	%p76, %r3605, 0;
	setp.ne.s32 	%p77, %r3604, 0;
	and.pred  	%p78, %p76, %p77;
	@%p78 bra 	$L__BB0_44;
$L__BB0_45:                             // %__internal_fmodf_slowpath_mod.exit.i.i1055
	setp.gt.u32 	%p79, %r26, 2139095039;
	selp.f32 	%f380, 0f7FFFFFFF, 0f4B800000, %p79;
	mul.f32 	%f381, %f744, 0f34000000;
	mul.f32 	%f745, %f380, %f381;
	bra.uni 	$L__BB0_46;
$L__BB0_36:                             // %__nv_fast_fdividef.exit.i.i.i1032
	mov.f32 	%f363, 0f40000000;
	div.approx.f32 	%f364, %f745, %f363;
	cvt.rzi.f32.f32 	%f743, %f364;
	fma.rn.f32 	%f48, %f743, 0fC0000000, %f745;
	mov.b32 	%r25, %f48;
	setp.lt.u32 	%p70, %r25, 1073741824;
	@%p70 bra 	$L__BB0_41;
// %bb.37:
	setp.lt.u32 	%p71, %r25, -2147483647;
	@%p71 bra 	$L__BB0_39;
// %bb.38:
	add.f32 	%f369, %f743, 0fBF800000;
	setp.lt.f32 	%p74, %f48, 0fC0000000;
	add.f32 	%f370, %f369, 0fBF800000;
	selp.f32 	%f743, %f370, %f369, %p74;
	bra.uni 	$L__BB0_41;
$L__BB0_39:
	add.f32 	%f743, %f743, 0f3F800000;
	setp.ltu.f32 	%p72, %f48, 0f40800000;
	@%p72 bra 	$L__BB0_41;
// %bb.40:                              // %__nv_fmaf_rn.exit.i.i.i1036
	add.f32 	%f365, %f743, 0f3F800000;
	fma.rn.f32 	%f367, %f363, 0fC0400000, %f48;
	setp.ge.f32 	%p73, %f367, 0f00000000;
	add.f32 	%f368, %f365, 0f3F800000;
	selp.f32 	%f743, %f368, %f365, %p73;
$L__BB0_41:                             // %__internal_fmodf_fastpath_quot.exit.i.i1039
	fma.rn.f32 	%f745, %f743, 0fC0000000, %f745;
$L__BB0_46:                             // %__internal_fmodf_kernel.exit.i1058
	abs.f32 	%f382, %f745;
	setp.gtu.f32 	%p80, %f382, 0f7F800000;
	@%p80 bra 	$L__BB0_48;
// %bb.47:
	mov.b32 	%r380, %f45;
	and.b32  	%r381, %r380, -2147483648;
	mov.b32 	%r382, %f745;
	or.b32  	%r383, %r381, %r382;
	mov.b32 	%f745, %r383;
$L__BB0_48:                             // %__nv_fmodf.exit1059
	add.f32 	%f383, %f745, %f745;
	mov.b32 	%r384, %f383;
	and.b32  	%r385, %r384, -2147483648;
	or.b32  	%r386, %r385, 1056964608;
	mov.b32 	%f384, %r386;
	add.f32 	%f385, %f383, %f384;
	cvt.rzi.f32.f32 	%f386, %f385;
	abs.f32 	%f387, %f383;
	setp.gt.f32 	%p81, %f387, 0f4B000000;
	selp.f32 	%f388, %f383, %f386, %p81;
	cvt.rzi.f32.f32 	%f389, %f383;
	setp.lt.f32 	%p82, %f387, 0f3F000000;
	selp.f32 	%f390, %f389, %f388, %p82;
	cvt.rzi.s32.f32 	%r387, %f390;
	fma.rn.f32 	%f391, %f390, 0fBF000000, %f745;
	mul.f32 	%f392, %f391, %f391;
	fma.rn.f32 	%f393, %f392, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f394, %f392, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f395, %f393, %f392, 0fC0A55DF6;
	fma.rn.f32 	%f396, %f394, %f392, 0f4081E0CF;
	fma.rn.f32 	%f397, %f392, %f391, 0f00000000;
	fma.rn.f32 	%f398, %f396, %f392, 0fC09DE9E6;
	fma.rn.f32 	%f399, %f395, %f397, 0f00000000;
	fma.rn.f32 	%f400, %f398, %f392, 0f3F800000;
	fma.rn.f32 	%f401, %f391, 0f40490FDB, %f399;
	and.b32  	%r388, %r387, 1;
	setp.eq.b32 	%p83, %r388, 1;
	selp.f32 	%f402, %f400, %f401, %p83;
	selp.f32 	%f403, %f401, %f400, %p83;
	and.b32  	%r389, %r387, 2;
	setp.eq.s32 	%p84, %r389, 0;
	neg.f32 	%f404, %f402;
	selp.f32 	%f405, %f402, %f404, %p84;
	add.s32 	%r390, %r387, 1;
	and.b32  	%r391, %r390, 2;
	setp.eq.s32 	%p85, %r391, 0;
	mov.f32 	%f406, 0f00000000;
	sub.f32 	%f407, %f406, %f403;
	selp.f32 	%f408, %f403, %f407, %p85;
	cvt.rzi.f32.f32 	%f409, %f745;
	setp.eq.f32 	%p86, %f409, %f745;
	mul.f32 	%f410, %f745, 0f00000000;
	selp.f32 	%f748, %f410, %f405, %p86;
	abs.f32 	%f411, %f745;
	setp.gt.f32 	%p87, %f411, 0f4B800000;
	add.f32 	%f412, %f748, 0f3F800000;
	selp.f32 	%f747, %f412, %f408, %p87;
$L__BB0_49:                             // %L348
	fma.rn.f32 	%f241, %f239, %f233, 0f3F800000;
	fma.rn.f32 	%f242, %f232, 0f40490FDB, %f240;
	setp.eq.b32 	%p19, %r327, 1;
	or.pred  	%p2, %p45, %p67;
	mov.f32 	%f753, %f223;
	mov.f32 	%f754, %f223;
	@%p2 bra 	$L__BB0_65;
// %bb.50:                              // %L356
	mul.hi.u32 	%r393, %r3598, -1431655765;
	shr.u32 	%r394, %r393, 2;
	mul.lo.s32 	%r395, %r394, 6;
	sub.s32 	%r396, %r3598, %r395;
	cvt.rn.f32.s32 	%f414, %r396;
	div.approx.f32 	%f66, %f414, %f730;
	abs.f32 	%f751, %f66;
	setp.lt.f32 	%p90, %f751, 0f40000000;
	@%p90 bra 	$L__BB0_62;
// %bb.51:
	setp.gtu.f32 	%p91, %f751, 0f4B800000;
	@%p91 bra 	$L__BB0_58;
	bra.uni 	$L__BB0_52;
$L__BB0_58:
	mov.b32 	%r34, %f751;
	and.b32  	%r397, %r34, 8388607;
	or.b32  	%r3606, %r397, 1065353216;
	mov.b32 	%f750, %r3606;
	add.s32 	%r398, %r34, -1073741824;
	and.b32  	%r3607, %r398, -8388608;
	setp.eq.s32 	%p97, %r3607, 0;
	@%p97 bra 	$L__BB0_61;
// %bb.59:                              // %__nv_fmaf_rn.exit4.i.i.i1084.preheader
	mov.f32 	%f425, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f424,%f425;
	// end inline asm
$L__BB0_60:                             // %__nv_fmaf_rn.exit4.i.i.i1084
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r399, %r3607, 192937984;
	add.s32 	%r400, %r3606, %r399;
	mov.b32 	%f426, %r400;
	mul.f32 	%f427, %f424, %f426;
	sub.f32 	%f428, %f426, %f427;
	fma.rn.f32 	%f429, %f428, %f424, %f427;
	sub.f32 	%f430, %f426, %f429;
	fma.rz.f32 	%f431, %f430, %f424, %f429;
	cvt.rzi.f32.f32 	%f432, %f431;
	sub.f32 	%f750, %f426, %f432;
	sub.s32 	%r3607, %r3607, %r399;
	mov.b32 	%r3606, %f750;
	setp.ne.s32 	%p98, %r3607, 0;
	setp.ne.s32 	%p99, %r3606, 0;
	and.pred  	%p100, %p98, %p99;
	@%p100 bra 	$L__BB0_60;
$L__BB0_61:                             // %__internal_fmodf_slowpath_mod.exit.i.i1086
	setp.gt.u32 	%p101, %r34, 2139095039;
	selp.f32 	%f433, 0f7FFFFFFF, 0f4B800000, %p101;
	mul.f32 	%f434, %f750, 0f34000000;
	mul.f32 	%f751, %f433, %f434;
	bra.uni 	$L__BB0_62;
$L__BB0_52:                             // %__nv_fast_fdividef.exit.i.i.i1063
	mov.f32 	%f416, 0f40000000;
	div.approx.f32 	%f417, %f751, %f416;
	cvt.rzi.f32.f32 	%f749, %f417;
	fma.rn.f32 	%f69, %f749, 0fC0000000, %f751;
	mov.b32 	%r33, %f69;
	setp.lt.u32 	%p92, %r33, 1073741824;
	@%p92 bra 	$L__BB0_57;
// %bb.53:
	setp.lt.u32 	%p93, %r33, -2147483647;
	@%p93 bra 	$L__BB0_55;
// %bb.54:
	add.f32 	%f422, %f749, 0fBF800000;
	setp.lt.f32 	%p96, %f69, 0fC0000000;
	add.f32 	%f423, %f422, 0fBF800000;
	selp.f32 	%f749, %f423, %f422, %p96;
	bra.uni 	$L__BB0_57;
$L__BB0_55:
	add.f32 	%f749, %f749, 0f3F800000;
	setp.ltu.f32 	%p94, %f69, 0f40800000;
	@%p94 bra 	$L__BB0_57;
// %bb.56:                              // %__nv_fmaf_rn.exit.i.i.i1067
	add.f32 	%f418, %f749, 0f3F800000;
	fma.rn.f32 	%f420, %f416, 0fC0400000, %f69;
	setp.ge.f32 	%p95, %f420, 0f00000000;
	add.f32 	%f421, %f418, 0f3F800000;
	selp.f32 	%f749, %f421, %f418, %p95;
$L__BB0_57:                             // %__internal_fmodf_fastpath_quot.exit.i.i1070
	fma.rn.f32 	%f751, %f749, 0fC0000000, %f751;
$L__BB0_62:                             // %__internal_fmodf_kernel.exit.i1089
	abs.f32 	%f435, %f751;
	setp.gtu.f32 	%p102, %f435, 0f7F800000;
	@%p102 bra 	$L__BB0_64;
// %bb.63:
	mov.b32 	%r401, %f66;
	and.b32  	%r402, %r401, -2147483648;
	mov.b32 	%r403, %f751;
	or.b32  	%r404, %r402, %r403;
	mov.b32 	%f751, %r404;
$L__BB0_64:                             // %__nv_fmodf.exit1090
	add.f32 	%f436, %f751, %f751;
	mov.b32 	%r405, %f436;
	and.b32  	%r406, %r405, -2147483648;
	or.b32  	%r407, %r406, 1056964608;
	mov.b32 	%f437, %r407;
	add.f32 	%f438, %f436, %f437;
	cvt.rzi.f32.f32 	%f439, %f438;
	abs.f32 	%f440, %f436;
	setp.gt.f32 	%p103, %f440, 0f4B000000;
	selp.f32 	%f441, %f436, %f439, %p103;
	cvt.rzi.f32.f32 	%f442, %f436;
	setp.lt.f32 	%p104, %f440, 0f3F000000;
	selp.f32 	%f443, %f442, %f441, %p104;
	cvt.rzi.s32.f32 	%r408, %f443;
	fma.rn.f32 	%f444, %f443, 0fBF000000, %f751;
	mul.f32 	%f445, %f444, %f444;
	fma.rn.f32 	%f446, %f445, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f447, %f445, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f448, %f446, %f445, 0fC0A55DF6;
	fma.rn.f32 	%f449, %f447, %f445, 0f4081E0CF;
	fma.rn.f32 	%f450, %f445, %f444, 0f00000000;
	fma.rn.f32 	%f451, %f449, %f445, 0fC09DE9E6;
	fma.rn.f32 	%f452, %f448, %f450, 0f00000000;
	fma.rn.f32 	%f453, %f451, %f445, 0f3F800000;
	fma.rn.f32 	%f454, %f444, 0f40490FDB, %f452;
	and.b32  	%r409, %r408, 1;
	setp.eq.b32 	%p105, %r409, 1;
	selp.f32 	%f455, %f453, %f454, %p105;
	selp.f32 	%f456, %f454, %f453, %p105;
	and.b32  	%r410, %r408, 2;
	setp.eq.s32 	%p106, %r410, 0;
	neg.f32 	%f457, %f455;
	selp.f32 	%f458, %f455, %f457, %p106;
	add.s32 	%r411, %r408, 1;
	and.b32  	%r412, %r411, 2;
	setp.eq.s32 	%p107, %r412, 0;
	mov.f32 	%f459, 0f00000000;
	sub.f32 	%f460, %f459, %f456;
	selp.f32 	%f461, %f456, %f460, %p107;
	cvt.rzi.f32.f32 	%f462, %f751;
	setp.eq.f32 	%p108, %f462, %f751;
	mul.f32 	%f463, %f751, 0f00000000;
	selp.f32 	%f754, %f463, %f458, %p108;
	abs.f32 	%f464, %f751;
	setp.gt.f32 	%p109, %f464, 0f4B800000;
	add.f32 	%f465, %f754, 0f3F800000;
	selp.f32 	%f753, %f465, %f461, %p109;
$L__BB0_65:                             // %L390
	selp.f32 	%f243, %f241, %f242, %p19;
	and.b32  	%r328, %r326, 2;
	@%p4 bra 	$L__BB0_181;
// %bb.66:
	@%p245 bra 	$L__BB0_177;
	bra.uni 	$L__BB0_67;
$L__BB0_177:
	mov.b32 	%r233, %f785;
	and.b32  	%r425, %r233, 8388607;
	or.b32  	%r3700, %r425, 1065353216;
	mov.b32 	%f784, %r3700;
	add.s32 	%r426, %r233, -1073741824;
	and.b32  	%r3701, %r426, -8388608;
	setp.eq.s32 	%p117, %r3701, 0;
	@%p117 bra 	$L__BB0_180;
// %bb.178:                             // %__nv_fmaf_rn.exit4.i.i.i1115.preheader
	mov.f32 	%f475, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f474,%f475;
	// end inline asm
$L__BB0_179:                            // %__nv_fmaf_rn.exit4.i.i.i1115
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r427, %r3701, 192937984;
	add.s32 	%r428, %r3700, %r427;
	mov.b32 	%f476, %r428;
	mul.f32 	%f477, %f474, %f476;
	sub.f32 	%f478, %f476, %f477;
	fma.rn.f32 	%f479, %f478, %f474, %f477;
	sub.f32 	%f480, %f476, %f479;
	fma.rz.f32 	%f481, %f480, %f474, %f479;
	cvt.rzi.f32.f32 	%f482, %f481;
	sub.f32 	%f784, %f476, %f482;
	sub.s32 	%r3701, %r3701, %r427;
	mov.b32 	%r3700, %f784;
	setp.ne.s32 	%p118, %r3701, 0;
	setp.ne.s32 	%p119, %r3700, 0;
	and.pred  	%p120, %p118, %p119;
	@%p120 bra 	$L__BB0_179;
$L__BB0_180:                            // %__internal_fmodf_slowpath_mod.exit.i.i1117
	setp.gt.u32 	%p121, %r233, 2139095039;
	selp.f32 	%f483, 0f7FFFFFFF, 0f4B800000, %p121;
	mul.f32 	%f484, %f784, 0f34000000;
	mul.f32 	%f785, %f483, %f484;
	bra.uni 	$L__BB0_181;
$L__BB0_67:                             // %__nv_fast_fdividef.exit.i.i.i1094
	mov.f32 	%f466, 0f40000000;
	div.approx.f32 	%f467, %f785, %f466;
	cvt.rzi.f32.f32 	%f783, %f467;
	fma.rn.f32 	%f187, %f783, 0fC0000000, %f785;
	mov.b32 	%r232, %f187;
	setp.lt.u32 	%p112, %r232, 1073741824;
	@%p112 bra 	$L__BB0_176;
// %bb.68:
	setp.lt.u32 	%p113, %r232, -2147483647;
	@%p113 bra 	$L__BB0_174;
// %bb.69:
	add.f32 	%f472, %f783, 0fBF800000;
	setp.lt.f32 	%p116, %f187, 0fC0000000;
	add.f32 	%f473, %f472, 0fBF800000;
	selp.f32 	%f783, %f473, %f472, %p116;
	bra.uni 	$L__BB0_176;
$L__BB0_174:
	add.f32 	%f783, %f783, 0f3F800000;
	setp.ltu.f32 	%p114, %f187, 0f40800000;
	@%p114 bra 	$L__BB0_176;
// %bb.175:                             // %__nv_fmaf_rn.exit.i.i.i1098
	add.f32 	%f468, %f783, 0f3F800000;
	fma.rn.f32 	%f470, %f466, 0fC0400000, %f187;
	setp.ge.f32 	%p115, %f470, 0f00000000;
	add.f32 	%f471, %f468, 0f3F800000;
	selp.f32 	%f783, %f471, %f468, %p115;
$L__BB0_176:                            // %__internal_fmodf_fastpath_quot.exit.i.i1101
	fma.rn.f32 	%f785, %f783, 0fC0000000, %f785;
$L__BB0_181:                            // %__internal_fmodf_kernel.exit.i1120
	setp.eq.s32 	%p20, %r328, 0;
	neg.f32 	%f245, %f243;
	add.s32 	%r329, %r326, 1;
	cvt.rzi.f32.f32 	%f249, %f781;
	abs.f32 	%f485, %f785;
	setp.gtu.f32 	%p122, %f485, 0f7F800000;
	@%p122 bra 	$L__BB0_183;
// %bb.182:
	mov.b32 	%r429, %f785;
	or.b32  	%r430, %r226, %r429;
	mov.b32 	%f785, %r430;
$L__BB0_183:                            // %__nv_fmodf.exit1121
	selp.f32 	%f244, %f242, %f241, %p19;
	selp.f32 	%f246, %f243, %f245, %p20;
	and.b32  	%r330, %r329, 2;
	setp.eq.f32 	%p22, %f249, %f781;
	mul.f32 	%f250, %f781, 0f00000000;
	add.f32 	%f487, %f785, %f785;
	mov.b32 	%r437, %f487;
	and.b32  	%r438, %r437, -2147483648;
	or.b32  	%r439, %r438, 1056964608;
	mov.b32 	%f488, %r439;
	add.f32 	%f489, %f487, %f488;
	cvt.rzi.f32.f32 	%f490, %f489;
	abs.f32 	%f491, %f487;
	setp.gt.f32 	%p124, %f491, 0f4B000000;
	selp.f32 	%f492, %f487, %f490, %p124;
	cvt.rzi.f32.f32 	%f493, %f487;
	setp.lt.f32 	%p125, %f491, 0f3F000000;
	selp.f32 	%f494, %f493, %f492, %p125;
	cvt.rzi.s32.f32 	%r440, %f494;
	fma.rn.f32 	%f495, %f494, 0fBF000000, %f785;
	mul.f32 	%f496, %f495, %f495;
	fma.rn.f32 	%f497, %f496, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f498, %f496, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f499, %f497, %f496, 0fC0A55DF6;
	fma.rn.f32 	%f500, %f498, %f496, 0f4081E0CF;
	fma.rn.f32 	%f501, %f496, %f495, 0f00000000;
	fma.rn.f32 	%f502, %f500, %f496, 0fC09DE9E6;
	fma.rn.f32 	%f503, %f499, %f501, 0f00000000;
	fma.rn.f32 	%f504, %f502, %f496, 0f3F800000;
	fma.rn.f32 	%f505, %f495, 0f40490FDB, %f503;
	and.b32  	%r441, %r440, 1;
	setp.eq.b32 	%p126, %r441, 1;
	selp.f32 	%f506, %f504, %f505, %p126;
	selp.f32 	%f507, %f505, %f504, %p126;
	and.b32  	%r442, %r440, 2;
	setp.eq.s32 	%p127, %r442, 0;
	neg.f32 	%f508, %f506;
	selp.f32 	%f509, %f506, %f508, %p127;
	add.s32 	%r443, %r440, 1;
	and.b32  	%r444, %r443, 2;
	mov.f32 	%f777, 0f00000000;
	cvt.rzi.f32.f32 	%f512, %f785;
	setp.eq.f32 	%p129, %f512, %f785;
	mul.f32 	%f513, %f785, 0f00000000;
	mov.f32 	%f759, %f777;
	mov.f32 	%f760, %f777;
	@%p24 bra 	$L__BB0_85;
// %bb.70:                              // %L492
	cvt.u16.u32 	%rs17, %r3597;
	and.b16  	%rs18, %rs17, 255;
	mul.lo.s16 	%rs19, %rs18, 171;
	shr.u16 	%rs20, %rs19, 13;
	mul.lo.s16 	%rs21, %rs20, 48;
	sub.s16 	%rs22, %rs17, %rs21;
	and.b16  	%rs23, %rs22, 255;
	cvt.rn.f32.u16 	%f518, %rs23;
	div.approx.f32 	%f87, %f518, %f729;
	abs.f32 	%f757, %f87;
	setp.lt.f32 	%p131, %f757, 0f40000000;
	@%p131 bra 	$L__BB0_82;
// %bb.71:
	setp.gtu.f32 	%p132, %f757, 0f4B800000;
	@%p132 bra 	$L__BB0_78;
	bra.uni 	$L__BB0_72;
$L__BB0_78:
	mov.b32 	%r46, %f757;
	and.b32  	%r446, %r46, 8388607;
	or.b32  	%r3608, %r446, 1065353216;
	mov.b32 	%f756, %r3608;
	add.s32 	%r447, %r46, -1073741824;
	and.b32  	%r3609, %r447, -8388608;
	setp.eq.s32 	%p138, %r3609, 0;
	@%p138 bra 	$L__BB0_81;
// %bb.79:                              // %__nv_fmaf_rn.exit4.i.i.i1146.preheader
	mov.f32 	%f529, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f528,%f529;
	// end inline asm
$L__BB0_80:                             // %__nv_fmaf_rn.exit4.i.i.i1146
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r448, %r3609, 192937984;
	add.s32 	%r449, %r3608, %r448;
	mov.b32 	%f530, %r449;
	mul.f32 	%f531, %f528, %f530;
	sub.f32 	%f532, %f530, %f531;
	fma.rn.f32 	%f533, %f532, %f528, %f531;
	sub.f32 	%f534, %f530, %f533;
	fma.rz.f32 	%f535, %f534, %f528, %f533;
	cvt.rzi.f32.f32 	%f536, %f535;
	sub.f32 	%f756, %f530, %f536;
	sub.s32 	%r3609, %r3609, %r448;
	mov.b32 	%r3608, %f756;
	setp.ne.s32 	%p139, %r3609, 0;
	setp.ne.s32 	%p140, %r3608, 0;
	and.pred  	%p141, %p139, %p140;
	@%p141 bra 	$L__BB0_80;
$L__BB0_81:                             // %__internal_fmodf_slowpath_mod.exit.i.i1148
	setp.gt.u32 	%p142, %r46, 2139095039;
	selp.f32 	%f537, 0f7FFFFFFF, 0f4B800000, %p142;
	mul.f32 	%f538, %f756, 0f34000000;
	mul.f32 	%f757, %f537, %f538;
	bra.uni 	$L__BB0_82;
$L__BB0_72:                             // %__nv_fast_fdividef.exit.i.i.i1125
	mov.f32 	%f520, 0f40000000;
	div.approx.f32 	%f521, %f757, %f520;
	cvt.rzi.f32.f32 	%f755, %f521;
	fma.rn.f32 	%f90, %f755, 0fC0000000, %f757;
	mov.b32 	%r45, %f90;
	setp.lt.u32 	%p133, %r45, 1073741824;
	@%p133 bra 	$L__BB0_77;
// %bb.73:
	setp.lt.u32 	%p134, %r45, -2147483647;
	@%p134 bra 	$L__BB0_75;
// %bb.74:
	add.f32 	%f526, %f755, 0fBF800000;
	setp.lt.f32 	%p137, %f90, 0fC0000000;
	add.f32 	%f527, %f526, 0fBF800000;
	selp.f32 	%f755, %f527, %f526, %p137;
	bra.uni 	$L__BB0_77;
$L__BB0_75:
	add.f32 	%f755, %f755, 0f3F800000;
	setp.ltu.f32 	%p135, %f90, 0f40800000;
	@%p135 bra 	$L__BB0_77;
// %bb.76:                              // %__nv_fmaf_rn.exit.i.i.i1129
	add.f32 	%f522, %f755, 0f3F800000;
	fma.rn.f32 	%f524, %f520, 0fC0400000, %f90;
	setp.ge.f32 	%p136, %f524, 0f00000000;
	add.f32 	%f525, %f522, 0f3F800000;
	selp.f32 	%f755, %f525, %f522, %p136;
$L__BB0_77:                             // %__internal_fmodf_fastpath_quot.exit.i.i1132
	fma.rn.f32 	%f757, %f755, 0fC0000000, %f757;
$L__BB0_82:                             // %__internal_fmodf_kernel.exit.i1151
	abs.f32 	%f539, %f757;
	setp.gtu.f32 	%p143, %f539, 0f7F800000;
	@%p143 bra 	$L__BB0_84;
// %bb.83:
	mov.b32 	%r450, %f87;
	and.b32  	%r451, %r450, -2147483648;
	mov.b32 	%r452, %f757;
	or.b32  	%r453, %r451, %r452;
	mov.b32 	%f757, %r453;
$L__BB0_84:                             // %__nv_fmodf.exit1152
	add.f32 	%f540, %f757, %f757;
	mov.b32 	%r454, %f540;
	and.b32  	%r455, %r454, -2147483648;
	or.b32  	%r456, %r455, 1056964608;
	mov.b32 	%f541, %r456;
	add.f32 	%f542, %f540, %f541;
	cvt.rzi.f32.f32 	%f543, %f542;
	abs.f32 	%f544, %f540;
	setp.gt.f32 	%p144, %f544, 0f4B000000;
	selp.f32 	%f545, %f540, %f543, %p144;
	cvt.rzi.f32.f32 	%f546, %f540;
	setp.lt.f32 	%p145, %f544, 0f3F000000;
	selp.f32 	%f547, %f546, %f545, %p145;
	cvt.rzi.s32.f32 	%r457, %f547;
	fma.rn.f32 	%f548, %f547, 0fBF000000, %f757;
	mul.f32 	%f549, %f548, %f548;
	fma.rn.f32 	%f550, %f549, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f551, %f549, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f552, %f550, %f549, 0fC0A55DF6;
	fma.rn.f32 	%f553, %f551, %f549, 0f4081E0CF;
	fma.rn.f32 	%f554, %f549, %f548, 0f00000000;
	fma.rn.f32 	%f555, %f553, %f549, 0fC09DE9E6;
	fma.rn.f32 	%f556, %f552, %f554, 0f00000000;
	fma.rn.f32 	%f557, %f555, %f549, 0f3F800000;
	fma.rn.f32 	%f558, %f548, 0f40490FDB, %f556;
	and.b32  	%r458, %r457, 1;
	setp.eq.b32 	%p146, %r458, 1;
	selp.f32 	%f559, %f557, %f558, %p146;
	selp.f32 	%f560, %f558, %f557, %p146;
	and.b32  	%r459, %r457, 2;
	setp.eq.s32 	%p147, %r459, 0;
	neg.f32 	%f561, %f559;
	selp.f32 	%f562, %f559, %f561, %p147;
	add.s32 	%r460, %r457, 1;
	and.b32  	%r461, %r460, 2;
	setp.eq.s32 	%p148, %r461, 0;
	mov.f32 	%f563, 0f00000000;
	sub.f32 	%f564, %f563, %f560;
	selp.f32 	%f565, %f560, %f564, %p148;
	cvt.rzi.f32.f32 	%f566, %f757;
	setp.eq.f32 	%p149, %f566, %f757;
	mul.f32 	%f567, %f757, 0f00000000;
	selp.f32 	%f760, %f567, %f562, %p149;
	abs.f32 	%f568, %f757;
	setp.gt.f32 	%p150, %f568, 0f4B800000;
	add.f32 	%f569, %f760, 0f3F800000;
	selp.f32 	%f759, %f569, %f565, %p150;
$L__BB0_85:                             // %L526
	setp.eq.s32 	%p21, %r330, 0;
	sub.f32 	%f247, %f223, %f244;
	selp.f32 	%f251, %f250, %f246, %p22;
	abs.f32 	%f252, %f781;
	setp.eq.s32 	%p128, %r444, 0;
	sub.f32 	%f510, %f777, %f507;
	selp.f32 	%f514, %f513, %f509, %p129;
	abs.f32 	%f515, %f785;
	mov.f32 	%f765, %f777;
	mov.f32 	%f766, %f777;
	@%p45 bra 	$L__BB0_101;
// %bb.86:                              // %L530
	mul.hi.u32 	%r463, %r3598, -1431655765;
	shr.u32 	%r464, %r463, 5;
	mul.lo.s32 	%r465, %r464, 48;
	sub.s32 	%r466, %r3598, %r465;
	cvt.rn.f32.s32 	%f571, %r466;
	div.approx.f32 	%f108, %f571, %f729;
	abs.f32 	%f763, %f108;
	setp.lt.f32 	%p152, %f763, 0f40000000;
	@%p152 bra 	$L__BB0_98;
// %bb.87:
	setp.gtu.f32 	%p153, %f763, 0f4B800000;
	@%p153 bra 	$L__BB0_94;
	bra.uni 	$L__BB0_88;
$L__BB0_94:
	mov.b32 	%r54, %f763;
	and.b32  	%r467, %r54, 8388607;
	or.b32  	%r3610, %r467, 1065353216;
	mov.b32 	%f762, %r3610;
	add.s32 	%r468, %r54, -1073741824;
	and.b32  	%r3611, %r468, -8388608;
	setp.eq.s32 	%p159, %r3611, 0;
	@%p159 bra 	$L__BB0_97;
// %bb.95:                              // %__nv_fmaf_rn.exit4.i.i.i1177.preheader
	mov.f32 	%f582, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f581,%f582;
	// end inline asm
$L__BB0_96:                             // %__nv_fmaf_rn.exit4.i.i.i1177
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r469, %r3611, 192937984;
	add.s32 	%r470, %r3610, %r469;
	mov.b32 	%f583, %r470;
	mul.f32 	%f584, %f581, %f583;
	sub.f32 	%f585, %f583, %f584;
	fma.rn.f32 	%f586, %f585, %f581, %f584;
	sub.f32 	%f587, %f583, %f586;
	fma.rz.f32 	%f588, %f587, %f581, %f586;
	cvt.rzi.f32.f32 	%f589, %f588;
	sub.f32 	%f762, %f583, %f589;
	sub.s32 	%r3611, %r3611, %r469;
	mov.b32 	%r3610, %f762;
	setp.ne.s32 	%p160, %r3611, 0;
	setp.ne.s32 	%p161, %r3610, 0;
	and.pred  	%p162, %p160, %p161;
	@%p162 bra 	$L__BB0_96;
$L__BB0_97:                             // %__internal_fmodf_slowpath_mod.exit.i.i1179
	setp.gt.u32 	%p163, %r54, 2139095039;
	selp.f32 	%f590, 0f7FFFFFFF, 0f4B800000, %p163;
	mul.f32 	%f591, %f762, 0f34000000;
	mul.f32 	%f763, %f590, %f591;
	bra.uni 	$L__BB0_98;
$L__BB0_88:                             // %__nv_fast_fdividef.exit.i.i.i1156
	mov.f32 	%f573, 0f40000000;
	div.approx.f32 	%f574, %f763, %f573;
	cvt.rzi.f32.f32 	%f761, %f574;
	fma.rn.f32 	%f111, %f761, 0fC0000000, %f763;
	mov.b32 	%r53, %f111;
	setp.lt.u32 	%p154, %r53, 1073741824;
	@%p154 bra 	$L__BB0_93;
// %bb.89:
	setp.lt.u32 	%p155, %r53, -2147483647;
	@%p155 bra 	$L__BB0_91;
// %bb.90:
	add.f32 	%f579, %f761, 0fBF800000;
	setp.lt.f32 	%p158, %f111, 0fC0000000;
	add.f32 	%f580, %f579, 0fBF800000;
	selp.f32 	%f761, %f580, %f579, %p158;
	bra.uni 	$L__BB0_93;
$L__BB0_91:
	add.f32 	%f761, %f761, 0f3F800000;
	setp.ltu.f32 	%p156, %f111, 0f40800000;
	@%p156 bra 	$L__BB0_93;
// %bb.92:                              // %__nv_fmaf_rn.exit.i.i.i1160
	add.f32 	%f575, %f761, 0f3F800000;
	fma.rn.f32 	%f577, %f573, 0fC0400000, %f111;
	setp.ge.f32 	%p157, %f577, 0f00000000;
	add.f32 	%f578, %f575, 0f3F800000;
	selp.f32 	%f761, %f578, %f575, %p157;
$L__BB0_93:                             // %__internal_fmodf_fastpath_quot.exit.i.i1163
	fma.rn.f32 	%f763, %f761, 0fC0000000, %f763;
$L__BB0_98:                             // %__internal_fmodf_kernel.exit.i1182
	abs.f32 	%f592, %f763;
	setp.gtu.f32 	%p164, %f592, 0f7F800000;
	@%p164 bra 	$L__BB0_100;
// %bb.99:
	mov.b32 	%r471, %f108;
	and.b32  	%r472, %r471, -2147483648;
	mov.b32 	%r473, %f763;
	or.b32  	%r474, %r472, %r473;
	mov.b32 	%f763, %r474;
$L__BB0_100:                            // %__nv_fmodf.exit1183
	add.f32 	%f593, %f763, %f763;
	mov.b32 	%r475, %f593;
	and.b32  	%r476, %r475, -2147483648;
	or.b32  	%r477, %r476, 1056964608;
	mov.b32 	%f594, %r477;
	add.f32 	%f595, %f593, %f594;
	cvt.rzi.f32.f32 	%f596, %f595;
	abs.f32 	%f597, %f593;
	setp.gt.f32 	%p165, %f597, 0f4B000000;
	selp.f32 	%f598, %f593, %f596, %p165;
	cvt.rzi.f32.f32 	%f599, %f593;
	setp.lt.f32 	%p166, %f597, 0f3F000000;
	selp.f32 	%f600, %f599, %f598, %p166;
	cvt.rzi.s32.f32 	%r478, %f600;
	fma.rn.f32 	%f601, %f600, 0fBF000000, %f763;
	mul.f32 	%f602, %f601, %f601;
	fma.rn.f32 	%f603, %f602, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f604, %f602, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f603, %f602, 0fC0A55DF6;
	fma.rn.f32 	%f606, %f604, %f602, 0f4081E0CF;
	fma.rn.f32 	%f607, %f602, %f601, 0f00000000;
	fma.rn.f32 	%f608, %f606, %f602, 0fC09DE9E6;
	fma.rn.f32 	%f609, %f605, %f607, 0f00000000;
	fma.rn.f32 	%f610, %f608, %f602, 0f3F800000;
	fma.rn.f32 	%f611, %f601, 0f40490FDB, %f609;
	and.b32  	%r479, %r478, 1;
	setp.eq.b32 	%p167, %r479, 1;
	selp.f32 	%f612, %f610, %f611, %p167;
	selp.f32 	%f613, %f611, %f610, %p167;
	and.b32  	%r480, %r478, 2;
	setp.eq.s32 	%p168, %r480, 0;
	neg.f32 	%f614, %f612;
	selp.f32 	%f615, %f612, %f614, %p168;
	add.s32 	%r481, %r478, 1;
	and.b32  	%r482, %r481, 2;
	setp.eq.s32 	%p169, %r482, 0;
	mov.f32 	%f616, 0f00000000;
	sub.f32 	%f617, %f616, %f613;
	selp.f32 	%f618, %f613, %f617, %p169;
	cvt.rzi.f32.f32 	%f619, %f763;
	setp.eq.f32 	%p170, %f619, %f763;
	mul.f32 	%f620, %f763, 0f00000000;
	selp.f32 	%f766, %f620, %f615, %p170;
	abs.f32 	%f621, %f763;
	setp.gt.f32 	%p171, %f621, 0f4B800000;
	add.f32 	%f622, %f766, 0f3F800000;
	selp.f32 	%f765, %f622, %f618, %p171;
$L__BB0_101:                            // %L564
	selp.f32 	%f248, %f244, %f247, %p21;
	setp.gt.f32 	%p23, %f252, 0f4B800000;
	add.f32 	%f253, %f251, 0f3F800000;
	selp.f32 	%f511, %f507, %f510, %p128;
	setp.gt.f32 	%p130, %f515, 0f4B800000;
	add.f32 	%f516, %f514, 0f3F800000;
	mov.f32 	%f771, %f777;
	mov.f32 	%f772, %f777;
	@%p1 bra 	$L__BB0_117;
// %bb.102:                             // %L602
	cvt.u16.u32 	%rs24, %r3597;
	and.b16  	%rs25, %rs24, 255;
	mul.lo.s16 	%rs26, %rs25, 171;
	shr.u16 	%rs27, %rs26, 10;
	mul.lo.s16 	%rs28, %rs27, 6;
	sub.s16 	%rs29, %rs24, %rs28;
	and.b16  	%rs30, %rs29, 255;
	cvt.rn.f32.u16 	%f624, %rs30;
	div.approx.f32 	%f129, %f624, %f730;
	abs.f32 	%f769, %f129;
	setp.lt.f32 	%p172, %f769, 0f40000000;
	@%p172 bra 	$L__BB0_114;
// %bb.103:
	setp.gtu.f32 	%p173, %f769, 0f4B800000;
	@%p173 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_104;
$L__BB0_110:
	mov.b32 	%r64, %f769;
	and.b32  	%r490, %r64, 8388607;
	or.b32  	%r3612, %r490, 1065353216;
	mov.b32 	%f768, %r3612;
	add.s32 	%r491, %r64, -1073741824;
	and.b32  	%r3613, %r491, -8388608;
	setp.eq.s32 	%p179, %r3613, 0;
	@%p179 bra 	$L__BB0_113;
// %bb.111:                             // %__nv_fmaf_rn.exit4.i.i.i1208.preheader
	mov.f32 	%f635, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f634,%f635;
	// end inline asm
$L__BB0_112:                            // %__nv_fmaf_rn.exit4.i.i.i1208
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r492, %r3613, 192937984;
	add.s32 	%r493, %r3612, %r492;
	mov.b32 	%f636, %r493;
	mul.f32 	%f637, %f634, %f636;
	sub.f32 	%f638, %f636, %f637;
	fma.rn.f32 	%f639, %f638, %f634, %f637;
	sub.f32 	%f640, %f636, %f639;
	fma.rz.f32 	%f641, %f640, %f634, %f639;
	cvt.rzi.f32.f32 	%f642, %f641;
	sub.f32 	%f768, %f636, %f642;
	sub.s32 	%r3613, %r3613, %r492;
	mov.b32 	%r3612, %f768;
	setp.ne.s32 	%p180, %r3613, 0;
	setp.ne.s32 	%p181, %r3612, 0;
	and.pred  	%p182, %p180, %p181;
	@%p182 bra 	$L__BB0_112;
$L__BB0_113:                            // %__internal_fmodf_slowpath_mod.exit.i.i1210
	setp.gt.u32 	%p183, %r64, 2139095039;
	selp.f32 	%f643, 0f7FFFFFFF, 0f4B800000, %p183;
	mul.f32 	%f644, %f768, 0f34000000;
	mul.f32 	%f769, %f643, %f644;
	bra.uni 	$L__BB0_114;
$L__BB0_104:                            // %__nv_fast_fdividef.exit.i.i.i1187
	mov.f32 	%f626, 0f40000000;
	div.approx.f32 	%f627, %f769, %f626;
	cvt.rzi.f32.f32 	%f767, %f627;
	fma.rn.f32 	%f132, %f767, 0fC0000000, %f769;
	mov.b32 	%r63, %f132;
	setp.lt.u32 	%p174, %r63, 1073741824;
	@%p174 bra 	$L__BB0_109;
// %bb.105:
	setp.lt.u32 	%p175, %r63, -2147483647;
	@%p175 bra 	$L__BB0_107;
// %bb.106:
	add.f32 	%f632, %f767, 0fBF800000;
	setp.lt.f32 	%p178, %f132, 0fC0000000;
	add.f32 	%f633, %f632, 0fBF800000;
	selp.f32 	%f767, %f633, %f632, %p178;
	bra.uni 	$L__BB0_109;
$L__BB0_107:
	add.f32 	%f767, %f767, 0f3F800000;
	setp.ltu.f32 	%p176, %f132, 0f40800000;
	@%p176 bra 	$L__BB0_109;
// %bb.108:                             // %__nv_fmaf_rn.exit.i.i.i1191
	add.f32 	%f628, %f767, 0f3F800000;
	fma.rn.f32 	%f630, %f626, 0fC0400000, %f132;
	setp.ge.f32 	%p177, %f630, 0f00000000;
	add.f32 	%f631, %f628, 0f3F800000;
	selp.f32 	%f767, %f631, %f628, %p177;
$L__BB0_109:                            // %__internal_fmodf_fastpath_quot.exit.i.i1194
	fma.rn.f32 	%f769, %f767, 0fC0000000, %f769;
$L__BB0_114:                            // %__internal_fmodf_kernel.exit.i1213
	abs.f32 	%f645, %f769;
	setp.gtu.f32 	%p184, %f645, 0f7F800000;
	@%p184 bra 	$L__BB0_116;
// %bb.115:
	mov.b32 	%r494, %f129;
	and.b32  	%r495, %r494, -2147483648;
	mov.b32 	%r496, %f769;
	or.b32  	%r497, %r495, %r496;
	mov.b32 	%f769, %r497;
$L__BB0_116:                            // %__nv_fmodf.exit1214
	add.f32 	%f646, %f769, %f769;
	mov.b32 	%r498, %f646;
	and.b32  	%r499, %r498, -2147483648;
	or.b32  	%r500, %r499, 1056964608;
	mov.b32 	%f647, %r500;
	add.f32 	%f648, %f646, %f647;
	cvt.rzi.f32.f32 	%f649, %f648;
	abs.f32 	%f650, %f646;
	setp.gt.f32 	%p185, %f650, 0f4B000000;
	selp.f32 	%f651, %f646, %f649, %p185;
	cvt.rzi.f32.f32 	%f652, %f646;
	setp.lt.f32 	%p186, %f650, 0f3F000000;
	selp.f32 	%f653, %f652, %f651, %p186;
	cvt.rzi.s32.f32 	%r501, %f653;
	fma.rn.f32 	%f654, %f653, 0fBF000000, %f769;
	mul.f32 	%f655, %f654, %f654;
	fma.rn.f32 	%f656, %f655, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f657, %f655, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f658, %f656, %f655, 0fC0A55DF6;
	fma.rn.f32 	%f659, %f657, %f655, 0f4081E0CF;
	fma.rn.f32 	%f660, %f655, %f654, 0f00000000;
	fma.rn.f32 	%f661, %f659, %f655, 0fC09DE9E6;
	fma.rn.f32 	%f662, %f658, %f660, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f655, 0f3F800000;
	fma.rn.f32 	%f664, %f654, 0f40490FDB, %f662;
	and.b32  	%r502, %r501, 1;
	setp.eq.b32 	%p187, %r502, 1;
	selp.f32 	%f665, %f663, %f664, %p187;
	selp.f32 	%f666, %f664, %f663, %p187;
	and.b32  	%r503, %r501, 2;
	setp.eq.s32 	%p188, %r503, 0;
	neg.f32 	%f667, %f665;
	selp.f32 	%f668, %f665, %f667, %p188;
	add.s32 	%r504, %r501, 1;
	and.b32  	%r505, %r504, 2;
	setp.eq.s32 	%p189, %r505, 0;
	mov.f32 	%f669, 0f00000000;
	sub.f32 	%f670, %f669, %f666;
	selp.f32 	%f671, %f666, %f670, %p189;
	cvt.rzi.f32.f32 	%f672, %f769;
	setp.eq.f32 	%p190, %f672, %f769;
	mul.f32 	%f673, %f769, 0f00000000;
	selp.f32 	%f772, %f673, %f668, %p190;
	abs.f32 	%f674, %f769;
	setp.gt.f32 	%p191, %f674, 0f4B800000;
	add.f32 	%f675, %f772, 0f3F800000;
	selp.f32 	%f771, %f675, %f671, %p191;
$L__BB0_117:                            // %L636
	selp.f32 	%f254, %f253, %f248, %p23;
	selp.f32 	%f517, %f516, %f511, %p130;
	mov.f32 	%f778, %f777;
	@%p2 bra 	$L__BB0_133;
// %bb.118:                             // %L644
	mul.hi.u32 	%r507, %r3598, -1431655765;
	shr.u32 	%r508, %r507, 2;
	mul.lo.s32 	%r509, %r508, 6;
	sub.s32 	%r510, %r3598, %r509;
	cvt.rn.f32.s32 	%f677, %r510;
	div.approx.f32 	%f150, %f677, %f730;
	abs.f32 	%f775, %f150;
	setp.lt.f32 	%p192, %f775, 0f40000000;
	@%p192 bra 	$L__BB0_130;
// %bb.119:
	setp.gtu.f32 	%p193, %f775, 0f4B800000;
	@%p193 bra 	$L__BB0_126;
	bra.uni 	$L__BB0_120;
$L__BB0_126:
	mov.b32 	%r72, %f775;
	and.b32  	%r511, %r72, 8388607;
	or.b32  	%r3614, %r511, 1065353216;
	mov.b32 	%f774, %r3614;
	add.s32 	%r512, %r72, -1073741824;
	and.b32  	%r3615, %r512, -8388608;
	setp.eq.s32 	%p199, %r3615, 0;
	@%p199 bra 	$L__BB0_129;
// %bb.127:                             // %__nv_fmaf_rn.exit4.i.i.i1239.preheader
	mov.f32 	%f688, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f687,%f688;
	// end inline asm
$L__BB0_128:                            // %__nv_fmaf_rn.exit4.i.i.i1239
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r513, %r3615, 192937984;
	add.s32 	%r514, %r3614, %r513;
	mov.b32 	%f689, %r514;
	mul.f32 	%f690, %f687, %f689;
	sub.f32 	%f691, %f689, %f690;
	fma.rn.f32 	%f692, %f691, %f687, %f690;
	sub.f32 	%f693, %f689, %f692;
	fma.rz.f32 	%f694, %f693, %f687, %f692;
	cvt.rzi.f32.f32 	%f695, %f694;
	sub.f32 	%f774, %f689, %f695;
	sub.s32 	%r3615, %r3615, %r513;
	mov.b32 	%r3614, %f774;
	setp.ne.s32 	%p200, %r3615, 0;
	setp.ne.s32 	%p201, %r3614, 0;
	and.pred  	%p202, %p200, %p201;
	@%p202 bra 	$L__BB0_128;
$L__BB0_129:                            // %__internal_fmodf_slowpath_mod.exit.i.i1241
	setp.gt.u32 	%p203, %r72, 2139095039;
	selp.f32 	%f696, 0f7FFFFFFF, 0f4B800000, %p203;
	mul.f32 	%f697, %f774, 0f34000000;
	mul.f32 	%f775, %f696, %f697;
	bra.uni 	$L__BB0_130;
$L__BB0_120:                            // %__nv_fast_fdividef.exit.i.i.i1218
	mov.f32 	%f679, 0f40000000;
	div.approx.f32 	%f680, %f775, %f679;
	cvt.rzi.f32.f32 	%f773, %f680;
	fma.rn.f32 	%f153, %f773, 0fC0000000, %f775;
	mov.b32 	%r71, %f153;
	setp.lt.u32 	%p194, %r71, 1073741824;
	@%p194 bra 	$L__BB0_125;
// %bb.121:
	setp.lt.u32 	%p195, %r71, -2147483647;
	@%p195 bra 	$L__BB0_123;
// %bb.122:
	add.f32 	%f685, %f773, 0fBF800000;
	setp.lt.f32 	%p198, %f153, 0fC0000000;
	add.f32 	%f686, %f685, 0fBF800000;
	selp.f32 	%f773, %f686, %f685, %p198;
	bra.uni 	$L__BB0_125;
$L__BB0_123:
	add.f32 	%f773, %f773, 0f3F800000;
	setp.ltu.f32 	%p196, %f153, 0f40800000;
	@%p196 bra 	$L__BB0_125;
// %bb.124:                             // %__nv_fmaf_rn.exit.i.i.i1222
	add.f32 	%f681, %f773, 0f3F800000;
	fma.rn.f32 	%f683, %f679, 0fC0400000, %f153;
	setp.ge.f32 	%p197, %f683, 0f00000000;
	add.f32 	%f684, %f681, 0f3F800000;
	selp.f32 	%f773, %f684, %f681, %p197;
$L__BB0_125:                            // %__internal_fmodf_fastpath_quot.exit.i.i1225
	fma.rn.f32 	%f775, %f773, 0fC0000000, %f775;
$L__BB0_130:                            // %__internal_fmodf_kernel.exit.i1244
	abs.f32 	%f698, %f775;
	setp.gtu.f32 	%p204, %f698, 0f7F800000;
	@%p204 bra 	$L__BB0_132;
// %bb.131:
	mov.b32 	%r515, %f150;
	and.b32  	%r516, %r515, -2147483648;
	mov.b32 	%r517, %f775;
	or.b32  	%r518, %r516, %r517;
	mov.b32 	%f775, %r518;
$L__BB0_132:                            // %__nv_fmodf.exit1245
	add.f32 	%f699, %f775, %f775;
	mov.b32 	%r519, %f699;
	and.b32  	%r520, %r519, -2147483648;
	or.b32  	%r521, %r520, 1056964608;
	mov.b32 	%f700, %r521;
	add.f32 	%f701, %f699, %f700;
	cvt.rzi.f32.f32 	%f702, %f701;
	abs.f32 	%f703, %f699;
	setp.gt.f32 	%p205, %f703, 0f4B000000;
	selp.f32 	%f704, %f699, %f702, %p205;
	cvt.rzi.f32.f32 	%f705, %f699;
	setp.lt.f32 	%p206, %f703, 0f3F000000;
	selp.f32 	%f706, %f705, %f704, %p206;
	cvt.rzi.s32.f32 	%r522, %f706;
	fma.rn.f32 	%f707, %f706, 0fBF000000, %f775;
	mul.f32 	%f708, %f707, %f707;
	fma.rn.f32 	%f709, %f708, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f710, %f708, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f711, %f709, %f708, 0fC0A55DF6;
	fma.rn.f32 	%f712, %f710, %f708, 0f4081E0CF;
	fma.rn.f32 	%f713, %f708, %f707, 0f00000000;
	fma.rn.f32 	%f714, %f712, %f708, 0fC09DE9E6;
	fma.rn.f32 	%f715, %f711, %f713, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f708, 0f3F800000;
	fma.rn.f32 	%f717, %f707, 0f40490FDB, %f715;
	and.b32  	%r523, %r522, 1;
	setp.eq.b32 	%p207, %r523, 1;
	selp.f32 	%f718, %f716, %f717, %p207;
	selp.f32 	%f719, %f717, %f716, %p207;
	and.b32  	%r524, %r522, 2;
	setp.eq.s32 	%p208, %r524, 0;
	neg.f32 	%f720, %f718;
	selp.f32 	%f721, %f718, %f720, %p208;
	add.s32 	%r525, %r522, 1;
	and.b32  	%r526, %r525, 2;
	setp.eq.s32 	%p209, %r526, 0;
	mov.f32 	%f722, 0f00000000;
	sub.f32 	%f723, %f722, %f719;
	selp.f32 	%f724, %f719, %f723, %p209;
	cvt.rzi.f32.f32 	%f725, %f775;
	setp.eq.f32 	%p210, %f725, %f775;
	mul.f32 	%f726, %f775, 0f00000000;
	selp.f32 	%f778, %f726, %f721, %p210;
	abs.f32 	%f727, %f775;
	setp.gt.f32 	%p211, %f727, 0f4B800000;
	add.f32 	%f728, %f778, 0f3F800000;
	selp.f32 	%f777, %f728, %f724, %p211;
$L__BB0_133:                            // %L678
	mov.b32 	%r319, %f254;
	mov.b32 	%r322, %f251;
	mov.b32 	%r414, %f747;
	mov.b32 	%r415, %f753;
	mov.b32 	%r420, %f748;
	mov.b32 	%r421, %f754;
	mov.b32 	%r433, %f517;
	mov.b32 	%r436, %f514;
	mov.b32 	%r528, %f771;
	mov.b32 	%r529, %f777;
	mov.b32 	%r534, %f772;
	mov.b32 	%r535, %f778;
	mov.u32 	%r3702, 999999999;
	cvt.u16.u32 	%rs262, %r1;
	@%p67 bra 	$L__BB0_135;
// %bb.134:                             // %L714
	ld.param.u64 	%rd1, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1];
	and.b16  	%rs32, %rs262, 255;
	mul.lo.s16 	%rs33, %rs32, 171;
	shr.u16 	%rs34, %rs33, 12;
	mul.lo.s16 	%rs35, %rs34, 24;
	sub.s16 	%rs36, %rs262, %rs35;
	cvt.u32.u16 	%r540, %rs36;
	and.b32  	%r541, %r540, 255;
	mad.lo.s32 	%r542, %r541, 24, %r2;
	cvt.u16.u32 	%rs37, %r542;
	mul.hi.u16 	%rs38, %rs37, -7281;
	shr.u16 	%rs39, %rs38, 9;
	mul.lo.s16 	%rs40, %rs39, 576;
	sub.s16 	%rs41, %rs37, %rs40;
	cvt.u32.u16 	%r543, %rs41;
	mul.wide.u32 	%rd47, %r543, 4;
	add.s64 	%rd48, %rd1, %rd47;
	ld.global.u32 	%r544, [%rd48];
	cvt.s32.s16 	%r545, %r544;
	shr.s32 	%r546, %r544, 16;
	mul.lo.s32 	%r547, %r546, 801;
	mad.lo.s32 	%r3702, %r545, 33, %r547;
$L__BB0_135:                            // %pass348
	xor.b32  	%r318, %r322, -2147483648;
	mov.b32 	%r370, %f735;
	mov.b32 	%r371, %f741;
	mov.b32 	%r373, %f736;
	mov.b32 	%r374, %f742;
	xor.b32  	%r417, %r420, -2147483648;
	xor.b32  	%r418, %r421, -2147483648;
	xor.b32  	%r432, %r436, -2147483648;
	mov.b32 	%r484, %f759;
	mov.b32 	%r485, %f765;
	mov.b32 	%r487, %f760;
	mov.b32 	%r488, %f766;
	xor.b32  	%r531, %r534, -2147483648;
	xor.b32  	%r532, %r535, -2147483648;
	and.b32  	%r548, %r1, 24;
	setp.ne.s32 	%p213, %r548, 24;
	cvt.u16.u32 	%rs263, %r6;
	@%p213 bra 	$L__BB0_136;
// %bb.184:                             // %pass348.L1048_crit_edge
	mul.lo.s16 	%rs49, %rs263, 171;
	shr.u16 	%rs50, %rs49, 10;
	mul.lo.s16 	%rs51, %rs50, 6;
	sub.s16 	%rs52, %rs263, %rs51;
	cvt.u32.u16 	%r561, %rs52;
	and.b32  	%r3616, %r561, 255;
	mov.u32 	%r3617, 0;
	mov.u32 	%r3618, %r3617;
	bra.uni 	$L__BB0_137;
$L__BB0_136:                            // %pass385
	ld.param.u64 	%rd2, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2];
	mul.lo.s32 	%r549, %r5, 144;
	mul.lo.s32 	%r550, %r4, 1152;
	mul.lo.s16 	%rs43, %rs263, 171;
	shr.u16 	%rs44, %rs43, 10;
	mul.lo.s16 	%rs45, %rs44, 6;
	sub.s16 	%rs46, %rs263, %rs45;
	cvt.u32.u16 	%r551, %rs46;
	and.b32  	%r3616, %r551, 255;
	and.b16  	%rs47, %rs46, 255;
	mul.wide.u16 	%r552, %rs47, 24;
	or.b32  	%r553, %r550, %r2;
	add.s32 	%r554, %r553, %r549;
	add.s32 	%r555, %r554, %r552;
	mul.wide.u32 	%rd49, %r555, 4;
	add.s64 	%rd50, %rd2, %rd49;
	ld.global.u32 	%r3617, [%rd50];
	or.b32  	%r556, %r2, 576;
	add.s32 	%r557, %r556, %r550;
	add.s32 	%r558, %r557, %r549;
	add.s32 	%r559, %r558, %r552;
	mul.wide.u32 	%rd51, %r559, 4;
	add.s64 	%rd52, %rd2, %rd51;
	ld.global.u32 	%r3618, [%rd52];
$L__BB0_137:                            // %L1048
	ld.param.u64 	%rd3, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3];
	ld.param.u64 	%rd4, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4];
	// begin inline asm
	cvt.rn.f16x2.f32 %r317, %r319, %r318;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r320, %r322, %r319;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r369, %r371, %r370;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r372, %r374, %r373;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r413, %r415, %r414;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r416, %r418, %r417;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r419, %r421, %r420;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r422, %r415, %r414;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r431, %r433, %r432;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r434, %r436, %r433;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r483, %r485, %r484;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r486, %r488, %r487;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r527, %r529, %r528;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r530, %r532, %r531;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r533, %r535, %r534;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r536, %r529, %r528;
	// end inline asm
	mov.u32 	%r3599, 0;
	shl.b32 	%r563, %r4, 8;
	shl.b32 	%r564, %r1, 3;
	and.b32  	%r565, %r564, 128;
	shl.b32 	%r566, %r1, 2;
	and.b32  	%r567, %r566, 60;
	or.b32  	%r568, %r565, %r563;
	or.b32  	%r87, %r568, %r567;
	or.b32  	%r569, %r566, %r568;
	or.b32  	%r88, %r569, 64;
	add.s32 	%r89, %r2, 24;
	shr.u32 	%r570, %r1, 4;
	and.b32  	%r571, %r229, 30;
	or.b32  	%r572, %r571, %r570;
	mul.lo.s32 	%r90, %r572, 257;
	or.b32  	%r573, %r229, %r570;
	or.b32  	%r574, %r573, 32;
	mul.lo.s32 	%r91, %r574, 257;
	and.b32  	%r575, %r3, 224;
	shr.u32 	%r576, %r2, 3;
	and.b16  	%rs54, %rs262, 255;
	mul.lo.s16 	%rs55, %rs54, 171;
	shr.u16 	%rs56, %rs55, 12;
	mul.lo.s16 	%rs57, %rs56, 24;
	sub.s16 	%rs1, %rs262, %rs57;
	cvt.u32.u16 	%r577, %rs1;
	and.b32  	%r578, %r577, 255;
	mad.lo.s32 	%r92, %r576, 257, %r575;
	shr.u32 	%r579, %r89, 3;
	mad.lo.s32 	%r93, %r579, 257, %r575;
	add.s32 	%r580, %r2, 48;
	shr.u32 	%r581, %r580, 3;
	mad.lo.s32 	%r94, %r581, 257, %r575;
	add.s32 	%r582, %r2, 72;
	shr.u32 	%r583, %r582, 3;
	mad.lo.s32 	%r95, %r583, 257, %r575;
	or.b32  	%r584, %r576, 12;
	mad.lo.s32 	%r96, %r584, 257, %r575;
	add.s32 	%r585, %r2, 120;
	shr.u32 	%r586, %r585, 3;
	mad.lo.s32 	%r97, %r586, 257, %r575;
	add.s32 	%r587, %r2, 144;
	shr.u32 	%r588, %r587, 3;
	mad.lo.s32 	%r98, %r588, 257, %r575;
	add.s32 	%r589, %r2, 168;
	shr.u32 	%r590, %r589, 3;
	mad.lo.s32 	%r99, %r590, 257, %r575;
	or.b32  	%r591, %r576, 24;
	mad.lo.s32 	%r100, %r591, 257, %r575;
	add.s32 	%r592, %r2, 216;
	shr.u32 	%r593, %r592, 3;
	mad.lo.s32 	%r101, %r593, 257, %r575;
	add.s32 	%r594, %r2, 240;
	shr.u32 	%r595, %r594, 3;
	mad.lo.s32 	%r102, %r595, 257, %r575;
	add.s32 	%r596, %r2, 264;
	shr.u32 	%r597, %r596, 3;
	mad.lo.s32 	%r103, %r597, 257, %r575;
	or.b32  	%r598, %r576, 36;
	mad.lo.s32 	%r104, %r598, 257, %r575;
	add.s32 	%r599, %r2, 312;
	shr.u32 	%r600, %r599, 3;
	mad.lo.s32 	%r105, %r600, 257, %r575;
	add.s32 	%r601, %r2, 336;
	shr.u32 	%r602, %r601, 3;
	mad.lo.s32 	%r106, %r602, 257, %r575;
	add.s32 	%r603, %r2, 360;
	shr.u32 	%r604, %r603, 3;
	mad.lo.s32 	%r107, %r604, 257, %r575;
	or.b32  	%r605, %r576, 48;
	mad.lo.s32 	%r108, %r605, 257, %r575;
	add.s32 	%r606, %r2, 408;
	shr.u32 	%r607, %r606, 3;
	mad.lo.s32 	%r109, %r607, 257, %r575;
	add.s32 	%r608, %r2, 432;
	shr.u32 	%r609, %r608, 3;
	mad.lo.s32 	%r110, %r609, 257, %r575;
	add.s32 	%r610, %r2, 456;
	shr.u32 	%r611, %r610, 3;
	mad.lo.s32 	%r111, %r611, 257, %r575;
	or.b32  	%r612, %r576, 60;
	mad.lo.s32 	%r112, %r612, 257, %r575;
	add.s32 	%r613, %r2, 504;
	bfe.u32 	%r614, %r613, 3, 6;
	mad.lo.s32 	%r113, %r614, 257, %r575;
	mul.lo.s32 	%r615, %r2, 33;
	mad.lo.s32 	%r616, %r5, 4806, %r615;
	mad.lo.s32 	%r617, %r3616, 801, %r616;
	bfe.s32 	%r618, %r1, 2, 1;
	and.b32  	%r619, %r618, 1028;
	bfe.s32 	%r620, %r1, 1, 1;
	and.b32  	%r621, %r620, 2056;
	mul.lo.s32 	%r622, %r570, 257;
	bfe.s32 	%r623, %r1, 3, 1;
	and.b32  	%r624, %r623, 514;
	and.b32  	%r625, %r1, 1;
	neg.s32 	%r626, %r625;
	and.b32  	%r627, %r626, 4112;
	add.s32 	%r628, %r622, %r2;
	add.s32 	%r629, %r628, %r621;
	add.s32 	%r630, %r629, %r619;
	add.s32 	%r631, %r630, %r624;
	add.s32 	%r632, %r631, %r627;
	mul.wide.u32 	%rd53, %r632, 4;
	mov.u64 	%rd54, shmem;
	add.s64 	%rd6, %rd54, %rd53;
	or.b32  	%r633, %r2, 8256;
	add.s32 	%r634, %r633, %r622;
	add.s32 	%r635, %r634, %r621;
	add.s32 	%r636, %r635, %r619;
	add.s32 	%r637, %r636, %r624;
	add.s32 	%r638, %r637, %r627;
	mul.wide.u32 	%rd55, %r638, 4;
	add.s64 	%rd7, %rd54, %rd55;
	or.b32  	%r639, %r2, 32;
	add.s32 	%r640, %r639, %r622;
	add.s32 	%r641, %r640, %r621;
	add.s32 	%r642, %r641, %r619;
	add.s32 	%r643, %r642, %r624;
	add.s32 	%r644, %r643, %r627;
	mul.wide.u32 	%rd56, %r644, 4;
	add.s64 	%rd8, %rd54, %rd56;
	or.b32  	%r645, %r2, 8288;
	add.s32 	%r646, %r645, %r622;
	add.s32 	%r647, %r646, %r621;
	add.s32 	%r648, %r647, %r619;
	add.s32 	%r649, %r648, %r624;
	add.s32 	%r650, %r649, %r627;
	mul.wide.u32 	%rd57, %r650, 4;
	add.s64 	%rd9, %rd54, %rd57;
	mul.lo.s32 	%r651, %r5, 6;
	bfe.s32 	%r652, %r2, 3, 1;
	and.b32  	%r653, %r2, 8;
	setp.eq.s32 	%p214, %r653, 0;
	and.b32  	%r654, %r652, 1028;
	bfe.s32 	%r655, %r2, 2, 1;
	and.b32  	%r656, %r655, 2056;
	and.b32  	%r657, %r2, 1;
	neg.s32 	%r658, %r657;
	and.b32  	%r659, %r658, 8256;
	shr.u32 	%r660, %r2, 4;
	mul.lo.s32 	%r661, %r660, 514;
	bfe.s32 	%r662, %r2, 1, 1;
	and.b32  	%r663, %r662, 4112;
	add.s32 	%r664, %r661, %r651;
	add.s32 	%r665, %r664, %r654;
	add.s32 	%r666, %r665, %r656;
	add.s32 	%r667, %r666, %r659;
	add.s32 	%r668, %r667, %r663;
	add.s32 	%r669, %r668, %r3616;
	mul.wide.u32 	%rd58, %r669, 4;
	add.s64 	%rd10, %rd54, %rd58;
	selp.b32 	%r670, 1028, 0, %p214;
	shr.u32 	%r671, %r89, 5;
	mul.lo.s32 	%r672, %r671, 257;
	bfe.s32 	%r673, %r89, 4, 1;
	and.b32  	%r674, %r673, 514;
	add.s32 	%r675, %r670, %r651;
	add.s32 	%r676, %r675, %r656;
	add.s32 	%r677, %r676, %r672;
	add.s32 	%r678, %r677, %r659;
	add.s32 	%r679, %r678, %r663;
	add.s32 	%r680, %r679, %r674;
	add.s32 	%r681, %r680, %r3616;
	mul.wide.u32 	%rd59, %r681, 4;
	add.s64 	%rd11, %rd54, %rd59;
	or.b32  	%r682, %r651, 32;
	add.s32 	%r683, %r682, %r661;
	add.s32 	%r684, %r683, %r654;
	add.s32 	%r685, %r684, %r656;
	add.s32 	%r686, %r685, %r659;
	add.s32 	%r687, %r686, %r663;
	add.s32 	%r688, %r687, %r3616;
	mul.wide.u32 	%rd60, %r688, 4;
	add.s64 	%rd12, %rd54, %rd60;
	add.s32 	%r689, %r682, %r670;
	add.s32 	%r690, %r689, %r656;
	add.s32 	%r691, %r690, %r672;
	add.s32 	%r692, %r691, %r659;
	add.s32 	%r693, %r692, %r663;
	add.s32 	%r694, %r693, %r674;
	add.s32 	%r695, %r694, %r3616;
	mul.wide.u32 	%rd61, %r695, 4;
	add.s64 	%rd13, %rd54, %rd61;
	mul.lo.s32 	%r696, %r4, 3456;
	mad.lo.s32 	%r697, %r2, 24, %r696;
	add.s32 	%r114, %r697, %r578;
	cvt.u16.u32 	%rs58, %r89;
	and.b16  	%rs59, %rs58, 255;
	mul.lo.s16 	%rs60, %rs59, 171;
	shr.u16 	%rs61, %rs60, 13;
	mul.lo.s16 	%rs62, %rs61, 48;
	sub.s16 	%rs63, %rs58, %rs62;
	cvt.u32.u16 	%r698, %rs63;
	and.b32  	%r699, %r698, 255;
	or.b32  	%r700, %r696, %r578;
	mad.lo.s32 	%r115, %r699, 24, %r700;
	mul.wide.u32 	%rd62, %r617, 4;
	add.s64 	%rd14, %rd54, %rd62;
	add.s32 	%r701, %r632, 64;
	mul.wide.u32 	%rd63, %r701, 4;
	add.s64 	%rd15, %rd54, %rd63;
	add.s32 	%r702, %r638, 64;
	mul.wide.u32 	%rd64, %r702, 4;
	add.s64 	%rd16, %rd54, %rd64;
	add.s32 	%r703, %r644, 64;
	mul.wide.u32 	%rd65, %r703, 4;
	add.s64 	%rd17, %rd54, %rd65;
	add.s32 	%r704, %r650, 64;
	mul.wide.u32 	%rd66, %r704, 4;
	add.s64 	%rd18, %rd54, %rd66;
	add.s32 	%r705, %r632, 128;
	mul.wide.u32 	%rd67, %r705, 4;
	add.s64 	%rd19, %rd54, %rd67;
	add.s32 	%r706, %r638, 128;
	mul.wide.u32 	%rd68, %r706, 4;
	add.s64 	%rd20, %rd54, %rd68;
	add.s32 	%r707, %r644, 128;
	mul.wide.u32 	%rd69, %r707, 4;
	add.s64 	%rd21, %rd54, %rd69;
	add.s32 	%r708, %r650, 128;
	mul.wide.u32 	%rd70, %r708, 4;
	add.s64 	%rd22, %rd54, %rd70;
	add.s32 	%r709, %r632, 192;
	mul.wide.u32 	%rd71, %r709, 4;
	add.s64 	%rd23, %rd54, %rd71;
	add.s32 	%r710, %r638, 192;
	mul.wide.u32 	%rd72, %r710, 4;
	add.s64 	%rd24, %rd54, %rd72;
	add.s32 	%r711, %r644, 192;
	mul.wide.u32 	%rd73, %r711, 4;
	add.s64 	%rd25, %rd54, %rd73;
	add.s32 	%r712, %r650, 192;
	mul.wide.u32 	%rd74, %r712, 4;
	add.s64 	%rd26, %rd54, %rd74;
	add.s32 	%r713, %r669, 64;
	mul.wide.u32 	%rd75, %r713, 4;
	add.s64 	%rd27, %rd54, %rd75;
	add.s32 	%r714, %r681, 64;
	mul.wide.u32 	%rd76, %r714, 4;
	add.s64 	%rd28, %rd54, %rd76;
	add.s32 	%r715, %r688, 64;
	mul.wide.u32 	%rd77, %r715, 4;
	add.s64 	%rd29, %rd54, %rd77;
	add.s32 	%r716, %r695, 64;
	mul.wide.u32 	%rd78, %r716, 4;
	add.s64 	%rd30, %rd54, %rd78;
	add.s32 	%r717, %r669, 128;
	mul.wide.u32 	%rd79, %r717, 4;
	add.s64 	%rd31, %rd54, %rd79;
	add.s32 	%r718, %r681, 128;
	mul.wide.u32 	%rd80, %r718, 4;
	add.s64 	%rd32, %rd54, %rd80;
	add.s32 	%r719, %r688, 128;
	mul.wide.u32 	%rd81, %r719, 4;
	add.s64 	%rd33, %rd54, %rd81;
	add.s32 	%r720, %r695, 128;
	mul.wide.u32 	%rd82, %r720, 4;
	add.s64 	%rd34, %rd54, %rd82;
	add.s32 	%r721, %r669, 192;
	mul.wide.u32 	%rd83, %r721, 4;
	add.s64 	%rd35, %rd54, %rd83;
	add.s32 	%r722, %r681, 192;
	mul.wide.u32 	%rd84, %r722, 4;
	add.s64 	%rd36, %rd54, %rd84;
	add.s32 	%r723, %r688, 192;
	mul.wide.u32 	%rd85, %r723, 4;
	add.s64 	%rd37, %rd54, %rd85;
	add.s32 	%r724, %r695, 192;
	mul.wide.u32 	%rd86, %r724, 4;
	add.s64 	%rd38, %rd54, %rd86;
	setp.gt.u32 	%p215, %r2, 7;
	setp.lt.u32 	%p216, %r1, 16;
	setp.lt.u32 	%p217, %r1, 24;
	mov.u32 	%r3619, %r3599;
	mov.u32 	%r3649, %r3599;
	mov.u32 	%r3650, %r3599;
	mov.u32 	%r3651, %r3599;
	mov.u32 	%r3652, %r3599;
	bra.uni 	$L__BB0_138;
$L__BB0_157:                            // %L30345
                                        //   in Loop: Header=BB0_138 Depth=1
	add.s32 	%r217, %r3619, 48;
	setp.ne.s32 	%p244, %r3619, 96;
	mov.u32 	%r3619, %r217;
	@%p244 bra 	$L__BB0_138;
	bra.uni 	$L__BB0_158;
$L__BB0_138:                            // %L1051
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_140 Depth 2
                                        //     Child Loop BB0_149 Depth 2
	mul.hi.u32 	%r918, %r3619, -1431655765;
	shr.u32 	%r919, %r918, 5;
	mul.lo.s32 	%r920, %r919, 48;
	add.s32 	%r921, %r920, %r2;
	cvt.u16.u32 	%rs64, %r921;
	mul.hi.s16 	%rs65, %rs64, 3641;
	shr.u16 	%rs66, %rs65, 15;
	shr.s16 	%rs67, %rs65, 3;
	add.s16 	%rs68, %rs67, %rs66;
	mul.lo.s16 	%rs69, %rs68, 144;
	sub.s16 	%rs70, %rs64, %rs69;
	cvt.u32.u16 	%r922, %rs70;
	shl.b32 	%r923, %r922, 16;
	or.b32  	%r924, %r923, %r87;
	mul.wide.s32 	%rd87, %r924, 4;
	add.s64 	%rd88, %rd3, %rd87;
	ld.global.v4.u32 	{%r925, %r926, %r927, %r928}, [%rd88];
	or.b32  	%r929, %r88, %r923;
	mul.wide.s32 	%rd89, %r929, 4;
	add.s64 	%rd90, %rd3, %rd89;
	ld.global.v4.u32 	{%r930, %r931, %r932, %r933}, [%rd90];
	add.s32 	%r934, %r89, %r920;
	cvt.u16.u32 	%rs71, %r934;
	mul.hi.s16 	%rs72, %rs71, 3641;
	shr.u16 	%rs73, %rs72, 15;
	shr.s16 	%rs74, %rs72, 3;
	add.s16 	%rs75, %rs74, %rs73;
	mul.lo.s16 	%rs76, %rs75, 144;
	sub.s16 	%rs77, %rs71, %rs76;
	cvt.u32.u16 	%r935, %rs77;
	shl.b32 	%r936, %r935, 16;
	or.b32  	%r937, %r936, %r87;
	mul.wide.s32 	%rd91, %r937, 4;
	add.s64 	%rd92, %rd3, %rd91;
	ld.global.v4.u32 	{%r938, %r939, %r940, %r941}, [%rd92];
	or.b32  	%r942, %r88, %r936;
	mul.wide.s32 	%rd93, %r942, 4;
	add.s64 	%rd94, %rd3, %rd93;
	ld.global.v4.u32 	{%r943, %r944, %r945, %r946}, [%rd94];
	selp.b32 	%r947, %r927, %r925, %p216;
	shfl.sync.bfly.b32	%r948, %r947, 16, 31, -1;
	selp.b32 	%r727, %r925, %r948, %p216;
	selp.b32 	%r732, %r948, %r927, %p216;
	selp.b32 	%r949, %r928, %r926, %p216;
	shfl.sync.bfly.b32	%r950, %r949, 16, 31, -1;
	selp.b32 	%r735, %r926, %r950, %p216;
	selp.b32 	%r740, %r950, %r928, %p216;
	selp.b32 	%r951, %r932, %r930, %p216;
	shfl.sync.bfly.b32	%r952, %r951, 16, 31, -1;
	selp.b32 	%r743, %r930, %r952, %p216;
	selp.b32 	%r748, %r952, %r932, %p216;
	selp.b32 	%r953, %r933, %r931, %p216;
	shfl.sync.bfly.b32	%r954, %r953, 16, 31, -1;
	selp.b32 	%r751, %r931, %r954, %p216;
	selp.b32 	%r756, %r954, %r933, %p216;
	selp.b32 	%r955, %r940, %r938, %p216;
	shfl.sync.bfly.b32	%r956, %r955, 16, 31, -1;
	selp.b32 	%r759, %r938, %r956, %p216;
	selp.b32 	%r764, %r956, %r940, %p216;
	selp.b32 	%r957, %r941, %r939, %p216;
	shfl.sync.bfly.b32	%r958, %r957, 16, 31, -1;
	selp.b32 	%r767, %r939, %r958, %p216;
	selp.b32 	%r772, %r958, %r941, %p216;
	selp.b32 	%r959, %r945, %r943, %p216;
	shfl.sync.bfly.b32	%r960, %r959, 16, 31, -1;
	selp.b32 	%r775, %r943, %r960, %p216;
	selp.b32 	%r780, %r960, %r945, %p216;
	selp.b32 	%r961, %r946, %r944, %p216;
	shfl.sync.bfly.b32	%r962, %r961, 16, 31, -1;
	selp.b32 	%r783, %r944, %r962, %p216;
	selp.b32 	%r788, %r962, %r946, %p216;
	shl.b32 	%r728, %r732, 4;
	mov.u32 	%r726, 252645135;
	// begin inline asm
	lop3.b32 %r790, %r726, %r727, %r728, 202;
	// end inline asm
	shr.u32 	%r731, %r727, 4;
	// begin inline asm
	lop3.b32 %r806, %r726, %r731, %r732, 202;
	// end inline asm
	shl.b32 	%r736, %r740, 4;
	// begin inline asm
	lop3.b32 %r798, %r726, %r735, %r736, 202;
	// end inline asm
	shr.u32 	%r739, %r735, 4;
	// begin inline asm
	lop3.b32 %r814, %r726, %r739, %r740, 202;
	// end inline asm
	shl.b32 	%r744, %r748, 4;
	// begin inline asm
	lop3.b32 %r822, %r726, %r743, %r744, 202;
	// end inline asm
	shr.u32 	%r747, %r743, 4;
	// begin inline asm
	lop3.b32 %r838, %r726, %r747, %r748, 202;
	// end inline asm
	shl.b32 	%r752, %r756, 4;
	// begin inline asm
	lop3.b32 %r830, %r726, %r751, %r752, 202;
	// end inline asm
	shr.u32 	%r755, %r751, 4;
	// begin inline asm
	lop3.b32 %r846, %r726, %r755, %r756, 202;
	// end inline asm
	shl.b32 	%r760, %r764, 4;
	// begin inline asm
	lop3.b32 %r791, %r726, %r759, %r760, 202;
	// end inline asm
	shr.u32 	%r763, %r759, 4;
	// begin inline asm
	lop3.b32 %r807, %r726, %r763, %r764, 202;
	// end inline asm
	shl.b32 	%r768, %r772, 4;
	// begin inline asm
	lop3.b32 %r799, %r726, %r767, %r768, 202;
	// end inline asm
	shr.u32 	%r771, %r767, 4;
	// begin inline asm
	lop3.b32 %r815, %r726, %r771, %r772, 202;
	// end inline asm
	shl.b32 	%r776, %r780, 4;
	// begin inline asm
	lop3.b32 %r823, %r726, %r775, %r776, 202;
	// end inline asm
	shr.u32 	%r779, %r775, 4;
	// begin inline asm
	lop3.b32 %r839, %r726, %r779, %r780, 202;
	// end inline asm
	shl.b32 	%r784, %r788, 4;
	// begin inline asm
	lop3.b32 %r831, %r726, %r783, %r784, 202;
	// end inline asm
	shr.u32 	%r787, %r783, 4;
	// begin inline asm
	lop3.b32 %r847, %r726, %r787, %r788, 202;
	// end inline asm
	mov.u32 	%r792, 25152;
	// begin inline asm
	prmt.b32 %r854, %r790, %r791, %r792;
	// end inline asm
	mov.u32 	%r796, 29521;
	// begin inline asm
	prmt.b32 %r886, %r790, %r791, %r796;
	// end inline asm
	// begin inline asm
	prmt.b32 %r862, %r798, %r799, %r792;
	// end inline asm
	// begin inline asm
	prmt.b32 %r894, %r798, %r799, %r796;
	// end inline asm
	// begin inline asm
	prmt.b32 %r855, %r806, %r807, %r792;
	// end inline asm
	// begin inline asm
	prmt.b32 %r887, %r806, %r807, %r796;
	// end inline asm
	// begin inline asm
	prmt.b32 %r863, %r814, %r815, %r792;
	// end inline asm
	// begin inline asm
	prmt.b32 %r895, %r814, %r815, %r796;
	// end inline asm
	// begin inline asm
	prmt.b32 %r870, %r822, %r823, %r792;
	// end inline asm
	// begin inline asm
	prmt.b32 %r902, %r822, %r823, %r796;
	// end inline asm
	// begin inline asm
	prmt.b32 %r878, %r830, %r831, %r792;
	// end inline asm
	// begin inline asm
	prmt.b32 %r910, %r830, %r831, %r796;
	// end inline asm
	// begin inline asm
	prmt.b32 %r871, %r838, %r839, %r792;
	// end inline asm
	// begin inline asm
	prmt.b32 %r903, %r838, %r839, %r796;
	// end inline asm
	// begin inline asm
	prmt.b32 %r879, %r846, %r847, %r792;
	// end inline asm
	// begin inline asm
	prmt.b32 %r911, %r846, %r847, %r796;
	// end inline asm
	mov.u32 	%r912, 21520;
	// begin inline asm
	prmt.b32 %r853, %r854, %r855, %r912;
	// end inline asm
	mov.u32 	%r916, 30258;
	// begin inline asm
	prmt.b32 %r857, %r854, %r855, %r916;
	// end inline asm
	// begin inline asm
	prmt.b32 %r861, %r862, %r863, %r912;
	// end inline asm
	// begin inline asm
	prmt.b32 %r865, %r862, %r863, %r916;
	// end inline asm
	// begin inline asm
	prmt.b32 %r869, %r870, %r871, %r912;
	// end inline asm
	// begin inline asm
	prmt.b32 %r873, %r870, %r871, %r916;
	// end inline asm
	// begin inline asm
	prmt.b32 %r877, %r878, %r879, %r912;
	// end inline asm
	// begin inline asm
	prmt.b32 %r881, %r878, %r879, %r916;
	// end inline asm
	// begin inline asm
	prmt.b32 %r885, %r886, %r887, %r912;
	// end inline asm
	// begin inline asm
	prmt.b32 %r889, %r886, %r887, %r916;
	// end inline asm
	// begin inline asm
	prmt.b32 %r893, %r894, %r895, %r912;
	// end inline asm
	// begin inline asm
	prmt.b32 %r897, %r894, %r895, %r916;
	// end inline asm
	// begin inline asm
	prmt.b32 %r901, %r902, %r903, %r912;
	// end inline asm
	// begin inline asm
	prmt.b32 %r905, %r902, %r903, %r916;
	// end inline asm
	// begin inline asm
	prmt.b32 %r909, %r910, %r911, %r912;
	// end inline asm
	// begin inline asm
	prmt.b32 %r913, %r910, %r911, %r916;
	// end inline asm
	cvt.s16.s8 	%rs78, %rs64;
	mul.lo.s16 	%rs79, %rs78, 43;
	shr.u16 	%rs80, %rs79, 15;
	shr.s16 	%rs81, %rs79, 8;
	shr.u16 	%rs82, %rs81, 2;
	add.s16 	%rs83, %rs82, %rs80;
	mul.lo.s16 	%rs84, %rs83, 24;
	sub.s16 	%rs85, %rs64, %rs84;
	cvt.u32.u16 	%r963, %rs85;
	cvt.s32.s8 	%r964, %r963;
	add.s32 	%r965, %r90, %r964;
	mul.wide.s32 	%rd95, %r965, 4;
	add.s64 	%rd97, %rd54, %rd95;
	st.shared.u32 	[%rd97], %r853;
	add.s32 	%r966, %r965, 128;
	mul.wide.u32 	%rd98, %r966, 4;
	add.s64 	%rd99, %rd54, %rd98;
	st.shared.u32 	[%rd99], %r861;
	add.s32 	%r967, %r965, 64;
	mul.wide.u32 	%rd100, %r967, 4;
	add.s64 	%rd101, %rd54, %rd100;
	st.shared.u32 	[%rd101], %r857;
	add.s32 	%r968, %r965, 192;
	mul.wide.u32 	%rd102, %r968, 4;
	add.s64 	%rd103, %rd54, %rd102;
	st.shared.u32 	[%rd103], %r865;
	add.s32 	%r969, %r91, %r964;
	mul.wide.u32 	%rd104, %r969, 4;
	add.s64 	%rd105, %rd54, %rd104;
	st.shared.u32 	[%rd105], %r869;
	add.s32 	%r970, %r969, 128;
	mul.wide.u32 	%rd106, %r970, 4;
	add.s64 	%rd107, %rd54, %rd106;
	st.shared.u32 	[%rd107], %r877;
	add.s32 	%r971, %r969, 64;
	mul.wide.u32 	%rd108, %r971, 4;
	add.s64 	%rd109, %rd54, %rd108;
	st.shared.u32 	[%rd109], %r873;
	add.s32 	%r972, %r969, 192;
	mul.wide.u32 	%rd110, %r972, 4;
	add.s64 	%rd111, %rd54, %rd110;
	st.shared.u32 	[%rd111], %r881;
	add.s32 	%r973, %r965, 32;
	mul.wide.u32 	%rd112, %r973, 4;
	add.s64 	%rd113, %rd54, %rd112;
	st.shared.u32 	[%rd113], %r885;
	add.s32 	%r974, %r965, 160;
	mul.wide.u32 	%rd114, %r974, 4;
	add.s64 	%rd115, %rd54, %rd114;
	st.shared.u32 	[%rd115], %r893;
	add.s32 	%r975, %r965, 96;
	mul.wide.u32 	%rd116, %r975, 4;
	add.s64 	%rd117, %rd54, %rd116;
	st.shared.u32 	[%rd117], %r889;
	add.s32 	%r976, %r965, 224;
	mul.wide.u32 	%rd118, %r976, 4;
	add.s64 	%rd119, %rd54, %rd118;
	st.shared.u32 	[%rd119], %r897;
	add.s32 	%r977, %r969, 32;
	mul.wide.u32 	%rd120, %r977, 4;
	add.s64 	%rd121, %rd54, %rd120;
	st.shared.u32 	[%rd121], %r901;
	add.s32 	%r978, %r969, 160;
	mul.wide.u32 	%rd122, %r978, 4;
	add.s64 	%rd123, %rd54, %rd122;
	st.shared.u32 	[%rd123], %r909;
	add.s32 	%r979, %r969, 96;
	mul.wide.u32 	%rd124, %r979, 4;
	add.s64 	%rd125, %rd54, %rd124;
	st.shared.u32 	[%rd125], %r905;
	add.s32 	%r980, %r969, 224;
	mul.wide.u32 	%rd126, %r980, 4;
	add.s64 	%rd127, %rd54, %rd126;
	st.shared.u32 	[%rd127], %r913;
	bar.sync 	0;
	cvt.u16.u32 	%rs2, %r920;
	add.s16 	%rs86, %rs1, %rs2;
	cvt.s16.s8 	%rs87, %rs86;
	mul.lo.s16 	%rs88, %rs87, 43;
	shr.u16 	%rs89, %rs88, 15;
	shr.s16 	%rs90, %rs88, 8;
	shr.u16 	%rs91, %rs90, 2;
	add.s16 	%rs92, %rs91, %rs89;
	mul.lo.s16 	%rs93, %rs92, 24;
	sub.s16 	%rs94, %rs86, %rs93;
	cvt.u32.u16 	%r981, %rs94;
	cvt.s32.s8 	%r982, %r981;
	add.s32 	%r983, %r92, %r982;
	mul.wide.s32 	%rd128, %r983, 4;
	add.s64 	%rd129, %rd54, %rd128;
	ld.shared.u32 	%r984, [%rd129];
	add.s32 	%r985, %r93, %r982;
	mul.wide.u32 	%rd130, %r985, 4;
	add.s64 	%rd131, %rd54, %rd130;
	ld.shared.u32 	%r986, [%rd131];
	add.s32 	%r987, %r94, %r982;
	mul.wide.u32 	%rd132, %r987, 4;
	add.s64 	%rd133, %rd54, %rd132;
	ld.shared.u32 	%r988, [%rd133];
	add.s32 	%r989, %r95, %r982;
	mul.wide.u32 	%rd134, %r989, 4;
	add.s64 	%rd135, %rd54, %rd134;
	ld.shared.u32 	%r990, [%rd135];
	add.s32 	%r991, %r96, %r982;
	mul.wide.u32 	%rd136, %r991, 4;
	add.s64 	%rd137, %rd54, %rd136;
	ld.shared.u32 	%r992, [%rd137];
	add.s32 	%r993, %r97, %r982;
	mul.wide.u32 	%rd138, %r993, 4;
	add.s64 	%rd139, %rd54, %rd138;
	ld.shared.u32 	%r994, [%rd139];
	add.s32 	%r995, %r98, %r982;
	mul.wide.u32 	%rd140, %r995, 4;
	add.s64 	%rd141, %rd54, %rd140;
	ld.shared.u32 	%r996, [%rd141];
	add.s32 	%r997, %r99, %r982;
	mul.wide.u32 	%rd142, %r997, 4;
	add.s64 	%rd143, %rd54, %rd142;
	ld.shared.u32 	%r998, [%rd143];
	add.s32 	%r999, %r100, %r982;
	mul.wide.u32 	%rd144, %r999, 4;
	add.s64 	%rd145, %rd54, %rd144;
	ld.shared.u32 	%r1000, [%rd145];
	add.s32 	%r1001, %r101, %r982;
	mul.wide.u32 	%rd146, %r1001, 4;
	add.s64 	%rd147, %rd54, %rd146;
	ld.shared.u32 	%r1002, [%rd147];
	add.s32 	%r1003, %r102, %r982;
	mul.wide.u32 	%rd148, %r1003, 4;
	add.s64 	%rd149, %rd54, %rd148;
	ld.shared.u32 	%r1004, [%rd149];
	add.s32 	%r1005, %r103, %r982;
	mul.wide.u32 	%rd150, %r1005, 4;
	add.s64 	%rd151, %rd54, %rd150;
	ld.shared.u32 	%r1006, [%rd151];
	add.s32 	%r1007, %r104, %r982;
	mul.wide.u32 	%rd152, %r1007, 4;
	add.s64 	%rd153, %rd54, %rd152;
	ld.shared.u32 	%r1008, [%rd153];
	add.s32 	%r1009, %r105, %r982;
	mul.wide.u32 	%rd154, %r1009, 4;
	add.s64 	%rd155, %rd54, %rd154;
	ld.shared.u32 	%r1010, [%rd155];
	add.s32 	%r1011, %r106, %r982;
	mul.wide.u32 	%rd156, %r1011, 4;
	add.s64 	%rd157, %rd54, %rd156;
	ld.shared.u32 	%r1012, [%rd157];
	add.s32 	%r1013, %r107, %r982;
	mul.wide.u32 	%rd158, %r1013, 4;
	add.s64 	%rd159, %rd54, %rd158;
	ld.shared.u32 	%r1014, [%rd159];
	add.s32 	%r1015, %r108, %r982;
	mul.wide.u32 	%rd160, %r1015, 4;
	add.s64 	%rd161, %rd54, %rd160;
	ld.shared.u32 	%r1016, [%rd161];
	add.s32 	%r1017, %r109, %r982;
	mul.wide.u32 	%rd162, %r1017, 4;
	add.s64 	%rd163, %rd54, %rd162;
	ld.shared.u32 	%r1018, [%rd163];
	add.s32 	%r1019, %r110, %r982;
	mul.wide.u32 	%rd164, %r1019, 4;
	add.s64 	%rd165, %rd54, %rd164;
	ld.shared.u32 	%r1020, [%rd165];
	add.s32 	%r1021, %r111, %r982;
	mul.wide.u32 	%rd166, %r1021, 4;
	add.s64 	%rd167, %rd54, %rd166;
	ld.shared.u32 	%r1022, [%rd167];
	add.s32 	%r1023, %r112, %r982;
	mul.wide.u32 	%rd168, %r1023, 4;
	add.s64 	%rd169, %rd54, %rd168;
	ld.shared.u32 	%r1024, [%rd169];
	add.s32 	%r1025, %r113, %r982;
	mul.wide.s32 	%rd170, %r1025, 4;
	add.s64 	%rd171, %rd54, %rd170;
	ld.shared.u32 	%r1026, [%rd171];
	bar.sync 	0;
	shfl.sync.idx.b32	%r1027, %r3702, 0, 31, -1;
	shfl.sync.idx.b32	%r1028, %r3702, 1, 31, -1;
	shfl.sync.idx.b32	%r1029, %r3702, 2, 31, -1;
	shfl.sync.idx.b32	%r1030, %r3702, 3, 31, -1;
	shfl.sync.idx.b32	%r1031, %r3702, 4, 31, -1;
	shfl.sync.idx.b32	%r1032, %r3702, 5, 31, -1;
	shfl.sync.idx.b32	%r1033, %r3702, 6, 31, -1;
	shfl.sync.idx.b32	%r1034, %r3702, 7, 31, -1;
	shfl.sync.idx.b32	%r1035, %r3702, 8, 31, -1;
	shfl.sync.idx.b32	%r1036, %r3702, 9, 31, -1;
	shfl.sync.idx.b32	%r1037, %r3702, 10, 31, -1;
	shfl.sync.idx.b32	%r1038, %r3702, 11, 31, -1;
	shfl.sync.idx.b32	%r1039, %r3702, 12, 31, -1;
	shfl.sync.idx.b32	%r1040, %r3702, 13, 31, -1;
	shfl.sync.idx.b32	%r1041, %r3702, 14, 31, -1;
	shfl.sync.idx.b32	%r1042, %r3702, 15, 31, -1;
	shfl.sync.idx.b32	%r1043, %r3702, 16, 31, -1;
	shfl.sync.idx.b32	%r1044, %r3702, 17, 31, -1;
	shfl.sync.idx.b32	%r1045, %r3702, 18, 31, -1;
	shfl.sync.idx.b32	%r1046, %r3702, 19, 31, -1;
	shfl.sync.idx.b32	%r1047, %r3702, 20, 31, -1;
	shfl.sync.idx.b32	%r1048, %r3702, 21, 31, -1;
	shfl.sync.idx.b32	%r1049, %r3702, 22, 31, -1;
	shfl.sync.idx.b32	%r1050, %r3702, 23, 31, -1;
	add.s32 	%r1051, %r1027, %r982;
	mul.wide.s32 	%rd172, %r1051, 4;
	add.s64 	%rd173, %rd54, %rd172;
	st.shared.u32 	[%rd173], %r984;
	add.s32 	%r1052, %r1028, %r982;
	mul.wide.s32 	%rd174, %r1052, 4;
	add.s64 	%rd175, %rd54, %rd174;
	st.shared.u32 	[%rd175], %r986;
	add.s32 	%r1053, %r1029, %r982;
	mul.wide.s32 	%rd176, %r1053, 4;
	add.s64 	%rd177, %rd54, %rd176;
	st.shared.u32 	[%rd177], %r988;
	add.s32 	%r1054, %r1030, %r982;
	mul.wide.s32 	%rd178, %r1054, 4;
	add.s64 	%rd179, %rd54, %rd178;
	st.shared.u32 	[%rd179], %r990;
	add.s32 	%r1055, %r1031, %r982;
	mul.wide.s32 	%rd180, %r1055, 4;
	add.s64 	%rd181, %rd54, %rd180;
	st.shared.u32 	[%rd181], %r992;
	add.s32 	%r1056, %r1032, %r982;
	mul.wide.s32 	%rd182, %r1056, 4;
	add.s64 	%rd183, %rd54, %rd182;
	st.shared.u32 	[%rd183], %r994;
	add.s32 	%r1057, %r1033, %r982;
	mul.wide.s32 	%rd184, %r1057, 4;
	add.s64 	%rd185, %rd54, %rd184;
	st.shared.u32 	[%rd185], %r996;
	add.s32 	%r1058, %r1034, %r982;
	mul.wide.s32 	%rd186, %r1058, 4;
	add.s64 	%rd187, %rd54, %rd186;
	st.shared.u32 	[%rd187], %r998;
	add.s32 	%r1059, %r1035, %r982;
	mul.wide.s32 	%rd188, %r1059, 4;
	add.s64 	%rd189, %rd54, %rd188;
	st.shared.u32 	[%rd189], %r1000;
	add.s32 	%r1060, %r1036, %r982;
	mul.wide.s32 	%rd190, %r1060, 4;
	add.s64 	%rd191, %rd54, %rd190;
	st.shared.u32 	[%rd191], %r1002;
	add.s32 	%r1061, %r1037, %r982;
	mul.wide.s32 	%rd192, %r1061, 4;
	add.s64 	%rd193, %rd54, %rd192;
	st.shared.u32 	[%rd193], %r1004;
	add.s32 	%r1062, %r1038, %r982;
	mul.wide.s32 	%rd194, %r1062, 4;
	add.s64 	%rd195, %rd54, %rd194;
	st.shared.u32 	[%rd195], %r1006;
	add.s32 	%r1063, %r1039, %r982;
	mul.wide.s32 	%rd196, %r1063, 4;
	add.s64 	%rd197, %rd54, %rd196;
	st.shared.u32 	[%rd197], %r1008;
	add.s32 	%r1064, %r1040, %r982;
	mul.wide.s32 	%rd198, %r1064, 4;
	add.s64 	%rd199, %rd54, %rd198;
	st.shared.u32 	[%rd199], %r1010;
	add.s32 	%r1065, %r1041, %r982;
	mul.wide.s32 	%rd200, %r1065, 4;
	add.s64 	%rd201, %rd54, %rd200;
	st.shared.u32 	[%rd201], %r1012;
	add.s32 	%r1066, %r1042, %r982;
	mul.wide.s32 	%rd202, %r1066, 4;
	add.s64 	%rd203, %rd54, %rd202;
	st.shared.u32 	[%rd203], %r1014;
	add.s32 	%r1067, %r1043, %r982;
	mul.wide.s32 	%rd204, %r1067, 4;
	add.s64 	%rd205, %rd54, %rd204;
	st.shared.u32 	[%rd205], %r1016;
	add.s32 	%r1068, %r1044, %r982;
	mul.wide.s32 	%rd206, %r1068, 4;
	add.s64 	%rd207, %rd54, %rd206;
	st.shared.u32 	[%rd207], %r1018;
	add.s32 	%r1069, %r1045, %r982;
	mul.wide.s32 	%rd208, %r1069, 4;
	add.s64 	%rd209, %rd54, %rd208;
	st.shared.u32 	[%rd209], %r1020;
	add.s32 	%r1070, %r1046, %r982;
	mul.wide.s32 	%rd210, %r1070, 4;
	add.s64 	%rd211, %rd54, %rd210;
	st.shared.u32 	[%rd211], %r1022;
	add.s32 	%r1071, %r1047, %r982;
	mul.wide.s32 	%rd212, %r1071, 4;
	add.s64 	%rd213, %rd54, %rd212;
	st.shared.u32 	[%rd213], %r1024;
	selp.b32 	%r1072, 0, %r1026, %p215;
	add.s32 	%r1073, %r1048, %r982;
	mul.wide.s32 	%rd214, %r1073, 4;
	add.s64 	%rd215, %rd54, %rd214;
	st.shared.u32 	[%rd215], %r1072;
	add.s32 	%r1074, %r1049, %r982;
	mul.wide.s32 	%rd216, %r1074, 4;
	add.s64 	%rd217, %rd54, %rd216;
	st.shared.u32 	[%rd217], %r3599;
	add.s32 	%r1075, %r1050, %r982;
	mul.wide.s32 	%rd218, %r1075, 4;
	add.s64 	%rd219, %rd54, %rd218;
	st.shared.u32 	[%rd219], %r3599;
	bar.sync 	0;
	mov.u32 	%r3624, %r3599;
	mov.u32 	%r3625, %r3599;
	mov.u32 	%r3626, %r3599;
	mov.u32 	%r3627, %r3599;
	mov.u32 	%r3628, %r3599;
	mov.u32 	%r3629, %r3599;
	mov.u32 	%r3630, %r3599;
	mov.u32 	%r3631, %r3599;
	mov.u32 	%r3632, %r3599;
	mov.u32 	%r3633, %r3599;
	mov.u32 	%r3634, %r3599;
	mov.u32 	%r3635, %r3599;
	mov.u32 	%r3636, %r3599;
	mov.u32 	%r3637, %r3599;
	mov.u32 	%r3638, %r3599;
	mov.u32 	%r3639, %r3599;
	mov.u32 	%r3640, %r3599;
	mov.u32 	%r3641, %r3599;
	mov.u32 	%r3642, %r3599;
	mov.u32 	%r3643, %r3599;
	mov.u32 	%r3644, %r3599;
	mov.u32 	%r3645, %r3599;
	mov.u32 	%r3646, %r3599;
	mov.u32 	%r3647, %r3599;
	@%p217 bra 	$L__BB0_185;
	bra.uni 	$L__BB0_139;
$L__BB0_185:                            // %oksrem3776
                                        //   in Loop: Header=BB0_138 Depth=1
	cvt.s16.s8 	%rs95, %rs2;
	mul.lo.s16 	%rs96, %rs95, 43;
	shr.u16 	%rs97, %rs96, 15;
	shr.s16 	%rs98, %rs96, 10;
	add.s16 	%rs99, %rs98, %rs97;
	mul.lo.s16 	%rs100, %rs99, 24;
	sub.s16 	%rs101, %rs2, %rs100;
	cvt.u32.u16 	%r1076, %rs101;
	cvt.s32.s8 	%r1077, %r1076;
	mul.wide.s32 	%rd220, %r1077, 4;
	add.s64 	%rd221, %rd14, %rd220;
	ld.shared.u32 	%r3624, [%rd221];
	ld.shared.u32 	%r3625, [%rd14+4];
	ld.shared.u32 	%r3626, [%rd14+8];
	ld.shared.u32 	%r3627, [%rd14+12];
	ld.shared.u32 	%r3628, [%rd14+16];
	ld.shared.u32 	%r3629, [%rd14+20];
	ld.shared.u32 	%r3630, [%rd14+24];
	ld.shared.u32 	%r3631, [%rd14+28];
	ld.shared.u32 	%r3632, [%rd14+32];
	ld.shared.u32 	%r3633, [%rd14+36];
	ld.shared.u32 	%r3634, [%rd14+40];
	ld.shared.u32 	%r3635, [%rd14+44];
	ld.shared.u32 	%r3636, [%rd14+48];
	ld.shared.u32 	%r3637, [%rd14+52];
	ld.shared.u32 	%r3638, [%rd14+56];
	ld.shared.u32 	%r3639, [%rd14+60];
	add.s16 	%rs102, %rs2, 16;
	cvt.s16.s8 	%rs103, %rs102;
	mul.lo.s16 	%rs104, %rs103, 43;
	shr.u16 	%rs105, %rs104, 15;
	shr.s16 	%rs106, %rs104, 10;
	add.s16 	%rs107, %rs106, %rs105;
	mul.lo.s16 	%rs108, %rs107, 24;
	sub.s16 	%rs109, %rs102, %rs108;
	cvt.u32.u16 	%r1078, %rs109;
	cvt.s32.s8 	%r1079, %r1078;
	mul.wide.s32 	%rd222, %r1079, 4;
	add.s64 	%rd223, %rd14, %rd222;
	ld.shared.u32 	%r3640, [%rd223];
	add.s16 	%rs110, %rs2, 17;
	cvt.s16.s8 	%rs111, %rs110;
	mul.lo.s16 	%rs112, %rs111, 43;
	shr.u16 	%rs113, %rs112, 15;
	shr.s16 	%rs114, %rs112, 10;
	add.s16 	%rs115, %rs114, %rs113;
	mul.lo.s16 	%rs116, %rs115, 24;
	sub.s16 	%rs117, %rs110, %rs116;
	cvt.u32.u16 	%r1080, %rs117;
	cvt.s32.s8 	%r1081, %r1080;
	mul.wide.s32 	%rd224, %r1081, 4;
	add.s64 	%rd225, %rd14, %rd224;
	ld.shared.u32 	%r3641, [%rd225];
	add.s16 	%rs118, %rs2, 18;
	cvt.s16.s8 	%rs119, %rs118;
	mul.lo.s16 	%rs120, %rs119, 43;
	shr.u16 	%rs121, %rs120, 15;
	shr.s16 	%rs122, %rs120, 10;
	add.s16 	%rs123, %rs122, %rs121;
	mul.lo.s16 	%rs124, %rs123, 24;
	sub.s16 	%rs125, %rs118, %rs124;
	cvt.u32.u16 	%r1082, %rs125;
	cvt.s32.s8 	%r1083, %r1082;
	mul.wide.s32 	%rd226, %r1083, 4;
	add.s64 	%rd227, %rd14, %rd226;
	ld.shared.u32 	%r3642, [%rd227];
	add.s16 	%rs126, %rs2, 19;
	cvt.s16.s8 	%rs127, %rs126;
	mul.lo.s16 	%rs128, %rs127, 43;
	shr.u16 	%rs129, %rs128, 15;
	shr.s16 	%rs130, %rs128, 10;
	add.s16 	%rs131, %rs130, %rs129;
	mul.lo.s16 	%rs132, %rs131, 24;
	sub.s16 	%rs133, %rs126, %rs132;
	cvt.u32.u16 	%r1084, %rs133;
	cvt.s32.s8 	%r1085, %r1084;
	mul.wide.s32 	%rd228, %r1085, 4;
	add.s64 	%rd229, %rd14, %rd228;
	ld.shared.u32 	%r3643, [%rd229];
	add.s16 	%rs134, %rs2, 20;
	cvt.s16.s8 	%rs135, %rs134;
	mul.lo.s16 	%rs136, %rs135, 43;
	shr.u16 	%rs137, %rs136, 15;
	shr.s16 	%rs138, %rs136, 10;
	add.s16 	%rs139, %rs138, %rs137;
	mul.lo.s16 	%rs140, %rs139, 24;
	sub.s16 	%rs141, %rs134, %rs140;
	cvt.u32.u16 	%r1086, %rs141;
	cvt.s32.s8 	%r1087, %r1086;
	mul.wide.s32 	%rd230, %r1087, 4;
	add.s64 	%rd231, %rd14, %rd230;
	ld.shared.u32 	%r3644, [%rd231];
	add.s16 	%rs142, %rs2, 21;
	cvt.s16.s8 	%rs143, %rs142;
	mul.lo.s16 	%rs144, %rs143, 43;
	shr.u16 	%rs145, %rs144, 15;
	shr.s16 	%rs146, %rs144, 10;
	add.s16 	%rs147, %rs146, %rs145;
	mul.lo.s16 	%rs148, %rs147, 24;
	sub.s16 	%rs149, %rs142, %rs148;
	cvt.u32.u16 	%r1088, %rs149;
	cvt.s32.s8 	%r1089, %r1088;
	mul.wide.s32 	%rd232, %r1089, 4;
	add.s64 	%rd233, %rd14, %rd232;
	ld.shared.u32 	%r3645, [%rd233];
	add.s16 	%rs150, %rs2, 22;
	cvt.s16.s8 	%rs151, %rs150;
	mul.lo.s16 	%rs152, %rs151, 43;
	shr.u16 	%rs153, %rs152, 15;
	shr.s16 	%rs154, %rs152, 10;
	add.s16 	%rs155, %rs154, %rs153;
	mul.lo.s16 	%rs156, %rs155, 24;
	sub.s16 	%rs157, %rs150, %rs156;
	cvt.u32.u16 	%r1090, %rs157;
	cvt.s32.s8 	%r1091, %r1090;
	mul.wide.s32 	%rd234, %r1091, 4;
	add.s64 	%rd235, %rd14, %rd234;
	ld.shared.u32 	%r3646, [%rd235];
	add.s16 	%rs158, %rs2, 23;
	cvt.s16.s8 	%rs159, %rs158;
	mul.lo.s16 	%rs160, %rs159, 43;
	shr.u16 	%rs161, %rs160, 15;
	shr.s16 	%rs162, %rs160, 10;
	add.s16 	%rs163, %rs162, %rs161;
	mul.lo.s16 	%rs164, %rs163, 24;
	sub.s16 	%rs165, %rs158, %rs164;
	cvt.u32.u16 	%r1092, %rs165;
	cvt.s32.s8 	%r1093, %r1092;
	mul.wide.s32 	%rd236, %r1093, 4;
	add.s64 	%rd237, %rd14, %rd236;
	ld.shared.u32 	%r3647, [%rd237];
$L__BB0_139:                            // %L11134
                                        //   in Loop: Header=BB0_138 Depth=1
	bar.sync 	0;
	mov.u32 	%r3648, 12;
	bra.uni 	$L__BB0_140;
$L__BB0_146:                            // %L20730
                                        //   in Loop: Header=BB0_140 Depth=2
	add.s32 	%r3650, %r3650, 1;
	mov.u32 	%r3649, 0;
	mov.u32 	%r3651, %r3649;
	mov.u32 	%r3652, %r3649;
$L__BB0_147:                            // %L20731
                                        //   in Loop: Header=BB0_140 Depth=2
	bar.sync 	0;
	add.s32 	%r3648, %r3648, -4;
	setp.ne.s32 	%p230, %r3648, -12;
	@%p230 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_148;
$L__BB0_140:                            // %L11160
                                        //   Parent Loop BB0_138 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p219, %r3648, 12;
	selp.b32 	%r1632, %r3624, 0, %p219;
	setp.eq.s32 	%p220, %r3648, 8;
	selp.b32 	%r1633, %r3628, %r1632, %p220;
	setp.eq.s32 	%p221, %r3648, 4;
	selp.b32 	%r1634, %r3632, %r1633, %p221;
	setp.eq.s32 	%p222, %r3648, 0;
	selp.b32 	%r1635, %r3636, %r1634, %p222;
	setp.eq.s32 	%p223, %r3648, -4;
	selp.b32 	%r1636, %r3640, %r1635, %p223;
	setp.eq.s32 	%p224, %r3648, -8;
	selp.b32 	%r1637, %r3644, %r1636, %p224;
	selp.b32 	%r1638, %r3625, 0, %p219;
	selp.b32 	%r1639, %r3629, %r1638, %p220;
	selp.b32 	%r1640, %r3633, %r1639, %p221;
	selp.b32 	%r1641, %r3637, %r1640, %p222;
	selp.b32 	%r1642, %r3641, %r1641, %p223;
	selp.b32 	%r1643, %r3645, %r1642, %p224;
	selp.b32 	%r1644, %r3626, 0, %p219;
	selp.b32 	%r1645, %r3630, %r1644, %p220;
	selp.b32 	%r1646, %r3634, %r1645, %p221;
	selp.b32 	%r1647, %r3638, %r1646, %p222;
	selp.b32 	%r1648, %r3642, %r1647, %p223;
	selp.b32 	%r1649, %r3646, %r1648, %p224;
	selp.b32 	%r1650, %r3627, 0, %p219;
	selp.b32 	%r1651, %r3631, %r1650, %p220;
	selp.b32 	%r1652, %r3635, %r1651, %p221;
	selp.b32 	%r1653, %r3639, %r1652, %p222;
	selp.b32 	%r1654, %r3643, %r1653, %p223;
	selp.b32 	%r1655, %r3647, %r1654, %p224;
	mov.u16 	%rs203, 25600;
	// begin inline asm
	mov.b32 %r1100, {%rs203, %rs203};
	// end inline asm
	mov.u16 	%rs205, 21504;
	// begin inline asm
	mov.b32 %r1111, {%rs205, %rs205};
	// end inline asm
	xor.b32  	%r1099, %r1637, -2004318072;
	mov.u32 	%r1236, 983055;
	// begin inline asm
	lop3.b32 %r1097, %r1236, %r1099, %r1100, 202;
	// end inline asm
	mov.u16 	%rs209, 18432;
	// begin inline asm
	mov.b32 %r1101, {%rs209, %rs209};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1102, %r1100, %r1101;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1105, %r1097, %r1102;
	// end inline asm
	mov.u32 	%r1247, 15728880;
	// begin inline asm
	lop3.b32 %r1108, %r1247, %r1099, %r1111, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1112, {%rs209, %rs209};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1113, %r1111, %r1112;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1116, %r1108, %r1113;
	// end inline asm
	// begin inline asm
	mov.b32 %r1146, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	mov.b32 %r1157, {%rs205, %rs205};
	// end inline asm
	xor.b32  	%r1145, %r1643, -2004318072;
	// begin inline asm
	lop3.b32 %r1143, %r1236, %r1145, %r1146, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1147, {%rs209, %rs209};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1148, %r1146, %r1147;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1151, %r1143, %r1148;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1154, %r1247, %r1145, %r1157, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1158, {%rs209, %rs209};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1159, %r1157, %r1158;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1162, %r1154, %r1159;
	// end inline asm
	// begin inline asm
	mov.b32 %r1192, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	mov.b32 %r1203, {%rs205, %rs205};
	// end inline asm
	xor.b32  	%r1191, %r1649, -2004318072;
	// begin inline asm
	lop3.b32 %r1189, %r1236, %r1191, %r1192, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1193, {%rs209, %rs209};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1194, %r1192, %r1193;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1197, %r1189, %r1194;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1200, %r1247, %r1191, %r1203, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1204, {%rs209, %rs209};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1205, %r1203, %r1204;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1208, %r1200, %r1205;
	// end inline asm
	// begin inline asm
	mov.b32 %r1238, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	mov.b32 %r1249, {%rs205, %rs205};
	// end inline asm
	xor.b32  	%r1237, %r1655, -2004318072;
	// begin inline asm
	lop3.b32 %r1235, %r1236, %r1237, %r1238, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1239, {%rs209, %rs209};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1240, %r1238, %r1239;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1243, %r1235, %r1240;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1246, %r1247, %r1237, %r1249, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1250, {%rs209, %rs209};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1251, %r1249, %r1250;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1254, %r1246, %r1251;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3617;
    mov.b32 {%r2re, %r2im}, %r1105;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1279, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3618;
    mov.b32 {%r2re, %r2im}, %r1116;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1282, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3617;
    mov.b32 {%r2re, %r2im}, %r1151;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1285, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3618;
    mov.b32 {%r2re, %r2im}, %r1162;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1288, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3617;
    mov.b32 {%r2re, %r2im}, %r1197;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1291, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3618;
    mov.b32 {%r2re, %r2im}, %r1208;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1294, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3617;
    mov.b32 {%r2re, %r2im}, %r1243;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1297, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3618;
    mov.b32 {%r2re, %r2im}, %r1254;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1300, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1631, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1366, %r1363}, {%r317, %r320}, {%r1279}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1375, %r1372}, {%r317, %r320}, {%r1282}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1384, %r1381}, {%r317, %r320}, {%r1285}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1393, %r1390}, {%r317, %r320}, {%r1288}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1402, %r1399}, {%r317, %r320}, {%r1291}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1411, %r1408}, {%r317, %r320}, {%r1294}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1420, %r1417}, {%r317, %r320}, {%r1297}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1429, %r1426}, {%r317, %r320}, {%r1300}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1359, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1361, %r1359, %r1363;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1364, %r369, %r1366, %r1361;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1368, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1370, %r1368, %r1372;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1373, %r369, %r1375, %r1370;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1377, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1379, %r1377, %r1381;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1382, %r369, %r1384, %r1379;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1386, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1388, %r1386, %r1390;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1391, %r369, %r1393, %r1388;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1395, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1397, %r1395, %r1399;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1400, %r369, %r1402, %r1397;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1404, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1406, %r1404, %r1408;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1409, %r369, %r1411, %r1406;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1413, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1415, %r1413, %r1417;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1418, %r369, %r1420, %r1415;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1422, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1424, %r1422, %r1426;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1427, %r369, %r1429, %r1424;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1431, %r372, %r1366;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1434, %r369, %r1363, %r1431;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1438, %r372, %r1375;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1441, %r369, %r1372, %r1438;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1445, %r372, %r1384;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1448, %r369, %r1381, %r1445;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1452, %r372, %r1393;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1455, %r369, %r1390, %r1452;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1459, %r372, %r1402;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1462, %r369, %r1399, %r1459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1466, %r372, %r1411;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1469, %r369, %r1408, %r1466;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1473, %r372, %r1420;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1476, %r369, %r1417, %r1473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1480, %r372, %r1429;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1483, %r369, %r1426, %r1480;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1568, %r1569}, {%r413, %r419, %r416, %r422}, {%r1364, %r1434}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1576, %r1577}, {%r413, %r419, %r416, %r422}, {%r1373, %r1441}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1584, %r1585}, {%r413, %r419, %r416, %r422}, {%r1382, %r1448}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1592, %r1593}, {%r413, %r419, %r416, %r422}, {%r1391, %r1455}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1600, %r1601}, {%r413, %r419, %r416, %r422}, {%r1400, %r1462}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1608, %r1609}, {%r413, %r419, %r416, %r422}, {%r1409, %r1469}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1616, %r1617}, {%r413, %r419, %r416, %r422}, {%r1418, %r1476}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1624, %r1625}, {%r413, %r419, %r416, %r422}, {%r1427, %r1483}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	prmt.b32 %r1567, %r1568, %r1569, %r912;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1571, %r1568, %r1569, %r916;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1575, %r1576, %r1577, %r912;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1579, %r1576, %r1577, %r916;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1583, %r1584, %r1585, %r912;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1587, %r1584, %r1585, %r916;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1591, %r1592, %r1593, %r912;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1595, %r1592, %r1593, %r916;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1599, %r1600, %r1601, %r912;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1603, %r1600, %r1601, %r916;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1607, %r1608, %r1609, %r912;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1611, %r1608, %r1609, %r916;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1615, %r1616, %r1617, %r912;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1619, %r1616, %r1617, %r916;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1623, %r1624, %r1625, %r912;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1627, %r1624, %r1625, %r916;
	// end inline asm
	st.shared.u32 	[%rd6], %r1567;
	st.shared.u32 	[%rd7], %r1571;
	st.shared.u32 	[%rd8], %r1575;
	st.shared.u32 	[%rd9], %r1579;
	st.shared.u32 	[%rd15], %r1583;
	st.shared.u32 	[%rd16], %r1587;
	st.shared.u32 	[%rd17], %r1591;
	st.shared.u32 	[%rd18], %r1595;
	st.shared.u32 	[%rd19], %r1599;
	st.shared.u32 	[%rd20], %r1603;
	st.shared.u32 	[%rd21], %r1607;
	st.shared.u32 	[%rd22], %r1611;
	st.shared.u32 	[%rd23], %r1615;
	st.shared.u32 	[%rd24], %r1619;
	st.shared.u32 	[%rd25], %r1623;
	st.shared.u32 	[%rd26], %r1627;
	bar.sync 	0;
	mov.u32 	%r3653, %r1631;
	mov.u32 	%r3654, %r1631;
	mov.u32 	%r3655, %r1631;
	mov.u32 	%r3656, %r1631;
	@%p217 bra 	$L__BB0_186;
	bra.uni 	$L__BB0_141;
$L__BB0_186:                            // %pass7417
                                        //   in Loop: Header=BB0_140 Depth=2
	ld.shared.u32 	%r3653, [%rd10];
	ld.shared.u32 	%r3654, [%rd11];
	ld.shared.u32 	%r3655, [%rd12];
	ld.shared.u32 	%r3656, [%rd13];
$L__BB0_141:                            // %L16665
                                        //   in Loop: Header=BB0_140 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1691, %r1688}, {%r431, %r434}, {%r3653}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1700, %r1697}, {%r431, %r434}, {%r3654}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1709, %r1706}, {%r431, %r434}, {%r3655}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1718, %r1715}, {%r431, %r434}, {%r3656}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1684, %r486;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1686, %r1684, %r1688;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1689, %r483, %r1691, %r1686;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1693, %r486;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1695, %r1693, %r1697;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1698, %r483, %r1700, %r1695;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1702, %r486;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1704, %r1702, %r1706;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1707, %r483, %r1709, %r1704;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1711, %r486;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1713, %r1711, %r1715;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1716, %r483, %r1718, %r1713;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1720, %r486, %r1691;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1723, %r483, %r1688, %r1720;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1727, %r486, %r1700;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1730, %r483, %r1697, %r1727;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1734, %r486, %r1709;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1737, %r483, %r1706, %r1734;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1741, %r486, %r1718;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1744, %r483, %r1715, %r1741;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1789, %r1792}, {%r527, %r533, %r530, %r536}, {%r1689, %r1723}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1808, %r1811}, {%r527, %r533, %r530, %r536}, {%r1698, %r1730}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1796, %r1800}, {%r527, %r533, %r530, %r536}, {%r1707, %r1737}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1815, %r1819}, {%r527, %r533, %r530, %r536}, {%r1716, %r1744}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1788, %r1789, %r1789;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1791, %r1792, %r1792, %r1788;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1795, %r1796, %r1796, %r1791;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1799, %r1800, %r1800, %r1795;
	// end inline asm
	mov.u32 	%r1823, 442899046;
	// begin inline asm
	fma.rn.f16x2 %r1803, %r1823, %r1799, %r3652;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1807, %r1808, %r1808;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1810, %r1811, %r1811, %r1807;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1814, %r1815, %r1815, %r1810;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1818, %r1819, %r1819, %r1814;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1822, %r1823, %r1818, %r3651;
	// end inline asm
	mov.u32 	%r3657, %r1631;
	mov.u32 	%r3658, %r1631;
	mov.u32 	%r3659, %r1631;
	mov.u32 	%r3660, %r1631;
	@%p217 bra 	$L__BB0_187;
	bra.uni 	$L__BB0_142;
$L__BB0_187:                            // %pass8022
                                        //   in Loop: Header=BB0_140 Depth=2
	ld.shared.u32 	%r3657, [%rd27];
	ld.shared.u32 	%r3658, [%rd28];
	ld.shared.u32 	%r3659, [%rd29];
	ld.shared.u32 	%r3660, [%rd30];
$L__BB0_142:                            // %L17872
                                        //   in Loop: Header=BB0_140 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1862, %r1859}, {%r431, %r434}, {%r3657}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1871, %r1868}, {%r431, %r434}, {%r3658}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1880, %r1877}, {%r431, %r434}, {%r3659}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1889, %r1886}, {%r431, %r434}, {%r3660}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1855, %r486;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1857, %r1855, %r1859;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1860, %r483, %r1862, %r1857;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1864, %r486;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1866, %r1864, %r1868;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1869, %r483, %r1871, %r1866;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1873, %r486;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1875, %r1873, %r1877;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1878, %r483, %r1880, %r1875;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1882, %r486;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1884, %r1882, %r1886;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1887, %r483, %r1889, %r1884;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1891, %r486, %r1862;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1894, %r483, %r1859, %r1891;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1898, %r486, %r1871;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1901, %r483, %r1868, %r1898;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1905, %r486, %r1880;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1908, %r483, %r1877, %r1905;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1912, %r486, %r1889;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1915, %r483, %r1886, %r1912;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1960, %r1963}, {%r527, %r533, %r530, %r536}, {%r1860, %r1894}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1979, %r1982}, {%r527, %r533, %r530, %r536}, {%r1869, %r1901}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1967, %r1971}, {%r527, %r533, %r530, %r536}, {%r1878, %r1908}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1986, %r1990}, {%r527, %r533, %r530, %r536}, {%r1887, %r1915}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1959, %r1960, %r1960;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1962, %r1963, %r1963, %r1959;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1966, %r1967, %r1967, %r1962;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1970, %r1971, %r1971, %r1966;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1974, %r1823, %r1970, %r1803;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1978, %r1979, %r1979;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1981, %r1982, %r1982, %r1978;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1985, %r1986, %r1986, %r1981;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1989, %r1990, %r1990, %r1985;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1993, %r1823, %r1989, %r1822;
	// end inline asm
	mov.u32 	%r3661, %r1631;
	mov.u32 	%r3662, %r1631;
	mov.u32 	%r3663, %r1631;
	mov.u32 	%r3664, %r1631;
	@%p217 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_143;
$L__BB0_188:                            // %pass8627
                                        //   in Loop: Header=BB0_140 Depth=2
	ld.shared.u32 	%r3661, [%rd31];
	ld.shared.u32 	%r3662, [%rd32];
	ld.shared.u32 	%r3663, [%rd33];
	ld.shared.u32 	%r3664, [%rd34];
$L__BB0_143:                            // %L19079
                                        //   in Loop: Header=BB0_140 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2033, %r2030}, {%r431, %r434}, {%r3661}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2042, %r2039}, {%r431, %r434}, {%r3662}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2051, %r2048}, {%r431, %r434}, {%r3663}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2060, %r2057}, {%r431, %r434}, {%r3664}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2026, %r486;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2028, %r2026, %r2030;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2031, %r483, %r2033, %r2028;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2035, %r486;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2037, %r2035, %r2039;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2040, %r483, %r2042, %r2037;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2044, %r486;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2046, %r2044, %r2048;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2049, %r483, %r2051, %r2046;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2053, %r486;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2055, %r2053, %r2057;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2058, %r483, %r2060, %r2055;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2062, %r486, %r2033;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2065, %r483, %r2030, %r2062;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2069, %r486, %r2042;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2072, %r483, %r2039, %r2069;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2076, %r486, %r2051;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2079, %r483, %r2048, %r2076;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2083, %r486, %r2060;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2086, %r483, %r2057, %r2083;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2131, %r2134}, {%r527, %r533, %r530, %r536}, {%r2031, %r2065}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2150, %r2153}, {%r527, %r533, %r530, %r536}, {%r2040, %r2072}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2138, %r2142}, {%r527, %r533, %r530, %r536}, {%r2049, %r2079}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2157, %r2161}, {%r527, %r533, %r530, %r536}, {%r2058, %r2086}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2130, %r2131, %r2131;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2133, %r2134, %r2134, %r2130;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2137, %r2138, %r2138, %r2133;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2141, %r2142, %r2142, %r2137;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2145, %r1823, %r2141, %r1974;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2149, %r2150, %r2150;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2152, %r2153, %r2153, %r2149;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2156, %r2157, %r2157, %r2152;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2160, %r2161, %r2161, %r2156;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2164, %r1823, %r2160, %r1993;
	// end inline asm
	mov.u32 	%r3665, %r1631;
	mov.u32 	%r3666, %r1631;
	mov.u32 	%r3667, %r1631;
	mov.u32 	%r3668, %r1631;
	@%p217 bra 	$L__BB0_189;
	bra.uni 	$L__BB0_144;
$L__BB0_189:                            // %pass9232
                                        //   in Loop: Header=BB0_140 Depth=2
	ld.shared.u32 	%r3665, [%rd35];
	ld.shared.u32 	%r3666, [%rd36];
	ld.shared.u32 	%r3667, [%rd37];
	ld.shared.u32 	%r3668, [%rd38];
$L__BB0_144:                            // %L20286
                                        //   in Loop: Header=BB0_140 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2204, %r2201}, {%r431, %r434}, {%r3665}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2213, %r2210}, {%r431, %r434}, {%r3666}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2222, %r2219}, {%r431, %r434}, {%r3667}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2231, %r2228}, {%r431, %r434}, {%r3668}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2197, %r486;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2199, %r2197, %r2201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2202, %r483, %r2204, %r2199;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2206, %r486;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2208, %r2206, %r2210;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2211, %r483, %r2213, %r2208;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2215, %r486;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2217, %r2215, %r2219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2220, %r483, %r2222, %r2217;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2224, %r486;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2226, %r2224, %r2228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2229, %r483, %r2231, %r2226;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2233, %r486, %r2204;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2236, %r483, %r2201, %r2233;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2240, %r486, %r2213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2243, %r483, %r2210, %r2240;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2247, %r486, %r2222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2250, %r483, %r2219, %r2247;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2254, %r486, %r2231;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2257, %r483, %r2228, %r2254;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2302, %r2305}, {%r527, %r533, %r530, %r536}, {%r2202, %r2236}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2321, %r2324}, {%r527, %r533, %r530, %r536}, {%r2211, %r2243}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2309, %r2313}, {%r527, %r533, %r530, %r536}, {%r2220, %r2250}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2328, %r2332}, {%r527, %r533, %r530, %r536}, {%r2229, %r2257}, {%r1631, %r1631};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2301, %r2302, %r2302;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2304, %r2305, %r2305, %r2301;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2308, %r2309, %r2309, %r2304;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2312, %r2313, %r2313, %r2308;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3652, %r1823, %r2312, %r2145;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2320, %r2321, %r2321;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2323, %r2324, %r2324, %r2320;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2327, %r2328, %r2328, %r2323;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2331, %r2332, %r2332, %r2327;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3651, %r1823, %r2331, %r2164;
	// end inline asm
	add.s32 	%r3649, %r3649, 4;
	setp.ne.s32 	%p228, %r3649, 40;
	@%p228 bra 	$L__BB0_147;
// %bb.145:                             // %L20436
                                        //   in Loop: Header=BB0_140 Depth=2
	@%p217 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_146;
$L__BB0_190:                            // %pass9716
                                        //   in Loop: Header=BB0_140 Depth=2
	mul.lo.s32 	%r2339, %r3650, 1152;
	add.s32 	%r2340, %r114, %r2339;
	mul.wide.u32 	%rd238, %r2340, 4;
	add.s64 	%rd239, %rd4, %rd238;
	st.global.u32 	[%rd239], %r3652;
	add.s32 	%r2341, %r115, %r2339;
	mul.wide.u32 	%rd240, %r2341, 4;
	add.s64 	%rd241, %rd4, %rd240;
	st.global.u32 	[%rd241], %r3651;
	bra.uni 	$L__BB0_146;
$L__BB0_148:                            // %L20756.preheader
                                        //   in Loop: Header=BB0_138 Depth=1
	mov.u32 	%r3673, 12;
	bra.uni 	$L__BB0_149;
$L__BB0_155:                            // %L30326
                                        //   in Loop: Header=BB0_149 Depth=2
	add.s32 	%r3650, %r3650, 1;
	mov.u32 	%r3649, 0;
	mov.u32 	%r3651, %r3649;
	mov.u32 	%r3652, %r3649;
$L__BB0_156:                            // %L30327
                                        //   in Loop: Header=BB0_149 Depth=2
	bar.sync 	0;
	add.s32 	%r3673, %r3673, -4;
	setp.ne.s32 	%p243, %r3673, -12;
	@%p243 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_157;
$L__BB0_149:                            // %L20756
                                        //   Parent Loop BB0_138 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p232, %r3673, 12;
	selp.b32 	%r2881, %r3624, 0, %p232;
	setp.eq.s32 	%p233, %r3673, 8;
	selp.b32 	%r2882, %r3628, %r2881, %p233;
	setp.eq.s32 	%p234, %r3673, 4;
	selp.b32 	%r2883, %r3632, %r2882, %p234;
	setp.eq.s32 	%p235, %r3673, 0;
	selp.b32 	%r2884, %r3636, %r2883, %p235;
	setp.eq.s32 	%p236, %r3673, -4;
	selp.b32 	%r2885, %r3640, %r2884, %p236;
	setp.eq.s32 	%p237, %r3673, -8;
	selp.b32 	%r2886, %r3644, %r2885, %p237;
	selp.b32 	%r2887, %r3625, 0, %p232;
	selp.b32 	%r2888, %r3629, %r2887, %p233;
	selp.b32 	%r2889, %r3633, %r2888, %p234;
	selp.b32 	%r2890, %r3637, %r2889, %p235;
	selp.b32 	%r2891, %r3641, %r2890, %p236;
	selp.b32 	%r2892, %r3645, %r2891, %p237;
	selp.b32 	%r2893, %r3626, 0, %p232;
	selp.b32 	%r2894, %r3630, %r2893, %p233;
	selp.b32 	%r2895, %r3634, %r2894, %p234;
	selp.b32 	%r2896, %r3638, %r2895, %p235;
	selp.b32 	%r2897, %r3642, %r2896, %p236;
	selp.b32 	%r2898, %r3646, %r2897, %p237;
	selp.b32 	%r2899, %r3627, 0, %p232;
	selp.b32 	%r2900, %r3631, %r2899, %p233;
	selp.b32 	%r2901, %r3635, %r2900, %p234;
	selp.b32 	%r2902, %r3639, %r2901, %p235;
	selp.b32 	%r2903, %r3643, %r2902, %p236;
	selp.b32 	%r2904, %r3647, %r2903, %p237;
	// begin inline asm
	mov.b32 %r2371, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	mov.b32 %r2382, {%rs205, %rs205};
	// end inline asm
	shr.u32 	%r2905, %r2886, 8;
	xor.b32  	%r2381, %r2905, 8947848;
	// begin inline asm
	lop3.b32 %r2368, %r1236, %r2381, %r2371, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2372, {%rs209, %rs209};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2373, %r2371, %r2372;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2376, %r2368, %r2373;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2379, %r1247, %r2381, %r2382, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2383, {%rs209, %rs209};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2384, %r2382, %r2383;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2387, %r2379, %r2384;
	// end inline asm
	// begin inline asm
	mov.b32 %r2417, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	mov.b32 %r2428, {%rs205, %rs205};
	// end inline asm
	shr.u32 	%r2906, %r2892, 8;
	xor.b32  	%r2427, %r2906, 8947848;
	// begin inline asm
	lop3.b32 %r2414, %r1236, %r2427, %r2417, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2418, {%rs209, %rs209};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2419, %r2417, %r2418;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2422, %r2414, %r2419;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2425, %r1247, %r2427, %r2428, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2429, {%rs209, %rs209};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2430, %r2428, %r2429;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2433, %r2425, %r2430;
	// end inline asm
	// begin inline asm
	mov.b32 %r2463, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	mov.b32 %r2474, {%rs205, %rs205};
	// end inline asm
	shr.u32 	%r2907, %r2898, 8;
	xor.b32  	%r2473, %r2907, 8947848;
	// begin inline asm
	lop3.b32 %r2460, %r1236, %r2473, %r2463, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2464, {%rs209, %rs209};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2465, %r2463, %r2464;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2468, %r2460, %r2465;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2471, %r1247, %r2473, %r2474, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2475, {%rs209, %rs209};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2476, %r2474, %r2475;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2479, %r2471, %r2476;
	// end inline asm
	// begin inline asm
	mov.b32 %r2509, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	mov.b32 %r2520, {%rs205, %rs205};
	// end inline asm
	shr.u32 	%r2908, %r2904, 8;
	xor.b32  	%r2519, %r2908, 8947848;
	// begin inline asm
	lop3.b32 %r2506, %r1236, %r2519, %r2509, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2510, {%rs209, %rs209};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2511, %r2509, %r2510;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2514, %r2506, %r2511;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2517, %r1247, %r2519, %r2520, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2521, {%rs209, %rs209};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2522, %r2520, %r2521;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2525, %r2517, %r2522;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3617;
    mov.b32 {%r2re, %r2im}, %r2376;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2528, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3618;
    mov.b32 {%r2re, %r2im}, %r2387;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2531, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3617;
    mov.b32 {%r2re, %r2im}, %r2422;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2534, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3618;
    mov.b32 {%r2re, %r2im}, %r2433;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2537, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3617;
    mov.b32 {%r2re, %r2im}, %r2468;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2540, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3618;
    mov.b32 {%r2re, %r2im}, %r2479;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2543, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3617;
    mov.b32 {%r2re, %r2im}, %r2514;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2546, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3618;
    mov.b32 {%r2re, %r2im}, %r2525;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2549, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r2880, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2615, %r2612}, {%r317, %r320}, {%r2528}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2624, %r2621}, {%r317, %r320}, {%r2531}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2633, %r2630}, {%r317, %r320}, {%r2534}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2642, %r2639}, {%r317, %r320}, {%r2537}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2651, %r2648}, {%r317, %r320}, {%r2540}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2660, %r2657}, {%r317, %r320}, {%r2543}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2669, %r2666}, {%r317, %r320}, {%r2546}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2678, %r2675}, {%r317, %r320}, {%r2549}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2608, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2610, %r2608, %r2612;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2613, %r369, %r2615, %r2610;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2617, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2619, %r2617, %r2621;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2622, %r369, %r2624, %r2619;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2626, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2628, %r2626, %r2630;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2631, %r369, %r2633, %r2628;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2635, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2637, %r2635, %r2639;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2640, %r369, %r2642, %r2637;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2644, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2646, %r2644, %r2648;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2649, %r369, %r2651, %r2646;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2653, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2655, %r2653, %r2657;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2658, %r369, %r2660, %r2655;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2662, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2664, %r2662, %r2666;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2667, %r369, %r2669, %r2664;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2671, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2673, %r2671, %r2675;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2676, %r369, %r2678, %r2673;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2680, %r372, %r2615;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2683, %r369, %r2612, %r2680;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2687, %r372, %r2624;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2690, %r369, %r2621, %r2687;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2694, %r372, %r2633;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2697, %r369, %r2630, %r2694;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2701, %r372, %r2642;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2704, %r369, %r2639, %r2701;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2708, %r372, %r2651;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2711, %r369, %r2648, %r2708;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2715, %r372, %r2660;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2718, %r369, %r2657, %r2715;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2722, %r372, %r2669;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2725, %r369, %r2666, %r2722;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2729, %r372, %r2678;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2732, %r369, %r2675, %r2729;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2817, %r2818}, {%r413, %r419, %r416, %r422}, {%r2613, %r2683}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2825, %r2826}, {%r413, %r419, %r416, %r422}, {%r2622, %r2690}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2833, %r2834}, {%r413, %r419, %r416, %r422}, {%r2631, %r2697}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2841, %r2842}, {%r413, %r419, %r416, %r422}, {%r2640, %r2704}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2849, %r2850}, {%r413, %r419, %r416, %r422}, {%r2649, %r2711}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2857, %r2858}, {%r413, %r419, %r416, %r422}, {%r2658, %r2718}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2865, %r2866}, {%r413, %r419, %r416, %r422}, {%r2667, %r2725}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2873, %r2874}, {%r413, %r419, %r416, %r422}, {%r2676, %r2732}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	prmt.b32 %r2816, %r2817, %r2818, %r912;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2820, %r2817, %r2818, %r916;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2824, %r2825, %r2826, %r912;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2828, %r2825, %r2826, %r916;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2832, %r2833, %r2834, %r912;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2836, %r2833, %r2834, %r916;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2840, %r2841, %r2842, %r912;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2844, %r2841, %r2842, %r916;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2848, %r2849, %r2850, %r912;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2852, %r2849, %r2850, %r916;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2856, %r2857, %r2858, %r912;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2860, %r2857, %r2858, %r916;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2864, %r2865, %r2866, %r912;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2868, %r2865, %r2866, %r916;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2872, %r2873, %r2874, %r912;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2876, %r2873, %r2874, %r916;
	// end inline asm
	st.shared.u32 	[%rd6], %r2816;
	st.shared.u32 	[%rd7], %r2820;
	st.shared.u32 	[%rd8], %r2824;
	st.shared.u32 	[%rd9], %r2828;
	st.shared.u32 	[%rd15], %r2832;
	st.shared.u32 	[%rd16], %r2836;
	st.shared.u32 	[%rd17], %r2840;
	st.shared.u32 	[%rd18], %r2844;
	st.shared.u32 	[%rd19], %r2848;
	st.shared.u32 	[%rd20], %r2852;
	st.shared.u32 	[%rd21], %r2856;
	st.shared.u32 	[%rd22], %r2860;
	st.shared.u32 	[%rd23], %r2864;
	st.shared.u32 	[%rd24], %r2868;
	st.shared.u32 	[%rd25], %r2872;
	st.shared.u32 	[%rd26], %r2876;
	bar.sync 	0;
	mov.u32 	%r3678, %r2880;
	mov.u32 	%r3679, %r2880;
	mov.u32 	%r3680, %r2880;
	mov.u32 	%r3681, %r2880;
	@%p217 bra 	$L__BB0_191;
	bra.uni 	$L__BB0_150;
$L__BB0_191:                            // %pass12107
                                        //   in Loop: Header=BB0_149 Depth=2
	ld.shared.u32 	%r3681, [%rd10];
	ld.shared.u32 	%r3680, [%rd11];
	ld.shared.u32 	%r3679, [%rd12];
	ld.shared.u32 	%r3678, [%rd13];
$L__BB0_150:                            // %L26261
                                        //   in Loop: Header=BB0_149 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2944, %r2941}, {%r431, %r434}, {%r3681}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2953, %r2950}, {%r431, %r434}, {%r3680}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2962, %r2959}, {%r431, %r434}, {%r3679}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2971, %r2968}, {%r431, %r434}, {%r3678}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2937, %r486;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2939, %r2937, %r2941;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2942, %r483, %r2944, %r2939;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2946, %r486;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2948, %r2946, %r2950;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2951, %r483, %r2953, %r2948;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2955, %r486;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2957, %r2955, %r2959;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2960, %r483, %r2962, %r2957;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2964, %r486;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2966, %r2964, %r2968;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2969, %r483, %r2971, %r2966;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2973, %r486, %r2944;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2976, %r483, %r2941, %r2973;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2980, %r486, %r2953;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2983, %r483, %r2950, %r2980;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2987, %r486, %r2962;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2990, %r483, %r2959, %r2987;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2994, %r486, %r2971;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2997, %r483, %r2968, %r2994;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3042, %r3045}, {%r527, %r533, %r530, %r536}, {%r2942, %r2976}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3061, %r3064}, {%r527, %r533, %r530, %r536}, {%r2951, %r2983}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3049, %r3053}, {%r527, %r533, %r530, %r536}, {%r2960, %r2990}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3068, %r3072}, {%r527, %r533, %r530, %r536}, {%r2969, %r2997}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3041, %r3042, %r3042;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3044, %r3045, %r3045, %r3041;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3048, %r3049, %r3049, %r3044;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3052, %r3053, %r3053, %r3048;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3056, %r1823, %r3052, %r3652;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3060, %r3061, %r3061;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3063, %r3064, %r3064, %r3060;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3067, %r3068, %r3068, %r3063;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3071, %r3072, %r3072, %r3067;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3075, %r1823, %r3071, %r3651;
	// end inline asm
	mov.u32 	%r3682, %r2880;
	mov.u32 	%r3683, %r2880;
	mov.u32 	%r3684, %r2880;
	mov.u32 	%r3685, %r2880;
	@%p217 bra 	$L__BB0_192;
	bra.uni 	$L__BB0_151;
$L__BB0_192:                            // %pass12712
                                        //   in Loop: Header=BB0_149 Depth=2
	ld.shared.u32 	%r3685, [%rd27];
	ld.shared.u32 	%r3684, [%rd28];
	ld.shared.u32 	%r3683, [%rd29];
	ld.shared.u32 	%r3682, [%rd30];
$L__BB0_151:                            // %L27468
                                        //   in Loop: Header=BB0_149 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3115, %r3112}, {%r431, %r434}, {%r3685}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3124, %r3121}, {%r431, %r434}, {%r3684}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3133, %r3130}, {%r431, %r434}, {%r3683}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3142, %r3139}, {%r431, %r434}, {%r3682}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3108, %r486;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3110, %r3108, %r3112;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3113, %r483, %r3115, %r3110;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3117, %r486;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3119, %r3117, %r3121;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3122, %r483, %r3124, %r3119;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3126, %r486;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3128, %r3126, %r3130;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3131, %r483, %r3133, %r3128;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3135, %r486;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3137, %r3135, %r3139;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3140, %r483, %r3142, %r3137;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3144, %r486, %r3115;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3147, %r483, %r3112, %r3144;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3151, %r486, %r3124;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3154, %r483, %r3121, %r3151;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3158, %r486, %r3133;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3161, %r483, %r3130, %r3158;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3165, %r486, %r3142;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3168, %r483, %r3139, %r3165;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3213, %r3216}, {%r527, %r533, %r530, %r536}, {%r3113, %r3147}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3232, %r3235}, {%r527, %r533, %r530, %r536}, {%r3122, %r3154}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3220, %r3224}, {%r527, %r533, %r530, %r536}, {%r3131, %r3161}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3239, %r3243}, {%r527, %r533, %r530, %r536}, {%r3140, %r3168}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3212, %r3213, %r3213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3215, %r3216, %r3216, %r3212;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3219, %r3220, %r3220, %r3215;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3223, %r3224, %r3224, %r3219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3227, %r1823, %r3223, %r3056;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3231, %r3232, %r3232;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3234, %r3235, %r3235, %r3231;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3238, %r3239, %r3239, %r3234;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3242, %r3243, %r3243, %r3238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3246, %r1823, %r3242, %r3075;
	// end inline asm
	mov.u32 	%r3686, %r2880;
	mov.u32 	%r3687, %r2880;
	mov.u32 	%r3688, %r2880;
	mov.u32 	%r3689, %r2880;
	@%p217 bra 	$L__BB0_193;
	bra.uni 	$L__BB0_152;
$L__BB0_193:                            // %pass13317
                                        //   in Loop: Header=BB0_149 Depth=2
	ld.shared.u32 	%r3689, [%rd31];
	ld.shared.u32 	%r3688, [%rd32];
	ld.shared.u32 	%r3687, [%rd33];
	ld.shared.u32 	%r3686, [%rd34];
$L__BB0_152:                            // %L28675
                                        //   in Loop: Header=BB0_149 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3286, %r3283}, {%r431, %r434}, {%r3689}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3295, %r3292}, {%r431, %r434}, {%r3688}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3304, %r3301}, {%r431, %r434}, {%r3687}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3313, %r3310}, {%r431, %r434}, {%r3686}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3279, %r486;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3281, %r3279, %r3283;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3284, %r483, %r3286, %r3281;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3288, %r486;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3290, %r3288, %r3292;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3293, %r483, %r3295, %r3290;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3297, %r486;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3299, %r3297, %r3301;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3302, %r483, %r3304, %r3299;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3306, %r486;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3308, %r3306, %r3310;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3311, %r483, %r3313, %r3308;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3315, %r486, %r3286;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3318, %r483, %r3283, %r3315;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3322, %r486, %r3295;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3325, %r483, %r3292, %r3322;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3329, %r486, %r3304;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3332, %r483, %r3301, %r3329;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3336, %r486, %r3313;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3339, %r483, %r3310, %r3336;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3384, %r3387}, {%r527, %r533, %r530, %r536}, {%r3284, %r3318}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3403, %r3406}, {%r527, %r533, %r530, %r536}, {%r3293, %r3325}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3391, %r3395}, {%r527, %r533, %r530, %r536}, {%r3302, %r3332}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3410, %r3414}, {%r527, %r533, %r530, %r536}, {%r3311, %r3339}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3383, %r3384, %r3384;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3386, %r3387, %r3387, %r3383;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3390, %r3391, %r3391, %r3386;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3394, %r3395, %r3395, %r3390;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3398, %r1823, %r3394, %r3227;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3402, %r3403, %r3403;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3405, %r3406, %r3406, %r3402;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3409, %r3410, %r3410, %r3405;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3413, %r3414, %r3414, %r3409;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3417, %r1823, %r3413, %r3246;
	// end inline asm
	mov.u32 	%r3690, %r2880;
	mov.u32 	%r3691, %r2880;
	mov.u32 	%r3692, %r2880;
	mov.u32 	%r3693, %r2880;
	@%p217 bra 	$L__BB0_194;
	bra.uni 	$L__BB0_153;
$L__BB0_194:                            // %pass13922
                                        //   in Loop: Header=BB0_149 Depth=2
	ld.shared.u32 	%r3693, [%rd35];
	ld.shared.u32 	%r3692, [%rd36];
	ld.shared.u32 	%r3691, [%rd37];
	ld.shared.u32 	%r3690, [%rd38];
$L__BB0_153:                            // %L29882
                                        //   in Loop: Header=BB0_149 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3457, %r3454}, {%r431, %r434}, {%r3693}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3466, %r3463}, {%r431, %r434}, {%r3692}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3475, %r3472}, {%r431, %r434}, {%r3691}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3484, %r3481}, {%r431, %r434}, {%r3690}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3450, %r486;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3452, %r3450, %r3454;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3455, %r483, %r3457, %r3452;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3459, %r486;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3461, %r3459, %r3463;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3464, %r483, %r3466, %r3461;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3468, %r486;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3470, %r3468, %r3472;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3473, %r483, %r3475, %r3470;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3477, %r486;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3479, %r3477, %r3481;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3482, %r483, %r3484, %r3479;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3486, %r486, %r3457;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3489, %r483, %r3454, %r3486;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3493, %r486, %r3466;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3496, %r483, %r3463, %r3493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3500, %r486, %r3475;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3503, %r483, %r3472, %r3500;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3507, %r486, %r3484;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3510, %r483, %r3481, %r3507;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3555, %r3558}, {%r527, %r533, %r530, %r536}, {%r3455, %r3489}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3574, %r3577}, {%r527, %r533, %r530, %r536}, {%r3464, %r3496}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3562, %r3566}, {%r527, %r533, %r530, %r536}, {%r3473, %r3503}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3581, %r3585}, {%r527, %r533, %r530, %r536}, {%r3482, %r3510}, {%r2880, %r2880};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3554, %r3555, %r3555;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3557, %r3558, %r3558, %r3554;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3561, %r3562, %r3562, %r3557;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3565, %r3566, %r3566, %r3561;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3652, %r1823, %r3565, %r3398;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3573, %r3574, %r3574;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3576, %r3577, %r3577, %r3573;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3580, %r3581, %r3581, %r3576;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3584, %r3585, %r3585, %r3580;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3651, %r1823, %r3584, %r3417;
	// end inline asm
	add.s32 	%r3649, %r3649, 4;
	setp.ne.s32 	%p241, %r3649, 40;
	@%p241 bra 	$L__BB0_156;
// %bb.154:                             // %L30032
                                        //   in Loop: Header=BB0_149 Depth=2
	@%p217 bra 	$L__BB0_195;
	bra.uni 	$L__BB0_155;
$L__BB0_195:                            // %pass14406
                                        //   in Loop: Header=BB0_149 Depth=2
	mul.lo.s32 	%r3592, %r3650, 1152;
	add.s32 	%r3593, %r114, %r3592;
	mul.wide.u32 	%rd242, %r3593, 4;
	add.s64 	%rd243, %rd4, %rd242;
	st.global.u32 	[%rd243], %r3652;
	add.s32 	%r3594, %r115, %r3592;
	mul.wide.u32 	%rd244, %r3594, 4;
	add.s64 	%rd245, %rd4, %rd244;
	st.global.u32 	[%rd245], %r3651;
	bra.uni 	$L__BB0_155;
$L__BB0_158:                            // %L30362
	mov.u32 	%r3596, 0;
	st.global.u32 	[%rd5], %r3596;
	ret;
$L__BB0_1:                              // %L8
	ld.param.u32 	%r303, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd39, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0];
	mov.u64 	%rd44, exception1;
	cvta.global.u64 	%rd45, %rd44;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd45;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd39;
	st.param.b32 	[param0+8], %r303;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
