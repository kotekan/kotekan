// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception4062[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception4110[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 512, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<300>;
	.reg .b16 	%rs<97>;
	.reg .b32 	%r<3409>;
	.reg .f32 	%f<752>;
	.reg .b64 	%rd<316>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r247, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd74, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r256, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r256, 34943;
	@%p2 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd75, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r248, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r2, %r1, 9;
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r4, %tid.y;
	shl.b32 	%r5, %r4, 5;
	or.b32  	%r257, %r2, %r3;
	or.b32  	%r258, %r257, %r5;
	mul.wide.u32 	%rd82, %r258, 4;
	add.s64 	%rd6, %rd75, %rd82;
	mov.u32 	%r259, 1;
	st.global.u32 	[%rd6], %r259;
	setp.gt.u32 	%p3, %r248, 65535;
	@%p3 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r249, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p4, %r249, %r248;
	setp.gt.s32 	%p5, %r249, 131071;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r250, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r249, %r248;
	and.b32  	%r260, %r6, 63;
	setp.ne.s32 	%p7, %r260, 0;
	setp.gt.u32 	%p8, %r250, 1023;
	or.pred  	%p9, %p7, %p8;
	@%p9 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r251, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p10, %r251, %r250;
	setp.lt.s32 	%p11, %r251, 2048;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r261, %r251, %r250;
	mul.hi.s32 	%r262, %r6, 715827883;
	shr.u32 	%r263, %r262, 31;
	shr.s32 	%r264, %r262, 6;
	add.s32 	%r265, %r264, %r263;
	setp.eq.s32 	%p13, %r261, %r265;
	@%p13 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L258
	ld.param.u32 	%r252, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p14, %r252, 0;
	@%p14 bra 	$L__BB0_12;
// %bb.9:                               // %L260
	ld.param.u32 	%r254, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	ld.param.u32 	%r253, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p15, %r253, %r252;
	setp.gt.s32 	%p16, %r253, 64;
	or.pred  	%p17, %p15, %p16;
	setp.lt.s32 	%p18, %r254, 0;
	or.pred  	%p19, %p17, %p18;
	@%p19 bra 	$L__BB0_12;
// %bb.10:                              // %L276
	ld.param.u32 	%r255, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p20, %r255, %r254;
	setp.gt.s32 	%p21, %r255, 2048;
	or.pred  	%p22, %p20, %p21;
	@%p22 bra 	$L__BB0_12;
// %bb.11:                              // %L286
	sub.s32 	%r266, %r255, %r254;
	sub.s32 	%r267, %r253, %r252;
	setp.eq.s32 	%p23, %r266, %r267;
	@%p23 bra 	$L__BB0_159;
	bra.uni 	$L__BB0_12;
$L__BB0_159:                            // %pass162
	and.b32  	%r145, %r3, 3;
	shr.u32 	%r146, %r3, 2;
	mul.lo.s32 	%r268, %r145, %r146;
	and.b32  	%r269, %r268, 7;
	cvt.rn.f32.s32 	%f185, %r269;
	mov.f32 	%f186, 0f40800000;
	div.approx.f32 	%f151, %f185, %f186;
	abs.f32 	%f750, %f151;
	setp.lt.f32 	%p24, %f750, 0f40000000;
	mov.f32 	%f703, 0f40000000;
	setp.gtu.f32 	%p295, %f750, 0f4B800000;
	mov.f32 	%f746, %f750;
	@%p24 bra 	$L__BB0_171;
// %bb.160:
	@%p295 bra 	$L__BB0_167;
	bra.uni 	$L__BB0_161;
$L__BB0_167:
	mov.b32 	%r148, %f750;
	and.b32  	%r270, %r148, 8388607;
	or.b32  	%r3404, %r270, 1065353216;
	mov.b32 	%f745, %r3404;
	add.s32 	%r271, %r148, -1073741824;
	and.b32  	%r3405, %r271, -8388608;
	setp.eq.s32 	%p31, %r3405, 0;
	@%p31 bra 	$L__BB0_170;
// %bb.168:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f196, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f195,%f196;
	// end inline asm
$L__BB0_169:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r272, %r3405, 192937984;
	add.s32 	%r273, %r3404, %r272;
	mov.b32 	%f197, %r273;
	mul.f32 	%f198, %f195, %f197;
	sub.f32 	%f199, %f197, %f198;
	fma.rn.f32 	%f200, %f199, %f195, %f198;
	sub.f32 	%f201, %f197, %f200;
	fma.rz.f32 	%f202, %f201, %f195, %f200;
	cvt.rzi.f32.f32 	%f203, %f202;
	sub.f32 	%f745, %f197, %f203;
	sub.s32 	%r3405, %r3405, %r272;
	mov.b32 	%r3404, %f745;
	setp.ne.s32 	%p32, %r3405, 0;
	setp.ne.s32 	%p33, %r3404, 0;
	and.pred  	%p34, %p32, %p33;
	@%p34 bra 	$L__BB0_169;
$L__BB0_170:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p35, %r148, 2139095039;
	selp.f32 	%f204, 0f7FFFFFFF, 0f4B800000, %p35;
	mul.f32 	%f205, %f745, 0f34000000;
	mul.f32 	%f746, %f204, %f205;
	bra.uni 	$L__BB0_171;
$L__BB0_161:                            // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f188, %f750, %f703;
	cvt.rzi.f32.f32 	%f744, %f188;
	fma.rn.f32 	%f154, %f744, 0fC0000000, %f750;
	mov.b32 	%r147, %f154;
	setp.lt.u32 	%p26, %r147, 1073741824;
	@%p26 bra 	$L__BB0_166;
// %bb.162:
	setp.lt.u32 	%p27, %r147, -2147483647;
	@%p27 bra 	$L__BB0_164;
// %bb.163:
	add.f32 	%f193, %f744, 0fBF800000;
	setp.lt.f32 	%p30, %f154, 0fC0000000;
	add.f32 	%f194, %f193, 0fBF800000;
	selp.f32 	%f744, %f194, %f193, %p30;
	bra.uni 	$L__BB0_166;
$L__BB0_164:
	add.f32 	%f744, %f744, 0f3F800000;
	setp.ltu.f32 	%p28, %f154, 0f40800000;
	@%p28 bra 	$L__BB0_166;
// %bb.165:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f189, %f744, 0f3F800000;
	fma.rn.f32 	%f191, %f703, 0fC0400000, %f154;
	setp.ge.f32 	%p29, %f191, 0f00000000;
	add.f32 	%f192, %f189, 0f3F800000;
	selp.f32 	%f744, %f192, %f189, %p29;
$L__BB0_166:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f746, %f744, 0fC0000000, %f750;
$L__BB0_171:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f206, %f746;
	setp.gtu.f32 	%p36, %f206, 0f7F800000;
	mov.b32 	%r274, %f151;
	and.b32  	%r155, %r274, -2147483648;
	@%p36 bra 	$L__BB0_173;
// %bb.172:
	mov.b32 	%r275, %f746;
	or.b32  	%r276, %r155, %r275;
	mov.b32 	%f746, %r276;
$L__BB0_173:                            // %__nv_fmodf.exit
	shl.b32 	%r158, %r3, 1;
	and.b32  	%r291, %r158, 2;
	mul.lo.s32 	%r159, %r291, %r146;
	cvt.rn.f32.s32 	%f239, %r159;
	mov.f32 	%f240, 0f41800000;
	div.approx.f32 	%f168, %f239, %f240;
	abs.f32 	%f726, %f168;
	setp.lt.f32 	%p44, %f726, 0f40000000;
	setp.gtu.f32 	%p296, %f726, 0f4B800000;
	mov.f32 	%f706, %f726;
	@%p44 bra 	$L__BB0_24;
// %bb.13:
	@%p296 bra 	$L__BB0_20;
	bra.uni 	$L__BB0_14;
$L__BB0_20:
	mov.b32 	%r8, %f726;
	and.b32  	%r292, %r8, 8388607;
	or.b32  	%r3370, %r292, 1065353216;
	mov.b32 	%f705, %r3370;
	add.s32 	%r293, %r8, -1073741824;
	and.b32  	%r3371, %r293, -8388608;
	setp.eq.s32 	%p51, %r3371, 0;
	@%p51 bra 	$L__BB0_23;
// %bb.21:                              // %__nv_fmaf_rn.exit4.i.i.i2363.preheader
	mov.f32 	%f250, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f249,%f250;
	// end inline asm
$L__BB0_22:                             // %__nv_fmaf_rn.exit4.i.i.i2363
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r294, %r3371, 192937984;
	add.s32 	%r295, %r3370, %r294;
	mov.b32 	%f251, %r295;
	mul.f32 	%f252, %f249, %f251;
	sub.f32 	%f253, %f251, %f252;
	fma.rn.f32 	%f254, %f253, %f249, %f252;
	sub.f32 	%f255, %f251, %f254;
	fma.rz.f32 	%f256, %f255, %f249, %f254;
	cvt.rzi.f32.f32 	%f257, %f256;
	sub.f32 	%f705, %f251, %f257;
	sub.s32 	%r3371, %r3371, %r294;
	mov.b32 	%r3370, %f705;
	setp.ne.s32 	%p52, %r3371, 0;
	setp.ne.s32 	%p53, %r3370, 0;
	and.pred  	%p54, %p52, %p53;
	@%p54 bra 	$L__BB0_22;
$L__BB0_23:                             // %__internal_fmodf_slowpath_mod.exit.i.i2365
	setp.gt.u32 	%p55, %r8, 2139095039;
	selp.f32 	%f258, 0f7FFFFFFF, 0f4B800000, %p55;
	mul.f32 	%f259, %f705, 0f34000000;
	mul.f32 	%f706, %f258, %f259;
	bra.uni 	$L__BB0_24;
$L__BB0_14:                             // %__nv_fast_fdividef.exit.i.i.i2342
	div.approx.f32 	%f242, %f726, %f703;
	cvt.rzi.f32.f32 	%f704, %f242;
	fma.rn.f32 	%f2, %f704, 0fC0000000, %f726;
	mov.b32 	%r7, %f2;
	setp.lt.u32 	%p46, %r7, 1073741824;
	@%p46 bra 	$L__BB0_19;
// %bb.15:
	setp.lt.u32 	%p47, %r7, -2147483647;
	@%p47 bra 	$L__BB0_17;
// %bb.16:
	add.f32 	%f247, %f704, 0fBF800000;
	setp.lt.f32 	%p50, %f2, 0fC0000000;
	add.f32 	%f248, %f247, 0fBF800000;
	selp.f32 	%f704, %f248, %f247, %p50;
	bra.uni 	$L__BB0_19;
$L__BB0_17:
	add.f32 	%f704, %f704, 0f3F800000;
	setp.ltu.f32 	%p48, %f2, 0f40800000;
	@%p48 bra 	$L__BB0_19;
// %bb.18:                              // %__nv_fmaf_rn.exit.i.i.i2346
	add.f32 	%f243, %f704, 0f3F800000;
	fma.rn.f32 	%f245, %f703, 0fC0400000, %f2;
	setp.ge.f32 	%p49, %f245, 0f00000000;
	add.f32 	%f246, %f243, 0f3F800000;
	selp.f32 	%f704, %f246, %f243, %p49;
$L__BB0_19:                             // %__internal_fmodf_fastpath_quot.exit.i.i2349
	fma.rn.f32 	%f706, %f704, 0fC0000000, %f726;
$L__BB0_24:                             // %__internal_fmodf_kernel.exit.i2368
	abs.f32 	%f260, %f706;
	setp.gtu.f32 	%p56, %f260, 0f7F800000;
	mov.b32 	%r296, %f168;
	and.b32  	%r15, %r296, -2147483648;
	@%p56 bra 	$L__BB0_26;
// %bb.25:
	mov.b32 	%r297, %f706;
	or.b32  	%r298, %r15, %r297;
	mov.b32 	%f706, %r298;
$L__BB0_26:                             // %__nv_fmodf.exit2369
	add.s32 	%r307, %r159, %r146;
	cvt.rn.f32.s32 	%f291, %r307;
	div.approx.f32 	%f18, %f291, %f240;
	abs.f32 	%f730, %f18;
	setp.lt.f32 	%p64, %f730, 0f40000000;
	setp.gtu.f32 	%p297, %f730, 0f4B800000;
	mov.f32 	%f710, %f730;
	@%p64 bra 	$L__BB0_38;
// %bb.27:
	@%p297 bra 	$L__BB0_34;
	bra.uni 	$L__BB0_28;
$L__BB0_34:
	mov.b32 	%r17, %f730;
	and.b32  	%r308, %r17, 8388607;
	or.b32  	%r3372, %r308, 1065353216;
	mov.b32 	%f709, %r3372;
	add.s32 	%r309, %r17, -1073741824;
	and.b32  	%r3373, %r309, -8388608;
	setp.eq.s32 	%p71, %r3373, 0;
	@%p71 bra 	$L__BB0_37;
// %bb.35:                              // %__nv_fmaf_rn.exit4.i.i.i2394.preheader
	mov.f32 	%f302, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f301,%f302;
	// end inline asm
$L__BB0_36:                             // %__nv_fmaf_rn.exit4.i.i.i2394
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r310, %r3373, 192937984;
	add.s32 	%r311, %r3372, %r310;
	mov.b32 	%f303, %r311;
	mul.f32 	%f304, %f301, %f303;
	sub.f32 	%f305, %f303, %f304;
	fma.rn.f32 	%f306, %f305, %f301, %f304;
	sub.f32 	%f307, %f303, %f306;
	fma.rz.f32 	%f308, %f307, %f301, %f306;
	cvt.rzi.f32.f32 	%f309, %f308;
	sub.f32 	%f709, %f303, %f309;
	sub.s32 	%r3373, %r3373, %r310;
	mov.b32 	%r3372, %f709;
	setp.ne.s32 	%p72, %r3373, 0;
	setp.ne.s32 	%p73, %r3372, 0;
	and.pred  	%p74, %p72, %p73;
	@%p74 bra 	$L__BB0_36;
$L__BB0_37:                             // %__internal_fmodf_slowpath_mod.exit.i.i2396
	setp.gt.u32 	%p75, %r17, 2139095039;
	selp.f32 	%f310, 0f7FFFFFFF, 0f4B800000, %p75;
	mul.f32 	%f311, %f709, 0f34000000;
	mul.f32 	%f710, %f310, %f311;
	bra.uni 	$L__BB0_38;
$L__BB0_28:                             // %__nv_fast_fdividef.exit.i.i.i2373
	div.approx.f32 	%f294, %f730, %f703;
	cvt.rzi.f32.f32 	%f708, %f294;
	fma.rn.f32 	%f21, %f708, 0fC0000000, %f730;
	mov.b32 	%r16, %f21;
	setp.lt.u32 	%p66, %r16, 1073741824;
	@%p66 bra 	$L__BB0_33;
// %bb.29:
	setp.lt.u32 	%p67, %r16, -2147483647;
	@%p67 bra 	$L__BB0_31;
// %bb.30:
	add.f32 	%f299, %f708, 0fBF800000;
	setp.lt.f32 	%p70, %f21, 0fC0000000;
	add.f32 	%f300, %f299, 0fBF800000;
	selp.f32 	%f708, %f300, %f299, %p70;
	bra.uni 	$L__BB0_33;
$L__BB0_31:
	add.f32 	%f708, %f708, 0f3F800000;
	setp.ltu.f32 	%p68, %f21, 0f40800000;
	@%p68 bra 	$L__BB0_33;
// %bb.32:                              // %__nv_fmaf_rn.exit.i.i.i2377
	add.f32 	%f295, %f708, 0f3F800000;
	fma.rn.f32 	%f297, %f703, 0fC0400000, %f21;
	setp.ge.f32 	%p69, %f297, 0f00000000;
	add.f32 	%f298, %f295, 0f3F800000;
	selp.f32 	%f708, %f298, %f295, %p69;
$L__BB0_33:                             // %__internal_fmodf_fastpath_quot.exit.i.i2380
	fma.rn.f32 	%f710, %f708, 0fC0000000, %f730;
$L__BB0_38:                             // %__internal_fmodf_kernel.exit.i2399
	abs.f32 	%f312, %f710;
	setp.gtu.f32 	%p76, %f312, 0f7F800000;
	mov.b32 	%r312, %f18;
	and.b32  	%r24, %r312, -2147483648;
	@%p76 bra 	$L__BB0_40;
// %bb.39:
	mov.b32 	%r313, %f710;
	or.b32  	%r314, %r24, %r313;
	mov.b32 	%f710, %r314;
$L__BB0_40:                             // %__nv_fmodf.exit2400
	mul.lo.s32 	%r27, %r158, %r146;
	and.b32  	%r329, %r27, 2;
	cvt.rn.f32.s32 	%f345, %r329;
	div.approx.f32 	%f35, %f345, %f703;
	abs.f32 	%f734, %f35;
	setp.lt.f32 	%p84, %f734, 0f40000000;
	setp.gtu.f32 	%p298, %f734, 0f4B800000;
	mov.f32 	%f714, %f734;
	@%p84 bra 	$L__BB0_52;
// %bb.41:
	@%p298 bra 	$L__BB0_48;
	bra.uni 	$L__BB0_42;
$L__BB0_48:
	mov.b32 	%r29, %f734;
	and.b32  	%r330, %r29, 8388607;
	or.b32  	%r3374, %r330, 1065353216;
	mov.b32 	%f713, %r3374;
	add.s32 	%r331, %r29, -1073741824;
	and.b32  	%r3375, %r331, -8388608;
	setp.eq.s32 	%p91, %r3375, 0;
	@%p91 bra 	$L__BB0_51;
// %bb.49:                              // %__nv_fmaf_rn.exit4.i.i.i2425.preheader
	mov.f32 	%f356, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f355,%f356;
	// end inline asm
$L__BB0_50:                             // %__nv_fmaf_rn.exit4.i.i.i2425
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r332, %r3375, 192937984;
	add.s32 	%r333, %r3374, %r332;
	mov.b32 	%f357, %r333;
	mul.f32 	%f358, %f355, %f357;
	sub.f32 	%f359, %f357, %f358;
	fma.rn.f32 	%f360, %f359, %f355, %f358;
	sub.f32 	%f361, %f357, %f360;
	fma.rz.f32 	%f362, %f361, %f355, %f360;
	cvt.rzi.f32.f32 	%f363, %f362;
	sub.f32 	%f713, %f357, %f363;
	sub.s32 	%r3375, %r3375, %r332;
	mov.b32 	%r3374, %f713;
	setp.ne.s32 	%p92, %r3375, 0;
	setp.ne.s32 	%p93, %r3374, 0;
	and.pred  	%p94, %p92, %p93;
	@%p94 bra 	$L__BB0_50;
$L__BB0_51:                             // %__internal_fmodf_slowpath_mod.exit.i.i2427
	setp.gt.u32 	%p95, %r29, 2139095039;
	selp.f32 	%f364, 0f7FFFFFFF, 0f4B800000, %p95;
	mul.f32 	%f365, %f713, 0f34000000;
	mul.f32 	%f714, %f364, %f365;
	bra.uni 	$L__BB0_52;
$L__BB0_42:                             // %__nv_fast_fdividef.exit.i.i.i2404
	div.approx.f32 	%f348, %f734, %f703;
	cvt.rzi.f32.f32 	%f712, %f348;
	fma.rn.f32 	%f38, %f712, 0fC0000000, %f734;
	mov.b32 	%r28, %f38;
	setp.lt.u32 	%p86, %r28, 1073741824;
	@%p86 bra 	$L__BB0_47;
// %bb.43:
	setp.lt.u32 	%p87, %r28, -2147483647;
	@%p87 bra 	$L__BB0_45;
// %bb.44:
	add.f32 	%f353, %f712, 0fBF800000;
	setp.lt.f32 	%p90, %f38, 0fC0000000;
	add.f32 	%f354, %f353, 0fBF800000;
	selp.f32 	%f712, %f354, %f353, %p90;
	bra.uni 	$L__BB0_47;
$L__BB0_45:
	add.f32 	%f712, %f712, 0f3F800000;
	setp.ltu.f32 	%p88, %f38, 0f40800000;
	@%p88 bra 	$L__BB0_47;
// %bb.46:                              // %__nv_fmaf_rn.exit.i.i.i2408
	add.f32 	%f349, %f712, 0f3F800000;
	fma.rn.f32 	%f351, %f703, 0fC0400000, %f38;
	setp.ge.f32 	%p89, %f351, 0f00000000;
	add.f32 	%f352, %f349, 0f3F800000;
	selp.f32 	%f712, %f352, %f349, %p89;
$L__BB0_47:                             // %__internal_fmodf_fastpath_quot.exit.i.i2411
	fma.rn.f32 	%f714, %f712, 0fC0000000, %f734;
$L__BB0_52:                             // %__internal_fmodf_kernel.exit.i2430
	mov.f32 	%f230, 0f00000000;
	abs.f32 	%f366, %f714;
	setp.gtu.f32 	%p96, %f366, 0f7F800000;
	mov.b32 	%r334, %f35;
	and.b32  	%r36, %r334, -2147483648;
	@%p96 bra 	$L__BB0_54;
// %bb.53:
	mov.b32 	%r335, %f714;
	or.b32  	%r336, %r36, %r335;
	mov.b32 	%f714, %r336;
$L__BB0_54:                             // %__nv_fmodf.exit2431
	add.f32 	%f367, %f714, %f714;
	mov.b32 	%r337, %f367;
	and.b32  	%r338, %r337, -2147483648;
	or.b32  	%r339, %r338, 1056964608;
	mov.b32 	%f368, %r339;
	add.f32 	%f369, %f367, %f368;
	cvt.rzi.f32.f32 	%f370, %f369;
	abs.f32 	%f371, %f367;
	setp.gt.f32 	%p97, %f371, 0f4B000000;
	selp.f32 	%f372, %f367, %f370, %p97;
	cvt.rzi.f32.f32 	%f373, %f367;
	setp.lt.f32 	%p98, %f371, 0f3F000000;
	selp.f32 	%f374, %f373, %f372, %p98;
	cvt.rzi.s32.f32 	%r340, %f374;
	fma.rn.f32 	%f375, %f374, 0fBF000000, %f714;
	mul.f32 	%f376, %f375, %f375;
	fma.rn.f32 	%f377, %f376, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f378, %f376, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f379, %f377, %f376, 0fC0A55DF6;
	fma.rn.f32 	%f380, %f378, %f376, 0f4081E0CF;
	fma.rn.f32 	%f381, %f376, %f375, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f376, 0fC09DE9E6;
	fma.rn.f32 	%f383, %f379, %f381, 0f00000000;
	fma.rn.f32 	%f384, %f382, %f376, 0f3F800000;
	fma.rn.f32 	%f385, %f375, 0f40490FDB, %f383;
	and.b32  	%r341, %r340, 1;
	setp.eq.b32 	%p99, %r341, 1;
	selp.f32 	%f386, %f384, %f385, %p99;
	selp.f32 	%f387, %f385, %f384, %p99;
	and.b32  	%r342, %r340, 2;
	setp.eq.s32 	%p100, %r342, 0;
	neg.f32 	%f388, %f386;
	selp.f32 	%f389, %f386, %f388, %p100;
	add.s32 	%r343, %r340, 1;
	and.b32  	%r344, %r343, 2;
	setp.eq.s32 	%p101, %r344, 0;
	sub.f32 	%f391, %f230, %f387;
	cvt.rzi.f32.f32 	%f393, %f714;
	setp.eq.f32 	%p102, %f393, %f714;
	mul.f32 	%f394, %f714, 0f00000000;
	selp.f32 	%f76, %f394, %f389, %p102;
	abs.f32 	%f395, %f714;
	add.s32 	%r345, %r27, %r146;
	and.b32  	%r346, %r345, 3;
	cvt.rn.f32.s32 	%f397, %r346;
	div.approx.f32 	%f54, %f397, %f703;
	abs.f32 	%f738, %f54;
	setp.lt.f32 	%p104, %f738, 0f40000000;
	setp.gtu.f32 	%p299, %f738, 0f4B800000;
	mov.f32 	%f718, %f738;
	@%p104 bra 	$L__BB0_66;
// %bb.55:
	@%p299 bra 	$L__BB0_62;
	bra.uni 	$L__BB0_56;
$L__BB0_62:
	mov.b32 	%r38, %f738;
	and.b32  	%r347, %r38, 8388607;
	or.b32  	%r3376, %r347, 1065353216;
	mov.b32 	%f717, %r3376;
	add.s32 	%r348, %r38, -1073741824;
	and.b32  	%r3377, %r348, -8388608;
	setp.eq.s32 	%p111, %r3377, 0;
	@%p111 bra 	$L__BB0_65;
// %bb.63:                              // %__nv_fmaf_rn.exit4.i.i.i2456.preheader
	mov.f32 	%f408, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f407,%f408;
	// end inline asm
$L__BB0_64:                             // %__nv_fmaf_rn.exit4.i.i.i2456
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r349, %r3377, 192937984;
	add.s32 	%r350, %r3376, %r349;
	mov.b32 	%f409, %r350;
	mul.f32 	%f410, %f407, %f409;
	sub.f32 	%f411, %f409, %f410;
	fma.rn.f32 	%f412, %f411, %f407, %f410;
	sub.f32 	%f413, %f409, %f412;
	fma.rz.f32 	%f414, %f413, %f407, %f412;
	cvt.rzi.f32.f32 	%f415, %f414;
	sub.f32 	%f717, %f409, %f415;
	sub.s32 	%r3377, %r3377, %r349;
	mov.b32 	%r3376, %f717;
	setp.ne.s32 	%p112, %r3377, 0;
	setp.ne.s32 	%p113, %r3376, 0;
	and.pred  	%p114, %p112, %p113;
	@%p114 bra 	$L__BB0_64;
$L__BB0_65:                             // %__internal_fmodf_slowpath_mod.exit.i.i2458
	setp.gt.u32 	%p115, %r38, 2139095039;
	selp.f32 	%f416, 0f7FFFFFFF, 0f4B800000, %p115;
	mul.f32 	%f417, %f717, 0f34000000;
	mul.f32 	%f718, %f416, %f417;
	bra.uni 	$L__BB0_66;
$L__BB0_56:                             // %__nv_fast_fdividef.exit.i.i.i2435
	div.approx.f32 	%f400, %f738, %f703;
	cvt.rzi.f32.f32 	%f716, %f400;
	fma.rn.f32 	%f57, %f716, 0fC0000000, %f738;
	mov.b32 	%r37, %f57;
	setp.lt.u32 	%p106, %r37, 1073741824;
	@%p106 bra 	$L__BB0_61;
// %bb.57:
	setp.lt.u32 	%p107, %r37, -2147483647;
	@%p107 bra 	$L__BB0_59;
// %bb.58:
	add.f32 	%f405, %f716, 0fBF800000;
	setp.lt.f32 	%p110, %f57, 0fC0000000;
	add.f32 	%f406, %f405, 0fBF800000;
	selp.f32 	%f716, %f406, %f405, %p110;
	bra.uni 	$L__BB0_61;
$L__BB0_59:
	add.f32 	%f716, %f716, 0f3F800000;
	setp.ltu.f32 	%p108, %f57, 0f40800000;
	@%p108 bra 	$L__BB0_61;
// %bb.60:                              // %__nv_fmaf_rn.exit.i.i.i2439
	add.f32 	%f401, %f716, 0f3F800000;
	fma.rn.f32 	%f403, %f703, 0fC0400000, %f57;
	setp.ge.f32 	%p109, %f403, 0f00000000;
	add.f32 	%f404, %f401, 0f3F800000;
	selp.f32 	%f716, %f404, %f401, %p109;
$L__BB0_61:                             // %__internal_fmodf_fastpath_quot.exit.i.i2442
	fma.rn.f32 	%f718, %f716, 0fC0000000, %f738;
$L__BB0_66:                             // %__internal_fmodf_kernel.exit.i2461
	selp.f32 	%f392, %f387, %f391, %p101;
	setp.gt.f32 	%p103, %f395, 0f4B800000;
	add.f32 	%f396, %f76, 0f3F800000;
	abs.f32 	%f418, %f718;
	setp.gtu.f32 	%p116, %f418, 0f7F800000;
	mov.b32 	%r351, %f54;
	and.b32  	%r45, %r351, -2147483648;
	@%p116 bra 	$L__BB0_68;
// %bb.67:
	mov.b32 	%r352, %f718;
	or.b32  	%r353, %r45, %r352;
	mov.b32 	%f718, %r353;
$L__BB0_68:                             // %__nv_fmodf.exit2462
	selp.f32 	%f53, %f396, %f392, %p103;
	add.f32 	%f419, %f718, %f718;
	mov.b32 	%r354, %f419;
	and.b32  	%r355, %r354, -2147483648;
	or.b32  	%r356, %r355, 1056964608;
	mov.b32 	%f420, %r356;
	add.f32 	%f421, %f419, %f420;
	cvt.rzi.f32.f32 	%f422, %f421;
	abs.f32 	%f423, %f419;
	setp.gt.f32 	%p117, %f423, 0f4B000000;
	selp.f32 	%f424, %f419, %f422, %p117;
	cvt.rzi.f32.f32 	%f425, %f419;
	setp.lt.f32 	%p118, %f423, 0f3F000000;
	selp.f32 	%f426, %f425, %f424, %p118;
	cvt.rzi.s32.f32 	%r357, %f426;
	fma.rn.f32 	%f427, %f426, 0fBF000000, %f718;
	mul.f32 	%f428, %f427, %f427;
	fma.rn.f32 	%f429, %f428, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f430, %f428, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f431, %f429, %f428, 0fC0A55DF6;
	fma.rn.f32 	%f432, %f430, %f428, 0f4081E0CF;
	fma.rn.f32 	%f433, %f428, %f427, 0f00000000;
	fma.rn.f32 	%f434, %f432, %f428, 0fC09DE9E6;
	fma.rn.f32 	%f435, %f431, %f433, 0f00000000;
	fma.rn.f32 	%f436, %f434, %f428, 0f3F800000;
	fma.rn.f32 	%f437, %f427, 0f40490FDB, %f435;
	and.b32  	%r358, %r357, 1;
	setp.eq.b32 	%p119, %r358, 1;
	selp.f32 	%f438, %f436, %f437, %p119;
	selp.f32 	%f439, %f437, %f436, %p119;
	and.b32  	%r359, %r357, 2;
	setp.eq.s32 	%p120, %r359, 0;
	neg.f32 	%f440, %f438;
	selp.f32 	%f441, %f438, %f440, %p120;
	add.s32 	%r360, %r357, 1;
	and.b32  	%r361, %r360, 2;
	setp.eq.s32 	%p121, %r361, 0;
	sub.f32 	%f443, %f230, %f439;
	selp.f32 	%f444, %f439, %f443, %p121;
	cvt.rzi.f32.f32 	%f445, %f718;
	setp.eq.f32 	%p122, %f445, %f718;
	mul.f32 	%f446, %f718, 0f00000000;
	selp.f32 	%f78, %f446, %f441, %p122;
	abs.f32 	%f447, %f718;
	setp.gt.f32 	%p123, %f447, 0f4B800000;
	add.f32 	%f448, %f78, 0f3F800000;
	selp.f32 	%f72, %f448, %f444, %p123;
	and.b32  	%r46, %r3, 2;
	setp.eq.s32 	%p124, %r46, 0;
	mov.f32 	%f75, %f53;
	mov.f32 	%f77, %f72;
	@%p124 bra 	$L__BB0_70;
// %bb.69:                              // %L682
	neg.f32 	%f77, %f78;
	neg.f32 	%f75, %f76;
	mov.f32 	%f76, %f53;
	mov.f32 	%f78, %f72;
$L__BB0_70:                             // %L684
	@%p24 bra 	$L__BB0_181;
// %bb.71:
	@%p295 bra 	$L__BB0_177;
	bra.uni 	$L__BB0_72;
$L__BB0_177:
	mov.b32 	%r161, %f750;
	and.b32  	%r368, %r161, 8388607;
	or.b32  	%r3406, %r368, 1065353216;
	mov.b32 	%f749, %r3406;
	add.s32 	%r369, %r161, -1073741824;
	and.b32  	%r3407, %r369, -8388608;
	setp.eq.s32 	%p132, %r3407, 0;
	@%p132 bra 	$L__BB0_180;
// %bb.178:                             // %__nv_fmaf_rn.exit4.i.i.i2487.preheader
	mov.f32 	%f458, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f457,%f458;
	// end inline asm
$L__BB0_179:                            // %__nv_fmaf_rn.exit4.i.i.i2487
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r370, %r3407, 192937984;
	add.s32 	%r371, %r3406, %r370;
	mov.b32 	%f459, %r371;
	mul.f32 	%f460, %f457, %f459;
	sub.f32 	%f461, %f459, %f460;
	fma.rn.f32 	%f462, %f461, %f457, %f460;
	sub.f32 	%f463, %f459, %f462;
	fma.rz.f32 	%f464, %f463, %f457, %f462;
	cvt.rzi.f32.f32 	%f465, %f464;
	sub.f32 	%f749, %f459, %f465;
	sub.s32 	%r3407, %r3407, %r370;
	mov.b32 	%r3406, %f749;
	setp.ne.s32 	%p133, %r3407, 0;
	setp.ne.s32 	%p134, %r3406, 0;
	and.pred  	%p135, %p133, %p134;
	@%p135 bra 	$L__BB0_179;
$L__BB0_180:                            // %__internal_fmodf_slowpath_mod.exit.i.i2489
	setp.gt.u32 	%p136, %r161, 2139095039;
	selp.f32 	%f466, 0f7FFFFFFF, 0f4B800000, %p136;
	mul.f32 	%f467, %f749, 0f34000000;
	mul.f32 	%f750, %f466, %f467;
	bra.uni 	$L__BB0_181;
$L__BB0_72:                             // %__nv_fast_fdividef.exit.i.i.i2466
	div.approx.f32 	%f450, %f750, %f703;
	cvt.rzi.f32.f32 	%f748, %f450;
	fma.rn.f32 	%f171, %f748, 0fC0000000, %f750;
	mov.b32 	%r160, %f171;
	setp.lt.u32 	%p127, %r160, 1073741824;
	@%p127 bra 	$L__BB0_176;
// %bb.73:
	setp.lt.u32 	%p128, %r160, -2147483647;
	@%p128 bra 	$L__BB0_174;
// %bb.74:
	add.f32 	%f455, %f748, 0fBF800000;
	setp.lt.f32 	%p131, %f171, 0fC0000000;
	add.f32 	%f456, %f455, 0fBF800000;
	selp.f32 	%f748, %f456, %f455, %p131;
	bra.uni 	$L__BB0_176;
$L__BB0_174:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p129, %f171, 0f40800000;
	@%p129 bra 	$L__BB0_176;
// %bb.175:                             // %__nv_fmaf_rn.exit.i.i.i2470
	add.f32 	%f451, %f748, 0f3F800000;
	fma.rn.f32 	%f453, %f703, 0fC0400000, %f171;
	setp.ge.f32 	%p130, %f453, 0f00000000;
	add.f32 	%f454, %f451, 0f3F800000;
	selp.f32 	%f748, %f454, %f451, %p130;
$L__BB0_176:                            // %__internal_fmodf_fastpath_quot.exit.i.i2473
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_181:                            // %__internal_fmodf_kernel.exit.i2492
	abs.f32 	%f468, %f750;
	setp.gtu.f32 	%p137, %f468, 0f7F800000;
	@%p137 bra 	$L__BB0_183;
// %bb.182:
	mov.b32 	%r372, %f750;
	or.b32  	%r373, %r155, %r372;
	mov.b32 	%f750, %r373;
$L__BB0_183:                            // %__nv_fmodf.exit2493
	@%p44 bra 	$L__BB0_86;
// %bb.75:
	@%p296 bra 	$L__BB0_82;
	bra.uni 	$L__BB0_76;
$L__BB0_82:
	mov.b32 	%r50, %f726;
	and.b32  	%r388, %r50, 8388607;
	or.b32  	%r3378, %r388, 1065353216;
	mov.b32 	%f725, %r3378;
	add.s32 	%r389, %r50, -1073741824;
	and.b32  	%r3379, %r389, -8388608;
	setp.eq.s32 	%p152, %r3379, 0;
	@%p152 bra 	$L__BB0_85;
// %bb.83:                              // %__nv_fmaf_rn.exit4.i.i.i2518.preheader
	mov.f32 	%f510, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f509,%f510;
	// end inline asm
$L__BB0_84:                             // %__nv_fmaf_rn.exit4.i.i.i2518
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r390, %r3379, 192937984;
	add.s32 	%r391, %r3378, %r390;
	mov.b32 	%f511, %r391;
	mul.f32 	%f512, %f509, %f511;
	sub.f32 	%f513, %f511, %f512;
	fma.rn.f32 	%f514, %f513, %f509, %f512;
	sub.f32 	%f515, %f511, %f514;
	fma.rz.f32 	%f516, %f515, %f509, %f514;
	cvt.rzi.f32.f32 	%f517, %f516;
	sub.f32 	%f725, %f511, %f517;
	sub.s32 	%r3379, %r3379, %r390;
	mov.b32 	%r3378, %f725;
	setp.ne.s32 	%p153, %r3379, 0;
	setp.ne.s32 	%p154, %r3378, 0;
	and.pred  	%p155, %p153, %p154;
	@%p155 bra 	$L__BB0_84;
$L__BB0_85:                             // %__internal_fmodf_slowpath_mod.exit.i.i2520
	setp.gt.u32 	%p156, %r50, 2139095039;
	selp.f32 	%f518, 0f7FFFFFFF, 0f4B800000, %p156;
	mul.f32 	%f519, %f725, 0f34000000;
	mul.f32 	%f726, %f518, %f519;
	bra.uni 	$L__BB0_86;
$L__BB0_76:                             // %__nv_fast_fdividef.exit.i.i.i2497
	div.approx.f32 	%f502, %f726, %f703;
	cvt.rzi.f32.f32 	%f724, %f502;
	fma.rn.f32 	%f80, %f724, 0fC0000000, %f726;
	mov.b32 	%r49, %f80;
	setp.lt.u32 	%p147, %r49, 1073741824;
	@%p147 bra 	$L__BB0_81;
// %bb.77:
	setp.lt.u32 	%p148, %r49, -2147483647;
	@%p148 bra 	$L__BB0_79;
// %bb.78:
	add.f32 	%f507, %f724, 0fBF800000;
	setp.lt.f32 	%p151, %f80, 0fC0000000;
	add.f32 	%f508, %f507, 0fBF800000;
	selp.f32 	%f724, %f508, %f507, %p151;
	bra.uni 	$L__BB0_81;
$L__BB0_79:
	add.f32 	%f724, %f724, 0f3F800000;
	setp.ltu.f32 	%p149, %f80, 0f40800000;
	@%p149 bra 	$L__BB0_81;
// %bb.80:                              // %__nv_fmaf_rn.exit.i.i.i2501
	add.f32 	%f503, %f724, 0f3F800000;
	fma.rn.f32 	%f505, %f703, 0fC0400000, %f80;
	setp.ge.f32 	%p150, %f505, 0f00000000;
	add.f32 	%f506, %f503, 0f3F800000;
	selp.f32 	%f724, %f506, %f503, %p150;
$L__BB0_81:                             // %__internal_fmodf_fastpath_quot.exit.i.i2504
	fma.rn.f32 	%f726, %f724, 0fC0000000, %f726;
$L__BB0_86:                             // %__internal_fmodf_kernel.exit.i2523
	abs.f32 	%f520, %f726;
	setp.gtu.f32 	%p157, %f520, 0f7F800000;
	@%p157 bra 	$L__BB0_88;
// %bb.87:
	mov.b32 	%r392, %f726;
	or.b32  	%r393, %r15, %r392;
	mov.b32 	%f726, %r393;
$L__BB0_88:                             // %__nv_fmodf.exit2524
	@%p64 bra 	$L__BB0_100;
// %bb.89:
	@%p297 bra 	$L__BB0_96;
	bra.uni 	$L__BB0_90;
$L__BB0_96:
	mov.b32 	%r58, %f730;
	and.b32  	%r402, %r58, 8388607;
	or.b32  	%r3380, %r402, 1065353216;
	mov.b32 	%f729, %r3380;
	add.s32 	%r403, %r58, -1073741824;
	and.b32  	%r3381, %r403, -8388608;
	setp.eq.s32 	%p172, %r3381, 0;
	@%p172 bra 	$L__BB0_99;
// %bb.97:                              // %__nv_fmaf_rn.exit4.i.i.i2549.preheader
	mov.f32 	%f560, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f559,%f560;
	// end inline asm
$L__BB0_98:                             // %__nv_fmaf_rn.exit4.i.i.i2549
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r404, %r3381, 192937984;
	add.s32 	%r405, %r3380, %r404;
	mov.b32 	%f561, %r405;
	mul.f32 	%f562, %f559, %f561;
	sub.f32 	%f563, %f561, %f562;
	fma.rn.f32 	%f564, %f563, %f559, %f562;
	sub.f32 	%f565, %f561, %f564;
	fma.rz.f32 	%f566, %f565, %f559, %f564;
	cvt.rzi.f32.f32 	%f567, %f566;
	sub.f32 	%f729, %f561, %f567;
	sub.s32 	%r3381, %r3381, %r404;
	mov.b32 	%r3380, %f729;
	setp.ne.s32 	%p173, %r3381, 0;
	setp.ne.s32 	%p174, %r3380, 0;
	and.pred  	%p175, %p173, %p174;
	@%p175 bra 	$L__BB0_98;
$L__BB0_99:                             // %__internal_fmodf_slowpath_mod.exit.i.i2551
	setp.gt.u32 	%p176, %r58, 2139095039;
	selp.f32 	%f568, 0f7FFFFFFF, 0f4B800000, %p176;
	mul.f32 	%f569, %f729, 0f34000000;
	mul.f32 	%f730, %f568, %f569;
	bra.uni 	$L__BB0_100;
$L__BB0_90:                             // %__nv_fast_fdividef.exit.i.i.i2528
	div.approx.f32 	%f552, %f730, %f703;
	cvt.rzi.f32.f32 	%f728, %f552;
	fma.rn.f32 	%f97, %f728, 0fC0000000, %f730;
	mov.b32 	%r57, %f97;
	setp.lt.u32 	%p167, %r57, 1073741824;
	@%p167 bra 	$L__BB0_95;
// %bb.91:
	setp.lt.u32 	%p168, %r57, -2147483647;
	@%p168 bra 	$L__BB0_93;
// %bb.92:
	add.f32 	%f557, %f728, 0fBF800000;
	setp.lt.f32 	%p171, %f97, 0fC0000000;
	add.f32 	%f558, %f557, 0fBF800000;
	selp.f32 	%f728, %f558, %f557, %p171;
	bra.uni 	$L__BB0_95;
$L__BB0_93:
	add.f32 	%f728, %f728, 0f3F800000;
	setp.ltu.f32 	%p169, %f97, 0f40800000;
	@%p169 bra 	$L__BB0_95;
// %bb.94:                              // %__nv_fmaf_rn.exit.i.i.i2532
	add.f32 	%f553, %f728, 0f3F800000;
	fma.rn.f32 	%f555, %f703, 0fC0400000, %f97;
	setp.ge.f32 	%p170, %f555, 0f00000000;
	add.f32 	%f556, %f553, 0f3F800000;
	selp.f32 	%f728, %f556, %f553, %p170;
$L__BB0_95:                             // %__internal_fmodf_fastpath_quot.exit.i.i2535
	fma.rn.f32 	%f730, %f728, 0fC0000000, %f730;
$L__BB0_100:                            // %__internal_fmodf_kernel.exit.i2554
	abs.f32 	%f570, %f730;
	setp.gtu.f32 	%p177, %f570, 0f7F800000;
	@%p177 bra 	$L__BB0_102;
// %bb.101:
	mov.b32 	%r406, %f730;
	or.b32  	%r407, %r24, %r406;
	mov.b32 	%f730, %r407;
$L__BB0_102:                            // %__nv_fmodf.exit2555
	@%p84 bra 	$L__BB0_114;
// %bb.103:
	@%p298 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_104;
$L__BB0_110:
	mov.b32 	%r68, %f734;
	and.b32  	%r422, %r68, 8388607;
	or.b32  	%r3382, %r422, 1065353216;
	mov.b32 	%f733, %r3382;
	add.s32 	%r423, %r68, -1073741824;
	and.b32  	%r3383, %r423, -8388608;
	setp.eq.s32 	%p192, %r3383, 0;
	@%p192 bra 	$L__BB0_113;
// %bb.111:                             // %__nv_fmaf_rn.exit4.i.i.i2580.preheader
	mov.f32 	%f612, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f611,%f612;
	// end inline asm
$L__BB0_112:                            // %__nv_fmaf_rn.exit4.i.i.i2580
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r424, %r3383, 192937984;
	add.s32 	%r425, %r3382, %r424;
	mov.b32 	%f613, %r425;
	mul.f32 	%f614, %f611, %f613;
	sub.f32 	%f615, %f613, %f614;
	fma.rn.f32 	%f616, %f615, %f611, %f614;
	sub.f32 	%f617, %f613, %f616;
	fma.rz.f32 	%f618, %f617, %f611, %f616;
	cvt.rzi.f32.f32 	%f619, %f618;
	sub.f32 	%f733, %f613, %f619;
	sub.s32 	%r3383, %r3383, %r424;
	mov.b32 	%r3382, %f733;
	setp.ne.s32 	%p193, %r3383, 0;
	setp.ne.s32 	%p194, %r3382, 0;
	and.pred  	%p195, %p193, %p194;
	@%p195 bra 	$L__BB0_112;
$L__BB0_113:                            // %__internal_fmodf_slowpath_mod.exit.i.i2582
	setp.gt.u32 	%p196, %r68, 2139095039;
	selp.f32 	%f620, 0f7FFFFFFF, 0f4B800000, %p196;
	mul.f32 	%f621, %f733, 0f34000000;
	mul.f32 	%f734, %f620, %f621;
	bra.uni 	$L__BB0_114;
$L__BB0_104:                            // %__nv_fast_fdividef.exit.i.i.i2559
	div.approx.f32 	%f604, %f734, %f703;
	cvt.rzi.f32.f32 	%f732, %f604;
	fma.rn.f32 	%f112, %f732, 0fC0000000, %f734;
	mov.b32 	%r67, %f112;
	setp.lt.u32 	%p187, %r67, 1073741824;
	@%p187 bra 	$L__BB0_109;
// %bb.105:
	setp.lt.u32 	%p188, %r67, -2147483647;
	@%p188 bra 	$L__BB0_107;
// %bb.106:
	add.f32 	%f609, %f732, 0fBF800000;
	setp.lt.f32 	%p191, %f112, 0fC0000000;
	add.f32 	%f610, %f609, 0fBF800000;
	selp.f32 	%f732, %f610, %f609, %p191;
	bra.uni 	$L__BB0_109;
$L__BB0_107:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p189, %f112, 0f40800000;
	@%p189 bra 	$L__BB0_109;
// %bb.108:                             // %__nv_fmaf_rn.exit.i.i.i2563
	add.f32 	%f605, %f732, 0f3F800000;
	fma.rn.f32 	%f607, %f703, 0fC0400000, %f112;
	setp.ge.f32 	%p190, %f607, 0f00000000;
	add.f32 	%f608, %f605, 0f3F800000;
	selp.f32 	%f732, %f608, %f605, %p190;
$L__BB0_109:                            // %__internal_fmodf_fastpath_quot.exit.i.i2566
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_114:                            // %__internal_fmodf_kernel.exit.i2585
	abs.f32 	%f622, %f734;
	setp.gtu.f32 	%p197, %f622, 0f7F800000;
	@%p197 bra 	$L__BB0_116;
// %bb.115:
	mov.b32 	%r426, %f734;
	or.b32  	%r427, %r36, %r426;
	mov.b32 	%f734, %r427;
$L__BB0_116:                            // %__nv_fmodf.exit2586
	add.f32 	%f623, %f734, %f734;
	mov.b32 	%r428, %f623;
	and.b32  	%r429, %r428, -2147483648;
	or.b32  	%r430, %r429, 1056964608;
	mov.b32 	%f624, %r430;
	add.f32 	%f625, %f623, %f624;
	cvt.rzi.f32.f32 	%f626, %f625;
	abs.f32 	%f627, %f623;
	setp.gt.f32 	%p199, %f627, 0f4B000000;
	selp.f32 	%f628, %f623, %f626, %p199;
	cvt.rzi.f32.f32 	%f629, %f623;
	setp.lt.f32 	%p200, %f627, 0f3F000000;
	selp.f32 	%f630, %f629, %f628, %p200;
	cvt.rzi.s32.f32 	%r431, %f630;
	fma.rn.f32 	%f631, %f630, 0fBF000000, %f734;
	mul.f32 	%f632, %f631, %f631;
	fma.rn.f32 	%f633, %f632, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f634, %f632, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f635, %f633, %f632, 0fC0A55DF6;
	fma.rn.f32 	%f636, %f634, %f632, 0f4081E0CF;
	fma.rn.f32 	%f637, %f632, %f631, 0f00000000;
	fma.rn.f32 	%f638, %f636, %f632, 0fC09DE9E6;
	fma.rn.f32 	%f639, %f635, %f637, 0f00000000;
	fma.rn.f32 	%f640, %f638, %f632, 0f3F800000;
	fma.rn.f32 	%f641, %f631, 0f40490FDB, %f639;
	and.b32  	%r432, %r431, 1;
	setp.eq.b32 	%p201, %r432, 1;
	selp.f32 	%f642, %f640, %f641, %p201;
	selp.f32 	%f643, %f641, %f640, %p201;
	and.b32  	%r433, %r431, 2;
	setp.eq.s32 	%p202, %r433, 0;
	neg.f32 	%f644, %f642;
	selp.f32 	%f645, %f642, %f644, %p202;
	add.s32 	%r434, %r431, 1;
	and.b32  	%r435, %r434, 2;
	setp.eq.s32 	%p203, %r435, 0;
	sub.f32 	%f647, %f230, %f643;
	cvt.rzi.f32.f32 	%f649, %f734;
	setp.eq.f32 	%p204, %f649, %f734;
	mul.f32 	%f650, %f734, 0f00000000;
	selp.f32 	%f148, %f650, %f645, %p204;
	abs.f32 	%f651, %f734;
	@%p104 bra 	$L__BB0_128;
// %bb.117:
	@%p299 bra 	$L__BB0_124;
	bra.uni 	$L__BB0_118;
$L__BB0_124:
	mov.b32 	%r76, %f738;
	and.b32  	%r436, %r76, 8388607;
	or.b32  	%r3384, %r436, 1065353216;
	mov.b32 	%f737, %r3384;
	add.s32 	%r437, %r76, -1073741824;
	and.b32  	%r3385, %r437, -8388608;
	setp.eq.s32 	%p212, %r3385, 0;
	@%p212 bra 	$L__BB0_127;
// %bb.125:                             // %__nv_fmaf_rn.exit4.i.i.i2611.preheader
	mov.f32 	%f662, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f661,%f662;
	// end inline asm
$L__BB0_126:                            // %__nv_fmaf_rn.exit4.i.i.i2611
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r438, %r3385, 192937984;
	add.s32 	%r439, %r3384, %r438;
	mov.b32 	%f663, %r439;
	mul.f32 	%f664, %f661, %f663;
	sub.f32 	%f665, %f663, %f664;
	fma.rn.f32 	%f666, %f665, %f661, %f664;
	sub.f32 	%f667, %f663, %f666;
	fma.rz.f32 	%f668, %f667, %f661, %f666;
	cvt.rzi.f32.f32 	%f669, %f668;
	sub.f32 	%f737, %f663, %f669;
	sub.s32 	%r3385, %r3385, %r438;
	mov.b32 	%r3384, %f737;
	setp.ne.s32 	%p213, %r3385, 0;
	setp.ne.s32 	%p214, %r3384, 0;
	and.pred  	%p215, %p213, %p214;
	@%p215 bra 	$L__BB0_126;
$L__BB0_127:                            // %__internal_fmodf_slowpath_mod.exit.i.i2613
	setp.gt.u32 	%p216, %r76, 2139095039;
	selp.f32 	%f670, 0f7FFFFFFF, 0f4B800000, %p216;
	mul.f32 	%f671, %f737, 0f34000000;
	mul.f32 	%f738, %f670, %f671;
	bra.uni 	$L__BB0_128;
$L__BB0_118:                            // %__nv_fast_fdividef.exit.i.i.i2590
	div.approx.f32 	%f654, %f738, %f703;
	cvt.rzi.f32.f32 	%f736, %f654;
	fma.rn.f32 	%f129, %f736, 0fC0000000, %f738;
	mov.b32 	%r75, %f129;
	setp.lt.u32 	%p207, %r75, 1073741824;
	@%p207 bra 	$L__BB0_123;
// %bb.119:
	setp.lt.u32 	%p208, %r75, -2147483647;
	@%p208 bra 	$L__BB0_121;
// %bb.120:
	add.f32 	%f659, %f736, 0fBF800000;
	setp.lt.f32 	%p211, %f129, 0fC0000000;
	add.f32 	%f660, %f659, 0fBF800000;
	selp.f32 	%f736, %f660, %f659, %p211;
	bra.uni 	$L__BB0_123;
$L__BB0_121:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p209, %f129, 0f40800000;
	@%p209 bra 	$L__BB0_123;
// %bb.122:                             // %__nv_fmaf_rn.exit.i.i.i2594
	add.f32 	%f655, %f736, 0f3F800000;
	fma.rn.f32 	%f657, %f703, 0fC0400000, %f129;
	setp.ge.f32 	%p210, %f657, 0f00000000;
	add.f32 	%f658, %f655, 0f3F800000;
	selp.f32 	%f736, %f658, %f655, %p210;
$L__BB0_123:                            // %__internal_fmodf_fastpath_quot.exit.i.i2597
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_128:                            // %__internal_fmodf_kernel.exit.i2616
	selp.f32 	%f648, %f643, %f647, %p203;
	setp.gt.f32 	%p205, %f651, 0f4B800000;
	add.f32 	%f652, %f148, 0f3F800000;
	abs.f32 	%f672, %f738;
	setp.gtu.f32 	%p217, %f672, 0f7F800000;
	@%p217 bra 	$L__BB0_130;
// %bb.129:
	mov.b32 	%r440, %f738;
	or.b32  	%r441, %r45, %r440;
	mov.b32 	%f738, %r441;
$L__BB0_130:                            // %__nv_fmodf.exit2617
	selp.f32 	%f127, %f652, %f648, %p205;
	add.f32 	%f673, %f738, %f738;
	mov.b32 	%r442, %f673;
	and.b32  	%r443, %r442, -2147483648;
	or.b32  	%r444, %r443, 1056964608;
	mov.b32 	%f674, %r444;
	add.f32 	%f675, %f673, %f674;
	cvt.rzi.f32.f32 	%f676, %f675;
	abs.f32 	%f677, %f673;
	setp.gt.f32 	%p219, %f677, 0f4B000000;
	selp.f32 	%f678, %f673, %f676, %p219;
	cvt.rzi.f32.f32 	%f679, %f673;
	setp.lt.f32 	%p220, %f677, 0f3F000000;
	selp.f32 	%f680, %f679, %f678, %p220;
	cvt.rzi.s32.f32 	%r445, %f680;
	fma.rn.f32 	%f681, %f680, 0fBF000000, %f738;
	mul.f32 	%f682, %f681, %f681;
	fma.rn.f32 	%f683, %f682, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f684, %f682, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f685, %f683, %f682, 0fC0A55DF6;
	fma.rn.f32 	%f686, %f684, %f682, 0f4081E0CF;
	fma.rn.f32 	%f687, %f682, %f681, 0f00000000;
	fma.rn.f32 	%f688, %f686, %f682, 0fC09DE9E6;
	fma.rn.f32 	%f689, %f685, %f687, 0f00000000;
	fma.rn.f32 	%f690, %f688, %f682, 0f3F800000;
	fma.rn.f32 	%f691, %f681, 0f40490FDB, %f689;
	and.b32  	%r446, %r445, 1;
	setp.eq.b32 	%p221, %r446, 1;
	selp.f32 	%f692, %f690, %f691, %p221;
	selp.f32 	%f693, %f691, %f690, %p221;
	and.b32  	%r447, %r445, 2;
	setp.eq.s32 	%p222, %r447, 0;
	neg.f32 	%f694, %f692;
	selp.f32 	%f695, %f692, %f694, %p222;
	add.s32 	%r448, %r445, 1;
	and.b32  	%r449, %r448, 2;
	setp.eq.s32 	%p223, %r449, 0;
	sub.f32 	%f697, %f230, %f693;
	selp.f32 	%f698, %f693, %f697, %p223;
	cvt.rzi.f32.f32 	%f699, %f738;
	setp.eq.f32 	%p224, %f699, %f738;
	mul.f32 	%f700, %f738, 0f00000000;
	selp.f32 	%f150, %f700, %f695, %p224;
	abs.f32 	%f701, %f738;
	setp.gt.f32 	%p225, %f701, 0f4B800000;
	add.f32 	%f702, %f150, 0f3F800000;
	selp.f32 	%f144, %f702, %f698, %p225;
	mov.f32 	%f147, %f127;
	mov.f32 	%f149, %f144;
	@%p124 bra 	$L__BB0_132;
// %bb.131:                             // %L975
	neg.f32 	%f149, %f150;
	neg.f32 	%f147, %f148;
	mov.f32 	%f148, %f127;
	mov.f32 	%f150, %f144;
$L__BB0_132:                            // %L977
	setp.gt.u32 	%p226, %r3, 15;
	mov.u32 	%r170, 999999999;
	@%p226 bra 	$L__BB0_185;
// %bb.133:                             // %L1007
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	shl.b32 	%r457, %r3, 4;
	and.b32  	%r458, %r457, 240;
	or.b32  	%r459, %r458, %r4;
	mul.wide.u32 	%rd83, %r459, 4;
	add.s64 	%rd84, %rd1, %rd83;
	ld.global.u32 	%r460, [%rd84];
	shl.b32 	%r461, %r460, 16;
	cvt.s32.s16 	%r85, %r460;
	shr.s32 	%r86, %r460, 16;
	or.b32  	%r462, %r461, 65535;
	setp.lt.u32 	%p227, %r462, 1114111;
	setp.lt.u32 	%p228, %r460, 1048576;
	and.pred  	%p229, %p227, %p228;
	@%p229 bra 	$L__BB0_184;
	bra.uni 	$L__BB0_134;
$L__BB0_184:                            // %L1247
	mul.lo.s32 	%r466, %r86, 546;
	mad.lo.s32 	%r170, %r85, 33, %r466;
$L__BB0_185:                            // %pass537
	add.f32 	%f207, %f746, %f746;
	mov.b32 	%r283, %f207;
	add.f32 	%f469, %f750, %f750;
	and.b32  	%r284, %r283, -2147483648;
	add.f32 	%f261, %f706, %f706;
	add.f32 	%f313, %f710, %f710;
	mov.b32 	%r380, %f469;
	or.b32  	%r285, %r284, 1056964608;
	mov.b32 	%r299, %f261;
	mov.b32 	%r321, %f313;
	and.b32  	%r381, %r380, -2147483648;
	add.f32 	%f521, %f726, %f726;
	add.f32 	%f571, %f730, %f730;
	mov.b32 	%f208, %r285;
	and.b32  	%r300, %r299, -2147483648;
	and.b32  	%r322, %r321, -2147483648;
	or.b32  	%r382, %r381, 1056964608;
	mov.b32 	%r394, %f521;
	mov.b32 	%r414, %f571;
	add.f32 	%f209, %f207, %f208;
	abs.f32 	%f211, %f207;
	or.b32  	%r301, %r300, 1056964608;
	or.b32  	%r323, %r322, 1056964608;
	mov.b32 	%f470, %r382;
	and.b32  	%r395, %r394, -2147483648;
	and.b32  	%r415, %r414, -2147483648;
	cvt.rzi.f32.f32 	%f210, %f209;
	setp.gt.f32 	%p37, %f211, 0f4B000000;
	mov.b32 	%f262, %r301;
	mov.b32 	%f314, %r323;
	add.f32 	%f471, %f469, %f470;
	abs.f32 	%f473, %f469;
	or.b32  	%r396, %r395, 1056964608;
	or.b32  	%r416, %r415, 1056964608;
	selp.f32 	%f212, %f207, %f210, %p37;
	cvt.rzi.f32.f32 	%f213, %f207;
	setp.lt.f32 	%p38, %f211, 0f3F000000;
	add.f32 	%f263, %f261, %f262;
	abs.f32 	%f265, %f261;
	add.f32 	%f315, %f313, %f314;
	abs.f32 	%f317, %f313;
	cvt.rzi.f32.f32 	%f472, %f471;
	setp.gt.f32 	%p139, %f473, 0f4B000000;
	mov.b32 	%f522, %r396;
	mov.b32 	%f572, %r416;
	selp.f32 	%f214, %f213, %f212, %p38;
	cvt.rzi.f32.f32 	%f264, %f263;
	setp.gt.f32 	%p57, %f265, 0f4B000000;
	cvt.rzi.f32.f32 	%f316, %f315;
	setp.gt.f32 	%p77, %f317, 0f4B000000;
	selp.f32 	%f474, %f469, %f472, %p139;
	cvt.rzi.f32.f32 	%f475, %f469;
	setp.lt.f32 	%p140, %f473, 0f3F000000;
	add.f32 	%f523, %f521, %f522;
	abs.f32 	%f525, %f521;
	add.f32 	%f573, %f571, %f572;
	abs.f32 	%f575, %f571;
	fma.rn.f32 	%f215, %f214, 0fBF000000, %f746;
	selp.f32 	%f266, %f261, %f264, %p57;
	cvt.rzi.f32.f32 	%f267, %f261;
	setp.lt.f32 	%p58, %f265, 0f3F000000;
	selp.f32 	%f318, %f313, %f316, %p77;
	cvt.rzi.f32.f32 	%f319, %f313;
	setp.lt.f32 	%p78, %f317, 0f3F000000;
	selp.f32 	%f476, %f475, %f474, %p140;
	cvt.rzi.f32.f32 	%f524, %f523;
	setp.gt.f32 	%p159, %f525, 0f4B000000;
	cvt.rzi.f32.f32 	%f574, %f573;
	setp.gt.f32 	%p179, %f575, 0f4B000000;
	mul.f32 	%f216, %f215, %f215;
	selp.f32 	%f268, %f267, %f266, %p58;
	selp.f32 	%f320, %f319, %f318, %p78;
	fma.rn.f32 	%f477, %f476, 0fBF000000, %f750;
	selp.f32 	%f526, %f521, %f524, %p159;
	cvt.rzi.f32.f32 	%f527, %f521;
	setp.lt.f32 	%p160, %f525, 0f3F000000;
	selp.f32 	%f576, %f571, %f574, %p179;
	cvt.rzi.f32.f32 	%f577, %f571;
	setp.lt.f32 	%p180, %f575, 0f3F000000;
	fma.rn.f32 	%f217, %f216, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f218, %f216, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f269, %f268, 0fBF000000, %f706;
	fma.rn.f32 	%f321, %f320, 0fBF000000, %f710;
	mul.f32 	%f478, %f477, %f477;
	selp.f32 	%f528, %f527, %f526, %p160;
	selp.f32 	%f578, %f577, %f576, %p180;
	cvt.rzi.s32.f32 	%r286, %f214;
	fma.rn.f32 	%f219, %f217, %f216, 0fC0A55DF6;
	fma.rn.f32 	%f220, %f218, %f216, 0f4081E0CF;
	fma.rn.f32 	%f221, %f216, %f215, 0f00000000;
	mul.f32 	%f270, %f269, %f269;
	mul.f32 	%f322, %f321, %f321;
	fma.rn.f32 	%f479, %f478, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f480, %f478, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f529, %f528, 0fBF000000, %f726;
	fma.rn.f32 	%f579, %f578, 0fBF000000, %f730;
	fma.rn.f32 	%f222, %f220, %f216, 0fC09DE9E6;
	fma.rn.f32 	%f223, %f219, %f221, 0f00000000;
	and.b32  	%r287, %r286, 1;
	fma.rn.f32 	%f271, %f270, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f272, %f270, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f323, %f322, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f324, %f322, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r383, %f476;
	fma.rn.f32 	%f481, %f479, %f478, 0fC0A55DF6;
	fma.rn.f32 	%f482, %f480, %f478, 0f4081E0CF;
	fma.rn.f32 	%f483, %f478, %f477, 0f00000000;
	mul.f32 	%f530, %f529, %f529;
	mul.f32 	%f580, %f579, %f579;
	fma.rn.f32 	%f224, %f222, %f216, 0f3F800000;
	fma.rn.f32 	%f225, %f215, 0f40490FDB, %f223;
	setp.eq.b32 	%p39, %r287, 1;
	cvt.rzi.s32.f32 	%r302, %f268;
	fma.rn.f32 	%f273, %f271, %f270, 0fC0A55DF6;
	fma.rn.f32 	%f274, %f272, %f270, 0f4081E0CF;
	fma.rn.f32 	%f275, %f270, %f269, 0f00000000;
	cvt.rzi.s32.f32 	%r324, %f320;
	fma.rn.f32 	%f325, %f323, %f322, 0fC0A55DF6;
	fma.rn.f32 	%f326, %f324, %f322, 0f4081E0CF;
	fma.rn.f32 	%f327, %f322, %f321, 0f00000000;
	fma.rn.f32 	%f484, %f482, %f478, 0fC09DE9E6;
	fma.rn.f32 	%f485, %f481, %f483, 0f00000000;
	and.b32  	%r384, %r383, 1;
	fma.rn.f32 	%f531, %f530, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f532, %f530, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f581, %f580, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f582, %f580, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f226, %f224, %f225, %p39;
	and.b32  	%r288, %r286, 2;
	fma.rn.f32 	%f276, %f274, %f270, 0fC09DE9E6;
	fma.rn.f32 	%f277, %f273, %f275, 0f00000000;
	and.b32  	%r303, %r302, 1;
	fma.rn.f32 	%f328, %f326, %f322, 0fC09DE9E6;
	fma.rn.f32 	%f329, %f325, %f327, 0f00000000;
	and.b32  	%r325, %r324, 1;
	fma.rn.f32 	%f486, %f484, %f478, 0f3F800000;
	fma.rn.f32 	%f487, %f477, 0f40490FDB, %f485;
	setp.eq.b32 	%p141, %r384, 1;
	cvt.rzi.s32.f32 	%r397, %f528;
	fma.rn.f32 	%f533, %f531, %f530, 0fC0A55DF6;
	fma.rn.f32 	%f534, %f532, %f530, 0f4081E0CF;
	fma.rn.f32 	%f535, %f530, %f529, 0f00000000;
	cvt.rzi.s32.f32 	%r417, %f578;
	fma.rn.f32 	%f583, %f581, %f580, 0fC0A55DF6;
	fma.rn.f32 	%f584, %f582, %f580, 0f4081E0CF;
	fma.rn.f32 	%f585, %f580, %f579, 0f00000000;
	setp.eq.s32 	%p40, %r288, 0;
	neg.f32 	%f228, %f226;
	add.s32 	%r289, %r286, 1;
	cvt.rzi.f32.f32 	%f233, %f746;
	fma.rn.f32 	%f278, %f276, %f270, 0f3F800000;
	fma.rn.f32 	%f279, %f269, 0f40490FDB, %f277;
	setp.eq.b32 	%p59, %r303, 1;
	fma.rn.f32 	%f330, %f328, %f322, 0f3F800000;
	fma.rn.f32 	%f331, %f321, 0f40490FDB, %f329;
	setp.eq.b32 	%p79, %r325, 1;
	selp.f32 	%f488, %f486, %f487, %p141;
	and.b32  	%r385, %r383, 2;
	fma.rn.f32 	%f536, %f534, %f530, 0fC09DE9E6;
	fma.rn.f32 	%f537, %f533, %f535, 0f00000000;
	and.b32  	%r398, %r397, 1;
	fma.rn.f32 	%f586, %f584, %f580, 0fC09DE9E6;
	fma.rn.f32 	%f587, %f583, %f585, 0f00000000;
	and.b32  	%r418, %r417, 1;
	selp.f32 	%f227, %f225, %f224, %p39;
	selp.f32 	%f229, %f226, %f228, %p40;
	and.b32  	%r290, %r289, 2;
	setp.eq.f32 	%p42, %f233, %f746;
	mul.f32 	%f234, %f746, 0f00000000;
	selp.f32 	%f280, %f278, %f279, %p59;
	and.b32  	%r304, %r302, 2;
	selp.f32 	%f332, %f330, %f331, %p79;
	and.b32  	%r326, %r324, 2;
	setp.eq.s32 	%p142, %r385, 0;
	neg.f32 	%f490, %f488;
	add.s32 	%r386, %r383, 1;
	cvt.rzi.f32.f32 	%f495, %f750;
	fma.rn.f32 	%f538, %f536, %f530, 0f3F800000;
	fma.rn.f32 	%f539, %f529, 0f40490FDB, %f537;
	setp.eq.b32 	%p161, %r398, 1;
	fma.rn.f32 	%f588, %f586, %f580, 0f3F800000;
	fma.rn.f32 	%f589, %f579, 0f40490FDB, %f587;
	setp.eq.b32 	%p181, %r418, 1;
	setp.eq.s32 	%p41, %r290, 0;
	sub.f32 	%f231, %f230, %f227;
	selp.f32 	%f235, %f234, %f229, %p42;
	abs.f32 	%f236, %f746;
	setp.eq.s32 	%p60, %r304, 0;
	neg.f32 	%f282, %f280;
	add.s32 	%r305, %r302, 1;
	cvt.rzi.f32.f32 	%f287, %f706;
	setp.eq.s32 	%p80, %r326, 0;
	neg.f32 	%f334, %f332;
	add.s32 	%r327, %r324, 1;
	cvt.rzi.f32.f32 	%f339, %f710;
	selp.f32 	%f489, %f487, %f486, %p141;
	selp.f32 	%f491, %f488, %f490, %p142;
	and.b32  	%r387, %r386, 2;
	setp.eq.f32 	%p144, %f495, %f750;
	mul.f32 	%f496, %f750, 0f00000000;
	selp.f32 	%f540, %f538, %f539, %p161;
	and.b32  	%r399, %r397, 2;
	selp.f32 	%f590, %f588, %f589, %p181;
	and.b32  	%r419, %r417, 2;
	selp.f32 	%f232, %f227, %f231, %p41;
	setp.gt.f32 	%p43, %f236, 0f4B800000;
	add.f32 	%f237, %f235, 0f3F800000;
	selp.f32 	%f281, %f279, %f278, %p59;
	selp.f32 	%f283, %f280, %f282, %p60;
	and.b32  	%r306, %r305, 2;
	setp.eq.f32 	%p62, %f287, %f706;
	mul.f32 	%f288, %f706, 0f00000000;
	selp.f32 	%f333, %f331, %f330, %p79;
	selp.f32 	%f335, %f332, %f334, %p80;
	and.b32  	%r328, %r327, 2;
	setp.eq.f32 	%p82, %f339, %f710;
	mul.f32 	%f340, %f710, 0f00000000;
	setp.eq.s32 	%p143, %r387, 0;
	sub.f32 	%f493, %f230, %f489;
	selp.f32 	%f497, %f496, %f491, %p144;
	abs.f32 	%f498, %f750;
	setp.eq.s32 	%p162, %r399, 0;
	neg.f32 	%f542, %f540;
	add.s32 	%r400, %r397, 1;
	cvt.rzi.f32.f32 	%f547, %f726;
	setp.eq.s32 	%p182, %r419, 0;
	neg.f32 	%f592, %f590;
	add.s32 	%r420, %r417, 1;
	cvt.rzi.f32.f32 	%f597, %f730;
	selp.f32 	%f238, %f237, %f232, %p43;
	setp.eq.s32 	%p61, %r306, 0;
	sub.f32 	%f285, %f230, %f281;
	selp.f32 	%f16, %f288, %f283, %p62;
	abs.f32 	%f289, %f706;
	setp.eq.s32 	%p81, %r328, 0;
	sub.f32 	%f337, %f230, %f333;
	selp.f32 	%f341, %f340, %f335, %p82;
	abs.f32 	%f342, %f710;
	selp.f32 	%f494, %f489, %f493, %p143;
	setp.gt.f32 	%p145, %f498, 0f4B800000;
	add.f32 	%f499, %f497, 0f3F800000;
	selp.f32 	%f541, %f539, %f538, %p161;
	selp.f32 	%f543, %f540, %f542, %p162;
	and.b32  	%r401, %r400, 2;
	setp.eq.f32 	%p164, %f547, %f726;
	mul.f32 	%f548, %f726, 0f00000000;
	selp.f32 	%f591, %f589, %f588, %p181;
	selp.f32 	%f593, %f590, %f592, %p182;
	and.b32  	%r421, %r420, 2;
	setp.eq.f32 	%p184, %f597, %f730;
	mul.f32 	%f598, %f730, 0f00000000;
	mov.b32 	%r279, %f238;
	mov.b32 	%r282, %f235;
	selp.f32 	%f286, %f281, %f285, %p61;
	setp.gt.f32 	%p63, %f289, 0f4B800000;
	add.f32 	%f290, %f16, 0f3F800000;
	selp.f32 	%f338, %f333, %f337, %p81;
	setp.gt.f32 	%p83, %f342, 0f4B800000;
	add.f32 	%f343, %f341, 0f3F800000;
	selp.f32 	%f500, %f499, %f494, %p145;
	setp.eq.s32 	%p163, %r401, 0;
	sub.f32 	%f545, %f230, %f541;
	selp.f32 	%f94, %f548, %f543, %p164;
	abs.f32 	%f549, %f726;
	setp.eq.s32 	%p183, %r421, 0;
	sub.f32 	%f595, %f230, %f591;
	selp.f32 	%f599, %f598, %f593, %p184;
	abs.f32 	%f600, %f730;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r278, %r282, -2147483648;
	selp.f32 	%f17, %f290, %f286, %p63;
	selp.f32 	%f344, %f343, %f338, %p83;
	mov.b32 	%r376, %f500;
	mov.b32 	%r379, %f497;
	selp.f32 	%f546, %f541, %f545, %p163;
	setp.gt.f32 	%p165, %f549, 0f4B800000;
	add.f32 	%f550, %f94, 0f3F800000;
	selp.f32 	%f596, %f591, %f595, %p183;
	setp.gt.f32 	%p185, %f600, 0f4B800000;
	add.f32 	%f601, %f599, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r277, %r279, %r278;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r280, %r282, %r279;
	// end inline asm
	mov.b32 	%r317, %f344;
	mov.b32 	%r316, %f17;
	mov.b32 	%r320, %f341;
	mov.b32 	%r319, %f16;
	mov.b32 	%r363, %f75;
	mov.b32 	%r364, %f77;
	mov.b32 	%r366, %f76;
	mov.b32 	%r367, %f78;
	xor.b32  	%r375, %r379, -2147483648;
	selp.f32 	%f95, %f550, %f546, %p165;
	selp.f32 	%f602, %f601, %f596, %p185;
	// begin inline asm
	cvt.rn.f16x2.f32 %r315, %r317, %r316;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r318, %r320, %r319;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r362, %r364, %r363;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r365, %r367, %r366;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r374, %r376, %r375;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r377, %r379, %r376;
	// end inline asm
	mov.b32 	%r410, %f602;
	mov.b32 	%r409, %f95;
	mov.b32 	%r413, %f599;
	mov.b32 	%r412, %f94;
	// begin inline asm
	cvt.rn.f16x2.f32 %r408, %r410, %r409;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r411, %r413, %r412;
	// end inline asm
	mov.b32 	%r451, %f147;
	mov.b32 	%r452, %f149;
	// begin inline asm
	cvt.rn.f16x2.f32 %r450, %r452, %r451;
	// end inline asm
	mov.b32 	%r454, %f148;
	mov.b32 	%r455, %f150;
	// begin inline asm
	cvt.rn.f16x2.f32 %r453, %r455, %r454;
	// end inline asm
	shl.b32 	%r468, %r4, 1;
	shr.u32 	%r469, %r3, 3;
	bfe.u32 	%r470, %r3, 3, 1;
	and.b32  	%r471, %r468, 14;
	or.b32  	%r472, %r471, %r470;
	and.b32  	%r473, %r146, 1;
	and.b32  	%r474, %r469, 2;
	or.b32  	%r475, %r473, %r474;
	shl.b32 	%r476, %r475, 4;
	shl.b32 	%r477, %r3, 6;
	and.b32  	%r478, %r477, 192;
	or.b32  	%r479, %r476, %r472;
	or.b32  	%r480, %r479, %r478;
	mul.wide.u32 	%rd90, %r480, 4;
	add.s64 	%rd91, %rd2, %rd90;
	ld.global.u32 	%r171, [%rd91];
	ld.global.u32 	%r172, [%rd91+1024];
	shl.b32 	%r481, %r248, 13;
	shl.b32 	%r482, %r252, 7;
	add.s32 	%r173, %r482, %r481;
	shl.b32 	%r483, %r1, 7;
	shl.b32 	%r484, %r3, 2;
	or.b32  	%r174, %r484, %r483;
	and.b32  	%r175, %r3, 16;
	shr.u32 	%r485, %r3, 4;
	and.b32  	%r486, %r158, 30;
	or.b32  	%r487, %r486, %r485;
	mul.lo.s32 	%r488, %r487, 257;
	and.b32  	%r489, %r5, 224;
	shr.u32 	%r490, %r4, 3;
	mad.lo.s32 	%r491, %r490, 257, %r489;
	or.b32  	%r492, %r490, 2;
	mad.lo.s32 	%r493, %r492, 257, %r489;
	or.b32  	%r494, %r490, 4;
	mad.lo.s32 	%r495, %r494, 257, %r489;
	or.b32  	%r496, %r490, 6;
	mad.lo.s32 	%r497, %r496, 257, %r489;
	or.b32  	%r498, %r490, 8;
	mad.lo.s32 	%r499, %r498, 257, %r489;
	or.b32  	%r500, %r490, 10;
	mad.lo.s32 	%r501, %r500, 257, %r489;
	or.b32  	%r502, %r490, 12;
	mad.lo.s32 	%r503, %r502, 257, %r489;
	or.b32  	%r504, %r490, 14;
	mad.lo.s32 	%r505, %r504, 257, %r489;
	or.b32  	%r506, %r490, 16;
	mad.lo.s32 	%r507, %r506, 257, %r489;
	or.b32  	%r508, %r490, 18;
	mad.lo.s32 	%r509, %r508, 257, %r489;
	or.b32  	%r510, %r490, 20;
	mad.lo.s32 	%r511, %r510, 257, %r489;
	or.b32  	%r512, %r490, 22;
	mad.lo.s32 	%r513, %r512, 257, %r489;
	or.b32  	%r514, %r490, 24;
	mad.lo.s32 	%r515, %r514, 257, %r489;
	or.b32  	%r516, %r490, 26;
	mad.lo.s32 	%r517, %r516, 257, %r489;
	or.b32  	%r518, %r490, 28;
	mad.lo.s32 	%r519, %r518, 257, %r489;
	or.b32  	%r520, %r490, 30;
	mad.lo.s32 	%r521, %r520, 257, %r489;
	mul.lo.s32 	%r522, %r145, 2184;
	mad.lo.s32 	%r523, %r475, 546, %r522;
	mad.lo.s32 	%r524, %r472, 33, %r523;
	setp.lt.u32 	%p231, %r3, 4;
	setp.eq.s32 	%p232, %r146, 4;
	setp.eq.s32 	%p233, %r146, 5;
	bfe.s32 	%r525, %r3, 2, 1;
	and.b32  	%r526, %r525, 516;
	bfe.s32 	%r527, %r3, 3, 1;
	and.b32  	%r528, %r3, 8;
	setp.eq.s32 	%p234, %r528, 0;
	and.b32  	%r529, %r527, 258;
	or.b32  	%r530, %r471, %r485;
	selp.b32 	%r531, 0, 1032, %p124;
	and.b32  	%r532, %r3, 1;
	neg.s32 	%r533, %r532;
	setp.eq.b32 	%p235, %r532, 1;
	and.b32  	%r534, %r533, 2064;
	or.b32  	%r535, %r529, %r526;
	add.s32 	%r536, %r535, %r530;
	add.s32 	%r537, %r536, %r531;
	add.s32 	%r176, %r537, %r534;
	bfe.s32 	%r538, %r4, 2, 1;
	and.b32  	%r539, %r4, 4;
	setp.eq.s32 	%p236, %r539, 0;
	and.b32  	%r540, %r538, 516;
	and.b32  	%r541, %r484, 12;
	and.b32  	%r542, %r527, 4144;
	mul.lo.s32 	%r543, %r490, 258;
	bfe.s32 	%r544, %r4, 1, 1;
	and.b32  	%r545, %r4, 2;
	setp.eq.s32 	%p237, %r545, 0;
	and.b32  	%r546, %r544, 1032;
	and.b32  	%r547, %r4, 1;
	neg.s32 	%r548, %r547;
	setp.eq.b32 	%p238, %r547, 1;
	and.b32  	%r549, %r548, 2064;
	or.b32  	%r550, %r475, %r541;
	add.s32 	%r551, %r550, %r543;
	add.s32 	%r552, %r551, %r540;
	add.s32 	%r553, %r552, %r542;
	add.s32 	%r554, %r553, %r546;
	add.s32 	%r555, %r554, %r549;
	mul.wide.u32 	%rd92, %r555, 4;
	mov.u64 	%rd93, shmem;
	add.s64 	%rd13, %rd93, %rd92;
	selp.b64 	%rd94, 2064, 0, %p238;
	selp.b64 	%rd95, 0, 1032, %p237;
	selp.b64 	%rd96, 0, 4144, %p234;
	selp.b64 	%rd97, 0, 516, %p236;
	cvt.u64.u32 	%rd98, %r543;
	cvt.u64.u32 	%rd99, %r550;
	add.s64 	%rd100, %rd99, %rd98;
	add.s64 	%rd101, %rd100, %rd97;
	add.s64 	%rd102, %rd101, %rd96;
	add.s64 	%rd103, %rd102, %rd95;
	add.s64 	%rd104, %rd103, %rd94;
	shl.b64 	%rd105, %rd104, 2;
	add.s64 	%rd14, %rd93, %rd105;
	shl.b32 	%r556, %r250, 20;
	shl.b32 	%r557, %r254, 9;
	add.s32 	%r558, %r557, %r556;
	or.b32  	%r177, %r5, %r175;
	and.b32  	%r178, %r3, 15;
	cvt.s64.s32 	%rd15, %r558;
	add.s32 	%r559, %r4, %r488;
	mul.wide.u32 	%rd106, %r559, 4;
	add.s64 	%rd16, %rd93, %rd106;
	cvt.u64.u32 	%rd107, %r4;
	cvt.u64.u32 	%rd17, %r488;
	add.s64 	%rd108, %rd17, %rd107;
	shl.b64 	%rd109, %rd108, 2;
	add.s64 	%rd18, %rd93, %rd109;
	add.s32 	%r560, %r491, %r3;
	mul.wide.u32 	%rd110, %r560, 4;
	add.s64 	%rd19, %rd93, %rd110;
	add.s32 	%r561, %r493, %r3;
	mul.wide.u32 	%rd111, %r561, 4;
	add.s64 	%rd20, %rd93, %rd111;
	add.s32 	%r562, %r495, %r3;
	mul.wide.u32 	%rd112, %r562, 4;
	add.s64 	%rd21, %rd93, %rd112;
	add.s32 	%r563, %r497, %r3;
	mul.wide.u32 	%rd113, %r563, 4;
	add.s64 	%rd22, %rd93, %rd113;
	add.s32 	%r564, %r499, %r3;
	mul.wide.u32 	%rd114, %r564, 4;
	add.s64 	%rd23, %rd93, %rd114;
	add.s32 	%r565, %r501, %r3;
	mul.wide.u32 	%rd115, %r565, 4;
	add.s64 	%rd24, %rd93, %rd115;
	add.s32 	%r566, %r503, %r3;
	mul.wide.u32 	%rd116, %r566, 4;
	add.s64 	%rd25, %rd93, %rd116;
	add.s32 	%r567, %r505, %r3;
	mul.wide.u32 	%rd117, %r567, 4;
	add.s64 	%rd26, %rd93, %rd117;
	add.s32 	%r568, %r507, %r3;
	mul.wide.u32 	%rd118, %r568, 4;
	add.s64 	%rd27, %rd93, %rd118;
	add.s32 	%r569, %r509, %r3;
	mul.wide.u32 	%rd119, %r569, 4;
	add.s64 	%rd28, %rd93, %rd119;
	add.s32 	%r570, %r511, %r3;
	mul.wide.u32 	%rd120, %r570, 4;
	add.s64 	%rd29, %rd93, %rd120;
	add.s32 	%r571, %r513, %r3;
	mul.wide.u32 	%rd121, %r571, 4;
	add.s64 	%rd30, %rd93, %rd121;
	add.s32 	%r572, %r515, %r3;
	mul.wide.u32 	%rd122, %r572, 4;
	add.s64 	%rd31, %rd93, %rd122;
	add.s32 	%r573, %r517, %r3;
	mul.wide.u32 	%rd123, %r573, 4;
	add.s64 	%rd32, %rd93, %rd123;
	add.s32 	%r574, %r519, %r3;
	mul.wide.u32 	%rd124, %r574, 4;
	add.s64 	%rd33, %rd93, %rd124;
	add.s32 	%r575, %r521, %r3;
	mul.wide.u32 	%rd125, %r575, 4;
	add.s64 	%rd34, %rd93, %rd125;
	add.s32 	%r576, %r524, %r490;
	mul.wide.u32 	%rd126, %r576, 4;
	add.s64 	%rd35, %rd93, %rd126;
	add.s32 	%r577, %r524, %r492;
	mul.wide.u32 	%rd127, %r577, 4;
	add.s64 	%rd36, %rd93, %rd127;
	add.s32 	%r578, %r524, %r494;
	mul.wide.u32 	%rd128, %r578, 4;
	add.s64 	%rd37, %rd93, %rd128;
	add.s32 	%r579, %r524, %r496;
	mul.wide.u32 	%rd129, %r579, 4;
	add.s64 	%rd38, %rd93, %rd129;
	add.s32 	%r580, %r524, %r498;
	mul.wide.u32 	%rd130, %r580, 4;
	add.s64 	%rd39, %rd93, %rd130;
	add.s32 	%r581, %r524, %r500;
	mul.wide.u32 	%rd131, %r581, 4;
	add.s64 	%rd40, %rd93, %rd131;
	add.s32 	%r582, %r524, %r502;
	mul.wide.u32 	%rd132, %r582, 4;
	add.s64 	%rd41, %rd93, %rd132;
	add.s32 	%r583, %r524, %r504;
	mul.wide.u32 	%rd133, %r583, 4;
	add.s64 	%rd42, %rd93, %rd133;
	add.s32 	%r584, %r524, %r506;
	mul.wide.u32 	%rd134, %r584, 4;
	add.s64 	%rd43, %rd93, %rd134;
	add.s32 	%r585, %r524, %r508;
	mul.wide.u32 	%rd135, %r585, 4;
	add.s64 	%rd44, %rd93, %rd135;
	add.s32 	%r586, %r524, %r510;
	mul.wide.u32 	%rd136, %r586, 4;
	add.s64 	%rd45, %rd93, %rd136;
	add.s32 	%r587, %r524, %r512;
	mul.wide.u32 	%rd137, %r587, 4;
	add.s64 	%rd46, %rd93, %rd137;
	add.s32 	%r588, %r524, %r514;
	mul.wide.u32 	%rd138, %r588, 4;
	add.s64 	%rd47, %rd93, %rd138;
	add.s32 	%r589, %r524, %r516;
	mul.wide.u32 	%rd139, %r589, 4;
	add.s64 	%rd48, %rd93, %rd139;
	add.s32 	%r590, %r524, %r518;
	mul.wide.u32 	%rd140, %r590, 4;
	add.s64 	%rd49, %rd93, %rd140;
	add.s32 	%r591, %r524, %r520;
	mul.wide.u32 	%rd141, %r591, 4;
	add.s64 	%rd50, %rd93, %rd141;
	add.s32 	%r592, %r146, -1;
	setp.lt.u32 	%p239, %r592, 3;
	or.pred  	%p240, %p231, %p239;
	or.pred  	%p241, %p240, %p232;
	and.b32  	%r593, %r3, 24;
	setp.eq.s32 	%p242, %r593, 24;
	or.pred  	%p243, %p233, %p242;
	selp.b32 	%r179, 1145324612, -286331154, %p240;
	or.pred  	%p1, %p241, %p243;
	shl.b32 	%r180, %r490, 5;
	add.s32 	%r594, %r176, %r180;
	mul.wide.u32 	%rd142, %r594, 4;
	add.s64 	%rd51, %rd93, %rd142;
	cvt.u64.u32 	%rd143, %r180;
	selp.b64 	%rd144, 2064, 0, %p235;
	selp.b64 	%rd145, 0, 1032, %p124;
	cvt.u64.u32 	%rd146, %r530;
	cvt.u64.u32 	%rd147, %r535;
	add.s64 	%rd148, %rd147, %rd146;
	add.s64 	%rd149, %rd148, %rd145;
	add.s64 	%rd52, %rd149, %rd144;
	add.s64 	%rd150, %rd52, %rd143;
	shl.b64 	%rd151, %rd150, 2;
	add.s64 	%rd53, %rd93, %rd151;
	shl.b32 	%r595, %r492, 5;
	add.s32 	%r596, %r176, %r595;
	mul.wide.u32 	%rd152, %r596, 4;
	add.s64 	%rd54, %rd93, %rd152;
	cvt.u64.u32 	%rd153, %r595;
	add.s64 	%rd154, %rd52, %rd153;
	shl.b64 	%rd155, %rd154, 2;
	add.s64 	%rd55, %rd93, %rd155;
	shl.b32 	%r597, %r494, 5;
	add.s32 	%r598, %r176, %r597;
	mul.wide.u32 	%rd156, %r598, 4;
	add.s64 	%rd56, %rd93, %rd156;
	cvt.u64.u32 	%rd157, %r597;
	add.s64 	%rd158, %rd52, %rd157;
	shl.b64 	%rd159, %rd158, 2;
	add.s64 	%rd57, %rd93, %rd159;
	shl.b32 	%r599, %r496, 5;
	add.s32 	%r600, %r176, %r599;
	mul.wide.u32 	%rd160, %r600, 4;
	add.s64 	%rd58, %rd93, %rd160;
	cvt.u64.u32 	%rd161, %r599;
	add.s64 	%rd162, %rd52, %rd161;
	shl.b64 	%rd163, %rd162, 2;
	add.s64 	%rd59, %rd93, %rd163;
	add.s32 	%r601, %r555, 32;
	mul.wide.u32 	%rd164, %r601, 4;
	add.s64 	%rd60, %rd93, %rd164;
	add.s32 	%r602, %r555, 48;
	mul.wide.u32 	%rd165, %r602, 4;
	add.s64 	%rd61, %rd93, %rd165;
	add.s32 	%r603, %r555, 64;
	mul.wide.u32 	%rd166, %r603, 4;
	add.s64 	%rd62, %rd93, %rd166;
	add.s32 	%r604, %r555, 80;
	mul.wide.u32 	%rd167, %r604, 4;
	add.s64 	%rd63, %rd93, %rd167;
	add.s32 	%r605, %r555, 96;
	mul.wide.u32 	%rd168, %r605, 4;
	add.s64 	%rd64, %rd93, %rd168;
	add.s32 	%r606, %r555, 112;
	mul.wide.u32 	%rd169, %r606, 4;
	add.s64 	%rd65, %rd93, %rd169;
	add.s32 	%r607, %r555, 128;
	mul.wide.u32 	%rd170, %r607, 4;
	add.s64 	%rd66, %rd93, %rd170;
	add.s32 	%r608, %r555, 144;
	mul.wide.u32 	%rd171, %r608, 4;
	add.s64 	%rd67, %rd93, %rd171;
	add.s32 	%r609, %r555, 160;
	mul.wide.u32 	%rd172, %r609, 4;
	add.s64 	%rd68, %rd93, %rd172;
	add.s32 	%r610, %r555, 176;
	mul.wide.u32 	%rd173, %r610, 4;
	add.s64 	%rd69, %rd93, %rd173;
	add.s32 	%r611, %r555, 192;
	mul.wide.u32 	%rd174, %r611, 4;
	add.s64 	%rd70, %rd93, %rd174;
	add.s32 	%r612, %r555, 208;
	mul.wide.u32 	%rd175, %r612, 4;
	add.s64 	%rd71, %rd93, %rd175;
	add.s32 	%r613, %r555, 224;
	mul.wide.u32 	%rd176, %r613, 4;
	add.s64 	%rd72, %rd93, %rd176;
	add.s32 	%r614, %r555, 240;
	mul.wide.u32 	%rd177, %r614, 4;
	add.s64 	%rd73, %rd93, %rd177;
	mov.u32 	%r88, 0;
	setp.eq.s32 	%p245, %r175, 0;
	mov.u16 	%rs38, 25600;
	mov.u16 	%rs40, 21504;
	mov.u16 	%rs44, 18432;
	mov.u32 	%r3398, %r88;
	mov.u32 	%r3399, %r88;
	mov.u32 	%r3400, %r88;
	bra.uni 	$L__BB0_186;
$L__BB0_157:                            // %L46087
                                        //   in Loop: Header=BB0_186 Depth=1
	add.s32 	%r144, %r88, 64;
	setp.ne.s32 	%p294, %r88, 65472;
	mov.u32 	%r88, %r144;
	@%p294 bra 	$L__BB0_186;
	bra.uni 	$L__BB0_158;
$L__BB0_186:                            // %L1556
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_204 Depth 2
                                        //     Child Loop BB0_154 Depth 2
	add.s32 	%r615, %r88, %r248;
	setp.lt.s32 	%p244, %r615, %r249;
	@%p244 bra 	$L__BB0_187;
	bra.uni 	$L__BB0_158;
$L__BB0_187:                            // %pass717
                                        //   in Loop: Header=BB0_186 Depth=1
	cvt.u32.u64 	%r808, %rd17;
	or.b32  	%r809, %r88, %r4;
	shl.b32 	%r810, %r809, 13;
	and.b32  	%r811, %r810, 536469504;
	or.b32  	%r812, %r174, %r811;
	add.s32 	%r813, %r173, %r812;
	shr.s32 	%r814, %r813, 31;
	shr.u32 	%r815, %r814, 3;
	add.s32 	%r816, %r813, %r815;
	shr.s32 	%r817, %r816, 29;
	setp.lt.s32 	%p246, %r813, 0;
	and.b32  	%r818, %r816, -536870912;
	setp.ne.s32 	%p247, %r818, %r813;
	and.pred  	%p248, %p246, %p247;
	selp.u32 	%r819, 1, 0, %p248;
	sub.s32 	%r820, %r819, %r817;
	shl.b32 	%r821, %r820, 29;
	add.s32 	%r822, %r821, %r813;
	mul.wide.s32 	%rd178, %r822, 4;
	add.s64 	%rd179, %rd3, %rd178;
	ld.global.v4.u32 	{%r823, %r824, %r825, %r826}, [%rd179];
	or.b32  	%r827, %r809, 16;
	shl.b32 	%r828, %r827, 13;
	and.b32  	%r829, %r828, 536600576;
	or.b32  	%r830, %r174, %r829;
	add.s32 	%r831, %r173, %r830;
	shr.s32 	%r832, %r831, 31;
	shr.u32 	%r833, %r832, 3;
	add.s32 	%r834, %r831, %r833;
	shr.s32 	%r835, %r834, 29;
	setp.lt.s32 	%p249, %r831, 0;
	and.b32  	%r836, %r834, -536870912;
	setp.ne.s32 	%p250, %r836, %r831;
	and.pred  	%p251, %p249, %p250;
	selp.u32 	%r837, 1, 0, %p251;
	sub.s32 	%r838, %r837, %r835;
	shl.b32 	%r839, %r838, 29;
	add.s32 	%r840, %r839, %r831;
	mul.wide.s32 	%rd180, %r840, 4;
	add.s64 	%rd181, %rd3, %rd180;
	ld.global.v4.u32 	{%r841, %r842, %r843, %r844}, [%rd181];
	and.b32  	%r845, %r88, 65472;
	or.b32  	%r846, %r4, %r845;
	shl.b32 	%r847, %r846, 13;
	or.b32  	%r848, %r847, %r174;
	or.b32  	%r849, %r848, 262144;
	add.s32 	%r850, %r173, %r849;
	shr.s32 	%r851, %r850, 31;
	shr.u32 	%r852, %r851, 3;
	add.s32 	%r853, %r850, %r852;
	shr.s32 	%r854, %r853, 29;
	setp.lt.s32 	%p252, %r850, 0;
	and.b32  	%r855, %r853, -536870912;
	setp.ne.s32 	%p253, %r855, %r850;
	and.pred  	%p254, %p252, %p253;
	selp.u32 	%r856, 1, 0, %p254;
	sub.s32 	%r857, %r856, %r854;
	shl.b32 	%r858, %r857, 29;
	add.s32 	%r859, %r858, %r850;
	mul.wide.s32 	%rd182, %r859, 4;
	add.s64 	%rd183, %rd3, %rd182;
	ld.global.v4.u32 	{%r860, %r861, %r862, %r863}, [%rd183];
	or.b32  	%r864, %r848, 393216;
	add.s32 	%r865, %r173, %r864;
	shr.s32 	%r866, %r865, 31;
	shr.u32 	%r867, %r866, 3;
	add.s32 	%r868, %r865, %r867;
	shr.s32 	%r869, %r868, 29;
	setp.lt.s32 	%p255, %r865, 0;
	and.b32  	%r870, %r868, -536870912;
	setp.ne.s32 	%p256, %r870, %r865;
	and.pred  	%p257, %p255, %p256;
	selp.u32 	%r871, 1, 0, %p257;
	sub.s32 	%r872, %r871, %r869;
	shl.b32 	%r873, %r872, 29;
	add.s32 	%r874, %r873, %r865;
	mul.wide.s32 	%rd184, %r874, 4;
	add.s64 	%rd185, %rd3, %rd184;
	ld.global.v4.u32 	{%r875, %r876, %r877, %r878}, [%rd185];
	selp.b32 	%r879, %r825, %r823, %p245;
	shfl.sync.bfly.b32	%r880, %r879, 16, 31, -1;
	selp.b32 	%r618, %r823, %r880, %p245;
	selp.b32 	%r623, %r880, %r825, %p245;
	selp.b32 	%r881, %r826, %r824, %p245;
	shfl.sync.bfly.b32	%r882, %r881, 16, 31, -1;
	selp.b32 	%r626, %r824, %r882, %p245;
	selp.b32 	%r631, %r882, %r826, %p245;
	selp.b32 	%r883, %r843, %r841, %p245;
	shfl.sync.bfly.b32	%r884, %r883, 16, 31, -1;
	selp.b32 	%r634, %r841, %r884, %p245;
	selp.b32 	%r639, %r884, %r843, %p245;
	selp.b32 	%r885, %r844, %r842, %p245;
	shfl.sync.bfly.b32	%r886, %r885, 16, 31, -1;
	selp.b32 	%r642, %r842, %r886, %p245;
	selp.b32 	%r647, %r886, %r844, %p245;
	selp.b32 	%r887, %r862, %r860, %p245;
	shfl.sync.bfly.b32	%r888, %r887, 16, 31, -1;
	selp.b32 	%r650, %r860, %r888, %p245;
	selp.b32 	%r655, %r888, %r862, %p245;
	selp.b32 	%r889, %r863, %r861, %p245;
	shfl.sync.bfly.b32	%r890, %r889, 16, 31, -1;
	selp.b32 	%r658, %r861, %r890, %p245;
	selp.b32 	%r663, %r890, %r863, %p245;
	selp.b32 	%r891, %r877, %r875, %p245;
	shfl.sync.bfly.b32	%r892, %r891, 16, 31, -1;
	selp.b32 	%r666, %r875, %r892, %p245;
	selp.b32 	%r671, %r892, %r877, %p245;
	selp.b32 	%r893, %r878, %r876, %p245;
	shfl.sync.bfly.b32	%r894, %r893, 16, 31, -1;
	selp.b32 	%r674, %r876, %r894, %p245;
	selp.b32 	%r679, %r894, %r878, %p245;
	shl.b32 	%r619, %r623, 4;
	mov.u32 	%r617, 252645135;
	// begin inline asm
	lop3.b32 %r681, %r617, %r618, %r619, 202;
	// end inline asm
	shr.u32 	%r622, %r618, 4;
	// begin inline asm
	lop3.b32 %r697, %r617, %r622, %r623, 202;
	// end inline asm
	shl.b32 	%r627, %r631, 4;
	// begin inline asm
	lop3.b32 %r689, %r617, %r626, %r627, 202;
	// end inline asm
	shr.u32 	%r630, %r626, 4;
	// begin inline asm
	lop3.b32 %r705, %r617, %r630, %r631, 202;
	// end inline asm
	shl.b32 	%r635, %r639, 4;
	// begin inline asm
	lop3.b32 %r713, %r617, %r634, %r635, 202;
	// end inline asm
	shr.u32 	%r638, %r634, 4;
	// begin inline asm
	lop3.b32 %r729, %r617, %r638, %r639, 202;
	// end inline asm
	shl.b32 	%r643, %r647, 4;
	// begin inline asm
	lop3.b32 %r721, %r617, %r642, %r643, 202;
	// end inline asm
	shr.u32 	%r646, %r642, 4;
	// begin inline asm
	lop3.b32 %r737, %r617, %r646, %r647, 202;
	// end inline asm
	shl.b32 	%r651, %r655, 4;
	// begin inline asm
	lop3.b32 %r682, %r617, %r650, %r651, 202;
	// end inline asm
	shr.u32 	%r654, %r650, 4;
	// begin inline asm
	lop3.b32 %r698, %r617, %r654, %r655, 202;
	// end inline asm
	shl.b32 	%r659, %r663, 4;
	// begin inline asm
	lop3.b32 %r690, %r617, %r658, %r659, 202;
	// end inline asm
	shr.u32 	%r662, %r658, 4;
	// begin inline asm
	lop3.b32 %r706, %r617, %r662, %r663, 202;
	// end inline asm
	shl.b32 	%r667, %r671, 4;
	// begin inline asm
	lop3.b32 %r714, %r617, %r666, %r667, 202;
	// end inline asm
	shr.u32 	%r670, %r666, 4;
	// begin inline asm
	lop3.b32 %r730, %r617, %r670, %r671, 202;
	// end inline asm
	shl.b32 	%r675, %r679, 4;
	// begin inline asm
	lop3.b32 %r722, %r617, %r674, %r675, 202;
	// end inline asm
	shr.u32 	%r678, %r674, 4;
	// begin inline asm
	lop3.b32 %r738, %r617, %r678, %r679, 202;
	// end inline asm
	mov.u32 	%r683, 25152;
	// begin inline asm
	prmt.b32 %r745, %r681, %r682, %r683;
	// end inline asm
	mov.u32 	%r687, 29521;
	// begin inline asm
	prmt.b32 %r777, %r681, %r682, %r687;
	// end inline asm
	// begin inline asm
	prmt.b32 %r753, %r689, %r690, %r683;
	// end inline asm
	// begin inline asm
	prmt.b32 %r785, %r689, %r690, %r687;
	// end inline asm
	// begin inline asm
	prmt.b32 %r746, %r697, %r698, %r683;
	// end inline asm
	// begin inline asm
	prmt.b32 %r778, %r697, %r698, %r687;
	// end inline asm
	// begin inline asm
	prmt.b32 %r754, %r705, %r706, %r683;
	// end inline asm
	// begin inline asm
	prmt.b32 %r786, %r705, %r706, %r687;
	// end inline asm
	// begin inline asm
	prmt.b32 %r761, %r713, %r714, %r683;
	// end inline asm
	// begin inline asm
	prmt.b32 %r793, %r713, %r714, %r687;
	// end inline asm
	// begin inline asm
	prmt.b32 %r769, %r721, %r722, %r683;
	// end inline asm
	// begin inline asm
	prmt.b32 %r801, %r721, %r722, %r687;
	// end inline asm
	// begin inline asm
	prmt.b32 %r762, %r729, %r730, %r683;
	// end inline asm
	// begin inline asm
	prmt.b32 %r794, %r729, %r730, %r687;
	// end inline asm
	// begin inline asm
	prmt.b32 %r770, %r737, %r738, %r683;
	// end inline asm
	// begin inline asm
	prmt.b32 %r802, %r737, %r738, %r687;
	// end inline asm
	mov.u32 	%r803, 21520;
	// begin inline asm
	prmt.b32 %r744, %r745, %r746, %r803;
	// end inline asm
	mov.u32 	%r807, 30258;
	// begin inline asm
	prmt.b32 %r748, %r745, %r746, %r807;
	// end inline asm
	// begin inline asm
	prmt.b32 %r752, %r753, %r754, %r803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r756, %r753, %r754, %r807;
	// end inline asm
	// begin inline asm
	prmt.b32 %r760, %r761, %r762, %r803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r764, %r761, %r762, %r807;
	// end inline asm
	// begin inline asm
	prmt.b32 %r768, %r769, %r770, %r803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r772, %r769, %r770, %r807;
	// end inline asm
	// begin inline asm
	prmt.b32 %r776, %r777, %r778, %r803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r780, %r777, %r778, %r807;
	// end inline asm
	// begin inline asm
	prmt.b32 %r784, %r785, %r786, %r803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r788, %r785, %r786, %r807;
	// end inline asm
	// begin inline asm
	prmt.b32 %r792, %r793, %r794, %r803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r796, %r793, %r794, %r807;
	// end inline asm
	// begin inline asm
	prmt.b32 %r800, %r801, %r802, %r803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r804, %r801, %r802, %r807;
	// end inline asm
	st.shared.u32 	[%rd16], %r744;
	st.shared.u32 	[%rd18+512], %r752;
	st.shared.u32 	[%rd18+256], %r748;
	st.shared.u32 	[%rd18+768], %r756;
	and.b32  	%r895, %r827, 31;
	add.s32 	%r896, %r895, %r808;
	mul.wide.u32 	%rd186, %r896, 4;
	add.s64 	%rd188, %rd93, %rd186;
	st.shared.u32 	[%rd188], %r760;
	cvt.u64.u32 	%rd189, %r895;
	add.s64 	%rd190, %rd17, %rd189;
	shl.b64 	%rd191, %rd190, 2;
	add.s64 	%rd192, %rd93, %rd191;
	st.shared.u32 	[%rd192+512], %r768;
	st.shared.u32 	[%rd192+256], %r764;
	st.shared.u32 	[%rd192+768], %r772;
	st.shared.u32 	[%rd18+128], %r776;
	st.shared.u32 	[%rd18+640], %r784;
	st.shared.u32 	[%rd18+384], %r780;
	st.shared.u32 	[%rd18+896], %r788;
	st.shared.u32 	[%rd192+128], %r792;
	st.shared.u32 	[%rd192+640], %r800;
	st.shared.u32 	[%rd192+384], %r796;
	st.shared.u32 	[%rd192+896], %r804;
	bar.sync 	0;
	ld.shared.u32 	%r181, [%rd19];
	ld.shared.u32 	%r182, [%rd20];
	ld.shared.u32 	%r183, [%rd21];
	ld.shared.u32 	%r184, [%rd22];
	ld.shared.u32 	%r185, [%rd23];
	ld.shared.u32 	%r186, [%rd24];
	ld.shared.u32 	%r187, [%rd25];
	ld.shared.u32 	%r188, [%rd26];
	ld.shared.u32 	%r189, [%rd27];
	ld.shared.u32 	%r190, [%rd28];
	ld.shared.u32 	%r191, [%rd29];
	ld.shared.u32 	%r192, [%rd30];
	ld.shared.u32 	%r193, [%rd31];
	ld.shared.u32 	%r194, [%rd32];
	ld.shared.u32 	%r195, [%rd33];
	ld.shared.u32 	%r196, [%rd34];
	bar.sync 	0;
	shfl.sync.idx.b32	%r197, %r170, 0, 31, -1;
	shfl.sync.idx.b32	%r198, %r170, 1, 31, -1;
	shfl.sync.idx.b32	%r199, %r170, 2, 31, -1;
	shfl.sync.idx.b32	%r200, %r170, 3, 31, -1;
	shfl.sync.idx.b32	%r201, %r170, 4, 31, -1;
	shfl.sync.idx.b32	%r202, %r170, 5, 31, -1;
	shfl.sync.idx.b32	%r203, %r170, 6, 31, -1;
	shfl.sync.idx.b32	%r204, %r170, 7, 31, -1;
	shfl.sync.idx.b32	%r205, %r170, 8, 31, -1;
	shfl.sync.idx.b32	%r206, %r170, 9, 31, -1;
	shfl.sync.idx.b32	%r207, %r170, 10, 31, -1;
	shfl.sync.idx.b32	%r208, %r170, 11, 31, -1;
	shfl.sync.idx.b32	%r209, %r170, 12, 31, -1;
	shfl.sync.idx.b32	%r210, %r170, 13, 31, -1;
	shfl.sync.idx.b32	%r211, %r170, 14, 31, -1;
	shfl.sync.idx.b32	%r212, %r170, 15, 31, -1;
	setp.eq.s32 	%p258, %r197, 999999999;
	@%p258 bra 	$L__BB0_135;
// %bb.188:                             // %pass3061
                                        //   in Loop: Header=BB0_186 Depth=1
	add.s32 	%r897, %r197, %r3;
	mul.wide.s32 	%rd193, %r897, 4;
	add.s64 	%rd195, %rd93, %rd193;
	st.shared.u32 	[%rd195], %r181;
	setp.eq.s32 	%p259, %r198, 999999999;
	@%p259 bra 	$L__BB0_136;
// %bb.189:                             // %pass3129
                                        //   in Loop: Header=BB0_186 Depth=1
	add.s32 	%r898, %r198, %r3;
	mul.wide.s32 	%rd196, %r898, 4;
	add.s64 	%rd198, %rd93, %rd196;
	st.shared.u32 	[%rd198], %r182;
	setp.eq.s32 	%p260, %r199, 999999999;
	@%p260 bra 	$L__BB0_137;
// %bb.190:                             // %pass3197
                                        //   in Loop: Header=BB0_186 Depth=1
	add.s32 	%r899, %r199, %r3;
	mul.wide.s32 	%rd199, %r899, 4;
	add.s64 	%rd201, %rd93, %rd199;
	st.shared.u32 	[%rd201], %r183;
	setp.eq.s32 	%p261, %r200, 999999999;
	@%p261 bra 	$L__BB0_138;
// %bb.191:                             // %pass3265
                                        //   in Loop: Header=BB0_186 Depth=1
	add.s32 	%r900, %r200, %r3;
	mul.wide.s32 	%rd202, %r900, 4;
	add.s64 	%rd204, %rd93, %rd202;
	st.shared.u32 	[%rd204], %r184;
	setp.eq.s32 	%p262, %r201, 999999999;
	@%p262 bra 	$L__BB0_139;
// %bb.192:                             // %pass3333
                                        //   in Loop: Header=BB0_186 Depth=1
	add.s32 	%r901, %r201, %r3;
	mul.wide.s32 	%rd205, %r901, 4;
	add.s64 	%rd207, %rd93, %rd205;
	st.shared.u32 	[%rd207], %r185;
	setp.eq.s32 	%p263, %r202, 999999999;
	@%p263 bra 	$L__BB0_140;
// %bb.193:                             // %pass3401
                                        //   in Loop: Header=BB0_186 Depth=1
	add.s32 	%r902, %r202, %r3;
	mul.wide.s32 	%rd208, %r902, 4;
	add.s64 	%rd210, %rd93, %rd208;
	st.shared.u32 	[%rd210], %r186;
	setp.eq.s32 	%p264, %r203, 999999999;
	@%p264 bra 	$L__BB0_141;
// %bb.194:                             // %pass3469
                                        //   in Loop: Header=BB0_186 Depth=1
	add.s32 	%r903, %r203, %r3;
	mul.wide.s32 	%rd211, %r903, 4;
	add.s64 	%rd213, %rd93, %rd211;
	st.shared.u32 	[%rd213], %r187;
	setp.eq.s32 	%p265, %r204, 999999999;
	@%p265 bra 	$L__BB0_142;
// %bb.195:                             // %pass3537
                                        //   in Loop: Header=BB0_186 Depth=1
	add.s32 	%r904, %r204, %r3;
	mul.wide.s32 	%rd214, %r904, 4;
	add.s64 	%rd216, %rd93, %rd214;
	st.shared.u32 	[%rd216], %r188;
	setp.eq.s32 	%p266, %r205, 999999999;
	@%p266 bra 	$L__BB0_143;
// %bb.196:                             // %pass3605
                                        //   in Loop: Header=BB0_186 Depth=1
	add.s32 	%r905, %r205, %r3;
	mul.wide.s32 	%rd217, %r905, 4;
	add.s64 	%rd219, %rd93, %rd217;
	st.shared.u32 	[%rd219], %r189;
	setp.eq.s32 	%p267, %r206, 999999999;
	@%p267 bra 	$L__BB0_144;
// %bb.197:                             // %pass3673
                                        //   in Loop: Header=BB0_186 Depth=1
	add.s32 	%r906, %r206, %r3;
	mul.wide.s32 	%rd220, %r906, 4;
	add.s64 	%rd222, %rd93, %rd220;
	st.shared.u32 	[%rd222], %r190;
	setp.eq.s32 	%p268, %r207, 999999999;
	@%p268 bra 	$L__BB0_145;
// %bb.198:                             // %pass3741
                                        //   in Loop: Header=BB0_186 Depth=1
	add.s32 	%r907, %r207, %r3;
	mul.wide.s32 	%rd223, %r907, 4;
	add.s64 	%rd225, %rd93, %rd223;
	st.shared.u32 	[%rd225], %r191;
	setp.eq.s32 	%p269, %r208, 999999999;
	@%p269 bra 	$L__BB0_146;
// %bb.199:                             // %pass3809
                                        //   in Loop: Header=BB0_186 Depth=1
	add.s32 	%r908, %r208, %r3;
	mul.wide.s32 	%rd226, %r908, 4;
	add.s64 	%rd228, %rd93, %rd226;
	st.shared.u32 	[%rd228], %r192;
	setp.eq.s32 	%p270, %r209, 999999999;
	@%p270 bra 	$L__BB0_147;
// %bb.200:                             // %pass3877
                                        //   in Loop: Header=BB0_186 Depth=1
	add.s32 	%r909, %r209, %r3;
	mul.wide.s32 	%rd229, %r909, 4;
	add.s64 	%rd231, %rd93, %rd229;
	st.shared.u32 	[%rd231], %r193;
	setp.eq.s32 	%p271, %r210, 999999999;
	@%p271 bra 	$L__BB0_148;
// %bb.201:                             // %pass3945
                                        //   in Loop: Header=BB0_186 Depth=1
	add.s32 	%r910, %r210, %r3;
	mul.wide.s32 	%rd232, %r910, 4;
	add.s64 	%rd234, %rd93, %rd232;
	st.shared.u32 	[%rd234], %r194;
	setp.eq.s32 	%p272, %r211, 999999999;
	@%p272 bra 	$L__BB0_149;
// %bb.202:                             // %pass4013
                                        //   in Loop: Header=BB0_186 Depth=1
	add.s32 	%r911, %r211, %r3;
	mul.wide.s32 	%rd235, %r911, 4;
	add.s64 	%rd237, %rd93, %rd235;
	st.shared.u32 	[%rd237], %r195;
	setp.eq.s32 	%p273, %r212, 999999999;
	@%p273 bra 	$L__BB0_150;
// %bb.203:                             // %pass4081
                                        //   in Loop: Header=BB0_186 Depth=1
	add.s32 	%r913, %r212, %r3;
	mul.wide.s32 	%rd238, %r913, 4;
	add.s64 	%rd240, %rd93, %rd238;
	st.shared.u32 	[%rd240], %r196;
	bar.sync 	0;
	ld.shared.u32 	%r213, [%rd35];
	ld.shared.u32 	%r214, [%rd36];
	ld.shared.u32 	%r215, [%rd37];
	ld.shared.u32 	%r216, [%rd38];
	ld.shared.u32 	%r217, [%rd39];
	ld.shared.u32 	%r218, [%rd40];
	ld.shared.u32 	%r219, [%rd41];
	ld.shared.u32 	%r220, [%rd42];
	ld.shared.u32 	%r221, [%rd43];
	ld.shared.u32 	%r222, [%rd44];
	ld.shared.u32 	%r223, [%rd45];
	ld.shared.u32 	%r224, [%rd46];
	ld.shared.u32 	%r225, [%rd47];
	ld.shared.u32 	%r226, [%rd48];
	ld.shared.u32 	%r227, [%rd49];
	ld.shared.u32 	%r228, [%rd50];
	bar.sync 	0;
	mov.u32 	%r3390, 16;
	bra.uni 	$L__BB0_204;
$L__BB0_151:                            // %L21573
                                        //   in Loop: Header=BB0_204 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1462, [%rd13];
	ld.shared.u32 	%r1469, [%rd14+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1479, %r1476}, {%r374, %r377}, {%r1462}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1488, %r1485}, {%r374, %r377}, {%r1469}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1472, %r411;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1474, %r1472, %r1476;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1477, %r408, %r1479, %r1474;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1481, %r411;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1483, %r1481, %r1485;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1486, %r408, %r1488, %r1483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1490, %r411, %r1479;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1493, %r408, %r1476, %r1490;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1497, %r411, %r1488;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1500, %r408, %r1485, %r1497;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1523, %r1526}, {%r450, %r453}, {%r1477, %r1493}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1530, %r1534}, {%r450, %r453}, {%r1486, %r1500}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1522, %r1523, %r1523;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1525, %r1526, %r1526, %r1522;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1529, %r1530, %r1530, %r1525;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1533, %r1534, %r1534, %r1529;
	// end inline asm
	mov.u32 	%r2119, 223677781;
	// begin inline asm
	fma.rn.f16x2 %r1537, %r2119, %r1533, %r3400;
	// end inline asm
	ld.shared.u32 	%r1545, [%rd60];
	ld.shared.u32 	%r1552, [%rd61];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1562, %r1559}, {%r374, %r377}, {%r1545}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1571, %r1568}, {%r374, %r377}, {%r1552}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1555, %r411;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1557, %r1555, %r1559;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1560, %r408, %r1562, %r1557;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1564, %r411;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1566, %r1564, %r1568;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1569, %r408, %r1571, %r1566;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1573, %r411, %r1562;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1576, %r408, %r1559, %r1573;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1580, %r411, %r1571;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1583, %r408, %r1568, %r1580;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1606, %r1609}, {%r450, %r453}, {%r1560, %r1576}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1613, %r1617}, {%r450, %r453}, {%r1569, %r1583}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1605, %r1606, %r1606;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1608, %r1609, %r1609, %r1605;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1612, %r1613, %r1613, %r1608;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1616, %r1617, %r1617, %r1612;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1620, %r2119, %r1616, %r1537;
	// end inline asm
	ld.shared.u32 	%r1628, [%rd62];
	ld.shared.u32 	%r1635, [%rd63];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1645, %r1642}, {%r374, %r377}, {%r1628}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1654, %r1651}, {%r374, %r377}, {%r1635}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1638, %r411;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1640, %r1638, %r1642;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1643, %r408, %r1645, %r1640;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1647, %r411;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1649, %r1647, %r1651;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1652, %r408, %r1654, %r1649;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1656, %r411, %r1645;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1659, %r408, %r1642, %r1656;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1663, %r411, %r1654;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1666, %r408, %r1651, %r1663;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1689, %r1692}, {%r450, %r453}, {%r1643, %r1659}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1696, %r1700}, {%r450, %r453}, {%r1652, %r1666}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1688, %r1689, %r1689;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1691, %r1692, %r1692, %r1688;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1695, %r1696, %r1696, %r1691;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1699, %r1700, %r1700, %r1695;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1703, %r2119, %r1699, %r1620;
	// end inline asm
	ld.shared.u32 	%r1711, [%rd64];
	ld.shared.u32 	%r1718, [%rd65];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1728, %r1725}, {%r374, %r377}, {%r1711}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1737, %r1734}, {%r374, %r377}, {%r1718}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1721, %r411;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1723, %r1721, %r1725;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1726, %r408, %r1728, %r1723;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1730, %r411;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1732, %r1730, %r1734;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1735, %r408, %r1737, %r1732;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1739, %r411, %r1728;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1742, %r408, %r1725, %r1739;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1746, %r411, %r1737;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1749, %r408, %r1734, %r1746;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1772, %r1775}, {%r450, %r453}, {%r1726, %r1742}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1779, %r1783}, {%r450, %r453}, {%r1735, %r1749}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1771, %r1772, %r1772;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1774, %r1775, %r1775, %r1771;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1778, %r1779, %r1779, %r1774;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1782, %r1783, %r1783, %r1778;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1786, %r2119, %r1782, %r1703;
	// end inline asm
	ld.shared.u32 	%r1794, [%rd66];
	ld.shared.u32 	%r1801, [%rd67];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1811, %r1808}, {%r374, %r377}, {%r1794}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1820, %r1817}, {%r374, %r377}, {%r1801}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1804, %r411;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1806, %r1804, %r1808;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1809, %r408, %r1811, %r1806;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1813, %r411;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1815, %r1813, %r1817;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1818, %r408, %r1820, %r1815;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1822, %r411, %r1811;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1825, %r408, %r1808, %r1822;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1829, %r411, %r1820;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1832, %r408, %r1817, %r1829;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1855, %r1858}, {%r450, %r453}, {%r1809, %r1825}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1862, %r1866}, {%r450, %r453}, {%r1818, %r1832}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1854, %r1855, %r1855;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1857, %r1858, %r1858, %r1854;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1861, %r1862, %r1862, %r1857;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1865, %r1866, %r1866, %r1861;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1869, %r2119, %r1865, %r1786;
	// end inline asm
	ld.shared.u32 	%r1877, [%rd68];
	ld.shared.u32 	%r1884, [%rd69];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1894, %r1891}, {%r374, %r377}, {%r1877}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1903, %r1900}, {%r374, %r377}, {%r1884}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1887, %r411;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1889, %r1887, %r1891;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1892, %r408, %r1894, %r1889;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1896, %r411;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1898, %r1896, %r1900;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1901, %r408, %r1903, %r1898;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1905, %r411, %r1894;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1908, %r408, %r1891, %r1905;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1912, %r411, %r1903;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1915, %r408, %r1900, %r1912;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1938, %r1941}, {%r450, %r453}, {%r1892, %r1908}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1945, %r1949}, {%r450, %r453}, {%r1901, %r1915}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1937, %r1938, %r1938;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1940, %r1941, %r1941, %r1937;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1944, %r1945, %r1945, %r1940;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1948, %r1949, %r1949, %r1944;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1952, %r2119, %r1948, %r1869;
	// end inline asm
	ld.shared.u32 	%r1960, [%rd70];
	ld.shared.u32 	%r1967, [%rd71];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1977, %r1974}, {%r374, %r377}, {%r1960}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1986, %r1983}, {%r374, %r377}, {%r1967}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1970, %r411;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1972, %r1970, %r1974;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1975, %r408, %r1977, %r1972;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1979, %r411;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1981, %r1979, %r1983;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1984, %r408, %r1986, %r1981;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1988, %r411, %r1977;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1991, %r408, %r1974, %r1988;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1995, %r411, %r1986;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1998, %r408, %r1983, %r1995;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2021, %r2024}, {%r450, %r453}, {%r1975, %r1991}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2028, %r2032}, {%r450, %r453}, {%r1984, %r1998}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2020, %r2021, %r2021;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2023, %r2024, %r2024, %r2020;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2027, %r2028, %r2028, %r2023;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2031, %r2032, %r2032, %r2027;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2035, %r2119, %r2031, %r1952;
	// end inline asm
	ld.shared.u32 	%r2043, [%rd72];
	ld.shared.u32 	%r2050, [%rd73];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2060, %r2057}, {%r374, %r377}, {%r2043}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2069, %r2066}, {%r374, %r377}, {%r2050}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2053, %r411;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2055, %r2053, %r2057;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2058, %r408, %r2060, %r2055;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2062, %r411;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2064, %r2062, %r2066;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2067, %r408, %r2069, %r2064;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2071, %r411, %r2060;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2074, %r408, %r2057, %r2071;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2078, %r411, %r2069;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2081, %r408, %r2066, %r2078;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2104, %r2107}, {%r450, %r453}, {%r2058, %r2074}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2111, %r2115}, {%r450, %r453}, {%r2067, %r2081}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2103, %r2104, %r2104;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2106, %r2107, %r2107, %r2103;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2110, %r2111, %r2111, %r2106;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2114, %r2115, %r2115, %r2110;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3400, %r2119, %r2114, %r2035;
	// end inline asm
	add.s32 	%r3398, %r3398, 8;
	setp.eq.s32 	%p279, %r3398, 384;
	@%p279 bra 	$L__BB0_208;
$L__BB0_152:                            // %L29133
                                        //   in Loop: Header=BB0_204 Depth=2
	bar.sync 	0;
	add.s32 	%r3390, %r3390, -8;
	setp.ne.s32 	%p283, %r3390, -16;
	@%p283 bra 	$L__BB0_204;
	bra.uni 	$L__BB0_153;
$L__BB0_204:                            // %L12216
                                        //   Parent Loop BB0_186 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p274, %r3390, 16;
	selp.b32 	%r1306, %r213, 0, %p274;
	setp.eq.s32 	%p275, %r3390, 8;
	selp.b32 	%r1307, %r217, %r1306, %p275;
	setp.eq.s32 	%p276, %r3390, 0;
	selp.b32 	%r1308, %r221, %r1307, %p276;
	setp.eq.s32 	%p277, %r3390, -8;
	selp.b32 	%r1309, %r225, %r1308, %p277;
	selp.b32 	%r1310, %r214, 0, %p274;
	selp.b32 	%r1311, %r218, %r1310, %p275;
	selp.b32 	%r1312, %r222, %r1311, %p276;
	selp.b32 	%r1313, %r226, %r1312, %p277;
	selp.b32 	%r1314, %r215, 0, %p274;
	selp.b32 	%r1315, %r219, %r1314, %p275;
	selp.b32 	%r1316, %r223, %r1315, %p276;
	selp.b32 	%r1317, %r227, %r1316, %p277;
	selp.b32 	%r1318, %r216, 0, %p274;
	selp.b32 	%r1319, %r220, %r1318, %p275;
	selp.b32 	%r1320, %r224, %r1319, %p276;
	selp.b32 	%r1321, %r228, %r1320, %p277;
	// begin inline asm
	mov.b32 %r919, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r930, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r918, %r1309, -2004318072;
	mov.u32 	%r1055, 983055;
	// begin inline asm
	lop3.b32 %r916, %r1055, %r918, %r919, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r920, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r921, %r919, %r920;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r924, %r916, %r921;
	// end inline asm
	mov.u32 	%r1066, 15728880;
	// begin inline asm
	lop3.b32 %r927, %r1066, %r918, %r930, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r931, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r932, %r930, %r931;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r935, %r927, %r932;
	// end inline asm
	// begin inline asm
	mov.b32 %r965, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r976, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r964, %r1313, -2004318072;
	// begin inline asm
	lop3.b32 %r962, %r1055, %r964, %r965, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r966, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r967, %r965, %r966;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r970, %r962, %r967;
	// end inline asm
	// begin inline asm
	lop3.b32 %r973, %r1066, %r964, %r976, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r977, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r978, %r976, %r977;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r981, %r973, %r978;
	// end inline asm
	// begin inline asm
	mov.b32 %r1011, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1022, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1010, %r1317, -2004318072;
	// begin inline asm
	lop3.b32 %r1008, %r1055, %r1010, %r1011, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1012, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1013, %r1011, %r1012;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1016, %r1008, %r1013;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1019, %r1066, %r1010, %r1022, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1023, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1024, %r1022, %r1023;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1027, %r1019, %r1024;
	// end inline asm
	// begin inline asm
	mov.b32 %r1057, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1068, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1056, %r1321, -2004318072;
	// begin inline asm
	lop3.b32 %r1054, %r1055, %r1056, %r1057, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1058, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1059, %r1057, %r1058;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1062, %r1054, %r1059;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1065, %r1066, %r1056, %r1068, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1069, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1070, %r1068, %r1069;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1073, %r1065, %r1070;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r924;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1098, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r935;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1101, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r970;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1104, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r981;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1107, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r1016;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1110, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r1027;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1113, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r1062;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1116, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r1073;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1119, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1177, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1122, %r1123}, {%r277, %r280}, {%r1098}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1129, %r1130}, {%r277, %r280}, {%r1101}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1136, %r1137}, {%r277, %r280}, {%r1104}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1143, %r1144}, {%r277, %r280}, {%r1107}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1150, %r1151}, {%r277, %r280}, {%r1110}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1157, %r1158}, {%r277, %r280}, {%r1113}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1164, %r1165}, {%r277, %r280}, {%r1116}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1171, %r1172}, {%r277, %r280}, {%r1119}, {%r1177, %r1177};
	// end inline asm
	@%p1 bra 	$L__BB0_206;
	bra.uni 	$L__BB0_205;
$L__BB0_206:                            // %pass5495
                                        //   in Loop: Header=BB0_204 Depth=2
	// begin inline asm
	neg.f16x2 %r1178, %r318;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1180, %r1178, %r1123;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1183, %r315, %r1122, %r1180;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1187, %r318;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1189, %r1187, %r1130;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1192, %r315, %r1129, %r1189;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1196, %r318;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1198, %r1196, %r1137;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1201, %r315, %r1136, %r1198;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1205, %r318;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1207, %r1205, %r1144;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1210, %r315, %r1143, %r1207;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1214, %r318;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1216, %r1214, %r1151;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1219, %r315, %r1150, %r1216;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1223, %r318;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1225, %r1223, %r1158;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1228, %r315, %r1157, %r1225;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1232, %r318;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1234, %r1232, %r1165;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1237, %r315, %r1164, %r1234;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1241, %r318;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1243, %r1241, %r1172;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1246, %r315, %r1171, %r1243;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1250, %r318, %r1122;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1253, %r315, %r1123, %r1250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1257, %r318, %r1129;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1260, %r315, %r1130, %r1257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1264, %r318, %r1136;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1267, %r315, %r1137, %r1264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1271, %r318, %r1143;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1274, %r315, %r1144, %r1271;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1278, %r318, %r1150;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1281, %r315, %r1151, %r1278;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1285, %r318, %r1157;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1288, %r315, %r1158, %r1285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1292, %r318, %r1164;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1295, %r315, %r1165, %r1292;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1299, %r318, %r1171;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1302, %r315, %r1172, %r1299;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1395, %r1396}, {%r362, %r365}, {%r1183, %r1253}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1403, %r1404}, {%r362, %r365}, {%r1192, %r1260}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1411, %r1412}, {%r362, %r365}, {%r1201, %r1267}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1419, %r1420}, {%r362, %r365}, {%r1210, %r1274}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1427, %r1428}, {%r362, %r365}, {%r1219, %r1281}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1435, %r1436}, {%r362, %r365}, {%r1228, %r1288}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1443, %r1444}, {%r362, %r365}, {%r1237, %r1295}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1451, %r1452}, {%r362, %r365}, {%r1246, %r1302}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r229, %r1395, %r1396, %r803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r230, %r1395, %r1396, %r807;
	// end inline asm
	// begin inline asm
	prmt.b32 %r231, %r1403, %r1404, %r803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r232, %r1403, %r1404, %r807;
	// end inline asm
	// begin inline asm
	prmt.b32 %r233, %r1411, %r1412, %r803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r234, %r1411, %r1412, %r807;
	// end inline asm
	// begin inline asm
	prmt.b32 %r235, %r1419, %r1420, %r803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r236, %r1419, %r1420, %r807;
	// end inline asm
	// begin inline asm
	prmt.b32 %r237, %r1427, %r1428, %r803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r238, %r1427, %r1428, %r807;
	// end inline asm
	// begin inline asm
	prmt.b32 %r239, %r1435, %r1436, %r803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r240, %r1435, %r1436, %r807;
	// end inline asm
	// begin inline asm
	prmt.b32 %r241, %r1443, %r1444, %r803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r242, %r1443, %r1444, %r807;
	// end inline asm
	// begin inline asm
	prmt.b32 %r243, %r1451, %r1452, %r803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r244, %r1451, %r1452, %r807;
	// end inline asm
	st.shared.u32 	[%rd51], %r229;
	st.shared.u32 	[%rd53+16576], %r230;
	st.shared.u32 	[%rd53+64], %r231;
	st.shared.u32 	[%rd53+16640], %r232;
	st.shared.u32 	[%rd54], %r233;
	st.shared.u32 	[%rd55+16576], %r234;
	st.shared.u32 	[%rd55+64], %r235;
	st.shared.u32 	[%rd55+16640], %r236;
	st.shared.u32 	[%rd56], %r237;
	st.shared.u32 	[%rd57+16576], %r238;
	st.shared.u32 	[%rd57+64], %r239;
	st.shared.u32 	[%rd57+16640], %r240;
	st.shared.u32 	[%rd58], %r241;
	st.shared.u32 	[%rd59+16576], %r242;
	st.shared.u32 	[%rd59+64], %r243;
	st.shared.u32 	[%rd59+16640], %r244;
	@%p226 bra 	$L__BB0_151;
// %bb.207:                             // %pass7894
                                        //   in Loop: Header=BB0_204 Depth=2
	st.shared.u32 	[%rd51], %r229;
	st.shared.u32 	[%rd53+16576], %r230;
	st.shared.u32 	[%rd53+64], %r231;
	st.shared.u32 	[%rd53+16640], %r232;
	st.shared.u32 	[%rd54], %r233;
	st.shared.u32 	[%rd55+16576], %r234;
	st.shared.u32 	[%rd55+64], %r235;
	st.shared.u32 	[%rd55+16640], %r236;
	st.shared.u32 	[%rd56], %r237;
	st.shared.u32 	[%rd57+16576], %r238;
	st.shared.u32 	[%rd57+64], %r239;
	st.shared.u32 	[%rd57+16640], %r240;
	st.shared.u32 	[%rd58], %r241;
	st.shared.u32 	[%rd59+16576], %r242;
	st.shared.u32 	[%rd59+64], %r243;
	st.shared.u32 	[%rd59+16640], %r244;
	bra.uni 	$L__BB0_151;
$L__BB0_208:                            // %pass13168
                                        //   in Loop: Header=BB0_204 Depth=2
	shl.b32 	%r2123, %r3399, 20;
	or.b32  	%r2124, %r2123, %r177;
	or.b32  	%r2125, %r2124, %r178;
	or.b32  	%r2126, %r2125, %r2;
	cvt.u64.u32 	%rd243, %r2126;
	add.s64 	%rd244, %rd243, %rd15;
	shr.u64 	%rd245, %rd244, 34;
	add.s64 	%rd246, %rd244, %rd245;
	shr.s64 	%rd247, %rd246, 30;
	setp.lt.s64 	%p280, %rd244, 0;
	and.b64  	%rd248, %rd246, -1073741824;
	setp.ne.s64 	%p281, %rd248, %rd244;
	and.pred  	%p282, %p280, %p281;
	selp.u64 	%rd249, 1, 0, %p282;
	sub.s64 	%rd250, %rd249, %rd247;
	shl.b64 	%rd251, %rd250, 30;
	add.s64 	%rd252, %rd251, %rd244;
	shl.b64 	%rd253, %rd252, 2;
	add.s64 	%rd254, %rd4, %rd253;
	st.global.u32 	[%rd254], %r3400;
	add.s32 	%r3399, %r3399, 1;
	mov.u32 	%r3398, 0;
	mov.u32 	%r3400, %r3398;
	bra.uni 	$L__BB0_152;
$L__BB0_153:                            // %L29154.preheader
                                        //   in Loop: Header=BB0_186 Depth=1
	or.b32  	%r2128, %r180, 64;
	add.s32 	%r2129, %r176, %r2128;
	mul.wide.u32 	%rd255, %r2129, 4;
	add.s64 	%rd7, %rd93, %rd255;
	cvt.u64.u32 	%rd257, %r2128;
	add.s64 	%rd258, %rd52, %rd257;
	shl.b64 	%rd259, %rd258, 2;
	add.s64 	%rd8, %rd93, %rd259;
	or.b32  	%r2130, %r180, 128;
	add.s32 	%r2131, %r176, %r2130;
	mul.wide.u32 	%rd260, %r2131, 4;
	add.s64 	%rd9, %rd93, %rd260;
	cvt.u64.u32 	%rd261, %r2130;
	add.s64 	%rd262, %rd52, %rd261;
	shl.b64 	%rd263, %rd262, 2;
	add.s64 	%rd10, %rd93, %rd263;
	or.b32  	%r2132, %r180, 192;
	add.s32 	%r2133, %r176, %r2132;
	mul.wide.u32 	%rd264, %r2133, 4;
	add.s64 	%rd11, %rd93, %rd264;
	cvt.u64.u32 	%rd265, %r2132;
	add.s64 	%rd266, %rd52, %rd265;
	shl.b64 	%rd267, %rd266, 2;
	add.s64 	%rd12, %rd93, %rd267;
	mov.u32 	%r3397, 16;
	bra.uni 	$L__BB0_154;
$L__BB0_155:                            // %L38511
                                        //   in Loop: Header=BB0_154 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r2686, [%rd13];
	ld.shared.u32 	%r2693, [%rd14+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2703, %r2700}, {%r374, %r377}, {%r2686}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2712, %r2709}, {%r374, %r377}, {%r2693}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2696, %r411;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2698, %r2696, %r2700;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2701, %r408, %r2703, %r2698;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2705, %r411;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2707, %r2705, %r2709;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2710, %r408, %r2712, %r2707;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2714, %r411, %r2703;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2717, %r408, %r2700, %r2714;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2721, %r411, %r2712;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2724, %r408, %r2709, %r2721;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2747, %r2750}, {%r450, %r453}, {%r2701, %r2717}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2754, %r2758}, {%r450, %r453}, {%r2710, %r2724}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2746, %r2747, %r2747;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2749, %r2750, %r2750, %r2746;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2753, %r2754, %r2754, %r2749;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2757, %r2758, %r2758, %r2753;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2761, %r2119, %r2757, %r3400;
	// end inline asm
	ld.shared.u32 	%r2769, [%rd60];
	ld.shared.u32 	%r2776, [%rd61];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2786, %r2783}, {%r374, %r377}, {%r2769}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2795, %r2792}, {%r374, %r377}, {%r2776}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2779, %r411;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2781, %r2779, %r2783;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2784, %r408, %r2786, %r2781;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2788, %r411;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2790, %r2788, %r2792;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2793, %r408, %r2795, %r2790;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2797, %r411, %r2786;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2800, %r408, %r2783, %r2797;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2804, %r411, %r2795;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2807, %r408, %r2792, %r2804;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2830, %r2833}, {%r450, %r453}, {%r2784, %r2800}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2837, %r2841}, {%r450, %r453}, {%r2793, %r2807}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2829, %r2830, %r2830;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2832, %r2833, %r2833, %r2829;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2836, %r2837, %r2837, %r2832;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2840, %r2841, %r2841, %r2836;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2844, %r2119, %r2840, %r2761;
	// end inline asm
	ld.shared.u32 	%r2852, [%rd62];
	ld.shared.u32 	%r2859, [%rd63];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2869, %r2866}, {%r374, %r377}, {%r2852}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2878, %r2875}, {%r374, %r377}, {%r2859}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2862, %r411;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2864, %r2862, %r2866;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2867, %r408, %r2869, %r2864;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2871, %r411;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2873, %r2871, %r2875;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2876, %r408, %r2878, %r2873;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2880, %r411, %r2869;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2883, %r408, %r2866, %r2880;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2887, %r411, %r2878;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2890, %r408, %r2875, %r2887;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2913, %r2916}, {%r450, %r453}, {%r2867, %r2883}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2920, %r2924}, {%r450, %r453}, {%r2876, %r2890}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2912, %r2913, %r2913;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2915, %r2916, %r2916, %r2912;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2919, %r2920, %r2920, %r2915;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2923, %r2924, %r2924, %r2919;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2927, %r2119, %r2923, %r2844;
	// end inline asm
	ld.shared.u32 	%r2935, [%rd64];
	ld.shared.u32 	%r2942, [%rd65];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2952, %r2949}, {%r374, %r377}, {%r2935}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2961, %r2958}, {%r374, %r377}, {%r2942}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2945, %r411;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2947, %r2945, %r2949;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2950, %r408, %r2952, %r2947;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2954, %r411;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2956, %r2954, %r2958;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2959, %r408, %r2961, %r2956;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2963, %r411, %r2952;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2966, %r408, %r2949, %r2963;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2970, %r411, %r2961;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2973, %r408, %r2958, %r2970;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2996, %r2999}, {%r450, %r453}, {%r2950, %r2966}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3003, %r3007}, {%r450, %r453}, {%r2959, %r2973}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2995, %r2996, %r2996;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2998, %r2999, %r2999, %r2995;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3002, %r3003, %r3003, %r2998;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3006, %r3007, %r3007, %r3002;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3010, %r2119, %r3006, %r2927;
	// end inline asm
	ld.shared.u32 	%r3018, [%rd66];
	ld.shared.u32 	%r3025, [%rd67];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3035, %r3032}, {%r374, %r377}, {%r3018}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3044, %r3041}, {%r374, %r377}, {%r3025}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3028, %r411;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3030, %r3028, %r3032;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3033, %r408, %r3035, %r3030;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3037, %r411;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3039, %r3037, %r3041;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3042, %r408, %r3044, %r3039;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3046, %r411, %r3035;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3049, %r408, %r3032, %r3046;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3053, %r411, %r3044;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3056, %r408, %r3041, %r3053;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3079, %r3082}, {%r450, %r453}, {%r3033, %r3049}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3086, %r3090}, {%r450, %r453}, {%r3042, %r3056}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3078, %r3079, %r3079;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3081, %r3082, %r3082, %r3078;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3085, %r3086, %r3086, %r3081;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3089, %r3090, %r3090, %r3085;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3093, %r2119, %r3089, %r3010;
	// end inline asm
	ld.shared.u32 	%r3101, [%rd68];
	ld.shared.u32 	%r3108, [%rd69];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3118, %r3115}, {%r374, %r377}, {%r3101}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3127, %r3124}, {%r374, %r377}, {%r3108}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3111, %r411;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3113, %r3111, %r3115;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3116, %r408, %r3118, %r3113;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3120, %r411;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3122, %r3120, %r3124;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3125, %r408, %r3127, %r3122;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3129, %r411, %r3118;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3132, %r408, %r3115, %r3129;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3136, %r411, %r3127;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3139, %r408, %r3124, %r3136;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3162, %r3165}, {%r450, %r453}, {%r3116, %r3132}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3169, %r3173}, {%r450, %r453}, {%r3125, %r3139}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3161, %r3162, %r3162;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3164, %r3165, %r3165, %r3161;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3168, %r3169, %r3169, %r3164;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3172, %r3173, %r3173, %r3168;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3176, %r2119, %r3172, %r3093;
	// end inline asm
	ld.shared.u32 	%r3184, [%rd70];
	ld.shared.u32 	%r3191, [%rd71];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3201, %r3198}, {%r374, %r377}, {%r3184}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3210, %r3207}, {%r374, %r377}, {%r3191}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3194, %r411;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3196, %r3194, %r3198;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3199, %r408, %r3201, %r3196;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3203, %r411;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3205, %r3203, %r3207;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3208, %r408, %r3210, %r3205;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3212, %r411, %r3201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3215, %r408, %r3198, %r3212;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3219, %r411, %r3210;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3222, %r408, %r3207, %r3219;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3245, %r3248}, {%r450, %r453}, {%r3199, %r3215}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3252, %r3256}, {%r450, %r453}, {%r3208, %r3222}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3244, %r3245, %r3245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3247, %r3248, %r3248, %r3244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3251, %r3252, %r3252, %r3247;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3255, %r3256, %r3256, %r3251;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3259, %r2119, %r3255, %r3176;
	// end inline asm
	ld.shared.u32 	%r3267, [%rd72];
	ld.shared.u32 	%r3274, [%rd73];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3284, %r3281}, {%r374, %r377}, {%r3267}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3293, %r3290}, {%r374, %r377}, {%r3274}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3277, %r411;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3279, %r3277, %r3281;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3282, %r408, %r3284, %r3279;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3286, %r411;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3288, %r3286, %r3290;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3291, %r408, %r3293, %r3288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3295, %r411, %r3284;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3298, %r408, %r3281, %r3295;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3302, %r411, %r3293;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3305, %r408, %r3290, %r3302;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3328, %r3331}, {%r450, %r453}, {%r3282, %r3298}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3335, %r3339}, {%r450, %r453}, {%r3291, %r3305}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3327, %r3328, %r3328;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3330, %r3331, %r3331, %r3327;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3334, %r3335, %r3335, %r3330;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3338, %r3339, %r3339, %r3334;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3400, %r2119, %r3338, %r3259;
	// end inline asm
	add.s32 	%r3398, %r3398, 8;
	setp.eq.s32 	%p289, %r3398, 384;
	@%p289 bra 	$L__BB0_210;
$L__BB0_156:                            // %L46071
                                        //   in Loop: Header=BB0_154 Depth=2
	bar.sync 	0;
	add.s32 	%r3397, %r3397, -8;
	setp.ne.s32 	%p293, %r3397, -16;
	@%p293 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_157;
$L__BB0_154:                            // %L29154
                                        //   Parent Loop BB0_186 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.lt.u32 	%p284, %r3, 16;
	setp.eq.s32 	%p285, %r3397, 16;
	selp.b32 	%r2662, %r213, 0, %p285;
	setp.eq.s32 	%p286, %r3397, 8;
	selp.b32 	%r2663, %r217, %r2662, %p286;
	setp.eq.s32 	%p287, %r3397, 0;
	selp.b32 	%r2664, %r221, %r2663, %p287;
	setp.eq.s32 	%p288, %r3397, -8;
	selp.b32 	%r2665, %r225, %r2664, %p288;
	selp.b32 	%r2666, %r214, 0, %p285;
	selp.b32 	%r2667, %r218, %r2666, %p286;
	selp.b32 	%r2668, %r222, %r2667, %p287;
	selp.b32 	%r2669, %r226, %r2668, %p288;
	selp.b32 	%r2670, %r215, 0, %p285;
	selp.b32 	%r2671, %r219, %r2670, %p286;
	selp.b32 	%r2672, %r223, %r2671, %p287;
	selp.b32 	%r2673, %r227, %r2672, %p288;
	selp.b32 	%r2674, %r216, 0, %p285;
	selp.b32 	%r2675, %r220, %r2674, %p286;
	selp.b32 	%r2676, %r224, %r2675, %p287;
	selp.b32 	%r2677, %r228, %r2676, %p288;
	// begin inline asm
	mov.b32 %r2161, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2172, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2678, %r2665, 8;
	xor.b32  	%r2171, %r2678, 8947848;
	// begin inline asm
	lop3.b32 %r2158, %r1055, %r2171, %r2161, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2162, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2163, %r2161, %r2162;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2166, %r2158, %r2163;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2169, %r1066, %r2171, %r2172, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2173, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2174, %r2172, %r2173;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2177, %r2169, %r2174;
	// end inline asm
	// begin inline asm
	mov.b32 %r2207, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2218, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2679, %r2669, 8;
	xor.b32  	%r2217, %r2679, 8947848;
	// begin inline asm
	lop3.b32 %r2204, %r1055, %r2217, %r2207, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2208, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2209, %r2207, %r2208;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2212, %r2204, %r2209;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2215, %r1066, %r2217, %r2218, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2219, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2220, %r2218, %r2219;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2223, %r2215, %r2220;
	// end inline asm
	// begin inline asm
	mov.b32 %r2253, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2264, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2680, %r2673, 8;
	xor.b32  	%r2263, %r2680, 8947848;
	// begin inline asm
	lop3.b32 %r2250, %r1055, %r2263, %r2253, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2254, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2255, %r2253, %r2254;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2258, %r2250, %r2255;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2261, %r1066, %r2263, %r2264, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2265, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2266, %r2264, %r2265;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2269, %r2261, %r2266;
	// end inline asm
	// begin inline asm
	mov.b32 %r2299, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2310, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2681, %r2677, 8;
	xor.b32  	%r2309, %r2681, 8947848;
	// begin inline asm
	lop3.b32 %r2296, %r1055, %r2309, %r2299, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2300, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2301, %r2299, %r2300;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2304, %r2296, %r2301;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2307, %r1066, %r2309, %r2310, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2311, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2312, %r2310, %r2311;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2315, %r2307, %r2312;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r2166;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2318, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2177;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2321, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r2212;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2324, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2223;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2327, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r2258;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2330, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2269;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2333, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r2304;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2336, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2315;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2339, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2405, %r2402}, {%r277, %r280}, {%r2318}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2414, %r2411}, {%r277, %r280}, {%r2321}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2423, %r2420}, {%r277, %r280}, {%r2324}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2432, %r2429}, {%r277, %r280}, {%r2327}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2441, %r2438}, {%r277, %r280}, {%r2330}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2450, %r2447}, {%r277, %r280}, {%r2333}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2459, %r2456}, {%r277, %r280}, {%r2336}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2468, %r2465}, {%r277, %r280}, {%r2339}, {%r1177, %r1177};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2398, %r318;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2400, %r2398, %r2402;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2403, %r315, %r2405, %r2400;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2407, %r318;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2409, %r2407, %r2411;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2412, %r315, %r2414, %r2409;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2416, %r318;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2418, %r2416, %r2420;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2421, %r315, %r2423, %r2418;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2425, %r318;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2427, %r2425, %r2429;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2430, %r315, %r2432, %r2427;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2434, %r318;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2436, %r2434, %r2438;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2439, %r315, %r2441, %r2436;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2443, %r318;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2445, %r2443, %r2447;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2448, %r315, %r2450, %r2445;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2452, %r318;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2454, %r2452, %r2456;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2457, %r315, %r2459, %r2454;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2461, %r318;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2463, %r2461, %r2465;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2466, %r315, %r2468, %r2463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2470, %r318, %r2405;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2473, %r315, %r2402, %r2470;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2477, %r318, %r2414;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2480, %r315, %r2411, %r2477;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2484, %r318, %r2423;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2487, %r315, %r2420, %r2484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2491, %r318, %r2432;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2494, %r315, %r2429, %r2491;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2498, %r318, %r2441;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2501, %r315, %r2438, %r2498;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2505, %r318, %r2450;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2508, %r315, %r2447, %r2505;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2512, %r318, %r2459;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2515, %r315, %r2456, %r2512;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2519, %r318, %r2468;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2522, %r315, %r2465, %r2519;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2599, %r2600}, {%r362, %r365}, {%r2403, %r2473}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2607, %r2608}, {%r362, %r365}, {%r2412, %r2480}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2615, %r2616}, {%r362, %r365}, {%r2421, %r2487}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2623, %r2624}, {%r362, %r365}, {%r2430, %r2494}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2631, %r2632}, {%r362, %r365}, {%r2439, %r2501}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2639, %r2640}, {%r362, %r365}, {%r2448, %r2508}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2647, %r2648}, {%r362, %r365}, {%r2457, %r2515}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2655, %r2656}, {%r362, %r365}, {%r2466, %r2522}, {%r1177, %r1177}, %r179, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2598, %r2599, %r2600, %r803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2602, %r2599, %r2600, %r807;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2606, %r2607, %r2608, %r803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2610, %r2607, %r2608, %r807;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2614, %r2615, %r2616, %r803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2618, %r2615, %r2616, %r807;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2622, %r2623, %r2624, %r803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2626, %r2623, %r2624, %r807;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2630, %r2631, %r2632, %r803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2634, %r2631, %r2632, %r807;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2638, %r2639, %r2640, %r803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2642, %r2639, %r2640, %r807;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2646, %r2647, %r2648, %r803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2650, %r2647, %r2648, %r807;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2654, %r2655, %r2656, %r803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2658, %r2655, %r2656, %r807;
	// end inline asm
	st.shared.u32 	[%rd51], %r2598;
	st.shared.u32 	[%rd53+16576], %r2602;
	st.shared.u32 	[%rd53+64], %r2606;
	st.shared.u32 	[%rd53+16640], %r2610;
	st.shared.u32 	[%rd7], %r2614;
	st.shared.u32 	[%rd8+16576], %r2618;
	st.shared.u32 	[%rd8+64], %r2622;
	st.shared.u32 	[%rd8+16640], %r2626;
	st.shared.u32 	[%rd9], %r2630;
	st.shared.u32 	[%rd10+16576], %r2634;
	st.shared.u32 	[%rd10+64], %r2638;
	st.shared.u32 	[%rd10+16640], %r2642;
	st.shared.u32 	[%rd11], %r2646;
	st.shared.u32 	[%rd12+16576], %r2650;
	st.shared.u32 	[%rd12+64], %r2654;
	st.shared.u32 	[%rd12+16640], %r2658;
	@%p284 bra 	$L__BB0_209;
	bra.uni 	$L__BB0_155;
$L__BB0_209:                            // %pass15704
                                        //   in Loop: Header=BB0_154 Depth=2
	st.shared.u32 	[%rd51], %r2598;
	st.shared.u32 	[%rd53+16576], %r2602;
	st.shared.u32 	[%rd53+64], %r2606;
	st.shared.u32 	[%rd53+16640], %r2610;
	st.shared.u32 	[%rd7], %r2614;
	st.shared.u32 	[%rd8+16576], %r2618;
	st.shared.u32 	[%rd8+64], %r2622;
	st.shared.u32 	[%rd8+16640], %r2626;
	st.shared.u32 	[%rd9], %r2630;
	st.shared.u32 	[%rd10+16576], %r2634;
	st.shared.u32 	[%rd10+64], %r2638;
	st.shared.u32 	[%rd10+16640], %r2642;
	st.shared.u32 	[%rd11], %r2646;
	st.shared.u32 	[%rd12+16576], %r2650;
	st.shared.u32 	[%rd12+64], %r2654;
	st.shared.u32 	[%rd12+16640], %r2658;
	bra.uni 	$L__BB0_155;
$L__BB0_210:                            // %pass20978
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r3347, %r3399, 20;
	or.b32  	%r3348, %r3347, %r177;
	or.b32  	%r3349, %r3348, %r178;
	or.b32  	%r3350, %r3349, %r2;
	cvt.u64.u32 	%rd268, %r3350;
	add.s64 	%rd269, %rd268, %rd15;
	shr.u64 	%rd270, %rd269, 34;
	add.s64 	%rd271, %rd269, %rd270;
	shr.s64 	%rd272, %rd271, 30;
	setp.lt.s64 	%p290, %rd269, 0;
	and.b64  	%rd273, %rd271, -1073741824;
	setp.ne.s64 	%p291, %rd273, %rd269;
	and.pred  	%p292, %p290, %p291;
	selp.u64 	%rd274, 1, 0, %p292;
	sub.s64 	%rd275, %rd274, %rd272;
	shl.b64 	%rd276, %rd275, 30;
	add.s64 	%rd277, %rd276, %rd269;
	shl.b64 	%rd278, %rd277, 2;
	add.s64 	%rd279, %rd4, %rd278;
	st.global.u32 	[%rd279], %r3400;
	add.s32 	%r3399, %r3399, 1;
	mov.u32 	%r3398, %r1177;
	mov.u32 	%r3400, %r1177;
	bra.uni 	$L__BB0_156;
$L__BB0_158:                            // %L46102
	mov.u32 	%r3351, 0;
	st.global.u32 	[%rd6], %r3351;
	ret;
$L__BB0_205:                            // %post_box_union
	mov.u64 	%rd241, exception4110;
	cvta.global.u64 	%rd242, %rd241;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd242;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r247;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_135:                            // %L6809
	mov.u32 	%r3367, 5;
	st.global.u32 	[%rd6], %r3367;
	mov.u64 	%rd310, exception4062;
	cvta.global.u64 	%rd311, %rd310;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd311;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r247;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_136:                            // %L6965
	mov.u32 	%r3366, 5;
	st.global.u32 	[%rd6], %r3366;
	mov.u64 	%rd308, exception4062;
	cvta.global.u64 	%rd309, %rd308;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd309;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r247;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_137:                            // %L7121
	mov.u32 	%r3365, 5;
	st.global.u32 	[%rd6], %r3365;
	mov.u64 	%rd306, exception4062;
	cvta.global.u64 	%rd307, %rd306;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd307;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r247;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_138:                            // %L7277
	mov.u32 	%r3364, 5;
	st.global.u32 	[%rd6], %r3364;
	mov.u64 	%rd304, exception4062;
	cvta.global.u64 	%rd305, %rd304;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd305;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r247;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_139:                            // %L7433
	mov.u32 	%r3363, 5;
	st.global.u32 	[%rd6], %r3363;
	mov.u64 	%rd302, exception4062;
	cvta.global.u64 	%rd303, %rd302;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd303;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r247;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_140:                            // %L7589
	mov.u32 	%r3362, 5;
	st.global.u32 	[%rd6], %r3362;
	mov.u64 	%rd300, exception4062;
	cvta.global.u64 	%rd301, %rd300;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd301;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r247;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_141:                            // %L7745
	mov.u32 	%r3361, 5;
	st.global.u32 	[%rd6], %r3361;
	mov.u64 	%rd298, exception4062;
	cvta.global.u64 	%rd299, %rd298;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd299;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r247;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_142:                            // %L7901
	mov.u32 	%r3360, 5;
	st.global.u32 	[%rd6], %r3360;
	mov.u64 	%rd296, exception4062;
	cvta.global.u64 	%rd297, %rd296;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd297;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r247;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_143:                            // %L8057
	mov.u32 	%r3359, 5;
	st.global.u32 	[%rd6], %r3359;
	mov.u64 	%rd294, exception4062;
	cvta.global.u64 	%rd295, %rd294;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd295;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r247;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_144:                            // %L8213
	mov.u32 	%r3358, 5;
	st.global.u32 	[%rd6], %r3358;
	mov.u64 	%rd292, exception4062;
	cvta.global.u64 	%rd293, %rd292;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd293;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r247;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L8369
	mov.u32 	%r3357, 5;
	st.global.u32 	[%rd6], %r3357;
	mov.u64 	%rd290, exception4062;
	cvta.global.u64 	%rd291, %rd290;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd291;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r247;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L8525
	mov.u32 	%r3356, 5;
	st.global.u32 	[%rd6], %r3356;
	mov.u64 	%rd288, exception4062;
	cvta.global.u64 	%rd289, %rd288;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd289;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r247;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L8681
	mov.u32 	%r3355, 5;
	st.global.u32 	[%rd6], %r3355;
	mov.u64 	%rd286, exception4062;
	cvta.global.u64 	%rd287, %rd286;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd287;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r247;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L8837
	mov.u32 	%r3354, 5;
	st.global.u32 	[%rd6], %r3354;
	mov.u64 	%rd284, exception4062;
	cvta.global.u64 	%rd285, %rd284;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd285;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r247;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L8993
	mov.u32 	%r3353, 5;
	st.global.u32 	[%rd6], %r3353;
	mov.u64 	%rd282, exception4062;
	cvta.global.u64 	%rd283, %rd282;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd283;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r247;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L9149
	mov.u32 	%r3352, 5;
	st.global.u32 	[%rd6], %r3352;
	mov.u64 	%rd280, exception4062;
	cvta.global.u64 	%rd281, %rd280;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd281;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r247;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L166
	mov.u32 	%r3369, 2;
	st.global.u32 	[%rd6], %r3369;
	mov.u64 	%rd314, exception4062;
	cvta.global.u64 	%rd315, %rd314;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd315;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r247;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_12:                             // %L307
	mov.u32 	%r3368, 3;
	st.global.u32 	[%rd6], %r3368;
	mov.u64 	%rd312, exception4062;
	cvta.global.u64 	%rd313, %rd312;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd313;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r247;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd80, exception1;
	cvta.global.u64 	%rd81, %rd80;
	{ // callseq 45, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd81;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 45
	{ // callseq 46, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r247;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 46
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_134:                            // %L1153
	add.u64 	%rd79, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r3, %r4};
	st.local.v2.u32 	[%rd5+8], {%r1, %r85};
	st.local.u32 	[%rd5+16], %r86;
	mov.u64 	%rd85, __unnamed_1;
	cvta.global.u64 	%rd86, %rd85;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd86;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd79;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r463, [retval0+0];
	} // callseq 47
	mov.u32 	%r465, 4;
	st.global.u32 	[%rd6], %r465;
	mov.u64 	%rd88, exception4062;
	cvta.global.u64 	%rd89, %rd88;
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd89;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 48
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r247;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 49
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
