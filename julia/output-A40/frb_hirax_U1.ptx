// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception2501[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception2549[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception12561[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 512, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<368>;
	.reg .b16 	%rs<97>;
	.reg .b32 	%r<3518>;
	.reg .f32 	%f<752>;
	.reg .b64 	%rd<436>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r296, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd59, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r305, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r305, 34943;
	@%p2 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L20
	ld.param.u64 	%rd60, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r297, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %ctaid.x;
	shl.b32 	%r5, %r4, 9;
	or.b32  	%r306, %r3, %r1;
	or.b32  	%r307, %r306, %r5;
	mul.wide.u32 	%rd67, %r307, 4;
	add.s64 	%rd6, %rd60, %rd67;
	mov.u32 	%r308, 1;
	st.global.u32 	[%rd6], %r308;
	setp.gt.u32 	%p3, %r297, 32767;
	@%p3 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r298, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p4, %r298, %r297;
	setp.gt.s32 	%p5, %r298, 65535;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r299, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r298, %r297;
	and.b32  	%r309, %r6, 63;
	setp.ne.s32 	%p7, %r309, 0;
	setp.gt.u32 	%p8, %r299, 4095;
	or.pred  	%p9, %p7, %p8;
	@%p9 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r300, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p10, %r300, %r299;
	setp.lt.s32 	%p11, %r300, 8192;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass40
	sub.s32 	%r310, %r300, %r299;
	mul.hi.s32 	%r311, %r6, 1374389535;
	shr.u32 	%r312, %r311, 31;
	shr.s32 	%r313, %r311, 3;
	add.s32 	%r314, %r313, %r312;
	setp.eq.s32 	%p13, %r310, %r314;
	@%p13 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L261
	ld.param.u32 	%r301, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p14, %r301, 0;
	@%p14 bra 	$L__BB0_12;
// %bb.9:                               // %L263
	ld.param.u32 	%r303, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	ld.param.u32 	%r302, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p15, %r302, %r301;
	setp.gt.s32 	%p16, %r302, 64;
	or.pred  	%p17, %p15, %p16;
	setp.lt.s32 	%p18, %r303, 0;
	or.pred  	%p19, %p17, %p18;
	@%p19 bra 	$L__BB0_12;
// %bb.10:                              // %L279
	ld.param.u32 	%r304, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p20, %r304, %r303;
	setp.gt.s32 	%p21, %r304, 64;
	or.pred  	%p22, %p20, %p21;
	@%p22 bra 	$L__BB0_12;
// %bb.11:                              // %L289
	sub.s32 	%r315, %r304, %r303;
	sub.s32 	%r316, %r302, %r301;
	setp.eq.s32 	%p23, %r315, %r316;
	@%p23 bra 	$L__BB0_196;
	bra.uni 	$L__BB0_12;
$L__BB0_196:                            // %pass149
	and.b32  	%r143, %r1, 3;
	shr.u32 	%r144, %r1, 2;
	mul.lo.s32 	%r317, %r143, %r144;
	and.b32  	%r318, %r317, 7;
	cvt.rn.f32.s32 	%f185, %r318;
	mov.f32 	%f186, 0f40800000;
	div.approx.f32 	%f151, %f185, %f186;
	abs.f32 	%f750, %f151;
	setp.lt.f32 	%p24, %f750, 0f40000000;
	mov.f32 	%f703, 0f40000000;
	setp.gtu.f32 	%p363, %f750, 0f4B800000;
	mov.f32 	%f746, %f750;
	@%p24 bra 	$L__BB0_208;
// %bb.197:
	@%p363 bra 	$L__BB0_204;
	bra.uni 	$L__BB0_198;
$L__BB0_204:
	mov.b32 	%r146, %f750;
	and.b32  	%r319, %r146, 8388607;
	or.b32  	%r3471, %r319, 1065353216;
	mov.b32 	%f745, %r3471;
	add.s32 	%r320, %r146, -1073741824;
	and.b32  	%r3472, %r320, -8388608;
	setp.eq.s32 	%p31, %r3472, 0;
	@%p31 bra 	$L__BB0_207;
// %bb.205:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f196, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f195,%f196;
	// end inline asm
$L__BB0_206:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r321, %r3472, 192937984;
	add.s32 	%r322, %r3471, %r321;
	mov.b32 	%f197, %r322;
	mul.f32 	%f198, %f195, %f197;
	sub.f32 	%f199, %f197, %f198;
	fma.rn.f32 	%f200, %f199, %f195, %f198;
	sub.f32 	%f201, %f197, %f200;
	fma.rz.f32 	%f202, %f201, %f195, %f200;
	cvt.rzi.f32.f32 	%f203, %f202;
	sub.f32 	%f745, %f197, %f203;
	sub.s32 	%r3472, %r3472, %r321;
	mov.b32 	%r3471, %f745;
	setp.ne.s32 	%p32, %r3472, 0;
	setp.ne.s32 	%p33, %r3471, 0;
	and.pred  	%p34, %p32, %p33;
	@%p34 bra 	$L__BB0_206;
$L__BB0_207:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p35, %r146, 2139095039;
	selp.f32 	%f204, 0f7FFFFFFF, 0f4B800000, %p35;
	mul.f32 	%f205, %f745, 0f34000000;
	mul.f32 	%f746, %f204, %f205;
	bra.uni 	$L__BB0_208;
$L__BB0_198:                            // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f188, %f750, %f703;
	cvt.rzi.f32.f32 	%f744, %f188;
	fma.rn.f32 	%f154, %f744, 0fC0000000, %f750;
	mov.b32 	%r145, %f154;
	setp.lt.u32 	%p26, %r145, 1073741824;
	@%p26 bra 	$L__BB0_203;
// %bb.199:
	setp.lt.u32 	%p27, %r145, -2147483647;
	@%p27 bra 	$L__BB0_201;
// %bb.200:
	add.f32 	%f193, %f744, 0fBF800000;
	setp.lt.f32 	%p30, %f154, 0fC0000000;
	add.f32 	%f194, %f193, 0fBF800000;
	selp.f32 	%f744, %f194, %f193, %p30;
	bra.uni 	$L__BB0_203;
$L__BB0_201:
	add.f32 	%f744, %f744, 0f3F800000;
	setp.ltu.f32 	%p28, %f154, 0f40800000;
	@%p28 bra 	$L__BB0_203;
// %bb.202:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f189, %f744, 0f3F800000;
	fma.rn.f32 	%f191, %f703, 0fC0400000, %f154;
	setp.ge.f32 	%p29, %f191, 0f00000000;
	add.f32 	%f192, %f189, 0f3F800000;
	selp.f32 	%f744, %f192, %f189, %p29;
$L__BB0_203:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f746, %f744, 0fC0000000, %f750;
$L__BB0_208:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f206, %f746;
	setp.gtu.f32 	%p36, %f206, 0f7F800000;
	mov.b32 	%r323, %f151;
	and.b32  	%r153, %r323, -2147483648;
	@%p36 bra 	$L__BB0_210;
// %bb.209:
	mov.b32 	%r324, %f746;
	or.b32  	%r325, %r153, %r324;
	mov.b32 	%f746, %r325;
$L__BB0_210:                            // %__nv_fmodf.exit
	shl.b32 	%r156, %r1, 1;
	and.b32  	%r340, %r156, 2;
	mul.lo.s32 	%r157, %r340, %r144;
	cvt.rn.f32.s32 	%f239, %r157;
	mov.f32 	%f240, 0f41800000;
	div.approx.f32 	%f168, %f239, %f240;
	abs.f32 	%f726, %f168;
	setp.lt.f32 	%p44, %f726, 0f40000000;
	setp.gtu.f32 	%p364, %f726, 0f4B800000;
	mov.f32 	%f706, %f726;
	@%p44 bra 	$L__BB0_24;
// %bb.13:
	@%p364 bra 	$L__BB0_20;
	bra.uni 	$L__BB0_14;
$L__BB0_20:
	mov.b32 	%r8, %f726;
	and.b32  	%r341, %r8, 8388607;
	or.b32  	%r3437, %r341, 1065353216;
	mov.b32 	%f705, %r3437;
	add.s32 	%r342, %r8, -1073741824;
	and.b32  	%r3438, %r342, -8388608;
	setp.eq.s32 	%p51, %r3438, 0;
	@%p51 bra 	$L__BB0_23;
// %bb.21:                              // %__nv_fmaf_rn.exit4.i.i.i2328.preheader
	mov.f32 	%f250, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f249,%f250;
	// end inline asm
$L__BB0_22:                             // %__nv_fmaf_rn.exit4.i.i.i2328
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r343, %r3438, 192937984;
	add.s32 	%r344, %r3437, %r343;
	mov.b32 	%f251, %r344;
	mul.f32 	%f252, %f249, %f251;
	sub.f32 	%f253, %f251, %f252;
	fma.rn.f32 	%f254, %f253, %f249, %f252;
	sub.f32 	%f255, %f251, %f254;
	fma.rz.f32 	%f256, %f255, %f249, %f254;
	cvt.rzi.f32.f32 	%f257, %f256;
	sub.f32 	%f705, %f251, %f257;
	sub.s32 	%r3438, %r3438, %r343;
	mov.b32 	%r3437, %f705;
	setp.ne.s32 	%p52, %r3438, 0;
	setp.ne.s32 	%p53, %r3437, 0;
	and.pred  	%p54, %p52, %p53;
	@%p54 bra 	$L__BB0_22;
$L__BB0_23:                             // %__internal_fmodf_slowpath_mod.exit.i.i2330
	setp.gt.u32 	%p55, %r8, 2139095039;
	selp.f32 	%f258, 0f7FFFFFFF, 0f4B800000, %p55;
	mul.f32 	%f259, %f705, 0f34000000;
	mul.f32 	%f706, %f258, %f259;
	bra.uni 	$L__BB0_24;
$L__BB0_14:                             // %__nv_fast_fdividef.exit.i.i.i2307
	div.approx.f32 	%f242, %f726, %f703;
	cvt.rzi.f32.f32 	%f704, %f242;
	fma.rn.f32 	%f2, %f704, 0fC0000000, %f726;
	mov.b32 	%r7, %f2;
	setp.lt.u32 	%p46, %r7, 1073741824;
	@%p46 bra 	$L__BB0_19;
// %bb.15:
	setp.lt.u32 	%p47, %r7, -2147483647;
	@%p47 bra 	$L__BB0_17;
// %bb.16:
	add.f32 	%f247, %f704, 0fBF800000;
	setp.lt.f32 	%p50, %f2, 0fC0000000;
	add.f32 	%f248, %f247, 0fBF800000;
	selp.f32 	%f704, %f248, %f247, %p50;
	bra.uni 	$L__BB0_19;
$L__BB0_17:
	add.f32 	%f704, %f704, 0f3F800000;
	setp.ltu.f32 	%p48, %f2, 0f40800000;
	@%p48 bra 	$L__BB0_19;
// %bb.18:                              // %__nv_fmaf_rn.exit.i.i.i2311
	add.f32 	%f243, %f704, 0f3F800000;
	fma.rn.f32 	%f245, %f703, 0fC0400000, %f2;
	setp.ge.f32 	%p49, %f245, 0f00000000;
	add.f32 	%f246, %f243, 0f3F800000;
	selp.f32 	%f704, %f246, %f243, %p49;
$L__BB0_19:                             // %__internal_fmodf_fastpath_quot.exit.i.i2314
	fma.rn.f32 	%f706, %f704, 0fC0000000, %f726;
$L__BB0_24:                             // %__internal_fmodf_kernel.exit.i2333
	abs.f32 	%f260, %f706;
	setp.gtu.f32 	%p56, %f260, 0f7F800000;
	mov.b32 	%r345, %f168;
	and.b32  	%r15, %r345, -2147483648;
	@%p56 bra 	$L__BB0_26;
// %bb.25:
	mov.b32 	%r346, %f706;
	or.b32  	%r347, %r15, %r346;
	mov.b32 	%f706, %r347;
$L__BB0_26:                             // %__nv_fmodf.exit2334
	add.s32 	%r356, %r157, %r144;
	cvt.rn.f32.s32 	%f291, %r356;
	div.approx.f32 	%f18, %f291, %f240;
	abs.f32 	%f730, %f18;
	setp.lt.f32 	%p64, %f730, 0f40000000;
	setp.gtu.f32 	%p365, %f730, 0f4B800000;
	mov.f32 	%f710, %f730;
	@%p64 bra 	$L__BB0_38;
// %bb.27:
	@%p365 bra 	$L__BB0_34;
	bra.uni 	$L__BB0_28;
$L__BB0_34:
	mov.b32 	%r17, %f730;
	and.b32  	%r357, %r17, 8388607;
	or.b32  	%r3439, %r357, 1065353216;
	mov.b32 	%f709, %r3439;
	add.s32 	%r358, %r17, -1073741824;
	and.b32  	%r3440, %r358, -8388608;
	setp.eq.s32 	%p71, %r3440, 0;
	@%p71 bra 	$L__BB0_37;
// %bb.35:                              // %__nv_fmaf_rn.exit4.i.i.i2359.preheader
	mov.f32 	%f302, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f301,%f302;
	// end inline asm
$L__BB0_36:                             // %__nv_fmaf_rn.exit4.i.i.i2359
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r359, %r3440, 192937984;
	add.s32 	%r360, %r3439, %r359;
	mov.b32 	%f303, %r360;
	mul.f32 	%f304, %f301, %f303;
	sub.f32 	%f305, %f303, %f304;
	fma.rn.f32 	%f306, %f305, %f301, %f304;
	sub.f32 	%f307, %f303, %f306;
	fma.rz.f32 	%f308, %f307, %f301, %f306;
	cvt.rzi.f32.f32 	%f309, %f308;
	sub.f32 	%f709, %f303, %f309;
	sub.s32 	%r3440, %r3440, %r359;
	mov.b32 	%r3439, %f709;
	setp.ne.s32 	%p72, %r3440, 0;
	setp.ne.s32 	%p73, %r3439, 0;
	and.pred  	%p74, %p72, %p73;
	@%p74 bra 	$L__BB0_36;
$L__BB0_37:                             // %__internal_fmodf_slowpath_mod.exit.i.i2361
	setp.gt.u32 	%p75, %r17, 2139095039;
	selp.f32 	%f310, 0f7FFFFFFF, 0f4B800000, %p75;
	mul.f32 	%f311, %f709, 0f34000000;
	mul.f32 	%f710, %f310, %f311;
	bra.uni 	$L__BB0_38;
$L__BB0_28:                             // %__nv_fast_fdividef.exit.i.i.i2338
	div.approx.f32 	%f294, %f730, %f703;
	cvt.rzi.f32.f32 	%f708, %f294;
	fma.rn.f32 	%f21, %f708, 0fC0000000, %f730;
	mov.b32 	%r16, %f21;
	setp.lt.u32 	%p66, %r16, 1073741824;
	@%p66 bra 	$L__BB0_33;
// %bb.29:
	setp.lt.u32 	%p67, %r16, -2147483647;
	@%p67 bra 	$L__BB0_31;
// %bb.30:
	add.f32 	%f299, %f708, 0fBF800000;
	setp.lt.f32 	%p70, %f21, 0fC0000000;
	add.f32 	%f300, %f299, 0fBF800000;
	selp.f32 	%f708, %f300, %f299, %p70;
	bra.uni 	$L__BB0_33;
$L__BB0_31:
	add.f32 	%f708, %f708, 0f3F800000;
	setp.ltu.f32 	%p68, %f21, 0f40800000;
	@%p68 bra 	$L__BB0_33;
// %bb.32:                              // %__nv_fmaf_rn.exit.i.i.i2342
	add.f32 	%f295, %f708, 0f3F800000;
	fma.rn.f32 	%f297, %f703, 0fC0400000, %f21;
	setp.ge.f32 	%p69, %f297, 0f00000000;
	add.f32 	%f298, %f295, 0f3F800000;
	selp.f32 	%f708, %f298, %f295, %p69;
$L__BB0_33:                             // %__internal_fmodf_fastpath_quot.exit.i.i2345
	fma.rn.f32 	%f710, %f708, 0fC0000000, %f730;
$L__BB0_38:                             // %__internal_fmodf_kernel.exit.i2364
	abs.f32 	%f312, %f710;
	setp.gtu.f32 	%p76, %f312, 0f7F800000;
	mov.b32 	%r361, %f18;
	and.b32  	%r24, %r361, -2147483648;
	@%p76 bra 	$L__BB0_40;
// %bb.39:
	mov.b32 	%r362, %f710;
	or.b32  	%r363, %r24, %r362;
	mov.b32 	%f710, %r363;
$L__BB0_40:                             // %__nv_fmodf.exit2365
	mul.lo.s32 	%r27, %r156, %r144;
	and.b32  	%r378, %r27, 2;
	cvt.rn.f32.s32 	%f345, %r378;
	div.approx.f32 	%f35, %f345, %f703;
	abs.f32 	%f734, %f35;
	setp.lt.f32 	%p84, %f734, 0f40000000;
	setp.gtu.f32 	%p366, %f734, 0f4B800000;
	mov.f32 	%f714, %f734;
	@%p84 bra 	$L__BB0_52;
// %bb.41:
	@%p366 bra 	$L__BB0_48;
	bra.uni 	$L__BB0_42;
$L__BB0_48:
	mov.b32 	%r29, %f734;
	and.b32  	%r379, %r29, 8388607;
	or.b32  	%r3441, %r379, 1065353216;
	mov.b32 	%f713, %r3441;
	add.s32 	%r380, %r29, -1073741824;
	and.b32  	%r3442, %r380, -8388608;
	setp.eq.s32 	%p91, %r3442, 0;
	@%p91 bra 	$L__BB0_51;
// %bb.49:                              // %__nv_fmaf_rn.exit4.i.i.i2390.preheader
	mov.f32 	%f356, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f355,%f356;
	// end inline asm
$L__BB0_50:                             // %__nv_fmaf_rn.exit4.i.i.i2390
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r381, %r3442, 192937984;
	add.s32 	%r382, %r3441, %r381;
	mov.b32 	%f357, %r382;
	mul.f32 	%f358, %f355, %f357;
	sub.f32 	%f359, %f357, %f358;
	fma.rn.f32 	%f360, %f359, %f355, %f358;
	sub.f32 	%f361, %f357, %f360;
	fma.rz.f32 	%f362, %f361, %f355, %f360;
	cvt.rzi.f32.f32 	%f363, %f362;
	sub.f32 	%f713, %f357, %f363;
	sub.s32 	%r3442, %r3442, %r381;
	mov.b32 	%r3441, %f713;
	setp.ne.s32 	%p92, %r3442, 0;
	setp.ne.s32 	%p93, %r3441, 0;
	and.pred  	%p94, %p92, %p93;
	@%p94 bra 	$L__BB0_50;
$L__BB0_51:                             // %__internal_fmodf_slowpath_mod.exit.i.i2392
	setp.gt.u32 	%p95, %r29, 2139095039;
	selp.f32 	%f364, 0f7FFFFFFF, 0f4B800000, %p95;
	mul.f32 	%f365, %f713, 0f34000000;
	mul.f32 	%f714, %f364, %f365;
	bra.uni 	$L__BB0_52;
$L__BB0_42:                             // %__nv_fast_fdividef.exit.i.i.i2369
	div.approx.f32 	%f348, %f734, %f703;
	cvt.rzi.f32.f32 	%f712, %f348;
	fma.rn.f32 	%f38, %f712, 0fC0000000, %f734;
	mov.b32 	%r28, %f38;
	setp.lt.u32 	%p86, %r28, 1073741824;
	@%p86 bra 	$L__BB0_47;
// %bb.43:
	setp.lt.u32 	%p87, %r28, -2147483647;
	@%p87 bra 	$L__BB0_45;
// %bb.44:
	add.f32 	%f353, %f712, 0fBF800000;
	setp.lt.f32 	%p90, %f38, 0fC0000000;
	add.f32 	%f354, %f353, 0fBF800000;
	selp.f32 	%f712, %f354, %f353, %p90;
	bra.uni 	$L__BB0_47;
$L__BB0_45:
	add.f32 	%f712, %f712, 0f3F800000;
	setp.ltu.f32 	%p88, %f38, 0f40800000;
	@%p88 bra 	$L__BB0_47;
// %bb.46:                              // %__nv_fmaf_rn.exit.i.i.i2373
	add.f32 	%f349, %f712, 0f3F800000;
	fma.rn.f32 	%f351, %f703, 0fC0400000, %f38;
	setp.ge.f32 	%p89, %f351, 0f00000000;
	add.f32 	%f352, %f349, 0f3F800000;
	selp.f32 	%f712, %f352, %f349, %p89;
$L__BB0_47:                             // %__internal_fmodf_fastpath_quot.exit.i.i2376
	fma.rn.f32 	%f714, %f712, 0fC0000000, %f734;
$L__BB0_52:                             // %__internal_fmodf_kernel.exit.i2395
	mov.f32 	%f230, 0f00000000;
	abs.f32 	%f366, %f714;
	setp.gtu.f32 	%p96, %f366, 0f7F800000;
	mov.b32 	%r383, %f35;
	and.b32  	%r36, %r383, -2147483648;
	@%p96 bra 	$L__BB0_54;
// %bb.53:
	mov.b32 	%r384, %f714;
	or.b32  	%r385, %r36, %r384;
	mov.b32 	%f714, %r385;
$L__BB0_54:                             // %__nv_fmodf.exit2396
	add.f32 	%f367, %f714, %f714;
	mov.b32 	%r386, %f367;
	and.b32  	%r387, %r386, -2147483648;
	or.b32  	%r388, %r387, 1056964608;
	mov.b32 	%f368, %r388;
	add.f32 	%f369, %f367, %f368;
	cvt.rzi.f32.f32 	%f370, %f369;
	abs.f32 	%f371, %f367;
	setp.gt.f32 	%p97, %f371, 0f4B000000;
	selp.f32 	%f372, %f367, %f370, %p97;
	cvt.rzi.f32.f32 	%f373, %f367;
	setp.lt.f32 	%p98, %f371, 0f3F000000;
	selp.f32 	%f374, %f373, %f372, %p98;
	cvt.rzi.s32.f32 	%r389, %f374;
	fma.rn.f32 	%f375, %f374, 0fBF000000, %f714;
	mul.f32 	%f376, %f375, %f375;
	fma.rn.f32 	%f377, %f376, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f378, %f376, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f379, %f377, %f376, 0fC0A55DF6;
	fma.rn.f32 	%f380, %f378, %f376, 0f4081E0CF;
	fma.rn.f32 	%f381, %f376, %f375, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f376, 0fC09DE9E6;
	fma.rn.f32 	%f383, %f379, %f381, 0f00000000;
	fma.rn.f32 	%f384, %f382, %f376, 0f3F800000;
	fma.rn.f32 	%f385, %f375, 0f40490FDB, %f383;
	and.b32  	%r390, %r389, 1;
	setp.eq.b32 	%p99, %r390, 1;
	selp.f32 	%f386, %f384, %f385, %p99;
	selp.f32 	%f387, %f385, %f384, %p99;
	and.b32  	%r391, %r389, 2;
	setp.eq.s32 	%p100, %r391, 0;
	neg.f32 	%f388, %f386;
	selp.f32 	%f389, %f386, %f388, %p100;
	add.s32 	%r392, %r389, 1;
	and.b32  	%r393, %r392, 2;
	setp.eq.s32 	%p101, %r393, 0;
	sub.f32 	%f391, %f230, %f387;
	cvt.rzi.f32.f32 	%f393, %f714;
	setp.eq.f32 	%p102, %f393, %f714;
	mul.f32 	%f394, %f714, 0f00000000;
	selp.f32 	%f76, %f394, %f389, %p102;
	abs.f32 	%f395, %f714;
	add.s32 	%r394, %r27, %r144;
	and.b32  	%r395, %r394, 3;
	cvt.rn.f32.s32 	%f397, %r395;
	div.approx.f32 	%f54, %f397, %f703;
	abs.f32 	%f738, %f54;
	setp.lt.f32 	%p104, %f738, 0f40000000;
	setp.gtu.f32 	%p367, %f738, 0f4B800000;
	mov.f32 	%f718, %f738;
	@%p104 bra 	$L__BB0_66;
// %bb.55:
	@%p367 bra 	$L__BB0_62;
	bra.uni 	$L__BB0_56;
$L__BB0_62:
	mov.b32 	%r38, %f738;
	and.b32  	%r396, %r38, 8388607;
	or.b32  	%r3443, %r396, 1065353216;
	mov.b32 	%f717, %r3443;
	add.s32 	%r397, %r38, -1073741824;
	and.b32  	%r3444, %r397, -8388608;
	setp.eq.s32 	%p111, %r3444, 0;
	@%p111 bra 	$L__BB0_65;
// %bb.63:                              // %__nv_fmaf_rn.exit4.i.i.i2421.preheader
	mov.f32 	%f408, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f407,%f408;
	// end inline asm
$L__BB0_64:                             // %__nv_fmaf_rn.exit4.i.i.i2421
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r398, %r3444, 192937984;
	add.s32 	%r399, %r3443, %r398;
	mov.b32 	%f409, %r399;
	mul.f32 	%f410, %f407, %f409;
	sub.f32 	%f411, %f409, %f410;
	fma.rn.f32 	%f412, %f411, %f407, %f410;
	sub.f32 	%f413, %f409, %f412;
	fma.rz.f32 	%f414, %f413, %f407, %f412;
	cvt.rzi.f32.f32 	%f415, %f414;
	sub.f32 	%f717, %f409, %f415;
	sub.s32 	%r3444, %r3444, %r398;
	mov.b32 	%r3443, %f717;
	setp.ne.s32 	%p112, %r3444, 0;
	setp.ne.s32 	%p113, %r3443, 0;
	and.pred  	%p114, %p112, %p113;
	@%p114 bra 	$L__BB0_64;
$L__BB0_65:                             // %__internal_fmodf_slowpath_mod.exit.i.i2423
	setp.gt.u32 	%p115, %r38, 2139095039;
	selp.f32 	%f416, 0f7FFFFFFF, 0f4B800000, %p115;
	mul.f32 	%f417, %f717, 0f34000000;
	mul.f32 	%f718, %f416, %f417;
	bra.uni 	$L__BB0_66;
$L__BB0_56:                             // %__nv_fast_fdividef.exit.i.i.i2400
	div.approx.f32 	%f400, %f738, %f703;
	cvt.rzi.f32.f32 	%f716, %f400;
	fma.rn.f32 	%f57, %f716, 0fC0000000, %f738;
	mov.b32 	%r37, %f57;
	setp.lt.u32 	%p106, %r37, 1073741824;
	@%p106 bra 	$L__BB0_61;
// %bb.57:
	setp.lt.u32 	%p107, %r37, -2147483647;
	@%p107 bra 	$L__BB0_59;
// %bb.58:
	add.f32 	%f405, %f716, 0fBF800000;
	setp.lt.f32 	%p110, %f57, 0fC0000000;
	add.f32 	%f406, %f405, 0fBF800000;
	selp.f32 	%f716, %f406, %f405, %p110;
	bra.uni 	$L__BB0_61;
$L__BB0_59:
	add.f32 	%f716, %f716, 0f3F800000;
	setp.ltu.f32 	%p108, %f57, 0f40800000;
	@%p108 bra 	$L__BB0_61;
// %bb.60:                              // %__nv_fmaf_rn.exit.i.i.i2404
	add.f32 	%f401, %f716, 0f3F800000;
	fma.rn.f32 	%f403, %f703, 0fC0400000, %f57;
	setp.ge.f32 	%p109, %f403, 0f00000000;
	add.f32 	%f404, %f401, 0f3F800000;
	selp.f32 	%f716, %f404, %f401, %p109;
$L__BB0_61:                             // %__internal_fmodf_fastpath_quot.exit.i.i2407
	fma.rn.f32 	%f718, %f716, 0fC0000000, %f738;
$L__BB0_66:                             // %__internal_fmodf_kernel.exit.i2426
	selp.f32 	%f392, %f387, %f391, %p101;
	setp.gt.f32 	%p103, %f395, 0f4B800000;
	add.f32 	%f396, %f76, 0f3F800000;
	abs.f32 	%f418, %f718;
	setp.gtu.f32 	%p116, %f418, 0f7F800000;
	mov.b32 	%r400, %f54;
	and.b32  	%r45, %r400, -2147483648;
	@%p116 bra 	$L__BB0_68;
// %bb.67:
	mov.b32 	%r401, %f718;
	or.b32  	%r402, %r45, %r401;
	mov.b32 	%f718, %r402;
$L__BB0_68:                             // %__nv_fmodf.exit2427
	selp.f32 	%f53, %f396, %f392, %p103;
	add.f32 	%f419, %f718, %f718;
	mov.b32 	%r403, %f419;
	and.b32  	%r404, %r403, -2147483648;
	or.b32  	%r405, %r404, 1056964608;
	mov.b32 	%f420, %r405;
	add.f32 	%f421, %f419, %f420;
	cvt.rzi.f32.f32 	%f422, %f421;
	abs.f32 	%f423, %f419;
	setp.gt.f32 	%p117, %f423, 0f4B000000;
	selp.f32 	%f424, %f419, %f422, %p117;
	cvt.rzi.f32.f32 	%f425, %f419;
	setp.lt.f32 	%p118, %f423, 0f3F000000;
	selp.f32 	%f426, %f425, %f424, %p118;
	cvt.rzi.s32.f32 	%r406, %f426;
	fma.rn.f32 	%f427, %f426, 0fBF000000, %f718;
	mul.f32 	%f428, %f427, %f427;
	fma.rn.f32 	%f429, %f428, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f430, %f428, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f431, %f429, %f428, 0fC0A55DF6;
	fma.rn.f32 	%f432, %f430, %f428, 0f4081E0CF;
	fma.rn.f32 	%f433, %f428, %f427, 0f00000000;
	fma.rn.f32 	%f434, %f432, %f428, 0fC09DE9E6;
	fma.rn.f32 	%f435, %f431, %f433, 0f00000000;
	fma.rn.f32 	%f436, %f434, %f428, 0f3F800000;
	fma.rn.f32 	%f437, %f427, 0f40490FDB, %f435;
	and.b32  	%r407, %r406, 1;
	setp.eq.b32 	%p119, %r407, 1;
	selp.f32 	%f438, %f436, %f437, %p119;
	selp.f32 	%f439, %f437, %f436, %p119;
	and.b32  	%r408, %r406, 2;
	setp.eq.s32 	%p120, %r408, 0;
	neg.f32 	%f440, %f438;
	selp.f32 	%f441, %f438, %f440, %p120;
	add.s32 	%r409, %r406, 1;
	and.b32  	%r410, %r409, 2;
	setp.eq.s32 	%p121, %r410, 0;
	sub.f32 	%f443, %f230, %f439;
	selp.f32 	%f444, %f439, %f443, %p121;
	cvt.rzi.f32.f32 	%f445, %f718;
	setp.eq.f32 	%p122, %f445, %f718;
	mul.f32 	%f446, %f718, 0f00000000;
	selp.f32 	%f78, %f446, %f441, %p122;
	abs.f32 	%f447, %f718;
	setp.gt.f32 	%p123, %f447, 0f4B800000;
	add.f32 	%f448, %f78, 0f3F800000;
	selp.f32 	%f72, %f448, %f444, %p123;
	and.b32  	%r46, %r1, 2;
	setp.eq.s32 	%p124, %r46, 0;
	mov.f32 	%f75, %f53;
	mov.f32 	%f77, %f72;
	@%p124 bra 	$L__BB0_70;
// %bb.69:                              // %L688
	neg.f32 	%f77, %f78;
	neg.f32 	%f75, %f76;
	mov.f32 	%f76, %f53;
	mov.f32 	%f78, %f72;
$L__BB0_70:                             // %L690
	@%p24 bra 	$L__BB0_218;
// %bb.71:
	@%p363 bra 	$L__BB0_214;
	bra.uni 	$L__BB0_72;
$L__BB0_214:
	mov.b32 	%r159, %f750;
	and.b32  	%r417, %r159, 8388607;
	or.b32  	%r3473, %r417, 1065353216;
	mov.b32 	%f749, %r3473;
	add.s32 	%r418, %r159, -1073741824;
	and.b32  	%r3474, %r418, -8388608;
	setp.eq.s32 	%p132, %r3474, 0;
	@%p132 bra 	$L__BB0_217;
// %bb.215:                             // %__nv_fmaf_rn.exit4.i.i.i2452.preheader
	mov.f32 	%f458, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f457,%f458;
	// end inline asm
$L__BB0_216:                            // %__nv_fmaf_rn.exit4.i.i.i2452
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r419, %r3474, 192937984;
	add.s32 	%r420, %r3473, %r419;
	mov.b32 	%f459, %r420;
	mul.f32 	%f460, %f457, %f459;
	sub.f32 	%f461, %f459, %f460;
	fma.rn.f32 	%f462, %f461, %f457, %f460;
	sub.f32 	%f463, %f459, %f462;
	fma.rz.f32 	%f464, %f463, %f457, %f462;
	cvt.rzi.f32.f32 	%f465, %f464;
	sub.f32 	%f749, %f459, %f465;
	sub.s32 	%r3474, %r3474, %r419;
	mov.b32 	%r3473, %f749;
	setp.ne.s32 	%p133, %r3474, 0;
	setp.ne.s32 	%p134, %r3473, 0;
	and.pred  	%p135, %p133, %p134;
	@%p135 bra 	$L__BB0_216;
$L__BB0_217:                            // %__internal_fmodf_slowpath_mod.exit.i.i2454
	setp.gt.u32 	%p136, %r159, 2139095039;
	selp.f32 	%f466, 0f7FFFFFFF, 0f4B800000, %p136;
	mul.f32 	%f467, %f749, 0f34000000;
	mul.f32 	%f750, %f466, %f467;
	bra.uni 	$L__BB0_218;
$L__BB0_72:                             // %__nv_fast_fdividef.exit.i.i.i2431
	div.approx.f32 	%f450, %f750, %f703;
	cvt.rzi.f32.f32 	%f748, %f450;
	fma.rn.f32 	%f171, %f748, 0fC0000000, %f750;
	mov.b32 	%r158, %f171;
	setp.lt.u32 	%p127, %r158, 1073741824;
	@%p127 bra 	$L__BB0_213;
// %bb.73:
	setp.lt.u32 	%p128, %r158, -2147483647;
	@%p128 bra 	$L__BB0_211;
// %bb.74:
	add.f32 	%f455, %f748, 0fBF800000;
	setp.lt.f32 	%p131, %f171, 0fC0000000;
	add.f32 	%f456, %f455, 0fBF800000;
	selp.f32 	%f748, %f456, %f455, %p131;
	bra.uni 	$L__BB0_213;
$L__BB0_211:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p129, %f171, 0f40800000;
	@%p129 bra 	$L__BB0_213;
// %bb.212:                             // %__nv_fmaf_rn.exit.i.i.i2435
	add.f32 	%f451, %f748, 0f3F800000;
	fma.rn.f32 	%f453, %f703, 0fC0400000, %f171;
	setp.ge.f32 	%p130, %f453, 0f00000000;
	add.f32 	%f454, %f451, 0f3F800000;
	selp.f32 	%f748, %f454, %f451, %p130;
$L__BB0_213:                            // %__internal_fmodf_fastpath_quot.exit.i.i2438
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_218:                            // %__internal_fmodf_kernel.exit.i2457
	abs.f32 	%f468, %f750;
	setp.gtu.f32 	%p137, %f468, 0f7F800000;
	@%p137 bra 	$L__BB0_220;
// %bb.219:
	mov.b32 	%r421, %f750;
	or.b32  	%r422, %r153, %r421;
	mov.b32 	%f750, %r422;
$L__BB0_220:                            // %__nv_fmodf.exit2458
	@%p44 bra 	$L__BB0_86;
// %bb.75:
	@%p364 bra 	$L__BB0_82;
	bra.uni 	$L__BB0_76;
$L__BB0_82:
	mov.b32 	%r50, %f726;
	and.b32  	%r437, %r50, 8388607;
	or.b32  	%r3445, %r437, 1065353216;
	mov.b32 	%f725, %r3445;
	add.s32 	%r438, %r50, -1073741824;
	and.b32  	%r3446, %r438, -8388608;
	setp.eq.s32 	%p152, %r3446, 0;
	@%p152 bra 	$L__BB0_85;
// %bb.83:                              // %__nv_fmaf_rn.exit4.i.i.i2483.preheader
	mov.f32 	%f510, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f509,%f510;
	// end inline asm
$L__BB0_84:                             // %__nv_fmaf_rn.exit4.i.i.i2483
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r439, %r3446, 192937984;
	add.s32 	%r440, %r3445, %r439;
	mov.b32 	%f511, %r440;
	mul.f32 	%f512, %f509, %f511;
	sub.f32 	%f513, %f511, %f512;
	fma.rn.f32 	%f514, %f513, %f509, %f512;
	sub.f32 	%f515, %f511, %f514;
	fma.rz.f32 	%f516, %f515, %f509, %f514;
	cvt.rzi.f32.f32 	%f517, %f516;
	sub.f32 	%f725, %f511, %f517;
	sub.s32 	%r3446, %r3446, %r439;
	mov.b32 	%r3445, %f725;
	setp.ne.s32 	%p153, %r3446, 0;
	setp.ne.s32 	%p154, %r3445, 0;
	and.pred  	%p155, %p153, %p154;
	@%p155 bra 	$L__BB0_84;
$L__BB0_85:                             // %__internal_fmodf_slowpath_mod.exit.i.i2485
	setp.gt.u32 	%p156, %r50, 2139095039;
	selp.f32 	%f518, 0f7FFFFFFF, 0f4B800000, %p156;
	mul.f32 	%f519, %f725, 0f34000000;
	mul.f32 	%f726, %f518, %f519;
	bra.uni 	$L__BB0_86;
$L__BB0_76:                             // %__nv_fast_fdividef.exit.i.i.i2462
	div.approx.f32 	%f502, %f726, %f703;
	cvt.rzi.f32.f32 	%f724, %f502;
	fma.rn.f32 	%f80, %f724, 0fC0000000, %f726;
	mov.b32 	%r49, %f80;
	setp.lt.u32 	%p147, %r49, 1073741824;
	@%p147 bra 	$L__BB0_81;
// %bb.77:
	setp.lt.u32 	%p148, %r49, -2147483647;
	@%p148 bra 	$L__BB0_79;
// %bb.78:
	add.f32 	%f507, %f724, 0fBF800000;
	setp.lt.f32 	%p151, %f80, 0fC0000000;
	add.f32 	%f508, %f507, 0fBF800000;
	selp.f32 	%f724, %f508, %f507, %p151;
	bra.uni 	$L__BB0_81;
$L__BB0_79:
	add.f32 	%f724, %f724, 0f3F800000;
	setp.ltu.f32 	%p149, %f80, 0f40800000;
	@%p149 bra 	$L__BB0_81;
// %bb.80:                              // %__nv_fmaf_rn.exit.i.i.i2466
	add.f32 	%f503, %f724, 0f3F800000;
	fma.rn.f32 	%f505, %f703, 0fC0400000, %f80;
	setp.ge.f32 	%p150, %f505, 0f00000000;
	add.f32 	%f506, %f503, 0f3F800000;
	selp.f32 	%f724, %f506, %f503, %p150;
$L__BB0_81:                             // %__internal_fmodf_fastpath_quot.exit.i.i2469
	fma.rn.f32 	%f726, %f724, 0fC0000000, %f726;
$L__BB0_86:                             // %__internal_fmodf_kernel.exit.i2488
	abs.f32 	%f520, %f726;
	setp.gtu.f32 	%p157, %f520, 0f7F800000;
	@%p157 bra 	$L__BB0_88;
// %bb.87:
	mov.b32 	%r441, %f726;
	or.b32  	%r442, %r15, %r441;
	mov.b32 	%f726, %r442;
$L__BB0_88:                             // %__nv_fmodf.exit2489
	@%p64 bra 	$L__BB0_100;
// %bb.89:
	@%p365 bra 	$L__BB0_96;
	bra.uni 	$L__BB0_90;
$L__BB0_96:
	mov.b32 	%r58, %f730;
	and.b32  	%r451, %r58, 8388607;
	or.b32  	%r3447, %r451, 1065353216;
	mov.b32 	%f729, %r3447;
	add.s32 	%r452, %r58, -1073741824;
	and.b32  	%r3448, %r452, -8388608;
	setp.eq.s32 	%p172, %r3448, 0;
	@%p172 bra 	$L__BB0_99;
// %bb.97:                              // %__nv_fmaf_rn.exit4.i.i.i2514.preheader
	mov.f32 	%f560, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f559,%f560;
	// end inline asm
$L__BB0_98:                             // %__nv_fmaf_rn.exit4.i.i.i2514
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r453, %r3448, 192937984;
	add.s32 	%r454, %r3447, %r453;
	mov.b32 	%f561, %r454;
	mul.f32 	%f562, %f559, %f561;
	sub.f32 	%f563, %f561, %f562;
	fma.rn.f32 	%f564, %f563, %f559, %f562;
	sub.f32 	%f565, %f561, %f564;
	fma.rz.f32 	%f566, %f565, %f559, %f564;
	cvt.rzi.f32.f32 	%f567, %f566;
	sub.f32 	%f729, %f561, %f567;
	sub.s32 	%r3448, %r3448, %r453;
	mov.b32 	%r3447, %f729;
	setp.ne.s32 	%p173, %r3448, 0;
	setp.ne.s32 	%p174, %r3447, 0;
	and.pred  	%p175, %p173, %p174;
	@%p175 bra 	$L__BB0_98;
$L__BB0_99:                             // %__internal_fmodf_slowpath_mod.exit.i.i2516
	setp.gt.u32 	%p176, %r58, 2139095039;
	selp.f32 	%f568, 0f7FFFFFFF, 0f4B800000, %p176;
	mul.f32 	%f569, %f729, 0f34000000;
	mul.f32 	%f730, %f568, %f569;
	bra.uni 	$L__BB0_100;
$L__BB0_90:                             // %__nv_fast_fdividef.exit.i.i.i2493
	div.approx.f32 	%f552, %f730, %f703;
	cvt.rzi.f32.f32 	%f728, %f552;
	fma.rn.f32 	%f97, %f728, 0fC0000000, %f730;
	mov.b32 	%r57, %f97;
	setp.lt.u32 	%p167, %r57, 1073741824;
	@%p167 bra 	$L__BB0_95;
// %bb.91:
	setp.lt.u32 	%p168, %r57, -2147483647;
	@%p168 bra 	$L__BB0_93;
// %bb.92:
	add.f32 	%f557, %f728, 0fBF800000;
	setp.lt.f32 	%p171, %f97, 0fC0000000;
	add.f32 	%f558, %f557, 0fBF800000;
	selp.f32 	%f728, %f558, %f557, %p171;
	bra.uni 	$L__BB0_95;
$L__BB0_93:
	add.f32 	%f728, %f728, 0f3F800000;
	setp.ltu.f32 	%p169, %f97, 0f40800000;
	@%p169 bra 	$L__BB0_95;
// %bb.94:                              // %__nv_fmaf_rn.exit.i.i.i2497
	add.f32 	%f553, %f728, 0f3F800000;
	fma.rn.f32 	%f555, %f703, 0fC0400000, %f97;
	setp.ge.f32 	%p170, %f555, 0f00000000;
	add.f32 	%f556, %f553, 0f3F800000;
	selp.f32 	%f728, %f556, %f553, %p170;
$L__BB0_95:                             // %__internal_fmodf_fastpath_quot.exit.i.i2500
	fma.rn.f32 	%f730, %f728, 0fC0000000, %f730;
$L__BB0_100:                            // %__internal_fmodf_kernel.exit.i2519
	abs.f32 	%f570, %f730;
	setp.gtu.f32 	%p177, %f570, 0f7F800000;
	@%p177 bra 	$L__BB0_102;
// %bb.101:
	mov.b32 	%r455, %f730;
	or.b32  	%r456, %r24, %r455;
	mov.b32 	%f730, %r456;
$L__BB0_102:                            // %__nv_fmodf.exit2520
	@%p84 bra 	$L__BB0_114;
// %bb.103:
	@%p366 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_104;
$L__BB0_110:
	mov.b32 	%r68, %f734;
	and.b32  	%r471, %r68, 8388607;
	or.b32  	%r3449, %r471, 1065353216;
	mov.b32 	%f733, %r3449;
	add.s32 	%r472, %r68, -1073741824;
	and.b32  	%r3450, %r472, -8388608;
	setp.eq.s32 	%p192, %r3450, 0;
	@%p192 bra 	$L__BB0_113;
// %bb.111:                             // %__nv_fmaf_rn.exit4.i.i.i2545.preheader
	mov.f32 	%f612, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f611,%f612;
	// end inline asm
$L__BB0_112:                            // %__nv_fmaf_rn.exit4.i.i.i2545
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r473, %r3450, 192937984;
	add.s32 	%r474, %r3449, %r473;
	mov.b32 	%f613, %r474;
	mul.f32 	%f614, %f611, %f613;
	sub.f32 	%f615, %f613, %f614;
	fma.rn.f32 	%f616, %f615, %f611, %f614;
	sub.f32 	%f617, %f613, %f616;
	fma.rz.f32 	%f618, %f617, %f611, %f616;
	cvt.rzi.f32.f32 	%f619, %f618;
	sub.f32 	%f733, %f613, %f619;
	sub.s32 	%r3450, %r3450, %r473;
	mov.b32 	%r3449, %f733;
	setp.ne.s32 	%p193, %r3450, 0;
	setp.ne.s32 	%p194, %r3449, 0;
	and.pred  	%p195, %p193, %p194;
	@%p195 bra 	$L__BB0_112;
$L__BB0_113:                            // %__internal_fmodf_slowpath_mod.exit.i.i2547
	setp.gt.u32 	%p196, %r68, 2139095039;
	selp.f32 	%f620, 0f7FFFFFFF, 0f4B800000, %p196;
	mul.f32 	%f621, %f733, 0f34000000;
	mul.f32 	%f734, %f620, %f621;
	bra.uni 	$L__BB0_114;
$L__BB0_104:                            // %__nv_fast_fdividef.exit.i.i.i2524
	div.approx.f32 	%f604, %f734, %f703;
	cvt.rzi.f32.f32 	%f732, %f604;
	fma.rn.f32 	%f112, %f732, 0fC0000000, %f734;
	mov.b32 	%r67, %f112;
	setp.lt.u32 	%p187, %r67, 1073741824;
	@%p187 bra 	$L__BB0_109;
// %bb.105:
	setp.lt.u32 	%p188, %r67, -2147483647;
	@%p188 bra 	$L__BB0_107;
// %bb.106:
	add.f32 	%f609, %f732, 0fBF800000;
	setp.lt.f32 	%p191, %f112, 0fC0000000;
	add.f32 	%f610, %f609, 0fBF800000;
	selp.f32 	%f732, %f610, %f609, %p191;
	bra.uni 	$L__BB0_109;
$L__BB0_107:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p189, %f112, 0f40800000;
	@%p189 bra 	$L__BB0_109;
// %bb.108:                             // %__nv_fmaf_rn.exit.i.i.i2528
	add.f32 	%f605, %f732, 0f3F800000;
	fma.rn.f32 	%f607, %f703, 0fC0400000, %f112;
	setp.ge.f32 	%p190, %f607, 0f00000000;
	add.f32 	%f608, %f605, 0f3F800000;
	selp.f32 	%f732, %f608, %f605, %p190;
$L__BB0_109:                            // %__internal_fmodf_fastpath_quot.exit.i.i2531
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_114:                            // %__internal_fmodf_kernel.exit.i2550
	abs.f32 	%f622, %f734;
	setp.gtu.f32 	%p197, %f622, 0f7F800000;
	@%p197 bra 	$L__BB0_116;
// %bb.115:
	mov.b32 	%r475, %f734;
	or.b32  	%r476, %r36, %r475;
	mov.b32 	%f734, %r476;
$L__BB0_116:                            // %__nv_fmodf.exit2551
	add.f32 	%f623, %f734, %f734;
	mov.b32 	%r477, %f623;
	and.b32  	%r478, %r477, -2147483648;
	or.b32  	%r479, %r478, 1056964608;
	mov.b32 	%f624, %r479;
	add.f32 	%f625, %f623, %f624;
	cvt.rzi.f32.f32 	%f626, %f625;
	abs.f32 	%f627, %f623;
	setp.gt.f32 	%p199, %f627, 0f4B000000;
	selp.f32 	%f628, %f623, %f626, %p199;
	cvt.rzi.f32.f32 	%f629, %f623;
	setp.lt.f32 	%p200, %f627, 0f3F000000;
	selp.f32 	%f630, %f629, %f628, %p200;
	cvt.rzi.s32.f32 	%r480, %f630;
	fma.rn.f32 	%f631, %f630, 0fBF000000, %f734;
	mul.f32 	%f632, %f631, %f631;
	fma.rn.f32 	%f633, %f632, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f634, %f632, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f635, %f633, %f632, 0fC0A55DF6;
	fma.rn.f32 	%f636, %f634, %f632, 0f4081E0CF;
	fma.rn.f32 	%f637, %f632, %f631, 0f00000000;
	fma.rn.f32 	%f638, %f636, %f632, 0fC09DE9E6;
	fma.rn.f32 	%f639, %f635, %f637, 0f00000000;
	fma.rn.f32 	%f640, %f638, %f632, 0f3F800000;
	fma.rn.f32 	%f641, %f631, 0f40490FDB, %f639;
	and.b32  	%r481, %r480, 1;
	setp.eq.b32 	%p201, %r481, 1;
	selp.f32 	%f642, %f640, %f641, %p201;
	selp.f32 	%f643, %f641, %f640, %p201;
	and.b32  	%r482, %r480, 2;
	setp.eq.s32 	%p202, %r482, 0;
	neg.f32 	%f644, %f642;
	selp.f32 	%f645, %f642, %f644, %p202;
	add.s32 	%r483, %r480, 1;
	and.b32  	%r484, %r483, 2;
	setp.eq.s32 	%p203, %r484, 0;
	sub.f32 	%f647, %f230, %f643;
	cvt.rzi.f32.f32 	%f649, %f734;
	setp.eq.f32 	%p204, %f649, %f734;
	mul.f32 	%f650, %f734, 0f00000000;
	selp.f32 	%f148, %f650, %f645, %p204;
	abs.f32 	%f651, %f734;
	@%p104 bra 	$L__BB0_128;
// %bb.117:
	@%p367 bra 	$L__BB0_124;
	bra.uni 	$L__BB0_118;
$L__BB0_124:
	mov.b32 	%r76, %f738;
	and.b32  	%r485, %r76, 8388607;
	or.b32  	%r3451, %r485, 1065353216;
	mov.b32 	%f737, %r3451;
	add.s32 	%r486, %r76, -1073741824;
	and.b32  	%r3452, %r486, -8388608;
	setp.eq.s32 	%p212, %r3452, 0;
	@%p212 bra 	$L__BB0_127;
// %bb.125:                             // %__nv_fmaf_rn.exit4.i.i.i2576.preheader
	mov.f32 	%f662, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f661,%f662;
	// end inline asm
$L__BB0_126:                            // %__nv_fmaf_rn.exit4.i.i.i2576
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r487, %r3452, 192937984;
	add.s32 	%r488, %r3451, %r487;
	mov.b32 	%f663, %r488;
	mul.f32 	%f664, %f661, %f663;
	sub.f32 	%f665, %f663, %f664;
	fma.rn.f32 	%f666, %f665, %f661, %f664;
	sub.f32 	%f667, %f663, %f666;
	fma.rz.f32 	%f668, %f667, %f661, %f666;
	cvt.rzi.f32.f32 	%f669, %f668;
	sub.f32 	%f737, %f663, %f669;
	sub.s32 	%r3452, %r3452, %r487;
	mov.b32 	%r3451, %f737;
	setp.ne.s32 	%p213, %r3452, 0;
	setp.ne.s32 	%p214, %r3451, 0;
	and.pred  	%p215, %p213, %p214;
	@%p215 bra 	$L__BB0_126;
$L__BB0_127:                            // %__internal_fmodf_slowpath_mod.exit.i.i2578
	setp.gt.u32 	%p216, %r76, 2139095039;
	selp.f32 	%f670, 0f7FFFFFFF, 0f4B800000, %p216;
	mul.f32 	%f671, %f737, 0f34000000;
	mul.f32 	%f738, %f670, %f671;
	bra.uni 	$L__BB0_128;
$L__BB0_118:                            // %__nv_fast_fdividef.exit.i.i.i2555
	div.approx.f32 	%f654, %f738, %f703;
	cvt.rzi.f32.f32 	%f736, %f654;
	fma.rn.f32 	%f129, %f736, 0fC0000000, %f738;
	mov.b32 	%r75, %f129;
	setp.lt.u32 	%p207, %r75, 1073741824;
	@%p207 bra 	$L__BB0_123;
// %bb.119:
	setp.lt.u32 	%p208, %r75, -2147483647;
	@%p208 bra 	$L__BB0_121;
// %bb.120:
	add.f32 	%f659, %f736, 0fBF800000;
	setp.lt.f32 	%p211, %f129, 0fC0000000;
	add.f32 	%f660, %f659, 0fBF800000;
	selp.f32 	%f736, %f660, %f659, %p211;
	bra.uni 	$L__BB0_123;
$L__BB0_121:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p209, %f129, 0f40800000;
	@%p209 bra 	$L__BB0_123;
// %bb.122:                             // %__nv_fmaf_rn.exit.i.i.i2559
	add.f32 	%f655, %f736, 0f3F800000;
	fma.rn.f32 	%f657, %f703, 0fC0400000, %f129;
	setp.ge.f32 	%p210, %f657, 0f00000000;
	add.f32 	%f658, %f655, 0f3F800000;
	selp.f32 	%f736, %f658, %f655, %p210;
$L__BB0_123:                            // %__internal_fmodf_fastpath_quot.exit.i.i2562
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_128:                            // %__internal_fmodf_kernel.exit.i2581
	selp.f32 	%f648, %f643, %f647, %p203;
	setp.gt.f32 	%p205, %f651, 0f4B800000;
	add.f32 	%f652, %f148, 0f3F800000;
	abs.f32 	%f672, %f738;
	setp.gtu.f32 	%p217, %f672, 0f7F800000;
	@%p217 bra 	$L__BB0_130;
// %bb.129:
	mov.b32 	%r489, %f738;
	or.b32  	%r490, %r45, %r489;
	mov.b32 	%f738, %r490;
$L__BB0_130:                            // %__nv_fmodf.exit2582
	selp.f32 	%f127, %f652, %f648, %p205;
	add.f32 	%f673, %f738, %f738;
	mov.b32 	%r491, %f673;
	and.b32  	%r492, %r491, -2147483648;
	or.b32  	%r493, %r492, 1056964608;
	mov.b32 	%f674, %r493;
	add.f32 	%f675, %f673, %f674;
	cvt.rzi.f32.f32 	%f676, %f675;
	abs.f32 	%f677, %f673;
	setp.gt.f32 	%p219, %f677, 0f4B000000;
	selp.f32 	%f678, %f673, %f676, %p219;
	cvt.rzi.f32.f32 	%f679, %f673;
	setp.lt.f32 	%p220, %f677, 0f3F000000;
	selp.f32 	%f680, %f679, %f678, %p220;
	cvt.rzi.s32.f32 	%r494, %f680;
	fma.rn.f32 	%f681, %f680, 0fBF000000, %f738;
	mul.f32 	%f682, %f681, %f681;
	fma.rn.f32 	%f683, %f682, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f684, %f682, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f685, %f683, %f682, 0fC0A55DF6;
	fma.rn.f32 	%f686, %f684, %f682, 0f4081E0CF;
	fma.rn.f32 	%f687, %f682, %f681, 0f00000000;
	fma.rn.f32 	%f688, %f686, %f682, 0fC09DE9E6;
	fma.rn.f32 	%f689, %f685, %f687, 0f00000000;
	fma.rn.f32 	%f690, %f688, %f682, 0f3F800000;
	fma.rn.f32 	%f691, %f681, 0f40490FDB, %f689;
	and.b32  	%r495, %r494, 1;
	setp.eq.b32 	%p221, %r495, 1;
	selp.f32 	%f692, %f690, %f691, %p221;
	selp.f32 	%f693, %f691, %f690, %p221;
	and.b32  	%r496, %r494, 2;
	setp.eq.s32 	%p222, %r496, 0;
	neg.f32 	%f694, %f692;
	selp.f32 	%f695, %f692, %f694, %p222;
	add.s32 	%r497, %r494, 1;
	and.b32  	%r498, %r497, 2;
	setp.eq.s32 	%p223, %r498, 0;
	sub.f32 	%f697, %f230, %f693;
	selp.f32 	%f698, %f693, %f697, %p223;
	cvt.rzi.f32.f32 	%f699, %f738;
	setp.eq.f32 	%p224, %f699, %f738;
	mul.f32 	%f700, %f738, 0f00000000;
	selp.f32 	%f150, %f700, %f695, %p224;
	abs.f32 	%f701, %f738;
	setp.gt.f32 	%p225, %f701, 0f4B800000;
	add.f32 	%f702, %f150, 0f3F800000;
	selp.f32 	%f144, %f702, %f698, %p225;
	mov.f32 	%f147, %f127;
	mov.f32 	%f149, %f144;
	@%p124 bra 	$L__BB0_132;
// %bb.131:                             // %L981
	neg.f32 	%f149, %f150;
	neg.f32 	%f147, %f148;
	mov.f32 	%f148, %f127;
	mov.f32 	%f150, %f144;
$L__BB0_132:                            // %L983
	setp.gt.u32 	%p226, %r1, 15;
	mov.u32 	%r168, 999999999;
	@%p226 bra 	$L__BB0_222;
// %bb.133:                             // %L1013
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	shl.b32 	%r506, %r1, 4;
	and.b32  	%r507, %r506, 240;
	or.b32  	%r508, %r507, %r2;
	mul.wide.u32 	%rd68, %r508, 4;
	add.s64 	%rd69, %rd1, %rd68;
	ld.global.u32 	%r509, [%rd69];
	shl.b32 	%r510, %r509, 16;
	cvt.s32.s16 	%r85, %r509;
	shr.s32 	%r86, %r509, 16;
	or.b32  	%r511, %r510, 65535;
	setp.lt.u32 	%p227, %r511, 1114111;
	setp.lt.u32 	%p228, %r509, 1048576;
	and.pred  	%p229, %p227, %p228;
	@%p229 bra 	$L__BB0_221;
	bra.uni 	$L__BB0_134;
$L__BB0_221:                            // %L1257
	mul.lo.s32 	%r515, %r86, 546;
	mad.lo.s32 	%r168, %r85, 33, %r515;
$L__BB0_222:                            // %pass566
	add.f32 	%f207, %f746, %f746;
	mov.b32 	%r332, %f207;
	add.f32 	%f469, %f750, %f750;
	and.b32  	%r333, %r332, -2147483648;
	add.f32 	%f261, %f706, %f706;
	add.f32 	%f313, %f710, %f710;
	mov.b32 	%r429, %f469;
	or.b32  	%r334, %r333, 1056964608;
	mov.b32 	%r348, %f261;
	mov.b32 	%r370, %f313;
	and.b32  	%r430, %r429, -2147483648;
	add.f32 	%f521, %f726, %f726;
	add.f32 	%f571, %f730, %f730;
	mov.b32 	%f208, %r334;
	and.b32  	%r349, %r348, -2147483648;
	and.b32  	%r371, %r370, -2147483648;
	or.b32  	%r431, %r430, 1056964608;
	mov.b32 	%r443, %f521;
	mov.b32 	%r463, %f571;
	add.f32 	%f209, %f207, %f208;
	abs.f32 	%f211, %f207;
	or.b32  	%r350, %r349, 1056964608;
	or.b32  	%r372, %r371, 1056964608;
	mov.b32 	%f470, %r431;
	and.b32  	%r444, %r443, -2147483648;
	and.b32  	%r464, %r463, -2147483648;
	cvt.rzi.f32.f32 	%f210, %f209;
	setp.gt.f32 	%p37, %f211, 0f4B000000;
	mov.b32 	%f262, %r350;
	mov.b32 	%f314, %r372;
	add.f32 	%f471, %f469, %f470;
	abs.f32 	%f473, %f469;
	or.b32  	%r445, %r444, 1056964608;
	or.b32  	%r465, %r464, 1056964608;
	selp.f32 	%f212, %f207, %f210, %p37;
	cvt.rzi.f32.f32 	%f213, %f207;
	setp.lt.f32 	%p38, %f211, 0f3F000000;
	add.f32 	%f263, %f261, %f262;
	abs.f32 	%f265, %f261;
	add.f32 	%f315, %f313, %f314;
	abs.f32 	%f317, %f313;
	cvt.rzi.f32.f32 	%f472, %f471;
	setp.gt.f32 	%p139, %f473, 0f4B000000;
	mov.b32 	%f522, %r445;
	mov.b32 	%f572, %r465;
	selp.f32 	%f214, %f213, %f212, %p38;
	cvt.rzi.f32.f32 	%f264, %f263;
	setp.gt.f32 	%p57, %f265, 0f4B000000;
	cvt.rzi.f32.f32 	%f316, %f315;
	setp.gt.f32 	%p77, %f317, 0f4B000000;
	selp.f32 	%f474, %f469, %f472, %p139;
	cvt.rzi.f32.f32 	%f475, %f469;
	setp.lt.f32 	%p140, %f473, 0f3F000000;
	add.f32 	%f523, %f521, %f522;
	abs.f32 	%f525, %f521;
	add.f32 	%f573, %f571, %f572;
	abs.f32 	%f575, %f571;
	fma.rn.f32 	%f215, %f214, 0fBF000000, %f746;
	selp.f32 	%f266, %f261, %f264, %p57;
	cvt.rzi.f32.f32 	%f267, %f261;
	setp.lt.f32 	%p58, %f265, 0f3F000000;
	selp.f32 	%f318, %f313, %f316, %p77;
	cvt.rzi.f32.f32 	%f319, %f313;
	setp.lt.f32 	%p78, %f317, 0f3F000000;
	selp.f32 	%f476, %f475, %f474, %p140;
	cvt.rzi.f32.f32 	%f524, %f523;
	setp.gt.f32 	%p159, %f525, 0f4B000000;
	cvt.rzi.f32.f32 	%f574, %f573;
	setp.gt.f32 	%p179, %f575, 0f4B000000;
	mul.f32 	%f216, %f215, %f215;
	selp.f32 	%f268, %f267, %f266, %p58;
	selp.f32 	%f320, %f319, %f318, %p78;
	fma.rn.f32 	%f477, %f476, 0fBF000000, %f750;
	selp.f32 	%f526, %f521, %f524, %p159;
	cvt.rzi.f32.f32 	%f527, %f521;
	setp.lt.f32 	%p160, %f525, 0f3F000000;
	selp.f32 	%f576, %f571, %f574, %p179;
	cvt.rzi.f32.f32 	%f577, %f571;
	setp.lt.f32 	%p180, %f575, 0f3F000000;
	fma.rn.f32 	%f217, %f216, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f218, %f216, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f269, %f268, 0fBF000000, %f706;
	fma.rn.f32 	%f321, %f320, 0fBF000000, %f710;
	mul.f32 	%f478, %f477, %f477;
	selp.f32 	%f528, %f527, %f526, %p160;
	selp.f32 	%f578, %f577, %f576, %p180;
	cvt.rzi.s32.f32 	%r335, %f214;
	fma.rn.f32 	%f219, %f217, %f216, 0fC0A55DF6;
	fma.rn.f32 	%f220, %f218, %f216, 0f4081E0CF;
	fma.rn.f32 	%f221, %f216, %f215, 0f00000000;
	mul.f32 	%f270, %f269, %f269;
	mul.f32 	%f322, %f321, %f321;
	fma.rn.f32 	%f479, %f478, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f480, %f478, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f529, %f528, 0fBF000000, %f726;
	fma.rn.f32 	%f579, %f578, 0fBF000000, %f730;
	fma.rn.f32 	%f222, %f220, %f216, 0fC09DE9E6;
	fma.rn.f32 	%f223, %f219, %f221, 0f00000000;
	and.b32  	%r336, %r335, 1;
	fma.rn.f32 	%f271, %f270, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f272, %f270, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f323, %f322, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f324, %f322, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r432, %f476;
	fma.rn.f32 	%f481, %f479, %f478, 0fC0A55DF6;
	fma.rn.f32 	%f482, %f480, %f478, 0f4081E0CF;
	fma.rn.f32 	%f483, %f478, %f477, 0f00000000;
	mul.f32 	%f530, %f529, %f529;
	mul.f32 	%f580, %f579, %f579;
	fma.rn.f32 	%f224, %f222, %f216, 0f3F800000;
	fma.rn.f32 	%f225, %f215, 0f40490FDB, %f223;
	setp.eq.b32 	%p39, %r336, 1;
	cvt.rzi.s32.f32 	%r351, %f268;
	fma.rn.f32 	%f273, %f271, %f270, 0fC0A55DF6;
	fma.rn.f32 	%f274, %f272, %f270, 0f4081E0CF;
	fma.rn.f32 	%f275, %f270, %f269, 0f00000000;
	cvt.rzi.s32.f32 	%r373, %f320;
	fma.rn.f32 	%f325, %f323, %f322, 0fC0A55DF6;
	fma.rn.f32 	%f326, %f324, %f322, 0f4081E0CF;
	fma.rn.f32 	%f327, %f322, %f321, 0f00000000;
	fma.rn.f32 	%f484, %f482, %f478, 0fC09DE9E6;
	fma.rn.f32 	%f485, %f481, %f483, 0f00000000;
	and.b32  	%r433, %r432, 1;
	fma.rn.f32 	%f531, %f530, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f532, %f530, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f581, %f580, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f582, %f580, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f226, %f224, %f225, %p39;
	and.b32  	%r337, %r335, 2;
	fma.rn.f32 	%f276, %f274, %f270, 0fC09DE9E6;
	fma.rn.f32 	%f277, %f273, %f275, 0f00000000;
	and.b32  	%r352, %r351, 1;
	fma.rn.f32 	%f328, %f326, %f322, 0fC09DE9E6;
	fma.rn.f32 	%f329, %f325, %f327, 0f00000000;
	and.b32  	%r374, %r373, 1;
	fma.rn.f32 	%f486, %f484, %f478, 0f3F800000;
	fma.rn.f32 	%f487, %f477, 0f40490FDB, %f485;
	setp.eq.b32 	%p141, %r433, 1;
	cvt.rzi.s32.f32 	%r446, %f528;
	fma.rn.f32 	%f533, %f531, %f530, 0fC0A55DF6;
	fma.rn.f32 	%f534, %f532, %f530, 0f4081E0CF;
	fma.rn.f32 	%f535, %f530, %f529, 0f00000000;
	cvt.rzi.s32.f32 	%r466, %f578;
	fma.rn.f32 	%f583, %f581, %f580, 0fC0A55DF6;
	fma.rn.f32 	%f584, %f582, %f580, 0f4081E0CF;
	fma.rn.f32 	%f585, %f580, %f579, 0f00000000;
	setp.eq.s32 	%p40, %r337, 0;
	neg.f32 	%f228, %f226;
	add.s32 	%r338, %r335, 1;
	cvt.rzi.f32.f32 	%f233, %f746;
	fma.rn.f32 	%f278, %f276, %f270, 0f3F800000;
	fma.rn.f32 	%f279, %f269, 0f40490FDB, %f277;
	setp.eq.b32 	%p59, %r352, 1;
	fma.rn.f32 	%f330, %f328, %f322, 0f3F800000;
	fma.rn.f32 	%f331, %f321, 0f40490FDB, %f329;
	setp.eq.b32 	%p79, %r374, 1;
	selp.f32 	%f488, %f486, %f487, %p141;
	and.b32  	%r434, %r432, 2;
	fma.rn.f32 	%f536, %f534, %f530, 0fC09DE9E6;
	fma.rn.f32 	%f537, %f533, %f535, 0f00000000;
	and.b32  	%r447, %r446, 1;
	fma.rn.f32 	%f586, %f584, %f580, 0fC09DE9E6;
	fma.rn.f32 	%f587, %f583, %f585, 0f00000000;
	and.b32  	%r467, %r466, 1;
	selp.f32 	%f227, %f225, %f224, %p39;
	selp.f32 	%f229, %f226, %f228, %p40;
	and.b32  	%r339, %r338, 2;
	setp.eq.f32 	%p42, %f233, %f746;
	mul.f32 	%f234, %f746, 0f00000000;
	selp.f32 	%f280, %f278, %f279, %p59;
	and.b32  	%r353, %r351, 2;
	selp.f32 	%f332, %f330, %f331, %p79;
	and.b32  	%r375, %r373, 2;
	setp.eq.s32 	%p142, %r434, 0;
	neg.f32 	%f490, %f488;
	add.s32 	%r435, %r432, 1;
	cvt.rzi.f32.f32 	%f495, %f750;
	fma.rn.f32 	%f538, %f536, %f530, 0f3F800000;
	fma.rn.f32 	%f539, %f529, 0f40490FDB, %f537;
	setp.eq.b32 	%p161, %r447, 1;
	fma.rn.f32 	%f588, %f586, %f580, 0f3F800000;
	fma.rn.f32 	%f589, %f579, 0f40490FDB, %f587;
	setp.eq.b32 	%p181, %r467, 1;
	setp.eq.s32 	%p41, %r339, 0;
	sub.f32 	%f231, %f230, %f227;
	selp.f32 	%f235, %f234, %f229, %p42;
	abs.f32 	%f236, %f746;
	setp.eq.s32 	%p60, %r353, 0;
	neg.f32 	%f282, %f280;
	add.s32 	%r354, %r351, 1;
	cvt.rzi.f32.f32 	%f287, %f706;
	setp.eq.s32 	%p80, %r375, 0;
	neg.f32 	%f334, %f332;
	add.s32 	%r376, %r373, 1;
	cvt.rzi.f32.f32 	%f339, %f710;
	selp.f32 	%f489, %f487, %f486, %p141;
	selp.f32 	%f491, %f488, %f490, %p142;
	and.b32  	%r436, %r435, 2;
	setp.eq.f32 	%p144, %f495, %f750;
	mul.f32 	%f496, %f750, 0f00000000;
	selp.f32 	%f540, %f538, %f539, %p161;
	and.b32  	%r448, %r446, 2;
	selp.f32 	%f590, %f588, %f589, %p181;
	and.b32  	%r468, %r466, 2;
	selp.f32 	%f232, %f227, %f231, %p41;
	setp.gt.f32 	%p43, %f236, 0f4B800000;
	add.f32 	%f237, %f235, 0f3F800000;
	selp.f32 	%f281, %f279, %f278, %p59;
	selp.f32 	%f283, %f280, %f282, %p60;
	and.b32  	%r355, %r354, 2;
	setp.eq.f32 	%p62, %f287, %f706;
	mul.f32 	%f288, %f706, 0f00000000;
	selp.f32 	%f333, %f331, %f330, %p79;
	selp.f32 	%f335, %f332, %f334, %p80;
	and.b32  	%r377, %r376, 2;
	setp.eq.f32 	%p82, %f339, %f710;
	mul.f32 	%f340, %f710, 0f00000000;
	setp.eq.s32 	%p143, %r436, 0;
	sub.f32 	%f493, %f230, %f489;
	selp.f32 	%f497, %f496, %f491, %p144;
	abs.f32 	%f498, %f750;
	setp.eq.s32 	%p162, %r448, 0;
	neg.f32 	%f542, %f540;
	add.s32 	%r449, %r446, 1;
	cvt.rzi.f32.f32 	%f547, %f726;
	setp.eq.s32 	%p182, %r468, 0;
	neg.f32 	%f592, %f590;
	add.s32 	%r469, %r466, 1;
	cvt.rzi.f32.f32 	%f597, %f730;
	selp.f32 	%f238, %f237, %f232, %p43;
	setp.eq.s32 	%p61, %r355, 0;
	sub.f32 	%f285, %f230, %f281;
	selp.f32 	%f16, %f288, %f283, %p62;
	abs.f32 	%f289, %f706;
	setp.eq.s32 	%p81, %r377, 0;
	sub.f32 	%f337, %f230, %f333;
	selp.f32 	%f341, %f340, %f335, %p82;
	abs.f32 	%f342, %f710;
	selp.f32 	%f494, %f489, %f493, %p143;
	setp.gt.f32 	%p145, %f498, 0f4B800000;
	add.f32 	%f499, %f497, 0f3F800000;
	selp.f32 	%f541, %f539, %f538, %p161;
	selp.f32 	%f543, %f540, %f542, %p162;
	and.b32  	%r450, %r449, 2;
	setp.eq.f32 	%p164, %f547, %f726;
	mul.f32 	%f548, %f726, 0f00000000;
	selp.f32 	%f591, %f589, %f588, %p181;
	selp.f32 	%f593, %f590, %f592, %p182;
	and.b32  	%r470, %r469, 2;
	setp.eq.f32 	%p184, %f597, %f730;
	mul.f32 	%f598, %f730, 0f00000000;
	mov.b32 	%r328, %f238;
	mov.b32 	%r331, %f235;
	selp.f32 	%f286, %f281, %f285, %p61;
	setp.gt.f32 	%p63, %f289, 0f4B800000;
	add.f32 	%f290, %f16, 0f3F800000;
	selp.f32 	%f338, %f333, %f337, %p81;
	setp.gt.f32 	%p83, %f342, 0f4B800000;
	add.f32 	%f343, %f341, 0f3F800000;
	selp.f32 	%f500, %f499, %f494, %p145;
	setp.eq.s32 	%p163, %r450, 0;
	sub.f32 	%f545, %f230, %f541;
	selp.f32 	%f94, %f548, %f543, %p164;
	abs.f32 	%f549, %f726;
	setp.eq.s32 	%p183, %r470, 0;
	sub.f32 	%f595, %f230, %f591;
	selp.f32 	%f599, %f598, %f593, %p184;
	abs.f32 	%f600, %f730;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r327, %r331, -2147483648;
	selp.f32 	%f17, %f290, %f286, %p63;
	selp.f32 	%f344, %f343, %f338, %p83;
	mov.b32 	%r425, %f500;
	mov.b32 	%r428, %f497;
	selp.f32 	%f546, %f541, %f545, %p163;
	setp.gt.f32 	%p165, %f549, 0f4B800000;
	add.f32 	%f550, %f94, 0f3F800000;
	selp.f32 	%f596, %f591, %f595, %p183;
	setp.gt.f32 	%p185, %f600, 0f4B800000;
	add.f32 	%f601, %f599, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r326, %r328, %r327;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r329, %r331, %r328;
	// end inline asm
	mov.b32 	%r366, %f344;
	mov.b32 	%r365, %f17;
	mov.b32 	%r369, %f341;
	mov.b32 	%r368, %f16;
	mov.b32 	%r412, %f75;
	mov.b32 	%r413, %f77;
	mov.b32 	%r415, %f76;
	mov.b32 	%r416, %f78;
	xor.b32  	%r424, %r428, -2147483648;
	selp.f32 	%f95, %f550, %f546, %p165;
	selp.f32 	%f602, %f601, %f596, %p185;
	// begin inline asm
	cvt.rn.f16x2.f32 %r364, %r366, %r365;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r367, %r369, %r368;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r411, %r413, %r412;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r414, %r416, %r415;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r423, %r425, %r424;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r426, %r428, %r425;
	// end inline asm
	mov.b32 	%r459, %f602;
	mov.b32 	%r458, %f95;
	mov.b32 	%r462, %f599;
	mov.b32 	%r461, %f94;
	// begin inline asm
	cvt.rn.f16x2.f32 %r457, %r459, %r458;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r460, %r462, %r461;
	// end inline asm
	mov.b32 	%r500, %f147;
	mov.b32 	%r501, %f149;
	// begin inline asm
	cvt.rn.f16x2.f32 %r499, %r501, %r500;
	// end inline asm
	mov.b32 	%r503, %f148;
	mov.b32 	%r504, %f150;
	// begin inline asm
	cvt.rn.f16x2.f32 %r502, %r504, %r503;
	// end inline asm
	shl.b32 	%r517, %r2, 1;
	shl.b32 	%r518, %r1, 6;
	and.b32  	%r519, %r518, 192;
	shr.u32 	%r520, %r1, 3;
	and.b32  	%r521, %r520, 2;
	and.b32  	%r522, %r144, 1;
	or.b32  	%r523, %r521, %r522;
	shl.b32 	%r524, %r523, 4;
	bfe.u32 	%r525, %r1, 3, 1;
	and.b32  	%r526, %r517, 14;
	or.b32  	%r527, %r526, %r525;
	or.b32  	%r528, %r524, %r5;
	or.b32  	%r529, %r528, %r519;
	or.b32  	%r530, %r529, %r527;
	mul.wide.u32 	%rd75, %r530, 4;
	add.s64 	%rd76, %rd2, %rd75;
	ld.global.u32 	%r169, [%rd76];
	ld.global.u32 	%r170, [%rd76+1024];
	shl.b32 	%r531, %r297, 13;
	shl.b32 	%r532, %r301, 7;
	add.s32 	%r171, %r532, %r531;
	shl.b32 	%r533, %r4, 7;
	shl.b32 	%r534, %r1, 2;
	or.b32  	%r172, %r534, %r533;
	and.b32  	%r173, %r1, 16;
	shr.u32 	%r535, %r1, 4;
	and.b32  	%r536, %r156, 30;
	or.b32  	%r537, %r536, %r535;
	mul.lo.s32 	%r538, %r537, 257;
	and.b32  	%r539, %r3, 224;
	shr.u32 	%r540, %r2, 3;
	mad.lo.s32 	%r541, %r540, 257, %r539;
	or.b32  	%r542, %r540, 2;
	mad.lo.s32 	%r543, %r542, 257, %r539;
	or.b32  	%r544, %r540, 4;
	mad.lo.s32 	%r545, %r544, 257, %r539;
	or.b32  	%r546, %r540, 6;
	mad.lo.s32 	%r547, %r546, 257, %r539;
	or.b32  	%r548, %r540, 8;
	mad.lo.s32 	%r549, %r548, 257, %r539;
	or.b32  	%r550, %r540, 10;
	mad.lo.s32 	%r551, %r550, 257, %r539;
	or.b32  	%r552, %r540, 12;
	mad.lo.s32 	%r553, %r552, 257, %r539;
	or.b32  	%r554, %r540, 14;
	mad.lo.s32 	%r555, %r554, 257, %r539;
	or.b32  	%r556, %r540, 16;
	mad.lo.s32 	%r557, %r556, 257, %r539;
	or.b32  	%r558, %r540, 18;
	mad.lo.s32 	%r559, %r558, 257, %r539;
	or.b32  	%r560, %r540, 20;
	mad.lo.s32 	%r561, %r560, 257, %r539;
	or.b32  	%r562, %r540, 22;
	mad.lo.s32 	%r563, %r562, 257, %r539;
	or.b32  	%r564, %r540, 24;
	mad.lo.s32 	%r565, %r564, 257, %r539;
	or.b32  	%r566, %r540, 26;
	mad.lo.s32 	%r567, %r566, 257, %r539;
	or.b32  	%r568, %r540, 28;
	mad.lo.s32 	%r569, %r568, 257, %r539;
	or.b32  	%r570, %r540, 30;
	mad.lo.s32 	%r571, %r570, 257, %r539;
	mul.lo.s32 	%r572, %r143, 2184;
	mad.lo.s32 	%r573, %r527, 33, %r572;
	mad.lo.s32 	%r574, %r523, 546, %r573;
	setp.lt.u32 	%p230, %r1, 4;
	setp.eq.s32 	%p231, %r144, 4;
	setp.eq.s32 	%p232, %r144, 5;
	mul.lo.s32 	%r575, %r540, 258;
	and.b32  	%r576, %r2, 1;
	neg.s32 	%r577, %r576;
	setp.eq.b32 	%p233, %r576, 1;
	and.b32  	%r578, %r577, 2064;
	bfe.s32 	%r579, %r2, 1, 1;
	and.b32  	%r580, %r2, 2;
	setp.eq.s32 	%p234, %r580, 0;
	and.b32  	%r581, %r579, 1032;
	and.b32  	%r582, %r534, 12;
	bfe.s32 	%r583, %r1, 3, 1;
	and.b32  	%r584, %r1, 8;
	setp.eq.s32 	%p235, %r584, 0;
	and.b32  	%r585, %r583, 4144;
	bfe.s32 	%r586, %r2, 2, 1;
	and.b32  	%r587, %r2, 4;
	setp.eq.s32 	%p236, %r587, 0;
	and.b32  	%r588, %r586, 516;
	add.s32 	%r589, %r523, %r575;
	add.s32 	%r590, %r589, %r582;
	add.s32 	%r591, %r590, %r578;
	add.s32 	%r592, %r591, %r581;
	add.s32 	%r593, %r592, %r585;
	add.s32 	%r594, %r593, %r588;
	mul.wide.u32 	%rd77, %r594, 4;
	mov.u64 	%rd78, shmem;
	add.s64 	%rd7, %rd78, %rd77;
	selp.b64 	%rd79, 0, 516, %p236;
	selp.b64 	%rd80, 0, 4144, %p235;
	selp.b64 	%rd81, 0, 1032, %p234;
	selp.b64 	%rd82, 2064, 0, %p233;
	cvt.u64.u32 	%rd83, %r582;
	cvt.u64.u32 	%rd84, %r575;
	cvt.u64.u32 	%rd85, %r523;
	add.s64 	%rd86, %rd85, %rd84;
	add.s64 	%rd87, %rd86, %rd83;
	add.s64 	%rd88, %rd87, %rd82;
	add.s64 	%rd89, %rd88, %rd81;
	add.s64 	%rd90, %rd89, %rd80;
	add.s64 	%rd91, %rd90, %rd79;
	shl.b64 	%rd92, %rd91, 2;
	add.s64 	%rd8, %rd78, %rd92;
	shl.b32 	%r595, %r299, 15;
	shl.b32 	%r596, %r303, 9;
	add.s32 	%r597, %r596, %r595;
	or.b32  	%r598, %r173, %r3;
	and.b32  	%r599, %r1, 15;
	or.b32  	%r600, %r599, %r5;
	or.b32  	%r174, %r600, %r598;
	cvt.s64.s32 	%rd9, %r597;
	add.s32 	%r601, %r2, %r538;
	mul.wide.u32 	%rd93, %r601, 4;
	add.s64 	%rd10, %rd78, %rd93;
	cvt.u64.u32 	%rd94, %r2;
	cvt.u64.u32 	%rd11, %r538;
	add.s64 	%rd95, %rd11, %rd94;
	shl.b64 	%rd96, %rd95, 2;
	add.s64 	%rd12, %rd78, %rd96;
	add.s32 	%r602, %r541, %r1;
	mul.wide.u32 	%rd97, %r602, 4;
	add.s64 	%rd13, %rd78, %rd97;
	add.s32 	%r603, %r543, %r1;
	mul.wide.u32 	%rd98, %r603, 4;
	add.s64 	%rd14, %rd78, %rd98;
	add.s32 	%r604, %r545, %r1;
	mul.wide.u32 	%rd99, %r604, 4;
	add.s64 	%rd15, %rd78, %rd99;
	add.s32 	%r605, %r547, %r1;
	mul.wide.u32 	%rd100, %r605, 4;
	add.s64 	%rd16, %rd78, %rd100;
	add.s32 	%r606, %r549, %r1;
	mul.wide.u32 	%rd101, %r606, 4;
	add.s64 	%rd17, %rd78, %rd101;
	add.s32 	%r607, %r551, %r1;
	mul.wide.u32 	%rd102, %r607, 4;
	add.s64 	%rd18, %rd78, %rd102;
	add.s32 	%r608, %r553, %r1;
	mul.wide.u32 	%rd103, %r608, 4;
	add.s64 	%rd19, %rd78, %rd103;
	add.s32 	%r609, %r555, %r1;
	mul.wide.u32 	%rd104, %r609, 4;
	add.s64 	%rd20, %rd78, %rd104;
	add.s32 	%r610, %r557, %r1;
	mul.wide.u32 	%rd105, %r610, 4;
	add.s64 	%rd21, %rd78, %rd105;
	add.s32 	%r611, %r559, %r1;
	mul.wide.u32 	%rd106, %r611, 4;
	add.s64 	%rd22, %rd78, %rd106;
	add.s32 	%r612, %r561, %r1;
	mul.wide.u32 	%rd107, %r612, 4;
	add.s64 	%rd23, %rd78, %rd107;
	add.s32 	%r613, %r563, %r1;
	mul.wide.u32 	%rd108, %r613, 4;
	add.s64 	%rd24, %rd78, %rd108;
	add.s32 	%r614, %r565, %r1;
	mul.wide.u32 	%rd109, %r614, 4;
	add.s64 	%rd25, %rd78, %rd109;
	add.s32 	%r615, %r567, %r1;
	mul.wide.u32 	%rd110, %r615, 4;
	add.s64 	%rd26, %rd78, %rd110;
	add.s32 	%r616, %r569, %r1;
	mul.wide.u32 	%rd111, %r616, 4;
	add.s64 	%rd27, %rd78, %rd111;
	add.s32 	%r617, %r571, %r1;
	mul.wide.u32 	%rd112, %r617, 4;
	add.s64 	%rd28, %rd78, %rd112;
	add.s32 	%r618, %r574, %r540;
	mul.wide.u32 	%rd113, %r618, 4;
	add.s64 	%rd29, %rd78, %rd113;
	add.s32 	%r619, %r574, %r542;
	mul.wide.u32 	%rd114, %r619, 4;
	add.s64 	%rd30, %rd78, %rd114;
	add.s32 	%r620, %r574, %r544;
	mul.wide.u32 	%rd115, %r620, 4;
	add.s64 	%rd31, %rd78, %rd115;
	add.s32 	%r621, %r574, %r546;
	mul.wide.u32 	%rd116, %r621, 4;
	add.s64 	%rd32, %rd78, %rd116;
	add.s32 	%r622, %r574, %r548;
	mul.wide.u32 	%rd117, %r622, 4;
	add.s64 	%rd33, %rd78, %rd117;
	add.s32 	%r623, %r574, %r550;
	mul.wide.u32 	%rd118, %r623, 4;
	add.s64 	%rd34, %rd78, %rd118;
	add.s32 	%r624, %r574, %r552;
	mul.wide.u32 	%rd119, %r624, 4;
	add.s64 	%rd35, %rd78, %rd119;
	add.s32 	%r625, %r574, %r554;
	mul.wide.u32 	%rd120, %r625, 4;
	add.s64 	%rd36, %rd78, %rd120;
	add.s32 	%r626, %r574, %r556;
	mul.wide.u32 	%rd121, %r626, 4;
	add.s64 	%rd37, %rd78, %rd121;
	add.s32 	%r627, %r574, %r558;
	mul.wide.u32 	%rd122, %r627, 4;
	add.s64 	%rd38, %rd78, %rd122;
	add.s32 	%r628, %r574, %r560;
	mul.wide.u32 	%rd123, %r628, 4;
	add.s64 	%rd39, %rd78, %rd123;
	add.s32 	%r629, %r574, %r562;
	mul.wide.u32 	%rd124, %r629, 4;
	add.s64 	%rd40, %rd78, %rd124;
	add.s32 	%r630, %r574, %r564;
	mul.wide.u32 	%rd125, %r630, 4;
	add.s64 	%rd41, %rd78, %rd125;
	add.s32 	%r631, %r574, %r566;
	mul.wide.u32 	%rd126, %r631, 4;
	add.s64 	%rd42, %rd78, %rd126;
	add.s32 	%r632, %r574, %r568;
	mul.wide.u32 	%rd127, %r632, 4;
	add.s64 	%rd43, %rd78, %rd127;
	add.s32 	%r633, %r574, %r570;
	mul.wide.u32 	%rd128, %r633, 4;
	add.s64 	%rd44, %rd78, %rd128;
	add.s32 	%r634, %r144, -1;
	setp.lt.u32 	%p237, %r634, 3;
	or.pred  	%p238, %p230, %p237;
	or.pred  	%p239, %p238, %p231;
	and.b32  	%r635, %r1, 24;
	setp.eq.s32 	%p240, %r635, 24;
	or.pred  	%p241, %p232, %p240;
	selp.b32 	%r175, 1145324612, -286331154, %p238;
	or.pred  	%p1, %p239, %p241;
	add.s32 	%r636, %r594, 32;
	mul.wide.u32 	%rd129, %r636, 4;
	add.s64 	%rd45, %rd78, %rd129;
	add.s32 	%r637, %r594, 48;
	mul.wide.u32 	%rd130, %r637, 4;
	add.s64 	%rd46, %rd78, %rd130;
	add.s32 	%r638, %r594, 64;
	mul.wide.u32 	%rd131, %r638, 4;
	add.s64 	%rd47, %rd78, %rd131;
	add.s32 	%r639, %r594, 80;
	mul.wide.u32 	%rd132, %r639, 4;
	add.s64 	%rd48, %rd78, %rd132;
	add.s32 	%r640, %r594, 96;
	mul.wide.u32 	%rd133, %r640, 4;
	add.s64 	%rd49, %rd78, %rd133;
	add.s32 	%r641, %r594, 112;
	mul.wide.u32 	%rd134, %r641, 4;
	add.s64 	%rd50, %rd78, %rd134;
	add.s32 	%r642, %r594, 128;
	mul.wide.u32 	%rd135, %r642, 4;
	add.s64 	%rd51, %rd78, %rd135;
	add.s32 	%r643, %r594, 144;
	mul.wide.u32 	%rd136, %r643, 4;
	add.s64 	%rd52, %rd78, %rd136;
	add.s32 	%r644, %r594, 160;
	mul.wide.u32 	%rd137, %r644, 4;
	add.s64 	%rd53, %rd78, %rd137;
	add.s32 	%r645, %r594, 176;
	mul.wide.u32 	%rd138, %r645, 4;
	add.s64 	%rd54, %rd78, %rd138;
	add.s32 	%r646, %r594, 192;
	mul.wide.u32 	%rd139, %r646, 4;
	add.s64 	%rd55, %rd78, %rd139;
	add.s32 	%r647, %r594, 208;
	mul.wide.u32 	%rd140, %r647, 4;
	add.s64 	%rd56, %rd78, %rd140;
	add.s32 	%r648, %r594, 224;
	mul.wide.u32 	%rd141, %r648, 4;
	add.s64 	%rd57, %rd78, %rd141;
	add.s32 	%r649, %r594, 240;
	mul.wide.u32 	%rd142, %r649, 4;
	add.s64 	%rd58, %rd78, %rd142;
	mov.u32 	%r88, 0;
	setp.eq.s32 	%p243, %r173, 0;
	mov.u16 	%rs38, 25600;
	mov.u16 	%rs40, 21504;
	mov.u16 	%rs44, 18432;
	mov.u32 	%r3465, %r88;
	mov.u32 	%r3466, %r88;
	mov.u32 	%r3467, %r88;
	bra.uni 	$L__BB0_223;
$L__BB0_194:                            // %L32557
                                        //   in Loop: Header=BB0_223 Depth=1
	add.s32 	%r142, %r88, 64;
	setp.ne.s32 	%p362, %r88, 32704;
	mov.u32 	%r88, %r142;
	@%p362 bra 	$L__BB0_223;
	bra.uni 	$L__BB0_195;
$L__BB0_223:                            // %L1614
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_241 Depth 2
                                        //     Child Loop BB0_169 Depth 2
	add.s32 	%r650, %r88, %r297;
	setp.lt.s32 	%p242, %r650, %r298;
	@%p242 bra 	$L__BB0_224;
	bra.uni 	$L__BB0_195;
$L__BB0_224:                            // %pass761
                                        //   in Loop: Header=BB0_223 Depth=1
	cvt.u32.u64 	%r843, %rd11;
	or.b32  	%r844, %r88, %r2;
	shl.b32 	%r845, %r844, 13;
	and.b32  	%r846, %r845, 268034048;
	or.b32  	%r847, %r846, %r172;
	add.s32 	%r848, %r171, %r847;
	shr.s32 	%r849, %r848, 31;
	shr.u32 	%r850, %r849, 4;
	add.s32 	%r851, %r848, %r850;
	shr.s32 	%r852, %r851, 28;
	setp.lt.s32 	%p244, %r848, 0;
	and.b32  	%r853, %r851, -268435456;
	setp.ne.s32 	%p245, %r853, %r848;
	and.pred  	%p246, %p244, %p245;
	selp.u32 	%r854, 1, 0, %p246;
	sub.s32 	%r855, %r854, %r852;
	shl.b32 	%r856, %r855, 28;
	add.s32 	%r857, %r856, %r848;
	mul.wide.s32 	%rd143, %r857, 4;
	add.s64 	%rd144, %rd3, %rd143;
	ld.global.v4.u32 	{%r858, %r859, %r860, %r861}, [%rd144];
	or.b32  	%r862, %r844, 16;
	shl.b32 	%r863, %r862, 13;
	and.b32  	%r864, %r863, 268165120;
	or.b32  	%r865, %r864, %r172;
	add.s32 	%r866, %r171, %r865;
	shr.s32 	%r867, %r866, 31;
	shr.u32 	%r868, %r867, 4;
	add.s32 	%r869, %r866, %r868;
	shr.s32 	%r870, %r869, 28;
	setp.lt.s32 	%p247, %r866, 0;
	and.b32  	%r871, %r869, -268435456;
	setp.ne.s32 	%p248, %r871, %r866;
	and.pred  	%p249, %p247, %p248;
	selp.u32 	%r872, 1, 0, %p249;
	sub.s32 	%r873, %r872, %r870;
	shl.b32 	%r874, %r873, 28;
	add.s32 	%r875, %r874, %r866;
	mul.wide.s32 	%rd145, %r875, 4;
	add.s64 	%rd146, %rd3, %rd145;
	ld.global.v4.u32 	{%r876, %r877, %r878, %r879}, [%rd146];
	and.b32  	%r880, %r88, 32704;
	or.b32  	%r881, %r2, %r880;
	shl.b32 	%r882, %r881, 13;
	or.b32  	%r883, %r882, %r172;
	or.b32  	%r884, %r883, 262144;
	add.s32 	%r885, %r171, %r884;
	shr.s32 	%r886, %r885, 31;
	shr.u32 	%r887, %r886, 4;
	add.s32 	%r888, %r885, %r887;
	shr.s32 	%r889, %r888, 28;
	setp.lt.s32 	%p250, %r885, 0;
	and.b32  	%r890, %r888, -268435456;
	setp.ne.s32 	%p251, %r890, %r885;
	and.pred  	%p252, %p250, %p251;
	selp.u32 	%r891, 1, 0, %p252;
	sub.s32 	%r892, %r891, %r889;
	shl.b32 	%r893, %r892, 28;
	add.s32 	%r894, %r893, %r885;
	mul.wide.s32 	%rd147, %r894, 4;
	add.s64 	%rd148, %rd3, %rd147;
	ld.global.v4.u32 	{%r895, %r896, %r897, %r898}, [%rd148];
	or.b32  	%r899, %r883, 393216;
	add.s32 	%r900, %r171, %r899;
	shr.s32 	%r901, %r900, 31;
	shr.u32 	%r902, %r901, 4;
	add.s32 	%r903, %r900, %r902;
	shr.s32 	%r904, %r903, 28;
	setp.lt.s32 	%p253, %r900, 0;
	and.b32  	%r905, %r903, -268435456;
	setp.ne.s32 	%p254, %r905, %r900;
	and.pred  	%p255, %p253, %p254;
	selp.u32 	%r906, 1, 0, %p255;
	sub.s32 	%r907, %r906, %r904;
	shl.b32 	%r908, %r907, 28;
	add.s32 	%r909, %r908, %r900;
	mul.wide.s32 	%rd149, %r909, 4;
	add.s64 	%rd150, %rd3, %rd149;
	ld.global.v4.u32 	{%r910, %r911, %r912, %r913}, [%rd150];
	selp.b32 	%r914, %r860, %r858, %p243;
	shfl.sync.bfly.b32	%r915, %r914, 16, 31, -1;
	selp.b32 	%r653, %r858, %r915, %p243;
	selp.b32 	%r658, %r915, %r860, %p243;
	selp.b32 	%r916, %r861, %r859, %p243;
	shfl.sync.bfly.b32	%r917, %r916, 16, 31, -1;
	selp.b32 	%r661, %r859, %r917, %p243;
	selp.b32 	%r666, %r917, %r861, %p243;
	selp.b32 	%r918, %r878, %r876, %p243;
	shfl.sync.bfly.b32	%r919, %r918, 16, 31, -1;
	selp.b32 	%r669, %r876, %r919, %p243;
	selp.b32 	%r674, %r919, %r878, %p243;
	selp.b32 	%r920, %r879, %r877, %p243;
	shfl.sync.bfly.b32	%r921, %r920, 16, 31, -1;
	selp.b32 	%r677, %r877, %r921, %p243;
	selp.b32 	%r682, %r921, %r879, %p243;
	selp.b32 	%r922, %r897, %r895, %p243;
	shfl.sync.bfly.b32	%r923, %r922, 16, 31, -1;
	selp.b32 	%r685, %r895, %r923, %p243;
	selp.b32 	%r690, %r923, %r897, %p243;
	selp.b32 	%r924, %r898, %r896, %p243;
	shfl.sync.bfly.b32	%r925, %r924, 16, 31, -1;
	selp.b32 	%r693, %r896, %r925, %p243;
	selp.b32 	%r698, %r925, %r898, %p243;
	selp.b32 	%r926, %r912, %r910, %p243;
	shfl.sync.bfly.b32	%r927, %r926, 16, 31, -1;
	selp.b32 	%r701, %r910, %r927, %p243;
	selp.b32 	%r706, %r927, %r912, %p243;
	selp.b32 	%r928, %r913, %r911, %p243;
	shfl.sync.bfly.b32	%r929, %r928, 16, 31, -1;
	selp.b32 	%r709, %r911, %r929, %p243;
	selp.b32 	%r714, %r929, %r913, %p243;
	shl.b32 	%r654, %r658, 4;
	mov.u32 	%r652, 252645135;
	// begin inline asm
	lop3.b32 %r716, %r652, %r653, %r654, 202;
	// end inline asm
	shr.u32 	%r657, %r653, 4;
	// begin inline asm
	lop3.b32 %r732, %r652, %r657, %r658, 202;
	// end inline asm
	shl.b32 	%r662, %r666, 4;
	// begin inline asm
	lop3.b32 %r724, %r652, %r661, %r662, 202;
	// end inline asm
	shr.u32 	%r665, %r661, 4;
	// begin inline asm
	lop3.b32 %r740, %r652, %r665, %r666, 202;
	// end inline asm
	shl.b32 	%r670, %r674, 4;
	// begin inline asm
	lop3.b32 %r748, %r652, %r669, %r670, 202;
	// end inline asm
	shr.u32 	%r673, %r669, 4;
	// begin inline asm
	lop3.b32 %r764, %r652, %r673, %r674, 202;
	// end inline asm
	shl.b32 	%r678, %r682, 4;
	// begin inline asm
	lop3.b32 %r756, %r652, %r677, %r678, 202;
	// end inline asm
	shr.u32 	%r681, %r677, 4;
	// begin inline asm
	lop3.b32 %r772, %r652, %r681, %r682, 202;
	// end inline asm
	shl.b32 	%r686, %r690, 4;
	// begin inline asm
	lop3.b32 %r717, %r652, %r685, %r686, 202;
	// end inline asm
	shr.u32 	%r689, %r685, 4;
	// begin inline asm
	lop3.b32 %r733, %r652, %r689, %r690, 202;
	// end inline asm
	shl.b32 	%r694, %r698, 4;
	// begin inline asm
	lop3.b32 %r725, %r652, %r693, %r694, 202;
	// end inline asm
	shr.u32 	%r697, %r693, 4;
	// begin inline asm
	lop3.b32 %r741, %r652, %r697, %r698, 202;
	// end inline asm
	shl.b32 	%r702, %r706, 4;
	// begin inline asm
	lop3.b32 %r749, %r652, %r701, %r702, 202;
	// end inline asm
	shr.u32 	%r705, %r701, 4;
	// begin inline asm
	lop3.b32 %r765, %r652, %r705, %r706, 202;
	// end inline asm
	shl.b32 	%r710, %r714, 4;
	// begin inline asm
	lop3.b32 %r757, %r652, %r709, %r710, 202;
	// end inline asm
	shr.u32 	%r713, %r709, 4;
	// begin inline asm
	lop3.b32 %r773, %r652, %r713, %r714, 202;
	// end inline asm
	mov.u32 	%r718, 25152;
	// begin inline asm
	prmt.b32 %r780, %r716, %r717, %r718;
	// end inline asm
	mov.u32 	%r722, 29521;
	// begin inline asm
	prmt.b32 %r812, %r716, %r717, %r722;
	// end inline asm
	// begin inline asm
	prmt.b32 %r788, %r724, %r725, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r820, %r724, %r725, %r722;
	// end inline asm
	// begin inline asm
	prmt.b32 %r781, %r732, %r733, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r813, %r732, %r733, %r722;
	// end inline asm
	// begin inline asm
	prmt.b32 %r789, %r740, %r741, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r821, %r740, %r741, %r722;
	// end inline asm
	// begin inline asm
	prmt.b32 %r796, %r748, %r749, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r828, %r748, %r749, %r722;
	// end inline asm
	// begin inline asm
	prmt.b32 %r804, %r756, %r757, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r836, %r756, %r757, %r722;
	// end inline asm
	// begin inline asm
	prmt.b32 %r797, %r764, %r765, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r829, %r764, %r765, %r722;
	// end inline asm
	// begin inline asm
	prmt.b32 %r805, %r772, %r773, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r837, %r772, %r773, %r722;
	// end inline asm
	mov.u32 	%r782, 21520;
	// begin inline asm
	prmt.b32 %r779, %r780, %r781, %r782;
	// end inline asm
	mov.u32 	%r786, 30258;
	// begin inline asm
	prmt.b32 %r783, %r780, %r781, %r786;
	// end inline asm
	// begin inline asm
	prmt.b32 %r787, %r788, %r789, %r782;
	// end inline asm
	// begin inline asm
	prmt.b32 %r791, %r788, %r789, %r786;
	// end inline asm
	// begin inline asm
	prmt.b32 %r795, %r796, %r797, %r782;
	// end inline asm
	// begin inline asm
	prmt.b32 %r799, %r796, %r797, %r786;
	// end inline asm
	// begin inline asm
	prmt.b32 %r803, %r804, %r805, %r782;
	// end inline asm
	// begin inline asm
	prmt.b32 %r807, %r804, %r805, %r786;
	// end inline asm
	// begin inline asm
	prmt.b32 %r811, %r812, %r813, %r782;
	// end inline asm
	// begin inline asm
	prmt.b32 %r815, %r812, %r813, %r786;
	// end inline asm
	// begin inline asm
	prmt.b32 %r819, %r820, %r821, %r782;
	// end inline asm
	// begin inline asm
	prmt.b32 %r823, %r820, %r821, %r786;
	// end inline asm
	// begin inline asm
	prmt.b32 %r827, %r828, %r829, %r782;
	// end inline asm
	// begin inline asm
	prmt.b32 %r831, %r828, %r829, %r786;
	// end inline asm
	// begin inline asm
	prmt.b32 %r835, %r836, %r837, %r782;
	// end inline asm
	// begin inline asm
	prmt.b32 %r839, %r836, %r837, %r786;
	// end inline asm
	st.shared.u32 	[%rd10], %r779;
	st.shared.u32 	[%rd12+512], %r787;
	st.shared.u32 	[%rd12+256], %r783;
	st.shared.u32 	[%rd12+768], %r791;
	and.b32  	%r930, %r862, 31;
	add.s32 	%r931, %r930, %r843;
	mul.wide.u32 	%rd151, %r931, 4;
	add.s64 	%rd153, %rd78, %rd151;
	st.shared.u32 	[%rd153], %r795;
	cvt.u64.u32 	%rd154, %r930;
	add.s64 	%rd155, %rd11, %rd154;
	shl.b64 	%rd156, %rd155, 2;
	add.s64 	%rd157, %rd78, %rd156;
	st.shared.u32 	[%rd157+512], %r803;
	st.shared.u32 	[%rd157+256], %r799;
	st.shared.u32 	[%rd157+768], %r807;
	st.shared.u32 	[%rd12+128], %r811;
	st.shared.u32 	[%rd12+640], %r819;
	st.shared.u32 	[%rd12+384], %r815;
	st.shared.u32 	[%rd12+896], %r823;
	st.shared.u32 	[%rd157+128], %r827;
	st.shared.u32 	[%rd157+640], %r835;
	st.shared.u32 	[%rd157+384], %r831;
	st.shared.u32 	[%rd157+896], %r839;
	bar.sync 	0;
	ld.shared.u32 	%r176, [%rd13];
	ld.shared.u32 	%r177, [%rd14];
	ld.shared.u32 	%r178, [%rd15];
	ld.shared.u32 	%r179, [%rd16];
	ld.shared.u32 	%r180, [%rd17];
	ld.shared.u32 	%r181, [%rd18];
	ld.shared.u32 	%r182, [%rd19];
	ld.shared.u32 	%r183, [%rd20];
	ld.shared.u32 	%r184, [%rd21];
	ld.shared.u32 	%r185, [%rd22];
	ld.shared.u32 	%r186, [%rd23];
	ld.shared.u32 	%r187, [%rd24];
	ld.shared.u32 	%r188, [%rd25];
	ld.shared.u32 	%r189, [%rd26];
	ld.shared.u32 	%r190, [%rd27];
	ld.shared.u32 	%r191, [%rd28];
	bar.sync 	0;
	shfl.sync.idx.b32	%r192, %r168, 0, 31, -1;
	shfl.sync.idx.b32	%r193, %r168, 1, 31, -1;
	shfl.sync.idx.b32	%r194, %r168, 2, 31, -1;
	shfl.sync.idx.b32	%r195, %r168, 3, 31, -1;
	shfl.sync.idx.b32	%r196, %r168, 4, 31, -1;
	shfl.sync.idx.b32	%r197, %r168, 5, 31, -1;
	shfl.sync.idx.b32	%r198, %r168, 6, 31, -1;
	shfl.sync.idx.b32	%r199, %r168, 7, 31, -1;
	shfl.sync.idx.b32	%r200, %r168, 8, 31, -1;
	shfl.sync.idx.b32	%r201, %r168, 9, 31, -1;
	shfl.sync.idx.b32	%r202, %r168, 10, 31, -1;
	shfl.sync.idx.b32	%r203, %r168, 11, 31, -1;
	shfl.sync.idx.b32	%r204, %r168, 12, 31, -1;
	shfl.sync.idx.b32	%r205, %r168, 13, 31, -1;
	shfl.sync.idx.b32	%r206, %r168, 14, 31, -1;
	shfl.sync.idx.b32	%r207, %r168, 15, 31, -1;
	setp.eq.s32 	%p256, %r192, 999999999;
	@%p256 bra 	$L__BB0_135;
// %bb.225:                             // %pass3031
                                        //   in Loop: Header=BB0_223 Depth=1
	add.s32 	%r932, %r192, %r1;
	mul.wide.s32 	%rd158, %r932, 4;
	add.s64 	%rd160, %rd78, %rd158;
	st.shared.u32 	[%rd160], %r176;
	setp.eq.s32 	%p257, %r193, 999999999;
	@%p257 bra 	$L__BB0_136;
// %bb.226:                             // %pass3097
                                        //   in Loop: Header=BB0_223 Depth=1
	add.s32 	%r933, %r193, %r1;
	mul.wide.s32 	%rd161, %r933, 4;
	add.s64 	%rd163, %rd78, %rd161;
	st.shared.u32 	[%rd163], %r177;
	setp.eq.s32 	%p258, %r194, 999999999;
	@%p258 bra 	$L__BB0_137;
// %bb.227:                             // %pass3163
                                        //   in Loop: Header=BB0_223 Depth=1
	add.s32 	%r934, %r194, %r1;
	mul.wide.s32 	%rd164, %r934, 4;
	add.s64 	%rd166, %rd78, %rd164;
	st.shared.u32 	[%rd166], %r178;
	setp.eq.s32 	%p259, %r195, 999999999;
	@%p259 bra 	$L__BB0_138;
// %bb.228:                             // %pass3229
                                        //   in Loop: Header=BB0_223 Depth=1
	add.s32 	%r935, %r195, %r1;
	mul.wide.s32 	%rd167, %r935, 4;
	add.s64 	%rd169, %rd78, %rd167;
	st.shared.u32 	[%rd169], %r179;
	setp.eq.s32 	%p260, %r196, 999999999;
	@%p260 bra 	$L__BB0_139;
// %bb.229:                             // %pass3295
                                        //   in Loop: Header=BB0_223 Depth=1
	add.s32 	%r936, %r196, %r1;
	mul.wide.s32 	%rd170, %r936, 4;
	add.s64 	%rd172, %rd78, %rd170;
	st.shared.u32 	[%rd172], %r180;
	setp.eq.s32 	%p261, %r197, 999999999;
	@%p261 bra 	$L__BB0_140;
// %bb.230:                             // %pass3361
                                        //   in Loop: Header=BB0_223 Depth=1
	add.s32 	%r937, %r197, %r1;
	mul.wide.s32 	%rd173, %r937, 4;
	add.s64 	%rd175, %rd78, %rd173;
	st.shared.u32 	[%rd175], %r181;
	setp.eq.s32 	%p262, %r198, 999999999;
	@%p262 bra 	$L__BB0_141;
// %bb.231:                             // %pass3427
                                        //   in Loop: Header=BB0_223 Depth=1
	add.s32 	%r938, %r198, %r1;
	mul.wide.s32 	%rd176, %r938, 4;
	add.s64 	%rd178, %rd78, %rd176;
	st.shared.u32 	[%rd178], %r182;
	setp.eq.s32 	%p263, %r199, 999999999;
	@%p263 bra 	$L__BB0_142;
// %bb.232:                             // %pass3493
                                        //   in Loop: Header=BB0_223 Depth=1
	add.s32 	%r939, %r199, %r1;
	mul.wide.s32 	%rd179, %r939, 4;
	add.s64 	%rd181, %rd78, %rd179;
	st.shared.u32 	[%rd181], %r183;
	setp.eq.s32 	%p264, %r200, 999999999;
	@%p264 bra 	$L__BB0_143;
// %bb.233:                             // %pass3559
                                        //   in Loop: Header=BB0_223 Depth=1
	add.s32 	%r940, %r200, %r1;
	mul.wide.s32 	%rd182, %r940, 4;
	add.s64 	%rd184, %rd78, %rd182;
	st.shared.u32 	[%rd184], %r184;
	setp.eq.s32 	%p265, %r201, 999999999;
	@%p265 bra 	$L__BB0_144;
// %bb.234:                             // %pass3625
                                        //   in Loop: Header=BB0_223 Depth=1
	add.s32 	%r941, %r201, %r1;
	mul.wide.s32 	%rd185, %r941, 4;
	add.s64 	%rd187, %rd78, %rd185;
	st.shared.u32 	[%rd187], %r185;
	setp.eq.s32 	%p266, %r202, 999999999;
	@%p266 bra 	$L__BB0_145;
// %bb.235:                             // %pass3691
                                        //   in Loop: Header=BB0_223 Depth=1
	add.s32 	%r942, %r202, %r1;
	mul.wide.s32 	%rd188, %r942, 4;
	add.s64 	%rd190, %rd78, %rd188;
	st.shared.u32 	[%rd190], %r186;
	setp.eq.s32 	%p267, %r203, 999999999;
	@%p267 bra 	$L__BB0_146;
// %bb.236:                             // %pass3757
                                        //   in Loop: Header=BB0_223 Depth=1
	add.s32 	%r943, %r203, %r1;
	mul.wide.s32 	%rd191, %r943, 4;
	add.s64 	%rd193, %rd78, %rd191;
	st.shared.u32 	[%rd193], %r187;
	setp.eq.s32 	%p268, %r204, 999999999;
	@%p268 bra 	$L__BB0_147;
// %bb.237:                             // %pass3823
                                        //   in Loop: Header=BB0_223 Depth=1
	add.s32 	%r944, %r204, %r1;
	mul.wide.s32 	%rd194, %r944, 4;
	add.s64 	%rd196, %rd78, %rd194;
	st.shared.u32 	[%rd196], %r188;
	setp.eq.s32 	%p269, %r205, 999999999;
	@%p269 bra 	$L__BB0_148;
// %bb.238:                             // %pass3889
                                        //   in Loop: Header=BB0_223 Depth=1
	add.s32 	%r945, %r205, %r1;
	mul.wide.s32 	%rd197, %r945, 4;
	add.s64 	%rd199, %rd78, %rd197;
	st.shared.u32 	[%rd199], %r189;
	setp.eq.s32 	%p270, %r206, 999999999;
	@%p270 bra 	$L__BB0_149;
// %bb.239:                             // %pass3955
                                        //   in Loop: Header=BB0_223 Depth=1
	add.s32 	%r946, %r206, %r1;
	mul.wide.s32 	%rd200, %r946, 4;
	add.s64 	%rd202, %rd78, %rd200;
	st.shared.u32 	[%rd202], %r190;
	setp.eq.s32 	%p271, %r207, 999999999;
	@%p271 bra 	$L__BB0_150;
// %bb.240:                             // %pass4021
                                        //   in Loop: Header=BB0_223 Depth=1
	add.s32 	%r948, %r207, %r1;
	mul.wide.s32 	%rd203, %r948, 4;
	add.s64 	%rd205, %rd78, %rd203;
	st.shared.u32 	[%rd205], %r191;
	bar.sync 	0;
	ld.shared.u32 	%r208, [%rd29];
	ld.shared.u32 	%r209, [%rd30];
	ld.shared.u32 	%r210, [%rd31];
	ld.shared.u32 	%r211, [%rd32];
	ld.shared.u32 	%r212, [%rd33];
	ld.shared.u32 	%r213, [%rd34];
	ld.shared.u32 	%r214, [%rd35];
	ld.shared.u32 	%r215, [%rd36];
	ld.shared.u32 	%r216, [%rd37];
	ld.shared.u32 	%r217, [%rd38];
	ld.shared.u32 	%r218, [%rd39];
	ld.shared.u32 	%r219, [%rd40];
	ld.shared.u32 	%r220, [%rd41];
	ld.shared.u32 	%r221, [%rd42];
	ld.shared.u32 	%r222, [%rd43];
	ld.shared.u32 	%r223, [%rd44];
	bar.sync 	0;
	mov.u32 	%r3457, 16;
	bra.uni 	$L__BB0_241;
$L__BB0_166:                            // %L22452
                                        //   in Loop: Header=BB0_241 Depth=2
	add.s32 	%r3466, %r3466, 1;
	mov.u32 	%r3465, 0;
	mov.u32 	%r3467, %r3465;
$L__BB0_167:                            // %L22453
                                        //   in Loop: Header=BB0_241 Depth=2
	bar.sync 	0;
	add.s32 	%r3457, %r3457, -8;
	setp.ne.s32 	%p316, %r3457, -16;
	@%p316 bra 	$L__BB0_241;
	bra.uni 	$L__BB0_168;
$L__BB0_241:                            // %L12386
                                        //   Parent Loop BB0_223 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p272, %r3457, 16;
	selp.b32 	%r1341, %r208, 0, %p272;
	setp.eq.s32 	%p273, %r3457, 8;
	selp.b32 	%r1342, %r212, %r1341, %p273;
	setp.eq.s32 	%p274, %r3457, 0;
	selp.b32 	%r1343, %r216, %r1342, %p274;
	setp.eq.s32 	%p275, %r3457, -8;
	selp.b32 	%r1344, %r220, %r1343, %p275;
	selp.b32 	%r1345, %r209, 0, %p272;
	selp.b32 	%r1346, %r213, %r1345, %p273;
	selp.b32 	%r1347, %r217, %r1346, %p274;
	selp.b32 	%r1348, %r221, %r1347, %p275;
	selp.b32 	%r1349, %r210, 0, %p272;
	selp.b32 	%r1350, %r214, %r1349, %p273;
	selp.b32 	%r1351, %r218, %r1350, %p274;
	selp.b32 	%r1352, %r222, %r1351, %p275;
	selp.b32 	%r1353, %r211, 0, %p272;
	selp.b32 	%r1354, %r215, %r1353, %p273;
	selp.b32 	%r1355, %r219, %r1354, %p274;
	selp.b32 	%r1356, %r223, %r1355, %p275;
	// begin inline asm
	mov.b32 %r954, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r965, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r953, %r1344, -2004318072;
	mov.u32 	%r1090, 983055;
	// begin inline asm
	lop3.b32 %r951, %r1090, %r953, %r954, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r955, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r956, %r954, %r955;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r959, %r951, %r956;
	// end inline asm
	mov.u32 	%r1101, 15728880;
	// begin inline asm
	lop3.b32 %r962, %r1101, %r953, %r965, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r966, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r967, %r965, %r966;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r970, %r962, %r967;
	// end inline asm
	// begin inline asm
	mov.b32 %r1000, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1011, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r999, %r1348, -2004318072;
	// begin inline asm
	lop3.b32 %r997, %r1090, %r999, %r1000, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1001, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1002, %r1000, %r1001;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1005, %r997, %r1002;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1008, %r1101, %r999, %r1011, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1012, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1013, %r1011, %r1012;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1016, %r1008, %r1013;
	// end inline asm
	// begin inline asm
	mov.b32 %r1046, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1057, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1045, %r1352, -2004318072;
	// begin inline asm
	lop3.b32 %r1043, %r1090, %r1045, %r1046, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1047, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1048, %r1046, %r1047;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1051, %r1043, %r1048;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1054, %r1101, %r1045, %r1057, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1058, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1059, %r1057, %r1058;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1062, %r1054, %r1059;
	// end inline asm
	// begin inline asm
	mov.b32 %r1092, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1103, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1091, %r1356, -2004318072;
	// begin inline asm
	lop3.b32 %r1089, %r1090, %r1091, %r1092, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1093, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1094, %r1092, %r1093;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1097, %r1089, %r1094;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1100, %r1101, %r1091, %r1103, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1104, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1105, %r1103, %r1104;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1108, %r1100, %r1105;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r169;
    mov.b32 {%r2re, %r2im}, %r959;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1133, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r170;
    mov.b32 {%r2re, %r2im}, %r970;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1136, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r169;
    mov.b32 {%r2re, %r2im}, %r1005;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1139, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r170;
    mov.b32 {%r2re, %r2im}, %r1016;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1142, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r169;
    mov.b32 {%r2re, %r2im}, %r1051;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1145, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r170;
    mov.b32 {%r2re, %r2im}, %r1062;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1148, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r169;
    mov.b32 {%r2re, %r2im}, %r1097;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1151, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r170;
    mov.b32 {%r2re, %r2im}, %r1108;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1154, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1212, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1157, %r1158}, {%r326, %r329}, {%r1133}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1164, %r1165}, {%r326, %r329}, {%r1136}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1171, %r1172}, {%r326, %r329}, {%r1139}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1178, %r1179}, {%r326, %r329}, {%r1142}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1185, %r1186}, {%r326, %r329}, {%r1145}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1192, %r1193}, {%r326, %r329}, {%r1148}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1199, %r1200}, {%r326, %r329}, {%r1151}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1206, %r1207}, {%r326, %r329}, {%r1154}, {%r1212, %r1212};
	// end inline asm
	@%p1 bra 	$L__BB0_244;
	bra.uni 	$L__BB0_242;
$L__BB0_244:                            // %pass5418
                                        //   in Loop: Header=BB0_241 Depth=2
	// begin inline asm
	neg.f16x2 %r1213, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1215, %r1213, %r1158;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1218, %r364, %r1157, %r1215;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1222, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1224, %r1222, %r1165;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1227, %r364, %r1164, %r1224;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1231, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1233, %r1231, %r1172;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1236, %r364, %r1171, %r1233;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1240, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1242, %r1240, %r1179;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1245, %r364, %r1178, %r1242;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1249, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1251, %r1249, %r1186;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1254, %r364, %r1185, %r1251;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1258, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1260, %r1258, %r1193;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1263, %r364, %r1192, %r1260;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1267, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1269, %r1267, %r1200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1272, %r364, %r1199, %r1269;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1276, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1278, %r1276, %r1207;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1281, %r364, %r1206, %r1278;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1285, %r367, %r1157;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1288, %r364, %r1158, %r1285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1292, %r367, %r1164;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1295, %r364, %r1165, %r1292;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1299, %r367, %r1171;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1302, %r364, %r1172, %r1299;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1306, %r367, %r1178;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1309, %r364, %r1179, %r1306;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1313, %r367, %r1185;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1316, %r364, %r1186, %r1313;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1320, %r367, %r1192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1323, %r364, %r1193, %r1320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1327, %r367, %r1199;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1330, %r364, %r1200, %r1327;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1334, %r367, %r1206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1337, %r364, %r1207, %r1334;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1357, %r1358}, {%r411, %r414}, {%r1218, %r1288}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1366, %r1367}, {%r411, %r414}, {%r1227, %r1295}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1375, %r1376}, {%r411, %r414}, {%r1236, %r1302}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1384, %r1385}, {%r411, %r414}, {%r1245, %r1309}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1393, %r1394}, {%r411, %r414}, {%r1254, %r1316}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1402, %r1403}, {%r411, %r414}, {%r1263, %r1323}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1411, %r1412}, {%r411, %r414}, {%r1272, %r1330}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1420, %r1421}, {%r411, %r414}, {%r1281, %r1337}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	bar.sync 	0;
	ld.shared.u32 	%r1497, [%rd7];
	ld.shared.u32 	%r1504, [%rd8+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1514, %r1511}, {%r423, %r426}, {%r1497}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1523, %r1520}, {%r423, %r426}, {%r1504}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1507, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1509, %r1507, %r1511;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1512, %r457, %r1514, %r1509;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1516, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1518, %r1516, %r1520;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1521, %r457, %r1523, %r1518;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1525, %r460, %r1514;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1528, %r457, %r1511, %r1525;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1532, %r460, %r1523;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1535, %r457, %r1520, %r1532;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1558, %r1561}, {%r499, %r502}, {%r1512, %r1528}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1565, %r1569}, {%r499, %r502}, {%r1521, %r1535}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1557, %r1558, %r1558;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1560, %r1561, %r1561, %r1557;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1564, %r1565, %r1565, %r1560;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1568, %r1569, %r1569, %r1564;
	// end inline asm
	mov.u32 	%r1573, 488578335;
	// begin inline asm
	fma.rn.f16x2 %r3478, %r1573, %r1568, %r3467;
	// end inline asm
	add.s32 	%r3476, %r3465, 1;
	setp.eq.s32 	%p276, %r3476, 25;
	@%p276 bra 	$L__BB0_151;
	bra.uni 	$L__BB0_245;
$L__BB0_151:                            // %L14241
                                        //   in Loop: Header=BB0_241 Depth=2
	setp.lt.u32 	%p277, %r1, 16;
	@%p277 bra 	$L__BB0_243;
	bra.uni 	$L__BB0_152;
$L__BB0_243:                            // %pass5971
                                        //   in Loop: Header=BB0_241 Depth=2
	shl.b32 	%r1576, %r3466, 15;
	or.b32  	%r1577, %r174, %r1576;
	cvt.u64.u32 	%rd208, %r1577;
	add.s64 	%rd209, %rd208, %rd9;
	shr.u64 	%rd210, %rd209, 37;
	add.s64 	%rd211, %rd209, %rd210;
	shr.s64 	%rd212, %rd211, 27;
	setp.lt.s64 	%p278, %rd209, 0;
	and.b64  	%rd213, %rd211, -134217728;
	setp.ne.s64 	%p279, %rd213, %rd209;
	and.pred  	%p280, %p278, %p279;
	selp.u64 	%rd214, 1, 0, %p280;
	sub.s64 	%rd215, %rd214, %rd212;
	shl.b64 	%rd216, %rd215, 27;
	add.s64 	%rd217, %rd216, %rd209;
	shl.b64 	%rd218, %rd217, 2;
	add.s64 	%rd219, %rd4, %rd218;
	st.global.u32 	[%rd219], %r3478;
$L__BB0_152:                            // %L14458
                                        //   in Loop: Header=BB0_241 Depth=2
	add.s32 	%r3466, %r3466, 1;
	mov.u32 	%r3476, 0;
	mov.u32 	%r3478, %r3476;
$L__BB0_245:                            // %pass6205
                                        //   in Loop: Header=BB0_241 Depth=2
	ld.shared.u32 	%r1583, [%rd45];
	ld.shared.u32 	%r1590, [%rd46];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1600, %r1597}, {%r423, %r426}, {%r1583}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1609, %r1606}, {%r423, %r426}, {%r1590}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1593, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1595, %r1593, %r1597;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1598, %r457, %r1600, %r1595;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1602, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1604, %r1602, %r1606;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1607, %r457, %r1609, %r1604;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1611, %r460, %r1600;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1614, %r457, %r1597, %r1611;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1618, %r460, %r1609;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1621, %r457, %r1606, %r1618;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1644, %r1647}, {%r499, %r502}, {%r1598, %r1614}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1651, %r1655}, {%r499, %r502}, {%r1607, %r1621}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1643, %r1644, %r1644;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1646, %r1647, %r1647, %r1643;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1650, %r1651, %r1651, %r1646;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1654, %r1655, %r1655, %r1650;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3481, %r1573, %r1654, %r3478;
	// end inline asm
	add.s32 	%r3479, %r3476, 1;
	setp.eq.s32 	%p281, %r3479, 25;
	@%p281 bra 	$L__BB0_153;
	bra.uni 	$L__BB0_246;
$L__BB0_153:                            // %L15383
                                        //   in Loop: Header=BB0_241 Depth=2
	setp.lt.u32 	%p282, %r1, 16;
	@%p282 bra 	$L__BB0_261;
	bra.uni 	$L__BB0_154;
$L__BB0_261:                            // %pass6454
                                        //   in Loop: Header=BB0_241 Depth=2
	shl.b32 	%r1662, %r3466, 15;
	or.b32  	%r1663, %r174, %r1662;
	cvt.u64.u32 	%rd220, %r1663;
	add.s64 	%rd221, %rd220, %rd9;
	shr.u64 	%rd222, %rd221, 37;
	add.s64 	%rd223, %rd221, %rd222;
	shr.s64 	%rd224, %rd223, 27;
	setp.lt.s64 	%p283, %rd221, 0;
	and.b64  	%rd225, %rd223, -134217728;
	setp.ne.s64 	%p284, %rd225, %rd221;
	and.pred  	%p285, %p283, %p284;
	selp.u64 	%rd226, 1, 0, %p285;
	sub.s64 	%rd227, %rd226, %rd224;
	shl.b64 	%rd228, %rd227, 27;
	add.s64 	%rd229, %rd228, %rd221;
	shl.b64 	%rd230, %rd229, 2;
	add.s64 	%rd231, %rd4, %rd230;
	st.global.u32 	[%rd231], %r3481;
$L__BB0_154:                            // %L15600
                                        //   in Loop: Header=BB0_241 Depth=2
	add.s32 	%r3466, %r3466, 1;
	mov.u32 	%r3479, 0;
	mov.u32 	%r3481, %r3479;
$L__BB0_246:                            // %pass6688
                                        //   in Loop: Header=BB0_241 Depth=2
	ld.shared.u32 	%r1669, [%rd47];
	ld.shared.u32 	%r1676, [%rd48];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1686, %r1683}, {%r423, %r426}, {%r1669}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1695, %r1692}, {%r423, %r426}, {%r1676}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1679, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1681, %r1679, %r1683;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1684, %r457, %r1686, %r1681;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1688, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1690, %r1688, %r1692;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1693, %r457, %r1695, %r1690;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1697, %r460, %r1686;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1700, %r457, %r1683, %r1697;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1704, %r460, %r1695;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1707, %r457, %r1692, %r1704;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1730, %r1733}, {%r499, %r502}, {%r1684, %r1700}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1737, %r1741}, {%r499, %r502}, {%r1693, %r1707}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1729, %r1730, %r1730;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1732, %r1733, %r1733, %r1729;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1736, %r1737, %r1737, %r1732;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1740, %r1741, %r1741, %r1736;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3484, %r1573, %r1740, %r3481;
	// end inline asm
	add.s32 	%r3482, %r3479, 1;
	setp.eq.s32 	%p286, %r3482, 25;
	@%p286 bra 	$L__BB0_155;
	bra.uni 	$L__BB0_247;
$L__BB0_155:                            // %L16525
                                        //   in Loop: Header=BB0_241 Depth=2
	setp.lt.u32 	%p287, %r1, 16;
	@%p287 bra 	$L__BB0_262;
	bra.uni 	$L__BB0_156;
$L__BB0_262:                            // %pass6937
                                        //   in Loop: Header=BB0_241 Depth=2
	shl.b32 	%r1748, %r3466, 15;
	or.b32  	%r1749, %r174, %r1748;
	cvt.u64.u32 	%rd232, %r1749;
	add.s64 	%rd233, %rd232, %rd9;
	shr.u64 	%rd234, %rd233, 37;
	add.s64 	%rd235, %rd233, %rd234;
	shr.s64 	%rd236, %rd235, 27;
	setp.lt.s64 	%p288, %rd233, 0;
	and.b64  	%rd237, %rd235, -134217728;
	setp.ne.s64 	%p289, %rd237, %rd233;
	and.pred  	%p290, %p288, %p289;
	selp.u64 	%rd238, 1, 0, %p290;
	sub.s64 	%rd239, %rd238, %rd236;
	shl.b64 	%rd240, %rd239, 27;
	add.s64 	%rd241, %rd240, %rd233;
	shl.b64 	%rd242, %rd241, 2;
	add.s64 	%rd243, %rd4, %rd242;
	st.global.u32 	[%rd243], %r3484;
$L__BB0_156:                            // %L16742
                                        //   in Loop: Header=BB0_241 Depth=2
	add.s32 	%r3466, %r3466, 1;
	mov.u32 	%r3482, 0;
	mov.u32 	%r3484, %r3482;
$L__BB0_247:                            // %pass7171
                                        //   in Loop: Header=BB0_241 Depth=2
	ld.shared.u32 	%r1755, [%rd49];
	ld.shared.u32 	%r1762, [%rd50];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1772, %r1769}, {%r423, %r426}, {%r1755}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1781, %r1778}, {%r423, %r426}, {%r1762}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1765, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1767, %r1765, %r1769;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1770, %r457, %r1772, %r1767;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1774, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1776, %r1774, %r1778;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1779, %r457, %r1781, %r1776;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1783, %r460, %r1772;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1786, %r457, %r1769, %r1783;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1790, %r460, %r1781;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1793, %r457, %r1778, %r1790;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1816, %r1819}, {%r499, %r502}, {%r1770, %r1786}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1823, %r1827}, {%r499, %r502}, {%r1779, %r1793}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1815, %r1816, %r1816;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1818, %r1819, %r1819, %r1815;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1822, %r1823, %r1823, %r1818;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1826, %r1827, %r1827, %r1822;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3487, %r1573, %r1826, %r3484;
	// end inline asm
	add.s32 	%r3485, %r3482, 1;
	setp.eq.s32 	%p291, %r3485, 25;
	@%p291 bra 	$L__BB0_157;
	bra.uni 	$L__BB0_248;
$L__BB0_157:                            // %L17667
                                        //   in Loop: Header=BB0_241 Depth=2
	setp.lt.u32 	%p292, %r1, 16;
	@%p292 bra 	$L__BB0_263;
	bra.uni 	$L__BB0_158;
$L__BB0_263:                            // %pass7420
                                        //   in Loop: Header=BB0_241 Depth=2
	shl.b32 	%r1834, %r3466, 15;
	or.b32  	%r1835, %r174, %r1834;
	cvt.u64.u32 	%rd244, %r1835;
	add.s64 	%rd245, %rd244, %rd9;
	shr.u64 	%rd246, %rd245, 37;
	add.s64 	%rd247, %rd245, %rd246;
	shr.s64 	%rd248, %rd247, 27;
	setp.lt.s64 	%p293, %rd245, 0;
	and.b64  	%rd249, %rd247, -134217728;
	setp.ne.s64 	%p294, %rd249, %rd245;
	and.pred  	%p295, %p293, %p294;
	selp.u64 	%rd250, 1, 0, %p295;
	sub.s64 	%rd251, %rd250, %rd248;
	shl.b64 	%rd252, %rd251, 27;
	add.s64 	%rd253, %rd252, %rd245;
	shl.b64 	%rd254, %rd253, 2;
	add.s64 	%rd255, %rd4, %rd254;
	st.global.u32 	[%rd255], %r3487;
$L__BB0_158:                            // %L17884
                                        //   in Loop: Header=BB0_241 Depth=2
	add.s32 	%r3466, %r3466, 1;
	mov.u32 	%r3485, 0;
	mov.u32 	%r3487, %r3485;
$L__BB0_248:                            // %pass7654
                                        //   in Loop: Header=BB0_241 Depth=2
	ld.shared.u32 	%r1841, [%rd51];
	ld.shared.u32 	%r1848, [%rd52];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1858, %r1855}, {%r423, %r426}, {%r1841}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1867, %r1864}, {%r423, %r426}, {%r1848}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1851, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1853, %r1851, %r1855;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1856, %r457, %r1858, %r1853;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1860, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1862, %r1860, %r1864;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1865, %r457, %r1867, %r1862;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1869, %r460, %r1858;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1872, %r457, %r1855, %r1869;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1876, %r460, %r1867;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1879, %r457, %r1864, %r1876;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1902, %r1905}, {%r499, %r502}, {%r1856, %r1872}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1909, %r1913}, {%r499, %r502}, {%r1865, %r1879}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1901, %r1902, %r1902;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1904, %r1905, %r1905, %r1901;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1908, %r1909, %r1909, %r1904;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1912, %r1913, %r1913, %r1908;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3490, %r1573, %r1912, %r3487;
	// end inline asm
	add.s32 	%r3488, %r3485, 1;
	setp.eq.s32 	%p296, %r3488, 25;
	@%p296 bra 	$L__BB0_159;
	bra.uni 	$L__BB0_249;
$L__BB0_159:                            // %L18809
                                        //   in Loop: Header=BB0_241 Depth=2
	setp.lt.u32 	%p297, %r1, 16;
	@%p297 bra 	$L__BB0_264;
	bra.uni 	$L__BB0_160;
$L__BB0_264:                            // %pass7903
                                        //   in Loop: Header=BB0_241 Depth=2
	shl.b32 	%r1920, %r3466, 15;
	or.b32  	%r1921, %r174, %r1920;
	cvt.u64.u32 	%rd256, %r1921;
	add.s64 	%rd257, %rd256, %rd9;
	shr.u64 	%rd258, %rd257, 37;
	add.s64 	%rd259, %rd257, %rd258;
	shr.s64 	%rd260, %rd259, 27;
	setp.lt.s64 	%p298, %rd257, 0;
	and.b64  	%rd261, %rd259, -134217728;
	setp.ne.s64 	%p299, %rd261, %rd257;
	and.pred  	%p300, %p298, %p299;
	selp.u64 	%rd262, 1, 0, %p300;
	sub.s64 	%rd263, %rd262, %rd260;
	shl.b64 	%rd264, %rd263, 27;
	add.s64 	%rd265, %rd264, %rd257;
	shl.b64 	%rd266, %rd265, 2;
	add.s64 	%rd267, %rd4, %rd266;
	st.global.u32 	[%rd267], %r3490;
$L__BB0_160:                            // %L19026
                                        //   in Loop: Header=BB0_241 Depth=2
	add.s32 	%r3466, %r3466, 1;
	mov.u32 	%r3488, 0;
	mov.u32 	%r3490, %r3488;
$L__BB0_249:                            // %pass8137
                                        //   in Loop: Header=BB0_241 Depth=2
	ld.shared.u32 	%r1927, [%rd53];
	ld.shared.u32 	%r1934, [%rd54];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1944, %r1941}, {%r423, %r426}, {%r1927}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1953, %r1950}, {%r423, %r426}, {%r1934}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1937, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1939, %r1937, %r1941;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1942, %r457, %r1944, %r1939;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1946, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1948, %r1946, %r1950;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1951, %r457, %r1953, %r1948;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1955, %r460, %r1944;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1958, %r457, %r1941, %r1955;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1962, %r460, %r1953;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1965, %r457, %r1950, %r1962;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1988, %r1991}, {%r499, %r502}, {%r1942, %r1958}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1995, %r1999}, {%r499, %r502}, {%r1951, %r1965}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1987, %r1988, %r1988;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1990, %r1991, %r1991, %r1987;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1994, %r1995, %r1995, %r1990;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1998, %r1999, %r1999, %r1994;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3493, %r1573, %r1998, %r3490;
	// end inline asm
	add.s32 	%r3491, %r3488, 1;
	setp.eq.s32 	%p301, %r3491, 25;
	@%p301 bra 	$L__BB0_161;
	bra.uni 	$L__BB0_250;
$L__BB0_161:                            // %L19951
                                        //   in Loop: Header=BB0_241 Depth=2
	setp.lt.u32 	%p302, %r1, 16;
	@%p302 bra 	$L__BB0_265;
	bra.uni 	$L__BB0_162;
$L__BB0_265:                            // %pass8386
                                        //   in Loop: Header=BB0_241 Depth=2
	shl.b32 	%r2006, %r3466, 15;
	or.b32  	%r2007, %r174, %r2006;
	cvt.u64.u32 	%rd268, %r2007;
	add.s64 	%rd269, %rd268, %rd9;
	shr.u64 	%rd270, %rd269, 37;
	add.s64 	%rd271, %rd269, %rd270;
	shr.s64 	%rd272, %rd271, 27;
	setp.lt.s64 	%p303, %rd269, 0;
	and.b64  	%rd273, %rd271, -134217728;
	setp.ne.s64 	%p304, %rd273, %rd269;
	and.pred  	%p305, %p303, %p304;
	selp.u64 	%rd274, 1, 0, %p305;
	sub.s64 	%rd275, %rd274, %rd272;
	shl.b64 	%rd276, %rd275, 27;
	add.s64 	%rd277, %rd276, %rd269;
	shl.b64 	%rd278, %rd277, 2;
	add.s64 	%rd279, %rd4, %rd278;
	st.global.u32 	[%rd279], %r3493;
$L__BB0_162:                            // %L20168
                                        //   in Loop: Header=BB0_241 Depth=2
	add.s32 	%r3466, %r3466, 1;
	mov.u32 	%r3491, 0;
	mov.u32 	%r3493, %r3491;
$L__BB0_250:                            // %pass8620
                                        //   in Loop: Header=BB0_241 Depth=2
	ld.shared.u32 	%r2013, [%rd55];
	ld.shared.u32 	%r2020, [%rd56];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2030, %r2027}, {%r423, %r426}, {%r2013}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2039, %r2036}, {%r423, %r426}, {%r2020}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2023, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2025, %r2023, %r2027;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2028, %r457, %r2030, %r2025;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2032, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2034, %r2032, %r2036;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2037, %r457, %r2039, %r2034;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2041, %r460, %r2030;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2044, %r457, %r2027, %r2041;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2048, %r460, %r2039;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2051, %r457, %r2036, %r2048;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2074, %r2077}, {%r499, %r502}, {%r2028, %r2044}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2081, %r2085}, {%r499, %r502}, {%r2037, %r2051}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2073, %r2074, %r2074;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2076, %r2077, %r2077, %r2073;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2080, %r2081, %r2081, %r2076;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2084, %r2085, %r2085, %r2080;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3496, %r1573, %r2084, %r3493;
	// end inline asm
	add.s32 	%r3494, %r3491, 1;
	setp.eq.s32 	%p306, %r3494, 25;
	@%p306 bra 	$L__BB0_163;
	bra.uni 	$L__BB0_251;
$L__BB0_163:                            // %L21093
                                        //   in Loop: Header=BB0_241 Depth=2
	setp.lt.u32 	%p307, %r1, 16;
	@%p307 bra 	$L__BB0_266;
	bra.uni 	$L__BB0_164;
$L__BB0_266:                            // %pass8869
                                        //   in Loop: Header=BB0_241 Depth=2
	shl.b32 	%r2092, %r3466, 15;
	or.b32  	%r2093, %r174, %r2092;
	cvt.u64.u32 	%rd280, %r2093;
	add.s64 	%rd281, %rd280, %rd9;
	shr.u64 	%rd282, %rd281, 37;
	add.s64 	%rd283, %rd281, %rd282;
	shr.s64 	%rd284, %rd283, 27;
	setp.lt.s64 	%p308, %rd281, 0;
	and.b64  	%rd285, %rd283, -134217728;
	setp.ne.s64 	%p309, %rd285, %rd281;
	and.pred  	%p310, %p308, %p309;
	selp.u64 	%rd286, 1, 0, %p310;
	sub.s64 	%rd287, %rd286, %rd284;
	shl.b64 	%rd288, %rd287, 27;
	add.s64 	%rd289, %rd288, %rd281;
	shl.b64 	%rd290, %rd289, 2;
	add.s64 	%rd291, %rd4, %rd290;
	st.global.u32 	[%rd291], %r3496;
$L__BB0_164:                            // %L21310
                                        //   in Loop: Header=BB0_241 Depth=2
	add.s32 	%r3466, %r3466, 1;
	mov.u32 	%r3494, 0;
	mov.u32 	%r3496, %r3494;
$L__BB0_251:                            // %pass9103
                                        //   in Loop: Header=BB0_241 Depth=2
	ld.shared.u32 	%r2099, [%rd57];
	ld.shared.u32 	%r2106, [%rd58];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2116, %r2113}, {%r423, %r426}, {%r2099}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2125, %r2122}, {%r423, %r426}, {%r2106}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2109, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2111, %r2109, %r2113;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2114, %r457, %r2116, %r2111;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2118, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2120, %r2118, %r2122;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2123, %r457, %r2125, %r2120;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2127, %r460, %r2116;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2130, %r457, %r2113, %r2127;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2134, %r460, %r2125;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2137, %r457, %r2122, %r2134;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2160, %r2163}, {%r499, %r502}, {%r2114, %r2130}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2167, %r2171}, {%r499, %r502}, {%r2123, %r2137}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2159, %r2160, %r2160;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2162, %r2163, %r2163, %r2159;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2166, %r2167, %r2167, %r2162;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2170, %r2171, %r2171, %r2166;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3467, %r1573, %r2170, %r3496;
	// end inline asm
	add.s32 	%r3465, %r3494, 1;
	setp.eq.s32 	%p311, %r3465, 25;
	@%p311 bra 	$L__BB0_165;
	bra.uni 	$L__BB0_167;
$L__BB0_165:                            // %L22235
                                        //   in Loop: Header=BB0_241 Depth=2
	setp.lt.u32 	%p312, %r1, 16;
	@%p312 bra 	$L__BB0_252;
	bra.uni 	$L__BB0_166;
$L__BB0_252:                            // %pass9352
                                        //   in Loop: Header=BB0_241 Depth=2
	shl.b32 	%r2178, %r3466, 15;
	or.b32  	%r2179, %r174, %r2178;
	cvt.u64.u32 	%rd292, %r2179;
	add.s64 	%rd293, %rd292, %rd9;
	shr.u64 	%rd294, %rd293, 37;
	add.s64 	%rd295, %rd293, %rd294;
	shr.s64 	%rd296, %rd295, 27;
	setp.lt.s64 	%p313, %rd293, 0;
	and.b64  	%rd297, %rd295, -134217728;
	setp.ne.s64 	%p314, %rd297, %rd293;
	and.pred  	%p315, %p313, %p314;
	selp.u64 	%rd298, 1, 0, %p315;
	sub.s64 	%rd299, %rd298, %rd296;
	shl.b64 	%rd300, %rd299, 27;
	add.s64 	%rd301, %rd300, %rd293;
	shl.b64 	%rd302, %rd301, 2;
	add.s64 	%rd303, %rd4, %rd302;
	st.global.u32 	[%rd303], %r3467;
	bra.uni 	$L__BB0_166;
$L__BB0_168:                            // %L22474.preheader
                                        //   in Loop: Header=BB0_223 Depth=1
	mov.u32 	%r3464, 16;
	bra.uni 	$L__BB0_169;
$L__BB0_192:                            // %L32540
                                        //   in Loop: Header=BB0_169 Depth=2
	add.s32 	%r3466, %r3466, 1;
	mov.u32 	%r3465, %r1212;
	mov.u32 	%r3467, %r1212;
$L__BB0_193:                            // %L32541
                                        //   in Loop: Header=BB0_169 Depth=2
	bar.sync 	0;
	add.s32 	%r3464, %r3464, -8;
	setp.ne.s32 	%p361, %r3464, -16;
	@%p361 bra 	$L__BB0_169;
	bra.uni 	$L__BB0_194;
$L__BB0_169:                            // %L22474
                                        //   Parent Loop BB0_223 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p317, %r3464, 16;
	selp.b32 	%r2793, %r208, 0, %p317;
	setp.eq.s32 	%p318, %r3464, 8;
	selp.b32 	%r2794, %r212, %r2793, %p318;
	setp.eq.s32 	%p319, %r3464, 0;
	selp.b32 	%r2795, %r216, %r2794, %p319;
	setp.eq.s32 	%p320, %r3464, -8;
	selp.b32 	%r2796, %r220, %r2795, %p320;
	selp.b32 	%r2797, %r209, 0, %p317;
	selp.b32 	%r2798, %r213, %r2797, %p318;
	selp.b32 	%r2799, %r217, %r2798, %p319;
	selp.b32 	%r2800, %r221, %r2799, %p320;
	selp.b32 	%r2801, %r210, 0, %p317;
	selp.b32 	%r2802, %r214, %r2801, %p318;
	selp.b32 	%r2803, %r218, %r2802, %p319;
	selp.b32 	%r2804, %r222, %r2803, %p320;
	selp.b32 	%r2805, %r211, 0, %p317;
	selp.b32 	%r2806, %r215, %r2805, %p318;
	selp.b32 	%r2807, %r219, %r2806, %p319;
	selp.b32 	%r2808, %r223, %r2807, %p320;
	// begin inline asm
	mov.b32 %r2209, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2220, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2809, %r2796, 8;
	xor.b32  	%r2219, %r2809, 8947848;
	// begin inline asm
	lop3.b32 %r2206, %r1090, %r2219, %r2209, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2210, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2211, %r2209, %r2210;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2214, %r2206, %r2211;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2217, %r1101, %r2219, %r2220, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2221, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2222, %r2220, %r2221;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2225, %r2217, %r2222;
	// end inline asm
	// begin inline asm
	mov.b32 %r2255, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2266, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2810, %r2800, 8;
	xor.b32  	%r2265, %r2810, 8947848;
	// begin inline asm
	lop3.b32 %r2252, %r1090, %r2265, %r2255, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2256, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2257, %r2255, %r2256;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2260, %r2252, %r2257;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2263, %r1101, %r2265, %r2266, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2267, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2268, %r2266, %r2267;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2271, %r2263, %r2268;
	// end inline asm
	// begin inline asm
	mov.b32 %r2301, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2312, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2811, %r2804, 8;
	xor.b32  	%r2311, %r2811, 8947848;
	// begin inline asm
	lop3.b32 %r2298, %r1090, %r2311, %r2301, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2302, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2303, %r2301, %r2302;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2306, %r2298, %r2303;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2309, %r1101, %r2311, %r2312, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2313, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2314, %r2312, %r2313;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2317, %r2309, %r2314;
	// end inline asm
	// begin inline asm
	mov.b32 %r2347, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2358, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2812, %r2808, 8;
	xor.b32  	%r2357, %r2812, 8947848;
	// begin inline asm
	lop3.b32 %r2344, %r1090, %r2357, %r2347, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2348, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2349, %r2347, %r2348;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2352, %r2344, %r2349;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2355, %r1101, %r2357, %r2358, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2359, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2360, %r2358, %r2359;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2363, %r2355, %r2360;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r169;
    mov.b32 {%r2re, %r2im}, %r2214;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2366, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r170;
    mov.b32 {%r2re, %r2im}, %r2225;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2369, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r169;
    mov.b32 {%r2re, %r2im}, %r2260;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2372, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r170;
    mov.b32 {%r2re, %r2im}, %r2271;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2375, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r169;
    mov.b32 {%r2re, %r2im}, %r2306;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2378, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r170;
    mov.b32 {%r2re, %r2im}, %r2317;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2381, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r169;
    mov.b32 {%r2re, %r2im}, %r2352;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2384, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r170;
    mov.b32 {%r2re, %r2im}, %r2363;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2387, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2453, %r2450}, {%r326, %r329}, {%r2366}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2462, %r2459}, {%r326, %r329}, {%r2369}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2471, %r2468}, {%r326, %r329}, {%r2372}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2480, %r2477}, {%r326, %r329}, {%r2375}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2489, %r2486}, {%r326, %r329}, {%r2378}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2498, %r2495}, {%r326, %r329}, {%r2381}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2507, %r2504}, {%r326, %r329}, {%r2384}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2516, %r2513}, {%r326, %r329}, {%r2387}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2446, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2448, %r2446, %r2450;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2451, %r364, %r2453, %r2448;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2455, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2457, %r2455, %r2459;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2460, %r364, %r2462, %r2457;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2464, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2466, %r2464, %r2468;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2469, %r364, %r2471, %r2466;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2473, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2475, %r2473, %r2477;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2478, %r364, %r2480, %r2475;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2482, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2484, %r2482, %r2486;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2487, %r364, %r2489, %r2484;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2491, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2493, %r2491, %r2495;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2496, %r364, %r2498, %r2493;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2500, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2502, %r2500, %r2504;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2505, %r364, %r2507, %r2502;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2509, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2511, %r2509, %r2513;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2514, %r364, %r2516, %r2511;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2518, %r367, %r2453;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2521, %r364, %r2450, %r2518;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2525, %r367, %r2462;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2528, %r364, %r2459, %r2525;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2532, %r367, %r2471;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2535, %r364, %r2468, %r2532;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2539, %r367, %r2480;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2542, %r364, %r2477, %r2539;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2546, %r367, %r2489;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2549, %r364, %r2486, %r2546;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2553, %r367, %r2498;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2556, %r364, %r2495, %r2553;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2560, %r367, %r2507;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2563, %r364, %r2504, %r2560;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2567, %r367, %r2516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2570, %r364, %r2513, %r2567;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2574, %r2575}, {%r411, %r414}, {%r2451, %r2521}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2583, %r2584}, {%r411, %r414}, {%r2460, %r2528}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2592, %r2593}, {%r411, %r414}, {%r2469, %r2535}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2601, %r2602}, {%r411, %r414}, {%r2478, %r2542}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2610, %r2611}, {%r411, %r414}, {%r2487, %r2549}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2619, %r2620}, {%r411, %r414}, {%r2496, %r2556}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2628, %r2629}, {%r411, %r414}, {%r2505, %r2563}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2637, %r2638}, {%r411, %r414}, {%r2514, %r2570}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	bar.sync 	0;
	ld.shared.u32 	%r2714, [%rd7];
	ld.shared.u32 	%r2721, [%rd8+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2731, %r2728}, {%r423, %r426}, {%r2714}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2740, %r2737}, {%r423, %r426}, {%r2721}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2724, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2726, %r2724, %r2728;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2729, %r457, %r2731, %r2726;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2733, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2735, %r2733, %r2737;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2738, %r457, %r2740, %r2735;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2742, %r460, %r2731;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2745, %r457, %r2728, %r2742;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2749, %r460, %r2740;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2752, %r457, %r2737, %r2749;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2775, %r2778}, {%r499, %r502}, {%r2729, %r2745}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2782, %r2786}, {%r499, %r502}, {%r2738, %r2752}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2774, %r2775, %r2775;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2777, %r2778, %r2778, %r2774;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2781, %r2782, %r2782, %r2777;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2785, %r2786, %r2786, %r2781;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3499, %r1573, %r2785, %r3467;
	// end inline asm
	add.s32 	%r3497, %r3465, 1;
	setp.ne.s32 	%p321, %r3497, 25;
	@%p321 bra 	$L__BB0_172;
// %bb.170:                             // %L24329
                                        //   in Loop: Header=BB0_169 Depth=2
	setp.lt.u32 	%p322, %r1, 16;
	@%p322 bra 	$L__BB0_253;
	bra.uni 	$L__BB0_171;
$L__BB0_253:                            // %pass10020
                                        //   in Loop: Header=BB0_169 Depth=2
	shl.b32 	%r2813, %r3466, 15;
	or.b32  	%r2814, %r174, %r2813;
	cvt.u64.u32 	%rd304, %r2814;
	add.s64 	%rd305, %rd304, %rd9;
	shr.u64 	%rd306, %rd305, 37;
	add.s64 	%rd307, %rd305, %rd306;
	shr.s64 	%rd308, %rd307, 27;
	setp.lt.s64 	%p323, %rd305, 0;
	and.b64  	%rd309, %rd307, -134217728;
	setp.ne.s64 	%p324, %rd309, %rd305;
	and.pred  	%p325, %p323, %p324;
	selp.u64 	%rd310, 1, 0, %p325;
	sub.s64 	%rd311, %rd310, %rd308;
	shl.b64 	%rd312, %rd311, 27;
	add.s64 	%rd313, %rd312, %rd305;
	shl.b64 	%rd314, %rd313, 2;
	add.s64 	%rd315, %rd4, %rd314;
	st.global.u32 	[%rd315], %r3499;
$L__BB0_171:                            // %L24546
                                        //   in Loop: Header=BB0_169 Depth=2
	add.s32 	%r3466, %r3466, 1;
	mov.u32 	%r3497, 0;
	mov.u32 	%r3499, %r3497;
$L__BB0_172:                            // %pass10254
                                        //   in Loop: Header=BB0_169 Depth=2
	ld.shared.u32 	%r2820, [%rd45];
	ld.shared.u32 	%r2827, [%rd46];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2837, %r2834}, {%r423, %r426}, {%r2820}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2846, %r2843}, {%r423, %r426}, {%r2827}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2830, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2832, %r2830, %r2834;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2835, %r457, %r2837, %r2832;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2839, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2841, %r2839, %r2843;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2844, %r457, %r2846, %r2841;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2848, %r460, %r2837;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2851, %r457, %r2834, %r2848;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2855, %r460, %r2846;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2858, %r457, %r2843, %r2855;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2881, %r2884}, {%r499, %r502}, {%r2835, %r2851}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2888, %r2892}, {%r499, %r502}, {%r2844, %r2858}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2880, %r2881, %r2881;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2883, %r2884, %r2884, %r2880;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2887, %r2888, %r2888, %r2883;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2891, %r2892, %r2892, %r2887;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3502, %r1573, %r2891, %r3499;
	// end inline asm
	add.s32 	%r3500, %r3497, 1;
	setp.eq.s32 	%p326, %r3500, 25;
	@%p326 bra 	$L__BB0_173;
	bra.uni 	$L__BB0_175;
$L__BB0_173:                            // %L25471
                                        //   in Loop: Header=BB0_169 Depth=2
	setp.lt.u32 	%p327, %r1, 16;
	@%p327 bra 	$L__BB0_254;
	bra.uni 	$L__BB0_174;
$L__BB0_254:                            // %pass10503
                                        //   in Loop: Header=BB0_169 Depth=2
	shl.b32 	%r2899, %r3466, 15;
	or.b32  	%r2900, %r174, %r2899;
	cvt.u64.u32 	%rd316, %r2900;
	add.s64 	%rd317, %rd316, %rd9;
	shr.u64 	%rd318, %rd317, 37;
	add.s64 	%rd319, %rd317, %rd318;
	shr.s64 	%rd320, %rd319, 27;
	setp.lt.s64 	%p328, %rd317, 0;
	and.b64  	%rd321, %rd319, -134217728;
	setp.ne.s64 	%p329, %rd321, %rd317;
	and.pred  	%p330, %p328, %p329;
	selp.u64 	%rd322, 1, 0, %p330;
	sub.s64 	%rd323, %rd322, %rd320;
	shl.b64 	%rd324, %rd323, 27;
	add.s64 	%rd325, %rd324, %rd317;
	shl.b64 	%rd326, %rd325, 2;
	add.s64 	%rd327, %rd4, %rd326;
	st.global.u32 	[%rd327], %r3502;
$L__BB0_174:                            // %L25688
                                        //   in Loop: Header=BB0_169 Depth=2
	add.s32 	%r3466, %r3466, 1;
	mov.u32 	%r3500, 0;
	mov.u32 	%r3502, %r3500;
$L__BB0_175:                            // %pass10737
                                        //   in Loop: Header=BB0_169 Depth=2
	ld.shared.u32 	%r2906, [%rd47];
	ld.shared.u32 	%r2913, [%rd48];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2923, %r2920}, {%r423, %r426}, {%r2906}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2932, %r2929}, {%r423, %r426}, {%r2913}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2916, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2918, %r2916, %r2920;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2921, %r457, %r2923, %r2918;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2925, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2927, %r2925, %r2929;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2930, %r457, %r2932, %r2927;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2934, %r460, %r2923;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2937, %r457, %r2920, %r2934;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2941, %r460, %r2932;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2944, %r457, %r2929, %r2941;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2967, %r2970}, {%r499, %r502}, {%r2921, %r2937}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2974, %r2978}, {%r499, %r502}, {%r2930, %r2944}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2966, %r2967, %r2967;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2969, %r2970, %r2970, %r2966;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2973, %r2974, %r2974, %r2969;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2977, %r2978, %r2978, %r2973;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3505, %r1573, %r2977, %r3502;
	// end inline asm
	add.s32 	%r3503, %r3500, 1;
	setp.eq.s32 	%p331, %r3503, 25;
	@%p331 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_178;
$L__BB0_176:                            // %L26613
                                        //   in Loop: Header=BB0_169 Depth=2
	setp.lt.u32 	%p332, %r1, 16;
	@%p332 bra 	$L__BB0_255;
	bra.uni 	$L__BB0_177;
$L__BB0_255:                            // %pass10986
                                        //   in Loop: Header=BB0_169 Depth=2
	shl.b32 	%r2985, %r3466, 15;
	or.b32  	%r2986, %r174, %r2985;
	cvt.u64.u32 	%rd328, %r2986;
	add.s64 	%rd329, %rd328, %rd9;
	shr.u64 	%rd330, %rd329, 37;
	add.s64 	%rd331, %rd329, %rd330;
	shr.s64 	%rd332, %rd331, 27;
	setp.lt.s64 	%p333, %rd329, 0;
	and.b64  	%rd333, %rd331, -134217728;
	setp.ne.s64 	%p334, %rd333, %rd329;
	and.pred  	%p335, %p333, %p334;
	selp.u64 	%rd334, 1, 0, %p335;
	sub.s64 	%rd335, %rd334, %rd332;
	shl.b64 	%rd336, %rd335, 27;
	add.s64 	%rd337, %rd336, %rd329;
	shl.b64 	%rd338, %rd337, 2;
	add.s64 	%rd339, %rd4, %rd338;
	st.global.u32 	[%rd339], %r3505;
$L__BB0_177:                            // %L26830
                                        //   in Loop: Header=BB0_169 Depth=2
	add.s32 	%r3466, %r3466, 1;
	mov.u32 	%r3503, 0;
	mov.u32 	%r3505, %r3503;
$L__BB0_178:                            // %pass11220
                                        //   in Loop: Header=BB0_169 Depth=2
	ld.shared.u32 	%r2992, [%rd49];
	ld.shared.u32 	%r2999, [%rd50];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3009, %r3006}, {%r423, %r426}, {%r2992}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3018, %r3015}, {%r423, %r426}, {%r2999}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3002, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3004, %r3002, %r3006;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3007, %r457, %r3009, %r3004;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3011, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3013, %r3011, %r3015;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3016, %r457, %r3018, %r3013;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3020, %r460, %r3009;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3023, %r457, %r3006, %r3020;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3027, %r460, %r3018;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3030, %r457, %r3015, %r3027;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3053, %r3056}, {%r499, %r502}, {%r3007, %r3023}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3060, %r3064}, {%r499, %r502}, {%r3016, %r3030}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3052, %r3053, %r3053;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3055, %r3056, %r3056, %r3052;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3059, %r3060, %r3060, %r3055;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3063, %r3064, %r3064, %r3059;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3508, %r1573, %r3063, %r3505;
	// end inline asm
	add.s32 	%r3506, %r3503, 1;
	setp.eq.s32 	%p336, %r3506, 25;
	@%p336 bra 	$L__BB0_179;
	bra.uni 	$L__BB0_181;
$L__BB0_179:                            // %L27755
                                        //   in Loop: Header=BB0_169 Depth=2
	setp.lt.u32 	%p337, %r1, 16;
	@%p337 bra 	$L__BB0_256;
	bra.uni 	$L__BB0_180;
$L__BB0_256:                            // %pass11469
                                        //   in Loop: Header=BB0_169 Depth=2
	shl.b32 	%r3071, %r3466, 15;
	or.b32  	%r3072, %r174, %r3071;
	cvt.u64.u32 	%rd340, %r3072;
	add.s64 	%rd341, %rd340, %rd9;
	shr.u64 	%rd342, %rd341, 37;
	add.s64 	%rd343, %rd341, %rd342;
	shr.s64 	%rd344, %rd343, 27;
	setp.lt.s64 	%p338, %rd341, 0;
	and.b64  	%rd345, %rd343, -134217728;
	setp.ne.s64 	%p339, %rd345, %rd341;
	and.pred  	%p340, %p338, %p339;
	selp.u64 	%rd346, 1, 0, %p340;
	sub.s64 	%rd347, %rd346, %rd344;
	shl.b64 	%rd348, %rd347, 27;
	add.s64 	%rd349, %rd348, %rd341;
	shl.b64 	%rd350, %rd349, 2;
	add.s64 	%rd351, %rd4, %rd350;
	st.global.u32 	[%rd351], %r3508;
$L__BB0_180:                            // %L27972
                                        //   in Loop: Header=BB0_169 Depth=2
	add.s32 	%r3466, %r3466, 1;
	mov.u32 	%r3506, 0;
	mov.u32 	%r3508, %r3506;
$L__BB0_181:                            // %pass11703
                                        //   in Loop: Header=BB0_169 Depth=2
	ld.shared.u32 	%r3078, [%rd51];
	ld.shared.u32 	%r3085, [%rd52];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3095, %r3092}, {%r423, %r426}, {%r3078}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3104, %r3101}, {%r423, %r426}, {%r3085}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3088, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3090, %r3088, %r3092;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3093, %r457, %r3095, %r3090;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3097, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3099, %r3097, %r3101;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3102, %r457, %r3104, %r3099;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3106, %r460, %r3095;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3109, %r457, %r3092, %r3106;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3113, %r460, %r3104;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3116, %r457, %r3101, %r3113;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3139, %r3142}, {%r499, %r502}, {%r3093, %r3109}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3146, %r3150}, {%r499, %r502}, {%r3102, %r3116}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3138, %r3139, %r3139;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3141, %r3142, %r3142, %r3138;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3145, %r3146, %r3146, %r3141;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3149, %r3150, %r3150, %r3145;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3511, %r1573, %r3149, %r3508;
	// end inline asm
	add.s32 	%r3509, %r3506, 1;
	setp.eq.s32 	%p341, %r3509, 25;
	@%p341 bra 	$L__BB0_182;
	bra.uni 	$L__BB0_184;
$L__BB0_182:                            // %L28897
                                        //   in Loop: Header=BB0_169 Depth=2
	setp.lt.u32 	%p342, %r1, 16;
	@%p342 bra 	$L__BB0_257;
	bra.uni 	$L__BB0_183;
$L__BB0_257:                            // %pass11952
                                        //   in Loop: Header=BB0_169 Depth=2
	shl.b32 	%r3157, %r3466, 15;
	or.b32  	%r3158, %r174, %r3157;
	cvt.u64.u32 	%rd352, %r3158;
	add.s64 	%rd353, %rd352, %rd9;
	shr.u64 	%rd354, %rd353, 37;
	add.s64 	%rd355, %rd353, %rd354;
	shr.s64 	%rd356, %rd355, 27;
	setp.lt.s64 	%p343, %rd353, 0;
	and.b64  	%rd357, %rd355, -134217728;
	setp.ne.s64 	%p344, %rd357, %rd353;
	and.pred  	%p345, %p343, %p344;
	selp.u64 	%rd358, 1, 0, %p345;
	sub.s64 	%rd359, %rd358, %rd356;
	shl.b64 	%rd360, %rd359, 27;
	add.s64 	%rd361, %rd360, %rd353;
	shl.b64 	%rd362, %rd361, 2;
	add.s64 	%rd363, %rd4, %rd362;
	st.global.u32 	[%rd363], %r3511;
$L__BB0_183:                            // %L29114
                                        //   in Loop: Header=BB0_169 Depth=2
	add.s32 	%r3466, %r3466, 1;
	mov.u32 	%r3509, 0;
	mov.u32 	%r3511, %r3509;
$L__BB0_184:                            // %pass12186
                                        //   in Loop: Header=BB0_169 Depth=2
	ld.shared.u32 	%r3164, [%rd53];
	ld.shared.u32 	%r3171, [%rd54];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3181, %r3178}, {%r423, %r426}, {%r3164}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3190, %r3187}, {%r423, %r426}, {%r3171}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3174, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3176, %r3174, %r3178;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3179, %r457, %r3181, %r3176;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3183, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3185, %r3183, %r3187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3188, %r457, %r3190, %r3185;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3192, %r460, %r3181;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3195, %r457, %r3178, %r3192;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3199, %r460, %r3190;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3202, %r457, %r3187, %r3199;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3225, %r3228}, {%r499, %r502}, {%r3179, %r3195}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3232, %r3236}, {%r499, %r502}, {%r3188, %r3202}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3224, %r3225, %r3225;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3227, %r3228, %r3228, %r3224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3231, %r3232, %r3232, %r3227;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3235, %r3236, %r3236, %r3231;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3514, %r1573, %r3235, %r3511;
	// end inline asm
	add.s32 	%r3512, %r3509, 1;
	setp.eq.s32 	%p346, %r3512, 25;
	@%p346 bra 	$L__BB0_185;
	bra.uni 	$L__BB0_187;
$L__BB0_185:                            // %L30039
                                        //   in Loop: Header=BB0_169 Depth=2
	setp.lt.u32 	%p347, %r1, 16;
	@%p347 bra 	$L__BB0_258;
	bra.uni 	$L__BB0_186;
$L__BB0_258:                            // %pass12435
                                        //   in Loop: Header=BB0_169 Depth=2
	shl.b32 	%r3243, %r3466, 15;
	or.b32  	%r3244, %r174, %r3243;
	cvt.u64.u32 	%rd364, %r3244;
	add.s64 	%rd365, %rd364, %rd9;
	shr.u64 	%rd366, %rd365, 37;
	add.s64 	%rd367, %rd365, %rd366;
	shr.s64 	%rd368, %rd367, 27;
	setp.lt.s64 	%p348, %rd365, 0;
	and.b64  	%rd369, %rd367, -134217728;
	setp.ne.s64 	%p349, %rd369, %rd365;
	and.pred  	%p350, %p348, %p349;
	selp.u64 	%rd370, 1, 0, %p350;
	sub.s64 	%rd371, %rd370, %rd368;
	shl.b64 	%rd372, %rd371, 27;
	add.s64 	%rd373, %rd372, %rd365;
	shl.b64 	%rd374, %rd373, 2;
	add.s64 	%rd375, %rd4, %rd374;
	st.global.u32 	[%rd375], %r3514;
$L__BB0_186:                            // %L30256
                                        //   in Loop: Header=BB0_169 Depth=2
	add.s32 	%r3466, %r3466, 1;
	mov.u32 	%r3512, 0;
	mov.u32 	%r3514, %r3512;
$L__BB0_187:                            // %pass12669
                                        //   in Loop: Header=BB0_169 Depth=2
	ld.shared.u32 	%r3250, [%rd55];
	ld.shared.u32 	%r3257, [%rd56];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3267, %r3264}, {%r423, %r426}, {%r3250}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3276, %r3273}, {%r423, %r426}, {%r3257}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3260, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3262, %r3260, %r3264;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3265, %r457, %r3267, %r3262;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3269, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3271, %r3269, %r3273;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3274, %r457, %r3276, %r3271;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3278, %r460, %r3267;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3281, %r457, %r3264, %r3278;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3285, %r460, %r3276;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3288, %r457, %r3273, %r3285;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3311, %r3314}, {%r499, %r502}, {%r3265, %r3281}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3318, %r3322}, {%r499, %r502}, {%r3274, %r3288}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3310, %r3311, %r3311;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3313, %r3314, %r3314, %r3310;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3317, %r3318, %r3318, %r3313;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3321, %r3322, %r3322, %r3317;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3517, %r1573, %r3321, %r3514;
	// end inline asm
	add.s32 	%r3515, %r3512, 1;
	setp.eq.s32 	%p351, %r3515, 25;
	@%p351 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_190;
$L__BB0_188:                            // %L31181
                                        //   in Loop: Header=BB0_169 Depth=2
	setp.lt.u32 	%p352, %r1, 16;
	@%p352 bra 	$L__BB0_259;
	bra.uni 	$L__BB0_189;
$L__BB0_259:                            // %pass12918
                                        //   in Loop: Header=BB0_169 Depth=2
	shl.b32 	%r3329, %r3466, 15;
	or.b32  	%r3330, %r174, %r3329;
	cvt.u64.u32 	%rd376, %r3330;
	add.s64 	%rd377, %rd376, %rd9;
	shr.u64 	%rd378, %rd377, 37;
	add.s64 	%rd379, %rd377, %rd378;
	shr.s64 	%rd380, %rd379, 27;
	setp.lt.s64 	%p353, %rd377, 0;
	and.b64  	%rd381, %rd379, -134217728;
	setp.ne.s64 	%p354, %rd381, %rd377;
	and.pred  	%p355, %p353, %p354;
	selp.u64 	%rd382, 1, 0, %p355;
	sub.s64 	%rd383, %rd382, %rd380;
	shl.b64 	%rd384, %rd383, 27;
	add.s64 	%rd385, %rd384, %rd377;
	shl.b64 	%rd386, %rd385, 2;
	add.s64 	%rd387, %rd4, %rd386;
	st.global.u32 	[%rd387], %r3517;
$L__BB0_189:                            // %L31398
                                        //   in Loop: Header=BB0_169 Depth=2
	add.s32 	%r3466, %r3466, 1;
	mov.u32 	%r3515, 0;
	mov.u32 	%r3517, %r3515;
$L__BB0_190:                            // %pass13152
                                        //   in Loop: Header=BB0_169 Depth=2
	ld.shared.u32 	%r3336, [%rd57];
	ld.shared.u32 	%r3343, [%rd58];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3353, %r3350}, {%r423, %r426}, {%r3336}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3362, %r3359}, {%r423, %r426}, {%r3343}, {%r1212, %r1212};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3346, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3348, %r3346, %r3350;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3351, %r457, %r3353, %r3348;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3355, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3357, %r3355, %r3359;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3360, %r457, %r3362, %r3357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3364, %r460, %r3353;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3367, %r457, %r3350, %r3364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3371, %r460, %r3362;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3374, %r457, %r3359, %r3371;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3397, %r3400}, {%r499, %r502}, {%r3351, %r3367}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3404, %r3408}, {%r499, %r502}, {%r3360, %r3374}, {%r1212, %r1212}, %r175, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3396, %r3397, %r3397;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3399, %r3400, %r3400, %r3396;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3403, %r3404, %r3404, %r3399;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3407, %r3408, %r3408, %r3403;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3467, %r1573, %r3407, %r3517;
	// end inline asm
	add.s32 	%r3465, %r3515, 1;
	setp.eq.s32 	%p356, %r3465, 25;
	@%p356 bra 	$L__BB0_191;
	bra.uni 	$L__BB0_193;
$L__BB0_191:                            // %L32323
                                        //   in Loop: Header=BB0_169 Depth=2
	setp.lt.u32 	%p357, %r1, 16;
	@%p357 bra 	$L__BB0_260;
	bra.uni 	$L__BB0_192;
$L__BB0_260:                            // %pass13401
                                        //   in Loop: Header=BB0_169 Depth=2
	shl.b32 	%r3415, %r3466, 15;
	or.b32  	%r3416, %r174, %r3415;
	cvt.u64.u32 	%rd388, %r3416;
	add.s64 	%rd389, %rd388, %rd9;
	shr.u64 	%rd390, %rd389, 37;
	add.s64 	%rd391, %rd389, %rd390;
	shr.s64 	%rd392, %rd391, 27;
	setp.lt.s64 	%p358, %rd389, 0;
	and.b64  	%rd393, %rd391, -134217728;
	setp.ne.s64 	%p359, %rd393, %rd389;
	and.pred  	%p360, %p358, %p359;
	selp.u64 	%rd394, 1, 0, %p360;
	sub.s64 	%rd395, %rd394, %rd392;
	shl.b64 	%rd396, %rd395, 27;
	add.s64 	%rd397, %rd396, %rd389;
	shl.b64 	%rd398, %rd397, 2;
	add.s64 	%rd399, %rd4, %rd398;
	st.global.u32 	[%rd399], %r3467;
	bra.uni 	$L__BB0_192;
$L__BB0_195:                            // %L32572
	mov.u32 	%r3418, 0;
	st.global.u32 	[%rd6], %r3418;
	ret;
$L__BB0_242:                            // %post_box_union
	mov.u64 	%rd206, exception2549;
	cvta.global.u64 	%rd207, %rd206;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd207;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_135:                            // %L6869
	mov.u32 	%r3434, 5;
	st.global.u32 	[%rd6], %r3434;
	mov.u64 	%rd430, exception2501;
	cvta.global.u64 	%rd431, %rd430;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd431;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_136:                            // %L7031
	mov.u32 	%r3433, 5;
	st.global.u32 	[%rd6], %r3433;
	mov.u64 	%rd428, exception2501;
	cvta.global.u64 	%rd429, %rd428;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd429;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_137:                            // %L7193
	mov.u32 	%r3432, 5;
	st.global.u32 	[%rd6], %r3432;
	mov.u64 	%rd426, exception2501;
	cvta.global.u64 	%rd427, %rd426;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd427;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_138:                            // %L7355
	mov.u32 	%r3431, 5;
	st.global.u32 	[%rd6], %r3431;
	mov.u64 	%rd424, exception2501;
	cvta.global.u64 	%rd425, %rd424;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd425;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_139:                            // %L7517
	mov.u32 	%r3430, 5;
	st.global.u32 	[%rd6], %r3430;
	mov.u64 	%rd422, exception2501;
	cvta.global.u64 	%rd423, %rd422;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd423;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_140:                            // %L7679
	mov.u32 	%r3429, 5;
	st.global.u32 	[%rd6], %r3429;
	mov.u64 	%rd420, exception2501;
	cvta.global.u64 	%rd421, %rd420;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd421;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_141:                            // %L7841
	mov.u32 	%r3428, 5;
	st.global.u32 	[%rd6], %r3428;
	mov.u64 	%rd418, exception2501;
	cvta.global.u64 	%rd419, %rd418;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd419;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_142:                            // %L8003
	mov.u32 	%r3427, 5;
	st.global.u32 	[%rd6], %r3427;
	mov.u64 	%rd416, exception2501;
	cvta.global.u64 	%rd417, %rd416;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd417;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_143:                            // %L8165
	mov.u32 	%r3426, 5;
	st.global.u32 	[%rd6], %r3426;
	mov.u64 	%rd414, exception2501;
	cvta.global.u64 	%rd415, %rd414;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd415;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_144:                            // %L8327
	mov.u32 	%r3425, 5;
	st.global.u32 	[%rd6], %r3425;
	mov.u64 	%rd412, exception2501;
	cvta.global.u64 	%rd413, %rd412;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd413;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L8489
	mov.u32 	%r3424, 5;
	st.global.u32 	[%rd6], %r3424;
	mov.u64 	%rd410, exception2501;
	cvta.global.u64 	%rd411, %rd410;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd411;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L8651
	mov.u32 	%r3423, 5;
	st.global.u32 	[%rd6], %r3423;
	mov.u64 	%rd408, exception2501;
	cvta.global.u64 	%rd409, %rd408;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd409;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L8813
	mov.u32 	%r3422, 5;
	st.global.u32 	[%rd6], %r3422;
	mov.u64 	%rd406, exception2501;
	cvta.global.u64 	%rd407, %rd406;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd407;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L8975
	mov.u32 	%r3421, 5;
	st.global.u32 	[%rd6], %r3421;
	mov.u64 	%rd404, exception2501;
	cvta.global.u64 	%rd405, %rd404;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd405;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L9137
	mov.u32 	%r3420, 5;
	st.global.u32 	[%rd6], %r3420;
	mov.u64 	%rd402, exception2501;
	cvta.global.u64 	%rd403, %rd402;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd403;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L9299
	mov.u32 	%r3419, 5;
	st.global.u32 	[%rd6], %r3419;
	mov.u64 	%rd400, exception2501;
	cvta.global.u64 	%rd401, %rd400;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd401;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L167
	mov.u32 	%r3436, 2;
	st.global.u32 	[%rd6], %r3436;
	mov.u64 	%rd434, exception2501;
	cvta.global.u64 	%rd435, %rd434;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd435;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_12:                             // %L311
	mov.u32 	%r3435, 3;
	st.global.u32 	[%rd6], %r3435;
	mov.u64 	%rd432, exception2501;
	cvta.global.u64 	%rd433, %rd432;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd433;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd65, exception12561;
	cvta.global.u64 	%rd66, %rd65;
	{ // callseq 45, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd66;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 45
	{ // callseq 46, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 46
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_134:                            // %L1160
	add.u64 	%rd64, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r1, %r2};
	st.local.v2.u32 	[%rd5+8], {%r4, %r85};
	st.local.u32 	[%rd5+16], %r86;
	mov.u64 	%rd70, __unnamed_1;
	cvta.global.u64 	%rd71, %rd70;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd71;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd64;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r512, [retval0+0];
	} // callseq 47
	mov.u32 	%r514, 4;
	st.global.u32 	[%rd6], %r514;
	mov.u64 	%rd73, exception2501;
	cvta.global.u64 	%rd74, %rd73;
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd74;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 48
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 49
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
