// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception2603[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception2651[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 512, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<349>;
	.reg .b16 	%rs<97>;
	.reg .b32 	%r<3520>;
	.reg .f32 	%f<752>;
	.reg .b64 	%rd<423>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r296, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd59, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r305, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r305, 34943;
	@%p2 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd60, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r297, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r2, %r1, 9;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	mov.u32 	%r5, %tid.x;
	or.b32  	%r306, %r4, %r5;
	or.b32  	%r307, %r306, %r2;
	mul.wide.u32 	%rd67, %r307, 4;
	add.s64 	%rd6, %rd60, %rd67;
	mov.u32 	%r308, 1;
	st.global.u32 	[%rd6], %r308;
	setp.gt.u32 	%p3, %r297, 32767;
	@%p3 bra 	$L__BB0_6;
// %bb.3:                               // %L122
	ld.param.u32 	%r298, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p4, %r298, %r297;
	setp.gt.s32 	%p5, %r298, 65535;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_6;
// %bb.4:                               // %L129
	ld.param.u32 	%r299, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r298, %r297;
	and.b32  	%r309, %r6, 63;
	setp.ne.s32 	%p7, %r309, 0;
	setp.gt.u32 	%p8, %r299, 4095;
	or.pred  	%p9, %p7, %p8;
	@%p9 bra 	$L__BB0_6;
// %bb.5:                               // %L140
	ld.param.u32 	%r300, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p10, %r300, %r299;
	setp.lt.s32 	%p11, %r300, 8192;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r310, %r300, %r299;
	mul.hi.s32 	%r311, %r6, 1374389535;
	shr.u32 	%r312, %r311, 31;
	shr.s32 	%r313, %r311, 3;
	add.s32 	%r314, %r313, %r312;
	setp.eq.s32 	%p13, %r310, %r314;
	@%p13 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L262
	ld.param.u32 	%r301, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p14, %r301, 0;
	@%p14 bra 	$L__BB0_12;
// %bb.9:                               // %L264
	ld.param.u32 	%r303, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	ld.param.u32 	%r302, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p15, %r302, %r301;
	setp.gt.s32 	%p16, %r302, 64;
	or.pred  	%p17, %p15, %p16;
	setp.lt.s32 	%p18, %r303, 0;
	or.pred  	%p19, %p17, %p18;
	@%p19 bra 	$L__BB0_12;
// %bb.10:                              // %L280
	ld.param.u32 	%r304, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p20, %r304, %r303;
	setp.gt.s32 	%p21, %r304, 64;
	or.pred  	%p22, %p20, %p21;
	@%p22 bra 	$L__BB0_12;
// %bb.11:                              // %L290
	sub.s32 	%r315, %r304, %r303;
	sub.s32 	%r316, %r302, %r301;
	setp.eq.s32 	%p23, %r315, %r316;
	@%p23 bra 	$L__BB0_171;
	bra.uni 	$L__BB0_12;
$L__BB0_171:                            // %pass162
	and.b32  	%r127, %r5, 3;
	shr.u32 	%r128, %r5, 2;
	mul.lo.s32 	%r317, %r127, %r128;
	and.b32  	%r318, %r317, 7;
	cvt.rn.f32.s32 	%f185, %r318;
	mov.f32 	%f186, 0f40800000;
	div.approx.f32 	%f151, %f185, %f186;
	abs.f32 	%f750, %f151;
	setp.lt.f32 	%p24, %f750, 0f40000000;
	mov.f32 	%f703, 0f40000000;
	setp.gtu.f32 	%p344, %f750, 0f4B800000;
	mov.f32 	%f746, %f750;
	@%p24 bra 	$L__BB0_183;
// %bb.172:
	@%p344 bra 	$L__BB0_179;
	bra.uni 	$L__BB0_173;
$L__BB0_179:
	mov.b32 	%r130, %f750;
	and.b32  	%r319, %r130, 8388607;
	or.b32  	%r3473, %r319, 1065353216;
	mov.b32 	%f745, %r3473;
	add.s32 	%r320, %r130, -1073741824;
	and.b32  	%r3474, %r320, -8388608;
	setp.eq.s32 	%p31, %r3474, 0;
	@%p31 bra 	$L__BB0_182;
// %bb.180:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f196, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f195,%f196;
	// end inline asm
$L__BB0_181:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r321, %r3474, 192937984;
	add.s32 	%r322, %r3473, %r321;
	mov.b32 	%f197, %r322;
	mul.f32 	%f198, %f195, %f197;
	sub.f32 	%f199, %f197, %f198;
	fma.rn.f32 	%f200, %f199, %f195, %f198;
	sub.f32 	%f201, %f197, %f200;
	fma.rz.f32 	%f202, %f201, %f195, %f200;
	cvt.rzi.f32.f32 	%f203, %f202;
	sub.f32 	%f745, %f197, %f203;
	sub.s32 	%r3474, %r3474, %r321;
	mov.b32 	%r3473, %f745;
	setp.ne.s32 	%p32, %r3474, 0;
	setp.ne.s32 	%p33, %r3473, 0;
	and.pred  	%p34, %p32, %p33;
	@%p34 bra 	$L__BB0_181;
$L__BB0_182:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p35, %r130, 2139095039;
	selp.f32 	%f204, 0f7FFFFFFF, 0f4B800000, %p35;
	mul.f32 	%f205, %f745, 0f34000000;
	mul.f32 	%f746, %f204, %f205;
	bra.uni 	$L__BB0_183;
$L__BB0_173:                            // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f188, %f750, %f703;
	cvt.rzi.f32.f32 	%f744, %f188;
	fma.rn.f32 	%f154, %f744, 0fC0000000, %f750;
	mov.b32 	%r129, %f154;
	setp.lt.u32 	%p26, %r129, 1073741824;
	@%p26 bra 	$L__BB0_178;
// %bb.174:
	setp.lt.u32 	%p27, %r129, -2147483647;
	@%p27 bra 	$L__BB0_176;
// %bb.175:
	add.f32 	%f193, %f744, 0fBF800000;
	setp.lt.f32 	%p30, %f154, 0fC0000000;
	add.f32 	%f194, %f193, 0fBF800000;
	selp.f32 	%f744, %f194, %f193, %p30;
	bra.uni 	$L__BB0_178;
$L__BB0_176:
	add.f32 	%f744, %f744, 0f3F800000;
	setp.ltu.f32 	%p28, %f154, 0f40800000;
	@%p28 bra 	$L__BB0_178;
// %bb.177:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f189, %f744, 0f3F800000;
	fma.rn.f32 	%f191, %f703, 0fC0400000, %f154;
	setp.ge.f32 	%p29, %f191, 0f00000000;
	add.f32 	%f192, %f189, 0f3F800000;
	selp.f32 	%f744, %f192, %f189, %p29;
$L__BB0_178:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f746, %f744, 0fC0000000, %f750;
$L__BB0_183:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f206, %f746;
	setp.gtu.f32 	%p36, %f206, 0f7F800000;
	mov.b32 	%r323, %f151;
	and.b32  	%r137, %r323, -2147483648;
	@%p36 bra 	$L__BB0_185;
// %bb.184:
	mov.b32 	%r324, %f746;
	or.b32  	%r325, %r137, %r324;
	mov.b32 	%f746, %r325;
$L__BB0_185:                            // %__nv_fmodf.exit
	shl.b32 	%r140, %r5, 1;
	and.b32  	%r340, %r140, 2;
	mul.lo.s32 	%r141, %r340, %r128;
	cvt.rn.f32.s32 	%f239, %r141;
	mov.f32 	%f240, 0f41800000;
	div.approx.f32 	%f168, %f239, %f240;
	abs.f32 	%f726, %f168;
	setp.lt.f32 	%p44, %f726, 0f40000000;
	setp.gtu.f32 	%p345, %f726, 0f4B800000;
	mov.f32 	%f706, %f726;
	@%p44 bra 	$L__BB0_24;
// %bb.13:
	@%p345 bra 	$L__BB0_20;
	bra.uni 	$L__BB0_14;
$L__BB0_20:
	mov.b32 	%r8, %f726;
	and.b32  	%r341, %r8, 8388607;
	or.b32  	%r3439, %r341, 1065353216;
	mov.b32 	%f705, %r3439;
	add.s32 	%r342, %r8, -1073741824;
	and.b32  	%r3440, %r342, -8388608;
	setp.eq.s32 	%p51, %r3440, 0;
	@%p51 bra 	$L__BB0_23;
// %bb.21:                              // %__nv_fmaf_rn.exit4.i.i.i2328.preheader
	mov.f32 	%f250, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f249,%f250;
	// end inline asm
$L__BB0_22:                             // %__nv_fmaf_rn.exit4.i.i.i2328
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r343, %r3440, 192937984;
	add.s32 	%r344, %r3439, %r343;
	mov.b32 	%f251, %r344;
	mul.f32 	%f252, %f249, %f251;
	sub.f32 	%f253, %f251, %f252;
	fma.rn.f32 	%f254, %f253, %f249, %f252;
	sub.f32 	%f255, %f251, %f254;
	fma.rz.f32 	%f256, %f255, %f249, %f254;
	cvt.rzi.f32.f32 	%f257, %f256;
	sub.f32 	%f705, %f251, %f257;
	sub.s32 	%r3440, %r3440, %r343;
	mov.b32 	%r3439, %f705;
	setp.ne.s32 	%p52, %r3440, 0;
	setp.ne.s32 	%p53, %r3439, 0;
	and.pred  	%p54, %p52, %p53;
	@%p54 bra 	$L__BB0_22;
$L__BB0_23:                             // %__internal_fmodf_slowpath_mod.exit.i.i2330
	setp.gt.u32 	%p55, %r8, 2139095039;
	selp.f32 	%f258, 0f7FFFFFFF, 0f4B800000, %p55;
	mul.f32 	%f259, %f705, 0f34000000;
	mul.f32 	%f706, %f258, %f259;
	bra.uni 	$L__BB0_24;
$L__BB0_14:                             // %__nv_fast_fdividef.exit.i.i.i2307
	div.approx.f32 	%f242, %f726, %f703;
	cvt.rzi.f32.f32 	%f704, %f242;
	fma.rn.f32 	%f2, %f704, 0fC0000000, %f726;
	mov.b32 	%r7, %f2;
	setp.lt.u32 	%p46, %r7, 1073741824;
	@%p46 bra 	$L__BB0_19;
// %bb.15:
	setp.lt.u32 	%p47, %r7, -2147483647;
	@%p47 bra 	$L__BB0_17;
// %bb.16:
	add.f32 	%f247, %f704, 0fBF800000;
	setp.lt.f32 	%p50, %f2, 0fC0000000;
	add.f32 	%f248, %f247, 0fBF800000;
	selp.f32 	%f704, %f248, %f247, %p50;
	bra.uni 	$L__BB0_19;
$L__BB0_17:
	add.f32 	%f704, %f704, 0f3F800000;
	setp.ltu.f32 	%p48, %f2, 0f40800000;
	@%p48 bra 	$L__BB0_19;
// %bb.18:                              // %__nv_fmaf_rn.exit.i.i.i2311
	add.f32 	%f243, %f704, 0f3F800000;
	fma.rn.f32 	%f245, %f703, 0fC0400000, %f2;
	setp.ge.f32 	%p49, %f245, 0f00000000;
	add.f32 	%f246, %f243, 0f3F800000;
	selp.f32 	%f704, %f246, %f243, %p49;
$L__BB0_19:                             // %__internal_fmodf_fastpath_quot.exit.i.i2314
	fma.rn.f32 	%f706, %f704, 0fC0000000, %f726;
$L__BB0_24:                             // %__internal_fmodf_kernel.exit.i2333
	abs.f32 	%f260, %f706;
	setp.gtu.f32 	%p56, %f260, 0f7F800000;
	mov.b32 	%r345, %f168;
	and.b32  	%r15, %r345, -2147483648;
	@%p56 bra 	$L__BB0_26;
// %bb.25:
	mov.b32 	%r346, %f706;
	or.b32  	%r347, %r15, %r346;
	mov.b32 	%f706, %r347;
$L__BB0_26:                             // %__nv_fmodf.exit2334
	add.s32 	%r356, %r141, %r128;
	cvt.rn.f32.s32 	%f291, %r356;
	div.approx.f32 	%f18, %f291, %f240;
	abs.f32 	%f730, %f18;
	setp.lt.f32 	%p64, %f730, 0f40000000;
	setp.gtu.f32 	%p346, %f730, 0f4B800000;
	mov.f32 	%f710, %f730;
	@%p64 bra 	$L__BB0_38;
// %bb.27:
	@%p346 bra 	$L__BB0_34;
	bra.uni 	$L__BB0_28;
$L__BB0_34:
	mov.b32 	%r17, %f730;
	and.b32  	%r357, %r17, 8388607;
	or.b32  	%r3441, %r357, 1065353216;
	mov.b32 	%f709, %r3441;
	add.s32 	%r358, %r17, -1073741824;
	and.b32  	%r3442, %r358, -8388608;
	setp.eq.s32 	%p71, %r3442, 0;
	@%p71 bra 	$L__BB0_37;
// %bb.35:                              // %__nv_fmaf_rn.exit4.i.i.i2359.preheader
	mov.f32 	%f302, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f301,%f302;
	// end inline asm
$L__BB0_36:                             // %__nv_fmaf_rn.exit4.i.i.i2359
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r359, %r3442, 192937984;
	add.s32 	%r360, %r3441, %r359;
	mov.b32 	%f303, %r360;
	mul.f32 	%f304, %f301, %f303;
	sub.f32 	%f305, %f303, %f304;
	fma.rn.f32 	%f306, %f305, %f301, %f304;
	sub.f32 	%f307, %f303, %f306;
	fma.rz.f32 	%f308, %f307, %f301, %f306;
	cvt.rzi.f32.f32 	%f309, %f308;
	sub.f32 	%f709, %f303, %f309;
	sub.s32 	%r3442, %r3442, %r359;
	mov.b32 	%r3441, %f709;
	setp.ne.s32 	%p72, %r3442, 0;
	setp.ne.s32 	%p73, %r3441, 0;
	and.pred  	%p74, %p72, %p73;
	@%p74 bra 	$L__BB0_36;
$L__BB0_37:                             // %__internal_fmodf_slowpath_mod.exit.i.i2361
	setp.gt.u32 	%p75, %r17, 2139095039;
	selp.f32 	%f310, 0f7FFFFFFF, 0f4B800000, %p75;
	mul.f32 	%f311, %f709, 0f34000000;
	mul.f32 	%f710, %f310, %f311;
	bra.uni 	$L__BB0_38;
$L__BB0_28:                             // %__nv_fast_fdividef.exit.i.i.i2338
	div.approx.f32 	%f294, %f730, %f703;
	cvt.rzi.f32.f32 	%f708, %f294;
	fma.rn.f32 	%f21, %f708, 0fC0000000, %f730;
	mov.b32 	%r16, %f21;
	setp.lt.u32 	%p66, %r16, 1073741824;
	@%p66 bra 	$L__BB0_33;
// %bb.29:
	setp.lt.u32 	%p67, %r16, -2147483647;
	@%p67 bra 	$L__BB0_31;
// %bb.30:
	add.f32 	%f299, %f708, 0fBF800000;
	setp.lt.f32 	%p70, %f21, 0fC0000000;
	add.f32 	%f300, %f299, 0fBF800000;
	selp.f32 	%f708, %f300, %f299, %p70;
	bra.uni 	$L__BB0_33;
$L__BB0_31:
	add.f32 	%f708, %f708, 0f3F800000;
	setp.ltu.f32 	%p68, %f21, 0f40800000;
	@%p68 bra 	$L__BB0_33;
// %bb.32:                              // %__nv_fmaf_rn.exit.i.i.i2342
	add.f32 	%f295, %f708, 0f3F800000;
	fma.rn.f32 	%f297, %f703, 0fC0400000, %f21;
	setp.ge.f32 	%p69, %f297, 0f00000000;
	add.f32 	%f298, %f295, 0f3F800000;
	selp.f32 	%f708, %f298, %f295, %p69;
$L__BB0_33:                             // %__internal_fmodf_fastpath_quot.exit.i.i2345
	fma.rn.f32 	%f710, %f708, 0fC0000000, %f730;
$L__BB0_38:                             // %__internal_fmodf_kernel.exit.i2364
	abs.f32 	%f312, %f710;
	setp.gtu.f32 	%p76, %f312, 0f7F800000;
	mov.b32 	%r361, %f18;
	and.b32  	%r24, %r361, -2147483648;
	@%p76 bra 	$L__BB0_40;
// %bb.39:
	mov.b32 	%r362, %f710;
	or.b32  	%r363, %r24, %r362;
	mov.b32 	%f710, %r363;
$L__BB0_40:                             // %__nv_fmodf.exit2365
	mul.lo.s32 	%r27, %r140, %r128;
	and.b32  	%r378, %r27, 2;
	cvt.rn.f32.s32 	%f345, %r378;
	div.approx.f32 	%f35, %f345, %f703;
	abs.f32 	%f734, %f35;
	setp.lt.f32 	%p84, %f734, 0f40000000;
	setp.gtu.f32 	%p347, %f734, 0f4B800000;
	mov.f32 	%f714, %f734;
	@%p84 bra 	$L__BB0_52;
// %bb.41:
	@%p347 bra 	$L__BB0_48;
	bra.uni 	$L__BB0_42;
$L__BB0_48:
	mov.b32 	%r29, %f734;
	and.b32  	%r379, %r29, 8388607;
	or.b32  	%r3443, %r379, 1065353216;
	mov.b32 	%f713, %r3443;
	add.s32 	%r380, %r29, -1073741824;
	and.b32  	%r3444, %r380, -8388608;
	setp.eq.s32 	%p91, %r3444, 0;
	@%p91 bra 	$L__BB0_51;
// %bb.49:                              // %__nv_fmaf_rn.exit4.i.i.i2390.preheader
	mov.f32 	%f356, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f355,%f356;
	// end inline asm
$L__BB0_50:                             // %__nv_fmaf_rn.exit4.i.i.i2390
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r381, %r3444, 192937984;
	add.s32 	%r382, %r3443, %r381;
	mov.b32 	%f357, %r382;
	mul.f32 	%f358, %f355, %f357;
	sub.f32 	%f359, %f357, %f358;
	fma.rn.f32 	%f360, %f359, %f355, %f358;
	sub.f32 	%f361, %f357, %f360;
	fma.rz.f32 	%f362, %f361, %f355, %f360;
	cvt.rzi.f32.f32 	%f363, %f362;
	sub.f32 	%f713, %f357, %f363;
	sub.s32 	%r3444, %r3444, %r381;
	mov.b32 	%r3443, %f713;
	setp.ne.s32 	%p92, %r3444, 0;
	setp.ne.s32 	%p93, %r3443, 0;
	and.pred  	%p94, %p92, %p93;
	@%p94 bra 	$L__BB0_50;
$L__BB0_51:                             // %__internal_fmodf_slowpath_mod.exit.i.i2392
	setp.gt.u32 	%p95, %r29, 2139095039;
	selp.f32 	%f364, 0f7FFFFFFF, 0f4B800000, %p95;
	mul.f32 	%f365, %f713, 0f34000000;
	mul.f32 	%f714, %f364, %f365;
	bra.uni 	$L__BB0_52;
$L__BB0_42:                             // %__nv_fast_fdividef.exit.i.i.i2369
	div.approx.f32 	%f348, %f734, %f703;
	cvt.rzi.f32.f32 	%f712, %f348;
	fma.rn.f32 	%f38, %f712, 0fC0000000, %f734;
	mov.b32 	%r28, %f38;
	setp.lt.u32 	%p86, %r28, 1073741824;
	@%p86 bra 	$L__BB0_47;
// %bb.43:
	setp.lt.u32 	%p87, %r28, -2147483647;
	@%p87 bra 	$L__BB0_45;
// %bb.44:
	add.f32 	%f353, %f712, 0fBF800000;
	setp.lt.f32 	%p90, %f38, 0fC0000000;
	add.f32 	%f354, %f353, 0fBF800000;
	selp.f32 	%f712, %f354, %f353, %p90;
	bra.uni 	$L__BB0_47;
$L__BB0_45:
	add.f32 	%f712, %f712, 0f3F800000;
	setp.ltu.f32 	%p88, %f38, 0f40800000;
	@%p88 bra 	$L__BB0_47;
// %bb.46:                              // %__nv_fmaf_rn.exit.i.i.i2373
	add.f32 	%f349, %f712, 0f3F800000;
	fma.rn.f32 	%f351, %f703, 0fC0400000, %f38;
	setp.ge.f32 	%p89, %f351, 0f00000000;
	add.f32 	%f352, %f349, 0f3F800000;
	selp.f32 	%f712, %f352, %f349, %p89;
$L__BB0_47:                             // %__internal_fmodf_fastpath_quot.exit.i.i2376
	fma.rn.f32 	%f714, %f712, 0fC0000000, %f734;
$L__BB0_52:                             // %__internal_fmodf_kernel.exit.i2395
	mov.f32 	%f230, 0f00000000;
	abs.f32 	%f366, %f714;
	setp.gtu.f32 	%p96, %f366, 0f7F800000;
	mov.b32 	%r383, %f35;
	and.b32  	%r36, %r383, -2147483648;
	@%p96 bra 	$L__BB0_54;
// %bb.53:
	mov.b32 	%r384, %f714;
	or.b32  	%r385, %r36, %r384;
	mov.b32 	%f714, %r385;
$L__BB0_54:                             // %__nv_fmodf.exit2396
	add.f32 	%f367, %f714, %f714;
	mov.b32 	%r386, %f367;
	and.b32  	%r387, %r386, -2147483648;
	or.b32  	%r388, %r387, 1056964608;
	mov.b32 	%f368, %r388;
	add.f32 	%f369, %f367, %f368;
	cvt.rzi.f32.f32 	%f370, %f369;
	abs.f32 	%f371, %f367;
	setp.gt.f32 	%p97, %f371, 0f4B000000;
	selp.f32 	%f372, %f367, %f370, %p97;
	cvt.rzi.f32.f32 	%f373, %f367;
	setp.lt.f32 	%p98, %f371, 0f3F000000;
	selp.f32 	%f374, %f373, %f372, %p98;
	cvt.rzi.s32.f32 	%r389, %f374;
	fma.rn.f32 	%f375, %f374, 0fBF000000, %f714;
	mul.f32 	%f376, %f375, %f375;
	fma.rn.f32 	%f377, %f376, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f378, %f376, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f379, %f377, %f376, 0fC0A55DF6;
	fma.rn.f32 	%f380, %f378, %f376, 0f4081E0CF;
	fma.rn.f32 	%f381, %f376, %f375, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f376, 0fC09DE9E6;
	fma.rn.f32 	%f383, %f379, %f381, 0f00000000;
	fma.rn.f32 	%f384, %f382, %f376, 0f3F800000;
	fma.rn.f32 	%f385, %f375, 0f40490FDB, %f383;
	and.b32  	%r390, %r389, 1;
	setp.eq.b32 	%p99, %r390, 1;
	selp.f32 	%f386, %f384, %f385, %p99;
	selp.f32 	%f387, %f385, %f384, %p99;
	and.b32  	%r391, %r389, 2;
	setp.eq.s32 	%p100, %r391, 0;
	neg.f32 	%f388, %f386;
	selp.f32 	%f389, %f386, %f388, %p100;
	add.s32 	%r392, %r389, 1;
	and.b32  	%r393, %r392, 2;
	setp.eq.s32 	%p101, %r393, 0;
	sub.f32 	%f391, %f230, %f387;
	cvt.rzi.f32.f32 	%f393, %f714;
	setp.eq.f32 	%p102, %f393, %f714;
	mul.f32 	%f394, %f714, 0f00000000;
	selp.f32 	%f76, %f394, %f389, %p102;
	abs.f32 	%f395, %f714;
	add.s32 	%r394, %r27, %r128;
	and.b32  	%r395, %r394, 3;
	cvt.rn.f32.s32 	%f397, %r395;
	div.approx.f32 	%f54, %f397, %f703;
	abs.f32 	%f738, %f54;
	setp.lt.f32 	%p104, %f738, 0f40000000;
	setp.gtu.f32 	%p348, %f738, 0f4B800000;
	mov.f32 	%f718, %f738;
	@%p104 bra 	$L__BB0_66;
// %bb.55:
	@%p348 bra 	$L__BB0_62;
	bra.uni 	$L__BB0_56;
$L__BB0_62:
	mov.b32 	%r38, %f738;
	and.b32  	%r396, %r38, 8388607;
	or.b32  	%r3445, %r396, 1065353216;
	mov.b32 	%f717, %r3445;
	add.s32 	%r397, %r38, -1073741824;
	and.b32  	%r3446, %r397, -8388608;
	setp.eq.s32 	%p111, %r3446, 0;
	@%p111 bra 	$L__BB0_65;
// %bb.63:                              // %__nv_fmaf_rn.exit4.i.i.i2421.preheader
	mov.f32 	%f408, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f407,%f408;
	// end inline asm
$L__BB0_64:                             // %__nv_fmaf_rn.exit4.i.i.i2421
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r398, %r3446, 192937984;
	add.s32 	%r399, %r3445, %r398;
	mov.b32 	%f409, %r399;
	mul.f32 	%f410, %f407, %f409;
	sub.f32 	%f411, %f409, %f410;
	fma.rn.f32 	%f412, %f411, %f407, %f410;
	sub.f32 	%f413, %f409, %f412;
	fma.rz.f32 	%f414, %f413, %f407, %f412;
	cvt.rzi.f32.f32 	%f415, %f414;
	sub.f32 	%f717, %f409, %f415;
	sub.s32 	%r3446, %r3446, %r398;
	mov.b32 	%r3445, %f717;
	setp.ne.s32 	%p112, %r3446, 0;
	setp.ne.s32 	%p113, %r3445, 0;
	and.pred  	%p114, %p112, %p113;
	@%p114 bra 	$L__BB0_64;
$L__BB0_65:                             // %__internal_fmodf_slowpath_mod.exit.i.i2423
	setp.gt.u32 	%p115, %r38, 2139095039;
	selp.f32 	%f416, 0f7FFFFFFF, 0f4B800000, %p115;
	mul.f32 	%f417, %f717, 0f34000000;
	mul.f32 	%f718, %f416, %f417;
	bra.uni 	$L__BB0_66;
$L__BB0_56:                             // %__nv_fast_fdividef.exit.i.i.i2400
	div.approx.f32 	%f400, %f738, %f703;
	cvt.rzi.f32.f32 	%f716, %f400;
	fma.rn.f32 	%f57, %f716, 0fC0000000, %f738;
	mov.b32 	%r37, %f57;
	setp.lt.u32 	%p106, %r37, 1073741824;
	@%p106 bra 	$L__BB0_61;
// %bb.57:
	setp.lt.u32 	%p107, %r37, -2147483647;
	@%p107 bra 	$L__BB0_59;
// %bb.58:
	add.f32 	%f405, %f716, 0fBF800000;
	setp.lt.f32 	%p110, %f57, 0fC0000000;
	add.f32 	%f406, %f405, 0fBF800000;
	selp.f32 	%f716, %f406, %f405, %p110;
	bra.uni 	$L__BB0_61;
$L__BB0_59:
	add.f32 	%f716, %f716, 0f3F800000;
	setp.ltu.f32 	%p108, %f57, 0f40800000;
	@%p108 bra 	$L__BB0_61;
// %bb.60:                              // %__nv_fmaf_rn.exit.i.i.i2404
	add.f32 	%f401, %f716, 0f3F800000;
	fma.rn.f32 	%f403, %f703, 0fC0400000, %f57;
	setp.ge.f32 	%p109, %f403, 0f00000000;
	add.f32 	%f404, %f401, 0f3F800000;
	selp.f32 	%f716, %f404, %f401, %p109;
$L__BB0_61:                             // %__internal_fmodf_fastpath_quot.exit.i.i2407
	fma.rn.f32 	%f718, %f716, 0fC0000000, %f738;
$L__BB0_66:                             // %__internal_fmodf_kernel.exit.i2426
	selp.f32 	%f392, %f387, %f391, %p101;
	setp.gt.f32 	%p103, %f395, 0f4B800000;
	add.f32 	%f396, %f76, 0f3F800000;
	abs.f32 	%f418, %f718;
	setp.gtu.f32 	%p116, %f418, 0f7F800000;
	mov.b32 	%r400, %f54;
	and.b32  	%r45, %r400, -2147483648;
	@%p116 bra 	$L__BB0_68;
// %bb.67:
	mov.b32 	%r401, %f718;
	or.b32  	%r402, %r45, %r401;
	mov.b32 	%f718, %r402;
$L__BB0_68:                             // %__nv_fmodf.exit2427
	selp.f32 	%f53, %f396, %f392, %p103;
	add.f32 	%f419, %f718, %f718;
	mov.b32 	%r403, %f419;
	and.b32  	%r404, %r403, -2147483648;
	or.b32  	%r405, %r404, 1056964608;
	mov.b32 	%f420, %r405;
	add.f32 	%f421, %f419, %f420;
	cvt.rzi.f32.f32 	%f422, %f421;
	abs.f32 	%f423, %f419;
	setp.gt.f32 	%p117, %f423, 0f4B000000;
	selp.f32 	%f424, %f419, %f422, %p117;
	cvt.rzi.f32.f32 	%f425, %f419;
	setp.lt.f32 	%p118, %f423, 0f3F000000;
	selp.f32 	%f426, %f425, %f424, %p118;
	cvt.rzi.s32.f32 	%r406, %f426;
	fma.rn.f32 	%f427, %f426, 0fBF000000, %f718;
	mul.f32 	%f428, %f427, %f427;
	fma.rn.f32 	%f429, %f428, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f430, %f428, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f431, %f429, %f428, 0fC0A55DF6;
	fma.rn.f32 	%f432, %f430, %f428, 0f4081E0CF;
	fma.rn.f32 	%f433, %f428, %f427, 0f00000000;
	fma.rn.f32 	%f434, %f432, %f428, 0fC09DE9E6;
	fma.rn.f32 	%f435, %f431, %f433, 0f00000000;
	fma.rn.f32 	%f436, %f434, %f428, 0f3F800000;
	fma.rn.f32 	%f437, %f427, 0f40490FDB, %f435;
	and.b32  	%r407, %r406, 1;
	setp.eq.b32 	%p119, %r407, 1;
	selp.f32 	%f438, %f436, %f437, %p119;
	selp.f32 	%f439, %f437, %f436, %p119;
	and.b32  	%r408, %r406, 2;
	setp.eq.s32 	%p120, %r408, 0;
	neg.f32 	%f440, %f438;
	selp.f32 	%f441, %f438, %f440, %p120;
	add.s32 	%r409, %r406, 1;
	and.b32  	%r410, %r409, 2;
	setp.eq.s32 	%p121, %r410, 0;
	sub.f32 	%f443, %f230, %f439;
	selp.f32 	%f444, %f439, %f443, %p121;
	cvt.rzi.f32.f32 	%f445, %f718;
	setp.eq.f32 	%p122, %f445, %f718;
	mul.f32 	%f446, %f718, 0f00000000;
	selp.f32 	%f78, %f446, %f441, %p122;
	abs.f32 	%f447, %f718;
	setp.gt.f32 	%p123, %f447, 0f4B800000;
	add.f32 	%f448, %f78, 0f3F800000;
	selp.f32 	%f72, %f448, %f444, %p123;
	and.b32  	%r46, %r5, 2;
	setp.eq.s32 	%p124, %r46, 0;
	mov.f32 	%f75, %f53;
	mov.f32 	%f77, %f72;
	@%p124 bra 	$L__BB0_70;
// %bb.69:                              // %L688
	neg.f32 	%f77, %f78;
	neg.f32 	%f75, %f76;
	mov.f32 	%f76, %f53;
	mov.f32 	%f78, %f72;
$L__BB0_70:                             // %L690
	@%p24 bra 	$L__BB0_193;
// %bb.71:
	@%p344 bra 	$L__BB0_189;
	bra.uni 	$L__BB0_72;
$L__BB0_189:
	mov.b32 	%r143, %f750;
	and.b32  	%r417, %r143, 8388607;
	or.b32  	%r3475, %r417, 1065353216;
	mov.b32 	%f749, %r3475;
	add.s32 	%r418, %r143, -1073741824;
	and.b32  	%r3476, %r418, -8388608;
	setp.eq.s32 	%p132, %r3476, 0;
	@%p132 bra 	$L__BB0_192;
// %bb.190:                             // %__nv_fmaf_rn.exit4.i.i.i2452.preheader
	mov.f32 	%f458, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f457,%f458;
	// end inline asm
$L__BB0_191:                            // %__nv_fmaf_rn.exit4.i.i.i2452
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r419, %r3476, 192937984;
	add.s32 	%r420, %r3475, %r419;
	mov.b32 	%f459, %r420;
	mul.f32 	%f460, %f457, %f459;
	sub.f32 	%f461, %f459, %f460;
	fma.rn.f32 	%f462, %f461, %f457, %f460;
	sub.f32 	%f463, %f459, %f462;
	fma.rz.f32 	%f464, %f463, %f457, %f462;
	cvt.rzi.f32.f32 	%f465, %f464;
	sub.f32 	%f749, %f459, %f465;
	sub.s32 	%r3476, %r3476, %r419;
	mov.b32 	%r3475, %f749;
	setp.ne.s32 	%p133, %r3476, 0;
	setp.ne.s32 	%p134, %r3475, 0;
	and.pred  	%p135, %p133, %p134;
	@%p135 bra 	$L__BB0_191;
$L__BB0_192:                            // %__internal_fmodf_slowpath_mod.exit.i.i2454
	setp.gt.u32 	%p136, %r143, 2139095039;
	selp.f32 	%f466, 0f7FFFFFFF, 0f4B800000, %p136;
	mul.f32 	%f467, %f749, 0f34000000;
	mul.f32 	%f750, %f466, %f467;
	bra.uni 	$L__BB0_193;
$L__BB0_72:                             // %__nv_fast_fdividef.exit.i.i.i2431
	div.approx.f32 	%f450, %f750, %f703;
	cvt.rzi.f32.f32 	%f748, %f450;
	fma.rn.f32 	%f171, %f748, 0fC0000000, %f750;
	mov.b32 	%r142, %f171;
	setp.lt.u32 	%p127, %r142, 1073741824;
	@%p127 bra 	$L__BB0_188;
// %bb.73:
	setp.lt.u32 	%p128, %r142, -2147483647;
	@%p128 bra 	$L__BB0_186;
// %bb.74:
	add.f32 	%f455, %f748, 0fBF800000;
	setp.lt.f32 	%p131, %f171, 0fC0000000;
	add.f32 	%f456, %f455, 0fBF800000;
	selp.f32 	%f748, %f456, %f455, %p131;
	bra.uni 	$L__BB0_188;
$L__BB0_186:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p129, %f171, 0f40800000;
	@%p129 bra 	$L__BB0_188;
// %bb.187:                             // %__nv_fmaf_rn.exit.i.i.i2435
	add.f32 	%f451, %f748, 0f3F800000;
	fma.rn.f32 	%f453, %f703, 0fC0400000, %f171;
	setp.ge.f32 	%p130, %f453, 0f00000000;
	add.f32 	%f454, %f451, 0f3F800000;
	selp.f32 	%f748, %f454, %f451, %p130;
$L__BB0_188:                            // %__internal_fmodf_fastpath_quot.exit.i.i2438
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_193:                            // %__internal_fmodf_kernel.exit.i2457
	abs.f32 	%f468, %f750;
	setp.gtu.f32 	%p137, %f468, 0f7F800000;
	@%p137 bra 	$L__BB0_195;
// %bb.194:
	mov.b32 	%r421, %f750;
	or.b32  	%r422, %r137, %r421;
	mov.b32 	%f750, %r422;
$L__BB0_195:                            // %__nv_fmodf.exit2458
	@%p44 bra 	$L__BB0_86;
// %bb.75:
	@%p345 bra 	$L__BB0_82;
	bra.uni 	$L__BB0_76;
$L__BB0_82:
	mov.b32 	%r50, %f726;
	and.b32  	%r437, %r50, 8388607;
	or.b32  	%r3447, %r437, 1065353216;
	mov.b32 	%f725, %r3447;
	add.s32 	%r438, %r50, -1073741824;
	and.b32  	%r3448, %r438, -8388608;
	setp.eq.s32 	%p152, %r3448, 0;
	@%p152 bra 	$L__BB0_85;
// %bb.83:                              // %__nv_fmaf_rn.exit4.i.i.i2483.preheader
	mov.f32 	%f510, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f509,%f510;
	// end inline asm
$L__BB0_84:                             // %__nv_fmaf_rn.exit4.i.i.i2483
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r439, %r3448, 192937984;
	add.s32 	%r440, %r3447, %r439;
	mov.b32 	%f511, %r440;
	mul.f32 	%f512, %f509, %f511;
	sub.f32 	%f513, %f511, %f512;
	fma.rn.f32 	%f514, %f513, %f509, %f512;
	sub.f32 	%f515, %f511, %f514;
	fma.rz.f32 	%f516, %f515, %f509, %f514;
	cvt.rzi.f32.f32 	%f517, %f516;
	sub.f32 	%f725, %f511, %f517;
	sub.s32 	%r3448, %r3448, %r439;
	mov.b32 	%r3447, %f725;
	setp.ne.s32 	%p153, %r3448, 0;
	setp.ne.s32 	%p154, %r3447, 0;
	and.pred  	%p155, %p153, %p154;
	@%p155 bra 	$L__BB0_84;
$L__BB0_85:                             // %__internal_fmodf_slowpath_mod.exit.i.i2485
	setp.gt.u32 	%p156, %r50, 2139095039;
	selp.f32 	%f518, 0f7FFFFFFF, 0f4B800000, %p156;
	mul.f32 	%f519, %f725, 0f34000000;
	mul.f32 	%f726, %f518, %f519;
	bra.uni 	$L__BB0_86;
$L__BB0_76:                             // %__nv_fast_fdividef.exit.i.i.i2462
	div.approx.f32 	%f502, %f726, %f703;
	cvt.rzi.f32.f32 	%f724, %f502;
	fma.rn.f32 	%f80, %f724, 0fC0000000, %f726;
	mov.b32 	%r49, %f80;
	setp.lt.u32 	%p147, %r49, 1073741824;
	@%p147 bra 	$L__BB0_81;
// %bb.77:
	setp.lt.u32 	%p148, %r49, -2147483647;
	@%p148 bra 	$L__BB0_79;
// %bb.78:
	add.f32 	%f507, %f724, 0fBF800000;
	setp.lt.f32 	%p151, %f80, 0fC0000000;
	add.f32 	%f508, %f507, 0fBF800000;
	selp.f32 	%f724, %f508, %f507, %p151;
	bra.uni 	$L__BB0_81;
$L__BB0_79:
	add.f32 	%f724, %f724, 0f3F800000;
	setp.ltu.f32 	%p149, %f80, 0f40800000;
	@%p149 bra 	$L__BB0_81;
// %bb.80:                              // %__nv_fmaf_rn.exit.i.i.i2466
	add.f32 	%f503, %f724, 0f3F800000;
	fma.rn.f32 	%f505, %f703, 0fC0400000, %f80;
	setp.ge.f32 	%p150, %f505, 0f00000000;
	add.f32 	%f506, %f503, 0f3F800000;
	selp.f32 	%f724, %f506, %f503, %p150;
$L__BB0_81:                             // %__internal_fmodf_fastpath_quot.exit.i.i2469
	fma.rn.f32 	%f726, %f724, 0fC0000000, %f726;
$L__BB0_86:                             // %__internal_fmodf_kernel.exit.i2488
	abs.f32 	%f520, %f726;
	setp.gtu.f32 	%p157, %f520, 0f7F800000;
	@%p157 bra 	$L__BB0_88;
// %bb.87:
	mov.b32 	%r441, %f726;
	or.b32  	%r442, %r15, %r441;
	mov.b32 	%f726, %r442;
$L__BB0_88:                             // %__nv_fmodf.exit2489
	@%p64 bra 	$L__BB0_100;
// %bb.89:
	@%p346 bra 	$L__BB0_96;
	bra.uni 	$L__BB0_90;
$L__BB0_96:
	mov.b32 	%r58, %f730;
	and.b32  	%r451, %r58, 8388607;
	or.b32  	%r3449, %r451, 1065353216;
	mov.b32 	%f729, %r3449;
	add.s32 	%r452, %r58, -1073741824;
	and.b32  	%r3450, %r452, -8388608;
	setp.eq.s32 	%p172, %r3450, 0;
	@%p172 bra 	$L__BB0_99;
// %bb.97:                              // %__nv_fmaf_rn.exit4.i.i.i2514.preheader
	mov.f32 	%f560, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f559,%f560;
	// end inline asm
$L__BB0_98:                             // %__nv_fmaf_rn.exit4.i.i.i2514
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r453, %r3450, 192937984;
	add.s32 	%r454, %r3449, %r453;
	mov.b32 	%f561, %r454;
	mul.f32 	%f562, %f559, %f561;
	sub.f32 	%f563, %f561, %f562;
	fma.rn.f32 	%f564, %f563, %f559, %f562;
	sub.f32 	%f565, %f561, %f564;
	fma.rz.f32 	%f566, %f565, %f559, %f564;
	cvt.rzi.f32.f32 	%f567, %f566;
	sub.f32 	%f729, %f561, %f567;
	sub.s32 	%r3450, %r3450, %r453;
	mov.b32 	%r3449, %f729;
	setp.ne.s32 	%p173, %r3450, 0;
	setp.ne.s32 	%p174, %r3449, 0;
	and.pred  	%p175, %p173, %p174;
	@%p175 bra 	$L__BB0_98;
$L__BB0_99:                             // %__internal_fmodf_slowpath_mod.exit.i.i2516
	setp.gt.u32 	%p176, %r58, 2139095039;
	selp.f32 	%f568, 0f7FFFFFFF, 0f4B800000, %p176;
	mul.f32 	%f569, %f729, 0f34000000;
	mul.f32 	%f730, %f568, %f569;
	bra.uni 	$L__BB0_100;
$L__BB0_90:                             // %__nv_fast_fdividef.exit.i.i.i2493
	div.approx.f32 	%f552, %f730, %f703;
	cvt.rzi.f32.f32 	%f728, %f552;
	fma.rn.f32 	%f97, %f728, 0fC0000000, %f730;
	mov.b32 	%r57, %f97;
	setp.lt.u32 	%p167, %r57, 1073741824;
	@%p167 bra 	$L__BB0_95;
// %bb.91:
	setp.lt.u32 	%p168, %r57, -2147483647;
	@%p168 bra 	$L__BB0_93;
// %bb.92:
	add.f32 	%f557, %f728, 0fBF800000;
	setp.lt.f32 	%p171, %f97, 0fC0000000;
	add.f32 	%f558, %f557, 0fBF800000;
	selp.f32 	%f728, %f558, %f557, %p171;
	bra.uni 	$L__BB0_95;
$L__BB0_93:
	add.f32 	%f728, %f728, 0f3F800000;
	setp.ltu.f32 	%p169, %f97, 0f40800000;
	@%p169 bra 	$L__BB0_95;
// %bb.94:                              // %__nv_fmaf_rn.exit.i.i.i2497
	add.f32 	%f553, %f728, 0f3F800000;
	fma.rn.f32 	%f555, %f703, 0fC0400000, %f97;
	setp.ge.f32 	%p170, %f555, 0f00000000;
	add.f32 	%f556, %f553, 0f3F800000;
	selp.f32 	%f728, %f556, %f553, %p170;
$L__BB0_95:                             // %__internal_fmodf_fastpath_quot.exit.i.i2500
	fma.rn.f32 	%f730, %f728, 0fC0000000, %f730;
$L__BB0_100:                            // %__internal_fmodf_kernel.exit.i2519
	abs.f32 	%f570, %f730;
	setp.gtu.f32 	%p177, %f570, 0f7F800000;
	@%p177 bra 	$L__BB0_102;
// %bb.101:
	mov.b32 	%r455, %f730;
	or.b32  	%r456, %r24, %r455;
	mov.b32 	%f730, %r456;
$L__BB0_102:                            // %__nv_fmodf.exit2520
	@%p84 bra 	$L__BB0_114;
// %bb.103:
	@%p347 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_104;
$L__BB0_110:
	mov.b32 	%r68, %f734;
	and.b32  	%r471, %r68, 8388607;
	or.b32  	%r3451, %r471, 1065353216;
	mov.b32 	%f733, %r3451;
	add.s32 	%r472, %r68, -1073741824;
	and.b32  	%r3452, %r472, -8388608;
	setp.eq.s32 	%p192, %r3452, 0;
	@%p192 bra 	$L__BB0_113;
// %bb.111:                             // %__nv_fmaf_rn.exit4.i.i.i2545.preheader
	mov.f32 	%f612, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f611,%f612;
	// end inline asm
$L__BB0_112:                            // %__nv_fmaf_rn.exit4.i.i.i2545
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r473, %r3452, 192937984;
	add.s32 	%r474, %r3451, %r473;
	mov.b32 	%f613, %r474;
	mul.f32 	%f614, %f611, %f613;
	sub.f32 	%f615, %f613, %f614;
	fma.rn.f32 	%f616, %f615, %f611, %f614;
	sub.f32 	%f617, %f613, %f616;
	fma.rz.f32 	%f618, %f617, %f611, %f616;
	cvt.rzi.f32.f32 	%f619, %f618;
	sub.f32 	%f733, %f613, %f619;
	sub.s32 	%r3452, %r3452, %r473;
	mov.b32 	%r3451, %f733;
	setp.ne.s32 	%p193, %r3452, 0;
	setp.ne.s32 	%p194, %r3451, 0;
	and.pred  	%p195, %p193, %p194;
	@%p195 bra 	$L__BB0_112;
$L__BB0_113:                            // %__internal_fmodf_slowpath_mod.exit.i.i2547
	setp.gt.u32 	%p196, %r68, 2139095039;
	selp.f32 	%f620, 0f7FFFFFFF, 0f4B800000, %p196;
	mul.f32 	%f621, %f733, 0f34000000;
	mul.f32 	%f734, %f620, %f621;
	bra.uni 	$L__BB0_114;
$L__BB0_104:                            // %__nv_fast_fdividef.exit.i.i.i2524
	div.approx.f32 	%f604, %f734, %f703;
	cvt.rzi.f32.f32 	%f732, %f604;
	fma.rn.f32 	%f112, %f732, 0fC0000000, %f734;
	mov.b32 	%r67, %f112;
	setp.lt.u32 	%p187, %r67, 1073741824;
	@%p187 bra 	$L__BB0_109;
// %bb.105:
	setp.lt.u32 	%p188, %r67, -2147483647;
	@%p188 bra 	$L__BB0_107;
// %bb.106:
	add.f32 	%f609, %f732, 0fBF800000;
	setp.lt.f32 	%p191, %f112, 0fC0000000;
	add.f32 	%f610, %f609, 0fBF800000;
	selp.f32 	%f732, %f610, %f609, %p191;
	bra.uni 	$L__BB0_109;
$L__BB0_107:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p189, %f112, 0f40800000;
	@%p189 bra 	$L__BB0_109;
// %bb.108:                             // %__nv_fmaf_rn.exit.i.i.i2528
	add.f32 	%f605, %f732, 0f3F800000;
	fma.rn.f32 	%f607, %f703, 0fC0400000, %f112;
	setp.ge.f32 	%p190, %f607, 0f00000000;
	add.f32 	%f608, %f605, 0f3F800000;
	selp.f32 	%f732, %f608, %f605, %p190;
$L__BB0_109:                            // %__internal_fmodf_fastpath_quot.exit.i.i2531
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_114:                            // %__internal_fmodf_kernel.exit.i2550
	abs.f32 	%f622, %f734;
	setp.gtu.f32 	%p197, %f622, 0f7F800000;
	@%p197 bra 	$L__BB0_116;
// %bb.115:
	mov.b32 	%r475, %f734;
	or.b32  	%r476, %r36, %r475;
	mov.b32 	%f734, %r476;
$L__BB0_116:                            // %__nv_fmodf.exit2551
	add.f32 	%f623, %f734, %f734;
	mov.b32 	%r477, %f623;
	and.b32  	%r478, %r477, -2147483648;
	or.b32  	%r479, %r478, 1056964608;
	mov.b32 	%f624, %r479;
	add.f32 	%f625, %f623, %f624;
	cvt.rzi.f32.f32 	%f626, %f625;
	abs.f32 	%f627, %f623;
	setp.gt.f32 	%p199, %f627, 0f4B000000;
	selp.f32 	%f628, %f623, %f626, %p199;
	cvt.rzi.f32.f32 	%f629, %f623;
	setp.lt.f32 	%p200, %f627, 0f3F000000;
	selp.f32 	%f630, %f629, %f628, %p200;
	cvt.rzi.s32.f32 	%r480, %f630;
	fma.rn.f32 	%f631, %f630, 0fBF000000, %f734;
	mul.f32 	%f632, %f631, %f631;
	fma.rn.f32 	%f633, %f632, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f634, %f632, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f635, %f633, %f632, 0fC0A55DF6;
	fma.rn.f32 	%f636, %f634, %f632, 0f4081E0CF;
	fma.rn.f32 	%f637, %f632, %f631, 0f00000000;
	fma.rn.f32 	%f638, %f636, %f632, 0fC09DE9E6;
	fma.rn.f32 	%f639, %f635, %f637, 0f00000000;
	fma.rn.f32 	%f640, %f638, %f632, 0f3F800000;
	fma.rn.f32 	%f641, %f631, 0f40490FDB, %f639;
	and.b32  	%r481, %r480, 1;
	setp.eq.b32 	%p201, %r481, 1;
	selp.f32 	%f642, %f640, %f641, %p201;
	selp.f32 	%f643, %f641, %f640, %p201;
	and.b32  	%r482, %r480, 2;
	setp.eq.s32 	%p202, %r482, 0;
	neg.f32 	%f644, %f642;
	selp.f32 	%f645, %f642, %f644, %p202;
	add.s32 	%r483, %r480, 1;
	and.b32  	%r484, %r483, 2;
	setp.eq.s32 	%p203, %r484, 0;
	sub.f32 	%f647, %f230, %f643;
	cvt.rzi.f32.f32 	%f649, %f734;
	setp.eq.f32 	%p204, %f649, %f734;
	mul.f32 	%f650, %f734, 0f00000000;
	selp.f32 	%f148, %f650, %f645, %p204;
	abs.f32 	%f651, %f734;
	@%p104 bra 	$L__BB0_128;
// %bb.117:
	@%p348 bra 	$L__BB0_124;
	bra.uni 	$L__BB0_118;
$L__BB0_124:
	mov.b32 	%r76, %f738;
	and.b32  	%r485, %r76, 8388607;
	or.b32  	%r3453, %r485, 1065353216;
	mov.b32 	%f737, %r3453;
	add.s32 	%r486, %r76, -1073741824;
	and.b32  	%r3454, %r486, -8388608;
	setp.eq.s32 	%p212, %r3454, 0;
	@%p212 bra 	$L__BB0_127;
// %bb.125:                             // %__nv_fmaf_rn.exit4.i.i.i2576.preheader
	mov.f32 	%f662, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f661,%f662;
	// end inline asm
$L__BB0_126:                            // %__nv_fmaf_rn.exit4.i.i.i2576
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r487, %r3454, 192937984;
	add.s32 	%r488, %r3453, %r487;
	mov.b32 	%f663, %r488;
	mul.f32 	%f664, %f661, %f663;
	sub.f32 	%f665, %f663, %f664;
	fma.rn.f32 	%f666, %f665, %f661, %f664;
	sub.f32 	%f667, %f663, %f666;
	fma.rz.f32 	%f668, %f667, %f661, %f666;
	cvt.rzi.f32.f32 	%f669, %f668;
	sub.f32 	%f737, %f663, %f669;
	sub.s32 	%r3454, %r3454, %r487;
	mov.b32 	%r3453, %f737;
	setp.ne.s32 	%p213, %r3454, 0;
	setp.ne.s32 	%p214, %r3453, 0;
	and.pred  	%p215, %p213, %p214;
	@%p215 bra 	$L__BB0_126;
$L__BB0_127:                            // %__internal_fmodf_slowpath_mod.exit.i.i2578
	setp.gt.u32 	%p216, %r76, 2139095039;
	selp.f32 	%f670, 0f7FFFFFFF, 0f4B800000, %p216;
	mul.f32 	%f671, %f737, 0f34000000;
	mul.f32 	%f738, %f670, %f671;
	bra.uni 	$L__BB0_128;
$L__BB0_118:                            // %__nv_fast_fdividef.exit.i.i.i2555
	div.approx.f32 	%f654, %f738, %f703;
	cvt.rzi.f32.f32 	%f736, %f654;
	fma.rn.f32 	%f129, %f736, 0fC0000000, %f738;
	mov.b32 	%r75, %f129;
	setp.lt.u32 	%p207, %r75, 1073741824;
	@%p207 bra 	$L__BB0_123;
// %bb.119:
	setp.lt.u32 	%p208, %r75, -2147483647;
	@%p208 bra 	$L__BB0_121;
// %bb.120:
	add.f32 	%f659, %f736, 0fBF800000;
	setp.lt.f32 	%p211, %f129, 0fC0000000;
	add.f32 	%f660, %f659, 0fBF800000;
	selp.f32 	%f736, %f660, %f659, %p211;
	bra.uni 	$L__BB0_123;
$L__BB0_121:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p209, %f129, 0f40800000;
	@%p209 bra 	$L__BB0_123;
// %bb.122:                             // %__nv_fmaf_rn.exit.i.i.i2559
	add.f32 	%f655, %f736, 0f3F800000;
	fma.rn.f32 	%f657, %f703, 0fC0400000, %f129;
	setp.ge.f32 	%p210, %f657, 0f00000000;
	add.f32 	%f658, %f655, 0f3F800000;
	selp.f32 	%f736, %f658, %f655, %p210;
$L__BB0_123:                            // %__internal_fmodf_fastpath_quot.exit.i.i2562
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_128:                            // %__internal_fmodf_kernel.exit.i2581
	selp.f32 	%f648, %f643, %f647, %p203;
	setp.gt.f32 	%p205, %f651, 0f4B800000;
	add.f32 	%f652, %f148, 0f3F800000;
	abs.f32 	%f672, %f738;
	setp.gtu.f32 	%p217, %f672, 0f7F800000;
	@%p217 bra 	$L__BB0_130;
// %bb.129:
	mov.b32 	%r489, %f738;
	or.b32  	%r490, %r45, %r489;
	mov.b32 	%f738, %r490;
$L__BB0_130:                            // %__nv_fmodf.exit2582
	selp.f32 	%f127, %f652, %f648, %p205;
	add.f32 	%f673, %f738, %f738;
	mov.b32 	%r491, %f673;
	and.b32  	%r492, %r491, -2147483648;
	or.b32  	%r493, %r492, 1056964608;
	mov.b32 	%f674, %r493;
	add.f32 	%f675, %f673, %f674;
	cvt.rzi.f32.f32 	%f676, %f675;
	abs.f32 	%f677, %f673;
	setp.gt.f32 	%p219, %f677, 0f4B000000;
	selp.f32 	%f678, %f673, %f676, %p219;
	cvt.rzi.f32.f32 	%f679, %f673;
	setp.lt.f32 	%p220, %f677, 0f3F000000;
	selp.f32 	%f680, %f679, %f678, %p220;
	cvt.rzi.s32.f32 	%r494, %f680;
	fma.rn.f32 	%f681, %f680, 0fBF000000, %f738;
	mul.f32 	%f682, %f681, %f681;
	fma.rn.f32 	%f683, %f682, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f684, %f682, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f685, %f683, %f682, 0fC0A55DF6;
	fma.rn.f32 	%f686, %f684, %f682, 0f4081E0CF;
	fma.rn.f32 	%f687, %f682, %f681, 0f00000000;
	fma.rn.f32 	%f688, %f686, %f682, 0fC09DE9E6;
	fma.rn.f32 	%f689, %f685, %f687, 0f00000000;
	fma.rn.f32 	%f690, %f688, %f682, 0f3F800000;
	fma.rn.f32 	%f691, %f681, 0f40490FDB, %f689;
	and.b32  	%r495, %r494, 1;
	setp.eq.b32 	%p221, %r495, 1;
	selp.f32 	%f692, %f690, %f691, %p221;
	selp.f32 	%f693, %f691, %f690, %p221;
	and.b32  	%r496, %r494, 2;
	setp.eq.s32 	%p222, %r496, 0;
	neg.f32 	%f694, %f692;
	selp.f32 	%f695, %f692, %f694, %p222;
	add.s32 	%r497, %r494, 1;
	and.b32  	%r498, %r497, 2;
	setp.eq.s32 	%p223, %r498, 0;
	sub.f32 	%f697, %f230, %f693;
	selp.f32 	%f698, %f693, %f697, %p223;
	cvt.rzi.f32.f32 	%f699, %f738;
	setp.eq.f32 	%p224, %f699, %f738;
	mul.f32 	%f700, %f738, 0f00000000;
	selp.f32 	%f150, %f700, %f695, %p224;
	abs.f32 	%f701, %f738;
	setp.gt.f32 	%p225, %f701, 0f4B800000;
	add.f32 	%f702, %f150, 0f3F800000;
	selp.f32 	%f144, %f702, %f698, %p225;
	mov.f32 	%f147, %f127;
	mov.f32 	%f149, %f144;
	@%p124 bra 	$L__BB0_132;
// %bb.131:                             // %L981
	neg.f32 	%f149, %f150;
	neg.f32 	%f147, %f148;
	mov.f32 	%f148, %f127;
	mov.f32 	%f150, %f144;
$L__BB0_132:                            // %L983
	setp.gt.u32 	%p226, %r5, 15;
	mov.u32 	%r152, 999999999;
	@%p226 bra 	$L__BB0_197;
// %bb.133:                             // %L1013
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	shl.b32 	%r506, %r5, 4;
	and.b32  	%r507, %r506, 240;
	or.b32  	%r508, %r507, %r3;
	mul.wide.u32 	%rd68, %r508, 4;
	add.s64 	%rd69, %rd1, %rd68;
	ld.global.u32 	%r509, [%rd69];
	shl.b32 	%r510, %r509, 16;
	cvt.s32.s16 	%r85, %r509;
	shr.s32 	%r86, %r509, 16;
	or.b32  	%r511, %r510, 65535;
	setp.lt.u32 	%p227, %r511, 1114111;
	setp.lt.u32 	%p228, %r509, 1048576;
	and.pred  	%p229, %p227, %p228;
	@%p229 bra 	$L__BB0_196;
	bra.uni 	$L__BB0_134;
$L__BB0_196:                            // %L1255
	mul.lo.s32 	%r515, %r86, 546;
	mad.lo.s32 	%r152, %r85, 33, %r515;
$L__BB0_197:                            // %pass537
	add.f32 	%f207, %f746, %f746;
	mov.b32 	%r332, %f207;
	add.f32 	%f469, %f750, %f750;
	and.b32  	%r333, %r332, -2147483648;
	add.f32 	%f261, %f706, %f706;
	add.f32 	%f313, %f710, %f710;
	mov.b32 	%r429, %f469;
	or.b32  	%r334, %r333, 1056964608;
	mov.b32 	%r348, %f261;
	mov.b32 	%r370, %f313;
	and.b32  	%r430, %r429, -2147483648;
	add.f32 	%f521, %f726, %f726;
	add.f32 	%f571, %f730, %f730;
	mov.b32 	%f208, %r334;
	and.b32  	%r349, %r348, -2147483648;
	and.b32  	%r371, %r370, -2147483648;
	or.b32  	%r431, %r430, 1056964608;
	mov.b32 	%r443, %f521;
	mov.b32 	%r463, %f571;
	add.f32 	%f209, %f207, %f208;
	abs.f32 	%f211, %f207;
	or.b32  	%r350, %r349, 1056964608;
	or.b32  	%r372, %r371, 1056964608;
	mov.b32 	%f470, %r431;
	and.b32  	%r444, %r443, -2147483648;
	and.b32  	%r464, %r463, -2147483648;
	cvt.rzi.f32.f32 	%f210, %f209;
	setp.gt.f32 	%p37, %f211, 0f4B000000;
	mov.b32 	%f262, %r350;
	mov.b32 	%f314, %r372;
	add.f32 	%f471, %f469, %f470;
	abs.f32 	%f473, %f469;
	or.b32  	%r445, %r444, 1056964608;
	or.b32  	%r465, %r464, 1056964608;
	selp.f32 	%f212, %f207, %f210, %p37;
	cvt.rzi.f32.f32 	%f213, %f207;
	setp.lt.f32 	%p38, %f211, 0f3F000000;
	add.f32 	%f263, %f261, %f262;
	abs.f32 	%f265, %f261;
	add.f32 	%f315, %f313, %f314;
	abs.f32 	%f317, %f313;
	cvt.rzi.f32.f32 	%f472, %f471;
	setp.gt.f32 	%p139, %f473, 0f4B000000;
	mov.b32 	%f522, %r445;
	mov.b32 	%f572, %r465;
	selp.f32 	%f214, %f213, %f212, %p38;
	cvt.rzi.f32.f32 	%f264, %f263;
	setp.gt.f32 	%p57, %f265, 0f4B000000;
	cvt.rzi.f32.f32 	%f316, %f315;
	setp.gt.f32 	%p77, %f317, 0f4B000000;
	selp.f32 	%f474, %f469, %f472, %p139;
	cvt.rzi.f32.f32 	%f475, %f469;
	setp.lt.f32 	%p140, %f473, 0f3F000000;
	add.f32 	%f523, %f521, %f522;
	abs.f32 	%f525, %f521;
	add.f32 	%f573, %f571, %f572;
	abs.f32 	%f575, %f571;
	fma.rn.f32 	%f215, %f214, 0fBF000000, %f746;
	selp.f32 	%f266, %f261, %f264, %p57;
	cvt.rzi.f32.f32 	%f267, %f261;
	setp.lt.f32 	%p58, %f265, 0f3F000000;
	selp.f32 	%f318, %f313, %f316, %p77;
	cvt.rzi.f32.f32 	%f319, %f313;
	setp.lt.f32 	%p78, %f317, 0f3F000000;
	selp.f32 	%f476, %f475, %f474, %p140;
	cvt.rzi.f32.f32 	%f524, %f523;
	setp.gt.f32 	%p159, %f525, 0f4B000000;
	cvt.rzi.f32.f32 	%f574, %f573;
	setp.gt.f32 	%p179, %f575, 0f4B000000;
	mul.f32 	%f216, %f215, %f215;
	selp.f32 	%f268, %f267, %f266, %p58;
	selp.f32 	%f320, %f319, %f318, %p78;
	fma.rn.f32 	%f477, %f476, 0fBF000000, %f750;
	selp.f32 	%f526, %f521, %f524, %p159;
	cvt.rzi.f32.f32 	%f527, %f521;
	setp.lt.f32 	%p160, %f525, 0f3F000000;
	selp.f32 	%f576, %f571, %f574, %p179;
	cvt.rzi.f32.f32 	%f577, %f571;
	setp.lt.f32 	%p180, %f575, 0f3F000000;
	fma.rn.f32 	%f217, %f216, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f218, %f216, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f269, %f268, 0fBF000000, %f706;
	fma.rn.f32 	%f321, %f320, 0fBF000000, %f710;
	mul.f32 	%f478, %f477, %f477;
	selp.f32 	%f528, %f527, %f526, %p160;
	selp.f32 	%f578, %f577, %f576, %p180;
	cvt.rzi.s32.f32 	%r335, %f214;
	fma.rn.f32 	%f219, %f217, %f216, 0fC0A55DF6;
	fma.rn.f32 	%f220, %f218, %f216, 0f4081E0CF;
	fma.rn.f32 	%f221, %f216, %f215, 0f00000000;
	mul.f32 	%f270, %f269, %f269;
	mul.f32 	%f322, %f321, %f321;
	fma.rn.f32 	%f479, %f478, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f480, %f478, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f529, %f528, 0fBF000000, %f726;
	fma.rn.f32 	%f579, %f578, 0fBF000000, %f730;
	fma.rn.f32 	%f222, %f220, %f216, 0fC09DE9E6;
	fma.rn.f32 	%f223, %f219, %f221, 0f00000000;
	and.b32  	%r336, %r335, 1;
	fma.rn.f32 	%f271, %f270, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f272, %f270, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f323, %f322, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f324, %f322, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r432, %f476;
	fma.rn.f32 	%f481, %f479, %f478, 0fC0A55DF6;
	fma.rn.f32 	%f482, %f480, %f478, 0f4081E0CF;
	fma.rn.f32 	%f483, %f478, %f477, 0f00000000;
	mul.f32 	%f530, %f529, %f529;
	mul.f32 	%f580, %f579, %f579;
	fma.rn.f32 	%f224, %f222, %f216, 0f3F800000;
	fma.rn.f32 	%f225, %f215, 0f40490FDB, %f223;
	setp.eq.b32 	%p39, %r336, 1;
	cvt.rzi.s32.f32 	%r351, %f268;
	fma.rn.f32 	%f273, %f271, %f270, 0fC0A55DF6;
	fma.rn.f32 	%f274, %f272, %f270, 0f4081E0CF;
	fma.rn.f32 	%f275, %f270, %f269, 0f00000000;
	cvt.rzi.s32.f32 	%r373, %f320;
	fma.rn.f32 	%f325, %f323, %f322, 0fC0A55DF6;
	fma.rn.f32 	%f326, %f324, %f322, 0f4081E0CF;
	fma.rn.f32 	%f327, %f322, %f321, 0f00000000;
	fma.rn.f32 	%f484, %f482, %f478, 0fC09DE9E6;
	fma.rn.f32 	%f485, %f481, %f483, 0f00000000;
	and.b32  	%r433, %r432, 1;
	fma.rn.f32 	%f531, %f530, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f532, %f530, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f581, %f580, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f582, %f580, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f226, %f224, %f225, %p39;
	and.b32  	%r337, %r335, 2;
	fma.rn.f32 	%f276, %f274, %f270, 0fC09DE9E6;
	fma.rn.f32 	%f277, %f273, %f275, 0f00000000;
	and.b32  	%r352, %r351, 1;
	fma.rn.f32 	%f328, %f326, %f322, 0fC09DE9E6;
	fma.rn.f32 	%f329, %f325, %f327, 0f00000000;
	and.b32  	%r374, %r373, 1;
	fma.rn.f32 	%f486, %f484, %f478, 0f3F800000;
	fma.rn.f32 	%f487, %f477, 0f40490FDB, %f485;
	setp.eq.b32 	%p141, %r433, 1;
	cvt.rzi.s32.f32 	%r446, %f528;
	fma.rn.f32 	%f533, %f531, %f530, 0fC0A55DF6;
	fma.rn.f32 	%f534, %f532, %f530, 0f4081E0CF;
	fma.rn.f32 	%f535, %f530, %f529, 0f00000000;
	cvt.rzi.s32.f32 	%r466, %f578;
	fma.rn.f32 	%f583, %f581, %f580, 0fC0A55DF6;
	fma.rn.f32 	%f584, %f582, %f580, 0f4081E0CF;
	fma.rn.f32 	%f585, %f580, %f579, 0f00000000;
	setp.eq.s32 	%p40, %r337, 0;
	neg.f32 	%f228, %f226;
	add.s32 	%r338, %r335, 1;
	cvt.rzi.f32.f32 	%f233, %f746;
	fma.rn.f32 	%f278, %f276, %f270, 0f3F800000;
	fma.rn.f32 	%f279, %f269, 0f40490FDB, %f277;
	setp.eq.b32 	%p59, %r352, 1;
	fma.rn.f32 	%f330, %f328, %f322, 0f3F800000;
	fma.rn.f32 	%f331, %f321, 0f40490FDB, %f329;
	setp.eq.b32 	%p79, %r374, 1;
	selp.f32 	%f488, %f486, %f487, %p141;
	and.b32  	%r434, %r432, 2;
	fma.rn.f32 	%f536, %f534, %f530, 0fC09DE9E6;
	fma.rn.f32 	%f537, %f533, %f535, 0f00000000;
	and.b32  	%r447, %r446, 1;
	fma.rn.f32 	%f586, %f584, %f580, 0fC09DE9E6;
	fma.rn.f32 	%f587, %f583, %f585, 0f00000000;
	and.b32  	%r467, %r466, 1;
	selp.f32 	%f227, %f225, %f224, %p39;
	selp.f32 	%f229, %f226, %f228, %p40;
	and.b32  	%r339, %r338, 2;
	setp.eq.f32 	%p42, %f233, %f746;
	mul.f32 	%f234, %f746, 0f00000000;
	selp.f32 	%f280, %f278, %f279, %p59;
	and.b32  	%r353, %r351, 2;
	selp.f32 	%f332, %f330, %f331, %p79;
	and.b32  	%r375, %r373, 2;
	setp.eq.s32 	%p142, %r434, 0;
	neg.f32 	%f490, %f488;
	add.s32 	%r435, %r432, 1;
	cvt.rzi.f32.f32 	%f495, %f750;
	fma.rn.f32 	%f538, %f536, %f530, 0f3F800000;
	fma.rn.f32 	%f539, %f529, 0f40490FDB, %f537;
	setp.eq.b32 	%p161, %r447, 1;
	fma.rn.f32 	%f588, %f586, %f580, 0f3F800000;
	fma.rn.f32 	%f589, %f579, 0f40490FDB, %f587;
	setp.eq.b32 	%p181, %r467, 1;
	setp.eq.s32 	%p41, %r339, 0;
	sub.f32 	%f231, %f230, %f227;
	selp.f32 	%f235, %f234, %f229, %p42;
	abs.f32 	%f236, %f746;
	setp.eq.s32 	%p60, %r353, 0;
	neg.f32 	%f282, %f280;
	add.s32 	%r354, %r351, 1;
	cvt.rzi.f32.f32 	%f287, %f706;
	setp.eq.s32 	%p80, %r375, 0;
	neg.f32 	%f334, %f332;
	add.s32 	%r376, %r373, 1;
	cvt.rzi.f32.f32 	%f339, %f710;
	selp.f32 	%f489, %f487, %f486, %p141;
	selp.f32 	%f491, %f488, %f490, %p142;
	and.b32  	%r436, %r435, 2;
	setp.eq.f32 	%p144, %f495, %f750;
	mul.f32 	%f496, %f750, 0f00000000;
	selp.f32 	%f540, %f538, %f539, %p161;
	and.b32  	%r448, %r446, 2;
	selp.f32 	%f590, %f588, %f589, %p181;
	and.b32  	%r468, %r466, 2;
	selp.f32 	%f232, %f227, %f231, %p41;
	setp.gt.f32 	%p43, %f236, 0f4B800000;
	add.f32 	%f237, %f235, 0f3F800000;
	selp.f32 	%f281, %f279, %f278, %p59;
	selp.f32 	%f283, %f280, %f282, %p60;
	and.b32  	%r355, %r354, 2;
	setp.eq.f32 	%p62, %f287, %f706;
	mul.f32 	%f288, %f706, 0f00000000;
	selp.f32 	%f333, %f331, %f330, %p79;
	selp.f32 	%f335, %f332, %f334, %p80;
	and.b32  	%r377, %r376, 2;
	setp.eq.f32 	%p82, %f339, %f710;
	mul.f32 	%f340, %f710, 0f00000000;
	setp.eq.s32 	%p143, %r436, 0;
	sub.f32 	%f493, %f230, %f489;
	selp.f32 	%f497, %f496, %f491, %p144;
	abs.f32 	%f498, %f750;
	setp.eq.s32 	%p162, %r448, 0;
	neg.f32 	%f542, %f540;
	add.s32 	%r449, %r446, 1;
	cvt.rzi.f32.f32 	%f547, %f726;
	setp.eq.s32 	%p182, %r468, 0;
	neg.f32 	%f592, %f590;
	add.s32 	%r469, %r466, 1;
	cvt.rzi.f32.f32 	%f597, %f730;
	selp.f32 	%f238, %f237, %f232, %p43;
	setp.eq.s32 	%p61, %r355, 0;
	sub.f32 	%f285, %f230, %f281;
	selp.f32 	%f16, %f288, %f283, %p62;
	abs.f32 	%f289, %f706;
	setp.eq.s32 	%p81, %r377, 0;
	sub.f32 	%f337, %f230, %f333;
	selp.f32 	%f341, %f340, %f335, %p82;
	abs.f32 	%f342, %f710;
	selp.f32 	%f494, %f489, %f493, %p143;
	setp.gt.f32 	%p145, %f498, 0f4B800000;
	add.f32 	%f499, %f497, 0f3F800000;
	selp.f32 	%f541, %f539, %f538, %p161;
	selp.f32 	%f543, %f540, %f542, %p162;
	and.b32  	%r450, %r449, 2;
	setp.eq.f32 	%p164, %f547, %f726;
	mul.f32 	%f548, %f726, 0f00000000;
	selp.f32 	%f591, %f589, %f588, %p181;
	selp.f32 	%f593, %f590, %f592, %p182;
	and.b32  	%r470, %r469, 2;
	setp.eq.f32 	%p184, %f597, %f730;
	mul.f32 	%f598, %f730, 0f00000000;
	mov.b32 	%r328, %f238;
	mov.b32 	%r331, %f235;
	selp.f32 	%f286, %f281, %f285, %p61;
	setp.gt.f32 	%p63, %f289, 0f4B800000;
	add.f32 	%f290, %f16, 0f3F800000;
	selp.f32 	%f338, %f333, %f337, %p81;
	setp.gt.f32 	%p83, %f342, 0f4B800000;
	add.f32 	%f343, %f341, 0f3F800000;
	selp.f32 	%f500, %f499, %f494, %p145;
	setp.eq.s32 	%p163, %r450, 0;
	sub.f32 	%f545, %f230, %f541;
	selp.f32 	%f94, %f548, %f543, %p164;
	abs.f32 	%f549, %f726;
	setp.eq.s32 	%p183, %r470, 0;
	sub.f32 	%f595, %f230, %f591;
	selp.f32 	%f599, %f598, %f593, %p184;
	abs.f32 	%f600, %f730;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r327, %r331, -2147483648;
	selp.f32 	%f17, %f290, %f286, %p63;
	selp.f32 	%f344, %f343, %f338, %p83;
	mov.b32 	%r425, %f500;
	mov.b32 	%r428, %f497;
	selp.f32 	%f546, %f541, %f545, %p163;
	setp.gt.f32 	%p165, %f549, 0f4B800000;
	add.f32 	%f550, %f94, 0f3F800000;
	selp.f32 	%f596, %f591, %f595, %p183;
	setp.gt.f32 	%p185, %f600, 0f4B800000;
	add.f32 	%f601, %f599, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r326, %r328, %r327;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r329, %r331, %r328;
	// end inline asm
	mov.b32 	%r366, %f344;
	mov.b32 	%r365, %f17;
	mov.b32 	%r369, %f341;
	mov.b32 	%r368, %f16;
	mov.b32 	%r412, %f75;
	mov.b32 	%r413, %f77;
	mov.b32 	%r415, %f76;
	mov.b32 	%r416, %f78;
	xor.b32  	%r424, %r428, -2147483648;
	selp.f32 	%f95, %f550, %f546, %p165;
	selp.f32 	%f602, %f601, %f596, %p185;
	// begin inline asm
	cvt.rn.f16x2.f32 %r364, %r366, %r365;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r367, %r369, %r368;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r411, %r413, %r412;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r414, %r416, %r415;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r423, %r425, %r424;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r426, %r428, %r425;
	// end inline asm
	mov.b32 	%r459, %f602;
	mov.b32 	%r458, %f95;
	mov.b32 	%r462, %f599;
	mov.b32 	%r461, %f94;
	// begin inline asm
	cvt.rn.f16x2.f32 %r457, %r459, %r458;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r460, %r462, %r461;
	// end inline asm
	mov.b32 	%r500, %f147;
	mov.b32 	%r501, %f149;
	// begin inline asm
	cvt.rn.f16x2.f32 %r499, %r501, %r500;
	// end inline asm
	mov.b32 	%r503, %f148;
	mov.b32 	%r504, %f150;
	// begin inline asm
	cvt.rn.f16x2.f32 %r502, %r504, %r503;
	// end inline asm
	shl.b32 	%r517, %r3, 1;
	shr.u32 	%r518, %r5, 3;
	bfe.u32 	%r519, %r5, 3, 1;
	and.b32  	%r520, %r517, 14;
	or.b32  	%r521, %r520, %r519;
	and.b32  	%r522, %r518, 2;
	and.b32  	%r523, %r128, 1;
	or.b32  	%r524, %r522, %r523;
	shl.b32 	%r525, %r524, 4;
	shl.b32 	%r526, %r5, 6;
	and.b32  	%r527, %r526, 192;
	or.b32  	%r528, %r525, %r521;
	or.b32  	%r529, %r528, %r2;
	or.b32  	%r530, %r529, %r527;
	mul.wide.u32 	%rd75, %r530, 4;
	add.s64 	%rd76, %rd2, %rd75;
	ld.global.u32 	%r153, [%rd76];
	ld.global.u32 	%r154, [%rd76+1024];
	shl.b32 	%r531, %r297, 13;
	shl.b32 	%r532, %r301, 7;
	add.s32 	%r155, %r532, %r531;
	shl.b32 	%r533, %r1, 7;
	shl.b32 	%r534, %r5, 2;
	or.b32  	%r156, %r534, %r533;
	and.b32  	%r157, %r5, 16;
	shr.u32 	%r535, %r5, 4;
	and.b32  	%r536, %r140, 30;
	or.b32  	%r537, %r536, %r535;
	mul.lo.s32 	%r538, %r537, 257;
	and.b32  	%r539, %r4, 224;
	shr.u32 	%r540, %r3, 3;
	mad.lo.s32 	%r541, %r540, 257, %r539;
	or.b32  	%r542, %r540, 2;
	mad.lo.s32 	%r543, %r542, 257, %r539;
	or.b32  	%r544, %r540, 4;
	mad.lo.s32 	%r545, %r544, 257, %r539;
	or.b32  	%r546, %r540, 6;
	mad.lo.s32 	%r547, %r546, 257, %r539;
	or.b32  	%r548, %r540, 8;
	mad.lo.s32 	%r549, %r548, 257, %r539;
	or.b32  	%r550, %r540, 10;
	mad.lo.s32 	%r551, %r550, 257, %r539;
	or.b32  	%r552, %r540, 12;
	mad.lo.s32 	%r553, %r552, 257, %r539;
	or.b32  	%r554, %r540, 14;
	mad.lo.s32 	%r555, %r554, 257, %r539;
	or.b32  	%r556, %r540, 16;
	mad.lo.s32 	%r557, %r556, 257, %r539;
	or.b32  	%r558, %r540, 18;
	mad.lo.s32 	%r559, %r558, 257, %r539;
	or.b32  	%r560, %r540, 20;
	mad.lo.s32 	%r561, %r560, 257, %r539;
	or.b32  	%r562, %r540, 22;
	mad.lo.s32 	%r563, %r562, 257, %r539;
	or.b32  	%r564, %r540, 24;
	mad.lo.s32 	%r565, %r564, 257, %r539;
	or.b32  	%r566, %r540, 26;
	mad.lo.s32 	%r567, %r566, 257, %r539;
	or.b32  	%r568, %r540, 28;
	mad.lo.s32 	%r569, %r568, 257, %r539;
	or.b32  	%r570, %r540, 30;
	mad.lo.s32 	%r571, %r570, 257, %r539;
	mul.lo.s32 	%r572, %r127, 2184;
	mad.lo.s32 	%r573, %r521, 33, %r572;
	mad.lo.s32 	%r574, %r524, 546, %r573;
	setp.lt.u32 	%p230, %r5, 4;
	setp.eq.s32 	%p231, %r128, 4;
	setp.eq.s32 	%p232, %r128, 5;
	bfe.s32 	%r575, %r5, 3, 1;
	and.b32  	%r576, %r5, 8;
	setp.eq.s32 	%p233, %r576, 0;
	and.b32  	%r577, %r575, 4144;
	and.b32  	%r578, %r3, 1;
	neg.s32 	%r579, %r578;
	and.b32  	%r580, %r579, 2064;
	bfe.s32 	%r581, %r3, 1, 1;
	and.b32  	%r582, %r581, 1032;
	bfe.s32 	%r583, %r3, 2, 1;
	and.b32  	%r584, %r583, 516;
	and.b32  	%r585, %r534, 12;
	mad.lo.s32 	%r586, %r540, 258, %r585;
	add.s32 	%r587, %r586, %r580;
	add.s32 	%r588, %r587, %r577;
	add.s32 	%r589, %r588, %r524;
	add.s32 	%r590, %r589, %r582;
	add.s32 	%r591, %r590, %r584;
	mul.wide.u32 	%rd77, %r591, 4;
	mov.u64 	%rd78, shmem;
	add.s64 	%rd7, %rd78, %rd77;
	selp.b32 	%r592, 16, 4160, %p233;
	add.s32 	%r593, %r587, %r592;
	add.s32 	%r594, %r593, %r524;
	add.s32 	%r595, %r594, %r582;
	add.s32 	%r596, %r595, %r584;
	mul.wide.u32 	%rd79, %r596, 4;
	add.s64 	%rd8, %rd78, %rd79;
	shl.b32 	%r597, %r299, 15;
	shl.b32 	%r598, %r303, 9;
	add.s32 	%r599, %r598, %r597;
	or.b32  	%r600, %r4, %r157;
	and.b32  	%r601, %r5, 15;
	or.b32  	%r602, %r601, %r2;
	or.b32  	%r158, %r602, %r600;
	cvt.s64.s32 	%rd9, %r599;
	add.s32 	%r603, %r3, %r538;
	mul.wide.u32 	%rd80, %r603, 4;
	add.s64 	%rd10, %rd78, %rd80;
	cvt.u64.u32 	%rd81, %r3;
	cvt.u64.u32 	%rd11, %r538;
	add.s64 	%rd82, %rd11, %rd81;
	shl.b64 	%rd83, %rd82, 2;
	add.s64 	%rd12, %rd78, %rd83;
	add.s32 	%r604, %r541, %r5;
	mul.wide.u32 	%rd84, %r604, 4;
	add.s64 	%rd13, %rd78, %rd84;
	add.s32 	%r605, %r543, %r5;
	mul.wide.u32 	%rd85, %r605, 4;
	add.s64 	%rd14, %rd78, %rd85;
	add.s32 	%r606, %r545, %r5;
	mul.wide.u32 	%rd86, %r606, 4;
	add.s64 	%rd15, %rd78, %rd86;
	add.s32 	%r607, %r547, %r5;
	mul.wide.u32 	%rd87, %r607, 4;
	add.s64 	%rd16, %rd78, %rd87;
	add.s32 	%r608, %r549, %r5;
	mul.wide.u32 	%rd88, %r608, 4;
	add.s64 	%rd17, %rd78, %rd88;
	add.s32 	%r609, %r551, %r5;
	mul.wide.u32 	%rd89, %r609, 4;
	add.s64 	%rd18, %rd78, %rd89;
	add.s32 	%r610, %r553, %r5;
	mul.wide.u32 	%rd90, %r610, 4;
	add.s64 	%rd19, %rd78, %rd90;
	add.s32 	%r611, %r555, %r5;
	mul.wide.u32 	%rd91, %r611, 4;
	add.s64 	%rd20, %rd78, %rd91;
	add.s32 	%r612, %r557, %r5;
	mul.wide.u32 	%rd92, %r612, 4;
	add.s64 	%rd21, %rd78, %rd92;
	add.s32 	%r613, %r559, %r5;
	mul.wide.u32 	%rd93, %r613, 4;
	add.s64 	%rd22, %rd78, %rd93;
	add.s32 	%r614, %r561, %r5;
	mul.wide.u32 	%rd94, %r614, 4;
	add.s64 	%rd23, %rd78, %rd94;
	add.s32 	%r615, %r563, %r5;
	mul.wide.u32 	%rd95, %r615, 4;
	add.s64 	%rd24, %rd78, %rd95;
	add.s32 	%r616, %r565, %r5;
	mul.wide.u32 	%rd96, %r616, 4;
	add.s64 	%rd25, %rd78, %rd96;
	add.s32 	%r617, %r567, %r5;
	mul.wide.u32 	%rd97, %r617, 4;
	add.s64 	%rd26, %rd78, %rd97;
	add.s32 	%r618, %r569, %r5;
	mul.wide.u32 	%rd98, %r618, 4;
	add.s64 	%rd27, %rd78, %rd98;
	add.s32 	%r619, %r571, %r5;
	mul.wide.u32 	%rd99, %r619, 4;
	add.s64 	%rd28, %rd78, %rd99;
	add.s32 	%r620, %r574, %r540;
	mul.wide.u32 	%rd100, %r620, 4;
	add.s64 	%rd29, %rd78, %rd100;
	add.s32 	%r621, %r574, %r542;
	mul.wide.u32 	%rd101, %r621, 4;
	add.s64 	%rd30, %rd78, %rd101;
	add.s32 	%r622, %r574, %r544;
	mul.wide.u32 	%rd102, %r622, 4;
	add.s64 	%rd31, %rd78, %rd102;
	add.s32 	%r623, %r574, %r546;
	mul.wide.u32 	%rd103, %r623, 4;
	add.s64 	%rd32, %rd78, %rd103;
	add.s32 	%r624, %r574, %r548;
	mul.wide.u32 	%rd104, %r624, 4;
	add.s64 	%rd33, %rd78, %rd104;
	add.s32 	%r625, %r574, %r550;
	mul.wide.u32 	%rd105, %r625, 4;
	add.s64 	%rd34, %rd78, %rd105;
	add.s32 	%r626, %r574, %r552;
	mul.wide.u32 	%rd106, %r626, 4;
	add.s64 	%rd35, %rd78, %rd106;
	add.s32 	%r627, %r574, %r554;
	mul.wide.u32 	%rd107, %r627, 4;
	add.s64 	%rd36, %rd78, %rd107;
	add.s32 	%r628, %r574, %r556;
	mul.wide.u32 	%rd108, %r628, 4;
	add.s64 	%rd37, %rd78, %rd108;
	add.s32 	%r629, %r574, %r558;
	mul.wide.u32 	%rd109, %r629, 4;
	add.s64 	%rd38, %rd78, %rd109;
	add.s32 	%r630, %r574, %r560;
	mul.wide.u32 	%rd110, %r630, 4;
	add.s64 	%rd39, %rd78, %rd110;
	add.s32 	%r631, %r574, %r562;
	mul.wide.u32 	%rd111, %r631, 4;
	add.s64 	%rd40, %rd78, %rd111;
	add.s32 	%r632, %r574, %r564;
	mul.wide.u32 	%rd112, %r632, 4;
	add.s64 	%rd41, %rd78, %rd112;
	add.s32 	%r633, %r574, %r566;
	mul.wide.u32 	%rd113, %r633, 4;
	add.s64 	%rd42, %rd78, %rd113;
	add.s32 	%r634, %r574, %r568;
	mul.wide.u32 	%rd114, %r634, 4;
	add.s64 	%rd43, %rd78, %rd114;
	add.s32 	%r635, %r574, %r570;
	mul.wide.u32 	%rd115, %r635, 4;
	add.s64 	%rd44, %rd78, %rd115;
	add.s32 	%r636, %r128, -1;
	setp.lt.u32 	%p234, %r636, 3;
	or.pred  	%p235, %p230, %p234;
	or.pred  	%p236, %p235, %p231;
	and.b32  	%r637, %r5, 24;
	setp.eq.s32 	%p237, %r637, 24;
	or.pred  	%p238, %p232, %p237;
	selp.b32 	%r159, 1145324612, -286331154, %p235;
	or.pred  	%p1, %p236, %p238;
	add.s32 	%r638, %r591, 32;
	mul.wide.u32 	%rd116, %r638, 4;
	add.s64 	%rd45, %rd78, %rd116;
	add.s32 	%r639, %r591, 48;
	mul.wide.u32 	%rd117, %r639, 4;
	add.s64 	%rd46, %rd78, %rd117;
	add.s32 	%r640, %r591, 64;
	mul.wide.u32 	%rd118, %r640, 4;
	add.s64 	%rd47, %rd78, %rd118;
	add.s32 	%r641, %r591, 80;
	mul.wide.u32 	%rd119, %r641, 4;
	add.s64 	%rd48, %rd78, %rd119;
	add.s32 	%r642, %r591, 96;
	mul.wide.u32 	%rd120, %r642, 4;
	add.s64 	%rd49, %rd78, %rd120;
	add.s32 	%r643, %r591, 112;
	mul.wide.u32 	%rd121, %r643, 4;
	add.s64 	%rd50, %rd78, %rd121;
	add.s32 	%r644, %r591, 128;
	mul.wide.u32 	%rd122, %r644, 4;
	add.s64 	%rd51, %rd78, %rd122;
	add.s32 	%r645, %r591, 144;
	mul.wide.u32 	%rd123, %r645, 4;
	add.s64 	%rd52, %rd78, %rd123;
	add.s32 	%r646, %r591, 160;
	mul.wide.u32 	%rd124, %r646, 4;
	add.s64 	%rd53, %rd78, %rd124;
	add.s32 	%r647, %r591, 176;
	mul.wide.u32 	%rd125, %r647, 4;
	add.s64 	%rd54, %rd78, %rd125;
	add.s32 	%r648, %r591, 192;
	mul.wide.u32 	%rd126, %r648, 4;
	add.s64 	%rd55, %rd78, %rd126;
	add.s32 	%r649, %r591, 208;
	mul.wide.u32 	%rd127, %r649, 4;
	add.s64 	%rd56, %rd78, %rd127;
	add.s32 	%r650, %r591, 224;
	mul.wide.u32 	%rd128, %r650, 4;
	add.s64 	%rd57, %rd78, %rd128;
	add.s32 	%r651, %r591, 240;
	mul.wide.u32 	%rd129, %r651, 4;
	add.s64 	%rd58, %rd78, %rd129;
	mov.u32 	%r88, 0;
	setp.eq.s32 	%p240, %r157, 0;
	mov.u16 	%rs38, 25600;
	mov.u16 	%rs40, 21504;
	mov.u16 	%rs44, 18432;
	mov.u32 	%r3467, %r88;
	mov.u32 	%r3468, %r88;
	mov.u32 	%r3469, %r88;
	bra.uni 	$L__BB0_198;
$L__BB0_169:                            // %L32713
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r126, %r88, 64;
	setp.ne.s32 	%p343, %r88, 32704;
	mov.u32 	%r88, %r126;
	@%p343 bra 	$L__BB0_198;
	bra.uni 	$L__BB0_170;
$L__BB0_198:                            // %L1610
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_216 Depth 2
                                        //     Child Loop BB0_153 Depth 2
	add.s32 	%r652, %r88, %r297;
	setp.lt.s32 	%p239, %r652, %r298;
	@%p239 bra 	$L__BB0_199;
	bra.uni 	$L__BB0_170;
$L__BB0_199:                            // %pass780
                                        //   in Loop: Header=BB0_198 Depth=1
	cvt.u32.u64 	%r845, %rd11;
	or.b32  	%r846, %r88, %r3;
	shl.b32 	%r847, %r846, 13;
	and.b32  	%r848, %r847, 268034048;
	or.b32  	%r849, %r156, %r848;
	add.s32 	%r850, %r155, %r849;
	shr.s32 	%r851, %r850, 31;
	shr.u32 	%r852, %r851, 4;
	add.s32 	%r853, %r850, %r852;
	shr.s32 	%r854, %r853, 28;
	setp.lt.s32 	%p241, %r850, 0;
	and.b32  	%r855, %r853, -268435456;
	setp.ne.s32 	%p242, %r855, %r850;
	and.pred  	%p243, %p241, %p242;
	selp.u32 	%r856, 1, 0, %p243;
	sub.s32 	%r857, %r856, %r854;
	shl.b32 	%r858, %r857, 28;
	add.s32 	%r859, %r858, %r850;
	mul.wide.s32 	%rd130, %r859, 4;
	add.s64 	%rd131, %rd3, %rd130;
	ld.global.v4.u32 	{%r860, %r861, %r862, %r863}, [%rd131];
	or.b32  	%r864, %r846, 16;
	shl.b32 	%r865, %r864, 13;
	and.b32  	%r866, %r865, 268165120;
	or.b32  	%r867, %r156, %r866;
	add.s32 	%r868, %r155, %r867;
	shr.s32 	%r869, %r868, 31;
	shr.u32 	%r870, %r869, 4;
	add.s32 	%r871, %r868, %r870;
	shr.s32 	%r872, %r871, 28;
	setp.lt.s32 	%p244, %r868, 0;
	and.b32  	%r873, %r871, -268435456;
	setp.ne.s32 	%p245, %r873, %r868;
	and.pred  	%p246, %p244, %p245;
	selp.u32 	%r874, 1, 0, %p246;
	sub.s32 	%r875, %r874, %r872;
	shl.b32 	%r876, %r875, 28;
	add.s32 	%r877, %r876, %r868;
	mul.wide.s32 	%rd132, %r877, 4;
	add.s64 	%rd133, %rd3, %rd132;
	ld.global.v4.u32 	{%r878, %r879, %r880, %r881}, [%rd133];
	and.b32  	%r882, %r88, 32704;
	or.b32  	%r883, %r3, %r882;
	shl.b32 	%r884, %r883, 13;
	or.b32  	%r885, %r884, %r156;
	or.b32  	%r886, %r885, 262144;
	add.s32 	%r887, %r155, %r886;
	shr.s32 	%r888, %r887, 31;
	shr.u32 	%r889, %r888, 4;
	add.s32 	%r890, %r887, %r889;
	shr.s32 	%r891, %r890, 28;
	setp.lt.s32 	%p247, %r887, 0;
	and.b32  	%r892, %r890, -268435456;
	setp.ne.s32 	%p248, %r892, %r887;
	and.pred  	%p249, %p247, %p248;
	selp.u32 	%r893, 1, 0, %p249;
	sub.s32 	%r894, %r893, %r891;
	shl.b32 	%r895, %r894, 28;
	add.s32 	%r896, %r895, %r887;
	mul.wide.s32 	%rd134, %r896, 4;
	add.s64 	%rd135, %rd3, %rd134;
	ld.global.v4.u32 	{%r897, %r898, %r899, %r900}, [%rd135];
	or.b32  	%r901, %r885, 393216;
	add.s32 	%r902, %r155, %r901;
	shr.s32 	%r903, %r902, 31;
	shr.u32 	%r904, %r903, 4;
	add.s32 	%r905, %r902, %r904;
	shr.s32 	%r906, %r905, 28;
	setp.lt.s32 	%p250, %r902, 0;
	and.b32  	%r907, %r905, -268435456;
	setp.ne.s32 	%p251, %r907, %r902;
	and.pred  	%p252, %p250, %p251;
	selp.u32 	%r908, 1, 0, %p252;
	sub.s32 	%r909, %r908, %r906;
	shl.b32 	%r910, %r909, 28;
	add.s32 	%r911, %r910, %r902;
	mul.wide.s32 	%rd136, %r911, 4;
	add.s64 	%rd137, %rd3, %rd136;
	ld.global.v4.u32 	{%r912, %r913, %r914, %r915}, [%rd137];
	selp.b32 	%r916, %r862, %r860, %p240;
	shfl.sync.bfly.b32	%r917, %r916, 16, 31, -1;
	selp.b32 	%r655, %r860, %r917, %p240;
	selp.b32 	%r660, %r917, %r862, %p240;
	selp.b32 	%r918, %r863, %r861, %p240;
	shfl.sync.bfly.b32	%r919, %r918, 16, 31, -1;
	selp.b32 	%r663, %r861, %r919, %p240;
	selp.b32 	%r668, %r919, %r863, %p240;
	selp.b32 	%r920, %r880, %r878, %p240;
	shfl.sync.bfly.b32	%r921, %r920, 16, 31, -1;
	selp.b32 	%r671, %r878, %r921, %p240;
	selp.b32 	%r676, %r921, %r880, %p240;
	selp.b32 	%r922, %r881, %r879, %p240;
	shfl.sync.bfly.b32	%r923, %r922, 16, 31, -1;
	selp.b32 	%r679, %r879, %r923, %p240;
	selp.b32 	%r684, %r923, %r881, %p240;
	selp.b32 	%r924, %r899, %r897, %p240;
	shfl.sync.bfly.b32	%r925, %r924, 16, 31, -1;
	selp.b32 	%r687, %r897, %r925, %p240;
	selp.b32 	%r692, %r925, %r899, %p240;
	selp.b32 	%r926, %r900, %r898, %p240;
	shfl.sync.bfly.b32	%r927, %r926, 16, 31, -1;
	selp.b32 	%r695, %r898, %r927, %p240;
	selp.b32 	%r700, %r927, %r900, %p240;
	selp.b32 	%r928, %r914, %r912, %p240;
	shfl.sync.bfly.b32	%r929, %r928, 16, 31, -1;
	selp.b32 	%r703, %r912, %r929, %p240;
	selp.b32 	%r708, %r929, %r914, %p240;
	selp.b32 	%r930, %r915, %r913, %p240;
	shfl.sync.bfly.b32	%r931, %r930, 16, 31, -1;
	selp.b32 	%r711, %r913, %r931, %p240;
	selp.b32 	%r716, %r931, %r915, %p240;
	shl.b32 	%r656, %r660, 4;
	mov.u32 	%r654, 252645135;
	// begin inline asm
	lop3.b32 %r718, %r654, %r655, %r656, 202;
	// end inline asm
	shr.u32 	%r659, %r655, 4;
	// begin inline asm
	lop3.b32 %r734, %r654, %r659, %r660, 202;
	// end inline asm
	shl.b32 	%r664, %r668, 4;
	// begin inline asm
	lop3.b32 %r726, %r654, %r663, %r664, 202;
	// end inline asm
	shr.u32 	%r667, %r663, 4;
	// begin inline asm
	lop3.b32 %r742, %r654, %r667, %r668, 202;
	// end inline asm
	shl.b32 	%r672, %r676, 4;
	// begin inline asm
	lop3.b32 %r750, %r654, %r671, %r672, 202;
	// end inline asm
	shr.u32 	%r675, %r671, 4;
	// begin inline asm
	lop3.b32 %r766, %r654, %r675, %r676, 202;
	// end inline asm
	shl.b32 	%r680, %r684, 4;
	// begin inline asm
	lop3.b32 %r758, %r654, %r679, %r680, 202;
	// end inline asm
	shr.u32 	%r683, %r679, 4;
	// begin inline asm
	lop3.b32 %r774, %r654, %r683, %r684, 202;
	// end inline asm
	shl.b32 	%r688, %r692, 4;
	// begin inline asm
	lop3.b32 %r719, %r654, %r687, %r688, 202;
	// end inline asm
	shr.u32 	%r691, %r687, 4;
	// begin inline asm
	lop3.b32 %r735, %r654, %r691, %r692, 202;
	// end inline asm
	shl.b32 	%r696, %r700, 4;
	// begin inline asm
	lop3.b32 %r727, %r654, %r695, %r696, 202;
	// end inline asm
	shr.u32 	%r699, %r695, 4;
	// begin inline asm
	lop3.b32 %r743, %r654, %r699, %r700, 202;
	// end inline asm
	shl.b32 	%r704, %r708, 4;
	// begin inline asm
	lop3.b32 %r751, %r654, %r703, %r704, 202;
	// end inline asm
	shr.u32 	%r707, %r703, 4;
	// begin inline asm
	lop3.b32 %r767, %r654, %r707, %r708, 202;
	// end inline asm
	shl.b32 	%r712, %r716, 4;
	// begin inline asm
	lop3.b32 %r759, %r654, %r711, %r712, 202;
	// end inline asm
	shr.u32 	%r715, %r711, 4;
	// begin inline asm
	lop3.b32 %r775, %r654, %r715, %r716, 202;
	// end inline asm
	mov.u32 	%r720, 25152;
	// begin inline asm
	prmt.b32 %r782, %r718, %r719, %r720;
	// end inline asm
	mov.u32 	%r724, 29521;
	// begin inline asm
	prmt.b32 %r814, %r718, %r719, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r790, %r726, %r727, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r822, %r726, %r727, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r783, %r734, %r735, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r815, %r734, %r735, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r791, %r742, %r743, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r823, %r742, %r743, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r798, %r750, %r751, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r830, %r750, %r751, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r806, %r758, %r759, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r838, %r758, %r759, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r799, %r766, %r767, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r831, %r766, %r767, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r807, %r774, %r775, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r839, %r774, %r775, %r724;
	// end inline asm
	mov.u32 	%r784, 21520;
	// begin inline asm
	prmt.b32 %r781, %r782, %r783, %r784;
	// end inline asm
	mov.u32 	%r788, 30258;
	// begin inline asm
	prmt.b32 %r785, %r782, %r783, %r788;
	// end inline asm
	// begin inline asm
	prmt.b32 %r789, %r790, %r791, %r784;
	// end inline asm
	// begin inline asm
	prmt.b32 %r793, %r790, %r791, %r788;
	// end inline asm
	// begin inline asm
	prmt.b32 %r797, %r798, %r799, %r784;
	// end inline asm
	// begin inline asm
	prmt.b32 %r801, %r798, %r799, %r788;
	// end inline asm
	// begin inline asm
	prmt.b32 %r805, %r806, %r807, %r784;
	// end inline asm
	// begin inline asm
	prmt.b32 %r809, %r806, %r807, %r788;
	// end inline asm
	// begin inline asm
	prmt.b32 %r813, %r814, %r815, %r784;
	// end inline asm
	// begin inline asm
	prmt.b32 %r817, %r814, %r815, %r788;
	// end inline asm
	// begin inline asm
	prmt.b32 %r821, %r822, %r823, %r784;
	// end inline asm
	// begin inline asm
	prmt.b32 %r825, %r822, %r823, %r788;
	// end inline asm
	// begin inline asm
	prmt.b32 %r829, %r830, %r831, %r784;
	// end inline asm
	// begin inline asm
	prmt.b32 %r833, %r830, %r831, %r788;
	// end inline asm
	// begin inline asm
	prmt.b32 %r837, %r838, %r839, %r784;
	// end inline asm
	// begin inline asm
	prmt.b32 %r841, %r838, %r839, %r788;
	// end inline asm
	st.shared.u32 	[%rd10], %r781;
	st.shared.u32 	[%rd12+512], %r789;
	st.shared.u32 	[%rd12+256], %r785;
	st.shared.u32 	[%rd12+768], %r793;
	and.b32  	%r932, %r864, 31;
	add.s32 	%r933, %r932, %r845;
	mul.wide.u32 	%rd138, %r933, 4;
	add.s64 	%rd140, %rd78, %rd138;
	st.shared.u32 	[%rd140], %r797;
	cvt.u64.u32 	%rd141, %r932;
	add.s64 	%rd142, %rd11, %rd141;
	shl.b64 	%rd143, %rd142, 2;
	add.s64 	%rd144, %rd78, %rd143;
	st.shared.u32 	[%rd144+512], %r805;
	st.shared.u32 	[%rd144+256], %r801;
	st.shared.u32 	[%rd144+768], %r809;
	st.shared.u32 	[%rd12+128], %r813;
	st.shared.u32 	[%rd12+640], %r821;
	st.shared.u32 	[%rd12+384], %r817;
	st.shared.u32 	[%rd12+896], %r825;
	st.shared.u32 	[%rd144+128], %r829;
	st.shared.u32 	[%rd144+640], %r837;
	st.shared.u32 	[%rd144+384], %r833;
	st.shared.u32 	[%rd144+896], %r841;
	bar.sync 	0;
	ld.shared.u32 	%r160, [%rd13];
	ld.shared.u32 	%r161, [%rd14];
	ld.shared.u32 	%r162, [%rd15];
	ld.shared.u32 	%r163, [%rd16];
	ld.shared.u32 	%r164, [%rd17];
	ld.shared.u32 	%r165, [%rd18];
	ld.shared.u32 	%r166, [%rd19];
	ld.shared.u32 	%r167, [%rd20];
	ld.shared.u32 	%r168, [%rd21];
	ld.shared.u32 	%r169, [%rd22];
	ld.shared.u32 	%r170, [%rd23];
	ld.shared.u32 	%r171, [%rd24];
	ld.shared.u32 	%r172, [%rd25];
	ld.shared.u32 	%r173, [%rd26];
	ld.shared.u32 	%r174, [%rd27];
	ld.shared.u32 	%r175, [%rd28];
	bar.sync 	0;
	shfl.sync.idx.b32	%r176, %r152, 0, 31, -1;
	shfl.sync.idx.b32	%r177, %r152, 1, 31, -1;
	shfl.sync.idx.b32	%r178, %r152, 2, 31, -1;
	shfl.sync.idx.b32	%r179, %r152, 3, 31, -1;
	shfl.sync.idx.b32	%r180, %r152, 4, 31, -1;
	shfl.sync.idx.b32	%r181, %r152, 5, 31, -1;
	shfl.sync.idx.b32	%r182, %r152, 6, 31, -1;
	shfl.sync.idx.b32	%r183, %r152, 7, 31, -1;
	shfl.sync.idx.b32	%r184, %r152, 8, 31, -1;
	shfl.sync.idx.b32	%r185, %r152, 9, 31, -1;
	shfl.sync.idx.b32	%r186, %r152, 10, 31, -1;
	shfl.sync.idx.b32	%r187, %r152, 11, 31, -1;
	shfl.sync.idx.b32	%r188, %r152, 12, 31, -1;
	shfl.sync.idx.b32	%r189, %r152, 13, 31, -1;
	shfl.sync.idx.b32	%r190, %r152, 14, 31, -1;
	shfl.sync.idx.b32	%r191, %r152, 15, 31, -1;
	setp.eq.s32 	%p253, %r176, 999999999;
	@%p253 bra 	$L__BB0_135;
// %bb.200:                             // %pass3077
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r934, %r176, %r5;
	mul.wide.s32 	%rd145, %r934, 4;
	add.s64 	%rd147, %rd78, %rd145;
	st.shared.u32 	[%rd147], %r160;
	setp.eq.s32 	%p254, %r177, 999999999;
	@%p254 bra 	$L__BB0_136;
// %bb.201:                             // %pass3145
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r935, %r177, %r5;
	mul.wide.s32 	%rd148, %r935, 4;
	add.s64 	%rd150, %rd78, %rd148;
	st.shared.u32 	[%rd150], %r161;
	setp.eq.s32 	%p255, %r178, 999999999;
	@%p255 bra 	$L__BB0_137;
// %bb.202:                             // %pass3213
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r936, %r178, %r5;
	mul.wide.s32 	%rd151, %r936, 4;
	add.s64 	%rd153, %rd78, %rd151;
	st.shared.u32 	[%rd153], %r162;
	setp.eq.s32 	%p256, %r179, 999999999;
	@%p256 bra 	$L__BB0_138;
// %bb.203:                             // %pass3281
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r937, %r179, %r5;
	mul.wide.s32 	%rd154, %r937, 4;
	add.s64 	%rd156, %rd78, %rd154;
	st.shared.u32 	[%rd156], %r163;
	setp.eq.s32 	%p257, %r180, 999999999;
	@%p257 bra 	$L__BB0_139;
// %bb.204:                             // %pass3349
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r938, %r180, %r5;
	mul.wide.s32 	%rd157, %r938, 4;
	add.s64 	%rd159, %rd78, %rd157;
	st.shared.u32 	[%rd159], %r164;
	setp.eq.s32 	%p258, %r181, 999999999;
	@%p258 bra 	$L__BB0_140;
// %bb.205:                             // %pass3417
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r939, %r181, %r5;
	mul.wide.s32 	%rd160, %r939, 4;
	add.s64 	%rd162, %rd78, %rd160;
	st.shared.u32 	[%rd162], %r165;
	setp.eq.s32 	%p259, %r182, 999999999;
	@%p259 bra 	$L__BB0_141;
// %bb.206:                             // %pass3485
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r940, %r182, %r5;
	mul.wide.s32 	%rd163, %r940, 4;
	add.s64 	%rd165, %rd78, %rd163;
	st.shared.u32 	[%rd165], %r166;
	setp.eq.s32 	%p260, %r183, 999999999;
	@%p260 bra 	$L__BB0_142;
// %bb.207:                             // %pass3553
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r941, %r183, %r5;
	mul.wide.s32 	%rd166, %r941, 4;
	add.s64 	%rd168, %rd78, %rd166;
	st.shared.u32 	[%rd168], %r167;
	setp.eq.s32 	%p261, %r184, 999999999;
	@%p261 bra 	$L__BB0_143;
// %bb.208:                             // %pass3621
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r942, %r184, %r5;
	mul.wide.s32 	%rd169, %r942, 4;
	add.s64 	%rd171, %rd78, %rd169;
	st.shared.u32 	[%rd171], %r168;
	setp.eq.s32 	%p262, %r185, 999999999;
	@%p262 bra 	$L__BB0_144;
// %bb.209:                             // %pass3689
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r943, %r185, %r5;
	mul.wide.s32 	%rd172, %r943, 4;
	add.s64 	%rd174, %rd78, %rd172;
	st.shared.u32 	[%rd174], %r169;
	setp.eq.s32 	%p263, %r186, 999999999;
	@%p263 bra 	$L__BB0_145;
// %bb.210:                             // %pass3757
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r944, %r186, %r5;
	mul.wide.s32 	%rd175, %r944, 4;
	add.s64 	%rd177, %rd78, %rd175;
	st.shared.u32 	[%rd177], %r170;
	setp.eq.s32 	%p264, %r187, 999999999;
	@%p264 bra 	$L__BB0_146;
// %bb.211:                             // %pass3825
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r945, %r187, %r5;
	mul.wide.s32 	%rd178, %r945, 4;
	add.s64 	%rd180, %rd78, %rd178;
	st.shared.u32 	[%rd180], %r171;
	setp.eq.s32 	%p265, %r188, 999999999;
	@%p265 bra 	$L__BB0_147;
// %bb.212:                             // %pass3893
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r946, %r188, %r5;
	mul.wide.s32 	%rd181, %r946, 4;
	add.s64 	%rd183, %rd78, %rd181;
	st.shared.u32 	[%rd183], %r172;
	setp.eq.s32 	%p266, %r189, 999999999;
	@%p266 bra 	$L__BB0_148;
// %bb.213:                             // %pass3961
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r947, %r189, %r5;
	mul.wide.s32 	%rd184, %r947, 4;
	add.s64 	%rd186, %rd78, %rd184;
	st.shared.u32 	[%rd186], %r173;
	setp.eq.s32 	%p267, %r190, 999999999;
	@%p267 bra 	$L__BB0_149;
// %bb.214:                             // %pass4029
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r948, %r190, %r5;
	mul.wide.s32 	%rd187, %r948, 4;
	add.s64 	%rd189, %rd78, %rd187;
	st.shared.u32 	[%rd189], %r174;
	setp.eq.s32 	%p268, %r191, 999999999;
	@%p268 bra 	$L__BB0_150;
// %bb.215:                             // %pass4097
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r950, %r191, %r5;
	mul.wide.s32 	%rd190, %r950, 4;
	add.s64 	%rd192, %rd78, %rd190;
	st.shared.u32 	[%rd192], %r175;
	bar.sync 	0;
	ld.shared.u32 	%r192, [%rd29];
	ld.shared.u32 	%r193, [%rd30];
	ld.shared.u32 	%r194, [%rd31];
	ld.shared.u32 	%r195, [%rd32];
	ld.shared.u32 	%r196, [%rd33];
	ld.shared.u32 	%r197, [%rd34];
	ld.shared.u32 	%r198, [%rd35];
	ld.shared.u32 	%r199, [%rd36];
	ld.shared.u32 	%r200, [%rd37];
	ld.shared.u32 	%r201, [%rd38];
	ld.shared.u32 	%r202, [%rd39];
	ld.shared.u32 	%r203, [%rd40];
	ld.shared.u32 	%r204, [%rd41];
	ld.shared.u32 	%r205, [%rd42];
	ld.shared.u32 	%r206, [%rd43];
	ld.shared.u32 	%r207, [%rd44];
	bar.sync 	0;
	mov.u32 	%r3459, 16;
	bra.uni 	$L__BB0_216;
$L__BB0_151:                            // %L22489
                                        //   in Loop: Header=BB0_216 Depth=2
	bar.sync 	0;
	add.s32 	%r3459, %r3459, -8;
	setp.ne.s32 	%p305, %r3459, -16;
	@%p305 bra 	$L__BB0_216;
	bra.uni 	$L__BB0_152;
$L__BB0_216:                            // %L12302
                                        //   Parent Loop BB0_198 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p269, %r3459, 16;
	selp.b32 	%r1343, %r192, 0, %p269;
	setp.eq.s32 	%p270, %r3459, 8;
	selp.b32 	%r1344, %r196, %r1343, %p270;
	setp.eq.s32 	%p271, %r3459, 0;
	selp.b32 	%r1345, %r200, %r1344, %p271;
	setp.eq.s32 	%p272, %r3459, -8;
	selp.b32 	%r1346, %r204, %r1345, %p272;
	selp.b32 	%r1347, %r193, 0, %p269;
	selp.b32 	%r1348, %r197, %r1347, %p270;
	selp.b32 	%r1349, %r201, %r1348, %p271;
	selp.b32 	%r1350, %r205, %r1349, %p272;
	selp.b32 	%r1351, %r194, 0, %p269;
	selp.b32 	%r1352, %r198, %r1351, %p270;
	selp.b32 	%r1353, %r202, %r1352, %p271;
	selp.b32 	%r1354, %r206, %r1353, %p272;
	selp.b32 	%r1355, %r195, 0, %p269;
	selp.b32 	%r1356, %r199, %r1355, %p270;
	selp.b32 	%r1357, %r203, %r1356, %p271;
	selp.b32 	%r1358, %r207, %r1357, %p272;
	// begin inline asm
	mov.b32 %r956, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r967, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r955, %r1346, -2004318072;
	mov.u32 	%r1092, 983055;
	// begin inline asm
	lop3.b32 %r953, %r1092, %r955, %r956, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r957, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r958, %r956, %r957;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r961, %r953, %r958;
	// end inline asm
	mov.u32 	%r1103, 15728880;
	// begin inline asm
	lop3.b32 %r964, %r1103, %r955, %r967, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r968, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r969, %r967, %r968;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r972, %r964, %r969;
	// end inline asm
	// begin inline asm
	mov.b32 %r1002, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1013, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1001, %r1350, -2004318072;
	// begin inline asm
	lop3.b32 %r999, %r1092, %r1001, %r1002, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1003, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1004, %r1002, %r1003;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1007, %r999, %r1004;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1010, %r1103, %r1001, %r1013, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1014, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1015, %r1013, %r1014;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1018, %r1010, %r1015;
	// end inline asm
	// begin inline asm
	mov.b32 %r1048, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1059, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1047, %r1354, -2004318072;
	// begin inline asm
	lop3.b32 %r1045, %r1092, %r1047, %r1048, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1049, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1050, %r1048, %r1049;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1053, %r1045, %r1050;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1056, %r1103, %r1047, %r1059, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1060, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1061, %r1059, %r1060;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1064, %r1056, %r1061;
	// end inline asm
	// begin inline asm
	mov.b32 %r1094, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1105, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1093, %r1358, -2004318072;
	// begin inline asm
	lop3.b32 %r1091, %r1092, %r1093, %r1094, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1095, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1096, %r1094, %r1095;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1099, %r1091, %r1096;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1102, %r1103, %r1093, %r1105, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1106, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1107, %r1105, %r1106;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1110, %r1102, %r1107;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r153;
    mov.b32 {%r2re, %r2im}, %r961;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1135, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r972;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1138, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r153;
    mov.b32 {%r2re, %r2im}, %r1007;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1141, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r1018;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1144, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r153;
    mov.b32 {%r2re, %r2im}, %r1053;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1147, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r1064;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1150, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r153;
    mov.b32 {%r2re, %r2im}, %r1099;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1153, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r1110;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1156, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1214, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1159, %r1160}, {%r326, %r329}, {%r1135}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1166, %r1167}, {%r326, %r329}, {%r1138}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1173, %r1174}, {%r326, %r329}, {%r1141}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1180, %r1181}, {%r326, %r329}, {%r1144}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1187, %r1188}, {%r326, %r329}, {%r1147}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1194, %r1195}, {%r326, %r329}, {%r1150}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1201, %r1202}, {%r326, %r329}, {%r1153}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1208, %r1209}, {%r326, %r329}, {%r1156}, {%r1214, %r1214};
	// end inline asm
	@%p1 bra 	$L__BB0_218;
	bra.uni 	$L__BB0_217;
$L__BB0_218:                            // %pass5517
                                        //   in Loop: Header=BB0_216 Depth=2
	// begin inline asm
	neg.f16x2 %r1215, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1217, %r1215, %r1160;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1220, %r364, %r1159, %r1217;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1224, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1226, %r1224, %r1167;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1229, %r364, %r1166, %r1226;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1233, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1235, %r1233, %r1174;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1238, %r364, %r1173, %r1235;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1242, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1244, %r1242, %r1181;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1247, %r364, %r1180, %r1244;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1251, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1253, %r1251, %r1188;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1256, %r364, %r1187, %r1253;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1260, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1262, %r1260, %r1195;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1265, %r364, %r1194, %r1262;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1269, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1271, %r1269, %r1202;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1274, %r364, %r1201, %r1271;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1278, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1280, %r1278, %r1209;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1283, %r364, %r1208, %r1280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1287, %r367, %r1159;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1290, %r364, %r1160, %r1287;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1294, %r367, %r1166;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1297, %r364, %r1167, %r1294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1301, %r367, %r1173;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1304, %r364, %r1174, %r1301;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1308, %r367, %r1180;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1311, %r364, %r1181, %r1308;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1315, %r367, %r1187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1318, %r364, %r1188, %r1315;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1322, %r367, %r1194;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1325, %r364, %r1195, %r1322;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1329, %r367, %r1201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1332, %r364, %r1202, %r1329;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1336, %r367, %r1208;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1339, %r364, %r1209, %r1336;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1359, %r1360}, {%r411, %r414}, {%r1220, %r1290}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1368, %r1369}, {%r411, %r414}, {%r1229, %r1297}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1377, %r1378}, {%r411, %r414}, {%r1238, %r1304}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1386, %r1387}, {%r411, %r414}, {%r1247, %r1311}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1395, %r1396}, {%r411, %r414}, {%r1256, %r1318}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1404, %r1405}, {%r411, %r414}, {%r1265, %r1325}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1413, %r1414}, {%r411, %r414}, {%r1274, %r1332}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1422, %r1423}, {%r411, %r414}, {%r1283, %r1339}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	bar.sync 	0;
	ld.shared.u32 	%r1499, [%rd7];
	ld.shared.u32 	%r1506, [%rd8];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1516, %r1513}, {%r423, %r426}, {%r1499}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1525, %r1522}, {%r423, %r426}, {%r1506}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1509, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1511, %r1509, %r1513;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1514, %r457, %r1516, %r1511;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1518, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1520, %r1518, %r1522;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1523, %r457, %r1525, %r1520;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1527, %r460, %r1516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1530, %r457, %r1513, %r1527;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1534, %r460, %r1525;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1537, %r457, %r1522, %r1534;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1560, %r1563}, {%r499, %r502}, {%r1514, %r1530}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1567, %r1571}, {%r499, %r502}, {%r1523, %r1537}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1559, %r1560, %r1560;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1562, %r1563, %r1563, %r1559;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1566, %r1567, %r1567, %r1562;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1570, %r1571, %r1571, %r1566;
	// end inline asm
	mov.u32 	%r1575, 488578335;
	// begin inline asm
	fma.rn.f16x2 %r3480, %r1575, %r1570, %r3469;
	// end inline asm
	add.s32 	%r3478, %r3467, 1;
	setp.ne.s32 	%p273, %r3478, 25;
	@%p273 bra 	$L__BB0_220;
// %bb.219:                             // %pass6075
                                        //   in Loop: Header=BB0_216 Depth=2
	shl.b32 	%r1579, %r3468, 15;
	or.b32  	%r1580, %r158, %r1579;
	cvt.u64.u32 	%rd195, %r1580;
	add.s64 	%rd196, %rd195, %rd9;
	shr.u64 	%rd197, %rd196, 37;
	add.s64 	%rd198, %rd196, %rd197;
	shr.s64 	%rd199, %rd198, 27;
	setp.lt.s64 	%p274, %rd196, 0;
	and.b64  	%rd200, %rd198, -134217728;
	setp.ne.s64 	%p275, %rd200, %rd196;
	and.pred  	%p276, %p274, %p275;
	selp.u64 	%rd201, 1, 0, %p276;
	sub.s64 	%rd202, %rd201, %rd199;
	shl.b64 	%rd203, %rd202, 27;
	add.s64 	%rd204, %rd203, %rd196;
	shl.b64 	%rd205, %rd204, 2;
	add.s64 	%rd206, %rd4, %rd205;
	st.global.u32 	[%rd206], %r3480;
	add.s32 	%r3468, %r3468, 1;
	mov.u32 	%r3478, 0;
	mov.u32 	%r3480, %r3478;
$L__BB0_220:                            // %pass6320
                                        //   in Loop: Header=BB0_216 Depth=2
	ld.shared.u32 	%r1585, [%rd45];
	ld.shared.u32 	%r1592, [%rd46];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1602, %r1599}, {%r423, %r426}, {%r1585}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1611, %r1608}, {%r423, %r426}, {%r1592}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1595, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1597, %r1595, %r1599;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1600, %r457, %r1602, %r1597;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1604, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1606, %r1604, %r1608;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1609, %r457, %r1611, %r1606;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1613, %r460, %r1602;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1616, %r457, %r1599, %r1613;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1620, %r460, %r1611;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1623, %r457, %r1608, %r1620;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1646, %r1649}, {%r499, %r502}, {%r1600, %r1616}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1653, %r1657}, {%r499, %r502}, {%r1609, %r1623}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1645, %r1646, %r1646;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1648, %r1649, %r1649, %r1645;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1652, %r1653, %r1653, %r1648;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1656, %r1657, %r1657, %r1652;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3483, %r1575, %r1656, %r3480;
	// end inline asm
	add.s32 	%r3481, %r3478, 1;
	setp.ne.s32 	%p277, %r3481, 25;
	@%p277 bra 	$L__BB0_222;
// %bb.221:                             // %pass6585
                                        //   in Loop: Header=BB0_216 Depth=2
	shl.b32 	%r1665, %r3468, 15;
	or.b32  	%r1666, %r158, %r1665;
	cvt.u64.u32 	%rd207, %r1666;
	add.s64 	%rd208, %rd207, %rd9;
	shr.u64 	%rd209, %rd208, 37;
	add.s64 	%rd210, %rd208, %rd209;
	shr.s64 	%rd211, %rd210, 27;
	setp.lt.s64 	%p278, %rd208, 0;
	and.b64  	%rd212, %rd210, -134217728;
	setp.ne.s64 	%p279, %rd212, %rd208;
	and.pred  	%p280, %p278, %p279;
	selp.u64 	%rd213, 1, 0, %p280;
	sub.s64 	%rd214, %rd213, %rd211;
	shl.b64 	%rd215, %rd214, 27;
	add.s64 	%rd216, %rd215, %rd208;
	shl.b64 	%rd217, %rd216, 2;
	add.s64 	%rd218, %rd4, %rd217;
	st.global.u32 	[%rd218], %r3483;
	add.s32 	%r3468, %r3468, 1;
	mov.u32 	%r3481, 0;
	mov.u32 	%r3483, %r3481;
$L__BB0_222:                            // %pass6830
                                        //   in Loop: Header=BB0_216 Depth=2
	ld.shared.u32 	%r1671, [%rd47];
	ld.shared.u32 	%r1678, [%rd48];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1688, %r1685}, {%r423, %r426}, {%r1671}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1697, %r1694}, {%r423, %r426}, {%r1678}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1681, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1683, %r1681, %r1685;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1686, %r457, %r1688, %r1683;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1690, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1692, %r1690, %r1694;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1695, %r457, %r1697, %r1692;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1699, %r460, %r1688;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1702, %r457, %r1685, %r1699;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1706, %r460, %r1697;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1709, %r457, %r1694, %r1706;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1732, %r1735}, {%r499, %r502}, {%r1686, %r1702}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1739, %r1743}, {%r499, %r502}, {%r1695, %r1709}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1731, %r1732, %r1732;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1734, %r1735, %r1735, %r1731;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1738, %r1739, %r1739, %r1734;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1742, %r1743, %r1743, %r1738;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3486, %r1575, %r1742, %r3483;
	// end inline asm
	add.s32 	%r3484, %r3481, 1;
	setp.ne.s32 	%p281, %r3484, 25;
	@%p281 bra 	$L__BB0_224;
// %bb.223:                             // %pass7095
                                        //   in Loop: Header=BB0_216 Depth=2
	shl.b32 	%r1751, %r3468, 15;
	or.b32  	%r1752, %r158, %r1751;
	cvt.u64.u32 	%rd219, %r1752;
	add.s64 	%rd220, %rd219, %rd9;
	shr.u64 	%rd221, %rd220, 37;
	add.s64 	%rd222, %rd220, %rd221;
	shr.s64 	%rd223, %rd222, 27;
	setp.lt.s64 	%p282, %rd220, 0;
	and.b64  	%rd224, %rd222, -134217728;
	setp.ne.s64 	%p283, %rd224, %rd220;
	and.pred  	%p284, %p282, %p283;
	selp.u64 	%rd225, 1, 0, %p284;
	sub.s64 	%rd226, %rd225, %rd223;
	shl.b64 	%rd227, %rd226, 27;
	add.s64 	%rd228, %rd227, %rd220;
	shl.b64 	%rd229, %rd228, 2;
	add.s64 	%rd230, %rd4, %rd229;
	st.global.u32 	[%rd230], %r3486;
	add.s32 	%r3468, %r3468, 1;
	mov.u32 	%r3484, 0;
	mov.u32 	%r3486, %r3484;
$L__BB0_224:                            // %pass7340
                                        //   in Loop: Header=BB0_216 Depth=2
	ld.shared.u32 	%r1757, [%rd49];
	ld.shared.u32 	%r1764, [%rd50];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1774, %r1771}, {%r423, %r426}, {%r1757}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1783, %r1780}, {%r423, %r426}, {%r1764}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1767, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1769, %r1767, %r1771;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1772, %r457, %r1774, %r1769;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1776, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1778, %r1776, %r1780;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1781, %r457, %r1783, %r1778;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1785, %r460, %r1774;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1788, %r457, %r1771, %r1785;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1792, %r460, %r1783;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1795, %r457, %r1780, %r1792;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1818, %r1821}, {%r499, %r502}, {%r1772, %r1788}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1825, %r1829}, {%r499, %r502}, {%r1781, %r1795}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1817, %r1818, %r1818;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1820, %r1821, %r1821, %r1817;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1824, %r1825, %r1825, %r1820;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1828, %r1829, %r1829, %r1824;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3489, %r1575, %r1828, %r3486;
	// end inline asm
	add.s32 	%r3487, %r3484, 1;
	setp.ne.s32 	%p285, %r3487, 25;
	@%p285 bra 	$L__BB0_226;
// %bb.225:                             // %pass7605
                                        //   in Loop: Header=BB0_216 Depth=2
	shl.b32 	%r1837, %r3468, 15;
	or.b32  	%r1838, %r158, %r1837;
	cvt.u64.u32 	%rd231, %r1838;
	add.s64 	%rd232, %rd231, %rd9;
	shr.u64 	%rd233, %rd232, 37;
	add.s64 	%rd234, %rd232, %rd233;
	shr.s64 	%rd235, %rd234, 27;
	setp.lt.s64 	%p286, %rd232, 0;
	and.b64  	%rd236, %rd234, -134217728;
	setp.ne.s64 	%p287, %rd236, %rd232;
	and.pred  	%p288, %p286, %p287;
	selp.u64 	%rd237, 1, 0, %p288;
	sub.s64 	%rd238, %rd237, %rd235;
	shl.b64 	%rd239, %rd238, 27;
	add.s64 	%rd240, %rd239, %rd232;
	shl.b64 	%rd241, %rd240, 2;
	add.s64 	%rd242, %rd4, %rd241;
	st.global.u32 	[%rd242], %r3489;
	add.s32 	%r3468, %r3468, 1;
	mov.u32 	%r3487, 0;
	mov.u32 	%r3489, %r3487;
$L__BB0_226:                            // %pass7850
                                        //   in Loop: Header=BB0_216 Depth=2
	ld.shared.u32 	%r1843, [%rd51];
	ld.shared.u32 	%r1850, [%rd52];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1860, %r1857}, {%r423, %r426}, {%r1843}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1869, %r1866}, {%r423, %r426}, {%r1850}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1853, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1855, %r1853, %r1857;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1858, %r457, %r1860, %r1855;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1862, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1864, %r1862, %r1866;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1867, %r457, %r1869, %r1864;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1871, %r460, %r1860;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1874, %r457, %r1857, %r1871;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1878, %r460, %r1869;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1881, %r457, %r1866, %r1878;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1904, %r1907}, {%r499, %r502}, {%r1858, %r1874}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1911, %r1915}, {%r499, %r502}, {%r1867, %r1881}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1903, %r1904, %r1904;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1906, %r1907, %r1907, %r1903;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1910, %r1911, %r1911, %r1906;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1914, %r1915, %r1915, %r1910;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3492, %r1575, %r1914, %r3489;
	// end inline asm
	add.s32 	%r3490, %r3487, 1;
	setp.ne.s32 	%p289, %r3490, 25;
	@%p289 bra 	$L__BB0_228;
// %bb.227:                             // %pass8115
                                        //   in Loop: Header=BB0_216 Depth=2
	shl.b32 	%r1923, %r3468, 15;
	or.b32  	%r1924, %r158, %r1923;
	cvt.u64.u32 	%rd243, %r1924;
	add.s64 	%rd244, %rd243, %rd9;
	shr.u64 	%rd245, %rd244, 37;
	add.s64 	%rd246, %rd244, %rd245;
	shr.s64 	%rd247, %rd246, 27;
	setp.lt.s64 	%p290, %rd244, 0;
	and.b64  	%rd248, %rd246, -134217728;
	setp.ne.s64 	%p291, %rd248, %rd244;
	and.pred  	%p292, %p290, %p291;
	selp.u64 	%rd249, 1, 0, %p292;
	sub.s64 	%rd250, %rd249, %rd247;
	shl.b64 	%rd251, %rd250, 27;
	add.s64 	%rd252, %rd251, %rd244;
	shl.b64 	%rd253, %rd252, 2;
	add.s64 	%rd254, %rd4, %rd253;
	st.global.u32 	[%rd254], %r3492;
	add.s32 	%r3468, %r3468, 1;
	mov.u32 	%r3490, 0;
	mov.u32 	%r3492, %r3490;
$L__BB0_228:                            // %pass8360
                                        //   in Loop: Header=BB0_216 Depth=2
	ld.shared.u32 	%r1929, [%rd53];
	ld.shared.u32 	%r1936, [%rd54];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1946, %r1943}, {%r423, %r426}, {%r1929}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1955, %r1952}, {%r423, %r426}, {%r1936}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1939, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1941, %r1939, %r1943;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1944, %r457, %r1946, %r1941;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1948, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1950, %r1948, %r1952;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1953, %r457, %r1955, %r1950;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1957, %r460, %r1946;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1960, %r457, %r1943, %r1957;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1964, %r460, %r1955;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1967, %r457, %r1952, %r1964;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1990, %r1993}, {%r499, %r502}, {%r1944, %r1960}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1997, %r2001}, {%r499, %r502}, {%r1953, %r1967}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1989, %r1990, %r1990;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1992, %r1993, %r1993, %r1989;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1996, %r1997, %r1997, %r1992;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2000, %r2001, %r2001, %r1996;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3495, %r1575, %r2000, %r3492;
	// end inline asm
	add.s32 	%r3493, %r3490, 1;
	setp.ne.s32 	%p293, %r3493, 25;
	@%p293 bra 	$L__BB0_230;
// %bb.229:                             // %pass8625
                                        //   in Loop: Header=BB0_216 Depth=2
	shl.b32 	%r2009, %r3468, 15;
	or.b32  	%r2010, %r158, %r2009;
	cvt.u64.u32 	%rd255, %r2010;
	add.s64 	%rd256, %rd255, %rd9;
	shr.u64 	%rd257, %rd256, 37;
	add.s64 	%rd258, %rd256, %rd257;
	shr.s64 	%rd259, %rd258, 27;
	setp.lt.s64 	%p294, %rd256, 0;
	and.b64  	%rd260, %rd258, -134217728;
	setp.ne.s64 	%p295, %rd260, %rd256;
	and.pred  	%p296, %p294, %p295;
	selp.u64 	%rd261, 1, 0, %p296;
	sub.s64 	%rd262, %rd261, %rd259;
	shl.b64 	%rd263, %rd262, 27;
	add.s64 	%rd264, %rd263, %rd256;
	shl.b64 	%rd265, %rd264, 2;
	add.s64 	%rd266, %rd4, %rd265;
	st.global.u32 	[%rd266], %r3495;
	add.s32 	%r3468, %r3468, 1;
	mov.u32 	%r3493, 0;
	mov.u32 	%r3495, %r3493;
$L__BB0_230:                            // %pass8870
                                        //   in Loop: Header=BB0_216 Depth=2
	ld.shared.u32 	%r2015, [%rd55];
	ld.shared.u32 	%r2022, [%rd56];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2032, %r2029}, {%r423, %r426}, {%r2015}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2041, %r2038}, {%r423, %r426}, {%r2022}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2025, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2027, %r2025, %r2029;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2030, %r457, %r2032, %r2027;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2034, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2036, %r2034, %r2038;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2039, %r457, %r2041, %r2036;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2043, %r460, %r2032;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2046, %r457, %r2029, %r2043;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2050, %r460, %r2041;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2053, %r457, %r2038, %r2050;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2076, %r2079}, {%r499, %r502}, {%r2030, %r2046}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2083, %r2087}, {%r499, %r502}, {%r2039, %r2053}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2075, %r2076, %r2076;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2078, %r2079, %r2079, %r2075;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2082, %r2083, %r2083, %r2078;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2086, %r2087, %r2087, %r2082;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3498, %r1575, %r2086, %r3495;
	// end inline asm
	add.s32 	%r3496, %r3493, 1;
	setp.ne.s32 	%p297, %r3496, 25;
	@%p297 bra 	$L__BB0_232;
// %bb.231:                             // %pass9135
                                        //   in Loop: Header=BB0_216 Depth=2
	shl.b32 	%r2095, %r3468, 15;
	or.b32  	%r2096, %r158, %r2095;
	cvt.u64.u32 	%rd267, %r2096;
	add.s64 	%rd268, %rd267, %rd9;
	shr.u64 	%rd269, %rd268, 37;
	add.s64 	%rd270, %rd268, %rd269;
	shr.s64 	%rd271, %rd270, 27;
	setp.lt.s64 	%p298, %rd268, 0;
	and.b64  	%rd272, %rd270, -134217728;
	setp.ne.s64 	%p299, %rd272, %rd268;
	and.pred  	%p300, %p298, %p299;
	selp.u64 	%rd273, 1, 0, %p300;
	sub.s64 	%rd274, %rd273, %rd271;
	shl.b64 	%rd275, %rd274, 27;
	add.s64 	%rd276, %rd275, %rd268;
	shl.b64 	%rd277, %rd276, 2;
	add.s64 	%rd278, %rd4, %rd277;
	st.global.u32 	[%rd278], %r3498;
	add.s32 	%r3468, %r3468, 1;
	mov.u32 	%r3496, 0;
	mov.u32 	%r3498, %r3496;
$L__BB0_232:                            // %pass9380
                                        //   in Loop: Header=BB0_216 Depth=2
	ld.shared.u32 	%r2101, [%rd57];
	ld.shared.u32 	%r2108, [%rd58];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2118, %r2115}, {%r423, %r426}, {%r2101}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2127, %r2124}, {%r423, %r426}, {%r2108}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2111, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2113, %r2111, %r2115;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2116, %r457, %r2118, %r2113;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2120, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2122, %r2120, %r2124;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2125, %r457, %r2127, %r2122;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2129, %r460, %r2118;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2132, %r457, %r2115, %r2129;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2136, %r460, %r2127;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2139, %r457, %r2124, %r2136;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2162, %r2165}, {%r499, %r502}, {%r2116, %r2132}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2169, %r2173}, {%r499, %r502}, {%r2125, %r2139}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2161, %r2162, %r2162;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2164, %r2165, %r2165, %r2161;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2168, %r2169, %r2169, %r2164;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2172, %r2173, %r2173, %r2168;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3469, %r1575, %r2172, %r3498;
	// end inline asm
	add.s32 	%r3467, %r3496, 1;
	setp.ne.s32 	%p301, %r3467, 25;
	@%p301 bra 	$L__BB0_151;
// %bb.233:                             // %pass9645
                                        //   in Loop: Header=BB0_216 Depth=2
	shl.b32 	%r2181, %r3468, 15;
	or.b32  	%r2182, %r158, %r2181;
	cvt.u64.u32 	%rd279, %r2182;
	add.s64 	%rd280, %rd279, %rd9;
	shr.u64 	%rd281, %rd280, 37;
	add.s64 	%rd282, %rd280, %rd281;
	shr.s64 	%rd283, %rd282, 27;
	setp.lt.s64 	%p302, %rd280, 0;
	and.b64  	%rd284, %rd282, -134217728;
	setp.ne.s64 	%p303, %rd284, %rd280;
	and.pred  	%p304, %p302, %p303;
	selp.u64 	%rd285, 1, 0, %p304;
	sub.s64 	%rd286, %rd285, %rd283;
	shl.b64 	%rd287, %rd286, 27;
	add.s64 	%rd288, %rd287, %rd280;
	shl.b64 	%rd289, %rd288, 2;
	add.s64 	%rd290, %rd4, %rd289;
	st.global.u32 	[%rd290], %r3469;
	add.s32 	%r3468, %r3468, 1;
	mov.u32 	%r3467, 0;
	mov.u32 	%r3469, %r3467;
	bra.uni 	$L__BB0_151;
$L__BB0_152:                            // %L22510.preheader
                                        //   in Loop: Header=BB0_198 Depth=1
	mov.u32 	%r3466, 16;
	bra.uni 	$L__BB0_153;
$L__BB0_168:                            // %L32697
                                        //   in Loop: Header=BB0_153 Depth=2
	bar.sync 	0;
	add.s32 	%r3466, %r3466, -8;
	setp.ne.s32 	%p342, %r3466, -16;
	@%p342 bra 	$L__BB0_153;
	bra.uni 	$L__BB0_169;
$L__BB0_153:                            // %L22510
                                        //   Parent Loop BB0_198 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p306, %r3466, 16;
	selp.b32 	%r2795, %r192, 0, %p306;
	setp.eq.s32 	%p307, %r3466, 8;
	selp.b32 	%r2796, %r196, %r2795, %p307;
	setp.eq.s32 	%p308, %r3466, 0;
	selp.b32 	%r2797, %r200, %r2796, %p308;
	setp.eq.s32 	%p309, %r3466, -8;
	selp.b32 	%r2798, %r204, %r2797, %p309;
	selp.b32 	%r2799, %r193, 0, %p306;
	selp.b32 	%r2800, %r197, %r2799, %p307;
	selp.b32 	%r2801, %r201, %r2800, %p308;
	selp.b32 	%r2802, %r205, %r2801, %p309;
	selp.b32 	%r2803, %r194, 0, %p306;
	selp.b32 	%r2804, %r198, %r2803, %p307;
	selp.b32 	%r2805, %r202, %r2804, %p308;
	selp.b32 	%r2806, %r206, %r2805, %p309;
	selp.b32 	%r2807, %r195, 0, %p306;
	selp.b32 	%r2808, %r199, %r2807, %p307;
	selp.b32 	%r2809, %r203, %r2808, %p308;
	selp.b32 	%r2810, %r207, %r2809, %p309;
	// begin inline asm
	mov.b32 %r2211, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2222, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2811, %r2798, 8;
	xor.b32  	%r2221, %r2811, 8947848;
	// begin inline asm
	lop3.b32 %r2208, %r1092, %r2221, %r2211, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2212, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2213, %r2211, %r2212;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2216, %r2208, %r2213;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2219, %r1103, %r2221, %r2222, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2223, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2224, %r2222, %r2223;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2227, %r2219, %r2224;
	// end inline asm
	// begin inline asm
	mov.b32 %r2257, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2268, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2812, %r2802, 8;
	xor.b32  	%r2267, %r2812, 8947848;
	// begin inline asm
	lop3.b32 %r2254, %r1092, %r2267, %r2257, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2258, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2259, %r2257, %r2258;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2262, %r2254, %r2259;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2265, %r1103, %r2267, %r2268, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2269, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2270, %r2268, %r2269;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2273, %r2265, %r2270;
	// end inline asm
	// begin inline asm
	mov.b32 %r2303, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2314, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2813, %r2806, 8;
	xor.b32  	%r2313, %r2813, 8947848;
	// begin inline asm
	lop3.b32 %r2300, %r1092, %r2313, %r2303, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2304, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2305, %r2303, %r2304;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2308, %r2300, %r2305;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2311, %r1103, %r2313, %r2314, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2315, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2316, %r2314, %r2315;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2319, %r2311, %r2316;
	// end inline asm
	// begin inline asm
	mov.b32 %r2349, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2360, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2814, %r2810, 8;
	xor.b32  	%r2359, %r2814, 8947848;
	// begin inline asm
	lop3.b32 %r2346, %r1092, %r2359, %r2349, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2350, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2351, %r2349, %r2350;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2354, %r2346, %r2351;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2357, %r1103, %r2359, %r2360, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2361, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2362, %r2360, %r2361;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2365, %r2357, %r2362;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r153;
    mov.b32 {%r2re, %r2im}, %r2216;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2368, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2227;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2371, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r153;
    mov.b32 {%r2re, %r2im}, %r2262;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2374, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2273;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2377, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r153;
    mov.b32 {%r2re, %r2im}, %r2308;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2380, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2319;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2383, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r153;
    mov.b32 {%r2re, %r2im}, %r2354;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2386, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2365;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2389, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2455, %r2452}, {%r326, %r329}, {%r2368}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2464, %r2461}, {%r326, %r329}, {%r2371}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2473, %r2470}, {%r326, %r329}, {%r2374}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2482, %r2479}, {%r326, %r329}, {%r2377}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2491, %r2488}, {%r326, %r329}, {%r2380}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2500, %r2497}, {%r326, %r329}, {%r2383}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2509, %r2506}, {%r326, %r329}, {%r2386}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2518, %r2515}, {%r326, %r329}, {%r2389}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2448, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2450, %r2448, %r2452;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2453, %r364, %r2455, %r2450;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2457, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2459, %r2457, %r2461;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2462, %r364, %r2464, %r2459;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2466, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2468, %r2466, %r2470;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2471, %r364, %r2473, %r2468;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2475, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2477, %r2475, %r2479;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2480, %r364, %r2482, %r2477;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2484, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2486, %r2484, %r2488;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2489, %r364, %r2491, %r2486;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2493, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2495, %r2493, %r2497;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2498, %r364, %r2500, %r2495;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2502, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2504, %r2502, %r2506;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2507, %r364, %r2509, %r2504;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2511, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2513, %r2511, %r2515;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2516, %r364, %r2518, %r2513;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2520, %r367, %r2455;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2523, %r364, %r2452, %r2520;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2527, %r367, %r2464;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2530, %r364, %r2461, %r2527;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2534, %r367, %r2473;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2537, %r364, %r2470, %r2534;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2541, %r367, %r2482;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2544, %r364, %r2479, %r2541;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2548, %r367, %r2491;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2551, %r364, %r2488, %r2548;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2555, %r367, %r2500;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2558, %r364, %r2497, %r2555;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2562, %r367, %r2509;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2565, %r364, %r2506, %r2562;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2569, %r367, %r2518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2572, %r364, %r2515, %r2569;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2576, %r2577}, {%r411, %r414}, {%r2453, %r2523}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2585, %r2586}, {%r411, %r414}, {%r2462, %r2530}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2594, %r2595}, {%r411, %r414}, {%r2471, %r2537}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2603, %r2604}, {%r411, %r414}, {%r2480, %r2544}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2612, %r2613}, {%r411, %r414}, {%r2489, %r2551}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2621, %r2622}, {%r411, %r414}, {%r2498, %r2558}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2630, %r2631}, {%r411, %r414}, {%r2507, %r2565}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2639, %r2640}, {%r411, %r414}, {%r2516, %r2572}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	bar.sync 	0;
	ld.shared.u32 	%r2716, [%rd7];
	ld.shared.u32 	%r2723, [%rd8];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2733, %r2730}, {%r423, %r426}, {%r2716}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2742, %r2739}, {%r423, %r426}, {%r2723}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2726, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2728, %r2726, %r2730;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2731, %r457, %r2733, %r2728;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2735, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2737, %r2735, %r2739;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2740, %r457, %r2742, %r2737;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2744, %r460, %r2733;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2747, %r457, %r2730, %r2744;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2751, %r460, %r2742;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2754, %r457, %r2739, %r2751;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2777, %r2780}, {%r499, %r502}, {%r2731, %r2747}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2784, %r2788}, {%r499, %r502}, {%r2740, %r2754}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2776, %r2777, %r2777;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2779, %r2780, %r2780, %r2776;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2783, %r2784, %r2784, %r2779;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2787, %r2788, %r2788, %r2783;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3501, %r1575, %r2787, %r3469;
	// end inline asm
	add.s32 	%r3499, %r3467, 1;
	setp.eq.s32 	%p310, %r3499, 25;
	@%p310 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_155;
$L__BB0_154:                            // %pass10340
                                        //   in Loop: Header=BB0_153 Depth=2
	shl.b32 	%r2816, %r3468, 15;
	or.b32  	%r2817, %r158, %r2816;
	cvt.u64.u32 	%rd291, %r2817;
	add.s64 	%rd292, %rd291, %rd9;
	shr.u64 	%rd293, %rd292, 37;
	add.s64 	%rd294, %rd292, %rd293;
	shr.s64 	%rd295, %rd294, 27;
	setp.lt.s64 	%p311, %rd292, 0;
	and.b64  	%rd296, %rd294, -134217728;
	setp.ne.s64 	%p312, %rd296, %rd292;
	and.pred  	%p313, %p311, %p312;
	selp.u64 	%rd297, 1, 0, %p313;
	sub.s64 	%rd298, %rd297, %rd295;
	shl.b64 	%rd299, %rd298, 27;
	add.s64 	%rd300, %rd299, %rd292;
	shl.b64 	%rd301, %rd300, 2;
	add.s64 	%rd302, %rd4, %rd301;
	st.global.u32 	[%rd302], %r3501;
	add.s32 	%r3468, %r3468, 1;
	mov.u32 	%r3499, 0;
	mov.u32 	%r3501, %r3499;
$L__BB0_155:                            // %pass10585
                                        //   in Loop: Header=BB0_153 Depth=2
	ld.shared.u32 	%r2822, [%rd45];
	ld.shared.u32 	%r2829, [%rd46];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2839, %r2836}, {%r423, %r426}, {%r2822}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2848, %r2845}, {%r423, %r426}, {%r2829}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2832, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2834, %r2832, %r2836;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2837, %r457, %r2839, %r2834;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2841, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2843, %r2841, %r2845;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2846, %r457, %r2848, %r2843;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2850, %r460, %r2839;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2853, %r457, %r2836, %r2850;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2857, %r460, %r2848;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2860, %r457, %r2845, %r2857;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2883, %r2886}, {%r499, %r502}, {%r2837, %r2853}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2890, %r2894}, {%r499, %r502}, {%r2846, %r2860}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2882, %r2883, %r2883;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2885, %r2886, %r2886, %r2882;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2889, %r2890, %r2890, %r2885;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2893, %r2894, %r2894, %r2889;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3504, %r1575, %r2893, %r3501;
	// end inline asm
	add.s32 	%r3502, %r3499, 1;
	setp.ne.s32 	%p314, %r3502, 25;
	@%p314 bra 	$L__BB0_157;
// %bb.156:                             // %pass10850
                                        //   in Loop: Header=BB0_153 Depth=2
	shl.b32 	%r2902, %r3468, 15;
	or.b32  	%r2903, %r158, %r2902;
	cvt.u64.u32 	%rd303, %r2903;
	add.s64 	%rd304, %rd303, %rd9;
	shr.u64 	%rd305, %rd304, 37;
	add.s64 	%rd306, %rd304, %rd305;
	shr.s64 	%rd307, %rd306, 27;
	setp.lt.s64 	%p315, %rd304, 0;
	and.b64  	%rd308, %rd306, -134217728;
	setp.ne.s64 	%p316, %rd308, %rd304;
	and.pred  	%p317, %p315, %p316;
	selp.u64 	%rd309, 1, 0, %p317;
	sub.s64 	%rd310, %rd309, %rd307;
	shl.b64 	%rd311, %rd310, 27;
	add.s64 	%rd312, %rd311, %rd304;
	shl.b64 	%rd313, %rd312, 2;
	add.s64 	%rd314, %rd4, %rd313;
	st.global.u32 	[%rd314], %r3504;
	add.s32 	%r3468, %r3468, 1;
	mov.u32 	%r3502, 0;
	mov.u32 	%r3504, %r3502;
$L__BB0_157:                            // %pass11095
                                        //   in Loop: Header=BB0_153 Depth=2
	ld.shared.u32 	%r2908, [%rd47];
	ld.shared.u32 	%r2915, [%rd48];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2925, %r2922}, {%r423, %r426}, {%r2908}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2934, %r2931}, {%r423, %r426}, {%r2915}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2918, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2920, %r2918, %r2922;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2923, %r457, %r2925, %r2920;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2927, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2929, %r2927, %r2931;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2932, %r457, %r2934, %r2929;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2936, %r460, %r2925;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2939, %r457, %r2922, %r2936;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2943, %r460, %r2934;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2946, %r457, %r2931, %r2943;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2969, %r2972}, {%r499, %r502}, {%r2923, %r2939}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2976, %r2980}, {%r499, %r502}, {%r2932, %r2946}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2968, %r2969, %r2969;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2971, %r2972, %r2972, %r2968;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2975, %r2976, %r2976, %r2971;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2979, %r2980, %r2980, %r2975;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3507, %r1575, %r2979, %r3504;
	// end inline asm
	add.s32 	%r3505, %r3502, 1;
	setp.ne.s32 	%p318, %r3505, 25;
	@%p318 bra 	$L__BB0_159;
// %bb.158:                             // %pass11360
                                        //   in Loop: Header=BB0_153 Depth=2
	shl.b32 	%r2988, %r3468, 15;
	or.b32  	%r2989, %r158, %r2988;
	cvt.u64.u32 	%rd315, %r2989;
	add.s64 	%rd316, %rd315, %rd9;
	shr.u64 	%rd317, %rd316, 37;
	add.s64 	%rd318, %rd316, %rd317;
	shr.s64 	%rd319, %rd318, 27;
	setp.lt.s64 	%p319, %rd316, 0;
	and.b64  	%rd320, %rd318, -134217728;
	setp.ne.s64 	%p320, %rd320, %rd316;
	and.pred  	%p321, %p319, %p320;
	selp.u64 	%rd321, 1, 0, %p321;
	sub.s64 	%rd322, %rd321, %rd319;
	shl.b64 	%rd323, %rd322, 27;
	add.s64 	%rd324, %rd323, %rd316;
	shl.b64 	%rd325, %rd324, 2;
	add.s64 	%rd326, %rd4, %rd325;
	st.global.u32 	[%rd326], %r3507;
	add.s32 	%r3468, %r3468, 1;
	mov.u32 	%r3505, 0;
	mov.u32 	%r3507, %r3505;
$L__BB0_159:                            // %pass11605
                                        //   in Loop: Header=BB0_153 Depth=2
	ld.shared.u32 	%r2994, [%rd49];
	ld.shared.u32 	%r3001, [%rd50];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3011, %r3008}, {%r423, %r426}, {%r2994}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3020, %r3017}, {%r423, %r426}, {%r3001}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3004, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3006, %r3004, %r3008;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3009, %r457, %r3011, %r3006;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3013, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3015, %r3013, %r3017;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3018, %r457, %r3020, %r3015;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3022, %r460, %r3011;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3025, %r457, %r3008, %r3022;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3029, %r460, %r3020;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3032, %r457, %r3017, %r3029;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3055, %r3058}, {%r499, %r502}, {%r3009, %r3025}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3062, %r3066}, {%r499, %r502}, {%r3018, %r3032}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3054, %r3055, %r3055;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3057, %r3058, %r3058, %r3054;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3061, %r3062, %r3062, %r3057;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3065, %r3066, %r3066, %r3061;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3510, %r1575, %r3065, %r3507;
	// end inline asm
	add.s32 	%r3508, %r3505, 1;
	setp.ne.s32 	%p322, %r3508, 25;
	@%p322 bra 	$L__BB0_161;
// %bb.160:                             // %pass11870
                                        //   in Loop: Header=BB0_153 Depth=2
	shl.b32 	%r3074, %r3468, 15;
	or.b32  	%r3075, %r158, %r3074;
	cvt.u64.u32 	%rd327, %r3075;
	add.s64 	%rd328, %rd327, %rd9;
	shr.u64 	%rd329, %rd328, 37;
	add.s64 	%rd330, %rd328, %rd329;
	shr.s64 	%rd331, %rd330, 27;
	setp.lt.s64 	%p323, %rd328, 0;
	and.b64  	%rd332, %rd330, -134217728;
	setp.ne.s64 	%p324, %rd332, %rd328;
	and.pred  	%p325, %p323, %p324;
	selp.u64 	%rd333, 1, 0, %p325;
	sub.s64 	%rd334, %rd333, %rd331;
	shl.b64 	%rd335, %rd334, 27;
	add.s64 	%rd336, %rd335, %rd328;
	shl.b64 	%rd337, %rd336, 2;
	add.s64 	%rd338, %rd4, %rd337;
	st.global.u32 	[%rd338], %r3510;
	add.s32 	%r3468, %r3468, 1;
	mov.u32 	%r3508, 0;
	mov.u32 	%r3510, %r3508;
$L__BB0_161:                            // %pass12115
                                        //   in Loop: Header=BB0_153 Depth=2
	ld.shared.u32 	%r3080, [%rd51];
	ld.shared.u32 	%r3087, [%rd52];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3097, %r3094}, {%r423, %r426}, {%r3080}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3106, %r3103}, {%r423, %r426}, {%r3087}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3090, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3092, %r3090, %r3094;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3095, %r457, %r3097, %r3092;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3099, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3101, %r3099, %r3103;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3104, %r457, %r3106, %r3101;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3108, %r460, %r3097;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3111, %r457, %r3094, %r3108;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3115, %r460, %r3106;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3118, %r457, %r3103, %r3115;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3141, %r3144}, {%r499, %r502}, {%r3095, %r3111}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3148, %r3152}, {%r499, %r502}, {%r3104, %r3118}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3140, %r3141, %r3141;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3143, %r3144, %r3144, %r3140;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3147, %r3148, %r3148, %r3143;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3151, %r3152, %r3152, %r3147;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3513, %r1575, %r3151, %r3510;
	// end inline asm
	add.s32 	%r3511, %r3508, 1;
	setp.ne.s32 	%p326, %r3511, 25;
	@%p326 bra 	$L__BB0_163;
// %bb.162:                             // %pass12380
                                        //   in Loop: Header=BB0_153 Depth=2
	shl.b32 	%r3160, %r3468, 15;
	or.b32  	%r3161, %r158, %r3160;
	cvt.u64.u32 	%rd339, %r3161;
	add.s64 	%rd340, %rd339, %rd9;
	shr.u64 	%rd341, %rd340, 37;
	add.s64 	%rd342, %rd340, %rd341;
	shr.s64 	%rd343, %rd342, 27;
	setp.lt.s64 	%p327, %rd340, 0;
	and.b64  	%rd344, %rd342, -134217728;
	setp.ne.s64 	%p328, %rd344, %rd340;
	and.pred  	%p329, %p327, %p328;
	selp.u64 	%rd345, 1, 0, %p329;
	sub.s64 	%rd346, %rd345, %rd343;
	shl.b64 	%rd347, %rd346, 27;
	add.s64 	%rd348, %rd347, %rd340;
	shl.b64 	%rd349, %rd348, 2;
	add.s64 	%rd350, %rd4, %rd349;
	st.global.u32 	[%rd350], %r3513;
	add.s32 	%r3468, %r3468, 1;
	mov.u32 	%r3511, 0;
	mov.u32 	%r3513, %r3511;
$L__BB0_163:                            // %pass12625
                                        //   in Loop: Header=BB0_153 Depth=2
	ld.shared.u32 	%r3166, [%rd53];
	ld.shared.u32 	%r3173, [%rd54];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3183, %r3180}, {%r423, %r426}, {%r3166}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3192, %r3189}, {%r423, %r426}, {%r3173}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3176, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3178, %r3176, %r3180;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3181, %r457, %r3183, %r3178;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3185, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3187, %r3185, %r3189;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3190, %r457, %r3192, %r3187;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3194, %r460, %r3183;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3197, %r457, %r3180, %r3194;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3201, %r460, %r3192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3204, %r457, %r3189, %r3201;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3227, %r3230}, {%r499, %r502}, {%r3181, %r3197}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3234, %r3238}, {%r499, %r502}, {%r3190, %r3204}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3226, %r3227, %r3227;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3229, %r3230, %r3230, %r3226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3233, %r3234, %r3234, %r3229;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3237, %r3238, %r3238, %r3233;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3516, %r1575, %r3237, %r3513;
	// end inline asm
	add.s32 	%r3514, %r3511, 1;
	setp.ne.s32 	%p330, %r3514, 25;
	@%p330 bra 	$L__BB0_165;
// %bb.164:                             // %pass12890
                                        //   in Loop: Header=BB0_153 Depth=2
	shl.b32 	%r3246, %r3468, 15;
	or.b32  	%r3247, %r158, %r3246;
	cvt.u64.u32 	%rd351, %r3247;
	add.s64 	%rd352, %rd351, %rd9;
	shr.u64 	%rd353, %rd352, 37;
	add.s64 	%rd354, %rd352, %rd353;
	shr.s64 	%rd355, %rd354, 27;
	setp.lt.s64 	%p331, %rd352, 0;
	and.b64  	%rd356, %rd354, -134217728;
	setp.ne.s64 	%p332, %rd356, %rd352;
	and.pred  	%p333, %p331, %p332;
	selp.u64 	%rd357, 1, 0, %p333;
	sub.s64 	%rd358, %rd357, %rd355;
	shl.b64 	%rd359, %rd358, 27;
	add.s64 	%rd360, %rd359, %rd352;
	shl.b64 	%rd361, %rd360, 2;
	add.s64 	%rd362, %rd4, %rd361;
	st.global.u32 	[%rd362], %r3516;
	add.s32 	%r3468, %r3468, 1;
	mov.u32 	%r3514, 0;
	mov.u32 	%r3516, %r3514;
$L__BB0_165:                            // %pass13135
                                        //   in Loop: Header=BB0_153 Depth=2
	ld.shared.u32 	%r3252, [%rd55];
	ld.shared.u32 	%r3259, [%rd56];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3269, %r3266}, {%r423, %r426}, {%r3252}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3278, %r3275}, {%r423, %r426}, {%r3259}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3262, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3264, %r3262, %r3266;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3267, %r457, %r3269, %r3264;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3271, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3273, %r3271, %r3275;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3276, %r457, %r3278, %r3273;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3280, %r460, %r3269;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3283, %r457, %r3266, %r3280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3287, %r460, %r3278;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3290, %r457, %r3275, %r3287;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3313, %r3316}, {%r499, %r502}, {%r3267, %r3283}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3320, %r3324}, {%r499, %r502}, {%r3276, %r3290}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3312, %r3313, %r3313;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3315, %r3316, %r3316, %r3312;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3319, %r3320, %r3320, %r3315;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3323, %r3324, %r3324, %r3319;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3519, %r1575, %r3323, %r3516;
	// end inline asm
	add.s32 	%r3517, %r3514, 1;
	setp.ne.s32 	%p334, %r3517, 25;
	@%p334 bra 	$L__BB0_167;
// %bb.166:                             // %pass13400
                                        //   in Loop: Header=BB0_153 Depth=2
	shl.b32 	%r3332, %r3468, 15;
	or.b32  	%r3333, %r158, %r3332;
	cvt.u64.u32 	%rd363, %r3333;
	add.s64 	%rd364, %rd363, %rd9;
	shr.u64 	%rd365, %rd364, 37;
	add.s64 	%rd366, %rd364, %rd365;
	shr.s64 	%rd367, %rd366, 27;
	setp.lt.s64 	%p335, %rd364, 0;
	and.b64  	%rd368, %rd366, -134217728;
	setp.ne.s64 	%p336, %rd368, %rd364;
	and.pred  	%p337, %p335, %p336;
	selp.u64 	%rd369, 1, 0, %p337;
	sub.s64 	%rd370, %rd369, %rd367;
	shl.b64 	%rd371, %rd370, 27;
	add.s64 	%rd372, %rd371, %rd364;
	shl.b64 	%rd373, %rd372, 2;
	add.s64 	%rd374, %rd4, %rd373;
	st.global.u32 	[%rd374], %r3519;
	add.s32 	%r3468, %r3468, 1;
	mov.u32 	%r3517, 0;
	mov.u32 	%r3519, %r3517;
$L__BB0_167:                            // %pass13645
                                        //   in Loop: Header=BB0_153 Depth=2
	ld.shared.u32 	%r3338, [%rd57];
	ld.shared.u32 	%r3345, [%rd58];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3355, %r3352}, {%r423, %r426}, {%r3338}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3364, %r3361}, {%r423, %r426}, {%r3345}, {%r1214, %r1214};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3348, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3350, %r3348, %r3352;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3353, %r457, %r3355, %r3350;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3357, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3359, %r3357, %r3361;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3362, %r457, %r3364, %r3359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3366, %r460, %r3355;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3369, %r457, %r3352, %r3366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3373, %r460, %r3364;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3376, %r457, %r3361, %r3373;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3399, %r3402}, {%r499, %r502}, {%r3353, %r3369}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3406, %r3410}, {%r499, %r502}, {%r3362, %r3376}, {%r1214, %r1214}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3398, %r3399, %r3399;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3401, %r3402, %r3402, %r3398;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3405, %r3406, %r3406, %r3401;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3409, %r3410, %r3410, %r3405;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3469, %r1575, %r3409, %r3519;
	// end inline asm
	add.s32 	%r3467, %r3517, 1;
	setp.ne.s32 	%p338, %r3467, 25;
	@%p338 bra 	$L__BB0_168;
// %bb.234:                             // %pass13910
                                        //   in Loop: Header=BB0_153 Depth=2
	shl.b32 	%r3418, %r3468, 15;
	or.b32  	%r3419, %r158, %r3418;
	cvt.u64.u32 	%rd375, %r3419;
	add.s64 	%rd376, %rd375, %rd9;
	shr.u64 	%rd377, %rd376, 37;
	add.s64 	%rd378, %rd376, %rd377;
	shr.s64 	%rd379, %rd378, 27;
	setp.lt.s64 	%p339, %rd376, 0;
	and.b64  	%rd380, %rd378, -134217728;
	setp.ne.s64 	%p340, %rd380, %rd376;
	and.pred  	%p341, %p339, %p340;
	selp.u64 	%rd381, 1, 0, %p341;
	sub.s64 	%rd382, %rd381, %rd379;
	shl.b64 	%rd383, %rd382, 27;
	add.s64 	%rd384, %rd383, %rd376;
	shl.b64 	%rd385, %rd384, 2;
	add.s64 	%rd386, %rd4, %rd385;
	st.global.u32 	[%rd386], %r3469;
	add.s32 	%r3468, %r3468, 1;
	mov.u32 	%r3467, %r1214;
	mov.u32 	%r3469, %r1214;
	bra.uni 	$L__BB0_168;
$L__BB0_170:                            // %L32728
	mov.u32 	%r3420, 0;
	st.global.u32 	[%rd6], %r3420;
	ret;
$L__BB0_217:                            // %post_box_union
	mov.u64 	%rd193, exception2651;
	cvta.global.u64 	%rd194, %rd193;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd194;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_135:                            // %L6833
	mov.u32 	%r3436, 5;
	st.global.u32 	[%rd6], %r3436;
	mov.u64 	%rd417, exception2603;
	cvta.global.u64 	%rd418, %rd417;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd418;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_136:                            // %L6993
	mov.u32 	%r3435, 5;
	st.global.u32 	[%rd6], %r3435;
	mov.u64 	%rd415, exception2603;
	cvta.global.u64 	%rd416, %rd415;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd416;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_137:                            // %L7153
	mov.u32 	%r3434, 5;
	st.global.u32 	[%rd6], %r3434;
	mov.u64 	%rd413, exception2603;
	cvta.global.u64 	%rd414, %rd413;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd414;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_138:                            // %L7313
	mov.u32 	%r3433, 5;
	st.global.u32 	[%rd6], %r3433;
	mov.u64 	%rd411, exception2603;
	cvta.global.u64 	%rd412, %rd411;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd412;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_139:                            // %L7473
	mov.u32 	%r3432, 5;
	st.global.u32 	[%rd6], %r3432;
	mov.u64 	%rd409, exception2603;
	cvta.global.u64 	%rd410, %rd409;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd410;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_140:                            // %L7633
	mov.u32 	%r3431, 5;
	st.global.u32 	[%rd6], %r3431;
	mov.u64 	%rd407, exception2603;
	cvta.global.u64 	%rd408, %rd407;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd408;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_141:                            // %L7793
	mov.u32 	%r3430, 5;
	st.global.u32 	[%rd6], %r3430;
	mov.u64 	%rd405, exception2603;
	cvta.global.u64 	%rd406, %rd405;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd406;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_142:                            // %L7953
	mov.u32 	%r3429, 5;
	st.global.u32 	[%rd6], %r3429;
	mov.u64 	%rd403, exception2603;
	cvta.global.u64 	%rd404, %rd403;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd404;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_143:                            // %L8113
	mov.u32 	%r3428, 5;
	st.global.u32 	[%rd6], %r3428;
	mov.u64 	%rd401, exception2603;
	cvta.global.u64 	%rd402, %rd401;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd402;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_144:                            // %L8273
	mov.u32 	%r3427, 5;
	st.global.u32 	[%rd6], %r3427;
	mov.u64 	%rd399, exception2603;
	cvta.global.u64 	%rd400, %rd399;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd400;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L8433
	mov.u32 	%r3426, 5;
	st.global.u32 	[%rd6], %r3426;
	mov.u64 	%rd397, exception2603;
	cvta.global.u64 	%rd398, %rd397;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd398;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L8593
	mov.u32 	%r3425, 5;
	st.global.u32 	[%rd6], %r3425;
	mov.u64 	%rd395, exception2603;
	cvta.global.u64 	%rd396, %rd395;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd396;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L8753
	mov.u32 	%r3424, 5;
	st.global.u32 	[%rd6], %r3424;
	mov.u64 	%rd393, exception2603;
	cvta.global.u64 	%rd394, %rd393;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd394;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L8913
	mov.u32 	%r3423, 5;
	st.global.u32 	[%rd6], %r3423;
	mov.u64 	%rd391, exception2603;
	cvta.global.u64 	%rd392, %rd391;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd392;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L9073
	mov.u32 	%r3422, 5;
	st.global.u32 	[%rd6], %r3422;
	mov.u64 	%rd389, exception2603;
	cvta.global.u64 	%rd390, %rd389;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd390;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L9233
	mov.u32 	%r3421, 5;
	st.global.u32 	[%rd6], %r3421;
	mov.u64 	%rd387, exception2603;
	cvta.global.u64 	%rd388, %rd387;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd388;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L169
	mov.u32 	%r3438, 2;
	st.global.u32 	[%rd6], %r3438;
	mov.u64 	%rd421, exception2603;
	cvta.global.u64 	%rd422, %rd421;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd422;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_12:                             // %L312
	mov.u32 	%r3437, 3;
	st.global.u32 	[%rd6], %r3437;
	mov.u64 	%rd419, exception2603;
	cvta.global.u64 	%rd420, %rd419;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd420;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd65, exception1;
	cvta.global.u64 	%rd66, %rd65;
	{ // callseq 45, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd66;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 45
	{ // callseq 46, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 46
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_134:                            // %L1159
	add.u64 	%rd64, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r5, %r3};
	st.local.v2.u32 	[%rd5+8], {%r1, %r85};
	st.local.u32 	[%rd5+16], %r86;
	mov.u64 	%rd70, __unnamed_1;
	cvta.global.u64 	%rd71, %rd70;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd71;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd64;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r512, [retval0+0];
	} // callseq 47
	mov.u32 	%r514, 4;
	st.global.u32 	[%rd6], %r514;
	mov.u64 	%rd73, exception2603;
	cvta.global.u64 	%rd74, %rd73;
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd74;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 48
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 49
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
