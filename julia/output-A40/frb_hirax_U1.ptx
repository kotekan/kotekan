// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception4062[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception4110[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 512, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<298>;
	.reg .b16 	%rs<97>;
	.reg .b32 	%r<3406>;
	.reg .f32 	%f<752>;
	.reg .b64 	%rd<297>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r244, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd71, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r253, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r253, 34943;
	@%p2 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd72, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r245, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r4, %ctaid.x;
	shl.b32 	%r5, %r4, 9;
	or.b32  	%r254, %r2, %r3;
	or.b32  	%r255, %r254, %r5;
	mul.wide.u32 	%rd79, %r255, 4;
	add.s64 	%rd6, %rd72, %rd79;
	mov.u32 	%r256, 1;
	st.global.u32 	[%rd6], %r256;
	setp.gt.u32 	%p3, %r245, 65535;
	@%p3 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r246, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p4, %r246, %r245;
	setp.gt.s32 	%p5, %r246, 131071;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r247, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r246, %r245;
	and.b32  	%r257, %r6, 63;
	setp.ne.s32 	%p7, %r257, 0;
	setp.gt.u32 	%p8, %r247, 1023;
	or.pred  	%p9, %p7, %p8;
	@%p9 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r248, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p10, %r248, %r247;
	setp.lt.s32 	%p11, %r248, 2048;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r258, %r248, %r247;
	mul.hi.s32 	%r259, %r6, 715827883;
	shr.u32 	%r260, %r259, 31;
	shr.s32 	%r261, %r259, 6;
	add.s32 	%r262, %r261, %r260;
	setp.eq.s32 	%p13, %r258, %r262;
	@%p13 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L258
	ld.param.u32 	%r249, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p14, %r249, 0;
	@%p14 bra 	$L__BB0_12;
// %bb.9:                               // %L260
	ld.param.u32 	%r251, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	ld.param.u32 	%r250, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p15, %r250, %r249;
	setp.gt.s32 	%p16, %r250, 64;
	or.pred  	%p17, %p15, %p16;
	setp.lt.s32 	%p18, %r251, 0;
	or.pred  	%p19, %p17, %p18;
	@%p19 bra 	$L__BB0_12;
// %bb.10:                              // %L276
	ld.param.u32 	%r252, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p20, %r252, %r251;
	setp.gt.s32 	%p21, %r252, 2048;
	or.pred  	%p22, %p20, %p21;
	@%p22 bra 	$L__BB0_12;
// %bb.11:                              // %L286
	sub.s32 	%r263, %r252, %r251;
	sub.s32 	%r264, %r250, %r249;
	setp.eq.s32 	%p23, %r263, %r264;
	@%p23 bra 	$L__BB0_159;
	bra.uni 	$L__BB0_12;
$L__BB0_159:                            // %pass162
	and.b32  	%r145, %r3, 3;
	shr.u32 	%r146, %r3, 2;
	mul.lo.s32 	%r265, %r145, %r146;
	and.b32  	%r266, %r265, 7;
	cvt.rn.f32.s32 	%f185, %r266;
	mov.f32 	%f186, 0f40800000;
	div.approx.f32 	%f151, %f185, %f186;
	abs.f32 	%f750, %f151;
	setp.lt.f32 	%p24, %f750, 0f40000000;
	mov.f32 	%f703, 0f40000000;
	setp.gtu.f32 	%p293, %f750, 0f4B800000;
	mov.f32 	%f746, %f750;
	@%p24 bra 	$L__BB0_171;
// %bb.160:
	@%p293 bra 	$L__BB0_167;
	bra.uni 	$L__BB0_161;
$L__BB0_167:
	mov.b32 	%r148, %f750;
	and.b32  	%r267, %r148, 8388607;
	or.b32  	%r3401, %r267, 1065353216;
	mov.b32 	%f745, %r3401;
	add.s32 	%r268, %r148, -1073741824;
	and.b32  	%r3402, %r268, -8388608;
	setp.eq.s32 	%p31, %r3402, 0;
	@%p31 bra 	$L__BB0_170;
// %bb.168:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f196, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f195,%f196;
	// end inline asm
$L__BB0_169:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r269, %r3402, 192937984;
	add.s32 	%r270, %r3401, %r269;
	mov.b32 	%f197, %r270;
	mul.f32 	%f198, %f195, %f197;
	sub.f32 	%f199, %f197, %f198;
	fma.rn.f32 	%f200, %f199, %f195, %f198;
	sub.f32 	%f201, %f197, %f200;
	fma.rz.f32 	%f202, %f201, %f195, %f200;
	cvt.rzi.f32.f32 	%f203, %f202;
	sub.f32 	%f745, %f197, %f203;
	sub.s32 	%r3402, %r3402, %r269;
	mov.b32 	%r3401, %f745;
	setp.ne.s32 	%p32, %r3402, 0;
	setp.ne.s32 	%p33, %r3401, 0;
	and.pred  	%p34, %p32, %p33;
	@%p34 bra 	$L__BB0_169;
$L__BB0_170:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p35, %r148, 2139095039;
	selp.f32 	%f204, 0f7FFFFFFF, 0f4B800000, %p35;
	mul.f32 	%f205, %f745, 0f34000000;
	mul.f32 	%f746, %f204, %f205;
	bra.uni 	$L__BB0_171;
$L__BB0_161:                            // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f188, %f750, %f703;
	cvt.rzi.f32.f32 	%f744, %f188;
	fma.rn.f32 	%f154, %f744, 0fC0000000, %f750;
	mov.b32 	%r147, %f154;
	setp.lt.u32 	%p26, %r147, 1073741824;
	@%p26 bra 	$L__BB0_166;
// %bb.162:
	setp.lt.u32 	%p27, %r147, -2147483647;
	@%p27 bra 	$L__BB0_164;
// %bb.163:
	add.f32 	%f193, %f744, 0fBF800000;
	setp.lt.f32 	%p30, %f154, 0fC0000000;
	add.f32 	%f194, %f193, 0fBF800000;
	selp.f32 	%f744, %f194, %f193, %p30;
	bra.uni 	$L__BB0_166;
$L__BB0_164:
	add.f32 	%f744, %f744, 0f3F800000;
	setp.ltu.f32 	%p28, %f154, 0f40800000;
	@%p28 bra 	$L__BB0_166;
// %bb.165:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f189, %f744, 0f3F800000;
	fma.rn.f32 	%f191, %f703, 0fC0400000, %f154;
	setp.ge.f32 	%p29, %f191, 0f00000000;
	add.f32 	%f192, %f189, 0f3F800000;
	selp.f32 	%f744, %f192, %f189, %p29;
$L__BB0_166:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f746, %f744, 0fC0000000, %f750;
$L__BB0_171:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f206, %f746;
	setp.gtu.f32 	%p36, %f206, 0f7F800000;
	mov.b32 	%r271, %f151;
	and.b32  	%r155, %r271, -2147483648;
	@%p36 bra 	$L__BB0_173;
// %bb.172:
	mov.b32 	%r272, %f746;
	or.b32  	%r273, %r155, %r272;
	mov.b32 	%f746, %r273;
$L__BB0_173:                            // %__nv_fmodf.exit
	shl.b32 	%r158, %r3, 1;
	and.b32  	%r288, %r158, 2;
	mul.lo.s32 	%r159, %r288, %r146;
	cvt.rn.f32.s32 	%f239, %r159;
	mov.f32 	%f240, 0f41800000;
	div.approx.f32 	%f168, %f239, %f240;
	abs.f32 	%f726, %f168;
	setp.lt.f32 	%p44, %f726, 0f40000000;
	setp.gtu.f32 	%p294, %f726, 0f4B800000;
	mov.f32 	%f706, %f726;
	@%p44 bra 	$L__BB0_24;
// %bb.13:
	@%p294 bra 	$L__BB0_20;
	bra.uni 	$L__BB0_14;
$L__BB0_20:
	mov.b32 	%r8, %f726;
	and.b32  	%r289, %r8, 8388607;
	or.b32  	%r3367, %r289, 1065353216;
	mov.b32 	%f705, %r3367;
	add.s32 	%r290, %r8, -1073741824;
	and.b32  	%r3368, %r290, -8388608;
	setp.eq.s32 	%p51, %r3368, 0;
	@%p51 bra 	$L__BB0_23;
// %bb.21:                              // %__nv_fmaf_rn.exit4.i.i.i2363.preheader
	mov.f32 	%f250, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f249,%f250;
	// end inline asm
$L__BB0_22:                             // %__nv_fmaf_rn.exit4.i.i.i2363
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r291, %r3368, 192937984;
	add.s32 	%r292, %r3367, %r291;
	mov.b32 	%f251, %r292;
	mul.f32 	%f252, %f249, %f251;
	sub.f32 	%f253, %f251, %f252;
	fma.rn.f32 	%f254, %f253, %f249, %f252;
	sub.f32 	%f255, %f251, %f254;
	fma.rz.f32 	%f256, %f255, %f249, %f254;
	cvt.rzi.f32.f32 	%f257, %f256;
	sub.f32 	%f705, %f251, %f257;
	sub.s32 	%r3368, %r3368, %r291;
	mov.b32 	%r3367, %f705;
	setp.ne.s32 	%p52, %r3368, 0;
	setp.ne.s32 	%p53, %r3367, 0;
	and.pred  	%p54, %p52, %p53;
	@%p54 bra 	$L__BB0_22;
$L__BB0_23:                             // %__internal_fmodf_slowpath_mod.exit.i.i2365
	setp.gt.u32 	%p55, %r8, 2139095039;
	selp.f32 	%f258, 0f7FFFFFFF, 0f4B800000, %p55;
	mul.f32 	%f259, %f705, 0f34000000;
	mul.f32 	%f706, %f258, %f259;
	bra.uni 	$L__BB0_24;
$L__BB0_14:                             // %__nv_fast_fdividef.exit.i.i.i2342
	div.approx.f32 	%f242, %f726, %f703;
	cvt.rzi.f32.f32 	%f704, %f242;
	fma.rn.f32 	%f2, %f704, 0fC0000000, %f726;
	mov.b32 	%r7, %f2;
	setp.lt.u32 	%p46, %r7, 1073741824;
	@%p46 bra 	$L__BB0_19;
// %bb.15:
	setp.lt.u32 	%p47, %r7, -2147483647;
	@%p47 bra 	$L__BB0_17;
// %bb.16:
	add.f32 	%f247, %f704, 0fBF800000;
	setp.lt.f32 	%p50, %f2, 0fC0000000;
	add.f32 	%f248, %f247, 0fBF800000;
	selp.f32 	%f704, %f248, %f247, %p50;
	bra.uni 	$L__BB0_19;
$L__BB0_17:
	add.f32 	%f704, %f704, 0f3F800000;
	setp.ltu.f32 	%p48, %f2, 0f40800000;
	@%p48 bra 	$L__BB0_19;
// %bb.18:                              // %__nv_fmaf_rn.exit.i.i.i2346
	add.f32 	%f243, %f704, 0f3F800000;
	fma.rn.f32 	%f245, %f703, 0fC0400000, %f2;
	setp.ge.f32 	%p49, %f245, 0f00000000;
	add.f32 	%f246, %f243, 0f3F800000;
	selp.f32 	%f704, %f246, %f243, %p49;
$L__BB0_19:                             // %__internal_fmodf_fastpath_quot.exit.i.i2349
	fma.rn.f32 	%f706, %f704, 0fC0000000, %f726;
$L__BB0_24:                             // %__internal_fmodf_kernel.exit.i2368
	abs.f32 	%f260, %f706;
	setp.gtu.f32 	%p56, %f260, 0f7F800000;
	mov.b32 	%r293, %f168;
	and.b32  	%r15, %r293, -2147483648;
	@%p56 bra 	$L__BB0_26;
// %bb.25:
	mov.b32 	%r294, %f706;
	or.b32  	%r295, %r15, %r294;
	mov.b32 	%f706, %r295;
$L__BB0_26:                             // %__nv_fmodf.exit2369
	add.s32 	%r304, %r159, %r146;
	cvt.rn.f32.s32 	%f291, %r304;
	div.approx.f32 	%f18, %f291, %f240;
	abs.f32 	%f730, %f18;
	setp.lt.f32 	%p64, %f730, 0f40000000;
	setp.gtu.f32 	%p295, %f730, 0f4B800000;
	mov.f32 	%f710, %f730;
	@%p64 bra 	$L__BB0_38;
// %bb.27:
	@%p295 bra 	$L__BB0_34;
	bra.uni 	$L__BB0_28;
$L__BB0_34:
	mov.b32 	%r17, %f730;
	and.b32  	%r305, %r17, 8388607;
	or.b32  	%r3369, %r305, 1065353216;
	mov.b32 	%f709, %r3369;
	add.s32 	%r306, %r17, -1073741824;
	and.b32  	%r3370, %r306, -8388608;
	setp.eq.s32 	%p71, %r3370, 0;
	@%p71 bra 	$L__BB0_37;
// %bb.35:                              // %__nv_fmaf_rn.exit4.i.i.i2394.preheader
	mov.f32 	%f302, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f301,%f302;
	// end inline asm
$L__BB0_36:                             // %__nv_fmaf_rn.exit4.i.i.i2394
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r307, %r3370, 192937984;
	add.s32 	%r308, %r3369, %r307;
	mov.b32 	%f303, %r308;
	mul.f32 	%f304, %f301, %f303;
	sub.f32 	%f305, %f303, %f304;
	fma.rn.f32 	%f306, %f305, %f301, %f304;
	sub.f32 	%f307, %f303, %f306;
	fma.rz.f32 	%f308, %f307, %f301, %f306;
	cvt.rzi.f32.f32 	%f309, %f308;
	sub.f32 	%f709, %f303, %f309;
	sub.s32 	%r3370, %r3370, %r307;
	mov.b32 	%r3369, %f709;
	setp.ne.s32 	%p72, %r3370, 0;
	setp.ne.s32 	%p73, %r3369, 0;
	and.pred  	%p74, %p72, %p73;
	@%p74 bra 	$L__BB0_36;
$L__BB0_37:                             // %__internal_fmodf_slowpath_mod.exit.i.i2396
	setp.gt.u32 	%p75, %r17, 2139095039;
	selp.f32 	%f310, 0f7FFFFFFF, 0f4B800000, %p75;
	mul.f32 	%f311, %f709, 0f34000000;
	mul.f32 	%f710, %f310, %f311;
	bra.uni 	$L__BB0_38;
$L__BB0_28:                             // %__nv_fast_fdividef.exit.i.i.i2373
	div.approx.f32 	%f294, %f730, %f703;
	cvt.rzi.f32.f32 	%f708, %f294;
	fma.rn.f32 	%f21, %f708, 0fC0000000, %f730;
	mov.b32 	%r16, %f21;
	setp.lt.u32 	%p66, %r16, 1073741824;
	@%p66 bra 	$L__BB0_33;
// %bb.29:
	setp.lt.u32 	%p67, %r16, -2147483647;
	@%p67 bra 	$L__BB0_31;
// %bb.30:
	add.f32 	%f299, %f708, 0fBF800000;
	setp.lt.f32 	%p70, %f21, 0fC0000000;
	add.f32 	%f300, %f299, 0fBF800000;
	selp.f32 	%f708, %f300, %f299, %p70;
	bra.uni 	$L__BB0_33;
$L__BB0_31:
	add.f32 	%f708, %f708, 0f3F800000;
	setp.ltu.f32 	%p68, %f21, 0f40800000;
	@%p68 bra 	$L__BB0_33;
// %bb.32:                              // %__nv_fmaf_rn.exit.i.i.i2377
	add.f32 	%f295, %f708, 0f3F800000;
	fma.rn.f32 	%f297, %f703, 0fC0400000, %f21;
	setp.ge.f32 	%p69, %f297, 0f00000000;
	add.f32 	%f298, %f295, 0f3F800000;
	selp.f32 	%f708, %f298, %f295, %p69;
$L__BB0_33:                             // %__internal_fmodf_fastpath_quot.exit.i.i2380
	fma.rn.f32 	%f710, %f708, 0fC0000000, %f730;
$L__BB0_38:                             // %__internal_fmodf_kernel.exit.i2399
	abs.f32 	%f312, %f710;
	setp.gtu.f32 	%p76, %f312, 0f7F800000;
	mov.b32 	%r309, %f18;
	and.b32  	%r24, %r309, -2147483648;
	@%p76 bra 	$L__BB0_40;
// %bb.39:
	mov.b32 	%r310, %f710;
	or.b32  	%r311, %r24, %r310;
	mov.b32 	%f710, %r311;
$L__BB0_40:                             // %__nv_fmodf.exit2400
	mul.lo.s32 	%r27, %r158, %r146;
	and.b32  	%r326, %r27, 2;
	cvt.rn.f32.s32 	%f345, %r326;
	div.approx.f32 	%f35, %f345, %f703;
	abs.f32 	%f734, %f35;
	setp.lt.f32 	%p84, %f734, 0f40000000;
	setp.gtu.f32 	%p296, %f734, 0f4B800000;
	mov.f32 	%f714, %f734;
	@%p84 bra 	$L__BB0_52;
// %bb.41:
	@%p296 bra 	$L__BB0_48;
	bra.uni 	$L__BB0_42;
$L__BB0_48:
	mov.b32 	%r29, %f734;
	and.b32  	%r327, %r29, 8388607;
	or.b32  	%r3371, %r327, 1065353216;
	mov.b32 	%f713, %r3371;
	add.s32 	%r328, %r29, -1073741824;
	and.b32  	%r3372, %r328, -8388608;
	setp.eq.s32 	%p91, %r3372, 0;
	@%p91 bra 	$L__BB0_51;
// %bb.49:                              // %__nv_fmaf_rn.exit4.i.i.i2425.preheader
	mov.f32 	%f356, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f355,%f356;
	// end inline asm
$L__BB0_50:                             // %__nv_fmaf_rn.exit4.i.i.i2425
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r329, %r3372, 192937984;
	add.s32 	%r330, %r3371, %r329;
	mov.b32 	%f357, %r330;
	mul.f32 	%f358, %f355, %f357;
	sub.f32 	%f359, %f357, %f358;
	fma.rn.f32 	%f360, %f359, %f355, %f358;
	sub.f32 	%f361, %f357, %f360;
	fma.rz.f32 	%f362, %f361, %f355, %f360;
	cvt.rzi.f32.f32 	%f363, %f362;
	sub.f32 	%f713, %f357, %f363;
	sub.s32 	%r3372, %r3372, %r329;
	mov.b32 	%r3371, %f713;
	setp.ne.s32 	%p92, %r3372, 0;
	setp.ne.s32 	%p93, %r3371, 0;
	and.pred  	%p94, %p92, %p93;
	@%p94 bra 	$L__BB0_50;
$L__BB0_51:                             // %__internal_fmodf_slowpath_mod.exit.i.i2427
	setp.gt.u32 	%p95, %r29, 2139095039;
	selp.f32 	%f364, 0f7FFFFFFF, 0f4B800000, %p95;
	mul.f32 	%f365, %f713, 0f34000000;
	mul.f32 	%f714, %f364, %f365;
	bra.uni 	$L__BB0_52;
$L__BB0_42:                             // %__nv_fast_fdividef.exit.i.i.i2404
	div.approx.f32 	%f348, %f734, %f703;
	cvt.rzi.f32.f32 	%f712, %f348;
	fma.rn.f32 	%f38, %f712, 0fC0000000, %f734;
	mov.b32 	%r28, %f38;
	setp.lt.u32 	%p86, %r28, 1073741824;
	@%p86 bra 	$L__BB0_47;
// %bb.43:
	setp.lt.u32 	%p87, %r28, -2147483647;
	@%p87 bra 	$L__BB0_45;
// %bb.44:
	add.f32 	%f353, %f712, 0fBF800000;
	setp.lt.f32 	%p90, %f38, 0fC0000000;
	add.f32 	%f354, %f353, 0fBF800000;
	selp.f32 	%f712, %f354, %f353, %p90;
	bra.uni 	$L__BB0_47;
$L__BB0_45:
	add.f32 	%f712, %f712, 0f3F800000;
	setp.ltu.f32 	%p88, %f38, 0f40800000;
	@%p88 bra 	$L__BB0_47;
// %bb.46:                              // %__nv_fmaf_rn.exit.i.i.i2408
	add.f32 	%f349, %f712, 0f3F800000;
	fma.rn.f32 	%f351, %f703, 0fC0400000, %f38;
	setp.ge.f32 	%p89, %f351, 0f00000000;
	add.f32 	%f352, %f349, 0f3F800000;
	selp.f32 	%f712, %f352, %f349, %p89;
$L__BB0_47:                             // %__internal_fmodf_fastpath_quot.exit.i.i2411
	fma.rn.f32 	%f714, %f712, 0fC0000000, %f734;
$L__BB0_52:                             // %__internal_fmodf_kernel.exit.i2430
	mov.f32 	%f230, 0f00000000;
	abs.f32 	%f366, %f714;
	setp.gtu.f32 	%p96, %f366, 0f7F800000;
	mov.b32 	%r331, %f35;
	and.b32  	%r36, %r331, -2147483648;
	@%p96 bra 	$L__BB0_54;
// %bb.53:
	mov.b32 	%r332, %f714;
	or.b32  	%r333, %r36, %r332;
	mov.b32 	%f714, %r333;
$L__BB0_54:                             // %__nv_fmodf.exit2431
	add.f32 	%f367, %f714, %f714;
	mov.b32 	%r334, %f367;
	and.b32  	%r335, %r334, -2147483648;
	or.b32  	%r336, %r335, 1056964608;
	mov.b32 	%f368, %r336;
	add.f32 	%f369, %f367, %f368;
	cvt.rzi.f32.f32 	%f370, %f369;
	abs.f32 	%f371, %f367;
	setp.gt.f32 	%p97, %f371, 0f4B000000;
	selp.f32 	%f372, %f367, %f370, %p97;
	cvt.rzi.f32.f32 	%f373, %f367;
	setp.lt.f32 	%p98, %f371, 0f3F000000;
	selp.f32 	%f374, %f373, %f372, %p98;
	cvt.rzi.s32.f32 	%r337, %f374;
	fma.rn.f32 	%f375, %f374, 0fBF000000, %f714;
	mul.f32 	%f376, %f375, %f375;
	fma.rn.f32 	%f377, %f376, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f378, %f376, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f379, %f377, %f376, 0fC0A55DF6;
	fma.rn.f32 	%f380, %f378, %f376, 0f4081E0CF;
	fma.rn.f32 	%f381, %f376, %f375, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f376, 0fC09DE9E6;
	fma.rn.f32 	%f383, %f379, %f381, 0f00000000;
	fma.rn.f32 	%f384, %f382, %f376, 0f3F800000;
	fma.rn.f32 	%f385, %f375, 0f40490FDB, %f383;
	and.b32  	%r338, %r337, 1;
	setp.eq.b32 	%p99, %r338, 1;
	selp.f32 	%f386, %f384, %f385, %p99;
	selp.f32 	%f387, %f385, %f384, %p99;
	and.b32  	%r339, %r337, 2;
	setp.eq.s32 	%p100, %r339, 0;
	neg.f32 	%f388, %f386;
	selp.f32 	%f389, %f386, %f388, %p100;
	add.s32 	%r340, %r337, 1;
	and.b32  	%r341, %r340, 2;
	setp.eq.s32 	%p101, %r341, 0;
	sub.f32 	%f391, %f230, %f387;
	cvt.rzi.f32.f32 	%f393, %f714;
	setp.eq.f32 	%p102, %f393, %f714;
	mul.f32 	%f394, %f714, 0f00000000;
	selp.f32 	%f76, %f394, %f389, %p102;
	abs.f32 	%f395, %f714;
	add.s32 	%r342, %r27, %r146;
	and.b32  	%r343, %r342, 3;
	cvt.rn.f32.s32 	%f397, %r343;
	div.approx.f32 	%f54, %f397, %f703;
	abs.f32 	%f738, %f54;
	setp.lt.f32 	%p104, %f738, 0f40000000;
	setp.gtu.f32 	%p297, %f738, 0f4B800000;
	mov.f32 	%f718, %f738;
	@%p104 bra 	$L__BB0_66;
// %bb.55:
	@%p297 bra 	$L__BB0_62;
	bra.uni 	$L__BB0_56;
$L__BB0_62:
	mov.b32 	%r38, %f738;
	and.b32  	%r344, %r38, 8388607;
	or.b32  	%r3373, %r344, 1065353216;
	mov.b32 	%f717, %r3373;
	add.s32 	%r345, %r38, -1073741824;
	and.b32  	%r3374, %r345, -8388608;
	setp.eq.s32 	%p111, %r3374, 0;
	@%p111 bra 	$L__BB0_65;
// %bb.63:                              // %__nv_fmaf_rn.exit4.i.i.i2456.preheader
	mov.f32 	%f408, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f407,%f408;
	// end inline asm
$L__BB0_64:                             // %__nv_fmaf_rn.exit4.i.i.i2456
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r346, %r3374, 192937984;
	add.s32 	%r347, %r3373, %r346;
	mov.b32 	%f409, %r347;
	mul.f32 	%f410, %f407, %f409;
	sub.f32 	%f411, %f409, %f410;
	fma.rn.f32 	%f412, %f411, %f407, %f410;
	sub.f32 	%f413, %f409, %f412;
	fma.rz.f32 	%f414, %f413, %f407, %f412;
	cvt.rzi.f32.f32 	%f415, %f414;
	sub.f32 	%f717, %f409, %f415;
	sub.s32 	%r3374, %r3374, %r346;
	mov.b32 	%r3373, %f717;
	setp.ne.s32 	%p112, %r3374, 0;
	setp.ne.s32 	%p113, %r3373, 0;
	and.pred  	%p114, %p112, %p113;
	@%p114 bra 	$L__BB0_64;
$L__BB0_65:                             // %__internal_fmodf_slowpath_mod.exit.i.i2458
	setp.gt.u32 	%p115, %r38, 2139095039;
	selp.f32 	%f416, 0f7FFFFFFF, 0f4B800000, %p115;
	mul.f32 	%f417, %f717, 0f34000000;
	mul.f32 	%f718, %f416, %f417;
	bra.uni 	$L__BB0_66;
$L__BB0_56:                             // %__nv_fast_fdividef.exit.i.i.i2435
	div.approx.f32 	%f400, %f738, %f703;
	cvt.rzi.f32.f32 	%f716, %f400;
	fma.rn.f32 	%f57, %f716, 0fC0000000, %f738;
	mov.b32 	%r37, %f57;
	setp.lt.u32 	%p106, %r37, 1073741824;
	@%p106 bra 	$L__BB0_61;
// %bb.57:
	setp.lt.u32 	%p107, %r37, -2147483647;
	@%p107 bra 	$L__BB0_59;
// %bb.58:
	add.f32 	%f405, %f716, 0fBF800000;
	setp.lt.f32 	%p110, %f57, 0fC0000000;
	add.f32 	%f406, %f405, 0fBF800000;
	selp.f32 	%f716, %f406, %f405, %p110;
	bra.uni 	$L__BB0_61;
$L__BB0_59:
	add.f32 	%f716, %f716, 0f3F800000;
	setp.ltu.f32 	%p108, %f57, 0f40800000;
	@%p108 bra 	$L__BB0_61;
// %bb.60:                              // %__nv_fmaf_rn.exit.i.i.i2439
	add.f32 	%f401, %f716, 0f3F800000;
	fma.rn.f32 	%f403, %f703, 0fC0400000, %f57;
	setp.ge.f32 	%p109, %f403, 0f00000000;
	add.f32 	%f404, %f401, 0f3F800000;
	selp.f32 	%f716, %f404, %f401, %p109;
$L__BB0_61:                             // %__internal_fmodf_fastpath_quot.exit.i.i2442
	fma.rn.f32 	%f718, %f716, 0fC0000000, %f738;
$L__BB0_66:                             // %__internal_fmodf_kernel.exit.i2461
	selp.f32 	%f392, %f387, %f391, %p101;
	setp.gt.f32 	%p103, %f395, 0f4B800000;
	add.f32 	%f396, %f76, 0f3F800000;
	abs.f32 	%f418, %f718;
	setp.gtu.f32 	%p116, %f418, 0f7F800000;
	mov.b32 	%r348, %f54;
	and.b32  	%r45, %r348, -2147483648;
	@%p116 bra 	$L__BB0_68;
// %bb.67:
	mov.b32 	%r349, %f718;
	or.b32  	%r350, %r45, %r349;
	mov.b32 	%f718, %r350;
$L__BB0_68:                             // %__nv_fmodf.exit2462
	selp.f32 	%f53, %f396, %f392, %p103;
	add.f32 	%f419, %f718, %f718;
	mov.b32 	%r351, %f419;
	and.b32  	%r352, %r351, -2147483648;
	or.b32  	%r353, %r352, 1056964608;
	mov.b32 	%f420, %r353;
	add.f32 	%f421, %f419, %f420;
	cvt.rzi.f32.f32 	%f422, %f421;
	abs.f32 	%f423, %f419;
	setp.gt.f32 	%p117, %f423, 0f4B000000;
	selp.f32 	%f424, %f419, %f422, %p117;
	cvt.rzi.f32.f32 	%f425, %f419;
	setp.lt.f32 	%p118, %f423, 0f3F000000;
	selp.f32 	%f426, %f425, %f424, %p118;
	cvt.rzi.s32.f32 	%r354, %f426;
	fma.rn.f32 	%f427, %f426, 0fBF000000, %f718;
	mul.f32 	%f428, %f427, %f427;
	fma.rn.f32 	%f429, %f428, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f430, %f428, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f431, %f429, %f428, 0fC0A55DF6;
	fma.rn.f32 	%f432, %f430, %f428, 0f4081E0CF;
	fma.rn.f32 	%f433, %f428, %f427, 0f00000000;
	fma.rn.f32 	%f434, %f432, %f428, 0fC09DE9E6;
	fma.rn.f32 	%f435, %f431, %f433, 0f00000000;
	fma.rn.f32 	%f436, %f434, %f428, 0f3F800000;
	fma.rn.f32 	%f437, %f427, 0f40490FDB, %f435;
	and.b32  	%r355, %r354, 1;
	setp.eq.b32 	%p119, %r355, 1;
	selp.f32 	%f438, %f436, %f437, %p119;
	selp.f32 	%f439, %f437, %f436, %p119;
	and.b32  	%r356, %r354, 2;
	setp.eq.s32 	%p120, %r356, 0;
	neg.f32 	%f440, %f438;
	selp.f32 	%f441, %f438, %f440, %p120;
	add.s32 	%r357, %r354, 1;
	and.b32  	%r358, %r357, 2;
	setp.eq.s32 	%p121, %r358, 0;
	sub.f32 	%f443, %f230, %f439;
	selp.f32 	%f444, %f439, %f443, %p121;
	cvt.rzi.f32.f32 	%f445, %f718;
	setp.eq.f32 	%p122, %f445, %f718;
	mul.f32 	%f446, %f718, 0f00000000;
	selp.f32 	%f78, %f446, %f441, %p122;
	abs.f32 	%f447, %f718;
	setp.gt.f32 	%p123, %f447, 0f4B800000;
	add.f32 	%f448, %f78, 0f3F800000;
	selp.f32 	%f72, %f448, %f444, %p123;
	and.b32  	%r46, %r3, 2;
	setp.eq.s32 	%p124, %r46, 0;
	mov.f32 	%f75, %f53;
	mov.f32 	%f77, %f72;
	@%p124 bra 	$L__BB0_70;
// %bb.69:                              // %L682
	neg.f32 	%f77, %f78;
	neg.f32 	%f75, %f76;
	mov.f32 	%f76, %f53;
	mov.f32 	%f78, %f72;
$L__BB0_70:                             // %L684
	@%p24 bra 	$L__BB0_181;
// %bb.71:
	@%p293 bra 	$L__BB0_177;
	bra.uni 	$L__BB0_72;
$L__BB0_177:
	mov.b32 	%r161, %f750;
	and.b32  	%r365, %r161, 8388607;
	or.b32  	%r3403, %r365, 1065353216;
	mov.b32 	%f749, %r3403;
	add.s32 	%r366, %r161, -1073741824;
	and.b32  	%r3404, %r366, -8388608;
	setp.eq.s32 	%p132, %r3404, 0;
	@%p132 bra 	$L__BB0_180;
// %bb.178:                             // %__nv_fmaf_rn.exit4.i.i.i2487.preheader
	mov.f32 	%f458, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f457,%f458;
	// end inline asm
$L__BB0_179:                            // %__nv_fmaf_rn.exit4.i.i.i2487
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r367, %r3404, 192937984;
	add.s32 	%r368, %r3403, %r367;
	mov.b32 	%f459, %r368;
	mul.f32 	%f460, %f457, %f459;
	sub.f32 	%f461, %f459, %f460;
	fma.rn.f32 	%f462, %f461, %f457, %f460;
	sub.f32 	%f463, %f459, %f462;
	fma.rz.f32 	%f464, %f463, %f457, %f462;
	cvt.rzi.f32.f32 	%f465, %f464;
	sub.f32 	%f749, %f459, %f465;
	sub.s32 	%r3404, %r3404, %r367;
	mov.b32 	%r3403, %f749;
	setp.ne.s32 	%p133, %r3404, 0;
	setp.ne.s32 	%p134, %r3403, 0;
	and.pred  	%p135, %p133, %p134;
	@%p135 bra 	$L__BB0_179;
$L__BB0_180:                            // %__internal_fmodf_slowpath_mod.exit.i.i2489
	setp.gt.u32 	%p136, %r161, 2139095039;
	selp.f32 	%f466, 0f7FFFFFFF, 0f4B800000, %p136;
	mul.f32 	%f467, %f749, 0f34000000;
	mul.f32 	%f750, %f466, %f467;
	bra.uni 	$L__BB0_181;
$L__BB0_72:                             // %__nv_fast_fdividef.exit.i.i.i2466
	div.approx.f32 	%f450, %f750, %f703;
	cvt.rzi.f32.f32 	%f748, %f450;
	fma.rn.f32 	%f171, %f748, 0fC0000000, %f750;
	mov.b32 	%r160, %f171;
	setp.lt.u32 	%p127, %r160, 1073741824;
	@%p127 bra 	$L__BB0_176;
// %bb.73:
	setp.lt.u32 	%p128, %r160, -2147483647;
	@%p128 bra 	$L__BB0_174;
// %bb.74:
	add.f32 	%f455, %f748, 0fBF800000;
	setp.lt.f32 	%p131, %f171, 0fC0000000;
	add.f32 	%f456, %f455, 0fBF800000;
	selp.f32 	%f748, %f456, %f455, %p131;
	bra.uni 	$L__BB0_176;
$L__BB0_174:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p129, %f171, 0f40800000;
	@%p129 bra 	$L__BB0_176;
// %bb.175:                             // %__nv_fmaf_rn.exit.i.i.i2470
	add.f32 	%f451, %f748, 0f3F800000;
	fma.rn.f32 	%f453, %f703, 0fC0400000, %f171;
	setp.ge.f32 	%p130, %f453, 0f00000000;
	add.f32 	%f454, %f451, 0f3F800000;
	selp.f32 	%f748, %f454, %f451, %p130;
$L__BB0_176:                            // %__internal_fmodf_fastpath_quot.exit.i.i2473
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_181:                            // %__internal_fmodf_kernel.exit.i2492
	abs.f32 	%f468, %f750;
	setp.gtu.f32 	%p137, %f468, 0f7F800000;
	@%p137 bra 	$L__BB0_183;
// %bb.182:
	mov.b32 	%r369, %f750;
	or.b32  	%r370, %r155, %r369;
	mov.b32 	%f750, %r370;
$L__BB0_183:                            // %__nv_fmodf.exit2493
	@%p44 bra 	$L__BB0_86;
// %bb.75:
	@%p294 bra 	$L__BB0_82;
	bra.uni 	$L__BB0_76;
$L__BB0_82:
	mov.b32 	%r50, %f726;
	and.b32  	%r385, %r50, 8388607;
	or.b32  	%r3375, %r385, 1065353216;
	mov.b32 	%f725, %r3375;
	add.s32 	%r386, %r50, -1073741824;
	and.b32  	%r3376, %r386, -8388608;
	setp.eq.s32 	%p152, %r3376, 0;
	@%p152 bra 	$L__BB0_85;
// %bb.83:                              // %__nv_fmaf_rn.exit4.i.i.i2518.preheader
	mov.f32 	%f510, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f509,%f510;
	// end inline asm
$L__BB0_84:                             // %__nv_fmaf_rn.exit4.i.i.i2518
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r387, %r3376, 192937984;
	add.s32 	%r388, %r3375, %r387;
	mov.b32 	%f511, %r388;
	mul.f32 	%f512, %f509, %f511;
	sub.f32 	%f513, %f511, %f512;
	fma.rn.f32 	%f514, %f513, %f509, %f512;
	sub.f32 	%f515, %f511, %f514;
	fma.rz.f32 	%f516, %f515, %f509, %f514;
	cvt.rzi.f32.f32 	%f517, %f516;
	sub.f32 	%f725, %f511, %f517;
	sub.s32 	%r3376, %r3376, %r387;
	mov.b32 	%r3375, %f725;
	setp.ne.s32 	%p153, %r3376, 0;
	setp.ne.s32 	%p154, %r3375, 0;
	and.pred  	%p155, %p153, %p154;
	@%p155 bra 	$L__BB0_84;
$L__BB0_85:                             // %__internal_fmodf_slowpath_mod.exit.i.i2520
	setp.gt.u32 	%p156, %r50, 2139095039;
	selp.f32 	%f518, 0f7FFFFFFF, 0f4B800000, %p156;
	mul.f32 	%f519, %f725, 0f34000000;
	mul.f32 	%f726, %f518, %f519;
	bra.uni 	$L__BB0_86;
$L__BB0_76:                             // %__nv_fast_fdividef.exit.i.i.i2497
	div.approx.f32 	%f502, %f726, %f703;
	cvt.rzi.f32.f32 	%f724, %f502;
	fma.rn.f32 	%f80, %f724, 0fC0000000, %f726;
	mov.b32 	%r49, %f80;
	setp.lt.u32 	%p147, %r49, 1073741824;
	@%p147 bra 	$L__BB0_81;
// %bb.77:
	setp.lt.u32 	%p148, %r49, -2147483647;
	@%p148 bra 	$L__BB0_79;
// %bb.78:
	add.f32 	%f507, %f724, 0fBF800000;
	setp.lt.f32 	%p151, %f80, 0fC0000000;
	add.f32 	%f508, %f507, 0fBF800000;
	selp.f32 	%f724, %f508, %f507, %p151;
	bra.uni 	$L__BB0_81;
$L__BB0_79:
	add.f32 	%f724, %f724, 0f3F800000;
	setp.ltu.f32 	%p149, %f80, 0f40800000;
	@%p149 bra 	$L__BB0_81;
// %bb.80:                              // %__nv_fmaf_rn.exit.i.i.i2501
	add.f32 	%f503, %f724, 0f3F800000;
	fma.rn.f32 	%f505, %f703, 0fC0400000, %f80;
	setp.ge.f32 	%p150, %f505, 0f00000000;
	add.f32 	%f506, %f503, 0f3F800000;
	selp.f32 	%f724, %f506, %f503, %p150;
$L__BB0_81:                             // %__internal_fmodf_fastpath_quot.exit.i.i2504
	fma.rn.f32 	%f726, %f724, 0fC0000000, %f726;
$L__BB0_86:                             // %__internal_fmodf_kernel.exit.i2523
	abs.f32 	%f520, %f726;
	setp.gtu.f32 	%p157, %f520, 0f7F800000;
	@%p157 bra 	$L__BB0_88;
// %bb.87:
	mov.b32 	%r389, %f726;
	or.b32  	%r390, %r15, %r389;
	mov.b32 	%f726, %r390;
$L__BB0_88:                             // %__nv_fmodf.exit2524
	@%p64 bra 	$L__BB0_100;
// %bb.89:
	@%p295 bra 	$L__BB0_96;
	bra.uni 	$L__BB0_90;
$L__BB0_96:
	mov.b32 	%r58, %f730;
	and.b32  	%r399, %r58, 8388607;
	or.b32  	%r3377, %r399, 1065353216;
	mov.b32 	%f729, %r3377;
	add.s32 	%r400, %r58, -1073741824;
	and.b32  	%r3378, %r400, -8388608;
	setp.eq.s32 	%p172, %r3378, 0;
	@%p172 bra 	$L__BB0_99;
// %bb.97:                              // %__nv_fmaf_rn.exit4.i.i.i2549.preheader
	mov.f32 	%f560, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f559,%f560;
	// end inline asm
$L__BB0_98:                             // %__nv_fmaf_rn.exit4.i.i.i2549
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r401, %r3378, 192937984;
	add.s32 	%r402, %r3377, %r401;
	mov.b32 	%f561, %r402;
	mul.f32 	%f562, %f559, %f561;
	sub.f32 	%f563, %f561, %f562;
	fma.rn.f32 	%f564, %f563, %f559, %f562;
	sub.f32 	%f565, %f561, %f564;
	fma.rz.f32 	%f566, %f565, %f559, %f564;
	cvt.rzi.f32.f32 	%f567, %f566;
	sub.f32 	%f729, %f561, %f567;
	sub.s32 	%r3378, %r3378, %r401;
	mov.b32 	%r3377, %f729;
	setp.ne.s32 	%p173, %r3378, 0;
	setp.ne.s32 	%p174, %r3377, 0;
	and.pred  	%p175, %p173, %p174;
	@%p175 bra 	$L__BB0_98;
$L__BB0_99:                             // %__internal_fmodf_slowpath_mod.exit.i.i2551
	setp.gt.u32 	%p176, %r58, 2139095039;
	selp.f32 	%f568, 0f7FFFFFFF, 0f4B800000, %p176;
	mul.f32 	%f569, %f729, 0f34000000;
	mul.f32 	%f730, %f568, %f569;
	bra.uni 	$L__BB0_100;
$L__BB0_90:                             // %__nv_fast_fdividef.exit.i.i.i2528
	div.approx.f32 	%f552, %f730, %f703;
	cvt.rzi.f32.f32 	%f728, %f552;
	fma.rn.f32 	%f97, %f728, 0fC0000000, %f730;
	mov.b32 	%r57, %f97;
	setp.lt.u32 	%p167, %r57, 1073741824;
	@%p167 bra 	$L__BB0_95;
// %bb.91:
	setp.lt.u32 	%p168, %r57, -2147483647;
	@%p168 bra 	$L__BB0_93;
// %bb.92:
	add.f32 	%f557, %f728, 0fBF800000;
	setp.lt.f32 	%p171, %f97, 0fC0000000;
	add.f32 	%f558, %f557, 0fBF800000;
	selp.f32 	%f728, %f558, %f557, %p171;
	bra.uni 	$L__BB0_95;
$L__BB0_93:
	add.f32 	%f728, %f728, 0f3F800000;
	setp.ltu.f32 	%p169, %f97, 0f40800000;
	@%p169 bra 	$L__BB0_95;
// %bb.94:                              // %__nv_fmaf_rn.exit.i.i.i2532
	add.f32 	%f553, %f728, 0f3F800000;
	fma.rn.f32 	%f555, %f703, 0fC0400000, %f97;
	setp.ge.f32 	%p170, %f555, 0f00000000;
	add.f32 	%f556, %f553, 0f3F800000;
	selp.f32 	%f728, %f556, %f553, %p170;
$L__BB0_95:                             // %__internal_fmodf_fastpath_quot.exit.i.i2535
	fma.rn.f32 	%f730, %f728, 0fC0000000, %f730;
$L__BB0_100:                            // %__internal_fmodf_kernel.exit.i2554
	abs.f32 	%f570, %f730;
	setp.gtu.f32 	%p177, %f570, 0f7F800000;
	@%p177 bra 	$L__BB0_102;
// %bb.101:
	mov.b32 	%r403, %f730;
	or.b32  	%r404, %r24, %r403;
	mov.b32 	%f730, %r404;
$L__BB0_102:                            // %__nv_fmodf.exit2555
	@%p84 bra 	$L__BB0_114;
// %bb.103:
	@%p296 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_104;
$L__BB0_110:
	mov.b32 	%r68, %f734;
	and.b32  	%r419, %r68, 8388607;
	or.b32  	%r3379, %r419, 1065353216;
	mov.b32 	%f733, %r3379;
	add.s32 	%r420, %r68, -1073741824;
	and.b32  	%r3380, %r420, -8388608;
	setp.eq.s32 	%p192, %r3380, 0;
	@%p192 bra 	$L__BB0_113;
// %bb.111:                             // %__nv_fmaf_rn.exit4.i.i.i2580.preheader
	mov.f32 	%f612, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f611,%f612;
	// end inline asm
$L__BB0_112:                            // %__nv_fmaf_rn.exit4.i.i.i2580
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r421, %r3380, 192937984;
	add.s32 	%r422, %r3379, %r421;
	mov.b32 	%f613, %r422;
	mul.f32 	%f614, %f611, %f613;
	sub.f32 	%f615, %f613, %f614;
	fma.rn.f32 	%f616, %f615, %f611, %f614;
	sub.f32 	%f617, %f613, %f616;
	fma.rz.f32 	%f618, %f617, %f611, %f616;
	cvt.rzi.f32.f32 	%f619, %f618;
	sub.f32 	%f733, %f613, %f619;
	sub.s32 	%r3380, %r3380, %r421;
	mov.b32 	%r3379, %f733;
	setp.ne.s32 	%p193, %r3380, 0;
	setp.ne.s32 	%p194, %r3379, 0;
	and.pred  	%p195, %p193, %p194;
	@%p195 bra 	$L__BB0_112;
$L__BB0_113:                            // %__internal_fmodf_slowpath_mod.exit.i.i2582
	setp.gt.u32 	%p196, %r68, 2139095039;
	selp.f32 	%f620, 0f7FFFFFFF, 0f4B800000, %p196;
	mul.f32 	%f621, %f733, 0f34000000;
	mul.f32 	%f734, %f620, %f621;
	bra.uni 	$L__BB0_114;
$L__BB0_104:                            // %__nv_fast_fdividef.exit.i.i.i2559
	div.approx.f32 	%f604, %f734, %f703;
	cvt.rzi.f32.f32 	%f732, %f604;
	fma.rn.f32 	%f112, %f732, 0fC0000000, %f734;
	mov.b32 	%r67, %f112;
	setp.lt.u32 	%p187, %r67, 1073741824;
	@%p187 bra 	$L__BB0_109;
// %bb.105:
	setp.lt.u32 	%p188, %r67, -2147483647;
	@%p188 bra 	$L__BB0_107;
// %bb.106:
	add.f32 	%f609, %f732, 0fBF800000;
	setp.lt.f32 	%p191, %f112, 0fC0000000;
	add.f32 	%f610, %f609, 0fBF800000;
	selp.f32 	%f732, %f610, %f609, %p191;
	bra.uni 	$L__BB0_109;
$L__BB0_107:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p189, %f112, 0f40800000;
	@%p189 bra 	$L__BB0_109;
// %bb.108:                             // %__nv_fmaf_rn.exit.i.i.i2563
	add.f32 	%f605, %f732, 0f3F800000;
	fma.rn.f32 	%f607, %f703, 0fC0400000, %f112;
	setp.ge.f32 	%p190, %f607, 0f00000000;
	add.f32 	%f608, %f605, 0f3F800000;
	selp.f32 	%f732, %f608, %f605, %p190;
$L__BB0_109:                            // %__internal_fmodf_fastpath_quot.exit.i.i2566
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_114:                            // %__internal_fmodf_kernel.exit.i2585
	abs.f32 	%f622, %f734;
	setp.gtu.f32 	%p197, %f622, 0f7F800000;
	@%p197 bra 	$L__BB0_116;
// %bb.115:
	mov.b32 	%r423, %f734;
	or.b32  	%r424, %r36, %r423;
	mov.b32 	%f734, %r424;
$L__BB0_116:                            // %__nv_fmodf.exit2586
	add.f32 	%f623, %f734, %f734;
	mov.b32 	%r425, %f623;
	and.b32  	%r426, %r425, -2147483648;
	or.b32  	%r427, %r426, 1056964608;
	mov.b32 	%f624, %r427;
	add.f32 	%f625, %f623, %f624;
	cvt.rzi.f32.f32 	%f626, %f625;
	abs.f32 	%f627, %f623;
	setp.gt.f32 	%p199, %f627, 0f4B000000;
	selp.f32 	%f628, %f623, %f626, %p199;
	cvt.rzi.f32.f32 	%f629, %f623;
	setp.lt.f32 	%p200, %f627, 0f3F000000;
	selp.f32 	%f630, %f629, %f628, %p200;
	cvt.rzi.s32.f32 	%r428, %f630;
	fma.rn.f32 	%f631, %f630, 0fBF000000, %f734;
	mul.f32 	%f632, %f631, %f631;
	fma.rn.f32 	%f633, %f632, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f634, %f632, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f635, %f633, %f632, 0fC0A55DF6;
	fma.rn.f32 	%f636, %f634, %f632, 0f4081E0CF;
	fma.rn.f32 	%f637, %f632, %f631, 0f00000000;
	fma.rn.f32 	%f638, %f636, %f632, 0fC09DE9E6;
	fma.rn.f32 	%f639, %f635, %f637, 0f00000000;
	fma.rn.f32 	%f640, %f638, %f632, 0f3F800000;
	fma.rn.f32 	%f641, %f631, 0f40490FDB, %f639;
	and.b32  	%r429, %r428, 1;
	setp.eq.b32 	%p201, %r429, 1;
	selp.f32 	%f642, %f640, %f641, %p201;
	selp.f32 	%f643, %f641, %f640, %p201;
	and.b32  	%r430, %r428, 2;
	setp.eq.s32 	%p202, %r430, 0;
	neg.f32 	%f644, %f642;
	selp.f32 	%f645, %f642, %f644, %p202;
	add.s32 	%r431, %r428, 1;
	and.b32  	%r432, %r431, 2;
	setp.eq.s32 	%p203, %r432, 0;
	sub.f32 	%f647, %f230, %f643;
	cvt.rzi.f32.f32 	%f649, %f734;
	setp.eq.f32 	%p204, %f649, %f734;
	mul.f32 	%f650, %f734, 0f00000000;
	selp.f32 	%f148, %f650, %f645, %p204;
	abs.f32 	%f651, %f734;
	@%p104 bra 	$L__BB0_128;
// %bb.117:
	@%p297 bra 	$L__BB0_124;
	bra.uni 	$L__BB0_118;
$L__BB0_124:
	mov.b32 	%r76, %f738;
	and.b32  	%r433, %r76, 8388607;
	or.b32  	%r3381, %r433, 1065353216;
	mov.b32 	%f737, %r3381;
	add.s32 	%r434, %r76, -1073741824;
	and.b32  	%r3382, %r434, -8388608;
	setp.eq.s32 	%p212, %r3382, 0;
	@%p212 bra 	$L__BB0_127;
// %bb.125:                             // %__nv_fmaf_rn.exit4.i.i.i2611.preheader
	mov.f32 	%f662, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f661,%f662;
	// end inline asm
$L__BB0_126:                            // %__nv_fmaf_rn.exit4.i.i.i2611
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r435, %r3382, 192937984;
	add.s32 	%r436, %r3381, %r435;
	mov.b32 	%f663, %r436;
	mul.f32 	%f664, %f661, %f663;
	sub.f32 	%f665, %f663, %f664;
	fma.rn.f32 	%f666, %f665, %f661, %f664;
	sub.f32 	%f667, %f663, %f666;
	fma.rz.f32 	%f668, %f667, %f661, %f666;
	cvt.rzi.f32.f32 	%f669, %f668;
	sub.f32 	%f737, %f663, %f669;
	sub.s32 	%r3382, %r3382, %r435;
	mov.b32 	%r3381, %f737;
	setp.ne.s32 	%p213, %r3382, 0;
	setp.ne.s32 	%p214, %r3381, 0;
	and.pred  	%p215, %p213, %p214;
	@%p215 bra 	$L__BB0_126;
$L__BB0_127:                            // %__internal_fmodf_slowpath_mod.exit.i.i2613
	setp.gt.u32 	%p216, %r76, 2139095039;
	selp.f32 	%f670, 0f7FFFFFFF, 0f4B800000, %p216;
	mul.f32 	%f671, %f737, 0f34000000;
	mul.f32 	%f738, %f670, %f671;
	bra.uni 	$L__BB0_128;
$L__BB0_118:                            // %__nv_fast_fdividef.exit.i.i.i2590
	div.approx.f32 	%f654, %f738, %f703;
	cvt.rzi.f32.f32 	%f736, %f654;
	fma.rn.f32 	%f129, %f736, 0fC0000000, %f738;
	mov.b32 	%r75, %f129;
	setp.lt.u32 	%p207, %r75, 1073741824;
	@%p207 bra 	$L__BB0_123;
// %bb.119:
	setp.lt.u32 	%p208, %r75, -2147483647;
	@%p208 bra 	$L__BB0_121;
// %bb.120:
	add.f32 	%f659, %f736, 0fBF800000;
	setp.lt.f32 	%p211, %f129, 0fC0000000;
	add.f32 	%f660, %f659, 0fBF800000;
	selp.f32 	%f736, %f660, %f659, %p211;
	bra.uni 	$L__BB0_123;
$L__BB0_121:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p209, %f129, 0f40800000;
	@%p209 bra 	$L__BB0_123;
// %bb.122:                             // %__nv_fmaf_rn.exit.i.i.i2594
	add.f32 	%f655, %f736, 0f3F800000;
	fma.rn.f32 	%f657, %f703, 0fC0400000, %f129;
	setp.ge.f32 	%p210, %f657, 0f00000000;
	add.f32 	%f658, %f655, 0f3F800000;
	selp.f32 	%f736, %f658, %f655, %p210;
$L__BB0_123:                            // %__internal_fmodf_fastpath_quot.exit.i.i2597
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_128:                            // %__internal_fmodf_kernel.exit.i2616
	selp.f32 	%f648, %f643, %f647, %p203;
	setp.gt.f32 	%p205, %f651, 0f4B800000;
	add.f32 	%f652, %f148, 0f3F800000;
	abs.f32 	%f672, %f738;
	setp.gtu.f32 	%p217, %f672, 0f7F800000;
	@%p217 bra 	$L__BB0_130;
// %bb.129:
	mov.b32 	%r437, %f738;
	or.b32  	%r438, %r45, %r437;
	mov.b32 	%f738, %r438;
$L__BB0_130:                            // %__nv_fmodf.exit2617
	selp.f32 	%f127, %f652, %f648, %p205;
	add.f32 	%f673, %f738, %f738;
	mov.b32 	%r439, %f673;
	and.b32  	%r440, %r439, -2147483648;
	or.b32  	%r441, %r440, 1056964608;
	mov.b32 	%f674, %r441;
	add.f32 	%f675, %f673, %f674;
	cvt.rzi.f32.f32 	%f676, %f675;
	abs.f32 	%f677, %f673;
	setp.gt.f32 	%p219, %f677, 0f4B000000;
	selp.f32 	%f678, %f673, %f676, %p219;
	cvt.rzi.f32.f32 	%f679, %f673;
	setp.lt.f32 	%p220, %f677, 0f3F000000;
	selp.f32 	%f680, %f679, %f678, %p220;
	cvt.rzi.s32.f32 	%r442, %f680;
	fma.rn.f32 	%f681, %f680, 0fBF000000, %f738;
	mul.f32 	%f682, %f681, %f681;
	fma.rn.f32 	%f683, %f682, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f684, %f682, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f685, %f683, %f682, 0fC0A55DF6;
	fma.rn.f32 	%f686, %f684, %f682, 0f4081E0CF;
	fma.rn.f32 	%f687, %f682, %f681, 0f00000000;
	fma.rn.f32 	%f688, %f686, %f682, 0fC09DE9E6;
	fma.rn.f32 	%f689, %f685, %f687, 0f00000000;
	fma.rn.f32 	%f690, %f688, %f682, 0f3F800000;
	fma.rn.f32 	%f691, %f681, 0f40490FDB, %f689;
	and.b32  	%r443, %r442, 1;
	setp.eq.b32 	%p221, %r443, 1;
	selp.f32 	%f692, %f690, %f691, %p221;
	selp.f32 	%f693, %f691, %f690, %p221;
	and.b32  	%r444, %r442, 2;
	setp.eq.s32 	%p222, %r444, 0;
	neg.f32 	%f694, %f692;
	selp.f32 	%f695, %f692, %f694, %p222;
	add.s32 	%r445, %r442, 1;
	and.b32  	%r446, %r445, 2;
	setp.eq.s32 	%p223, %r446, 0;
	sub.f32 	%f697, %f230, %f693;
	selp.f32 	%f698, %f693, %f697, %p223;
	cvt.rzi.f32.f32 	%f699, %f738;
	setp.eq.f32 	%p224, %f699, %f738;
	mul.f32 	%f700, %f738, 0f00000000;
	selp.f32 	%f150, %f700, %f695, %p224;
	abs.f32 	%f701, %f738;
	setp.gt.f32 	%p225, %f701, 0f4B800000;
	add.f32 	%f702, %f150, 0f3F800000;
	selp.f32 	%f144, %f702, %f698, %p225;
	mov.f32 	%f147, %f127;
	mov.f32 	%f149, %f144;
	@%p124 bra 	$L__BB0_132;
// %bb.131:                             // %L975
	neg.f32 	%f149, %f150;
	neg.f32 	%f147, %f148;
	mov.f32 	%f148, %f127;
	mov.f32 	%f150, %f144;
$L__BB0_132:                            // %L977
	setp.gt.u32 	%p226, %r3, 15;
	mov.u32 	%r170, 999999999;
	@%p226 bra 	$L__BB0_185;
// %bb.133:                             // %L1007
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	shl.b32 	%r454, %r3, 4;
	and.b32  	%r455, %r454, 240;
	or.b32  	%r456, %r455, %r1;
	mul.wide.u32 	%rd80, %r456, 4;
	add.s64 	%rd81, %rd1, %rd80;
	ld.global.u32 	%r457, [%rd81];
	shl.b32 	%r458, %r457, 16;
	cvt.s32.s16 	%r85, %r457;
	shr.s32 	%r86, %r457, 16;
	or.b32  	%r459, %r458, 65535;
	setp.lt.u32 	%p227, %r459, 1114111;
	setp.lt.u32 	%p228, %r457, 1048576;
	and.pred  	%p229, %p227, %p228;
	@%p229 bra 	$L__BB0_184;
	bra.uni 	$L__BB0_134;
$L__BB0_184:                            // %L1247
	mul.lo.s32 	%r463, %r86, 546;
	mad.lo.s32 	%r170, %r85, 33, %r463;
$L__BB0_185:                            // %pass527
	add.f32 	%f207, %f746, %f746;
	mov.b32 	%r280, %f207;
	add.f32 	%f469, %f750, %f750;
	and.b32  	%r281, %r280, -2147483648;
	add.f32 	%f261, %f706, %f706;
	add.f32 	%f313, %f710, %f710;
	mov.b32 	%r377, %f469;
	or.b32  	%r282, %r281, 1056964608;
	mov.b32 	%r296, %f261;
	mov.b32 	%r318, %f313;
	and.b32  	%r378, %r377, -2147483648;
	add.f32 	%f521, %f726, %f726;
	add.f32 	%f571, %f730, %f730;
	mov.b32 	%f208, %r282;
	and.b32  	%r297, %r296, -2147483648;
	and.b32  	%r319, %r318, -2147483648;
	or.b32  	%r379, %r378, 1056964608;
	mov.b32 	%r391, %f521;
	mov.b32 	%r411, %f571;
	add.f32 	%f209, %f207, %f208;
	abs.f32 	%f211, %f207;
	or.b32  	%r298, %r297, 1056964608;
	or.b32  	%r320, %r319, 1056964608;
	mov.b32 	%f470, %r379;
	and.b32  	%r392, %r391, -2147483648;
	and.b32  	%r412, %r411, -2147483648;
	cvt.rzi.f32.f32 	%f210, %f209;
	setp.gt.f32 	%p37, %f211, 0f4B000000;
	mov.b32 	%f262, %r298;
	mov.b32 	%f314, %r320;
	add.f32 	%f471, %f469, %f470;
	abs.f32 	%f473, %f469;
	or.b32  	%r393, %r392, 1056964608;
	or.b32  	%r413, %r412, 1056964608;
	selp.f32 	%f212, %f207, %f210, %p37;
	cvt.rzi.f32.f32 	%f213, %f207;
	setp.lt.f32 	%p38, %f211, 0f3F000000;
	add.f32 	%f263, %f261, %f262;
	abs.f32 	%f265, %f261;
	add.f32 	%f315, %f313, %f314;
	abs.f32 	%f317, %f313;
	cvt.rzi.f32.f32 	%f472, %f471;
	setp.gt.f32 	%p139, %f473, 0f4B000000;
	mov.b32 	%f522, %r393;
	mov.b32 	%f572, %r413;
	selp.f32 	%f214, %f213, %f212, %p38;
	cvt.rzi.f32.f32 	%f264, %f263;
	setp.gt.f32 	%p57, %f265, 0f4B000000;
	cvt.rzi.f32.f32 	%f316, %f315;
	setp.gt.f32 	%p77, %f317, 0f4B000000;
	selp.f32 	%f474, %f469, %f472, %p139;
	cvt.rzi.f32.f32 	%f475, %f469;
	setp.lt.f32 	%p140, %f473, 0f3F000000;
	add.f32 	%f523, %f521, %f522;
	abs.f32 	%f525, %f521;
	add.f32 	%f573, %f571, %f572;
	abs.f32 	%f575, %f571;
	fma.rn.f32 	%f215, %f214, 0fBF000000, %f746;
	selp.f32 	%f266, %f261, %f264, %p57;
	cvt.rzi.f32.f32 	%f267, %f261;
	setp.lt.f32 	%p58, %f265, 0f3F000000;
	selp.f32 	%f318, %f313, %f316, %p77;
	cvt.rzi.f32.f32 	%f319, %f313;
	setp.lt.f32 	%p78, %f317, 0f3F000000;
	selp.f32 	%f476, %f475, %f474, %p140;
	cvt.rzi.f32.f32 	%f524, %f523;
	setp.gt.f32 	%p159, %f525, 0f4B000000;
	cvt.rzi.f32.f32 	%f574, %f573;
	setp.gt.f32 	%p179, %f575, 0f4B000000;
	mul.f32 	%f216, %f215, %f215;
	selp.f32 	%f268, %f267, %f266, %p58;
	selp.f32 	%f320, %f319, %f318, %p78;
	fma.rn.f32 	%f477, %f476, 0fBF000000, %f750;
	selp.f32 	%f526, %f521, %f524, %p159;
	cvt.rzi.f32.f32 	%f527, %f521;
	setp.lt.f32 	%p160, %f525, 0f3F000000;
	selp.f32 	%f576, %f571, %f574, %p179;
	cvt.rzi.f32.f32 	%f577, %f571;
	setp.lt.f32 	%p180, %f575, 0f3F000000;
	fma.rn.f32 	%f217, %f216, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f218, %f216, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f269, %f268, 0fBF000000, %f706;
	fma.rn.f32 	%f321, %f320, 0fBF000000, %f710;
	mul.f32 	%f478, %f477, %f477;
	selp.f32 	%f528, %f527, %f526, %p160;
	selp.f32 	%f578, %f577, %f576, %p180;
	cvt.rzi.s32.f32 	%r283, %f214;
	fma.rn.f32 	%f219, %f217, %f216, 0fC0A55DF6;
	fma.rn.f32 	%f220, %f218, %f216, 0f4081E0CF;
	fma.rn.f32 	%f221, %f216, %f215, 0f00000000;
	mul.f32 	%f270, %f269, %f269;
	mul.f32 	%f322, %f321, %f321;
	fma.rn.f32 	%f479, %f478, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f480, %f478, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f529, %f528, 0fBF000000, %f726;
	fma.rn.f32 	%f579, %f578, 0fBF000000, %f730;
	fma.rn.f32 	%f222, %f220, %f216, 0fC09DE9E6;
	fma.rn.f32 	%f223, %f219, %f221, 0f00000000;
	and.b32  	%r284, %r283, 1;
	fma.rn.f32 	%f271, %f270, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f272, %f270, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f323, %f322, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f324, %f322, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r380, %f476;
	fma.rn.f32 	%f481, %f479, %f478, 0fC0A55DF6;
	fma.rn.f32 	%f482, %f480, %f478, 0f4081E0CF;
	fma.rn.f32 	%f483, %f478, %f477, 0f00000000;
	mul.f32 	%f530, %f529, %f529;
	mul.f32 	%f580, %f579, %f579;
	fma.rn.f32 	%f224, %f222, %f216, 0f3F800000;
	fma.rn.f32 	%f225, %f215, 0f40490FDB, %f223;
	setp.eq.b32 	%p39, %r284, 1;
	cvt.rzi.s32.f32 	%r299, %f268;
	fma.rn.f32 	%f273, %f271, %f270, 0fC0A55DF6;
	fma.rn.f32 	%f274, %f272, %f270, 0f4081E0CF;
	fma.rn.f32 	%f275, %f270, %f269, 0f00000000;
	cvt.rzi.s32.f32 	%r321, %f320;
	fma.rn.f32 	%f325, %f323, %f322, 0fC0A55DF6;
	fma.rn.f32 	%f326, %f324, %f322, 0f4081E0CF;
	fma.rn.f32 	%f327, %f322, %f321, 0f00000000;
	fma.rn.f32 	%f484, %f482, %f478, 0fC09DE9E6;
	fma.rn.f32 	%f485, %f481, %f483, 0f00000000;
	and.b32  	%r381, %r380, 1;
	fma.rn.f32 	%f531, %f530, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f532, %f530, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f581, %f580, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f582, %f580, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f226, %f224, %f225, %p39;
	and.b32  	%r285, %r283, 2;
	fma.rn.f32 	%f276, %f274, %f270, 0fC09DE9E6;
	fma.rn.f32 	%f277, %f273, %f275, 0f00000000;
	and.b32  	%r300, %r299, 1;
	fma.rn.f32 	%f328, %f326, %f322, 0fC09DE9E6;
	fma.rn.f32 	%f329, %f325, %f327, 0f00000000;
	and.b32  	%r322, %r321, 1;
	fma.rn.f32 	%f486, %f484, %f478, 0f3F800000;
	fma.rn.f32 	%f487, %f477, 0f40490FDB, %f485;
	setp.eq.b32 	%p141, %r381, 1;
	cvt.rzi.s32.f32 	%r394, %f528;
	fma.rn.f32 	%f533, %f531, %f530, 0fC0A55DF6;
	fma.rn.f32 	%f534, %f532, %f530, 0f4081E0CF;
	fma.rn.f32 	%f535, %f530, %f529, 0f00000000;
	cvt.rzi.s32.f32 	%r414, %f578;
	fma.rn.f32 	%f583, %f581, %f580, 0fC0A55DF6;
	fma.rn.f32 	%f584, %f582, %f580, 0f4081E0CF;
	fma.rn.f32 	%f585, %f580, %f579, 0f00000000;
	setp.eq.s32 	%p40, %r285, 0;
	neg.f32 	%f228, %f226;
	add.s32 	%r286, %r283, 1;
	cvt.rzi.f32.f32 	%f233, %f746;
	fma.rn.f32 	%f278, %f276, %f270, 0f3F800000;
	fma.rn.f32 	%f279, %f269, 0f40490FDB, %f277;
	setp.eq.b32 	%p59, %r300, 1;
	fma.rn.f32 	%f330, %f328, %f322, 0f3F800000;
	fma.rn.f32 	%f331, %f321, 0f40490FDB, %f329;
	setp.eq.b32 	%p79, %r322, 1;
	selp.f32 	%f488, %f486, %f487, %p141;
	and.b32  	%r382, %r380, 2;
	fma.rn.f32 	%f536, %f534, %f530, 0fC09DE9E6;
	fma.rn.f32 	%f537, %f533, %f535, 0f00000000;
	and.b32  	%r395, %r394, 1;
	fma.rn.f32 	%f586, %f584, %f580, 0fC09DE9E6;
	fma.rn.f32 	%f587, %f583, %f585, 0f00000000;
	and.b32  	%r415, %r414, 1;
	selp.f32 	%f227, %f225, %f224, %p39;
	selp.f32 	%f229, %f226, %f228, %p40;
	and.b32  	%r287, %r286, 2;
	setp.eq.f32 	%p42, %f233, %f746;
	mul.f32 	%f234, %f746, 0f00000000;
	selp.f32 	%f280, %f278, %f279, %p59;
	and.b32  	%r301, %r299, 2;
	selp.f32 	%f332, %f330, %f331, %p79;
	and.b32  	%r323, %r321, 2;
	setp.eq.s32 	%p142, %r382, 0;
	neg.f32 	%f490, %f488;
	add.s32 	%r383, %r380, 1;
	cvt.rzi.f32.f32 	%f495, %f750;
	fma.rn.f32 	%f538, %f536, %f530, 0f3F800000;
	fma.rn.f32 	%f539, %f529, 0f40490FDB, %f537;
	setp.eq.b32 	%p161, %r395, 1;
	fma.rn.f32 	%f588, %f586, %f580, 0f3F800000;
	fma.rn.f32 	%f589, %f579, 0f40490FDB, %f587;
	setp.eq.b32 	%p181, %r415, 1;
	setp.eq.s32 	%p41, %r287, 0;
	sub.f32 	%f231, %f230, %f227;
	selp.f32 	%f235, %f234, %f229, %p42;
	abs.f32 	%f236, %f746;
	setp.eq.s32 	%p60, %r301, 0;
	neg.f32 	%f282, %f280;
	add.s32 	%r302, %r299, 1;
	cvt.rzi.f32.f32 	%f287, %f706;
	setp.eq.s32 	%p80, %r323, 0;
	neg.f32 	%f334, %f332;
	add.s32 	%r324, %r321, 1;
	cvt.rzi.f32.f32 	%f339, %f710;
	selp.f32 	%f489, %f487, %f486, %p141;
	selp.f32 	%f491, %f488, %f490, %p142;
	and.b32  	%r384, %r383, 2;
	setp.eq.f32 	%p144, %f495, %f750;
	mul.f32 	%f496, %f750, 0f00000000;
	selp.f32 	%f540, %f538, %f539, %p161;
	and.b32  	%r396, %r394, 2;
	selp.f32 	%f590, %f588, %f589, %p181;
	and.b32  	%r416, %r414, 2;
	selp.f32 	%f232, %f227, %f231, %p41;
	setp.gt.f32 	%p43, %f236, 0f4B800000;
	add.f32 	%f237, %f235, 0f3F800000;
	selp.f32 	%f281, %f279, %f278, %p59;
	selp.f32 	%f283, %f280, %f282, %p60;
	and.b32  	%r303, %r302, 2;
	setp.eq.f32 	%p62, %f287, %f706;
	mul.f32 	%f288, %f706, 0f00000000;
	selp.f32 	%f333, %f331, %f330, %p79;
	selp.f32 	%f335, %f332, %f334, %p80;
	and.b32  	%r325, %r324, 2;
	setp.eq.f32 	%p82, %f339, %f710;
	mul.f32 	%f340, %f710, 0f00000000;
	setp.eq.s32 	%p143, %r384, 0;
	sub.f32 	%f493, %f230, %f489;
	selp.f32 	%f497, %f496, %f491, %p144;
	abs.f32 	%f498, %f750;
	setp.eq.s32 	%p162, %r396, 0;
	neg.f32 	%f542, %f540;
	add.s32 	%r397, %r394, 1;
	cvt.rzi.f32.f32 	%f547, %f726;
	setp.eq.s32 	%p182, %r416, 0;
	neg.f32 	%f592, %f590;
	add.s32 	%r417, %r414, 1;
	cvt.rzi.f32.f32 	%f597, %f730;
	selp.f32 	%f238, %f237, %f232, %p43;
	setp.eq.s32 	%p61, %r303, 0;
	sub.f32 	%f285, %f230, %f281;
	selp.f32 	%f16, %f288, %f283, %p62;
	abs.f32 	%f289, %f706;
	setp.eq.s32 	%p81, %r325, 0;
	sub.f32 	%f337, %f230, %f333;
	selp.f32 	%f341, %f340, %f335, %p82;
	abs.f32 	%f342, %f710;
	selp.f32 	%f494, %f489, %f493, %p143;
	setp.gt.f32 	%p145, %f498, 0f4B800000;
	add.f32 	%f499, %f497, 0f3F800000;
	selp.f32 	%f541, %f539, %f538, %p161;
	selp.f32 	%f543, %f540, %f542, %p162;
	and.b32  	%r398, %r397, 2;
	setp.eq.f32 	%p164, %f547, %f726;
	mul.f32 	%f548, %f726, 0f00000000;
	selp.f32 	%f591, %f589, %f588, %p181;
	selp.f32 	%f593, %f590, %f592, %p182;
	and.b32  	%r418, %r417, 2;
	setp.eq.f32 	%p184, %f597, %f730;
	mul.f32 	%f598, %f730, 0f00000000;
	mov.b32 	%r276, %f238;
	mov.b32 	%r279, %f235;
	selp.f32 	%f286, %f281, %f285, %p61;
	setp.gt.f32 	%p63, %f289, 0f4B800000;
	add.f32 	%f290, %f16, 0f3F800000;
	selp.f32 	%f338, %f333, %f337, %p81;
	setp.gt.f32 	%p83, %f342, 0f4B800000;
	add.f32 	%f343, %f341, 0f3F800000;
	selp.f32 	%f500, %f499, %f494, %p145;
	setp.eq.s32 	%p163, %r398, 0;
	sub.f32 	%f545, %f230, %f541;
	selp.f32 	%f94, %f548, %f543, %p164;
	abs.f32 	%f549, %f726;
	setp.eq.s32 	%p183, %r418, 0;
	sub.f32 	%f595, %f230, %f591;
	selp.f32 	%f599, %f598, %f593, %p184;
	abs.f32 	%f600, %f730;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r275, %r279, -2147483648;
	selp.f32 	%f17, %f290, %f286, %p63;
	selp.f32 	%f344, %f343, %f338, %p83;
	mov.b32 	%r373, %f500;
	mov.b32 	%r376, %f497;
	selp.f32 	%f546, %f541, %f545, %p163;
	setp.gt.f32 	%p165, %f549, 0f4B800000;
	add.f32 	%f550, %f94, 0f3F800000;
	selp.f32 	%f596, %f591, %f595, %p183;
	setp.gt.f32 	%p185, %f600, 0f4B800000;
	add.f32 	%f601, %f599, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r274, %r276, %r275;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r277, %r279, %r276;
	// end inline asm
	mov.b32 	%r314, %f344;
	mov.b32 	%r313, %f17;
	mov.b32 	%r317, %f341;
	mov.b32 	%r316, %f16;
	mov.b32 	%r360, %f75;
	mov.b32 	%r361, %f77;
	mov.b32 	%r363, %f76;
	mov.b32 	%r364, %f78;
	xor.b32  	%r372, %r376, -2147483648;
	selp.f32 	%f95, %f550, %f546, %p165;
	selp.f32 	%f602, %f601, %f596, %p185;
	// begin inline asm
	cvt.rn.f16x2.f32 %r312, %r314, %r313;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r315, %r317, %r316;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r359, %r361, %r360;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r362, %r364, %r363;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r371, %r373, %r372;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r374, %r376, %r373;
	// end inline asm
	mov.b32 	%r407, %f602;
	mov.b32 	%r406, %f95;
	mov.b32 	%r410, %f599;
	mov.b32 	%r409, %f94;
	// begin inline asm
	cvt.rn.f16x2.f32 %r405, %r407, %r406;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r408, %r410, %r409;
	// end inline asm
	mov.b32 	%r448, %f147;
	mov.b32 	%r449, %f149;
	// begin inline asm
	cvt.rn.f16x2.f32 %r447, %r449, %r448;
	// end inline asm
	mov.b32 	%r451, %f148;
	mov.b32 	%r452, %f150;
	// begin inline asm
	cvt.rn.f16x2.f32 %r450, %r452, %r451;
	// end inline asm
	shl.b32 	%r465, %r3, 6;
	and.b32  	%r466, %r465, 192;
	and.b32  	%r467, %r146, 1;
	shr.u32 	%r468, %r3, 3;
	and.b32  	%r469, %r468, 2;
	or.b32  	%r470, %r467, %r469;
	shl.b32 	%r471, %r470, 4;
	bfe.u32 	%r472, %r3, 3, 1;
	shl.b32 	%r473, %r1, 1;
	and.b32  	%r474, %r473, 14;
	or.b32  	%r475, %r472, %r474;
	or.b32  	%r476, %r471, %r466;
	or.b32  	%r477, %r476, %r475;
	mul.wide.u32 	%rd87, %r477, 4;
	add.s64 	%rd88, %rd2, %rd87;
	ld.global.u32 	%r171, [%rd88];
	ld.global.u32 	%r172, [%rd88+1024];
	shl.b32 	%r478, %r245, 13;
	shl.b32 	%r479, %r249, 7;
	add.s32 	%r173, %r479, %r478;
	shl.b32 	%r480, %r3, 2;
	shl.b32 	%r481, %r4, 7;
	or.b32  	%r174, %r480, %r481;
	and.b32  	%r175, %r3, 16;
	shr.u32 	%r482, %r3, 4;
	and.b32  	%r483, %r158, 30;
	or.b32  	%r484, %r483, %r482;
	mul.lo.s32 	%r485, %r484, 257;
	and.b32  	%r486, %r2, 224;
	shr.u32 	%r487, %r1, 3;
	mad.lo.s32 	%r488, %r487, 257, %r486;
	or.b32  	%r489, %r487, 2;
	mad.lo.s32 	%r490, %r489, 257, %r486;
	or.b32  	%r491, %r487, 4;
	mad.lo.s32 	%r492, %r491, 257, %r486;
	or.b32  	%r493, %r487, 6;
	mad.lo.s32 	%r494, %r493, 257, %r486;
	or.b32  	%r495, %r487, 8;
	mad.lo.s32 	%r496, %r495, 257, %r486;
	or.b32  	%r497, %r487, 10;
	mad.lo.s32 	%r498, %r497, 257, %r486;
	or.b32  	%r499, %r487, 12;
	mad.lo.s32 	%r500, %r499, 257, %r486;
	or.b32  	%r501, %r487, 14;
	mad.lo.s32 	%r502, %r501, 257, %r486;
	or.b32  	%r503, %r487, 16;
	mad.lo.s32 	%r504, %r503, 257, %r486;
	or.b32  	%r505, %r487, 18;
	mad.lo.s32 	%r506, %r505, 257, %r486;
	or.b32  	%r507, %r487, 20;
	mad.lo.s32 	%r508, %r507, 257, %r486;
	or.b32  	%r509, %r487, 22;
	mad.lo.s32 	%r510, %r509, 257, %r486;
	or.b32  	%r511, %r487, 24;
	mad.lo.s32 	%r512, %r511, 257, %r486;
	or.b32  	%r513, %r487, 26;
	mad.lo.s32 	%r514, %r513, 257, %r486;
	or.b32  	%r515, %r487, 28;
	mad.lo.s32 	%r516, %r515, 257, %r486;
	or.b32  	%r517, %r487, 30;
	mad.lo.s32 	%r518, %r517, 257, %r486;
	mul.lo.s32 	%r519, %r145, 2184;
	mad.lo.s32 	%r520, %r470, 546, %r519;
	mad.lo.s32 	%r521, %r475, 33, %r520;
	setp.lt.u32 	%p231, %r3, 4;
	setp.eq.s32 	%p232, %r146, 4;
	setp.eq.s32 	%p233, %r146, 5;
	and.b32  	%r522, %r3, 1;
	neg.s32 	%r523, %r522;
	and.b32  	%r524, %r523, 2064;
	bfe.s32 	%r525, %r3, 3, 1;
	and.b32  	%r526, %r3, 8;
	setp.eq.s32 	%p234, %r526, 0;
	and.b32  	%r527, %r525, 258;
	selp.b32 	%r528, 0, 1032, %p124;
	bfe.s32 	%r529, %r3, 2, 1;
	and.b32  	%r530, %r529, 516;
	or.b32  	%r531, %r474, %r482;
	or.b32  	%r532, %r527, %r524;
	or.b32  	%r533, %r532, %r528;
	or.b32  	%r534, %r533, %r530;
	add.s32 	%r535, %r534, %r531;
	and.b32  	%r536, %r1, 1;
	neg.s32 	%r537, %r536;
	and.b32  	%r538, %r537, 2064;
	and.b32  	%r539, %r480, 12;
	mul.lo.s32 	%r540, %r487, 258;
	bfe.s32 	%r541, %r1, 1, 1;
	and.b32  	%r542, %r1, 2;
	setp.eq.s32 	%p235, %r542, 0;
	and.b32  	%r543, %r541, 1032;
	bfe.s32 	%r544, %r1, 2, 1;
	and.b32  	%r545, %r1, 4;
	setp.eq.s32 	%p236, %r545, 0;
	and.b32  	%r546, %r544, 516;
	and.b32  	%r547, %r525, 4144;
	or.b32  	%r548, %r538, %r470;
	add.s32 	%r549, %r540, %r539;
	add.s32 	%r550, %r549, %r543;
	add.s32 	%r551, %r550, %r546;
	add.s32 	%r552, %r551, %r547;
	add.s32 	%r553, %r552, %r548;
	mul.wide.u32 	%rd89, %r553, 4;
	mov.u64 	%rd90, shmem;
	add.s64 	%rd7, %rd90, %rd89;
	cvt.u64.u32 	%rd91, %r548;
	selp.b64 	%rd92, 0, 4144, %p234;
	selp.b64 	%rd93, 0, 516, %p236;
	selp.b64 	%rd94, 0, 1032, %p235;
	cvt.u64.u32 	%rd95, %r540;
	cvt.u64.u32 	%rd96, %r539;
	add.s64 	%rd97, %rd96, %rd95;
	add.s64 	%rd98, %rd97, %rd94;
	add.s64 	%rd99, %rd98, %rd93;
	add.s64 	%rd100, %rd99, %rd92;
	add.s64 	%rd101, %rd100, %rd91;
	shl.b64 	%rd102, %rd101, 2;
	add.s64 	%rd8, %rd90, %rd102;
	add.s32 	%r554, %r549, %r538;
	add.s32 	%r555, %r554, %r470;
	add.s32 	%r556, %r555, %r543;
	add.s32 	%r557, %r556, %r546;
	add.s32 	%r558, %r557, %r547;
	shl.b32 	%r559, %r247, 20;
	shl.b32 	%r560, %r251, 9;
	add.s32 	%r561, %r560, %r559;
	and.b32  	%r562, %r3, 15;
	or.b32  	%r563, %r2, %r175;
	or.b32  	%r564, %r562, %r5;
	or.b32  	%r176, %r564, %r563;
	cvt.s64.s32 	%rd9, %r561;
	add.s32 	%r565, %r1, %r485;
	mul.wide.u32 	%rd103, %r565, 4;
	add.s64 	%rd10, %rd90, %rd103;
	cvt.u64.u32 	%rd104, %r1;
	cvt.u64.u32 	%rd11, %r485;
	add.s64 	%rd105, %rd11, %rd104;
	shl.b64 	%rd106, %rd105, 2;
	add.s64 	%rd12, %rd90, %rd106;
	add.s32 	%r566, %r488, %r3;
	mul.wide.u32 	%rd107, %r566, 4;
	add.s64 	%rd13, %rd90, %rd107;
	add.s32 	%r567, %r490, %r3;
	mul.wide.u32 	%rd108, %r567, 4;
	add.s64 	%rd14, %rd90, %rd108;
	add.s32 	%r568, %r492, %r3;
	mul.wide.u32 	%rd109, %r568, 4;
	add.s64 	%rd15, %rd90, %rd109;
	add.s32 	%r569, %r494, %r3;
	mul.wide.u32 	%rd110, %r569, 4;
	add.s64 	%rd16, %rd90, %rd110;
	add.s32 	%r570, %r496, %r3;
	mul.wide.u32 	%rd111, %r570, 4;
	add.s64 	%rd17, %rd90, %rd111;
	add.s32 	%r571, %r498, %r3;
	mul.wide.u32 	%rd112, %r571, 4;
	add.s64 	%rd18, %rd90, %rd112;
	add.s32 	%r572, %r500, %r3;
	mul.wide.u32 	%rd113, %r572, 4;
	add.s64 	%rd19, %rd90, %rd113;
	add.s32 	%r573, %r502, %r3;
	mul.wide.u32 	%rd114, %r573, 4;
	add.s64 	%rd20, %rd90, %rd114;
	add.s32 	%r574, %r504, %r3;
	mul.wide.u32 	%rd115, %r574, 4;
	add.s64 	%rd21, %rd90, %rd115;
	add.s32 	%r575, %r506, %r3;
	mul.wide.u32 	%rd116, %r575, 4;
	add.s64 	%rd22, %rd90, %rd116;
	add.s32 	%r576, %r508, %r3;
	mul.wide.u32 	%rd117, %r576, 4;
	add.s64 	%rd23, %rd90, %rd117;
	add.s32 	%r577, %r510, %r3;
	mul.wide.u32 	%rd118, %r577, 4;
	add.s64 	%rd24, %rd90, %rd118;
	add.s32 	%r578, %r512, %r3;
	mul.wide.u32 	%rd119, %r578, 4;
	add.s64 	%rd25, %rd90, %rd119;
	add.s32 	%r579, %r514, %r3;
	mul.wide.u32 	%rd120, %r579, 4;
	add.s64 	%rd26, %rd90, %rd120;
	add.s32 	%r580, %r516, %r3;
	mul.wide.u32 	%rd121, %r580, 4;
	add.s64 	%rd27, %rd90, %rd121;
	add.s32 	%r581, %r518, %r3;
	mul.wide.u32 	%rd122, %r581, 4;
	add.s64 	%rd28, %rd90, %rd122;
	add.s32 	%r582, %r521, %r487;
	mul.wide.u32 	%rd123, %r582, 4;
	add.s64 	%rd29, %rd90, %rd123;
	add.s32 	%r583, %r521, %r489;
	mul.wide.u32 	%rd124, %r583, 4;
	add.s64 	%rd30, %rd90, %rd124;
	add.s32 	%r584, %r521, %r491;
	mul.wide.u32 	%rd125, %r584, 4;
	add.s64 	%rd31, %rd90, %rd125;
	add.s32 	%r585, %r521, %r493;
	mul.wide.u32 	%rd126, %r585, 4;
	add.s64 	%rd32, %rd90, %rd126;
	add.s32 	%r586, %r521, %r495;
	mul.wide.u32 	%rd127, %r586, 4;
	add.s64 	%rd33, %rd90, %rd127;
	add.s32 	%r587, %r521, %r497;
	mul.wide.u32 	%rd128, %r587, 4;
	add.s64 	%rd34, %rd90, %rd128;
	add.s32 	%r588, %r521, %r499;
	mul.wide.u32 	%rd129, %r588, 4;
	add.s64 	%rd35, %rd90, %rd129;
	add.s32 	%r589, %r521, %r501;
	mul.wide.u32 	%rd130, %r589, 4;
	add.s64 	%rd36, %rd90, %rd130;
	add.s32 	%r590, %r521, %r503;
	mul.wide.u32 	%rd131, %r590, 4;
	add.s64 	%rd37, %rd90, %rd131;
	add.s32 	%r591, %r521, %r505;
	mul.wide.u32 	%rd132, %r591, 4;
	add.s64 	%rd38, %rd90, %rd132;
	add.s32 	%r592, %r521, %r507;
	mul.wide.u32 	%rd133, %r592, 4;
	add.s64 	%rd39, %rd90, %rd133;
	add.s32 	%r593, %r521, %r509;
	mul.wide.u32 	%rd134, %r593, 4;
	add.s64 	%rd40, %rd90, %rd134;
	add.s32 	%r594, %r521, %r511;
	mul.wide.u32 	%rd135, %r594, 4;
	add.s64 	%rd41, %rd90, %rd135;
	add.s32 	%r595, %r521, %r513;
	mul.wide.u32 	%rd136, %r595, 4;
	add.s64 	%rd42, %rd90, %rd136;
	add.s32 	%r596, %r521, %r515;
	mul.wide.u32 	%rd137, %r596, 4;
	add.s64 	%rd43, %rd90, %rd137;
	add.s32 	%r597, %r521, %r517;
	mul.wide.u32 	%rd138, %r597, 4;
	add.s64 	%rd44, %rd90, %rd138;
	add.s32 	%r598, %r146, -1;
	setp.lt.u32 	%p237, %r598, 3;
	or.pred  	%p238, %p231, %p237;
	or.pred  	%p239, %p238, %p232;
	and.b32  	%r599, %r3, 24;
	setp.eq.s32 	%p240, %r599, 24;
	or.pred  	%p241, %p233, %p240;
	selp.b32 	%r177, 1145324612, -286331154, %p238;
	or.pred  	%p1, %p239, %p241;
	shl.b32 	%r600, %r487, 5;
	add.s32 	%r601, %r535, %r600;
	mul.wide.u32 	%rd139, %r601, 4;
	add.s64 	%rd45, %rd90, %rd139;
	cvt.u64.u32 	%rd140, %r600;
	cvt.u64.u32 	%rd141, %r531;
	cvt.u64.u32 	%rd142, %r534;
	add.s64 	%rd143, %rd142, %rd141;
	add.s64 	%rd144, %rd143, %rd140;
	shl.b64 	%rd145, %rd144, 2;
	add.s64 	%rd47, %rd90, %rd145;
	or.b32  	%r602, %r600, 64;
	add.s32 	%r603, %r535, %r602;
	mul.wide.u32 	%rd146, %r603, 4;
	add.s64 	%rd48, %rd90, %rd146;
	cvt.u64.u32 	%rd147, %r602;
	add.s64 	%rd148, %rd143, %rd147;
	shl.b64 	%rd149, %rd148, 2;
	add.s64 	%rd50, %rd90, %rd149;
	or.b32  	%r604, %r600, 128;
	add.s32 	%r605, %r535, %r604;
	mul.wide.u32 	%rd150, %r605, 4;
	add.s64 	%rd51, %rd90, %rd150;
	cvt.u64.u32 	%rd151, %r604;
	add.s64 	%rd152, %rd143, %rd151;
	shl.b64 	%rd153, %rd152, 2;
	add.s64 	%rd53, %rd90, %rd153;
	or.b32  	%r606, %r600, 192;
	add.s32 	%r607, %r535, %r606;
	mul.wide.u32 	%rd154, %r607, 4;
	add.s64 	%rd54, %rd90, %rd154;
	cvt.u64.u32 	%rd155, %r606;
	add.s64 	%rd156, %rd143, %rd155;
	shl.b64 	%rd157, %rd156, 2;
	add.s64 	%rd56, %rd90, %rd157;
	add.s32 	%r608, %r558, 32;
	mul.wide.u32 	%rd158, %r608, 4;
	add.s64 	%rd57, %rd90, %rd158;
	add.s32 	%r609, %r558, 48;
	mul.wide.u32 	%rd159, %r609, 4;
	add.s64 	%rd58, %rd90, %rd159;
	add.s32 	%r610, %r558, 64;
	mul.wide.u32 	%rd160, %r610, 4;
	add.s64 	%rd59, %rd90, %rd160;
	add.s32 	%r611, %r558, 80;
	mul.wide.u32 	%rd161, %r611, 4;
	add.s64 	%rd60, %rd90, %rd161;
	add.s32 	%r612, %r558, 96;
	mul.wide.u32 	%rd162, %r612, 4;
	add.s64 	%rd61, %rd90, %rd162;
	add.s32 	%r613, %r558, 112;
	mul.wide.u32 	%rd163, %r613, 4;
	add.s64 	%rd62, %rd90, %rd163;
	add.s32 	%r614, %r558, 128;
	mul.wide.u32 	%rd164, %r614, 4;
	add.s64 	%rd63, %rd90, %rd164;
	add.s32 	%r615, %r558, 144;
	mul.wide.u32 	%rd165, %r615, 4;
	add.s64 	%rd64, %rd90, %rd165;
	add.s32 	%r616, %r558, 160;
	mul.wide.u32 	%rd166, %r616, 4;
	add.s64 	%rd65, %rd90, %rd166;
	add.s32 	%r617, %r558, 176;
	mul.wide.u32 	%rd167, %r617, 4;
	add.s64 	%rd66, %rd90, %rd167;
	add.s32 	%r618, %r558, 192;
	mul.wide.u32 	%rd168, %r618, 4;
	add.s64 	%rd67, %rd90, %rd168;
	add.s32 	%r619, %r558, 208;
	mul.wide.u32 	%rd169, %r619, 4;
	add.s64 	%rd68, %rd90, %rd169;
	add.s32 	%r620, %r558, 224;
	mul.wide.u32 	%rd170, %r620, 4;
	add.s64 	%rd69, %rd90, %rd170;
	add.s32 	%r621, %r558, 240;
	mul.wide.u32 	%rd171, %r621, 4;
	add.s64 	%rd70, %rd90, %rd171;
	mov.u32 	%r88, 0;
	setp.eq.s32 	%p243, %r175, 0;
	mov.u16 	%rs38, 25600;
	mov.u16 	%rs40, 21504;
	mov.u16 	%rs44, 18432;
	mov.u32 	%r3395, %r88;
	mov.u32 	%r3396, %r88;
	mov.u32 	%r3397, %r88;
	bra.uni 	$L__BB0_186;
$L__BB0_157:                            // %L46087
                                        //   in Loop: Header=BB0_186 Depth=1
	add.s32 	%r144, %r88, 64;
	setp.ne.s32 	%p292, %r88, 65472;
	mov.u32 	%r88, %r144;
	@%p292 bra 	$L__BB0_186;
	bra.uni 	$L__BB0_158;
$L__BB0_186:                            // %L1556
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_204 Depth 2
                                        //     Child Loop BB0_154 Depth 2
	add.s32 	%r622, %r88, %r245;
	setp.lt.s32 	%p242, %r622, %r246;
	@%p242 bra 	$L__BB0_187;
	bra.uni 	$L__BB0_158;
$L__BB0_187:                            // %pass758
                                        //   in Loop: Header=BB0_186 Depth=1
	cvt.u32.u64 	%r815, %rd11;
	or.b32  	%r816, %r88, %r1;
	shl.b32 	%r817, %r816, 13;
	and.b32  	%r818, %r817, 536469504;
	or.b32  	%r819, %r818, %r174;
	add.s32 	%r820, %r173, %r819;
	shr.s32 	%r821, %r820, 31;
	shr.u32 	%r822, %r821, 3;
	add.s32 	%r823, %r820, %r822;
	shr.s32 	%r824, %r823, 29;
	setp.lt.s32 	%p244, %r820, 0;
	and.b32  	%r825, %r823, -536870912;
	setp.ne.s32 	%p245, %r825, %r820;
	and.pred  	%p246, %p244, %p245;
	selp.u32 	%r826, 1, 0, %p246;
	sub.s32 	%r827, %r826, %r824;
	shl.b32 	%r828, %r827, 29;
	add.s32 	%r829, %r828, %r820;
	mul.wide.s32 	%rd172, %r829, 4;
	add.s64 	%rd173, %rd3, %rd172;
	ld.global.v4.u32 	{%r830, %r831, %r832, %r833}, [%rd173];
	or.b32  	%r834, %r816, 16;
	shl.b32 	%r835, %r834, 13;
	and.b32  	%r836, %r835, 536600576;
	or.b32  	%r837, %r836, %r174;
	add.s32 	%r838, %r173, %r837;
	shr.s32 	%r839, %r838, 31;
	shr.u32 	%r840, %r839, 3;
	add.s32 	%r841, %r838, %r840;
	shr.s32 	%r842, %r841, 29;
	setp.lt.s32 	%p247, %r838, 0;
	and.b32  	%r843, %r841, -536870912;
	setp.ne.s32 	%p248, %r843, %r838;
	and.pred  	%p249, %p247, %p248;
	selp.u32 	%r844, 1, 0, %p249;
	sub.s32 	%r845, %r844, %r842;
	shl.b32 	%r846, %r845, 29;
	add.s32 	%r847, %r846, %r838;
	mul.wide.s32 	%rd174, %r847, 4;
	add.s64 	%rd175, %rd3, %rd174;
	ld.global.v4.u32 	{%r848, %r849, %r850, %r851}, [%rd175];
	and.b32  	%r852, %r88, 65472;
	or.b32  	%r853, %r1, %r852;
	shl.b32 	%r854, %r853, 13;
	or.b32  	%r855, %r854, %r174;
	or.b32  	%r856, %r855, 262144;
	add.s32 	%r857, %r173, %r856;
	shr.s32 	%r858, %r857, 31;
	shr.u32 	%r859, %r858, 3;
	add.s32 	%r860, %r857, %r859;
	shr.s32 	%r861, %r860, 29;
	setp.lt.s32 	%p250, %r857, 0;
	and.b32  	%r862, %r860, -536870912;
	setp.ne.s32 	%p251, %r862, %r857;
	and.pred  	%p252, %p250, %p251;
	selp.u32 	%r863, 1, 0, %p252;
	sub.s32 	%r864, %r863, %r861;
	shl.b32 	%r865, %r864, 29;
	add.s32 	%r866, %r865, %r857;
	mul.wide.s32 	%rd176, %r866, 4;
	add.s64 	%rd177, %rd3, %rd176;
	ld.global.v4.u32 	{%r867, %r868, %r869, %r870}, [%rd177];
	or.b32  	%r871, %r855, 393216;
	add.s32 	%r872, %r173, %r871;
	shr.s32 	%r873, %r872, 31;
	shr.u32 	%r874, %r873, 3;
	add.s32 	%r875, %r872, %r874;
	shr.s32 	%r876, %r875, 29;
	setp.lt.s32 	%p253, %r872, 0;
	and.b32  	%r877, %r875, -536870912;
	setp.ne.s32 	%p254, %r877, %r872;
	and.pred  	%p255, %p253, %p254;
	selp.u32 	%r878, 1, 0, %p255;
	sub.s32 	%r879, %r878, %r876;
	shl.b32 	%r880, %r879, 29;
	add.s32 	%r881, %r880, %r872;
	mul.wide.s32 	%rd178, %r881, 4;
	add.s64 	%rd179, %rd3, %rd178;
	ld.global.v4.u32 	{%r882, %r883, %r884, %r885}, [%rd179];
	selp.b32 	%r886, %r832, %r830, %p243;
	shfl.sync.bfly.b32	%r887, %r886, 16, 31, -1;
	selp.b32 	%r625, %r830, %r887, %p243;
	selp.b32 	%r630, %r887, %r832, %p243;
	selp.b32 	%r888, %r833, %r831, %p243;
	shfl.sync.bfly.b32	%r889, %r888, 16, 31, -1;
	selp.b32 	%r633, %r831, %r889, %p243;
	selp.b32 	%r638, %r889, %r833, %p243;
	selp.b32 	%r890, %r850, %r848, %p243;
	shfl.sync.bfly.b32	%r891, %r890, 16, 31, -1;
	selp.b32 	%r641, %r848, %r891, %p243;
	selp.b32 	%r646, %r891, %r850, %p243;
	selp.b32 	%r892, %r851, %r849, %p243;
	shfl.sync.bfly.b32	%r893, %r892, 16, 31, -1;
	selp.b32 	%r649, %r849, %r893, %p243;
	selp.b32 	%r654, %r893, %r851, %p243;
	selp.b32 	%r894, %r869, %r867, %p243;
	shfl.sync.bfly.b32	%r895, %r894, 16, 31, -1;
	selp.b32 	%r657, %r867, %r895, %p243;
	selp.b32 	%r662, %r895, %r869, %p243;
	selp.b32 	%r896, %r870, %r868, %p243;
	shfl.sync.bfly.b32	%r897, %r896, 16, 31, -1;
	selp.b32 	%r665, %r868, %r897, %p243;
	selp.b32 	%r670, %r897, %r870, %p243;
	selp.b32 	%r898, %r884, %r882, %p243;
	shfl.sync.bfly.b32	%r899, %r898, 16, 31, -1;
	selp.b32 	%r673, %r882, %r899, %p243;
	selp.b32 	%r678, %r899, %r884, %p243;
	selp.b32 	%r900, %r885, %r883, %p243;
	shfl.sync.bfly.b32	%r901, %r900, 16, 31, -1;
	selp.b32 	%r681, %r883, %r901, %p243;
	selp.b32 	%r686, %r901, %r885, %p243;
	shl.b32 	%r626, %r630, 4;
	mov.u32 	%r624, 252645135;
	// begin inline asm
	lop3.b32 %r688, %r624, %r625, %r626, 202;
	// end inline asm
	shr.u32 	%r629, %r625, 4;
	// begin inline asm
	lop3.b32 %r704, %r624, %r629, %r630, 202;
	// end inline asm
	shl.b32 	%r634, %r638, 4;
	// begin inline asm
	lop3.b32 %r696, %r624, %r633, %r634, 202;
	// end inline asm
	shr.u32 	%r637, %r633, 4;
	// begin inline asm
	lop3.b32 %r712, %r624, %r637, %r638, 202;
	// end inline asm
	shl.b32 	%r642, %r646, 4;
	// begin inline asm
	lop3.b32 %r720, %r624, %r641, %r642, 202;
	// end inline asm
	shr.u32 	%r645, %r641, 4;
	// begin inline asm
	lop3.b32 %r736, %r624, %r645, %r646, 202;
	// end inline asm
	shl.b32 	%r650, %r654, 4;
	// begin inline asm
	lop3.b32 %r728, %r624, %r649, %r650, 202;
	// end inline asm
	shr.u32 	%r653, %r649, 4;
	// begin inline asm
	lop3.b32 %r744, %r624, %r653, %r654, 202;
	// end inline asm
	shl.b32 	%r658, %r662, 4;
	// begin inline asm
	lop3.b32 %r689, %r624, %r657, %r658, 202;
	// end inline asm
	shr.u32 	%r661, %r657, 4;
	// begin inline asm
	lop3.b32 %r705, %r624, %r661, %r662, 202;
	// end inline asm
	shl.b32 	%r666, %r670, 4;
	// begin inline asm
	lop3.b32 %r697, %r624, %r665, %r666, 202;
	// end inline asm
	shr.u32 	%r669, %r665, 4;
	// begin inline asm
	lop3.b32 %r713, %r624, %r669, %r670, 202;
	// end inline asm
	shl.b32 	%r674, %r678, 4;
	// begin inline asm
	lop3.b32 %r721, %r624, %r673, %r674, 202;
	// end inline asm
	shr.u32 	%r677, %r673, 4;
	// begin inline asm
	lop3.b32 %r737, %r624, %r677, %r678, 202;
	// end inline asm
	shl.b32 	%r682, %r686, 4;
	// begin inline asm
	lop3.b32 %r729, %r624, %r681, %r682, 202;
	// end inline asm
	shr.u32 	%r685, %r681, 4;
	// begin inline asm
	lop3.b32 %r745, %r624, %r685, %r686, 202;
	// end inline asm
	mov.u32 	%r690, 25152;
	// begin inline asm
	prmt.b32 %r752, %r688, %r689, %r690;
	// end inline asm
	mov.u32 	%r694, 29521;
	// begin inline asm
	prmt.b32 %r784, %r688, %r689, %r694;
	// end inline asm
	// begin inline asm
	prmt.b32 %r760, %r696, %r697, %r690;
	// end inline asm
	// begin inline asm
	prmt.b32 %r792, %r696, %r697, %r694;
	// end inline asm
	// begin inline asm
	prmt.b32 %r753, %r704, %r705, %r690;
	// end inline asm
	// begin inline asm
	prmt.b32 %r785, %r704, %r705, %r694;
	// end inline asm
	// begin inline asm
	prmt.b32 %r761, %r712, %r713, %r690;
	// end inline asm
	// begin inline asm
	prmt.b32 %r793, %r712, %r713, %r694;
	// end inline asm
	// begin inline asm
	prmt.b32 %r768, %r720, %r721, %r690;
	// end inline asm
	// begin inline asm
	prmt.b32 %r800, %r720, %r721, %r694;
	// end inline asm
	// begin inline asm
	prmt.b32 %r776, %r728, %r729, %r690;
	// end inline asm
	// begin inline asm
	prmt.b32 %r808, %r728, %r729, %r694;
	// end inline asm
	// begin inline asm
	prmt.b32 %r769, %r736, %r737, %r690;
	// end inline asm
	// begin inline asm
	prmt.b32 %r801, %r736, %r737, %r694;
	// end inline asm
	// begin inline asm
	prmt.b32 %r777, %r744, %r745, %r690;
	// end inline asm
	// begin inline asm
	prmt.b32 %r809, %r744, %r745, %r694;
	// end inline asm
	mov.u32 	%r810, 21520;
	// begin inline asm
	prmt.b32 %r751, %r752, %r753, %r810;
	// end inline asm
	mov.u32 	%r814, 30258;
	// begin inline asm
	prmt.b32 %r755, %r752, %r753, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r759, %r760, %r761, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r763, %r760, %r761, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r767, %r768, %r769, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r771, %r768, %r769, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r775, %r776, %r777, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r779, %r776, %r777, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r783, %r784, %r785, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r787, %r784, %r785, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r791, %r792, %r793, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r795, %r792, %r793, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r799, %r800, %r801, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r803, %r800, %r801, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r807, %r808, %r809, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r811, %r808, %r809, %r814;
	// end inline asm
	st.shared.u32 	[%rd10], %r751;
	st.shared.u32 	[%rd12+512], %r759;
	st.shared.u32 	[%rd12+256], %r755;
	st.shared.u32 	[%rd12+768], %r763;
	and.b32  	%r902, %r834, 31;
	add.s32 	%r903, %r902, %r815;
	mul.wide.u32 	%rd180, %r903, 4;
	add.s64 	%rd182, %rd90, %rd180;
	st.shared.u32 	[%rd182], %r767;
	cvt.u64.u32 	%rd183, %r902;
	add.s64 	%rd184, %rd11, %rd183;
	shl.b64 	%rd185, %rd184, 2;
	add.s64 	%rd186, %rd90, %rd185;
	st.shared.u32 	[%rd186+512], %r775;
	st.shared.u32 	[%rd186+256], %r771;
	st.shared.u32 	[%rd186+768], %r779;
	st.shared.u32 	[%rd12+128], %r783;
	st.shared.u32 	[%rd12+640], %r791;
	st.shared.u32 	[%rd12+384], %r787;
	st.shared.u32 	[%rd12+896], %r795;
	st.shared.u32 	[%rd186+128], %r799;
	st.shared.u32 	[%rd186+640], %r807;
	st.shared.u32 	[%rd186+384], %r803;
	st.shared.u32 	[%rd186+896], %r811;
	bar.sync 	0;
	ld.shared.u32 	%r178, [%rd13];
	ld.shared.u32 	%r179, [%rd14];
	ld.shared.u32 	%r180, [%rd15];
	ld.shared.u32 	%r181, [%rd16];
	ld.shared.u32 	%r182, [%rd17];
	ld.shared.u32 	%r183, [%rd18];
	ld.shared.u32 	%r184, [%rd19];
	ld.shared.u32 	%r185, [%rd20];
	ld.shared.u32 	%r186, [%rd21];
	ld.shared.u32 	%r187, [%rd22];
	ld.shared.u32 	%r188, [%rd23];
	ld.shared.u32 	%r189, [%rd24];
	ld.shared.u32 	%r190, [%rd25];
	ld.shared.u32 	%r191, [%rd26];
	ld.shared.u32 	%r192, [%rd27];
	ld.shared.u32 	%r193, [%rd28];
	bar.sync 	0;
	shfl.sync.idx.b32	%r194, %r170, 0, 31, -1;
	shfl.sync.idx.b32	%r195, %r170, 1, 31, -1;
	shfl.sync.idx.b32	%r196, %r170, 2, 31, -1;
	shfl.sync.idx.b32	%r197, %r170, 3, 31, -1;
	shfl.sync.idx.b32	%r198, %r170, 4, 31, -1;
	shfl.sync.idx.b32	%r199, %r170, 5, 31, -1;
	shfl.sync.idx.b32	%r200, %r170, 6, 31, -1;
	shfl.sync.idx.b32	%r201, %r170, 7, 31, -1;
	shfl.sync.idx.b32	%r202, %r170, 8, 31, -1;
	shfl.sync.idx.b32	%r203, %r170, 9, 31, -1;
	shfl.sync.idx.b32	%r204, %r170, 10, 31, -1;
	shfl.sync.idx.b32	%r205, %r170, 11, 31, -1;
	shfl.sync.idx.b32	%r206, %r170, 12, 31, -1;
	shfl.sync.idx.b32	%r207, %r170, 13, 31, -1;
	shfl.sync.idx.b32	%r208, %r170, 14, 31, -1;
	shfl.sync.idx.b32	%r209, %r170, 15, 31, -1;
	setp.eq.s32 	%p256, %r194, 999999999;
	@%p256 bra 	$L__BB0_135;
// %bb.188:                             // %pass3055
                                        //   in Loop: Header=BB0_186 Depth=1
	add.s32 	%r904, %r194, %r3;
	mul.wide.s32 	%rd187, %r904, 4;
	add.s64 	%rd189, %rd90, %rd187;
	st.shared.u32 	[%rd189], %r178;
	setp.eq.s32 	%p257, %r195, 999999999;
	@%p257 bra 	$L__BB0_136;
// %bb.189:                             // %pass3123
                                        //   in Loop: Header=BB0_186 Depth=1
	add.s32 	%r905, %r195, %r3;
	mul.wide.s32 	%rd190, %r905, 4;
	add.s64 	%rd192, %rd90, %rd190;
	st.shared.u32 	[%rd192], %r179;
	setp.eq.s32 	%p258, %r196, 999999999;
	@%p258 bra 	$L__BB0_137;
// %bb.190:                             // %pass3191
                                        //   in Loop: Header=BB0_186 Depth=1
	add.s32 	%r906, %r196, %r3;
	mul.wide.s32 	%rd193, %r906, 4;
	add.s64 	%rd195, %rd90, %rd193;
	st.shared.u32 	[%rd195], %r180;
	setp.eq.s32 	%p259, %r197, 999999999;
	@%p259 bra 	$L__BB0_138;
// %bb.191:                             // %pass3259
                                        //   in Loop: Header=BB0_186 Depth=1
	add.s32 	%r907, %r197, %r3;
	mul.wide.s32 	%rd196, %r907, 4;
	add.s64 	%rd198, %rd90, %rd196;
	st.shared.u32 	[%rd198], %r181;
	setp.eq.s32 	%p260, %r198, 999999999;
	@%p260 bra 	$L__BB0_139;
// %bb.192:                             // %pass3327
                                        //   in Loop: Header=BB0_186 Depth=1
	add.s32 	%r908, %r198, %r3;
	mul.wide.s32 	%rd199, %r908, 4;
	add.s64 	%rd201, %rd90, %rd199;
	st.shared.u32 	[%rd201], %r182;
	setp.eq.s32 	%p261, %r199, 999999999;
	@%p261 bra 	$L__BB0_140;
// %bb.193:                             // %pass3395
                                        //   in Loop: Header=BB0_186 Depth=1
	add.s32 	%r909, %r199, %r3;
	mul.wide.s32 	%rd202, %r909, 4;
	add.s64 	%rd204, %rd90, %rd202;
	st.shared.u32 	[%rd204], %r183;
	setp.eq.s32 	%p262, %r200, 999999999;
	@%p262 bra 	$L__BB0_141;
// %bb.194:                             // %pass3463
                                        //   in Loop: Header=BB0_186 Depth=1
	add.s32 	%r910, %r200, %r3;
	mul.wide.s32 	%rd205, %r910, 4;
	add.s64 	%rd207, %rd90, %rd205;
	st.shared.u32 	[%rd207], %r184;
	setp.eq.s32 	%p263, %r201, 999999999;
	@%p263 bra 	$L__BB0_142;
// %bb.195:                             // %pass3531
                                        //   in Loop: Header=BB0_186 Depth=1
	add.s32 	%r911, %r201, %r3;
	mul.wide.s32 	%rd208, %r911, 4;
	add.s64 	%rd210, %rd90, %rd208;
	st.shared.u32 	[%rd210], %r185;
	setp.eq.s32 	%p264, %r202, 999999999;
	@%p264 bra 	$L__BB0_143;
// %bb.196:                             // %pass3599
                                        //   in Loop: Header=BB0_186 Depth=1
	add.s32 	%r912, %r202, %r3;
	mul.wide.s32 	%rd211, %r912, 4;
	add.s64 	%rd213, %rd90, %rd211;
	st.shared.u32 	[%rd213], %r186;
	setp.eq.s32 	%p265, %r203, 999999999;
	@%p265 bra 	$L__BB0_144;
// %bb.197:                             // %pass3667
                                        //   in Loop: Header=BB0_186 Depth=1
	add.s32 	%r913, %r203, %r3;
	mul.wide.s32 	%rd214, %r913, 4;
	add.s64 	%rd216, %rd90, %rd214;
	st.shared.u32 	[%rd216], %r187;
	setp.eq.s32 	%p266, %r204, 999999999;
	@%p266 bra 	$L__BB0_145;
// %bb.198:                             // %pass3735
                                        //   in Loop: Header=BB0_186 Depth=1
	add.s32 	%r914, %r204, %r3;
	mul.wide.s32 	%rd217, %r914, 4;
	add.s64 	%rd219, %rd90, %rd217;
	st.shared.u32 	[%rd219], %r188;
	setp.eq.s32 	%p267, %r205, 999999999;
	@%p267 bra 	$L__BB0_146;
// %bb.199:                             // %pass3803
                                        //   in Loop: Header=BB0_186 Depth=1
	add.s32 	%r915, %r205, %r3;
	mul.wide.s32 	%rd220, %r915, 4;
	add.s64 	%rd222, %rd90, %rd220;
	st.shared.u32 	[%rd222], %r189;
	setp.eq.s32 	%p268, %r206, 999999999;
	@%p268 bra 	$L__BB0_147;
// %bb.200:                             // %pass3871
                                        //   in Loop: Header=BB0_186 Depth=1
	add.s32 	%r916, %r206, %r3;
	mul.wide.s32 	%rd223, %r916, 4;
	add.s64 	%rd225, %rd90, %rd223;
	st.shared.u32 	[%rd225], %r190;
	setp.eq.s32 	%p269, %r207, 999999999;
	@%p269 bra 	$L__BB0_148;
// %bb.201:                             // %pass3939
                                        //   in Loop: Header=BB0_186 Depth=1
	add.s32 	%r917, %r207, %r3;
	mul.wide.s32 	%rd226, %r917, 4;
	add.s64 	%rd228, %rd90, %rd226;
	st.shared.u32 	[%rd228], %r191;
	setp.eq.s32 	%p270, %r208, 999999999;
	@%p270 bra 	$L__BB0_149;
// %bb.202:                             // %pass4007
                                        //   in Loop: Header=BB0_186 Depth=1
	add.s32 	%r918, %r208, %r3;
	mul.wide.s32 	%rd229, %r918, 4;
	add.s64 	%rd231, %rd90, %rd229;
	st.shared.u32 	[%rd231], %r192;
	setp.eq.s32 	%p271, %r209, 999999999;
	@%p271 bra 	$L__BB0_150;
// %bb.203:                             // %pass4075
                                        //   in Loop: Header=BB0_186 Depth=1
	add.s32 	%r920, %r209, %r3;
	mul.wide.s32 	%rd232, %r920, 4;
	add.s64 	%rd234, %rd90, %rd232;
	st.shared.u32 	[%rd234], %r193;
	bar.sync 	0;
	ld.shared.u32 	%r210, [%rd29];
	ld.shared.u32 	%r211, [%rd30];
	ld.shared.u32 	%r212, [%rd31];
	ld.shared.u32 	%r213, [%rd32];
	ld.shared.u32 	%r214, [%rd33];
	ld.shared.u32 	%r215, [%rd34];
	ld.shared.u32 	%r216, [%rd35];
	ld.shared.u32 	%r217, [%rd36];
	ld.shared.u32 	%r218, [%rd37];
	ld.shared.u32 	%r219, [%rd38];
	ld.shared.u32 	%r220, [%rd39];
	ld.shared.u32 	%r221, [%rd40];
	ld.shared.u32 	%r222, [%rd41];
	ld.shared.u32 	%r223, [%rd42];
	ld.shared.u32 	%r224, [%rd43];
	ld.shared.u32 	%r225, [%rd44];
	bar.sync 	0;
	mov.u32 	%r3387, 16;
	bra.uni 	$L__BB0_204;
$L__BB0_151:                            // %L21573
                                        //   in Loop: Header=BB0_204 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1469, [%rd7];
	ld.shared.u32 	%r1476, [%rd8+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1486, %r1483}, {%r371, %r374}, {%r1469}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1495, %r1492}, {%r371, %r374}, {%r1476}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1479, %r408;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1481, %r1479, %r1483;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1484, %r405, %r1486, %r1481;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1488, %r408;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1490, %r1488, %r1492;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1493, %r405, %r1495, %r1490;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1497, %r408, %r1486;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1500, %r405, %r1483, %r1497;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1504, %r408, %r1495;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1507, %r405, %r1492, %r1504;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1530, %r1533}, {%r447, %r450}, {%r1484, %r1500}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1537, %r1541}, {%r447, %r450}, {%r1493, %r1507}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1529, %r1530, %r1530;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1532, %r1533, %r1533, %r1529;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1536, %r1537, %r1537, %r1532;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1540, %r1541, %r1541, %r1536;
	// end inline asm
	mov.u32 	%r2126, 223677781;
	// begin inline asm
	fma.rn.f16x2 %r1544, %r2126, %r1540, %r3397;
	// end inline asm
	ld.shared.u32 	%r1552, [%rd57];
	ld.shared.u32 	%r1559, [%rd58];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1569, %r1566}, {%r371, %r374}, {%r1552}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1578, %r1575}, {%r371, %r374}, {%r1559}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1562, %r408;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1564, %r1562, %r1566;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1567, %r405, %r1569, %r1564;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1571, %r408;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1573, %r1571, %r1575;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1576, %r405, %r1578, %r1573;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1580, %r408, %r1569;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1583, %r405, %r1566, %r1580;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1587, %r408, %r1578;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1590, %r405, %r1575, %r1587;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1613, %r1616}, {%r447, %r450}, {%r1567, %r1583}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1620, %r1624}, {%r447, %r450}, {%r1576, %r1590}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1612, %r1613, %r1613;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1615, %r1616, %r1616, %r1612;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1619, %r1620, %r1620, %r1615;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1623, %r1624, %r1624, %r1619;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1627, %r2126, %r1623, %r1544;
	// end inline asm
	ld.shared.u32 	%r1635, [%rd59];
	ld.shared.u32 	%r1642, [%rd60];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1652, %r1649}, {%r371, %r374}, {%r1635}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1661, %r1658}, {%r371, %r374}, {%r1642}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1645, %r408;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1647, %r1645, %r1649;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1650, %r405, %r1652, %r1647;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1654, %r408;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1656, %r1654, %r1658;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1659, %r405, %r1661, %r1656;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1663, %r408, %r1652;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1666, %r405, %r1649, %r1663;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1670, %r408, %r1661;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1673, %r405, %r1658, %r1670;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1696, %r1699}, {%r447, %r450}, {%r1650, %r1666}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1703, %r1707}, {%r447, %r450}, {%r1659, %r1673}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1695, %r1696, %r1696;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1698, %r1699, %r1699, %r1695;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1702, %r1703, %r1703, %r1698;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1706, %r1707, %r1707, %r1702;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1710, %r2126, %r1706, %r1627;
	// end inline asm
	ld.shared.u32 	%r1718, [%rd61];
	ld.shared.u32 	%r1725, [%rd62];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1735, %r1732}, {%r371, %r374}, {%r1718}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1744, %r1741}, {%r371, %r374}, {%r1725}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1728, %r408;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1730, %r1728, %r1732;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1733, %r405, %r1735, %r1730;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1737, %r408;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1739, %r1737, %r1741;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1742, %r405, %r1744, %r1739;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1746, %r408, %r1735;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1749, %r405, %r1732, %r1746;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1753, %r408, %r1744;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1756, %r405, %r1741, %r1753;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1779, %r1782}, {%r447, %r450}, {%r1733, %r1749}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1786, %r1790}, {%r447, %r450}, {%r1742, %r1756}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1778, %r1779, %r1779;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1781, %r1782, %r1782, %r1778;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1785, %r1786, %r1786, %r1781;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1789, %r1790, %r1790, %r1785;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1793, %r2126, %r1789, %r1710;
	// end inline asm
	ld.shared.u32 	%r1801, [%rd63];
	ld.shared.u32 	%r1808, [%rd64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1818, %r1815}, {%r371, %r374}, {%r1801}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1827, %r1824}, {%r371, %r374}, {%r1808}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1811, %r408;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1813, %r1811, %r1815;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1816, %r405, %r1818, %r1813;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1820, %r408;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1822, %r1820, %r1824;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1825, %r405, %r1827, %r1822;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1829, %r408, %r1818;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1832, %r405, %r1815, %r1829;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1836, %r408, %r1827;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1839, %r405, %r1824, %r1836;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1862, %r1865}, {%r447, %r450}, {%r1816, %r1832}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1869, %r1873}, {%r447, %r450}, {%r1825, %r1839}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1861, %r1862, %r1862;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1864, %r1865, %r1865, %r1861;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1868, %r1869, %r1869, %r1864;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1872, %r1873, %r1873, %r1868;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1876, %r2126, %r1872, %r1793;
	// end inline asm
	ld.shared.u32 	%r1884, [%rd65];
	ld.shared.u32 	%r1891, [%rd66];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1901, %r1898}, {%r371, %r374}, {%r1884}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1910, %r1907}, {%r371, %r374}, {%r1891}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1894, %r408;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1896, %r1894, %r1898;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1899, %r405, %r1901, %r1896;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1903, %r408;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1905, %r1903, %r1907;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1908, %r405, %r1910, %r1905;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1912, %r408, %r1901;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1915, %r405, %r1898, %r1912;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1919, %r408, %r1910;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1922, %r405, %r1907, %r1919;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1945, %r1948}, {%r447, %r450}, {%r1899, %r1915}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1952, %r1956}, {%r447, %r450}, {%r1908, %r1922}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1944, %r1945, %r1945;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1947, %r1948, %r1948, %r1944;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1951, %r1952, %r1952, %r1947;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1955, %r1956, %r1956, %r1951;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1959, %r2126, %r1955, %r1876;
	// end inline asm
	ld.shared.u32 	%r1967, [%rd67];
	ld.shared.u32 	%r1974, [%rd68];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1984, %r1981}, {%r371, %r374}, {%r1967}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1993, %r1990}, {%r371, %r374}, {%r1974}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1977, %r408;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1979, %r1977, %r1981;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1982, %r405, %r1984, %r1979;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1986, %r408;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1988, %r1986, %r1990;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1991, %r405, %r1993, %r1988;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1995, %r408, %r1984;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1998, %r405, %r1981, %r1995;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2002, %r408, %r1993;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2005, %r405, %r1990, %r2002;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2028, %r2031}, {%r447, %r450}, {%r1982, %r1998}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2035, %r2039}, {%r447, %r450}, {%r1991, %r2005}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2027, %r2028, %r2028;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2030, %r2031, %r2031, %r2027;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2034, %r2035, %r2035, %r2030;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2038, %r2039, %r2039, %r2034;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2042, %r2126, %r2038, %r1959;
	// end inline asm
	ld.shared.u32 	%r2050, [%rd69];
	ld.shared.u32 	%r2057, [%rd70];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2067, %r2064}, {%r371, %r374}, {%r2050}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2076, %r2073}, {%r371, %r374}, {%r2057}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2060, %r408;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2062, %r2060, %r2064;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2065, %r405, %r2067, %r2062;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2069, %r408;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2071, %r2069, %r2073;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2074, %r405, %r2076, %r2071;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2078, %r408, %r2067;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2081, %r405, %r2064, %r2078;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2085, %r408, %r2076;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2088, %r405, %r2073, %r2085;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2111, %r2114}, {%r447, %r450}, {%r2065, %r2081}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2118, %r2122}, {%r447, %r450}, {%r2074, %r2088}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2110, %r2111, %r2111;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2113, %r2114, %r2114, %r2110;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2117, %r2118, %r2118, %r2113;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2121, %r2122, %r2122, %r2117;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3397, %r2126, %r2121, %r2042;
	// end inline asm
	add.s32 	%r3395, %r3395, 8;
	setp.eq.s32 	%p277, %r3395, 384;
	@%p277 bra 	$L__BB0_208;
$L__BB0_152:                            // %L29133
                                        //   in Loop: Header=BB0_204 Depth=2
	bar.sync 	0;
	add.s32 	%r3387, %r3387, -8;
	setp.ne.s32 	%p281, %r3387, -16;
	@%p281 bra 	$L__BB0_204;
	bra.uni 	$L__BB0_153;
$L__BB0_204:                            // %L12216
                                        //   Parent Loop BB0_186 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p272, %r3387, 16;
	selp.b32 	%r1313, %r210, 0, %p272;
	setp.eq.s32 	%p273, %r3387, 8;
	selp.b32 	%r1314, %r214, %r1313, %p273;
	setp.eq.s32 	%p274, %r3387, 0;
	selp.b32 	%r1315, %r218, %r1314, %p274;
	setp.eq.s32 	%p275, %r3387, -8;
	selp.b32 	%r1316, %r222, %r1315, %p275;
	selp.b32 	%r1317, %r211, 0, %p272;
	selp.b32 	%r1318, %r215, %r1317, %p273;
	selp.b32 	%r1319, %r219, %r1318, %p274;
	selp.b32 	%r1320, %r223, %r1319, %p275;
	selp.b32 	%r1321, %r212, 0, %p272;
	selp.b32 	%r1322, %r216, %r1321, %p273;
	selp.b32 	%r1323, %r220, %r1322, %p274;
	selp.b32 	%r1324, %r224, %r1323, %p275;
	selp.b32 	%r1325, %r213, 0, %p272;
	selp.b32 	%r1326, %r217, %r1325, %p273;
	selp.b32 	%r1327, %r221, %r1326, %p274;
	selp.b32 	%r1328, %r225, %r1327, %p275;
	// begin inline asm
	mov.b32 %r926, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r937, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r925, %r1316, -2004318072;
	mov.u32 	%r1062, 983055;
	// begin inline asm
	lop3.b32 %r923, %r1062, %r925, %r926, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r927, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r928, %r926, %r927;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r931, %r923, %r928;
	// end inline asm
	mov.u32 	%r1073, 15728880;
	// begin inline asm
	lop3.b32 %r934, %r1073, %r925, %r937, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r938, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r939, %r937, %r938;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r942, %r934, %r939;
	// end inline asm
	// begin inline asm
	mov.b32 %r972, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r983, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r971, %r1320, -2004318072;
	// begin inline asm
	lop3.b32 %r969, %r1062, %r971, %r972, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r973, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r974, %r972, %r973;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r977, %r969, %r974;
	// end inline asm
	// begin inline asm
	lop3.b32 %r980, %r1073, %r971, %r983, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r984, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r985, %r983, %r984;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r988, %r980, %r985;
	// end inline asm
	// begin inline asm
	mov.b32 %r1018, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1029, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1017, %r1324, -2004318072;
	// begin inline asm
	lop3.b32 %r1015, %r1062, %r1017, %r1018, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1019, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1020, %r1018, %r1019;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1023, %r1015, %r1020;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1026, %r1073, %r1017, %r1029, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1030, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1031, %r1029, %r1030;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1034, %r1026, %r1031;
	// end inline asm
	// begin inline asm
	mov.b32 %r1064, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1075, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1063, %r1328, -2004318072;
	// begin inline asm
	lop3.b32 %r1061, %r1062, %r1063, %r1064, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1065, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1066, %r1064, %r1065;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1069, %r1061, %r1066;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1072, %r1073, %r1063, %r1075, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1076, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1077, %r1075, %r1076;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1080, %r1072, %r1077;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r931;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1105, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r942;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1108, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r977;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1111, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r988;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1114, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r1023;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1117, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r1034;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1120, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r1069;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1123, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r1080;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1126, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1184, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1129, %r1130}, {%r274, %r277}, {%r1105}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1136, %r1137}, {%r274, %r277}, {%r1108}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1143, %r1144}, {%r274, %r277}, {%r1111}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1150, %r1151}, {%r274, %r277}, {%r1114}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1157, %r1158}, {%r274, %r277}, {%r1117}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1164, %r1165}, {%r274, %r277}, {%r1120}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1171, %r1172}, {%r274, %r277}, {%r1123}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1178, %r1179}, {%r274, %r277}, {%r1126}, {%r1184, %r1184};
	// end inline asm
	@%p1 bra 	$L__BB0_206;
	bra.uni 	$L__BB0_205;
$L__BB0_206:                            // %pass5495
                                        //   in Loop: Header=BB0_204 Depth=2
	// begin inline asm
	neg.f16x2 %r1185, %r315;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1187, %r1185, %r1130;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1190, %r312, %r1129, %r1187;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1194, %r315;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1196, %r1194, %r1137;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1199, %r312, %r1136, %r1196;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1203, %r315;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1205, %r1203, %r1144;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1208, %r312, %r1143, %r1205;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1212, %r315;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1214, %r1212, %r1151;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1217, %r312, %r1150, %r1214;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1221, %r315;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1223, %r1221, %r1158;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1226, %r312, %r1157, %r1223;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1230, %r315;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1232, %r1230, %r1165;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1235, %r312, %r1164, %r1232;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1239, %r315;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1241, %r1239, %r1172;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1244, %r312, %r1171, %r1241;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1248, %r315;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1250, %r1248, %r1179;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1253, %r312, %r1178, %r1250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1257, %r315, %r1129;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1260, %r312, %r1130, %r1257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1264, %r315, %r1136;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1267, %r312, %r1137, %r1264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1271, %r315, %r1143;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1274, %r312, %r1144, %r1271;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1278, %r315, %r1150;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1281, %r312, %r1151, %r1278;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1285, %r315, %r1157;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1288, %r312, %r1158, %r1285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1292, %r315, %r1164;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1295, %r312, %r1165, %r1292;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1299, %r315, %r1171;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1302, %r312, %r1172, %r1299;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1306, %r315, %r1178;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1309, %r312, %r1179, %r1306;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1402, %r1403}, {%r359, %r362}, {%r1190, %r1260}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1410, %r1411}, {%r359, %r362}, {%r1199, %r1267}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1418, %r1419}, {%r359, %r362}, {%r1208, %r1274}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1426, %r1427}, {%r359, %r362}, {%r1217, %r1281}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1434, %r1435}, {%r359, %r362}, {%r1226, %r1288}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1442, %r1443}, {%r359, %r362}, {%r1235, %r1295}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1450, %r1451}, {%r359, %r362}, {%r1244, %r1302}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1458, %r1459}, {%r359, %r362}, {%r1253, %r1309}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r226, %r1402, %r1403, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r227, %r1402, %r1403, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r228, %r1410, %r1411, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r229, %r1410, %r1411, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r230, %r1418, %r1419, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r231, %r1418, %r1419, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r232, %r1426, %r1427, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r233, %r1426, %r1427, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r234, %r1434, %r1435, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r235, %r1434, %r1435, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r236, %r1442, %r1443, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r237, %r1442, %r1443, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r238, %r1450, %r1451, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r239, %r1450, %r1451, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r240, %r1458, %r1459, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r241, %r1458, %r1459, %r814;
	// end inline asm
	st.shared.u32 	[%rd45], %r226;
	st.shared.u32 	[%rd47+16576], %r227;
	st.shared.u32 	[%rd47+64], %r228;
	st.shared.u32 	[%rd47+16640], %r229;
	st.shared.u32 	[%rd48], %r230;
	st.shared.u32 	[%rd50+16576], %r231;
	st.shared.u32 	[%rd50+64], %r232;
	st.shared.u32 	[%rd50+16640], %r233;
	st.shared.u32 	[%rd51], %r234;
	st.shared.u32 	[%rd53+16576], %r235;
	st.shared.u32 	[%rd53+64], %r236;
	st.shared.u32 	[%rd53+16640], %r237;
	st.shared.u32 	[%rd54], %r238;
	st.shared.u32 	[%rd56+16576], %r239;
	st.shared.u32 	[%rd56+64], %r240;
	st.shared.u32 	[%rd56+16640], %r241;
	@%p226 bra 	$L__BB0_151;
// %bb.207:                             // %pass7883
                                        //   in Loop: Header=BB0_204 Depth=2
	st.shared.u32 	[%rd45], %r226;
	st.shared.u32 	[%rd47+16576], %r227;
	st.shared.u32 	[%rd47+64], %r228;
	st.shared.u32 	[%rd47+16640], %r229;
	st.shared.u32 	[%rd48], %r230;
	st.shared.u32 	[%rd50+16576], %r231;
	st.shared.u32 	[%rd50+64], %r232;
	st.shared.u32 	[%rd50+16640], %r233;
	st.shared.u32 	[%rd51], %r234;
	st.shared.u32 	[%rd53+16576], %r235;
	st.shared.u32 	[%rd53+64], %r236;
	st.shared.u32 	[%rd53+16640], %r237;
	st.shared.u32 	[%rd54], %r238;
	st.shared.u32 	[%rd56+16576], %r239;
	st.shared.u32 	[%rd56+64], %r240;
	st.shared.u32 	[%rd56+16640], %r241;
	bra.uni 	$L__BB0_151;
$L__BB0_208:                            // %pass13168
                                        //   in Loop: Header=BB0_204 Depth=2
	shl.b32 	%r2130, %r3396, 20;
	or.b32  	%r2131, %r176, %r2130;
	cvt.u64.u32 	%rd237, %r2131;
	add.s64 	%rd238, %rd237, %rd9;
	shr.u64 	%rd239, %rd238, 34;
	add.s64 	%rd240, %rd238, %rd239;
	shr.s64 	%rd241, %rd240, 30;
	setp.lt.s64 	%p278, %rd238, 0;
	and.b64  	%rd242, %rd240, -1073741824;
	setp.ne.s64 	%p279, %rd242, %rd238;
	and.pred  	%p280, %p278, %p279;
	selp.u64 	%rd243, 1, 0, %p280;
	sub.s64 	%rd244, %rd243, %rd241;
	shl.b64 	%rd245, %rd244, 30;
	add.s64 	%rd246, %rd245, %rd238;
	shl.b64 	%rd247, %rd246, 2;
	add.s64 	%rd248, %rd4, %rd247;
	st.global.u32 	[%rd248], %r3397;
	add.s32 	%r3396, %r3396, 1;
	mov.u32 	%r3395, 0;
	mov.u32 	%r3397, %r3395;
	bra.uni 	$L__BB0_152;
$L__BB0_153:                            // %L29154.preheader
                                        //   in Loop: Header=BB0_186 Depth=1
	mov.u32 	%r3394, 16;
	bra.uni 	$L__BB0_154;
$L__BB0_155:                            // %L38511
                                        //   in Loop: Header=BB0_154 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r2685, [%rd7];
	ld.shared.u32 	%r2692, [%rd8+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2702, %r2699}, {%r371, %r374}, {%r2685}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2711, %r2708}, {%r371, %r374}, {%r2692}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2695, %r408;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2697, %r2695, %r2699;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2700, %r405, %r2702, %r2697;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2704, %r408;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2706, %r2704, %r2708;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2709, %r405, %r2711, %r2706;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2713, %r408, %r2702;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2716, %r405, %r2699, %r2713;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2720, %r408, %r2711;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2723, %r405, %r2708, %r2720;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2746, %r2749}, {%r447, %r450}, {%r2700, %r2716}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2753, %r2757}, {%r447, %r450}, {%r2709, %r2723}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2745, %r2746, %r2746;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2748, %r2749, %r2749, %r2745;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2752, %r2753, %r2753, %r2748;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2756, %r2757, %r2757, %r2752;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2760, %r2126, %r2756, %r3397;
	// end inline asm
	ld.shared.u32 	%r2768, [%rd57];
	ld.shared.u32 	%r2775, [%rd58];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2785, %r2782}, {%r371, %r374}, {%r2768}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2794, %r2791}, {%r371, %r374}, {%r2775}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2778, %r408;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2780, %r2778, %r2782;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2783, %r405, %r2785, %r2780;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2787, %r408;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2789, %r2787, %r2791;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2792, %r405, %r2794, %r2789;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2796, %r408, %r2785;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2799, %r405, %r2782, %r2796;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2803, %r408, %r2794;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2806, %r405, %r2791, %r2803;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2829, %r2832}, {%r447, %r450}, {%r2783, %r2799}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2836, %r2840}, {%r447, %r450}, {%r2792, %r2806}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2828, %r2829, %r2829;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2831, %r2832, %r2832, %r2828;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2835, %r2836, %r2836, %r2831;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2839, %r2840, %r2840, %r2835;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2843, %r2126, %r2839, %r2760;
	// end inline asm
	ld.shared.u32 	%r2851, [%rd59];
	ld.shared.u32 	%r2858, [%rd60];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2868, %r2865}, {%r371, %r374}, {%r2851}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2877, %r2874}, {%r371, %r374}, {%r2858}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2861, %r408;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2863, %r2861, %r2865;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2866, %r405, %r2868, %r2863;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2870, %r408;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2872, %r2870, %r2874;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2875, %r405, %r2877, %r2872;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2879, %r408, %r2868;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2882, %r405, %r2865, %r2879;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2886, %r408, %r2877;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2889, %r405, %r2874, %r2886;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2912, %r2915}, {%r447, %r450}, {%r2866, %r2882}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2919, %r2923}, {%r447, %r450}, {%r2875, %r2889}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2911, %r2912, %r2912;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2914, %r2915, %r2915, %r2911;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2918, %r2919, %r2919, %r2914;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2922, %r2923, %r2923, %r2918;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2926, %r2126, %r2922, %r2843;
	// end inline asm
	ld.shared.u32 	%r2934, [%rd61];
	ld.shared.u32 	%r2941, [%rd62];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2951, %r2948}, {%r371, %r374}, {%r2934}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2960, %r2957}, {%r371, %r374}, {%r2941}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2944, %r408;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2946, %r2944, %r2948;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2949, %r405, %r2951, %r2946;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2953, %r408;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2955, %r2953, %r2957;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2958, %r405, %r2960, %r2955;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2962, %r408, %r2951;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2965, %r405, %r2948, %r2962;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2969, %r408, %r2960;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2972, %r405, %r2957, %r2969;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2995, %r2998}, {%r447, %r450}, {%r2949, %r2965}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3002, %r3006}, {%r447, %r450}, {%r2958, %r2972}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2994, %r2995, %r2995;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2997, %r2998, %r2998, %r2994;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3001, %r3002, %r3002, %r2997;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3005, %r3006, %r3006, %r3001;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3009, %r2126, %r3005, %r2926;
	// end inline asm
	ld.shared.u32 	%r3017, [%rd63];
	ld.shared.u32 	%r3024, [%rd64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3034, %r3031}, {%r371, %r374}, {%r3017}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3043, %r3040}, {%r371, %r374}, {%r3024}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3027, %r408;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3029, %r3027, %r3031;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3032, %r405, %r3034, %r3029;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3036, %r408;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3038, %r3036, %r3040;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3041, %r405, %r3043, %r3038;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3045, %r408, %r3034;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3048, %r405, %r3031, %r3045;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3052, %r408, %r3043;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3055, %r405, %r3040, %r3052;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3078, %r3081}, {%r447, %r450}, {%r3032, %r3048}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3085, %r3089}, {%r447, %r450}, {%r3041, %r3055}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3077, %r3078, %r3078;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3080, %r3081, %r3081, %r3077;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3084, %r3085, %r3085, %r3080;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3088, %r3089, %r3089, %r3084;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3092, %r2126, %r3088, %r3009;
	// end inline asm
	ld.shared.u32 	%r3100, [%rd65];
	ld.shared.u32 	%r3107, [%rd66];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3117, %r3114}, {%r371, %r374}, {%r3100}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3126, %r3123}, {%r371, %r374}, {%r3107}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3110, %r408;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3112, %r3110, %r3114;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3115, %r405, %r3117, %r3112;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3119, %r408;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3121, %r3119, %r3123;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3124, %r405, %r3126, %r3121;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3128, %r408, %r3117;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3131, %r405, %r3114, %r3128;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3135, %r408, %r3126;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3138, %r405, %r3123, %r3135;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3161, %r3164}, {%r447, %r450}, {%r3115, %r3131}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3168, %r3172}, {%r447, %r450}, {%r3124, %r3138}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3160, %r3161, %r3161;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3163, %r3164, %r3164, %r3160;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3167, %r3168, %r3168, %r3163;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3171, %r3172, %r3172, %r3167;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3175, %r2126, %r3171, %r3092;
	// end inline asm
	ld.shared.u32 	%r3183, [%rd67];
	ld.shared.u32 	%r3190, [%rd68];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3200, %r3197}, {%r371, %r374}, {%r3183}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3209, %r3206}, {%r371, %r374}, {%r3190}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3193, %r408;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3195, %r3193, %r3197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3198, %r405, %r3200, %r3195;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3202, %r408;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3204, %r3202, %r3206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3207, %r405, %r3209, %r3204;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3211, %r408, %r3200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3214, %r405, %r3197, %r3211;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3218, %r408, %r3209;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3221, %r405, %r3206, %r3218;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3244, %r3247}, {%r447, %r450}, {%r3198, %r3214}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3251, %r3255}, {%r447, %r450}, {%r3207, %r3221}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3243, %r3244, %r3244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3246, %r3247, %r3247, %r3243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3250, %r3251, %r3251, %r3246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3254, %r3255, %r3255, %r3250;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3258, %r2126, %r3254, %r3175;
	// end inline asm
	ld.shared.u32 	%r3266, [%rd69];
	ld.shared.u32 	%r3273, [%rd70];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3283, %r3280}, {%r371, %r374}, {%r3266}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3292, %r3289}, {%r371, %r374}, {%r3273}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3276, %r408;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3278, %r3276, %r3280;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3281, %r405, %r3283, %r3278;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3285, %r408;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3287, %r3285, %r3289;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3290, %r405, %r3292, %r3287;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3294, %r408, %r3283;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3297, %r405, %r3280, %r3294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3301, %r408, %r3292;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3304, %r405, %r3289, %r3301;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3327, %r3330}, {%r447, %r450}, {%r3281, %r3297}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3334, %r3338}, {%r447, %r450}, {%r3290, %r3304}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3326, %r3327, %r3327;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3329, %r3330, %r3330, %r3326;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3333, %r3334, %r3334, %r3329;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3337, %r3338, %r3338, %r3333;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3397, %r2126, %r3337, %r3258;
	// end inline asm
	add.s32 	%r3395, %r3395, 8;
	setp.eq.s32 	%p287, %r3395, 384;
	@%p287 bra 	$L__BB0_210;
$L__BB0_156:                            // %L46071
                                        //   in Loop: Header=BB0_154 Depth=2
	bar.sync 	0;
	add.s32 	%r3394, %r3394, -8;
	setp.ne.s32 	%p291, %r3394, -16;
	@%p291 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_157;
$L__BB0_154:                            // %L29154
                                        //   Parent Loop BB0_186 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.lt.u32 	%p282, %r3, 16;
	setp.eq.s32 	%p283, %r3394, 16;
	selp.b32 	%r2661, %r210, 0, %p283;
	setp.eq.s32 	%p284, %r3394, 8;
	selp.b32 	%r2662, %r214, %r2661, %p284;
	setp.eq.s32 	%p285, %r3394, 0;
	selp.b32 	%r2663, %r218, %r2662, %p285;
	setp.eq.s32 	%p286, %r3394, -8;
	selp.b32 	%r2664, %r222, %r2663, %p286;
	selp.b32 	%r2665, %r211, 0, %p283;
	selp.b32 	%r2666, %r215, %r2665, %p284;
	selp.b32 	%r2667, %r219, %r2666, %p285;
	selp.b32 	%r2668, %r223, %r2667, %p286;
	selp.b32 	%r2669, %r212, 0, %p283;
	selp.b32 	%r2670, %r216, %r2669, %p284;
	selp.b32 	%r2671, %r220, %r2670, %p285;
	selp.b32 	%r2672, %r224, %r2671, %p286;
	selp.b32 	%r2673, %r213, 0, %p283;
	selp.b32 	%r2674, %r217, %r2673, %p284;
	selp.b32 	%r2675, %r221, %r2674, %p285;
	selp.b32 	%r2676, %r225, %r2675, %p286;
	// begin inline asm
	mov.b32 %r2160, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2171, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2677, %r2664, 8;
	xor.b32  	%r2170, %r2677, 8947848;
	// begin inline asm
	lop3.b32 %r2157, %r1062, %r2170, %r2160, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2161, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2162, %r2160, %r2161;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2165, %r2157, %r2162;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2168, %r1073, %r2170, %r2171, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2172, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2173, %r2171, %r2172;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2176, %r2168, %r2173;
	// end inline asm
	// begin inline asm
	mov.b32 %r2206, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2217, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2678, %r2668, 8;
	xor.b32  	%r2216, %r2678, 8947848;
	// begin inline asm
	lop3.b32 %r2203, %r1062, %r2216, %r2206, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2207, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2208, %r2206, %r2207;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2211, %r2203, %r2208;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2214, %r1073, %r2216, %r2217, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2218, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2219, %r2217, %r2218;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2222, %r2214, %r2219;
	// end inline asm
	// begin inline asm
	mov.b32 %r2252, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2263, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2679, %r2672, 8;
	xor.b32  	%r2262, %r2679, 8947848;
	// begin inline asm
	lop3.b32 %r2249, %r1062, %r2262, %r2252, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2253, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2254, %r2252, %r2253;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2257, %r2249, %r2254;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2260, %r1073, %r2262, %r2263, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2264, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2265, %r2263, %r2264;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2268, %r2260, %r2265;
	// end inline asm
	// begin inline asm
	mov.b32 %r2298, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2309, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2680, %r2676, 8;
	xor.b32  	%r2308, %r2680, 8947848;
	// begin inline asm
	lop3.b32 %r2295, %r1062, %r2308, %r2298, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2299, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2300, %r2298, %r2299;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2303, %r2295, %r2300;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2306, %r1073, %r2308, %r2309, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2310, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2311, %r2309, %r2310;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2314, %r2306, %r2311;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r2165;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2317, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2176;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2320, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r2211;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2323, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2222;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2326, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r2257;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2329, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2268;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2332, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r2303;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2335, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2314;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2338, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2404, %r2401}, {%r274, %r277}, {%r2317}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2413, %r2410}, {%r274, %r277}, {%r2320}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2422, %r2419}, {%r274, %r277}, {%r2323}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2431, %r2428}, {%r274, %r277}, {%r2326}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2440, %r2437}, {%r274, %r277}, {%r2329}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2449, %r2446}, {%r274, %r277}, {%r2332}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2458, %r2455}, {%r274, %r277}, {%r2335}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2467, %r2464}, {%r274, %r277}, {%r2338}, {%r1184, %r1184};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2397, %r315;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2399, %r2397, %r2401;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2402, %r312, %r2404, %r2399;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2406, %r315;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2408, %r2406, %r2410;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2411, %r312, %r2413, %r2408;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2415, %r315;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2417, %r2415, %r2419;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2420, %r312, %r2422, %r2417;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2424, %r315;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2426, %r2424, %r2428;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2429, %r312, %r2431, %r2426;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2433, %r315;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2435, %r2433, %r2437;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2438, %r312, %r2440, %r2435;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2442, %r315;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2444, %r2442, %r2446;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2447, %r312, %r2449, %r2444;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2451, %r315;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2453, %r2451, %r2455;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2456, %r312, %r2458, %r2453;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2460, %r315;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2462, %r2460, %r2464;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2465, %r312, %r2467, %r2462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2469, %r315, %r2404;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2472, %r312, %r2401, %r2469;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2476, %r315, %r2413;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2479, %r312, %r2410, %r2476;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2483, %r315, %r2422;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2486, %r312, %r2419, %r2483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2490, %r315, %r2431;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2493, %r312, %r2428, %r2490;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2497, %r315, %r2440;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2500, %r312, %r2437, %r2497;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2504, %r315, %r2449;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2507, %r312, %r2446, %r2504;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2511, %r315, %r2458;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2514, %r312, %r2455, %r2511;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2518, %r315, %r2467;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2521, %r312, %r2464, %r2518;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2598, %r2599}, {%r359, %r362}, {%r2402, %r2472}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2606, %r2607}, {%r359, %r362}, {%r2411, %r2479}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2614, %r2615}, {%r359, %r362}, {%r2420, %r2486}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2622, %r2623}, {%r359, %r362}, {%r2429, %r2493}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2630, %r2631}, {%r359, %r362}, {%r2438, %r2500}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2638, %r2639}, {%r359, %r362}, {%r2447, %r2507}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2646, %r2647}, {%r359, %r362}, {%r2456, %r2514}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2654, %r2655}, {%r359, %r362}, {%r2465, %r2521}, {%r1184, %r1184}, %r177, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2597, %r2598, %r2599, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2601, %r2598, %r2599, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2605, %r2606, %r2607, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2609, %r2606, %r2607, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2613, %r2614, %r2615, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2617, %r2614, %r2615, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2621, %r2622, %r2623, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2625, %r2622, %r2623, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2629, %r2630, %r2631, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2633, %r2630, %r2631, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2637, %r2638, %r2639, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2641, %r2638, %r2639, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2645, %r2646, %r2647, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2649, %r2646, %r2647, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2653, %r2654, %r2655, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2657, %r2654, %r2655, %r814;
	// end inline asm
	st.shared.u32 	[%rd45], %r2597;
	st.shared.u32 	[%rd47+16576], %r2601;
	st.shared.u32 	[%rd47+64], %r2605;
	st.shared.u32 	[%rd47+16640], %r2609;
	st.shared.u32 	[%rd48], %r2613;
	st.shared.u32 	[%rd50+16576], %r2617;
	st.shared.u32 	[%rd50+64], %r2621;
	st.shared.u32 	[%rd50+16640], %r2625;
	st.shared.u32 	[%rd51], %r2629;
	st.shared.u32 	[%rd53+16576], %r2633;
	st.shared.u32 	[%rd53+64], %r2637;
	st.shared.u32 	[%rd53+16640], %r2641;
	st.shared.u32 	[%rd54], %r2645;
	st.shared.u32 	[%rd56+16576], %r2649;
	st.shared.u32 	[%rd56+64], %r2653;
	st.shared.u32 	[%rd56+16640], %r2657;
	@%p282 bra 	$L__BB0_209;
	bra.uni 	$L__BB0_155;
$L__BB0_209:                            // %pass15693
                                        //   in Loop: Header=BB0_154 Depth=2
	st.shared.u32 	[%rd45], %r2597;
	st.shared.u32 	[%rd47+16576], %r2601;
	st.shared.u32 	[%rd47+64], %r2605;
	st.shared.u32 	[%rd47+16640], %r2609;
	st.shared.u32 	[%rd48], %r2613;
	st.shared.u32 	[%rd50+16576], %r2617;
	st.shared.u32 	[%rd50+64], %r2621;
	st.shared.u32 	[%rd50+16640], %r2625;
	st.shared.u32 	[%rd51], %r2629;
	st.shared.u32 	[%rd53+16576], %r2633;
	st.shared.u32 	[%rd53+64], %r2637;
	st.shared.u32 	[%rd53+16640], %r2641;
	st.shared.u32 	[%rd54], %r2645;
	st.shared.u32 	[%rd56+16576], %r2649;
	st.shared.u32 	[%rd56+64], %r2653;
	st.shared.u32 	[%rd56+16640], %r2657;
	bra.uni 	$L__BB0_155;
$L__BB0_210:                            // %pass20978
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r3346, %r3396, 20;
	or.b32  	%r3347, %r176, %r3346;
	cvt.u64.u32 	%rd249, %r3347;
	add.s64 	%rd250, %rd249, %rd9;
	shr.u64 	%rd251, %rd250, 34;
	add.s64 	%rd252, %rd250, %rd251;
	shr.s64 	%rd253, %rd252, 30;
	setp.lt.s64 	%p288, %rd250, 0;
	and.b64  	%rd254, %rd252, -1073741824;
	setp.ne.s64 	%p289, %rd254, %rd250;
	and.pred  	%p290, %p288, %p289;
	selp.u64 	%rd255, 1, 0, %p290;
	sub.s64 	%rd256, %rd255, %rd253;
	shl.b64 	%rd257, %rd256, 30;
	add.s64 	%rd258, %rd257, %rd250;
	shl.b64 	%rd259, %rd258, 2;
	add.s64 	%rd260, %rd4, %rd259;
	st.global.u32 	[%rd260], %r3397;
	add.s32 	%r3396, %r3396, 1;
	mov.u32 	%r3395, %r1184;
	mov.u32 	%r3397, %r1184;
	bra.uni 	$L__BB0_156;
$L__BB0_158:                            // %L46102
	mov.u32 	%r3348, 0;
	st.global.u32 	[%rd6], %r3348;
	ret;
$L__BB0_205:                            // %post_box_union
	mov.u64 	%rd235, exception4110;
	cvta.global.u64 	%rd236, %rd235;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd236;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd71;
	st.param.b32 	[param0+8], %r244;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_135:                            // %L6809
	mov.u32 	%r3364, 5;
	st.global.u32 	[%rd6], %r3364;
	mov.u64 	%rd291, exception4062;
	cvta.global.u64 	%rd292, %rd291;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd292;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd71;
	st.param.b32 	[param0+8], %r244;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_136:                            // %L6965
	mov.u32 	%r3363, 5;
	st.global.u32 	[%rd6], %r3363;
	mov.u64 	%rd289, exception4062;
	cvta.global.u64 	%rd290, %rd289;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd290;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd71;
	st.param.b32 	[param0+8], %r244;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_137:                            // %L7121
	mov.u32 	%r3362, 5;
	st.global.u32 	[%rd6], %r3362;
	mov.u64 	%rd287, exception4062;
	cvta.global.u64 	%rd288, %rd287;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd288;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd71;
	st.param.b32 	[param0+8], %r244;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_138:                            // %L7277
	mov.u32 	%r3361, 5;
	st.global.u32 	[%rd6], %r3361;
	mov.u64 	%rd285, exception4062;
	cvta.global.u64 	%rd286, %rd285;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd286;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd71;
	st.param.b32 	[param0+8], %r244;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_139:                            // %L7433
	mov.u32 	%r3360, 5;
	st.global.u32 	[%rd6], %r3360;
	mov.u64 	%rd283, exception4062;
	cvta.global.u64 	%rd284, %rd283;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd284;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd71;
	st.param.b32 	[param0+8], %r244;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_140:                            // %L7589
	mov.u32 	%r3359, 5;
	st.global.u32 	[%rd6], %r3359;
	mov.u64 	%rd281, exception4062;
	cvta.global.u64 	%rd282, %rd281;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd282;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd71;
	st.param.b32 	[param0+8], %r244;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_141:                            // %L7745
	mov.u32 	%r3358, 5;
	st.global.u32 	[%rd6], %r3358;
	mov.u64 	%rd279, exception4062;
	cvta.global.u64 	%rd280, %rd279;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd280;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd71;
	st.param.b32 	[param0+8], %r244;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_142:                            // %L7901
	mov.u32 	%r3357, 5;
	st.global.u32 	[%rd6], %r3357;
	mov.u64 	%rd277, exception4062;
	cvta.global.u64 	%rd278, %rd277;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd278;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd71;
	st.param.b32 	[param0+8], %r244;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_143:                            // %L8057
	mov.u32 	%r3356, 5;
	st.global.u32 	[%rd6], %r3356;
	mov.u64 	%rd275, exception4062;
	cvta.global.u64 	%rd276, %rd275;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd276;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd71;
	st.param.b32 	[param0+8], %r244;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_144:                            // %L8213
	mov.u32 	%r3355, 5;
	st.global.u32 	[%rd6], %r3355;
	mov.u64 	%rd273, exception4062;
	cvta.global.u64 	%rd274, %rd273;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd274;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd71;
	st.param.b32 	[param0+8], %r244;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L8369
	mov.u32 	%r3354, 5;
	st.global.u32 	[%rd6], %r3354;
	mov.u64 	%rd271, exception4062;
	cvta.global.u64 	%rd272, %rd271;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd272;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd71;
	st.param.b32 	[param0+8], %r244;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L8525
	mov.u32 	%r3353, 5;
	st.global.u32 	[%rd6], %r3353;
	mov.u64 	%rd269, exception4062;
	cvta.global.u64 	%rd270, %rd269;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd270;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd71;
	st.param.b32 	[param0+8], %r244;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L8681
	mov.u32 	%r3352, 5;
	st.global.u32 	[%rd6], %r3352;
	mov.u64 	%rd267, exception4062;
	cvta.global.u64 	%rd268, %rd267;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd268;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd71;
	st.param.b32 	[param0+8], %r244;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L8837
	mov.u32 	%r3351, 5;
	st.global.u32 	[%rd6], %r3351;
	mov.u64 	%rd265, exception4062;
	cvta.global.u64 	%rd266, %rd265;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd266;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd71;
	st.param.b32 	[param0+8], %r244;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L8993
	mov.u32 	%r3350, 5;
	st.global.u32 	[%rd6], %r3350;
	mov.u64 	%rd263, exception4062;
	cvta.global.u64 	%rd264, %rd263;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd264;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd71;
	st.param.b32 	[param0+8], %r244;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L9149
	mov.u32 	%r3349, 5;
	st.global.u32 	[%rd6], %r3349;
	mov.u64 	%rd261, exception4062;
	cvta.global.u64 	%rd262, %rd261;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd262;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd71;
	st.param.b32 	[param0+8], %r244;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L166
	mov.u32 	%r3366, 2;
	st.global.u32 	[%rd6], %r3366;
	mov.u64 	%rd295, exception4062;
	cvta.global.u64 	%rd296, %rd295;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd296;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd71;
	st.param.b32 	[param0+8], %r244;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_12:                             // %L307
	mov.u32 	%r3365, 3;
	st.global.u32 	[%rd6], %r3365;
	mov.u64 	%rd293, exception4062;
	cvta.global.u64 	%rd294, %rd293;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd294;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd71;
	st.param.b32 	[param0+8], %r244;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd77, exception1;
	cvta.global.u64 	%rd78, %rd77;
	{ // callseq 45, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd78;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 45
	{ // callseq 46, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd71;
	st.param.b32 	[param0+8], %r244;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 46
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_134:                            // %L1153
	add.u64 	%rd76, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r3, %r1};
	st.local.v2.u32 	[%rd5+8], {%r4, %r85};
	st.local.u32 	[%rd5+16], %r86;
	mov.u64 	%rd82, __unnamed_1;
	cvta.global.u64 	%rd83, %rd82;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd83;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd76;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r460, [retval0+0];
	} // callseq 47
	mov.u32 	%r462, 4;
	st.global.u32 	[%rd6], %r462;
	mov.u64 	%rd85, exception4062;
	cvta.global.u64 	%rd86, %rd85;
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd86;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 48
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd71;
	st.param.b32 	[param0+8], %r244;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 49
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
