// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception2603[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception2651[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 512, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<348>;
	.reg .b16 	%rs<97>;
	.reg .b32 	%r<3515>;
	.reg .f32 	%f<752>;
	.reg .b64 	%rd<423>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r296, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd59, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r305, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r305, 34943;
	@%p2 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd60, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r297, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r3, %r2, 9;
	mov.u32 	%r4, %tid.y;
	shl.b32 	%r5, %r4, 5;
	or.b32  	%r306, %r3, %r1;
	or.b32  	%r307, %r306, %r5;
	mul.wide.u32 	%rd67, %r307, 4;
	add.s64 	%rd6, %rd60, %rd67;
	mov.u32 	%r308, 1;
	st.global.u32 	[%rd6], %r308;
	setp.gt.u32 	%p3, %r297, 32767;
	@%p3 bra 	$L__BB0_6;
// %bb.3:                               // %L122
	ld.param.u32 	%r298, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p4, %r298, %r297;
	setp.gt.s32 	%p5, %r298, 65535;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_6;
// %bb.4:                               // %L129
	ld.param.u32 	%r299, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r298, %r297;
	and.b32  	%r309, %r6, 63;
	setp.ne.s32 	%p7, %r309, 0;
	setp.gt.u32 	%p8, %r299, 4095;
	or.pred  	%p9, %p7, %p8;
	@%p9 bra 	$L__BB0_6;
// %bb.5:                               // %L140
	ld.param.u32 	%r300, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p10, %r300, %r299;
	setp.lt.s32 	%p11, %r300, 8192;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r310, %r300, %r299;
	mul.hi.s32 	%r311, %r6, 1374389535;
	shr.u32 	%r312, %r311, 31;
	shr.s32 	%r313, %r311, 3;
	add.s32 	%r314, %r313, %r312;
	setp.eq.s32 	%p13, %r310, %r314;
	@%p13 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L262
	ld.param.u32 	%r301, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p14, %r301, 0;
	@%p14 bra 	$L__BB0_12;
// %bb.9:                               // %L264
	ld.param.u32 	%r303, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	ld.param.u32 	%r302, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p15, %r302, %r301;
	setp.gt.s32 	%p16, %r302, 64;
	or.pred  	%p17, %p15, %p16;
	setp.lt.s32 	%p18, %r303, 0;
	or.pred  	%p19, %p17, %p18;
	@%p19 bra 	$L__BB0_12;
// %bb.10:                              // %L280
	ld.param.u32 	%r304, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p20, %r304, %r303;
	setp.gt.s32 	%p21, %r304, 64;
	or.pred  	%p22, %p20, %p21;
	@%p22 bra 	$L__BB0_12;
// %bb.11:                              // %L290
	sub.s32 	%r315, %r304, %r303;
	sub.s32 	%r316, %r302, %r301;
	setp.eq.s32 	%p23, %r315, %r316;
	@%p23 bra 	$L__BB0_171;
	bra.uni 	$L__BB0_12;
$L__BB0_171:                            // %pass162
	and.b32  	%r127, %r1, 3;
	shr.u32 	%r128, %r1, 2;
	mul.lo.s32 	%r317, %r127, %r128;
	and.b32  	%r318, %r317, 7;
	cvt.rn.f32.s32 	%f185, %r318;
	mov.f32 	%f186, 0f40800000;
	div.approx.f32 	%f151, %f185, %f186;
	abs.f32 	%f750, %f151;
	setp.lt.f32 	%p24, %f750, 0f40000000;
	mov.f32 	%f703, 0f40000000;
	setp.gtu.f32 	%p343, %f750, 0f4B800000;
	mov.f32 	%f746, %f750;
	@%p24 bra 	$L__BB0_183;
// %bb.172:
	@%p343 bra 	$L__BB0_179;
	bra.uni 	$L__BB0_173;
$L__BB0_179:
	mov.b32 	%r130, %f750;
	and.b32  	%r319, %r130, 8388607;
	or.b32  	%r3468, %r319, 1065353216;
	mov.b32 	%f745, %r3468;
	add.s32 	%r320, %r130, -1073741824;
	and.b32  	%r3469, %r320, -8388608;
	setp.eq.s32 	%p31, %r3469, 0;
	@%p31 bra 	$L__BB0_182;
// %bb.180:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f196, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f195,%f196;
	// end inline asm
$L__BB0_181:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r321, %r3469, 192937984;
	add.s32 	%r322, %r3468, %r321;
	mov.b32 	%f197, %r322;
	mul.f32 	%f198, %f195, %f197;
	sub.f32 	%f199, %f197, %f198;
	fma.rn.f32 	%f200, %f199, %f195, %f198;
	sub.f32 	%f201, %f197, %f200;
	fma.rz.f32 	%f202, %f201, %f195, %f200;
	cvt.rzi.f32.f32 	%f203, %f202;
	sub.f32 	%f745, %f197, %f203;
	sub.s32 	%r3469, %r3469, %r321;
	mov.b32 	%r3468, %f745;
	setp.ne.s32 	%p32, %r3469, 0;
	setp.ne.s32 	%p33, %r3468, 0;
	and.pred  	%p34, %p32, %p33;
	@%p34 bra 	$L__BB0_181;
$L__BB0_182:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p35, %r130, 2139095039;
	selp.f32 	%f204, 0f7FFFFFFF, 0f4B800000, %p35;
	mul.f32 	%f205, %f745, 0f34000000;
	mul.f32 	%f746, %f204, %f205;
	bra.uni 	$L__BB0_183;
$L__BB0_173:                            // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f188, %f750, %f703;
	cvt.rzi.f32.f32 	%f744, %f188;
	fma.rn.f32 	%f154, %f744, 0fC0000000, %f750;
	mov.b32 	%r129, %f154;
	setp.lt.u32 	%p26, %r129, 1073741824;
	@%p26 bra 	$L__BB0_178;
// %bb.174:
	setp.lt.u32 	%p27, %r129, -2147483647;
	@%p27 bra 	$L__BB0_176;
// %bb.175:
	add.f32 	%f193, %f744, 0fBF800000;
	setp.lt.f32 	%p30, %f154, 0fC0000000;
	add.f32 	%f194, %f193, 0fBF800000;
	selp.f32 	%f744, %f194, %f193, %p30;
	bra.uni 	$L__BB0_178;
$L__BB0_176:
	add.f32 	%f744, %f744, 0f3F800000;
	setp.ltu.f32 	%p28, %f154, 0f40800000;
	@%p28 bra 	$L__BB0_178;
// %bb.177:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f189, %f744, 0f3F800000;
	fma.rn.f32 	%f191, %f703, 0fC0400000, %f154;
	setp.ge.f32 	%p29, %f191, 0f00000000;
	add.f32 	%f192, %f189, 0f3F800000;
	selp.f32 	%f744, %f192, %f189, %p29;
$L__BB0_178:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f746, %f744, 0fC0000000, %f750;
$L__BB0_183:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f206, %f746;
	setp.gtu.f32 	%p36, %f206, 0f7F800000;
	mov.b32 	%r323, %f151;
	and.b32  	%r137, %r323, -2147483648;
	@%p36 bra 	$L__BB0_185;
// %bb.184:
	mov.b32 	%r324, %f746;
	or.b32  	%r325, %r137, %r324;
	mov.b32 	%f746, %r325;
$L__BB0_185:                            // %__nv_fmodf.exit
	shl.b32 	%r140, %r1, 1;
	and.b32  	%r340, %r140, 2;
	mul.lo.s32 	%r141, %r340, %r128;
	cvt.rn.f32.s32 	%f239, %r141;
	mov.f32 	%f240, 0f41800000;
	div.approx.f32 	%f168, %f239, %f240;
	abs.f32 	%f726, %f168;
	setp.lt.f32 	%p44, %f726, 0f40000000;
	setp.gtu.f32 	%p344, %f726, 0f4B800000;
	mov.f32 	%f706, %f726;
	@%p44 bra 	$L__BB0_24;
// %bb.13:
	@%p344 bra 	$L__BB0_20;
	bra.uni 	$L__BB0_14;
$L__BB0_20:
	mov.b32 	%r8, %f726;
	and.b32  	%r341, %r8, 8388607;
	or.b32  	%r3434, %r341, 1065353216;
	mov.b32 	%f705, %r3434;
	add.s32 	%r342, %r8, -1073741824;
	and.b32  	%r3435, %r342, -8388608;
	setp.eq.s32 	%p51, %r3435, 0;
	@%p51 bra 	$L__BB0_23;
// %bb.21:                              // %__nv_fmaf_rn.exit4.i.i.i2328.preheader
	mov.f32 	%f250, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f249,%f250;
	// end inline asm
$L__BB0_22:                             // %__nv_fmaf_rn.exit4.i.i.i2328
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r343, %r3435, 192937984;
	add.s32 	%r344, %r3434, %r343;
	mov.b32 	%f251, %r344;
	mul.f32 	%f252, %f249, %f251;
	sub.f32 	%f253, %f251, %f252;
	fma.rn.f32 	%f254, %f253, %f249, %f252;
	sub.f32 	%f255, %f251, %f254;
	fma.rz.f32 	%f256, %f255, %f249, %f254;
	cvt.rzi.f32.f32 	%f257, %f256;
	sub.f32 	%f705, %f251, %f257;
	sub.s32 	%r3435, %r3435, %r343;
	mov.b32 	%r3434, %f705;
	setp.ne.s32 	%p52, %r3435, 0;
	setp.ne.s32 	%p53, %r3434, 0;
	and.pred  	%p54, %p52, %p53;
	@%p54 bra 	$L__BB0_22;
$L__BB0_23:                             // %__internal_fmodf_slowpath_mod.exit.i.i2330
	setp.gt.u32 	%p55, %r8, 2139095039;
	selp.f32 	%f258, 0f7FFFFFFF, 0f4B800000, %p55;
	mul.f32 	%f259, %f705, 0f34000000;
	mul.f32 	%f706, %f258, %f259;
	bra.uni 	$L__BB0_24;
$L__BB0_14:                             // %__nv_fast_fdividef.exit.i.i.i2307
	div.approx.f32 	%f242, %f726, %f703;
	cvt.rzi.f32.f32 	%f704, %f242;
	fma.rn.f32 	%f2, %f704, 0fC0000000, %f726;
	mov.b32 	%r7, %f2;
	setp.lt.u32 	%p46, %r7, 1073741824;
	@%p46 bra 	$L__BB0_19;
// %bb.15:
	setp.lt.u32 	%p47, %r7, -2147483647;
	@%p47 bra 	$L__BB0_17;
// %bb.16:
	add.f32 	%f247, %f704, 0fBF800000;
	setp.lt.f32 	%p50, %f2, 0fC0000000;
	add.f32 	%f248, %f247, 0fBF800000;
	selp.f32 	%f704, %f248, %f247, %p50;
	bra.uni 	$L__BB0_19;
$L__BB0_17:
	add.f32 	%f704, %f704, 0f3F800000;
	setp.ltu.f32 	%p48, %f2, 0f40800000;
	@%p48 bra 	$L__BB0_19;
// %bb.18:                              // %__nv_fmaf_rn.exit.i.i.i2311
	add.f32 	%f243, %f704, 0f3F800000;
	fma.rn.f32 	%f245, %f703, 0fC0400000, %f2;
	setp.ge.f32 	%p49, %f245, 0f00000000;
	add.f32 	%f246, %f243, 0f3F800000;
	selp.f32 	%f704, %f246, %f243, %p49;
$L__BB0_19:                             // %__internal_fmodf_fastpath_quot.exit.i.i2314
	fma.rn.f32 	%f706, %f704, 0fC0000000, %f726;
$L__BB0_24:                             // %__internal_fmodf_kernel.exit.i2333
	abs.f32 	%f260, %f706;
	setp.gtu.f32 	%p56, %f260, 0f7F800000;
	mov.b32 	%r345, %f168;
	and.b32  	%r15, %r345, -2147483648;
	@%p56 bra 	$L__BB0_26;
// %bb.25:
	mov.b32 	%r346, %f706;
	or.b32  	%r347, %r15, %r346;
	mov.b32 	%f706, %r347;
$L__BB0_26:                             // %__nv_fmodf.exit2334
	add.s32 	%r356, %r141, %r128;
	cvt.rn.f32.s32 	%f291, %r356;
	div.approx.f32 	%f18, %f291, %f240;
	abs.f32 	%f730, %f18;
	setp.lt.f32 	%p64, %f730, 0f40000000;
	setp.gtu.f32 	%p345, %f730, 0f4B800000;
	mov.f32 	%f710, %f730;
	@%p64 bra 	$L__BB0_38;
// %bb.27:
	@%p345 bra 	$L__BB0_34;
	bra.uni 	$L__BB0_28;
$L__BB0_34:
	mov.b32 	%r17, %f730;
	and.b32  	%r357, %r17, 8388607;
	or.b32  	%r3436, %r357, 1065353216;
	mov.b32 	%f709, %r3436;
	add.s32 	%r358, %r17, -1073741824;
	and.b32  	%r3437, %r358, -8388608;
	setp.eq.s32 	%p71, %r3437, 0;
	@%p71 bra 	$L__BB0_37;
// %bb.35:                              // %__nv_fmaf_rn.exit4.i.i.i2359.preheader
	mov.f32 	%f302, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f301,%f302;
	// end inline asm
$L__BB0_36:                             // %__nv_fmaf_rn.exit4.i.i.i2359
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r359, %r3437, 192937984;
	add.s32 	%r360, %r3436, %r359;
	mov.b32 	%f303, %r360;
	mul.f32 	%f304, %f301, %f303;
	sub.f32 	%f305, %f303, %f304;
	fma.rn.f32 	%f306, %f305, %f301, %f304;
	sub.f32 	%f307, %f303, %f306;
	fma.rz.f32 	%f308, %f307, %f301, %f306;
	cvt.rzi.f32.f32 	%f309, %f308;
	sub.f32 	%f709, %f303, %f309;
	sub.s32 	%r3437, %r3437, %r359;
	mov.b32 	%r3436, %f709;
	setp.ne.s32 	%p72, %r3437, 0;
	setp.ne.s32 	%p73, %r3436, 0;
	and.pred  	%p74, %p72, %p73;
	@%p74 bra 	$L__BB0_36;
$L__BB0_37:                             // %__internal_fmodf_slowpath_mod.exit.i.i2361
	setp.gt.u32 	%p75, %r17, 2139095039;
	selp.f32 	%f310, 0f7FFFFFFF, 0f4B800000, %p75;
	mul.f32 	%f311, %f709, 0f34000000;
	mul.f32 	%f710, %f310, %f311;
	bra.uni 	$L__BB0_38;
$L__BB0_28:                             // %__nv_fast_fdividef.exit.i.i.i2338
	div.approx.f32 	%f294, %f730, %f703;
	cvt.rzi.f32.f32 	%f708, %f294;
	fma.rn.f32 	%f21, %f708, 0fC0000000, %f730;
	mov.b32 	%r16, %f21;
	setp.lt.u32 	%p66, %r16, 1073741824;
	@%p66 bra 	$L__BB0_33;
// %bb.29:
	setp.lt.u32 	%p67, %r16, -2147483647;
	@%p67 bra 	$L__BB0_31;
// %bb.30:
	add.f32 	%f299, %f708, 0fBF800000;
	setp.lt.f32 	%p70, %f21, 0fC0000000;
	add.f32 	%f300, %f299, 0fBF800000;
	selp.f32 	%f708, %f300, %f299, %p70;
	bra.uni 	$L__BB0_33;
$L__BB0_31:
	add.f32 	%f708, %f708, 0f3F800000;
	setp.ltu.f32 	%p68, %f21, 0f40800000;
	@%p68 bra 	$L__BB0_33;
// %bb.32:                              // %__nv_fmaf_rn.exit.i.i.i2342
	add.f32 	%f295, %f708, 0f3F800000;
	fma.rn.f32 	%f297, %f703, 0fC0400000, %f21;
	setp.ge.f32 	%p69, %f297, 0f00000000;
	add.f32 	%f298, %f295, 0f3F800000;
	selp.f32 	%f708, %f298, %f295, %p69;
$L__BB0_33:                             // %__internal_fmodf_fastpath_quot.exit.i.i2345
	fma.rn.f32 	%f710, %f708, 0fC0000000, %f730;
$L__BB0_38:                             // %__internal_fmodf_kernel.exit.i2364
	abs.f32 	%f312, %f710;
	setp.gtu.f32 	%p76, %f312, 0f7F800000;
	mov.b32 	%r361, %f18;
	and.b32  	%r24, %r361, -2147483648;
	@%p76 bra 	$L__BB0_40;
// %bb.39:
	mov.b32 	%r362, %f710;
	or.b32  	%r363, %r24, %r362;
	mov.b32 	%f710, %r363;
$L__BB0_40:                             // %__nv_fmodf.exit2365
	mul.lo.s32 	%r27, %r140, %r128;
	and.b32  	%r378, %r27, 2;
	cvt.rn.f32.s32 	%f345, %r378;
	div.approx.f32 	%f35, %f345, %f703;
	abs.f32 	%f734, %f35;
	setp.lt.f32 	%p84, %f734, 0f40000000;
	setp.gtu.f32 	%p346, %f734, 0f4B800000;
	mov.f32 	%f714, %f734;
	@%p84 bra 	$L__BB0_52;
// %bb.41:
	@%p346 bra 	$L__BB0_48;
	bra.uni 	$L__BB0_42;
$L__BB0_48:
	mov.b32 	%r29, %f734;
	and.b32  	%r379, %r29, 8388607;
	or.b32  	%r3438, %r379, 1065353216;
	mov.b32 	%f713, %r3438;
	add.s32 	%r380, %r29, -1073741824;
	and.b32  	%r3439, %r380, -8388608;
	setp.eq.s32 	%p91, %r3439, 0;
	@%p91 bra 	$L__BB0_51;
// %bb.49:                              // %__nv_fmaf_rn.exit4.i.i.i2390.preheader
	mov.f32 	%f356, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f355,%f356;
	// end inline asm
$L__BB0_50:                             // %__nv_fmaf_rn.exit4.i.i.i2390
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r381, %r3439, 192937984;
	add.s32 	%r382, %r3438, %r381;
	mov.b32 	%f357, %r382;
	mul.f32 	%f358, %f355, %f357;
	sub.f32 	%f359, %f357, %f358;
	fma.rn.f32 	%f360, %f359, %f355, %f358;
	sub.f32 	%f361, %f357, %f360;
	fma.rz.f32 	%f362, %f361, %f355, %f360;
	cvt.rzi.f32.f32 	%f363, %f362;
	sub.f32 	%f713, %f357, %f363;
	sub.s32 	%r3439, %r3439, %r381;
	mov.b32 	%r3438, %f713;
	setp.ne.s32 	%p92, %r3439, 0;
	setp.ne.s32 	%p93, %r3438, 0;
	and.pred  	%p94, %p92, %p93;
	@%p94 bra 	$L__BB0_50;
$L__BB0_51:                             // %__internal_fmodf_slowpath_mod.exit.i.i2392
	setp.gt.u32 	%p95, %r29, 2139095039;
	selp.f32 	%f364, 0f7FFFFFFF, 0f4B800000, %p95;
	mul.f32 	%f365, %f713, 0f34000000;
	mul.f32 	%f714, %f364, %f365;
	bra.uni 	$L__BB0_52;
$L__BB0_42:                             // %__nv_fast_fdividef.exit.i.i.i2369
	div.approx.f32 	%f348, %f734, %f703;
	cvt.rzi.f32.f32 	%f712, %f348;
	fma.rn.f32 	%f38, %f712, 0fC0000000, %f734;
	mov.b32 	%r28, %f38;
	setp.lt.u32 	%p86, %r28, 1073741824;
	@%p86 bra 	$L__BB0_47;
// %bb.43:
	setp.lt.u32 	%p87, %r28, -2147483647;
	@%p87 bra 	$L__BB0_45;
// %bb.44:
	add.f32 	%f353, %f712, 0fBF800000;
	setp.lt.f32 	%p90, %f38, 0fC0000000;
	add.f32 	%f354, %f353, 0fBF800000;
	selp.f32 	%f712, %f354, %f353, %p90;
	bra.uni 	$L__BB0_47;
$L__BB0_45:
	add.f32 	%f712, %f712, 0f3F800000;
	setp.ltu.f32 	%p88, %f38, 0f40800000;
	@%p88 bra 	$L__BB0_47;
// %bb.46:                              // %__nv_fmaf_rn.exit.i.i.i2373
	add.f32 	%f349, %f712, 0f3F800000;
	fma.rn.f32 	%f351, %f703, 0fC0400000, %f38;
	setp.ge.f32 	%p89, %f351, 0f00000000;
	add.f32 	%f352, %f349, 0f3F800000;
	selp.f32 	%f712, %f352, %f349, %p89;
$L__BB0_47:                             // %__internal_fmodf_fastpath_quot.exit.i.i2376
	fma.rn.f32 	%f714, %f712, 0fC0000000, %f734;
$L__BB0_52:                             // %__internal_fmodf_kernel.exit.i2395
	mov.f32 	%f230, 0f00000000;
	abs.f32 	%f366, %f714;
	setp.gtu.f32 	%p96, %f366, 0f7F800000;
	mov.b32 	%r383, %f35;
	and.b32  	%r36, %r383, -2147483648;
	@%p96 bra 	$L__BB0_54;
// %bb.53:
	mov.b32 	%r384, %f714;
	or.b32  	%r385, %r36, %r384;
	mov.b32 	%f714, %r385;
$L__BB0_54:                             // %__nv_fmodf.exit2396
	add.f32 	%f367, %f714, %f714;
	mov.b32 	%r386, %f367;
	and.b32  	%r387, %r386, -2147483648;
	or.b32  	%r388, %r387, 1056964608;
	mov.b32 	%f368, %r388;
	add.f32 	%f369, %f367, %f368;
	cvt.rzi.f32.f32 	%f370, %f369;
	abs.f32 	%f371, %f367;
	setp.gt.f32 	%p97, %f371, 0f4B000000;
	selp.f32 	%f372, %f367, %f370, %p97;
	cvt.rzi.f32.f32 	%f373, %f367;
	setp.lt.f32 	%p98, %f371, 0f3F000000;
	selp.f32 	%f374, %f373, %f372, %p98;
	cvt.rzi.s32.f32 	%r389, %f374;
	fma.rn.f32 	%f375, %f374, 0fBF000000, %f714;
	mul.f32 	%f376, %f375, %f375;
	fma.rn.f32 	%f377, %f376, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f378, %f376, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f379, %f377, %f376, 0fC0A55DF6;
	fma.rn.f32 	%f380, %f378, %f376, 0f4081E0CF;
	fma.rn.f32 	%f381, %f376, %f375, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f376, 0fC09DE9E6;
	fma.rn.f32 	%f383, %f379, %f381, 0f00000000;
	fma.rn.f32 	%f384, %f382, %f376, 0f3F800000;
	fma.rn.f32 	%f385, %f375, 0f40490FDB, %f383;
	and.b32  	%r390, %r389, 1;
	setp.eq.b32 	%p99, %r390, 1;
	selp.f32 	%f386, %f384, %f385, %p99;
	selp.f32 	%f387, %f385, %f384, %p99;
	and.b32  	%r391, %r389, 2;
	setp.eq.s32 	%p100, %r391, 0;
	neg.f32 	%f388, %f386;
	selp.f32 	%f389, %f386, %f388, %p100;
	add.s32 	%r392, %r389, 1;
	and.b32  	%r393, %r392, 2;
	setp.eq.s32 	%p101, %r393, 0;
	sub.f32 	%f391, %f230, %f387;
	cvt.rzi.f32.f32 	%f393, %f714;
	setp.eq.f32 	%p102, %f393, %f714;
	mul.f32 	%f394, %f714, 0f00000000;
	selp.f32 	%f76, %f394, %f389, %p102;
	abs.f32 	%f395, %f714;
	add.s32 	%r394, %r27, %r128;
	and.b32  	%r395, %r394, 3;
	cvt.rn.f32.s32 	%f397, %r395;
	div.approx.f32 	%f54, %f397, %f703;
	abs.f32 	%f738, %f54;
	setp.lt.f32 	%p104, %f738, 0f40000000;
	setp.gtu.f32 	%p347, %f738, 0f4B800000;
	mov.f32 	%f718, %f738;
	@%p104 bra 	$L__BB0_66;
// %bb.55:
	@%p347 bra 	$L__BB0_62;
	bra.uni 	$L__BB0_56;
$L__BB0_62:
	mov.b32 	%r38, %f738;
	and.b32  	%r396, %r38, 8388607;
	or.b32  	%r3440, %r396, 1065353216;
	mov.b32 	%f717, %r3440;
	add.s32 	%r397, %r38, -1073741824;
	and.b32  	%r3441, %r397, -8388608;
	setp.eq.s32 	%p111, %r3441, 0;
	@%p111 bra 	$L__BB0_65;
// %bb.63:                              // %__nv_fmaf_rn.exit4.i.i.i2421.preheader
	mov.f32 	%f408, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f407,%f408;
	// end inline asm
$L__BB0_64:                             // %__nv_fmaf_rn.exit4.i.i.i2421
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r398, %r3441, 192937984;
	add.s32 	%r399, %r3440, %r398;
	mov.b32 	%f409, %r399;
	mul.f32 	%f410, %f407, %f409;
	sub.f32 	%f411, %f409, %f410;
	fma.rn.f32 	%f412, %f411, %f407, %f410;
	sub.f32 	%f413, %f409, %f412;
	fma.rz.f32 	%f414, %f413, %f407, %f412;
	cvt.rzi.f32.f32 	%f415, %f414;
	sub.f32 	%f717, %f409, %f415;
	sub.s32 	%r3441, %r3441, %r398;
	mov.b32 	%r3440, %f717;
	setp.ne.s32 	%p112, %r3441, 0;
	setp.ne.s32 	%p113, %r3440, 0;
	and.pred  	%p114, %p112, %p113;
	@%p114 bra 	$L__BB0_64;
$L__BB0_65:                             // %__internal_fmodf_slowpath_mod.exit.i.i2423
	setp.gt.u32 	%p115, %r38, 2139095039;
	selp.f32 	%f416, 0f7FFFFFFF, 0f4B800000, %p115;
	mul.f32 	%f417, %f717, 0f34000000;
	mul.f32 	%f718, %f416, %f417;
	bra.uni 	$L__BB0_66;
$L__BB0_56:                             // %__nv_fast_fdividef.exit.i.i.i2400
	div.approx.f32 	%f400, %f738, %f703;
	cvt.rzi.f32.f32 	%f716, %f400;
	fma.rn.f32 	%f57, %f716, 0fC0000000, %f738;
	mov.b32 	%r37, %f57;
	setp.lt.u32 	%p106, %r37, 1073741824;
	@%p106 bra 	$L__BB0_61;
// %bb.57:
	setp.lt.u32 	%p107, %r37, -2147483647;
	@%p107 bra 	$L__BB0_59;
// %bb.58:
	add.f32 	%f405, %f716, 0fBF800000;
	setp.lt.f32 	%p110, %f57, 0fC0000000;
	add.f32 	%f406, %f405, 0fBF800000;
	selp.f32 	%f716, %f406, %f405, %p110;
	bra.uni 	$L__BB0_61;
$L__BB0_59:
	add.f32 	%f716, %f716, 0f3F800000;
	setp.ltu.f32 	%p108, %f57, 0f40800000;
	@%p108 bra 	$L__BB0_61;
// %bb.60:                              // %__nv_fmaf_rn.exit.i.i.i2404
	add.f32 	%f401, %f716, 0f3F800000;
	fma.rn.f32 	%f403, %f703, 0fC0400000, %f57;
	setp.ge.f32 	%p109, %f403, 0f00000000;
	add.f32 	%f404, %f401, 0f3F800000;
	selp.f32 	%f716, %f404, %f401, %p109;
$L__BB0_61:                             // %__internal_fmodf_fastpath_quot.exit.i.i2407
	fma.rn.f32 	%f718, %f716, 0fC0000000, %f738;
$L__BB0_66:                             // %__internal_fmodf_kernel.exit.i2426
	selp.f32 	%f392, %f387, %f391, %p101;
	setp.gt.f32 	%p103, %f395, 0f4B800000;
	add.f32 	%f396, %f76, 0f3F800000;
	abs.f32 	%f418, %f718;
	setp.gtu.f32 	%p116, %f418, 0f7F800000;
	mov.b32 	%r400, %f54;
	and.b32  	%r45, %r400, -2147483648;
	@%p116 bra 	$L__BB0_68;
// %bb.67:
	mov.b32 	%r401, %f718;
	or.b32  	%r402, %r45, %r401;
	mov.b32 	%f718, %r402;
$L__BB0_68:                             // %__nv_fmodf.exit2427
	selp.f32 	%f53, %f396, %f392, %p103;
	add.f32 	%f419, %f718, %f718;
	mov.b32 	%r403, %f419;
	and.b32  	%r404, %r403, -2147483648;
	or.b32  	%r405, %r404, 1056964608;
	mov.b32 	%f420, %r405;
	add.f32 	%f421, %f419, %f420;
	cvt.rzi.f32.f32 	%f422, %f421;
	abs.f32 	%f423, %f419;
	setp.gt.f32 	%p117, %f423, 0f4B000000;
	selp.f32 	%f424, %f419, %f422, %p117;
	cvt.rzi.f32.f32 	%f425, %f419;
	setp.lt.f32 	%p118, %f423, 0f3F000000;
	selp.f32 	%f426, %f425, %f424, %p118;
	cvt.rzi.s32.f32 	%r406, %f426;
	fma.rn.f32 	%f427, %f426, 0fBF000000, %f718;
	mul.f32 	%f428, %f427, %f427;
	fma.rn.f32 	%f429, %f428, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f430, %f428, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f431, %f429, %f428, 0fC0A55DF6;
	fma.rn.f32 	%f432, %f430, %f428, 0f4081E0CF;
	fma.rn.f32 	%f433, %f428, %f427, 0f00000000;
	fma.rn.f32 	%f434, %f432, %f428, 0fC09DE9E6;
	fma.rn.f32 	%f435, %f431, %f433, 0f00000000;
	fma.rn.f32 	%f436, %f434, %f428, 0f3F800000;
	fma.rn.f32 	%f437, %f427, 0f40490FDB, %f435;
	and.b32  	%r407, %r406, 1;
	setp.eq.b32 	%p119, %r407, 1;
	selp.f32 	%f438, %f436, %f437, %p119;
	selp.f32 	%f439, %f437, %f436, %p119;
	and.b32  	%r408, %r406, 2;
	setp.eq.s32 	%p120, %r408, 0;
	neg.f32 	%f440, %f438;
	selp.f32 	%f441, %f438, %f440, %p120;
	add.s32 	%r409, %r406, 1;
	and.b32  	%r410, %r409, 2;
	setp.eq.s32 	%p121, %r410, 0;
	sub.f32 	%f443, %f230, %f439;
	selp.f32 	%f444, %f439, %f443, %p121;
	cvt.rzi.f32.f32 	%f445, %f718;
	setp.eq.f32 	%p122, %f445, %f718;
	mul.f32 	%f446, %f718, 0f00000000;
	selp.f32 	%f78, %f446, %f441, %p122;
	abs.f32 	%f447, %f718;
	setp.gt.f32 	%p123, %f447, 0f4B800000;
	add.f32 	%f448, %f78, 0f3F800000;
	selp.f32 	%f72, %f448, %f444, %p123;
	and.b32  	%r46, %r1, 2;
	setp.eq.s32 	%p124, %r46, 0;
	mov.f32 	%f75, %f53;
	mov.f32 	%f77, %f72;
	@%p124 bra 	$L__BB0_70;
// %bb.69:                              // %L688
	neg.f32 	%f77, %f78;
	neg.f32 	%f75, %f76;
	mov.f32 	%f76, %f53;
	mov.f32 	%f78, %f72;
$L__BB0_70:                             // %L690
	@%p24 bra 	$L__BB0_193;
// %bb.71:
	@%p343 bra 	$L__BB0_189;
	bra.uni 	$L__BB0_72;
$L__BB0_189:
	mov.b32 	%r143, %f750;
	and.b32  	%r417, %r143, 8388607;
	or.b32  	%r3470, %r417, 1065353216;
	mov.b32 	%f749, %r3470;
	add.s32 	%r418, %r143, -1073741824;
	and.b32  	%r3471, %r418, -8388608;
	setp.eq.s32 	%p132, %r3471, 0;
	@%p132 bra 	$L__BB0_192;
// %bb.190:                             // %__nv_fmaf_rn.exit4.i.i.i2452.preheader
	mov.f32 	%f458, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f457,%f458;
	// end inline asm
$L__BB0_191:                            // %__nv_fmaf_rn.exit4.i.i.i2452
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r419, %r3471, 192937984;
	add.s32 	%r420, %r3470, %r419;
	mov.b32 	%f459, %r420;
	mul.f32 	%f460, %f457, %f459;
	sub.f32 	%f461, %f459, %f460;
	fma.rn.f32 	%f462, %f461, %f457, %f460;
	sub.f32 	%f463, %f459, %f462;
	fma.rz.f32 	%f464, %f463, %f457, %f462;
	cvt.rzi.f32.f32 	%f465, %f464;
	sub.f32 	%f749, %f459, %f465;
	sub.s32 	%r3471, %r3471, %r419;
	mov.b32 	%r3470, %f749;
	setp.ne.s32 	%p133, %r3471, 0;
	setp.ne.s32 	%p134, %r3470, 0;
	and.pred  	%p135, %p133, %p134;
	@%p135 bra 	$L__BB0_191;
$L__BB0_192:                            // %__internal_fmodf_slowpath_mod.exit.i.i2454
	setp.gt.u32 	%p136, %r143, 2139095039;
	selp.f32 	%f466, 0f7FFFFFFF, 0f4B800000, %p136;
	mul.f32 	%f467, %f749, 0f34000000;
	mul.f32 	%f750, %f466, %f467;
	bra.uni 	$L__BB0_193;
$L__BB0_72:                             // %__nv_fast_fdividef.exit.i.i.i2431
	div.approx.f32 	%f450, %f750, %f703;
	cvt.rzi.f32.f32 	%f748, %f450;
	fma.rn.f32 	%f171, %f748, 0fC0000000, %f750;
	mov.b32 	%r142, %f171;
	setp.lt.u32 	%p127, %r142, 1073741824;
	@%p127 bra 	$L__BB0_188;
// %bb.73:
	setp.lt.u32 	%p128, %r142, -2147483647;
	@%p128 bra 	$L__BB0_186;
// %bb.74:
	add.f32 	%f455, %f748, 0fBF800000;
	setp.lt.f32 	%p131, %f171, 0fC0000000;
	add.f32 	%f456, %f455, 0fBF800000;
	selp.f32 	%f748, %f456, %f455, %p131;
	bra.uni 	$L__BB0_188;
$L__BB0_186:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p129, %f171, 0f40800000;
	@%p129 bra 	$L__BB0_188;
// %bb.187:                             // %__nv_fmaf_rn.exit.i.i.i2435
	add.f32 	%f451, %f748, 0f3F800000;
	fma.rn.f32 	%f453, %f703, 0fC0400000, %f171;
	setp.ge.f32 	%p130, %f453, 0f00000000;
	add.f32 	%f454, %f451, 0f3F800000;
	selp.f32 	%f748, %f454, %f451, %p130;
$L__BB0_188:                            // %__internal_fmodf_fastpath_quot.exit.i.i2438
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_193:                            // %__internal_fmodf_kernel.exit.i2457
	abs.f32 	%f468, %f750;
	setp.gtu.f32 	%p137, %f468, 0f7F800000;
	@%p137 bra 	$L__BB0_195;
// %bb.194:
	mov.b32 	%r421, %f750;
	or.b32  	%r422, %r137, %r421;
	mov.b32 	%f750, %r422;
$L__BB0_195:                            // %__nv_fmodf.exit2458
	@%p44 bra 	$L__BB0_86;
// %bb.75:
	@%p344 bra 	$L__BB0_82;
	bra.uni 	$L__BB0_76;
$L__BB0_82:
	mov.b32 	%r50, %f726;
	and.b32  	%r437, %r50, 8388607;
	or.b32  	%r3442, %r437, 1065353216;
	mov.b32 	%f725, %r3442;
	add.s32 	%r438, %r50, -1073741824;
	and.b32  	%r3443, %r438, -8388608;
	setp.eq.s32 	%p152, %r3443, 0;
	@%p152 bra 	$L__BB0_85;
// %bb.83:                              // %__nv_fmaf_rn.exit4.i.i.i2483.preheader
	mov.f32 	%f510, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f509,%f510;
	// end inline asm
$L__BB0_84:                             // %__nv_fmaf_rn.exit4.i.i.i2483
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r439, %r3443, 192937984;
	add.s32 	%r440, %r3442, %r439;
	mov.b32 	%f511, %r440;
	mul.f32 	%f512, %f509, %f511;
	sub.f32 	%f513, %f511, %f512;
	fma.rn.f32 	%f514, %f513, %f509, %f512;
	sub.f32 	%f515, %f511, %f514;
	fma.rz.f32 	%f516, %f515, %f509, %f514;
	cvt.rzi.f32.f32 	%f517, %f516;
	sub.f32 	%f725, %f511, %f517;
	sub.s32 	%r3443, %r3443, %r439;
	mov.b32 	%r3442, %f725;
	setp.ne.s32 	%p153, %r3443, 0;
	setp.ne.s32 	%p154, %r3442, 0;
	and.pred  	%p155, %p153, %p154;
	@%p155 bra 	$L__BB0_84;
$L__BB0_85:                             // %__internal_fmodf_slowpath_mod.exit.i.i2485
	setp.gt.u32 	%p156, %r50, 2139095039;
	selp.f32 	%f518, 0f7FFFFFFF, 0f4B800000, %p156;
	mul.f32 	%f519, %f725, 0f34000000;
	mul.f32 	%f726, %f518, %f519;
	bra.uni 	$L__BB0_86;
$L__BB0_76:                             // %__nv_fast_fdividef.exit.i.i.i2462
	div.approx.f32 	%f502, %f726, %f703;
	cvt.rzi.f32.f32 	%f724, %f502;
	fma.rn.f32 	%f80, %f724, 0fC0000000, %f726;
	mov.b32 	%r49, %f80;
	setp.lt.u32 	%p147, %r49, 1073741824;
	@%p147 bra 	$L__BB0_81;
// %bb.77:
	setp.lt.u32 	%p148, %r49, -2147483647;
	@%p148 bra 	$L__BB0_79;
// %bb.78:
	add.f32 	%f507, %f724, 0fBF800000;
	setp.lt.f32 	%p151, %f80, 0fC0000000;
	add.f32 	%f508, %f507, 0fBF800000;
	selp.f32 	%f724, %f508, %f507, %p151;
	bra.uni 	$L__BB0_81;
$L__BB0_79:
	add.f32 	%f724, %f724, 0f3F800000;
	setp.ltu.f32 	%p149, %f80, 0f40800000;
	@%p149 bra 	$L__BB0_81;
// %bb.80:                              // %__nv_fmaf_rn.exit.i.i.i2466
	add.f32 	%f503, %f724, 0f3F800000;
	fma.rn.f32 	%f505, %f703, 0fC0400000, %f80;
	setp.ge.f32 	%p150, %f505, 0f00000000;
	add.f32 	%f506, %f503, 0f3F800000;
	selp.f32 	%f724, %f506, %f503, %p150;
$L__BB0_81:                             // %__internal_fmodf_fastpath_quot.exit.i.i2469
	fma.rn.f32 	%f726, %f724, 0fC0000000, %f726;
$L__BB0_86:                             // %__internal_fmodf_kernel.exit.i2488
	abs.f32 	%f520, %f726;
	setp.gtu.f32 	%p157, %f520, 0f7F800000;
	@%p157 bra 	$L__BB0_88;
// %bb.87:
	mov.b32 	%r441, %f726;
	or.b32  	%r442, %r15, %r441;
	mov.b32 	%f726, %r442;
$L__BB0_88:                             // %__nv_fmodf.exit2489
	@%p64 bra 	$L__BB0_100;
// %bb.89:
	@%p345 bra 	$L__BB0_96;
	bra.uni 	$L__BB0_90;
$L__BB0_96:
	mov.b32 	%r58, %f730;
	and.b32  	%r451, %r58, 8388607;
	or.b32  	%r3444, %r451, 1065353216;
	mov.b32 	%f729, %r3444;
	add.s32 	%r452, %r58, -1073741824;
	and.b32  	%r3445, %r452, -8388608;
	setp.eq.s32 	%p172, %r3445, 0;
	@%p172 bra 	$L__BB0_99;
// %bb.97:                              // %__nv_fmaf_rn.exit4.i.i.i2514.preheader
	mov.f32 	%f560, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f559,%f560;
	// end inline asm
$L__BB0_98:                             // %__nv_fmaf_rn.exit4.i.i.i2514
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r453, %r3445, 192937984;
	add.s32 	%r454, %r3444, %r453;
	mov.b32 	%f561, %r454;
	mul.f32 	%f562, %f559, %f561;
	sub.f32 	%f563, %f561, %f562;
	fma.rn.f32 	%f564, %f563, %f559, %f562;
	sub.f32 	%f565, %f561, %f564;
	fma.rz.f32 	%f566, %f565, %f559, %f564;
	cvt.rzi.f32.f32 	%f567, %f566;
	sub.f32 	%f729, %f561, %f567;
	sub.s32 	%r3445, %r3445, %r453;
	mov.b32 	%r3444, %f729;
	setp.ne.s32 	%p173, %r3445, 0;
	setp.ne.s32 	%p174, %r3444, 0;
	and.pred  	%p175, %p173, %p174;
	@%p175 bra 	$L__BB0_98;
$L__BB0_99:                             // %__internal_fmodf_slowpath_mod.exit.i.i2516
	setp.gt.u32 	%p176, %r58, 2139095039;
	selp.f32 	%f568, 0f7FFFFFFF, 0f4B800000, %p176;
	mul.f32 	%f569, %f729, 0f34000000;
	mul.f32 	%f730, %f568, %f569;
	bra.uni 	$L__BB0_100;
$L__BB0_90:                             // %__nv_fast_fdividef.exit.i.i.i2493
	div.approx.f32 	%f552, %f730, %f703;
	cvt.rzi.f32.f32 	%f728, %f552;
	fma.rn.f32 	%f97, %f728, 0fC0000000, %f730;
	mov.b32 	%r57, %f97;
	setp.lt.u32 	%p167, %r57, 1073741824;
	@%p167 bra 	$L__BB0_95;
// %bb.91:
	setp.lt.u32 	%p168, %r57, -2147483647;
	@%p168 bra 	$L__BB0_93;
// %bb.92:
	add.f32 	%f557, %f728, 0fBF800000;
	setp.lt.f32 	%p171, %f97, 0fC0000000;
	add.f32 	%f558, %f557, 0fBF800000;
	selp.f32 	%f728, %f558, %f557, %p171;
	bra.uni 	$L__BB0_95;
$L__BB0_93:
	add.f32 	%f728, %f728, 0f3F800000;
	setp.ltu.f32 	%p169, %f97, 0f40800000;
	@%p169 bra 	$L__BB0_95;
// %bb.94:                              // %__nv_fmaf_rn.exit.i.i.i2497
	add.f32 	%f553, %f728, 0f3F800000;
	fma.rn.f32 	%f555, %f703, 0fC0400000, %f97;
	setp.ge.f32 	%p170, %f555, 0f00000000;
	add.f32 	%f556, %f553, 0f3F800000;
	selp.f32 	%f728, %f556, %f553, %p170;
$L__BB0_95:                             // %__internal_fmodf_fastpath_quot.exit.i.i2500
	fma.rn.f32 	%f730, %f728, 0fC0000000, %f730;
$L__BB0_100:                            // %__internal_fmodf_kernel.exit.i2519
	abs.f32 	%f570, %f730;
	setp.gtu.f32 	%p177, %f570, 0f7F800000;
	@%p177 bra 	$L__BB0_102;
// %bb.101:
	mov.b32 	%r455, %f730;
	or.b32  	%r456, %r24, %r455;
	mov.b32 	%f730, %r456;
$L__BB0_102:                            // %__nv_fmodf.exit2520
	@%p84 bra 	$L__BB0_114;
// %bb.103:
	@%p346 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_104;
$L__BB0_110:
	mov.b32 	%r68, %f734;
	and.b32  	%r471, %r68, 8388607;
	or.b32  	%r3446, %r471, 1065353216;
	mov.b32 	%f733, %r3446;
	add.s32 	%r472, %r68, -1073741824;
	and.b32  	%r3447, %r472, -8388608;
	setp.eq.s32 	%p192, %r3447, 0;
	@%p192 bra 	$L__BB0_113;
// %bb.111:                             // %__nv_fmaf_rn.exit4.i.i.i2545.preheader
	mov.f32 	%f612, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f611,%f612;
	// end inline asm
$L__BB0_112:                            // %__nv_fmaf_rn.exit4.i.i.i2545
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r473, %r3447, 192937984;
	add.s32 	%r474, %r3446, %r473;
	mov.b32 	%f613, %r474;
	mul.f32 	%f614, %f611, %f613;
	sub.f32 	%f615, %f613, %f614;
	fma.rn.f32 	%f616, %f615, %f611, %f614;
	sub.f32 	%f617, %f613, %f616;
	fma.rz.f32 	%f618, %f617, %f611, %f616;
	cvt.rzi.f32.f32 	%f619, %f618;
	sub.f32 	%f733, %f613, %f619;
	sub.s32 	%r3447, %r3447, %r473;
	mov.b32 	%r3446, %f733;
	setp.ne.s32 	%p193, %r3447, 0;
	setp.ne.s32 	%p194, %r3446, 0;
	and.pred  	%p195, %p193, %p194;
	@%p195 bra 	$L__BB0_112;
$L__BB0_113:                            // %__internal_fmodf_slowpath_mod.exit.i.i2547
	setp.gt.u32 	%p196, %r68, 2139095039;
	selp.f32 	%f620, 0f7FFFFFFF, 0f4B800000, %p196;
	mul.f32 	%f621, %f733, 0f34000000;
	mul.f32 	%f734, %f620, %f621;
	bra.uni 	$L__BB0_114;
$L__BB0_104:                            // %__nv_fast_fdividef.exit.i.i.i2524
	div.approx.f32 	%f604, %f734, %f703;
	cvt.rzi.f32.f32 	%f732, %f604;
	fma.rn.f32 	%f112, %f732, 0fC0000000, %f734;
	mov.b32 	%r67, %f112;
	setp.lt.u32 	%p187, %r67, 1073741824;
	@%p187 bra 	$L__BB0_109;
// %bb.105:
	setp.lt.u32 	%p188, %r67, -2147483647;
	@%p188 bra 	$L__BB0_107;
// %bb.106:
	add.f32 	%f609, %f732, 0fBF800000;
	setp.lt.f32 	%p191, %f112, 0fC0000000;
	add.f32 	%f610, %f609, 0fBF800000;
	selp.f32 	%f732, %f610, %f609, %p191;
	bra.uni 	$L__BB0_109;
$L__BB0_107:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p189, %f112, 0f40800000;
	@%p189 bra 	$L__BB0_109;
// %bb.108:                             // %__nv_fmaf_rn.exit.i.i.i2528
	add.f32 	%f605, %f732, 0f3F800000;
	fma.rn.f32 	%f607, %f703, 0fC0400000, %f112;
	setp.ge.f32 	%p190, %f607, 0f00000000;
	add.f32 	%f608, %f605, 0f3F800000;
	selp.f32 	%f732, %f608, %f605, %p190;
$L__BB0_109:                            // %__internal_fmodf_fastpath_quot.exit.i.i2531
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_114:                            // %__internal_fmodf_kernel.exit.i2550
	abs.f32 	%f622, %f734;
	setp.gtu.f32 	%p197, %f622, 0f7F800000;
	@%p197 bra 	$L__BB0_116;
// %bb.115:
	mov.b32 	%r475, %f734;
	or.b32  	%r476, %r36, %r475;
	mov.b32 	%f734, %r476;
$L__BB0_116:                            // %__nv_fmodf.exit2551
	add.f32 	%f623, %f734, %f734;
	mov.b32 	%r477, %f623;
	and.b32  	%r478, %r477, -2147483648;
	or.b32  	%r479, %r478, 1056964608;
	mov.b32 	%f624, %r479;
	add.f32 	%f625, %f623, %f624;
	cvt.rzi.f32.f32 	%f626, %f625;
	abs.f32 	%f627, %f623;
	setp.gt.f32 	%p199, %f627, 0f4B000000;
	selp.f32 	%f628, %f623, %f626, %p199;
	cvt.rzi.f32.f32 	%f629, %f623;
	setp.lt.f32 	%p200, %f627, 0f3F000000;
	selp.f32 	%f630, %f629, %f628, %p200;
	cvt.rzi.s32.f32 	%r480, %f630;
	fma.rn.f32 	%f631, %f630, 0fBF000000, %f734;
	mul.f32 	%f632, %f631, %f631;
	fma.rn.f32 	%f633, %f632, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f634, %f632, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f635, %f633, %f632, 0fC0A55DF6;
	fma.rn.f32 	%f636, %f634, %f632, 0f4081E0CF;
	fma.rn.f32 	%f637, %f632, %f631, 0f00000000;
	fma.rn.f32 	%f638, %f636, %f632, 0fC09DE9E6;
	fma.rn.f32 	%f639, %f635, %f637, 0f00000000;
	fma.rn.f32 	%f640, %f638, %f632, 0f3F800000;
	fma.rn.f32 	%f641, %f631, 0f40490FDB, %f639;
	and.b32  	%r481, %r480, 1;
	setp.eq.b32 	%p201, %r481, 1;
	selp.f32 	%f642, %f640, %f641, %p201;
	selp.f32 	%f643, %f641, %f640, %p201;
	and.b32  	%r482, %r480, 2;
	setp.eq.s32 	%p202, %r482, 0;
	neg.f32 	%f644, %f642;
	selp.f32 	%f645, %f642, %f644, %p202;
	add.s32 	%r483, %r480, 1;
	and.b32  	%r484, %r483, 2;
	setp.eq.s32 	%p203, %r484, 0;
	sub.f32 	%f647, %f230, %f643;
	cvt.rzi.f32.f32 	%f649, %f734;
	setp.eq.f32 	%p204, %f649, %f734;
	mul.f32 	%f650, %f734, 0f00000000;
	selp.f32 	%f148, %f650, %f645, %p204;
	abs.f32 	%f651, %f734;
	@%p104 bra 	$L__BB0_128;
// %bb.117:
	@%p347 bra 	$L__BB0_124;
	bra.uni 	$L__BB0_118;
$L__BB0_124:
	mov.b32 	%r76, %f738;
	and.b32  	%r485, %r76, 8388607;
	or.b32  	%r3448, %r485, 1065353216;
	mov.b32 	%f737, %r3448;
	add.s32 	%r486, %r76, -1073741824;
	and.b32  	%r3449, %r486, -8388608;
	setp.eq.s32 	%p212, %r3449, 0;
	@%p212 bra 	$L__BB0_127;
// %bb.125:                             // %__nv_fmaf_rn.exit4.i.i.i2576.preheader
	mov.f32 	%f662, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f661,%f662;
	// end inline asm
$L__BB0_126:                            // %__nv_fmaf_rn.exit4.i.i.i2576
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r487, %r3449, 192937984;
	add.s32 	%r488, %r3448, %r487;
	mov.b32 	%f663, %r488;
	mul.f32 	%f664, %f661, %f663;
	sub.f32 	%f665, %f663, %f664;
	fma.rn.f32 	%f666, %f665, %f661, %f664;
	sub.f32 	%f667, %f663, %f666;
	fma.rz.f32 	%f668, %f667, %f661, %f666;
	cvt.rzi.f32.f32 	%f669, %f668;
	sub.f32 	%f737, %f663, %f669;
	sub.s32 	%r3449, %r3449, %r487;
	mov.b32 	%r3448, %f737;
	setp.ne.s32 	%p213, %r3449, 0;
	setp.ne.s32 	%p214, %r3448, 0;
	and.pred  	%p215, %p213, %p214;
	@%p215 bra 	$L__BB0_126;
$L__BB0_127:                            // %__internal_fmodf_slowpath_mod.exit.i.i2578
	setp.gt.u32 	%p216, %r76, 2139095039;
	selp.f32 	%f670, 0f7FFFFFFF, 0f4B800000, %p216;
	mul.f32 	%f671, %f737, 0f34000000;
	mul.f32 	%f738, %f670, %f671;
	bra.uni 	$L__BB0_128;
$L__BB0_118:                            // %__nv_fast_fdividef.exit.i.i.i2555
	div.approx.f32 	%f654, %f738, %f703;
	cvt.rzi.f32.f32 	%f736, %f654;
	fma.rn.f32 	%f129, %f736, 0fC0000000, %f738;
	mov.b32 	%r75, %f129;
	setp.lt.u32 	%p207, %r75, 1073741824;
	@%p207 bra 	$L__BB0_123;
// %bb.119:
	setp.lt.u32 	%p208, %r75, -2147483647;
	@%p208 bra 	$L__BB0_121;
// %bb.120:
	add.f32 	%f659, %f736, 0fBF800000;
	setp.lt.f32 	%p211, %f129, 0fC0000000;
	add.f32 	%f660, %f659, 0fBF800000;
	selp.f32 	%f736, %f660, %f659, %p211;
	bra.uni 	$L__BB0_123;
$L__BB0_121:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p209, %f129, 0f40800000;
	@%p209 bra 	$L__BB0_123;
// %bb.122:                             // %__nv_fmaf_rn.exit.i.i.i2559
	add.f32 	%f655, %f736, 0f3F800000;
	fma.rn.f32 	%f657, %f703, 0fC0400000, %f129;
	setp.ge.f32 	%p210, %f657, 0f00000000;
	add.f32 	%f658, %f655, 0f3F800000;
	selp.f32 	%f736, %f658, %f655, %p210;
$L__BB0_123:                            // %__internal_fmodf_fastpath_quot.exit.i.i2562
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_128:                            // %__internal_fmodf_kernel.exit.i2581
	selp.f32 	%f648, %f643, %f647, %p203;
	setp.gt.f32 	%p205, %f651, 0f4B800000;
	add.f32 	%f652, %f148, 0f3F800000;
	abs.f32 	%f672, %f738;
	setp.gtu.f32 	%p217, %f672, 0f7F800000;
	@%p217 bra 	$L__BB0_130;
// %bb.129:
	mov.b32 	%r489, %f738;
	or.b32  	%r490, %r45, %r489;
	mov.b32 	%f738, %r490;
$L__BB0_130:                            // %__nv_fmodf.exit2582
	selp.f32 	%f127, %f652, %f648, %p205;
	add.f32 	%f673, %f738, %f738;
	mov.b32 	%r491, %f673;
	and.b32  	%r492, %r491, -2147483648;
	or.b32  	%r493, %r492, 1056964608;
	mov.b32 	%f674, %r493;
	add.f32 	%f675, %f673, %f674;
	cvt.rzi.f32.f32 	%f676, %f675;
	abs.f32 	%f677, %f673;
	setp.gt.f32 	%p219, %f677, 0f4B000000;
	selp.f32 	%f678, %f673, %f676, %p219;
	cvt.rzi.f32.f32 	%f679, %f673;
	setp.lt.f32 	%p220, %f677, 0f3F000000;
	selp.f32 	%f680, %f679, %f678, %p220;
	cvt.rzi.s32.f32 	%r494, %f680;
	fma.rn.f32 	%f681, %f680, 0fBF000000, %f738;
	mul.f32 	%f682, %f681, %f681;
	fma.rn.f32 	%f683, %f682, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f684, %f682, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f685, %f683, %f682, 0fC0A55DF6;
	fma.rn.f32 	%f686, %f684, %f682, 0f4081E0CF;
	fma.rn.f32 	%f687, %f682, %f681, 0f00000000;
	fma.rn.f32 	%f688, %f686, %f682, 0fC09DE9E6;
	fma.rn.f32 	%f689, %f685, %f687, 0f00000000;
	fma.rn.f32 	%f690, %f688, %f682, 0f3F800000;
	fma.rn.f32 	%f691, %f681, 0f40490FDB, %f689;
	and.b32  	%r495, %r494, 1;
	setp.eq.b32 	%p221, %r495, 1;
	selp.f32 	%f692, %f690, %f691, %p221;
	selp.f32 	%f693, %f691, %f690, %p221;
	and.b32  	%r496, %r494, 2;
	setp.eq.s32 	%p222, %r496, 0;
	neg.f32 	%f694, %f692;
	selp.f32 	%f695, %f692, %f694, %p222;
	add.s32 	%r497, %r494, 1;
	and.b32  	%r498, %r497, 2;
	setp.eq.s32 	%p223, %r498, 0;
	sub.f32 	%f697, %f230, %f693;
	selp.f32 	%f698, %f693, %f697, %p223;
	cvt.rzi.f32.f32 	%f699, %f738;
	setp.eq.f32 	%p224, %f699, %f738;
	mul.f32 	%f700, %f738, 0f00000000;
	selp.f32 	%f150, %f700, %f695, %p224;
	abs.f32 	%f701, %f738;
	setp.gt.f32 	%p225, %f701, 0f4B800000;
	add.f32 	%f702, %f150, 0f3F800000;
	selp.f32 	%f144, %f702, %f698, %p225;
	mov.f32 	%f147, %f127;
	mov.f32 	%f149, %f144;
	@%p124 bra 	$L__BB0_132;
// %bb.131:                             // %L981
	neg.f32 	%f149, %f150;
	neg.f32 	%f147, %f148;
	mov.f32 	%f148, %f127;
	mov.f32 	%f150, %f144;
$L__BB0_132:                            // %L983
	setp.gt.u32 	%p226, %r1, 15;
	mov.u32 	%r152, 999999999;
	@%p226 bra 	$L__BB0_197;
// %bb.133:                             // %L1013
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	shl.b32 	%r506, %r1, 4;
	and.b32  	%r507, %r506, 240;
	or.b32  	%r508, %r507, %r4;
	mul.wide.u32 	%rd68, %r508, 4;
	add.s64 	%rd69, %rd1, %rd68;
	ld.global.u32 	%r509, [%rd69];
	shl.b32 	%r510, %r509, 16;
	cvt.s32.s16 	%r85, %r509;
	shr.s32 	%r86, %r509, 16;
	or.b32  	%r511, %r510, 65535;
	setp.lt.u32 	%p227, %r511, 1114111;
	setp.lt.u32 	%p228, %r509, 1048576;
	and.pred  	%p229, %p227, %p228;
	@%p229 bra 	$L__BB0_196;
	bra.uni 	$L__BB0_134;
$L__BB0_196:                            // %L1255
	mul.lo.s32 	%r515, %r86, 546;
	mad.lo.s32 	%r152, %r85, 33, %r515;
$L__BB0_197:                            // %pass582
	add.f32 	%f207, %f746, %f746;
	mov.b32 	%r332, %f207;
	add.f32 	%f469, %f750, %f750;
	and.b32  	%r333, %r332, -2147483648;
	add.f32 	%f261, %f706, %f706;
	add.f32 	%f313, %f710, %f710;
	mov.b32 	%r429, %f469;
	or.b32  	%r334, %r333, 1056964608;
	mov.b32 	%r348, %f261;
	mov.b32 	%r370, %f313;
	and.b32  	%r430, %r429, -2147483648;
	add.f32 	%f521, %f726, %f726;
	add.f32 	%f571, %f730, %f730;
	mov.b32 	%f208, %r334;
	and.b32  	%r349, %r348, -2147483648;
	and.b32  	%r371, %r370, -2147483648;
	or.b32  	%r431, %r430, 1056964608;
	mov.b32 	%r443, %f521;
	mov.b32 	%r463, %f571;
	add.f32 	%f209, %f207, %f208;
	abs.f32 	%f211, %f207;
	or.b32  	%r350, %r349, 1056964608;
	or.b32  	%r372, %r371, 1056964608;
	mov.b32 	%f470, %r431;
	and.b32  	%r444, %r443, -2147483648;
	and.b32  	%r464, %r463, -2147483648;
	cvt.rzi.f32.f32 	%f210, %f209;
	setp.gt.f32 	%p37, %f211, 0f4B000000;
	mov.b32 	%f262, %r350;
	mov.b32 	%f314, %r372;
	add.f32 	%f471, %f469, %f470;
	abs.f32 	%f473, %f469;
	or.b32  	%r445, %r444, 1056964608;
	or.b32  	%r465, %r464, 1056964608;
	selp.f32 	%f212, %f207, %f210, %p37;
	cvt.rzi.f32.f32 	%f213, %f207;
	setp.lt.f32 	%p38, %f211, 0f3F000000;
	add.f32 	%f263, %f261, %f262;
	abs.f32 	%f265, %f261;
	add.f32 	%f315, %f313, %f314;
	abs.f32 	%f317, %f313;
	cvt.rzi.f32.f32 	%f472, %f471;
	setp.gt.f32 	%p139, %f473, 0f4B000000;
	mov.b32 	%f522, %r445;
	mov.b32 	%f572, %r465;
	selp.f32 	%f214, %f213, %f212, %p38;
	cvt.rzi.f32.f32 	%f264, %f263;
	setp.gt.f32 	%p57, %f265, 0f4B000000;
	cvt.rzi.f32.f32 	%f316, %f315;
	setp.gt.f32 	%p77, %f317, 0f4B000000;
	selp.f32 	%f474, %f469, %f472, %p139;
	cvt.rzi.f32.f32 	%f475, %f469;
	setp.lt.f32 	%p140, %f473, 0f3F000000;
	add.f32 	%f523, %f521, %f522;
	abs.f32 	%f525, %f521;
	add.f32 	%f573, %f571, %f572;
	abs.f32 	%f575, %f571;
	fma.rn.f32 	%f215, %f214, 0fBF000000, %f746;
	selp.f32 	%f266, %f261, %f264, %p57;
	cvt.rzi.f32.f32 	%f267, %f261;
	setp.lt.f32 	%p58, %f265, 0f3F000000;
	selp.f32 	%f318, %f313, %f316, %p77;
	cvt.rzi.f32.f32 	%f319, %f313;
	setp.lt.f32 	%p78, %f317, 0f3F000000;
	selp.f32 	%f476, %f475, %f474, %p140;
	cvt.rzi.f32.f32 	%f524, %f523;
	setp.gt.f32 	%p159, %f525, 0f4B000000;
	cvt.rzi.f32.f32 	%f574, %f573;
	setp.gt.f32 	%p179, %f575, 0f4B000000;
	mul.f32 	%f216, %f215, %f215;
	selp.f32 	%f268, %f267, %f266, %p58;
	selp.f32 	%f320, %f319, %f318, %p78;
	fma.rn.f32 	%f477, %f476, 0fBF000000, %f750;
	selp.f32 	%f526, %f521, %f524, %p159;
	cvt.rzi.f32.f32 	%f527, %f521;
	setp.lt.f32 	%p160, %f525, 0f3F000000;
	selp.f32 	%f576, %f571, %f574, %p179;
	cvt.rzi.f32.f32 	%f577, %f571;
	setp.lt.f32 	%p180, %f575, 0f3F000000;
	fma.rn.f32 	%f217, %f216, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f218, %f216, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f269, %f268, 0fBF000000, %f706;
	fma.rn.f32 	%f321, %f320, 0fBF000000, %f710;
	mul.f32 	%f478, %f477, %f477;
	selp.f32 	%f528, %f527, %f526, %p160;
	selp.f32 	%f578, %f577, %f576, %p180;
	cvt.rzi.s32.f32 	%r335, %f214;
	fma.rn.f32 	%f219, %f217, %f216, 0fC0A55DF6;
	fma.rn.f32 	%f220, %f218, %f216, 0f4081E0CF;
	fma.rn.f32 	%f221, %f216, %f215, 0f00000000;
	mul.f32 	%f270, %f269, %f269;
	mul.f32 	%f322, %f321, %f321;
	fma.rn.f32 	%f479, %f478, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f480, %f478, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f529, %f528, 0fBF000000, %f726;
	fma.rn.f32 	%f579, %f578, 0fBF000000, %f730;
	fma.rn.f32 	%f222, %f220, %f216, 0fC09DE9E6;
	fma.rn.f32 	%f223, %f219, %f221, 0f00000000;
	and.b32  	%r336, %r335, 1;
	fma.rn.f32 	%f271, %f270, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f272, %f270, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f323, %f322, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f324, %f322, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r432, %f476;
	fma.rn.f32 	%f481, %f479, %f478, 0fC0A55DF6;
	fma.rn.f32 	%f482, %f480, %f478, 0f4081E0CF;
	fma.rn.f32 	%f483, %f478, %f477, 0f00000000;
	mul.f32 	%f530, %f529, %f529;
	mul.f32 	%f580, %f579, %f579;
	fma.rn.f32 	%f224, %f222, %f216, 0f3F800000;
	fma.rn.f32 	%f225, %f215, 0f40490FDB, %f223;
	setp.eq.b32 	%p39, %r336, 1;
	cvt.rzi.s32.f32 	%r351, %f268;
	fma.rn.f32 	%f273, %f271, %f270, 0fC0A55DF6;
	fma.rn.f32 	%f274, %f272, %f270, 0f4081E0CF;
	fma.rn.f32 	%f275, %f270, %f269, 0f00000000;
	cvt.rzi.s32.f32 	%r373, %f320;
	fma.rn.f32 	%f325, %f323, %f322, 0fC0A55DF6;
	fma.rn.f32 	%f326, %f324, %f322, 0f4081E0CF;
	fma.rn.f32 	%f327, %f322, %f321, 0f00000000;
	fma.rn.f32 	%f484, %f482, %f478, 0fC09DE9E6;
	fma.rn.f32 	%f485, %f481, %f483, 0f00000000;
	and.b32  	%r433, %r432, 1;
	fma.rn.f32 	%f531, %f530, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f532, %f530, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f581, %f580, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f582, %f580, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f226, %f224, %f225, %p39;
	and.b32  	%r337, %r335, 2;
	fma.rn.f32 	%f276, %f274, %f270, 0fC09DE9E6;
	fma.rn.f32 	%f277, %f273, %f275, 0f00000000;
	and.b32  	%r352, %r351, 1;
	fma.rn.f32 	%f328, %f326, %f322, 0fC09DE9E6;
	fma.rn.f32 	%f329, %f325, %f327, 0f00000000;
	and.b32  	%r374, %r373, 1;
	fma.rn.f32 	%f486, %f484, %f478, 0f3F800000;
	fma.rn.f32 	%f487, %f477, 0f40490FDB, %f485;
	setp.eq.b32 	%p141, %r433, 1;
	cvt.rzi.s32.f32 	%r446, %f528;
	fma.rn.f32 	%f533, %f531, %f530, 0fC0A55DF6;
	fma.rn.f32 	%f534, %f532, %f530, 0f4081E0CF;
	fma.rn.f32 	%f535, %f530, %f529, 0f00000000;
	cvt.rzi.s32.f32 	%r466, %f578;
	fma.rn.f32 	%f583, %f581, %f580, 0fC0A55DF6;
	fma.rn.f32 	%f584, %f582, %f580, 0f4081E0CF;
	fma.rn.f32 	%f585, %f580, %f579, 0f00000000;
	setp.eq.s32 	%p40, %r337, 0;
	neg.f32 	%f228, %f226;
	add.s32 	%r338, %r335, 1;
	cvt.rzi.f32.f32 	%f233, %f746;
	fma.rn.f32 	%f278, %f276, %f270, 0f3F800000;
	fma.rn.f32 	%f279, %f269, 0f40490FDB, %f277;
	setp.eq.b32 	%p59, %r352, 1;
	fma.rn.f32 	%f330, %f328, %f322, 0f3F800000;
	fma.rn.f32 	%f331, %f321, 0f40490FDB, %f329;
	setp.eq.b32 	%p79, %r374, 1;
	selp.f32 	%f488, %f486, %f487, %p141;
	and.b32  	%r434, %r432, 2;
	fma.rn.f32 	%f536, %f534, %f530, 0fC09DE9E6;
	fma.rn.f32 	%f537, %f533, %f535, 0f00000000;
	and.b32  	%r447, %r446, 1;
	fma.rn.f32 	%f586, %f584, %f580, 0fC09DE9E6;
	fma.rn.f32 	%f587, %f583, %f585, 0f00000000;
	and.b32  	%r467, %r466, 1;
	selp.f32 	%f227, %f225, %f224, %p39;
	selp.f32 	%f229, %f226, %f228, %p40;
	and.b32  	%r339, %r338, 2;
	setp.eq.f32 	%p42, %f233, %f746;
	mul.f32 	%f234, %f746, 0f00000000;
	selp.f32 	%f280, %f278, %f279, %p59;
	and.b32  	%r353, %r351, 2;
	selp.f32 	%f332, %f330, %f331, %p79;
	and.b32  	%r375, %r373, 2;
	setp.eq.s32 	%p142, %r434, 0;
	neg.f32 	%f490, %f488;
	add.s32 	%r435, %r432, 1;
	cvt.rzi.f32.f32 	%f495, %f750;
	fma.rn.f32 	%f538, %f536, %f530, 0f3F800000;
	fma.rn.f32 	%f539, %f529, 0f40490FDB, %f537;
	setp.eq.b32 	%p161, %r447, 1;
	fma.rn.f32 	%f588, %f586, %f580, 0f3F800000;
	fma.rn.f32 	%f589, %f579, 0f40490FDB, %f587;
	setp.eq.b32 	%p181, %r467, 1;
	setp.eq.s32 	%p41, %r339, 0;
	sub.f32 	%f231, %f230, %f227;
	selp.f32 	%f235, %f234, %f229, %p42;
	abs.f32 	%f236, %f746;
	setp.eq.s32 	%p60, %r353, 0;
	neg.f32 	%f282, %f280;
	add.s32 	%r354, %r351, 1;
	cvt.rzi.f32.f32 	%f287, %f706;
	setp.eq.s32 	%p80, %r375, 0;
	neg.f32 	%f334, %f332;
	add.s32 	%r376, %r373, 1;
	cvt.rzi.f32.f32 	%f339, %f710;
	selp.f32 	%f489, %f487, %f486, %p141;
	selp.f32 	%f491, %f488, %f490, %p142;
	and.b32  	%r436, %r435, 2;
	setp.eq.f32 	%p144, %f495, %f750;
	mul.f32 	%f496, %f750, 0f00000000;
	selp.f32 	%f540, %f538, %f539, %p161;
	and.b32  	%r448, %r446, 2;
	selp.f32 	%f590, %f588, %f589, %p181;
	and.b32  	%r468, %r466, 2;
	selp.f32 	%f232, %f227, %f231, %p41;
	setp.gt.f32 	%p43, %f236, 0f4B800000;
	add.f32 	%f237, %f235, 0f3F800000;
	selp.f32 	%f281, %f279, %f278, %p59;
	selp.f32 	%f283, %f280, %f282, %p60;
	and.b32  	%r355, %r354, 2;
	setp.eq.f32 	%p62, %f287, %f706;
	mul.f32 	%f288, %f706, 0f00000000;
	selp.f32 	%f333, %f331, %f330, %p79;
	selp.f32 	%f335, %f332, %f334, %p80;
	and.b32  	%r377, %r376, 2;
	setp.eq.f32 	%p82, %f339, %f710;
	mul.f32 	%f340, %f710, 0f00000000;
	setp.eq.s32 	%p143, %r436, 0;
	sub.f32 	%f493, %f230, %f489;
	selp.f32 	%f497, %f496, %f491, %p144;
	abs.f32 	%f498, %f750;
	setp.eq.s32 	%p162, %r448, 0;
	neg.f32 	%f542, %f540;
	add.s32 	%r449, %r446, 1;
	cvt.rzi.f32.f32 	%f547, %f726;
	setp.eq.s32 	%p182, %r468, 0;
	neg.f32 	%f592, %f590;
	add.s32 	%r469, %r466, 1;
	cvt.rzi.f32.f32 	%f597, %f730;
	selp.f32 	%f238, %f237, %f232, %p43;
	setp.eq.s32 	%p61, %r355, 0;
	sub.f32 	%f285, %f230, %f281;
	selp.f32 	%f16, %f288, %f283, %p62;
	abs.f32 	%f289, %f706;
	setp.eq.s32 	%p81, %r377, 0;
	sub.f32 	%f337, %f230, %f333;
	selp.f32 	%f341, %f340, %f335, %p82;
	abs.f32 	%f342, %f710;
	selp.f32 	%f494, %f489, %f493, %p143;
	setp.gt.f32 	%p145, %f498, 0f4B800000;
	add.f32 	%f499, %f497, 0f3F800000;
	selp.f32 	%f541, %f539, %f538, %p161;
	selp.f32 	%f543, %f540, %f542, %p162;
	and.b32  	%r450, %r449, 2;
	setp.eq.f32 	%p164, %f547, %f726;
	mul.f32 	%f548, %f726, 0f00000000;
	selp.f32 	%f591, %f589, %f588, %p181;
	selp.f32 	%f593, %f590, %f592, %p182;
	and.b32  	%r470, %r469, 2;
	setp.eq.f32 	%p184, %f597, %f730;
	mul.f32 	%f598, %f730, 0f00000000;
	mov.b32 	%r328, %f238;
	mov.b32 	%r331, %f235;
	selp.f32 	%f286, %f281, %f285, %p61;
	setp.gt.f32 	%p63, %f289, 0f4B800000;
	add.f32 	%f290, %f16, 0f3F800000;
	selp.f32 	%f338, %f333, %f337, %p81;
	setp.gt.f32 	%p83, %f342, 0f4B800000;
	add.f32 	%f343, %f341, 0f3F800000;
	selp.f32 	%f500, %f499, %f494, %p145;
	setp.eq.s32 	%p163, %r450, 0;
	sub.f32 	%f545, %f230, %f541;
	selp.f32 	%f94, %f548, %f543, %p164;
	abs.f32 	%f549, %f726;
	setp.eq.s32 	%p183, %r470, 0;
	sub.f32 	%f595, %f230, %f591;
	selp.f32 	%f599, %f598, %f593, %p184;
	abs.f32 	%f600, %f730;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r327, %r331, -2147483648;
	selp.f32 	%f17, %f290, %f286, %p63;
	selp.f32 	%f344, %f343, %f338, %p83;
	mov.b32 	%r425, %f500;
	mov.b32 	%r428, %f497;
	selp.f32 	%f546, %f541, %f545, %p163;
	setp.gt.f32 	%p165, %f549, 0f4B800000;
	add.f32 	%f550, %f94, 0f3F800000;
	selp.f32 	%f596, %f591, %f595, %p183;
	setp.gt.f32 	%p185, %f600, 0f4B800000;
	add.f32 	%f601, %f599, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r326, %r328, %r327;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r329, %r331, %r328;
	// end inline asm
	mov.b32 	%r366, %f344;
	mov.b32 	%r365, %f17;
	mov.b32 	%r369, %f341;
	mov.b32 	%r368, %f16;
	mov.b32 	%r412, %f75;
	mov.b32 	%r413, %f77;
	mov.b32 	%r415, %f76;
	mov.b32 	%r416, %f78;
	xor.b32  	%r424, %r428, -2147483648;
	selp.f32 	%f95, %f550, %f546, %p165;
	selp.f32 	%f602, %f601, %f596, %p185;
	// begin inline asm
	cvt.rn.f16x2.f32 %r364, %r366, %r365;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r367, %r369, %r368;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r411, %r413, %r412;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r414, %r416, %r415;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r423, %r425, %r424;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r426, %r428, %r425;
	// end inline asm
	mov.b32 	%r459, %f602;
	mov.b32 	%r458, %f95;
	mov.b32 	%r462, %f599;
	mov.b32 	%r461, %f94;
	// begin inline asm
	cvt.rn.f16x2.f32 %r457, %r459, %r458;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r460, %r462, %r461;
	// end inline asm
	mov.b32 	%r500, %f147;
	mov.b32 	%r501, %f149;
	// begin inline asm
	cvt.rn.f16x2.f32 %r499, %r501, %r500;
	// end inline asm
	mov.b32 	%r503, %f148;
	mov.b32 	%r504, %f150;
	// begin inline asm
	cvt.rn.f16x2.f32 %r502, %r504, %r503;
	// end inline asm
	shl.b32 	%r517, %r4, 1;
	shl.b32 	%r518, %r1, 6;
	and.b32  	%r519, %r518, 192;
	and.b32  	%r520, %r128, 1;
	shr.u32 	%r521, %r1, 3;
	and.b32  	%r522, %r521, 2;
	or.b32  	%r523, %r520, %r522;
	shl.b32 	%r524, %r523, 4;
	bfe.u32 	%r525, %r1, 3, 1;
	and.b32  	%r526, %r517, 14;
	or.b32  	%r527, %r526, %r525;
	or.b32  	%r528, %r524, %r3;
	or.b32  	%r529, %r528, %r519;
	or.b32  	%r530, %r529, %r527;
	mul.wide.u32 	%rd75, %r530, 4;
	add.s64 	%rd76, %rd2, %rd75;
	ld.global.u32 	%r153, [%rd76];
	ld.global.u32 	%r154, [%rd76+1024];
	shl.b32 	%r531, %r297, 13;
	shl.b32 	%r532, %r301, 7;
	add.s32 	%r155, %r532, %r531;
	shl.b32 	%r533, %r2, 7;
	shl.b32 	%r534, %r1, 2;
	or.b32  	%r156, %r534, %r533;
	and.b32  	%r157, %r1, 16;
	shr.u32 	%r535, %r1, 4;
	and.b32  	%r536, %r140, 30;
	or.b32  	%r537, %r536, %r535;
	mul.lo.s32 	%r538, %r537, 257;
	shr.u32 	%r539, %r4, 3;
	and.b32  	%r540, %r5, 224;
	mad.lo.s32 	%r541, %r539, 257, %r540;
	or.b32  	%r542, %r539, 2;
	mad.lo.s32 	%r543, %r542, 257, %r540;
	or.b32  	%r544, %r539, 4;
	mad.lo.s32 	%r545, %r544, 257, %r540;
	or.b32  	%r546, %r539, 6;
	mad.lo.s32 	%r547, %r546, 257, %r540;
	or.b32  	%r548, %r539, 8;
	mad.lo.s32 	%r549, %r548, 257, %r540;
	or.b32  	%r550, %r539, 10;
	mad.lo.s32 	%r551, %r550, 257, %r540;
	or.b32  	%r552, %r539, 12;
	mad.lo.s32 	%r553, %r552, 257, %r540;
	or.b32  	%r554, %r539, 14;
	mad.lo.s32 	%r555, %r554, 257, %r540;
	or.b32  	%r556, %r539, 16;
	mad.lo.s32 	%r557, %r556, 257, %r540;
	or.b32  	%r558, %r539, 18;
	mad.lo.s32 	%r559, %r558, 257, %r540;
	or.b32  	%r560, %r539, 20;
	mad.lo.s32 	%r561, %r560, 257, %r540;
	or.b32  	%r562, %r539, 22;
	mad.lo.s32 	%r563, %r562, 257, %r540;
	or.b32  	%r564, %r539, 24;
	mad.lo.s32 	%r565, %r564, 257, %r540;
	or.b32  	%r566, %r539, 26;
	mad.lo.s32 	%r567, %r566, 257, %r540;
	or.b32  	%r568, %r539, 28;
	mad.lo.s32 	%r569, %r568, 257, %r540;
	or.b32  	%r570, %r539, 30;
	mad.lo.s32 	%r571, %r570, 257, %r540;
	mul.lo.s32 	%r572, %r127, 2184;
	mad.lo.s32 	%r573, %r523, 546, %r572;
	mad.lo.s32 	%r574, %r527, 33, %r573;
	setp.lt.u32 	%p230, %r1, 4;
	setp.eq.s32 	%p231, %r128, 4;
	setp.eq.s32 	%p232, %r128, 5;
	and.b32  	%r575, %r4, 1;
	neg.s32 	%r576, %r575;
	and.b32  	%r577, %r576, 2064;
	bfe.s32 	%r578, %r4, 1, 1;
	and.b32  	%r579, %r578, 1032;
	and.b32  	%r580, %r534, 12;
	bfe.s32 	%r581, %r4, 2, 1;
	and.b32  	%r582, %r581, 516;
	bfe.s32 	%r583, %r1, 3, 1;
	and.b32  	%r584, %r583, 4144;
	mad.lo.s32 	%r585, %r539, 258, %r523;
	add.s32 	%r586, %r585, %r580;
	add.s32 	%r587, %r586, %r577;
	add.s32 	%r588, %r587, %r579;
	add.s32 	%r589, %r588, %r582;
	add.s32 	%r590, %r589, %r584;
	mul.wide.u32 	%rd77, %r590, 4;
	mov.u64 	%rd78, shmem;
	add.s64 	%rd7, %rd78, %rd77;
	add.s32 	%r591, %r590, 16;
	mul.wide.u32 	%rd79, %r591, 4;
	add.s64 	%rd8, %rd78, %rd79;
	shl.b32 	%r592, %r299, 15;
	shl.b32 	%r593, %r303, 9;
	add.s32 	%r594, %r593, %r592;
	and.b32  	%r595, %r1, 15;
	or.b32  	%r596, %r157, %r5;
	or.b32  	%r597, %r595, %r3;
	or.b32  	%r158, %r597, %r596;
	cvt.s64.s32 	%rd9, %r594;
	add.s32 	%r598, %r4, %r538;
	mul.wide.u32 	%rd80, %r598, 4;
	add.s64 	%rd10, %rd78, %rd80;
	cvt.u64.u32 	%rd81, %r4;
	cvt.u64.u32 	%rd11, %r538;
	add.s64 	%rd82, %rd11, %rd81;
	shl.b64 	%rd83, %rd82, 2;
	add.s64 	%rd12, %rd78, %rd83;
	add.s32 	%r599, %r541, %r1;
	mul.wide.u32 	%rd84, %r599, 4;
	add.s64 	%rd13, %rd78, %rd84;
	add.s32 	%r600, %r543, %r1;
	mul.wide.u32 	%rd85, %r600, 4;
	add.s64 	%rd14, %rd78, %rd85;
	add.s32 	%r601, %r545, %r1;
	mul.wide.u32 	%rd86, %r601, 4;
	add.s64 	%rd15, %rd78, %rd86;
	add.s32 	%r602, %r547, %r1;
	mul.wide.u32 	%rd87, %r602, 4;
	add.s64 	%rd16, %rd78, %rd87;
	add.s32 	%r603, %r549, %r1;
	mul.wide.u32 	%rd88, %r603, 4;
	add.s64 	%rd17, %rd78, %rd88;
	add.s32 	%r604, %r551, %r1;
	mul.wide.u32 	%rd89, %r604, 4;
	add.s64 	%rd18, %rd78, %rd89;
	add.s32 	%r605, %r553, %r1;
	mul.wide.u32 	%rd90, %r605, 4;
	add.s64 	%rd19, %rd78, %rd90;
	add.s32 	%r606, %r555, %r1;
	mul.wide.u32 	%rd91, %r606, 4;
	add.s64 	%rd20, %rd78, %rd91;
	add.s32 	%r607, %r557, %r1;
	mul.wide.u32 	%rd92, %r607, 4;
	add.s64 	%rd21, %rd78, %rd92;
	add.s32 	%r608, %r559, %r1;
	mul.wide.u32 	%rd93, %r608, 4;
	add.s64 	%rd22, %rd78, %rd93;
	add.s32 	%r609, %r561, %r1;
	mul.wide.u32 	%rd94, %r609, 4;
	add.s64 	%rd23, %rd78, %rd94;
	add.s32 	%r610, %r563, %r1;
	mul.wide.u32 	%rd95, %r610, 4;
	add.s64 	%rd24, %rd78, %rd95;
	add.s32 	%r611, %r565, %r1;
	mul.wide.u32 	%rd96, %r611, 4;
	add.s64 	%rd25, %rd78, %rd96;
	add.s32 	%r612, %r567, %r1;
	mul.wide.u32 	%rd97, %r612, 4;
	add.s64 	%rd26, %rd78, %rd97;
	add.s32 	%r613, %r569, %r1;
	mul.wide.u32 	%rd98, %r613, 4;
	add.s64 	%rd27, %rd78, %rd98;
	add.s32 	%r614, %r571, %r1;
	mul.wide.u32 	%rd99, %r614, 4;
	add.s64 	%rd28, %rd78, %rd99;
	add.s32 	%r615, %r574, %r539;
	mul.wide.u32 	%rd100, %r615, 4;
	add.s64 	%rd29, %rd78, %rd100;
	add.s32 	%r616, %r574, %r542;
	mul.wide.u32 	%rd101, %r616, 4;
	add.s64 	%rd30, %rd78, %rd101;
	add.s32 	%r617, %r574, %r544;
	mul.wide.u32 	%rd102, %r617, 4;
	add.s64 	%rd31, %rd78, %rd102;
	add.s32 	%r618, %r574, %r546;
	mul.wide.u32 	%rd103, %r618, 4;
	add.s64 	%rd32, %rd78, %rd103;
	add.s32 	%r619, %r574, %r548;
	mul.wide.u32 	%rd104, %r619, 4;
	add.s64 	%rd33, %rd78, %rd104;
	add.s32 	%r620, %r574, %r550;
	mul.wide.u32 	%rd105, %r620, 4;
	add.s64 	%rd34, %rd78, %rd105;
	add.s32 	%r621, %r574, %r552;
	mul.wide.u32 	%rd106, %r621, 4;
	add.s64 	%rd35, %rd78, %rd106;
	add.s32 	%r622, %r574, %r554;
	mul.wide.u32 	%rd107, %r622, 4;
	add.s64 	%rd36, %rd78, %rd107;
	add.s32 	%r623, %r574, %r556;
	mul.wide.u32 	%rd108, %r623, 4;
	add.s64 	%rd37, %rd78, %rd108;
	add.s32 	%r624, %r574, %r558;
	mul.wide.u32 	%rd109, %r624, 4;
	add.s64 	%rd38, %rd78, %rd109;
	add.s32 	%r625, %r574, %r560;
	mul.wide.u32 	%rd110, %r625, 4;
	add.s64 	%rd39, %rd78, %rd110;
	add.s32 	%r626, %r574, %r562;
	mul.wide.u32 	%rd111, %r626, 4;
	add.s64 	%rd40, %rd78, %rd111;
	add.s32 	%r627, %r574, %r564;
	mul.wide.u32 	%rd112, %r627, 4;
	add.s64 	%rd41, %rd78, %rd112;
	add.s32 	%r628, %r574, %r566;
	mul.wide.u32 	%rd113, %r628, 4;
	add.s64 	%rd42, %rd78, %rd113;
	add.s32 	%r629, %r574, %r568;
	mul.wide.u32 	%rd114, %r629, 4;
	add.s64 	%rd43, %rd78, %rd114;
	add.s32 	%r630, %r574, %r570;
	mul.wide.u32 	%rd115, %r630, 4;
	add.s64 	%rd44, %rd78, %rd115;
	add.s32 	%r631, %r128, -1;
	setp.lt.u32 	%p233, %r631, 3;
	or.pred  	%p234, %p230, %p233;
	or.pred  	%p235, %p234, %p231;
	and.b32  	%r632, %r1, 24;
	setp.eq.s32 	%p236, %r632, 24;
	or.pred  	%p237, %p232, %p236;
	selp.b32 	%r159, 1145324612, -286331154, %p234;
	or.pred  	%p1, %p235, %p237;
	add.s32 	%r633, %r590, 32;
	mul.wide.u32 	%rd116, %r633, 4;
	add.s64 	%rd45, %rd78, %rd116;
	add.s32 	%r634, %r590, 48;
	mul.wide.u32 	%rd117, %r634, 4;
	add.s64 	%rd46, %rd78, %rd117;
	add.s32 	%r635, %r590, 64;
	mul.wide.u32 	%rd118, %r635, 4;
	add.s64 	%rd47, %rd78, %rd118;
	add.s32 	%r636, %r590, 80;
	mul.wide.u32 	%rd119, %r636, 4;
	add.s64 	%rd48, %rd78, %rd119;
	add.s32 	%r637, %r590, 96;
	mul.wide.u32 	%rd120, %r637, 4;
	add.s64 	%rd49, %rd78, %rd120;
	add.s32 	%r638, %r590, 112;
	mul.wide.u32 	%rd121, %r638, 4;
	add.s64 	%rd50, %rd78, %rd121;
	add.s32 	%r639, %r590, 128;
	mul.wide.u32 	%rd122, %r639, 4;
	add.s64 	%rd51, %rd78, %rd122;
	add.s32 	%r640, %r590, 144;
	mul.wide.u32 	%rd123, %r640, 4;
	add.s64 	%rd52, %rd78, %rd123;
	add.s32 	%r641, %r590, 160;
	mul.wide.u32 	%rd124, %r641, 4;
	add.s64 	%rd53, %rd78, %rd124;
	add.s32 	%r642, %r590, 176;
	mul.wide.u32 	%rd125, %r642, 4;
	add.s64 	%rd54, %rd78, %rd125;
	add.s32 	%r643, %r590, 192;
	mul.wide.u32 	%rd126, %r643, 4;
	add.s64 	%rd55, %rd78, %rd126;
	add.s32 	%r644, %r590, 208;
	mul.wide.u32 	%rd127, %r644, 4;
	add.s64 	%rd56, %rd78, %rd127;
	add.s32 	%r645, %r590, 224;
	mul.wide.u32 	%rd128, %r645, 4;
	add.s64 	%rd57, %rd78, %rd128;
	add.s32 	%r646, %r590, 240;
	mul.wide.u32 	%rd129, %r646, 4;
	add.s64 	%rd58, %rd78, %rd129;
	mov.u32 	%r88, 0;
	setp.eq.s32 	%p239, %r157, 0;
	mov.u16 	%rs38, 25600;
	mov.u16 	%rs40, 21504;
	mov.u16 	%rs44, 18432;
	mov.u32 	%r3462, %r88;
	mov.u32 	%r3463, %r88;
	mov.u32 	%r3464, %r88;
	bra.uni 	$L__BB0_198;
$L__BB0_169:                            // %L32777
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r126, %r88, 64;
	setp.ne.s32 	%p342, %r88, 32704;
	mov.u32 	%r88, %r126;
	@%p342 bra 	$L__BB0_198;
	bra.uni 	$L__BB0_170;
$L__BB0_198:                            // %L1610
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_216 Depth 2
                                        //     Child Loop BB0_153 Depth 2
	add.s32 	%r647, %r88, %r297;
	setp.lt.s32 	%p238, %r647, %r298;
	@%p238 bra 	$L__BB0_199;
	bra.uni 	$L__BB0_170;
$L__BB0_199:                            // %pass733
                                        //   in Loop: Header=BB0_198 Depth=1
	cvt.u32.u64 	%r840, %rd11;
	or.b32  	%r841, %r88, %r4;
	shl.b32 	%r842, %r841, 13;
	and.b32  	%r843, %r842, 268034048;
	or.b32  	%r844, %r156, %r843;
	add.s32 	%r845, %r155, %r844;
	shr.s32 	%r846, %r845, 31;
	shr.u32 	%r847, %r846, 4;
	add.s32 	%r848, %r845, %r847;
	shr.s32 	%r849, %r848, 28;
	setp.lt.s32 	%p240, %r845, 0;
	and.b32  	%r850, %r848, -268435456;
	setp.ne.s32 	%p241, %r850, %r845;
	and.pred  	%p242, %p240, %p241;
	selp.u32 	%r851, 1, 0, %p242;
	sub.s32 	%r852, %r851, %r849;
	shl.b32 	%r853, %r852, 28;
	add.s32 	%r854, %r853, %r845;
	mul.wide.s32 	%rd130, %r854, 4;
	add.s64 	%rd131, %rd3, %rd130;
	ld.global.v4.u32 	{%r855, %r856, %r857, %r858}, [%rd131];
	or.b32  	%r859, %r841, 16;
	shl.b32 	%r860, %r859, 13;
	and.b32  	%r861, %r860, 268165120;
	or.b32  	%r862, %r156, %r861;
	add.s32 	%r863, %r155, %r862;
	shr.s32 	%r864, %r863, 31;
	shr.u32 	%r865, %r864, 4;
	add.s32 	%r866, %r863, %r865;
	shr.s32 	%r867, %r866, 28;
	setp.lt.s32 	%p243, %r863, 0;
	and.b32  	%r868, %r866, -268435456;
	setp.ne.s32 	%p244, %r868, %r863;
	and.pred  	%p245, %p243, %p244;
	selp.u32 	%r869, 1, 0, %p245;
	sub.s32 	%r870, %r869, %r867;
	shl.b32 	%r871, %r870, 28;
	add.s32 	%r872, %r871, %r863;
	mul.wide.s32 	%rd132, %r872, 4;
	add.s64 	%rd133, %rd3, %rd132;
	ld.global.v4.u32 	{%r873, %r874, %r875, %r876}, [%rd133];
	and.b32  	%r877, %r88, 32704;
	or.b32  	%r878, %r4, %r877;
	shl.b32 	%r879, %r878, 13;
	or.b32  	%r880, %r879, %r156;
	or.b32  	%r881, %r880, 262144;
	add.s32 	%r882, %r155, %r881;
	shr.s32 	%r883, %r882, 31;
	shr.u32 	%r884, %r883, 4;
	add.s32 	%r885, %r882, %r884;
	shr.s32 	%r886, %r885, 28;
	setp.lt.s32 	%p246, %r882, 0;
	and.b32  	%r887, %r885, -268435456;
	setp.ne.s32 	%p247, %r887, %r882;
	and.pred  	%p248, %p246, %p247;
	selp.u32 	%r888, 1, 0, %p248;
	sub.s32 	%r889, %r888, %r886;
	shl.b32 	%r890, %r889, 28;
	add.s32 	%r891, %r890, %r882;
	mul.wide.s32 	%rd134, %r891, 4;
	add.s64 	%rd135, %rd3, %rd134;
	ld.global.v4.u32 	{%r892, %r893, %r894, %r895}, [%rd135];
	or.b32  	%r896, %r880, 393216;
	add.s32 	%r897, %r155, %r896;
	shr.s32 	%r898, %r897, 31;
	shr.u32 	%r899, %r898, 4;
	add.s32 	%r900, %r897, %r899;
	shr.s32 	%r901, %r900, 28;
	setp.lt.s32 	%p249, %r897, 0;
	and.b32  	%r902, %r900, -268435456;
	setp.ne.s32 	%p250, %r902, %r897;
	and.pred  	%p251, %p249, %p250;
	selp.u32 	%r903, 1, 0, %p251;
	sub.s32 	%r904, %r903, %r901;
	shl.b32 	%r905, %r904, 28;
	add.s32 	%r906, %r905, %r897;
	mul.wide.s32 	%rd136, %r906, 4;
	add.s64 	%rd137, %rd3, %rd136;
	ld.global.v4.u32 	{%r907, %r908, %r909, %r910}, [%rd137];
	selp.b32 	%r911, %r857, %r855, %p239;
	shfl.sync.bfly.b32	%r912, %r911, 16, 31, -1;
	selp.b32 	%r650, %r855, %r912, %p239;
	selp.b32 	%r655, %r912, %r857, %p239;
	selp.b32 	%r913, %r858, %r856, %p239;
	shfl.sync.bfly.b32	%r914, %r913, 16, 31, -1;
	selp.b32 	%r658, %r856, %r914, %p239;
	selp.b32 	%r663, %r914, %r858, %p239;
	selp.b32 	%r915, %r875, %r873, %p239;
	shfl.sync.bfly.b32	%r916, %r915, 16, 31, -1;
	selp.b32 	%r666, %r873, %r916, %p239;
	selp.b32 	%r671, %r916, %r875, %p239;
	selp.b32 	%r917, %r876, %r874, %p239;
	shfl.sync.bfly.b32	%r918, %r917, 16, 31, -1;
	selp.b32 	%r674, %r874, %r918, %p239;
	selp.b32 	%r679, %r918, %r876, %p239;
	selp.b32 	%r919, %r894, %r892, %p239;
	shfl.sync.bfly.b32	%r920, %r919, 16, 31, -1;
	selp.b32 	%r682, %r892, %r920, %p239;
	selp.b32 	%r687, %r920, %r894, %p239;
	selp.b32 	%r921, %r895, %r893, %p239;
	shfl.sync.bfly.b32	%r922, %r921, 16, 31, -1;
	selp.b32 	%r690, %r893, %r922, %p239;
	selp.b32 	%r695, %r922, %r895, %p239;
	selp.b32 	%r923, %r909, %r907, %p239;
	shfl.sync.bfly.b32	%r924, %r923, 16, 31, -1;
	selp.b32 	%r698, %r907, %r924, %p239;
	selp.b32 	%r703, %r924, %r909, %p239;
	selp.b32 	%r925, %r910, %r908, %p239;
	shfl.sync.bfly.b32	%r926, %r925, 16, 31, -1;
	selp.b32 	%r706, %r908, %r926, %p239;
	selp.b32 	%r711, %r926, %r910, %p239;
	shl.b32 	%r651, %r655, 4;
	mov.u32 	%r649, 252645135;
	// begin inline asm
	lop3.b32 %r713, %r649, %r650, %r651, 202;
	// end inline asm
	shr.u32 	%r654, %r650, 4;
	// begin inline asm
	lop3.b32 %r729, %r649, %r654, %r655, 202;
	// end inline asm
	shl.b32 	%r659, %r663, 4;
	// begin inline asm
	lop3.b32 %r721, %r649, %r658, %r659, 202;
	// end inline asm
	shr.u32 	%r662, %r658, 4;
	// begin inline asm
	lop3.b32 %r737, %r649, %r662, %r663, 202;
	// end inline asm
	shl.b32 	%r667, %r671, 4;
	// begin inline asm
	lop3.b32 %r745, %r649, %r666, %r667, 202;
	// end inline asm
	shr.u32 	%r670, %r666, 4;
	// begin inline asm
	lop3.b32 %r761, %r649, %r670, %r671, 202;
	// end inline asm
	shl.b32 	%r675, %r679, 4;
	// begin inline asm
	lop3.b32 %r753, %r649, %r674, %r675, 202;
	// end inline asm
	shr.u32 	%r678, %r674, 4;
	// begin inline asm
	lop3.b32 %r769, %r649, %r678, %r679, 202;
	// end inline asm
	shl.b32 	%r683, %r687, 4;
	// begin inline asm
	lop3.b32 %r714, %r649, %r682, %r683, 202;
	// end inline asm
	shr.u32 	%r686, %r682, 4;
	// begin inline asm
	lop3.b32 %r730, %r649, %r686, %r687, 202;
	// end inline asm
	shl.b32 	%r691, %r695, 4;
	// begin inline asm
	lop3.b32 %r722, %r649, %r690, %r691, 202;
	// end inline asm
	shr.u32 	%r694, %r690, 4;
	// begin inline asm
	lop3.b32 %r738, %r649, %r694, %r695, 202;
	// end inline asm
	shl.b32 	%r699, %r703, 4;
	// begin inline asm
	lop3.b32 %r746, %r649, %r698, %r699, 202;
	// end inline asm
	shr.u32 	%r702, %r698, 4;
	// begin inline asm
	lop3.b32 %r762, %r649, %r702, %r703, 202;
	// end inline asm
	shl.b32 	%r707, %r711, 4;
	// begin inline asm
	lop3.b32 %r754, %r649, %r706, %r707, 202;
	// end inline asm
	shr.u32 	%r710, %r706, 4;
	// begin inline asm
	lop3.b32 %r770, %r649, %r710, %r711, 202;
	// end inline asm
	mov.u32 	%r715, 25152;
	// begin inline asm
	prmt.b32 %r777, %r713, %r714, %r715;
	// end inline asm
	mov.u32 	%r719, 29521;
	// begin inline asm
	prmt.b32 %r809, %r713, %r714, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r785, %r721, %r722, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r817, %r721, %r722, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r778, %r729, %r730, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r810, %r729, %r730, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r786, %r737, %r738, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r818, %r737, %r738, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r793, %r745, %r746, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r825, %r745, %r746, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r801, %r753, %r754, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r833, %r753, %r754, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r794, %r761, %r762, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r826, %r761, %r762, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r802, %r769, %r770, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r834, %r769, %r770, %r719;
	// end inline asm
	mov.u32 	%r779, 21520;
	// begin inline asm
	prmt.b32 %r776, %r777, %r778, %r779;
	// end inline asm
	mov.u32 	%r783, 30258;
	// begin inline asm
	prmt.b32 %r780, %r777, %r778, %r783;
	// end inline asm
	// begin inline asm
	prmt.b32 %r784, %r785, %r786, %r779;
	// end inline asm
	// begin inline asm
	prmt.b32 %r788, %r785, %r786, %r783;
	// end inline asm
	// begin inline asm
	prmt.b32 %r792, %r793, %r794, %r779;
	// end inline asm
	// begin inline asm
	prmt.b32 %r796, %r793, %r794, %r783;
	// end inline asm
	// begin inline asm
	prmt.b32 %r800, %r801, %r802, %r779;
	// end inline asm
	// begin inline asm
	prmt.b32 %r804, %r801, %r802, %r783;
	// end inline asm
	// begin inline asm
	prmt.b32 %r808, %r809, %r810, %r779;
	// end inline asm
	// begin inline asm
	prmt.b32 %r812, %r809, %r810, %r783;
	// end inline asm
	// begin inline asm
	prmt.b32 %r816, %r817, %r818, %r779;
	// end inline asm
	// begin inline asm
	prmt.b32 %r820, %r817, %r818, %r783;
	// end inline asm
	// begin inline asm
	prmt.b32 %r824, %r825, %r826, %r779;
	// end inline asm
	// begin inline asm
	prmt.b32 %r828, %r825, %r826, %r783;
	// end inline asm
	// begin inline asm
	prmt.b32 %r832, %r833, %r834, %r779;
	// end inline asm
	// begin inline asm
	prmt.b32 %r836, %r833, %r834, %r783;
	// end inline asm
	st.shared.u32 	[%rd10], %r776;
	st.shared.u32 	[%rd12+512], %r784;
	st.shared.u32 	[%rd12+256], %r780;
	st.shared.u32 	[%rd12+768], %r788;
	and.b32  	%r927, %r859, 31;
	add.s32 	%r928, %r927, %r840;
	mul.wide.u32 	%rd138, %r928, 4;
	add.s64 	%rd140, %rd78, %rd138;
	st.shared.u32 	[%rd140], %r792;
	cvt.u64.u32 	%rd141, %r927;
	add.s64 	%rd142, %rd11, %rd141;
	shl.b64 	%rd143, %rd142, 2;
	add.s64 	%rd144, %rd78, %rd143;
	st.shared.u32 	[%rd144+512], %r800;
	st.shared.u32 	[%rd144+256], %r796;
	st.shared.u32 	[%rd144+768], %r804;
	st.shared.u32 	[%rd12+128], %r808;
	st.shared.u32 	[%rd12+640], %r816;
	st.shared.u32 	[%rd12+384], %r812;
	st.shared.u32 	[%rd12+896], %r820;
	st.shared.u32 	[%rd144+128], %r824;
	st.shared.u32 	[%rd144+640], %r832;
	st.shared.u32 	[%rd144+384], %r828;
	st.shared.u32 	[%rd144+896], %r836;
	bar.sync 	0;
	ld.shared.u32 	%r160, [%rd13];
	ld.shared.u32 	%r161, [%rd14];
	ld.shared.u32 	%r162, [%rd15];
	ld.shared.u32 	%r163, [%rd16];
	ld.shared.u32 	%r164, [%rd17];
	ld.shared.u32 	%r165, [%rd18];
	ld.shared.u32 	%r166, [%rd19];
	ld.shared.u32 	%r167, [%rd20];
	ld.shared.u32 	%r168, [%rd21];
	ld.shared.u32 	%r169, [%rd22];
	ld.shared.u32 	%r170, [%rd23];
	ld.shared.u32 	%r171, [%rd24];
	ld.shared.u32 	%r172, [%rd25];
	ld.shared.u32 	%r173, [%rd26];
	ld.shared.u32 	%r174, [%rd27];
	ld.shared.u32 	%r175, [%rd28];
	bar.sync 	0;
	shfl.sync.idx.b32	%r176, %r152, 0, 31, -1;
	shfl.sync.idx.b32	%r177, %r152, 1, 31, -1;
	shfl.sync.idx.b32	%r178, %r152, 2, 31, -1;
	shfl.sync.idx.b32	%r179, %r152, 3, 31, -1;
	shfl.sync.idx.b32	%r180, %r152, 4, 31, -1;
	shfl.sync.idx.b32	%r181, %r152, 5, 31, -1;
	shfl.sync.idx.b32	%r182, %r152, 6, 31, -1;
	shfl.sync.idx.b32	%r183, %r152, 7, 31, -1;
	shfl.sync.idx.b32	%r184, %r152, 8, 31, -1;
	shfl.sync.idx.b32	%r185, %r152, 9, 31, -1;
	shfl.sync.idx.b32	%r186, %r152, 10, 31, -1;
	shfl.sync.idx.b32	%r187, %r152, 11, 31, -1;
	shfl.sync.idx.b32	%r188, %r152, 12, 31, -1;
	shfl.sync.idx.b32	%r189, %r152, 13, 31, -1;
	shfl.sync.idx.b32	%r190, %r152, 14, 31, -1;
	shfl.sync.idx.b32	%r191, %r152, 15, 31, -1;
	setp.eq.s32 	%p252, %r176, 999999999;
	@%p252 bra 	$L__BB0_135;
// %bb.200:                             // %pass3077
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r929, %r176, %r1;
	mul.wide.s32 	%rd145, %r929, 4;
	add.s64 	%rd147, %rd78, %rd145;
	st.shared.u32 	[%rd147], %r160;
	setp.eq.s32 	%p253, %r177, 999999999;
	@%p253 bra 	$L__BB0_136;
// %bb.201:                             // %pass3145
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r930, %r177, %r1;
	mul.wide.s32 	%rd148, %r930, 4;
	add.s64 	%rd150, %rd78, %rd148;
	st.shared.u32 	[%rd150], %r161;
	setp.eq.s32 	%p254, %r178, 999999999;
	@%p254 bra 	$L__BB0_137;
// %bb.202:                             // %pass3213
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r931, %r178, %r1;
	mul.wide.s32 	%rd151, %r931, 4;
	add.s64 	%rd153, %rd78, %rd151;
	st.shared.u32 	[%rd153], %r162;
	setp.eq.s32 	%p255, %r179, 999999999;
	@%p255 bra 	$L__BB0_138;
// %bb.203:                             // %pass3281
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r932, %r179, %r1;
	mul.wide.s32 	%rd154, %r932, 4;
	add.s64 	%rd156, %rd78, %rd154;
	st.shared.u32 	[%rd156], %r163;
	setp.eq.s32 	%p256, %r180, 999999999;
	@%p256 bra 	$L__BB0_139;
// %bb.204:                             // %pass3349
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r933, %r180, %r1;
	mul.wide.s32 	%rd157, %r933, 4;
	add.s64 	%rd159, %rd78, %rd157;
	st.shared.u32 	[%rd159], %r164;
	setp.eq.s32 	%p257, %r181, 999999999;
	@%p257 bra 	$L__BB0_140;
// %bb.205:                             // %pass3417
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r934, %r181, %r1;
	mul.wide.s32 	%rd160, %r934, 4;
	add.s64 	%rd162, %rd78, %rd160;
	st.shared.u32 	[%rd162], %r165;
	setp.eq.s32 	%p258, %r182, 999999999;
	@%p258 bra 	$L__BB0_141;
// %bb.206:                             // %pass3485
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r935, %r182, %r1;
	mul.wide.s32 	%rd163, %r935, 4;
	add.s64 	%rd165, %rd78, %rd163;
	st.shared.u32 	[%rd165], %r166;
	setp.eq.s32 	%p259, %r183, 999999999;
	@%p259 bra 	$L__BB0_142;
// %bb.207:                             // %pass3553
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r936, %r183, %r1;
	mul.wide.s32 	%rd166, %r936, 4;
	add.s64 	%rd168, %rd78, %rd166;
	st.shared.u32 	[%rd168], %r167;
	setp.eq.s32 	%p260, %r184, 999999999;
	@%p260 bra 	$L__BB0_143;
// %bb.208:                             // %pass3621
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r937, %r184, %r1;
	mul.wide.s32 	%rd169, %r937, 4;
	add.s64 	%rd171, %rd78, %rd169;
	st.shared.u32 	[%rd171], %r168;
	setp.eq.s32 	%p261, %r185, 999999999;
	@%p261 bra 	$L__BB0_144;
// %bb.209:                             // %pass3689
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r938, %r185, %r1;
	mul.wide.s32 	%rd172, %r938, 4;
	add.s64 	%rd174, %rd78, %rd172;
	st.shared.u32 	[%rd174], %r169;
	setp.eq.s32 	%p262, %r186, 999999999;
	@%p262 bra 	$L__BB0_145;
// %bb.210:                             // %pass3757
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r939, %r186, %r1;
	mul.wide.s32 	%rd175, %r939, 4;
	add.s64 	%rd177, %rd78, %rd175;
	st.shared.u32 	[%rd177], %r170;
	setp.eq.s32 	%p263, %r187, 999999999;
	@%p263 bra 	$L__BB0_146;
// %bb.211:                             // %pass3825
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r940, %r187, %r1;
	mul.wide.s32 	%rd178, %r940, 4;
	add.s64 	%rd180, %rd78, %rd178;
	st.shared.u32 	[%rd180], %r171;
	setp.eq.s32 	%p264, %r188, 999999999;
	@%p264 bra 	$L__BB0_147;
// %bb.212:                             // %pass3893
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r941, %r188, %r1;
	mul.wide.s32 	%rd181, %r941, 4;
	add.s64 	%rd183, %rd78, %rd181;
	st.shared.u32 	[%rd183], %r172;
	setp.eq.s32 	%p265, %r189, 999999999;
	@%p265 bra 	$L__BB0_148;
// %bb.213:                             // %pass3961
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r942, %r189, %r1;
	mul.wide.s32 	%rd184, %r942, 4;
	add.s64 	%rd186, %rd78, %rd184;
	st.shared.u32 	[%rd186], %r173;
	setp.eq.s32 	%p266, %r190, 999999999;
	@%p266 bra 	$L__BB0_149;
// %bb.214:                             // %pass4029
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r943, %r190, %r1;
	mul.wide.s32 	%rd187, %r943, 4;
	add.s64 	%rd189, %rd78, %rd187;
	st.shared.u32 	[%rd189], %r174;
	setp.eq.s32 	%p267, %r191, 999999999;
	@%p267 bra 	$L__BB0_150;
// %bb.215:                             // %pass4097
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r945, %r191, %r1;
	mul.wide.s32 	%rd190, %r945, 4;
	add.s64 	%rd192, %rd78, %rd190;
	st.shared.u32 	[%rd192], %r175;
	bar.sync 	0;
	ld.shared.u32 	%r192, [%rd29];
	ld.shared.u32 	%r193, [%rd30];
	ld.shared.u32 	%r194, [%rd31];
	ld.shared.u32 	%r195, [%rd32];
	ld.shared.u32 	%r196, [%rd33];
	ld.shared.u32 	%r197, [%rd34];
	ld.shared.u32 	%r198, [%rd35];
	ld.shared.u32 	%r199, [%rd36];
	ld.shared.u32 	%r200, [%rd37];
	ld.shared.u32 	%r201, [%rd38];
	ld.shared.u32 	%r202, [%rd39];
	ld.shared.u32 	%r203, [%rd40];
	ld.shared.u32 	%r204, [%rd41];
	ld.shared.u32 	%r205, [%rd42];
	ld.shared.u32 	%r206, [%rd43];
	ld.shared.u32 	%r207, [%rd44];
	bar.sync 	0;
	mov.u32 	%r3454, 16;
	bra.uni 	$L__BB0_216;
$L__BB0_151:                            // %L22553
                                        //   in Loop: Header=BB0_216 Depth=2
	bar.sync 	0;
	add.s32 	%r3454, %r3454, -8;
	setp.ne.s32 	%p304, %r3454, -16;
	@%p304 bra 	$L__BB0_216;
	bra.uni 	$L__BB0_152;
$L__BB0_216:                            // %L12366
                                        //   Parent Loop BB0_198 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p268, %r3454, 16;
	selp.b32 	%r1338, %r192, 0, %p268;
	setp.eq.s32 	%p269, %r3454, 8;
	selp.b32 	%r1339, %r196, %r1338, %p269;
	setp.eq.s32 	%p270, %r3454, 0;
	selp.b32 	%r1340, %r200, %r1339, %p270;
	setp.eq.s32 	%p271, %r3454, -8;
	selp.b32 	%r1341, %r204, %r1340, %p271;
	selp.b32 	%r1342, %r193, 0, %p268;
	selp.b32 	%r1343, %r197, %r1342, %p269;
	selp.b32 	%r1344, %r201, %r1343, %p270;
	selp.b32 	%r1345, %r205, %r1344, %p271;
	selp.b32 	%r1346, %r194, 0, %p268;
	selp.b32 	%r1347, %r198, %r1346, %p269;
	selp.b32 	%r1348, %r202, %r1347, %p270;
	selp.b32 	%r1349, %r206, %r1348, %p271;
	selp.b32 	%r1350, %r195, 0, %p268;
	selp.b32 	%r1351, %r199, %r1350, %p269;
	selp.b32 	%r1352, %r203, %r1351, %p270;
	selp.b32 	%r1353, %r207, %r1352, %p271;
	// begin inline asm
	mov.b32 %r951, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r962, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r950, %r1341, -2004318072;
	mov.u32 	%r1087, 983055;
	// begin inline asm
	lop3.b32 %r948, %r1087, %r950, %r951, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r952, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r953, %r951, %r952;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r956, %r948, %r953;
	// end inline asm
	mov.u32 	%r1098, 15728880;
	// begin inline asm
	lop3.b32 %r959, %r1098, %r950, %r962, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r963, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r964, %r962, %r963;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r967, %r959, %r964;
	// end inline asm
	// begin inline asm
	mov.b32 %r997, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1008, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r996, %r1345, -2004318072;
	// begin inline asm
	lop3.b32 %r994, %r1087, %r996, %r997, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r998, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r999, %r997, %r998;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1002, %r994, %r999;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1005, %r1098, %r996, %r1008, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1009, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1010, %r1008, %r1009;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1013, %r1005, %r1010;
	// end inline asm
	// begin inline asm
	mov.b32 %r1043, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1054, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1042, %r1349, -2004318072;
	// begin inline asm
	lop3.b32 %r1040, %r1087, %r1042, %r1043, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1044, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1045, %r1043, %r1044;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1048, %r1040, %r1045;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1051, %r1098, %r1042, %r1054, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1055, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1056, %r1054, %r1055;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1059, %r1051, %r1056;
	// end inline asm
	// begin inline asm
	mov.b32 %r1089, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1100, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1088, %r1353, -2004318072;
	// begin inline asm
	lop3.b32 %r1086, %r1087, %r1088, %r1089, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1090, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1091, %r1089, %r1090;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1094, %r1086, %r1091;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1097, %r1098, %r1088, %r1100, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1101, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1102, %r1100, %r1101;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1105, %r1097, %r1102;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r153;
    mov.b32 {%r2re, %r2im}, %r956;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1130, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r967;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1133, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r153;
    mov.b32 {%r2re, %r2im}, %r1002;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1136, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r1013;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1139, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r153;
    mov.b32 {%r2re, %r2im}, %r1048;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1142, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r1059;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1145, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r153;
    mov.b32 {%r2re, %r2im}, %r1094;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1148, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r1105;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1151, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1209, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1154, %r1155}, {%r326, %r329}, {%r1130}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1161, %r1162}, {%r326, %r329}, {%r1133}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1168, %r1169}, {%r326, %r329}, {%r1136}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1175, %r1176}, {%r326, %r329}, {%r1139}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1182, %r1183}, {%r326, %r329}, {%r1142}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1189, %r1190}, {%r326, %r329}, {%r1145}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1196, %r1197}, {%r326, %r329}, {%r1148}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1203, %r1204}, {%r326, %r329}, {%r1151}, {%r1209, %r1209};
	// end inline asm
	@%p1 bra 	$L__BB0_218;
	bra.uni 	$L__BB0_217;
$L__BB0_218:                            // %pass5517
                                        //   in Loop: Header=BB0_216 Depth=2
	// begin inline asm
	neg.f16x2 %r1210, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1212, %r1210, %r1155;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1215, %r364, %r1154, %r1212;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1219, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1221, %r1219, %r1162;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1224, %r364, %r1161, %r1221;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1228, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1230, %r1228, %r1169;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1233, %r364, %r1168, %r1230;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1237, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1239, %r1237, %r1176;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1242, %r364, %r1175, %r1239;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1246, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1248, %r1246, %r1183;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1251, %r364, %r1182, %r1248;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1255, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1257, %r1255, %r1190;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1260, %r364, %r1189, %r1257;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1264, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1266, %r1264, %r1197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1269, %r364, %r1196, %r1266;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1273, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1275, %r1273, %r1204;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1278, %r364, %r1203, %r1275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1282, %r367, %r1154;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1285, %r364, %r1155, %r1282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1289, %r367, %r1161;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1292, %r364, %r1162, %r1289;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1296, %r367, %r1168;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1299, %r364, %r1169, %r1296;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1303, %r367, %r1175;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1306, %r364, %r1176, %r1303;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1310, %r367, %r1182;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1313, %r364, %r1183, %r1310;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1317, %r367, %r1189;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1320, %r364, %r1190, %r1317;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1324, %r367, %r1196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1327, %r364, %r1197, %r1324;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1331, %r367, %r1203;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1334, %r364, %r1204, %r1331;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1354, %r1355}, {%r411, %r414}, {%r1215, %r1285}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1363, %r1364}, {%r411, %r414}, {%r1224, %r1292}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1372, %r1373}, {%r411, %r414}, {%r1233, %r1299}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1381, %r1382}, {%r411, %r414}, {%r1242, %r1306}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1390, %r1391}, {%r411, %r414}, {%r1251, %r1313}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1399, %r1400}, {%r411, %r414}, {%r1260, %r1320}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1408, %r1409}, {%r411, %r414}, {%r1269, %r1327}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1417, %r1418}, {%r411, %r414}, {%r1278, %r1334}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	bar.sync 	0;
	ld.shared.u32 	%r1494, [%rd7];
	ld.shared.u32 	%r1501, [%rd8];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1511, %r1508}, {%r423, %r426}, {%r1494}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1520, %r1517}, {%r423, %r426}, {%r1501}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1504, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1506, %r1504, %r1508;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1509, %r457, %r1511, %r1506;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1513, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1515, %r1513, %r1517;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1518, %r457, %r1520, %r1515;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1522, %r460, %r1511;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1525, %r457, %r1508, %r1522;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1529, %r460, %r1520;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1532, %r457, %r1517, %r1529;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1555, %r1558}, {%r499, %r502}, {%r1509, %r1525}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1562, %r1566}, {%r499, %r502}, {%r1518, %r1532}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1554, %r1555, %r1555;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1557, %r1558, %r1558, %r1554;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1561, %r1562, %r1562, %r1557;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1565, %r1566, %r1566, %r1561;
	// end inline asm
	mov.u32 	%r1570, 488578335;
	// begin inline asm
	fma.rn.f16x2 %r3475, %r1570, %r1565, %r3464;
	// end inline asm
	add.s32 	%r3473, %r3462, 1;
	setp.ne.s32 	%p272, %r3473, 25;
	@%p272 bra 	$L__BB0_220;
// %bb.219:                             // %pass6075
                                        //   in Loop: Header=BB0_216 Depth=2
	shl.b32 	%r1574, %r3463, 15;
	or.b32  	%r1575, %r158, %r1574;
	cvt.u64.u32 	%rd195, %r1575;
	add.s64 	%rd196, %rd195, %rd9;
	shr.u64 	%rd197, %rd196, 37;
	add.s64 	%rd198, %rd196, %rd197;
	shr.s64 	%rd199, %rd198, 27;
	setp.lt.s64 	%p273, %rd196, 0;
	and.b64  	%rd200, %rd198, -134217728;
	setp.ne.s64 	%p274, %rd200, %rd196;
	and.pred  	%p275, %p273, %p274;
	selp.u64 	%rd201, 1, 0, %p275;
	sub.s64 	%rd202, %rd201, %rd199;
	shl.b64 	%rd203, %rd202, 27;
	add.s64 	%rd204, %rd203, %rd196;
	shl.b64 	%rd205, %rd204, 2;
	add.s64 	%rd206, %rd4, %rd205;
	st.global.u32 	[%rd206], %r3475;
	add.s32 	%r3463, %r3463, 1;
	mov.u32 	%r3473, 0;
	mov.u32 	%r3475, %r3473;
$L__BB0_220:                            // %pass6326
                                        //   in Loop: Header=BB0_216 Depth=2
	ld.shared.u32 	%r1580, [%rd45];
	ld.shared.u32 	%r1587, [%rd46];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1597, %r1594}, {%r423, %r426}, {%r1580}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1606, %r1603}, {%r423, %r426}, {%r1587}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1590, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1592, %r1590, %r1594;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1595, %r457, %r1597, %r1592;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1599, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1601, %r1599, %r1603;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1604, %r457, %r1606, %r1601;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1608, %r460, %r1597;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1611, %r457, %r1594, %r1608;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1615, %r460, %r1606;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1618, %r457, %r1603, %r1615;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1641, %r1644}, {%r499, %r502}, {%r1595, %r1611}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1648, %r1652}, {%r499, %r502}, {%r1604, %r1618}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1640, %r1641, %r1641;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1643, %r1644, %r1644, %r1640;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1647, %r1648, %r1648, %r1643;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1651, %r1652, %r1652, %r1647;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3478, %r1570, %r1651, %r3475;
	// end inline asm
	add.s32 	%r3476, %r3473, 1;
	setp.ne.s32 	%p276, %r3476, 25;
	@%p276 bra 	$L__BB0_222;
// %bb.221:                             // %pass6585
                                        //   in Loop: Header=BB0_216 Depth=2
	shl.b32 	%r1660, %r3463, 15;
	or.b32  	%r1661, %r158, %r1660;
	cvt.u64.u32 	%rd207, %r1661;
	add.s64 	%rd208, %rd207, %rd9;
	shr.u64 	%rd209, %rd208, 37;
	add.s64 	%rd210, %rd208, %rd209;
	shr.s64 	%rd211, %rd210, 27;
	setp.lt.s64 	%p277, %rd208, 0;
	and.b64  	%rd212, %rd210, -134217728;
	setp.ne.s64 	%p278, %rd212, %rd208;
	and.pred  	%p279, %p277, %p278;
	selp.u64 	%rd213, 1, 0, %p279;
	sub.s64 	%rd214, %rd213, %rd211;
	shl.b64 	%rd215, %rd214, 27;
	add.s64 	%rd216, %rd215, %rd208;
	shl.b64 	%rd217, %rd216, 2;
	add.s64 	%rd218, %rd4, %rd217;
	st.global.u32 	[%rd218], %r3478;
	add.s32 	%r3463, %r3463, 1;
	mov.u32 	%r3476, 0;
	mov.u32 	%r3478, %r3476;
$L__BB0_222:                            // %pass6836
                                        //   in Loop: Header=BB0_216 Depth=2
	ld.shared.u32 	%r1666, [%rd47];
	ld.shared.u32 	%r1673, [%rd48];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1683, %r1680}, {%r423, %r426}, {%r1666}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1692, %r1689}, {%r423, %r426}, {%r1673}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1676, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1678, %r1676, %r1680;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1681, %r457, %r1683, %r1678;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1685, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1687, %r1685, %r1689;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1690, %r457, %r1692, %r1687;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1694, %r460, %r1683;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1697, %r457, %r1680, %r1694;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1701, %r460, %r1692;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1704, %r457, %r1689, %r1701;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1727, %r1730}, {%r499, %r502}, {%r1681, %r1697}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1734, %r1738}, {%r499, %r502}, {%r1690, %r1704}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1726, %r1727, %r1727;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1729, %r1730, %r1730, %r1726;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1733, %r1734, %r1734, %r1729;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1737, %r1738, %r1738, %r1733;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3481, %r1570, %r1737, %r3478;
	// end inline asm
	add.s32 	%r3479, %r3476, 1;
	setp.ne.s32 	%p280, %r3479, 25;
	@%p280 bra 	$L__BB0_224;
// %bb.223:                             // %pass7095
                                        //   in Loop: Header=BB0_216 Depth=2
	shl.b32 	%r1746, %r3463, 15;
	or.b32  	%r1747, %r158, %r1746;
	cvt.u64.u32 	%rd219, %r1747;
	add.s64 	%rd220, %rd219, %rd9;
	shr.u64 	%rd221, %rd220, 37;
	add.s64 	%rd222, %rd220, %rd221;
	shr.s64 	%rd223, %rd222, 27;
	setp.lt.s64 	%p281, %rd220, 0;
	and.b64  	%rd224, %rd222, -134217728;
	setp.ne.s64 	%p282, %rd224, %rd220;
	and.pred  	%p283, %p281, %p282;
	selp.u64 	%rd225, 1, 0, %p283;
	sub.s64 	%rd226, %rd225, %rd223;
	shl.b64 	%rd227, %rd226, 27;
	add.s64 	%rd228, %rd227, %rd220;
	shl.b64 	%rd229, %rd228, 2;
	add.s64 	%rd230, %rd4, %rd229;
	st.global.u32 	[%rd230], %r3481;
	add.s32 	%r3463, %r3463, 1;
	mov.u32 	%r3479, 0;
	mov.u32 	%r3481, %r3479;
$L__BB0_224:                            // %pass7346
                                        //   in Loop: Header=BB0_216 Depth=2
	ld.shared.u32 	%r1752, [%rd49];
	ld.shared.u32 	%r1759, [%rd50];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1769, %r1766}, {%r423, %r426}, {%r1752}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1778, %r1775}, {%r423, %r426}, {%r1759}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1762, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1764, %r1762, %r1766;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1767, %r457, %r1769, %r1764;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1771, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1773, %r1771, %r1775;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1776, %r457, %r1778, %r1773;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1780, %r460, %r1769;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1783, %r457, %r1766, %r1780;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1787, %r460, %r1778;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1790, %r457, %r1775, %r1787;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1813, %r1816}, {%r499, %r502}, {%r1767, %r1783}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1820, %r1824}, {%r499, %r502}, {%r1776, %r1790}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1812, %r1813, %r1813;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1815, %r1816, %r1816, %r1812;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1819, %r1820, %r1820, %r1815;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1823, %r1824, %r1824, %r1819;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3484, %r1570, %r1823, %r3481;
	// end inline asm
	add.s32 	%r3482, %r3479, 1;
	setp.ne.s32 	%p284, %r3482, 25;
	@%p284 bra 	$L__BB0_226;
// %bb.225:                             // %pass7605
                                        //   in Loop: Header=BB0_216 Depth=2
	shl.b32 	%r1832, %r3463, 15;
	or.b32  	%r1833, %r158, %r1832;
	cvt.u64.u32 	%rd231, %r1833;
	add.s64 	%rd232, %rd231, %rd9;
	shr.u64 	%rd233, %rd232, 37;
	add.s64 	%rd234, %rd232, %rd233;
	shr.s64 	%rd235, %rd234, 27;
	setp.lt.s64 	%p285, %rd232, 0;
	and.b64  	%rd236, %rd234, -134217728;
	setp.ne.s64 	%p286, %rd236, %rd232;
	and.pred  	%p287, %p285, %p286;
	selp.u64 	%rd237, 1, 0, %p287;
	sub.s64 	%rd238, %rd237, %rd235;
	shl.b64 	%rd239, %rd238, 27;
	add.s64 	%rd240, %rd239, %rd232;
	shl.b64 	%rd241, %rd240, 2;
	add.s64 	%rd242, %rd4, %rd241;
	st.global.u32 	[%rd242], %r3484;
	add.s32 	%r3463, %r3463, 1;
	mov.u32 	%r3482, 0;
	mov.u32 	%r3484, %r3482;
$L__BB0_226:                            // %pass7856
                                        //   in Loop: Header=BB0_216 Depth=2
	ld.shared.u32 	%r1838, [%rd51];
	ld.shared.u32 	%r1845, [%rd52];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1855, %r1852}, {%r423, %r426}, {%r1838}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1864, %r1861}, {%r423, %r426}, {%r1845}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1848, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1850, %r1848, %r1852;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1853, %r457, %r1855, %r1850;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1857, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1859, %r1857, %r1861;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1862, %r457, %r1864, %r1859;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1866, %r460, %r1855;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1869, %r457, %r1852, %r1866;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1873, %r460, %r1864;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1876, %r457, %r1861, %r1873;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1899, %r1902}, {%r499, %r502}, {%r1853, %r1869}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1906, %r1910}, {%r499, %r502}, {%r1862, %r1876}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1898, %r1899, %r1899;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1901, %r1902, %r1902, %r1898;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1905, %r1906, %r1906, %r1901;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1909, %r1910, %r1910, %r1905;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3487, %r1570, %r1909, %r3484;
	// end inline asm
	add.s32 	%r3485, %r3482, 1;
	setp.ne.s32 	%p288, %r3485, 25;
	@%p288 bra 	$L__BB0_228;
// %bb.227:                             // %pass8115
                                        //   in Loop: Header=BB0_216 Depth=2
	shl.b32 	%r1918, %r3463, 15;
	or.b32  	%r1919, %r158, %r1918;
	cvt.u64.u32 	%rd243, %r1919;
	add.s64 	%rd244, %rd243, %rd9;
	shr.u64 	%rd245, %rd244, 37;
	add.s64 	%rd246, %rd244, %rd245;
	shr.s64 	%rd247, %rd246, 27;
	setp.lt.s64 	%p289, %rd244, 0;
	and.b64  	%rd248, %rd246, -134217728;
	setp.ne.s64 	%p290, %rd248, %rd244;
	and.pred  	%p291, %p289, %p290;
	selp.u64 	%rd249, 1, 0, %p291;
	sub.s64 	%rd250, %rd249, %rd247;
	shl.b64 	%rd251, %rd250, 27;
	add.s64 	%rd252, %rd251, %rd244;
	shl.b64 	%rd253, %rd252, 2;
	add.s64 	%rd254, %rd4, %rd253;
	st.global.u32 	[%rd254], %r3487;
	add.s32 	%r3463, %r3463, 1;
	mov.u32 	%r3485, 0;
	mov.u32 	%r3487, %r3485;
$L__BB0_228:                            // %pass8366
                                        //   in Loop: Header=BB0_216 Depth=2
	ld.shared.u32 	%r1924, [%rd53];
	ld.shared.u32 	%r1931, [%rd54];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1941, %r1938}, {%r423, %r426}, {%r1924}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1950, %r1947}, {%r423, %r426}, {%r1931}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1934, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1936, %r1934, %r1938;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1939, %r457, %r1941, %r1936;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1943, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1945, %r1943, %r1947;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1948, %r457, %r1950, %r1945;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1952, %r460, %r1941;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1955, %r457, %r1938, %r1952;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1959, %r460, %r1950;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1962, %r457, %r1947, %r1959;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1985, %r1988}, {%r499, %r502}, {%r1939, %r1955}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1992, %r1996}, {%r499, %r502}, {%r1948, %r1962}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1984, %r1985, %r1985;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1987, %r1988, %r1988, %r1984;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1991, %r1992, %r1992, %r1987;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1995, %r1996, %r1996, %r1991;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3490, %r1570, %r1995, %r3487;
	// end inline asm
	add.s32 	%r3488, %r3485, 1;
	setp.ne.s32 	%p292, %r3488, 25;
	@%p292 bra 	$L__BB0_230;
// %bb.229:                             // %pass8625
                                        //   in Loop: Header=BB0_216 Depth=2
	shl.b32 	%r2004, %r3463, 15;
	or.b32  	%r2005, %r158, %r2004;
	cvt.u64.u32 	%rd255, %r2005;
	add.s64 	%rd256, %rd255, %rd9;
	shr.u64 	%rd257, %rd256, 37;
	add.s64 	%rd258, %rd256, %rd257;
	shr.s64 	%rd259, %rd258, 27;
	setp.lt.s64 	%p293, %rd256, 0;
	and.b64  	%rd260, %rd258, -134217728;
	setp.ne.s64 	%p294, %rd260, %rd256;
	and.pred  	%p295, %p293, %p294;
	selp.u64 	%rd261, 1, 0, %p295;
	sub.s64 	%rd262, %rd261, %rd259;
	shl.b64 	%rd263, %rd262, 27;
	add.s64 	%rd264, %rd263, %rd256;
	shl.b64 	%rd265, %rd264, 2;
	add.s64 	%rd266, %rd4, %rd265;
	st.global.u32 	[%rd266], %r3490;
	add.s32 	%r3463, %r3463, 1;
	mov.u32 	%r3488, 0;
	mov.u32 	%r3490, %r3488;
$L__BB0_230:                            // %pass8876
                                        //   in Loop: Header=BB0_216 Depth=2
	ld.shared.u32 	%r2010, [%rd55];
	ld.shared.u32 	%r2017, [%rd56];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2027, %r2024}, {%r423, %r426}, {%r2010}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2036, %r2033}, {%r423, %r426}, {%r2017}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2020, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2022, %r2020, %r2024;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2025, %r457, %r2027, %r2022;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2029, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2031, %r2029, %r2033;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2034, %r457, %r2036, %r2031;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2038, %r460, %r2027;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2041, %r457, %r2024, %r2038;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2045, %r460, %r2036;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2048, %r457, %r2033, %r2045;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2071, %r2074}, {%r499, %r502}, {%r2025, %r2041}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2078, %r2082}, {%r499, %r502}, {%r2034, %r2048}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2070, %r2071, %r2071;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2073, %r2074, %r2074, %r2070;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2077, %r2078, %r2078, %r2073;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2081, %r2082, %r2082, %r2077;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3493, %r1570, %r2081, %r3490;
	// end inline asm
	add.s32 	%r3491, %r3488, 1;
	setp.ne.s32 	%p296, %r3491, 25;
	@%p296 bra 	$L__BB0_232;
// %bb.231:                             // %pass9135
                                        //   in Loop: Header=BB0_216 Depth=2
	shl.b32 	%r2090, %r3463, 15;
	or.b32  	%r2091, %r158, %r2090;
	cvt.u64.u32 	%rd267, %r2091;
	add.s64 	%rd268, %rd267, %rd9;
	shr.u64 	%rd269, %rd268, 37;
	add.s64 	%rd270, %rd268, %rd269;
	shr.s64 	%rd271, %rd270, 27;
	setp.lt.s64 	%p297, %rd268, 0;
	and.b64  	%rd272, %rd270, -134217728;
	setp.ne.s64 	%p298, %rd272, %rd268;
	and.pred  	%p299, %p297, %p298;
	selp.u64 	%rd273, 1, 0, %p299;
	sub.s64 	%rd274, %rd273, %rd271;
	shl.b64 	%rd275, %rd274, 27;
	add.s64 	%rd276, %rd275, %rd268;
	shl.b64 	%rd277, %rd276, 2;
	add.s64 	%rd278, %rd4, %rd277;
	st.global.u32 	[%rd278], %r3493;
	add.s32 	%r3463, %r3463, 1;
	mov.u32 	%r3491, 0;
	mov.u32 	%r3493, %r3491;
$L__BB0_232:                            // %pass9386
                                        //   in Loop: Header=BB0_216 Depth=2
	ld.shared.u32 	%r2096, [%rd57];
	ld.shared.u32 	%r2103, [%rd58];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2113, %r2110}, {%r423, %r426}, {%r2096}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2122, %r2119}, {%r423, %r426}, {%r2103}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2106, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2108, %r2106, %r2110;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2111, %r457, %r2113, %r2108;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2115, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2117, %r2115, %r2119;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2120, %r457, %r2122, %r2117;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2124, %r460, %r2113;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2127, %r457, %r2110, %r2124;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2131, %r460, %r2122;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2134, %r457, %r2119, %r2131;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2157, %r2160}, {%r499, %r502}, {%r2111, %r2127}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2164, %r2168}, {%r499, %r502}, {%r2120, %r2134}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2156, %r2157, %r2157;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2159, %r2160, %r2160, %r2156;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2163, %r2164, %r2164, %r2159;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2167, %r2168, %r2168, %r2163;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3464, %r1570, %r2167, %r3493;
	// end inline asm
	add.s32 	%r3462, %r3491, 1;
	setp.ne.s32 	%p300, %r3462, 25;
	@%p300 bra 	$L__BB0_151;
// %bb.233:                             // %pass9645
                                        //   in Loop: Header=BB0_216 Depth=2
	shl.b32 	%r2176, %r3463, 15;
	or.b32  	%r2177, %r158, %r2176;
	cvt.u64.u32 	%rd279, %r2177;
	add.s64 	%rd280, %rd279, %rd9;
	shr.u64 	%rd281, %rd280, 37;
	add.s64 	%rd282, %rd280, %rd281;
	shr.s64 	%rd283, %rd282, 27;
	setp.lt.s64 	%p301, %rd280, 0;
	and.b64  	%rd284, %rd282, -134217728;
	setp.ne.s64 	%p302, %rd284, %rd280;
	and.pred  	%p303, %p301, %p302;
	selp.u64 	%rd285, 1, 0, %p303;
	sub.s64 	%rd286, %rd285, %rd283;
	shl.b64 	%rd287, %rd286, 27;
	add.s64 	%rd288, %rd287, %rd280;
	shl.b64 	%rd289, %rd288, 2;
	add.s64 	%rd290, %rd4, %rd289;
	st.global.u32 	[%rd290], %r3464;
	add.s32 	%r3463, %r3463, 1;
	mov.u32 	%r3462, 0;
	mov.u32 	%r3464, %r3462;
	bra.uni 	$L__BB0_151;
$L__BB0_152:                            // %L22574.preheader
                                        //   in Loop: Header=BB0_198 Depth=1
	mov.u32 	%r3461, 16;
	bra.uni 	$L__BB0_153;
$L__BB0_168:                            // %L32761
                                        //   in Loop: Header=BB0_153 Depth=2
	bar.sync 	0;
	add.s32 	%r3461, %r3461, -8;
	setp.ne.s32 	%p341, %r3461, -16;
	@%p341 bra 	$L__BB0_153;
	bra.uni 	$L__BB0_169;
$L__BB0_153:                            // %L22574
                                        //   Parent Loop BB0_198 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p305, %r3461, 16;
	selp.b32 	%r2790, %r192, 0, %p305;
	setp.eq.s32 	%p306, %r3461, 8;
	selp.b32 	%r2791, %r196, %r2790, %p306;
	setp.eq.s32 	%p307, %r3461, 0;
	selp.b32 	%r2792, %r200, %r2791, %p307;
	setp.eq.s32 	%p308, %r3461, -8;
	selp.b32 	%r2793, %r204, %r2792, %p308;
	selp.b32 	%r2794, %r193, 0, %p305;
	selp.b32 	%r2795, %r197, %r2794, %p306;
	selp.b32 	%r2796, %r201, %r2795, %p307;
	selp.b32 	%r2797, %r205, %r2796, %p308;
	selp.b32 	%r2798, %r194, 0, %p305;
	selp.b32 	%r2799, %r198, %r2798, %p306;
	selp.b32 	%r2800, %r202, %r2799, %p307;
	selp.b32 	%r2801, %r206, %r2800, %p308;
	selp.b32 	%r2802, %r195, 0, %p305;
	selp.b32 	%r2803, %r199, %r2802, %p306;
	selp.b32 	%r2804, %r203, %r2803, %p307;
	selp.b32 	%r2805, %r207, %r2804, %p308;
	// begin inline asm
	mov.b32 %r2206, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2217, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2806, %r2793, 8;
	xor.b32  	%r2216, %r2806, 8947848;
	// begin inline asm
	lop3.b32 %r2203, %r1087, %r2216, %r2206, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2207, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2208, %r2206, %r2207;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2211, %r2203, %r2208;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2214, %r1098, %r2216, %r2217, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2218, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2219, %r2217, %r2218;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2222, %r2214, %r2219;
	// end inline asm
	// begin inline asm
	mov.b32 %r2252, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2263, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2807, %r2797, 8;
	xor.b32  	%r2262, %r2807, 8947848;
	// begin inline asm
	lop3.b32 %r2249, %r1087, %r2262, %r2252, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2253, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2254, %r2252, %r2253;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2257, %r2249, %r2254;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2260, %r1098, %r2262, %r2263, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2264, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2265, %r2263, %r2264;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2268, %r2260, %r2265;
	// end inline asm
	// begin inline asm
	mov.b32 %r2298, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2309, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2808, %r2801, 8;
	xor.b32  	%r2308, %r2808, 8947848;
	// begin inline asm
	lop3.b32 %r2295, %r1087, %r2308, %r2298, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2299, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2300, %r2298, %r2299;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2303, %r2295, %r2300;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2306, %r1098, %r2308, %r2309, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2310, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2311, %r2309, %r2310;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2314, %r2306, %r2311;
	// end inline asm
	// begin inline asm
	mov.b32 %r2344, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2355, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2809, %r2805, 8;
	xor.b32  	%r2354, %r2809, 8947848;
	// begin inline asm
	lop3.b32 %r2341, %r1087, %r2354, %r2344, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2345, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2346, %r2344, %r2345;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2349, %r2341, %r2346;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2352, %r1098, %r2354, %r2355, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2356, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2357, %r2355, %r2356;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2360, %r2352, %r2357;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r153;
    mov.b32 {%r2re, %r2im}, %r2211;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2363, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2222;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2366, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r153;
    mov.b32 {%r2re, %r2im}, %r2257;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2369, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2268;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2372, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r153;
    mov.b32 {%r2re, %r2im}, %r2303;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2375, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2314;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2378, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r153;
    mov.b32 {%r2re, %r2im}, %r2349;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2381, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2360;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2384, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2450, %r2447}, {%r326, %r329}, {%r2363}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2459, %r2456}, {%r326, %r329}, {%r2366}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2468, %r2465}, {%r326, %r329}, {%r2369}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2477, %r2474}, {%r326, %r329}, {%r2372}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2486, %r2483}, {%r326, %r329}, {%r2375}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2495, %r2492}, {%r326, %r329}, {%r2378}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2504, %r2501}, {%r326, %r329}, {%r2381}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2513, %r2510}, {%r326, %r329}, {%r2384}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2443, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2445, %r2443, %r2447;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2448, %r364, %r2450, %r2445;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2452, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2454, %r2452, %r2456;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2457, %r364, %r2459, %r2454;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2461, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2463, %r2461, %r2465;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2466, %r364, %r2468, %r2463;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2470, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2472, %r2470, %r2474;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2475, %r364, %r2477, %r2472;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2479, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2481, %r2479, %r2483;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2484, %r364, %r2486, %r2481;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2488, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2490, %r2488, %r2492;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2493, %r364, %r2495, %r2490;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2497, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2499, %r2497, %r2501;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2502, %r364, %r2504, %r2499;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2506, %r367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2508, %r2506, %r2510;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2511, %r364, %r2513, %r2508;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2515, %r367, %r2450;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2518, %r364, %r2447, %r2515;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2522, %r367, %r2459;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2525, %r364, %r2456, %r2522;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2529, %r367, %r2468;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2532, %r364, %r2465, %r2529;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2536, %r367, %r2477;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2539, %r364, %r2474, %r2536;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2543, %r367, %r2486;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2546, %r364, %r2483, %r2543;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2550, %r367, %r2495;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2553, %r364, %r2492, %r2550;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2557, %r367, %r2504;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2560, %r364, %r2501, %r2557;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2564, %r367, %r2513;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2567, %r364, %r2510, %r2564;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2571, %r2572}, {%r411, %r414}, {%r2448, %r2518}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2580, %r2581}, {%r411, %r414}, {%r2457, %r2525}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2589, %r2590}, {%r411, %r414}, {%r2466, %r2532}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2598, %r2599}, {%r411, %r414}, {%r2475, %r2539}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2607, %r2608}, {%r411, %r414}, {%r2484, %r2546}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2616, %r2617}, {%r411, %r414}, {%r2493, %r2553}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2625, %r2626}, {%r411, %r414}, {%r2502, %r2560}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2634, %r2635}, {%r411, %r414}, {%r2511, %r2567}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	bar.sync 	0;
	ld.shared.u32 	%r2711, [%rd7];
	ld.shared.u32 	%r2718, [%rd8];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2728, %r2725}, {%r423, %r426}, {%r2711}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2737, %r2734}, {%r423, %r426}, {%r2718}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2721, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2723, %r2721, %r2725;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2726, %r457, %r2728, %r2723;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2730, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2732, %r2730, %r2734;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2735, %r457, %r2737, %r2732;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2739, %r460, %r2728;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2742, %r457, %r2725, %r2739;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2746, %r460, %r2737;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2749, %r457, %r2734, %r2746;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2772, %r2775}, {%r499, %r502}, {%r2726, %r2742}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2779, %r2783}, {%r499, %r502}, {%r2735, %r2749}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2771, %r2772, %r2772;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2774, %r2775, %r2775, %r2771;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2778, %r2779, %r2779, %r2774;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2782, %r2783, %r2783, %r2778;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3496, %r1570, %r2782, %r3464;
	// end inline asm
	add.s32 	%r3494, %r3462, 1;
	setp.eq.s32 	%p309, %r3494, 25;
	@%p309 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_155;
$L__BB0_154:                            // %pass10340
                                        //   in Loop: Header=BB0_153 Depth=2
	shl.b32 	%r2811, %r3463, 15;
	or.b32  	%r2812, %r158, %r2811;
	cvt.u64.u32 	%rd291, %r2812;
	add.s64 	%rd292, %rd291, %rd9;
	shr.u64 	%rd293, %rd292, 37;
	add.s64 	%rd294, %rd292, %rd293;
	shr.s64 	%rd295, %rd294, 27;
	setp.lt.s64 	%p310, %rd292, 0;
	and.b64  	%rd296, %rd294, -134217728;
	setp.ne.s64 	%p311, %rd296, %rd292;
	and.pred  	%p312, %p310, %p311;
	selp.u64 	%rd297, 1, 0, %p312;
	sub.s64 	%rd298, %rd297, %rd295;
	shl.b64 	%rd299, %rd298, 27;
	add.s64 	%rd300, %rd299, %rd292;
	shl.b64 	%rd301, %rd300, 2;
	add.s64 	%rd302, %rd4, %rd301;
	st.global.u32 	[%rd302], %r3496;
	add.s32 	%r3463, %r3463, 1;
	mov.u32 	%r3494, 0;
	mov.u32 	%r3496, %r3494;
$L__BB0_155:                            // %pass10591
                                        //   in Loop: Header=BB0_153 Depth=2
	ld.shared.u32 	%r2817, [%rd45];
	ld.shared.u32 	%r2824, [%rd46];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2834, %r2831}, {%r423, %r426}, {%r2817}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2843, %r2840}, {%r423, %r426}, {%r2824}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2827, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2829, %r2827, %r2831;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2832, %r457, %r2834, %r2829;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2836, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2838, %r2836, %r2840;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2841, %r457, %r2843, %r2838;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2845, %r460, %r2834;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2848, %r457, %r2831, %r2845;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2852, %r460, %r2843;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2855, %r457, %r2840, %r2852;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2878, %r2881}, {%r499, %r502}, {%r2832, %r2848}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2885, %r2889}, {%r499, %r502}, {%r2841, %r2855}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2877, %r2878, %r2878;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2880, %r2881, %r2881, %r2877;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2884, %r2885, %r2885, %r2880;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2888, %r2889, %r2889, %r2884;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3499, %r1570, %r2888, %r3496;
	// end inline asm
	add.s32 	%r3497, %r3494, 1;
	setp.ne.s32 	%p313, %r3497, 25;
	@%p313 bra 	$L__BB0_157;
// %bb.156:                             // %pass10850
                                        //   in Loop: Header=BB0_153 Depth=2
	shl.b32 	%r2897, %r3463, 15;
	or.b32  	%r2898, %r158, %r2897;
	cvt.u64.u32 	%rd303, %r2898;
	add.s64 	%rd304, %rd303, %rd9;
	shr.u64 	%rd305, %rd304, 37;
	add.s64 	%rd306, %rd304, %rd305;
	shr.s64 	%rd307, %rd306, 27;
	setp.lt.s64 	%p314, %rd304, 0;
	and.b64  	%rd308, %rd306, -134217728;
	setp.ne.s64 	%p315, %rd308, %rd304;
	and.pred  	%p316, %p314, %p315;
	selp.u64 	%rd309, 1, 0, %p316;
	sub.s64 	%rd310, %rd309, %rd307;
	shl.b64 	%rd311, %rd310, 27;
	add.s64 	%rd312, %rd311, %rd304;
	shl.b64 	%rd313, %rd312, 2;
	add.s64 	%rd314, %rd4, %rd313;
	st.global.u32 	[%rd314], %r3499;
	add.s32 	%r3463, %r3463, 1;
	mov.u32 	%r3497, 0;
	mov.u32 	%r3499, %r3497;
$L__BB0_157:                            // %pass11101
                                        //   in Loop: Header=BB0_153 Depth=2
	ld.shared.u32 	%r2903, [%rd47];
	ld.shared.u32 	%r2910, [%rd48];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2920, %r2917}, {%r423, %r426}, {%r2903}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2929, %r2926}, {%r423, %r426}, {%r2910}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2913, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2915, %r2913, %r2917;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2918, %r457, %r2920, %r2915;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2922, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2924, %r2922, %r2926;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2927, %r457, %r2929, %r2924;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2931, %r460, %r2920;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2934, %r457, %r2917, %r2931;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2938, %r460, %r2929;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2941, %r457, %r2926, %r2938;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2964, %r2967}, {%r499, %r502}, {%r2918, %r2934}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2971, %r2975}, {%r499, %r502}, {%r2927, %r2941}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2963, %r2964, %r2964;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2966, %r2967, %r2967, %r2963;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2970, %r2971, %r2971, %r2966;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2974, %r2975, %r2975, %r2970;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3502, %r1570, %r2974, %r3499;
	// end inline asm
	add.s32 	%r3500, %r3497, 1;
	setp.ne.s32 	%p317, %r3500, 25;
	@%p317 bra 	$L__BB0_159;
// %bb.158:                             // %pass11360
                                        //   in Loop: Header=BB0_153 Depth=2
	shl.b32 	%r2983, %r3463, 15;
	or.b32  	%r2984, %r158, %r2983;
	cvt.u64.u32 	%rd315, %r2984;
	add.s64 	%rd316, %rd315, %rd9;
	shr.u64 	%rd317, %rd316, 37;
	add.s64 	%rd318, %rd316, %rd317;
	shr.s64 	%rd319, %rd318, 27;
	setp.lt.s64 	%p318, %rd316, 0;
	and.b64  	%rd320, %rd318, -134217728;
	setp.ne.s64 	%p319, %rd320, %rd316;
	and.pred  	%p320, %p318, %p319;
	selp.u64 	%rd321, 1, 0, %p320;
	sub.s64 	%rd322, %rd321, %rd319;
	shl.b64 	%rd323, %rd322, 27;
	add.s64 	%rd324, %rd323, %rd316;
	shl.b64 	%rd325, %rd324, 2;
	add.s64 	%rd326, %rd4, %rd325;
	st.global.u32 	[%rd326], %r3502;
	add.s32 	%r3463, %r3463, 1;
	mov.u32 	%r3500, 0;
	mov.u32 	%r3502, %r3500;
$L__BB0_159:                            // %pass11611
                                        //   in Loop: Header=BB0_153 Depth=2
	ld.shared.u32 	%r2989, [%rd49];
	ld.shared.u32 	%r2996, [%rd50];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3006, %r3003}, {%r423, %r426}, {%r2989}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3015, %r3012}, {%r423, %r426}, {%r2996}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2999, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3001, %r2999, %r3003;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3004, %r457, %r3006, %r3001;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3008, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3010, %r3008, %r3012;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3013, %r457, %r3015, %r3010;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3017, %r460, %r3006;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3020, %r457, %r3003, %r3017;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3024, %r460, %r3015;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3027, %r457, %r3012, %r3024;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3050, %r3053}, {%r499, %r502}, {%r3004, %r3020}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3057, %r3061}, {%r499, %r502}, {%r3013, %r3027}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3049, %r3050, %r3050;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3052, %r3053, %r3053, %r3049;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3056, %r3057, %r3057, %r3052;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3060, %r3061, %r3061, %r3056;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3505, %r1570, %r3060, %r3502;
	// end inline asm
	add.s32 	%r3503, %r3500, 1;
	setp.ne.s32 	%p321, %r3503, 25;
	@%p321 bra 	$L__BB0_161;
// %bb.160:                             // %pass11870
                                        //   in Loop: Header=BB0_153 Depth=2
	shl.b32 	%r3069, %r3463, 15;
	or.b32  	%r3070, %r158, %r3069;
	cvt.u64.u32 	%rd327, %r3070;
	add.s64 	%rd328, %rd327, %rd9;
	shr.u64 	%rd329, %rd328, 37;
	add.s64 	%rd330, %rd328, %rd329;
	shr.s64 	%rd331, %rd330, 27;
	setp.lt.s64 	%p322, %rd328, 0;
	and.b64  	%rd332, %rd330, -134217728;
	setp.ne.s64 	%p323, %rd332, %rd328;
	and.pred  	%p324, %p322, %p323;
	selp.u64 	%rd333, 1, 0, %p324;
	sub.s64 	%rd334, %rd333, %rd331;
	shl.b64 	%rd335, %rd334, 27;
	add.s64 	%rd336, %rd335, %rd328;
	shl.b64 	%rd337, %rd336, 2;
	add.s64 	%rd338, %rd4, %rd337;
	st.global.u32 	[%rd338], %r3505;
	add.s32 	%r3463, %r3463, 1;
	mov.u32 	%r3503, 0;
	mov.u32 	%r3505, %r3503;
$L__BB0_161:                            // %pass12121
                                        //   in Loop: Header=BB0_153 Depth=2
	ld.shared.u32 	%r3075, [%rd51];
	ld.shared.u32 	%r3082, [%rd52];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3092, %r3089}, {%r423, %r426}, {%r3075}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3101, %r3098}, {%r423, %r426}, {%r3082}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3085, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3087, %r3085, %r3089;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3090, %r457, %r3092, %r3087;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3094, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3096, %r3094, %r3098;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3099, %r457, %r3101, %r3096;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3103, %r460, %r3092;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3106, %r457, %r3089, %r3103;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3110, %r460, %r3101;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3113, %r457, %r3098, %r3110;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3136, %r3139}, {%r499, %r502}, {%r3090, %r3106}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3143, %r3147}, {%r499, %r502}, {%r3099, %r3113}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3135, %r3136, %r3136;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3138, %r3139, %r3139, %r3135;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3142, %r3143, %r3143, %r3138;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3146, %r3147, %r3147, %r3142;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3508, %r1570, %r3146, %r3505;
	// end inline asm
	add.s32 	%r3506, %r3503, 1;
	setp.ne.s32 	%p325, %r3506, 25;
	@%p325 bra 	$L__BB0_163;
// %bb.162:                             // %pass12380
                                        //   in Loop: Header=BB0_153 Depth=2
	shl.b32 	%r3155, %r3463, 15;
	or.b32  	%r3156, %r158, %r3155;
	cvt.u64.u32 	%rd339, %r3156;
	add.s64 	%rd340, %rd339, %rd9;
	shr.u64 	%rd341, %rd340, 37;
	add.s64 	%rd342, %rd340, %rd341;
	shr.s64 	%rd343, %rd342, 27;
	setp.lt.s64 	%p326, %rd340, 0;
	and.b64  	%rd344, %rd342, -134217728;
	setp.ne.s64 	%p327, %rd344, %rd340;
	and.pred  	%p328, %p326, %p327;
	selp.u64 	%rd345, 1, 0, %p328;
	sub.s64 	%rd346, %rd345, %rd343;
	shl.b64 	%rd347, %rd346, 27;
	add.s64 	%rd348, %rd347, %rd340;
	shl.b64 	%rd349, %rd348, 2;
	add.s64 	%rd350, %rd4, %rd349;
	st.global.u32 	[%rd350], %r3508;
	add.s32 	%r3463, %r3463, 1;
	mov.u32 	%r3506, 0;
	mov.u32 	%r3508, %r3506;
$L__BB0_163:                            // %pass12631
                                        //   in Loop: Header=BB0_153 Depth=2
	ld.shared.u32 	%r3161, [%rd53];
	ld.shared.u32 	%r3168, [%rd54];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3178, %r3175}, {%r423, %r426}, {%r3161}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3187, %r3184}, {%r423, %r426}, {%r3168}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3171, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3173, %r3171, %r3175;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3176, %r457, %r3178, %r3173;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3180, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3182, %r3180, %r3184;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3185, %r457, %r3187, %r3182;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3189, %r460, %r3178;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3192, %r457, %r3175, %r3189;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3196, %r460, %r3187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3199, %r457, %r3184, %r3196;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3222, %r3225}, {%r499, %r502}, {%r3176, %r3192}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3229, %r3233}, {%r499, %r502}, {%r3185, %r3199}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3221, %r3222, %r3222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3224, %r3225, %r3225, %r3221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3228, %r3229, %r3229, %r3224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3232, %r3233, %r3233, %r3228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3511, %r1570, %r3232, %r3508;
	// end inline asm
	add.s32 	%r3509, %r3506, 1;
	setp.ne.s32 	%p329, %r3509, 25;
	@%p329 bra 	$L__BB0_165;
// %bb.164:                             // %pass12890
                                        //   in Loop: Header=BB0_153 Depth=2
	shl.b32 	%r3241, %r3463, 15;
	or.b32  	%r3242, %r158, %r3241;
	cvt.u64.u32 	%rd351, %r3242;
	add.s64 	%rd352, %rd351, %rd9;
	shr.u64 	%rd353, %rd352, 37;
	add.s64 	%rd354, %rd352, %rd353;
	shr.s64 	%rd355, %rd354, 27;
	setp.lt.s64 	%p330, %rd352, 0;
	and.b64  	%rd356, %rd354, -134217728;
	setp.ne.s64 	%p331, %rd356, %rd352;
	and.pred  	%p332, %p330, %p331;
	selp.u64 	%rd357, 1, 0, %p332;
	sub.s64 	%rd358, %rd357, %rd355;
	shl.b64 	%rd359, %rd358, 27;
	add.s64 	%rd360, %rd359, %rd352;
	shl.b64 	%rd361, %rd360, 2;
	add.s64 	%rd362, %rd4, %rd361;
	st.global.u32 	[%rd362], %r3511;
	add.s32 	%r3463, %r3463, 1;
	mov.u32 	%r3509, 0;
	mov.u32 	%r3511, %r3509;
$L__BB0_165:                            // %pass13141
                                        //   in Loop: Header=BB0_153 Depth=2
	ld.shared.u32 	%r3247, [%rd55];
	ld.shared.u32 	%r3254, [%rd56];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3264, %r3261}, {%r423, %r426}, {%r3247}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3273, %r3270}, {%r423, %r426}, {%r3254}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3257, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3259, %r3257, %r3261;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3262, %r457, %r3264, %r3259;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3266, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3268, %r3266, %r3270;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3271, %r457, %r3273, %r3268;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3275, %r460, %r3264;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3278, %r457, %r3261, %r3275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3282, %r460, %r3273;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3285, %r457, %r3270, %r3282;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3308, %r3311}, {%r499, %r502}, {%r3262, %r3278}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3315, %r3319}, {%r499, %r502}, {%r3271, %r3285}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3307, %r3308, %r3308;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3310, %r3311, %r3311, %r3307;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3314, %r3315, %r3315, %r3310;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3318, %r3319, %r3319, %r3314;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3514, %r1570, %r3318, %r3511;
	// end inline asm
	add.s32 	%r3512, %r3509, 1;
	setp.ne.s32 	%p333, %r3512, 25;
	@%p333 bra 	$L__BB0_167;
// %bb.166:                             // %pass13400
                                        //   in Loop: Header=BB0_153 Depth=2
	shl.b32 	%r3327, %r3463, 15;
	or.b32  	%r3328, %r158, %r3327;
	cvt.u64.u32 	%rd363, %r3328;
	add.s64 	%rd364, %rd363, %rd9;
	shr.u64 	%rd365, %rd364, 37;
	add.s64 	%rd366, %rd364, %rd365;
	shr.s64 	%rd367, %rd366, 27;
	setp.lt.s64 	%p334, %rd364, 0;
	and.b64  	%rd368, %rd366, -134217728;
	setp.ne.s64 	%p335, %rd368, %rd364;
	and.pred  	%p336, %p334, %p335;
	selp.u64 	%rd369, 1, 0, %p336;
	sub.s64 	%rd370, %rd369, %rd367;
	shl.b64 	%rd371, %rd370, 27;
	add.s64 	%rd372, %rd371, %rd364;
	shl.b64 	%rd373, %rd372, 2;
	add.s64 	%rd374, %rd4, %rd373;
	st.global.u32 	[%rd374], %r3514;
	add.s32 	%r3463, %r3463, 1;
	mov.u32 	%r3512, 0;
	mov.u32 	%r3514, %r3512;
$L__BB0_167:                            // %pass13651
                                        //   in Loop: Header=BB0_153 Depth=2
	ld.shared.u32 	%r3333, [%rd57];
	ld.shared.u32 	%r3340, [%rd58];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3350, %r3347}, {%r423, %r426}, {%r3333}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3359, %r3356}, {%r423, %r426}, {%r3340}, {%r1209, %r1209};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3343, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3345, %r3343, %r3347;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3348, %r457, %r3350, %r3345;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3352, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3354, %r3352, %r3356;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3357, %r457, %r3359, %r3354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3361, %r460, %r3350;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3364, %r457, %r3347, %r3361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3368, %r460, %r3359;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3371, %r457, %r3356, %r3368;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3394, %r3397}, {%r499, %r502}, {%r3348, %r3364}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3401, %r3405}, {%r499, %r502}, {%r3357, %r3371}, {%r1209, %r1209}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3393, %r3394, %r3394;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3396, %r3397, %r3397, %r3393;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3400, %r3401, %r3401, %r3396;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3404, %r3405, %r3405, %r3400;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3464, %r1570, %r3404, %r3514;
	// end inline asm
	add.s32 	%r3462, %r3512, 1;
	setp.ne.s32 	%p337, %r3462, 25;
	@%p337 bra 	$L__BB0_168;
// %bb.234:                             // %pass13910
                                        //   in Loop: Header=BB0_153 Depth=2
	shl.b32 	%r3413, %r3463, 15;
	or.b32  	%r3414, %r158, %r3413;
	cvt.u64.u32 	%rd375, %r3414;
	add.s64 	%rd376, %rd375, %rd9;
	shr.u64 	%rd377, %rd376, 37;
	add.s64 	%rd378, %rd376, %rd377;
	shr.s64 	%rd379, %rd378, 27;
	setp.lt.s64 	%p338, %rd376, 0;
	and.b64  	%rd380, %rd378, -134217728;
	setp.ne.s64 	%p339, %rd380, %rd376;
	and.pred  	%p340, %p338, %p339;
	selp.u64 	%rd381, 1, 0, %p340;
	sub.s64 	%rd382, %rd381, %rd379;
	shl.b64 	%rd383, %rd382, 27;
	add.s64 	%rd384, %rd383, %rd376;
	shl.b64 	%rd385, %rd384, 2;
	add.s64 	%rd386, %rd4, %rd385;
	st.global.u32 	[%rd386], %r3464;
	add.s32 	%r3463, %r3463, 1;
	mov.u32 	%r3462, %r1209;
	mov.u32 	%r3464, %r1209;
	bra.uni 	$L__BB0_168;
$L__BB0_170:                            // %L32792
	mov.u32 	%r3415, 0;
	st.global.u32 	[%rd6], %r3415;
	ret;
$L__BB0_217:                            // %post_box_union
	mov.u64 	%rd193, exception2651;
	cvta.global.u64 	%rd194, %rd193;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd194;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_135:                            // %L6896
	mov.u32 	%r3431, 5;
	st.global.u32 	[%rd6], %r3431;
	mov.u64 	%rd417, exception2603;
	cvta.global.u64 	%rd418, %rd417;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd418;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_136:                            // %L7056
	mov.u32 	%r3430, 5;
	st.global.u32 	[%rd6], %r3430;
	mov.u64 	%rd415, exception2603;
	cvta.global.u64 	%rd416, %rd415;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd416;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_137:                            // %L7216
	mov.u32 	%r3429, 5;
	st.global.u32 	[%rd6], %r3429;
	mov.u64 	%rd413, exception2603;
	cvta.global.u64 	%rd414, %rd413;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd414;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_138:                            // %L7376
	mov.u32 	%r3428, 5;
	st.global.u32 	[%rd6], %r3428;
	mov.u64 	%rd411, exception2603;
	cvta.global.u64 	%rd412, %rd411;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd412;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_139:                            // %L7536
	mov.u32 	%r3427, 5;
	st.global.u32 	[%rd6], %r3427;
	mov.u64 	%rd409, exception2603;
	cvta.global.u64 	%rd410, %rd409;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd410;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_140:                            // %L7696
	mov.u32 	%r3426, 5;
	st.global.u32 	[%rd6], %r3426;
	mov.u64 	%rd407, exception2603;
	cvta.global.u64 	%rd408, %rd407;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd408;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_141:                            // %L7856
	mov.u32 	%r3425, 5;
	st.global.u32 	[%rd6], %r3425;
	mov.u64 	%rd405, exception2603;
	cvta.global.u64 	%rd406, %rd405;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd406;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_142:                            // %L8016
	mov.u32 	%r3424, 5;
	st.global.u32 	[%rd6], %r3424;
	mov.u64 	%rd403, exception2603;
	cvta.global.u64 	%rd404, %rd403;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd404;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_143:                            // %L8176
	mov.u32 	%r3423, 5;
	st.global.u32 	[%rd6], %r3423;
	mov.u64 	%rd401, exception2603;
	cvta.global.u64 	%rd402, %rd401;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd402;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_144:                            // %L8336
	mov.u32 	%r3422, 5;
	st.global.u32 	[%rd6], %r3422;
	mov.u64 	%rd399, exception2603;
	cvta.global.u64 	%rd400, %rd399;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd400;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L8496
	mov.u32 	%r3421, 5;
	st.global.u32 	[%rd6], %r3421;
	mov.u64 	%rd397, exception2603;
	cvta.global.u64 	%rd398, %rd397;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd398;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L8656
	mov.u32 	%r3420, 5;
	st.global.u32 	[%rd6], %r3420;
	mov.u64 	%rd395, exception2603;
	cvta.global.u64 	%rd396, %rd395;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd396;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L8816
	mov.u32 	%r3419, 5;
	st.global.u32 	[%rd6], %r3419;
	mov.u64 	%rd393, exception2603;
	cvta.global.u64 	%rd394, %rd393;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd394;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L8976
	mov.u32 	%r3418, 5;
	st.global.u32 	[%rd6], %r3418;
	mov.u64 	%rd391, exception2603;
	cvta.global.u64 	%rd392, %rd391;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd392;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L9136
	mov.u32 	%r3417, 5;
	st.global.u32 	[%rd6], %r3417;
	mov.u64 	%rd389, exception2603;
	cvta.global.u64 	%rd390, %rd389;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd390;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L9296
	mov.u32 	%r3416, 5;
	st.global.u32 	[%rd6], %r3416;
	mov.u64 	%rd387, exception2603;
	cvta.global.u64 	%rd388, %rd387;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd388;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L169
	mov.u32 	%r3433, 2;
	st.global.u32 	[%rd6], %r3433;
	mov.u64 	%rd421, exception2603;
	cvta.global.u64 	%rd422, %rd421;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd422;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_12:                             // %L312
	mov.u32 	%r3432, 3;
	st.global.u32 	[%rd6], %r3432;
	mov.u64 	%rd419, exception2603;
	cvta.global.u64 	%rd420, %rd419;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd420;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd65, exception1;
	cvta.global.u64 	%rd66, %rd65;
	{ // callseq 45, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd66;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 45
	{ // callseq 46, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 46
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_134:                            // %L1159
	add.u64 	%rd64, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r1, %r4};
	st.local.v2.u32 	[%rd5+8], {%r2, %r85};
	st.local.u32 	[%rd5+16], %r86;
	mov.u64 	%rd70, __unnamed_1;
	cvta.global.u64 	%rd71, %rd70;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd71;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd64;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r512, [retval0+0];
	} // callseq 47
	mov.u32 	%r514, 4;
	st.global.u32 	[%rd6], %r514;
	mov.u64 	%rd73, exception2603;
	cvta.global.u64 	%rd74, %rd73;
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd74;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 48
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r296;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 49
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
