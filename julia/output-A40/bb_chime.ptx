// PTX kernel code for CUDA baseband beamformer
// This file has been generated automatically by `bb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for bb(::Int32, ::Int32, ::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=128, blocks_per_sm=8

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception2743[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32]
)
.reqntid 128, 1, 1
.minnctapersm 8
{
	.reg .pred 	%p<70>;
	.reg .b32 	%r<2406>;
	.reg .b64 	%rd<282>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r120, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd32, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r123, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p6, %r123, 32895;
	@%p6 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r124, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p7, %r124, 43135;
	@%p7 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L26
	ld.param.u32 	%r121, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	ld.param.u64 	%rd5, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r125, %r2, 7;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r126, %r125, %r1;
	or.b32  	%r127, %r126, %r4;
	mul.wide.u32 	%rd37, %r127, 4;
	add.s64 	%rd7, %rd5, %rd37;
	mov.u32 	%r128, 1;
	st.global.u32 	[%rd7], %r128;
	setp.gt.u32 	%p8, %r121, 65535;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L133
	ld.param.u32 	%r122, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p9, %r122, %r121;
	setp.gt.s32 	%p10, %r122, 131071;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L140
	sub.s32 	%r129, %r122, %r121;
	and.b32  	%r130, %r129, 127;
	setp.eq.s32 	%p12, %r130, 0;
	@%p12 bra 	$L__BB0_20;
	bra.uni 	$L__BB0_7;
$L__BB0_20:                             // %pass120
	ld.param.u64 	%rd3, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	shl.b32 	%r131, %r3, 2;
	shl.b32 	%r132, %r2, 4;
	shr.u32 	%r116, %r1, 3;
	or.b32  	%r117, %r131, %r116;
	or.b32  	%r133, %r117, %r132;
	mul.wide.u32 	%rd38, %r133, 4;
	add.s64 	%rd39, %rd3, %rd38;
	ld.global.u32 	%r134, [%rd39];
	add.s32 	%r119, %r134, -5;
	setp.lt.u32 	%p13, %r119, 31;
	@%p13 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_21;
$L__BB0_8:                              // %L463
	ld.param.u64 	%rd1, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	ld.param.u64 	%rd6, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	add.s32 	%r118, %r134, -4;
	or.b32  	%r136, %r1, %r3;
	setp.ne.s32 	%p1, %r136, 0;
	mul.wide.u32 	%rd42, %r2, 4;
	add.s64 	%rd8, %rd6, %rd42;
	mov.u32 	%r2397, 0;
	@%p1 bra 	$L__BB0_10;
// %bb.9:                               // %L487
	st.global.u32 	[%rd8], %r2397;
$L__BB0_10:                             // %L533
	ld.param.u64 	%rd2, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	ld.param.u64 	%rd4, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	bar.sync 	0;
	shl.b32 	%r651, %r3, 7;
	shl.b32 	%r652, %r1, 5;
	and.b32  	%r653, %r652, 96;
	or.b32  	%r654, %r653, %r651;
	shl.b32 	%r655, %r2, 13;
	shl.b32 	%r656, %r1, 7;
	and.b32  	%r657, %r656, 3584;
	or.b32  	%r658, %r655, %r657;
	or.b32  	%r659, %r658, %r654;
	mul.wide.u32 	%rd43, %r659, 4;
	add.s64 	%rd44, %rd1, %rd43;
	ld.global.u32 	%r143, [%rd44];
	or.b32  	%r660, %r659, 4096;
	mul.wide.u32 	%rd45, %r660, 4;
	add.s64 	%rd46, %rd1, %rd45;
	ld.global.u32 	%r151, [%rd46];
	ld.global.u32 	%r144, [%rd44+4];
	or.b32  	%r661, %r659, 4097;
	mul.wide.u32 	%rd47, %r661, 4;
	add.s64 	%rd48, %rd1, %rd47;
	ld.global.u32 	%r152, [%rd48];
	ld.global.u32 	%r159, [%rd44+8];
	or.b32  	%r662, %r659, 4098;
	mul.wide.u32 	%rd49, %r662, 4;
	add.s64 	%rd50, %rd1, %rd49;
	ld.global.u32 	%r167, [%rd50];
	ld.global.u32 	%r160, [%rd44+12];
	or.b32  	%r663, %r659, 4099;
	mul.wide.u32 	%rd51, %r663, 4;
	add.s64 	%rd52, %rd1, %rd51;
	ld.global.u32 	%r168, [%rd52];
	ld.global.u32 	%r175, [%rd44+16];
	or.b32  	%r664, %r659, 4100;
	mul.wide.u32 	%rd53, %r664, 4;
	add.s64 	%rd54, %rd1, %rd53;
	ld.global.u32 	%r183, [%rd54];
	ld.global.u32 	%r176, [%rd44+20];
	or.b32  	%r665, %r659, 4101;
	mul.wide.u32 	%rd55, %r665, 4;
	add.s64 	%rd56, %rd1, %rd55;
	ld.global.u32 	%r184, [%rd56];
	ld.global.u32 	%r191, [%rd44+24];
	or.b32  	%r666, %r659, 4102;
	mul.wide.u32 	%rd57, %r666, 4;
	add.s64 	%rd58, %rd1, %rd57;
	ld.global.u32 	%r199, [%rd58];
	ld.global.u32 	%r192, [%rd44+28];
	or.b32  	%r667, %r659, 4103;
	mul.wide.u32 	%rd59, %r667, 4;
	add.s64 	%rd60, %rd1, %rd59;
	ld.global.u32 	%r200, [%rd60];
	ld.global.u32 	%r207, [%rd44+32];
	or.b32  	%r668, %r659, 4104;
	mul.wide.u32 	%rd61, %r668, 4;
	add.s64 	%rd62, %rd1, %rd61;
	ld.global.u32 	%r215, [%rd62];
	ld.global.u32 	%r208, [%rd44+36];
	or.b32  	%r669, %r659, 4105;
	mul.wide.u32 	%rd63, %r669, 4;
	add.s64 	%rd64, %rd1, %rd63;
	ld.global.u32 	%r216, [%rd64];
	ld.global.u32 	%r223, [%rd44+40];
	or.b32  	%r670, %r659, 4106;
	mul.wide.u32 	%rd65, %r670, 4;
	add.s64 	%rd66, %rd1, %rd65;
	ld.global.u32 	%r231, [%rd66];
	ld.global.u32 	%r224, [%rd44+44];
	or.b32  	%r671, %r659, 4107;
	mul.wide.u32 	%rd67, %r671, 4;
	add.s64 	%rd68, %rd1, %rd67;
	ld.global.u32 	%r232, [%rd68];
	ld.global.u32 	%r239, [%rd44+48];
	or.b32  	%r672, %r659, 4108;
	mul.wide.u32 	%rd69, %r672, 4;
	add.s64 	%rd70, %rd1, %rd69;
	ld.global.u32 	%r247, [%rd70];
	ld.global.u32 	%r240, [%rd44+52];
	or.b32  	%r673, %r659, 4109;
	mul.wide.u32 	%rd71, %r673, 4;
	add.s64 	%rd72, %rd1, %rd71;
	ld.global.u32 	%r248, [%rd72];
	ld.global.u32 	%r255, [%rd44+56];
	or.b32  	%r674, %r659, 4110;
	mul.wide.u32 	%rd73, %r674, 4;
	add.s64 	%rd74, %rd1, %rd73;
	ld.global.u32 	%r263, [%rd74];
	ld.global.u32 	%r256, [%rd44+60];
	or.b32  	%r675, %r659, 4111;
	mul.wide.u32 	%rd75, %r675, 4;
	add.s64 	%rd76, %rd1, %rd75;
	ld.global.u32 	%r264, [%rd76];
	ld.global.u32 	%r271, [%rd44+64];
	or.b32  	%r676, %r659, 4112;
	mul.wide.u32 	%rd77, %r676, 4;
	add.s64 	%rd78, %rd1, %rd77;
	ld.global.u32 	%r279, [%rd78];
	ld.global.u32 	%r272, [%rd44+68];
	or.b32  	%r677, %r659, 4113;
	mul.wide.u32 	%rd79, %r677, 4;
	add.s64 	%rd80, %rd1, %rd79;
	ld.global.u32 	%r280, [%rd80];
	ld.global.u32 	%r287, [%rd44+72];
	or.b32  	%r678, %r659, 4114;
	mul.wide.u32 	%rd81, %r678, 4;
	add.s64 	%rd82, %rd1, %rd81;
	ld.global.u32 	%r295, [%rd82];
	ld.global.u32 	%r288, [%rd44+76];
	or.b32  	%r679, %r659, 4115;
	mul.wide.u32 	%rd83, %r679, 4;
	add.s64 	%rd84, %rd1, %rd83;
	ld.global.u32 	%r296, [%rd84];
	ld.global.u32 	%r303, [%rd44+80];
	or.b32  	%r680, %r659, 4116;
	mul.wide.u32 	%rd85, %r680, 4;
	add.s64 	%rd86, %rd1, %rd85;
	ld.global.u32 	%r311, [%rd86];
	ld.global.u32 	%r304, [%rd44+84];
	or.b32  	%r681, %r659, 4117;
	mul.wide.u32 	%rd87, %r681, 4;
	add.s64 	%rd88, %rd1, %rd87;
	ld.global.u32 	%r312, [%rd88];
	ld.global.u32 	%r319, [%rd44+88];
	or.b32  	%r682, %r659, 4118;
	mul.wide.u32 	%rd89, %r682, 4;
	add.s64 	%rd90, %rd1, %rd89;
	ld.global.u32 	%r327, [%rd90];
	ld.global.u32 	%r320, [%rd44+92];
	or.b32  	%r683, %r659, 4119;
	mul.wide.u32 	%rd91, %r683, 4;
	add.s64 	%rd92, %rd1, %rd91;
	ld.global.u32 	%r328, [%rd92];
	ld.global.u32 	%r335, [%rd44+96];
	or.b32  	%r684, %r659, 4120;
	mul.wide.u32 	%rd93, %r684, 4;
	add.s64 	%rd94, %rd1, %rd93;
	ld.global.u32 	%r343, [%rd94];
	ld.global.u32 	%r336, [%rd44+100];
	or.b32  	%r685, %r659, 4121;
	mul.wide.u32 	%rd95, %r685, 4;
	add.s64 	%rd96, %rd1, %rd95;
	ld.global.u32 	%r344, [%rd96];
	ld.global.u32 	%r351, [%rd44+104];
	or.b32  	%r686, %r659, 4122;
	mul.wide.u32 	%rd97, %r686, 4;
	add.s64 	%rd98, %rd1, %rd97;
	ld.global.u32 	%r359, [%rd98];
	ld.global.u32 	%r352, [%rd44+108];
	or.b32  	%r687, %r659, 4123;
	mul.wide.u32 	%rd99, %r687, 4;
	add.s64 	%rd100, %rd1, %rd99;
	ld.global.u32 	%r360, [%rd100];
	ld.global.u32 	%r367, [%rd44+112];
	or.b32  	%r688, %r659, 4124;
	mul.wide.u32 	%rd101, %r688, 4;
	add.s64 	%rd102, %rd1, %rd101;
	ld.global.u32 	%r375, [%rd102];
	ld.global.u32 	%r368, [%rd44+116];
	or.b32  	%r689, %r659, 4125;
	mul.wide.u32 	%rd103, %r689, 4;
	add.s64 	%rd104, %rd1, %rd103;
	ld.global.u32 	%r376, [%rd104];
	ld.global.u32 	%r383, [%rd44+120];
	or.b32  	%r690, %r659, 4126;
	mul.wide.u32 	%rd105, %r690, 4;
	add.s64 	%rd106, %rd1, %rd105;
	ld.global.u32 	%r391, [%rd106];
	ld.global.u32 	%r384, [%rd44+124];
	or.b32  	%r691, %r659, 4127;
	mul.wide.u32 	%rd107, %r691, 4;
	add.s64 	%rd108, %rd1, %rd107;
	ld.global.u32 	%r392, [%rd108];
	mov.u32 	%r141, 21520;
	// begin inline asm
	prmt.b32 %r395, %r143, %r144, %r141;
	// end inline asm
	mov.u32 	%r145, 30258;
	// begin inline asm
	prmt.b32 %r396, %r143, %r144, %r145;
	// end inline asm
	// begin inline asm
	prmt.b32 %r403, %r151, %r152, %r141;
	// end inline asm
	// begin inline asm
	prmt.b32 %r404, %r151, %r152, %r145;
	// end inline asm
	// begin inline asm
	prmt.b32 %r411, %r159, %r160, %r141;
	// end inline asm
	// begin inline asm
	prmt.b32 %r412, %r159, %r160, %r145;
	// end inline asm
	// begin inline asm
	prmt.b32 %r419, %r167, %r168, %r141;
	// end inline asm
	// begin inline asm
	prmt.b32 %r420, %r167, %r168, %r145;
	// end inline asm
	// begin inline asm
	prmt.b32 %r427, %r175, %r176, %r141;
	// end inline asm
	// begin inline asm
	prmt.b32 %r428, %r175, %r176, %r145;
	// end inline asm
	// begin inline asm
	prmt.b32 %r435, %r183, %r184, %r141;
	// end inline asm
	// begin inline asm
	prmt.b32 %r436, %r183, %r184, %r145;
	// end inline asm
	// begin inline asm
	prmt.b32 %r443, %r191, %r192, %r141;
	// end inline asm
	// begin inline asm
	prmt.b32 %r444, %r191, %r192, %r145;
	// end inline asm
	// begin inline asm
	prmt.b32 %r451, %r199, %r200, %r141;
	// end inline asm
	// begin inline asm
	prmt.b32 %r452, %r199, %r200, %r145;
	// end inline asm
	// begin inline asm
	prmt.b32 %r459, %r207, %r208, %r141;
	// end inline asm
	// begin inline asm
	prmt.b32 %r460, %r207, %r208, %r145;
	// end inline asm
	// begin inline asm
	prmt.b32 %r467, %r215, %r216, %r141;
	// end inline asm
	// begin inline asm
	prmt.b32 %r468, %r215, %r216, %r145;
	// end inline asm
	// begin inline asm
	prmt.b32 %r475, %r223, %r224, %r141;
	// end inline asm
	// begin inline asm
	prmt.b32 %r476, %r223, %r224, %r145;
	// end inline asm
	// begin inline asm
	prmt.b32 %r483, %r231, %r232, %r141;
	// end inline asm
	// begin inline asm
	prmt.b32 %r484, %r231, %r232, %r145;
	// end inline asm
	// begin inline asm
	prmt.b32 %r491, %r239, %r240, %r141;
	// end inline asm
	// begin inline asm
	prmt.b32 %r492, %r239, %r240, %r145;
	// end inline asm
	// begin inline asm
	prmt.b32 %r499, %r247, %r248, %r141;
	// end inline asm
	// begin inline asm
	prmt.b32 %r500, %r247, %r248, %r145;
	// end inline asm
	// begin inline asm
	prmt.b32 %r507, %r255, %r256, %r141;
	// end inline asm
	// begin inline asm
	prmt.b32 %r508, %r255, %r256, %r145;
	// end inline asm
	// begin inline asm
	prmt.b32 %r515, %r263, %r264, %r141;
	// end inline asm
	// begin inline asm
	prmt.b32 %r516, %r263, %r264, %r145;
	// end inline asm
	// begin inline asm
	prmt.b32 %r523, %r271, %r272, %r141;
	// end inline asm
	// begin inline asm
	prmt.b32 %r524, %r271, %r272, %r145;
	// end inline asm
	// begin inline asm
	prmt.b32 %r531, %r279, %r280, %r141;
	// end inline asm
	// begin inline asm
	prmt.b32 %r532, %r279, %r280, %r145;
	// end inline asm
	// begin inline asm
	prmt.b32 %r539, %r287, %r288, %r141;
	// end inline asm
	// begin inline asm
	prmt.b32 %r540, %r287, %r288, %r145;
	// end inline asm
	// begin inline asm
	prmt.b32 %r547, %r295, %r296, %r141;
	// end inline asm
	// begin inline asm
	prmt.b32 %r548, %r295, %r296, %r145;
	// end inline asm
	// begin inline asm
	prmt.b32 %r555, %r303, %r304, %r141;
	// end inline asm
	// begin inline asm
	prmt.b32 %r556, %r303, %r304, %r145;
	// end inline asm
	// begin inline asm
	prmt.b32 %r563, %r311, %r312, %r141;
	// end inline asm
	// begin inline asm
	prmt.b32 %r564, %r311, %r312, %r145;
	// end inline asm
	// begin inline asm
	prmt.b32 %r571, %r319, %r320, %r141;
	// end inline asm
	// begin inline asm
	prmt.b32 %r572, %r319, %r320, %r145;
	// end inline asm
	// begin inline asm
	prmt.b32 %r579, %r327, %r328, %r141;
	// end inline asm
	// begin inline asm
	prmt.b32 %r580, %r327, %r328, %r145;
	// end inline asm
	// begin inline asm
	prmt.b32 %r587, %r335, %r336, %r141;
	// end inline asm
	// begin inline asm
	prmt.b32 %r588, %r335, %r336, %r145;
	// end inline asm
	// begin inline asm
	prmt.b32 %r595, %r343, %r344, %r141;
	// end inline asm
	// begin inline asm
	prmt.b32 %r596, %r343, %r344, %r145;
	// end inline asm
	// begin inline asm
	prmt.b32 %r603, %r351, %r352, %r141;
	// end inline asm
	// begin inline asm
	prmt.b32 %r604, %r351, %r352, %r145;
	// end inline asm
	// begin inline asm
	prmt.b32 %r611, %r359, %r360, %r141;
	// end inline asm
	// begin inline asm
	prmt.b32 %r612, %r359, %r360, %r145;
	// end inline asm
	// begin inline asm
	prmt.b32 %r619, %r367, %r368, %r141;
	// end inline asm
	// begin inline asm
	prmt.b32 %r620, %r367, %r368, %r145;
	// end inline asm
	// begin inline asm
	prmt.b32 %r627, %r375, %r376, %r141;
	// end inline asm
	// begin inline asm
	prmt.b32 %r628, %r375, %r376, %r145;
	// end inline asm
	// begin inline asm
	prmt.b32 %r635, %r383, %r384, %r141;
	// end inline asm
	// begin inline asm
	prmt.b32 %r636, %r383, %r384, %r145;
	// end inline asm
	// begin inline asm
	prmt.b32 %r643, %r391, %r392, %r141;
	// end inline asm
	// begin inline asm
	prmt.b32 %r644, %r391, %r392, %r145;
	// end inline asm
	mov.u32 	%r397, 25152;
	// begin inline asm
	prmt.b32 %r1084, %r395, %r396, %r397;
	// end inline asm
	mov.u32 	%r401, 29521;
	// begin inline asm
	prmt.b32 %r1090, %r395, %r396, %r401;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1602, %r403, %r404, %r397;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1608, %r403, %r404, %r401;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1116, %r411, %r412, %r397;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1122, %r411, %r412, %r401;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1634, %r419, %r420, %r397;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1640, %r419, %r420, %r401;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1148, %r427, %r428, %r397;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1154, %r427, %r428, %r401;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1666, %r435, %r436, %r397;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1672, %r435, %r436, %r401;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1180, %r443, %r444, %r397;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1186, %r443, %r444, %r401;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1698, %r451, %r452, %r397;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1704, %r451, %r452, %r401;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1212, %r459, %r460, %r397;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1218, %r459, %r460, %r401;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1730, %r467, %r468, %r397;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1736, %r467, %r468, %r401;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1244, %r475, %r476, %r397;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1250, %r475, %r476, %r401;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1762, %r483, %r484, %r397;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1768, %r483, %r484, %r401;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1276, %r491, %r492, %r397;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1282, %r491, %r492, %r401;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1794, %r499, %r500, %r397;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1800, %r499, %r500, %r401;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1308, %r507, %r508, %r397;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1314, %r507, %r508, %r401;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1826, %r515, %r516, %r397;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1832, %r515, %r516, %r401;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1340, %r523, %r524, %r397;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1346, %r523, %r524, %r401;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1858, %r531, %r532, %r397;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1864, %r531, %r532, %r401;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1372, %r539, %r540, %r397;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1378, %r539, %r540, %r401;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1890, %r547, %r548, %r397;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1896, %r547, %r548, %r401;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1404, %r555, %r556, %r397;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1410, %r555, %r556, %r401;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1922, %r563, %r564, %r397;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1928, %r563, %r564, %r401;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1436, %r571, %r572, %r397;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1442, %r571, %r572, %r401;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1954, %r579, %r580, %r397;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1960, %r579, %r580, %r401;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1468, %r587, %r588, %r397;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1474, %r587, %r588, %r401;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1986, %r595, %r596, %r397;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1992, %r595, %r596, %r401;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1500, %r603, %r604, %r397;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1506, %r603, %r604, %r401;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2018, %r611, %r612, %r397;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2024, %r611, %r612, %r401;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1532, %r619, %r620, %r397;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1538, %r619, %r620, %r401;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2050, %r627, %r628, %r397;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2056, %r627, %r628, %r401;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1564, %r635, %r636, %r397;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1570, %r635, %r636, %r401;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2082, %r643, %r644, %r397;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2088, %r643, %r644, %r401;
	// end inline asm
	shl.b32 	%r69, %r121, 13;
	shl.b32 	%r692, %r1, 2;
	and.b32  	%r693, %r692, 28;
	or.b32  	%r694, %r693, %r4;
	shl.b32 	%r695, %r2, 8;
	or.b32  	%r70, %r695, %r694;
	or.b32  	%r71, %r70, 128;
	or.b32  	%r72, %r694, 128;
	or.b32  	%r73, %r694, 129;
	or.b32  	%r74, %r694, 130;
	or.b32  	%r75, %r694, 131;
	shl.b32 	%r696, %r3, 6;
	shl.b32 	%r697, %r1, 4;
	and.b32  	%r698, %r697, 48;
	or.b32  	%r76, %r698, %r696;
	shr.u32 	%r77, %r1, 2;
	shl.b32 	%r699, %r1, 1;
	and.b32  	%r78, %r699, 6;
	mul.lo.s32 	%r700, %r3, 640;
	or.b32  	%r79, %r77, %r700;
	or.b32  	%r80, %r79, 8;
	and.b32  	%r701, %r1, 7;
	or.b32  	%r702, %r117, 640;
	or.b32  	%r703, %r117, 1280;
	or.b32  	%r704, %r117, 1920;
	shl.b32 	%r706, %r128, %r119;
	setp.gt.u32 	%p15, %r119, 31;
	selp.b32 	%r81, 0, %r706, %p15;
	min.u32 	%r82, %r118, 31;
	and.b32  	%r83, %r1, 1;
	and.b32  	%r84, %r1, 2;
	and.b32  	%r85, %r1, 4;
	shl.b32 	%r707, %r1, 3;
	and.b32  	%r708, %r707, 32;
	and.b32  	%r86, %r652, 64;
	shl.b32 	%r709, %r2, 14;
	shl.b32 	%r710, %r3, 21;
	shl.b32 	%r711, %r1, 16;
	and.b32  	%r712, %r711, 1572864;
	or.b32  	%r713, %r712, %r710;
	or.b32  	%r87, %r713, %r709;
	mul.lo.s32 	%r714, %r116, 257;
	add.s32 	%r715, %r694, %r714;
	mul.wide.u32 	%rd109, %r715, 4;
	mov.u64 	%rd110, shmem;
	add.s64 	%rd9, %rd110, %rd109;
	cvt.u64.u32 	%rd111, %r714;
	cvt.u64.u32 	%rd10, %r694;
	add.s64 	%rd112, %rd10, %rd111;
	shl.b64 	%rd113, %rd112, 2;
	add.s64 	%rd11, %rd110, %rd113;
	add.s32 	%r716, %r714, %r72;
	mul.wide.u32 	%rd114, %r716, 4;
	add.s64 	%rd12, %rd110, %rd114;
	add.s32 	%r717, %r714, %r73;
	mul.wide.u32 	%rd115, %r717, 4;
	add.s64 	%rd13, %rd110, %rd115;
	add.s32 	%r718, %r714, %r74;
	mul.wide.u32 	%rd116, %r718, 4;
	add.s64 	%rd14, %rd110, %rd116;
	add.s32 	%r719, %r714, %r75;
	mul.wide.u32 	%rd117, %r719, 4;
	add.s64 	%rd15, %rd110, %rd117;
	mul.lo.s32 	%r720, %r701, 20;
	add.s32 	%r721, %r720, %r117;
	mul.wide.u32 	%rd118, %r721, 4;
	add.s64 	%rd119, %rd110, 32896;
	add.s64 	%rd16, %rd119, %rd118;
	add.s32 	%r722, %r702, %r720;
	mul.wide.u32 	%rd120, %r722, 4;
	add.s64 	%rd17, %rd119, %rd120;
	add.s32 	%r723, %r703, %r720;
	mul.wide.u32 	%rd121, %r723, 4;
	add.s64 	%rd18, %rd119, %rd121;
	add.s32 	%r724, %r704, %r720;
	mul.wide.u32 	%rd122, %r724, 4;
	add.s64 	%rd19, %rd119, %rd122;
	add.s32 	%r725, %r720, 160;
	add.s32 	%r726, %r725, %r117;
	mul.wide.u32 	%rd123, %r726, 4;
	add.s64 	%rd20, %rd119, %rd123;
	add.s32 	%r727, %r702, %r725;
	mul.wide.u32 	%rd124, %r727, 4;
	add.s64 	%rd21, %rd119, %rd124;
	add.s32 	%r728, %r703, %r725;
	mul.wide.u32 	%rd125, %r728, 4;
	add.s64 	%rd22, %rd119, %rd125;
	add.s32 	%r729, %r704, %r725;
	mul.wide.u32 	%rd126, %r729, 4;
	add.s64 	%rd23, %rd119, %rd126;
	add.s32 	%r730, %r720, 320;
	add.s32 	%r731, %r730, %r117;
	mul.wide.u32 	%rd127, %r731, 4;
	add.s64 	%rd24, %rd119, %rd127;
	add.s32 	%r732, %r702, %r730;
	mul.wide.u32 	%rd128, %r732, 4;
	add.s64 	%rd25, %rd119, %rd128;
	add.s32 	%r733, %r703, %r730;
	mul.wide.u32 	%rd129, %r733, 4;
	add.s64 	%rd26, %rd119, %rd129;
	add.s32 	%r734, %r704, %r730;
	mul.wide.u32 	%rd130, %r734, 4;
	add.s64 	%rd27, %rd119, %rd130;
	or.b32  	%r735, %r1, 24;
	mul.lo.s32 	%r736, %r735, 20;
	add.s32 	%r737, %r736, %r117;
	mul.wide.u32 	%rd131, %r737, 4;
	add.s64 	%rd28, %rd119, %rd131;
	add.s32 	%r738, %r702, %r736;
	mul.wide.u32 	%rd132, %r738, 4;
	add.s64 	%rd29, %rd119, %rd132;
	add.s32 	%r739, %r703, %r736;
	mul.wide.u32 	%rd133, %r739, 4;
	add.s64 	%rd30, %rd119, %rd133;
	add.s32 	%r740, %r704, %r736;
	mul.wide.u32 	%rd134, %r740, 4;
	add.s64 	%rd31, %rd119, %rd134;
	and.b32  	%r741, %r697, 16;
	or.b32  	%r88, %r741, %r708;
	mov.pred 	%p69, 0;
$L__BB0_11:                             // %L9943
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_13 Depth 2
                                        //       Child Loop BB0_14 Depth 3
	add.s32 	%r742, %r2397, %r121;
	setp.ge.s32 	%p16, %r742, %r122;
	@%p16 bra 	$L__BB0_17;
// %bb.12:                              // %L9951.preheader
                                        //   in Loop: Header=BB0_11 Depth=1
	or.b32  	%r90, %r2397, 4;
	or.b32  	%r91, %r2397, 8;
	or.b32  	%r92, %r2397, 12;
	or.b32  	%r93, %r2397, 16;
	or.b32  	%r94, %r2397, 20;
	or.b32  	%r95, %r2397, 24;
	or.b32  	%r96, %r2397, 28;
	mov.u32 	%r1086, 0;
	mov.u32 	%r2398, %r1086;
	mov.u32 	%r2399, %r1086;
	mov.u32 	%r2400, %r1086;
	mov.u32 	%r2401, %r1086;
	mov.u32 	%r2402, %r1086;
	mov.u32 	%r2403, %r1086;
	mov.u32 	%r2404, %r1086;
$L__BB0_13:                             // %L9951
                                        //   Parent Loop BB0_11 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_14 Depth 3
	cvt.u32.u64 	%r745, %rd10;
	add.s32 	%r104, %r2398, %r2397;
	or.b32  	%r746, %r104, %r116;
	shl.b32 	%r747, %r746, 13;
	and.b32  	%r748, %r747, 536633344;
	or.b32  	%r749, %r70, %r748;
	add.s32 	%r750, %r749, %r69;
	shr.s32 	%r751, %r750, 31;
	shr.u32 	%r752, %r751, 3;
	add.s32 	%r753, %r750, %r752;
	shr.s32 	%r754, %r753, 29;
	setp.lt.s32 	%p17, %r750, 0;
	and.b32  	%r755, %r753, -536870912;
	setp.ne.s32 	%p18, %r755, %r750;
	and.pred  	%p19, %p17, %p18;
	selp.u32 	%r756, 1, 0, %p19;
	sub.s32 	%r757, %r756, %r754;
	shl.b32 	%r758, %r757, 29;
	or.b32  	%r759, %r750, 1;
	add.s32 	%r760, %r759, %r758;
	mul.wide.s32 	%rd135, %r760, 4;
	add.s64 	%rd136, %rd2, %rd135;
	ld.global.v4.u32 	{%r761, %r762, %r763, %r764}, [%rd136+-4];
	or.b32  	%r765, %r71, %r748;
	add.s32 	%r766, %r765, %r69;
	shr.s32 	%r767, %r766, 31;
	shr.u32 	%r768, %r767, 3;
	add.s32 	%r769, %r766, %r768;
	shr.u32 	%r770, %r769, 29;
	shr.u32 	%r771, %r766, 31;
	sub.s32 	%r772, %r771, %r770;
	shl.b32 	%r773, %r772, 29;
	or.b32  	%r774, %r766, 1;
	add.s32 	%r775, %r774, %r773;
	mul.wide.s32 	%rd137, %r775, 4;
	add.s64 	%rd138, %rd2, %rd137;
	ld.global.v4.u32 	{%r776, %r777, %r778, %r779}, [%rd138+-4];
	add.s32 	%r780, %r90, %r2398;
	or.b32  	%r781, %r780, %r116;
	shl.b32 	%r782, %r781, 13;
	and.b32  	%r783, %r782, 536666112;
	or.b32  	%r784, %r70, %r783;
	add.s32 	%r785, %r784, %r69;
	shr.s32 	%r786, %r785, 31;
	shr.u32 	%r787, %r786, 3;
	add.s32 	%r788, %r785, %r787;
	shr.s32 	%r789, %r788, 29;
	setp.lt.s32 	%p20, %r785, 0;
	and.b32  	%r790, %r788, -536870912;
	setp.ne.s32 	%p21, %r790, %r785;
	and.pred  	%p22, %p20, %p21;
	selp.u32 	%r791, 1, 0, %p22;
	sub.s32 	%r792, %r791, %r789;
	shl.b32 	%r793, %r792, 29;
	or.b32  	%r794, %r785, 1;
	add.s32 	%r795, %r794, %r793;
	mul.wide.s32 	%rd139, %r795, 4;
	add.s64 	%rd140, %rd2, %rd139;
	ld.global.v4.u32 	{%r796, %r797, %r798, %r799}, [%rd140+-4];
	or.b32  	%r800, %r71, %r783;
	add.s32 	%r801, %r800, %r69;
	shr.s32 	%r802, %r801, 31;
	shr.u32 	%r803, %r802, 3;
	add.s32 	%r804, %r801, %r803;
	shr.u32 	%r805, %r804, 29;
	shr.u32 	%r806, %r801, 31;
	sub.s32 	%r807, %r806, %r805;
	shl.b32 	%r808, %r807, 29;
	or.b32  	%r809, %r801, 1;
	add.s32 	%r810, %r809, %r808;
	mul.wide.s32 	%rd141, %r810, 4;
	add.s64 	%rd142, %rd2, %rd141;
	ld.global.v4.u32 	{%r811, %r812, %r813, %r814}, [%rd142+-4];
	add.s32 	%r815, %r91, %r2398;
	or.b32  	%r816, %r815, %r116;
	shl.b32 	%r817, %r816, 13;
	and.b32  	%r818, %r817, 536698880;
	or.b32  	%r819, %r70, %r818;
	add.s32 	%r820, %r819, %r69;
	shr.s32 	%r821, %r820, 31;
	shr.u32 	%r822, %r821, 3;
	add.s32 	%r823, %r820, %r822;
	shr.s32 	%r824, %r823, 29;
	setp.lt.s32 	%p23, %r820, 0;
	and.b32  	%r825, %r823, -536870912;
	setp.ne.s32 	%p24, %r825, %r820;
	and.pred  	%p25, %p23, %p24;
	selp.u32 	%r826, 1, 0, %p25;
	sub.s32 	%r827, %r826, %r824;
	shl.b32 	%r828, %r827, 29;
	or.b32  	%r829, %r820, 1;
	add.s32 	%r830, %r829, %r828;
	mul.wide.s32 	%rd143, %r830, 4;
	add.s64 	%rd144, %rd2, %rd143;
	ld.global.v4.u32 	{%r831, %r832, %r833, %r834}, [%rd144+-4];
	or.b32  	%r835, %r71, %r818;
	add.s32 	%r836, %r835, %r69;
	shr.s32 	%r837, %r836, 31;
	shr.u32 	%r838, %r837, 3;
	add.s32 	%r839, %r836, %r838;
	shr.u32 	%r840, %r839, 29;
	shr.u32 	%r841, %r836, 31;
	sub.s32 	%r842, %r841, %r840;
	shl.b32 	%r843, %r842, 29;
	or.b32  	%r844, %r836, 1;
	add.s32 	%r845, %r844, %r843;
	mul.wide.s32 	%rd145, %r845, 4;
	add.s64 	%rd146, %rd2, %rd145;
	ld.global.v4.u32 	{%r846, %r847, %r848, %r849}, [%rd146+-4];
	add.s32 	%r850, %r92, %r2398;
	or.b32  	%r851, %r850, %r116;
	shl.b32 	%r852, %r851, 13;
	and.b32  	%r853, %r852, 536731648;
	or.b32  	%r854, %r70, %r853;
	add.s32 	%r855, %r854, %r69;
	shr.s32 	%r856, %r855, 31;
	shr.u32 	%r857, %r856, 3;
	add.s32 	%r858, %r855, %r857;
	shr.s32 	%r859, %r858, 29;
	setp.lt.s32 	%p26, %r855, 0;
	and.b32  	%r860, %r858, -536870912;
	setp.ne.s32 	%p27, %r860, %r855;
	and.pred  	%p28, %p26, %p27;
	selp.u32 	%r861, 1, 0, %p28;
	sub.s32 	%r862, %r861, %r859;
	shl.b32 	%r863, %r862, 29;
	or.b32  	%r864, %r855, 1;
	add.s32 	%r865, %r864, %r863;
	mul.wide.s32 	%rd147, %r865, 4;
	add.s64 	%rd148, %rd2, %rd147;
	ld.global.v4.u32 	{%r866, %r867, %r868, %r869}, [%rd148+-4];
	or.b32  	%r870, %r71, %r853;
	add.s32 	%r871, %r870, %r69;
	shr.s32 	%r872, %r871, 31;
	shr.u32 	%r873, %r872, 3;
	add.s32 	%r874, %r871, %r873;
	shr.u32 	%r875, %r874, 29;
	shr.u32 	%r876, %r871, 31;
	sub.s32 	%r877, %r876, %r875;
	shl.b32 	%r878, %r877, 29;
	or.b32  	%r879, %r871, 1;
	add.s32 	%r880, %r879, %r878;
	mul.wide.s32 	%rd149, %r880, 4;
	add.s64 	%rd150, %rd2, %rd149;
	ld.global.v4.u32 	{%r881, %r882, %r883, %r884}, [%rd150+-4];
	add.s32 	%r885, %r93, %r2398;
	or.b32  	%r886, %r885, %r116;
	shl.b32 	%r887, %r886, 13;
	and.b32  	%r888, %r887, 536764416;
	or.b32  	%r889, %r70, %r888;
	add.s32 	%r890, %r889, %r69;
	shr.s32 	%r891, %r890, 31;
	shr.u32 	%r892, %r891, 3;
	add.s32 	%r893, %r890, %r892;
	shr.s32 	%r894, %r893, 29;
	setp.lt.s32 	%p29, %r890, 0;
	and.b32  	%r895, %r893, -536870912;
	setp.ne.s32 	%p30, %r895, %r890;
	and.pred  	%p31, %p29, %p30;
	selp.u32 	%r896, 1, 0, %p31;
	sub.s32 	%r897, %r896, %r894;
	shl.b32 	%r898, %r897, 29;
	or.b32  	%r899, %r890, 1;
	add.s32 	%r900, %r899, %r898;
	mul.wide.s32 	%rd151, %r900, 4;
	add.s64 	%rd152, %rd2, %rd151;
	ld.global.v4.u32 	{%r901, %r902, %r903, %r904}, [%rd152+-4];
	or.b32  	%r905, %r71, %r888;
	add.s32 	%r906, %r905, %r69;
	shr.s32 	%r907, %r906, 31;
	shr.u32 	%r908, %r907, 3;
	add.s32 	%r909, %r906, %r908;
	shr.u32 	%r910, %r909, 29;
	shr.u32 	%r911, %r906, 31;
	sub.s32 	%r912, %r911, %r910;
	shl.b32 	%r913, %r912, 29;
	or.b32  	%r914, %r906, 1;
	add.s32 	%r915, %r914, %r913;
	mul.wide.s32 	%rd153, %r915, 4;
	add.s64 	%rd154, %rd2, %rd153;
	ld.global.v4.u32 	{%r916, %r917, %r918, %r919}, [%rd154+-4];
	add.s32 	%r920, %r94, %r2398;
	or.b32  	%r921, %r920, %r116;
	shl.b32 	%r922, %r921, 13;
	and.b32  	%r923, %r922, 536797184;
	or.b32  	%r924, %r70, %r923;
	add.s32 	%r925, %r924, %r69;
	shr.s32 	%r926, %r925, 31;
	shr.u32 	%r927, %r926, 3;
	add.s32 	%r928, %r925, %r927;
	shr.s32 	%r929, %r928, 29;
	setp.lt.s32 	%p32, %r925, 0;
	and.b32  	%r930, %r928, -536870912;
	setp.ne.s32 	%p33, %r930, %r925;
	and.pred  	%p34, %p32, %p33;
	selp.u32 	%r931, 1, 0, %p34;
	sub.s32 	%r932, %r931, %r929;
	shl.b32 	%r933, %r932, 29;
	or.b32  	%r934, %r925, 1;
	add.s32 	%r935, %r934, %r933;
	mul.wide.s32 	%rd155, %r935, 4;
	add.s64 	%rd156, %rd2, %rd155;
	ld.global.v4.u32 	{%r936, %r937, %r938, %r939}, [%rd156+-4];
	or.b32  	%r940, %r71, %r923;
	add.s32 	%r941, %r940, %r69;
	shr.s32 	%r942, %r941, 31;
	shr.u32 	%r943, %r942, 3;
	add.s32 	%r944, %r941, %r943;
	shr.u32 	%r945, %r944, 29;
	shr.u32 	%r946, %r941, 31;
	sub.s32 	%r947, %r946, %r945;
	shl.b32 	%r948, %r947, 29;
	or.b32  	%r949, %r941, 1;
	add.s32 	%r950, %r949, %r948;
	mul.wide.s32 	%rd157, %r950, 4;
	add.s64 	%rd158, %rd2, %rd157;
	ld.global.v4.u32 	{%r951, %r952, %r953, %r954}, [%rd158+-4];
	add.s32 	%r955, %r95, %r2398;
	or.b32  	%r956, %r955, %r116;
	shl.b32 	%r957, %r956, 13;
	and.b32  	%r958, %r957, 536829952;
	or.b32  	%r959, %r70, %r958;
	add.s32 	%r960, %r959, %r69;
	shr.s32 	%r961, %r960, 31;
	shr.u32 	%r962, %r961, 3;
	add.s32 	%r963, %r960, %r962;
	shr.s32 	%r964, %r963, 29;
	setp.lt.s32 	%p35, %r960, 0;
	and.b32  	%r965, %r963, -536870912;
	setp.ne.s32 	%p36, %r965, %r960;
	and.pred  	%p37, %p35, %p36;
	selp.u32 	%r966, 1, 0, %p37;
	sub.s32 	%r967, %r966, %r964;
	shl.b32 	%r968, %r967, 29;
	or.b32  	%r969, %r960, 1;
	add.s32 	%r970, %r969, %r968;
	mul.wide.s32 	%rd159, %r970, 4;
	add.s64 	%rd160, %rd2, %rd159;
	ld.global.v4.u32 	{%r971, %r972, %r973, %r974}, [%rd160+-4];
	or.b32  	%r975, %r71, %r958;
	add.s32 	%r976, %r975, %r69;
	shr.s32 	%r977, %r976, 31;
	shr.u32 	%r978, %r977, 3;
	add.s32 	%r979, %r976, %r978;
	shr.u32 	%r980, %r979, 29;
	shr.u32 	%r981, %r976, 31;
	sub.s32 	%r982, %r981, %r980;
	shl.b32 	%r983, %r982, 29;
	or.b32  	%r984, %r976, 1;
	add.s32 	%r985, %r984, %r983;
	mul.wide.s32 	%rd161, %r985, 4;
	add.s64 	%rd162, %rd2, %rd161;
	ld.global.v4.u32 	{%r986, %r987, %r988, %r989}, [%rd162+-4];
	add.s32 	%r990, %r96, %r2398;
	or.b32  	%r991, %r990, %r116;
	shl.b32 	%r992, %r991, 13;
	and.b32  	%r993, %r992, 536862720;
	or.b32  	%r994, %r70, %r993;
	add.s32 	%r995, %r994, %r69;
	shr.s32 	%r996, %r995, 31;
	shr.u32 	%r997, %r996, 3;
	add.s32 	%r998, %r995, %r997;
	shr.s32 	%r999, %r998, 29;
	setp.lt.s32 	%p38, %r995, 0;
	and.b32  	%r1000, %r998, -536870912;
	setp.ne.s32 	%p39, %r1000, %r995;
	and.pred  	%p40, %p38, %p39;
	selp.u32 	%r1001, 1, 0, %p40;
	sub.s32 	%r1002, %r1001, %r999;
	shl.b32 	%r1003, %r1002, 29;
	or.b32  	%r1004, %r995, 1;
	add.s32 	%r1005, %r1004, %r1003;
	mul.wide.s32 	%rd163, %r1005, 4;
	add.s64 	%rd164, %rd2, %rd163;
	ld.global.v4.u32 	{%r1006, %r1007, %r1008, %r1009}, [%rd164+-4];
	or.b32  	%r1010, %r71, %r993;
	add.s32 	%r1011, %r1010, %r69;
	shr.s32 	%r1012, %r1011, 31;
	shr.u32 	%r1013, %r1012, 3;
	add.s32 	%r1014, %r1011, %r1013;
	shr.u32 	%r1015, %r1014, 29;
	shr.u32 	%r1016, %r1011, 31;
	sub.s32 	%r1017, %r1016, %r1015;
	shl.b32 	%r1018, %r1017, 29;
	or.b32  	%r1019, %r1011, 1;
	add.s32 	%r1020, %r1019, %r1018;
	mul.wide.s32 	%rd165, %r1020, 4;
	add.s64 	%rd166, %rd2, %rd165;
	ld.global.v4.u32 	{%r1021, %r1022, %r1023, %r1024}, [%rd166+-4];
	st.shared.u32 	[%rd9], %r761;
	st.shared.u32 	[%rd11+4], %r762;
	st.shared.u32 	[%rd11+8], %r763;
	st.shared.u32 	[%rd11+12], %r764;
	st.shared.u32 	[%rd12], %r776;
	st.shared.u32 	[%rd13], %r777;
	st.shared.u32 	[%rd14], %r778;
	st.shared.u32 	[%rd15], %r779;
	and.b32  	%r1025, %r781, 7;
	mul.lo.s32 	%r1026, %r1025, 257;
	add.s32 	%r1027, %r745, %r1026;
	mul.wide.u32 	%rd167, %r1027, 4;
	add.s64 	%rd169, %rd110, %rd167;
	st.shared.u32 	[%rd169], %r796;
	cvt.u64.u32 	%rd170, %r1026;
	add.s64 	%rd171, %rd10, %rd170;
	shl.b64 	%rd172, %rd171, 2;
	add.s64 	%rd173, %rd110, %rd172;
	st.shared.u32 	[%rd173+4], %r797;
	st.shared.u32 	[%rd173+8], %r798;
	st.shared.u32 	[%rd173+12], %r799;
	add.s32 	%r1028, %r1026, %r72;
	mul.wide.u32 	%rd174, %r1028, 4;
	add.s64 	%rd175, %rd110, %rd174;
	st.shared.u32 	[%rd175], %r811;
	add.s32 	%r1029, %r1026, %r73;
	mul.wide.u32 	%rd176, %r1029, 4;
	add.s64 	%rd177, %rd110, %rd176;
	st.shared.u32 	[%rd177], %r812;
	add.s32 	%r1030, %r1026, %r74;
	mul.wide.u32 	%rd178, %r1030, 4;
	add.s64 	%rd179, %rd110, %rd178;
	st.shared.u32 	[%rd179], %r813;
	add.s32 	%r1031, %r1026, %r75;
	mul.wide.u32 	%rd180, %r1031, 4;
	add.s64 	%rd181, %rd110, %rd180;
	st.shared.u32 	[%rd181], %r814;
	and.b32  	%r1032, %r816, 11;
	mul.lo.s32 	%r1033, %r1032, 257;
	add.s32 	%r1034, %r745, %r1033;
	mul.wide.u32 	%rd182, %r1034, 4;
	add.s64 	%rd183, %rd110, %rd182;
	st.shared.u32 	[%rd183], %r831;
	cvt.u64.u32 	%rd184, %r1033;
	add.s64 	%rd185, %rd10, %rd184;
	shl.b64 	%rd186, %rd185, 2;
	add.s64 	%rd187, %rd110, %rd186;
	st.shared.u32 	[%rd187+4], %r832;
	st.shared.u32 	[%rd187+8], %r833;
	st.shared.u32 	[%rd187+12], %r834;
	add.s32 	%r1035, %r1033, %r72;
	mul.wide.u32 	%rd188, %r1035, 4;
	add.s64 	%rd189, %rd110, %rd188;
	st.shared.u32 	[%rd189], %r846;
	add.s32 	%r1036, %r1033, %r73;
	mul.wide.u32 	%rd190, %r1036, 4;
	add.s64 	%rd191, %rd110, %rd190;
	st.shared.u32 	[%rd191], %r847;
	add.s32 	%r1037, %r1033, %r74;
	mul.wide.u32 	%rd192, %r1037, 4;
	add.s64 	%rd193, %rd110, %rd192;
	st.shared.u32 	[%rd193], %r848;
	add.s32 	%r1038, %r1033, %r75;
	mul.wide.u32 	%rd194, %r1038, 4;
	add.s64 	%rd195, %rd110, %rd194;
	st.shared.u32 	[%rd195], %r849;
	and.b32  	%r1039, %r851, 15;
	mul.lo.s32 	%r1040, %r1039, 257;
	add.s32 	%r1041, %r745, %r1040;
	mul.wide.u32 	%rd196, %r1041, 4;
	add.s64 	%rd197, %rd110, %rd196;
	st.shared.u32 	[%rd197], %r866;
	cvt.u64.u32 	%rd198, %r1040;
	add.s64 	%rd199, %rd10, %rd198;
	shl.b64 	%rd200, %rd199, 2;
	add.s64 	%rd201, %rd110, %rd200;
	st.shared.u32 	[%rd201+4], %r867;
	st.shared.u32 	[%rd201+8], %r868;
	st.shared.u32 	[%rd201+12], %r869;
	add.s32 	%r1042, %r1040, %r72;
	mul.wide.u32 	%rd202, %r1042, 4;
	add.s64 	%rd203, %rd110, %rd202;
	st.shared.u32 	[%rd203], %r881;
	add.s32 	%r1043, %r1040, %r73;
	mul.wide.u32 	%rd204, %r1043, 4;
	add.s64 	%rd205, %rd110, %rd204;
	st.shared.u32 	[%rd205], %r882;
	add.s32 	%r1044, %r1040, %r74;
	mul.wide.u32 	%rd206, %r1044, 4;
	add.s64 	%rd207, %rd110, %rd206;
	st.shared.u32 	[%rd207], %r883;
	add.s32 	%r1045, %r1040, %r75;
	mul.wide.u32 	%rd208, %r1045, 4;
	add.s64 	%rd209, %rd110, %rd208;
	st.shared.u32 	[%rd209], %r884;
	and.b32  	%r1046, %r886, 19;
	mul.lo.s32 	%r1047, %r1046, 257;
	add.s32 	%r1048, %r745, %r1047;
	mul.wide.u32 	%rd210, %r1048, 4;
	add.s64 	%rd211, %rd110, %rd210;
	st.shared.u32 	[%rd211], %r901;
	cvt.u64.u32 	%rd212, %r1047;
	add.s64 	%rd213, %rd10, %rd212;
	shl.b64 	%rd214, %rd213, 2;
	add.s64 	%rd215, %rd110, %rd214;
	st.shared.u32 	[%rd215+4], %r902;
	st.shared.u32 	[%rd215+8], %r903;
	st.shared.u32 	[%rd215+12], %r904;
	add.s32 	%r1049, %r1047, %r72;
	mul.wide.u32 	%rd216, %r1049, 4;
	add.s64 	%rd217, %rd110, %rd216;
	st.shared.u32 	[%rd217], %r916;
	add.s32 	%r1050, %r1047, %r73;
	mul.wide.u32 	%rd218, %r1050, 4;
	add.s64 	%rd219, %rd110, %rd218;
	st.shared.u32 	[%rd219], %r917;
	add.s32 	%r1051, %r1047, %r74;
	mul.wide.u32 	%rd220, %r1051, 4;
	add.s64 	%rd221, %rd110, %rd220;
	st.shared.u32 	[%rd221], %r918;
	add.s32 	%r1052, %r1047, %r75;
	mul.wide.u32 	%rd222, %r1052, 4;
	add.s64 	%rd223, %rd110, %rd222;
	st.shared.u32 	[%rd223], %r919;
	and.b32  	%r1053, %r921, 23;
	mul.lo.s32 	%r1054, %r1053, 257;
	add.s32 	%r1055, %r745, %r1054;
	mul.wide.u32 	%rd224, %r1055, 4;
	add.s64 	%rd225, %rd110, %rd224;
	st.shared.u32 	[%rd225], %r936;
	cvt.u64.u32 	%rd226, %r1054;
	add.s64 	%rd227, %rd10, %rd226;
	shl.b64 	%rd228, %rd227, 2;
	add.s64 	%rd229, %rd110, %rd228;
	st.shared.u32 	[%rd229+4], %r937;
	st.shared.u32 	[%rd229+8], %r938;
	st.shared.u32 	[%rd229+12], %r939;
	add.s32 	%r1056, %r1054, %r72;
	mul.wide.u32 	%rd230, %r1056, 4;
	add.s64 	%rd231, %rd110, %rd230;
	st.shared.u32 	[%rd231], %r951;
	add.s32 	%r1057, %r1054, %r73;
	mul.wide.u32 	%rd232, %r1057, 4;
	add.s64 	%rd233, %rd110, %rd232;
	st.shared.u32 	[%rd233], %r952;
	add.s32 	%r1058, %r1054, %r74;
	mul.wide.u32 	%rd234, %r1058, 4;
	add.s64 	%rd235, %rd110, %rd234;
	st.shared.u32 	[%rd235], %r953;
	add.s32 	%r1059, %r1054, %r75;
	mul.wide.u32 	%rd236, %r1059, 4;
	add.s64 	%rd237, %rd110, %rd236;
	st.shared.u32 	[%rd237], %r954;
	and.b32  	%r1060, %r956, 27;
	mul.lo.s32 	%r1061, %r1060, 257;
	add.s32 	%r1062, %r745, %r1061;
	mul.wide.u32 	%rd238, %r1062, 4;
	add.s64 	%rd239, %rd110, %rd238;
	st.shared.u32 	[%rd239], %r971;
	cvt.u64.u32 	%rd240, %r1061;
	add.s64 	%rd241, %rd10, %rd240;
	shl.b64 	%rd242, %rd241, 2;
	add.s64 	%rd243, %rd110, %rd242;
	st.shared.u32 	[%rd243+4], %r972;
	st.shared.u32 	[%rd243+8], %r973;
	st.shared.u32 	[%rd243+12], %r974;
	add.s32 	%r1063, %r1061, %r72;
	mul.wide.u32 	%rd244, %r1063, 4;
	add.s64 	%rd245, %rd110, %rd244;
	st.shared.u32 	[%rd245], %r986;
	add.s32 	%r1064, %r1061, %r73;
	mul.wide.u32 	%rd246, %r1064, 4;
	add.s64 	%rd247, %rd110, %rd246;
	st.shared.u32 	[%rd247], %r987;
	add.s32 	%r1065, %r1061, %r74;
	mul.wide.u32 	%rd248, %r1065, 4;
	add.s64 	%rd249, %rd110, %rd248;
	st.shared.u32 	[%rd249], %r988;
	add.s32 	%r1066, %r1061, %r75;
	mul.wide.u32 	%rd250, %r1066, 4;
	add.s64 	%rd251, %rd110, %rd250;
	st.shared.u32 	[%rd251], %r989;
	and.b32  	%r1067, %r991, 31;
	mul.lo.s32 	%r1068, %r1067, 257;
	add.s32 	%r1069, %r745, %r1068;
	mul.wide.u32 	%rd252, %r1069, 4;
	add.s64 	%rd253, %rd110, %rd252;
	st.shared.u32 	[%rd253], %r1006;
	cvt.u64.u32 	%rd254, %r1068;
	add.s64 	%rd255, %rd10, %rd254;
	shl.b64 	%rd256, %rd255, 2;
	add.s64 	%rd257, %rd110, %rd256;
	st.shared.u32 	[%rd257+4], %r1007;
	st.shared.u32 	[%rd257+8], %r1008;
	st.shared.u32 	[%rd257+12], %r1009;
	add.s32 	%r1070, %r1068, %r72;
	mul.wide.u32 	%rd258, %r1070, 4;
	add.s64 	%rd259, %rd110, %rd258;
	st.shared.u32 	[%rd259], %r1021;
	add.s32 	%r1071, %r1068, %r73;
	mul.wide.u32 	%rd260, %r1071, 4;
	add.s64 	%rd261, %rd110, %rd260;
	st.shared.u32 	[%rd261], %r1022;
	add.s32 	%r1072, %r1068, %r74;
	mul.wide.u32 	%rd262, %r1072, 4;
	add.s64 	%rd263, %rd110, %rd262;
	st.shared.u32 	[%rd263], %r1023;
	add.s32 	%r1073, %r1068, %r75;
	mul.wide.u32 	%rd264, %r1073, 4;
	add.s64 	%rd265, %rd110, %rd264;
	st.shared.u32 	[%rd265], %r1024;
	bar.sync 	0;
	mov.u32 	%r2405, %r1086;
$L__BB0_14:                             // %L21862
                                        //   Parent Loop BB0_11 Depth=1
                                        //     Parent Loop BB0_13 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r2110, %r2405, %r77;
	add.s32 	%r2111, %r104, %r2110;
	shr.s32 	%r2112, %r2111, 31;
	shr.u32 	%r2113, %r2112, 27;
	add.s32 	%r2114, %r2111, %r2113;
	and.b32  	%r2115, %r2114, -32;
	sub.s32 	%r2116, %r2111, %r2115;
	mad.lo.s32 	%r2117, %r2116, 257, %r76;
	mul.wide.s32 	%rd266, %r2117, 4;
	add.s64 	%rd268, %rd110, %rd266;
	ld.shared.u32 	%r1075, [%rd268];
	mov.u32 	%r1076, 134744072;
	mov.u32 	%r1077, 252645135;
	// begin inline asm
	lop3.b32 %r1074, %r1075, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2118, %r1074, 2021161080;
	xor.b32  	%r1085, %r2118, -2139062144;
	shr.u32 	%r1079, %r1075, 4;
	// begin inline asm
	lop3.b32 %r1078, %r1079, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2119, %r1078, 2021161080;
	xor.b32  	%r1091, %r2119, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1082, %r1083}, {%r1084}, {%r1085}, {%r1086, %r1086};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1088, %r1089}, {%r1090}, {%r1091}, {%r1086, %r1086};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1094, %r1095}, {%r1084}, {%r1091}, {%r1086, %r1086};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1100, %r1101}, {%r1090}, {%r1085}, {%r1094, %r1095};
	// end inline asm
	ld.shared.u32 	%r1107, [%rd268+4];
	// begin inline asm
	lop3.b32 %r1106, %r1107, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2120, %r1106, 2021161080;
	xor.b32  	%r1117, %r2120, -2139062144;
	shr.u32 	%r1111, %r1107, 4;
	// begin inline asm
	lop3.b32 %r1110, %r1111, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2121, %r1110, 2021161080;
	xor.b32  	%r1123, %r2121, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1114, %r1115}, {%r1116}, {%r1117}, {%r1082, %r1083};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1120, %r1121}, {%r1122}, {%r1123}, {%r1088, %r1089};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1126, %r1127}, {%r1116}, {%r1123}, {%r1100, %r1101};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1132, %r1133}, {%r1122}, {%r1117}, {%r1126, %r1127};
	// end inline asm
	ld.shared.u32 	%r1139, [%rd268+8];
	// begin inline asm
	lop3.b32 %r1138, %r1139, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2122, %r1138, 2021161080;
	xor.b32  	%r1149, %r2122, -2139062144;
	shr.u32 	%r1143, %r1139, 4;
	// begin inline asm
	lop3.b32 %r1142, %r1143, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2123, %r1142, 2021161080;
	xor.b32  	%r1155, %r2123, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1146, %r1147}, {%r1148}, {%r1149}, {%r1114, %r1115};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1152, %r1153}, {%r1154}, {%r1155}, {%r1120, %r1121};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1158, %r1159}, {%r1148}, {%r1155}, {%r1132, %r1133};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1164, %r1165}, {%r1154}, {%r1149}, {%r1158, %r1159};
	// end inline asm
	ld.shared.u32 	%r1171, [%rd268+12];
	// begin inline asm
	lop3.b32 %r1170, %r1171, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2124, %r1170, 2021161080;
	xor.b32  	%r1181, %r2124, -2139062144;
	shr.u32 	%r1175, %r1171, 4;
	// begin inline asm
	lop3.b32 %r1174, %r1175, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2125, %r1174, 2021161080;
	xor.b32  	%r1187, %r2125, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1178, %r1179}, {%r1180}, {%r1181}, {%r1146, %r1147};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1184, %r1185}, {%r1186}, {%r1187}, {%r1152, %r1153};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1190, %r1191}, {%r1180}, {%r1187}, {%r1164, %r1165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1196, %r1197}, {%r1186}, {%r1181}, {%r1190, %r1191};
	// end inline asm
	ld.shared.u32 	%r1203, [%rd268+16];
	// begin inline asm
	lop3.b32 %r1202, %r1203, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2126, %r1202, 2021161080;
	xor.b32  	%r1213, %r2126, -2139062144;
	shr.u32 	%r1207, %r1203, 4;
	// begin inline asm
	lop3.b32 %r1206, %r1207, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2127, %r1206, 2021161080;
	xor.b32  	%r1219, %r2127, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1210, %r1211}, {%r1212}, {%r1213}, {%r1178, %r1179};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1216, %r1217}, {%r1218}, {%r1219}, {%r1184, %r1185};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1222, %r1223}, {%r1212}, {%r1219}, {%r1196, %r1197};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1228, %r1229}, {%r1218}, {%r1213}, {%r1222, %r1223};
	// end inline asm
	ld.shared.u32 	%r1235, [%rd268+20];
	// begin inline asm
	lop3.b32 %r1234, %r1235, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2128, %r1234, 2021161080;
	xor.b32  	%r1245, %r2128, -2139062144;
	shr.u32 	%r1239, %r1235, 4;
	// begin inline asm
	lop3.b32 %r1238, %r1239, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2129, %r1238, 2021161080;
	xor.b32  	%r1251, %r2129, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1242, %r1243}, {%r1244}, {%r1245}, {%r1210, %r1211};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1248, %r1249}, {%r1250}, {%r1251}, {%r1216, %r1217};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1254, %r1255}, {%r1244}, {%r1251}, {%r1228, %r1229};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1260, %r1261}, {%r1250}, {%r1245}, {%r1254, %r1255};
	// end inline asm
	ld.shared.u32 	%r1267, [%rd268+24];
	// begin inline asm
	lop3.b32 %r1266, %r1267, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2130, %r1266, 2021161080;
	xor.b32  	%r1277, %r2130, -2139062144;
	shr.u32 	%r1271, %r1267, 4;
	// begin inline asm
	lop3.b32 %r1270, %r1271, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2131, %r1270, 2021161080;
	xor.b32  	%r1283, %r2131, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1274, %r1275}, {%r1276}, {%r1277}, {%r1242, %r1243};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1280, %r1281}, {%r1282}, {%r1283}, {%r1248, %r1249};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1286, %r1287}, {%r1276}, {%r1283}, {%r1260, %r1261};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1292, %r1293}, {%r1282}, {%r1277}, {%r1286, %r1287};
	// end inline asm
	ld.shared.u32 	%r1299, [%rd268+28];
	// begin inline asm
	lop3.b32 %r1298, %r1299, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2132, %r1298, 2021161080;
	xor.b32  	%r1309, %r2132, -2139062144;
	shr.u32 	%r1303, %r1299, 4;
	// begin inline asm
	lop3.b32 %r1302, %r1303, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2133, %r1302, 2021161080;
	xor.b32  	%r1315, %r2133, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1306, %r1307}, {%r1308}, {%r1309}, {%r1274, %r1275};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1312, %r1313}, {%r1314}, {%r1315}, {%r1280, %r1281};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1318, %r1319}, {%r1308}, {%r1315}, {%r1292, %r1293};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1324, %r1325}, {%r1314}, {%r1309}, {%r1318, %r1319};
	// end inline asm
	ld.shared.u32 	%r1331, [%rd268+32];
	// begin inline asm
	lop3.b32 %r1330, %r1331, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2134, %r1330, 2021161080;
	xor.b32  	%r1341, %r2134, -2139062144;
	shr.u32 	%r1335, %r1331, 4;
	// begin inline asm
	lop3.b32 %r1334, %r1335, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2135, %r1334, 2021161080;
	xor.b32  	%r1347, %r2135, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1338, %r1339}, {%r1340}, {%r1341}, {%r1306, %r1307};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1344, %r1345}, {%r1346}, {%r1347}, {%r1312, %r1313};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1350, %r1351}, {%r1340}, {%r1347}, {%r1324, %r1325};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1356, %r1357}, {%r1346}, {%r1341}, {%r1350, %r1351};
	// end inline asm
	ld.shared.u32 	%r1363, [%rd268+36];
	// begin inline asm
	lop3.b32 %r1362, %r1363, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2136, %r1362, 2021161080;
	xor.b32  	%r1373, %r2136, -2139062144;
	shr.u32 	%r1367, %r1363, 4;
	// begin inline asm
	lop3.b32 %r1366, %r1367, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2137, %r1366, 2021161080;
	xor.b32  	%r1379, %r2137, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1370, %r1371}, {%r1372}, {%r1373}, {%r1338, %r1339};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1376, %r1377}, {%r1378}, {%r1379}, {%r1344, %r1345};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1382, %r1383}, {%r1372}, {%r1379}, {%r1356, %r1357};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1388, %r1389}, {%r1378}, {%r1373}, {%r1382, %r1383};
	// end inline asm
	ld.shared.u32 	%r1395, [%rd268+40];
	// begin inline asm
	lop3.b32 %r1394, %r1395, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2138, %r1394, 2021161080;
	xor.b32  	%r1405, %r2138, -2139062144;
	shr.u32 	%r1399, %r1395, 4;
	// begin inline asm
	lop3.b32 %r1398, %r1399, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2139, %r1398, 2021161080;
	xor.b32  	%r1411, %r2139, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1402, %r1403}, {%r1404}, {%r1405}, {%r1370, %r1371};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1408, %r1409}, {%r1410}, {%r1411}, {%r1376, %r1377};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1414, %r1415}, {%r1404}, {%r1411}, {%r1388, %r1389};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1420, %r1421}, {%r1410}, {%r1405}, {%r1414, %r1415};
	// end inline asm
	ld.shared.u32 	%r1427, [%rd268+44];
	// begin inline asm
	lop3.b32 %r1426, %r1427, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2140, %r1426, 2021161080;
	xor.b32  	%r1437, %r2140, -2139062144;
	shr.u32 	%r1431, %r1427, 4;
	// begin inline asm
	lop3.b32 %r1430, %r1431, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2141, %r1430, 2021161080;
	xor.b32  	%r1443, %r2141, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1434, %r1435}, {%r1436}, {%r1437}, {%r1402, %r1403};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1440, %r1441}, {%r1442}, {%r1443}, {%r1408, %r1409};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1446, %r1447}, {%r1436}, {%r1443}, {%r1420, %r1421};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1452, %r1453}, {%r1442}, {%r1437}, {%r1446, %r1447};
	// end inline asm
	ld.shared.u32 	%r1459, [%rd268+48];
	// begin inline asm
	lop3.b32 %r1458, %r1459, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2142, %r1458, 2021161080;
	xor.b32  	%r1469, %r2142, -2139062144;
	shr.u32 	%r1463, %r1459, 4;
	// begin inline asm
	lop3.b32 %r1462, %r1463, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2143, %r1462, 2021161080;
	xor.b32  	%r1475, %r2143, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1466, %r1467}, {%r1468}, {%r1469}, {%r1434, %r1435};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1472, %r1473}, {%r1474}, {%r1475}, {%r1440, %r1441};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1478, %r1479}, {%r1468}, {%r1475}, {%r1452, %r1453};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1484, %r1485}, {%r1474}, {%r1469}, {%r1478, %r1479};
	// end inline asm
	ld.shared.u32 	%r1491, [%rd268+52];
	// begin inline asm
	lop3.b32 %r1490, %r1491, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2144, %r1490, 2021161080;
	xor.b32  	%r1501, %r2144, -2139062144;
	shr.u32 	%r1495, %r1491, 4;
	// begin inline asm
	lop3.b32 %r1494, %r1495, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2145, %r1494, 2021161080;
	xor.b32  	%r1507, %r2145, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1498, %r1499}, {%r1500}, {%r1501}, {%r1466, %r1467};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1504, %r1505}, {%r1506}, {%r1507}, {%r1472, %r1473};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1510, %r1511}, {%r1500}, {%r1507}, {%r1484, %r1485};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1516, %r1517}, {%r1506}, {%r1501}, {%r1510, %r1511};
	// end inline asm
	ld.shared.u32 	%r1523, [%rd268+56];
	// begin inline asm
	lop3.b32 %r1522, %r1523, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2146, %r1522, 2021161080;
	xor.b32  	%r1533, %r2146, -2139062144;
	shr.u32 	%r1527, %r1523, 4;
	// begin inline asm
	lop3.b32 %r1526, %r1527, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2147, %r1526, 2021161080;
	xor.b32  	%r1539, %r2147, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1530, %r1531}, {%r1532}, {%r1533}, {%r1498, %r1499};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1536, %r1537}, {%r1538}, {%r1539}, {%r1504, %r1505};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1542, %r1543}, {%r1532}, {%r1539}, {%r1516, %r1517};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1548, %r1549}, {%r1538}, {%r1533}, {%r1542, %r1543};
	// end inline asm
	ld.shared.u32 	%r1555, [%rd268+60];
	// begin inline asm
	lop3.b32 %r1554, %r1555, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2148, %r1554, 2021161080;
	xor.b32  	%r1565, %r2148, -2139062144;
	shr.u32 	%r1559, %r1555, 4;
	// begin inline asm
	lop3.b32 %r1558, %r1559, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2149, %r1558, 2021161080;
	xor.b32  	%r1571, %r2149, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1562, %r1563}, {%r1564}, {%r1565}, {%r1530, %r1531};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1568, %r1569}, {%r1570}, {%r1571}, {%r1536, %r1537};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1574, %r1575}, {%r1564}, {%r1571}, {%r1548, %r1549};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1580, %r1581}, {%r1570}, {%r1565}, {%r1574, %r1575};
	// end inline asm
	sub.s32 	%r2150, %r1562, %r1568;
	add.s32 	%r2151, %r2150, 8;
	shr.s32 	%r1588, %r2151, 4;
	add.s32 	%r2152, %r1580, 8;
	shr.s32 	%r1587, %r2152, 4;
	sub.s32 	%r2153, %r1563, %r1569;
	add.s32 	%r2154, %r2153, 8;
	shr.s32 	%r1591, %r2154, 4;
	add.s32 	%r2155, %r1581, 8;
	shr.s32 	%r1590, %r2155, 4;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1586, %r1587, %r1588;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1589, %r1590, %r1591;
	// end inline asm
	or.b32  	%r2156, %r78, %r2405;
	mul.lo.s32 	%r2157, %r2156, 20;
	add.s32 	%r2158, %r79, %r2157;
	mul.wide.u32 	%rd269, %r2158, 4;
	add.s64 	%rd271, %rd119, %rd269;
	st.shared.u32 	[%rd271], %r1586;
	add.s32 	%r2159, %r2157, 20;
	add.s32 	%r2160, %r79, %r2159;
	mul.wide.u32 	%rd272, %r2160, 4;
	add.s64 	%rd273, %rd119, %rd272;
	st.shared.u32 	[%rd273], %r1589;
	ld.shared.u32 	%r1593, [%rd268];
	// begin inline asm
	lop3.b32 %r1592, %r1593, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2161, %r1592, 2021161080;
	xor.b32  	%r1603, %r2161, -2139062144;
	shr.u32 	%r1597, %r1593, 4;
	// begin inline asm
	lop3.b32 %r1596, %r1597, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2162, %r1596, 2021161080;
	xor.b32  	%r1609, %r2162, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1600, %r1601}, {%r1602}, {%r1603}, {%r1086, %r1086};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1606, %r1607}, {%r1608}, {%r1609}, {%r1086, %r1086};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1612, %r1613}, {%r1602}, {%r1609}, {%r1086, %r1086};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1618, %r1619}, {%r1608}, {%r1603}, {%r1612, %r1613};
	// end inline asm
	ld.shared.u32 	%r1625, [%rd268+4];
	// begin inline asm
	lop3.b32 %r1624, %r1625, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2163, %r1624, 2021161080;
	xor.b32  	%r1635, %r2163, -2139062144;
	shr.u32 	%r1629, %r1625, 4;
	// begin inline asm
	lop3.b32 %r1628, %r1629, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2164, %r1628, 2021161080;
	xor.b32  	%r1641, %r2164, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1632, %r1633}, {%r1634}, {%r1635}, {%r1600, %r1601};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1638, %r1639}, {%r1640}, {%r1641}, {%r1606, %r1607};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1644, %r1645}, {%r1634}, {%r1641}, {%r1618, %r1619};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1650, %r1651}, {%r1640}, {%r1635}, {%r1644, %r1645};
	// end inline asm
	ld.shared.u32 	%r1657, [%rd268+8];
	// begin inline asm
	lop3.b32 %r1656, %r1657, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2165, %r1656, 2021161080;
	xor.b32  	%r1667, %r2165, -2139062144;
	shr.u32 	%r1661, %r1657, 4;
	// begin inline asm
	lop3.b32 %r1660, %r1661, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2166, %r1660, 2021161080;
	xor.b32  	%r1673, %r2166, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1664, %r1665}, {%r1666}, {%r1667}, {%r1632, %r1633};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1670, %r1671}, {%r1672}, {%r1673}, {%r1638, %r1639};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1676, %r1677}, {%r1666}, {%r1673}, {%r1650, %r1651};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1682, %r1683}, {%r1672}, {%r1667}, {%r1676, %r1677};
	// end inline asm
	ld.shared.u32 	%r1689, [%rd268+12];
	// begin inline asm
	lop3.b32 %r1688, %r1689, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2167, %r1688, 2021161080;
	xor.b32  	%r1699, %r2167, -2139062144;
	shr.u32 	%r1693, %r1689, 4;
	// begin inline asm
	lop3.b32 %r1692, %r1693, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2168, %r1692, 2021161080;
	xor.b32  	%r1705, %r2168, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1696, %r1697}, {%r1698}, {%r1699}, {%r1664, %r1665};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1702, %r1703}, {%r1704}, {%r1705}, {%r1670, %r1671};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1708, %r1709}, {%r1698}, {%r1705}, {%r1682, %r1683};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1714, %r1715}, {%r1704}, {%r1699}, {%r1708, %r1709};
	// end inline asm
	ld.shared.u32 	%r1721, [%rd268+16];
	// begin inline asm
	lop3.b32 %r1720, %r1721, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2169, %r1720, 2021161080;
	xor.b32  	%r1731, %r2169, -2139062144;
	shr.u32 	%r1725, %r1721, 4;
	// begin inline asm
	lop3.b32 %r1724, %r1725, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2170, %r1724, 2021161080;
	xor.b32  	%r1737, %r2170, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1728, %r1729}, {%r1730}, {%r1731}, {%r1696, %r1697};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1734, %r1735}, {%r1736}, {%r1737}, {%r1702, %r1703};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1740, %r1741}, {%r1730}, {%r1737}, {%r1714, %r1715};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1746, %r1747}, {%r1736}, {%r1731}, {%r1740, %r1741};
	// end inline asm
	ld.shared.u32 	%r1753, [%rd268+20];
	// begin inline asm
	lop3.b32 %r1752, %r1753, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2171, %r1752, 2021161080;
	xor.b32  	%r1763, %r2171, -2139062144;
	shr.u32 	%r1757, %r1753, 4;
	// begin inline asm
	lop3.b32 %r1756, %r1757, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2172, %r1756, 2021161080;
	xor.b32  	%r1769, %r2172, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1760, %r1761}, {%r1762}, {%r1763}, {%r1728, %r1729};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1766, %r1767}, {%r1768}, {%r1769}, {%r1734, %r1735};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1772, %r1773}, {%r1762}, {%r1769}, {%r1746, %r1747};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1778, %r1779}, {%r1768}, {%r1763}, {%r1772, %r1773};
	// end inline asm
	ld.shared.u32 	%r1785, [%rd268+24];
	// begin inline asm
	lop3.b32 %r1784, %r1785, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2173, %r1784, 2021161080;
	xor.b32  	%r1795, %r2173, -2139062144;
	shr.u32 	%r1789, %r1785, 4;
	// begin inline asm
	lop3.b32 %r1788, %r1789, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2174, %r1788, 2021161080;
	xor.b32  	%r1801, %r2174, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1792, %r1793}, {%r1794}, {%r1795}, {%r1760, %r1761};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1798, %r1799}, {%r1800}, {%r1801}, {%r1766, %r1767};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1804, %r1805}, {%r1794}, {%r1801}, {%r1778, %r1779};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1810, %r1811}, {%r1800}, {%r1795}, {%r1804, %r1805};
	// end inline asm
	ld.shared.u32 	%r1817, [%rd268+28];
	// begin inline asm
	lop3.b32 %r1816, %r1817, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2175, %r1816, 2021161080;
	xor.b32  	%r1827, %r2175, -2139062144;
	shr.u32 	%r1821, %r1817, 4;
	// begin inline asm
	lop3.b32 %r1820, %r1821, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2176, %r1820, 2021161080;
	xor.b32  	%r1833, %r2176, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1824, %r1825}, {%r1826}, {%r1827}, {%r1792, %r1793};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1830, %r1831}, {%r1832}, {%r1833}, {%r1798, %r1799};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1836, %r1837}, {%r1826}, {%r1833}, {%r1810, %r1811};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1842, %r1843}, {%r1832}, {%r1827}, {%r1836, %r1837};
	// end inline asm
	ld.shared.u32 	%r1849, [%rd268+32];
	// begin inline asm
	lop3.b32 %r1848, %r1849, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2177, %r1848, 2021161080;
	xor.b32  	%r1859, %r2177, -2139062144;
	shr.u32 	%r1853, %r1849, 4;
	// begin inline asm
	lop3.b32 %r1852, %r1853, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2178, %r1852, 2021161080;
	xor.b32  	%r1865, %r2178, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1856, %r1857}, {%r1858}, {%r1859}, {%r1824, %r1825};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1862, %r1863}, {%r1864}, {%r1865}, {%r1830, %r1831};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1868, %r1869}, {%r1858}, {%r1865}, {%r1842, %r1843};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1874, %r1875}, {%r1864}, {%r1859}, {%r1868, %r1869};
	// end inline asm
	ld.shared.u32 	%r1881, [%rd268+36];
	// begin inline asm
	lop3.b32 %r1880, %r1881, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2179, %r1880, 2021161080;
	xor.b32  	%r1891, %r2179, -2139062144;
	shr.u32 	%r1885, %r1881, 4;
	// begin inline asm
	lop3.b32 %r1884, %r1885, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2180, %r1884, 2021161080;
	xor.b32  	%r1897, %r2180, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1888, %r1889}, {%r1890}, {%r1891}, {%r1856, %r1857};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1894, %r1895}, {%r1896}, {%r1897}, {%r1862, %r1863};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1900, %r1901}, {%r1890}, {%r1897}, {%r1874, %r1875};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1906, %r1907}, {%r1896}, {%r1891}, {%r1900, %r1901};
	// end inline asm
	ld.shared.u32 	%r1913, [%rd268+40];
	// begin inline asm
	lop3.b32 %r1912, %r1913, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2181, %r1912, 2021161080;
	xor.b32  	%r1923, %r2181, -2139062144;
	shr.u32 	%r1917, %r1913, 4;
	// begin inline asm
	lop3.b32 %r1916, %r1917, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2182, %r1916, 2021161080;
	xor.b32  	%r1929, %r2182, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1920, %r1921}, {%r1922}, {%r1923}, {%r1888, %r1889};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1926, %r1927}, {%r1928}, {%r1929}, {%r1894, %r1895};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1932, %r1933}, {%r1922}, {%r1929}, {%r1906, %r1907};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1938, %r1939}, {%r1928}, {%r1923}, {%r1932, %r1933};
	// end inline asm
	ld.shared.u32 	%r1945, [%rd268+44];
	// begin inline asm
	lop3.b32 %r1944, %r1945, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2183, %r1944, 2021161080;
	xor.b32  	%r1955, %r2183, -2139062144;
	shr.u32 	%r1949, %r1945, 4;
	// begin inline asm
	lop3.b32 %r1948, %r1949, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2184, %r1948, 2021161080;
	xor.b32  	%r1961, %r2184, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1952, %r1953}, {%r1954}, {%r1955}, {%r1920, %r1921};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1958, %r1959}, {%r1960}, {%r1961}, {%r1926, %r1927};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1964, %r1965}, {%r1954}, {%r1961}, {%r1938, %r1939};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1970, %r1971}, {%r1960}, {%r1955}, {%r1964, %r1965};
	// end inline asm
	ld.shared.u32 	%r1977, [%rd268+48];
	// begin inline asm
	lop3.b32 %r1976, %r1977, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2185, %r1976, 2021161080;
	xor.b32  	%r1987, %r2185, -2139062144;
	shr.u32 	%r1981, %r1977, 4;
	// begin inline asm
	lop3.b32 %r1980, %r1981, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2186, %r1980, 2021161080;
	xor.b32  	%r1993, %r2186, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1984, %r1985}, {%r1986}, {%r1987}, {%r1952, %r1953};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1990, %r1991}, {%r1992}, {%r1993}, {%r1958, %r1959};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1996, %r1997}, {%r1986}, {%r1993}, {%r1970, %r1971};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r2002, %r2003}, {%r1992}, {%r1987}, {%r1996, %r1997};
	// end inline asm
	ld.shared.u32 	%r2009, [%rd268+52];
	// begin inline asm
	lop3.b32 %r2008, %r2009, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2187, %r2008, 2021161080;
	xor.b32  	%r2019, %r2187, -2139062144;
	shr.u32 	%r2013, %r2009, 4;
	// begin inline asm
	lop3.b32 %r2012, %r2013, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2188, %r2012, 2021161080;
	xor.b32  	%r2025, %r2188, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r2016, %r2017}, {%r2018}, {%r2019}, {%r1984, %r1985};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r2022, %r2023}, {%r2024}, {%r2025}, {%r1990, %r1991};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r2028, %r2029}, {%r2018}, {%r2025}, {%r2002, %r2003};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r2034, %r2035}, {%r2024}, {%r2019}, {%r2028, %r2029};
	// end inline asm
	ld.shared.u32 	%r2041, [%rd268+56];
	// begin inline asm
	lop3.b32 %r2040, %r2041, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2189, %r2040, 2021161080;
	xor.b32  	%r2051, %r2189, -2139062144;
	shr.u32 	%r2045, %r2041, 4;
	// begin inline asm
	lop3.b32 %r2044, %r2045, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2190, %r2044, 2021161080;
	xor.b32  	%r2057, %r2190, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r2048, %r2049}, {%r2050}, {%r2051}, {%r2016, %r2017};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r2054, %r2055}, {%r2056}, {%r2057}, {%r2022, %r2023};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r2060, %r2061}, {%r2050}, {%r2057}, {%r2034, %r2035};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r2066, %r2067}, {%r2056}, {%r2051}, {%r2060, %r2061};
	// end inline asm
	ld.shared.u32 	%r2073, [%rd268+60];
	// begin inline asm
	lop3.b32 %r2072, %r2073, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2191, %r2072, 2021161080;
	xor.b32  	%r2083, %r2191, -2139062144;
	shr.u32 	%r2077, %r2073, 4;
	// begin inline asm
	lop3.b32 %r2076, %r2077, %r1076, %r1077, 40;
	// end inline asm
	add.s32 	%r2192, %r2076, 2021161080;
	xor.b32  	%r2089, %r2192, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r2080, %r2081}, {%r2082}, {%r2083}, {%r2048, %r2049};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r2086, %r2087}, {%r2088}, {%r2089}, {%r2054, %r2055};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r2092, %r2093}, {%r2082}, {%r2089}, {%r2066, %r2067};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r2098, %r2099}, {%r2088}, {%r2083}, {%r2092, %r2093};
	// end inline asm
	sub.s32 	%r2193, %r2080, %r2086;
	add.s32 	%r2194, %r2193, 8;
	shr.s32 	%r2106, %r2194, 4;
	add.s32 	%r2195, %r2098, 8;
	shr.s32 	%r2105, %r2195, 4;
	sub.s32 	%r2196, %r2081, %r2087;
	add.s32 	%r2197, %r2196, 8;
	shr.s32 	%r2109, %r2197, 4;
	add.s32 	%r2198, %r2099, 8;
	shr.s32 	%r2108, %r2198, 4;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r2104, %r2105, %r2106;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r2107, %r2108, %r2109;
	// end inline asm
	add.s32 	%r2199, %r80, %r2157;
	mul.wide.u32 	%rd274, %r2199, 4;
	add.s64 	%rd275, %rd119, %rd274;
	st.shared.u32 	[%rd275], %r2104;
	add.s32 	%r2200, %r80, %r2159;
	mul.wide.u32 	%rd276, %r2200, 4;
	add.s64 	%rd277, %rd119, %rd276;
	st.shared.u32 	[%rd277], %r2107;
	add.s32 	%r2405, %r2405, 8;
	setp.ne.s32 	%p41, %r2405, 32;
	@%p41 bra 	$L__BB0_14;
// %bb.15:                              // %L28463
                                        //   in Loop: Header=BB0_13 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r2219, [%rd16];
	ld.shared.u32 	%r2220, [%rd17];
	ld.shared.u32 	%r2221, [%rd18];
	ld.shared.u32 	%r2222, [%rd19];
	ld.shared.u32 	%r2223, [%rd20];
	ld.shared.u32 	%r2224, [%rd21];
	ld.shared.u32 	%r2225, [%rd22];
	ld.shared.u32 	%r2226, [%rd23];
	ld.shared.u32 	%r2227, [%rd24];
	ld.shared.u32 	%r2228, [%rd25];
	ld.shared.u32 	%r2229, [%rd26];
	ld.shared.u32 	%r2230, [%rd27];
	ld.shared.u32 	%r2231, [%rd28];
	ld.shared.u32 	%r2232, [%rd29];
	ld.shared.u32 	%r2233, [%rd30];
	ld.shared.u32 	%r2234, [%rd31];
	cvt.s32.s16 	%r2235, %r2219;
	shr.s32 	%r2236, %r2219, 16;
	cvt.s32.s16 	%r2237, %r2220;
	shr.s32 	%r2238, %r2220, 16;
	cvt.s32.s16 	%r2239, %r2221;
	shr.s32 	%r2240, %r2221, 16;
	cvt.s32.s16 	%r2241, %r2222;
	shr.s32 	%r2242, %r2222, 16;
	cvt.s32.s16 	%r2243, %r2223;
	shr.s32 	%r2244, %r2223, 16;
	cvt.s32.s16 	%r2245, %r2224;
	shr.s32 	%r2246, %r2224, 16;
	cvt.s32.s16 	%r2247, %r2225;
	shr.s32 	%r2248, %r2225, 16;
	cvt.s32.s16 	%r2249, %r2226;
	shr.s32 	%r2250, %r2226, 16;
	cvt.s32.s16 	%r2251, %r2227;
	shr.s32 	%r2252, %r2227, 16;
	cvt.s32.s16 	%r2253, %r2228;
	shr.s32 	%r2254, %r2228, 16;
	cvt.s32.s16 	%r2255, %r2229;
	shr.s32 	%r2256, %r2229, 16;
	cvt.s32.s16 	%r2257, %r2230;
	shr.s32 	%r2258, %r2230, 16;
	cvt.s32.s16 	%r2259, %r2231;
	shr.s32 	%r2260, %r2231, 16;
	cvt.s32.s16 	%r2261, %r2232;
	shr.s32 	%r2262, %r2232, 16;
	cvt.s32.s16 	%r2263, %r2233;
	shr.s32 	%r2264, %r2233, 16;
	cvt.s32.s16 	%r2265, %r2234;
	shr.s32 	%r2266, %r2234, 16;
	add.s32 	%r2267, %r2235, %r81;
	add.s32 	%r2268, %r2267, %r2237;
	add.s32 	%r2269, %r2268, %r2239;
	add.s32 	%r2270, %r2269, %r2241;
	shr.s32 	%r2271, %r2270, %r82;
	add.s32 	%r2272, %r2236, %r81;
	add.s32 	%r2273, %r2272, %r2238;
	add.s32 	%r2274, %r2273, %r2240;
	add.s32 	%r2275, %r2274, %r2242;
	shr.s32 	%r2276, %r2275, %r82;
	add.s32 	%r2277, %r2243, %r81;
	add.s32 	%r2278, %r2277, %r2245;
	add.s32 	%r2279, %r2278, %r2247;
	add.s32 	%r2280, %r2279, %r2249;
	shr.s32 	%r2281, %r2280, %r82;
	add.s32 	%r2282, %r2244, %r81;
	add.s32 	%r2283, %r2282, %r2246;
	add.s32 	%r2284, %r2283, %r2248;
	add.s32 	%r2285, %r2284, %r2250;
	shr.s32 	%r2286, %r2285, %r82;
	add.s32 	%r2287, %r2251, %r81;
	add.s32 	%r2288, %r2287, %r2253;
	add.s32 	%r2289, %r2288, %r2255;
	add.s32 	%r2290, %r2289, %r2257;
	shr.s32 	%r2291, %r2290, %r82;
	add.s32 	%r2292, %r2252, %r81;
	add.s32 	%r2293, %r2292, %r2254;
	add.s32 	%r2294, %r2293, %r2256;
	add.s32 	%r2295, %r2294, %r2258;
	shr.s32 	%r2296, %r2295, %r82;
	add.s32 	%r2297, %r2259, %r81;
	add.s32 	%r2298, %r2297, %r2261;
	add.s32 	%r2299, %r2298, %r2263;
	add.s32 	%r2300, %r2299, %r2265;
	shr.s32 	%r2301, %r2300, %r82;
	add.s32 	%r2302, %r2260, %r81;
	add.s32 	%r2303, %r2302, %r2262;
	add.s32 	%r2304, %r2303, %r2264;
	add.s32 	%r2305, %r2304, %r2266;
	shr.s32 	%r2306, %r2305, %r82;
	max.s32 	%r2307, %r2271, -7;
	min.s32 	%r2206, %r2307, 7;
	setp.ne.s32 	%p42, %r2206, %r2271;
	or.pred  	%p43, %p69, %p42;
	max.s32 	%r2308, %r2276, -7;
	min.s32 	%r2213, %r2308, 7;
	setp.ne.s32 	%p44, %r2213, %r2276;
	or.pred  	%p45, %p44, %p43;
	max.s32 	%r2309, %r2281, -7;
	min.s32 	%r2205, %r2309, 7;
	setp.ne.s32 	%p46, %r2205, %r2281;
	or.pred  	%p47, %p45, %p46;
	max.s32 	%r2310, %r2286, -7;
	min.s32 	%r2212, %r2310, 7;
	setp.ne.s32 	%p48, %r2212, %r2286;
	or.pred  	%p49, %p48, %p47;
	max.s32 	%r2311, %r2291, -7;
	min.s32 	%r2203, %r2311, 7;
	setp.ne.s32 	%p50, %r2203, %r2291;
	or.pred  	%p51, %p49, %p50;
	max.s32 	%r2312, %r2296, -7;
	min.s32 	%r2210, %r2312, 7;
	setp.ne.s32 	%p52, %r2210, %r2296;
	or.pred  	%p53, %p52, %p51;
	max.s32 	%r2313, %r2301, -7;
	min.s32 	%r2202, %r2313, 7;
	setp.ne.s32 	%p54, %r2202, %r2301;
	or.pred  	%p55, %p53, %p54;
	max.s32 	%r2314, %r2306, -7;
	min.s32 	%r2209, %r2314, 7;
	setp.ne.s32 	%p56, %r2209, %r2306;
	or.pred  	%p69, %p56, %p55;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r2201, %r2202, %r2203, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r2204, %r2205, %r2206, %r2201;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r2208, %r2209, %r2210, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r2211, %r2212, %r2213, %r2208;
	// end inline asm
	shl.b32 	%r2218, %r2211, 4;
	// begin inline asm
	lop3.b32 %r2325, %r1077, %r2204, %r2218, 202;
	// end inline asm
	setp.eq.s32 	%p57, %r2398, 0;
	selp.b32 	%r2403, %r2325, %r2403, %p57;
	selp.b32 	%r2404, %r2325, %r2404, %p57;
	setp.eq.s32 	%p58, %r2398, 32;
	selp.b32 	%r2399, %r2325, %r2399, %p58;
	selp.b32 	%r2400, %r2325, %r2400, %p58;
	setp.eq.s32 	%p59, %r2398, 64;
	selp.b32 	%r2401, %r2325, %r2401, %p59;
	selp.b32 	%r2402, %r2325, %r2402, %p59;
	add.s32 	%r114, %r2398, 32;
	setp.ne.s32 	%p60, %r2398, 96;
	mov.u32 	%r2398, %r114;
	@%p60 bra 	$L__BB0_13;
// %bb.16:                              // %L30869.L30875_crit_edge
                                        //   in Loop: Header=BB0_11 Depth=1
	setp.eq.s32 	%p61, %r85, 0;
	setp.eq.s32 	%p62, %r84, 0;
	setp.eq.s32 	%p63, %r83, 0;
	// begin inline asm
	prmt.b32 %r2315, %r2403, %r2399, %r397;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2319, %r2404, %r2400, %r401;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2323, %r2401, %r2325, %r397;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2327, %r2402, %r2325, %r401;
	// end inline asm
	selp.b32 	%r2363, %r2319, %r2315, %p63;
	shfl.sync.bfly.b32	%r2364, %r2363, 1, 31, -1;
	selp.b32 	%r2332, %r2315, %r2364, %p63;
	selp.b32 	%r2333, %r2364, %r2319, %p63;
	selp.b32 	%r2365, %r2327, %r2323, %p63;
	shfl.sync.bfly.b32	%r2366, %r2365, 1, 31, -1;
	selp.b32 	%r2340, %r2323, %r2366, %p63;
	selp.b32 	%r2341, %r2366, %r2327, %p63;
	// begin inline asm
	prmt.b32 %r2331, %r2332, %r2333, %r397;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2335, %r2332, %r2333, %r401;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2339, %r2340, %r2341, %r397;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2343, %r2340, %r2341, %r401;
	// end inline asm
	selp.b32 	%r2367, %r2339, %r2331, %p62;
	shfl.sync.bfly.b32	%r2368, %r2367, 2, 31, -1;
	selp.b32 	%r2348, %r2331, %r2368, %p62;
	selp.b32 	%r2349, %r2368, %r2339, %p62;
	selp.b32 	%r2369, %r2343, %r2335, %p62;
	shfl.sync.bfly.b32	%r2370, %r2369, 2, 31, -1;
	selp.b32 	%r2356, %r2335, %r2370, %p62;
	selp.b32 	%r2357, %r2370, %r2343, %p62;
	// begin inline asm
	prmt.b32 %r2347, %r2348, %r2349, %r141;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2351, %r2348, %r2349, %r145;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2355, %r2356, %r2357, %r141;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2359, %r2356, %r2357, %r145;
	// end inline asm
	selp.b32 	%r2371, %r2355, %r2347, %p61;
	shfl.sync.bfly.b32	%r2372, %r2371, 4, 31, -1;
	selp.b32 	%r2373, %r2347, %r2372, %p61;
	selp.b32 	%r2374, %r2372, %r2355, %p61;
	selp.b32 	%r2375, %r2359, %r2351, %p61;
	shfl.sync.bfly.b32	%r2376, %r2375, 4, 31, -1;
	selp.b32 	%r2377, %r2351, %r2376, %p61;
	selp.b32 	%r2378, %r2376, %r2359, %p61;
	selp.b32 	%r2379, %r2377, %r2373, %p63;
	shfl.sync.bfly.b32	%r2380, %r2379, 1, 31, -1;
	selp.b32 	%r2381, %r2373, %r2380, %p63;
	selp.b32 	%r2382, %r2380, %r2377, %p63;
	selp.b32 	%r2383, %r2378, %r2374, %p63;
	shfl.sync.bfly.b32	%r2384, %r2383, 1, 31, -1;
	selp.b32 	%r2385, %r2374, %r2384, %p63;
	selp.b32 	%r2386, %r2384, %r2378, %p63;
	and.b32  	%r2387, %r2397, 16256;
	or.b32  	%r2388, %r2387, %r88;
	or.b32  	%r2389, %r2388, %r86;
	or.b32  	%r2390, %r87, %r2389;
	cvt.u64.u32 	%rd278, %r2390;
	add.s64 	%rd279, %rd4, %rd278;
	st.global.v4.u32 	[%rd279], {%r2381, %r2385, %r2382, %r2386};
	add.s32 	%r115, %r2397, 128;
	setp.ne.s32 	%p64, %r2397, 65408;
	mov.u32 	%r2397, %r115;
	@%p64 bra 	$L__BB0_11;
$L__BB0_17:                             // %L31256
	selp.u32 	%r2391, 1, 0, %p69;
	{ 
	.reg .pred 	%p1; 
	.reg .pred 	%p2; 
	setp.ne.u32 	%p1, %r2391, 0; 
	bar.red.or.pred 	%p2, 0, %p1; 
	selp.u32 	%r2392, 1, 0, %p2; 
	}
	setp.eq.s32 	%p65, %r2392, 0;
	or.pred  	%p66, %p65, %p1;
	@%p66 bra 	$L__BB0_19;
// %bb.18:                              // %L31287
	st.global.u32 	[%rd8], %r128;
$L__BB0_19:                             // %L31333
	mov.u32 	%r2394, 0;
	st.global.u32 	[%rd7], %r2394;
	ret;
$L__BB0_7:                              // %L152
	mov.u32 	%r2395, 2;
	st.global.u32 	[%rd7], %r2395;
	mov.u64 	%rd280, exception2743;
	cvta.global.u64 	%rd281, %rd280;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd281;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd32;
	st.param.b32 	[param0+8], %r120;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd33, exception1;
	cvta.global.u64 	%rd34, %rd33;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd34;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd32;
	st.param.b32 	[param0+8], %r120;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L24
	mov.u64 	%rd35, exception1;
	cvta.global.u64 	%rd36, %rd35;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd36;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd32;
	st.param.b32 	[param0+8], %r120;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_21:                             // %L370
	mov.u32 	%r135, 3;
	st.global.u32 	[%rd7], %r135;
	mov.u64 	%rd40, exception2743;
	cvta.global.u64 	%rd41, %rd40;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd41;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd32;
	st.param.b32 	[param0+8], %r120;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
