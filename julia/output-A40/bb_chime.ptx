// PTX kernel code for CUDA baseband beamformer
// This file has been generated automatically by `bb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for bb(::Int32, ::Int32, ::CuDeviceVector{Int8x4, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=128, blocks_per_sm=8

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception2743[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32]
)
.reqntid 128, 1, 1
.minnctapersm 8
{
	.reg .pred 	%p<70>;
	.reg .b32 	%r<2400>;
	.reg .b64 	%rd<282>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r122, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd32, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r125, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p6, %r125, 32895;
	@%p6 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r126, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p7, %r126, 43135;
	@%p7 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L26
	ld.param.u32 	%r123, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	ld.param.u64 	%rd5, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %ctaid.x;
	shl.b32 	%r127, %r3, 7;
	mov.u32 	%r4, %tid.x;
	or.b32  	%r128, %r127, %r4;
	or.b32  	%r129, %r128, %r2;
	mul.wide.u32 	%rd37, %r129, 4;
	add.s64 	%rd7, %rd5, %rd37;
	mov.u32 	%r130, 1;
	st.global.u32 	[%rd7], %r130;
	setp.gt.u32 	%p8, %r123, 65535;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L131
	ld.param.u32 	%r124, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p9, %r124, %r123;
	setp.gt.s32 	%p10, %r124, 131071;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L138
	sub.s32 	%r131, %r124, %r123;
	and.b32  	%r132, %r131, 127;
	setp.eq.s32 	%p12, %r132, 0;
	@%p12 bra 	$L__BB0_20;
	bra.uni 	$L__BB0_7;
$L__BB0_20:                             // %pass120
	ld.param.u64 	%rd3, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	shl.b32 	%r133, %r3, 4;
	shr.u32 	%r118, %r4, 3;
	shl.b32 	%r134, %r1, 2;
	or.b32  	%r119, %r118, %r134;
	or.b32  	%r135, %r119, %r133;
	mul.wide.u32 	%rd38, %r135, 4;
	add.s64 	%rd39, %rd3, %rd38;
	ld.global.u32 	%r136, [%rd39];
	add.s32 	%r121, %r136, -5;
	setp.lt.u32 	%p13, %r121, 31;
	@%p13 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_21;
$L__BB0_8:                              // %L457
	ld.param.u64 	%rd1, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	ld.param.u64 	%rd6, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	add.s32 	%r120, %r136, -4;
	or.b32  	%r138, %r4, %r1;
	setp.ne.s32 	%p1, %r138, 0;
	mul.wide.u32 	%rd42, %r3, 4;
	add.s64 	%rd8, %rd6, %rd42;
	mov.u32 	%r2391, 0;
	@%p1 bra 	$L__BB0_10;
// %bb.9:                               // %L480
	st.global.u32 	[%rd8], %r2391;
$L__BB0_10:                             // %L526
	ld.param.u64 	%rd2, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	ld.param.u64 	%rd4, [_Z2bb5Int32S_13CuDeviceArrayI6Int8x4Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS_Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	bar.sync 	0;
	shl.b32 	%r653, %r1, 7;
	shl.b32 	%r654, %r4, 5;
	and.b32  	%r655, %r654, 96;
	or.b32  	%r656, %r655, %r653;
	shl.b32 	%r657, %r3, 13;
	shl.b32 	%r658, %r4, 7;
	and.b32  	%r659, %r658, 3584;
	or.b32  	%r660, %r659, %r657;
	or.b32  	%r661, %r660, %r656;
	mul.wide.u32 	%rd43, %r661, 4;
	add.s64 	%rd44, %rd1, %rd43;
	ld.global.u32 	%r145, [%rd44];
	or.b32  	%r662, %r661, 4096;
	mul.wide.u32 	%rd45, %r662, 4;
	add.s64 	%rd46, %rd1, %rd45;
	ld.global.u32 	%r153, [%rd46];
	ld.global.u32 	%r146, [%rd44+4];
	or.b32  	%r663, %r661, 4097;
	mul.wide.u32 	%rd47, %r663, 4;
	add.s64 	%rd48, %rd1, %rd47;
	ld.global.u32 	%r154, [%rd48];
	ld.global.u32 	%r161, [%rd44+8];
	or.b32  	%r664, %r661, 4098;
	mul.wide.u32 	%rd49, %r664, 4;
	add.s64 	%rd50, %rd1, %rd49;
	ld.global.u32 	%r169, [%rd50];
	ld.global.u32 	%r162, [%rd44+12];
	or.b32  	%r665, %r661, 4099;
	mul.wide.u32 	%rd51, %r665, 4;
	add.s64 	%rd52, %rd1, %rd51;
	ld.global.u32 	%r170, [%rd52];
	ld.global.u32 	%r177, [%rd44+16];
	or.b32  	%r666, %r661, 4100;
	mul.wide.u32 	%rd53, %r666, 4;
	add.s64 	%rd54, %rd1, %rd53;
	ld.global.u32 	%r185, [%rd54];
	ld.global.u32 	%r178, [%rd44+20];
	or.b32  	%r667, %r661, 4101;
	mul.wide.u32 	%rd55, %r667, 4;
	add.s64 	%rd56, %rd1, %rd55;
	ld.global.u32 	%r186, [%rd56];
	ld.global.u32 	%r193, [%rd44+24];
	or.b32  	%r668, %r661, 4102;
	mul.wide.u32 	%rd57, %r668, 4;
	add.s64 	%rd58, %rd1, %rd57;
	ld.global.u32 	%r201, [%rd58];
	ld.global.u32 	%r194, [%rd44+28];
	or.b32  	%r669, %r661, 4103;
	mul.wide.u32 	%rd59, %r669, 4;
	add.s64 	%rd60, %rd1, %rd59;
	ld.global.u32 	%r202, [%rd60];
	ld.global.u32 	%r209, [%rd44+32];
	or.b32  	%r670, %r661, 4104;
	mul.wide.u32 	%rd61, %r670, 4;
	add.s64 	%rd62, %rd1, %rd61;
	ld.global.u32 	%r217, [%rd62];
	ld.global.u32 	%r210, [%rd44+36];
	or.b32  	%r671, %r661, 4105;
	mul.wide.u32 	%rd63, %r671, 4;
	add.s64 	%rd64, %rd1, %rd63;
	ld.global.u32 	%r218, [%rd64];
	ld.global.u32 	%r225, [%rd44+40];
	or.b32  	%r672, %r661, 4106;
	mul.wide.u32 	%rd65, %r672, 4;
	add.s64 	%rd66, %rd1, %rd65;
	ld.global.u32 	%r233, [%rd66];
	ld.global.u32 	%r226, [%rd44+44];
	or.b32  	%r673, %r661, 4107;
	mul.wide.u32 	%rd67, %r673, 4;
	add.s64 	%rd68, %rd1, %rd67;
	ld.global.u32 	%r234, [%rd68];
	ld.global.u32 	%r241, [%rd44+48];
	or.b32  	%r674, %r661, 4108;
	mul.wide.u32 	%rd69, %r674, 4;
	add.s64 	%rd70, %rd1, %rd69;
	ld.global.u32 	%r249, [%rd70];
	ld.global.u32 	%r242, [%rd44+52];
	or.b32  	%r675, %r661, 4109;
	mul.wide.u32 	%rd71, %r675, 4;
	add.s64 	%rd72, %rd1, %rd71;
	ld.global.u32 	%r250, [%rd72];
	ld.global.u32 	%r257, [%rd44+56];
	or.b32  	%r676, %r661, 4110;
	mul.wide.u32 	%rd73, %r676, 4;
	add.s64 	%rd74, %rd1, %rd73;
	ld.global.u32 	%r265, [%rd74];
	ld.global.u32 	%r258, [%rd44+60];
	or.b32  	%r677, %r661, 4111;
	mul.wide.u32 	%rd75, %r677, 4;
	add.s64 	%rd76, %rd1, %rd75;
	ld.global.u32 	%r266, [%rd76];
	ld.global.u32 	%r273, [%rd44+64];
	or.b32  	%r678, %r661, 4112;
	mul.wide.u32 	%rd77, %r678, 4;
	add.s64 	%rd78, %rd1, %rd77;
	ld.global.u32 	%r281, [%rd78];
	ld.global.u32 	%r274, [%rd44+68];
	or.b32  	%r679, %r661, 4113;
	mul.wide.u32 	%rd79, %r679, 4;
	add.s64 	%rd80, %rd1, %rd79;
	ld.global.u32 	%r282, [%rd80];
	ld.global.u32 	%r289, [%rd44+72];
	or.b32  	%r680, %r661, 4114;
	mul.wide.u32 	%rd81, %r680, 4;
	add.s64 	%rd82, %rd1, %rd81;
	ld.global.u32 	%r297, [%rd82];
	ld.global.u32 	%r290, [%rd44+76];
	or.b32  	%r681, %r661, 4115;
	mul.wide.u32 	%rd83, %r681, 4;
	add.s64 	%rd84, %rd1, %rd83;
	ld.global.u32 	%r298, [%rd84];
	ld.global.u32 	%r305, [%rd44+80];
	or.b32  	%r682, %r661, 4116;
	mul.wide.u32 	%rd85, %r682, 4;
	add.s64 	%rd86, %rd1, %rd85;
	ld.global.u32 	%r313, [%rd86];
	ld.global.u32 	%r306, [%rd44+84];
	or.b32  	%r683, %r661, 4117;
	mul.wide.u32 	%rd87, %r683, 4;
	add.s64 	%rd88, %rd1, %rd87;
	ld.global.u32 	%r314, [%rd88];
	ld.global.u32 	%r321, [%rd44+88];
	or.b32  	%r684, %r661, 4118;
	mul.wide.u32 	%rd89, %r684, 4;
	add.s64 	%rd90, %rd1, %rd89;
	ld.global.u32 	%r329, [%rd90];
	ld.global.u32 	%r322, [%rd44+92];
	or.b32  	%r685, %r661, 4119;
	mul.wide.u32 	%rd91, %r685, 4;
	add.s64 	%rd92, %rd1, %rd91;
	ld.global.u32 	%r330, [%rd92];
	ld.global.u32 	%r337, [%rd44+96];
	or.b32  	%r686, %r661, 4120;
	mul.wide.u32 	%rd93, %r686, 4;
	add.s64 	%rd94, %rd1, %rd93;
	ld.global.u32 	%r345, [%rd94];
	ld.global.u32 	%r338, [%rd44+100];
	or.b32  	%r687, %r661, 4121;
	mul.wide.u32 	%rd95, %r687, 4;
	add.s64 	%rd96, %rd1, %rd95;
	ld.global.u32 	%r346, [%rd96];
	ld.global.u32 	%r353, [%rd44+104];
	or.b32  	%r688, %r661, 4122;
	mul.wide.u32 	%rd97, %r688, 4;
	add.s64 	%rd98, %rd1, %rd97;
	ld.global.u32 	%r361, [%rd98];
	ld.global.u32 	%r354, [%rd44+108];
	or.b32  	%r689, %r661, 4123;
	mul.wide.u32 	%rd99, %r689, 4;
	add.s64 	%rd100, %rd1, %rd99;
	ld.global.u32 	%r362, [%rd100];
	ld.global.u32 	%r369, [%rd44+112];
	or.b32  	%r690, %r661, 4124;
	mul.wide.u32 	%rd101, %r690, 4;
	add.s64 	%rd102, %rd1, %rd101;
	ld.global.u32 	%r377, [%rd102];
	ld.global.u32 	%r370, [%rd44+116];
	or.b32  	%r691, %r661, 4125;
	mul.wide.u32 	%rd103, %r691, 4;
	add.s64 	%rd104, %rd1, %rd103;
	ld.global.u32 	%r378, [%rd104];
	ld.global.u32 	%r385, [%rd44+120];
	or.b32  	%r692, %r661, 4126;
	mul.wide.u32 	%rd105, %r692, 4;
	add.s64 	%rd106, %rd1, %rd105;
	ld.global.u32 	%r393, [%rd106];
	ld.global.u32 	%r386, [%rd44+124];
	or.b32  	%r693, %r661, 4127;
	mul.wide.u32 	%rd107, %r693, 4;
	add.s64 	%rd108, %rd1, %rd107;
	ld.global.u32 	%r394, [%rd108];
	mov.u32 	%r143, 21520;
	// begin inline asm
	prmt.b32 %r397, %r145, %r146, %r143;
	// end inline asm
	mov.u32 	%r147, 30258;
	// begin inline asm
	prmt.b32 %r398, %r145, %r146, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r405, %r153, %r154, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r406, %r153, %r154, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r413, %r161, %r162, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r414, %r161, %r162, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r421, %r169, %r170, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r422, %r169, %r170, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r429, %r177, %r178, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r430, %r177, %r178, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r437, %r185, %r186, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r438, %r185, %r186, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r445, %r193, %r194, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r446, %r193, %r194, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r453, %r201, %r202, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r454, %r201, %r202, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r461, %r209, %r210, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r462, %r209, %r210, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r469, %r217, %r218, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r470, %r217, %r218, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r477, %r225, %r226, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r478, %r225, %r226, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r485, %r233, %r234, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r486, %r233, %r234, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r493, %r241, %r242, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r494, %r241, %r242, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r501, %r249, %r250, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r502, %r249, %r250, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r509, %r257, %r258, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r510, %r257, %r258, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r517, %r265, %r266, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r518, %r265, %r266, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r525, %r273, %r274, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r526, %r273, %r274, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r533, %r281, %r282, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r534, %r281, %r282, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r541, %r289, %r290, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r542, %r289, %r290, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r549, %r297, %r298, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r550, %r297, %r298, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r557, %r305, %r306, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r558, %r305, %r306, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r565, %r313, %r314, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r566, %r313, %r314, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r573, %r321, %r322, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r574, %r321, %r322, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r581, %r329, %r330, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r582, %r329, %r330, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r589, %r337, %r338, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r590, %r337, %r338, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r597, %r345, %r346, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r598, %r345, %r346, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r605, %r353, %r354, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r606, %r353, %r354, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r613, %r361, %r362, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r614, %r361, %r362, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r621, %r369, %r370, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r622, %r369, %r370, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r629, %r377, %r378, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r630, %r377, %r378, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r637, %r385, %r386, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r638, %r385, %r386, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r645, %r393, %r394, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r646, %r393, %r394, %r147;
	// end inline asm
	mov.u32 	%r399, 25152;
	// begin inline asm
	prmt.b32 %r1077, %r397, %r398, %r399;
	// end inline asm
	mov.u32 	%r403, 29521;
	// begin inline asm
	prmt.b32 %r1083, %r397, %r398, %r403;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1595, %r405, %r406, %r399;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1601, %r405, %r406, %r403;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1109, %r413, %r414, %r399;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1115, %r413, %r414, %r403;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1627, %r421, %r422, %r399;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1633, %r421, %r422, %r403;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1141, %r429, %r430, %r399;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1147, %r429, %r430, %r403;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1659, %r437, %r438, %r399;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1665, %r437, %r438, %r403;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1173, %r445, %r446, %r399;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1179, %r445, %r446, %r403;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1691, %r453, %r454, %r399;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1697, %r453, %r454, %r403;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1205, %r461, %r462, %r399;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1211, %r461, %r462, %r403;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1723, %r469, %r470, %r399;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1729, %r469, %r470, %r403;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1237, %r477, %r478, %r399;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1243, %r477, %r478, %r403;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1755, %r485, %r486, %r399;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1761, %r485, %r486, %r403;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1269, %r493, %r494, %r399;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1275, %r493, %r494, %r403;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1787, %r501, %r502, %r399;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1793, %r501, %r502, %r403;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1301, %r509, %r510, %r399;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1307, %r509, %r510, %r403;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1819, %r517, %r518, %r399;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1825, %r517, %r518, %r403;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1333, %r525, %r526, %r399;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1339, %r525, %r526, %r403;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1851, %r533, %r534, %r399;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1857, %r533, %r534, %r403;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1365, %r541, %r542, %r399;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1371, %r541, %r542, %r403;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1883, %r549, %r550, %r399;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1889, %r549, %r550, %r403;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1397, %r557, %r558, %r399;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1403, %r557, %r558, %r403;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1915, %r565, %r566, %r399;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1921, %r565, %r566, %r403;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1429, %r573, %r574, %r399;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1435, %r573, %r574, %r403;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1947, %r581, %r582, %r399;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1953, %r581, %r582, %r403;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1461, %r589, %r590, %r399;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1467, %r589, %r590, %r403;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1979, %r597, %r598, %r399;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1985, %r597, %r598, %r403;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1493, %r605, %r606, %r399;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1499, %r605, %r606, %r403;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2011, %r613, %r614, %r399;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2017, %r613, %r614, %r403;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1525, %r621, %r622, %r399;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1531, %r621, %r622, %r403;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2043, %r629, %r630, %r399;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2049, %r629, %r630, %r403;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1557, %r637, %r638, %r399;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1563, %r637, %r638, %r403;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2075, %r645, %r646, %r399;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2081, %r645, %r646, %r403;
	// end inline asm
	shl.b32 	%r69, %r123, 13;
	shl.b32 	%r694, %r4, 2;
	and.b32  	%r695, %r694, 28;
	or.b32  	%r696, %r695, %r2;
	shl.b32 	%r697, %r3, 8;
	or.b32  	%r70, %r697, %r696;
	or.b32  	%r71, %r70, 128;
	or.b32  	%r72, %r696, 128;
	or.b32  	%r73, %r696, 129;
	or.b32  	%r74, %r696, 130;
	or.b32  	%r75, %r696, 131;
	shl.b32 	%r698, %r1, 6;
	shl.b32 	%r699, %r4, 4;
	and.b32  	%r700, %r699, 48;
	or.b32  	%r76, %r700, %r698;
	shr.u32 	%r77, %r4, 2;
	shl.b32 	%r701, %r4, 1;
	and.b32  	%r78, %r701, 6;
	mul.lo.s32 	%r79, %r1, 640;
	or.b32  	%r80, %r79, %r77;
	or.b32  	%r81, %r80, 8;
	and.b32  	%r702, %r4, 7;
	or.b32  	%r703, %r119, 640;
	or.b32  	%r704, %r119, 1280;
	or.b32  	%r705, %r119, 1920;
	shl.b32 	%r707, %r130, %r121;
	setp.gt.u32 	%p15, %r121, 31;
	selp.b32 	%r82, 0, %r707, %p15;
	min.u32 	%r83, %r120, 31;
	and.b32  	%r84, %r4, 1;
	and.b32  	%r85, %r4, 2;
	and.b32  	%r86, %r4, 4;
	shl.b32 	%r708, %r4, 3;
	and.b32  	%r709, %r708, 32;
	and.b32  	%r710, %r654, 64;
	or.b32  	%r87, %r709, %r710;
	shl.b32 	%r711, %r3, 14;
	shl.b32 	%r712, %r1, 21;
	shl.b32 	%r713, %r4, 16;
	and.b32  	%r714, %r713, 1572864;
	or.b32  	%r715, %r714, %r712;
	or.b32  	%r88, %r715, %r711;
	mul.lo.s32 	%r716, %r118, 257;
	add.s32 	%r717, %r696, %r716;
	mul.wide.u32 	%rd109, %r717, 4;
	mov.u64 	%rd110, shmem;
	add.s64 	%rd9, %rd110, %rd109;
	cvt.u64.u32 	%rd111, %r716;
	cvt.u64.u32 	%rd10, %r696;
	add.s64 	%rd112, %rd10, %rd111;
	shl.b64 	%rd113, %rd112, 2;
	add.s64 	%rd11, %rd110, %rd113;
	add.s32 	%r718, %r716, %r72;
	mul.wide.u32 	%rd114, %r718, 4;
	add.s64 	%rd12, %rd110, %rd114;
	add.s32 	%r719, %r716, %r73;
	mul.wide.u32 	%rd115, %r719, 4;
	add.s64 	%rd13, %rd110, %rd115;
	add.s32 	%r720, %r716, %r74;
	mul.wide.u32 	%rd116, %r720, 4;
	add.s64 	%rd14, %rd110, %rd116;
	add.s32 	%r721, %r716, %r75;
	mul.wide.u32 	%rd117, %r721, 4;
	add.s64 	%rd15, %rd110, %rd117;
	mul.lo.s32 	%r722, %r702, 20;
	add.s32 	%r723, %r722, %r119;
	mul.wide.u32 	%rd118, %r723, 4;
	add.s64 	%rd119, %rd110, 32896;
	add.s64 	%rd16, %rd119, %rd118;
	add.s32 	%r724, %r703, %r722;
	mul.wide.u32 	%rd120, %r724, 4;
	add.s64 	%rd17, %rd119, %rd120;
	add.s32 	%r725, %r704, %r722;
	mul.wide.u32 	%rd121, %r725, 4;
	add.s64 	%rd18, %rd119, %rd121;
	add.s32 	%r726, %r705, %r722;
	mul.wide.u32 	%rd122, %r726, 4;
	add.s64 	%rd19, %rd119, %rd122;
	add.s32 	%r727, %r722, 160;
	add.s32 	%r728, %r727, %r119;
	mul.wide.u32 	%rd123, %r728, 4;
	add.s64 	%rd20, %rd119, %rd123;
	add.s32 	%r729, %r703, %r727;
	mul.wide.u32 	%rd124, %r729, 4;
	add.s64 	%rd21, %rd119, %rd124;
	add.s32 	%r730, %r704, %r727;
	mul.wide.u32 	%rd125, %r730, 4;
	add.s64 	%rd22, %rd119, %rd125;
	add.s32 	%r731, %r705, %r727;
	mul.wide.u32 	%rd126, %r731, 4;
	add.s64 	%rd23, %rd119, %rd126;
	add.s32 	%r732, %r722, 320;
	add.s32 	%r733, %r732, %r119;
	mul.wide.u32 	%rd127, %r733, 4;
	add.s64 	%rd24, %rd119, %rd127;
	add.s32 	%r734, %r703, %r732;
	mul.wide.u32 	%rd128, %r734, 4;
	add.s64 	%rd25, %rd119, %rd128;
	add.s32 	%r735, %r704, %r732;
	mul.wide.u32 	%rd129, %r735, 4;
	add.s64 	%rd26, %rd119, %rd129;
	add.s32 	%r736, %r705, %r732;
	mul.wide.u32 	%rd130, %r736, 4;
	add.s64 	%rd27, %rd119, %rd130;
	or.b32  	%r737, %r4, 24;
	mul.lo.s32 	%r738, %r737, 20;
	add.s32 	%r739, %r738, %r119;
	mul.wide.u32 	%rd131, %r739, 4;
	add.s64 	%rd28, %rd119, %rd131;
	add.s32 	%r740, %r703, %r738;
	mul.wide.u32 	%rd132, %r740, 4;
	add.s64 	%rd29, %rd119, %rd132;
	add.s32 	%r741, %r704, %r738;
	mul.wide.u32 	%rd133, %r741, 4;
	add.s64 	%rd30, %rd119, %rd133;
	add.s32 	%r742, %r705, %r738;
	mul.wide.u32 	%rd134, %r742, 4;
	add.s64 	%rd31, %rd119, %rd134;
	and.b32  	%r89, %r699, 16;
	mov.pred 	%p69, 0;
$L__BB0_11:                             // %L10000
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_13 Depth 2
                                        //       Child Loop BB0_14 Depth 3
	add.s32 	%r743, %r2391, %r123;
	setp.ge.s32 	%p16, %r743, %r124;
	@%p16 bra 	$L__BB0_17;
// %bb.12:                              // %L10008.preheader
                                        //   in Loop: Header=BB0_11 Depth=1
	or.b32  	%r91, %r2391, %r118;
	or.b32  	%r92, %r91, 4;
	or.b32  	%r93, %r91, 8;
	or.b32  	%r94, %r91, 12;
	or.b32  	%r95, %r91, 16;
	or.b32  	%r96, %r91, 20;
	or.b32  	%r97, %r91, 24;
	or.b32  	%r98, %r91, 28;
	mov.u32 	%r1079, 0;
	mov.u32 	%r2392, %r1079;
	mov.u32 	%r2393, %r1079;
	mov.u32 	%r2394, %r1079;
	mov.u32 	%r2395, %r1079;
	mov.u32 	%r2396, %r1079;
	mov.u32 	%r2397, %r1079;
	mov.u32 	%r2398, %r1079;
$L__BB0_13:                             // %L10008
                                        //   Parent Loop BB0_11 Depth=1
                                        // =>  This Loop Header: Depth=2
                                        //       Child Loop BB0_14 Depth 3
	cvt.u32.u64 	%r746, %rd10;
	add.s32 	%r747, %r91, %r2392;
	shl.b32 	%r748, %r747, 13;
	or.b32  	%r749, %r70, %r748;
	add.s32 	%r750, %r749, %r69;
	shr.s32 	%r751, %r750, 31;
	shr.u32 	%r752, %r751, 3;
	add.s32 	%r753, %r750, %r752;
	shr.s32 	%r754, %r753, 29;
	setp.lt.s32 	%p17, %r750, 0;
	and.b32  	%r755, %r753, -536870912;
	setp.ne.s32 	%p18, %r755, %r750;
	and.pred  	%p19, %p17, %p18;
	selp.u32 	%r756, 1, 0, %p19;
	sub.s32 	%r757, %r756, %r754;
	shl.b32 	%r758, %r757, 29;
	or.b32  	%r759, %r750, 1;
	add.s32 	%r760, %r759, %r758;
	mul.wide.s32 	%rd135, %r760, 4;
	add.s64 	%rd136, %rd2, %rd135;
	ld.global.v4.u32 	{%r761, %r762, %r763, %r764}, [%rd136+-4];
	or.b32  	%r765, %r71, %r748;
	add.s32 	%r766, %r765, %r69;
	shr.s32 	%r767, %r766, 31;
	shr.u32 	%r768, %r767, 3;
	add.s32 	%r769, %r766, %r768;
	shr.u32 	%r770, %r769, 29;
	shr.u32 	%r771, %r766, 31;
	sub.s32 	%r772, %r771, %r770;
	shl.b32 	%r773, %r772, 29;
	or.b32  	%r774, %r766, 1;
	add.s32 	%r775, %r774, %r773;
	mul.wide.s32 	%rd137, %r775, 4;
	add.s64 	%rd138, %rd2, %rd137;
	ld.global.v4.u32 	{%r776, %r777, %r778, %r779}, [%rd138+-4];
	add.s32 	%r780, %r2392, %r92;
	shl.b32 	%r781, %r780, 13;
	and.b32  	%r782, %r781, 536666112;
	or.b32  	%r783, %r70, %r782;
	add.s32 	%r784, %r783, %r69;
	shr.s32 	%r785, %r784, 31;
	shr.u32 	%r786, %r785, 3;
	add.s32 	%r787, %r784, %r786;
	shr.s32 	%r788, %r787, 29;
	setp.lt.s32 	%p20, %r784, 0;
	and.b32  	%r789, %r787, -536870912;
	setp.ne.s32 	%p21, %r789, %r784;
	and.pred  	%p22, %p20, %p21;
	selp.u32 	%r790, 1, 0, %p22;
	sub.s32 	%r791, %r790, %r788;
	shl.b32 	%r792, %r791, 29;
	or.b32  	%r793, %r784, 1;
	add.s32 	%r794, %r793, %r792;
	mul.wide.s32 	%rd139, %r794, 4;
	add.s64 	%rd140, %rd2, %rd139;
	ld.global.v4.u32 	{%r795, %r796, %r797, %r798}, [%rd140+-4];
	or.b32  	%r799, %r71, %r782;
	add.s32 	%r800, %r799, %r69;
	shr.s32 	%r801, %r800, 31;
	shr.u32 	%r802, %r801, 3;
	add.s32 	%r803, %r800, %r802;
	shr.u32 	%r804, %r803, 29;
	shr.u32 	%r805, %r800, 31;
	sub.s32 	%r806, %r805, %r804;
	shl.b32 	%r807, %r806, 29;
	or.b32  	%r808, %r800, 1;
	add.s32 	%r809, %r808, %r807;
	mul.wide.s32 	%rd141, %r809, 4;
	add.s64 	%rd142, %rd2, %rd141;
	ld.global.v4.u32 	{%r810, %r811, %r812, %r813}, [%rd142+-4];
	add.s32 	%r814, %r2392, %r93;
	shl.b32 	%r815, %r814, 13;
	and.b32  	%r816, %r815, 536698880;
	or.b32  	%r817, %r70, %r816;
	add.s32 	%r818, %r817, %r69;
	shr.s32 	%r819, %r818, 31;
	shr.u32 	%r820, %r819, 3;
	add.s32 	%r821, %r818, %r820;
	shr.s32 	%r822, %r821, 29;
	setp.lt.s32 	%p23, %r818, 0;
	and.b32  	%r823, %r821, -536870912;
	setp.ne.s32 	%p24, %r823, %r818;
	and.pred  	%p25, %p23, %p24;
	selp.u32 	%r824, 1, 0, %p25;
	sub.s32 	%r825, %r824, %r822;
	shl.b32 	%r826, %r825, 29;
	or.b32  	%r827, %r818, 1;
	add.s32 	%r828, %r827, %r826;
	mul.wide.s32 	%rd143, %r828, 4;
	add.s64 	%rd144, %rd2, %rd143;
	ld.global.v4.u32 	{%r829, %r830, %r831, %r832}, [%rd144+-4];
	or.b32  	%r833, %r71, %r816;
	add.s32 	%r834, %r833, %r69;
	shr.s32 	%r835, %r834, 31;
	shr.u32 	%r836, %r835, 3;
	add.s32 	%r837, %r834, %r836;
	shr.u32 	%r838, %r837, 29;
	shr.u32 	%r839, %r834, 31;
	sub.s32 	%r840, %r839, %r838;
	shl.b32 	%r841, %r840, 29;
	or.b32  	%r842, %r834, 1;
	add.s32 	%r843, %r842, %r841;
	mul.wide.s32 	%rd145, %r843, 4;
	add.s64 	%rd146, %rd2, %rd145;
	ld.global.v4.u32 	{%r844, %r845, %r846, %r847}, [%rd146+-4];
	add.s32 	%r848, %r2392, %r94;
	shl.b32 	%r849, %r848, 13;
	and.b32  	%r850, %r849, 536731648;
	or.b32  	%r851, %r70, %r850;
	add.s32 	%r852, %r851, %r69;
	shr.s32 	%r853, %r852, 31;
	shr.u32 	%r854, %r853, 3;
	add.s32 	%r855, %r852, %r854;
	shr.s32 	%r856, %r855, 29;
	setp.lt.s32 	%p26, %r852, 0;
	and.b32  	%r857, %r855, -536870912;
	setp.ne.s32 	%p27, %r857, %r852;
	and.pred  	%p28, %p26, %p27;
	selp.u32 	%r858, 1, 0, %p28;
	sub.s32 	%r859, %r858, %r856;
	shl.b32 	%r860, %r859, 29;
	or.b32  	%r861, %r852, 1;
	add.s32 	%r862, %r861, %r860;
	mul.wide.s32 	%rd147, %r862, 4;
	add.s64 	%rd148, %rd2, %rd147;
	ld.global.v4.u32 	{%r863, %r864, %r865, %r866}, [%rd148+-4];
	or.b32  	%r867, %r71, %r850;
	add.s32 	%r868, %r867, %r69;
	shr.s32 	%r869, %r868, 31;
	shr.u32 	%r870, %r869, 3;
	add.s32 	%r871, %r868, %r870;
	shr.u32 	%r872, %r871, 29;
	shr.u32 	%r873, %r868, 31;
	sub.s32 	%r874, %r873, %r872;
	shl.b32 	%r875, %r874, 29;
	or.b32  	%r876, %r868, 1;
	add.s32 	%r877, %r876, %r875;
	mul.wide.s32 	%rd149, %r877, 4;
	add.s64 	%rd150, %rd2, %rd149;
	ld.global.v4.u32 	{%r878, %r879, %r880, %r881}, [%rd150+-4];
	add.s32 	%r882, %r2392, %r95;
	shl.b32 	%r883, %r882, 13;
	and.b32  	%r884, %r883, 536764416;
	or.b32  	%r885, %r70, %r884;
	add.s32 	%r886, %r885, %r69;
	shr.s32 	%r887, %r886, 31;
	shr.u32 	%r888, %r887, 3;
	add.s32 	%r889, %r886, %r888;
	shr.s32 	%r890, %r889, 29;
	setp.lt.s32 	%p29, %r886, 0;
	and.b32  	%r891, %r889, -536870912;
	setp.ne.s32 	%p30, %r891, %r886;
	and.pred  	%p31, %p29, %p30;
	selp.u32 	%r892, 1, 0, %p31;
	sub.s32 	%r893, %r892, %r890;
	shl.b32 	%r894, %r893, 29;
	or.b32  	%r895, %r886, 1;
	add.s32 	%r896, %r895, %r894;
	mul.wide.s32 	%rd151, %r896, 4;
	add.s64 	%rd152, %rd2, %rd151;
	ld.global.v4.u32 	{%r897, %r898, %r899, %r900}, [%rd152+-4];
	or.b32  	%r901, %r71, %r884;
	add.s32 	%r902, %r901, %r69;
	shr.s32 	%r903, %r902, 31;
	shr.u32 	%r904, %r903, 3;
	add.s32 	%r905, %r902, %r904;
	shr.u32 	%r906, %r905, 29;
	shr.u32 	%r907, %r902, 31;
	sub.s32 	%r908, %r907, %r906;
	shl.b32 	%r909, %r908, 29;
	or.b32  	%r910, %r902, 1;
	add.s32 	%r911, %r910, %r909;
	mul.wide.s32 	%rd153, %r911, 4;
	add.s64 	%rd154, %rd2, %rd153;
	ld.global.v4.u32 	{%r912, %r913, %r914, %r915}, [%rd154+-4];
	add.s32 	%r916, %r2392, %r96;
	shl.b32 	%r917, %r916, 13;
	and.b32  	%r918, %r917, 536797184;
	or.b32  	%r919, %r70, %r918;
	add.s32 	%r920, %r919, %r69;
	shr.s32 	%r921, %r920, 31;
	shr.u32 	%r922, %r921, 3;
	add.s32 	%r923, %r920, %r922;
	shr.s32 	%r924, %r923, 29;
	setp.lt.s32 	%p32, %r920, 0;
	and.b32  	%r925, %r923, -536870912;
	setp.ne.s32 	%p33, %r925, %r920;
	and.pred  	%p34, %p32, %p33;
	selp.u32 	%r926, 1, 0, %p34;
	sub.s32 	%r927, %r926, %r924;
	shl.b32 	%r928, %r927, 29;
	or.b32  	%r929, %r920, 1;
	add.s32 	%r930, %r929, %r928;
	mul.wide.s32 	%rd155, %r930, 4;
	add.s64 	%rd156, %rd2, %rd155;
	ld.global.v4.u32 	{%r931, %r932, %r933, %r934}, [%rd156+-4];
	or.b32  	%r935, %r71, %r918;
	add.s32 	%r936, %r935, %r69;
	shr.s32 	%r937, %r936, 31;
	shr.u32 	%r938, %r937, 3;
	add.s32 	%r939, %r936, %r938;
	shr.u32 	%r940, %r939, 29;
	shr.u32 	%r941, %r936, 31;
	sub.s32 	%r942, %r941, %r940;
	shl.b32 	%r943, %r942, 29;
	or.b32  	%r944, %r936, 1;
	add.s32 	%r945, %r944, %r943;
	mul.wide.s32 	%rd157, %r945, 4;
	add.s64 	%rd158, %rd2, %rd157;
	ld.global.v4.u32 	{%r946, %r947, %r948, %r949}, [%rd158+-4];
	add.s32 	%r950, %r2392, %r97;
	shl.b32 	%r951, %r950, 13;
	and.b32  	%r952, %r951, 536829952;
	or.b32  	%r953, %r70, %r952;
	add.s32 	%r954, %r953, %r69;
	shr.s32 	%r955, %r954, 31;
	shr.u32 	%r956, %r955, 3;
	add.s32 	%r957, %r954, %r956;
	shr.s32 	%r958, %r957, 29;
	setp.lt.s32 	%p35, %r954, 0;
	and.b32  	%r959, %r957, -536870912;
	setp.ne.s32 	%p36, %r959, %r954;
	and.pred  	%p37, %p35, %p36;
	selp.u32 	%r960, 1, 0, %p37;
	sub.s32 	%r961, %r960, %r958;
	shl.b32 	%r962, %r961, 29;
	or.b32  	%r963, %r954, 1;
	add.s32 	%r964, %r963, %r962;
	mul.wide.s32 	%rd159, %r964, 4;
	add.s64 	%rd160, %rd2, %rd159;
	ld.global.v4.u32 	{%r965, %r966, %r967, %r968}, [%rd160+-4];
	or.b32  	%r969, %r71, %r952;
	add.s32 	%r970, %r969, %r69;
	shr.s32 	%r971, %r970, 31;
	shr.u32 	%r972, %r971, 3;
	add.s32 	%r973, %r970, %r972;
	shr.u32 	%r974, %r973, 29;
	shr.u32 	%r975, %r970, 31;
	sub.s32 	%r976, %r975, %r974;
	shl.b32 	%r977, %r976, 29;
	or.b32  	%r978, %r970, 1;
	add.s32 	%r979, %r978, %r977;
	mul.wide.s32 	%rd161, %r979, 4;
	add.s64 	%rd162, %rd2, %rd161;
	ld.global.v4.u32 	{%r980, %r981, %r982, %r983}, [%rd162+-4];
	add.s32 	%r984, %r2392, %r98;
	shl.b32 	%r985, %r984, 13;
	and.b32  	%r986, %r985, 536862720;
	or.b32  	%r987, %r70, %r986;
	add.s32 	%r988, %r987, %r69;
	shr.s32 	%r989, %r988, 31;
	shr.u32 	%r990, %r989, 3;
	add.s32 	%r991, %r988, %r990;
	shr.s32 	%r992, %r991, 29;
	setp.lt.s32 	%p38, %r988, 0;
	and.b32  	%r993, %r991, -536870912;
	setp.ne.s32 	%p39, %r993, %r988;
	and.pred  	%p40, %p38, %p39;
	selp.u32 	%r994, 1, 0, %p40;
	sub.s32 	%r995, %r994, %r992;
	shl.b32 	%r996, %r995, 29;
	or.b32  	%r997, %r988, 1;
	add.s32 	%r998, %r997, %r996;
	mul.wide.s32 	%rd163, %r998, 4;
	add.s64 	%rd164, %rd2, %rd163;
	ld.global.v4.u32 	{%r999, %r1000, %r1001, %r1002}, [%rd164+-4];
	or.b32  	%r1003, %r71, %r986;
	add.s32 	%r1004, %r1003, %r69;
	shr.s32 	%r1005, %r1004, 31;
	shr.u32 	%r1006, %r1005, 3;
	add.s32 	%r1007, %r1004, %r1006;
	shr.u32 	%r1008, %r1007, 29;
	shr.u32 	%r1009, %r1004, 31;
	sub.s32 	%r1010, %r1009, %r1008;
	shl.b32 	%r1011, %r1010, 29;
	or.b32  	%r1012, %r1004, 1;
	add.s32 	%r1013, %r1012, %r1011;
	mul.wide.s32 	%rd165, %r1013, 4;
	add.s64 	%rd166, %rd2, %rd165;
	ld.global.v4.u32 	{%r1014, %r1015, %r1016, %r1017}, [%rd166+-4];
	st.shared.u32 	[%rd9], %r761;
	st.shared.u32 	[%rd11+4], %r762;
	st.shared.u32 	[%rd11+8], %r763;
	st.shared.u32 	[%rd11+12], %r764;
	st.shared.u32 	[%rd12], %r776;
	st.shared.u32 	[%rd13], %r777;
	st.shared.u32 	[%rd14], %r778;
	st.shared.u32 	[%rd15], %r779;
	and.b32  	%r1018, %r780, 7;
	mul.lo.s32 	%r1019, %r1018, 257;
	add.s32 	%r1020, %r746, %r1019;
	mul.wide.u32 	%rd167, %r1020, 4;
	add.s64 	%rd169, %rd110, %rd167;
	st.shared.u32 	[%rd169], %r795;
	cvt.u64.u32 	%rd170, %r1019;
	add.s64 	%rd171, %rd10, %rd170;
	shl.b64 	%rd172, %rd171, 2;
	add.s64 	%rd173, %rd110, %rd172;
	st.shared.u32 	[%rd173+4], %r796;
	st.shared.u32 	[%rd173+8], %r797;
	st.shared.u32 	[%rd173+12], %r798;
	add.s32 	%r1021, %r1019, %r72;
	mul.wide.u32 	%rd174, %r1021, 4;
	add.s64 	%rd175, %rd110, %rd174;
	st.shared.u32 	[%rd175], %r810;
	add.s32 	%r1022, %r1019, %r73;
	mul.wide.u32 	%rd176, %r1022, 4;
	add.s64 	%rd177, %rd110, %rd176;
	st.shared.u32 	[%rd177], %r811;
	add.s32 	%r1023, %r1019, %r74;
	mul.wide.u32 	%rd178, %r1023, 4;
	add.s64 	%rd179, %rd110, %rd178;
	st.shared.u32 	[%rd179], %r812;
	add.s32 	%r1024, %r1019, %r75;
	mul.wide.u32 	%rd180, %r1024, 4;
	add.s64 	%rd181, %rd110, %rd180;
	st.shared.u32 	[%rd181], %r813;
	and.b32  	%r1025, %r814, 11;
	mul.lo.s32 	%r1026, %r1025, 257;
	add.s32 	%r1027, %r746, %r1026;
	mul.wide.u32 	%rd182, %r1027, 4;
	add.s64 	%rd183, %rd110, %rd182;
	st.shared.u32 	[%rd183], %r829;
	cvt.u64.u32 	%rd184, %r1026;
	add.s64 	%rd185, %rd10, %rd184;
	shl.b64 	%rd186, %rd185, 2;
	add.s64 	%rd187, %rd110, %rd186;
	st.shared.u32 	[%rd187+4], %r830;
	st.shared.u32 	[%rd187+8], %r831;
	st.shared.u32 	[%rd187+12], %r832;
	add.s32 	%r1028, %r1026, %r72;
	mul.wide.u32 	%rd188, %r1028, 4;
	add.s64 	%rd189, %rd110, %rd188;
	st.shared.u32 	[%rd189], %r844;
	add.s32 	%r1029, %r1026, %r73;
	mul.wide.u32 	%rd190, %r1029, 4;
	add.s64 	%rd191, %rd110, %rd190;
	st.shared.u32 	[%rd191], %r845;
	add.s32 	%r1030, %r1026, %r74;
	mul.wide.u32 	%rd192, %r1030, 4;
	add.s64 	%rd193, %rd110, %rd192;
	st.shared.u32 	[%rd193], %r846;
	add.s32 	%r1031, %r1026, %r75;
	mul.wide.u32 	%rd194, %r1031, 4;
	add.s64 	%rd195, %rd110, %rd194;
	st.shared.u32 	[%rd195], %r847;
	and.b32  	%r1032, %r848, 15;
	mul.lo.s32 	%r1033, %r1032, 257;
	add.s32 	%r1034, %r746, %r1033;
	mul.wide.u32 	%rd196, %r1034, 4;
	add.s64 	%rd197, %rd110, %rd196;
	st.shared.u32 	[%rd197], %r863;
	cvt.u64.u32 	%rd198, %r1033;
	add.s64 	%rd199, %rd10, %rd198;
	shl.b64 	%rd200, %rd199, 2;
	add.s64 	%rd201, %rd110, %rd200;
	st.shared.u32 	[%rd201+4], %r864;
	st.shared.u32 	[%rd201+8], %r865;
	st.shared.u32 	[%rd201+12], %r866;
	add.s32 	%r1035, %r1033, %r72;
	mul.wide.u32 	%rd202, %r1035, 4;
	add.s64 	%rd203, %rd110, %rd202;
	st.shared.u32 	[%rd203], %r878;
	add.s32 	%r1036, %r1033, %r73;
	mul.wide.u32 	%rd204, %r1036, 4;
	add.s64 	%rd205, %rd110, %rd204;
	st.shared.u32 	[%rd205], %r879;
	add.s32 	%r1037, %r1033, %r74;
	mul.wide.u32 	%rd206, %r1037, 4;
	add.s64 	%rd207, %rd110, %rd206;
	st.shared.u32 	[%rd207], %r880;
	add.s32 	%r1038, %r1033, %r75;
	mul.wide.u32 	%rd208, %r1038, 4;
	add.s64 	%rd209, %rd110, %rd208;
	st.shared.u32 	[%rd209], %r881;
	and.b32  	%r1039, %r882, 19;
	mul.lo.s32 	%r1040, %r1039, 257;
	add.s32 	%r1041, %r746, %r1040;
	mul.wide.u32 	%rd210, %r1041, 4;
	add.s64 	%rd211, %rd110, %rd210;
	st.shared.u32 	[%rd211], %r897;
	cvt.u64.u32 	%rd212, %r1040;
	add.s64 	%rd213, %rd10, %rd212;
	shl.b64 	%rd214, %rd213, 2;
	add.s64 	%rd215, %rd110, %rd214;
	st.shared.u32 	[%rd215+4], %r898;
	st.shared.u32 	[%rd215+8], %r899;
	st.shared.u32 	[%rd215+12], %r900;
	add.s32 	%r1042, %r1040, %r72;
	mul.wide.u32 	%rd216, %r1042, 4;
	add.s64 	%rd217, %rd110, %rd216;
	st.shared.u32 	[%rd217], %r912;
	add.s32 	%r1043, %r1040, %r73;
	mul.wide.u32 	%rd218, %r1043, 4;
	add.s64 	%rd219, %rd110, %rd218;
	st.shared.u32 	[%rd219], %r913;
	add.s32 	%r1044, %r1040, %r74;
	mul.wide.u32 	%rd220, %r1044, 4;
	add.s64 	%rd221, %rd110, %rd220;
	st.shared.u32 	[%rd221], %r914;
	add.s32 	%r1045, %r1040, %r75;
	mul.wide.u32 	%rd222, %r1045, 4;
	add.s64 	%rd223, %rd110, %rd222;
	st.shared.u32 	[%rd223], %r915;
	and.b32  	%r1046, %r916, 23;
	mul.lo.s32 	%r1047, %r1046, 257;
	add.s32 	%r1048, %r746, %r1047;
	mul.wide.u32 	%rd224, %r1048, 4;
	add.s64 	%rd225, %rd110, %rd224;
	st.shared.u32 	[%rd225], %r931;
	cvt.u64.u32 	%rd226, %r1047;
	add.s64 	%rd227, %rd10, %rd226;
	shl.b64 	%rd228, %rd227, 2;
	add.s64 	%rd229, %rd110, %rd228;
	st.shared.u32 	[%rd229+4], %r932;
	st.shared.u32 	[%rd229+8], %r933;
	st.shared.u32 	[%rd229+12], %r934;
	add.s32 	%r1049, %r1047, %r72;
	mul.wide.u32 	%rd230, %r1049, 4;
	add.s64 	%rd231, %rd110, %rd230;
	st.shared.u32 	[%rd231], %r946;
	add.s32 	%r1050, %r1047, %r73;
	mul.wide.u32 	%rd232, %r1050, 4;
	add.s64 	%rd233, %rd110, %rd232;
	st.shared.u32 	[%rd233], %r947;
	add.s32 	%r1051, %r1047, %r74;
	mul.wide.u32 	%rd234, %r1051, 4;
	add.s64 	%rd235, %rd110, %rd234;
	st.shared.u32 	[%rd235], %r948;
	add.s32 	%r1052, %r1047, %r75;
	mul.wide.u32 	%rd236, %r1052, 4;
	add.s64 	%rd237, %rd110, %rd236;
	st.shared.u32 	[%rd237], %r949;
	and.b32  	%r1053, %r950, 27;
	mul.lo.s32 	%r1054, %r1053, 257;
	add.s32 	%r1055, %r746, %r1054;
	mul.wide.u32 	%rd238, %r1055, 4;
	add.s64 	%rd239, %rd110, %rd238;
	st.shared.u32 	[%rd239], %r965;
	cvt.u64.u32 	%rd240, %r1054;
	add.s64 	%rd241, %rd10, %rd240;
	shl.b64 	%rd242, %rd241, 2;
	add.s64 	%rd243, %rd110, %rd242;
	st.shared.u32 	[%rd243+4], %r966;
	st.shared.u32 	[%rd243+8], %r967;
	st.shared.u32 	[%rd243+12], %r968;
	add.s32 	%r1056, %r1054, %r72;
	mul.wide.u32 	%rd244, %r1056, 4;
	add.s64 	%rd245, %rd110, %rd244;
	st.shared.u32 	[%rd245], %r980;
	add.s32 	%r1057, %r1054, %r73;
	mul.wide.u32 	%rd246, %r1057, 4;
	add.s64 	%rd247, %rd110, %rd246;
	st.shared.u32 	[%rd247], %r981;
	add.s32 	%r1058, %r1054, %r74;
	mul.wide.u32 	%rd248, %r1058, 4;
	add.s64 	%rd249, %rd110, %rd248;
	st.shared.u32 	[%rd249], %r982;
	add.s32 	%r1059, %r1054, %r75;
	mul.wide.u32 	%rd250, %r1059, 4;
	add.s64 	%rd251, %rd110, %rd250;
	st.shared.u32 	[%rd251], %r983;
	and.b32  	%r1060, %r984, 31;
	mul.lo.s32 	%r1061, %r1060, 257;
	add.s32 	%r1062, %r746, %r1061;
	mul.wide.u32 	%rd252, %r1062, 4;
	add.s64 	%rd253, %rd110, %rd252;
	st.shared.u32 	[%rd253], %r999;
	cvt.u64.u32 	%rd254, %r1061;
	add.s64 	%rd255, %rd10, %rd254;
	shl.b64 	%rd256, %rd255, 2;
	add.s64 	%rd257, %rd110, %rd256;
	st.shared.u32 	[%rd257+4], %r1000;
	st.shared.u32 	[%rd257+8], %r1001;
	st.shared.u32 	[%rd257+12], %r1002;
	add.s32 	%r1063, %r1061, %r72;
	mul.wide.u32 	%rd258, %r1063, 4;
	add.s64 	%rd259, %rd110, %rd258;
	st.shared.u32 	[%rd259], %r1014;
	add.s32 	%r1064, %r1061, %r73;
	mul.wide.u32 	%rd260, %r1064, 4;
	add.s64 	%rd261, %rd110, %rd260;
	st.shared.u32 	[%rd261], %r1015;
	add.s32 	%r1065, %r1061, %r74;
	mul.wide.u32 	%rd262, %r1065, 4;
	add.s64 	%rd263, %rd110, %rd262;
	st.shared.u32 	[%rd263], %r1016;
	add.s32 	%r1066, %r1061, %r75;
	mul.wide.u32 	%rd264, %r1066, 4;
	add.s64 	%rd265, %rd110, %rd264;
	st.shared.u32 	[%rd265], %r1017;
	bar.sync 	0;
	add.s32 	%r106, %r2392, %r2391;
	mov.u32 	%r2399, %r1079;
$L__BB0_14:                             // %L21792
                                        //   Parent Loop BB0_11 Depth=1
                                        //     Parent Loop BB0_13 Depth=2
                                        // =>    This Inner Loop Header: Depth=3
	or.b32  	%r2103, %r2399, %r77;
	add.s32 	%r2104, %r106, %r2103;
	shr.s32 	%r2105, %r2104, 31;
	shr.u32 	%r2106, %r2105, 27;
	add.s32 	%r2107, %r2104, %r2106;
	and.b32  	%r2108, %r2107, -32;
	sub.s32 	%r2109, %r2104, %r2108;
	mad.lo.s32 	%r2110, %r2109, 257, %r76;
	mul.wide.s32 	%rd266, %r2110, 4;
	add.s64 	%rd268, %rd110, %rd266;
	ld.shared.u32 	%r1068, [%rd268];
	mov.u32 	%r1069, 134744072;
	mov.u32 	%r1070, 252645135;
	// begin inline asm
	lop3.b32 %r1067, %r1068, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2111, %r1067, 2021161080;
	xor.b32  	%r1078, %r2111, -2139062144;
	shr.u32 	%r1072, %r1068, 4;
	// begin inline asm
	lop3.b32 %r1071, %r1072, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2112, %r1071, 2021161080;
	xor.b32  	%r1084, %r2112, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1075, %r1076}, {%r1077}, {%r1078}, {%r1079, %r1079};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1081, %r1082}, {%r1083}, {%r1084}, {%r1079, %r1079};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1087, %r1088}, {%r1077}, {%r1084}, {%r1079, %r1079};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1093, %r1094}, {%r1083}, {%r1078}, {%r1087, %r1088};
	// end inline asm
	ld.shared.u32 	%r1100, [%rd268+4];
	// begin inline asm
	lop3.b32 %r1099, %r1100, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2113, %r1099, 2021161080;
	xor.b32  	%r1110, %r2113, -2139062144;
	shr.u32 	%r1104, %r1100, 4;
	// begin inline asm
	lop3.b32 %r1103, %r1104, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2114, %r1103, 2021161080;
	xor.b32  	%r1116, %r2114, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1107, %r1108}, {%r1109}, {%r1110}, {%r1075, %r1076};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1113, %r1114}, {%r1115}, {%r1116}, {%r1081, %r1082};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1119, %r1120}, {%r1109}, {%r1116}, {%r1093, %r1094};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1125, %r1126}, {%r1115}, {%r1110}, {%r1119, %r1120};
	// end inline asm
	ld.shared.u32 	%r1132, [%rd268+8];
	// begin inline asm
	lop3.b32 %r1131, %r1132, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2115, %r1131, 2021161080;
	xor.b32  	%r1142, %r2115, -2139062144;
	shr.u32 	%r1136, %r1132, 4;
	// begin inline asm
	lop3.b32 %r1135, %r1136, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2116, %r1135, 2021161080;
	xor.b32  	%r1148, %r2116, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1139, %r1140}, {%r1141}, {%r1142}, {%r1107, %r1108};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1145, %r1146}, {%r1147}, {%r1148}, {%r1113, %r1114};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1151, %r1152}, {%r1141}, {%r1148}, {%r1125, %r1126};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1157, %r1158}, {%r1147}, {%r1142}, {%r1151, %r1152};
	// end inline asm
	ld.shared.u32 	%r1164, [%rd268+12];
	// begin inline asm
	lop3.b32 %r1163, %r1164, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2117, %r1163, 2021161080;
	xor.b32  	%r1174, %r2117, -2139062144;
	shr.u32 	%r1168, %r1164, 4;
	// begin inline asm
	lop3.b32 %r1167, %r1168, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2118, %r1167, 2021161080;
	xor.b32  	%r1180, %r2118, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1171, %r1172}, {%r1173}, {%r1174}, {%r1139, %r1140};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1177, %r1178}, {%r1179}, {%r1180}, {%r1145, %r1146};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1183, %r1184}, {%r1173}, {%r1180}, {%r1157, %r1158};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1189, %r1190}, {%r1179}, {%r1174}, {%r1183, %r1184};
	// end inline asm
	ld.shared.u32 	%r1196, [%rd268+16];
	// begin inline asm
	lop3.b32 %r1195, %r1196, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2119, %r1195, 2021161080;
	xor.b32  	%r1206, %r2119, -2139062144;
	shr.u32 	%r1200, %r1196, 4;
	// begin inline asm
	lop3.b32 %r1199, %r1200, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2120, %r1199, 2021161080;
	xor.b32  	%r1212, %r2120, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1203, %r1204}, {%r1205}, {%r1206}, {%r1171, %r1172};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1209, %r1210}, {%r1211}, {%r1212}, {%r1177, %r1178};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1215, %r1216}, {%r1205}, {%r1212}, {%r1189, %r1190};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1221, %r1222}, {%r1211}, {%r1206}, {%r1215, %r1216};
	// end inline asm
	ld.shared.u32 	%r1228, [%rd268+20];
	// begin inline asm
	lop3.b32 %r1227, %r1228, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2121, %r1227, 2021161080;
	xor.b32  	%r1238, %r2121, -2139062144;
	shr.u32 	%r1232, %r1228, 4;
	// begin inline asm
	lop3.b32 %r1231, %r1232, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2122, %r1231, 2021161080;
	xor.b32  	%r1244, %r2122, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1235, %r1236}, {%r1237}, {%r1238}, {%r1203, %r1204};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1241, %r1242}, {%r1243}, {%r1244}, {%r1209, %r1210};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1247, %r1248}, {%r1237}, {%r1244}, {%r1221, %r1222};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1253, %r1254}, {%r1243}, {%r1238}, {%r1247, %r1248};
	// end inline asm
	ld.shared.u32 	%r1260, [%rd268+24];
	// begin inline asm
	lop3.b32 %r1259, %r1260, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2123, %r1259, 2021161080;
	xor.b32  	%r1270, %r2123, -2139062144;
	shr.u32 	%r1264, %r1260, 4;
	// begin inline asm
	lop3.b32 %r1263, %r1264, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2124, %r1263, 2021161080;
	xor.b32  	%r1276, %r2124, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1267, %r1268}, {%r1269}, {%r1270}, {%r1235, %r1236};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1273, %r1274}, {%r1275}, {%r1276}, {%r1241, %r1242};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1279, %r1280}, {%r1269}, {%r1276}, {%r1253, %r1254};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1285, %r1286}, {%r1275}, {%r1270}, {%r1279, %r1280};
	// end inline asm
	ld.shared.u32 	%r1292, [%rd268+28];
	// begin inline asm
	lop3.b32 %r1291, %r1292, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2125, %r1291, 2021161080;
	xor.b32  	%r1302, %r2125, -2139062144;
	shr.u32 	%r1296, %r1292, 4;
	// begin inline asm
	lop3.b32 %r1295, %r1296, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2126, %r1295, 2021161080;
	xor.b32  	%r1308, %r2126, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1299, %r1300}, {%r1301}, {%r1302}, {%r1267, %r1268};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1305, %r1306}, {%r1307}, {%r1308}, {%r1273, %r1274};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1311, %r1312}, {%r1301}, {%r1308}, {%r1285, %r1286};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1317, %r1318}, {%r1307}, {%r1302}, {%r1311, %r1312};
	// end inline asm
	ld.shared.u32 	%r1324, [%rd268+32];
	// begin inline asm
	lop3.b32 %r1323, %r1324, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2127, %r1323, 2021161080;
	xor.b32  	%r1334, %r2127, -2139062144;
	shr.u32 	%r1328, %r1324, 4;
	// begin inline asm
	lop3.b32 %r1327, %r1328, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2128, %r1327, 2021161080;
	xor.b32  	%r1340, %r2128, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1331, %r1332}, {%r1333}, {%r1334}, {%r1299, %r1300};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1337, %r1338}, {%r1339}, {%r1340}, {%r1305, %r1306};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1343, %r1344}, {%r1333}, {%r1340}, {%r1317, %r1318};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1349, %r1350}, {%r1339}, {%r1334}, {%r1343, %r1344};
	// end inline asm
	ld.shared.u32 	%r1356, [%rd268+36];
	// begin inline asm
	lop3.b32 %r1355, %r1356, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2129, %r1355, 2021161080;
	xor.b32  	%r1366, %r2129, -2139062144;
	shr.u32 	%r1360, %r1356, 4;
	// begin inline asm
	lop3.b32 %r1359, %r1360, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2130, %r1359, 2021161080;
	xor.b32  	%r1372, %r2130, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1363, %r1364}, {%r1365}, {%r1366}, {%r1331, %r1332};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1369, %r1370}, {%r1371}, {%r1372}, {%r1337, %r1338};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1375, %r1376}, {%r1365}, {%r1372}, {%r1349, %r1350};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1381, %r1382}, {%r1371}, {%r1366}, {%r1375, %r1376};
	// end inline asm
	ld.shared.u32 	%r1388, [%rd268+40];
	// begin inline asm
	lop3.b32 %r1387, %r1388, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2131, %r1387, 2021161080;
	xor.b32  	%r1398, %r2131, -2139062144;
	shr.u32 	%r1392, %r1388, 4;
	// begin inline asm
	lop3.b32 %r1391, %r1392, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2132, %r1391, 2021161080;
	xor.b32  	%r1404, %r2132, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1395, %r1396}, {%r1397}, {%r1398}, {%r1363, %r1364};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1401, %r1402}, {%r1403}, {%r1404}, {%r1369, %r1370};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1407, %r1408}, {%r1397}, {%r1404}, {%r1381, %r1382};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1413, %r1414}, {%r1403}, {%r1398}, {%r1407, %r1408};
	// end inline asm
	ld.shared.u32 	%r1420, [%rd268+44];
	// begin inline asm
	lop3.b32 %r1419, %r1420, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2133, %r1419, 2021161080;
	xor.b32  	%r1430, %r2133, -2139062144;
	shr.u32 	%r1424, %r1420, 4;
	// begin inline asm
	lop3.b32 %r1423, %r1424, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2134, %r1423, 2021161080;
	xor.b32  	%r1436, %r2134, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1427, %r1428}, {%r1429}, {%r1430}, {%r1395, %r1396};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1433, %r1434}, {%r1435}, {%r1436}, {%r1401, %r1402};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1439, %r1440}, {%r1429}, {%r1436}, {%r1413, %r1414};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1445, %r1446}, {%r1435}, {%r1430}, {%r1439, %r1440};
	// end inline asm
	ld.shared.u32 	%r1452, [%rd268+48];
	// begin inline asm
	lop3.b32 %r1451, %r1452, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2135, %r1451, 2021161080;
	xor.b32  	%r1462, %r2135, -2139062144;
	shr.u32 	%r1456, %r1452, 4;
	// begin inline asm
	lop3.b32 %r1455, %r1456, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2136, %r1455, 2021161080;
	xor.b32  	%r1468, %r2136, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1459, %r1460}, {%r1461}, {%r1462}, {%r1427, %r1428};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1465, %r1466}, {%r1467}, {%r1468}, {%r1433, %r1434};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1471, %r1472}, {%r1461}, {%r1468}, {%r1445, %r1446};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1477, %r1478}, {%r1467}, {%r1462}, {%r1471, %r1472};
	// end inline asm
	ld.shared.u32 	%r1484, [%rd268+52];
	// begin inline asm
	lop3.b32 %r1483, %r1484, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2137, %r1483, 2021161080;
	xor.b32  	%r1494, %r2137, -2139062144;
	shr.u32 	%r1488, %r1484, 4;
	// begin inline asm
	lop3.b32 %r1487, %r1488, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2138, %r1487, 2021161080;
	xor.b32  	%r1500, %r2138, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1491, %r1492}, {%r1493}, {%r1494}, {%r1459, %r1460};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1497, %r1498}, {%r1499}, {%r1500}, {%r1465, %r1466};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1503, %r1504}, {%r1493}, {%r1500}, {%r1477, %r1478};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1509, %r1510}, {%r1499}, {%r1494}, {%r1503, %r1504};
	// end inline asm
	ld.shared.u32 	%r1516, [%rd268+56];
	// begin inline asm
	lop3.b32 %r1515, %r1516, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2139, %r1515, 2021161080;
	xor.b32  	%r1526, %r2139, -2139062144;
	shr.u32 	%r1520, %r1516, 4;
	// begin inline asm
	lop3.b32 %r1519, %r1520, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2140, %r1519, 2021161080;
	xor.b32  	%r1532, %r2140, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1523, %r1524}, {%r1525}, {%r1526}, {%r1491, %r1492};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1529, %r1530}, {%r1531}, {%r1532}, {%r1497, %r1498};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1535, %r1536}, {%r1525}, {%r1532}, {%r1509, %r1510};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1541, %r1542}, {%r1531}, {%r1526}, {%r1535, %r1536};
	// end inline asm
	ld.shared.u32 	%r1548, [%rd268+60];
	// begin inline asm
	lop3.b32 %r1547, %r1548, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2141, %r1547, 2021161080;
	xor.b32  	%r1558, %r2141, -2139062144;
	shr.u32 	%r1552, %r1548, 4;
	// begin inline asm
	lop3.b32 %r1551, %r1552, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2142, %r1551, 2021161080;
	xor.b32  	%r1564, %r2142, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1555, %r1556}, {%r1557}, {%r1558}, {%r1523, %r1524};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1561, %r1562}, {%r1563}, {%r1564}, {%r1529, %r1530};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1567, %r1568}, {%r1557}, {%r1564}, {%r1541, %r1542};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1573, %r1574}, {%r1563}, {%r1558}, {%r1567, %r1568};
	// end inline asm
	sub.s32 	%r2143, %r1555, %r1561;
	add.s32 	%r2144, %r2143, 8;
	shr.s32 	%r1581, %r2144, 4;
	add.s32 	%r2145, %r1573, 8;
	shr.s32 	%r1580, %r2145, 4;
	sub.s32 	%r2146, %r1556, %r1562;
	add.s32 	%r2147, %r2146, 8;
	shr.s32 	%r1584, %r2147, 4;
	add.s32 	%r2148, %r1574, 8;
	shr.s32 	%r1583, %r2148, 4;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1579, %r1580, %r1581;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r1582, %r1583, %r1584;
	// end inline asm
	or.b32  	%r2149, %r78, %r2399;
	mul.lo.s32 	%r2150, %r2149, 20;
	or.b32  	%r2151, %r2150, %r77;
	add.s32 	%r2152, %r2151, %r79;
	mul.wide.u32 	%rd269, %r2152, 4;
	add.s64 	%rd271, %rd119, %rd269;
	st.shared.u32 	[%rd271], %r1579;
	add.s32 	%r2153, %r2150, 20;
	add.s32 	%r2154, %r80, %r2153;
	mul.wide.u32 	%rd272, %r2154, 4;
	add.s64 	%rd273, %rd119, %rd272;
	st.shared.u32 	[%rd273], %r1582;
	ld.shared.u32 	%r1586, [%rd268];
	// begin inline asm
	lop3.b32 %r1585, %r1586, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2155, %r1585, 2021161080;
	xor.b32  	%r1596, %r2155, -2139062144;
	shr.u32 	%r1590, %r1586, 4;
	// begin inline asm
	lop3.b32 %r1589, %r1590, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2156, %r1589, 2021161080;
	xor.b32  	%r1602, %r2156, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1593, %r1594}, {%r1595}, {%r1596}, {%r1079, %r1079};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1599, %r1600}, {%r1601}, {%r1602}, {%r1079, %r1079};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1605, %r1606}, {%r1595}, {%r1602}, {%r1079, %r1079};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1611, %r1612}, {%r1601}, {%r1596}, {%r1605, %r1606};
	// end inline asm
	ld.shared.u32 	%r1618, [%rd268+4];
	// begin inline asm
	lop3.b32 %r1617, %r1618, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2157, %r1617, 2021161080;
	xor.b32  	%r1628, %r2157, -2139062144;
	shr.u32 	%r1622, %r1618, 4;
	// begin inline asm
	lop3.b32 %r1621, %r1622, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2158, %r1621, 2021161080;
	xor.b32  	%r1634, %r2158, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1625, %r1626}, {%r1627}, {%r1628}, {%r1593, %r1594};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1631, %r1632}, {%r1633}, {%r1634}, {%r1599, %r1600};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1637, %r1638}, {%r1627}, {%r1634}, {%r1611, %r1612};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1643, %r1644}, {%r1633}, {%r1628}, {%r1637, %r1638};
	// end inline asm
	ld.shared.u32 	%r1650, [%rd268+8];
	// begin inline asm
	lop3.b32 %r1649, %r1650, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2159, %r1649, 2021161080;
	xor.b32  	%r1660, %r2159, -2139062144;
	shr.u32 	%r1654, %r1650, 4;
	// begin inline asm
	lop3.b32 %r1653, %r1654, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2160, %r1653, 2021161080;
	xor.b32  	%r1666, %r2160, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1657, %r1658}, {%r1659}, {%r1660}, {%r1625, %r1626};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1663, %r1664}, {%r1665}, {%r1666}, {%r1631, %r1632};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1669, %r1670}, {%r1659}, {%r1666}, {%r1643, %r1644};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1675, %r1676}, {%r1665}, {%r1660}, {%r1669, %r1670};
	// end inline asm
	ld.shared.u32 	%r1682, [%rd268+12];
	// begin inline asm
	lop3.b32 %r1681, %r1682, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2161, %r1681, 2021161080;
	xor.b32  	%r1692, %r2161, -2139062144;
	shr.u32 	%r1686, %r1682, 4;
	// begin inline asm
	lop3.b32 %r1685, %r1686, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2162, %r1685, 2021161080;
	xor.b32  	%r1698, %r2162, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1689, %r1690}, {%r1691}, {%r1692}, {%r1657, %r1658};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1695, %r1696}, {%r1697}, {%r1698}, {%r1663, %r1664};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1701, %r1702}, {%r1691}, {%r1698}, {%r1675, %r1676};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1707, %r1708}, {%r1697}, {%r1692}, {%r1701, %r1702};
	// end inline asm
	ld.shared.u32 	%r1714, [%rd268+16];
	// begin inline asm
	lop3.b32 %r1713, %r1714, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2163, %r1713, 2021161080;
	xor.b32  	%r1724, %r2163, -2139062144;
	shr.u32 	%r1718, %r1714, 4;
	// begin inline asm
	lop3.b32 %r1717, %r1718, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2164, %r1717, 2021161080;
	xor.b32  	%r1730, %r2164, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1721, %r1722}, {%r1723}, {%r1724}, {%r1689, %r1690};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1727, %r1728}, {%r1729}, {%r1730}, {%r1695, %r1696};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1733, %r1734}, {%r1723}, {%r1730}, {%r1707, %r1708};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1739, %r1740}, {%r1729}, {%r1724}, {%r1733, %r1734};
	// end inline asm
	ld.shared.u32 	%r1746, [%rd268+20];
	// begin inline asm
	lop3.b32 %r1745, %r1746, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2165, %r1745, 2021161080;
	xor.b32  	%r1756, %r2165, -2139062144;
	shr.u32 	%r1750, %r1746, 4;
	// begin inline asm
	lop3.b32 %r1749, %r1750, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2166, %r1749, 2021161080;
	xor.b32  	%r1762, %r2166, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1753, %r1754}, {%r1755}, {%r1756}, {%r1721, %r1722};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1759, %r1760}, {%r1761}, {%r1762}, {%r1727, %r1728};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1765, %r1766}, {%r1755}, {%r1762}, {%r1739, %r1740};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1771, %r1772}, {%r1761}, {%r1756}, {%r1765, %r1766};
	// end inline asm
	ld.shared.u32 	%r1778, [%rd268+24];
	// begin inline asm
	lop3.b32 %r1777, %r1778, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2167, %r1777, 2021161080;
	xor.b32  	%r1788, %r2167, -2139062144;
	shr.u32 	%r1782, %r1778, 4;
	// begin inline asm
	lop3.b32 %r1781, %r1782, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2168, %r1781, 2021161080;
	xor.b32  	%r1794, %r2168, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1785, %r1786}, {%r1787}, {%r1788}, {%r1753, %r1754};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1791, %r1792}, {%r1793}, {%r1794}, {%r1759, %r1760};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1797, %r1798}, {%r1787}, {%r1794}, {%r1771, %r1772};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1803, %r1804}, {%r1793}, {%r1788}, {%r1797, %r1798};
	// end inline asm
	ld.shared.u32 	%r1810, [%rd268+28];
	// begin inline asm
	lop3.b32 %r1809, %r1810, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2169, %r1809, 2021161080;
	xor.b32  	%r1820, %r2169, -2139062144;
	shr.u32 	%r1814, %r1810, 4;
	// begin inline asm
	lop3.b32 %r1813, %r1814, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2170, %r1813, 2021161080;
	xor.b32  	%r1826, %r2170, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1817, %r1818}, {%r1819}, {%r1820}, {%r1785, %r1786};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1823, %r1824}, {%r1825}, {%r1826}, {%r1791, %r1792};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1829, %r1830}, {%r1819}, {%r1826}, {%r1803, %r1804};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1835, %r1836}, {%r1825}, {%r1820}, {%r1829, %r1830};
	// end inline asm
	ld.shared.u32 	%r1842, [%rd268+32];
	// begin inline asm
	lop3.b32 %r1841, %r1842, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2171, %r1841, 2021161080;
	xor.b32  	%r1852, %r2171, -2139062144;
	shr.u32 	%r1846, %r1842, 4;
	// begin inline asm
	lop3.b32 %r1845, %r1846, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2172, %r1845, 2021161080;
	xor.b32  	%r1858, %r2172, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1849, %r1850}, {%r1851}, {%r1852}, {%r1817, %r1818};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1855, %r1856}, {%r1857}, {%r1858}, {%r1823, %r1824};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1861, %r1862}, {%r1851}, {%r1858}, {%r1835, %r1836};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1867, %r1868}, {%r1857}, {%r1852}, {%r1861, %r1862};
	// end inline asm
	ld.shared.u32 	%r1874, [%rd268+36];
	// begin inline asm
	lop3.b32 %r1873, %r1874, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2173, %r1873, 2021161080;
	xor.b32  	%r1884, %r2173, -2139062144;
	shr.u32 	%r1878, %r1874, 4;
	// begin inline asm
	lop3.b32 %r1877, %r1878, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2174, %r1877, 2021161080;
	xor.b32  	%r1890, %r2174, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1881, %r1882}, {%r1883}, {%r1884}, {%r1849, %r1850};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1887, %r1888}, {%r1889}, {%r1890}, {%r1855, %r1856};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1893, %r1894}, {%r1883}, {%r1890}, {%r1867, %r1868};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1899, %r1900}, {%r1889}, {%r1884}, {%r1893, %r1894};
	// end inline asm
	ld.shared.u32 	%r1906, [%rd268+40];
	// begin inline asm
	lop3.b32 %r1905, %r1906, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2175, %r1905, 2021161080;
	xor.b32  	%r1916, %r2175, -2139062144;
	shr.u32 	%r1910, %r1906, 4;
	// begin inline asm
	lop3.b32 %r1909, %r1910, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2176, %r1909, 2021161080;
	xor.b32  	%r1922, %r2176, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1913, %r1914}, {%r1915}, {%r1916}, {%r1881, %r1882};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1919, %r1920}, {%r1921}, {%r1922}, {%r1887, %r1888};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1925, %r1926}, {%r1915}, {%r1922}, {%r1899, %r1900};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1931, %r1932}, {%r1921}, {%r1916}, {%r1925, %r1926};
	// end inline asm
	ld.shared.u32 	%r1938, [%rd268+44];
	// begin inline asm
	lop3.b32 %r1937, %r1938, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2177, %r1937, 2021161080;
	xor.b32  	%r1948, %r2177, -2139062144;
	shr.u32 	%r1942, %r1938, 4;
	// begin inline asm
	lop3.b32 %r1941, %r1942, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2178, %r1941, 2021161080;
	xor.b32  	%r1954, %r2178, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1945, %r1946}, {%r1947}, {%r1948}, {%r1913, %r1914};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1951, %r1952}, {%r1953}, {%r1954}, {%r1919, %r1920};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1957, %r1958}, {%r1947}, {%r1954}, {%r1931, %r1932};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1963, %r1964}, {%r1953}, {%r1948}, {%r1957, %r1958};
	// end inline asm
	ld.shared.u32 	%r1970, [%rd268+48];
	// begin inline asm
	lop3.b32 %r1969, %r1970, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2179, %r1969, 2021161080;
	xor.b32  	%r1980, %r2179, -2139062144;
	shr.u32 	%r1974, %r1970, 4;
	// begin inline asm
	lop3.b32 %r1973, %r1974, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2180, %r1973, 2021161080;
	xor.b32  	%r1986, %r2180, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1977, %r1978}, {%r1979}, {%r1980}, {%r1945, %r1946};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1983, %r1984}, {%r1985}, {%r1986}, {%r1951, %r1952};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1989, %r1990}, {%r1979}, {%r1986}, {%r1963, %r1964};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r1995, %r1996}, {%r1985}, {%r1980}, {%r1989, %r1990};
	// end inline asm
	ld.shared.u32 	%r2002, [%rd268+52];
	// begin inline asm
	lop3.b32 %r2001, %r2002, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2181, %r2001, 2021161080;
	xor.b32  	%r2012, %r2181, -2139062144;
	shr.u32 	%r2006, %r2002, 4;
	// begin inline asm
	lop3.b32 %r2005, %r2006, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2182, %r2005, 2021161080;
	xor.b32  	%r2018, %r2182, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r2009, %r2010}, {%r2011}, {%r2012}, {%r1977, %r1978};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r2015, %r2016}, {%r2017}, {%r2018}, {%r1983, %r1984};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r2021, %r2022}, {%r2011}, {%r2018}, {%r1995, %r1996};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r2027, %r2028}, {%r2017}, {%r2012}, {%r2021, %r2022};
	// end inline asm
	ld.shared.u32 	%r2034, [%rd268+56];
	// begin inline asm
	lop3.b32 %r2033, %r2034, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2183, %r2033, 2021161080;
	xor.b32  	%r2044, %r2183, -2139062144;
	shr.u32 	%r2038, %r2034, 4;
	// begin inline asm
	lop3.b32 %r2037, %r2038, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2184, %r2037, 2021161080;
	xor.b32  	%r2050, %r2184, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r2041, %r2042}, {%r2043}, {%r2044}, {%r2009, %r2010};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r2047, %r2048}, {%r2049}, {%r2050}, {%r2015, %r2016};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r2053, %r2054}, {%r2043}, {%r2050}, {%r2027, %r2028};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r2059, %r2060}, {%r2049}, {%r2044}, {%r2053, %r2054};
	// end inline asm
	ld.shared.u32 	%r2066, [%rd268+60];
	// begin inline asm
	lop3.b32 %r2065, %r2066, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2185, %r2065, 2021161080;
	xor.b32  	%r2076, %r2185, -2139062144;
	shr.u32 	%r2070, %r2066, 4;
	// begin inline asm
	lop3.b32 %r2069, %r2070, %r1069, %r1070, 40;
	// end inline asm
	add.s32 	%r2186, %r2069, 2021161080;
	xor.b32  	%r2082, %r2186, -2139062144;
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r2073, %r2074}, {%r2075}, {%r2076}, {%r2041, %r2042};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r2079, %r2080}, {%r2081}, {%r2082}, {%r2047, %r2048};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r2085, %r2086}, {%r2075}, {%r2082}, {%r2059, %r2060};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m8n8k16.row.col.satfinite.s32.s8.s8.s32 {%r2091, %r2092}, {%r2081}, {%r2076}, {%r2085, %r2086};
	// end inline asm
	sub.s32 	%r2187, %r2073, %r2079;
	add.s32 	%r2188, %r2187, 8;
	shr.s32 	%r2099, %r2188, 4;
	add.s32 	%r2189, %r2091, 8;
	shr.s32 	%r2098, %r2189, 4;
	sub.s32 	%r2190, %r2074, %r2080;
	add.s32 	%r2191, %r2190, 8;
	shr.s32 	%r2102, %r2191, 4;
	add.s32 	%r2192, %r2092, 8;
	shr.s32 	%r2101, %r2192, 4;
	// begin inline asm
	cvt.pack.sat.s16.s32 %r2097, %r2098, %r2099;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s16.s32 %r2100, %r2101, %r2102;
	// end inline asm
	add.s32 	%r2193, %r81, %r2150;
	mul.wide.u32 	%rd274, %r2193, 4;
	add.s64 	%rd275, %rd119, %rd274;
	st.shared.u32 	[%rd275], %r2097;
	add.s32 	%r2194, %r81, %r2153;
	mul.wide.u32 	%rd276, %r2194, 4;
	add.s64 	%rd277, %rd119, %rd276;
	st.shared.u32 	[%rd277], %r2100;
	add.s32 	%r2399, %r2399, 8;
	setp.ne.s32 	%p41, %r2399, 32;
	@%p41 bra 	$L__BB0_14;
// %bb.15:                              // %L28385
                                        //   in Loop: Header=BB0_13 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r2213, [%rd16];
	ld.shared.u32 	%r2214, [%rd17];
	ld.shared.u32 	%r2215, [%rd18];
	ld.shared.u32 	%r2216, [%rd19];
	ld.shared.u32 	%r2217, [%rd20];
	ld.shared.u32 	%r2218, [%rd21];
	ld.shared.u32 	%r2219, [%rd22];
	ld.shared.u32 	%r2220, [%rd23];
	ld.shared.u32 	%r2221, [%rd24];
	ld.shared.u32 	%r2222, [%rd25];
	ld.shared.u32 	%r2223, [%rd26];
	ld.shared.u32 	%r2224, [%rd27];
	ld.shared.u32 	%r2225, [%rd28];
	ld.shared.u32 	%r2226, [%rd29];
	ld.shared.u32 	%r2227, [%rd30];
	ld.shared.u32 	%r2228, [%rd31];
	cvt.s32.s16 	%r2229, %r2213;
	shr.s32 	%r2230, %r2213, 16;
	cvt.s32.s16 	%r2231, %r2214;
	shr.s32 	%r2232, %r2214, 16;
	cvt.s32.s16 	%r2233, %r2215;
	shr.s32 	%r2234, %r2215, 16;
	cvt.s32.s16 	%r2235, %r2216;
	shr.s32 	%r2236, %r2216, 16;
	cvt.s32.s16 	%r2237, %r2217;
	shr.s32 	%r2238, %r2217, 16;
	cvt.s32.s16 	%r2239, %r2218;
	shr.s32 	%r2240, %r2218, 16;
	cvt.s32.s16 	%r2241, %r2219;
	shr.s32 	%r2242, %r2219, 16;
	cvt.s32.s16 	%r2243, %r2220;
	shr.s32 	%r2244, %r2220, 16;
	cvt.s32.s16 	%r2245, %r2221;
	shr.s32 	%r2246, %r2221, 16;
	cvt.s32.s16 	%r2247, %r2222;
	shr.s32 	%r2248, %r2222, 16;
	cvt.s32.s16 	%r2249, %r2223;
	shr.s32 	%r2250, %r2223, 16;
	cvt.s32.s16 	%r2251, %r2224;
	shr.s32 	%r2252, %r2224, 16;
	cvt.s32.s16 	%r2253, %r2225;
	shr.s32 	%r2254, %r2225, 16;
	cvt.s32.s16 	%r2255, %r2226;
	shr.s32 	%r2256, %r2226, 16;
	cvt.s32.s16 	%r2257, %r2227;
	shr.s32 	%r2258, %r2227, 16;
	cvt.s32.s16 	%r2259, %r2228;
	shr.s32 	%r2260, %r2228, 16;
	add.s32 	%r2261, %r2229, %r82;
	add.s32 	%r2262, %r2261, %r2231;
	add.s32 	%r2263, %r2262, %r2233;
	add.s32 	%r2264, %r2263, %r2235;
	shr.s32 	%r2265, %r2264, %r83;
	add.s32 	%r2266, %r2230, %r82;
	add.s32 	%r2267, %r2266, %r2232;
	add.s32 	%r2268, %r2267, %r2234;
	add.s32 	%r2269, %r2268, %r2236;
	shr.s32 	%r2270, %r2269, %r83;
	add.s32 	%r2271, %r2237, %r82;
	add.s32 	%r2272, %r2271, %r2239;
	add.s32 	%r2273, %r2272, %r2241;
	add.s32 	%r2274, %r2273, %r2243;
	shr.s32 	%r2275, %r2274, %r83;
	add.s32 	%r2276, %r2238, %r82;
	add.s32 	%r2277, %r2276, %r2240;
	add.s32 	%r2278, %r2277, %r2242;
	add.s32 	%r2279, %r2278, %r2244;
	shr.s32 	%r2280, %r2279, %r83;
	add.s32 	%r2281, %r2245, %r82;
	add.s32 	%r2282, %r2281, %r2247;
	add.s32 	%r2283, %r2282, %r2249;
	add.s32 	%r2284, %r2283, %r2251;
	shr.s32 	%r2285, %r2284, %r83;
	add.s32 	%r2286, %r2246, %r82;
	add.s32 	%r2287, %r2286, %r2248;
	add.s32 	%r2288, %r2287, %r2250;
	add.s32 	%r2289, %r2288, %r2252;
	shr.s32 	%r2290, %r2289, %r83;
	add.s32 	%r2291, %r2253, %r82;
	add.s32 	%r2292, %r2291, %r2255;
	add.s32 	%r2293, %r2292, %r2257;
	add.s32 	%r2294, %r2293, %r2259;
	shr.s32 	%r2295, %r2294, %r83;
	add.s32 	%r2296, %r2254, %r82;
	add.s32 	%r2297, %r2296, %r2256;
	add.s32 	%r2298, %r2297, %r2258;
	add.s32 	%r2299, %r2298, %r2260;
	shr.s32 	%r2300, %r2299, %r83;
	max.s32 	%r2301, %r2265, -7;
	min.s32 	%r2200, %r2301, 7;
	setp.ne.s32 	%p42, %r2200, %r2265;
	or.pred  	%p43, %p69, %p42;
	max.s32 	%r2302, %r2270, -7;
	min.s32 	%r2207, %r2302, 7;
	setp.ne.s32 	%p44, %r2207, %r2270;
	or.pred  	%p45, %p44, %p43;
	max.s32 	%r2303, %r2275, -7;
	min.s32 	%r2199, %r2303, 7;
	setp.ne.s32 	%p46, %r2199, %r2275;
	or.pred  	%p47, %p45, %p46;
	max.s32 	%r2304, %r2280, -7;
	min.s32 	%r2206, %r2304, 7;
	setp.ne.s32 	%p48, %r2206, %r2280;
	or.pred  	%p49, %p48, %p47;
	max.s32 	%r2305, %r2285, -7;
	min.s32 	%r2197, %r2305, 7;
	setp.ne.s32 	%p50, %r2197, %r2285;
	or.pred  	%p51, %p49, %p50;
	max.s32 	%r2306, %r2290, -7;
	min.s32 	%r2204, %r2306, 7;
	setp.ne.s32 	%p52, %r2204, %r2290;
	or.pred  	%p53, %p52, %p51;
	max.s32 	%r2307, %r2295, -7;
	min.s32 	%r2196, %r2307, 7;
	setp.ne.s32 	%p54, %r2196, %r2295;
	or.pred  	%p55, %p53, %p54;
	max.s32 	%r2308, %r2300, -7;
	min.s32 	%r2203, %r2308, 7;
	setp.ne.s32 	%p56, %r2203, %r2300;
	or.pred  	%p69, %p56, %p55;
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r2195, %r2196, %r2197, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r2198, %r2199, %r2200, %r2195;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r2202, %r2203, %r2204, 0;
	// end inline asm
	// begin inline asm
	cvt.pack.sat.s8.s32.b32 %r2205, %r2206, %r2207, %r2202;
	// end inline asm
	shl.b32 	%r2212, %r2205, 4;
	// begin inline asm
	lop3.b32 %r2319, %r1070, %r2198, %r2212, 202;
	// end inline asm
	setp.eq.s32 	%p57, %r2392, 0;
	selp.b32 	%r2397, %r2319, %r2397, %p57;
	selp.b32 	%r2398, %r2319, %r2398, %p57;
	setp.eq.s32 	%p58, %r2392, 32;
	selp.b32 	%r2393, %r2319, %r2393, %p58;
	selp.b32 	%r2394, %r2319, %r2394, %p58;
	setp.eq.s32 	%p59, %r2392, 64;
	selp.b32 	%r2395, %r2319, %r2395, %p59;
	selp.b32 	%r2396, %r2319, %r2396, %p59;
	add.s32 	%r116, %r2392, 32;
	setp.ne.s32 	%p60, %r2392, 96;
	mov.u32 	%r2392, %r116;
	@%p60 bra 	$L__BB0_13;
// %bb.16:                              // %L30791.L30797_crit_edge
                                        //   in Loop: Header=BB0_11 Depth=1
	setp.eq.s32 	%p61, %r86, 0;
	setp.eq.s32 	%p62, %r85, 0;
	setp.eq.s32 	%p63, %r84, 0;
	// begin inline asm
	prmt.b32 %r2309, %r2397, %r2393, %r399;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2313, %r2398, %r2394, %r403;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2317, %r2395, %r2319, %r399;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2321, %r2396, %r2319, %r403;
	// end inline asm
	selp.b32 	%r2357, %r2313, %r2309, %p63;
	shfl.sync.bfly.b32	%r2358, %r2357, 1, 31, -1;
	selp.b32 	%r2326, %r2309, %r2358, %p63;
	selp.b32 	%r2327, %r2358, %r2313, %p63;
	selp.b32 	%r2359, %r2321, %r2317, %p63;
	shfl.sync.bfly.b32	%r2360, %r2359, 1, 31, -1;
	selp.b32 	%r2334, %r2317, %r2360, %p63;
	selp.b32 	%r2335, %r2360, %r2321, %p63;
	// begin inline asm
	prmt.b32 %r2325, %r2326, %r2327, %r399;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2329, %r2326, %r2327, %r403;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2333, %r2334, %r2335, %r399;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2337, %r2334, %r2335, %r403;
	// end inline asm
	selp.b32 	%r2361, %r2333, %r2325, %p62;
	shfl.sync.bfly.b32	%r2362, %r2361, 2, 31, -1;
	selp.b32 	%r2342, %r2325, %r2362, %p62;
	selp.b32 	%r2343, %r2362, %r2333, %p62;
	selp.b32 	%r2363, %r2337, %r2329, %p62;
	shfl.sync.bfly.b32	%r2364, %r2363, 2, 31, -1;
	selp.b32 	%r2350, %r2329, %r2364, %p62;
	selp.b32 	%r2351, %r2364, %r2337, %p62;
	// begin inline asm
	prmt.b32 %r2341, %r2342, %r2343, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2345, %r2342, %r2343, %r147;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2349, %r2350, %r2351, %r143;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2353, %r2350, %r2351, %r147;
	// end inline asm
	selp.b32 	%r2365, %r2349, %r2341, %p61;
	shfl.sync.bfly.b32	%r2366, %r2365, 4, 31, -1;
	selp.b32 	%r2367, %r2341, %r2366, %p61;
	selp.b32 	%r2368, %r2366, %r2349, %p61;
	selp.b32 	%r2369, %r2353, %r2345, %p61;
	shfl.sync.bfly.b32	%r2370, %r2369, 4, 31, -1;
	selp.b32 	%r2371, %r2345, %r2370, %p61;
	selp.b32 	%r2372, %r2370, %r2353, %p61;
	selp.b32 	%r2373, %r2371, %r2367, %p63;
	shfl.sync.bfly.b32	%r2374, %r2373, 1, 31, -1;
	selp.b32 	%r2375, %r2367, %r2374, %p63;
	selp.b32 	%r2376, %r2374, %r2371, %p63;
	selp.b32 	%r2377, %r2372, %r2368, %p63;
	shfl.sync.bfly.b32	%r2378, %r2377, 1, 31, -1;
	selp.b32 	%r2379, %r2368, %r2378, %p63;
	selp.b32 	%r2380, %r2378, %r2372, %p63;
	and.b32  	%r2381, %r2391, 16256;
	or.b32  	%r2382, %r2381, %r87;
	or.b32  	%r2383, %r2382, %r89;
	or.b32  	%r2384, %r88, %r2383;
	cvt.u64.u32 	%rd278, %r2384;
	add.s64 	%rd279, %rd4, %rd278;
	st.global.v4.u32 	[%rd279], {%r2375, %r2379, %r2376, %r2380};
	add.s32 	%r117, %r2391, 128;
	setp.ne.s32 	%p64, %r2391, 65408;
	mov.u32 	%r2391, %r117;
	@%p64 bra 	$L__BB0_11;
$L__BB0_17:                             // %L31177
	selp.u32 	%r2385, 1, 0, %p69;
	{ 
	.reg .pred 	%p1; 
	.reg .pred 	%p2; 
	setp.ne.u32 	%p1, %r2385, 0; 
	bar.red.or.pred 	%p2, 0, %p1; 
	selp.u32 	%r2386, 1, 0, %p2; 
	}
	setp.eq.s32 	%p65, %r2386, 0;
	or.pred  	%p66, %p65, %p1;
	@%p66 bra 	$L__BB0_19;
// %bb.18:                              // %L31207
	st.global.u32 	[%rd8], %r130;
$L__BB0_19:                             // %L31253
	mov.u32 	%r2388, 0;
	st.global.u32 	[%rd7], %r2388;
	ret;
$L__BB0_7:                              // %L149
	mov.u32 	%r2389, 2;
	st.global.u32 	[%rd7], %r2389;
	mov.u64 	%rd280, exception2743;
	cvta.global.u64 	%rd281, %rd280;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd281;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd32;
	st.param.b32 	[param0+8], %r122;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd33, exception1;
	cvta.global.u64 	%rd34, %rd33;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd34;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd32;
	st.param.b32 	[param0+8], %r122;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L24
	mov.u64 	%rd35, exception1;
	cvta.global.u64 	%rd36, %rd35;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd36;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd32;
	st.param.b32 	[param0+8], %r122;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_21:                             // %L365
	mov.u32 	%r137, 3;
	st.global.u32 	[%rd7], %r137;
	mov.u64 	%rd40, exception2743;
	cvta.global.u64 	%rd41, %rd40;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd41;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd32;
	st.param.b32 	[param0+8], %r122;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
