// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=192, blocks_per_sm=4

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception1835[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1875[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 192, 1, 1
.minnctapersm 4
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<298>;
	.reg .b16 	%rs<224>;
	.reg .b32 	%r<3003>;
	.reg .f32 	%f<790>;
	.reg .b64 	%rd<275>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r255, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd12, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r264, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p4, %r264, 13919;
	@%p4 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd13, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r256, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r265, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r3, %r2, 192;
	mov.u32 	%r4, %tid.y;
	shl.b32 	%r5, %r4, 5;
	or.b32  	%r266, %r3, %r265;
	add.s32 	%r267, %r266, %r5;
	mul.wide.u32 	%rd20, %r267, 4;
	add.s64 	%rd6, %rd13, %rd20;
	mov.u32 	%r268, 1;
	st.global.u32 	[%rd6], %r268;
	setp.gt.u32 	%p5, %r256, 32767;
	@%p5 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r257, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p6, %r257, %r256;
	setp.gt.s32 	%p7, %r257, 65535;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r258, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r257, %r256;
	mad.lo.s32 	%r269, %r6, -1431655765, 715827872;
	shf.r.wrap.b32 	%r270, %r269, %r269, 4;
	setp.gt.u32 	%p9, %r270, 89478484;
	setp.gt.u32 	%p10, %r258, 1023;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r259, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p12, %r259, %r258;
	setp.lt.s32 	%p13, %r259, 2048;
	and.pred  	%p14, %p12, %p13;
	@%p14 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r271, %r259, %r258;
	mul.hi.s32 	%r272, %r6, 715827883;
	shr.u32 	%r273, %r272, 31;
	shr.s32 	%r274, %r272, 5;
	add.s32 	%r275, %r274, %r273;
	setp.eq.s32 	%p15, %r271, %r275;
	@%p15 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L258
	ld.param.u32 	%r260, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p16, %r260, 0;
	@%p16 bra 	$L__BB0_12;
// %bb.9:                               // %L260
	ld.param.u32 	%r262, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	ld.param.u32 	%r261, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p17, %r261, %r260;
	setp.gt.s32 	%p18, %r261, 384;
	or.pred  	%p19, %p17, %p18;
	setp.lt.s32 	%p20, %r262, 0;
	or.pred  	%p21, %p19, %p20;
	@%p21 bra 	$L__BB0_12;
// %bb.10:                              // %L276
	ld.param.u32 	%r263, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p22, %r263, %r262;
	setp.gt.s32 	%p23, %r263, 4096;
	or.pred  	%p24, %p22, %p23;
	@%p24 bra 	$L__BB0_12;
// %bb.11:                              // %L286
	sub.s32 	%r276, %r263, %r262;
	sub.s32 	%r277, %r261, %r260;
	setp.eq.s32 	%p25, %r276, %r277;
	@%p25 bra 	$L__BB0_170;
	bra.uni 	$L__BB0_12;
$L__BB0_170:                            // %pass162
	and.b32  	%r143, %r265, 3;
	shr.u32 	%r144, %r265, 2;
	mul.lo.s32 	%r278, %r143, %r144;
	and.b32  	%r279, %r278, 7;
	cvt.rn.f32.s32 	%f205, %r279;
	mov.f32 	%f206, 0f40800000;
	div.approx.f32 	%f169, %f205, %f206;
	abs.f32 	%f788, %f169;
	setp.lt.f32 	%p26, %f788, 0f40000000;
	setp.gtu.f32 	%p297, %f788, 0f4B800000;
	mov.f32 	%f784, %f788;
	@%p26 bra 	$L__BB0_182;
// %bb.171:
	@%p297 bra 	$L__BB0_178;
	bra.uni 	$L__BB0_172;
$L__BB0_178:
	mov.b32 	%r146, %f788;
	and.b32  	%r280, %r146, 8388607;
	or.b32  	%r2998, %r280, 1065353216;
	mov.b32 	%f783, %r2998;
	add.s32 	%r281, %r146, -1073741824;
	and.b32  	%r2999, %r281, -8388608;
	setp.eq.s32 	%p33, %r2999, 0;
	@%p33 bra 	$L__BB0_181;
// %bb.179:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f216, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f215,%f216;
	// end inline asm
$L__BB0_180:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r282, %r2999, 192937984;
	add.s32 	%r283, %r2998, %r282;
	mov.b32 	%f217, %r283;
	mul.f32 	%f218, %f215, %f217;
	sub.f32 	%f219, %f217, %f218;
	fma.rn.f32 	%f220, %f219, %f215, %f218;
	sub.f32 	%f221, %f217, %f220;
	fma.rz.f32 	%f222, %f221, %f215, %f220;
	cvt.rzi.f32.f32 	%f223, %f222;
	sub.f32 	%f783, %f217, %f223;
	sub.s32 	%r2999, %r2999, %r282;
	mov.b32 	%r2998, %f783;
	setp.ne.s32 	%p34, %r2999, 0;
	setp.ne.s32 	%p35, %r2998, 0;
	and.pred  	%p36, %p34, %p35;
	@%p36 bra 	$L__BB0_180;
$L__BB0_181:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p37, %r146, 2139095039;
	selp.f32 	%f224, 0f7FFFFFFF, 0f4B800000, %p37;
	mul.f32 	%f225, %f783, 0f34000000;
	mul.f32 	%f784, %f224, %f225;
	bra.uni 	$L__BB0_182;
$L__BB0_172:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f207, 0f40000000;
	div.approx.f32 	%f208, %f788, %f207;
	cvt.rzi.f32.f32 	%f782, %f208;
	fma.rn.f32 	%f172, %f782, 0fC0000000, %f788;
	mov.b32 	%r145, %f172;
	setp.lt.u32 	%p28, %r145, 1073741824;
	@%p28 bra 	$L__BB0_177;
// %bb.173:
	setp.lt.u32 	%p29, %r145, -2147483647;
	@%p29 bra 	$L__BB0_175;
// %bb.174:
	add.f32 	%f213, %f782, 0fBF800000;
	setp.lt.f32 	%p32, %f172, 0fC0000000;
	add.f32 	%f214, %f213, 0fBF800000;
	selp.f32 	%f782, %f214, %f213, %p32;
	bra.uni 	$L__BB0_177;
$L__BB0_175:
	add.f32 	%f782, %f782, 0f3F800000;
	setp.ltu.f32 	%p30, %f172, 0f40800000;
	@%p30 bra 	$L__BB0_177;
// %bb.176:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f209, %f782, 0f3F800000;
	fma.rn.f32 	%f211, %f207, 0fC0400000, %f172;
	setp.ge.f32 	%p31, %f211, 0f00000000;
	add.f32 	%f212, %f209, 0f3F800000;
	selp.f32 	%f782, %f212, %f209, %p31;
$L__BB0_177:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f784, %f782, 0fC0000000, %f788;
$L__BB0_182:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f226, %f784;
	setp.gtu.f32 	%p38, %f226, 0f7F800000;
	mov.b32 	%r284, %f169;
	and.b32  	%r153, %r284, -2147483648;
	@%p38 bra 	$L__BB0_184;
// %bb.183:
	mov.b32 	%r285, %f784;
	or.b32  	%r286, %r153, %r285;
	mov.b32 	%f784, %r286;
$L__BB0_184:                            // %__nv_fmodf.exit
	shl.b32 	%r156, %r265, 1;
	and.b32  	%r157, %r156, 2;
	mul.lo.s32 	%r301, %r157, %r144;
	cvt.rn.f32.s32 	%f259, %r301;
	mov.f32 	%f260, 0f41400000;
	div.approx.f32 	%f186, %f259, %f260;
	abs.f32 	%f734, %f186;
	setp.lt.f32 	%p46, %f734, 0f40000000;
	@%p46 bra 	$L__BB0_24;
// %bb.13:
	setp.gtu.f32 	%p47, %f734, 0f4B800000;
	@%p47 bra 	$L__BB0_20;
	bra.uni 	$L__BB0_14;
$L__BB0_20:
	mov.b32 	%r8, %f734;
	and.b32  	%r302, %r8, 8388607;
	or.b32  	%r2948, %r302, 1065353216;
	mov.b32 	%f733, %r2948;
	add.s32 	%r303, %r8, -1073741824;
	and.b32  	%r2949, %r303, -8388608;
	setp.eq.s32 	%p53, %r2949, 0;
	@%p53 bra 	$L__BB0_23;
// %bb.21:                              // %__nv_fmaf_rn.exit4.i.i.i1990.preheader
	mov.f32 	%f270, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f269,%f270;
	// end inline asm
$L__BB0_22:                             // %__nv_fmaf_rn.exit4.i.i.i1990
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r304, %r2949, 192937984;
	add.s32 	%r305, %r2948, %r304;
	mov.b32 	%f271, %r305;
	mul.f32 	%f272, %f269, %f271;
	sub.f32 	%f273, %f271, %f272;
	fma.rn.f32 	%f274, %f273, %f269, %f272;
	sub.f32 	%f275, %f271, %f274;
	fma.rz.f32 	%f276, %f275, %f269, %f274;
	cvt.rzi.f32.f32 	%f277, %f276;
	sub.f32 	%f733, %f271, %f277;
	sub.s32 	%r2949, %r2949, %r304;
	mov.b32 	%r2948, %f733;
	setp.ne.s32 	%p54, %r2949, 0;
	setp.ne.s32 	%p55, %r2948, 0;
	and.pred  	%p56, %p54, %p55;
	@%p56 bra 	$L__BB0_22;
$L__BB0_23:                             // %__internal_fmodf_slowpath_mod.exit.i.i1992
	setp.gt.u32 	%p57, %r8, 2139095039;
	selp.f32 	%f278, 0f7FFFFFFF, 0f4B800000, %p57;
	mul.f32 	%f279, %f733, 0f34000000;
	mul.f32 	%f734, %f278, %f279;
	bra.uni 	$L__BB0_24;
$L__BB0_14:                             // %__nv_fast_fdividef.exit.i.i.i1969
	mov.f32 	%f261, 0f40000000;
	div.approx.f32 	%f262, %f734, %f261;
	cvt.rzi.f32.f32 	%f732, %f262;
	fma.rn.f32 	%f2, %f732, 0fC0000000, %f734;
	mov.b32 	%r7, %f2;
	setp.lt.u32 	%p48, %r7, 1073741824;
	@%p48 bra 	$L__BB0_19;
// %bb.15:
	setp.lt.u32 	%p49, %r7, -2147483647;
	@%p49 bra 	$L__BB0_17;
// %bb.16:
	add.f32 	%f267, %f732, 0fBF800000;
	setp.lt.f32 	%p52, %f2, 0fC0000000;
	add.f32 	%f268, %f267, 0fBF800000;
	selp.f32 	%f732, %f268, %f267, %p52;
	bra.uni 	$L__BB0_19;
$L__BB0_17:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p50, %f2, 0f40800000;
	@%p50 bra 	$L__BB0_19;
// %bb.18:                              // %__nv_fmaf_rn.exit.i.i.i1973
	add.f32 	%f263, %f732, 0f3F800000;
	fma.rn.f32 	%f265, %f261, 0fC0400000, %f2;
	setp.ge.f32 	%p51, %f265, 0f00000000;
	add.f32 	%f266, %f263, 0f3F800000;
	selp.f32 	%f732, %f266, %f263, %p51;
$L__BB0_19:                             // %__internal_fmodf_fastpath_quot.exit.i.i1976
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_24:                             // %__internal_fmodf_kernel.exit.i1995
	or.b32  	%r158, %r157, 1;
	abs.f32 	%f280, %f734;
	setp.gtu.f32 	%p58, %f280, 0f7F800000;
	@%p58 bra 	$L__BB0_26;
// %bb.25:
	mov.b32 	%r306, %f186;
	and.b32  	%r307, %r306, -2147483648;
	mov.b32 	%r308, %f734;
	or.b32  	%r309, %r307, %r308;
	mov.b32 	%f734, %r309;
$L__BB0_26:                             // %__nv_fmodf.exit1996
	mov.f32 	%f250, 0f00000000;
	setp.eq.s32 	%p66, %r158, 3;
	mov.f32 	%f37, %f250;
	mov.f32 	%f38, %f250;
	@%p66 bra 	$L__BB0_42;
// %bb.27:                              // %L525
	mul.lo.s32 	%r318, %r158, %r144;
	mul.hi.u32 	%r319, %r318, -1431655765;
	shr.u32 	%r320, %r319, 4;
	mul.lo.s32 	%r321, %r320, 24;
	sub.s32 	%r322, %r318, %r321;
	cvt.rn.f32.s32 	%f311, %r322;
	div.approx.f32 	%f18, %f311, %f260;
	abs.f32 	%f738, %f18;
	setp.lt.f32 	%p67, %f738, 0f40000000;
	@%p67 bra 	$L__BB0_39;
// %bb.28:
	setp.gtu.f32 	%p68, %f738, 0f4B800000;
	@%p68 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_29;
$L__BB0_35:
	mov.b32 	%r16, %f738;
	and.b32  	%r323, %r16, 8388607;
	or.b32  	%r2950, %r323, 1065353216;
	mov.b32 	%f737, %r2950;
	add.s32 	%r324, %r16, -1073741824;
	and.b32  	%r2951, %r324, -8388608;
	setp.eq.s32 	%p74, %r2951, 0;
	@%p74 bra 	$L__BB0_38;
// %bb.36:                              // %__nv_fmaf_rn.exit4.i.i.i2021.preheader
	mov.f32 	%f322, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f321,%f322;
	// end inline asm
$L__BB0_37:                             // %__nv_fmaf_rn.exit4.i.i.i2021
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r325, %r2951, 192937984;
	add.s32 	%r326, %r2950, %r325;
	mov.b32 	%f323, %r326;
	mul.f32 	%f324, %f321, %f323;
	sub.f32 	%f325, %f323, %f324;
	fma.rn.f32 	%f326, %f325, %f321, %f324;
	sub.f32 	%f327, %f323, %f326;
	fma.rz.f32 	%f328, %f327, %f321, %f326;
	cvt.rzi.f32.f32 	%f329, %f328;
	sub.f32 	%f737, %f323, %f329;
	sub.s32 	%r2951, %r2951, %r325;
	mov.b32 	%r2950, %f737;
	setp.ne.s32 	%p75, %r2951, 0;
	setp.ne.s32 	%p76, %r2950, 0;
	and.pred  	%p77, %p75, %p76;
	@%p77 bra 	$L__BB0_37;
$L__BB0_38:                             // %__internal_fmodf_slowpath_mod.exit.i.i2023
	setp.gt.u32 	%p78, %r16, 2139095039;
	selp.f32 	%f330, 0f7FFFFFFF, 0f4B800000, %p78;
	mul.f32 	%f331, %f737, 0f34000000;
	mul.f32 	%f738, %f330, %f331;
	bra.uni 	$L__BB0_39;
$L__BB0_29:                             // %__nv_fast_fdividef.exit.i.i.i2000
	mov.f32 	%f313, 0f40000000;
	div.approx.f32 	%f314, %f738, %f313;
	cvt.rzi.f32.f32 	%f736, %f314;
	fma.rn.f32 	%f21, %f736, 0fC0000000, %f738;
	mov.b32 	%r15, %f21;
	setp.lt.u32 	%p69, %r15, 1073741824;
	@%p69 bra 	$L__BB0_34;
// %bb.30:
	setp.lt.u32 	%p70, %r15, -2147483647;
	@%p70 bra 	$L__BB0_32;
// %bb.31:
	add.f32 	%f319, %f736, 0fBF800000;
	setp.lt.f32 	%p73, %f21, 0fC0000000;
	add.f32 	%f320, %f319, 0fBF800000;
	selp.f32 	%f736, %f320, %f319, %p73;
	bra.uni 	$L__BB0_34;
$L__BB0_32:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p71, %f21, 0f40800000;
	@%p71 bra 	$L__BB0_34;
// %bb.33:                              // %__nv_fmaf_rn.exit.i.i.i2004
	add.f32 	%f315, %f736, 0f3F800000;
	fma.rn.f32 	%f317, %f313, 0fC0400000, %f21;
	setp.ge.f32 	%p72, %f317, 0f00000000;
	add.f32 	%f318, %f315, 0f3F800000;
	selp.f32 	%f736, %f318, %f315, %p72;
$L__BB0_34:                             // %__internal_fmodf_fastpath_quot.exit.i.i2007
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_39:                             // %__internal_fmodf_kernel.exit.i2026
	abs.f32 	%f332, %f738;
	setp.gtu.f32 	%p79, %f332, 0f7F800000;
	@%p79 bra 	$L__BB0_41;
// %bb.40:
	mov.b32 	%r327, %f18;
	and.b32  	%r328, %r327, -2147483648;
	mov.b32 	%r329, %f738;
	or.b32  	%r330, %r328, %r329;
	mov.b32 	%f738, %r330;
$L__BB0_41:                             // %__nv_fmodf.exit2027
	add.f32 	%f333, %f738, %f738;
	mov.b32 	%r331, %f333;
	and.b32  	%r332, %r331, -2147483648;
	or.b32  	%r333, %r332, 1056964608;
	mov.b32 	%f334, %r333;
	add.f32 	%f335, %f333, %f334;
	cvt.rzi.f32.f32 	%f336, %f335;
	abs.f32 	%f337, %f333;
	setp.gt.f32 	%p80, %f337, 0f4B000000;
	selp.f32 	%f338, %f333, %f336, %p80;
	cvt.rzi.f32.f32 	%f339, %f333;
	setp.lt.f32 	%p81, %f337, 0f3F000000;
	selp.f32 	%f340, %f339, %f338, %p81;
	cvt.rzi.s32.f32 	%r334, %f340;
	fma.rn.f32 	%f341, %f340, 0fBF000000, %f738;
	mul.f32 	%f342, %f341, %f341;
	fma.rn.f32 	%f343, %f342, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f344, %f342, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f345, %f343, %f342, 0fC0A55DF6;
	fma.rn.f32 	%f346, %f344, %f342, 0f4081E0CF;
	fma.rn.f32 	%f347, %f342, %f341, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f342, 0fC09DE9E6;
	fma.rn.f32 	%f349, %f345, %f347, 0f00000000;
	fma.rn.f32 	%f350, %f348, %f342, 0f3F800000;
	fma.rn.f32 	%f351, %f341, 0f40490FDB, %f349;
	and.b32  	%r335, %r334, 1;
	setp.eq.b32 	%p82, %r335, 1;
	selp.f32 	%f352, %f350, %f351, %p82;
	selp.f32 	%f353, %f351, %f350, %p82;
	and.b32  	%r336, %r334, 2;
	setp.eq.s32 	%p83, %r336, 0;
	neg.f32 	%f354, %f352;
	selp.f32 	%f355, %f352, %f354, %p83;
	add.s32 	%r337, %r334, 1;
	and.b32  	%r338, %r337, 2;
	setp.eq.s32 	%p84, %r338, 0;
	mov.f32 	%f356, 0f00000000;
	sub.f32 	%f357, %f356, %f353;
	selp.f32 	%f358, %f353, %f357, %p84;
	cvt.rzi.f32.f32 	%f359, %f738;
	setp.eq.f32 	%p85, %f359, %f738;
	mul.f32 	%f360, %f738, 0f00000000;
	selp.f32 	%f38, %f360, %f355, %p85;
	abs.f32 	%f361, %f738;
	setp.gt.f32 	%p86, %f361, 0f4B800000;
	add.f32 	%f362, %f38, 0f3F800000;
	selp.f32 	%f37, %f362, %f358, %p86;
$L__BB0_42:                             // %L559
	and.b32  	%r25, %r144, 3;
	setp.eq.s32 	%p87, %r25, 3;
	mov.f32 	%f731, 0f3FC00000;
	mov.f32 	%f746, %f250;
	mov.f32 	%f755, %f250;
	@%p87 bra 	$L__BB0_58;
// %bb.43:                              // %L597
	mul.lo.s32 	%r345, %r157, %r25;
	cvt.u16.u32 	%rs9, %r345;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 9;
	mul.lo.s16 	%rs12, %rs11, 3;
	sub.s16 	%rs13, %rs9, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f364, %rs14;
	div.approx.f32 	%f39, %f364, %f731;
	abs.f32 	%f744, %f39;
	setp.lt.f32 	%p88, %f744, 0f40000000;
	@%p88 bra 	$L__BB0_55;
// %bb.44:
	setp.gtu.f32 	%p89, %f744, 0f4B800000;
	@%p89 bra 	$L__BB0_51;
	bra.uni 	$L__BB0_45;
$L__BB0_51:
	mov.b32 	%r27, %f744;
	and.b32  	%r346, %r27, 8388607;
	or.b32  	%r2952, %r346, 1065353216;
	mov.b32 	%f743, %r2952;
	add.s32 	%r347, %r27, -1073741824;
	and.b32  	%r2953, %r347, -8388608;
	setp.eq.s32 	%p95, %r2953, 0;
	@%p95 bra 	$L__BB0_54;
// %bb.52:                              // %__nv_fmaf_rn.exit4.i.i.i2052.preheader
	mov.f32 	%f375, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f374,%f375;
	// end inline asm
$L__BB0_53:                             // %__nv_fmaf_rn.exit4.i.i.i2052
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r348, %r2953, 192937984;
	add.s32 	%r349, %r2952, %r348;
	mov.b32 	%f376, %r349;
	mul.f32 	%f377, %f374, %f376;
	sub.f32 	%f378, %f376, %f377;
	fma.rn.f32 	%f379, %f378, %f374, %f377;
	sub.f32 	%f380, %f376, %f379;
	fma.rz.f32 	%f381, %f380, %f374, %f379;
	cvt.rzi.f32.f32 	%f382, %f381;
	sub.f32 	%f743, %f376, %f382;
	sub.s32 	%r2953, %r2953, %r348;
	mov.b32 	%r2952, %f743;
	setp.ne.s32 	%p96, %r2953, 0;
	setp.ne.s32 	%p97, %r2952, 0;
	and.pred  	%p98, %p96, %p97;
	@%p98 bra 	$L__BB0_53;
$L__BB0_54:                             // %__internal_fmodf_slowpath_mod.exit.i.i2054
	setp.gt.u32 	%p99, %r27, 2139095039;
	selp.f32 	%f383, 0f7FFFFFFF, 0f4B800000, %p99;
	mul.f32 	%f384, %f743, 0f34000000;
	mul.f32 	%f744, %f383, %f384;
	bra.uni 	$L__BB0_55;
$L__BB0_45:                             // %__nv_fast_fdividef.exit.i.i.i2031
	mov.f32 	%f366, 0f40000000;
	div.approx.f32 	%f367, %f744, %f366;
	cvt.rzi.f32.f32 	%f742, %f367;
	fma.rn.f32 	%f42, %f742, 0fC0000000, %f744;
	mov.b32 	%r26, %f42;
	setp.lt.u32 	%p90, %r26, 1073741824;
	@%p90 bra 	$L__BB0_50;
// %bb.46:
	setp.lt.u32 	%p91, %r26, -2147483647;
	@%p91 bra 	$L__BB0_48;
// %bb.47:
	add.f32 	%f372, %f742, 0fBF800000;
	setp.lt.f32 	%p94, %f42, 0fC0000000;
	add.f32 	%f373, %f372, 0fBF800000;
	selp.f32 	%f742, %f373, %f372, %p94;
	bra.uni 	$L__BB0_50;
$L__BB0_48:
	add.f32 	%f742, %f742, 0f3F800000;
	setp.ltu.f32 	%p92, %f42, 0f40800000;
	@%p92 bra 	$L__BB0_50;
// %bb.49:                              // %__nv_fmaf_rn.exit.i.i.i2035
	add.f32 	%f368, %f742, 0f3F800000;
	fma.rn.f32 	%f370, %f366, 0fC0400000, %f42;
	setp.ge.f32 	%p93, %f370, 0f00000000;
	add.f32 	%f371, %f368, 0f3F800000;
	selp.f32 	%f742, %f371, %f368, %p93;
$L__BB0_50:                             // %__internal_fmodf_fastpath_quot.exit.i.i2038
	fma.rn.f32 	%f744, %f742, 0fC0000000, %f744;
$L__BB0_55:                             // %__internal_fmodf_kernel.exit.i2057
	abs.f32 	%f385, %f744;
	setp.gtu.f32 	%p100, %f385, 0f7F800000;
	@%p100 bra 	$L__BB0_57;
// %bb.56:
	mov.b32 	%r350, %f39;
	and.b32  	%r351, %r350, -2147483648;
	mov.b32 	%r352, %f744;
	or.b32  	%r353, %r351, %r352;
	mov.b32 	%f744, %r353;
$L__BB0_57:                             // %__nv_fmodf.exit2058
	add.f32 	%f386, %f744, %f744;
	mov.b32 	%r354, %f386;
	and.b32  	%r355, %r354, -2147483648;
	or.b32  	%r356, %r355, 1056964608;
	mov.b32 	%f387, %r356;
	add.f32 	%f388, %f386, %f387;
	cvt.rzi.f32.f32 	%f389, %f388;
	abs.f32 	%f390, %f386;
	setp.gt.f32 	%p101, %f390, 0f4B000000;
	selp.f32 	%f391, %f386, %f389, %p101;
	cvt.rzi.f32.f32 	%f392, %f386;
	setp.lt.f32 	%p102, %f390, 0f3F000000;
	selp.f32 	%f393, %f392, %f391, %p102;
	cvt.rzi.s32.f32 	%r357, %f393;
	fma.rn.f32 	%f394, %f393, 0fBF000000, %f744;
	mul.f32 	%f395, %f394, %f394;
	fma.rn.f32 	%f396, %f395, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f397, %f395, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f398, %f396, %f395, 0fC0A55DF6;
	fma.rn.f32 	%f399, %f397, %f395, 0f4081E0CF;
	fma.rn.f32 	%f400, %f395, %f394, 0f00000000;
	fma.rn.f32 	%f401, %f399, %f395, 0fC09DE9E6;
	fma.rn.f32 	%f402, %f398, %f400, 0f00000000;
	fma.rn.f32 	%f403, %f401, %f395, 0f3F800000;
	fma.rn.f32 	%f404, %f394, 0f40490FDB, %f402;
	and.b32  	%r358, %r357, 1;
	setp.eq.b32 	%p103, %r358, 1;
	selp.f32 	%f405, %f403, %f404, %p103;
	selp.f32 	%f406, %f404, %f403, %p103;
	and.b32  	%r359, %r357, 2;
	setp.eq.s32 	%p104, %r359, 0;
	neg.f32 	%f407, %f405;
	selp.f32 	%f408, %f405, %f407, %p104;
	add.s32 	%r360, %r357, 1;
	and.b32  	%r361, %r360, 2;
	setp.eq.s32 	%p105, %r361, 0;
	mov.f32 	%f409, 0f00000000;
	sub.f32 	%f410, %f409, %f406;
	selp.f32 	%f411, %f406, %f410, %p105;
	cvt.rzi.f32.f32 	%f412, %f744;
	setp.eq.f32 	%p106, %f412, %f744;
	mul.f32 	%f413, %f744, 0f00000000;
	selp.f32 	%f755, %f413, %f408, %p106;
	abs.f32 	%f414, %f744;
	setp.gt.f32 	%p107, %f414, 0f4B800000;
	add.f32 	%f415, %f755, 0f3F800000;
	selp.f32 	%f746, %f415, %f411, %p107;
$L__BB0_58:                             // %L631
	or.pred  	%p110, %p66, %p87;
	mov.f32 	%f752, %f250;
	mov.f32 	%f757, %f250;
	@%p110 bra 	$L__BB0_74;
// %bb.59:                              // %L639
	mul.lo.s32 	%r362, %r158, %r25;
	mul.hi.u32 	%r363, %r362, -1431655765;
	shr.u32 	%r364, %r363, 1;
	mul.lo.s32 	%r365, %r364, 3;
	sub.s32 	%r366, %r362, %r365;
	cvt.rn.f32.s32 	%f417, %r366;
	div.approx.f32 	%f60, %f417, %f731;
	abs.f32 	%f750, %f60;
	setp.lt.f32 	%p111, %f750, 0f40000000;
	@%p111 bra 	$L__BB0_71;
// %bb.60:
	setp.gtu.f32 	%p112, %f750, 0f4B800000;
	@%p112 bra 	$L__BB0_67;
	bra.uni 	$L__BB0_61;
$L__BB0_67:
	mov.b32 	%r35, %f750;
	and.b32  	%r367, %r35, 8388607;
	or.b32  	%r2954, %r367, 1065353216;
	mov.b32 	%f749, %r2954;
	add.s32 	%r368, %r35, -1073741824;
	and.b32  	%r2955, %r368, -8388608;
	setp.eq.s32 	%p118, %r2955, 0;
	@%p118 bra 	$L__BB0_70;
// %bb.68:                              // %__nv_fmaf_rn.exit4.i.i.i2083.preheader
	mov.f32 	%f428, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f427,%f428;
	// end inline asm
$L__BB0_69:                             // %__nv_fmaf_rn.exit4.i.i.i2083
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r369, %r2955, 192937984;
	add.s32 	%r370, %r2954, %r369;
	mov.b32 	%f429, %r370;
	mul.f32 	%f430, %f427, %f429;
	sub.f32 	%f431, %f429, %f430;
	fma.rn.f32 	%f432, %f431, %f427, %f430;
	sub.f32 	%f433, %f429, %f432;
	fma.rz.f32 	%f434, %f433, %f427, %f432;
	cvt.rzi.f32.f32 	%f435, %f434;
	sub.f32 	%f749, %f429, %f435;
	sub.s32 	%r2955, %r2955, %r369;
	mov.b32 	%r2954, %f749;
	setp.ne.s32 	%p119, %r2955, 0;
	setp.ne.s32 	%p120, %r2954, 0;
	and.pred  	%p121, %p119, %p120;
	@%p121 bra 	$L__BB0_69;
$L__BB0_70:                             // %__internal_fmodf_slowpath_mod.exit.i.i2085
	setp.gt.u32 	%p122, %r35, 2139095039;
	selp.f32 	%f436, 0f7FFFFFFF, 0f4B800000, %p122;
	mul.f32 	%f437, %f749, 0f34000000;
	mul.f32 	%f750, %f436, %f437;
	bra.uni 	$L__BB0_71;
$L__BB0_61:                             // %__nv_fast_fdividef.exit.i.i.i2062
	mov.f32 	%f419, 0f40000000;
	div.approx.f32 	%f420, %f750, %f419;
	cvt.rzi.f32.f32 	%f748, %f420;
	fma.rn.f32 	%f63, %f748, 0fC0000000, %f750;
	mov.b32 	%r34, %f63;
	setp.lt.u32 	%p113, %r34, 1073741824;
	@%p113 bra 	$L__BB0_66;
// %bb.62:
	setp.lt.u32 	%p114, %r34, -2147483647;
	@%p114 bra 	$L__BB0_64;
// %bb.63:
	add.f32 	%f425, %f748, 0fBF800000;
	setp.lt.f32 	%p117, %f63, 0fC0000000;
	add.f32 	%f426, %f425, 0fBF800000;
	selp.f32 	%f748, %f426, %f425, %p117;
	bra.uni 	$L__BB0_66;
$L__BB0_64:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p115, %f63, 0f40800000;
	@%p115 bra 	$L__BB0_66;
// %bb.65:                              // %__nv_fmaf_rn.exit.i.i.i2066
	add.f32 	%f421, %f748, 0f3F800000;
	fma.rn.f32 	%f423, %f419, 0fC0400000, %f63;
	setp.ge.f32 	%p116, %f423, 0f00000000;
	add.f32 	%f424, %f421, 0f3F800000;
	selp.f32 	%f748, %f424, %f421, %p116;
$L__BB0_66:                             // %__internal_fmodf_fastpath_quot.exit.i.i2069
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_71:                             // %__internal_fmodf_kernel.exit.i2088
	abs.f32 	%f438, %f750;
	setp.gtu.f32 	%p123, %f438, 0f7F800000;
	@%p123 bra 	$L__BB0_73;
// %bb.72:
	mov.b32 	%r371, %f60;
	and.b32  	%r372, %r371, -2147483648;
	mov.b32 	%r373, %f750;
	or.b32  	%r374, %r372, %r373;
	mov.b32 	%f750, %r374;
$L__BB0_73:                             // %__nv_fmodf.exit2089
	add.f32 	%f439, %f750, %f750;
	mov.b32 	%r375, %f439;
	and.b32  	%r376, %r375, -2147483648;
	or.b32  	%r377, %r376, 1056964608;
	mov.b32 	%f440, %r377;
	add.f32 	%f441, %f439, %f440;
	cvt.rzi.f32.f32 	%f442, %f441;
	abs.f32 	%f443, %f439;
	setp.gt.f32 	%p124, %f443, 0f4B000000;
	selp.f32 	%f444, %f439, %f442, %p124;
	cvt.rzi.f32.f32 	%f445, %f439;
	setp.lt.f32 	%p125, %f443, 0f3F000000;
	selp.f32 	%f446, %f445, %f444, %p125;
	cvt.rzi.s32.f32 	%r378, %f446;
	fma.rn.f32 	%f447, %f446, 0fBF000000, %f750;
	mul.f32 	%f448, %f447, %f447;
	fma.rn.f32 	%f449, %f448, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f450, %f448, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f451, %f449, %f448, 0fC0A55DF6;
	fma.rn.f32 	%f452, %f450, %f448, 0f4081E0CF;
	fma.rn.f32 	%f453, %f448, %f447, 0f00000000;
	fma.rn.f32 	%f454, %f452, %f448, 0fC09DE9E6;
	fma.rn.f32 	%f455, %f451, %f453, 0f00000000;
	fma.rn.f32 	%f456, %f454, %f448, 0f3F800000;
	fma.rn.f32 	%f457, %f447, 0f40490FDB, %f455;
	and.b32  	%r379, %r378, 1;
	setp.eq.b32 	%p126, %r379, 1;
	selp.f32 	%f458, %f456, %f457, %p126;
	selp.f32 	%f459, %f457, %f456, %p126;
	and.b32  	%r380, %r378, 2;
	setp.eq.s32 	%p127, %r380, 0;
	neg.f32 	%f460, %f458;
	selp.f32 	%f461, %f458, %f460, %p127;
	add.s32 	%r381, %r378, 1;
	and.b32  	%r382, %r381, 2;
	setp.eq.s32 	%p128, %r382, 0;
	mov.f32 	%f462, 0f00000000;
	sub.f32 	%f463, %f462, %f459;
	selp.f32 	%f464, %f459, %f463, %p128;
	cvt.rzi.f32.f32 	%f465, %f750;
	setp.eq.f32 	%p129, %f465, %f750;
	mul.f32 	%f466, %f750, 0f00000000;
	selp.f32 	%f757, %f466, %f461, %p129;
	abs.f32 	%f467, %f750;
	setp.gt.f32 	%p130, %f467, 0f4B800000;
	add.f32 	%f468, %f757, 0f3F800000;
	selp.f32 	%f752, %f468, %f464, %p130;
$L__BB0_74:                             // %L673
	and.b32  	%r42, %r265, 2;
	setp.eq.s32 	%p131, %r42, 0;
	mov.f32 	%f83, %f746;
	mov.f32 	%f85, %f752;
	@%p131 bra 	$L__BB0_76;
// %bb.75:                              // %L682
	neg.f32 	%f85, %f757;
	neg.f32 	%f83, %f755;
	mov.f32 	%f755, %f746;
	mov.f32 	%f757, %f752;
$L__BB0_76:                             // %L684
	@%p26 bra 	$L__BB0_192;
// %bb.77:
	@%p297 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_78;
$L__BB0_188:
	mov.b32 	%r160, %f788;
	and.b32  	%r389, %r160, 8388607;
	or.b32  	%r3000, %r389, 1065353216;
	mov.b32 	%f787, %r3000;
	add.s32 	%r390, %r160, -1073741824;
	and.b32  	%r3001, %r390, -8388608;
	setp.eq.s32 	%p139, %r3001, 0;
	@%p139 bra 	$L__BB0_191;
// %bb.189:                             // %__nv_fmaf_rn.exit4.i.i.i2114.preheader
	mov.f32 	%f478, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f477,%f478;
	// end inline asm
$L__BB0_190:                            // %__nv_fmaf_rn.exit4.i.i.i2114
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r391, %r3001, 192937984;
	add.s32 	%r392, %r3000, %r391;
	mov.b32 	%f479, %r392;
	mul.f32 	%f480, %f477, %f479;
	sub.f32 	%f481, %f479, %f480;
	fma.rn.f32 	%f482, %f481, %f477, %f480;
	sub.f32 	%f483, %f479, %f482;
	fma.rz.f32 	%f484, %f483, %f477, %f482;
	cvt.rzi.f32.f32 	%f485, %f484;
	sub.f32 	%f787, %f479, %f485;
	sub.s32 	%r3001, %r3001, %r391;
	mov.b32 	%r3000, %f787;
	setp.ne.s32 	%p140, %r3001, 0;
	setp.ne.s32 	%p141, %r3000, 0;
	and.pred  	%p142, %p140, %p141;
	@%p142 bra 	$L__BB0_190;
$L__BB0_191:                            // %__internal_fmodf_slowpath_mod.exit.i.i2116
	setp.gt.u32 	%p143, %r160, 2139095039;
	selp.f32 	%f486, 0f7FFFFFFF, 0f4B800000, %p143;
	mul.f32 	%f487, %f787, 0f34000000;
	mul.f32 	%f788, %f486, %f487;
	bra.uni 	$L__BB0_192;
$L__BB0_78:                             // %__nv_fast_fdividef.exit.i.i.i2093
	mov.f32 	%f469, 0f40000000;
	div.approx.f32 	%f470, %f788, %f469;
	cvt.rzi.f32.f32 	%f786, %f470;
	fma.rn.f32 	%f189, %f786, 0fC0000000, %f788;
	mov.b32 	%r159, %f189;
	setp.lt.u32 	%p134, %r159, 1073741824;
	@%p134 bra 	$L__BB0_187;
// %bb.79:
	setp.lt.u32 	%p135, %r159, -2147483647;
	@%p135 bra 	$L__BB0_185;
// %bb.80:
	add.f32 	%f475, %f786, 0fBF800000;
	setp.lt.f32 	%p138, %f189, 0fC0000000;
	add.f32 	%f476, %f475, 0fBF800000;
	selp.f32 	%f786, %f476, %f475, %p138;
	bra.uni 	$L__BB0_187;
$L__BB0_185:
	add.f32 	%f786, %f786, 0f3F800000;
	setp.ltu.f32 	%p136, %f189, 0f40800000;
	@%p136 bra 	$L__BB0_187;
// %bb.186:                             // %__nv_fmaf_rn.exit.i.i.i2097
	add.f32 	%f471, %f786, 0f3F800000;
	fma.rn.f32 	%f473, %f469, 0fC0400000, %f189;
	setp.ge.f32 	%p137, %f473, 0f00000000;
	add.f32 	%f474, %f471, 0f3F800000;
	selp.f32 	%f786, %f474, %f471, %p137;
$L__BB0_187:                            // %__internal_fmodf_fastpath_quot.exit.i.i2100
	fma.rn.f32 	%f788, %f786, 0fC0000000, %f788;
$L__BB0_192:                            // %__internal_fmodf_kernel.exit.i2119
	abs.f32 	%f488, %f788;
	setp.gtu.f32 	%p144, %f488, 0f7F800000;
	@%p144 bra 	$L__BB0_194;
// %bb.193:
	mov.b32 	%r393, %f788;
	or.b32  	%r394, %r153, %r393;
	mov.b32 	%f788, %r394;
$L__BB0_194:                            // %__nv_fmodf.exit2120
	mov.f32 	%f512, 0f00000000;
	mov.f32 	%f521, 0f41000000;
	div.approx.f32 	%f203, %f512, %f521;
	abs.f32 	%f760, %f203;
	setp.lt.f32 	%p152, %f760, 0f40000000;
	@%p152 bra 	$L__BB0_92;
// %bb.81:
	setp.gtu.f32 	%p153, %f760, 0f4B800000;
	@%p153 bra 	$L__BB0_88;
	bra.uni 	$L__BB0_82;
$L__BB0_88:
	mov.b32 	%r46, %f760;
	and.b32  	%r409, %r46, 8388607;
	or.b32  	%r2956, %r409, 1065353216;
	mov.b32 	%f759, %r2956;
	add.s32 	%r410, %r46, -1073741824;
	and.b32  	%r2957, %r410, -8388608;
	setp.eq.s32 	%p159, %r2957, 0;
	@%p159 bra 	$L__BB0_91;
// %bb.89:                              // %__nv_fmaf_rn.exit4.i.i.i2145.preheader
	mov.f32 	%f531, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f530,%f531;
	// end inline asm
$L__BB0_90:                             // %__nv_fmaf_rn.exit4.i.i.i2145
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r411, %r2957, 192937984;
	add.s32 	%r412, %r2956, %r411;
	mov.b32 	%f532, %r412;
	mul.f32 	%f533, %f530, %f532;
	sub.f32 	%f534, %f532, %f533;
	fma.rn.f32 	%f535, %f534, %f530, %f533;
	sub.f32 	%f536, %f532, %f535;
	fma.rz.f32 	%f537, %f536, %f530, %f535;
	cvt.rzi.f32.f32 	%f538, %f537;
	sub.f32 	%f759, %f532, %f538;
	sub.s32 	%r2957, %r2957, %r411;
	mov.b32 	%r2956, %f759;
	setp.ne.s32 	%p160, %r2957, 0;
	setp.ne.s32 	%p161, %r2956, 0;
	and.pred  	%p162, %p160, %p161;
	@%p162 bra 	$L__BB0_90;
$L__BB0_91:                             // %__internal_fmodf_slowpath_mod.exit.i.i2147
	setp.gt.u32 	%p163, %r46, 2139095039;
	selp.f32 	%f539, 0f7FFFFFFF, 0f4B800000, %p163;
	mul.f32 	%f540, %f759, 0f34000000;
	mul.f32 	%f760, %f539, %f540;
	bra.uni 	$L__BB0_92;
$L__BB0_82:                             // %__nv_fast_fdividef.exit.i.i.i2124
	mov.f32 	%f522, 0f40000000;
	div.approx.f32 	%f523, %f760, %f522;
	cvt.rzi.f32.f32 	%f758, %f523;
	fma.rn.f32 	%f88, %f758, 0fC0000000, %f760;
	mov.b32 	%r45, %f88;
	setp.lt.u32 	%p154, %r45, 1073741824;
	@%p154 bra 	$L__BB0_87;
// %bb.83:
	setp.lt.u32 	%p155, %r45, -2147483647;
	@%p155 bra 	$L__BB0_85;
// %bb.84:
	add.f32 	%f528, %f758, 0fBF800000;
	setp.lt.f32 	%p158, %f88, 0fC0000000;
	add.f32 	%f529, %f528, 0fBF800000;
	selp.f32 	%f758, %f529, %f528, %p158;
	bra.uni 	$L__BB0_87;
$L__BB0_85:
	add.f32 	%f758, %f758, 0f3F800000;
	setp.ltu.f32 	%p156, %f88, 0f40800000;
	@%p156 bra 	$L__BB0_87;
// %bb.86:                              // %__nv_fmaf_rn.exit.i.i.i2128
	add.f32 	%f524, %f758, 0f3F800000;
	fma.rn.f32 	%f526, %f522, 0fC0400000, %f88;
	setp.ge.f32 	%p157, %f526, 0f00000000;
	add.f32 	%f527, %f524, 0f3F800000;
	selp.f32 	%f758, %f527, %f524, %p157;
$L__BB0_87:                             // %__internal_fmodf_fastpath_quot.exit.i.i2131
	fma.rn.f32 	%f760, %f758, 0fC0000000, %f760;
$L__BB0_92:                             // %__internal_fmodf_kernel.exit.i2150
	abs.f32 	%f541, %f760;
	setp.gtu.f32 	%p164, %f541, 0f7F800000;
	@%p164 bra 	$L__BB0_94;
// %bb.93:
	mov.b32 	%r413, %f203;
	and.b32  	%r414, %r413, -2147483648;
	mov.b32 	%r415, %f760;
	or.b32  	%r416, %r414, %r415;
	mov.b32 	%f760, %r416;
$L__BB0_94:                             // %__nv_fmodf.exit2151
	cvt.rn.f32.s32 	%f572, %r144;
	div.approx.f32 	%f104, %f572, %f521;
	abs.f32 	%f764, %f104;
	setp.lt.f32 	%p172, %f764, 0f40000000;
	@%p172 bra 	$L__BB0_106;
// %bb.95:
	setp.gtu.f32 	%p173, %f764, 0f4B800000;
	@%p173 bra 	$L__BB0_102;
	bra.uni 	$L__BB0_96;
$L__BB0_102:
	mov.b32 	%r54, %f764;
	and.b32  	%r425, %r54, 8388607;
	or.b32  	%r2958, %r425, 1065353216;
	mov.b32 	%f763, %r2958;
	add.s32 	%r426, %r54, -1073741824;
	and.b32  	%r2959, %r426, -8388608;
	setp.eq.s32 	%p179, %r2959, 0;
	@%p179 bra 	$L__BB0_105;
// %bb.103:                             // %__nv_fmaf_rn.exit4.i.i.i2176.preheader
	mov.f32 	%f583, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f582,%f583;
	// end inline asm
$L__BB0_104:                            // %__nv_fmaf_rn.exit4.i.i.i2176
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r427, %r2959, 192937984;
	add.s32 	%r428, %r2958, %r427;
	mov.b32 	%f584, %r428;
	mul.f32 	%f585, %f582, %f584;
	sub.f32 	%f586, %f584, %f585;
	fma.rn.f32 	%f587, %f586, %f582, %f585;
	sub.f32 	%f588, %f584, %f587;
	fma.rz.f32 	%f589, %f588, %f582, %f587;
	cvt.rzi.f32.f32 	%f590, %f589;
	sub.f32 	%f763, %f584, %f590;
	sub.s32 	%r2959, %r2959, %r427;
	mov.b32 	%r2958, %f763;
	setp.ne.s32 	%p180, %r2959, 0;
	setp.ne.s32 	%p181, %r2958, 0;
	and.pred  	%p182, %p180, %p181;
	@%p182 bra 	$L__BB0_104;
$L__BB0_105:                            // %__internal_fmodf_slowpath_mod.exit.i.i2178
	setp.gt.u32 	%p183, %r54, 2139095039;
	selp.f32 	%f591, 0f7FFFFFFF, 0f4B800000, %p183;
	mul.f32 	%f592, %f763, 0f34000000;
	mul.f32 	%f764, %f591, %f592;
	bra.uni 	$L__BB0_106;
$L__BB0_96:                             // %__nv_fast_fdividef.exit.i.i.i2155
	mov.f32 	%f574, 0f40000000;
	div.approx.f32 	%f575, %f764, %f574;
	cvt.rzi.f32.f32 	%f762, %f575;
	fma.rn.f32 	%f107, %f762, 0fC0000000, %f764;
	mov.b32 	%r53, %f107;
	setp.lt.u32 	%p174, %r53, 1073741824;
	@%p174 bra 	$L__BB0_101;
// %bb.97:
	setp.lt.u32 	%p175, %r53, -2147483647;
	@%p175 bra 	$L__BB0_99;
// %bb.98:
	add.f32 	%f580, %f762, 0fBF800000;
	setp.lt.f32 	%p178, %f107, 0fC0000000;
	add.f32 	%f581, %f580, 0fBF800000;
	selp.f32 	%f762, %f581, %f580, %p178;
	bra.uni 	$L__BB0_101;
$L__BB0_99:
	add.f32 	%f762, %f762, 0f3F800000;
	setp.ltu.f32 	%p176, %f107, 0f40800000;
	@%p176 bra 	$L__BB0_101;
// %bb.100:                             // %__nv_fmaf_rn.exit.i.i.i2159
	add.f32 	%f576, %f762, 0f3F800000;
	fma.rn.f32 	%f578, %f574, 0fC0400000, %f107;
	setp.ge.f32 	%p177, %f578, 0f00000000;
	add.f32 	%f579, %f576, 0f3F800000;
	selp.f32 	%f762, %f579, %f576, %p177;
$L__BB0_101:                            // %__internal_fmodf_fastpath_quot.exit.i.i2162
	fma.rn.f32 	%f764, %f762, 0fC0000000, %f764;
$L__BB0_106:                            // %__internal_fmodf_kernel.exit.i2181
	abs.f32 	%f593, %f764;
	setp.gtu.f32 	%p184, %f593, 0f7F800000;
	@%p184 bra 	$L__BB0_108;
// %bb.107:
	mov.b32 	%r429, %f104;
	and.b32  	%r430, %r429, -2147483648;
	mov.b32 	%r431, %f764;
	or.b32  	%r432, %r430, %r431;
	mov.b32 	%f764, %r432;
$L__BB0_108:                            // %__nv_fmodf.exit2182
	and.b32  	%r64, %r265, 1;
	shr.u32 	%r65, %r265, 4;
	setp.ne.s32 	%p192, %r64, %r65;
	mov.f32 	%f770, %f512;
	mov.f32 	%f779, %f512;
	@%p192 bra 	$L__BB0_124;
// %bb.109:                             // %L889
	mov.f32 	%f626, 0f3F800000;
	mov.f32 	%f627, 0f00000000;
	div.approx.f32 	%f121, %f627, %f626;
	abs.f32 	%f768, %f121;
	setp.lt.f32 	%p193, %f768, 0f40000000;
	@%p193 bra 	$L__BB0_121;
// %bb.110:
	setp.gtu.f32 	%p194, %f768, 0f4B800000;
	@%p194 bra 	$L__BB0_117;
	bra.uni 	$L__BB0_111;
$L__BB0_117:
	mov.b32 	%r67, %f768;
	and.b32  	%r447, %r67, 8388607;
	or.b32  	%r2960, %r447, 1065353216;
	mov.b32 	%f767, %r2960;
	add.s32 	%r448, %r67, -1073741824;
	and.b32  	%r2961, %r448, -8388608;
	setp.eq.s32 	%p200, %r2961, 0;
	@%p200 bra 	$L__BB0_120;
// %bb.118:                             // %__nv_fmaf_rn.exit4.i.i.i2207.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f636,%f626;
	// end inline asm
$L__BB0_119:                            // %__nv_fmaf_rn.exit4.i.i.i2207
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r449, %r2961, 192937984;
	add.s32 	%r450, %r2960, %r449;
	mov.b32 	%f638, %r450;
	mul.f32 	%f639, %f636, %f638;
	sub.f32 	%f640, %f638, %f639;
	fma.rn.f32 	%f641, %f640, %f636, %f639;
	sub.f32 	%f642, %f638, %f641;
	fma.rz.f32 	%f643, %f642, %f636, %f641;
	cvt.rzi.f32.f32 	%f644, %f643;
	sub.f32 	%f767, %f638, %f644;
	sub.s32 	%r2961, %r2961, %r449;
	mov.b32 	%r2960, %f767;
	setp.ne.s32 	%p201, %r2961, 0;
	setp.ne.s32 	%p202, %r2960, 0;
	and.pred  	%p203, %p201, %p202;
	@%p203 bra 	$L__BB0_119;
$L__BB0_120:                            // %__internal_fmodf_slowpath_mod.exit.i.i2209
	setp.gt.u32 	%p204, %r67, 2139095039;
	selp.f32 	%f645, 0f7FFFFFFF, 0f4B800000, %p204;
	mul.f32 	%f646, %f767, 0f34000000;
	mul.f32 	%f768, %f645, %f646;
	bra.uni 	$L__BB0_121;
$L__BB0_111:                            // %__nv_fast_fdividef.exit.i.i.i2186
	mov.f32 	%f628, 0f40000000;
	div.approx.f32 	%f629, %f768, %f628;
	cvt.rzi.f32.f32 	%f766, %f629;
	fma.rn.f32 	%f124, %f766, 0fC0000000, %f768;
	mov.b32 	%r66, %f124;
	setp.lt.u32 	%p195, %r66, 1073741824;
	@%p195 bra 	$L__BB0_116;
// %bb.112:
	setp.lt.u32 	%p196, %r66, -2147483647;
	@%p196 bra 	$L__BB0_114;
// %bb.113:
	add.f32 	%f634, %f766, 0fBF800000;
	setp.lt.f32 	%p199, %f124, 0fC0000000;
	add.f32 	%f635, %f634, 0fBF800000;
	selp.f32 	%f766, %f635, %f634, %p199;
	bra.uni 	$L__BB0_116;
$L__BB0_114:
	add.f32 	%f766, %f766, 0f3F800000;
	setp.ltu.f32 	%p197, %f124, 0f40800000;
	@%p197 bra 	$L__BB0_116;
// %bb.115:                             // %__nv_fmaf_rn.exit.i.i.i2190
	add.f32 	%f630, %f766, 0f3F800000;
	fma.rn.f32 	%f632, %f628, 0fC0400000, %f124;
	setp.ge.f32 	%p198, %f632, 0f00000000;
	add.f32 	%f633, %f630, 0f3F800000;
	selp.f32 	%f766, %f633, %f630, %p198;
$L__BB0_116:                            // %__internal_fmodf_fastpath_quot.exit.i.i2193
	fma.rn.f32 	%f768, %f766, 0fC0000000, %f768;
$L__BB0_121:                            // %__internal_fmodf_kernel.exit.i2212
	abs.f32 	%f647, %f768;
	setp.gtu.f32 	%p205, %f647, 0f7F800000;
	@%p205 bra 	$L__BB0_123;
// %bb.122:
	mov.b32 	%r451, %f121;
	and.b32  	%r452, %r451, -2147483648;
	mov.b32 	%r453, %f768;
	or.b32  	%r454, %r452, %r453;
	mov.b32 	%f768, %r454;
$L__BB0_123:                            // %__nv_fmodf.exit2213
	add.f32 	%f648, %f768, %f768;
	mov.b32 	%r455, %f648;
	and.b32  	%r456, %r455, -2147483648;
	or.b32  	%r457, %r456, 1056964608;
	mov.b32 	%f649, %r457;
	add.f32 	%f650, %f648, %f649;
	cvt.rzi.f32.f32 	%f651, %f650;
	abs.f32 	%f652, %f648;
	setp.gt.f32 	%p206, %f652, 0f4B000000;
	selp.f32 	%f653, %f648, %f651, %p206;
	cvt.rzi.f32.f32 	%f654, %f648;
	setp.lt.f32 	%p207, %f652, 0f3F000000;
	selp.f32 	%f655, %f654, %f653, %p207;
	cvt.rzi.s32.f32 	%r458, %f655;
	fma.rn.f32 	%f656, %f655, 0fBF000000, %f768;
	mul.f32 	%f657, %f656, %f656;
	fma.rn.f32 	%f658, %f657, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f659, %f657, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f660, %f658, %f657, 0fC0A55DF6;
	fma.rn.f32 	%f661, %f659, %f657, 0f4081E0CF;
	fma.rn.f32 	%f662, %f657, %f656, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f657, 0fC09DE9E6;
	fma.rn.f32 	%f664, %f660, %f662, 0f00000000;
	fma.rn.f32 	%f665, %f663, %f657, 0f3F800000;
	fma.rn.f32 	%f666, %f656, 0f40490FDB, %f664;
	and.b32  	%r459, %r458, 1;
	setp.eq.b32 	%p208, %r459, 1;
	selp.f32 	%f667, %f665, %f666, %p208;
	selp.f32 	%f668, %f666, %f665, %p208;
	and.b32  	%r460, %r458, 2;
	setp.eq.s32 	%p209, %r460, 0;
	neg.f32 	%f669, %f667;
	selp.f32 	%f670, %f667, %f669, %p209;
	add.s32 	%r461, %r458, 1;
	and.b32  	%r462, %r461, 2;
	setp.eq.s32 	%p210, %r462, 0;
	sub.f32 	%f672, %f627, %f668;
	selp.f32 	%f673, %f668, %f672, %p210;
	cvt.rzi.f32.f32 	%f674, %f768;
	setp.eq.f32 	%p211, %f674, %f768;
	mul.f32 	%f675, %f768, 0f00000000;
	selp.f32 	%f779, %f675, %f670, %p211;
	abs.f32 	%f676, %f768;
	setp.gt.f32 	%p212, %f676, 0f4B800000;
	add.f32 	%f677, %f779, 0f3F800000;
	selp.f32 	%f770, %f677, %f673, %p212;
$L__BB0_124:                            // %L928
	and.b32  	%r63, %r144, 1;
	mov.f32 	%f776, %f512;
	mov.f32 	%f781, %f512;
	@%p192 bra 	$L__BB0_140;
// %bb.125:                             // %L931
	cvt.rn.f32.s32 	%f679, %r63;
	mov.f32 	%f680, 0f3F800000;
	div.approx.f32 	%f142, %f679, %f680;
	abs.f32 	%f774, %f142;
	setp.lt.f32 	%p214, %f774, 0f40000000;
	@%p214 bra 	$L__BB0_137;
// %bb.126:
	setp.gtu.f32 	%p215, %f774, 0f4B800000;
	@%p215 bra 	$L__BB0_133;
	bra.uni 	$L__BB0_127;
$L__BB0_133:
	mov.b32 	%r75, %f774;
	and.b32  	%r463, %r75, 8388607;
	or.b32  	%r2962, %r463, 1065353216;
	mov.b32 	%f773, %r2962;
	add.s32 	%r464, %r75, -1073741824;
	and.b32  	%r2963, %r464, -8388608;
	setp.eq.s32 	%p221, %r2963, 0;
	@%p221 bra 	$L__BB0_136;
// %bb.134:                             // %__nv_fmaf_rn.exit4.i.i.i2238.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f689,%f680;
	// end inline asm
$L__BB0_135:                            // %__nv_fmaf_rn.exit4.i.i.i2238
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r465, %r2963, 192937984;
	add.s32 	%r466, %r2962, %r465;
	mov.b32 	%f691, %r466;
	mul.f32 	%f692, %f689, %f691;
	sub.f32 	%f693, %f691, %f692;
	fma.rn.f32 	%f694, %f693, %f689, %f692;
	sub.f32 	%f695, %f691, %f694;
	fma.rz.f32 	%f696, %f695, %f689, %f694;
	cvt.rzi.f32.f32 	%f697, %f696;
	sub.f32 	%f773, %f691, %f697;
	sub.s32 	%r2963, %r2963, %r465;
	mov.b32 	%r2962, %f773;
	setp.ne.s32 	%p222, %r2963, 0;
	setp.ne.s32 	%p223, %r2962, 0;
	and.pred  	%p224, %p222, %p223;
	@%p224 bra 	$L__BB0_135;
$L__BB0_136:                            // %__internal_fmodf_slowpath_mod.exit.i.i2240
	setp.gt.u32 	%p225, %r75, 2139095039;
	selp.f32 	%f698, 0f7FFFFFFF, 0f4B800000, %p225;
	mul.f32 	%f699, %f773, 0f34000000;
	mul.f32 	%f774, %f698, %f699;
	bra.uni 	$L__BB0_137;
$L__BB0_127:                            // %__nv_fast_fdividef.exit.i.i.i2217
	mov.f32 	%f681, 0f40000000;
	div.approx.f32 	%f682, %f774, %f681;
	cvt.rzi.f32.f32 	%f772, %f682;
	fma.rn.f32 	%f145, %f772, 0fC0000000, %f774;
	mov.b32 	%r74, %f145;
	setp.lt.u32 	%p216, %r74, 1073741824;
	@%p216 bra 	$L__BB0_132;
// %bb.128:
	setp.lt.u32 	%p217, %r74, -2147483647;
	@%p217 bra 	$L__BB0_130;
// %bb.129:
	add.f32 	%f687, %f772, 0fBF800000;
	setp.lt.f32 	%p220, %f145, 0fC0000000;
	add.f32 	%f688, %f687, 0fBF800000;
	selp.f32 	%f772, %f688, %f687, %p220;
	bra.uni 	$L__BB0_132;
$L__BB0_130:
	add.f32 	%f772, %f772, 0f3F800000;
	setp.ltu.f32 	%p218, %f145, 0f40800000;
	@%p218 bra 	$L__BB0_132;
// %bb.131:                             // %__nv_fmaf_rn.exit.i.i.i2221
	add.f32 	%f683, %f772, 0f3F800000;
	fma.rn.f32 	%f685, %f681, 0fC0400000, %f145;
	setp.ge.f32 	%p219, %f685, 0f00000000;
	add.f32 	%f686, %f683, 0f3F800000;
	selp.f32 	%f772, %f686, %f683, %p219;
$L__BB0_132:                            // %__internal_fmodf_fastpath_quot.exit.i.i2224
	fma.rn.f32 	%f774, %f772, 0fC0000000, %f774;
$L__BB0_137:                            // %__internal_fmodf_kernel.exit.i2243
	abs.f32 	%f700, %f774;
	setp.gtu.f32 	%p226, %f700, 0f7F800000;
	@%p226 bra 	$L__BB0_139;
// %bb.138:
	mov.b32 	%r467, %f142;
	and.b32  	%r468, %r467, -2147483648;
	mov.b32 	%r469, %f774;
	or.b32  	%r470, %r468, %r469;
	mov.b32 	%f774, %r470;
$L__BB0_139:                            // %__nv_fmodf.exit2244
	add.f32 	%f701, %f774, %f774;
	mov.b32 	%r471, %f701;
	and.b32  	%r472, %r471, -2147483648;
	or.b32  	%r473, %r472, 1056964608;
	mov.b32 	%f702, %r473;
	add.f32 	%f703, %f701, %f702;
	cvt.rzi.f32.f32 	%f704, %f703;
	abs.f32 	%f705, %f701;
	setp.gt.f32 	%p227, %f705, 0f4B000000;
	selp.f32 	%f706, %f701, %f704, %p227;
	cvt.rzi.f32.f32 	%f707, %f701;
	setp.lt.f32 	%p228, %f705, 0f3F000000;
	selp.f32 	%f708, %f707, %f706, %p228;
	cvt.rzi.s32.f32 	%r474, %f708;
	fma.rn.f32 	%f709, %f708, 0fBF000000, %f774;
	mul.f32 	%f710, %f709, %f709;
	fma.rn.f32 	%f711, %f710, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f712, %f710, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f713, %f711, %f710, 0fC0A55DF6;
	fma.rn.f32 	%f714, %f712, %f710, 0f4081E0CF;
	fma.rn.f32 	%f715, %f710, %f709, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f710, 0fC09DE9E6;
	fma.rn.f32 	%f717, %f713, %f715, 0f00000000;
	fma.rn.f32 	%f718, %f716, %f710, 0f3F800000;
	fma.rn.f32 	%f719, %f709, 0f40490FDB, %f717;
	and.b32  	%r475, %r474, 1;
	setp.eq.b32 	%p229, %r475, 1;
	selp.f32 	%f720, %f718, %f719, %p229;
	selp.f32 	%f721, %f719, %f718, %p229;
	and.b32  	%r476, %r474, 2;
	setp.eq.s32 	%p230, %r476, 0;
	neg.f32 	%f722, %f720;
	selp.f32 	%f723, %f720, %f722, %p230;
	add.s32 	%r477, %r474, 1;
	and.b32  	%r478, %r477, 2;
	setp.eq.s32 	%p231, %r478, 0;
	mov.f32 	%f724, 0f00000000;
	sub.f32 	%f725, %f724, %f721;
	selp.f32 	%f726, %f721, %f725, %p231;
	cvt.rzi.f32.f32 	%f727, %f774;
	setp.eq.f32 	%p232, %f727, %f774;
	mul.f32 	%f728, %f774, 0f00000000;
	selp.f32 	%f781, %f728, %f723, %p232;
	abs.f32 	%f729, %f774;
	setp.gt.f32 	%p233, %f729, 0f4B800000;
	add.f32 	%f730, %f781, 0f3F800000;
	selp.f32 	%f776, %f730, %f726, %p233;
$L__BB0_140:                            // %L965
	mov.f32 	%f165, %f770;
	mov.f32 	%f167, %f776;
	@%p131 bra 	$L__BB0_142;
// %bb.141:                             // %L974
	neg.f32 	%f167, %f781;
	neg.f32 	%f165, %f779;
	mov.f32 	%f779, %f770;
	mov.f32 	%f781, %f776;
$L__BB0_142:                            // %L976
	setp.gt.u32 	%p235, %r265, 15;
	mov.u32 	%r169, 999999999;
	@%p235 bra 	$L__BB0_196;
// %bb.143:                             // %L1006
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	mad.lo.s32 	%r486, %r265, 6, %r4;
	cvt.u16.u32 	%rs15, %r486;
	and.b16  	%rs16, %rs15, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 14;
	mul.lo.s16 	%rs19, %rs18, 96;
	sub.s16 	%rs20, %rs15, %rs19;
	cvt.u32.u16 	%r487, %rs20;
	and.b32  	%r488, %r487, 255;
	mul.wide.u32 	%rd21, %r488, 4;
	add.s64 	%rd22, %rd1, %rd21;
	ld.global.u32 	%r489, [%rd22];
	shl.b32 	%r490, %r489, 16;
	cvt.s32.s16 	%r84, %r489;
	shr.s32 	%r85, %r489, 16;
	or.b32  	%r491, %r490, 65535;
	setp.lt.u32 	%p236, %r491, 589823;
	setp.lt.u32 	%p237, %r489, 786432;
	and.pred  	%p238, %p236, %p237;
	@%p238 bra 	$L__BB0_195;
	bra.uni 	$L__BB0_144;
$L__BB0_195:                            // %L1246
	mul.lo.s32 	%r495, %r85, 290;
	mad.lo.s32 	%r169, %r84, 33, %r495;
$L__BB0_196:                            // %pass543
	add.f32 	%f227, %f784, %f784;
	mov.b32 	%r293, %f227;
	add.f32 	%f489, %f788, %f788;
	and.b32  	%r294, %r293, -2147483648;
	add.f32 	%f282, %f734, %f734;
	mov.b32 	%r401, %f489;
	or.b32  	%r295, %r294, 1056964608;
	mov.b32 	%r310, %f282;
	and.b32  	%r402, %r401, -2147483648;
	add.f32 	%f542, %f760, %f760;
	add.f32 	%f595, %f764, %f764;
	mov.b32 	%f228, %r295;
	and.b32  	%r311, %r310, -2147483648;
	or.b32  	%r403, %r402, 1056964608;
	mov.b32 	%r417, %f542;
	mov.b32 	%r439, %f595;
	add.f32 	%f229, %f227, %f228;
	abs.f32 	%f231, %f227;
	or.b32  	%r312, %r311, 1056964608;
	mov.b32 	%f490, %r403;
	and.b32  	%r418, %r417, -2147483648;
	and.b32  	%r440, %r439, -2147483648;
	cvt.rzi.f32.f32 	%f230, %f229;
	setp.gt.f32 	%p39, %f231, 0f4B000000;
	mov.b32 	%f283, %r312;
	add.f32 	%f491, %f489, %f490;
	abs.f32 	%f493, %f489;
	or.b32  	%r419, %r418, 1056964608;
	or.b32  	%r441, %r440, 1056964608;
	selp.f32 	%f232, %f227, %f230, %p39;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p40, %f231, 0f3F000000;
	add.f32 	%f284, %f282, %f283;
	abs.f32 	%f286, %f282;
	cvt.rzi.f32.f32 	%f492, %f491;
	setp.gt.f32 	%p145, %f493, 0f4B000000;
	mov.b32 	%f543, %r419;
	mov.b32 	%f596, %r441;
	selp.f32 	%f234, %f233, %f232, %p40;
	cvt.rzi.f32.f32 	%f285, %f284;
	setp.gt.f32 	%p59, %f286, 0f4B000000;
	selp.f32 	%f494, %f489, %f492, %p145;
	cvt.rzi.f32.f32 	%f495, %f489;
	setp.lt.f32 	%p146, %f493, 0f3F000000;
	add.f32 	%f544, %f542, %f543;
	abs.f32 	%f546, %f542;
	add.f32 	%f597, %f595, %f596;
	abs.f32 	%f599, %f595;
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f784;
	selp.f32 	%f287, %f282, %f285, %p59;
	cvt.rzi.f32.f32 	%f288, %f282;
	setp.lt.f32 	%p60, %f286, 0f3F000000;
	selp.f32 	%f496, %f495, %f494, %p146;
	cvt.rzi.f32.f32 	%f545, %f544;
	setp.gt.f32 	%p165, %f546, 0f4B000000;
	cvt.rzi.f32.f32 	%f598, %f597;
	setp.gt.f32 	%p185, %f599, 0f4B000000;
	mul.f32 	%f236, %f235, %f235;
	selp.f32 	%f289, %f288, %f287, %p60;
	fma.rn.f32 	%f497, %f496, 0fBF000000, %f788;
	selp.f32 	%f547, %f542, %f545, %p165;
	cvt.rzi.f32.f32 	%f548, %f542;
	setp.lt.f32 	%p166, %f546, 0f3F000000;
	selp.f32 	%f600, %f595, %f598, %p185;
	cvt.rzi.f32.f32 	%f601, %f595;
	setp.lt.f32 	%p186, %f599, 0f3F000000;
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f290, %f289, 0fBF000000, %f734;
	mul.f32 	%f498, %f497, %f497;
	selp.f32 	%f549, %f548, %f547, %p166;
	selp.f32 	%f602, %f601, %f600, %p186;
	cvt.rzi.s32.f32 	%r296, %f234;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	mul.f32 	%f291, %f290, %f290;
	fma.rn.f32 	%f499, %f498, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f500, %f498, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f550, %f549, 0fBF000000, %f760;
	fma.rn.f32 	%f603, %f602, 0fBF000000, %f764;
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r297, %r296, 1;
	fma.rn.f32 	%f292, %f291, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f293, %f291, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r404, %f496;
	fma.rn.f32 	%f501, %f499, %f498, 0fC0A55DF6;
	fma.rn.f32 	%f502, %f500, %f498, 0f4081E0CF;
	fma.rn.f32 	%f503, %f498, %f497, 0f00000000;
	mul.f32 	%f551, %f550, %f550;
	mul.f32 	%f604, %f603, %f603;
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p41, %r297, 1;
	cvt.rzi.s32.f32 	%r313, %f289;
	fma.rn.f32 	%f294, %f292, %f291, 0fC0A55DF6;
	fma.rn.f32 	%f295, %f293, %f291, 0f4081E0CF;
	fma.rn.f32 	%f296, %f291, %f290, 0f00000000;
	fma.rn.f32 	%f504, %f502, %f498, 0fC09DE9E6;
	fma.rn.f32 	%f505, %f501, %f503, 0f00000000;
	and.b32  	%r405, %r404, 1;
	fma.rn.f32 	%f552, %f551, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f553, %f551, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f604, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f606, %f604, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f246, %f244, %f245, %p41;
	and.b32  	%r298, %r296, 2;
	fma.rn.f32 	%f297, %f295, %f291, 0fC09DE9E6;
	fma.rn.f32 	%f298, %f294, %f296, 0f00000000;
	and.b32  	%r314, %r313, 1;
	fma.rn.f32 	%f506, %f504, %f498, 0f3F800000;
	fma.rn.f32 	%f507, %f497, 0f40490FDB, %f505;
	setp.eq.b32 	%p147, %r405, 1;
	cvt.rzi.s32.f32 	%r420, %f549;
	fma.rn.f32 	%f554, %f552, %f551, 0fC0A55DF6;
	fma.rn.f32 	%f555, %f553, %f551, 0f4081E0CF;
	fma.rn.f32 	%f556, %f551, %f550, 0f00000000;
	cvt.rzi.s32.f32 	%r442, %f602;
	fma.rn.f32 	%f607, %f605, %f604, 0fC0A55DF6;
	fma.rn.f32 	%f608, %f606, %f604, 0f4081E0CF;
	fma.rn.f32 	%f609, %f604, %f603, 0f00000000;
	setp.eq.s32 	%p42, %r298, 0;
	neg.f32 	%f248, %f246;
	add.s32 	%r299, %r296, 1;
	cvt.rzi.f32.f32 	%f253, %f784;
	fma.rn.f32 	%f299, %f297, %f291, 0f3F800000;
	fma.rn.f32 	%f300, %f290, 0f40490FDB, %f298;
	setp.eq.b32 	%p61, %r314, 1;
	selp.f32 	%f508, %f506, %f507, %p147;
	and.b32  	%r406, %r404, 2;
	fma.rn.f32 	%f557, %f555, %f551, 0fC09DE9E6;
	fma.rn.f32 	%f558, %f554, %f556, 0f00000000;
	and.b32  	%r421, %r420, 1;
	fma.rn.f32 	%f610, %f608, %f604, 0fC09DE9E6;
	fma.rn.f32 	%f611, %f607, %f609, 0f00000000;
	and.b32  	%r443, %r442, 1;
	selp.f32 	%f247, %f245, %f244, %p41;
	selp.f32 	%f249, %f246, %f248, %p42;
	and.b32  	%r300, %r299, 2;
	setp.eq.f32 	%p44, %f253, %f784;
	mul.f32 	%f254, %f784, 0f00000000;
	selp.f32 	%f301, %f299, %f300, %p61;
	and.b32  	%r315, %r313, 2;
	setp.eq.s32 	%p148, %r406, 0;
	neg.f32 	%f510, %f508;
	add.s32 	%r407, %r404, 1;
	cvt.rzi.f32.f32 	%f515, %f788;
	fma.rn.f32 	%f559, %f557, %f551, 0f3F800000;
	fma.rn.f32 	%f560, %f550, 0f40490FDB, %f558;
	setp.eq.b32 	%p167, %r421, 1;
	fma.rn.f32 	%f612, %f610, %f604, 0f3F800000;
	fma.rn.f32 	%f613, %f603, 0f40490FDB, %f611;
	setp.eq.b32 	%p187, %r443, 1;
	setp.eq.s32 	%p43, %r300, 0;
	sub.f32 	%f251, %f250, %f247;
	selp.f32 	%f255, %f254, %f249, %p44;
	abs.f32 	%f256, %f784;
	setp.eq.s32 	%p62, %r315, 0;
	neg.f32 	%f303, %f301;
	add.s32 	%r316, %r313, 1;
	cvt.rzi.f32.f32 	%f307, %f734;
	selp.f32 	%f509, %f507, %f506, %p147;
	selp.f32 	%f511, %f508, %f510, %p148;
	and.b32  	%r408, %r407, 2;
	setp.eq.f32 	%p150, %f515, %f788;
	mul.f32 	%f516, %f788, 0f00000000;
	selp.f32 	%f561, %f559, %f560, %p167;
	and.b32  	%r422, %r420, 2;
	selp.f32 	%f614, %f612, %f613, %p187;
	and.b32  	%r444, %r442, 2;
	selp.f32 	%f252, %f247, %f251, %p43;
	setp.gt.f32 	%p45, %f256, 0f4B800000;
	add.f32 	%f257, %f255, 0f3F800000;
	selp.f32 	%f302, %f300, %f299, %p61;
	selp.f32 	%f304, %f301, %f303, %p62;
	and.b32  	%r317, %r316, 2;
	setp.eq.f32 	%p64, %f307, %f734;
	mul.f32 	%f308, %f734, 0f00000000;
	setp.eq.s32 	%p149, %r408, 0;
	sub.f32 	%f513, %f512, %f509;
	selp.f32 	%f517, %f516, %f511, %p150;
	abs.f32 	%f518, %f788;
	setp.eq.s32 	%p168, %r422, 0;
	neg.f32 	%f563, %f561;
	add.s32 	%r423, %r420, 1;
	cvt.rzi.f32.f32 	%f568, %f760;
	setp.eq.s32 	%p188, %r444, 0;
	neg.f32 	%f616, %f614;
	add.s32 	%r445, %r442, 1;
	cvt.rzi.f32.f32 	%f620, %f764;
	selp.f32 	%f258, %f257, %f252, %p45;
	setp.eq.s32 	%p63, %r317, 0;
	sub.f32 	%f305, %f250, %f302;
	selp.f32 	%f16, %f308, %f304, %p64;
	abs.f32 	%f309, %f734;
	selp.f32 	%f514, %f509, %f513, %p149;
	setp.gt.f32 	%p151, %f518, 0f4B800000;
	add.f32 	%f519, %f517, 0f3F800000;
	selp.f32 	%f562, %f560, %f559, %p167;
	selp.f32 	%f564, %f561, %f563, %p168;
	and.b32  	%r424, %r423, 2;
	setp.eq.f32 	%p170, %f568, %f760;
	mul.f32 	%f569, %f760, 0f00000000;
	selp.f32 	%f615, %f613, %f612, %p187;
	selp.f32 	%f617, %f614, %f616, %p188;
	and.b32  	%r446, %r445, 2;
	setp.eq.f32 	%p190, %f620, %f764;
	mul.f32 	%f621, %f764, 0f00000000;
	mov.b32 	%r289, %f258;
	mov.b32 	%r292, %f255;
	selp.f32 	%f306, %f302, %f305, %p63;
	setp.gt.f32 	%p65, %f309, 0f4B800000;
	add.f32 	%f310, %f16, 0f3F800000;
	selp.f32 	%f520, %f519, %f514, %p151;
	setp.eq.s32 	%p169, %r424, 0;
	sub.f32 	%f566, %f512, %f562;
	selp.f32 	%f102, %f569, %f564, %p170;
	abs.f32 	%f570, %f760;
	setp.eq.s32 	%p189, %r446, 0;
	sub.f32 	%f618, %f512, %f615;
	selp.f32 	%f622, %f621, %f617, %p190;
	abs.f32 	%f623, %f764;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r288, %r292, -2147483648;
	selp.f32 	%f17, %f310, %f306, %p65;
	mov.b32 	%r397, %f520;
	mov.b32 	%r400, %f517;
	selp.f32 	%f567, %f562, %f566, %p169;
	setp.gt.f32 	%p171, %f570, 0f4B800000;
	add.f32 	%f571, %f102, 0f3F800000;
	selp.f32 	%f619, %f615, %f618, %p189;
	setp.gt.f32 	%p191, %f623, 0f4B800000;
	add.f32 	%f624, %f622, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r287, %r289, %r288;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r290, %r292, %r289;
	// end inline asm
	mov.b32 	%r340, %f17;
	mov.b32 	%r341, %f37;
	mov.b32 	%r343, %f16;
	mov.b32 	%r344, %f38;
	mov.b32 	%r384, %f83;
	mov.b32 	%r385, %f85;
	mov.b32 	%r387, %f755;
	mov.b32 	%r388, %f757;
	xor.b32  	%r396, %r400, -2147483648;
	selp.f32 	%f103, %f571, %f567, %p171;
	selp.f32 	%f625, %f624, %f619, %p191;
	// begin inline asm
	cvt.rn.f16x2.f32 %r339, %r341, %r340;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r342, %r344, %r343;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r383, %r385, %r384;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r386, %r388, %r387;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r395, %r397, %r396;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r398, %r400, %r397;
	// end inline asm
	mov.b32 	%r435, %f625;
	mov.b32 	%r434, %f103;
	mov.b32 	%r438, %f622;
	mov.b32 	%r437, %f102;
	// begin inline asm
	cvt.rn.f16x2.f32 %r433, %r435, %r434;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r436, %r438, %r437;
	// end inline asm
	mov.b32 	%r480, %f165;
	mov.b32 	%r481, %f167;
	// begin inline asm
	cvt.rn.f16x2.f32 %r479, %r481, %r480;
	// end inline asm
	mov.b32 	%r483, %f779;
	mov.b32 	%r484, %f781;
	// begin inline asm
	cvt.rn.f16x2.f32 %r482, %r484, %r483;
	// end inline asm
	shl.b32 	%r497, %r4, 1;
	and.b32  	%r498, %r497, 2;
	shr.u32 	%r499, %r265, 3;
	bfe.u32 	%r500, %r265, 3, 1;
	or.b32  	%r501, %r498, %r500;
	and.b32  	%r502, %r2, 127;
	mul.lo.s32 	%r503, %r502, 192;
	mul.lo.s32 	%r504, %r143, 24;
	and.b32  	%r505, %r499, 2;
	or.b32  	%r170, %r63, %r505;
	cvt.u16.u32 	%rs23, %r170;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 9;
	mul.lo.s16 	%rs26, %rs25, 3;
	sub.s16 	%rs27, %rs23, %rs26;
	cvt.u32.u16 	%r506, %rs27;
	and.b32  	%r507, %r506, 255;
	and.b16  	%rs28, %rs27, 255;
	mul.wide.u16 	%r508, %rs28, 8;
	add.s32 	%r509, %r504, %r503;
	or.b32  	%r510, %r509, %r501;
	add.s32 	%r511, %r510, %r508;
	mul.wide.u32 	%rd28, %r511, 4;
	add.s64 	%rd29, %rd2, %rd28;
	ld.global.u32 	%r171, [%rd29];
	cvt.u64.u32 	%rd30, %r508;
	cvt.u64.u32 	%rd31, %r501;
	cvt.u64.u32 	%rd32, %r504;
	cvt.u64.u32 	%rd33, %r503;
	add.s64 	%rd34, %rd33, %rd32;
	or.b64  	%rd35, %rd34, %rd31;
	add.s64 	%rd36, %rd35, %rd30;
	shl.b64 	%rd37, %rd36, 2;
	add.s64 	%rd38, %rd2, %rd37;
	ld.global.u32 	%r172, [%rd38+16];
	ld.global.u32 	%r173, [%rd38+384];
	ld.global.u32 	%r174, [%rd38+400];
	shl.b32 	%r512, %r260, 5;
	shl.b32 	%r513, %r2, 5;
	shl.b32 	%r514, %r265, 2;
	shl.b32 	%r515, %r4, 2;
	or.b32  	%r175, %r515, %r499;
	and.b32  	%r516, %r514, 28;
	or.b32  	%r517, %r516, %r513;
	add.s32 	%r176, %r517, %r512;
	add.s32 	%r518, %r515, 24;
	or.b32  	%r177, %r518, %r499;
	and.b32  	%r178, %r265, 4;
	shl.b32 	%r519, %r265, 4;
	and.b32  	%r520, %r156, 8;
	or.b32  	%r521, %r520, %r519;
	bfe.u32 	%r522, %r521, 3, 3;
	mul.lo.s32 	%r179, %r522, 260;
	cvt.u16.u32 	%rs29, %r265;
	and.b16  	%rs30, %rs29, 255;
	mul.lo.s16 	%rs31, %rs30, 171;
	shr.u16 	%rs32, %rs31, 12;
	mul.lo.s16 	%rs33, %rs32, 24;
	sub.s16 	%rs34, %rs29, %rs33;
	cvt.u32.u16 	%r523, %rs34;
	and.b32  	%r180, %r523, 255;
	add.s32 	%r524, %r4, 6;
	add.s32 	%r525, %r5, 192;
	and.b32  	%r526, %r525, 224;
	shr.u32 	%r527, %r524, 3;
	mad.lo.s32 	%r181, %r527, 260, %r526;
	add.s32 	%r528, %r4, 12;
	add.s32 	%r529, %r5, 128;
	and.b32  	%r530, %r529, 224;
	shr.u32 	%r531, %r528, 3;
	mad.lo.s32 	%r182, %r531, 260, %r530;
	add.s32 	%r532, %r4, 18;
	add.s32 	%r533, %r5, 64;
	and.b32  	%r534, %r533, 224;
	shr.u32 	%r535, %r532, 3;
	mad.lo.s32 	%r183, %r535, 260, %r534;
	or.b32  	%r184, %r5, 780;
	add.s32 	%r536, %r4, 30;
	shr.u32 	%r537, %r536, 3;
	mad.lo.s32 	%r185, %r537, 260, %r526;
	add.s32 	%r538, %r4, 36;
	shr.u32 	%r539, %r538, 3;
	mad.lo.s32 	%r186, %r539, 260, %r530;
	add.s32 	%r540, %r4, 42;
	shr.u32 	%r541, %r540, 3;
	mad.lo.s32 	%r187, %r541, 260, %r534;
	or.b32  	%r188, %r5, 1560;
	add.s32 	%r542, %r4, 54;
	shr.u32 	%r543, %r542, 3;
	mad.lo.s32 	%r189, %r543, 260, %r526;
	add.s32 	%r544, %r4, 60;
	bfe.u32 	%r545, %r544, 3, 3;
	mad.lo.s32 	%r190, %r545, 260, %r530;
	mul.lo.s32 	%r546, %r143, 870;
	shr.u32 	%r547, %r4, 1;
	cvt.u16.u32 	%rs35, %r547;
	and.b16  	%rs36, %rs35, 255;
	mul.lo.s16 	%rs37, %rs36, 171;
	shr.u16 	%rs38, %rs37, 9;
	mul.lo.s16 	%rs39, %rs38, 3;
	sub.s16 	%rs40, %rs35, %rs39;
	cvt.u32.u16 	%r548, %rs40;
	and.b32  	%r191, %r548, 255;
	mad.lo.s32 	%r549, %r501, 33, %r546;
	mad.lo.s32 	%r192, %r507, 290, %r549;
	add.s32 	%r193, %r192, 132;
	setp.lt.u32 	%p239, %r265, 4;
	setp.eq.s32 	%p240, %r144, 1;
	setp.eq.s32 	%p241, %r144, 4;
	setp.eq.s32 	%p242, %r144, 5;
	shr.u32 	%r550, %r4, 2;
	mul.lo.s32 	%r551, %r550, 98;
	and.b32  	%r552, %r4, 1;
	neg.s32 	%r553, %r552;
	and.b32  	%r554, %r553, 392;
	and.b32  	%r555, %r156, 6;
	bfe.s32 	%r556, %r4, 1, 1;
	and.b32  	%r557, %r556, 196;
	bfe.s32 	%r558, %r265, 3, 1;
	and.b32  	%r559, %r558, 1576;
	mad.lo.s32 	%r560, %r65, 784, %r551;
	add.s32 	%r561, %r560, %r555;
	or.b32  	%r562, %r561, %r63;
	add.s32 	%r563, %r562, %r554;
	add.s32 	%r564, %r563, %r557;
	add.s32 	%r194, %r564, %r559;
	add.s32 	%r195, %r194, 8;
	mul.lo.s32 	%r565, %r258, 786432;
	mad.lo.s32 	%r566, %r262, 192, %r565;
	and.b32  	%r196, %r265, 7;
	cvt.u16.u32 	%rs41, %r175;
	and.b16  	%rs42, %rs41, 255;
	mul.lo.s16 	%rs43, %rs42, 171;
	shr.u16 	%rs44, %rs43, 9;
	and.b16  	%rs45, %rs44, 24;
	add.s16 	%rs46, %rs41, %rs45;
	shl.b16 	%rs47, %rs46, 3;
	cvt.u32.u16 	%r567, %rs47;
	and.b32  	%r197, %r567, 248;
	cvt.s64.s32 	%rd7, %r566;
	add.s32 	%r568, %r192, %r191;
	mul.wide.u32 	%rd39, %r568, 4;
	mov.u64 	%rd40, shmem;
	add.s64 	%rd8, %rd40, %rd39;
	add.s32 	%r569, %r193, %r191;
	mul.wide.u32 	%rd41, %r569, 4;
	add.s64 	%rd9, %rd40, %rd41;
	cvt.u64.u32 	%rd42, %r192;
	cvt.u64.u16 	%rd43, %rs40;
	and.b64  	%rd44, %rd43, 255;
	add.s64 	%rd45, %rd42, %rd44;
	shl.b64 	%rd46, %rd45, 2;
	add.s64 	%rd10, %rd40, %rd46;
	cvt.u64.u32 	%rd47, %r193;
	add.s64 	%rd48, %rd47, %rd44;
	shl.b64 	%rd49, %rd48, 2;
	add.s64 	%rd11, %rd40, %rd49;
	or.pred  	%p243, %p239, %p240;
	and.b32  	%r570, %r265, 24;
	setp.eq.s32 	%p244, %r570, 8;
	or.pred  	%p245, %p243, %p244;
	or.pred  	%p246, %p245, %p241;
	setp.eq.s32 	%p247, %r570, 24;
	or.pred  	%p248, %p242, %p247;
	selp.b32 	%r198, 1145324612, -286331154, %p245;
	or.pred  	%p1, %p246, %p248;
	selp.b32 	%r199, 1145324612, -286331154, %p243;
	add.s32 	%r571, %r144, -1;
	setp.lt.u32 	%p249, %r571, 3;
	or.pred  	%p2, %p239, %p249;
	setp.eq.s32 	%p250, %r570, 16;
	or.pred  	%p3, %p250, %p247;
	selp.b32 	%r200, 1145324612, -286331154, %p250;
	mov.u32 	%r87, 0;
	mov.u16 	%rs2, 0;
	mov.u16 	%rs1, 29;
	selp.b32 	%r250, %r199, %r200, %p2;
	or.pred  	%p281, %p2, %p3;
	mov.u32 	%r108, %r87;
	mov.u32 	%r109, %r87;
	mov.u32 	%r110, %r87;
	bra.uni 	$L__BB0_197;
$L__BB0_168:                            // %L23388
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r142, %r87, 48;
	add.s16 	%rs2, %rs2, 48;
	add.s16 	%rs1, %rs1, 48;
	setp.ne.s32 	%p296, %r87, 32688;
	mov.u32 	%r87, %r142;
	@%p296 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_169;
$L__BB0_197:                            // %L1929
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_162 Depth 2
                                        //     Child Loop BB0_166 Depth 2
	add.s32 	%r91, %r87, %r256;
	setp.lt.s32 	%p251, %r91, %r257;
	@%p251 bra 	$L__BB0_198;
	bra.uni 	$L__BB0_169;
$L__BB0_198:                            // %oksrem903
                                        //   in Loop: Header=BB0_197 Depth=1
	setp.eq.s32 	%p252, %r178, 0;
	mul.hi.u32 	%r668, %r87, -1431655765;
	shr.u32 	%r669, %r668, 5;
	mul.lo.s32 	%r201, %r669, 48;
	add.s32 	%r670, %r201, %r175;
	add.s32 	%r671, %r670, %r256;
	mad.lo.s32 	%r672, %r671, 12288, %r176;
	mul.hi.s32 	%r673, %r672, 715827883;
	shr.u32 	%r674, %r673, 31;
	shr.s32 	%r675, %r673, 26;
	add.s32 	%r676, %r675, %r674;
	setp.lt.s32 	%p253, %r672, 0;
	mul.lo.s32 	%r677, %r676, 402653184;
	setp.ne.s32 	%p254, %r677, %r672;
	and.pred  	%p255, %p253, %p254;
	selp.s32 	%r678, -1, 0, %p255;
	add.s32 	%r679, %r676, %r678;
	mad.lo.s32 	%r680, %r679, -402653184, %r672;
	mul.wide.s32 	%rd50, %r680, 4;
	add.s64 	%rd51, %rd3, %rd50;
	ld.global.v4.u32 	{%r681, %r682, %r683, %r684}, [%rd51];
	add.s32 	%r685, %r91, %r177;
	mad.lo.s32 	%r686, %r685, 12288, %r176;
	mul.hi.s32 	%r687, %r686, 715827883;
	shr.u32 	%r688, %r687, 31;
	shr.s32 	%r689, %r687, 26;
	add.s32 	%r690, %r689, %r688;
	setp.lt.s32 	%p256, %r686, 0;
	mul.lo.s32 	%r691, %r690, 402653184;
	setp.ne.s32 	%p257, %r691, %r686;
	and.pred  	%p258, %p256, %p257;
	selp.s32 	%r692, -1, 0, %p258;
	add.s32 	%r693, %r690, %r692;
	mad.lo.s32 	%r694, %r693, -402653184, %r686;
	mul.wide.s32 	%rd52, %r694, 4;
	add.s64 	%rd53, %rd3, %rd52;
	ld.global.v4.u32 	{%r695, %r696, %r697, %r698}, [%rd53];
	selp.b32 	%r699, %r683, %r681, %p252;
	shfl.sync.bfly.b32	%r700, %r699, 4, 31, -1;
	selp.b32 	%r574, %r681, %r700, %p252;
	selp.b32 	%r579, %r700, %r683, %p252;
	selp.b32 	%r701, %r684, %r682, %p252;
	shfl.sync.bfly.b32	%r702, %r701, 4, 31, -1;
	selp.b32 	%r582, %r682, %r702, %p252;
	selp.b32 	%r587, %r702, %r684, %p252;
	selp.b32 	%r703, %r697, %r695, %p252;
	shfl.sync.bfly.b32	%r704, %r703, 4, 31, -1;
	selp.b32 	%r590, %r695, %r704, %p252;
	selp.b32 	%r595, %r704, %r697, %p252;
	selp.b32 	%r705, %r698, %r696, %p252;
	shfl.sync.bfly.b32	%r706, %r705, 4, 31, -1;
	selp.b32 	%r598, %r696, %r706, %p252;
	selp.b32 	%r603, %r706, %r698, %p252;
	shl.b32 	%r575, %r579, 4;
	mov.u32 	%r573, 252645135;
	// begin inline asm
	lop3.b32 %r605, %r573, %r574, %r575, 202;
	// end inline asm
	shr.u32 	%r578, %r574, 4;
	// begin inline asm
	lop3.b32 %r621, %r573, %r578, %r579, 202;
	// end inline asm
	shl.b32 	%r583, %r587, 4;
	// begin inline asm
	lop3.b32 %r613, %r573, %r582, %r583, 202;
	// end inline asm
	shr.u32 	%r586, %r582, 4;
	// begin inline asm
	lop3.b32 %r629, %r573, %r586, %r587, 202;
	// end inline asm
	shl.b32 	%r591, %r595, 4;
	// begin inline asm
	lop3.b32 %r606, %r573, %r590, %r591, 202;
	// end inline asm
	shr.u32 	%r594, %r590, 4;
	// begin inline asm
	lop3.b32 %r622, %r573, %r594, %r595, 202;
	// end inline asm
	shl.b32 	%r599, %r603, 4;
	// begin inline asm
	lop3.b32 %r614, %r573, %r598, %r599, 202;
	// end inline asm
	shr.u32 	%r602, %r598, 4;
	// begin inline asm
	lop3.b32 %r630, %r573, %r602, %r603, 202;
	// end inline asm
	mov.u32 	%r607, 25152;
	// begin inline asm
	prmt.b32 %r637, %r605, %r606, %r607;
	// end inline asm
	mov.u32 	%r611, 29521;
	// begin inline asm
	prmt.b32 %r653, %r605, %r606, %r611;
	// end inline asm
	// begin inline asm
	prmt.b32 %r645, %r613, %r614, %r607;
	// end inline asm
	// begin inline asm
	prmt.b32 %r661, %r613, %r614, %r611;
	// end inline asm
	// begin inline asm
	prmt.b32 %r638, %r621, %r622, %r607;
	// end inline asm
	// begin inline asm
	prmt.b32 %r654, %r621, %r622, %r611;
	// end inline asm
	// begin inline asm
	prmt.b32 %r646, %r629, %r630, %r607;
	// end inline asm
	// begin inline asm
	prmt.b32 %r662, %r629, %r630, %r611;
	// end inline asm
	mov.u32 	%r639, 21520;
	// begin inline asm
	prmt.b32 %r636, %r637, %r638, %r639;
	// end inline asm
	mov.u32 	%r643, 30258;
	// begin inline asm
	prmt.b32 %r640, %r637, %r638, %r643;
	// end inline asm
	// begin inline asm
	prmt.b32 %r644, %r645, %r646, %r639;
	// end inline asm
	// begin inline asm
	prmt.b32 %r648, %r645, %r646, %r643;
	// end inline asm
	// begin inline asm
	prmt.b32 %r652, %r653, %r654, %r639;
	// end inline asm
	// begin inline asm
	prmt.b32 %r656, %r653, %r654, %r643;
	// end inline asm
	// begin inline asm
	prmt.b32 %r660, %r661, %r662, %r639;
	// end inline asm
	// begin inline asm
	prmt.b32 %r664, %r661, %r662, %r643;
	// end inline asm
	cvt.u16.u32 	%rs48, %r670;
	mul.hi.s16 	%rs49, %rs48, 10923;
	shr.u16 	%rs50, %rs49, 15;
	shr.s16 	%rs51, %rs49, 2;
	add.s16 	%rs52, %rs51, %rs50;
	mul.lo.s16 	%rs53, %rs52, 24;
	sub.s16 	%rs54, %rs48, %rs53;
	cvt.s32.s16 	%r707, %rs54;
	add.s32 	%r708, %r179, %r707;
	mul.wide.s32 	%rd54, %r708, 4;
	add.s64 	%rd56, %rd40, %rd54;
	st.shared.u32 	[%rd56], %r636;
	add.s32 	%r709, %r708, 128;
	mul.wide.u32 	%rd57, %r709, 4;
	add.s64 	%rd58, %rd40, %rd57;
	st.shared.u32 	[%rd58], %r644;
	add.s32 	%r710, %r708, 64;
	mul.wide.u32 	%rd59, %r710, 4;
	add.s64 	%rd60, %rd40, %rd59;
	st.shared.u32 	[%rd60], %r640;
	add.s32 	%r711, %r708, 192;
	mul.wide.u32 	%rd61, %r711, 4;
	add.s64 	%rd62, %rd40, %rd61;
	st.shared.u32 	[%rd62], %r648;
	add.s32 	%r712, %r708, 32;
	mul.wide.u32 	%rd63, %r712, 4;
	add.s64 	%rd64, %rd40, %rd63;
	st.shared.u32 	[%rd64], %r652;
	add.s32 	%r713, %r708, 160;
	mul.wide.u32 	%rd65, %r713, 4;
	add.s64 	%rd66, %rd40, %rd65;
	st.shared.u32 	[%rd66], %r660;
	add.s32 	%r714, %r708, 96;
	mul.wide.u32 	%rd67, %r714, 4;
	add.s64 	%rd68, %rd40, %rd67;
	st.shared.u32 	[%rd68], %r656;
	add.s32 	%r715, %r708, 224;
	mul.wide.u32 	%rd69, %r715, 4;
	add.s64 	%rd70, %rd40, %rd69;
	st.shared.u32 	[%rd70], %r664;
	bar.sync 	0;
	add.s32 	%r716, %r201, %r180;
	cvt.u16.u32 	%rs55, %r716;
	mul.hi.s16 	%rs56, %rs55, 10923;
	shr.u16 	%rs57, %rs56, 15;
	shr.s16 	%rs58, %rs56, 2;
	add.s16 	%rs59, %rs58, %rs57;
	mul.lo.s16 	%rs60, %rs59, 24;
	sub.s16 	%rs61, %rs55, %rs60;
	cvt.s32.s16 	%r202, %rs61;
	add.s32 	%r717, %r5, %r202;
	mul.wide.s32 	%rd71, %r717, 4;
	add.s64 	%rd72, %rd40, %rd71;
	ld.shared.u32 	%r203, [%rd72];
	add.s32 	%r718, %r181, %r202;
	mul.wide.s32 	%rd73, %r718, 4;
	add.s64 	%rd74, %rd40, %rd73;
	ld.shared.u32 	%r204, [%rd74];
	add.s32 	%r719, %r182, %r202;
	mul.wide.u32 	%rd75, %r719, 4;
	add.s64 	%rd76, %rd40, %rd75;
	ld.shared.u32 	%r205, [%rd76];
	add.s32 	%r720, %r183, %r202;
	mul.wide.u32 	%rd77, %r720, 4;
	add.s64 	%rd78, %rd40, %rd77;
	ld.shared.u32 	%r206, [%rd78];
	add.s32 	%r721, %r184, %r202;
	mul.wide.u32 	%rd79, %r721, 4;
	add.s64 	%rd80, %rd40, %rd79;
	ld.shared.u32 	%r207, [%rd80];
	add.s32 	%r722, %r185, %r202;
	mul.wide.u32 	%rd81, %r722, 4;
	add.s64 	%rd82, %rd40, %rd81;
	ld.shared.u32 	%r208, [%rd82];
	add.s32 	%r723, %r186, %r202;
	mul.wide.u32 	%rd83, %r723, 4;
	add.s64 	%rd84, %rd40, %rd83;
	ld.shared.u32 	%r209, [%rd84];
	add.s32 	%r724, %r187, %r202;
	mul.wide.u32 	%rd85, %r724, 4;
	add.s64 	%rd86, %rd40, %rd85;
	ld.shared.u32 	%r210, [%rd86];
	add.s32 	%r725, %r188, %r202;
	mul.wide.u32 	%rd87, %r725, 4;
	add.s64 	%rd88, %rd40, %rd87;
	ld.shared.u32 	%r211, [%rd88];
	add.s32 	%r726, %r189, %r202;
	mul.wide.u32 	%rd89, %r726, 4;
	add.s64 	%rd90, %rd40, %rd89;
	ld.shared.u32 	%r212, [%rd90];
	add.s32 	%r727, %r190, %r202;
	mul.wide.s32 	%rd91, %r727, 4;
	add.s64 	%rd92, %rd40, %rd91;
	ld.shared.u32 	%r213, [%rd92];
	bar.sync 	0;
	shfl.sync.idx.b32	%r214, %r169, 0, 31, -1;
	shfl.sync.idx.b32	%r215, %r169, 1, 31, -1;
	shfl.sync.idx.b32	%r216, %r169, 2, 31, -1;
	shfl.sync.idx.b32	%r217, %r169, 3, 31, -1;
	shfl.sync.idx.b32	%r218, %r169, 4, 31, -1;
	shfl.sync.idx.b32	%r219, %r169, 5, 31, -1;
	shfl.sync.idx.b32	%r220, %r169, 6, 31, -1;
	shfl.sync.idx.b32	%r221, %r169, 7, 31, -1;
	shfl.sync.idx.b32	%r222, %r169, 8, 31, -1;
	shfl.sync.idx.b32	%r223, %r169, 9, 31, -1;
	shfl.sync.idx.b32	%r224, %r169, 10, 31, -1;
	shfl.sync.idx.b32	%r225, %r169, 11, 31, -1;
	shfl.sync.idx.b32	%r226, %r169, 12, 31, -1;
	shfl.sync.idx.b32	%r227, %r169, 13, 31, -1;
	shfl.sync.idx.b32	%r228, %r169, 14, 31, -1;
	shfl.sync.idx.b32	%r229, %r169, 15, 31, -1;
	setp.eq.s32 	%p259, %r214, 999999999;
	@%p259 bra 	$L__BB0_145;
// %bb.199:                             // %oksrem2306
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r728, %r214, %r202;
	mul.wide.s32 	%rd93, %r728, 4;
	add.s64 	%rd95, %rd40, %rd93;
	st.shared.u32 	[%rd95], %r203;
	setp.eq.s32 	%p260, %r215, 999999999;
	@%p260 bra 	$L__BB0_146;
// %bb.200:                             // %oksrem2374
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r729, %r215, %r202;
	mul.wide.s32 	%rd96, %r729, 4;
	add.s64 	%rd98, %rd40, %rd96;
	st.shared.u32 	[%rd98], %r204;
	setp.eq.s32 	%p261, %r216, 999999999;
	@%p261 bra 	$L__BB0_147;
// %bb.201:                             // %oksrem2442
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r730, %r216, %r202;
	mul.wide.s32 	%rd99, %r730, 4;
	add.s64 	%rd101, %rd40, %rd99;
	st.shared.u32 	[%rd101], %r205;
	setp.eq.s32 	%p262, %r217, 999999999;
	@%p262 bra 	$L__BB0_148;
// %bb.202:                             // %oksrem2510
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r731, %r217, %r202;
	mul.wide.s32 	%rd102, %r731, 4;
	add.s64 	%rd104, %rd40, %rd102;
	st.shared.u32 	[%rd104], %r206;
	setp.eq.s32 	%p263, %r218, 999999999;
	@%p263 bra 	$L__BB0_149;
// %bb.203:                             // %oksrem2578
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r732, %r218, %r202;
	mul.wide.s32 	%rd105, %r732, 4;
	add.s64 	%rd107, %rd40, %rd105;
	st.shared.u32 	[%rd107], %r207;
	setp.eq.s32 	%p264, %r219, 999999999;
	@%p264 bra 	$L__BB0_150;
// %bb.204:                             // %oksrem2646
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r733, %r219, %r202;
	mul.wide.s32 	%rd108, %r733, 4;
	add.s64 	%rd110, %rd40, %rd108;
	st.shared.u32 	[%rd110], %r208;
	setp.eq.s32 	%p265, %r220, 999999999;
	@%p265 bra 	$L__BB0_151;
// %bb.205:                             // %oksrem2714
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r734, %r220, %r202;
	mul.wide.s32 	%rd111, %r734, 4;
	add.s64 	%rd113, %rd40, %rd111;
	st.shared.u32 	[%rd113], %r209;
	setp.eq.s32 	%p266, %r221, 999999999;
	@%p266 bra 	$L__BB0_152;
// %bb.206:                             // %oksrem2782
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r735, %r221, %r202;
	mul.wide.s32 	%rd114, %r735, 4;
	add.s64 	%rd116, %rd40, %rd114;
	st.shared.u32 	[%rd116], %r210;
	setp.eq.s32 	%p267, %r222, 999999999;
	@%p267 bra 	$L__BB0_153;
// %bb.207:                             // %oksrem2850
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r736, %r222, %r202;
	mul.wide.s32 	%rd117, %r736, 4;
	add.s64 	%rd119, %rd40, %rd117;
	st.shared.u32 	[%rd119], %r211;
	setp.eq.s32 	%p268, %r223, 999999999;
	@%p268 bra 	$L__BB0_154;
// %bb.208:                             // %oksrem2918
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r737, %r223, %r202;
	mul.wide.s32 	%rd120, %r737, 4;
	add.s64 	%rd122, %rd40, %rd120;
	st.shared.u32 	[%rd122], %r212;
	setp.eq.s32 	%p269, %r224, 999999999;
	@%p269 bra 	$L__BB0_155;
// %bb.209:                             // %oksrem2987
                                        //   in Loop: Header=BB0_197 Depth=1
	setp.gt.u32 	%p270, %r4, 3;
	selp.b32 	%r738, 0, %r213, %p270;
	add.s32 	%r739, %r224, %r202;
	mul.wide.s32 	%rd123, %r739, 4;
	add.s64 	%rd125, %rd40, %rd123;
	st.shared.u32 	[%rd125], %r738;
	setp.eq.s32 	%p271, %r225, 999999999;
	@%p271 bra 	$L__BB0_156;
// %bb.210:                             // %oksrem3055
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r740, %r225, %r202;
	mul.wide.s32 	%rd126, %r740, 4;
	add.s64 	%rd128, %rd40, %rd126;
	mov.u32 	%r741, 0;
	st.shared.u32 	[%rd128], %r741;
	setp.eq.s32 	%p272, %r226, 999999999;
	@%p272 bra 	$L__BB0_157;
// %bb.211:                             // %oksrem3122
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r742, %r226, %r202;
	mul.wide.s32 	%rd129, %r742, 4;
	add.s64 	%rd131, %rd40, %rd129;
	st.shared.u32 	[%rd131], %r741;
	setp.eq.s32 	%p273, %r227, 999999999;
	@%p273 bra 	$L__BB0_158;
// %bb.212:                             // %oksrem3189
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r744, %r227, %r202;
	mul.wide.s32 	%rd132, %r744, 4;
	add.s64 	%rd134, %rd40, %rd132;
	st.shared.u32 	[%rd134], %r741;
	setp.eq.s32 	%p274, %r228, 999999999;
	@%p274 bra 	$L__BB0_159;
// %bb.213:                             // %oksrem3256
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r746, %r228, %r202;
	mul.wide.s32 	%rd135, %r746, 4;
	add.s64 	%rd137, %rd40, %rd135;
	st.shared.u32 	[%rd137], %r741;
	setp.eq.s32 	%p275, %r229, 999999999;
	@%p275 bra 	$L__BB0_160;
// %bb.214:                             // %oksrem3323
                                        //   in Loop: Header=BB0_197 Depth=1
	setp.eq.s32 	%p276, %r170, 3;
	add.s32 	%r749, %r229, %r202;
	mul.wide.s32 	%rd138, %r749, 4;
	add.s64 	%rd140, %rd40, %rd138;
	st.shared.u32 	[%rd140], %r741;
	bar.sync 	0;
	mov.u32 	%r92, %r741;
	mov.u32 	%r93, %r741;
	mov.u32 	%r94, %r741;
	mov.u32 	%r95, %r741;
	mov.u32 	%r96, %r741;
	mov.u32 	%r97, %r741;
	mov.u32 	%r98, %r741;
	mov.u32 	%r99, %r741;
	mov.u32 	%r100, %r741;
	mov.u32 	%r101, %r741;
	mov.u32 	%r102, %r741;
	mov.u32 	%r103, %r741;
	mov.u32 	%r104, %r741;
	mov.u32 	%r105, %r741;
	mov.u32 	%r106, %r741;
	mov.u32 	%r107, %r741;
	@%p276 bra 	$L__BB0_161;
// %bb.215:                             // %oksrem3407
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r750, %r201, %r191;
	ld.shared.u32 	%r92, [%rd8];
	ld.shared.u32 	%r93, [%rd9];
	ld.shared.u32 	%r94, [%rd10+12];
	ld.shared.u32 	%r95, [%rd11+12];
	ld.shared.u32 	%r96, [%rd10+24];
	ld.shared.u32 	%r97, [%rd11+24];
	ld.shared.u32 	%r98, [%rd10+36];
	ld.shared.u32 	%r99, [%rd11+36];
	add.s32 	%r751, %r750, 12;
	mul.hi.u32 	%r752, %r751, -1431655765;
	shr.u32 	%r753, %r752, 4;
	mul.lo.s32 	%r754, %r753, 24;
	sub.s32 	%r755, %r751, %r754;
	add.s32 	%r756, %r192, %r755;
	mul.wide.u32 	%rd141, %r756, 4;
	add.s64 	%rd143, %rd40, %rd141;
	ld.shared.u32 	%r100, [%rd143];
	add.s32 	%r757, %r193, %r755;
	mul.wide.u32 	%rd144, %r757, 4;
	add.s64 	%rd145, %rd40, %rd144;
	ld.shared.u32 	%r101, [%rd145];
	cvt.u16.u32 	%rs62, %r750;
	add.s16 	%rs63, %rs62, 15;
	mul.hi.s16 	%rs64, %rs63, 10923;
	shr.u16 	%rs65, %rs64, 15;
	shr.s16 	%rs66, %rs64, 2;
	add.s16 	%rs67, %rs66, %rs65;
	mul.lo.s16 	%rs68, %rs67, 24;
	sub.s16 	%rs69, %rs63, %rs68;
	cvt.s32.s16 	%r758, %rs69;
	add.s32 	%r759, %r192, %r758;
	mul.wide.s32 	%rd146, %r759, 4;
	add.s64 	%rd147, %rd40, %rd146;
	ld.shared.u32 	%r102, [%rd147];
	add.s32 	%r760, %r193, %r758;
	mul.wide.u32 	%rd148, %r760, 4;
	add.s64 	%rd149, %rd40, %rd148;
	ld.shared.u32 	%r103, [%rd149];
	add.s16 	%rs70, %rs62, 18;
	mul.hi.s16 	%rs71, %rs70, 10923;
	shr.u16 	%rs72, %rs71, 15;
	shr.s16 	%rs73, %rs71, 2;
	add.s16 	%rs74, %rs73, %rs72;
	mul.lo.s16 	%rs75, %rs74, 24;
	sub.s16 	%rs76, %rs70, %rs75;
	cvt.s32.s16 	%r761, %rs76;
	add.s32 	%r762, %r192, %r761;
	mul.wide.s32 	%rd150, %r762, 4;
	add.s64 	%rd151, %rd40, %rd150;
	ld.shared.u32 	%r104, [%rd151];
	add.s32 	%r763, %r193, %r761;
	mul.wide.u32 	%rd152, %r763, 4;
	add.s64 	%rd153, %rd40, %rd152;
	ld.shared.u32 	%r105, [%rd153];
	add.s16 	%rs77, %rs62, 21;
	mul.hi.s16 	%rs78, %rs77, 10923;
	shr.u16 	%rs79, %rs78, 15;
	shr.s16 	%rs80, %rs78, 2;
	add.s16 	%rs81, %rs80, %rs79;
	mul.lo.s16 	%rs82, %rs81, 24;
	sub.s16 	%rs83, %rs77, %rs82;
	cvt.s32.s16 	%r764, %rs83;
	add.s32 	%r765, %r192, %r764;
	mul.wide.s32 	%rd154, %r765, 4;
	add.s64 	%rd155, %rd40, %rd154;
	ld.shared.u32 	%r106, [%rd155];
	add.s32 	%r766, %r193, %r764;
	mul.wide.u32 	%rd156, %r766, 4;
	add.s64 	%rd157, %rd40, %rd156;
	ld.shared.u32 	%r107, [%rd157];
$L__BB0_161:                            // %L10559
                                        //   in Loop: Header=BB0_197 Depth=1
	bar.sync 	0;
	mov.u16 	%rs3, %rs2;
	mov.u32 	%r111, %r741;
	bra.uni 	$L__BB0_162;
$L__BB0_164:                            // %L16964
                                        //   in Loop: Header=BB0_162 Depth=2
	bar.sync 	0;
	add.s32 	%r111, %r111, 6;
	add.s16 	%rs3, %rs3, 6;
	setp.ne.s32 	%p286, %r111, 24;
	@%p286 bra 	$L__BB0_162;
	bra.uni 	$L__BB0_165;
$L__BB0_162:                            // %L10577
                                        //   Parent Loop BB0_197 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p277, %r111, 0;
	selp.b32 	%r1160, %r92, 0, %p277;
	setp.eq.s32 	%p278, %r111, 6;
	selp.b32 	%r1161, %r96, %r1160, %p278;
	setp.eq.s32 	%p279, %r111, 12;
	selp.b32 	%r1162, %r100, %r1161, %p279;
	setp.eq.s32 	%p280, %r111, 18;
	selp.b32 	%r1163, %r104, %r1162, %p280;
	selp.b32 	%r1164, %r93, 0, %p277;
	selp.b32 	%r1165, %r97, %r1164, %p278;
	selp.b32 	%r1166, %r101, %r1165, %p279;
	selp.b32 	%r1167, %r105, %r1166, %p280;
	selp.b32 	%r1168, %r94, 0, %p277;
	selp.b32 	%r1169, %r98, %r1168, %p278;
	selp.b32 	%r1170, %r102, %r1169, %p279;
	selp.b32 	%r1171, %r106, %r1170, %p280;
	selp.b32 	%r1172, %r95, 0, %p277;
	selp.b32 	%r1173, %r99, %r1172, %p278;
	selp.b32 	%r1174, %r103, %r1173, %p279;
	selp.b32 	%r1175, %r107, %r1174, %p280;
	mov.u16 	%rs121, 25600;
	// begin inline asm
	mov.b32 %r773, {%rs121, %rs121};
	// end inline asm
	mov.u16 	%rs123, 21504;
	// begin inline asm
	mov.b32 %r784, {%rs123, %rs123};
	// end inline asm
	xor.b32  	%r772, %r1163, -2004318072;
	mov.u32 	%r909, 983055;
	// begin inline asm
	lop3.b32 %r770, %r909, %r772, %r773, 202;
	// end inline asm
	mov.u16 	%rs127, 18432;
	// begin inline asm
	mov.b32 %r774, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r775, %r773, %r774;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r778, %r770, %r775;
	// end inline asm
	mov.u32 	%r920, 15728880;
	// begin inline asm
	lop3.b32 %r781, %r920, %r772, %r784, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r785, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r786, %r784, %r785;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r789, %r781, %r786;
	// end inline asm
	// begin inline asm
	mov.b32 %r819, {%rs121, %rs121};
	// end inline asm
	// begin inline asm
	mov.b32 %r830, {%rs123, %rs123};
	// end inline asm
	xor.b32  	%r818, %r1167, -2004318072;
	// begin inline asm
	lop3.b32 %r816, %r909, %r818, %r819, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r820, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r821, %r819, %r820;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r824, %r816, %r821;
	// end inline asm
	// begin inline asm
	lop3.b32 %r827, %r920, %r818, %r830, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r831, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r832, %r830, %r831;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r835, %r827, %r832;
	// end inline asm
	// begin inline asm
	mov.b32 %r865, {%rs121, %rs121};
	// end inline asm
	// begin inline asm
	mov.b32 %r876, {%rs123, %rs123};
	// end inline asm
	xor.b32  	%r864, %r1171, -2004318072;
	// begin inline asm
	lop3.b32 %r862, %r909, %r864, %r865, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r866, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r867, %r865, %r866;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r870, %r862, %r867;
	// end inline asm
	// begin inline asm
	lop3.b32 %r873, %r920, %r864, %r876, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r877, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r878, %r876, %r877;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r881, %r873, %r878;
	// end inline asm
	// begin inline asm
	mov.b32 %r911, {%rs121, %rs121};
	// end inline asm
	// begin inline asm
	mov.b32 %r922, {%rs123, %rs123};
	// end inline asm
	xor.b32  	%r910, %r1175, -2004318072;
	// begin inline asm
	lop3.b32 %r908, %r909, %r910, %r911, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r912, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r913, %r911, %r912;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r916, %r908, %r913;
	// end inline asm
	// begin inline asm
	lop3.b32 %r919, %r920, %r910, %r922, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r923, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r924, %r922, %r923;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r927, %r919, %r924;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r778;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r952, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r824;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r955, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r789;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r958, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r174;
    mov.b32 {%r2re, %r2im}, %r835;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r961, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r870;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r964, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r916;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r967, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r881;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r970, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r174;
    mov.b32 {%r2re, %r2im}, %r927;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r973, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r976, %r977}, {%r287, %r290}, {%r952}, {%r741, %r741};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r983, %r984}, {%r287, %r290}, {%r955}, {%r741, %r741};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r990, %r991}, {%r287, %r290}, {%r958}, {%r741, %r741};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r997, %r998}, {%r287, %r290}, {%r961}, {%r741, %r741};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1004, %r1005}, {%r287, %r290}, {%r964}, {%r741, %r741};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1011, %r1012}, {%r287, %r290}, {%r967}, {%r741, %r741};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1018, %r1019}, {%r287, %r290}, {%r970}, {%r741, %r741};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1025, %r1026}, {%r287, %r290}, {%r973}, {%r741, %r741};
	// end inline asm
	@%p1 bra 	$L__BB0_216;
	bra.uni 	$L__BB0_163;
$L__BB0_216:                            // %pass4747
                                        //   in Loop: Header=BB0_162 Depth=2
	// begin inline asm
	neg.f16x2 %r1032, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1034, %r1032, %r977;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1037, %r339, %r976, %r1034;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1041, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1043, %r1041, %r984;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1046, %r339, %r983, %r1043;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1050, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1052, %r1050, %r991;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1055, %r339, %r990, %r1052;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1059, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1061, %r1059, %r998;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1064, %r339, %r997, %r1061;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1068, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1070, %r1068, %r1005;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1073, %r339, %r1004, %r1070;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1077, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1079, %r1077, %r1012;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1082, %r339, %r1011, %r1079;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1086, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1088, %r1086, %r1019;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1091, %r339, %r1018, %r1088;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1095, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1097, %r1095, %r1026;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1100, %r339, %r1025, %r1097;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1104, %r342, %r976;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1107, %r339, %r977, %r1104;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1111, %r342, %r983;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1114, %r339, %r984, %r1111;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1118, %r342, %r990;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1121, %r339, %r991, %r1118;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1125, %r342, %r997;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1128, %r339, %r998, %r1125;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1132, %r342, %r1004;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1135, %r339, %r1005, %r1132;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1139, %r342, %r1011;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1142, %r339, %r1012, %r1139;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1146, %r342, %r1018;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1149, %r339, %r1019, %r1146;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1153, %r342, %r1025;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1156, %r339, %r1026, %r1153;
	// end inline asm
	mov.u32 	%r1325, 0;
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1176, %r1177}, {%r383, %r386}, {%r1037, %r1107}, {%r1325, %r1325}, %r198, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1185, %r1186}, {%r383, %r386}, {%r1046, %r1114}, {%r1325, %r1325}, %r198, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1194, %r1195}, {%r383, %r386}, {%r1055, %r1121}, {%r1325, %r1325}, %r198, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1203, %r1204}, {%r383, %r386}, {%r1064, %r1128}, {%r1325, %r1325}, %r198, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1212, %r1213}, {%r383, %r386}, {%r1073, %r1135}, {%r1325, %r1325}, %r198, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1221, %r1222}, {%r383, %r386}, {%r1082, %r1142}, {%r1325, %r1325}, %r198, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1230, %r1231}, {%r383, %r386}, {%r1091, %r1149}, {%r1325, %r1325}, %r198, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1239, %r1240}, {%r383, %r386}, {%r1100, %r1156}, {%r1325, %r1325}, %r198, 0;
	// end inline asm
	bar.sync 	0;
	mul.hi.s16 	%rs132, %rs3, 10923;
	shr.u16 	%rs133, %rs132, 15;
	add.s16 	%rs134, %rs132, %rs133;
	mul.lo.s16 	%rs135, %rs134, 6;
	sub.s16 	%rs136, %rs3, %rs135;
	mul.wide.s16 	%r1358, %rs136, 16;
	add.s32 	%r1359, %r194, %r1358;
	mul.wide.s32 	%rd160, %r1359, 4;
	add.s64 	%rd162, %rd40, %rd160;
	ld.shared.u32 	%r1316, [%rd162];
	add.s32 	%r1360, %r195, %r1358;
	mul.wide.s32 	%rd163, %r1360, 4;
	add.s64 	%rd164, %rd40, %rd163;
	ld.shared.u32 	%r1323, [%rd164];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1312, %r1313}, {%r395, %r398}, {%r1316}, {%r1325, %r1325};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1319, %r1320}, {%r395, %r398}, {%r1323}, {%r1325, %r1325};
	// end inline asm
	@%p281 bra 	$L__BB0_218;
	bra.uni 	$L__BB0_217;
$L__BB0_218:                            // %pass5243
                                        //   in Loop: Header=BB0_162 Depth=2
	// begin inline asm
	neg.f16x2 %r1326, %r436;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1328, %r1326, %r1313;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1331, %r433, %r1312, %r1328;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1335, %r436;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1337, %r1335, %r1320;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1340, %r433, %r1319, %r1337;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1344, %r436, %r1312;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1347, %r433, %r1313, %r1344;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1351, %r436, %r1319;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1354, %r433, %r1320, %r1351;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1380, %r1383}, {%r479, %r482}, {%r1331, %r1347}, {%r1325, %r1325}, %r250, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1387, %r1391}, {%r479, %r482}, {%r1340, %r1354}, {%r1325, %r1325}, %r250, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1379, %r1380, %r1380;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1382, %r1383, %r1383, %r1379;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1386, %r1387, %r1387, %r1382;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1390, %r1391, %r1391, %r1386;
	// end inline asm
	mov.u32 	%r1810, 290787669;
	// begin inline asm
	fma.rn.f16x2 %r1394, %r1810, %r1390, %r110;
	// end inline asm
	add.s32 	%r1813, %r87, %r111;
	add.s32 	%r1814, %r1813, 1;
	mul.hi.u32 	%r1815, %r1814, -1431655765;
	shr.u32 	%r1816, %r1815, 2;
	mul.lo.s32 	%r1817, %r1816, 6;
	sub.s32 	%r1818, %r1814, %r1817;
	shl.b32 	%r1819, %r1818, 4;
	add.s32 	%r1820, %r194, %r1819;
	mul.wide.u32 	%rd167, %r1820, 4;
	add.s64 	%rd169, %rd40, %rd167;
	ld.shared.u32 	%r1402, [%rd169];
	add.s32 	%r1821, %r195, %r1819;
	mul.wide.u32 	%rd170, %r1821, 4;
	add.s64 	%rd171, %rd40, %rd170;
	ld.shared.u32 	%r1409, [%rd171];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1419, %r1416}, {%r395, %r398}, {%r1402}, {%r1325, %r1325};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1428, %r1425}, {%r395, %r398}, {%r1409}, {%r1325, %r1325};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1412, %r436;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1414, %r1412, %r1416;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1417, %r433, %r1419, %r1414;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1421, %r436;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1423, %r1421, %r1425;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1426, %r433, %r1428, %r1423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1430, %r436, %r1419;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1433, %r433, %r1416, %r1430;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1437, %r436, %r1428;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1440, %r433, %r1425, %r1437;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1463, %r1466}, {%r479, %r482}, {%r1417, %r1433}, {%r1325, %r1325}, %r250, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1470, %r1474}, {%r479, %r482}, {%r1426, %r1440}, {%r1325, %r1325}, %r250, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1462, %r1463, %r1463;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1465, %r1466, %r1466, %r1462;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1469, %r1470, %r1470, %r1465;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1473, %r1474, %r1474, %r1469;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1477, %r1810, %r1473, %r1394;
	// end inline asm
	add.s32 	%r1822, %r1813, 2;
	mul.hi.u32 	%r1823, %r1822, -1431655765;
	shr.u32 	%r1824, %r1823, 2;
	mul.lo.s32 	%r1825, %r1824, 6;
	sub.s32 	%r1826, %r1822, %r1825;
	shl.b32 	%r1827, %r1826, 4;
	add.s32 	%r1828, %r194, %r1827;
	mul.wide.u32 	%rd172, %r1828, 4;
	add.s64 	%rd173, %rd40, %rd172;
	ld.shared.u32 	%r1485, [%rd173];
	add.s32 	%r1829, %r195, %r1827;
	mul.wide.u32 	%rd174, %r1829, 4;
	add.s64 	%rd175, %rd40, %rd174;
	ld.shared.u32 	%r1492, [%rd175];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1502, %r1499}, {%r395, %r398}, {%r1485}, {%r1325, %r1325};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1511, %r1508}, {%r395, %r398}, {%r1492}, {%r1325, %r1325};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1495, %r436;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1497, %r1495, %r1499;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1500, %r433, %r1502, %r1497;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1504, %r436;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1506, %r1504, %r1508;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1509, %r433, %r1511, %r1506;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1513, %r436, %r1502;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1516, %r433, %r1499, %r1513;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1520, %r436, %r1511;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1523, %r433, %r1508, %r1520;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1546, %r1549}, {%r479, %r482}, {%r1500, %r1516}, {%r1325, %r1325}, %r250, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1553, %r1557}, {%r479, %r482}, {%r1509, %r1523}, {%r1325, %r1325}, %r250, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1545, %r1546, %r1546;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1548, %r1549, %r1549, %r1545;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1552, %r1553, %r1553, %r1548;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1556, %r1557, %r1557, %r1552;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1560, %r1810, %r1556, %r1477;
	// end inline asm
	add.s32 	%r1830, %r1813, 3;
	mul.hi.u32 	%r1831, %r1830, -1431655765;
	shr.u32 	%r1832, %r1831, 2;
	mul.lo.s32 	%r1833, %r1832, 6;
	sub.s32 	%r1834, %r1830, %r1833;
	shl.b32 	%r1835, %r1834, 4;
	add.s32 	%r1836, %r194, %r1835;
	mul.wide.u32 	%rd176, %r1836, 4;
	add.s64 	%rd177, %rd40, %rd176;
	ld.shared.u32 	%r1568, [%rd177];
	add.s32 	%r1837, %r195, %r1835;
	mul.wide.u32 	%rd178, %r1837, 4;
	add.s64 	%rd179, %rd40, %rd178;
	ld.shared.u32 	%r1575, [%rd179];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1585, %r1582}, {%r395, %r398}, {%r1568}, {%r1325, %r1325};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1594, %r1591}, {%r395, %r398}, {%r1575}, {%r1325, %r1325};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1578, %r436;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1580, %r1578, %r1582;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1583, %r433, %r1585, %r1580;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1587, %r436;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1589, %r1587, %r1591;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1592, %r433, %r1594, %r1589;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1596, %r436, %r1585;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1599, %r433, %r1582, %r1596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1603, %r436, %r1594;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1606, %r433, %r1591, %r1603;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1629, %r1632}, {%r479, %r482}, {%r1583, %r1599}, {%r1325, %r1325}, %r250, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1636, %r1640}, {%r479, %r482}, {%r1592, %r1606}, {%r1325, %r1325}, %r250, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1628, %r1629, %r1629;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1631, %r1632, %r1632, %r1628;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1635, %r1636, %r1636, %r1631;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1639, %r1640, %r1640, %r1635;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1643, %r1810, %r1639, %r1560;
	// end inline asm
	add.s32 	%r1838, %r1813, 4;
	mul.hi.u32 	%r1839, %r1838, -1431655765;
	shr.u32 	%r1840, %r1839, 2;
	mul.lo.s32 	%r1841, %r1840, 6;
	sub.s32 	%r1842, %r1838, %r1841;
	shl.b32 	%r1843, %r1842, 4;
	add.s32 	%r1844, %r194, %r1843;
	mul.wide.u32 	%rd180, %r1844, 4;
	add.s64 	%rd181, %rd40, %rd180;
	ld.shared.u32 	%r1651, [%rd181];
	add.s32 	%r1845, %r195, %r1843;
	mul.wide.u32 	%rd182, %r1845, 4;
	add.s64 	%rd183, %rd40, %rd182;
	ld.shared.u32 	%r1658, [%rd183];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1668, %r1665}, {%r395, %r398}, {%r1651}, {%r1325, %r1325};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1677, %r1674}, {%r395, %r398}, {%r1658}, {%r1325, %r1325};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1661, %r436;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1663, %r1661, %r1665;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1666, %r433, %r1668, %r1663;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1670, %r436;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1672, %r1670, %r1674;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1675, %r433, %r1677, %r1672;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1679, %r436, %r1668;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1682, %r433, %r1665, %r1679;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1686, %r436, %r1677;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1689, %r433, %r1674, %r1686;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1712, %r1715}, {%r479, %r482}, {%r1666, %r1682}, {%r1325, %r1325}, %r250, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1719, %r1723}, {%r479, %r482}, {%r1675, %r1689}, {%r1325, %r1325}, %r250, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1711, %r1712, %r1712;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1714, %r1715, %r1715, %r1711;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1718, %r1719, %r1719, %r1714;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1722, %r1723, %r1723, %r1718;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1726, %r1810, %r1722, %r1643;
	// end inline asm
	add.s32 	%r1846, %r1813, 5;
	mul.hi.u32 	%r1847, %r1846, -1431655765;
	shr.u32 	%r1848, %r1847, 2;
	mul.lo.s32 	%r1849, %r1848, 6;
	sub.s32 	%r1850, %r1846, %r1849;
	shl.b32 	%r1851, %r1850, 4;
	add.s32 	%r1852, %r194, %r1851;
	mul.wide.u32 	%rd184, %r1852, 4;
	add.s64 	%rd185, %rd40, %rd184;
	ld.shared.u32 	%r1734, [%rd185];
	add.s32 	%r1853, %r195, %r1851;
	mul.wide.u32 	%rd186, %r1853, 4;
	add.s64 	%rd187, %rd40, %rd186;
	ld.shared.u32 	%r1741, [%rd187];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1751, %r1748}, {%r395, %r398}, {%r1734}, {%r1325, %r1325};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1760, %r1757}, {%r395, %r398}, {%r1741}, {%r1325, %r1325};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1744, %r436;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1746, %r1744, %r1748;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1749, %r433, %r1751, %r1746;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1753, %r436;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1755, %r1753, %r1757;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1758, %r433, %r1760, %r1755;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1762, %r436, %r1751;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1765, %r433, %r1748, %r1762;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1769, %r436, %r1760;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1772, %r433, %r1757, %r1769;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1795, %r1798}, {%r479, %r482}, {%r1749, %r1765}, {%r1325, %r1325}, %r250, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1802, %r1806}, {%r479, %r482}, {%r1758, %r1772}, {%r1325, %r1325}, %r250, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1794, %r1795, %r1795;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1797, %r1798, %r1798, %r1794;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1801, %r1802, %r1802, %r1797;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1805, %r1806, %r1806, %r1801;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r110, %r1810, %r1805, %r1726;
	// end inline asm
	add.s32 	%r108, %r108, 6;
	setp.ne.s32 	%p282, %r108, 192;
	@%p282 bra 	$L__BB0_164;
// %bb.219:                             // %pass7242
                                        //   in Loop: Header=BB0_162 Depth=2
	mul.lo.s32 	%r1855, %r109, 786432;
	or.b32  	%r1856, %r1855, %r196;
	or.b32  	%r1857, %r1856, %r3;
	add.s32 	%r1858, %r1857, %r197;
	cvt.u64.u32 	%rd188, %r1858;
	add.s64 	%rd189, %rd188, %rd7;
	mul.hi.s64 	%rd190, %rd189, 3074457345618258603;
	shr.u64 	%rd191, %rd190, 63;
	shr.s64 	%rd192, %rd190, 27;
	add.s64 	%rd193, %rd192, %rd191;
	setp.lt.s64 	%p283, %rd189, 0;
	mul.lo.s64 	%rd194, %rd193, 805306368;
	setp.ne.s64 	%p284, %rd194, %rd189;
	and.pred  	%p285, %p283, %p284;
	selp.s64 	%rd195, -1, 0, %p285;
	add.s64 	%rd196, %rd193, %rd195;
	mul.lo.s64 	%rd197, %rd196, -805306368;
	add.s64 	%rd198, %rd197, %rd189;
	shl.b64 	%rd199, %rd198, 2;
	add.s64 	%rd200, %rd4, %rd199;
	st.global.u32 	[%rd200], %r110;
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r108, 0;
	mov.u32 	%r110, %r108;
	bra.uni 	$L__BB0_164;
$L__BB0_165:                            // %L16985.preheader
                                        //   in Loop: Header=BB0_197 Depth=1
	mov.u16 	%rs223, %rs1;
	mov.u32 	%r2994, %r1325;
	bra.uni 	$L__BB0_166;
$L__BB0_167:                            // %L23372
                                        //   in Loop: Header=BB0_166 Depth=2
	bar.sync 	0;
	add.s32 	%r2994, %r2994, 6;
	add.s16 	%rs223, %rs223, 6;
	setp.ne.s32 	%p295, %r2994, 24;
	@%p295 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_168;
$L__BB0_166:                            // %L16985
                                        //   Parent Loop BB0_197 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p287, %r2994, 0;
	selp.b32 	%r2886, %r92, 0, %p287;
	setp.eq.s32 	%p288, %r2994, 6;
	selp.b32 	%r2887, %r96, %r2886, %p288;
	setp.eq.s32 	%p289, %r2994, 12;
	selp.b32 	%r2888, %r100, %r2887, %p289;
	setp.eq.s32 	%p290, %r2994, 18;
	selp.b32 	%r2889, %r104, %r2888, %p290;
	selp.b32 	%r2890, %r93, 0, %p287;
	selp.b32 	%r2891, %r97, %r2890, %p288;
	selp.b32 	%r2892, %r101, %r2891, %p289;
	selp.b32 	%r2893, %r105, %r2892, %p290;
	selp.b32 	%r2894, %r94, 0, %p287;
	selp.b32 	%r2895, %r98, %r2894, %p288;
	selp.b32 	%r2896, %r102, %r2895, %p289;
	selp.b32 	%r2897, %r106, %r2896, %p290;
	selp.b32 	%r2898, %r95, 0, %p287;
	selp.b32 	%r2899, %r99, %r2898, %p288;
	selp.b32 	%r2900, %r103, %r2899, %p289;
	selp.b32 	%r2901, %r107, %r2900, %p290;
	// begin inline asm
	mov.b32 %r1887, {%rs121, %rs121};
	// end inline asm
	// begin inline asm
	mov.b32 %r1898, {%rs123, %rs123};
	// end inline asm
	shr.u32 	%r2902, %r2889, 8;
	xor.b32  	%r1897, %r2902, 8947848;
	// begin inline asm
	lop3.b32 %r1884, %r909, %r1897, %r1887, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1888, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1889, %r1887, %r1888;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1892, %r1884, %r1889;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1895, %r920, %r1897, %r1898, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1899, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1900, %r1898, %r1899;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1903, %r1895, %r1900;
	// end inline asm
	// begin inline asm
	mov.b32 %r1933, {%rs121, %rs121};
	// end inline asm
	// begin inline asm
	mov.b32 %r1944, {%rs123, %rs123};
	// end inline asm
	shr.u32 	%r2903, %r2893, 8;
	xor.b32  	%r1943, %r2903, 8947848;
	// begin inline asm
	lop3.b32 %r1930, %r909, %r1943, %r1933, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1934, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1935, %r1933, %r1934;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1938, %r1930, %r1935;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1941, %r920, %r1943, %r1944, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1945, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1946, %r1944, %r1945;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1949, %r1941, %r1946;
	// end inline asm
	// begin inline asm
	mov.b32 %r1979, {%rs121, %rs121};
	// end inline asm
	// begin inline asm
	mov.b32 %r1990, {%rs123, %rs123};
	// end inline asm
	shr.u32 	%r2904, %r2897, 8;
	xor.b32  	%r1989, %r2904, 8947848;
	// begin inline asm
	lop3.b32 %r1976, %r909, %r1989, %r1979, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1980, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1981, %r1979, %r1980;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1984, %r1976, %r1981;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1987, %r920, %r1989, %r1990, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1991, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1992, %r1990, %r1991;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1995, %r1987, %r1992;
	// end inline asm
	// begin inline asm
	mov.b32 %r2025, {%rs121, %rs121};
	// end inline asm
	// begin inline asm
	mov.b32 %r2036, {%rs123, %rs123};
	// end inline asm
	shr.u32 	%r2905, %r2901, 8;
	xor.b32  	%r2035, %r2905, 8947848;
	// begin inline asm
	lop3.b32 %r2022, %r909, %r2035, %r2025, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2026, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2027, %r2025, %r2026;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2030, %r2022, %r2027;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2033, %r920, %r2035, %r2036, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2037, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2038, %r2036, %r2037;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2041, %r2033, %r2038;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r1892;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2044, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r1938;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2047, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r1903;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2050, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r174;
    mov.b32 {%r2re, %r2im}, %r1949;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2053, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r1984;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2056, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2030;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2059, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r1995;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2062, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r174;
    mov.b32 {%r2re, %r2im}, %r2041;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2065, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2131, %r2128}, {%r287, %r290}, {%r2044}, {%r1325, %r1325};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2140, %r2137}, {%r287, %r290}, {%r2047}, {%r1325, %r1325};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2149, %r2146}, {%r287, %r290}, {%r2050}, {%r1325, %r1325};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2158, %r2155}, {%r287, %r290}, {%r2053}, {%r1325, %r1325};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2167, %r2164}, {%r287, %r290}, {%r2056}, {%r1325, %r1325};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2176, %r2173}, {%r287, %r290}, {%r2059}, {%r1325, %r1325};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2185, %r2182}, {%r287, %r290}, {%r2062}, {%r1325, %r1325};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2194, %r2191}, {%r287, %r290}, {%r2065}, {%r1325, %r1325};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2124, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2126, %r2124, %r2128;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2129, %r339, %r2131, %r2126;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2133, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2135, %r2133, %r2137;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2138, %r339, %r2140, %r2135;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2142, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2144, %r2142, %r2146;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2147, %r339, %r2149, %r2144;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2151, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2153, %r2151, %r2155;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2156, %r339, %r2158, %r2153;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2160, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2162, %r2160, %r2164;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2165, %r339, %r2167, %r2162;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2169, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2171, %r2169, %r2173;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2174, %r339, %r2176, %r2171;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2178, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2180, %r2178, %r2182;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2183, %r339, %r2185, %r2180;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2187, %r342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2189, %r2187, %r2191;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2192, %r339, %r2194, %r2189;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2196, %r342, %r2131;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2199, %r339, %r2128, %r2196;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2203, %r342, %r2140;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2206, %r339, %r2137, %r2203;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2210, %r342, %r2149;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2213, %r339, %r2146, %r2210;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2217, %r342, %r2158;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2220, %r339, %r2155, %r2217;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2224, %r342, %r2167;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2227, %r339, %r2164, %r2224;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2231, %r342, %r2176;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2234, %r339, %r2173, %r2231;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2238, %r342, %r2185;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2241, %r339, %r2182, %r2238;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2245, %r342, %r2194;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2248, %r339, %r2191, %r2245;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2252, %r2253}, {%r383, %r386}, {%r2129, %r2199}, {%r1325, %r1325}, %r198, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2261, %r2262}, {%r383, %r386}, {%r2138, %r2206}, {%r1325, %r1325}, %r198, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2270, %r2271}, {%r383, %r386}, {%r2147, %r2213}, {%r1325, %r1325}, %r198, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2279, %r2280}, {%r383, %r386}, {%r2156, %r2220}, {%r1325, %r1325}, %r198, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2288, %r2289}, {%r383, %r386}, {%r2165, %r2227}, {%r1325, %r1325}, %r198, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2297, %r2298}, {%r383, %r386}, {%r2174, %r2234}, {%r1325, %r1325}, %r198, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2306, %r2307}, {%r383, %r386}, {%r2183, %r2241}, {%r1325, %r1325}, %r198, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2315, %r2316}, {%r383, %r386}, {%r2192, %r2248}, {%r1325, %r1325}, %r198, 0;
	// end inline asm
	bar.sync 	0;
	add.s16 	%rs185, %rs223, -5;
	mul.hi.s16 	%rs186, %rs185, 10923;
	shr.u16 	%rs187, %rs186, 15;
	add.s16 	%rs188, %rs186, %rs187;
	mul.lo.s16 	%rs189, %rs188, 6;
	sub.s16 	%rs190, %rs185, %rs189;
	mul.wide.s16 	%r2906, %rs190, 16;
	add.s32 	%r2907, %r194, %r2906;
	mul.wide.s32 	%rd201, %r2907, 4;
	add.s64 	%rd203, %rd40, %rd201;
	ld.shared.u32 	%r2392, [%rd203];
	add.s32 	%r2908, %r195, %r2906;
	mul.wide.s32 	%rd204, %r2908, 4;
	add.s64 	%rd205, %rd40, %rd204;
	ld.shared.u32 	%r2399, [%rd205];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2409, %r2406}, {%r395, %r398}, {%r2392}, {%r1325, %r1325};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2418, %r2415}, {%r395, %r398}, {%r2399}, {%r1325, %r1325};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2402, %r436;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2404, %r2402, %r2406;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2407, %r433, %r2409, %r2404;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2411, %r436;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2413, %r2411, %r2415;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2416, %r433, %r2418, %r2413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2420, %r436, %r2409;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2423, %r433, %r2406, %r2420;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2427, %r436, %r2418;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2430, %r433, %r2415, %r2427;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2453, %r2456}, {%r479, %r482}, {%r2407, %r2423}, {%r1325, %r1325}, %r250, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2460, %r2464}, {%r479, %r482}, {%r2416, %r2430}, {%r1325, %r1325}, %r250, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2452, %r2453, %r2453;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2455, %r2456, %r2456, %r2452;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2459, %r2460, %r2460, %r2455;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2463, %r2464, %r2464, %r2459;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2467, %r1810, %r2463, %r110;
	// end inline asm
	add.s16 	%rs191, %rs223, -4;
	mul.hi.s16 	%rs192, %rs191, 10923;
	shr.u16 	%rs193, %rs192, 15;
	add.s16 	%rs194, %rs192, %rs193;
	mul.lo.s16 	%rs195, %rs194, 6;
	sub.s16 	%rs196, %rs191, %rs195;
	mul.wide.s16 	%r2909, %rs196, 16;
	add.s32 	%r2910, %r194, %r2909;
	mul.wide.s32 	%rd206, %r2910, 4;
	add.s64 	%rd207, %rd40, %rd206;
	ld.shared.u32 	%r2475, [%rd207];
	add.s32 	%r2911, %r195, %r2909;
	mul.wide.s32 	%rd208, %r2911, 4;
	add.s64 	%rd209, %rd40, %rd208;
	ld.shared.u32 	%r2482, [%rd209];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2492, %r2489}, {%r395, %r398}, {%r2475}, {%r1325, %r1325};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2501, %r2498}, {%r395, %r398}, {%r2482}, {%r1325, %r1325};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2485, %r436;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2487, %r2485, %r2489;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2490, %r433, %r2492, %r2487;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2494, %r436;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2496, %r2494, %r2498;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2499, %r433, %r2501, %r2496;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2503, %r436, %r2492;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2506, %r433, %r2489, %r2503;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2510, %r436, %r2501;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2513, %r433, %r2498, %r2510;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2536, %r2539}, {%r479, %r482}, {%r2490, %r2506}, {%r1325, %r1325}, %r250, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2543, %r2547}, {%r479, %r482}, {%r2499, %r2513}, {%r1325, %r1325}, %r250, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2535, %r2536, %r2536;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2538, %r2539, %r2539, %r2535;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2542, %r2543, %r2543, %r2538;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2546, %r2547, %r2547, %r2542;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2550, %r1810, %r2546, %r2467;
	// end inline asm
	add.s16 	%rs197, %rs223, -3;
	mul.hi.s16 	%rs198, %rs197, 10923;
	shr.u16 	%rs199, %rs198, 15;
	add.s16 	%rs200, %rs198, %rs199;
	mul.lo.s16 	%rs201, %rs200, 6;
	sub.s16 	%rs202, %rs197, %rs201;
	mul.wide.s16 	%r2912, %rs202, 16;
	add.s32 	%r2913, %r194, %r2912;
	mul.wide.s32 	%rd210, %r2913, 4;
	add.s64 	%rd211, %rd40, %rd210;
	ld.shared.u32 	%r2558, [%rd211];
	add.s32 	%r2914, %r195, %r2912;
	mul.wide.s32 	%rd212, %r2914, 4;
	add.s64 	%rd213, %rd40, %rd212;
	ld.shared.u32 	%r2565, [%rd213];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2575, %r2572}, {%r395, %r398}, {%r2558}, {%r1325, %r1325};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2584, %r2581}, {%r395, %r398}, {%r2565}, {%r1325, %r1325};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2568, %r436;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2570, %r2568, %r2572;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2573, %r433, %r2575, %r2570;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2577, %r436;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2579, %r2577, %r2581;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2582, %r433, %r2584, %r2579;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2586, %r436, %r2575;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2589, %r433, %r2572, %r2586;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2593, %r436, %r2584;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2596, %r433, %r2581, %r2593;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2619, %r2622}, {%r479, %r482}, {%r2573, %r2589}, {%r1325, %r1325}, %r250, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2626, %r2630}, {%r479, %r482}, {%r2582, %r2596}, {%r1325, %r1325}, %r250, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2618, %r2619, %r2619;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2621, %r2622, %r2622, %r2618;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2625, %r2626, %r2626, %r2621;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2629, %r2630, %r2630, %r2625;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2633, %r1810, %r2629, %r2550;
	// end inline asm
	add.s16 	%rs203, %rs223, -2;
	mul.hi.s16 	%rs204, %rs203, 10923;
	shr.u16 	%rs205, %rs204, 15;
	add.s16 	%rs206, %rs204, %rs205;
	mul.lo.s16 	%rs207, %rs206, 6;
	sub.s16 	%rs208, %rs203, %rs207;
	mul.wide.s16 	%r2915, %rs208, 16;
	add.s32 	%r2916, %r194, %r2915;
	mul.wide.s32 	%rd214, %r2916, 4;
	add.s64 	%rd215, %rd40, %rd214;
	ld.shared.u32 	%r2641, [%rd215];
	add.s32 	%r2917, %r195, %r2915;
	mul.wide.s32 	%rd216, %r2917, 4;
	add.s64 	%rd217, %rd40, %rd216;
	ld.shared.u32 	%r2648, [%rd217];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2658, %r2655}, {%r395, %r398}, {%r2641}, {%r1325, %r1325};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2667, %r2664}, {%r395, %r398}, {%r2648}, {%r1325, %r1325};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2651, %r436;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2653, %r2651, %r2655;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2656, %r433, %r2658, %r2653;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2660, %r436;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2662, %r2660, %r2664;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2665, %r433, %r2667, %r2662;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2669, %r436, %r2658;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2672, %r433, %r2655, %r2669;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2676, %r436, %r2667;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2679, %r433, %r2664, %r2676;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2702, %r2705}, {%r479, %r482}, {%r2656, %r2672}, {%r1325, %r1325}, %r250, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2709, %r2713}, {%r479, %r482}, {%r2665, %r2679}, {%r1325, %r1325}, %r250, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2701, %r2702, %r2702;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2704, %r2705, %r2705, %r2701;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2708, %r2709, %r2709, %r2704;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2712, %r2713, %r2713, %r2708;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2716, %r1810, %r2712, %r2633;
	// end inline asm
	add.s16 	%rs209, %rs223, -1;
	mul.hi.s16 	%rs210, %rs209, 10923;
	shr.u16 	%rs211, %rs210, 15;
	add.s16 	%rs212, %rs210, %rs211;
	mul.lo.s16 	%rs213, %rs212, 6;
	sub.s16 	%rs214, %rs209, %rs213;
	mul.wide.s16 	%r2918, %rs214, 16;
	add.s32 	%r2919, %r194, %r2918;
	mul.wide.s32 	%rd218, %r2919, 4;
	add.s64 	%rd219, %rd40, %rd218;
	ld.shared.u32 	%r2724, [%rd219];
	add.s32 	%r2920, %r195, %r2918;
	mul.wide.s32 	%rd220, %r2920, 4;
	add.s64 	%rd221, %rd40, %rd220;
	ld.shared.u32 	%r2731, [%rd221];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2741, %r2738}, {%r395, %r398}, {%r2724}, {%r1325, %r1325};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2750, %r2747}, {%r395, %r398}, {%r2731}, {%r1325, %r1325};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2734, %r436;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2736, %r2734, %r2738;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2739, %r433, %r2741, %r2736;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2743, %r436;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2745, %r2743, %r2747;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2748, %r433, %r2750, %r2745;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2752, %r436, %r2741;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2755, %r433, %r2738, %r2752;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2759, %r436, %r2750;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2762, %r433, %r2747, %r2759;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2785, %r2788}, {%r479, %r482}, {%r2739, %r2755}, {%r1325, %r1325}, %r250, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2792, %r2796}, {%r479, %r482}, {%r2748, %r2762}, {%r1325, %r1325}, %r250, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2784, %r2785, %r2785;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2787, %r2788, %r2788, %r2784;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2791, %r2792, %r2792, %r2787;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2795, %r2796, %r2796, %r2791;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2799, %r1810, %r2795, %r2716;
	// end inline asm
	mul.hi.s16 	%rs215, %rs223, 10923;
	shr.u16 	%rs216, %rs215, 15;
	add.s16 	%rs217, %rs215, %rs216;
	mul.lo.s16 	%rs218, %rs217, 6;
	sub.s16 	%rs219, %rs223, %rs218;
	mul.wide.s16 	%r2921, %rs219, 16;
	add.s32 	%r2922, %r194, %r2921;
	mul.wide.s32 	%rd222, %r2922, 4;
	add.s64 	%rd223, %rd40, %rd222;
	ld.shared.u32 	%r2807, [%rd223];
	add.s32 	%r2923, %r195, %r2921;
	mul.wide.s32 	%rd224, %r2923, 4;
	add.s64 	%rd225, %rd40, %rd224;
	ld.shared.u32 	%r2814, [%rd225];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2824, %r2821}, {%r395, %r398}, {%r2807}, {%r1325, %r1325};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2833, %r2830}, {%r395, %r398}, {%r2814}, {%r1325, %r1325};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2817, %r436;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2819, %r2817, %r2821;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2822, %r433, %r2824, %r2819;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2826, %r436;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2828, %r2826, %r2830;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2831, %r433, %r2833, %r2828;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2835, %r436, %r2824;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2838, %r433, %r2821, %r2835;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2842, %r436, %r2833;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2845, %r433, %r2830, %r2842;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2868, %r2871}, {%r479, %r482}, {%r2822, %r2838}, {%r1325, %r1325}, %r250, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2875, %r2879}, {%r479, %r482}, {%r2831, %r2845}, {%r1325, %r1325}, %r250, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2867, %r2868, %r2868;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2870, %r2871, %r2871, %r2867;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2874, %r2875, %r2875, %r2870;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2878, %r2879, %r2879, %r2874;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r110, %r1810, %r2878, %r2799;
	// end inline asm
	add.s32 	%r108, %r108, 6;
	setp.eq.s32 	%p291, %r108, 192;
	@%p291 bra 	$L__BB0_220;
	bra.uni 	$L__BB0_167;
$L__BB0_220:                            // %pass9859
                                        //   in Loop: Header=BB0_166 Depth=2
	mul.lo.s32 	%r2925, %r109, 786432;
	or.b32  	%r2926, %r2925, %r196;
	or.b32  	%r2927, %r2926, %r3;
	add.s32 	%r2928, %r2927, %r197;
	cvt.u64.u32 	%rd226, %r2928;
	add.s64 	%rd227, %rd226, %rd7;
	mul.hi.s64 	%rd228, %rd227, 3074457345618258603;
	shr.u64 	%rd229, %rd228, 63;
	shr.s64 	%rd230, %rd228, 27;
	add.s64 	%rd231, %rd230, %rd229;
	setp.lt.s64 	%p292, %rd227, 0;
	mul.lo.s64 	%rd232, %rd231, 805306368;
	setp.ne.s64 	%p293, %rd232, %rd227;
	and.pred  	%p294, %p292, %p293;
	selp.s64 	%rd233, -1, 0, %p294;
	add.s64 	%rd234, %rd231, %rd233;
	mul.lo.s64 	%rd235, %rd234, -805306368;
	add.s64 	%rd236, %rd235, %rd227;
	shl.b64 	%rd237, %rd236, 2;
	add.s64 	%rd238, %rd4, %rd237;
	st.global.u32 	[%rd238], %r110;
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r108, 0;
	mov.u32 	%r110, %r108;
	bra.uni 	$L__BB0_167;
$L__BB0_169:                            // %L23403
	mov.u32 	%r2929, 0;
	st.global.u32 	[%rd6], %r2929;
	ret;
$L__BB0_163:                            // %post_box_union
	mov.u64 	%rd158, exception1875;
	cvta.global.u64 	%rd159, %rd158;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd159;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r255;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_217:                            // %post_box_union5238
	mov.u64 	%rd165, exception1875;
	cvta.global.u64 	%rd166, %rd165;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd166;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r255;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L5128
	mov.u32 	%r2945, 5;
	st.global.u32 	[%rd6], %r2945;
	mov.u64 	%rd269, exception1835;
	cvta.global.u64 	%rd270, %rd269;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd270;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r255;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L5284
	mov.u32 	%r2944, 5;
	st.global.u32 	[%rd6], %r2944;
	mov.u64 	%rd267, exception1835;
	cvta.global.u64 	%rd268, %rd267;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd268;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r255;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L5440
	mov.u32 	%r2943, 5;
	st.global.u32 	[%rd6], %r2943;
	mov.u64 	%rd265, exception1835;
	cvta.global.u64 	%rd266, %rd265;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd266;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r255;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L5596
	mov.u32 	%r2942, 5;
	st.global.u32 	[%rd6], %r2942;
	mov.u64 	%rd263, exception1835;
	cvta.global.u64 	%rd264, %rd263;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd264;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r255;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L5752
	mov.u32 	%r2941, 5;
	st.global.u32 	[%rd6], %r2941;
	mov.u64 	%rd261, exception1835;
	cvta.global.u64 	%rd262, %rd261;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd262;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r255;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L5908
	mov.u32 	%r2940, 5;
	st.global.u32 	[%rd6], %r2940;
	mov.u64 	%rd259, exception1835;
	cvta.global.u64 	%rd260, %rd259;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd260;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r255;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_151:                            // %L6064
	mov.u32 	%r2939, 5;
	st.global.u32 	[%rd6], %r2939;
	mov.u64 	%rd257, exception1835;
	cvta.global.u64 	%rd258, %rd257;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd258;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r255;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_152:                            // %L6220
	mov.u32 	%r2938, 5;
	st.global.u32 	[%rd6], %r2938;
	mov.u64 	%rd255, exception1835;
	cvta.global.u64 	%rd256, %rd255;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd256;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r255;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_153:                            // %L6376
	mov.u32 	%r2937, 5;
	st.global.u32 	[%rd6], %r2937;
	mov.u64 	%rd253, exception1835;
	cvta.global.u64 	%rd254, %rd253;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd254;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r255;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_154:                            // %L6532
	mov.u32 	%r2936, 5;
	st.global.u32 	[%rd6], %r2936;
	mov.u64 	%rd251, exception1835;
	cvta.global.u64 	%rd252, %rd251;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd252;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r255;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_155:                            // %L6714
	mov.u32 	%r2935, 5;
	st.global.u32 	[%rd6], %r2935;
	mov.u64 	%rd249, exception1835;
	cvta.global.u64 	%rd250, %rd249;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd250;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r255;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_156:                            // %L6870
	mov.u32 	%r2934, 5;
	st.global.u32 	[%rd6], %r2934;
	mov.u64 	%rd247, exception1835;
	cvta.global.u64 	%rd248, %rd247;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd248;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r255;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_157:                            // %L7026
	mov.u32 	%r2933, 5;
	st.global.u32 	[%rd6], %r2933;
	mov.u64 	%rd245, exception1835;
	cvta.global.u64 	%rd246, %rd245;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd246;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r255;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_158:                            // %L7182
	mov.u32 	%r2932, 5;
	st.global.u32 	[%rd6], %r2932;
	mov.u64 	%rd243, exception1835;
	cvta.global.u64 	%rd244, %rd243;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd244;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r255;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_159:                            // %L7338
	mov.u32 	%r2931, 5;
	st.global.u32 	[%rd6], %r2931;
	mov.u64 	%rd241, exception1835;
	cvta.global.u64 	%rd242, %rd241;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd242;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r255;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_160:                            // %L7494
	mov.u32 	%r2930, 5;
	st.global.u32 	[%rd6], %r2930;
	mov.u64 	%rd239, exception1835;
	cvta.global.u64 	%rd240, %rd239;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd240;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r255;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L166
	mov.u32 	%r2947, 2;
	st.global.u32 	[%rd6], %r2947;
	mov.u64 	%rd273, exception1835;
	cvta.global.u64 	%rd274, %rd273;
	{ // callseq 90, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd274;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 90
	{ // callseq 91, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r255;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 91
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_12:                             // %L307
	mov.u32 	%r2946, 3;
	st.global.u32 	[%rd6], %r2946;
	mov.u64 	%rd271, exception1835;
	cvta.global.u64 	%rd272, %rd271;
	{ // callseq 88, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd272;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 88
	{ // callseq 89, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r255;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 89
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 47
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r255;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 48
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_144:                            // %L1152
	add.u64 	%rd17, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r265, %r4};
	st.local.v2.u32 	[%rd5+8], {%r2, %r84};
	st.local.u32 	[%rd5+16], %r85;
	mov.u64 	%rd23, __unnamed_1;
	cvta.global.u64 	%rd24, %rd23;
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd24;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd17;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r492, [retval0+0];
	} // callseq 49
	mov.u32 	%r494, 4;
	st.global.u32 	[%rd6], %r494;
	mov.u64 	%rd26, exception1835;
	cvta.global.u64 	%rd27, %rd26;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd27;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r255;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
