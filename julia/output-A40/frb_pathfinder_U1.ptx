// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=192, blocks_per_sm=4

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception1911[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1951[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 192, 1, 1
.minnctapersm 4
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<314>;
	.reg .b16 	%rs<224>;
	.reg .b32 	%r<3052>;
	.reg .f32 	%f<790>;
	.reg .b64 	%rd<340>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r279, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd12, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r288, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p4, %r288, 13919;
	@%p4 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd13, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r280, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %ctaid.x;
	mul.lo.s32 	%r2, %r1, 192;
	mov.u32 	%r289, %tid.x;
	mov.u32 	%r4, %tid.y;
	shl.b32 	%r5, %r4, 5;
	or.b32  	%r290, %r2, %r289;
	add.s32 	%r291, %r290, %r5;
	mul.wide.u32 	%rd20, %r291, 4;
	add.s64 	%rd6, %rd13, %rd20;
	mov.u32 	%r292, 1;
	st.global.u32 	[%rd6], %r292;
	setp.gt.u32 	%p5, %r280, 32767;
	@%p5 bra 	$L__BB0_6;
// %bb.3:                               // %L122
	ld.param.u32 	%r281, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p6, %r281, %r280;
	setp.gt.s32 	%p7, %r281, 65535;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_6;
// %bb.4:                               // %L129
	ld.param.u32 	%r282, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r281, %r280;
	mad.lo.s32 	%r293, %r6, -1431655765, 715827872;
	shf.r.wrap.b32 	%r294, %r293, %r293, 4;
	setp.gt.u32 	%p9, %r294, 89478484;
	setp.gt.u32 	%p10, %r282, 511;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_6;
// %bb.5:                               // %L140
	ld.param.u32 	%r283, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p12, %r283, %r282;
	setp.lt.s32 	%p13, %r283, 1024;
	and.pred  	%p14, %p12, %p13;
	@%p14 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r295, %r283, %r282;
	shr.s32 	%r296, %r6, 31;
	shr.u32 	%r297, %r296, 24;
	add.s32 	%r298, %r6, %r297;
	shr.s32 	%r299, %r298, 8;
	setp.eq.s32 	%p15, %r295, %r299;
	@%p15 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L262
	ld.param.u32 	%r284, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p16, %r284, 0;
	@%p16 bra 	$L__BB0_12;
// %bb.9:                               // %L264
	ld.param.u32 	%r286, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	ld.param.u32 	%r285, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p17, %r285, %r284;
	setp.gt.s32 	%p18, %r285, 384;
	or.pred  	%p19, %p17, %p18;
	setp.lt.s32 	%p20, %r286, 0;
	or.pred  	%p21, %p19, %p20;
	@%p21 bra 	$L__BB0_12;
// %bb.10:                              // %L280
	ld.param.u32 	%r287, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p22, %r287, %r286;
	setp.gt.s32 	%p23, %r287, 4096;
	or.pred  	%p24, %p22, %p23;
	@%p24 bra 	$L__BB0_12;
// %bb.11:                              // %L290
	sub.s32 	%r300, %r287, %r286;
	sub.s32 	%r301, %r285, %r284;
	setp.eq.s32 	%p25, %r300, %r301;
	@%p25 bra 	$L__BB0_174;
	bra.uni 	$L__BB0_12;
$L__BB0_174:                            // %pass162
	and.b32  	%r142, %r289, 3;
	shr.u32 	%r143, %r289, 2;
	mul.lo.s32 	%r302, %r142, %r143;
	and.b32  	%r303, %r302, 7;
	cvt.rn.f32.s32 	%f205, %r303;
	mov.f32 	%f206, 0f40800000;
	div.approx.f32 	%f169, %f205, %f206;
	abs.f32 	%f788, %f169;
	setp.lt.f32 	%p26, %f788, 0f40000000;
	setp.gtu.f32 	%p313, %f788, 0f4B800000;
	mov.f32 	%f784, %f788;
	@%p26 bra 	$L__BB0_186;
// %bb.175:
	@%p313 bra 	$L__BB0_182;
	bra.uni 	$L__BB0_176;
$L__BB0_182:
	mov.b32 	%r145, %f788;
	and.b32  	%r304, %r145, 8388607;
	or.b32  	%r3035, %r304, 1065353216;
	mov.b32 	%f783, %r3035;
	add.s32 	%r305, %r145, -1073741824;
	and.b32  	%r3036, %r305, -8388608;
	setp.eq.s32 	%p33, %r3036, 0;
	@%p33 bra 	$L__BB0_185;
// %bb.183:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f216, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f215,%f216;
	// end inline asm
$L__BB0_184:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r306, %r3036, 192937984;
	add.s32 	%r307, %r3035, %r306;
	mov.b32 	%f217, %r307;
	mul.f32 	%f218, %f215, %f217;
	sub.f32 	%f219, %f217, %f218;
	fma.rn.f32 	%f220, %f219, %f215, %f218;
	sub.f32 	%f221, %f217, %f220;
	fma.rz.f32 	%f222, %f221, %f215, %f220;
	cvt.rzi.f32.f32 	%f223, %f222;
	sub.f32 	%f783, %f217, %f223;
	sub.s32 	%r3036, %r3036, %r306;
	mov.b32 	%r3035, %f783;
	setp.ne.s32 	%p34, %r3036, 0;
	setp.ne.s32 	%p35, %r3035, 0;
	and.pred  	%p36, %p34, %p35;
	@%p36 bra 	$L__BB0_184;
$L__BB0_185:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p37, %r145, 2139095039;
	selp.f32 	%f224, 0f7FFFFFFF, 0f4B800000, %p37;
	mul.f32 	%f225, %f783, 0f34000000;
	mul.f32 	%f784, %f224, %f225;
	bra.uni 	$L__BB0_186;
$L__BB0_176:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f207, 0f40000000;
	div.approx.f32 	%f208, %f788, %f207;
	cvt.rzi.f32.f32 	%f782, %f208;
	fma.rn.f32 	%f172, %f782, 0fC0000000, %f788;
	mov.b32 	%r144, %f172;
	setp.lt.u32 	%p28, %r144, 1073741824;
	@%p28 bra 	$L__BB0_181;
// %bb.177:
	setp.lt.u32 	%p29, %r144, -2147483647;
	@%p29 bra 	$L__BB0_179;
// %bb.178:
	add.f32 	%f213, %f782, 0fBF800000;
	setp.lt.f32 	%p32, %f172, 0fC0000000;
	add.f32 	%f214, %f213, 0fBF800000;
	selp.f32 	%f782, %f214, %f213, %p32;
	bra.uni 	$L__BB0_181;
$L__BB0_179:
	add.f32 	%f782, %f782, 0f3F800000;
	setp.ltu.f32 	%p30, %f172, 0f40800000;
	@%p30 bra 	$L__BB0_181;
// %bb.180:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f209, %f782, 0f3F800000;
	fma.rn.f32 	%f211, %f207, 0fC0400000, %f172;
	setp.ge.f32 	%p31, %f211, 0f00000000;
	add.f32 	%f212, %f209, 0f3F800000;
	selp.f32 	%f782, %f212, %f209, %p31;
$L__BB0_181:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f784, %f782, 0fC0000000, %f788;
$L__BB0_186:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f226, %f784;
	setp.gtu.f32 	%p38, %f226, 0f7F800000;
	mov.b32 	%r308, %f169;
	and.b32  	%r152, %r308, -2147483648;
	@%p38 bra 	$L__BB0_188;
// %bb.187:
	mov.b32 	%r309, %f784;
	or.b32  	%r310, %r152, %r309;
	mov.b32 	%f784, %r310;
$L__BB0_188:                            // %__nv_fmodf.exit
	shl.b32 	%r155, %r289, 1;
	and.b32  	%r156, %r155, 2;
	mul.lo.s32 	%r325, %r156, %r143;
	cvt.rn.f32.s32 	%f259, %r325;
	mov.f32 	%f260, 0f41400000;
	div.approx.f32 	%f186, %f259, %f260;
	abs.f32 	%f734, %f186;
	setp.lt.f32 	%p46, %f734, 0f40000000;
	@%p46 bra 	$L__BB0_24;
// %bb.13:
	setp.gtu.f32 	%p47, %f734, 0f4B800000;
	@%p47 bra 	$L__BB0_20;
	bra.uni 	$L__BB0_14;
$L__BB0_20:
	mov.b32 	%r8, %f734;
	and.b32  	%r326, %r8, 8388607;
	or.b32  	%r2985, %r326, 1065353216;
	mov.b32 	%f733, %r2985;
	add.s32 	%r327, %r8, -1073741824;
	and.b32  	%r2986, %r327, -8388608;
	setp.eq.s32 	%p53, %r2986, 0;
	@%p53 bra 	$L__BB0_23;
// %bb.21:                              // %__nv_fmaf_rn.exit4.i.i.i1988.preheader
	mov.f32 	%f270, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f269,%f270;
	// end inline asm
$L__BB0_22:                             // %__nv_fmaf_rn.exit4.i.i.i1988
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r328, %r2986, 192937984;
	add.s32 	%r329, %r2985, %r328;
	mov.b32 	%f271, %r329;
	mul.f32 	%f272, %f269, %f271;
	sub.f32 	%f273, %f271, %f272;
	fma.rn.f32 	%f274, %f273, %f269, %f272;
	sub.f32 	%f275, %f271, %f274;
	fma.rz.f32 	%f276, %f275, %f269, %f274;
	cvt.rzi.f32.f32 	%f277, %f276;
	sub.f32 	%f733, %f271, %f277;
	sub.s32 	%r2986, %r2986, %r328;
	mov.b32 	%r2985, %f733;
	setp.ne.s32 	%p54, %r2986, 0;
	setp.ne.s32 	%p55, %r2985, 0;
	and.pred  	%p56, %p54, %p55;
	@%p56 bra 	$L__BB0_22;
$L__BB0_23:                             // %__internal_fmodf_slowpath_mod.exit.i.i1990
	setp.gt.u32 	%p57, %r8, 2139095039;
	selp.f32 	%f278, 0f7FFFFFFF, 0f4B800000, %p57;
	mul.f32 	%f279, %f733, 0f34000000;
	mul.f32 	%f734, %f278, %f279;
	bra.uni 	$L__BB0_24;
$L__BB0_14:                             // %__nv_fast_fdividef.exit.i.i.i1967
	mov.f32 	%f261, 0f40000000;
	div.approx.f32 	%f262, %f734, %f261;
	cvt.rzi.f32.f32 	%f732, %f262;
	fma.rn.f32 	%f2, %f732, 0fC0000000, %f734;
	mov.b32 	%r7, %f2;
	setp.lt.u32 	%p48, %r7, 1073741824;
	@%p48 bra 	$L__BB0_19;
// %bb.15:
	setp.lt.u32 	%p49, %r7, -2147483647;
	@%p49 bra 	$L__BB0_17;
// %bb.16:
	add.f32 	%f267, %f732, 0fBF800000;
	setp.lt.f32 	%p52, %f2, 0fC0000000;
	add.f32 	%f268, %f267, 0fBF800000;
	selp.f32 	%f732, %f268, %f267, %p52;
	bra.uni 	$L__BB0_19;
$L__BB0_17:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p50, %f2, 0f40800000;
	@%p50 bra 	$L__BB0_19;
// %bb.18:                              // %__nv_fmaf_rn.exit.i.i.i1971
	add.f32 	%f263, %f732, 0f3F800000;
	fma.rn.f32 	%f265, %f261, 0fC0400000, %f2;
	setp.ge.f32 	%p51, %f265, 0f00000000;
	add.f32 	%f266, %f263, 0f3F800000;
	selp.f32 	%f732, %f266, %f263, %p51;
$L__BB0_19:                             // %__internal_fmodf_fastpath_quot.exit.i.i1974
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_24:                             // %__internal_fmodf_kernel.exit.i1993
	or.b32  	%r157, %r156, 1;
	abs.f32 	%f280, %f734;
	setp.gtu.f32 	%p58, %f280, 0f7F800000;
	@%p58 bra 	$L__BB0_26;
// %bb.25:
	mov.b32 	%r330, %f186;
	and.b32  	%r331, %r330, -2147483648;
	mov.b32 	%r332, %f734;
	or.b32  	%r333, %r331, %r332;
	mov.b32 	%f734, %r333;
$L__BB0_26:                             // %__nv_fmodf.exit1994
	mov.f32 	%f250, 0f00000000;
	setp.eq.s32 	%p66, %r157, 3;
	mov.f32 	%f37, %f250;
	mov.f32 	%f38, %f250;
	@%p66 bra 	$L__BB0_42;
// %bb.27:                              // %L531
	mul.lo.s32 	%r342, %r157, %r143;
	mul.hi.u32 	%r343, %r342, -1431655765;
	shr.u32 	%r344, %r343, 4;
	mul.lo.s32 	%r345, %r344, 24;
	sub.s32 	%r346, %r342, %r345;
	cvt.rn.f32.s32 	%f311, %r346;
	div.approx.f32 	%f18, %f311, %f260;
	abs.f32 	%f738, %f18;
	setp.lt.f32 	%p67, %f738, 0f40000000;
	@%p67 bra 	$L__BB0_39;
// %bb.28:
	setp.gtu.f32 	%p68, %f738, 0f4B800000;
	@%p68 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_29;
$L__BB0_35:
	mov.b32 	%r16, %f738;
	and.b32  	%r347, %r16, 8388607;
	or.b32  	%r2987, %r347, 1065353216;
	mov.b32 	%f737, %r2987;
	add.s32 	%r348, %r16, -1073741824;
	and.b32  	%r2988, %r348, -8388608;
	setp.eq.s32 	%p74, %r2988, 0;
	@%p74 bra 	$L__BB0_38;
// %bb.36:                              // %__nv_fmaf_rn.exit4.i.i.i2019.preheader
	mov.f32 	%f322, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f321,%f322;
	// end inline asm
$L__BB0_37:                             // %__nv_fmaf_rn.exit4.i.i.i2019
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r349, %r2988, 192937984;
	add.s32 	%r350, %r2987, %r349;
	mov.b32 	%f323, %r350;
	mul.f32 	%f324, %f321, %f323;
	sub.f32 	%f325, %f323, %f324;
	fma.rn.f32 	%f326, %f325, %f321, %f324;
	sub.f32 	%f327, %f323, %f326;
	fma.rz.f32 	%f328, %f327, %f321, %f326;
	cvt.rzi.f32.f32 	%f329, %f328;
	sub.f32 	%f737, %f323, %f329;
	sub.s32 	%r2988, %r2988, %r349;
	mov.b32 	%r2987, %f737;
	setp.ne.s32 	%p75, %r2988, 0;
	setp.ne.s32 	%p76, %r2987, 0;
	and.pred  	%p77, %p75, %p76;
	@%p77 bra 	$L__BB0_37;
$L__BB0_38:                             // %__internal_fmodf_slowpath_mod.exit.i.i2021
	setp.gt.u32 	%p78, %r16, 2139095039;
	selp.f32 	%f330, 0f7FFFFFFF, 0f4B800000, %p78;
	mul.f32 	%f331, %f737, 0f34000000;
	mul.f32 	%f738, %f330, %f331;
	bra.uni 	$L__BB0_39;
$L__BB0_29:                             // %__nv_fast_fdividef.exit.i.i.i1998
	mov.f32 	%f313, 0f40000000;
	div.approx.f32 	%f314, %f738, %f313;
	cvt.rzi.f32.f32 	%f736, %f314;
	fma.rn.f32 	%f21, %f736, 0fC0000000, %f738;
	mov.b32 	%r15, %f21;
	setp.lt.u32 	%p69, %r15, 1073741824;
	@%p69 bra 	$L__BB0_34;
// %bb.30:
	setp.lt.u32 	%p70, %r15, -2147483647;
	@%p70 bra 	$L__BB0_32;
// %bb.31:
	add.f32 	%f319, %f736, 0fBF800000;
	setp.lt.f32 	%p73, %f21, 0fC0000000;
	add.f32 	%f320, %f319, 0fBF800000;
	selp.f32 	%f736, %f320, %f319, %p73;
	bra.uni 	$L__BB0_34;
$L__BB0_32:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p71, %f21, 0f40800000;
	@%p71 bra 	$L__BB0_34;
// %bb.33:                              // %__nv_fmaf_rn.exit.i.i.i2002
	add.f32 	%f315, %f736, 0f3F800000;
	fma.rn.f32 	%f317, %f313, 0fC0400000, %f21;
	setp.ge.f32 	%p72, %f317, 0f00000000;
	add.f32 	%f318, %f315, 0f3F800000;
	selp.f32 	%f736, %f318, %f315, %p72;
$L__BB0_34:                             // %__internal_fmodf_fastpath_quot.exit.i.i2005
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_39:                             // %__internal_fmodf_kernel.exit.i2024
	abs.f32 	%f332, %f738;
	setp.gtu.f32 	%p79, %f332, 0f7F800000;
	@%p79 bra 	$L__BB0_41;
// %bb.40:
	mov.b32 	%r351, %f18;
	and.b32  	%r352, %r351, -2147483648;
	mov.b32 	%r353, %f738;
	or.b32  	%r354, %r352, %r353;
	mov.b32 	%f738, %r354;
$L__BB0_41:                             // %__nv_fmodf.exit2025
	add.f32 	%f333, %f738, %f738;
	mov.b32 	%r355, %f333;
	and.b32  	%r356, %r355, -2147483648;
	or.b32  	%r357, %r356, 1056964608;
	mov.b32 	%f334, %r357;
	add.f32 	%f335, %f333, %f334;
	cvt.rzi.f32.f32 	%f336, %f335;
	abs.f32 	%f337, %f333;
	setp.gt.f32 	%p80, %f337, 0f4B000000;
	selp.f32 	%f338, %f333, %f336, %p80;
	cvt.rzi.f32.f32 	%f339, %f333;
	setp.lt.f32 	%p81, %f337, 0f3F000000;
	selp.f32 	%f340, %f339, %f338, %p81;
	cvt.rzi.s32.f32 	%r358, %f340;
	fma.rn.f32 	%f341, %f340, 0fBF000000, %f738;
	mul.f32 	%f342, %f341, %f341;
	fma.rn.f32 	%f343, %f342, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f344, %f342, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f345, %f343, %f342, 0fC0A55DF6;
	fma.rn.f32 	%f346, %f344, %f342, 0f4081E0CF;
	fma.rn.f32 	%f347, %f342, %f341, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f342, 0fC09DE9E6;
	fma.rn.f32 	%f349, %f345, %f347, 0f00000000;
	fma.rn.f32 	%f350, %f348, %f342, 0f3F800000;
	fma.rn.f32 	%f351, %f341, 0f40490FDB, %f349;
	and.b32  	%r359, %r358, 1;
	setp.eq.b32 	%p82, %r359, 1;
	selp.f32 	%f352, %f350, %f351, %p82;
	selp.f32 	%f353, %f351, %f350, %p82;
	and.b32  	%r360, %r358, 2;
	setp.eq.s32 	%p83, %r360, 0;
	neg.f32 	%f354, %f352;
	selp.f32 	%f355, %f352, %f354, %p83;
	add.s32 	%r361, %r358, 1;
	and.b32  	%r362, %r361, 2;
	setp.eq.s32 	%p84, %r362, 0;
	mov.f32 	%f356, 0f00000000;
	sub.f32 	%f357, %f356, %f353;
	selp.f32 	%f358, %f353, %f357, %p84;
	cvt.rzi.f32.f32 	%f359, %f738;
	setp.eq.f32 	%p85, %f359, %f738;
	mul.f32 	%f360, %f738, 0f00000000;
	selp.f32 	%f38, %f360, %f355, %p85;
	abs.f32 	%f361, %f738;
	setp.gt.f32 	%p86, %f361, 0f4B800000;
	add.f32 	%f362, %f38, 0f3F800000;
	selp.f32 	%f37, %f362, %f358, %p86;
$L__BB0_42:                             // %L565
	and.b32  	%r25, %r143, 3;
	setp.eq.s32 	%p87, %r25, 3;
	mov.f32 	%f731, 0f3FC00000;
	mov.f32 	%f746, %f250;
	mov.f32 	%f755, %f250;
	@%p87 bra 	$L__BB0_58;
// %bb.43:                              // %L603
	mul.lo.s32 	%r369, %r156, %r25;
	cvt.u16.u32 	%rs9, %r369;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 9;
	mul.lo.s16 	%rs12, %rs11, 3;
	sub.s16 	%rs13, %rs9, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f364, %rs14;
	div.approx.f32 	%f39, %f364, %f731;
	abs.f32 	%f744, %f39;
	setp.lt.f32 	%p88, %f744, 0f40000000;
	@%p88 bra 	$L__BB0_55;
// %bb.44:
	setp.gtu.f32 	%p89, %f744, 0f4B800000;
	@%p89 bra 	$L__BB0_51;
	bra.uni 	$L__BB0_45;
$L__BB0_51:
	mov.b32 	%r27, %f744;
	and.b32  	%r370, %r27, 8388607;
	or.b32  	%r2989, %r370, 1065353216;
	mov.b32 	%f743, %r2989;
	add.s32 	%r371, %r27, -1073741824;
	and.b32  	%r2990, %r371, -8388608;
	setp.eq.s32 	%p95, %r2990, 0;
	@%p95 bra 	$L__BB0_54;
// %bb.52:                              // %__nv_fmaf_rn.exit4.i.i.i2050.preheader
	mov.f32 	%f375, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f374,%f375;
	// end inline asm
$L__BB0_53:                             // %__nv_fmaf_rn.exit4.i.i.i2050
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r372, %r2990, 192937984;
	add.s32 	%r373, %r2989, %r372;
	mov.b32 	%f376, %r373;
	mul.f32 	%f377, %f374, %f376;
	sub.f32 	%f378, %f376, %f377;
	fma.rn.f32 	%f379, %f378, %f374, %f377;
	sub.f32 	%f380, %f376, %f379;
	fma.rz.f32 	%f381, %f380, %f374, %f379;
	cvt.rzi.f32.f32 	%f382, %f381;
	sub.f32 	%f743, %f376, %f382;
	sub.s32 	%r2990, %r2990, %r372;
	mov.b32 	%r2989, %f743;
	setp.ne.s32 	%p96, %r2990, 0;
	setp.ne.s32 	%p97, %r2989, 0;
	and.pred  	%p98, %p96, %p97;
	@%p98 bra 	$L__BB0_53;
$L__BB0_54:                             // %__internal_fmodf_slowpath_mod.exit.i.i2052
	setp.gt.u32 	%p99, %r27, 2139095039;
	selp.f32 	%f383, 0f7FFFFFFF, 0f4B800000, %p99;
	mul.f32 	%f384, %f743, 0f34000000;
	mul.f32 	%f744, %f383, %f384;
	bra.uni 	$L__BB0_55;
$L__BB0_45:                             // %__nv_fast_fdividef.exit.i.i.i2029
	mov.f32 	%f366, 0f40000000;
	div.approx.f32 	%f367, %f744, %f366;
	cvt.rzi.f32.f32 	%f742, %f367;
	fma.rn.f32 	%f42, %f742, 0fC0000000, %f744;
	mov.b32 	%r26, %f42;
	setp.lt.u32 	%p90, %r26, 1073741824;
	@%p90 bra 	$L__BB0_50;
// %bb.46:
	setp.lt.u32 	%p91, %r26, -2147483647;
	@%p91 bra 	$L__BB0_48;
// %bb.47:
	add.f32 	%f372, %f742, 0fBF800000;
	setp.lt.f32 	%p94, %f42, 0fC0000000;
	add.f32 	%f373, %f372, 0fBF800000;
	selp.f32 	%f742, %f373, %f372, %p94;
	bra.uni 	$L__BB0_50;
$L__BB0_48:
	add.f32 	%f742, %f742, 0f3F800000;
	setp.ltu.f32 	%p92, %f42, 0f40800000;
	@%p92 bra 	$L__BB0_50;
// %bb.49:                              // %__nv_fmaf_rn.exit.i.i.i2033
	add.f32 	%f368, %f742, 0f3F800000;
	fma.rn.f32 	%f370, %f366, 0fC0400000, %f42;
	setp.ge.f32 	%p93, %f370, 0f00000000;
	add.f32 	%f371, %f368, 0f3F800000;
	selp.f32 	%f742, %f371, %f368, %p93;
$L__BB0_50:                             // %__internal_fmodf_fastpath_quot.exit.i.i2036
	fma.rn.f32 	%f744, %f742, 0fC0000000, %f744;
$L__BB0_55:                             // %__internal_fmodf_kernel.exit.i2055
	abs.f32 	%f385, %f744;
	setp.gtu.f32 	%p100, %f385, 0f7F800000;
	@%p100 bra 	$L__BB0_57;
// %bb.56:
	mov.b32 	%r374, %f39;
	and.b32  	%r375, %r374, -2147483648;
	mov.b32 	%r376, %f744;
	or.b32  	%r377, %r375, %r376;
	mov.b32 	%f744, %r377;
$L__BB0_57:                             // %__nv_fmodf.exit2056
	add.f32 	%f386, %f744, %f744;
	mov.b32 	%r378, %f386;
	and.b32  	%r379, %r378, -2147483648;
	or.b32  	%r380, %r379, 1056964608;
	mov.b32 	%f387, %r380;
	add.f32 	%f388, %f386, %f387;
	cvt.rzi.f32.f32 	%f389, %f388;
	abs.f32 	%f390, %f386;
	setp.gt.f32 	%p101, %f390, 0f4B000000;
	selp.f32 	%f391, %f386, %f389, %p101;
	cvt.rzi.f32.f32 	%f392, %f386;
	setp.lt.f32 	%p102, %f390, 0f3F000000;
	selp.f32 	%f393, %f392, %f391, %p102;
	cvt.rzi.s32.f32 	%r381, %f393;
	fma.rn.f32 	%f394, %f393, 0fBF000000, %f744;
	mul.f32 	%f395, %f394, %f394;
	fma.rn.f32 	%f396, %f395, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f397, %f395, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f398, %f396, %f395, 0fC0A55DF6;
	fma.rn.f32 	%f399, %f397, %f395, 0f4081E0CF;
	fma.rn.f32 	%f400, %f395, %f394, 0f00000000;
	fma.rn.f32 	%f401, %f399, %f395, 0fC09DE9E6;
	fma.rn.f32 	%f402, %f398, %f400, 0f00000000;
	fma.rn.f32 	%f403, %f401, %f395, 0f3F800000;
	fma.rn.f32 	%f404, %f394, 0f40490FDB, %f402;
	and.b32  	%r382, %r381, 1;
	setp.eq.b32 	%p103, %r382, 1;
	selp.f32 	%f405, %f403, %f404, %p103;
	selp.f32 	%f406, %f404, %f403, %p103;
	and.b32  	%r383, %r381, 2;
	setp.eq.s32 	%p104, %r383, 0;
	neg.f32 	%f407, %f405;
	selp.f32 	%f408, %f405, %f407, %p104;
	add.s32 	%r384, %r381, 1;
	and.b32  	%r385, %r384, 2;
	setp.eq.s32 	%p105, %r385, 0;
	mov.f32 	%f409, 0f00000000;
	sub.f32 	%f410, %f409, %f406;
	selp.f32 	%f411, %f406, %f410, %p105;
	cvt.rzi.f32.f32 	%f412, %f744;
	setp.eq.f32 	%p106, %f412, %f744;
	mul.f32 	%f413, %f744, 0f00000000;
	selp.f32 	%f755, %f413, %f408, %p106;
	abs.f32 	%f414, %f744;
	setp.gt.f32 	%p107, %f414, 0f4B800000;
	add.f32 	%f415, %f755, 0f3F800000;
	selp.f32 	%f746, %f415, %f411, %p107;
$L__BB0_58:                             // %L637
	or.pred  	%p110, %p66, %p87;
	mov.f32 	%f752, %f250;
	mov.f32 	%f757, %f250;
	@%p110 bra 	$L__BB0_74;
// %bb.59:                              // %L645
	mul.lo.s32 	%r386, %r157, %r25;
	mul.hi.u32 	%r387, %r386, -1431655765;
	shr.u32 	%r388, %r387, 1;
	mul.lo.s32 	%r389, %r388, 3;
	sub.s32 	%r390, %r386, %r389;
	cvt.rn.f32.s32 	%f417, %r390;
	div.approx.f32 	%f60, %f417, %f731;
	abs.f32 	%f750, %f60;
	setp.lt.f32 	%p111, %f750, 0f40000000;
	@%p111 bra 	$L__BB0_71;
// %bb.60:
	setp.gtu.f32 	%p112, %f750, 0f4B800000;
	@%p112 bra 	$L__BB0_67;
	bra.uni 	$L__BB0_61;
$L__BB0_67:
	mov.b32 	%r35, %f750;
	and.b32  	%r391, %r35, 8388607;
	or.b32  	%r2991, %r391, 1065353216;
	mov.b32 	%f749, %r2991;
	add.s32 	%r392, %r35, -1073741824;
	and.b32  	%r2992, %r392, -8388608;
	setp.eq.s32 	%p118, %r2992, 0;
	@%p118 bra 	$L__BB0_70;
// %bb.68:                              // %__nv_fmaf_rn.exit4.i.i.i2081.preheader
	mov.f32 	%f428, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f427,%f428;
	// end inline asm
$L__BB0_69:                             // %__nv_fmaf_rn.exit4.i.i.i2081
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r393, %r2992, 192937984;
	add.s32 	%r394, %r2991, %r393;
	mov.b32 	%f429, %r394;
	mul.f32 	%f430, %f427, %f429;
	sub.f32 	%f431, %f429, %f430;
	fma.rn.f32 	%f432, %f431, %f427, %f430;
	sub.f32 	%f433, %f429, %f432;
	fma.rz.f32 	%f434, %f433, %f427, %f432;
	cvt.rzi.f32.f32 	%f435, %f434;
	sub.f32 	%f749, %f429, %f435;
	sub.s32 	%r2992, %r2992, %r393;
	mov.b32 	%r2991, %f749;
	setp.ne.s32 	%p119, %r2992, 0;
	setp.ne.s32 	%p120, %r2991, 0;
	and.pred  	%p121, %p119, %p120;
	@%p121 bra 	$L__BB0_69;
$L__BB0_70:                             // %__internal_fmodf_slowpath_mod.exit.i.i2083
	setp.gt.u32 	%p122, %r35, 2139095039;
	selp.f32 	%f436, 0f7FFFFFFF, 0f4B800000, %p122;
	mul.f32 	%f437, %f749, 0f34000000;
	mul.f32 	%f750, %f436, %f437;
	bra.uni 	$L__BB0_71;
$L__BB0_61:                             // %__nv_fast_fdividef.exit.i.i.i2060
	mov.f32 	%f419, 0f40000000;
	div.approx.f32 	%f420, %f750, %f419;
	cvt.rzi.f32.f32 	%f748, %f420;
	fma.rn.f32 	%f63, %f748, 0fC0000000, %f750;
	mov.b32 	%r34, %f63;
	setp.lt.u32 	%p113, %r34, 1073741824;
	@%p113 bra 	$L__BB0_66;
// %bb.62:
	setp.lt.u32 	%p114, %r34, -2147483647;
	@%p114 bra 	$L__BB0_64;
// %bb.63:
	add.f32 	%f425, %f748, 0fBF800000;
	setp.lt.f32 	%p117, %f63, 0fC0000000;
	add.f32 	%f426, %f425, 0fBF800000;
	selp.f32 	%f748, %f426, %f425, %p117;
	bra.uni 	$L__BB0_66;
$L__BB0_64:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p115, %f63, 0f40800000;
	@%p115 bra 	$L__BB0_66;
// %bb.65:                              // %__nv_fmaf_rn.exit.i.i.i2064
	add.f32 	%f421, %f748, 0f3F800000;
	fma.rn.f32 	%f423, %f419, 0fC0400000, %f63;
	setp.ge.f32 	%p116, %f423, 0f00000000;
	add.f32 	%f424, %f421, 0f3F800000;
	selp.f32 	%f748, %f424, %f421, %p116;
$L__BB0_66:                             // %__internal_fmodf_fastpath_quot.exit.i.i2067
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_71:                             // %__internal_fmodf_kernel.exit.i2086
	abs.f32 	%f438, %f750;
	setp.gtu.f32 	%p123, %f438, 0f7F800000;
	@%p123 bra 	$L__BB0_73;
// %bb.72:
	mov.b32 	%r395, %f60;
	and.b32  	%r396, %r395, -2147483648;
	mov.b32 	%r397, %f750;
	or.b32  	%r398, %r396, %r397;
	mov.b32 	%f750, %r398;
$L__BB0_73:                             // %__nv_fmodf.exit2087
	add.f32 	%f439, %f750, %f750;
	mov.b32 	%r399, %f439;
	and.b32  	%r400, %r399, -2147483648;
	or.b32  	%r401, %r400, 1056964608;
	mov.b32 	%f440, %r401;
	add.f32 	%f441, %f439, %f440;
	cvt.rzi.f32.f32 	%f442, %f441;
	abs.f32 	%f443, %f439;
	setp.gt.f32 	%p124, %f443, 0f4B000000;
	selp.f32 	%f444, %f439, %f442, %p124;
	cvt.rzi.f32.f32 	%f445, %f439;
	setp.lt.f32 	%p125, %f443, 0f3F000000;
	selp.f32 	%f446, %f445, %f444, %p125;
	cvt.rzi.s32.f32 	%r402, %f446;
	fma.rn.f32 	%f447, %f446, 0fBF000000, %f750;
	mul.f32 	%f448, %f447, %f447;
	fma.rn.f32 	%f449, %f448, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f450, %f448, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f451, %f449, %f448, 0fC0A55DF6;
	fma.rn.f32 	%f452, %f450, %f448, 0f4081E0CF;
	fma.rn.f32 	%f453, %f448, %f447, 0f00000000;
	fma.rn.f32 	%f454, %f452, %f448, 0fC09DE9E6;
	fma.rn.f32 	%f455, %f451, %f453, 0f00000000;
	fma.rn.f32 	%f456, %f454, %f448, 0f3F800000;
	fma.rn.f32 	%f457, %f447, 0f40490FDB, %f455;
	and.b32  	%r403, %r402, 1;
	setp.eq.b32 	%p126, %r403, 1;
	selp.f32 	%f458, %f456, %f457, %p126;
	selp.f32 	%f459, %f457, %f456, %p126;
	and.b32  	%r404, %r402, 2;
	setp.eq.s32 	%p127, %r404, 0;
	neg.f32 	%f460, %f458;
	selp.f32 	%f461, %f458, %f460, %p127;
	add.s32 	%r405, %r402, 1;
	and.b32  	%r406, %r405, 2;
	setp.eq.s32 	%p128, %r406, 0;
	mov.f32 	%f462, 0f00000000;
	sub.f32 	%f463, %f462, %f459;
	selp.f32 	%f464, %f459, %f463, %p128;
	cvt.rzi.f32.f32 	%f465, %f750;
	setp.eq.f32 	%p129, %f465, %f750;
	mul.f32 	%f466, %f750, 0f00000000;
	selp.f32 	%f757, %f466, %f461, %p129;
	abs.f32 	%f467, %f750;
	setp.gt.f32 	%p130, %f467, 0f4B800000;
	add.f32 	%f468, %f757, 0f3F800000;
	selp.f32 	%f752, %f468, %f464, %p130;
$L__BB0_74:                             // %L679
	and.b32  	%r42, %r289, 2;
	setp.eq.s32 	%p131, %r42, 0;
	mov.f32 	%f83, %f746;
	mov.f32 	%f85, %f752;
	@%p131 bra 	$L__BB0_76;
// %bb.75:                              // %L688
	neg.f32 	%f85, %f757;
	neg.f32 	%f83, %f755;
	mov.f32 	%f755, %f746;
	mov.f32 	%f757, %f752;
$L__BB0_76:                             // %L690
	@%p26 bra 	$L__BB0_196;
// %bb.77:
	@%p313 bra 	$L__BB0_192;
	bra.uni 	$L__BB0_78;
$L__BB0_192:
	mov.b32 	%r159, %f788;
	and.b32  	%r413, %r159, 8388607;
	or.b32  	%r3037, %r413, 1065353216;
	mov.b32 	%f787, %r3037;
	add.s32 	%r414, %r159, -1073741824;
	and.b32  	%r3038, %r414, -8388608;
	setp.eq.s32 	%p139, %r3038, 0;
	@%p139 bra 	$L__BB0_195;
// %bb.193:                             // %__nv_fmaf_rn.exit4.i.i.i2112.preheader
	mov.f32 	%f478, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f477,%f478;
	// end inline asm
$L__BB0_194:                            // %__nv_fmaf_rn.exit4.i.i.i2112
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r415, %r3038, 192937984;
	add.s32 	%r416, %r3037, %r415;
	mov.b32 	%f479, %r416;
	mul.f32 	%f480, %f477, %f479;
	sub.f32 	%f481, %f479, %f480;
	fma.rn.f32 	%f482, %f481, %f477, %f480;
	sub.f32 	%f483, %f479, %f482;
	fma.rz.f32 	%f484, %f483, %f477, %f482;
	cvt.rzi.f32.f32 	%f485, %f484;
	sub.f32 	%f787, %f479, %f485;
	sub.s32 	%r3038, %r3038, %r415;
	mov.b32 	%r3037, %f787;
	setp.ne.s32 	%p140, %r3038, 0;
	setp.ne.s32 	%p141, %r3037, 0;
	and.pred  	%p142, %p140, %p141;
	@%p142 bra 	$L__BB0_194;
$L__BB0_195:                            // %__internal_fmodf_slowpath_mod.exit.i.i2114
	setp.gt.u32 	%p143, %r159, 2139095039;
	selp.f32 	%f486, 0f7FFFFFFF, 0f4B800000, %p143;
	mul.f32 	%f487, %f787, 0f34000000;
	mul.f32 	%f788, %f486, %f487;
	bra.uni 	$L__BB0_196;
$L__BB0_78:                             // %__nv_fast_fdividef.exit.i.i.i2091
	mov.f32 	%f469, 0f40000000;
	div.approx.f32 	%f470, %f788, %f469;
	cvt.rzi.f32.f32 	%f786, %f470;
	fma.rn.f32 	%f189, %f786, 0fC0000000, %f788;
	mov.b32 	%r158, %f189;
	setp.lt.u32 	%p134, %r158, 1073741824;
	@%p134 bra 	$L__BB0_191;
// %bb.79:
	setp.lt.u32 	%p135, %r158, -2147483647;
	@%p135 bra 	$L__BB0_189;
// %bb.80:
	add.f32 	%f475, %f786, 0fBF800000;
	setp.lt.f32 	%p138, %f189, 0fC0000000;
	add.f32 	%f476, %f475, 0fBF800000;
	selp.f32 	%f786, %f476, %f475, %p138;
	bra.uni 	$L__BB0_191;
$L__BB0_189:
	add.f32 	%f786, %f786, 0f3F800000;
	setp.ltu.f32 	%p136, %f189, 0f40800000;
	@%p136 bra 	$L__BB0_191;
// %bb.190:                             // %__nv_fmaf_rn.exit.i.i.i2095
	add.f32 	%f471, %f786, 0f3F800000;
	fma.rn.f32 	%f473, %f469, 0fC0400000, %f189;
	setp.ge.f32 	%p137, %f473, 0f00000000;
	add.f32 	%f474, %f471, 0f3F800000;
	selp.f32 	%f786, %f474, %f471, %p137;
$L__BB0_191:                            // %__internal_fmodf_fastpath_quot.exit.i.i2098
	fma.rn.f32 	%f788, %f786, 0fC0000000, %f788;
$L__BB0_196:                            // %__internal_fmodf_kernel.exit.i2117
	abs.f32 	%f488, %f788;
	setp.gtu.f32 	%p144, %f488, 0f7F800000;
	@%p144 bra 	$L__BB0_198;
// %bb.197:
	mov.b32 	%r417, %f788;
	or.b32  	%r418, %r152, %r417;
	mov.b32 	%f788, %r418;
$L__BB0_198:                            // %__nv_fmodf.exit2118
	mov.f32 	%f512, 0f00000000;
	mov.f32 	%f521, 0f41000000;
	div.approx.f32 	%f203, %f512, %f521;
	abs.f32 	%f760, %f203;
	setp.lt.f32 	%p152, %f760, 0f40000000;
	@%p152 bra 	$L__BB0_92;
// %bb.81:
	setp.gtu.f32 	%p153, %f760, 0f4B800000;
	@%p153 bra 	$L__BB0_88;
	bra.uni 	$L__BB0_82;
$L__BB0_88:
	mov.b32 	%r46, %f760;
	and.b32  	%r433, %r46, 8388607;
	or.b32  	%r2993, %r433, 1065353216;
	mov.b32 	%f759, %r2993;
	add.s32 	%r434, %r46, -1073741824;
	and.b32  	%r2994, %r434, -8388608;
	setp.eq.s32 	%p159, %r2994, 0;
	@%p159 bra 	$L__BB0_91;
// %bb.89:                              // %__nv_fmaf_rn.exit4.i.i.i2143.preheader
	mov.f32 	%f531, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f530,%f531;
	// end inline asm
$L__BB0_90:                             // %__nv_fmaf_rn.exit4.i.i.i2143
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r435, %r2994, 192937984;
	add.s32 	%r436, %r2993, %r435;
	mov.b32 	%f532, %r436;
	mul.f32 	%f533, %f530, %f532;
	sub.f32 	%f534, %f532, %f533;
	fma.rn.f32 	%f535, %f534, %f530, %f533;
	sub.f32 	%f536, %f532, %f535;
	fma.rz.f32 	%f537, %f536, %f530, %f535;
	cvt.rzi.f32.f32 	%f538, %f537;
	sub.f32 	%f759, %f532, %f538;
	sub.s32 	%r2994, %r2994, %r435;
	mov.b32 	%r2993, %f759;
	setp.ne.s32 	%p160, %r2994, 0;
	setp.ne.s32 	%p161, %r2993, 0;
	and.pred  	%p162, %p160, %p161;
	@%p162 bra 	$L__BB0_90;
$L__BB0_91:                             // %__internal_fmodf_slowpath_mod.exit.i.i2145
	setp.gt.u32 	%p163, %r46, 2139095039;
	selp.f32 	%f539, 0f7FFFFFFF, 0f4B800000, %p163;
	mul.f32 	%f540, %f759, 0f34000000;
	mul.f32 	%f760, %f539, %f540;
	bra.uni 	$L__BB0_92;
$L__BB0_82:                             // %__nv_fast_fdividef.exit.i.i.i2122
	mov.f32 	%f522, 0f40000000;
	div.approx.f32 	%f523, %f760, %f522;
	cvt.rzi.f32.f32 	%f758, %f523;
	fma.rn.f32 	%f88, %f758, 0fC0000000, %f760;
	mov.b32 	%r45, %f88;
	setp.lt.u32 	%p154, %r45, 1073741824;
	@%p154 bra 	$L__BB0_87;
// %bb.83:
	setp.lt.u32 	%p155, %r45, -2147483647;
	@%p155 bra 	$L__BB0_85;
// %bb.84:
	add.f32 	%f528, %f758, 0fBF800000;
	setp.lt.f32 	%p158, %f88, 0fC0000000;
	add.f32 	%f529, %f528, 0fBF800000;
	selp.f32 	%f758, %f529, %f528, %p158;
	bra.uni 	$L__BB0_87;
$L__BB0_85:
	add.f32 	%f758, %f758, 0f3F800000;
	setp.ltu.f32 	%p156, %f88, 0f40800000;
	@%p156 bra 	$L__BB0_87;
// %bb.86:                              // %__nv_fmaf_rn.exit.i.i.i2126
	add.f32 	%f524, %f758, 0f3F800000;
	fma.rn.f32 	%f526, %f522, 0fC0400000, %f88;
	setp.ge.f32 	%p157, %f526, 0f00000000;
	add.f32 	%f527, %f524, 0f3F800000;
	selp.f32 	%f758, %f527, %f524, %p157;
$L__BB0_87:                             // %__internal_fmodf_fastpath_quot.exit.i.i2129
	fma.rn.f32 	%f760, %f758, 0fC0000000, %f760;
$L__BB0_92:                             // %__internal_fmodf_kernel.exit.i2148
	abs.f32 	%f541, %f760;
	setp.gtu.f32 	%p164, %f541, 0f7F800000;
	@%p164 bra 	$L__BB0_94;
// %bb.93:
	mov.b32 	%r437, %f203;
	and.b32  	%r438, %r437, -2147483648;
	mov.b32 	%r439, %f760;
	or.b32  	%r440, %r438, %r439;
	mov.b32 	%f760, %r440;
$L__BB0_94:                             // %__nv_fmodf.exit2149
	cvt.rn.f32.s32 	%f572, %r143;
	div.approx.f32 	%f104, %f572, %f521;
	abs.f32 	%f764, %f104;
	setp.lt.f32 	%p172, %f764, 0f40000000;
	@%p172 bra 	$L__BB0_106;
// %bb.95:
	setp.gtu.f32 	%p173, %f764, 0f4B800000;
	@%p173 bra 	$L__BB0_102;
	bra.uni 	$L__BB0_96;
$L__BB0_102:
	mov.b32 	%r54, %f764;
	and.b32  	%r449, %r54, 8388607;
	or.b32  	%r2995, %r449, 1065353216;
	mov.b32 	%f763, %r2995;
	add.s32 	%r450, %r54, -1073741824;
	and.b32  	%r2996, %r450, -8388608;
	setp.eq.s32 	%p179, %r2996, 0;
	@%p179 bra 	$L__BB0_105;
// %bb.103:                             // %__nv_fmaf_rn.exit4.i.i.i2174.preheader
	mov.f32 	%f583, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f582,%f583;
	// end inline asm
$L__BB0_104:                            // %__nv_fmaf_rn.exit4.i.i.i2174
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r451, %r2996, 192937984;
	add.s32 	%r452, %r2995, %r451;
	mov.b32 	%f584, %r452;
	mul.f32 	%f585, %f582, %f584;
	sub.f32 	%f586, %f584, %f585;
	fma.rn.f32 	%f587, %f586, %f582, %f585;
	sub.f32 	%f588, %f584, %f587;
	fma.rz.f32 	%f589, %f588, %f582, %f587;
	cvt.rzi.f32.f32 	%f590, %f589;
	sub.f32 	%f763, %f584, %f590;
	sub.s32 	%r2996, %r2996, %r451;
	mov.b32 	%r2995, %f763;
	setp.ne.s32 	%p180, %r2996, 0;
	setp.ne.s32 	%p181, %r2995, 0;
	and.pred  	%p182, %p180, %p181;
	@%p182 bra 	$L__BB0_104;
$L__BB0_105:                            // %__internal_fmodf_slowpath_mod.exit.i.i2176
	setp.gt.u32 	%p183, %r54, 2139095039;
	selp.f32 	%f591, 0f7FFFFFFF, 0f4B800000, %p183;
	mul.f32 	%f592, %f763, 0f34000000;
	mul.f32 	%f764, %f591, %f592;
	bra.uni 	$L__BB0_106;
$L__BB0_96:                             // %__nv_fast_fdividef.exit.i.i.i2153
	mov.f32 	%f574, 0f40000000;
	div.approx.f32 	%f575, %f764, %f574;
	cvt.rzi.f32.f32 	%f762, %f575;
	fma.rn.f32 	%f107, %f762, 0fC0000000, %f764;
	mov.b32 	%r53, %f107;
	setp.lt.u32 	%p174, %r53, 1073741824;
	@%p174 bra 	$L__BB0_101;
// %bb.97:
	setp.lt.u32 	%p175, %r53, -2147483647;
	@%p175 bra 	$L__BB0_99;
// %bb.98:
	add.f32 	%f580, %f762, 0fBF800000;
	setp.lt.f32 	%p178, %f107, 0fC0000000;
	add.f32 	%f581, %f580, 0fBF800000;
	selp.f32 	%f762, %f581, %f580, %p178;
	bra.uni 	$L__BB0_101;
$L__BB0_99:
	add.f32 	%f762, %f762, 0f3F800000;
	setp.ltu.f32 	%p176, %f107, 0f40800000;
	@%p176 bra 	$L__BB0_101;
// %bb.100:                             // %__nv_fmaf_rn.exit.i.i.i2157
	add.f32 	%f576, %f762, 0f3F800000;
	fma.rn.f32 	%f578, %f574, 0fC0400000, %f107;
	setp.ge.f32 	%p177, %f578, 0f00000000;
	add.f32 	%f579, %f576, 0f3F800000;
	selp.f32 	%f762, %f579, %f576, %p177;
$L__BB0_101:                            // %__internal_fmodf_fastpath_quot.exit.i.i2160
	fma.rn.f32 	%f764, %f762, 0fC0000000, %f764;
$L__BB0_106:                            // %__internal_fmodf_kernel.exit.i2179
	abs.f32 	%f593, %f764;
	setp.gtu.f32 	%p184, %f593, 0f7F800000;
	@%p184 bra 	$L__BB0_108;
// %bb.107:
	mov.b32 	%r453, %f104;
	and.b32  	%r454, %r453, -2147483648;
	mov.b32 	%r455, %f764;
	or.b32  	%r456, %r454, %r455;
	mov.b32 	%f764, %r456;
$L__BB0_108:                            // %__nv_fmodf.exit2180
	and.b32  	%r64, %r289, 1;
	shr.u32 	%r65, %r289, 4;
	setp.ne.s32 	%p192, %r64, %r65;
	mov.f32 	%f770, %f512;
	mov.f32 	%f779, %f512;
	@%p192 bra 	$L__BB0_124;
// %bb.109:                             // %L895
	mov.f32 	%f626, 0f3F800000;
	mov.f32 	%f627, 0f00000000;
	div.approx.f32 	%f121, %f627, %f626;
	abs.f32 	%f768, %f121;
	setp.lt.f32 	%p193, %f768, 0f40000000;
	@%p193 bra 	$L__BB0_121;
// %bb.110:
	setp.gtu.f32 	%p194, %f768, 0f4B800000;
	@%p194 bra 	$L__BB0_117;
	bra.uni 	$L__BB0_111;
$L__BB0_117:
	mov.b32 	%r67, %f768;
	and.b32  	%r471, %r67, 8388607;
	or.b32  	%r2997, %r471, 1065353216;
	mov.b32 	%f767, %r2997;
	add.s32 	%r472, %r67, -1073741824;
	and.b32  	%r2998, %r472, -8388608;
	setp.eq.s32 	%p200, %r2998, 0;
	@%p200 bra 	$L__BB0_120;
// %bb.118:                             // %__nv_fmaf_rn.exit4.i.i.i2205.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f636,%f626;
	// end inline asm
$L__BB0_119:                            // %__nv_fmaf_rn.exit4.i.i.i2205
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r473, %r2998, 192937984;
	add.s32 	%r474, %r2997, %r473;
	mov.b32 	%f638, %r474;
	mul.f32 	%f639, %f636, %f638;
	sub.f32 	%f640, %f638, %f639;
	fma.rn.f32 	%f641, %f640, %f636, %f639;
	sub.f32 	%f642, %f638, %f641;
	fma.rz.f32 	%f643, %f642, %f636, %f641;
	cvt.rzi.f32.f32 	%f644, %f643;
	sub.f32 	%f767, %f638, %f644;
	sub.s32 	%r2998, %r2998, %r473;
	mov.b32 	%r2997, %f767;
	setp.ne.s32 	%p201, %r2998, 0;
	setp.ne.s32 	%p202, %r2997, 0;
	and.pred  	%p203, %p201, %p202;
	@%p203 bra 	$L__BB0_119;
$L__BB0_120:                            // %__internal_fmodf_slowpath_mod.exit.i.i2207
	setp.gt.u32 	%p204, %r67, 2139095039;
	selp.f32 	%f645, 0f7FFFFFFF, 0f4B800000, %p204;
	mul.f32 	%f646, %f767, 0f34000000;
	mul.f32 	%f768, %f645, %f646;
	bra.uni 	$L__BB0_121;
$L__BB0_111:                            // %__nv_fast_fdividef.exit.i.i.i2184
	mov.f32 	%f628, 0f40000000;
	div.approx.f32 	%f629, %f768, %f628;
	cvt.rzi.f32.f32 	%f766, %f629;
	fma.rn.f32 	%f124, %f766, 0fC0000000, %f768;
	mov.b32 	%r66, %f124;
	setp.lt.u32 	%p195, %r66, 1073741824;
	@%p195 bra 	$L__BB0_116;
// %bb.112:
	setp.lt.u32 	%p196, %r66, -2147483647;
	@%p196 bra 	$L__BB0_114;
// %bb.113:
	add.f32 	%f634, %f766, 0fBF800000;
	setp.lt.f32 	%p199, %f124, 0fC0000000;
	add.f32 	%f635, %f634, 0fBF800000;
	selp.f32 	%f766, %f635, %f634, %p199;
	bra.uni 	$L__BB0_116;
$L__BB0_114:
	add.f32 	%f766, %f766, 0f3F800000;
	setp.ltu.f32 	%p197, %f124, 0f40800000;
	@%p197 bra 	$L__BB0_116;
// %bb.115:                             // %__nv_fmaf_rn.exit.i.i.i2188
	add.f32 	%f630, %f766, 0f3F800000;
	fma.rn.f32 	%f632, %f628, 0fC0400000, %f124;
	setp.ge.f32 	%p198, %f632, 0f00000000;
	add.f32 	%f633, %f630, 0f3F800000;
	selp.f32 	%f766, %f633, %f630, %p198;
$L__BB0_116:                            // %__internal_fmodf_fastpath_quot.exit.i.i2191
	fma.rn.f32 	%f768, %f766, 0fC0000000, %f768;
$L__BB0_121:                            // %__internal_fmodf_kernel.exit.i2210
	abs.f32 	%f647, %f768;
	setp.gtu.f32 	%p205, %f647, 0f7F800000;
	@%p205 bra 	$L__BB0_123;
// %bb.122:
	mov.b32 	%r475, %f121;
	and.b32  	%r476, %r475, -2147483648;
	mov.b32 	%r477, %f768;
	or.b32  	%r478, %r476, %r477;
	mov.b32 	%f768, %r478;
$L__BB0_123:                            // %__nv_fmodf.exit2211
	add.f32 	%f648, %f768, %f768;
	mov.b32 	%r479, %f648;
	and.b32  	%r480, %r479, -2147483648;
	or.b32  	%r481, %r480, 1056964608;
	mov.b32 	%f649, %r481;
	add.f32 	%f650, %f648, %f649;
	cvt.rzi.f32.f32 	%f651, %f650;
	abs.f32 	%f652, %f648;
	setp.gt.f32 	%p206, %f652, 0f4B000000;
	selp.f32 	%f653, %f648, %f651, %p206;
	cvt.rzi.f32.f32 	%f654, %f648;
	setp.lt.f32 	%p207, %f652, 0f3F000000;
	selp.f32 	%f655, %f654, %f653, %p207;
	cvt.rzi.s32.f32 	%r482, %f655;
	fma.rn.f32 	%f656, %f655, 0fBF000000, %f768;
	mul.f32 	%f657, %f656, %f656;
	fma.rn.f32 	%f658, %f657, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f659, %f657, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f660, %f658, %f657, 0fC0A55DF6;
	fma.rn.f32 	%f661, %f659, %f657, 0f4081E0CF;
	fma.rn.f32 	%f662, %f657, %f656, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f657, 0fC09DE9E6;
	fma.rn.f32 	%f664, %f660, %f662, 0f00000000;
	fma.rn.f32 	%f665, %f663, %f657, 0f3F800000;
	fma.rn.f32 	%f666, %f656, 0f40490FDB, %f664;
	and.b32  	%r483, %r482, 1;
	setp.eq.b32 	%p208, %r483, 1;
	selp.f32 	%f667, %f665, %f666, %p208;
	selp.f32 	%f668, %f666, %f665, %p208;
	and.b32  	%r484, %r482, 2;
	setp.eq.s32 	%p209, %r484, 0;
	neg.f32 	%f669, %f667;
	selp.f32 	%f670, %f667, %f669, %p209;
	add.s32 	%r485, %r482, 1;
	and.b32  	%r486, %r485, 2;
	setp.eq.s32 	%p210, %r486, 0;
	sub.f32 	%f672, %f627, %f668;
	selp.f32 	%f673, %f668, %f672, %p210;
	cvt.rzi.f32.f32 	%f674, %f768;
	setp.eq.f32 	%p211, %f674, %f768;
	mul.f32 	%f675, %f768, 0f00000000;
	selp.f32 	%f779, %f675, %f670, %p211;
	abs.f32 	%f676, %f768;
	setp.gt.f32 	%p212, %f676, 0f4B800000;
	add.f32 	%f677, %f779, 0f3F800000;
	selp.f32 	%f770, %f677, %f673, %p212;
$L__BB0_124:                            // %L934
	and.b32  	%r63, %r143, 1;
	mov.f32 	%f776, %f512;
	mov.f32 	%f781, %f512;
	@%p192 bra 	$L__BB0_140;
// %bb.125:                             // %L937
	cvt.rn.f32.s32 	%f679, %r63;
	mov.f32 	%f680, 0f3F800000;
	div.approx.f32 	%f142, %f679, %f680;
	abs.f32 	%f774, %f142;
	setp.lt.f32 	%p214, %f774, 0f40000000;
	@%p214 bra 	$L__BB0_137;
// %bb.126:
	setp.gtu.f32 	%p215, %f774, 0f4B800000;
	@%p215 bra 	$L__BB0_133;
	bra.uni 	$L__BB0_127;
$L__BB0_133:
	mov.b32 	%r75, %f774;
	and.b32  	%r487, %r75, 8388607;
	or.b32  	%r2999, %r487, 1065353216;
	mov.b32 	%f773, %r2999;
	add.s32 	%r488, %r75, -1073741824;
	and.b32  	%r3000, %r488, -8388608;
	setp.eq.s32 	%p221, %r3000, 0;
	@%p221 bra 	$L__BB0_136;
// %bb.134:                             // %__nv_fmaf_rn.exit4.i.i.i2236.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f689,%f680;
	// end inline asm
$L__BB0_135:                            // %__nv_fmaf_rn.exit4.i.i.i2236
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r489, %r3000, 192937984;
	add.s32 	%r490, %r2999, %r489;
	mov.b32 	%f691, %r490;
	mul.f32 	%f692, %f689, %f691;
	sub.f32 	%f693, %f691, %f692;
	fma.rn.f32 	%f694, %f693, %f689, %f692;
	sub.f32 	%f695, %f691, %f694;
	fma.rz.f32 	%f696, %f695, %f689, %f694;
	cvt.rzi.f32.f32 	%f697, %f696;
	sub.f32 	%f773, %f691, %f697;
	sub.s32 	%r3000, %r3000, %r489;
	mov.b32 	%r2999, %f773;
	setp.ne.s32 	%p222, %r3000, 0;
	setp.ne.s32 	%p223, %r2999, 0;
	and.pred  	%p224, %p222, %p223;
	@%p224 bra 	$L__BB0_135;
$L__BB0_136:                            // %__internal_fmodf_slowpath_mod.exit.i.i2238
	setp.gt.u32 	%p225, %r75, 2139095039;
	selp.f32 	%f698, 0f7FFFFFFF, 0f4B800000, %p225;
	mul.f32 	%f699, %f773, 0f34000000;
	mul.f32 	%f774, %f698, %f699;
	bra.uni 	$L__BB0_137;
$L__BB0_127:                            // %__nv_fast_fdividef.exit.i.i.i2215
	mov.f32 	%f681, 0f40000000;
	div.approx.f32 	%f682, %f774, %f681;
	cvt.rzi.f32.f32 	%f772, %f682;
	fma.rn.f32 	%f145, %f772, 0fC0000000, %f774;
	mov.b32 	%r74, %f145;
	setp.lt.u32 	%p216, %r74, 1073741824;
	@%p216 bra 	$L__BB0_132;
// %bb.128:
	setp.lt.u32 	%p217, %r74, -2147483647;
	@%p217 bra 	$L__BB0_130;
// %bb.129:
	add.f32 	%f687, %f772, 0fBF800000;
	setp.lt.f32 	%p220, %f145, 0fC0000000;
	add.f32 	%f688, %f687, 0fBF800000;
	selp.f32 	%f772, %f688, %f687, %p220;
	bra.uni 	$L__BB0_132;
$L__BB0_130:
	add.f32 	%f772, %f772, 0f3F800000;
	setp.ltu.f32 	%p218, %f145, 0f40800000;
	@%p218 bra 	$L__BB0_132;
// %bb.131:                             // %__nv_fmaf_rn.exit.i.i.i2219
	add.f32 	%f683, %f772, 0f3F800000;
	fma.rn.f32 	%f685, %f681, 0fC0400000, %f145;
	setp.ge.f32 	%p219, %f685, 0f00000000;
	add.f32 	%f686, %f683, 0f3F800000;
	selp.f32 	%f772, %f686, %f683, %p219;
$L__BB0_132:                            // %__internal_fmodf_fastpath_quot.exit.i.i2222
	fma.rn.f32 	%f774, %f772, 0fC0000000, %f774;
$L__BB0_137:                            // %__internal_fmodf_kernel.exit.i2241
	abs.f32 	%f700, %f774;
	setp.gtu.f32 	%p226, %f700, 0f7F800000;
	@%p226 bra 	$L__BB0_139;
// %bb.138:
	mov.b32 	%r491, %f142;
	and.b32  	%r492, %r491, -2147483648;
	mov.b32 	%r493, %f774;
	or.b32  	%r494, %r492, %r493;
	mov.b32 	%f774, %r494;
$L__BB0_139:                            // %__nv_fmodf.exit2242
	add.f32 	%f701, %f774, %f774;
	mov.b32 	%r495, %f701;
	and.b32  	%r496, %r495, -2147483648;
	or.b32  	%r497, %r496, 1056964608;
	mov.b32 	%f702, %r497;
	add.f32 	%f703, %f701, %f702;
	cvt.rzi.f32.f32 	%f704, %f703;
	abs.f32 	%f705, %f701;
	setp.gt.f32 	%p227, %f705, 0f4B000000;
	selp.f32 	%f706, %f701, %f704, %p227;
	cvt.rzi.f32.f32 	%f707, %f701;
	setp.lt.f32 	%p228, %f705, 0f3F000000;
	selp.f32 	%f708, %f707, %f706, %p228;
	cvt.rzi.s32.f32 	%r498, %f708;
	fma.rn.f32 	%f709, %f708, 0fBF000000, %f774;
	mul.f32 	%f710, %f709, %f709;
	fma.rn.f32 	%f711, %f710, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f712, %f710, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f713, %f711, %f710, 0fC0A55DF6;
	fma.rn.f32 	%f714, %f712, %f710, 0f4081E0CF;
	fma.rn.f32 	%f715, %f710, %f709, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f710, 0fC09DE9E6;
	fma.rn.f32 	%f717, %f713, %f715, 0f00000000;
	fma.rn.f32 	%f718, %f716, %f710, 0f3F800000;
	fma.rn.f32 	%f719, %f709, 0f40490FDB, %f717;
	and.b32  	%r499, %r498, 1;
	setp.eq.b32 	%p229, %r499, 1;
	selp.f32 	%f720, %f718, %f719, %p229;
	selp.f32 	%f721, %f719, %f718, %p229;
	and.b32  	%r500, %r498, 2;
	setp.eq.s32 	%p230, %r500, 0;
	neg.f32 	%f722, %f720;
	selp.f32 	%f723, %f720, %f722, %p230;
	add.s32 	%r501, %r498, 1;
	and.b32  	%r502, %r501, 2;
	setp.eq.s32 	%p231, %r502, 0;
	mov.f32 	%f724, 0f00000000;
	sub.f32 	%f725, %f724, %f721;
	selp.f32 	%f726, %f721, %f725, %p231;
	cvt.rzi.f32.f32 	%f727, %f774;
	setp.eq.f32 	%p232, %f727, %f774;
	mul.f32 	%f728, %f774, 0f00000000;
	selp.f32 	%f781, %f728, %f723, %p232;
	abs.f32 	%f729, %f774;
	setp.gt.f32 	%p233, %f729, 0f4B800000;
	add.f32 	%f730, %f781, 0f3F800000;
	selp.f32 	%f776, %f730, %f726, %p233;
$L__BB0_140:                            // %L971
	mov.f32 	%f165, %f770;
	mov.f32 	%f167, %f776;
	@%p131 bra 	$L__BB0_142;
// %bb.141:                             // %L980
	neg.f32 	%f167, %f781;
	neg.f32 	%f165, %f779;
	mov.f32 	%f779, %f770;
	mov.f32 	%f781, %f776;
$L__BB0_142:                            // %L982
	setp.gt.u32 	%p235, %r289, 15;
	mov.u32 	%r168, 999999999;
	@%p235 bra 	$L__BB0_200;
// %bb.143:                             // %L1012
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	mad.lo.s32 	%r510, %r289, 6, %r4;
	cvt.u16.u32 	%rs15, %r510;
	and.b16  	%rs16, %rs15, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 14;
	mul.lo.s16 	%rs19, %rs18, 96;
	sub.s16 	%rs20, %rs15, %rs19;
	cvt.u32.u16 	%r511, %rs20;
	and.b32  	%r512, %r511, 255;
	mul.wide.u32 	%rd21, %r512, 4;
	add.s64 	%rd22, %rd1, %rd21;
	ld.global.u32 	%r513, [%rd22];
	shl.b32 	%r514, %r513, 16;
	cvt.s32.s16 	%r84, %r513;
	shr.s32 	%r85, %r513, 16;
	or.b32  	%r515, %r514, 65535;
	setp.lt.u32 	%p236, %r515, 589823;
	setp.lt.u32 	%p237, %r513, 786432;
	and.pred  	%p238, %p236, %p237;
	@%p238 bra 	$L__BB0_199;
	bra.uni 	$L__BB0_144;
$L__BB0_199:                            // %L1254
	mul.lo.s32 	%r519, %r85, 290;
	mad.lo.s32 	%r168, %r84, 33, %r519;
$L__BB0_200:                            // %pass533
	add.f32 	%f227, %f784, %f784;
	mov.b32 	%r317, %f227;
	add.f32 	%f489, %f788, %f788;
	and.b32  	%r318, %r317, -2147483648;
	add.f32 	%f282, %f734, %f734;
	mov.b32 	%r425, %f489;
	or.b32  	%r319, %r318, 1056964608;
	mov.b32 	%r334, %f282;
	and.b32  	%r426, %r425, -2147483648;
	add.f32 	%f542, %f760, %f760;
	add.f32 	%f595, %f764, %f764;
	mov.b32 	%f228, %r319;
	and.b32  	%r335, %r334, -2147483648;
	or.b32  	%r427, %r426, 1056964608;
	mov.b32 	%r441, %f542;
	mov.b32 	%r463, %f595;
	add.f32 	%f229, %f227, %f228;
	abs.f32 	%f231, %f227;
	or.b32  	%r336, %r335, 1056964608;
	mov.b32 	%f490, %r427;
	and.b32  	%r442, %r441, -2147483648;
	and.b32  	%r464, %r463, -2147483648;
	cvt.rzi.f32.f32 	%f230, %f229;
	setp.gt.f32 	%p39, %f231, 0f4B000000;
	mov.b32 	%f283, %r336;
	add.f32 	%f491, %f489, %f490;
	abs.f32 	%f493, %f489;
	or.b32  	%r443, %r442, 1056964608;
	or.b32  	%r465, %r464, 1056964608;
	selp.f32 	%f232, %f227, %f230, %p39;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p40, %f231, 0f3F000000;
	add.f32 	%f284, %f282, %f283;
	abs.f32 	%f286, %f282;
	cvt.rzi.f32.f32 	%f492, %f491;
	setp.gt.f32 	%p145, %f493, 0f4B000000;
	mov.b32 	%f543, %r443;
	mov.b32 	%f596, %r465;
	selp.f32 	%f234, %f233, %f232, %p40;
	cvt.rzi.f32.f32 	%f285, %f284;
	setp.gt.f32 	%p59, %f286, 0f4B000000;
	selp.f32 	%f494, %f489, %f492, %p145;
	cvt.rzi.f32.f32 	%f495, %f489;
	setp.lt.f32 	%p146, %f493, 0f3F000000;
	add.f32 	%f544, %f542, %f543;
	abs.f32 	%f546, %f542;
	add.f32 	%f597, %f595, %f596;
	abs.f32 	%f599, %f595;
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f784;
	selp.f32 	%f287, %f282, %f285, %p59;
	cvt.rzi.f32.f32 	%f288, %f282;
	setp.lt.f32 	%p60, %f286, 0f3F000000;
	selp.f32 	%f496, %f495, %f494, %p146;
	cvt.rzi.f32.f32 	%f545, %f544;
	setp.gt.f32 	%p165, %f546, 0f4B000000;
	cvt.rzi.f32.f32 	%f598, %f597;
	setp.gt.f32 	%p185, %f599, 0f4B000000;
	mul.f32 	%f236, %f235, %f235;
	selp.f32 	%f289, %f288, %f287, %p60;
	fma.rn.f32 	%f497, %f496, 0fBF000000, %f788;
	selp.f32 	%f547, %f542, %f545, %p165;
	cvt.rzi.f32.f32 	%f548, %f542;
	setp.lt.f32 	%p166, %f546, 0f3F000000;
	selp.f32 	%f600, %f595, %f598, %p185;
	cvt.rzi.f32.f32 	%f601, %f595;
	setp.lt.f32 	%p186, %f599, 0f3F000000;
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f290, %f289, 0fBF000000, %f734;
	mul.f32 	%f498, %f497, %f497;
	selp.f32 	%f549, %f548, %f547, %p166;
	selp.f32 	%f602, %f601, %f600, %p186;
	cvt.rzi.s32.f32 	%r320, %f234;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	mul.f32 	%f291, %f290, %f290;
	fma.rn.f32 	%f499, %f498, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f500, %f498, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f550, %f549, 0fBF000000, %f760;
	fma.rn.f32 	%f603, %f602, 0fBF000000, %f764;
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r321, %r320, 1;
	fma.rn.f32 	%f292, %f291, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f293, %f291, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r428, %f496;
	fma.rn.f32 	%f501, %f499, %f498, 0fC0A55DF6;
	fma.rn.f32 	%f502, %f500, %f498, 0f4081E0CF;
	fma.rn.f32 	%f503, %f498, %f497, 0f00000000;
	mul.f32 	%f551, %f550, %f550;
	mul.f32 	%f604, %f603, %f603;
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p41, %r321, 1;
	cvt.rzi.s32.f32 	%r337, %f289;
	fma.rn.f32 	%f294, %f292, %f291, 0fC0A55DF6;
	fma.rn.f32 	%f295, %f293, %f291, 0f4081E0CF;
	fma.rn.f32 	%f296, %f291, %f290, 0f00000000;
	fma.rn.f32 	%f504, %f502, %f498, 0fC09DE9E6;
	fma.rn.f32 	%f505, %f501, %f503, 0f00000000;
	and.b32  	%r429, %r428, 1;
	fma.rn.f32 	%f552, %f551, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f553, %f551, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f604, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f606, %f604, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f246, %f244, %f245, %p41;
	and.b32  	%r322, %r320, 2;
	fma.rn.f32 	%f297, %f295, %f291, 0fC09DE9E6;
	fma.rn.f32 	%f298, %f294, %f296, 0f00000000;
	and.b32  	%r338, %r337, 1;
	fma.rn.f32 	%f506, %f504, %f498, 0f3F800000;
	fma.rn.f32 	%f507, %f497, 0f40490FDB, %f505;
	setp.eq.b32 	%p147, %r429, 1;
	cvt.rzi.s32.f32 	%r444, %f549;
	fma.rn.f32 	%f554, %f552, %f551, 0fC0A55DF6;
	fma.rn.f32 	%f555, %f553, %f551, 0f4081E0CF;
	fma.rn.f32 	%f556, %f551, %f550, 0f00000000;
	cvt.rzi.s32.f32 	%r466, %f602;
	fma.rn.f32 	%f607, %f605, %f604, 0fC0A55DF6;
	fma.rn.f32 	%f608, %f606, %f604, 0f4081E0CF;
	fma.rn.f32 	%f609, %f604, %f603, 0f00000000;
	setp.eq.s32 	%p42, %r322, 0;
	neg.f32 	%f248, %f246;
	add.s32 	%r323, %r320, 1;
	cvt.rzi.f32.f32 	%f253, %f784;
	fma.rn.f32 	%f299, %f297, %f291, 0f3F800000;
	fma.rn.f32 	%f300, %f290, 0f40490FDB, %f298;
	setp.eq.b32 	%p61, %r338, 1;
	selp.f32 	%f508, %f506, %f507, %p147;
	and.b32  	%r430, %r428, 2;
	fma.rn.f32 	%f557, %f555, %f551, 0fC09DE9E6;
	fma.rn.f32 	%f558, %f554, %f556, 0f00000000;
	and.b32  	%r445, %r444, 1;
	fma.rn.f32 	%f610, %f608, %f604, 0fC09DE9E6;
	fma.rn.f32 	%f611, %f607, %f609, 0f00000000;
	and.b32  	%r467, %r466, 1;
	selp.f32 	%f247, %f245, %f244, %p41;
	selp.f32 	%f249, %f246, %f248, %p42;
	and.b32  	%r324, %r323, 2;
	setp.eq.f32 	%p44, %f253, %f784;
	mul.f32 	%f254, %f784, 0f00000000;
	selp.f32 	%f301, %f299, %f300, %p61;
	and.b32  	%r339, %r337, 2;
	setp.eq.s32 	%p148, %r430, 0;
	neg.f32 	%f510, %f508;
	add.s32 	%r431, %r428, 1;
	cvt.rzi.f32.f32 	%f515, %f788;
	fma.rn.f32 	%f559, %f557, %f551, 0f3F800000;
	fma.rn.f32 	%f560, %f550, 0f40490FDB, %f558;
	setp.eq.b32 	%p167, %r445, 1;
	fma.rn.f32 	%f612, %f610, %f604, 0f3F800000;
	fma.rn.f32 	%f613, %f603, 0f40490FDB, %f611;
	setp.eq.b32 	%p187, %r467, 1;
	setp.eq.s32 	%p43, %r324, 0;
	sub.f32 	%f251, %f250, %f247;
	selp.f32 	%f255, %f254, %f249, %p44;
	abs.f32 	%f256, %f784;
	setp.eq.s32 	%p62, %r339, 0;
	neg.f32 	%f303, %f301;
	add.s32 	%r340, %r337, 1;
	cvt.rzi.f32.f32 	%f307, %f734;
	selp.f32 	%f509, %f507, %f506, %p147;
	selp.f32 	%f511, %f508, %f510, %p148;
	and.b32  	%r432, %r431, 2;
	setp.eq.f32 	%p150, %f515, %f788;
	mul.f32 	%f516, %f788, 0f00000000;
	selp.f32 	%f561, %f559, %f560, %p167;
	and.b32  	%r446, %r444, 2;
	selp.f32 	%f614, %f612, %f613, %p187;
	and.b32  	%r468, %r466, 2;
	selp.f32 	%f252, %f247, %f251, %p43;
	setp.gt.f32 	%p45, %f256, 0f4B800000;
	add.f32 	%f257, %f255, 0f3F800000;
	selp.f32 	%f302, %f300, %f299, %p61;
	selp.f32 	%f304, %f301, %f303, %p62;
	and.b32  	%r341, %r340, 2;
	setp.eq.f32 	%p64, %f307, %f734;
	mul.f32 	%f308, %f734, 0f00000000;
	setp.eq.s32 	%p149, %r432, 0;
	sub.f32 	%f513, %f512, %f509;
	selp.f32 	%f517, %f516, %f511, %p150;
	abs.f32 	%f518, %f788;
	setp.eq.s32 	%p168, %r446, 0;
	neg.f32 	%f563, %f561;
	add.s32 	%r447, %r444, 1;
	cvt.rzi.f32.f32 	%f568, %f760;
	setp.eq.s32 	%p188, %r468, 0;
	neg.f32 	%f616, %f614;
	add.s32 	%r469, %r466, 1;
	cvt.rzi.f32.f32 	%f620, %f764;
	selp.f32 	%f258, %f257, %f252, %p45;
	setp.eq.s32 	%p63, %r341, 0;
	sub.f32 	%f305, %f250, %f302;
	selp.f32 	%f16, %f308, %f304, %p64;
	abs.f32 	%f309, %f734;
	selp.f32 	%f514, %f509, %f513, %p149;
	setp.gt.f32 	%p151, %f518, 0f4B800000;
	add.f32 	%f519, %f517, 0f3F800000;
	selp.f32 	%f562, %f560, %f559, %p167;
	selp.f32 	%f564, %f561, %f563, %p168;
	and.b32  	%r448, %r447, 2;
	setp.eq.f32 	%p170, %f568, %f760;
	mul.f32 	%f569, %f760, 0f00000000;
	selp.f32 	%f615, %f613, %f612, %p187;
	selp.f32 	%f617, %f614, %f616, %p188;
	and.b32  	%r470, %r469, 2;
	setp.eq.f32 	%p190, %f620, %f764;
	mul.f32 	%f621, %f764, 0f00000000;
	mov.b32 	%r313, %f258;
	mov.b32 	%r316, %f255;
	selp.f32 	%f306, %f302, %f305, %p63;
	setp.gt.f32 	%p65, %f309, 0f4B800000;
	add.f32 	%f310, %f16, 0f3F800000;
	selp.f32 	%f520, %f519, %f514, %p151;
	setp.eq.s32 	%p169, %r448, 0;
	sub.f32 	%f566, %f512, %f562;
	selp.f32 	%f102, %f569, %f564, %p170;
	abs.f32 	%f570, %f760;
	setp.eq.s32 	%p189, %r470, 0;
	sub.f32 	%f618, %f512, %f615;
	selp.f32 	%f622, %f621, %f617, %p190;
	abs.f32 	%f623, %f764;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r312, %r316, -2147483648;
	selp.f32 	%f17, %f310, %f306, %p65;
	mov.b32 	%r421, %f520;
	mov.b32 	%r424, %f517;
	selp.f32 	%f567, %f562, %f566, %p169;
	setp.gt.f32 	%p171, %f570, 0f4B800000;
	add.f32 	%f571, %f102, 0f3F800000;
	selp.f32 	%f619, %f615, %f618, %p189;
	setp.gt.f32 	%p191, %f623, 0f4B800000;
	add.f32 	%f624, %f622, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r311, %r313, %r312;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r314, %r316, %r313;
	// end inline asm
	mov.b32 	%r364, %f17;
	mov.b32 	%r365, %f37;
	mov.b32 	%r367, %f16;
	mov.b32 	%r368, %f38;
	mov.b32 	%r408, %f83;
	mov.b32 	%r409, %f85;
	mov.b32 	%r411, %f755;
	mov.b32 	%r412, %f757;
	xor.b32  	%r420, %r424, -2147483648;
	selp.f32 	%f103, %f571, %f567, %p171;
	selp.f32 	%f625, %f624, %f619, %p191;
	// begin inline asm
	cvt.rn.f16x2.f32 %r363, %r365, %r364;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r366, %r368, %r367;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r407, %r409, %r408;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r410, %r412, %r411;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r419, %r421, %r420;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r422, %r424, %r421;
	// end inline asm
	mov.b32 	%r459, %f625;
	mov.b32 	%r458, %f103;
	mov.b32 	%r462, %f622;
	mov.b32 	%r461, %f102;
	// begin inline asm
	cvt.rn.f16x2.f32 %r457, %r459, %r458;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r460, %r462, %r461;
	// end inline asm
	mov.b32 	%r504, %f165;
	mov.b32 	%r505, %f167;
	// begin inline asm
	cvt.rn.f16x2.f32 %r503, %r505, %r504;
	// end inline asm
	mov.b32 	%r507, %f779;
	mov.b32 	%r508, %f781;
	// begin inline asm
	cvt.rn.f16x2.f32 %r506, %r508, %r507;
	// end inline asm
	and.b32  	%r521, %r1, 127;
	mul.lo.s32 	%r522, %r521, 192;
	shr.u32 	%r523, %r289, 3;
	bfe.u32 	%r524, %r289, 3, 1;
	shl.b32 	%r525, %r4, 1;
	and.b32  	%r526, %r525, 2;
	or.b32  	%r527, %r524, %r526;
	and.b32  	%r528, %r523, 2;
	or.b32  	%r169, %r528, %r63;
	cvt.u16.u32 	%rs23, %r169;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 9;
	mul.lo.s16 	%rs26, %rs25, 3;
	sub.s16 	%rs27, %rs23, %rs26;
	cvt.u32.u16 	%r529, %rs27;
	and.b32  	%r530, %r529, 255;
	and.b16  	%rs28, %rs27, 255;
	mul.wide.u16 	%r531, %rs28, 8;
	mul.lo.s32 	%r532, %r142, 24;
	add.s32 	%r533, %r532, %r522;
	or.b32  	%r534, %r533, %r527;
	add.s32 	%r535, %r534, %r531;
	mul.wide.u32 	%rd28, %r535, 4;
	add.s64 	%rd29, %rd2, %rd28;
	ld.global.u32 	%r170, [%rd29];
	or.b32  	%r536, %r527, 4;
	cvt.u64.u32 	%rd30, %r531;
	cvt.u64.u32 	%rd31, %r527;
	cvt.u64.u32 	%rd32, %r534;
	add.s64 	%rd33, %rd32, %rd30;
	shl.b64 	%rd34, %rd33, 2;
	add.s64 	%rd35, %rd2, %rd34;
	ld.global.u32 	%r171, [%rd35+16];
	cvt.u64.u32 	%rd36, %r532;
	cvt.u64.u32 	%rd37, %r522;
	add.s64 	%rd38, %rd37, %rd36;
	or.b64  	%rd39, %rd38, %rd31;
	add.s64 	%rd40, %rd39, %rd30;
	shl.b64 	%rd41, %rd40, 2;
	add.s64 	%rd42, %rd2, %rd41;
	ld.global.u32 	%r172, [%rd42+384];
	cvt.u64.u32 	%rd43, %r536;
	or.b64  	%rd44, %rd38, %rd43;
	add.s64 	%rd45, %rd44, %rd30;
	shl.b64 	%rd46, %rd45, 2;
	add.s64 	%rd47, %rd2, %rd46;
	ld.global.u32 	%r173, [%rd47+384];
	shl.b32 	%r537, %r4, 2;
	or.b32  	%r174, %r537, %r523;
	shl.b32 	%r538, %r289, 2;
	add.s32 	%r539, %r1, %r284;
	shl.b32 	%r175, %r539, 5;
	and.b32  	%r176, %r538, 28;
	and.b32  	%r177, %r289, 4;
	shl.b32 	%r540, %r289, 4;
	and.b32  	%r541, %r155, 8;
	or.b32  	%r542, %r541, %r540;
	bfe.u32 	%r543, %r542, 3, 3;
	mul.lo.s32 	%r178, %r543, 260;
	cvt.u16.u32 	%rs29, %r289;
	and.b16  	%rs30, %rs29, 255;
	mul.lo.s16 	%rs31, %rs30, 171;
	shr.u16 	%rs32, %rs31, 12;
	mul.lo.s16 	%rs33, %rs32, 24;
	sub.s16 	%rs34, %rs29, %rs33;
	cvt.u32.u16 	%r544, %rs34;
	and.b32  	%r179, %r544, 255;
	add.s32 	%r545, %r4, 6;
	shr.u32 	%r546, %r545, 3;
	add.s32 	%r547, %r5, 192;
	and.b32  	%r548, %r547, 224;
	mad.lo.s32 	%r180, %r546, 260, %r548;
	add.s32 	%r549, %r4, 12;
	shr.u32 	%r550, %r549, 3;
	add.s32 	%r551, %r5, 128;
	and.b32  	%r552, %r551, 224;
	mad.lo.s32 	%r181, %r550, 260, %r552;
	add.s32 	%r553, %r4, 18;
	shr.u32 	%r554, %r553, 3;
	add.s32 	%r555, %r5, 64;
	and.b32  	%r556, %r555, 224;
	mad.lo.s32 	%r182, %r554, 260, %r556;
	or.b32  	%r183, %r5, 780;
	add.s32 	%r557, %r4, 30;
	shr.u32 	%r558, %r557, 3;
	mad.lo.s32 	%r184, %r558, 260, %r548;
	add.s32 	%r559, %r4, 36;
	shr.u32 	%r560, %r559, 3;
	mad.lo.s32 	%r185, %r560, 260, %r552;
	add.s32 	%r561, %r4, 42;
	shr.u32 	%r562, %r561, 3;
	mad.lo.s32 	%r186, %r562, 260, %r556;
	or.b32  	%r187, %r5, 1560;
	add.s32 	%r563, %r4, 54;
	shr.u32 	%r564, %r563, 3;
	mad.lo.s32 	%r188, %r564, 260, %r548;
	add.s32 	%r565, %r4, 60;
	bfe.u32 	%r566, %r565, 3, 3;
	mad.lo.s32 	%r189, %r566, 260, %r552;
	mul.lo.s32 	%r567, %r142, 870;
	shr.u32 	%r568, %r4, 1;
	cvt.u16.u32 	%rs35, %r568;
	and.b16  	%rs36, %rs35, 255;
	mul.lo.s16 	%rs37, %rs36, 171;
	shr.u16 	%rs38, %rs37, 9;
	mul.lo.s16 	%rs39, %rs38, 3;
	sub.s16 	%rs40, %rs35, %rs39;
	cvt.u32.u16 	%r569, %rs40;
	and.b32  	%r190, %r569, 255;
	mad.lo.s32 	%r570, %r527, 33, %r567;
	mad.lo.s32 	%r191, %r530, 290, %r570;
	add.s32 	%r192, %r191, 132;
	setp.lt.u32 	%p239, %r289, 4;
	setp.eq.s32 	%p240, %r143, 1;
	setp.eq.s32 	%p241, %r143, 4;
	setp.eq.s32 	%p242, %r143, 5;
	bfe.s32 	%r571, %r4, 1, 1;
	and.b32  	%r572, %r571, 196;
	and.b32  	%r573, %r155, 6;
	and.b32  	%r574, %r4, 1;
	neg.s32 	%r575, %r574;
	and.b32  	%r576, %r575, 392;
	mul.lo.s32 	%r577, %r65, 784;
	bfe.s32 	%r578, %r289, 3, 1;
	and.b32  	%r579, %r578, 1576;
	shr.u32 	%r580, %r4, 2;
	or.b32  	%r581, %r63, %r573;
	or.b32  	%r582, %r581, %r577;
	mad.lo.s32 	%r583, %r580, 98, %r582;
	add.s32 	%r584, %r583, %r572;
	add.s32 	%r585, %r584, %r576;
	add.s32 	%r193, %r585, %r579;
	add.s32 	%r194, %r193, 8;
	mul.lo.s32 	%r586, %r282, 786432;
	mad.lo.s32 	%r587, %r286, 192, %r586;
	and.b32  	%r588, %r289, 7;
	or.b32  	%r195, %r2, %r588;
	cvt.u16.u32 	%rs41, %r174;
	and.b16  	%rs42, %rs41, 255;
	mul.lo.s16 	%rs43, %rs42, 171;
	shr.u16 	%rs44, %rs43, 9;
	and.b16  	%rs45, %rs44, 24;
	add.s16 	%rs46, %rs41, %rs45;
	shl.b16 	%rs47, %rs46, 3;
	cvt.u32.u16 	%r589, %rs47;
	and.b32  	%r196, %r589, 248;
	cvt.s64.s32 	%rd7, %r587;
	add.s32 	%r590, %r191, %r190;
	mul.wide.u32 	%rd48, %r590, 4;
	mov.u64 	%rd49, shmem;
	add.s64 	%rd8, %rd49, %rd48;
	add.s32 	%r591, %r192, %r190;
	mul.wide.u32 	%rd50, %r591, 4;
	add.s64 	%rd9, %rd49, %rd50;
	cvt.u64.u32 	%rd51, %r191;
	cvt.u64.u16 	%rd52, %rs40;
	and.b64  	%rd53, %rd52, 255;
	add.s64 	%rd54, %rd51, %rd53;
	shl.b64 	%rd55, %rd54, 2;
	add.s64 	%rd10, %rd49, %rd55;
	cvt.u64.u32 	%rd56, %r192;
	add.s64 	%rd57, %rd56, %rd53;
	shl.b64 	%rd58, %rd57, 2;
	add.s64 	%rd11, %rd49, %rd58;
	or.pred  	%p243, %p239, %p240;
	and.b32  	%r592, %r289, 24;
	setp.eq.s32 	%p244, %r592, 8;
	or.pred  	%p245, %p243, %p244;
	or.pred  	%p246, %p245, %p241;
	setp.eq.s32 	%p247, %r592, 24;
	or.pred  	%p248, %p242, %p247;
	selp.b32 	%r197, 1145324612, -286331154, %p245;
	or.pred  	%p1, %p246, %p248;
	selp.b32 	%r198, 1145324612, -286331154, %p243;
	add.s32 	%r593, %r143, -1;
	setp.lt.u32 	%p249, %r593, 3;
	or.pred  	%p2, %p239, %p249;
	setp.eq.s32 	%p250, %r592, 16;
	or.pred  	%p3, %p250, %p247;
	selp.b32 	%r199, 1145324612, -286331154, %p250;
	mov.u32 	%r87, 0;
	mov.u16 	%rs2, 0;
	mov.u16 	%rs1, 29;
	selp.b32 	%r249, %r198, %r199, %p2;
	or.pred  	%p281, %p2, %p3;
	mov.u32 	%r107, %r87;
	mov.u32 	%r108, %r87;
	mov.u32 	%r109, %r87;
	bra.uni 	$L__BB0_201;
$L__BB0_172:                            // %L24428
                                        //   in Loop: Header=BB0_201 Depth=1
	add.s32 	%r141, %r87, 48;
	add.s16 	%rs2, %rs2, 48;
	add.s16 	%rs1, %rs1, 48;
	setp.ne.s32 	%p312, %r87, 32688;
	mov.u32 	%r87, %r141;
	@%p312 bra 	$L__BB0_201;
	bra.uni 	$L__BB0_173;
$L__BB0_201:                            // %L1937
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_162 Depth 2
                                        //     Child Loop BB0_166 Depth 2
	add.s32 	%r594, %r87, %r280;
	setp.lt.s32 	%p251, %r594, %r281;
	@%p251 bra 	$L__BB0_202;
	bra.uni 	$L__BB0_173;
$L__BB0_202:                            // %oksrem889
                                        //   in Loop: Header=BB0_201 Depth=1
	setp.eq.s32 	%p252, %r177, 0;
	mul.hi.u32 	%r691, %r87, -1431655765;
	shr.u32 	%r692, %r691, 5;
	mul.lo.s32 	%r200, %r692, 48;
	add.s32 	%r693, %r200, %r174;
	add.s32 	%r694, %r693, %r280;
	mul.lo.s32 	%r695, %r694, 12288;
	or.b32  	%r696, %r176, %r695;
	add.s32 	%r697, %r696, %r175;
	mul.hi.s32 	%r698, %r697, 715827883;
	shr.u32 	%r699, %r698, 31;
	shr.s32 	%r700, %r698, 26;
	add.s32 	%r701, %r700, %r699;
	setp.lt.s32 	%p253, %r697, 0;
	mul.lo.s32 	%r702, %r701, 402653184;
	setp.ne.s32 	%p254, %r702, %r697;
	and.pred  	%p255, %p253, %p254;
	selp.s32 	%r703, -1, 0, %p255;
	add.s32 	%r704, %r701, %r703;
	mad.lo.s32 	%r705, %r704, -402653184, %r697;
	mul.wide.s32 	%rd59, %r705, 4;
	add.s64 	%rd60, %rd3, %rd59;
	ld.global.v4.u32 	{%r706, %r707, %r708, %r709}, [%rd60];
	add.s32 	%r710, %r697, 294912;
	mul.hi.s32 	%r711, %r710, 715827883;
	shr.u32 	%r712, %r711, 31;
	shr.s32 	%r713, %r711, 26;
	add.s32 	%r714, %r713, %r712;
	setp.lt.s32 	%p256, %r710, 0;
	mul.lo.s32 	%r715, %r714, 402653184;
	setp.ne.s32 	%p257, %r715, %r710;
	and.pred  	%p258, %p256, %p257;
	selp.s32 	%r716, -1, 0, %p258;
	add.s32 	%r717, %r714, %r716;
	mad.lo.s32 	%r718, %r717, -402653184, %r710;
	mul.wide.s32 	%rd61, %r718, 4;
	add.s64 	%rd62, %rd3, %rd61;
	ld.global.v4.u32 	{%r719, %r720, %r721, %r722}, [%rd62];
	selp.b32 	%r723, %r708, %r706, %p252;
	shfl.sync.bfly.b32	%r724, %r723, 4, 31, -1;
	selp.b32 	%r597, %r706, %r724, %p252;
	selp.b32 	%r602, %r724, %r708, %p252;
	selp.b32 	%r725, %r709, %r707, %p252;
	shfl.sync.bfly.b32	%r726, %r725, 4, 31, -1;
	selp.b32 	%r605, %r707, %r726, %p252;
	selp.b32 	%r610, %r726, %r709, %p252;
	selp.b32 	%r727, %r721, %r719, %p252;
	shfl.sync.bfly.b32	%r728, %r727, 4, 31, -1;
	selp.b32 	%r613, %r719, %r728, %p252;
	selp.b32 	%r618, %r728, %r721, %p252;
	selp.b32 	%r729, %r722, %r720, %p252;
	shfl.sync.bfly.b32	%r730, %r729, 4, 31, -1;
	selp.b32 	%r621, %r720, %r730, %p252;
	selp.b32 	%r626, %r730, %r722, %p252;
	shl.b32 	%r598, %r602, 4;
	mov.u32 	%r596, 252645135;
	// begin inline asm
	lop3.b32 %r628, %r596, %r597, %r598, 202;
	// end inline asm
	shr.u32 	%r601, %r597, 4;
	// begin inline asm
	lop3.b32 %r644, %r596, %r601, %r602, 202;
	// end inline asm
	shl.b32 	%r606, %r610, 4;
	// begin inline asm
	lop3.b32 %r636, %r596, %r605, %r606, 202;
	// end inline asm
	shr.u32 	%r609, %r605, 4;
	// begin inline asm
	lop3.b32 %r652, %r596, %r609, %r610, 202;
	// end inline asm
	shl.b32 	%r614, %r618, 4;
	// begin inline asm
	lop3.b32 %r629, %r596, %r613, %r614, 202;
	// end inline asm
	shr.u32 	%r617, %r613, 4;
	// begin inline asm
	lop3.b32 %r645, %r596, %r617, %r618, 202;
	// end inline asm
	shl.b32 	%r622, %r626, 4;
	// begin inline asm
	lop3.b32 %r637, %r596, %r621, %r622, 202;
	// end inline asm
	shr.u32 	%r625, %r621, 4;
	// begin inline asm
	lop3.b32 %r653, %r596, %r625, %r626, 202;
	// end inline asm
	mov.u32 	%r630, 25152;
	// begin inline asm
	prmt.b32 %r660, %r628, %r629, %r630;
	// end inline asm
	mov.u32 	%r634, 29521;
	// begin inline asm
	prmt.b32 %r676, %r628, %r629, %r634;
	// end inline asm
	// begin inline asm
	prmt.b32 %r668, %r636, %r637, %r630;
	// end inline asm
	// begin inline asm
	prmt.b32 %r684, %r636, %r637, %r634;
	// end inline asm
	// begin inline asm
	prmt.b32 %r661, %r644, %r645, %r630;
	// end inline asm
	// begin inline asm
	prmt.b32 %r677, %r644, %r645, %r634;
	// end inline asm
	// begin inline asm
	prmt.b32 %r669, %r652, %r653, %r630;
	// end inline asm
	// begin inline asm
	prmt.b32 %r685, %r652, %r653, %r634;
	// end inline asm
	mov.u32 	%r662, 21520;
	// begin inline asm
	prmt.b32 %r659, %r660, %r661, %r662;
	// end inline asm
	mov.u32 	%r666, 30258;
	// begin inline asm
	prmt.b32 %r663, %r660, %r661, %r666;
	// end inline asm
	// begin inline asm
	prmt.b32 %r667, %r668, %r669, %r662;
	// end inline asm
	// begin inline asm
	prmt.b32 %r671, %r668, %r669, %r666;
	// end inline asm
	// begin inline asm
	prmt.b32 %r675, %r676, %r677, %r662;
	// end inline asm
	// begin inline asm
	prmt.b32 %r679, %r676, %r677, %r666;
	// end inline asm
	// begin inline asm
	prmt.b32 %r683, %r684, %r685, %r662;
	// end inline asm
	// begin inline asm
	prmt.b32 %r687, %r684, %r685, %r666;
	// end inline asm
	cvt.u16.u32 	%rs48, %r693;
	mul.hi.s16 	%rs49, %rs48, 10923;
	shr.u16 	%rs50, %rs49, 15;
	shr.s16 	%rs51, %rs49, 2;
	add.s16 	%rs52, %rs51, %rs50;
	mul.lo.s16 	%rs53, %rs52, 24;
	sub.s16 	%rs54, %rs48, %rs53;
	cvt.s32.s16 	%r731, %rs54;
	add.s32 	%r732, %r178, %r731;
	mul.wide.s32 	%rd63, %r732, 4;
	add.s64 	%rd65, %rd49, %rd63;
	st.shared.u32 	[%rd65], %r659;
	add.s32 	%r733, %r732, 128;
	mul.wide.u32 	%rd66, %r733, 4;
	add.s64 	%rd67, %rd49, %rd66;
	st.shared.u32 	[%rd67], %r667;
	add.s32 	%r734, %r732, 64;
	mul.wide.u32 	%rd68, %r734, 4;
	add.s64 	%rd69, %rd49, %rd68;
	st.shared.u32 	[%rd69], %r663;
	add.s32 	%r735, %r732, 192;
	mul.wide.u32 	%rd70, %r735, 4;
	add.s64 	%rd71, %rd49, %rd70;
	st.shared.u32 	[%rd71], %r671;
	add.s32 	%r736, %r732, 32;
	mul.wide.u32 	%rd72, %r736, 4;
	add.s64 	%rd73, %rd49, %rd72;
	st.shared.u32 	[%rd73], %r675;
	add.s32 	%r737, %r732, 160;
	mul.wide.u32 	%rd74, %r737, 4;
	add.s64 	%rd75, %rd49, %rd74;
	st.shared.u32 	[%rd75], %r683;
	add.s32 	%r738, %r732, 96;
	mul.wide.u32 	%rd76, %r738, 4;
	add.s64 	%rd77, %rd49, %rd76;
	st.shared.u32 	[%rd77], %r679;
	add.s32 	%r739, %r732, 224;
	mul.wide.u32 	%rd78, %r739, 4;
	add.s64 	%rd79, %rd49, %rd78;
	st.shared.u32 	[%rd79], %r687;
	bar.sync 	0;
	add.s32 	%r740, %r200, %r179;
	cvt.u16.u32 	%rs55, %r740;
	mul.hi.s16 	%rs56, %rs55, 10923;
	shr.u16 	%rs57, %rs56, 15;
	shr.s16 	%rs58, %rs56, 2;
	add.s16 	%rs59, %rs58, %rs57;
	mul.lo.s16 	%rs60, %rs59, 24;
	sub.s16 	%rs61, %rs55, %rs60;
	cvt.s32.s16 	%r201, %rs61;
	add.s32 	%r741, %r5, %r201;
	mul.wide.s32 	%rd80, %r741, 4;
	add.s64 	%rd81, %rd49, %rd80;
	ld.shared.u32 	%r202, [%rd81];
	add.s32 	%r742, %r180, %r201;
	mul.wide.s32 	%rd82, %r742, 4;
	add.s64 	%rd83, %rd49, %rd82;
	ld.shared.u32 	%r203, [%rd83];
	add.s32 	%r743, %r181, %r201;
	mul.wide.u32 	%rd84, %r743, 4;
	add.s64 	%rd85, %rd49, %rd84;
	ld.shared.u32 	%r204, [%rd85];
	add.s32 	%r744, %r182, %r201;
	mul.wide.u32 	%rd86, %r744, 4;
	add.s64 	%rd87, %rd49, %rd86;
	ld.shared.u32 	%r205, [%rd87];
	add.s32 	%r745, %r183, %r201;
	mul.wide.u32 	%rd88, %r745, 4;
	add.s64 	%rd89, %rd49, %rd88;
	ld.shared.u32 	%r206, [%rd89];
	add.s32 	%r746, %r184, %r201;
	mul.wide.u32 	%rd90, %r746, 4;
	add.s64 	%rd91, %rd49, %rd90;
	ld.shared.u32 	%r207, [%rd91];
	add.s32 	%r747, %r185, %r201;
	mul.wide.u32 	%rd92, %r747, 4;
	add.s64 	%rd93, %rd49, %rd92;
	ld.shared.u32 	%r208, [%rd93];
	add.s32 	%r748, %r186, %r201;
	mul.wide.u32 	%rd94, %r748, 4;
	add.s64 	%rd95, %rd49, %rd94;
	ld.shared.u32 	%r209, [%rd95];
	add.s32 	%r749, %r187, %r201;
	mul.wide.u32 	%rd96, %r749, 4;
	add.s64 	%rd97, %rd49, %rd96;
	ld.shared.u32 	%r210, [%rd97];
	add.s32 	%r750, %r188, %r201;
	mul.wide.u32 	%rd98, %r750, 4;
	add.s64 	%rd99, %rd49, %rd98;
	ld.shared.u32 	%r211, [%rd99];
	add.s32 	%r751, %r189, %r201;
	mul.wide.s32 	%rd100, %r751, 4;
	add.s64 	%rd101, %rd49, %rd100;
	ld.shared.u32 	%r212, [%rd101];
	bar.sync 	0;
	shfl.sync.idx.b32	%r213, %r168, 0, 31, -1;
	shfl.sync.idx.b32	%r214, %r168, 1, 31, -1;
	shfl.sync.idx.b32	%r215, %r168, 2, 31, -1;
	shfl.sync.idx.b32	%r216, %r168, 3, 31, -1;
	shfl.sync.idx.b32	%r217, %r168, 4, 31, -1;
	shfl.sync.idx.b32	%r218, %r168, 5, 31, -1;
	shfl.sync.idx.b32	%r219, %r168, 6, 31, -1;
	shfl.sync.idx.b32	%r220, %r168, 7, 31, -1;
	shfl.sync.idx.b32	%r221, %r168, 8, 31, -1;
	shfl.sync.idx.b32	%r222, %r168, 9, 31, -1;
	shfl.sync.idx.b32	%r223, %r168, 10, 31, -1;
	shfl.sync.idx.b32	%r224, %r168, 11, 31, -1;
	shfl.sync.idx.b32	%r225, %r168, 12, 31, -1;
	shfl.sync.idx.b32	%r226, %r168, 13, 31, -1;
	shfl.sync.idx.b32	%r227, %r168, 14, 31, -1;
	shfl.sync.idx.b32	%r228, %r168, 15, 31, -1;
	setp.eq.s32 	%p259, %r213, 999999999;
	@%p259 bra 	$L__BB0_145;
// %bb.203:                             // %oksrem2312
                                        //   in Loop: Header=BB0_201 Depth=1
	add.s32 	%r752, %r213, %r201;
	mul.wide.s32 	%rd102, %r752, 4;
	add.s64 	%rd104, %rd49, %rd102;
	st.shared.u32 	[%rd104], %r202;
	setp.eq.s32 	%p260, %r214, 999999999;
	@%p260 bra 	$L__BB0_146;
// %bb.204:                             // %oksrem2380
                                        //   in Loop: Header=BB0_201 Depth=1
	add.s32 	%r753, %r214, %r201;
	mul.wide.s32 	%rd105, %r753, 4;
	add.s64 	%rd107, %rd49, %rd105;
	st.shared.u32 	[%rd107], %r203;
	setp.eq.s32 	%p261, %r215, 999999999;
	@%p261 bra 	$L__BB0_147;
// %bb.205:                             // %oksrem2448
                                        //   in Loop: Header=BB0_201 Depth=1
	add.s32 	%r754, %r215, %r201;
	mul.wide.s32 	%rd108, %r754, 4;
	add.s64 	%rd110, %rd49, %rd108;
	st.shared.u32 	[%rd110], %r204;
	setp.eq.s32 	%p262, %r216, 999999999;
	@%p262 bra 	$L__BB0_148;
// %bb.206:                             // %oksrem2516
                                        //   in Loop: Header=BB0_201 Depth=1
	add.s32 	%r755, %r216, %r201;
	mul.wide.s32 	%rd111, %r755, 4;
	add.s64 	%rd113, %rd49, %rd111;
	st.shared.u32 	[%rd113], %r205;
	setp.eq.s32 	%p263, %r217, 999999999;
	@%p263 bra 	$L__BB0_149;
// %bb.207:                             // %oksrem2584
                                        //   in Loop: Header=BB0_201 Depth=1
	add.s32 	%r756, %r217, %r201;
	mul.wide.s32 	%rd114, %r756, 4;
	add.s64 	%rd116, %rd49, %rd114;
	st.shared.u32 	[%rd116], %r206;
	setp.eq.s32 	%p264, %r218, 999999999;
	@%p264 bra 	$L__BB0_150;
// %bb.208:                             // %oksrem2652
                                        //   in Loop: Header=BB0_201 Depth=1
	add.s32 	%r757, %r218, %r201;
	mul.wide.s32 	%rd117, %r757, 4;
	add.s64 	%rd119, %rd49, %rd117;
	st.shared.u32 	[%rd119], %r207;
	setp.eq.s32 	%p265, %r219, 999999999;
	@%p265 bra 	$L__BB0_151;
// %bb.209:                             // %oksrem2720
                                        //   in Loop: Header=BB0_201 Depth=1
	add.s32 	%r758, %r219, %r201;
	mul.wide.s32 	%rd120, %r758, 4;
	add.s64 	%rd122, %rd49, %rd120;
	st.shared.u32 	[%rd122], %r208;
	setp.eq.s32 	%p266, %r220, 999999999;
	@%p266 bra 	$L__BB0_152;
// %bb.210:                             // %oksrem2788
                                        //   in Loop: Header=BB0_201 Depth=1
	add.s32 	%r759, %r220, %r201;
	mul.wide.s32 	%rd123, %r759, 4;
	add.s64 	%rd125, %rd49, %rd123;
	st.shared.u32 	[%rd125], %r209;
	setp.eq.s32 	%p267, %r221, 999999999;
	@%p267 bra 	$L__BB0_153;
// %bb.211:                             // %oksrem2856
                                        //   in Loop: Header=BB0_201 Depth=1
	add.s32 	%r760, %r221, %r201;
	mul.wide.s32 	%rd126, %r760, 4;
	add.s64 	%rd128, %rd49, %rd126;
	st.shared.u32 	[%rd128], %r210;
	setp.eq.s32 	%p268, %r222, 999999999;
	@%p268 bra 	$L__BB0_154;
// %bb.212:                             // %oksrem2924
                                        //   in Loop: Header=BB0_201 Depth=1
	add.s32 	%r761, %r222, %r201;
	mul.wide.s32 	%rd129, %r761, 4;
	add.s64 	%rd131, %rd49, %rd129;
	st.shared.u32 	[%rd131], %r211;
	setp.eq.s32 	%p269, %r223, 999999999;
	@%p269 bra 	$L__BB0_155;
// %bb.213:                             // %oksrem2993
                                        //   in Loop: Header=BB0_201 Depth=1
	setp.gt.u32 	%p270, %r4, 3;
	selp.b32 	%r762, 0, %r212, %p270;
	add.s32 	%r763, %r223, %r201;
	mul.wide.s32 	%rd132, %r763, 4;
	add.s64 	%rd134, %rd49, %rd132;
	st.shared.u32 	[%rd134], %r762;
	setp.eq.s32 	%p271, %r224, 999999999;
	@%p271 bra 	$L__BB0_156;
// %bb.214:                             // %oksrem3061
                                        //   in Loop: Header=BB0_201 Depth=1
	add.s32 	%r764, %r224, %r201;
	mul.wide.s32 	%rd135, %r764, 4;
	add.s64 	%rd137, %rd49, %rd135;
	mov.u32 	%r765, 0;
	st.shared.u32 	[%rd137], %r765;
	setp.eq.s32 	%p272, %r225, 999999999;
	@%p272 bra 	$L__BB0_157;
// %bb.215:                             // %oksrem3128
                                        //   in Loop: Header=BB0_201 Depth=1
	add.s32 	%r766, %r225, %r201;
	mul.wide.s32 	%rd138, %r766, 4;
	add.s64 	%rd140, %rd49, %rd138;
	st.shared.u32 	[%rd140], %r765;
	setp.eq.s32 	%p273, %r226, 999999999;
	@%p273 bra 	$L__BB0_158;
// %bb.216:                             // %oksrem3195
                                        //   in Loop: Header=BB0_201 Depth=1
	add.s32 	%r768, %r226, %r201;
	mul.wide.s32 	%rd141, %r768, 4;
	add.s64 	%rd143, %rd49, %rd141;
	st.shared.u32 	[%rd143], %r765;
	setp.eq.s32 	%p274, %r227, 999999999;
	@%p274 bra 	$L__BB0_159;
// %bb.217:                             // %oksrem3262
                                        //   in Loop: Header=BB0_201 Depth=1
	add.s32 	%r770, %r227, %r201;
	mul.wide.s32 	%rd144, %r770, 4;
	add.s64 	%rd146, %rd49, %rd144;
	st.shared.u32 	[%rd146], %r765;
	setp.eq.s32 	%p275, %r228, 999999999;
	@%p275 bra 	$L__BB0_160;
// %bb.218:                             // %oksrem3329
                                        //   in Loop: Header=BB0_201 Depth=1
	setp.eq.s32 	%p276, %r169, 3;
	add.s32 	%r773, %r228, %r201;
	mul.wide.s32 	%rd147, %r773, 4;
	add.s64 	%rd149, %rd49, %rd147;
	st.shared.u32 	[%rd149], %r765;
	bar.sync 	0;
	mov.u32 	%r91, %r765;
	mov.u32 	%r92, %r765;
	mov.u32 	%r93, %r765;
	mov.u32 	%r94, %r765;
	mov.u32 	%r95, %r765;
	mov.u32 	%r96, %r765;
	mov.u32 	%r97, %r765;
	mov.u32 	%r98, %r765;
	mov.u32 	%r99, %r765;
	mov.u32 	%r100, %r765;
	mov.u32 	%r101, %r765;
	mov.u32 	%r102, %r765;
	mov.u32 	%r103, %r765;
	mov.u32 	%r104, %r765;
	mov.u32 	%r105, %r765;
	mov.u32 	%r106, %r765;
	@%p276 bra 	$L__BB0_161;
// %bb.219:                             // %oksrem3430
                                        //   in Loop: Header=BB0_201 Depth=1
	add.s32 	%r774, %r200, %r190;
	ld.shared.u32 	%r91, [%rd8];
	ld.shared.u32 	%r92, [%rd9];
	ld.shared.u32 	%r93, [%rd10+12];
	ld.shared.u32 	%r94, [%rd11+12];
	ld.shared.u32 	%r95, [%rd10+24];
	ld.shared.u32 	%r96, [%rd11+24];
	ld.shared.u32 	%r97, [%rd10+36];
	ld.shared.u32 	%r98, [%rd11+36];
	add.s32 	%r775, %r774, 12;
	mul.hi.u32 	%r776, %r775, -1431655765;
	shr.u32 	%r777, %r776, 4;
	mul.lo.s32 	%r778, %r777, 24;
	sub.s32 	%r779, %r775, %r778;
	add.s32 	%r780, %r191, %r779;
	mul.wide.u32 	%rd150, %r780, 4;
	add.s64 	%rd152, %rd49, %rd150;
	ld.shared.u32 	%r99, [%rd152];
	add.s32 	%r781, %r192, %r779;
	mul.wide.u32 	%rd153, %r781, 4;
	add.s64 	%rd154, %rd49, %rd153;
	ld.shared.u32 	%r100, [%rd154];
	cvt.u16.u32 	%rs62, %r774;
	add.s16 	%rs63, %rs62, 15;
	mul.hi.s16 	%rs64, %rs63, 10923;
	shr.u16 	%rs65, %rs64, 15;
	shr.s16 	%rs66, %rs64, 2;
	add.s16 	%rs67, %rs66, %rs65;
	mul.lo.s16 	%rs68, %rs67, 24;
	sub.s16 	%rs69, %rs63, %rs68;
	cvt.s32.s16 	%r782, %rs69;
	add.s32 	%r783, %r191, %r782;
	mul.wide.s32 	%rd155, %r783, 4;
	add.s64 	%rd156, %rd49, %rd155;
	ld.shared.u32 	%r101, [%rd156];
	add.s32 	%r784, %r192, %r782;
	mul.wide.u32 	%rd157, %r784, 4;
	add.s64 	%rd158, %rd49, %rd157;
	ld.shared.u32 	%r102, [%rd158];
	add.s16 	%rs70, %rs62, 18;
	mul.hi.s16 	%rs71, %rs70, 10923;
	shr.u16 	%rs72, %rs71, 15;
	shr.s16 	%rs73, %rs71, 2;
	add.s16 	%rs74, %rs73, %rs72;
	mul.lo.s16 	%rs75, %rs74, 24;
	sub.s16 	%rs76, %rs70, %rs75;
	cvt.s32.s16 	%r785, %rs76;
	add.s32 	%r786, %r191, %r785;
	mul.wide.s32 	%rd159, %r786, 4;
	add.s64 	%rd160, %rd49, %rd159;
	ld.shared.u32 	%r103, [%rd160];
	add.s32 	%r787, %r192, %r785;
	mul.wide.u32 	%rd161, %r787, 4;
	add.s64 	%rd162, %rd49, %rd161;
	ld.shared.u32 	%r104, [%rd162];
	add.s16 	%rs77, %rs62, 21;
	mul.hi.s16 	%rs78, %rs77, 10923;
	shr.u16 	%rs79, %rs78, 15;
	shr.s16 	%rs80, %rs78, 2;
	add.s16 	%rs81, %rs80, %rs79;
	mul.lo.s16 	%rs82, %rs81, 24;
	sub.s16 	%rs83, %rs77, %rs82;
	cvt.s32.s16 	%r788, %rs83;
	add.s32 	%r789, %r191, %r788;
	mul.wide.s32 	%rd163, %r789, 4;
	add.s64 	%rd164, %rd49, %rd163;
	ld.shared.u32 	%r105, [%rd164];
	add.s32 	%r790, %r192, %r788;
	mul.wide.u32 	%rd165, %r790, 4;
	add.s64 	%rd166, %rd49, %rd165;
	ld.shared.u32 	%r106, [%rd166];
$L__BB0_161:                            // %L10631
                                        //   in Loop: Header=BB0_201 Depth=1
	bar.sync 	0;
	mov.u16 	%rs3, %rs2;
	mov.u32 	%r110, %r765;
	bra.uni 	$L__BB0_162;
$L__BB0_164:                            // %L17520
                                        //   in Loop: Header=BB0_162 Depth=2
	bar.sync 	0;
	add.s32 	%r110, %r110, 6;
	add.s16 	%rs3, %rs3, 6;
	setp.ne.s32 	%p294, %r110, 24;
	@%p294 bra 	$L__BB0_162;
	bra.uni 	$L__BB0_165;
$L__BB0_162:                            // %L10649
                                        //   Parent Loop BB0_201 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p277, %r110, 0;
	selp.b32 	%r1184, %r91, 0, %p277;
	setp.eq.s32 	%p278, %r110, 6;
	selp.b32 	%r1185, %r95, %r1184, %p278;
	setp.eq.s32 	%p279, %r110, 12;
	selp.b32 	%r1186, %r99, %r1185, %p279;
	setp.eq.s32 	%p280, %r110, 18;
	selp.b32 	%r1187, %r103, %r1186, %p280;
	selp.b32 	%r1188, %r92, 0, %p277;
	selp.b32 	%r1189, %r96, %r1188, %p278;
	selp.b32 	%r1190, %r100, %r1189, %p279;
	selp.b32 	%r1191, %r104, %r1190, %p280;
	selp.b32 	%r1192, %r93, 0, %p277;
	selp.b32 	%r1193, %r97, %r1192, %p278;
	selp.b32 	%r1194, %r101, %r1193, %p279;
	selp.b32 	%r1195, %r105, %r1194, %p280;
	selp.b32 	%r1196, %r94, 0, %p277;
	selp.b32 	%r1197, %r98, %r1196, %p278;
	selp.b32 	%r1198, %r102, %r1197, %p279;
	selp.b32 	%r1199, %r106, %r1198, %p280;
	mov.u16 	%rs121, 25600;
	// begin inline asm
	mov.b32 %r797, {%rs121, %rs121};
	// end inline asm
	mov.u16 	%rs123, 21504;
	// begin inline asm
	mov.b32 %r808, {%rs123, %rs123};
	// end inline asm
	xor.b32  	%r796, %r1187, -2004318072;
	mov.u32 	%r933, 983055;
	// begin inline asm
	lop3.b32 %r794, %r933, %r796, %r797, 202;
	// end inline asm
	mov.u16 	%rs127, 18432;
	// begin inline asm
	mov.b32 %r798, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r799, %r797, %r798;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r802, %r794, %r799;
	// end inline asm
	mov.u32 	%r944, 15728880;
	// begin inline asm
	lop3.b32 %r805, %r944, %r796, %r808, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r809, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r810, %r808, %r809;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r813, %r805, %r810;
	// end inline asm
	// begin inline asm
	mov.b32 %r843, {%rs121, %rs121};
	// end inline asm
	// begin inline asm
	mov.b32 %r854, {%rs123, %rs123};
	// end inline asm
	xor.b32  	%r842, %r1191, -2004318072;
	// begin inline asm
	lop3.b32 %r840, %r933, %r842, %r843, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r844, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r845, %r843, %r844;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r848, %r840, %r845;
	// end inline asm
	// begin inline asm
	lop3.b32 %r851, %r944, %r842, %r854, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r855, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r856, %r854, %r855;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r859, %r851, %r856;
	// end inline asm
	// begin inline asm
	mov.b32 %r889, {%rs121, %rs121};
	// end inline asm
	// begin inline asm
	mov.b32 %r900, {%rs123, %rs123};
	// end inline asm
	xor.b32  	%r888, %r1195, -2004318072;
	// begin inline asm
	lop3.b32 %r886, %r933, %r888, %r889, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r890, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r891, %r889, %r890;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r894, %r886, %r891;
	// end inline asm
	// begin inline asm
	lop3.b32 %r897, %r944, %r888, %r900, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r901, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r902, %r900, %r901;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r905, %r897, %r902;
	// end inline asm
	// begin inline asm
	mov.b32 %r935, {%rs121, %rs121};
	// end inline asm
	// begin inline asm
	mov.b32 %r946, {%rs123, %rs123};
	// end inline asm
	xor.b32  	%r934, %r1199, -2004318072;
	// begin inline asm
	lop3.b32 %r932, %r933, %r934, %r935, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r936, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r937, %r935, %r936;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r940, %r932, %r937;
	// end inline asm
	// begin inline asm
	lop3.b32 %r943, %r944, %r934, %r946, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r947, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r948, %r946, %r947;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r951, %r943, %r948;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r170;
    mov.b32 {%r2re, %r2im}, %r802;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r976, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r848;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r979, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r813;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r982, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r859;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r985, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r170;
    mov.b32 {%r2re, %r2im}, %r894;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r988, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r940;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r991, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r905;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r994, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r951;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r997, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1000, %r1001}, {%r311, %r314}, {%r976}, {%r765, %r765};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1007, %r1008}, {%r311, %r314}, {%r979}, {%r765, %r765};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1014, %r1015}, {%r311, %r314}, {%r982}, {%r765, %r765};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1021, %r1022}, {%r311, %r314}, {%r985}, {%r765, %r765};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1028, %r1029}, {%r311, %r314}, {%r988}, {%r765, %r765};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1035, %r1036}, {%r311, %r314}, {%r991}, {%r765, %r765};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1042, %r1043}, {%r311, %r314}, {%r994}, {%r765, %r765};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1049, %r1050}, {%r311, %r314}, {%r997}, {%r765, %r765};
	// end inline asm
	@%p1 bra 	$L__BB0_220;
	bra.uni 	$L__BB0_163;
$L__BB0_220:                            // %pass4747
                                        //   in Loop: Header=BB0_162 Depth=2
	// begin inline asm
	neg.f16x2 %r1056, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1058, %r1056, %r1001;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1061, %r363, %r1000, %r1058;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1065, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1067, %r1065, %r1008;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1070, %r363, %r1007, %r1067;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1074, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1076, %r1074, %r1015;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1079, %r363, %r1014, %r1076;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1083, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1085, %r1083, %r1022;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1088, %r363, %r1021, %r1085;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1092, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1094, %r1092, %r1029;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1097, %r363, %r1028, %r1094;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1101, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1103, %r1101, %r1036;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1106, %r363, %r1035, %r1103;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1110, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1112, %r1110, %r1043;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1115, %r363, %r1042, %r1112;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1119, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1121, %r1119, %r1050;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1124, %r363, %r1049, %r1121;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1128, %r366, %r1000;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1131, %r363, %r1001, %r1128;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1135, %r366, %r1007;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1138, %r363, %r1008, %r1135;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1142, %r366, %r1014;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1145, %r363, %r1015, %r1142;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1149, %r366, %r1021;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1152, %r363, %r1022, %r1149;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1156, %r366, %r1028;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1159, %r363, %r1029, %r1156;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1163, %r366, %r1035;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1166, %r363, %r1036, %r1163;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1170, %r366, %r1042;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1173, %r363, %r1043, %r1170;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1177, %r366, %r1049;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1180, %r363, %r1050, %r1177;
	// end inline asm
	mov.u32 	%r1349, 0;
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1200, %r1201}, {%r407, %r410}, {%r1061, %r1131}, {%r1349, %r1349}, %r197, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1209, %r1210}, {%r407, %r410}, {%r1070, %r1138}, {%r1349, %r1349}, %r197, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1218, %r1219}, {%r407, %r410}, {%r1079, %r1145}, {%r1349, %r1349}, %r197, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1227, %r1228}, {%r407, %r410}, {%r1088, %r1152}, {%r1349, %r1349}, %r197, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1236, %r1237}, {%r407, %r410}, {%r1097, %r1159}, {%r1349, %r1349}, %r197, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1245, %r1246}, {%r407, %r410}, {%r1106, %r1166}, {%r1349, %r1349}, %r197, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1254, %r1255}, {%r407, %r410}, {%r1115, %r1173}, {%r1349, %r1349}, %r197, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1263, %r1264}, {%r407, %r410}, {%r1124, %r1180}, {%r1349, %r1349}, %r197, 0;
	// end inline asm
	bar.sync 	0;
	mul.hi.s16 	%rs132, %rs3, 10923;
	shr.u16 	%rs133, %rs132, 15;
	add.s16 	%rs134, %rs132, %rs133;
	mul.lo.s16 	%rs135, %rs134, 6;
	sub.s16 	%rs136, %rs3, %rs135;
	mul.wide.s16 	%r1382, %rs136, 16;
	add.s32 	%r1383, %r193, %r1382;
	mul.wide.s32 	%rd169, %r1383, 4;
	add.s64 	%rd171, %rd49, %rd169;
	ld.shared.u32 	%r1340, [%rd171];
	add.s32 	%r1384, %r194, %r1382;
	mul.wide.s32 	%rd172, %r1384, 4;
	add.s64 	%rd173, %rd49, %rd172;
	ld.shared.u32 	%r1347, [%rd173];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1336, %r1337}, {%r419, %r422}, {%r1340}, {%r1349, %r1349};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1343, %r1344}, {%r419, %r422}, {%r1347}, {%r1349, %r1349};
	// end inline asm
	@%p281 bra 	$L__BB0_222;
	bra.uni 	$L__BB0_221;
$L__BB0_222:                            // %pass5243
                                        //   in Loop: Header=BB0_162 Depth=2
	// begin inline asm
	neg.f16x2 %r1350, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1352, %r1350, %r1337;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1355, %r457, %r1336, %r1352;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1359, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1361, %r1359, %r1344;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1364, %r457, %r1343, %r1361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1368, %r460, %r1336;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1371, %r457, %r1337, %r1368;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1375, %r460, %r1343;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1378, %r457, %r1344, %r1375;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1404, %r1407}, {%r503, %r506}, {%r1355, %r1371}, {%r1349, %r1349}, %r249, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1411, %r1415}, {%r503, %r506}, {%r1364, %r1378}, {%r1349, %r1349}, %r249, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1403, %r1404, %r1404;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1406, %r1407, %r1407, %r1403;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1410, %r1411, %r1411, %r1406;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1414, %r1415, %r1415, %r1410;
	// end inline asm
	mov.u32 	%r1502, 268439552;
	// begin inline asm
	fma.rn.f16x2 %r1418, %r1502, %r1414, %r109;
	// end inline asm
	add.s32 	%r250, %r87, %r110;
	add.s32 	%r1505, %r250, 1;
	mul.hi.u32 	%r1506, %r1505, -1431655765;
	shr.u32 	%r1507, %r1506, 2;
	mul.lo.s32 	%r1508, %r1507, 6;
	sub.s32 	%r1509, %r1505, %r1508;
	shl.b32 	%r1510, %r1509, 4;
	add.s32 	%r1511, %r193, %r1510;
	mul.wide.u32 	%rd176, %r1511, 4;
	add.s64 	%rd178, %rd49, %rd176;
	ld.shared.u32 	%r1426, [%rd178];
	add.s32 	%r1512, %r194, %r1510;
	mul.wide.u32 	%rd179, %r1512, 4;
	add.s64 	%rd180, %rd49, %rd179;
	ld.shared.u32 	%r1433, [%rd180];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1443, %r1440}, {%r419, %r422}, {%r1426}, {%r1349, %r1349};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1452, %r1449}, {%r419, %r422}, {%r1433}, {%r1349, %r1349};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1436, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1438, %r1436, %r1440;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1441, %r457, %r1443, %r1438;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1445, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1447, %r1445, %r1449;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1450, %r457, %r1452, %r1447;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1454, %r460, %r1443;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1457, %r457, %r1440, %r1454;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1461, %r460, %r1452;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1464, %r457, %r1449, %r1461;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1487, %r1490}, {%r503, %r506}, {%r1441, %r1457}, {%r1349, %r1349}, %r249, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1494, %r1498}, {%r503, %r506}, {%r1450, %r1464}, {%r1349, %r1349}, %r249, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1486, %r1487, %r1487;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1489, %r1490, %r1490, %r1486;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1493, %r1494, %r1494, %r1489;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1497, %r1498, %r1498, %r1493;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3042, %r1502, %r1497, %r1418;
	// end inline asm
	add.s32 	%r3040, %r107, 2;
	setp.ne.s32 	%p282, %r3040, 256;
	@%p282 bra 	$L__BB0_224;
// %bb.223:                             // %pass5701
                                        //   in Loop: Header=BB0_162 Depth=2
	mul.lo.s32 	%r1514, %r108, 786432;
	or.b32  	%r1515, %r1514, %r195;
	add.s32 	%r1516, %r1515, %r196;
	cvt.u64.u32 	%rd181, %r1516;
	add.s64 	%rd182, %rd181, %rd7;
	mul.hi.s64 	%rd183, %rd182, 3074457345618258603;
	shr.u64 	%rd184, %rd183, 63;
	shr.s64 	%rd185, %rd183, 26;
	add.s64 	%rd186, %rd185, %rd184;
	setp.lt.s64 	%p283, %rd182, 0;
	mul.lo.s64 	%rd187, %rd186, 402653184;
	setp.ne.s64 	%p284, %rd187, %rd182;
	and.pred  	%p285, %p283, %p284;
	selp.s64 	%rd188, -1, 0, %p285;
	add.s64 	%rd189, %rd186, %rd188;
	mul.lo.s64 	%rd190, %rd189, -402653184;
	add.s64 	%rd191, %rd190, %rd182;
	shl.b64 	%rd192, %rd191, 2;
	add.s64 	%rd193, %rd4, %rd192;
	st.global.u32 	[%rd193], %r3042;
	add.s32 	%r108, %r108, 1;
	mov.u32 	%r3040, 0;
	mov.u32 	%r3042, %r3040;
$L__BB0_224:                            // %oksrem5809
                                        //   in Loop: Header=BB0_162 Depth=2
	add.s32 	%r1683, %r250, 2;
	mul.hi.u32 	%r1684, %r1683, -1431655765;
	shr.u32 	%r1685, %r1684, 2;
	mul.lo.s32 	%r1686, %r1685, 6;
	sub.s32 	%r1687, %r1683, %r1686;
	shl.b32 	%r1688, %r1687, 4;
	add.s32 	%r1689, %r193, %r1688;
	mul.wide.u32 	%rd194, %r1689, 4;
	add.s64 	%rd196, %rd49, %rd194;
	ld.shared.u32 	%r1521, [%rd196];
	add.s32 	%r1690, %r194, %r1688;
	mul.wide.u32 	%rd197, %r1690, 4;
	add.s64 	%rd198, %rd49, %rd197;
	ld.shared.u32 	%r1528, [%rd198];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1538, %r1535}, {%r419, %r422}, {%r1521}, {%r1349, %r1349};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1547, %r1544}, {%r419, %r422}, {%r1528}, {%r1349, %r1349};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1531, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1533, %r1531, %r1535;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1536, %r457, %r1538, %r1533;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1540, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1542, %r1540, %r1544;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1545, %r457, %r1547, %r1542;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1549, %r460, %r1538;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1552, %r457, %r1535, %r1549;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1556, %r460, %r1547;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1559, %r457, %r1544, %r1556;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1582, %r1585}, {%r503, %r506}, {%r1536, %r1552}, {%r1349, %r1349}, %r249, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1589, %r1593}, {%r503, %r506}, {%r1545, %r1559}, {%r1349, %r1349}, %r249, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1581, %r1582, %r1582;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1584, %r1585, %r1585, %r1581;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1588, %r1589, %r1589, %r1584;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1592, %r1593, %r1593, %r1588;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1596, %r1502, %r1592, %r3042;
	// end inline asm
	add.s32 	%r1691, %r250, 3;
	mul.hi.u32 	%r1692, %r1691, -1431655765;
	shr.u32 	%r1693, %r1692, 2;
	mul.lo.s32 	%r1694, %r1693, 6;
	sub.s32 	%r1695, %r1691, %r1694;
	shl.b32 	%r1696, %r1695, 4;
	add.s32 	%r1697, %r193, %r1696;
	mul.wide.u32 	%rd199, %r1697, 4;
	add.s64 	%rd200, %rd49, %rd199;
	ld.shared.u32 	%r1604, [%rd200];
	add.s32 	%r1698, %r194, %r1696;
	mul.wide.u32 	%rd201, %r1698, 4;
	add.s64 	%rd202, %rd49, %rd201;
	ld.shared.u32 	%r1611, [%rd202];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1621, %r1618}, {%r419, %r422}, {%r1604}, {%r1349, %r1349};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1630, %r1627}, {%r419, %r422}, {%r1611}, {%r1349, %r1349};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1614, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1616, %r1614, %r1618;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1619, %r457, %r1621, %r1616;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1623, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1625, %r1623, %r1627;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1628, %r457, %r1630, %r1625;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1632, %r460, %r1621;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1635, %r457, %r1618, %r1632;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1639, %r460, %r1630;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1642, %r457, %r1627, %r1639;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1665, %r1668}, {%r503, %r506}, {%r1619, %r1635}, {%r1349, %r1349}, %r249, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1672, %r1676}, {%r503, %r506}, {%r1628, %r1642}, {%r1349, %r1349}, %r249, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1664, %r1665, %r1665;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1667, %r1668, %r1668, %r1664;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1671, %r1672, %r1672, %r1667;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1675, %r1676, %r1676, %r1671;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3045, %r1502, %r1675, %r1596;
	// end inline asm
	add.s32 	%r3043, %r3040, 2;
	setp.ne.s32 	%p286, %r3043, 256;
	@%p286 bra 	$L__BB0_226;
// %bb.225:                             // %pass6581
                                        //   in Loop: Header=BB0_162 Depth=2
	mul.lo.s32 	%r1700, %r108, 786432;
	or.b32  	%r1701, %r1700, %r195;
	add.s32 	%r1702, %r1701, %r196;
	cvt.u64.u32 	%rd203, %r1702;
	add.s64 	%rd204, %rd203, %rd7;
	mul.hi.s64 	%rd205, %rd204, 3074457345618258603;
	shr.u64 	%rd206, %rd205, 63;
	shr.s64 	%rd207, %rd205, 26;
	add.s64 	%rd208, %rd207, %rd206;
	setp.lt.s64 	%p287, %rd204, 0;
	mul.lo.s64 	%rd209, %rd208, 402653184;
	setp.ne.s64 	%p288, %rd209, %rd204;
	and.pred  	%p289, %p287, %p288;
	selp.s64 	%rd210, -1, 0, %p289;
	add.s64 	%rd211, %rd208, %rd210;
	mul.lo.s64 	%rd212, %rd211, -402653184;
	add.s64 	%rd213, %rd212, %rd204;
	shl.b64 	%rd214, %rd213, 2;
	add.s64 	%rd215, %rd4, %rd214;
	st.global.u32 	[%rd215], %r3045;
	add.s32 	%r108, %r108, 1;
	mov.u32 	%r3043, 0;
	mov.u32 	%r3045, %r3043;
$L__BB0_226:                            // %oksrem6689
                                        //   in Loop: Header=BB0_162 Depth=2
	add.s32 	%r1869, %r250, 4;
	mul.hi.u32 	%r1870, %r1869, -1431655765;
	shr.u32 	%r1871, %r1870, 2;
	mul.lo.s32 	%r1872, %r1871, 6;
	sub.s32 	%r1873, %r1869, %r1872;
	shl.b32 	%r1874, %r1873, 4;
	add.s32 	%r1875, %r193, %r1874;
	mul.wide.u32 	%rd216, %r1875, 4;
	add.s64 	%rd218, %rd49, %rd216;
	ld.shared.u32 	%r1707, [%rd218];
	add.s32 	%r1876, %r194, %r1874;
	mul.wide.u32 	%rd219, %r1876, 4;
	add.s64 	%rd220, %rd49, %rd219;
	ld.shared.u32 	%r1714, [%rd220];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1724, %r1721}, {%r419, %r422}, {%r1707}, {%r1349, %r1349};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1733, %r1730}, {%r419, %r422}, {%r1714}, {%r1349, %r1349};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1717, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1719, %r1717, %r1721;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1722, %r457, %r1724, %r1719;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1726, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1728, %r1726, %r1730;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1731, %r457, %r1733, %r1728;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1735, %r460, %r1724;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1738, %r457, %r1721, %r1735;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1742, %r460, %r1733;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1745, %r457, %r1730, %r1742;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1768, %r1771}, {%r503, %r506}, {%r1722, %r1738}, {%r1349, %r1349}, %r249, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1775, %r1779}, {%r503, %r506}, {%r1731, %r1745}, {%r1349, %r1349}, %r249, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1767, %r1768, %r1768;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1770, %r1771, %r1771, %r1767;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1774, %r1775, %r1775, %r1770;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1778, %r1779, %r1779, %r1774;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1782, %r1502, %r1778, %r3045;
	// end inline asm
	add.s32 	%r1877, %r250, 5;
	mul.hi.u32 	%r1878, %r1877, -1431655765;
	shr.u32 	%r1879, %r1878, 2;
	mul.lo.s32 	%r1880, %r1879, 6;
	sub.s32 	%r1881, %r1877, %r1880;
	shl.b32 	%r1882, %r1881, 4;
	add.s32 	%r1883, %r193, %r1882;
	mul.wide.u32 	%rd221, %r1883, 4;
	add.s64 	%rd222, %rd49, %rd221;
	ld.shared.u32 	%r1790, [%rd222];
	add.s32 	%r1884, %r194, %r1882;
	mul.wide.u32 	%rd223, %r1884, 4;
	add.s64 	%rd224, %rd49, %rd223;
	ld.shared.u32 	%r1797, [%rd224];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1807, %r1804}, {%r419, %r422}, {%r1790}, {%r1349, %r1349};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1816, %r1813}, {%r419, %r422}, {%r1797}, {%r1349, %r1349};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1800, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1802, %r1800, %r1804;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1805, %r457, %r1807, %r1802;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1809, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1811, %r1809, %r1813;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1814, %r457, %r1816, %r1811;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1818, %r460, %r1807;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1821, %r457, %r1804, %r1818;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1825, %r460, %r1816;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1828, %r457, %r1813, %r1825;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1851, %r1854}, {%r503, %r506}, {%r1805, %r1821}, {%r1349, %r1349}, %r249, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1858, %r1862}, {%r503, %r506}, {%r1814, %r1828}, {%r1349, %r1349}, %r249, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1850, %r1851, %r1851;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1853, %r1854, %r1854, %r1850;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1857, %r1858, %r1858, %r1853;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1861, %r1862, %r1862, %r1857;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r109, %r1502, %r1861, %r1782;
	// end inline asm
	add.s32 	%r107, %r3043, 2;
	setp.ne.s32 	%p290, %r107, 256;
	@%p290 bra 	$L__BB0_164;
// %bb.227:                             // %pass7461
                                        //   in Loop: Header=BB0_162 Depth=2
	mul.lo.s32 	%r1886, %r108, 786432;
	or.b32  	%r1887, %r1886, %r195;
	add.s32 	%r1888, %r1887, %r196;
	cvt.u64.u32 	%rd225, %r1888;
	add.s64 	%rd226, %rd225, %rd7;
	mul.hi.s64 	%rd227, %rd226, 3074457345618258603;
	shr.u64 	%rd228, %rd227, 63;
	shr.s64 	%rd229, %rd227, 26;
	add.s64 	%rd230, %rd229, %rd228;
	setp.lt.s64 	%p291, %rd226, 0;
	mul.lo.s64 	%rd231, %rd230, 402653184;
	setp.ne.s64 	%p292, %rd231, %rd226;
	and.pred  	%p293, %p291, %p292;
	selp.s64 	%rd232, -1, 0, %p293;
	add.s64 	%rd233, %rd230, %rd232;
	mul.lo.s64 	%rd234, %rd233, -402653184;
	add.s64 	%rd235, %rd234, %rd226;
	shl.b64 	%rd236, %rd235, 2;
	add.s64 	%rd237, %rd4, %rd236;
	st.global.u32 	[%rd237], %r109;
	add.s32 	%r108, %r108, 1;
	mov.u32 	%r107, 0;
	mov.u32 	%r109, %r107;
	bra.uni 	$L__BB0_164;
$L__BB0_165:                            // %L17541.preheader
                                        //   in Loop: Header=BB0_201 Depth=1
	mov.u16 	%rs223, %rs1;
	mov.u32 	%r3031, %r1349;
	bra.uni 	$L__BB0_166;
$L__BB0_171:                            // %L24412
                                        //   in Loop: Header=BB0_166 Depth=2
	bar.sync 	0;
	add.s32 	%r3031, %r3031, 6;
	add.s16 	%rs223, %rs223, 6;
	setp.ne.s32 	%p311, %r3031, 24;
	@%p311 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_172;
$L__BB0_166:                            // %L17541
                                        //   Parent Loop BB0_201 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p295, %r3031, 0;
	selp.b32 	%r2584, %r91, 0, %p295;
	setp.eq.s32 	%p296, %r3031, 6;
	selp.b32 	%r2585, %r95, %r2584, %p296;
	setp.eq.s32 	%p297, %r3031, 12;
	selp.b32 	%r2586, %r99, %r2585, %p297;
	setp.eq.s32 	%p298, %r3031, 18;
	selp.b32 	%r2587, %r103, %r2586, %p298;
	selp.b32 	%r2588, %r92, 0, %p295;
	selp.b32 	%r2589, %r96, %r2588, %p296;
	selp.b32 	%r2590, %r100, %r2589, %p297;
	selp.b32 	%r2591, %r104, %r2590, %p298;
	selp.b32 	%r2592, %r93, 0, %p295;
	selp.b32 	%r2593, %r97, %r2592, %p296;
	selp.b32 	%r2594, %r101, %r2593, %p297;
	selp.b32 	%r2595, %r105, %r2594, %p298;
	selp.b32 	%r2596, %r94, 0, %p295;
	selp.b32 	%r2597, %r98, %r2596, %p296;
	selp.b32 	%r2598, %r102, %r2597, %p297;
	selp.b32 	%r2599, %r106, %r2598, %p298;
	// begin inline asm
	mov.b32 %r1917, {%rs121, %rs121};
	// end inline asm
	// begin inline asm
	mov.b32 %r1928, {%rs123, %rs123};
	// end inline asm
	shr.u32 	%r2600, %r2587, 8;
	xor.b32  	%r1927, %r2600, 8947848;
	// begin inline asm
	lop3.b32 %r1914, %r933, %r1927, %r1917, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1918, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1919, %r1917, %r1918;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1922, %r1914, %r1919;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1925, %r944, %r1927, %r1928, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1929, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1930, %r1928, %r1929;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1933, %r1925, %r1930;
	// end inline asm
	// begin inline asm
	mov.b32 %r1963, {%rs121, %rs121};
	// end inline asm
	// begin inline asm
	mov.b32 %r1974, {%rs123, %rs123};
	// end inline asm
	shr.u32 	%r2601, %r2591, 8;
	xor.b32  	%r1973, %r2601, 8947848;
	// begin inline asm
	lop3.b32 %r1960, %r933, %r1973, %r1963, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1964, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1965, %r1963, %r1964;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1968, %r1960, %r1965;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1971, %r944, %r1973, %r1974, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1975, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1976, %r1974, %r1975;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1979, %r1971, %r1976;
	// end inline asm
	// begin inline asm
	mov.b32 %r2009, {%rs121, %rs121};
	// end inline asm
	// begin inline asm
	mov.b32 %r2020, {%rs123, %rs123};
	// end inline asm
	shr.u32 	%r2602, %r2595, 8;
	xor.b32  	%r2019, %r2602, 8947848;
	// begin inline asm
	lop3.b32 %r2006, %r933, %r2019, %r2009, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2010, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2011, %r2009, %r2010;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2014, %r2006, %r2011;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2017, %r944, %r2019, %r2020, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2021, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2022, %r2020, %r2021;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2025, %r2017, %r2022;
	// end inline asm
	// begin inline asm
	mov.b32 %r2055, {%rs121, %rs121};
	// end inline asm
	// begin inline asm
	mov.b32 %r2066, {%rs123, %rs123};
	// end inline asm
	shr.u32 	%r2603, %r2599, 8;
	xor.b32  	%r2065, %r2603, 8947848;
	// begin inline asm
	lop3.b32 %r2052, %r933, %r2065, %r2055, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2056, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2057, %r2055, %r2056;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2060, %r2052, %r2057;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2063, %r944, %r2065, %r2066, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2067, {%rs127, %rs127};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2068, %r2066, %r2067;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2071, %r2063, %r2068;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r170;
    mov.b32 {%r2re, %r2im}, %r1922;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2074, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r1968;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2077, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r1933;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2080, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r1979;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2083, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r170;
    mov.b32 {%r2re, %r2im}, %r2014;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2086, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r2060;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2089, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2025;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2092, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r2071;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2095, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2161, %r2158}, {%r311, %r314}, {%r2074}, {%r1349, %r1349};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2170, %r2167}, {%r311, %r314}, {%r2077}, {%r1349, %r1349};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2179, %r2176}, {%r311, %r314}, {%r2080}, {%r1349, %r1349};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2188, %r2185}, {%r311, %r314}, {%r2083}, {%r1349, %r1349};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2197, %r2194}, {%r311, %r314}, {%r2086}, {%r1349, %r1349};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2206, %r2203}, {%r311, %r314}, {%r2089}, {%r1349, %r1349};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2215, %r2212}, {%r311, %r314}, {%r2092}, {%r1349, %r1349};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2224, %r2221}, {%r311, %r314}, {%r2095}, {%r1349, %r1349};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2154, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2156, %r2154, %r2158;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2159, %r363, %r2161, %r2156;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2163, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2165, %r2163, %r2167;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2168, %r363, %r2170, %r2165;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2172, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2174, %r2172, %r2176;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2177, %r363, %r2179, %r2174;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2181, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2183, %r2181, %r2185;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2186, %r363, %r2188, %r2183;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2190, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2192, %r2190, %r2194;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2195, %r363, %r2197, %r2192;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2199, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2201, %r2199, %r2203;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2204, %r363, %r2206, %r2201;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2208, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2210, %r2208, %r2212;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2213, %r363, %r2215, %r2210;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2217, %r366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2219, %r2217, %r2221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2222, %r363, %r2224, %r2219;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2226, %r366, %r2161;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2229, %r363, %r2158, %r2226;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2233, %r366, %r2170;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2236, %r363, %r2167, %r2233;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2240, %r366, %r2179;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2243, %r363, %r2176, %r2240;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2247, %r366, %r2188;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2250, %r363, %r2185, %r2247;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2254, %r366, %r2197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2257, %r363, %r2194, %r2254;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2261, %r366, %r2206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2264, %r363, %r2203, %r2261;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2268, %r366, %r2215;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2271, %r363, %r2212, %r2268;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2275, %r366, %r2224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2278, %r363, %r2221, %r2275;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2282, %r2283}, {%r407, %r410}, {%r2159, %r2229}, {%r1349, %r1349}, %r197, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2291, %r2292}, {%r407, %r410}, {%r2168, %r2236}, {%r1349, %r1349}, %r197, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2300, %r2301}, {%r407, %r410}, {%r2177, %r2243}, {%r1349, %r1349}, %r197, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2309, %r2310}, {%r407, %r410}, {%r2186, %r2250}, {%r1349, %r1349}, %r197, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2318, %r2319}, {%r407, %r410}, {%r2195, %r2257}, {%r1349, %r1349}, %r197, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2327, %r2328}, {%r407, %r410}, {%r2204, %r2264}, {%r1349, %r1349}, %r197, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2336, %r2337}, {%r407, %r410}, {%r2213, %r2271}, {%r1349, %r1349}, %r197, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2345, %r2346}, {%r407, %r410}, {%r2222, %r2278}, {%r1349, %r1349}, %r197, 0;
	// end inline asm
	bar.sync 	0;
	add.s16 	%rs185, %rs223, -5;
	mul.hi.s16 	%rs186, %rs185, 10923;
	shr.u16 	%rs187, %rs186, 15;
	add.s16 	%rs188, %rs186, %rs187;
	mul.lo.s16 	%rs189, %rs188, 6;
	sub.s16 	%rs190, %rs185, %rs189;
	mul.wide.s16 	%r2604, %rs190, 16;
	add.s32 	%r2605, %r193, %r2604;
	mul.wide.s32 	%rd238, %r2605, 4;
	add.s64 	%rd240, %rd49, %rd238;
	ld.shared.u32 	%r2422, [%rd240];
	add.s32 	%r2606, %r194, %r2604;
	mul.wide.s32 	%rd241, %r2606, 4;
	add.s64 	%rd242, %rd49, %rd241;
	ld.shared.u32 	%r2429, [%rd242];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2439, %r2436}, {%r419, %r422}, {%r2422}, {%r1349, %r1349};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2448, %r2445}, {%r419, %r422}, {%r2429}, {%r1349, %r1349};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2432, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2434, %r2432, %r2436;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2437, %r457, %r2439, %r2434;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2441, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2443, %r2441, %r2445;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2446, %r457, %r2448, %r2443;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2450, %r460, %r2439;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2453, %r457, %r2436, %r2450;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2457, %r460, %r2448;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2460, %r457, %r2445, %r2457;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2483, %r2486}, {%r503, %r506}, {%r2437, %r2453}, {%r1349, %r1349}, %r249, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2490, %r2494}, {%r503, %r506}, {%r2446, %r2460}, {%r1349, %r1349}, %r249, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2482, %r2483, %r2483;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2485, %r2486, %r2486, %r2482;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2489, %r2490, %r2490, %r2485;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2493, %r2494, %r2494, %r2489;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2497, %r1502, %r2493, %r109;
	// end inline asm
	add.s16 	%rs191, %rs223, -4;
	mul.hi.s16 	%rs192, %rs191, 10923;
	shr.u16 	%rs193, %rs192, 15;
	add.s16 	%rs194, %rs192, %rs193;
	mul.lo.s16 	%rs195, %rs194, 6;
	sub.s16 	%rs196, %rs191, %rs195;
	mul.wide.s16 	%r2607, %rs196, 16;
	add.s32 	%r2608, %r193, %r2607;
	mul.wide.s32 	%rd243, %r2608, 4;
	add.s64 	%rd244, %rd49, %rd243;
	ld.shared.u32 	%r2505, [%rd244];
	add.s32 	%r2609, %r194, %r2607;
	mul.wide.s32 	%rd245, %r2609, 4;
	add.s64 	%rd246, %rd49, %rd245;
	ld.shared.u32 	%r2512, [%rd246];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2522, %r2519}, {%r419, %r422}, {%r2505}, {%r1349, %r1349};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2531, %r2528}, {%r419, %r422}, {%r2512}, {%r1349, %r1349};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2515, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2517, %r2515, %r2519;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2520, %r457, %r2522, %r2517;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2524, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2526, %r2524, %r2528;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2529, %r457, %r2531, %r2526;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2533, %r460, %r2522;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2536, %r457, %r2519, %r2533;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2540, %r460, %r2531;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2543, %r457, %r2528, %r2540;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2566, %r2569}, {%r503, %r506}, {%r2520, %r2536}, {%r1349, %r1349}, %r249, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2573, %r2577}, {%r503, %r506}, {%r2529, %r2543}, {%r1349, %r1349}, %r249, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2565, %r2566, %r2566;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2568, %r2569, %r2569, %r2565;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2572, %r2573, %r2573, %r2568;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2576, %r2577, %r2577, %r2572;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3048, %r1502, %r2576, %r2497;
	// end inline asm
	add.s32 	%r3046, %r107, 2;
	setp.eq.s32 	%p299, %r3046, 256;
	@%p299 bra 	$L__BB0_167;
	bra.uni 	$L__BB0_168;
$L__BB0_167:                            // %pass8526
                                        //   in Loop: Header=BB0_166 Depth=2
	mul.lo.s32 	%r2611, %r108, 786432;
	or.b32  	%r2612, %r2611, %r195;
	add.s32 	%r2613, %r2612, %r196;
	cvt.u64.u32 	%rd247, %r2613;
	add.s64 	%rd248, %rd247, %rd7;
	mul.hi.s64 	%rd249, %rd248, 3074457345618258603;
	shr.u64 	%rd250, %rd249, 63;
	shr.s64 	%rd251, %rd249, 26;
	add.s64 	%rd252, %rd251, %rd250;
	setp.lt.s64 	%p300, %rd248, 0;
	mul.lo.s64 	%rd253, %rd252, 402653184;
	setp.ne.s64 	%p301, %rd253, %rd248;
	and.pred  	%p302, %p300, %p301;
	selp.s64 	%rd254, -1, 0, %p302;
	add.s64 	%rd255, %rd252, %rd254;
	mul.lo.s64 	%rd256, %rd255, -402653184;
	add.s64 	%rd257, %rd256, %rd248;
	shl.b64 	%rd258, %rd257, 2;
	add.s64 	%rd259, %rd4, %rd258;
	st.global.u32 	[%rd259], %r3048;
	add.s32 	%r108, %r108, 1;
	mov.u32 	%r3046, 0;
	mov.u32 	%r3048, %r3046;
$L__BB0_168:                            // %oksrem8634
                                        //   in Loop: Header=BB0_166 Depth=2
	add.s16 	%rs197, %rs223, -3;
	mul.hi.s16 	%rs198, %rs197, 10923;
	shr.u16 	%rs199, %rs198, 15;
	add.s16 	%rs200, %rs198, %rs199;
	mul.lo.s16 	%rs201, %rs200, 6;
	sub.s16 	%rs202, %rs197, %rs201;
	mul.wide.s16 	%r2780, %rs202, 16;
	add.s32 	%r2781, %r193, %r2780;
	mul.wide.s32 	%rd260, %r2781, 4;
	add.s64 	%rd262, %rd49, %rd260;
	ld.shared.u32 	%r2618, [%rd262];
	add.s32 	%r2782, %r194, %r2780;
	mul.wide.s32 	%rd263, %r2782, 4;
	add.s64 	%rd264, %rd49, %rd263;
	ld.shared.u32 	%r2625, [%rd264];
	mov.u32 	%r2795, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2635, %r2632}, {%r419, %r422}, {%r2618}, {%r2795, %r2795};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2644, %r2641}, {%r419, %r422}, {%r2625}, {%r2795, %r2795};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2628, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2630, %r2628, %r2632;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2633, %r457, %r2635, %r2630;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2637, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2639, %r2637, %r2641;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2642, %r457, %r2644, %r2639;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2646, %r460, %r2635;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2649, %r457, %r2632, %r2646;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2653, %r460, %r2644;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2656, %r457, %r2641, %r2653;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2679, %r2682}, {%r503, %r506}, {%r2633, %r2649}, {%r2795, %r2795}, %r249, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2686, %r2690}, {%r503, %r506}, {%r2642, %r2656}, {%r2795, %r2795}, %r249, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2678, %r2679, %r2679;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2681, %r2682, %r2682, %r2678;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2685, %r2686, %r2686, %r2681;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2689, %r2690, %r2690, %r2685;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2693, %r1502, %r2689, %r3048;
	// end inline asm
	add.s16 	%rs203, %rs223, -2;
	mul.hi.s16 	%rs204, %rs203, 10923;
	shr.u16 	%rs205, %rs204, 15;
	add.s16 	%rs206, %rs204, %rs205;
	mul.lo.s16 	%rs207, %rs206, 6;
	sub.s16 	%rs208, %rs203, %rs207;
	mul.wide.s16 	%r2783, %rs208, 16;
	add.s32 	%r2784, %r193, %r2783;
	mul.wide.s32 	%rd265, %r2784, 4;
	add.s64 	%rd266, %rd49, %rd265;
	ld.shared.u32 	%r2701, [%rd266];
	add.s32 	%r2785, %r194, %r2783;
	mul.wide.s32 	%rd267, %r2785, 4;
	add.s64 	%rd268, %rd49, %rd267;
	ld.shared.u32 	%r2708, [%rd268];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2718, %r2715}, {%r419, %r422}, {%r2701}, {%r2795, %r2795};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2727, %r2724}, {%r419, %r422}, {%r2708}, {%r2795, %r2795};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2711, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2713, %r2711, %r2715;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2716, %r457, %r2718, %r2713;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2720, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2722, %r2720, %r2724;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2725, %r457, %r2727, %r2722;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2729, %r460, %r2718;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2732, %r457, %r2715, %r2729;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2736, %r460, %r2727;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2739, %r457, %r2724, %r2736;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2762, %r2765}, {%r503, %r506}, {%r2716, %r2732}, {%r2795, %r2795}, %r249, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2769, %r2773}, {%r503, %r506}, {%r2725, %r2739}, {%r2795, %r2795}, %r249, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2761, %r2762, %r2762;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2764, %r2765, %r2765, %r2761;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2768, %r2769, %r2769, %r2764;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2772, %r2773, %r2773, %r2768;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3051, %r1502, %r2772, %r2693;
	// end inline asm
	add.s32 	%r3049, %r3046, 2;
	setp.ne.s32 	%p303, %r3049, 256;
	@%p303 bra 	$L__BB0_170;
// %bb.169:                             // %pass9406
                                        //   in Loop: Header=BB0_166 Depth=2
	mul.lo.s32 	%r2787, %r108, 786432;
	or.b32  	%r2788, %r2787, %r195;
	add.s32 	%r2789, %r2788, %r196;
	cvt.u64.u32 	%rd269, %r2789;
	add.s64 	%rd270, %rd269, %rd7;
	mul.hi.s64 	%rd271, %rd270, 3074457345618258603;
	shr.u64 	%rd272, %rd271, 63;
	shr.s64 	%rd273, %rd271, 26;
	add.s64 	%rd274, %rd273, %rd272;
	setp.lt.s64 	%p304, %rd270, 0;
	mul.lo.s64 	%rd275, %rd274, 402653184;
	setp.ne.s64 	%p305, %rd275, %rd270;
	and.pred  	%p306, %p304, %p305;
	selp.s64 	%rd276, -1, 0, %p306;
	add.s64 	%rd277, %rd274, %rd276;
	mul.lo.s64 	%rd278, %rd277, -402653184;
	add.s64 	%rd279, %rd278, %rd270;
	shl.b64 	%rd280, %rd279, 2;
	add.s64 	%rd281, %rd4, %rd280;
	st.global.u32 	[%rd281], %r3051;
	add.s32 	%r108, %r108, 1;
	mov.u32 	%r3049, 0;
	mov.u32 	%r3051, %r3049;
$L__BB0_170:                            // %oksrem9514
                                        //   in Loop: Header=BB0_166 Depth=2
	add.s16 	%rs209, %rs223, -1;
	mul.hi.s16 	%rs210, %rs209, 10923;
	shr.u16 	%rs211, %rs210, 15;
	add.s16 	%rs212, %rs210, %rs211;
	mul.lo.s16 	%rs213, %rs212, 6;
	sub.s16 	%rs214, %rs209, %rs213;
	mul.wide.s16 	%r2956, %rs214, 16;
	add.s32 	%r2957, %r193, %r2956;
	mul.wide.s32 	%rd282, %r2957, 4;
	add.s64 	%rd284, %rd49, %rd282;
	ld.shared.u32 	%r2794, [%rd284];
	add.s32 	%r2958, %r194, %r2956;
	mul.wide.s32 	%rd285, %r2958, 4;
	add.s64 	%rd286, %rd49, %rd285;
	ld.shared.u32 	%r2801, [%rd286];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2811, %r2808}, {%r419, %r422}, {%r2794}, {%r2795, %r2795};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2820, %r2817}, {%r419, %r422}, {%r2801}, {%r2795, %r2795};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2804, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2806, %r2804, %r2808;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2809, %r457, %r2811, %r2806;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2813, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2815, %r2813, %r2817;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2818, %r457, %r2820, %r2815;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2822, %r460, %r2811;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2825, %r457, %r2808, %r2822;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2829, %r460, %r2820;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2832, %r457, %r2817, %r2829;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2855, %r2858}, {%r503, %r506}, {%r2809, %r2825}, {%r2795, %r2795}, %r249, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2862, %r2866}, {%r503, %r506}, {%r2818, %r2832}, {%r2795, %r2795}, %r249, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2854, %r2855, %r2855;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2857, %r2858, %r2858, %r2854;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2861, %r2862, %r2862, %r2857;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2865, %r2866, %r2866, %r2861;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2869, %r1502, %r2865, %r3051;
	// end inline asm
	mul.hi.s16 	%rs215, %rs223, 10923;
	shr.u16 	%rs216, %rs215, 15;
	add.s16 	%rs217, %rs215, %rs216;
	mul.lo.s16 	%rs218, %rs217, 6;
	sub.s16 	%rs219, %rs223, %rs218;
	mul.wide.s16 	%r2959, %rs219, 16;
	add.s32 	%r2960, %r193, %r2959;
	mul.wide.s32 	%rd287, %r2960, 4;
	add.s64 	%rd288, %rd49, %rd287;
	ld.shared.u32 	%r2877, [%rd288];
	add.s32 	%r2961, %r194, %r2959;
	mul.wide.s32 	%rd289, %r2961, 4;
	add.s64 	%rd290, %rd49, %rd289;
	ld.shared.u32 	%r2884, [%rd290];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2894, %r2891}, {%r419, %r422}, {%r2877}, {%r2795, %r2795};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2903, %r2900}, {%r419, %r422}, {%r2884}, {%r2795, %r2795};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2887, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2889, %r2887, %r2891;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2892, %r457, %r2894, %r2889;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2896, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2898, %r2896, %r2900;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2901, %r457, %r2903, %r2898;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2905, %r460, %r2894;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2908, %r457, %r2891, %r2905;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2912, %r460, %r2903;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2915, %r457, %r2900, %r2912;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2938, %r2941}, {%r503, %r506}, {%r2892, %r2908}, {%r2795, %r2795}, %r249, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2945, %r2949}, {%r503, %r506}, {%r2901, %r2915}, {%r2795, %r2795}, %r249, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2937, %r2938, %r2938;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2940, %r2941, %r2941, %r2937;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2944, %r2945, %r2945, %r2940;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2948, %r2949, %r2949, %r2944;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r109, %r1502, %r2948, %r2869;
	// end inline asm
	add.s32 	%r107, %r3049, 2;
	setp.ne.s32 	%p307, %r107, 256;
	@%p307 bra 	$L__BB0_171;
// %bb.228:                             // %pass10286
                                        //   in Loop: Header=BB0_166 Depth=2
	mul.lo.s32 	%r2963, %r108, 786432;
	or.b32  	%r2964, %r2963, %r195;
	add.s32 	%r2965, %r2964, %r196;
	cvt.u64.u32 	%rd291, %r2965;
	add.s64 	%rd292, %rd291, %rd7;
	mul.hi.s64 	%rd293, %rd292, 3074457345618258603;
	shr.u64 	%rd294, %rd293, 63;
	shr.s64 	%rd295, %rd293, 26;
	add.s64 	%rd296, %rd295, %rd294;
	setp.lt.s64 	%p308, %rd292, 0;
	mul.lo.s64 	%rd297, %rd296, 402653184;
	setp.ne.s64 	%p309, %rd297, %rd292;
	and.pred  	%p310, %p308, %p309;
	selp.s64 	%rd298, -1, 0, %p310;
	add.s64 	%rd299, %rd296, %rd298;
	mul.lo.s64 	%rd300, %rd299, -402653184;
	add.s64 	%rd301, %rd300, %rd292;
	shl.b64 	%rd302, %rd301, 2;
	add.s64 	%rd303, %rd4, %rd302;
	st.global.u32 	[%rd303], %r109;
	add.s32 	%r108, %r108, 1;
	mov.u32 	%r107, %r2795;
	mov.u32 	%r109, %r2795;
	bra.uni 	$L__BB0_171;
$L__BB0_173:                            // %L24443
	mov.u32 	%r2966, 0;
	st.global.u32 	[%rd6], %r2966;
	ret;
$L__BB0_163:                            // %post_box_union
	mov.u64 	%rd167, exception1951;
	cvta.global.u64 	%rd168, %rd167;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd168;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r279;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_221:                            // %post_box_union5238
	mov.u64 	%rd174, exception1951;
	cvta.global.u64 	%rd175, %rd174;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd175;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r279;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L5137
	mov.u32 	%r2982, 5;
	st.global.u32 	[%rd6], %r2982;
	mov.u64 	%rd334, exception1911;
	cvta.global.u64 	%rd335, %rd334;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd335;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r279;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L5297
	mov.u32 	%r2981, 5;
	st.global.u32 	[%rd6], %r2981;
	mov.u64 	%rd332, exception1911;
	cvta.global.u64 	%rd333, %rd332;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd333;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r279;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L5457
	mov.u32 	%r2980, 5;
	st.global.u32 	[%rd6], %r2980;
	mov.u64 	%rd330, exception1911;
	cvta.global.u64 	%rd331, %rd330;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd331;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r279;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L5617
	mov.u32 	%r2979, 5;
	st.global.u32 	[%rd6], %r2979;
	mov.u64 	%rd328, exception1911;
	cvta.global.u64 	%rd329, %rd328;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd329;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r279;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L5777
	mov.u32 	%r2978, 5;
	st.global.u32 	[%rd6], %r2978;
	mov.u64 	%rd326, exception1911;
	cvta.global.u64 	%rd327, %rd326;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd327;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r279;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L5937
	mov.u32 	%r2977, 5;
	st.global.u32 	[%rd6], %r2977;
	mov.u64 	%rd324, exception1911;
	cvta.global.u64 	%rd325, %rd324;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd325;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r279;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_151:                            // %L6097
	mov.u32 	%r2976, 5;
	st.global.u32 	[%rd6], %r2976;
	mov.u64 	%rd322, exception1911;
	cvta.global.u64 	%rd323, %rd322;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd323;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r279;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_152:                            // %L6257
	mov.u32 	%r2975, 5;
	st.global.u32 	[%rd6], %r2975;
	mov.u64 	%rd320, exception1911;
	cvta.global.u64 	%rd321, %rd320;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd321;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r279;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_153:                            // %L6417
	mov.u32 	%r2974, 5;
	st.global.u32 	[%rd6], %r2974;
	mov.u64 	%rd318, exception1911;
	cvta.global.u64 	%rd319, %rd318;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd319;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r279;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_154:                            // %L6577
	mov.u32 	%r2973, 5;
	st.global.u32 	[%rd6], %r2973;
	mov.u64 	%rd316, exception1911;
	cvta.global.u64 	%rd317, %rd316;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd317;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r279;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_155:                            // %L6763
	mov.u32 	%r2972, 5;
	st.global.u32 	[%rd6], %r2972;
	mov.u64 	%rd314, exception1911;
	cvta.global.u64 	%rd315, %rd314;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd315;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r279;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_156:                            // %L6923
	mov.u32 	%r2971, 5;
	st.global.u32 	[%rd6], %r2971;
	mov.u64 	%rd312, exception1911;
	cvta.global.u64 	%rd313, %rd312;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd313;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r279;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_157:                            // %L7083
	mov.u32 	%r2970, 5;
	st.global.u32 	[%rd6], %r2970;
	mov.u64 	%rd310, exception1911;
	cvta.global.u64 	%rd311, %rd310;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd311;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r279;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_158:                            // %L7243
	mov.u32 	%r2969, 5;
	st.global.u32 	[%rd6], %r2969;
	mov.u64 	%rd308, exception1911;
	cvta.global.u64 	%rd309, %rd308;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd309;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r279;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_159:                            // %L7403
	mov.u32 	%r2968, 5;
	st.global.u32 	[%rd6], %r2968;
	mov.u64 	%rd306, exception1911;
	cvta.global.u64 	%rd307, %rd306;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd307;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r279;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_160:                            // %L7563
	mov.u32 	%r2967, 5;
	st.global.u32 	[%rd6], %r2967;
	mov.u64 	%rd304, exception1911;
	cvta.global.u64 	%rd305, %rd304;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd305;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r279;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L169
	mov.u32 	%r2984, 2;
	st.global.u32 	[%rd6], %r2984;
	mov.u64 	%rd338, exception1911;
	cvta.global.u64 	%rd339, %rd338;
	{ // callseq 90, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd339;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 90
	{ // callseq 91, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r279;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 91
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_12:                             // %L312
	mov.u32 	%r2983, 3;
	st.global.u32 	[%rd6], %r2983;
	mov.u64 	%rd336, exception1911;
	cvta.global.u64 	%rd337, %rd336;
	{ // callseq 88, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd337;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 88
	{ // callseq 89, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r279;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 89
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 47
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r279;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 48
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_144:                            // %L1158
	add.u64 	%rd17, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r289, %r4};
	st.local.v2.u32 	[%rd5+8], {%r1, %r84};
	st.local.u32 	[%rd5+16], %r85;
	mov.u64 	%rd23, __unnamed_1;
	cvta.global.u64 	%rd24, %rd23;
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd24;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd17;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r516, [retval0+0];
	} // callseq 49
	mov.u32 	%r518, 4;
	st.global.u32 	[%rd6], %r518;
	mov.u64 	%rd26, exception1911;
	cvta.global.u64 	%rd27, %rd26;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd27;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r279;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
