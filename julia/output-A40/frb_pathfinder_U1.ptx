// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=192, blocks_per_sm=4

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception1835[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1875[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 192, 1, 1
.minnctapersm 4
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<298>;
	.reg .b16 	%rs<195>;
	.reg .b32 	%r<3010>;
	.reg .f32 	%f<790>;
	.reg .b64 	%rd<263>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r254, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd12, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r263, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p4, %r263, 13919;
	@%p4 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd13, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r255, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r264, %tid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %ctaid.x;
	mul.lo.s32 	%r5, %r4, 192;
	or.b32  	%r265, %r3, %r264;
	add.s32 	%r266, %r265, %r5;
	mul.wide.u32 	%rd20, %r266, 4;
	add.s64 	%rd6, %rd13, %rd20;
	mov.u32 	%r267, 1;
	st.global.u32 	[%rd6], %r267;
	setp.gt.u32 	%p5, %r255, 32767;
	@%p5 bra 	$L__BB0_6;
// %bb.3:                               // %L122
	ld.param.u32 	%r256, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p6, %r256, %r255;
	setp.gt.s32 	%p7, %r256, 65535;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_6;
// %bb.4:                               // %L129
	ld.param.u32 	%r257, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r256, %r255;
	mad.lo.s32 	%r268, %r6, -1431655765, 715827872;
	shf.r.wrap.b32 	%r269, %r268, %r268, 4;
	setp.gt.u32 	%p9, %r269, 89478484;
	setp.gt.u32 	%p10, %r257, 1023;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_6;
// %bb.5:                               // %L140
	ld.param.u32 	%r258, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p12, %r258, %r257;
	setp.lt.s32 	%p13, %r258, 2048;
	and.pred  	%p14, %p12, %p13;
	@%p14 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r270, %r258, %r257;
	mul.hi.s32 	%r271, %r6, 715827883;
	shr.u32 	%r272, %r271, 31;
	shr.s32 	%r273, %r271, 5;
	add.s32 	%r274, %r273, %r272;
	setp.eq.s32 	%p15, %r270, %r274;
	@%p15 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L262
	ld.param.u32 	%r259, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p16, %r259, 0;
	@%p16 bra 	$L__BB0_12;
// %bb.9:                               // %L264
	ld.param.u32 	%r261, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	ld.param.u32 	%r260, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p17, %r260, %r259;
	setp.gt.s32 	%p18, %r260, 384;
	or.pred  	%p19, %p17, %p18;
	setp.lt.s32 	%p20, %r261, 0;
	or.pred  	%p21, %p19, %p20;
	@%p21 bra 	$L__BB0_12;
// %bb.10:                              // %L280
	ld.param.u32 	%r262, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p22, %r262, %r261;
	setp.gt.s32 	%p23, %r262, 4096;
	or.pred  	%p24, %p22, %p23;
	@%p24 bra 	$L__BB0_12;
// %bb.11:                              // %L290
	sub.s32 	%r275, %r262, %r261;
	sub.s32 	%r276, %r260, %r259;
	setp.eq.s32 	%p25, %r275, %r276;
	@%p25 bra 	$L__BB0_170;
	bra.uni 	$L__BB0_12;
$L__BB0_170:                            // %pass162
	and.b32  	%r142, %r264, 3;
	shr.u32 	%r143, %r264, 2;
	mul.lo.s32 	%r277, %r142, %r143;
	and.b32  	%r278, %r277, 7;
	cvt.rn.f32.s32 	%f205, %r278;
	mov.f32 	%f206, 0f40800000;
	div.approx.f32 	%f169, %f205, %f206;
	abs.f32 	%f788, %f169;
	setp.lt.f32 	%p26, %f788, 0f40000000;
	setp.gtu.f32 	%p297, %f788, 0f4B800000;
	mov.f32 	%f784, %f788;
	@%p26 bra 	$L__BB0_182;
// %bb.171:
	@%p297 bra 	$L__BB0_178;
	bra.uni 	$L__BB0_172;
$L__BB0_178:
	mov.b32 	%r145, %f788;
	and.b32  	%r279, %r145, 8388607;
	or.b32  	%r3005, %r279, 1065353216;
	mov.b32 	%f783, %r3005;
	add.s32 	%r280, %r145, -1073741824;
	and.b32  	%r3006, %r280, -8388608;
	setp.eq.s32 	%p33, %r3006, 0;
	@%p33 bra 	$L__BB0_181;
// %bb.179:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f216, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f215,%f216;
	// end inline asm
$L__BB0_180:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r281, %r3006, 192937984;
	add.s32 	%r282, %r3005, %r281;
	mov.b32 	%f217, %r282;
	mul.f32 	%f218, %f215, %f217;
	sub.f32 	%f219, %f217, %f218;
	fma.rn.f32 	%f220, %f219, %f215, %f218;
	sub.f32 	%f221, %f217, %f220;
	fma.rz.f32 	%f222, %f221, %f215, %f220;
	cvt.rzi.f32.f32 	%f223, %f222;
	sub.f32 	%f783, %f217, %f223;
	sub.s32 	%r3006, %r3006, %r281;
	mov.b32 	%r3005, %f783;
	setp.ne.s32 	%p34, %r3006, 0;
	setp.ne.s32 	%p35, %r3005, 0;
	and.pred  	%p36, %p34, %p35;
	@%p36 bra 	$L__BB0_180;
$L__BB0_181:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p37, %r145, 2139095039;
	selp.f32 	%f224, 0f7FFFFFFF, 0f4B800000, %p37;
	mul.f32 	%f225, %f783, 0f34000000;
	mul.f32 	%f784, %f224, %f225;
	bra.uni 	$L__BB0_182;
$L__BB0_172:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f207, 0f40000000;
	div.approx.f32 	%f208, %f788, %f207;
	cvt.rzi.f32.f32 	%f782, %f208;
	fma.rn.f32 	%f172, %f782, 0fC0000000, %f788;
	mov.b32 	%r144, %f172;
	setp.lt.u32 	%p28, %r144, 1073741824;
	@%p28 bra 	$L__BB0_177;
// %bb.173:
	setp.lt.u32 	%p29, %r144, -2147483647;
	@%p29 bra 	$L__BB0_175;
// %bb.174:
	add.f32 	%f213, %f782, 0fBF800000;
	setp.lt.f32 	%p32, %f172, 0fC0000000;
	add.f32 	%f214, %f213, 0fBF800000;
	selp.f32 	%f782, %f214, %f213, %p32;
	bra.uni 	$L__BB0_177;
$L__BB0_175:
	add.f32 	%f782, %f782, 0f3F800000;
	setp.ltu.f32 	%p30, %f172, 0f40800000;
	@%p30 bra 	$L__BB0_177;
// %bb.176:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f209, %f782, 0f3F800000;
	fma.rn.f32 	%f211, %f207, 0fC0400000, %f172;
	setp.ge.f32 	%p31, %f211, 0f00000000;
	add.f32 	%f212, %f209, 0f3F800000;
	selp.f32 	%f782, %f212, %f209, %p31;
$L__BB0_177:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f784, %f782, 0fC0000000, %f788;
$L__BB0_182:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f226, %f784;
	setp.gtu.f32 	%p38, %f226, 0f7F800000;
	mov.b32 	%r283, %f169;
	and.b32  	%r152, %r283, -2147483648;
	@%p38 bra 	$L__BB0_184;
// %bb.183:
	mov.b32 	%r284, %f784;
	or.b32  	%r285, %r152, %r284;
	mov.b32 	%f784, %r285;
$L__BB0_184:                            // %__nv_fmodf.exit
	shl.b32 	%r155, %r264, 1;
	and.b32  	%r156, %r155, 2;
	mul.lo.s32 	%r300, %r156, %r143;
	cvt.rn.f32.s32 	%f259, %r300;
	mov.f32 	%f260, 0f41400000;
	div.approx.f32 	%f186, %f259, %f260;
	abs.f32 	%f734, %f186;
	setp.lt.f32 	%p46, %f734, 0f40000000;
	@%p46 bra 	$L__BB0_24;
// %bb.13:
	setp.gtu.f32 	%p47, %f734, 0f4B800000;
	@%p47 bra 	$L__BB0_20;
	bra.uni 	$L__BB0_14;
$L__BB0_20:
	mov.b32 	%r8, %f734;
	and.b32  	%r301, %r8, 8388607;
	or.b32  	%r2955, %r301, 1065353216;
	mov.b32 	%f733, %r2955;
	add.s32 	%r302, %r8, -1073741824;
	and.b32  	%r2956, %r302, -8388608;
	setp.eq.s32 	%p53, %r2956, 0;
	@%p53 bra 	$L__BB0_23;
// %bb.21:                              // %__nv_fmaf_rn.exit4.i.i.i1990.preheader
	mov.f32 	%f270, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f269,%f270;
	// end inline asm
$L__BB0_22:                             // %__nv_fmaf_rn.exit4.i.i.i1990
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r303, %r2956, 192937984;
	add.s32 	%r304, %r2955, %r303;
	mov.b32 	%f271, %r304;
	mul.f32 	%f272, %f269, %f271;
	sub.f32 	%f273, %f271, %f272;
	fma.rn.f32 	%f274, %f273, %f269, %f272;
	sub.f32 	%f275, %f271, %f274;
	fma.rz.f32 	%f276, %f275, %f269, %f274;
	cvt.rzi.f32.f32 	%f277, %f276;
	sub.f32 	%f733, %f271, %f277;
	sub.s32 	%r2956, %r2956, %r303;
	mov.b32 	%r2955, %f733;
	setp.ne.s32 	%p54, %r2956, 0;
	setp.ne.s32 	%p55, %r2955, 0;
	and.pred  	%p56, %p54, %p55;
	@%p56 bra 	$L__BB0_22;
$L__BB0_23:                             // %__internal_fmodf_slowpath_mod.exit.i.i1992
	setp.gt.u32 	%p57, %r8, 2139095039;
	selp.f32 	%f278, 0f7FFFFFFF, 0f4B800000, %p57;
	mul.f32 	%f279, %f733, 0f34000000;
	mul.f32 	%f734, %f278, %f279;
	bra.uni 	$L__BB0_24;
$L__BB0_14:                             // %__nv_fast_fdividef.exit.i.i.i1969
	mov.f32 	%f261, 0f40000000;
	div.approx.f32 	%f262, %f734, %f261;
	cvt.rzi.f32.f32 	%f732, %f262;
	fma.rn.f32 	%f2, %f732, 0fC0000000, %f734;
	mov.b32 	%r7, %f2;
	setp.lt.u32 	%p48, %r7, 1073741824;
	@%p48 bra 	$L__BB0_19;
// %bb.15:
	setp.lt.u32 	%p49, %r7, -2147483647;
	@%p49 bra 	$L__BB0_17;
// %bb.16:
	add.f32 	%f267, %f732, 0fBF800000;
	setp.lt.f32 	%p52, %f2, 0fC0000000;
	add.f32 	%f268, %f267, 0fBF800000;
	selp.f32 	%f732, %f268, %f267, %p52;
	bra.uni 	$L__BB0_19;
$L__BB0_17:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p50, %f2, 0f40800000;
	@%p50 bra 	$L__BB0_19;
// %bb.18:                              // %__nv_fmaf_rn.exit.i.i.i1973
	add.f32 	%f263, %f732, 0f3F800000;
	fma.rn.f32 	%f265, %f261, 0fC0400000, %f2;
	setp.ge.f32 	%p51, %f265, 0f00000000;
	add.f32 	%f266, %f263, 0f3F800000;
	selp.f32 	%f732, %f266, %f263, %p51;
$L__BB0_19:                             // %__internal_fmodf_fastpath_quot.exit.i.i1976
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_24:                             // %__internal_fmodf_kernel.exit.i1995
	or.b32  	%r157, %r156, 1;
	abs.f32 	%f280, %f734;
	setp.gtu.f32 	%p58, %f280, 0f7F800000;
	@%p58 bra 	$L__BB0_26;
// %bb.25:
	mov.b32 	%r305, %f186;
	and.b32  	%r306, %r305, -2147483648;
	mov.b32 	%r307, %f734;
	or.b32  	%r308, %r306, %r307;
	mov.b32 	%f734, %r308;
$L__BB0_26:                             // %__nv_fmodf.exit1996
	mov.f32 	%f250, 0f00000000;
	setp.eq.s32 	%p66, %r157, 3;
	mov.f32 	%f37, %f250;
	mov.f32 	%f38, %f250;
	@%p66 bra 	$L__BB0_42;
// %bb.27:                              // %L531
	mul.lo.s32 	%r317, %r157, %r143;
	mul.hi.u32 	%r318, %r317, -1431655765;
	shr.u32 	%r319, %r318, 4;
	mul.lo.s32 	%r320, %r319, 24;
	sub.s32 	%r321, %r317, %r320;
	cvt.rn.f32.s32 	%f311, %r321;
	div.approx.f32 	%f18, %f311, %f260;
	abs.f32 	%f738, %f18;
	setp.lt.f32 	%p67, %f738, 0f40000000;
	@%p67 bra 	$L__BB0_39;
// %bb.28:
	setp.gtu.f32 	%p68, %f738, 0f4B800000;
	@%p68 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_29;
$L__BB0_35:
	mov.b32 	%r16, %f738;
	and.b32  	%r322, %r16, 8388607;
	or.b32  	%r2957, %r322, 1065353216;
	mov.b32 	%f737, %r2957;
	add.s32 	%r323, %r16, -1073741824;
	and.b32  	%r2958, %r323, -8388608;
	setp.eq.s32 	%p74, %r2958, 0;
	@%p74 bra 	$L__BB0_38;
// %bb.36:                              // %__nv_fmaf_rn.exit4.i.i.i2021.preheader
	mov.f32 	%f322, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f321,%f322;
	// end inline asm
$L__BB0_37:                             // %__nv_fmaf_rn.exit4.i.i.i2021
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r324, %r2958, 192937984;
	add.s32 	%r325, %r2957, %r324;
	mov.b32 	%f323, %r325;
	mul.f32 	%f324, %f321, %f323;
	sub.f32 	%f325, %f323, %f324;
	fma.rn.f32 	%f326, %f325, %f321, %f324;
	sub.f32 	%f327, %f323, %f326;
	fma.rz.f32 	%f328, %f327, %f321, %f326;
	cvt.rzi.f32.f32 	%f329, %f328;
	sub.f32 	%f737, %f323, %f329;
	sub.s32 	%r2958, %r2958, %r324;
	mov.b32 	%r2957, %f737;
	setp.ne.s32 	%p75, %r2958, 0;
	setp.ne.s32 	%p76, %r2957, 0;
	and.pred  	%p77, %p75, %p76;
	@%p77 bra 	$L__BB0_37;
$L__BB0_38:                             // %__internal_fmodf_slowpath_mod.exit.i.i2023
	setp.gt.u32 	%p78, %r16, 2139095039;
	selp.f32 	%f330, 0f7FFFFFFF, 0f4B800000, %p78;
	mul.f32 	%f331, %f737, 0f34000000;
	mul.f32 	%f738, %f330, %f331;
	bra.uni 	$L__BB0_39;
$L__BB0_29:                             // %__nv_fast_fdividef.exit.i.i.i2000
	mov.f32 	%f313, 0f40000000;
	div.approx.f32 	%f314, %f738, %f313;
	cvt.rzi.f32.f32 	%f736, %f314;
	fma.rn.f32 	%f21, %f736, 0fC0000000, %f738;
	mov.b32 	%r15, %f21;
	setp.lt.u32 	%p69, %r15, 1073741824;
	@%p69 bra 	$L__BB0_34;
// %bb.30:
	setp.lt.u32 	%p70, %r15, -2147483647;
	@%p70 bra 	$L__BB0_32;
// %bb.31:
	add.f32 	%f319, %f736, 0fBF800000;
	setp.lt.f32 	%p73, %f21, 0fC0000000;
	add.f32 	%f320, %f319, 0fBF800000;
	selp.f32 	%f736, %f320, %f319, %p73;
	bra.uni 	$L__BB0_34;
$L__BB0_32:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p71, %f21, 0f40800000;
	@%p71 bra 	$L__BB0_34;
// %bb.33:                              // %__nv_fmaf_rn.exit.i.i.i2004
	add.f32 	%f315, %f736, 0f3F800000;
	fma.rn.f32 	%f317, %f313, 0fC0400000, %f21;
	setp.ge.f32 	%p72, %f317, 0f00000000;
	add.f32 	%f318, %f315, 0f3F800000;
	selp.f32 	%f736, %f318, %f315, %p72;
$L__BB0_34:                             // %__internal_fmodf_fastpath_quot.exit.i.i2007
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_39:                             // %__internal_fmodf_kernel.exit.i2026
	abs.f32 	%f332, %f738;
	setp.gtu.f32 	%p79, %f332, 0f7F800000;
	@%p79 bra 	$L__BB0_41;
// %bb.40:
	mov.b32 	%r326, %f18;
	and.b32  	%r327, %r326, -2147483648;
	mov.b32 	%r328, %f738;
	or.b32  	%r329, %r327, %r328;
	mov.b32 	%f738, %r329;
$L__BB0_41:                             // %__nv_fmodf.exit2027
	add.f32 	%f333, %f738, %f738;
	mov.b32 	%r330, %f333;
	and.b32  	%r331, %r330, -2147483648;
	or.b32  	%r332, %r331, 1056964608;
	mov.b32 	%f334, %r332;
	add.f32 	%f335, %f333, %f334;
	cvt.rzi.f32.f32 	%f336, %f335;
	abs.f32 	%f337, %f333;
	setp.gt.f32 	%p80, %f337, 0f4B000000;
	selp.f32 	%f338, %f333, %f336, %p80;
	cvt.rzi.f32.f32 	%f339, %f333;
	setp.lt.f32 	%p81, %f337, 0f3F000000;
	selp.f32 	%f340, %f339, %f338, %p81;
	cvt.rzi.s32.f32 	%r333, %f340;
	fma.rn.f32 	%f341, %f340, 0fBF000000, %f738;
	mul.f32 	%f342, %f341, %f341;
	fma.rn.f32 	%f343, %f342, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f344, %f342, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f345, %f343, %f342, 0fC0A55DF6;
	fma.rn.f32 	%f346, %f344, %f342, 0f4081E0CF;
	fma.rn.f32 	%f347, %f342, %f341, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f342, 0fC09DE9E6;
	fma.rn.f32 	%f349, %f345, %f347, 0f00000000;
	fma.rn.f32 	%f350, %f348, %f342, 0f3F800000;
	fma.rn.f32 	%f351, %f341, 0f40490FDB, %f349;
	and.b32  	%r334, %r333, 1;
	setp.eq.b32 	%p82, %r334, 1;
	selp.f32 	%f352, %f350, %f351, %p82;
	selp.f32 	%f353, %f351, %f350, %p82;
	and.b32  	%r335, %r333, 2;
	setp.eq.s32 	%p83, %r335, 0;
	neg.f32 	%f354, %f352;
	selp.f32 	%f355, %f352, %f354, %p83;
	add.s32 	%r336, %r333, 1;
	and.b32  	%r337, %r336, 2;
	setp.eq.s32 	%p84, %r337, 0;
	mov.f32 	%f356, 0f00000000;
	sub.f32 	%f357, %f356, %f353;
	selp.f32 	%f358, %f353, %f357, %p84;
	cvt.rzi.f32.f32 	%f359, %f738;
	setp.eq.f32 	%p85, %f359, %f738;
	mul.f32 	%f360, %f738, 0f00000000;
	selp.f32 	%f38, %f360, %f355, %p85;
	abs.f32 	%f361, %f738;
	setp.gt.f32 	%p86, %f361, 0f4B800000;
	add.f32 	%f362, %f38, 0f3F800000;
	selp.f32 	%f37, %f362, %f358, %p86;
$L__BB0_42:                             // %L565
	and.b32  	%r25, %r143, 3;
	setp.eq.s32 	%p87, %r25, 3;
	mov.f32 	%f731, 0f3FC00000;
	mov.f32 	%f746, %f250;
	mov.f32 	%f755, %f250;
	@%p87 bra 	$L__BB0_58;
// %bb.43:                              // %L603
	mul.lo.s32 	%r344, %r156, %r25;
	cvt.u16.u32 	%rs9, %r344;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 9;
	mul.lo.s16 	%rs12, %rs11, 3;
	sub.s16 	%rs13, %rs9, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f364, %rs14;
	div.approx.f32 	%f39, %f364, %f731;
	abs.f32 	%f744, %f39;
	setp.lt.f32 	%p88, %f744, 0f40000000;
	@%p88 bra 	$L__BB0_55;
// %bb.44:
	setp.gtu.f32 	%p89, %f744, 0f4B800000;
	@%p89 bra 	$L__BB0_51;
	bra.uni 	$L__BB0_45;
$L__BB0_51:
	mov.b32 	%r27, %f744;
	and.b32  	%r345, %r27, 8388607;
	or.b32  	%r2959, %r345, 1065353216;
	mov.b32 	%f743, %r2959;
	add.s32 	%r346, %r27, -1073741824;
	and.b32  	%r2960, %r346, -8388608;
	setp.eq.s32 	%p95, %r2960, 0;
	@%p95 bra 	$L__BB0_54;
// %bb.52:                              // %__nv_fmaf_rn.exit4.i.i.i2052.preheader
	mov.f32 	%f375, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f374,%f375;
	// end inline asm
$L__BB0_53:                             // %__nv_fmaf_rn.exit4.i.i.i2052
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r347, %r2960, 192937984;
	add.s32 	%r348, %r2959, %r347;
	mov.b32 	%f376, %r348;
	mul.f32 	%f377, %f374, %f376;
	sub.f32 	%f378, %f376, %f377;
	fma.rn.f32 	%f379, %f378, %f374, %f377;
	sub.f32 	%f380, %f376, %f379;
	fma.rz.f32 	%f381, %f380, %f374, %f379;
	cvt.rzi.f32.f32 	%f382, %f381;
	sub.f32 	%f743, %f376, %f382;
	sub.s32 	%r2960, %r2960, %r347;
	mov.b32 	%r2959, %f743;
	setp.ne.s32 	%p96, %r2960, 0;
	setp.ne.s32 	%p97, %r2959, 0;
	and.pred  	%p98, %p96, %p97;
	@%p98 bra 	$L__BB0_53;
$L__BB0_54:                             // %__internal_fmodf_slowpath_mod.exit.i.i2054
	setp.gt.u32 	%p99, %r27, 2139095039;
	selp.f32 	%f383, 0f7FFFFFFF, 0f4B800000, %p99;
	mul.f32 	%f384, %f743, 0f34000000;
	mul.f32 	%f744, %f383, %f384;
	bra.uni 	$L__BB0_55;
$L__BB0_45:                             // %__nv_fast_fdividef.exit.i.i.i2031
	mov.f32 	%f366, 0f40000000;
	div.approx.f32 	%f367, %f744, %f366;
	cvt.rzi.f32.f32 	%f742, %f367;
	fma.rn.f32 	%f42, %f742, 0fC0000000, %f744;
	mov.b32 	%r26, %f42;
	setp.lt.u32 	%p90, %r26, 1073741824;
	@%p90 bra 	$L__BB0_50;
// %bb.46:
	setp.lt.u32 	%p91, %r26, -2147483647;
	@%p91 bra 	$L__BB0_48;
// %bb.47:
	add.f32 	%f372, %f742, 0fBF800000;
	setp.lt.f32 	%p94, %f42, 0fC0000000;
	add.f32 	%f373, %f372, 0fBF800000;
	selp.f32 	%f742, %f373, %f372, %p94;
	bra.uni 	$L__BB0_50;
$L__BB0_48:
	add.f32 	%f742, %f742, 0f3F800000;
	setp.ltu.f32 	%p92, %f42, 0f40800000;
	@%p92 bra 	$L__BB0_50;
// %bb.49:                              // %__nv_fmaf_rn.exit.i.i.i2035
	add.f32 	%f368, %f742, 0f3F800000;
	fma.rn.f32 	%f370, %f366, 0fC0400000, %f42;
	setp.ge.f32 	%p93, %f370, 0f00000000;
	add.f32 	%f371, %f368, 0f3F800000;
	selp.f32 	%f742, %f371, %f368, %p93;
$L__BB0_50:                             // %__internal_fmodf_fastpath_quot.exit.i.i2038
	fma.rn.f32 	%f744, %f742, 0fC0000000, %f744;
$L__BB0_55:                             // %__internal_fmodf_kernel.exit.i2057
	abs.f32 	%f385, %f744;
	setp.gtu.f32 	%p100, %f385, 0f7F800000;
	@%p100 bra 	$L__BB0_57;
// %bb.56:
	mov.b32 	%r349, %f39;
	and.b32  	%r350, %r349, -2147483648;
	mov.b32 	%r351, %f744;
	or.b32  	%r352, %r350, %r351;
	mov.b32 	%f744, %r352;
$L__BB0_57:                             // %__nv_fmodf.exit2058
	add.f32 	%f386, %f744, %f744;
	mov.b32 	%r353, %f386;
	and.b32  	%r354, %r353, -2147483648;
	or.b32  	%r355, %r354, 1056964608;
	mov.b32 	%f387, %r355;
	add.f32 	%f388, %f386, %f387;
	cvt.rzi.f32.f32 	%f389, %f388;
	abs.f32 	%f390, %f386;
	setp.gt.f32 	%p101, %f390, 0f4B000000;
	selp.f32 	%f391, %f386, %f389, %p101;
	cvt.rzi.f32.f32 	%f392, %f386;
	setp.lt.f32 	%p102, %f390, 0f3F000000;
	selp.f32 	%f393, %f392, %f391, %p102;
	cvt.rzi.s32.f32 	%r356, %f393;
	fma.rn.f32 	%f394, %f393, 0fBF000000, %f744;
	mul.f32 	%f395, %f394, %f394;
	fma.rn.f32 	%f396, %f395, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f397, %f395, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f398, %f396, %f395, 0fC0A55DF6;
	fma.rn.f32 	%f399, %f397, %f395, 0f4081E0CF;
	fma.rn.f32 	%f400, %f395, %f394, 0f00000000;
	fma.rn.f32 	%f401, %f399, %f395, 0fC09DE9E6;
	fma.rn.f32 	%f402, %f398, %f400, 0f00000000;
	fma.rn.f32 	%f403, %f401, %f395, 0f3F800000;
	fma.rn.f32 	%f404, %f394, 0f40490FDB, %f402;
	and.b32  	%r357, %r356, 1;
	setp.eq.b32 	%p103, %r357, 1;
	selp.f32 	%f405, %f403, %f404, %p103;
	selp.f32 	%f406, %f404, %f403, %p103;
	and.b32  	%r358, %r356, 2;
	setp.eq.s32 	%p104, %r358, 0;
	neg.f32 	%f407, %f405;
	selp.f32 	%f408, %f405, %f407, %p104;
	add.s32 	%r359, %r356, 1;
	and.b32  	%r360, %r359, 2;
	setp.eq.s32 	%p105, %r360, 0;
	mov.f32 	%f409, 0f00000000;
	sub.f32 	%f410, %f409, %f406;
	selp.f32 	%f411, %f406, %f410, %p105;
	cvt.rzi.f32.f32 	%f412, %f744;
	setp.eq.f32 	%p106, %f412, %f744;
	mul.f32 	%f413, %f744, 0f00000000;
	selp.f32 	%f755, %f413, %f408, %p106;
	abs.f32 	%f414, %f744;
	setp.gt.f32 	%p107, %f414, 0f4B800000;
	add.f32 	%f415, %f755, 0f3F800000;
	selp.f32 	%f746, %f415, %f411, %p107;
$L__BB0_58:                             // %L637
	or.pred  	%p110, %p66, %p87;
	mov.f32 	%f752, %f250;
	mov.f32 	%f757, %f250;
	@%p110 bra 	$L__BB0_74;
// %bb.59:                              // %L645
	mul.lo.s32 	%r361, %r157, %r25;
	mul.hi.u32 	%r362, %r361, -1431655765;
	shr.u32 	%r363, %r362, 1;
	mul.lo.s32 	%r364, %r363, 3;
	sub.s32 	%r365, %r361, %r364;
	cvt.rn.f32.s32 	%f417, %r365;
	div.approx.f32 	%f60, %f417, %f731;
	abs.f32 	%f750, %f60;
	setp.lt.f32 	%p111, %f750, 0f40000000;
	@%p111 bra 	$L__BB0_71;
// %bb.60:
	setp.gtu.f32 	%p112, %f750, 0f4B800000;
	@%p112 bra 	$L__BB0_67;
	bra.uni 	$L__BB0_61;
$L__BB0_67:
	mov.b32 	%r35, %f750;
	and.b32  	%r366, %r35, 8388607;
	or.b32  	%r2961, %r366, 1065353216;
	mov.b32 	%f749, %r2961;
	add.s32 	%r367, %r35, -1073741824;
	and.b32  	%r2962, %r367, -8388608;
	setp.eq.s32 	%p118, %r2962, 0;
	@%p118 bra 	$L__BB0_70;
// %bb.68:                              // %__nv_fmaf_rn.exit4.i.i.i2083.preheader
	mov.f32 	%f428, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f427,%f428;
	// end inline asm
$L__BB0_69:                             // %__nv_fmaf_rn.exit4.i.i.i2083
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r368, %r2962, 192937984;
	add.s32 	%r369, %r2961, %r368;
	mov.b32 	%f429, %r369;
	mul.f32 	%f430, %f427, %f429;
	sub.f32 	%f431, %f429, %f430;
	fma.rn.f32 	%f432, %f431, %f427, %f430;
	sub.f32 	%f433, %f429, %f432;
	fma.rz.f32 	%f434, %f433, %f427, %f432;
	cvt.rzi.f32.f32 	%f435, %f434;
	sub.f32 	%f749, %f429, %f435;
	sub.s32 	%r2962, %r2962, %r368;
	mov.b32 	%r2961, %f749;
	setp.ne.s32 	%p119, %r2962, 0;
	setp.ne.s32 	%p120, %r2961, 0;
	and.pred  	%p121, %p119, %p120;
	@%p121 bra 	$L__BB0_69;
$L__BB0_70:                             // %__internal_fmodf_slowpath_mod.exit.i.i2085
	setp.gt.u32 	%p122, %r35, 2139095039;
	selp.f32 	%f436, 0f7FFFFFFF, 0f4B800000, %p122;
	mul.f32 	%f437, %f749, 0f34000000;
	mul.f32 	%f750, %f436, %f437;
	bra.uni 	$L__BB0_71;
$L__BB0_61:                             // %__nv_fast_fdividef.exit.i.i.i2062
	mov.f32 	%f419, 0f40000000;
	div.approx.f32 	%f420, %f750, %f419;
	cvt.rzi.f32.f32 	%f748, %f420;
	fma.rn.f32 	%f63, %f748, 0fC0000000, %f750;
	mov.b32 	%r34, %f63;
	setp.lt.u32 	%p113, %r34, 1073741824;
	@%p113 bra 	$L__BB0_66;
// %bb.62:
	setp.lt.u32 	%p114, %r34, -2147483647;
	@%p114 bra 	$L__BB0_64;
// %bb.63:
	add.f32 	%f425, %f748, 0fBF800000;
	setp.lt.f32 	%p117, %f63, 0fC0000000;
	add.f32 	%f426, %f425, 0fBF800000;
	selp.f32 	%f748, %f426, %f425, %p117;
	bra.uni 	$L__BB0_66;
$L__BB0_64:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p115, %f63, 0f40800000;
	@%p115 bra 	$L__BB0_66;
// %bb.65:                              // %__nv_fmaf_rn.exit.i.i.i2066
	add.f32 	%f421, %f748, 0f3F800000;
	fma.rn.f32 	%f423, %f419, 0fC0400000, %f63;
	setp.ge.f32 	%p116, %f423, 0f00000000;
	add.f32 	%f424, %f421, 0f3F800000;
	selp.f32 	%f748, %f424, %f421, %p116;
$L__BB0_66:                             // %__internal_fmodf_fastpath_quot.exit.i.i2069
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_71:                             // %__internal_fmodf_kernel.exit.i2088
	abs.f32 	%f438, %f750;
	setp.gtu.f32 	%p123, %f438, 0f7F800000;
	@%p123 bra 	$L__BB0_73;
// %bb.72:
	mov.b32 	%r370, %f60;
	and.b32  	%r371, %r370, -2147483648;
	mov.b32 	%r372, %f750;
	or.b32  	%r373, %r371, %r372;
	mov.b32 	%f750, %r373;
$L__BB0_73:                             // %__nv_fmodf.exit2089
	add.f32 	%f439, %f750, %f750;
	mov.b32 	%r374, %f439;
	and.b32  	%r375, %r374, -2147483648;
	or.b32  	%r376, %r375, 1056964608;
	mov.b32 	%f440, %r376;
	add.f32 	%f441, %f439, %f440;
	cvt.rzi.f32.f32 	%f442, %f441;
	abs.f32 	%f443, %f439;
	setp.gt.f32 	%p124, %f443, 0f4B000000;
	selp.f32 	%f444, %f439, %f442, %p124;
	cvt.rzi.f32.f32 	%f445, %f439;
	setp.lt.f32 	%p125, %f443, 0f3F000000;
	selp.f32 	%f446, %f445, %f444, %p125;
	cvt.rzi.s32.f32 	%r377, %f446;
	fma.rn.f32 	%f447, %f446, 0fBF000000, %f750;
	mul.f32 	%f448, %f447, %f447;
	fma.rn.f32 	%f449, %f448, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f450, %f448, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f451, %f449, %f448, 0fC0A55DF6;
	fma.rn.f32 	%f452, %f450, %f448, 0f4081E0CF;
	fma.rn.f32 	%f453, %f448, %f447, 0f00000000;
	fma.rn.f32 	%f454, %f452, %f448, 0fC09DE9E6;
	fma.rn.f32 	%f455, %f451, %f453, 0f00000000;
	fma.rn.f32 	%f456, %f454, %f448, 0f3F800000;
	fma.rn.f32 	%f457, %f447, 0f40490FDB, %f455;
	and.b32  	%r378, %r377, 1;
	setp.eq.b32 	%p126, %r378, 1;
	selp.f32 	%f458, %f456, %f457, %p126;
	selp.f32 	%f459, %f457, %f456, %p126;
	and.b32  	%r379, %r377, 2;
	setp.eq.s32 	%p127, %r379, 0;
	neg.f32 	%f460, %f458;
	selp.f32 	%f461, %f458, %f460, %p127;
	add.s32 	%r380, %r377, 1;
	and.b32  	%r381, %r380, 2;
	setp.eq.s32 	%p128, %r381, 0;
	mov.f32 	%f462, 0f00000000;
	sub.f32 	%f463, %f462, %f459;
	selp.f32 	%f464, %f459, %f463, %p128;
	cvt.rzi.f32.f32 	%f465, %f750;
	setp.eq.f32 	%p129, %f465, %f750;
	mul.f32 	%f466, %f750, 0f00000000;
	selp.f32 	%f757, %f466, %f461, %p129;
	abs.f32 	%f467, %f750;
	setp.gt.f32 	%p130, %f467, 0f4B800000;
	add.f32 	%f468, %f757, 0f3F800000;
	selp.f32 	%f752, %f468, %f464, %p130;
$L__BB0_74:                             // %L679
	and.b32  	%r42, %r264, 2;
	setp.eq.s32 	%p131, %r42, 0;
	mov.f32 	%f83, %f746;
	mov.f32 	%f85, %f752;
	@%p131 bra 	$L__BB0_76;
// %bb.75:                              // %L688
	neg.f32 	%f85, %f757;
	neg.f32 	%f83, %f755;
	mov.f32 	%f755, %f746;
	mov.f32 	%f757, %f752;
$L__BB0_76:                             // %L690
	@%p26 bra 	$L__BB0_192;
// %bb.77:
	@%p297 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_78;
$L__BB0_188:
	mov.b32 	%r159, %f788;
	and.b32  	%r388, %r159, 8388607;
	or.b32  	%r3007, %r388, 1065353216;
	mov.b32 	%f787, %r3007;
	add.s32 	%r389, %r159, -1073741824;
	and.b32  	%r3008, %r389, -8388608;
	setp.eq.s32 	%p139, %r3008, 0;
	@%p139 bra 	$L__BB0_191;
// %bb.189:                             // %__nv_fmaf_rn.exit4.i.i.i2114.preheader
	mov.f32 	%f478, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f477,%f478;
	// end inline asm
$L__BB0_190:                            // %__nv_fmaf_rn.exit4.i.i.i2114
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r390, %r3008, 192937984;
	add.s32 	%r391, %r3007, %r390;
	mov.b32 	%f479, %r391;
	mul.f32 	%f480, %f477, %f479;
	sub.f32 	%f481, %f479, %f480;
	fma.rn.f32 	%f482, %f481, %f477, %f480;
	sub.f32 	%f483, %f479, %f482;
	fma.rz.f32 	%f484, %f483, %f477, %f482;
	cvt.rzi.f32.f32 	%f485, %f484;
	sub.f32 	%f787, %f479, %f485;
	sub.s32 	%r3008, %r3008, %r390;
	mov.b32 	%r3007, %f787;
	setp.ne.s32 	%p140, %r3008, 0;
	setp.ne.s32 	%p141, %r3007, 0;
	and.pred  	%p142, %p140, %p141;
	@%p142 bra 	$L__BB0_190;
$L__BB0_191:                            // %__internal_fmodf_slowpath_mod.exit.i.i2116
	setp.gt.u32 	%p143, %r159, 2139095039;
	selp.f32 	%f486, 0f7FFFFFFF, 0f4B800000, %p143;
	mul.f32 	%f487, %f787, 0f34000000;
	mul.f32 	%f788, %f486, %f487;
	bra.uni 	$L__BB0_192;
$L__BB0_78:                             // %__nv_fast_fdividef.exit.i.i.i2093
	mov.f32 	%f469, 0f40000000;
	div.approx.f32 	%f470, %f788, %f469;
	cvt.rzi.f32.f32 	%f786, %f470;
	fma.rn.f32 	%f189, %f786, 0fC0000000, %f788;
	mov.b32 	%r158, %f189;
	setp.lt.u32 	%p134, %r158, 1073741824;
	@%p134 bra 	$L__BB0_187;
// %bb.79:
	setp.lt.u32 	%p135, %r158, -2147483647;
	@%p135 bra 	$L__BB0_185;
// %bb.80:
	add.f32 	%f475, %f786, 0fBF800000;
	setp.lt.f32 	%p138, %f189, 0fC0000000;
	add.f32 	%f476, %f475, 0fBF800000;
	selp.f32 	%f786, %f476, %f475, %p138;
	bra.uni 	$L__BB0_187;
$L__BB0_185:
	add.f32 	%f786, %f786, 0f3F800000;
	setp.ltu.f32 	%p136, %f189, 0f40800000;
	@%p136 bra 	$L__BB0_187;
// %bb.186:                             // %__nv_fmaf_rn.exit.i.i.i2097
	add.f32 	%f471, %f786, 0f3F800000;
	fma.rn.f32 	%f473, %f469, 0fC0400000, %f189;
	setp.ge.f32 	%p137, %f473, 0f00000000;
	add.f32 	%f474, %f471, 0f3F800000;
	selp.f32 	%f786, %f474, %f471, %p137;
$L__BB0_187:                            // %__internal_fmodf_fastpath_quot.exit.i.i2100
	fma.rn.f32 	%f788, %f786, 0fC0000000, %f788;
$L__BB0_192:                            // %__internal_fmodf_kernel.exit.i2119
	abs.f32 	%f488, %f788;
	setp.gtu.f32 	%p144, %f488, 0f7F800000;
	@%p144 bra 	$L__BB0_194;
// %bb.193:
	mov.b32 	%r392, %f788;
	or.b32  	%r393, %r152, %r392;
	mov.b32 	%f788, %r393;
$L__BB0_194:                            // %__nv_fmodf.exit2120
	mov.f32 	%f512, 0f00000000;
	mov.f32 	%f521, 0f41000000;
	div.approx.f32 	%f203, %f512, %f521;
	abs.f32 	%f760, %f203;
	setp.lt.f32 	%p152, %f760, 0f40000000;
	@%p152 bra 	$L__BB0_92;
// %bb.81:
	setp.gtu.f32 	%p153, %f760, 0f4B800000;
	@%p153 bra 	$L__BB0_88;
	bra.uni 	$L__BB0_82;
$L__BB0_88:
	mov.b32 	%r46, %f760;
	and.b32  	%r408, %r46, 8388607;
	or.b32  	%r2963, %r408, 1065353216;
	mov.b32 	%f759, %r2963;
	add.s32 	%r409, %r46, -1073741824;
	and.b32  	%r2964, %r409, -8388608;
	setp.eq.s32 	%p159, %r2964, 0;
	@%p159 bra 	$L__BB0_91;
// %bb.89:                              // %__nv_fmaf_rn.exit4.i.i.i2145.preheader
	mov.f32 	%f531, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f530,%f531;
	// end inline asm
$L__BB0_90:                             // %__nv_fmaf_rn.exit4.i.i.i2145
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r410, %r2964, 192937984;
	add.s32 	%r411, %r2963, %r410;
	mov.b32 	%f532, %r411;
	mul.f32 	%f533, %f530, %f532;
	sub.f32 	%f534, %f532, %f533;
	fma.rn.f32 	%f535, %f534, %f530, %f533;
	sub.f32 	%f536, %f532, %f535;
	fma.rz.f32 	%f537, %f536, %f530, %f535;
	cvt.rzi.f32.f32 	%f538, %f537;
	sub.f32 	%f759, %f532, %f538;
	sub.s32 	%r2964, %r2964, %r410;
	mov.b32 	%r2963, %f759;
	setp.ne.s32 	%p160, %r2964, 0;
	setp.ne.s32 	%p161, %r2963, 0;
	and.pred  	%p162, %p160, %p161;
	@%p162 bra 	$L__BB0_90;
$L__BB0_91:                             // %__internal_fmodf_slowpath_mod.exit.i.i2147
	setp.gt.u32 	%p163, %r46, 2139095039;
	selp.f32 	%f539, 0f7FFFFFFF, 0f4B800000, %p163;
	mul.f32 	%f540, %f759, 0f34000000;
	mul.f32 	%f760, %f539, %f540;
	bra.uni 	$L__BB0_92;
$L__BB0_82:                             // %__nv_fast_fdividef.exit.i.i.i2124
	mov.f32 	%f522, 0f40000000;
	div.approx.f32 	%f523, %f760, %f522;
	cvt.rzi.f32.f32 	%f758, %f523;
	fma.rn.f32 	%f88, %f758, 0fC0000000, %f760;
	mov.b32 	%r45, %f88;
	setp.lt.u32 	%p154, %r45, 1073741824;
	@%p154 bra 	$L__BB0_87;
// %bb.83:
	setp.lt.u32 	%p155, %r45, -2147483647;
	@%p155 bra 	$L__BB0_85;
// %bb.84:
	add.f32 	%f528, %f758, 0fBF800000;
	setp.lt.f32 	%p158, %f88, 0fC0000000;
	add.f32 	%f529, %f528, 0fBF800000;
	selp.f32 	%f758, %f529, %f528, %p158;
	bra.uni 	$L__BB0_87;
$L__BB0_85:
	add.f32 	%f758, %f758, 0f3F800000;
	setp.ltu.f32 	%p156, %f88, 0f40800000;
	@%p156 bra 	$L__BB0_87;
// %bb.86:                              // %__nv_fmaf_rn.exit.i.i.i2128
	add.f32 	%f524, %f758, 0f3F800000;
	fma.rn.f32 	%f526, %f522, 0fC0400000, %f88;
	setp.ge.f32 	%p157, %f526, 0f00000000;
	add.f32 	%f527, %f524, 0f3F800000;
	selp.f32 	%f758, %f527, %f524, %p157;
$L__BB0_87:                             // %__internal_fmodf_fastpath_quot.exit.i.i2131
	fma.rn.f32 	%f760, %f758, 0fC0000000, %f760;
$L__BB0_92:                             // %__internal_fmodf_kernel.exit.i2150
	abs.f32 	%f541, %f760;
	setp.gtu.f32 	%p164, %f541, 0f7F800000;
	@%p164 bra 	$L__BB0_94;
// %bb.93:
	mov.b32 	%r412, %f203;
	and.b32  	%r413, %r412, -2147483648;
	mov.b32 	%r414, %f760;
	or.b32  	%r415, %r413, %r414;
	mov.b32 	%f760, %r415;
$L__BB0_94:                             // %__nv_fmodf.exit2151
	cvt.rn.f32.s32 	%f572, %r143;
	div.approx.f32 	%f104, %f572, %f521;
	abs.f32 	%f764, %f104;
	setp.lt.f32 	%p172, %f764, 0f40000000;
	@%p172 bra 	$L__BB0_106;
// %bb.95:
	setp.gtu.f32 	%p173, %f764, 0f4B800000;
	@%p173 bra 	$L__BB0_102;
	bra.uni 	$L__BB0_96;
$L__BB0_102:
	mov.b32 	%r54, %f764;
	and.b32  	%r424, %r54, 8388607;
	or.b32  	%r2965, %r424, 1065353216;
	mov.b32 	%f763, %r2965;
	add.s32 	%r425, %r54, -1073741824;
	and.b32  	%r2966, %r425, -8388608;
	setp.eq.s32 	%p179, %r2966, 0;
	@%p179 bra 	$L__BB0_105;
// %bb.103:                             // %__nv_fmaf_rn.exit4.i.i.i2176.preheader
	mov.f32 	%f583, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f582,%f583;
	// end inline asm
$L__BB0_104:                            // %__nv_fmaf_rn.exit4.i.i.i2176
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r426, %r2966, 192937984;
	add.s32 	%r427, %r2965, %r426;
	mov.b32 	%f584, %r427;
	mul.f32 	%f585, %f582, %f584;
	sub.f32 	%f586, %f584, %f585;
	fma.rn.f32 	%f587, %f586, %f582, %f585;
	sub.f32 	%f588, %f584, %f587;
	fma.rz.f32 	%f589, %f588, %f582, %f587;
	cvt.rzi.f32.f32 	%f590, %f589;
	sub.f32 	%f763, %f584, %f590;
	sub.s32 	%r2966, %r2966, %r426;
	mov.b32 	%r2965, %f763;
	setp.ne.s32 	%p180, %r2966, 0;
	setp.ne.s32 	%p181, %r2965, 0;
	and.pred  	%p182, %p180, %p181;
	@%p182 bra 	$L__BB0_104;
$L__BB0_105:                            // %__internal_fmodf_slowpath_mod.exit.i.i2178
	setp.gt.u32 	%p183, %r54, 2139095039;
	selp.f32 	%f591, 0f7FFFFFFF, 0f4B800000, %p183;
	mul.f32 	%f592, %f763, 0f34000000;
	mul.f32 	%f764, %f591, %f592;
	bra.uni 	$L__BB0_106;
$L__BB0_96:                             // %__nv_fast_fdividef.exit.i.i.i2155
	mov.f32 	%f574, 0f40000000;
	div.approx.f32 	%f575, %f764, %f574;
	cvt.rzi.f32.f32 	%f762, %f575;
	fma.rn.f32 	%f107, %f762, 0fC0000000, %f764;
	mov.b32 	%r53, %f107;
	setp.lt.u32 	%p174, %r53, 1073741824;
	@%p174 bra 	$L__BB0_101;
// %bb.97:
	setp.lt.u32 	%p175, %r53, -2147483647;
	@%p175 bra 	$L__BB0_99;
// %bb.98:
	add.f32 	%f580, %f762, 0fBF800000;
	setp.lt.f32 	%p178, %f107, 0fC0000000;
	add.f32 	%f581, %f580, 0fBF800000;
	selp.f32 	%f762, %f581, %f580, %p178;
	bra.uni 	$L__BB0_101;
$L__BB0_99:
	add.f32 	%f762, %f762, 0f3F800000;
	setp.ltu.f32 	%p176, %f107, 0f40800000;
	@%p176 bra 	$L__BB0_101;
// %bb.100:                             // %__nv_fmaf_rn.exit.i.i.i2159
	add.f32 	%f576, %f762, 0f3F800000;
	fma.rn.f32 	%f578, %f574, 0fC0400000, %f107;
	setp.ge.f32 	%p177, %f578, 0f00000000;
	add.f32 	%f579, %f576, 0f3F800000;
	selp.f32 	%f762, %f579, %f576, %p177;
$L__BB0_101:                            // %__internal_fmodf_fastpath_quot.exit.i.i2162
	fma.rn.f32 	%f764, %f762, 0fC0000000, %f764;
$L__BB0_106:                            // %__internal_fmodf_kernel.exit.i2181
	abs.f32 	%f593, %f764;
	setp.gtu.f32 	%p184, %f593, 0f7F800000;
	@%p184 bra 	$L__BB0_108;
// %bb.107:
	mov.b32 	%r428, %f104;
	and.b32  	%r429, %r428, -2147483648;
	mov.b32 	%r430, %f764;
	or.b32  	%r431, %r429, %r430;
	mov.b32 	%f764, %r431;
$L__BB0_108:                            // %__nv_fmodf.exit2182
	and.b32  	%r64, %r264, 1;
	shr.u32 	%r65, %r264, 4;
	setp.ne.s32 	%p192, %r64, %r65;
	mov.f32 	%f770, %f512;
	mov.f32 	%f779, %f512;
	@%p192 bra 	$L__BB0_124;
// %bb.109:                             // %L895
	mov.f32 	%f626, 0f3F800000;
	mov.f32 	%f627, 0f00000000;
	div.approx.f32 	%f121, %f627, %f626;
	abs.f32 	%f768, %f121;
	setp.lt.f32 	%p193, %f768, 0f40000000;
	@%p193 bra 	$L__BB0_121;
// %bb.110:
	setp.gtu.f32 	%p194, %f768, 0f4B800000;
	@%p194 bra 	$L__BB0_117;
	bra.uni 	$L__BB0_111;
$L__BB0_117:
	mov.b32 	%r67, %f768;
	and.b32  	%r446, %r67, 8388607;
	or.b32  	%r2967, %r446, 1065353216;
	mov.b32 	%f767, %r2967;
	add.s32 	%r447, %r67, -1073741824;
	and.b32  	%r2968, %r447, -8388608;
	setp.eq.s32 	%p200, %r2968, 0;
	@%p200 bra 	$L__BB0_120;
// %bb.118:                             // %__nv_fmaf_rn.exit4.i.i.i2207.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f636,%f626;
	// end inline asm
$L__BB0_119:                            // %__nv_fmaf_rn.exit4.i.i.i2207
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r448, %r2968, 192937984;
	add.s32 	%r449, %r2967, %r448;
	mov.b32 	%f638, %r449;
	mul.f32 	%f639, %f636, %f638;
	sub.f32 	%f640, %f638, %f639;
	fma.rn.f32 	%f641, %f640, %f636, %f639;
	sub.f32 	%f642, %f638, %f641;
	fma.rz.f32 	%f643, %f642, %f636, %f641;
	cvt.rzi.f32.f32 	%f644, %f643;
	sub.f32 	%f767, %f638, %f644;
	sub.s32 	%r2968, %r2968, %r448;
	mov.b32 	%r2967, %f767;
	setp.ne.s32 	%p201, %r2968, 0;
	setp.ne.s32 	%p202, %r2967, 0;
	and.pred  	%p203, %p201, %p202;
	@%p203 bra 	$L__BB0_119;
$L__BB0_120:                            // %__internal_fmodf_slowpath_mod.exit.i.i2209
	setp.gt.u32 	%p204, %r67, 2139095039;
	selp.f32 	%f645, 0f7FFFFFFF, 0f4B800000, %p204;
	mul.f32 	%f646, %f767, 0f34000000;
	mul.f32 	%f768, %f645, %f646;
	bra.uni 	$L__BB0_121;
$L__BB0_111:                            // %__nv_fast_fdividef.exit.i.i.i2186
	mov.f32 	%f628, 0f40000000;
	div.approx.f32 	%f629, %f768, %f628;
	cvt.rzi.f32.f32 	%f766, %f629;
	fma.rn.f32 	%f124, %f766, 0fC0000000, %f768;
	mov.b32 	%r66, %f124;
	setp.lt.u32 	%p195, %r66, 1073741824;
	@%p195 bra 	$L__BB0_116;
// %bb.112:
	setp.lt.u32 	%p196, %r66, -2147483647;
	@%p196 bra 	$L__BB0_114;
// %bb.113:
	add.f32 	%f634, %f766, 0fBF800000;
	setp.lt.f32 	%p199, %f124, 0fC0000000;
	add.f32 	%f635, %f634, 0fBF800000;
	selp.f32 	%f766, %f635, %f634, %p199;
	bra.uni 	$L__BB0_116;
$L__BB0_114:
	add.f32 	%f766, %f766, 0f3F800000;
	setp.ltu.f32 	%p197, %f124, 0f40800000;
	@%p197 bra 	$L__BB0_116;
// %bb.115:                             // %__nv_fmaf_rn.exit.i.i.i2190
	add.f32 	%f630, %f766, 0f3F800000;
	fma.rn.f32 	%f632, %f628, 0fC0400000, %f124;
	setp.ge.f32 	%p198, %f632, 0f00000000;
	add.f32 	%f633, %f630, 0f3F800000;
	selp.f32 	%f766, %f633, %f630, %p198;
$L__BB0_116:                            // %__internal_fmodf_fastpath_quot.exit.i.i2193
	fma.rn.f32 	%f768, %f766, 0fC0000000, %f768;
$L__BB0_121:                            // %__internal_fmodf_kernel.exit.i2212
	abs.f32 	%f647, %f768;
	setp.gtu.f32 	%p205, %f647, 0f7F800000;
	@%p205 bra 	$L__BB0_123;
// %bb.122:
	mov.b32 	%r450, %f121;
	and.b32  	%r451, %r450, -2147483648;
	mov.b32 	%r452, %f768;
	or.b32  	%r453, %r451, %r452;
	mov.b32 	%f768, %r453;
$L__BB0_123:                            // %__nv_fmodf.exit2213
	add.f32 	%f648, %f768, %f768;
	mov.b32 	%r454, %f648;
	and.b32  	%r455, %r454, -2147483648;
	or.b32  	%r456, %r455, 1056964608;
	mov.b32 	%f649, %r456;
	add.f32 	%f650, %f648, %f649;
	cvt.rzi.f32.f32 	%f651, %f650;
	abs.f32 	%f652, %f648;
	setp.gt.f32 	%p206, %f652, 0f4B000000;
	selp.f32 	%f653, %f648, %f651, %p206;
	cvt.rzi.f32.f32 	%f654, %f648;
	setp.lt.f32 	%p207, %f652, 0f3F000000;
	selp.f32 	%f655, %f654, %f653, %p207;
	cvt.rzi.s32.f32 	%r457, %f655;
	fma.rn.f32 	%f656, %f655, 0fBF000000, %f768;
	mul.f32 	%f657, %f656, %f656;
	fma.rn.f32 	%f658, %f657, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f659, %f657, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f660, %f658, %f657, 0fC0A55DF6;
	fma.rn.f32 	%f661, %f659, %f657, 0f4081E0CF;
	fma.rn.f32 	%f662, %f657, %f656, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f657, 0fC09DE9E6;
	fma.rn.f32 	%f664, %f660, %f662, 0f00000000;
	fma.rn.f32 	%f665, %f663, %f657, 0f3F800000;
	fma.rn.f32 	%f666, %f656, 0f40490FDB, %f664;
	and.b32  	%r458, %r457, 1;
	setp.eq.b32 	%p208, %r458, 1;
	selp.f32 	%f667, %f665, %f666, %p208;
	selp.f32 	%f668, %f666, %f665, %p208;
	and.b32  	%r459, %r457, 2;
	setp.eq.s32 	%p209, %r459, 0;
	neg.f32 	%f669, %f667;
	selp.f32 	%f670, %f667, %f669, %p209;
	add.s32 	%r460, %r457, 1;
	and.b32  	%r461, %r460, 2;
	setp.eq.s32 	%p210, %r461, 0;
	sub.f32 	%f672, %f627, %f668;
	selp.f32 	%f673, %f668, %f672, %p210;
	cvt.rzi.f32.f32 	%f674, %f768;
	setp.eq.f32 	%p211, %f674, %f768;
	mul.f32 	%f675, %f768, 0f00000000;
	selp.f32 	%f779, %f675, %f670, %p211;
	abs.f32 	%f676, %f768;
	setp.gt.f32 	%p212, %f676, 0f4B800000;
	add.f32 	%f677, %f779, 0f3F800000;
	selp.f32 	%f770, %f677, %f673, %p212;
$L__BB0_124:                            // %L934
	and.b32  	%r63, %r143, 1;
	mov.f32 	%f776, %f512;
	mov.f32 	%f781, %f512;
	@%p192 bra 	$L__BB0_140;
// %bb.125:                             // %L937
	cvt.rn.f32.s32 	%f679, %r63;
	mov.f32 	%f680, 0f3F800000;
	div.approx.f32 	%f142, %f679, %f680;
	abs.f32 	%f774, %f142;
	setp.lt.f32 	%p214, %f774, 0f40000000;
	@%p214 bra 	$L__BB0_137;
// %bb.126:
	setp.gtu.f32 	%p215, %f774, 0f4B800000;
	@%p215 bra 	$L__BB0_133;
	bra.uni 	$L__BB0_127;
$L__BB0_133:
	mov.b32 	%r75, %f774;
	and.b32  	%r462, %r75, 8388607;
	or.b32  	%r2969, %r462, 1065353216;
	mov.b32 	%f773, %r2969;
	add.s32 	%r463, %r75, -1073741824;
	and.b32  	%r2970, %r463, -8388608;
	setp.eq.s32 	%p221, %r2970, 0;
	@%p221 bra 	$L__BB0_136;
// %bb.134:                             // %__nv_fmaf_rn.exit4.i.i.i2238.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f689,%f680;
	// end inline asm
$L__BB0_135:                            // %__nv_fmaf_rn.exit4.i.i.i2238
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r464, %r2970, 192937984;
	add.s32 	%r465, %r2969, %r464;
	mov.b32 	%f691, %r465;
	mul.f32 	%f692, %f689, %f691;
	sub.f32 	%f693, %f691, %f692;
	fma.rn.f32 	%f694, %f693, %f689, %f692;
	sub.f32 	%f695, %f691, %f694;
	fma.rz.f32 	%f696, %f695, %f689, %f694;
	cvt.rzi.f32.f32 	%f697, %f696;
	sub.f32 	%f773, %f691, %f697;
	sub.s32 	%r2970, %r2970, %r464;
	mov.b32 	%r2969, %f773;
	setp.ne.s32 	%p222, %r2970, 0;
	setp.ne.s32 	%p223, %r2969, 0;
	and.pred  	%p224, %p222, %p223;
	@%p224 bra 	$L__BB0_135;
$L__BB0_136:                            // %__internal_fmodf_slowpath_mod.exit.i.i2240
	setp.gt.u32 	%p225, %r75, 2139095039;
	selp.f32 	%f698, 0f7FFFFFFF, 0f4B800000, %p225;
	mul.f32 	%f699, %f773, 0f34000000;
	mul.f32 	%f774, %f698, %f699;
	bra.uni 	$L__BB0_137;
$L__BB0_127:                            // %__nv_fast_fdividef.exit.i.i.i2217
	mov.f32 	%f681, 0f40000000;
	div.approx.f32 	%f682, %f774, %f681;
	cvt.rzi.f32.f32 	%f772, %f682;
	fma.rn.f32 	%f145, %f772, 0fC0000000, %f774;
	mov.b32 	%r74, %f145;
	setp.lt.u32 	%p216, %r74, 1073741824;
	@%p216 bra 	$L__BB0_132;
// %bb.128:
	setp.lt.u32 	%p217, %r74, -2147483647;
	@%p217 bra 	$L__BB0_130;
// %bb.129:
	add.f32 	%f687, %f772, 0fBF800000;
	setp.lt.f32 	%p220, %f145, 0fC0000000;
	add.f32 	%f688, %f687, 0fBF800000;
	selp.f32 	%f772, %f688, %f687, %p220;
	bra.uni 	$L__BB0_132;
$L__BB0_130:
	add.f32 	%f772, %f772, 0f3F800000;
	setp.ltu.f32 	%p218, %f145, 0f40800000;
	@%p218 bra 	$L__BB0_132;
// %bb.131:                             // %__nv_fmaf_rn.exit.i.i.i2221
	add.f32 	%f683, %f772, 0f3F800000;
	fma.rn.f32 	%f685, %f681, 0fC0400000, %f145;
	setp.ge.f32 	%p219, %f685, 0f00000000;
	add.f32 	%f686, %f683, 0f3F800000;
	selp.f32 	%f772, %f686, %f683, %p219;
$L__BB0_132:                            // %__internal_fmodf_fastpath_quot.exit.i.i2224
	fma.rn.f32 	%f774, %f772, 0fC0000000, %f774;
$L__BB0_137:                            // %__internal_fmodf_kernel.exit.i2243
	abs.f32 	%f700, %f774;
	setp.gtu.f32 	%p226, %f700, 0f7F800000;
	@%p226 bra 	$L__BB0_139;
// %bb.138:
	mov.b32 	%r466, %f142;
	and.b32  	%r467, %r466, -2147483648;
	mov.b32 	%r468, %f774;
	or.b32  	%r469, %r467, %r468;
	mov.b32 	%f774, %r469;
$L__BB0_139:                            // %__nv_fmodf.exit2244
	add.f32 	%f701, %f774, %f774;
	mov.b32 	%r470, %f701;
	and.b32  	%r471, %r470, -2147483648;
	or.b32  	%r472, %r471, 1056964608;
	mov.b32 	%f702, %r472;
	add.f32 	%f703, %f701, %f702;
	cvt.rzi.f32.f32 	%f704, %f703;
	abs.f32 	%f705, %f701;
	setp.gt.f32 	%p227, %f705, 0f4B000000;
	selp.f32 	%f706, %f701, %f704, %p227;
	cvt.rzi.f32.f32 	%f707, %f701;
	setp.lt.f32 	%p228, %f705, 0f3F000000;
	selp.f32 	%f708, %f707, %f706, %p228;
	cvt.rzi.s32.f32 	%r473, %f708;
	fma.rn.f32 	%f709, %f708, 0fBF000000, %f774;
	mul.f32 	%f710, %f709, %f709;
	fma.rn.f32 	%f711, %f710, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f712, %f710, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f713, %f711, %f710, 0fC0A55DF6;
	fma.rn.f32 	%f714, %f712, %f710, 0f4081E0CF;
	fma.rn.f32 	%f715, %f710, %f709, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f710, 0fC09DE9E6;
	fma.rn.f32 	%f717, %f713, %f715, 0f00000000;
	fma.rn.f32 	%f718, %f716, %f710, 0f3F800000;
	fma.rn.f32 	%f719, %f709, 0f40490FDB, %f717;
	and.b32  	%r474, %r473, 1;
	setp.eq.b32 	%p229, %r474, 1;
	selp.f32 	%f720, %f718, %f719, %p229;
	selp.f32 	%f721, %f719, %f718, %p229;
	and.b32  	%r475, %r473, 2;
	setp.eq.s32 	%p230, %r475, 0;
	neg.f32 	%f722, %f720;
	selp.f32 	%f723, %f720, %f722, %p230;
	add.s32 	%r476, %r473, 1;
	and.b32  	%r477, %r476, 2;
	setp.eq.s32 	%p231, %r477, 0;
	mov.f32 	%f724, 0f00000000;
	sub.f32 	%f725, %f724, %f721;
	selp.f32 	%f726, %f721, %f725, %p231;
	cvt.rzi.f32.f32 	%f727, %f774;
	setp.eq.f32 	%p232, %f727, %f774;
	mul.f32 	%f728, %f774, 0f00000000;
	selp.f32 	%f781, %f728, %f723, %p232;
	abs.f32 	%f729, %f774;
	setp.gt.f32 	%p233, %f729, 0f4B800000;
	add.f32 	%f730, %f781, 0f3F800000;
	selp.f32 	%f776, %f730, %f726, %p233;
$L__BB0_140:                            // %L971
	mov.f32 	%f165, %f770;
	mov.f32 	%f167, %f776;
	@%p131 bra 	$L__BB0_142;
// %bb.141:                             // %L980
	neg.f32 	%f167, %f781;
	neg.f32 	%f165, %f779;
	mov.f32 	%f779, %f770;
	mov.f32 	%f781, %f776;
$L__BB0_142:                            // %L982
	setp.gt.u32 	%p235, %r264, 15;
	mov.u32 	%r168, 999999999;
	@%p235 bra 	$L__BB0_196;
// %bb.143:                             // %L1012
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	mad.lo.s32 	%r485, %r264, 6, %r2;
	cvt.u16.u32 	%rs15, %r485;
	and.b16  	%rs16, %rs15, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 14;
	mul.lo.s16 	%rs19, %rs18, 96;
	sub.s16 	%rs20, %rs15, %rs19;
	cvt.u32.u16 	%r486, %rs20;
	and.b32  	%r487, %r486, 255;
	mul.wide.u32 	%rd21, %r487, 4;
	add.s64 	%rd22, %rd1, %rd21;
	ld.global.u32 	%r488, [%rd22];
	shl.b32 	%r489, %r488, 16;
	cvt.s32.s16 	%r84, %r488;
	shr.s32 	%r85, %r488, 16;
	or.b32  	%r490, %r489, 65535;
	setp.lt.u32 	%p236, %r490, 589823;
	setp.lt.u32 	%p237, %r488, 786432;
	and.pred  	%p238, %p236, %p237;
	@%p238 bra 	$L__BB0_195;
	bra.uni 	$L__BB0_144;
$L__BB0_195:                            // %L1254
	mul.lo.s32 	%r494, %r85, 290;
	mad.lo.s32 	%r168, %r84, 33, %r494;
$L__BB0_196:                            // %pass537
	add.f32 	%f227, %f784, %f784;
	mov.b32 	%r292, %f227;
	add.f32 	%f489, %f788, %f788;
	and.b32  	%r293, %r292, -2147483648;
	add.f32 	%f282, %f734, %f734;
	mov.b32 	%r400, %f489;
	or.b32  	%r294, %r293, 1056964608;
	mov.b32 	%r309, %f282;
	and.b32  	%r401, %r400, -2147483648;
	add.f32 	%f542, %f760, %f760;
	add.f32 	%f595, %f764, %f764;
	mov.b32 	%f228, %r294;
	and.b32  	%r310, %r309, -2147483648;
	or.b32  	%r402, %r401, 1056964608;
	mov.b32 	%r416, %f542;
	mov.b32 	%r438, %f595;
	add.f32 	%f229, %f227, %f228;
	abs.f32 	%f231, %f227;
	or.b32  	%r311, %r310, 1056964608;
	mov.b32 	%f490, %r402;
	and.b32  	%r417, %r416, -2147483648;
	and.b32  	%r439, %r438, -2147483648;
	cvt.rzi.f32.f32 	%f230, %f229;
	setp.gt.f32 	%p39, %f231, 0f4B000000;
	mov.b32 	%f283, %r311;
	add.f32 	%f491, %f489, %f490;
	abs.f32 	%f493, %f489;
	or.b32  	%r418, %r417, 1056964608;
	or.b32  	%r440, %r439, 1056964608;
	selp.f32 	%f232, %f227, %f230, %p39;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p40, %f231, 0f3F000000;
	add.f32 	%f284, %f282, %f283;
	abs.f32 	%f286, %f282;
	cvt.rzi.f32.f32 	%f492, %f491;
	setp.gt.f32 	%p145, %f493, 0f4B000000;
	mov.b32 	%f543, %r418;
	mov.b32 	%f596, %r440;
	selp.f32 	%f234, %f233, %f232, %p40;
	cvt.rzi.f32.f32 	%f285, %f284;
	setp.gt.f32 	%p59, %f286, 0f4B000000;
	selp.f32 	%f494, %f489, %f492, %p145;
	cvt.rzi.f32.f32 	%f495, %f489;
	setp.lt.f32 	%p146, %f493, 0f3F000000;
	add.f32 	%f544, %f542, %f543;
	abs.f32 	%f546, %f542;
	add.f32 	%f597, %f595, %f596;
	abs.f32 	%f599, %f595;
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f784;
	selp.f32 	%f287, %f282, %f285, %p59;
	cvt.rzi.f32.f32 	%f288, %f282;
	setp.lt.f32 	%p60, %f286, 0f3F000000;
	selp.f32 	%f496, %f495, %f494, %p146;
	cvt.rzi.f32.f32 	%f545, %f544;
	setp.gt.f32 	%p165, %f546, 0f4B000000;
	cvt.rzi.f32.f32 	%f598, %f597;
	setp.gt.f32 	%p185, %f599, 0f4B000000;
	mul.f32 	%f236, %f235, %f235;
	selp.f32 	%f289, %f288, %f287, %p60;
	fma.rn.f32 	%f497, %f496, 0fBF000000, %f788;
	selp.f32 	%f547, %f542, %f545, %p165;
	cvt.rzi.f32.f32 	%f548, %f542;
	setp.lt.f32 	%p166, %f546, 0f3F000000;
	selp.f32 	%f600, %f595, %f598, %p185;
	cvt.rzi.f32.f32 	%f601, %f595;
	setp.lt.f32 	%p186, %f599, 0f3F000000;
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f290, %f289, 0fBF000000, %f734;
	mul.f32 	%f498, %f497, %f497;
	selp.f32 	%f549, %f548, %f547, %p166;
	selp.f32 	%f602, %f601, %f600, %p186;
	cvt.rzi.s32.f32 	%r295, %f234;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	mul.f32 	%f291, %f290, %f290;
	fma.rn.f32 	%f499, %f498, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f500, %f498, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f550, %f549, 0fBF000000, %f760;
	fma.rn.f32 	%f603, %f602, 0fBF000000, %f764;
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r296, %r295, 1;
	fma.rn.f32 	%f292, %f291, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f293, %f291, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r403, %f496;
	fma.rn.f32 	%f501, %f499, %f498, 0fC0A55DF6;
	fma.rn.f32 	%f502, %f500, %f498, 0f4081E0CF;
	fma.rn.f32 	%f503, %f498, %f497, 0f00000000;
	mul.f32 	%f551, %f550, %f550;
	mul.f32 	%f604, %f603, %f603;
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p41, %r296, 1;
	cvt.rzi.s32.f32 	%r312, %f289;
	fma.rn.f32 	%f294, %f292, %f291, 0fC0A55DF6;
	fma.rn.f32 	%f295, %f293, %f291, 0f4081E0CF;
	fma.rn.f32 	%f296, %f291, %f290, 0f00000000;
	fma.rn.f32 	%f504, %f502, %f498, 0fC09DE9E6;
	fma.rn.f32 	%f505, %f501, %f503, 0f00000000;
	and.b32  	%r404, %r403, 1;
	fma.rn.f32 	%f552, %f551, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f553, %f551, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f604, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f606, %f604, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f246, %f244, %f245, %p41;
	and.b32  	%r297, %r295, 2;
	fma.rn.f32 	%f297, %f295, %f291, 0fC09DE9E6;
	fma.rn.f32 	%f298, %f294, %f296, 0f00000000;
	and.b32  	%r313, %r312, 1;
	fma.rn.f32 	%f506, %f504, %f498, 0f3F800000;
	fma.rn.f32 	%f507, %f497, 0f40490FDB, %f505;
	setp.eq.b32 	%p147, %r404, 1;
	cvt.rzi.s32.f32 	%r419, %f549;
	fma.rn.f32 	%f554, %f552, %f551, 0fC0A55DF6;
	fma.rn.f32 	%f555, %f553, %f551, 0f4081E0CF;
	fma.rn.f32 	%f556, %f551, %f550, 0f00000000;
	cvt.rzi.s32.f32 	%r441, %f602;
	fma.rn.f32 	%f607, %f605, %f604, 0fC0A55DF6;
	fma.rn.f32 	%f608, %f606, %f604, 0f4081E0CF;
	fma.rn.f32 	%f609, %f604, %f603, 0f00000000;
	setp.eq.s32 	%p42, %r297, 0;
	neg.f32 	%f248, %f246;
	add.s32 	%r298, %r295, 1;
	cvt.rzi.f32.f32 	%f253, %f784;
	fma.rn.f32 	%f299, %f297, %f291, 0f3F800000;
	fma.rn.f32 	%f300, %f290, 0f40490FDB, %f298;
	setp.eq.b32 	%p61, %r313, 1;
	selp.f32 	%f508, %f506, %f507, %p147;
	and.b32  	%r405, %r403, 2;
	fma.rn.f32 	%f557, %f555, %f551, 0fC09DE9E6;
	fma.rn.f32 	%f558, %f554, %f556, 0f00000000;
	and.b32  	%r420, %r419, 1;
	fma.rn.f32 	%f610, %f608, %f604, 0fC09DE9E6;
	fma.rn.f32 	%f611, %f607, %f609, 0f00000000;
	and.b32  	%r442, %r441, 1;
	selp.f32 	%f247, %f245, %f244, %p41;
	selp.f32 	%f249, %f246, %f248, %p42;
	and.b32  	%r299, %r298, 2;
	setp.eq.f32 	%p44, %f253, %f784;
	mul.f32 	%f254, %f784, 0f00000000;
	selp.f32 	%f301, %f299, %f300, %p61;
	and.b32  	%r314, %r312, 2;
	setp.eq.s32 	%p148, %r405, 0;
	neg.f32 	%f510, %f508;
	add.s32 	%r406, %r403, 1;
	cvt.rzi.f32.f32 	%f515, %f788;
	fma.rn.f32 	%f559, %f557, %f551, 0f3F800000;
	fma.rn.f32 	%f560, %f550, 0f40490FDB, %f558;
	setp.eq.b32 	%p167, %r420, 1;
	fma.rn.f32 	%f612, %f610, %f604, 0f3F800000;
	fma.rn.f32 	%f613, %f603, 0f40490FDB, %f611;
	setp.eq.b32 	%p187, %r442, 1;
	setp.eq.s32 	%p43, %r299, 0;
	sub.f32 	%f251, %f250, %f247;
	selp.f32 	%f255, %f254, %f249, %p44;
	abs.f32 	%f256, %f784;
	setp.eq.s32 	%p62, %r314, 0;
	neg.f32 	%f303, %f301;
	add.s32 	%r315, %r312, 1;
	cvt.rzi.f32.f32 	%f307, %f734;
	selp.f32 	%f509, %f507, %f506, %p147;
	selp.f32 	%f511, %f508, %f510, %p148;
	and.b32  	%r407, %r406, 2;
	setp.eq.f32 	%p150, %f515, %f788;
	mul.f32 	%f516, %f788, 0f00000000;
	selp.f32 	%f561, %f559, %f560, %p167;
	and.b32  	%r421, %r419, 2;
	selp.f32 	%f614, %f612, %f613, %p187;
	and.b32  	%r443, %r441, 2;
	selp.f32 	%f252, %f247, %f251, %p43;
	setp.gt.f32 	%p45, %f256, 0f4B800000;
	add.f32 	%f257, %f255, 0f3F800000;
	selp.f32 	%f302, %f300, %f299, %p61;
	selp.f32 	%f304, %f301, %f303, %p62;
	and.b32  	%r316, %r315, 2;
	setp.eq.f32 	%p64, %f307, %f734;
	mul.f32 	%f308, %f734, 0f00000000;
	setp.eq.s32 	%p149, %r407, 0;
	sub.f32 	%f513, %f512, %f509;
	selp.f32 	%f517, %f516, %f511, %p150;
	abs.f32 	%f518, %f788;
	setp.eq.s32 	%p168, %r421, 0;
	neg.f32 	%f563, %f561;
	add.s32 	%r422, %r419, 1;
	cvt.rzi.f32.f32 	%f568, %f760;
	setp.eq.s32 	%p188, %r443, 0;
	neg.f32 	%f616, %f614;
	add.s32 	%r444, %r441, 1;
	cvt.rzi.f32.f32 	%f620, %f764;
	selp.f32 	%f258, %f257, %f252, %p45;
	setp.eq.s32 	%p63, %r316, 0;
	sub.f32 	%f305, %f250, %f302;
	selp.f32 	%f16, %f308, %f304, %p64;
	abs.f32 	%f309, %f734;
	selp.f32 	%f514, %f509, %f513, %p149;
	setp.gt.f32 	%p151, %f518, 0f4B800000;
	add.f32 	%f519, %f517, 0f3F800000;
	selp.f32 	%f562, %f560, %f559, %p167;
	selp.f32 	%f564, %f561, %f563, %p168;
	and.b32  	%r423, %r422, 2;
	setp.eq.f32 	%p170, %f568, %f760;
	mul.f32 	%f569, %f760, 0f00000000;
	selp.f32 	%f615, %f613, %f612, %p187;
	selp.f32 	%f617, %f614, %f616, %p188;
	and.b32  	%r445, %r444, 2;
	setp.eq.f32 	%p190, %f620, %f764;
	mul.f32 	%f621, %f764, 0f00000000;
	mov.b32 	%r288, %f258;
	mov.b32 	%r291, %f255;
	selp.f32 	%f306, %f302, %f305, %p63;
	setp.gt.f32 	%p65, %f309, 0f4B800000;
	add.f32 	%f310, %f16, 0f3F800000;
	selp.f32 	%f520, %f519, %f514, %p151;
	setp.eq.s32 	%p169, %r423, 0;
	sub.f32 	%f566, %f512, %f562;
	selp.f32 	%f102, %f569, %f564, %p170;
	abs.f32 	%f570, %f760;
	setp.eq.s32 	%p189, %r445, 0;
	sub.f32 	%f618, %f512, %f615;
	selp.f32 	%f622, %f621, %f617, %p190;
	abs.f32 	%f623, %f764;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r287, %r291, -2147483648;
	selp.f32 	%f17, %f310, %f306, %p65;
	mov.b32 	%r396, %f520;
	mov.b32 	%r399, %f517;
	selp.f32 	%f567, %f562, %f566, %p169;
	setp.gt.f32 	%p171, %f570, 0f4B800000;
	add.f32 	%f571, %f102, 0f3F800000;
	selp.f32 	%f619, %f615, %f618, %p189;
	setp.gt.f32 	%p191, %f623, 0f4B800000;
	add.f32 	%f624, %f622, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r286, %r288, %r287;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r289, %r291, %r288;
	// end inline asm
	mov.b32 	%r339, %f17;
	mov.b32 	%r340, %f37;
	mov.b32 	%r342, %f16;
	mov.b32 	%r343, %f38;
	mov.b32 	%r383, %f83;
	mov.b32 	%r384, %f85;
	mov.b32 	%r386, %f755;
	mov.b32 	%r387, %f757;
	xor.b32  	%r395, %r399, -2147483648;
	selp.f32 	%f103, %f571, %f567, %p171;
	selp.f32 	%f625, %f624, %f619, %p191;
	// begin inline asm
	cvt.rn.f16x2.f32 %r338, %r340, %r339;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r341, %r343, %r342;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r382, %r384, %r383;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r385, %r387, %r386;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r394, %r396, %r395;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r397, %r399, %r396;
	// end inline asm
	mov.b32 	%r434, %f625;
	mov.b32 	%r433, %f103;
	mov.b32 	%r437, %f622;
	mov.b32 	%r436, %f102;
	// begin inline asm
	cvt.rn.f16x2.f32 %r432, %r434, %r433;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r435, %r437, %r436;
	// end inline asm
	mov.b32 	%r479, %f165;
	mov.b32 	%r480, %f167;
	// begin inline asm
	cvt.rn.f16x2.f32 %r478, %r480, %r479;
	// end inline asm
	mov.b32 	%r482, %f779;
	mov.b32 	%r483, %f781;
	// begin inline asm
	cvt.rn.f16x2.f32 %r481, %r483, %r482;
	// end inline asm
	shr.u32 	%r169, %r264, 3;
	bfe.u32 	%r496, %r264, 3, 1;
	shl.b32 	%r497, %r2, 1;
	and.b32  	%r498, %r497, 2;
	or.b32  	%r499, %r496, %r498;
	and.b32  	%r500, %r4, 127;
	mul.lo.s32 	%r501, %r500, 192;
	and.b32  	%r502, %r169, 2;
	or.b32  	%r170, %r502, %r63;
	cvt.u16.u32 	%rs23, %r170;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 9;
	mul.lo.s16 	%rs26, %rs25, 3;
	sub.s16 	%rs27, %rs23, %rs26;
	cvt.u32.u16 	%r503, %rs27;
	and.b32  	%r504, %r503, 255;
	and.b16  	%rs28, %rs27, 255;
	mul.wide.u16 	%r505, %rs28, 8;
	mul.lo.s32 	%r506, %r142, 24;
	add.s32 	%r507, %r506, %r501;
	or.b32  	%r508, %r507, %r499;
	add.s32 	%r509, %r508, %r505;
	mul.wide.u32 	%rd28, %r509, 4;
	add.s64 	%rd29, %rd2, %rd28;
	ld.global.u32 	%r171, [%rd29];
	cvt.u64.u32 	%rd30, %r505;
	cvt.u64.u32 	%rd31, %r499;
	cvt.u64.u32 	%rd32, %r506;
	cvt.u64.u32 	%rd33, %r501;
	add.s64 	%rd34, %rd33, %rd32;
	or.b64  	%rd35, %rd34, %rd31;
	add.s64 	%rd36, %rd35, %rd30;
	shl.b64 	%rd37, %rd36, 2;
	add.s64 	%rd38, %rd2, %rd37;
	ld.global.u32 	%r172, [%rd38+16];
	ld.global.u32 	%r173, [%rd38+384];
	ld.global.u32 	%r174, [%rd38+400];
	shl.b32 	%r510, %r259, 5;
	shl.b32 	%r511, %r264, 2;
	shl.b32 	%r512, %r4, 5;
	and.b32  	%r513, %r511, 28;
	shl.b32 	%r175, %r2, 2;
	or.b32  	%r514, %r513, %r512;
	add.s32 	%r176, %r514, %r510;
	and.b32  	%r177, %r264, 4;
	and.b32  	%r515, %r155, 8;
	shl.b32 	%r516, %r264, 4;
	or.b32  	%r517, %r515, %r516;
	bfe.u32 	%r518, %r517, 3, 3;
	mul.lo.s32 	%r178, %r518, 260;
	cvt.u16.u32 	%rs29, %r264;
	and.b16  	%rs30, %rs29, 255;
	mul.lo.s16 	%rs31, %rs30, 171;
	shr.u16 	%rs32, %rs31, 12;
	mul.lo.s16 	%rs33, %rs32, 24;
	sub.s16 	%rs34, %rs29, %rs33;
	cvt.u32.u16 	%r519, %rs34;
	and.b32  	%r179, %r519, 255;
	add.s32 	%r520, %r2, 6;
	shr.u32 	%r521, %r520, 3;
	add.s32 	%r522, %r3, 192;
	and.b32  	%r523, %r522, 224;
	mad.lo.s32 	%r180, %r521, 260, %r523;
	add.s32 	%r524, %r2, 12;
	shr.u32 	%r525, %r524, 3;
	add.s32 	%r526, %r3, 128;
	and.b32  	%r527, %r526, 224;
	mad.lo.s32 	%r181, %r525, 260, %r527;
	add.s32 	%r528, %r2, 18;
	shr.u32 	%r529, %r528, 3;
	add.s32 	%r530, %r3, 64;
	and.b32  	%r531, %r530, 224;
	mad.lo.s32 	%r182, %r529, 260, %r531;
	or.b32  	%r183, %r3, 780;
	add.s32 	%r532, %r2, 30;
	shr.u32 	%r533, %r532, 3;
	mad.lo.s32 	%r184, %r533, 260, %r523;
	add.s32 	%r534, %r2, 36;
	shr.u32 	%r535, %r534, 3;
	mad.lo.s32 	%r185, %r535, 260, %r527;
	add.s32 	%r536, %r2, 42;
	shr.u32 	%r537, %r536, 3;
	mad.lo.s32 	%r186, %r537, 260, %r531;
	or.b32  	%r187, %r3, 1560;
	add.s32 	%r538, %r2, 54;
	shr.u32 	%r539, %r538, 3;
	mad.lo.s32 	%r188, %r539, 260, %r523;
	add.s32 	%r540, %r2, 60;
	bfe.u32 	%r541, %r540, 3, 3;
	mad.lo.s32 	%r189, %r541, 260, %r527;
	shr.u32 	%r542, %r2, 1;
	cvt.u16.u32 	%rs35, %r542;
	and.b16  	%rs36, %rs35, 255;
	mul.lo.s16 	%rs37, %rs36, 171;
	shr.u16 	%rs38, %rs37, 9;
	mul.lo.s16 	%rs39, %rs38, 3;
	sub.s16 	%rs40, %rs35, %rs39;
	cvt.u32.u16 	%r543, %rs40;
	and.b32  	%r190, %r543, 255;
	mul.lo.s32 	%r544, %r142, 870;
	mad.lo.s32 	%r545, %r499, 33, %r544;
	mad.lo.s32 	%r191, %r504, 290, %r545;
	add.s32 	%r192, %r191, 132;
	setp.lt.u32 	%p239, %r264, 4;
	setp.eq.s32 	%p240, %r143, 1;
	setp.eq.s32 	%p241, %r143, 4;
	setp.eq.s32 	%p242, %r143, 5;
	shr.u32 	%r546, %r2, 2;
	mul.lo.s32 	%r547, %r546, 98;
	and.b32  	%r548, %r2, 1;
	neg.s32 	%r549, %r548;
	and.b32  	%r550, %r549, 392;
	and.b32  	%r551, %r155, 6;
	bfe.s32 	%r552, %r2, 1, 1;
	and.b32  	%r553, %r552, 196;
	bfe.s32 	%r554, %r264, 3, 1;
	and.b32  	%r555, %r554, 1576;
	or.b32  	%r556, %r547, %r63;
	add.s32 	%r557, %r556, %r551;
	mad.lo.s32 	%r558, %r65, 784, %r557;
	add.s32 	%r559, %r558, %r550;
	add.s32 	%r560, %r559, %r553;
	add.s32 	%r193, %r560, %r555;
	add.s32 	%r194, %r193, 8;
	mul.lo.s32 	%r561, %r257, 786432;
	mad.lo.s32 	%r562, %r261, 192, %r561;
	and.b32  	%r195, %r264, 7;
	or.b32  	%r563, %r169, %r175;
	cvt.u16.u32 	%rs41, %r563;
	and.b16  	%rs42, %rs41, 255;
	mul.lo.s16 	%rs43, %rs42, 171;
	shr.u16 	%rs44, %rs43, 9;
	and.b16  	%rs45, %rs44, 24;
	add.s16 	%rs46, %rs41, %rs45;
	shl.b16 	%rs47, %rs46, 3;
	cvt.u32.u16 	%r564, %rs47;
	and.b32  	%r196, %r564, 248;
	cvt.s64.s32 	%rd7, %r562;
	add.s32 	%r565, %r191, %r190;
	mul.wide.u32 	%rd39, %r565, 4;
	mov.u64 	%rd40, shmem;
	add.s64 	%rd8, %rd40, %rd39;
	add.s32 	%r566, %r192, %r190;
	mul.wide.u32 	%rd41, %r566, 4;
	add.s64 	%rd9, %rd40, %rd41;
	cvt.u64.u32 	%rd42, %r191;
	cvt.u64.u16 	%rd43, %rs40;
	and.b64  	%rd44, %rd43, 255;
	add.s64 	%rd45, %rd42, %rd44;
	shl.b64 	%rd46, %rd45, 2;
	add.s64 	%rd10, %rd40, %rd46;
	cvt.u64.u32 	%rd47, %r192;
	add.s64 	%rd48, %rd47, %rd44;
	shl.b64 	%rd49, %rd48, 2;
	add.s64 	%rd11, %rd40, %rd49;
	or.pred  	%p243, %p239, %p240;
	and.b32  	%r567, %r264, 24;
	setp.eq.s32 	%p244, %r567, 8;
	or.pred  	%p245, %p243, %p244;
	or.pred  	%p246, %p245, %p241;
	setp.eq.s32 	%p247, %r567, 24;
	or.pred  	%p248, %p242, %p247;
	selp.b32 	%r197, 1145324612, -286331154, %p245;
	or.pred  	%p1, %p246, %p248;
	selp.b32 	%r198, 1145324612, -286331154, %p243;
	add.s32 	%r568, %r143, -1;
	setp.lt.u32 	%p249, %r568, 3;
	or.pred  	%p2, %p239, %p249;
	setp.eq.s32 	%p250, %r567, 16;
	or.pred  	%p3, %p250, %p247;
	selp.b32 	%r199, 1145324612, -286331154, %p250;
	mov.u32 	%r87, 0;
	mov.u16 	%rs2, 0;
	mov.u16 	%rs1, 29;
	selp.b32 	%r249, %r198, %r199, %p2;
	or.pred  	%p281, %p2, %p3;
	mov.u32 	%r107, %r87;
	mov.u32 	%r108, %r87;
	mov.u32 	%r109, %r87;
	bra.uni 	$L__BB0_197;
$L__BB0_168:                            // %L23476
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r141, %r87, 48;
	add.s16 	%rs2, %rs2, 48;
	add.s16 	%rs1, %rs1, 48;
	setp.ne.s32 	%p296, %r87, 32688;
	mov.u32 	%r87, %r141;
	@%p296 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_169;
$L__BB0_197:                            // %L1937
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_162 Depth 2
                                        //     Child Loop BB0_166 Depth 2
	add.s32 	%r569, %r87, %r255;
	setp.lt.s32 	%p251, %r569, %r256;
	@%p251 bra 	$L__BB0_198;
	bra.uni 	$L__BB0_169;
$L__BB0_198:                            // %oksrem902
                                        //   in Loop: Header=BB0_197 Depth=1
	setp.eq.s32 	%p252, %r177, 0;
	mul.hi.u32 	%r666, %r87, -1431655765;
	shr.u32 	%r667, %r666, 5;
	mul.lo.s32 	%r200, %r667, 48;
	add.s32 	%r668, %r200, %r175;
	or.b32  	%r669, %r668, %r169;
	shr.s32 	%r670, %r668, 31;
	shr.u32 	%r671, %r670, 17;
	add.s32 	%r672, %r669, %r671;
	and.b32  	%r673, %r672, -32768;
	sub.s32 	%r674, %r669, %r673;
	add.s32 	%r675, %r674, %r255;
	mad.lo.s32 	%r676, %r675, 12288, %r176;
	mul.hi.s32 	%r677, %r676, 715827883;
	shr.u32 	%r678, %r677, 31;
	shr.s32 	%r679, %r677, 26;
	add.s32 	%r680, %r679, %r678;
	setp.lt.s32 	%p253, %r676, 0;
	mul.lo.s32 	%r681, %r680, 402653184;
	setp.ne.s32 	%p254, %r681, %r676;
	and.pred  	%p255, %p253, %p254;
	selp.s32 	%r682, -1, 0, %p255;
	add.s32 	%r683, %r680, %r682;
	mad.lo.s32 	%r684, %r683, -402653184, %r676;
	mul.wide.s32 	%rd50, %r684, 4;
	add.s64 	%rd51, %rd3, %rd50;
	ld.global.v4.u32 	{%r685, %r686, %r687, %r688}, [%rd51];
	add.s32 	%r689, %r668, 24;
	or.b32  	%r690, %r689, %r169;
	shr.s32 	%r691, %r689, 31;
	shr.u32 	%r692, %r691, 17;
	add.s32 	%r693, %r690, %r692;
	and.b32  	%r694, %r693, -32768;
	sub.s32 	%r695, %r690, %r694;
	add.s32 	%r696, %r695, %r255;
	mad.lo.s32 	%r697, %r696, 12288, %r176;
	mul.hi.s32 	%r698, %r697, 715827883;
	shr.u32 	%r699, %r698, 31;
	shr.s32 	%r700, %r698, 26;
	add.s32 	%r701, %r700, %r699;
	setp.lt.s32 	%p256, %r697, 0;
	mul.lo.s32 	%r702, %r701, 402653184;
	setp.ne.s32 	%p257, %r702, %r697;
	and.pred  	%p258, %p256, %p257;
	selp.s32 	%r703, -1, 0, %p258;
	add.s32 	%r704, %r701, %r703;
	mad.lo.s32 	%r705, %r704, -402653184, %r697;
	mul.wide.s32 	%rd52, %r705, 4;
	add.s64 	%rd53, %rd3, %rd52;
	ld.global.v4.u32 	{%r706, %r707, %r708, %r709}, [%rd53];
	selp.b32 	%r710, %r687, %r685, %p252;
	shfl.sync.bfly.b32	%r711, %r710, 4, 31, -1;
	selp.b32 	%r572, %r685, %r711, %p252;
	selp.b32 	%r577, %r711, %r687, %p252;
	selp.b32 	%r712, %r688, %r686, %p252;
	shfl.sync.bfly.b32	%r713, %r712, 4, 31, -1;
	selp.b32 	%r580, %r686, %r713, %p252;
	selp.b32 	%r585, %r713, %r688, %p252;
	selp.b32 	%r714, %r708, %r706, %p252;
	shfl.sync.bfly.b32	%r715, %r714, 4, 31, -1;
	selp.b32 	%r588, %r706, %r715, %p252;
	selp.b32 	%r593, %r715, %r708, %p252;
	selp.b32 	%r716, %r709, %r707, %p252;
	shfl.sync.bfly.b32	%r717, %r716, 4, 31, -1;
	selp.b32 	%r596, %r707, %r717, %p252;
	selp.b32 	%r601, %r717, %r709, %p252;
	shl.b32 	%r573, %r577, 4;
	mov.u32 	%r571, 252645135;
	// begin inline asm
	lop3.b32 %r603, %r571, %r572, %r573, 202;
	// end inline asm
	shr.u32 	%r576, %r572, 4;
	// begin inline asm
	lop3.b32 %r619, %r571, %r576, %r577, 202;
	// end inline asm
	shl.b32 	%r581, %r585, 4;
	// begin inline asm
	lop3.b32 %r611, %r571, %r580, %r581, 202;
	// end inline asm
	shr.u32 	%r584, %r580, 4;
	// begin inline asm
	lop3.b32 %r627, %r571, %r584, %r585, 202;
	// end inline asm
	shl.b32 	%r589, %r593, 4;
	// begin inline asm
	lop3.b32 %r604, %r571, %r588, %r589, 202;
	// end inline asm
	shr.u32 	%r592, %r588, 4;
	// begin inline asm
	lop3.b32 %r620, %r571, %r592, %r593, 202;
	// end inline asm
	shl.b32 	%r597, %r601, 4;
	// begin inline asm
	lop3.b32 %r612, %r571, %r596, %r597, 202;
	// end inline asm
	shr.u32 	%r600, %r596, 4;
	// begin inline asm
	lop3.b32 %r628, %r571, %r600, %r601, 202;
	// end inline asm
	mov.u32 	%r605, 25152;
	// begin inline asm
	prmt.b32 %r635, %r603, %r604, %r605;
	// end inline asm
	mov.u32 	%r609, 29521;
	// begin inline asm
	prmt.b32 %r651, %r603, %r604, %r609;
	// end inline asm
	// begin inline asm
	prmt.b32 %r643, %r611, %r612, %r605;
	// end inline asm
	// begin inline asm
	prmt.b32 %r659, %r611, %r612, %r609;
	// end inline asm
	// begin inline asm
	prmt.b32 %r636, %r619, %r620, %r605;
	// end inline asm
	// begin inline asm
	prmt.b32 %r652, %r619, %r620, %r609;
	// end inline asm
	// begin inline asm
	prmt.b32 %r644, %r627, %r628, %r605;
	// end inline asm
	// begin inline asm
	prmt.b32 %r660, %r627, %r628, %r609;
	// end inline asm
	mov.u32 	%r637, 21520;
	// begin inline asm
	prmt.b32 %r634, %r635, %r636, %r637;
	// end inline asm
	mov.u32 	%r641, 30258;
	// begin inline asm
	prmt.b32 %r638, %r635, %r636, %r641;
	// end inline asm
	// begin inline asm
	prmt.b32 %r642, %r643, %r644, %r637;
	// end inline asm
	// begin inline asm
	prmt.b32 %r646, %r643, %r644, %r641;
	// end inline asm
	// begin inline asm
	prmt.b32 %r650, %r651, %r652, %r637;
	// end inline asm
	// begin inline asm
	prmt.b32 %r654, %r651, %r652, %r641;
	// end inline asm
	// begin inline asm
	prmt.b32 %r658, %r659, %r660, %r637;
	// end inline asm
	// begin inline asm
	prmt.b32 %r662, %r659, %r660, %r641;
	// end inline asm
	mul.hi.s32 	%r718, %r669, 715827883;
	shr.u32 	%r719, %r718, 31;
	shr.s32 	%r720, %r718, 2;
	add.s32 	%r721, %r720, %r719;
	mul.lo.s32 	%r722, %r721, 24;
	sub.s32 	%r723, %r669, %r722;
	add.s32 	%r724, %r723, %r178;
	mul.wide.s32 	%rd54, %r724, 4;
	add.s64 	%rd56, %rd40, %rd54;
	st.shared.u32 	[%rd56], %r634;
	add.s32 	%r725, %r724, 128;
	mul.wide.u32 	%rd57, %r725, 4;
	add.s64 	%rd58, %rd40, %rd57;
	st.shared.u32 	[%rd58], %r642;
	add.s32 	%r726, %r724, 64;
	mul.wide.u32 	%rd59, %r726, 4;
	add.s64 	%rd60, %rd40, %rd59;
	st.shared.u32 	[%rd60], %r638;
	add.s32 	%r727, %r724, 192;
	mul.wide.u32 	%rd61, %r727, 4;
	add.s64 	%rd62, %rd40, %rd61;
	st.shared.u32 	[%rd62], %r646;
	add.s32 	%r728, %r724, 32;
	mul.wide.u32 	%rd63, %r728, 4;
	add.s64 	%rd64, %rd40, %rd63;
	st.shared.u32 	[%rd64], %r650;
	add.s32 	%r729, %r724, 160;
	mul.wide.u32 	%rd65, %r729, 4;
	add.s64 	%rd66, %rd40, %rd65;
	st.shared.u32 	[%rd66], %r658;
	add.s32 	%r730, %r724, 96;
	mul.wide.u32 	%rd67, %r730, 4;
	add.s64 	%rd68, %rd40, %rd67;
	st.shared.u32 	[%rd68], %r654;
	add.s32 	%r731, %r724, 224;
	mul.wide.u32 	%rd69, %r731, 4;
	add.s64 	%rd70, %rd40, %rd69;
	st.shared.u32 	[%rd70], %r662;
	bar.sync 	0;
	add.s32 	%r732, %r200, %r179;
	cvt.u16.u32 	%rs48, %r732;
	mul.hi.s16 	%rs49, %rs48, 10923;
	shr.u16 	%rs50, %rs49, 15;
	shr.s16 	%rs51, %rs49, 2;
	add.s16 	%rs52, %rs51, %rs50;
	mul.lo.s16 	%rs53, %rs52, 24;
	sub.s16 	%rs54, %rs48, %rs53;
	cvt.s32.s16 	%r201, %rs54;
	add.s32 	%r733, %r3, %r201;
	mul.wide.s32 	%rd71, %r733, 4;
	add.s64 	%rd72, %rd40, %rd71;
	ld.shared.u32 	%r202, [%rd72];
	add.s32 	%r734, %r180, %r201;
	mul.wide.s32 	%rd73, %r734, 4;
	add.s64 	%rd74, %rd40, %rd73;
	ld.shared.u32 	%r203, [%rd74];
	add.s32 	%r735, %r181, %r201;
	mul.wide.u32 	%rd75, %r735, 4;
	add.s64 	%rd76, %rd40, %rd75;
	ld.shared.u32 	%r204, [%rd76];
	add.s32 	%r736, %r182, %r201;
	mul.wide.u32 	%rd77, %r736, 4;
	add.s64 	%rd78, %rd40, %rd77;
	ld.shared.u32 	%r205, [%rd78];
	add.s32 	%r737, %r183, %r201;
	mul.wide.u32 	%rd79, %r737, 4;
	add.s64 	%rd80, %rd40, %rd79;
	ld.shared.u32 	%r206, [%rd80];
	add.s32 	%r738, %r184, %r201;
	mul.wide.u32 	%rd81, %r738, 4;
	add.s64 	%rd82, %rd40, %rd81;
	ld.shared.u32 	%r207, [%rd82];
	add.s32 	%r739, %r185, %r201;
	mul.wide.u32 	%rd83, %r739, 4;
	add.s64 	%rd84, %rd40, %rd83;
	ld.shared.u32 	%r208, [%rd84];
	add.s32 	%r740, %r186, %r201;
	mul.wide.u32 	%rd85, %r740, 4;
	add.s64 	%rd86, %rd40, %rd85;
	ld.shared.u32 	%r209, [%rd86];
	add.s32 	%r741, %r187, %r201;
	mul.wide.u32 	%rd87, %r741, 4;
	add.s64 	%rd88, %rd40, %rd87;
	ld.shared.u32 	%r210, [%rd88];
	add.s32 	%r742, %r188, %r201;
	mul.wide.u32 	%rd89, %r742, 4;
	add.s64 	%rd90, %rd40, %rd89;
	ld.shared.u32 	%r211, [%rd90];
	add.s32 	%r743, %r189, %r201;
	mul.wide.s32 	%rd91, %r743, 4;
	add.s64 	%rd92, %rd40, %rd91;
	ld.shared.u32 	%r212, [%rd92];
	bar.sync 	0;
	shfl.sync.idx.b32	%r213, %r168, 0, 31, -1;
	shfl.sync.idx.b32	%r214, %r168, 1, 31, -1;
	shfl.sync.idx.b32	%r215, %r168, 2, 31, -1;
	shfl.sync.idx.b32	%r216, %r168, 3, 31, -1;
	shfl.sync.idx.b32	%r217, %r168, 4, 31, -1;
	shfl.sync.idx.b32	%r218, %r168, 5, 31, -1;
	shfl.sync.idx.b32	%r219, %r168, 6, 31, -1;
	shfl.sync.idx.b32	%r220, %r168, 7, 31, -1;
	shfl.sync.idx.b32	%r221, %r168, 8, 31, -1;
	shfl.sync.idx.b32	%r222, %r168, 9, 31, -1;
	shfl.sync.idx.b32	%r223, %r168, 10, 31, -1;
	shfl.sync.idx.b32	%r224, %r168, 11, 31, -1;
	shfl.sync.idx.b32	%r225, %r168, 12, 31, -1;
	shfl.sync.idx.b32	%r226, %r168, 13, 31, -1;
	shfl.sync.idx.b32	%r227, %r168, 14, 31, -1;
	shfl.sync.idx.b32	%r228, %r168, 15, 31, -1;
	setp.eq.s32 	%p259, %r213, 999999999;
	@%p259 bra 	$L__BB0_145;
// %bb.199:                             // %oksrem2312
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r744, %r213, %r201;
	mul.wide.s32 	%rd93, %r744, 4;
	add.s64 	%rd95, %rd40, %rd93;
	st.shared.u32 	[%rd95], %r202;
	setp.eq.s32 	%p260, %r214, 999999999;
	@%p260 bra 	$L__BB0_146;
// %bb.200:                             // %oksrem2380
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r745, %r214, %r201;
	mul.wide.s32 	%rd96, %r745, 4;
	add.s64 	%rd98, %rd40, %rd96;
	st.shared.u32 	[%rd98], %r203;
	setp.eq.s32 	%p261, %r215, 999999999;
	@%p261 bra 	$L__BB0_147;
// %bb.201:                             // %oksrem2448
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r746, %r215, %r201;
	mul.wide.s32 	%rd99, %r746, 4;
	add.s64 	%rd101, %rd40, %rd99;
	st.shared.u32 	[%rd101], %r204;
	setp.eq.s32 	%p262, %r216, 999999999;
	@%p262 bra 	$L__BB0_148;
// %bb.202:                             // %oksrem2516
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r747, %r216, %r201;
	mul.wide.s32 	%rd102, %r747, 4;
	add.s64 	%rd104, %rd40, %rd102;
	st.shared.u32 	[%rd104], %r205;
	setp.eq.s32 	%p263, %r217, 999999999;
	@%p263 bra 	$L__BB0_149;
// %bb.203:                             // %oksrem2584
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r748, %r217, %r201;
	mul.wide.s32 	%rd105, %r748, 4;
	add.s64 	%rd107, %rd40, %rd105;
	st.shared.u32 	[%rd107], %r206;
	setp.eq.s32 	%p264, %r218, 999999999;
	@%p264 bra 	$L__BB0_150;
// %bb.204:                             // %oksrem2652
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r749, %r218, %r201;
	mul.wide.s32 	%rd108, %r749, 4;
	add.s64 	%rd110, %rd40, %rd108;
	st.shared.u32 	[%rd110], %r207;
	setp.eq.s32 	%p265, %r219, 999999999;
	@%p265 bra 	$L__BB0_151;
// %bb.205:                             // %oksrem2720
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r750, %r219, %r201;
	mul.wide.s32 	%rd111, %r750, 4;
	add.s64 	%rd113, %rd40, %rd111;
	st.shared.u32 	[%rd113], %r208;
	setp.eq.s32 	%p266, %r220, 999999999;
	@%p266 bra 	$L__BB0_152;
// %bb.206:                             // %oksrem2788
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r751, %r220, %r201;
	mul.wide.s32 	%rd114, %r751, 4;
	add.s64 	%rd116, %rd40, %rd114;
	st.shared.u32 	[%rd116], %r209;
	setp.eq.s32 	%p267, %r221, 999999999;
	@%p267 bra 	$L__BB0_153;
// %bb.207:                             // %oksrem2856
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r752, %r221, %r201;
	mul.wide.s32 	%rd117, %r752, 4;
	add.s64 	%rd119, %rd40, %rd117;
	st.shared.u32 	[%rd119], %r210;
	setp.eq.s32 	%p268, %r222, 999999999;
	@%p268 bra 	$L__BB0_154;
// %bb.208:                             // %oksrem2924
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r753, %r222, %r201;
	mul.wide.s32 	%rd120, %r753, 4;
	add.s64 	%rd122, %rd40, %rd120;
	st.shared.u32 	[%rd122], %r211;
	setp.eq.s32 	%p269, %r223, 999999999;
	@%p269 bra 	$L__BB0_155;
// %bb.209:                             // %oksrem2993
                                        //   in Loop: Header=BB0_197 Depth=1
	setp.gt.u32 	%p270, %r2, 3;
	selp.b32 	%r754, 0, %r212, %p270;
	add.s32 	%r755, %r223, %r201;
	mul.wide.s32 	%rd123, %r755, 4;
	add.s64 	%rd125, %rd40, %rd123;
	st.shared.u32 	[%rd125], %r754;
	setp.eq.s32 	%p271, %r224, 999999999;
	@%p271 bra 	$L__BB0_156;
// %bb.210:                             // %oksrem3061
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r756, %r224, %r201;
	mul.wide.s32 	%rd126, %r756, 4;
	add.s64 	%rd128, %rd40, %rd126;
	mov.u32 	%r757, 0;
	st.shared.u32 	[%rd128], %r757;
	setp.eq.s32 	%p272, %r225, 999999999;
	@%p272 bra 	$L__BB0_157;
// %bb.211:                             // %oksrem3128
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r758, %r225, %r201;
	mul.wide.s32 	%rd129, %r758, 4;
	add.s64 	%rd131, %rd40, %rd129;
	st.shared.u32 	[%rd131], %r757;
	setp.eq.s32 	%p273, %r226, 999999999;
	@%p273 bra 	$L__BB0_158;
// %bb.212:                             // %oksrem3195
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r760, %r226, %r201;
	mul.wide.s32 	%rd132, %r760, 4;
	add.s64 	%rd134, %rd40, %rd132;
	st.shared.u32 	[%rd134], %r757;
	setp.eq.s32 	%p274, %r227, 999999999;
	@%p274 bra 	$L__BB0_159;
// %bb.213:                             // %oksrem3262
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r762, %r227, %r201;
	mul.wide.s32 	%rd135, %r762, 4;
	add.s64 	%rd137, %rd40, %rd135;
	st.shared.u32 	[%rd137], %r757;
	setp.eq.s32 	%p275, %r228, 999999999;
	@%p275 bra 	$L__BB0_160;
// %bb.214:                             // %oksrem3329
                                        //   in Loop: Header=BB0_197 Depth=1
	setp.eq.s32 	%p276, %r170, 3;
	add.s32 	%r765, %r228, %r201;
	mul.wide.s32 	%rd138, %r765, 4;
	add.s64 	%rd140, %rd40, %rd138;
	st.shared.u32 	[%rd140], %r757;
	bar.sync 	0;
	mov.u32 	%r91, %r757;
	mov.u32 	%r92, %r757;
	mov.u32 	%r93, %r757;
	mov.u32 	%r94, %r757;
	mov.u32 	%r95, %r757;
	mov.u32 	%r96, %r757;
	mov.u32 	%r97, %r757;
	mov.u32 	%r98, %r757;
	mov.u32 	%r99, %r757;
	mov.u32 	%r100, %r757;
	mov.u32 	%r101, %r757;
	mov.u32 	%r102, %r757;
	mov.u32 	%r103, %r757;
	mov.u32 	%r104, %r757;
	mov.u32 	%r105, %r757;
	mov.u32 	%r106, %r757;
	@%p276 bra 	$L__BB0_161;
// %bb.215:                             // %oksrem3387
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r766, %r200, %r190;
	ld.shared.u32 	%r91, [%rd8];
	ld.shared.u32 	%r92, [%rd9];
	ld.shared.u32 	%r93, [%rd10+12];
	ld.shared.u32 	%r94, [%rd11+12];
	ld.shared.u32 	%r95, [%rd10+24];
	ld.shared.u32 	%r96, [%rd11+24];
	ld.shared.u32 	%r97, [%rd10+36];
	ld.shared.u32 	%r98, [%rd11+36];
	add.s32 	%r767, %r766, 12;
	mul.hi.u32 	%r768, %r767, -1431655765;
	shr.u32 	%r769, %r768, 4;
	mul.lo.s32 	%r770, %r769, 24;
	sub.s32 	%r771, %r767, %r770;
	add.s32 	%r772, %r191, %r771;
	mul.wide.u32 	%rd141, %r772, 4;
	add.s64 	%rd143, %rd40, %rd141;
	ld.shared.u32 	%r99, [%rd143];
	add.s32 	%r773, %r192, %r771;
	mul.wide.u32 	%rd144, %r773, 4;
	add.s64 	%rd145, %rd40, %rd144;
	ld.shared.u32 	%r100, [%rd145];
	ld.shared.u32 	%r101, [%rd10+60];
	ld.shared.u32 	%r102, [%rd11+60];
	ld.shared.u32 	%r103, [%rd10+72];
	ld.shared.u32 	%r104, [%rd11+72];
	ld.shared.u32 	%r105, [%rd10+84];
	ld.shared.u32 	%r106, [%rd11+84];
$L__BB0_161:                            // %L10647
                                        //   in Loop: Header=BB0_197 Depth=1
	bar.sync 	0;
	mov.u16 	%rs3, %rs2;
	mov.u32 	%r110, %r757;
	bra.uni 	$L__BB0_162;
$L__BB0_164:                            // %L17052
                                        //   in Loop: Header=BB0_162 Depth=2
	bar.sync 	0;
	add.s32 	%r110, %r110, 6;
	add.s16 	%rs3, %rs3, 6;
	setp.ne.s32 	%p286, %r110, 24;
	@%p286 bra 	$L__BB0_162;
	bra.uni 	$L__BB0_165;
$L__BB0_162:                            // %L10665
                                        //   Parent Loop BB0_197 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p277, %r110, 0;
	selp.b32 	%r1167, %r91, 0, %p277;
	setp.eq.s32 	%p278, %r110, 6;
	selp.b32 	%r1168, %r95, %r1167, %p278;
	setp.eq.s32 	%p279, %r110, 12;
	selp.b32 	%r1169, %r99, %r1168, %p279;
	setp.eq.s32 	%p280, %r110, 18;
	selp.b32 	%r1170, %r103, %r1169, %p280;
	selp.b32 	%r1171, %r92, 0, %p277;
	selp.b32 	%r1172, %r96, %r1171, %p278;
	selp.b32 	%r1173, %r100, %r1172, %p279;
	selp.b32 	%r1174, %r104, %r1173, %p280;
	selp.b32 	%r1175, %r93, 0, %p277;
	selp.b32 	%r1176, %r97, %r1175, %p278;
	selp.b32 	%r1177, %r101, %r1176, %p279;
	selp.b32 	%r1178, %r105, %r1177, %p280;
	selp.b32 	%r1179, %r94, 0, %p277;
	selp.b32 	%r1180, %r98, %r1179, %p278;
	selp.b32 	%r1181, %r102, %r1180, %p279;
	selp.b32 	%r1182, %r106, %r1181, %p280;
	mov.u16 	%rs92, 25600;
	// begin inline asm
	mov.b32 %r780, {%rs92, %rs92};
	// end inline asm
	mov.u16 	%rs94, 21504;
	// begin inline asm
	mov.b32 %r791, {%rs94, %rs94};
	// end inline asm
	xor.b32  	%r779, %r1170, -2004318072;
	mov.u32 	%r916, 983055;
	// begin inline asm
	lop3.b32 %r777, %r916, %r779, %r780, 202;
	// end inline asm
	mov.u16 	%rs98, 18432;
	// begin inline asm
	mov.b32 %r781, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r782, %r780, %r781;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r785, %r777, %r782;
	// end inline asm
	mov.u32 	%r927, 15728880;
	// begin inline asm
	lop3.b32 %r788, %r927, %r779, %r791, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r792, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r793, %r791, %r792;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r796, %r788, %r793;
	// end inline asm
	// begin inline asm
	mov.b32 %r826, {%rs92, %rs92};
	// end inline asm
	// begin inline asm
	mov.b32 %r837, {%rs94, %rs94};
	// end inline asm
	xor.b32  	%r825, %r1174, -2004318072;
	// begin inline asm
	lop3.b32 %r823, %r916, %r825, %r826, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r827, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r828, %r826, %r827;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r831, %r823, %r828;
	// end inline asm
	// begin inline asm
	lop3.b32 %r834, %r927, %r825, %r837, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r838, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r839, %r837, %r838;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r842, %r834, %r839;
	// end inline asm
	// begin inline asm
	mov.b32 %r872, {%rs92, %rs92};
	// end inline asm
	// begin inline asm
	mov.b32 %r883, {%rs94, %rs94};
	// end inline asm
	xor.b32  	%r871, %r1178, -2004318072;
	// begin inline asm
	lop3.b32 %r869, %r916, %r871, %r872, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r873, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r874, %r872, %r873;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r877, %r869, %r874;
	// end inline asm
	// begin inline asm
	lop3.b32 %r880, %r927, %r871, %r883, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r884, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r885, %r883, %r884;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r888, %r880, %r885;
	// end inline asm
	// begin inline asm
	mov.b32 %r918, {%rs92, %rs92};
	// end inline asm
	// begin inline asm
	mov.b32 %r929, {%rs94, %rs94};
	// end inline asm
	xor.b32  	%r917, %r1182, -2004318072;
	// begin inline asm
	lop3.b32 %r915, %r916, %r917, %r918, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r919, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r920, %r918, %r919;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r923, %r915, %r920;
	// end inline asm
	// begin inline asm
	lop3.b32 %r926, %r927, %r917, %r929, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r930, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r931, %r929, %r930;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r934, %r926, %r931;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r785;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r959, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r831;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r962, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r796;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r965, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r174;
    mov.b32 {%r2re, %r2im}, %r842;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r968, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r877;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r971, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r923;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r974, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r888;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r977, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r174;
    mov.b32 {%r2re, %r2im}, %r934;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r980, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r983, %r984}, {%r286, %r289}, {%r959}, {%r757, %r757};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r990, %r991}, {%r286, %r289}, {%r962}, {%r757, %r757};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r997, %r998}, {%r286, %r289}, {%r965}, {%r757, %r757};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1004, %r1005}, {%r286, %r289}, {%r968}, {%r757, %r757};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1011, %r1012}, {%r286, %r289}, {%r971}, {%r757, %r757};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1018, %r1019}, {%r286, %r289}, {%r974}, {%r757, %r757};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1025, %r1026}, {%r286, %r289}, {%r977}, {%r757, %r757};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1032, %r1033}, {%r286, %r289}, {%r980}, {%r757, %r757};
	// end inline asm
	@%p1 bra 	$L__BB0_216;
	bra.uni 	$L__BB0_163;
$L__BB0_216:                            // %pass4747
                                        //   in Loop: Header=BB0_162 Depth=2
	// begin inline asm
	neg.f16x2 %r1039, %r341;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1041, %r1039, %r984;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1044, %r338, %r983, %r1041;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1048, %r341;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1050, %r1048, %r991;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1053, %r338, %r990, %r1050;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1057, %r341;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1059, %r1057, %r998;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1062, %r338, %r997, %r1059;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1066, %r341;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1068, %r1066, %r1005;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1071, %r338, %r1004, %r1068;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1075, %r341;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1077, %r1075, %r1012;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1080, %r338, %r1011, %r1077;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1084, %r341;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1086, %r1084, %r1019;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1089, %r338, %r1018, %r1086;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1093, %r341;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1095, %r1093, %r1026;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1098, %r338, %r1025, %r1095;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1102, %r341;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1104, %r1102, %r1033;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1107, %r338, %r1032, %r1104;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1111, %r341, %r983;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1114, %r338, %r984, %r1111;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1118, %r341, %r990;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1121, %r338, %r991, %r1118;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1125, %r341, %r997;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1128, %r338, %r998, %r1125;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1132, %r341, %r1004;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1135, %r338, %r1005, %r1132;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1139, %r341, %r1011;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1142, %r338, %r1012, %r1139;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1146, %r341, %r1018;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1149, %r338, %r1019, %r1146;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1153, %r341, %r1025;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1156, %r338, %r1026, %r1153;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1160, %r341, %r1032;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1163, %r338, %r1033, %r1160;
	// end inline asm
	mov.u32 	%r1332, 0;
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1183, %r1184}, {%r382, %r385}, {%r1044, %r1114}, {%r1332, %r1332}, %r197, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1192, %r1193}, {%r382, %r385}, {%r1053, %r1121}, {%r1332, %r1332}, %r197, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1201, %r1202}, {%r382, %r385}, {%r1062, %r1128}, {%r1332, %r1332}, %r197, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1210, %r1211}, {%r382, %r385}, {%r1071, %r1135}, {%r1332, %r1332}, %r197, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1219, %r1220}, {%r382, %r385}, {%r1080, %r1142}, {%r1332, %r1332}, %r197, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1228, %r1229}, {%r382, %r385}, {%r1089, %r1149}, {%r1332, %r1332}, %r197, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1237, %r1238}, {%r382, %r385}, {%r1098, %r1156}, {%r1332, %r1332}, %r197, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1246, %r1247}, {%r382, %r385}, {%r1107, %r1163}, {%r1332, %r1332}, %r197, 0;
	// end inline asm
	bar.sync 	0;
	mul.hi.s16 	%rs103, %rs3, 10923;
	shr.u16 	%rs104, %rs103, 15;
	add.s16 	%rs105, %rs103, %rs104;
	mul.lo.s16 	%rs106, %rs105, 6;
	sub.s16 	%rs107, %rs3, %rs106;
	mul.wide.s16 	%r1365, %rs107, 16;
	add.s32 	%r1366, %r193, %r1365;
	mul.wide.s32 	%rd148, %r1366, 4;
	add.s64 	%rd150, %rd40, %rd148;
	ld.shared.u32 	%r1323, [%rd150];
	add.s32 	%r1367, %r194, %r1365;
	mul.wide.s32 	%rd151, %r1367, 4;
	add.s64 	%rd152, %rd40, %rd151;
	ld.shared.u32 	%r1330, [%rd152];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1319, %r1320}, {%r394, %r397}, {%r1323}, {%r1332, %r1332};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1326, %r1327}, {%r394, %r397}, {%r1330}, {%r1332, %r1332};
	// end inline asm
	@%p281 bra 	$L__BB0_218;
	bra.uni 	$L__BB0_217;
$L__BB0_218:                            // %pass5243
                                        //   in Loop: Header=BB0_162 Depth=2
	// begin inline asm
	neg.f16x2 %r1333, %r435;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1335, %r1333, %r1320;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1338, %r432, %r1319, %r1335;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1342, %r435;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1344, %r1342, %r1327;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1347, %r432, %r1326, %r1344;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1351, %r435, %r1319;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1354, %r432, %r1320, %r1351;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1358, %r435, %r1326;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1361, %r432, %r1327, %r1358;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1387, %r1390}, {%r478, %r481}, {%r1338, %r1354}, {%r1332, %r1332}, %r249, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1394, %r1398}, {%r478, %r481}, {%r1347, %r1361}, {%r1332, %r1332}, %r249, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1386, %r1387, %r1387;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1389, %r1390, %r1390, %r1386;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1393, %r1394, %r1394, %r1389;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1397, %r1398, %r1398, %r1393;
	// end inline asm
	mov.u32 	%r1817, 290787669;
	// begin inline asm
	fma.rn.f16x2 %r1401, %r1817, %r1397, %r109;
	// end inline asm
	add.s32 	%r1820, %r87, %r110;
	add.s32 	%r1821, %r1820, 1;
	mul.hi.u32 	%r1822, %r1821, -1431655765;
	shr.u32 	%r1823, %r1822, 2;
	mul.lo.s32 	%r1824, %r1823, 6;
	sub.s32 	%r1825, %r1821, %r1824;
	shl.b32 	%r1826, %r1825, 4;
	add.s32 	%r1827, %r193, %r1826;
	mul.wide.u32 	%rd155, %r1827, 4;
	add.s64 	%rd157, %rd40, %rd155;
	ld.shared.u32 	%r1409, [%rd157];
	add.s32 	%r1828, %r194, %r1826;
	mul.wide.u32 	%rd158, %r1828, 4;
	add.s64 	%rd159, %rd40, %rd158;
	ld.shared.u32 	%r1416, [%rd159];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1426, %r1423}, {%r394, %r397}, {%r1409}, {%r1332, %r1332};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1435, %r1432}, {%r394, %r397}, {%r1416}, {%r1332, %r1332};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1419, %r435;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1421, %r1419, %r1423;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1424, %r432, %r1426, %r1421;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1428, %r435;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1430, %r1428, %r1432;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1433, %r432, %r1435, %r1430;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1437, %r435, %r1426;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1440, %r432, %r1423, %r1437;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1444, %r435, %r1435;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1447, %r432, %r1432, %r1444;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1470, %r1473}, {%r478, %r481}, {%r1424, %r1440}, {%r1332, %r1332}, %r249, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1477, %r1481}, {%r478, %r481}, {%r1433, %r1447}, {%r1332, %r1332}, %r249, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1469, %r1470, %r1470;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1472, %r1473, %r1473, %r1469;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1476, %r1477, %r1477, %r1472;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1480, %r1481, %r1481, %r1476;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1484, %r1817, %r1480, %r1401;
	// end inline asm
	add.s32 	%r1829, %r1820, 2;
	mul.hi.u32 	%r1830, %r1829, -1431655765;
	shr.u32 	%r1831, %r1830, 2;
	mul.lo.s32 	%r1832, %r1831, 6;
	sub.s32 	%r1833, %r1829, %r1832;
	shl.b32 	%r1834, %r1833, 4;
	add.s32 	%r1835, %r193, %r1834;
	mul.wide.u32 	%rd160, %r1835, 4;
	add.s64 	%rd161, %rd40, %rd160;
	ld.shared.u32 	%r1492, [%rd161];
	add.s32 	%r1836, %r194, %r1834;
	mul.wide.u32 	%rd162, %r1836, 4;
	add.s64 	%rd163, %rd40, %rd162;
	ld.shared.u32 	%r1499, [%rd163];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1509, %r1506}, {%r394, %r397}, {%r1492}, {%r1332, %r1332};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1518, %r1515}, {%r394, %r397}, {%r1499}, {%r1332, %r1332};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1502, %r435;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1504, %r1502, %r1506;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1507, %r432, %r1509, %r1504;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1511, %r435;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1513, %r1511, %r1515;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1516, %r432, %r1518, %r1513;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1520, %r435, %r1509;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1523, %r432, %r1506, %r1520;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1527, %r435, %r1518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1530, %r432, %r1515, %r1527;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1553, %r1556}, {%r478, %r481}, {%r1507, %r1523}, {%r1332, %r1332}, %r249, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1560, %r1564}, {%r478, %r481}, {%r1516, %r1530}, {%r1332, %r1332}, %r249, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1552, %r1553, %r1553;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1555, %r1556, %r1556, %r1552;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1559, %r1560, %r1560, %r1555;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1563, %r1564, %r1564, %r1559;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1567, %r1817, %r1563, %r1484;
	// end inline asm
	add.s32 	%r1837, %r1820, 3;
	mul.hi.u32 	%r1838, %r1837, -1431655765;
	shr.u32 	%r1839, %r1838, 2;
	mul.lo.s32 	%r1840, %r1839, 6;
	sub.s32 	%r1841, %r1837, %r1840;
	shl.b32 	%r1842, %r1841, 4;
	add.s32 	%r1843, %r193, %r1842;
	mul.wide.u32 	%rd164, %r1843, 4;
	add.s64 	%rd165, %rd40, %rd164;
	ld.shared.u32 	%r1575, [%rd165];
	add.s32 	%r1844, %r194, %r1842;
	mul.wide.u32 	%rd166, %r1844, 4;
	add.s64 	%rd167, %rd40, %rd166;
	ld.shared.u32 	%r1582, [%rd167];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1592, %r1589}, {%r394, %r397}, {%r1575}, {%r1332, %r1332};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1601, %r1598}, {%r394, %r397}, {%r1582}, {%r1332, %r1332};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1585, %r435;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1587, %r1585, %r1589;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1590, %r432, %r1592, %r1587;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1594, %r435;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1596, %r1594, %r1598;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1599, %r432, %r1601, %r1596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1603, %r435, %r1592;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1606, %r432, %r1589, %r1603;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1610, %r435, %r1601;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1613, %r432, %r1598, %r1610;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1636, %r1639}, {%r478, %r481}, {%r1590, %r1606}, {%r1332, %r1332}, %r249, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1643, %r1647}, {%r478, %r481}, {%r1599, %r1613}, {%r1332, %r1332}, %r249, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1635, %r1636, %r1636;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1638, %r1639, %r1639, %r1635;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1642, %r1643, %r1643, %r1638;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1646, %r1647, %r1647, %r1642;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1650, %r1817, %r1646, %r1567;
	// end inline asm
	add.s32 	%r1845, %r1820, 4;
	mul.hi.u32 	%r1846, %r1845, -1431655765;
	shr.u32 	%r1847, %r1846, 2;
	mul.lo.s32 	%r1848, %r1847, 6;
	sub.s32 	%r1849, %r1845, %r1848;
	shl.b32 	%r1850, %r1849, 4;
	add.s32 	%r1851, %r193, %r1850;
	mul.wide.u32 	%rd168, %r1851, 4;
	add.s64 	%rd169, %rd40, %rd168;
	ld.shared.u32 	%r1658, [%rd169];
	add.s32 	%r1852, %r194, %r1850;
	mul.wide.u32 	%rd170, %r1852, 4;
	add.s64 	%rd171, %rd40, %rd170;
	ld.shared.u32 	%r1665, [%rd171];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1675, %r1672}, {%r394, %r397}, {%r1658}, {%r1332, %r1332};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1684, %r1681}, {%r394, %r397}, {%r1665}, {%r1332, %r1332};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1668, %r435;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1670, %r1668, %r1672;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1673, %r432, %r1675, %r1670;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1677, %r435;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1679, %r1677, %r1681;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1682, %r432, %r1684, %r1679;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1686, %r435, %r1675;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1689, %r432, %r1672, %r1686;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1693, %r435, %r1684;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1696, %r432, %r1681, %r1693;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1719, %r1722}, {%r478, %r481}, {%r1673, %r1689}, {%r1332, %r1332}, %r249, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1726, %r1730}, {%r478, %r481}, {%r1682, %r1696}, {%r1332, %r1332}, %r249, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1718, %r1719, %r1719;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1721, %r1722, %r1722, %r1718;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1725, %r1726, %r1726, %r1721;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1729, %r1730, %r1730, %r1725;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1733, %r1817, %r1729, %r1650;
	// end inline asm
	add.s32 	%r1853, %r1820, 5;
	mul.hi.u32 	%r1854, %r1853, -1431655765;
	shr.u32 	%r1855, %r1854, 2;
	mul.lo.s32 	%r1856, %r1855, 6;
	sub.s32 	%r1857, %r1853, %r1856;
	shl.b32 	%r1858, %r1857, 4;
	add.s32 	%r1859, %r193, %r1858;
	mul.wide.u32 	%rd172, %r1859, 4;
	add.s64 	%rd173, %rd40, %rd172;
	ld.shared.u32 	%r1741, [%rd173];
	add.s32 	%r1860, %r194, %r1858;
	mul.wide.u32 	%rd174, %r1860, 4;
	add.s64 	%rd175, %rd40, %rd174;
	ld.shared.u32 	%r1748, [%rd175];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1758, %r1755}, {%r394, %r397}, {%r1741}, {%r1332, %r1332};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1767, %r1764}, {%r394, %r397}, {%r1748}, {%r1332, %r1332};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1751, %r435;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1753, %r1751, %r1755;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1756, %r432, %r1758, %r1753;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1760, %r435;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1762, %r1760, %r1764;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1765, %r432, %r1767, %r1762;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1769, %r435, %r1758;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1772, %r432, %r1755, %r1769;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1776, %r435, %r1767;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1779, %r432, %r1764, %r1776;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1802, %r1805}, {%r478, %r481}, {%r1756, %r1772}, {%r1332, %r1332}, %r249, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1809, %r1813}, {%r478, %r481}, {%r1765, %r1779}, {%r1332, %r1332}, %r249, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1801, %r1802, %r1802;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1804, %r1805, %r1805, %r1801;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1808, %r1809, %r1809, %r1804;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1812, %r1813, %r1813, %r1808;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r109, %r1817, %r1812, %r1733;
	// end inline asm
	add.s32 	%r107, %r107, 6;
	setp.ne.s32 	%p282, %r107, 192;
	@%p282 bra 	$L__BB0_164;
// %bb.219:                             // %pass7227
                                        //   in Loop: Header=BB0_162 Depth=2
	mul.lo.s32 	%r1862, %r108, 786432;
	or.b32  	%r1863, %r1862, %r195;
	or.b32  	%r1864, %r1863, %r5;
	add.s32 	%r1865, %r1864, %r196;
	cvt.u64.u32 	%rd176, %r1865;
	add.s64 	%rd177, %rd176, %rd7;
	mul.hi.s64 	%rd178, %rd177, 3074457345618258603;
	shr.u64 	%rd179, %rd178, 63;
	shr.s64 	%rd180, %rd178, 27;
	add.s64 	%rd181, %rd180, %rd179;
	setp.lt.s64 	%p283, %rd177, 0;
	mul.lo.s64 	%rd182, %rd181, 805306368;
	setp.ne.s64 	%p284, %rd182, %rd177;
	and.pred  	%p285, %p283, %p284;
	selp.s64 	%rd183, -1, 0, %p285;
	add.s64 	%rd184, %rd181, %rd183;
	mul.lo.s64 	%rd185, %rd184, -805306368;
	add.s64 	%rd186, %rd185, %rd177;
	shl.b64 	%rd187, %rd186, 2;
	add.s64 	%rd188, %rd4, %rd187;
	st.global.u32 	[%rd188], %r109;
	add.s32 	%r108, %r108, 1;
	mov.u32 	%r107, 0;
	mov.u32 	%r109, %r107;
	bra.uni 	$L__BB0_164;
$L__BB0_165:                            // %L17073.preheader
                                        //   in Loop: Header=BB0_197 Depth=1
	mov.u16 	%rs194, %rs1;
	mov.u32 	%r3001, %r1332;
	bra.uni 	$L__BB0_166;
$L__BB0_167:                            // %L23460
                                        //   in Loop: Header=BB0_166 Depth=2
	bar.sync 	0;
	add.s32 	%r3001, %r3001, 6;
	add.s16 	%rs194, %rs194, 6;
	setp.ne.s32 	%p295, %r3001, 24;
	@%p295 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_168;
$L__BB0_166:                            // %L17073
                                        //   Parent Loop BB0_197 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p287, %r3001, 0;
	selp.b32 	%r2893, %r91, 0, %p287;
	setp.eq.s32 	%p288, %r3001, 6;
	selp.b32 	%r2894, %r95, %r2893, %p288;
	setp.eq.s32 	%p289, %r3001, 12;
	selp.b32 	%r2895, %r99, %r2894, %p289;
	setp.eq.s32 	%p290, %r3001, 18;
	selp.b32 	%r2896, %r103, %r2895, %p290;
	selp.b32 	%r2897, %r92, 0, %p287;
	selp.b32 	%r2898, %r96, %r2897, %p288;
	selp.b32 	%r2899, %r100, %r2898, %p289;
	selp.b32 	%r2900, %r104, %r2899, %p290;
	selp.b32 	%r2901, %r93, 0, %p287;
	selp.b32 	%r2902, %r97, %r2901, %p288;
	selp.b32 	%r2903, %r101, %r2902, %p289;
	selp.b32 	%r2904, %r105, %r2903, %p290;
	selp.b32 	%r2905, %r94, 0, %p287;
	selp.b32 	%r2906, %r98, %r2905, %p288;
	selp.b32 	%r2907, %r102, %r2906, %p289;
	selp.b32 	%r2908, %r106, %r2907, %p290;
	// begin inline asm
	mov.b32 %r1894, {%rs92, %rs92};
	// end inline asm
	// begin inline asm
	mov.b32 %r1905, {%rs94, %rs94};
	// end inline asm
	shr.u32 	%r2909, %r2896, 8;
	xor.b32  	%r1904, %r2909, 8947848;
	// begin inline asm
	lop3.b32 %r1891, %r916, %r1904, %r1894, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1895, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1896, %r1894, %r1895;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1899, %r1891, %r1896;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1902, %r927, %r1904, %r1905, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1906, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1907, %r1905, %r1906;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1910, %r1902, %r1907;
	// end inline asm
	// begin inline asm
	mov.b32 %r1940, {%rs92, %rs92};
	// end inline asm
	// begin inline asm
	mov.b32 %r1951, {%rs94, %rs94};
	// end inline asm
	shr.u32 	%r2910, %r2900, 8;
	xor.b32  	%r1950, %r2910, 8947848;
	// begin inline asm
	lop3.b32 %r1937, %r916, %r1950, %r1940, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1941, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1942, %r1940, %r1941;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1945, %r1937, %r1942;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1948, %r927, %r1950, %r1951, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1952, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1953, %r1951, %r1952;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1956, %r1948, %r1953;
	// end inline asm
	// begin inline asm
	mov.b32 %r1986, {%rs92, %rs92};
	// end inline asm
	// begin inline asm
	mov.b32 %r1997, {%rs94, %rs94};
	// end inline asm
	shr.u32 	%r2911, %r2904, 8;
	xor.b32  	%r1996, %r2911, 8947848;
	// begin inline asm
	lop3.b32 %r1983, %r916, %r1996, %r1986, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1987, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1988, %r1986, %r1987;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1991, %r1983, %r1988;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1994, %r927, %r1996, %r1997, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1998, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1999, %r1997, %r1998;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2002, %r1994, %r1999;
	// end inline asm
	// begin inline asm
	mov.b32 %r2032, {%rs92, %rs92};
	// end inline asm
	// begin inline asm
	mov.b32 %r2043, {%rs94, %rs94};
	// end inline asm
	shr.u32 	%r2912, %r2908, 8;
	xor.b32  	%r2042, %r2912, 8947848;
	// begin inline asm
	lop3.b32 %r2029, %r916, %r2042, %r2032, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2033, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2034, %r2032, %r2033;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2037, %r2029, %r2034;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2040, %r927, %r2042, %r2043, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2044, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2045, %r2043, %r2044;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2048, %r2040, %r2045;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r1899;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2051, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r1945;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2054, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r1910;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2057, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r174;
    mov.b32 {%r2re, %r2im}, %r1956;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2060, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r1991;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2063, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2037;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2066, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r2002;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2069, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r174;
    mov.b32 {%r2re, %r2im}, %r2048;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2072, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2138, %r2135}, {%r286, %r289}, {%r2051}, {%r1332, %r1332};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2147, %r2144}, {%r286, %r289}, {%r2054}, {%r1332, %r1332};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2156, %r2153}, {%r286, %r289}, {%r2057}, {%r1332, %r1332};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2165, %r2162}, {%r286, %r289}, {%r2060}, {%r1332, %r1332};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2174, %r2171}, {%r286, %r289}, {%r2063}, {%r1332, %r1332};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2183, %r2180}, {%r286, %r289}, {%r2066}, {%r1332, %r1332};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2192, %r2189}, {%r286, %r289}, {%r2069}, {%r1332, %r1332};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2201, %r2198}, {%r286, %r289}, {%r2072}, {%r1332, %r1332};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2131, %r341;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2133, %r2131, %r2135;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2136, %r338, %r2138, %r2133;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2140, %r341;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2142, %r2140, %r2144;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2145, %r338, %r2147, %r2142;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2149, %r341;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2151, %r2149, %r2153;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2154, %r338, %r2156, %r2151;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2158, %r341;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2160, %r2158, %r2162;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2163, %r338, %r2165, %r2160;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2167, %r341;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2169, %r2167, %r2171;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2172, %r338, %r2174, %r2169;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2176, %r341;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2178, %r2176, %r2180;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2181, %r338, %r2183, %r2178;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2185, %r341;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2187, %r2185, %r2189;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2190, %r338, %r2192, %r2187;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2194, %r341;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2196, %r2194, %r2198;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2199, %r338, %r2201, %r2196;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2203, %r341, %r2138;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2206, %r338, %r2135, %r2203;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2210, %r341, %r2147;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2213, %r338, %r2144, %r2210;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2217, %r341, %r2156;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2220, %r338, %r2153, %r2217;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2224, %r341, %r2165;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2227, %r338, %r2162, %r2224;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2231, %r341, %r2174;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2234, %r338, %r2171, %r2231;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2238, %r341, %r2183;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2241, %r338, %r2180, %r2238;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2245, %r341, %r2192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2248, %r338, %r2189, %r2245;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2252, %r341, %r2201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2255, %r338, %r2198, %r2252;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2259, %r2260}, {%r382, %r385}, {%r2136, %r2206}, {%r1332, %r1332}, %r197, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2268, %r2269}, {%r382, %r385}, {%r2145, %r2213}, {%r1332, %r1332}, %r197, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2277, %r2278}, {%r382, %r385}, {%r2154, %r2220}, {%r1332, %r1332}, %r197, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2286, %r2287}, {%r382, %r385}, {%r2163, %r2227}, {%r1332, %r1332}, %r197, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2295, %r2296}, {%r382, %r385}, {%r2172, %r2234}, {%r1332, %r1332}, %r197, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2304, %r2305}, {%r382, %r385}, {%r2181, %r2241}, {%r1332, %r1332}, %r197, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2313, %r2314}, {%r382, %r385}, {%r2190, %r2248}, {%r1332, %r1332}, %r197, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2322, %r2323}, {%r382, %r385}, {%r2199, %r2255}, {%r1332, %r1332}, %r197, 0;
	// end inline asm
	bar.sync 	0;
	add.s16 	%rs156, %rs194, -5;
	mul.hi.s16 	%rs157, %rs156, 10923;
	shr.u16 	%rs158, %rs157, 15;
	add.s16 	%rs159, %rs157, %rs158;
	mul.lo.s16 	%rs160, %rs159, 6;
	sub.s16 	%rs161, %rs156, %rs160;
	mul.wide.s16 	%r2913, %rs161, 16;
	add.s32 	%r2914, %r193, %r2913;
	mul.wide.s32 	%rd189, %r2914, 4;
	add.s64 	%rd191, %rd40, %rd189;
	ld.shared.u32 	%r2399, [%rd191];
	add.s32 	%r2915, %r194, %r2913;
	mul.wide.s32 	%rd192, %r2915, 4;
	add.s64 	%rd193, %rd40, %rd192;
	ld.shared.u32 	%r2406, [%rd193];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2416, %r2413}, {%r394, %r397}, {%r2399}, {%r1332, %r1332};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2425, %r2422}, {%r394, %r397}, {%r2406}, {%r1332, %r1332};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2409, %r435;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2411, %r2409, %r2413;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2414, %r432, %r2416, %r2411;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2418, %r435;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2420, %r2418, %r2422;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2423, %r432, %r2425, %r2420;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2427, %r435, %r2416;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2430, %r432, %r2413, %r2427;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2434, %r435, %r2425;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2437, %r432, %r2422, %r2434;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2460, %r2463}, {%r478, %r481}, {%r2414, %r2430}, {%r1332, %r1332}, %r249, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2467, %r2471}, {%r478, %r481}, {%r2423, %r2437}, {%r1332, %r1332}, %r249, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2459, %r2460, %r2460;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2462, %r2463, %r2463, %r2459;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2466, %r2467, %r2467, %r2462;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2470, %r2471, %r2471, %r2466;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2474, %r1817, %r2470, %r109;
	// end inline asm
	add.s16 	%rs162, %rs194, -4;
	mul.hi.s16 	%rs163, %rs162, 10923;
	shr.u16 	%rs164, %rs163, 15;
	add.s16 	%rs165, %rs163, %rs164;
	mul.lo.s16 	%rs166, %rs165, 6;
	sub.s16 	%rs167, %rs162, %rs166;
	mul.wide.s16 	%r2916, %rs167, 16;
	add.s32 	%r2917, %r193, %r2916;
	mul.wide.s32 	%rd194, %r2917, 4;
	add.s64 	%rd195, %rd40, %rd194;
	ld.shared.u32 	%r2482, [%rd195];
	add.s32 	%r2918, %r194, %r2916;
	mul.wide.s32 	%rd196, %r2918, 4;
	add.s64 	%rd197, %rd40, %rd196;
	ld.shared.u32 	%r2489, [%rd197];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2499, %r2496}, {%r394, %r397}, {%r2482}, {%r1332, %r1332};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2508, %r2505}, {%r394, %r397}, {%r2489}, {%r1332, %r1332};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2492, %r435;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2494, %r2492, %r2496;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2497, %r432, %r2499, %r2494;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2501, %r435;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2503, %r2501, %r2505;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2506, %r432, %r2508, %r2503;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2510, %r435, %r2499;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2513, %r432, %r2496, %r2510;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2517, %r435, %r2508;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2520, %r432, %r2505, %r2517;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2543, %r2546}, {%r478, %r481}, {%r2497, %r2513}, {%r1332, %r1332}, %r249, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2550, %r2554}, {%r478, %r481}, {%r2506, %r2520}, {%r1332, %r1332}, %r249, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2542, %r2543, %r2543;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2545, %r2546, %r2546, %r2542;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2549, %r2550, %r2550, %r2545;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2553, %r2554, %r2554, %r2549;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2557, %r1817, %r2553, %r2474;
	// end inline asm
	add.s16 	%rs168, %rs194, -3;
	mul.hi.s16 	%rs169, %rs168, 10923;
	shr.u16 	%rs170, %rs169, 15;
	add.s16 	%rs171, %rs169, %rs170;
	mul.lo.s16 	%rs172, %rs171, 6;
	sub.s16 	%rs173, %rs168, %rs172;
	mul.wide.s16 	%r2919, %rs173, 16;
	add.s32 	%r2920, %r193, %r2919;
	mul.wide.s32 	%rd198, %r2920, 4;
	add.s64 	%rd199, %rd40, %rd198;
	ld.shared.u32 	%r2565, [%rd199];
	add.s32 	%r2921, %r194, %r2919;
	mul.wide.s32 	%rd200, %r2921, 4;
	add.s64 	%rd201, %rd40, %rd200;
	ld.shared.u32 	%r2572, [%rd201];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2582, %r2579}, {%r394, %r397}, {%r2565}, {%r1332, %r1332};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2591, %r2588}, {%r394, %r397}, {%r2572}, {%r1332, %r1332};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2575, %r435;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2577, %r2575, %r2579;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2580, %r432, %r2582, %r2577;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2584, %r435;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2586, %r2584, %r2588;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2589, %r432, %r2591, %r2586;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2593, %r435, %r2582;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2596, %r432, %r2579, %r2593;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2600, %r435, %r2591;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2603, %r432, %r2588, %r2600;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2626, %r2629}, {%r478, %r481}, {%r2580, %r2596}, {%r1332, %r1332}, %r249, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2633, %r2637}, {%r478, %r481}, {%r2589, %r2603}, {%r1332, %r1332}, %r249, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2625, %r2626, %r2626;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2628, %r2629, %r2629, %r2625;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2632, %r2633, %r2633, %r2628;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2636, %r2637, %r2637, %r2632;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2640, %r1817, %r2636, %r2557;
	// end inline asm
	add.s16 	%rs174, %rs194, -2;
	mul.hi.s16 	%rs175, %rs174, 10923;
	shr.u16 	%rs176, %rs175, 15;
	add.s16 	%rs177, %rs175, %rs176;
	mul.lo.s16 	%rs178, %rs177, 6;
	sub.s16 	%rs179, %rs174, %rs178;
	mul.wide.s16 	%r2922, %rs179, 16;
	add.s32 	%r2923, %r193, %r2922;
	mul.wide.s32 	%rd202, %r2923, 4;
	add.s64 	%rd203, %rd40, %rd202;
	ld.shared.u32 	%r2648, [%rd203];
	add.s32 	%r2924, %r194, %r2922;
	mul.wide.s32 	%rd204, %r2924, 4;
	add.s64 	%rd205, %rd40, %rd204;
	ld.shared.u32 	%r2655, [%rd205];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2665, %r2662}, {%r394, %r397}, {%r2648}, {%r1332, %r1332};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2674, %r2671}, {%r394, %r397}, {%r2655}, {%r1332, %r1332};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2658, %r435;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2660, %r2658, %r2662;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2663, %r432, %r2665, %r2660;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2667, %r435;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2669, %r2667, %r2671;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2672, %r432, %r2674, %r2669;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2676, %r435, %r2665;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2679, %r432, %r2662, %r2676;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2683, %r435, %r2674;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2686, %r432, %r2671, %r2683;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2709, %r2712}, {%r478, %r481}, {%r2663, %r2679}, {%r1332, %r1332}, %r249, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2716, %r2720}, {%r478, %r481}, {%r2672, %r2686}, {%r1332, %r1332}, %r249, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2708, %r2709, %r2709;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2711, %r2712, %r2712, %r2708;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2715, %r2716, %r2716, %r2711;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2719, %r2720, %r2720, %r2715;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2723, %r1817, %r2719, %r2640;
	// end inline asm
	add.s16 	%rs180, %rs194, -1;
	mul.hi.s16 	%rs181, %rs180, 10923;
	shr.u16 	%rs182, %rs181, 15;
	add.s16 	%rs183, %rs181, %rs182;
	mul.lo.s16 	%rs184, %rs183, 6;
	sub.s16 	%rs185, %rs180, %rs184;
	mul.wide.s16 	%r2925, %rs185, 16;
	add.s32 	%r2926, %r193, %r2925;
	mul.wide.s32 	%rd206, %r2926, 4;
	add.s64 	%rd207, %rd40, %rd206;
	ld.shared.u32 	%r2731, [%rd207];
	add.s32 	%r2927, %r194, %r2925;
	mul.wide.s32 	%rd208, %r2927, 4;
	add.s64 	%rd209, %rd40, %rd208;
	ld.shared.u32 	%r2738, [%rd209];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2748, %r2745}, {%r394, %r397}, {%r2731}, {%r1332, %r1332};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2757, %r2754}, {%r394, %r397}, {%r2738}, {%r1332, %r1332};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2741, %r435;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2743, %r2741, %r2745;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2746, %r432, %r2748, %r2743;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2750, %r435;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2752, %r2750, %r2754;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2755, %r432, %r2757, %r2752;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2759, %r435, %r2748;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2762, %r432, %r2745, %r2759;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2766, %r435, %r2757;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2769, %r432, %r2754, %r2766;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2792, %r2795}, {%r478, %r481}, {%r2746, %r2762}, {%r1332, %r1332}, %r249, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2799, %r2803}, {%r478, %r481}, {%r2755, %r2769}, {%r1332, %r1332}, %r249, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2791, %r2792, %r2792;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2794, %r2795, %r2795, %r2791;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2798, %r2799, %r2799, %r2794;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2802, %r2803, %r2803, %r2798;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2806, %r1817, %r2802, %r2723;
	// end inline asm
	mul.hi.s16 	%rs186, %rs194, 10923;
	shr.u16 	%rs187, %rs186, 15;
	add.s16 	%rs188, %rs186, %rs187;
	mul.lo.s16 	%rs189, %rs188, 6;
	sub.s16 	%rs190, %rs194, %rs189;
	mul.wide.s16 	%r2928, %rs190, 16;
	add.s32 	%r2929, %r193, %r2928;
	mul.wide.s32 	%rd210, %r2929, 4;
	add.s64 	%rd211, %rd40, %rd210;
	ld.shared.u32 	%r2814, [%rd211];
	add.s32 	%r2930, %r194, %r2928;
	mul.wide.s32 	%rd212, %r2930, 4;
	add.s64 	%rd213, %rd40, %rd212;
	ld.shared.u32 	%r2821, [%rd213];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2831, %r2828}, {%r394, %r397}, {%r2814}, {%r1332, %r1332};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2840, %r2837}, {%r394, %r397}, {%r2821}, {%r1332, %r1332};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2824, %r435;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2826, %r2824, %r2828;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2829, %r432, %r2831, %r2826;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2833, %r435;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2835, %r2833, %r2837;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2838, %r432, %r2840, %r2835;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2842, %r435, %r2831;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2845, %r432, %r2828, %r2842;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2849, %r435, %r2840;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2852, %r432, %r2837, %r2849;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2875, %r2878}, {%r478, %r481}, {%r2829, %r2845}, {%r1332, %r1332}, %r249, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2882, %r2886}, {%r478, %r481}, {%r2838, %r2852}, {%r1332, %r1332}, %r249, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2874, %r2875, %r2875;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2877, %r2878, %r2878, %r2874;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2881, %r2882, %r2882, %r2877;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2885, %r2886, %r2886, %r2881;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r109, %r1817, %r2885, %r2806;
	// end inline asm
	add.s32 	%r107, %r107, 6;
	setp.eq.s32 	%p291, %r107, 192;
	@%p291 bra 	$L__BB0_220;
	bra.uni 	$L__BB0_167;
$L__BB0_220:                            // %pass9844
                                        //   in Loop: Header=BB0_166 Depth=2
	mul.lo.s32 	%r2932, %r108, 786432;
	or.b32  	%r2933, %r2932, %r195;
	or.b32  	%r2934, %r2933, %r5;
	add.s32 	%r2935, %r2934, %r196;
	cvt.u64.u32 	%rd214, %r2935;
	add.s64 	%rd215, %rd214, %rd7;
	mul.hi.s64 	%rd216, %rd215, 3074457345618258603;
	shr.u64 	%rd217, %rd216, 63;
	shr.s64 	%rd218, %rd216, 27;
	add.s64 	%rd219, %rd218, %rd217;
	setp.lt.s64 	%p292, %rd215, 0;
	mul.lo.s64 	%rd220, %rd219, 805306368;
	setp.ne.s64 	%p293, %rd220, %rd215;
	and.pred  	%p294, %p292, %p293;
	selp.s64 	%rd221, -1, 0, %p294;
	add.s64 	%rd222, %rd219, %rd221;
	mul.lo.s64 	%rd223, %rd222, -805306368;
	add.s64 	%rd224, %rd223, %rd215;
	shl.b64 	%rd225, %rd224, 2;
	add.s64 	%rd226, %rd4, %rd225;
	st.global.u32 	[%rd226], %r109;
	add.s32 	%r108, %r108, 1;
	mov.u32 	%r107, 0;
	mov.u32 	%r109, %r107;
	bra.uni 	$L__BB0_167;
$L__BB0_169:                            // %L23491
	mov.u32 	%r2936, 0;
	st.global.u32 	[%rd6], %r2936;
	ret;
$L__BB0_163:                            // %post_box_union
	mov.u64 	%rd146, exception1875;
	cvta.global.u64 	%rd147, %rd146;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd147;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r254;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_217:                            // %post_box_union5238
	mov.u64 	%rd153, exception1875;
	cvta.global.u64 	%rd154, %rd153;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd154;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r254;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L5153
	mov.u32 	%r2952, 5;
	st.global.u32 	[%rd6], %r2952;
	mov.u64 	%rd257, exception1835;
	cvta.global.u64 	%rd258, %rd257;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd258;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r254;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L5313
	mov.u32 	%r2951, 5;
	st.global.u32 	[%rd6], %r2951;
	mov.u64 	%rd255, exception1835;
	cvta.global.u64 	%rd256, %rd255;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd256;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r254;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L5473
	mov.u32 	%r2950, 5;
	st.global.u32 	[%rd6], %r2950;
	mov.u64 	%rd253, exception1835;
	cvta.global.u64 	%rd254, %rd253;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd254;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r254;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L5633
	mov.u32 	%r2949, 5;
	st.global.u32 	[%rd6], %r2949;
	mov.u64 	%rd251, exception1835;
	cvta.global.u64 	%rd252, %rd251;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd252;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r254;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L5793
	mov.u32 	%r2948, 5;
	st.global.u32 	[%rd6], %r2948;
	mov.u64 	%rd249, exception1835;
	cvta.global.u64 	%rd250, %rd249;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd250;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r254;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L5953
	mov.u32 	%r2947, 5;
	st.global.u32 	[%rd6], %r2947;
	mov.u64 	%rd247, exception1835;
	cvta.global.u64 	%rd248, %rd247;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd248;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r254;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_151:                            // %L6113
	mov.u32 	%r2946, 5;
	st.global.u32 	[%rd6], %r2946;
	mov.u64 	%rd245, exception1835;
	cvta.global.u64 	%rd246, %rd245;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd246;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r254;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_152:                            // %L6273
	mov.u32 	%r2945, 5;
	st.global.u32 	[%rd6], %r2945;
	mov.u64 	%rd243, exception1835;
	cvta.global.u64 	%rd244, %rd243;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd244;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r254;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_153:                            // %L6433
	mov.u32 	%r2944, 5;
	st.global.u32 	[%rd6], %r2944;
	mov.u64 	%rd241, exception1835;
	cvta.global.u64 	%rd242, %rd241;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd242;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r254;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_154:                            // %L6593
	mov.u32 	%r2943, 5;
	st.global.u32 	[%rd6], %r2943;
	mov.u64 	%rd239, exception1835;
	cvta.global.u64 	%rd240, %rd239;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd240;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r254;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_155:                            // %L6779
	mov.u32 	%r2942, 5;
	st.global.u32 	[%rd6], %r2942;
	mov.u64 	%rd237, exception1835;
	cvta.global.u64 	%rd238, %rd237;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd238;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r254;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_156:                            // %L6939
	mov.u32 	%r2941, 5;
	st.global.u32 	[%rd6], %r2941;
	mov.u64 	%rd235, exception1835;
	cvta.global.u64 	%rd236, %rd235;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd236;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r254;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_157:                            // %L7099
	mov.u32 	%r2940, 5;
	st.global.u32 	[%rd6], %r2940;
	mov.u64 	%rd233, exception1835;
	cvta.global.u64 	%rd234, %rd233;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd234;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r254;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_158:                            // %L7259
	mov.u32 	%r2939, 5;
	st.global.u32 	[%rd6], %r2939;
	mov.u64 	%rd231, exception1835;
	cvta.global.u64 	%rd232, %rd231;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd232;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r254;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_159:                            // %L7419
	mov.u32 	%r2938, 5;
	st.global.u32 	[%rd6], %r2938;
	mov.u64 	%rd229, exception1835;
	cvta.global.u64 	%rd230, %rd229;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd230;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r254;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_160:                            // %L7579
	mov.u32 	%r2937, 5;
	st.global.u32 	[%rd6], %r2937;
	mov.u64 	%rd227, exception1835;
	cvta.global.u64 	%rd228, %rd227;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd228;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r254;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L169
	mov.u32 	%r2954, 2;
	st.global.u32 	[%rd6], %r2954;
	mov.u64 	%rd261, exception1835;
	cvta.global.u64 	%rd262, %rd261;
	{ // callseq 90, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd262;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 90
	{ // callseq 91, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r254;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 91
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_12:                             // %L312
	mov.u32 	%r2953, 3;
	st.global.u32 	[%rd6], %r2953;
	mov.u64 	%rd259, exception1835;
	cvta.global.u64 	%rd260, %rd259;
	{ // callseq 88, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd260;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 88
	{ // callseq 89, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r254;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 89
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 47
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r254;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 48
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_144:                            // %L1158
	add.u64 	%rd17, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r264, %r2};
	st.local.v2.u32 	[%rd5+8], {%r4, %r84};
	st.local.u32 	[%rd5+16], %r85;
	mov.u64 	%rd23, __unnamed_1;
	cvta.global.u64 	%rd24, %rd23;
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd24;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd17;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r491, [retval0+0];
	} // callseq 49
	mov.u32 	%r493, 4;
	st.global.u32 	[%rd6], %r493;
	mov.u64 	%rd26, exception1835;
	cvta.global.u64 	%rd27, %rd26;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd27;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r254;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
