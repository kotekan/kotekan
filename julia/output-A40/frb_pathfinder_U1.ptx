// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=192, blocks_per_sm=4

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception3564[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception3604[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 192, 1, 1
.minnctapersm 4
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<302>;
	.reg .b16 	%rs<191>;
	.reg .b32 	%r<3143>;
	.reg .f32 	%f<790>;
	.reg .b64 	%rd<369>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r308, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd48, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r317, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p4, %r317, 13919;
	@%p4 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd49, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r309, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r318, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r3, %r2, 192;
	mov.u32 	%r4, %tid.y;
	shl.b32 	%r5, %r4, 5;
	or.b32  	%r319, %r3, %r318;
	add.s32 	%r320, %r319, %r5;
	mul.wide.u32 	%rd56, %r320, 4;
	add.s64 	%rd6, %rd49, %rd56;
	mov.u32 	%r321, 1;
	st.global.u32 	[%rd6], %r321;
	setp.gt.u32 	%p5, %r309, 32767;
	@%p5 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r310, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p6, %r310, %r309;
	setp.gt.s32 	%p7, %r310, 65535;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r311, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r310, %r309;
	mad.lo.s32 	%r322, %r6, -1431655765, 715827872;
	shf.r.wrap.b32 	%r323, %r322, %r322, 4;
	setp.gt.u32 	%p9, %r323, 89478484;
	setp.gt.u32 	%p10, %r311, 1023;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r312, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p12, %r312, %r311;
	setp.lt.s32 	%p13, %r312, 2048;
	and.pred  	%p14, %p12, %p13;
	@%p14 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r324, %r312, %r311;
	mul.hi.s32 	%r325, %r6, 715827883;
	shr.u32 	%r326, %r325, 31;
	shr.s32 	%r327, %r325, 5;
	add.s32 	%r328, %r327, %r326;
	setp.eq.s32 	%p15, %r324, %r328;
	@%p15 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L258
	ld.param.u32 	%r313, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p16, %r313, 0;
	@%p16 bra 	$L__BB0_12;
// %bb.9:                               // %L260
	ld.param.u32 	%r315, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	ld.param.u32 	%r314, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p17, %r314, %r313;
	setp.gt.s32 	%p18, %r314, 384;
	or.pred  	%p19, %p17, %p18;
	setp.lt.s32 	%p20, %r315, 0;
	or.pred  	%p21, %p19, %p20;
	@%p21 bra 	$L__BB0_12;
// %bb.10:                              // %L276
	ld.param.u32 	%r316, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p22, %r316, %r315;
	setp.gt.s32 	%p23, %r316, 4096;
	or.pred  	%p24, %p22, %p23;
	@%p24 bra 	$L__BB0_12;
// %bb.11:                              // %L286
	sub.s32 	%r329, %r316, %r315;
	sub.s32 	%r330, %r314, %r313;
	setp.eq.s32 	%p25, %r329, %r330;
	@%p25 bra 	$L__BB0_171;
	bra.uni 	$L__BB0_12;
$L__BB0_171:                            // %pass162
	and.b32  	%r167, %r318, 3;
	shr.u32 	%r168, %r318, 2;
	mul.lo.s32 	%r331, %r167, %r168;
	and.b32  	%r332, %r331, 7;
	cvt.rn.f32.s32 	%f205, %r332;
	mov.f32 	%f206, 0f40800000;
	div.approx.f32 	%f169, %f205, %f206;
	abs.f32 	%f788, %f169;
	setp.lt.f32 	%p26, %f788, 0f40000000;
	setp.gtu.f32 	%p301, %f788, 0f4B800000;
	mov.f32 	%f784, %f788;
	@%p26 bra 	$L__BB0_183;
// %bb.172:
	@%p301 bra 	$L__BB0_179;
	bra.uni 	$L__BB0_173;
$L__BB0_179:
	mov.b32 	%r170, %f788;
	and.b32  	%r333, %r170, 8388607;
	or.b32  	%r3138, %r333, 1065353216;
	mov.b32 	%f783, %r3138;
	add.s32 	%r334, %r170, -1073741824;
	and.b32  	%r3139, %r334, -8388608;
	setp.eq.s32 	%p33, %r3139, 0;
	@%p33 bra 	$L__BB0_182;
// %bb.180:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f216, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f215,%f216;
	// end inline asm
$L__BB0_181:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r335, %r3139, 192937984;
	add.s32 	%r336, %r3138, %r335;
	mov.b32 	%f217, %r336;
	mul.f32 	%f218, %f215, %f217;
	sub.f32 	%f219, %f217, %f218;
	fma.rn.f32 	%f220, %f219, %f215, %f218;
	sub.f32 	%f221, %f217, %f220;
	fma.rz.f32 	%f222, %f221, %f215, %f220;
	cvt.rzi.f32.f32 	%f223, %f222;
	sub.f32 	%f783, %f217, %f223;
	sub.s32 	%r3139, %r3139, %r335;
	mov.b32 	%r3138, %f783;
	setp.ne.s32 	%p34, %r3139, 0;
	setp.ne.s32 	%p35, %r3138, 0;
	and.pred  	%p36, %p34, %p35;
	@%p36 bra 	$L__BB0_181;
$L__BB0_182:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p37, %r170, 2139095039;
	selp.f32 	%f224, 0f7FFFFFFF, 0f4B800000, %p37;
	mul.f32 	%f225, %f783, 0f34000000;
	mul.f32 	%f784, %f224, %f225;
	bra.uni 	$L__BB0_183;
$L__BB0_173:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f207, 0f40000000;
	div.approx.f32 	%f208, %f788, %f207;
	cvt.rzi.f32.f32 	%f782, %f208;
	fma.rn.f32 	%f172, %f782, 0fC0000000, %f788;
	mov.b32 	%r169, %f172;
	setp.lt.u32 	%p28, %r169, 1073741824;
	@%p28 bra 	$L__BB0_178;
// %bb.174:
	setp.lt.u32 	%p29, %r169, -2147483647;
	@%p29 bra 	$L__BB0_176;
// %bb.175:
	add.f32 	%f213, %f782, 0fBF800000;
	setp.lt.f32 	%p32, %f172, 0fC0000000;
	add.f32 	%f214, %f213, 0fBF800000;
	selp.f32 	%f782, %f214, %f213, %p32;
	bra.uni 	$L__BB0_178;
$L__BB0_176:
	add.f32 	%f782, %f782, 0f3F800000;
	setp.ltu.f32 	%p30, %f172, 0f40800000;
	@%p30 bra 	$L__BB0_178;
// %bb.177:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f209, %f782, 0f3F800000;
	fma.rn.f32 	%f211, %f207, 0fC0400000, %f172;
	setp.ge.f32 	%p31, %f211, 0f00000000;
	add.f32 	%f212, %f209, 0f3F800000;
	selp.f32 	%f782, %f212, %f209, %p31;
$L__BB0_178:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f784, %f782, 0fC0000000, %f788;
$L__BB0_183:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f226, %f784;
	setp.gtu.f32 	%p38, %f226, 0f7F800000;
	mov.b32 	%r337, %f169;
	and.b32  	%r177, %r337, -2147483648;
	@%p38 bra 	$L__BB0_185;
// %bb.184:
	mov.b32 	%r338, %f784;
	or.b32  	%r339, %r177, %r338;
	mov.b32 	%f784, %r339;
$L__BB0_185:                            // %__nv_fmodf.exit
	shl.b32 	%r180, %r318, 1;
	and.b32  	%r181, %r180, 2;
	mul.lo.s32 	%r354, %r181, %r168;
	cvt.rn.f32.s32 	%f259, %r354;
	mov.f32 	%f260, 0f41400000;
	div.approx.f32 	%f186, %f259, %f260;
	abs.f32 	%f734, %f186;
	setp.lt.f32 	%p46, %f734, 0f40000000;
	@%p46 bra 	$L__BB0_24;
// %bb.13:
	setp.gtu.f32 	%p47, %f734, 0f4B800000;
	@%p47 bra 	$L__BB0_20;
	bra.uni 	$L__BB0_14;
$L__BB0_20:
	mov.b32 	%r8, %f734;
	and.b32  	%r355, %r8, 8388607;
	or.b32  	%r3086, %r355, 1065353216;
	mov.b32 	%f733, %r3086;
	add.s32 	%r356, %r8, -1073741824;
	and.b32  	%r3087, %r356, -8388608;
	setp.eq.s32 	%p53, %r3087, 0;
	@%p53 bra 	$L__BB0_23;
// %bb.21:                              // %__nv_fmaf_rn.exit4.i.i.i2022.preheader
	mov.f32 	%f270, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f269,%f270;
	// end inline asm
$L__BB0_22:                             // %__nv_fmaf_rn.exit4.i.i.i2022
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r357, %r3087, 192937984;
	add.s32 	%r358, %r3086, %r357;
	mov.b32 	%f271, %r358;
	mul.f32 	%f272, %f269, %f271;
	sub.f32 	%f273, %f271, %f272;
	fma.rn.f32 	%f274, %f273, %f269, %f272;
	sub.f32 	%f275, %f271, %f274;
	fma.rz.f32 	%f276, %f275, %f269, %f274;
	cvt.rzi.f32.f32 	%f277, %f276;
	sub.f32 	%f733, %f271, %f277;
	sub.s32 	%r3087, %r3087, %r357;
	mov.b32 	%r3086, %f733;
	setp.ne.s32 	%p54, %r3087, 0;
	setp.ne.s32 	%p55, %r3086, 0;
	and.pred  	%p56, %p54, %p55;
	@%p56 bra 	$L__BB0_22;
$L__BB0_23:                             // %__internal_fmodf_slowpath_mod.exit.i.i2024
	setp.gt.u32 	%p57, %r8, 2139095039;
	selp.f32 	%f278, 0f7FFFFFFF, 0f4B800000, %p57;
	mul.f32 	%f279, %f733, 0f34000000;
	mul.f32 	%f734, %f278, %f279;
	bra.uni 	$L__BB0_24;
$L__BB0_14:                             // %__nv_fast_fdividef.exit.i.i.i2001
	mov.f32 	%f261, 0f40000000;
	div.approx.f32 	%f262, %f734, %f261;
	cvt.rzi.f32.f32 	%f732, %f262;
	fma.rn.f32 	%f2, %f732, 0fC0000000, %f734;
	mov.b32 	%r7, %f2;
	setp.lt.u32 	%p48, %r7, 1073741824;
	@%p48 bra 	$L__BB0_19;
// %bb.15:
	setp.lt.u32 	%p49, %r7, -2147483647;
	@%p49 bra 	$L__BB0_17;
// %bb.16:
	add.f32 	%f267, %f732, 0fBF800000;
	setp.lt.f32 	%p52, %f2, 0fC0000000;
	add.f32 	%f268, %f267, 0fBF800000;
	selp.f32 	%f732, %f268, %f267, %p52;
	bra.uni 	$L__BB0_19;
$L__BB0_17:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p50, %f2, 0f40800000;
	@%p50 bra 	$L__BB0_19;
// %bb.18:                              // %__nv_fmaf_rn.exit.i.i.i2005
	add.f32 	%f263, %f732, 0f3F800000;
	fma.rn.f32 	%f265, %f261, 0fC0400000, %f2;
	setp.ge.f32 	%p51, %f265, 0f00000000;
	add.f32 	%f266, %f263, 0f3F800000;
	selp.f32 	%f732, %f266, %f263, %p51;
$L__BB0_19:                             // %__internal_fmodf_fastpath_quot.exit.i.i2008
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_24:                             // %__internal_fmodf_kernel.exit.i2027
	or.b32  	%r182, %r181, 1;
	abs.f32 	%f280, %f734;
	setp.gtu.f32 	%p58, %f280, 0f7F800000;
	@%p58 bra 	$L__BB0_26;
// %bb.25:
	mov.b32 	%r359, %f186;
	and.b32  	%r360, %r359, -2147483648;
	mov.b32 	%r361, %f734;
	or.b32  	%r362, %r360, %r361;
	mov.b32 	%f734, %r362;
$L__BB0_26:                             // %__nv_fmodf.exit2028
	mov.f32 	%f250, 0f00000000;
	setp.eq.s32 	%p66, %r182, 3;
	mov.f32 	%f37, %f250;
	mov.f32 	%f38, %f250;
	@%p66 bra 	$L__BB0_42;
// %bb.27:                              // %L525
	mul.lo.s32 	%r371, %r182, %r168;
	mul.hi.u32 	%r372, %r371, -1431655765;
	shr.u32 	%r373, %r372, 4;
	mul.lo.s32 	%r374, %r373, 24;
	sub.s32 	%r375, %r371, %r374;
	cvt.rn.f32.s32 	%f311, %r375;
	div.approx.f32 	%f18, %f311, %f260;
	abs.f32 	%f738, %f18;
	setp.lt.f32 	%p67, %f738, 0f40000000;
	@%p67 bra 	$L__BB0_39;
// %bb.28:
	setp.gtu.f32 	%p68, %f738, 0f4B800000;
	@%p68 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_29;
$L__BB0_35:
	mov.b32 	%r16, %f738;
	and.b32  	%r376, %r16, 8388607;
	or.b32  	%r3088, %r376, 1065353216;
	mov.b32 	%f737, %r3088;
	add.s32 	%r377, %r16, -1073741824;
	and.b32  	%r3089, %r377, -8388608;
	setp.eq.s32 	%p74, %r3089, 0;
	@%p74 bra 	$L__BB0_38;
// %bb.36:                              // %__nv_fmaf_rn.exit4.i.i.i2053.preheader
	mov.f32 	%f322, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f321,%f322;
	// end inline asm
$L__BB0_37:                             // %__nv_fmaf_rn.exit4.i.i.i2053
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r378, %r3089, 192937984;
	add.s32 	%r379, %r3088, %r378;
	mov.b32 	%f323, %r379;
	mul.f32 	%f324, %f321, %f323;
	sub.f32 	%f325, %f323, %f324;
	fma.rn.f32 	%f326, %f325, %f321, %f324;
	sub.f32 	%f327, %f323, %f326;
	fma.rz.f32 	%f328, %f327, %f321, %f326;
	cvt.rzi.f32.f32 	%f329, %f328;
	sub.f32 	%f737, %f323, %f329;
	sub.s32 	%r3089, %r3089, %r378;
	mov.b32 	%r3088, %f737;
	setp.ne.s32 	%p75, %r3089, 0;
	setp.ne.s32 	%p76, %r3088, 0;
	and.pred  	%p77, %p75, %p76;
	@%p77 bra 	$L__BB0_37;
$L__BB0_38:                             // %__internal_fmodf_slowpath_mod.exit.i.i2055
	setp.gt.u32 	%p78, %r16, 2139095039;
	selp.f32 	%f330, 0f7FFFFFFF, 0f4B800000, %p78;
	mul.f32 	%f331, %f737, 0f34000000;
	mul.f32 	%f738, %f330, %f331;
	bra.uni 	$L__BB0_39;
$L__BB0_29:                             // %__nv_fast_fdividef.exit.i.i.i2032
	mov.f32 	%f313, 0f40000000;
	div.approx.f32 	%f314, %f738, %f313;
	cvt.rzi.f32.f32 	%f736, %f314;
	fma.rn.f32 	%f21, %f736, 0fC0000000, %f738;
	mov.b32 	%r15, %f21;
	setp.lt.u32 	%p69, %r15, 1073741824;
	@%p69 bra 	$L__BB0_34;
// %bb.30:
	setp.lt.u32 	%p70, %r15, -2147483647;
	@%p70 bra 	$L__BB0_32;
// %bb.31:
	add.f32 	%f319, %f736, 0fBF800000;
	setp.lt.f32 	%p73, %f21, 0fC0000000;
	add.f32 	%f320, %f319, 0fBF800000;
	selp.f32 	%f736, %f320, %f319, %p73;
	bra.uni 	$L__BB0_34;
$L__BB0_32:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p71, %f21, 0f40800000;
	@%p71 bra 	$L__BB0_34;
// %bb.33:                              // %__nv_fmaf_rn.exit.i.i.i2036
	add.f32 	%f315, %f736, 0f3F800000;
	fma.rn.f32 	%f317, %f313, 0fC0400000, %f21;
	setp.ge.f32 	%p72, %f317, 0f00000000;
	add.f32 	%f318, %f315, 0f3F800000;
	selp.f32 	%f736, %f318, %f315, %p72;
$L__BB0_34:                             // %__internal_fmodf_fastpath_quot.exit.i.i2039
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_39:                             // %__internal_fmodf_kernel.exit.i2058
	abs.f32 	%f332, %f738;
	setp.gtu.f32 	%p79, %f332, 0f7F800000;
	@%p79 bra 	$L__BB0_41;
// %bb.40:
	mov.b32 	%r380, %f18;
	and.b32  	%r381, %r380, -2147483648;
	mov.b32 	%r382, %f738;
	or.b32  	%r383, %r381, %r382;
	mov.b32 	%f738, %r383;
$L__BB0_41:                             // %__nv_fmodf.exit2059
	add.f32 	%f333, %f738, %f738;
	mov.b32 	%r384, %f333;
	and.b32  	%r385, %r384, -2147483648;
	or.b32  	%r386, %r385, 1056964608;
	mov.b32 	%f334, %r386;
	add.f32 	%f335, %f333, %f334;
	cvt.rzi.f32.f32 	%f336, %f335;
	abs.f32 	%f337, %f333;
	setp.gt.f32 	%p80, %f337, 0f4B000000;
	selp.f32 	%f338, %f333, %f336, %p80;
	cvt.rzi.f32.f32 	%f339, %f333;
	setp.lt.f32 	%p81, %f337, 0f3F000000;
	selp.f32 	%f340, %f339, %f338, %p81;
	cvt.rzi.s32.f32 	%r387, %f340;
	fma.rn.f32 	%f341, %f340, 0fBF000000, %f738;
	mul.f32 	%f342, %f341, %f341;
	fma.rn.f32 	%f343, %f342, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f344, %f342, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f345, %f343, %f342, 0fC0A55DF6;
	fma.rn.f32 	%f346, %f344, %f342, 0f4081E0CF;
	fma.rn.f32 	%f347, %f342, %f341, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f342, 0fC09DE9E6;
	fma.rn.f32 	%f349, %f345, %f347, 0f00000000;
	fma.rn.f32 	%f350, %f348, %f342, 0f3F800000;
	fma.rn.f32 	%f351, %f341, 0f40490FDB, %f349;
	and.b32  	%r388, %r387, 1;
	setp.eq.b32 	%p82, %r388, 1;
	selp.f32 	%f352, %f350, %f351, %p82;
	selp.f32 	%f353, %f351, %f350, %p82;
	and.b32  	%r389, %r387, 2;
	setp.eq.s32 	%p83, %r389, 0;
	neg.f32 	%f354, %f352;
	selp.f32 	%f355, %f352, %f354, %p83;
	add.s32 	%r390, %r387, 1;
	and.b32  	%r391, %r390, 2;
	setp.eq.s32 	%p84, %r391, 0;
	mov.f32 	%f356, 0f00000000;
	sub.f32 	%f357, %f356, %f353;
	selp.f32 	%f358, %f353, %f357, %p84;
	cvt.rzi.f32.f32 	%f359, %f738;
	setp.eq.f32 	%p85, %f359, %f738;
	mul.f32 	%f360, %f738, 0f00000000;
	selp.f32 	%f38, %f360, %f355, %p85;
	abs.f32 	%f361, %f738;
	setp.gt.f32 	%p86, %f361, 0f4B800000;
	add.f32 	%f362, %f38, 0f3F800000;
	selp.f32 	%f37, %f362, %f358, %p86;
$L__BB0_42:                             // %L559
	and.b32  	%r25, %r168, 3;
	setp.eq.s32 	%p87, %r25, 3;
	mov.f32 	%f731, 0f3FC00000;
	mov.f32 	%f746, %f250;
	mov.f32 	%f755, %f250;
	@%p87 bra 	$L__BB0_58;
// %bb.43:                              // %L597
	mul.lo.s32 	%r398, %r181, %r25;
	cvt.u16.u32 	%rs9, %r398;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 9;
	mul.lo.s16 	%rs12, %rs11, 3;
	sub.s16 	%rs13, %rs9, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f364, %rs14;
	div.approx.f32 	%f39, %f364, %f731;
	abs.f32 	%f744, %f39;
	setp.lt.f32 	%p88, %f744, 0f40000000;
	@%p88 bra 	$L__BB0_55;
// %bb.44:
	setp.gtu.f32 	%p89, %f744, 0f4B800000;
	@%p89 bra 	$L__BB0_51;
	bra.uni 	$L__BB0_45;
$L__BB0_51:
	mov.b32 	%r27, %f744;
	and.b32  	%r399, %r27, 8388607;
	or.b32  	%r3090, %r399, 1065353216;
	mov.b32 	%f743, %r3090;
	add.s32 	%r400, %r27, -1073741824;
	and.b32  	%r3091, %r400, -8388608;
	setp.eq.s32 	%p95, %r3091, 0;
	@%p95 bra 	$L__BB0_54;
// %bb.52:                              // %__nv_fmaf_rn.exit4.i.i.i2084.preheader
	mov.f32 	%f375, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f374,%f375;
	// end inline asm
$L__BB0_53:                             // %__nv_fmaf_rn.exit4.i.i.i2084
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r401, %r3091, 192937984;
	add.s32 	%r402, %r3090, %r401;
	mov.b32 	%f376, %r402;
	mul.f32 	%f377, %f374, %f376;
	sub.f32 	%f378, %f376, %f377;
	fma.rn.f32 	%f379, %f378, %f374, %f377;
	sub.f32 	%f380, %f376, %f379;
	fma.rz.f32 	%f381, %f380, %f374, %f379;
	cvt.rzi.f32.f32 	%f382, %f381;
	sub.f32 	%f743, %f376, %f382;
	sub.s32 	%r3091, %r3091, %r401;
	mov.b32 	%r3090, %f743;
	setp.ne.s32 	%p96, %r3091, 0;
	setp.ne.s32 	%p97, %r3090, 0;
	and.pred  	%p98, %p96, %p97;
	@%p98 bra 	$L__BB0_53;
$L__BB0_54:                             // %__internal_fmodf_slowpath_mod.exit.i.i2086
	setp.gt.u32 	%p99, %r27, 2139095039;
	selp.f32 	%f383, 0f7FFFFFFF, 0f4B800000, %p99;
	mul.f32 	%f384, %f743, 0f34000000;
	mul.f32 	%f744, %f383, %f384;
	bra.uni 	$L__BB0_55;
$L__BB0_45:                             // %__nv_fast_fdividef.exit.i.i.i2063
	mov.f32 	%f366, 0f40000000;
	div.approx.f32 	%f367, %f744, %f366;
	cvt.rzi.f32.f32 	%f742, %f367;
	fma.rn.f32 	%f42, %f742, 0fC0000000, %f744;
	mov.b32 	%r26, %f42;
	setp.lt.u32 	%p90, %r26, 1073741824;
	@%p90 bra 	$L__BB0_50;
// %bb.46:
	setp.lt.u32 	%p91, %r26, -2147483647;
	@%p91 bra 	$L__BB0_48;
// %bb.47:
	add.f32 	%f372, %f742, 0fBF800000;
	setp.lt.f32 	%p94, %f42, 0fC0000000;
	add.f32 	%f373, %f372, 0fBF800000;
	selp.f32 	%f742, %f373, %f372, %p94;
	bra.uni 	$L__BB0_50;
$L__BB0_48:
	add.f32 	%f742, %f742, 0f3F800000;
	setp.ltu.f32 	%p92, %f42, 0f40800000;
	@%p92 bra 	$L__BB0_50;
// %bb.49:                              // %__nv_fmaf_rn.exit.i.i.i2067
	add.f32 	%f368, %f742, 0f3F800000;
	fma.rn.f32 	%f370, %f366, 0fC0400000, %f42;
	setp.ge.f32 	%p93, %f370, 0f00000000;
	add.f32 	%f371, %f368, 0f3F800000;
	selp.f32 	%f742, %f371, %f368, %p93;
$L__BB0_50:                             // %__internal_fmodf_fastpath_quot.exit.i.i2070
	fma.rn.f32 	%f744, %f742, 0fC0000000, %f744;
$L__BB0_55:                             // %__internal_fmodf_kernel.exit.i2089
	abs.f32 	%f385, %f744;
	setp.gtu.f32 	%p100, %f385, 0f7F800000;
	@%p100 bra 	$L__BB0_57;
// %bb.56:
	mov.b32 	%r403, %f39;
	and.b32  	%r404, %r403, -2147483648;
	mov.b32 	%r405, %f744;
	or.b32  	%r406, %r404, %r405;
	mov.b32 	%f744, %r406;
$L__BB0_57:                             // %__nv_fmodf.exit2090
	add.f32 	%f386, %f744, %f744;
	mov.b32 	%r407, %f386;
	and.b32  	%r408, %r407, -2147483648;
	or.b32  	%r409, %r408, 1056964608;
	mov.b32 	%f387, %r409;
	add.f32 	%f388, %f386, %f387;
	cvt.rzi.f32.f32 	%f389, %f388;
	abs.f32 	%f390, %f386;
	setp.gt.f32 	%p101, %f390, 0f4B000000;
	selp.f32 	%f391, %f386, %f389, %p101;
	cvt.rzi.f32.f32 	%f392, %f386;
	setp.lt.f32 	%p102, %f390, 0f3F000000;
	selp.f32 	%f393, %f392, %f391, %p102;
	cvt.rzi.s32.f32 	%r410, %f393;
	fma.rn.f32 	%f394, %f393, 0fBF000000, %f744;
	mul.f32 	%f395, %f394, %f394;
	fma.rn.f32 	%f396, %f395, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f397, %f395, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f398, %f396, %f395, 0fC0A55DF6;
	fma.rn.f32 	%f399, %f397, %f395, 0f4081E0CF;
	fma.rn.f32 	%f400, %f395, %f394, 0f00000000;
	fma.rn.f32 	%f401, %f399, %f395, 0fC09DE9E6;
	fma.rn.f32 	%f402, %f398, %f400, 0f00000000;
	fma.rn.f32 	%f403, %f401, %f395, 0f3F800000;
	fma.rn.f32 	%f404, %f394, 0f40490FDB, %f402;
	and.b32  	%r411, %r410, 1;
	setp.eq.b32 	%p103, %r411, 1;
	selp.f32 	%f405, %f403, %f404, %p103;
	selp.f32 	%f406, %f404, %f403, %p103;
	and.b32  	%r412, %r410, 2;
	setp.eq.s32 	%p104, %r412, 0;
	neg.f32 	%f407, %f405;
	selp.f32 	%f408, %f405, %f407, %p104;
	add.s32 	%r413, %r410, 1;
	and.b32  	%r414, %r413, 2;
	setp.eq.s32 	%p105, %r414, 0;
	mov.f32 	%f409, 0f00000000;
	sub.f32 	%f410, %f409, %f406;
	selp.f32 	%f411, %f406, %f410, %p105;
	cvt.rzi.f32.f32 	%f412, %f744;
	setp.eq.f32 	%p106, %f412, %f744;
	mul.f32 	%f413, %f744, 0f00000000;
	selp.f32 	%f755, %f413, %f408, %p106;
	abs.f32 	%f414, %f744;
	setp.gt.f32 	%p107, %f414, 0f4B800000;
	add.f32 	%f415, %f755, 0f3F800000;
	selp.f32 	%f746, %f415, %f411, %p107;
$L__BB0_58:                             // %L631
	or.pred  	%p110, %p66, %p87;
	mov.f32 	%f752, %f250;
	mov.f32 	%f757, %f250;
	@%p110 bra 	$L__BB0_74;
// %bb.59:                              // %L639
	mul.lo.s32 	%r415, %r182, %r25;
	mul.hi.u32 	%r416, %r415, -1431655765;
	shr.u32 	%r417, %r416, 1;
	mul.lo.s32 	%r418, %r417, 3;
	sub.s32 	%r419, %r415, %r418;
	cvt.rn.f32.s32 	%f417, %r419;
	div.approx.f32 	%f60, %f417, %f731;
	abs.f32 	%f750, %f60;
	setp.lt.f32 	%p111, %f750, 0f40000000;
	@%p111 bra 	$L__BB0_71;
// %bb.60:
	setp.gtu.f32 	%p112, %f750, 0f4B800000;
	@%p112 bra 	$L__BB0_67;
	bra.uni 	$L__BB0_61;
$L__BB0_67:
	mov.b32 	%r35, %f750;
	and.b32  	%r420, %r35, 8388607;
	or.b32  	%r3092, %r420, 1065353216;
	mov.b32 	%f749, %r3092;
	add.s32 	%r421, %r35, -1073741824;
	and.b32  	%r3093, %r421, -8388608;
	setp.eq.s32 	%p118, %r3093, 0;
	@%p118 bra 	$L__BB0_70;
// %bb.68:                              // %__nv_fmaf_rn.exit4.i.i.i2115.preheader
	mov.f32 	%f428, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f427,%f428;
	// end inline asm
$L__BB0_69:                             // %__nv_fmaf_rn.exit4.i.i.i2115
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r422, %r3093, 192937984;
	add.s32 	%r423, %r3092, %r422;
	mov.b32 	%f429, %r423;
	mul.f32 	%f430, %f427, %f429;
	sub.f32 	%f431, %f429, %f430;
	fma.rn.f32 	%f432, %f431, %f427, %f430;
	sub.f32 	%f433, %f429, %f432;
	fma.rz.f32 	%f434, %f433, %f427, %f432;
	cvt.rzi.f32.f32 	%f435, %f434;
	sub.f32 	%f749, %f429, %f435;
	sub.s32 	%r3093, %r3093, %r422;
	mov.b32 	%r3092, %f749;
	setp.ne.s32 	%p119, %r3093, 0;
	setp.ne.s32 	%p120, %r3092, 0;
	and.pred  	%p121, %p119, %p120;
	@%p121 bra 	$L__BB0_69;
$L__BB0_70:                             // %__internal_fmodf_slowpath_mod.exit.i.i2117
	setp.gt.u32 	%p122, %r35, 2139095039;
	selp.f32 	%f436, 0f7FFFFFFF, 0f4B800000, %p122;
	mul.f32 	%f437, %f749, 0f34000000;
	mul.f32 	%f750, %f436, %f437;
	bra.uni 	$L__BB0_71;
$L__BB0_61:                             // %__nv_fast_fdividef.exit.i.i.i2094
	mov.f32 	%f419, 0f40000000;
	div.approx.f32 	%f420, %f750, %f419;
	cvt.rzi.f32.f32 	%f748, %f420;
	fma.rn.f32 	%f63, %f748, 0fC0000000, %f750;
	mov.b32 	%r34, %f63;
	setp.lt.u32 	%p113, %r34, 1073741824;
	@%p113 bra 	$L__BB0_66;
// %bb.62:
	setp.lt.u32 	%p114, %r34, -2147483647;
	@%p114 bra 	$L__BB0_64;
// %bb.63:
	add.f32 	%f425, %f748, 0fBF800000;
	setp.lt.f32 	%p117, %f63, 0fC0000000;
	add.f32 	%f426, %f425, 0fBF800000;
	selp.f32 	%f748, %f426, %f425, %p117;
	bra.uni 	$L__BB0_66;
$L__BB0_64:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p115, %f63, 0f40800000;
	@%p115 bra 	$L__BB0_66;
// %bb.65:                              // %__nv_fmaf_rn.exit.i.i.i2098
	add.f32 	%f421, %f748, 0f3F800000;
	fma.rn.f32 	%f423, %f419, 0fC0400000, %f63;
	setp.ge.f32 	%p116, %f423, 0f00000000;
	add.f32 	%f424, %f421, 0f3F800000;
	selp.f32 	%f748, %f424, %f421, %p116;
$L__BB0_66:                             // %__internal_fmodf_fastpath_quot.exit.i.i2101
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_71:                             // %__internal_fmodf_kernel.exit.i2120
	abs.f32 	%f438, %f750;
	setp.gtu.f32 	%p123, %f438, 0f7F800000;
	@%p123 bra 	$L__BB0_73;
// %bb.72:
	mov.b32 	%r424, %f60;
	and.b32  	%r425, %r424, -2147483648;
	mov.b32 	%r426, %f750;
	or.b32  	%r427, %r425, %r426;
	mov.b32 	%f750, %r427;
$L__BB0_73:                             // %__nv_fmodf.exit2121
	add.f32 	%f439, %f750, %f750;
	mov.b32 	%r428, %f439;
	and.b32  	%r429, %r428, -2147483648;
	or.b32  	%r430, %r429, 1056964608;
	mov.b32 	%f440, %r430;
	add.f32 	%f441, %f439, %f440;
	cvt.rzi.f32.f32 	%f442, %f441;
	abs.f32 	%f443, %f439;
	setp.gt.f32 	%p124, %f443, 0f4B000000;
	selp.f32 	%f444, %f439, %f442, %p124;
	cvt.rzi.f32.f32 	%f445, %f439;
	setp.lt.f32 	%p125, %f443, 0f3F000000;
	selp.f32 	%f446, %f445, %f444, %p125;
	cvt.rzi.s32.f32 	%r431, %f446;
	fma.rn.f32 	%f447, %f446, 0fBF000000, %f750;
	mul.f32 	%f448, %f447, %f447;
	fma.rn.f32 	%f449, %f448, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f450, %f448, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f451, %f449, %f448, 0fC0A55DF6;
	fma.rn.f32 	%f452, %f450, %f448, 0f4081E0CF;
	fma.rn.f32 	%f453, %f448, %f447, 0f00000000;
	fma.rn.f32 	%f454, %f452, %f448, 0fC09DE9E6;
	fma.rn.f32 	%f455, %f451, %f453, 0f00000000;
	fma.rn.f32 	%f456, %f454, %f448, 0f3F800000;
	fma.rn.f32 	%f457, %f447, 0f40490FDB, %f455;
	and.b32  	%r432, %r431, 1;
	setp.eq.b32 	%p126, %r432, 1;
	selp.f32 	%f458, %f456, %f457, %p126;
	selp.f32 	%f459, %f457, %f456, %p126;
	and.b32  	%r433, %r431, 2;
	setp.eq.s32 	%p127, %r433, 0;
	neg.f32 	%f460, %f458;
	selp.f32 	%f461, %f458, %f460, %p127;
	add.s32 	%r434, %r431, 1;
	and.b32  	%r435, %r434, 2;
	setp.eq.s32 	%p128, %r435, 0;
	mov.f32 	%f462, 0f00000000;
	sub.f32 	%f463, %f462, %f459;
	selp.f32 	%f464, %f459, %f463, %p128;
	cvt.rzi.f32.f32 	%f465, %f750;
	setp.eq.f32 	%p129, %f465, %f750;
	mul.f32 	%f466, %f750, 0f00000000;
	selp.f32 	%f757, %f466, %f461, %p129;
	abs.f32 	%f467, %f750;
	setp.gt.f32 	%p130, %f467, 0f4B800000;
	add.f32 	%f468, %f757, 0f3F800000;
	selp.f32 	%f752, %f468, %f464, %p130;
$L__BB0_74:                             // %L673
	and.b32  	%r42, %r318, 2;
	setp.eq.s32 	%p131, %r42, 0;
	mov.f32 	%f83, %f746;
	mov.f32 	%f85, %f752;
	@%p131 bra 	$L__BB0_76;
// %bb.75:                              // %L682
	neg.f32 	%f85, %f757;
	neg.f32 	%f83, %f755;
	mov.f32 	%f755, %f746;
	mov.f32 	%f757, %f752;
$L__BB0_76:                             // %L684
	@%p26 bra 	$L__BB0_193;
// %bb.77:
	@%p301 bra 	$L__BB0_189;
	bra.uni 	$L__BB0_78;
$L__BB0_189:
	mov.b32 	%r184, %f788;
	and.b32  	%r442, %r184, 8388607;
	or.b32  	%r3140, %r442, 1065353216;
	mov.b32 	%f787, %r3140;
	add.s32 	%r443, %r184, -1073741824;
	and.b32  	%r3141, %r443, -8388608;
	setp.eq.s32 	%p139, %r3141, 0;
	@%p139 bra 	$L__BB0_192;
// %bb.190:                             // %__nv_fmaf_rn.exit4.i.i.i2146.preheader
	mov.f32 	%f478, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f477,%f478;
	// end inline asm
$L__BB0_191:                            // %__nv_fmaf_rn.exit4.i.i.i2146
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r444, %r3141, 192937984;
	add.s32 	%r445, %r3140, %r444;
	mov.b32 	%f479, %r445;
	mul.f32 	%f480, %f477, %f479;
	sub.f32 	%f481, %f479, %f480;
	fma.rn.f32 	%f482, %f481, %f477, %f480;
	sub.f32 	%f483, %f479, %f482;
	fma.rz.f32 	%f484, %f483, %f477, %f482;
	cvt.rzi.f32.f32 	%f485, %f484;
	sub.f32 	%f787, %f479, %f485;
	sub.s32 	%r3141, %r3141, %r444;
	mov.b32 	%r3140, %f787;
	setp.ne.s32 	%p140, %r3141, 0;
	setp.ne.s32 	%p141, %r3140, 0;
	and.pred  	%p142, %p140, %p141;
	@%p142 bra 	$L__BB0_191;
$L__BB0_192:                            // %__internal_fmodf_slowpath_mod.exit.i.i2148
	setp.gt.u32 	%p143, %r184, 2139095039;
	selp.f32 	%f486, 0f7FFFFFFF, 0f4B800000, %p143;
	mul.f32 	%f487, %f787, 0f34000000;
	mul.f32 	%f788, %f486, %f487;
	bra.uni 	$L__BB0_193;
$L__BB0_78:                             // %__nv_fast_fdividef.exit.i.i.i2125
	mov.f32 	%f469, 0f40000000;
	div.approx.f32 	%f470, %f788, %f469;
	cvt.rzi.f32.f32 	%f786, %f470;
	fma.rn.f32 	%f189, %f786, 0fC0000000, %f788;
	mov.b32 	%r183, %f189;
	setp.lt.u32 	%p134, %r183, 1073741824;
	@%p134 bra 	$L__BB0_188;
// %bb.79:
	setp.lt.u32 	%p135, %r183, -2147483647;
	@%p135 bra 	$L__BB0_186;
// %bb.80:
	add.f32 	%f475, %f786, 0fBF800000;
	setp.lt.f32 	%p138, %f189, 0fC0000000;
	add.f32 	%f476, %f475, 0fBF800000;
	selp.f32 	%f786, %f476, %f475, %p138;
	bra.uni 	$L__BB0_188;
$L__BB0_186:
	add.f32 	%f786, %f786, 0f3F800000;
	setp.ltu.f32 	%p136, %f189, 0f40800000;
	@%p136 bra 	$L__BB0_188;
// %bb.187:                             // %__nv_fmaf_rn.exit.i.i.i2129
	add.f32 	%f471, %f786, 0f3F800000;
	fma.rn.f32 	%f473, %f469, 0fC0400000, %f189;
	setp.ge.f32 	%p137, %f473, 0f00000000;
	add.f32 	%f474, %f471, 0f3F800000;
	selp.f32 	%f786, %f474, %f471, %p137;
$L__BB0_188:                            // %__internal_fmodf_fastpath_quot.exit.i.i2132
	fma.rn.f32 	%f788, %f786, 0fC0000000, %f788;
$L__BB0_193:                            // %__internal_fmodf_kernel.exit.i2151
	abs.f32 	%f488, %f788;
	setp.gtu.f32 	%p144, %f488, 0f7F800000;
	@%p144 bra 	$L__BB0_195;
// %bb.194:
	mov.b32 	%r446, %f788;
	or.b32  	%r447, %r177, %r446;
	mov.b32 	%f788, %r447;
$L__BB0_195:                            // %__nv_fmodf.exit2152
	mov.f32 	%f512, 0f00000000;
	mov.f32 	%f521, 0f41000000;
	div.approx.f32 	%f203, %f512, %f521;
	abs.f32 	%f760, %f203;
	setp.lt.f32 	%p152, %f760, 0f40000000;
	@%p152 bra 	$L__BB0_92;
// %bb.81:
	setp.gtu.f32 	%p153, %f760, 0f4B800000;
	@%p153 bra 	$L__BB0_88;
	bra.uni 	$L__BB0_82;
$L__BB0_88:
	mov.b32 	%r46, %f760;
	and.b32  	%r462, %r46, 8388607;
	or.b32  	%r3094, %r462, 1065353216;
	mov.b32 	%f759, %r3094;
	add.s32 	%r463, %r46, -1073741824;
	and.b32  	%r3095, %r463, -8388608;
	setp.eq.s32 	%p159, %r3095, 0;
	@%p159 bra 	$L__BB0_91;
// %bb.89:                              // %__nv_fmaf_rn.exit4.i.i.i2177.preheader
	mov.f32 	%f531, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f530,%f531;
	// end inline asm
$L__BB0_90:                             // %__nv_fmaf_rn.exit4.i.i.i2177
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r464, %r3095, 192937984;
	add.s32 	%r465, %r3094, %r464;
	mov.b32 	%f532, %r465;
	mul.f32 	%f533, %f530, %f532;
	sub.f32 	%f534, %f532, %f533;
	fma.rn.f32 	%f535, %f534, %f530, %f533;
	sub.f32 	%f536, %f532, %f535;
	fma.rz.f32 	%f537, %f536, %f530, %f535;
	cvt.rzi.f32.f32 	%f538, %f537;
	sub.f32 	%f759, %f532, %f538;
	sub.s32 	%r3095, %r3095, %r464;
	mov.b32 	%r3094, %f759;
	setp.ne.s32 	%p160, %r3095, 0;
	setp.ne.s32 	%p161, %r3094, 0;
	and.pred  	%p162, %p160, %p161;
	@%p162 bra 	$L__BB0_90;
$L__BB0_91:                             // %__internal_fmodf_slowpath_mod.exit.i.i2179
	setp.gt.u32 	%p163, %r46, 2139095039;
	selp.f32 	%f539, 0f7FFFFFFF, 0f4B800000, %p163;
	mul.f32 	%f540, %f759, 0f34000000;
	mul.f32 	%f760, %f539, %f540;
	bra.uni 	$L__BB0_92;
$L__BB0_82:                             // %__nv_fast_fdividef.exit.i.i.i2156
	mov.f32 	%f522, 0f40000000;
	div.approx.f32 	%f523, %f760, %f522;
	cvt.rzi.f32.f32 	%f758, %f523;
	fma.rn.f32 	%f88, %f758, 0fC0000000, %f760;
	mov.b32 	%r45, %f88;
	setp.lt.u32 	%p154, %r45, 1073741824;
	@%p154 bra 	$L__BB0_87;
// %bb.83:
	setp.lt.u32 	%p155, %r45, -2147483647;
	@%p155 bra 	$L__BB0_85;
// %bb.84:
	add.f32 	%f528, %f758, 0fBF800000;
	setp.lt.f32 	%p158, %f88, 0fC0000000;
	add.f32 	%f529, %f528, 0fBF800000;
	selp.f32 	%f758, %f529, %f528, %p158;
	bra.uni 	$L__BB0_87;
$L__BB0_85:
	add.f32 	%f758, %f758, 0f3F800000;
	setp.ltu.f32 	%p156, %f88, 0f40800000;
	@%p156 bra 	$L__BB0_87;
// %bb.86:                              // %__nv_fmaf_rn.exit.i.i.i2160
	add.f32 	%f524, %f758, 0f3F800000;
	fma.rn.f32 	%f526, %f522, 0fC0400000, %f88;
	setp.ge.f32 	%p157, %f526, 0f00000000;
	add.f32 	%f527, %f524, 0f3F800000;
	selp.f32 	%f758, %f527, %f524, %p157;
$L__BB0_87:                             // %__internal_fmodf_fastpath_quot.exit.i.i2163
	fma.rn.f32 	%f760, %f758, 0fC0000000, %f760;
$L__BB0_92:                             // %__internal_fmodf_kernel.exit.i2182
	abs.f32 	%f541, %f760;
	setp.gtu.f32 	%p164, %f541, 0f7F800000;
	@%p164 bra 	$L__BB0_94;
// %bb.93:
	mov.b32 	%r466, %f203;
	and.b32  	%r467, %r466, -2147483648;
	mov.b32 	%r468, %f760;
	or.b32  	%r469, %r467, %r468;
	mov.b32 	%f760, %r469;
$L__BB0_94:                             // %__nv_fmodf.exit2183
	cvt.rn.f32.s32 	%f572, %r168;
	div.approx.f32 	%f104, %f572, %f521;
	abs.f32 	%f764, %f104;
	setp.lt.f32 	%p172, %f764, 0f40000000;
	@%p172 bra 	$L__BB0_106;
// %bb.95:
	setp.gtu.f32 	%p173, %f764, 0f4B800000;
	@%p173 bra 	$L__BB0_102;
	bra.uni 	$L__BB0_96;
$L__BB0_102:
	mov.b32 	%r54, %f764;
	and.b32  	%r478, %r54, 8388607;
	or.b32  	%r3096, %r478, 1065353216;
	mov.b32 	%f763, %r3096;
	add.s32 	%r479, %r54, -1073741824;
	and.b32  	%r3097, %r479, -8388608;
	setp.eq.s32 	%p179, %r3097, 0;
	@%p179 bra 	$L__BB0_105;
// %bb.103:                             // %__nv_fmaf_rn.exit4.i.i.i2208.preheader
	mov.f32 	%f583, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f582,%f583;
	// end inline asm
$L__BB0_104:                            // %__nv_fmaf_rn.exit4.i.i.i2208
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r480, %r3097, 192937984;
	add.s32 	%r481, %r3096, %r480;
	mov.b32 	%f584, %r481;
	mul.f32 	%f585, %f582, %f584;
	sub.f32 	%f586, %f584, %f585;
	fma.rn.f32 	%f587, %f586, %f582, %f585;
	sub.f32 	%f588, %f584, %f587;
	fma.rz.f32 	%f589, %f588, %f582, %f587;
	cvt.rzi.f32.f32 	%f590, %f589;
	sub.f32 	%f763, %f584, %f590;
	sub.s32 	%r3097, %r3097, %r480;
	mov.b32 	%r3096, %f763;
	setp.ne.s32 	%p180, %r3097, 0;
	setp.ne.s32 	%p181, %r3096, 0;
	and.pred  	%p182, %p180, %p181;
	@%p182 bra 	$L__BB0_104;
$L__BB0_105:                            // %__internal_fmodf_slowpath_mod.exit.i.i2210
	setp.gt.u32 	%p183, %r54, 2139095039;
	selp.f32 	%f591, 0f7FFFFFFF, 0f4B800000, %p183;
	mul.f32 	%f592, %f763, 0f34000000;
	mul.f32 	%f764, %f591, %f592;
	bra.uni 	$L__BB0_106;
$L__BB0_96:                             // %__nv_fast_fdividef.exit.i.i.i2187
	mov.f32 	%f574, 0f40000000;
	div.approx.f32 	%f575, %f764, %f574;
	cvt.rzi.f32.f32 	%f762, %f575;
	fma.rn.f32 	%f107, %f762, 0fC0000000, %f764;
	mov.b32 	%r53, %f107;
	setp.lt.u32 	%p174, %r53, 1073741824;
	@%p174 bra 	$L__BB0_101;
// %bb.97:
	setp.lt.u32 	%p175, %r53, -2147483647;
	@%p175 bra 	$L__BB0_99;
// %bb.98:
	add.f32 	%f580, %f762, 0fBF800000;
	setp.lt.f32 	%p178, %f107, 0fC0000000;
	add.f32 	%f581, %f580, 0fBF800000;
	selp.f32 	%f762, %f581, %f580, %p178;
	bra.uni 	$L__BB0_101;
$L__BB0_99:
	add.f32 	%f762, %f762, 0f3F800000;
	setp.ltu.f32 	%p176, %f107, 0f40800000;
	@%p176 bra 	$L__BB0_101;
// %bb.100:                             // %__nv_fmaf_rn.exit.i.i.i2191
	add.f32 	%f576, %f762, 0f3F800000;
	fma.rn.f32 	%f578, %f574, 0fC0400000, %f107;
	setp.ge.f32 	%p177, %f578, 0f00000000;
	add.f32 	%f579, %f576, 0f3F800000;
	selp.f32 	%f762, %f579, %f576, %p177;
$L__BB0_101:                            // %__internal_fmodf_fastpath_quot.exit.i.i2194
	fma.rn.f32 	%f764, %f762, 0fC0000000, %f764;
$L__BB0_106:                            // %__internal_fmodf_kernel.exit.i2213
	abs.f32 	%f593, %f764;
	setp.gtu.f32 	%p184, %f593, 0f7F800000;
	@%p184 bra 	$L__BB0_108;
// %bb.107:
	mov.b32 	%r482, %f104;
	and.b32  	%r483, %r482, -2147483648;
	mov.b32 	%r484, %f764;
	or.b32  	%r485, %r483, %r484;
	mov.b32 	%f764, %r485;
$L__BB0_108:                            // %__nv_fmodf.exit2214
	and.b32  	%r64, %r318, 1;
	shr.u32 	%r65, %r318, 4;
	setp.ne.s32 	%p192, %r64, %r65;
	mov.f32 	%f770, %f512;
	mov.f32 	%f779, %f512;
	@%p192 bra 	$L__BB0_124;
// %bb.109:                             // %L889
	mov.f32 	%f626, 0f3F800000;
	mov.f32 	%f627, 0f00000000;
	div.approx.f32 	%f121, %f627, %f626;
	abs.f32 	%f768, %f121;
	setp.lt.f32 	%p193, %f768, 0f40000000;
	@%p193 bra 	$L__BB0_121;
// %bb.110:
	setp.gtu.f32 	%p194, %f768, 0f4B800000;
	@%p194 bra 	$L__BB0_117;
	bra.uni 	$L__BB0_111;
$L__BB0_117:
	mov.b32 	%r67, %f768;
	and.b32  	%r500, %r67, 8388607;
	or.b32  	%r3098, %r500, 1065353216;
	mov.b32 	%f767, %r3098;
	add.s32 	%r501, %r67, -1073741824;
	and.b32  	%r3099, %r501, -8388608;
	setp.eq.s32 	%p200, %r3099, 0;
	@%p200 bra 	$L__BB0_120;
// %bb.118:                             // %__nv_fmaf_rn.exit4.i.i.i2239.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f636,%f626;
	// end inline asm
$L__BB0_119:                            // %__nv_fmaf_rn.exit4.i.i.i2239
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r502, %r3099, 192937984;
	add.s32 	%r503, %r3098, %r502;
	mov.b32 	%f638, %r503;
	mul.f32 	%f639, %f636, %f638;
	sub.f32 	%f640, %f638, %f639;
	fma.rn.f32 	%f641, %f640, %f636, %f639;
	sub.f32 	%f642, %f638, %f641;
	fma.rz.f32 	%f643, %f642, %f636, %f641;
	cvt.rzi.f32.f32 	%f644, %f643;
	sub.f32 	%f767, %f638, %f644;
	sub.s32 	%r3099, %r3099, %r502;
	mov.b32 	%r3098, %f767;
	setp.ne.s32 	%p201, %r3099, 0;
	setp.ne.s32 	%p202, %r3098, 0;
	and.pred  	%p203, %p201, %p202;
	@%p203 bra 	$L__BB0_119;
$L__BB0_120:                            // %__internal_fmodf_slowpath_mod.exit.i.i2241
	setp.gt.u32 	%p204, %r67, 2139095039;
	selp.f32 	%f645, 0f7FFFFFFF, 0f4B800000, %p204;
	mul.f32 	%f646, %f767, 0f34000000;
	mul.f32 	%f768, %f645, %f646;
	bra.uni 	$L__BB0_121;
$L__BB0_111:                            // %__nv_fast_fdividef.exit.i.i.i2218
	mov.f32 	%f628, 0f40000000;
	div.approx.f32 	%f629, %f768, %f628;
	cvt.rzi.f32.f32 	%f766, %f629;
	fma.rn.f32 	%f124, %f766, 0fC0000000, %f768;
	mov.b32 	%r66, %f124;
	setp.lt.u32 	%p195, %r66, 1073741824;
	@%p195 bra 	$L__BB0_116;
// %bb.112:
	setp.lt.u32 	%p196, %r66, -2147483647;
	@%p196 bra 	$L__BB0_114;
// %bb.113:
	add.f32 	%f634, %f766, 0fBF800000;
	setp.lt.f32 	%p199, %f124, 0fC0000000;
	add.f32 	%f635, %f634, 0fBF800000;
	selp.f32 	%f766, %f635, %f634, %p199;
	bra.uni 	$L__BB0_116;
$L__BB0_114:
	add.f32 	%f766, %f766, 0f3F800000;
	setp.ltu.f32 	%p197, %f124, 0f40800000;
	@%p197 bra 	$L__BB0_116;
// %bb.115:                             // %__nv_fmaf_rn.exit.i.i.i2222
	add.f32 	%f630, %f766, 0f3F800000;
	fma.rn.f32 	%f632, %f628, 0fC0400000, %f124;
	setp.ge.f32 	%p198, %f632, 0f00000000;
	add.f32 	%f633, %f630, 0f3F800000;
	selp.f32 	%f766, %f633, %f630, %p198;
$L__BB0_116:                            // %__internal_fmodf_fastpath_quot.exit.i.i2225
	fma.rn.f32 	%f768, %f766, 0fC0000000, %f768;
$L__BB0_121:                            // %__internal_fmodf_kernel.exit.i2244
	abs.f32 	%f647, %f768;
	setp.gtu.f32 	%p205, %f647, 0f7F800000;
	@%p205 bra 	$L__BB0_123;
// %bb.122:
	mov.b32 	%r504, %f121;
	and.b32  	%r505, %r504, -2147483648;
	mov.b32 	%r506, %f768;
	or.b32  	%r507, %r505, %r506;
	mov.b32 	%f768, %r507;
$L__BB0_123:                            // %__nv_fmodf.exit2245
	add.f32 	%f648, %f768, %f768;
	mov.b32 	%r508, %f648;
	and.b32  	%r509, %r508, -2147483648;
	or.b32  	%r510, %r509, 1056964608;
	mov.b32 	%f649, %r510;
	add.f32 	%f650, %f648, %f649;
	cvt.rzi.f32.f32 	%f651, %f650;
	abs.f32 	%f652, %f648;
	setp.gt.f32 	%p206, %f652, 0f4B000000;
	selp.f32 	%f653, %f648, %f651, %p206;
	cvt.rzi.f32.f32 	%f654, %f648;
	setp.lt.f32 	%p207, %f652, 0f3F000000;
	selp.f32 	%f655, %f654, %f653, %p207;
	cvt.rzi.s32.f32 	%r511, %f655;
	fma.rn.f32 	%f656, %f655, 0fBF000000, %f768;
	mul.f32 	%f657, %f656, %f656;
	fma.rn.f32 	%f658, %f657, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f659, %f657, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f660, %f658, %f657, 0fC0A55DF6;
	fma.rn.f32 	%f661, %f659, %f657, 0f4081E0CF;
	fma.rn.f32 	%f662, %f657, %f656, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f657, 0fC09DE9E6;
	fma.rn.f32 	%f664, %f660, %f662, 0f00000000;
	fma.rn.f32 	%f665, %f663, %f657, 0f3F800000;
	fma.rn.f32 	%f666, %f656, 0f40490FDB, %f664;
	and.b32  	%r512, %r511, 1;
	setp.eq.b32 	%p208, %r512, 1;
	selp.f32 	%f667, %f665, %f666, %p208;
	selp.f32 	%f668, %f666, %f665, %p208;
	and.b32  	%r513, %r511, 2;
	setp.eq.s32 	%p209, %r513, 0;
	neg.f32 	%f669, %f667;
	selp.f32 	%f670, %f667, %f669, %p209;
	add.s32 	%r514, %r511, 1;
	and.b32  	%r515, %r514, 2;
	setp.eq.s32 	%p210, %r515, 0;
	sub.f32 	%f672, %f627, %f668;
	selp.f32 	%f673, %f668, %f672, %p210;
	cvt.rzi.f32.f32 	%f674, %f768;
	setp.eq.f32 	%p211, %f674, %f768;
	mul.f32 	%f675, %f768, 0f00000000;
	selp.f32 	%f779, %f675, %f670, %p211;
	abs.f32 	%f676, %f768;
	setp.gt.f32 	%p212, %f676, 0f4B800000;
	add.f32 	%f677, %f779, 0f3F800000;
	selp.f32 	%f770, %f677, %f673, %p212;
$L__BB0_124:                            // %L928
	and.b32  	%r63, %r168, 1;
	mov.f32 	%f776, %f512;
	mov.f32 	%f781, %f512;
	@%p192 bra 	$L__BB0_140;
// %bb.125:                             // %L931
	cvt.rn.f32.s32 	%f679, %r63;
	mov.f32 	%f680, 0f3F800000;
	div.approx.f32 	%f142, %f679, %f680;
	abs.f32 	%f774, %f142;
	setp.lt.f32 	%p214, %f774, 0f40000000;
	@%p214 bra 	$L__BB0_137;
// %bb.126:
	setp.gtu.f32 	%p215, %f774, 0f4B800000;
	@%p215 bra 	$L__BB0_133;
	bra.uni 	$L__BB0_127;
$L__BB0_133:
	mov.b32 	%r75, %f774;
	and.b32  	%r516, %r75, 8388607;
	or.b32  	%r3100, %r516, 1065353216;
	mov.b32 	%f773, %r3100;
	add.s32 	%r517, %r75, -1073741824;
	and.b32  	%r3101, %r517, -8388608;
	setp.eq.s32 	%p221, %r3101, 0;
	@%p221 bra 	$L__BB0_136;
// %bb.134:                             // %__nv_fmaf_rn.exit4.i.i.i2270.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f689,%f680;
	// end inline asm
$L__BB0_135:                            // %__nv_fmaf_rn.exit4.i.i.i2270
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r518, %r3101, 192937984;
	add.s32 	%r519, %r3100, %r518;
	mov.b32 	%f691, %r519;
	mul.f32 	%f692, %f689, %f691;
	sub.f32 	%f693, %f691, %f692;
	fma.rn.f32 	%f694, %f693, %f689, %f692;
	sub.f32 	%f695, %f691, %f694;
	fma.rz.f32 	%f696, %f695, %f689, %f694;
	cvt.rzi.f32.f32 	%f697, %f696;
	sub.f32 	%f773, %f691, %f697;
	sub.s32 	%r3101, %r3101, %r518;
	mov.b32 	%r3100, %f773;
	setp.ne.s32 	%p222, %r3101, 0;
	setp.ne.s32 	%p223, %r3100, 0;
	and.pred  	%p224, %p222, %p223;
	@%p224 bra 	$L__BB0_135;
$L__BB0_136:                            // %__internal_fmodf_slowpath_mod.exit.i.i2272
	setp.gt.u32 	%p225, %r75, 2139095039;
	selp.f32 	%f698, 0f7FFFFFFF, 0f4B800000, %p225;
	mul.f32 	%f699, %f773, 0f34000000;
	mul.f32 	%f774, %f698, %f699;
	bra.uni 	$L__BB0_137;
$L__BB0_127:                            // %__nv_fast_fdividef.exit.i.i.i2249
	mov.f32 	%f681, 0f40000000;
	div.approx.f32 	%f682, %f774, %f681;
	cvt.rzi.f32.f32 	%f772, %f682;
	fma.rn.f32 	%f145, %f772, 0fC0000000, %f774;
	mov.b32 	%r74, %f145;
	setp.lt.u32 	%p216, %r74, 1073741824;
	@%p216 bra 	$L__BB0_132;
// %bb.128:
	setp.lt.u32 	%p217, %r74, -2147483647;
	@%p217 bra 	$L__BB0_130;
// %bb.129:
	add.f32 	%f687, %f772, 0fBF800000;
	setp.lt.f32 	%p220, %f145, 0fC0000000;
	add.f32 	%f688, %f687, 0fBF800000;
	selp.f32 	%f772, %f688, %f687, %p220;
	bra.uni 	$L__BB0_132;
$L__BB0_130:
	add.f32 	%f772, %f772, 0f3F800000;
	setp.ltu.f32 	%p218, %f145, 0f40800000;
	@%p218 bra 	$L__BB0_132;
// %bb.131:                             // %__nv_fmaf_rn.exit.i.i.i2253
	add.f32 	%f683, %f772, 0f3F800000;
	fma.rn.f32 	%f685, %f681, 0fC0400000, %f145;
	setp.ge.f32 	%p219, %f685, 0f00000000;
	add.f32 	%f686, %f683, 0f3F800000;
	selp.f32 	%f772, %f686, %f683, %p219;
$L__BB0_132:                            // %__internal_fmodf_fastpath_quot.exit.i.i2256
	fma.rn.f32 	%f774, %f772, 0fC0000000, %f774;
$L__BB0_137:                            // %__internal_fmodf_kernel.exit.i2275
	abs.f32 	%f700, %f774;
	setp.gtu.f32 	%p226, %f700, 0f7F800000;
	@%p226 bra 	$L__BB0_139;
// %bb.138:
	mov.b32 	%r520, %f142;
	and.b32  	%r521, %r520, -2147483648;
	mov.b32 	%r522, %f774;
	or.b32  	%r523, %r521, %r522;
	mov.b32 	%f774, %r523;
$L__BB0_139:                            // %__nv_fmodf.exit2276
	add.f32 	%f701, %f774, %f774;
	mov.b32 	%r524, %f701;
	and.b32  	%r525, %r524, -2147483648;
	or.b32  	%r526, %r525, 1056964608;
	mov.b32 	%f702, %r526;
	add.f32 	%f703, %f701, %f702;
	cvt.rzi.f32.f32 	%f704, %f703;
	abs.f32 	%f705, %f701;
	setp.gt.f32 	%p227, %f705, 0f4B000000;
	selp.f32 	%f706, %f701, %f704, %p227;
	cvt.rzi.f32.f32 	%f707, %f701;
	setp.lt.f32 	%p228, %f705, 0f3F000000;
	selp.f32 	%f708, %f707, %f706, %p228;
	cvt.rzi.s32.f32 	%r527, %f708;
	fma.rn.f32 	%f709, %f708, 0fBF000000, %f774;
	mul.f32 	%f710, %f709, %f709;
	fma.rn.f32 	%f711, %f710, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f712, %f710, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f713, %f711, %f710, 0fC0A55DF6;
	fma.rn.f32 	%f714, %f712, %f710, 0f4081E0CF;
	fma.rn.f32 	%f715, %f710, %f709, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f710, 0fC09DE9E6;
	fma.rn.f32 	%f717, %f713, %f715, 0f00000000;
	fma.rn.f32 	%f718, %f716, %f710, 0f3F800000;
	fma.rn.f32 	%f719, %f709, 0f40490FDB, %f717;
	and.b32  	%r528, %r527, 1;
	setp.eq.b32 	%p229, %r528, 1;
	selp.f32 	%f720, %f718, %f719, %p229;
	selp.f32 	%f721, %f719, %f718, %p229;
	and.b32  	%r529, %r527, 2;
	setp.eq.s32 	%p230, %r529, 0;
	neg.f32 	%f722, %f720;
	selp.f32 	%f723, %f720, %f722, %p230;
	add.s32 	%r530, %r527, 1;
	and.b32  	%r531, %r530, 2;
	setp.eq.s32 	%p231, %r531, 0;
	mov.f32 	%f724, 0f00000000;
	sub.f32 	%f725, %f724, %f721;
	selp.f32 	%f726, %f721, %f725, %p231;
	cvt.rzi.f32.f32 	%f727, %f774;
	setp.eq.f32 	%p232, %f727, %f774;
	mul.f32 	%f728, %f774, 0f00000000;
	selp.f32 	%f781, %f728, %f723, %p232;
	abs.f32 	%f729, %f774;
	setp.gt.f32 	%p233, %f729, 0f4B800000;
	add.f32 	%f730, %f781, 0f3F800000;
	selp.f32 	%f776, %f730, %f726, %p233;
$L__BB0_140:                            // %L965
	mov.f32 	%f165, %f770;
	mov.f32 	%f167, %f776;
	@%p131 bra 	$L__BB0_142;
// %bb.141:                             // %L974
	neg.f32 	%f167, %f781;
	neg.f32 	%f165, %f779;
	mov.f32 	%f779, %f770;
	mov.f32 	%f781, %f776;
$L__BB0_142:                            // %L976
	setp.gt.u32 	%p235, %r318, 15;
	mov.u32 	%r193, 999999999;
	@%p235 bra 	$L__BB0_197;
// %bb.143:                             // %L1006
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	mad.lo.s32 	%r539, %r318, 6, %r4;
	cvt.u16.u32 	%rs15, %r539;
	and.b16  	%rs16, %rs15, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 14;
	mul.lo.s16 	%rs19, %rs18, 96;
	sub.s16 	%rs20, %rs15, %rs19;
	cvt.u32.u16 	%r540, %rs20;
	and.b32  	%r541, %r540, 255;
	mul.wide.u32 	%rd57, %r541, 4;
	add.s64 	%rd58, %rd1, %rd57;
	ld.global.u32 	%r542, [%rd58];
	shl.b32 	%r543, %r542, 16;
	cvt.s32.s16 	%r84, %r542;
	shr.s32 	%r85, %r542, 16;
	or.b32  	%r544, %r543, 65535;
	setp.lt.u32 	%p236, %r544, 589823;
	setp.lt.u32 	%p237, %r542, 786432;
	and.pred  	%p238, %p236, %p237;
	@%p238 bra 	$L__BB0_196;
	bra.uni 	$L__BB0_144;
$L__BB0_196:                            // %L1246
	mul.lo.s32 	%r548, %r85, 290;
	mad.lo.s32 	%r193, %r84, 33, %r548;
$L__BB0_197:                            // %pass533
	add.f32 	%f227, %f784, %f784;
	mov.b32 	%r346, %f227;
	add.f32 	%f489, %f788, %f788;
	and.b32  	%r347, %r346, -2147483648;
	add.f32 	%f282, %f734, %f734;
	mov.b32 	%r454, %f489;
	or.b32  	%r348, %r347, 1056964608;
	mov.b32 	%r363, %f282;
	and.b32  	%r455, %r454, -2147483648;
	add.f32 	%f542, %f760, %f760;
	add.f32 	%f595, %f764, %f764;
	mov.b32 	%f228, %r348;
	and.b32  	%r364, %r363, -2147483648;
	or.b32  	%r456, %r455, 1056964608;
	mov.b32 	%r470, %f542;
	mov.b32 	%r492, %f595;
	add.f32 	%f229, %f227, %f228;
	abs.f32 	%f231, %f227;
	or.b32  	%r365, %r364, 1056964608;
	mov.b32 	%f490, %r456;
	and.b32  	%r471, %r470, -2147483648;
	and.b32  	%r493, %r492, -2147483648;
	cvt.rzi.f32.f32 	%f230, %f229;
	setp.gt.f32 	%p39, %f231, 0f4B000000;
	mov.b32 	%f283, %r365;
	add.f32 	%f491, %f489, %f490;
	abs.f32 	%f493, %f489;
	or.b32  	%r472, %r471, 1056964608;
	or.b32  	%r494, %r493, 1056964608;
	selp.f32 	%f232, %f227, %f230, %p39;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p40, %f231, 0f3F000000;
	add.f32 	%f284, %f282, %f283;
	abs.f32 	%f286, %f282;
	cvt.rzi.f32.f32 	%f492, %f491;
	setp.gt.f32 	%p145, %f493, 0f4B000000;
	mov.b32 	%f543, %r472;
	mov.b32 	%f596, %r494;
	selp.f32 	%f234, %f233, %f232, %p40;
	cvt.rzi.f32.f32 	%f285, %f284;
	setp.gt.f32 	%p59, %f286, 0f4B000000;
	selp.f32 	%f494, %f489, %f492, %p145;
	cvt.rzi.f32.f32 	%f495, %f489;
	setp.lt.f32 	%p146, %f493, 0f3F000000;
	add.f32 	%f544, %f542, %f543;
	abs.f32 	%f546, %f542;
	add.f32 	%f597, %f595, %f596;
	abs.f32 	%f599, %f595;
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f784;
	selp.f32 	%f287, %f282, %f285, %p59;
	cvt.rzi.f32.f32 	%f288, %f282;
	setp.lt.f32 	%p60, %f286, 0f3F000000;
	selp.f32 	%f496, %f495, %f494, %p146;
	cvt.rzi.f32.f32 	%f545, %f544;
	setp.gt.f32 	%p165, %f546, 0f4B000000;
	cvt.rzi.f32.f32 	%f598, %f597;
	setp.gt.f32 	%p185, %f599, 0f4B000000;
	mul.f32 	%f236, %f235, %f235;
	selp.f32 	%f289, %f288, %f287, %p60;
	fma.rn.f32 	%f497, %f496, 0fBF000000, %f788;
	selp.f32 	%f547, %f542, %f545, %p165;
	cvt.rzi.f32.f32 	%f548, %f542;
	setp.lt.f32 	%p166, %f546, 0f3F000000;
	selp.f32 	%f600, %f595, %f598, %p185;
	cvt.rzi.f32.f32 	%f601, %f595;
	setp.lt.f32 	%p186, %f599, 0f3F000000;
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f290, %f289, 0fBF000000, %f734;
	mul.f32 	%f498, %f497, %f497;
	selp.f32 	%f549, %f548, %f547, %p166;
	selp.f32 	%f602, %f601, %f600, %p186;
	cvt.rzi.s32.f32 	%r349, %f234;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	mul.f32 	%f291, %f290, %f290;
	fma.rn.f32 	%f499, %f498, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f500, %f498, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f550, %f549, 0fBF000000, %f760;
	fma.rn.f32 	%f603, %f602, 0fBF000000, %f764;
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r350, %r349, 1;
	fma.rn.f32 	%f292, %f291, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f293, %f291, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r457, %f496;
	fma.rn.f32 	%f501, %f499, %f498, 0fC0A55DF6;
	fma.rn.f32 	%f502, %f500, %f498, 0f4081E0CF;
	fma.rn.f32 	%f503, %f498, %f497, 0f00000000;
	mul.f32 	%f551, %f550, %f550;
	mul.f32 	%f604, %f603, %f603;
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p41, %r350, 1;
	cvt.rzi.s32.f32 	%r366, %f289;
	fma.rn.f32 	%f294, %f292, %f291, 0fC0A55DF6;
	fma.rn.f32 	%f295, %f293, %f291, 0f4081E0CF;
	fma.rn.f32 	%f296, %f291, %f290, 0f00000000;
	fma.rn.f32 	%f504, %f502, %f498, 0fC09DE9E6;
	fma.rn.f32 	%f505, %f501, %f503, 0f00000000;
	and.b32  	%r458, %r457, 1;
	fma.rn.f32 	%f552, %f551, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f553, %f551, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f604, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f606, %f604, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f246, %f244, %f245, %p41;
	and.b32  	%r351, %r349, 2;
	fma.rn.f32 	%f297, %f295, %f291, 0fC09DE9E6;
	fma.rn.f32 	%f298, %f294, %f296, 0f00000000;
	and.b32  	%r367, %r366, 1;
	fma.rn.f32 	%f506, %f504, %f498, 0f3F800000;
	fma.rn.f32 	%f507, %f497, 0f40490FDB, %f505;
	setp.eq.b32 	%p147, %r458, 1;
	cvt.rzi.s32.f32 	%r473, %f549;
	fma.rn.f32 	%f554, %f552, %f551, 0fC0A55DF6;
	fma.rn.f32 	%f555, %f553, %f551, 0f4081E0CF;
	fma.rn.f32 	%f556, %f551, %f550, 0f00000000;
	cvt.rzi.s32.f32 	%r495, %f602;
	fma.rn.f32 	%f607, %f605, %f604, 0fC0A55DF6;
	fma.rn.f32 	%f608, %f606, %f604, 0f4081E0CF;
	fma.rn.f32 	%f609, %f604, %f603, 0f00000000;
	setp.eq.s32 	%p42, %r351, 0;
	neg.f32 	%f248, %f246;
	add.s32 	%r352, %r349, 1;
	cvt.rzi.f32.f32 	%f253, %f784;
	fma.rn.f32 	%f299, %f297, %f291, 0f3F800000;
	fma.rn.f32 	%f300, %f290, 0f40490FDB, %f298;
	setp.eq.b32 	%p61, %r367, 1;
	selp.f32 	%f508, %f506, %f507, %p147;
	and.b32  	%r459, %r457, 2;
	fma.rn.f32 	%f557, %f555, %f551, 0fC09DE9E6;
	fma.rn.f32 	%f558, %f554, %f556, 0f00000000;
	and.b32  	%r474, %r473, 1;
	fma.rn.f32 	%f610, %f608, %f604, 0fC09DE9E6;
	fma.rn.f32 	%f611, %f607, %f609, 0f00000000;
	and.b32  	%r496, %r495, 1;
	selp.f32 	%f247, %f245, %f244, %p41;
	selp.f32 	%f249, %f246, %f248, %p42;
	and.b32  	%r353, %r352, 2;
	setp.eq.f32 	%p44, %f253, %f784;
	mul.f32 	%f254, %f784, 0f00000000;
	selp.f32 	%f301, %f299, %f300, %p61;
	and.b32  	%r368, %r366, 2;
	setp.eq.s32 	%p148, %r459, 0;
	neg.f32 	%f510, %f508;
	add.s32 	%r460, %r457, 1;
	cvt.rzi.f32.f32 	%f515, %f788;
	fma.rn.f32 	%f559, %f557, %f551, 0f3F800000;
	fma.rn.f32 	%f560, %f550, 0f40490FDB, %f558;
	setp.eq.b32 	%p167, %r474, 1;
	fma.rn.f32 	%f612, %f610, %f604, 0f3F800000;
	fma.rn.f32 	%f613, %f603, 0f40490FDB, %f611;
	setp.eq.b32 	%p187, %r496, 1;
	setp.eq.s32 	%p43, %r353, 0;
	sub.f32 	%f251, %f250, %f247;
	selp.f32 	%f255, %f254, %f249, %p44;
	abs.f32 	%f256, %f784;
	setp.eq.s32 	%p62, %r368, 0;
	neg.f32 	%f303, %f301;
	add.s32 	%r369, %r366, 1;
	cvt.rzi.f32.f32 	%f307, %f734;
	selp.f32 	%f509, %f507, %f506, %p147;
	selp.f32 	%f511, %f508, %f510, %p148;
	and.b32  	%r461, %r460, 2;
	setp.eq.f32 	%p150, %f515, %f788;
	mul.f32 	%f516, %f788, 0f00000000;
	selp.f32 	%f561, %f559, %f560, %p167;
	and.b32  	%r475, %r473, 2;
	selp.f32 	%f614, %f612, %f613, %p187;
	and.b32  	%r497, %r495, 2;
	selp.f32 	%f252, %f247, %f251, %p43;
	setp.gt.f32 	%p45, %f256, 0f4B800000;
	add.f32 	%f257, %f255, 0f3F800000;
	selp.f32 	%f302, %f300, %f299, %p61;
	selp.f32 	%f304, %f301, %f303, %p62;
	and.b32  	%r370, %r369, 2;
	setp.eq.f32 	%p64, %f307, %f734;
	mul.f32 	%f308, %f734, 0f00000000;
	setp.eq.s32 	%p149, %r461, 0;
	sub.f32 	%f513, %f512, %f509;
	selp.f32 	%f517, %f516, %f511, %p150;
	abs.f32 	%f518, %f788;
	setp.eq.s32 	%p168, %r475, 0;
	neg.f32 	%f563, %f561;
	add.s32 	%r476, %r473, 1;
	cvt.rzi.f32.f32 	%f568, %f760;
	setp.eq.s32 	%p188, %r497, 0;
	neg.f32 	%f616, %f614;
	add.s32 	%r498, %r495, 1;
	cvt.rzi.f32.f32 	%f620, %f764;
	selp.f32 	%f258, %f257, %f252, %p45;
	setp.eq.s32 	%p63, %r370, 0;
	sub.f32 	%f305, %f250, %f302;
	selp.f32 	%f16, %f308, %f304, %p64;
	abs.f32 	%f309, %f734;
	selp.f32 	%f514, %f509, %f513, %p149;
	setp.gt.f32 	%p151, %f518, 0f4B800000;
	add.f32 	%f519, %f517, 0f3F800000;
	selp.f32 	%f562, %f560, %f559, %p167;
	selp.f32 	%f564, %f561, %f563, %p168;
	and.b32  	%r477, %r476, 2;
	setp.eq.f32 	%p170, %f568, %f760;
	mul.f32 	%f569, %f760, 0f00000000;
	selp.f32 	%f615, %f613, %f612, %p187;
	selp.f32 	%f617, %f614, %f616, %p188;
	and.b32  	%r499, %r498, 2;
	setp.eq.f32 	%p190, %f620, %f764;
	mul.f32 	%f621, %f764, 0f00000000;
	mov.b32 	%r342, %f258;
	mov.b32 	%r345, %f255;
	selp.f32 	%f306, %f302, %f305, %p63;
	setp.gt.f32 	%p65, %f309, 0f4B800000;
	add.f32 	%f310, %f16, 0f3F800000;
	selp.f32 	%f520, %f519, %f514, %p151;
	setp.eq.s32 	%p169, %r477, 0;
	sub.f32 	%f566, %f512, %f562;
	selp.f32 	%f102, %f569, %f564, %p170;
	abs.f32 	%f570, %f760;
	setp.eq.s32 	%p189, %r499, 0;
	sub.f32 	%f618, %f512, %f615;
	selp.f32 	%f622, %f621, %f617, %p190;
	abs.f32 	%f623, %f764;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r341, %r345, -2147483648;
	selp.f32 	%f17, %f310, %f306, %p65;
	mov.b32 	%r450, %f520;
	mov.b32 	%r453, %f517;
	selp.f32 	%f567, %f562, %f566, %p169;
	setp.gt.f32 	%p171, %f570, 0f4B800000;
	add.f32 	%f571, %f102, 0f3F800000;
	selp.f32 	%f619, %f615, %f618, %p189;
	setp.gt.f32 	%p191, %f623, 0f4B800000;
	add.f32 	%f624, %f622, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r340, %r342, %r341;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r343, %r345, %r342;
	// end inline asm
	mov.b32 	%r393, %f17;
	mov.b32 	%r394, %f37;
	mov.b32 	%r396, %f16;
	mov.b32 	%r397, %f38;
	mov.b32 	%r437, %f83;
	mov.b32 	%r438, %f85;
	mov.b32 	%r440, %f755;
	mov.b32 	%r441, %f757;
	xor.b32  	%r449, %r453, -2147483648;
	selp.f32 	%f103, %f571, %f567, %p171;
	selp.f32 	%f625, %f624, %f619, %p191;
	// begin inline asm
	cvt.rn.f16x2.f32 %r392, %r394, %r393;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r395, %r397, %r396;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r436, %r438, %r437;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r439, %r441, %r440;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r448, %r450, %r449;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r451, %r453, %r450;
	// end inline asm
	mov.b32 	%r488, %f625;
	mov.b32 	%r487, %f103;
	mov.b32 	%r491, %f622;
	mov.b32 	%r490, %f102;
	// begin inline asm
	cvt.rn.f16x2.f32 %r486, %r488, %r487;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r489, %r491, %r490;
	// end inline asm
	mov.b32 	%r533, %f165;
	mov.b32 	%r534, %f167;
	// begin inline asm
	cvt.rn.f16x2.f32 %r532, %r534, %r533;
	// end inline asm
	mov.b32 	%r536, %f779;
	mov.b32 	%r537, %f781;
	// begin inline asm
	cvt.rn.f16x2.f32 %r535, %r537, %r536;
	// end inline asm
	mul.lo.s32 	%r550, %r167, 24;
	shl.b32 	%r551, %r4, 1;
	and.b32  	%r552, %r551, 2;
	shr.u32 	%r194, %r318, 3;
	bfe.u32 	%r553, %r318, 3, 1;
	or.b32  	%r554, %r552, %r553;
	and.b32  	%r555, %r2, 127;
	mul.lo.s32 	%r556, %r555, 192;
	and.b32  	%r557, %r194, 2;
	or.b32  	%r195, %r557, %r63;
	cvt.u16.u32 	%rs22, %r195;
	mul.lo.s16 	%rs23, %rs22, 171;
	shr.u16 	%rs24, %rs23, 9;
	mul.lo.s16 	%rs25, %rs24, 3;
	sub.s16 	%rs26, %rs22, %rs25;
	cvt.u32.u16 	%r558, %rs26;
	and.b32  	%r559, %r558, 255;
	and.b16  	%rs27, %rs26, 255;
	mul.wide.u16 	%r560, %rs27, 8;
	add.s32 	%r561, %r556, %r550;
	or.b32  	%r562, %r561, %r554;
	add.s32 	%r563, %r562, %r560;
	mul.wide.u32 	%rd64, %r563, 4;
	add.s64 	%rd65, %rd2, %rd64;
	ld.global.u32 	%r196, [%rd65];
	or.b32  	%r564, %r554, 4;
	cvt.u64.u32 	%rd66, %r560;
	cvt.u64.u32 	%rd67, %r554;
	cvt.u64.u32 	%rd68, %r562;
	add.s64 	%rd69, %rd68, %rd66;
	shl.b64 	%rd70, %rd69, 2;
	add.s64 	%rd71, %rd2, %rd70;
	ld.global.u32 	%r197, [%rd71+16];
	cvt.u64.u32 	%rd72, %r556;
	cvt.u64.u32 	%rd73, %r550;
	add.s64 	%rd74, %rd73, %rd72;
	or.b64  	%rd75, %rd74, %rd67;
	add.s64 	%rd76, %rd75, %rd66;
	shl.b64 	%rd77, %rd76, 2;
	add.s64 	%rd78, %rd2, %rd77;
	ld.global.u32 	%r198, [%rd78+384];
	cvt.u64.u32 	%rd79, %r564;
	or.b64  	%rd80, %rd74, %rd79;
	add.s64 	%rd81, %rd80, %rd66;
	shl.b64 	%rd82, %rd81, 2;
	add.s64 	%rd83, %rd2, %rd82;
	ld.global.u32 	%r199, [%rd83+384];
	shl.b32 	%r565, %r313, 5;
	shl.b32 	%r566, %r318, 2;
	shl.b32 	%r567, %r2, 5;
	shl.b32 	%r200, %r4, 2;
	and.b32  	%r568, %r566, 28;
	or.b32  	%r569, %r568, %r567;
	add.s32 	%r201, %r569, %r565;
	and.b32  	%r202, %r318, 4;
	bfe.s32 	%r570, %r318, 2, 1;
	shl.b32 	%r571, %r318, 4;
	and.b32  	%r572, %r180, 8;
	or.b32  	%r573, %r572, %r571;
	bfe.u32 	%r574, %r573, 3, 3;
	mul.lo.s32 	%r203, %r574, 260;
	cvt.u16.u32 	%rs28, %r318;
	and.b16  	%rs29, %rs28, 255;
	mul.lo.s16 	%rs30, %rs29, 171;
	shr.u16 	%rs31, %rs30, 12;
	mul.lo.s16 	%rs32, %rs31, 24;
	sub.s16 	%rs33, %rs28, %rs32;
	cvt.u32.u16 	%r575, %rs33;
	and.b32  	%r204, %r575, 255;
	add.s32 	%r576, %r4, 6;
	add.s32 	%r577, %r5, 192;
	and.b32  	%r578, %r577, 224;
	shr.u32 	%r579, %r576, 3;
	mad.lo.s32 	%r205, %r579, 260, %r578;
	add.s32 	%r580, %r4, 12;
	add.s32 	%r581, %r5, 128;
	and.b32  	%r582, %r581, 224;
	shr.u32 	%r583, %r580, 3;
	mad.lo.s32 	%r206, %r583, 260, %r582;
	add.s32 	%r584, %r4, 18;
	add.s32 	%r585, %r5, 64;
	and.b32  	%r586, %r585, 224;
	shr.u32 	%r587, %r584, 3;
	mad.lo.s32 	%r207, %r587, 260, %r586;
	or.b32  	%r208, %r5, 780;
	add.s32 	%r588, %r4, 30;
	shr.u32 	%r589, %r588, 3;
	mad.lo.s32 	%r209, %r589, 260, %r578;
	add.s32 	%r590, %r4, 36;
	shr.u32 	%r591, %r590, 3;
	mad.lo.s32 	%r210, %r591, 260, %r582;
	add.s32 	%r592, %r4, 42;
	shr.u32 	%r593, %r592, 3;
	mad.lo.s32 	%r211, %r593, 260, %r586;
	or.b32  	%r212, %r5, 1560;
	add.s32 	%r594, %r4, 54;
	shr.u32 	%r595, %r594, 3;
	mad.lo.s32 	%r213, %r595, 260, %r578;
	add.s32 	%r596, %r4, 60;
	bfe.u32 	%r597, %r596, 3, 3;
	mad.lo.s32 	%r214, %r597, 260, %r582;
	mul.lo.s32 	%r598, %r167, 870;
	shr.u32 	%r599, %r4, 1;
	cvt.u16.u32 	%rs34, %r599;
	and.b16  	%rs35, %rs34, 255;
	mul.lo.s16 	%rs36, %rs35, 171;
	shr.u16 	%rs37, %rs36, 9;
	mul.lo.s16 	%rs38, %rs37, 3;
	sub.s16 	%rs39, %rs34, %rs38;
	cvt.u32.u16 	%r600, %rs39;
	and.b32  	%r215, %r600, 255;
	mad.lo.s32 	%r601, %r554, 33, %r598;
	mad.lo.s32 	%r216, %r559, 290, %r601;
	add.s32 	%r217, %r216, 132;
	setp.lt.u32 	%p240, %r318, 4;
	setp.eq.s32 	%p241, %r168, 1;
	setp.eq.s32 	%p242, %r168, 4;
	setp.eq.s32 	%p243, %r168, 5;
	selp.b32 	%r602, 0, 392, %p131;
	or.b32  	%r603, %r552, %r65;
	setp.eq.s32 	%p244, %r64, 0;
	selp.b32 	%r218, 0, 784, %p244;
	bfe.s32 	%r604, %r318, 3, 1;
	and.b32  	%r219, %r604, 98;
	and.b32  	%r220, %r570, 196;
	or.b32  	%r221, %r603, %r602;
	or.b32  	%r605, %r219, %r218;
	add.s32 	%r606, %r605, %r220;
	add.s32 	%r222, %r606, %r221;
	add.s32 	%r607, %r606, 1576;
	add.s32 	%r223, %r607, %r221;
	or.b32  	%r608, %r603, 4;
	or.b32  	%r224, %r608, %r602;
	add.s32 	%r225, %r606, %r224;
	add.s32 	%r226, %r607, %r224;
	selp.b32 	%r609, 8, 400, %p131;
	or.b32  	%r227, %r603, %r609;
	add.s32 	%r228, %r606, %r227;
	add.s32 	%r229, %r607, %r227;
	or.b32  	%r230, %r608, %r609;
	add.s32 	%r231, %r606, %r230;
	add.s32 	%r232, %r607, %r230;
	and.b32  	%r610, %r4, 1;
	neg.s32 	%r611, %r610;
	and.b32  	%r612, %r611, 392;
	and.b32  	%r613, %r604, 1576;
	mul.lo.s32 	%r614, %r65, 784;
	and.b32  	%r615, %r180, 6;
	shr.u32 	%r616, %r4, 2;
	bfe.s32 	%r617, %r4, 1, 1;
	and.b32  	%r618, %r617, 196;
	or.b32  	%r619, %r614, %r63;
	or.b32  	%r620, %r619, %r615;
	mad.lo.s32 	%r621, %r616, 98, %r620;
	add.s32 	%r622, %r621, %r612;
	add.s32 	%r623, %r622, %r613;
	add.s32 	%r233, %r623, %r618;
	add.s32 	%r234, %r233, 8;
	mul.lo.s32 	%r624, %r311, 786432;
	mad.lo.s32 	%r625, %r315, 192, %r624;
	or.b32  	%r626, %r200, %r194;
	cvt.u16.u32 	%rs40, %r626;
	and.b16  	%rs41, %rs40, 255;
	mul.lo.s16 	%rs42, %rs41, 171;
	shr.u16 	%rs43, %rs42, 9;
	and.b16  	%rs44, %rs43, 24;
	add.s16 	%rs45, %rs40, %rs44;
	shl.b16 	%rs46, %rs45, 3;
	cvt.u32.u16 	%r627, %rs46;
	and.b32  	%r235, %r627, 248;
	and.b32  	%r236, %r318, 7;
	cvt.s64.s32 	%rd23, %r625;
	add.s32 	%r628, %r216, %r215;
	mul.wide.u32 	%rd84, %r628, 4;
	mov.u64 	%rd85, shmem;
	add.s64 	%rd24, %rd85, %rd84;
	add.s32 	%r629, %r217, %r215;
	mul.wide.u32 	%rd86, %r629, 4;
	add.s64 	%rd25, %rd85, %rd86;
	cvt.u64.u32 	%rd87, %r216;
	cvt.u64.u16 	%rd88, %rs39;
	and.b64  	%rd89, %rd88, 255;
	add.s64 	%rd90, %rd87, %rd89;
	shl.b64 	%rd91, %rd90, 2;
	add.s64 	%rd26, %rd85, %rd91;
	cvt.u64.u32 	%rd92, %r217;
	add.s64 	%rd93, %rd92, %rd89;
	shl.b64 	%rd94, %rd93, 2;
	add.s64 	%rd27, %rd85, %rd94;
	or.pred  	%p245, %p240, %p241;
	and.b32  	%r630, %r318, 24;
	setp.eq.s32 	%p246, %r630, 8;
	or.pred  	%p247, %p245, %p246;
	or.pred  	%p248, %p247, %p242;
	setp.eq.s32 	%p249, %r630, 24;
	or.pred  	%p250, %p243, %p249;
	selp.b32 	%r237, 1145324612, -286331154, %p247;
	or.pred  	%p1, %p248, %p250;
	selp.b32 	%r238, 1145324612, -286331154, %p245;
	add.s32 	%r631, %r168, -1;
	setp.lt.u32 	%p251, %r631, 3;
	or.pred  	%p2, %p240, %p251;
	setp.eq.s32 	%p252, %r630, 16;
	or.pred  	%p3, %p252, %p249;
	selp.b32 	%r239, 1145324612, -286331154, %p252;
	add.s32 	%r88, %r215, 3;
	and.b16  	%rs7, %rs39, 255;
	add.s32 	%r87, %r215, 27;
	or.b16  	%rs8, %rs7, 24;
	mov.u32 	%r89, 0;
	mov.u16 	%rs1, 0;
	selp.b32 	%r133, %r238, %r239, %p2;
	or.pred  	%p284, %p2, %p3;
	mov.u32 	%r109, %r89;
	mov.u32 	%r110, %r89;
	mov.u32 	%r111, %r89;
	bra.uni 	$L__BB0_198;
$L__BB0_169:                            // %L40300
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r164, %r89, 48;
	add.s32 	%r88, %r88, 48;
	add.s16 	%rs1, %rs1, 48;
	add.s32 	%r87, %r87, 48;
	setp.ne.s32 	%p300, %r89, 32688;
	mov.u32 	%r89, %r164;
	@%p300 bra 	$L__BB0_198;
	bra.uni 	$L__BB0_170;
$L__BB0_198:                            // %L1929
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_162 Depth 2
                                        //     Child Loop BB0_166 Depth 2
	add.s32 	%r632, %r89, %r309;
	setp.lt.s32 	%p253, %r632, %r310;
	@%p253 bra 	$L__BB0_199;
	bra.uni 	$L__BB0_170;
$L__BB0_199:                            // %oksrem888
                                        //   in Loop: Header=BB0_198 Depth=1
	setp.eq.s32 	%p254, %r202, 0;
	mul.hi.u32 	%r729, %r89, -1431655765;
	shr.u32 	%r730, %r729, 5;
	mul.lo.s32 	%r242, %r730, 48;
	add.s32 	%r731, %r242, %r200;
	or.b32  	%r732, %r731, %r194;
	shr.s32 	%r733, %r731, 31;
	shr.u32 	%r734, %r733, 17;
	add.s32 	%r735, %r732, %r734;
	and.b32  	%r736, %r735, -32768;
	sub.s32 	%r737, %r732, %r736;
	add.s32 	%r738, %r737, %r309;
	mad.lo.s32 	%r739, %r738, 12288, %r201;
	mul.hi.s32 	%r740, %r739, 715827883;
	shr.u32 	%r741, %r740, 31;
	shr.s32 	%r742, %r740, 26;
	add.s32 	%r743, %r742, %r741;
	setp.lt.s32 	%p255, %r739, 0;
	mul.lo.s32 	%r744, %r743, 402653184;
	setp.ne.s32 	%p256, %r744, %r739;
	and.pred  	%p257, %p255, %p256;
	selp.s32 	%r745, -1, 0, %p257;
	add.s32 	%r746, %r743, %r745;
	mad.lo.s32 	%r747, %r746, -402653184, %r739;
	mul.wide.s32 	%rd95, %r747, 4;
	add.s64 	%rd96, %rd3, %rd95;
	ld.global.v4.u32 	{%r748, %r749, %r750, %r751}, [%rd96];
	add.s32 	%r752, %r732, 24;
	shr.s32 	%r753, %r752, 31;
	shr.u32 	%r754, %r753, 17;
	add.s32 	%r755, %r752, %r754;
	and.b32  	%r756, %r755, -32768;
	sub.s32 	%r757, %r752, %r756;
	add.s32 	%r758, %r757, %r309;
	mad.lo.s32 	%r759, %r758, 12288, %r201;
	mul.hi.s32 	%r760, %r759, 715827883;
	shr.u32 	%r761, %r760, 31;
	shr.s32 	%r762, %r760, 26;
	add.s32 	%r763, %r762, %r761;
	setp.lt.s32 	%p258, %r759, 0;
	mul.lo.s32 	%r764, %r763, 402653184;
	setp.ne.s32 	%p259, %r764, %r759;
	and.pred  	%p260, %p258, %p259;
	selp.s32 	%r765, -1, 0, %p260;
	add.s32 	%r766, %r763, %r765;
	mad.lo.s32 	%r767, %r766, -402653184, %r759;
	mul.wide.s32 	%rd97, %r767, 4;
	add.s64 	%rd98, %rd3, %rd97;
	ld.global.v4.u32 	{%r768, %r769, %r770, %r771}, [%rd98];
	selp.b32 	%r772, %r750, %r748, %p254;
	shfl.sync.bfly.b32	%r773, %r772, 4, 31, -1;
	selp.b32 	%r635, %r748, %r773, %p254;
	selp.b32 	%r640, %r773, %r750, %p254;
	selp.b32 	%r774, %r751, %r749, %p254;
	shfl.sync.bfly.b32	%r775, %r774, 4, 31, -1;
	selp.b32 	%r643, %r749, %r775, %p254;
	selp.b32 	%r648, %r775, %r751, %p254;
	selp.b32 	%r776, %r770, %r768, %p254;
	shfl.sync.bfly.b32	%r777, %r776, 4, 31, -1;
	selp.b32 	%r651, %r768, %r777, %p254;
	selp.b32 	%r656, %r777, %r770, %p254;
	selp.b32 	%r778, %r771, %r769, %p254;
	shfl.sync.bfly.b32	%r779, %r778, 4, 31, -1;
	selp.b32 	%r659, %r769, %r779, %p254;
	selp.b32 	%r664, %r779, %r771, %p254;
	shl.b32 	%r636, %r640, 4;
	mov.u32 	%r634, 252645135;
	// begin inline asm
	lop3.b32 %r666, %r634, %r635, %r636, 202;
	// end inline asm
	shr.u32 	%r639, %r635, 4;
	// begin inline asm
	lop3.b32 %r682, %r634, %r639, %r640, 202;
	// end inline asm
	shl.b32 	%r644, %r648, 4;
	// begin inline asm
	lop3.b32 %r674, %r634, %r643, %r644, 202;
	// end inline asm
	shr.u32 	%r647, %r643, 4;
	// begin inline asm
	lop3.b32 %r690, %r634, %r647, %r648, 202;
	// end inline asm
	shl.b32 	%r652, %r656, 4;
	// begin inline asm
	lop3.b32 %r667, %r634, %r651, %r652, 202;
	// end inline asm
	shr.u32 	%r655, %r651, 4;
	// begin inline asm
	lop3.b32 %r683, %r634, %r655, %r656, 202;
	// end inline asm
	shl.b32 	%r660, %r664, 4;
	// begin inline asm
	lop3.b32 %r675, %r634, %r659, %r660, 202;
	// end inline asm
	shr.u32 	%r663, %r659, 4;
	// begin inline asm
	lop3.b32 %r691, %r634, %r663, %r664, 202;
	// end inline asm
	mov.u32 	%r668, 25152;
	// begin inline asm
	prmt.b32 %r698, %r666, %r667, %r668;
	// end inline asm
	mov.u32 	%r672, 29521;
	// begin inline asm
	prmt.b32 %r714, %r666, %r667, %r672;
	// end inline asm
	// begin inline asm
	prmt.b32 %r706, %r674, %r675, %r668;
	// end inline asm
	// begin inline asm
	prmt.b32 %r722, %r674, %r675, %r672;
	// end inline asm
	// begin inline asm
	prmt.b32 %r699, %r682, %r683, %r668;
	// end inline asm
	// begin inline asm
	prmt.b32 %r715, %r682, %r683, %r672;
	// end inline asm
	// begin inline asm
	prmt.b32 %r707, %r690, %r691, %r668;
	// end inline asm
	// begin inline asm
	prmt.b32 %r723, %r690, %r691, %r672;
	// end inline asm
	mov.u32 	%r724, 21520;
	// begin inline asm
	prmt.b32 %r697, %r698, %r699, %r724;
	// end inline asm
	mov.u32 	%r728, 30258;
	// begin inline asm
	prmt.b32 %r701, %r698, %r699, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r705, %r706, %r707, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r709, %r706, %r707, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r713, %r714, %r715, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r717, %r714, %r715, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r721, %r722, %r723, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r725, %r722, %r723, %r728;
	// end inline asm
	mul.hi.s32 	%r780, %r732, 715827883;
	shr.u32 	%r781, %r780, 31;
	shr.s32 	%r782, %r780, 2;
	add.s32 	%r783, %r782, %r781;
	mul.lo.s32 	%r784, %r783, 24;
	sub.s32 	%r785, %r732, %r784;
	add.s32 	%r786, %r785, %r203;
	mul.wide.s32 	%rd99, %r786, 4;
	add.s64 	%rd101, %rd85, %rd99;
	st.shared.u32 	[%rd101], %r697;
	add.s32 	%r787, %r786, 128;
	mul.wide.u32 	%rd102, %r787, 4;
	add.s64 	%rd103, %rd85, %rd102;
	st.shared.u32 	[%rd103], %r705;
	add.s32 	%r788, %r786, 64;
	mul.wide.u32 	%rd104, %r788, 4;
	add.s64 	%rd105, %rd85, %rd104;
	st.shared.u32 	[%rd105], %r701;
	add.s32 	%r789, %r786, 192;
	mul.wide.u32 	%rd106, %r789, 4;
	add.s64 	%rd107, %rd85, %rd106;
	st.shared.u32 	[%rd107], %r709;
	add.s32 	%r790, %r786, 32;
	mul.wide.u32 	%rd108, %r790, 4;
	add.s64 	%rd109, %rd85, %rd108;
	st.shared.u32 	[%rd109], %r713;
	add.s32 	%r791, %r786, 160;
	mul.wide.u32 	%rd110, %r791, 4;
	add.s64 	%rd111, %rd85, %rd110;
	st.shared.u32 	[%rd111], %r721;
	add.s32 	%r792, %r786, 96;
	mul.wide.u32 	%rd112, %r792, 4;
	add.s64 	%rd113, %rd85, %rd112;
	st.shared.u32 	[%rd113], %r717;
	add.s32 	%r793, %r786, 224;
	mul.wide.u32 	%rd114, %r793, 4;
	add.s64 	%rd115, %rd85, %rd114;
	st.shared.u32 	[%rd115], %r725;
	bar.sync 	0;
	add.s32 	%r794, %r242, %r204;
	cvt.u16.u32 	%rs47, %r794;
	mul.hi.s16 	%rs48, %rs47, 10923;
	shr.u16 	%rs49, %rs48, 15;
	shr.s16 	%rs50, %rs48, 2;
	add.s16 	%rs51, %rs50, %rs49;
	mul.lo.s16 	%rs52, %rs51, 24;
	sub.s16 	%rs53, %rs47, %rs52;
	cvt.s32.s16 	%r243, %rs53;
	add.s32 	%r795, %r5, %r243;
	mul.wide.s32 	%rd116, %r795, 4;
	add.s64 	%rd117, %rd85, %rd116;
	ld.shared.u32 	%r244, [%rd117];
	add.s32 	%r796, %r205, %r243;
	mul.wide.s32 	%rd118, %r796, 4;
	add.s64 	%rd119, %rd85, %rd118;
	ld.shared.u32 	%r245, [%rd119];
	add.s32 	%r797, %r206, %r243;
	mul.wide.u32 	%rd120, %r797, 4;
	add.s64 	%rd121, %rd85, %rd120;
	ld.shared.u32 	%r246, [%rd121];
	add.s32 	%r798, %r207, %r243;
	mul.wide.u32 	%rd122, %r798, 4;
	add.s64 	%rd123, %rd85, %rd122;
	ld.shared.u32 	%r247, [%rd123];
	add.s32 	%r799, %r208, %r243;
	mul.wide.u32 	%rd124, %r799, 4;
	add.s64 	%rd125, %rd85, %rd124;
	ld.shared.u32 	%r248, [%rd125];
	add.s32 	%r800, %r209, %r243;
	mul.wide.u32 	%rd126, %r800, 4;
	add.s64 	%rd127, %rd85, %rd126;
	ld.shared.u32 	%r249, [%rd127];
	add.s32 	%r801, %r210, %r243;
	mul.wide.u32 	%rd128, %r801, 4;
	add.s64 	%rd129, %rd85, %rd128;
	ld.shared.u32 	%r250, [%rd129];
	add.s32 	%r802, %r211, %r243;
	mul.wide.u32 	%rd130, %r802, 4;
	add.s64 	%rd131, %rd85, %rd130;
	ld.shared.u32 	%r251, [%rd131];
	add.s32 	%r803, %r212, %r243;
	mul.wide.u32 	%rd132, %r803, 4;
	add.s64 	%rd133, %rd85, %rd132;
	ld.shared.u32 	%r252, [%rd133];
	add.s32 	%r804, %r213, %r243;
	mul.wide.u32 	%rd134, %r804, 4;
	add.s64 	%rd135, %rd85, %rd134;
	ld.shared.u32 	%r253, [%rd135];
	add.s32 	%r805, %r214, %r243;
	mul.wide.s32 	%rd136, %r805, 4;
	add.s64 	%rd137, %rd85, %rd136;
	ld.shared.u32 	%r254, [%rd137];
	bar.sync 	0;
	shfl.sync.idx.b32	%r255, %r193, 0, 31, -1;
	shfl.sync.idx.b32	%r256, %r193, 1, 31, -1;
	shfl.sync.idx.b32	%r257, %r193, 2, 31, -1;
	shfl.sync.idx.b32	%r258, %r193, 3, 31, -1;
	shfl.sync.idx.b32	%r259, %r193, 4, 31, -1;
	shfl.sync.idx.b32	%r260, %r193, 5, 31, -1;
	shfl.sync.idx.b32	%r261, %r193, 6, 31, -1;
	shfl.sync.idx.b32	%r262, %r193, 7, 31, -1;
	shfl.sync.idx.b32	%r263, %r193, 8, 31, -1;
	shfl.sync.idx.b32	%r264, %r193, 9, 31, -1;
	shfl.sync.idx.b32	%r265, %r193, 10, 31, -1;
	shfl.sync.idx.b32	%r266, %r193, 11, 31, -1;
	shfl.sync.idx.b32	%r267, %r193, 12, 31, -1;
	shfl.sync.idx.b32	%r268, %r193, 13, 31, -1;
	shfl.sync.idx.b32	%r269, %r193, 14, 31, -1;
	shfl.sync.idx.b32	%r270, %r193, 15, 31, -1;
	setp.eq.s32 	%p261, %r255, 999999999;
	@%p261 bra 	$L__BB0_145;
// %bb.200:                             // %oksrem2312
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r806, %r255, %r243;
	mul.wide.s32 	%rd138, %r806, 4;
	add.s64 	%rd140, %rd85, %rd138;
	st.shared.u32 	[%rd140], %r244;
	setp.eq.s32 	%p262, %r256, 999999999;
	@%p262 bra 	$L__BB0_146;
// %bb.201:                             // %oksrem2380
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r807, %r256, %r243;
	mul.wide.s32 	%rd141, %r807, 4;
	add.s64 	%rd143, %rd85, %rd141;
	st.shared.u32 	[%rd143], %r245;
	setp.eq.s32 	%p263, %r257, 999999999;
	@%p263 bra 	$L__BB0_147;
// %bb.202:                             // %oksrem2448
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r808, %r257, %r243;
	mul.wide.s32 	%rd144, %r808, 4;
	add.s64 	%rd146, %rd85, %rd144;
	st.shared.u32 	[%rd146], %r246;
	setp.eq.s32 	%p264, %r258, 999999999;
	@%p264 bra 	$L__BB0_148;
// %bb.203:                             // %oksrem2516
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r809, %r258, %r243;
	mul.wide.s32 	%rd147, %r809, 4;
	add.s64 	%rd149, %rd85, %rd147;
	st.shared.u32 	[%rd149], %r247;
	setp.eq.s32 	%p265, %r259, 999999999;
	@%p265 bra 	$L__BB0_149;
// %bb.204:                             // %oksrem2584
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r810, %r259, %r243;
	mul.wide.s32 	%rd150, %r810, 4;
	add.s64 	%rd152, %rd85, %rd150;
	st.shared.u32 	[%rd152], %r248;
	setp.eq.s32 	%p266, %r260, 999999999;
	@%p266 bra 	$L__BB0_150;
// %bb.205:                             // %oksrem2652
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r811, %r260, %r243;
	mul.wide.s32 	%rd153, %r811, 4;
	add.s64 	%rd155, %rd85, %rd153;
	st.shared.u32 	[%rd155], %r249;
	setp.eq.s32 	%p267, %r261, 999999999;
	@%p267 bra 	$L__BB0_151;
// %bb.206:                             // %oksrem2720
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r812, %r261, %r243;
	mul.wide.s32 	%rd156, %r812, 4;
	add.s64 	%rd158, %rd85, %rd156;
	st.shared.u32 	[%rd158], %r250;
	setp.eq.s32 	%p268, %r262, 999999999;
	@%p268 bra 	$L__BB0_152;
// %bb.207:                             // %oksrem2788
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r813, %r262, %r243;
	mul.wide.s32 	%rd159, %r813, 4;
	add.s64 	%rd161, %rd85, %rd159;
	st.shared.u32 	[%rd161], %r251;
	setp.eq.s32 	%p269, %r263, 999999999;
	@%p269 bra 	$L__BB0_153;
// %bb.208:                             // %oksrem2856
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r814, %r263, %r243;
	mul.wide.s32 	%rd162, %r814, 4;
	add.s64 	%rd164, %rd85, %rd162;
	st.shared.u32 	[%rd164], %r252;
	setp.eq.s32 	%p270, %r264, 999999999;
	@%p270 bra 	$L__BB0_154;
// %bb.209:                             // %oksrem2924
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r815, %r264, %r243;
	mul.wide.s32 	%rd165, %r815, 4;
	add.s64 	%rd167, %rd85, %rd165;
	st.shared.u32 	[%rd167], %r253;
	setp.eq.s32 	%p271, %r265, 999999999;
	@%p271 bra 	$L__BB0_155;
// %bb.210:                             // %oksrem2993
                                        //   in Loop: Header=BB0_198 Depth=1
	setp.gt.u32 	%p272, %r4, 3;
	selp.b32 	%r816, 0, %r254, %p272;
	add.s32 	%r817, %r265, %r243;
	mul.wide.s32 	%rd168, %r817, 4;
	add.s64 	%rd170, %rd85, %rd168;
	st.shared.u32 	[%rd170], %r816;
	setp.eq.s32 	%p273, %r266, 999999999;
	@%p273 bra 	$L__BB0_156;
// %bb.211:                             // %oksrem3061
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r818, %r266, %r243;
	mul.wide.s32 	%rd171, %r818, 4;
	add.s64 	%rd173, %rd85, %rd171;
	mov.u32 	%r819, 0;
	st.shared.u32 	[%rd173], %r819;
	setp.eq.s32 	%p274, %r267, 999999999;
	@%p274 bra 	$L__BB0_157;
// %bb.212:                             // %oksrem3128
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r820, %r267, %r243;
	mul.wide.s32 	%rd174, %r820, 4;
	add.s64 	%rd176, %rd85, %rd174;
	st.shared.u32 	[%rd176], %r819;
	setp.eq.s32 	%p275, %r268, 999999999;
	@%p275 bra 	$L__BB0_158;
// %bb.213:                             // %oksrem3195
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r822, %r268, %r243;
	mul.wide.s32 	%rd177, %r822, 4;
	add.s64 	%rd179, %rd85, %rd177;
	st.shared.u32 	[%rd179], %r819;
	setp.eq.s32 	%p276, %r269, 999999999;
	@%p276 bra 	$L__BB0_159;
// %bb.214:                             // %oksrem3262
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r824, %r269, %r243;
	mul.wide.s32 	%rd180, %r824, 4;
	add.s64 	%rd182, %rd85, %rd180;
	st.shared.u32 	[%rd182], %r819;
	setp.eq.s32 	%p277, %r270, 999999999;
	@%p277 bra 	$L__BB0_160;
// %bb.215:                             // %oksrem3329
                                        //   in Loop: Header=BB0_198 Depth=1
	setp.eq.s32 	%p278, %r195, 3;
	add.s32 	%r827, %r270, %r243;
	mul.wide.s32 	%rd183, %r827, 4;
	add.s64 	%rd185, %rd85, %rd183;
	st.shared.u32 	[%rd185], %r819;
	bar.sync 	0;
	mov.u32 	%r93, %r819;
	mov.u32 	%r94, %r819;
	mov.u32 	%r95, %r819;
	mov.u32 	%r96, %r819;
	mov.u32 	%r97, %r819;
	mov.u32 	%r98, %r819;
	mov.u32 	%r99, %r819;
	mov.u32 	%r100, %r819;
	mov.u32 	%r101, %r819;
	mov.u32 	%r102, %r819;
	mov.u32 	%r103, %r819;
	mov.u32 	%r104, %r819;
	mov.u32 	%r105, %r819;
	mov.u32 	%r106, %r819;
	mov.u32 	%r107, %r819;
	mov.u32 	%r108, %r819;
	@%p278 bra 	$L__BB0_161;
// %bb.216:                             // %oksrem3398
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r271, %r242, %r215;
	ld.shared.u32 	%r93, [%rd24];
	ld.shared.u32 	%r94, [%rd25];
	ld.shared.u32 	%r95, [%rd26+12];
	ld.shared.u32 	%r96, [%rd27+12];
	ld.shared.u32 	%r97, [%rd26+24];
	ld.shared.u32 	%r98, [%rd27+24];
	ld.shared.u32 	%r99, [%rd26+36];
	ld.shared.u32 	%r100, [%rd27+36];
	add.s32 	%r828, %r271, 12;
	mul.hi.u32 	%r829, %r828, -1431655765;
	shr.u32 	%r830, %r829, 4;
	mul.lo.s32 	%r831, %r830, 24;
	sub.s32 	%r832, %r828, %r831;
	add.s32 	%r833, %r216, %r832;
	mul.wide.u32 	%rd186, %r833, 4;
	add.s64 	%rd188, %rd85, %rd186;
	ld.shared.u32 	%r101, [%rd188];
	add.s32 	%r834, %r217, %r832;
	mul.wide.u32 	%rd189, %r834, 4;
	add.s64 	%rd190, %rd85, %rd189;
	ld.shared.u32 	%r102, [%rd190];
	ld.shared.u32 	%r103, [%rd26+60];
	ld.shared.u32 	%r104, [%rd27+60];
	cvt.u16.u32 	%rs54, %r271;
	add.s16 	%rs55, %rs54, 18;
	mul.hi.s16 	%rs56, %rs55, 10923;
	shr.u16 	%rs57, %rs56, 15;
	shr.s16 	%rs58, %rs56, 2;
	add.s16 	%rs59, %rs58, %rs57;
	mul.lo.s16 	%rs60, %rs59, 24;
	sub.s16 	%rs61, %rs55, %rs60;
	cvt.s32.s16 	%r835, %rs61;
	add.s32 	%r836, %r216, %r835;
	mul.wide.s32 	%rd191, %r836, 4;
	add.s64 	%rd192, %rd85, %rd191;
	ld.shared.u32 	%r105, [%rd192];
	add.s32 	%r837, %r217, %r835;
	mul.wide.u32 	%rd193, %r837, 4;
	add.s64 	%rd194, %rd85, %rd193;
	ld.shared.u32 	%r106, [%rd194];
	add.s16 	%rs62, %rs54, 21;
	mul.hi.s16 	%rs63, %rs62, 10923;
	shr.u16 	%rs64, %rs63, 15;
	shr.s16 	%rs65, %rs63, 2;
	add.s16 	%rs66, %rs65, %rs64;
	mul.lo.s16 	%rs67, %rs66, 24;
	sub.s16 	%rs68, %rs62, %rs67;
	cvt.s32.s16 	%r838, %rs68;
	add.s32 	%r839, %r216, %r838;
	mul.wide.s32 	%rd195, %r839, 4;
	add.s64 	%rd196, %rd85, %rd195;
	ld.shared.u32 	%r107, [%rd196];
	add.s32 	%r840, %r217, %r838;
	mul.wide.u32 	%rd197, %r840, 4;
	add.s64 	%rd198, %rd85, %rd197;
	ld.shared.u32 	%r108, [%rd198];
$L__BB0_161:                            // %L10559
                                        //   in Loop: Header=BB0_198 Depth=1
	bar.sync 	0;
	mov.u16 	%rs2, %rs1;
	mov.u32 	%r112, %r819;
	bra.uni 	$L__BB0_162;
$L__BB0_164:                            // %L25420
                                        //   in Loop: Header=BB0_162 Depth=2
	bar.sync 	0;
	add.s32 	%r112, %r112, 6;
	add.s16 	%rs2, %rs2, 6;
	setp.ne.s32 	%p289, %r112, 24;
	@%p289 bra 	$L__BB0_162;
	bra.uni 	$L__BB0_165;
$L__BB0_162:                            // %L10577
                                        //   Parent Loop BB0_198 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p279, %r112, 0;
	selp.b32 	%r1234, %r93, 0, %p279;
	setp.eq.s32 	%p280, %r112, 6;
	selp.b32 	%r1235, %r97, %r1234, %p280;
	setp.eq.s32 	%p281, %r112, 12;
	selp.b32 	%r1236, %r101, %r1235, %p281;
	setp.eq.s32 	%p282, %r112, 18;
	selp.b32 	%r1237, %r105, %r1236, %p282;
	selp.b32 	%r1238, %r94, 0, %p279;
	selp.b32 	%r1239, %r98, %r1238, %p280;
	selp.b32 	%r1240, %r102, %r1239, %p281;
	selp.b32 	%r1241, %r106, %r1240, %p282;
	selp.b32 	%r1242, %r95, 0, %p279;
	selp.b32 	%r1243, %r99, %r1242, %p280;
	selp.b32 	%r1244, %r103, %r1243, %p281;
	selp.b32 	%r1245, %r107, %r1244, %p282;
	selp.b32 	%r1246, %r96, 0, %p279;
	selp.b32 	%r1247, %r100, %r1246, %p280;
	selp.b32 	%r1248, %r104, %r1247, %p281;
	selp.b32 	%r1249, %r108, %r1248, %p282;
	mov.u16 	%rs106, 25600;
	// begin inline asm
	mov.b32 %r847, {%rs106, %rs106};
	// end inline asm
	mov.u16 	%rs108, 21504;
	// begin inline asm
	mov.b32 %r858, {%rs108, %rs108};
	// end inline asm
	xor.b32  	%r846, %r1237, -2004318072;
	mov.u32 	%r983, 983055;
	// begin inline asm
	lop3.b32 %r844, %r983, %r846, %r847, 202;
	// end inline asm
	mov.u16 	%rs112, 18432;
	// begin inline asm
	mov.b32 %r848, {%rs112, %rs112};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r849, %r847, %r848;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r852, %r844, %r849;
	// end inline asm
	mov.u32 	%r994, 15728880;
	// begin inline asm
	lop3.b32 %r855, %r994, %r846, %r858, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r859, {%rs112, %rs112};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r860, %r858, %r859;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r863, %r855, %r860;
	// end inline asm
	// begin inline asm
	mov.b32 %r893, {%rs106, %rs106};
	// end inline asm
	// begin inline asm
	mov.b32 %r904, {%rs108, %rs108};
	// end inline asm
	xor.b32  	%r892, %r1241, -2004318072;
	// begin inline asm
	lop3.b32 %r890, %r983, %r892, %r893, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r894, {%rs112, %rs112};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r895, %r893, %r894;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r898, %r890, %r895;
	// end inline asm
	// begin inline asm
	lop3.b32 %r901, %r994, %r892, %r904, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r905, {%rs112, %rs112};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r906, %r904, %r905;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r909, %r901, %r906;
	// end inline asm
	// begin inline asm
	mov.b32 %r939, {%rs106, %rs106};
	// end inline asm
	// begin inline asm
	mov.b32 %r950, {%rs108, %rs108};
	// end inline asm
	xor.b32  	%r938, %r1245, -2004318072;
	// begin inline asm
	lop3.b32 %r936, %r983, %r938, %r939, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r940, {%rs112, %rs112};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r941, %r939, %r940;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r944, %r936, %r941;
	// end inline asm
	// begin inline asm
	lop3.b32 %r947, %r994, %r938, %r950, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r951, {%rs112, %rs112};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r952, %r950, %r951;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r955, %r947, %r952;
	// end inline asm
	// begin inline asm
	mov.b32 %r985, {%rs106, %rs106};
	// end inline asm
	// begin inline asm
	mov.b32 %r996, {%rs108, %rs108};
	// end inline asm
	xor.b32  	%r984, %r1249, -2004318072;
	// begin inline asm
	lop3.b32 %r982, %r983, %r984, %r985, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r986, {%rs112, %rs112};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r987, %r985, %r986;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r990, %r982, %r987;
	// end inline asm
	// begin inline asm
	lop3.b32 %r993, %r994, %r984, %r996, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r997, {%rs112, %rs112};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r998, %r996, %r997;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1001, %r993, %r998;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r196;
    mov.b32 {%r2re, %r2im}, %r852;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1026, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r197;
    mov.b32 {%r2re, %r2im}, %r898;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1029, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r198;
    mov.b32 {%r2re, %r2im}, %r863;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1032, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r199;
    mov.b32 {%r2re, %r2im}, %r909;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1035, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r196;
    mov.b32 {%r2re, %r2im}, %r944;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1038, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r197;
    mov.b32 {%r2re, %r2im}, %r990;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1041, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r198;
    mov.b32 {%r2re, %r2im}, %r955;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1044, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r199;
    mov.b32 {%r2re, %r2im}, %r1001;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1047, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1050, %r1051}, {%r340, %r343}, {%r1026}, {%r819, %r819};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1057, %r1058}, {%r340, %r343}, {%r1029}, {%r819, %r819};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1064, %r1065}, {%r340, %r343}, {%r1032}, {%r819, %r819};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1071, %r1072}, {%r340, %r343}, {%r1035}, {%r819, %r819};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1078, %r1079}, {%r340, %r343}, {%r1038}, {%r819, %r819};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1085, %r1086}, {%r340, %r343}, {%r1041}, {%r819, %r819};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1092, %r1093}, {%r340, %r343}, {%r1044}, {%r819, %r819};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1099, %r1100}, {%r340, %r343}, {%r1047}, {%r819, %r819};
	// end inline asm
	@%p1 bra 	$L__BB0_217;
	bra.uni 	$L__BB0_163;
$L__BB0_217:                            // %pass4747
                                        //   in Loop: Header=BB0_162 Depth=2
	// begin inline asm
	neg.f16x2 %r1106, %r395;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1108, %r1106, %r1051;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1111, %r392, %r1050, %r1108;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1115, %r395;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1117, %r1115, %r1058;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1120, %r392, %r1057, %r1117;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1124, %r395;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1126, %r1124, %r1065;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1129, %r392, %r1064, %r1126;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1133, %r395;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1135, %r1133, %r1072;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1138, %r392, %r1071, %r1135;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1142, %r395;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1144, %r1142, %r1079;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1147, %r392, %r1078, %r1144;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1151, %r395;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1153, %r1151, %r1086;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1156, %r392, %r1085, %r1153;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1160, %r395;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1162, %r1160, %r1093;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1165, %r392, %r1092, %r1162;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1169, %r395;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1171, %r1169, %r1100;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1174, %r392, %r1099, %r1171;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1178, %r395, %r1050;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1181, %r392, %r1051, %r1178;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1185, %r395, %r1057;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1188, %r392, %r1058, %r1185;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1192, %r395, %r1064;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1195, %r392, %r1065, %r1192;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1199, %r395, %r1071;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1202, %r392, %r1072, %r1199;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1206, %r395, %r1078;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1209, %r392, %r1079, %r1206;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1213, %r395, %r1085;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1216, %r392, %r1086, %r1213;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1220, %r395, %r1092;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1223, %r392, %r1093, %r1220;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1227, %r395, %r1099;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1230, %r392, %r1100, %r1227;
	// end inline asm
	setp.gt.u32 	%p283, %r318, 11;
	mov.u32 	%r1320, 0;
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1323, %r1324}, {%r436, %r439}, {%r1111, %r1181}, {%r1320, %r1320}, %r237, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1331, %r1332}, {%r436, %r439}, {%r1120, %r1188}, {%r1320, %r1320}, %r237, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1339, %r1340}, {%r436, %r439}, {%r1129, %r1195}, {%r1320, %r1320}, %r237, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1347, %r1348}, {%r436, %r439}, {%r1138, %r1202}, {%r1320, %r1320}, %r237, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1355, %r1356}, {%r436, %r439}, {%r1147, %r1209}, {%r1320, %r1320}, %r237, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1363, %r1364}, {%r436, %r439}, {%r1156, %r1216}, {%r1320, %r1320}, %r237, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1371, %r1372}, {%r436, %r439}, {%r1165, %r1223}, {%r1320, %r1320}, %r237, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1379, %r1380}, {%r436, %r439}, {%r1174, %r1230}, {%r1320, %r1320}, %r237, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r288, %r1323, %r1324, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r289, %r1323, %r1324, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r290, %r1331, %r1332, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r291, %r1331, %r1332, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r292, %r1339, %r1340, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r293, %r1339, %r1340, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r294, %r1347, %r1348, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r295, %r1347, %r1348, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r296, %r1355, %r1356, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r297, %r1355, %r1356, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r298, %r1363, %r1364, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r299, %r1363, %r1364, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r300, %r1371, %r1372, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r301, %r1371, %r1372, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r302, %r1379, %r1380, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r303, %r1379, %r1380, %r728;
	// end inline asm
	add.s16 	%rs117, %rs7, %rs2;
	mul.hi.s16 	%rs118, %rs117, 10923;
	shr.u16 	%rs119, %rs118, 15;
	add.s16 	%rs120, %rs118, %rs119;
	mul.lo.s16 	%rs121, %rs120, 6;
	sub.s16 	%rs122, %rs117, %rs121;
	mul.wide.s16 	%r1386, %rs122, 16;
	add.s32 	%r1387, %r222, %r1386;
	mul.wide.s32 	%rd201, %r1387, 4;
	add.s64 	%rd28, %rd85, %rd201;
	st.shared.u32 	[%rd28], %r288;
	add.s32 	%r1388, %r223, %r1386;
	mul.wide.u32 	%rd203, %r1388, 4;
	add.s64 	%rd29, %rd85, %rd203;
	st.shared.u32 	[%rd29], %r289;
	add.s32 	%r1389, %r225, %r1386;
	mul.wide.s32 	%rd204, %r1389, 4;
	add.s64 	%rd30, %rd85, %rd204;
	st.shared.u32 	[%rd30], %r290;
	add.s32 	%r1390, %r226, %r1386;
	mul.wide.u32 	%rd205, %r1390, 4;
	add.s64 	%rd31, %rd85, %rd205;
	st.shared.u32 	[%rd31], %r291;
	add.s32 	%r1391, %r228, %r1386;
	mul.wide.s32 	%rd206, %r1391, 4;
	add.s64 	%rd32, %rd85, %rd206;
	st.shared.u32 	[%rd32], %r292;
	add.s32 	%r1392, %r229, %r1386;
	mul.wide.u32 	%rd207, %r1392, 4;
	add.s64 	%rd33, %rd85, %rd207;
	st.shared.u32 	[%rd33], %r293;
	add.s32 	%r1393, %r231, %r1386;
	mul.wide.s32 	%rd208, %r1393, 4;
	add.s64 	%rd34, %rd85, %rd208;
	st.shared.u32 	[%rd34], %r294;
	add.s32 	%r1394, %r232, %r1386;
	mul.wide.u32 	%rd209, %r1394, 4;
	add.s64 	%rd35, %rd85, %rd209;
	st.shared.u32 	[%rd35], %r295;
	add.s32 	%r1395, %r88, %r112;
	mul.hi.u32 	%r1396, %r1395, -1431655765;
	shr.u32 	%r1397, %r1396, 2;
	mul.lo.s32 	%r1398, %r1397, 6;
	sub.s32 	%r1399, %r1395, %r1398;
	shl.b32 	%r1400, %r1399, 4;
	add.s32 	%r1401, %r222, %r1400;
	mul.wide.u32 	%rd210, %r1401, 4;
	add.s64 	%rd36, %rd85, %rd210;
	st.shared.u32 	[%rd36], %r296;
	cvt.u64.u32 	%rd211, %r1400;
	cvt.u64.u32 	%rd212, %r221;
	cvt.u64.u32 	%rd213, %r220;
	cvt.u64.u32 	%rd214, %r219;
	cvt.u64.u32 	%rd215, %r218;
	add.s64 	%rd216, %rd215, %rd214;
	add.s64 	%rd217, %rd216, %rd213;
	add.s64 	%rd37, %rd217, %rd212;
	add.s64 	%rd218, %rd37, %rd211;
	shl.b64 	%rd219, %rd218, 2;
	add.s64 	%rd38, %rd85, %rd219;
	st.shared.u32 	[%rd38+6304], %r297;
	add.s32 	%r1402, %r225, %r1400;
	mul.wide.u32 	%rd220, %r1402, 4;
	add.s64 	%rd39, %rd85, %rd220;
	st.shared.u32 	[%rd39], %r298;
	cvt.u64.u32 	%rd221, %r224;
	add.s64 	%rd40, %rd217, %rd221;
	add.s64 	%rd222, %rd40, %rd211;
	shl.b64 	%rd223, %rd222, 2;
	add.s64 	%rd41, %rd85, %rd223;
	st.shared.u32 	[%rd41+6304], %r299;
	add.s32 	%r1403, %r228, %r1400;
	mul.wide.u32 	%rd224, %r1403, 4;
	add.s64 	%rd42, %rd85, %rd224;
	st.shared.u32 	[%rd42], %r300;
	cvt.u64.u32 	%rd225, %r227;
	add.s64 	%rd43, %rd217, %rd225;
	add.s64 	%rd226, %rd43, %rd211;
	shl.b64 	%rd227, %rd226, 2;
	add.s64 	%rd44, %rd85, %rd227;
	st.shared.u32 	[%rd44+6304], %r301;
	add.s32 	%r1404, %r231, %r1400;
	mul.wide.u32 	%rd228, %r1404, 4;
	add.s64 	%rd45, %rd85, %rd228;
	st.shared.u32 	[%rd45], %r302;
	cvt.u64.u32 	%rd229, %r230;
	add.s64 	%rd46, %rd217, %rd229;
	add.s64 	%rd230, %rd46, %rd211;
	shl.b64 	%rd231, %rd230, 2;
	add.s64 	%rd47, %rd85, %rd231;
	st.shared.u32 	[%rd47+6304], %r303;
	@%p283 bra 	$L__BB0_219;
// %bb.218:                             // %oksrem7085
                                        //   in Loop: Header=BB0_162 Depth=2
	st.shared.u32 	[%rd28], %r288;
	st.shared.u32 	[%rd29], %r289;
	st.shared.u32 	[%rd30], %r290;
	st.shared.u32 	[%rd31], %r291;
	st.shared.u32 	[%rd32], %r292;
	st.shared.u32 	[%rd33], %r293;
	st.shared.u32 	[%rd34], %r294;
	st.shared.u32 	[%rd35], %r295;
	st.shared.u32 	[%rd36], %r296;
	st.shared.u32 	[%rd38+6304], %r297;
	st.shared.u32 	[%rd39], %r298;
	st.shared.u32 	[%rd41+6304], %r299;
	st.shared.u32 	[%rd42], %r300;
	st.shared.u32 	[%rd44+6304], %r301;
	st.shared.u32 	[%rd45], %r302;
	st.shared.u32 	[%rd47+6304], %r303;
$L__BB0_219:                            // %L19966
                                        //   in Loop: Header=BB0_162 Depth=2
	bar.sync 	0;
	mul.hi.s16 	%rs123, %rs2, 10923;
	shr.u16 	%rs124, %rs123, 15;
	add.s16 	%rs125, %rs123, %rs124;
	mul.lo.s16 	%rs126, %rs125, 6;
	sub.s16 	%rs127, %rs2, %rs126;
	mul.wide.s16 	%r1451, %rs127, 16;
	add.s32 	%r1452, %r233, %r1451;
	mul.wide.s32 	%rd232, %r1452, 4;
	add.s64 	%rd234, %rd85, %rd232;
	ld.shared.u32 	%r1409, [%rd234];
	add.s32 	%r1453, %r234, %r1451;
	mul.wide.s32 	%rd235, %r1453, 4;
	add.s64 	%rd236, %rd85, %rd235;
	ld.shared.u32 	%r1416, [%rd236];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1405, %r1406}, {%r448, %r451}, {%r1409}, {%r1320, %r1320};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1412, %r1413}, {%r448, %r451}, {%r1416}, {%r1320, %r1320};
	// end inline asm
	@%p284 bra 	$L__BB0_221;
	bra.uni 	$L__BB0_220;
$L__BB0_221:                            // %pass9516
                                        //   in Loop: Header=BB0_162 Depth=2
	// begin inline asm
	neg.f16x2 %r1419, %r489;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1421, %r1419, %r1406;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1424, %r486, %r1405, %r1421;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1428, %r489;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1430, %r1428, %r1413;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1433, %r486, %r1412, %r1430;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1437, %r489, %r1405;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1440, %r486, %r1406, %r1437;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1444, %r489, %r1412;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1447, %r486, %r1413, %r1444;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1473, %r1476}, {%r532, %r535}, {%r1424, %r1440}, {%r1320, %r1320}, %r133, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1480, %r1484}, {%r532, %r535}, {%r1433, %r1447}, {%r1320, %r1320}, %r133, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1472, %r1473, %r1473;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1475, %r1476, %r1476, %r1472;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1479, %r1480, %r1480, %r1475;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1483, %r1484, %r1484, %r1479;
	// end inline asm
	mov.u32 	%r1903, 290787669;
	// begin inline asm
	fma.rn.f16x2 %r1487, %r1903, %r1483, %r111;
	// end inline asm
	add.s32 	%r1906, %r89, %r112;
	add.s32 	%r1907, %r1906, 1;
	mul.hi.u32 	%r1908, %r1907, -1431655765;
	shr.u32 	%r1909, %r1908, 2;
	mul.lo.s32 	%r1910, %r1909, 6;
	sub.s32 	%r1911, %r1907, %r1910;
	shl.b32 	%r1912, %r1911, 4;
	add.s32 	%r1913, %r233, %r1912;
	mul.wide.u32 	%rd239, %r1913, 4;
	add.s64 	%rd241, %rd85, %rd239;
	ld.shared.u32 	%r1495, [%rd241];
	add.s32 	%r1914, %r234, %r1912;
	mul.wide.u32 	%rd242, %r1914, 4;
	add.s64 	%rd243, %rd85, %rd242;
	ld.shared.u32 	%r1502, [%rd243];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1512, %r1509}, {%r448, %r451}, {%r1495}, {%r1320, %r1320};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1521, %r1518}, {%r448, %r451}, {%r1502}, {%r1320, %r1320};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1505, %r489;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1507, %r1505, %r1509;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1510, %r486, %r1512, %r1507;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1514, %r489;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1516, %r1514, %r1518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1519, %r486, %r1521, %r1516;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1523, %r489, %r1512;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1526, %r486, %r1509, %r1523;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1530, %r489, %r1521;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1533, %r486, %r1518, %r1530;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1556, %r1559}, {%r532, %r535}, {%r1510, %r1526}, {%r1320, %r1320}, %r133, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1563, %r1567}, {%r532, %r535}, {%r1519, %r1533}, {%r1320, %r1320}, %r133, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1555, %r1556, %r1556;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1558, %r1559, %r1559, %r1555;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1562, %r1563, %r1563, %r1558;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1566, %r1567, %r1567, %r1562;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1570, %r1903, %r1566, %r1487;
	// end inline asm
	add.s32 	%r1915, %r1906, 2;
	mul.hi.u32 	%r1916, %r1915, -1431655765;
	shr.u32 	%r1917, %r1916, 2;
	mul.lo.s32 	%r1918, %r1917, 6;
	sub.s32 	%r1919, %r1915, %r1918;
	shl.b32 	%r1920, %r1919, 4;
	add.s32 	%r1921, %r233, %r1920;
	mul.wide.u32 	%rd244, %r1921, 4;
	add.s64 	%rd245, %rd85, %rd244;
	ld.shared.u32 	%r1578, [%rd245];
	add.s32 	%r1922, %r234, %r1920;
	mul.wide.u32 	%rd246, %r1922, 4;
	add.s64 	%rd247, %rd85, %rd246;
	ld.shared.u32 	%r1585, [%rd247];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1595, %r1592}, {%r448, %r451}, {%r1578}, {%r1320, %r1320};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1604, %r1601}, {%r448, %r451}, {%r1585}, {%r1320, %r1320};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1588, %r489;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1590, %r1588, %r1592;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1593, %r486, %r1595, %r1590;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1597, %r489;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1599, %r1597, %r1601;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1602, %r486, %r1604, %r1599;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1606, %r489, %r1595;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1609, %r486, %r1592, %r1606;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1613, %r489, %r1604;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1616, %r486, %r1601, %r1613;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1639, %r1642}, {%r532, %r535}, {%r1593, %r1609}, {%r1320, %r1320}, %r133, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1646, %r1650}, {%r532, %r535}, {%r1602, %r1616}, {%r1320, %r1320}, %r133, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1638, %r1639, %r1639;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1641, %r1642, %r1642, %r1638;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1645, %r1646, %r1646, %r1641;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1649, %r1650, %r1650, %r1645;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1653, %r1903, %r1649, %r1570;
	// end inline asm
	add.s32 	%r1923, %r1906, 3;
	mul.hi.u32 	%r1924, %r1923, -1431655765;
	shr.u32 	%r1925, %r1924, 2;
	mul.lo.s32 	%r1926, %r1925, 6;
	sub.s32 	%r1927, %r1923, %r1926;
	shl.b32 	%r1928, %r1927, 4;
	add.s32 	%r1929, %r233, %r1928;
	mul.wide.u32 	%rd248, %r1929, 4;
	add.s64 	%rd249, %rd85, %rd248;
	ld.shared.u32 	%r1661, [%rd249];
	add.s32 	%r1930, %r234, %r1928;
	mul.wide.u32 	%rd250, %r1930, 4;
	add.s64 	%rd251, %rd85, %rd250;
	ld.shared.u32 	%r1668, [%rd251];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1678, %r1675}, {%r448, %r451}, {%r1661}, {%r1320, %r1320};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1687, %r1684}, {%r448, %r451}, {%r1668}, {%r1320, %r1320};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1671, %r489;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1673, %r1671, %r1675;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1676, %r486, %r1678, %r1673;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1680, %r489;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1682, %r1680, %r1684;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1685, %r486, %r1687, %r1682;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1689, %r489, %r1678;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1692, %r486, %r1675, %r1689;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1696, %r489, %r1687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1699, %r486, %r1684, %r1696;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1722, %r1725}, {%r532, %r535}, {%r1676, %r1692}, {%r1320, %r1320}, %r133, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1729, %r1733}, {%r532, %r535}, {%r1685, %r1699}, {%r1320, %r1320}, %r133, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1721, %r1722, %r1722;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1724, %r1725, %r1725, %r1721;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1728, %r1729, %r1729, %r1724;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1732, %r1733, %r1733, %r1728;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1736, %r1903, %r1732, %r1653;
	// end inline asm
	add.s32 	%r1931, %r1906, 4;
	mul.hi.u32 	%r1932, %r1931, -1431655765;
	shr.u32 	%r1933, %r1932, 2;
	mul.lo.s32 	%r1934, %r1933, 6;
	sub.s32 	%r1935, %r1931, %r1934;
	shl.b32 	%r1936, %r1935, 4;
	add.s32 	%r1937, %r233, %r1936;
	mul.wide.u32 	%rd252, %r1937, 4;
	add.s64 	%rd253, %rd85, %rd252;
	ld.shared.u32 	%r1744, [%rd253];
	add.s32 	%r1938, %r234, %r1936;
	mul.wide.u32 	%rd254, %r1938, 4;
	add.s64 	%rd255, %rd85, %rd254;
	ld.shared.u32 	%r1751, [%rd255];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1761, %r1758}, {%r448, %r451}, {%r1744}, {%r1320, %r1320};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1770, %r1767}, {%r448, %r451}, {%r1751}, {%r1320, %r1320};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1754, %r489;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1756, %r1754, %r1758;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1759, %r486, %r1761, %r1756;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1763, %r489;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1765, %r1763, %r1767;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1768, %r486, %r1770, %r1765;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1772, %r489, %r1761;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1775, %r486, %r1758, %r1772;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1779, %r489, %r1770;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1782, %r486, %r1767, %r1779;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1805, %r1808}, {%r532, %r535}, {%r1759, %r1775}, {%r1320, %r1320}, %r133, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1812, %r1816}, {%r532, %r535}, {%r1768, %r1782}, {%r1320, %r1320}, %r133, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1804, %r1805, %r1805;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1807, %r1808, %r1808, %r1804;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1811, %r1812, %r1812, %r1807;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1815, %r1816, %r1816, %r1811;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1819, %r1903, %r1815, %r1736;
	// end inline asm
	add.s32 	%r1939, %r1906, 5;
	mul.hi.u32 	%r1940, %r1939, -1431655765;
	shr.u32 	%r1941, %r1940, 2;
	mul.lo.s32 	%r1942, %r1941, 6;
	sub.s32 	%r1943, %r1939, %r1942;
	shl.b32 	%r1944, %r1943, 4;
	add.s32 	%r1945, %r233, %r1944;
	mul.wide.u32 	%rd256, %r1945, 4;
	add.s64 	%rd257, %rd85, %rd256;
	ld.shared.u32 	%r1827, [%rd257];
	add.s32 	%r1946, %r234, %r1944;
	mul.wide.u32 	%rd258, %r1946, 4;
	add.s64 	%rd259, %rd85, %rd258;
	ld.shared.u32 	%r1834, [%rd259];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1844, %r1841}, {%r448, %r451}, {%r1827}, {%r1320, %r1320};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1853, %r1850}, {%r448, %r451}, {%r1834}, {%r1320, %r1320};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1837, %r489;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1839, %r1837, %r1841;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1842, %r486, %r1844, %r1839;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1846, %r489;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1848, %r1846, %r1850;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1851, %r486, %r1853, %r1848;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1855, %r489, %r1844;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1858, %r486, %r1841, %r1855;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1862, %r489, %r1853;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1865, %r486, %r1850, %r1862;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1888, %r1891}, {%r532, %r535}, {%r1842, %r1858}, {%r1320, %r1320}, %r133, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1895, %r1899}, {%r532, %r535}, {%r1851, %r1865}, {%r1320, %r1320}, %r133, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1887, %r1888, %r1888;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1890, %r1891, %r1891, %r1887;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1894, %r1895, %r1895, %r1890;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1898, %r1899, %r1899, %r1894;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r111, %r1903, %r1898, %r1819;
	// end inline asm
	add.s32 	%r109, %r109, 6;
	setp.ne.s32 	%p285, %r109, 192;
	@%p285 bra 	$L__BB0_164;
// %bb.222:                             // %pass11500
                                        //   in Loop: Header=BB0_162 Depth=2
	mul.lo.s32 	%r1948, %r110, 786432;
	or.b32  	%r1949, %r1948, %r3;
	add.s32 	%r1950, %r1949, %r235;
	or.b32  	%r1951, %r1950, %r236;
	cvt.u64.u32 	%rd260, %r1951;
	add.s64 	%rd261, %rd260, %rd23;
	mul.hi.s64 	%rd262, %rd261, 3074457345618258603;
	shr.u64 	%rd263, %rd262, 63;
	shr.s64 	%rd264, %rd262, 27;
	add.s64 	%rd265, %rd264, %rd263;
	setp.lt.s64 	%p286, %rd261, 0;
	mul.lo.s64 	%rd266, %rd265, 805306368;
	setp.ne.s64 	%p287, %rd266, %rd261;
	and.pred  	%p288, %p286, %p287;
	selp.s64 	%rd267, -1, 0, %p288;
	add.s64 	%rd268, %rd265, %rd267;
	mul.lo.s64 	%rd269, %rd268, -805306368;
	add.s64 	%rd270, %rd269, %rd261;
	shl.b64 	%rd271, %rd270, 2;
	add.s64 	%rd272, %rd4, %rd271;
	st.global.u32 	[%rd272], %r111;
	add.s32 	%r110, %r110, 1;
	mov.u32 	%r109, 0;
	mov.u32 	%r111, %r109;
	bra.uni 	$L__BB0_164;
$L__BB0_165:                            // %L25441.preheader
                                        //   in Loop: Header=BB0_198 Depth=1
	mov.u16 	%rs190, %rs1;
	mov.u32 	%r3134, %r1320;
	bra.uni 	$L__BB0_166;
$L__BB0_167:                            // %L34830
                                        //   in Loop: Header=BB0_166 Depth=2
	bar.sync 	0;
	add.s16 	%rs182, %rs190, 24;
	mul.hi.s16 	%rs183, %rs182, 10923;
	shr.u16 	%rs184, %rs183, 15;
	add.s16 	%rs185, %rs183, %rs184;
	mul.lo.s16 	%rs186, %rs185, 6;
	sub.s16 	%rs187, %rs182, %rs186;
	mul.wide.s16 	%r3018, %rs187, 16;
	add.s32 	%r3019, %r233, %r3018;
	mul.wide.s32 	%rd295, %r3019, 4;
	add.s64 	%rd297, %rd85, %rd295;
	ld.shared.u32 	%r2524, [%rd297];
	add.s32 	%r3020, %r234, %r3018;
	mul.wide.s32 	%rd298, %r3020, 4;
	add.s64 	%rd299, %rd85, %rd298;
	ld.shared.u32 	%r2531, [%rd299];
	mov.u32 	%r2997, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2541, %r2538}, {%r448, %r451}, {%r2524}, {%r2997, %r2997};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2550, %r2547}, {%r448, %r451}, {%r2531}, {%r2997, %r2997};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2534, %r489;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2536, %r2534, %r2538;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2539, %r486, %r2541, %r2536;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2543, %r489;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2545, %r2543, %r2547;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2548, %r486, %r2550, %r2545;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2552, %r489, %r2541;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2555, %r486, %r2538, %r2552;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2559, %r489, %r2550;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2562, %r486, %r2547, %r2559;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2585, %r2588}, {%r532, %r535}, {%r2539, %r2555}, {%r2997, %r2997}, %r133, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2592, %r2596}, {%r532, %r535}, {%r2548, %r2562}, {%r2997, %r2997}, %r133, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2584, %r2585, %r2585;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2587, %r2588, %r2588, %r2584;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2591, %r2592, %r2592, %r2587;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2595, %r2596, %r2596, %r2591;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2599, %r1903, %r2595, %r111;
	// end inline asm
	add.s32 	%r3021, %r89, %r3134;
	add.s32 	%r3022, %r3021, 25;
	mul.hi.u32 	%r3023, %r3022, -1431655765;
	shr.u32 	%r3024, %r3023, 2;
	mul.lo.s32 	%r3025, %r3024, 6;
	sub.s32 	%r3026, %r3022, %r3025;
	shl.b32 	%r3027, %r3026, 4;
	add.s32 	%r3028, %r233, %r3027;
	mul.wide.u32 	%rd300, %r3028, 4;
	add.s64 	%rd301, %rd85, %rd300;
	ld.shared.u32 	%r2607, [%rd301];
	add.s32 	%r3029, %r234, %r3027;
	mul.wide.u32 	%rd302, %r3029, 4;
	add.s64 	%rd303, %rd85, %rd302;
	ld.shared.u32 	%r2614, [%rd303];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2624, %r2621}, {%r448, %r451}, {%r2607}, {%r2997, %r2997};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2633, %r2630}, {%r448, %r451}, {%r2614}, {%r2997, %r2997};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2617, %r489;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2619, %r2617, %r2621;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2622, %r486, %r2624, %r2619;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2626, %r489;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2628, %r2626, %r2630;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2631, %r486, %r2633, %r2628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2635, %r489, %r2624;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2638, %r486, %r2621, %r2635;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2642, %r489, %r2633;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2645, %r486, %r2630, %r2642;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2668, %r2671}, {%r532, %r535}, {%r2622, %r2638}, {%r2997, %r2997}, %r133, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2675, %r2679}, {%r532, %r535}, {%r2631, %r2645}, {%r2997, %r2997}, %r133, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2667, %r2668, %r2668;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2670, %r2671, %r2671, %r2667;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2674, %r2675, %r2675, %r2670;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2678, %r2679, %r2679, %r2674;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2682, %r1903, %r2678, %r2599;
	// end inline asm
	add.s32 	%r3030, %r3021, 26;
	mul.hi.u32 	%r3031, %r3030, -1431655765;
	shr.u32 	%r3032, %r3031, 2;
	mul.lo.s32 	%r3033, %r3032, 6;
	sub.s32 	%r3034, %r3030, %r3033;
	shl.b32 	%r3035, %r3034, 4;
	add.s32 	%r3036, %r233, %r3035;
	mul.wide.u32 	%rd304, %r3036, 4;
	add.s64 	%rd305, %rd85, %rd304;
	ld.shared.u32 	%r2690, [%rd305];
	add.s32 	%r3037, %r234, %r3035;
	mul.wide.u32 	%rd306, %r3037, 4;
	add.s64 	%rd307, %rd85, %rd306;
	ld.shared.u32 	%r2697, [%rd307];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2707, %r2704}, {%r448, %r451}, {%r2690}, {%r2997, %r2997};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2716, %r2713}, {%r448, %r451}, {%r2697}, {%r2997, %r2997};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2700, %r489;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2702, %r2700, %r2704;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2705, %r486, %r2707, %r2702;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2709, %r489;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2711, %r2709, %r2713;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2714, %r486, %r2716, %r2711;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2718, %r489, %r2707;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2721, %r486, %r2704, %r2718;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2725, %r489, %r2716;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2728, %r486, %r2713, %r2725;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2751, %r2754}, {%r532, %r535}, {%r2705, %r2721}, {%r2997, %r2997}, %r133, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2758, %r2762}, {%r532, %r535}, {%r2714, %r2728}, {%r2997, %r2997}, %r133, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2750, %r2751, %r2751;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2753, %r2754, %r2754, %r2750;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2757, %r2758, %r2758, %r2753;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2761, %r2762, %r2762, %r2757;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2765, %r1903, %r2761, %r2682;
	// end inline asm
	add.s32 	%r3038, %r3021, 27;
	mul.hi.u32 	%r3039, %r3038, -1431655765;
	shr.u32 	%r3040, %r3039, 2;
	mul.lo.s32 	%r3041, %r3040, 6;
	sub.s32 	%r3042, %r3038, %r3041;
	shl.b32 	%r3043, %r3042, 4;
	add.s32 	%r3044, %r233, %r3043;
	mul.wide.u32 	%rd308, %r3044, 4;
	add.s64 	%rd309, %rd85, %rd308;
	ld.shared.u32 	%r2773, [%rd309];
	add.s32 	%r3045, %r234, %r3043;
	mul.wide.u32 	%rd310, %r3045, 4;
	add.s64 	%rd311, %rd85, %rd310;
	ld.shared.u32 	%r2780, [%rd311];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2790, %r2787}, {%r448, %r451}, {%r2773}, {%r2997, %r2997};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2799, %r2796}, {%r448, %r451}, {%r2780}, {%r2997, %r2997};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2783, %r489;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2785, %r2783, %r2787;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2788, %r486, %r2790, %r2785;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2792, %r489;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2794, %r2792, %r2796;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2797, %r486, %r2799, %r2794;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2801, %r489, %r2790;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2804, %r486, %r2787, %r2801;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2808, %r489, %r2799;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2811, %r486, %r2796, %r2808;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2834, %r2837}, {%r532, %r535}, {%r2788, %r2804}, {%r2997, %r2997}, %r133, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2841, %r2845}, {%r532, %r535}, {%r2797, %r2811}, {%r2997, %r2997}, %r133, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2833, %r2834, %r2834;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2836, %r2837, %r2837, %r2833;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2840, %r2841, %r2841, %r2836;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2844, %r2845, %r2845, %r2840;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2848, %r1903, %r2844, %r2765;
	// end inline asm
	add.s32 	%r3046, %r3021, 28;
	mul.hi.u32 	%r3047, %r3046, -1431655765;
	shr.u32 	%r3048, %r3047, 2;
	mul.lo.s32 	%r3049, %r3048, 6;
	sub.s32 	%r3050, %r3046, %r3049;
	shl.b32 	%r3051, %r3050, 4;
	add.s32 	%r3052, %r233, %r3051;
	mul.wide.u32 	%rd312, %r3052, 4;
	add.s64 	%rd313, %rd85, %rd312;
	ld.shared.u32 	%r2856, [%rd313];
	add.s32 	%r3053, %r234, %r3051;
	mul.wide.u32 	%rd314, %r3053, 4;
	add.s64 	%rd315, %rd85, %rd314;
	ld.shared.u32 	%r2863, [%rd315];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2873, %r2870}, {%r448, %r451}, {%r2856}, {%r2997, %r2997};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2882, %r2879}, {%r448, %r451}, {%r2863}, {%r2997, %r2997};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2866, %r489;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2868, %r2866, %r2870;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2871, %r486, %r2873, %r2868;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2875, %r489;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2877, %r2875, %r2879;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2880, %r486, %r2882, %r2877;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2884, %r489, %r2873;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2887, %r486, %r2870, %r2884;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2891, %r489, %r2882;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2894, %r486, %r2879, %r2891;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2917, %r2920}, {%r532, %r535}, {%r2871, %r2887}, {%r2997, %r2997}, %r133, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2924, %r2928}, {%r532, %r535}, {%r2880, %r2894}, {%r2997, %r2997}, %r133, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2916, %r2917, %r2917;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2919, %r2920, %r2920, %r2916;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2923, %r2924, %r2924, %r2919;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2927, %r2928, %r2928, %r2923;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2931, %r1903, %r2927, %r2848;
	// end inline asm
	add.s32 	%r3054, %r3021, 29;
	mul.hi.u32 	%r3055, %r3054, -1431655765;
	shr.u32 	%r3056, %r3055, 2;
	mul.lo.s32 	%r3057, %r3056, 6;
	sub.s32 	%r3058, %r3054, %r3057;
	shl.b32 	%r3059, %r3058, 4;
	add.s32 	%r3060, %r233, %r3059;
	mul.wide.u32 	%rd316, %r3060, 4;
	add.s64 	%rd317, %rd85, %rd316;
	ld.shared.u32 	%r2939, [%rd317];
	add.s32 	%r3061, %r234, %r3059;
	mul.wide.u32 	%rd318, %r3061, 4;
	add.s64 	%rd319, %rd85, %rd318;
	ld.shared.u32 	%r2946, [%rd319];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2956, %r2953}, {%r448, %r451}, {%r2939}, {%r2997, %r2997};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2965, %r2962}, {%r448, %r451}, {%r2946}, {%r2997, %r2997};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2949, %r489;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2951, %r2949, %r2953;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2954, %r486, %r2956, %r2951;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2958, %r489;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2960, %r2958, %r2962;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2963, %r486, %r2965, %r2960;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2967, %r489, %r2956;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2970, %r486, %r2953, %r2967;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2974, %r489, %r2965;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2977, %r486, %r2962, %r2974;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3000, %r3003}, {%r532, %r535}, {%r2954, %r2970}, {%r2997, %r2997}, %r133, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3007, %r3011}, {%r532, %r535}, {%r2963, %r2977}, {%r2997, %r2997}, %r133, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2999, %r3000, %r3000;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3002, %r3003, %r3003, %r2999;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3006, %r3007, %r3007, %r3002;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3010, %r3011, %r3011, %r3006;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r111, %r1903, %r3010, %r2931;
	// end inline asm
	add.s32 	%r109, %r109, 6;
	setp.eq.s32 	%p295, %r109, 192;
	@%p295 bra 	$L__BB0_224;
$L__BB0_168:                            // %L40284
                                        //   in Loop: Header=BB0_166 Depth=2
	bar.sync 	0;
	add.s32 	%r3134, %r3134, 6;
	add.s16 	%rs190, %rs190, 6;
	setp.ne.s32 	%p299, %r3134, 24;
	@%p299 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_169;
$L__BB0_166:                            // %L25441
                                        //   Parent Loop BB0_198 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.lt.u32 	%p290, %r318, 12;
	setp.eq.s32 	%p291, %r3134, 0;
	selp.b32 	%r2481, %r93, 0, %p291;
	setp.eq.s32 	%p292, %r3134, 6;
	selp.b32 	%r2482, %r97, %r2481, %p292;
	setp.eq.s32 	%p293, %r3134, 12;
	selp.b32 	%r2483, %r101, %r2482, %p293;
	setp.eq.s32 	%p294, %r3134, 18;
	selp.b32 	%r2484, %r105, %r2483, %p294;
	selp.b32 	%r2485, %r94, 0, %p291;
	selp.b32 	%r2486, %r98, %r2485, %p292;
	selp.b32 	%r2487, %r102, %r2486, %p293;
	selp.b32 	%r2488, %r106, %r2487, %p294;
	selp.b32 	%r2489, %r95, 0, %p291;
	selp.b32 	%r2490, %r99, %r2489, %p292;
	selp.b32 	%r2491, %r103, %r2490, %p293;
	selp.b32 	%r2492, %r107, %r2491, %p294;
	selp.b32 	%r2493, %r96, 0, %p291;
	selp.b32 	%r2494, %r100, %r2493, %p292;
	selp.b32 	%r2495, %r104, %r2494, %p293;
	selp.b32 	%r2496, %r108, %r2495, %p294;
	// begin inline asm
	mov.b32 %r1980, {%rs106, %rs106};
	// end inline asm
	// begin inline asm
	mov.b32 %r1991, {%rs108, %rs108};
	// end inline asm
	shr.u32 	%r2497, %r2484, 8;
	xor.b32  	%r1990, %r2497, 8947848;
	// begin inline asm
	lop3.b32 %r1977, %r983, %r1990, %r1980, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1981, {%rs112, %rs112};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1982, %r1980, %r1981;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1985, %r1977, %r1982;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1988, %r994, %r1990, %r1991, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1992, {%rs112, %rs112};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1993, %r1991, %r1992;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1996, %r1988, %r1993;
	// end inline asm
	// begin inline asm
	mov.b32 %r2026, {%rs106, %rs106};
	// end inline asm
	// begin inline asm
	mov.b32 %r2037, {%rs108, %rs108};
	// end inline asm
	shr.u32 	%r2498, %r2488, 8;
	xor.b32  	%r2036, %r2498, 8947848;
	// begin inline asm
	lop3.b32 %r2023, %r983, %r2036, %r2026, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2027, {%rs112, %rs112};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2028, %r2026, %r2027;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2031, %r2023, %r2028;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2034, %r994, %r2036, %r2037, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2038, {%rs112, %rs112};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2039, %r2037, %r2038;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2042, %r2034, %r2039;
	// end inline asm
	// begin inline asm
	mov.b32 %r2072, {%rs106, %rs106};
	// end inline asm
	// begin inline asm
	mov.b32 %r2083, {%rs108, %rs108};
	// end inline asm
	shr.u32 	%r2499, %r2492, 8;
	xor.b32  	%r2082, %r2499, 8947848;
	// begin inline asm
	lop3.b32 %r2069, %r983, %r2082, %r2072, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2073, {%rs112, %rs112};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2074, %r2072, %r2073;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2077, %r2069, %r2074;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2080, %r994, %r2082, %r2083, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2084, {%rs112, %rs112};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2085, %r2083, %r2084;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2088, %r2080, %r2085;
	// end inline asm
	// begin inline asm
	mov.b32 %r2118, {%rs106, %rs106};
	// end inline asm
	// begin inline asm
	mov.b32 %r2129, {%rs108, %rs108};
	// end inline asm
	shr.u32 	%r2500, %r2496, 8;
	xor.b32  	%r2128, %r2500, 8947848;
	// begin inline asm
	lop3.b32 %r2115, %r983, %r2128, %r2118, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2119, {%rs112, %rs112};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2120, %r2118, %r2119;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2123, %r2115, %r2120;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2126, %r994, %r2128, %r2129, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2130, {%rs112, %rs112};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2131, %r2129, %r2130;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2134, %r2126, %r2131;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r196;
    mov.b32 {%r2re, %r2im}, %r1985;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2137, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r197;
    mov.b32 {%r2re, %r2im}, %r2031;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2140, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r198;
    mov.b32 {%r2re, %r2im}, %r1996;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2143, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r199;
    mov.b32 {%r2re, %r2im}, %r2042;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2146, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r196;
    mov.b32 {%r2re, %r2im}, %r2077;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2149, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r197;
    mov.b32 {%r2re, %r2im}, %r2123;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2152, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r198;
    mov.b32 {%r2re, %r2im}, %r2088;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2155, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r199;
    mov.b32 {%r2re, %r2im}, %r2134;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2158, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2224, %r2221}, {%r340, %r343}, {%r2137}, {%r1320, %r1320};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2233, %r2230}, {%r340, %r343}, {%r2140}, {%r1320, %r1320};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2242, %r2239}, {%r340, %r343}, {%r2143}, {%r1320, %r1320};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2251, %r2248}, {%r340, %r343}, {%r2146}, {%r1320, %r1320};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2260, %r2257}, {%r340, %r343}, {%r2149}, {%r1320, %r1320};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2269, %r2266}, {%r340, %r343}, {%r2152}, {%r1320, %r1320};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2278, %r2275}, {%r340, %r343}, {%r2155}, {%r1320, %r1320};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2287, %r2284}, {%r340, %r343}, {%r2158}, {%r1320, %r1320};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2217, %r395;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2219, %r2217, %r2221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2222, %r392, %r2224, %r2219;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2226, %r395;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2228, %r2226, %r2230;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2231, %r392, %r2233, %r2228;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2235, %r395;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2237, %r2235, %r2239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2240, %r392, %r2242, %r2237;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2244, %r395;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2246, %r2244, %r2248;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2249, %r392, %r2251, %r2246;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2253, %r395;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2255, %r2253, %r2257;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2258, %r392, %r2260, %r2255;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2262, %r395;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2264, %r2262, %r2266;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2267, %r392, %r2269, %r2264;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2271, %r395;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2273, %r2271, %r2275;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2276, %r392, %r2278, %r2273;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2280, %r395;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2282, %r2280, %r2284;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2285, %r392, %r2287, %r2282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2289, %r395, %r2224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2292, %r392, %r2221, %r2289;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2296, %r395, %r2233;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2299, %r392, %r2230, %r2296;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2303, %r395, %r2242;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2306, %r392, %r2239, %r2303;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2310, %r395, %r2251;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2313, %r392, %r2248, %r2310;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2317, %r395, %r2260;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2320, %r392, %r2257, %r2317;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2324, %r395, %r2269;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2327, %r392, %r2266, %r2324;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2331, %r395, %r2278;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2334, %r392, %r2275, %r2331;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2338, %r395, %r2287;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2341, %r392, %r2284, %r2338;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2418, %r2419}, {%r436, %r439}, {%r2222, %r2292}, {%r1320, %r1320}, %r237, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2426, %r2427}, {%r436, %r439}, {%r2231, %r2299}, {%r1320, %r1320}, %r237, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2434, %r2435}, {%r436, %r439}, {%r2240, %r2306}, {%r1320, %r1320}, %r237, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2442, %r2443}, {%r436, %r439}, {%r2249, %r2313}, {%r1320, %r1320}, %r237, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2450, %r2451}, {%r436, %r439}, {%r2258, %r2320}, {%r1320, %r1320}, %r237, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2458, %r2459}, {%r436, %r439}, {%r2267, %r2327}, {%r1320, %r1320}, %r237, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2466, %r2467}, {%r436, %r439}, {%r2276, %r2334}, {%r1320, %r1320}, %r237, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2474, %r2475}, {%r436, %r439}, {%r2285, %r2341}, {%r1320, %r1320}, %r237, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2417, %r2418, %r2419, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2421, %r2418, %r2419, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2425, %r2426, %r2427, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2429, %r2426, %r2427, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2433, %r2434, %r2435, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2437, %r2434, %r2435, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2441, %r2442, %r2443, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2445, %r2442, %r2443, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2449, %r2450, %r2451, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2453, %r2450, %r2451, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2457, %r2458, %r2459, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2461, %r2458, %r2459, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2465, %r2466, %r2467, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2469, %r2466, %r2467, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2473, %r2474, %r2475, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2477, %r2474, %r2475, %r728;
	// end inline asm
	add.s16 	%rs176, %rs8, %rs190;
	mul.hi.s16 	%rs177, %rs176, 10923;
	shr.u16 	%rs178, %rs177, 15;
	add.s16 	%rs179, %rs177, %rs178;
	mul.lo.s16 	%rs180, %rs179, 6;
	sub.s16 	%rs181, %rs176, %rs180;
	mul.wide.s16 	%r2501, %rs181, 16;
	add.s32 	%r2502, %r222, %r2501;
	mul.wide.s32 	%rd273, %r2502, 4;
	add.s64 	%rd7, %rd85, %rd273;
	st.shared.u32 	[%rd7], %r2417;
	add.s32 	%r2503, %r223, %r2501;
	mul.wide.u32 	%rd275, %r2503, 4;
	add.s64 	%rd8, %rd85, %rd275;
	st.shared.u32 	[%rd8], %r2421;
	add.s32 	%r2504, %r225, %r2501;
	mul.wide.s32 	%rd276, %r2504, 4;
	add.s64 	%rd9, %rd85, %rd276;
	st.shared.u32 	[%rd9], %r2425;
	add.s32 	%r2505, %r226, %r2501;
	mul.wide.u32 	%rd277, %r2505, 4;
	add.s64 	%rd10, %rd85, %rd277;
	st.shared.u32 	[%rd10], %r2429;
	add.s32 	%r2506, %r228, %r2501;
	mul.wide.s32 	%rd278, %r2506, 4;
	add.s64 	%rd11, %rd85, %rd278;
	st.shared.u32 	[%rd11], %r2433;
	add.s32 	%r2507, %r229, %r2501;
	mul.wide.u32 	%rd279, %r2507, 4;
	add.s64 	%rd12, %rd85, %rd279;
	st.shared.u32 	[%rd12], %r2437;
	add.s32 	%r2508, %r231, %r2501;
	mul.wide.s32 	%rd280, %r2508, 4;
	add.s64 	%rd13, %rd85, %rd280;
	st.shared.u32 	[%rd13], %r2441;
	add.s32 	%r2509, %r232, %r2501;
	mul.wide.u32 	%rd281, %r2509, 4;
	add.s64 	%rd14, %rd85, %rd281;
	st.shared.u32 	[%rd14], %r2445;
	add.s32 	%r2510, %r87, %r3134;
	mul.hi.u32 	%r2511, %r2510, -1431655765;
	shr.u32 	%r2512, %r2511, 2;
	mul.lo.s32 	%r2513, %r2512, 6;
	sub.s32 	%r2514, %r2510, %r2513;
	shl.b32 	%r2515, %r2514, 4;
	add.s32 	%r2516, %r222, %r2515;
	mul.wide.u32 	%rd282, %r2516, 4;
	add.s64 	%rd15, %rd85, %rd282;
	st.shared.u32 	[%rd15], %r2449;
	cvt.u64.u32 	%rd283, %r2515;
	add.s64 	%rd284, %rd37, %rd283;
	shl.b64 	%rd285, %rd284, 2;
	add.s64 	%rd16, %rd85, %rd285;
	st.shared.u32 	[%rd16+6304], %r2453;
	add.s32 	%r2517, %r225, %r2515;
	mul.wide.u32 	%rd286, %r2517, 4;
	add.s64 	%rd17, %rd85, %rd286;
	st.shared.u32 	[%rd17], %r2457;
	add.s64 	%rd287, %rd40, %rd283;
	shl.b64 	%rd288, %rd287, 2;
	add.s64 	%rd18, %rd85, %rd288;
	st.shared.u32 	[%rd18+6304], %r2461;
	add.s32 	%r2518, %r228, %r2515;
	mul.wide.u32 	%rd289, %r2518, 4;
	add.s64 	%rd19, %rd85, %rd289;
	st.shared.u32 	[%rd19], %r2465;
	add.s64 	%rd290, %rd43, %rd283;
	shl.b64 	%rd291, %rd290, 2;
	add.s64 	%rd20, %rd85, %rd291;
	st.shared.u32 	[%rd20+6304], %r2469;
	add.s32 	%r2519, %r231, %r2515;
	mul.wide.u32 	%rd292, %r2519, 4;
	add.s64 	%rd21, %rd85, %rd292;
	st.shared.u32 	[%rd21], %r2473;
	add.s64 	%rd293, %rd46, %rd283;
	shl.b64 	%rd294, %rd293, 2;
	add.s64 	%rd22, %rd85, %rd294;
	st.shared.u32 	[%rd22+6304], %r2477;
	@%p290 bra 	$L__BB0_223;
	bra.uni 	$L__BB0_167;
$L__BB0_223:                            // %oksrem13975
                                        //   in Loop: Header=BB0_166 Depth=2
	st.shared.u32 	[%rd7], %r2417;
	st.shared.u32 	[%rd8], %r2421;
	st.shared.u32 	[%rd9], %r2425;
	st.shared.u32 	[%rd10], %r2429;
	st.shared.u32 	[%rd11], %r2433;
	st.shared.u32 	[%rd12], %r2437;
	st.shared.u32 	[%rd13], %r2441;
	st.shared.u32 	[%rd14], %r2445;
	st.shared.u32 	[%rd15], %r2449;
	st.shared.u32 	[%rd16+6304], %r2453;
	st.shared.u32 	[%rd17], %r2457;
	st.shared.u32 	[%rd18+6304], %r2461;
	st.shared.u32 	[%rd19], %r2465;
	st.shared.u32 	[%rd20+6304], %r2469;
	st.shared.u32 	[%rd21], %r2473;
	st.shared.u32 	[%rd22+6304], %r2477;
	bra.uni 	$L__BB0_167;
$L__BB0_224:                            // %pass18390
                                        //   in Loop: Header=BB0_166 Depth=2
	mul.lo.s32 	%r3063, %r110, 786432;
	or.b32  	%r3064, %r3063, %r3;
	add.s32 	%r3065, %r3064, %r235;
	or.b32  	%r3066, %r3065, %r236;
	cvt.u64.u32 	%rd320, %r3066;
	add.s64 	%rd321, %rd320, %rd23;
	mul.hi.s64 	%rd322, %rd321, 3074457345618258603;
	shr.u64 	%rd323, %rd322, 63;
	shr.s64 	%rd324, %rd322, 27;
	add.s64 	%rd325, %rd324, %rd323;
	setp.lt.s64 	%p296, %rd321, 0;
	mul.lo.s64 	%rd326, %rd325, 805306368;
	setp.ne.s64 	%p297, %rd326, %rd321;
	and.pred  	%p298, %p296, %p297;
	selp.s64 	%rd327, -1, 0, %p298;
	add.s64 	%rd328, %rd325, %rd327;
	mul.lo.s64 	%rd329, %rd328, -805306368;
	add.s64 	%rd330, %rd329, %rd321;
	shl.b64 	%rd331, %rd330, 2;
	add.s64 	%rd332, %rd4, %rd331;
	st.global.u32 	[%rd332], %r111;
	add.s32 	%r110, %r110, 1;
	mov.u32 	%r109, %r2997;
	mov.u32 	%r111, %r2997;
	bra.uni 	$L__BB0_168;
$L__BB0_170:                            // %L40315
	mov.u32 	%r3067, 0;
	st.global.u32 	[%rd6], %r3067;
	ret;
$L__BB0_163:                            // %post_box_union
	mov.u64 	%rd199, exception3604;
	cvta.global.u64 	%rd200, %rd199;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd200;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r308;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_220:                            // %post_box_union9511
	mov.u64 	%rd237, exception3604;
	cvta.global.u64 	%rd238, %rd237;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd238;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r308;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L5128
	mov.u32 	%r3083, 5;
	st.global.u32 	[%rd6], %r3083;
	mov.u64 	%rd363, exception3564;
	cvta.global.u64 	%rd364, %rd363;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd364;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r308;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L5284
	mov.u32 	%r3082, 5;
	st.global.u32 	[%rd6], %r3082;
	mov.u64 	%rd361, exception3564;
	cvta.global.u64 	%rd362, %rd361;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd362;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r308;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L5440
	mov.u32 	%r3081, 5;
	st.global.u32 	[%rd6], %r3081;
	mov.u64 	%rd359, exception3564;
	cvta.global.u64 	%rd360, %rd359;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd360;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r308;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L5596
	mov.u32 	%r3080, 5;
	st.global.u32 	[%rd6], %r3080;
	mov.u64 	%rd357, exception3564;
	cvta.global.u64 	%rd358, %rd357;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd358;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r308;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L5752
	mov.u32 	%r3079, 5;
	st.global.u32 	[%rd6], %r3079;
	mov.u64 	%rd355, exception3564;
	cvta.global.u64 	%rd356, %rd355;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd356;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r308;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L5908
	mov.u32 	%r3078, 5;
	st.global.u32 	[%rd6], %r3078;
	mov.u64 	%rd353, exception3564;
	cvta.global.u64 	%rd354, %rd353;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd354;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r308;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_151:                            // %L6064
	mov.u32 	%r3077, 5;
	st.global.u32 	[%rd6], %r3077;
	mov.u64 	%rd351, exception3564;
	cvta.global.u64 	%rd352, %rd351;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd352;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r308;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_152:                            // %L6220
	mov.u32 	%r3076, 5;
	st.global.u32 	[%rd6], %r3076;
	mov.u64 	%rd349, exception3564;
	cvta.global.u64 	%rd350, %rd349;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd350;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r308;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_153:                            // %L6376
	mov.u32 	%r3075, 5;
	st.global.u32 	[%rd6], %r3075;
	mov.u64 	%rd347, exception3564;
	cvta.global.u64 	%rd348, %rd347;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd348;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r308;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_154:                            // %L6532
	mov.u32 	%r3074, 5;
	st.global.u32 	[%rd6], %r3074;
	mov.u64 	%rd345, exception3564;
	cvta.global.u64 	%rd346, %rd345;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd346;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r308;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_155:                            // %L6714
	mov.u32 	%r3073, 5;
	st.global.u32 	[%rd6], %r3073;
	mov.u64 	%rd343, exception3564;
	cvta.global.u64 	%rd344, %rd343;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd344;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r308;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_156:                            // %L6870
	mov.u32 	%r3072, 5;
	st.global.u32 	[%rd6], %r3072;
	mov.u64 	%rd341, exception3564;
	cvta.global.u64 	%rd342, %rd341;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd342;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r308;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_157:                            // %L7026
	mov.u32 	%r3071, 5;
	st.global.u32 	[%rd6], %r3071;
	mov.u64 	%rd339, exception3564;
	cvta.global.u64 	%rd340, %rd339;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd340;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r308;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_158:                            // %L7182
	mov.u32 	%r3070, 5;
	st.global.u32 	[%rd6], %r3070;
	mov.u64 	%rd337, exception3564;
	cvta.global.u64 	%rd338, %rd337;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd338;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r308;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_159:                            // %L7338
	mov.u32 	%r3069, 5;
	st.global.u32 	[%rd6], %r3069;
	mov.u64 	%rd335, exception3564;
	cvta.global.u64 	%rd336, %rd335;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd336;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r308;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_160:                            // %L7494
	mov.u32 	%r3068, 5;
	st.global.u32 	[%rd6], %r3068;
	mov.u64 	%rd333, exception3564;
	cvta.global.u64 	%rd334, %rd333;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd334;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r308;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L166
	mov.u32 	%r3085, 2;
	st.global.u32 	[%rd6], %r3085;
	mov.u64 	%rd367, exception3564;
	cvta.global.u64 	%rd368, %rd367;
	{ // callseq 90, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd368;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 90
	{ // callseq 91, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r308;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 91
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_12:                             // %L307
	mov.u32 	%r3084, 3;
	st.global.u32 	[%rd6], %r3084;
	mov.u64 	%rd365, exception3564;
	cvta.global.u64 	%rd366, %rd365;
	{ // callseq 88, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd366;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 88
	{ // callseq 89, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r308;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 89
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd54, exception1;
	cvta.global.u64 	%rd55, %rd54;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd55;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 47
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r308;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 48
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_144:                            // %L1152
	add.u64 	%rd53, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r318, %r4};
	st.local.v2.u32 	[%rd5+8], {%r2, %r84};
	st.local.u32 	[%rd5+16], %r85;
	mov.u64 	%rd59, __unnamed_1;
	cvta.global.u64 	%rd60, %rd59;
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd60;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd53;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r545, [retval0+0];
	} // callseq 49
	mov.u32 	%r547, 4;
	st.global.u32 	[%rd6], %r547;
	mov.u64 	%rd62, exception3564;
	cvta.global.u64 	%rd63, %rd62;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd63;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd48;
	st.param.b32 	[param0+8], %r308;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
