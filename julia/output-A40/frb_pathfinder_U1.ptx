// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=192, blocks_per_sm=4

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception3564[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception3604[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 192, 1, 1
.minnctapersm 4
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<303>;
	.reg .b16 	%rs<232>;
	.reg .b32 	%r<3096>;
	.reg .f32 	%f<790>;
	.reg .b64 	%rd<373>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r303, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd46, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r312, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p4, %r312, 13919;
	@%p4 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd47, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r304, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %ctaid.x;
	mul.lo.s32 	%r2, %r1, 192;
	mov.u32 	%r313, %tid.x;
	mov.u32 	%r4, %tid.y;
	shl.b32 	%r5, %r4, 5;
	or.b32  	%r314, %r2, %r313;
	add.s32 	%r315, %r314, %r5;
	mul.wide.u32 	%rd54, %r315, 4;
	add.s64 	%rd6, %rd47, %rd54;
	mov.u32 	%r316, 1;
	st.global.u32 	[%rd6], %r316;
	setp.gt.u32 	%p5, %r304, 32767;
	@%p5 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r305, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p6, %r305, %r304;
	setp.gt.s32 	%p7, %r305, 65535;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r306, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r305, %r304;
	mad.lo.s32 	%r317, %r6, -1431655765, 715827872;
	shf.r.wrap.b32 	%r318, %r317, %r317, 4;
	setp.gt.u32 	%p9, %r318, 89478484;
	setp.gt.u32 	%p10, %r306, 1023;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r307, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p12, %r307, %r306;
	setp.lt.s32 	%p13, %r307, 2048;
	and.pred  	%p14, %p12, %p13;
	@%p14 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r319, %r307, %r306;
	mul.hi.s32 	%r320, %r6, 715827883;
	shr.u32 	%r321, %r320, 31;
	shr.s32 	%r322, %r320, 5;
	add.s32 	%r323, %r322, %r321;
	setp.eq.s32 	%p15, %r319, %r323;
	@%p15 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L258
	ld.param.u32 	%r308, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p16, %r308, 0;
	@%p16 bra 	$L__BB0_12;
// %bb.9:                               // %L260
	ld.param.u32 	%r310, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	ld.param.u32 	%r309, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p17, %r309, %r308;
	setp.gt.s32 	%p18, %r309, 384;
	or.pred  	%p19, %p17, %p18;
	setp.lt.s32 	%p20, %r310, 0;
	or.pred  	%p21, %p19, %p20;
	@%p21 bra 	$L__BB0_12;
// %bb.10:                              // %L276
	ld.param.u32 	%r311, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p22, %r311, %r310;
	setp.gt.s32 	%p23, %r311, 4096;
	or.pred  	%p24, %p22, %p23;
	@%p24 bra 	$L__BB0_12;
// %bb.11:                              // %L286
	sub.s32 	%r324, %r311, %r310;
	sub.s32 	%r325, %r309, %r308;
	setp.eq.s32 	%p25, %r324, %r325;
	@%p25 bra 	$L__BB0_171;
	bra.uni 	$L__BB0_12;
$L__BB0_171:                            // %pass162
	and.b32  	%r165, %r313, 3;
	shr.u32 	%r166, %r313, 2;
	mul.lo.s32 	%r326, %r165, %r166;
	and.b32  	%r327, %r326, 7;
	cvt.rn.f32.s32 	%f205, %r327;
	mov.f32 	%f206, 0f40800000;
	div.approx.f32 	%f169, %f205, %f206;
	abs.f32 	%f788, %f169;
	setp.lt.f32 	%p26, %f788, 0f40000000;
	setp.gtu.f32 	%p302, %f788, 0f4B800000;
	mov.f32 	%f784, %f788;
	@%p26 bra 	$L__BB0_183;
// %bb.172:
	@%p302 bra 	$L__BB0_179;
	bra.uni 	$L__BB0_173;
$L__BB0_179:
	mov.b32 	%r168, %f788;
	and.b32  	%r328, %r168, 8388607;
	or.b32  	%r3091, %r328, 1065353216;
	mov.b32 	%f783, %r3091;
	add.s32 	%r329, %r168, -1073741824;
	and.b32  	%r3092, %r329, -8388608;
	setp.eq.s32 	%p33, %r3092, 0;
	@%p33 bra 	$L__BB0_182;
// %bb.180:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f216, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f215,%f216;
	// end inline asm
$L__BB0_181:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r330, %r3092, 192937984;
	add.s32 	%r331, %r3091, %r330;
	mov.b32 	%f217, %r331;
	mul.f32 	%f218, %f215, %f217;
	sub.f32 	%f219, %f217, %f218;
	fma.rn.f32 	%f220, %f219, %f215, %f218;
	sub.f32 	%f221, %f217, %f220;
	fma.rz.f32 	%f222, %f221, %f215, %f220;
	cvt.rzi.f32.f32 	%f223, %f222;
	sub.f32 	%f783, %f217, %f223;
	sub.s32 	%r3092, %r3092, %r330;
	mov.b32 	%r3091, %f783;
	setp.ne.s32 	%p34, %r3092, 0;
	setp.ne.s32 	%p35, %r3091, 0;
	and.pred  	%p36, %p34, %p35;
	@%p36 bra 	$L__BB0_181;
$L__BB0_182:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p37, %r168, 2139095039;
	selp.f32 	%f224, 0f7FFFFFFF, 0f4B800000, %p37;
	mul.f32 	%f225, %f783, 0f34000000;
	mul.f32 	%f784, %f224, %f225;
	bra.uni 	$L__BB0_183;
$L__BB0_173:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f207, 0f40000000;
	div.approx.f32 	%f208, %f788, %f207;
	cvt.rzi.f32.f32 	%f782, %f208;
	fma.rn.f32 	%f172, %f782, 0fC0000000, %f788;
	mov.b32 	%r167, %f172;
	setp.lt.u32 	%p28, %r167, 1073741824;
	@%p28 bra 	$L__BB0_178;
// %bb.174:
	setp.lt.u32 	%p29, %r167, -2147483647;
	@%p29 bra 	$L__BB0_176;
// %bb.175:
	add.f32 	%f213, %f782, 0fBF800000;
	setp.lt.f32 	%p32, %f172, 0fC0000000;
	add.f32 	%f214, %f213, 0fBF800000;
	selp.f32 	%f782, %f214, %f213, %p32;
	bra.uni 	$L__BB0_178;
$L__BB0_176:
	add.f32 	%f782, %f782, 0f3F800000;
	setp.ltu.f32 	%p30, %f172, 0f40800000;
	@%p30 bra 	$L__BB0_178;
// %bb.177:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f209, %f782, 0f3F800000;
	fma.rn.f32 	%f211, %f207, 0fC0400000, %f172;
	setp.ge.f32 	%p31, %f211, 0f00000000;
	add.f32 	%f212, %f209, 0f3F800000;
	selp.f32 	%f782, %f212, %f209, %p31;
$L__BB0_178:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f784, %f782, 0fC0000000, %f788;
$L__BB0_183:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f226, %f784;
	setp.gtu.f32 	%p38, %f226, 0f7F800000;
	mov.b32 	%r332, %f169;
	and.b32  	%r175, %r332, -2147483648;
	@%p38 bra 	$L__BB0_185;
// %bb.184:
	mov.b32 	%r333, %f784;
	or.b32  	%r334, %r175, %r333;
	mov.b32 	%f784, %r334;
$L__BB0_185:                            // %__nv_fmodf.exit
	shl.b32 	%r178, %r313, 1;
	and.b32  	%r179, %r178, 2;
	mul.lo.s32 	%r349, %r179, %r166;
	cvt.rn.f32.s32 	%f259, %r349;
	mov.f32 	%f260, 0f41400000;
	div.approx.f32 	%f186, %f259, %f260;
	abs.f32 	%f734, %f186;
	setp.lt.f32 	%p46, %f734, 0f40000000;
	@%p46 bra 	$L__BB0_24;
// %bb.13:
	setp.gtu.f32 	%p47, %f734, 0f4B800000;
	@%p47 bra 	$L__BB0_20;
	bra.uni 	$L__BB0_14;
$L__BB0_20:
	mov.b32 	%r8, %f734;
	and.b32  	%r350, %r8, 8388607;
	or.b32  	%r3040, %r350, 1065353216;
	mov.b32 	%f733, %r3040;
	add.s32 	%r351, %r8, -1073741824;
	and.b32  	%r3041, %r351, -8388608;
	setp.eq.s32 	%p53, %r3041, 0;
	@%p53 bra 	$L__BB0_23;
// %bb.21:                              // %__nv_fmaf_rn.exit4.i.i.i2046.preheader
	mov.f32 	%f270, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f269,%f270;
	// end inline asm
$L__BB0_22:                             // %__nv_fmaf_rn.exit4.i.i.i2046
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r352, %r3041, 192937984;
	add.s32 	%r353, %r3040, %r352;
	mov.b32 	%f271, %r353;
	mul.f32 	%f272, %f269, %f271;
	sub.f32 	%f273, %f271, %f272;
	fma.rn.f32 	%f274, %f273, %f269, %f272;
	sub.f32 	%f275, %f271, %f274;
	fma.rz.f32 	%f276, %f275, %f269, %f274;
	cvt.rzi.f32.f32 	%f277, %f276;
	sub.f32 	%f733, %f271, %f277;
	sub.s32 	%r3041, %r3041, %r352;
	mov.b32 	%r3040, %f733;
	setp.ne.s32 	%p54, %r3041, 0;
	setp.ne.s32 	%p55, %r3040, 0;
	and.pred  	%p56, %p54, %p55;
	@%p56 bra 	$L__BB0_22;
$L__BB0_23:                             // %__internal_fmodf_slowpath_mod.exit.i.i2048
	setp.gt.u32 	%p57, %r8, 2139095039;
	selp.f32 	%f278, 0f7FFFFFFF, 0f4B800000, %p57;
	mul.f32 	%f279, %f733, 0f34000000;
	mul.f32 	%f734, %f278, %f279;
	bra.uni 	$L__BB0_24;
$L__BB0_14:                             // %__nv_fast_fdividef.exit.i.i.i2025
	mov.f32 	%f261, 0f40000000;
	div.approx.f32 	%f262, %f734, %f261;
	cvt.rzi.f32.f32 	%f732, %f262;
	fma.rn.f32 	%f2, %f732, 0fC0000000, %f734;
	mov.b32 	%r7, %f2;
	setp.lt.u32 	%p48, %r7, 1073741824;
	@%p48 bra 	$L__BB0_19;
// %bb.15:
	setp.lt.u32 	%p49, %r7, -2147483647;
	@%p49 bra 	$L__BB0_17;
// %bb.16:
	add.f32 	%f267, %f732, 0fBF800000;
	setp.lt.f32 	%p52, %f2, 0fC0000000;
	add.f32 	%f268, %f267, 0fBF800000;
	selp.f32 	%f732, %f268, %f267, %p52;
	bra.uni 	$L__BB0_19;
$L__BB0_17:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p50, %f2, 0f40800000;
	@%p50 bra 	$L__BB0_19;
// %bb.18:                              // %__nv_fmaf_rn.exit.i.i.i2029
	add.f32 	%f263, %f732, 0f3F800000;
	fma.rn.f32 	%f265, %f261, 0fC0400000, %f2;
	setp.ge.f32 	%p51, %f265, 0f00000000;
	add.f32 	%f266, %f263, 0f3F800000;
	selp.f32 	%f732, %f266, %f263, %p51;
$L__BB0_19:                             // %__internal_fmodf_fastpath_quot.exit.i.i2032
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_24:                             // %__internal_fmodf_kernel.exit.i2051
	or.b32  	%r180, %r179, 1;
	abs.f32 	%f280, %f734;
	setp.gtu.f32 	%p58, %f280, 0f7F800000;
	@%p58 bra 	$L__BB0_26;
// %bb.25:
	mov.b32 	%r354, %f186;
	and.b32  	%r355, %r354, -2147483648;
	mov.b32 	%r356, %f734;
	or.b32  	%r357, %r355, %r356;
	mov.b32 	%f734, %r357;
$L__BB0_26:                             // %__nv_fmodf.exit2052
	mov.f32 	%f250, 0f00000000;
	setp.eq.s32 	%p66, %r180, 3;
	mov.f32 	%f37, %f250;
	mov.f32 	%f38, %f250;
	@%p66 bra 	$L__BB0_42;
// %bb.27:                              // %L525
	mul.lo.s32 	%r366, %r180, %r166;
	mul.hi.u32 	%r367, %r366, -1431655765;
	shr.u32 	%r368, %r367, 4;
	mul.lo.s32 	%r369, %r368, 24;
	sub.s32 	%r370, %r366, %r369;
	cvt.rn.f32.s32 	%f311, %r370;
	div.approx.f32 	%f18, %f311, %f260;
	abs.f32 	%f738, %f18;
	setp.lt.f32 	%p67, %f738, 0f40000000;
	@%p67 bra 	$L__BB0_39;
// %bb.28:
	setp.gtu.f32 	%p68, %f738, 0f4B800000;
	@%p68 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_29;
$L__BB0_35:
	mov.b32 	%r16, %f738;
	and.b32  	%r371, %r16, 8388607;
	or.b32  	%r3042, %r371, 1065353216;
	mov.b32 	%f737, %r3042;
	add.s32 	%r372, %r16, -1073741824;
	and.b32  	%r3043, %r372, -8388608;
	setp.eq.s32 	%p74, %r3043, 0;
	@%p74 bra 	$L__BB0_38;
// %bb.36:                              // %__nv_fmaf_rn.exit4.i.i.i2077.preheader
	mov.f32 	%f322, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f321,%f322;
	// end inline asm
$L__BB0_37:                             // %__nv_fmaf_rn.exit4.i.i.i2077
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r373, %r3043, 192937984;
	add.s32 	%r374, %r3042, %r373;
	mov.b32 	%f323, %r374;
	mul.f32 	%f324, %f321, %f323;
	sub.f32 	%f325, %f323, %f324;
	fma.rn.f32 	%f326, %f325, %f321, %f324;
	sub.f32 	%f327, %f323, %f326;
	fma.rz.f32 	%f328, %f327, %f321, %f326;
	cvt.rzi.f32.f32 	%f329, %f328;
	sub.f32 	%f737, %f323, %f329;
	sub.s32 	%r3043, %r3043, %r373;
	mov.b32 	%r3042, %f737;
	setp.ne.s32 	%p75, %r3043, 0;
	setp.ne.s32 	%p76, %r3042, 0;
	and.pred  	%p77, %p75, %p76;
	@%p77 bra 	$L__BB0_37;
$L__BB0_38:                             // %__internal_fmodf_slowpath_mod.exit.i.i2079
	setp.gt.u32 	%p78, %r16, 2139095039;
	selp.f32 	%f330, 0f7FFFFFFF, 0f4B800000, %p78;
	mul.f32 	%f331, %f737, 0f34000000;
	mul.f32 	%f738, %f330, %f331;
	bra.uni 	$L__BB0_39;
$L__BB0_29:                             // %__nv_fast_fdividef.exit.i.i.i2056
	mov.f32 	%f313, 0f40000000;
	div.approx.f32 	%f314, %f738, %f313;
	cvt.rzi.f32.f32 	%f736, %f314;
	fma.rn.f32 	%f21, %f736, 0fC0000000, %f738;
	mov.b32 	%r15, %f21;
	setp.lt.u32 	%p69, %r15, 1073741824;
	@%p69 bra 	$L__BB0_34;
// %bb.30:
	setp.lt.u32 	%p70, %r15, -2147483647;
	@%p70 bra 	$L__BB0_32;
// %bb.31:
	add.f32 	%f319, %f736, 0fBF800000;
	setp.lt.f32 	%p73, %f21, 0fC0000000;
	add.f32 	%f320, %f319, 0fBF800000;
	selp.f32 	%f736, %f320, %f319, %p73;
	bra.uni 	$L__BB0_34;
$L__BB0_32:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p71, %f21, 0f40800000;
	@%p71 bra 	$L__BB0_34;
// %bb.33:                              // %__nv_fmaf_rn.exit.i.i.i2060
	add.f32 	%f315, %f736, 0f3F800000;
	fma.rn.f32 	%f317, %f313, 0fC0400000, %f21;
	setp.ge.f32 	%p72, %f317, 0f00000000;
	add.f32 	%f318, %f315, 0f3F800000;
	selp.f32 	%f736, %f318, %f315, %p72;
$L__BB0_34:                             // %__internal_fmodf_fastpath_quot.exit.i.i2063
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_39:                             // %__internal_fmodf_kernel.exit.i2082
	abs.f32 	%f332, %f738;
	setp.gtu.f32 	%p79, %f332, 0f7F800000;
	@%p79 bra 	$L__BB0_41;
// %bb.40:
	mov.b32 	%r375, %f18;
	and.b32  	%r376, %r375, -2147483648;
	mov.b32 	%r377, %f738;
	or.b32  	%r378, %r376, %r377;
	mov.b32 	%f738, %r378;
$L__BB0_41:                             // %__nv_fmodf.exit2083
	add.f32 	%f333, %f738, %f738;
	mov.b32 	%r379, %f333;
	and.b32  	%r380, %r379, -2147483648;
	or.b32  	%r381, %r380, 1056964608;
	mov.b32 	%f334, %r381;
	add.f32 	%f335, %f333, %f334;
	cvt.rzi.f32.f32 	%f336, %f335;
	abs.f32 	%f337, %f333;
	setp.gt.f32 	%p80, %f337, 0f4B000000;
	selp.f32 	%f338, %f333, %f336, %p80;
	cvt.rzi.f32.f32 	%f339, %f333;
	setp.lt.f32 	%p81, %f337, 0f3F000000;
	selp.f32 	%f340, %f339, %f338, %p81;
	cvt.rzi.s32.f32 	%r382, %f340;
	fma.rn.f32 	%f341, %f340, 0fBF000000, %f738;
	mul.f32 	%f342, %f341, %f341;
	fma.rn.f32 	%f343, %f342, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f344, %f342, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f345, %f343, %f342, 0fC0A55DF6;
	fma.rn.f32 	%f346, %f344, %f342, 0f4081E0CF;
	fma.rn.f32 	%f347, %f342, %f341, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f342, 0fC09DE9E6;
	fma.rn.f32 	%f349, %f345, %f347, 0f00000000;
	fma.rn.f32 	%f350, %f348, %f342, 0f3F800000;
	fma.rn.f32 	%f351, %f341, 0f40490FDB, %f349;
	and.b32  	%r383, %r382, 1;
	setp.eq.b32 	%p82, %r383, 1;
	selp.f32 	%f352, %f350, %f351, %p82;
	selp.f32 	%f353, %f351, %f350, %p82;
	and.b32  	%r384, %r382, 2;
	setp.eq.s32 	%p83, %r384, 0;
	neg.f32 	%f354, %f352;
	selp.f32 	%f355, %f352, %f354, %p83;
	add.s32 	%r385, %r382, 1;
	and.b32  	%r386, %r385, 2;
	setp.eq.s32 	%p84, %r386, 0;
	mov.f32 	%f356, 0f00000000;
	sub.f32 	%f357, %f356, %f353;
	selp.f32 	%f358, %f353, %f357, %p84;
	cvt.rzi.f32.f32 	%f359, %f738;
	setp.eq.f32 	%p85, %f359, %f738;
	mul.f32 	%f360, %f738, 0f00000000;
	selp.f32 	%f38, %f360, %f355, %p85;
	abs.f32 	%f361, %f738;
	setp.gt.f32 	%p86, %f361, 0f4B800000;
	add.f32 	%f362, %f38, 0f3F800000;
	selp.f32 	%f37, %f362, %f358, %p86;
$L__BB0_42:                             // %L559
	and.b32  	%r25, %r166, 3;
	setp.eq.s32 	%p87, %r25, 3;
	mov.f32 	%f731, 0f3FC00000;
	mov.f32 	%f746, %f250;
	mov.f32 	%f755, %f250;
	@%p87 bra 	$L__BB0_58;
// %bb.43:                              // %L597
	mul.lo.s32 	%r393, %r179, %r25;
	cvt.u16.u32 	%rs11, %r393;
	mul.lo.s16 	%rs12, %rs11, 171;
	shr.u16 	%rs13, %rs12, 9;
	mul.lo.s16 	%rs14, %rs13, 3;
	sub.s16 	%rs15, %rs11, %rs14;
	and.b16  	%rs16, %rs15, 255;
	cvt.rn.f32.u16 	%f364, %rs16;
	div.approx.f32 	%f39, %f364, %f731;
	abs.f32 	%f744, %f39;
	setp.lt.f32 	%p88, %f744, 0f40000000;
	@%p88 bra 	$L__BB0_55;
// %bb.44:
	setp.gtu.f32 	%p89, %f744, 0f4B800000;
	@%p89 bra 	$L__BB0_51;
	bra.uni 	$L__BB0_45;
$L__BB0_51:
	mov.b32 	%r27, %f744;
	and.b32  	%r394, %r27, 8388607;
	or.b32  	%r3044, %r394, 1065353216;
	mov.b32 	%f743, %r3044;
	add.s32 	%r395, %r27, -1073741824;
	and.b32  	%r3045, %r395, -8388608;
	setp.eq.s32 	%p95, %r3045, 0;
	@%p95 bra 	$L__BB0_54;
// %bb.52:                              // %__nv_fmaf_rn.exit4.i.i.i2108.preheader
	mov.f32 	%f375, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f374,%f375;
	// end inline asm
$L__BB0_53:                             // %__nv_fmaf_rn.exit4.i.i.i2108
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r396, %r3045, 192937984;
	add.s32 	%r397, %r3044, %r396;
	mov.b32 	%f376, %r397;
	mul.f32 	%f377, %f374, %f376;
	sub.f32 	%f378, %f376, %f377;
	fma.rn.f32 	%f379, %f378, %f374, %f377;
	sub.f32 	%f380, %f376, %f379;
	fma.rz.f32 	%f381, %f380, %f374, %f379;
	cvt.rzi.f32.f32 	%f382, %f381;
	sub.f32 	%f743, %f376, %f382;
	sub.s32 	%r3045, %r3045, %r396;
	mov.b32 	%r3044, %f743;
	setp.ne.s32 	%p96, %r3045, 0;
	setp.ne.s32 	%p97, %r3044, 0;
	and.pred  	%p98, %p96, %p97;
	@%p98 bra 	$L__BB0_53;
$L__BB0_54:                             // %__internal_fmodf_slowpath_mod.exit.i.i2110
	setp.gt.u32 	%p99, %r27, 2139095039;
	selp.f32 	%f383, 0f7FFFFFFF, 0f4B800000, %p99;
	mul.f32 	%f384, %f743, 0f34000000;
	mul.f32 	%f744, %f383, %f384;
	bra.uni 	$L__BB0_55;
$L__BB0_45:                             // %__nv_fast_fdividef.exit.i.i.i2087
	mov.f32 	%f366, 0f40000000;
	div.approx.f32 	%f367, %f744, %f366;
	cvt.rzi.f32.f32 	%f742, %f367;
	fma.rn.f32 	%f42, %f742, 0fC0000000, %f744;
	mov.b32 	%r26, %f42;
	setp.lt.u32 	%p90, %r26, 1073741824;
	@%p90 bra 	$L__BB0_50;
// %bb.46:
	setp.lt.u32 	%p91, %r26, -2147483647;
	@%p91 bra 	$L__BB0_48;
// %bb.47:
	add.f32 	%f372, %f742, 0fBF800000;
	setp.lt.f32 	%p94, %f42, 0fC0000000;
	add.f32 	%f373, %f372, 0fBF800000;
	selp.f32 	%f742, %f373, %f372, %p94;
	bra.uni 	$L__BB0_50;
$L__BB0_48:
	add.f32 	%f742, %f742, 0f3F800000;
	setp.ltu.f32 	%p92, %f42, 0f40800000;
	@%p92 bra 	$L__BB0_50;
// %bb.49:                              // %__nv_fmaf_rn.exit.i.i.i2091
	add.f32 	%f368, %f742, 0f3F800000;
	fma.rn.f32 	%f370, %f366, 0fC0400000, %f42;
	setp.ge.f32 	%p93, %f370, 0f00000000;
	add.f32 	%f371, %f368, 0f3F800000;
	selp.f32 	%f742, %f371, %f368, %p93;
$L__BB0_50:                             // %__internal_fmodf_fastpath_quot.exit.i.i2094
	fma.rn.f32 	%f744, %f742, 0fC0000000, %f744;
$L__BB0_55:                             // %__internal_fmodf_kernel.exit.i2113
	abs.f32 	%f385, %f744;
	setp.gtu.f32 	%p100, %f385, 0f7F800000;
	@%p100 bra 	$L__BB0_57;
// %bb.56:
	mov.b32 	%r398, %f39;
	and.b32  	%r399, %r398, -2147483648;
	mov.b32 	%r400, %f744;
	or.b32  	%r401, %r399, %r400;
	mov.b32 	%f744, %r401;
$L__BB0_57:                             // %__nv_fmodf.exit2114
	add.f32 	%f386, %f744, %f744;
	mov.b32 	%r402, %f386;
	and.b32  	%r403, %r402, -2147483648;
	or.b32  	%r404, %r403, 1056964608;
	mov.b32 	%f387, %r404;
	add.f32 	%f388, %f386, %f387;
	cvt.rzi.f32.f32 	%f389, %f388;
	abs.f32 	%f390, %f386;
	setp.gt.f32 	%p101, %f390, 0f4B000000;
	selp.f32 	%f391, %f386, %f389, %p101;
	cvt.rzi.f32.f32 	%f392, %f386;
	setp.lt.f32 	%p102, %f390, 0f3F000000;
	selp.f32 	%f393, %f392, %f391, %p102;
	cvt.rzi.s32.f32 	%r405, %f393;
	fma.rn.f32 	%f394, %f393, 0fBF000000, %f744;
	mul.f32 	%f395, %f394, %f394;
	fma.rn.f32 	%f396, %f395, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f397, %f395, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f398, %f396, %f395, 0fC0A55DF6;
	fma.rn.f32 	%f399, %f397, %f395, 0f4081E0CF;
	fma.rn.f32 	%f400, %f395, %f394, 0f00000000;
	fma.rn.f32 	%f401, %f399, %f395, 0fC09DE9E6;
	fma.rn.f32 	%f402, %f398, %f400, 0f00000000;
	fma.rn.f32 	%f403, %f401, %f395, 0f3F800000;
	fma.rn.f32 	%f404, %f394, 0f40490FDB, %f402;
	and.b32  	%r406, %r405, 1;
	setp.eq.b32 	%p103, %r406, 1;
	selp.f32 	%f405, %f403, %f404, %p103;
	selp.f32 	%f406, %f404, %f403, %p103;
	and.b32  	%r407, %r405, 2;
	setp.eq.s32 	%p104, %r407, 0;
	neg.f32 	%f407, %f405;
	selp.f32 	%f408, %f405, %f407, %p104;
	add.s32 	%r408, %r405, 1;
	and.b32  	%r409, %r408, 2;
	setp.eq.s32 	%p105, %r409, 0;
	mov.f32 	%f409, 0f00000000;
	sub.f32 	%f410, %f409, %f406;
	selp.f32 	%f411, %f406, %f410, %p105;
	cvt.rzi.f32.f32 	%f412, %f744;
	setp.eq.f32 	%p106, %f412, %f744;
	mul.f32 	%f413, %f744, 0f00000000;
	selp.f32 	%f755, %f413, %f408, %p106;
	abs.f32 	%f414, %f744;
	setp.gt.f32 	%p107, %f414, 0f4B800000;
	add.f32 	%f415, %f755, 0f3F800000;
	selp.f32 	%f746, %f415, %f411, %p107;
$L__BB0_58:                             // %L631
	or.pred  	%p110, %p66, %p87;
	mov.f32 	%f752, %f250;
	mov.f32 	%f757, %f250;
	@%p110 bra 	$L__BB0_74;
// %bb.59:                              // %L639
	mul.lo.s32 	%r410, %r180, %r25;
	mul.hi.u32 	%r411, %r410, -1431655765;
	shr.u32 	%r412, %r411, 1;
	mul.lo.s32 	%r413, %r412, 3;
	sub.s32 	%r414, %r410, %r413;
	cvt.rn.f32.s32 	%f417, %r414;
	div.approx.f32 	%f60, %f417, %f731;
	abs.f32 	%f750, %f60;
	setp.lt.f32 	%p111, %f750, 0f40000000;
	@%p111 bra 	$L__BB0_71;
// %bb.60:
	setp.gtu.f32 	%p112, %f750, 0f4B800000;
	@%p112 bra 	$L__BB0_67;
	bra.uni 	$L__BB0_61;
$L__BB0_67:
	mov.b32 	%r35, %f750;
	and.b32  	%r415, %r35, 8388607;
	or.b32  	%r3046, %r415, 1065353216;
	mov.b32 	%f749, %r3046;
	add.s32 	%r416, %r35, -1073741824;
	and.b32  	%r3047, %r416, -8388608;
	setp.eq.s32 	%p118, %r3047, 0;
	@%p118 bra 	$L__BB0_70;
// %bb.68:                              // %__nv_fmaf_rn.exit4.i.i.i2139.preheader
	mov.f32 	%f428, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f427,%f428;
	// end inline asm
$L__BB0_69:                             // %__nv_fmaf_rn.exit4.i.i.i2139
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r417, %r3047, 192937984;
	add.s32 	%r418, %r3046, %r417;
	mov.b32 	%f429, %r418;
	mul.f32 	%f430, %f427, %f429;
	sub.f32 	%f431, %f429, %f430;
	fma.rn.f32 	%f432, %f431, %f427, %f430;
	sub.f32 	%f433, %f429, %f432;
	fma.rz.f32 	%f434, %f433, %f427, %f432;
	cvt.rzi.f32.f32 	%f435, %f434;
	sub.f32 	%f749, %f429, %f435;
	sub.s32 	%r3047, %r3047, %r417;
	mov.b32 	%r3046, %f749;
	setp.ne.s32 	%p119, %r3047, 0;
	setp.ne.s32 	%p120, %r3046, 0;
	and.pred  	%p121, %p119, %p120;
	@%p121 bra 	$L__BB0_69;
$L__BB0_70:                             // %__internal_fmodf_slowpath_mod.exit.i.i2141
	setp.gt.u32 	%p122, %r35, 2139095039;
	selp.f32 	%f436, 0f7FFFFFFF, 0f4B800000, %p122;
	mul.f32 	%f437, %f749, 0f34000000;
	mul.f32 	%f750, %f436, %f437;
	bra.uni 	$L__BB0_71;
$L__BB0_61:                             // %__nv_fast_fdividef.exit.i.i.i2118
	mov.f32 	%f419, 0f40000000;
	div.approx.f32 	%f420, %f750, %f419;
	cvt.rzi.f32.f32 	%f748, %f420;
	fma.rn.f32 	%f63, %f748, 0fC0000000, %f750;
	mov.b32 	%r34, %f63;
	setp.lt.u32 	%p113, %r34, 1073741824;
	@%p113 bra 	$L__BB0_66;
// %bb.62:
	setp.lt.u32 	%p114, %r34, -2147483647;
	@%p114 bra 	$L__BB0_64;
// %bb.63:
	add.f32 	%f425, %f748, 0fBF800000;
	setp.lt.f32 	%p117, %f63, 0fC0000000;
	add.f32 	%f426, %f425, 0fBF800000;
	selp.f32 	%f748, %f426, %f425, %p117;
	bra.uni 	$L__BB0_66;
$L__BB0_64:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p115, %f63, 0f40800000;
	@%p115 bra 	$L__BB0_66;
// %bb.65:                              // %__nv_fmaf_rn.exit.i.i.i2122
	add.f32 	%f421, %f748, 0f3F800000;
	fma.rn.f32 	%f423, %f419, 0fC0400000, %f63;
	setp.ge.f32 	%p116, %f423, 0f00000000;
	add.f32 	%f424, %f421, 0f3F800000;
	selp.f32 	%f748, %f424, %f421, %p116;
$L__BB0_66:                             // %__internal_fmodf_fastpath_quot.exit.i.i2125
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_71:                             // %__internal_fmodf_kernel.exit.i2144
	abs.f32 	%f438, %f750;
	setp.gtu.f32 	%p123, %f438, 0f7F800000;
	@%p123 bra 	$L__BB0_73;
// %bb.72:
	mov.b32 	%r419, %f60;
	and.b32  	%r420, %r419, -2147483648;
	mov.b32 	%r421, %f750;
	or.b32  	%r422, %r420, %r421;
	mov.b32 	%f750, %r422;
$L__BB0_73:                             // %__nv_fmodf.exit2145
	add.f32 	%f439, %f750, %f750;
	mov.b32 	%r423, %f439;
	and.b32  	%r424, %r423, -2147483648;
	or.b32  	%r425, %r424, 1056964608;
	mov.b32 	%f440, %r425;
	add.f32 	%f441, %f439, %f440;
	cvt.rzi.f32.f32 	%f442, %f441;
	abs.f32 	%f443, %f439;
	setp.gt.f32 	%p124, %f443, 0f4B000000;
	selp.f32 	%f444, %f439, %f442, %p124;
	cvt.rzi.f32.f32 	%f445, %f439;
	setp.lt.f32 	%p125, %f443, 0f3F000000;
	selp.f32 	%f446, %f445, %f444, %p125;
	cvt.rzi.s32.f32 	%r426, %f446;
	fma.rn.f32 	%f447, %f446, 0fBF000000, %f750;
	mul.f32 	%f448, %f447, %f447;
	fma.rn.f32 	%f449, %f448, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f450, %f448, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f451, %f449, %f448, 0fC0A55DF6;
	fma.rn.f32 	%f452, %f450, %f448, 0f4081E0CF;
	fma.rn.f32 	%f453, %f448, %f447, 0f00000000;
	fma.rn.f32 	%f454, %f452, %f448, 0fC09DE9E6;
	fma.rn.f32 	%f455, %f451, %f453, 0f00000000;
	fma.rn.f32 	%f456, %f454, %f448, 0f3F800000;
	fma.rn.f32 	%f457, %f447, 0f40490FDB, %f455;
	and.b32  	%r427, %r426, 1;
	setp.eq.b32 	%p126, %r427, 1;
	selp.f32 	%f458, %f456, %f457, %p126;
	selp.f32 	%f459, %f457, %f456, %p126;
	and.b32  	%r428, %r426, 2;
	setp.eq.s32 	%p127, %r428, 0;
	neg.f32 	%f460, %f458;
	selp.f32 	%f461, %f458, %f460, %p127;
	add.s32 	%r429, %r426, 1;
	and.b32  	%r430, %r429, 2;
	setp.eq.s32 	%p128, %r430, 0;
	mov.f32 	%f462, 0f00000000;
	sub.f32 	%f463, %f462, %f459;
	selp.f32 	%f464, %f459, %f463, %p128;
	cvt.rzi.f32.f32 	%f465, %f750;
	setp.eq.f32 	%p129, %f465, %f750;
	mul.f32 	%f466, %f750, 0f00000000;
	selp.f32 	%f757, %f466, %f461, %p129;
	abs.f32 	%f467, %f750;
	setp.gt.f32 	%p130, %f467, 0f4B800000;
	add.f32 	%f468, %f757, 0f3F800000;
	selp.f32 	%f752, %f468, %f464, %p130;
$L__BB0_74:                             // %L673
	and.b32  	%r42, %r313, 2;
	setp.eq.s32 	%p131, %r42, 0;
	mov.f32 	%f83, %f746;
	mov.f32 	%f85, %f752;
	@%p131 bra 	$L__BB0_76;
// %bb.75:                              // %L682
	neg.f32 	%f85, %f757;
	neg.f32 	%f83, %f755;
	mov.f32 	%f755, %f746;
	mov.f32 	%f757, %f752;
$L__BB0_76:                             // %L684
	@%p26 bra 	$L__BB0_193;
// %bb.77:
	@%p302 bra 	$L__BB0_189;
	bra.uni 	$L__BB0_78;
$L__BB0_189:
	mov.b32 	%r182, %f788;
	and.b32  	%r437, %r182, 8388607;
	or.b32  	%r3093, %r437, 1065353216;
	mov.b32 	%f787, %r3093;
	add.s32 	%r438, %r182, -1073741824;
	and.b32  	%r3094, %r438, -8388608;
	setp.eq.s32 	%p139, %r3094, 0;
	@%p139 bra 	$L__BB0_192;
// %bb.190:                             // %__nv_fmaf_rn.exit4.i.i.i2170.preheader
	mov.f32 	%f478, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f477,%f478;
	// end inline asm
$L__BB0_191:                            // %__nv_fmaf_rn.exit4.i.i.i2170
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r439, %r3094, 192937984;
	add.s32 	%r440, %r3093, %r439;
	mov.b32 	%f479, %r440;
	mul.f32 	%f480, %f477, %f479;
	sub.f32 	%f481, %f479, %f480;
	fma.rn.f32 	%f482, %f481, %f477, %f480;
	sub.f32 	%f483, %f479, %f482;
	fma.rz.f32 	%f484, %f483, %f477, %f482;
	cvt.rzi.f32.f32 	%f485, %f484;
	sub.f32 	%f787, %f479, %f485;
	sub.s32 	%r3094, %r3094, %r439;
	mov.b32 	%r3093, %f787;
	setp.ne.s32 	%p140, %r3094, 0;
	setp.ne.s32 	%p141, %r3093, 0;
	and.pred  	%p142, %p140, %p141;
	@%p142 bra 	$L__BB0_191;
$L__BB0_192:                            // %__internal_fmodf_slowpath_mod.exit.i.i2172
	setp.gt.u32 	%p143, %r182, 2139095039;
	selp.f32 	%f486, 0f7FFFFFFF, 0f4B800000, %p143;
	mul.f32 	%f487, %f787, 0f34000000;
	mul.f32 	%f788, %f486, %f487;
	bra.uni 	$L__BB0_193;
$L__BB0_78:                             // %__nv_fast_fdividef.exit.i.i.i2149
	mov.f32 	%f469, 0f40000000;
	div.approx.f32 	%f470, %f788, %f469;
	cvt.rzi.f32.f32 	%f786, %f470;
	fma.rn.f32 	%f189, %f786, 0fC0000000, %f788;
	mov.b32 	%r181, %f189;
	setp.lt.u32 	%p134, %r181, 1073741824;
	@%p134 bra 	$L__BB0_188;
// %bb.79:
	setp.lt.u32 	%p135, %r181, -2147483647;
	@%p135 bra 	$L__BB0_186;
// %bb.80:
	add.f32 	%f475, %f786, 0fBF800000;
	setp.lt.f32 	%p138, %f189, 0fC0000000;
	add.f32 	%f476, %f475, 0fBF800000;
	selp.f32 	%f786, %f476, %f475, %p138;
	bra.uni 	$L__BB0_188;
$L__BB0_186:
	add.f32 	%f786, %f786, 0f3F800000;
	setp.ltu.f32 	%p136, %f189, 0f40800000;
	@%p136 bra 	$L__BB0_188;
// %bb.187:                             // %__nv_fmaf_rn.exit.i.i.i2153
	add.f32 	%f471, %f786, 0f3F800000;
	fma.rn.f32 	%f473, %f469, 0fC0400000, %f189;
	setp.ge.f32 	%p137, %f473, 0f00000000;
	add.f32 	%f474, %f471, 0f3F800000;
	selp.f32 	%f786, %f474, %f471, %p137;
$L__BB0_188:                            // %__internal_fmodf_fastpath_quot.exit.i.i2156
	fma.rn.f32 	%f788, %f786, 0fC0000000, %f788;
$L__BB0_193:                            // %__internal_fmodf_kernel.exit.i2175
	abs.f32 	%f488, %f788;
	setp.gtu.f32 	%p144, %f488, 0f7F800000;
	@%p144 bra 	$L__BB0_195;
// %bb.194:
	mov.b32 	%r441, %f788;
	or.b32  	%r442, %r175, %r441;
	mov.b32 	%f788, %r442;
$L__BB0_195:                            // %__nv_fmodf.exit2176
	mov.f32 	%f512, 0f00000000;
	mov.f32 	%f521, 0f41000000;
	div.approx.f32 	%f203, %f512, %f521;
	abs.f32 	%f760, %f203;
	setp.lt.f32 	%p152, %f760, 0f40000000;
	@%p152 bra 	$L__BB0_92;
// %bb.81:
	setp.gtu.f32 	%p153, %f760, 0f4B800000;
	@%p153 bra 	$L__BB0_88;
	bra.uni 	$L__BB0_82;
$L__BB0_88:
	mov.b32 	%r46, %f760;
	and.b32  	%r457, %r46, 8388607;
	or.b32  	%r3048, %r457, 1065353216;
	mov.b32 	%f759, %r3048;
	add.s32 	%r458, %r46, -1073741824;
	and.b32  	%r3049, %r458, -8388608;
	setp.eq.s32 	%p159, %r3049, 0;
	@%p159 bra 	$L__BB0_91;
// %bb.89:                              // %__nv_fmaf_rn.exit4.i.i.i2201.preheader
	mov.f32 	%f531, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f530,%f531;
	// end inline asm
$L__BB0_90:                             // %__nv_fmaf_rn.exit4.i.i.i2201
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r459, %r3049, 192937984;
	add.s32 	%r460, %r3048, %r459;
	mov.b32 	%f532, %r460;
	mul.f32 	%f533, %f530, %f532;
	sub.f32 	%f534, %f532, %f533;
	fma.rn.f32 	%f535, %f534, %f530, %f533;
	sub.f32 	%f536, %f532, %f535;
	fma.rz.f32 	%f537, %f536, %f530, %f535;
	cvt.rzi.f32.f32 	%f538, %f537;
	sub.f32 	%f759, %f532, %f538;
	sub.s32 	%r3049, %r3049, %r459;
	mov.b32 	%r3048, %f759;
	setp.ne.s32 	%p160, %r3049, 0;
	setp.ne.s32 	%p161, %r3048, 0;
	and.pred  	%p162, %p160, %p161;
	@%p162 bra 	$L__BB0_90;
$L__BB0_91:                             // %__internal_fmodf_slowpath_mod.exit.i.i2203
	setp.gt.u32 	%p163, %r46, 2139095039;
	selp.f32 	%f539, 0f7FFFFFFF, 0f4B800000, %p163;
	mul.f32 	%f540, %f759, 0f34000000;
	mul.f32 	%f760, %f539, %f540;
	bra.uni 	$L__BB0_92;
$L__BB0_82:                             // %__nv_fast_fdividef.exit.i.i.i2180
	mov.f32 	%f522, 0f40000000;
	div.approx.f32 	%f523, %f760, %f522;
	cvt.rzi.f32.f32 	%f758, %f523;
	fma.rn.f32 	%f88, %f758, 0fC0000000, %f760;
	mov.b32 	%r45, %f88;
	setp.lt.u32 	%p154, %r45, 1073741824;
	@%p154 bra 	$L__BB0_87;
// %bb.83:
	setp.lt.u32 	%p155, %r45, -2147483647;
	@%p155 bra 	$L__BB0_85;
// %bb.84:
	add.f32 	%f528, %f758, 0fBF800000;
	setp.lt.f32 	%p158, %f88, 0fC0000000;
	add.f32 	%f529, %f528, 0fBF800000;
	selp.f32 	%f758, %f529, %f528, %p158;
	bra.uni 	$L__BB0_87;
$L__BB0_85:
	add.f32 	%f758, %f758, 0f3F800000;
	setp.ltu.f32 	%p156, %f88, 0f40800000;
	@%p156 bra 	$L__BB0_87;
// %bb.86:                              // %__nv_fmaf_rn.exit.i.i.i2184
	add.f32 	%f524, %f758, 0f3F800000;
	fma.rn.f32 	%f526, %f522, 0fC0400000, %f88;
	setp.ge.f32 	%p157, %f526, 0f00000000;
	add.f32 	%f527, %f524, 0f3F800000;
	selp.f32 	%f758, %f527, %f524, %p157;
$L__BB0_87:                             // %__internal_fmodf_fastpath_quot.exit.i.i2187
	fma.rn.f32 	%f760, %f758, 0fC0000000, %f760;
$L__BB0_92:                             // %__internal_fmodf_kernel.exit.i2206
	abs.f32 	%f541, %f760;
	setp.gtu.f32 	%p164, %f541, 0f7F800000;
	@%p164 bra 	$L__BB0_94;
// %bb.93:
	mov.b32 	%r461, %f203;
	and.b32  	%r462, %r461, -2147483648;
	mov.b32 	%r463, %f760;
	or.b32  	%r464, %r462, %r463;
	mov.b32 	%f760, %r464;
$L__BB0_94:                             // %__nv_fmodf.exit2207
	cvt.rn.f32.s32 	%f572, %r166;
	div.approx.f32 	%f104, %f572, %f521;
	abs.f32 	%f764, %f104;
	setp.lt.f32 	%p172, %f764, 0f40000000;
	@%p172 bra 	$L__BB0_106;
// %bb.95:
	setp.gtu.f32 	%p173, %f764, 0f4B800000;
	@%p173 bra 	$L__BB0_102;
	bra.uni 	$L__BB0_96;
$L__BB0_102:
	mov.b32 	%r54, %f764;
	and.b32  	%r473, %r54, 8388607;
	or.b32  	%r3050, %r473, 1065353216;
	mov.b32 	%f763, %r3050;
	add.s32 	%r474, %r54, -1073741824;
	and.b32  	%r3051, %r474, -8388608;
	setp.eq.s32 	%p179, %r3051, 0;
	@%p179 bra 	$L__BB0_105;
// %bb.103:                             // %__nv_fmaf_rn.exit4.i.i.i2232.preheader
	mov.f32 	%f583, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f582,%f583;
	// end inline asm
$L__BB0_104:                            // %__nv_fmaf_rn.exit4.i.i.i2232
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r475, %r3051, 192937984;
	add.s32 	%r476, %r3050, %r475;
	mov.b32 	%f584, %r476;
	mul.f32 	%f585, %f582, %f584;
	sub.f32 	%f586, %f584, %f585;
	fma.rn.f32 	%f587, %f586, %f582, %f585;
	sub.f32 	%f588, %f584, %f587;
	fma.rz.f32 	%f589, %f588, %f582, %f587;
	cvt.rzi.f32.f32 	%f590, %f589;
	sub.f32 	%f763, %f584, %f590;
	sub.s32 	%r3051, %r3051, %r475;
	mov.b32 	%r3050, %f763;
	setp.ne.s32 	%p180, %r3051, 0;
	setp.ne.s32 	%p181, %r3050, 0;
	and.pred  	%p182, %p180, %p181;
	@%p182 bra 	$L__BB0_104;
$L__BB0_105:                            // %__internal_fmodf_slowpath_mod.exit.i.i2234
	setp.gt.u32 	%p183, %r54, 2139095039;
	selp.f32 	%f591, 0f7FFFFFFF, 0f4B800000, %p183;
	mul.f32 	%f592, %f763, 0f34000000;
	mul.f32 	%f764, %f591, %f592;
	bra.uni 	$L__BB0_106;
$L__BB0_96:                             // %__nv_fast_fdividef.exit.i.i.i2211
	mov.f32 	%f574, 0f40000000;
	div.approx.f32 	%f575, %f764, %f574;
	cvt.rzi.f32.f32 	%f762, %f575;
	fma.rn.f32 	%f107, %f762, 0fC0000000, %f764;
	mov.b32 	%r53, %f107;
	setp.lt.u32 	%p174, %r53, 1073741824;
	@%p174 bra 	$L__BB0_101;
// %bb.97:
	setp.lt.u32 	%p175, %r53, -2147483647;
	@%p175 bra 	$L__BB0_99;
// %bb.98:
	add.f32 	%f580, %f762, 0fBF800000;
	setp.lt.f32 	%p178, %f107, 0fC0000000;
	add.f32 	%f581, %f580, 0fBF800000;
	selp.f32 	%f762, %f581, %f580, %p178;
	bra.uni 	$L__BB0_101;
$L__BB0_99:
	add.f32 	%f762, %f762, 0f3F800000;
	setp.ltu.f32 	%p176, %f107, 0f40800000;
	@%p176 bra 	$L__BB0_101;
// %bb.100:                             // %__nv_fmaf_rn.exit.i.i.i2215
	add.f32 	%f576, %f762, 0f3F800000;
	fma.rn.f32 	%f578, %f574, 0fC0400000, %f107;
	setp.ge.f32 	%p177, %f578, 0f00000000;
	add.f32 	%f579, %f576, 0f3F800000;
	selp.f32 	%f762, %f579, %f576, %p177;
$L__BB0_101:                            // %__internal_fmodf_fastpath_quot.exit.i.i2218
	fma.rn.f32 	%f764, %f762, 0fC0000000, %f764;
$L__BB0_106:                            // %__internal_fmodf_kernel.exit.i2237
	abs.f32 	%f593, %f764;
	setp.gtu.f32 	%p184, %f593, 0f7F800000;
	@%p184 bra 	$L__BB0_108;
// %bb.107:
	mov.b32 	%r477, %f104;
	and.b32  	%r478, %r477, -2147483648;
	mov.b32 	%r479, %f764;
	or.b32  	%r480, %r478, %r479;
	mov.b32 	%f764, %r480;
$L__BB0_108:                            // %__nv_fmodf.exit2238
	and.b32  	%r64, %r313, 1;
	shr.u32 	%r65, %r313, 4;
	setp.ne.s32 	%p192, %r64, %r65;
	mov.f32 	%f770, %f512;
	mov.f32 	%f779, %f512;
	@%p192 bra 	$L__BB0_124;
// %bb.109:                             // %L889
	mov.f32 	%f626, 0f3F800000;
	mov.f32 	%f627, 0f00000000;
	div.approx.f32 	%f121, %f627, %f626;
	abs.f32 	%f768, %f121;
	setp.lt.f32 	%p193, %f768, 0f40000000;
	@%p193 bra 	$L__BB0_121;
// %bb.110:
	setp.gtu.f32 	%p194, %f768, 0f4B800000;
	@%p194 bra 	$L__BB0_117;
	bra.uni 	$L__BB0_111;
$L__BB0_117:
	mov.b32 	%r67, %f768;
	and.b32  	%r495, %r67, 8388607;
	or.b32  	%r3052, %r495, 1065353216;
	mov.b32 	%f767, %r3052;
	add.s32 	%r496, %r67, -1073741824;
	and.b32  	%r3053, %r496, -8388608;
	setp.eq.s32 	%p200, %r3053, 0;
	@%p200 bra 	$L__BB0_120;
// %bb.118:                             // %__nv_fmaf_rn.exit4.i.i.i2263.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f636,%f626;
	// end inline asm
$L__BB0_119:                            // %__nv_fmaf_rn.exit4.i.i.i2263
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r497, %r3053, 192937984;
	add.s32 	%r498, %r3052, %r497;
	mov.b32 	%f638, %r498;
	mul.f32 	%f639, %f636, %f638;
	sub.f32 	%f640, %f638, %f639;
	fma.rn.f32 	%f641, %f640, %f636, %f639;
	sub.f32 	%f642, %f638, %f641;
	fma.rz.f32 	%f643, %f642, %f636, %f641;
	cvt.rzi.f32.f32 	%f644, %f643;
	sub.f32 	%f767, %f638, %f644;
	sub.s32 	%r3053, %r3053, %r497;
	mov.b32 	%r3052, %f767;
	setp.ne.s32 	%p201, %r3053, 0;
	setp.ne.s32 	%p202, %r3052, 0;
	and.pred  	%p203, %p201, %p202;
	@%p203 bra 	$L__BB0_119;
$L__BB0_120:                            // %__internal_fmodf_slowpath_mod.exit.i.i2265
	setp.gt.u32 	%p204, %r67, 2139095039;
	selp.f32 	%f645, 0f7FFFFFFF, 0f4B800000, %p204;
	mul.f32 	%f646, %f767, 0f34000000;
	mul.f32 	%f768, %f645, %f646;
	bra.uni 	$L__BB0_121;
$L__BB0_111:                            // %__nv_fast_fdividef.exit.i.i.i2242
	mov.f32 	%f628, 0f40000000;
	div.approx.f32 	%f629, %f768, %f628;
	cvt.rzi.f32.f32 	%f766, %f629;
	fma.rn.f32 	%f124, %f766, 0fC0000000, %f768;
	mov.b32 	%r66, %f124;
	setp.lt.u32 	%p195, %r66, 1073741824;
	@%p195 bra 	$L__BB0_116;
// %bb.112:
	setp.lt.u32 	%p196, %r66, -2147483647;
	@%p196 bra 	$L__BB0_114;
// %bb.113:
	add.f32 	%f634, %f766, 0fBF800000;
	setp.lt.f32 	%p199, %f124, 0fC0000000;
	add.f32 	%f635, %f634, 0fBF800000;
	selp.f32 	%f766, %f635, %f634, %p199;
	bra.uni 	$L__BB0_116;
$L__BB0_114:
	add.f32 	%f766, %f766, 0f3F800000;
	setp.ltu.f32 	%p197, %f124, 0f40800000;
	@%p197 bra 	$L__BB0_116;
// %bb.115:                             // %__nv_fmaf_rn.exit.i.i.i2246
	add.f32 	%f630, %f766, 0f3F800000;
	fma.rn.f32 	%f632, %f628, 0fC0400000, %f124;
	setp.ge.f32 	%p198, %f632, 0f00000000;
	add.f32 	%f633, %f630, 0f3F800000;
	selp.f32 	%f766, %f633, %f630, %p198;
$L__BB0_116:                            // %__internal_fmodf_fastpath_quot.exit.i.i2249
	fma.rn.f32 	%f768, %f766, 0fC0000000, %f768;
$L__BB0_121:                            // %__internal_fmodf_kernel.exit.i2268
	abs.f32 	%f647, %f768;
	setp.gtu.f32 	%p205, %f647, 0f7F800000;
	@%p205 bra 	$L__BB0_123;
// %bb.122:
	mov.b32 	%r499, %f121;
	and.b32  	%r500, %r499, -2147483648;
	mov.b32 	%r501, %f768;
	or.b32  	%r502, %r500, %r501;
	mov.b32 	%f768, %r502;
$L__BB0_123:                            // %__nv_fmodf.exit2269
	add.f32 	%f648, %f768, %f768;
	mov.b32 	%r503, %f648;
	and.b32  	%r504, %r503, -2147483648;
	or.b32  	%r505, %r504, 1056964608;
	mov.b32 	%f649, %r505;
	add.f32 	%f650, %f648, %f649;
	cvt.rzi.f32.f32 	%f651, %f650;
	abs.f32 	%f652, %f648;
	setp.gt.f32 	%p206, %f652, 0f4B000000;
	selp.f32 	%f653, %f648, %f651, %p206;
	cvt.rzi.f32.f32 	%f654, %f648;
	setp.lt.f32 	%p207, %f652, 0f3F000000;
	selp.f32 	%f655, %f654, %f653, %p207;
	cvt.rzi.s32.f32 	%r506, %f655;
	fma.rn.f32 	%f656, %f655, 0fBF000000, %f768;
	mul.f32 	%f657, %f656, %f656;
	fma.rn.f32 	%f658, %f657, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f659, %f657, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f660, %f658, %f657, 0fC0A55DF6;
	fma.rn.f32 	%f661, %f659, %f657, 0f4081E0CF;
	fma.rn.f32 	%f662, %f657, %f656, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f657, 0fC09DE9E6;
	fma.rn.f32 	%f664, %f660, %f662, 0f00000000;
	fma.rn.f32 	%f665, %f663, %f657, 0f3F800000;
	fma.rn.f32 	%f666, %f656, 0f40490FDB, %f664;
	and.b32  	%r507, %r506, 1;
	setp.eq.b32 	%p208, %r507, 1;
	selp.f32 	%f667, %f665, %f666, %p208;
	selp.f32 	%f668, %f666, %f665, %p208;
	and.b32  	%r508, %r506, 2;
	setp.eq.s32 	%p209, %r508, 0;
	neg.f32 	%f669, %f667;
	selp.f32 	%f670, %f667, %f669, %p209;
	add.s32 	%r509, %r506, 1;
	and.b32  	%r510, %r509, 2;
	setp.eq.s32 	%p210, %r510, 0;
	sub.f32 	%f672, %f627, %f668;
	selp.f32 	%f673, %f668, %f672, %p210;
	cvt.rzi.f32.f32 	%f674, %f768;
	setp.eq.f32 	%p211, %f674, %f768;
	mul.f32 	%f675, %f768, 0f00000000;
	selp.f32 	%f779, %f675, %f670, %p211;
	abs.f32 	%f676, %f768;
	setp.gt.f32 	%p212, %f676, 0f4B800000;
	add.f32 	%f677, %f779, 0f3F800000;
	selp.f32 	%f770, %f677, %f673, %p212;
$L__BB0_124:                            // %L928
	and.b32  	%r63, %r166, 1;
	mov.f32 	%f776, %f512;
	mov.f32 	%f781, %f512;
	@%p192 bra 	$L__BB0_140;
// %bb.125:                             // %L931
	cvt.rn.f32.s32 	%f679, %r63;
	mov.f32 	%f680, 0f3F800000;
	div.approx.f32 	%f142, %f679, %f680;
	abs.f32 	%f774, %f142;
	setp.lt.f32 	%p214, %f774, 0f40000000;
	@%p214 bra 	$L__BB0_137;
// %bb.126:
	setp.gtu.f32 	%p215, %f774, 0f4B800000;
	@%p215 bra 	$L__BB0_133;
	bra.uni 	$L__BB0_127;
$L__BB0_133:
	mov.b32 	%r75, %f774;
	and.b32  	%r511, %r75, 8388607;
	or.b32  	%r3054, %r511, 1065353216;
	mov.b32 	%f773, %r3054;
	add.s32 	%r512, %r75, -1073741824;
	and.b32  	%r3055, %r512, -8388608;
	setp.eq.s32 	%p221, %r3055, 0;
	@%p221 bra 	$L__BB0_136;
// %bb.134:                             // %__nv_fmaf_rn.exit4.i.i.i2294.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f689,%f680;
	// end inline asm
$L__BB0_135:                            // %__nv_fmaf_rn.exit4.i.i.i2294
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r513, %r3055, 192937984;
	add.s32 	%r514, %r3054, %r513;
	mov.b32 	%f691, %r514;
	mul.f32 	%f692, %f689, %f691;
	sub.f32 	%f693, %f691, %f692;
	fma.rn.f32 	%f694, %f693, %f689, %f692;
	sub.f32 	%f695, %f691, %f694;
	fma.rz.f32 	%f696, %f695, %f689, %f694;
	cvt.rzi.f32.f32 	%f697, %f696;
	sub.f32 	%f773, %f691, %f697;
	sub.s32 	%r3055, %r3055, %r513;
	mov.b32 	%r3054, %f773;
	setp.ne.s32 	%p222, %r3055, 0;
	setp.ne.s32 	%p223, %r3054, 0;
	and.pred  	%p224, %p222, %p223;
	@%p224 bra 	$L__BB0_135;
$L__BB0_136:                            // %__internal_fmodf_slowpath_mod.exit.i.i2296
	setp.gt.u32 	%p225, %r75, 2139095039;
	selp.f32 	%f698, 0f7FFFFFFF, 0f4B800000, %p225;
	mul.f32 	%f699, %f773, 0f34000000;
	mul.f32 	%f774, %f698, %f699;
	bra.uni 	$L__BB0_137;
$L__BB0_127:                            // %__nv_fast_fdividef.exit.i.i.i2273
	mov.f32 	%f681, 0f40000000;
	div.approx.f32 	%f682, %f774, %f681;
	cvt.rzi.f32.f32 	%f772, %f682;
	fma.rn.f32 	%f145, %f772, 0fC0000000, %f774;
	mov.b32 	%r74, %f145;
	setp.lt.u32 	%p216, %r74, 1073741824;
	@%p216 bra 	$L__BB0_132;
// %bb.128:
	setp.lt.u32 	%p217, %r74, -2147483647;
	@%p217 bra 	$L__BB0_130;
// %bb.129:
	add.f32 	%f687, %f772, 0fBF800000;
	setp.lt.f32 	%p220, %f145, 0fC0000000;
	add.f32 	%f688, %f687, 0fBF800000;
	selp.f32 	%f772, %f688, %f687, %p220;
	bra.uni 	$L__BB0_132;
$L__BB0_130:
	add.f32 	%f772, %f772, 0f3F800000;
	setp.ltu.f32 	%p218, %f145, 0f40800000;
	@%p218 bra 	$L__BB0_132;
// %bb.131:                             // %__nv_fmaf_rn.exit.i.i.i2277
	add.f32 	%f683, %f772, 0f3F800000;
	fma.rn.f32 	%f685, %f681, 0fC0400000, %f145;
	setp.ge.f32 	%p219, %f685, 0f00000000;
	add.f32 	%f686, %f683, 0f3F800000;
	selp.f32 	%f772, %f686, %f683, %p219;
$L__BB0_132:                            // %__internal_fmodf_fastpath_quot.exit.i.i2280
	fma.rn.f32 	%f774, %f772, 0fC0000000, %f774;
$L__BB0_137:                            // %__internal_fmodf_kernel.exit.i2299
	abs.f32 	%f700, %f774;
	setp.gtu.f32 	%p226, %f700, 0f7F800000;
	@%p226 bra 	$L__BB0_139;
// %bb.138:
	mov.b32 	%r515, %f142;
	and.b32  	%r516, %r515, -2147483648;
	mov.b32 	%r517, %f774;
	or.b32  	%r518, %r516, %r517;
	mov.b32 	%f774, %r518;
$L__BB0_139:                            // %__nv_fmodf.exit2300
	add.f32 	%f701, %f774, %f774;
	mov.b32 	%r519, %f701;
	and.b32  	%r520, %r519, -2147483648;
	or.b32  	%r521, %r520, 1056964608;
	mov.b32 	%f702, %r521;
	add.f32 	%f703, %f701, %f702;
	cvt.rzi.f32.f32 	%f704, %f703;
	abs.f32 	%f705, %f701;
	setp.gt.f32 	%p227, %f705, 0f4B000000;
	selp.f32 	%f706, %f701, %f704, %p227;
	cvt.rzi.f32.f32 	%f707, %f701;
	setp.lt.f32 	%p228, %f705, 0f3F000000;
	selp.f32 	%f708, %f707, %f706, %p228;
	cvt.rzi.s32.f32 	%r522, %f708;
	fma.rn.f32 	%f709, %f708, 0fBF000000, %f774;
	mul.f32 	%f710, %f709, %f709;
	fma.rn.f32 	%f711, %f710, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f712, %f710, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f713, %f711, %f710, 0fC0A55DF6;
	fma.rn.f32 	%f714, %f712, %f710, 0f4081E0CF;
	fma.rn.f32 	%f715, %f710, %f709, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f710, 0fC09DE9E6;
	fma.rn.f32 	%f717, %f713, %f715, 0f00000000;
	fma.rn.f32 	%f718, %f716, %f710, 0f3F800000;
	fma.rn.f32 	%f719, %f709, 0f40490FDB, %f717;
	and.b32  	%r523, %r522, 1;
	setp.eq.b32 	%p229, %r523, 1;
	selp.f32 	%f720, %f718, %f719, %p229;
	selp.f32 	%f721, %f719, %f718, %p229;
	and.b32  	%r524, %r522, 2;
	setp.eq.s32 	%p230, %r524, 0;
	neg.f32 	%f722, %f720;
	selp.f32 	%f723, %f720, %f722, %p230;
	add.s32 	%r525, %r522, 1;
	and.b32  	%r526, %r525, 2;
	setp.eq.s32 	%p231, %r526, 0;
	mov.f32 	%f724, 0f00000000;
	sub.f32 	%f725, %f724, %f721;
	selp.f32 	%f726, %f721, %f725, %p231;
	cvt.rzi.f32.f32 	%f727, %f774;
	setp.eq.f32 	%p232, %f727, %f774;
	mul.f32 	%f728, %f774, 0f00000000;
	selp.f32 	%f781, %f728, %f723, %p232;
	abs.f32 	%f729, %f774;
	setp.gt.f32 	%p233, %f729, 0f4B800000;
	add.f32 	%f730, %f781, 0f3F800000;
	selp.f32 	%f776, %f730, %f726, %p233;
$L__BB0_140:                            // %L965
	mov.f32 	%f165, %f770;
	mov.f32 	%f167, %f776;
	@%p131 bra 	$L__BB0_142;
// %bb.141:                             // %L974
	neg.f32 	%f167, %f781;
	neg.f32 	%f165, %f779;
	mov.f32 	%f779, %f770;
	mov.f32 	%f781, %f776;
$L__BB0_142:                            // %L976
	setp.gt.u32 	%p235, %r313, 15;
	mov.u32 	%r191, 999999999;
	@%p235 bra 	$L__BB0_197;
// %bb.143:                             // %L1006
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	mad.lo.s32 	%r534, %r313, 6, %r4;
	cvt.u16.u32 	%rs17, %r534;
	and.b16  	%rs18, %rs17, 255;
	mul.lo.s16 	%rs19, %rs18, 171;
	shr.u16 	%rs20, %rs19, 14;
	mul.lo.s16 	%rs21, %rs20, 96;
	sub.s16 	%rs22, %rs17, %rs21;
	cvt.u32.u16 	%r535, %rs22;
	and.b32  	%r536, %r535, 255;
	mul.wide.u32 	%rd55, %r536, 4;
	add.s64 	%rd56, %rd1, %rd55;
	ld.global.u32 	%r537, [%rd56];
	shl.b32 	%r538, %r537, 16;
	cvt.s32.s16 	%r84, %r537;
	shr.s32 	%r85, %r537, 16;
	or.b32  	%r539, %r538, 65535;
	setp.lt.u32 	%p236, %r539, 589823;
	setp.lt.u32 	%p237, %r537, 786432;
	and.pred  	%p238, %p236, %p237;
	@%p238 bra 	$L__BB0_196;
	bra.uni 	$L__BB0_144;
$L__BB0_196:                            // %L1246
	mul.lo.s32 	%r543, %r85, 290;
	mad.lo.s32 	%r191, %r84, 33, %r543;
$L__BB0_197:                            // %pass571
	add.f32 	%f227, %f784, %f784;
	mov.b32 	%r341, %f227;
	add.f32 	%f489, %f788, %f788;
	and.b32  	%r342, %r341, -2147483648;
	add.f32 	%f282, %f734, %f734;
	mov.b32 	%r449, %f489;
	or.b32  	%r343, %r342, 1056964608;
	mov.b32 	%r358, %f282;
	and.b32  	%r450, %r449, -2147483648;
	add.f32 	%f542, %f760, %f760;
	add.f32 	%f595, %f764, %f764;
	mov.b32 	%f228, %r343;
	and.b32  	%r359, %r358, -2147483648;
	or.b32  	%r451, %r450, 1056964608;
	mov.b32 	%r465, %f542;
	mov.b32 	%r487, %f595;
	add.f32 	%f229, %f227, %f228;
	abs.f32 	%f231, %f227;
	or.b32  	%r360, %r359, 1056964608;
	mov.b32 	%f490, %r451;
	and.b32  	%r466, %r465, -2147483648;
	and.b32  	%r488, %r487, -2147483648;
	cvt.rzi.f32.f32 	%f230, %f229;
	setp.gt.f32 	%p39, %f231, 0f4B000000;
	mov.b32 	%f283, %r360;
	add.f32 	%f491, %f489, %f490;
	abs.f32 	%f493, %f489;
	or.b32  	%r467, %r466, 1056964608;
	or.b32  	%r489, %r488, 1056964608;
	selp.f32 	%f232, %f227, %f230, %p39;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p40, %f231, 0f3F000000;
	add.f32 	%f284, %f282, %f283;
	abs.f32 	%f286, %f282;
	cvt.rzi.f32.f32 	%f492, %f491;
	setp.gt.f32 	%p145, %f493, 0f4B000000;
	mov.b32 	%f543, %r467;
	mov.b32 	%f596, %r489;
	selp.f32 	%f234, %f233, %f232, %p40;
	cvt.rzi.f32.f32 	%f285, %f284;
	setp.gt.f32 	%p59, %f286, 0f4B000000;
	selp.f32 	%f494, %f489, %f492, %p145;
	cvt.rzi.f32.f32 	%f495, %f489;
	setp.lt.f32 	%p146, %f493, 0f3F000000;
	add.f32 	%f544, %f542, %f543;
	abs.f32 	%f546, %f542;
	add.f32 	%f597, %f595, %f596;
	abs.f32 	%f599, %f595;
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f784;
	selp.f32 	%f287, %f282, %f285, %p59;
	cvt.rzi.f32.f32 	%f288, %f282;
	setp.lt.f32 	%p60, %f286, 0f3F000000;
	selp.f32 	%f496, %f495, %f494, %p146;
	cvt.rzi.f32.f32 	%f545, %f544;
	setp.gt.f32 	%p165, %f546, 0f4B000000;
	cvt.rzi.f32.f32 	%f598, %f597;
	setp.gt.f32 	%p185, %f599, 0f4B000000;
	mul.f32 	%f236, %f235, %f235;
	selp.f32 	%f289, %f288, %f287, %p60;
	fma.rn.f32 	%f497, %f496, 0fBF000000, %f788;
	selp.f32 	%f547, %f542, %f545, %p165;
	cvt.rzi.f32.f32 	%f548, %f542;
	setp.lt.f32 	%p166, %f546, 0f3F000000;
	selp.f32 	%f600, %f595, %f598, %p185;
	cvt.rzi.f32.f32 	%f601, %f595;
	setp.lt.f32 	%p186, %f599, 0f3F000000;
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f290, %f289, 0fBF000000, %f734;
	mul.f32 	%f498, %f497, %f497;
	selp.f32 	%f549, %f548, %f547, %p166;
	selp.f32 	%f602, %f601, %f600, %p186;
	cvt.rzi.s32.f32 	%r344, %f234;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	mul.f32 	%f291, %f290, %f290;
	fma.rn.f32 	%f499, %f498, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f500, %f498, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f550, %f549, 0fBF000000, %f760;
	fma.rn.f32 	%f603, %f602, 0fBF000000, %f764;
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r345, %r344, 1;
	fma.rn.f32 	%f292, %f291, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f293, %f291, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r452, %f496;
	fma.rn.f32 	%f501, %f499, %f498, 0fC0A55DF6;
	fma.rn.f32 	%f502, %f500, %f498, 0f4081E0CF;
	fma.rn.f32 	%f503, %f498, %f497, 0f00000000;
	mul.f32 	%f551, %f550, %f550;
	mul.f32 	%f604, %f603, %f603;
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p41, %r345, 1;
	cvt.rzi.s32.f32 	%r361, %f289;
	fma.rn.f32 	%f294, %f292, %f291, 0fC0A55DF6;
	fma.rn.f32 	%f295, %f293, %f291, 0f4081E0CF;
	fma.rn.f32 	%f296, %f291, %f290, 0f00000000;
	fma.rn.f32 	%f504, %f502, %f498, 0fC09DE9E6;
	fma.rn.f32 	%f505, %f501, %f503, 0f00000000;
	and.b32  	%r453, %r452, 1;
	fma.rn.f32 	%f552, %f551, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f553, %f551, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f604, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f606, %f604, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f246, %f244, %f245, %p41;
	and.b32  	%r346, %r344, 2;
	fma.rn.f32 	%f297, %f295, %f291, 0fC09DE9E6;
	fma.rn.f32 	%f298, %f294, %f296, 0f00000000;
	and.b32  	%r362, %r361, 1;
	fma.rn.f32 	%f506, %f504, %f498, 0f3F800000;
	fma.rn.f32 	%f507, %f497, 0f40490FDB, %f505;
	setp.eq.b32 	%p147, %r453, 1;
	cvt.rzi.s32.f32 	%r468, %f549;
	fma.rn.f32 	%f554, %f552, %f551, 0fC0A55DF6;
	fma.rn.f32 	%f555, %f553, %f551, 0f4081E0CF;
	fma.rn.f32 	%f556, %f551, %f550, 0f00000000;
	cvt.rzi.s32.f32 	%r490, %f602;
	fma.rn.f32 	%f607, %f605, %f604, 0fC0A55DF6;
	fma.rn.f32 	%f608, %f606, %f604, 0f4081E0CF;
	fma.rn.f32 	%f609, %f604, %f603, 0f00000000;
	setp.eq.s32 	%p42, %r346, 0;
	neg.f32 	%f248, %f246;
	add.s32 	%r347, %r344, 1;
	cvt.rzi.f32.f32 	%f253, %f784;
	fma.rn.f32 	%f299, %f297, %f291, 0f3F800000;
	fma.rn.f32 	%f300, %f290, 0f40490FDB, %f298;
	setp.eq.b32 	%p61, %r362, 1;
	selp.f32 	%f508, %f506, %f507, %p147;
	and.b32  	%r454, %r452, 2;
	fma.rn.f32 	%f557, %f555, %f551, 0fC09DE9E6;
	fma.rn.f32 	%f558, %f554, %f556, 0f00000000;
	and.b32  	%r469, %r468, 1;
	fma.rn.f32 	%f610, %f608, %f604, 0fC09DE9E6;
	fma.rn.f32 	%f611, %f607, %f609, 0f00000000;
	and.b32  	%r491, %r490, 1;
	selp.f32 	%f247, %f245, %f244, %p41;
	selp.f32 	%f249, %f246, %f248, %p42;
	and.b32  	%r348, %r347, 2;
	setp.eq.f32 	%p44, %f253, %f784;
	mul.f32 	%f254, %f784, 0f00000000;
	selp.f32 	%f301, %f299, %f300, %p61;
	and.b32  	%r363, %r361, 2;
	setp.eq.s32 	%p148, %r454, 0;
	neg.f32 	%f510, %f508;
	add.s32 	%r455, %r452, 1;
	cvt.rzi.f32.f32 	%f515, %f788;
	fma.rn.f32 	%f559, %f557, %f551, 0f3F800000;
	fma.rn.f32 	%f560, %f550, 0f40490FDB, %f558;
	setp.eq.b32 	%p167, %r469, 1;
	fma.rn.f32 	%f612, %f610, %f604, 0f3F800000;
	fma.rn.f32 	%f613, %f603, 0f40490FDB, %f611;
	setp.eq.b32 	%p187, %r491, 1;
	setp.eq.s32 	%p43, %r348, 0;
	sub.f32 	%f251, %f250, %f247;
	selp.f32 	%f255, %f254, %f249, %p44;
	abs.f32 	%f256, %f784;
	setp.eq.s32 	%p62, %r363, 0;
	neg.f32 	%f303, %f301;
	add.s32 	%r364, %r361, 1;
	cvt.rzi.f32.f32 	%f307, %f734;
	selp.f32 	%f509, %f507, %f506, %p147;
	selp.f32 	%f511, %f508, %f510, %p148;
	and.b32  	%r456, %r455, 2;
	setp.eq.f32 	%p150, %f515, %f788;
	mul.f32 	%f516, %f788, 0f00000000;
	selp.f32 	%f561, %f559, %f560, %p167;
	and.b32  	%r470, %r468, 2;
	selp.f32 	%f614, %f612, %f613, %p187;
	and.b32  	%r492, %r490, 2;
	selp.f32 	%f252, %f247, %f251, %p43;
	setp.gt.f32 	%p45, %f256, 0f4B800000;
	add.f32 	%f257, %f255, 0f3F800000;
	selp.f32 	%f302, %f300, %f299, %p61;
	selp.f32 	%f304, %f301, %f303, %p62;
	and.b32  	%r365, %r364, 2;
	setp.eq.f32 	%p64, %f307, %f734;
	mul.f32 	%f308, %f734, 0f00000000;
	setp.eq.s32 	%p149, %r456, 0;
	sub.f32 	%f513, %f512, %f509;
	selp.f32 	%f517, %f516, %f511, %p150;
	abs.f32 	%f518, %f788;
	setp.eq.s32 	%p168, %r470, 0;
	neg.f32 	%f563, %f561;
	add.s32 	%r471, %r468, 1;
	cvt.rzi.f32.f32 	%f568, %f760;
	setp.eq.s32 	%p188, %r492, 0;
	neg.f32 	%f616, %f614;
	add.s32 	%r493, %r490, 1;
	cvt.rzi.f32.f32 	%f620, %f764;
	selp.f32 	%f258, %f257, %f252, %p45;
	setp.eq.s32 	%p63, %r365, 0;
	sub.f32 	%f305, %f250, %f302;
	selp.f32 	%f16, %f308, %f304, %p64;
	abs.f32 	%f309, %f734;
	selp.f32 	%f514, %f509, %f513, %p149;
	setp.gt.f32 	%p151, %f518, 0f4B800000;
	add.f32 	%f519, %f517, 0f3F800000;
	selp.f32 	%f562, %f560, %f559, %p167;
	selp.f32 	%f564, %f561, %f563, %p168;
	and.b32  	%r472, %r471, 2;
	setp.eq.f32 	%p170, %f568, %f760;
	mul.f32 	%f569, %f760, 0f00000000;
	selp.f32 	%f615, %f613, %f612, %p187;
	selp.f32 	%f617, %f614, %f616, %p188;
	and.b32  	%r494, %r493, 2;
	setp.eq.f32 	%p190, %f620, %f764;
	mul.f32 	%f621, %f764, 0f00000000;
	mov.b32 	%r337, %f258;
	mov.b32 	%r340, %f255;
	selp.f32 	%f306, %f302, %f305, %p63;
	setp.gt.f32 	%p65, %f309, 0f4B800000;
	add.f32 	%f310, %f16, 0f3F800000;
	selp.f32 	%f520, %f519, %f514, %p151;
	setp.eq.s32 	%p169, %r472, 0;
	sub.f32 	%f566, %f512, %f562;
	selp.f32 	%f102, %f569, %f564, %p170;
	abs.f32 	%f570, %f760;
	setp.eq.s32 	%p189, %r494, 0;
	sub.f32 	%f618, %f512, %f615;
	selp.f32 	%f622, %f621, %f617, %p190;
	abs.f32 	%f623, %f764;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r336, %r340, -2147483648;
	selp.f32 	%f17, %f310, %f306, %p65;
	mov.b32 	%r445, %f520;
	mov.b32 	%r448, %f517;
	selp.f32 	%f567, %f562, %f566, %p169;
	setp.gt.f32 	%p171, %f570, 0f4B800000;
	add.f32 	%f571, %f102, 0f3F800000;
	selp.f32 	%f619, %f615, %f618, %p189;
	setp.gt.f32 	%p191, %f623, 0f4B800000;
	add.f32 	%f624, %f622, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r335, %r337, %r336;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r338, %r340, %r337;
	// end inline asm
	mov.b32 	%r388, %f17;
	mov.b32 	%r389, %f37;
	mov.b32 	%r391, %f16;
	mov.b32 	%r392, %f38;
	mov.b32 	%r432, %f83;
	mov.b32 	%r433, %f85;
	mov.b32 	%r435, %f755;
	mov.b32 	%r436, %f757;
	xor.b32  	%r444, %r448, -2147483648;
	selp.f32 	%f103, %f571, %f567, %p171;
	selp.f32 	%f625, %f624, %f619, %p191;
	// begin inline asm
	cvt.rn.f16x2.f32 %r387, %r389, %r388;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r390, %r392, %r391;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r431, %r433, %r432;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r434, %r436, %r435;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r443, %r445, %r444;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r446, %r448, %r445;
	// end inline asm
	mov.b32 	%r483, %f625;
	mov.b32 	%r482, %f103;
	mov.b32 	%r486, %f622;
	mov.b32 	%r485, %f102;
	// begin inline asm
	cvt.rn.f16x2.f32 %r481, %r483, %r482;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r484, %r486, %r485;
	// end inline asm
	mov.b32 	%r528, %f165;
	mov.b32 	%r529, %f167;
	// begin inline asm
	cvt.rn.f16x2.f32 %r527, %r529, %r528;
	// end inline asm
	mov.b32 	%r531, %f779;
	mov.b32 	%r532, %f781;
	// begin inline asm
	cvt.rn.f16x2.f32 %r530, %r532, %r531;
	// end inline asm
	and.b32  	%r545, %r1, 127;
	mul.lo.s32 	%r546, %r545, 192;
	shr.u32 	%r192, %r313, 3;
	and.b32  	%r547, %r192, 2;
	or.b32  	%r193, %r63, %r547;
	cvt.u16.u32 	%rs25, %r193;
	mul.lo.s16 	%rs26, %rs25, 171;
	shr.u16 	%rs27, %rs26, 9;
	mul.lo.s16 	%rs28, %rs27, 3;
	sub.s16 	%rs29, %rs25, %rs28;
	cvt.u32.u16 	%r548, %rs29;
	and.b32  	%r549, %r548, 255;
	and.b16  	%rs30, %rs29, 255;
	mul.wide.u16 	%r550, %rs30, 8;
	bfe.u32 	%r551, %r313, 3, 1;
	shl.b32 	%r552, %r4, 1;
	and.b32  	%r553, %r552, 2;
	or.b32  	%r554, %r551, %r553;
	mul.lo.s32 	%r555, %r165, 24;
	add.s32 	%r556, %r555, %r546;
	or.b32  	%r557, %r556, %r554;
	add.s32 	%r558, %r557, %r550;
	mul.wide.u32 	%rd62, %r558, 4;
	add.s64 	%rd63, %rd2, %rd62;
	ld.global.u32 	%r194, [%rd63];
	or.b32  	%r559, %r554, %r546;
	cvt.u64.u32 	%rd64, %r550;
	cvt.u64.u32 	%rd65, %r555;
	cvt.u64.u32 	%rd66, %r559;
	add.s64 	%rd67, %rd66, %rd65;
	add.s64 	%rd68, %rd67, %rd64;
	shl.b64 	%rd69, %rd68, 2;
	add.s64 	%rd70, %rd2, %rd69;
	ld.global.u32 	%r195, [%rd70+16];
	cvt.u64.u32 	%rd71, %r554;
	cvt.u64.u32 	%rd72, %r546;
	add.s64 	%rd73, %rd72, %rd65;
	or.b64  	%rd74, %rd73, %rd71;
	add.s64 	%rd75, %rd74, %rd64;
	shl.b64 	%rd76, %rd75, 2;
	add.s64 	%rd77, %rd2, %rd76;
	ld.global.u32 	%r196, [%rd77+384];
	ld.global.u32 	%r197, [%rd77+400];
	shl.b32 	%r560, %r308, 5;
	shl.b32 	%r561, %r1, 5;
	shl.b32 	%r562, %r313, 2;
	shl.b32 	%r198, %r4, 2;
	and.b32  	%r563, %r562, 28;
	or.b32  	%r564, %r563, %r561;
	add.s32 	%r199, %r564, %r560;
	bfe.s32 	%r565, %r313, 2, 1;
	and.b32  	%r200, %r313, 4;
	setp.eq.s32 	%p240, %r200, 0;
	and.b32  	%r566, %r178, 8;
	shl.b32 	%r567, %r313, 4;
	or.b32  	%r568, %r566, %r567;
	bfe.u32 	%r569, %r568, 3, 3;
	mul.lo.s32 	%r201, %r569, 260;
	cvt.u16.u32 	%rs31, %r313;
	and.b16  	%rs32, %rs31, 255;
	mul.lo.s16 	%rs33, %rs32, 171;
	shr.u16 	%rs34, %rs33, 12;
	mul.lo.s16 	%rs35, %rs34, 24;
	sub.s16 	%rs36, %rs31, %rs35;
	cvt.u32.u16 	%r570, %rs36;
	and.b32  	%r202, %r570, 255;
	add.s32 	%r571, %r4, 6;
	shr.u32 	%r572, %r571, 3;
	add.s32 	%r573, %r5, 192;
	and.b32  	%r574, %r573, 224;
	mad.lo.s32 	%r203, %r572, 260, %r574;
	add.s32 	%r575, %r4, 12;
	shr.u32 	%r576, %r575, 3;
	add.s32 	%r577, %r5, 128;
	and.b32  	%r578, %r577, 224;
	mad.lo.s32 	%r204, %r576, 260, %r578;
	add.s32 	%r579, %r4, 18;
	shr.u32 	%r580, %r579, 3;
	add.s32 	%r581, %r5, 64;
	and.b32  	%r582, %r581, 224;
	mad.lo.s32 	%r205, %r580, 260, %r582;
	or.b32  	%r206, %r5, 780;
	add.s32 	%r583, %r4, 30;
	shr.u32 	%r584, %r583, 3;
	mad.lo.s32 	%r207, %r584, 260, %r574;
	add.s32 	%r585, %r4, 36;
	shr.u32 	%r586, %r585, 3;
	mad.lo.s32 	%r208, %r586, 260, %r578;
	add.s32 	%r587, %r4, 42;
	shr.u32 	%r588, %r587, 3;
	mad.lo.s32 	%r209, %r588, 260, %r582;
	or.b32  	%r210, %r5, 1560;
	add.s32 	%r589, %r4, 54;
	shr.u32 	%r590, %r589, 3;
	mad.lo.s32 	%r211, %r590, 260, %r574;
	add.s32 	%r591, %r4, 60;
	bfe.u32 	%r592, %r591, 3, 3;
	mad.lo.s32 	%r212, %r592, 260, %r578;
	shr.u32 	%r593, %r4, 1;
	cvt.u16.u32 	%rs37, %r593;
	and.b16  	%rs38, %rs37, 255;
	mul.lo.s16 	%rs39, %rs38, 171;
	shr.u16 	%rs40, %rs39, 9;
	mul.lo.s16 	%rs41, %rs40, 3;
	sub.s16 	%rs42, %rs37, %rs41;
	cvt.u32.u16 	%r594, %rs42;
	and.b32  	%r213, %r594, 255;
	mul.lo.s32 	%r595, %r165, 870;
	mad.lo.s32 	%r596, %r554, 33, %r595;
	mad.lo.s32 	%r214, %r549, 290, %r596;
	add.s32 	%r215, %r214, 132;
	setp.lt.u32 	%p241, %r313, 4;
	setp.eq.s32 	%p242, %r166, 1;
	setp.eq.s32 	%p243, %r166, 4;
	setp.eq.s32 	%p244, %r166, 5;
	and.b32  	%r216, %r565, 196;
	bfe.s32 	%r597, %r313, 3, 1;
	and.b32  	%r217, %r597, 98;
	selp.b32 	%r218, 0, 392, %p131;
	setp.eq.s32 	%p245, %r64, 0;
	selp.b32 	%r219, 0, 784, %p245;
	or.b32  	%r220, %r553, %r65;
	add.s32 	%r598, %r216, %r217;
	add.s32 	%r599, %r598, %r218;
	add.s32 	%r600, %r599, %r219;
	add.s32 	%r221, %r600, %r220;
	selp.b32 	%r222, 1576, 1772, %p240;
	add.s32 	%r601, %r222, %r217;
	add.s32 	%r602, %r601, %r218;
	add.s32 	%r603, %r602, %r219;
	add.s32 	%r223, %r603, %r220;
	or.b32  	%r224, %r220, 4;
	add.s32 	%r225, %r600, %r224;
	add.s32 	%r226, %r603, %r224;
	add.s32 	%r604, %r603, 8;
	add.s32 	%r227, %r604, %r220;
	add.s32 	%r228, %r604, %r224;
	bfe.s32 	%r605, %r4, 1, 1;
	and.b32  	%r606, %r605, 196;
	and.b32  	%r607, %r178, 6;
	and.b32  	%r608, %r597, 1576;
	shr.u32 	%r609, %r4, 2;
	and.b32  	%r610, %r4, 1;
	neg.s32 	%r611, %r610;
	and.b32  	%r612, %r611, 392;
	mad.lo.s32 	%r613, %r609, 98, %r607;
	or.b32  	%r614, %r613, %r63;
	mad.lo.s32 	%r615, %r65, 784, %r614;
	add.s32 	%r616, %r615, %r606;
	add.s32 	%r617, %r616, %r608;
	add.s32 	%r229, %r617, %r612;
	add.s32 	%r230, %r229, 8;
	mul.lo.s32 	%r618, %r306, 786432;
	mad.lo.s32 	%r619, %r310, 192, %r618;
	or.b32  	%r620, %r198, %r192;
	cvt.u16.u32 	%rs43, %r620;
	and.b16  	%rs44, %rs43, 255;
	mul.lo.s16 	%rs45, %rs44, 171;
	shr.u16 	%rs46, %rs45, 9;
	and.b16  	%rs47, %rs46, 24;
	add.s16 	%rs48, %rs43, %rs47;
	shl.b16 	%rs49, %rs48, 3;
	cvt.u32.u16 	%r621, %rs49;
	and.b32  	%r231, %r621, 248;
	and.b32  	%r232, %r313, 7;
	cvt.s64.s32 	%rd23, %r619;
	add.s32 	%r622, %r214, %r213;
	mul.wide.u32 	%rd78, %r622, 4;
	mov.u64 	%rd79, shmem;
	add.s64 	%rd24, %rd79, %rd78;
	add.s32 	%r623, %r215, %r213;
	mul.wide.u32 	%rd80, %r623, 4;
	add.s64 	%rd25, %rd79, %rd80;
	cvt.u64.u32 	%rd81, %r214;
	cvt.u64.u16 	%rd82, %rs42;
	and.b64  	%rd83, %rd82, 255;
	add.s64 	%rd84, %rd81, %rd83;
	shl.b64 	%rd85, %rd84, 2;
	add.s64 	%rd26, %rd79, %rd85;
	cvt.u64.u32 	%rd86, %r215;
	add.s64 	%rd87, %rd86, %rd83;
	shl.b64 	%rd88, %rd87, 2;
	add.s64 	%rd27, %rd79, %rd88;
	or.pred  	%p246, %p241, %p242;
	and.b32  	%r624, %r313, 24;
	setp.eq.s32 	%p247, %r624, 8;
	or.pred  	%p248, %p246, %p247;
	or.pred  	%p249, %p248, %p243;
	setp.eq.s32 	%p250, %r624, 24;
	or.pred  	%p251, %p244, %p250;
	selp.b32 	%r233, 1145324612, -286331154, %p248;
	or.pred  	%p1, %p249, %p251;
	selp.b32 	%r234, 1145324612, -286331154, %p246;
	add.s32 	%r625, %r166, -1;
	setp.lt.u32 	%p252, %r625, 3;
	or.pred  	%p2, %p241, %p252;
	setp.eq.s32 	%p253, %r624, 16;
	or.pred  	%p3, %p253, %p250;
	selp.b32 	%r235, 1145324612, -286331154, %p253;
	add.s32 	%r87, %r213, 3;
	and.b16  	%rs9, %rs42, 255;
	or.b16  	%rs10, %rs9, 24;
	mov.u32 	%r88, 0;
	mov.u16 	%rs2, 0;
	mov.u16 	%rs1, 29;
	selp.b32 	%r132, %r234, %r235, %p2;
	or.pred  	%p285, %p2, %p3;
	mov.u32 	%r108, %r88;
	mov.u32 	%r109, %r88;
	mov.u32 	%r110, %r88;
	bra.uni 	$L__BB0_198;
$L__BB0_169:                            // %L40316
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r163, %r88, 48;
	add.s32 	%r87, %r87, 48;
	add.s16 	%rs2, %rs2, 48;
	add.s16 	%rs1, %rs1, 48;
	setp.ne.s32 	%p301, %r88, 32688;
	mov.u32 	%r88, %r163;
	@%p301 bra 	$L__BB0_198;
	bra.uni 	$L__BB0_170;
$L__BB0_198:                            // %L1929
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_162 Depth 2
                                        //     Child Loop BB0_166 Depth 2
	add.s32 	%r626, %r88, %r304;
	setp.lt.s32 	%p254, %r626, %r305;
	@%p254 bra 	$L__BB0_199;
	bra.uni 	$L__BB0_170;
$L__BB0_199:                            // %oksrem888
                                        //   in Loop: Header=BB0_198 Depth=1
	mul.hi.u32 	%r723, %r88, -1431655765;
	shr.u32 	%r724, %r723, 5;
	mul.lo.s32 	%r237, %r724, 48;
	add.s32 	%r725, %r237, %r198;
	or.b32  	%r726, %r725, %r192;
	shr.s32 	%r727, %r725, 31;
	shr.u32 	%r728, %r727, 17;
	add.s32 	%r729, %r726, %r728;
	and.b32  	%r730, %r729, -32768;
	sub.s32 	%r731, %r726, %r730;
	add.s32 	%r732, %r731, %r304;
	mad.lo.s32 	%r733, %r732, 12288, %r199;
	mul.hi.s32 	%r734, %r733, 715827883;
	shr.u32 	%r735, %r734, 31;
	shr.s32 	%r736, %r734, 26;
	add.s32 	%r737, %r736, %r735;
	setp.lt.s32 	%p256, %r733, 0;
	mul.lo.s32 	%r738, %r737, 402653184;
	setp.ne.s32 	%p257, %r738, %r733;
	and.pred  	%p258, %p256, %p257;
	selp.s32 	%r739, -1, 0, %p258;
	add.s32 	%r740, %r737, %r739;
	mad.lo.s32 	%r741, %r740, -402653184, %r733;
	mul.wide.s32 	%rd89, %r741, 4;
	add.s64 	%rd90, %rd3, %rd89;
	ld.global.v4.u32 	{%r742, %r743, %r744, %r745}, [%rd90];
	add.s32 	%r746, %r725, 24;
	or.b32  	%r747, %r746, %r192;
	shr.s32 	%r748, %r746, 31;
	shr.u32 	%r749, %r748, 17;
	add.s32 	%r750, %r747, %r749;
	and.b32  	%r751, %r750, -32768;
	sub.s32 	%r752, %r747, %r751;
	add.s32 	%r753, %r752, %r304;
	mad.lo.s32 	%r754, %r753, 12288, %r199;
	mul.hi.s32 	%r755, %r754, 715827883;
	shr.u32 	%r756, %r755, 31;
	shr.s32 	%r757, %r755, 26;
	add.s32 	%r758, %r757, %r756;
	setp.lt.s32 	%p259, %r754, 0;
	mul.lo.s32 	%r759, %r758, 402653184;
	setp.ne.s32 	%p260, %r759, %r754;
	and.pred  	%p261, %p259, %p260;
	selp.s32 	%r760, -1, 0, %p261;
	add.s32 	%r761, %r758, %r760;
	mad.lo.s32 	%r762, %r761, -402653184, %r754;
	mul.wide.s32 	%rd91, %r762, 4;
	add.s64 	%rd92, %rd3, %rd91;
	ld.global.v4.u32 	{%r763, %r764, %r765, %r766}, [%rd92];
	selp.b32 	%r767, %r744, %r742, %p240;
	shfl.sync.bfly.b32	%r768, %r767, 4, 31, -1;
	selp.b32 	%r629, %r742, %r768, %p240;
	selp.b32 	%r634, %r768, %r744, %p240;
	selp.b32 	%r769, %r745, %r743, %p240;
	shfl.sync.bfly.b32	%r770, %r769, 4, 31, -1;
	selp.b32 	%r637, %r743, %r770, %p240;
	selp.b32 	%r642, %r770, %r745, %p240;
	selp.b32 	%r771, %r765, %r763, %p240;
	shfl.sync.bfly.b32	%r772, %r771, 4, 31, -1;
	selp.b32 	%r645, %r763, %r772, %p240;
	selp.b32 	%r650, %r772, %r765, %p240;
	selp.b32 	%r773, %r766, %r764, %p240;
	shfl.sync.bfly.b32	%r774, %r773, 4, 31, -1;
	selp.b32 	%r653, %r764, %r774, %p240;
	selp.b32 	%r658, %r774, %r766, %p240;
	shl.b32 	%r630, %r634, 4;
	mov.u32 	%r628, 252645135;
	// begin inline asm
	lop3.b32 %r660, %r628, %r629, %r630, 202;
	// end inline asm
	shr.u32 	%r633, %r629, 4;
	// begin inline asm
	lop3.b32 %r676, %r628, %r633, %r634, 202;
	// end inline asm
	shl.b32 	%r638, %r642, 4;
	// begin inline asm
	lop3.b32 %r668, %r628, %r637, %r638, 202;
	// end inline asm
	shr.u32 	%r641, %r637, 4;
	// begin inline asm
	lop3.b32 %r684, %r628, %r641, %r642, 202;
	// end inline asm
	shl.b32 	%r646, %r650, 4;
	// begin inline asm
	lop3.b32 %r661, %r628, %r645, %r646, 202;
	// end inline asm
	shr.u32 	%r649, %r645, 4;
	// begin inline asm
	lop3.b32 %r677, %r628, %r649, %r650, 202;
	// end inline asm
	shl.b32 	%r654, %r658, 4;
	// begin inline asm
	lop3.b32 %r669, %r628, %r653, %r654, 202;
	// end inline asm
	shr.u32 	%r657, %r653, 4;
	// begin inline asm
	lop3.b32 %r685, %r628, %r657, %r658, 202;
	// end inline asm
	mov.u32 	%r662, 25152;
	// begin inline asm
	prmt.b32 %r692, %r660, %r661, %r662;
	// end inline asm
	mov.u32 	%r666, 29521;
	// begin inline asm
	prmt.b32 %r708, %r660, %r661, %r666;
	// end inline asm
	// begin inline asm
	prmt.b32 %r700, %r668, %r669, %r662;
	// end inline asm
	// begin inline asm
	prmt.b32 %r716, %r668, %r669, %r666;
	// end inline asm
	// begin inline asm
	prmt.b32 %r693, %r676, %r677, %r662;
	// end inline asm
	// begin inline asm
	prmt.b32 %r709, %r676, %r677, %r666;
	// end inline asm
	// begin inline asm
	prmt.b32 %r701, %r684, %r685, %r662;
	// end inline asm
	// begin inline asm
	prmt.b32 %r717, %r684, %r685, %r666;
	// end inline asm
	mov.u32 	%r718, 21520;
	// begin inline asm
	prmt.b32 %r691, %r692, %r693, %r718;
	// end inline asm
	mov.u32 	%r722, 30258;
	// begin inline asm
	prmt.b32 %r695, %r692, %r693, %r722;
	// end inline asm
	// begin inline asm
	prmt.b32 %r699, %r700, %r701, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r703, %r700, %r701, %r722;
	// end inline asm
	// begin inline asm
	prmt.b32 %r707, %r708, %r709, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r711, %r708, %r709, %r722;
	// end inline asm
	// begin inline asm
	prmt.b32 %r715, %r716, %r717, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r719, %r716, %r717, %r722;
	// end inline asm
	mul.hi.s32 	%r775, %r726, 715827883;
	shr.u32 	%r776, %r775, 31;
	shr.s32 	%r777, %r775, 2;
	add.s32 	%r778, %r777, %r776;
	mul.lo.s32 	%r779, %r778, 24;
	sub.s32 	%r780, %r726, %r779;
	add.s32 	%r781, %r780, %r201;
	mul.wide.s32 	%rd93, %r781, 4;
	add.s64 	%rd95, %rd79, %rd93;
	st.shared.u32 	[%rd95], %r691;
	add.s32 	%r782, %r781, 128;
	mul.wide.u32 	%rd96, %r782, 4;
	add.s64 	%rd97, %rd79, %rd96;
	st.shared.u32 	[%rd97], %r699;
	add.s32 	%r783, %r781, 64;
	mul.wide.u32 	%rd98, %r783, 4;
	add.s64 	%rd99, %rd79, %rd98;
	st.shared.u32 	[%rd99], %r695;
	add.s32 	%r784, %r781, 192;
	mul.wide.u32 	%rd100, %r784, 4;
	add.s64 	%rd101, %rd79, %rd100;
	st.shared.u32 	[%rd101], %r703;
	add.s32 	%r785, %r781, 32;
	mul.wide.u32 	%rd102, %r785, 4;
	add.s64 	%rd103, %rd79, %rd102;
	st.shared.u32 	[%rd103], %r707;
	add.s32 	%r786, %r781, 160;
	mul.wide.u32 	%rd104, %r786, 4;
	add.s64 	%rd105, %rd79, %rd104;
	st.shared.u32 	[%rd105], %r715;
	add.s32 	%r787, %r781, 96;
	mul.wide.u32 	%rd106, %r787, 4;
	add.s64 	%rd107, %rd79, %rd106;
	st.shared.u32 	[%rd107], %r711;
	add.s32 	%r788, %r781, 224;
	mul.wide.u32 	%rd108, %r788, 4;
	add.s64 	%rd109, %rd79, %rd108;
	st.shared.u32 	[%rd109], %r719;
	bar.sync 	0;
	add.s32 	%r789, %r237, %r202;
	cvt.u16.u32 	%rs50, %r789;
	mul.hi.s16 	%rs51, %rs50, 10923;
	shr.u16 	%rs52, %rs51, 15;
	shr.s16 	%rs53, %rs51, 2;
	add.s16 	%rs54, %rs53, %rs52;
	mul.lo.s16 	%rs55, %rs54, 24;
	sub.s16 	%rs56, %rs50, %rs55;
	cvt.s32.s16 	%r238, %rs56;
	add.s32 	%r790, %r5, %r238;
	mul.wide.s32 	%rd110, %r790, 4;
	add.s64 	%rd111, %rd79, %rd110;
	ld.shared.u32 	%r239, [%rd111];
	add.s32 	%r791, %r203, %r238;
	mul.wide.s32 	%rd112, %r791, 4;
	add.s64 	%rd113, %rd79, %rd112;
	ld.shared.u32 	%r240, [%rd113];
	add.s32 	%r792, %r204, %r238;
	mul.wide.u32 	%rd114, %r792, 4;
	add.s64 	%rd115, %rd79, %rd114;
	ld.shared.u32 	%r241, [%rd115];
	add.s32 	%r793, %r205, %r238;
	mul.wide.u32 	%rd116, %r793, 4;
	add.s64 	%rd117, %rd79, %rd116;
	ld.shared.u32 	%r242, [%rd117];
	add.s32 	%r794, %r206, %r238;
	mul.wide.u32 	%rd118, %r794, 4;
	add.s64 	%rd119, %rd79, %rd118;
	ld.shared.u32 	%r243, [%rd119];
	add.s32 	%r795, %r207, %r238;
	mul.wide.u32 	%rd120, %r795, 4;
	add.s64 	%rd121, %rd79, %rd120;
	ld.shared.u32 	%r244, [%rd121];
	add.s32 	%r796, %r208, %r238;
	mul.wide.u32 	%rd122, %r796, 4;
	add.s64 	%rd123, %rd79, %rd122;
	ld.shared.u32 	%r245, [%rd123];
	add.s32 	%r797, %r209, %r238;
	mul.wide.u32 	%rd124, %r797, 4;
	add.s64 	%rd125, %rd79, %rd124;
	ld.shared.u32 	%r246, [%rd125];
	add.s32 	%r798, %r210, %r238;
	mul.wide.u32 	%rd126, %r798, 4;
	add.s64 	%rd127, %rd79, %rd126;
	ld.shared.u32 	%r247, [%rd127];
	add.s32 	%r799, %r211, %r238;
	mul.wide.u32 	%rd128, %r799, 4;
	add.s64 	%rd129, %rd79, %rd128;
	ld.shared.u32 	%r248, [%rd129];
	add.s32 	%r800, %r212, %r238;
	mul.wide.s32 	%rd130, %r800, 4;
	add.s64 	%rd131, %rd79, %rd130;
	ld.shared.u32 	%r249, [%rd131];
	bar.sync 	0;
	shfl.sync.idx.b32	%r250, %r191, 0, 31, -1;
	shfl.sync.idx.b32	%r251, %r191, 1, 31, -1;
	shfl.sync.idx.b32	%r252, %r191, 2, 31, -1;
	shfl.sync.idx.b32	%r253, %r191, 3, 31, -1;
	shfl.sync.idx.b32	%r254, %r191, 4, 31, -1;
	shfl.sync.idx.b32	%r255, %r191, 5, 31, -1;
	shfl.sync.idx.b32	%r256, %r191, 6, 31, -1;
	shfl.sync.idx.b32	%r257, %r191, 7, 31, -1;
	shfl.sync.idx.b32	%r258, %r191, 8, 31, -1;
	shfl.sync.idx.b32	%r259, %r191, 9, 31, -1;
	shfl.sync.idx.b32	%r260, %r191, 10, 31, -1;
	shfl.sync.idx.b32	%r261, %r191, 11, 31, -1;
	shfl.sync.idx.b32	%r262, %r191, 12, 31, -1;
	shfl.sync.idx.b32	%r263, %r191, 13, 31, -1;
	shfl.sync.idx.b32	%r264, %r191, 14, 31, -1;
	shfl.sync.idx.b32	%r265, %r191, 15, 31, -1;
	setp.eq.s32 	%p262, %r250, 999999999;
	@%p262 bra 	$L__BB0_145;
// %bb.200:                             // %oksrem2312
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r801, %r250, %r238;
	mul.wide.s32 	%rd132, %r801, 4;
	add.s64 	%rd134, %rd79, %rd132;
	st.shared.u32 	[%rd134], %r239;
	setp.eq.s32 	%p263, %r251, 999999999;
	@%p263 bra 	$L__BB0_146;
// %bb.201:                             // %oksrem2380
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r802, %r251, %r238;
	mul.wide.s32 	%rd135, %r802, 4;
	add.s64 	%rd137, %rd79, %rd135;
	st.shared.u32 	[%rd137], %r240;
	setp.eq.s32 	%p264, %r252, 999999999;
	@%p264 bra 	$L__BB0_147;
// %bb.202:                             // %oksrem2448
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r803, %r252, %r238;
	mul.wide.s32 	%rd138, %r803, 4;
	add.s64 	%rd140, %rd79, %rd138;
	st.shared.u32 	[%rd140], %r241;
	setp.eq.s32 	%p265, %r253, 999999999;
	@%p265 bra 	$L__BB0_148;
// %bb.203:                             // %oksrem2516
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r804, %r253, %r238;
	mul.wide.s32 	%rd141, %r804, 4;
	add.s64 	%rd143, %rd79, %rd141;
	st.shared.u32 	[%rd143], %r242;
	setp.eq.s32 	%p266, %r254, 999999999;
	@%p266 bra 	$L__BB0_149;
// %bb.204:                             // %oksrem2584
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r805, %r254, %r238;
	mul.wide.s32 	%rd144, %r805, 4;
	add.s64 	%rd146, %rd79, %rd144;
	st.shared.u32 	[%rd146], %r243;
	setp.eq.s32 	%p267, %r255, 999999999;
	@%p267 bra 	$L__BB0_150;
// %bb.205:                             // %oksrem2652
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r806, %r255, %r238;
	mul.wide.s32 	%rd147, %r806, 4;
	add.s64 	%rd149, %rd79, %rd147;
	st.shared.u32 	[%rd149], %r244;
	setp.eq.s32 	%p268, %r256, 999999999;
	@%p268 bra 	$L__BB0_151;
// %bb.206:                             // %oksrem2720
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r807, %r256, %r238;
	mul.wide.s32 	%rd150, %r807, 4;
	add.s64 	%rd152, %rd79, %rd150;
	st.shared.u32 	[%rd152], %r245;
	setp.eq.s32 	%p269, %r257, 999999999;
	@%p269 bra 	$L__BB0_152;
// %bb.207:                             // %oksrem2788
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r808, %r257, %r238;
	mul.wide.s32 	%rd153, %r808, 4;
	add.s64 	%rd155, %rd79, %rd153;
	st.shared.u32 	[%rd155], %r246;
	setp.eq.s32 	%p270, %r258, 999999999;
	@%p270 bra 	$L__BB0_153;
// %bb.208:                             // %oksrem2856
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r809, %r258, %r238;
	mul.wide.s32 	%rd156, %r809, 4;
	add.s64 	%rd158, %rd79, %rd156;
	st.shared.u32 	[%rd158], %r247;
	setp.eq.s32 	%p271, %r259, 999999999;
	@%p271 bra 	$L__BB0_154;
// %bb.209:                             // %oksrem2924
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r810, %r259, %r238;
	mul.wide.s32 	%rd159, %r810, 4;
	add.s64 	%rd161, %rd79, %rd159;
	st.shared.u32 	[%rd161], %r248;
	setp.eq.s32 	%p272, %r260, 999999999;
	@%p272 bra 	$L__BB0_155;
// %bb.210:                             // %oksrem2993
                                        //   in Loop: Header=BB0_198 Depth=1
	setp.gt.u32 	%p273, %r4, 3;
	selp.b32 	%r811, 0, %r249, %p273;
	add.s32 	%r812, %r260, %r238;
	mul.wide.s32 	%rd162, %r812, 4;
	add.s64 	%rd164, %rd79, %rd162;
	st.shared.u32 	[%rd164], %r811;
	setp.eq.s32 	%p274, %r261, 999999999;
	@%p274 bra 	$L__BB0_156;
// %bb.211:                             // %oksrem3061
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r813, %r261, %r238;
	mul.wide.s32 	%rd165, %r813, 4;
	add.s64 	%rd167, %rd79, %rd165;
	mov.u32 	%r814, 0;
	st.shared.u32 	[%rd167], %r814;
	setp.eq.s32 	%p275, %r262, 999999999;
	@%p275 bra 	$L__BB0_157;
// %bb.212:                             // %oksrem3128
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r815, %r262, %r238;
	mul.wide.s32 	%rd168, %r815, 4;
	add.s64 	%rd170, %rd79, %rd168;
	st.shared.u32 	[%rd170], %r814;
	setp.eq.s32 	%p276, %r263, 999999999;
	@%p276 bra 	$L__BB0_158;
// %bb.213:                             // %oksrem3195
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r817, %r263, %r238;
	mul.wide.s32 	%rd171, %r817, 4;
	add.s64 	%rd173, %rd79, %rd171;
	st.shared.u32 	[%rd173], %r814;
	setp.eq.s32 	%p277, %r264, 999999999;
	@%p277 bra 	$L__BB0_159;
// %bb.214:                             // %oksrem3262
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r819, %r264, %r238;
	mul.wide.s32 	%rd174, %r819, 4;
	add.s64 	%rd176, %rd79, %rd174;
	st.shared.u32 	[%rd176], %r814;
	setp.eq.s32 	%p278, %r265, 999999999;
	@%p278 bra 	$L__BB0_160;
// %bb.215:                             // %oksrem3329
                                        //   in Loop: Header=BB0_198 Depth=1
	setp.eq.s32 	%p279, %r193, 3;
	add.s32 	%r822, %r265, %r238;
	mul.wide.s32 	%rd177, %r822, 4;
	add.s64 	%rd179, %rd79, %rd177;
	st.shared.u32 	[%rd179], %r814;
	bar.sync 	0;
	mov.u32 	%r92, %r814;
	mov.u32 	%r93, %r814;
	mov.u32 	%r94, %r814;
	mov.u32 	%r95, %r814;
	mov.u32 	%r96, %r814;
	mov.u32 	%r97, %r814;
	mov.u32 	%r98, %r814;
	mov.u32 	%r99, %r814;
	mov.u32 	%r100, %r814;
	mov.u32 	%r101, %r814;
	mov.u32 	%r102, %r814;
	mov.u32 	%r103, %r814;
	mov.u32 	%r104, %r814;
	mov.u32 	%r105, %r814;
	mov.u32 	%r106, %r814;
	mov.u32 	%r107, %r814;
	@%p279 bra 	$L__BB0_161;
// %bb.216:                             // %oksrem3390
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r266, %r237, %r213;
	ld.shared.u32 	%r92, [%rd24];
	ld.shared.u32 	%r93, [%rd25];
	ld.shared.u32 	%r94, [%rd26+12];
	ld.shared.u32 	%r95, [%rd27+12];
	ld.shared.u32 	%r96, [%rd26+24];
	ld.shared.u32 	%r97, [%rd27+24];
	ld.shared.u32 	%r98, [%rd26+36];
	ld.shared.u32 	%r99, [%rd27+36];
	add.s32 	%r823, %r266, 12;
	mul.hi.u32 	%r824, %r823, -1431655765;
	shr.u32 	%r825, %r824, 4;
	mul.lo.s32 	%r826, %r825, 24;
	sub.s32 	%r827, %r823, %r826;
	add.s32 	%r828, %r214, %r827;
	mul.wide.u32 	%rd180, %r828, 4;
	add.s64 	%rd182, %rd79, %rd180;
	ld.shared.u32 	%r100, [%rd182];
	add.s32 	%r829, %r215, %r827;
	mul.wide.u32 	%rd183, %r829, 4;
	add.s64 	%rd184, %rd79, %rd183;
	ld.shared.u32 	%r101, [%rd184];
	ld.shared.u32 	%r102, [%rd26+60];
	ld.shared.u32 	%r103, [%rd27+60];
	cvt.u16.u32 	%rs57, %r266;
	add.s16 	%rs58, %rs57, 18;
	mul.hi.s16 	%rs59, %rs58, 10923;
	shr.u16 	%rs60, %rs59, 15;
	shr.s16 	%rs61, %rs59, 2;
	add.s16 	%rs62, %rs61, %rs60;
	mul.lo.s16 	%rs63, %rs62, 24;
	sub.s16 	%rs64, %rs58, %rs63;
	cvt.s32.s16 	%r830, %rs64;
	add.s32 	%r831, %r214, %r830;
	mul.wide.s32 	%rd185, %r831, 4;
	add.s64 	%rd186, %rd79, %rd185;
	ld.shared.u32 	%r104, [%rd186];
	add.s32 	%r832, %r215, %r830;
	mul.wide.u32 	%rd187, %r832, 4;
	add.s64 	%rd188, %rd79, %rd187;
	ld.shared.u32 	%r105, [%rd188];
	add.s16 	%rs65, %rs57, 21;
	mul.hi.s16 	%rs66, %rs65, 10923;
	shr.u16 	%rs67, %rs66, 15;
	shr.s16 	%rs68, %rs66, 2;
	add.s16 	%rs69, %rs68, %rs67;
	mul.lo.s16 	%rs70, %rs69, 24;
	sub.s16 	%rs71, %rs65, %rs70;
	cvt.s32.s16 	%r833, %rs71;
	add.s32 	%r834, %r214, %r833;
	mul.wide.s32 	%rd189, %r834, 4;
	add.s64 	%rd190, %rd79, %rd189;
	ld.shared.u32 	%r106, [%rd190];
	add.s32 	%r835, %r215, %r833;
	mul.wide.u32 	%rd191, %r835, 4;
	add.s64 	%rd192, %rd79, %rd191;
	ld.shared.u32 	%r107, [%rd192];
$L__BB0_161:                            // %L10559
                                        //   in Loop: Header=BB0_198 Depth=1
	bar.sync 	0;
	mov.u16 	%rs3, %rs2;
	mov.u32 	%r111, %r814;
	bra.uni 	$L__BB0_162;
$L__BB0_164:                            // %L25428
                                        //   in Loop: Header=BB0_162 Depth=2
	bar.sync 	0;
	add.s32 	%r111, %r111, 6;
	add.s16 	%rs3, %rs3, 6;
	setp.ne.s32 	%p290, %r111, 24;
	@%p290 bra 	$L__BB0_162;
	bra.uni 	$L__BB0_165;
$L__BB0_162:                            // %L10577
                                        //   Parent Loop BB0_198 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p280, %r111, 0;
	selp.b32 	%r1229, %r92, 0, %p280;
	setp.eq.s32 	%p281, %r111, 6;
	selp.b32 	%r1230, %r96, %r1229, %p281;
	setp.eq.s32 	%p282, %r111, 12;
	selp.b32 	%r1231, %r100, %r1230, %p282;
	setp.eq.s32 	%p283, %r111, 18;
	selp.b32 	%r841, %r104, %r1231, %p283;
	selp.b32 	%r1232, %r93, 0, %p280;
	selp.b32 	%r1233, %r97, %r1232, %p281;
	selp.b32 	%r1234, %r101, %r1233, %p282;
	selp.b32 	%r887, %r105, %r1234, %p283;
	selp.b32 	%r1235, %r94, 0, %p280;
	selp.b32 	%r1236, %r98, %r1235, %p281;
	selp.b32 	%r1237, %r102, %r1236, %p282;
	selp.b32 	%r933, %r106, %r1237, %p283;
	selp.b32 	%r1238, %r95, 0, %p280;
	selp.b32 	%r1239, %r99, %r1238, %p281;
	selp.b32 	%r1240, %r103, %r1239, %p282;
	selp.b32 	%r979, %r107, %r1240, %p283;
	mov.u16 	%rs109, 25600;
	// begin inline asm
	mov.b32 %r842, {%rs109, %rs109};
	// end inline asm
	mov.u16 	%rs111, 21504;
	// begin inline asm
	mov.b32 %r853, {%rs111, %rs111};
	// end inline asm
	mov.u32 	%r978, 983055;
	// begin inline asm
	lop3.b32 %r839, %r978, %r841, %r842, 202;
	// end inline asm
	mov.u16 	%rs115, 18432;
	// begin inline asm
	mov.b32 %r843, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r844, %r842, %r843;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r847, %r839, %r844;
	// end inline asm
	mov.u32 	%r989, 15728880;
	// begin inline asm
	lop3.b32 %r850, %r989, %r841, %r853, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r854, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r855, %r853, %r854;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r858, %r850, %r855;
	// end inline asm
	// begin inline asm
	mov.b32 %r888, {%rs109, %rs109};
	// end inline asm
	// begin inline asm
	mov.b32 %r899, {%rs111, %rs111};
	// end inline asm
	// begin inline asm
	lop3.b32 %r885, %r978, %r887, %r888, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r889, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r890, %r888, %r889;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r893, %r885, %r890;
	// end inline asm
	// begin inline asm
	lop3.b32 %r896, %r989, %r887, %r899, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r900, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r901, %r899, %r900;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r904, %r896, %r901;
	// end inline asm
	// begin inline asm
	mov.b32 %r934, {%rs109, %rs109};
	// end inline asm
	// begin inline asm
	mov.b32 %r945, {%rs111, %rs111};
	// end inline asm
	// begin inline asm
	lop3.b32 %r931, %r978, %r933, %r934, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r935, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r936, %r934, %r935;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r939, %r931, %r936;
	// end inline asm
	// begin inline asm
	lop3.b32 %r942, %r989, %r933, %r945, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r946, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r947, %r945, %r946;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r950, %r942, %r947;
	// end inline asm
	// begin inline asm
	mov.b32 %r980, {%rs109, %rs109};
	// end inline asm
	// begin inline asm
	mov.b32 %r991, {%rs111, %rs111};
	// end inline asm
	// begin inline asm
	lop3.b32 %r977, %r978, %r979, %r980, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r981, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r982, %r980, %r981;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r985, %r977, %r982;
	// end inline asm
	// begin inline asm
	lop3.b32 %r988, %r989, %r979, %r991, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r992, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r993, %r991, %r992;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r996, %r988, %r993;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r194;
    mov.b32 {%r2re, %r2im}, %r858;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1021, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r195;
    mov.b32 {%r2re, %r2im}, %r904;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1024, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r196;
    mov.b32 {%r2re, %r2im}, %r847;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1027, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r197;
    mov.b32 {%r2re, %r2im}, %r893;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1030, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r194;
    mov.b32 {%r2re, %r2im}, %r950;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1033, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r195;
    mov.b32 {%r2re, %r2im}, %r996;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1036, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r196;
    mov.b32 {%r2re, %r2im}, %r939;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1039, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r197;
    mov.b32 {%r2re, %r2im}, %r985;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1042, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1045, %r1046}, {%r335, %r338}, {%r1021}, {%r814, %r814};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1052, %r1053}, {%r335, %r338}, {%r1024}, {%r814, %r814};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1059, %r1060}, {%r335, %r338}, {%r1027}, {%r814, %r814};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1066, %r1067}, {%r335, %r338}, {%r1030}, {%r814, %r814};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1073, %r1074}, {%r335, %r338}, {%r1033}, {%r814, %r814};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1080, %r1081}, {%r335, %r338}, {%r1036}, {%r814, %r814};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1087, %r1088}, {%r335, %r338}, {%r1039}, {%r814, %r814};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1094, %r1095}, {%r335, %r338}, {%r1042}, {%r814, %r814};
	// end inline asm
	@%p1 bra 	$L__BB0_217;
	bra.uni 	$L__BB0_163;
$L__BB0_217:                            // %pass4759
                                        //   in Loop: Header=BB0_162 Depth=2
	// begin inline asm
	neg.f16x2 %r1101, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1103, %r1101, %r1046;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1106, %r387, %r1045, %r1103;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1110, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1112, %r1110, %r1053;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1115, %r387, %r1052, %r1112;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1119, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1121, %r1119, %r1060;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1124, %r387, %r1059, %r1121;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1128, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1130, %r1128, %r1067;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1133, %r387, %r1066, %r1130;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1137, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1139, %r1137, %r1074;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1142, %r387, %r1073, %r1139;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1146, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1148, %r1146, %r1081;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1151, %r387, %r1080, %r1148;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1155, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1157, %r1155, %r1088;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1160, %r387, %r1087, %r1157;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1164, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1166, %r1164, %r1095;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1169, %r387, %r1094, %r1166;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1173, %r390, %r1045;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1176, %r387, %r1046, %r1173;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1180, %r390, %r1052;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1183, %r387, %r1053, %r1180;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1187, %r390, %r1059;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1190, %r387, %r1060, %r1187;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1194, %r390, %r1066;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1197, %r387, %r1067, %r1194;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1201, %r390, %r1073;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1204, %r387, %r1074, %r1201;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1208, %r390, %r1080;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1211, %r387, %r1081, %r1208;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1215, %r390, %r1087;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1218, %r387, %r1088, %r1215;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1222, %r390, %r1094;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1225, %r387, %r1095, %r1222;
	// end inline asm
	setp.gt.u32 	%p284, %r313, 11;
	mov.u32 	%r1311, 0;
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1314, %r1315}, {%r431, %r434}, {%r1106, %r1176}, {%r1311, %r1311}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1322, %r1323}, {%r431, %r434}, {%r1115, %r1183}, {%r1311, %r1311}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1330, %r1331}, {%r431, %r434}, {%r1124, %r1190}, {%r1311, %r1311}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1338, %r1339}, {%r431, %r434}, {%r1133, %r1197}, {%r1311, %r1311}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1346, %r1347}, {%r431, %r434}, {%r1142, %r1204}, {%r1311, %r1311}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1354, %r1355}, {%r431, %r434}, {%r1151, %r1211}, {%r1311, %r1311}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1362, %r1363}, {%r431, %r434}, {%r1160, %r1218}, {%r1311, %r1311}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1370, %r1371}, {%r431, %r434}, {%r1169, %r1225}, {%r1311, %r1311}, %r233, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r283, %r1314, %r1315, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r284, %r1314, %r1315, %r722;
	// end inline asm
	// begin inline asm
	prmt.b32 %r285, %r1322, %r1323, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r286, %r1322, %r1323, %r722;
	// end inline asm
	// begin inline asm
	prmt.b32 %r287, %r1330, %r1331, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r288, %r1330, %r1331, %r722;
	// end inline asm
	// begin inline asm
	prmt.b32 %r289, %r1338, %r1339, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r290, %r1338, %r1339, %r722;
	// end inline asm
	// begin inline asm
	prmt.b32 %r291, %r1346, %r1347, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r292, %r1346, %r1347, %r722;
	// end inline asm
	// begin inline asm
	prmt.b32 %r293, %r1354, %r1355, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r294, %r1354, %r1355, %r722;
	// end inline asm
	// begin inline asm
	prmt.b32 %r295, %r1362, %r1363, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r296, %r1362, %r1363, %r722;
	// end inline asm
	// begin inline asm
	prmt.b32 %r297, %r1370, %r1371, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r298, %r1370, %r1371, %r722;
	// end inline asm
	add.s16 	%rs120, %rs9, %rs3;
	mul.hi.s16 	%rs121, %rs120, 10923;
	shr.u16 	%rs122, %rs121, 15;
	add.s16 	%rs123, %rs121, %rs122;
	mul.lo.s16 	%rs124, %rs123, 6;
	sub.s16 	%rs125, %rs120, %rs124;
	mul.wide.s16 	%r1377, %rs125, 16;
	add.s32 	%r1378, %r221, %r1377;
	mul.wide.s32 	%rd195, %r1378, 4;
	add.s64 	%rd28, %rd79, %rd195;
	st.shared.u32 	[%rd28], %r283;
	add.s32 	%r1379, %r223, %r1377;
	mul.wide.u32 	%rd197, %r1379, 4;
	add.s64 	%rd29, %rd79, %rd197;
	st.shared.u32 	[%rd29], %r284;
	add.s32 	%r1380, %r225, %r1377;
	mul.wide.s32 	%rd198, %r1380, 4;
	add.s64 	%rd30, %rd79, %rd198;
	st.shared.u32 	[%rd30], %r285;
	add.s32 	%r1381, %r226, %r1377;
	mul.wide.u32 	%rd199, %r1381, 4;
	add.s64 	%rd31, %rd79, %rd199;
	st.shared.u32 	[%rd31], %r286;
	cvt.s64.s32 	%rd200, %r1377;
	cvt.u64.u32 	%rd201, %r220;
	cvt.u64.u32 	%rd202, %r219;
	cvt.u64.u32 	%rd203, %r218;
	cvt.u64.u32 	%rd204, %r216;
	cvt.u64.u32 	%rd205, %r217;
	add.s64 	%rd206, %rd205, %rd204;
	add.s64 	%rd207, %rd206, %rd203;
	add.s64 	%rd208, %rd207, %rd202;
	add.s64 	%rd32, %rd208, %rd201;
	add.s64 	%rd209, %rd32, %rd200;
	shl.b64 	%rd210, %rd209, 2;
	add.s64 	%rd33, %rd79, %rd210;
	st.shared.u32 	[%rd33+32], %r287;
	add.s32 	%r1382, %r227, %r1377;
	mul.wide.u32 	%rd211, %r1382, 4;
	add.s64 	%rd34, %rd79, %rd211;
	st.shared.u32 	[%rd34], %r288;
	cvt.u64.u32 	%rd212, %r224;
	add.s64 	%rd35, %rd208, %rd212;
	add.s64 	%rd213, %rd35, %rd200;
	shl.b64 	%rd214, %rd213, 2;
	add.s64 	%rd36, %rd79, %rd214;
	st.shared.u32 	[%rd36+32], %r289;
	add.s32 	%r1383, %r228, %r1377;
	mul.wide.u32 	%rd215, %r1383, 4;
	add.s64 	%rd37, %rd79, %rd215;
	st.shared.u32 	[%rd37], %r290;
	add.s32 	%r1384, %r87, %r111;
	mul.hi.u32 	%r1385, %r1384, -1431655765;
	shr.u32 	%r1386, %r1385, 2;
	mul.lo.s32 	%r1387, %r1386, 6;
	sub.s32 	%r1388, %r1384, %r1387;
	shl.b32 	%r1389, %r1388, 4;
	add.s32 	%r1390, %r221, %r1389;
	mul.wide.u32 	%rd216, %r1390, 4;
	add.s64 	%rd38, %rd79, %rd216;
	st.shared.u32 	[%rd38], %r291;
	add.s32 	%r1391, %r223, %r1389;
	mul.wide.u32 	%rd217, %r1391, 4;
	add.s64 	%rd39, %rd79, %rd217;
	st.shared.u32 	[%rd39], %r292;
	add.s32 	%r1392, %r225, %r1389;
	mul.wide.u32 	%rd218, %r1392, 4;
	add.s64 	%rd40, %rd79, %rd218;
	st.shared.u32 	[%rd40], %r293;
	add.s32 	%r1393, %r226, %r1389;
	mul.wide.u32 	%rd219, %r1393, 4;
	add.s64 	%rd41, %rd79, %rd219;
	st.shared.u32 	[%rd41], %r294;
	cvt.u64.u32 	%rd220, %r1389;
	add.s64 	%rd221, %rd32, %rd220;
	shl.b64 	%rd222, %rd221, 2;
	add.s64 	%rd42, %rd79, %rd222;
	st.shared.u32 	[%rd42+32], %r295;
	cvt.u64.u32 	%rd223, %r222;
	add.s64 	%rd224, %rd205, %rd223;
	add.s64 	%rd225, %rd224, %rd203;
	add.s64 	%rd226, %rd225, %rd202;
	add.s64 	%rd227, %rd226, %rd201;
	add.s64 	%rd228, %rd227, %rd220;
	shl.b64 	%rd229, %rd228, 2;
	add.s64 	%rd43, %rd79, %rd229;
	st.shared.u32 	[%rd43+32], %r296;
	add.s64 	%rd230, %rd35, %rd220;
	shl.b64 	%rd231, %rd230, 2;
	add.s64 	%rd44, %rd79, %rd231;
	st.shared.u32 	[%rd44+32], %r297;
	add.s64 	%rd232, %rd226, %rd212;
	add.s64 	%rd233, %rd232, %rd220;
	shl.b64 	%rd234, %rd233, 2;
	add.s64 	%rd45, %rd79, %rd234;
	st.shared.u32 	[%rd45+32], %r298;
	@%p284 bra 	$L__BB0_219;
// %bb.218:                             // %oksrem7091
                                        //   in Loop: Header=BB0_162 Depth=2
	st.shared.u32 	[%rd28], %r283;
	st.shared.u32 	[%rd29], %r284;
	st.shared.u32 	[%rd30], %r285;
	st.shared.u32 	[%rd31], %r286;
	st.shared.u32 	[%rd33+32], %r287;
	st.shared.u32 	[%rd34], %r288;
	st.shared.u32 	[%rd36+32], %r289;
	st.shared.u32 	[%rd37], %r290;
	st.shared.u32 	[%rd38], %r291;
	st.shared.u32 	[%rd39], %r292;
	st.shared.u32 	[%rd40], %r293;
	st.shared.u32 	[%rd41], %r294;
	st.shared.u32 	[%rd42+32], %r295;
	st.shared.u32 	[%rd43+32], %r296;
	st.shared.u32 	[%rd44+32], %r297;
	st.shared.u32 	[%rd45+32], %r298;
$L__BB0_219:                            // %L19974
                                        //   in Loop: Header=BB0_162 Depth=2
	bar.sync 	0;
	mul.hi.s16 	%rs126, %rs3, 10923;
	shr.u16 	%rs127, %rs126, 15;
	add.s16 	%rs128, %rs126, %rs127;
	mul.lo.s16 	%rs129, %rs128, 6;
	sub.s16 	%rs130, %rs3, %rs129;
	mul.wide.s16 	%r1440, %rs130, 16;
	add.s32 	%r1441, %r229, %r1440;
	mul.wide.s32 	%rd235, %r1441, 4;
	add.s64 	%rd237, %rd79, %rd235;
	ld.shared.u32 	%r1398, [%rd237];
	add.s32 	%r1442, %r230, %r1440;
	mul.wide.s32 	%rd238, %r1442, 4;
	add.s64 	%rd239, %rd79, %rd238;
	ld.shared.u32 	%r1405, [%rd239];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1394, %r1395}, {%r443, %r446}, {%r1398}, {%r1311, %r1311};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1401, %r1402}, {%r443, %r446}, {%r1405}, {%r1311, %r1311};
	// end inline asm
	@%p285 bra 	$L__BB0_221;
	bra.uni 	$L__BB0_220;
$L__BB0_221:                            // %pass9528
                                        //   in Loop: Header=BB0_162 Depth=2
	// begin inline asm
	neg.f16x2 %r1408, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1410, %r1408, %r1395;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1413, %r481, %r1394, %r1410;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1417, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1419, %r1417, %r1402;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1422, %r481, %r1401, %r1419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1426, %r484, %r1394;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1429, %r481, %r1395, %r1426;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1433, %r484, %r1401;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1436, %r481, %r1402, %r1433;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1462, %r1465}, {%r527, %r530}, {%r1413, %r1429}, {%r1311, %r1311}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1469, %r1473}, {%r527, %r530}, {%r1422, %r1436}, {%r1311, %r1311}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1461, %r1462, %r1462;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1464, %r1465, %r1465, %r1461;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1468, %r1469, %r1469, %r1464;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1472, %r1473, %r1473, %r1468;
	// end inline asm
	mov.u32 	%r1892, 290787669;
	// begin inline asm
	fma.rn.f16x2 %r1476, %r1892, %r1472, %r110;
	// end inline asm
	add.s32 	%r1895, %r88, %r111;
	add.s32 	%r1896, %r1895, 1;
	mul.hi.u32 	%r1897, %r1896, -1431655765;
	shr.u32 	%r1898, %r1897, 2;
	mul.lo.s32 	%r1899, %r1898, 6;
	sub.s32 	%r1900, %r1896, %r1899;
	shl.b32 	%r1901, %r1900, 4;
	add.s32 	%r1902, %r229, %r1901;
	mul.wide.u32 	%rd242, %r1902, 4;
	add.s64 	%rd244, %rd79, %rd242;
	ld.shared.u32 	%r1484, [%rd244];
	add.s32 	%r1903, %r230, %r1901;
	mul.wide.u32 	%rd245, %r1903, 4;
	add.s64 	%rd246, %rd79, %rd245;
	ld.shared.u32 	%r1491, [%rd246];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1501, %r1498}, {%r443, %r446}, {%r1484}, {%r1311, %r1311};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1510, %r1507}, {%r443, %r446}, {%r1491}, {%r1311, %r1311};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1494, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1496, %r1494, %r1498;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1499, %r481, %r1501, %r1496;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1503, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1505, %r1503, %r1507;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1508, %r481, %r1510, %r1505;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1512, %r484, %r1501;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1515, %r481, %r1498, %r1512;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1519, %r484, %r1510;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1522, %r481, %r1507, %r1519;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1545, %r1548}, {%r527, %r530}, {%r1499, %r1515}, {%r1311, %r1311}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1552, %r1556}, {%r527, %r530}, {%r1508, %r1522}, {%r1311, %r1311}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1544, %r1545, %r1545;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1547, %r1548, %r1548, %r1544;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1551, %r1552, %r1552, %r1547;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1555, %r1556, %r1556, %r1551;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1559, %r1892, %r1555, %r1476;
	// end inline asm
	add.s32 	%r1904, %r1895, 2;
	mul.hi.u32 	%r1905, %r1904, -1431655765;
	shr.u32 	%r1906, %r1905, 2;
	mul.lo.s32 	%r1907, %r1906, 6;
	sub.s32 	%r1908, %r1904, %r1907;
	shl.b32 	%r1909, %r1908, 4;
	add.s32 	%r1910, %r229, %r1909;
	mul.wide.u32 	%rd247, %r1910, 4;
	add.s64 	%rd248, %rd79, %rd247;
	ld.shared.u32 	%r1567, [%rd248];
	add.s32 	%r1911, %r230, %r1909;
	mul.wide.u32 	%rd249, %r1911, 4;
	add.s64 	%rd250, %rd79, %rd249;
	ld.shared.u32 	%r1574, [%rd250];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1584, %r1581}, {%r443, %r446}, {%r1567}, {%r1311, %r1311};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1593, %r1590}, {%r443, %r446}, {%r1574}, {%r1311, %r1311};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1577, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1579, %r1577, %r1581;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1582, %r481, %r1584, %r1579;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1586, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1588, %r1586, %r1590;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1591, %r481, %r1593, %r1588;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1595, %r484, %r1584;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1598, %r481, %r1581, %r1595;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1602, %r484, %r1593;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1605, %r481, %r1590, %r1602;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1628, %r1631}, {%r527, %r530}, {%r1582, %r1598}, {%r1311, %r1311}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1635, %r1639}, {%r527, %r530}, {%r1591, %r1605}, {%r1311, %r1311}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1627, %r1628, %r1628;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1630, %r1631, %r1631, %r1627;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1634, %r1635, %r1635, %r1630;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1638, %r1639, %r1639, %r1634;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1642, %r1892, %r1638, %r1559;
	// end inline asm
	add.s32 	%r1912, %r1895, 3;
	mul.hi.u32 	%r1913, %r1912, -1431655765;
	shr.u32 	%r1914, %r1913, 2;
	mul.lo.s32 	%r1915, %r1914, 6;
	sub.s32 	%r1916, %r1912, %r1915;
	shl.b32 	%r1917, %r1916, 4;
	add.s32 	%r1918, %r229, %r1917;
	mul.wide.u32 	%rd251, %r1918, 4;
	add.s64 	%rd252, %rd79, %rd251;
	ld.shared.u32 	%r1650, [%rd252];
	add.s32 	%r1919, %r230, %r1917;
	mul.wide.u32 	%rd253, %r1919, 4;
	add.s64 	%rd254, %rd79, %rd253;
	ld.shared.u32 	%r1657, [%rd254];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1667, %r1664}, {%r443, %r446}, {%r1650}, {%r1311, %r1311};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1676, %r1673}, {%r443, %r446}, {%r1657}, {%r1311, %r1311};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1660, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1662, %r1660, %r1664;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1665, %r481, %r1667, %r1662;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1669, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1671, %r1669, %r1673;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1674, %r481, %r1676, %r1671;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1678, %r484, %r1667;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1681, %r481, %r1664, %r1678;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1685, %r484, %r1676;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1688, %r481, %r1673, %r1685;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1711, %r1714}, {%r527, %r530}, {%r1665, %r1681}, {%r1311, %r1311}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1718, %r1722}, {%r527, %r530}, {%r1674, %r1688}, {%r1311, %r1311}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1710, %r1711, %r1711;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1713, %r1714, %r1714, %r1710;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1717, %r1718, %r1718, %r1713;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1721, %r1722, %r1722, %r1717;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1725, %r1892, %r1721, %r1642;
	// end inline asm
	add.s32 	%r1920, %r1895, 4;
	mul.hi.u32 	%r1921, %r1920, -1431655765;
	shr.u32 	%r1922, %r1921, 2;
	mul.lo.s32 	%r1923, %r1922, 6;
	sub.s32 	%r1924, %r1920, %r1923;
	shl.b32 	%r1925, %r1924, 4;
	add.s32 	%r1926, %r229, %r1925;
	mul.wide.u32 	%rd255, %r1926, 4;
	add.s64 	%rd256, %rd79, %rd255;
	ld.shared.u32 	%r1733, [%rd256];
	add.s32 	%r1927, %r230, %r1925;
	mul.wide.u32 	%rd257, %r1927, 4;
	add.s64 	%rd258, %rd79, %rd257;
	ld.shared.u32 	%r1740, [%rd258];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1750, %r1747}, {%r443, %r446}, {%r1733}, {%r1311, %r1311};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1759, %r1756}, {%r443, %r446}, {%r1740}, {%r1311, %r1311};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1743, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1745, %r1743, %r1747;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1748, %r481, %r1750, %r1745;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1752, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1754, %r1752, %r1756;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1757, %r481, %r1759, %r1754;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1761, %r484, %r1750;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1764, %r481, %r1747, %r1761;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1768, %r484, %r1759;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1771, %r481, %r1756, %r1768;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1794, %r1797}, {%r527, %r530}, {%r1748, %r1764}, {%r1311, %r1311}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1801, %r1805}, {%r527, %r530}, {%r1757, %r1771}, {%r1311, %r1311}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1793, %r1794, %r1794;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1796, %r1797, %r1797, %r1793;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1800, %r1801, %r1801, %r1796;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1804, %r1805, %r1805, %r1800;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1808, %r1892, %r1804, %r1725;
	// end inline asm
	add.s32 	%r1928, %r1895, 5;
	mul.hi.u32 	%r1929, %r1928, -1431655765;
	shr.u32 	%r1930, %r1929, 2;
	mul.lo.s32 	%r1931, %r1930, 6;
	sub.s32 	%r1932, %r1928, %r1931;
	shl.b32 	%r1933, %r1932, 4;
	add.s32 	%r1934, %r229, %r1933;
	mul.wide.u32 	%rd259, %r1934, 4;
	add.s64 	%rd260, %rd79, %rd259;
	ld.shared.u32 	%r1816, [%rd260];
	add.s32 	%r1935, %r230, %r1933;
	mul.wide.u32 	%rd261, %r1935, 4;
	add.s64 	%rd262, %rd79, %rd261;
	ld.shared.u32 	%r1823, [%rd262];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1833, %r1830}, {%r443, %r446}, {%r1816}, {%r1311, %r1311};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1842, %r1839}, {%r443, %r446}, {%r1823}, {%r1311, %r1311};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1826, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1828, %r1826, %r1830;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1831, %r481, %r1833, %r1828;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1835, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1837, %r1835, %r1839;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1840, %r481, %r1842, %r1837;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1844, %r484, %r1833;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1847, %r481, %r1830, %r1844;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1851, %r484, %r1842;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1854, %r481, %r1839, %r1851;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1877, %r1880}, {%r527, %r530}, {%r1831, %r1847}, {%r1311, %r1311}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1884, %r1888}, {%r527, %r530}, {%r1840, %r1854}, {%r1311, %r1311}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1876, %r1877, %r1877;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1879, %r1880, %r1880, %r1876;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1883, %r1884, %r1884, %r1879;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1887, %r1888, %r1888, %r1883;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r110, %r1892, %r1887, %r1808;
	// end inline asm
	add.s32 	%r108, %r108, 6;
	setp.ne.s32 	%p286, %r108, 192;
	@%p286 bra 	$L__BB0_164;
// %bb.222:                             // %pass11512
                                        //   in Loop: Header=BB0_162 Depth=2
	mul.lo.s32 	%r1937, %r109, 786432;
	or.b32  	%r1938, %r1937, %r2;
	add.s32 	%r1939, %r1938, %r231;
	or.b32  	%r1940, %r1939, %r232;
	cvt.u64.u32 	%rd263, %r1940;
	add.s64 	%rd264, %rd263, %rd23;
	mul.hi.s64 	%rd265, %rd264, 3074457345618258603;
	shr.u64 	%rd266, %rd265, 63;
	shr.s64 	%rd267, %rd265, 27;
	add.s64 	%rd268, %rd267, %rd266;
	setp.lt.s64 	%p287, %rd264, 0;
	mul.lo.s64 	%rd269, %rd268, 805306368;
	setp.ne.s64 	%p288, %rd269, %rd264;
	and.pred  	%p289, %p287, %p288;
	selp.s64 	%rd270, -1, 0, %p289;
	add.s64 	%rd271, %rd268, %rd270;
	mul.lo.s64 	%rd272, %rd271, -805306368;
	add.s64 	%rd273, %rd272, %rd264;
	shl.b64 	%rd274, %rd273, 2;
	add.s64 	%rd275, %rd4, %rd274;
	st.global.u32 	[%rd275], %r110;
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r108, 0;
	mov.u32 	%r110, %r108;
	bra.uni 	$L__BB0_164;
$L__BB0_165:                            // %L25449.preheader
                                        //   in Loop: Header=BB0_198 Depth=1
	mov.u16 	%rs231, %rs1;
	mov.u32 	%r3087, %r1311;
	bra.uni 	$L__BB0_166;
$L__BB0_167:                            // %L34846
                                        //   in Loop: Header=BB0_166 Depth=2
	bar.sync 	0;
	add.s16 	%rs193, %rs231, -5;
	mul.hi.s16 	%rs194, %rs193, 10923;
	shr.u16 	%rs195, %rs194, 15;
	add.s16 	%rs196, %rs194, %rs195;
	mul.lo.s16 	%rs197, %rs196, 6;
	sub.s16 	%rs198, %rs193, %rs197;
	mul.wide.s16 	%r2998, %rs198, 16;
	add.s32 	%r2999, %r229, %r2998;
	mul.wide.s32 	%rd299, %r2999, 4;
	add.s64 	%rd301, %rd79, %rd299;
	ld.shared.u32 	%r2504, [%rd301];
	add.s32 	%r3000, %r230, %r2998;
	mul.wide.s32 	%rd302, %r3000, 4;
	add.s64 	%rd303, %rd79, %rd302;
	ld.shared.u32 	%r2511, [%rd303];
	mov.u32 	%r2977, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2521, %r2518}, {%r443, %r446}, {%r2504}, {%r2977, %r2977};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2530, %r2527}, {%r443, %r446}, {%r2511}, {%r2977, %r2977};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2514, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2516, %r2514, %r2518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2519, %r481, %r2521, %r2516;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2523, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2525, %r2523, %r2527;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2528, %r481, %r2530, %r2525;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2532, %r484, %r2521;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2535, %r481, %r2518, %r2532;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2539, %r484, %r2530;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2542, %r481, %r2527, %r2539;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2565, %r2568}, {%r527, %r530}, {%r2519, %r2535}, {%r2977, %r2977}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2572, %r2576}, {%r527, %r530}, {%r2528, %r2542}, {%r2977, %r2977}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2564, %r2565, %r2565;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2567, %r2568, %r2568, %r2564;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2571, %r2572, %r2572, %r2567;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2575, %r2576, %r2576, %r2571;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2579, %r1892, %r2575, %r110;
	// end inline asm
	add.s16 	%rs199, %rs231, -4;
	mul.hi.s16 	%rs200, %rs199, 10923;
	shr.u16 	%rs201, %rs200, 15;
	add.s16 	%rs202, %rs200, %rs201;
	mul.lo.s16 	%rs203, %rs202, 6;
	sub.s16 	%rs204, %rs199, %rs203;
	mul.wide.s16 	%r3001, %rs204, 16;
	add.s32 	%r3002, %r229, %r3001;
	mul.wide.s32 	%rd304, %r3002, 4;
	add.s64 	%rd305, %rd79, %rd304;
	ld.shared.u32 	%r2587, [%rd305];
	add.s32 	%r3003, %r230, %r3001;
	mul.wide.s32 	%rd306, %r3003, 4;
	add.s64 	%rd307, %rd79, %rd306;
	ld.shared.u32 	%r2594, [%rd307];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2604, %r2601}, {%r443, %r446}, {%r2587}, {%r2977, %r2977};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2613, %r2610}, {%r443, %r446}, {%r2594}, {%r2977, %r2977};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2597, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2599, %r2597, %r2601;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2602, %r481, %r2604, %r2599;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2606, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2608, %r2606, %r2610;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2611, %r481, %r2613, %r2608;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2615, %r484, %r2604;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2618, %r481, %r2601, %r2615;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2622, %r484, %r2613;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2625, %r481, %r2610, %r2622;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2648, %r2651}, {%r527, %r530}, {%r2602, %r2618}, {%r2977, %r2977}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2655, %r2659}, {%r527, %r530}, {%r2611, %r2625}, {%r2977, %r2977}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2647, %r2648, %r2648;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2650, %r2651, %r2651, %r2647;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2654, %r2655, %r2655, %r2650;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2658, %r2659, %r2659, %r2654;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2662, %r1892, %r2658, %r2579;
	// end inline asm
	add.s16 	%rs205, %rs231, -3;
	mul.hi.s16 	%rs206, %rs205, 10923;
	shr.u16 	%rs207, %rs206, 15;
	add.s16 	%rs208, %rs206, %rs207;
	mul.lo.s16 	%rs209, %rs208, 6;
	sub.s16 	%rs210, %rs205, %rs209;
	mul.wide.s16 	%r3004, %rs210, 16;
	add.s32 	%r3005, %r229, %r3004;
	mul.wide.s32 	%rd308, %r3005, 4;
	add.s64 	%rd309, %rd79, %rd308;
	ld.shared.u32 	%r2670, [%rd309];
	add.s32 	%r3006, %r230, %r3004;
	mul.wide.s32 	%rd310, %r3006, 4;
	add.s64 	%rd311, %rd79, %rd310;
	ld.shared.u32 	%r2677, [%rd311];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2687, %r2684}, {%r443, %r446}, {%r2670}, {%r2977, %r2977};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2696, %r2693}, {%r443, %r446}, {%r2677}, {%r2977, %r2977};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2680, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2682, %r2680, %r2684;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2685, %r481, %r2687, %r2682;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2689, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2691, %r2689, %r2693;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2694, %r481, %r2696, %r2691;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2698, %r484, %r2687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2701, %r481, %r2684, %r2698;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2705, %r484, %r2696;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2708, %r481, %r2693, %r2705;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2731, %r2734}, {%r527, %r530}, {%r2685, %r2701}, {%r2977, %r2977}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2738, %r2742}, {%r527, %r530}, {%r2694, %r2708}, {%r2977, %r2977}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2730, %r2731, %r2731;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2733, %r2734, %r2734, %r2730;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2737, %r2738, %r2738, %r2733;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2741, %r2742, %r2742, %r2737;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2745, %r1892, %r2741, %r2662;
	// end inline asm
	add.s16 	%rs211, %rs231, -2;
	mul.hi.s16 	%rs212, %rs211, 10923;
	shr.u16 	%rs213, %rs212, 15;
	add.s16 	%rs214, %rs212, %rs213;
	mul.lo.s16 	%rs215, %rs214, 6;
	sub.s16 	%rs216, %rs211, %rs215;
	mul.wide.s16 	%r3007, %rs216, 16;
	add.s32 	%r3008, %r229, %r3007;
	mul.wide.s32 	%rd312, %r3008, 4;
	add.s64 	%rd313, %rd79, %rd312;
	ld.shared.u32 	%r2753, [%rd313];
	add.s32 	%r3009, %r230, %r3007;
	mul.wide.s32 	%rd314, %r3009, 4;
	add.s64 	%rd315, %rd79, %rd314;
	ld.shared.u32 	%r2760, [%rd315];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2770, %r2767}, {%r443, %r446}, {%r2753}, {%r2977, %r2977};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2779, %r2776}, {%r443, %r446}, {%r2760}, {%r2977, %r2977};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2763, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2765, %r2763, %r2767;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2768, %r481, %r2770, %r2765;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2772, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2774, %r2772, %r2776;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2777, %r481, %r2779, %r2774;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2781, %r484, %r2770;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2784, %r481, %r2767, %r2781;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2788, %r484, %r2779;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2791, %r481, %r2776, %r2788;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2814, %r2817}, {%r527, %r530}, {%r2768, %r2784}, {%r2977, %r2977}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2821, %r2825}, {%r527, %r530}, {%r2777, %r2791}, {%r2977, %r2977}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2813, %r2814, %r2814;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2816, %r2817, %r2817, %r2813;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2820, %r2821, %r2821, %r2816;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2824, %r2825, %r2825, %r2820;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2828, %r1892, %r2824, %r2745;
	// end inline asm
	add.s16 	%rs217, %rs231, -1;
	mul.hi.s16 	%rs218, %rs217, 10923;
	shr.u16 	%rs219, %rs218, 15;
	add.s16 	%rs220, %rs218, %rs219;
	mul.lo.s16 	%rs221, %rs220, 6;
	sub.s16 	%rs222, %rs217, %rs221;
	mul.wide.s16 	%r3010, %rs222, 16;
	add.s32 	%r3011, %r229, %r3010;
	mul.wide.s32 	%rd316, %r3011, 4;
	add.s64 	%rd317, %rd79, %rd316;
	ld.shared.u32 	%r2836, [%rd317];
	add.s32 	%r3012, %r230, %r3010;
	mul.wide.s32 	%rd318, %r3012, 4;
	add.s64 	%rd319, %rd79, %rd318;
	ld.shared.u32 	%r2843, [%rd319];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2853, %r2850}, {%r443, %r446}, {%r2836}, {%r2977, %r2977};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2862, %r2859}, {%r443, %r446}, {%r2843}, {%r2977, %r2977};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2846, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2848, %r2846, %r2850;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2851, %r481, %r2853, %r2848;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2855, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2857, %r2855, %r2859;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2860, %r481, %r2862, %r2857;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2864, %r484, %r2853;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2867, %r481, %r2850, %r2864;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2871, %r484, %r2862;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2874, %r481, %r2859, %r2871;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2897, %r2900}, {%r527, %r530}, {%r2851, %r2867}, {%r2977, %r2977}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2904, %r2908}, {%r527, %r530}, {%r2860, %r2874}, {%r2977, %r2977}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2896, %r2897, %r2897;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2899, %r2900, %r2900, %r2896;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2903, %r2904, %r2904, %r2899;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2907, %r2908, %r2908, %r2903;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2911, %r1892, %r2907, %r2828;
	// end inline asm
	mul.hi.s16 	%rs223, %rs231, 10923;
	shr.u16 	%rs224, %rs223, 15;
	add.s16 	%rs225, %rs223, %rs224;
	mul.lo.s16 	%rs226, %rs225, 6;
	sub.s16 	%rs227, %rs231, %rs226;
	mul.wide.s16 	%r3013, %rs227, 16;
	add.s32 	%r3014, %r229, %r3013;
	mul.wide.s32 	%rd320, %r3014, 4;
	add.s64 	%rd321, %rd79, %rd320;
	ld.shared.u32 	%r2919, [%rd321];
	add.s32 	%r3015, %r230, %r3013;
	mul.wide.s32 	%rd322, %r3015, 4;
	add.s64 	%rd323, %rd79, %rd322;
	ld.shared.u32 	%r2926, [%rd323];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2936, %r2933}, {%r443, %r446}, {%r2919}, {%r2977, %r2977};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2945, %r2942}, {%r443, %r446}, {%r2926}, {%r2977, %r2977};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2929, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2931, %r2929, %r2933;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2934, %r481, %r2936, %r2931;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2938, %r484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2940, %r2938, %r2942;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2943, %r481, %r2945, %r2940;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2947, %r484, %r2936;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2950, %r481, %r2933, %r2947;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2954, %r484, %r2945;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2957, %r481, %r2942, %r2954;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2980, %r2983}, {%r527, %r530}, {%r2934, %r2950}, {%r2977, %r2977}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2987, %r2991}, {%r527, %r530}, {%r2943, %r2957}, {%r2977, %r2977}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2979, %r2980, %r2980;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2982, %r2983, %r2983, %r2979;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2986, %r2987, %r2987, %r2982;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2990, %r2991, %r2991, %r2986;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r110, %r1892, %r2990, %r2911;
	// end inline asm
	add.s32 	%r108, %r108, 6;
	setp.eq.s32 	%p296, %r108, 192;
	@%p296 bra 	$L__BB0_224;
$L__BB0_168:                            // %L40300
                                        //   in Loop: Header=BB0_166 Depth=2
	bar.sync 	0;
	add.s32 	%r3087, %r3087, 6;
	add.s16 	%rs231, %rs231, 6;
	setp.ne.s32 	%p300, %r3087, 24;
	@%p300 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_169;
$L__BB0_166:                            // %L25449
                                        //   Parent Loop BB0_198 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.lt.u32 	%p291, %r313, 12;
	setp.eq.s32 	%p292, %r3087, 0;
	selp.b32 	%r2470, %r92, 0, %p292;
	setp.eq.s32 	%p293, %r3087, 6;
	selp.b32 	%r2471, %r96, %r2470, %p293;
	setp.eq.s32 	%p294, %r3087, 12;
	selp.b32 	%r2472, %r100, %r2471, %p294;
	setp.eq.s32 	%p295, %r3087, 18;
	selp.b32 	%r2473, %r104, %r2472, %p295;
	selp.b32 	%r2474, %r93, 0, %p292;
	selp.b32 	%r2475, %r97, %r2474, %p293;
	selp.b32 	%r2476, %r101, %r2475, %p294;
	selp.b32 	%r2477, %r105, %r2476, %p295;
	selp.b32 	%r2478, %r94, 0, %p292;
	selp.b32 	%r2479, %r98, %r2478, %p293;
	selp.b32 	%r2480, %r102, %r2479, %p294;
	selp.b32 	%r2481, %r106, %r2480, %p295;
	selp.b32 	%r2482, %r95, 0, %p292;
	selp.b32 	%r2483, %r99, %r2482, %p293;
	selp.b32 	%r2484, %r103, %r2483, %p294;
	selp.b32 	%r2485, %r107, %r2484, %p295;
	// begin inline asm
	mov.b32 %r1969, {%rs109, %rs109};
	// end inline asm
	// begin inline asm
	mov.b32 %r1980, {%rs111, %rs111};
	// end inline asm
	shr.u32 	%r1968, %r2473, 8;
	// begin inline asm
	lop3.b32 %r1966, %r978, %r1968, %r1969, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1970, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1971, %r1969, %r1970;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1974, %r1966, %r1971;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1977, %r989, %r1968, %r1980, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1981, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1982, %r1980, %r1981;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1985, %r1977, %r1982;
	// end inline asm
	// begin inline asm
	mov.b32 %r2015, {%rs109, %rs109};
	// end inline asm
	// begin inline asm
	mov.b32 %r2026, {%rs111, %rs111};
	// end inline asm
	shr.u32 	%r2014, %r2477, 8;
	// begin inline asm
	lop3.b32 %r2012, %r978, %r2014, %r2015, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2016, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2017, %r2015, %r2016;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2020, %r2012, %r2017;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2023, %r989, %r2014, %r2026, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2027, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2028, %r2026, %r2027;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2031, %r2023, %r2028;
	// end inline asm
	// begin inline asm
	mov.b32 %r2061, {%rs109, %rs109};
	// end inline asm
	// begin inline asm
	mov.b32 %r2072, {%rs111, %rs111};
	// end inline asm
	shr.u32 	%r2060, %r2481, 8;
	// begin inline asm
	lop3.b32 %r2058, %r978, %r2060, %r2061, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2062, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2063, %r2061, %r2062;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2066, %r2058, %r2063;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2069, %r989, %r2060, %r2072, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2073, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2074, %r2072, %r2073;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2077, %r2069, %r2074;
	// end inline asm
	// begin inline asm
	mov.b32 %r2107, {%rs109, %rs109};
	// end inline asm
	// begin inline asm
	mov.b32 %r2118, {%rs111, %rs111};
	// end inline asm
	shr.u32 	%r2106, %r2485, 8;
	// begin inline asm
	lop3.b32 %r2104, %r978, %r2106, %r2107, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2108, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2109, %r2107, %r2108;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2112, %r2104, %r2109;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2115, %r989, %r2106, %r2118, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2119, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2120, %r2118, %r2119;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2123, %r2115, %r2120;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r194;
    mov.b32 {%r2re, %r2im}, %r1985;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2126, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r195;
    mov.b32 {%r2re, %r2im}, %r2031;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2129, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r196;
    mov.b32 {%r2re, %r2im}, %r1974;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2132, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r197;
    mov.b32 {%r2re, %r2im}, %r2020;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2135, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r194;
    mov.b32 {%r2re, %r2im}, %r2077;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2138, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r195;
    mov.b32 {%r2re, %r2im}, %r2123;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2141, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r196;
    mov.b32 {%r2re, %r2im}, %r2066;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2144, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r197;
    mov.b32 {%r2re, %r2im}, %r2112;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2147, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2213, %r2210}, {%r335, %r338}, {%r2126}, {%r1311, %r1311};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2222, %r2219}, {%r335, %r338}, {%r2129}, {%r1311, %r1311};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2231, %r2228}, {%r335, %r338}, {%r2132}, {%r1311, %r1311};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2240, %r2237}, {%r335, %r338}, {%r2135}, {%r1311, %r1311};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2249, %r2246}, {%r335, %r338}, {%r2138}, {%r1311, %r1311};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2258, %r2255}, {%r335, %r338}, {%r2141}, {%r1311, %r1311};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2267, %r2264}, {%r335, %r338}, {%r2144}, {%r1311, %r1311};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2276, %r2273}, {%r335, %r338}, {%r2147}, {%r1311, %r1311};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2206, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2208, %r2206, %r2210;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2211, %r387, %r2213, %r2208;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2215, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2217, %r2215, %r2219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2220, %r387, %r2222, %r2217;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2224, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2226, %r2224, %r2228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2229, %r387, %r2231, %r2226;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2233, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2235, %r2233, %r2237;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2238, %r387, %r2240, %r2235;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2242, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2244, %r2242, %r2246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2247, %r387, %r2249, %r2244;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2251, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2253, %r2251, %r2255;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2256, %r387, %r2258, %r2253;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2260, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2262, %r2260, %r2264;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2265, %r387, %r2267, %r2262;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2269, %r390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2271, %r2269, %r2273;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2274, %r387, %r2276, %r2271;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2278, %r390, %r2213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2281, %r387, %r2210, %r2278;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2285, %r390, %r2222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2288, %r387, %r2219, %r2285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2292, %r390, %r2231;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2295, %r387, %r2228, %r2292;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2299, %r390, %r2240;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2302, %r387, %r2237, %r2299;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2306, %r390, %r2249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2309, %r387, %r2246, %r2306;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2313, %r390, %r2258;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2316, %r387, %r2255, %r2313;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2320, %r390, %r2267;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2323, %r387, %r2264, %r2320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2327, %r390, %r2276;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2330, %r387, %r2273, %r2327;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2407, %r2408}, {%r431, %r434}, {%r2211, %r2281}, {%r1311, %r1311}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2415, %r2416}, {%r431, %r434}, {%r2220, %r2288}, {%r1311, %r1311}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2423, %r2424}, {%r431, %r434}, {%r2229, %r2295}, {%r1311, %r1311}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2431, %r2432}, {%r431, %r434}, {%r2238, %r2302}, {%r1311, %r1311}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2439, %r2440}, {%r431, %r434}, {%r2247, %r2309}, {%r1311, %r1311}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2447, %r2448}, {%r431, %r434}, {%r2256, %r2316}, {%r1311, %r1311}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2455, %r2456}, {%r431, %r434}, {%r2265, %r2323}, {%r1311, %r1311}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2463, %r2464}, {%r431, %r434}, {%r2274, %r2330}, {%r1311, %r1311}, %r233, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2406, %r2407, %r2408, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2410, %r2407, %r2408, %r722;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2414, %r2415, %r2416, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2418, %r2415, %r2416, %r722;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2422, %r2423, %r2424, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2426, %r2423, %r2424, %r722;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2430, %r2431, %r2432, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2434, %r2431, %r2432, %r722;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2438, %r2439, %r2440, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2442, %r2439, %r2440, %r722;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2446, %r2447, %r2448, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2450, %r2447, %r2448, %r722;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2454, %r2455, %r2456, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2458, %r2455, %r2456, %r722;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2462, %r2463, %r2464, %r718;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2466, %r2463, %r2464, %r722;
	// end inline asm
	add.s16 	%rs179, %rs10, %rs231;
	add.s16 	%rs180, %rs179, -29;
	mul.hi.s16 	%rs181, %rs180, 10923;
	shr.u16 	%rs182, %rs181, 15;
	add.s16 	%rs183, %rs181, %rs182;
	mul.lo.s16 	%rs184, %rs183, 6;
	sub.s16 	%rs185, %rs180, %rs184;
	mul.wide.s16 	%r2486, %rs185, 16;
	add.s32 	%r2487, %r221, %r2486;
	mul.wide.s32 	%rd276, %r2487, 4;
	add.s64 	%rd7, %rd79, %rd276;
	st.shared.u32 	[%rd7], %r2406;
	add.s32 	%r2488, %r223, %r2486;
	mul.wide.u32 	%rd278, %r2488, 4;
	add.s64 	%rd8, %rd79, %rd278;
	st.shared.u32 	[%rd8], %r2410;
	add.s32 	%r2489, %r225, %r2486;
	mul.wide.s32 	%rd279, %r2489, 4;
	add.s64 	%rd9, %rd79, %rd279;
	st.shared.u32 	[%rd9], %r2414;
	add.s32 	%r2490, %r226, %r2486;
	mul.wide.u32 	%rd280, %r2490, 4;
	add.s64 	%rd10, %rd79, %rd280;
	st.shared.u32 	[%rd10], %r2418;
	cvt.s64.s32 	%rd281, %r2486;
	add.s64 	%rd282, %rd32, %rd281;
	shl.b64 	%rd283, %rd282, 2;
	add.s64 	%rd11, %rd79, %rd283;
	st.shared.u32 	[%rd11+32], %r2422;
	add.s32 	%r2491, %r227, %r2486;
	mul.wide.u32 	%rd284, %r2491, 4;
	add.s64 	%rd12, %rd79, %rd284;
	st.shared.u32 	[%rd12], %r2426;
	add.s64 	%rd285, %rd35, %rd281;
	shl.b64 	%rd286, %rd285, 2;
	add.s64 	%rd13, %rd79, %rd286;
	st.shared.u32 	[%rd13+32], %r2430;
	add.s32 	%r2492, %r228, %r2486;
	mul.wide.u32 	%rd287, %r2492, 4;
	add.s64 	%rd14, %rd79, %rd287;
	st.shared.u32 	[%rd14], %r2434;
	add.s16 	%rs186, %rs9, %rs231;
	add.s16 	%rs187, %rs186, -2;
	mul.hi.s16 	%rs188, %rs187, 10923;
	shr.u16 	%rs189, %rs188, 15;
	add.s16 	%rs190, %rs188, %rs189;
	mul.lo.s16 	%rs191, %rs190, 6;
	sub.s16 	%rs192, %rs187, %rs191;
	mul.wide.s16 	%r2493, %rs192, 16;
	add.s32 	%r2494, %r221, %r2493;
	mul.wide.s32 	%rd288, %r2494, 4;
	add.s64 	%rd15, %rd79, %rd288;
	st.shared.u32 	[%rd15], %r2438;
	add.s32 	%r2495, %r223, %r2493;
	mul.wide.u32 	%rd289, %r2495, 4;
	add.s64 	%rd16, %rd79, %rd289;
	st.shared.u32 	[%rd16], %r2442;
	add.s32 	%r2496, %r225, %r2493;
	mul.wide.s32 	%rd290, %r2496, 4;
	add.s64 	%rd17, %rd79, %rd290;
	st.shared.u32 	[%rd17], %r2446;
	add.s32 	%r2497, %r226, %r2493;
	mul.wide.u32 	%rd291, %r2497, 4;
	add.s64 	%rd18, %rd79, %rd291;
	st.shared.u32 	[%rd18], %r2450;
	cvt.s64.s32 	%rd292, %r2493;
	add.s64 	%rd293, %rd32, %rd292;
	shl.b64 	%rd294, %rd293, 2;
	add.s64 	%rd19, %rd79, %rd294;
	st.shared.u32 	[%rd19+32], %r2454;
	add.s32 	%r2498, %r227, %r2493;
	mul.wide.u32 	%rd295, %r2498, 4;
	add.s64 	%rd20, %rd79, %rd295;
	st.shared.u32 	[%rd20], %r2458;
	add.s64 	%rd296, %rd35, %rd292;
	shl.b64 	%rd297, %rd296, 2;
	add.s64 	%rd21, %rd79, %rd297;
	st.shared.u32 	[%rd21+32], %r2462;
	add.s32 	%r2499, %r228, %r2493;
	mul.wide.u32 	%rd298, %r2499, 4;
	add.s64 	%rd22, %rd79, %rd298;
	st.shared.u32 	[%rd22], %r2466;
	@%p291 bra 	$L__BB0_223;
	bra.uni 	$L__BB0_167;
$L__BB0_223:                            // %oksrem13993
                                        //   in Loop: Header=BB0_166 Depth=2
	st.shared.u32 	[%rd7], %r2406;
	st.shared.u32 	[%rd8], %r2410;
	st.shared.u32 	[%rd9], %r2414;
	st.shared.u32 	[%rd10], %r2418;
	st.shared.u32 	[%rd11+32], %r2422;
	st.shared.u32 	[%rd12], %r2426;
	st.shared.u32 	[%rd13+32], %r2430;
	st.shared.u32 	[%rd14], %r2434;
	st.shared.u32 	[%rd15], %r2438;
	st.shared.u32 	[%rd16], %r2442;
	st.shared.u32 	[%rd17], %r2446;
	st.shared.u32 	[%rd18], %r2450;
	st.shared.u32 	[%rd19+32], %r2454;
	st.shared.u32 	[%rd20], %r2458;
	st.shared.u32 	[%rd21+32], %r2462;
	st.shared.u32 	[%rd22], %r2466;
	bra.uni 	$L__BB0_167;
$L__BB0_224:                            // %pass18414
                                        //   in Loop: Header=BB0_166 Depth=2
	mul.lo.s32 	%r3017, %r109, 786432;
	or.b32  	%r3018, %r3017, %r2;
	add.s32 	%r3019, %r3018, %r231;
	or.b32  	%r3020, %r3019, %r232;
	cvt.u64.u32 	%rd324, %r3020;
	add.s64 	%rd325, %rd324, %rd23;
	mul.hi.s64 	%rd326, %rd325, 3074457345618258603;
	shr.u64 	%rd327, %rd326, 63;
	shr.s64 	%rd328, %rd326, 27;
	add.s64 	%rd329, %rd328, %rd327;
	setp.lt.s64 	%p297, %rd325, 0;
	mul.lo.s64 	%rd330, %rd329, 805306368;
	setp.ne.s64 	%p298, %rd330, %rd325;
	and.pred  	%p299, %p297, %p298;
	selp.s64 	%rd331, -1, 0, %p299;
	add.s64 	%rd332, %rd329, %rd331;
	mul.lo.s64 	%rd333, %rd332, -805306368;
	add.s64 	%rd334, %rd333, %rd325;
	shl.b64 	%rd335, %rd334, 2;
	add.s64 	%rd336, %rd4, %rd335;
	st.global.u32 	[%rd336], %r110;
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r108, %r2977;
	mov.u32 	%r110, %r2977;
	bra.uni 	$L__BB0_168;
$L__BB0_170:                            // %L40331
	mov.u32 	%r3021, 0;
	st.global.u32 	[%rd6], %r3021;
	ret;
$L__BB0_163:                            // %post_box_union
	mov.u64 	%rd193, exception3604;
	cvta.global.u64 	%rd194, %rd193;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd194;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r303;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_220:                            // %post_box_union9523
	mov.u64 	%rd240, exception3604;
	cvta.global.u64 	%rd241, %rd240;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd241;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r303;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L5128
	mov.u32 	%r3037, 5;
	st.global.u32 	[%rd6], %r3037;
	mov.u64 	%rd367, exception3564;
	cvta.global.u64 	%rd368, %rd367;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd368;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r303;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L5284
	mov.u32 	%r3036, 5;
	st.global.u32 	[%rd6], %r3036;
	mov.u64 	%rd365, exception3564;
	cvta.global.u64 	%rd366, %rd365;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd366;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r303;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L5440
	mov.u32 	%r3035, 5;
	st.global.u32 	[%rd6], %r3035;
	mov.u64 	%rd363, exception3564;
	cvta.global.u64 	%rd364, %rd363;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd364;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r303;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L5596
	mov.u32 	%r3034, 5;
	st.global.u32 	[%rd6], %r3034;
	mov.u64 	%rd361, exception3564;
	cvta.global.u64 	%rd362, %rd361;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd362;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r303;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L5752
	mov.u32 	%r3033, 5;
	st.global.u32 	[%rd6], %r3033;
	mov.u64 	%rd359, exception3564;
	cvta.global.u64 	%rd360, %rd359;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd360;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r303;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L5908
	mov.u32 	%r3032, 5;
	st.global.u32 	[%rd6], %r3032;
	mov.u64 	%rd357, exception3564;
	cvta.global.u64 	%rd358, %rd357;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd358;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r303;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_151:                            // %L6064
	mov.u32 	%r3031, 5;
	st.global.u32 	[%rd6], %r3031;
	mov.u64 	%rd355, exception3564;
	cvta.global.u64 	%rd356, %rd355;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd356;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r303;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_152:                            // %L6220
	mov.u32 	%r3030, 5;
	st.global.u32 	[%rd6], %r3030;
	mov.u64 	%rd353, exception3564;
	cvta.global.u64 	%rd354, %rd353;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd354;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r303;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_153:                            // %L6376
	mov.u32 	%r3029, 5;
	st.global.u32 	[%rd6], %r3029;
	mov.u64 	%rd351, exception3564;
	cvta.global.u64 	%rd352, %rd351;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd352;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r303;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_154:                            // %L6532
	mov.u32 	%r3028, 5;
	st.global.u32 	[%rd6], %r3028;
	mov.u64 	%rd349, exception3564;
	cvta.global.u64 	%rd350, %rd349;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd350;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r303;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_155:                            // %L6714
	mov.u32 	%r3027, 5;
	st.global.u32 	[%rd6], %r3027;
	mov.u64 	%rd347, exception3564;
	cvta.global.u64 	%rd348, %rd347;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd348;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r303;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_156:                            // %L6870
	mov.u32 	%r3026, 5;
	st.global.u32 	[%rd6], %r3026;
	mov.u64 	%rd345, exception3564;
	cvta.global.u64 	%rd346, %rd345;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd346;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r303;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_157:                            // %L7026
	mov.u32 	%r3025, 5;
	st.global.u32 	[%rd6], %r3025;
	mov.u64 	%rd343, exception3564;
	cvta.global.u64 	%rd344, %rd343;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd344;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r303;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_158:                            // %L7182
	mov.u32 	%r3024, 5;
	st.global.u32 	[%rd6], %r3024;
	mov.u64 	%rd341, exception3564;
	cvta.global.u64 	%rd342, %rd341;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd342;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r303;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_159:                            // %L7338
	mov.u32 	%r3023, 5;
	st.global.u32 	[%rd6], %r3023;
	mov.u64 	%rd339, exception3564;
	cvta.global.u64 	%rd340, %rd339;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd340;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r303;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_160:                            // %L7494
	mov.u32 	%r3022, 5;
	st.global.u32 	[%rd6], %r3022;
	mov.u64 	%rd337, exception3564;
	cvta.global.u64 	%rd338, %rd337;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd338;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r303;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L166
	mov.u32 	%r3039, 2;
	st.global.u32 	[%rd6], %r3039;
	mov.u64 	%rd371, exception3564;
	cvta.global.u64 	%rd372, %rd371;
	{ // callseq 90, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd372;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 90
	{ // callseq 91, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r303;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 91
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_12:                             // %L307
	mov.u32 	%r3038, 3;
	st.global.u32 	[%rd6], %r3038;
	mov.u64 	%rd369, exception3564;
	cvta.global.u64 	%rd370, %rd369;
	{ // callseq 88, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd370;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 88
	{ // callseq 89, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r303;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 89
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd52, exception1;
	cvta.global.u64 	%rd53, %rd52;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd53;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 47
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r303;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 48
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_144:                            // %L1152
	add.u64 	%rd51, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r313, %r4};
	st.local.v2.u32 	[%rd5+8], {%r1, %r84};
	st.local.u32 	[%rd5+16], %r85;
	mov.u64 	%rd57, __unnamed_1;
	cvta.global.u64 	%rd58, %rd57;
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd58;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd51;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r540, [retval0+0];
	} // callseq 49
	mov.u32 	%r542, 4;
	st.global.u32 	[%rd6], %r542;
	mov.u64 	%rd60, exception3564;
	cvta.global.u64 	%rd61, %rd60;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd61;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r303;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
