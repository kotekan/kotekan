// PTX CompilerJob of MethodInstance for frb(::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.1
.target sm_86
.address_size 64

	// .globl	_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE // -- Begin function _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.visible .entry _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE(
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<142>;
	.reg .b16 	%rs<272>;
	.reg .f32 	%f<397>;
	.reg .b32 	%r<3613>;
	.reg .b64 	%rd<301>;

// %bb.0:                               // %conversion
	// begin inline asm
	mov.u32 %r306, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r306, 76895;
	@%p1 bra 	LBB0_94;
	bra.uni 	LBB0_1;
LBB0_94:                                // %L11
	ld.param.u64 	%rd14, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5];
	mov.u32 	%r1, %ctaid.x;
	mul.lo.s32 	%r307, %r1, 768;
	mov.u32 	%r2, %tid.x;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r308, %r2, %r307;
	add.s32 	%r309, %r4, %r308;
	mul.wide.u32 	%rd20, %r309, 4;
	add.s64 	%rd5, %rd14, %rd20;
	mov.u32 	%r310, 1;
	st.global.u32 	[%rd5], %r310;
	and.b32  	%r5, %r2, 3;
	shr.u32 	%r6, %r2, 2;
	mul.lo.s32 	%r311, %r5, %r6;
	and.b32  	%r312, %r311, 7;
	cvt.rn.f32.u32 	%f102, %r312;
	mov.f32 	%f103, 0f40800000;
	div.approx.f32 	%f1, %f102, %f103;
	abs.f32 	%f395, %f1;
	setp.lt.f32 	%p2, %f395, 0f40000000;
	@%p2 bra 	LBB0_106;
// %bb.95:
	setp.gtu.f32 	%p3, %f395, 0f4B800000;
	@%p3 bra 	LBB0_102;
	bra.uni 	LBB0_96;
LBB0_102:
	mov.b32 	%r237, %f395;
	and.b32  	%r313, %r237, 8388607;
	or.b32  	%r3611, %r313, 1065353216;
	mov.b32 	%f394, %r3611;
	add.s32 	%r314, %r237, -1073741824;
	and.b32  	%r3612, %r314, -8388608;
	setp.eq.s32 	%p9, %r3612, 0;
	@%p9 bra 	LBB0_105;
// %bb.103:                             // %.lr.ph2965.preheader
	mov.f32 	%f113, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f112,%f113;
	// end inline asm
LBB0_104:                               // %.lr.ph2965
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r315, %r3612, 192937984;
	add.s32 	%r316, %r315, %r3611;
	mov.b32 	%f114, %r316;
	mul.f32 	%f115, %f112, %f114;
	sub.f32 	%f116, %f114, %f115;
	fma.rn.f32 	%f117, %f116, %f112, %f115;
	sub.f32 	%f118, %f114, %f117;
	fma.rz.f32 	%f119, %f118, %f112, %f117;
	cvt.rzi.f32.f32 	%f120, %f119;
	sub.f32 	%f394, %f114, %f120;
	sub.s32 	%r3612, %r3612, %r315;
	mov.b32 	%r3611, %f394;
	setp.ne.s32 	%p10, %r3612, 0;
	setp.ne.s32 	%p11, %r3611, 0;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	LBB0_104;
LBB0_105:                               // %__internal_fmodf_slowpath_mod.exit.i.i1396
	setp.gt.u32 	%p13, %r237, 2139095039;
	selp.f32 	%f121, 0f7FFFFFFF, 0f4B800000, %p13;
	mul.f32 	%f122, %f394, 0f34000000;
	mul.f32 	%f395, %f121, %f122;
	bra.uni 	LBB0_106;
LBB0_96:                                // %__nv_fast_fdividef.exit.i.i.i1362
	mov.f32 	%f104, 0f40000000;
	div.approx.f32 	%f105, %f395, %f104;
	cvt.rzi.f32.f32 	%f87, %f105;
	fma.rn.f32 	%f88, %f87, 0fC0000000, %f395;
	mov.b32 	%r236, %f88;
	setp.lt.u32 	%p4, %r236, 1073741824;
	mov.f32 	%f393, %f87;
	@%p4 bra 	LBB0_101;
// %bb.97:
	setp.lt.u32 	%p5, %r236, -2147483647;
	@%p5 bra 	LBB0_99;
// %bb.98:
	add.f32 	%f110, %f87, 0fBF800000;
	setp.lt.f32 	%p8, %f88, 0fC0000000;
	selp.f32 	%f111, %f110, %f87, %p8;
	add.f32 	%f393, %f111, 0fBF800000;
	bra.uni 	LBB0_101;
LBB0_99:
	add.f32 	%f393, %f87, 0f3F800000;
	setp.ltu.f32 	%p6, %f88, 0f40800000;
	@%p6 bra 	LBB0_101;
// %bb.100:                             // %__nv_fmaf_rn.exit.i.i.i1367
	fma.rn.f32 	%f107, %f104, 0fC0400000, %f88;
	setp.ge.f32 	%p7, %f107, 0f00000000;
	selp.f32 	%f108, %f393, %f87, %p7;
	add.f32 	%f109, %f108, 0f3F800000;
	add.f32 	%f393, %f109, 0f3F800000;
LBB0_101:                               // %__internal_fmodf_fastpath_quot.exit.i.i1370
	fma.rn.f32 	%f395, %f393, 0fC0000000, %f395;
LBB0_106:                               // %__internal_fmodf_kernel.exit.i1399
	abs.f32 	%f123, %f395;
	setp.gtu.f32 	%p14, %f123, 0f7F800000;
	@%p14 bra 	LBB0_108;
// %bb.107:
	mov.b32 	%r317, %f1;
	and.b32  	%r318, %r317, -2147483648;
	mov.b32 	%r319, %f395;
	or.b32  	%r320, %r318, %r319;
	mov.b32 	%f395, %r320;
LBB0_108:                               // %__nv_fmodf.exit1402
	add.f32 	%f125, %f395, %f395;
	mov.b32 	%r327, %f125;
	and.b32  	%r328, %r327, -2147483648;
	or.b32  	%r329, %r328, 1056964608;
	mov.b32 	%f126, %r329;
	add.f32 	%f127, %f125, %f126;
	cvt.rzi.f32.f32 	%f128, %f127;
	abs.f32 	%f129, %f125;
	setp.gt.f32 	%p15, %f129, 0f4B000000;
	selp.f32 	%f130, %f125, %f128, %p15;
	cvt.rzi.f32.f32 	%f131, %f125;
	setp.lt.f32 	%p16, %f129, 0f3F000000;
	selp.f32 	%f132, %f131, %f130, %p16;
	cvt.rzi.s32.f32 	%r330, %f132;
	fma.rn.f32 	%f133, %f132, 0fBF000000, %f395;
	mul.f32 	%f134, %f133, %f133;
	fma.rn.f32 	%f135, %f134, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f136, %f134, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f137, %f135, %f134, 0fC0A55DF6;
	fma.rn.f32 	%f138, %f136, %f134, 0f4081E0CF;
	fma.rn.f32 	%f139, %f134, %f133, 0f00000000;
	fma.rn.f32 	%f140, %f138, %f134, 0fC09DE9E6;
	fma.rn.f32 	%f141, %f137, %f139, 0f00000000;
	fma.rn.f32 	%f142, %f140, %f134, 0f3F800000;
	fma.rn.f32 	%f143, %f133, 0f40490FDB, %f141;
	and.b32  	%r331, %r330, 1;
	setp.eq.b32 	%p17, %r331, 1;
	selp.f32 	%f144, %f142, %f143, %p17;
	selp.f32 	%f145, %f143, %f142, %p17;
	and.b32  	%r332, %r330, 2;
	setp.eq.s32 	%p18, %r332, 0;
	neg.f32 	%f146, %f144;
	selp.f32 	%f147, %f144, %f146, %p18;
	add.s32 	%r333, %r330, 1;
	and.b32  	%r334, %r333, 2;
	mov.f32 	%f391, 0f00000000;
	cvt.rzi.f32.f32 	%f150, %f395;
	setp.eq.f32 	%p20, %f150, %f395;
	mul.f32 	%f151, %f395, 0f00000000;
	shl.b32 	%r246, %r2, 1;
	and.b32  	%r247, %r246, 6;
	or.b32  	%r248, %r247, 1;
	setp.eq.s32 	%p22, %r247, 6;
	mov.f32 	%f367, 0f41C00000;
	mul.lo.s32 	%r3512, %r247, %r6;
	mov.f32 	%f373, %f391;
	mov.f32 	%f374, %f391;
	@%p22 bra 	LBB0_17;
// %bb.2:                               // %L208
	cvt.u16.u32 	%rs1, %r3512;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 13;
	mul.lo.s16 	%rs5, %rs4, 48;
	sub.s16 	%rs6, %rs1, %rs5;
	and.b16  	%rs7, %rs6, 255;
	cvt.rn.f32.u16 	%f156, %rs7;
	div.approx.f32 	%f3, %f156, %f367;
	abs.f32 	%f371, %f3;
	setp.lt.f32 	%p23, %f371, 0f40000000;
	@%p23 bra 	LBB0_14;
// %bb.3:
	setp.gtu.f32 	%p24, %f371, 0f4B800000;
	@%p24 bra 	LBB0_10;
	bra.uni 	LBB0_4;
LBB0_10:
	mov.b32 	%r8, %f371;
	and.b32  	%r336, %r8, 8388607;
	or.b32  	%r3515, %r336, 1065353216;
	mov.b32 	%f370, %r3515;
	add.s32 	%r337, %r8, -1073741824;
	and.b32  	%r3516, %r337, -8388608;
	setp.eq.s32 	%p30, %r3516, 0;
	@%p30 bra 	LBB0_13;
// %bb.11:                              // %.lr.ph2960.preheader
	mov.f32 	%f167, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f166,%f167;
	// end inline asm
LBB0_12:                                // %.lr.ph2960
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r338, %r3516, 192937984;
	add.s32 	%r339, %r338, %r3515;
	mov.b32 	%f168, %r339;
	mul.f32 	%f169, %f166, %f168;
	sub.f32 	%f170, %f168, %f169;
	fma.rn.f32 	%f171, %f170, %f166, %f169;
	sub.f32 	%f172, %f168, %f171;
	fma.rz.f32 	%f173, %f172, %f166, %f171;
	cvt.rzi.f32.f32 	%f174, %f173;
	sub.f32 	%f370, %f168, %f174;
	sub.s32 	%r3516, %r3516, %r338;
	mov.b32 	%r3515, %f370;
	setp.ne.s32 	%p31, %r3516, 0;
	setp.ne.s32 	%p32, %r3515, 0;
	and.pred  	%p33, %p31, %p32;
	@%p33 bra 	LBB0_12;
LBB0_13:                                // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p34, %r8, 2139095039;
	selp.f32 	%f175, 0f7FFFFFFF, 0f4B800000, %p34;
	mul.f32 	%f176, %f370, 0f34000000;
	mul.f32 	%f371, %f175, %f176;
	bra.uni 	LBB0_14;
LBB0_4:                                 // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f158, 0f40000000;
	div.approx.f32 	%f159, %f371, %f158;
	cvt.rzi.f32.f32 	%f5, %f159;
	fma.rn.f32 	%f6, %f5, 0fC0000000, %f371;
	mov.b32 	%r7, %f6;
	setp.lt.u32 	%p25, %r7, 1073741824;
	mov.f32 	%f369, %f5;
	@%p25 bra 	LBB0_9;
// %bb.5:
	setp.lt.u32 	%p26, %r7, -2147483647;
	@%p26 bra 	LBB0_7;
// %bb.6:
	add.f32 	%f164, %f5, 0fBF800000;
	setp.lt.f32 	%p29, %f6, 0fC0000000;
	selp.f32 	%f165, %f164, %f5, %p29;
	add.f32 	%f369, %f165, 0fBF800000;
	bra.uni 	LBB0_9;
LBB0_7:
	add.f32 	%f369, %f5, 0f3F800000;
	setp.ltu.f32 	%p27, %f6, 0f40800000;
	@%p27 bra 	LBB0_9;
// %bb.8:                               // %__nv_fmaf_rn.exit.i.i.i
	fma.rn.f32 	%f161, %f158, 0fC0400000, %f6;
	setp.ge.f32 	%p28, %f161, 0f00000000;
	selp.f32 	%f162, %f369, %f5, %p28;
	add.f32 	%f163, %f162, 0f3F800000;
	add.f32 	%f369, %f163, 0f3F800000;
LBB0_9:                                 // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f371, %f369, 0fC0000000, %f371;
LBB0_14:                                // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f177, %f371;
	setp.gtu.f32 	%p35, %f177, 0f7F800000;
	@%p35 bra 	LBB0_16;
// %bb.15:
	mov.b32 	%r340, %f3;
	and.b32  	%r341, %r340, -2147483648;
	mov.b32 	%r342, %f371;
	or.b32  	%r343, %r341, %r342;
	mov.b32 	%f371, %r343;
LBB0_16:                                // %__nv_fmodf.exit
	add.f32 	%f178, %f371, %f371;
	mov.b32 	%r344, %f178;
	and.b32  	%r345, %r344, -2147483648;
	or.b32  	%r346, %r345, 1056964608;
	mov.b32 	%f179, %r346;
	add.f32 	%f180, %f178, %f179;
	cvt.rzi.f32.f32 	%f181, %f180;
	abs.f32 	%f182, %f178;
	setp.gt.f32 	%p36, %f182, 0f4B000000;
	selp.f32 	%f183, %f178, %f181, %p36;
	cvt.rzi.f32.f32 	%f184, %f178;
	setp.lt.f32 	%p37, %f182, 0f3F000000;
	selp.f32 	%f185, %f184, %f183, %p37;
	cvt.rzi.s32.f32 	%r347, %f185;
	fma.rn.f32 	%f186, %f185, 0fBF000000, %f371;
	mul.f32 	%f187, %f186, %f186;
	fma.rn.f32 	%f188, %f187, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f189, %f187, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f190, %f188, %f187, 0fC0A55DF6;
	fma.rn.f32 	%f191, %f189, %f187, 0f4081E0CF;
	fma.rn.f32 	%f192, %f187, %f186, 0f00000000;
	fma.rn.f32 	%f193, %f191, %f187, 0fC09DE9E6;
	fma.rn.f32 	%f194, %f190, %f192, 0f00000000;
	fma.rn.f32 	%f195, %f193, %f187, 0f3F800000;
	fma.rn.f32 	%f196, %f186, 0f40490FDB, %f194;
	and.b32  	%r348, %r347, 1;
	setp.eq.b32 	%p38, %r348, 1;
	selp.f32 	%f197, %f195, %f196, %p38;
	selp.f32 	%f198, %f196, %f195, %p38;
	and.b32  	%r349, %r347, 2;
	setp.eq.s32 	%p39, %r349, 0;
	neg.f32 	%f199, %f197;
	selp.f32 	%f200, %f197, %f199, %p39;
	add.s32 	%r350, %r347, 1;
	and.b32  	%r351, %r350, 2;
	setp.eq.s32 	%p40, %r351, 0;
	mov.f32 	%f201, 0f00000000;
	sub.f32 	%f202, %f201, %f198;
	selp.f32 	%f203, %f198, %f202, %p40;
	cvt.rzi.f32.f32 	%f204, %f371;
	setp.eq.f32 	%p41, %f204, %f371;
	mul.f32 	%f205, %f371, 0f00000000;
	selp.f32 	%f374, %f205, %f200, %p41;
	abs.f32 	%f206, %f371;
	setp.gt.f32 	%p42, %f206, 0f4B800000;
	add.f32 	%f207, %f374, 0f3F800000;
	selp.f32 	%f373, %f207, %f203, %p42;
LBB0_17:                                // %L224
	setp.eq.s32 	%p19, %r334, 0;
	sub.f32 	%f148, %f391, %f145;
	selp.f32 	%f152, %f151, %f147, %p20;
	abs.f32 	%f153, %f395;
	setp.gt.u32 	%p43, %r248, 5;
	mul.lo.s32 	%r3513, %r248, %r6;
	mov.f32 	%f379, %f391;
	mov.f32 	%f380, %f391;
	@%p43 bra 	LBB0_33;
// %bb.18:                              // %L228
	mul.hi.u32 	%r353, %r3513, -1431655765;
	shr.u32 	%r354, %r353, 5;
	mul.lo.s32 	%r355, %r354, 48;
	sub.s32 	%r356, %r3513, %r355;
	cvt.rn.f32.s32 	%f209, %r356;
	div.approx.f32 	%f24, %f209, %f367;
	abs.f32 	%f377, %f24;
	setp.lt.f32 	%p44, %f377, 0f40000000;
	@%p44 bra 	LBB0_30;
// %bb.19:
	setp.gtu.f32 	%p45, %f377, 0f4B800000;
	@%p45 bra 	LBB0_26;
	bra.uni 	LBB0_20;
LBB0_26:
	mov.b32 	%r16, %f377;
	and.b32  	%r357, %r16, 8388607;
	or.b32  	%r3517, %r357, 1065353216;
	mov.b32 	%f376, %r3517;
	add.s32 	%r358, %r16, -1073741824;
	and.b32  	%r3518, %r358, -8388608;
	setp.eq.s32 	%p51, %r3518, 0;
	@%p51 bra 	LBB0_29;
// %bb.27:                              // %.lr.ph2955.preheader
	mov.f32 	%f220, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f219,%f220;
	// end inline asm
LBB0_28:                                // %.lr.ph2955
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r359, %r3518, 192937984;
	add.s32 	%r360, %r359, %r3517;
	mov.b32 	%f221, %r360;
	mul.f32 	%f222, %f219, %f221;
	sub.f32 	%f223, %f221, %f222;
	fma.rn.f32 	%f224, %f223, %f219, %f222;
	sub.f32 	%f225, %f221, %f224;
	fma.rz.f32 	%f226, %f225, %f219, %f224;
	cvt.rzi.f32.f32 	%f227, %f226;
	sub.f32 	%f376, %f221, %f227;
	sub.s32 	%r3518, %r3518, %r359;
	mov.b32 	%r3517, %f376;
	setp.ne.s32 	%p52, %r3518, 0;
	setp.ne.s32 	%p53, %r3517, 0;
	and.pred  	%p54, %p52, %p53;
	@%p54 bra 	LBB0_28;
LBB0_29:                                // %__internal_fmodf_slowpath_mod.exit.i.i1237
	setp.gt.u32 	%p55, %r16, 2139095039;
	selp.f32 	%f228, 0f7FFFFFFF, 0f4B800000, %p55;
	mul.f32 	%f229, %f376, 0f34000000;
	mul.f32 	%f377, %f228, %f229;
	bra.uni 	LBB0_30;
LBB0_20:                                // %__nv_fast_fdividef.exit.i.i.i1203
	mov.f32 	%f211, 0f40000000;
	div.approx.f32 	%f212, %f377, %f211;
	cvt.rzi.f32.f32 	%f26, %f212;
	fma.rn.f32 	%f27, %f26, 0fC0000000, %f377;
	mov.b32 	%r15, %f27;
	setp.lt.u32 	%p46, %r15, 1073741824;
	mov.f32 	%f375, %f26;
	@%p46 bra 	LBB0_25;
// %bb.21:
	setp.lt.u32 	%p47, %r15, -2147483647;
	@%p47 bra 	LBB0_23;
// %bb.22:
	add.f32 	%f217, %f26, 0fBF800000;
	setp.lt.f32 	%p50, %f27, 0fC0000000;
	selp.f32 	%f218, %f217, %f26, %p50;
	add.f32 	%f375, %f218, 0fBF800000;
	bra.uni 	LBB0_25;
LBB0_23:
	add.f32 	%f375, %f26, 0f3F800000;
	setp.ltu.f32 	%p48, %f27, 0f40800000;
	@%p48 bra 	LBB0_25;
// %bb.24:                              // %__nv_fmaf_rn.exit.i.i.i1208
	fma.rn.f32 	%f214, %f211, 0fC0400000, %f27;
	setp.ge.f32 	%p49, %f214, 0f00000000;
	selp.f32 	%f215, %f375, %f26, %p49;
	add.f32 	%f216, %f215, 0f3F800000;
	add.f32 	%f375, %f216, 0f3F800000;
LBB0_25:                                // %__internal_fmodf_fastpath_quot.exit.i.i1211
	fma.rn.f32 	%f377, %f375, 0fC0000000, %f377;
LBB0_30:                                // %__internal_fmodf_kernel.exit.i1240
	abs.f32 	%f230, %f377;
	setp.gtu.f32 	%p56, %f230, 0f7F800000;
	@%p56 bra 	LBB0_32;
// %bb.31:
	mov.b32 	%r361, %f24;
	and.b32  	%r362, %r361, -2147483648;
	mov.b32 	%r363, %f377;
	or.b32  	%r364, %r362, %r363;
	mov.b32 	%f377, %r364;
LBB0_32:                                // %__nv_fmodf.exit1243
	add.f32 	%f231, %f377, %f377;
	mov.b32 	%r365, %f231;
	and.b32  	%r366, %r365, -2147483648;
	or.b32  	%r367, %r366, 1056964608;
	mov.b32 	%f232, %r367;
	add.f32 	%f233, %f231, %f232;
	cvt.rzi.f32.f32 	%f234, %f233;
	abs.f32 	%f235, %f231;
	setp.gt.f32 	%p57, %f235, 0f4B000000;
	selp.f32 	%f236, %f231, %f234, %p57;
	cvt.rzi.f32.f32 	%f237, %f231;
	setp.lt.f32 	%p58, %f235, 0f3F000000;
	selp.f32 	%f238, %f237, %f236, %p58;
	cvt.rzi.s32.f32 	%r368, %f238;
	fma.rn.f32 	%f239, %f238, 0fBF000000, %f377;
	mul.f32 	%f240, %f239, %f239;
	fma.rn.f32 	%f241, %f240, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f242, %f240, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f243, %f241, %f240, 0fC0A55DF6;
	fma.rn.f32 	%f244, %f242, %f240, 0f4081E0CF;
	fma.rn.f32 	%f245, %f240, %f239, 0f00000000;
	fma.rn.f32 	%f246, %f244, %f240, 0fC09DE9E6;
	fma.rn.f32 	%f247, %f243, %f245, 0f00000000;
	fma.rn.f32 	%f248, %f246, %f240, 0f3F800000;
	fma.rn.f32 	%f249, %f239, 0f40490FDB, %f247;
	and.b32  	%r369, %r368, 1;
	setp.eq.b32 	%p59, %r369, 1;
	selp.f32 	%f250, %f248, %f249, %p59;
	selp.f32 	%f251, %f249, %f248, %p59;
	and.b32  	%r370, %r368, 2;
	setp.eq.s32 	%p60, %r370, 0;
	neg.f32 	%f252, %f250;
	selp.f32 	%f253, %f250, %f252, %p60;
	add.s32 	%r371, %r368, 1;
	and.b32  	%r372, %r371, 2;
	setp.eq.s32 	%p61, %r372, 0;
	mov.f32 	%f254, 0f00000000;
	sub.f32 	%f255, %f254, %f251;
	selp.f32 	%f256, %f251, %f255, %p61;
	cvt.rzi.f32.f32 	%f257, %f377;
	setp.eq.f32 	%p62, %f257, %f377;
	mul.f32 	%f258, %f377, 0f00000000;
	selp.f32 	%f380, %f258, %f253, %p62;
	abs.f32 	%f259, %f377;
	setp.gt.f32 	%p63, %f259, 0f4B800000;
	add.f32 	%f260, %f380, 0f3F800000;
	selp.f32 	%f379, %f260, %f256, %p63;
LBB0_33:                                // %L244
	selp.f32 	%f149, %f145, %f148, %p19;
	setp.gt.f32 	%p21, %f153, 0f4B800000;
	add.f32 	%f154, %f152, 0f3F800000;
	setp.gt.u32 	%p65, %r2, 23;
	or.pred  	%p66, %p22, %p65;
	mov.f32 	%f368, 0f40400000;
	mov.f32 	%f385, %f391;
	mov.f32 	%f386, %f391;
	@%p66 bra 	LBB0_49;
// %bb.34:                              // %L286
	cvt.u16.u32 	%rs8, %r3512;
	and.b16  	%rs9, %rs8, 255;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 10;
	mul.lo.s16 	%rs12, %rs11, 6;
	sub.s16 	%rs13, %rs8, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f262, %rs14;
	div.approx.f32 	%f45, %f262, %f368;
	abs.f32 	%f383, %f45;
	setp.lt.f32 	%p67, %f383, 0f40000000;
	@%p67 bra 	LBB0_46;
// %bb.35:
	setp.gtu.f32 	%p68, %f383, 0f4B800000;
	@%p68 bra 	LBB0_42;
	bra.uni 	LBB0_36;
LBB0_42:
	mov.b32 	%r26, %f383;
	and.b32  	%r380, %r26, 8388607;
	or.b32  	%r3519, %r380, 1065353216;
	mov.b32 	%f382, %r3519;
	add.s32 	%r381, %r26, -1073741824;
	and.b32  	%r3520, %r381, -8388608;
	setp.eq.s32 	%p74, %r3520, 0;
	@%p74 bra 	LBB0_45;
// %bb.43:                              // %.lr.ph2950.preheader
	mov.f32 	%f273, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f272,%f273;
	// end inline asm
LBB0_44:                                // %.lr.ph2950
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r382, %r3520, 192937984;
	add.s32 	%r383, %r382, %r3519;
	mov.b32 	%f274, %r383;
	mul.f32 	%f275, %f272, %f274;
	sub.f32 	%f276, %f274, %f275;
	fma.rn.f32 	%f277, %f276, %f272, %f275;
	sub.f32 	%f278, %f274, %f277;
	fma.rz.f32 	%f279, %f278, %f272, %f277;
	cvt.rzi.f32.f32 	%f280, %f279;
	sub.f32 	%f382, %f274, %f280;
	sub.s32 	%r3520, %r3520, %r382;
	mov.b32 	%r3519, %f382;
	setp.ne.s32 	%p75, %r3520, 0;
	setp.ne.s32 	%p76, %r3519, 0;
	and.pred  	%p77, %p75, %p76;
	@%p77 bra 	LBB0_44;
LBB0_45:                                // %__internal_fmodf_slowpath_mod.exit.i.i1290
	setp.gt.u32 	%p78, %r26, 2139095039;
	selp.f32 	%f281, 0f7FFFFFFF, 0f4B800000, %p78;
	mul.f32 	%f282, %f382, 0f34000000;
	mul.f32 	%f383, %f281, %f282;
	bra.uni 	LBB0_46;
LBB0_36:                                // %__nv_fast_fdividef.exit.i.i.i1256
	mov.f32 	%f264, 0f40000000;
	div.approx.f32 	%f265, %f383, %f264;
	cvt.rzi.f32.f32 	%f47, %f265;
	fma.rn.f32 	%f48, %f47, 0fC0000000, %f383;
	mov.b32 	%r25, %f48;
	setp.lt.u32 	%p69, %r25, 1073741824;
	mov.f32 	%f381, %f47;
	@%p69 bra 	LBB0_41;
// %bb.37:
	setp.lt.u32 	%p70, %r25, -2147483647;
	@%p70 bra 	LBB0_39;
// %bb.38:
	add.f32 	%f270, %f47, 0fBF800000;
	setp.lt.f32 	%p73, %f48, 0fC0000000;
	selp.f32 	%f271, %f270, %f47, %p73;
	add.f32 	%f381, %f271, 0fBF800000;
	bra.uni 	LBB0_41;
LBB0_39:
	add.f32 	%f381, %f47, 0f3F800000;
	setp.ltu.f32 	%p71, %f48, 0f40800000;
	@%p71 bra 	LBB0_41;
// %bb.40:                              // %__nv_fmaf_rn.exit.i.i.i1261
	fma.rn.f32 	%f267, %f264, 0fC0400000, %f48;
	setp.ge.f32 	%p72, %f267, 0f00000000;
	selp.f32 	%f268, %f381, %f47, %p72;
	add.f32 	%f269, %f268, 0f3F800000;
	add.f32 	%f381, %f269, 0f3F800000;
LBB0_41:                                // %__internal_fmodf_fastpath_quot.exit.i.i1264
	fma.rn.f32 	%f383, %f381, 0fC0000000, %f383;
LBB0_46:                                // %__internal_fmodf_kernel.exit.i1293
	abs.f32 	%f283, %f383;
	setp.gtu.f32 	%p79, %f283, 0f7F800000;
	@%p79 bra 	LBB0_48;
// %bb.47:
	mov.b32 	%r384, %f45;
	and.b32  	%r385, %r384, -2147483648;
	mov.b32 	%r386, %f383;
	or.b32  	%r387, %r385, %r386;
	mov.b32 	%f383, %r387;
LBB0_48:                                // %__nv_fmodf.exit1296
	add.f32 	%f284, %f383, %f383;
	mov.b32 	%r388, %f284;
	and.b32  	%r389, %r388, -2147483648;
	or.b32  	%r390, %r389, 1056964608;
	mov.b32 	%f285, %r390;
	add.f32 	%f286, %f284, %f285;
	cvt.rzi.f32.f32 	%f287, %f286;
	abs.f32 	%f288, %f284;
	setp.gt.f32 	%p80, %f288, 0f4B000000;
	selp.f32 	%f289, %f284, %f287, %p80;
	cvt.rzi.f32.f32 	%f290, %f284;
	setp.lt.f32 	%p81, %f288, 0f3F000000;
	selp.f32 	%f291, %f290, %f289, %p81;
	cvt.rzi.s32.f32 	%r391, %f291;
	fma.rn.f32 	%f292, %f291, 0fBF000000, %f383;
	mul.f32 	%f293, %f292, %f292;
	fma.rn.f32 	%f294, %f293, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f295, %f293, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f296, %f294, %f293, 0fC0A55DF6;
	fma.rn.f32 	%f297, %f295, %f293, 0f4081E0CF;
	fma.rn.f32 	%f298, %f293, %f292, 0f00000000;
	fma.rn.f32 	%f299, %f297, %f293, 0fC09DE9E6;
	fma.rn.f32 	%f300, %f296, %f298, 0f00000000;
	fma.rn.f32 	%f301, %f299, %f293, 0f3F800000;
	fma.rn.f32 	%f302, %f292, 0f40490FDB, %f300;
	and.b32  	%r392, %r391, 1;
	setp.eq.b32 	%p82, %r392, 1;
	selp.f32 	%f303, %f301, %f302, %p82;
	selp.f32 	%f304, %f302, %f301, %p82;
	and.b32  	%r393, %r391, 2;
	setp.eq.s32 	%p83, %r393, 0;
	neg.f32 	%f305, %f303;
	selp.f32 	%f306, %f303, %f305, %p83;
	add.s32 	%r394, %r391, 1;
	and.b32  	%r395, %r394, 2;
	setp.eq.s32 	%p84, %r395, 0;
	mov.f32 	%f307, 0f00000000;
	sub.f32 	%f308, %f307, %f304;
	selp.f32 	%f309, %f304, %f308, %p84;
	cvt.rzi.f32.f32 	%f310, %f383;
	setp.eq.f32 	%p85, %f310, %f383;
	mul.f32 	%f311, %f383, 0f00000000;
	selp.f32 	%f386, %f311, %f306, %p85;
	abs.f32 	%f312, %f383;
	setp.gt.f32 	%p86, %f312, 0f4B800000;
	add.f32 	%f313, %f386, 0f3F800000;
	selp.f32 	%f385, %f313, %f309, %p86;
LBB0_49:                                // %L302
	selp.f32 	%f155, %f154, %f149, %p21;
	or.pred  	%p89, %p43, %p65;
	mov.f32 	%f392, %f391;
	@%p89 bra 	LBB0_65;
// %bb.50:                              // %L310
	mul.hi.u32 	%r397, %r3513, -1431655765;
	shr.u32 	%r398, %r397, 2;
	mul.lo.s32 	%r399, %r398, 6;
	sub.s32 	%r400, %r3513, %r399;
	cvt.rn.f32.s32 	%f315, %r400;
	div.approx.f32 	%f66, %f315, %f368;
	abs.f32 	%f389, %f66;
	setp.lt.f32 	%p90, %f389, 0f40000000;
	@%p90 bra 	LBB0_62;
// %bb.51:
	setp.gtu.f32 	%p91, %f389, 0f4B800000;
	@%p91 bra 	LBB0_58;
	bra.uni 	LBB0_52;
LBB0_58:
	mov.b32 	%r34, %f389;
	and.b32  	%r401, %r34, 8388607;
	or.b32  	%r3521, %r401, 1065353216;
	mov.b32 	%f388, %r3521;
	add.s32 	%r402, %r34, -1073741824;
	and.b32  	%r3522, %r402, -8388608;
	setp.eq.s32 	%p97, %r3522, 0;
	@%p97 bra 	LBB0_61;
// %bb.59:                              // %.lr.ph.preheader
	mov.f32 	%f326, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f325,%f326;
	// end inline asm
LBB0_60:                                // %.lr.ph
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r403, %r3522, 192937984;
	add.s32 	%r404, %r403, %r3521;
	mov.b32 	%f327, %r404;
	mul.f32 	%f328, %f325, %f327;
	sub.f32 	%f329, %f327, %f328;
	fma.rn.f32 	%f330, %f329, %f325, %f328;
	sub.f32 	%f331, %f327, %f330;
	fma.rz.f32 	%f332, %f331, %f325, %f330;
	cvt.rzi.f32.f32 	%f333, %f332;
	sub.f32 	%f388, %f327, %f333;
	sub.s32 	%r3522, %r3522, %r403;
	mov.b32 	%r3521, %f388;
	setp.ne.s32 	%p98, %r3522, 0;
	setp.ne.s32 	%p99, %r3521, 0;
	and.pred  	%p100, %p98, %p99;
	@%p100 bra 	LBB0_60;
LBB0_61:                                // %__internal_fmodf_slowpath_mod.exit.i.i1343
	setp.gt.u32 	%p101, %r34, 2139095039;
	selp.f32 	%f334, 0f7FFFFFFF, 0f4B800000, %p101;
	mul.f32 	%f335, %f388, 0f34000000;
	mul.f32 	%f389, %f334, %f335;
	bra.uni 	LBB0_62;
LBB0_52:                                // %__nv_fast_fdividef.exit.i.i.i1309
	mov.f32 	%f317, 0f40000000;
	div.approx.f32 	%f318, %f389, %f317;
	cvt.rzi.f32.f32 	%f68, %f318;
	fma.rn.f32 	%f69, %f68, 0fC0000000, %f389;
	mov.b32 	%r33, %f69;
	setp.lt.u32 	%p92, %r33, 1073741824;
	mov.f32 	%f387, %f68;
	@%p92 bra 	LBB0_57;
// %bb.53:
	setp.lt.u32 	%p93, %r33, -2147483647;
	@%p93 bra 	LBB0_55;
// %bb.54:
	add.f32 	%f323, %f68, 0fBF800000;
	setp.lt.f32 	%p96, %f69, 0fC0000000;
	selp.f32 	%f324, %f323, %f68, %p96;
	add.f32 	%f387, %f324, 0fBF800000;
	bra.uni 	LBB0_57;
LBB0_55:
	add.f32 	%f387, %f68, 0f3F800000;
	setp.ltu.f32 	%p94, %f69, 0f40800000;
	@%p94 bra 	LBB0_57;
// %bb.56:                              // %__nv_fmaf_rn.exit.i.i.i1314
	fma.rn.f32 	%f320, %f317, 0fC0400000, %f69;
	setp.ge.f32 	%p95, %f320, 0f00000000;
	selp.f32 	%f321, %f387, %f68, %p95;
	add.f32 	%f322, %f321, 0f3F800000;
	add.f32 	%f387, %f322, 0f3F800000;
LBB0_57:                                // %__internal_fmodf_fastpath_quot.exit.i.i1317
	fma.rn.f32 	%f389, %f387, 0fC0000000, %f389;
LBB0_62:                                // %__internal_fmodf_kernel.exit.i1346
	abs.f32 	%f336, %f389;
	setp.gtu.f32 	%p102, %f336, 0f7F800000;
	@%p102 bra 	LBB0_64;
// %bb.63:
	mov.b32 	%r405, %f66;
	and.b32  	%r406, %r405, -2147483648;
	mov.b32 	%r407, %f389;
	or.b32  	%r408, %r406, %r407;
	mov.b32 	%f389, %r408;
LBB0_64:                                // %__nv_fmodf.exit1349
	add.f32 	%f337, %f389, %f389;
	mov.b32 	%r409, %f337;
	and.b32  	%r410, %r409, -2147483648;
	or.b32  	%r411, %r410, 1056964608;
	mov.b32 	%f338, %r411;
	add.f32 	%f339, %f337, %f338;
	cvt.rzi.f32.f32 	%f340, %f339;
	abs.f32 	%f341, %f337;
	setp.gt.f32 	%p103, %f341, 0f4B000000;
	selp.f32 	%f342, %f337, %f340, %p103;
	cvt.rzi.f32.f32 	%f343, %f337;
	setp.lt.f32 	%p104, %f341, 0f3F000000;
	selp.f32 	%f344, %f343, %f342, %p104;
	cvt.rzi.s32.f32 	%r412, %f344;
	fma.rn.f32 	%f345, %f344, 0fBF000000, %f389;
	mul.f32 	%f346, %f345, %f345;
	fma.rn.f32 	%f347, %f346, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f348, %f346, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f349, %f347, %f346, 0fC0A55DF6;
	fma.rn.f32 	%f350, %f348, %f346, 0f4081E0CF;
	fma.rn.f32 	%f351, %f346, %f345, 0f00000000;
	fma.rn.f32 	%f352, %f350, %f346, 0fC09DE9E6;
	fma.rn.f32 	%f353, %f349, %f351, 0f00000000;
	fma.rn.f32 	%f354, %f352, %f346, 0f3F800000;
	fma.rn.f32 	%f355, %f345, 0f40490FDB, %f353;
	and.b32  	%r413, %r412, 1;
	setp.eq.b32 	%p105, %r413, 1;
	selp.f32 	%f356, %f354, %f355, %p105;
	selp.f32 	%f357, %f355, %f354, %p105;
	and.b32  	%r414, %r412, 2;
	setp.eq.s32 	%p106, %r414, 0;
	neg.f32 	%f358, %f356;
	selp.f32 	%f359, %f356, %f358, %p106;
	add.s32 	%r415, %r412, 1;
	and.b32  	%r416, %r415, 2;
	setp.eq.s32 	%p107, %r416, 0;
	mov.f32 	%f360, 0f00000000;
	sub.f32 	%f361, %f360, %f357;
	selp.f32 	%f362, %f357, %f361, %p107;
	cvt.rzi.f32.f32 	%f363, %f389;
	setp.eq.f32 	%p108, %f363, %f389;
	mul.f32 	%f364, %f389, 0f00000000;
	selp.f32 	%f392, %f364, %f359, %p108;
	abs.f32 	%f365, %f389;
	setp.gt.f32 	%p109, %f365, 0f4B800000;
	add.f32 	%f366, %f392, 0f3F800000;
	selp.f32 	%f391, %f366, %f362, %p109;
LBB0_65:                                // %L326
	mov.b32 	%r323, %f155;
	mov.b32 	%r326, %f152;
	mov.b32 	%r418, %f385;
	mov.b32 	%r419, %f391;
	mov.b32 	%r424, %f386;
	mov.b32 	%r425, %f392;
	mov.u32 	%r3523, 999999999;
	cvt.u16.u32 	%rs270, %r2;
	@%p65 bra 	LBB0_67;
// %bb.66:                              // %L369
	ld.param.u64 	%rd1, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1];
	and.b16  	%rs16, %rs270, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 12;
	mul.lo.s16 	%rs19, %rs18, 24;
	sub.s16 	%rs20, %rs270, %rs19;
	cvt.u32.u16 	%r430, %rs20;
	and.b32  	%r431, %r430, 255;
	mad.lo.s32 	%r432, %r431, 24, %r3;
	cvt.u16.u32 	%rs21, %r432;
	mul.hi.u16 	%rs22, %rs21, -7281;
	shr.u16 	%rs23, %rs22, 9;
	mul.lo.s16 	%rs24, %rs23, 576;
	sub.s16 	%rs25, %rs21, %rs24;
	cvt.u32.u16 	%r433, %rs25;
	mul.wide.u32 	%rd21, %r433, 4;
	add.s64 	%rd22, %rd1, %rd21;
	ld.global.u32 	%r434, [%rd22];
	cvt.s32.s16 	%r435, %r434;
	shr.s32 	%r436, %r434, 16;
	mul.lo.s32 	%r437, %r436, 801;
	mad.lo.s32 	%r3523, %r435, 33, %r437;
LBB0_67:                                // %L455
	xor.b32  	%r322, %r326, -2147483648;
	mov.b32 	%r374, %f373;
	mov.b32 	%r375, %f379;
	mov.b32 	%r377, %f374;
	mov.b32 	%r378, %f380;
	xor.b32  	%r421, %r424, -2147483648;
	xor.b32  	%r422, %r425, -2147483648;
	and.b32  	%r47, %r2, 24;
	setp.ne.s32 	%p111, %r47, 24;
	cvt.u16.u32 	%rs271, %r6;
	@%p111 bra 	LBB0_69;
// %bb.68:                              // %L455.L799_crit_edge
	mul.lo.s16 	%rs39, %rs271, 171;
	shr.u16 	%rs40, %rs39, 10;
	mul.lo.s16 	%rs41, %rs40, 6;
	sub.s16 	%rs42, %rs271, %rs41;
	cvt.u32.u16 	%r449, %rs42;
	and.b32  	%r3527, %r449, 255;
	cvt.u16.u32 	%rs43, %r3;
	and.b16  	%rs44, %rs43, 255;
	mul.lo.s16 	%rs45, %rs44, 171;
	shr.u16 	%rs46, %rs45, 10;
	cvt.u32.u16 	%r3526, %rs46;
	mul.lo.s16 	%rs47, %rs46, -6;
	add.s16 	%rs48, %rs47, %rs43;
	cvt.u32.u16 	%r451, %rs48;
	and.b32  	%r3525, %r451, 255;
	mul.wide.u16 	%r3524, %rs46, 6;
	mov.u32 	%r3528, 0;
	mov.u32 	%r3529, %r3528;
	bra.uni 	LBB0_70;
LBB0_69:                                // %L484
	ld.param.u64 	%rd2, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2];
	mul.lo.s32 	%r438, %r5, 144;
	mul.lo.s16 	%rs27, %rs271, 171;
	shr.u16 	%rs28, %rs27, 10;
	mul.lo.s16 	%rs29, %rs28, 6;
	sub.s16 	%rs30, %rs271, %rs29;
	cvt.u32.u16 	%r439, %rs30;
	and.b32  	%r3527, %r439, 255;
	and.b16  	%rs31, %rs30, 255;
	mul.wide.u16 	%r440, %rs31, 24;
	cvt.u16.u32 	%rs32, %r3;
	and.b16  	%rs33, %rs32, 255;
	mul.lo.s16 	%rs34, %rs33, 171;
	shr.u16 	%rs35, %rs34, 10;
	cvt.u32.u16 	%r3526, %rs35;
	mul.wide.u16 	%r3524, %rs35, 6;
	mul.lo.s32 	%r442, %r1, 1152;
	mul.lo.s16 	%rs36, %rs35, -6;
	add.s16 	%rs37, %rs36, %rs32;
	cvt.u32.u16 	%r443, %rs37;
	and.b32  	%r3525, %r443, 255;
	add.s32 	%r444, %r440, %r438;
	add.s32 	%r445, %r444, %r442;
	add.s32 	%r446, %r445, %r3524;
	add.s32 	%r447, %r446, %r3525;
	mul.wide.u32 	%rd23, %r447, 4;
	add.s64 	%rd24, %rd2, %rd23;
	ld.global.u32 	%r3528, [%rd24];
	cvt.u64.u16 	%rd25, %rs37;
	and.b64  	%rd26, %rd25, 255;
	cvt.u64.u32 	%rd27, %r3524;
	cvt.u64.u32 	%rd28, %r442;
	cvt.u64.u32 	%rd29, %r440;
	cvt.u64.u32 	%rd30, %r438;
	add.s64 	%rd31, %rd30, %rd29;
	add.s64 	%rd32, %rd31, %rd28;
	add.s64 	%rd33, %rd32, %rd27;
	add.s64 	%rd34, %rd33, %rd26;
	shl.b64 	%rd35, %rd34, 2;
	add.s64 	%rd36, %rd2, %rd35;
	ld.global.u32 	%r3529, [%rd36+2304];
LBB0_70:                                // %L799
	ld.param.u64 	%rd3, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3];
	ld.param.u64 	%rd4, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4];
	// begin inline asm
	cvt.rn.f16x2.f32 %r321, %r323, %r322;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r324, %r326, %r323;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r373, %r375, %r374;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r376, %r378, %r377;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r417, %r419, %r418;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r420, %r422, %r421;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r423, %r425, %r424;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r426, %r419, %r418;
	// end inline asm
	mov.u32 	%r3514, 0;
	shl.b32 	%r453, %r2, 2;
	and.b32  	%r454, %r453, 60;
	shl.b32 	%r455, %r1, 8;
	shl.b32 	%r456, %r2, 3;
	and.b32  	%r457, %r456, 128;
	or.b32  	%r458, %r455, %r454;
	or.b32  	%r64, %r457, %r458;
	or.b32  	%r459, %r453, %r455;
	or.b32  	%r460, %r459, %r457;
	or.b32  	%r65, %r460, 65;
	shr.u32 	%r66, %r2, 4;
	and.b32  	%r461, %r246, 30;
	or.b32  	%r462, %r461, %r66;
	mul.lo.s32 	%r67, %r462, 257;
	or.b32  	%r463, %r66, %r246;
	or.b32  	%r464, %r463, 32;
	mul.lo.s32 	%r68, %r464, 257;
	and.b32  	%r69, %r4, 224;
	and.b16  	%rs50, %rs270, 255;
	mul.lo.s16 	%rs51, %rs50, 171;
	shr.u16 	%rs52, %rs51, 12;
	mul.lo.s16 	%rs53, %rs52, 24;
	sub.s16 	%rs54, %rs270, %rs53;
	cvt.u32.u16 	%r465, %rs54;
	and.b32  	%r70, %r465, 255;
	shr.u32 	%r466, %r3, 3;
	mad.lo.s32 	%r71, %r466, 257, %r69;
	add.s32 	%r467, %r3, 24;
	shr.u32 	%r468, %r467, 3;
	mul.lo.s32 	%r72, %r468, 257;
	add.s32 	%r469, %r3, 48;
	shr.u32 	%r470, %r469, 3;
	mul.lo.s32 	%r73, %r470, 257;
	add.s32 	%r471, %r3, 72;
	shr.u32 	%r472, %r471, 3;
	mul.lo.s32 	%r74, %r472, 257;
	or.b32  	%r473, %r466, 12;
	mul.lo.s32 	%r75, %r473, 257;
	add.s32 	%r474, %r3, 120;
	shr.u32 	%r475, %r474, 3;
	mul.lo.s32 	%r76, %r475, 257;
	add.s32 	%r476, %r3, 144;
	shr.u32 	%r477, %r476, 3;
	mul.lo.s32 	%r77, %r477, 257;
	add.s32 	%r478, %r3, 168;
	shr.u32 	%r479, %r478, 3;
	mul.lo.s32 	%r78, %r479, 257;
	or.b32  	%r480, %r466, 24;
	mul.lo.s32 	%r79, %r480, 257;
	add.s32 	%r481, %r3, 216;
	shr.u32 	%r482, %r481, 3;
	mul.lo.s32 	%r80, %r482, 257;
	add.s32 	%r483, %r3, 240;
	shr.u32 	%r484, %r483, 3;
	mul.lo.s32 	%r81, %r484, 257;
	add.s32 	%r485, %r3, 264;
	shr.u32 	%r486, %r485, 3;
	mul.lo.s32 	%r82, %r486, 257;
	or.b32  	%r487, %r466, 36;
	mul.lo.s32 	%r83, %r487, 257;
	add.s32 	%r488, %r3, 312;
	shr.u32 	%r489, %r488, 3;
	mul.lo.s32 	%r84, %r489, 257;
	add.s32 	%r490, %r3, 336;
	shr.u32 	%r491, %r490, 3;
	mul.lo.s32 	%r85, %r491, 257;
	add.s32 	%r492, %r3, 360;
	shr.u32 	%r493, %r492, 3;
	mul.lo.s32 	%r86, %r493, 257;
	or.b32  	%r494, %r466, 48;
	mul.lo.s32 	%r87, %r494, 257;
	add.s32 	%r495, %r3, 408;
	shr.u32 	%r496, %r495, 3;
	mul.lo.s32 	%r88, %r496, 257;
	add.s32 	%r497, %r3, 432;
	shr.u32 	%r498, %r497, 3;
	mul.lo.s32 	%r89, %r498, 257;
	add.s32 	%r499, %r3, 456;
	shr.u32 	%r500, %r499, 3;
	mul.lo.s32 	%r90, %r500, 257;
	or.b32  	%r501, %r466, 60;
	mul.lo.s32 	%r91, %r501, 257;
	add.s32 	%r502, %r3, 504;
	bfe.u32 	%r503, %r502, 3, 6;
	mul.lo.s32 	%r92, %r503, 257;
	mul.lo.s32 	%r93, %r3527, 801;
	mul.lo.s32 	%r94, %r5, 4806;
	mul.lo.s32 	%r95, %r3526, 198;
	mul.lo.s32 	%r96, %r3525, 33;
	bfe.u32 	%r504, %r2, 1, 1;
	mul.lo.s32 	%r505, %r504, 2056;
	and.b32  	%r506, %r2, 1;
	mul.lo.s32 	%r507, %r506, 4112;
	and.b32  	%r508, %r6, 1;
	mul.lo.s32 	%r509, %r508, 1028;
	mul.lo.s32 	%r510, %r66, 257;
	bfe.u32 	%r511, %r2, 3, 1;
	mul.lo.s32 	%r512, %r511, 514;
	add.s32 	%r513, %r507, %r505;
	add.s32 	%r514, %r513, %r509;
	add.s32 	%r515, %r514, %r3524;
	add.s32 	%r516, %r515, %r3525;
	add.s32 	%r517, %r516, %r510;
	add.s32 	%r97, %r517, %r512;
	mul.wide.u32 	%rd37, %r97, 4;
	mov.u64 	%rd38, shmem;
	add.s64 	%rd6, %rd38, %rd37;
	cvt.u64.u32 	%rd39, %r512;
	cvt.u64.u32 	%rd40, %r510;
	cvt.u64.u32 	%rd41, %r3525;
	cvt.u64.u32 	%rd42, %r3524;
	cvt.u64.u32 	%rd43, %r509;
	cvt.u64.u32 	%rd44, %r507;
	cvt.u64.u32 	%rd45, %r505;
	add.s64 	%rd46, %rd45, %rd44;
	add.s64 	%rd47, %rd46, %rd43;
	add.s64 	%rd48, %rd47, %rd42;
	add.s64 	%rd49, %rd48, %rd41;
	add.s64 	%rd50, %rd49, %rd40;
	add.s64 	%rd51, %rd50, %rd39;
	shl.b64 	%rd52, %rd51, 2;
	add.s64 	%rd7, %rd38, %rd52;
	bfe.u32 	%r518, %r3, 1, 1;
	mul.lo.s32 	%r519, %r518, 2056;
	and.b32  	%r520, %r3, 1;
	bfe.u32 	%r521, %r3, 2, 1;
	shr.u32 	%r522, %r3, 4;
	bfe.u32 	%r523, %r3, 3, 1;
	mad.lo.s32 	%r524, %r520, 4112, %r519;
	mad.lo.s32 	%r525, %r521, 1028, %r524;
	mad.lo.s32 	%r526, %r5, 6, %r525;
	add.s32 	%r527, %r526, %r3527;
	mad.lo.s32 	%r528, %r522, 257, %r527;
	mad.lo.s32 	%r98, %r523, 514, %r528;
	mul.wide.u32 	%rd53, %r98, 4;
	add.s64 	%rd8, %rd38, %rd53;
	add.s32 	%r529, %r98, 8256;
	mul.wide.u32 	%rd54, %r529, 4;
	add.s64 	%rd9, %rd38, %rd54;
	add.s32 	%r530, %r98, 32;
	mul.wide.u32 	%rd55, %r530, 4;
	add.s64 	%rd10, %rd38, %rd55;
	add.s32 	%r531, %r98, 8288;
	mul.wide.u32 	%rd56, %r531, 4;
	add.s64 	%rd11, %rd38, %rd56;
	cvt.u16.u32 	%rs55, %r3;
	shl.b16 	%rs56, %rs55, 1;
	and.b16  	%rs57, %rs56, 254;
	mul.lo.s16 	%rs58, %rs57, 171;
	shr.u16 	%rs59, %rs58, 13;
	mul.lo.s16 	%rs60, %rs59, 48;
	sub.s16 	%rs61, %rs56, %rs60;
	and.b16  	%rs62, %rs61, 254;
	mul.wide.u16 	%r99, %rs62, 24;
	mul.lo.s32 	%r100, %r1, 58752;
	or.b16  	%rs63, %rs56, 1;
	and.b16  	%rs64, %rs63, 255;
	mul.lo.s16 	%rs65, %rs64, 171;
	shr.u16 	%rs66, %rs65, 13;
	mul.lo.s16 	%rs67, %rs66, 48;
	sub.s16 	%rs68, %rs63, %rs67;
	and.b16  	%rs69, %rs68, 255;
	mul.wide.u16 	%r101, %rs69, 24;
	cvt.u64.u32 	%rd57, %r96;
	cvt.u64.u32 	%rd58, %r95;
	cvt.u64.u32 	%rd59, %r93;
	cvt.u64.u32 	%rd60, %r94;
	add.s64 	%rd61, %rd60, %rd59;
	add.s64 	%rd62, %rd61, %rd58;
	add.s64 	%rd63, %rd62, %rd57;
	shl.b64 	%rd64, %rd63, 2;
	add.s64 	%rd12, %rd38, %rd64;
	setp.gt.u32 	%p112, %r3, 7;
	setp.eq.s32 	%p113, %r66, 1;
	setp.lt.u32 	%p115, %r2, 24;
	mov.u32 	%r3530, %r3514;
	mov.u32 	%r3561, %r3514;
	mov.u32 	%r3562, %r3514;
	mov.u32 	%r3563, %r3514;
	mov.u32 	%r3564, %r3514;
	bra.uni 	LBB0_71;
LBB0_92:                                // %L35329
                                        //   in Loop: Header=BB0_71 Depth=1
	add.s32 	%r235, %r3530, 48;
	setp.ne.s32 	%p141, %r3530, 2016;
	mov.u32 	%r3530, %r235;
	@%p141 bra 	LBB0_71;
	bra.uni 	LBB0_93;
LBB0_71:                                // %L802
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_73 Depth 2
                                        //     Child Loop BB0_83 Depth 2
	mul.hi.u32 	%r725, %r3530, -1431655765;
	shr.u32 	%r726, %r725, 5;
	mul.lo.s32 	%r107, %r726, 48;
	add.s32 	%r727, %r3, %r107;
	cvt.u16.u32 	%rs70, %r727;
	mul.hi.s16 	%rs71, %rs70, 16257;
	shr.u16 	%rs72, %rs71, 15;
	shr.s16 	%rs73, %rs71, 9;
	add.s16 	%rs74, %rs73, %rs72;
	mul.lo.s16 	%rs75, %rs74, 2064;
	sub.s16 	%rs76, %rs70, %rs75;
	cvt.u32.u16 	%r728, %rs76;
	shl.b32 	%r729, %r728, 16;
	or.b32  	%r730, %r64, %r729;
	mul.wide.s32 	%rd65, %r730, 4;
	add.s64 	%rd66, %rd3, %rd65;
	ld.global.v4.u32 	{%r731, %r732, %r733, %r734}, [%rd66];
	or.b32  	%r735, %r65, %r729;
	add.s32 	%r736, %r735, -1;
	mul.wide.s32 	%rd67, %r736, 4;
	add.s64 	%rd68, %rd3, %rd67;
	ld.global.v4.u32 	{%r737, %r738, %r739, %r740}, [%rd68];
	add.s16 	%rs77, %rs70, 24;
	mul.hi.s16 	%rs78, %rs77, 16257;
	shr.u16 	%rs79, %rs78, 15;
	shr.s16 	%rs80, %rs78, 9;
	add.s16 	%rs81, %rs80, %rs79;
	mul.lo.s16 	%rs82, %rs81, 2064;
	sub.s16 	%rs83, %rs77, %rs82;
	cvt.u32.u16 	%r741, %rs83;
	shl.b32 	%r742, %r741, 16;
	or.b32  	%r743, %r64, %r742;
	mul.wide.s32 	%rd69, %r743, 4;
	add.s64 	%rd70, %rd3, %rd69;
	ld.global.v4.u32 	{%r744, %r745, %r746, %r747}, [%rd70];
	or.b32  	%r748, %r65, %r742;
	add.s32 	%r749, %r748, -1;
	mul.wide.s32 	%rd71, %r749, 4;
	add.s64 	%rd72, %rd3, %rd71;
	ld.global.v4.u32 	{%r750, %r751, %r752, %r753}, [%rd72];
	selp.b32 	%r754, %r731, %r733, %p113;
	shfl.sync.bfly.b32	%r755, %r754, 16, 31, -1;
	selp.b32 	%r534, %r755, %r731, %p113;
	selp.b32 	%r539, %r733, %r755, %p113;
	selp.b32 	%r756, %r732, %r734, %p113;
	shfl.sync.bfly.b32	%r757, %r756, 16, 31, -1;
	selp.b32 	%r542, %r757, %r732, %p113;
	selp.b32 	%r547, %r734, %r757, %p113;
	selp.b32 	%r758, %r737, %r739, %p113;
	shfl.sync.bfly.b32	%r759, %r758, 16, 31, -1;
	selp.b32 	%r550, %r759, %r737, %p113;
	selp.b32 	%r555, %r739, %r759, %p113;
	selp.b32 	%r760, %r738, %r740, %p113;
	shfl.sync.bfly.b32	%r761, %r760, 16, 31, -1;
	selp.b32 	%r558, %r761, %r738, %p113;
	selp.b32 	%r563, %r740, %r761, %p113;
	selp.b32 	%r762, %r744, %r746, %p113;
	shfl.sync.bfly.b32	%r763, %r762, 16, 31, -1;
	selp.b32 	%r566, %r763, %r744, %p113;
	selp.b32 	%r571, %r746, %r763, %p113;
	selp.b32 	%r764, %r745, %r747, %p113;
	shfl.sync.bfly.b32	%r765, %r764, 16, 31, -1;
	selp.b32 	%r574, %r765, %r745, %p113;
	selp.b32 	%r579, %r747, %r765, %p113;
	selp.b32 	%r766, %r750, %r752, %p113;
	shfl.sync.bfly.b32	%r767, %r766, 16, 31, -1;
	selp.b32 	%r582, %r767, %r750, %p113;
	selp.b32 	%r587, %r752, %r767, %p113;
	selp.b32 	%r768, %r751, %r753, %p113;
	shfl.sync.bfly.b32	%r769, %r768, 16, 31, -1;
	selp.b32 	%r590, %r769, %r751, %p113;
	selp.b32 	%r595, %r753, %r769, %p113;
	shl.b32 	%r535, %r539, 4;
	mov.u32 	%r533, 252645135;
	// begin inline asm
	lop3.b32 %r597, %r533, %r534, %r535, 202;
	// end inline asm
	shr.u32 	%r538, %r534, 4;
	// begin inline asm
	lop3.b32 %r613, %r533, %r538, %r539, 202;
	// end inline asm
	shl.b32 	%r543, %r547, 4;
	// begin inline asm
	lop3.b32 %r605, %r533, %r542, %r543, 202;
	// end inline asm
	shr.u32 	%r546, %r542, 4;
	// begin inline asm
	lop3.b32 %r621, %r533, %r546, %r547, 202;
	// end inline asm
	shl.b32 	%r551, %r555, 4;
	// begin inline asm
	lop3.b32 %r629, %r533, %r550, %r551, 202;
	// end inline asm
	shr.u32 	%r554, %r550, 4;
	// begin inline asm
	lop3.b32 %r645, %r533, %r554, %r555, 202;
	// end inline asm
	shl.b32 	%r559, %r563, 4;
	// begin inline asm
	lop3.b32 %r637, %r533, %r558, %r559, 202;
	// end inline asm
	shr.u32 	%r562, %r558, 4;
	// begin inline asm
	lop3.b32 %r653, %r533, %r562, %r563, 202;
	// end inline asm
	shl.b32 	%r567, %r571, 4;
	// begin inline asm
	lop3.b32 %r598, %r533, %r566, %r567, 202;
	// end inline asm
	shr.u32 	%r570, %r566, 4;
	// begin inline asm
	lop3.b32 %r614, %r533, %r570, %r571, 202;
	// end inline asm
	shl.b32 	%r575, %r579, 4;
	// begin inline asm
	lop3.b32 %r606, %r533, %r574, %r575, 202;
	// end inline asm
	shr.u32 	%r578, %r574, 4;
	// begin inline asm
	lop3.b32 %r622, %r533, %r578, %r579, 202;
	// end inline asm
	shl.b32 	%r583, %r587, 4;
	// begin inline asm
	lop3.b32 %r630, %r533, %r582, %r583, 202;
	// end inline asm
	shr.u32 	%r586, %r582, 4;
	// begin inline asm
	lop3.b32 %r646, %r533, %r586, %r587, 202;
	// end inline asm
	shl.b32 	%r591, %r595, 4;
	// begin inline asm
	lop3.b32 %r638, %r533, %r590, %r591, 202;
	// end inline asm
	shr.u32 	%r594, %r590, 4;
	// begin inline asm
	lop3.b32 %r654, %r533, %r594, %r595, 202;
	// end inline asm
	mov.u32 	%r599, 25152;
	// begin inline asm
	prmt.b32 %r661, %r597, %r598, %r599;
	// end inline asm
	mov.u32 	%r603, 29521;
	// begin inline asm
	prmt.b32 %r693, %r597, %r598, %r603;
	// end inline asm
	// begin inline asm
	prmt.b32 %r669, %r605, %r606, %r599;
	// end inline asm
	// begin inline asm
	prmt.b32 %r701, %r605, %r606, %r603;
	// end inline asm
	// begin inline asm
	prmt.b32 %r662, %r613, %r614, %r599;
	// end inline asm
	// begin inline asm
	prmt.b32 %r694, %r613, %r614, %r603;
	// end inline asm
	// begin inline asm
	prmt.b32 %r670, %r621, %r622, %r599;
	// end inline asm
	// begin inline asm
	prmt.b32 %r702, %r621, %r622, %r603;
	// end inline asm
	// begin inline asm
	prmt.b32 %r677, %r629, %r630, %r599;
	// end inline asm
	// begin inline asm
	prmt.b32 %r709, %r629, %r630, %r603;
	// end inline asm
	// begin inline asm
	prmt.b32 %r685, %r637, %r638, %r599;
	// end inline asm
	// begin inline asm
	prmt.b32 %r717, %r637, %r638, %r603;
	// end inline asm
	// begin inline asm
	prmt.b32 %r678, %r645, %r646, %r599;
	// end inline asm
	// begin inline asm
	prmt.b32 %r710, %r645, %r646, %r603;
	// end inline asm
	// begin inline asm
	prmt.b32 %r686, %r653, %r654, %r599;
	// end inline asm
	// begin inline asm
	prmt.b32 %r718, %r653, %r654, %r603;
	// end inline asm
	mov.u32 	%r719, 21520;
	// begin inline asm
	prmt.b32 %r660, %r661, %r662, %r719;
	// end inline asm
	mov.u32 	%r723, 30258;
	// begin inline asm
	prmt.b32 %r664, %r661, %r662, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r668, %r669, %r670, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r672, %r669, %r670, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r676, %r677, %r678, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r680, %r677, %r678, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r684, %r685, %r686, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r688, %r685, %r686, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r692, %r693, %r694, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r696, %r693, %r694, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r700, %r701, %r702, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r704, %r701, %r702, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r708, %r709, %r710, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r712, %r709, %r710, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r716, %r717, %r718, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r720, %r717, %r718, %r723;
	// end inline asm
	mul.hi.s16 	%rs84, %rs70, 10923;
	shr.u16 	%rs85, %rs84, 15;
	shr.s16 	%rs86, %rs84, 2;
	add.s16 	%rs87, %rs86, %rs85;
	mul.lo.s16 	%rs88, %rs87, 24;
	sub.s16 	%rs89, %rs70, %rs88;
	cvt.s32.s16 	%r770, %rs89;
	add.s32 	%r771, %r67, %r770;
	mul.wide.s32 	%rd73, %r771, 4;
	add.s64 	%rd75, %rd38, %rd73;
	st.shared.u32 	[%rd75], %r660;
	st.shared.u32 	[%rd75+512], %r668;
	st.shared.u32 	[%rd75+256], %r664;
	st.shared.u32 	[%rd75+768], %r672;
	add.s32 	%r772, %r68, %r770;
	mul.wide.s32 	%rd76, %r772, 4;
	add.s64 	%rd77, %rd38, %rd76;
	st.shared.u32 	[%rd77], %r676;
	st.shared.u32 	[%rd77+512], %r684;
	st.shared.u32 	[%rd77+256], %r680;
	st.shared.u32 	[%rd77+768], %r688;
	st.shared.u32 	[%rd75+128], %r692;
	st.shared.u32 	[%rd75+640], %r700;
	st.shared.u32 	[%rd75+384], %r696;
	st.shared.u32 	[%rd75+896], %r704;
	st.shared.u32 	[%rd77+128], %r708;
	st.shared.u32 	[%rd77+640], %r716;
	st.shared.u32 	[%rd77+384], %r712;
	st.shared.u32 	[%rd77+896], %r720;
	bar.sync 	0;
	add.s32 	%r773, %r107, %r70;
	cvt.u16.u32 	%rs90, %r773;
	mul.hi.s16 	%rs91, %rs90, 10923;
	shr.u16 	%rs92, %rs91, 15;
	shr.s16 	%rs93, %rs91, 2;
	add.s16 	%rs94, %rs93, %rs92;
	mul.lo.s16 	%rs95, %rs94, 24;
	sub.s16 	%rs96, %rs90, %rs95;
	cvt.s32.s16 	%r774, %rs96;
	add.s32 	%r775, %r71, %r774;
	mul.wide.s32 	%rd78, %r775, 4;
	add.s64 	%rd79, %rd38, %rd78;
	ld.shared.u32 	%r776, [%rd79];
	add.s32 	%r777, %r69, %r774;
	add.s32 	%r778, %r777, %r72;
	mul.wide.u32 	%rd80, %r778, 4;
	add.s64 	%rd81, %rd38, %rd80;
	ld.shared.u32 	%r779, [%rd81];
	add.s32 	%r780, %r777, %r73;
	mul.wide.u32 	%rd82, %r780, 4;
	add.s64 	%rd83, %rd38, %rd82;
	ld.shared.u32 	%r781, [%rd83];
	add.s32 	%r782, %r777, %r74;
	mul.wide.u32 	%rd84, %r782, 4;
	add.s64 	%rd85, %rd38, %rd84;
	ld.shared.u32 	%r783, [%rd85];
	add.s32 	%r784, %r777, %r75;
	mul.wide.s32 	%rd86, %r784, 4;
	add.s64 	%rd87, %rd38, %rd86;
	ld.shared.u32 	%r785, [%rd87];
	add.s32 	%r786, %r777, %r76;
	mul.wide.u32 	%rd88, %r786, 4;
	add.s64 	%rd89, %rd38, %rd88;
	ld.shared.u32 	%r787, [%rd89];
	add.s32 	%r788, %r777, %r77;
	mul.wide.u32 	%rd90, %r788, 4;
	add.s64 	%rd91, %rd38, %rd90;
	ld.shared.u32 	%r789, [%rd91];
	add.s32 	%r790, %r777, %r78;
	mul.wide.u32 	%rd92, %r790, 4;
	add.s64 	%rd93, %rd38, %rd92;
	ld.shared.u32 	%r791, [%rd93];
	add.s32 	%r792, %r777, %r79;
	mul.wide.s32 	%rd94, %r792, 4;
	add.s64 	%rd95, %rd38, %rd94;
	ld.shared.u32 	%r793, [%rd95];
	add.s32 	%r794, %r777, %r80;
	mul.wide.u32 	%rd96, %r794, 4;
	add.s64 	%rd97, %rd38, %rd96;
	ld.shared.u32 	%r795, [%rd97];
	add.s32 	%r796, %r777, %r81;
	mul.wide.u32 	%rd98, %r796, 4;
	add.s64 	%rd99, %rd38, %rd98;
	ld.shared.u32 	%r797, [%rd99];
	add.s32 	%r798, %r777, %r82;
	mul.wide.u32 	%rd100, %r798, 4;
	add.s64 	%rd101, %rd38, %rd100;
	ld.shared.u32 	%r799, [%rd101];
	add.s32 	%r800, %r777, %r83;
	mul.wide.s32 	%rd102, %r800, 4;
	add.s64 	%rd103, %rd38, %rd102;
	ld.shared.u32 	%r801, [%rd103];
	add.s32 	%r802, %r777, %r84;
	mul.wide.u32 	%rd104, %r802, 4;
	add.s64 	%rd105, %rd38, %rd104;
	ld.shared.u32 	%r803, [%rd105];
	add.s32 	%r804, %r777, %r85;
	mul.wide.u32 	%rd106, %r804, 4;
	add.s64 	%rd107, %rd38, %rd106;
	ld.shared.u32 	%r805, [%rd107];
	add.s32 	%r806, %r777, %r86;
	mul.wide.u32 	%rd108, %r806, 4;
	add.s64 	%rd109, %rd38, %rd108;
	ld.shared.u32 	%r807, [%rd109];
	add.s32 	%r808, %r777, %r87;
	mul.wide.s32 	%rd110, %r808, 4;
	add.s64 	%rd111, %rd38, %rd110;
	ld.shared.u32 	%r809, [%rd111];
	add.s32 	%r810, %r777, %r88;
	mul.wide.u32 	%rd112, %r810, 4;
	add.s64 	%rd113, %rd38, %rd112;
	ld.shared.u32 	%r811, [%rd113];
	add.s32 	%r812, %r777, %r89;
	mul.wide.u32 	%rd114, %r812, 4;
	add.s64 	%rd115, %rd38, %rd114;
	ld.shared.u32 	%r813, [%rd115];
	add.s32 	%r814, %r777, %r90;
	mul.wide.u32 	%rd116, %r814, 4;
	add.s64 	%rd117, %rd38, %rd116;
	ld.shared.u32 	%r815, [%rd117];
	add.s32 	%r816, %r777, %r91;
	mul.wide.s32 	%rd118, %r816, 4;
	add.s64 	%rd119, %rd38, %rd118;
	ld.shared.u32 	%r817, [%rd119];
	add.s32 	%r818, %r777, %r92;
	mul.wide.s32 	%rd120, %r818, 4;
	add.s64 	%rd121, %rd38, %rd120;
	ld.shared.u32 	%r819, [%rd121];
	bar.sync 	0;
	shfl.sync.idx.b32	%r820, %r3523, 0, 31, -1;
	shfl.sync.idx.b32	%r821, %r3523, 1, 31, -1;
	shfl.sync.idx.b32	%r822, %r3523, 2, 31, -1;
	shfl.sync.idx.b32	%r823, %r3523, 3, 31, -1;
	shfl.sync.idx.b32	%r824, %r3523, 4, 31, -1;
	shfl.sync.idx.b32	%r825, %r3523, 5, 31, -1;
	shfl.sync.idx.b32	%r826, %r3523, 6, 31, -1;
	shfl.sync.idx.b32	%r827, %r3523, 7, 31, -1;
	shfl.sync.idx.b32	%r828, %r3523, 8, 31, -1;
	shfl.sync.idx.b32	%r829, %r3523, 9, 31, -1;
	shfl.sync.idx.b32	%r830, %r3523, 10, 31, -1;
	shfl.sync.idx.b32	%r831, %r3523, 11, 31, -1;
	shfl.sync.idx.b32	%r832, %r3523, 12, 31, -1;
	shfl.sync.idx.b32	%r833, %r3523, 13, 31, -1;
	shfl.sync.idx.b32	%r834, %r3523, 14, 31, -1;
	shfl.sync.idx.b32	%r835, %r3523, 15, 31, -1;
	shfl.sync.idx.b32	%r836, %r3523, 16, 31, -1;
	shfl.sync.idx.b32	%r837, %r3523, 17, 31, -1;
	shfl.sync.idx.b32	%r838, %r3523, 18, 31, -1;
	shfl.sync.idx.b32	%r839, %r3523, 19, 31, -1;
	shfl.sync.idx.b32	%r840, %r3523, 20, 31, -1;
	shfl.sync.idx.b32	%r841, %r3523, 21, 31, -1;
	shfl.sync.idx.b32	%r842, %r3523, 22, 31, -1;
	shfl.sync.idx.b32	%r843, %r3523, 23, 31, -1;
	add.s32 	%r844, %r820, %r774;
	mul.wide.s32 	%rd122, %r844, 4;
	add.s64 	%rd123, %rd38, %rd122;
	st.shared.u32 	[%rd123], %r776;
	add.s32 	%r845, %r821, %r774;
	mul.wide.s32 	%rd124, %r845, 4;
	add.s64 	%rd125, %rd38, %rd124;
	st.shared.u32 	[%rd125], %r779;
	add.s32 	%r846, %r822, %r774;
	mul.wide.s32 	%rd126, %r846, 4;
	add.s64 	%rd127, %rd38, %rd126;
	st.shared.u32 	[%rd127], %r781;
	add.s32 	%r847, %r823, %r774;
	mul.wide.s32 	%rd128, %r847, 4;
	add.s64 	%rd129, %rd38, %rd128;
	st.shared.u32 	[%rd129], %r783;
	add.s32 	%r848, %r824, %r774;
	mul.wide.s32 	%rd130, %r848, 4;
	add.s64 	%rd131, %rd38, %rd130;
	st.shared.u32 	[%rd131], %r785;
	add.s32 	%r849, %r825, %r774;
	mul.wide.s32 	%rd132, %r849, 4;
	add.s64 	%rd133, %rd38, %rd132;
	st.shared.u32 	[%rd133], %r787;
	add.s32 	%r850, %r826, %r774;
	mul.wide.s32 	%rd134, %r850, 4;
	add.s64 	%rd135, %rd38, %rd134;
	st.shared.u32 	[%rd135], %r789;
	add.s32 	%r851, %r827, %r774;
	mul.wide.s32 	%rd136, %r851, 4;
	add.s64 	%rd137, %rd38, %rd136;
	st.shared.u32 	[%rd137], %r791;
	add.s32 	%r852, %r828, %r774;
	mul.wide.s32 	%rd138, %r852, 4;
	add.s64 	%rd139, %rd38, %rd138;
	st.shared.u32 	[%rd139], %r793;
	add.s32 	%r853, %r829, %r774;
	mul.wide.s32 	%rd140, %r853, 4;
	add.s64 	%rd141, %rd38, %rd140;
	st.shared.u32 	[%rd141], %r795;
	add.s32 	%r854, %r830, %r774;
	mul.wide.s32 	%rd142, %r854, 4;
	add.s64 	%rd143, %rd38, %rd142;
	st.shared.u32 	[%rd143], %r797;
	add.s32 	%r855, %r831, %r774;
	mul.wide.s32 	%rd144, %r855, 4;
	add.s64 	%rd145, %rd38, %rd144;
	st.shared.u32 	[%rd145], %r799;
	add.s32 	%r856, %r832, %r774;
	mul.wide.s32 	%rd146, %r856, 4;
	add.s64 	%rd147, %rd38, %rd146;
	st.shared.u32 	[%rd147], %r801;
	add.s32 	%r857, %r833, %r774;
	mul.wide.s32 	%rd148, %r857, 4;
	add.s64 	%rd149, %rd38, %rd148;
	st.shared.u32 	[%rd149], %r803;
	add.s32 	%r858, %r834, %r774;
	mul.wide.s32 	%rd150, %r858, 4;
	add.s64 	%rd151, %rd38, %rd150;
	st.shared.u32 	[%rd151], %r805;
	add.s32 	%r859, %r835, %r774;
	mul.wide.s32 	%rd152, %r859, 4;
	add.s64 	%rd153, %rd38, %rd152;
	st.shared.u32 	[%rd153], %r807;
	add.s32 	%r860, %r836, %r774;
	mul.wide.s32 	%rd154, %r860, 4;
	add.s64 	%rd155, %rd38, %rd154;
	st.shared.u32 	[%rd155], %r809;
	add.s32 	%r861, %r837, %r774;
	mul.wide.s32 	%rd156, %r861, 4;
	add.s64 	%rd157, %rd38, %rd156;
	st.shared.u32 	[%rd157], %r811;
	add.s32 	%r862, %r838, %r774;
	mul.wide.s32 	%rd158, %r862, 4;
	add.s64 	%rd159, %rd38, %rd158;
	st.shared.u32 	[%rd159], %r813;
	add.s32 	%r863, %r839, %r774;
	mul.wide.s32 	%rd160, %r863, 4;
	add.s64 	%rd161, %rd38, %rd160;
	st.shared.u32 	[%rd161], %r815;
	add.s32 	%r864, %r840, %r774;
	mul.wide.s32 	%rd162, %r864, 4;
	add.s64 	%rd163, %rd38, %rd162;
	st.shared.u32 	[%rd163], %r817;
	selp.b32 	%r865, 0, %r819, %p112;
	add.s32 	%r866, %r841, %r774;
	mul.wide.s32 	%rd164, %r866, 4;
	add.s64 	%rd165, %rd38, %rd164;
	st.shared.u32 	[%rd165], %r865;
	add.s32 	%r867, %r842, %r774;
	mul.wide.s32 	%rd166, %r867, 4;
	add.s64 	%rd167, %rd38, %rd166;
	st.shared.u32 	[%rd167], %r3514;
	add.s32 	%r868, %r843, %r774;
	mul.wide.s32 	%rd168, %r868, 4;
	add.s64 	%rd169, %rd38, %rd168;
	st.shared.u32 	[%rd169], %r3514;
	bar.sync 	0;
	mov.u32 	%r3535, %r3514;
	mov.u32 	%r3536, %r3514;
	mov.u32 	%r3537, %r3514;
	mov.u32 	%r3538, %r3514;
	mov.u32 	%r3539, %r3514;
	mov.u32 	%r3540, %r3514;
	mov.u32 	%r3541, %r3514;
	mov.u32 	%r3542, %r3514;
	mov.u32 	%r3543, %r3514;
	mov.u32 	%r3544, %r3514;
	mov.u32 	%r3545, %r3514;
	mov.u32 	%r3546, %r3514;
	mov.u32 	%r3547, %r3514;
	mov.u32 	%r3548, %r3514;
	mov.u32 	%r3549, %r3514;
	mov.u32 	%r3550, %r3514;
	mov.u32 	%r3551, %r3514;
	mov.u32 	%r3552, %r3514;
	mov.u32 	%r3553, %r3514;
	mov.u32 	%r3554, %r3514;
	mov.u32 	%r3555, %r3514;
	mov.u32 	%r3556, %r3514;
	mov.u32 	%r3557, %r3514;
	mov.u32 	%r3558, %r3514;
	@%p111 bra 	LBB0_109;
	bra.uni 	LBB0_72;
LBB0_109:                               // %oksrem3295
                                        //   in Loop: Header=BB0_71 Depth=1
	cvt.u16.u32 	%rs97, %r107;
	mul.hi.s16 	%rs98, %rs97, 10923;
	shr.u16 	%rs99, %rs98, 15;
	shr.s16 	%rs100, %rs98, 2;
	add.s16 	%rs101, %rs100, %rs99;
	mul.lo.s16 	%rs102, %rs101, 24;
	sub.s16 	%rs103, %rs97, %rs102;
	cvt.s32.s16 	%r869, %rs103;
	add.s32 	%r870, %r94, %r869;
	add.s32 	%r871, %r870, %r93;
	add.s32 	%r872, %r871, %r95;
	add.s32 	%r873, %r872, %r96;
	mul.wide.s32 	%rd170, %r873, 4;
	add.s64 	%rd172, %rd38, %rd170;
	ld.shared.u32 	%r3535, [%rd172];
	ld.shared.u32 	%r3536, [%rd12+4];
	ld.shared.u32 	%r3537, [%rd12+8];
	ld.shared.u32 	%r3538, [%rd12+12];
	ld.shared.u32 	%r3539, [%rd12+16];
	ld.shared.u32 	%r3540, [%rd12+20];
	ld.shared.u32 	%r3541, [%rd12+24];
	ld.shared.u32 	%r3542, [%rd12+28];
	ld.shared.u32 	%r3543, [%rd12+32];
	ld.shared.u32 	%r3544, [%rd12+36];
	ld.shared.u32 	%r3545, [%rd12+40];
	ld.shared.u32 	%r3546, [%rd12+44];
	ld.shared.u32 	%r3547, [%rd12+48];
	ld.shared.u32 	%r3548, [%rd12+52];
	ld.shared.u32 	%r3549, [%rd12+56];
	ld.shared.u32 	%r3550, [%rd12+60];
	add.s16 	%rs104, %rs97, 16;
	mul.hi.s16 	%rs105, %rs104, 10923;
	shr.u16 	%rs106, %rs105, 15;
	shr.s16 	%rs107, %rs105, 2;
	add.s16 	%rs108, %rs107, %rs106;
	mul.lo.s16 	%rs109, %rs108, 24;
	sub.s16 	%rs110, %rs104, %rs109;
	cvt.s32.s16 	%r874, %rs110;
	add.s32 	%r875, %r94, %r874;
	add.s32 	%r876, %r875, %r93;
	add.s32 	%r877, %r876, %r95;
	add.s32 	%r878, %r877, %r96;
	mul.wide.s32 	%rd173, %r878, 4;
	add.s64 	%rd174, %rd38, %rd173;
	ld.shared.u32 	%r3551, [%rd174];
	add.s16 	%rs111, %rs97, 17;
	mul.hi.s16 	%rs112, %rs111, 10923;
	shr.u16 	%rs113, %rs112, 15;
	shr.s16 	%rs114, %rs112, 2;
	add.s16 	%rs115, %rs114, %rs113;
	mul.lo.s16 	%rs116, %rs115, 24;
	sub.s16 	%rs117, %rs111, %rs116;
	cvt.s32.s16 	%r879, %rs117;
	add.s32 	%r880, %r94, %r879;
	add.s32 	%r881, %r880, %r93;
	add.s32 	%r882, %r881, %r95;
	add.s32 	%r883, %r882, %r96;
	mul.wide.s32 	%rd175, %r883, 4;
	add.s64 	%rd176, %rd38, %rd175;
	ld.shared.u32 	%r3552, [%rd176];
	add.s16 	%rs118, %rs97, 18;
	mul.hi.s16 	%rs119, %rs118, 10923;
	shr.u16 	%rs120, %rs119, 15;
	shr.s16 	%rs121, %rs119, 2;
	add.s16 	%rs122, %rs121, %rs120;
	mul.lo.s16 	%rs123, %rs122, 24;
	sub.s16 	%rs124, %rs118, %rs123;
	cvt.s32.s16 	%r884, %rs124;
	add.s32 	%r885, %r94, %r884;
	add.s32 	%r886, %r885, %r93;
	add.s32 	%r887, %r886, %r95;
	add.s32 	%r888, %r887, %r96;
	mul.wide.s32 	%rd177, %r888, 4;
	add.s64 	%rd178, %rd38, %rd177;
	ld.shared.u32 	%r3553, [%rd178];
	add.s16 	%rs125, %rs97, 19;
	mul.hi.s16 	%rs126, %rs125, 10923;
	shr.u16 	%rs127, %rs126, 15;
	shr.s16 	%rs128, %rs126, 2;
	add.s16 	%rs129, %rs128, %rs127;
	mul.lo.s16 	%rs130, %rs129, 24;
	sub.s16 	%rs131, %rs125, %rs130;
	cvt.s32.s16 	%r889, %rs131;
	add.s32 	%r890, %r94, %r889;
	add.s32 	%r891, %r890, %r93;
	add.s32 	%r892, %r891, %r95;
	add.s32 	%r893, %r892, %r96;
	mul.wide.s32 	%rd179, %r893, 4;
	add.s64 	%rd180, %rd38, %rd179;
	ld.shared.u32 	%r3554, [%rd180];
	add.s16 	%rs132, %rs97, 20;
	mul.hi.s16 	%rs133, %rs132, 10923;
	shr.u16 	%rs134, %rs133, 15;
	shr.s16 	%rs135, %rs133, 2;
	add.s16 	%rs136, %rs135, %rs134;
	mul.lo.s16 	%rs137, %rs136, 24;
	sub.s16 	%rs138, %rs132, %rs137;
	cvt.s32.s16 	%r894, %rs138;
	add.s32 	%r895, %r94, %r894;
	add.s32 	%r896, %r895, %r93;
	add.s32 	%r897, %r896, %r95;
	add.s32 	%r898, %r897, %r96;
	mul.wide.s32 	%rd181, %r898, 4;
	add.s64 	%rd182, %rd38, %rd181;
	ld.shared.u32 	%r3555, [%rd182];
	add.s16 	%rs139, %rs97, 21;
	mul.hi.s16 	%rs140, %rs139, 10923;
	shr.u16 	%rs141, %rs140, 15;
	shr.s16 	%rs142, %rs140, 2;
	add.s16 	%rs143, %rs142, %rs141;
	mul.lo.s16 	%rs144, %rs143, 24;
	sub.s16 	%rs145, %rs139, %rs144;
	cvt.s32.s16 	%r899, %rs145;
	add.s32 	%r900, %r94, %r899;
	add.s32 	%r901, %r900, %r93;
	add.s32 	%r902, %r901, %r95;
	add.s32 	%r903, %r902, %r96;
	mul.wide.s32 	%rd183, %r903, 4;
	add.s64 	%rd184, %rd38, %rd183;
	ld.shared.u32 	%r3556, [%rd184];
	add.s16 	%rs146, %rs97, 22;
	mul.hi.s16 	%rs147, %rs146, 10923;
	shr.u16 	%rs148, %rs147, 15;
	shr.s16 	%rs149, %rs147, 2;
	add.s16 	%rs150, %rs149, %rs148;
	mul.lo.s16 	%rs151, %rs150, 24;
	sub.s16 	%rs152, %rs146, %rs151;
	cvt.s32.s16 	%r904, %rs152;
	add.s32 	%r905, %r94, %r904;
	add.s32 	%r906, %r905, %r93;
	add.s32 	%r907, %r906, %r95;
	add.s32 	%r908, %r907, %r96;
	mul.wide.s32 	%rd185, %r908, 4;
	add.s64 	%rd186, %rd38, %rd185;
	ld.shared.u32 	%r3557, [%rd186];
	add.s16 	%rs153, %rs97, 23;
	mul.hi.s16 	%rs154, %rs153, 10923;
	shr.u16 	%rs155, %rs154, 15;
	shr.s16 	%rs156, %rs154, 2;
	add.s16 	%rs157, %rs156, %rs155;
	mul.lo.s16 	%rs158, %rs157, 24;
	sub.s16 	%rs159, %rs153, %rs158;
	cvt.s32.s16 	%r909, %rs159;
	add.s32 	%r910, %r94, %r909;
	add.s32 	%r911, %r910, %r93;
	add.s32 	%r912, %r911, %r95;
	add.s32 	%r913, %r912, %r96;
	mul.wide.s32 	%rd187, %r913, 4;
	add.s64 	%rd188, %rd38, %rd187;
	ld.shared.u32 	%r3558, [%rd188];
LBB0_72:                                // %L12724
                                        //   in Loop: Header=BB0_71 Depth=1
	bar.sync 	0;
	mov.u32 	%r3559, 12;
	mov.u32 	%r3560, %r3514;
	bra.uni 	LBB0_73;
LBB0_80:                                // %L24015
                                        //   in Loop: Header=BB0_73 Depth=2
	add.s32 	%r3562, %r3562, 1;
	mov.u32 	%r3561, 0;
	mov.u32 	%r3563, %r3561;
	mov.u32 	%r3564, %r3561;
LBB0_81:                                // %L24016
                                        //   in Loop: Header=BB0_73 Depth=2
	bar.sync 	0;
	add.s32 	%r3560, %r3560, 1;
	add.s32 	%r3559, %r3559, -4;
	setp.ne.s32 	%p127, %r3559, -12;
	@%p127 bra 	LBB0_73;
	bra.uni 	LBB0_82;
LBB0_73:                                // %L12750
                                        //   Parent Loop BB0_71 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p116, %r3559, 12;
	selp.b32 	%r1453, %r3535, 0, %p116;
	setp.eq.s32 	%p117, %r3559, 8;
	selp.b32 	%r1454, %r3539, %r1453, %p117;
	setp.eq.s32 	%p118, %r3559, 4;
	selp.b32 	%r1455, %r3543, %r1454, %p118;
	setp.eq.s32 	%p119, %r3559, 0;
	selp.b32 	%r1456, %r3547, %r1455, %p119;
	setp.eq.s32 	%p120, %r3559, -4;
	selp.b32 	%r1457, %r3551, %r1456, %p120;
	setp.eq.s32 	%p121, %r3559, -8;
	selp.b32 	%r1458, %r3555, %r1457, %p121;
	selp.b32 	%r1459, %r3536, 0, %p116;
	selp.b32 	%r1460, %r3540, %r1459, %p117;
	selp.b32 	%r1461, %r3544, %r1460, %p118;
	selp.b32 	%r1462, %r3548, %r1461, %p119;
	selp.b32 	%r1463, %r3552, %r1462, %p120;
	selp.b32 	%r1464, %r3556, %r1463, %p121;
	selp.b32 	%r1465, %r3537, 0, %p116;
	selp.b32 	%r1466, %r3541, %r1465, %p117;
	selp.b32 	%r1467, %r3545, %r1466, %p118;
	selp.b32 	%r1468, %r3549, %r1467, %p119;
	selp.b32 	%r1469, %r3553, %r1468, %p120;
	selp.b32 	%r1470, %r3557, %r1469, %p121;
	selp.b32 	%r1471, %r3538, 0, %p116;
	selp.b32 	%r1472, %r3542, %r1471, %p117;
	selp.b32 	%r1473, %r3546, %r1472, %p118;
	selp.b32 	%r1474, %r3550, %r1473, %p119;
	selp.b32 	%r1475, %r3554, %r1474, %p120;
	selp.b32 	%r1476, %r3558, %r1475, %p121;
	mov.u16 	%rs197, 25600;
	// begin inline asm
	mov.b32 %r921, {%rs197, %rs197};
	// end inline asm
	mov.u16 	%rs199, 21504;
	// begin inline asm
	mov.b32 %r932, {%rs199, %rs199};
	// end inline asm
	xor.b32  	%r920, %r1458, -2004318072;
	mov.u32 	%r1057, 983055;
	// begin inline asm
	lop3.b32 %r918, %r1057, %r920, %r921, 202;
	// end inline asm
	mov.u16 	%rs203, 18432;
	// begin inline asm
	mov.b32 %r922, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r923, %r921, %r922;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r926, %r918, %r923;
	// end inline asm
	mov.u32 	%r1068, 15728880;
	// begin inline asm
	lop3.b32 %r929, %r1068, %r920, %r932, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r933, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r934, %r932, %r933;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r937, %r929, %r934;
	// end inline asm
	// begin inline asm
	mov.b32 %r967, {%rs197, %rs197};
	// end inline asm
	// begin inline asm
	mov.b32 %r978, {%rs199, %rs199};
	// end inline asm
	xor.b32  	%r966, %r1464, -2004318072;
	// begin inline asm
	lop3.b32 %r964, %r1057, %r966, %r967, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r968, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r969, %r967, %r968;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r972, %r964, %r969;
	// end inline asm
	// begin inline asm
	lop3.b32 %r975, %r1068, %r966, %r978, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r979, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r980, %r978, %r979;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r983, %r975, %r980;
	// end inline asm
	// begin inline asm
	mov.b32 %r1013, {%rs197, %rs197};
	// end inline asm
	// begin inline asm
	mov.b32 %r1024, {%rs199, %rs199};
	// end inline asm
	xor.b32  	%r1012, %r1470, -2004318072;
	// begin inline asm
	lop3.b32 %r1010, %r1057, %r1012, %r1013, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1014, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1015, %r1013, %r1014;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1018, %r1010, %r1015;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1021, %r1068, %r1012, %r1024, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1025, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1026, %r1024, %r1025;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1029, %r1021, %r1026;
	// end inline asm
	// begin inline asm
	mov.b32 %r1059, {%rs197, %rs197};
	// end inline asm
	// begin inline asm
	mov.b32 %r1070, {%rs199, %rs199};
	// end inline asm
	xor.b32  	%r1058, %r1476, -2004318072;
	// begin inline asm
	lop3.b32 %r1056, %r1057, %r1058, %r1059, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1060, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1061, %r1059, %r1060;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1064, %r1056, %r1061;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1067, %r1068, %r1058, %r1070, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1071, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1072, %r1070, %r1071;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1075, %r1067, %r1072;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3528;
    mov.b32 {%r2re, %r2im}, %r926;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1100, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3529;
    mov.b32 {%r2re, %r2im}, %r937;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1103, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3528;
    mov.b32 {%r2re, %r2im}, %r972;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1106, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3529;
    mov.b32 {%r2re, %r2im}, %r983;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1109, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3528;
    mov.b32 {%r2re, %r2im}, %r1018;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1112, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3529;
    mov.b32 {%r2re, %r2im}, %r1029;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1115, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3528;
    mov.b32 {%r2re, %r2im}, %r1064;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1118, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3529;
    mov.b32 {%r2re, %r2im}, %r1075;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1121, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1187, %r1184}, {%r321, %r324}, {%r1100}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1196, %r1193}, {%r321, %r324}, {%r1103}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1205, %r1202}, {%r321, %r324}, {%r1106}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1214, %r1211}, {%r321, %r324}, {%r1109}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1223, %r1220}, {%r321, %r324}, {%r1112}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1232, %r1229}, {%r321, %r324}, {%r1115}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1241, %r1238}, {%r321, %r324}, {%r1118}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1250, %r1247}, {%r321, %r324}, {%r1121}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1180, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1182, %r1180, %r1184;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1185, %r373, %r1187, %r1182;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1189, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1191, %r1189, %r1193;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1194, %r373, %r1196, %r1191;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1198, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1200, %r1198, %r1202;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1203, %r373, %r1205, %r1200;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1207, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1209, %r1207, %r1211;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1212, %r373, %r1214, %r1209;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1216, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1218, %r1216, %r1220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1221, %r373, %r1223, %r1218;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1225, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1227, %r1225, %r1229;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1230, %r373, %r1232, %r1227;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1234, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1236, %r1234, %r1238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1239, %r373, %r1241, %r1236;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1243, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1245, %r1243, %r1247;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1248, %r373, %r1250, %r1245;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1252, %r376, %r1187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1255, %r373, %r1184, %r1252;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1259, %r376, %r1196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1262, %r373, %r1193, %r1259;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1266, %r376, %r1205;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1269, %r373, %r1202, %r1266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1273, %r376, %r1214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1276, %r373, %r1211, %r1273;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1280, %r376, %r1223;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1283, %r373, %r1220, %r1280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1287, %r376, %r1232;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1290, %r373, %r1229, %r1287;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1294, %r376, %r1241;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1297, %r373, %r1238, %r1294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1301, %r376, %r1250;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1304, %r373, %r1247, %r1301;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1389, %r1390}, {%r417, %r423, %r420, %r426}, {%r1185, %r1255}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1397, %r1398}, {%r417, %r423, %r420, %r426}, {%r1194, %r1262}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1405, %r1406}, {%r417, %r423, %r420, %r426}, {%r1203, %r1269}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1413, %r1414}, {%r417, %r423, %r420, %r426}, {%r1212, %r1276}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1421, %r1422}, {%r417, %r423, %r420, %r426}, {%r1221, %r1283}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1429, %r1430}, {%r417, %r423, %r420, %r426}, {%r1230, %r1290}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1437, %r1438}, {%r417, %r423, %r420, %r426}, {%r1239, %r1297}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1445, %r1446}, {%r417, %r423, %r420, %r426}, {%r1248, %r1304}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	prmt.b32 %r1388, %r1389, %r1390, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1392, %r1389, %r1390, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1396, %r1397, %r1398, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1400, %r1397, %r1398, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1404, %r1405, %r1406, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1408, %r1405, %r1406, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1412, %r1413, %r1414, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1416, %r1413, %r1414, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1420, %r1421, %r1422, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1424, %r1421, %r1422, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1428, %r1429, %r1430, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1432, %r1429, %r1430, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1436, %r1437, %r1438, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1440, %r1437, %r1438, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1444, %r1445, %r1446, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1448, %r1445, %r1446, %r723;
	// end inline asm
	st.shared.u32 	[%rd6], %r1388;
	st.shared.u32 	[%rd7+33024], %r1392;
	st.shared.u32 	[%rd7+128], %r1396;
	st.shared.u32 	[%rd7+33152], %r1400;
	cvt.u16.u32 	%rs208, %r3560;
	and.b16  	%rs209, %rs208, 255;
	mul.lo.s16 	%rs210, %rs209, 171;
	shr.u16 	%rs211, %rs210, 10;
	mul.lo.s16 	%rs212, %rs211, 6;
	sub.s16 	%rs213, %rs208, %rs212;
	shl.b16 	%rs214, %rs213, 2;
	cvt.u32.u16 	%r1477, %rs214;
	and.b32  	%r1478, %r1477, 252;
	add.s32 	%r1479, %r107, %r1478;
	add.s32 	%r1480, %r1479, 1;
	shr.s32 	%r1481, %r1480, 31;
	shr.u32 	%r1482, %r1481, 30;
	add.s32 	%r1483, %r1480, %r1482;
	and.b32  	%r1484, %r1483, 67108860;
	sub.s32 	%r1485, %r1480, %r1484;
	shl.b32 	%r138, %r1485, 6;
	add.s32 	%r1486, %r97, %r138;
	mul.wide.s32 	%rd189, %r1486, 4;
	add.s64 	%rd191, %rd38, %rd189;
	st.shared.u32 	[%rd191], %r1404;
	add.s32 	%r139, %r138, 8256;
	add.s32 	%r1487, %r97, %r139;
	mul.wide.u32 	%rd192, %r1487, 4;
	add.s64 	%rd193, %rd38, %rd192;
	st.shared.u32 	[%rd193], %r1408;
	or.b32  	%r140, %r138, 32;
	add.s32 	%r1488, %r97, %r140;
	mul.wide.s32 	%rd194, %r1488, 4;
	add.s64 	%rd195, %rd38, %rd194;
	st.shared.u32 	[%rd195], %r1412;
	add.s32 	%r141, %r138, 8288;
	add.s32 	%r1489, %r97, %r141;
	mul.wide.u32 	%rd196, %r1489, 4;
	add.s64 	%rd197, %rd38, %rd196;
	st.shared.u32 	[%rd197], %r1416;
	add.s32 	%r1490, %r1479, 2;
	shr.s32 	%r1491, %r1490, 31;
	shr.u32 	%r1492, %r1491, 30;
	add.s32 	%r1493, %r1490, %r1492;
	and.b32  	%r1494, %r1493, 67108860;
	sub.s32 	%r1495, %r1490, %r1494;
	shl.b32 	%r142, %r1495, 6;
	add.s32 	%r1496, %r97, %r142;
	mul.wide.s32 	%rd198, %r1496, 4;
	add.s64 	%rd199, %rd38, %rd198;
	st.shared.u32 	[%rd199], %r1420;
	add.s32 	%r143, %r142, 8256;
	add.s32 	%r1497, %r97, %r143;
	mul.wide.u32 	%rd200, %r1497, 4;
	add.s64 	%rd201, %rd38, %rd200;
	st.shared.u32 	[%rd201], %r1424;
	or.b32  	%r144, %r142, 32;
	add.s32 	%r1498, %r97, %r144;
	mul.wide.s32 	%rd202, %r1498, 4;
	add.s64 	%rd203, %rd38, %rd202;
	st.shared.u32 	[%rd203], %r1428;
	add.s32 	%r145, %r142, 8288;
	add.s32 	%r1499, %r97, %r145;
	mul.wide.u32 	%rd204, %r1499, 4;
	add.s64 	%rd205, %rd38, %rd204;
	st.shared.u32 	[%rd205], %r1432;
	add.s32 	%r1500, %r1479, 3;
	shr.s32 	%r1501, %r1500, 31;
	shr.u32 	%r1502, %r1501, 30;
	add.s32 	%r1503, %r1500, %r1502;
	and.b32  	%r1504, %r1503, 67108860;
	sub.s32 	%r1505, %r1500, %r1504;
	shl.b32 	%r146, %r1505, 6;
	add.s32 	%r1506, %r97, %r146;
	mul.wide.s32 	%rd206, %r1506, 4;
	add.s64 	%rd207, %rd38, %rd206;
	st.shared.u32 	[%rd207], %r1436;
	add.s32 	%r147, %r146, 8256;
	add.s32 	%r1507, %r97, %r147;
	mul.wide.u32 	%rd208, %r1507, 4;
	add.s64 	%rd209, %rd38, %rd208;
	st.shared.u32 	[%rd209], %r1440;
	or.b32  	%r148, %r146, 32;
	add.s32 	%r1508, %r97, %r148;
	mul.wide.s32 	%rd210, %r1508, 4;
	add.s64 	%rd211, %rd38, %rd210;
	st.shared.u32 	[%rd211], %r1444;
	add.s32 	%r149, %r146, 8288;
	add.s32 	%r1509, %r97, %r149;
	mul.wide.u32 	%rd212, %r1509, 4;
	add.s64 	%rd213, %rd38, %rd212;
	st.shared.u32 	[%rd213], %r1448;
	bar.sync 	0;
	mov.u32 	%r3565, %r3514;
	mov.u32 	%r3566, %r3514;
	mov.u32 	%r3567, %r3514;
	mov.u32 	%r3568, %r3514;
	@%p115 bra 	LBB0_110;
	bra.uni 	LBB0_74;
LBB0_110:                               // %oksrem7077
                                        //   in Loop: Header=BB0_73 Depth=2
	ld.shared.u32 	%r3565, [%rd8];
	ld.shared.u32 	%r3566, [%rd9];
	ld.shared.u32 	%r3567, [%rd10];
	ld.shared.u32 	%r3568, [%rd11];
LBB0_74:                                // %L19360
                                        //   in Loop: Header=BB0_73 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1545, %r1542}, {%r321, %r324}, {%r3565}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1554, %r1551}, {%r321, %r324}, {%r3566}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1563, %r1560}, {%r321, %r324}, {%r3567}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1572, %r1569}, {%r321, %r324}, {%r3568}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1538, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1540, %r1538, %r1542;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1543, %r373, %r1545, %r1540;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1547, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1549, %r1547, %r1551;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1552, %r373, %r1554, %r1549;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1556, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1558, %r1556, %r1560;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1561, %r373, %r1563, %r1558;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1565, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1567, %r1565, %r1569;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1570, %r373, %r1572, %r1567;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1574, %r376, %r1545;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1577, %r373, %r1542, %r1574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1581, %r376, %r1554;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1584, %r373, %r1551, %r1581;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1588, %r376, %r1563;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1591, %r373, %r1560, %r1588;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1595, %r376, %r1572;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1598, %r373, %r1569, %r1595;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1643, %r1646}, {%r417, %r423, %r420, %r426}, {%r1543, %r1577}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1662, %r1665}, {%r417, %r423, %r420, %r426}, {%r1552, %r1584}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1650, %r1654}, {%r417, %r423, %r420, %r426}, {%r1561, %r1591}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1669, %r1673}, {%r417, %r423, %r420, %r426}, {%r1570, %r1598}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1642, %r1643, %r1643;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1645, %r1646, %r1646, %r1642;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1649, %r1650, %r1650, %r1645;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1653, %r1654, %r1654, %r1649;
	// end inline asm
	mov.u32 	%r1677, 442899046;
	// begin inline asm
	fma.rn.f16x2 %r1657, %r1677, %r1653, %r3564;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1661, %r1662, %r1662;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1664, %r1665, %r1665, %r1661;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1668, %r1669, %r1669, %r1664;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1672, %r1673, %r1673, %r1668;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1676, %r1677, %r1672, %r3563;
	// end inline asm
	mov.u32 	%r3569, %r3514;
	mov.u32 	%r3570, %r3514;
	mov.u32 	%r3571, %r3514;
	mov.u32 	%r3572, %r3514;
	@%p115 bra 	LBB0_111;
	bra.uni 	LBB0_75;
LBB0_111:                               // %oksrem7612
                                        //   in Loop: Header=BB0_73 Depth=2
	add.s32 	%r1681, %r98, %r138;
	mul.wide.s32 	%rd214, %r1681, 4;
	add.s64 	%rd216, %rd38, %rd214;
	ld.shared.u32 	%r3569, [%rd216];
	add.s32 	%r1682, %r98, %r139;
	mul.wide.u32 	%rd217, %r1682, 4;
	add.s64 	%rd218, %rd38, %rd217;
	ld.shared.u32 	%r3570, [%rd218];
	add.s32 	%r1683, %r98, %r140;
	mul.wide.s32 	%rd219, %r1683, 4;
	add.s64 	%rd220, %rd38, %rd219;
	ld.shared.u32 	%r3571, [%rd220];
	add.s32 	%r1684, %r98, %r141;
	mul.wide.u32 	%rd221, %r1684, 4;
	add.s64 	%rd222, %rd38, %rd221;
	ld.shared.u32 	%r3572, [%rd222];
LBB0_75:                                // %L20742
                                        //   in Loop: Header=BB0_73 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1720, %r1717}, {%r321, %r324}, {%r3569}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1729, %r1726}, {%r321, %r324}, {%r3570}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1738, %r1735}, {%r321, %r324}, {%r3571}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1747, %r1744}, {%r321, %r324}, {%r3572}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1713, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1715, %r1713, %r1717;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1718, %r373, %r1720, %r1715;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1722, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1724, %r1722, %r1726;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1727, %r373, %r1729, %r1724;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1731, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1733, %r1731, %r1735;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1736, %r373, %r1738, %r1733;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1740, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1742, %r1740, %r1744;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1745, %r373, %r1747, %r1742;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1749, %r376, %r1720;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1752, %r373, %r1717, %r1749;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1756, %r376, %r1729;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1759, %r373, %r1726, %r1756;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1763, %r376, %r1738;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1766, %r373, %r1735, %r1763;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1770, %r376, %r1747;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1773, %r373, %r1744, %r1770;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1818, %r1821}, {%r417, %r423, %r420, %r426}, {%r1718, %r1752}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1837, %r1840}, {%r417, %r423, %r420, %r426}, {%r1727, %r1759}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1825, %r1829}, {%r417, %r423, %r420, %r426}, {%r1736, %r1766}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1844, %r1848}, {%r417, %r423, %r420, %r426}, {%r1745, %r1773}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1817, %r1818, %r1818;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1820, %r1821, %r1821, %r1817;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1824, %r1825, %r1825, %r1820;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1828, %r1829, %r1829, %r1824;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1832, %r1677, %r1828, %r1657;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1836, %r1837, %r1837;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1839, %r1840, %r1840, %r1836;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1843, %r1844, %r1844, %r1839;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1847, %r1848, %r1848, %r1843;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1851, %r1677, %r1847, %r1676;
	// end inline asm
	mov.u32 	%r3573, %r3514;
	mov.u32 	%r3574, %r3514;
	mov.u32 	%r3575, %r3514;
	mov.u32 	%r3576, %r3514;
	@%p115 bra 	LBB0_112;
	bra.uni 	LBB0_76;
LBB0_112:                               // %oksrem8147
                                        //   in Loop: Header=BB0_73 Depth=2
	add.s32 	%r1856, %r98, %r142;
	mul.wide.s32 	%rd223, %r1856, 4;
	add.s64 	%rd225, %rd38, %rd223;
	ld.shared.u32 	%r3573, [%rd225];
	add.s32 	%r1857, %r98, %r143;
	mul.wide.u32 	%rd226, %r1857, 4;
	add.s64 	%rd227, %rd38, %rd226;
	ld.shared.u32 	%r3574, [%rd227];
	add.s32 	%r1858, %r98, %r144;
	mul.wide.s32 	%rd228, %r1858, 4;
	add.s64 	%rd229, %rd38, %rd228;
	ld.shared.u32 	%r3575, [%rd229];
	add.s32 	%r1859, %r98, %r145;
	mul.wide.u32 	%rd230, %r1859, 4;
	add.s64 	%rd231, %rd38, %rd230;
	ld.shared.u32 	%r3576, [%rd231];
LBB0_76:                                // %L22124
                                        //   in Loop: Header=BB0_73 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1895, %r1892}, {%r321, %r324}, {%r3573}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1904, %r1901}, {%r321, %r324}, {%r3574}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1913, %r1910}, {%r321, %r324}, {%r3575}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1922, %r1919}, {%r321, %r324}, {%r3576}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1888, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1890, %r1888, %r1892;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1893, %r373, %r1895, %r1890;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1897, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1899, %r1897, %r1901;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1902, %r373, %r1904, %r1899;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1906, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1908, %r1906, %r1910;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1911, %r373, %r1913, %r1908;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1915, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1917, %r1915, %r1919;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1920, %r373, %r1922, %r1917;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1924, %r376, %r1895;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1927, %r373, %r1892, %r1924;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1931, %r376, %r1904;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1934, %r373, %r1901, %r1931;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1938, %r376, %r1913;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1941, %r373, %r1910, %r1938;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1945, %r376, %r1922;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1948, %r373, %r1919, %r1945;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1993, %r1996}, {%r417, %r423, %r420, %r426}, {%r1893, %r1927}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2012, %r2015}, {%r417, %r423, %r420, %r426}, {%r1902, %r1934}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2000, %r2004}, {%r417, %r423, %r420, %r426}, {%r1911, %r1941}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2019, %r2023}, {%r417, %r423, %r420, %r426}, {%r1920, %r1948}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1992, %r1993, %r1993;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1995, %r1996, %r1996, %r1992;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1999, %r2000, %r2000, %r1995;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2003, %r2004, %r2004, %r1999;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2007, %r1677, %r2003, %r1832;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2011, %r2012, %r2012;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2014, %r2015, %r2015, %r2011;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2018, %r2019, %r2019, %r2014;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2022, %r2023, %r2023, %r2018;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2026, %r1677, %r2022, %r1851;
	// end inline asm
	mov.u32 	%r3577, %r3514;
	mov.u32 	%r3578, %r3514;
	mov.u32 	%r3579, %r3514;
	mov.u32 	%r3580, %r3514;
	@%p115 bra 	LBB0_113;
	bra.uni 	LBB0_77;
LBB0_113:                               // %oksrem8682
                                        //   in Loop: Header=BB0_73 Depth=2
	add.s32 	%r2031, %r98, %r146;
	mul.wide.s32 	%rd232, %r2031, 4;
	add.s64 	%rd234, %rd38, %rd232;
	ld.shared.u32 	%r3577, [%rd234];
	add.s32 	%r2032, %r98, %r147;
	mul.wide.u32 	%rd235, %r2032, 4;
	add.s64 	%rd236, %rd38, %rd235;
	ld.shared.u32 	%r3578, [%rd236];
	add.s32 	%r2033, %r98, %r148;
	mul.wide.s32 	%rd237, %r2033, 4;
	add.s64 	%rd238, %rd38, %rd237;
	ld.shared.u32 	%r3579, [%rd238];
	add.s32 	%r2034, %r98, %r149;
	mul.wide.u32 	%rd239, %r2034, 4;
	add.s64 	%rd240, %rd38, %rd239;
	ld.shared.u32 	%r3580, [%rd240];
LBB0_77:                                // %L23506
                                        //   in Loop: Header=BB0_73 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2070, %r2067}, {%r321, %r324}, {%r3577}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2079, %r2076}, {%r321, %r324}, {%r3578}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2088, %r2085}, {%r321, %r324}, {%r3579}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2097, %r2094}, {%r321, %r324}, {%r3580}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2063, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2065, %r2063, %r2067;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2068, %r373, %r2070, %r2065;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2072, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2074, %r2072, %r2076;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2077, %r373, %r2079, %r2074;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2081, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2083, %r2081, %r2085;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2086, %r373, %r2088, %r2083;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2090, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2092, %r2090, %r2094;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2095, %r373, %r2097, %r2092;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2099, %r376, %r2070;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2102, %r373, %r2067, %r2099;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2106, %r376, %r2079;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2109, %r373, %r2076, %r2106;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2113, %r376, %r2088;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2116, %r373, %r2085, %r2113;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2120, %r376, %r2097;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2123, %r373, %r2094, %r2120;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2168, %r2171}, {%r417, %r423, %r420, %r426}, {%r2068, %r2102}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2187, %r2190}, {%r417, %r423, %r420, %r426}, {%r2077, %r2109}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2175, %r2179}, {%r417, %r423, %r420, %r426}, {%r2086, %r2116}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2194, %r2198}, {%r417, %r423, %r420, %r426}, {%r2095, %r2123}, {%r3514, %r3514};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2167, %r2168, %r2168;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2170, %r2171, %r2171, %r2167;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2174, %r2175, %r2175, %r2170;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2178, %r2179, %r2179, %r2174;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3564, %r1677, %r2178, %r2007;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2186, %r2187, %r2187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2189, %r2190, %r2190, %r2186;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2193, %r2194, %r2194, %r2189;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2197, %r2198, %r2198, %r2193;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3563, %r1677, %r2197, %r2026;
	// end inline asm
	add.s32 	%r3561, %r3561, 4;
	setp.ne.s32 	%p125, %r3561, 40;
	@%p125 bra 	LBB0_81;
// %bb.78:                              // %L23694
                                        //   in Loop: Header=BB0_73 Depth=2
	@%p65 bra 	LBB0_80;
// %bb.79:                              // %L23759
                                        //   in Loop: Header=BB0_73 Depth=2
	mul.lo.s32 	%r2205, %r3562, 1152;
	or.b32  	%r2206, %r2205, %r70;
	add.s32 	%r2207, %r2206, %r100;
	add.s32 	%r2208, %r2207, %r99;
	mul.wide.u32 	%rd241, %r2208, 4;
	add.s64 	%rd242, %rd4, %rd241;
	st.global.u32 	[%rd242], %r3564;
	add.s32 	%r2209, %r2207, %r101;
	mul.wide.u32 	%rd243, %r2209, 4;
	add.s64 	%rd244, %rd4, %rd243;
	st.global.u32 	[%rd244], %r3563;
	bra.uni 	LBB0_80;
LBB0_82:                                // %L24043.preheader
                                        //   in Loop: Header=BB0_71 Depth=1
	add.s32 	%r182, %r107, 25;
	add.s32 	%r183, %r107, 26;
	add.s32 	%r184, %r107, 27;
	mov.u32 	%r2212, 0;
	mov.u32 	%r3585, 12;
	mov.u32 	%r3586, %r2212;
	bra.uni 	LBB0_83;
LBB0_90:                                // %L35308
                                        //   in Loop: Header=BB0_83 Depth=2
	add.s32 	%r3562, %r3562, 1;
	mov.u32 	%r3561, 0;
	mov.u32 	%r3563, %r3561;
	mov.u32 	%r3564, %r3561;
LBB0_91:                                // %L35309
                                        //   in Loop: Header=BB0_83 Depth=2
	bar.sync 	0;
	add.s32 	%r3586, %r3586, 1;
	add.s32 	%r3585, %r3585, -4;
	setp.ne.s32 	%p140, %r3585, -12;
	@%p140 bra 	LBB0_83;
	bra.uni 	LBB0_92;
LBB0_83:                                // %L24043
                                        //   Parent Loop BB0_71 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p129, %r3585, 12;
	selp.b32 	%r2750, %r3535, 0, %p129;
	setp.eq.s32 	%p130, %r3585, 8;
	selp.b32 	%r2751, %r3539, %r2750, %p130;
	setp.eq.s32 	%p131, %r3585, 4;
	selp.b32 	%r2752, %r3543, %r2751, %p131;
	setp.eq.s32 	%p132, %r3585, 0;
	selp.b32 	%r2753, %r3547, %r2752, %p132;
	setp.eq.s32 	%p133, %r3585, -4;
	selp.b32 	%r2754, %r3551, %r2753, %p133;
	setp.eq.s32 	%p134, %r3585, -8;
	selp.b32 	%r2755, %r3555, %r2754, %p134;
	selp.b32 	%r2756, %r3536, 0, %p129;
	selp.b32 	%r2757, %r3540, %r2756, %p130;
	selp.b32 	%r2758, %r3544, %r2757, %p131;
	selp.b32 	%r2759, %r3548, %r2758, %p132;
	selp.b32 	%r2760, %r3552, %r2759, %p133;
	selp.b32 	%r2761, %r3556, %r2760, %p134;
	selp.b32 	%r2762, %r3537, 0, %p129;
	selp.b32 	%r2763, %r3541, %r2762, %p130;
	selp.b32 	%r2764, %r3545, %r2763, %p131;
	selp.b32 	%r2765, %r3549, %r2764, %p132;
	selp.b32 	%r2766, %r3553, %r2765, %p133;
	selp.b32 	%r2767, %r3557, %r2766, %p134;
	selp.b32 	%r2768, %r3538, 0, %p129;
	selp.b32 	%r2769, %r3542, %r2768, %p130;
	selp.b32 	%r2770, %r3546, %r2769, %p131;
	selp.b32 	%r2771, %r3550, %r2770, %p132;
	selp.b32 	%r2772, %r3554, %r2771, %p133;
	selp.b32 	%r2773, %r3558, %r2772, %p134;
	// begin inline asm
	mov.b32 %r2240, {%rs197, %rs197};
	// end inline asm
	// begin inline asm
	mov.b32 %r2251, {%rs199, %rs199};
	// end inline asm
	shr.u32 	%r2774, %r2755, 8;
	xor.b32  	%r2250, %r2774, 8947848;
	// begin inline asm
	lop3.b32 %r2237, %r1057, %r2250, %r2240, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2241, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2242, %r2240, %r2241;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2245, %r2237, %r2242;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2248, %r1068, %r2250, %r2251, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2252, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2253, %r2251, %r2252;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2256, %r2248, %r2253;
	// end inline asm
	// begin inline asm
	mov.b32 %r2286, {%rs197, %rs197};
	// end inline asm
	// begin inline asm
	mov.b32 %r2297, {%rs199, %rs199};
	// end inline asm
	shr.u32 	%r2775, %r2761, 8;
	xor.b32  	%r2296, %r2775, 8947848;
	// begin inline asm
	lop3.b32 %r2283, %r1057, %r2296, %r2286, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2287, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2288, %r2286, %r2287;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2291, %r2283, %r2288;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2294, %r1068, %r2296, %r2297, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2298, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2299, %r2297, %r2298;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2302, %r2294, %r2299;
	// end inline asm
	// begin inline asm
	mov.b32 %r2332, {%rs197, %rs197};
	// end inline asm
	// begin inline asm
	mov.b32 %r2343, {%rs199, %rs199};
	// end inline asm
	shr.u32 	%r2776, %r2767, 8;
	xor.b32  	%r2342, %r2776, 8947848;
	// begin inline asm
	lop3.b32 %r2329, %r1057, %r2342, %r2332, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2333, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2334, %r2332, %r2333;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2337, %r2329, %r2334;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2340, %r1068, %r2342, %r2343, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2344, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2345, %r2343, %r2344;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2348, %r2340, %r2345;
	// end inline asm
	// begin inline asm
	mov.b32 %r2378, {%rs197, %rs197};
	// end inline asm
	// begin inline asm
	mov.b32 %r2389, {%rs199, %rs199};
	// end inline asm
	shr.u32 	%r2777, %r2773, 8;
	xor.b32  	%r2388, %r2777, 8947848;
	// begin inline asm
	lop3.b32 %r2375, %r1057, %r2388, %r2378, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2379, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2380, %r2378, %r2379;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2383, %r2375, %r2380;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2386, %r1068, %r2388, %r2389, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2390, {%rs203, %rs203};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2391, %r2389, %r2390;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2394, %r2386, %r2391;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3528;
    mov.b32 {%r2re, %r2im}, %r2245;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2397, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3529;
    mov.b32 {%r2re, %r2im}, %r2256;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2400, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3528;
    mov.b32 {%r2re, %r2im}, %r2291;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2403, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3529;
    mov.b32 {%r2re, %r2im}, %r2302;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2406, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3528;
    mov.b32 {%r2re, %r2im}, %r2337;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2409, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3529;
    mov.b32 {%r2re, %r2im}, %r2348;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2412, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3528;
    mov.b32 {%r2re, %r2im}, %r2383;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2415, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3529;
    mov.b32 {%r2re, %r2im}, %r2394;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2418, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2484, %r2481}, {%r321, %r324}, {%r2397}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2493, %r2490}, {%r321, %r324}, {%r2400}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2502, %r2499}, {%r321, %r324}, {%r2403}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2511, %r2508}, {%r321, %r324}, {%r2406}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2520, %r2517}, {%r321, %r324}, {%r2409}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2529, %r2526}, {%r321, %r324}, {%r2412}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2538, %r2535}, {%r321, %r324}, {%r2415}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2547, %r2544}, {%r321, %r324}, {%r2418}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2477, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2479, %r2477, %r2481;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2482, %r373, %r2484, %r2479;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2486, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2488, %r2486, %r2490;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2491, %r373, %r2493, %r2488;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2495, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2497, %r2495, %r2499;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2500, %r373, %r2502, %r2497;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2504, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2506, %r2504, %r2508;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2509, %r373, %r2511, %r2506;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2513, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2515, %r2513, %r2517;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2518, %r373, %r2520, %r2515;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2522, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2524, %r2522, %r2526;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2527, %r373, %r2529, %r2524;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2531, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2533, %r2531, %r2535;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2536, %r373, %r2538, %r2533;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2540, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2542, %r2540, %r2544;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2545, %r373, %r2547, %r2542;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2549, %r376, %r2484;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2552, %r373, %r2481, %r2549;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2556, %r376, %r2493;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2559, %r373, %r2490, %r2556;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2563, %r376, %r2502;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2566, %r373, %r2499, %r2563;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2570, %r376, %r2511;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2573, %r373, %r2508, %r2570;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2577, %r376, %r2520;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2580, %r373, %r2517, %r2577;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2584, %r376, %r2529;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2587, %r373, %r2526, %r2584;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2591, %r376, %r2538;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2594, %r373, %r2535, %r2591;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2598, %r376, %r2547;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2601, %r373, %r2544, %r2598;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2686, %r2687}, {%r417, %r423, %r420, %r426}, {%r2482, %r2552}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2694, %r2695}, {%r417, %r423, %r420, %r426}, {%r2491, %r2559}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2702, %r2703}, {%r417, %r423, %r420, %r426}, {%r2500, %r2566}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2710, %r2711}, {%r417, %r423, %r420, %r426}, {%r2509, %r2573}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2718, %r2719}, {%r417, %r423, %r420, %r426}, {%r2518, %r2580}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2726, %r2727}, {%r417, %r423, %r420, %r426}, {%r2527, %r2587}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2734, %r2735}, {%r417, %r423, %r420, %r426}, {%r2536, %r2594}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2742, %r2743}, {%r417, %r423, %r420, %r426}, {%r2545, %r2601}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	prmt.b32 %r2685, %r2686, %r2687, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2689, %r2686, %r2687, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2693, %r2694, %r2695, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2697, %r2694, %r2695, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2701, %r2702, %r2703, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2705, %r2702, %r2703, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2709, %r2710, %r2711, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2713, %r2710, %r2711, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2717, %r2718, %r2719, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2721, %r2718, %r2719, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2725, %r2726, %r2727, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2729, %r2726, %r2727, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2733, %r2734, %r2735, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2737, %r2734, %r2735, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2741, %r2742, %r2743, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2745, %r2742, %r2743, %r723;
	// end inline asm
	st.shared.u32 	[%rd6], %r2685;
	st.shared.u32 	[%rd7+33024], %r2689;
	st.shared.u32 	[%rd7+128], %r2693;
	st.shared.u32 	[%rd7+33152], %r2697;
	cvt.u16.u32 	%rs263, %r3586;
	and.b16  	%rs264, %rs263, 255;
	mul.lo.s16 	%rs265, %rs264, 171;
	shr.u16 	%rs266, %rs265, 10;
	mul.lo.s16 	%rs267, %rs266, 6;
	sub.s16 	%rs268, %rs263, %rs267;
	shl.b16 	%rs269, %rs268, 2;
	cvt.u32.u16 	%r2778, %rs269;
	and.b32  	%r2779, %r2778, 252;
	add.s32 	%r2780, %r182, %r2779;
	shr.s32 	%r2781, %r2780, 31;
	shr.u32 	%r2782, %r2781, 30;
	add.s32 	%r2783, %r2780, %r2782;
	and.b32  	%r2784, %r2783, 67108860;
	sub.s32 	%r2785, %r2780, %r2784;
	shl.b32 	%r191, %r2785, 6;
	add.s32 	%r2786, %r97, %r191;
	mul.wide.s32 	%rd245, %r2786, 4;
	add.s64 	%rd247, %rd38, %rd245;
	st.shared.u32 	[%rd247], %r2701;
	add.s32 	%r192, %r191, 8256;
	add.s32 	%r2787, %r97, %r192;
	mul.wide.u32 	%rd248, %r2787, 4;
	add.s64 	%rd249, %rd38, %rd248;
	st.shared.u32 	[%rd249], %r2705;
	or.b32  	%r193, %r191, 32;
	add.s32 	%r2788, %r97, %r193;
	mul.wide.s32 	%rd250, %r2788, 4;
	add.s64 	%rd251, %rd38, %rd250;
	st.shared.u32 	[%rd251], %r2709;
	add.s32 	%r194, %r191, 8288;
	add.s32 	%r2789, %r97, %r194;
	mul.wide.u32 	%rd252, %r2789, 4;
	add.s64 	%rd253, %rd38, %rd252;
	st.shared.u32 	[%rd253], %r2713;
	add.s32 	%r2790, %r183, %r2779;
	shr.s32 	%r2791, %r2790, 31;
	shr.u32 	%r2792, %r2791, 30;
	add.s32 	%r2793, %r2790, %r2792;
	and.b32  	%r2794, %r2793, 67108860;
	sub.s32 	%r2795, %r2790, %r2794;
	shl.b32 	%r195, %r2795, 6;
	add.s32 	%r2796, %r97, %r195;
	mul.wide.s32 	%rd254, %r2796, 4;
	add.s64 	%rd255, %rd38, %rd254;
	st.shared.u32 	[%rd255], %r2717;
	add.s32 	%r196, %r195, 8256;
	add.s32 	%r2797, %r97, %r196;
	mul.wide.u32 	%rd256, %r2797, 4;
	add.s64 	%rd257, %rd38, %rd256;
	st.shared.u32 	[%rd257], %r2721;
	or.b32  	%r197, %r195, 32;
	add.s32 	%r2798, %r97, %r197;
	mul.wide.s32 	%rd258, %r2798, 4;
	add.s64 	%rd259, %rd38, %rd258;
	st.shared.u32 	[%rd259], %r2725;
	add.s32 	%r198, %r195, 8288;
	add.s32 	%r2799, %r97, %r198;
	mul.wide.u32 	%rd260, %r2799, 4;
	add.s64 	%rd261, %rd38, %rd260;
	st.shared.u32 	[%rd261], %r2729;
	add.s32 	%r2800, %r184, %r2779;
	shr.s32 	%r2801, %r2800, 31;
	shr.u32 	%r2802, %r2801, 30;
	add.s32 	%r2803, %r2800, %r2802;
	and.b32  	%r2804, %r2803, 67108860;
	sub.s32 	%r2805, %r2800, %r2804;
	shl.b32 	%r199, %r2805, 6;
	add.s32 	%r2806, %r97, %r199;
	mul.wide.s32 	%rd262, %r2806, 4;
	add.s64 	%rd263, %rd38, %rd262;
	st.shared.u32 	[%rd263], %r2733;
	add.s32 	%r200, %r199, 8256;
	add.s32 	%r2807, %r97, %r200;
	mul.wide.u32 	%rd264, %r2807, 4;
	add.s64 	%rd265, %rd38, %rd264;
	st.shared.u32 	[%rd265], %r2737;
	or.b32  	%r201, %r199, 32;
	add.s32 	%r2808, %r97, %r201;
	mul.wide.s32 	%rd266, %r2808, 4;
	add.s64 	%rd267, %rd38, %rd266;
	st.shared.u32 	[%rd267], %r2741;
	add.s32 	%r202, %r199, 8288;
	add.s32 	%r2809, %r97, %r202;
	mul.wide.u32 	%rd268, %r2809, 4;
	add.s64 	%rd269, %rd38, %rd268;
	st.shared.u32 	[%rd269], %r2745;
	bar.sync 	0;
	mov.u32 	%r3591, %r2212;
	mov.u32 	%r3592, %r2212;
	mov.u32 	%r3593, %r2212;
	mov.u32 	%r3594, %r2212;
	@%p115 bra 	LBB0_114;
	bra.uni 	LBB0_84;
LBB0_114:                               // %oksrem11475
                                        //   in Loop: Header=BB0_83 Depth=2
	ld.shared.u32 	%r3594, [%rd8];
	ld.shared.u32 	%r3593, [%rd9];
	ld.shared.u32 	%r3592, [%rd10];
	ld.shared.u32 	%r3591, [%rd11];
LBB0_84:                                // %L30653
                                        //   in Loop: Header=BB0_83 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2845, %r2842}, {%r321, %r324}, {%r3594}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2854, %r2851}, {%r321, %r324}, {%r3593}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2863, %r2860}, {%r321, %r324}, {%r3592}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2872, %r2869}, {%r321, %r324}, {%r3591}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2838, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2840, %r2838, %r2842;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2843, %r373, %r2845, %r2840;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2847, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2849, %r2847, %r2851;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2852, %r373, %r2854, %r2849;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2856, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2858, %r2856, %r2860;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2861, %r373, %r2863, %r2858;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2865, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2867, %r2865, %r2869;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2870, %r373, %r2872, %r2867;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2874, %r376, %r2845;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2877, %r373, %r2842, %r2874;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2881, %r376, %r2854;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2884, %r373, %r2851, %r2881;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2888, %r376, %r2863;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2891, %r373, %r2860, %r2888;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2895, %r376, %r2872;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2898, %r373, %r2869, %r2895;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2943, %r2946}, {%r417, %r423, %r420, %r426}, {%r2843, %r2877}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2962, %r2965}, {%r417, %r423, %r420, %r426}, {%r2852, %r2884}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2950, %r2954}, {%r417, %r423, %r420, %r426}, {%r2861, %r2891}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2969, %r2973}, {%r417, %r423, %r420, %r426}, {%r2870, %r2898}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2942, %r2943, %r2943;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2945, %r2946, %r2946, %r2942;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2949, %r2950, %r2950, %r2945;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2953, %r2954, %r2954, %r2949;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2957, %r1677, %r2953, %r3564;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2961, %r2962, %r2962;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2964, %r2965, %r2965, %r2961;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2968, %r2969, %r2969, %r2964;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2972, %r2973, %r2973, %r2968;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2976, %r1677, %r2972, %r3563;
	// end inline asm
	mov.u32 	%r3595, %r2212;
	mov.u32 	%r3596, %r2212;
	mov.u32 	%r3597, %r2212;
	mov.u32 	%r3598, %r2212;
	@%p115 bra 	LBB0_115;
	bra.uni 	LBB0_85;
LBB0_115:                               // %oksrem12010
                                        //   in Loop: Header=BB0_83 Depth=2
	add.s32 	%r2981, %r98, %r191;
	mul.wide.s32 	%rd270, %r2981, 4;
	add.s64 	%rd272, %rd38, %rd270;
	ld.shared.u32 	%r3598, [%rd272];
	add.s32 	%r2982, %r98, %r192;
	mul.wide.u32 	%rd273, %r2982, 4;
	add.s64 	%rd274, %rd38, %rd273;
	ld.shared.u32 	%r3597, [%rd274];
	add.s32 	%r2983, %r98, %r193;
	mul.wide.s32 	%rd275, %r2983, 4;
	add.s64 	%rd276, %rd38, %rd275;
	ld.shared.u32 	%r3596, [%rd276];
	add.s32 	%r2984, %r98, %r194;
	mul.wide.u32 	%rd277, %r2984, 4;
	add.s64 	%rd278, %rd38, %rd277;
	ld.shared.u32 	%r3595, [%rd278];
LBB0_85:                                // %L32035
                                        //   in Loop: Header=BB0_83 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3020, %r3017}, {%r321, %r324}, {%r3598}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3029, %r3026}, {%r321, %r324}, {%r3597}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3038, %r3035}, {%r321, %r324}, {%r3596}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3047, %r3044}, {%r321, %r324}, {%r3595}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3013, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3015, %r3013, %r3017;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3018, %r373, %r3020, %r3015;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3022, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3024, %r3022, %r3026;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3027, %r373, %r3029, %r3024;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3031, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3033, %r3031, %r3035;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3036, %r373, %r3038, %r3033;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3040, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3042, %r3040, %r3044;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3045, %r373, %r3047, %r3042;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3049, %r376, %r3020;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3052, %r373, %r3017, %r3049;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3056, %r376, %r3029;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3059, %r373, %r3026, %r3056;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3063, %r376, %r3038;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3066, %r373, %r3035, %r3063;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3070, %r376, %r3047;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3073, %r373, %r3044, %r3070;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3118, %r3121}, {%r417, %r423, %r420, %r426}, {%r3018, %r3052}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3137, %r3140}, {%r417, %r423, %r420, %r426}, {%r3027, %r3059}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3125, %r3129}, {%r417, %r423, %r420, %r426}, {%r3036, %r3066}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3144, %r3148}, {%r417, %r423, %r420, %r426}, {%r3045, %r3073}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3117, %r3118, %r3118;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3120, %r3121, %r3121, %r3117;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3124, %r3125, %r3125, %r3120;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3128, %r3129, %r3129, %r3124;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3132, %r1677, %r3128, %r2957;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3136, %r3137, %r3137;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3139, %r3140, %r3140, %r3136;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3143, %r3144, %r3144, %r3139;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3147, %r3148, %r3148, %r3143;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3151, %r1677, %r3147, %r2976;
	// end inline asm
	mov.u32 	%r3599, %r2212;
	mov.u32 	%r3600, %r2212;
	mov.u32 	%r3601, %r2212;
	mov.u32 	%r3602, %r2212;
	@%p115 bra 	LBB0_116;
	bra.uni 	LBB0_86;
LBB0_116:                               // %oksrem12545
                                        //   in Loop: Header=BB0_83 Depth=2
	add.s32 	%r3156, %r98, %r195;
	mul.wide.s32 	%rd279, %r3156, 4;
	add.s64 	%rd281, %rd38, %rd279;
	ld.shared.u32 	%r3602, [%rd281];
	add.s32 	%r3157, %r98, %r196;
	mul.wide.u32 	%rd282, %r3157, 4;
	add.s64 	%rd283, %rd38, %rd282;
	ld.shared.u32 	%r3601, [%rd283];
	add.s32 	%r3158, %r98, %r197;
	mul.wide.s32 	%rd284, %r3158, 4;
	add.s64 	%rd285, %rd38, %rd284;
	ld.shared.u32 	%r3600, [%rd285];
	add.s32 	%r3159, %r98, %r198;
	mul.wide.u32 	%rd286, %r3159, 4;
	add.s64 	%rd287, %rd38, %rd286;
	ld.shared.u32 	%r3599, [%rd287];
LBB0_86:                                // %L33417
                                        //   in Loop: Header=BB0_83 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3195, %r3192}, {%r321, %r324}, {%r3602}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3204, %r3201}, {%r321, %r324}, {%r3601}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3213, %r3210}, {%r321, %r324}, {%r3600}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3222, %r3219}, {%r321, %r324}, {%r3599}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3188, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3190, %r3188, %r3192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3193, %r373, %r3195, %r3190;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3197, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3199, %r3197, %r3201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3202, %r373, %r3204, %r3199;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3206, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3208, %r3206, %r3210;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3211, %r373, %r3213, %r3208;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3215, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3217, %r3215, %r3219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3220, %r373, %r3222, %r3217;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3224, %r376, %r3195;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3227, %r373, %r3192, %r3224;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3231, %r376, %r3204;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3234, %r373, %r3201, %r3231;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3238, %r376, %r3213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3241, %r373, %r3210, %r3238;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3245, %r376, %r3222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3248, %r373, %r3219, %r3245;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3293, %r3296}, {%r417, %r423, %r420, %r426}, {%r3193, %r3227}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3312, %r3315}, {%r417, %r423, %r420, %r426}, {%r3202, %r3234}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3300, %r3304}, {%r417, %r423, %r420, %r426}, {%r3211, %r3241}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3319, %r3323}, {%r417, %r423, %r420, %r426}, {%r3220, %r3248}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3292, %r3293, %r3293;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3295, %r3296, %r3296, %r3292;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3299, %r3300, %r3300, %r3295;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3303, %r3304, %r3304, %r3299;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3307, %r1677, %r3303, %r3132;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3311, %r3312, %r3312;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3314, %r3315, %r3315, %r3311;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3318, %r3319, %r3319, %r3314;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3322, %r3323, %r3323, %r3318;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3326, %r1677, %r3322, %r3151;
	// end inline asm
	mov.u32 	%r3603, %r2212;
	mov.u32 	%r3604, %r2212;
	mov.u32 	%r3605, %r2212;
	mov.u32 	%r3606, %r2212;
	@%p115 bra 	LBB0_117;
	bra.uni 	LBB0_87;
LBB0_117:                               // %oksrem13080
                                        //   in Loop: Header=BB0_83 Depth=2
	add.s32 	%r3331, %r98, %r199;
	mul.wide.s32 	%rd288, %r3331, 4;
	add.s64 	%rd290, %rd38, %rd288;
	ld.shared.u32 	%r3606, [%rd290];
	add.s32 	%r3332, %r98, %r200;
	mul.wide.u32 	%rd291, %r3332, 4;
	add.s64 	%rd292, %rd38, %rd291;
	ld.shared.u32 	%r3605, [%rd292];
	add.s32 	%r3333, %r98, %r201;
	mul.wide.s32 	%rd293, %r3333, 4;
	add.s64 	%rd294, %rd38, %rd293;
	ld.shared.u32 	%r3604, [%rd294];
	add.s32 	%r3334, %r98, %r202;
	mul.wide.u32 	%rd295, %r3334, 4;
	add.s64 	%rd296, %rd38, %rd295;
	ld.shared.u32 	%r3603, [%rd296];
LBB0_87:                                // %L34799
                                        //   in Loop: Header=BB0_83 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3370, %r3367}, {%r321, %r324}, {%r3606}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3379, %r3376}, {%r321, %r324}, {%r3605}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3388, %r3385}, {%r321, %r324}, {%r3604}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3397, %r3394}, {%r321, %r324}, {%r3603}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3363, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3365, %r3363, %r3367;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3368, %r373, %r3370, %r3365;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3372, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3374, %r3372, %r3376;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3377, %r373, %r3379, %r3374;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3381, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3383, %r3381, %r3385;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3386, %r373, %r3388, %r3383;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3390, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3392, %r3390, %r3394;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3395, %r373, %r3397, %r3392;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3399, %r376, %r3370;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3402, %r373, %r3367, %r3399;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3406, %r376, %r3379;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3409, %r373, %r3376, %r3406;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3413, %r376, %r3388;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3416, %r373, %r3385, %r3413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3420, %r376, %r3397;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3423, %r373, %r3394, %r3420;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3468, %r3471}, {%r417, %r423, %r420, %r426}, {%r3368, %r3402}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3487, %r3490}, {%r417, %r423, %r420, %r426}, {%r3377, %r3409}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3475, %r3479}, {%r417, %r423, %r420, %r426}, {%r3386, %r3416}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3494, %r3498}, {%r417, %r423, %r420, %r426}, {%r3395, %r3423}, {%r2212, %r2212};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3467, %r3468, %r3468;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3470, %r3471, %r3471, %r3467;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3474, %r3475, %r3475, %r3470;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3478, %r3479, %r3479, %r3474;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3564, %r1677, %r3478, %r3307;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3486, %r3487, %r3487;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3489, %r3490, %r3490, %r3486;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3493, %r3494, %r3494, %r3489;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3497, %r3498, %r3498, %r3493;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3563, %r1677, %r3497, %r3326;
	// end inline asm
	add.s32 	%r3561, %r3561, 4;
	setp.ne.s32 	%p138, %r3561, 40;
	@%p138 bra 	LBB0_91;
// %bb.88:                              // %L34987
                                        //   in Loop: Header=BB0_83 Depth=2
	@%p65 bra 	LBB0_90;
// %bb.89:                              // %L35052
                                        //   in Loop: Header=BB0_83 Depth=2
	mul.lo.s32 	%r3505, %r3562, 1152;
	or.b32  	%r3506, %r3505, %r70;
	add.s32 	%r3507, %r3506, %r100;
	add.s32 	%r3508, %r3507, %r99;
	mul.wide.u32 	%rd297, %r3508, 4;
	add.s64 	%rd298, %rd4, %rd297;
	st.global.u32 	[%rd298], %r3564;
	add.s32 	%r3509, %r3507, %r101;
	mul.wide.u32 	%rd299, %r3509, 4;
	add.s64 	%rd300, %rd4, %rd299;
	st.global.u32 	[%rd300], %r3563;
	bra.uni 	LBB0_90;
LBB0_93:                                // %L35348
	mov.u32 	%r3511, 0;
	st.global.u32 	[%rd5], %r3511;
	ret;
LBB0_1:                                 // %L9
	ld.param.u32 	%r305, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd13, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0];
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd13;
	st.param.b32 	[param0+8], %r305;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
