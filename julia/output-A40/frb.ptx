// PTX CompilerJob of MethodInstance for frb(::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 7.1
.target sm_86
.address_size 64

	// .globl	_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE // -- Begin function _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.visible .entry _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE(
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<142>;
	.reg .b16 	%rs<289>;
	.reg .b32 	%r<3553>;
	.reg .f32 	%f<402>;
	.reg .b64 	%rd<283>;

// %bb.0:                               // %conversion
	// begin inline asm
	mov.u32 %r291, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r291, 76895;
	@%p1 bra 	LBB0_94;
	bra.uni 	LBB0_1;
LBB0_94:                                // %L10
	ld.param.u64 	%rd14, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5];
	mov.u32 	%r1, %ctaid.x;
	mul.lo.s32 	%r292, %r1, 768;
	mov.u32 	%r2, %tid.x;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r293, %r292, %r2;
	add.s32 	%r294, %r293, %r4;
	mul.wide.u32 	%rd20, %r294, 4;
	add.s64 	%rd5, %rd14, %rd20;
	mov.u32 	%r295, 1;
	st.global.u32 	[%rd5], %r295;
	and.b32  	%r5, %r2, 3;
	shr.u32 	%r6, %r2, 2;
	mul.lo.s32 	%r296, %r5, %r6;
	and.b32  	%r297, %r296, 7;
	cvt.rn.f32.u32 	%f102, %r297;
	mov.f32 	%f103, 0f40800000;
	div.approx.f32 	%f1, %f102, %f103;
	abs.f32 	%f400, %f1;
	setp.lt.f32 	%p2, %f400, 0f40000000;
	@%p2 bra 	LBB0_106;
// %bb.95:
	setp.gtu.f32 	%p3, %f400, 0f4B800000;
	@%p3 bra 	LBB0_102;
	bra.uni 	LBB0_96;
LBB0_102:
	mov.b32 	%r222, %f400;
	and.b32  	%r298, %r222, 8388607;
	or.b32  	%r3551, %r298, 1065353216;
	mov.b32 	%f399, %r3551;
	add.s32 	%r299, %r222, -1073741824;
	and.b32  	%r3552, %r299, -8388608;
	setp.eq.s32 	%p9, %r3552, 0;
	@%p9 bra 	LBB0_105;
// %bb.103:                             // %__nv_fmaf_rn.exit4.i.i.i1286.preheader
	mov.f32 	%f113, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f112,%f113;
	// end inline asm
LBB0_104:                               // %__nv_fmaf_rn.exit4.i.i.i1286
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r300, %r3552, 192937984;
	add.s32 	%r301, %r300, %r3551;
	mov.b32 	%f114, %r301;
	mul.f32 	%f115, %f112, %f114;
	sub.f32 	%f116, %f114, %f115;
	fma.rn.f32 	%f117, %f116, %f112, %f115;
	sub.f32 	%f118, %f114, %f117;
	fma.rz.f32 	%f119, %f118, %f112, %f117;
	cvt.rzi.f32.f32 	%f120, %f119;
	sub.f32 	%f399, %f114, %f120;
	sub.s32 	%r3552, %r3552, %r300;
	mov.b32 	%r3551, %f399;
	setp.ne.s32 	%p10, %r3552, 0;
	setp.ne.s32 	%p11, %r3551, 0;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	LBB0_104;
LBB0_105:                               // %__internal_fmodf_slowpath_mod.exit.i.i1288
	setp.gt.u32 	%p13, %r222, 2139095039;
	selp.f32 	%f121, 0f7FFFFFFF, 0f4B800000, %p13;
	mul.f32 	%f122, %f399, 0f34000000;
	mul.f32 	%f400, %f121, %f122;
	bra.uni 	LBB0_106;
LBB0_96:                                // %__nv_fast_fdividef.exit.i.i.i1258
	mov.f32 	%f104, 0f40000000;
	div.approx.f32 	%f105, %f400, %f104;
	cvt.rzi.f32.f32 	%f398, %f105;
	fma.rn.f32 	%f88, %f398, 0fC0000000, %f400;
	mov.b32 	%r221, %f88;
	setp.lt.u32 	%p4, %r221, 1073741824;
	@%p4 bra 	LBB0_101;
// %bb.97:
	setp.lt.u32 	%p5, %r221, -2147483647;
	@%p5 bra 	LBB0_99;
// %bb.98:
	add.f32 	%f110, %f398, 0fBF800000;
	setp.lt.f32 	%p8, %f88, 0fC0000000;
	add.f32 	%f111, %f110, 0fBF800000;
	selp.f32 	%f398, %f111, %f110, %p8;
	bra.uni 	LBB0_101;
LBB0_99:
	add.f32 	%f398, %f398, 0f3F800000;
	setp.ltu.f32 	%p6, %f88, 0f40800000;
	@%p6 bra 	LBB0_101;
// %bb.100:                             // %__nv_fmaf_rn.exit.i.i.i1263
	add.f32 	%f106, %f398, 0f3F800000;
	fma.rn.f32 	%f108, %f104, 0fC0400000, %f88;
	setp.ge.f32 	%p7, %f108, 0f00000000;
	add.f32 	%f109, %f106, 0f3F800000;
	selp.f32 	%f398, %f109, %f106, %p7;
LBB0_101:                               // %__internal_fmodf_fastpath_quot.exit.i.i1267
	fma.rn.f32 	%f400, %f398, 0fC0000000, %f400;
LBB0_106:                               // %__internal_fmodf_kernel.exit.i1292
	abs.f32 	%f123, %f400;
	setp.gtu.f32 	%p14, %f123, 0f7F800000;
	@%p14 bra 	LBB0_108;
// %bb.107:
	mov.b32 	%r302, %f1;
	and.b32  	%r303, %r302, -2147483648;
	mov.b32 	%r304, %f400;
	or.b32  	%r305, %r303, %r304;
	mov.b32 	%f400, %r305;
LBB0_108:                               // %__nv_fmodf.exit1293
	add.f32 	%f125, %f400, %f400;
	mov.b32 	%r312, %f125;
	and.b32  	%r313, %r312, -2147483648;
	or.b32  	%r314, %r313, 1056964608;
	mov.b32 	%f126, %r314;
	add.f32 	%f127, %f125, %f126;
	cvt.rzi.f32.f32 	%f128, %f127;
	abs.f32 	%f129, %f125;
	setp.gt.f32 	%p15, %f129, 0f4B000000;
	selp.f32 	%f130, %f125, %f128, %p15;
	cvt.rzi.f32.f32 	%f131, %f125;
	setp.lt.f32 	%p16, %f129, 0f3F000000;
	selp.f32 	%f132, %f131, %f130, %p16;
	cvt.rzi.s32.f32 	%r315, %f132;
	fma.rn.f32 	%f133, %f132, 0fBF000000, %f400;
	mul.f32 	%f134, %f133, 0f34222169;
	fma.rn.f32 	%f135, %f133, 0f40490FDA, %f134;
	mul.f32 	%f136, %f135, %f135;
	fma.rn.f32 	%f137, %f136, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f138, %f137, %f136, 0f3D2AAABB;
	fma.rn.f32 	%f139, %f138, %f136, 0fBEFFFFFF;
	fma.rn.f32 	%f140, %f139, %f136, 0f3F800000;
	fma.rn.f32 	%f141, %f136, %f135, 0f00000000;
	fma.rn.f32 	%f142, %f136, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f143, %f142, %f136, 0fBE2AAAA8;
	fma.rn.f32 	%f144, %f143, %f141, %f135;
	and.b32  	%r316, %r315, 1;
	setp.eq.b32 	%p17, %r316, 1;
	selp.f32 	%f145, %f140, %f144, %p17;
	selp.f32 	%f146, %f144, %f140, %p17;
	and.b32  	%r317, %r315, 2;
	setp.eq.s32 	%p18, %r317, 0;
	neg.f32 	%f147, %f145;
	selp.f32 	%f148, %f145, %f147, %p18;
	add.s32 	%r318, %r315, 1;
	and.b32  	%r319, %r318, 2;
	mov.f32 	%f396, 0f00000000;
	cvt.rzi.f32.f32 	%f151, %f400;
	setp.eq.f32 	%p20, %f151, %f400;
	mul.f32 	%f152, %f400, 0f00000000;
	shl.b32 	%r231, %r2, 1;
	and.b32  	%r232, %r231, 6;
	or.b32  	%r233, %r232, 1;
	setp.eq.s32 	%p22, %r232, 6;
	mov.f32 	%f372, 0f41C00000;
	mul.lo.s32 	%r3452, %r232, %r6;
	mov.f32 	%f378, %f396;
	mov.f32 	%f379, %f396;
	@%p22 bra 	LBB0_17;
// %bb.2:                               // %L186
	cvt.u16.u32 	%rs2, %r3452;
	and.b16  	%rs3, %rs2, 255;
	mul.lo.s16 	%rs4, %rs3, 171;
	shr.u16 	%rs5, %rs4, 13;
	mul.lo.s16 	%rs6, %rs5, 48;
	sub.s16 	%rs7, %rs2, %rs6;
	and.b16  	%rs8, %rs7, 255;
	cvt.rn.f32.u16 	%f157, %rs8;
	div.approx.f32 	%f3, %f157, %f372;
	abs.f32 	%f376, %f3;
	setp.lt.f32 	%p23, %f376, 0f40000000;
	@%p23 bra 	LBB0_14;
// %bb.3:
	setp.gtu.f32 	%p24, %f376, 0f4B800000;
	@%p24 bra 	LBB0_10;
	bra.uni 	LBB0_4;
LBB0_10:
	mov.b32 	%r8, %f376;
	and.b32  	%r321, %r8, 8388607;
	or.b32  	%r3455, %r321, 1065353216;
	mov.b32 	%f375, %r3455;
	add.s32 	%r322, %r8, -1073741824;
	and.b32  	%r3456, %r322, -8388608;
	setp.eq.s32 	%p30, %r3456, 0;
	@%p30 bra 	LBB0_13;
// %bb.11:                              // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f168, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f167,%f168;
	// end inline asm
LBB0_12:                                // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r323, %r3456, 192937984;
	add.s32 	%r324, %r323, %r3455;
	mov.b32 	%f169, %r324;
	mul.f32 	%f170, %f167, %f169;
	sub.f32 	%f171, %f169, %f170;
	fma.rn.f32 	%f172, %f171, %f167, %f170;
	sub.f32 	%f173, %f169, %f172;
	fma.rz.f32 	%f174, %f173, %f167, %f172;
	cvt.rzi.f32.f32 	%f175, %f174;
	sub.f32 	%f375, %f169, %f175;
	sub.s32 	%r3456, %r3456, %r323;
	mov.b32 	%r3455, %f375;
	setp.ne.s32 	%p31, %r3456, 0;
	setp.ne.s32 	%p32, %r3455, 0;
	and.pred  	%p33, %p31, %p32;
	@%p33 bra 	LBB0_12;
LBB0_13:                                // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p34, %r8, 2139095039;
	selp.f32 	%f176, 0f7FFFFFFF, 0f4B800000, %p34;
	mul.f32 	%f177, %f375, 0f34000000;
	mul.f32 	%f376, %f176, %f177;
	bra.uni 	LBB0_14;
LBB0_4:                                 // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f159, 0f40000000;
	div.approx.f32 	%f160, %f376, %f159;
	cvt.rzi.f32.f32 	%f374, %f160;
	fma.rn.f32 	%f6, %f374, 0fC0000000, %f376;
	mov.b32 	%r7, %f6;
	setp.lt.u32 	%p25, %r7, 1073741824;
	@%p25 bra 	LBB0_9;
// %bb.5:
	setp.lt.u32 	%p26, %r7, -2147483647;
	@%p26 bra 	LBB0_7;
// %bb.6:
	add.f32 	%f165, %f374, 0fBF800000;
	setp.lt.f32 	%p29, %f6, 0fC0000000;
	add.f32 	%f166, %f165, 0fBF800000;
	selp.f32 	%f374, %f166, %f165, %p29;
	bra.uni 	LBB0_9;
LBB0_7:
	add.f32 	%f374, %f374, 0f3F800000;
	setp.ltu.f32 	%p27, %f6, 0f40800000;
	@%p27 bra 	LBB0_9;
// %bb.8:                               // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f161, %f374, 0f3F800000;
	fma.rn.f32 	%f163, %f159, 0fC0400000, %f6;
	setp.ge.f32 	%p28, %f163, 0f00000000;
	add.f32 	%f164, %f161, 0f3F800000;
	selp.f32 	%f374, %f164, %f161, %p28;
LBB0_9:                                 // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f376, %f374, 0fC0000000, %f376;
LBB0_14:                                // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f178, %f376;
	setp.gtu.f32 	%p35, %f178, 0f7F800000;
	@%p35 bra 	LBB0_16;
// %bb.15:
	mov.b32 	%r325, %f3;
	and.b32  	%r326, %r325, -2147483648;
	mov.b32 	%r327, %f376;
	or.b32  	%r328, %r326, %r327;
	mov.b32 	%f376, %r328;
LBB0_16:                                // %__nv_fmodf.exit
	add.f32 	%f179, %f376, %f376;
	mov.b32 	%r329, %f179;
	and.b32  	%r330, %r329, -2147483648;
	or.b32  	%r331, %r330, 1056964608;
	mov.b32 	%f180, %r331;
	add.f32 	%f181, %f179, %f180;
	cvt.rzi.f32.f32 	%f182, %f181;
	abs.f32 	%f183, %f179;
	setp.gt.f32 	%p36, %f183, 0f4B000000;
	selp.f32 	%f184, %f179, %f182, %p36;
	cvt.rzi.f32.f32 	%f185, %f179;
	setp.lt.f32 	%p37, %f183, 0f3F000000;
	selp.f32 	%f186, %f185, %f184, %p37;
	cvt.rzi.s32.f32 	%r332, %f186;
	fma.rn.f32 	%f187, %f186, 0fBF000000, %f376;
	mul.f32 	%f188, %f187, 0f34222169;
	fma.rn.f32 	%f189, %f187, 0f40490FDA, %f188;
	mul.f32 	%f190, %f189, %f189;
	fma.rn.f32 	%f191, %f190, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f192, %f191, %f190, 0f3D2AAABB;
	fma.rn.f32 	%f193, %f192, %f190, 0fBEFFFFFF;
	fma.rn.f32 	%f194, %f193, %f190, 0f3F800000;
	fma.rn.f32 	%f195, %f190, %f189, 0f00000000;
	fma.rn.f32 	%f196, %f190, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f197, %f196, %f190, 0fBE2AAAA8;
	fma.rn.f32 	%f198, %f197, %f195, %f189;
	and.b32  	%r333, %r332, 1;
	setp.eq.b32 	%p38, %r333, 1;
	selp.f32 	%f199, %f194, %f198, %p38;
	selp.f32 	%f200, %f198, %f194, %p38;
	and.b32  	%r334, %r332, 2;
	setp.eq.s32 	%p39, %r334, 0;
	neg.f32 	%f201, %f199;
	selp.f32 	%f202, %f199, %f201, %p39;
	add.s32 	%r335, %r332, 1;
	and.b32  	%r336, %r335, 2;
	setp.eq.s32 	%p40, %r336, 0;
	mov.f32 	%f203, 0f00000000;
	sub.f32 	%f204, %f203, %f200;
	selp.f32 	%f205, %f200, %f204, %p40;
	cvt.rzi.f32.f32 	%f206, %f376;
	setp.eq.f32 	%p41, %f206, %f376;
	mul.f32 	%f207, %f376, 0f00000000;
	selp.f32 	%f379, %f207, %f202, %p41;
	abs.f32 	%f208, %f376;
	setp.gt.f32 	%p42, %f208, 0f4B800000;
	add.f32 	%f209, %f379, 0f3F800000;
	selp.f32 	%f378, %f209, %f205, %p42;
LBB0_17:                                // %L202
	setp.eq.s32 	%p19, %r319, 0;
	sub.f32 	%f149, %f396, %f146;
	selp.f32 	%f153, %f152, %f148, %p20;
	abs.f32 	%f154, %f400;
	setp.gt.u32 	%p43, %r233, 5;
	mul.lo.s32 	%r3453, %r233, %r6;
	mov.f32 	%f384, %f396;
	mov.f32 	%f385, %f396;
	@%p43 bra 	LBB0_33;
// %bb.18:                              // %L206
	mul.hi.u32 	%r338, %r3453, -1431655765;
	shr.u32 	%r339, %r338, 5;
	mul.lo.s32 	%r340, %r339, 48;
	sub.s32 	%r341, %r3453, %r340;
	cvt.rn.f32.s32 	%f211, %r341;
	div.approx.f32 	%f24, %f211, %f372;
	abs.f32 	%f382, %f24;
	setp.lt.f32 	%p44, %f382, 0f40000000;
	@%p44 bra 	LBB0_30;
// %bb.19:
	setp.gtu.f32 	%p45, %f382, 0f4B800000;
	@%p45 bra 	LBB0_26;
	bra.uni 	LBB0_20;
LBB0_26:
	mov.b32 	%r16, %f382;
	and.b32  	%r342, %r16, 8388607;
	or.b32  	%r3457, %r342, 1065353216;
	mov.b32 	%f381, %r3457;
	add.s32 	%r343, %r16, -1073741824;
	and.b32  	%r3458, %r343, -8388608;
	setp.eq.s32 	%p51, %r3458, 0;
	@%p51 bra 	LBB0_29;
// %bb.27:                              // %__nv_fmaf_rn.exit4.i.i.i1148.preheader
	mov.f32 	%f222, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f221,%f222;
	// end inline asm
LBB0_28:                                // %__nv_fmaf_rn.exit4.i.i.i1148
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r344, %r3458, 192937984;
	add.s32 	%r345, %r344, %r3457;
	mov.b32 	%f223, %r345;
	mul.f32 	%f224, %f221, %f223;
	sub.f32 	%f225, %f223, %f224;
	fma.rn.f32 	%f226, %f225, %f221, %f224;
	sub.f32 	%f227, %f223, %f226;
	fma.rz.f32 	%f228, %f227, %f221, %f226;
	cvt.rzi.f32.f32 	%f229, %f228;
	sub.f32 	%f381, %f223, %f229;
	sub.s32 	%r3458, %r3458, %r344;
	mov.b32 	%r3457, %f381;
	setp.ne.s32 	%p52, %r3458, 0;
	setp.ne.s32 	%p53, %r3457, 0;
	and.pred  	%p54, %p52, %p53;
	@%p54 bra 	LBB0_28;
LBB0_29:                                // %__internal_fmodf_slowpath_mod.exit.i.i1150
	setp.gt.u32 	%p55, %r16, 2139095039;
	selp.f32 	%f230, 0f7FFFFFFF, 0f4B800000, %p55;
	mul.f32 	%f231, %f381, 0f34000000;
	mul.f32 	%f382, %f230, %f231;
	bra.uni 	LBB0_30;
LBB0_20:                                // %__nv_fast_fdividef.exit.i.i.i1120
	mov.f32 	%f213, 0f40000000;
	div.approx.f32 	%f214, %f382, %f213;
	cvt.rzi.f32.f32 	%f380, %f214;
	fma.rn.f32 	%f27, %f380, 0fC0000000, %f382;
	mov.b32 	%r15, %f27;
	setp.lt.u32 	%p46, %r15, 1073741824;
	@%p46 bra 	LBB0_25;
// %bb.21:
	setp.lt.u32 	%p47, %r15, -2147483647;
	@%p47 bra 	LBB0_23;
// %bb.22:
	add.f32 	%f219, %f380, 0fBF800000;
	setp.lt.f32 	%p50, %f27, 0fC0000000;
	add.f32 	%f220, %f219, 0fBF800000;
	selp.f32 	%f380, %f220, %f219, %p50;
	bra.uni 	LBB0_25;
LBB0_23:
	add.f32 	%f380, %f380, 0f3F800000;
	setp.ltu.f32 	%p48, %f27, 0f40800000;
	@%p48 bra 	LBB0_25;
// %bb.24:                              // %__nv_fmaf_rn.exit.i.i.i1125
	add.f32 	%f215, %f380, 0f3F800000;
	fma.rn.f32 	%f217, %f213, 0fC0400000, %f27;
	setp.ge.f32 	%p49, %f217, 0f00000000;
	add.f32 	%f218, %f215, 0f3F800000;
	selp.f32 	%f380, %f218, %f215, %p49;
LBB0_25:                                // %__internal_fmodf_fastpath_quot.exit.i.i1129
	fma.rn.f32 	%f382, %f380, 0fC0000000, %f382;
LBB0_30:                                // %__internal_fmodf_kernel.exit.i1154
	abs.f32 	%f232, %f382;
	setp.gtu.f32 	%p56, %f232, 0f7F800000;
	@%p56 bra 	LBB0_32;
// %bb.31:
	mov.b32 	%r346, %f24;
	and.b32  	%r347, %r346, -2147483648;
	mov.b32 	%r348, %f382;
	or.b32  	%r349, %r347, %r348;
	mov.b32 	%f382, %r349;
LBB0_32:                                // %__nv_fmodf.exit1155
	add.f32 	%f233, %f382, %f382;
	mov.b32 	%r350, %f233;
	and.b32  	%r351, %r350, -2147483648;
	or.b32  	%r352, %r351, 1056964608;
	mov.b32 	%f234, %r352;
	add.f32 	%f235, %f233, %f234;
	cvt.rzi.f32.f32 	%f236, %f235;
	abs.f32 	%f237, %f233;
	setp.gt.f32 	%p57, %f237, 0f4B000000;
	selp.f32 	%f238, %f233, %f236, %p57;
	cvt.rzi.f32.f32 	%f239, %f233;
	setp.lt.f32 	%p58, %f237, 0f3F000000;
	selp.f32 	%f240, %f239, %f238, %p58;
	cvt.rzi.s32.f32 	%r353, %f240;
	fma.rn.f32 	%f241, %f240, 0fBF000000, %f382;
	mul.f32 	%f242, %f241, 0f34222169;
	fma.rn.f32 	%f243, %f241, 0f40490FDA, %f242;
	mul.f32 	%f244, %f243, %f243;
	fma.rn.f32 	%f245, %f244, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f246, %f245, %f244, 0f3D2AAABB;
	fma.rn.f32 	%f247, %f246, %f244, 0fBEFFFFFF;
	fma.rn.f32 	%f248, %f247, %f244, 0f3F800000;
	fma.rn.f32 	%f249, %f244, %f243, 0f00000000;
	fma.rn.f32 	%f250, %f244, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f251, %f250, %f244, 0fBE2AAAA8;
	fma.rn.f32 	%f252, %f251, %f249, %f243;
	and.b32  	%r354, %r353, 1;
	setp.eq.b32 	%p59, %r354, 1;
	selp.f32 	%f253, %f248, %f252, %p59;
	selp.f32 	%f254, %f252, %f248, %p59;
	and.b32  	%r355, %r353, 2;
	setp.eq.s32 	%p60, %r355, 0;
	neg.f32 	%f255, %f253;
	selp.f32 	%f256, %f253, %f255, %p60;
	add.s32 	%r356, %r353, 1;
	and.b32  	%r357, %r356, 2;
	setp.eq.s32 	%p61, %r357, 0;
	mov.f32 	%f257, 0f00000000;
	sub.f32 	%f258, %f257, %f254;
	selp.f32 	%f259, %f254, %f258, %p61;
	cvt.rzi.f32.f32 	%f260, %f382;
	setp.eq.f32 	%p62, %f260, %f382;
	mul.f32 	%f261, %f382, 0f00000000;
	selp.f32 	%f385, %f261, %f256, %p62;
	abs.f32 	%f262, %f382;
	setp.gt.f32 	%p63, %f262, 0f4B800000;
	add.f32 	%f263, %f385, 0f3F800000;
	selp.f32 	%f384, %f263, %f259, %p63;
LBB0_33:                                // %L222
	selp.f32 	%f150, %f146, %f149, %p19;
	setp.gt.f32 	%p21, %f154, 0f4B800000;
	add.f32 	%f155, %f153, 0f3F800000;
	setp.gt.u32 	%p65, %r2, 23;
	or.pred  	%p66, %p22, %p65;
	mov.f32 	%f373, 0f40400000;
	mov.f32 	%f390, %f396;
	mov.f32 	%f391, %f396;
	@%p66 bra 	LBB0_49;
// %bb.34:                              // %L259
	cvt.u16.u32 	%rs9, %r3452;
	and.b16  	%rs10, %rs9, 255;
	mul.lo.s16 	%rs11, %rs10, 171;
	shr.u16 	%rs12, %rs11, 10;
	mul.lo.s16 	%rs13, %rs12, 6;
	sub.s16 	%rs14, %rs9, %rs13;
	and.b16  	%rs15, %rs14, 255;
	cvt.rn.f32.u16 	%f265, %rs15;
	div.approx.f32 	%f45, %f265, %f373;
	abs.f32 	%f388, %f45;
	setp.lt.f32 	%p67, %f388, 0f40000000;
	@%p67 bra 	LBB0_46;
// %bb.35:
	setp.gtu.f32 	%p68, %f388, 0f4B800000;
	@%p68 bra 	LBB0_42;
	bra.uni 	LBB0_36;
LBB0_42:
	mov.b32 	%r26, %f388;
	and.b32  	%r365, %r26, 8388607;
	or.b32  	%r3459, %r365, 1065353216;
	mov.b32 	%f387, %r3459;
	add.s32 	%r366, %r26, -1073741824;
	and.b32  	%r3460, %r366, -8388608;
	setp.eq.s32 	%p74, %r3460, 0;
	@%p74 bra 	LBB0_45;
// %bb.43:                              // %__nv_fmaf_rn.exit4.i.i.i1194.preheader
	mov.f32 	%f276, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f275,%f276;
	// end inline asm
LBB0_44:                                // %__nv_fmaf_rn.exit4.i.i.i1194
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r367, %r3460, 192937984;
	add.s32 	%r368, %r367, %r3459;
	mov.b32 	%f277, %r368;
	mul.f32 	%f278, %f275, %f277;
	sub.f32 	%f279, %f277, %f278;
	fma.rn.f32 	%f280, %f279, %f275, %f278;
	sub.f32 	%f281, %f277, %f280;
	fma.rz.f32 	%f282, %f281, %f275, %f280;
	cvt.rzi.f32.f32 	%f283, %f282;
	sub.f32 	%f387, %f277, %f283;
	sub.s32 	%r3460, %r3460, %r367;
	mov.b32 	%r3459, %f387;
	setp.ne.s32 	%p75, %r3460, 0;
	setp.ne.s32 	%p76, %r3459, 0;
	and.pred  	%p77, %p75, %p76;
	@%p77 bra 	LBB0_44;
LBB0_45:                                // %__internal_fmodf_slowpath_mod.exit.i.i1196
	setp.gt.u32 	%p78, %r26, 2139095039;
	selp.f32 	%f284, 0f7FFFFFFF, 0f4B800000, %p78;
	mul.f32 	%f285, %f387, 0f34000000;
	mul.f32 	%f388, %f284, %f285;
	bra.uni 	LBB0_46;
LBB0_36:                                // %__nv_fast_fdividef.exit.i.i.i1166
	mov.f32 	%f267, 0f40000000;
	div.approx.f32 	%f268, %f388, %f267;
	cvt.rzi.f32.f32 	%f386, %f268;
	fma.rn.f32 	%f48, %f386, 0fC0000000, %f388;
	mov.b32 	%r25, %f48;
	setp.lt.u32 	%p69, %r25, 1073741824;
	@%p69 bra 	LBB0_41;
// %bb.37:
	setp.lt.u32 	%p70, %r25, -2147483647;
	@%p70 bra 	LBB0_39;
// %bb.38:
	add.f32 	%f273, %f386, 0fBF800000;
	setp.lt.f32 	%p73, %f48, 0fC0000000;
	add.f32 	%f274, %f273, 0fBF800000;
	selp.f32 	%f386, %f274, %f273, %p73;
	bra.uni 	LBB0_41;
LBB0_39:
	add.f32 	%f386, %f386, 0f3F800000;
	setp.ltu.f32 	%p71, %f48, 0f40800000;
	@%p71 bra 	LBB0_41;
// %bb.40:                              // %__nv_fmaf_rn.exit.i.i.i1171
	add.f32 	%f269, %f386, 0f3F800000;
	fma.rn.f32 	%f271, %f267, 0fC0400000, %f48;
	setp.ge.f32 	%p72, %f271, 0f00000000;
	add.f32 	%f272, %f269, 0f3F800000;
	selp.f32 	%f386, %f272, %f269, %p72;
LBB0_41:                                // %__internal_fmodf_fastpath_quot.exit.i.i1175
	fma.rn.f32 	%f388, %f386, 0fC0000000, %f388;
LBB0_46:                                // %__internal_fmodf_kernel.exit.i1200
	abs.f32 	%f286, %f388;
	setp.gtu.f32 	%p79, %f286, 0f7F800000;
	@%p79 bra 	LBB0_48;
// %bb.47:
	mov.b32 	%r369, %f45;
	and.b32  	%r370, %r369, -2147483648;
	mov.b32 	%r371, %f388;
	or.b32  	%r372, %r370, %r371;
	mov.b32 	%f388, %r372;
LBB0_48:                                // %__nv_fmodf.exit1201
	add.f32 	%f287, %f388, %f388;
	mov.b32 	%r373, %f287;
	and.b32  	%r374, %r373, -2147483648;
	or.b32  	%r375, %r374, 1056964608;
	mov.b32 	%f288, %r375;
	add.f32 	%f289, %f287, %f288;
	cvt.rzi.f32.f32 	%f290, %f289;
	abs.f32 	%f291, %f287;
	setp.gt.f32 	%p80, %f291, 0f4B000000;
	selp.f32 	%f292, %f287, %f290, %p80;
	cvt.rzi.f32.f32 	%f293, %f287;
	setp.lt.f32 	%p81, %f291, 0f3F000000;
	selp.f32 	%f294, %f293, %f292, %p81;
	cvt.rzi.s32.f32 	%r376, %f294;
	fma.rn.f32 	%f295, %f294, 0fBF000000, %f388;
	mul.f32 	%f296, %f295, 0f34222169;
	fma.rn.f32 	%f297, %f295, 0f40490FDA, %f296;
	mul.f32 	%f298, %f297, %f297;
	fma.rn.f32 	%f299, %f298, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f300, %f299, %f298, 0f3D2AAABB;
	fma.rn.f32 	%f301, %f300, %f298, 0fBEFFFFFF;
	fma.rn.f32 	%f302, %f301, %f298, 0f3F800000;
	fma.rn.f32 	%f303, %f298, %f297, 0f00000000;
	fma.rn.f32 	%f304, %f298, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f305, %f304, %f298, 0fBE2AAAA8;
	fma.rn.f32 	%f306, %f305, %f303, %f297;
	and.b32  	%r377, %r376, 1;
	setp.eq.b32 	%p82, %r377, 1;
	selp.f32 	%f307, %f302, %f306, %p82;
	selp.f32 	%f308, %f306, %f302, %p82;
	and.b32  	%r378, %r376, 2;
	setp.eq.s32 	%p83, %r378, 0;
	neg.f32 	%f309, %f307;
	selp.f32 	%f310, %f307, %f309, %p83;
	add.s32 	%r379, %r376, 1;
	and.b32  	%r380, %r379, 2;
	setp.eq.s32 	%p84, %r380, 0;
	mov.f32 	%f311, 0f00000000;
	sub.f32 	%f312, %f311, %f308;
	selp.f32 	%f313, %f308, %f312, %p84;
	cvt.rzi.f32.f32 	%f314, %f388;
	setp.eq.f32 	%p85, %f314, %f388;
	mul.f32 	%f315, %f388, 0f00000000;
	selp.f32 	%f391, %f315, %f310, %p85;
	abs.f32 	%f316, %f388;
	setp.gt.f32 	%p86, %f316, 0f4B800000;
	add.f32 	%f317, %f391, 0f3F800000;
	selp.f32 	%f390, %f317, %f313, %p86;
LBB0_49:                                // %L275
	selp.f32 	%f156, %f155, %f150, %p21;
	or.pred  	%p89, %p43, %p65;
	mov.f32 	%f397, %f396;
	@%p89 bra 	LBB0_65;
// %bb.50:                              // %L283
	mul.hi.u32 	%r382, %r3453, -1431655765;
	shr.u32 	%r383, %r382, 2;
	mul.lo.s32 	%r384, %r383, 6;
	sub.s32 	%r385, %r3453, %r384;
	cvt.rn.f32.s32 	%f319, %r385;
	div.approx.f32 	%f66, %f319, %f373;
	abs.f32 	%f394, %f66;
	setp.lt.f32 	%p90, %f394, 0f40000000;
	@%p90 bra 	LBB0_62;
// %bb.51:
	setp.gtu.f32 	%p91, %f394, 0f4B800000;
	@%p91 bra 	LBB0_58;
	bra.uni 	LBB0_52;
LBB0_58:
	mov.b32 	%r34, %f394;
	and.b32  	%r386, %r34, 8388607;
	or.b32  	%r3461, %r386, 1065353216;
	mov.b32 	%f393, %r3461;
	add.s32 	%r387, %r34, -1073741824;
	and.b32  	%r3462, %r387, -8388608;
	setp.eq.s32 	%p97, %r3462, 0;
	@%p97 bra 	LBB0_61;
// %bb.59:                              // %__nv_fmaf_rn.exit4.i.i.i1240.preheader
	mov.f32 	%f330, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f329,%f330;
	// end inline asm
LBB0_60:                                // %__nv_fmaf_rn.exit4.i.i.i1240
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r388, %r3462, 192937984;
	add.s32 	%r389, %r388, %r3461;
	mov.b32 	%f331, %r389;
	mul.f32 	%f332, %f329, %f331;
	sub.f32 	%f333, %f331, %f332;
	fma.rn.f32 	%f334, %f333, %f329, %f332;
	sub.f32 	%f335, %f331, %f334;
	fma.rz.f32 	%f336, %f335, %f329, %f334;
	cvt.rzi.f32.f32 	%f337, %f336;
	sub.f32 	%f393, %f331, %f337;
	sub.s32 	%r3462, %r3462, %r388;
	mov.b32 	%r3461, %f393;
	setp.ne.s32 	%p98, %r3462, 0;
	setp.ne.s32 	%p99, %r3461, 0;
	and.pred  	%p100, %p98, %p99;
	@%p100 bra 	LBB0_60;
LBB0_61:                                // %__internal_fmodf_slowpath_mod.exit.i.i1242
	setp.gt.u32 	%p101, %r34, 2139095039;
	selp.f32 	%f338, 0f7FFFFFFF, 0f4B800000, %p101;
	mul.f32 	%f339, %f393, 0f34000000;
	mul.f32 	%f394, %f338, %f339;
	bra.uni 	LBB0_62;
LBB0_52:                                // %__nv_fast_fdividef.exit.i.i.i1212
	mov.f32 	%f321, 0f40000000;
	div.approx.f32 	%f322, %f394, %f321;
	cvt.rzi.f32.f32 	%f392, %f322;
	fma.rn.f32 	%f69, %f392, 0fC0000000, %f394;
	mov.b32 	%r33, %f69;
	setp.lt.u32 	%p92, %r33, 1073741824;
	@%p92 bra 	LBB0_57;
// %bb.53:
	setp.lt.u32 	%p93, %r33, -2147483647;
	@%p93 bra 	LBB0_55;
// %bb.54:
	add.f32 	%f327, %f392, 0fBF800000;
	setp.lt.f32 	%p96, %f69, 0fC0000000;
	add.f32 	%f328, %f327, 0fBF800000;
	selp.f32 	%f392, %f328, %f327, %p96;
	bra.uni 	LBB0_57;
LBB0_55:
	add.f32 	%f392, %f392, 0f3F800000;
	setp.ltu.f32 	%p94, %f69, 0f40800000;
	@%p94 bra 	LBB0_57;
// %bb.56:                              // %__nv_fmaf_rn.exit.i.i.i1217
	add.f32 	%f323, %f392, 0f3F800000;
	fma.rn.f32 	%f325, %f321, 0fC0400000, %f69;
	setp.ge.f32 	%p95, %f325, 0f00000000;
	add.f32 	%f326, %f323, 0f3F800000;
	selp.f32 	%f392, %f326, %f323, %p95;
LBB0_57:                                // %__internal_fmodf_fastpath_quot.exit.i.i1221
	fma.rn.f32 	%f394, %f392, 0fC0000000, %f394;
LBB0_62:                                // %__internal_fmodf_kernel.exit.i1246
	abs.f32 	%f340, %f394;
	setp.gtu.f32 	%p102, %f340, 0f7F800000;
	@%p102 bra 	LBB0_64;
// %bb.63:
	mov.b32 	%r390, %f66;
	and.b32  	%r391, %r390, -2147483648;
	mov.b32 	%r392, %f394;
	or.b32  	%r393, %r391, %r392;
	mov.b32 	%f394, %r393;
LBB0_64:                                // %__nv_fmodf.exit1247
	add.f32 	%f341, %f394, %f394;
	mov.b32 	%r394, %f341;
	and.b32  	%r395, %r394, -2147483648;
	or.b32  	%r396, %r395, 1056964608;
	mov.b32 	%f342, %r396;
	add.f32 	%f343, %f341, %f342;
	cvt.rzi.f32.f32 	%f344, %f343;
	abs.f32 	%f345, %f341;
	setp.gt.f32 	%p103, %f345, 0f4B000000;
	selp.f32 	%f346, %f341, %f344, %p103;
	cvt.rzi.f32.f32 	%f347, %f341;
	setp.lt.f32 	%p104, %f345, 0f3F000000;
	selp.f32 	%f348, %f347, %f346, %p104;
	cvt.rzi.s32.f32 	%r397, %f348;
	fma.rn.f32 	%f349, %f348, 0fBF000000, %f394;
	mul.f32 	%f350, %f349, 0f34222169;
	fma.rn.f32 	%f351, %f349, 0f40490FDA, %f350;
	mul.f32 	%f352, %f351, %f351;
	fma.rn.f32 	%f353, %f352, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f354, %f353, %f352, 0f3D2AAABB;
	fma.rn.f32 	%f355, %f354, %f352, 0fBEFFFFFF;
	fma.rn.f32 	%f356, %f355, %f352, 0f3F800000;
	fma.rn.f32 	%f357, %f352, %f351, 0f00000000;
	fma.rn.f32 	%f358, %f352, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f359, %f358, %f352, 0fBE2AAAA8;
	fma.rn.f32 	%f360, %f359, %f357, %f351;
	and.b32  	%r398, %r397, 1;
	setp.eq.b32 	%p105, %r398, 1;
	selp.f32 	%f361, %f356, %f360, %p105;
	selp.f32 	%f362, %f360, %f356, %p105;
	and.b32  	%r399, %r397, 2;
	setp.eq.s32 	%p106, %r399, 0;
	neg.f32 	%f363, %f361;
	selp.f32 	%f364, %f361, %f363, %p106;
	add.s32 	%r400, %r397, 1;
	and.b32  	%r401, %r400, 2;
	setp.eq.s32 	%p107, %r401, 0;
	mov.f32 	%f365, 0f00000000;
	sub.f32 	%f366, %f365, %f362;
	selp.f32 	%f367, %f362, %f366, %p107;
	cvt.rzi.f32.f32 	%f368, %f394;
	setp.eq.f32 	%p108, %f368, %f394;
	mul.f32 	%f369, %f394, 0f00000000;
	selp.f32 	%f397, %f369, %f364, %p108;
	abs.f32 	%f370, %f394;
	setp.gt.f32 	%p109, %f370, 0f4B800000;
	add.f32 	%f371, %f397, 0f3F800000;
	selp.f32 	%f396, %f371, %f367, %p109;
LBB0_65:                                // %L299
	mov.b32 	%r308, %f156;
	mov.b32 	%r311, %f153;
	mov.b32 	%r403, %f390;
	mov.b32 	%r404, %f396;
	mov.b32 	%r409, %f391;
	mov.b32 	%r410, %f397;
	mov.u32 	%r3463, 999999999;
	cvt.u16.u32 	%rs287, %r2;
	@%p65 bra 	LBB0_67;
// %bb.66:                              // %L335
	ld.param.u64 	%rd1, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1];
	and.b16  	%rs17, %rs287, 255;
	mul.lo.s16 	%rs18, %rs17, 171;
	shr.u16 	%rs19, %rs18, 12;
	mul.lo.s16 	%rs20, %rs19, 24;
	sub.s16 	%rs21, %rs287, %rs20;
	cvt.u32.u16 	%r415, %rs21;
	and.b32  	%r416, %r415, 255;
	mad.lo.s32 	%r417, %r416, 24, %r3;
	cvt.u16.u32 	%rs22, %r417;
	mul.hi.u16 	%rs23, %rs22, -7281;
	shr.u16 	%rs24, %rs23, 9;
	mul.lo.s16 	%rs25, %rs24, 576;
	sub.s16 	%rs26, %rs22, %rs25;
	cvt.u32.u16 	%r418, %rs26;
	mul.wide.u32 	%rd21, %r418, 4;
	add.s64 	%rd22, %rd1, %rd21;
	ld.global.u32 	%r419, [%rd22];
	cvt.s32.s16 	%r420, %r419;
	shr.s32 	%r421, %r419, 16;
	mul.lo.s32 	%r422, %r421, 801;
	mad.lo.s32 	%r3463, %r420, 33, %r422;
LBB0_67:                                // %L412
	xor.b32  	%r307, %r311, -2147483648;
	mov.b32 	%r359, %f378;
	mov.b32 	%r360, %f384;
	mov.b32 	%r362, %f379;
	mov.b32 	%r363, %f385;
	xor.b32  	%r406, %r409, -2147483648;
	xor.b32  	%r407, %r410, -2147483648;
	and.b32  	%r47, %r2, 24;
	setp.ne.s32 	%p111, %r47, 24;
	cvt.u16.u32 	%rs288, %r6;
	@%p111 bra 	LBB0_69;
// %bb.68:                              // %L412.L717_crit_edge
	mul.lo.s16 	%rs40, %rs288, 171;
	shr.u16 	%rs41, %rs40, 10;
	mul.lo.s16 	%rs42, %rs41, 6;
	sub.s16 	%rs43, %rs288, %rs42;
	cvt.u32.u16 	%r437, %rs43;
	and.b32  	%r3467, %r437, 255;
	cvt.u16.u32 	%rs44, %r3;
	and.b16  	%rs45, %rs44, 255;
	mul.lo.s16 	%rs46, %rs45, 171;
	shr.u16 	%rs47, %rs46, 10;
	cvt.u32.u16 	%r3466, %rs47;
	mul.lo.s16 	%rs48, %rs47, -6;
	add.s16 	%rs49, %rs48, %rs44;
	cvt.u32.u16 	%r439, %rs49;
	and.b32  	%r3465, %r439, 255;
	mul.wide.u16 	%r3464, %rs47, 6;
	mov.u32 	%r3468, 0;
	mov.u32 	%r3469, %r3468;
	bra.uni 	LBB0_70;
LBB0_69:                                // %L438
	ld.param.u64 	%rd2, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2];
	cvt.u16.u32 	%rs27, %r3;
	and.b16  	%rs28, %rs27, 255;
	mul.lo.s16 	%rs29, %rs28, 171;
	shr.u16 	%rs30, %rs29, 10;
	mul.lo.s16 	%rs31, %rs30, -6;
	add.s16 	%rs32, %rs31, %rs27;
	cvt.u32.u16 	%r424, %rs32;
	and.b32  	%r3465, %r424, 255;
	mul.lo.s16 	%rs34, %rs288, 171;
	shr.u16 	%rs35, %rs34, 10;
	mul.lo.s16 	%rs36, %rs35, 6;
	sub.s16 	%rs37, %rs288, %rs36;
	cvt.u32.u16 	%r425, %rs37;
	and.b32  	%r3467, %r425, 255;
	and.b16  	%rs38, %rs37, 255;
	mul.wide.u16 	%r426, %rs38, 24;
	cvt.u32.u16 	%r3466, %rs30;
	mul.wide.u16 	%r3464, %rs30, 6;
	mul.lo.s32 	%r427, %r1, 1152;
	mad.lo.s32 	%r428, %r5, 144, %r427;
	or.b32  	%r429, %r428, %r3465;
	add.s32 	%r430, %r429, %r3464;
	add.s32 	%r431, %r430, %r426;
	mul.wide.u32 	%rd23, %r431, 4;
	add.s64 	%rd24, %rd2, %rd23;
	ld.global.u32 	%r3468, [%rd24];
	add.s32 	%r432, %r428, 576;
	or.b32  	%r433, %r432, %r3465;
	add.s32 	%r434, %r433, %r3464;
	add.s32 	%r435, %r434, %r426;
	mul.wide.s32 	%rd25, %r435, 4;
	add.s64 	%rd26, %rd2, %rd25;
	ld.global.u32 	%r3469, [%rd26];
LBB0_70:                                // %L717
	ld.param.u64 	%rd3, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3];
	ld.param.u64 	%rd4, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4];
	// begin inline asm
	cvt.rn.f16x2.f32 %r306, %r308, %r307;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r309, %r311, %r308;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r358, %r360, %r359;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r361, %r363, %r362;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r402, %r404, %r403;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r405, %r407, %r406;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r408, %r410, %r409;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r411, %r404, %r403;
	// end inline asm
	mov.u32 	%r3454, 0;
	shl.b32 	%r441, %r2, 2;
	and.b32  	%r442, %r441, 60;
	shl.b32 	%r443, %r2, 3;
	and.b32  	%r444, %r443, 128;
	shl.b32 	%r445, %r1, 8;
	or.b32  	%r446, %r442, %r444;
	or.b32  	%r64, %r446, %r445;
	or.b32  	%r447, %r441, %r445;
	or.b32  	%r448, %r447, %r444;
	or.b32  	%r65, %r448, 65;
	add.s32 	%r66, %r3, 24;
	and.b16  	%rs1, %rs287, 16;
	and.b32  	%r449, %r231, 30;
	shr.u32 	%r450, %r2, 4;
	or.b32  	%r451, %r449, %r450;
	mul.lo.s32 	%r67, %r451, 257;
	or.b32  	%r452, %r450, %r231;
	or.b32  	%r453, %r452, 32;
	mul.lo.s32 	%r68, %r453, 257;
	and.b32  	%r454, %r4, 224;
	shr.u32 	%r455, %r3, 3;
	and.b16  	%rs51, %rs287, 255;
	mul.lo.s16 	%rs52, %rs51, 171;
	shr.u16 	%rs53, %rs52, 12;
	mul.lo.s16 	%rs54, %rs53, 24;
	sub.s16 	%rs55, %rs287, %rs54;
	cvt.u32.u16 	%r456, %rs55;
	and.b32  	%r69, %r456, 255;
	mad.lo.s32 	%r70, %r455, 257, %r454;
	shr.u32 	%r457, %r66, 3;
	mad.lo.s32 	%r71, %r457, 257, %r454;
	add.s32 	%r458, %r3, 48;
	shr.u32 	%r459, %r458, 3;
	mad.lo.s32 	%r72, %r459, 257, %r454;
	add.s32 	%r460, %r3, 72;
	shr.u32 	%r461, %r460, 3;
	mad.lo.s32 	%r73, %r461, 257, %r454;
	or.b32  	%r462, %r455, 12;
	mad.lo.s32 	%r74, %r462, 257, %r454;
	add.s32 	%r463, %r3, 120;
	shr.u32 	%r464, %r463, 3;
	mad.lo.s32 	%r75, %r464, 257, %r454;
	add.s32 	%r465, %r3, 144;
	shr.u32 	%r466, %r465, 3;
	mad.lo.s32 	%r76, %r466, 257, %r454;
	add.s32 	%r467, %r3, 168;
	shr.u32 	%r468, %r467, 3;
	mad.lo.s32 	%r77, %r468, 257, %r454;
	or.b32  	%r469, %r455, 24;
	mad.lo.s32 	%r78, %r469, 257, %r454;
	add.s32 	%r470, %r3, 216;
	shr.u32 	%r471, %r470, 3;
	mad.lo.s32 	%r79, %r471, 257, %r454;
	add.s32 	%r472, %r3, 240;
	shr.u32 	%r473, %r472, 3;
	mad.lo.s32 	%r80, %r473, 257, %r454;
	add.s32 	%r474, %r3, 264;
	shr.u32 	%r475, %r474, 3;
	mad.lo.s32 	%r81, %r475, 257, %r454;
	or.b32  	%r476, %r455, 36;
	mad.lo.s32 	%r82, %r476, 257, %r454;
	add.s32 	%r477, %r3, 312;
	shr.u32 	%r478, %r477, 3;
	mad.lo.s32 	%r83, %r478, 257, %r454;
	add.s32 	%r479, %r3, 336;
	shr.u32 	%r480, %r479, 3;
	mad.lo.s32 	%r84, %r480, 257, %r454;
	add.s32 	%r481, %r3, 360;
	shr.u32 	%r482, %r481, 3;
	mad.lo.s32 	%r85, %r482, 257, %r454;
	or.b32  	%r483, %r455, 48;
	mad.lo.s32 	%r86, %r483, 257, %r454;
	add.s32 	%r484, %r3, 408;
	shr.u32 	%r485, %r484, 3;
	mad.lo.s32 	%r87, %r485, 257, %r454;
	add.s32 	%r486, %r3, 432;
	shr.u32 	%r487, %r486, 3;
	mad.lo.s32 	%r88, %r487, 257, %r454;
	add.s32 	%r488, %r3, 456;
	shr.u32 	%r489, %r488, 3;
	mad.lo.s32 	%r89, %r489, 257, %r454;
	or.b32  	%r490, %r455, 60;
	mad.lo.s32 	%r90, %r490, 257, %r454;
	add.s32 	%r491, %r3, 504;
	bfe.u32 	%r492, %r491, 3, 6;
	mad.lo.s32 	%r91, %r492, 257, %r454;
	mul.lo.s32 	%r493, %r5, 4806;
	mad.lo.s32 	%r494, %r3466, 198, %r493;
	mad.lo.s32 	%r495, %r3465, 33, %r494;
	mad.lo.s32 	%r496, %r3467, 801, %r495;
	mul.lo.s32 	%r497, %r450, 257;
	bfe.u32 	%r498, %r2, 1, 1;
	mul.lo.s32 	%r499, %r498, 2056;
	and.b32  	%r500, %r6, 1;
	mul.lo.s32 	%r501, %r500, 1028;
	bfe.u32 	%r502, %r2, 3, 1;
	mul.lo.s32 	%r503, %r502, 514;
	and.b32  	%r504, %r2, 1;
	mul.lo.s32 	%r505, %r504, 4112;
	add.s32 	%r506, %r505, %r497;
	add.s32 	%r507, %r506, %r499;
	add.s32 	%r508, %r507, %r501;
	add.s32 	%r509, %r508, %r3465;
	add.s32 	%r510, %r509, %r503;
	add.s32 	%r92, %r510, %r3464;
	mul.wide.u32 	%rd27, %r92, 4;
	mov.u64 	%rd28, shmem;
	add.s64 	%rd6, %rd28, %rd27;
	add.s32 	%r93, %r92, 8256;
	cvt.u64.u32 	%rd29, %r3464;
	cvt.u64.u32 	%rd30, %r503;
	cvt.u64.u32 	%rd31, %r3465;
	cvt.u64.u32 	%rd32, %r501;
	cvt.u64.u32 	%rd33, %r499;
	cvt.u64.u32 	%rd34, %r505;
	cvt.u64.u32 	%rd35, %r497;
	add.s64 	%rd36, %rd35, %rd34;
	add.s64 	%rd37, %rd36, %rd33;
	add.s64 	%rd38, %rd37, %rd32;
	add.s64 	%rd39, %rd38, %rd31;
	add.s64 	%rd40, %rd39, %rd30;
	add.s64 	%rd41, %rd40, %rd29;
	shl.b64 	%rd42, %rd41, 2;
	add.s64 	%rd7, %rd28, %rd42;
	add.s32 	%r94, %r92, 32;
	add.s32 	%r95, %r92, 8288;
	shr.u32 	%r511, %r3, 4;
	mul.lo.s32 	%r512, %r511, 257;
	bfe.u32 	%r513, %r3, 1, 1;
	bfe.u32 	%r514, %r3, 2, 1;
	bfe.u32 	%r515, %r3, 3, 1;
	and.b32  	%r516, %r3, 1;
	mad.lo.s32 	%r517, %r5, 6, %r512;
	mad.lo.s32 	%r518, %r516, 4112, %r517;
	mad.lo.s32 	%r519, %r513, 2056, %r518;
	mad.lo.s32 	%r520, %r514, 1028, %r519;
	mad.lo.s32 	%r521, %r515, 514, %r520;
	add.s32 	%r96, %r521, %r3467;
	mul.wide.u32 	%rd43, %r96, 4;
	add.s64 	%rd8, %rd28, %rd43;
	add.s32 	%r97, %r96, 8256;
	mul.wide.u32 	%rd44, %r97, 4;
	add.s64 	%rd9, %rd28, %rd44;
	add.s32 	%r98, %r96, 32;
	mul.wide.u32 	%rd45, %r98, 4;
	add.s64 	%rd10, %rd28, %rd45;
	add.s32 	%r99, %r96, 8288;
	mul.wide.u32 	%rd46, %r99, 4;
	add.s64 	%rd11, %rd28, %rd46;
	cvt.u16.u32 	%rs56, %r3;
	shl.b16 	%rs57, %rs56, 1;
	and.b16  	%rs58, %rs57, 254;
	mul.lo.s16 	%rs59, %rs58, 171;
	shr.u16 	%rs60, %rs59, 13;
	mul.lo.s16 	%rs61, %rs60, 48;
	sub.s16 	%rs62, %rs57, %rs61;
	cvt.u32.u16 	%r522, %rs62;
	and.b32  	%r523, %r522, 254;
	mul.lo.s32 	%r524, %r1, 58752;
	or.b32  	%r525, %r524, %r69;
	mad.lo.s32 	%r100, %r523, 24, %r525;
	or.b16  	%rs63, %rs57, 1;
	and.b16  	%rs64, %rs63, 255;
	mul.lo.s16 	%rs65, %rs64, 171;
	shr.u16 	%rs66, %rs65, 13;
	mul.lo.s16 	%rs67, %rs66, 48;
	sub.s16 	%rs68, %rs63, %rs67;
	cvt.u32.u16 	%r526, %rs68;
	and.b32  	%r527, %r526, 255;
	mad.lo.s32 	%r101, %r527, 24, %r525;
	mul.wide.u32 	%rd47, %r496, 4;
	add.s64 	%rd12, %rd28, %rd47;
	setp.gt.u32 	%p112, %r3, 7;
	setp.eq.s16 	%p113, %rs1, 0;
	setp.lt.u32 	%p115, %r2, 24;
	mov.u32 	%r3470, %r3454;
	mov.u32 	%r3501, %r3454;
	mov.u32 	%r3502, %r3454;
	mov.u32 	%r3503, %r3454;
	mov.u32 	%r3504, %r3454;
	bra.uni 	LBB0_71;
LBB0_92:                                // %L31358
                                        //   in Loop: Header=BB0_71 Depth=1
	add.s32 	%r220, %r3470, 48;
	setp.ne.s32 	%p141, %r3470, 2016;
	mov.u32 	%r3470, %r220;
	@%p141 bra 	LBB0_71;
	bra.uni 	LBB0_93;
LBB0_71:                                // %L720
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_73 Depth 2
                                        //     Child Loop BB0_83 Depth 2
	mul.hi.u32 	%r721, %r3470, -1431655765;
	shr.u32 	%r722, %r721, 5;
	mul.lo.s32 	%r107, %r722, 48;
	add.s32 	%r723, %r107, %r3;
	cvt.u16.u32 	%rs69, %r723;
	mul.hi.s16 	%rs70, %rs69, 16257;
	shr.u16 	%rs71, %rs70, 15;
	shr.s16 	%rs72, %rs70, 9;
	add.s16 	%rs73, %rs72, %rs71;
	mul.lo.s16 	%rs74, %rs73, 2064;
	sub.s16 	%rs75, %rs69, %rs74;
	cvt.u32.u16 	%r724, %rs75;
	shl.b32 	%r725, %r724, 16;
	or.b32  	%r726, %r725, %r64;
	mul.wide.s32 	%rd48, %r726, 4;
	add.s64 	%rd49, %rd3, %rd48;
	ld.global.v4.u32 	{%r727, %r728, %r729, %r730}, [%rd49];
	or.b32  	%r731, %r65, %r725;
	add.s32 	%r732, %r731, -1;
	mul.wide.s32 	%rd50, %r732, 4;
	add.s64 	%rd51, %rd3, %rd50;
	ld.global.v4.u32 	{%r733, %r734, %r735, %r736}, [%rd51];
	add.s32 	%r737, %r66, %r107;
	cvt.u16.u32 	%rs76, %r737;
	mul.hi.s16 	%rs77, %rs76, 16257;
	shr.u16 	%rs78, %rs77, 15;
	shr.s16 	%rs79, %rs77, 9;
	add.s16 	%rs80, %rs79, %rs78;
	mul.lo.s16 	%rs81, %rs80, 2064;
	sub.s16 	%rs82, %rs76, %rs81;
	cvt.u32.u16 	%r738, %rs82;
	shl.b32 	%r739, %r738, 16;
	or.b32  	%r740, %r739, %r64;
	mul.wide.s32 	%rd52, %r740, 4;
	add.s64 	%rd53, %rd3, %rd52;
	ld.global.v4.u32 	{%r741, %r742, %r743, %r744}, [%rd53];
	or.b32  	%r745, %r65, %r739;
	add.s32 	%r746, %r745, -1;
	mul.wide.s32 	%rd54, %r746, 4;
	add.s64 	%rd55, %rd3, %rd54;
	ld.global.v4.u32 	{%r747, %r748, %r749, %r750}, [%rd55];
	selp.b32 	%r751, %r729, %r727, %p113;
	shfl.sync.bfly.b32	%r752, %r751, 16, 31, -1;
	selp.b32 	%r530, %r727, %r752, %p113;
	selp.b32 	%r535, %r752, %r729, %p113;
	selp.b32 	%r753, %r730, %r728, %p113;
	shfl.sync.bfly.b32	%r754, %r753, 16, 31, -1;
	selp.b32 	%r538, %r728, %r754, %p113;
	selp.b32 	%r543, %r754, %r730, %p113;
	selp.b32 	%r755, %r735, %r733, %p113;
	shfl.sync.bfly.b32	%r756, %r755, 16, 31, -1;
	selp.b32 	%r546, %r733, %r756, %p113;
	selp.b32 	%r551, %r756, %r735, %p113;
	selp.b32 	%r757, %r736, %r734, %p113;
	shfl.sync.bfly.b32	%r758, %r757, 16, 31, -1;
	selp.b32 	%r554, %r734, %r758, %p113;
	selp.b32 	%r559, %r758, %r736, %p113;
	selp.b32 	%r759, %r743, %r741, %p113;
	shfl.sync.bfly.b32	%r760, %r759, 16, 31, -1;
	selp.b32 	%r562, %r741, %r760, %p113;
	selp.b32 	%r567, %r760, %r743, %p113;
	selp.b32 	%r761, %r744, %r742, %p113;
	shfl.sync.bfly.b32	%r762, %r761, 16, 31, -1;
	selp.b32 	%r570, %r742, %r762, %p113;
	selp.b32 	%r575, %r762, %r744, %p113;
	selp.b32 	%r763, %r749, %r747, %p113;
	shfl.sync.bfly.b32	%r764, %r763, 16, 31, -1;
	selp.b32 	%r578, %r747, %r764, %p113;
	selp.b32 	%r583, %r764, %r749, %p113;
	selp.b32 	%r765, %r750, %r748, %p113;
	shfl.sync.bfly.b32	%r766, %r765, 16, 31, -1;
	selp.b32 	%r586, %r748, %r766, %p113;
	selp.b32 	%r591, %r766, %r750, %p113;
	shl.b32 	%r531, %r535, 4;
	mov.u32 	%r529, 252645135;
	// begin inline asm
	lop3.b32 %r593, %r529, %r530, %r531, 202;
	// end inline asm
	shr.u32 	%r534, %r530, 4;
	// begin inline asm
	lop3.b32 %r609, %r529, %r534, %r535, 202;
	// end inline asm
	shl.b32 	%r539, %r543, 4;
	// begin inline asm
	lop3.b32 %r601, %r529, %r538, %r539, 202;
	// end inline asm
	shr.u32 	%r542, %r538, 4;
	// begin inline asm
	lop3.b32 %r617, %r529, %r542, %r543, 202;
	// end inline asm
	shl.b32 	%r547, %r551, 4;
	// begin inline asm
	lop3.b32 %r625, %r529, %r546, %r547, 202;
	// end inline asm
	shr.u32 	%r550, %r546, 4;
	// begin inline asm
	lop3.b32 %r641, %r529, %r550, %r551, 202;
	// end inline asm
	shl.b32 	%r555, %r559, 4;
	// begin inline asm
	lop3.b32 %r633, %r529, %r554, %r555, 202;
	// end inline asm
	shr.u32 	%r558, %r554, 4;
	// begin inline asm
	lop3.b32 %r649, %r529, %r558, %r559, 202;
	// end inline asm
	shl.b32 	%r563, %r567, 4;
	// begin inline asm
	lop3.b32 %r594, %r529, %r562, %r563, 202;
	// end inline asm
	shr.u32 	%r566, %r562, 4;
	// begin inline asm
	lop3.b32 %r610, %r529, %r566, %r567, 202;
	// end inline asm
	shl.b32 	%r571, %r575, 4;
	// begin inline asm
	lop3.b32 %r602, %r529, %r570, %r571, 202;
	// end inline asm
	shr.u32 	%r574, %r570, 4;
	// begin inline asm
	lop3.b32 %r618, %r529, %r574, %r575, 202;
	// end inline asm
	shl.b32 	%r579, %r583, 4;
	// begin inline asm
	lop3.b32 %r626, %r529, %r578, %r579, 202;
	// end inline asm
	shr.u32 	%r582, %r578, 4;
	// begin inline asm
	lop3.b32 %r642, %r529, %r582, %r583, 202;
	// end inline asm
	shl.b32 	%r587, %r591, 4;
	// begin inline asm
	lop3.b32 %r634, %r529, %r586, %r587, 202;
	// end inline asm
	shr.u32 	%r590, %r586, 4;
	// begin inline asm
	lop3.b32 %r650, %r529, %r590, %r591, 202;
	// end inline asm
	mov.u32 	%r595, 25152;
	// begin inline asm
	prmt.b32 %r657, %r593, %r594, %r595;
	// end inline asm
	mov.u32 	%r599, 29521;
	// begin inline asm
	prmt.b32 %r689, %r593, %r594, %r599;
	// end inline asm
	// begin inline asm
	prmt.b32 %r665, %r601, %r602, %r595;
	// end inline asm
	// begin inline asm
	prmt.b32 %r697, %r601, %r602, %r599;
	// end inline asm
	// begin inline asm
	prmt.b32 %r658, %r609, %r610, %r595;
	// end inline asm
	// begin inline asm
	prmt.b32 %r690, %r609, %r610, %r599;
	// end inline asm
	// begin inline asm
	prmt.b32 %r666, %r617, %r618, %r595;
	// end inline asm
	// begin inline asm
	prmt.b32 %r698, %r617, %r618, %r599;
	// end inline asm
	// begin inline asm
	prmt.b32 %r673, %r625, %r626, %r595;
	// end inline asm
	// begin inline asm
	prmt.b32 %r705, %r625, %r626, %r599;
	// end inline asm
	// begin inline asm
	prmt.b32 %r681, %r633, %r634, %r595;
	// end inline asm
	// begin inline asm
	prmt.b32 %r713, %r633, %r634, %r599;
	// end inline asm
	// begin inline asm
	prmt.b32 %r674, %r641, %r642, %r595;
	// end inline asm
	// begin inline asm
	prmt.b32 %r706, %r641, %r642, %r599;
	// end inline asm
	// begin inline asm
	prmt.b32 %r682, %r649, %r650, %r595;
	// end inline asm
	// begin inline asm
	prmt.b32 %r714, %r649, %r650, %r599;
	// end inline asm
	mov.u32 	%r715, 21520;
	// begin inline asm
	prmt.b32 %r656, %r657, %r658, %r715;
	// end inline asm
	mov.u32 	%r719, 30258;
	// begin inline asm
	prmt.b32 %r660, %r657, %r658, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r664, %r665, %r666, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r668, %r665, %r666, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r672, %r673, %r674, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r676, %r673, %r674, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r680, %r681, %r682, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r684, %r681, %r682, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r688, %r689, %r690, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r692, %r689, %r690, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r696, %r697, %r698, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r700, %r697, %r698, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r704, %r705, %r706, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r708, %r705, %r706, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r712, %r713, %r714, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r716, %r713, %r714, %r719;
	// end inline asm
	mul.hi.s16 	%rs83, %rs69, 10923;
	shr.u16 	%rs84, %rs83, 15;
	shr.s16 	%rs85, %rs83, 2;
	add.s16 	%rs86, %rs85, %rs84;
	mul.lo.s16 	%rs87, %rs86, 24;
	sub.s16 	%rs88, %rs69, %rs87;
	cvt.s32.s16 	%r767, %rs88;
	add.s32 	%r768, %r67, %r767;
	mul.wide.s32 	%rd56, %r768, 4;
	add.s64 	%rd58, %rd28, %rd56;
	st.shared.u32 	[%rd58], %r656;
	st.shared.u32 	[%rd58+512], %r664;
	st.shared.u32 	[%rd58+256], %r660;
	st.shared.u32 	[%rd58+768], %r668;
	add.s32 	%r769, %r68, %r767;
	mul.wide.s32 	%rd59, %r769, 4;
	add.s64 	%rd60, %rd28, %rd59;
	st.shared.u32 	[%rd60], %r672;
	st.shared.u32 	[%rd60+512], %r680;
	st.shared.u32 	[%rd60+256], %r676;
	st.shared.u32 	[%rd60+768], %r684;
	st.shared.u32 	[%rd58+128], %r688;
	st.shared.u32 	[%rd58+640], %r696;
	st.shared.u32 	[%rd58+384], %r692;
	st.shared.u32 	[%rd58+896], %r700;
	st.shared.u32 	[%rd60+128], %r704;
	st.shared.u32 	[%rd60+640], %r712;
	st.shared.u32 	[%rd60+384], %r708;
	st.shared.u32 	[%rd60+896], %r716;
	bar.sync 	0;
	add.s32 	%r770, %r107, %r69;
	cvt.u16.u32 	%rs89, %r770;
	mul.hi.s16 	%rs90, %rs89, 10923;
	shr.u16 	%rs91, %rs90, 15;
	shr.s16 	%rs92, %rs90, 2;
	add.s16 	%rs93, %rs92, %rs91;
	mul.lo.s16 	%rs94, %rs93, 24;
	sub.s16 	%rs95, %rs89, %rs94;
	cvt.s32.s16 	%r771, %rs95;
	add.s32 	%r772, %r70, %r771;
	mul.wide.s32 	%rd61, %r772, 4;
	add.s64 	%rd62, %rd28, %rd61;
	ld.shared.u32 	%r773, [%rd62];
	add.s32 	%r774, %r71, %r771;
	mul.wide.u32 	%rd63, %r774, 4;
	add.s64 	%rd64, %rd28, %rd63;
	ld.shared.u32 	%r775, [%rd64];
	add.s32 	%r776, %r72, %r771;
	mul.wide.u32 	%rd65, %r776, 4;
	add.s64 	%rd66, %rd28, %rd65;
	ld.shared.u32 	%r777, [%rd66];
	add.s32 	%r778, %r73, %r771;
	mul.wide.u32 	%rd67, %r778, 4;
	add.s64 	%rd68, %rd28, %rd67;
	ld.shared.u32 	%r779, [%rd68];
	add.s32 	%r780, %r74, %r771;
	mul.wide.s32 	%rd69, %r780, 4;
	add.s64 	%rd70, %rd28, %rd69;
	ld.shared.u32 	%r781, [%rd70];
	add.s32 	%r782, %r75, %r771;
	mul.wide.u32 	%rd71, %r782, 4;
	add.s64 	%rd72, %rd28, %rd71;
	ld.shared.u32 	%r783, [%rd72];
	add.s32 	%r784, %r76, %r771;
	mul.wide.u32 	%rd73, %r784, 4;
	add.s64 	%rd74, %rd28, %rd73;
	ld.shared.u32 	%r785, [%rd74];
	add.s32 	%r786, %r77, %r771;
	mul.wide.u32 	%rd75, %r786, 4;
	add.s64 	%rd76, %rd28, %rd75;
	ld.shared.u32 	%r787, [%rd76];
	add.s32 	%r788, %r78, %r771;
	mul.wide.s32 	%rd77, %r788, 4;
	add.s64 	%rd78, %rd28, %rd77;
	ld.shared.u32 	%r789, [%rd78];
	add.s32 	%r790, %r79, %r771;
	mul.wide.u32 	%rd79, %r790, 4;
	add.s64 	%rd80, %rd28, %rd79;
	ld.shared.u32 	%r791, [%rd80];
	add.s32 	%r792, %r80, %r771;
	mul.wide.u32 	%rd81, %r792, 4;
	add.s64 	%rd82, %rd28, %rd81;
	ld.shared.u32 	%r793, [%rd82];
	add.s32 	%r794, %r81, %r771;
	mul.wide.u32 	%rd83, %r794, 4;
	add.s64 	%rd84, %rd28, %rd83;
	ld.shared.u32 	%r795, [%rd84];
	add.s32 	%r796, %r82, %r771;
	mul.wide.s32 	%rd85, %r796, 4;
	add.s64 	%rd86, %rd28, %rd85;
	ld.shared.u32 	%r797, [%rd86];
	add.s32 	%r798, %r83, %r771;
	mul.wide.u32 	%rd87, %r798, 4;
	add.s64 	%rd88, %rd28, %rd87;
	ld.shared.u32 	%r799, [%rd88];
	add.s32 	%r800, %r84, %r771;
	mul.wide.u32 	%rd89, %r800, 4;
	add.s64 	%rd90, %rd28, %rd89;
	ld.shared.u32 	%r801, [%rd90];
	add.s32 	%r802, %r85, %r771;
	mul.wide.u32 	%rd91, %r802, 4;
	add.s64 	%rd92, %rd28, %rd91;
	ld.shared.u32 	%r803, [%rd92];
	add.s32 	%r804, %r86, %r771;
	mul.wide.s32 	%rd93, %r804, 4;
	add.s64 	%rd94, %rd28, %rd93;
	ld.shared.u32 	%r805, [%rd94];
	add.s32 	%r806, %r87, %r771;
	mul.wide.u32 	%rd95, %r806, 4;
	add.s64 	%rd96, %rd28, %rd95;
	ld.shared.u32 	%r807, [%rd96];
	add.s32 	%r808, %r88, %r771;
	mul.wide.u32 	%rd97, %r808, 4;
	add.s64 	%rd98, %rd28, %rd97;
	ld.shared.u32 	%r809, [%rd98];
	add.s32 	%r810, %r89, %r771;
	mul.wide.u32 	%rd99, %r810, 4;
	add.s64 	%rd100, %rd28, %rd99;
	ld.shared.u32 	%r811, [%rd100];
	add.s32 	%r812, %r90, %r771;
	mul.wide.s32 	%rd101, %r812, 4;
	add.s64 	%rd102, %rd28, %rd101;
	ld.shared.u32 	%r813, [%rd102];
	add.s32 	%r814, %r91, %r771;
	mul.wide.s32 	%rd103, %r814, 4;
	add.s64 	%rd104, %rd28, %rd103;
	ld.shared.u32 	%r815, [%rd104];
	bar.sync 	0;
	shfl.sync.idx.b32	%r816, %r3463, 0, 31, -1;
	shfl.sync.idx.b32	%r817, %r3463, 1, 31, -1;
	shfl.sync.idx.b32	%r818, %r3463, 2, 31, -1;
	shfl.sync.idx.b32	%r819, %r3463, 3, 31, -1;
	shfl.sync.idx.b32	%r820, %r3463, 4, 31, -1;
	shfl.sync.idx.b32	%r821, %r3463, 5, 31, -1;
	shfl.sync.idx.b32	%r822, %r3463, 6, 31, -1;
	shfl.sync.idx.b32	%r823, %r3463, 7, 31, -1;
	shfl.sync.idx.b32	%r824, %r3463, 8, 31, -1;
	shfl.sync.idx.b32	%r825, %r3463, 9, 31, -1;
	shfl.sync.idx.b32	%r826, %r3463, 10, 31, -1;
	shfl.sync.idx.b32	%r827, %r3463, 11, 31, -1;
	shfl.sync.idx.b32	%r828, %r3463, 12, 31, -1;
	shfl.sync.idx.b32	%r829, %r3463, 13, 31, -1;
	shfl.sync.idx.b32	%r830, %r3463, 14, 31, -1;
	shfl.sync.idx.b32	%r831, %r3463, 15, 31, -1;
	shfl.sync.idx.b32	%r832, %r3463, 16, 31, -1;
	shfl.sync.idx.b32	%r833, %r3463, 17, 31, -1;
	shfl.sync.idx.b32	%r834, %r3463, 18, 31, -1;
	shfl.sync.idx.b32	%r835, %r3463, 19, 31, -1;
	shfl.sync.idx.b32	%r836, %r3463, 20, 31, -1;
	shfl.sync.idx.b32	%r837, %r3463, 21, 31, -1;
	shfl.sync.idx.b32	%r838, %r3463, 22, 31, -1;
	shfl.sync.idx.b32	%r839, %r3463, 23, 31, -1;
	add.s32 	%r840, %r816, %r771;
	mul.wide.s32 	%rd105, %r840, 4;
	add.s64 	%rd106, %rd28, %rd105;
	st.shared.u32 	[%rd106], %r773;
	add.s32 	%r841, %r817, %r771;
	mul.wide.s32 	%rd107, %r841, 4;
	add.s64 	%rd108, %rd28, %rd107;
	st.shared.u32 	[%rd108], %r775;
	add.s32 	%r842, %r818, %r771;
	mul.wide.s32 	%rd109, %r842, 4;
	add.s64 	%rd110, %rd28, %rd109;
	st.shared.u32 	[%rd110], %r777;
	add.s32 	%r843, %r819, %r771;
	mul.wide.s32 	%rd111, %r843, 4;
	add.s64 	%rd112, %rd28, %rd111;
	st.shared.u32 	[%rd112], %r779;
	add.s32 	%r844, %r820, %r771;
	mul.wide.s32 	%rd113, %r844, 4;
	add.s64 	%rd114, %rd28, %rd113;
	st.shared.u32 	[%rd114], %r781;
	add.s32 	%r845, %r821, %r771;
	mul.wide.s32 	%rd115, %r845, 4;
	add.s64 	%rd116, %rd28, %rd115;
	st.shared.u32 	[%rd116], %r783;
	add.s32 	%r846, %r822, %r771;
	mul.wide.s32 	%rd117, %r846, 4;
	add.s64 	%rd118, %rd28, %rd117;
	st.shared.u32 	[%rd118], %r785;
	add.s32 	%r847, %r823, %r771;
	mul.wide.s32 	%rd119, %r847, 4;
	add.s64 	%rd120, %rd28, %rd119;
	st.shared.u32 	[%rd120], %r787;
	add.s32 	%r848, %r824, %r771;
	mul.wide.s32 	%rd121, %r848, 4;
	add.s64 	%rd122, %rd28, %rd121;
	st.shared.u32 	[%rd122], %r789;
	add.s32 	%r849, %r825, %r771;
	mul.wide.s32 	%rd123, %r849, 4;
	add.s64 	%rd124, %rd28, %rd123;
	st.shared.u32 	[%rd124], %r791;
	add.s32 	%r850, %r826, %r771;
	mul.wide.s32 	%rd125, %r850, 4;
	add.s64 	%rd126, %rd28, %rd125;
	st.shared.u32 	[%rd126], %r793;
	add.s32 	%r851, %r827, %r771;
	mul.wide.s32 	%rd127, %r851, 4;
	add.s64 	%rd128, %rd28, %rd127;
	st.shared.u32 	[%rd128], %r795;
	add.s32 	%r852, %r828, %r771;
	mul.wide.s32 	%rd129, %r852, 4;
	add.s64 	%rd130, %rd28, %rd129;
	st.shared.u32 	[%rd130], %r797;
	add.s32 	%r853, %r829, %r771;
	mul.wide.s32 	%rd131, %r853, 4;
	add.s64 	%rd132, %rd28, %rd131;
	st.shared.u32 	[%rd132], %r799;
	add.s32 	%r854, %r830, %r771;
	mul.wide.s32 	%rd133, %r854, 4;
	add.s64 	%rd134, %rd28, %rd133;
	st.shared.u32 	[%rd134], %r801;
	add.s32 	%r855, %r831, %r771;
	mul.wide.s32 	%rd135, %r855, 4;
	add.s64 	%rd136, %rd28, %rd135;
	st.shared.u32 	[%rd136], %r803;
	add.s32 	%r856, %r832, %r771;
	mul.wide.s32 	%rd137, %r856, 4;
	add.s64 	%rd138, %rd28, %rd137;
	st.shared.u32 	[%rd138], %r805;
	add.s32 	%r857, %r833, %r771;
	mul.wide.s32 	%rd139, %r857, 4;
	add.s64 	%rd140, %rd28, %rd139;
	st.shared.u32 	[%rd140], %r807;
	add.s32 	%r858, %r834, %r771;
	mul.wide.s32 	%rd141, %r858, 4;
	add.s64 	%rd142, %rd28, %rd141;
	st.shared.u32 	[%rd142], %r809;
	add.s32 	%r859, %r835, %r771;
	mul.wide.s32 	%rd143, %r859, 4;
	add.s64 	%rd144, %rd28, %rd143;
	st.shared.u32 	[%rd144], %r811;
	add.s32 	%r860, %r836, %r771;
	mul.wide.s32 	%rd145, %r860, 4;
	add.s64 	%rd146, %rd28, %rd145;
	st.shared.u32 	[%rd146], %r813;
	selp.b32 	%r861, 0, %r815, %p112;
	add.s32 	%r862, %r837, %r771;
	mul.wide.s32 	%rd147, %r862, 4;
	add.s64 	%rd148, %rd28, %rd147;
	st.shared.u32 	[%rd148], %r861;
	add.s32 	%r863, %r838, %r771;
	mul.wide.s32 	%rd149, %r863, 4;
	add.s64 	%rd150, %rd28, %rd149;
	st.shared.u32 	[%rd150], %r3454;
	add.s32 	%r864, %r839, %r771;
	mul.wide.s32 	%rd151, %r864, 4;
	add.s64 	%rd152, %rd28, %rd151;
	st.shared.u32 	[%rd152], %r3454;
	bar.sync 	0;
	mov.u32 	%r3475, %r3454;
	mov.u32 	%r3476, %r3454;
	mov.u32 	%r3477, %r3454;
	mov.u32 	%r3478, %r3454;
	mov.u32 	%r3479, %r3454;
	mov.u32 	%r3480, %r3454;
	mov.u32 	%r3481, %r3454;
	mov.u32 	%r3482, %r3454;
	mov.u32 	%r3483, %r3454;
	mov.u32 	%r3484, %r3454;
	mov.u32 	%r3485, %r3454;
	mov.u32 	%r3486, %r3454;
	mov.u32 	%r3487, %r3454;
	mov.u32 	%r3488, %r3454;
	mov.u32 	%r3489, %r3454;
	mov.u32 	%r3490, %r3454;
	mov.u32 	%r3491, %r3454;
	mov.u32 	%r3492, %r3454;
	mov.u32 	%r3493, %r3454;
	mov.u32 	%r3494, %r3454;
	mov.u32 	%r3495, %r3454;
	mov.u32 	%r3496, %r3454;
	mov.u32 	%r3497, %r3454;
	mov.u32 	%r3498, %r3454;
	@%p111 bra 	LBB0_109;
	bra.uni 	LBB0_72;
LBB0_109:                               // %oksrem3284
                                        //   in Loop: Header=BB0_71 Depth=1
	cvt.u16.u32 	%rs96, %r107;
	mul.hi.s16 	%rs97, %rs96, 10923;
	shr.u16 	%rs98, %rs97, 15;
	shr.s16 	%rs99, %rs97, 2;
	add.s16 	%rs100, %rs99, %rs98;
	mul.lo.s16 	%rs101, %rs100, 24;
	sub.s16 	%rs102, %rs96, %rs101;
	cvt.s32.s16 	%r865, %rs102;
	mul.wide.s32 	%rd153, %r865, 4;
	add.s64 	%rd154, %rd12, %rd153;
	ld.shared.u32 	%r3475, [%rd154];
	ld.shared.u32 	%r3476, [%rd12+4];
	ld.shared.u32 	%r3477, [%rd12+8];
	ld.shared.u32 	%r3478, [%rd12+12];
	ld.shared.u32 	%r3479, [%rd12+16];
	ld.shared.u32 	%r3480, [%rd12+20];
	ld.shared.u32 	%r3481, [%rd12+24];
	ld.shared.u32 	%r3482, [%rd12+28];
	ld.shared.u32 	%r3483, [%rd12+32];
	ld.shared.u32 	%r3484, [%rd12+36];
	ld.shared.u32 	%r3485, [%rd12+40];
	ld.shared.u32 	%r3486, [%rd12+44];
	ld.shared.u32 	%r3487, [%rd12+48];
	ld.shared.u32 	%r3488, [%rd12+52];
	ld.shared.u32 	%r3489, [%rd12+56];
	ld.shared.u32 	%r3490, [%rd12+60];
	add.s16 	%rs103, %rs96, 16;
	mul.hi.s16 	%rs104, %rs103, 10923;
	shr.u16 	%rs105, %rs104, 15;
	shr.s16 	%rs106, %rs104, 2;
	add.s16 	%rs107, %rs106, %rs105;
	mul.lo.s16 	%rs108, %rs107, 24;
	sub.s16 	%rs109, %rs103, %rs108;
	cvt.s32.s16 	%r866, %rs109;
	mul.wide.s32 	%rd155, %r866, 4;
	add.s64 	%rd156, %rd12, %rd155;
	ld.shared.u32 	%r3491, [%rd156];
	add.s16 	%rs110, %rs96, 17;
	mul.hi.s16 	%rs111, %rs110, 10923;
	shr.u16 	%rs112, %rs111, 15;
	shr.s16 	%rs113, %rs111, 2;
	add.s16 	%rs114, %rs113, %rs112;
	mul.lo.s16 	%rs115, %rs114, 24;
	sub.s16 	%rs116, %rs110, %rs115;
	cvt.s32.s16 	%r867, %rs116;
	mul.wide.s32 	%rd157, %r867, 4;
	add.s64 	%rd158, %rd12, %rd157;
	ld.shared.u32 	%r3492, [%rd158];
	add.s16 	%rs117, %rs96, 18;
	mul.hi.s16 	%rs118, %rs117, 10923;
	shr.u16 	%rs119, %rs118, 15;
	shr.s16 	%rs120, %rs118, 2;
	add.s16 	%rs121, %rs120, %rs119;
	mul.lo.s16 	%rs122, %rs121, 24;
	sub.s16 	%rs123, %rs117, %rs122;
	cvt.s32.s16 	%r868, %rs123;
	mul.wide.s32 	%rd159, %r868, 4;
	add.s64 	%rd160, %rd12, %rd159;
	ld.shared.u32 	%r3493, [%rd160];
	add.s16 	%rs124, %rs96, 19;
	mul.hi.s16 	%rs125, %rs124, 10923;
	shr.u16 	%rs126, %rs125, 15;
	shr.s16 	%rs127, %rs125, 2;
	add.s16 	%rs128, %rs127, %rs126;
	mul.lo.s16 	%rs129, %rs128, 24;
	sub.s16 	%rs130, %rs124, %rs129;
	cvt.s32.s16 	%r869, %rs130;
	mul.wide.s32 	%rd161, %r869, 4;
	add.s64 	%rd162, %rd12, %rd161;
	ld.shared.u32 	%r3494, [%rd162];
	add.s16 	%rs131, %rs96, 20;
	mul.hi.s16 	%rs132, %rs131, 10923;
	shr.u16 	%rs133, %rs132, 15;
	shr.s16 	%rs134, %rs132, 2;
	add.s16 	%rs135, %rs134, %rs133;
	mul.lo.s16 	%rs136, %rs135, 24;
	sub.s16 	%rs137, %rs131, %rs136;
	cvt.s32.s16 	%r870, %rs137;
	mul.wide.s32 	%rd163, %r870, 4;
	add.s64 	%rd164, %rd12, %rd163;
	ld.shared.u32 	%r3495, [%rd164];
	add.s16 	%rs138, %rs96, 21;
	mul.hi.s16 	%rs139, %rs138, 10923;
	shr.u16 	%rs140, %rs139, 15;
	shr.s16 	%rs141, %rs139, 2;
	add.s16 	%rs142, %rs141, %rs140;
	mul.lo.s16 	%rs143, %rs142, 24;
	sub.s16 	%rs144, %rs138, %rs143;
	cvt.s32.s16 	%r871, %rs144;
	mul.wide.s32 	%rd165, %r871, 4;
	add.s64 	%rd166, %rd12, %rd165;
	ld.shared.u32 	%r3496, [%rd166];
	add.s16 	%rs145, %rs96, 22;
	mul.hi.s16 	%rs146, %rs145, 10923;
	shr.u16 	%rs147, %rs146, 15;
	shr.s16 	%rs148, %rs146, 2;
	add.s16 	%rs149, %rs148, %rs147;
	mul.lo.s16 	%rs150, %rs149, 24;
	sub.s16 	%rs151, %rs145, %rs150;
	cvt.s32.s16 	%r872, %rs151;
	mul.wide.s32 	%rd167, %r872, 4;
	add.s64 	%rd168, %rd12, %rd167;
	ld.shared.u32 	%r3497, [%rd168];
	add.s16 	%rs152, %rs96, 23;
	mul.hi.s16 	%rs153, %rs152, 10923;
	shr.u16 	%rs154, %rs153, 15;
	shr.s16 	%rs155, %rs153, 2;
	add.s16 	%rs156, %rs155, %rs154;
	mul.lo.s16 	%rs157, %rs156, 24;
	sub.s16 	%rs158, %rs152, %rs157;
	cvt.s32.s16 	%r873, %rs158;
	mul.wide.s32 	%rd169, %r873, 4;
	add.s64 	%rd170, %rd12, %rd169;
	ld.shared.u32 	%r3498, [%rd170];
LBB0_72:                                // %L11301
                                        //   in Loop: Header=BB0_71 Depth=1
	bar.sync 	0;
	add.s32 	%r132, %r107, 1;
	add.s32 	%r133, %r107, 2;
	add.s32 	%r134, %r107, 3;
	mov.u32 	%r3499, 12;
	mov.u32 	%r3500, %r3454;
	bra.uni 	LBB0_73;
LBB0_80:                                // %L21320
                                        //   in Loop: Header=BB0_73 Depth=2
	add.s32 	%r3502, %r3502, 1;
	mov.u32 	%r3501, 0;
	mov.u32 	%r3503, %r3501;
	mov.u32 	%r3504, %r3501;
LBB0_81:                                // %L21321
                                        //   in Loop: Header=BB0_73 Depth=2
	bar.sync 	0;
	add.s32 	%r3500, %r3500, 1;
	add.s32 	%r3499, %r3499, -4;
	setp.ne.s32 	%p127, %r3499, -12;
	@%p127 bra 	LBB0_73;
	bra.uni 	LBB0_82;
LBB0_73:                                // %L11327
                                        //   Parent Loop BB0_71 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p116, %r3499, 12;
	selp.b32 	%r1413, %r3475, 0, %p116;
	setp.eq.s32 	%p117, %r3499, 8;
	selp.b32 	%r1414, %r3479, %r1413, %p117;
	setp.eq.s32 	%p118, %r3499, 4;
	selp.b32 	%r1415, %r3483, %r1414, %p118;
	setp.eq.s32 	%p119, %r3499, 0;
	selp.b32 	%r1416, %r3487, %r1415, %p119;
	setp.eq.s32 	%p120, %r3499, -4;
	selp.b32 	%r1417, %r3491, %r1416, %p120;
	setp.eq.s32 	%p121, %r3499, -8;
	selp.b32 	%r1418, %r3495, %r1417, %p121;
	selp.b32 	%r1419, %r3476, 0, %p116;
	selp.b32 	%r1420, %r3480, %r1419, %p117;
	selp.b32 	%r1421, %r3484, %r1420, %p118;
	selp.b32 	%r1422, %r3488, %r1421, %p119;
	selp.b32 	%r1423, %r3492, %r1422, %p120;
	selp.b32 	%r1424, %r3496, %r1423, %p121;
	selp.b32 	%r1425, %r3477, 0, %p116;
	selp.b32 	%r1426, %r3481, %r1425, %p117;
	selp.b32 	%r1427, %r3485, %r1426, %p118;
	selp.b32 	%r1428, %r3489, %r1427, %p119;
	selp.b32 	%r1429, %r3493, %r1428, %p120;
	selp.b32 	%r1430, %r3497, %r1429, %p121;
	selp.b32 	%r1431, %r3478, 0, %p116;
	selp.b32 	%r1432, %r3482, %r1431, %p117;
	selp.b32 	%r1433, %r3486, %r1432, %p118;
	selp.b32 	%r1434, %r3490, %r1433, %p119;
	selp.b32 	%r1435, %r3494, %r1434, %p120;
	selp.b32 	%r1436, %r3498, %r1435, %p121;
	mov.u16 	%rs196, 25600;
	// begin inline asm
	mov.b32 %r881, {%rs196, %rs196};
	// end inline asm
	mov.u16 	%rs198, 21504;
	// begin inline asm
	mov.b32 %r892, {%rs198, %rs198};
	// end inline asm
	xor.b32  	%r880, %r1418, -2004318072;
	mov.u32 	%r1017, 983055;
	// begin inline asm
	lop3.b32 %r878, %r1017, %r880, %r881, 202;
	// end inline asm
	mov.u16 	%rs202, 18432;
	// begin inline asm
	mov.b32 %r882, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r883, %r881, %r882;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r886, %r878, %r883;
	// end inline asm
	mov.u32 	%r1028, 15728880;
	// begin inline asm
	lop3.b32 %r889, %r1028, %r880, %r892, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r893, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r894, %r892, %r893;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r897, %r889, %r894;
	// end inline asm
	// begin inline asm
	mov.b32 %r927, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r938, {%rs198, %rs198};
	// end inline asm
	xor.b32  	%r926, %r1424, -2004318072;
	// begin inline asm
	lop3.b32 %r924, %r1017, %r926, %r927, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r928, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r929, %r927, %r928;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r932, %r924, %r929;
	// end inline asm
	// begin inline asm
	lop3.b32 %r935, %r1028, %r926, %r938, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r939, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r940, %r938, %r939;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r943, %r935, %r940;
	// end inline asm
	// begin inline asm
	mov.b32 %r973, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r984, {%rs198, %rs198};
	// end inline asm
	xor.b32  	%r972, %r1430, -2004318072;
	// begin inline asm
	lop3.b32 %r970, %r1017, %r972, %r973, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r974, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r975, %r973, %r974;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r978, %r970, %r975;
	// end inline asm
	// begin inline asm
	lop3.b32 %r981, %r1028, %r972, %r984, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r985, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r986, %r984, %r985;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r989, %r981, %r986;
	// end inline asm
	// begin inline asm
	mov.b32 %r1019, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r1030, {%rs198, %rs198};
	// end inline asm
	xor.b32  	%r1018, %r1436, -2004318072;
	// begin inline asm
	lop3.b32 %r1016, %r1017, %r1018, %r1019, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1020, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1021, %r1019, %r1020;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1024, %r1016, %r1021;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1027, %r1028, %r1018, %r1030, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1031, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1032, %r1030, %r1031;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1035, %r1027, %r1032;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3468;
    mov.b32 {%r2re, %r2im}, %r886;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1060, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3469;
    mov.b32 {%r2re, %r2im}, %r897;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1063, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3468;
    mov.b32 {%r2re, %r2im}, %r932;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1066, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3469;
    mov.b32 {%r2re, %r2im}, %r943;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1069, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3468;
    mov.b32 {%r2re, %r2im}, %r978;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1072, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3469;
    mov.b32 {%r2re, %r2im}, %r989;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1075, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3468;
    mov.b32 {%r2re, %r2im}, %r1024;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1078, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3469;
    mov.b32 {%r2re, %r2im}, %r1035;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1081, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1147, %r1144}, {%r306, %r309}, {%r1060}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1156, %r1153}, {%r306, %r309}, {%r1063}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1165, %r1162}, {%r306, %r309}, {%r1066}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1174, %r1171}, {%r306, %r309}, {%r1069}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1183, %r1180}, {%r306, %r309}, {%r1072}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1192, %r1189}, {%r306, %r309}, {%r1075}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1201, %r1198}, {%r306, %r309}, {%r1078}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1210, %r1207}, {%r306, %r309}, {%r1081}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1140, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1142, %r1140, %r1144;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1145, %r358, %r1147, %r1142;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1149, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1151, %r1149, %r1153;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1154, %r358, %r1156, %r1151;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1158, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1160, %r1158, %r1162;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1163, %r358, %r1165, %r1160;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1167, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1169, %r1167, %r1171;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1172, %r358, %r1174, %r1169;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1176, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1178, %r1176, %r1180;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1181, %r358, %r1183, %r1178;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1185, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1187, %r1185, %r1189;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1190, %r358, %r1192, %r1187;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1194, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1196, %r1194, %r1198;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1199, %r358, %r1201, %r1196;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1203, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1205, %r1203, %r1207;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1208, %r358, %r1210, %r1205;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1212, %r361, %r1147;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1215, %r358, %r1144, %r1212;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1219, %r361, %r1156;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1222, %r358, %r1153, %r1219;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1226, %r361, %r1165;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1229, %r358, %r1162, %r1226;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1233, %r361, %r1174;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1236, %r358, %r1171, %r1233;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1240, %r361, %r1183;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1243, %r358, %r1180, %r1240;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1247, %r361, %r1192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1250, %r358, %r1189, %r1247;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1254, %r361, %r1201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1257, %r358, %r1198, %r1254;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1261, %r361, %r1210;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1264, %r358, %r1207, %r1261;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1349, %r1350}, {%r402, %r408, %r405, %r411}, {%r1145, %r1215}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1357, %r1358}, {%r402, %r408, %r405, %r411}, {%r1154, %r1222}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1365, %r1366}, {%r402, %r408, %r405, %r411}, {%r1163, %r1229}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1373, %r1374}, {%r402, %r408, %r405, %r411}, {%r1172, %r1236}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1381, %r1382}, {%r402, %r408, %r405, %r411}, {%r1181, %r1243}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1389, %r1390}, {%r402, %r408, %r405, %r411}, {%r1190, %r1250}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1397, %r1398}, {%r402, %r408, %r405, %r411}, {%r1199, %r1257}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1405, %r1406}, {%r402, %r408, %r405, %r411}, {%r1208, %r1264}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	prmt.b32 %r1348, %r1349, %r1350, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1352, %r1349, %r1350, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1356, %r1357, %r1358, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1360, %r1357, %r1358, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1364, %r1365, %r1366, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1368, %r1365, %r1366, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1372, %r1373, %r1374, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1376, %r1373, %r1374, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1380, %r1381, %r1382, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1384, %r1381, %r1382, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1388, %r1389, %r1390, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1392, %r1389, %r1390, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1396, %r1397, %r1398, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1400, %r1397, %r1398, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1404, %r1405, %r1406, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1408, %r1405, %r1406, %r719;
	// end inline asm
	st.shared.u32 	[%rd6], %r1348;
	st.shared.u32 	[%rd7+33024], %r1352;
	st.shared.u32 	[%rd7+128], %r1356;
	st.shared.u32 	[%rd7+33152], %r1360;
	cvt.u16.u32 	%rs207, %r3500;
	and.b16  	%rs208, %rs207, 255;
	mul.lo.s16 	%rs209, %rs208, 171;
	shr.u16 	%rs210, %rs209, 10;
	mul.lo.s16 	%rs211, %rs210, 6;
	sub.s16 	%rs212, %rs207, %rs211;
	shl.b16 	%rs213, %rs212, 2;
	cvt.u32.u16 	%r1437, %rs213;
	and.b32  	%r1438, %r1437, 252;
	add.s32 	%r1439, %r132, %r1438;
	shr.s32 	%r1440, %r1439, 31;
	shr.u32 	%r1441, %r1440, 30;
	add.s32 	%r1442, %r1439, %r1441;
	and.b32  	%r1443, %r1442, 67108860;
	sub.s32 	%r1444, %r1439, %r1443;
	shl.b32 	%r141, %r1444, 6;
	add.s32 	%r1445, %r92, %r141;
	mul.wide.s32 	%rd171, %r1445, 4;
	add.s64 	%rd173, %rd28, %rd171;
	st.shared.u32 	[%rd173], %r1364;
	add.s32 	%r1446, %r93, %r141;
	mul.wide.u32 	%rd174, %r1446, 4;
	add.s64 	%rd175, %rd28, %rd174;
	st.shared.u32 	[%rd175], %r1368;
	add.s32 	%r1447, %r94, %r141;
	mul.wide.s32 	%rd176, %r1447, 4;
	add.s64 	%rd177, %rd28, %rd176;
	st.shared.u32 	[%rd177], %r1372;
	add.s32 	%r1448, %r95, %r141;
	mul.wide.s32 	%rd178, %r1448, 4;
	add.s64 	%rd179, %rd28, %rd178;
	st.shared.u32 	[%rd179], %r1376;
	add.s32 	%r1449, %r133, %r1438;
	shr.s32 	%r1450, %r1449, 31;
	shr.u32 	%r1451, %r1450, 30;
	add.s32 	%r1452, %r1449, %r1451;
	and.b32  	%r1453, %r1452, 67108860;
	sub.s32 	%r1454, %r1449, %r1453;
	shl.b32 	%r142, %r1454, 6;
	add.s32 	%r1455, %r92, %r142;
	mul.wide.s32 	%rd180, %r1455, 4;
	add.s64 	%rd181, %rd28, %rd180;
	st.shared.u32 	[%rd181], %r1380;
	add.s32 	%r1456, %r93, %r142;
	mul.wide.u32 	%rd182, %r1456, 4;
	add.s64 	%rd183, %rd28, %rd182;
	st.shared.u32 	[%rd183], %r1384;
	add.s32 	%r1457, %r94, %r142;
	mul.wide.s32 	%rd184, %r1457, 4;
	add.s64 	%rd185, %rd28, %rd184;
	st.shared.u32 	[%rd185], %r1388;
	add.s32 	%r1458, %r95, %r142;
	mul.wide.s32 	%rd186, %r1458, 4;
	add.s64 	%rd187, %rd28, %rd186;
	st.shared.u32 	[%rd187], %r1392;
	add.s32 	%r1459, %r134, %r1438;
	shr.s32 	%r1460, %r1459, 31;
	shr.u32 	%r1461, %r1460, 30;
	add.s32 	%r1462, %r1459, %r1461;
	and.b32  	%r1463, %r1462, 67108860;
	sub.s32 	%r1464, %r1459, %r1463;
	shl.b32 	%r143, %r1464, 6;
	add.s32 	%r1465, %r92, %r143;
	mul.wide.s32 	%rd188, %r1465, 4;
	add.s64 	%rd189, %rd28, %rd188;
	st.shared.u32 	[%rd189], %r1396;
	add.s32 	%r1466, %r93, %r143;
	mul.wide.u32 	%rd190, %r1466, 4;
	add.s64 	%rd191, %rd28, %rd190;
	st.shared.u32 	[%rd191], %r1400;
	add.s32 	%r1467, %r94, %r143;
	mul.wide.s32 	%rd192, %r1467, 4;
	add.s64 	%rd193, %rd28, %rd192;
	st.shared.u32 	[%rd193], %r1404;
	add.s32 	%r1468, %r95, %r143;
	mul.wide.s32 	%rd194, %r1468, 4;
	add.s64 	%rd195, %rd28, %rd194;
	st.shared.u32 	[%rd195], %r1408;
	bar.sync 	0;
	mov.u32 	%r3505, %r3454;
	mov.u32 	%r3506, %r3454;
	mov.u32 	%r3507, %r3454;
	mov.u32 	%r3508, %r3454;
	@%p115 bra 	LBB0_110;
	bra.uni 	LBB0_74;
LBB0_110:                               // %oksrem7030
                                        //   in Loop: Header=BB0_73 Depth=2
	ld.shared.u32 	%r3505, [%rd8];
	ld.shared.u32 	%r3506, [%rd9];
	ld.shared.u32 	%r3507, [%rd10];
	ld.shared.u32 	%r3508, [%rd11];
LBB0_74:                                // %L17202
                                        //   in Loop: Header=BB0_73 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1504, %r1501}, {%r306, %r309}, {%r3505}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1513, %r1510}, {%r306, %r309}, {%r3506}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1522, %r1519}, {%r306, %r309}, {%r3507}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1531, %r1528}, {%r306, %r309}, {%r3508}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1497, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1499, %r1497, %r1501;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1502, %r358, %r1504, %r1499;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1506, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1508, %r1506, %r1510;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1511, %r358, %r1513, %r1508;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1515, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1517, %r1515, %r1519;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1520, %r358, %r1522, %r1517;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1524, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1526, %r1524, %r1528;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1529, %r358, %r1531, %r1526;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1533, %r361, %r1504;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1536, %r358, %r1501, %r1533;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1540, %r361, %r1513;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1543, %r358, %r1510, %r1540;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1547, %r361, %r1522;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1550, %r358, %r1519, %r1547;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1554, %r361, %r1531;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1557, %r358, %r1528, %r1554;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1602, %r1605}, {%r402, %r408, %r405, %r411}, {%r1502, %r1536}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1621, %r1624}, {%r402, %r408, %r405, %r411}, {%r1511, %r1543}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1609, %r1613}, {%r402, %r408, %r405, %r411}, {%r1520, %r1550}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1628, %r1632}, {%r402, %r408, %r405, %r411}, {%r1529, %r1557}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1601, %r1602, %r1602;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1604, %r1605, %r1605, %r1601;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1608, %r1609, %r1609, %r1604;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1612, %r1613, %r1613, %r1608;
	// end inline asm
	mov.u32 	%r1636, 442899046;
	// begin inline asm
	fma.rn.f16x2 %r1616, %r1636, %r1612, %r3504;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1620, %r1621, %r1621;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1623, %r1624, %r1624, %r1620;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1627, %r1628, %r1628, %r1623;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1631, %r1632, %r1632, %r1627;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1635, %r1636, %r1631, %r3503;
	// end inline asm
	mov.u32 	%r3509, %r3454;
	mov.u32 	%r3510, %r3454;
	mov.u32 	%r3511, %r3454;
	mov.u32 	%r3512, %r3454;
	@%p115 bra 	LBB0_111;
	bra.uni 	LBB0_75;
LBB0_111:                               // %oksrem7565
                                        //   in Loop: Header=BB0_73 Depth=2
	add.s32 	%r1640, %r96, %r141;
	mul.wide.s32 	%rd196, %r1640, 4;
	add.s64 	%rd198, %rd28, %rd196;
	ld.shared.u32 	%r3509, [%rd198];
	add.s32 	%r1641, %r97, %r141;
	mul.wide.u32 	%rd199, %r1641, 4;
	add.s64 	%rd200, %rd28, %rd199;
	ld.shared.u32 	%r3510, [%rd200];
	add.s32 	%r1642, %r98, %r141;
	mul.wide.s32 	%rd201, %r1642, 4;
	add.s64 	%rd202, %rd28, %rd201;
	ld.shared.u32 	%r3511, [%rd202];
	add.s32 	%r1643, %r99, %r141;
	mul.wide.s32 	%rd203, %r1643, 4;
	add.s64 	%rd204, %rd28, %rd203;
	ld.shared.u32 	%r3512, [%rd204];
LBB0_75:                                // %L18427
                                        //   in Loop: Header=BB0_73 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1679, %r1676}, {%r306, %r309}, {%r3509}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1688, %r1685}, {%r306, %r309}, {%r3510}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1697, %r1694}, {%r306, %r309}, {%r3511}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1706, %r1703}, {%r306, %r309}, {%r3512}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1672, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1674, %r1672, %r1676;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1677, %r358, %r1679, %r1674;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1681, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1683, %r1681, %r1685;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1686, %r358, %r1688, %r1683;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1690, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1692, %r1690, %r1694;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1695, %r358, %r1697, %r1692;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1699, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1701, %r1699, %r1703;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1704, %r358, %r1706, %r1701;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1708, %r361, %r1679;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1711, %r358, %r1676, %r1708;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1715, %r361, %r1688;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1718, %r358, %r1685, %r1715;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1722, %r361, %r1697;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1725, %r358, %r1694, %r1722;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1729, %r361, %r1706;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1732, %r358, %r1703, %r1729;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1777, %r1780}, {%r402, %r408, %r405, %r411}, {%r1677, %r1711}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1796, %r1799}, {%r402, %r408, %r405, %r411}, {%r1686, %r1718}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1784, %r1788}, {%r402, %r408, %r405, %r411}, {%r1695, %r1725}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1803, %r1807}, {%r402, %r408, %r405, %r411}, {%r1704, %r1732}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1776, %r1777, %r1777;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1779, %r1780, %r1780, %r1776;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1783, %r1784, %r1784, %r1779;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1787, %r1788, %r1788, %r1783;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1791, %r1636, %r1787, %r1616;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1795, %r1796, %r1796;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1798, %r1799, %r1799, %r1795;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1802, %r1803, %r1803, %r1798;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1806, %r1807, %r1807, %r1802;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1810, %r1636, %r1806, %r1635;
	// end inline asm
	mov.u32 	%r3513, %r3454;
	mov.u32 	%r3514, %r3454;
	mov.u32 	%r3515, %r3454;
	mov.u32 	%r3516, %r3454;
	@%p115 bra 	LBB0_112;
	bra.uni 	LBB0_76;
LBB0_112:                               // %oksrem8100
                                        //   in Loop: Header=BB0_73 Depth=2
	add.s32 	%r1815, %r96, %r142;
	mul.wide.s32 	%rd205, %r1815, 4;
	add.s64 	%rd207, %rd28, %rd205;
	ld.shared.u32 	%r3513, [%rd207];
	add.s32 	%r1816, %r97, %r142;
	mul.wide.u32 	%rd208, %r1816, 4;
	add.s64 	%rd209, %rd28, %rd208;
	ld.shared.u32 	%r3514, [%rd209];
	add.s32 	%r1817, %r98, %r142;
	mul.wide.s32 	%rd210, %r1817, 4;
	add.s64 	%rd211, %rd28, %rd210;
	ld.shared.u32 	%r3515, [%rd211];
	add.s32 	%r1818, %r99, %r142;
	mul.wide.s32 	%rd212, %r1818, 4;
	add.s64 	%rd213, %rd28, %rd212;
	ld.shared.u32 	%r3516, [%rd213];
LBB0_76:                                // %L19652
                                        //   in Loop: Header=BB0_73 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1854, %r1851}, {%r306, %r309}, {%r3513}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1863, %r1860}, {%r306, %r309}, {%r3514}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1872, %r1869}, {%r306, %r309}, {%r3515}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1881, %r1878}, {%r306, %r309}, {%r3516}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1847, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1849, %r1847, %r1851;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1852, %r358, %r1854, %r1849;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1856, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1858, %r1856, %r1860;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1861, %r358, %r1863, %r1858;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1865, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1867, %r1865, %r1869;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1870, %r358, %r1872, %r1867;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1874, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1876, %r1874, %r1878;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1879, %r358, %r1881, %r1876;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1883, %r361, %r1854;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1886, %r358, %r1851, %r1883;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1890, %r361, %r1863;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1893, %r358, %r1860, %r1890;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1897, %r361, %r1872;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1900, %r358, %r1869, %r1897;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1904, %r361, %r1881;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1907, %r358, %r1878, %r1904;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1952, %r1955}, {%r402, %r408, %r405, %r411}, {%r1852, %r1886}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1971, %r1974}, {%r402, %r408, %r405, %r411}, {%r1861, %r1893}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1959, %r1963}, {%r402, %r408, %r405, %r411}, {%r1870, %r1900}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1978, %r1982}, {%r402, %r408, %r405, %r411}, {%r1879, %r1907}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1951, %r1952, %r1952;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1954, %r1955, %r1955, %r1951;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1958, %r1959, %r1959, %r1954;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1962, %r1963, %r1963, %r1958;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1966, %r1636, %r1962, %r1791;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1970, %r1971, %r1971;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1973, %r1974, %r1974, %r1970;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1977, %r1978, %r1978, %r1973;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1981, %r1982, %r1982, %r1977;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1985, %r1636, %r1981, %r1810;
	// end inline asm
	mov.u32 	%r3517, %r3454;
	mov.u32 	%r3518, %r3454;
	mov.u32 	%r3519, %r3454;
	mov.u32 	%r3520, %r3454;
	@%p115 bra 	LBB0_113;
	bra.uni 	LBB0_77;
LBB0_113:                               // %oksrem8635
                                        //   in Loop: Header=BB0_73 Depth=2
	add.s32 	%r1990, %r96, %r143;
	mul.wide.s32 	%rd214, %r1990, 4;
	add.s64 	%rd216, %rd28, %rd214;
	ld.shared.u32 	%r3517, [%rd216];
	add.s32 	%r1991, %r97, %r143;
	mul.wide.u32 	%rd217, %r1991, 4;
	add.s64 	%rd218, %rd28, %rd217;
	ld.shared.u32 	%r3518, [%rd218];
	add.s32 	%r1992, %r98, %r143;
	mul.wide.s32 	%rd219, %r1992, 4;
	add.s64 	%rd220, %rd28, %rd219;
	ld.shared.u32 	%r3519, [%rd220];
	add.s32 	%r1993, %r99, %r143;
	mul.wide.s32 	%rd221, %r1993, 4;
	add.s64 	%rd222, %rd28, %rd221;
	ld.shared.u32 	%r3520, [%rd222];
LBB0_77:                                // %L20877
                                        //   in Loop: Header=BB0_73 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2029, %r2026}, {%r306, %r309}, {%r3517}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2038, %r2035}, {%r306, %r309}, {%r3518}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2047, %r2044}, {%r306, %r309}, {%r3519}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2056, %r2053}, {%r306, %r309}, {%r3520}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2022, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2024, %r2022, %r2026;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2027, %r358, %r2029, %r2024;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2031, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2033, %r2031, %r2035;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2036, %r358, %r2038, %r2033;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2040, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2042, %r2040, %r2044;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2045, %r358, %r2047, %r2042;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2049, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2051, %r2049, %r2053;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2054, %r358, %r2056, %r2051;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2058, %r361, %r2029;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2061, %r358, %r2026, %r2058;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2065, %r361, %r2038;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2068, %r358, %r2035, %r2065;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2072, %r361, %r2047;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2075, %r358, %r2044, %r2072;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2079, %r361, %r2056;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2082, %r358, %r2053, %r2079;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2127, %r2130}, {%r402, %r408, %r405, %r411}, {%r2027, %r2061}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2146, %r2149}, {%r402, %r408, %r405, %r411}, {%r2036, %r2068}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2134, %r2138}, {%r402, %r408, %r405, %r411}, {%r2045, %r2075}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2153, %r2157}, {%r402, %r408, %r405, %r411}, {%r2054, %r2082}, {%r3454, %r3454};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2126, %r2127, %r2127;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2129, %r2130, %r2130, %r2126;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2133, %r2134, %r2134, %r2129;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2137, %r2138, %r2138, %r2133;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3504, %r1636, %r2137, %r1966;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2145, %r2146, %r2146;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2148, %r2149, %r2149, %r2145;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2152, %r2153, %r2153, %r2148;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2156, %r2157, %r2157, %r2152;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3503, %r1636, %r2156, %r1985;
	// end inline asm
	add.s32 	%r3501, %r3501, 4;
	setp.ne.s32 	%p125, %r3501, 40;
	@%p125 bra 	LBB0_81;
// %bb.78:                              // %L21027
                                        //   in Loop: Header=BB0_73 Depth=2
	@%p65 bra 	LBB0_80;
// %bb.79:                              // %L21086
                                        //   in Loop: Header=BB0_73 Depth=2
	mul.lo.s32 	%r2164, %r3502, 1152;
	add.s32 	%r2165, %r100, %r2164;
	mul.wide.u32 	%rd223, %r2165, 4;
	add.s64 	%rd224, %rd4, %rd223;
	st.global.u32 	[%rd224], %r3504;
	add.s32 	%r2166, %r101, %r2164;
	mul.wide.u32 	%rd225, %r2166, 4;
	add.s64 	%rd226, %rd4, %rd225;
	st.global.u32 	[%rd226], %r3503;
	bra.uni 	LBB0_80;
LBB0_82:                                // %L21346.preheader
                                        //   in Loop: Header=BB0_71 Depth=1
	add.s32 	%r176, %r107, 25;
	add.s32 	%r177, %r107, 26;
	add.s32 	%r178, %r107, 27;
	mov.u32 	%r2169, 0;
	mov.u32 	%r3525, 12;
	mov.u32 	%r3526, %r2169;
	bra.uni 	LBB0_83;
LBB0_90:                                // %L31339
                                        //   in Loop: Header=BB0_83 Depth=2
	add.s32 	%r3502, %r3502, 1;
	mov.u32 	%r3501, 0;
	mov.u32 	%r3503, %r3501;
	mov.u32 	%r3504, %r3501;
LBB0_91:                                // %L31340
                                        //   in Loop: Header=BB0_83 Depth=2
	bar.sync 	0;
	add.s32 	%r3526, %r3526, 1;
	add.s32 	%r3525, %r3525, -4;
	setp.ne.s32 	%p140, %r3525, -12;
	@%p140 bra 	LBB0_83;
	bra.uni 	LBB0_92;
LBB0_83:                                // %L21346
                                        //   Parent Loop BB0_71 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p129, %r3525, 12;
	selp.b32 	%r2707, %r3475, 0, %p129;
	setp.eq.s32 	%p130, %r3525, 8;
	selp.b32 	%r2708, %r3479, %r2707, %p130;
	setp.eq.s32 	%p131, %r3525, 4;
	selp.b32 	%r2709, %r3483, %r2708, %p131;
	setp.eq.s32 	%p132, %r3525, 0;
	selp.b32 	%r2710, %r3487, %r2709, %p132;
	setp.eq.s32 	%p133, %r3525, -4;
	selp.b32 	%r2711, %r3491, %r2710, %p133;
	setp.eq.s32 	%p134, %r3525, -8;
	selp.b32 	%r2712, %r3495, %r2711, %p134;
	selp.b32 	%r2713, %r3476, 0, %p129;
	selp.b32 	%r2714, %r3480, %r2713, %p130;
	selp.b32 	%r2715, %r3484, %r2714, %p131;
	selp.b32 	%r2716, %r3488, %r2715, %p132;
	selp.b32 	%r2717, %r3492, %r2716, %p133;
	selp.b32 	%r2718, %r3496, %r2717, %p134;
	selp.b32 	%r2719, %r3477, 0, %p129;
	selp.b32 	%r2720, %r3481, %r2719, %p130;
	selp.b32 	%r2721, %r3485, %r2720, %p131;
	selp.b32 	%r2722, %r3489, %r2721, %p132;
	selp.b32 	%r2723, %r3493, %r2722, %p133;
	selp.b32 	%r2724, %r3497, %r2723, %p134;
	selp.b32 	%r2725, %r3478, 0, %p129;
	selp.b32 	%r2726, %r3482, %r2725, %p130;
	selp.b32 	%r2727, %r3486, %r2726, %p131;
	selp.b32 	%r2728, %r3490, %r2727, %p132;
	selp.b32 	%r2729, %r3494, %r2728, %p133;
	selp.b32 	%r2730, %r3498, %r2729, %p134;
	// begin inline asm
	mov.b32 %r2197, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r2208, {%rs198, %rs198};
	// end inline asm
	shr.u32 	%r2731, %r2712, 8;
	xor.b32  	%r2207, %r2731, 8947848;
	// begin inline asm
	lop3.b32 %r2194, %r1017, %r2207, %r2197, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2198, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2199, %r2197, %r2198;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2202, %r2194, %r2199;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2205, %r1028, %r2207, %r2208, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2209, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2210, %r2208, %r2209;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2213, %r2205, %r2210;
	// end inline asm
	// begin inline asm
	mov.b32 %r2243, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r2254, {%rs198, %rs198};
	// end inline asm
	shr.u32 	%r2732, %r2718, 8;
	xor.b32  	%r2253, %r2732, 8947848;
	// begin inline asm
	lop3.b32 %r2240, %r1017, %r2253, %r2243, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2244, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2245, %r2243, %r2244;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2248, %r2240, %r2245;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2251, %r1028, %r2253, %r2254, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2255, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2256, %r2254, %r2255;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2259, %r2251, %r2256;
	// end inline asm
	// begin inline asm
	mov.b32 %r2289, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r2300, {%rs198, %rs198};
	// end inline asm
	shr.u32 	%r2733, %r2724, 8;
	xor.b32  	%r2299, %r2733, 8947848;
	// begin inline asm
	lop3.b32 %r2286, %r1017, %r2299, %r2289, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2290, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2291, %r2289, %r2290;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2294, %r2286, %r2291;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2297, %r1028, %r2299, %r2300, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2301, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2302, %r2300, %r2301;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2305, %r2297, %r2302;
	// end inline asm
	// begin inline asm
	mov.b32 %r2335, {%rs196, %rs196};
	// end inline asm
	// begin inline asm
	mov.b32 %r2346, {%rs198, %rs198};
	// end inline asm
	shr.u32 	%r2734, %r2730, 8;
	xor.b32  	%r2345, %r2734, 8947848;
	// begin inline asm
	lop3.b32 %r2332, %r1017, %r2345, %r2335, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2336, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2337, %r2335, %r2336;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2340, %r2332, %r2337;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2343, %r1028, %r2345, %r2346, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2347, {%rs202, %rs202};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2348, %r2346, %r2347;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2351, %r2343, %r2348;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3468;
    mov.b32 {%r2re, %r2im}, %r2202;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2354, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3469;
    mov.b32 {%r2re, %r2im}, %r2213;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2357, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3468;
    mov.b32 {%r2re, %r2im}, %r2248;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2360, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3469;
    mov.b32 {%r2re, %r2im}, %r2259;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2363, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3468;
    mov.b32 {%r2re, %r2im}, %r2294;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2366, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3469;
    mov.b32 {%r2re, %r2im}, %r2305;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2369, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3468;
    mov.b32 {%r2re, %r2im}, %r2340;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2372, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3469;
    mov.b32 {%r2re, %r2im}, %r2351;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2375, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2441, %r2438}, {%r306, %r309}, {%r2354}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2450, %r2447}, {%r306, %r309}, {%r2357}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2459, %r2456}, {%r306, %r309}, {%r2360}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2468, %r2465}, {%r306, %r309}, {%r2363}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2477, %r2474}, {%r306, %r309}, {%r2366}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2486, %r2483}, {%r306, %r309}, {%r2369}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2495, %r2492}, {%r306, %r309}, {%r2372}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2504, %r2501}, {%r306, %r309}, {%r2375}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2434, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2436, %r2434, %r2438;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2439, %r358, %r2441, %r2436;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2443, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2445, %r2443, %r2447;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2448, %r358, %r2450, %r2445;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2452, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2454, %r2452, %r2456;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2457, %r358, %r2459, %r2454;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2461, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2463, %r2461, %r2465;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2466, %r358, %r2468, %r2463;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2470, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2472, %r2470, %r2474;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2475, %r358, %r2477, %r2472;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2479, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2481, %r2479, %r2483;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2484, %r358, %r2486, %r2481;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2488, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2490, %r2488, %r2492;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2493, %r358, %r2495, %r2490;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2497, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2499, %r2497, %r2501;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2502, %r358, %r2504, %r2499;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2506, %r361, %r2441;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2509, %r358, %r2438, %r2506;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2513, %r361, %r2450;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2516, %r358, %r2447, %r2513;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2520, %r361, %r2459;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2523, %r358, %r2456, %r2520;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2527, %r361, %r2468;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2530, %r358, %r2465, %r2527;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2534, %r361, %r2477;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2537, %r358, %r2474, %r2534;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2541, %r361, %r2486;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2544, %r358, %r2483, %r2541;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2548, %r361, %r2495;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2551, %r358, %r2492, %r2548;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2555, %r361, %r2504;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2558, %r358, %r2501, %r2555;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2643, %r2644}, {%r402, %r408, %r405, %r411}, {%r2439, %r2509}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2651, %r2652}, {%r402, %r408, %r405, %r411}, {%r2448, %r2516}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2659, %r2660}, {%r402, %r408, %r405, %r411}, {%r2457, %r2523}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2667, %r2668}, {%r402, %r408, %r405, %r411}, {%r2466, %r2530}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2675, %r2676}, {%r402, %r408, %r405, %r411}, {%r2475, %r2537}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2683, %r2684}, {%r402, %r408, %r405, %r411}, {%r2484, %r2544}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2691, %r2692}, {%r402, %r408, %r405, %r411}, {%r2493, %r2551}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2699, %r2700}, {%r402, %r408, %r405, %r411}, {%r2502, %r2558}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	prmt.b32 %r2642, %r2643, %r2644, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2646, %r2643, %r2644, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2650, %r2651, %r2652, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2654, %r2651, %r2652, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2658, %r2659, %r2660, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2662, %r2659, %r2660, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2666, %r2667, %r2668, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2670, %r2667, %r2668, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2674, %r2675, %r2676, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2678, %r2675, %r2676, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2682, %r2683, %r2684, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2686, %r2683, %r2684, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2690, %r2691, %r2692, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2694, %r2691, %r2692, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2698, %r2699, %r2700, %r715;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2702, %r2699, %r2700, %r719;
	// end inline asm
	st.shared.u32 	[%rd6], %r2642;
	st.shared.u32 	[%rd7+33024], %r2646;
	st.shared.u32 	[%rd7+128], %r2650;
	st.shared.u32 	[%rd7+33152], %r2654;
	cvt.u16.u32 	%rs262, %r3526;
	and.b16  	%rs263, %rs262, 255;
	mul.lo.s16 	%rs264, %rs263, 171;
	shr.u16 	%rs265, %rs264, 10;
	mul.lo.s16 	%rs266, %rs265, 6;
	sub.s16 	%rs267, %rs262, %rs266;
	shl.b16 	%rs268, %rs267, 2;
	cvt.u32.u16 	%r2735, %rs268;
	and.b32  	%r2736, %r2735, 252;
	add.s32 	%r2737, %r176, %r2736;
	cvt.u16.u32 	%rs269, %r2737;
	shr.s16 	%rs270, %rs269, 15;
	shr.u16 	%rs271, %rs270, 14;
	add.s16 	%rs272, %rs269, %rs271;
	and.b16  	%rs273, %rs272, -4;
	sub.s16 	%rs274, %rs269, %rs273;
	mul.wide.s16 	%r185, %rs274, 64;
	add.s32 	%r2738, %r92, %r185;
	mul.wide.s32 	%rd227, %r2738, 4;
	add.s64 	%rd229, %rd28, %rd227;
	st.shared.u32 	[%rd229], %r2658;
	add.s32 	%r2739, %r93, %r185;
	mul.wide.u32 	%rd230, %r2739, 4;
	add.s64 	%rd231, %rd28, %rd230;
	st.shared.u32 	[%rd231], %r2662;
	add.s32 	%r2740, %r94, %r185;
	mul.wide.s32 	%rd232, %r2740, 4;
	add.s64 	%rd233, %rd28, %rd232;
	st.shared.u32 	[%rd233], %r2666;
	add.s32 	%r2741, %r95, %r185;
	mul.wide.s32 	%rd234, %r2741, 4;
	add.s64 	%rd235, %rd28, %rd234;
	st.shared.u32 	[%rd235], %r2670;
	add.s32 	%r2742, %r177, %r2736;
	cvt.u16.u32 	%rs275, %r2742;
	shr.s16 	%rs276, %rs275, 15;
	shr.u16 	%rs277, %rs276, 14;
	add.s16 	%rs278, %rs275, %rs277;
	and.b16  	%rs279, %rs278, -4;
	sub.s16 	%rs280, %rs275, %rs279;
	mul.wide.s16 	%r186, %rs280, 64;
	add.s32 	%r2743, %r92, %r186;
	mul.wide.s32 	%rd236, %r2743, 4;
	add.s64 	%rd237, %rd28, %rd236;
	st.shared.u32 	[%rd237], %r2674;
	add.s32 	%r2744, %r93, %r186;
	mul.wide.u32 	%rd238, %r2744, 4;
	add.s64 	%rd239, %rd28, %rd238;
	st.shared.u32 	[%rd239], %r2678;
	add.s32 	%r2745, %r94, %r186;
	mul.wide.s32 	%rd240, %r2745, 4;
	add.s64 	%rd241, %rd28, %rd240;
	st.shared.u32 	[%rd241], %r2682;
	add.s32 	%r2746, %r95, %r186;
	mul.wide.s32 	%rd242, %r2746, 4;
	add.s64 	%rd243, %rd28, %rd242;
	st.shared.u32 	[%rd243], %r2686;
	add.s32 	%r2747, %r178, %r2736;
	cvt.u16.u32 	%rs281, %r2747;
	shr.s16 	%rs282, %rs281, 15;
	shr.u16 	%rs283, %rs282, 14;
	add.s16 	%rs284, %rs281, %rs283;
	and.b16  	%rs285, %rs284, -4;
	sub.s16 	%rs286, %rs281, %rs285;
	mul.wide.s16 	%r187, %rs286, 64;
	add.s32 	%r2748, %r92, %r187;
	mul.wide.s32 	%rd244, %r2748, 4;
	add.s64 	%rd245, %rd28, %rd244;
	st.shared.u32 	[%rd245], %r2690;
	add.s32 	%r2749, %r93, %r187;
	mul.wide.u32 	%rd246, %r2749, 4;
	add.s64 	%rd247, %rd28, %rd246;
	st.shared.u32 	[%rd247], %r2694;
	add.s32 	%r2750, %r94, %r187;
	mul.wide.s32 	%rd248, %r2750, 4;
	add.s64 	%rd249, %rd28, %rd248;
	st.shared.u32 	[%rd249], %r2698;
	add.s32 	%r2751, %r95, %r187;
	mul.wide.s32 	%rd250, %r2751, 4;
	add.s64 	%rd251, %rd28, %rd250;
	st.shared.u32 	[%rd251], %r2702;
	bar.sync 	0;
	mov.u32 	%r3531, %r2169;
	mov.u32 	%r3532, %r2169;
	mov.u32 	%r3533, %r2169;
	mov.u32 	%r3534, %r2169;
	@%p115 bra 	LBB0_114;
	bra.uni 	LBB0_84;
LBB0_114:                               // %oksrem11428
                                        //   in Loop: Header=BB0_83 Depth=2
	ld.shared.u32 	%r3534, [%rd8];
	ld.shared.u32 	%r3533, [%rd9];
	ld.shared.u32 	%r3532, [%rd10];
	ld.shared.u32 	%r3531, [%rd11];
LBB0_84:                                // %L27221
                                        //   in Loop: Header=BB0_83 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2787, %r2784}, {%r306, %r309}, {%r3534}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2796, %r2793}, {%r306, %r309}, {%r3533}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2805, %r2802}, {%r306, %r309}, {%r3532}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2814, %r2811}, {%r306, %r309}, {%r3531}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2780, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2782, %r2780, %r2784;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2785, %r358, %r2787, %r2782;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2789, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2791, %r2789, %r2793;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2794, %r358, %r2796, %r2791;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2798, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2800, %r2798, %r2802;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2803, %r358, %r2805, %r2800;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2807, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2809, %r2807, %r2811;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2812, %r358, %r2814, %r2809;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2816, %r361, %r2787;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2819, %r358, %r2784, %r2816;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2823, %r361, %r2796;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2826, %r358, %r2793, %r2823;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2830, %r361, %r2805;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2833, %r358, %r2802, %r2830;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2837, %r361, %r2814;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2840, %r358, %r2811, %r2837;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2885, %r2888}, {%r402, %r408, %r405, %r411}, {%r2785, %r2819}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2904, %r2907}, {%r402, %r408, %r405, %r411}, {%r2794, %r2826}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2892, %r2896}, {%r402, %r408, %r405, %r411}, {%r2803, %r2833}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2911, %r2915}, {%r402, %r408, %r405, %r411}, {%r2812, %r2840}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2884, %r2885, %r2885;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2887, %r2888, %r2888, %r2884;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2891, %r2892, %r2892, %r2887;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2895, %r2896, %r2896, %r2891;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2899, %r1636, %r2895, %r3504;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2903, %r2904, %r2904;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2906, %r2907, %r2907, %r2903;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2910, %r2911, %r2911, %r2906;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2914, %r2915, %r2915, %r2910;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2918, %r1636, %r2914, %r3503;
	// end inline asm
	mov.u32 	%r3535, %r2169;
	mov.u32 	%r3536, %r2169;
	mov.u32 	%r3537, %r2169;
	mov.u32 	%r3538, %r2169;
	@%p115 bra 	LBB0_115;
	bra.uni 	LBB0_85;
LBB0_115:                               // %oksrem11963
                                        //   in Loop: Header=BB0_83 Depth=2
	add.s32 	%r2923, %r96, %r185;
	mul.wide.s32 	%rd252, %r2923, 4;
	add.s64 	%rd254, %rd28, %rd252;
	ld.shared.u32 	%r3538, [%rd254];
	add.s32 	%r2924, %r97, %r185;
	mul.wide.u32 	%rd255, %r2924, 4;
	add.s64 	%rd256, %rd28, %rd255;
	ld.shared.u32 	%r3537, [%rd256];
	add.s32 	%r2925, %r98, %r185;
	mul.wide.s32 	%rd257, %r2925, 4;
	add.s64 	%rd258, %rd28, %rd257;
	ld.shared.u32 	%r3536, [%rd258];
	add.s32 	%r2926, %r99, %r185;
	mul.wide.s32 	%rd259, %r2926, 4;
	add.s64 	%rd260, %rd28, %rd259;
	ld.shared.u32 	%r3535, [%rd260];
LBB0_85:                                // %L28446
                                        //   in Loop: Header=BB0_83 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2962, %r2959}, {%r306, %r309}, {%r3538}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2971, %r2968}, {%r306, %r309}, {%r3537}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2980, %r2977}, {%r306, %r309}, {%r3536}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2989, %r2986}, {%r306, %r309}, {%r3535}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2955, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2957, %r2955, %r2959;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2960, %r358, %r2962, %r2957;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2964, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2966, %r2964, %r2968;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2969, %r358, %r2971, %r2966;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2973, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2975, %r2973, %r2977;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2978, %r358, %r2980, %r2975;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2982, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2984, %r2982, %r2986;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2987, %r358, %r2989, %r2984;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2991, %r361, %r2962;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2994, %r358, %r2959, %r2991;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2998, %r361, %r2971;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3001, %r358, %r2968, %r2998;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3005, %r361, %r2980;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3008, %r358, %r2977, %r3005;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3012, %r361, %r2989;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3015, %r358, %r2986, %r3012;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3060, %r3063}, {%r402, %r408, %r405, %r411}, {%r2960, %r2994}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3079, %r3082}, {%r402, %r408, %r405, %r411}, {%r2969, %r3001}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3067, %r3071}, {%r402, %r408, %r405, %r411}, {%r2978, %r3008}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3086, %r3090}, {%r402, %r408, %r405, %r411}, {%r2987, %r3015}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3059, %r3060, %r3060;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3062, %r3063, %r3063, %r3059;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3066, %r3067, %r3067, %r3062;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3070, %r3071, %r3071, %r3066;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3074, %r1636, %r3070, %r2899;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3078, %r3079, %r3079;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3081, %r3082, %r3082, %r3078;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3085, %r3086, %r3086, %r3081;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3089, %r3090, %r3090, %r3085;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3093, %r1636, %r3089, %r2918;
	// end inline asm
	mov.u32 	%r3539, %r2169;
	mov.u32 	%r3540, %r2169;
	mov.u32 	%r3541, %r2169;
	mov.u32 	%r3542, %r2169;
	@%p115 bra 	LBB0_116;
	bra.uni 	LBB0_86;
LBB0_116:                               // %oksrem12498
                                        //   in Loop: Header=BB0_83 Depth=2
	add.s32 	%r3098, %r96, %r186;
	mul.wide.s32 	%rd261, %r3098, 4;
	add.s64 	%rd263, %rd28, %rd261;
	ld.shared.u32 	%r3542, [%rd263];
	add.s32 	%r3099, %r97, %r186;
	mul.wide.u32 	%rd264, %r3099, 4;
	add.s64 	%rd265, %rd28, %rd264;
	ld.shared.u32 	%r3541, [%rd265];
	add.s32 	%r3100, %r98, %r186;
	mul.wide.s32 	%rd266, %r3100, 4;
	add.s64 	%rd267, %rd28, %rd266;
	ld.shared.u32 	%r3540, [%rd267];
	add.s32 	%r3101, %r99, %r186;
	mul.wide.s32 	%rd268, %r3101, 4;
	add.s64 	%rd269, %rd28, %rd268;
	ld.shared.u32 	%r3539, [%rd269];
LBB0_86:                                // %L29671
                                        //   in Loop: Header=BB0_83 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3137, %r3134}, {%r306, %r309}, {%r3542}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3146, %r3143}, {%r306, %r309}, {%r3541}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3155, %r3152}, {%r306, %r309}, {%r3540}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3164, %r3161}, {%r306, %r309}, {%r3539}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3130, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3132, %r3130, %r3134;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3135, %r358, %r3137, %r3132;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3139, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3141, %r3139, %r3143;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3144, %r358, %r3146, %r3141;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3148, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3150, %r3148, %r3152;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3153, %r358, %r3155, %r3150;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3157, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3159, %r3157, %r3161;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3162, %r358, %r3164, %r3159;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3166, %r361, %r3137;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3169, %r358, %r3134, %r3166;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3173, %r361, %r3146;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3176, %r358, %r3143, %r3173;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3180, %r361, %r3155;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3183, %r358, %r3152, %r3180;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3187, %r361, %r3164;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3190, %r358, %r3161, %r3187;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3235, %r3238}, {%r402, %r408, %r405, %r411}, {%r3135, %r3169}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3254, %r3257}, {%r402, %r408, %r405, %r411}, {%r3144, %r3176}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3242, %r3246}, {%r402, %r408, %r405, %r411}, {%r3153, %r3183}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3261, %r3265}, {%r402, %r408, %r405, %r411}, {%r3162, %r3190}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3234, %r3235, %r3235;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3237, %r3238, %r3238, %r3234;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3241, %r3242, %r3242, %r3237;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3245, %r3246, %r3246, %r3241;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3249, %r1636, %r3245, %r3074;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3253, %r3254, %r3254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3256, %r3257, %r3257, %r3253;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3260, %r3261, %r3261, %r3256;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3264, %r3265, %r3265, %r3260;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3268, %r1636, %r3264, %r3093;
	// end inline asm
	mov.u32 	%r3543, %r2169;
	mov.u32 	%r3544, %r2169;
	mov.u32 	%r3545, %r2169;
	mov.u32 	%r3546, %r2169;
	@%p115 bra 	LBB0_117;
	bra.uni 	LBB0_87;
LBB0_117:                               // %oksrem13033
                                        //   in Loop: Header=BB0_83 Depth=2
	add.s32 	%r3273, %r96, %r187;
	mul.wide.s32 	%rd270, %r3273, 4;
	add.s64 	%rd272, %rd28, %rd270;
	ld.shared.u32 	%r3546, [%rd272];
	add.s32 	%r3274, %r97, %r187;
	mul.wide.u32 	%rd273, %r3274, 4;
	add.s64 	%rd274, %rd28, %rd273;
	ld.shared.u32 	%r3545, [%rd274];
	add.s32 	%r3275, %r98, %r187;
	mul.wide.s32 	%rd275, %r3275, 4;
	add.s64 	%rd276, %rd28, %rd275;
	ld.shared.u32 	%r3544, [%rd276];
	add.s32 	%r3276, %r99, %r187;
	mul.wide.s32 	%rd277, %r3276, 4;
	add.s64 	%rd278, %rd28, %rd277;
	ld.shared.u32 	%r3543, [%rd278];
LBB0_87:                                // %L30896
                                        //   in Loop: Header=BB0_83 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3312, %r3309}, {%r306, %r309}, {%r3546}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3321, %r3318}, {%r306, %r309}, {%r3545}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3330, %r3327}, {%r306, %r309}, {%r3544}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3339, %r3336}, {%r306, %r309}, {%r3543}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3305, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3307, %r3305, %r3309;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3310, %r358, %r3312, %r3307;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3314, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3316, %r3314, %r3318;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3319, %r358, %r3321, %r3316;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3323, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3325, %r3323, %r3327;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3328, %r358, %r3330, %r3325;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3332, %r361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3334, %r3332, %r3336;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3337, %r358, %r3339, %r3334;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3341, %r361, %r3312;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3344, %r358, %r3309, %r3341;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3348, %r361, %r3321;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3351, %r358, %r3318, %r3348;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3355, %r361, %r3330;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3358, %r358, %r3327, %r3355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3362, %r361, %r3339;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3365, %r358, %r3336, %r3362;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3410, %r3413}, {%r402, %r408, %r405, %r411}, {%r3310, %r3344}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3429, %r3432}, {%r402, %r408, %r405, %r411}, {%r3319, %r3351}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3417, %r3421}, {%r402, %r408, %r405, %r411}, {%r3328, %r3358}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3436, %r3440}, {%r402, %r408, %r405, %r411}, {%r3337, %r3365}, {%r2169, %r2169};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3409, %r3410, %r3410;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3412, %r3413, %r3413, %r3409;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3416, %r3417, %r3417, %r3412;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3420, %r3421, %r3421, %r3416;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3504, %r1636, %r3420, %r3249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3428, %r3429, %r3429;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3431, %r3432, %r3432, %r3428;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3435, %r3436, %r3436, %r3431;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3439, %r3440, %r3440, %r3435;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3503, %r1636, %r3439, %r3268;
	// end inline asm
	add.s32 	%r3501, %r3501, 4;
	setp.ne.s32 	%p138, %r3501, 40;
	@%p138 bra 	LBB0_91;
// %bb.88:                              // %L31046
                                        //   in Loop: Header=BB0_83 Depth=2
	@%p65 bra 	LBB0_90;
// %bb.89:                              // %L31105
                                        //   in Loop: Header=BB0_83 Depth=2
	mul.lo.s32 	%r3447, %r3502, 1152;
	add.s32 	%r3448, %r100, %r3447;
	mul.wide.u32 	%rd279, %r3448, 4;
	add.s64 	%rd280, %rd4, %rd279;
	st.global.u32 	[%rd280], %r3504;
	add.s32 	%r3449, %r101, %r3447;
	mul.wide.u32 	%rd281, %r3449, 4;
	add.s64 	%rd282, %rd4, %rd281;
	st.global.u32 	[%rd282], %r3503;
	bra.uni 	LBB0_90;
LBB0_93:                                // %L31375
	mov.u32 	%r3451, 0;
	st.global.u32 	[%rd5], %r3451;
	ret;
LBB0_1:                                 // %L8
	ld.param.u32 	%r290, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd13, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0];
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd13;
	st.param.b32 	[param0+8], %r290;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	// begin inline asm
	exit;
	// end inline asm
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
