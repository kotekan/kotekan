// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=192, blocks_per_sm=4

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception1835[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1875[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 192, 1, 1
.minnctapersm 4
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<302>;
	.reg .b16 	%rs<210>;
	.reg .b32 	%r<3022>;
	.reg .f32 	%f<790>;
	.reg .b64 	%rd<271>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r256, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd12, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r265, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p4, %r265, 13919;
	@%p4 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd13, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r257, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r266, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r3, %r2, 192;
	mov.u32 	%r4, %tid.y;
	shl.b32 	%r5, %r4, 5;
	or.b32  	%r267, %r3, %r266;
	add.s32 	%r268, %r267, %r5;
	mul.wide.u32 	%rd20, %r268, 4;
	add.s64 	%rd6, %rd13, %rd20;
	mov.u32 	%r269, 1;
	st.global.u32 	[%rd6], %r269;
	setp.gt.u32 	%p5, %r257, 8191;
	@%p5 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r258, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p6, %r258, %r257;
	setp.gt.s32 	%p7, %r258, 16383;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r259, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r270, %r258, %r257;
	mul.hi.s32 	%r272, %r270, 715827883;
	shr.u32 	%r273, %r272, 31;
	shr.s32 	%r274, %r272, 3;
	add.s32 	%r6, %r274, %r273;
	mul.lo.s32 	%r275, %r6, -48;
	neg.s32 	%r276, %r270;
	setp.ne.s32 	%p9, %r275, %r276;
	setp.gt.u32 	%p10, %r259, 1023;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r260, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p12, %r260, %r259;
	setp.lt.s32 	%p13, %r260, 2048;
	and.pred  	%p14, %p12, %p13;
	sub.s32 	%r277, %r260, %r259;
	setp.eq.s32 	%p15, %r277, %r6;
	and.pred  	%p16, %p14, %p15;
	@%p16 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %L258
	ld.param.u32 	%r261, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p17, %r261, 0;
	@%p17 bra 	$L__BB0_12;
// %bb.8:                               // %L260
	ld.param.u32 	%r262, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p18, %r262, %r261;
	setp.gt.s32 	%p19, %r262, 512;
	or.pred  	%p20, %p18, %p19;
	@%p20 bra 	$L__BB0_12;
// %bb.9:                               // %L270
	ld.param.u32 	%r263, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r7, %r262, %r261;
	and.b32  	%r278, %r7, 3;
	setp.ne.s32 	%p21, %r278, 0;
	setp.lt.s32 	%p22, %r263, 0;
	or.pred  	%p23, %p21, %p22;
	@%p23 bra 	$L__BB0_12;
// %bb.10:                              // %L276
	ld.param.u32 	%r264, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p24, %r264, %r263;
	setp.gt.s32 	%p25, %r264, 4096;
	or.pred  	%p26, %p24, %p25;
	@%p26 bra 	$L__BB0_12;
// %bb.11:                              // %L286
	sub.s32 	%r279, %r264, %r263;
	and.b32  	%r280, %r279, 3;
	setp.eq.s32 	%p27, %r280, 0;
	setp.eq.s32 	%p28, %r279, %r7;
	and.pred  	%p29, %p27, %p28;
	@%p29 bra 	$L__BB0_170;
	bra.uni 	$L__BB0_12;
$L__BB0_170:                            // %pass162
	and.b32  	%r143, %r266, 3;
	shr.u32 	%r144, %r266, 2;
	mul.lo.s32 	%r281, %r143, %r144;
	and.b32  	%r282, %r281, 7;
	cvt.rn.f32.s32 	%f205, %r282;
	mov.f32 	%f206, 0f40800000;
	div.approx.f32 	%f169, %f205, %f206;
	abs.f32 	%f788, %f169;
	setp.lt.f32 	%p30, %f788, 0f40000000;
	setp.gtu.f32 	%p301, %f788, 0f4B800000;
	mov.f32 	%f784, %f788;
	@%p30 bra 	$L__BB0_182;
// %bb.171:
	@%p301 bra 	$L__BB0_178;
	bra.uni 	$L__BB0_172;
$L__BB0_178:
	mov.b32 	%r146, %f788;
	and.b32  	%r283, %r146, 8388607;
	or.b32  	%r3017, %r283, 1065353216;
	mov.b32 	%f783, %r3017;
	add.s32 	%r284, %r146, -1073741824;
	and.b32  	%r3018, %r284, -8388608;
	setp.eq.s32 	%p37, %r3018, 0;
	@%p37 bra 	$L__BB0_181;
// %bb.179:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f216, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f215,%f216;
	// end inline asm
$L__BB0_180:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r285, %r3018, 192937984;
	add.s32 	%r286, %r3017, %r285;
	mov.b32 	%f217, %r286;
	mul.f32 	%f218, %f215, %f217;
	sub.f32 	%f219, %f217, %f218;
	fma.rn.f32 	%f220, %f219, %f215, %f218;
	sub.f32 	%f221, %f217, %f220;
	fma.rz.f32 	%f222, %f221, %f215, %f220;
	cvt.rzi.f32.f32 	%f223, %f222;
	sub.f32 	%f783, %f217, %f223;
	sub.s32 	%r3018, %r3018, %r285;
	mov.b32 	%r3017, %f783;
	setp.ne.s32 	%p38, %r3018, 0;
	setp.ne.s32 	%p39, %r3017, 0;
	and.pred  	%p40, %p38, %p39;
	@%p40 bra 	$L__BB0_180;
$L__BB0_181:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p41, %r146, 2139095039;
	selp.f32 	%f224, 0f7FFFFFFF, 0f4B800000, %p41;
	mul.f32 	%f225, %f783, 0f34000000;
	mul.f32 	%f784, %f224, %f225;
	bra.uni 	$L__BB0_182;
$L__BB0_172:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f207, 0f40000000;
	div.approx.f32 	%f208, %f788, %f207;
	cvt.rzi.f32.f32 	%f782, %f208;
	fma.rn.f32 	%f172, %f782, 0fC0000000, %f788;
	mov.b32 	%r145, %f172;
	setp.lt.u32 	%p32, %r145, 1073741824;
	@%p32 bra 	$L__BB0_177;
// %bb.173:
	setp.lt.u32 	%p33, %r145, -2147483647;
	@%p33 bra 	$L__BB0_175;
// %bb.174:
	add.f32 	%f213, %f782, 0fBF800000;
	setp.lt.f32 	%p36, %f172, 0fC0000000;
	add.f32 	%f214, %f213, 0fBF800000;
	selp.f32 	%f782, %f214, %f213, %p36;
	bra.uni 	$L__BB0_177;
$L__BB0_175:
	add.f32 	%f782, %f782, 0f3F800000;
	setp.ltu.f32 	%p34, %f172, 0f40800000;
	@%p34 bra 	$L__BB0_177;
// %bb.176:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f209, %f782, 0f3F800000;
	fma.rn.f32 	%f211, %f207, 0fC0400000, %f172;
	setp.ge.f32 	%p35, %f211, 0f00000000;
	add.f32 	%f212, %f209, 0f3F800000;
	selp.f32 	%f782, %f212, %f209, %p35;
$L__BB0_177:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f784, %f782, 0fC0000000, %f788;
$L__BB0_182:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f226, %f784;
	setp.gtu.f32 	%p42, %f226, 0f7F800000;
	mov.b32 	%r287, %f169;
	and.b32  	%r153, %r287, -2147483648;
	@%p42 bra 	$L__BB0_184;
// %bb.183:
	mov.b32 	%r288, %f784;
	or.b32  	%r289, %r153, %r288;
	mov.b32 	%f784, %r289;
$L__BB0_184:                            // %__nv_fmodf.exit
	shl.b32 	%r156, %r266, 1;
	and.b32  	%r157, %r156, 2;
	mul.lo.s32 	%r304, %r157, %r144;
	cvt.rn.f32.s32 	%f259, %r304;
	mov.f32 	%f260, 0f41400000;
	div.approx.f32 	%f186, %f259, %f260;
	abs.f32 	%f734, %f186;
	setp.lt.f32 	%p50, %f734, 0f40000000;
	@%p50 bra 	$L__BB0_24;
// %bb.13:
	setp.gtu.f32 	%p51, %f734, 0f4B800000;
	@%p51 bra 	$L__BB0_20;
	bra.uni 	$L__BB0_14;
$L__BB0_20:
	mov.b32 	%r9, %f734;
	and.b32  	%r305, %r9, 8388607;
	or.b32  	%r2967, %r305, 1065353216;
	mov.b32 	%f733, %r2967;
	add.s32 	%r306, %r9, -1073741824;
	and.b32  	%r2968, %r306, -8388608;
	setp.eq.s32 	%p57, %r2968, 0;
	@%p57 bra 	$L__BB0_23;
// %bb.21:                              // %__nv_fmaf_rn.exit4.i.i.i1990.preheader
	mov.f32 	%f270, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f269,%f270;
	// end inline asm
$L__BB0_22:                             // %__nv_fmaf_rn.exit4.i.i.i1990
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r307, %r2968, 192937984;
	add.s32 	%r308, %r2967, %r307;
	mov.b32 	%f271, %r308;
	mul.f32 	%f272, %f269, %f271;
	sub.f32 	%f273, %f271, %f272;
	fma.rn.f32 	%f274, %f273, %f269, %f272;
	sub.f32 	%f275, %f271, %f274;
	fma.rz.f32 	%f276, %f275, %f269, %f274;
	cvt.rzi.f32.f32 	%f277, %f276;
	sub.f32 	%f733, %f271, %f277;
	sub.s32 	%r2968, %r2968, %r307;
	mov.b32 	%r2967, %f733;
	setp.ne.s32 	%p58, %r2968, 0;
	setp.ne.s32 	%p59, %r2967, 0;
	and.pred  	%p60, %p58, %p59;
	@%p60 bra 	$L__BB0_22;
$L__BB0_23:                             // %__internal_fmodf_slowpath_mod.exit.i.i1992
	setp.gt.u32 	%p61, %r9, 2139095039;
	selp.f32 	%f278, 0f7FFFFFFF, 0f4B800000, %p61;
	mul.f32 	%f279, %f733, 0f34000000;
	mul.f32 	%f734, %f278, %f279;
	bra.uni 	$L__BB0_24;
$L__BB0_14:                             // %__nv_fast_fdividef.exit.i.i.i1969
	mov.f32 	%f261, 0f40000000;
	div.approx.f32 	%f262, %f734, %f261;
	cvt.rzi.f32.f32 	%f732, %f262;
	fma.rn.f32 	%f2, %f732, 0fC0000000, %f734;
	mov.b32 	%r8, %f2;
	setp.lt.u32 	%p52, %r8, 1073741824;
	@%p52 bra 	$L__BB0_19;
// %bb.15:
	setp.lt.u32 	%p53, %r8, -2147483647;
	@%p53 bra 	$L__BB0_17;
// %bb.16:
	add.f32 	%f267, %f732, 0fBF800000;
	setp.lt.f32 	%p56, %f2, 0fC0000000;
	add.f32 	%f268, %f267, 0fBF800000;
	selp.f32 	%f732, %f268, %f267, %p56;
	bra.uni 	$L__BB0_19;
$L__BB0_17:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p54, %f2, 0f40800000;
	@%p54 bra 	$L__BB0_19;
// %bb.18:                              // %__nv_fmaf_rn.exit.i.i.i1973
	add.f32 	%f263, %f732, 0f3F800000;
	fma.rn.f32 	%f265, %f261, 0fC0400000, %f2;
	setp.ge.f32 	%p55, %f265, 0f00000000;
	add.f32 	%f266, %f263, 0f3F800000;
	selp.f32 	%f732, %f266, %f263, %p55;
$L__BB0_19:                             // %__internal_fmodf_fastpath_quot.exit.i.i1976
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_24:                             // %__internal_fmodf_kernel.exit.i1995
	or.b32  	%r158, %r157, 1;
	abs.f32 	%f280, %f734;
	setp.gtu.f32 	%p62, %f280, 0f7F800000;
	@%p62 bra 	$L__BB0_26;
// %bb.25:
	mov.b32 	%r309, %f186;
	and.b32  	%r310, %r309, -2147483648;
	mov.b32 	%r311, %f734;
	or.b32  	%r312, %r310, %r311;
	mov.b32 	%f734, %r312;
$L__BB0_26:                             // %__nv_fmodf.exit1996
	mov.f32 	%f250, 0f00000000;
	setp.eq.s32 	%p70, %r158, 3;
	mov.f32 	%f37, %f250;
	mov.f32 	%f38, %f250;
	@%p70 bra 	$L__BB0_42;
// %bb.27:                              // %L525
	mul.lo.s32 	%r321, %r158, %r144;
	mul.hi.u32 	%r322, %r321, -1431655765;
	shr.u32 	%r323, %r322, 4;
	mul.lo.s32 	%r324, %r323, 24;
	sub.s32 	%r325, %r321, %r324;
	cvt.rn.f32.s32 	%f311, %r325;
	div.approx.f32 	%f18, %f311, %f260;
	abs.f32 	%f738, %f18;
	setp.lt.f32 	%p71, %f738, 0f40000000;
	@%p71 bra 	$L__BB0_39;
// %bb.28:
	setp.gtu.f32 	%p72, %f738, 0f4B800000;
	@%p72 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_29;
$L__BB0_35:
	mov.b32 	%r17, %f738;
	and.b32  	%r326, %r17, 8388607;
	or.b32  	%r2969, %r326, 1065353216;
	mov.b32 	%f737, %r2969;
	add.s32 	%r327, %r17, -1073741824;
	and.b32  	%r2970, %r327, -8388608;
	setp.eq.s32 	%p78, %r2970, 0;
	@%p78 bra 	$L__BB0_38;
// %bb.36:                              // %__nv_fmaf_rn.exit4.i.i.i2021.preheader
	mov.f32 	%f322, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f321,%f322;
	// end inline asm
$L__BB0_37:                             // %__nv_fmaf_rn.exit4.i.i.i2021
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r328, %r2970, 192937984;
	add.s32 	%r329, %r2969, %r328;
	mov.b32 	%f323, %r329;
	mul.f32 	%f324, %f321, %f323;
	sub.f32 	%f325, %f323, %f324;
	fma.rn.f32 	%f326, %f325, %f321, %f324;
	sub.f32 	%f327, %f323, %f326;
	fma.rz.f32 	%f328, %f327, %f321, %f326;
	cvt.rzi.f32.f32 	%f329, %f328;
	sub.f32 	%f737, %f323, %f329;
	sub.s32 	%r2970, %r2970, %r328;
	mov.b32 	%r2969, %f737;
	setp.ne.s32 	%p79, %r2970, 0;
	setp.ne.s32 	%p80, %r2969, 0;
	and.pred  	%p81, %p79, %p80;
	@%p81 bra 	$L__BB0_37;
$L__BB0_38:                             // %__internal_fmodf_slowpath_mod.exit.i.i2023
	setp.gt.u32 	%p82, %r17, 2139095039;
	selp.f32 	%f330, 0f7FFFFFFF, 0f4B800000, %p82;
	mul.f32 	%f331, %f737, 0f34000000;
	mul.f32 	%f738, %f330, %f331;
	bra.uni 	$L__BB0_39;
$L__BB0_29:                             // %__nv_fast_fdividef.exit.i.i.i2000
	mov.f32 	%f313, 0f40000000;
	div.approx.f32 	%f314, %f738, %f313;
	cvt.rzi.f32.f32 	%f736, %f314;
	fma.rn.f32 	%f21, %f736, 0fC0000000, %f738;
	mov.b32 	%r16, %f21;
	setp.lt.u32 	%p73, %r16, 1073741824;
	@%p73 bra 	$L__BB0_34;
// %bb.30:
	setp.lt.u32 	%p74, %r16, -2147483647;
	@%p74 bra 	$L__BB0_32;
// %bb.31:
	add.f32 	%f319, %f736, 0fBF800000;
	setp.lt.f32 	%p77, %f21, 0fC0000000;
	add.f32 	%f320, %f319, 0fBF800000;
	selp.f32 	%f736, %f320, %f319, %p77;
	bra.uni 	$L__BB0_34;
$L__BB0_32:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p75, %f21, 0f40800000;
	@%p75 bra 	$L__BB0_34;
// %bb.33:                              // %__nv_fmaf_rn.exit.i.i.i2004
	add.f32 	%f315, %f736, 0f3F800000;
	fma.rn.f32 	%f317, %f313, 0fC0400000, %f21;
	setp.ge.f32 	%p76, %f317, 0f00000000;
	add.f32 	%f318, %f315, 0f3F800000;
	selp.f32 	%f736, %f318, %f315, %p76;
$L__BB0_34:                             // %__internal_fmodf_fastpath_quot.exit.i.i2007
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_39:                             // %__internal_fmodf_kernel.exit.i2026
	abs.f32 	%f332, %f738;
	setp.gtu.f32 	%p83, %f332, 0f7F800000;
	@%p83 bra 	$L__BB0_41;
// %bb.40:
	mov.b32 	%r330, %f18;
	and.b32  	%r331, %r330, -2147483648;
	mov.b32 	%r332, %f738;
	or.b32  	%r333, %r331, %r332;
	mov.b32 	%f738, %r333;
$L__BB0_41:                             // %__nv_fmodf.exit2027
	add.f32 	%f333, %f738, %f738;
	mov.b32 	%r334, %f333;
	and.b32  	%r335, %r334, -2147483648;
	or.b32  	%r336, %r335, 1056964608;
	mov.b32 	%f334, %r336;
	add.f32 	%f335, %f333, %f334;
	cvt.rzi.f32.f32 	%f336, %f335;
	abs.f32 	%f337, %f333;
	setp.gt.f32 	%p84, %f337, 0f4B000000;
	selp.f32 	%f338, %f333, %f336, %p84;
	cvt.rzi.f32.f32 	%f339, %f333;
	setp.lt.f32 	%p85, %f337, 0f3F000000;
	selp.f32 	%f340, %f339, %f338, %p85;
	cvt.rzi.s32.f32 	%r337, %f340;
	fma.rn.f32 	%f341, %f340, 0fBF000000, %f738;
	mul.f32 	%f342, %f341, %f341;
	fma.rn.f32 	%f343, %f342, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f344, %f342, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f345, %f343, %f342, 0fC0A55DF6;
	fma.rn.f32 	%f346, %f344, %f342, 0f4081E0CF;
	fma.rn.f32 	%f347, %f342, %f341, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f342, 0fC09DE9E6;
	fma.rn.f32 	%f349, %f345, %f347, 0f00000000;
	fma.rn.f32 	%f350, %f348, %f342, 0f3F800000;
	fma.rn.f32 	%f351, %f341, 0f40490FDB, %f349;
	and.b32  	%r338, %r337, 1;
	setp.eq.b32 	%p86, %r338, 1;
	selp.f32 	%f352, %f350, %f351, %p86;
	selp.f32 	%f353, %f351, %f350, %p86;
	and.b32  	%r339, %r337, 2;
	setp.eq.s32 	%p87, %r339, 0;
	neg.f32 	%f354, %f352;
	selp.f32 	%f355, %f352, %f354, %p87;
	add.s32 	%r340, %r337, 1;
	and.b32  	%r341, %r340, 2;
	setp.eq.s32 	%p88, %r341, 0;
	mov.f32 	%f356, 0f00000000;
	sub.f32 	%f357, %f356, %f353;
	selp.f32 	%f358, %f353, %f357, %p88;
	cvt.rzi.f32.f32 	%f359, %f738;
	setp.eq.f32 	%p89, %f359, %f738;
	mul.f32 	%f360, %f738, 0f00000000;
	selp.f32 	%f38, %f360, %f355, %p89;
	abs.f32 	%f361, %f738;
	setp.gt.f32 	%p90, %f361, 0f4B800000;
	add.f32 	%f362, %f38, 0f3F800000;
	selp.f32 	%f37, %f362, %f358, %p90;
$L__BB0_42:                             // %L559
	and.b32  	%r26, %r144, 3;
	setp.eq.s32 	%p91, %r26, 3;
	mov.f32 	%f731, 0f3FC00000;
	mov.f32 	%f746, %f250;
	mov.f32 	%f755, %f250;
	@%p91 bra 	$L__BB0_58;
// %bb.43:                              // %L597
	mul.lo.s32 	%r348, %r157, %r26;
	cvt.u16.u32 	%rs9, %r348;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 9;
	mul.lo.s16 	%rs12, %rs11, 3;
	sub.s16 	%rs13, %rs9, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f364, %rs14;
	div.approx.f32 	%f39, %f364, %f731;
	abs.f32 	%f744, %f39;
	setp.lt.f32 	%p92, %f744, 0f40000000;
	@%p92 bra 	$L__BB0_55;
// %bb.44:
	setp.gtu.f32 	%p93, %f744, 0f4B800000;
	@%p93 bra 	$L__BB0_51;
	bra.uni 	$L__BB0_45;
$L__BB0_51:
	mov.b32 	%r28, %f744;
	and.b32  	%r349, %r28, 8388607;
	or.b32  	%r2971, %r349, 1065353216;
	mov.b32 	%f743, %r2971;
	add.s32 	%r350, %r28, -1073741824;
	and.b32  	%r2972, %r350, -8388608;
	setp.eq.s32 	%p99, %r2972, 0;
	@%p99 bra 	$L__BB0_54;
// %bb.52:                              // %__nv_fmaf_rn.exit4.i.i.i2052.preheader
	mov.f32 	%f375, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f374,%f375;
	// end inline asm
$L__BB0_53:                             // %__nv_fmaf_rn.exit4.i.i.i2052
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r351, %r2972, 192937984;
	add.s32 	%r352, %r2971, %r351;
	mov.b32 	%f376, %r352;
	mul.f32 	%f377, %f374, %f376;
	sub.f32 	%f378, %f376, %f377;
	fma.rn.f32 	%f379, %f378, %f374, %f377;
	sub.f32 	%f380, %f376, %f379;
	fma.rz.f32 	%f381, %f380, %f374, %f379;
	cvt.rzi.f32.f32 	%f382, %f381;
	sub.f32 	%f743, %f376, %f382;
	sub.s32 	%r2972, %r2972, %r351;
	mov.b32 	%r2971, %f743;
	setp.ne.s32 	%p100, %r2972, 0;
	setp.ne.s32 	%p101, %r2971, 0;
	and.pred  	%p102, %p100, %p101;
	@%p102 bra 	$L__BB0_53;
$L__BB0_54:                             // %__internal_fmodf_slowpath_mod.exit.i.i2054
	setp.gt.u32 	%p103, %r28, 2139095039;
	selp.f32 	%f383, 0f7FFFFFFF, 0f4B800000, %p103;
	mul.f32 	%f384, %f743, 0f34000000;
	mul.f32 	%f744, %f383, %f384;
	bra.uni 	$L__BB0_55;
$L__BB0_45:                             // %__nv_fast_fdividef.exit.i.i.i2031
	mov.f32 	%f366, 0f40000000;
	div.approx.f32 	%f367, %f744, %f366;
	cvt.rzi.f32.f32 	%f742, %f367;
	fma.rn.f32 	%f42, %f742, 0fC0000000, %f744;
	mov.b32 	%r27, %f42;
	setp.lt.u32 	%p94, %r27, 1073741824;
	@%p94 bra 	$L__BB0_50;
// %bb.46:
	setp.lt.u32 	%p95, %r27, -2147483647;
	@%p95 bra 	$L__BB0_48;
// %bb.47:
	add.f32 	%f372, %f742, 0fBF800000;
	setp.lt.f32 	%p98, %f42, 0fC0000000;
	add.f32 	%f373, %f372, 0fBF800000;
	selp.f32 	%f742, %f373, %f372, %p98;
	bra.uni 	$L__BB0_50;
$L__BB0_48:
	add.f32 	%f742, %f742, 0f3F800000;
	setp.ltu.f32 	%p96, %f42, 0f40800000;
	@%p96 bra 	$L__BB0_50;
// %bb.49:                              // %__nv_fmaf_rn.exit.i.i.i2035
	add.f32 	%f368, %f742, 0f3F800000;
	fma.rn.f32 	%f370, %f366, 0fC0400000, %f42;
	setp.ge.f32 	%p97, %f370, 0f00000000;
	add.f32 	%f371, %f368, 0f3F800000;
	selp.f32 	%f742, %f371, %f368, %p97;
$L__BB0_50:                             // %__internal_fmodf_fastpath_quot.exit.i.i2038
	fma.rn.f32 	%f744, %f742, 0fC0000000, %f744;
$L__BB0_55:                             // %__internal_fmodf_kernel.exit.i2057
	abs.f32 	%f385, %f744;
	setp.gtu.f32 	%p104, %f385, 0f7F800000;
	@%p104 bra 	$L__BB0_57;
// %bb.56:
	mov.b32 	%r353, %f39;
	and.b32  	%r354, %r353, -2147483648;
	mov.b32 	%r355, %f744;
	or.b32  	%r356, %r354, %r355;
	mov.b32 	%f744, %r356;
$L__BB0_57:                             // %__nv_fmodf.exit2058
	add.f32 	%f386, %f744, %f744;
	mov.b32 	%r357, %f386;
	and.b32  	%r358, %r357, -2147483648;
	or.b32  	%r359, %r358, 1056964608;
	mov.b32 	%f387, %r359;
	add.f32 	%f388, %f386, %f387;
	cvt.rzi.f32.f32 	%f389, %f388;
	abs.f32 	%f390, %f386;
	setp.gt.f32 	%p105, %f390, 0f4B000000;
	selp.f32 	%f391, %f386, %f389, %p105;
	cvt.rzi.f32.f32 	%f392, %f386;
	setp.lt.f32 	%p106, %f390, 0f3F000000;
	selp.f32 	%f393, %f392, %f391, %p106;
	cvt.rzi.s32.f32 	%r360, %f393;
	fma.rn.f32 	%f394, %f393, 0fBF000000, %f744;
	mul.f32 	%f395, %f394, %f394;
	fma.rn.f32 	%f396, %f395, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f397, %f395, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f398, %f396, %f395, 0fC0A55DF6;
	fma.rn.f32 	%f399, %f397, %f395, 0f4081E0CF;
	fma.rn.f32 	%f400, %f395, %f394, 0f00000000;
	fma.rn.f32 	%f401, %f399, %f395, 0fC09DE9E6;
	fma.rn.f32 	%f402, %f398, %f400, 0f00000000;
	fma.rn.f32 	%f403, %f401, %f395, 0f3F800000;
	fma.rn.f32 	%f404, %f394, 0f40490FDB, %f402;
	and.b32  	%r361, %r360, 1;
	setp.eq.b32 	%p107, %r361, 1;
	selp.f32 	%f405, %f403, %f404, %p107;
	selp.f32 	%f406, %f404, %f403, %p107;
	and.b32  	%r362, %r360, 2;
	setp.eq.s32 	%p108, %r362, 0;
	neg.f32 	%f407, %f405;
	selp.f32 	%f408, %f405, %f407, %p108;
	add.s32 	%r363, %r360, 1;
	and.b32  	%r364, %r363, 2;
	setp.eq.s32 	%p109, %r364, 0;
	mov.f32 	%f409, 0f00000000;
	sub.f32 	%f410, %f409, %f406;
	selp.f32 	%f411, %f406, %f410, %p109;
	cvt.rzi.f32.f32 	%f412, %f744;
	setp.eq.f32 	%p110, %f412, %f744;
	mul.f32 	%f413, %f744, 0f00000000;
	selp.f32 	%f755, %f413, %f408, %p110;
	abs.f32 	%f414, %f744;
	setp.gt.f32 	%p111, %f414, 0f4B800000;
	add.f32 	%f415, %f755, 0f3F800000;
	selp.f32 	%f746, %f415, %f411, %p111;
$L__BB0_58:                             // %L631
	or.pred  	%p114, %p70, %p91;
	mov.f32 	%f752, %f250;
	mov.f32 	%f757, %f250;
	@%p114 bra 	$L__BB0_74;
// %bb.59:                              // %L639
	mul.lo.s32 	%r365, %r158, %r26;
	mul.hi.u32 	%r366, %r365, -1431655765;
	shr.u32 	%r367, %r366, 1;
	mul.lo.s32 	%r368, %r367, 3;
	sub.s32 	%r369, %r365, %r368;
	cvt.rn.f32.s32 	%f417, %r369;
	div.approx.f32 	%f60, %f417, %f731;
	abs.f32 	%f750, %f60;
	setp.lt.f32 	%p115, %f750, 0f40000000;
	@%p115 bra 	$L__BB0_71;
// %bb.60:
	setp.gtu.f32 	%p116, %f750, 0f4B800000;
	@%p116 bra 	$L__BB0_67;
	bra.uni 	$L__BB0_61;
$L__BB0_67:
	mov.b32 	%r36, %f750;
	and.b32  	%r370, %r36, 8388607;
	or.b32  	%r2973, %r370, 1065353216;
	mov.b32 	%f749, %r2973;
	add.s32 	%r371, %r36, -1073741824;
	and.b32  	%r2974, %r371, -8388608;
	setp.eq.s32 	%p122, %r2974, 0;
	@%p122 bra 	$L__BB0_70;
// %bb.68:                              // %__nv_fmaf_rn.exit4.i.i.i2083.preheader
	mov.f32 	%f428, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f427,%f428;
	// end inline asm
$L__BB0_69:                             // %__nv_fmaf_rn.exit4.i.i.i2083
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r372, %r2974, 192937984;
	add.s32 	%r373, %r2973, %r372;
	mov.b32 	%f429, %r373;
	mul.f32 	%f430, %f427, %f429;
	sub.f32 	%f431, %f429, %f430;
	fma.rn.f32 	%f432, %f431, %f427, %f430;
	sub.f32 	%f433, %f429, %f432;
	fma.rz.f32 	%f434, %f433, %f427, %f432;
	cvt.rzi.f32.f32 	%f435, %f434;
	sub.f32 	%f749, %f429, %f435;
	sub.s32 	%r2974, %r2974, %r372;
	mov.b32 	%r2973, %f749;
	setp.ne.s32 	%p123, %r2974, 0;
	setp.ne.s32 	%p124, %r2973, 0;
	and.pred  	%p125, %p123, %p124;
	@%p125 bra 	$L__BB0_69;
$L__BB0_70:                             // %__internal_fmodf_slowpath_mod.exit.i.i2085
	setp.gt.u32 	%p126, %r36, 2139095039;
	selp.f32 	%f436, 0f7FFFFFFF, 0f4B800000, %p126;
	mul.f32 	%f437, %f749, 0f34000000;
	mul.f32 	%f750, %f436, %f437;
	bra.uni 	$L__BB0_71;
$L__BB0_61:                             // %__nv_fast_fdividef.exit.i.i.i2062
	mov.f32 	%f419, 0f40000000;
	div.approx.f32 	%f420, %f750, %f419;
	cvt.rzi.f32.f32 	%f748, %f420;
	fma.rn.f32 	%f63, %f748, 0fC0000000, %f750;
	mov.b32 	%r35, %f63;
	setp.lt.u32 	%p117, %r35, 1073741824;
	@%p117 bra 	$L__BB0_66;
// %bb.62:
	setp.lt.u32 	%p118, %r35, -2147483647;
	@%p118 bra 	$L__BB0_64;
// %bb.63:
	add.f32 	%f425, %f748, 0fBF800000;
	setp.lt.f32 	%p121, %f63, 0fC0000000;
	add.f32 	%f426, %f425, 0fBF800000;
	selp.f32 	%f748, %f426, %f425, %p121;
	bra.uni 	$L__BB0_66;
$L__BB0_64:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p119, %f63, 0f40800000;
	@%p119 bra 	$L__BB0_66;
// %bb.65:                              // %__nv_fmaf_rn.exit.i.i.i2066
	add.f32 	%f421, %f748, 0f3F800000;
	fma.rn.f32 	%f423, %f419, 0fC0400000, %f63;
	setp.ge.f32 	%p120, %f423, 0f00000000;
	add.f32 	%f424, %f421, 0f3F800000;
	selp.f32 	%f748, %f424, %f421, %p120;
$L__BB0_66:                             // %__internal_fmodf_fastpath_quot.exit.i.i2069
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_71:                             // %__internal_fmodf_kernel.exit.i2088
	abs.f32 	%f438, %f750;
	setp.gtu.f32 	%p127, %f438, 0f7F800000;
	@%p127 bra 	$L__BB0_73;
// %bb.72:
	mov.b32 	%r374, %f60;
	and.b32  	%r375, %r374, -2147483648;
	mov.b32 	%r376, %f750;
	or.b32  	%r377, %r375, %r376;
	mov.b32 	%f750, %r377;
$L__BB0_73:                             // %__nv_fmodf.exit2089
	add.f32 	%f439, %f750, %f750;
	mov.b32 	%r378, %f439;
	and.b32  	%r379, %r378, -2147483648;
	or.b32  	%r380, %r379, 1056964608;
	mov.b32 	%f440, %r380;
	add.f32 	%f441, %f439, %f440;
	cvt.rzi.f32.f32 	%f442, %f441;
	abs.f32 	%f443, %f439;
	setp.gt.f32 	%p128, %f443, 0f4B000000;
	selp.f32 	%f444, %f439, %f442, %p128;
	cvt.rzi.f32.f32 	%f445, %f439;
	setp.lt.f32 	%p129, %f443, 0f3F000000;
	selp.f32 	%f446, %f445, %f444, %p129;
	cvt.rzi.s32.f32 	%r381, %f446;
	fma.rn.f32 	%f447, %f446, 0fBF000000, %f750;
	mul.f32 	%f448, %f447, %f447;
	fma.rn.f32 	%f449, %f448, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f450, %f448, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f451, %f449, %f448, 0fC0A55DF6;
	fma.rn.f32 	%f452, %f450, %f448, 0f4081E0CF;
	fma.rn.f32 	%f453, %f448, %f447, 0f00000000;
	fma.rn.f32 	%f454, %f452, %f448, 0fC09DE9E6;
	fma.rn.f32 	%f455, %f451, %f453, 0f00000000;
	fma.rn.f32 	%f456, %f454, %f448, 0f3F800000;
	fma.rn.f32 	%f457, %f447, 0f40490FDB, %f455;
	and.b32  	%r382, %r381, 1;
	setp.eq.b32 	%p130, %r382, 1;
	selp.f32 	%f458, %f456, %f457, %p130;
	selp.f32 	%f459, %f457, %f456, %p130;
	and.b32  	%r383, %r381, 2;
	setp.eq.s32 	%p131, %r383, 0;
	neg.f32 	%f460, %f458;
	selp.f32 	%f461, %f458, %f460, %p131;
	add.s32 	%r384, %r381, 1;
	and.b32  	%r385, %r384, 2;
	setp.eq.s32 	%p132, %r385, 0;
	mov.f32 	%f462, 0f00000000;
	sub.f32 	%f463, %f462, %f459;
	selp.f32 	%f464, %f459, %f463, %p132;
	cvt.rzi.f32.f32 	%f465, %f750;
	setp.eq.f32 	%p133, %f465, %f750;
	mul.f32 	%f466, %f750, 0f00000000;
	selp.f32 	%f757, %f466, %f461, %p133;
	abs.f32 	%f467, %f750;
	setp.gt.f32 	%p134, %f467, 0f4B800000;
	add.f32 	%f468, %f757, 0f3F800000;
	selp.f32 	%f752, %f468, %f464, %p134;
$L__BB0_74:                             // %L673
	and.b32  	%r43, %r266, 2;
	setp.eq.s32 	%p135, %r43, 0;
	mov.f32 	%f83, %f746;
	mov.f32 	%f85, %f752;
	@%p135 bra 	$L__BB0_76;
// %bb.75:                              // %L682
	neg.f32 	%f85, %f757;
	neg.f32 	%f83, %f755;
	mov.f32 	%f755, %f746;
	mov.f32 	%f757, %f752;
$L__BB0_76:                             // %L684
	@%p30 bra 	$L__BB0_192;
// %bb.77:
	@%p301 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_78;
$L__BB0_188:
	mov.b32 	%r160, %f788;
	and.b32  	%r392, %r160, 8388607;
	or.b32  	%r3019, %r392, 1065353216;
	mov.b32 	%f787, %r3019;
	add.s32 	%r393, %r160, -1073741824;
	and.b32  	%r3020, %r393, -8388608;
	setp.eq.s32 	%p143, %r3020, 0;
	@%p143 bra 	$L__BB0_191;
// %bb.189:                             // %__nv_fmaf_rn.exit4.i.i.i2114.preheader
	mov.f32 	%f478, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f477,%f478;
	// end inline asm
$L__BB0_190:                            // %__nv_fmaf_rn.exit4.i.i.i2114
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r394, %r3020, 192937984;
	add.s32 	%r395, %r3019, %r394;
	mov.b32 	%f479, %r395;
	mul.f32 	%f480, %f477, %f479;
	sub.f32 	%f481, %f479, %f480;
	fma.rn.f32 	%f482, %f481, %f477, %f480;
	sub.f32 	%f483, %f479, %f482;
	fma.rz.f32 	%f484, %f483, %f477, %f482;
	cvt.rzi.f32.f32 	%f485, %f484;
	sub.f32 	%f787, %f479, %f485;
	sub.s32 	%r3020, %r3020, %r394;
	mov.b32 	%r3019, %f787;
	setp.ne.s32 	%p144, %r3020, 0;
	setp.ne.s32 	%p145, %r3019, 0;
	and.pred  	%p146, %p144, %p145;
	@%p146 bra 	$L__BB0_190;
$L__BB0_191:                            // %__internal_fmodf_slowpath_mod.exit.i.i2116
	setp.gt.u32 	%p147, %r160, 2139095039;
	selp.f32 	%f486, 0f7FFFFFFF, 0f4B800000, %p147;
	mul.f32 	%f487, %f787, 0f34000000;
	mul.f32 	%f788, %f486, %f487;
	bra.uni 	$L__BB0_192;
$L__BB0_78:                             // %__nv_fast_fdividef.exit.i.i.i2093
	mov.f32 	%f469, 0f40000000;
	div.approx.f32 	%f470, %f788, %f469;
	cvt.rzi.f32.f32 	%f786, %f470;
	fma.rn.f32 	%f189, %f786, 0fC0000000, %f788;
	mov.b32 	%r159, %f189;
	setp.lt.u32 	%p138, %r159, 1073741824;
	@%p138 bra 	$L__BB0_187;
// %bb.79:
	setp.lt.u32 	%p139, %r159, -2147483647;
	@%p139 bra 	$L__BB0_185;
// %bb.80:
	add.f32 	%f475, %f786, 0fBF800000;
	setp.lt.f32 	%p142, %f189, 0fC0000000;
	add.f32 	%f476, %f475, 0fBF800000;
	selp.f32 	%f786, %f476, %f475, %p142;
	bra.uni 	$L__BB0_187;
$L__BB0_185:
	add.f32 	%f786, %f786, 0f3F800000;
	setp.ltu.f32 	%p140, %f189, 0f40800000;
	@%p140 bra 	$L__BB0_187;
// %bb.186:                             // %__nv_fmaf_rn.exit.i.i.i2097
	add.f32 	%f471, %f786, 0f3F800000;
	fma.rn.f32 	%f473, %f469, 0fC0400000, %f189;
	setp.ge.f32 	%p141, %f473, 0f00000000;
	add.f32 	%f474, %f471, 0f3F800000;
	selp.f32 	%f786, %f474, %f471, %p141;
$L__BB0_187:                            // %__internal_fmodf_fastpath_quot.exit.i.i2100
	fma.rn.f32 	%f788, %f786, 0fC0000000, %f788;
$L__BB0_192:                            // %__internal_fmodf_kernel.exit.i2119
	abs.f32 	%f488, %f788;
	setp.gtu.f32 	%p148, %f488, 0f7F800000;
	@%p148 bra 	$L__BB0_194;
// %bb.193:
	mov.b32 	%r396, %f788;
	or.b32  	%r397, %r153, %r396;
	mov.b32 	%f788, %r397;
$L__BB0_194:                            // %__nv_fmodf.exit2120
	mov.f32 	%f512, 0f00000000;
	mov.f32 	%f521, 0f41000000;
	div.approx.f32 	%f203, %f512, %f521;
	abs.f32 	%f760, %f203;
	setp.lt.f32 	%p156, %f760, 0f40000000;
	@%p156 bra 	$L__BB0_92;
// %bb.81:
	setp.gtu.f32 	%p157, %f760, 0f4B800000;
	@%p157 bra 	$L__BB0_88;
	bra.uni 	$L__BB0_82;
$L__BB0_88:
	mov.b32 	%r47, %f760;
	and.b32  	%r412, %r47, 8388607;
	or.b32  	%r2975, %r412, 1065353216;
	mov.b32 	%f759, %r2975;
	add.s32 	%r413, %r47, -1073741824;
	and.b32  	%r2976, %r413, -8388608;
	setp.eq.s32 	%p163, %r2976, 0;
	@%p163 bra 	$L__BB0_91;
// %bb.89:                              // %__nv_fmaf_rn.exit4.i.i.i2145.preheader
	mov.f32 	%f531, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f530,%f531;
	// end inline asm
$L__BB0_90:                             // %__nv_fmaf_rn.exit4.i.i.i2145
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r414, %r2976, 192937984;
	add.s32 	%r415, %r2975, %r414;
	mov.b32 	%f532, %r415;
	mul.f32 	%f533, %f530, %f532;
	sub.f32 	%f534, %f532, %f533;
	fma.rn.f32 	%f535, %f534, %f530, %f533;
	sub.f32 	%f536, %f532, %f535;
	fma.rz.f32 	%f537, %f536, %f530, %f535;
	cvt.rzi.f32.f32 	%f538, %f537;
	sub.f32 	%f759, %f532, %f538;
	sub.s32 	%r2976, %r2976, %r414;
	mov.b32 	%r2975, %f759;
	setp.ne.s32 	%p164, %r2976, 0;
	setp.ne.s32 	%p165, %r2975, 0;
	and.pred  	%p166, %p164, %p165;
	@%p166 bra 	$L__BB0_90;
$L__BB0_91:                             // %__internal_fmodf_slowpath_mod.exit.i.i2147
	setp.gt.u32 	%p167, %r47, 2139095039;
	selp.f32 	%f539, 0f7FFFFFFF, 0f4B800000, %p167;
	mul.f32 	%f540, %f759, 0f34000000;
	mul.f32 	%f760, %f539, %f540;
	bra.uni 	$L__BB0_92;
$L__BB0_82:                             // %__nv_fast_fdividef.exit.i.i.i2124
	mov.f32 	%f522, 0f40000000;
	div.approx.f32 	%f523, %f760, %f522;
	cvt.rzi.f32.f32 	%f758, %f523;
	fma.rn.f32 	%f88, %f758, 0fC0000000, %f760;
	mov.b32 	%r46, %f88;
	setp.lt.u32 	%p158, %r46, 1073741824;
	@%p158 bra 	$L__BB0_87;
// %bb.83:
	setp.lt.u32 	%p159, %r46, -2147483647;
	@%p159 bra 	$L__BB0_85;
// %bb.84:
	add.f32 	%f528, %f758, 0fBF800000;
	setp.lt.f32 	%p162, %f88, 0fC0000000;
	add.f32 	%f529, %f528, 0fBF800000;
	selp.f32 	%f758, %f529, %f528, %p162;
	bra.uni 	$L__BB0_87;
$L__BB0_85:
	add.f32 	%f758, %f758, 0f3F800000;
	setp.ltu.f32 	%p160, %f88, 0f40800000;
	@%p160 bra 	$L__BB0_87;
// %bb.86:                              // %__nv_fmaf_rn.exit.i.i.i2128
	add.f32 	%f524, %f758, 0f3F800000;
	fma.rn.f32 	%f526, %f522, 0fC0400000, %f88;
	setp.ge.f32 	%p161, %f526, 0f00000000;
	add.f32 	%f527, %f524, 0f3F800000;
	selp.f32 	%f758, %f527, %f524, %p161;
$L__BB0_87:                             // %__internal_fmodf_fastpath_quot.exit.i.i2131
	fma.rn.f32 	%f760, %f758, 0fC0000000, %f760;
$L__BB0_92:                             // %__internal_fmodf_kernel.exit.i2150
	abs.f32 	%f541, %f760;
	setp.gtu.f32 	%p168, %f541, 0f7F800000;
	@%p168 bra 	$L__BB0_94;
// %bb.93:
	mov.b32 	%r416, %f203;
	and.b32  	%r417, %r416, -2147483648;
	mov.b32 	%r418, %f760;
	or.b32  	%r419, %r417, %r418;
	mov.b32 	%f760, %r419;
$L__BB0_94:                             // %__nv_fmodf.exit2151
	cvt.rn.f32.s32 	%f572, %r144;
	div.approx.f32 	%f104, %f572, %f521;
	abs.f32 	%f764, %f104;
	setp.lt.f32 	%p176, %f764, 0f40000000;
	@%p176 bra 	$L__BB0_106;
// %bb.95:
	setp.gtu.f32 	%p177, %f764, 0f4B800000;
	@%p177 bra 	$L__BB0_102;
	bra.uni 	$L__BB0_96;
$L__BB0_102:
	mov.b32 	%r55, %f764;
	and.b32  	%r428, %r55, 8388607;
	or.b32  	%r2977, %r428, 1065353216;
	mov.b32 	%f763, %r2977;
	add.s32 	%r429, %r55, -1073741824;
	and.b32  	%r2978, %r429, -8388608;
	setp.eq.s32 	%p183, %r2978, 0;
	@%p183 bra 	$L__BB0_105;
// %bb.103:                             // %__nv_fmaf_rn.exit4.i.i.i2176.preheader
	mov.f32 	%f583, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f582,%f583;
	// end inline asm
$L__BB0_104:                            // %__nv_fmaf_rn.exit4.i.i.i2176
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r430, %r2978, 192937984;
	add.s32 	%r431, %r2977, %r430;
	mov.b32 	%f584, %r431;
	mul.f32 	%f585, %f582, %f584;
	sub.f32 	%f586, %f584, %f585;
	fma.rn.f32 	%f587, %f586, %f582, %f585;
	sub.f32 	%f588, %f584, %f587;
	fma.rz.f32 	%f589, %f588, %f582, %f587;
	cvt.rzi.f32.f32 	%f590, %f589;
	sub.f32 	%f763, %f584, %f590;
	sub.s32 	%r2978, %r2978, %r430;
	mov.b32 	%r2977, %f763;
	setp.ne.s32 	%p184, %r2978, 0;
	setp.ne.s32 	%p185, %r2977, 0;
	and.pred  	%p186, %p184, %p185;
	@%p186 bra 	$L__BB0_104;
$L__BB0_105:                            // %__internal_fmodf_slowpath_mod.exit.i.i2178
	setp.gt.u32 	%p187, %r55, 2139095039;
	selp.f32 	%f591, 0f7FFFFFFF, 0f4B800000, %p187;
	mul.f32 	%f592, %f763, 0f34000000;
	mul.f32 	%f764, %f591, %f592;
	bra.uni 	$L__BB0_106;
$L__BB0_96:                             // %__nv_fast_fdividef.exit.i.i.i2155
	mov.f32 	%f574, 0f40000000;
	div.approx.f32 	%f575, %f764, %f574;
	cvt.rzi.f32.f32 	%f762, %f575;
	fma.rn.f32 	%f107, %f762, 0fC0000000, %f764;
	mov.b32 	%r54, %f107;
	setp.lt.u32 	%p178, %r54, 1073741824;
	@%p178 bra 	$L__BB0_101;
// %bb.97:
	setp.lt.u32 	%p179, %r54, -2147483647;
	@%p179 bra 	$L__BB0_99;
// %bb.98:
	add.f32 	%f580, %f762, 0fBF800000;
	setp.lt.f32 	%p182, %f107, 0fC0000000;
	add.f32 	%f581, %f580, 0fBF800000;
	selp.f32 	%f762, %f581, %f580, %p182;
	bra.uni 	$L__BB0_101;
$L__BB0_99:
	add.f32 	%f762, %f762, 0f3F800000;
	setp.ltu.f32 	%p180, %f107, 0f40800000;
	@%p180 bra 	$L__BB0_101;
// %bb.100:                             // %__nv_fmaf_rn.exit.i.i.i2159
	add.f32 	%f576, %f762, 0f3F800000;
	fma.rn.f32 	%f578, %f574, 0fC0400000, %f107;
	setp.ge.f32 	%p181, %f578, 0f00000000;
	add.f32 	%f579, %f576, 0f3F800000;
	selp.f32 	%f762, %f579, %f576, %p181;
$L__BB0_101:                            // %__internal_fmodf_fastpath_quot.exit.i.i2162
	fma.rn.f32 	%f764, %f762, 0fC0000000, %f764;
$L__BB0_106:                            // %__internal_fmodf_kernel.exit.i2181
	abs.f32 	%f593, %f764;
	setp.gtu.f32 	%p188, %f593, 0f7F800000;
	@%p188 bra 	$L__BB0_108;
// %bb.107:
	mov.b32 	%r432, %f104;
	and.b32  	%r433, %r432, -2147483648;
	mov.b32 	%r434, %f764;
	or.b32  	%r435, %r433, %r434;
	mov.b32 	%f764, %r435;
$L__BB0_108:                            // %__nv_fmodf.exit2182
	and.b32  	%r65, %r266, 1;
	shr.u32 	%r66, %r266, 4;
	setp.ne.s32 	%p196, %r65, %r66;
	mov.f32 	%f770, %f512;
	mov.f32 	%f779, %f512;
	@%p196 bra 	$L__BB0_124;
// %bb.109:                             // %L889
	mov.f32 	%f626, 0f3F800000;
	mov.f32 	%f627, 0f00000000;
	div.approx.f32 	%f121, %f627, %f626;
	abs.f32 	%f768, %f121;
	setp.lt.f32 	%p197, %f768, 0f40000000;
	@%p197 bra 	$L__BB0_121;
// %bb.110:
	setp.gtu.f32 	%p198, %f768, 0f4B800000;
	@%p198 bra 	$L__BB0_117;
	bra.uni 	$L__BB0_111;
$L__BB0_117:
	mov.b32 	%r68, %f768;
	and.b32  	%r450, %r68, 8388607;
	or.b32  	%r2979, %r450, 1065353216;
	mov.b32 	%f767, %r2979;
	add.s32 	%r451, %r68, -1073741824;
	and.b32  	%r2980, %r451, -8388608;
	setp.eq.s32 	%p204, %r2980, 0;
	@%p204 bra 	$L__BB0_120;
// %bb.118:                             // %__nv_fmaf_rn.exit4.i.i.i2207.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f636,%f626;
	// end inline asm
$L__BB0_119:                            // %__nv_fmaf_rn.exit4.i.i.i2207
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r452, %r2980, 192937984;
	add.s32 	%r453, %r2979, %r452;
	mov.b32 	%f638, %r453;
	mul.f32 	%f639, %f636, %f638;
	sub.f32 	%f640, %f638, %f639;
	fma.rn.f32 	%f641, %f640, %f636, %f639;
	sub.f32 	%f642, %f638, %f641;
	fma.rz.f32 	%f643, %f642, %f636, %f641;
	cvt.rzi.f32.f32 	%f644, %f643;
	sub.f32 	%f767, %f638, %f644;
	sub.s32 	%r2980, %r2980, %r452;
	mov.b32 	%r2979, %f767;
	setp.ne.s32 	%p205, %r2980, 0;
	setp.ne.s32 	%p206, %r2979, 0;
	and.pred  	%p207, %p205, %p206;
	@%p207 bra 	$L__BB0_119;
$L__BB0_120:                            // %__internal_fmodf_slowpath_mod.exit.i.i2209
	setp.gt.u32 	%p208, %r68, 2139095039;
	selp.f32 	%f645, 0f7FFFFFFF, 0f4B800000, %p208;
	mul.f32 	%f646, %f767, 0f34000000;
	mul.f32 	%f768, %f645, %f646;
	bra.uni 	$L__BB0_121;
$L__BB0_111:                            // %__nv_fast_fdividef.exit.i.i.i2186
	mov.f32 	%f628, 0f40000000;
	div.approx.f32 	%f629, %f768, %f628;
	cvt.rzi.f32.f32 	%f766, %f629;
	fma.rn.f32 	%f124, %f766, 0fC0000000, %f768;
	mov.b32 	%r67, %f124;
	setp.lt.u32 	%p199, %r67, 1073741824;
	@%p199 bra 	$L__BB0_116;
// %bb.112:
	setp.lt.u32 	%p200, %r67, -2147483647;
	@%p200 bra 	$L__BB0_114;
// %bb.113:
	add.f32 	%f634, %f766, 0fBF800000;
	setp.lt.f32 	%p203, %f124, 0fC0000000;
	add.f32 	%f635, %f634, 0fBF800000;
	selp.f32 	%f766, %f635, %f634, %p203;
	bra.uni 	$L__BB0_116;
$L__BB0_114:
	add.f32 	%f766, %f766, 0f3F800000;
	setp.ltu.f32 	%p201, %f124, 0f40800000;
	@%p201 bra 	$L__BB0_116;
// %bb.115:                             // %__nv_fmaf_rn.exit.i.i.i2190
	add.f32 	%f630, %f766, 0f3F800000;
	fma.rn.f32 	%f632, %f628, 0fC0400000, %f124;
	setp.ge.f32 	%p202, %f632, 0f00000000;
	add.f32 	%f633, %f630, 0f3F800000;
	selp.f32 	%f766, %f633, %f630, %p202;
$L__BB0_116:                            // %__internal_fmodf_fastpath_quot.exit.i.i2193
	fma.rn.f32 	%f768, %f766, 0fC0000000, %f768;
$L__BB0_121:                            // %__internal_fmodf_kernel.exit.i2212
	abs.f32 	%f647, %f768;
	setp.gtu.f32 	%p209, %f647, 0f7F800000;
	@%p209 bra 	$L__BB0_123;
// %bb.122:
	mov.b32 	%r454, %f121;
	and.b32  	%r455, %r454, -2147483648;
	mov.b32 	%r456, %f768;
	or.b32  	%r457, %r455, %r456;
	mov.b32 	%f768, %r457;
$L__BB0_123:                            // %__nv_fmodf.exit2213
	add.f32 	%f648, %f768, %f768;
	mov.b32 	%r458, %f648;
	and.b32  	%r459, %r458, -2147483648;
	or.b32  	%r460, %r459, 1056964608;
	mov.b32 	%f649, %r460;
	add.f32 	%f650, %f648, %f649;
	cvt.rzi.f32.f32 	%f651, %f650;
	abs.f32 	%f652, %f648;
	setp.gt.f32 	%p210, %f652, 0f4B000000;
	selp.f32 	%f653, %f648, %f651, %p210;
	cvt.rzi.f32.f32 	%f654, %f648;
	setp.lt.f32 	%p211, %f652, 0f3F000000;
	selp.f32 	%f655, %f654, %f653, %p211;
	cvt.rzi.s32.f32 	%r461, %f655;
	fma.rn.f32 	%f656, %f655, 0fBF000000, %f768;
	mul.f32 	%f657, %f656, %f656;
	fma.rn.f32 	%f658, %f657, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f659, %f657, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f660, %f658, %f657, 0fC0A55DF6;
	fma.rn.f32 	%f661, %f659, %f657, 0f4081E0CF;
	fma.rn.f32 	%f662, %f657, %f656, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f657, 0fC09DE9E6;
	fma.rn.f32 	%f664, %f660, %f662, 0f00000000;
	fma.rn.f32 	%f665, %f663, %f657, 0f3F800000;
	fma.rn.f32 	%f666, %f656, 0f40490FDB, %f664;
	and.b32  	%r462, %r461, 1;
	setp.eq.b32 	%p212, %r462, 1;
	selp.f32 	%f667, %f665, %f666, %p212;
	selp.f32 	%f668, %f666, %f665, %p212;
	and.b32  	%r463, %r461, 2;
	setp.eq.s32 	%p213, %r463, 0;
	neg.f32 	%f669, %f667;
	selp.f32 	%f670, %f667, %f669, %p213;
	add.s32 	%r464, %r461, 1;
	and.b32  	%r465, %r464, 2;
	setp.eq.s32 	%p214, %r465, 0;
	sub.f32 	%f672, %f627, %f668;
	selp.f32 	%f673, %f668, %f672, %p214;
	cvt.rzi.f32.f32 	%f674, %f768;
	setp.eq.f32 	%p215, %f674, %f768;
	mul.f32 	%f675, %f768, 0f00000000;
	selp.f32 	%f779, %f675, %f670, %p215;
	abs.f32 	%f676, %f768;
	setp.gt.f32 	%p216, %f676, 0f4B800000;
	add.f32 	%f677, %f779, 0f3F800000;
	selp.f32 	%f770, %f677, %f673, %p216;
$L__BB0_124:                            // %L928
	and.b32  	%r64, %r144, 1;
	mov.f32 	%f776, %f512;
	mov.f32 	%f781, %f512;
	@%p196 bra 	$L__BB0_140;
// %bb.125:                             // %L931
	cvt.rn.f32.s32 	%f679, %r64;
	mov.f32 	%f680, 0f3F800000;
	div.approx.f32 	%f142, %f679, %f680;
	abs.f32 	%f774, %f142;
	setp.lt.f32 	%p218, %f774, 0f40000000;
	@%p218 bra 	$L__BB0_137;
// %bb.126:
	setp.gtu.f32 	%p219, %f774, 0f4B800000;
	@%p219 bra 	$L__BB0_133;
	bra.uni 	$L__BB0_127;
$L__BB0_133:
	mov.b32 	%r76, %f774;
	and.b32  	%r466, %r76, 8388607;
	or.b32  	%r2981, %r466, 1065353216;
	mov.b32 	%f773, %r2981;
	add.s32 	%r467, %r76, -1073741824;
	and.b32  	%r2982, %r467, -8388608;
	setp.eq.s32 	%p225, %r2982, 0;
	@%p225 bra 	$L__BB0_136;
// %bb.134:                             // %__nv_fmaf_rn.exit4.i.i.i2238.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f689,%f680;
	// end inline asm
$L__BB0_135:                            // %__nv_fmaf_rn.exit4.i.i.i2238
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r468, %r2982, 192937984;
	add.s32 	%r469, %r2981, %r468;
	mov.b32 	%f691, %r469;
	mul.f32 	%f692, %f689, %f691;
	sub.f32 	%f693, %f691, %f692;
	fma.rn.f32 	%f694, %f693, %f689, %f692;
	sub.f32 	%f695, %f691, %f694;
	fma.rz.f32 	%f696, %f695, %f689, %f694;
	cvt.rzi.f32.f32 	%f697, %f696;
	sub.f32 	%f773, %f691, %f697;
	sub.s32 	%r2982, %r2982, %r468;
	mov.b32 	%r2981, %f773;
	setp.ne.s32 	%p226, %r2982, 0;
	setp.ne.s32 	%p227, %r2981, 0;
	and.pred  	%p228, %p226, %p227;
	@%p228 bra 	$L__BB0_135;
$L__BB0_136:                            // %__internal_fmodf_slowpath_mod.exit.i.i2240
	setp.gt.u32 	%p229, %r76, 2139095039;
	selp.f32 	%f698, 0f7FFFFFFF, 0f4B800000, %p229;
	mul.f32 	%f699, %f773, 0f34000000;
	mul.f32 	%f774, %f698, %f699;
	bra.uni 	$L__BB0_137;
$L__BB0_127:                            // %__nv_fast_fdividef.exit.i.i.i2217
	mov.f32 	%f681, 0f40000000;
	div.approx.f32 	%f682, %f774, %f681;
	cvt.rzi.f32.f32 	%f772, %f682;
	fma.rn.f32 	%f145, %f772, 0fC0000000, %f774;
	mov.b32 	%r75, %f145;
	setp.lt.u32 	%p220, %r75, 1073741824;
	@%p220 bra 	$L__BB0_132;
// %bb.128:
	setp.lt.u32 	%p221, %r75, -2147483647;
	@%p221 bra 	$L__BB0_130;
// %bb.129:
	add.f32 	%f687, %f772, 0fBF800000;
	setp.lt.f32 	%p224, %f145, 0fC0000000;
	add.f32 	%f688, %f687, 0fBF800000;
	selp.f32 	%f772, %f688, %f687, %p224;
	bra.uni 	$L__BB0_132;
$L__BB0_130:
	add.f32 	%f772, %f772, 0f3F800000;
	setp.ltu.f32 	%p222, %f145, 0f40800000;
	@%p222 bra 	$L__BB0_132;
// %bb.131:                             // %__nv_fmaf_rn.exit.i.i.i2221
	add.f32 	%f683, %f772, 0f3F800000;
	fma.rn.f32 	%f685, %f681, 0fC0400000, %f145;
	setp.ge.f32 	%p223, %f685, 0f00000000;
	add.f32 	%f686, %f683, 0f3F800000;
	selp.f32 	%f772, %f686, %f683, %p223;
$L__BB0_132:                            // %__internal_fmodf_fastpath_quot.exit.i.i2224
	fma.rn.f32 	%f774, %f772, 0fC0000000, %f774;
$L__BB0_137:                            // %__internal_fmodf_kernel.exit.i2243
	abs.f32 	%f700, %f774;
	setp.gtu.f32 	%p230, %f700, 0f7F800000;
	@%p230 bra 	$L__BB0_139;
// %bb.138:
	mov.b32 	%r470, %f142;
	and.b32  	%r471, %r470, -2147483648;
	mov.b32 	%r472, %f774;
	or.b32  	%r473, %r471, %r472;
	mov.b32 	%f774, %r473;
$L__BB0_139:                            // %__nv_fmodf.exit2244
	add.f32 	%f701, %f774, %f774;
	mov.b32 	%r474, %f701;
	and.b32  	%r475, %r474, -2147483648;
	or.b32  	%r476, %r475, 1056964608;
	mov.b32 	%f702, %r476;
	add.f32 	%f703, %f701, %f702;
	cvt.rzi.f32.f32 	%f704, %f703;
	abs.f32 	%f705, %f701;
	setp.gt.f32 	%p231, %f705, 0f4B000000;
	selp.f32 	%f706, %f701, %f704, %p231;
	cvt.rzi.f32.f32 	%f707, %f701;
	setp.lt.f32 	%p232, %f705, 0f3F000000;
	selp.f32 	%f708, %f707, %f706, %p232;
	cvt.rzi.s32.f32 	%r477, %f708;
	fma.rn.f32 	%f709, %f708, 0fBF000000, %f774;
	mul.f32 	%f710, %f709, %f709;
	fma.rn.f32 	%f711, %f710, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f712, %f710, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f713, %f711, %f710, 0fC0A55DF6;
	fma.rn.f32 	%f714, %f712, %f710, 0f4081E0CF;
	fma.rn.f32 	%f715, %f710, %f709, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f710, 0fC09DE9E6;
	fma.rn.f32 	%f717, %f713, %f715, 0f00000000;
	fma.rn.f32 	%f718, %f716, %f710, 0f3F800000;
	fma.rn.f32 	%f719, %f709, 0f40490FDB, %f717;
	and.b32  	%r478, %r477, 1;
	setp.eq.b32 	%p233, %r478, 1;
	selp.f32 	%f720, %f718, %f719, %p233;
	selp.f32 	%f721, %f719, %f718, %p233;
	and.b32  	%r479, %r477, 2;
	setp.eq.s32 	%p234, %r479, 0;
	neg.f32 	%f722, %f720;
	selp.f32 	%f723, %f720, %f722, %p234;
	add.s32 	%r480, %r477, 1;
	and.b32  	%r481, %r480, 2;
	setp.eq.s32 	%p235, %r481, 0;
	mov.f32 	%f724, 0f00000000;
	sub.f32 	%f725, %f724, %f721;
	selp.f32 	%f726, %f721, %f725, %p235;
	cvt.rzi.f32.f32 	%f727, %f774;
	setp.eq.f32 	%p236, %f727, %f774;
	mul.f32 	%f728, %f774, 0f00000000;
	selp.f32 	%f781, %f728, %f723, %p236;
	abs.f32 	%f729, %f774;
	setp.gt.f32 	%p237, %f729, 0f4B800000;
	add.f32 	%f730, %f781, 0f3F800000;
	selp.f32 	%f776, %f730, %f726, %p237;
$L__BB0_140:                            // %L965
	mov.f32 	%f165, %f770;
	mov.f32 	%f167, %f776;
	@%p135 bra 	$L__BB0_142;
// %bb.141:                             // %L974
	neg.f32 	%f167, %f781;
	neg.f32 	%f165, %f779;
	mov.f32 	%f779, %f770;
	mov.f32 	%f781, %f776;
$L__BB0_142:                            // %L976
	setp.gt.u32 	%p239, %r266, 15;
	mov.u32 	%r169, 999999999;
	@%p239 bra 	$L__BB0_196;
// %bb.143:                             // %L1006
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	mad.lo.s32 	%r489, %r266, 6, %r4;
	cvt.u16.u32 	%rs15, %r489;
	and.b16  	%rs16, %rs15, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 14;
	mul.lo.s16 	%rs19, %rs18, 96;
	sub.s16 	%rs20, %rs15, %rs19;
	cvt.u32.u16 	%r490, %rs20;
	and.b32  	%r491, %r490, 255;
	mul.wide.u32 	%rd21, %r491, 4;
	add.s64 	%rd22, %rd1, %rd21;
	ld.global.u32 	%r492, [%rd22];
	shl.b32 	%r493, %r492, 16;
	cvt.s32.s16 	%r85, %r492;
	shr.s32 	%r86, %r492, 16;
	or.b32  	%r494, %r493, 65535;
	setp.lt.u32 	%p240, %r494, 589823;
	setp.lt.u32 	%p241, %r492, 786432;
	and.pred  	%p242, %p240, %p241;
	@%p242 bra 	$L__BB0_195;
	bra.uni 	$L__BB0_144;
$L__BB0_195:                            // %L1246
	mul.lo.s32 	%r498, %r86, 290;
	mad.lo.s32 	%r169, %r85, 33, %r498;
$L__BB0_196:                            // %pass543
	add.f32 	%f227, %f784, %f784;
	mov.b32 	%r296, %f227;
	add.f32 	%f489, %f788, %f788;
	and.b32  	%r297, %r296, -2147483648;
	add.f32 	%f282, %f734, %f734;
	mov.b32 	%r404, %f489;
	or.b32  	%r298, %r297, 1056964608;
	mov.b32 	%r313, %f282;
	and.b32  	%r405, %r404, -2147483648;
	add.f32 	%f542, %f760, %f760;
	add.f32 	%f595, %f764, %f764;
	mov.b32 	%f228, %r298;
	and.b32  	%r314, %r313, -2147483648;
	or.b32  	%r406, %r405, 1056964608;
	mov.b32 	%r420, %f542;
	mov.b32 	%r442, %f595;
	add.f32 	%f229, %f227, %f228;
	abs.f32 	%f231, %f227;
	or.b32  	%r315, %r314, 1056964608;
	mov.b32 	%f490, %r406;
	and.b32  	%r421, %r420, -2147483648;
	and.b32  	%r443, %r442, -2147483648;
	cvt.rzi.f32.f32 	%f230, %f229;
	setp.gt.f32 	%p43, %f231, 0f4B000000;
	mov.b32 	%f283, %r315;
	add.f32 	%f491, %f489, %f490;
	abs.f32 	%f493, %f489;
	or.b32  	%r422, %r421, 1056964608;
	or.b32  	%r444, %r443, 1056964608;
	selp.f32 	%f232, %f227, %f230, %p43;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p44, %f231, 0f3F000000;
	add.f32 	%f284, %f282, %f283;
	abs.f32 	%f286, %f282;
	cvt.rzi.f32.f32 	%f492, %f491;
	setp.gt.f32 	%p149, %f493, 0f4B000000;
	mov.b32 	%f543, %r422;
	mov.b32 	%f596, %r444;
	selp.f32 	%f234, %f233, %f232, %p44;
	cvt.rzi.f32.f32 	%f285, %f284;
	setp.gt.f32 	%p63, %f286, 0f4B000000;
	selp.f32 	%f494, %f489, %f492, %p149;
	cvt.rzi.f32.f32 	%f495, %f489;
	setp.lt.f32 	%p150, %f493, 0f3F000000;
	add.f32 	%f544, %f542, %f543;
	abs.f32 	%f546, %f542;
	add.f32 	%f597, %f595, %f596;
	abs.f32 	%f599, %f595;
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f784;
	selp.f32 	%f287, %f282, %f285, %p63;
	cvt.rzi.f32.f32 	%f288, %f282;
	setp.lt.f32 	%p64, %f286, 0f3F000000;
	selp.f32 	%f496, %f495, %f494, %p150;
	cvt.rzi.f32.f32 	%f545, %f544;
	setp.gt.f32 	%p169, %f546, 0f4B000000;
	cvt.rzi.f32.f32 	%f598, %f597;
	setp.gt.f32 	%p189, %f599, 0f4B000000;
	mul.f32 	%f236, %f235, %f235;
	selp.f32 	%f289, %f288, %f287, %p64;
	fma.rn.f32 	%f497, %f496, 0fBF000000, %f788;
	selp.f32 	%f547, %f542, %f545, %p169;
	cvt.rzi.f32.f32 	%f548, %f542;
	setp.lt.f32 	%p170, %f546, 0f3F000000;
	selp.f32 	%f600, %f595, %f598, %p189;
	cvt.rzi.f32.f32 	%f601, %f595;
	setp.lt.f32 	%p190, %f599, 0f3F000000;
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f290, %f289, 0fBF000000, %f734;
	mul.f32 	%f498, %f497, %f497;
	selp.f32 	%f549, %f548, %f547, %p170;
	selp.f32 	%f602, %f601, %f600, %p190;
	cvt.rzi.s32.f32 	%r299, %f234;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	mul.f32 	%f291, %f290, %f290;
	fma.rn.f32 	%f499, %f498, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f500, %f498, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f550, %f549, 0fBF000000, %f760;
	fma.rn.f32 	%f603, %f602, 0fBF000000, %f764;
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r300, %r299, 1;
	fma.rn.f32 	%f292, %f291, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f293, %f291, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r407, %f496;
	fma.rn.f32 	%f501, %f499, %f498, 0fC0A55DF6;
	fma.rn.f32 	%f502, %f500, %f498, 0f4081E0CF;
	fma.rn.f32 	%f503, %f498, %f497, 0f00000000;
	mul.f32 	%f551, %f550, %f550;
	mul.f32 	%f604, %f603, %f603;
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p45, %r300, 1;
	cvt.rzi.s32.f32 	%r316, %f289;
	fma.rn.f32 	%f294, %f292, %f291, 0fC0A55DF6;
	fma.rn.f32 	%f295, %f293, %f291, 0f4081E0CF;
	fma.rn.f32 	%f296, %f291, %f290, 0f00000000;
	fma.rn.f32 	%f504, %f502, %f498, 0fC09DE9E6;
	fma.rn.f32 	%f505, %f501, %f503, 0f00000000;
	and.b32  	%r408, %r407, 1;
	fma.rn.f32 	%f552, %f551, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f553, %f551, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f604, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f606, %f604, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f246, %f244, %f245, %p45;
	and.b32  	%r301, %r299, 2;
	fma.rn.f32 	%f297, %f295, %f291, 0fC09DE9E6;
	fma.rn.f32 	%f298, %f294, %f296, 0f00000000;
	and.b32  	%r317, %r316, 1;
	fma.rn.f32 	%f506, %f504, %f498, 0f3F800000;
	fma.rn.f32 	%f507, %f497, 0f40490FDB, %f505;
	setp.eq.b32 	%p151, %r408, 1;
	cvt.rzi.s32.f32 	%r423, %f549;
	fma.rn.f32 	%f554, %f552, %f551, 0fC0A55DF6;
	fma.rn.f32 	%f555, %f553, %f551, 0f4081E0CF;
	fma.rn.f32 	%f556, %f551, %f550, 0f00000000;
	cvt.rzi.s32.f32 	%r445, %f602;
	fma.rn.f32 	%f607, %f605, %f604, 0fC0A55DF6;
	fma.rn.f32 	%f608, %f606, %f604, 0f4081E0CF;
	fma.rn.f32 	%f609, %f604, %f603, 0f00000000;
	setp.eq.s32 	%p46, %r301, 0;
	neg.f32 	%f248, %f246;
	add.s32 	%r302, %r299, 1;
	cvt.rzi.f32.f32 	%f253, %f784;
	fma.rn.f32 	%f299, %f297, %f291, 0f3F800000;
	fma.rn.f32 	%f300, %f290, 0f40490FDB, %f298;
	setp.eq.b32 	%p65, %r317, 1;
	selp.f32 	%f508, %f506, %f507, %p151;
	and.b32  	%r409, %r407, 2;
	fma.rn.f32 	%f557, %f555, %f551, 0fC09DE9E6;
	fma.rn.f32 	%f558, %f554, %f556, 0f00000000;
	and.b32  	%r424, %r423, 1;
	fma.rn.f32 	%f610, %f608, %f604, 0fC09DE9E6;
	fma.rn.f32 	%f611, %f607, %f609, 0f00000000;
	and.b32  	%r446, %r445, 1;
	selp.f32 	%f247, %f245, %f244, %p45;
	selp.f32 	%f249, %f246, %f248, %p46;
	and.b32  	%r303, %r302, 2;
	setp.eq.f32 	%p48, %f253, %f784;
	mul.f32 	%f254, %f784, 0f00000000;
	selp.f32 	%f301, %f299, %f300, %p65;
	and.b32  	%r318, %r316, 2;
	setp.eq.s32 	%p152, %r409, 0;
	neg.f32 	%f510, %f508;
	add.s32 	%r410, %r407, 1;
	cvt.rzi.f32.f32 	%f515, %f788;
	fma.rn.f32 	%f559, %f557, %f551, 0f3F800000;
	fma.rn.f32 	%f560, %f550, 0f40490FDB, %f558;
	setp.eq.b32 	%p171, %r424, 1;
	fma.rn.f32 	%f612, %f610, %f604, 0f3F800000;
	fma.rn.f32 	%f613, %f603, 0f40490FDB, %f611;
	setp.eq.b32 	%p191, %r446, 1;
	setp.eq.s32 	%p47, %r303, 0;
	sub.f32 	%f251, %f250, %f247;
	selp.f32 	%f255, %f254, %f249, %p48;
	abs.f32 	%f256, %f784;
	setp.eq.s32 	%p66, %r318, 0;
	neg.f32 	%f303, %f301;
	add.s32 	%r319, %r316, 1;
	cvt.rzi.f32.f32 	%f307, %f734;
	selp.f32 	%f509, %f507, %f506, %p151;
	selp.f32 	%f511, %f508, %f510, %p152;
	and.b32  	%r411, %r410, 2;
	setp.eq.f32 	%p154, %f515, %f788;
	mul.f32 	%f516, %f788, 0f00000000;
	selp.f32 	%f561, %f559, %f560, %p171;
	and.b32  	%r425, %r423, 2;
	selp.f32 	%f614, %f612, %f613, %p191;
	and.b32  	%r447, %r445, 2;
	selp.f32 	%f252, %f247, %f251, %p47;
	setp.gt.f32 	%p49, %f256, 0f4B800000;
	add.f32 	%f257, %f255, 0f3F800000;
	selp.f32 	%f302, %f300, %f299, %p65;
	selp.f32 	%f304, %f301, %f303, %p66;
	and.b32  	%r320, %r319, 2;
	setp.eq.f32 	%p68, %f307, %f734;
	mul.f32 	%f308, %f734, 0f00000000;
	setp.eq.s32 	%p153, %r411, 0;
	sub.f32 	%f513, %f512, %f509;
	selp.f32 	%f517, %f516, %f511, %p154;
	abs.f32 	%f518, %f788;
	setp.eq.s32 	%p172, %r425, 0;
	neg.f32 	%f563, %f561;
	add.s32 	%r426, %r423, 1;
	cvt.rzi.f32.f32 	%f568, %f760;
	setp.eq.s32 	%p192, %r447, 0;
	neg.f32 	%f616, %f614;
	add.s32 	%r448, %r445, 1;
	cvt.rzi.f32.f32 	%f620, %f764;
	selp.f32 	%f258, %f257, %f252, %p49;
	setp.eq.s32 	%p67, %r320, 0;
	sub.f32 	%f305, %f250, %f302;
	selp.f32 	%f16, %f308, %f304, %p68;
	abs.f32 	%f309, %f734;
	selp.f32 	%f514, %f509, %f513, %p153;
	setp.gt.f32 	%p155, %f518, 0f4B800000;
	add.f32 	%f519, %f517, 0f3F800000;
	selp.f32 	%f562, %f560, %f559, %p171;
	selp.f32 	%f564, %f561, %f563, %p172;
	and.b32  	%r427, %r426, 2;
	setp.eq.f32 	%p174, %f568, %f760;
	mul.f32 	%f569, %f760, 0f00000000;
	selp.f32 	%f615, %f613, %f612, %p191;
	selp.f32 	%f617, %f614, %f616, %p192;
	and.b32  	%r449, %r448, 2;
	setp.eq.f32 	%p194, %f620, %f764;
	mul.f32 	%f621, %f764, 0f00000000;
	mov.b32 	%r292, %f258;
	mov.b32 	%r295, %f255;
	selp.f32 	%f306, %f302, %f305, %p67;
	setp.gt.f32 	%p69, %f309, 0f4B800000;
	add.f32 	%f310, %f16, 0f3F800000;
	selp.f32 	%f520, %f519, %f514, %p155;
	setp.eq.s32 	%p173, %r427, 0;
	sub.f32 	%f566, %f512, %f562;
	selp.f32 	%f102, %f569, %f564, %p174;
	abs.f32 	%f570, %f760;
	setp.eq.s32 	%p193, %r449, 0;
	sub.f32 	%f618, %f512, %f615;
	selp.f32 	%f622, %f621, %f617, %p194;
	abs.f32 	%f623, %f764;
	xor.b32  	%r291, %r295, -2147483648;
	selp.f32 	%f17, %f310, %f306, %p69;
	mov.b32 	%r400, %f520;
	mov.b32 	%r403, %f517;
	selp.f32 	%f567, %f562, %f566, %p173;
	setp.gt.f32 	%p175, %f570, 0f4B800000;
	add.f32 	%f571, %f102, 0f3F800000;
	selp.f32 	%f619, %f615, %f618, %p193;
	setp.gt.f32 	%p195, %f623, 0f4B800000;
	add.f32 	%f624, %f622, 0f3F800000;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	// begin inline asm
	cvt.rn.f16x2.f32 %r290, %r292, %r291;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r293, %r295, %r292;
	// end inline asm
	mov.b32 	%r343, %f17;
	mov.b32 	%r344, %f37;
	mov.b32 	%r346, %f16;
	mov.b32 	%r347, %f38;
	mov.b32 	%r387, %f83;
	mov.b32 	%r388, %f85;
	mov.b32 	%r390, %f755;
	mov.b32 	%r391, %f757;
	xor.b32  	%r399, %r403, -2147483648;
	selp.f32 	%f103, %f571, %f567, %p175;
	selp.f32 	%f625, %f624, %f619, %p195;
	// begin inline asm
	cvt.rn.f16x2.f32 %r342, %r344, %r343;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r345, %r347, %r346;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r386, %r388, %r387;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r389, %r391, %r390;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r398, %r400, %r399;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r401, %r403, %r400;
	// end inline asm
	mov.b32 	%r438, %f625;
	mov.b32 	%r437, %f103;
	mov.b32 	%r441, %f622;
	mov.b32 	%r440, %f102;
	// begin inline asm
	cvt.rn.f16x2.f32 %r436, %r438, %r437;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r439, %r441, %r440;
	// end inline asm
	mov.b32 	%r483, %f165;
	mov.b32 	%r484, %f167;
	// begin inline asm
	cvt.rn.f16x2.f32 %r482, %r484, %r483;
	// end inline asm
	mov.b32 	%r486, %f779;
	mov.b32 	%r487, %f781;
	// begin inline asm
	cvt.rn.f16x2.f32 %r485, %r487, %r486;
	// end inline asm
	shl.b32 	%r500, %r4, 1;
	and.b32  	%r501, %r500, 2;
	shr.u32 	%r170, %r266, 3;
	bfe.u32 	%r502, %r266, 3, 1;
	or.b32  	%r503, %r501, %r502;
	mul.lo.s32 	%r504, %r143, 24;
	and.b32  	%r505, %r170, 2;
	or.b32  	%r171, %r64, %r505;
	cvt.u16.u32 	%rs23, %r171;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 9;
	mul.lo.s16 	%rs26, %rs25, 3;
	sub.s16 	%rs27, %rs23, %rs26;
	cvt.u32.u16 	%r506, %rs27;
	and.b32  	%r507, %r506, 255;
	and.b16  	%rs28, %rs27, 255;
	mul.wide.u16 	%r508, %rs28, 8;
	add.s32 	%r509, %r504, %r3;
	or.b32  	%r510, %r509, %r503;
	add.s32 	%r511, %r510, %r508;
	mul.wide.u32 	%rd28, %r511, 4;
	add.s64 	%rd29, %rd2, %rd28;
	ld.global.u32 	%r172, [%rd29];
	cvt.u64.u32 	%rd30, %r508;
	cvt.u64.u32 	%rd31, %r503;
	cvt.u64.u32 	%rd32, %r504;
	cvt.u64.u32 	%rd33, %r3;
	add.s64 	%rd34, %rd33, %rd32;
	add.s64 	%rd35, %rd34, %rd31;
	add.s64 	%rd36, %rd35, %rd30;
	shl.b64 	%rd37, %rd36, 2;
	add.s64 	%rd38, %rd2, %rd37;
	ld.global.u32 	%r173, [%rd38+16];
	ld.global.u32 	%r174, [%rd38+384];
	ld.global.u32 	%r175, [%rd38+400];
	shl.b32 	%r512, %r257, 14;
	shl.b32 	%r513, %r261, 5;
	add.s32 	%r176, %r513, %r512;
	shl.b32 	%r177, %r4, 2;
	shl.b32 	%r514, %r2, 5;
	shl.b32 	%r515, %r266, 2;
	and.b32  	%r516, %r515, 28;
	or.b32  	%r178, %r516, %r514;
	and.b32  	%r179, %r266, 4;
	shl.b32 	%r517, %r266, 4;
	and.b32  	%r518, %r156, 8;
	or.b32  	%r519, %r518, %r517;
	bfe.u32 	%r520, %r519, 3, 3;
	mul.lo.s32 	%r180, %r520, 260;
	cvt.u16.u32 	%rs29, %r266;
	and.b16  	%rs30, %rs29, 255;
	mul.lo.s16 	%rs31, %rs30, 171;
	shr.u16 	%rs32, %rs31, 12;
	mul.lo.s16 	%rs33, %rs32, 24;
	sub.s16 	%rs34, %rs29, %rs33;
	cvt.u32.u16 	%r521, %rs34;
	and.b32  	%r181, %r521, 255;
	add.s32 	%r522, %r4, 6;
	add.s32 	%r523, %r5, 192;
	and.b32  	%r524, %r523, 224;
	shr.u32 	%r525, %r522, 3;
	mad.lo.s32 	%r182, %r525, 260, %r524;
	add.s32 	%r526, %r4, 12;
	add.s32 	%r527, %r5, 128;
	and.b32  	%r528, %r527, 224;
	shr.u32 	%r529, %r526, 3;
	mad.lo.s32 	%r183, %r529, 260, %r528;
	add.s32 	%r530, %r4, 18;
	add.s32 	%r531, %r5, 64;
	and.b32  	%r532, %r531, 224;
	shr.u32 	%r533, %r530, 3;
	mad.lo.s32 	%r184, %r533, 260, %r532;
	or.b32  	%r185, %r5, 780;
	add.s32 	%r534, %r4, 30;
	shr.u32 	%r535, %r534, 3;
	mad.lo.s32 	%r186, %r535, 260, %r524;
	add.s32 	%r536, %r4, 36;
	shr.u32 	%r537, %r536, 3;
	mad.lo.s32 	%r187, %r537, 260, %r528;
	add.s32 	%r538, %r4, 42;
	shr.u32 	%r539, %r538, 3;
	mad.lo.s32 	%r188, %r539, 260, %r532;
	or.b32  	%r189, %r5, 1560;
	add.s32 	%r540, %r4, 54;
	shr.u32 	%r541, %r540, 3;
	mad.lo.s32 	%r190, %r541, 260, %r524;
	add.s32 	%r542, %r4, 60;
	bfe.u32 	%r543, %r542, 3, 3;
	mad.lo.s32 	%r191, %r543, 260, %r528;
	mul.lo.s32 	%r544, %r143, 870;
	shr.u32 	%r545, %r4, 1;
	cvt.u16.u32 	%rs35, %r545;
	and.b16  	%rs36, %rs35, 255;
	mul.lo.s16 	%rs37, %rs36, 171;
	shr.u16 	%rs38, %rs37, 9;
	mul.lo.s16 	%rs39, %rs38, 3;
	sub.s16 	%rs40, %rs35, %rs39;
	cvt.u32.u16 	%r546, %rs40;
	and.b32  	%r192, %r546, 255;
	mad.lo.s32 	%r547, %r503, 33, %r544;
	mad.lo.s32 	%r193, %r507, 290, %r547;
	add.s32 	%r194, %r193, 132;
	setp.lt.u32 	%p243, %r266, 4;
	setp.eq.s32 	%p244, %r144, 1;
	setp.eq.s32 	%p245, %r144, 4;
	setp.eq.s32 	%p246, %r144, 5;
	shr.u32 	%r548, %r4, 2;
	mul.lo.s32 	%r549, %r548, 98;
	and.b32  	%r550, %r4, 1;
	neg.s32 	%r551, %r550;
	and.b32  	%r552, %r551, 392;
	and.b32  	%r553, %r156, 6;
	bfe.s32 	%r554, %r4, 1, 1;
	and.b32  	%r555, %r554, 196;
	bfe.s32 	%r556, %r266, 3, 1;
	and.b32  	%r557, %r556, 1576;
	mad.lo.s32 	%r558, %r66, 784, %r549;
	add.s32 	%r559, %r558, %r553;
	or.b32  	%r560, %r559, %r64;
	add.s32 	%r561, %r560, %r552;
	add.s32 	%r562, %r561, %r555;
	add.s32 	%r195, %r562, %r557;
	add.s32 	%r196, %r195, 8;
	mul.lo.s32 	%r563, %r259, 786432;
	mad.lo.s32 	%r564, %r263, 192, %r563;
	and.b32  	%r197, %r266, 7;
	or.b32  	%r565, %r170, %r177;
	cvt.u16.u32 	%rs41, %r565;
	and.b16  	%rs42, %rs41, 255;
	mul.lo.s16 	%rs43, %rs42, 171;
	shr.u16 	%rs44, %rs43, 9;
	and.b16  	%rs45, %rs44, 24;
	add.s16 	%rs46, %rs41, %rs45;
	shl.b16 	%rs47, %rs46, 3;
	cvt.u32.u16 	%r566, %rs47;
	and.b32  	%r198, %r566, 248;
	cvt.s64.s32 	%rd7, %r564;
	add.s32 	%r567, %r193, %r192;
	mul.wide.u32 	%rd39, %r567, 4;
	mov.u64 	%rd40, shmem;
	add.s64 	%rd8, %rd40, %rd39;
	add.s32 	%r568, %r194, %r192;
	mul.wide.u32 	%rd41, %r568, 4;
	add.s64 	%rd9, %rd40, %rd41;
	cvt.u64.u32 	%rd42, %r193;
	cvt.u64.u16 	%rd43, %rs40;
	and.b64  	%rd44, %rd43, 255;
	add.s64 	%rd45, %rd42, %rd44;
	shl.b64 	%rd46, %rd45, 2;
	add.s64 	%rd10, %rd40, %rd46;
	cvt.u64.u32 	%rd47, %r194;
	add.s64 	%rd48, %rd47, %rd44;
	shl.b64 	%rd49, %rd48, 2;
	add.s64 	%rd11, %rd40, %rd49;
	or.pred  	%p247, %p243, %p244;
	and.b32  	%r569, %r266, 24;
	setp.eq.s32 	%p248, %r569, 8;
	or.pred  	%p249, %p247, %p248;
	or.pred  	%p250, %p249, %p245;
	setp.eq.s32 	%p251, %r569, 24;
	or.pred  	%p252, %p246, %p251;
	selp.b32 	%r199, 1145324612, -286331154, %p249;
	or.pred  	%p1, %p250, %p252;
	selp.b32 	%r200, 1145324612, -286331154, %p247;
	add.s32 	%r570, %r144, -1;
	setp.lt.u32 	%p253, %r570, 3;
	or.pred  	%p2, %p243, %p253;
	setp.eq.s32 	%p254, %r569, 16;
	or.pred  	%p3, %p254, %p251;
	selp.b32 	%r201, 1145324612, -286331154, %p254;
	mov.u32 	%r88, 0;
	mov.u16 	%rs2, 0;
	mov.u16 	%rs1, 29;
	selp.b32 	%r251, %r200, %r201, %p2;
	or.pred  	%p285, %p2, %p3;
	mov.u32 	%r108, %r88;
	mov.u32 	%r109, %r88;
	mov.u32 	%r110, %r88;
	bra.uni 	$L__BB0_197;
$L__BB0_168:                            // %L23388
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r142, %r88, 48;
	add.s16 	%rs2, %rs2, 48;
	add.s16 	%rs1, %rs1, 48;
	setp.ne.s32 	%p300, %r88, 8112;
	mov.u32 	%r88, %r142;
	@%p300 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_169;
$L__BB0_197:                            // %L1929
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_162 Depth 2
                                        //     Child Loop BB0_166 Depth 2
	add.s32 	%r571, %r88, %r257;
	setp.lt.s32 	%p255, %r571, %r258;
	@%p255 bra 	$L__BB0_198;
	bra.uni 	$L__BB0_169;
$L__BB0_198:                            // %oksrem863
                                        //   in Loop: Header=BB0_197 Depth=1
	setp.eq.s32 	%p256, %r179, 0;
	mul.hi.u32 	%r668, %r88, -1431655765;
	shr.u32 	%r669, %r668, 5;
	mul.lo.s32 	%r202, %r669, 48;
	add.s32 	%r670, %r202, %r177;
	or.b32  	%r671, %r670, %r170;
	shr.s32 	%r672, %r670, 31;
	shr.u32 	%r673, %r672, 19;
	add.s32 	%r674, %r671, %r673;
	and.b32  	%r675, %r674, 253952;
	sub.s32 	%r676, %r671, %r675;
	shl.b32 	%r677, %r676, 14;
	or.b32  	%r678, %r178, %r677;
	add.s32 	%r679, %r176, %r678;
	shr.s32 	%r680, %r679, 31;
	shr.u32 	%r681, %r680, 5;
	add.s32 	%r682, %r679, %r681;
	shr.s32 	%r683, %r682, 27;
	setp.lt.s32 	%p257, %r679, 0;
	and.b32  	%r684, %r682, -134217728;
	setp.ne.s32 	%p258, %r684, %r679;
	and.pred  	%p259, %p257, %p258;
	selp.u32 	%r685, 1, 0, %p259;
	sub.s32 	%r686, %r685, %r683;
	shl.b32 	%r687, %r686, 27;
	add.s32 	%r688, %r687, %r679;
	mul.wide.s32 	%rd50, %r688, 4;
	add.s64 	%rd51, %rd3, %rd50;
	ld.global.v4.u32 	{%r689, %r690, %r691, %r692}, [%rd51];
	add.s32 	%r693, %r670, 24;
	or.b32  	%r694, %r693, %r170;
	shr.s32 	%r695, %r693, 31;
	shr.u32 	%r696, %r695, 19;
	add.s32 	%r697, %r694, %r696;
	and.b32  	%r698, %r697, 253952;
	sub.s32 	%r699, %r694, %r698;
	shl.b32 	%r700, %r699, 14;
	or.b32  	%r701, %r178, %r700;
	add.s32 	%r702, %r176, %r701;
	shr.s32 	%r703, %r702, 31;
	shr.u32 	%r704, %r703, 5;
	add.s32 	%r705, %r702, %r704;
	shr.s32 	%r706, %r705, 27;
	setp.lt.s32 	%p260, %r702, 0;
	and.b32  	%r707, %r705, -134217728;
	setp.ne.s32 	%p261, %r707, %r702;
	and.pred  	%p262, %p260, %p261;
	selp.u32 	%r708, 1, 0, %p262;
	sub.s32 	%r709, %r708, %r706;
	shl.b32 	%r710, %r709, 27;
	add.s32 	%r711, %r710, %r702;
	mul.wide.s32 	%rd52, %r711, 4;
	add.s64 	%rd53, %rd3, %rd52;
	ld.global.v4.u32 	{%r712, %r713, %r714, %r715}, [%rd53];
	selp.b32 	%r716, %r691, %r689, %p256;
	shfl.sync.bfly.b32	%r717, %r716, 4, 31, -1;
	selp.b32 	%r574, %r689, %r717, %p256;
	selp.b32 	%r579, %r717, %r691, %p256;
	selp.b32 	%r718, %r692, %r690, %p256;
	shfl.sync.bfly.b32	%r719, %r718, 4, 31, -1;
	selp.b32 	%r582, %r690, %r719, %p256;
	selp.b32 	%r587, %r719, %r692, %p256;
	selp.b32 	%r720, %r714, %r712, %p256;
	shfl.sync.bfly.b32	%r721, %r720, 4, 31, -1;
	selp.b32 	%r590, %r712, %r721, %p256;
	selp.b32 	%r595, %r721, %r714, %p256;
	selp.b32 	%r722, %r715, %r713, %p256;
	shfl.sync.bfly.b32	%r723, %r722, 4, 31, -1;
	selp.b32 	%r598, %r713, %r723, %p256;
	selp.b32 	%r603, %r723, %r715, %p256;
	shl.b32 	%r575, %r579, 4;
	mov.u32 	%r573, 252645135;
	// begin inline asm
	lop3.b32 %r605, %r573, %r574, %r575, 202;
	// end inline asm
	shr.u32 	%r578, %r574, 4;
	// begin inline asm
	lop3.b32 %r621, %r573, %r578, %r579, 202;
	// end inline asm
	shl.b32 	%r583, %r587, 4;
	// begin inline asm
	lop3.b32 %r613, %r573, %r582, %r583, 202;
	// end inline asm
	shr.u32 	%r586, %r582, 4;
	// begin inline asm
	lop3.b32 %r629, %r573, %r586, %r587, 202;
	// end inline asm
	shl.b32 	%r591, %r595, 4;
	// begin inline asm
	lop3.b32 %r606, %r573, %r590, %r591, 202;
	// end inline asm
	shr.u32 	%r594, %r590, 4;
	// begin inline asm
	lop3.b32 %r622, %r573, %r594, %r595, 202;
	// end inline asm
	shl.b32 	%r599, %r603, 4;
	// begin inline asm
	lop3.b32 %r614, %r573, %r598, %r599, 202;
	// end inline asm
	shr.u32 	%r602, %r598, 4;
	// begin inline asm
	lop3.b32 %r630, %r573, %r602, %r603, 202;
	// end inline asm
	mov.u32 	%r607, 25152;
	// begin inline asm
	prmt.b32 %r637, %r605, %r606, %r607;
	// end inline asm
	mov.u32 	%r611, 29521;
	// begin inline asm
	prmt.b32 %r653, %r605, %r606, %r611;
	// end inline asm
	// begin inline asm
	prmt.b32 %r645, %r613, %r614, %r607;
	// end inline asm
	// begin inline asm
	prmt.b32 %r661, %r613, %r614, %r611;
	// end inline asm
	// begin inline asm
	prmt.b32 %r638, %r621, %r622, %r607;
	// end inline asm
	// begin inline asm
	prmt.b32 %r654, %r621, %r622, %r611;
	// end inline asm
	// begin inline asm
	prmt.b32 %r646, %r629, %r630, %r607;
	// end inline asm
	// begin inline asm
	prmt.b32 %r662, %r629, %r630, %r611;
	// end inline asm
	mov.u32 	%r639, 21520;
	// begin inline asm
	prmt.b32 %r636, %r637, %r638, %r639;
	// end inline asm
	mov.u32 	%r643, 30258;
	// begin inline asm
	prmt.b32 %r640, %r637, %r638, %r643;
	// end inline asm
	// begin inline asm
	prmt.b32 %r644, %r645, %r646, %r639;
	// end inline asm
	// begin inline asm
	prmt.b32 %r648, %r645, %r646, %r643;
	// end inline asm
	// begin inline asm
	prmt.b32 %r652, %r653, %r654, %r639;
	// end inline asm
	// begin inline asm
	prmt.b32 %r656, %r653, %r654, %r643;
	// end inline asm
	// begin inline asm
	prmt.b32 %r660, %r661, %r662, %r639;
	// end inline asm
	// begin inline asm
	prmt.b32 %r664, %r661, %r662, %r643;
	// end inline asm
	mul.hi.s32 	%r724, %r671, 715827883;
	shr.u32 	%r725, %r724, 31;
	shr.s32 	%r726, %r724, 2;
	add.s32 	%r727, %r726, %r725;
	mul.lo.s32 	%r728, %r727, 24;
	sub.s32 	%r729, %r671, %r728;
	add.s32 	%r730, %r729, %r180;
	mul.wide.s32 	%rd54, %r730, 4;
	add.s64 	%rd56, %rd40, %rd54;
	st.shared.u32 	[%rd56], %r636;
	add.s32 	%r731, %r730, 128;
	mul.wide.u32 	%rd57, %r731, 4;
	add.s64 	%rd58, %rd40, %rd57;
	st.shared.u32 	[%rd58], %r644;
	add.s32 	%r732, %r730, 64;
	mul.wide.u32 	%rd59, %r732, 4;
	add.s64 	%rd60, %rd40, %rd59;
	st.shared.u32 	[%rd60], %r640;
	add.s32 	%r733, %r730, 192;
	mul.wide.u32 	%rd61, %r733, 4;
	add.s64 	%rd62, %rd40, %rd61;
	st.shared.u32 	[%rd62], %r648;
	add.s32 	%r734, %r730, 32;
	mul.wide.u32 	%rd63, %r734, 4;
	add.s64 	%rd64, %rd40, %rd63;
	st.shared.u32 	[%rd64], %r652;
	add.s32 	%r735, %r730, 160;
	mul.wide.u32 	%rd65, %r735, 4;
	add.s64 	%rd66, %rd40, %rd65;
	st.shared.u32 	[%rd66], %r660;
	add.s32 	%r736, %r730, 96;
	mul.wide.u32 	%rd67, %r736, 4;
	add.s64 	%rd68, %rd40, %rd67;
	st.shared.u32 	[%rd68], %r656;
	add.s32 	%r737, %r730, 224;
	mul.wide.u32 	%rd69, %r737, 4;
	add.s64 	%rd70, %rd40, %rd69;
	st.shared.u32 	[%rd70], %r664;
	bar.sync 	0;
	add.s32 	%r738, %r202, %r181;
	cvt.u16.u32 	%rs48, %r738;
	mul.hi.s16 	%rs49, %rs48, 10923;
	shr.u16 	%rs50, %rs49, 15;
	shr.s16 	%rs51, %rs49, 2;
	add.s16 	%rs52, %rs51, %rs50;
	mul.lo.s16 	%rs53, %rs52, 24;
	sub.s16 	%rs54, %rs48, %rs53;
	cvt.s32.s16 	%r203, %rs54;
	add.s32 	%r739, %r5, %r203;
	mul.wide.s32 	%rd71, %r739, 4;
	add.s64 	%rd72, %rd40, %rd71;
	ld.shared.u32 	%r204, [%rd72];
	add.s32 	%r740, %r182, %r203;
	mul.wide.s32 	%rd73, %r740, 4;
	add.s64 	%rd74, %rd40, %rd73;
	ld.shared.u32 	%r205, [%rd74];
	add.s32 	%r741, %r183, %r203;
	mul.wide.u32 	%rd75, %r741, 4;
	add.s64 	%rd76, %rd40, %rd75;
	ld.shared.u32 	%r206, [%rd76];
	add.s32 	%r742, %r184, %r203;
	mul.wide.u32 	%rd77, %r742, 4;
	add.s64 	%rd78, %rd40, %rd77;
	ld.shared.u32 	%r207, [%rd78];
	add.s32 	%r743, %r185, %r203;
	mul.wide.u32 	%rd79, %r743, 4;
	add.s64 	%rd80, %rd40, %rd79;
	ld.shared.u32 	%r208, [%rd80];
	add.s32 	%r744, %r186, %r203;
	mul.wide.u32 	%rd81, %r744, 4;
	add.s64 	%rd82, %rd40, %rd81;
	ld.shared.u32 	%r209, [%rd82];
	add.s32 	%r745, %r187, %r203;
	mul.wide.u32 	%rd83, %r745, 4;
	add.s64 	%rd84, %rd40, %rd83;
	ld.shared.u32 	%r210, [%rd84];
	add.s32 	%r746, %r188, %r203;
	mul.wide.u32 	%rd85, %r746, 4;
	add.s64 	%rd86, %rd40, %rd85;
	ld.shared.u32 	%r211, [%rd86];
	add.s32 	%r747, %r189, %r203;
	mul.wide.u32 	%rd87, %r747, 4;
	add.s64 	%rd88, %rd40, %rd87;
	ld.shared.u32 	%r212, [%rd88];
	add.s32 	%r748, %r190, %r203;
	mul.wide.u32 	%rd89, %r748, 4;
	add.s64 	%rd90, %rd40, %rd89;
	ld.shared.u32 	%r213, [%rd90];
	add.s32 	%r749, %r191, %r203;
	mul.wide.s32 	%rd91, %r749, 4;
	add.s64 	%rd92, %rd40, %rd91;
	ld.shared.u32 	%r214, [%rd92];
	bar.sync 	0;
	shfl.sync.idx.b32	%r215, %r169, 0, 31, -1;
	shfl.sync.idx.b32	%r216, %r169, 1, 31, -1;
	shfl.sync.idx.b32	%r217, %r169, 2, 31, -1;
	shfl.sync.idx.b32	%r218, %r169, 3, 31, -1;
	shfl.sync.idx.b32	%r219, %r169, 4, 31, -1;
	shfl.sync.idx.b32	%r220, %r169, 5, 31, -1;
	shfl.sync.idx.b32	%r221, %r169, 6, 31, -1;
	shfl.sync.idx.b32	%r222, %r169, 7, 31, -1;
	shfl.sync.idx.b32	%r223, %r169, 8, 31, -1;
	shfl.sync.idx.b32	%r224, %r169, 9, 31, -1;
	shfl.sync.idx.b32	%r225, %r169, 10, 31, -1;
	shfl.sync.idx.b32	%r226, %r169, 11, 31, -1;
	shfl.sync.idx.b32	%r227, %r169, 12, 31, -1;
	shfl.sync.idx.b32	%r228, %r169, 13, 31, -1;
	shfl.sync.idx.b32	%r229, %r169, 14, 31, -1;
	shfl.sync.idx.b32	%r230, %r169, 15, 31, -1;
	setp.eq.s32 	%p263, %r215, 999999999;
	@%p263 bra 	$L__BB0_145;
// %bb.199:                             // %oksrem2312
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r750, %r215, %r203;
	mul.wide.s32 	%rd93, %r750, 4;
	add.s64 	%rd95, %rd40, %rd93;
	st.shared.u32 	[%rd95], %r204;
	setp.eq.s32 	%p264, %r216, 999999999;
	@%p264 bra 	$L__BB0_146;
// %bb.200:                             // %oksrem2380
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r751, %r216, %r203;
	mul.wide.s32 	%rd96, %r751, 4;
	add.s64 	%rd98, %rd40, %rd96;
	st.shared.u32 	[%rd98], %r205;
	setp.eq.s32 	%p265, %r217, 999999999;
	@%p265 bra 	$L__BB0_147;
// %bb.201:                             // %oksrem2448
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r752, %r217, %r203;
	mul.wide.s32 	%rd99, %r752, 4;
	add.s64 	%rd101, %rd40, %rd99;
	st.shared.u32 	[%rd101], %r206;
	setp.eq.s32 	%p266, %r218, 999999999;
	@%p266 bra 	$L__BB0_148;
// %bb.202:                             // %oksrem2516
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r753, %r218, %r203;
	mul.wide.s32 	%rd102, %r753, 4;
	add.s64 	%rd104, %rd40, %rd102;
	st.shared.u32 	[%rd104], %r207;
	setp.eq.s32 	%p267, %r219, 999999999;
	@%p267 bra 	$L__BB0_149;
// %bb.203:                             // %oksrem2584
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r754, %r219, %r203;
	mul.wide.s32 	%rd105, %r754, 4;
	add.s64 	%rd107, %rd40, %rd105;
	st.shared.u32 	[%rd107], %r208;
	setp.eq.s32 	%p268, %r220, 999999999;
	@%p268 bra 	$L__BB0_150;
// %bb.204:                             // %oksrem2652
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r755, %r220, %r203;
	mul.wide.s32 	%rd108, %r755, 4;
	add.s64 	%rd110, %rd40, %rd108;
	st.shared.u32 	[%rd110], %r209;
	setp.eq.s32 	%p269, %r221, 999999999;
	@%p269 bra 	$L__BB0_151;
// %bb.205:                             // %oksrem2720
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r756, %r221, %r203;
	mul.wide.s32 	%rd111, %r756, 4;
	add.s64 	%rd113, %rd40, %rd111;
	st.shared.u32 	[%rd113], %r210;
	setp.eq.s32 	%p270, %r222, 999999999;
	@%p270 bra 	$L__BB0_152;
// %bb.206:                             // %oksrem2788
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r757, %r222, %r203;
	mul.wide.s32 	%rd114, %r757, 4;
	add.s64 	%rd116, %rd40, %rd114;
	st.shared.u32 	[%rd116], %r211;
	setp.eq.s32 	%p271, %r223, 999999999;
	@%p271 bra 	$L__BB0_153;
// %bb.207:                             // %oksrem2856
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r758, %r223, %r203;
	mul.wide.s32 	%rd117, %r758, 4;
	add.s64 	%rd119, %rd40, %rd117;
	st.shared.u32 	[%rd119], %r212;
	setp.eq.s32 	%p272, %r224, 999999999;
	@%p272 bra 	$L__BB0_154;
// %bb.208:                             // %oksrem2924
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r759, %r224, %r203;
	mul.wide.s32 	%rd120, %r759, 4;
	add.s64 	%rd122, %rd40, %rd120;
	st.shared.u32 	[%rd122], %r213;
	setp.eq.s32 	%p273, %r225, 999999999;
	@%p273 bra 	$L__BB0_155;
// %bb.209:                             // %oksrem2993
                                        //   in Loop: Header=BB0_197 Depth=1
	setp.gt.u32 	%p274, %r4, 3;
	selp.b32 	%r760, 0, %r214, %p274;
	add.s32 	%r761, %r225, %r203;
	mul.wide.s32 	%rd123, %r761, 4;
	add.s64 	%rd125, %rd40, %rd123;
	st.shared.u32 	[%rd125], %r760;
	setp.eq.s32 	%p275, %r226, 999999999;
	@%p275 bra 	$L__BB0_156;
// %bb.210:                             // %oksrem3061
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r762, %r226, %r203;
	mul.wide.s32 	%rd126, %r762, 4;
	add.s64 	%rd128, %rd40, %rd126;
	mov.u32 	%r763, 0;
	st.shared.u32 	[%rd128], %r763;
	setp.eq.s32 	%p276, %r227, 999999999;
	@%p276 bra 	$L__BB0_157;
// %bb.211:                             // %oksrem3128
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r764, %r227, %r203;
	mul.wide.s32 	%rd129, %r764, 4;
	add.s64 	%rd131, %rd40, %rd129;
	st.shared.u32 	[%rd131], %r763;
	setp.eq.s32 	%p277, %r228, 999999999;
	@%p277 bra 	$L__BB0_158;
// %bb.212:                             // %oksrem3195
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r766, %r228, %r203;
	mul.wide.s32 	%rd132, %r766, 4;
	add.s64 	%rd134, %rd40, %rd132;
	st.shared.u32 	[%rd134], %r763;
	setp.eq.s32 	%p278, %r229, 999999999;
	@%p278 bra 	$L__BB0_159;
// %bb.213:                             // %oksrem3262
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r768, %r229, %r203;
	mul.wide.s32 	%rd135, %r768, 4;
	add.s64 	%rd137, %rd40, %rd135;
	st.shared.u32 	[%rd137], %r763;
	setp.eq.s32 	%p279, %r230, 999999999;
	@%p279 bra 	$L__BB0_160;
// %bb.214:                             // %oksrem3329
                                        //   in Loop: Header=BB0_197 Depth=1
	setp.eq.s32 	%p280, %r171, 3;
	add.s32 	%r771, %r230, %r203;
	mul.wide.s32 	%rd138, %r771, 4;
	add.s64 	%rd140, %rd40, %rd138;
	st.shared.u32 	[%rd140], %r763;
	bar.sync 	0;
	mov.u32 	%r92, %r763;
	mov.u32 	%r93, %r763;
	mov.u32 	%r94, %r763;
	mov.u32 	%r95, %r763;
	mov.u32 	%r96, %r763;
	mov.u32 	%r97, %r763;
	mov.u32 	%r98, %r763;
	mov.u32 	%r99, %r763;
	mov.u32 	%r100, %r763;
	mov.u32 	%r101, %r763;
	mov.u32 	%r102, %r763;
	mov.u32 	%r103, %r763;
	mov.u32 	%r104, %r763;
	mov.u32 	%r105, %r763;
	mov.u32 	%r106, %r763;
	mov.u32 	%r107, %r763;
	@%p280 bra 	$L__BB0_161;
// %bb.215:                             // %oksrem3398
                                        //   in Loop: Header=BB0_197 Depth=1
	add.s32 	%r772, %r202, %r192;
	ld.shared.u32 	%r92, [%rd8];
	ld.shared.u32 	%r93, [%rd9];
	ld.shared.u32 	%r94, [%rd10+12];
	ld.shared.u32 	%r95, [%rd11+12];
	ld.shared.u32 	%r96, [%rd10+24];
	ld.shared.u32 	%r97, [%rd11+24];
	ld.shared.u32 	%r98, [%rd10+36];
	ld.shared.u32 	%r99, [%rd11+36];
	add.s32 	%r773, %r772, 12;
	mul.hi.u32 	%r774, %r773, -1431655765;
	shr.u32 	%r775, %r774, 4;
	mul.lo.s32 	%r776, %r775, 24;
	sub.s32 	%r777, %r773, %r776;
	add.s32 	%r778, %r193, %r777;
	mul.wide.u32 	%rd141, %r778, 4;
	add.s64 	%rd143, %rd40, %rd141;
	ld.shared.u32 	%r100, [%rd143];
	add.s32 	%r779, %r194, %r777;
	mul.wide.u32 	%rd144, %r779, 4;
	add.s64 	%rd145, %rd40, %rd144;
	ld.shared.u32 	%r101, [%rd145];
	ld.shared.u32 	%r102, [%rd10+60];
	ld.shared.u32 	%r103, [%rd11+60];
	cvt.u16.u32 	%rs55, %r772;
	add.s16 	%rs56, %rs55, 18;
	mul.hi.s16 	%rs57, %rs56, 10923;
	shr.u16 	%rs58, %rs57, 15;
	shr.s16 	%rs59, %rs57, 2;
	add.s16 	%rs60, %rs59, %rs58;
	mul.lo.s16 	%rs61, %rs60, 24;
	sub.s16 	%rs62, %rs56, %rs61;
	cvt.s32.s16 	%r780, %rs62;
	add.s32 	%r781, %r193, %r780;
	mul.wide.s32 	%rd146, %r781, 4;
	add.s64 	%rd147, %rd40, %rd146;
	ld.shared.u32 	%r104, [%rd147];
	add.s32 	%r782, %r194, %r780;
	mul.wide.u32 	%rd148, %r782, 4;
	add.s64 	%rd149, %rd40, %rd148;
	ld.shared.u32 	%r105, [%rd149];
	add.s16 	%rs63, %rs55, 21;
	mul.hi.s16 	%rs64, %rs63, 10923;
	shr.u16 	%rs65, %rs64, 15;
	shr.s16 	%rs66, %rs64, 2;
	add.s16 	%rs67, %rs66, %rs65;
	mul.lo.s16 	%rs68, %rs67, 24;
	sub.s16 	%rs69, %rs63, %rs68;
	cvt.s32.s16 	%r783, %rs69;
	add.s32 	%r784, %r193, %r783;
	mul.wide.s32 	%rd150, %r784, 4;
	add.s64 	%rd151, %rd40, %rd150;
	ld.shared.u32 	%r106, [%rd151];
	add.s32 	%r785, %r194, %r783;
	mul.wide.u32 	%rd152, %r785, 4;
	add.s64 	%rd153, %rd40, %rd152;
	ld.shared.u32 	%r107, [%rd153];
$L__BB0_161:                            // %L10559
                                        //   in Loop: Header=BB0_197 Depth=1
	bar.sync 	0;
	mov.u16 	%rs3, %rs2;
	mov.u32 	%r111, %r763;
	bra.uni 	$L__BB0_162;
$L__BB0_164:                            // %L16964
                                        //   in Loop: Header=BB0_162 Depth=2
	bar.sync 	0;
	add.s32 	%r111, %r111, 6;
	add.s16 	%rs3, %rs3, 6;
	setp.ne.s32 	%p290, %r111, 24;
	@%p290 bra 	$L__BB0_162;
	bra.uni 	$L__BB0_165;
$L__BB0_162:                            // %L10577
                                        //   Parent Loop BB0_197 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p281, %r111, 0;
	selp.b32 	%r1179, %r92, 0, %p281;
	setp.eq.s32 	%p282, %r111, 6;
	selp.b32 	%r1180, %r96, %r1179, %p282;
	setp.eq.s32 	%p283, %r111, 12;
	selp.b32 	%r1181, %r100, %r1180, %p283;
	setp.eq.s32 	%p284, %r111, 18;
	selp.b32 	%r1182, %r104, %r1181, %p284;
	selp.b32 	%r1183, %r93, 0, %p281;
	selp.b32 	%r1184, %r97, %r1183, %p282;
	selp.b32 	%r1185, %r101, %r1184, %p283;
	selp.b32 	%r1186, %r105, %r1185, %p284;
	selp.b32 	%r1187, %r94, 0, %p281;
	selp.b32 	%r1188, %r98, %r1187, %p282;
	selp.b32 	%r1189, %r102, %r1188, %p283;
	selp.b32 	%r1190, %r106, %r1189, %p284;
	selp.b32 	%r1191, %r95, 0, %p281;
	selp.b32 	%r1192, %r99, %r1191, %p282;
	selp.b32 	%r1193, %r103, %r1192, %p283;
	selp.b32 	%r1194, %r107, %r1193, %p284;
	mov.u16 	%rs107, 25600;
	// begin inline asm
	mov.b32 %r792, {%rs107, %rs107};
	// end inline asm
	mov.u16 	%rs109, 21504;
	// begin inline asm
	mov.b32 %r803, {%rs109, %rs109};
	// end inline asm
	xor.b32  	%r791, %r1182, -2004318072;
	mov.u32 	%r928, 983055;
	// begin inline asm
	lop3.b32 %r789, %r928, %r791, %r792, 202;
	// end inline asm
	mov.u16 	%rs113, 18432;
	// begin inline asm
	mov.b32 %r793, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r794, %r792, %r793;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r797, %r789, %r794;
	// end inline asm
	mov.u32 	%r939, 15728880;
	// begin inline asm
	lop3.b32 %r800, %r939, %r791, %r803, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r804, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r805, %r803, %r804;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r808, %r800, %r805;
	// end inline asm
	// begin inline asm
	mov.b32 %r838, {%rs107, %rs107};
	// end inline asm
	// begin inline asm
	mov.b32 %r849, {%rs109, %rs109};
	// end inline asm
	xor.b32  	%r837, %r1186, -2004318072;
	// begin inline asm
	lop3.b32 %r835, %r928, %r837, %r838, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r839, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r840, %r838, %r839;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r843, %r835, %r840;
	// end inline asm
	// begin inline asm
	lop3.b32 %r846, %r939, %r837, %r849, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r850, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r851, %r849, %r850;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r854, %r846, %r851;
	// end inline asm
	// begin inline asm
	mov.b32 %r884, {%rs107, %rs107};
	// end inline asm
	// begin inline asm
	mov.b32 %r895, {%rs109, %rs109};
	// end inline asm
	xor.b32  	%r883, %r1190, -2004318072;
	// begin inline asm
	lop3.b32 %r881, %r928, %r883, %r884, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r885, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r886, %r884, %r885;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r889, %r881, %r886;
	// end inline asm
	// begin inline asm
	lop3.b32 %r892, %r939, %r883, %r895, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r896, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r897, %r895, %r896;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r900, %r892, %r897;
	// end inline asm
	// begin inline asm
	mov.b32 %r930, {%rs107, %rs107};
	// end inline asm
	// begin inline asm
	mov.b32 %r941, {%rs109, %rs109};
	// end inline asm
	xor.b32  	%r929, %r1194, -2004318072;
	// begin inline asm
	lop3.b32 %r927, %r928, %r929, %r930, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r931, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r932, %r930, %r931;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r935, %r927, %r932;
	// end inline asm
	// begin inline asm
	lop3.b32 %r938, %r939, %r929, %r941, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r942, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r943, %r941, %r942;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r946, %r938, %r943;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r797;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r971, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r843;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r974, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r174;
    mov.b32 {%r2re, %r2im}, %r808;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r977, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r175;
    mov.b32 {%r2re, %r2im}, %r854;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r980, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r889;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r983, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r935;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r986, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r174;
    mov.b32 {%r2re, %r2im}, %r900;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r989, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r175;
    mov.b32 {%r2re, %r2im}, %r946;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r992, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r995, %r996}, {%r290, %r293}, {%r971}, {%r763, %r763};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1002, %r1003}, {%r290, %r293}, {%r974}, {%r763, %r763};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1009, %r1010}, {%r290, %r293}, {%r977}, {%r763, %r763};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1016, %r1017}, {%r290, %r293}, {%r980}, {%r763, %r763};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1023, %r1024}, {%r290, %r293}, {%r983}, {%r763, %r763};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1030, %r1031}, {%r290, %r293}, {%r986}, {%r763, %r763};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1037, %r1038}, {%r290, %r293}, {%r989}, {%r763, %r763};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1044, %r1045}, {%r290, %r293}, {%r992}, {%r763, %r763};
	// end inline asm
	@%p1 bra 	$L__BB0_216;
	bra.uni 	$L__BB0_163;
$L__BB0_216:                            // %pass4747
                                        //   in Loop: Header=BB0_162 Depth=2
	// begin inline asm
	neg.f16x2 %r1051, %r345;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1053, %r1051, %r996;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1056, %r342, %r995, %r1053;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1060, %r345;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1062, %r1060, %r1003;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1065, %r342, %r1002, %r1062;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1069, %r345;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1071, %r1069, %r1010;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1074, %r342, %r1009, %r1071;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1078, %r345;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1080, %r1078, %r1017;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1083, %r342, %r1016, %r1080;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1087, %r345;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1089, %r1087, %r1024;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1092, %r342, %r1023, %r1089;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1096, %r345;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1098, %r1096, %r1031;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1101, %r342, %r1030, %r1098;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1105, %r345;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1107, %r1105, %r1038;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1110, %r342, %r1037, %r1107;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1114, %r345;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1116, %r1114, %r1045;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1119, %r342, %r1044, %r1116;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1123, %r345, %r995;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1126, %r342, %r996, %r1123;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1130, %r345, %r1002;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1133, %r342, %r1003, %r1130;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1137, %r345, %r1009;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1140, %r342, %r1010, %r1137;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1144, %r345, %r1016;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1147, %r342, %r1017, %r1144;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1151, %r345, %r1023;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1154, %r342, %r1024, %r1151;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1158, %r345, %r1030;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1161, %r342, %r1031, %r1158;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1165, %r345, %r1037;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1168, %r342, %r1038, %r1165;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1172, %r345, %r1044;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1175, %r342, %r1045, %r1172;
	// end inline asm
	mov.u32 	%r1344, 0;
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1195, %r1196}, {%r386, %r389}, {%r1056, %r1126}, {%r1344, %r1344}, %r199, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1204, %r1205}, {%r386, %r389}, {%r1065, %r1133}, {%r1344, %r1344}, %r199, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1213, %r1214}, {%r386, %r389}, {%r1074, %r1140}, {%r1344, %r1344}, %r199, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1222, %r1223}, {%r386, %r389}, {%r1083, %r1147}, {%r1344, %r1344}, %r199, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1231, %r1232}, {%r386, %r389}, {%r1092, %r1154}, {%r1344, %r1344}, %r199, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1240, %r1241}, {%r386, %r389}, {%r1101, %r1161}, {%r1344, %r1344}, %r199, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1249, %r1250}, {%r386, %r389}, {%r1110, %r1168}, {%r1344, %r1344}, %r199, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1258, %r1259}, {%r386, %r389}, {%r1119, %r1175}, {%r1344, %r1344}, %r199, 0;
	// end inline asm
	bar.sync 	0;
	mul.hi.s16 	%rs118, %rs3, 10923;
	shr.u16 	%rs119, %rs118, 15;
	add.s16 	%rs120, %rs118, %rs119;
	mul.lo.s16 	%rs121, %rs120, 6;
	sub.s16 	%rs122, %rs3, %rs121;
	mul.wide.s16 	%r1377, %rs122, 16;
	add.s32 	%r1378, %r195, %r1377;
	mul.wide.s32 	%rd156, %r1378, 4;
	add.s64 	%rd158, %rd40, %rd156;
	ld.shared.u32 	%r1335, [%rd158];
	add.s32 	%r1379, %r196, %r1377;
	mul.wide.s32 	%rd159, %r1379, 4;
	add.s64 	%rd160, %rd40, %rd159;
	ld.shared.u32 	%r1342, [%rd160];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1331, %r1332}, {%r398, %r401}, {%r1335}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1338, %r1339}, {%r398, %r401}, {%r1342}, {%r1344, %r1344};
	// end inline asm
	@%p285 bra 	$L__BB0_218;
	bra.uni 	$L__BB0_217;
$L__BB0_218:                            // %pass5243
                                        //   in Loop: Header=BB0_162 Depth=2
	// begin inline asm
	neg.f16x2 %r1345, %r439;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1347, %r1345, %r1332;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1350, %r436, %r1331, %r1347;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1354, %r439;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1356, %r1354, %r1339;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1359, %r436, %r1338, %r1356;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1363, %r439, %r1331;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1366, %r436, %r1332, %r1363;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1370, %r439, %r1338;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1373, %r436, %r1339, %r1370;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1399, %r1402}, {%r482, %r485}, {%r1350, %r1366}, {%r1344, %r1344}, %r251, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1406, %r1410}, {%r482, %r485}, {%r1359, %r1373}, {%r1344, %r1344}, %r251, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1398, %r1399, %r1399;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1401, %r1402, %r1402, %r1398;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1405, %r1406, %r1406, %r1401;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1409, %r1410, %r1410, %r1405;
	// end inline asm
	mov.u32 	%r1829, 425007445;
	// begin inline asm
	fma.rn.f16x2 %r1413, %r1829, %r1409, %r110;
	// end inline asm
	add.s32 	%r1832, %r88, %r111;
	add.s32 	%r1833, %r1832, 1;
	mul.hi.u32 	%r1834, %r1833, -1431655765;
	shr.u32 	%r1835, %r1834, 2;
	mul.lo.s32 	%r1836, %r1835, 6;
	sub.s32 	%r1837, %r1833, %r1836;
	shl.b32 	%r1838, %r1837, 4;
	add.s32 	%r1839, %r195, %r1838;
	mul.wide.u32 	%rd163, %r1839, 4;
	add.s64 	%rd165, %rd40, %rd163;
	ld.shared.u32 	%r1421, [%rd165];
	add.s32 	%r1840, %r196, %r1838;
	mul.wide.u32 	%rd166, %r1840, 4;
	add.s64 	%rd167, %rd40, %rd166;
	ld.shared.u32 	%r1428, [%rd167];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1438, %r1435}, {%r398, %r401}, {%r1421}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1447, %r1444}, {%r398, %r401}, {%r1428}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1431, %r439;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1433, %r1431, %r1435;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1436, %r436, %r1438, %r1433;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1440, %r439;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1442, %r1440, %r1444;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1445, %r436, %r1447, %r1442;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1449, %r439, %r1438;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1452, %r436, %r1435, %r1449;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1456, %r439, %r1447;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1459, %r436, %r1444, %r1456;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1482, %r1485}, {%r482, %r485}, {%r1436, %r1452}, {%r1344, %r1344}, %r251, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1489, %r1493}, {%r482, %r485}, {%r1445, %r1459}, {%r1344, %r1344}, %r251, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1481, %r1482, %r1482;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1484, %r1485, %r1485, %r1481;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1488, %r1489, %r1489, %r1484;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1492, %r1493, %r1493, %r1488;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1496, %r1829, %r1492, %r1413;
	// end inline asm
	add.s32 	%r1841, %r1832, 2;
	mul.hi.u32 	%r1842, %r1841, -1431655765;
	shr.u32 	%r1843, %r1842, 2;
	mul.lo.s32 	%r1844, %r1843, 6;
	sub.s32 	%r1845, %r1841, %r1844;
	shl.b32 	%r1846, %r1845, 4;
	add.s32 	%r1847, %r195, %r1846;
	mul.wide.u32 	%rd168, %r1847, 4;
	add.s64 	%rd169, %rd40, %rd168;
	ld.shared.u32 	%r1504, [%rd169];
	add.s32 	%r1848, %r196, %r1846;
	mul.wide.u32 	%rd170, %r1848, 4;
	add.s64 	%rd171, %rd40, %rd170;
	ld.shared.u32 	%r1511, [%rd171];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1521, %r1518}, {%r398, %r401}, {%r1504}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1530, %r1527}, {%r398, %r401}, {%r1511}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1514, %r439;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1516, %r1514, %r1518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1519, %r436, %r1521, %r1516;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1523, %r439;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1525, %r1523, %r1527;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1528, %r436, %r1530, %r1525;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1532, %r439, %r1521;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1535, %r436, %r1518, %r1532;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1539, %r439, %r1530;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1542, %r436, %r1527, %r1539;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1565, %r1568}, {%r482, %r485}, {%r1519, %r1535}, {%r1344, %r1344}, %r251, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1572, %r1576}, {%r482, %r485}, {%r1528, %r1542}, {%r1344, %r1344}, %r251, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1564, %r1565, %r1565;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1567, %r1568, %r1568, %r1564;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1571, %r1572, %r1572, %r1567;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1575, %r1576, %r1576, %r1571;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1579, %r1829, %r1575, %r1496;
	// end inline asm
	add.s32 	%r1849, %r1832, 3;
	mul.hi.u32 	%r1850, %r1849, -1431655765;
	shr.u32 	%r1851, %r1850, 2;
	mul.lo.s32 	%r1852, %r1851, 6;
	sub.s32 	%r1853, %r1849, %r1852;
	shl.b32 	%r1854, %r1853, 4;
	add.s32 	%r1855, %r195, %r1854;
	mul.wide.u32 	%rd172, %r1855, 4;
	add.s64 	%rd173, %rd40, %rd172;
	ld.shared.u32 	%r1587, [%rd173];
	add.s32 	%r1856, %r196, %r1854;
	mul.wide.u32 	%rd174, %r1856, 4;
	add.s64 	%rd175, %rd40, %rd174;
	ld.shared.u32 	%r1594, [%rd175];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1604, %r1601}, {%r398, %r401}, {%r1587}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1613, %r1610}, {%r398, %r401}, {%r1594}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1597, %r439;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1599, %r1597, %r1601;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1602, %r436, %r1604, %r1599;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1606, %r439;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1608, %r1606, %r1610;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1611, %r436, %r1613, %r1608;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1615, %r439, %r1604;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1618, %r436, %r1601, %r1615;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1622, %r439, %r1613;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1625, %r436, %r1610, %r1622;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1648, %r1651}, {%r482, %r485}, {%r1602, %r1618}, {%r1344, %r1344}, %r251, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1655, %r1659}, {%r482, %r485}, {%r1611, %r1625}, {%r1344, %r1344}, %r251, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1647, %r1648, %r1648;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1650, %r1651, %r1651, %r1647;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1654, %r1655, %r1655, %r1650;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1658, %r1659, %r1659, %r1654;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1662, %r1829, %r1658, %r1579;
	// end inline asm
	add.s32 	%r1857, %r1832, 4;
	mul.hi.u32 	%r1858, %r1857, -1431655765;
	shr.u32 	%r1859, %r1858, 2;
	mul.lo.s32 	%r1860, %r1859, 6;
	sub.s32 	%r1861, %r1857, %r1860;
	shl.b32 	%r1862, %r1861, 4;
	add.s32 	%r1863, %r195, %r1862;
	mul.wide.u32 	%rd176, %r1863, 4;
	add.s64 	%rd177, %rd40, %rd176;
	ld.shared.u32 	%r1670, [%rd177];
	add.s32 	%r1864, %r196, %r1862;
	mul.wide.u32 	%rd178, %r1864, 4;
	add.s64 	%rd179, %rd40, %rd178;
	ld.shared.u32 	%r1677, [%rd179];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1687, %r1684}, {%r398, %r401}, {%r1670}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1696, %r1693}, {%r398, %r401}, {%r1677}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1680, %r439;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1682, %r1680, %r1684;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1685, %r436, %r1687, %r1682;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1689, %r439;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1691, %r1689, %r1693;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1694, %r436, %r1696, %r1691;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1698, %r439, %r1687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1701, %r436, %r1684, %r1698;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1705, %r439, %r1696;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1708, %r436, %r1693, %r1705;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1731, %r1734}, {%r482, %r485}, {%r1685, %r1701}, {%r1344, %r1344}, %r251, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1738, %r1742}, {%r482, %r485}, {%r1694, %r1708}, {%r1344, %r1344}, %r251, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1730, %r1731, %r1731;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1733, %r1734, %r1734, %r1730;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1737, %r1738, %r1738, %r1733;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1741, %r1742, %r1742, %r1737;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1745, %r1829, %r1741, %r1662;
	// end inline asm
	add.s32 	%r1865, %r1832, 5;
	mul.hi.u32 	%r1866, %r1865, -1431655765;
	shr.u32 	%r1867, %r1866, 2;
	mul.lo.s32 	%r1868, %r1867, 6;
	sub.s32 	%r1869, %r1865, %r1868;
	shl.b32 	%r1870, %r1869, 4;
	add.s32 	%r1871, %r195, %r1870;
	mul.wide.u32 	%rd180, %r1871, 4;
	add.s64 	%rd181, %rd40, %rd180;
	ld.shared.u32 	%r1753, [%rd181];
	add.s32 	%r1872, %r196, %r1870;
	mul.wide.u32 	%rd182, %r1872, 4;
	add.s64 	%rd183, %rd40, %rd182;
	ld.shared.u32 	%r1760, [%rd183];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1770, %r1767}, {%r398, %r401}, {%r1753}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1779, %r1776}, {%r398, %r401}, {%r1760}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1763, %r439;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1765, %r1763, %r1767;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1768, %r436, %r1770, %r1765;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1772, %r439;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1774, %r1772, %r1776;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1777, %r436, %r1779, %r1774;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1781, %r439, %r1770;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1784, %r436, %r1767, %r1781;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1788, %r439, %r1779;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1791, %r436, %r1776, %r1788;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1814, %r1817}, {%r482, %r485}, {%r1768, %r1784}, {%r1344, %r1344}, %r251, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1821, %r1825}, {%r482, %r485}, {%r1777, %r1791}, {%r1344, %r1344}, %r251, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1813, %r1814, %r1814;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1816, %r1817, %r1817, %r1813;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1820, %r1821, %r1821, %r1816;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1824, %r1825, %r1825, %r1820;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r110, %r1829, %r1824, %r1745;
	// end inline asm
	add.s32 	%r108, %r108, 6;
	setp.ne.s32 	%p286, %r108, 48;
	@%p286 bra 	$L__BB0_164;
// %bb.219:                             // %pass7242
                                        //   in Loop: Header=BB0_162 Depth=2
	mul.lo.s32 	%r1874, %r109, 786432;
	or.b32  	%r1875, %r1874, %r197;
	or.b32  	%r1876, %r1875, %r3;
	add.s32 	%r1877, %r1876, %r198;
	cvt.u64.u32 	%rd184, %r1877;
	add.s64 	%rd185, %rd184, %rd7;
	mul.hi.s64 	%rd186, %rd185, 3074457345618258603;
	shr.u64 	%rd187, %rd186, 63;
	shr.s64 	%rd188, %rd186, 27;
	add.s64 	%rd189, %rd188, %rd187;
	setp.lt.s64 	%p287, %rd185, 0;
	mul.lo.s64 	%rd190, %rd189, 805306368;
	setp.ne.s64 	%p288, %rd190, %rd185;
	and.pred  	%p289, %p287, %p288;
	selp.s64 	%rd191, -1, 0, %p289;
	add.s64 	%rd192, %rd189, %rd191;
	mul.lo.s64 	%rd193, %rd192, -805306368;
	add.s64 	%rd194, %rd193, %rd185;
	shl.b64 	%rd195, %rd194, 2;
	add.s64 	%rd196, %rd4, %rd195;
	st.global.u32 	[%rd196], %r110;
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r108, 0;
	mov.u32 	%r110, %r108;
	bra.uni 	$L__BB0_164;
$L__BB0_165:                            // %L16985.preheader
                                        //   in Loop: Header=BB0_197 Depth=1
	mov.u16 	%rs209, %rs1;
	mov.u32 	%r3013, %r1344;
	bra.uni 	$L__BB0_166;
$L__BB0_167:                            // %L23372
                                        //   in Loop: Header=BB0_166 Depth=2
	bar.sync 	0;
	add.s32 	%r3013, %r3013, 6;
	add.s16 	%rs209, %rs209, 6;
	setp.ne.s32 	%p299, %r3013, 24;
	@%p299 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_168;
$L__BB0_166:                            // %L16985
                                        //   Parent Loop BB0_197 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p291, %r3013, 0;
	selp.b32 	%r2905, %r92, 0, %p291;
	setp.eq.s32 	%p292, %r3013, 6;
	selp.b32 	%r2906, %r96, %r2905, %p292;
	setp.eq.s32 	%p293, %r3013, 12;
	selp.b32 	%r2907, %r100, %r2906, %p293;
	setp.eq.s32 	%p294, %r3013, 18;
	selp.b32 	%r2908, %r104, %r2907, %p294;
	selp.b32 	%r2909, %r93, 0, %p291;
	selp.b32 	%r2910, %r97, %r2909, %p292;
	selp.b32 	%r2911, %r101, %r2910, %p293;
	selp.b32 	%r2912, %r105, %r2911, %p294;
	selp.b32 	%r2913, %r94, 0, %p291;
	selp.b32 	%r2914, %r98, %r2913, %p292;
	selp.b32 	%r2915, %r102, %r2914, %p293;
	selp.b32 	%r2916, %r106, %r2915, %p294;
	selp.b32 	%r2917, %r95, 0, %p291;
	selp.b32 	%r2918, %r99, %r2917, %p292;
	selp.b32 	%r2919, %r103, %r2918, %p293;
	selp.b32 	%r2920, %r107, %r2919, %p294;
	// begin inline asm
	mov.b32 %r1906, {%rs107, %rs107};
	// end inline asm
	// begin inline asm
	mov.b32 %r1917, {%rs109, %rs109};
	// end inline asm
	shr.u32 	%r2921, %r2908, 8;
	xor.b32  	%r1916, %r2921, 8947848;
	// begin inline asm
	lop3.b32 %r1903, %r928, %r1916, %r1906, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1907, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1908, %r1906, %r1907;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1911, %r1903, %r1908;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1914, %r939, %r1916, %r1917, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1918, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1919, %r1917, %r1918;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1922, %r1914, %r1919;
	// end inline asm
	// begin inline asm
	mov.b32 %r1952, {%rs107, %rs107};
	// end inline asm
	// begin inline asm
	mov.b32 %r1963, {%rs109, %rs109};
	// end inline asm
	shr.u32 	%r2922, %r2912, 8;
	xor.b32  	%r1962, %r2922, 8947848;
	// begin inline asm
	lop3.b32 %r1949, %r928, %r1962, %r1952, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1953, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1954, %r1952, %r1953;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1957, %r1949, %r1954;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1960, %r939, %r1962, %r1963, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1964, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1965, %r1963, %r1964;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1968, %r1960, %r1965;
	// end inline asm
	// begin inline asm
	mov.b32 %r1998, {%rs107, %rs107};
	// end inline asm
	// begin inline asm
	mov.b32 %r2009, {%rs109, %rs109};
	// end inline asm
	shr.u32 	%r2923, %r2916, 8;
	xor.b32  	%r2008, %r2923, 8947848;
	// begin inline asm
	lop3.b32 %r1995, %r928, %r2008, %r1998, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1999, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2000, %r1998, %r1999;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2003, %r1995, %r2000;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2006, %r939, %r2008, %r2009, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2010, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2011, %r2009, %r2010;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2014, %r2006, %r2011;
	// end inline asm
	// begin inline asm
	mov.b32 %r2044, {%rs107, %rs107};
	// end inline asm
	// begin inline asm
	mov.b32 %r2055, {%rs109, %rs109};
	// end inline asm
	shr.u32 	%r2924, %r2920, 8;
	xor.b32  	%r2054, %r2924, 8947848;
	// begin inline asm
	lop3.b32 %r2041, %r928, %r2054, %r2044, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2045, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2046, %r2044, %r2045;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2049, %r2041, %r2046;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2052, %r939, %r2054, %r2055, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2056, {%rs113, %rs113};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2057, %r2055, %r2056;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2060, %r2052, %r2057;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r1911;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2063, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r1957;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2066, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r174;
    mov.b32 {%r2re, %r2im}, %r1922;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2069, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r175;
    mov.b32 {%r2re, %r2im}, %r1968;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2072, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2003;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2075, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r2049;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2078, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r174;
    mov.b32 {%r2re, %r2im}, %r2014;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2081, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r175;
    mov.b32 {%r2re, %r2im}, %r2060;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2084, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2150, %r2147}, {%r290, %r293}, {%r2063}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2159, %r2156}, {%r290, %r293}, {%r2066}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2168, %r2165}, {%r290, %r293}, {%r2069}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2177, %r2174}, {%r290, %r293}, {%r2072}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2186, %r2183}, {%r290, %r293}, {%r2075}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2195, %r2192}, {%r290, %r293}, {%r2078}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2204, %r2201}, {%r290, %r293}, {%r2081}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2213, %r2210}, {%r290, %r293}, {%r2084}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2143, %r345;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2145, %r2143, %r2147;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2148, %r342, %r2150, %r2145;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2152, %r345;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2154, %r2152, %r2156;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2157, %r342, %r2159, %r2154;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2161, %r345;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2163, %r2161, %r2165;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2166, %r342, %r2168, %r2163;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2170, %r345;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2172, %r2170, %r2174;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2175, %r342, %r2177, %r2172;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2179, %r345;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2181, %r2179, %r2183;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2184, %r342, %r2186, %r2181;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2188, %r345;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2190, %r2188, %r2192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2193, %r342, %r2195, %r2190;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2197, %r345;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2199, %r2197, %r2201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2202, %r342, %r2204, %r2199;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2206, %r345;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2208, %r2206, %r2210;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2211, %r342, %r2213, %r2208;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2215, %r345, %r2150;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2218, %r342, %r2147, %r2215;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2222, %r345, %r2159;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2225, %r342, %r2156, %r2222;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2229, %r345, %r2168;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2232, %r342, %r2165, %r2229;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2236, %r345, %r2177;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2239, %r342, %r2174, %r2236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2243, %r345, %r2186;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2246, %r342, %r2183, %r2243;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2250, %r345, %r2195;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2253, %r342, %r2192, %r2250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2257, %r345, %r2204;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2260, %r342, %r2201, %r2257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2264, %r345, %r2213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2267, %r342, %r2210, %r2264;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2271, %r2272}, {%r386, %r389}, {%r2148, %r2218}, {%r1344, %r1344}, %r199, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2280, %r2281}, {%r386, %r389}, {%r2157, %r2225}, {%r1344, %r1344}, %r199, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2289, %r2290}, {%r386, %r389}, {%r2166, %r2232}, {%r1344, %r1344}, %r199, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2298, %r2299}, {%r386, %r389}, {%r2175, %r2239}, {%r1344, %r1344}, %r199, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2307, %r2308}, {%r386, %r389}, {%r2184, %r2246}, {%r1344, %r1344}, %r199, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2316, %r2317}, {%r386, %r389}, {%r2193, %r2253}, {%r1344, %r1344}, %r199, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2325, %r2326}, {%r386, %r389}, {%r2202, %r2260}, {%r1344, %r1344}, %r199, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2334, %r2335}, {%r386, %r389}, {%r2211, %r2267}, {%r1344, %r1344}, %r199, 0;
	// end inline asm
	bar.sync 	0;
	add.s16 	%rs171, %rs209, -5;
	mul.hi.s16 	%rs172, %rs171, 10923;
	shr.u16 	%rs173, %rs172, 15;
	add.s16 	%rs174, %rs172, %rs173;
	mul.lo.s16 	%rs175, %rs174, 6;
	sub.s16 	%rs176, %rs171, %rs175;
	mul.wide.s16 	%r2925, %rs176, 16;
	add.s32 	%r2926, %r195, %r2925;
	mul.wide.s32 	%rd197, %r2926, 4;
	add.s64 	%rd199, %rd40, %rd197;
	ld.shared.u32 	%r2411, [%rd199];
	add.s32 	%r2927, %r196, %r2925;
	mul.wide.s32 	%rd200, %r2927, 4;
	add.s64 	%rd201, %rd40, %rd200;
	ld.shared.u32 	%r2418, [%rd201];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2428, %r2425}, {%r398, %r401}, {%r2411}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2437, %r2434}, {%r398, %r401}, {%r2418}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2421, %r439;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2423, %r2421, %r2425;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2426, %r436, %r2428, %r2423;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2430, %r439;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2432, %r2430, %r2434;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2435, %r436, %r2437, %r2432;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2439, %r439, %r2428;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2442, %r436, %r2425, %r2439;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2446, %r439, %r2437;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2449, %r436, %r2434, %r2446;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2472, %r2475}, {%r482, %r485}, {%r2426, %r2442}, {%r1344, %r1344}, %r251, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2479, %r2483}, {%r482, %r485}, {%r2435, %r2449}, {%r1344, %r1344}, %r251, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2471, %r2472, %r2472;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2474, %r2475, %r2475, %r2471;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2478, %r2479, %r2479, %r2474;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2482, %r2483, %r2483, %r2478;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2486, %r1829, %r2482, %r110;
	// end inline asm
	add.s16 	%rs177, %rs209, -4;
	mul.hi.s16 	%rs178, %rs177, 10923;
	shr.u16 	%rs179, %rs178, 15;
	add.s16 	%rs180, %rs178, %rs179;
	mul.lo.s16 	%rs181, %rs180, 6;
	sub.s16 	%rs182, %rs177, %rs181;
	mul.wide.s16 	%r2928, %rs182, 16;
	add.s32 	%r2929, %r195, %r2928;
	mul.wide.s32 	%rd202, %r2929, 4;
	add.s64 	%rd203, %rd40, %rd202;
	ld.shared.u32 	%r2494, [%rd203];
	add.s32 	%r2930, %r196, %r2928;
	mul.wide.s32 	%rd204, %r2930, 4;
	add.s64 	%rd205, %rd40, %rd204;
	ld.shared.u32 	%r2501, [%rd205];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2511, %r2508}, {%r398, %r401}, {%r2494}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2520, %r2517}, {%r398, %r401}, {%r2501}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2504, %r439;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2506, %r2504, %r2508;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2509, %r436, %r2511, %r2506;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2513, %r439;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2515, %r2513, %r2517;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2518, %r436, %r2520, %r2515;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2522, %r439, %r2511;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2525, %r436, %r2508, %r2522;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2529, %r439, %r2520;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2532, %r436, %r2517, %r2529;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2555, %r2558}, {%r482, %r485}, {%r2509, %r2525}, {%r1344, %r1344}, %r251, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2562, %r2566}, {%r482, %r485}, {%r2518, %r2532}, {%r1344, %r1344}, %r251, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2554, %r2555, %r2555;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2557, %r2558, %r2558, %r2554;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2561, %r2562, %r2562, %r2557;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2565, %r2566, %r2566, %r2561;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2569, %r1829, %r2565, %r2486;
	// end inline asm
	add.s16 	%rs183, %rs209, -3;
	mul.hi.s16 	%rs184, %rs183, 10923;
	shr.u16 	%rs185, %rs184, 15;
	add.s16 	%rs186, %rs184, %rs185;
	mul.lo.s16 	%rs187, %rs186, 6;
	sub.s16 	%rs188, %rs183, %rs187;
	mul.wide.s16 	%r2931, %rs188, 16;
	add.s32 	%r2932, %r195, %r2931;
	mul.wide.s32 	%rd206, %r2932, 4;
	add.s64 	%rd207, %rd40, %rd206;
	ld.shared.u32 	%r2577, [%rd207];
	add.s32 	%r2933, %r196, %r2931;
	mul.wide.s32 	%rd208, %r2933, 4;
	add.s64 	%rd209, %rd40, %rd208;
	ld.shared.u32 	%r2584, [%rd209];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2594, %r2591}, {%r398, %r401}, {%r2577}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2603, %r2600}, {%r398, %r401}, {%r2584}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2587, %r439;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2589, %r2587, %r2591;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2592, %r436, %r2594, %r2589;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2596, %r439;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2598, %r2596, %r2600;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2601, %r436, %r2603, %r2598;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2605, %r439, %r2594;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2608, %r436, %r2591, %r2605;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2612, %r439, %r2603;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2615, %r436, %r2600, %r2612;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2638, %r2641}, {%r482, %r485}, {%r2592, %r2608}, {%r1344, %r1344}, %r251, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2645, %r2649}, {%r482, %r485}, {%r2601, %r2615}, {%r1344, %r1344}, %r251, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2637, %r2638, %r2638;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2640, %r2641, %r2641, %r2637;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2644, %r2645, %r2645, %r2640;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2648, %r2649, %r2649, %r2644;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2652, %r1829, %r2648, %r2569;
	// end inline asm
	add.s16 	%rs189, %rs209, -2;
	mul.hi.s16 	%rs190, %rs189, 10923;
	shr.u16 	%rs191, %rs190, 15;
	add.s16 	%rs192, %rs190, %rs191;
	mul.lo.s16 	%rs193, %rs192, 6;
	sub.s16 	%rs194, %rs189, %rs193;
	mul.wide.s16 	%r2934, %rs194, 16;
	add.s32 	%r2935, %r195, %r2934;
	mul.wide.s32 	%rd210, %r2935, 4;
	add.s64 	%rd211, %rd40, %rd210;
	ld.shared.u32 	%r2660, [%rd211];
	add.s32 	%r2936, %r196, %r2934;
	mul.wide.s32 	%rd212, %r2936, 4;
	add.s64 	%rd213, %rd40, %rd212;
	ld.shared.u32 	%r2667, [%rd213];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2677, %r2674}, {%r398, %r401}, {%r2660}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2686, %r2683}, {%r398, %r401}, {%r2667}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2670, %r439;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2672, %r2670, %r2674;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2675, %r436, %r2677, %r2672;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2679, %r439;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2681, %r2679, %r2683;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2684, %r436, %r2686, %r2681;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2688, %r439, %r2677;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2691, %r436, %r2674, %r2688;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2695, %r439, %r2686;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2698, %r436, %r2683, %r2695;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2721, %r2724}, {%r482, %r485}, {%r2675, %r2691}, {%r1344, %r1344}, %r251, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2728, %r2732}, {%r482, %r485}, {%r2684, %r2698}, {%r1344, %r1344}, %r251, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2720, %r2721, %r2721;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2723, %r2724, %r2724, %r2720;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2727, %r2728, %r2728, %r2723;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2731, %r2732, %r2732, %r2727;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2735, %r1829, %r2731, %r2652;
	// end inline asm
	add.s16 	%rs195, %rs209, -1;
	mul.hi.s16 	%rs196, %rs195, 10923;
	shr.u16 	%rs197, %rs196, 15;
	add.s16 	%rs198, %rs196, %rs197;
	mul.lo.s16 	%rs199, %rs198, 6;
	sub.s16 	%rs200, %rs195, %rs199;
	mul.wide.s16 	%r2937, %rs200, 16;
	add.s32 	%r2938, %r195, %r2937;
	mul.wide.s32 	%rd214, %r2938, 4;
	add.s64 	%rd215, %rd40, %rd214;
	ld.shared.u32 	%r2743, [%rd215];
	add.s32 	%r2939, %r196, %r2937;
	mul.wide.s32 	%rd216, %r2939, 4;
	add.s64 	%rd217, %rd40, %rd216;
	ld.shared.u32 	%r2750, [%rd217];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2760, %r2757}, {%r398, %r401}, {%r2743}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2769, %r2766}, {%r398, %r401}, {%r2750}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2753, %r439;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2755, %r2753, %r2757;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2758, %r436, %r2760, %r2755;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2762, %r439;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2764, %r2762, %r2766;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2767, %r436, %r2769, %r2764;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2771, %r439, %r2760;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2774, %r436, %r2757, %r2771;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2778, %r439, %r2769;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2781, %r436, %r2766, %r2778;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2804, %r2807}, {%r482, %r485}, {%r2758, %r2774}, {%r1344, %r1344}, %r251, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2811, %r2815}, {%r482, %r485}, {%r2767, %r2781}, {%r1344, %r1344}, %r251, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2803, %r2804, %r2804;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2806, %r2807, %r2807, %r2803;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2810, %r2811, %r2811, %r2806;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2814, %r2815, %r2815, %r2810;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2818, %r1829, %r2814, %r2735;
	// end inline asm
	mul.hi.s16 	%rs201, %rs209, 10923;
	shr.u16 	%rs202, %rs201, 15;
	add.s16 	%rs203, %rs201, %rs202;
	mul.lo.s16 	%rs204, %rs203, 6;
	sub.s16 	%rs205, %rs209, %rs204;
	mul.wide.s16 	%r2940, %rs205, 16;
	add.s32 	%r2941, %r195, %r2940;
	mul.wide.s32 	%rd218, %r2941, 4;
	add.s64 	%rd219, %rd40, %rd218;
	ld.shared.u32 	%r2826, [%rd219];
	add.s32 	%r2942, %r196, %r2940;
	mul.wide.s32 	%rd220, %r2942, 4;
	add.s64 	%rd221, %rd40, %rd220;
	ld.shared.u32 	%r2833, [%rd221];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2843, %r2840}, {%r398, %r401}, {%r2826}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2852, %r2849}, {%r398, %r401}, {%r2833}, {%r1344, %r1344};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2836, %r439;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2838, %r2836, %r2840;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2841, %r436, %r2843, %r2838;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2845, %r439;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2847, %r2845, %r2849;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2850, %r436, %r2852, %r2847;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2854, %r439, %r2843;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2857, %r436, %r2840, %r2854;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2861, %r439, %r2852;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2864, %r436, %r2849, %r2861;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2887, %r2890}, {%r482, %r485}, {%r2841, %r2857}, {%r1344, %r1344}, %r251, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2894, %r2898}, {%r482, %r485}, {%r2850, %r2864}, {%r1344, %r1344}, %r251, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2886, %r2887, %r2887;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2889, %r2890, %r2890, %r2886;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2893, %r2894, %r2894, %r2889;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2897, %r2898, %r2898, %r2893;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r110, %r1829, %r2897, %r2818;
	// end inline asm
	add.s32 	%r108, %r108, 6;
	setp.eq.s32 	%p295, %r108, 48;
	@%p295 bra 	$L__BB0_220;
	bra.uni 	$L__BB0_167;
$L__BB0_220:                            // %pass9859
                                        //   in Loop: Header=BB0_166 Depth=2
	mul.lo.s32 	%r2944, %r109, 786432;
	or.b32  	%r2945, %r2944, %r197;
	or.b32  	%r2946, %r2945, %r3;
	add.s32 	%r2947, %r2946, %r198;
	cvt.u64.u32 	%rd222, %r2947;
	add.s64 	%rd223, %rd222, %rd7;
	mul.hi.s64 	%rd224, %rd223, 3074457345618258603;
	shr.u64 	%rd225, %rd224, 63;
	shr.s64 	%rd226, %rd224, 27;
	add.s64 	%rd227, %rd226, %rd225;
	setp.lt.s64 	%p296, %rd223, 0;
	mul.lo.s64 	%rd228, %rd227, 805306368;
	setp.ne.s64 	%p297, %rd228, %rd223;
	and.pred  	%p298, %p296, %p297;
	selp.s64 	%rd229, -1, 0, %p298;
	add.s64 	%rd230, %rd227, %rd229;
	mul.lo.s64 	%rd231, %rd230, -805306368;
	add.s64 	%rd232, %rd231, %rd223;
	shl.b64 	%rd233, %rd232, 2;
	add.s64 	%rd234, %rd4, %rd233;
	st.global.u32 	[%rd234], %r110;
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r108, 0;
	mov.u32 	%r110, %r108;
	bra.uni 	$L__BB0_167;
$L__BB0_169:                            // %L23403
	mov.u32 	%r2948, 0;
	st.global.u32 	[%rd6], %r2948;
	ret;
$L__BB0_163:                            // %post_box_union
	mov.u64 	%rd154, exception1875;
	cvta.global.u64 	%rd155, %rd154;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd155;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r256;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_217:                            // %post_box_union5238
	mov.u64 	%rd161, exception1875;
	cvta.global.u64 	%rd162, %rd161;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd162;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r256;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L5128
	mov.u32 	%r2964, 5;
	st.global.u32 	[%rd6], %r2964;
	mov.u64 	%rd265, exception1835;
	cvta.global.u64 	%rd266, %rd265;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd266;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r256;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L5284
	mov.u32 	%r2963, 5;
	st.global.u32 	[%rd6], %r2963;
	mov.u64 	%rd263, exception1835;
	cvta.global.u64 	%rd264, %rd263;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd264;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r256;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L5440
	mov.u32 	%r2962, 5;
	st.global.u32 	[%rd6], %r2962;
	mov.u64 	%rd261, exception1835;
	cvta.global.u64 	%rd262, %rd261;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd262;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r256;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L5596
	mov.u32 	%r2961, 5;
	st.global.u32 	[%rd6], %r2961;
	mov.u64 	%rd259, exception1835;
	cvta.global.u64 	%rd260, %rd259;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd260;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r256;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L5752
	mov.u32 	%r2960, 5;
	st.global.u32 	[%rd6], %r2960;
	mov.u64 	%rd257, exception1835;
	cvta.global.u64 	%rd258, %rd257;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd258;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r256;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L5908
	mov.u32 	%r2959, 5;
	st.global.u32 	[%rd6], %r2959;
	mov.u64 	%rd255, exception1835;
	cvta.global.u64 	%rd256, %rd255;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd256;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r256;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_151:                            // %L6064
	mov.u32 	%r2958, 5;
	st.global.u32 	[%rd6], %r2958;
	mov.u64 	%rd253, exception1835;
	cvta.global.u64 	%rd254, %rd253;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd254;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r256;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_152:                            // %L6220
	mov.u32 	%r2957, 5;
	st.global.u32 	[%rd6], %r2957;
	mov.u64 	%rd251, exception1835;
	cvta.global.u64 	%rd252, %rd251;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd252;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r256;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_153:                            // %L6376
	mov.u32 	%r2956, 5;
	st.global.u32 	[%rd6], %r2956;
	mov.u64 	%rd249, exception1835;
	cvta.global.u64 	%rd250, %rd249;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd250;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r256;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_154:                            // %L6532
	mov.u32 	%r2955, 5;
	st.global.u32 	[%rd6], %r2955;
	mov.u64 	%rd247, exception1835;
	cvta.global.u64 	%rd248, %rd247;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd248;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r256;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_155:                            // %L6714
	mov.u32 	%r2954, 5;
	st.global.u32 	[%rd6], %r2954;
	mov.u64 	%rd245, exception1835;
	cvta.global.u64 	%rd246, %rd245;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd246;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r256;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_156:                            // %L6870
	mov.u32 	%r2953, 5;
	st.global.u32 	[%rd6], %r2953;
	mov.u64 	%rd243, exception1835;
	cvta.global.u64 	%rd244, %rd243;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd244;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r256;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_157:                            // %L7026
	mov.u32 	%r2952, 5;
	st.global.u32 	[%rd6], %r2952;
	mov.u64 	%rd241, exception1835;
	cvta.global.u64 	%rd242, %rd241;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd242;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r256;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_158:                            // %L7182
	mov.u32 	%r2951, 5;
	st.global.u32 	[%rd6], %r2951;
	mov.u64 	%rd239, exception1835;
	cvta.global.u64 	%rd240, %rd239;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd240;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r256;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_159:                            // %L7338
	mov.u32 	%r2950, 5;
	st.global.u32 	[%rd6], %r2950;
	mov.u64 	%rd237, exception1835;
	cvta.global.u64 	%rd238, %rd237;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd238;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r256;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_160:                            // %L7494
	mov.u32 	%r2949, 5;
	st.global.u32 	[%rd6], %r2949;
	mov.u64 	%rd235, exception1835;
	cvta.global.u64 	%rd236, %rd235;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd236;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r256;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_12:                             // %L307
	mov.u32 	%r2965, 3;
	st.global.u32 	[%rd6], %r2965;
	mov.u64 	%rd267, exception1835;
	cvta.global.u64 	%rd268, %rd267;
	{ // callseq 88, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd268;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 88
	{ // callseq 89, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r256;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 89
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L166
	mov.u32 	%r2966, 2;
	st.global.u32 	[%rd6], %r2966;
	mov.u64 	%rd269, exception1835;
	cvta.global.u64 	%rd270, %rd269;
	{ // callseq 90, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd270;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 90
	{ // callseq 91, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r256;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 91
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 47
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r256;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 48
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_144:                            // %L1152
	add.u64 	%rd17, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r266, %r4};
	st.local.v2.u32 	[%rd5+8], {%r2, %r85};
	st.local.u32 	[%rd5+16], %r86;
	mov.u64 	%rd23, __unnamed_1;
	cvta.global.u64 	%rd24, %rd23;
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd24;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd17;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r495, [retval0+0];
	} // callseq 49
	mov.u32 	%r497, 4;
	st.global.u32 	[%rd6], %r497;
	mov.u64 	%rd26, exception1835;
	cvta.global.u64 	%rd27, %rd26;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd27;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r256;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
