// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=192, blocks_per_sm=4

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception3564[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception3604[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 192, 1, 1
.minnctapersm 4
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<307>;
	.reg .b16 	%rs<270>;
	.reg .b32 	%r<3082>;
	.reg .f32 	%f<790>;
	.reg .b64 	%rd<377>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r302, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd46, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r311, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p4, %r311, 13919;
	@%p4 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd47, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r303, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %ctaid.x;
	mul.lo.s32 	%r2, %r1, 192;
	mov.u32 	%r312, %tid.x;
	mov.u32 	%r4, %tid.y;
	shl.b32 	%r5, %r4, 5;
	or.b32  	%r313, %r2, %r312;
	add.s32 	%r314, %r313, %r5;
	mul.wide.u32 	%rd54, %r314, 4;
	add.s64 	%rd6, %rd47, %rd54;
	mov.u32 	%r315, 1;
	st.global.u32 	[%rd6], %r315;
	setp.gt.u32 	%p5, %r303, 8191;
	@%p5 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r304, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p6, %r304, %r303;
	setp.gt.s32 	%p7, %r304, 16383;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r305, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r316, %r304, %r303;
	mul.hi.s32 	%r318, %r316, 715827883;
	shr.u32 	%r319, %r318, 31;
	shr.s32 	%r320, %r318, 3;
	add.s32 	%r6, %r320, %r319;
	mul.lo.s32 	%r321, %r6, -48;
	neg.s32 	%r322, %r316;
	setp.ne.s32 	%p9, %r321, %r322;
	setp.gt.u32 	%p10, %r305, 1023;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r306, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p12, %r306, %r305;
	setp.lt.s32 	%p13, %r306, 2048;
	and.pred  	%p14, %p12, %p13;
	sub.s32 	%r323, %r306, %r305;
	setp.eq.s32 	%p15, %r323, %r6;
	and.pred  	%p16, %p14, %p15;
	@%p16 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %L258
	ld.param.u32 	%r307, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p17, %r307, 0;
	@%p17 bra 	$L__BB0_12;
// %bb.8:                               // %L260
	ld.param.u32 	%r308, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p18, %r308, %r307;
	setp.gt.s32 	%p19, %r308, 512;
	or.pred  	%p20, %p18, %p19;
	@%p20 bra 	$L__BB0_12;
// %bb.9:                               // %L270
	ld.param.u32 	%r309, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r7, %r308, %r307;
	and.b32  	%r324, %r7, 3;
	setp.ne.s32 	%p21, %r324, 0;
	setp.lt.s32 	%p22, %r309, 0;
	or.pred  	%p23, %p21, %p22;
	@%p23 bra 	$L__BB0_12;
// %bb.10:                              // %L276
	ld.param.u32 	%r310, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p24, %r310, %r309;
	setp.gt.s32 	%p25, %r310, 4096;
	or.pred  	%p26, %p24, %p25;
	@%p26 bra 	$L__BB0_12;
// %bb.11:                              // %L286
	sub.s32 	%r325, %r310, %r309;
	and.b32  	%r326, %r325, 3;
	setp.eq.s32 	%p27, %r326, 0;
	setp.eq.s32 	%p28, %r325, %r7;
	and.pred  	%p29, %p27, %p28;
	@%p29 bra 	$L__BB0_171;
	bra.uni 	$L__BB0_12;
$L__BB0_171:                            // %pass162
	and.b32  	%r164, %r312, 3;
	shr.u32 	%r165, %r312, 2;
	mul.lo.s32 	%r327, %r164, %r165;
	and.b32  	%r328, %r327, 7;
	cvt.rn.f32.s32 	%f205, %r328;
	mov.f32 	%f206, 0f40800000;
	div.approx.f32 	%f169, %f205, %f206;
	abs.f32 	%f788, %f169;
	setp.lt.f32 	%p30, %f788, 0f40000000;
	setp.gtu.f32 	%p306, %f788, 0f4B800000;
	mov.f32 	%f784, %f788;
	@%p30 bra 	$L__BB0_183;
// %bb.172:
	@%p306 bra 	$L__BB0_179;
	bra.uni 	$L__BB0_173;
$L__BB0_179:
	mov.b32 	%r167, %f788;
	and.b32  	%r329, %r167, 8388607;
	or.b32  	%r3077, %r329, 1065353216;
	mov.b32 	%f783, %r3077;
	add.s32 	%r330, %r167, -1073741824;
	and.b32  	%r3078, %r330, -8388608;
	setp.eq.s32 	%p37, %r3078, 0;
	@%p37 bra 	$L__BB0_182;
// %bb.180:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f216, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f215,%f216;
	// end inline asm
$L__BB0_181:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r331, %r3078, 192937984;
	add.s32 	%r332, %r3077, %r331;
	mov.b32 	%f217, %r332;
	mul.f32 	%f218, %f215, %f217;
	sub.f32 	%f219, %f217, %f218;
	fma.rn.f32 	%f220, %f219, %f215, %f218;
	sub.f32 	%f221, %f217, %f220;
	fma.rz.f32 	%f222, %f221, %f215, %f220;
	cvt.rzi.f32.f32 	%f223, %f222;
	sub.f32 	%f783, %f217, %f223;
	sub.s32 	%r3078, %r3078, %r331;
	mov.b32 	%r3077, %f783;
	setp.ne.s32 	%p38, %r3078, 0;
	setp.ne.s32 	%p39, %r3077, 0;
	and.pred  	%p40, %p38, %p39;
	@%p40 bra 	$L__BB0_181;
$L__BB0_182:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p41, %r167, 2139095039;
	selp.f32 	%f224, 0f7FFFFFFF, 0f4B800000, %p41;
	mul.f32 	%f225, %f783, 0f34000000;
	mul.f32 	%f784, %f224, %f225;
	bra.uni 	$L__BB0_183;
$L__BB0_173:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f207, 0f40000000;
	div.approx.f32 	%f208, %f788, %f207;
	cvt.rzi.f32.f32 	%f782, %f208;
	fma.rn.f32 	%f172, %f782, 0fC0000000, %f788;
	mov.b32 	%r166, %f172;
	setp.lt.u32 	%p32, %r166, 1073741824;
	@%p32 bra 	$L__BB0_178;
// %bb.174:
	setp.lt.u32 	%p33, %r166, -2147483647;
	@%p33 bra 	$L__BB0_176;
// %bb.175:
	add.f32 	%f213, %f782, 0fBF800000;
	setp.lt.f32 	%p36, %f172, 0fC0000000;
	add.f32 	%f214, %f213, 0fBF800000;
	selp.f32 	%f782, %f214, %f213, %p36;
	bra.uni 	$L__BB0_178;
$L__BB0_176:
	add.f32 	%f782, %f782, 0f3F800000;
	setp.ltu.f32 	%p34, %f172, 0f40800000;
	@%p34 bra 	$L__BB0_178;
// %bb.177:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f209, %f782, 0f3F800000;
	fma.rn.f32 	%f211, %f207, 0fC0400000, %f172;
	setp.ge.f32 	%p35, %f211, 0f00000000;
	add.f32 	%f212, %f209, 0f3F800000;
	selp.f32 	%f782, %f212, %f209, %p35;
$L__BB0_178:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f784, %f782, 0fC0000000, %f788;
$L__BB0_183:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f226, %f784;
	setp.gtu.f32 	%p42, %f226, 0f7F800000;
	mov.b32 	%r333, %f169;
	and.b32  	%r174, %r333, -2147483648;
	@%p42 bra 	$L__BB0_185;
// %bb.184:
	mov.b32 	%r334, %f784;
	or.b32  	%r335, %r174, %r334;
	mov.b32 	%f784, %r335;
$L__BB0_185:                            // %__nv_fmodf.exit
	shl.b32 	%r177, %r312, 1;
	and.b32  	%r178, %r177, 2;
	mul.lo.s32 	%r350, %r178, %r165;
	cvt.rn.f32.s32 	%f259, %r350;
	mov.f32 	%f260, 0f41400000;
	div.approx.f32 	%f186, %f259, %f260;
	abs.f32 	%f734, %f186;
	setp.lt.f32 	%p50, %f734, 0f40000000;
	@%p50 bra 	$L__BB0_24;
// %bb.13:
	setp.gtu.f32 	%p51, %f734, 0f4B800000;
	@%p51 bra 	$L__BB0_20;
	bra.uni 	$L__BB0_14;
$L__BB0_20:
	mov.b32 	%r9, %f734;
	and.b32  	%r351, %r9, 8388607;
	or.b32  	%r3027, %r351, 1065353216;
	mov.b32 	%f733, %r3027;
	add.s32 	%r352, %r9, -1073741824;
	and.b32  	%r3028, %r352, -8388608;
	setp.eq.s32 	%p57, %r3028, 0;
	@%p57 bra 	$L__BB0_23;
// %bb.21:                              // %__nv_fmaf_rn.exit4.i.i.i2046.preheader
	mov.f32 	%f270, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f269,%f270;
	// end inline asm
$L__BB0_22:                             // %__nv_fmaf_rn.exit4.i.i.i2046
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r353, %r3028, 192937984;
	add.s32 	%r354, %r3027, %r353;
	mov.b32 	%f271, %r354;
	mul.f32 	%f272, %f269, %f271;
	sub.f32 	%f273, %f271, %f272;
	fma.rn.f32 	%f274, %f273, %f269, %f272;
	sub.f32 	%f275, %f271, %f274;
	fma.rz.f32 	%f276, %f275, %f269, %f274;
	cvt.rzi.f32.f32 	%f277, %f276;
	sub.f32 	%f733, %f271, %f277;
	sub.s32 	%r3028, %r3028, %r353;
	mov.b32 	%r3027, %f733;
	setp.ne.s32 	%p58, %r3028, 0;
	setp.ne.s32 	%p59, %r3027, 0;
	and.pred  	%p60, %p58, %p59;
	@%p60 bra 	$L__BB0_22;
$L__BB0_23:                             // %__internal_fmodf_slowpath_mod.exit.i.i2048
	setp.gt.u32 	%p61, %r9, 2139095039;
	selp.f32 	%f278, 0f7FFFFFFF, 0f4B800000, %p61;
	mul.f32 	%f279, %f733, 0f34000000;
	mul.f32 	%f734, %f278, %f279;
	bra.uni 	$L__BB0_24;
$L__BB0_14:                             // %__nv_fast_fdividef.exit.i.i.i2025
	mov.f32 	%f261, 0f40000000;
	div.approx.f32 	%f262, %f734, %f261;
	cvt.rzi.f32.f32 	%f732, %f262;
	fma.rn.f32 	%f2, %f732, 0fC0000000, %f734;
	mov.b32 	%r8, %f2;
	setp.lt.u32 	%p52, %r8, 1073741824;
	@%p52 bra 	$L__BB0_19;
// %bb.15:
	setp.lt.u32 	%p53, %r8, -2147483647;
	@%p53 bra 	$L__BB0_17;
// %bb.16:
	add.f32 	%f267, %f732, 0fBF800000;
	setp.lt.f32 	%p56, %f2, 0fC0000000;
	add.f32 	%f268, %f267, 0fBF800000;
	selp.f32 	%f732, %f268, %f267, %p56;
	bra.uni 	$L__BB0_19;
$L__BB0_17:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p54, %f2, 0f40800000;
	@%p54 bra 	$L__BB0_19;
// %bb.18:                              // %__nv_fmaf_rn.exit.i.i.i2029
	add.f32 	%f263, %f732, 0f3F800000;
	fma.rn.f32 	%f265, %f261, 0fC0400000, %f2;
	setp.ge.f32 	%p55, %f265, 0f00000000;
	add.f32 	%f266, %f263, 0f3F800000;
	selp.f32 	%f732, %f266, %f263, %p55;
$L__BB0_19:                             // %__internal_fmodf_fastpath_quot.exit.i.i2032
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_24:                             // %__internal_fmodf_kernel.exit.i2051
	or.b32  	%r179, %r178, 1;
	abs.f32 	%f280, %f734;
	setp.gtu.f32 	%p62, %f280, 0f7F800000;
	@%p62 bra 	$L__BB0_26;
// %bb.25:
	mov.b32 	%r355, %f186;
	and.b32  	%r356, %r355, -2147483648;
	mov.b32 	%r357, %f734;
	or.b32  	%r358, %r356, %r357;
	mov.b32 	%f734, %r358;
$L__BB0_26:                             // %__nv_fmodf.exit2052
	mov.f32 	%f250, 0f00000000;
	setp.eq.s32 	%p70, %r179, 3;
	mov.f32 	%f37, %f250;
	mov.f32 	%f38, %f250;
	@%p70 bra 	$L__BB0_42;
// %bb.27:                              // %L525
	mul.lo.s32 	%r367, %r179, %r165;
	mul.hi.u32 	%r368, %r367, -1431655765;
	shr.u32 	%r369, %r368, 4;
	mul.lo.s32 	%r370, %r369, 24;
	sub.s32 	%r371, %r367, %r370;
	cvt.rn.f32.s32 	%f311, %r371;
	div.approx.f32 	%f18, %f311, %f260;
	abs.f32 	%f738, %f18;
	setp.lt.f32 	%p71, %f738, 0f40000000;
	@%p71 bra 	$L__BB0_39;
// %bb.28:
	setp.gtu.f32 	%p72, %f738, 0f4B800000;
	@%p72 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_29;
$L__BB0_35:
	mov.b32 	%r17, %f738;
	and.b32  	%r372, %r17, 8388607;
	or.b32  	%r3029, %r372, 1065353216;
	mov.b32 	%f737, %r3029;
	add.s32 	%r373, %r17, -1073741824;
	and.b32  	%r3030, %r373, -8388608;
	setp.eq.s32 	%p78, %r3030, 0;
	@%p78 bra 	$L__BB0_38;
// %bb.36:                              // %__nv_fmaf_rn.exit4.i.i.i2077.preheader
	mov.f32 	%f322, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f321,%f322;
	// end inline asm
$L__BB0_37:                             // %__nv_fmaf_rn.exit4.i.i.i2077
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r374, %r3030, 192937984;
	add.s32 	%r375, %r3029, %r374;
	mov.b32 	%f323, %r375;
	mul.f32 	%f324, %f321, %f323;
	sub.f32 	%f325, %f323, %f324;
	fma.rn.f32 	%f326, %f325, %f321, %f324;
	sub.f32 	%f327, %f323, %f326;
	fma.rz.f32 	%f328, %f327, %f321, %f326;
	cvt.rzi.f32.f32 	%f329, %f328;
	sub.f32 	%f737, %f323, %f329;
	sub.s32 	%r3030, %r3030, %r374;
	mov.b32 	%r3029, %f737;
	setp.ne.s32 	%p79, %r3030, 0;
	setp.ne.s32 	%p80, %r3029, 0;
	and.pred  	%p81, %p79, %p80;
	@%p81 bra 	$L__BB0_37;
$L__BB0_38:                             // %__internal_fmodf_slowpath_mod.exit.i.i2079
	setp.gt.u32 	%p82, %r17, 2139095039;
	selp.f32 	%f330, 0f7FFFFFFF, 0f4B800000, %p82;
	mul.f32 	%f331, %f737, 0f34000000;
	mul.f32 	%f738, %f330, %f331;
	bra.uni 	$L__BB0_39;
$L__BB0_29:                             // %__nv_fast_fdividef.exit.i.i.i2056
	mov.f32 	%f313, 0f40000000;
	div.approx.f32 	%f314, %f738, %f313;
	cvt.rzi.f32.f32 	%f736, %f314;
	fma.rn.f32 	%f21, %f736, 0fC0000000, %f738;
	mov.b32 	%r16, %f21;
	setp.lt.u32 	%p73, %r16, 1073741824;
	@%p73 bra 	$L__BB0_34;
// %bb.30:
	setp.lt.u32 	%p74, %r16, -2147483647;
	@%p74 bra 	$L__BB0_32;
// %bb.31:
	add.f32 	%f319, %f736, 0fBF800000;
	setp.lt.f32 	%p77, %f21, 0fC0000000;
	add.f32 	%f320, %f319, 0fBF800000;
	selp.f32 	%f736, %f320, %f319, %p77;
	bra.uni 	$L__BB0_34;
$L__BB0_32:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p75, %f21, 0f40800000;
	@%p75 bra 	$L__BB0_34;
// %bb.33:                              // %__nv_fmaf_rn.exit.i.i.i2060
	add.f32 	%f315, %f736, 0f3F800000;
	fma.rn.f32 	%f317, %f313, 0fC0400000, %f21;
	setp.ge.f32 	%p76, %f317, 0f00000000;
	add.f32 	%f318, %f315, 0f3F800000;
	selp.f32 	%f736, %f318, %f315, %p76;
$L__BB0_34:                             // %__internal_fmodf_fastpath_quot.exit.i.i2063
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_39:                             // %__internal_fmodf_kernel.exit.i2082
	abs.f32 	%f332, %f738;
	setp.gtu.f32 	%p83, %f332, 0f7F800000;
	@%p83 bra 	$L__BB0_41;
// %bb.40:
	mov.b32 	%r376, %f18;
	and.b32  	%r377, %r376, -2147483648;
	mov.b32 	%r378, %f738;
	or.b32  	%r379, %r377, %r378;
	mov.b32 	%f738, %r379;
$L__BB0_41:                             // %__nv_fmodf.exit2083
	add.f32 	%f333, %f738, %f738;
	mov.b32 	%r380, %f333;
	and.b32  	%r381, %r380, -2147483648;
	or.b32  	%r382, %r381, 1056964608;
	mov.b32 	%f334, %r382;
	add.f32 	%f335, %f333, %f334;
	cvt.rzi.f32.f32 	%f336, %f335;
	abs.f32 	%f337, %f333;
	setp.gt.f32 	%p84, %f337, 0f4B000000;
	selp.f32 	%f338, %f333, %f336, %p84;
	cvt.rzi.f32.f32 	%f339, %f333;
	setp.lt.f32 	%p85, %f337, 0f3F000000;
	selp.f32 	%f340, %f339, %f338, %p85;
	cvt.rzi.s32.f32 	%r383, %f340;
	fma.rn.f32 	%f341, %f340, 0fBF000000, %f738;
	mul.f32 	%f342, %f341, %f341;
	fma.rn.f32 	%f343, %f342, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f344, %f342, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f345, %f343, %f342, 0fC0A55DF6;
	fma.rn.f32 	%f346, %f344, %f342, 0f4081E0CF;
	fma.rn.f32 	%f347, %f342, %f341, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f342, 0fC09DE9E6;
	fma.rn.f32 	%f349, %f345, %f347, 0f00000000;
	fma.rn.f32 	%f350, %f348, %f342, 0f3F800000;
	fma.rn.f32 	%f351, %f341, 0f40490FDB, %f349;
	and.b32  	%r384, %r383, 1;
	setp.eq.b32 	%p86, %r384, 1;
	selp.f32 	%f352, %f350, %f351, %p86;
	selp.f32 	%f353, %f351, %f350, %p86;
	and.b32  	%r385, %r383, 2;
	setp.eq.s32 	%p87, %r385, 0;
	neg.f32 	%f354, %f352;
	selp.f32 	%f355, %f352, %f354, %p87;
	add.s32 	%r386, %r383, 1;
	and.b32  	%r387, %r386, 2;
	setp.eq.s32 	%p88, %r387, 0;
	mov.f32 	%f356, 0f00000000;
	sub.f32 	%f357, %f356, %f353;
	selp.f32 	%f358, %f353, %f357, %p88;
	cvt.rzi.f32.f32 	%f359, %f738;
	setp.eq.f32 	%p89, %f359, %f738;
	mul.f32 	%f360, %f738, 0f00000000;
	selp.f32 	%f38, %f360, %f355, %p89;
	abs.f32 	%f361, %f738;
	setp.gt.f32 	%p90, %f361, 0f4B800000;
	add.f32 	%f362, %f38, 0f3F800000;
	selp.f32 	%f37, %f362, %f358, %p90;
$L__BB0_42:                             // %L559
	and.b32  	%r26, %r165, 3;
	setp.eq.s32 	%p91, %r26, 3;
	mov.f32 	%f731, 0f3FC00000;
	mov.f32 	%f746, %f250;
	mov.f32 	%f755, %f250;
	@%p91 bra 	$L__BB0_58;
// %bb.43:                              // %L597
	mul.lo.s32 	%r394, %r178, %r26;
	cvt.u16.u32 	%rs11, %r394;
	mul.lo.s16 	%rs12, %rs11, 171;
	shr.u16 	%rs13, %rs12, 9;
	mul.lo.s16 	%rs14, %rs13, 3;
	sub.s16 	%rs15, %rs11, %rs14;
	and.b16  	%rs16, %rs15, 255;
	cvt.rn.f32.u16 	%f364, %rs16;
	div.approx.f32 	%f39, %f364, %f731;
	abs.f32 	%f744, %f39;
	setp.lt.f32 	%p92, %f744, 0f40000000;
	@%p92 bra 	$L__BB0_55;
// %bb.44:
	setp.gtu.f32 	%p93, %f744, 0f4B800000;
	@%p93 bra 	$L__BB0_51;
	bra.uni 	$L__BB0_45;
$L__BB0_51:
	mov.b32 	%r28, %f744;
	and.b32  	%r395, %r28, 8388607;
	or.b32  	%r3031, %r395, 1065353216;
	mov.b32 	%f743, %r3031;
	add.s32 	%r396, %r28, -1073741824;
	and.b32  	%r3032, %r396, -8388608;
	setp.eq.s32 	%p99, %r3032, 0;
	@%p99 bra 	$L__BB0_54;
// %bb.52:                              // %__nv_fmaf_rn.exit4.i.i.i2108.preheader
	mov.f32 	%f375, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f374,%f375;
	// end inline asm
$L__BB0_53:                             // %__nv_fmaf_rn.exit4.i.i.i2108
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r397, %r3032, 192937984;
	add.s32 	%r398, %r3031, %r397;
	mov.b32 	%f376, %r398;
	mul.f32 	%f377, %f374, %f376;
	sub.f32 	%f378, %f376, %f377;
	fma.rn.f32 	%f379, %f378, %f374, %f377;
	sub.f32 	%f380, %f376, %f379;
	fma.rz.f32 	%f381, %f380, %f374, %f379;
	cvt.rzi.f32.f32 	%f382, %f381;
	sub.f32 	%f743, %f376, %f382;
	sub.s32 	%r3032, %r3032, %r397;
	mov.b32 	%r3031, %f743;
	setp.ne.s32 	%p100, %r3032, 0;
	setp.ne.s32 	%p101, %r3031, 0;
	and.pred  	%p102, %p100, %p101;
	@%p102 bra 	$L__BB0_53;
$L__BB0_54:                             // %__internal_fmodf_slowpath_mod.exit.i.i2110
	setp.gt.u32 	%p103, %r28, 2139095039;
	selp.f32 	%f383, 0f7FFFFFFF, 0f4B800000, %p103;
	mul.f32 	%f384, %f743, 0f34000000;
	mul.f32 	%f744, %f383, %f384;
	bra.uni 	$L__BB0_55;
$L__BB0_45:                             // %__nv_fast_fdividef.exit.i.i.i2087
	mov.f32 	%f366, 0f40000000;
	div.approx.f32 	%f367, %f744, %f366;
	cvt.rzi.f32.f32 	%f742, %f367;
	fma.rn.f32 	%f42, %f742, 0fC0000000, %f744;
	mov.b32 	%r27, %f42;
	setp.lt.u32 	%p94, %r27, 1073741824;
	@%p94 bra 	$L__BB0_50;
// %bb.46:
	setp.lt.u32 	%p95, %r27, -2147483647;
	@%p95 bra 	$L__BB0_48;
// %bb.47:
	add.f32 	%f372, %f742, 0fBF800000;
	setp.lt.f32 	%p98, %f42, 0fC0000000;
	add.f32 	%f373, %f372, 0fBF800000;
	selp.f32 	%f742, %f373, %f372, %p98;
	bra.uni 	$L__BB0_50;
$L__BB0_48:
	add.f32 	%f742, %f742, 0f3F800000;
	setp.ltu.f32 	%p96, %f42, 0f40800000;
	@%p96 bra 	$L__BB0_50;
// %bb.49:                              // %__nv_fmaf_rn.exit.i.i.i2091
	add.f32 	%f368, %f742, 0f3F800000;
	fma.rn.f32 	%f370, %f366, 0fC0400000, %f42;
	setp.ge.f32 	%p97, %f370, 0f00000000;
	add.f32 	%f371, %f368, 0f3F800000;
	selp.f32 	%f742, %f371, %f368, %p97;
$L__BB0_50:                             // %__internal_fmodf_fastpath_quot.exit.i.i2094
	fma.rn.f32 	%f744, %f742, 0fC0000000, %f744;
$L__BB0_55:                             // %__internal_fmodf_kernel.exit.i2113
	abs.f32 	%f385, %f744;
	setp.gtu.f32 	%p104, %f385, 0f7F800000;
	@%p104 bra 	$L__BB0_57;
// %bb.56:
	mov.b32 	%r399, %f39;
	and.b32  	%r400, %r399, -2147483648;
	mov.b32 	%r401, %f744;
	or.b32  	%r402, %r400, %r401;
	mov.b32 	%f744, %r402;
$L__BB0_57:                             // %__nv_fmodf.exit2114
	add.f32 	%f386, %f744, %f744;
	mov.b32 	%r403, %f386;
	and.b32  	%r404, %r403, -2147483648;
	or.b32  	%r405, %r404, 1056964608;
	mov.b32 	%f387, %r405;
	add.f32 	%f388, %f386, %f387;
	cvt.rzi.f32.f32 	%f389, %f388;
	abs.f32 	%f390, %f386;
	setp.gt.f32 	%p105, %f390, 0f4B000000;
	selp.f32 	%f391, %f386, %f389, %p105;
	cvt.rzi.f32.f32 	%f392, %f386;
	setp.lt.f32 	%p106, %f390, 0f3F000000;
	selp.f32 	%f393, %f392, %f391, %p106;
	cvt.rzi.s32.f32 	%r406, %f393;
	fma.rn.f32 	%f394, %f393, 0fBF000000, %f744;
	mul.f32 	%f395, %f394, %f394;
	fma.rn.f32 	%f396, %f395, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f397, %f395, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f398, %f396, %f395, 0fC0A55DF6;
	fma.rn.f32 	%f399, %f397, %f395, 0f4081E0CF;
	fma.rn.f32 	%f400, %f395, %f394, 0f00000000;
	fma.rn.f32 	%f401, %f399, %f395, 0fC09DE9E6;
	fma.rn.f32 	%f402, %f398, %f400, 0f00000000;
	fma.rn.f32 	%f403, %f401, %f395, 0f3F800000;
	fma.rn.f32 	%f404, %f394, 0f40490FDB, %f402;
	and.b32  	%r407, %r406, 1;
	setp.eq.b32 	%p107, %r407, 1;
	selp.f32 	%f405, %f403, %f404, %p107;
	selp.f32 	%f406, %f404, %f403, %p107;
	and.b32  	%r408, %r406, 2;
	setp.eq.s32 	%p108, %r408, 0;
	neg.f32 	%f407, %f405;
	selp.f32 	%f408, %f405, %f407, %p108;
	add.s32 	%r409, %r406, 1;
	and.b32  	%r410, %r409, 2;
	setp.eq.s32 	%p109, %r410, 0;
	mov.f32 	%f409, 0f00000000;
	sub.f32 	%f410, %f409, %f406;
	selp.f32 	%f411, %f406, %f410, %p109;
	cvt.rzi.f32.f32 	%f412, %f744;
	setp.eq.f32 	%p110, %f412, %f744;
	mul.f32 	%f413, %f744, 0f00000000;
	selp.f32 	%f755, %f413, %f408, %p110;
	abs.f32 	%f414, %f744;
	setp.gt.f32 	%p111, %f414, 0f4B800000;
	add.f32 	%f415, %f755, 0f3F800000;
	selp.f32 	%f746, %f415, %f411, %p111;
$L__BB0_58:                             // %L631
	or.pred  	%p114, %p70, %p91;
	mov.f32 	%f752, %f250;
	mov.f32 	%f757, %f250;
	@%p114 bra 	$L__BB0_74;
// %bb.59:                              // %L639
	mul.lo.s32 	%r411, %r179, %r26;
	mul.hi.u32 	%r412, %r411, -1431655765;
	shr.u32 	%r413, %r412, 1;
	mul.lo.s32 	%r414, %r413, 3;
	sub.s32 	%r415, %r411, %r414;
	cvt.rn.f32.s32 	%f417, %r415;
	div.approx.f32 	%f60, %f417, %f731;
	abs.f32 	%f750, %f60;
	setp.lt.f32 	%p115, %f750, 0f40000000;
	@%p115 bra 	$L__BB0_71;
// %bb.60:
	setp.gtu.f32 	%p116, %f750, 0f4B800000;
	@%p116 bra 	$L__BB0_67;
	bra.uni 	$L__BB0_61;
$L__BB0_67:
	mov.b32 	%r36, %f750;
	and.b32  	%r416, %r36, 8388607;
	or.b32  	%r3033, %r416, 1065353216;
	mov.b32 	%f749, %r3033;
	add.s32 	%r417, %r36, -1073741824;
	and.b32  	%r3034, %r417, -8388608;
	setp.eq.s32 	%p122, %r3034, 0;
	@%p122 bra 	$L__BB0_70;
// %bb.68:                              // %__nv_fmaf_rn.exit4.i.i.i2139.preheader
	mov.f32 	%f428, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f427,%f428;
	// end inline asm
$L__BB0_69:                             // %__nv_fmaf_rn.exit4.i.i.i2139
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r418, %r3034, 192937984;
	add.s32 	%r419, %r3033, %r418;
	mov.b32 	%f429, %r419;
	mul.f32 	%f430, %f427, %f429;
	sub.f32 	%f431, %f429, %f430;
	fma.rn.f32 	%f432, %f431, %f427, %f430;
	sub.f32 	%f433, %f429, %f432;
	fma.rz.f32 	%f434, %f433, %f427, %f432;
	cvt.rzi.f32.f32 	%f435, %f434;
	sub.f32 	%f749, %f429, %f435;
	sub.s32 	%r3034, %r3034, %r418;
	mov.b32 	%r3033, %f749;
	setp.ne.s32 	%p123, %r3034, 0;
	setp.ne.s32 	%p124, %r3033, 0;
	and.pred  	%p125, %p123, %p124;
	@%p125 bra 	$L__BB0_69;
$L__BB0_70:                             // %__internal_fmodf_slowpath_mod.exit.i.i2141
	setp.gt.u32 	%p126, %r36, 2139095039;
	selp.f32 	%f436, 0f7FFFFFFF, 0f4B800000, %p126;
	mul.f32 	%f437, %f749, 0f34000000;
	mul.f32 	%f750, %f436, %f437;
	bra.uni 	$L__BB0_71;
$L__BB0_61:                             // %__nv_fast_fdividef.exit.i.i.i2118
	mov.f32 	%f419, 0f40000000;
	div.approx.f32 	%f420, %f750, %f419;
	cvt.rzi.f32.f32 	%f748, %f420;
	fma.rn.f32 	%f63, %f748, 0fC0000000, %f750;
	mov.b32 	%r35, %f63;
	setp.lt.u32 	%p117, %r35, 1073741824;
	@%p117 bra 	$L__BB0_66;
// %bb.62:
	setp.lt.u32 	%p118, %r35, -2147483647;
	@%p118 bra 	$L__BB0_64;
// %bb.63:
	add.f32 	%f425, %f748, 0fBF800000;
	setp.lt.f32 	%p121, %f63, 0fC0000000;
	add.f32 	%f426, %f425, 0fBF800000;
	selp.f32 	%f748, %f426, %f425, %p121;
	bra.uni 	$L__BB0_66;
$L__BB0_64:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p119, %f63, 0f40800000;
	@%p119 bra 	$L__BB0_66;
// %bb.65:                              // %__nv_fmaf_rn.exit.i.i.i2122
	add.f32 	%f421, %f748, 0f3F800000;
	fma.rn.f32 	%f423, %f419, 0fC0400000, %f63;
	setp.ge.f32 	%p120, %f423, 0f00000000;
	add.f32 	%f424, %f421, 0f3F800000;
	selp.f32 	%f748, %f424, %f421, %p120;
$L__BB0_66:                             // %__internal_fmodf_fastpath_quot.exit.i.i2125
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_71:                             // %__internal_fmodf_kernel.exit.i2144
	abs.f32 	%f438, %f750;
	setp.gtu.f32 	%p127, %f438, 0f7F800000;
	@%p127 bra 	$L__BB0_73;
// %bb.72:
	mov.b32 	%r420, %f60;
	and.b32  	%r421, %r420, -2147483648;
	mov.b32 	%r422, %f750;
	or.b32  	%r423, %r421, %r422;
	mov.b32 	%f750, %r423;
$L__BB0_73:                             // %__nv_fmodf.exit2145
	add.f32 	%f439, %f750, %f750;
	mov.b32 	%r424, %f439;
	and.b32  	%r425, %r424, -2147483648;
	or.b32  	%r426, %r425, 1056964608;
	mov.b32 	%f440, %r426;
	add.f32 	%f441, %f439, %f440;
	cvt.rzi.f32.f32 	%f442, %f441;
	abs.f32 	%f443, %f439;
	setp.gt.f32 	%p128, %f443, 0f4B000000;
	selp.f32 	%f444, %f439, %f442, %p128;
	cvt.rzi.f32.f32 	%f445, %f439;
	setp.lt.f32 	%p129, %f443, 0f3F000000;
	selp.f32 	%f446, %f445, %f444, %p129;
	cvt.rzi.s32.f32 	%r427, %f446;
	fma.rn.f32 	%f447, %f446, 0fBF000000, %f750;
	mul.f32 	%f448, %f447, %f447;
	fma.rn.f32 	%f449, %f448, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f450, %f448, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f451, %f449, %f448, 0fC0A55DF6;
	fma.rn.f32 	%f452, %f450, %f448, 0f4081E0CF;
	fma.rn.f32 	%f453, %f448, %f447, 0f00000000;
	fma.rn.f32 	%f454, %f452, %f448, 0fC09DE9E6;
	fma.rn.f32 	%f455, %f451, %f453, 0f00000000;
	fma.rn.f32 	%f456, %f454, %f448, 0f3F800000;
	fma.rn.f32 	%f457, %f447, 0f40490FDB, %f455;
	and.b32  	%r428, %r427, 1;
	setp.eq.b32 	%p130, %r428, 1;
	selp.f32 	%f458, %f456, %f457, %p130;
	selp.f32 	%f459, %f457, %f456, %p130;
	and.b32  	%r429, %r427, 2;
	setp.eq.s32 	%p131, %r429, 0;
	neg.f32 	%f460, %f458;
	selp.f32 	%f461, %f458, %f460, %p131;
	add.s32 	%r430, %r427, 1;
	and.b32  	%r431, %r430, 2;
	setp.eq.s32 	%p132, %r431, 0;
	mov.f32 	%f462, 0f00000000;
	sub.f32 	%f463, %f462, %f459;
	selp.f32 	%f464, %f459, %f463, %p132;
	cvt.rzi.f32.f32 	%f465, %f750;
	setp.eq.f32 	%p133, %f465, %f750;
	mul.f32 	%f466, %f750, 0f00000000;
	selp.f32 	%f757, %f466, %f461, %p133;
	abs.f32 	%f467, %f750;
	setp.gt.f32 	%p134, %f467, 0f4B800000;
	add.f32 	%f468, %f757, 0f3F800000;
	selp.f32 	%f752, %f468, %f464, %p134;
$L__BB0_74:                             // %L673
	and.b32  	%r43, %r312, 2;
	setp.eq.s32 	%p135, %r43, 0;
	mov.f32 	%f83, %f746;
	mov.f32 	%f85, %f752;
	@%p135 bra 	$L__BB0_76;
// %bb.75:                              // %L682
	neg.f32 	%f85, %f757;
	neg.f32 	%f83, %f755;
	mov.f32 	%f755, %f746;
	mov.f32 	%f757, %f752;
$L__BB0_76:                             // %L684
	@%p30 bra 	$L__BB0_193;
// %bb.77:
	@%p306 bra 	$L__BB0_189;
	bra.uni 	$L__BB0_78;
$L__BB0_189:
	mov.b32 	%r181, %f788;
	and.b32  	%r438, %r181, 8388607;
	or.b32  	%r3079, %r438, 1065353216;
	mov.b32 	%f787, %r3079;
	add.s32 	%r439, %r181, -1073741824;
	and.b32  	%r3080, %r439, -8388608;
	setp.eq.s32 	%p143, %r3080, 0;
	@%p143 bra 	$L__BB0_192;
// %bb.190:                             // %__nv_fmaf_rn.exit4.i.i.i2170.preheader
	mov.f32 	%f478, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f477,%f478;
	// end inline asm
$L__BB0_191:                            // %__nv_fmaf_rn.exit4.i.i.i2170
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r440, %r3080, 192937984;
	add.s32 	%r441, %r3079, %r440;
	mov.b32 	%f479, %r441;
	mul.f32 	%f480, %f477, %f479;
	sub.f32 	%f481, %f479, %f480;
	fma.rn.f32 	%f482, %f481, %f477, %f480;
	sub.f32 	%f483, %f479, %f482;
	fma.rz.f32 	%f484, %f483, %f477, %f482;
	cvt.rzi.f32.f32 	%f485, %f484;
	sub.f32 	%f787, %f479, %f485;
	sub.s32 	%r3080, %r3080, %r440;
	mov.b32 	%r3079, %f787;
	setp.ne.s32 	%p144, %r3080, 0;
	setp.ne.s32 	%p145, %r3079, 0;
	and.pred  	%p146, %p144, %p145;
	@%p146 bra 	$L__BB0_191;
$L__BB0_192:                            // %__internal_fmodf_slowpath_mod.exit.i.i2172
	setp.gt.u32 	%p147, %r181, 2139095039;
	selp.f32 	%f486, 0f7FFFFFFF, 0f4B800000, %p147;
	mul.f32 	%f487, %f787, 0f34000000;
	mul.f32 	%f788, %f486, %f487;
	bra.uni 	$L__BB0_193;
$L__BB0_78:                             // %__nv_fast_fdividef.exit.i.i.i2149
	mov.f32 	%f469, 0f40000000;
	div.approx.f32 	%f470, %f788, %f469;
	cvt.rzi.f32.f32 	%f786, %f470;
	fma.rn.f32 	%f189, %f786, 0fC0000000, %f788;
	mov.b32 	%r180, %f189;
	setp.lt.u32 	%p138, %r180, 1073741824;
	@%p138 bra 	$L__BB0_188;
// %bb.79:
	setp.lt.u32 	%p139, %r180, -2147483647;
	@%p139 bra 	$L__BB0_186;
// %bb.80:
	add.f32 	%f475, %f786, 0fBF800000;
	setp.lt.f32 	%p142, %f189, 0fC0000000;
	add.f32 	%f476, %f475, 0fBF800000;
	selp.f32 	%f786, %f476, %f475, %p142;
	bra.uni 	$L__BB0_188;
$L__BB0_186:
	add.f32 	%f786, %f786, 0f3F800000;
	setp.ltu.f32 	%p140, %f189, 0f40800000;
	@%p140 bra 	$L__BB0_188;
// %bb.187:                             // %__nv_fmaf_rn.exit.i.i.i2153
	add.f32 	%f471, %f786, 0f3F800000;
	fma.rn.f32 	%f473, %f469, 0fC0400000, %f189;
	setp.ge.f32 	%p141, %f473, 0f00000000;
	add.f32 	%f474, %f471, 0f3F800000;
	selp.f32 	%f786, %f474, %f471, %p141;
$L__BB0_188:                            // %__internal_fmodf_fastpath_quot.exit.i.i2156
	fma.rn.f32 	%f788, %f786, 0fC0000000, %f788;
$L__BB0_193:                            // %__internal_fmodf_kernel.exit.i2175
	abs.f32 	%f488, %f788;
	setp.gtu.f32 	%p148, %f488, 0f7F800000;
	@%p148 bra 	$L__BB0_195;
// %bb.194:
	mov.b32 	%r442, %f788;
	or.b32  	%r443, %r174, %r442;
	mov.b32 	%f788, %r443;
$L__BB0_195:                            // %__nv_fmodf.exit2176
	mov.f32 	%f512, 0f00000000;
	mov.f32 	%f521, 0f41000000;
	div.approx.f32 	%f203, %f512, %f521;
	abs.f32 	%f760, %f203;
	setp.lt.f32 	%p156, %f760, 0f40000000;
	@%p156 bra 	$L__BB0_92;
// %bb.81:
	setp.gtu.f32 	%p157, %f760, 0f4B800000;
	@%p157 bra 	$L__BB0_88;
	bra.uni 	$L__BB0_82;
$L__BB0_88:
	mov.b32 	%r47, %f760;
	and.b32  	%r458, %r47, 8388607;
	or.b32  	%r3035, %r458, 1065353216;
	mov.b32 	%f759, %r3035;
	add.s32 	%r459, %r47, -1073741824;
	and.b32  	%r3036, %r459, -8388608;
	setp.eq.s32 	%p163, %r3036, 0;
	@%p163 bra 	$L__BB0_91;
// %bb.89:                              // %__nv_fmaf_rn.exit4.i.i.i2201.preheader
	mov.f32 	%f531, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f530,%f531;
	// end inline asm
$L__BB0_90:                             // %__nv_fmaf_rn.exit4.i.i.i2201
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r460, %r3036, 192937984;
	add.s32 	%r461, %r3035, %r460;
	mov.b32 	%f532, %r461;
	mul.f32 	%f533, %f530, %f532;
	sub.f32 	%f534, %f532, %f533;
	fma.rn.f32 	%f535, %f534, %f530, %f533;
	sub.f32 	%f536, %f532, %f535;
	fma.rz.f32 	%f537, %f536, %f530, %f535;
	cvt.rzi.f32.f32 	%f538, %f537;
	sub.f32 	%f759, %f532, %f538;
	sub.s32 	%r3036, %r3036, %r460;
	mov.b32 	%r3035, %f759;
	setp.ne.s32 	%p164, %r3036, 0;
	setp.ne.s32 	%p165, %r3035, 0;
	and.pred  	%p166, %p164, %p165;
	@%p166 bra 	$L__BB0_90;
$L__BB0_91:                             // %__internal_fmodf_slowpath_mod.exit.i.i2203
	setp.gt.u32 	%p167, %r47, 2139095039;
	selp.f32 	%f539, 0f7FFFFFFF, 0f4B800000, %p167;
	mul.f32 	%f540, %f759, 0f34000000;
	mul.f32 	%f760, %f539, %f540;
	bra.uni 	$L__BB0_92;
$L__BB0_82:                             // %__nv_fast_fdividef.exit.i.i.i2180
	mov.f32 	%f522, 0f40000000;
	div.approx.f32 	%f523, %f760, %f522;
	cvt.rzi.f32.f32 	%f758, %f523;
	fma.rn.f32 	%f88, %f758, 0fC0000000, %f760;
	mov.b32 	%r46, %f88;
	setp.lt.u32 	%p158, %r46, 1073741824;
	@%p158 bra 	$L__BB0_87;
// %bb.83:
	setp.lt.u32 	%p159, %r46, -2147483647;
	@%p159 bra 	$L__BB0_85;
// %bb.84:
	add.f32 	%f528, %f758, 0fBF800000;
	setp.lt.f32 	%p162, %f88, 0fC0000000;
	add.f32 	%f529, %f528, 0fBF800000;
	selp.f32 	%f758, %f529, %f528, %p162;
	bra.uni 	$L__BB0_87;
$L__BB0_85:
	add.f32 	%f758, %f758, 0f3F800000;
	setp.ltu.f32 	%p160, %f88, 0f40800000;
	@%p160 bra 	$L__BB0_87;
// %bb.86:                              // %__nv_fmaf_rn.exit.i.i.i2184
	add.f32 	%f524, %f758, 0f3F800000;
	fma.rn.f32 	%f526, %f522, 0fC0400000, %f88;
	setp.ge.f32 	%p161, %f526, 0f00000000;
	add.f32 	%f527, %f524, 0f3F800000;
	selp.f32 	%f758, %f527, %f524, %p161;
$L__BB0_87:                             // %__internal_fmodf_fastpath_quot.exit.i.i2187
	fma.rn.f32 	%f760, %f758, 0fC0000000, %f760;
$L__BB0_92:                             // %__internal_fmodf_kernel.exit.i2206
	abs.f32 	%f541, %f760;
	setp.gtu.f32 	%p168, %f541, 0f7F800000;
	@%p168 bra 	$L__BB0_94;
// %bb.93:
	mov.b32 	%r462, %f203;
	and.b32  	%r463, %r462, -2147483648;
	mov.b32 	%r464, %f760;
	or.b32  	%r465, %r463, %r464;
	mov.b32 	%f760, %r465;
$L__BB0_94:                             // %__nv_fmodf.exit2207
	cvt.rn.f32.s32 	%f572, %r165;
	div.approx.f32 	%f104, %f572, %f521;
	abs.f32 	%f764, %f104;
	setp.lt.f32 	%p176, %f764, 0f40000000;
	@%p176 bra 	$L__BB0_106;
// %bb.95:
	setp.gtu.f32 	%p177, %f764, 0f4B800000;
	@%p177 bra 	$L__BB0_102;
	bra.uni 	$L__BB0_96;
$L__BB0_102:
	mov.b32 	%r55, %f764;
	and.b32  	%r474, %r55, 8388607;
	or.b32  	%r3037, %r474, 1065353216;
	mov.b32 	%f763, %r3037;
	add.s32 	%r475, %r55, -1073741824;
	and.b32  	%r3038, %r475, -8388608;
	setp.eq.s32 	%p183, %r3038, 0;
	@%p183 bra 	$L__BB0_105;
// %bb.103:                             // %__nv_fmaf_rn.exit4.i.i.i2232.preheader
	mov.f32 	%f583, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f582,%f583;
	// end inline asm
$L__BB0_104:                            // %__nv_fmaf_rn.exit4.i.i.i2232
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r476, %r3038, 192937984;
	add.s32 	%r477, %r3037, %r476;
	mov.b32 	%f584, %r477;
	mul.f32 	%f585, %f582, %f584;
	sub.f32 	%f586, %f584, %f585;
	fma.rn.f32 	%f587, %f586, %f582, %f585;
	sub.f32 	%f588, %f584, %f587;
	fma.rz.f32 	%f589, %f588, %f582, %f587;
	cvt.rzi.f32.f32 	%f590, %f589;
	sub.f32 	%f763, %f584, %f590;
	sub.s32 	%r3038, %r3038, %r476;
	mov.b32 	%r3037, %f763;
	setp.ne.s32 	%p184, %r3038, 0;
	setp.ne.s32 	%p185, %r3037, 0;
	and.pred  	%p186, %p184, %p185;
	@%p186 bra 	$L__BB0_104;
$L__BB0_105:                            // %__internal_fmodf_slowpath_mod.exit.i.i2234
	setp.gt.u32 	%p187, %r55, 2139095039;
	selp.f32 	%f591, 0f7FFFFFFF, 0f4B800000, %p187;
	mul.f32 	%f592, %f763, 0f34000000;
	mul.f32 	%f764, %f591, %f592;
	bra.uni 	$L__BB0_106;
$L__BB0_96:                             // %__nv_fast_fdividef.exit.i.i.i2211
	mov.f32 	%f574, 0f40000000;
	div.approx.f32 	%f575, %f764, %f574;
	cvt.rzi.f32.f32 	%f762, %f575;
	fma.rn.f32 	%f107, %f762, 0fC0000000, %f764;
	mov.b32 	%r54, %f107;
	setp.lt.u32 	%p178, %r54, 1073741824;
	@%p178 bra 	$L__BB0_101;
// %bb.97:
	setp.lt.u32 	%p179, %r54, -2147483647;
	@%p179 bra 	$L__BB0_99;
// %bb.98:
	add.f32 	%f580, %f762, 0fBF800000;
	setp.lt.f32 	%p182, %f107, 0fC0000000;
	add.f32 	%f581, %f580, 0fBF800000;
	selp.f32 	%f762, %f581, %f580, %p182;
	bra.uni 	$L__BB0_101;
$L__BB0_99:
	add.f32 	%f762, %f762, 0f3F800000;
	setp.ltu.f32 	%p180, %f107, 0f40800000;
	@%p180 bra 	$L__BB0_101;
// %bb.100:                             // %__nv_fmaf_rn.exit.i.i.i2215
	add.f32 	%f576, %f762, 0f3F800000;
	fma.rn.f32 	%f578, %f574, 0fC0400000, %f107;
	setp.ge.f32 	%p181, %f578, 0f00000000;
	add.f32 	%f579, %f576, 0f3F800000;
	selp.f32 	%f762, %f579, %f576, %p181;
$L__BB0_101:                            // %__internal_fmodf_fastpath_quot.exit.i.i2218
	fma.rn.f32 	%f764, %f762, 0fC0000000, %f764;
$L__BB0_106:                            // %__internal_fmodf_kernel.exit.i2237
	abs.f32 	%f593, %f764;
	setp.gtu.f32 	%p188, %f593, 0f7F800000;
	@%p188 bra 	$L__BB0_108;
// %bb.107:
	mov.b32 	%r478, %f104;
	and.b32  	%r479, %r478, -2147483648;
	mov.b32 	%r480, %f764;
	or.b32  	%r481, %r479, %r480;
	mov.b32 	%f764, %r481;
$L__BB0_108:                            // %__nv_fmodf.exit2238
	and.b32  	%r65, %r312, 1;
	shr.u32 	%r66, %r312, 4;
	setp.ne.s32 	%p196, %r65, %r66;
	mov.f32 	%f770, %f512;
	mov.f32 	%f779, %f512;
	@%p196 bra 	$L__BB0_124;
// %bb.109:                             // %L889
	mov.f32 	%f626, 0f3F800000;
	mov.f32 	%f627, 0f00000000;
	div.approx.f32 	%f121, %f627, %f626;
	abs.f32 	%f768, %f121;
	setp.lt.f32 	%p197, %f768, 0f40000000;
	@%p197 bra 	$L__BB0_121;
// %bb.110:
	setp.gtu.f32 	%p198, %f768, 0f4B800000;
	@%p198 bra 	$L__BB0_117;
	bra.uni 	$L__BB0_111;
$L__BB0_117:
	mov.b32 	%r68, %f768;
	and.b32  	%r496, %r68, 8388607;
	or.b32  	%r3039, %r496, 1065353216;
	mov.b32 	%f767, %r3039;
	add.s32 	%r497, %r68, -1073741824;
	and.b32  	%r3040, %r497, -8388608;
	setp.eq.s32 	%p204, %r3040, 0;
	@%p204 bra 	$L__BB0_120;
// %bb.118:                             // %__nv_fmaf_rn.exit4.i.i.i2263.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f636,%f626;
	// end inline asm
$L__BB0_119:                            // %__nv_fmaf_rn.exit4.i.i.i2263
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r498, %r3040, 192937984;
	add.s32 	%r499, %r3039, %r498;
	mov.b32 	%f638, %r499;
	mul.f32 	%f639, %f636, %f638;
	sub.f32 	%f640, %f638, %f639;
	fma.rn.f32 	%f641, %f640, %f636, %f639;
	sub.f32 	%f642, %f638, %f641;
	fma.rz.f32 	%f643, %f642, %f636, %f641;
	cvt.rzi.f32.f32 	%f644, %f643;
	sub.f32 	%f767, %f638, %f644;
	sub.s32 	%r3040, %r3040, %r498;
	mov.b32 	%r3039, %f767;
	setp.ne.s32 	%p205, %r3040, 0;
	setp.ne.s32 	%p206, %r3039, 0;
	and.pred  	%p207, %p205, %p206;
	@%p207 bra 	$L__BB0_119;
$L__BB0_120:                            // %__internal_fmodf_slowpath_mod.exit.i.i2265
	setp.gt.u32 	%p208, %r68, 2139095039;
	selp.f32 	%f645, 0f7FFFFFFF, 0f4B800000, %p208;
	mul.f32 	%f646, %f767, 0f34000000;
	mul.f32 	%f768, %f645, %f646;
	bra.uni 	$L__BB0_121;
$L__BB0_111:                            // %__nv_fast_fdividef.exit.i.i.i2242
	mov.f32 	%f628, 0f40000000;
	div.approx.f32 	%f629, %f768, %f628;
	cvt.rzi.f32.f32 	%f766, %f629;
	fma.rn.f32 	%f124, %f766, 0fC0000000, %f768;
	mov.b32 	%r67, %f124;
	setp.lt.u32 	%p199, %r67, 1073741824;
	@%p199 bra 	$L__BB0_116;
// %bb.112:
	setp.lt.u32 	%p200, %r67, -2147483647;
	@%p200 bra 	$L__BB0_114;
// %bb.113:
	add.f32 	%f634, %f766, 0fBF800000;
	setp.lt.f32 	%p203, %f124, 0fC0000000;
	add.f32 	%f635, %f634, 0fBF800000;
	selp.f32 	%f766, %f635, %f634, %p203;
	bra.uni 	$L__BB0_116;
$L__BB0_114:
	add.f32 	%f766, %f766, 0f3F800000;
	setp.ltu.f32 	%p201, %f124, 0f40800000;
	@%p201 bra 	$L__BB0_116;
// %bb.115:                             // %__nv_fmaf_rn.exit.i.i.i2246
	add.f32 	%f630, %f766, 0f3F800000;
	fma.rn.f32 	%f632, %f628, 0fC0400000, %f124;
	setp.ge.f32 	%p202, %f632, 0f00000000;
	add.f32 	%f633, %f630, 0f3F800000;
	selp.f32 	%f766, %f633, %f630, %p202;
$L__BB0_116:                            // %__internal_fmodf_fastpath_quot.exit.i.i2249
	fma.rn.f32 	%f768, %f766, 0fC0000000, %f768;
$L__BB0_121:                            // %__internal_fmodf_kernel.exit.i2268
	abs.f32 	%f647, %f768;
	setp.gtu.f32 	%p209, %f647, 0f7F800000;
	@%p209 bra 	$L__BB0_123;
// %bb.122:
	mov.b32 	%r500, %f121;
	and.b32  	%r501, %r500, -2147483648;
	mov.b32 	%r502, %f768;
	or.b32  	%r503, %r501, %r502;
	mov.b32 	%f768, %r503;
$L__BB0_123:                            // %__nv_fmodf.exit2269
	add.f32 	%f648, %f768, %f768;
	mov.b32 	%r504, %f648;
	and.b32  	%r505, %r504, -2147483648;
	or.b32  	%r506, %r505, 1056964608;
	mov.b32 	%f649, %r506;
	add.f32 	%f650, %f648, %f649;
	cvt.rzi.f32.f32 	%f651, %f650;
	abs.f32 	%f652, %f648;
	setp.gt.f32 	%p210, %f652, 0f4B000000;
	selp.f32 	%f653, %f648, %f651, %p210;
	cvt.rzi.f32.f32 	%f654, %f648;
	setp.lt.f32 	%p211, %f652, 0f3F000000;
	selp.f32 	%f655, %f654, %f653, %p211;
	cvt.rzi.s32.f32 	%r507, %f655;
	fma.rn.f32 	%f656, %f655, 0fBF000000, %f768;
	mul.f32 	%f657, %f656, %f656;
	fma.rn.f32 	%f658, %f657, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f659, %f657, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f660, %f658, %f657, 0fC0A55DF6;
	fma.rn.f32 	%f661, %f659, %f657, 0f4081E0CF;
	fma.rn.f32 	%f662, %f657, %f656, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f657, 0fC09DE9E6;
	fma.rn.f32 	%f664, %f660, %f662, 0f00000000;
	fma.rn.f32 	%f665, %f663, %f657, 0f3F800000;
	fma.rn.f32 	%f666, %f656, 0f40490FDB, %f664;
	and.b32  	%r508, %r507, 1;
	setp.eq.b32 	%p212, %r508, 1;
	selp.f32 	%f667, %f665, %f666, %p212;
	selp.f32 	%f668, %f666, %f665, %p212;
	and.b32  	%r509, %r507, 2;
	setp.eq.s32 	%p213, %r509, 0;
	neg.f32 	%f669, %f667;
	selp.f32 	%f670, %f667, %f669, %p213;
	add.s32 	%r510, %r507, 1;
	and.b32  	%r511, %r510, 2;
	setp.eq.s32 	%p214, %r511, 0;
	sub.f32 	%f672, %f627, %f668;
	selp.f32 	%f673, %f668, %f672, %p214;
	cvt.rzi.f32.f32 	%f674, %f768;
	setp.eq.f32 	%p215, %f674, %f768;
	mul.f32 	%f675, %f768, 0f00000000;
	selp.f32 	%f779, %f675, %f670, %p215;
	abs.f32 	%f676, %f768;
	setp.gt.f32 	%p216, %f676, 0f4B800000;
	add.f32 	%f677, %f779, 0f3F800000;
	selp.f32 	%f770, %f677, %f673, %p216;
$L__BB0_124:                            // %L928
	and.b32  	%r64, %r165, 1;
	mov.f32 	%f776, %f512;
	mov.f32 	%f781, %f512;
	@%p196 bra 	$L__BB0_140;
// %bb.125:                             // %L931
	cvt.rn.f32.s32 	%f679, %r64;
	mov.f32 	%f680, 0f3F800000;
	div.approx.f32 	%f142, %f679, %f680;
	abs.f32 	%f774, %f142;
	setp.lt.f32 	%p218, %f774, 0f40000000;
	@%p218 bra 	$L__BB0_137;
// %bb.126:
	setp.gtu.f32 	%p219, %f774, 0f4B800000;
	@%p219 bra 	$L__BB0_133;
	bra.uni 	$L__BB0_127;
$L__BB0_133:
	mov.b32 	%r76, %f774;
	and.b32  	%r512, %r76, 8388607;
	or.b32  	%r3041, %r512, 1065353216;
	mov.b32 	%f773, %r3041;
	add.s32 	%r513, %r76, -1073741824;
	and.b32  	%r3042, %r513, -8388608;
	setp.eq.s32 	%p225, %r3042, 0;
	@%p225 bra 	$L__BB0_136;
// %bb.134:                             // %__nv_fmaf_rn.exit4.i.i.i2294.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f689,%f680;
	// end inline asm
$L__BB0_135:                            // %__nv_fmaf_rn.exit4.i.i.i2294
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r514, %r3042, 192937984;
	add.s32 	%r515, %r3041, %r514;
	mov.b32 	%f691, %r515;
	mul.f32 	%f692, %f689, %f691;
	sub.f32 	%f693, %f691, %f692;
	fma.rn.f32 	%f694, %f693, %f689, %f692;
	sub.f32 	%f695, %f691, %f694;
	fma.rz.f32 	%f696, %f695, %f689, %f694;
	cvt.rzi.f32.f32 	%f697, %f696;
	sub.f32 	%f773, %f691, %f697;
	sub.s32 	%r3042, %r3042, %r514;
	mov.b32 	%r3041, %f773;
	setp.ne.s32 	%p226, %r3042, 0;
	setp.ne.s32 	%p227, %r3041, 0;
	and.pred  	%p228, %p226, %p227;
	@%p228 bra 	$L__BB0_135;
$L__BB0_136:                            // %__internal_fmodf_slowpath_mod.exit.i.i2296
	setp.gt.u32 	%p229, %r76, 2139095039;
	selp.f32 	%f698, 0f7FFFFFFF, 0f4B800000, %p229;
	mul.f32 	%f699, %f773, 0f34000000;
	mul.f32 	%f774, %f698, %f699;
	bra.uni 	$L__BB0_137;
$L__BB0_127:                            // %__nv_fast_fdividef.exit.i.i.i2273
	mov.f32 	%f681, 0f40000000;
	div.approx.f32 	%f682, %f774, %f681;
	cvt.rzi.f32.f32 	%f772, %f682;
	fma.rn.f32 	%f145, %f772, 0fC0000000, %f774;
	mov.b32 	%r75, %f145;
	setp.lt.u32 	%p220, %r75, 1073741824;
	@%p220 bra 	$L__BB0_132;
// %bb.128:
	setp.lt.u32 	%p221, %r75, -2147483647;
	@%p221 bra 	$L__BB0_130;
// %bb.129:
	add.f32 	%f687, %f772, 0fBF800000;
	setp.lt.f32 	%p224, %f145, 0fC0000000;
	add.f32 	%f688, %f687, 0fBF800000;
	selp.f32 	%f772, %f688, %f687, %p224;
	bra.uni 	$L__BB0_132;
$L__BB0_130:
	add.f32 	%f772, %f772, 0f3F800000;
	setp.ltu.f32 	%p222, %f145, 0f40800000;
	@%p222 bra 	$L__BB0_132;
// %bb.131:                             // %__nv_fmaf_rn.exit.i.i.i2277
	add.f32 	%f683, %f772, 0f3F800000;
	fma.rn.f32 	%f685, %f681, 0fC0400000, %f145;
	setp.ge.f32 	%p223, %f685, 0f00000000;
	add.f32 	%f686, %f683, 0f3F800000;
	selp.f32 	%f772, %f686, %f683, %p223;
$L__BB0_132:                            // %__internal_fmodf_fastpath_quot.exit.i.i2280
	fma.rn.f32 	%f774, %f772, 0fC0000000, %f774;
$L__BB0_137:                            // %__internal_fmodf_kernel.exit.i2299
	abs.f32 	%f700, %f774;
	setp.gtu.f32 	%p230, %f700, 0f7F800000;
	@%p230 bra 	$L__BB0_139;
// %bb.138:
	mov.b32 	%r516, %f142;
	and.b32  	%r517, %r516, -2147483648;
	mov.b32 	%r518, %f774;
	or.b32  	%r519, %r517, %r518;
	mov.b32 	%f774, %r519;
$L__BB0_139:                            // %__nv_fmodf.exit2300
	add.f32 	%f701, %f774, %f774;
	mov.b32 	%r520, %f701;
	and.b32  	%r521, %r520, -2147483648;
	or.b32  	%r522, %r521, 1056964608;
	mov.b32 	%f702, %r522;
	add.f32 	%f703, %f701, %f702;
	cvt.rzi.f32.f32 	%f704, %f703;
	abs.f32 	%f705, %f701;
	setp.gt.f32 	%p231, %f705, 0f4B000000;
	selp.f32 	%f706, %f701, %f704, %p231;
	cvt.rzi.f32.f32 	%f707, %f701;
	setp.lt.f32 	%p232, %f705, 0f3F000000;
	selp.f32 	%f708, %f707, %f706, %p232;
	cvt.rzi.s32.f32 	%r523, %f708;
	fma.rn.f32 	%f709, %f708, 0fBF000000, %f774;
	mul.f32 	%f710, %f709, %f709;
	fma.rn.f32 	%f711, %f710, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f712, %f710, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f713, %f711, %f710, 0fC0A55DF6;
	fma.rn.f32 	%f714, %f712, %f710, 0f4081E0CF;
	fma.rn.f32 	%f715, %f710, %f709, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f710, 0fC09DE9E6;
	fma.rn.f32 	%f717, %f713, %f715, 0f00000000;
	fma.rn.f32 	%f718, %f716, %f710, 0f3F800000;
	fma.rn.f32 	%f719, %f709, 0f40490FDB, %f717;
	and.b32  	%r524, %r523, 1;
	setp.eq.b32 	%p233, %r524, 1;
	selp.f32 	%f720, %f718, %f719, %p233;
	selp.f32 	%f721, %f719, %f718, %p233;
	and.b32  	%r525, %r523, 2;
	setp.eq.s32 	%p234, %r525, 0;
	neg.f32 	%f722, %f720;
	selp.f32 	%f723, %f720, %f722, %p234;
	add.s32 	%r526, %r523, 1;
	and.b32  	%r527, %r526, 2;
	setp.eq.s32 	%p235, %r527, 0;
	mov.f32 	%f724, 0f00000000;
	sub.f32 	%f725, %f724, %f721;
	selp.f32 	%f726, %f721, %f725, %p235;
	cvt.rzi.f32.f32 	%f727, %f774;
	setp.eq.f32 	%p236, %f727, %f774;
	mul.f32 	%f728, %f774, 0f00000000;
	selp.f32 	%f781, %f728, %f723, %p236;
	abs.f32 	%f729, %f774;
	setp.gt.f32 	%p237, %f729, 0f4B800000;
	add.f32 	%f730, %f781, 0f3F800000;
	selp.f32 	%f776, %f730, %f726, %p237;
$L__BB0_140:                            // %L965
	mov.f32 	%f165, %f770;
	mov.f32 	%f167, %f776;
	@%p135 bra 	$L__BB0_142;
// %bb.141:                             // %L974
	neg.f32 	%f167, %f781;
	neg.f32 	%f165, %f779;
	mov.f32 	%f779, %f770;
	mov.f32 	%f781, %f776;
$L__BB0_142:                            // %L976
	setp.gt.u32 	%p239, %r312, 15;
	mov.u32 	%r190, 999999999;
	@%p239 bra 	$L__BB0_197;
// %bb.143:                             // %L1006
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	mad.lo.s32 	%r535, %r312, 6, %r4;
	cvt.u16.u32 	%rs17, %r535;
	and.b16  	%rs18, %rs17, 255;
	mul.lo.s16 	%rs19, %rs18, 171;
	shr.u16 	%rs20, %rs19, 14;
	mul.lo.s16 	%rs21, %rs20, 96;
	sub.s16 	%rs22, %rs17, %rs21;
	cvt.u32.u16 	%r536, %rs22;
	and.b32  	%r537, %r536, 255;
	mul.wide.u32 	%rd55, %r537, 4;
	add.s64 	%rd56, %rd1, %rd55;
	ld.global.u32 	%r538, [%rd56];
	shl.b32 	%r539, %r538, 16;
	cvt.s32.s16 	%r85, %r538;
	shr.s32 	%r86, %r538, 16;
	or.b32  	%r540, %r539, 65535;
	setp.lt.u32 	%p240, %r540, 589823;
	setp.lt.u32 	%p241, %r538, 786432;
	and.pred  	%p242, %p240, %p241;
	@%p242 bra 	$L__BB0_196;
	bra.uni 	$L__BB0_144;
$L__BB0_196:                            // %L1246
	mul.lo.s32 	%r544, %r86, 290;
	mad.lo.s32 	%r190, %r85, 33, %r544;
$L__BB0_197:                            // %pass560
	add.f32 	%f227, %f784, %f784;
	mov.b32 	%r342, %f227;
	add.f32 	%f489, %f788, %f788;
	and.b32  	%r343, %r342, -2147483648;
	add.f32 	%f282, %f734, %f734;
	mov.b32 	%r450, %f489;
	or.b32  	%r344, %r343, 1056964608;
	mov.b32 	%r359, %f282;
	and.b32  	%r451, %r450, -2147483648;
	add.f32 	%f542, %f760, %f760;
	add.f32 	%f595, %f764, %f764;
	mov.b32 	%f228, %r344;
	and.b32  	%r360, %r359, -2147483648;
	or.b32  	%r452, %r451, 1056964608;
	mov.b32 	%r466, %f542;
	mov.b32 	%r488, %f595;
	add.f32 	%f229, %f227, %f228;
	abs.f32 	%f231, %f227;
	or.b32  	%r361, %r360, 1056964608;
	mov.b32 	%f490, %r452;
	and.b32  	%r467, %r466, -2147483648;
	and.b32  	%r489, %r488, -2147483648;
	cvt.rzi.f32.f32 	%f230, %f229;
	setp.gt.f32 	%p43, %f231, 0f4B000000;
	mov.b32 	%f283, %r361;
	add.f32 	%f491, %f489, %f490;
	abs.f32 	%f493, %f489;
	or.b32  	%r468, %r467, 1056964608;
	or.b32  	%r490, %r489, 1056964608;
	selp.f32 	%f232, %f227, %f230, %p43;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p44, %f231, 0f3F000000;
	add.f32 	%f284, %f282, %f283;
	abs.f32 	%f286, %f282;
	cvt.rzi.f32.f32 	%f492, %f491;
	setp.gt.f32 	%p149, %f493, 0f4B000000;
	mov.b32 	%f543, %r468;
	mov.b32 	%f596, %r490;
	selp.f32 	%f234, %f233, %f232, %p44;
	cvt.rzi.f32.f32 	%f285, %f284;
	setp.gt.f32 	%p63, %f286, 0f4B000000;
	selp.f32 	%f494, %f489, %f492, %p149;
	cvt.rzi.f32.f32 	%f495, %f489;
	setp.lt.f32 	%p150, %f493, 0f3F000000;
	add.f32 	%f544, %f542, %f543;
	abs.f32 	%f546, %f542;
	add.f32 	%f597, %f595, %f596;
	abs.f32 	%f599, %f595;
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f784;
	selp.f32 	%f287, %f282, %f285, %p63;
	cvt.rzi.f32.f32 	%f288, %f282;
	setp.lt.f32 	%p64, %f286, 0f3F000000;
	selp.f32 	%f496, %f495, %f494, %p150;
	cvt.rzi.f32.f32 	%f545, %f544;
	setp.gt.f32 	%p169, %f546, 0f4B000000;
	cvt.rzi.f32.f32 	%f598, %f597;
	setp.gt.f32 	%p189, %f599, 0f4B000000;
	mul.f32 	%f236, %f235, %f235;
	selp.f32 	%f289, %f288, %f287, %p64;
	fma.rn.f32 	%f497, %f496, 0fBF000000, %f788;
	selp.f32 	%f547, %f542, %f545, %p169;
	cvt.rzi.f32.f32 	%f548, %f542;
	setp.lt.f32 	%p170, %f546, 0f3F000000;
	selp.f32 	%f600, %f595, %f598, %p189;
	cvt.rzi.f32.f32 	%f601, %f595;
	setp.lt.f32 	%p190, %f599, 0f3F000000;
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f290, %f289, 0fBF000000, %f734;
	mul.f32 	%f498, %f497, %f497;
	selp.f32 	%f549, %f548, %f547, %p170;
	selp.f32 	%f602, %f601, %f600, %p190;
	cvt.rzi.s32.f32 	%r345, %f234;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	mul.f32 	%f291, %f290, %f290;
	fma.rn.f32 	%f499, %f498, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f500, %f498, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f550, %f549, 0fBF000000, %f760;
	fma.rn.f32 	%f603, %f602, 0fBF000000, %f764;
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r346, %r345, 1;
	fma.rn.f32 	%f292, %f291, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f293, %f291, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r453, %f496;
	fma.rn.f32 	%f501, %f499, %f498, 0fC0A55DF6;
	fma.rn.f32 	%f502, %f500, %f498, 0f4081E0CF;
	fma.rn.f32 	%f503, %f498, %f497, 0f00000000;
	mul.f32 	%f551, %f550, %f550;
	mul.f32 	%f604, %f603, %f603;
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p45, %r346, 1;
	cvt.rzi.s32.f32 	%r362, %f289;
	fma.rn.f32 	%f294, %f292, %f291, 0fC0A55DF6;
	fma.rn.f32 	%f295, %f293, %f291, 0f4081E0CF;
	fma.rn.f32 	%f296, %f291, %f290, 0f00000000;
	fma.rn.f32 	%f504, %f502, %f498, 0fC09DE9E6;
	fma.rn.f32 	%f505, %f501, %f503, 0f00000000;
	and.b32  	%r454, %r453, 1;
	fma.rn.f32 	%f552, %f551, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f553, %f551, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f604, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f606, %f604, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f246, %f244, %f245, %p45;
	and.b32  	%r347, %r345, 2;
	fma.rn.f32 	%f297, %f295, %f291, 0fC09DE9E6;
	fma.rn.f32 	%f298, %f294, %f296, 0f00000000;
	and.b32  	%r363, %r362, 1;
	fma.rn.f32 	%f506, %f504, %f498, 0f3F800000;
	fma.rn.f32 	%f507, %f497, 0f40490FDB, %f505;
	setp.eq.b32 	%p151, %r454, 1;
	cvt.rzi.s32.f32 	%r469, %f549;
	fma.rn.f32 	%f554, %f552, %f551, 0fC0A55DF6;
	fma.rn.f32 	%f555, %f553, %f551, 0f4081E0CF;
	fma.rn.f32 	%f556, %f551, %f550, 0f00000000;
	cvt.rzi.s32.f32 	%r491, %f602;
	fma.rn.f32 	%f607, %f605, %f604, 0fC0A55DF6;
	fma.rn.f32 	%f608, %f606, %f604, 0f4081E0CF;
	fma.rn.f32 	%f609, %f604, %f603, 0f00000000;
	setp.eq.s32 	%p46, %r347, 0;
	neg.f32 	%f248, %f246;
	add.s32 	%r348, %r345, 1;
	cvt.rzi.f32.f32 	%f253, %f784;
	fma.rn.f32 	%f299, %f297, %f291, 0f3F800000;
	fma.rn.f32 	%f300, %f290, 0f40490FDB, %f298;
	setp.eq.b32 	%p65, %r363, 1;
	selp.f32 	%f508, %f506, %f507, %p151;
	and.b32  	%r455, %r453, 2;
	fma.rn.f32 	%f557, %f555, %f551, 0fC09DE9E6;
	fma.rn.f32 	%f558, %f554, %f556, 0f00000000;
	and.b32  	%r470, %r469, 1;
	fma.rn.f32 	%f610, %f608, %f604, 0fC09DE9E6;
	fma.rn.f32 	%f611, %f607, %f609, 0f00000000;
	and.b32  	%r492, %r491, 1;
	selp.f32 	%f247, %f245, %f244, %p45;
	selp.f32 	%f249, %f246, %f248, %p46;
	and.b32  	%r349, %r348, 2;
	setp.eq.f32 	%p48, %f253, %f784;
	mul.f32 	%f254, %f784, 0f00000000;
	selp.f32 	%f301, %f299, %f300, %p65;
	and.b32  	%r364, %r362, 2;
	setp.eq.s32 	%p152, %r455, 0;
	neg.f32 	%f510, %f508;
	add.s32 	%r456, %r453, 1;
	cvt.rzi.f32.f32 	%f515, %f788;
	fma.rn.f32 	%f559, %f557, %f551, 0f3F800000;
	fma.rn.f32 	%f560, %f550, 0f40490FDB, %f558;
	setp.eq.b32 	%p171, %r470, 1;
	fma.rn.f32 	%f612, %f610, %f604, 0f3F800000;
	fma.rn.f32 	%f613, %f603, 0f40490FDB, %f611;
	setp.eq.b32 	%p191, %r492, 1;
	setp.eq.s32 	%p47, %r349, 0;
	sub.f32 	%f251, %f250, %f247;
	selp.f32 	%f255, %f254, %f249, %p48;
	abs.f32 	%f256, %f784;
	setp.eq.s32 	%p66, %r364, 0;
	neg.f32 	%f303, %f301;
	add.s32 	%r365, %r362, 1;
	cvt.rzi.f32.f32 	%f307, %f734;
	selp.f32 	%f509, %f507, %f506, %p151;
	selp.f32 	%f511, %f508, %f510, %p152;
	and.b32  	%r457, %r456, 2;
	setp.eq.f32 	%p154, %f515, %f788;
	mul.f32 	%f516, %f788, 0f00000000;
	selp.f32 	%f561, %f559, %f560, %p171;
	and.b32  	%r471, %r469, 2;
	selp.f32 	%f614, %f612, %f613, %p191;
	and.b32  	%r493, %r491, 2;
	selp.f32 	%f252, %f247, %f251, %p47;
	setp.gt.f32 	%p49, %f256, 0f4B800000;
	add.f32 	%f257, %f255, 0f3F800000;
	selp.f32 	%f302, %f300, %f299, %p65;
	selp.f32 	%f304, %f301, %f303, %p66;
	and.b32  	%r366, %r365, 2;
	setp.eq.f32 	%p68, %f307, %f734;
	mul.f32 	%f308, %f734, 0f00000000;
	setp.eq.s32 	%p153, %r457, 0;
	sub.f32 	%f513, %f512, %f509;
	selp.f32 	%f517, %f516, %f511, %p154;
	abs.f32 	%f518, %f788;
	setp.eq.s32 	%p172, %r471, 0;
	neg.f32 	%f563, %f561;
	add.s32 	%r472, %r469, 1;
	cvt.rzi.f32.f32 	%f568, %f760;
	setp.eq.s32 	%p192, %r493, 0;
	neg.f32 	%f616, %f614;
	add.s32 	%r494, %r491, 1;
	cvt.rzi.f32.f32 	%f620, %f764;
	selp.f32 	%f258, %f257, %f252, %p49;
	setp.eq.s32 	%p67, %r366, 0;
	sub.f32 	%f305, %f250, %f302;
	selp.f32 	%f16, %f308, %f304, %p68;
	abs.f32 	%f309, %f734;
	selp.f32 	%f514, %f509, %f513, %p153;
	setp.gt.f32 	%p155, %f518, 0f4B800000;
	add.f32 	%f519, %f517, 0f3F800000;
	selp.f32 	%f562, %f560, %f559, %p171;
	selp.f32 	%f564, %f561, %f563, %p172;
	and.b32  	%r473, %r472, 2;
	setp.eq.f32 	%p174, %f568, %f760;
	mul.f32 	%f569, %f760, 0f00000000;
	selp.f32 	%f615, %f613, %f612, %p191;
	selp.f32 	%f617, %f614, %f616, %p192;
	and.b32  	%r495, %r494, 2;
	setp.eq.f32 	%p194, %f620, %f764;
	mul.f32 	%f621, %f764, 0f00000000;
	mov.b32 	%r338, %f258;
	mov.b32 	%r341, %f255;
	selp.f32 	%f306, %f302, %f305, %p67;
	setp.gt.f32 	%p69, %f309, 0f4B800000;
	add.f32 	%f310, %f16, 0f3F800000;
	selp.f32 	%f520, %f519, %f514, %p155;
	setp.eq.s32 	%p173, %r473, 0;
	sub.f32 	%f566, %f512, %f562;
	selp.f32 	%f102, %f569, %f564, %p174;
	abs.f32 	%f570, %f760;
	setp.eq.s32 	%p193, %r495, 0;
	sub.f32 	%f618, %f512, %f615;
	selp.f32 	%f622, %f621, %f617, %p194;
	abs.f32 	%f623, %f764;
	xor.b32  	%r337, %r341, -2147483648;
	selp.f32 	%f17, %f310, %f306, %p69;
	mov.b32 	%r446, %f520;
	mov.b32 	%r449, %f517;
	selp.f32 	%f567, %f562, %f566, %p173;
	setp.gt.f32 	%p175, %f570, 0f4B800000;
	add.f32 	%f571, %f102, 0f3F800000;
	selp.f32 	%f619, %f615, %f618, %p193;
	setp.gt.f32 	%p195, %f623, 0f4B800000;
	add.f32 	%f624, %f622, 0f3F800000;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	// begin inline asm
	cvt.rn.f16x2.f32 %r336, %r338, %r337;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r339, %r341, %r338;
	// end inline asm
	mov.b32 	%r389, %f17;
	mov.b32 	%r390, %f37;
	mov.b32 	%r392, %f16;
	mov.b32 	%r393, %f38;
	mov.b32 	%r433, %f83;
	mov.b32 	%r434, %f85;
	mov.b32 	%r436, %f755;
	mov.b32 	%r437, %f757;
	xor.b32  	%r445, %r449, -2147483648;
	selp.f32 	%f103, %f571, %f567, %p175;
	selp.f32 	%f625, %f624, %f619, %p195;
	// begin inline asm
	cvt.rn.f16x2.f32 %r388, %r390, %r389;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r391, %r393, %r392;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r432, %r434, %r433;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r435, %r437, %r436;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r444, %r446, %r445;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r447, %r449, %r446;
	// end inline asm
	mov.b32 	%r484, %f625;
	mov.b32 	%r483, %f103;
	mov.b32 	%r487, %f622;
	mov.b32 	%r486, %f102;
	// begin inline asm
	cvt.rn.f16x2.f32 %r482, %r484, %r483;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r485, %r487, %r486;
	// end inline asm
	mov.b32 	%r529, %f165;
	mov.b32 	%r530, %f167;
	// begin inline asm
	cvt.rn.f16x2.f32 %r528, %r530, %r529;
	// end inline asm
	mov.b32 	%r532, %f779;
	mov.b32 	%r533, %f781;
	// begin inline asm
	cvt.rn.f16x2.f32 %r531, %r533, %r532;
	// end inline asm
	shr.u32 	%r191, %r312, 3;
	and.b32  	%r546, %r191, 2;
	or.b32  	%r192, %r64, %r546;
	cvt.u16.u32 	%rs25, %r192;
	mul.lo.s16 	%rs26, %rs25, 171;
	shr.u16 	%rs27, %rs26, 9;
	mul.lo.s16 	%rs28, %rs27, 3;
	sub.s16 	%rs29, %rs25, %rs28;
	cvt.u32.u16 	%r547, %rs29;
	and.b32  	%r548, %r547, 255;
	and.b16  	%rs30, %rs29, 255;
	mul.wide.u16 	%r549, %rs30, 8;
	bfe.u32 	%r550, %r312, 3, 1;
	shl.b32 	%r551, %r4, 1;
	and.b32  	%r552, %r551, 2;
	or.b32  	%r553, %r550, %r552;
	mul.lo.s32 	%r554, %r164, 24;
	add.s32 	%r555, %r554, %r2;
	or.b32  	%r556, %r555, %r553;
	add.s32 	%r557, %r556, %r549;
	mul.wide.u32 	%rd62, %r557, 4;
	add.s64 	%rd63, %rd2, %rd62;
	ld.global.u32 	%r193, [%rd63];
	or.b32  	%r558, %r2, %r552;
	or.b32  	%r559, %r558, %r550;
	cvt.u64.u32 	%rd64, %r549;
	cvt.u64.u32 	%rd65, %r554;
	cvt.u64.u32 	%rd66, %r559;
	add.s64 	%rd67, %rd66, %rd65;
	add.s64 	%rd68, %rd67, %rd64;
	shl.b64 	%rd69, %rd68, 2;
	add.s64 	%rd70, %rd2, %rd69;
	ld.global.u32 	%r194, [%rd70+16];
	cvt.u64.u32 	%rd71, %r553;
	cvt.u64.u32 	%rd72, %r2;
	add.s64 	%rd73, %rd72, %rd65;
	add.s64 	%rd74, %rd73, %rd71;
	add.s64 	%rd75, %rd74, %rd64;
	shl.b64 	%rd76, %rd75, 2;
	add.s64 	%rd77, %rd2, %rd76;
	ld.global.u32 	%r195, [%rd77+384];
	cvt.u64.u32 	%rd78, %r550;
	cvt.u64.u32 	%rd79, %r552;
	add.s64 	%rd80, %rd72, %rd79;
	add.s64 	%rd81, %rd80, %rd78;
	add.s64 	%rd82, %rd81, %rd65;
	add.s64 	%rd83, %rd82, %rd64;
	shl.b64 	%rd84, %rd83, 2;
	add.s64 	%rd85, %rd2, %rd84;
	ld.global.u32 	%r196, [%rd85+400];
	shl.b32 	%r560, %r303, 14;
	shl.b32 	%r561, %r307, 5;
	add.s32 	%r197, %r561, %r560;
	shl.b32 	%r198, %r4, 2;
	shl.b32 	%r562, %r312, 2;
	and.b32  	%r199, %r562, 12;
	shl.b32 	%r563, %r1, 5;
	and.b32  	%r564, %r562, 16;
	or.b32  	%r200, %r564, %r563;
	bfe.s32 	%r565, %r312, 2, 1;
	and.b32  	%r201, %r312, 4;
	setp.eq.s32 	%p244, %r201, 0;
	and.b32  	%r566, %r177, 8;
	shl.b32 	%r567, %r312, 4;
	or.b32  	%r568, %r566, %r567;
	bfe.u32 	%r569, %r568, 3, 3;
	mul.lo.s32 	%r202, %r569, 260;
	cvt.u16.u32 	%rs31, %r312;
	and.b16  	%rs32, %rs31, 255;
	mul.lo.s16 	%rs33, %rs32, 171;
	shr.u16 	%rs34, %rs33, 12;
	mul.lo.s16 	%rs35, %rs34, 24;
	sub.s16 	%rs36, %rs31, %rs35;
	cvt.u32.u16 	%r570, %rs36;
	and.b32  	%r203, %r570, 255;
	add.s32 	%r571, %r4, 6;
	shr.u32 	%r572, %r571, 3;
	add.s32 	%r573, %r5, 192;
	and.b32  	%r574, %r573, 224;
	mad.lo.s32 	%r204, %r572, 260, %r574;
	add.s32 	%r575, %r4, 12;
	shr.u32 	%r576, %r575, 3;
	add.s32 	%r577, %r5, 128;
	and.b32  	%r578, %r577, 224;
	mad.lo.s32 	%r205, %r576, 260, %r578;
	add.s32 	%r579, %r4, 18;
	shr.u32 	%r580, %r579, 3;
	add.s32 	%r581, %r5, 64;
	and.b32  	%r582, %r581, 224;
	mad.lo.s32 	%r206, %r580, 260, %r582;
	or.b32  	%r207, %r5, 780;
	add.s32 	%r583, %r4, 30;
	shr.u32 	%r584, %r583, 3;
	mad.lo.s32 	%r208, %r584, 260, %r574;
	add.s32 	%r585, %r4, 36;
	shr.u32 	%r586, %r585, 3;
	mad.lo.s32 	%r209, %r586, 260, %r578;
	add.s32 	%r587, %r4, 42;
	shr.u32 	%r588, %r587, 3;
	mad.lo.s32 	%r210, %r588, 260, %r582;
	or.b32  	%r211, %r5, 1560;
	add.s32 	%r589, %r4, 54;
	shr.u32 	%r590, %r589, 3;
	mad.lo.s32 	%r212, %r590, 260, %r574;
	add.s32 	%r591, %r4, 60;
	bfe.u32 	%r592, %r591, 3, 3;
	mad.lo.s32 	%r213, %r592, 260, %r578;
	shr.u32 	%r593, %r4, 1;
	cvt.u16.u32 	%rs37, %r593;
	and.b16  	%rs38, %rs37, 255;
	mul.lo.s16 	%rs39, %rs38, 171;
	shr.u16 	%rs40, %rs39, 9;
	mul.lo.s16 	%rs41, %rs40, 3;
	sub.s16 	%rs42, %rs37, %rs41;
	cvt.u32.u16 	%r594, %rs42;
	and.b32  	%r214, %r594, 255;
	mul.lo.s32 	%r595, %r164, 870;
	mad.lo.s32 	%r596, %r553, 33, %r595;
	mad.lo.s32 	%r215, %r548, 290, %r596;
	add.s32 	%r216, %r215, 132;
	setp.lt.u32 	%p245, %r312, 4;
	setp.eq.s32 	%p246, %r165, 1;
	setp.eq.s32 	%p247, %r165, 4;
	setp.eq.s32 	%p248, %r165, 5;
	and.b32  	%r217, %r565, 196;
	bfe.s32 	%r597, %r312, 3, 1;
	and.b32  	%r218, %r597, 98;
	selp.b32 	%r219, 0, 392, %p135;
	setp.eq.s32 	%p249, %r65, 0;
	selp.b32 	%r220, 0, 784, %p249;
	or.b32  	%r221, %r552, %r66;
	add.s32 	%r598, %r217, %r218;
	add.s32 	%r599, %r598, %r219;
	add.s32 	%r600, %r599, %r220;
	add.s32 	%r222, %r600, %r221;
	selp.b32 	%r601, 1576, 1772, %p244;
	add.s32 	%r602, %r601, %r218;
	add.s32 	%r603, %r602, %r219;
	add.s32 	%r604, %r603, %r220;
	add.s32 	%r223, %r604, %r221;
	or.b32  	%r224, %r221, 4;
	add.s32 	%r225, %r600, %r224;
	add.s32 	%r226, %r604, %r224;
	add.s32 	%r605, %r604, 8;
	add.s32 	%r227, %r605, %r221;
	add.s32 	%r228, %r605, %r224;
	bfe.s32 	%r606, %r4, 1, 1;
	and.b32  	%r607, %r606, 196;
	and.b32  	%r608, %r177, 6;
	and.b32  	%r609, %r597, 1576;
	shr.u32 	%r610, %r4, 2;
	and.b32  	%r611, %r4, 1;
	neg.s32 	%r612, %r611;
	and.b32  	%r613, %r612, 392;
	mad.lo.s32 	%r614, %r610, 98, %r608;
	or.b32  	%r615, %r614, %r64;
	mad.lo.s32 	%r616, %r66, 784, %r615;
	add.s32 	%r617, %r616, %r607;
	add.s32 	%r618, %r617, %r609;
	add.s32 	%r229, %r618, %r613;
	add.s32 	%r230, %r229, 8;
	mul.lo.s32 	%r619, %r305, 786432;
	mad.lo.s32 	%r620, %r309, 192, %r619;
	or.b32  	%r621, %r198, %r191;
	cvt.u16.u32 	%rs43, %r621;
	and.b16  	%rs44, %rs43, 255;
	mul.lo.s16 	%rs45, %rs44, 171;
	shr.u16 	%rs46, %rs45, 9;
	and.b16  	%rs47, %rs46, 24;
	add.s16 	%rs48, %rs43, %rs47;
	shl.b16 	%rs49, %rs48, 3;
	cvt.u32.u16 	%r622, %rs49;
	and.b32  	%r231, %r622, 248;
	and.b32  	%r232, %r312, 7;
	cvt.s64.s32 	%rd23, %r620;
	add.s32 	%r623, %r215, %r214;
	mul.wide.u32 	%rd86, %r623, 4;
	mov.u64 	%rd87, shmem;
	add.s64 	%rd24, %rd87, %rd86;
	add.s32 	%r624, %r216, %r214;
	mul.wide.u32 	%rd88, %r624, 4;
	add.s64 	%rd25, %rd87, %rd88;
	cvt.u64.u32 	%rd89, %r215;
	cvt.u64.u16 	%rd90, %rs42;
	and.b64  	%rd91, %rd90, 255;
	add.s64 	%rd92, %rd89, %rd91;
	shl.b64 	%rd93, %rd92, 2;
	add.s64 	%rd26, %rd87, %rd93;
	cvt.u64.u32 	%rd94, %r216;
	add.s64 	%rd95, %rd94, %rd91;
	shl.b64 	%rd96, %rd95, 2;
	add.s64 	%rd27, %rd87, %rd96;
	or.pred  	%p250, %p245, %p246;
	and.b32  	%r625, %r312, 24;
	setp.eq.s32 	%p251, %r625, 8;
	or.pred  	%p252, %p250, %p251;
	or.pred  	%p253, %p252, %p247;
	setp.eq.s32 	%p254, %r625, 24;
	or.pred  	%p255, %p248, %p254;
	selp.b32 	%r233, 1145324612, -286331154, %p252;
	or.pred  	%p1, %p253, %p255;
	selp.b32 	%r234, 1145324612, -286331154, %p250;
	add.s32 	%r626, %r165, -1;
	setp.lt.u32 	%p256, %r626, 3;
	or.pred  	%p2, %p245, %p256;
	setp.eq.s32 	%p257, %r625, 16;
	or.pred  	%p3, %p257, %p254;
	selp.b32 	%r235, 1145324612, -286331154, %p257;
	and.b16  	%rs9, %rs42, 255;
	or.b16  	%rs10, %rs9, 24;
	mov.u32 	%r88, 0;
	mov.u16 	%rs2, 5;
	mov.u16 	%rs1, 29;
	selp.b32 	%r132, %r234, %r235, %p2;
	or.pred  	%p289, %p2, %p3;
	mov.u32 	%r108, %r88;
	mov.u32 	%r109, %r88;
	mov.u32 	%r110, %r88;
	bra.uni 	$L__BB0_198;
$L__BB0_169:                            // %L40316
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r163, %r88, 48;
	add.s16 	%rs2, %rs2, 48;
	add.s16 	%rs1, %rs1, 48;
	setp.ne.s32 	%p305, %r88, 8112;
	mov.u32 	%r88, %r163;
	@%p305 bra 	$L__BB0_198;
	bra.uni 	$L__BB0_170;
$L__BB0_198:                            // %L1929
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_162 Depth 2
                                        //     Child Loop BB0_166 Depth 2
	add.s32 	%r627, %r88, %r303;
	setp.lt.s32 	%p258, %r627, %r304;
	@%p258 bra 	$L__BB0_199;
	bra.uni 	$L__BB0_170;
$L__BB0_199:                            // %oksrem869
                                        //   in Loop: Header=BB0_198 Depth=1
	mul.hi.u32 	%r724, %r88, -1431655765;
	shr.u32 	%r725, %r724, 5;
	mul.lo.s32 	%r236, %r725, 48;
	add.s32 	%r726, %r236, %r198;
	or.b32  	%r727, %r726, %r191;
	shr.s32 	%r728, %r726, 31;
	shr.u32 	%r729, %r728, 19;
	add.s32 	%r730, %r727, %r729;
	and.b32  	%r731, %r730, 253952;
	sub.s32 	%r732, %r727, %r731;
	shl.b32 	%r733, %r732, 14;
	or.b32  	%r734, %r733, %r199;
	or.b32  	%r735, %r200, %r734;
	add.s32 	%r736, %r197, %r735;
	shr.s32 	%r737, %r736, 31;
	shr.u32 	%r738, %r737, 5;
	add.s32 	%r739, %r736, %r738;
	shr.s32 	%r740, %r739, 27;
	setp.lt.s32 	%p260, %r736, 0;
	and.b32  	%r741, %r739, -134217728;
	setp.ne.s32 	%p261, %r741, %r736;
	and.pred  	%p262, %p260, %p261;
	selp.u32 	%r742, 1, 0, %p262;
	sub.s32 	%r743, %r742, %r740;
	shl.b32 	%r744, %r743, 27;
	add.s32 	%r745, %r744, %r736;
	mul.wide.s32 	%rd97, %r745, 4;
	add.s64 	%rd98, %rd3, %rd97;
	ld.global.v4.u32 	{%r746, %r747, %r748, %r749}, [%rd98];
	add.s32 	%r750, %r726, 24;
	or.b32  	%r751, %r750, %r191;
	shr.s32 	%r752, %r750, 31;
	shr.u32 	%r753, %r752, 19;
	add.s32 	%r754, %r751, %r753;
	and.b32  	%r755, %r754, 253952;
	sub.s32 	%r756, %r751, %r755;
	shl.b32 	%r757, %r756, 14;
	or.b32  	%r758, %r757, %r199;
	or.b32  	%r759, %r200, %r758;
	add.s32 	%r760, %r197, %r759;
	shr.s32 	%r761, %r760, 31;
	shr.u32 	%r762, %r761, 5;
	add.s32 	%r763, %r760, %r762;
	shr.s32 	%r764, %r763, 27;
	setp.lt.s32 	%p263, %r760, 0;
	and.b32  	%r765, %r763, -134217728;
	setp.ne.s32 	%p264, %r765, %r760;
	and.pred  	%p265, %p263, %p264;
	selp.u32 	%r766, 1, 0, %p265;
	sub.s32 	%r767, %r766, %r764;
	shl.b32 	%r768, %r767, 27;
	add.s32 	%r769, %r768, %r760;
	mul.wide.s32 	%rd99, %r769, 4;
	add.s64 	%rd100, %rd3, %rd99;
	ld.global.v4.u32 	{%r770, %r771, %r772, %r773}, [%rd100];
	selp.b32 	%r774, %r748, %r746, %p244;
	shfl.sync.bfly.b32	%r775, %r774, 4, 31, -1;
	selp.b32 	%r630, %r746, %r775, %p244;
	selp.b32 	%r635, %r775, %r748, %p244;
	selp.b32 	%r776, %r749, %r747, %p244;
	shfl.sync.bfly.b32	%r777, %r776, 4, 31, -1;
	selp.b32 	%r638, %r747, %r777, %p244;
	selp.b32 	%r643, %r777, %r749, %p244;
	selp.b32 	%r778, %r772, %r770, %p244;
	shfl.sync.bfly.b32	%r779, %r778, 4, 31, -1;
	selp.b32 	%r646, %r770, %r779, %p244;
	selp.b32 	%r651, %r779, %r772, %p244;
	selp.b32 	%r780, %r773, %r771, %p244;
	shfl.sync.bfly.b32	%r781, %r780, 4, 31, -1;
	selp.b32 	%r654, %r771, %r781, %p244;
	selp.b32 	%r659, %r781, %r773, %p244;
	shl.b32 	%r631, %r635, 4;
	mov.u32 	%r629, 252645135;
	// begin inline asm
	lop3.b32 %r661, %r629, %r630, %r631, 202;
	// end inline asm
	shr.u32 	%r634, %r630, 4;
	// begin inline asm
	lop3.b32 %r677, %r629, %r634, %r635, 202;
	// end inline asm
	shl.b32 	%r639, %r643, 4;
	// begin inline asm
	lop3.b32 %r669, %r629, %r638, %r639, 202;
	// end inline asm
	shr.u32 	%r642, %r638, 4;
	// begin inline asm
	lop3.b32 %r685, %r629, %r642, %r643, 202;
	// end inline asm
	shl.b32 	%r647, %r651, 4;
	// begin inline asm
	lop3.b32 %r662, %r629, %r646, %r647, 202;
	// end inline asm
	shr.u32 	%r650, %r646, 4;
	// begin inline asm
	lop3.b32 %r678, %r629, %r650, %r651, 202;
	// end inline asm
	shl.b32 	%r655, %r659, 4;
	// begin inline asm
	lop3.b32 %r670, %r629, %r654, %r655, 202;
	// end inline asm
	shr.u32 	%r658, %r654, 4;
	// begin inline asm
	lop3.b32 %r686, %r629, %r658, %r659, 202;
	// end inline asm
	mov.u32 	%r663, 25152;
	// begin inline asm
	prmt.b32 %r693, %r661, %r662, %r663;
	// end inline asm
	mov.u32 	%r667, 29521;
	// begin inline asm
	prmt.b32 %r709, %r661, %r662, %r667;
	// end inline asm
	// begin inline asm
	prmt.b32 %r701, %r669, %r670, %r663;
	// end inline asm
	// begin inline asm
	prmt.b32 %r717, %r669, %r670, %r667;
	// end inline asm
	// begin inline asm
	prmt.b32 %r694, %r677, %r678, %r663;
	// end inline asm
	// begin inline asm
	prmt.b32 %r710, %r677, %r678, %r667;
	// end inline asm
	// begin inline asm
	prmt.b32 %r702, %r685, %r686, %r663;
	// end inline asm
	// begin inline asm
	prmt.b32 %r718, %r685, %r686, %r667;
	// end inline asm
	mov.u32 	%r719, 21520;
	// begin inline asm
	prmt.b32 %r692, %r693, %r694, %r719;
	// end inline asm
	mov.u32 	%r723, 30258;
	// begin inline asm
	prmt.b32 %r696, %r693, %r694, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r700, %r701, %r702, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r704, %r701, %r702, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r708, %r709, %r710, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r712, %r709, %r710, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r716, %r717, %r718, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r720, %r717, %r718, %r723;
	// end inline asm
	mul.hi.s32 	%r782, %r727, 715827883;
	shr.u32 	%r783, %r782, 31;
	shr.s32 	%r784, %r782, 2;
	add.s32 	%r785, %r784, %r783;
	mul.lo.s32 	%r786, %r785, 24;
	sub.s32 	%r787, %r727, %r786;
	add.s32 	%r788, %r787, %r202;
	mul.wide.s32 	%rd101, %r788, 4;
	add.s64 	%rd103, %rd87, %rd101;
	st.shared.u32 	[%rd103], %r692;
	add.s32 	%r789, %r788, 128;
	mul.wide.u32 	%rd104, %r789, 4;
	add.s64 	%rd105, %rd87, %rd104;
	st.shared.u32 	[%rd105], %r700;
	add.s32 	%r790, %r788, 64;
	mul.wide.u32 	%rd106, %r790, 4;
	add.s64 	%rd107, %rd87, %rd106;
	st.shared.u32 	[%rd107], %r696;
	add.s32 	%r791, %r788, 192;
	mul.wide.u32 	%rd108, %r791, 4;
	add.s64 	%rd109, %rd87, %rd108;
	st.shared.u32 	[%rd109], %r704;
	add.s32 	%r792, %r788, 32;
	mul.wide.u32 	%rd110, %r792, 4;
	add.s64 	%rd111, %rd87, %rd110;
	st.shared.u32 	[%rd111], %r708;
	add.s32 	%r793, %r788, 160;
	mul.wide.u32 	%rd112, %r793, 4;
	add.s64 	%rd113, %rd87, %rd112;
	st.shared.u32 	[%rd113], %r716;
	add.s32 	%r794, %r788, 96;
	mul.wide.u32 	%rd114, %r794, 4;
	add.s64 	%rd115, %rd87, %rd114;
	st.shared.u32 	[%rd115], %r712;
	add.s32 	%r795, %r788, 224;
	mul.wide.u32 	%rd116, %r795, 4;
	add.s64 	%rd117, %rd87, %rd116;
	st.shared.u32 	[%rd117], %r720;
	bar.sync 	0;
	add.s32 	%r796, %r236, %r203;
	cvt.u16.u32 	%rs50, %r796;
	mul.hi.s16 	%rs51, %rs50, 10923;
	shr.u16 	%rs52, %rs51, 15;
	shr.s16 	%rs53, %rs51, 2;
	add.s16 	%rs54, %rs53, %rs52;
	mul.lo.s16 	%rs55, %rs54, 24;
	sub.s16 	%rs56, %rs50, %rs55;
	cvt.s32.s16 	%r237, %rs56;
	add.s32 	%r797, %r5, %r237;
	mul.wide.s32 	%rd118, %r797, 4;
	add.s64 	%rd119, %rd87, %rd118;
	ld.shared.u32 	%r238, [%rd119];
	add.s32 	%r798, %r204, %r237;
	mul.wide.s32 	%rd120, %r798, 4;
	add.s64 	%rd121, %rd87, %rd120;
	ld.shared.u32 	%r239, [%rd121];
	add.s32 	%r799, %r205, %r237;
	mul.wide.u32 	%rd122, %r799, 4;
	add.s64 	%rd123, %rd87, %rd122;
	ld.shared.u32 	%r240, [%rd123];
	add.s32 	%r800, %r206, %r237;
	mul.wide.u32 	%rd124, %r800, 4;
	add.s64 	%rd125, %rd87, %rd124;
	ld.shared.u32 	%r241, [%rd125];
	add.s32 	%r801, %r207, %r237;
	mul.wide.u32 	%rd126, %r801, 4;
	add.s64 	%rd127, %rd87, %rd126;
	ld.shared.u32 	%r242, [%rd127];
	add.s32 	%r802, %r208, %r237;
	mul.wide.u32 	%rd128, %r802, 4;
	add.s64 	%rd129, %rd87, %rd128;
	ld.shared.u32 	%r243, [%rd129];
	add.s32 	%r803, %r209, %r237;
	mul.wide.u32 	%rd130, %r803, 4;
	add.s64 	%rd131, %rd87, %rd130;
	ld.shared.u32 	%r244, [%rd131];
	add.s32 	%r804, %r210, %r237;
	mul.wide.u32 	%rd132, %r804, 4;
	add.s64 	%rd133, %rd87, %rd132;
	ld.shared.u32 	%r245, [%rd133];
	add.s32 	%r805, %r211, %r237;
	mul.wide.u32 	%rd134, %r805, 4;
	add.s64 	%rd135, %rd87, %rd134;
	ld.shared.u32 	%r246, [%rd135];
	add.s32 	%r806, %r212, %r237;
	mul.wide.u32 	%rd136, %r806, 4;
	add.s64 	%rd137, %rd87, %rd136;
	ld.shared.u32 	%r247, [%rd137];
	add.s32 	%r807, %r213, %r237;
	mul.wide.s32 	%rd138, %r807, 4;
	add.s64 	%rd139, %rd87, %rd138;
	ld.shared.u32 	%r248, [%rd139];
	bar.sync 	0;
	shfl.sync.idx.b32	%r249, %r190, 0, 31, -1;
	shfl.sync.idx.b32	%r250, %r190, 1, 31, -1;
	shfl.sync.idx.b32	%r251, %r190, 2, 31, -1;
	shfl.sync.idx.b32	%r252, %r190, 3, 31, -1;
	shfl.sync.idx.b32	%r253, %r190, 4, 31, -1;
	shfl.sync.idx.b32	%r254, %r190, 5, 31, -1;
	shfl.sync.idx.b32	%r255, %r190, 6, 31, -1;
	shfl.sync.idx.b32	%r256, %r190, 7, 31, -1;
	shfl.sync.idx.b32	%r257, %r190, 8, 31, -1;
	shfl.sync.idx.b32	%r258, %r190, 9, 31, -1;
	shfl.sync.idx.b32	%r259, %r190, 10, 31, -1;
	shfl.sync.idx.b32	%r260, %r190, 11, 31, -1;
	shfl.sync.idx.b32	%r261, %r190, 12, 31, -1;
	shfl.sync.idx.b32	%r262, %r190, 13, 31, -1;
	shfl.sync.idx.b32	%r263, %r190, 14, 31, -1;
	shfl.sync.idx.b32	%r264, %r190, 15, 31, -1;
	setp.eq.s32 	%p266, %r249, 999999999;
	@%p266 bra 	$L__BB0_145;
// %bb.200:                             // %oksrem2306
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r808, %r249, %r237;
	mul.wide.s32 	%rd140, %r808, 4;
	add.s64 	%rd142, %rd87, %rd140;
	st.shared.u32 	[%rd142], %r238;
	setp.eq.s32 	%p267, %r250, 999999999;
	@%p267 bra 	$L__BB0_146;
// %bb.201:                             // %oksrem2374
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r809, %r250, %r237;
	mul.wide.s32 	%rd143, %r809, 4;
	add.s64 	%rd145, %rd87, %rd143;
	st.shared.u32 	[%rd145], %r239;
	setp.eq.s32 	%p268, %r251, 999999999;
	@%p268 bra 	$L__BB0_147;
// %bb.202:                             // %oksrem2442
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r810, %r251, %r237;
	mul.wide.s32 	%rd146, %r810, 4;
	add.s64 	%rd148, %rd87, %rd146;
	st.shared.u32 	[%rd148], %r240;
	setp.eq.s32 	%p269, %r252, 999999999;
	@%p269 bra 	$L__BB0_148;
// %bb.203:                             // %oksrem2510
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r811, %r252, %r237;
	mul.wide.s32 	%rd149, %r811, 4;
	add.s64 	%rd151, %rd87, %rd149;
	st.shared.u32 	[%rd151], %r241;
	setp.eq.s32 	%p270, %r253, 999999999;
	@%p270 bra 	$L__BB0_149;
// %bb.204:                             // %oksrem2578
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r812, %r253, %r237;
	mul.wide.s32 	%rd152, %r812, 4;
	add.s64 	%rd154, %rd87, %rd152;
	st.shared.u32 	[%rd154], %r242;
	setp.eq.s32 	%p271, %r254, 999999999;
	@%p271 bra 	$L__BB0_150;
// %bb.205:                             // %oksrem2646
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r813, %r254, %r237;
	mul.wide.s32 	%rd155, %r813, 4;
	add.s64 	%rd157, %rd87, %rd155;
	st.shared.u32 	[%rd157], %r243;
	setp.eq.s32 	%p272, %r255, 999999999;
	@%p272 bra 	$L__BB0_151;
// %bb.206:                             // %oksrem2714
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r814, %r255, %r237;
	mul.wide.s32 	%rd158, %r814, 4;
	add.s64 	%rd160, %rd87, %rd158;
	st.shared.u32 	[%rd160], %r244;
	setp.eq.s32 	%p273, %r256, 999999999;
	@%p273 bra 	$L__BB0_152;
// %bb.207:                             // %oksrem2782
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r815, %r256, %r237;
	mul.wide.s32 	%rd161, %r815, 4;
	add.s64 	%rd163, %rd87, %rd161;
	st.shared.u32 	[%rd163], %r245;
	setp.eq.s32 	%p274, %r257, 999999999;
	@%p274 bra 	$L__BB0_153;
// %bb.208:                             // %oksrem2850
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r816, %r257, %r237;
	mul.wide.s32 	%rd164, %r816, 4;
	add.s64 	%rd166, %rd87, %rd164;
	st.shared.u32 	[%rd166], %r246;
	setp.eq.s32 	%p275, %r258, 999999999;
	@%p275 bra 	$L__BB0_154;
// %bb.209:                             // %oksrem2918
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r817, %r258, %r237;
	mul.wide.s32 	%rd167, %r817, 4;
	add.s64 	%rd169, %rd87, %rd167;
	st.shared.u32 	[%rd169], %r247;
	setp.eq.s32 	%p276, %r259, 999999999;
	@%p276 bra 	$L__BB0_155;
// %bb.210:                             // %oksrem2987
                                        //   in Loop: Header=BB0_198 Depth=1
	setp.gt.u32 	%p277, %r4, 3;
	selp.b32 	%r818, 0, %r248, %p277;
	add.s32 	%r819, %r259, %r237;
	mul.wide.s32 	%rd170, %r819, 4;
	add.s64 	%rd172, %rd87, %rd170;
	st.shared.u32 	[%rd172], %r818;
	setp.eq.s32 	%p278, %r260, 999999999;
	@%p278 bra 	$L__BB0_156;
// %bb.211:                             // %oksrem3055
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r820, %r260, %r237;
	mul.wide.s32 	%rd173, %r820, 4;
	add.s64 	%rd175, %rd87, %rd173;
	mov.u32 	%r821, 0;
	st.shared.u32 	[%rd175], %r821;
	setp.eq.s32 	%p279, %r261, 999999999;
	@%p279 bra 	$L__BB0_157;
// %bb.212:                             // %oksrem3122
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r822, %r261, %r237;
	mul.wide.s32 	%rd176, %r822, 4;
	add.s64 	%rd178, %rd87, %rd176;
	st.shared.u32 	[%rd178], %r821;
	setp.eq.s32 	%p280, %r262, 999999999;
	@%p280 bra 	$L__BB0_158;
// %bb.213:                             // %oksrem3189
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r824, %r262, %r237;
	mul.wide.s32 	%rd179, %r824, 4;
	add.s64 	%rd181, %rd87, %rd179;
	st.shared.u32 	[%rd181], %r821;
	setp.eq.s32 	%p281, %r263, 999999999;
	@%p281 bra 	$L__BB0_159;
// %bb.214:                             // %oksrem3256
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r826, %r263, %r237;
	mul.wide.s32 	%rd182, %r826, 4;
	add.s64 	%rd184, %rd87, %rd182;
	st.shared.u32 	[%rd184], %r821;
	setp.eq.s32 	%p282, %r264, 999999999;
	@%p282 bra 	$L__BB0_160;
// %bb.215:                             // %oksrem3323
                                        //   in Loop: Header=BB0_198 Depth=1
	setp.eq.s32 	%p283, %r192, 3;
	add.s32 	%r829, %r264, %r237;
	mul.wide.s32 	%rd185, %r829, 4;
	add.s64 	%rd187, %rd87, %rd185;
	st.shared.u32 	[%rd187], %r821;
	bar.sync 	0;
	mov.u32 	%r92, %r821;
	mov.u32 	%r93, %r821;
	mov.u32 	%r94, %r821;
	mov.u32 	%r95, %r821;
	mov.u32 	%r96, %r821;
	mov.u32 	%r97, %r821;
	mov.u32 	%r98, %r821;
	mov.u32 	%r99, %r821;
	mov.u32 	%r100, %r821;
	mov.u32 	%r101, %r821;
	mov.u32 	%r102, %r821;
	mov.u32 	%r103, %r821;
	mov.u32 	%r104, %r821;
	mov.u32 	%r105, %r821;
	mov.u32 	%r106, %r821;
	mov.u32 	%r107, %r821;
	@%p283 bra 	$L__BB0_161;
// %bb.216:                             // %oksrem3399
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r265, %r236, %r214;
	ld.shared.u32 	%r92, [%rd24];
	ld.shared.u32 	%r93, [%rd25];
	ld.shared.u32 	%r94, [%rd26+12];
	ld.shared.u32 	%r95, [%rd27+12];
	ld.shared.u32 	%r96, [%rd26+24];
	ld.shared.u32 	%r97, [%rd27+24];
	ld.shared.u32 	%r98, [%rd26+36];
	ld.shared.u32 	%r99, [%rd27+36];
	add.s32 	%r830, %r265, 12;
	mul.hi.u32 	%r831, %r830, -1431655765;
	shr.u32 	%r832, %r831, 4;
	mul.lo.s32 	%r833, %r832, 24;
	sub.s32 	%r834, %r830, %r833;
	add.s32 	%r835, %r215, %r834;
	mul.wide.u32 	%rd188, %r835, 4;
	add.s64 	%rd190, %rd87, %rd188;
	ld.shared.u32 	%r100, [%rd190];
	add.s32 	%r836, %r216, %r834;
	mul.wide.u32 	%rd191, %r836, 4;
	add.s64 	%rd192, %rd87, %rd191;
	ld.shared.u32 	%r101, [%rd192];
	cvt.u16.u32 	%rs57, %r265;
	add.s16 	%rs58, %rs57, 15;
	mul.hi.s16 	%rs59, %rs58, 10923;
	shr.u16 	%rs60, %rs59, 15;
	shr.s16 	%rs61, %rs59, 2;
	add.s16 	%rs62, %rs61, %rs60;
	mul.lo.s16 	%rs63, %rs62, 24;
	sub.s16 	%rs64, %rs58, %rs63;
	cvt.s32.s16 	%r837, %rs64;
	add.s32 	%r838, %r215, %r837;
	mul.wide.s32 	%rd193, %r838, 4;
	add.s64 	%rd194, %rd87, %rd193;
	ld.shared.u32 	%r102, [%rd194];
	add.s32 	%r839, %r216, %r837;
	mul.wide.u32 	%rd195, %r839, 4;
	add.s64 	%rd196, %rd87, %rd195;
	ld.shared.u32 	%r103, [%rd196];
	add.s16 	%rs65, %rs57, 18;
	mul.hi.s16 	%rs66, %rs65, 10923;
	shr.u16 	%rs67, %rs66, 15;
	shr.s16 	%rs68, %rs66, 2;
	add.s16 	%rs69, %rs68, %rs67;
	mul.lo.s16 	%rs70, %rs69, 24;
	sub.s16 	%rs71, %rs65, %rs70;
	cvt.s32.s16 	%r840, %rs71;
	add.s32 	%r841, %r215, %r840;
	mul.wide.s32 	%rd197, %r841, 4;
	add.s64 	%rd198, %rd87, %rd197;
	ld.shared.u32 	%r104, [%rd198];
	add.s32 	%r842, %r216, %r840;
	mul.wide.u32 	%rd199, %r842, 4;
	add.s64 	%rd200, %rd87, %rd199;
	ld.shared.u32 	%r105, [%rd200];
	add.s16 	%rs72, %rs57, 21;
	mul.hi.s16 	%rs73, %rs72, 10923;
	shr.u16 	%rs74, %rs73, 15;
	shr.s16 	%rs75, %rs73, 2;
	add.s16 	%rs76, %rs75, %rs74;
	mul.lo.s16 	%rs77, %rs76, 24;
	sub.s16 	%rs78, %rs72, %rs77;
	cvt.s32.s16 	%r843, %rs78;
	add.s32 	%r844, %r215, %r843;
	mul.wide.s32 	%rd201, %r844, 4;
	add.s64 	%rd202, %rd87, %rd201;
	ld.shared.u32 	%r106, [%rd202];
	add.s32 	%r845, %r216, %r843;
	mul.wide.u32 	%rd203, %r845, 4;
	add.s64 	%rd204, %rd87, %rd203;
	ld.shared.u32 	%r107, [%rd204];
$L__BB0_161:                            // %L10559
                                        //   in Loop: Header=BB0_198 Depth=1
	bar.sync 	0;
	mov.u16 	%rs3, %rs2;
	mov.u32 	%r111, %r821;
	bra.uni 	$L__BB0_162;
$L__BB0_164:                            // %L25428
                                        //   in Loop: Header=BB0_162 Depth=2
	bar.sync 	0;
	add.s32 	%r111, %r111, 6;
	add.s16 	%rs3, %rs3, 6;
	setp.ne.s32 	%p294, %r111, 24;
	@%p294 bra 	$L__BB0_162;
	bra.uni 	$L__BB0_165;
$L__BB0_162:                            // %L10577
                                        //   Parent Loop BB0_198 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p284, %r111, 0;
	selp.b32 	%r1239, %r92, 0, %p284;
	setp.eq.s32 	%p285, %r111, 6;
	selp.b32 	%r1240, %r96, %r1239, %p285;
	setp.eq.s32 	%p286, %r111, 12;
	selp.b32 	%r1241, %r100, %r1240, %p286;
	setp.eq.s32 	%p287, %r111, 18;
	selp.b32 	%r851, %r104, %r1241, %p287;
	selp.b32 	%r1242, %r93, 0, %p284;
	selp.b32 	%r1243, %r97, %r1242, %p285;
	selp.b32 	%r1244, %r101, %r1243, %p286;
	selp.b32 	%r897, %r105, %r1244, %p287;
	selp.b32 	%r1245, %r94, 0, %p284;
	selp.b32 	%r1246, %r98, %r1245, %p285;
	selp.b32 	%r1247, %r102, %r1246, %p286;
	selp.b32 	%r943, %r106, %r1247, %p287;
	selp.b32 	%r1248, %r95, 0, %p284;
	selp.b32 	%r1249, %r99, %r1248, %p285;
	selp.b32 	%r1250, %r103, %r1249, %p286;
	selp.b32 	%r989, %r107, %r1250, %p287;
	mov.u16 	%rs116, 25600;
	// begin inline asm
	mov.b32 %r852, {%rs116, %rs116};
	// end inline asm
	mov.u16 	%rs118, 21504;
	// begin inline asm
	mov.b32 %r863, {%rs118, %rs118};
	// end inline asm
	mov.u32 	%r988, 983055;
	// begin inline asm
	lop3.b32 %r849, %r988, %r851, %r852, 202;
	// end inline asm
	mov.u16 	%rs122, 18432;
	// begin inline asm
	mov.b32 %r853, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r854, %r852, %r853;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r857, %r849, %r854;
	// end inline asm
	mov.u32 	%r999, 15728880;
	// begin inline asm
	lop3.b32 %r860, %r999, %r851, %r863, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r864, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r865, %r863, %r864;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r868, %r860, %r865;
	// end inline asm
	// begin inline asm
	mov.b32 %r898, {%rs116, %rs116};
	// end inline asm
	// begin inline asm
	mov.b32 %r909, {%rs118, %rs118};
	// end inline asm
	// begin inline asm
	lop3.b32 %r895, %r988, %r897, %r898, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r899, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r900, %r898, %r899;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r903, %r895, %r900;
	// end inline asm
	// begin inline asm
	lop3.b32 %r906, %r999, %r897, %r909, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r910, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r911, %r909, %r910;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r914, %r906, %r911;
	// end inline asm
	// begin inline asm
	mov.b32 %r944, {%rs116, %rs116};
	// end inline asm
	// begin inline asm
	mov.b32 %r955, {%rs118, %rs118};
	// end inline asm
	// begin inline asm
	lop3.b32 %r941, %r988, %r943, %r944, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r945, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r946, %r944, %r945;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r949, %r941, %r946;
	// end inline asm
	// begin inline asm
	lop3.b32 %r952, %r999, %r943, %r955, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r956, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r957, %r955, %r956;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r960, %r952, %r957;
	// end inline asm
	// begin inline asm
	mov.b32 %r990, {%rs116, %rs116};
	// end inline asm
	// begin inline asm
	mov.b32 %r1001, {%rs118, %rs118};
	// end inline asm
	// begin inline asm
	lop3.b32 %r987, %r988, %r989, %r990, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r991, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r992, %r990, %r991;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r995, %r987, %r992;
	// end inline asm
	// begin inline asm
	lop3.b32 %r998, %r999, %r989, %r1001, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1002, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1003, %r1001, %r1002;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1006, %r998, %r1003;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r193;
    mov.b32 {%r2re, %r2im}, %r868;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1031, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r194;
    mov.b32 {%r2re, %r2im}, %r914;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1034, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r195;
    mov.b32 {%r2re, %r2im}, %r857;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1037, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r196;
    mov.b32 {%r2re, %r2im}, %r903;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1040, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r193;
    mov.b32 {%r2re, %r2im}, %r960;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1043, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r194;
    mov.b32 {%r2re, %r2im}, %r1006;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1046, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r195;
    mov.b32 {%r2re, %r2im}, %r949;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1049, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r196;
    mov.b32 {%r2re, %r2im}, %r995;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1052, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1055, %r1056}, {%r336, %r339}, {%r1031}, {%r821, %r821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1062, %r1063}, {%r336, %r339}, {%r1034}, {%r821, %r821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1069, %r1070}, {%r336, %r339}, {%r1037}, {%r821, %r821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1076, %r1077}, {%r336, %r339}, {%r1040}, {%r821, %r821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1083, %r1084}, {%r336, %r339}, {%r1043}, {%r821, %r821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1090, %r1091}, {%r336, %r339}, {%r1046}, {%r821, %r821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1097, %r1098}, {%r336, %r339}, {%r1049}, {%r821, %r821};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1104, %r1105}, {%r336, %r339}, {%r1052}, {%r821, %r821};
	// end inline asm
	@%p1 bra 	$L__BB0_217;
	bra.uni 	$L__BB0_163;
$L__BB0_217:                            // %pass4759
                                        //   in Loop: Header=BB0_162 Depth=2
	// begin inline asm
	neg.f16x2 %r1111, %r391;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1113, %r1111, %r1056;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1116, %r388, %r1055, %r1113;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1120, %r391;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1122, %r1120, %r1063;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1125, %r388, %r1062, %r1122;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1129, %r391;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1131, %r1129, %r1070;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1134, %r388, %r1069, %r1131;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1138, %r391;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1140, %r1138, %r1077;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1143, %r388, %r1076, %r1140;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1147, %r391;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1149, %r1147, %r1084;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1152, %r388, %r1083, %r1149;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1156, %r391;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1158, %r1156, %r1091;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1161, %r388, %r1090, %r1158;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1165, %r391;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1167, %r1165, %r1098;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1170, %r388, %r1097, %r1167;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1174, %r391;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1176, %r1174, %r1105;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1179, %r388, %r1104, %r1176;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1183, %r391, %r1055;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1186, %r388, %r1056, %r1183;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1190, %r391, %r1062;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1193, %r388, %r1063, %r1190;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1197, %r391, %r1069;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1200, %r388, %r1070, %r1197;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1204, %r391, %r1076;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1207, %r388, %r1077, %r1204;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1211, %r391, %r1083;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1214, %r388, %r1084, %r1211;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1218, %r391, %r1090;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1221, %r388, %r1091, %r1218;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1225, %r391, %r1097;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1228, %r388, %r1098, %r1225;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1232, %r391, %r1104;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1235, %r388, %r1105, %r1232;
	// end inline asm
	setp.gt.u32 	%p288, %r312, 11;
	mov.u32 	%r1321, 0;
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1324, %r1325}, {%r432, %r435}, {%r1116, %r1186}, {%r1321, %r1321}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1332, %r1333}, {%r432, %r435}, {%r1125, %r1193}, {%r1321, %r1321}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1340, %r1341}, {%r432, %r435}, {%r1134, %r1200}, {%r1321, %r1321}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1348, %r1349}, {%r432, %r435}, {%r1143, %r1207}, {%r1321, %r1321}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1356, %r1357}, {%r432, %r435}, {%r1152, %r1214}, {%r1321, %r1321}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1364, %r1365}, {%r432, %r435}, {%r1161, %r1221}, {%r1321, %r1321}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1372, %r1373}, {%r432, %r435}, {%r1170, %r1228}, {%r1321, %r1321}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1380, %r1381}, {%r432, %r435}, {%r1179, %r1235}, {%r1321, %r1321}, %r233, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r282, %r1324, %r1325, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r283, %r1324, %r1325, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r284, %r1332, %r1333, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r285, %r1332, %r1333, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r286, %r1340, %r1341, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r287, %r1340, %r1341, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r288, %r1348, %r1349, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r289, %r1348, %r1349, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r290, %r1356, %r1357, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r291, %r1356, %r1357, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r292, %r1364, %r1365, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r293, %r1364, %r1365, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r294, %r1372, %r1373, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r295, %r1372, %r1373, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r296, %r1380, %r1381, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r297, %r1380, %r1381, %r723;
	// end inline asm
	add.s16 	%rs127, %rs9, %rs3;
	add.s16 	%rs128, %rs127, -5;
	mul.hi.s16 	%rs129, %rs128, 10923;
	shr.u16 	%rs130, %rs129, 15;
	add.s16 	%rs131, %rs129, %rs130;
	mul.lo.s16 	%rs132, %rs131, 6;
	sub.s16 	%rs133, %rs128, %rs132;
	mul.wide.s16 	%r1387, %rs133, 16;
	add.s32 	%r1388, %r222, %r1387;
	mul.wide.s32 	%rd207, %r1388, 4;
	add.s64 	%rd28, %rd87, %rd207;
	st.shared.u32 	[%rd28], %r282;
	add.s32 	%r1389, %r223, %r1387;
	mul.wide.u32 	%rd209, %r1389, 4;
	add.s64 	%rd29, %rd87, %rd209;
	st.shared.u32 	[%rd29], %r283;
	add.s32 	%r1390, %r225, %r1387;
	mul.wide.s32 	%rd210, %r1390, 4;
	add.s64 	%rd30, %rd87, %rd210;
	st.shared.u32 	[%rd30], %r284;
	add.s32 	%r1391, %r226, %r1387;
	mul.wide.u32 	%rd211, %r1391, 4;
	add.s64 	%rd31, %rd87, %rd211;
	st.shared.u32 	[%rd31], %r285;
	cvt.s64.s32 	%rd212, %r1387;
	cvt.u64.u32 	%rd213, %r221;
	cvt.u64.u32 	%rd214, %r220;
	cvt.u64.u32 	%rd215, %r219;
	cvt.u64.u32 	%rd216, %r217;
	cvt.u64.u32 	%rd217, %r218;
	add.s64 	%rd218, %rd217, %rd216;
	add.s64 	%rd219, %rd218, %rd215;
	add.s64 	%rd220, %rd219, %rd214;
	add.s64 	%rd32, %rd220, %rd213;
	add.s64 	%rd221, %rd32, %rd212;
	shl.b64 	%rd222, %rd221, 2;
	add.s64 	%rd33, %rd87, %rd222;
	st.shared.u32 	[%rd33+32], %r286;
	add.s32 	%r1392, %r227, %r1387;
	mul.wide.u32 	%rd223, %r1392, 4;
	add.s64 	%rd34, %rd87, %rd223;
	st.shared.u32 	[%rd34], %r287;
	cvt.u64.u32 	%rd224, %r224;
	add.s64 	%rd35, %rd220, %rd224;
	add.s64 	%rd225, %rd35, %rd212;
	shl.b64 	%rd226, %rd225, 2;
	add.s64 	%rd36, %rd87, %rd226;
	st.shared.u32 	[%rd36+32], %r288;
	add.s32 	%r1393, %r228, %r1387;
	mul.wide.u32 	%rd227, %r1393, 4;
	add.s64 	%rd37, %rd87, %rd227;
	st.shared.u32 	[%rd37], %r289;
	add.s16 	%rs134, %rs127, -2;
	mul.hi.s16 	%rs135, %rs134, 10923;
	shr.u16 	%rs136, %rs135, 15;
	add.s16 	%rs137, %rs135, %rs136;
	mul.lo.s16 	%rs138, %rs137, 6;
	sub.s16 	%rs139, %rs134, %rs138;
	mul.wide.s16 	%r1394, %rs139, 16;
	add.s32 	%r1395, %r222, %r1394;
	mul.wide.s32 	%rd228, %r1395, 4;
	add.s64 	%rd38, %rd87, %rd228;
	st.shared.u32 	[%rd38], %r290;
	add.s32 	%r1396, %r223, %r1394;
	mul.wide.u32 	%rd229, %r1396, 4;
	add.s64 	%rd39, %rd87, %rd229;
	st.shared.u32 	[%rd39], %r291;
	add.s32 	%r1397, %r225, %r1394;
	mul.wide.s32 	%rd230, %r1397, 4;
	add.s64 	%rd40, %rd87, %rd230;
	st.shared.u32 	[%rd40], %r292;
	add.s32 	%r1398, %r226, %r1394;
	mul.wide.u32 	%rd231, %r1398, 4;
	add.s64 	%rd41, %rd87, %rd231;
	st.shared.u32 	[%rd41], %r293;
	cvt.s64.s32 	%rd232, %r1394;
	add.s64 	%rd233, %rd32, %rd232;
	shl.b64 	%rd234, %rd233, 2;
	add.s64 	%rd42, %rd87, %rd234;
	st.shared.u32 	[%rd42+32], %r294;
	add.s32 	%r1399, %r227, %r1394;
	mul.wide.u32 	%rd235, %r1399, 4;
	add.s64 	%rd43, %rd87, %rd235;
	st.shared.u32 	[%rd43], %r295;
	add.s64 	%rd236, %rd35, %rd232;
	shl.b64 	%rd237, %rd236, 2;
	add.s64 	%rd44, %rd87, %rd237;
	st.shared.u32 	[%rd44+32], %r296;
	add.s32 	%r1400, %r228, %r1394;
	mul.wide.u32 	%rd238, %r1400, 4;
	add.s64 	%rd45, %rd87, %rd238;
	st.shared.u32 	[%rd45], %r297;
	@%p288 bra 	$L__BB0_219;
// %bb.218:                             // %oksrem7076
                                        //   in Loop: Header=BB0_162 Depth=2
	st.shared.u32 	[%rd28], %r282;
	st.shared.u32 	[%rd29], %r283;
	st.shared.u32 	[%rd30], %r284;
	st.shared.u32 	[%rd31], %r285;
	st.shared.u32 	[%rd33+32], %r286;
	st.shared.u32 	[%rd34], %r287;
	st.shared.u32 	[%rd36+32], %r288;
	st.shared.u32 	[%rd37], %r289;
	st.shared.u32 	[%rd38], %r290;
	st.shared.u32 	[%rd39], %r291;
	st.shared.u32 	[%rd40], %r292;
	st.shared.u32 	[%rd41], %r293;
	st.shared.u32 	[%rd42+32], %r294;
	st.shared.u32 	[%rd43], %r295;
	st.shared.u32 	[%rd44+32], %r296;
	st.shared.u32 	[%rd45], %r297;
$L__BB0_219:                            // %L19974
                                        //   in Loop: Header=BB0_162 Depth=2
	bar.sync 	0;
	add.s16 	%rs140, %rs3, -5;
	mul.hi.s16 	%rs141, %rs140, 10923;
	shr.u16 	%rs142, %rs141, 15;
	add.s16 	%rs143, %rs141, %rs142;
	mul.lo.s16 	%rs144, %rs143, 6;
	sub.s16 	%rs145, %rs140, %rs144;
	mul.wide.s16 	%r1447, %rs145, 16;
	add.s32 	%r1448, %r229, %r1447;
	mul.wide.s32 	%rd239, %r1448, 4;
	add.s64 	%rd241, %rd87, %rd239;
	ld.shared.u32 	%r1405, [%rd241];
	add.s32 	%r1449, %r230, %r1447;
	mul.wide.s32 	%rd242, %r1449, 4;
	add.s64 	%rd243, %rd87, %rd242;
	ld.shared.u32 	%r1412, [%rd243];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1401, %r1402}, {%r444, %r447}, {%r1405}, {%r1321, %r1321};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1408, %r1409}, {%r444, %r447}, {%r1412}, {%r1321, %r1321};
	// end inline asm
	@%p289 bra 	$L__BB0_221;
	bra.uni 	$L__BB0_220;
$L__BB0_221:                            // %pass9528
                                        //   in Loop: Header=BB0_162 Depth=2
	// begin inline asm
	neg.f16x2 %r1415, %r485;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1417, %r1415, %r1402;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1420, %r482, %r1401, %r1417;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1424, %r485;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1426, %r1424, %r1409;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1429, %r482, %r1408, %r1426;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1433, %r485, %r1401;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1436, %r482, %r1402, %r1433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1440, %r485, %r1408;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1443, %r482, %r1409, %r1440;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1469, %r1472}, {%r528, %r531}, {%r1420, %r1436}, {%r1321, %r1321}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1476, %r1480}, {%r528, %r531}, {%r1429, %r1443}, {%r1321, %r1321}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1468, %r1469, %r1469;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1471, %r1472, %r1472, %r1468;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1475, %r1476, %r1476, %r1471;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1479, %r1480, %r1480, %r1475;
	// end inline asm
	mov.u32 	%r1899, 425007445;
	// begin inline asm
	fma.rn.f16x2 %r1483, %r1899, %r1479, %r110;
	// end inline asm
	add.s32 	%r1902, %r88, %r111;
	add.s32 	%r1903, %r1902, 1;
	mul.hi.u32 	%r1904, %r1903, -1431655765;
	shr.u32 	%r1905, %r1904, 2;
	mul.lo.s32 	%r1906, %r1905, 6;
	sub.s32 	%r1907, %r1903, %r1906;
	shl.b32 	%r1908, %r1907, 4;
	add.s32 	%r1909, %r229, %r1908;
	mul.wide.u32 	%rd246, %r1909, 4;
	add.s64 	%rd248, %rd87, %rd246;
	ld.shared.u32 	%r1491, [%rd248];
	add.s32 	%r1910, %r230, %r1908;
	mul.wide.u32 	%rd249, %r1910, 4;
	add.s64 	%rd250, %rd87, %rd249;
	ld.shared.u32 	%r1498, [%rd250];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1508, %r1505}, {%r444, %r447}, {%r1491}, {%r1321, %r1321};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1517, %r1514}, {%r444, %r447}, {%r1498}, {%r1321, %r1321};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1501, %r485;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1503, %r1501, %r1505;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1506, %r482, %r1508, %r1503;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1510, %r485;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1512, %r1510, %r1514;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1515, %r482, %r1517, %r1512;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1519, %r485, %r1508;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1522, %r482, %r1505, %r1519;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1526, %r485, %r1517;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1529, %r482, %r1514, %r1526;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1552, %r1555}, {%r528, %r531}, {%r1506, %r1522}, {%r1321, %r1321}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1559, %r1563}, {%r528, %r531}, {%r1515, %r1529}, {%r1321, %r1321}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1551, %r1552, %r1552;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1554, %r1555, %r1555, %r1551;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1558, %r1559, %r1559, %r1554;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1562, %r1563, %r1563, %r1558;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1566, %r1899, %r1562, %r1483;
	// end inline asm
	add.s16 	%rs146, %rs3, -3;
	mul.hi.s16 	%rs147, %rs146, 10923;
	shr.u16 	%rs148, %rs147, 15;
	add.s16 	%rs149, %rs147, %rs148;
	mul.lo.s16 	%rs150, %rs149, 6;
	sub.s16 	%rs151, %rs146, %rs150;
	mul.wide.s16 	%r1911, %rs151, 16;
	add.s32 	%r1912, %r229, %r1911;
	mul.wide.s32 	%rd251, %r1912, 4;
	add.s64 	%rd252, %rd87, %rd251;
	ld.shared.u32 	%r1574, [%rd252];
	add.s32 	%r1913, %r230, %r1911;
	mul.wide.s32 	%rd253, %r1913, 4;
	add.s64 	%rd254, %rd87, %rd253;
	ld.shared.u32 	%r1581, [%rd254];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1591, %r1588}, {%r444, %r447}, {%r1574}, {%r1321, %r1321};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1600, %r1597}, {%r444, %r447}, {%r1581}, {%r1321, %r1321};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1584, %r485;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1586, %r1584, %r1588;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1589, %r482, %r1591, %r1586;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1593, %r485;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1595, %r1593, %r1597;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1598, %r482, %r1600, %r1595;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1602, %r485, %r1591;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1605, %r482, %r1588, %r1602;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1609, %r485, %r1600;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1612, %r482, %r1597, %r1609;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1635, %r1638}, {%r528, %r531}, {%r1589, %r1605}, {%r1321, %r1321}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1642, %r1646}, {%r528, %r531}, {%r1598, %r1612}, {%r1321, %r1321}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1634, %r1635, %r1635;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1637, %r1638, %r1638, %r1634;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1641, %r1642, %r1642, %r1637;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1645, %r1646, %r1646, %r1641;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1649, %r1899, %r1645, %r1566;
	// end inline asm
	add.s16 	%rs152, %rs3, -2;
	mul.hi.s16 	%rs153, %rs152, 10923;
	shr.u16 	%rs154, %rs153, 15;
	add.s16 	%rs155, %rs153, %rs154;
	mul.lo.s16 	%rs156, %rs155, 6;
	sub.s16 	%rs157, %rs152, %rs156;
	mul.wide.s16 	%r1914, %rs157, 16;
	add.s32 	%r1915, %r229, %r1914;
	mul.wide.s32 	%rd255, %r1915, 4;
	add.s64 	%rd256, %rd87, %rd255;
	ld.shared.u32 	%r1657, [%rd256];
	add.s32 	%r1916, %r230, %r1914;
	mul.wide.s32 	%rd257, %r1916, 4;
	add.s64 	%rd258, %rd87, %rd257;
	ld.shared.u32 	%r1664, [%rd258];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1674, %r1671}, {%r444, %r447}, {%r1657}, {%r1321, %r1321};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1683, %r1680}, {%r444, %r447}, {%r1664}, {%r1321, %r1321};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1667, %r485;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1669, %r1667, %r1671;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1672, %r482, %r1674, %r1669;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1676, %r485;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1678, %r1676, %r1680;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1681, %r482, %r1683, %r1678;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1685, %r485, %r1674;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1688, %r482, %r1671, %r1685;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1692, %r485, %r1683;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1695, %r482, %r1680, %r1692;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1718, %r1721}, {%r528, %r531}, {%r1672, %r1688}, {%r1321, %r1321}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1725, %r1729}, {%r528, %r531}, {%r1681, %r1695}, {%r1321, %r1321}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1717, %r1718, %r1718;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1720, %r1721, %r1721, %r1717;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1724, %r1725, %r1725, %r1720;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1728, %r1729, %r1729, %r1724;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1732, %r1899, %r1728, %r1649;
	// end inline asm
	add.s16 	%rs158, %rs3, -1;
	mul.hi.s16 	%rs159, %rs158, 10923;
	shr.u16 	%rs160, %rs159, 15;
	add.s16 	%rs161, %rs159, %rs160;
	mul.lo.s16 	%rs162, %rs161, 6;
	sub.s16 	%rs163, %rs158, %rs162;
	mul.wide.s16 	%r1917, %rs163, 16;
	add.s32 	%r1918, %r229, %r1917;
	mul.wide.s32 	%rd259, %r1918, 4;
	add.s64 	%rd260, %rd87, %rd259;
	ld.shared.u32 	%r1740, [%rd260];
	add.s32 	%r1919, %r230, %r1917;
	mul.wide.s32 	%rd261, %r1919, 4;
	add.s64 	%rd262, %rd87, %rd261;
	ld.shared.u32 	%r1747, [%rd262];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1757, %r1754}, {%r444, %r447}, {%r1740}, {%r1321, %r1321};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1766, %r1763}, {%r444, %r447}, {%r1747}, {%r1321, %r1321};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1750, %r485;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1752, %r1750, %r1754;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1755, %r482, %r1757, %r1752;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1759, %r485;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1761, %r1759, %r1763;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1764, %r482, %r1766, %r1761;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1768, %r485, %r1757;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1771, %r482, %r1754, %r1768;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1775, %r485, %r1766;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1778, %r482, %r1763, %r1775;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1801, %r1804}, {%r528, %r531}, {%r1755, %r1771}, {%r1321, %r1321}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1808, %r1812}, {%r528, %r531}, {%r1764, %r1778}, {%r1321, %r1321}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1800, %r1801, %r1801;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1803, %r1804, %r1804, %r1800;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1807, %r1808, %r1808, %r1803;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1811, %r1812, %r1812, %r1807;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1815, %r1899, %r1811, %r1732;
	// end inline asm
	mul.hi.s16 	%rs164, %rs3, 10923;
	shr.u16 	%rs165, %rs164, 15;
	add.s16 	%rs166, %rs164, %rs165;
	mul.lo.s16 	%rs167, %rs166, 6;
	sub.s16 	%rs168, %rs3, %rs167;
	mul.wide.s16 	%r1920, %rs168, 16;
	add.s32 	%r1921, %r229, %r1920;
	mul.wide.s32 	%rd263, %r1921, 4;
	add.s64 	%rd264, %rd87, %rd263;
	ld.shared.u32 	%r1823, [%rd264];
	add.s32 	%r1922, %r230, %r1920;
	mul.wide.s32 	%rd265, %r1922, 4;
	add.s64 	%rd266, %rd87, %rd265;
	ld.shared.u32 	%r1830, [%rd266];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1840, %r1837}, {%r444, %r447}, {%r1823}, {%r1321, %r1321};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1849, %r1846}, {%r444, %r447}, {%r1830}, {%r1321, %r1321};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1833, %r485;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1835, %r1833, %r1837;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1838, %r482, %r1840, %r1835;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1842, %r485;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1844, %r1842, %r1846;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1847, %r482, %r1849, %r1844;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1851, %r485, %r1840;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1854, %r482, %r1837, %r1851;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1858, %r485, %r1849;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1861, %r482, %r1846, %r1858;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1884, %r1887}, {%r528, %r531}, {%r1838, %r1854}, {%r1321, %r1321}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1891, %r1895}, {%r528, %r531}, {%r1847, %r1861}, {%r1321, %r1321}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1883, %r1884, %r1884;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1886, %r1887, %r1887, %r1883;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1890, %r1891, %r1891, %r1886;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1894, %r1895, %r1895, %r1890;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r110, %r1899, %r1894, %r1815;
	// end inline asm
	add.s32 	%r108, %r108, 6;
	setp.ne.s32 	%p290, %r108, 48;
	@%p290 bra 	$L__BB0_164;
// %bb.222:                             // %pass11512
                                        //   in Loop: Header=BB0_162 Depth=2
	mul.lo.s32 	%r1924, %r109, 786432;
	or.b32  	%r1925, %r1924, %r2;
	add.s32 	%r1926, %r1925, %r231;
	or.b32  	%r1927, %r1926, %r232;
	cvt.u64.u32 	%rd267, %r1927;
	add.s64 	%rd268, %rd267, %rd23;
	mul.hi.s64 	%rd269, %rd268, 3074457345618258603;
	shr.u64 	%rd270, %rd269, 63;
	shr.s64 	%rd271, %rd269, 27;
	add.s64 	%rd272, %rd271, %rd270;
	setp.lt.s64 	%p291, %rd268, 0;
	mul.lo.s64 	%rd273, %rd272, 805306368;
	setp.ne.s64 	%p292, %rd273, %rd268;
	and.pred  	%p293, %p291, %p292;
	selp.s64 	%rd274, -1, 0, %p293;
	add.s64 	%rd275, %rd272, %rd274;
	mul.lo.s64 	%rd276, %rd275, -805306368;
	add.s64 	%rd277, %rd276, %rd268;
	shl.b64 	%rd278, %rd277, 2;
	add.s64 	%rd279, %rd4, %rd278;
	st.global.u32 	[%rd279], %r110;
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r108, 0;
	mov.u32 	%r110, %r108;
	bra.uni 	$L__BB0_164;
$L__BB0_165:                            // %L25449.preheader
                                        //   in Loop: Header=BB0_198 Depth=1
	mov.u16 	%rs269, %rs1;
	mov.u32 	%r3073, %r1321;
	bra.uni 	$L__BB0_166;
$L__BB0_167:                            // %L34846
                                        //   in Loop: Header=BB0_166 Depth=2
	bar.sync 	0;
	add.s16 	%rs231, %rs269, -5;
	mul.hi.s16 	%rs232, %rs231, 10923;
	shr.u16 	%rs233, %rs232, 15;
	add.s16 	%rs234, %rs232, %rs233;
	mul.lo.s16 	%rs235, %rs234, 6;
	sub.s16 	%rs236, %rs231, %rs235;
	mul.wide.s16 	%r2985, %rs236, 16;
	add.s32 	%r2986, %r229, %r2985;
	mul.wide.s32 	%rd303, %r2986, 4;
	add.s64 	%rd305, %rd87, %rd303;
	ld.shared.u32 	%r2491, [%rd305];
	add.s32 	%r2987, %r230, %r2985;
	mul.wide.s32 	%rd306, %r2987, 4;
	add.s64 	%rd307, %rd87, %rd306;
	ld.shared.u32 	%r2498, [%rd307];
	mov.u32 	%r2964, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2508, %r2505}, {%r444, %r447}, {%r2491}, {%r2964, %r2964};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2517, %r2514}, {%r444, %r447}, {%r2498}, {%r2964, %r2964};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2501, %r485;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2503, %r2501, %r2505;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2506, %r482, %r2508, %r2503;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2510, %r485;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2512, %r2510, %r2514;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2515, %r482, %r2517, %r2512;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2519, %r485, %r2508;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2522, %r482, %r2505, %r2519;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2526, %r485, %r2517;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2529, %r482, %r2514, %r2526;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2552, %r2555}, {%r528, %r531}, {%r2506, %r2522}, {%r2964, %r2964}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2559, %r2563}, {%r528, %r531}, {%r2515, %r2529}, {%r2964, %r2964}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2551, %r2552, %r2552;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2554, %r2555, %r2555, %r2551;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2558, %r2559, %r2559, %r2554;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2562, %r2563, %r2563, %r2558;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2566, %r1899, %r2562, %r110;
	// end inline asm
	add.s16 	%rs237, %rs269, -4;
	mul.hi.s16 	%rs238, %rs237, 10923;
	shr.u16 	%rs239, %rs238, 15;
	add.s16 	%rs240, %rs238, %rs239;
	mul.lo.s16 	%rs241, %rs240, 6;
	sub.s16 	%rs242, %rs237, %rs241;
	mul.wide.s16 	%r2988, %rs242, 16;
	add.s32 	%r2989, %r229, %r2988;
	mul.wide.s32 	%rd308, %r2989, 4;
	add.s64 	%rd309, %rd87, %rd308;
	ld.shared.u32 	%r2574, [%rd309];
	add.s32 	%r2990, %r230, %r2988;
	mul.wide.s32 	%rd310, %r2990, 4;
	add.s64 	%rd311, %rd87, %rd310;
	ld.shared.u32 	%r2581, [%rd311];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2591, %r2588}, {%r444, %r447}, {%r2574}, {%r2964, %r2964};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2600, %r2597}, {%r444, %r447}, {%r2581}, {%r2964, %r2964};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2584, %r485;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2586, %r2584, %r2588;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2589, %r482, %r2591, %r2586;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2593, %r485;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2595, %r2593, %r2597;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2598, %r482, %r2600, %r2595;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2602, %r485, %r2591;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2605, %r482, %r2588, %r2602;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2609, %r485, %r2600;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2612, %r482, %r2597, %r2609;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2635, %r2638}, {%r528, %r531}, {%r2589, %r2605}, {%r2964, %r2964}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2642, %r2646}, {%r528, %r531}, {%r2598, %r2612}, {%r2964, %r2964}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2634, %r2635, %r2635;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2637, %r2638, %r2638, %r2634;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2641, %r2642, %r2642, %r2637;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2645, %r2646, %r2646, %r2641;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2649, %r1899, %r2645, %r2566;
	// end inline asm
	add.s16 	%rs243, %rs269, -3;
	mul.hi.s16 	%rs244, %rs243, 10923;
	shr.u16 	%rs245, %rs244, 15;
	add.s16 	%rs246, %rs244, %rs245;
	mul.lo.s16 	%rs247, %rs246, 6;
	sub.s16 	%rs248, %rs243, %rs247;
	mul.wide.s16 	%r2991, %rs248, 16;
	add.s32 	%r2992, %r229, %r2991;
	mul.wide.s32 	%rd312, %r2992, 4;
	add.s64 	%rd313, %rd87, %rd312;
	ld.shared.u32 	%r2657, [%rd313];
	add.s32 	%r2993, %r230, %r2991;
	mul.wide.s32 	%rd314, %r2993, 4;
	add.s64 	%rd315, %rd87, %rd314;
	ld.shared.u32 	%r2664, [%rd315];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2674, %r2671}, {%r444, %r447}, {%r2657}, {%r2964, %r2964};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2683, %r2680}, {%r444, %r447}, {%r2664}, {%r2964, %r2964};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2667, %r485;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2669, %r2667, %r2671;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2672, %r482, %r2674, %r2669;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2676, %r485;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2678, %r2676, %r2680;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2681, %r482, %r2683, %r2678;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2685, %r485, %r2674;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2688, %r482, %r2671, %r2685;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2692, %r485, %r2683;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2695, %r482, %r2680, %r2692;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2718, %r2721}, {%r528, %r531}, {%r2672, %r2688}, {%r2964, %r2964}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2725, %r2729}, {%r528, %r531}, {%r2681, %r2695}, {%r2964, %r2964}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2717, %r2718, %r2718;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2720, %r2721, %r2721, %r2717;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2724, %r2725, %r2725, %r2720;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2728, %r2729, %r2729, %r2724;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2732, %r1899, %r2728, %r2649;
	// end inline asm
	add.s16 	%rs249, %rs269, -2;
	mul.hi.s16 	%rs250, %rs249, 10923;
	shr.u16 	%rs251, %rs250, 15;
	add.s16 	%rs252, %rs250, %rs251;
	mul.lo.s16 	%rs253, %rs252, 6;
	sub.s16 	%rs254, %rs249, %rs253;
	mul.wide.s16 	%r2994, %rs254, 16;
	add.s32 	%r2995, %r229, %r2994;
	mul.wide.s32 	%rd316, %r2995, 4;
	add.s64 	%rd317, %rd87, %rd316;
	ld.shared.u32 	%r2740, [%rd317];
	add.s32 	%r2996, %r230, %r2994;
	mul.wide.s32 	%rd318, %r2996, 4;
	add.s64 	%rd319, %rd87, %rd318;
	ld.shared.u32 	%r2747, [%rd319];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2757, %r2754}, {%r444, %r447}, {%r2740}, {%r2964, %r2964};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2766, %r2763}, {%r444, %r447}, {%r2747}, {%r2964, %r2964};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2750, %r485;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2752, %r2750, %r2754;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2755, %r482, %r2757, %r2752;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2759, %r485;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2761, %r2759, %r2763;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2764, %r482, %r2766, %r2761;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2768, %r485, %r2757;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2771, %r482, %r2754, %r2768;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2775, %r485, %r2766;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2778, %r482, %r2763, %r2775;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2801, %r2804}, {%r528, %r531}, {%r2755, %r2771}, {%r2964, %r2964}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2808, %r2812}, {%r528, %r531}, {%r2764, %r2778}, {%r2964, %r2964}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2800, %r2801, %r2801;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2803, %r2804, %r2804, %r2800;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2807, %r2808, %r2808, %r2803;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2811, %r2812, %r2812, %r2807;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2815, %r1899, %r2811, %r2732;
	// end inline asm
	add.s16 	%rs255, %rs269, -1;
	mul.hi.s16 	%rs256, %rs255, 10923;
	shr.u16 	%rs257, %rs256, 15;
	add.s16 	%rs258, %rs256, %rs257;
	mul.lo.s16 	%rs259, %rs258, 6;
	sub.s16 	%rs260, %rs255, %rs259;
	mul.wide.s16 	%r2997, %rs260, 16;
	add.s32 	%r2998, %r229, %r2997;
	mul.wide.s32 	%rd320, %r2998, 4;
	add.s64 	%rd321, %rd87, %rd320;
	ld.shared.u32 	%r2823, [%rd321];
	add.s32 	%r2999, %r230, %r2997;
	mul.wide.s32 	%rd322, %r2999, 4;
	add.s64 	%rd323, %rd87, %rd322;
	ld.shared.u32 	%r2830, [%rd323];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2840, %r2837}, {%r444, %r447}, {%r2823}, {%r2964, %r2964};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2849, %r2846}, {%r444, %r447}, {%r2830}, {%r2964, %r2964};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2833, %r485;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2835, %r2833, %r2837;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2838, %r482, %r2840, %r2835;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2842, %r485;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2844, %r2842, %r2846;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2847, %r482, %r2849, %r2844;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2851, %r485, %r2840;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2854, %r482, %r2837, %r2851;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2858, %r485, %r2849;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2861, %r482, %r2846, %r2858;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2884, %r2887}, {%r528, %r531}, {%r2838, %r2854}, {%r2964, %r2964}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2891, %r2895}, {%r528, %r531}, {%r2847, %r2861}, {%r2964, %r2964}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2883, %r2884, %r2884;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2886, %r2887, %r2887, %r2883;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2890, %r2891, %r2891, %r2886;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2894, %r2895, %r2895, %r2890;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2898, %r1899, %r2894, %r2815;
	// end inline asm
	mul.hi.s16 	%rs261, %rs269, 10923;
	shr.u16 	%rs262, %rs261, 15;
	add.s16 	%rs263, %rs261, %rs262;
	mul.lo.s16 	%rs264, %rs263, 6;
	sub.s16 	%rs265, %rs269, %rs264;
	mul.wide.s16 	%r3000, %rs265, 16;
	add.s32 	%r3001, %r229, %r3000;
	mul.wide.s32 	%rd324, %r3001, 4;
	add.s64 	%rd325, %rd87, %rd324;
	ld.shared.u32 	%r2906, [%rd325];
	add.s32 	%r3002, %r230, %r3000;
	mul.wide.s32 	%rd326, %r3002, 4;
	add.s64 	%rd327, %rd87, %rd326;
	ld.shared.u32 	%r2913, [%rd327];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2923, %r2920}, {%r444, %r447}, {%r2906}, {%r2964, %r2964};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2932, %r2929}, {%r444, %r447}, {%r2913}, {%r2964, %r2964};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2916, %r485;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2918, %r2916, %r2920;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2921, %r482, %r2923, %r2918;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2925, %r485;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2927, %r2925, %r2929;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2930, %r482, %r2932, %r2927;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2934, %r485, %r2923;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2937, %r482, %r2920, %r2934;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2941, %r485, %r2932;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2944, %r482, %r2929, %r2941;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2967, %r2970}, {%r528, %r531}, {%r2921, %r2937}, {%r2964, %r2964}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2974, %r2978}, {%r528, %r531}, {%r2930, %r2944}, {%r2964, %r2964}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2966, %r2967, %r2967;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2969, %r2970, %r2970, %r2966;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2973, %r2974, %r2974, %r2969;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2977, %r2978, %r2978, %r2973;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r110, %r1899, %r2977, %r2898;
	// end inline asm
	add.s32 	%r108, %r108, 6;
	setp.eq.s32 	%p300, %r108, 48;
	@%p300 bra 	$L__BB0_224;
$L__BB0_168:                            // %L40300
                                        //   in Loop: Header=BB0_166 Depth=2
	bar.sync 	0;
	add.s32 	%r3073, %r3073, 6;
	add.s16 	%rs269, %rs269, 6;
	setp.ne.s32 	%p304, %r3073, 24;
	@%p304 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_169;
$L__BB0_166:                            // %L25449
                                        //   Parent Loop BB0_198 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.lt.u32 	%p295, %r312, 12;
	setp.eq.s32 	%p296, %r3073, 0;
	selp.b32 	%r2457, %r92, 0, %p296;
	setp.eq.s32 	%p297, %r3073, 6;
	selp.b32 	%r2458, %r96, %r2457, %p297;
	setp.eq.s32 	%p298, %r3073, 12;
	selp.b32 	%r2459, %r100, %r2458, %p298;
	setp.eq.s32 	%p299, %r3073, 18;
	selp.b32 	%r2460, %r104, %r2459, %p299;
	selp.b32 	%r2461, %r93, 0, %p296;
	selp.b32 	%r2462, %r97, %r2461, %p297;
	selp.b32 	%r2463, %r101, %r2462, %p298;
	selp.b32 	%r2464, %r105, %r2463, %p299;
	selp.b32 	%r2465, %r94, 0, %p296;
	selp.b32 	%r2466, %r98, %r2465, %p297;
	selp.b32 	%r2467, %r102, %r2466, %p298;
	selp.b32 	%r2468, %r106, %r2467, %p299;
	selp.b32 	%r2469, %r95, 0, %p296;
	selp.b32 	%r2470, %r99, %r2469, %p297;
	selp.b32 	%r2471, %r103, %r2470, %p298;
	selp.b32 	%r2472, %r107, %r2471, %p299;
	// begin inline asm
	mov.b32 %r1956, {%rs116, %rs116};
	// end inline asm
	// begin inline asm
	mov.b32 %r1967, {%rs118, %rs118};
	// end inline asm
	shr.u32 	%r1955, %r2460, 8;
	// begin inline asm
	lop3.b32 %r1953, %r988, %r1955, %r1956, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1957, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1958, %r1956, %r1957;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1961, %r1953, %r1958;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1964, %r999, %r1955, %r1967, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1968, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1969, %r1967, %r1968;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1972, %r1964, %r1969;
	// end inline asm
	// begin inline asm
	mov.b32 %r2002, {%rs116, %rs116};
	// end inline asm
	// begin inline asm
	mov.b32 %r2013, {%rs118, %rs118};
	// end inline asm
	shr.u32 	%r2001, %r2464, 8;
	// begin inline asm
	lop3.b32 %r1999, %r988, %r2001, %r2002, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2003, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2004, %r2002, %r2003;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2007, %r1999, %r2004;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2010, %r999, %r2001, %r2013, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2014, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2015, %r2013, %r2014;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2018, %r2010, %r2015;
	// end inline asm
	// begin inline asm
	mov.b32 %r2048, {%rs116, %rs116};
	// end inline asm
	// begin inline asm
	mov.b32 %r2059, {%rs118, %rs118};
	// end inline asm
	shr.u32 	%r2047, %r2468, 8;
	// begin inline asm
	lop3.b32 %r2045, %r988, %r2047, %r2048, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2049, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2050, %r2048, %r2049;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2053, %r2045, %r2050;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2056, %r999, %r2047, %r2059, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2060, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2061, %r2059, %r2060;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2064, %r2056, %r2061;
	// end inline asm
	// begin inline asm
	mov.b32 %r2094, {%rs116, %rs116};
	// end inline asm
	// begin inline asm
	mov.b32 %r2105, {%rs118, %rs118};
	// end inline asm
	shr.u32 	%r2093, %r2472, 8;
	// begin inline asm
	lop3.b32 %r2091, %r988, %r2093, %r2094, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2095, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2096, %r2094, %r2095;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2099, %r2091, %r2096;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2102, %r999, %r2093, %r2105, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2106, {%rs122, %rs122};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2107, %r2105, %r2106;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2110, %r2102, %r2107;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r193;
    mov.b32 {%r2re, %r2im}, %r1972;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2113, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r194;
    mov.b32 {%r2re, %r2im}, %r2018;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2116, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r195;
    mov.b32 {%r2re, %r2im}, %r1961;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2119, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r196;
    mov.b32 {%r2re, %r2im}, %r2007;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2122, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r193;
    mov.b32 {%r2re, %r2im}, %r2064;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2125, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r194;
    mov.b32 {%r2re, %r2im}, %r2110;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2128, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r195;
    mov.b32 {%r2re, %r2im}, %r2053;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2131, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r196;
    mov.b32 {%r2re, %r2im}, %r2099;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2134, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2200, %r2197}, {%r336, %r339}, {%r2113}, {%r1321, %r1321};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2209, %r2206}, {%r336, %r339}, {%r2116}, {%r1321, %r1321};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2218, %r2215}, {%r336, %r339}, {%r2119}, {%r1321, %r1321};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2227, %r2224}, {%r336, %r339}, {%r2122}, {%r1321, %r1321};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2236, %r2233}, {%r336, %r339}, {%r2125}, {%r1321, %r1321};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2245, %r2242}, {%r336, %r339}, {%r2128}, {%r1321, %r1321};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2254, %r2251}, {%r336, %r339}, {%r2131}, {%r1321, %r1321};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2263, %r2260}, {%r336, %r339}, {%r2134}, {%r1321, %r1321};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2193, %r391;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2195, %r2193, %r2197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2198, %r388, %r2200, %r2195;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2202, %r391;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2204, %r2202, %r2206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2207, %r388, %r2209, %r2204;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2211, %r391;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2213, %r2211, %r2215;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2216, %r388, %r2218, %r2213;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2220, %r391;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2222, %r2220, %r2224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2225, %r388, %r2227, %r2222;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2229, %r391;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2231, %r2229, %r2233;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2234, %r388, %r2236, %r2231;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2238, %r391;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2240, %r2238, %r2242;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2243, %r388, %r2245, %r2240;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2247, %r391;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2249, %r2247, %r2251;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2252, %r388, %r2254, %r2249;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2256, %r391;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2258, %r2256, %r2260;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2261, %r388, %r2263, %r2258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2265, %r391, %r2200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2268, %r388, %r2197, %r2265;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2272, %r391, %r2209;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2275, %r388, %r2206, %r2272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2279, %r391, %r2218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2282, %r388, %r2215, %r2279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2286, %r391, %r2227;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2289, %r388, %r2224, %r2286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2293, %r391, %r2236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2296, %r388, %r2233, %r2293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2300, %r391, %r2245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2303, %r388, %r2242, %r2300;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2307, %r391, %r2254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2310, %r388, %r2251, %r2307;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2314, %r391, %r2263;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2317, %r388, %r2260, %r2314;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2394, %r2395}, {%r432, %r435}, {%r2198, %r2268}, {%r1321, %r1321}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2402, %r2403}, {%r432, %r435}, {%r2207, %r2275}, {%r1321, %r1321}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2410, %r2411}, {%r432, %r435}, {%r2216, %r2282}, {%r1321, %r1321}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2418, %r2419}, {%r432, %r435}, {%r2225, %r2289}, {%r1321, %r1321}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2426, %r2427}, {%r432, %r435}, {%r2234, %r2296}, {%r1321, %r1321}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2434, %r2435}, {%r432, %r435}, {%r2243, %r2303}, {%r1321, %r1321}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2442, %r2443}, {%r432, %r435}, {%r2252, %r2310}, {%r1321, %r1321}, %r233, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2450, %r2451}, {%r432, %r435}, {%r2261, %r2317}, {%r1321, %r1321}, %r233, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2393, %r2394, %r2395, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2397, %r2394, %r2395, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2401, %r2402, %r2403, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2405, %r2402, %r2403, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2409, %r2410, %r2411, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2413, %r2410, %r2411, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2417, %r2418, %r2419, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2421, %r2418, %r2419, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2425, %r2426, %r2427, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2429, %r2426, %r2427, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2433, %r2434, %r2435, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2437, %r2434, %r2435, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2441, %r2442, %r2443, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2445, %r2442, %r2443, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2449, %r2450, %r2451, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2453, %r2450, %r2451, %r723;
	// end inline asm
	add.s16 	%rs217, %rs10, %rs269;
	add.s16 	%rs218, %rs217, -29;
	mul.hi.s16 	%rs219, %rs218, 10923;
	shr.u16 	%rs220, %rs219, 15;
	add.s16 	%rs221, %rs219, %rs220;
	mul.lo.s16 	%rs222, %rs221, 6;
	sub.s16 	%rs223, %rs218, %rs222;
	mul.wide.s16 	%r2473, %rs223, 16;
	add.s32 	%r2474, %r222, %r2473;
	mul.wide.s32 	%rd280, %r2474, 4;
	add.s64 	%rd7, %rd87, %rd280;
	st.shared.u32 	[%rd7], %r2393;
	add.s32 	%r2475, %r223, %r2473;
	mul.wide.u32 	%rd282, %r2475, 4;
	add.s64 	%rd8, %rd87, %rd282;
	st.shared.u32 	[%rd8], %r2397;
	add.s32 	%r2476, %r225, %r2473;
	mul.wide.s32 	%rd283, %r2476, 4;
	add.s64 	%rd9, %rd87, %rd283;
	st.shared.u32 	[%rd9], %r2401;
	add.s32 	%r2477, %r226, %r2473;
	mul.wide.u32 	%rd284, %r2477, 4;
	add.s64 	%rd10, %rd87, %rd284;
	st.shared.u32 	[%rd10], %r2405;
	cvt.s64.s32 	%rd285, %r2473;
	add.s64 	%rd286, %rd32, %rd285;
	shl.b64 	%rd287, %rd286, 2;
	add.s64 	%rd11, %rd87, %rd287;
	st.shared.u32 	[%rd11+32], %r2409;
	add.s32 	%r2478, %r227, %r2473;
	mul.wide.u32 	%rd288, %r2478, 4;
	add.s64 	%rd12, %rd87, %rd288;
	st.shared.u32 	[%rd12], %r2413;
	add.s64 	%rd289, %rd35, %rd285;
	shl.b64 	%rd290, %rd289, 2;
	add.s64 	%rd13, %rd87, %rd290;
	st.shared.u32 	[%rd13+32], %r2417;
	add.s32 	%r2479, %r228, %r2473;
	mul.wide.u32 	%rd291, %r2479, 4;
	add.s64 	%rd14, %rd87, %rd291;
	st.shared.u32 	[%rd14], %r2421;
	add.s16 	%rs224, %rs9, %rs269;
	add.s16 	%rs225, %rs224, -2;
	mul.hi.s16 	%rs226, %rs225, 10923;
	shr.u16 	%rs227, %rs226, 15;
	add.s16 	%rs228, %rs226, %rs227;
	mul.lo.s16 	%rs229, %rs228, 6;
	sub.s16 	%rs230, %rs225, %rs229;
	mul.wide.s16 	%r2480, %rs230, 16;
	add.s32 	%r2481, %r222, %r2480;
	mul.wide.s32 	%rd292, %r2481, 4;
	add.s64 	%rd15, %rd87, %rd292;
	st.shared.u32 	[%rd15], %r2425;
	add.s32 	%r2482, %r223, %r2480;
	mul.wide.u32 	%rd293, %r2482, 4;
	add.s64 	%rd16, %rd87, %rd293;
	st.shared.u32 	[%rd16], %r2429;
	add.s32 	%r2483, %r225, %r2480;
	mul.wide.s32 	%rd294, %r2483, 4;
	add.s64 	%rd17, %rd87, %rd294;
	st.shared.u32 	[%rd17], %r2433;
	add.s32 	%r2484, %r226, %r2480;
	mul.wide.u32 	%rd295, %r2484, 4;
	add.s64 	%rd18, %rd87, %rd295;
	st.shared.u32 	[%rd18], %r2437;
	cvt.s64.s32 	%rd296, %r2480;
	add.s64 	%rd297, %rd32, %rd296;
	shl.b64 	%rd298, %rd297, 2;
	add.s64 	%rd19, %rd87, %rd298;
	st.shared.u32 	[%rd19+32], %r2441;
	add.s32 	%r2485, %r227, %r2480;
	mul.wide.u32 	%rd299, %r2485, 4;
	add.s64 	%rd20, %rd87, %rd299;
	st.shared.u32 	[%rd20], %r2445;
	add.s64 	%rd300, %rd35, %rd296;
	shl.b64 	%rd301, %rd300, 2;
	add.s64 	%rd21, %rd87, %rd301;
	st.shared.u32 	[%rd21+32], %r2449;
	add.s32 	%r2486, %r228, %r2480;
	mul.wide.u32 	%rd302, %r2486, 4;
	add.s64 	%rd22, %rd87, %rd302;
	st.shared.u32 	[%rd22], %r2453;
	@%p295 bra 	$L__BB0_223;
	bra.uni 	$L__BB0_167;
$L__BB0_223:                            // %oksrem13978
                                        //   in Loop: Header=BB0_166 Depth=2
	st.shared.u32 	[%rd7], %r2393;
	st.shared.u32 	[%rd8], %r2397;
	st.shared.u32 	[%rd9], %r2401;
	st.shared.u32 	[%rd10], %r2405;
	st.shared.u32 	[%rd11+32], %r2409;
	st.shared.u32 	[%rd12], %r2413;
	st.shared.u32 	[%rd13+32], %r2417;
	st.shared.u32 	[%rd14], %r2421;
	st.shared.u32 	[%rd15], %r2425;
	st.shared.u32 	[%rd16], %r2429;
	st.shared.u32 	[%rd17], %r2433;
	st.shared.u32 	[%rd18], %r2437;
	st.shared.u32 	[%rd19+32], %r2441;
	st.shared.u32 	[%rd20], %r2445;
	st.shared.u32 	[%rd21+32], %r2449;
	st.shared.u32 	[%rd22], %r2453;
	bra.uni 	$L__BB0_167;
$L__BB0_224:                            // %pass18414
                                        //   in Loop: Header=BB0_166 Depth=2
	mul.lo.s32 	%r3004, %r109, 786432;
	or.b32  	%r3005, %r3004, %r2;
	add.s32 	%r3006, %r3005, %r231;
	or.b32  	%r3007, %r3006, %r232;
	cvt.u64.u32 	%rd328, %r3007;
	add.s64 	%rd329, %rd328, %rd23;
	mul.hi.s64 	%rd330, %rd329, 3074457345618258603;
	shr.u64 	%rd331, %rd330, 63;
	shr.s64 	%rd332, %rd330, 27;
	add.s64 	%rd333, %rd332, %rd331;
	setp.lt.s64 	%p301, %rd329, 0;
	mul.lo.s64 	%rd334, %rd333, 805306368;
	setp.ne.s64 	%p302, %rd334, %rd329;
	and.pred  	%p303, %p301, %p302;
	selp.s64 	%rd335, -1, 0, %p303;
	add.s64 	%rd336, %rd333, %rd335;
	mul.lo.s64 	%rd337, %rd336, -805306368;
	add.s64 	%rd338, %rd337, %rd329;
	shl.b64 	%rd339, %rd338, 2;
	add.s64 	%rd340, %rd4, %rd339;
	st.global.u32 	[%rd340], %r110;
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r108, %r2964;
	mov.u32 	%r110, %r2964;
	bra.uni 	$L__BB0_168;
$L__BB0_170:                            // %L40331
	mov.u32 	%r3008, 0;
	st.global.u32 	[%rd6], %r3008;
	ret;
$L__BB0_163:                            // %post_box_union
	mov.u64 	%rd205, exception3604;
	cvta.global.u64 	%rd206, %rd205;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd206;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_220:                            // %post_box_union9523
	mov.u64 	%rd244, exception3604;
	cvta.global.u64 	%rd245, %rd244;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd245;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L5128
	mov.u32 	%r3024, 5;
	st.global.u32 	[%rd6], %r3024;
	mov.u64 	%rd371, exception3564;
	cvta.global.u64 	%rd372, %rd371;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd372;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L5284
	mov.u32 	%r3023, 5;
	st.global.u32 	[%rd6], %r3023;
	mov.u64 	%rd369, exception3564;
	cvta.global.u64 	%rd370, %rd369;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd370;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L5440
	mov.u32 	%r3022, 5;
	st.global.u32 	[%rd6], %r3022;
	mov.u64 	%rd367, exception3564;
	cvta.global.u64 	%rd368, %rd367;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd368;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L5596
	mov.u32 	%r3021, 5;
	st.global.u32 	[%rd6], %r3021;
	mov.u64 	%rd365, exception3564;
	cvta.global.u64 	%rd366, %rd365;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd366;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L5752
	mov.u32 	%r3020, 5;
	st.global.u32 	[%rd6], %r3020;
	mov.u64 	%rd363, exception3564;
	cvta.global.u64 	%rd364, %rd363;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd364;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L5908
	mov.u32 	%r3019, 5;
	st.global.u32 	[%rd6], %r3019;
	mov.u64 	%rd361, exception3564;
	cvta.global.u64 	%rd362, %rd361;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd362;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_151:                            // %L6064
	mov.u32 	%r3018, 5;
	st.global.u32 	[%rd6], %r3018;
	mov.u64 	%rd359, exception3564;
	cvta.global.u64 	%rd360, %rd359;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd360;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_152:                            // %L6220
	mov.u32 	%r3017, 5;
	st.global.u32 	[%rd6], %r3017;
	mov.u64 	%rd357, exception3564;
	cvta.global.u64 	%rd358, %rd357;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd358;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_153:                            // %L6376
	mov.u32 	%r3016, 5;
	st.global.u32 	[%rd6], %r3016;
	mov.u64 	%rd355, exception3564;
	cvta.global.u64 	%rd356, %rd355;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd356;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_154:                            // %L6532
	mov.u32 	%r3015, 5;
	st.global.u32 	[%rd6], %r3015;
	mov.u64 	%rd353, exception3564;
	cvta.global.u64 	%rd354, %rd353;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd354;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_155:                            // %L6714
	mov.u32 	%r3014, 5;
	st.global.u32 	[%rd6], %r3014;
	mov.u64 	%rd351, exception3564;
	cvta.global.u64 	%rd352, %rd351;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd352;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_156:                            // %L6870
	mov.u32 	%r3013, 5;
	st.global.u32 	[%rd6], %r3013;
	mov.u64 	%rd349, exception3564;
	cvta.global.u64 	%rd350, %rd349;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd350;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_157:                            // %L7026
	mov.u32 	%r3012, 5;
	st.global.u32 	[%rd6], %r3012;
	mov.u64 	%rd347, exception3564;
	cvta.global.u64 	%rd348, %rd347;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd348;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_158:                            // %L7182
	mov.u32 	%r3011, 5;
	st.global.u32 	[%rd6], %r3011;
	mov.u64 	%rd345, exception3564;
	cvta.global.u64 	%rd346, %rd345;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd346;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_159:                            // %L7338
	mov.u32 	%r3010, 5;
	st.global.u32 	[%rd6], %r3010;
	mov.u64 	%rd343, exception3564;
	cvta.global.u64 	%rd344, %rd343;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd344;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_160:                            // %L7494
	mov.u32 	%r3009, 5;
	st.global.u32 	[%rd6], %r3009;
	mov.u64 	%rd341, exception3564;
	cvta.global.u64 	%rd342, %rd341;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd342;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_12:                             // %L307
	mov.u32 	%r3025, 3;
	st.global.u32 	[%rd6], %r3025;
	mov.u64 	%rd373, exception3564;
	cvta.global.u64 	%rd374, %rd373;
	{ // callseq 88, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd374;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 88
	{ // callseq 89, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 89
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L166
	mov.u32 	%r3026, 2;
	st.global.u32 	[%rd6], %r3026;
	mov.u64 	%rd375, exception3564;
	cvta.global.u64 	%rd376, %rd375;
	{ // callseq 90, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd376;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 90
	{ // callseq 91, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 91
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd52, exception1;
	cvta.global.u64 	%rd53, %rd52;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd53;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 47
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 48
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_144:                            // %L1152
	add.u64 	%rd51, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r312, %r4};
	st.local.v2.u32 	[%rd5+8], {%r1, %r85};
	st.local.u32 	[%rd5+16], %r86;
	mov.u64 	%rd57, __unnamed_1;
	cvta.global.u64 	%rd58, %rd57;
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd58;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd51;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r541, [retval0+0];
	} // callseq 49
	mov.u32 	%r543, 4;
	st.global.u32 	[%rd6], %r543;
	mov.u64 	%rd60, exception3564;
	cvta.global.u64 	%rd61, %rd60;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd61;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd46;
	st.param.b32 	[param0+8], %r302;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
