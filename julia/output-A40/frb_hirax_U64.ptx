// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception2501[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception2549[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 512, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<371>;
	.reg .b16 	%rs<97>;
	.reg .b32 	%r<3557>;
	.reg .f32 	%f<752>;
	.reg .b64 	%rd<436>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r300, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd59, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r309, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r309, 34943;
	@%p2 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L20
	ld.param.u64 	%rd60, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r301, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r2, %r1, 9;
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r4, %tid.y;
	shl.b32 	%r5, %r4, 5;
	or.b32  	%r310, %r2, %r3;
	or.b32  	%r311, %r310, %r5;
	mul.wide.u32 	%rd67, %r311, 4;
	add.s64 	%rd6, %rd60, %rd67;
	mov.u32 	%r312, 1;
	st.global.u32 	[%rd6], %r312;
	setp.gt.u32 	%p3, %r301, 511;
	@%p3 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r302, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p4, %r302, %r301;
	setp.gt.s32 	%p5, %r302, 1023;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r303, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r302, %r301;
	and.b32  	%r313, %r6, 63;
	setp.ne.s32 	%p7, %r313, 0;
	setp.gt.u32 	%p8, %r303, 63;
	or.pred  	%p9, %p7, %p8;
	@%p9 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r304, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p10, %r304, %r303;
	setp.lt.s32 	%p11, %r304, 128;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass40
	sub.s32 	%r314, %r304, %r303;
	mul.hi.s32 	%r315, %r6, 1374389535;
	shr.u32 	%r316, %r315, 31;
	shr.s32 	%r317, %r315, 3;
	add.s32 	%r318, %r317, %r316;
	setp.eq.s32 	%p13, %r314, %r318;
	@%p13 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L261
	ld.param.u32 	%r305, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p14, %r305, 0;
	@%p14 bra 	$L__BB0_13;
// %bb.9:                               // %L263
	ld.param.u32 	%r306, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p15, %r306, %r305;
	setp.gt.s32 	%p16, %r306, 4096;
	or.pred  	%p17, %p15, %p16;
	@%p17 bra 	$L__BB0_13;
// %bb.10:                              // %L273
	ld.param.u32 	%r307, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r7, %r306, %r305;
	and.b32  	%r319, %r7, 63;
	setp.ne.s32 	%p18, %r319, 0;
	setp.lt.s32 	%p19, %r307, 0;
	or.pred  	%p20, %p18, %p19;
	@%p20 bra 	$L__BB0_13;
// %bb.11:                              // %L279
	ld.param.u32 	%r308, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p21, %r308, %r307;
	setp.gt.s32 	%p22, %r308, 4096;
	or.pred  	%p23, %p21, %p22;
	@%p23 bra 	$L__BB0_13;
// %bb.12:                              // %L289
	sub.s32 	%r320, %r308, %r307;
	and.b32  	%r321, %r320, 63;
	setp.eq.s32 	%p24, %r321, 0;
	setp.eq.s32 	%p25, %r320, %r7;
	and.pred  	%p26, %p24, %p25;
	@%p26 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_13;
$L__BB0_197:                            // %pass149
	and.b32  	%r144, %r3, 3;
	shr.u32 	%r145, %r3, 2;
	mul.lo.s32 	%r322, %r144, %r145;
	and.b32  	%r323, %r322, 7;
	cvt.rn.f32.s32 	%f185, %r323;
	mov.f32 	%f186, 0f40800000;
	div.approx.f32 	%f151, %f185, %f186;
	abs.f32 	%f750, %f151;
	setp.lt.f32 	%p27, %f750, 0f40000000;
	mov.f32 	%f703, 0f40000000;
	setp.gtu.f32 	%p366, %f750, 0f4B800000;
	mov.f32 	%f746, %f750;
	@%p27 bra 	$L__BB0_209;
// %bb.198:
	@%p366 bra 	$L__BB0_205;
	bra.uni 	$L__BB0_199;
$L__BB0_205:
	mov.b32 	%r147, %f750;
	and.b32  	%r324, %r147, 8388607;
	or.b32  	%r3510, %r324, 1065353216;
	mov.b32 	%f745, %r3510;
	add.s32 	%r325, %r147, -1073741824;
	and.b32  	%r3511, %r325, -8388608;
	setp.eq.s32 	%p34, %r3511, 0;
	@%p34 bra 	$L__BB0_208;
// %bb.206:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f196, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f195,%f196;
	// end inline asm
$L__BB0_207:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r326, %r3511, 192937984;
	add.s32 	%r327, %r3510, %r326;
	mov.b32 	%f197, %r327;
	mul.f32 	%f198, %f195, %f197;
	sub.f32 	%f199, %f197, %f198;
	fma.rn.f32 	%f200, %f199, %f195, %f198;
	sub.f32 	%f201, %f197, %f200;
	fma.rz.f32 	%f202, %f201, %f195, %f200;
	cvt.rzi.f32.f32 	%f203, %f202;
	sub.f32 	%f745, %f197, %f203;
	sub.s32 	%r3511, %r3511, %r326;
	mov.b32 	%r3510, %f745;
	setp.ne.s32 	%p35, %r3511, 0;
	setp.ne.s32 	%p36, %r3510, 0;
	and.pred  	%p37, %p35, %p36;
	@%p37 bra 	$L__BB0_207;
$L__BB0_208:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p38, %r147, 2139095039;
	selp.f32 	%f204, 0f7FFFFFFF, 0f4B800000, %p38;
	mul.f32 	%f205, %f745, 0f34000000;
	mul.f32 	%f746, %f204, %f205;
	bra.uni 	$L__BB0_209;
$L__BB0_199:                            // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f188, %f750, %f703;
	cvt.rzi.f32.f32 	%f744, %f188;
	fma.rn.f32 	%f154, %f744, 0fC0000000, %f750;
	mov.b32 	%r146, %f154;
	setp.lt.u32 	%p29, %r146, 1073741824;
	@%p29 bra 	$L__BB0_204;
// %bb.200:
	setp.lt.u32 	%p30, %r146, -2147483647;
	@%p30 bra 	$L__BB0_202;
// %bb.201:
	add.f32 	%f193, %f744, 0fBF800000;
	setp.lt.f32 	%p33, %f154, 0fC0000000;
	add.f32 	%f194, %f193, 0fBF800000;
	selp.f32 	%f744, %f194, %f193, %p33;
	bra.uni 	$L__BB0_204;
$L__BB0_202:
	add.f32 	%f744, %f744, 0f3F800000;
	setp.ltu.f32 	%p31, %f154, 0f40800000;
	@%p31 bra 	$L__BB0_204;
// %bb.203:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f189, %f744, 0f3F800000;
	fma.rn.f32 	%f191, %f703, 0fC0400000, %f154;
	setp.ge.f32 	%p32, %f191, 0f00000000;
	add.f32 	%f192, %f189, 0f3F800000;
	selp.f32 	%f744, %f192, %f189, %p32;
$L__BB0_204:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f746, %f744, 0fC0000000, %f750;
$L__BB0_209:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f206, %f746;
	setp.gtu.f32 	%p39, %f206, 0f7F800000;
	mov.b32 	%r328, %f151;
	and.b32  	%r154, %r328, -2147483648;
	@%p39 bra 	$L__BB0_211;
// %bb.210:
	mov.b32 	%r329, %f746;
	or.b32  	%r330, %r154, %r329;
	mov.b32 	%f746, %r330;
$L__BB0_211:                            // %__nv_fmodf.exit
	shl.b32 	%r157, %r3, 1;
	and.b32  	%r345, %r157, 2;
	mul.lo.s32 	%r158, %r345, %r145;
	cvt.rn.f32.s32 	%f239, %r158;
	mov.f32 	%f240, 0f41800000;
	div.approx.f32 	%f168, %f239, %f240;
	abs.f32 	%f726, %f168;
	setp.lt.f32 	%p47, %f726, 0f40000000;
	setp.gtu.f32 	%p367, %f726, 0f4B800000;
	mov.f32 	%f706, %f726;
	@%p47 bra 	$L__BB0_25;
// %bb.14:
	@%p367 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_15;
$L__BB0_21:
	mov.b32 	%r9, %f726;
	and.b32  	%r346, %r9, 8388607;
	or.b32  	%r3476, %r346, 1065353216;
	mov.b32 	%f705, %r3476;
	add.s32 	%r347, %r9, -1073741824;
	and.b32  	%r3477, %r347, -8388608;
	setp.eq.s32 	%p54, %r3477, 0;
	@%p54 bra 	$L__BB0_24;
// %bb.22:                              // %__nv_fmaf_rn.exit4.i.i.i2328.preheader
	mov.f32 	%f250, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f249,%f250;
	// end inline asm
$L__BB0_23:                             // %__nv_fmaf_rn.exit4.i.i.i2328
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r348, %r3477, 192937984;
	add.s32 	%r349, %r3476, %r348;
	mov.b32 	%f251, %r349;
	mul.f32 	%f252, %f249, %f251;
	sub.f32 	%f253, %f251, %f252;
	fma.rn.f32 	%f254, %f253, %f249, %f252;
	sub.f32 	%f255, %f251, %f254;
	fma.rz.f32 	%f256, %f255, %f249, %f254;
	cvt.rzi.f32.f32 	%f257, %f256;
	sub.f32 	%f705, %f251, %f257;
	sub.s32 	%r3477, %r3477, %r348;
	mov.b32 	%r3476, %f705;
	setp.ne.s32 	%p55, %r3477, 0;
	setp.ne.s32 	%p56, %r3476, 0;
	and.pred  	%p57, %p55, %p56;
	@%p57 bra 	$L__BB0_23;
$L__BB0_24:                             // %__internal_fmodf_slowpath_mod.exit.i.i2330
	setp.gt.u32 	%p58, %r9, 2139095039;
	selp.f32 	%f258, 0f7FFFFFFF, 0f4B800000, %p58;
	mul.f32 	%f259, %f705, 0f34000000;
	mul.f32 	%f706, %f258, %f259;
	bra.uni 	$L__BB0_25;
$L__BB0_15:                             // %__nv_fast_fdividef.exit.i.i.i2307
	div.approx.f32 	%f242, %f726, %f703;
	cvt.rzi.f32.f32 	%f704, %f242;
	fma.rn.f32 	%f2, %f704, 0fC0000000, %f726;
	mov.b32 	%r8, %f2;
	setp.lt.u32 	%p49, %r8, 1073741824;
	@%p49 bra 	$L__BB0_20;
// %bb.16:
	setp.lt.u32 	%p50, %r8, -2147483647;
	@%p50 bra 	$L__BB0_18;
// %bb.17:
	add.f32 	%f247, %f704, 0fBF800000;
	setp.lt.f32 	%p53, %f2, 0fC0000000;
	add.f32 	%f248, %f247, 0fBF800000;
	selp.f32 	%f704, %f248, %f247, %p53;
	bra.uni 	$L__BB0_20;
$L__BB0_18:
	add.f32 	%f704, %f704, 0f3F800000;
	setp.ltu.f32 	%p51, %f2, 0f40800000;
	@%p51 bra 	$L__BB0_20;
// %bb.19:                              // %__nv_fmaf_rn.exit.i.i.i2311
	add.f32 	%f243, %f704, 0f3F800000;
	fma.rn.f32 	%f245, %f703, 0fC0400000, %f2;
	setp.ge.f32 	%p52, %f245, 0f00000000;
	add.f32 	%f246, %f243, 0f3F800000;
	selp.f32 	%f704, %f246, %f243, %p52;
$L__BB0_20:                             // %__internal_fmodf_fastpath_quot.exit.i.i2314
	fma.rn.f32 	%f706, %f704, 0fC0000000, %f726;
$L__BB0_25:                             // %__internal_fmodf_kernel.exit.i2333
	abs.f32 	%f260, %f706;
	setp.gtu.f32 	%p59, %f260, 0f7F800000;
	mov.b32 	%r350, %f168;
	and.b32  	%r16, %r350, -2147483648;
	@%p59 bra 	$L__BB0_27;
// %bb.26:
	mov.b32 	%r351, %f706;
	or.b32  	%r352, %r16, %r351;
	mov.b32 	%f706, %r352;
$L__BB0_27:                             // %__nv_fmodf.exit2334
	add.s32 	%r361, %r158, %r145;
	cvt.rn.f32.s32 	%f291, %r361;
	div.approx.f32 	%f18, %f291, %f240;
	abs.f32 	%f730, %f18;
	setp.lt.f32 	%p67, %f730, 0f40000000;
	setp.gtu.f32 	%p368, %f730, 0f4B800000;
	mov.f32 	%f710, %f730;
	@%p67 bra 	$L__BB0_39;
// %bb.28:
	@%p368 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_29;
$L__BB0_35:
	mov.b32 	%r18, %f730;
	and.b32  	%r362, %r18, 8388607;
	or.b32  	%r3478, %r362, 1065353216;
	mov.b32 	%f709, %r3478;
	add.s32 	%r363, %r18, -1073741824;
	and.b32  	%r3479, %r363, -8388608;
	setp.eq.s32 	%p74, %r3479, 0;
	@%p74 bra 	$L__BB0_38;
// %bb.36:                              // %__nv_fmaf_rn.exit4.i.i.i2359.preheader
	mov.f32 	%f302, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f301,%f302;
	// end inline asm
$L__BB0_37:                             // %__nv_fmaf_rn.exit4.i.i.i2359
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r364, %r3479, 192937984;
	add.s32 	%r365, %r3478, %r364;
	mov.b32 	%f303, %r365;
	mul.f32 	%f304, %f301, %f303;
	sub.f32 	%f305, %f303, %f304;
	fma.rn.f32 	%f306, %f305, %f301, %f304;
	sub.f32 	%f307, %f303, %f306;
	fma.rz.f32 	%f308, %f307, %f301, %f306;
	cvt.rzi.f32.f32 	%f309, %f308;
	sub.f32 	%f709, %f303, %f309;
	sub.s32 	%r3479, %r3479, %r364;
	mov.b32 	%r3478, %f709;
	setp.ne.s32 	%p75, %r3479, 0;
	setp.ne.s32 	%p76, %r3478, 0;
	and.pred  	%p77, %p75, %p76;
	@%p77 bra 	$L__BB0_37;
$L__BB0_38:                             // %__internal_fmodf_slowpath_mod.exit.i.i2361
	setp.gt.u32 	%p78, %r18, 2139095039;
	selp.f32 	%f310, 0f7FFFFFFF, 0f4B800000, %p78;
	mul.f32 	%f311, %f709, 0f34000000;
	mul.f32 	%f710, %f310, %f311;
	bra.uni 	$L__BB0_39;
$L__BB0_29:                             // %__nv_fast_fdividef.exit.i.i.i2338
	div.approx.f32 	%f294, %f730, %f703;
	cvt.rzi.f32.f32 	%f708, %f294;
	fma.rn.f32 	%f21, %f708, 0fC0000000, %f730;
	mov.b32 	%r17, %f21;
	setp.lt.u32 	%p69, %r17, 1073741824;
	@%p69 bra 	$L__BB0_34;
// %bb.30:
	setp.lt.u32 	%p70, %r17, -2147483647;
	@%p70 bra 	$L__BB0_32;
// %bb.31:
	add.f32 	%f299, %f708, 0fBF800000;
	setp.lt.f32 	%p73, %f21, 0fC0000000;
	add.f32 	%f300, %f299, 0fBF800000;
	selp.f32 	%f708, %f300, %f299, %p73;
	bra.uni 	$L__BB0_34;
$L__BB0_32:
	add.f32 	%f708, %f708, 0f3F800000;
	setp.ltu.f32 	%p71, %f21, 0f40800000;
	@%p71 bra 	$L__BB0_34;
// %bb.33:                              // %__nv_fmaf_rn.exit.i.i.i2342
	add.f32 	%f295, %f708, 0f3F800000;
	fma.rn.f32 	%f297, %f703, 0fC0400000, %f21;
	setp.ge.f32 	%p72, %f297, 0f00000000;
	add.f32 	%f298, %f295, 0f3F800000;
	selp.f32 	%f708, %f298, %f295, %p72;
$L__BB0_34:                             // %__internal_fmodf_fastpath_quot.exit.i.i2345
	fma.rn.f32 	%f710, %f708, 0fC0000000, %f730;
$L__BB0_39:                             // %__internal_fmodf_kernel.exit.i2364
	abs.f32 	%f312, %f710;
	setp.gtu.f32 	%p79, %f312, 0f7F800000;
	mov.b32 	%r366, %f18;
	and.b32  	%r25, %r366, -2147483648;
	@%p79 bra 	$L__BB0_41;
// %bb.40:
	mov.b32 	%r367, %f710;
	or.b32  	%r368, %r25, %r367;
	mov.b32 	%f710, %r368;
$L__BB0_41:                             // %__nv_fmodf.exit2365
	mul.lo.s32 	%r28, %r157, %r145;
	and.b32  	%r383, %r28, 2;
	cvt.rn.f32.s32 	%f345, %r383;
	div.approx.f32 	%f35, %f345, %f703;
	abs.f32 	%f734, %f35;
	setp.lt.f32 	%p87, %f734, 0f40000000;
	setp.gtu.f32 	%p369, %f734, 0f4B800000;
	mov.f32 	%f714, %f734;
	@%p87 bra 	$L__BB0_53;
// %bb.42:
	@%p369 bra 	$L__BB0_49;
	bra.uni 	$L__BB0_43;
$L__BB0_49:
	mov.b32 	%r30, %f734;
	and.b32  	%r384, %r30, 8388607;
	or.b32  	%r3480, %r384, 1065353216;
	mov.b32 	%f713, %r3480;
	add.s32 	%r385, %r30, -1073741824;
	and.b32  	%r3481, %r385, -8388608;
	setp.eq.s32 	%p94, %r3481, 0;
	@%p94 bra 	$L__BB0_52;
// %bb.50:                              // %__nv_fmaf_rn.exit4.i.i.i2390.preheader
	mov.f32 	%f356, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f355,%f356;
	// end inline asm
$L__BB0_51:                             // %__nv_fmaf_rn.exit4.i.i.i2390
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r386, %r3481, 192937984;
	add.s32 	%r387, %r3480, %r386;
	mov.b32 	%f357, %r387;
	mul.f32 	%f358, %f355, %f357;
	sub.f32 	%f359, %f357, %f358;
	fma.rn.f32 	%f360, %f359, %f355, %f358;
	sub.f32 	%f361, %f357, %f360;
	fma.rz.f32 	%f362, %f361, %f355, %f360;
	cvt.rzi.f32.f32 	%f363, %f362;
	sub.f32 	%f713, %f357, %f363;
	sub.s32 	%r3481, %r3481, %r386;
	mov.b32 	%r3480, %f713;
	setp.ne.s32 	%p95, %r3481, 0;
	setp.ne.s32 	%p96, %r3480, 0;
	and.pred  	%p97, %p95, %p96;
	@%p97 bra 	$L__BB0_51;
$L__BB0_52:                             // %__internal_fmodf_slowpath_mod.exit.i.i2392
	setp.gt.u32 	%p98, %r30, 2139095039;
	selp.f32 	%f364, 0f7FFFFFFF, 0f4B800000, %p98;
	mul.f32 	%f365, %f713, 0f34000000;
	mul.f32 	%f714, %f364, %f365;
	bra.uni 	$L__BB0_53;
$L__BB0_43:                             // %__nv_fast_fdividef.exit.i.i.i2369
	div.approx.f32 	%f348, %f734, %f703;
	cvt.rzi.f32.f32 	%f712, %f348;
	fma.rn.f32 	%f38, %f712, 0fC0000000, %f734;
	mov.b32 	%r29, %f38;
	setp.lt.u32 	%p89, %r29, 1073741824;
	@%p89 bra 	$L__BB0_48;
// %bb.44:
	setp.lt.u32 	%p90, %r29, -2147483647;
	@%p90 bra 	$L__BB0_46;
// %bb.45:
	add.f32 	%f353, %f712, 0fBF800000;
	setp.lt.f32 	%p93, %f38, 0fC0000000;
	add.f32 	%f354, %f353, 0fBF800000;
	selp.f32 	%f712, %f354, %f353, %p93;
	bra.uni 	$L__BB0_48;
$L__BB0_46:
	add.f32 	%f712, %f712, 0f3F800000;
	setp.ltu.f32 	%p91, %f38, 0f40800000;
	@%p91 bra 	$L__BB0_48;
// %bb.47:                              // %__nv_fmaf_rn.exit.i.i.i2373
	add.f32 	%f349, %f712, 0f3F800000;
	fma.rn.f32 	%f351, %f703, 0fC0400000, %f38;
	setp.ge.f32 	%p92, %f351, 0f00000000;
	add.f32 	%f352, %f349, 0f3F800000;
	selp.f32 	%f712, %f352, %f349, %p92;
$L__BB0_48:                             // %__internal_fmodf_fastpath_quot.exit.i.i2376
	fma.rn.f32 	%f714, %f712, 0fC0000000, %f734;
$L__BB0_53:                             // %__internal_fmodf_kernel.exit.i2395
	mov.f32 	%f230, 0f00000000;
	abs.f32 	%f366, %f714;
	setp.gtu.f32 	%p99, %f366, 0f7F800000;
	mov.b32 	%r388, %f35;
	and.b32  	%r37, %r388, -2147483648;
	@%p99 bra 	$L__BB0_55;
// %bb.54:
	mov.b32 	%r389, %f714;
	or.b32  	%r390, %r37, %r389;
	mov.b32 	%f714, %r390;
$L__BB0_55:                             // %__nv_fmodf.exit2396
	add.f32 	%f367, %f714, %f714;
	mov.b32 	%r391, %f367;
	and.b32  	%r392, %r391, -2147483648;
	or.b32  	%r393, %r392, 1056964608;
	mov.b32 	%f368, %r393;
	add.f32 	%f369, %f367, %f368;
	cvt.rzi.f32.f32 	%f370, %f369;
	abs.f32 	%f371, %f367;
	setp.gt.f32 	%p100, %f371, 0f4B000000;
	selp.f32 	%f372, %f367, %f370, %p100;
	cvt.rzi.f32.f32 	%f373, %f367;
	setp.lt.f32 	%p101, %f371, 0f3F000000;
	selp.f32 	%f374, %f373, %f372, %p101;
	cvt.rzi.s32.f32 	%r394, %f374;
	fma.rn.f32 	%f375, %f374, 0fBF000000, %f714;
	mul.f32 	%f376, %f375, %f375;
	fma.rn.f32 	%f377, %f376, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f378, %f376, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f379, %f377, %f376, 0fC0A55DF6;
	fma.rn.f32 	%f380, %f378, %f376, 0f4081E0CF;
	fma.rn.f32 	%f381, %f376, %f375, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f376, 0fC09DE9E6;
	fma.rn.f32 	%f383, %f379, %f381, 0f00000000;
	fma.rn.f32 	%f384, %f382, %f376, 0f3F800000;
	fma.rn.f32 	%f385, %f375, 0f40490FDB, %f383;
	and.b32  	%r395, %r394, 1;
	setp.eq.b32 	%p102, %r395, 1;
	selp.f32 	%f386, %f384, %f385, %p102;
	selp.f32 	%f387, %f385, %f384, %p102;
	and.b32  	%r396, %r394, 2;
	setp.eq.s32 	%p103, %r396, 0;
	neg.f32 	%f388, %f386;
	selp.f32 	%f389, %f386, %f388, %p103;
	add.s32 	%r397, %r394, 1;
	and.b32  	%r398, %r397, 2;
	setp.eq.s32 	%p104, %r398, 0;
	sub.f32 	%f391, %f230, %f387;
	cvt.rzi.f32.f32 	%f393, %f714;
	setp.eq.f32 	%p105, %f393, %f714;
	mul.f32 	%f394, %f714, 0f00000000;
	selp.f32 	%f76, %f394, %f389, %p105;
	abs.f32 	%f395, %f714;
	add.s32 	%r399, %r28, %r145;
	and.b32  	%r400, %r399, 3;
	cvt.rn.f32.s32 	%f397, %r400;
	div.approx.f32 	%f54, %f397, %f703;
	abs.f32 	%f738, %f54;
	setp.lt.f32 	%p107, %f738, 0f40000000;
	setp.gtu.f32 	%p370, %f738, 0f4B800000;
	mov.f32 	%f718, %f738;
	@%p107 bra 	$L__BB0_67;
// %bb.56:
	@%p370 bra 	$L__BB0_63;
	bra.uni 	$L__BB0_57;
$L__BB0_63:
	mov.b32 	%r39, %f738;
	and.b32  	%r401, %r39, 8388607;
	or.b32  	%r3482, %r401, 1065353216;
	mov.b32 	%f717, %r3482;
	add.s32 	%r402, %r39, -1073741824;
	and.b32  	%r3483, %r402, -8388608;
	setp.eq.s32 	%p114, %r3483, 0;
	@%p114 bra 	$L__BB0_66;
// %bb.64:                              // %__nv_fmaf_rn.exit4.i.i.i2421.preheader
	mov.f32 	%f408, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f407,%f408;
	// end inline asm
$L__BB0_65:                             // %__nv_fmaf_rn.exit4.i.i.i2421
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r403, %r3483, 192937984;
	add.s32 	%r404, %r3482, %r403;
	mov.b32 	%f409, %r404;
	mul.f32 	%f410, %f407, %f409;
	sub.f32 	%f411, %f409, %f410;
	fma.rn.f32 	%f412, %f411, %f407, %f410;
	sub.f32 	%f413, %f409, %f412;
	fma.rz.f32 	%f414, %f413, %f407, %f412;
	cvt.rzi.f32.f32 	%f415, %f414;
	sub.f32 	%f717, %f409, %f415;
	sub.s32 	%r3483, %r3483, %r403;
	mov.b32 	%r3482, %f717;
	setp.ne.s32 	%p115, %r3483, 0;
	setp.ne.s32 	%p116, %r3482, 0;
	and.pred  	%p117, %p115, %p116;
	@%p117 bra 	$L__BB0_65;
$L__BB0_66:                             // %__internal_fmodf_slowpath_mod.exit.i.i2423
	setp.gt.u32 	%p118, %r39, 2139095039;
	selp.f32 	%f416, 0f7FFFFFFF, 0f4B800000, %p118;
	mul.f32 	%f417, %f717, 0f34000000;
	mul.f32 	%f718, %f416, %f417;
	bra.uni 	$L__BB0_67;
$L__BB0_57:                             // %__nv_fast_fdividef.exit.i.i.i2400
	div.approx.f32 	%f400, %f738, %f703;
	cvt.rzi.f32.f32 	%f716, %f400;
	fma.rn.f32 	%f57, %f716, 0fC0000000, %f738;
	mov.b32 	%r38, %f57;
	setp.lt.u32 	%p109, %r38, 1073741824;
	@%p109 bra 	$L__BB0_62;
// %bb.58:
	setp.lt.u32 	%p110, %r38, -2147483647;
	@%p110 bra 	$L__BB0_60;
// %bb.59:
	add.f32 	%f405, %f716, 0fBF800000;
	setp.lt.f32 	%p113, %f57, 0fC0000000;
	add.f32 	%f406, %f405, 0fBF800000;
	selp.f32 	%f716, %f406, %f405, %p113;
	bra.uni 	$L__BB0_62;
$L__BB0_60:
	add.f32 	%f716, %f716, 0f3F800000;
	setp.ltu.f32 	%p111, %f57, 0f40800000;
	@%p111 bra 	$L__BB0_62;
// %bb.61:                              // %__nv_fmaf_rn.exit.i.i.i2404
	add.f32 	%f401, %f716, 0f3F800000;
	fma.rn.f32 	%f403, %f703, 0fC0400000, %f57;
	setp.ge.f32 	%p112, %f403, 0f00000000;
	add.f32 	%f404, %f401, 0f3F800000;
	selp.f32 	%f716, %f404, %f401, %p112;
$L__BB0_62:                             // %__internal_fmodf_fastpath_quot.exit.i.i2407
	fma.rn.f32 	%f718, %f716, 0fC0000000, %f738;
$L__BB0_67:                             // %__internal_fmodf_kernel.exit.i2426
	selp.f32 	%f392, %f387, %f391, %p104;
	setp.gt.f32 	%p106, %f395, 0f4B800000;
	add.f32 	%f396, %f76, 0f3F800000;
	abs.f32 	%f418, %f718;
	setp.gtu.f32 	%p119, %f418, 0f7F800000;
	mov.b32 	%r405, %f54;
	and.b32  	%r46, %r405, -2147483648;
	@%p119 bra 	$L__BB0_69;
// %bb.68:
	mov.b32 	%r406, %f718;
	or.b32  	%r407, %r46, %r406;
	mov.b32 	%f718, %r407;
$L__BB0_69:                             // %__nv_fmodf.exit2427
	selp.f32 	%f53, %f396, %f392, %p106;
	add.f32 	%f419, %f718, %f718;
	mov.b32 	%r408, %f419;
	and.b32  	%r409, %r408, -2147483648;
	or.b32  	%r410, %r409, 1056964608;
	mov.b32 	%f420, %r410;
	add.f32 	%f421, %f419, %f420;
	cvt.rzi.f32.f32 	%f422, %f421;
	abs.f32 	%f423, %f419;
	setp.gt.f32 	%p120, %f423, 0f4B000000;
	selp.f32 	%f424, %f419, %f422, %p120;
	cvt.rzi.f32.f32 	%f425, %f419;
	setp.lt.f32 	%p121, %f423, 0f3F000000;
	selp.f32 	%f426, %f425, %f424, %p121;
	cvt.rzi.s32.f32 	%r411, %f426;
	fma.rn.f32 	%f427, %f426, 0fBF000000, %f718;
	mul.f32 	%f428, %f427, %f427;
	fma.rn.f32 	%f429, %f428, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f430, %f428, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f431, %f429, %f428, 0fC0A55DF6;
	fma.rn.f32 	%f432, %f430, %f428, 0f4081E0CF;
	fma.rn.f32 	%f433, %f428, %f427, 0f00000000;
	fma.rn.f32 	%f434, %f432, %f428, 0fC09DE9E6;
	fma.rn.f32 	%f435, %f431, %f433, 0f00000000;
	fma.rn.f32 	%f436, %f434, %f428, 0f3F800000;
	fma.rn.f32 	%f437, %f427, 0f40490FDB, %f435;
	and.b32  	%r412, %r411, 1;
	setp.eq.b32 	%p122, %r412, 1;
	selp.f32 	%f438, %f436, %f437, %p122;
	selp.f32 	%f439, %f437, %f436, %p122;
	and.b32  	%r413, %r411, 2;
	setp.eq.s32 	%p123, %r413, 0;
	neg.f32 	%f440, %f438;
	selp.f32 	%f441, %f438, %f440, %p123;
	add.s32 	%r414, %r411, 1;
	and.b32  	%r415, %r414, 2;
	setp.eq.s32 	%p124, %r415, 0;
	sub.f32 	%f443, %f230, %f439;
	selp.f32 	%f444, %f439, %f443, %p124;
	cvt.rzi.f32.f32 	%f445, %f718;
	setp.eq.f32 	%p125, %f445, %f718;
	mul.f32 	%f446, %f718, 0f00000000;
	selp.f32 	%f78, %f446, %f441, %p125;
	abs.f32 	%f447, %f718;
	setp.gt.f32 	%p126, %f447, 0f4B800000;
	add.f32 	%f448, %f78, 0f3F800000;
	selp.f32 	%f72, %f448, %f444, %p126;
	and.b32  	%r47, %r3, 2;
	setp.eq.s32 	%p127, %r47, 0;
	mov.f32 	%f75, %f53;
	mov.f32 	%f77, %f72;
	@%p127 bra 	$L__BB0_71;
// %bb.70:                              // %L688
	neg.f32 	%f77, %f78;
	neg.f32 	%f75, %f76;
	mov.f32 	%f76, %f53;
	mov.f32 	%f78, %f72;
$L__BB0_71:                             // %L690
	@%p27 bra 	$L__BB0_219;
// %bb.72:
	@%p366 bra 	$L__BB0_215;
	bra.uni 	$L__BB0_73;
$L__BB0_215:
	mov.b32 	%r160, %f750;
	and.b32  	%r422, %r160, 8388607;
	or.b32  	%r3512, %r422, 1065353216;
	mov.b32 	%f749, %r3512;
	add.s32 	%r423, %r160, -1073741824;
	and.b32  	%r3513, %r423, -8388608;
	setp.eq.s32 	%p135, %r3513, 0;
	@%p135 bra 	$L__BB0_218;
// %bb.216:                             // %__nv_fmaf_rn.exit4.i.i.i2452.preheader
	mov.f32 	%f458, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f457,%f458;
	// end inline asm
$L__BB0_217:                            // %__nv_fmaf_rn.exit4.i.i.i2452
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r424, %r3513, 192937984;
	add.s32 	%r425, %r3512, %r424;
	mov.b32 	%f459, %r425;
	mul.f32 	%f460, %f457, %f459;
	sub.f32 	%f461, %f459, %f460;
	fma.rn.f32 	%f462, %f461, %f457, %f460;
	sub.f32 	%f463, %f459, %f462;
	fma.rz.f32 	%f464, %f463, %f457, %f462;
	cvt.rzi.f32.f32 	%f465, %f464;
	sub.f32 	%f749, %f459, %f465;
	sub.s32 	%r3513, %r3513, %r424;
	mov.b32 	%r3512, %f749;
	setp.ne.s32 	%p136, %r3513, 0;
	setp.ne.s32 	%p137, %r3512, 0;
	and.pred  	%p138, %p136, %p137;
	@%p138 bra 	$L__BB0_217;
$L__BB0_218:                            // %__internal_fmodf_slowpath_mod.exit.i.i2454
	setp.gt.u32 	%p139, %r160, 2139095039;
	selp.f32 	%f466, 0f7FFFFFFF, 0f4B800000, %p139;
	mul.f32 	%f467, %f749, 0f34000000;
	mul.f32 	%f750, %f466, %f467;
	bra.uni 	$L__BB0_219;
$L__BB0_73:                             // %__nv_fast_fdividef.exit.i.i.i2431
	div.approx.f32 	%f450, %f750, %f703;
	cvt.rzi.f32.f32 	%f748, %f450;
	fma.rn.f32 	%f171, %f748, 0fC0000000, %f750;
	mov.b32 	%r159, %f171;
	setp.lt.u32 	%p130, %r159, 1073741824;
	@%p130 bra 	$L__BB0_214;
// %bb.74:
	setp.lt.u32 	%p131, %r159, -2147483647;
	@%p131 bra 	$L__BB0_212;
// %bb.75:
	add.f32 	%f455, %f748, 0fBF800000;
	setp.lt.f32 	%p134, %f171, 0fC0000000;
	add.f32 	%f456, %f455, 0fBF800000;
	selp.f32 	%f748, %f456, %f455, %p134;
	bra.uni 	$L__BB0_214;
$L__BB0_212:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p132, %f171, 0f40800000;
	@%p132 bra 	$L__BB0_214;
// %bb.213:                             // %__nv_fmaf_rn.exit.i.i.i2435
	add.f32 	%f451, %f748, 0f3F800000;
	fma.rn.f32 	%f453, %f703, 0fC0400000, %f171;
	setp.ge.f32 	%p133, %f453, 0f00000000;
	add.f32 	%f454, %f451, 0f3F800000;
	selp.f32 	%f748, %f454, %f451, %p133;
$L__BB0_214:                            // %__internal_fmodf_fastpath_quot.exit.i.i2438
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_219:                            // %__internal_fmodf_kernel.exit.i2457
	abs.f32 	%f468, %f750;
	setp.gtu.f32 	%p140, %f468, 0f7F800000;
	@%p140 bra 	$L__BB0_221;
// %bb.220:
	mov.b32 	%r426, %f750;
	or.b32  	%r427, %r154, %r426;
	mov.b32 	%f750, %r427;
$L__BB0_221:                            // %__nv_fmodf.exit2458
	@%p47 bra 	$L__BB0_87;
// %bb.76:
	@%p367 bra 	$L__BB0_83;
	bra.uni 	$L__BB0_77;
$L__BB0_83:
	mov.b32 	%r51, %f726;
	and.b32  	%r442, %r51, 8388607;
	or.b32  	%r3484, %r442, 1065353216;
	mov.b32 	%f725, %r3484;
	add.s32 	%r443, %r51, -1073741824;
	and.b32  	%r3485, %r443, -8388608;
	setp.eq.s32 	%p155, %r3485, 0;
	@%p155 bra 	$L__BB0_86;
// %bb.84:                              // %__nv_fmaf_rn.exit4.i.i.i2483.preheader
	mov.f32 	%f510, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f509,%f510;
	// end inline asm
$L__BB0_85:                             // %__nv_fmaf_rn.exit4.i.i.i2483
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r444, %r3485, 192937984;
	add.s32 	%r445, %r3484, %r444;
	mov.b32 	%f511, %r445;
	mul.f32 	%f512, %f509, %f511;
	sub.f32 	%f513, %f511, %f512;
	fma.rn.f32 	%f514, %f513, %f509, %f512;
	sub.f32 	%f515, %f511, %f514;
	fma.rz.f32 	%f516, %f515, %f509, %f514;
	cvt.rzi.f32.f32 	%f517, %f516;
	sub.f32 	%f725, %f511, %f517;
	sub.s32 	%r3485, %r3485, %r444;
	mov.b32 	%r3484, %f725;
	setp.ne.s32 	%p156, %r3485, 0;
	setp.ne.s32 	%p157, %r3484, 0;
	and.pred  	%p158, %p156, %p157;
	@%p158 bra 	$L__BB0_85;
$L__BB0_86:                             // %__internal_fmodf_slowpath_mod.exit.i.i2485
	setp.gt.u32 	%p159, %r51, 2139095039;
	selp.f32 	%f518, 0f7FFFFFFF, 0f4B800000, %p159;
	mul.f32 	%f519, %f725, 0f34000000;
	mul.f32 	%f726, %f518, %f519;
	bra.uni 	$L__BB0_87;
$L__BB0_77:                             // %__nv_fast_fdividef.exit.i.i.i2462
	div.approx.f32 	%f502, %f726, %f703;
	cvt.rzi.f32.f32 	%f724, %f502;
	fma.rn.f32 	%f80, %f724, 0fC0000000, %f726;
	mov.b32 	%r50, %f80;
	setp.lt.u32 	%p150, %r50, 1073741824;
	@%p150 bra 	$L__BB0_82;
// %bb.78:
	setp.lt.u32 	%p151, %r50, -2147483647;
	@%p151 bra 	$L__BB0_80;
// %bb.79:
	add.f32 	%f507, %f724, 0fBF800000;
	setp.lt.f32 	%p154, %f80, 0fC0000000;
	add.f32 	%f508, %f507, 0fBF800000;
	selp.f32 	%f724, %f508, %f507, %p154;
	bra.uni 	$L__BB0_82;
$L__BB0_80:
	add.f32 	%f724, %f724, 0f3F800000;
	setp.ltu.f32 	%p152, %f80, 0f40800000;
	@%p152 bra 	$L__BB0_82;
// %bb.81:                              // %__nv_fmaf_rn.exit.i.i.i2466
	add.f32 	%f503, %f724, 0f3F800000;
	fma.rn.f32 	%f505, %f703, 0fC0400000, %f80;
	setp.ge.f32 	%p153, %f505, 0f00000000;
	add.f32 	%f506, %f503, 0f3F800000;
	selp.f32 	%f724, %f506, %f503, %p153;
$L__BB0_82:                             // %__internal_fmodf_fastpath_quot.exit.i.i2469
	fma.rn.f32 	%f726, %f724, 0fC0000000, %f726;
$L__BB0_87:                             // %__internal_fmodf_kernel.exit.i2488
	abs.f32 	%f520, %f726;
	setp.gtu.f32 	%p160, %f520, 0f7F800000;
	@%p160 bra 	$L__BB0_89;
// %bb.88:
	mov.b32 	%r446, %f726;
	or.b32  	%r447, %r16, %r446;
	mov.b32 	%f726, %r447;
$L__BB0_89:                             // %__nv_fmodf.exit2489
	@%p67 bra 	$L__BB0_101;
// %bb.90:
	@%p368 bra 	$L__BB0_97;
	bra.uni 	$L__BB0_91;
$L__BB0_97:
	mov.b32 	%r59, %f730;
	and.b32  	%r456, %r59, 8388607;
	or.b32  	%r3486, %r456, 1065353216;
	mov.b32 	%f729, %r3486;
	add.s32 	%r457, %r59, -1073741824;
	and.b32  	%r3487, %r457, -8388608;
	setp.eq.s32 	%p175, %r3487, 0;
	@%p175 bra 	$L__BB0_100;
// %bb.98:                              // %__nv_fmaf_rn.exit4.i.i.i2514.preheader
	mov.f32 	%f560, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f559,%f560;
	// end inline asm
$L__BB0_99:                             // %__nv_fmaf_rn.exit4.i.i.i2514
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r458, %r3487, 192937984;
	add.s32 	%r459, %r3486, %r458;
	mov.b32 	%f561, %r459;
	mul.f32 	%f562, %f559, %f561;
	sub.f32 	%f563, %f561, %f562;
	fma.rn.f32 	%f564, %f563, %f559, %f562;
	sub.f32 	%f565, %f561, %f564;
	fma.rz.f32 	%f566, %f565, %f559, %f564;
	cvt.rzi.f32.f32 	%f567, %f566;
	sub.f32 	%f729, %f561, %f567;
	sub.s32 	%r3487, %r3487, %r458;
	mov.b32 	%r3486, %f729;
	setp.ne.s32 	%p176, %r3487, 0;
	setp.ne.s32 	%p177, %r3486, 0;
	and.pred  	%p178, %p176, %p177;
	@%p178 bra 	$L__BB0_99;
$L__BB0_100:                            // %__internal_fmodf_slowpath_mod.exit.i.i2516
	setp.gt.u32 	%p179, %r59, 2139095039;
	selp.f32 	%f568, 0f7FFFFFFF, 0f4B800000, %p179;
	mul.f32 	%f569, %f729, 0f34000000;
	mul.f32 	%f730, %f568, %f569;
	bra.uni 	$L__BB0_101;
$L__BB0_91:                             // %__nv_fast_fdividef.exit.i.i.i2493
	div.approx.f32 	%f552, %f730, %f703;
	cvt.rzi.f32.f32 	%f728, %f552;
	fma.rn.f32 	%f97, %f728, 0fC0000000, %f730;
	mov.b32 	%r58, %f97;
	setp.lt.u32 	%p170, %r58, 1073741824;
	@%p170 bra 	$L__BB0_96;
// %bb.92:
	setp.lt.u32 	%p171, %r58, -2147483647;
	@%p171 bra 	$L__BB0_94;
// %bb.93:
	add.f32 	%f557, %f728, 0fBF800000;
	setp.lt.f32 	%p174, %f97, 0fC0000000;
	add.f32 	%f558, %f557, 0fBF800000;
	selp.f32 	%f728, %f558, %f557, %p174;
	bra.uni 	$L__BB0_96;
$L__BB0_94:
	add.f32 	%f728, %f728, 0f3F800000;
	setp.ltu.f32 	%p172, %f97, 0f40800000;
	@%p172 bra 	$L__BB0_96;
// %bb.95:                              // %__nv_fmaf_rn.exit.i.i.i2497
	add.f32 	%f553, %f728, 0f3F800000;
	fma.rn.f32 	%f555, %f703, 0fC0400000, %f97;
	setp.ge.f32 	%p173, %f555, 0f00000000;
	add.f32 	%f556, %f553, 0f3F800000;
	selp.f32 	%f728, %f556, %f553, %p173;
$L__BB0_96:                             // %__internal_fmodf_fastpath_quot.exit.i.i2500
	fma.rn.f32 	%f730, %f728, 0fC0000000, %f730;
$L__BB0_101:                            // %__internal_fmodf_kernel.exit.i2519
	abs.f32 	%f570, %f730;
	setp.gtu.f32 	%p180, %f570, 0f7F800000;
	@%p180 bra 	$L__BB0_103;
// %bb.102:
	mov.b32 	%r460, %f730;
	or.b32  	%r461, %r25, %r460;
	mov.b32 	%f730, %r461;
$L__BB0_103:                            // %__nv_fmodf.exit2520
	@%p87 bra 	$L__BB0_115;
// %bb.104:
	@%p369 bra 	$L__BB0_111;
	bra.uni 	$L__BB0_105;
$L__BB0_111:
	mov.b32 	%r69, %f734;
	and.b32  	%r476, %r69, 8388607;
	or.b32  	%r3488, %r476, 1065353216;
	mov.b32 	%f733, %r3488;
	add.s32 	%r477, %r69, -1073741824;
	and.b32  	%r3489, %r477, -8388608;
	setp.eq.s32 	%p195, %r3489, 0;
	@%p195 bra 	$L__BB0_114;
// %bb.112:                             // %__nv_fmaf_rn.exit4.i.i.i2545.preheader
	mov.f32 	%f612, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f611,%f612;
	// end inline asm
$L__BB0_113:                            // %__nv_fmaf_rn.exit4.i.i.i2545
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r478, %r3489, 192937984;
	add.s32 	%r479, %r3488, %r478;
	mov.b32 	%f613, %r479;
	mul.f32 	%f614, %f611, %f613;
	sub.f32 	%f615, %f613, %f614;
	fma.rn.f32 	%f616, %f615, %f611, %f614;
	sub.f32 	%f617, %f613, %f616;
	fma.rz.f32 	%f618, %f617, %f611, %f616;
	cvt.rzi.f32.f32 	%f619, %f618;
	sub.f32 	%f733, %f613, %f619;
	sub.s32 	%r3489, %r3489, %r478;
	mov.b32 	%r3488, %f733;
	setp.ne.s32 	%p196, %r3489, 0;
	setp.ne.s32 	%p197, %r3488, 0;
	and.pred  	%p198, %p196, %p197;
	@%p198 bra 	$L__BB0_113;
$L__BB0_114:                            // %__internal_fmodf_slowpath_mod.exit.i.i2547
	setp.gt.u32 	%p199, %r69, 2139095039;
	selp.f32 	%f620, 0f7FFFFFFF, 0f4B800000, %p199;
	mul.f32 	%f621, %f733, 0f34000000;
	mul.f32 	%f734, %f620, %f621;
	bra.uni 	$L__BB0_115;
$L__BB0_105:                            // %__nv_fast_fdividef.exit.i.i.i2524
	div.approx.f32 	%f604, %f734, %f703;
	cvt.rzi.f32.f32 	%f732, %f604;
	fma.rn.f32 	%f112, %f732, 0fC0000000, %f734;
	mov.b32 	%r68, %f112;
	setp.lt.u32 	%p190, %r68, 1073741824;
	@%p190 bra 	$L__BB0_110;
// %bb.106:
	setp.lt.u32 	%p191, %r68, -2147483647;
	@%p191 bra 	$L__BB0_108;
// %bb.107:
	add.f32 	%f609, %f732, 0fBF800000;
	setp.lt.f32 	%p194, %f112, 0fC0000000;
	add.f32 	%f610, %f609, 0fBF800000;
	selp.f32 	%f732, %f610, %f609, %p194;
	bra.uni 	$L__BB0_110;
$L__BB0_108:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p192, %f112, 0f40800000;
	@%p192 bra 	$L__BB0_110;
// %bb.109:                             // %__nv_fmaf_rn.exit.i.i.i2528
	add.f32 	%f605, %f732, 0f3F800000;
	fma.rn.f32 	%f607, %f703, 0fC0400000, %f112;
	setp.ge.f32 	%p193, %f607, 0f00000000;
	add.f32 	%f608, %f605, 0f3F800000;
	selp.f32 	%f732, %f608, %f605, %p193;
$L__BB0_110:                            // %__internal_fmodf_fastpath_quot.exit.i.i2531
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_115:                            // %__internal_fmodf_kernel.exit.i2550
	abs.f32 	%f622, %f734;
	setp.gtu.f32 	%p200, %f622, 0f7F800000;
	@%p200 bra 	$L__BB0_117;
// %bb.116:
	mov.b32 	%r480, %f734;
	or.b32  	%r481, %r37, %r480;
	mov.b32 	%f734, %r481;
$L__BB0_117:                            // %__nv_fmodf.exit2551
	add.f32 	%f623, %f734, %f734;
	mov.b32 	%r482, %f623;
	and.b32  	%r483, %r482, -2147483648;
	or.b32  	%r484, %r483, 1056964608;
	mov.b32 	%f624, %r484;
	add.f32 	%f625, %f623, %f624;
	cvt.rzi.f32.f32 	%f626, %f625;
	abs.f32 	%f627, %f623;
	setp.gt.f32 	%p202, %f627, 0f4B000000;
	selp.f32 	%f628, %f623, %f626, %p202;
	cvt.rzi.f32.f32 	%f629, %f623;
	setp.lt.f32 	%p203, %f627, 0f3F000000;
	selp.f32 	%f630, %f629, %f628, %p203;
	cvt.rzi.s32.f32 	%r485, %f630;
	fma.rn.f32 	%f631, %f630, 0fBF000000, %f734;
	mul.f32 	%f632, %f631, %f631;
	fma.rn.f32 	%f633, %f632, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f634, %f632, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f635, %f633, %f632, 0fC0A55DF6;
	fma.rn.f32 	%f636, %f634, %f632, 0f4081E0CF;
	fma.rn.f32 	%f637, %f632, %f631, 0f00000000;
	fma.rn.f32 	%f638, %f636, %f632, 0fC09DE9E6;
	fma.rn.f32 	%f639, %f635, %f637, 0f00000000;
	fma.rn.f32 	%f640, %f638, %f632, 0f3F800000;
	fma.rn.f32 	%f641, %f631, 0f40490FDB, %f639;
	and.b32  	%r486, %r485, 1;
	setp.eq.b32 	%p204, %r486, 1;
	selp.f32 	%f642, %f640, %f641, %p204;
	selp.f32 	%f643, %f641, %f640, %p204;
	and.b32  	%r487, %r485, 2;
	setp.eq.s32 	%p205, %r487, 0;
	neg.f32 	%f644, %f642;
	selp.f32 	%f645, %f642, %f644, %p205;
	add.s32 	%r488, %r485, 1;
	and.b32  	%r489, %r488, 2;
	setp.eq.s32 	%p206, %r489, 0;
	sub.f32 	%f647, %f230, %f643;
	cvt.rzi.f32.f32 	%f649, %f734;
	setp.eq.f32 	%p207, %f649, %f734;
	mul.f32 	%f650, %f734, 0f00000000;
	selp.f32 	%f148, %f650, %f645, %p207;
	abs.f32 	%f651, %f734;
	@%p107 bra 	$L__BB0_129;
// %bb.118:
	@%p370 bra 	$L__BB0_125;
	bra.uni 	$L__BB0_119;
$L__BB0_125:
	mov.b32 	%r77, %f738;
	and.b32  	%r490, %r77, 8388607;
	or.b32  	%r3490, %r490, 1065353216;
	mov.b32 	%f737, %r3490;
	add.s32 	%r491, %r77, -1073741824;
	and.b32  	%r3491, %r491, -8388608;
	setp.eq.s32 	%p215, %r3491, 0;
	@%p215 bra 	$L__BB0_128;
// %bb.126:                             // %__nv_fmaf_rn.exit4.i.i.i2576.preheader
	mov.f32 	%f662, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f661,%f662;
	// end inline asm
$L__BB0_127:                            // %__nv_fmaf_rn.exit4.i.i.i2576
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r492, %r3491, 192937984;
	add.s32 	%r493, %r3490, %r492;
	mov.b32 	%f663, %r493;
	mul.f32 	%f664, %f661, %f663;
	sub.f32 	%f665, %f663, %f664;
	fma.rn.f32 	%f666, %f665, %f661, %f664;
	sub.f32 	%f667, %f663, %f666;
	fma.rz.f32 	%f668, %f667, %f661, %f666;
	cvt.rzi.f32.f32 	%f669, %f668;
	sub.f32 	%f737, %f663, %f669;
	sub.s32 	%r3491, %r3491, %r492;
	mov.b32 	%r3490, %f737;
	setp.ne.s32 	%p216, %r3491, 0;
	setp.ne.s32 	%p217, %r3490, 0;
	and.pred  	%p218, %p216, %p217;
	@%p218 bra 	$L__BB0_127;
$L__BB0_128:                            // %__internal_fmodf_slowpath_mod.exit.i.i2578
	setp.gt.u32 	%p219, %r77, 2139095039;
	selp.f32 	%f670, 0f7FFFFFFF, 0f4B800000, %p219;
	mul.f32 	%f671, %f737, 0f34000000;
	mul.f32 	%f738, %f670, %f671;
	bra.uni 	$L__BB0_129;
$L__BB0_119:                            // %__nv_fast_fdividef.exit.i.i.i2555
	div.approx.f32 	%f654, %f738, %f703;
	cvt.rzi.f32.f32 	%f736, %f654;
	fma.rn.f32 	%f129, %f736, 0fC0000000, %f738;
	mov.b32 	%r76, %f129;
	setp.lt.u32 	%p210, %r76, 1073741824;
	@%p210 bra 	$L__BB0_124;
// %bb.120:
	setp.lt.u32 	%p211, %r76, -2147483647;
	@%p211 bra 	$L__BB0_122;
// %bb.121:
	add.f32 	%f659, %f736, 0fBF800000;
	setp.lt.f32 	%p214, %f129, 0fC0000000;
	add.f32 	%f660, %f659, 0fBF800000;
	selp.f32 	%f736, %f660, %f659, %p214;
	bra.uni 	$L__BB0_124;
$L__BB0_122:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p212, %f129, 0f40800000;
	@%p212 bra 	$L__BB0_124;
// %bb.123:                             // %__nv_fmaf_rn.exit.i.i.i2559
	add.f32 	%f655, %f736, 0f3F800000;
	fma.rn.f32 	%f657, %f703, 0fC0400000, %f129;
	setp.ge.f32 	%p213, %f657, 0f00000000;
	add.f32 	%f658, %f655, 0f3F800000;
	selp.f32 	%f736, %f658, %f655, %p213;
$L__BB0_124:                            // %__internal_fmodf_fastpath_quot.exit.i.i2562
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_129:                            // %__internal_fmodf_kernel.exit.i2581
	selp.f32 	%f648, %f643, %f647, %p206;
	setp.gt.f32 	%p208, %f651, 0f4B800000;
	add.f32 	%f652, %f148, 0f3F800000;
	abs.f32 	%f672, %f738;
	setp.gtu.f32 	%p220, %f672, 0f7F800000;
	@%p220 bra 	$L__BB0_131;
// %bb.130:
	mov.b32 	%r494, %f738;
	or.b32  	%r495, %r46, %r494;
	mov.b32 	%f738, %r495;
$L__BB0_131:                            // %__nv_fmodf.exit2582
	selp.f32 	%f127, %f652, %f648, %p208;
	add.f32 	%f673, %f738, %f738;
	mov.b32 	%r496, %f673;
	and.b32  	%r497, %r496, -2147483648;
	or.b32  	%r498, %r497, 1056964608;
	mov.b32 	%f674, %r498;
	add.f32 	%f675, %f673, %f674;
	cvt.rzi.f32.f32 	%f676, %f675;
	abs.f32 	%f677, %f673;
	setp.gt.f32 	%p222, %f677, 0f4B000000;
	selp.f32 	%f678, %f673, %f676, %p222;
	cvt.rzi.f32.f32 	%f679, %f673;
	setp.lt.f32 	%p223, %f677, 0f3F000000;
	selp.f32 	%f680, %f679, %f678, %p223;
	cvt.rzi.s32.f32 	%r499, %f680;
	fma.rn.f32 	%f681, %f680, 0fBF000000, %f738;
	mul.f32 	%f682, %f681, %f681;
	fma.rn.f32 	%f683, %f682, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f684, %f682, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f685, %f683, %f682, 0fC0A55DF6;
	fma.rn.f32 	%f686, %f684, %f682, 0f4081E0CF;
	fma.rn.f32 	%f687, %f682, %f681, 0f00000000;
	fma.rn.f32 	%f688, %f686, %f682, 0fC09DE9E6;
	fma.rn.f32 	%f689, %f685, %f687, 0f00000000;
	fma.rn.f32 	%f690, %f688, %f682, 0f3F800000;
	fma.rn.f32 	%f691, %f681, 0f40490FDB, %f689;
	and.b32  	%r500, %r499, 1;
	setp.eq.b32 	%p224, %r500, 1;
	selp.f32 	%f692, %f690, %f691, %p224;
	selp.f32 	%f693, %f691, %f690, %p224;
	and.b32  	%r501, %r499, 2;
	setp.eq.s32 	%p225, %r501, 0;
	neg.f32 	%f694, %f692;
	selp.f32 	%f695, %f692, %f694, %p225;
	add.s32 	%r502, %r499, 1;
	and.b32  	%r503, %r502, 2;
	setp.eq.s32 	%p226, %r503, 0;
	sub.f32 	%f697, %f230, %f693;
	selp.f32 	%f698, %f693, %f697, %p226;
	cvt.rzi.f32.f32 	%f699, %f738;
	setp.eq.f32 	%p227, %f699, %f738;
	mul.f32 	%f700, %f738, 0f00000000;
	selp.f32 	%f150, %f700, %f695, %p227;
	abs.f32 	%f701, %f738;
	setp.gt.f32 	%p228, %f701, 0f4B800000;
	add.f32 	%f702, %f150, 0f3F800000;
	selp.f32 	%f144, %f702, %f698, %p228;
	mov.f32 	%f147, %f127;
	mov.f32 	%f149, %f144;
	@%p127 bra 	$L__BB0_133;
// %bb.132:                             // %L981
	neg.f32 	%f149, %f150;
	neg.f32 	%f147, %f148;
	mov.f32 	%f148, %f127;
	mov.f32 	%f150, %f144;
$L__BB0_133:                            // %L983
	setp.gt.u32 	%p229, %r3, 15;
	mov.u32 	%r169, 999999999;
	@%p229 bra 	$L__BB0_223;
// %bb.134:                             // %L1013
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	shl.b32 	%r511, %r3, 4;
	and.b32  	%r512, %r511, 240;
	or.b32  	%r513, %r512, %r4;
	mul.wide.u32 	%rd68, %r513, 4;
	add.s64 	%rd69, %rd1, %rd68;
	ld.global.u32 	%r514, [%rd69];
	shl.b32 	%r515, %r514, 16;
	cvt.s32.s16 	%r86, %r514;
	shr.s32 	%r87, %r514, 16;
	or.b32  	%r516, %r515, 65535;
	setp.lt.u32 	%p230, %r516, 1114111;
	setp.lt.u32 	%p231, %r514, 1048576;
	and.pred  	%p232, %p230, %p231;
	@%p232 bra 	$L__BB0_222;
	bra.uni 	$L__BB0_135;
$L__BB0_222:                            // %L1257
	mul.lo.s32 	%r520, %r87, 546;
	mad.lo.s32 	%r169, %r86, 33, %r520;
$L__BB0_223:                            // %pass555
	add.f32 	%f207, %f746, %f746;
	mov.b32 	%r337, %f207;
	add.f32 	%f469, %f750, %f750;
	and.b32  	%r338, %r337, -2147483648;
	add.f32 	%f261, %f706, %f706;
	add.f32 	%f313, %f710, %f710;
	mov.b32 	%r434, %f469;
	or.b32  	%r339, %r338, 1056964608;
	mov.b32 	%r353, %f261;
	mov.b32 	%r375, %f313;
	and.b32  	%r435, %r434, -2147483648;
	add.f32 	%f521, %f726, %f726;
	add.f32 	%f571, %f730, %f730;
	mov.b32 	%f208, %r339;
	and.b32  	%r354, %r353, -2147483648;
	and.b32  	%r376, %r375, -2147483648;
	or.b32  	%r436, %r435, 1056964608;
	mov.b32 	%r448, %f521;
	mov.b32 	%r468, %f571;
	add.f32 	%f209, %f207, %f208;
	abs.f32 	%f211, %f207;
	or.b32  	%r355, %r354, 1056964608;
	or.b32  	%r377, %r376, 1056964608;
	mov.b32 	%f470, %r436;
	and.b32  	%r449, %r448, -2147483648;
	and.b32  	%r469, %r468, -2147483648;
	cvt.rzi.f32.f32 	%f210, %f209;
	setp.gt.f32 	%p40, %f211, 0f4B000000;
	mov.b32 	%f262, %r355;
	mov.b32 	%f314, %r377;
	add.f32 	%f471, %f469, %f470;
	abs.f32 	%f473, %f469;
	or.b32  	%r450, %r449, 1056964608;
	or.b32  	%r470, %r469, 1056964608;
	selp.f32 	%f212, %f207, %f210, %p40;
	cvt.rzi.f32.f32 	%f213, %f207;
	setp.lt.f32 	%p41, %f211, 0f3F000000;
	add.f32 	%f263, %f261, %f262;
	abs.f32 	%f265, %f261;
	add.f32 	%f315, %f313, %f314;
	abs.f32 	%f317, %f313;
	cvt.rzi.f32.f32 	%f472, %f471;
	setp.gt.f32 	%p142, %f473, 0f4B000000;
	mov.b32 	%f522, %r450;
	mov.b32 	%f572, %r470;
	selp.f32 	%f214, %f213, %f212, %p41;
	cvt.rzi.f32.f32 	%f264, %f263;
	setp.gt.f32 	%p60, %f265, 0f4B000000;
	cvt.rzi.f32.f32 	%f316, %f315;
	setp.gt.f32 	%p80, %f317, 0f4B000000;
	selp.f32 	%f474, %f469, %f472, %p142;
	cvt.rzi.f32.f32 	%f475, %f469;
	setp.lt.f32 	%p143, %f473, 0f3F000000;
	add.f32 	%f523, %f521, %f522;
	abs.f32 	%f525, %f521;
	add.f32 	%f573, %f571, %f572;
	abs.f32 	%f575, %f571;
	fma.rn.f32 	%f215, %f214, 0fBF000000, %f746;
	selp.f32 	%f266, %f261, %f264, %p60;
	cvt.rzi.f32.f32 	%f267, %f261;
	setp.lt.f32 	%p61, %f265, 0f3F000000;
	selp.f32 	%f318, %f313, %f316, %p80;
	cvt.rzi.f32.f32 	%f319, %f313;
	setp.lt.f32 	%p81, %f317, 0f3F000000;
	selp.f32 	%f476, %f475, %f474, %p143;
	cvt.rzi.f32.f32 	%f524, %f523;
	setp.gt.f32 	%p162, %f525, 0f4B000000;
	cvt.rzi.f32.f32 	%f574, %f573;
	setp.gt.f32 	%p182, %f575, 0f4B000000;
	mul.f32 	%f216, %f215, %f215;
	selp.f32 	%f268, %f267, %f266, %p61;
	selp.f32 	%f320, %f319, %f318, %p81;
	fma.rn.f32 	%f477, %f476, 0fBF000000, %f750;
	selp.f32 	%f526, %f521, %f524, %p162;
	cvt.rzi.f32.f32 	%f527, %f521;
	setp.lt.f32 	%p163, %f525, 0f3F000000;
	selp.f32 	%f576, %f571, %f574, %p182;
	cvt.rzi.f32.f32 	%f577, %f571;
	setp.lt.f32 	%p183, %f575, 0f3F000000;
	fma.rn.f32 	%f217, %f216, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f218, %f216, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f269, %f268, 0fBF000000, %f706;
	fma.rn.f32 	%f321, %f320, 0fBF000000, %f710;
	mul.f32 	%f478, %f477, %f477;
	selp.f32 	%f528, %f527, %f526, %p163;
	selp.f32 	%f578, %f577, %f576, %p183;
	cvt.rzi.s32.f32 	%r340, %f214;
	fma.rn.f32 	%f219, %f217, %f216, 0fC0A55DF6;
	fma.rn.f32 	%f220, %f218, %f216, 0f4081E0CF;
	fma.rn.f32 	%f221, %f216, %f215, 0f00000000;
	mul.f32 	%f270, %f269, %f269;
	mul.f32 	%f322, %f321, %f321;
	fma.rn.f32 	%f479, %f478, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f480, %f478, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f529, %f528, 0fBF000000, %f726;
	fma.rn.f32 	%f579, %f578, 0fBF000000, %f730;
	fma.rn.f32 	%f222, %f220, %f216, 0fC09DE9E6;
	fma.rn.f32 	%f223, %f219, %f221, 0f00000000;
	and.b32  	%r341, %r340, 1;
	fma.rn.f32 	%f271, %f270, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f272, %f270, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f323, %f322, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f324, %f322, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r437, %f476;
	fma.rn.f32 	%f481, %f479, %f478, 0fC0A55DF6;
	fma.rn.f32 	%f482, %f480, %f478, 0f4081E0CF;
	fma.rn.f32 	%f483, %f478, %f477, 0f00000000;
	mul.f32 	%f530, %f529, %f529;
	mul.f32 	%f580, %f579, %f579;
	fma.rn.f32 	%f224, %f222, %f216, 0f3F800000;
	fma.rn.f32 	%f225, %f215, 0f40490FDB, %f223;
	setp.eq.b32 	%p42, %r341, 1;
	cvt.rzi.s32.f32 	%r356, %f268;
	fma.rn.f32 	%f273, %f271, %f270, 0fC0A55DF6;
	fma.rn.f32 	%f274, %f272, %f270, 0f4081E0CF;
	fma.rn.f32 	%f275, %f270, %f269, 0f00000000;
	cvt.rzi.s32.f32 	%r378, %f320;
	fma.rn.f32 	%f325, %f323, %f322, 0fC0A55DF6;
	fma.rn.f32 	%f326, %f324, %f322, 0f4081E0CF;
	fma.rn.f32 	%f327, %f322, %f321, 0f00000000;
	fma.rn.f32 	%f484, %f482, %f478, 0fC09DE9E6;
	fma.rn.f32 	%f485, %f481, %f483, 0f00000000;
	and.b32  	%r438, %r437, 1;
	fma.rn.f32 	%f531, %f530, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f532, %f530, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f581, %f580, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f582, %f580, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f226, %f224, %f225, %p42;
	and.b32  	%r342, %r340, 2;
	fma.rn.f32 	%f276, %f274, %f270, 0fC09DE9E6;
	fma.rn.f32 	%f277, %f273, %f275, 0f00000000;
	and.b32  	%r357, %r356, 1;
	fma.rn.f32 	%f328, %f326, %f322, 0fC09DE9E6;
	fma.rn.f32 	%f329, %f325, %f327, 0f00000000;
	and.b32  	%r379, %r378, 1;
	fma.rn.f32 	%f486, %f484, %f478, 0f3F800000;
	fma.rn.f32 	%f487, %f477, 0f40490FDB, %f485;
	setp.eq.b32 	%p144, %r438, 1;
	cvt.rzi.s32.f32 	%r451, %f528;
	fma.rn.f32 	%f533, %f531, %f530, 0fC0A55DF6;
	fma.rn.f32 	%f534, %f532, %f530, 0f4081E0CF;
	fma.rn.f32 	%f535, %f530, %f529, 0f00000000;
	cvt.rzi.s32.f32 	%r471, %f578;
	fma.rn.f32 	%f583, %f581, %f580, 0fC0A55DF6;
	fma.rn.f32 	%f584, %f582, %f580, 0f4081E0CF;
	fma.rn.f32 	%f585, %f580, %f579, 0f00000000;
	setp.eq.s32 	%p43, %r342, 0;
	neg.f32 	%f228, %f226;
	add.s32 	%r343, %r340, 1;
	cvt.rzi.f32.f32 	%f233, %f746;
	fma.rn.f32 	%f278, %f276, %f270, 0f3F800000;
	fma.rn.f32 	%f279, %f269, 0f40490FDB, %f277;
	setp.eq.b32 	%p62, %r357, 1;
	fma.rn.f32 	%f330, %f328, %f322, 0f3F800000;
	fma.rn.f32 	%f331, %f321, 0f40490FDB, %f329;
	setp.eq.b32 	%p82, %r379, 1;
	selp.f32 	%f488, %f486, %f487, %p144;
	and.b32  	%r439, %r437, 2;
	fma.rn.f32 	%f536, %f534, %f530, 0fC09DE9E6;
	fma.rn.f32 	%f537, %f533, %f535, 0f00000000;
	and.b32  	%r452, %r451, 1;
	fma.rn.f32 	%f586, %f584, %f580, 0fC09DE9E6;
	fma.rn.f32 	%f587, %f583, %f585, 0f00000000;
	and.b32  	%r472, %r471, 1;
	selp.f32 	%f227, %f225, %f224, %p42;
	selp.f32 	%f229, %f226, %f228, %p43;
	and.b32  	%r344, %r343, 2;
	setp.eq.f32 	%p45, %f233, %f746;
	mul.f32 	%f234, %f746, 0f00000000;
	selp.f32 	%f280, %f278, %f279, %p62;
	and.b32  	%r358, %r356, 2;
	selp.f32 	%f332, %f330, %f331, %p82;
	and.b32  	%r380, %r378, 2;
	setp.eq.s32 	%p145, %r439, 0;
	neg.f32 	%f490, %f488;
	add.s32 	%r440, %r437, 1;
	cvt.rzi.f32.f32 	%f495, %f750;
	fma.rn.f32 	%f538, %f536, %f530, 0f3F800000;
	fma.rn.f32 	%f539, %f529, 0f40490FDB, %f537;
	setp.eq.b32 	%p164, %r452, 1;
	fma.rn.f32 	%f588, %f586, %f580, 0f3F800000;
	fma.rn.f32 	%f589, %f579, 0f40490FDB, %f587;
	setp.eq.b32 	%p184, %r472, 1;
	setp.eq.s32 	%p44, %r344, 0;
	sub.f32 	%f231, %f230, %f227;
	selp.f32 	%f235, %f234, %f229, %p45;
	abs.f32 	%f236, %f746;
	setp.eq.s32 	%p63, %r358, 0;
	neg.f32 	%f282, %f280;
	add.s32 	%r359, %r356, 1;
	cvt.rzi.f32.f32 	%f287, %f706;
	setp.eq.s32 	%p83, %r380, 0;
	neg.f32 	%f334, %f332;
	add.s32 	%r381, %r378, 1;
	cvt.rzi.f32.f32 	%f339, %f710;
	selp.f32 	%f489, %f487, %f486, %p144;
	selp.f32 	%f491, %f488, %f490, %p145;
	and.b32  	%r441, %r440, 2;
	setp.eq.f32 	%p147, %f495, %f750;
	mul.f32 	%f496, %f750, 0f00000000;
	selp.f32 	%f540, %f538, %f539, %p164;
	and.b32  	%r453, %r451, 2;
	selp.f32 	%f590, %f588, %f589, %p184;
	and.b32  	%r473, %r471, 2;
	selp.f32 	%f232, %f227, %f231, %p44;
	setp.gt.f32 	%p46, %f236, 0f4B800000;
	add.f32 	%f237, %f235, 0f3F800000;
	selp.f32 	%f281, %f279, %f278, %p62;
	selp.f32 	%f283, %f280, %f282, %p63;
	and.b32  	%r360, %r359, 2;
	setp.eq.f32 	%p65, %f287, %f706;
	mul.f32 	%f288, %f706, 0f00000000;
	selp.f32 	%f333, %f331, %f330, %p82;
	selp.f32 	%f335, %f332, %f334, %p83;
	and.b32  	%r382, %r381, 2;
	setp.eq.f32 	%p85, %f339, %f710;
	mul.f32 	%f340, %f710, 0f00000000;
	setp.eq.s32 	%p146, %r441, 0;
	sub.f32 	%f493, %f230, %f489;
	selp.f32 	%f497, %f496, %f491, %p147;
	abs.f32 	%f498, %f750;
	setp.eq.s32 	%p165, %r453, 0;
	neg.f32 	%f542, %f540;
	add.s32 	%r454, %r451, 1;
	cvt.rzi.f32.f32 	%f547, %f726;
	setp.eq.s32 	%p185, %r473, 0;
	neg.f32 	%f592, %f590;
	add.s32 	%r474, %r471, 1;
	cvt.rzi.f32.f32 	%f597, %f730;
	selp.f32 	%f238, %f237, %f232, %p46;
	setp.eq.s32 	%p64, %r360, 0;
	sub.f32 	%f285, %f230, %f281;
	selp.f32 	%f16, %f288, %f283, %p65;
	abs.f32 	%f289, %f706;
	setp.eq.s32 	%p84, %r382, 0;
	sub.f32 	%f337, %f230, %f333;
	selp.f32 	%f341, %f340, %f335, %p85;
	abs.f32 	%f342, %f710;
	selp.f32 	%f494, %f489, %f493, %p146;
	setp.gt.f32 	%p148, %f498, 0f4B800000;
	add.f32 	%f499, %f497, 0f3F800000;
	selp.f32 	%f541, %f539, %f538, %p164;
	selp.f32 	%f543, %f540, %f542, %p165;
	and.b32  	%r455, %r454, 2;
	setp.eq.f32 	%p167, %f547, %f726;
	mul.f32 	%f548, %f726, 0f00000000;
	selp.f32 	%f591, %f589, %f588, %p184;
	selp.f32 	%f593, %f590, %f592, %p185;
	and.b32  	%r475, %r474, 2;
	setp.eq.f32 	%p187, %f597, %f730;
	mul.f32 	%f598, %f730, 0f00000000;
	mov.b32 	%r333, %f238;
	mov.b32 	%r336, %f235;
	selp.f32 	%f286, %f281, %f285, %p64;
	setp.gt.f32 	%p66, %f289, 0f4B800000;
	add.f32 	%f290, %f16, 0f3F800000;
	selp.f32 	%f338, %f333, %f337, %p84;
	setp.gt.f32 	%p86, %f342, 0f4B800000;
	add.f32 	%f343, %f341, 0f3F800000;
	selp.f32 	%f500, %f499, %f494, %p148;
	setp.eq.s32 	%p166, %r455, 0;
	sub.f32 	%f545, %f230, %f541;
	selp.f32 	%f94, %f548, %f543, %p167;
	abs.f32 	%f549, %f726;
	setp.eq.s32 	%p186, %r475, 0;
	sub.f32 	%f595, %f230, %f591;
	selp.f32 	%f599, %f598, %f593, %p187;
	abs.f32 	%f600, %f730;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r332, %r336, -2147483648;
	selp.f32 	%f17, %f290, %f286, %p66;
	selp.f32 	%f344, %f343, %f338, %p86;
	mov.b32 	%r430, %f500;
	mov.b32 	%r433, %f497;
	selp.f32 	%f546, %f541, %f545, %p166;
	setp.gt.f32 	%p168, %f549, 0f4B800000;
	add.f32 	%f550, %f94, 0f3F800000;
	selp.f32 	%f596, %f591, %f595, %p186;
	setp.gt.f32 	%p188, %f600, 0f4B800000;
	add.f32 	%f601, %f599, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r331, %r333, %r332;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r334, %r336, %r333;
	// end inline asm
	mov.b32 	%r371, %f344;
	mov.b32 	%r370, %f17;
	mov.b32 	%r374, %f341;
	mov.b32 	%r373, %f16;
	mov.b32 	%r417, %f75;
	mov.b32 	%r418, %f77;
	mov.b32 	%r420, %f76;
	mov.b32 	%r421, %f78;
	xor.b32  	%r429, %r433, -2147483648;
	selp.f32 	%f95, %f550, %f546, %p168;
	selp.f32 	%f602, %f601, %f596, %p188;
	// begin inline asm
	cvt.rn.f16x2.f32 %r369, %r371, %r370;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r372, %r374, %r373;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r416, %r418, %r417;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r419, %r421, %r420;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r428, %r430, %r429;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r431, %r433, %r430;
	// end inline asm
	mov.b32 	%r464, %f602;
	mov.b32 	%r463, %f95;
	mov.b32 	%r467, %f599;
	mov.b32 	%r466, %f94;
	// begin inline asm
	cvt.rn.f16x2.f32 %r462, %r464, %r463;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r465, %r467, %r466;
	// end inline asm
	mov.b32 	%r505, %f147;
	mov.b32 	%r506, %f149;
	// begin inline asm
	cvt.rn.f16x2.f32 %r504, %r506, %r505;
	// end inline asm
	mov.b32 	%r508, %f148;
	mov.b32 	%r509, %f150;
	// begin inline asm
	cvt.rn.f16x2.f32 %r507, %r509, %r508;
	// end inline asm
	shl.b32 	%r522, %r4, 1;
	shl.b32 	%r523, %r3, 6;
	and.b32  	%r524, %r523, 192;
	shr.u32 	%r525, %r3, 3;
	and.b32  	%r526, %r525, 2;
	and.b32  	%r527, %r145, 1;
	or.b32  	%r528, %r526, %r527;
	shl.b32 	%r529, %r528, 4;
	bfe.u32 	%r530, %r3, 3, 1;
	and.b32  	%r531, %r522, 14;
	or.b32  	%r532, %r531, %r530;
	or.b32  	%r533, %r529, %r524;
	or.b32  	%r534, %r533, %r532;
	or.b32  	%r535, %r534, %r2;
	mul.wide.u32 	%rd75, %r535, 4;
	add.s64 	%rd76, %rd2, %rd75;
	ld.global.u32 	%r170, [%rd76];
	ld.global.u32 	%r171, [%rd76+1024];
	shl.b32 	%r536, %r301, 19;
	shl.b32 	%r537, %r305, 7;
	add.s32 	%r172, %r537, %r536;
	shl.b32 	%r538, %r3, 2;
	and.b32  	%r173, %r538, 60;
	and.b32  	%r174, %r538, 64;
	shl.b32 	%r175, %r1, 7;
	and.b32  	%r176, %r3, 16;
	shr.u32 	%r539, %r3, 4;
	and.b32  	%r540, %r157, 30;
	or.b32  	%r541, %r540, %r539;
	mul.lo.s32 	%r542, %r541, 257;
	and.b32  	%r543, %r5, 224;
	shr.u32 	%r544, %r4, 3;
	mad.lo.s32 	%r545, %r544, 257, %r543;
	or.b32  	%r546, %r544, 2;
	mad.lo.s32 	%r547, %r546, 257, %r543;
	or.b32  	%r548, %r544, 4;
	mad.lo.s32 	%r549, %r548, 257, %r543;
	or.b32  	%r550, %r544, 6;
	mad.lo.s32 	%r551, %r550, 257, %r543;
	or.b32  	%r552, %r544, 8;
	mad.lo.s32 	%r553, %r552, 257, %r543;
	or.b32  	%r554, %r544, 10;
	mad.lo.s32 	%r555, %r554, 257, %r543;
	or.b32  	%r556, %r544, 12;
	mad.lo.s32 	%r557, %r556, 257, %r543;
	or.b32  	%r558, %r544, 14;
	mad.lo.s32 	%r559, %r558, 257, %r543;
	or.b32  	%r560, %r544, 16;
	mad.lo.s32 	%r561, %r560, 257, %r543;
	or.b32  	%r562, %r544, 18;
	mad.lo.s32 	%r563, %r562, 257, %r543;
	or.b32  	%r564, %r544, 20;
	mad.lo.s32 	%r565, %r564, 257, %r543;
	or.b32  	%r566, %r544, 22;
	mad.lo.s32 	%r567, %r566, 257, %r543;
	or.b32  	%r568, %r544, 24;
	mad.lo.s32 	%r569, %r568, 257, %r543;
	or.b32  	%r570, %r544, 26;
	mad.lo.s32 	%r571, %r570, 257, %r543;
	or.b32  	%r572, %r544, 28;
	mad.lo.s32 	%r573, %r572, 257, %r543;
	or.b32  	%r574, %r544, 30;
	mad.lo.s32 	%r575, %r574, 257, %r543;
	mul.lo.s32 	%r576, %r144, 2184;
	mad.lo.s32 	%r577, %r532, 33, %r576;
	mad.lo.s32 	%r578, %r528, 546, %r577;
	setp.lt.u32 	%p233, %r3, 4;
	setp.eq.s32 	%p234, %r145, 4;
	setp.eq.s32 	%p235, %r145, 5;
	mul.lo.s32 	%r579, %r544, 258;
	and.b32  	%r580, %r4, 1;
	neg.s32 	%r581, %r580;
	setp.eq.b32 	%p236, %r580, 1;
	and.b32  	%r582, %r581, 2064;
	bfe.s32 	%r583, %r4, 1, 1;
	and.b32  	%r584, %r4, 2;
	setp.eq.s32 	%p237, %r584, 0;
	and.b32  	%r585, %r583, 1032;
	and.b32  	%r586, %r538, 12;
	bfe.s32 	%r587, %r3, 3, 1;
	and.b32  	%r588, %r3, 8;
	setp.eq.s32 	%p238, %r588, 0;
	and.b32  	%r589, %r587, 4144;
	bfe.s32 	%r590, %r4, 2, 1;
	and.b32  	%r591, %r4, 4;
	setp.eq.s32 	%p239, %r591, 0;
	and.b32  	%r592, %r590, 516;
	add.s32 	%r593, %r528, %r579;
	add.s32 	%r594, %r593, %r586;
	add.s32 	%r595, %r594, %r582;
	add.s32 	%r596, %r595, %r585;
	add.s32 	%r597, %r596, %r589;
	add.s32 	%r598, %r597, %r592;
	mul.wide.u32 	%rd77, %r598, 4;
	mov.u64 	%rd78, shmem;
	add.s64 	%rd7, %rd78, %rd77;
	selp.b64 	%rd79, 0, 516, %p239;
	selp.b64 	%rd80, 0, 4144, %p238;
	selp.b64 	%rd81, 0, 1032, %p237;
	selp.b64 	%rd82, 2064, 0, %p236;
	cvt.u64.u32 	%rd83, %r586;
	cvt.u64.u32 	%rd84, %r579;
	cvt.u64.u32 	%rd85, %r528;
	add.s64 	%rd86, %rd85, %rd84;
	add.s64 	%rd87, %rd86, %rd83;
	add.s64 	%rd88, %rd87, %rd82;
	add.s64 	%rd89, %rd88, %rd81;
	add.s64 	%rd90, %rd89, %rd80;
	add.s64 	%rd91, %rd90, %rd79;
	shl.b64 	%rd92, %rd91, 2;
	add.s64 	%rd8, %rd78, %rd92;
	shl.b32 	%r599, %r303, 21;
	shl.b32 	%r600, %r307, 9;
	add.s32 	%r601, %r600, %r599;
	or.b32  	%r177, %r176, %r5;
	and.b32  	%r178, %r3, 15;
	cvt.s64.s32 	%rd9, %r601;
	add.s32 	%r602, %r4, %r542;
	mul.wide.u32 	%rd93, %r602, 4;
	add.s64 	%rd10, %rd78, %rd93;
	cvt.u64.u32 	%rd94, %r4;
	cvt.u64.u32 	%rd11, %r542;
	add.s64 	%rd95, %rd11, %rd94;
	shl.b64 	%rd96, %rd95, 2;
	add.s64 	%rd12, %rd78, %rd96;
	add.s32 	%r603, %r545, %r3;
	mul.wide.u32 	%rd97, %r603, 4;
	add.s64 	%rd13, %rd78, %rd97;
	add.s32 	%r604, %r547, %r3;
	mul.wide.u32 	%rd98, %r604, 4;
	add.s64 	%rd14, %rd78, %rd98;
	add.s32 	%r605, %r549, %r3;
	mul.wide.u32 	%rd99, %r605, 4;
	add.s64 	%rd15, %rd78, %rd99;
	add.s32 	%r606, %r551, %r3;
	mul.wide.u32 	%rd100, %r606, 4;
	add.s64 	%rd16, %rd78, %rd100;
	add.s32 	%r607, %r553, %r3;
	mul.wide.u32 	%rd101, %r607, 4;
	add.s64 	%rd17, %rd78, %rd101;
	add.s32 	%r608, %r555, %r3;
	mul.wide.u32 	%rd102, %r608, 4;
	add.s64 	%rd18, %rd78, %rd102;
	add.s32 	%r609, %r557, %r3;
	mul.wide.u32 	%rd103, %r609, 4;
	add.s64 	%rd19, %rd78, %rd103;
	add.s32 	%r610, %r559, %r3;
	mul.wide.u32 	%rd104, %r610, 4;
	add.s64 	%rd20, %rd78, %rd104;
	add.s32 	%r611, %r561, %r3;
	mul.wide.u32 	%rd105, %r611, 4;
	add.s64 	%rd21, %rd78, %rd105;
	add.s32 	%r612, %r563, %r3;
	mul.wide.u32 	%rd106, %r612, 4;
	add.s64 	%rd22, %rd78, %rd106;
	add.s32 	%r613, %r565, %r3;
	mul.wide.u32 	%rd107, %r613, 4;
	add.s64 	%rd23, %rd78, %rd107;
	add.s32 	%r614, %r567, %r3;
	mul.wide.u32 	%rd108, %r614, 4;
	add.s64 	%rd24, %rd78, %rd108;
	add.s32 	%r615, %r569, %r3;
	mul.wide.u32 	%rd109, %r615, 4;
	add.s64 	%rd25, %rd78, %rd109;
	add.s32 	%r616, %r571, %r3;
	mul.wide.u32 	%rd110, %r616, 4;
	add.s64 	%rd26, %rd78, %rd110;
	add.s32 	%r617, %r573, %r3;
	mul.wide.u32 	%rd111, %r617, 4;
	add.s64 	%rd27, %rd78, %rd111;
	add.s32 	%r618, %r575, %r3;
	mul.wide.u32 	%rd112, %r618, 4;
	add.s64 	%rd28, %rd78, %rd112;
	add.s32 	%r619, %r578, %r544;
	mul.wide.u32 	%rd113, %r619, 4;
	add.s64 	%rd29, %rd78, %rd113;
	add.s32 	%r620, %r578, %r546;
	mul.wide.u32 	%rd114, %r620, 4;
	add.s64 	%rd30, %rd78, %rd114;
	add.s32 	%r621, %r578, %r548;
	mul.wide.u32 	%rd115, %r621, 4;
	add.s64 	%rd31, %rd78, %rd115;
	add.s32 	%r622, %r578, %r550;
	mul.wide.u32 	%rd116, %r622, 4;
	add.s64 	%rd32, %rd78, %rd116;
	add.s32 	%r623, %r578, %r552;
	mul.wide.u32 	%rd117, %r623, 4;
	add.s64 	%rd33, %rd78, %rd117;
	add.s32 	%r624, %r578, %r554;
	mul.wide.u32 	%rd118, %r624, 4;
	add.s64 	%rd34, %rd78, %rd118;
	add.s32 	%r625, %r578, %r556;
	mul.wide.u32 	%rd119, %r625, 4;
	add.s64 	%rd35, %rd78, %rd119;
	add.s32 	%r626, %r578, %r558;
	mul.wide.u32 	%rd120, %r626, 4;
	add.s64 	%rd36, %rd78, %rd120;
	add.s32 	%r627, %r578, %r560;
	mul.wide.u32 	%rd121, %r627, 4;
	add.s64 	%rd37, %rd78, %rd121;
	add.s32 	%r628, %r578, %r562;
	mul.wide.u32 	%rd122, %r628, 4;
	add.s64 	%rd38, %rd78, %rd122;
	add.s32 	%r629, %r578, %r564;
	mul.wide.u32 	%rd123, %r629, 4;
	add.s64 	%rd39, %rd78, %rd123;
	add.s32 	%r630, %r578, %r566;
	mul.wide.u32 	%rd124, %r630, 4;
	add.s64 	%rd40, %rd78, %rd124;
	add.s32 	%r631, %r578, %r568;
	mul.wide.u32 	%rd125, %r631, 4;
	add.s64 	%rd41, %rd78, %rd125;
	add.s32 	%r632, %r578, %r570;
	mul.wide.u32 	%rd126, %r632, 4;
	add.s64 	%rd42, %rd78, %rd126;
	add.s32 	%r633, %r578, %r572;
	mul.wide.u32 	%rd127, %r633, 4;
	add.s64 	%rd43, %rd78, %rd127;
	add.s32 	%r634, %r578, %r574;
	mul.wide.u32 	%rd128, %r634, 4;
	add.s64 	%rd44, %rd78, %rd128;
	add.s32 	%r635, %r145, -1;
	setp.lt.u32 	%p240, %r635, 3;
	or.pred  	%p241, %p233, %p240;
	or.pred  	%p242, %p241, %p234;
	and.b32  	%r636, %r3, 24;
	setp.eq.s32 	%p243, %r636, 24;
	or.pred  	%p244, %p235, %p243;
	selp.b32 	%r179, 1145324612, -286331154, %p241;
	or.pred  	%p1, %p242, %p244;
	add.s32 	%r637, %r598, 32;
	mul.wide.u32 	%rd129, %r637, 4;
	add.s64 	%rd45, %rd78, %rd129;
	add.s32 	%r638, %r598, 48;
	mul.wide.u32 	%rd130, %r638, 4;
	add.s64 	%rd46, %rd78, %rd130;
	add.s32 	%r639, %r598, 64;
	mul.wide.u32 	%rd131, %r639, 4;
	add.s64 	%rd47, %rd78, %rd131;
	add.s32 	%r640, %r598, 80;
	mul.wide.u32 	%rd132, %r640, 4;
	add.s64 	%rd48, %rd78, %rd132;
	add.s32 	%r641, %r598, 96;
	mul.wide.u32 	%rd133, %r641, 4;
	add.s64 	%rd49, %rd78, %rd133;
	add.s32 	%r642, %r598, 112;
	mul.wide.u32 	%rd134, %r642, 4;
	add.s64 	%rd50, %rd78, %rd134;
	add.s32 	%r643, %r598, 128;
	mul.wide.u32 	%rd135, %r643, 4;
	add.s64 	%rd51, %rd78, %rd135;
	add.s32 	%r644, %r598, 144;
	mul.wide.u32 	%rd136, %r644, 4;
	add.s64 	%rd52, %rd78, %rd136;
	add.s32 	%r645, %r598, 160;
	mul.wide.u32 	%rd137, %r645, 4;
	add.s64 	%rd53, %rd78, %rd137;
	add.s32 	%r646, %r598, 176;
	mul.wide.u32 	%rd138, %r646, 4;
	add.s64 	%rd54, %rd78, %rd138;
	add.s32 	%r647, %r598, 192;
	mul.wide.u32 	%rd139, %r647, 4;
	add.s64 	%rd55, %rd78, %rd139;
	add.s32 	%r648, %r598, 208;
	mul.wide.u32 	%rd140, %r648, 4;
	add.s64 	%rd56, %rd78, %rd140;
	add.s32 	%r649, %r598, 224;
	mul.wide.u32 	%rd141, %r649, 4;
	add.s64 	%rd57, %rd78, %rd141;
	add.s32 	%r650, %r598, 240;
	mul.wide.u32 	%rd142, %r650, 4;
	add.s64 	%rd58, %rd78, %rd142;
	mov.u32 	%r89, 0;
	setp.eq.s32 	%p246, %r176, 0;
	mov.u16 	%rs38, 25600;
	mov.u16 	%rs40, 21504;
	mov.u16 	%rs44, 18432;
	mov.u32 	%r3504, %r89;
	mov.u32 	%r3505, %r89;
	mov.u32 	%r3506, %r89;
	bra.uni 	$L__BB0_224;
$L__BB0_195:                            // %L32557
                                        //   in Loop: Header=BB0_224 Depth=1
	add.s32 	%r143, %r89, 64;
	setp.ne.s32 	%p365, %r89, 448;
	mov.u32 	%r89, %r143;
	@%p365 bra 	$L__BB0_224;
	bra.uni 	$L__BB0_196;
$L__BB0_224:                            // %L1614
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_242 Depth 2
                                        //     Child Loop BB0_170 Depth 2
	add.s32 	%r651, %r89, %r301;
	setp.lt.s32 	%p245, %r651, %r302;
	@%p245 bra 	$L__BB0_225;
	bra.uni 	$L__BB0_196;
$L__BB0_225:                            // %pass761
                                        //   in Loop: Header=BB0_224 Depth=1
	cvt.u32.u64 	%r844, %rd11;
	or.b32  	%r845, %r89, %r4;
	shl.b32 	%r846, %r845, 19;
	and.b32  	%r847, %r846, 242745344;
	or.b32  	%r848, %r847, %r173;
	or.b32  	%r849, %r848, %r174;
	or.b32  	%r850, %r849, %r175;
	add.s32 	%r851, %r172, %r850;
	shr.s32 	%r852, %r851, 31;
	shr.u32 	%r853, %r852, 4;
	add.s32 	%r854, %r851, %r853;
	shr.s32 	%r855, %r854, 28;
	setp.lt.s32 	%p247, %r851, 0;
	and.b32  	%r856, %r854, -268435456;
	setp.ne.s32 	%p248, %r856, %r851;
	and.pred  	%p249, %p247, %p248;
	selp.u32 	%r857, 1, 0, %p249;
	sub.s32 	%r858, %r857, %r855;
	shl.b32 	%r859, %r858, 28;
	add.s32 	%r860, %r859, %r851;
	mul.wide.s32 	%rd143, %r860, 4;
	add.s64 	%rd144, %rd3, %rd143;
	ld.global.v4.u32 	{%r861, %r862, %r863, %r864}, [%rd144];
	or.b32  	%r865, %r845, 16;
	shl.b32 	%r866, %r865, 19;
	and.b32  	%r867, %r866, 251133952;
	or.b32  	%r868, %r867, %r173;
	or.b32  	%r869, %r868, %r174;
	or.b32  	%r870, %r869, %r175;
	add.s32 	%r871, %r172, %r870;
	shr.s32 	%r872, %r871, 31;
	shr.u32 	%r873, %r872, 4;
	add.s32 	%r874, %r871, %r873;
	shr.s32 	%r875, %r874, 28;
	setp.lt.s32 	%p250, %r871, 0;
	and.b32  	%r876, %r874, -268435456;
	setp.ne.s32 	%p251, %r876, %r871;
	and.pred  	%p252, %p250, %p251;
	selp.u32 	%r877, 1, 0, %p252;
	sub.s32 	%r878, %r877, %r875;
	shl.b32 	%r879, %r878, 28;
	add.s32 	%r880, %r879, %r871;
	mul.wide.s32 	%rd145, %r880, 4;
	add.s64 	%rd146, %rd3, %rd145;
	ld.global.v4.u32 	{%r881, %r882, %r883, %r884}, [%rd146];
	and.b32  	%r885, %r89, 448;
	or.b32  	%r886, %r4, %r885;
	shl.b32 	%r887, %r886, 19;
	or.b32  	%r888, %r887, %r173;
	or.b32  	%r889, %r888, %r174;
	or.b32  	%r890, %r889, %r175;
	or.b32  	%r891, %r890, 16777216;
	add.s32 	%r892, %r172, %r891;
	shr.s32 	%r893, %r892, 31;
	shr.u32 	%r894, %r893, 4;
	add.s32 	%r895, %r892, %r894;
	shr.s32 	%r896, %r895, 28;
	setp.lt.s32 	%p253, %r892, 0;
	and.b32  	%r897, %r895, -268435456;
	setp.ne.s32 	%p254, %r897, %r892;
	and.pred  	%p255, %p253, %p254;
	selp.u32 	%r898, 1, 0, %p255;
	sub.s32 	%r899, %r898, %r896;
	shl.b32 	%r900, %r899, 28;
	add.s32 	%r901, %r900, %r892;
	mul.wide.s32 	%rd147, %r901, 4;
	add.s64 	%rd148, %rd3, %rd147;
	ld.global.v4.u32 	{%r902, %r903, %r904, %r905}, [%rd148];
	or.b32  	%r906, %r890, 25165824;
	add.s32 	%r907, %r172, %r906;
	shr.s32 	%r908, %r907, 31;
	shr.u32 	%r909, %r908, 4;
	add.s32 	%r910, %r907, %r909;
	shr.s32 	%r911, %r910, 28;
	setp.lt.s32 	%p256, %r907, 0;
	and.b32  	%r912, %r910, -268435456;
	setp.ne.s32 	%p257, %r912, %r907;
	and.pred  	%p258, %p256, %p257;
	selp.u32 	%r913, 1, 0, %p258;
	sub.s32 	%r914, %r913, %r911;
	shl.b32 	%r915, %r914, 28;
	add.s32 	%r916, %r915, %r907;
	mul.wide.s32 	%rd149, %r916, 4;
	add.s64 	%rd150, %rd3, %rd149;
	ld.global.v4.u32 	{%r917, %r918, %r919, %r920}, [%rd150];
	selp.b32 	%r921, %r863, %r861, %p246;
	shfl.sync.bfly.b32	%r922, %r921, 16, 31, -1;
	selp.b32 	%r654, %r861, %r922, %p246;
	selp.b32 	%r659, %r922, %r863, %p246;
	selp.b32 	%r923, %r864, %r862, %p246;
	shfl.sync.bfly.b32	%r924, %r923, 16, 31, -1;
	selp.b32 	%r662, %r862, %r924, %p246;
	selp.b32 	%r667, %r924, %r864, %p246;
	selp.b32 	%r925, %r883, %r881, %p246;
	shfl.sync.bfly.b32	%r926, %r925, 16, 31, -1;
	selp.b32 	%r670, %r881, %r926, %p246;
	selp.b32 	%r675, %r926, %r883, %p246;
	selp.b32 	%r927, %r884, %r882, %p246;
	shfl.sync.bfly.b32	%r928, %r927, 16, 31, -1;
	selp.b32 	%r678, %r882, %r928, %p246;
	selp.b32 	%r683, %r928, %r884, %p246;
	selp.b32 	%r929, %r904, %r902, %p246;
	shfl.sync.bfly.b32	%r930, %r929, 16, 31, -1;
	selp.b32 	%r686, %r902, %r930, %p246;
	selp.b32 	%r691, %r930, %r904, %p246;
	selp.b32 	%r931, %r905, %r903, %p246;
	shfl.sync.bfly.b32	%r932, %r931, 16, 31, -1;
	selp.b32 	%r694, %r903, %r932, %p246;
	selp.b32 	%r699, %r932, %r905, %p246;
	selp.b32 	%r933, %r919, %r917, %p246;
	shfl.sync.bfly.b32	%r934, %r933, 16, 31, -1;
	selp.b32 	%r702, %r917, %r934, %p246;
	selp.b32 	%r707, %r934, %r919, %p246;
	selp.b32 	%r935, %r920, %r918, %p246;
	shfl.sync.bfly.b32	%r936, %r935, 16, 31, -1;
	selp.b32 	%r710, %r918, %r936, %p246;
	selp.b32 	%r715, %r936, %r920, %p246;
	shl.b32 	%r655, %r659, 4;
	mov.u32 	%r653, 252645135;
	// begin inline asm
	lop3.b32 %r717, %r653, %r654, %r655, 202;
	// end inline asm
	shr.u32 	%r658, %r654, 4;
	// begin inline asm
	lop3.b32 %r733, %r653, %r658, %r659, 202;
	// end inline asm
	shl.b32 	%r663, %r667, 4;
	// begin inline asm
	lop3.b32 %r725, %r653, %r662, %r663, 202;
	// end inline asm
	shr.u32 	%r666, %r662, 4;
	// begin inline asm
	lop3.b32 %r741, %r653, %r666, %r667, 202;
	// end inline asm
	shl.b32 	%r671, %r675, 4;
	// begin inline asm
	lop3.b32 %r749, %r653, %r670, %r671, 202;
	// end inline asm
	shr.u32 	%r674, %r670, 4;
	// begin inline asm
	lop3.b32 %r765, %r653, %r674, %r675, 202;
	// end inline asm
	shl.b32 	%r679, %r683, 4;
	// begin inline asm
	lop3.b32 %r757, %r653, %r678, %r679, 202;
	// end inline asm
	shr.u32 	%r682, %r678, 4;
	// begin inline asm
	lop3.b32 %r773, %r653, %r682, %r683, 202;
	// end inline asm
	shl.b32 	%r687, %r691, 4;
	// begin inline asm
	lop3.b32 %r718, %r653, %r686, %r687, 202;
	// end inline asm
	shr.u32 	%r690, %r686, 4;
	// begin inline asm
	lop3.b32 %r734, %r653, %r690, %r691, 202;
	// end inline asm
	shl.b32 	%r695, %r699, 4;
	// begin inline asm
	lop3.b32 %r726, %r653, %r694, %r695, 202;
	// end inline asm
	shr.u32 	%r698, %r694, 4;
	// begin inline asm
	lop3.b32 %r742, %r653, %r698, %r699, 202;
	// end inline asm
	shl.b32 	%r703, %r707, 4;
	// begin inline asm
	lop3.b32 %r750, %r653, %r702, %r703, 202;
	// end inline asm
	shr.u32 	%r706, %r702, 4;
	// begin inline asm
	lop3.b32 %r766, %r653, %r706, %r707, 202;
	// end inline asm
	shl.b32 	%r711, %r715, 4;
	// begin inline asm
	lop3.b32 %r758, %r653, %r710, %r711, 202;
	// end inline asm
	shr.u32 	%r714, %r710, 4;
	// begin inline asm
	lop3.b32 %r774, %r653, %r714, %r715, 202;
	// end inline asm
	mov.u32 	%r719, 25152;
	// begin inline asm
	prmt.b32 %r781, %r717, %r718, %r719;
	// end inline asm
	mov.u32 	%r723, 29521;
	// begin inline asm
	prmt.b32 %r813, %r717, %r718, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r789, %r725, %r726, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r821, %r725, %r726, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r782, %r733, %r734, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r814, %r733, %r734, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r790, %r741, %r742, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r822, %r741, %r742, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r797, %r749, %r750, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r829, %r749, %r750, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r805, %r757, %r758, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r837, %r757, %r758, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r798, %r765, %r766, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r830, %r765, %r766, %r723;
	// end inline asm
	// begin inline asm
	prmt.b32 %r806, %r773, %r774, %r719;
	// end inline asm
	// begin inline asm
	prmt.b32 %r838, %r773, %r774, %r723;
	// end inline asm
	mov.u32 	%r783, 21520;
	// begin inline asm
	prmt.b32 %r780, %r781, %r782, %r783;
	// end inline asm
	mov.u32 	%r787, 30258;
	// begin inline asm
	prmt.b32 %r784, %r781, %r782, %r787;
	// end inline asm
	// begin inline asm
	prmt.b32 %r788, %r789, %r790, %r783;
	// end inline asm
	// begin inline asm
	prmt.b32 %r792, %r789, %r790, %r787;
	// end inline asm
	// begin inline asm
	prmt.b32 %r796, %r797, %r798, %r783;
	// end inline asm
	// begin inline asm
	prmt.b32 %r800, %r797, %r798, %r787;
	// end inline asm
	// begin inline asm
	prmt.b32 %r804, %r805, %r806, %r783;
	// end inline asm
	// begin inline asm
	prmt.b32 %r808, %r805, %r806, %r787;
	// end inline asm
	// begin inline asm
	prmt.b32 %r812, %r813, %r814, %r783;
	// end inline asm
	// begin inline asm
	prmt.b32 %r816, %r813, %r814, %r787;
	// end inline asm
	// begin inline asm
	prmt.b32 %r820, %r821, %r822, %r783;
	// end inline asm
	// begin inline asm
	prmt.b32 %r824, %r821, %r822, %r787;
	// end inline asm
	// begin inline asm
	prmt.b32 %r828, %r829, %r830, %r783;
	// end inline asm
	// begin inline asm
	prmt.b32 %r832, %r829, %r830, %r787;
	// end inline asm
	// begin inline asm
	prmt.b32 %r836, %r837, %r838, %r783;
	// end inline asm
	// begin inline asm
	prmt.b32 %r840, %r837, %r838, %r787;
	// end inline asm
	st.shared.u32 	[%rd10], %r780;
	st.shared.u32 	[%rd12+512], %r788;
	st.shared.u32 	[%rd12+256], %r784;
	st.shared.u32 	[%rd12+768], %r792;
	and.b32  	%r937, %r865, 31;
	add.s32 	%r938, %r937, %r844;
	mul.wide.u32 	%rd151, %r938, 4;
	add.s64 	%rd153, %rd78, %rd151;
	st.shared.u32 	[%rd153], %r796;
	cvt.u64.u32 	%rd154, %r937;
	add.s64 	%rd155, %rd11, %rd154;
	shl.b64 	%rd156, %rd155, 2;
	add.s64 	%rd157, %rd78, %rd156;
	st.shared.u32 	[%rd157+512], %r804;
	st.shared.u32 	[%rd157+256], %r800;
	st.shared.u32 	[%rd157+768], %r808;
	st.shared.u32 	[%rd12+128], %r812;
	st.shared.u32 	[%rd12+640], %r820;
	st.shared.u32 	[%rd12+384], %r816;
	st.shared.u32 	[%rd12+896], %r824;
	st.shared.u32 	[%rd157+128], %r828;
	st.shared.u32 	[%rd157+640], %r836;
	st.shared.u32 	[%rd157+384], %r832;
	st.shared.u32 	[%rd157+896], %r840;
	bar.sync 	0;
	ld.shared.u32 	%r180, [%rd13];
	ld.shared.u32 	%r181, [%rd14];
	ld.shared.u32 	%r182, [%rd15];
	ld.shared.u32 	%r183, [%rd16];
	ld.shared.u32 	%r184, [%rd17];
	ld.shared.u32 	%r185, [%rd18];
	ld.shared.u32 	%r186, [%rd19];
	ld.shared.u32 	%r187, [%rd20];
	ld.shared.u32 	%r188, [%rd21];
	ld.shared.u32 	%r189, [%rd22];
	ld.shared.u32 	%r190, [%rd23];
	ld.shared.u32 	%r191, [%rd24];
	ld.shared.u32 	%r192, [%rd25];
	ld.shared.u32 	%r193, [%rd26];
	ld.shared.u32 	%r194, [%rd27];
	ld.shared.u32 	%r195, [%rd28];
	bar.sync 	0;
	shfl.sync.idx.b32	%r196, %r169, 0, 31, -1;
	shfl.sync.idx.b32	%r197, %r169, 1, 31, -1;
	shfl.sync.idx.b32	%r198, %r169, 2, 31, -1;
	shfl.sync.idx.b32	%r199, %r169, 3, 31, -1;
	shfl.sync.idx.b32	%r200, %r169, 4, 31, -1;
	shfl.sync.idx.b32	%r201, %r169, 5, 31, -1;
	shfl.sync.idx.b32	%r202, %r169, 6, 31, -1;
	shfl.sync.idx.b32	%r203, %r169, 7, 31, -1;
	shfl.sync.idx.b32	%r204, %r169, 8, 31, -1;
	shfl.sync.idx.b32	%r205, %r169, 9, 31, -1;
	shfl.sync.idx.b32	%r206, %r169, 10, 31, -1;
	shfl.sync.idx.b32	%r207, %r169, 11, 31, -1;
	shfl.sync.idx.b32	%r208, %r169, 12, 31, -1;
	shfl.sync.idx.b32	%r209, %r169, 13, 31, -1;
	shfl.sync.idx.b32	%r210, %r169, 14, 31, -1;
	shfl.sync.idx.b32	%r211, %r169, 15, 31, -1;
	setp.eq.s32 	%p259, %r196, 999999999;
	@%p259 bra 	$L__BB0_136;
// %bb.226:                             // %pass3025
                                        //   in Loop: Header=BB0_224 Depth=1
	add.s32 	%r939, %r196, %r3;
	mul.wide.s32 	%rd158, %r939, 4;
	add.s64 	%rd160, %rd78, %rd158;
	st.shared.u32 	[%rd160], %r180;
	setp.eq.s32 	%p260, %r197, 999999999;
	@%p260 bra 	$L__BB0_137;
// %bb.227:                             // %pass3091
                                        //   in Loop: Header=BB0_224 Depth=1
	add.s32 	%r940, %r197, %r3;
	mul.wide.s32 	%rd161, %r940, 4;
	add.s64 	%rd163, %rd78, %rd161;
	st.shared.u32 	[%rd163], %r181;
	setp.eq.s32 	%p261, %r198, 999999999;
	@%p261 bra 	$L__BB0_138;
// %bb.228:                             // %pass3157
                                        //   in Loop: Header=BB0_224 Depth=1
	add.s32 	%r941, %r198, %r3;
	mul.wide.s32 	%rd164, %r941, 4;
	add.s64 	%rd166, %rd78, %rd164;
	st.shared.u32 	[%rd166], %r182;
	setp.eq.s32 	%p262, %r199, 999999999;
	@%p262 bra 	$L__BB0_139;
// %bb.229:                             // %pass3223
                                        //   in Loop: Header=BB0_224 Depth=1
	add.s32 	%r942, %r199, %r3;
	mul.wide.s32 	%rd167, %r942, 4;
	add.s64 	%rd169, %rd78, %rd167;
	st.shared.u32 	[%rd169], %r183;
	setp.eq.s32 	%p263, %r200, 999999999;
	@%p263 bra 	$L__BB0_140;
// %bb.230:                             // %pass3289
                                        //   in Loop: Header=BB0_224 Depth=1
	add.s32 	%r943, %r200, %r3;
	mul.wide.s32 	%rd170, %r943, 4;
	add.s64 	%rd172, %rd78, %rd170;
	st.shared.u32 	[%rd172], %r184;
	setp.eq.s32 	%p264, %r201, 999999999;
	@%p264 bra 	$L__BB0_141;
// %bb.231:                             // %pass3355
                                        //   in Loop: Header=BB0_224 Depth=1
	add.s32 	%r944, %r201, %r3;
	mul.wide.s32 	%rd173, %r944, 4;
	add.s64 	%rd175, %rd78, %rd173;
	st.shared.u32 	[%rd175], %r185;
	setp.eq.s32 	%p265, %r202, 999999999;
	@%p265 bra 	$L__BB0_142;
// %bb.232:                             // %pass3421
                                        //   in Loop: Header=BB0_224 Depth=1
	add.s32 	%r945, %r202, %r3;
	mul.wide.s32 	%rd176, %r945, 4;
	add.s64 	%rd178, %rd78, %rd176;
	st.shared.u32 	[%rd178], %r186;
	setp.eq.s32 	%p266, %r203, 999999999;
	@%p266 bra 	$L__BB0_143;
// %bb.233:                             // %pass3487
                                        //   in Loop: Header=BB0_224 Depth=1
	add.s32 	%r946, %r203, %r3;
	mul.wide.s32 	%rd179, %r946, 4;
	add.s64 	%rd181, %rd78, %rd179;
	st.shared.u32 	[%rd181], %r187;
	setp.eq.s32 	%p267, %r204, 999999999;
	@%p267 bra 	$L__BB0_144;
// %bb.234:                             // %pass3553
                                        //   in Loop: Header=BB0_224 Depth=1
	add.s32 	%r947, %r204, %r3;
	mul.wide.s32 	%rd182, %r947, 4;
	add.s64 	%rd184, %rd78, %rd182;
	st.shared.u32 	[%rd184], %r188;
	setp.eq.s32 	%p268, %r205, 999999999;
	@%p268 bra 	$L__BB0_145;
// %bb.235:                             // %pass3619
                                        //   in Loop: Header=BB0_224 Depth=1
	add.s32 	%r948, %r205, %r3;
	mul.wide.s32 	%rd185, %r948, 4;
	add.s64 	%rd187, %rd78, %rd185;
	st.shared.u32 	[%rd187], %r189;
	setp.eq.s32 	%p269, %r206, 999999999;
	@%p269 bra 	$L__BB0_146;
// %bb.236:                             // %pass3685
                                        //   in Loop: Header=BB0_224 Depth=1
	add.s32 	%r949, %r206, %r3;
	mul.wide.s32 	%rd188, %r949, 4;
	add.s64 	%rd190, %rd78, %rd188;
	st.shared.u32 	[%rd190], %r190;
	setp.eq.s32 	%p270, %r207, 999999999;
	@%p270 bra 	$L__BB0_147;
// %bb.237:                             // %pass3751
                                        //   in Loop: Header=BB0_224 Depth=1
	add.s32 	%r950, %r207, %r3;
	mul.wide.s32 	%rd191, %r950, 4;
	add.s64 	%rd193, %rd78, %rd191;
	st.shared.u32 	[%rd193], %r191;
	setp.eq.s32 	%p271, %r208, 999999999;
	@%p271 bra 	$L__BB0_148;
// %bb.238:                             // %pass3817
                                        //   in Loop: Header=BB0_224 Depth=1
	add.s32 	%r951, %r208, %r3;
	mul.wide.s32 	%rd194, %r951, 4;
	add.s64 	%rd196, %rd78, %rd194;
	st.shared.u32 	[%rd196], %r192;
	setp.eq.s32 	%p272, %r209, 999999999;
	@%p272 bra 	$L__BB0_149;
// %bb.239:                             // %pass3883
                                        //   in Loop: Header=BB0_224 Depth=1
	add.s32 	%r952, %r209, %r3;
	mul.wide.s32 	%rd197, %r952, 4;
	add.s64 	%rd199, %rd78, %rd197;
	st.shared.u32 	[%rd199], %r193;
	setp.eq.s32 	%p273, %r210, 999999999;
	@%p273 bra 	$L__BB0_150;
// %bb.240:                             // %pass3949
                                        //   in Loop: Header=BB0_224 Depth=1
	add.s32 	%r953, %r210, %r3;
	mul.wide.s32 	%rd200, %r953, 4;
	add.s64 	%rd202, %rd78, %rd200;
	st.shared.u32 	[%rd202], %r194;
	setp.eq.s32 	%p274, %r211, 999999999;
	@%p274 bra 	$L__BB0_151;
// %bb.241:                             // %pass4015
                                        //   in Loop: Header=BB0_224 Depth=1
	add.s32 	%r955, %r211, %r3;
	mul.wide.s32 	%rd203, %r955, 4;
	add.s64 	%rd205, %rd78, %rd203;
	st.shared.u32 	[%rd205], %r195;
	bar.sync 	0;
	ld.shared.u32 	%r212, [%rd29];
	ld.shared.u32 	%r213, [%rd30];
	ld.shared.u32 	%r214, [%rd31];
	ld.shared.u32 	%r215, [%rd32];
	ld.shared.u32 	%r216, [%rd33];
	ld.shared.u32 	%r217, [%rd34];
	ld.shared.u32 	%r218, [%rd35];
	ld.shared.u32 	%r219, [%rd36];
	ld.shared.u32 	%r220, [%rd37];
	ld.shared.u32 	%r221, [%rd38];
	ld.shared.u32 	%r222, [%rd39];
	ld.shared.u32 	%r223, [%rd40];
	ld.shared.u32 	%r224, [%rd41];
	ld.shared.u32 	%r225, [%rd42];
	ld.shared.u32 	%r226, [%rd43];
	ld.shared.u32 	%r227, [%rd44];
	bar.sync 	0;
	mov.u32 	%r3496, 16;
	bra.uni 	$L__BB0_242;
$L__BB0_167:                            // %L22452
                                        //   in Loop: Header=BB0_242 Depth=2
	add.s32 	%r3505, %r3505, 1;
	mov.u32 	%r3504, 0;
	mov.u32 	%r3506, %r3504;
$L__BB0_168:                            // %L22453
                                        //   in Loop: Header=BB0_242 Depth=2
	bar.sync 	0;
	add.s32 	%r3496, %r3496, -8;
	setp.ne.s32 	%p319, %r3496, -16;
	@%p319 bra 	$L__BB0_242;
	bra.uni 	$L__BB0_169;
$L__BB0_242:                            // %L12386
                                        //   Parent Loop BB0_224 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p275, %r3496, 16;
	selp.b32 	%r1348, %r212, 0, %p275;
	setp.eq.s32 	%p276, %r3496, 8;
	selp.b32 	%r1349, %r216, %r1348, %p276;
	setp.eq.s32 	%p277, %r3496, 0;
	selp.b32 	%r1350, %r220, %r1349, %p277;
	setp.eq.s32 	%p278, %r3496, -8;
	selp.b32 	%r1351, %r224, %r1350, %p278;
	selp.b32 	%r1352, %r213, 0, %p275;
	selp.b32 	%r1353, %r217, %r1352, %p276;
	selp.b32 	%r1354, %r221, %r1353, %p277;
	selp.b32 	%r1355, %r225, %r1354, %p278;
	selp.b32 	%r1356, %r214, 0, %p275;
	selp.b32 	%r1357, %r218, %r1356, %p276;
	selp.b32 	%r1358, %r222, %r1357, %p277;
	selp.b32 	%r1359, %r226, %r1358, %p278;
	selp.b32 	%r1360, %r215, 0, %p275;
	selp.b32 	%r1361, %r219, %r1360, %p276;
	selp.b32 	%r1362, %r223, %r1361, %p277;
	selp.b32 	%r1363, %r227, %r1362, %p278;
	// begin inline asm
	mov.b32 %r961, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r972, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r960, %r1351, -2004318072;
	mov.u32 	%r1097, 983055;
	// begin inline asm
	lop3.b32 %r958, %r1097, %r960, %r961, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r962, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r963, %r961, %r962;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r966, %r958, %r963;
	// end inline asm
	mov.u32 	%r1108, 15728880;
	// begin inline asm
	lop3.b32 %r969, %r1108, %r960, %r972, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r973, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r974, %r972, %r973;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r977, %r969, %r974;
	// end inline asm
	// begin inline asm
	mov.b32 %r1007, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1018, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1006, %r1355, -2004318072;
	// begin inline asm
	lop3.b32 %r1004, %r1097, %r1006, %r1007, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1008, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1009, %r1007, %r1008;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1012, %r1004, %r1009;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1015, %r1108, %r1006, %r1018, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1019, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1020, %r1018, %r1019;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1023, %r1015, %r1020;
	// end inline asm
	// begin inline asm
	mov.b32 %r1053, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1064, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1052, %r1359, -2004318072;
	// begin inline asm
	lop3.b32 %r1050, %r1097, %r1052, %r1053, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1054, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1055, %r1053, %r1054;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1058, %r1050, %r1055;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1061, %r1108, %r1052, %r1064, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1065, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1066, %r1064, %r1065;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1069, %r1061, %r1066;
	// end inline asm
	// begin inline asm
	mov.b32 %r1099, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1110, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1098, %r1363, -2004318072;
	// begin inline asm
	lop3.b32 %r1096, %r1097, %r1098, %r1099, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1100, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1101, %r1099, %r1100;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1104, %r1096, %r1101;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1107, %r1108, %r1098, %r1110, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1111, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1112, %r1110, %r1111;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1115, %r1107, %r1112;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r170;
    mov.b32 {%r2re, %r2im}, %r966;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1140, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r977;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1143, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r170;
    mov.b32 {%r2re, %r2im}, %r1012;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1146, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r1023;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1149, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r170;
    mov.b32 {%r2re, %r2im}, %r1058;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1152, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r1069;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1155, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r170;
    mov.b32 {%r2re, %r2im}, %r1104;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1158, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r1115;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1161, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1219, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1164, %r1165}, {%r331, %r334}, {%r1140}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1171, %r1172}, {%r331, %r334}, {%r1143}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1178, %r1179}, {%r331, %r334}, {%r1146}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1185, %r1186}, {%r331, %r334}, {%r1149}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1192, %r1193}, {%r331, %r334}, {%r1152}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1199, %r1200}, {%r331, %r334}, {%r1155}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1206, %r1207}, {%r331, %r334}, {%r1158}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1213, %r1214}, {%r331, %r334}, {%r1161}, {%r1219, %r1219};
	// end inline asm
	@%p1 bra 	$L__BB0_245;
	bra.uni 	$L__BB0_243;
$L__BB0_245:                            // %pass5418
                                        //   in Loop: Header=BB0_242 Depth=2
	// begin inline asm
	neg.f16x2 %r1220, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1222, %r1220, %r1165;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1225, %r369, %r1164, %r1222;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1229, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1231, %r1229, %r1172;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1234, %r369, %r1171, %r1231;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1238, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1240, %r1238, %r1179;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1243, %r369, %r1178, %r1240;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1247, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1249, %r1247, %r1186;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1252, %r369, %r1185, %r1249;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1256, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1258, %r1256, %r1193;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1261, %r369, %r1192, %r1258;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1265, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1267, %r1265, %r1200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1270, %r369, %r1199, %r1267;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1274, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1276, %r1274, %r1207;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1279, %r369, %r1206, %r1276;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1283, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1285, %r1283, %r1214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1288, %r369, %r1213, %r1285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1292, %r372, %r1164;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1295, %r369, %r1165, %r1292;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1299, %r372, %r1171;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1302, %r369, %r1172, %r1299;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1306, %r372, %r1178;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1309, %r369, %r1179, %r1306;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1313, %r372, %r1185;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1316, %r369, %r1186, %r1313;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1320, %r372, %r1192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1323, %r369, %r1193, %r1320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1327, %r372, %r1199;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1330, %r369, %r1200, %r1327;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1334, %r372, %r1206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1337, %r369, %r1207, %r1334;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1341, %r372, %r1213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1344, %r369, %r1214, %r1341;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1364, %r1365}, {%r416, %r419}, {%r1225, %r1295}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1373, %r1374}, {%r416, %r419}, {%r1234, %r1302}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1382, %r1383}, {%r416, %r419}, {%r1243, %r1309}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1391, %r1392}, {%r416, %r419}, {%r1252, %r1316}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1400, %r1401}, {%r416, %r419}, {%r1261, %r1323}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1409, %r1410}, {%r416, %r419}, {%r1270, %r1330}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1418, %r1419}, {%r416, %r419}, {%r1279, %r1337}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1427, %r1428}, {%r416, %r419}, {%r1288, %r1344}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	bar.sync 	0;
	ld.shared.u32 	%r1504, [%rd7];
	ld.shared.u32 	%r1511, [%rd8+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1521, %r1518}, {%r428, %r431}, {%r1504}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1530, %r1527}, {%r428, %r431}, {%r1511}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1514, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1516, %r1514, %r1518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1519, %r462, %r1521, %r1516;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1523, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1525, %r1523, %r1527;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1528, %r462, %r1530, %r1525;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1532, %r465, %r1521;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1535, %r462, %r1518, %r1532;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1539, %r465, %r1530;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1542, %r462, %r1527, %r1539;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1565, %r1568}, {%r504, %r507}, {%r1519, %r1535}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1572, %r1576}, {%r504, %r507}, {%r1528, %r1542}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1564, %r1565, %r1565;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1567, %r1568, %r1568, %r1564;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1571, %r1572, %r1572, %r1567;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1575, %r1576, %r1576, %r1571;
	// end inline asm
	mov.u32 	%r1580, 488578335;
	// begin inline asm
	fma.rn.f16x2 %r3517, %r1580, %r1575, %r3506;
	// end inline asm
	add.s32 	%r3515, %r3504, 1;
	setp.eq.s32 	%p279, %r3515, 25;
	@%p279 bra 	$L__BB0_152;
	bra.uni 	$L__BB0_246;
$L__BB0_152:                            // %L14241
                                        //   in Loop: Header=BB0_242 Depth=2
	setp.lt.u32 	%p280, %r3, 16;
	@%p280 bra 	$L__BB0_244;
	bra.uni 	$L__BB0_153;
$L__BB0_244:                            // %pass5960
                                        //   in Loop: Header=BB0_242 Depth=2
	shl.b32 	%r1583, %r3505, 21;
	or.b32  	%r1584, %r1583, %r177;
	or.b32  	%r1585, %r1584, %r178;
	or.b32  	%r1586, %r1585, %r2;
	cvt.u64.u32 	%rd208, %r1586;
	add.s64 	%rd209, %rd208, %rd9;
	shr.u64 	%rd210, %rd209, 37;
	add.s64 	%rd211, %rd209, %rd210;
	shr.s64 	%rd212, %rd211, 27;
	setp.lt.s64 	%p281, %rd209, 0;
	and.b64  	%rd213, %rd211, -134217728;
	setp.ne.s64 	%p282, %rd213, %rd209;
	and.pred  	%p283, %p281, %p282;
	selp.u64 	%rd214, 1, 0, %p283;
	sub.s64 	%rd215, %rd214, %rd212;
	shl.b64 	%rd216, %rd215, 27;
	add.s64 	%rd217, %rd216, %rd209;
	shl.b64 	%rd218, %rd217, 2;
	add.s64 	%rd219, %rd4, %rd218;
	st.global.u32 	[%rd219], %r3517;
$L__BB0_153:                            // %L14458
                                        //   in Loop: Header=BB0_242 Depth=2
	add.s32 	%r3505, %r3505, 1;
	mov.u32 	%r3515, 0;
	mov.u32 	%r3517, %r3515;
$L__BB0_246:                            // %pass6205
                                        //   in Loop: Header=BB0_242 Depth=2
	ld.shared.u32 	%r1592, [%rd45];
	ld.shared.u32 	%r1599, [%rd46];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1609, %r1606}, {%r428, %r431}, {%r1592}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1618, %r1615}, {%r428, %r431}, {%r1599}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1602, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1604, %r1602, %r1606;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1607, %r462, %r1609, %r1604;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1611, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1613, %r1611, %r1615;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1616, %r462, %r1618, %r1613;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1620, %r465, %r1609;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1623, %r462, %r1606, %r1620;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1627, %r465, %r1618;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1630, %r462, %r1615, %r1627;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1653, %r1656}, {%r504, %r507}, {%r1607, %r1623}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1660, %r1664}, {%r504, %r507}, {%r1616, %r1630}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1652, %r1653, %r1653;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1655, %r1656, %r1656, %r1652;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1659, %r1660, %r1660, %r1655;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1663, %r1664, %r1664, %r1659;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3520, %r1580, %r1663, %r3517;
	// end inline asm
	add.s32 	%r3518, %r3515, 1;
	setp.eq.s32 	%p284, %r3518, 25;
	@%p284 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_247;
$L__BB0_154:                            // %L15383
                                        //   in Loop: Header=BB0_242 Depth=2
	setp.lt.u32 	%p285, %r3, 16;
	@%p285 bra 	$L__BB0_262;
	bra.uni 	$L__BB0_155;
$L__BB0_262:                            // %pass6443
                                        //   in Loop: Header=BB0_242 Depth=2
	shl.b32 	%r1671, %r3505, 21;
	or.b32  	%r1672, %r1671, %r177;
	or.b32  	%r1673, %r1672, %r178;
	or.b32  	%r1674, %r1673, %r2;
	cvt.u64.u32 	%rd220, %r1674;
	add.s64 	%rd221, %rd220, %rd9;
	shr.u64 	%rd222, %rd221, 37;
	add.s64 	%rd223, %rd221, %rd222;
	shr.s64 	%rd224, %rd223, 27;
	setp.lt.s64 	%p286, %rd221, 0;
	and.b64  	%rd225, %rd223, -134217728;
	setp.ne.s64 	%p287, %rd225, %rd221;
	and.pred  	%p288, %p286, %p287;
	selp.u64 	%rd226, 1, 0, %p288;
	sub.s64 	%rd227, %rd226, %rd224;
	shl.b64 	%rd228, %rd227, 27;
	add.s64 	%rd229, %rd228, %rd221;
	shl.b64 	%rd230, %rd229, 2;
	add.s64 	%rd231, %rd4, %rd230;
	st.global.u32 	[%rd231], %r3520;
$L__BB0_155:                            // %L15600
                                        //   in Loop: Header=BB0_242 Depth=2
	add.s32 	%r3505, %r3505, 1;
	mov.u32 	%r3518, 0;
	mov.u32 	%r3520, %r3518;
$L__BB0_247:                            // %pass6688
                                        //   in Loop: Header=BB0_242 Depth=2
	ld.shared.u32 	%r1680, [%rd47];
	ld.shared.u32 	%r1687, [%rd48];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1697, %r1694}, {%r428, %r431}, {%r1680}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1706, %r1703}, {%r428, %r431}, {%r1687}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1690, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1692, %r1690, %r1694;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1695, %r462, %r1697, %r1692;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1699, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1701, %r1699, %r1703;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1704, %r462, %r1706, %r1701;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1708, %r465, %r1697;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1711, %r462, %r1694, %r1708;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1715, %r465, %r1706;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1718, %r462, %r1703, %r1715;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1741, %r1744}, {%r504, %r507}, {%r1695, %r1711}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1748, %r1752}, {%r504, %r507}, {%r1704, %r1718}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1740, %r1741, %r1741;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1743, %r1744, %r1744, %r1740;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1747, %r1748, %r1748, %r1743;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1751, %r1752, %r1752, %r1747;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3523, %r1580, %r1751, %r3520;
	// end inline asm
	add.s32 	%r3521, %r3518, 1;
	setp.eq.s32 	%p289, %r3521, 25;
	@%p289 bra 	$L__BB0_156;
	bra.uni 	$L__BB0_248;
$L__BB0_156:                            // %L16525
                                        //   in Loop: Header=BB0_242 Depth=2
	setp.lt.u32 	%p290, %r3, 16;
	@%p290 bra 	$L__BB0_263;
	bra.uni 	$L__BB0_157;
$L__BB0_263:                            // %pass6926
                                        //   in Loop: Header=BB0_242 Depth=2
	shl.b32 	%r1759, %r3505, 21;
	or.b32  	%r1760, %r1759, %r177;
	or.b32  	%r1761, %r1760, %r178;
	or.b32  	%r1762, %r1761, %r2;
	cvt.u64.u32 	%rd232, %r1762;
	add.s64 	%rd233, %rd232, %rd9;
	shr.u64 	%rd234, %rd233, 37;
	add.s64 	%rd235, %rd233, %rd234;
	shr.s64 	%rd236, %rd235, 27;
	setp.lt.s64 	%p291, %rd233, 0;
	and.b64  	%rd237, %rd235, -134217728;
	setp.ne.s64 	%p292, %rd237, %rd233;
	and.pred  	%p293, %p291, %p292;
	selp.u64 	%rd238, 1, 0, %p293;
	sub.s64 	%rd239, %rd238, %rd236;
	shl.b64 	%rd240, %rd239, 27;
	add.s64 	%rd241, %rd240, %rd233;
	shl.b64 	%rd242, %rd241, 2;
	add.s64 	%rd243, %rd4, %rd242;
	st.global.u32 	[%rd243], %r3523;
$L__BB0_157:                            // %L16742
                                        //   in Loop: Header=BB0_242 Depth=2
	add.s32 	%r3505, %r3505, 1;
	mov.u32 	%r3521, 0;
	mov.u32 	%r3523, %r3521;
$L__BB0_248:                            // %pass7171
                                        //   in Loop: Header=BB0_242 Depth=2
	ld.shared.u32 	%r1768, [%rd49];
	ld.shared.u32 	%r1775, [%rd50];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1785, %r1782}, {%r428, %r431}, {%r1768}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1794, %r1791}, {%r428, %r431}, {%r1775}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1778, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1780, %r1778, %r1782;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1783, %r462, %r1785, %r1780;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1787, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1789, %r1787, %r1791;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1792, %r462, %r1794, %r1789;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1796, %r465, %r1785;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1799, %r462, %r1782, %r1796;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1803, %r465, %r1794;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1806, %r462, %r1791, %r1803;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1829, %r1832}, {%r504, %r507}, {%r1783, %r1799}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1836, %r1840}, {%r504, %r507}, {%r1792, %r1806}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1828, %r1829, %r1829;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1831, %r1832, %r1832, %r1828;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1835, %r1836, %r1836, %r1831;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1839, %r1840, %r1840, %r1835;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3526, %r1580, %r1839, %r3523;
	// end inline asm
	add.s32 	%r3524, %r3521, 1;
	setp.eq.s32 	%p294, %r3524, 25;
	@%p294 bra 	$L__BB0_158;
	bra.uni 	$L__BB0_249;
$L__BB0_158:                            // %L17667
                                        //   in Loop: Header=BB0_242 Depth=2
	setp.lt.u32 	%p295, %r3, 16;
	@%p295 bra 	$L__BB0_264;
	bra.uni 	$L__BB0_159;
$L__BB0_264:                            // %pass7409
                                        //   in Loop: Header=BB0_242 Depth=2
	shl.b32 	%r1847, %r3505, 21;
	or.b32  	%r1848, %r1847, %r177;
	or.b32  	%r1849, %r1848, %r178;
	or.b32  	%r1850, %r1849, %r2;
	cvt.u64.u32 	%rd244, %r1850;
	add.s64 	%rd245, %rd244, %rd9;
	shr.u64 	%rd246, %rd245, 37;
	add.s64 	%rd247, %rd245, %rd246;
	shr.s64 	%rd248, %rd247, 27;
	setp.lt.s64 	%p296, %rd245, 0;
	and.b64  	%rd249, %rd247, -134217728;
	setp.ne.s64 	%p297, %rd249, %rd245;
	and.pred  	%p298, %p296, %p297;
	selp.u64 	%rd250, 1, 0, %p298;
	sub.s64 	%rd251, %rd250, %rd248;
	shl.b64 	%rd252, %rd251, 27;
	add.s64 	%rd253, %rd252, %rd245;
	shl.b64 	%rd254, %rd253, 2;
	add.s64 	%rd255, %rd4, %rd254;
	st.global.u32 	[%rd255], %r3526;
$L__BB0_159:                            // %L17884
                                        //   in Loop: Header=BB0_242 Depth=2
	add.s32 	%r3505, %r3505, 1;
	mov.u32 	%r3524, 0;
	mov.u32 	%r3526, %r3524;
$L__BB0_249:                            // %pass7654
                                        //   in Loop: Header=BB0_242 Depth=2
	ld.shared.u32 	%r1856, [%rd51];
	ld.shared.u32 	%r1863, [%rd52];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1873, %r1870}, {%r428, %r431}, {%r1856}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1882, %r1879}, {%r428, %r431}, {%r1863}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1866, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1868, %r1866, %r1870;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1871, %r462, %r1873, %r1868;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1875, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1877, %r1875, %r1879;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1880, %r462, %r1882, %r1877;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1884, %r465, %r1873;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1887, %r462, %r1870, %r1884;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1891, %r465, %r1882;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1894, %r462, %r1879, %r1891;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1917, %r1920}, {%r504, %r507}, {%r1871, %r1887}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1924, %r1928}, {%r504, %r507}, {%r1880, %r1894}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1916, %r1917, %r1917;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1919, %r1920, %r1920, %r1916;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1923, %r1924, %r1924, %r1919;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1927, %r1928, %r1928, %r1923;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3529, %r1580, %r1927, %r3526;
	// end inline asm
	add.s32 	%r3527, %r3524, 1;
	setp.eq.s32 	%p299, %r3527, 25;
	@%p299 bra 	$L__BB0_160;
	bra.uni 	$L__BB0_250;
$L__BB0_160:                            // %L18809
                                        //   in Loop: Header=BB0_242 Depth=2
	setp.lt.u32 	%p300, %r3, 16;
	@%p300 bra 	$L__BB0_265;
	bra.uni 	$L__BB0_161;
$L__BB0_265:                            // %pass7892
                                        //   in Loop: Header=BB0_242 Depth=2
	shl.b32 	%r1935, %r3505, 21;
	or.b32  	%r1936, %r1935, %r177;
	or.b32  	%r1937, %r1936, %r178;
	or.b32  	%r1938, %r1937, %r2;
	cvt.u64.u32 	%rd256, %r1938;
	add.s64 	%rd257, %rd256, %rd9;
	shr.u64 	%rd258, %rd257, 37;
	add.s64 	%rd259, %rd257, %rd258;
	shr.s64 	%rd260, %rd259, 27;
	setp.lt.s64 	%p301, %rd257, 0;
	and.b64  	%rd261, %rd259, -134217728;
	setp.ne.s64 	%p302, %rd261, %rd257;
	and.pred  	%p303, %p301, %p302;
	selp.u64 	%rd262, 1, 0, %p303;
	sub.s64 	%rd263, %rd262, %rd260;
	shl.b64 	%rd264, %rd263, 27;
	add.s64 	%rd265, %rd264, %rd257;
	shl.b64 	%rd266, %rd265, 2;
	add.s64 	%rd267, %rd4, %rd266;
	st.global.u32 	[%rd267], %r3529;
$L__BB0_161:                            // %L19026
                                        //   in Loop: Header=BB0_242 Depth=2
	add.s32 	%r3505, %r3505, 1;
	mov.u32 	%r3527, 0;
	mov.u32 	%r3529, %r3527;
$L__BB0_250:                            // %pass8137
                                        //   in Loop: Header=BB0_242 Depth=2
	ld.shared.u32 	%r1944, [%rd53];
	ld.shared.u32 	%r1951, [%rd54];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1961, %r1958}, {%r428, %r431}, {%r1944}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1970, %r1967}, {%r428, %r431}, {%r1951}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1954, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1956, %r1954, %r1958;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1959, %r462, %r1961, %r1956;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1963, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1965, %r1963, %r1967;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1968, %r462, %r1970, %r1965;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1972, %r465, %r1961;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1975, %r462, %r1958, %r1972;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1979, %r465, %r1970;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1982, %r462, %r1967, %r1979;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2005, %r2008}, {%r504, %r507}, {%r1959, %r1975}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2012, %r2016}, {%r504, %r507}, {%r1968, %r1982}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2004, %r2005, %r2005;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2007, %r2008, %r2008, %r2004;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2011, %r2012, %r2012, %r2007;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2015, %r2016, %r2016, %r2011;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3532, %r1580, %r2015, %r3529;
	// end inline asm
	add.s32 	%r3530, %r3527, 1;
	setp.eq.s32 	%p304, %r3530, 25;
	@%p304 bra 	$L__BB0_162;
	bra.uni 	$L__BB0_251;
$L__BB0_162:                            // %L19951
                                        //   in Loop: Header=BB0_242 Depth=2
	setp.lt.u32 	%p305, %r3, 16;
	@%p305 bra 	$L__BB0_266;
	bra.uni 	$L__BB0_163;
$L__BB0_266:                            // %pass8375
                                        //   in Loop: Header=BB0_242 Depth=2
	shl.b32 	%r2023, %r3505, 21;
	or.b32  	%r2024, %r2023, %r177;
	or.b32  	%r2025, %r2024, %r178;
	or.b32  	%r2026, %r2025, %r2;
	cvt.u64.u32 	%rd268, %r2026;
	add.s64 	%rd269, %rd268, %rd9;
	shr.u64 	%rd270, %rd269, 37;
	add.s64 	%rd271, %rd269, %rd270;
	shr.s64 	%rd272, %rd271, 27;
	setp.lt.s64 	%p306, %rd269, 0;
	and.b64  	%rd273, %rd271, -134217728;
	setp.ne.s64 	%p307, %rd273, %rd269;
	and.pred  	%p308, %p306, %p307;
	selp.u64 	%rd274, 1, 0, %p308;
	sub.s64 	%rd275, %rd274, %rd272;
	shl.b64 	%rd276, %rd275, 27;
	add.s64 	%rd277, %rd276, %rd269;
	shl.b64 	%rd278, %rd277, 2;
	add.s64 	%rd279, %rd4, %rd278;
	st.global.u32 	[%rd279], %r3532;
$L__BB0_163:                            // %L20168
                                        //   in Loop: Header=BB0_242 Depth=2
	add.s32 	%r3505, %r3505, 1;
	mov.u32 	%r3530, 0;
	mov.u32 	%r3532, %r3530;
$L__BB0_251:                            // %pass8620
                                        //   in Loop: Header=BB0_242 Depth=2
	ld.shared.u32 	%r2032, [%rd55];
	ld.shared.u32 	%r2039, [%rd56];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2049, %r2046}, {%r428, %r431}, {%r2032}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2058, %r2055}, {%r428, %r431}, {%r2039}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2042, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2044, %r2042, %r2046;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2047, %r462, %r2049, %r2044;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2051, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2053, %r2051, %r2055;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2056, %r462, %r2058, %r2053;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2060, %r465, %r2049;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2063, %r462, %r2046, %r2060;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2067, %r465, %r2058;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2070, %r462, %r2055, %r2067;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2093, %r2096}, {%r504, %r507}, {%r2047, %r2063}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2100, %r2104}, {%r504, %r507}, {%r2056, %r2070}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2092, %r2093, %r2093;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2095, %r2096, %r2096, %r2092;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2099, %r2100, %r2100, %r2095;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2103, %r2104, %r2104, %r2099;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3535, %r1580, %r2103, %r3532;
	// end inline asm
	add.s32 	%r3533, %r3530, 1;
	setp.eq.s32 	%p309, %r3533, 25;
	@%p309 bra 	$L__BB0_164;
	bra.uni 	$L__BB0_252;
$L__BB0_164:                            // %L21093
                                        //   in Loop: Header=BB0_242 Depth=2
	setp.lt.u32 	%p310, %r3, 16;
	@%p310 bra 	$L__BB0_267;
	bra.uni 	$L__BB0_165;
$L__BB0_267:                            // %pass8858
                                        //   in Loop: Header=BB0_242 Depth=2
	shl.b32 	%r2111, %r3505, 21;
	or.b32  	%r2112, %r2111, %r177;
	or.b32  	%r2113, %r2112, %r178;
	or.b32  	%r2114, %r2113, %r2;
	cvt.u64.u32 	%rd280, %r2114;
	add.s64 	%rd281, %rd280, %rd9;
	shr.u64 	%rd282, %rd281, 37;
	add.s64 	%rd283, %rd281, %rd282;
	shr.s64 	%rd284, %rd283, 27;
	setp.lt.s64 	%p311, %rd281, 0;
	and.b64  	%rd285, %rd283, -134217728;
	setp.ne.s64 	%p312, %rd285, %rd281;
	and.pred  	%p313, %p311, %p312;
	selp.u64 	%rd286, 1, 0, %p313;
	sub.s64 	%rd287, %rd286, %rd284;
	shl.b64 	%rd288, %rd287, 27;
	add.s64 	%rd289, %rd288, %rd281;
	shl.b64 	%rd290, %rd289, 2;
	add.s64 	%rd291, %rd4, %rd290;
	st.global.u32 	[%rd291], %r3535;
$L__BB0_165:                            // %L21310
                                        //   in Loop: Header=BB0_242 Depth=2
	add.s32 	%r3505, %r3505, 1;
	mov.u32 	%r3533, 0;
	mov.u32 	%r3535, %r3533;
$L__BB0_252:                            // %pass9103
                                        //   in Loop: Header=BB0_242 Depth=2
	ld.shared.u32 	%r2120, [%rd57];
	ld.shared.u32 	%r2127, [%rd58];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2137, %r2134}, {%r428, %r431}, {%r2120}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2146, %r2143}, {%r428, %r431}, {%r2127}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2130, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2132, %r2130, %r2134;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2135, %r462, %r2137, %r2132;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2139, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2141, %r2139, %r2143;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2144, %r462, %r2146, %r2141;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2148, %r465, %r2137;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2151, %r462, %r2134, %r2148;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2155, %r465, %r2146;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2158, %r462, %r2143, %r2155;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2181, %r2184}, {%r504, %r507}, {%r2135, %r2151}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2188, %r2192}, {%r504, %r507}, {%r2144, %r2158}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2180, %r2181, %r2181;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2183, %r2184, %r2184, %r2180;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2187, %r2188, %r2188, %r2183;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2191, %r2192, %r2192, %r2187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3506, %r1580, %r2191, %r3535;
	// end inline asm
	add.s32 	%r3504, %r3533, 1;
	setp.eq.s32 	%p314, %r3504, 25;
	@%p314 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_168;
$L__BB0_166:                            // %L22235
                                        //   in Loop: Header=BB0_242 Depth=2
	setp.lt.u32 	%p315, %r3, 16;
	@%p315 bra 	$L__BB0_253;
	bra.uni 	$L__BB0_167;
$L__BB0_253:                            // %pass9341
                                        //   in Loop: Header=BB0_242 Depth=2
	shl.b32 	%r2199, %r3505, 21;
	or.b32  	%r2200, %r2199, %r177;
	or.b32  	%r2201, %r2200, %r178;
	or.b32  	%r2202, %r2201, %r2;
	cvt.u64.u32 	%rd292, %r2202;
	add.s64 	%rd293, %rd292, %rd9;
	shr.u64 	%rd294, %rd293, 37;
	add.s64 	%rd295, %rd293, %rd294;
	shr.s64 	%rd296, %rd295, 27;
	setp.lt.s64 	%p316, %rd293, 0;
	and.b64  	%rd297, %rd295, -134217728;
	setp.ne.s64 	%p317, %rd297, %rd293;
	and.pred  	%p318, %p316, %p317;
	selp.u64 	%rd298, 1, 0, %p318;
	sub.s64 	%rd299, %rd298, %rd296;
	shl.b64 	%rd300, %rd299, 27;
	add.s64 	%rd301, %rd300, %rd293;
	shl.b64 	%rd302, %rd301, 2;
	add.s64 	%rd303, %rd4, %rd302;
	st.global.u32 	[%rd303], %r3506;
	bra.uni 	$L__BB0_167;
$L__BB0_169:                            // %L22474.preheader
                                        //   in Loop: Header=BB0_224 Depth=1
	mov.u32 	%r3503, 16;
	bra.uni 	$L__BB0_170;
$L__BB0_193:                            // %L32540
                                        //   in Loop: Header=BB0_170 Depth=2
	add.s32 	%r3505, %r3505, 1;
	mov.u32 	%r3504, %r1219;
	mov.u32 	%r3506, %r1219;
$L__BB0_194:                            // %L32541
                                        //   in Loop: Header=BB0_170 Depth=2
	bar.sync 	0;
	add.s32 	%r3503, %r3503, -8;
	setp.ne.s32 	%p364, %r3503, -16;
	@%p364 bra 	$L__BB0_170;
	bra.uni 	$L__BB0_195;
$L__BB0_170:                            // %L22474
                                        //   Parent Loop BB0_224 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p320, %r3503, 16;
	selp.b32 	%r2816, %r212, 0, %p320;
	setp.eq.s32 	%p321, %r3503, 8;
	selp.b32 	%r2817, %r216, %r2816, %p321;
	setp.eq.s32 	%p322, %r3503, 0;
	selp.b32 	%r2818, %r220, %r2817, %p322;
	setp.eq.s32 	%p323, %r3503, -8;
	selp.b32 	%r2819, %r224, %r2818, %p323;
	selp.b32 	%r2820, %r213, 0, %p320;
	selp.b32 	%r2821, %r217, %r2820, %p321;
	selp.b32 	%r2822, %r221, %r2821, %p322;
	selp.b32 	%r2823, %r225, %r2822, %p323;
	selp.b32 	%r2824, %r214, 0, %p320;
	selp.b32 	%r2825, %r218, %r2824, %p321;
	selp.b32 	%r2826, %r222, %r2825, %p322;
	selp.b32 	%r2827, %r226, %r2826, %p323;
	selp.b32 	%r2828, %r215, 0, %p320;
	selp.b32 	%r2829, %r219, %r2828, %p321;
	selp.b32 	%r2830, %r223, %r2829, %p322;
	selp.b32 	%r2831, %r227, %r2830, %p323;
	// begin inline asm
	mov.b32 %r2232, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2243, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2832, %r2819, 8;
	xor.b32  	%r2242, %r2832, 8947848;
	// begin inline asm
	lop3.b32 %r2229, %r1097, %r2242, %r2232, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2233, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2234, %r2232, %r2233;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2237, %r2229, %r2234;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2240, %r1108, %r2242, %r2243, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2244, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2245, %r2243, %r2244;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2248, %r2240, %r2245;
	// end inline asm
	// begin inline asm
	mov.b32 %r2278, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2289, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2833, %r2823, 8;
	xor.b32  	%r2288, %r2833, 8947848;
	// begin inline asm
	lop3.b32 %r2275, %r1097, %r2288, %r2278, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2279, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2280, %r2278, %r2279;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2283, %r2275, %r2280;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2286, %r1108, %r2288, %r2289, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2290, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2291, %r2289, %r2290;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2294, %r2286, %r2291;
	// end inline asm
	// begin inline asm
	mov.b32 %r2324, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2335, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2834, %r2827, 8;
	xor.b32  	%r2334, %r2834, 8947848;
	// begin inline asm
	lop3.b32 %r2321, %r1097, %r2334, %r2324, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2325, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2326, %r2324, %r2325;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2329, %r2321, %r2326;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2332, %r1108, %r2334, %r2335, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2336, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2337, %r2335, %r2336;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2340, %r2332, %r2337;
	// end inline asm
	// begin inline asm
	mov.b32 %r2370, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2381, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2835, %r2831, 8;
	xor.b32  	%r2380, %r2835, 8947848;
	// begin inline asm
	lop3.b32 %r2367, %r1097, %r2380, %r2370, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2371, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2372, %r2370, %r2371;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2375, %r2367, %r2372;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2378, %r1108, %r2380, %r2381, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2382, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2383, %r2381, %r2382;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2386, %r2378, %r2383;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r170;
    mov.b32 {%r2re, %r2im}, %r2237;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2389, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r2248;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2392, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r170;
    mov.b32 {%r2re, %r2im}, %r2283;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2395, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r2294;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2398, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r170;
    mov.b32 {%r2re, %r2im}, %r2329;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2401, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r2340;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2404, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r170;
    mov.b32 {%r2re, %r2im}, %r2375;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2407, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r2386;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2410, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2476, %r2473}, {%r331, %r334}, {%r2389}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2485, %r2482}, {%r331, %r334}, {%r2392}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2494, %r2491}, {%r331, %r334}, {%r2395}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2503, %r2500}, {%r331, %r334}, {%r2398}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2512, %r2509}, {%r331, %r334}, {%r2401}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2521, %r2518}, {%r331, %r334}, {%r2404}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2530, %r2527}, {%r331, %r334}, {%r2407}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2539, %r2536}, {%r331, %r334}, {%r2410}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2469, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2471, %r2469, %r2473;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2474, %r369, %r2476, %r2471;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2478, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2480, %r2478, %r2482;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2483, %r369, %r2485, %r2480;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2487, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2489, %r2487, %r2491;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2492, %r369, %r2494, %r2489;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2496, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2498, %r2496, %r2500;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2501, %r369, %r2503, %r2498;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2505, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2507, %r2505, %r2509;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2510, %r369, %r2512, %r2507;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2514, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2516, %r2514, %r2518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2519, %r369, %r2521, %r2516;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2523, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2525, %r2523, %r2527;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2528, %r369, %r2530, %r2525;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2532, %r372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2534, %r2532, %r2536;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2537, %r369, %r2539, %r2534;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2541, %r372, %r2476;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2544, %r369, %r2473, %r2541;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2548, %r372, %r2485;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2551, %r369, %r2482, %r2548;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2555, %r372, %r2494;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2558, %r369, %r2491, %r2555;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2562, %r372, %r2503;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2565, %r369, %r2500, %r2562;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2569, %r372, %r2512;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2572, %r369, %r2509, %r2569;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2576, %r372, %r2521;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2579, %r369, %r2518, %r2576;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2583, %r372, %r2530;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2586, %r369, %r2527, %r2583;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2590, %r372, %r2539;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2593, %r369, %r2536, %r2590;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2597, %r2598}, {%r416, %r419}, {%r2474, %r2544}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2606, %r2607}, {%r416, %r419}, {%r2483, %r2551}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2615, %r2616}, {%r416, %r419}, {%r2492, %r2558}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2624, %r2625}, {%r416, %r419}, {%r2501, %r2565}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2633, %r2634}, {%r416, %r419}, {%r2510, %r2572}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2642, %r2643}, {%r416, %r419}, {%r2519, %r2579}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2651, %r2652}, {%r416, %r419}, {%r2528, %r2586}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2660, %r2661}, {%r416, %r419}, {%r2537, %r2593}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	bar.sync 	0;
	ld.shared.u32 	%r2737, [%rd7];
	ld.shared.u32 	%r2744, [%rd8+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2754, %r2751}, {%r428, %r431}, {%r2737}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2763, %r2760}, {%r428, %r431}, {%r2744}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2747, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2749, %r2747, %r2751;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2752, %r462, %r2754, %r2749;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2756, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2758, %r2756, %r2760;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2761, %r462, %r2763, %r2758;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2765, %r465, %r2754;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2768, %r462, %r2751, %r2765;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2772, %r465, %r2763;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2775, %r462, %r2760, %r2772;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2798, %r2801}, {%r504, %r507}, {%r2752, %r2768}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2805, %r2809}, {%r504, %r507}, {%r2761, %r2775}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2797, %r2798, %r2798;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2800, %r2801, %r2801, %r2797;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2804, %r2805, %r2805, %r2800;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2808, %r2809, %r2809, %r2804;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3538, %r1580, %r2808, %r3506;
	// end inline asm
	add.s32 	%r3536, %r3504, 1;
	setp.ne.s32 	%p324, %r3536, 25;
	@%p324 bra 	$L__BB0_173;
// %bb.171:                             // %L24329
                                        //   in Loop: Header=BB0_170 Depth=2
	setp.lt.u32 	%p325, %r3, 16;
	@%p325 bra 	$L__BB0_254;
	bra.uni 	$L__BB0_172;
$L__BB0_254:                            // %pass10009
                                        //   in Loop: Header=BB0_170 Depth=2
	shl.b32 	%r2836, %r3505, 21;
	or.b32  	%r2837, %r2836, %r177;
	or.b32  	%r2838, %r2837, %r178;
	or.b32  	%r2839, %r2838, %r2;
	cvt.u64.u32 	%rd304, %r2839;
	add.s64 	%rd305, %rd304, %rd9;
	shr.u64 	%rd306, %rd305, 37;
	add.s64 	%rd307, %rd305, %rd306;
	shr.s64 	%rd308, %rd307, 27;
	setp.lt.s64 	%p326, %rd305, 0;
	and.b64  	%rd309, %rd307, -134217728;
	setp.ne.s64 	%p327, %rd309, %rd305;
	and.pred  	%p328, %p326, %p327;
	selp.u64 	%rd310, 1, 0, %p328;
	sub.s64 	%rd311, %rd310, %rd308;
	shl.b64 	%rd312, %rd311, 27;
	add.s64 	%rd313, %rd312, %rd305;
	shl.b64 	%rd314, %rd313, 2;
	add.s64 	%rd315, %rd4, %rd314;
	st.global.u32 	[%rd315], %r3538;
$L__BB0_172:                            // %L24546
                                        //   in Loop: Header=BB0_170 Depth=2
	add.s32 	%r3505, %r3505, 1;
	mov.u32 	%r3536, 0;
	mov.u32 	%r3538, %r3536;
$L__BB0_173:                            // %pass10254
                                        //   in Loop: Header=BB0_170 Depth=2
	ld.shared.u32 	%r2845, [%rd45];
	ld.shared.u32 	%r2852, [%rd46];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2862, %r2859}, {%r428, %r431}, {%r2845}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2871, %r2868}, {%r428, %r431}, {%r2852}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2855, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2857, %r2855, %r2859;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2860, %r462, %r2862, %r2857;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2864, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2866, %r2864, %r2868;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2869, %r462, %r2871, %r2866;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2873, %r465, %r2862;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2876, %r462, %r2859, %r2873;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2880, %r465, %r2871;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2883, %r462, %r2868, %r2880;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2906, %r2909}, {%r504, %r507}, {%r2860, %r2876}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2913, %r2917}, {%r504, %r507}, {%r2869, %r2883}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2905, %r2906, %r2906;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2908, %r2909, %r2909, %r2905;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2912, %r2913, %r2913, %r2908;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2916, %r2917, %r2917, %r2912;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3541, %r1580, %r2916, %r3538;
	// end inline asm
	add.s32 	%r3539, %r3536, 1;
	setp.eq.s32 	%p329, %r3539, 25;
	@%p329 bra 	$L__BB0_174;
	bra.uni 	$L__BB0_176;
$L__BB0_174:                            // %L25471
                                        //   in Loop: Header=BB0_170 Depth=2
	setp.lt.u32 	%p330, %r3, 16;
	@%p330 bra 	$L__BB0_255;
	bra.uni 	$L__BB0_175;
$L__BB0_255:                            // %pass10492
                                        //   in Loop: Header=BB0_170 Depth=2
	shl.b32 	%r2924, %r3505, 21;
	or.b32  	%r2925, %r2924, %r177;
	or.b32  	%r2926, %r2925, %r178;
	or.b32  	%r2927, %r2926, %r2;
	cvt.u64.u32 	%rd316, %r2927;
	add.s64 	%rd317, %rd316, %rd9;
	shr.u64 	%rd318, %rd317, 37;
	add.s64 	%rd319, %rd317, %rd318;
	shr.s64 	%rd320, %rd319, 27;
	setp.lt.s64 	%p331, %rd317, 0;
	and.b64  	%rd321, %rd319, -134217728;
	setp.ne.s64 	%p332, %rd321, %rd317;
	and.pred  	%p333, %p331, %p332;
	selp.u64 	%rd322, 1, 0, %p333;
	sub.s64 	%rd323, %rd322, %rd320;
	shl.b64 	%rd324, %rd323, 27;
	add.s64 	%rd325, %rd324, %rd317;
	shl.b64 	%rd326, %rd325, 2;
	add.s64 	%rd327, %rd4, %rd326;
	st.global.u32 	[%rd327], %r3541;
$L__BB0_175:                            // %L25688
                                        //   in Loop: Header=BB0_170 Depth=2
	add.s32 	%r3505, %r3505, 1;
	mov.u32 	%r3539, 0;
	mov.u32 	%r3541, %r3539;
$L__BB0_176:                            // %pass10737
                                        //   in Loop: Header=BB0_170 Depth=2
	ld.shared.u32 	%r2933, [%rd47];
	ld.shared.u32 	%r2940, [%rd48];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2950, %r2947}, {%r428, %r431}, {%r2933}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2959, %r2956}, {%r428, %r431}, {%r2940}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2943, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2945, %r2943, %r2947;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2948, %r462, %r2950, %r2945;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2952, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2954, %r2952, %r2956;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2957, %r462, %r2959, %r2954;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2961, %r465, %r2950;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2964, %r462, %r2947, %r2961;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2968, %r465, %r2959;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2971, %r462, %r2956, %r2968;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2994, %r2997}, {%r504, %r507}, {%r2948, %r2964}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3001, %r3005}, {%r504, %r507}, {%r2957, %r2971}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2993, %r2994, %r2994;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2996, %r2997, %r2997, %r2993;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3000, %r3001, %r3001, %r2996;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3004, %r3005, %r3005, %r3000;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3544, %r1580, %r3004, %r3541;
	// end inline asm
	add.s32 	%r3542, %r3539, 1;
	setp.eq.s32 	%p334, %r3542, 25;
	@%p334 bra 	$L__BB0_177;
	bra.uni 	$L__BB0_179;
$L__BB0_177:                            // %L26613
                                        //   in Loop: Header=BB0_170 Depth=2
	setp.lt.u32 	%p335, %r3, 16;
	@%p335 bra 	$L__BB0_256;
	bra.uni 	$L__BB0_178;
$L__BB0_256:                            // %pass10975
                                        //   in Loop: Header=BB0_170 Depth=2
	shl.b32 	%r3012, %r3505, 21;
	or.b32  	%r3013, %r3012, %r177;
	or.b32  	%r3014, %r3013, %r178;
	or.b32  	%r3015, %r3014, %r2;
	cvt.u64.u32 	%rd328, %r3015;
	add.s64 	%rd329, %rd328, %rd9;
	shr.u64 	%rd330, %rd329, 37;
	add.s64 	%rd331, %rd329, %rd330;
	shr.s64 	%rd332, %rd331, 27;
	setp.lt.s64 	%p336, %rd329, 0;
	and.b64  	%rd333, %rd331, -134217728;
	setp.ne.s64 	%p337, %rd333, %rd329;
	and.pred  	%p338, %p336, %p337;
	selp.u64 	%rd334, 1, 0, %p338;
	sub.s64 	%rd335, %rd334, %rd332;
	shl.b64 	%rd336, %rd335, 27;
	add.s64 	%rd337, %rd336, %rd329;
	shl.b64 	%rd338, %rd337, 2;
	add.s64 	%rd339, %rd4, %rd338;
	st.global.u32 	[%rd339], %r3544;
$L__BB0_178:                            // %L26830
                                        //   in Loop: Header=BB0_170 Depth=2
	add.s32 	%r3505, %r3505, 1;
	mov.u32 	%r3542, 0;
	mov.u32 	%r3544, %r3542;
$L__BB0_179:                            // %pass11220
                                        //   in Loop: Header=BB0_170 Depth=2
	ld.shared.u32 	%r3021, [%rd49];
	ld.shared.u32 	%r3028, [%rd50];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3038, %r3035}, {%r428, %r431}, {%r3021}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3047, %r3044}, {%r428, %r431}, {%r3028}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3031, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3033, %r3031, %r3035;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3036, %r462, %r3038, %r3033;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3040, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3042, %r3040, %r3044;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3045, %r462, %r3047, %r3042;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3049, %r465, %r3038;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3052, %r462, %r3035, %r3049;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3056, %r465, %r3047;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3059, %r462, %r3044, %r3056;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3082, %r3085}, {%r504, %r507}, {%r3036, %r3052}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3089, %r3093}, {%r504, %r507}, {%r3045, %r3059}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3081, %r3082, %r3082;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3084, %r3085, %r3085, %r3081;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3088, %r3089, %r3089, %r3084;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3092, %r3093, %r3093, %r3088;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3547, %r1580, %r3092, %r3544;
	// end inline asm
	add.s32 	%r3545, %r3542, 1;
	setp.eq.s32 	%p339, %r3545, 25;
	@%p339 bra 	$L__BB0_180;
	bra.uni 	$L__BB0_182;
$L__BB0_180:                            // %L27755
                                        //   in Loop: Header=BB0_170 Depth=2
	setp.lt.u32 	%p340, %r3, 16;
	@%p340 bra 	$L__BB0_257;
	bra.uni 	$L__BB0_181;
$L__BB0_257:                            // %pass11458
                                        //   in Loop: Header=BB0_170 Depth=2
	shl.b32 	%r3100, %r3505, 21;
	or.b32  	%r3101, %r3100, %r177;
	or.b32  	%r3102, %r3101, %r178;
	or.b32  	%r3103, %r3102, %r2;
	cvt.u64.u32 	%rd340, %r3103;
	add.s64 	%rd341, %rd340, %rd9;
	shr.u64 	%rd342, %rd341, 37;
	add.s64 	%rd343, %rd341, %rd342;
	shr.s64 	%rd344, %rd343, 27;
	setp.lt.s64 	%p341, %rd341, 0;
	and.b64  	%rd345, %rd343, -134217728;
	setp.ne.s64 	%p342, %rd345, %rd341;
	and.pred  	%p343, %p341, %p342;
	selp.u64 	%rd346, 1, 0, %p343;
	sub.s64 	%rd347, %rd346, %rd344;
	shl.b64 	%rd348, %rd347, 27;
	add.s64 	%rd349, %rd348, %rd341;
	shl.b64 	%rd350, %rd349, 2;
	add.s64 	%rd351, %rd4, %rd350;
	st.global.u32 	[%rd351], %r3547;
$L__BB0_181:                            // %L27972
                                        //   in Loop: Header=BB0_170 Depth=2
	add.s32 	%r3505, %r3505, 1;
	mov.u32 	%r3545, 0;
	mov.u32 	%r3547, %r3545;
$L__BB0_182:                            // %pass11703
                                        //   in Loop: Header=BB0_170 Depth=2
	ld.shared.u32 	%r3109, [%rd51];
	ld.shared.u32 	%r3116, [%rd52];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3126, %r3123}, {%r428, %r431}, {%r3109}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3135, %r3132}, {%r428, %r431}, {%r3116}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3119, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3121, %r3119, %r3123;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3124, %r462, %r3126, %r3121;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3128, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3130, %r3128, %r3132;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3133, %r462, %r3135, %r3130;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3137, %r465, %r3126;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3140, %r462, %r3123, %r3137;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3144, %r465, %r3135;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3147, %r462, %r3132, %r3144;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3170, %r3173}, {%r504, %r507}, {%r3124, %r3140}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3177, %r3181}, {%r504, %r507}, {%r3133, %r3147}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3169, %r3170, %r3170;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3172, %r3173, %r3173, %r3169;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3176, %r3177, %r3177, %r3172;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3180, %r3181, %r3181, %r3176;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3550, %r1580, %r3180, %r3547;
	// end inline asm
	add.s32 	%r3548, %r3545, 1;
	setp.eq.s32 	%p344, %r3548, 25;
	@%p344 bra 	$L__BB0_183;
	bra.uni 	$L__BB0_185;
$L__BB0_183:                            // %L28897
                                        //   in Loop: Header=BB0_170 Depth=2
	setp.lt.u32 	%p345, %r3, 16;
	@%p345 bra 	$L__BB0_258;
	bra.uni 	$L__BB0_184;
$L__BB0_258:                            // %pass11941
                                        //   in Loop: Header=BB0_170 Depth=2
	shl.b32 	%r3188, %r3505, 21;
	or.b32  	%r3189, %r3188, %r177;
	or.b32  	%r3190, %r3189, %r178;
	or.b32  	%r3191, %r3190, %r2;
	cvt.u64.u32 	%rd352, %r3191;
	add.s64 	%rd353, %rd352, %rd9;
	shr.u64 	%rd354, %rd353, 37;
	add.s64 	%rd355, %rd353, %rd354;
	shr.s64 	%rd356, %rd355, 27;
	setp.lt.s64 	%p346, %rd353, 0;
	and.b64  	%rd357, %rd355, -134217728;
	setp.ne.s64 	%p347, %rd357, %rd353;
	and.pred  	%p348, %p346, %p347;
	selp.u64 	%rd358, 1, 0, %p348;
	sub.s64 	%rd359, %rd358, %rd356;
	shl.b64 	%rd360, %rd359, 27;
	add.s64 	%rd361, %rd360, %rd353;
	shl.b64 	%rd362, %rd361, 2;
	add.s64 	%rd363, %rd4, %rd362;
	st.global.u32 	[%rd363], %r3550;
$L__BB0_184:                            // %L29114
                                        //   in Loop: Header=BB0_170 Depth=2
	add.s32 	%r3505, %r3505, 1;
	mov.u32 	%r3548, 0;
	mov.u32 	%r3550, %r3548;
$L__BB0_185:                            // %pass12186
                                        //   in Loop: Header=BB0_170 Depth=2
	ld.shared.u32 	%r3197, [%rd53];
	ld.shared.u32 	%r3204, [%rd54];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3214, %r3211}, {%r428, %r431}, {%r3197}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3223, %r3220}, {%r428, %r431}, {%r3204}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3207, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3209, %r3207, %r3211;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3212, %r462, %r3214, %r3209;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3216, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3218, %r3216, %r3220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3221, %r462, %r3223, %r3218;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3225, %r465, %r3214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3228, %r462, %r3211, %r3225;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3232, %r465, %r3223;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3235, %r462, %r3220, %r3232;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3258, %r3261}, {%r504, %r507}, {%r3212, %r3228}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3265, %r3269}, {%r504, %r507}, {%r3221, %r3235}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3257, %r3258, %r3258;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3260, %r3261, %r3261, %r3257;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3264, %r3265, %r3265, %r3260;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3268, %r3269, %r3269, %r3264;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3553, %r1580, %r3268, %r3550;
	// end inline asm
	add.s32 	%r3551, %r3548, 1;
	setp.eq.s32 	%p349, %r3551, 25;
	@%p349 bra 	$L__BB0_186;
	bra.uni 	$L__BB0_188;
$L__BB0_186:                            // %L30039
                                        //   in Loop: Header=BB0_170 Depth=2
	setp.lt.u32 	%p350, %r3, 16;
	@%p350 bra 	$L__BB0_259;
	bra.uni 	$L__BB0_187;
$L__BB0_259:                            // %pass12424
                                        //   in Loop: Header=BB0_170 Depth=2
	shl.b32 	%r3276, %r3505, 21;
	or.b32  	%r3277, %r3276, %r177;
	or.b32  	%r3278, %r3277, %r178;
	or.b32  	%r3279, %r3278, %r2;
	cvt.u64.u32 	%rd364, %r3279;
	add.s64 	%rd365, %rd364, %rd9;
	shr.u64 	%rd366, %rd365, 37;
	add.s64 	%rd367, %rd365, %rd366;
	shr.s64 	%rd368, %rd367, 27;
	setp.lt.s64 	%p351, %rd365, 0;
	and.b64  	%rd369, %rd367, -134217728;
	setp.ne.s64 	%p352, %rd369, %rd365;
	and.pred  	%p353, %p351, %p352;
	selp.u64 	%rd370, 1, 0, %p353;
	sub.s64 	%rd371, %rd370, %rd368;
	shl.b64 	%rd372, %rd371, 27;
	add.s64 	%rd373, %rd372, %rd365;
	shl.b64 	%rd374, %rd373, 2;
	add.s64 	%rd375, %rd4, %rd374;
	st.global.u32 	[%rd375], %r3553;
$L__BB0_187:                            // %L30256
                                        //   in Loop: Header=BB0_170 Depth=2
	add.s32 	%r3505, %r3505, 1;
	mov.u32 	%r3551, 0;
	mov.u32 	%r3553, %r3551;
$L__BB0_188:                            // %pass12669
                                        //   in Loop: Header=BB0_170 Depth=2
	ld.shared.u32 	%r3285, [%rd55];
	ld.shared.u32 	%r3292, [%rd56];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3302, %r3299}, {%r428, %r431}, {%r3285}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3311, %r3308}, {%r428, %r431}, {%r3292}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3295, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3297, %r3295, %r3299;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3300, %r462, %r3302, %r3297;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3304, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3306, %r3304, %r3308;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3309, %r462, %r3311, %r3306;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3313, %r465, %r3302;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3316, %r462, %r3299, %r3313;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3320, %r465, %r3311;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3323, %r462, %r3308, %r3320;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3346, %r3349}, {%r504, %r507}, {%r3300, %r3316}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3353, %r3357}, {%r504, %r507}, {%r3309, %r3323}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3345, %r3346, %r3346;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3348, %r3349, %r3349, %r3345;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3352, %r3353, %r3353, %r3348;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3356, %r3357, %r3357, %r3352;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3556, %r1580, %r3356, %r3553;
	// end inline asm
	add.s32 	%r3554, %r3551, 1;
	setp.eq.s32 	%p354, %r3554, 25;
	@%p354 bra 	$L__BB0_189;
	bra.uni 	$L__BB0_191;
$L__BB0_189:                            // %L31181
                                        //   in Loop: Header=BB0_170 Depth=2
	setp.lt.u32 	%p355, %r3, 16;
	@%p355 bra 	$L__BB0_260;
	bra.uni 	$L__BB0_190;
$L__BB0_260:                            // %pass12907
                                        //   in Loop: Header=BB0_170 Depth=2
	shl.b32 	%r3364, %r3505, 21;
	or.b32  	%r3365, %r3364, %r177;
	or.b32  	%r3366, %r3365, %r178;
	or.b32  	%r3367, %r3366, %r2;
	cvt.u64.u32 	%rd376, %r3367;
	add.s64 	%rd377, %rd376, %rd9;
	shr.u64 	%rd378, %rd377, 37;
	add.s64 	%rd379, %rd377, %rd378;
	shr.s64 	%rd380, %rd379, 27;
	setp.lt.s64 	%p356, %rd377, 0;
	and.b64  	%rd381, %rd379, -134217728;
	setp.ne.s64 	%p357, %rd381, %rd377;
	and.pred  	%p358, %p356, %p357;
	selp.u64 	%rd382, 1, 0, %p358;
	sub.s64 	%rd383, %rd382, %rd380;
	shl.b64 	%rd384, %rd383, 27;
	add.s64 	%rd385, %rd384, %rd377;
	shl.b64 	%rd386, %rd385, 2;
	add.s64 	%rd387, %rd4, %rd386;
	st.global.u32 	[%rd387], %r3556;
$L__BB0_190:                            // %L31398
                                        //   in Loop: Header=BB0_170 Depth=2
	add.s32 	%r3505, %r3505, 1;
	mov.u32 	%r3554, 0;
	mov.u32 	%r3556, %r3554;
$L__BB0_191:                            // %pass13152
                                        //   in Loop: Header=BB0_170 Depth=2
	ld.shared.u32 	%r3373, [%rd57];
	ld.shared.u32 	%r3380, [%rd58];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3390, %r3387}, {%r428, %r431}, {%r3373}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3399, %r3396}, {%r428, %r431}, {%r3380}, {%r1219, %r1219};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3383, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3385, %r3383, %r3387;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3388, %r462, %r3390, %r3385;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3392, %r465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3394, %r3392, %r3396;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3397, %r462, %r3399, %r3394;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3401, %r465, %r3390;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3404, %r462, %r3387, %r3401;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3408, %r465, %r3399;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3411, %r462, %r3396, %r3408;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3434, %r3437}, {%r504, %r507}, {%r3388, %r3404}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3441, %r3445}, {%r504, %r507}, {%r3397, %r3411}, {%r1219, %r1219}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3433, %r3434, %r3434;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3436, %r3437, %r3437, %r3433;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3440, %r3441, %r3441, %r3436;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3444, %r3445, %r3445, %r3440;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3506, %r1580, %r3444, %r3556;
	// end inline asm
	add.s32 	%r3504, %r3554, 1;
	setp.eq.s32 	%p359, %r3504, 25;
	@%p359 bra 	$L__BB0_192;
	bra.uni 	$L__BB0_194;
$L__BB0_192:                            // %L32323
                                        //   in Loop: Header=BB0_170 Depth=2
	setp.lt.u32 	%p360, %r3, 16;
	@%p360 bra 	$L__BB0_261;
	bra.uni 	$L__BB0_193;
$L__BB0_261:                            // %pass13390
                                        //   in Loop: Header=BB0_170 Depth=2
	shl.b32 	%r3452, %r3505, 21;
	or.b32  	%r3453, %r3452, %r177;
	or.b32  	%r3454, %r3453, %r178;
	or.b32  	%r3455, %r3454, %r2;
	cvt.u64.u32 	%rd388, %r3455;
	add.s64 	%rd389, %rd388, %rd9;
	shr.u64 	%rd390, %rd389, 37;
	add.s64 	%rd391, %rd389, %rd390;
	shr.s64 	%rd392, %rd391, 27;
	setp.lt.s64 	%p361, %rd389, 0;
	and.b64  	%rd393, %rd391, -134217728;
	setp.ne.s64 	%p362, %rd393, %rd389;
	and.pred  	%p363, %p361, %p362;
	selp.u64 	%rd394, 1, 0, %p363;
	sub.s64 	%rd395, %rd394, %rd392;
	shl.b64 	%rd396, %rd395, 27;
	add.s64 	%rd397, %rd396, %rd389;
	shl.b64 	%rd398, %rd397, 2;
	add.s64 	%rd399, %rd4, %rd398;
	st.global.u32 	[%rd399], %r3506;
	bra.uni 	$L__BB0_193;
$L__BB0_196:                            // %L32572
	mov.u32 	%r3457, 0;
	st.global.u32 	[%rd6], %r3457;
	ret;
$L__BB0_243:                            // %post_box_union
	mov.u64 	%rd206, exception2549;
	cvta.global.u64 	%rd207, %rd206;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd207;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_136:                            // %L6869
	mov.u32 	%r3473, 5;
	st.global.u32 	[%rd6], %r3473;
	mov.u64 	%rd430, exception2501;
	cvta.global.u64 	%rd431, %rd430;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd431;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_137:                            // %L7031
	mov.u32 	%r3472, 5;
	st.global.u32 	[%rd6], %r3472;
	mov.u64 	%rd428, exception2501;
	cvta.global.u64 	%rd429, %rd428;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd429;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_138:                            // %L7193
	mov.u32 	%r3471, 5;
	st.global.u32 	[%rd6], %r3471;
	mov.u64 	%rd426, exception2501;
	cvta.global.u64 	%rd427, %rd426;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd427;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_139:                            // %L7355
	mov.u32 	%r3470, 5;
	st.global.u32 	[%rd6], %r3470;
	mov.u64 	%rd424, exception2501;
	cvta.global.u64 	%rd425, %rd424;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd425;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_140:                            // %L7517
	mov.u32 	%r3469, 5;
	st.global.u32 	[%rd6], %r3469;
	mov.u64 	%rd422, exception2501;
	cvta.global.u64 	%rd423, %rd422;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd423;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_141:                            // %L7679
	mov.u32 	%r3468, 5;
	st.global.u32 	[%rd6], %r3468;
	mov.u64 	%rd420, exception2501;
	cvta.global.u64 	%rd421, %rd420;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd421;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_142:                            // %L7841
	mov.u32 	%r3467, 5;
	st.global.u32 	[%rd6], %r3467;
	mov.u64 	%rd418, exception2501;
	cvta.global.u64 	%rd419, %rd418;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd419;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_143:                            // %L8003
	mov.u32 	%r3466, 5;
	st.global.u32 	[%rd6], %r3466;
	mov.u64 	%rd416, exception2501;
	cvta.global.u64 	%rd417, %rd416;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd417;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_144:                            // %L8165
	mov.u32 	%r3465, 5;
	st.global.u32 	[%rd6], %r3465;
	mov.u64 	%rd414, exception2501;
	cvta.global.u64 	%rd415, %rd414;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd415;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L8327
	mov.u32 	%r3464, 5;
	st.global.u32 	[%rd6], %r3464;
	mov.u64 	%rd412, exception2501;
	cvta.global.u64 	%rd413, %rd412;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd413;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L8489
	mov.u32 	%r3463, 5;
	st.global.u32 	[%rd6], %r3463;
	mov.u64 	%rd410, exception2501;
	cvta.global.u64 	%rd411, %rd410;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd411;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L8651
	mov.u32 	%r3462, 5;
	st.global.u32 	[%rd6], %r3462;
	mov.u64 	%rd408, exception2501;
	cvta.global.u64 	%rd409, %rd408;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd409;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L8813
	mov.u32 	%r3461, 5;
	st.global.u32 	[%rd6], %r3461;
	mov.u64 	%rd406, exception2501;
	cvta.global.u64 	%rd407, %rd406;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd407;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L8975
	mov.u32 	%r3460, 5;
	st.global.u32 	[%rd6], %r3460;
	mov.u64 	%rd404, exception2501;
	cvta.global.u64 	%rd405, %rd404;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd405;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L9137
	mov.u32 	%r3459, 5;
	st.global.u32 	[%rd6], %r3459;
	mov.u64 	%rd402, exception2501;
	cvta.global.u64 	%rd403, %rd402;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd403;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_151:                            // %L9299
	mov.u32 	%r3458, 5;
	st.global.u32 	[%rd6], %r3458;
	mov.u64 	%rd400, exception2501;
	cvta.global.u64 	%rd401, %rd400;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd401;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L167
	mov.u32 	%r3475, 2;
	st.global.u32 	[%rd6], %r3475;
	mov.u64 	%rd434, exception2501;
	cvta.global.u64 	%rd435, %rd434;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd435;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_13:                             // %L311
	mov.u32 	%r3474, 3;
	st.global.u32 	[%rd6], %r3474;
	mov.u64 	%rd432, exception2501;
	cvta.global.u64 	%rd433, %rd432;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd433;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd65, exception1;
	cvta.global.u64 	%rd66, %rd65;
	{ // callseq 45, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd66;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 45
	{ // callseq 46, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 46
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_135:                            // %L1160
	add.u64 	%rd64, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r3, %r4};
	st.local.v2.u32 	[%rd5+8], {%r1, %r86};
	st.local.u32 	[%rd5+16], %r87;
	mov.u64 	%rd70, __unnamed_1;
	cvta.global.u64 	%rd71, %rd70;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd71;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd64;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r517, [retval0+0];
	} // callseq 47
	mov.u32 	%r519, 4;
	st.global.u32 	[%rd6], %r519;
	mov.u64 	%rd73, exception2501;
	cvta.global.u64 	%rd74, %rd73;
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd74;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 48
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r300;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 49
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
