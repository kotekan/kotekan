// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception4180[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception4228[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 512, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<325>;
	.reg .b16 	%rs<97>;
	.reg .b32 	%r<3488>;
	.reg .f32 	%f<752>;
	.reg .b64 	%rd<398>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r284, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd82, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r293, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r293, 34943;
	@%p2 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd83, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r285, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r4, %ctaid.x;
	shl.b32 	%r5, %r4, 9;
	or.b32  	%r294, %r2, %r3;
	or.b32  	%r295, %r294, %r5;
	mul.wide.u32 	%rd90, %r295, 4;
	add.s64 	%rd6, %rd83, %rd90;
	mov.u32 	%r296, 1;
	st.global.u32 	[%rd6], %r296;
	setp.gt.u32 	%p3, %r285, 1023;
	@%p3 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r286, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p4, %r286, %r285;
	setp.gt.s32 	%p5, %r286, 2047;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r287, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r286, %r285;
	and.b32  	%r297, %r6, 63;
	setp.ne.s32 	%p7, %r297, 0;
	setp.gt.u32 	%p8, %r287, 1023;
	or.pred  	%p9, %p7, %p8;
	@%p9 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r288, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p10, %r288, %r287;
	setp.lt.s32 	%p11, %r288, 2048;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r298, %r288, %r287;
	mul.hi.s32 	%r299, %r6, 715827883;
	shr.u32 	%r300, %r299, 31;
	add.s32 	%r301, %r299, %r300;
	setp.eq.s32 	%p13, %r298, %r301;
	@%p13 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L258
	ld.param.u32 	%r289, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p14, %r289, 0;
	@%p14 bra 	$L__BB0_13;
// %bb.9:                               // %L260
	ld.param.u32 	%r290, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p15, %r290, %r289;
	setp.gt.s32 	%p16, %r290, 64;
	or.pred  	%p17, %p15, %p16;
	@%p17 bra 	$L__BB0_13;
// %bb.10:                              // %L270
	ld.param.u32 	%r291, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r7, %r290, %r289;
	and.b32  	%r302, %r7, 63;
	setp.ne.s32 	%p18, %r302, 0;
	setp.lt.s32 	%p19, %r291, 0;
	or.pred  	%p20, %p18, %p19;
	@%p20 bra 	$L__BB0_13;
// %bb.11:                              // %L276
	ld.param.u32 	%r292, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p21, %r292, %r291;
	setp.gt.s32 	%p22, %r292, 2048;
	or.pred  	%p23, %p21, %p22;
	@%p23 bra 	$L__BB0_13;
// %bb.12:                              // %L286
	sub.s32 	%r303, %r292, %r291;
	and.b32  	%r304, %r303, 63;
	setp.eq.s32 	%p24, %r304, 0;
	setp.eq.s32 	%p25, %r303, %r7;
	and.pred  	%p26, %p24, %p25;
	@%p26 bra 	$L__BB0_165;
	bra.uni 	$L__BB0_13;
$L__BB0_165:                            // %pass162
	and.b32  	%r146, %r3, 3;
	shr.u32 	%r147, %r3, 2;
	mul.lo.s32 	%r305, %r146, %r147;
	and.b32  	%r306, %r305, 7;
	cvt.rn.f32.s32 	%f185, %r306;
	mov.f32 	%f186, 0f40800000;
	div.approx.f32 	%f151, %f185, %f186;
	abs.f32 	%f750, %f151;
	setp.lt.f32 	%p27, %f750, 0f40000000;
	mov.f32 	%f703, 0f40000000;
	setp.gtu.f32 	%p320, %f750, 0f4B800000;
	mov.f32 	%f746, %f750;
	@%p27 bra 	$L__BB0_177;
// %bb.166:
	@%p320 bra 	$L__BB0_173;
	bra.uni 	$L__BB0_167;
$L__BB0_173:
	mov.b32 	%r149, %f750;
	and.b32  	%r307, %r149, 8388607;
	or.b32  	%r3465, %r307, 1065353216;
	mov.b32 	%f745, %r3465;
	add.s32 	%r308, %r149, -1073741824;
	and.b32  	%r3466, %r308, -8388608;
	setp.eq.s32 	%p34, %r3466, 0;
	@%p34 bra 	$L__BB0_176;
// %bb.174:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f196, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f195,%f196;
	// end inline asm
$L__BB0_175:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r309, %r3466, 192937984;
	add.s32 	%r310, %r3465, %r309;
	mov.b32 	%f197, %r310;
	mul.f32 	%f198, %f195, %f197;
	sub.f32 	%f199, %f197, %f198;
	fma.rn.f32 	%f200, %f199, %f195, %f198;
	sub.f32 	%f201, %f197, %f200;
	fma.rz.f32 	%f202, %f201, %f195, %f200;
	cvt.rzi.f32.f32 	%f203, %f202;
	sub.f32 	%f745, %f197, %f203;
	sub.s32 	%r3466, %r3466, %r309;
	mov.b32 	%r3465, %f745;
	setp.ne.s32 	%p35, %r3466, 0;
	setp.ne.s32 	%p36, %r3465, 0;
	and.pred  	%p37, %p35, %p36;
	@%p37 bra 	$L__BB0_175;
$L__BB0_176:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p38, %r149, 2139095039;
	selp.f32 	%f204, 0f7FFFFFFF, 0f4B800000, %p38;
	mul.f32 	%f205, %f745, 0f34000000;
	mul.f32 	%f746, %f204, %f205;
	bra.uni 	$L__BB0_177;
$L__BB0_167:                            // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f188, %f750, %f703;
	cvt.rzi.f32.f32 	%f744, %f188;
	fma.rn.f32 	%f154, %f744, 0fC0000000, %f750;
	mov.b32 	%r148, %f154;
	setp.lt.u32 	%p29, %r148, 1073741824;
	@%p29 bra 	$L__BB0_172;
// %bb.168:
	setp.lt.u32 	%p30, %r148, -2147483647;
	@%p30 bra 	$L__BB0_170;
// %bb.169:
	add.f32 	%f193, %f744, 0fBF800000;
	setp.lt.f32 	%p33, %f154, 0fC0000000;
	add.f32 	%f194, %f193, 0fBF800000;
	selp.f32 	%f744, %f194, %f193, %p33;
	bra.uni 	$L__BB0_172;
$L__BB0_170:
	add.f32 	%f744, %f744, 0f3F800000;
	setp.ltu.f32 	%p31, %f154, 0f40800000;
	@%p31 bra 	$L__BB0_172;
// %bb.171:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f189, %f744, 0f3F800000;
	fma.rn.f32 	%f191, %f703, 0fC0400000, %f154;
	setp.ge.f32 	%p32, %f191, 0f00000000;
	add.f32 	%f192, %f189, 0f3F800000;
	selp.f32 	%f744, %f192, %f189, %p32;
$L__BB0_172:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f746, %f744, 0fC0000000, %f750;
$L__BB0_177:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f206, %f746;
	setp.gtu.f32 	%p39, %f206, 0f7F800000;
	mov.b32 	%r311, %f151;
	and.b32  	%r156, %r311, -2147483648;
	@%p39 bra 	$L__BB0_179;
// %bb.178:
	mov.b32 	%r312, %f746;
	or.b32  	%r313, %r156, %r312;
	mov.b32 	%f746, %r313;
$L__BB0_179:                            // %__nv_fmodf.exit
	shl.b32 	%r159, %r3, 1;
	and.b32  	%r328, %r159, 2;
	mul.lo.s32 	%r160, %r328, %r147;
	cvt.rn.f32.s32 	%f239, %r160;
	mov.f32 	%f240, 0f41800000;
	div.approx.f32 	%f168, %f239, %f240;
	abs.f32 	%f726, %f168;
	setp.lt.f32 	%p47, %f726, 0f40000000;
	setp.gtu.f32 	%p321, %f726, 0f4B800000;
	mov.f32 	%f706, %f726;
	@%p47 bra 	$L__BB0_25;
// %bb.14:
	@%p321 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_15;
$L__BB0_21:
	mov.b32 	%r9, %f726;
	and.b32  	%r329, %r9, 8388607;
	or.b32  	%r3431, %r329, 1065353216;
	mov.b32 	%f705, %r3431;
	add.s32 	%r330, %r9, -1073741824;
	and.b32  	%r3432, %r330, -8388608;
	setp.eq.s32 	%p54, %r3432, 0;
	@%p54 bra 	$L__BB0_24;
// %bb.22:                              // %__nv_fmaf_rn.exit4.i.i.i2360.preheader
	mov.f32 	%f250, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f249,%f250;
	// end inline asm
$L__BB0_23:                             // %__nv_fmaf_rn.exit4.i.i.i2360
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r331, %r3432, 192937984;
	add.s32 	%r332, %r3431, %r331;
	mov.b32 	%f251, %r332;
	mul.f32 	%f252, %f249, %f251;
	sub.f32 	%f253, %f251, %f252;
	fma.rn.f32 	%f254, %f253, %f249, %f252;
	sub.f32 	%f255, %f251, %f254;
	fma.rz.f32 	%f256, %f255, %f249, %f254;
	cvt.rzi.f32.f32 	%f257, %f256;
	sub.f32 	%f705, %f251, %f257;
	sub.s32 	%r3432, %r3432, %r331;
	mov.b32 	%r3431, %f705;
	setp.ne.s32 	%p55, %r3432, 0;
	setp.ne.s32 	%p56, %r3431, 0;
	and.pred  	%p57, %p55, %p56;
	@%p57 bra 	$L__BB0_23;
$L__BB0_24:                             // %__internal_fmodf_slowpath_mod.exit.i.i2362
	setp.gt.u32 	%p58, %r9, 2139095039;
	selp.f32 	%f258, 0f7FFFFFFF, 0f4B800000, %p58;
	mul.f32 	%f259, %f705, 0f34000000;
	mul.f32 	%f706, %f258, %f259;
	bra.uni 	$L__BB0_25;
$L__BB0_15:                             // %__nv_fast_fdividef.exit.i.i.i2339
	div.approx.f32 	%f242, %f726, %f703;
	cvt.rzi.f32.f32 	%f704, %f242;
	fma.rn.f32 	%f2, %f704, 0fC0000000, %f726;
	mov.b32 	%r8, %f2;
	setp.lt.u32 	%p49, %r8, 1073741824;
	@%p49 bra 	$L__BB0_20;
// %bb.16:
	setp.lt.u32 	%p50, %r8, -2147483647;
	@%p50 bra 	$L__BB0_18;
// %bb.17:
	add.f32 	%f247, %f704, 0fBF800000;
	setp.lt.f32 	%p53, %f2, 0fC0000000;
	add.f32 	%f248, %f247, 0fBF800000;
	selp.f32 	%f704, %f248, %f247, %p53;
	bra.uni 	$L__BB0_20;
$L__BB0_18:
	add.f32 	%f704, %f704, 0f3F800000;
	setp.ltu.f32 	%p51, %f2, 0f40800000;
	@%p51 bra 	$L__BB0_20;
// %bb.19:                              // %__nv_fmaf_rn.exit.i.i.i2343
	add.f32 	%f243, %f704, 0f3F800000;
	fma.rn.f32 	%f245, %f703, 0fC0400000, %f2;
	setp.ge.f32 	%p52, %f245, 0f00000000;
	add.f32 	%f246, %f243, 0f3F800000;
	selp.f32 	%f704, %f246, %f243, %p52;
$L__BB0_20:                             // %__internal_fmodf_fastpath_quot.exit.i.i2346
	fma.rn.f32 	%f706, %f704, 0fC0000000, %f726;
$L__BB0_25:                             // %__internal_fmodf_kernel.exit.i2365
	abs.f32 	%f260, %f706;
	setp.gtu.f32 	%p59, %f260, 0f7F800000;
	mov.b32 	%r333, %f168;
	and.b32  	%r16, %r333, -2147483648;
	@%p59 bra 	$L__BB0_27;
// %bb.26:
	mov.b32 	%r334, %f706;
	or.b32  	%r335, %r16, %r334;
	mov.b32 	%f706, %r335;
$L__BB0_27:                             // %__nv_fmodf.exit2366
	add.s32 	%r344, %r160, %r147;
	cvt.rn.f32.s32 	%f291, %r344;
	div.approx.f32 	%f18, %f291, %f240;
	abs.f32 	%f730, %f18;
	setp.lt.f32 	%p67, %f730, 0f40000000;
	setp.gtu.f32 	%p322, %f730, 0f4B800000;
	mov.f32 	%f710, %f730;
	@%p67 bra 	$L__BB0_39;
// %bb.28:
	@%p322 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_29;
$L__BB0_35:
	mov.b32 	%r18, %f730;
	and.b32  	%r345, %r18, 8388607;
	or.b32  	%r3433, %r345, 1065353216;
	mov.b32 	%f709, %r3433;
	add.s32 	%r346, %r18, -1073741824;
	and.b32  	%r3434, %r346, -8388608;
	setp.eq.s32 	%p74, %r3434, 0;
	@%p74 bra 	$L__BB0_38;
// %bb.36:                              // %__nv_fmaf_rn.exit4.i.i.i2391.preheader
	mov.f32 	%f302, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f301,%f302;
	// end inline asm
$L__BB0_37:                             // %__nv_fmaf_rn.exit4.i.i.i2391
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r347, %r3434, 192937984;
	add.s32 	%r348, %r3433, %r347;
	mov.b32 	%f303, %r348;
	mul.f32 	%f304, %f301, %f303;
	sub.f32 	%f305, %f303, %f304;
	fma.rn.f32 	%f306, %f305, %f301, %f304;
	sub.f32 	%f307, %f303, %f306;
	fma.rz.f32 	%f308, %f307, %f301, %f306;
	cvt.rzi.f32.f32 	%f309, %f308;
	sub.f32 	%f709, %f303, %f309;
	sub.s32 	%r3434, %r3434, %r347;
	mov.b32 	%r3433, %f709;
	setp.ne.s32 	%p75, %r3434, 0;
	setp.ne.s32 	%p76, %r3433, 0;
	and.pred  	%p77, %p75, %p76;
	@%p77 bra 	$L__BB0_37;
$L__BB0_38:                             // %__internal_fmodf_slowpath_mod.exit.i.i2393
	setp.gt.u32 	%p78, %r18, 2139095039;
	selp.f32 	%f310, 0f7FFFFFFF, 0f4B800000, %p78;
	mul.f32 	%f311, %f709, 0f34000000;
	mul.f32 	%f710, %f310, %f311;
	bra.uni 	$L__BB0_39;
$L__BB0_29:                             // %__nv_fast_fdividef.exit.i.i.i2370
	div.approx.f32 	%f294, %f730, %f703;
	cvt.rzi.f32.f32 	%f708, %f294;
	fma.rn.f32 	%f21, %f708, 0fC0000000, %f730;
	mov.b32 	%r17, %f21;
	setp.lt.u32 	%p69, %r17, 1073741824;
	@%p69 bra 	$L__BB0_34;
// %bb.30:
	setp.lt.u32 	%p70, %r17, -2147483647;
	@%p70 bra 	$L__BB0_32;
// %bb.31:
	add.f32 	%f299, %f708, 0fBF800000;
	setp.lt.f32 	%p73, %f21, 0fC0000000;
	add.f32 	%f300, %f299, 0fBF800000;
	selp.f32 	%f708, %f300, %f299, %p73;
	bra.uni 	$L__BB0_34;
$L__BB0_32:
	add.f32 	%f708, %f708, 0f3F800000;
	setp.ltu.f32 	%p71, %f21, 0f40800000;
	@%p71 bra 	$L__BB0_34;
// %bb.33:                              // %__nv_fmaf_rn.exit.i.i.i2374
	add.f32 	%f295, %f708, 0f3F800000;
	fma.rn.f32 	%f297, %f703, 0fC0400000, %f21;
	setp.ge.f32 	%p72, %f297, 0f00000000;
	add.f32 	%f298, %f295, 0f3F800000;
	selp.f32 	%f708, %f298, %f295, %p72;
$L__BB0_34:                             // %__internal_fmodf_fastpath_quot.exit.i.i2377
	fma.rn.f32 	%f710, %f708, 0fC0000000, %f730;
$L__BB0_39:                             // %__internal_fmodf_kernel.exit.i2396
	abs.f32 	%f312, %f710;
	setp.gtu.f32 	%p79, %f312, 0f7F800000;
	mov.b32 	%r349, %f18;
	and.b32  	%r25, %r349, -2147483648;
	@%p79 bra 	$L__BB0_41;
// %bb.40:
	mov.b32 	%r350, %f710;
	or.b32  	%r351, %r25, %r350;
	mov.b32 	%f710, %r351;
$L__BB0_41:                             // %__nv_fmodf.exit2397
	mul.lo.s32 	%r28, %r159, %r147;
	and.b32  	%r366, %r28, 2;
	cvt.rn.f32.s32 	%f345, %r366;
	div.approx.f32 	%f35, %f345, %f703;
	abs.f32 	%f734, %f35;
	setp.lt.f32 	%p87, %f734, 0f40000000;
	setp.gtu.f32 	%p323, %f734, 0f4B800000;
	mov.f32 	%f714, %f734;
	@%p87 bra 	$L__BB0_53;
// %bb.42:
	@%p323 bra 	$L__BB0_49;
	bra.uni 	$L__BB0_43;
$L__BB0_49:
	mov.b32 	%r30, %f734;
	and.b32  	%r367, %r30, 8388607;
	or.b32  	%r3435, %r367, 1065353216;
	mov.b32 	%f713, %r3435;
	add.s32 	%r368, %r30, -1073741824;
	and.b32  	%r3436, %r368, -8388608;
	setp.eq.s32 	%p94, %r3436, 0;
	@%p94 bra 	$L__BB0_52;
// %bb.50:                              // %__nv_fmaf_rn.exit4.i.i.i2422.preheader
	mov.f32 	%f356, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f355,%f356;
	// end inline asm
$L__BB0_51:                             // %__nv_fmaf_rn.exit4.i.i.i2422
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r369, %r3436, 192937984;
	add.s32 	%r370, %r3435, %r369;
	mov.b32 	%f357, %r370;
	mul.f32 	%f358, %f355, %f357;
	sub.f32 	%f359, %f357, %f358;
	fma.rn.f32 	%f360, %f359, %f355, %f358;
	sub.f32 	%f361, %f357, %f360;
	fma.rz.f32 	%f362, %f361, %f355, %f360;
	cvt.rzi.f32.f32 	%f363, %f362;
	sub.f32 	%f713, %f357, %f363;
	sub.s32 	%r3436, %r3436, %r369;
	mov.b32 	%r3435, %f713;
	setp.ne.s32 	%p95, %r3436, 0;
	setp.ne.s32 	%p96, %r3435, 0;
	and.pred  	%p97, %p95, %p96;
	@%p97 bra 	$L__BB0_51;
$L__BB0_52:                             // %__internal_fmodf_slowpath_mod.exit.i.i2424
	setp.gt.u32 	%p98, %r30, 2139095039;
	selp.f32 	%f364, 0f7FFFFFFF, 0f4B800000, %p98;
	mul.f32 	%f365, %f713, 0f34000000;
	mul.f32 	%f714, %f364, %f365;
	bra.uni 	$L__BB0_53;
$L__BB0_43:                             // %__nv_fast_fdividef.exit.i.i.i2401
	div.approx.f32 	%f348, %f734, %f703;
	cvt.rzi.f32.f32 	%f712, %f348;
	fma.rn.f32 	%f38, %f712, 0fC0000000, %f734;
	mov.b32 	%r29, %f38;
	setp.lt.u32 	%p89, %r29, 1073741824;
	@%p89 bra 	$L__BB0_48;
// %bb.44:
	setp.lt.u32 	%p90, %r29, -2147483647;
	@%p90 bra 	$L__BB0_46;
// %bb.45:
	add.f32 	%f353, %f712, 0fBF800000;
	setp.lt.f32 	%p93, %f38, 0fC0000000;
	add.f32 	%f354, %f353, 0fBF800000;
	selp.f32 	%f712, %f354, %f353, %p93;
	bra.uni 	$L__BB0_48;
$L__BB0_46:
	add.f32 	%f712, %f712, 0f3F800000;
	setp.ltu.f32 	%p91, %f38, 0f40800000;
	@%p91 bra 	$L__BB0_48;
// %bb.47:                              // %__nv_fmaf_rn.exit.i.i.i2405
	add.f32 	%f349, %f712, 0f3F800000;
	fma.rn.f32 	%f351, %f703, 0fC0400000, %f38;
	setp.ge.f32 	%p92, %f351, 0f00000000;
	add.f32 	%f352, %f349, 0f3F800000;
	selp.f32 	%f712, %f352, %f349, %p92;
$L__BB0_48:                             // %__internal_fmodf_fastpath_quot.exit.i.i2408
	fma.rn.f32 	%f714, %f712, 0fC0000000, %f734;
$L__BB0_53:                             // %__internal_fmodf_kernel.exit.i2427
	mov.f32 	%f230, 0f00000000;
	abs.f32 	%f366, %f714;
	setp.gtu.f32 	%p99, %f366, 0f7F800000;
	mov.b32 	%r371, %f35;
	and.b32  	%r37, %r371, -2147483648;
	@%p99 bra 	$L__BB0_55;
// %bb.54:
	mov.b32 	%r372, %f714;
	or.b32  	%r373, %r37, %r372;
	mov.b32 	%f714, %r373;
$L__BB0_55:                             // %__nv_fmodf.exit2428
	add.f32 	%f367, %f714, %f714;
	mov.b32 	%r374, %f367;
	and.b32  	%r375, %r374, -2147483648;
	or.b32  	%r376, %r375, 1056964608;
	mov.b32 	%f368, %r376;
	add.f32 	%f369, %f367, %f368;
	cvt.rzi.f32.f32 	%f370, %f369;
	abs.f32 	%f371, %f367;
	setp.gt.f32 	%p100, %f371, 0f4B000000;
	selp.f32 	%f372, %f367, %f370, %p100;
	cvt.rzi.f32.f32 	%f373, %f367;
	setp.lt.f32 	%p101, %f371, 0f3F000000;
	selp.f32 	%f374, %f373, %f372, %p101;
	cvt.rzi.s32.f32 	%r377, %f374;
	fma.rn.f32 	%f375, %f374, 0fBF000000, %f714;
	mul.f32 	%f376, %f375, %f375;
	fma.rn.f32 	%f377, %f376, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f378, %f376, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f379, %f377, %f376, 0fC0A55DF6;
	fma.rn.f32 	%f380, %f378, %f376, 0f4081E0CF;
	fma.rn.f32 	%f381, %f376, %f375, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f376, 0fC09DE9E6;
	fma.rn.f32 	%f383, %f379, %f381, 0f00000000;
	fma.rn.f32 	%f384, %f382, %f376, 0f3F800000;
	fma.rn.f32 	%f385, %f375, 0f40490FDB, %f383;
	and.b32  	%r378, %r377, 1;
	setp.eq.b32 	%p102, %r378, 1;
	selp.f32 	%f386, %f384, %f385, %p102;
	selp.f32 	%f387, %f385, %f384, %p102;
	and.b32  	%r379, %r377, 2;
	setp.eq.s32 	%p103, %r379, 0;
	neg.f32 	%f388, %f386;
	selp.f32 	%f389, %f386, %f388, %p103;
	add.s32 	%r380, %r377, 1;
	and.b32  	%r381, %r380, 2;
	setp.eq.s32 	%p104, %r381, 0;
	sub.f32 	%f391, %f230, %f387;
	cvt.rzi.f32.f32 	%f393, %f714;
	setp.eq.f32 	%p105, %f393, %f714;
	mul.f32 	%f394, %f714, 0f00000000;
	selp.f32 	%f76, %f394, %f389, %p105;
	abs.f32 	%f395, %f714;
	add.s32 	%r382, %r28, %r147;
	and.b32  	%r383, %r382, 3;
	cvt.rn.f32.s32 	%f397, %r383;
	div.approx.f32 	%f54, %f397, %f703;
	abs.f32 	%f738, %f54;
	setp.lt.f32 	%p107, %f738, 0f40000000;
	setp.gtu.f32 	%p324, %f738, 0f4B800000;
	mov.f32 	%f718, %f738;
	@%p107 bra 	$L__BB0_67;
// %bb.56:
	@%p324 bra 	$L__BB0_63;
	bra.uni 	$L__BB0_57;
$L__BB0_63:
	mov.b32 	%r39, %f738;
	and.b32  	%r384, %r39, 8388607;
	or.b32  	%r3437, %r384, 1065353216;
	mov.b32 	%f717, %r3437;
	add.s32 	%r385, %r39, -1073741824;
	and.b32  	%r3438, %r385, -8388608;
	setp.eq.s32 	%p114, %r3438, 0;
	@%p114 bra 	$L__BB0_66;
// %bb.64:                              // %__nv_fmaf_rn.exit4.i.i.i2453.preheader
	mov.f32 	%f408, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f407,%f408;
	// end inline asm
$L__BB0_65:                             // %__nv_fmaf_rn.exit4.i.i.i2453
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r386, %r3438, 192937984;
	add.s32 	%r387, %r3437, %r386;
	mov.b32 	%f409, %r387;
	mul.f32 	%f410, %f407, %f409;
	sub.f32 	%f411, %f409, %f410;
	fma.rn.f32 	%f412, %f411, %f407, %f410;
	sub.f32 	%f413, %f409, %f412;
	fma.rz.f32 	%f414, %f413, %f407, %f412;
	cvt.rzi.f32.f32 	%f415, %f414;
	sub.f32 	%f717, %f409, %f415;
	sub.s32 	%r3438, %r3438, %r386;
	mov.b32 	%r3437, %f717;
	setp.ne.s32 	%p115, %r3438, 0;
	setp.ne.s32 	%p116, %r3437, 0;
	and.pred  	%p117, %p115, %p116;
	@%p117 bra 	$L__BB0_65;
$L__BB0_66:                             // %__internal_fmodf_slowpath_mod.exit.i.i2455
	setp.gt.u32 	%p118, %r39, 2139095039;
	selp.f32 	%f416, 0f7FFFFFFF, 0f4B800000, %p118;
	mul.f32 	%f417, %f717, 0f34000000;
	mul.f32 	%f718, %f416, %f417;
	bra.uni 	$L__BB0_67;
$L__BB0_57:                             // %__nv_fast_fdividef.exit.i.i.i2432
	div.approx.f32 	%f400, %f738, %f703;
	cvt.rzi.f32.f32 	%f716, %f400;
	fma.rn.f32 	%f57, %f716, 0fC0000000, %f738;
	mov.b32 	%r38, %f57;
	setp.lt.u32 	%p109, %r38, 1073741824;
	@%p109 bra 	$L__BB0_62;
// %bb.58:
	setp.lt.u32 	%p110, %r38, -2147483647;
	@%p110 bra 	$L__BB0_60;
// %bb.59:
	add.f32 	%f405, %f716, 0fBF800000;
	setp.lt.f32 	%p113, %f57, 0fC0000000;
	add.f32 	%f406, %f405, 0fBF800000;
	selp.f32 	%f716, %f406, %f405, %p113;
	bra.uni 	$L__BB0_62;
$L__BB0_60:
	add.f32 	%f716, %f716, 0f3F800000;
	setp.ltu.f32 	%p111, %f57, 0f40800000;
	@%p111 bra 	$L__BB0_62;
// %bb.61:                              // %__nv_fmaf_rn.exit.i.i.i2436
	add.f32 	%f401, %f716, 0f3F800000;
	fma.rn.f32 	%f403, %f703, 0fC0400000, %f57;
	setp.ge.f32 	%p112, %f403, 0f00000000;
	add.f32 	%f404, %f401, 0f3F800000;
	selp.f32 	%f716, %f404, %f401, %p112;
$L__BB0_62:                             // %__internal_fmodf_fastpath_quot.exit.i.i2439
	fma.rn.f32 	%f718, %f716, 0fC0000000, %f738;
$L__BB0_67:                             // %__internal_fmodf_kernel.exit.i2458
	selp.f32 	%f392, %f387, %f391, %p104;
	setp.gt.f32 	%p106, %f395, 0f4B800000;
	add.f32 	%f396, %f76, 0f3F800000;
	abs.f32 	%f418, %f718;
	setp.gtu.f32 	%p119, %f418, 0f7F800000;
	mov.b32 	%r388, %f54;
	and.b32  	%r46, %r388, -2147483648;
	@%p119 bra 	$L__BB0_69;
// %bb.68:
	mov.b32 	%r389, %f718;
	or.b32  	%r390, %r46, %r389;
	mov.b32 	%f718, %r390;
$L__BB0_69:                             // %__nv_fmodf.exit2459
	selp.f32 	%f53, %f396, %f392, %p106;
	add.f32 	%f419, %f718, %f718;
	mov.b32 	%r391, %f419;
	and.b32  	%r392, %r391, -2147483648;
	or.b32  	%r393, %r392, 1056964608;
	mov.b32 	%f420, %r393;
	add.f32 	%f421, %f419, %f420;
	cvt.rzi.f32.f32 	%f422, %f421;
	abs.f32 	%f423, %f419;
	setp.gt.f32 	%p120, %f423, 0f4B000000;
	selp.f32 	%f424, %f419, %f422, %p120;
	cvt.rzi.f32.f32 	%f425, %f419;
	setp.lt.f32 	%p121, %f423, 0f3F000000;
	selp.f32 	%f426, %f425, %f424, %p121;
	cvt.rzi.s32.f32 	%r394, %f426;
	fma.rn.f32 	%f427, %f426, 0fBF000000, %f718;
	mul.f32 	%f428, %f427, %f427;
	fma.rn.f32 	%f429, %f428, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f430, %f428, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f431, %f429, %f428, 0fC0A55DF6;
	fma.rn.f32 	%f432, %f430, %f428, 0f4081E0CF;
	fma.rn.f32 	%f433, %f428, %f427, 0f00000000;
	fma.rn.f32 	%f434, %f432, %f428, 0fC09DE9E6;
	fma.rn.f32 	%f435, %f431, %f433, 0f00000000;
	fma.rn.f32 	%f436, %f434, %f428, 0f3F800000;
	fma.rn.f32 	%f437, %f427, 0f40490FDB, %f435;
	and.b32  	%r395, %r394, 1;
	setp.eq.b32 	%p122, %r395, 1;
	selp.f32 	%f438, %f436, %f437, %p122;
	selp.f32 	%f439, %f437, %f436, %p122;
	and.b32  	%r396, %r394, 2;
	setp.eq.s32 	%p123, %r396, 0;
	neg.f32 	%f440, %f438;
	selp.f32 	%f441, %f438, %f440, %p123;
	add.s32 	%r397, %r394, 1;
	and.b32  	%r398, %r397, 2;
	setp.eq.s32 	%p124, %r398, 0;
	sub.f32 	%f443, %f230, %f439;
	selp.f32 	%f444, %f439, %f443, %p124;
	cvt.rzi.f32.f32 	%f445, %f718;
	setp.eq.f32 	%p125, %f445, %f718;
	mul.f32 	%f446, %f718, 0f00000000;
	selp.f32 	%f78, %f446, %f441, %p125;
	abs.f32 	%f447, %f718;
	setp.gt.f32 	%p126, %f447, 0f4B800000;
	add.f32 	%f448, %f78, 0f3F800000;
	selp.f32 	%f72, %f448, %f444, %p126;
	and.b32  	%r47, %r3, 2;
	setp.eq.s32 	%p127, %r47, 0;
	mov.f32 	%f75, %f53;
	mov.f32 	%f77, %f72;
	@%p127 bra 	$L__BB0_71;
// %bb.70:                              // %L682
	neg.f32 	%f77, %f78;
	neg.f32 	%f75, %f76;
	mov.f32 	%f76, %f53;
	mov.f32 	%f78, %f72;
$L__BB0_71:                             // %L684
	@%p27 bra 	$L__BB0_187;
// %bb.72:
	@%p320 bra 	$L__BB0_183;
	bra.uni 	$L__BB0_73;
$L__BB0_183:
	mov.b32 	%r162, %f750;
	and.b32  	%r405, %r162, 8388607;
	or.b32  	%r3467, %r405, 1065353216;
	mov.b32 	%f749, %r3467;
	add.s32 	%r406, %r162, -1073741824;
	and.b32  	%r3468, %r406, -8388608;
	setp.eq.s32 	%p135, %r3468, 0;
	@%p135 bra 	$L__BB0_186;
// %bb.184:                             // %__nv_fmaf_rn.exit4.i.i.i2484.preheader
	mov.f32 	%f458, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f457,%f458;
	// end inline asm
$L__BB0_185:                            // %__nv_fmaf_rn.exit4.i.i.i2484
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r407, %r3468, 192937984;
	add.s32 	%r408, %r3467, %r407;
	mov.b32 	%f459, %r408;
	mul.f32 	%f460, %f457, %f459;
	sub.f32 	%f461, %f459, %f460;
	fma.rn.f32 	%f462, %f461, %f457, %f460;
	sub.f32 	%f463, %f459, %f462;
	fma.rz.f32 	%f464, %f463, %f457, %f462;
	cvt.rzi.f32.f32 	%f465, %f464;
	sub.f32 	%f749, %f459, %f465;
	sub.s32 	%r3468, %r3468, %r407;
	mov.b32 	%r3467, %f749;
	setp.ne.s32 	%p136, %r3468, 0;
	setp.ne.s32 	%p137, %r3467, 0;
	and.pred  	%p138, %p136, %p137;
	@%p138 bra 	$L__BB0_185;
$L__BB0_186:                            // %__internal_fmodf_slowpath_mod.exit.i.i2486
	setp.gt.u32 	%p139, %r162, 2139095039;
	selp.f32 	%f466, 0f7FFFFFFF, 0f4B800000, %p139;
	mul.f32 	%f467, %f749, 0f34000000;
	mul.f32 	%f750, %f466, %f467;
	bra.uni 	$L__BB0_187;
$L__BB0_73:                             // %__nv_fast_fdividef.exit.i.i.i2463
	div.approx.f32 	%f450, %f750, %f703;
	cvt.rzi.f32.f32 	%f748, %f450;
	fma.rn.f32 	%f171, %f748, 0fC0000000, %f750;
	mov.b32 	%r161, %f171;
	setp.lt.u32 	%p130, %r161, 1073741824;
	@%p130 bra 	$L__BB0_182;
// %bb.74:
	setp.lt.u32 	%p131, %r161, -2147483647;
	@%p131 bra 	$L__BB0_180;
// %bb.75:
	add.f32 	%f455, %f748, 0fBF800000;
	setp.lt.f32 	%p134, %f171, 0fC0000000;
	add.f32 	%f456, %f455, 0fBF800000;
	selp.f32 	%f748, %f456, %f455, %p134;
	bra.uni 	$L__BB0_182;
$L__BB0_180:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p132, %f171, 0f40800000;
	@%p132 bra 	$L__BB0_182;
// %bb.181:                             // %__nv_fmaf_rn.exit.i.i.i2467
	add.f32 	%f451, %f748, 0f3F800000;
	fma.rn.f32 	%f453, %f703, 0fC0400000, %f171;
	setp.ge.f32 	%p133, %f453, 0f00000000;
	add.f32 	%f454, %f451, 0f3F800000;
	selp.f32 	%f748, %f454, %f451, %p133;
$L__BB0_182:                            // %__internal_fmodf_fastpath_quot.exit.i.i2470
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_187:                            // %__internal_fmodf_kernel.exit.i2489
	abs.f32 	%f468, %f750;
	setp.gtu.f32 	%p140, %f468, 0f7F800000;
	@%p140 bra 	$L__BB0_189;
// %bb.188:
	mov.b32 	%r409, %f750;
	or.b32  	%r410, %r156, %r409;
	mov.b32 	%f750, %r410;
$L__BB0_189:                            // %__nv_fmodf.exit2490
	@%p47 bra 	$L__BB0_87;
// %bb.76:
	@%p321 bra 	$L__BB0_83;
	bra.uni 	$L__BB0_77;
$L__BB0_83:
	mov.b32 	%r51, %f726;
	and.b32  	%r425, %r51, 8388607;
	or.b32  	%r3439, %r425, 1065353216;
	mov.b32 	%f725, %r3439;
	add.s32 	%r426, %r51, -1073741824;
	and.b32  	%r3440, %r426, -8388608;
	setp.eq.s32 	%p155, %r3440, 0;
	@%p155 bra 	$L__BB0_86;
// %bb.84:                              // %__nv_fmaf_rn.exit4.i.i.i2515.preheader
	mov.f32 	%f510, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f509,%f510;
	// end inline asm
$L__BB0_85:                             // %__nv_fmaf_rn.exit4.i.i.i2515
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r427, %r3440, 192937984;
	add.s32 	%r428, %r3439, %r427;
	mov.b32 	%f511, %r428;
	mul.f32 	%f512, %f509, %f511;
	sub.f32 	%f513, %f511, %f512;
	fma.rn.f32 	%f514, %f513, %f509, %f512;
	sub.f32 	%f515, %f511, %f514;
	fma.rz.f32 	%f516, %f515, %f509, %f514;
	cvt.rzi.f32.f32 	%f517, %f516;
	sub.f32 	%f725, %f511, %f517;
	sub.s32 	%r3440, %r3440, %r427;
	mov.b32 	%r3439, %f725;
	setp.ne.s32 	%p156, %r3440, 0;
	setp.ne.s32 	%p157, %r3439, 0;
	and.pred  	%p158, %p156, %p157;
	@%p158 bra 	$L__BB0_85;
$L__BB0_86:                             // %__internal_fmodf_slowpath_mod.exit.i.i2517
	setp.gt.u32 	%p159, %r51, 2139095039;
	selp.f32 	%f518, 0f7FFFFFFF, 0f4B800000, %p159;
	mul.f32 	%f519, %f725, 0f34000000;
	mul.f32 	%f726, %f518, %f519;
	bra.uni 	$L__BB0_87;
$L__BB0_77:                             // %__nv_fast_fdividef.exit.i.i.i2494
	div.approx.f32 	%f502, %f726, %f703;
	cvt.rzi.f32.f32 	%f724, %f502;
	fma.rn.f32 	%f80, %f724, 0fC0000000, %f726;
	mov.b32 	%r50, %f80;
	setp.lt.u32 	%p150, %r50, 1073741824;
	@%p150 bra 	$L__BB0_82;
// %bb.78:
	setp.lt.u32 	%p151, %r50, -2147483647;
	@%p151 bra 	$L__BB0_80;
// %bb.79:
	add.f32 	%f507, %f724, 0fBF800000;
	setp.lt.f32 	%p154, %f80, 0fC0000000;
	add.f32 	%f508, %f507, 0fBF800000;
	selp.f32 	%f724, %f508, %f507, %p154;
	bra.uni 	$L__BB0_82;
$L__BB0_80:
	add.f32 	%f724, %f724, 0f3F800000;
	setp.ltu.f32 	%p152, %f80, 0f40800000;
	@%p152 bra 	$L__BB0_82;
// %bb.81:                              // %__nv_fmaf_rn.exit.i.i.i2498
	add.f32 	%f503, %f724, 0f3F800000;
	fma.rn.f32 	%f505, %f703, 0fC0400000, %f80;
	setp.ge.f32 	%p153, %f505, 0f00000000;
	add.f32 	%f506, %f503, 0f3F800000;
	selp.f32 	%f724, %f506, %f503, %p153;
$L__BB0_82:                             // %__internal_fmodf_fastpath_quot.exit.i.i2501
	fma.rn.f32 	%f726, %f724, 0fC0000000, %f726;
$L__BB0_87:                             // %__internal_fmodf_kernel.exit.i2520
	abs.f32 	%f520, %f726;
	setp.gtu.f32 	%p160, %f520, 0f7F800000;
	@%p160 bra 	$L__BB0_89;
// %bb.88:
	mov.b32 	%r429, %f726;
	or.b32  	%r430, %r16, %r429;
	mov.b32 	%f726, %r430;
$L__BB0_89:                             // %__nv_fmodf.exit2521
	@%p67 bra 	$L__BB0_101;
// %bb.90:
	@%p322 bra 	$L__BB0_97;
	bra.uni 	$L__BB0_91;
$L__BB0_97:
	mov.b32 	%r59, %f730;
	and.b32  	%r439, %r59, 8388607;
	or.b32  	%r3441, %r439, 1065353216;
	mov.b32 	%f729, %r3441;
	add.s32 	%r440, %r59, -1073741824;
	and.b32  	%r3442, %r440, -8388608;
	setp.eq.s32 	%p175, %r3442, 0;
	@%p175 bra 	$L__BB0_100;
// %bb.98:                              // %__nv_fmaf_rn.exit4.i.i.i2546.preheader
	mov.f32 	%f560, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f559,%f560;
	// end inline asm
$L__BB0_99:                             // %__nv_fmaf_rn.exit4.i.i.i2546
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r441, %r3442, 192937984;
	add.s32 	%r442, %r3441, %r441;
	mov.b32 	%f561, %r442;
	mul.f32 	%f562, %f559, %f561;
	sub.f32 	%f563, %f561, %f562;
	fma.rn.f32 	%f564, %f563, %f559, %f562;
	sub.f32 	%f565, %f561, %f564;
	fma.rz.f32 	%f566, %f565, %f559, %f564;
	cvt.rzi.f32.f32 	%f567, %f566;
	sub.f32 	%f729, %f561, %f567;
	sub.s32 	%r3442, %r3442, %r441;
	mov.b32 	%r3441, %f729;
	setp.ne.s32 	%p176, %r3442, 0;
	setp.ne.s32 	%p177, %r3441, 0;
	and.pred  	%p178, %p176, %p177;
	@%p178 bra 	$L__BB0_99;
$L__BB0_100:                            // %__internal_fmodf_slowpath_mod.exit.i.i2548
	setp.gt.u32 	%p179, %r59, 2139095039;
	selp.f32 	%f568, 0f7FFFFFFF, 0f4B800000, %p179;
	mul.f32 	%f569, %f729, 0f34000000;
	mul.f32 	%f730, %f568, %f569;
	bra.uni 	$L__BB0_101;
$L__BB0_91:                             // %__nv_fast_fdividef.exit.i.i.i2525
	div.approx.f32 	%f552, %f730, %f703;
	cvt.rzi.f32.f32 	%f728, %f552;
	fma.rn.f32 	%f97, %f728, 0fC0000000, %f730;
	mov.b32 	%r58, %f97;
	setp.lt.u32 	%p170, %r58, 1073741824;
	@%p170 bra 	$L__BB0_96;
// %bb.92:
	setp.lt.u32 	%p171, %r58, -2147483647;
	@%p171 bra 	$L__BB0_94;
// %bb.93:
	add.f32 	%f557, %f728, 0fBF800000;
	setp.lt.f32 	%p174, %f97, 0fC0000000;
	add.f32 	%f558, %f557, 0fBF800000;
	selp.f32 	%f728, %f558, %f557, %p174;
	bra.uni 	$L__BB0_96;
$L__BB0_94:
	add.f32 	%f728, %f728, 0f3F800000;
	setp.ltu.f32 	%p172, %f97, 0f40800000;
	@%p172 bra 	$L__BB0_96;
// %bb.95:                              // %__nv_fmaf_rn.exit.i.i.i2529
	add.f32 	%f553, %f728, 0f3F800000;
	fma.rn.f32 	%f555, %f703, 0fC0400000, %f97;
	setp.ge.f32 	%p173, %f555, 0f00000000;
	add.f32 	%f556, %f553, 0f3F800000;
	selp.f32 	%f728, %f556, %f553, %p173;
$L__BB0_96:                             // %__internal_fmodf_fastpath_quot.exit.i.i2532
	fma.rn.f32 	%f730, %f728, 0fC0000000, %f730;
$L__BB0_101:                            // %__internal_fmodf_kernel.exit.i2551
	abs.f32 	%f570, %f730;
	setp.gtu.f32 	%p180, %f570, 0f7F800000;
	@%p180 bra 	$L__BB0_103;
// %bb.102:
	mov.b32 	%r443, %f730;
	or.b32  	%r444, %r25, %r443;
	mov.b32 	%f730, %r444;
$L__BB0_103:                            // %__nv_fmodf.exit2552
	@%p87 bra 	$L__BB0_115;
// %bb.104:
	@%p323 bra 	$L__BB0_111;
	bra.uni 	$L__BB0_105;
$L__BB0_111:
	mov.b32 	%r69, %f734;
	and.b32  	%r459, %r69, 8388607;
	or.b32  	%r3443, %r459, 1065353216;
	mov.b32 	%f733, %r3443;
	add.s32 	%r460, %r69, -1073741824;
	and.b32  	%r3444, %r460, -8388608;
	setp.eq.s32 	%p195, %r3444, 0;
	@%p195 bra 	$L__BB0_114;
// %bb.112:                             // %__nv_fmaf_rn.exit4.i.i.i2577.preheader
	mov.f32 	%f612, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f611,%f612;
	// end inline asm
$L__BB0_113:                            // %__nv_fmaf_rn.exit4.i.i.i2577
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r461, %r3444, 192937984;
	add.s32 	%r462, %r3443, %r461;
	mov.b32 	%f613, %r462;
	mul.f32 	%f614, %f611, %f613;
	sub.f32 	%f615, %f613, %f614;
	fma.rn.f32 	%f616, %f615, %f611, %f614;
	sub.f32 	%f617, %f613, %f616;
	fma.rz.f32 	%f618, %f617, %f611, %f616;
	cvt.rzi.f32.f32 	%f619, %f618;
	sub.f32 	%f733, %f613, %f619;
	sub.s32 	%r3444, %r3444, %r461;
	mov.b32 	%r3443, %f733;
	setp.ne.s32 	%p196, %r3444, 0;
	setp.ne.s32 	%p197, %r3443, 0;
	and.pred  	%p198, %p196, %p197;
	@%p198 bra 	$L__BB0_113;
$L__BB0_114:                            // %__internal_fmodf_slowpath_mod.exit.i.i2579
	setp.gt.u32 	%p199, %r69, 2139095039;
	selp.f32 	%f620, 0f7FFFFFFF, 0f4B800000, %p199;
	mul.f32 	%f621, %f733, 0f34000000;
	mul.f32 	%f734, %f620, %f621;
	bra.uni 	$L__BB0_115;
$L__BB0_105:                            // %__nv_fast_fdividef.exit.i.i.i2556
	div.approx.f32 	%f604, %f734, %f703;
	cvt.rzi.f32.f32 	%f732, %f604;
	fma.rn.f32 	%f112, %f732, 0fC0000000, %f734;
	mov.b32 	%r68, %f112;
	setp.lt.u32 	%p190, %r68, 1073741824;
	@%p190 bra 	$L__BB0_110;
// %bb.106:
	setp.lt.u32 	%p191, %r68, -2147483647;
	@%p191 bra 	$L__BB0_108;
// %bb.107:
	add.f32 	%f609, %f732, 0fBF800000;
	setp.lt.f32 	%p194, %f112, 0fC0000000;
	add.f32 	%f610, %f609, 0fBF800000;
	selp.f32 	%f732, %f610, %f609, %p194;
	bra.uni 	$L__BB0_110;
$L__BB0_108:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p192, %f112, 0f40800000;
	@%p192 bra 	$L__BB0_110;
// %bb.109:                             // %__nv_fmaf_rn.exit.i.i.i2560
	add.f32 	%f605, %f732, 0f3F800000;
	fma.rn.f32 	%f607, %f703, 0fC0400000, %f112;
	setp.ge.f32 	%p193, %f607, 0f00000000;
	add.f32 	%f608, %f605, 0f3F800000;
	selp.f32 	%f732, %f608, %f605, %p193;
$L__BB0_110:                            // %__internal_fmodf_fastpath_quot.exit.i.i2563
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_115:                            // %__internal_fmodf_kernel.exit.i2582
	abs.f32 	%f622, %f734;
	setp.gtu.f32 	%p200, %f622, 0f7F800000;
	@%p200 bra 	$L__BB0_117;
// %bb.116:
	mov.b32 	%r463, %f734;
	or.b32  	%r464, %r37, %r463;
	mov.b32 	%f734, %r464;
$L__BB0_117:                            // %__nv_fmodf.exit2583
	add.f32 	%f623, %f734, %f734;
	mov.b32 	%r465, %f623;
	and.b32  	%r466, %r465, -2147483648;
	or.b32  	%r467, %r466, 1056964608;
	mov.b32 	%f624, %r467;
	add.f32 	%f625, %f623, %f624;
	cvt.rzi.f32.f32 	%f626, %f625;
	abs.f32 	%f627, %f623;
	setp.gt.f32 	%p202, %f627, 0f4B000000;
	selp.f32 	%f628, %f623, %f626, %p202;
	cvt.rzi.f32.f32 	%f629, %f623;
	setp.lt.f32 	%p203, %f627, 0f3F000000;
	selp.f32 	%f630, %f629, %f628, %p203;
	cvt.rzi.s32.f32 	%r468, %f630;
	fma.rn.f32 	%f631, %f630, 0fBF000000, %f734;
	mul.f32 	%f632, %f631, %f631;
	fma.rn.f32 	%f633, %f632, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f634, %f632, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f635, %f633, %f632, 0fC0A55DF6;
	fma.rn.f32 	%f636, %f634, %f632, 0f4081E0CF;
	fma.rn.f32 	%f637, %f632, %f631, 0f00000000;
	fma.rn.f32 	%f638, %f636, %f632, 0fC09DE9E6;
	fma.rn.f32 	%f639, %f635, %f637, 0f00000000;
	fma.rn.f32 	%f640, %f638, %f632, 0f3F800000;
	fma.rn.f32 	%f641, %f631, 0f40490FDB, %f639;
	and.b32  	%r469, %r468, 1;
	setp.eq.b32 	%p204, %r469, 1;
	selp.f32 	%f642, %f640, %f641, %p204;
	selp.f32 	%f643, %f641, %f640, %p204;
	and.b32  	%r470, %r468, 2;
	setp.eq.s32 	%p205, %r470, 0;
	neg.f32 	%f644, %f642;
	selp.f32 	%f645, %f642, %f644, %p205;
	add.s32 	%r471, %r468, 1;
	and.b32  	%r472, %r471, 2;
	setp.eq.s32 	%p206, %r472, 0;
	sub.f32 	%f647, %f230, %f643;
	cvt.rzi.f32.f32 	%f649, %f734;
	setp.eq.f32 	%p207, %f649, %f734;
	mul.f32 	%f650, %f734, 0f00000000;
	selp.f32 	%f148, %f650, %f645, %p207;
	abs.f32 	%f651, %f734;
	@%p107 bra 	$L__BB0_129;
// %bb.118:
	@%p324 bra 	$L__BB0_125;
	bra.uni 	$L__BB0_119;
$L__BB0_125:
	mov.b32 	%r77, %f738;
	and.b32  	%r473, %r77, 8388607;
	or.b32  	%r3445, %r473, 1065353216;
	mov.b32 	%f737, %r3445;
	add.s32 	%r474, %r77, -1073741824;
	and.b32  	%r3446, %r474, -8388608;
	setp.eq.s32 	%p215, %r3446, 0;
	@%p215 bra 	$L__BB0_128;
// %bb.126:                             // %__nv_fmaf_rn.exit4.i.i.i2608.preheader
	mov.f32 	%f662, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f661,%f662;
	// end inline asm
$L__BB0_127:                            // %__nv_fmaf_rn.exit4.i.i.i2608
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r475, %r3446, 192937984;
	add.s32 	%r476, %r3445, %r475;
	mov.b32 	%f663, %r476;
	mul.f32 	%f664, %f661, %f663;
	sub.f32 	%f665, %f663, %f664;
	fma.rn.f32 	%f666, %f665, %f661, %f664;
	sub.f32 	%f667, %f663, %f666;
	fma.rz.f32 	%f668, %f667, %f661, %f666;
	cvt.rzi.f32.f32 	%f669, %f668;
	sub.f32 	%f737, %f663, %f669;
	sub.s32 	%r3446, %r3446, %r475;
	mov.b32 	%r3445, %f737;
	setp.ne.s32 	%p216, %r3446, 0;
	setp.ne.s32 	%p217, %r3445, 0;
	and.pred  	%p218, %p216, %p217;
	@%p218 bra 	$L__BB0_127;
$L__BB0_128:                            // %__internal_fmodf_slowpath_mod.exit.i.i2610
	setp.gt.u32 	%p219, %r77, 2139095039;
	selp.f32 	%f670, 0f7FFFFFFF, 0f4B800000, %p219;
	mul.f32 	%f671, %f737, 0f34000000;
	mul.f32 	%f738, %f670, %f671;
	bra.uni 	$L__BB0_129;
$L__BB0_119:                            // %__nv_fast_fdividef.exit.i.i.i2587
	div.approx.f32 	%f654, %f738, %f703;
	cvt.rzi.f32.f32 	%f736, %f654;
	fma.rn.f32 	%f129, %f736, 0fC0000000, %f738;
	mov.b32 	%r76, %f129;
	setp.lt.u32 	%p210, %r76, 1073741824;
	@%p210 bra 	$L__BB0_124;
// %bb.120:
	setp.lt.u32 	%p211, %r76, -2147483647;
	@%p211 bra 	$L__BB0_122;
// %bb.121:
	add.f32 	%f659, %f736, 0fBF800000;
	setp.lt.f32 	%p214, %f129, 0fC0000000;
	add.f32 	%f660, %f659, 0fBF800000;
	selp.f32 	%f736, %f660, %f659, %p214;
	bra.uni 	$L__BB0_124;
$L__BB0_122:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p212, %f129, 0f40800000;
	@%p212 bra 	$L__BB0_124;
// %bb.123:                             // %__nv_fmaf_rn.exit.i.i.i2591
	add.f32 	%f655, %f736, 0f3F800000;
	fma.rn.f32 	%f657, %f703, 0fC0400000, %f129;
	setp.ge.f32 	%p213, %f657, 0f00000000;
	add.f32 	%f658, %f655, 0f3F800000;
	selp.f32 	%f736, %f658, %f655, %p213;
$L__BB0_124:                            // %__internal_fmodf_fastpath_quot.exit.i.i2594
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_129:                            // %__internal_fmodf_kernel.exit.i2613
	selp.f32 	%f648, %f643, %f647, %p206;
	setp.gt.f32 	%p208, %f651, 0f4B800000;
	add.f32 	%f652, %f148, 0f3F800000;
	abs.f32 	%f672, %f738;
	setp.gtu.f32 	%p220, %f672, 0f7F800000;
	@%p220 bra 	$L__BB0_131;
// %bb.130:
	mov.b32 	%r477, %f738;
	or.b32  	%r478, %r46, %r477;
	mov.b32 	%f738, %r478;
$L__BB0_131:                            // %__nv_fmodf.exit2614
	selp.f32 	%f127, %f652, %f648, %p208;
	add.f32 	%f673, %f738, %f738;
	mov.b32 	%r479, %f673;
	and.b32  	%r480, %r479, -2147483648;
	or.b32  	%r481, %r480, 1056964608;
	mov.b32 	%f674, %r481;
	add.f32 	%f675, %f673, %f674;
	cvt.rzi.f32.f32 	%f676, %f675;
	abs.f32 	%f677, %f673;
	setp.gt.f32 	%p222, %f677, 0f4B000000;
	selp.f32 	%f678, %f673, %f676, %p222;
	cvt.rzi.f32.f32 	%f679, %f673;
	setp.lt.f32 	%p223, %f677, 0f3F000000;
	selp.f32 	%f680, %f679, %f678, %p223;
	cvt.rzi.s32.f32 	%r482, %f680;
	fma.rn.f32 	%f681, %f680, 0fBF000000, %f738;
	mul.f32 	%f682, %f681, %f681;
	fma.rn.f32 	%f683, %f682, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f684, %f682, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f685, %f683, %f682, 0fC0A55DF6;
	fma.rn.f32 	%f686, %f684, %f682, 0f4081E0CF;
	fma.rn.f32 	%f687, %f682, %f681, 0f00000000;
	fma.rn.f32 	%f688, %f686, %f682, 0fC09DE9E6;
	fma.rn.f32 	%f689, %f685, %f687, 0f00000000;
	fma.rn.f32 	%f690, %f688, %f682, 0f3F800000;
	fma.rn.f32 	%f691, %f681, 0f40490FDB, %f689;
	and.b32  	%r483, %r482, 1;
	setp.eq.b32 	%p224, %r483, 1;
	selp.f32 	%f692, %f690, %f691, %p224;
	selp.f32 	%f693, %f691, %f690, %p224;
	and.b32  	%r484, %r482, 2;
	setp.eq.s32 	%p225, %r484, 0;
	neg.f32 	%f694, %f692;
	selp.f32 	%f695, %f692, %f694, %p225;
	add.s32 	%r485, %r482, 1;
	and.b32  	%r486, %r485, 2;
	setp.eq.s32 	%p226, %r486, 0;
	sub.f32 	%f697, %f230, %f693;
	selp.f32 	%f698, %f693, %f697, %p226;
	cvt.rzi.f32.f32 	%f699, %f738;
	setp.eq.f32 	%p227, %f699, %f738;
	mul.f32 	%f700, %f738, 0f00000000;
	selp.f32 	%f150, %f700, %f695, %p227;
	abs.f32 	%f701, %f738;
	setp.gt.f32 	%p228, %f701, 0f4B800000;
	add.f32 	%f702, %f150, 0f3F800000;
	selp.f32 	%f144, %f702, %f698, %p228;
	mov.f32 	%f147, %f127;
	mov.f32 	%f149, %f144;
	@%p127 bra 	$L__BB0_133;
// %bb.132:                             // %L975
	neg.f32 	%f149, %f150;
	neg.f32 	%f147, %f148;
	mov.f32 	%f148, %f127;
	mov.f32 	%f150, %f144;
$L__BB0_133:                            // %L977
	setp.gt.u32 	%p229, %r3, 15;
	mov.u32 	%r171, 999999999;
	@%p229 bra 	$L__BB0_191;
// %bb.134:                             // %L1007
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	shl.b32 	%r494, %r3, 4;
	and.b32  	%r495, %r494, 240;
	or.b32  	%r496, %r495, %r1;
	mul.wide.u32 	%rd91, %r496, 4;
	add.s64 	%rd92, %rd1, %rd91;
	ld.global.u32 	%r497, [%rd92];
	shl.b32 	%r498, %r497, 16;
	cvt.s32.s16 	%r86, %r497;
	shr.s32 	%r87, %r497, 16;
	or.b32  	%r499, %r498, 65535;
	setp.lt.u32 	%p230, %r499, 1114111;
	setp.lt.u32 	%p231, %r497, 1048576;
	and.pred  	%p232, %p230, %p231;
	@%p232 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_135;
$L__BB0_190:                            // %L1247
	mul.lo.s32 	%r503, %r87, 546;
	mad.lo.s32 	%r171, %r86, 33, %r503;
$L__BB0_191:                            // %pass527
	add.f32 	%f207, %f746, %f746;
	mov.b32 	%r320, %f207;
	add.f32 	%f469, %f750, %f750;
	and.b32  	%r321, %r320, -2147483648;
	add.f32 	%f261, %f706, %f706;
	add.f32 	%f313, %f710, %f710;
	mov.b32 	%r417, %f469;
	or.b32  	%r322, %r321, 1056964608;
	mov.b32 	%r336, %f261;
	mov.b32 	%r358, %f313;
	and.b32  	%r418, %r417, -2147483648;
	add.f32 	%f521, %f726, %f726;
	add.f32 	%f571, %f730, %f730;
	mov.b32 	%f208, %r322;
	and.b32  	%r337, %r336, -2147483648;
	and.b32  	%r359, %r358, -2147483648;
	or.b32  	%r419, %r418, 1056964608;
	mov.b32 	%r431, %f521;
	mov.b32 	%r451, %f571;
	add.f32 	%f209, %f207, %f208;
	abs.f32 	%f211, %f207;
	or.b32  	%r338, %r337, 1056964608;
	or.b32  	%r360, %r359, 1056964608;
	mov.b32 	%f470, %r419;
	and.b32  	%r432, %r431, -2147483648;
	and.b32  	%r452, %r451, -2147483648;
	cvt.rzi.f32.f32 	%f210, %f209;
	setp.gt.f32 	%p40, %f211, 0f4B000000;
	mov.b32 	%f262, %r338;
	mov.b32 	%f314, %r360;
	add.f32 	%f471, %f469, %f470;
	abs.f32 	%f473, %f469;
	or.b32  	%r433, %r432, 1056964608;
	or.b32  	%r453, %r452, 1056964608;
	selp.f32 	%f212, %f207, %f210, %p40;
	cvt.rzi.f32.f32 	%f213, %f207;
	setp.lt.f32 	%p41, %f211, 0f3F000000;
	add.f32 	%f263, %f261, %f262;
	abs.f32 	%f265, %f261;
	add.f32 	%f315, %f313, %f314;
	abs.f32 	%f317, %f313;
	cvt.rzi.f32.f32 	%f472, %f471;
	setp.gt.f32 	%p142, %f473, 0f4B000000;
	mov.b32 	%f522, %r433;
	mov.b32 	%f572, %r453;
	selp.f32 	%f214, %f213, %f212, %p41;
	cvt.rzi.f32.f32 	%f264, %f263;
	setp.gt.f32 	%p60, %f265, 0f4B000000;
	cvt.rzi.f32.f32 	%f316, %f315;
	setp.gt.f32 	%p80, %f317, 0f4B000000;
	selp.f32 	%f474, %f469, %f472, %p142;
	cvt.rzi.f32.f32 	%f475, %f469;
	setp.lt.f32 	%p143, %f473, 0f3F000000;
	add.f32 	%f523, %f521, %f522;
	abs.f32 	%f525, %f521;
	add.f32 	%f573, %f571, %f572;
	abs.f32 	%f575, %f571;
	fma.rn.f32 	%f215, %f214, 0fBF000000, %f746;
	selp.f32 	%f266, %f261, %f264, %p60;
	cvt.rzi.f32.f32 	%f267, %f261;
	setp.lt.f32 	%p61, %f265, 0f3F000000;
	selp.f32 	%f318, %f313, %f316, %p80;
	cvt.rzi.f32.f32 	%f319, %f313;
	setp.lt.f32 	%p81, %f317, 0f3F000000;
	selp.f32 	%f476, %f475, %f474, %p143;
	cvt.rzi.f32.f32 	%f524, %f523;
	setp.gt.f32 	%p162, %f525, 0f4B000000;
	cvt.rzi.f32.f32 	%f574, %f573;
	setp.gt.f32 	%p182, %f575, 0f4B000000;
	mul.f32 	%f216, %f215, %f215;
	selp.f32 	%f268, %f267, %f266, %p61;
	selp.f32 	%f320, %f319, %f318, %p81;
	fma.rn.f32 	%f477, %f476, 0fBF000000, %f750;
	selp.f32 	%f526, %f521, %f524, %p162;
	cvt.rzi.f32.f32 	%f527, %f521;
	setp.lt.f32 	%p163, %f525, 0f3F000000;
	selp.f32 	%f576, %f571, %f574, %p182;
	cvt.rzi.f32.f32 	%f577, %f571;
	setp.lt.f32 	%p183, %f575, 0f3F000000;
	fma.rn.f32 	%f217, %f216, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f218, %f216, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f269, %f268, 0fBF000000, %f706;
	fma.rn.f32 	%f321, %f320, 0fBF000000, %f710;
	mul.f32 	%f478, %f477, %f477;
	selp.f32 	%f528, %f527, %f526, %p163;
	selp.f32 	%f578, %f577, %f576, %p183;
	cvt.rzi.s32.f32 	%r323, %f214;
	fma.rn.f32 	%f219, %f217, %f216, 0fC0A55DF6;
	fma.rn.f32 	%f220, %f218, %f216, 0f4081E0CF;
	fma.rn.f32 	%f221, %f216, %f215, 0f00000000;
	mul.f32 	%f270, %f269, %f269;
	mul.f32 	%f322, %f321, %f321;
	fma.rn.f32 	%f479, %f478, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f480, %f478, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f529, %f528, 0fBF000000, %f726;
	fma.rn.f32 	%f579, %f578, 0fBF000000, %f730;
	fma.rn.f32 	%f222, %f220, %f216, 0fC09DE9E6;
	fma.rn.f32 	%f223, %f219, %f221, 0f00000000;
	and.b32  	%r324, %r323, 1;
	fma.rn.f32 	%f271, %f270, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f272, %f270, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f323, %f322, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f324, %f322, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r420, %f476;
	fma.rn.f32 	%f481, %f479, %f478, 0fC0A55DF6;
	fma.rn.f32 	%f482, %f480, %f478, 0f4081E0CF;
	fma.rn.f32 	%f483, %f478, %f477, 0f00000000;
	mul.f32 	%f530, %f529, %f529;
	mul.f32 	%f580, %f579, %f579;
	fma.rn.f32 	%f224, %f222, %f216, 0f3F800000;
	fma.rn.f32 	%f225, %f215, 0f40490FDB, %f223;
	setp.eq.b32 	%p42, %r324, 1;
	cvt.rzi.s32.f32 	%r339, %f268;
	fma.rn.f32 	%f273, %f271, %f270, 0fC0A55DF6;
	fma.rn.f32 	%f274, %f272, %f270, 0f4081E0CF;
	fma.rn.f32 	%f275, %f270, %f269, 0f00000000;
	cvt.rzi.s32.f32 	%r361, %f320;
	fma.rn.f32 	%f325, %f323, %f322, 0fC0A55DF6;
	fma.rn.f32 	%f326, %f324, %f322, 0f4081E0CF;
	fma.rn.f32 	%f327, %f322, %f321, 0f00000000;
	fma.rn.f32 	%f484, %f482, %f478, 0fC09DE9E6;
	fma.rn.f32 	%f485, %f481, %f483, 0f00000000;
	and.b32  	%r421, %r420, 1;
	fma.rn.f32 	%f531, %f530, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f532, %f530, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f581, %f580, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f582, %f580, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f226, %f224, %f225, %p42;
	and.b32  	%r325, %r323, 2;
	fma.rn.f32 	%f276, %f274, %f270, 0fC09DE9E6;
	fma.rn.f32 	%f277, %f273, %f275, 0f00000000;
	and.b32  	%r340, %r339, 1;
	fma.rn.f32 	%f328, %f326, %f322, 0fC09DE9E6;
	fma.rn.f32 	%f329, %f325, %f327, 0f00000000;
	and.b32  	%r362, %r361, 1;
	fma.rn.f32 	%f486, %f484, %f478, 0f3F800000;
	fma.rn.f32 	%f487, %f477, 0f40490FDB, %f485;
	setp.eq.b32 	%p144, %r421, 1;
	cvt.rzi.s32.f32 	%r434, %f528;
	fma.rn.f32 	%f533, %f531, %f530, 0fC0A55DF6;
	fma.rn.f32 	%f534, %f532, %f530, 0f4081E0CF;
	fma.rn.f32 	%f535, %f530, %f529, 0f00000000;
	cvt.rzi.s32.f32 	%r454, %f578;
	fma.rn.f32 	%f583, %f581, %f580, 0fC0A55DF6;
	fma.rn.f32 	%f584, %f582, %f580, 0f4081E0CF;
	fma.rn.f32 	%f585, %f580, %f579, 0f00000000;
	setp.eq.s32 	%p43, %r325, 0;
	neg.f32 	%f228, %f226;
	add.s32 	%r326, %r323, 1;
	cvt.rzi.f32.f32 	%f233, %f746;
	fma.rn.f32 	%f278, %f276, %f270, 0f3F800000;
	fma.rn.f32 	%f279, %f269, 0f40490FDB, %f277;
	setp.eq.b32 	%p62, %r340, 1;
	fma.rn.f32 	%f330, %f328, %f322, 0f3F800000;
	fma.rn.f32 	%f331, %f321, 0f40490FDB, %f329;
	setp.eq.b32 	%p82, %r362, 1;
	selp.f32 	%f488, %f486, %f487, %p144;
	and.b32  	%r422, %r420, 2;
	fma.rn.f32 	%f536, %f534, %f530, 0fC09DE9E6;
	fma.rn.f32 	%f537, %f533, %f535, 0f00000000;
	and.b32  	%r435, %r434, 1;
	fma.rn.f32 	%f586, %f584, %f580, 0fC09DE9E6;
	fma.rn.f32 	%f587, %f583, %f585, 0f00000000;
	and.b32  	%r455, %r454, 1;
	selp.f32 	%f227, %f225, %f224, %p42;
	selp.f32 	%f229, %f226, %f228, %p43;
	and.b32  	%r327, %r326, 2;
	setp.eq.f32 	%p45, %f233, %f746;
	mul.f32 	%f234, %f746, 0f00000000;
	selp.f32 	%f280, %f278, %f279, %p62;
	and.b32  	%r341, %r339, 2;
	selp.f32 	%f332, %f330, %f331, %p82;
	and.b32  	%r363, %r361, 2;
	setp.eq.s32 	%p145, %r422, 0;
	neg.f32 	%f490, %f488;
	add.s32 	%r423, %r420, 1;
	cvt.rzi.f32.f32 	%f495, %f750;
	fma.rn.f32 	%f538, %f536, %f530, 0f3F800000;
	fma.rn.f32 	%f539, %f529, 0f40490FDB, %f537;
	setp.eq.b32 	%p164, %r435, 1;
	fma.rn.f32 	%f588, %f586, %f580, 0f3F800000;
	fma.rn.f32 	%f589, %f579, 0f40490FDB, %f587;
	setp.eq.b32 	%p184, %r455, 1;
	setp.eq.s32 	%p44, %r327, 0;
	sub.f32 	%f231, %f230, %f227;
	selp.f32 	%f235, %f234, %f229, %p45;
	abs.f32 	%f236, %f746;
	setp.eq.s32 	%p63, %r341, 0;
	neg.f32 	%f282, %f280;
	add.s32 	%r342, %r339, 1;
	cvt.rzi.f32.f32 	%f287, %f706;
	setp.eq.s32 	%p83, %r363, 0;
	neg.f32 	%f334, %f332;
	add.s32 	%r364, %r361, 1;
	cvt.rzi.f32.f32 	%f339, %f710;
	selp.f32 	%f489, %f487, %f486, %p144;
	selp.f32 	%f491, %f488, %f490, %p145;
	and.b32  	%r424, %r423, 2;
	setp.eq.f32 	%p147, %f495, %f750;
	mul.f32 	%f496, %f750, 0f00000000;
	selp.f32 	%f540, %f538, %f539, %p164;
	and.b32  	%r436, %r434, 2;
	selp.f32 	%f590, %f588, %f589, %p184;
	and.b32  	%r456, %r454, 2;
	selp.f32 	%f232, %f227, %f231, %p44;
	setp.gt.f32 	%p46, %f236, 0f4B800000;
	add.f32 	%f237, %f235, 0f3F800000;
	selp.f32 	%f281, %f279, %f278, %p62;
	selp.f32 	%f283, %f280, %f282, %p63;
	and.b32  	%r343, %r342, 2;
	setp.eq.f32 	%p65, %f287, %f706;
	mul.f32 	%f288, %f706, 0f00000000;
	selp.f32 	%f333, %f331, %f330, %p82;
	selp.f32 	%f335, %f332, %f334, %p83;
	and.b32  	%r365, %r364, 2;
	setp.eq.f32 	%p85, %f339, %f710;
	mul.f32 	%f340, %f710, 0f00000000;
	setp.eq.s32 	%p146, %r424, 0;
	sub.f32 	%f493, %f230, %f489;
	selp.f32 	%f497, %f496, %f491, %p147;
	abs.f32 	%f498, %f750;
	setp.eq.s32 	%p165, %r436, 0;
	neg.f32 	%f542, %f540;
	add.s32 	%r437, %r434, 1;
	cvt.rzi.f32.f32 	%f547, %f726;
	setp.eq.s32 	%p185, %r456, 0;
	neg.f32 	%f592, %f590;
	add.s32 	%r457, %r454, 1;
	cvt.rzi.f32.f32 	%f597, %f730;
	selp.f32 	%f238, %f237, %f232, %p46;
	setp.eq.s32 	%p64, %r343, 0;
	sub.f32 	%f285, %f230, %f281;
	selp.f32 	%f16, %f288, %f283, %p65;
	abs.f32 	%f289, %f706;
	setp.eq.s32 	%p84, %r365, 0;
	sub.f32 	%f337, %f230, %f333;
	selp.f32 	%f341, %f340, %f335, %p85;
	abs.f32 	%f342, %f710;
	selp.f32 	%f494, %f489, %f493, %p146;
	setp.gt.f32 	%p148, %f498, 0f4B800000;
	add.f32 	%f499, %f497, 0f3F800000;
	selp.f32 	%f541, %f539, %f538, %p164;
	selp.f32 	%f543, %f540, %f542, %p165;
	and.b32  	%r438, %r437, 2;
	setp.eq.f32 	%p167, %f547, %f726;
	mul.f32 	%f548, %f726, 0f00000000;
	selp.f32 	%f591, %f589, %f588, %p184;
	selp.f32 	%f593, %f590, %f592, %p185;
	and.b32  	%r458, %r457, 2;
	setp.eq.f32 	%p187, %f597, %f730;
	mul.f32 	%f598, %f730, 0f00000000;
	mov.b32 	%r316, %f238;
	mov.b32 	%r319, %f235;
	selp.f32 	%f286, %f281, %f285, %p64;
	setp.gt.f32 	%p66, %f289, 0f4B800000;
	add.f32 	%f290, %f16, 0f3F800000;
	selp.f32 	%f338, %f333, %f337, %p84;
	setp.gt.f32 	%p86, %f342, 0f4B800000;
	add.f32 	%f343, %f341, 0f3F800000;
	selp.f32 	%f500, %f499, %f494, %p148;
	setp.eq.s32 	%p166, %r438, 0;
	sub.f32 	%f545, %f230, %f541;
	selp.f32 	%f94, %f548, %f543, %p167;
	abs.f32 	%f549, %f726;
	setp.eq.s32 	%p186, %r458, 0;
	sub.f32 	%f595, %f230, %f591;
	selp.f32 	%f599, %f598, %f593, %p187;
	abs.f32 	%f600, %f730;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r315, %r319, -2147483648;
	selp.f32 	%f17, %f290, %f286, %p66;
	selp.f32 	%f344, %f343, %f338, %p86;
	mov.b32 	%r413, %f500;
	mov.b32 	%r416, %f497;
	selp.f32 	%f546, %f541, %f545, %p166;
	setp.gt.f32 	%p168, %f549, 0f4B800000;
	add.f32 	%f550, %f94, 0f3F800000;
	selp.f32 	%f596, %f591, %f595, %p186;
	setp.gt.f32 	%p188, %f600, 0f4B800000;
	add.f32 	%f601, %f599, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r314, %r316, %r315;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r317, %r319, %r316;
	// end inline asm
	mov.b32 	%r354, %f344;
	mov.b32 	%r353, %f17;
	mov.b32 	%r357, %f341;
	mov.b32 	%r356, %f16;
	mov.b32 	%r400, %f75;
	mov.b32 	%r401, %f77;
	mov.b32 	%r403, %f76;
	mov.b32 	%r404, %f78;
	xor.b32  	%r412, %r416, -2147483648;
	selp.f32 	%f95, %f550, %f546, %p168;
	selp.f32 	%f602, %f601, %f596, %p188;
	// begin inline asm
	cvt.rn.f16x2.f32 %r352, %r354, %r353;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r355, %r357, %r356;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r399, %r401, %r400;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r402, %r404, %r403;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r411, %r413, %r412;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r414, %r416, %r413;
	// end inline asm
	mov.b32 	%r447, %f602;
	mov.b32 	%r446, %f95;
	mov.b32 	%r450, %f599;
	mov.b32 	%r449, %f94;
	// begin inline asm
	cvt.rn.f16x2.f32 %r445, %r447, %r446;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r448, %r450, %r449;
	// end inline asm
	mov.b32 	%r488, %f147;
	mov.b32 	%r489, %f149;
	// begin inline asm
	cvt.rn.f16x2.f32 %r487, %r489, %r488;
	// end inline asm
	mov.b32 	%r491, %f148;
	mov.b32 	%r492, %f150;
	// begin inline asm
	cvt.rn.f16x2.f32 %r490, %r492, %r491;
	// end inline asm
	shl.b32 	%r505, %r3, 6;
	and.b32  	%r506, %r505, 192;
	and.b32  	%r507, %r147, 1;
	shr.u32 	%r508, %r3, 3;
	and.b32  	%r509, %r508, 2;
	or.b32  	%r510, %r507, %r509;
	shl.b32 	%r511, %r510, 4;
	bfe.u32 	%r512, %r3, 3, 1;
	shl.b32 	%r513, %r1, 1;
	and.b32  	%r514, %r513, 14;
	or.b32  	%r515, %r512, %r514;
	or.b32  	%r516, %r511, %r506;
	or.b32  	%r517, %r516, %r5;
	or.b32  	%r518, %r517, %r515;
	mul.wide.u32 	%rd98, %r518, 4;
	add.s64 	%rd99, %rd2, %rd98;
	ld.global.u32 	%r172, [%rd99];
	ld.global.u32 	%r173, [%rd99+1024];
	shl.b32 	%r519, %r285, 13;
	shl.b32 	%r520, %r289, 7;
	add.s32 	%r174, %r520, %r519;
	shl.b32 	%r175, %r3, 2;
	shl.b32 	%r176, %r4, 7;
	and.b32  	%r177, %r3, 16;
	shr.u32 	%r521, %r3, 4;
	and.b32  	%r522, %r159, 30;
	or.b32  	%r523, %r522, %r521;
	mul.lo.s32 	%r524, %r523, 257;
	and.b32  	%r525, %r2, 224;
	shr.u32 	%r526, %r1, 3;
	mad.lo.s32 	%r527, %r526, 257, %r525;
	or.b32  	%r528, %r526, 2;
	mad.lo.s32 	%r529, %r528, 257, %r525;
	or.b32  	%r530, %r526, 4;
	mad.lo.s32 	%r531, %r530, 257, %r525;
	or.b32  	%r532, %r526, 6;
	mad.lo.s32 	%r533, %r532, 257, %r525;
	or.b32  	%r534, %r526, 8;
	mad.lo.s32 	%r535, %r534, 257, %r525;
	or.b32  	%r536, %r526, 10;
	mad.lo.s32 	%r537, %r536, 257, %r525;
	or.b32  	%r538, %r526, 12;
	mad.lo.s32 	%r539, %r538, 257, %r525;
	or.b32  	%r540, %r526, 14;
	mad.lo.s32 	%r541, %r540, 257, %r525;
	or.b32  	%r542, %r526, 16;
	mad.lo.s32 	%r543, %r542, 257, %r525;
	or.b32  	%r544, %r526, 18;
	mad.lo.s32 	%r545, %r544, 257, %r525;
	or.b32  	%r546, %r526, 20;
	mad.lo.s32 	%r547, %r546, 257, %r525;
	or.b32  	%r548, %r526, 22;
	mad.lo.s32 	%r549, %r548, 257, %r525;
	or.b32  	%r550, %r526, 24;
	mad.lo.s32 	%r551, %r550, 257, %r525;
	or.b32  	%r552, %r526, 26;
	mad.lo.s32 	%r553, %r552, 257, %r525;
	or.b32  	%r554, %r526, 28;
	mad.lo.s32 	%r555, %r554, 257, %r525;
	or.b32  	%r556, %r526, 30;
	mad.lo.s32 	%r557, %r556, 257, %r525;
	mul.lo.s32 	%r558, %r146, 2184;
	mad.lo.s32 	%r559, %r510, 546, %r558;
	mad.lo.s32 	%r560, %r515, 33, %r559;
	setp.lt.u32 	%p234, %r3, 4;
	setp.eq.s32 	%p235, %r147, 4;
	setp.eq.s32 	%p236, %r147, 5;
	and.b32  	%r561, %r3, 1;
	neg.s32 	%r562, %r561;
	and.b32  	%r563, %r562, 2064;
	bfe.s32 	%r564, %r3, 3, 1;
	and.b32  	%r565, %r3, 8;
	setp.eq.s32 	%p237, %r565, 0;
	and.b32  	%r566, %r564, 258;
	selp.b32 	%r567, 0, 1032, %p127;
	bfe.s32 	%r568, %r3, 2, 1;
	and.b32  	%r569, %r568, 516;
	or.b32  	%r570, %r514, %r521;
	or.b32  	%r571, %r566, %r563;
	or.b32  	%r572, %r571, %r567;
	or.b32  	%r573, %r572, %r569;
	add.s32 	%r178, %r573, %r570;
	and.b32  	%r574, %r1, 1;
	neg.s32 	%r575, %r574;
	and.b32  	%r576, %r575, 2064;
	and.b32  	%r577, %r175, 12;
	mul.lo.s32 	%r578, %r526, 258;
	bfe.s32 	%r579, %r1, 1, 1;
	and.b32  	%r580, %r1, 2;
	setp.eq.s32 	%p238, %r580, 0;
	and.b32  	%r581, %r579, 1032;
	bfe.s32 	%r582, %r1, 2, 1;
	and.b32  	%r583, %r1, 4;
	setp.eq.s32 	%p239, %r583, 0;
	and.b32  	%r584, %r582, 516;
	and.b32  	%r585, %r564, 4144;
	or.b32  	%r586, %r576, %r510;
	add.s32 	%r587, %r578, %r577;
	add.s32 	%r588, %r587, %r581;
	add.s32 	%r589, %r588, %r584;
	add.s32 	%r590, %r589, %r585;
	add.s32 	%r591, %r590, %r586;
	mul.wide.u32 	%rd100, %r591, 4;
	mov.u64 	%rd101, shmem;
	add.s64 	%rd16, %rd101, %rd100;
	cvt.u64.u32 	%rd102, %r586;
	selp.b64 	%rd103, 0, 4144, %p237;
	selp.b64 	%rd104, 0, 516, %p239;
	selp.b64 	%rd105, 0, 1032, %p238;
	cvt.u64.u32 	%rd106, %r578;
	cvt.u64.u32 	%rd107, %r577;
	add.s64 	%rd108, %rd107, %rd106;
	add.s64 	%rd109, %rd108, %rd105;
	add.s64 	%rd110, %rd109, %rd104;
	add.s64 	%rd111, %rd110, %rd103;
	add.s64 	%rd112, %rd111, %rd102;
	shl.b64 	%rd113, %rd112, 2;
	add.s64 	%rd17, %rd101, %rd113;
	add.s32 	%r592, %r587, %r576;
	add.s32 	%r593, %r592, %r510;
	add.s32 	%r594, %r593, %r581;
	add.s32 	%r595, %r594, %r584;
	add.s32 	%r596, %r595, %r585;
	shl.b32 	%r597, %r287, 20;
	shl.b32 	%r598, %r291, 9;
	add.s32 	%r599, %r598, %r597;
	and.b32  	%r600, %r3, 15;
	or.b32  	%r601, %r2, %r177;
	or.b32  	%r602, %r600, %r5;
	or.b32  	%r179, %r602, %r601;
	cvt.s64.s32 	%rd18, %r599;
	add.s32 	%r603, %r1, %r524;
	mul.wide.u32 	%rd114, %r603, 4;
	add.s64 	%rd19, %rd101, %rd114;
	cvt.u64.u32 	%rd115, %r1;
	cvt.u64.u32 	%rd20, %r524;
	add.s64 	%rd116, %rd20, %rd115;
	shl.b64 	%rd117, %rd116, 2;
	add.s64 	%rd21, %rd101, %rd117;
	add.s32 	%r604, %r527, %r3;
	mul.wide.u32 	%rd118, %r604, 4;
	add.s64 	%rd22, %rd101, %rd118;
	add.s32 	%r605, %r529, %r3;
	mul.wide.u32 	%rd119, %r605, 4;
	add.s64 	%rd23, %rd101, %rd119;
	add.s32 	%r606, %r531, %r3;
	mul.wide.u32 	%rd120, %r606, 4;
	add.s64 	%rd24, %rd101, %rd120;
	add.s32 	%r607, %r533, %r3;
	mul.wide.u32 	%rd121, %r607, 4;
	add.s64 	%rd25, %rd101, %rd121;
	add.s32 	%r608, %r535, %r3;
	mul.wide.u32 	%rd122, %r608, 4;
	add.s64 	%rd26, %rd101, %rd122;
	add.s32 	%r609, %r537, %r3;
	mul.wide.u32 	%rd123, %r609, 4;
	add.s64 	%rd27, %rd101, %rd123;
	add.s32 	%r610, %r539, %r3;
	mul.wide.u32 	%rd124, %r610, 4;
	add.s64 	%rd28, %rd101, %rd124;
	add.s32 	%r611, %r541, %r3;
	mul.wide.u32 	%rd125, %r611, 4;
	add.s64 	%rd29, %rd101, %rd125;
	add.s32 	%r612, %r543, %r3;
	mul.wide.u32 	%rd126, %r612, 4;
	add.s64 	%rd30, %rd101, %rd126;
	add.s32 	%r613, %r545, %r3;
	mul.wide.u32 	%rd127, %r613, 4;
	add.s64 	%rd31, %rd101, %rd127;
	add.s32 	%r614, %r547, %r3;
	mul.wide.u32 	%rd128, %r614, 4;
	add.s64 	%rd32, %rd101, %rd128;
	add.s32 	%r615, %r549, %r3;
	mul.wide.u32 	%rd129, %r615, 4;
	add.s64 	%rd33, %rd101, %rd129;
	add.s32 	%r616, %r551, %r3;
	mul.wide.u32 	%rd130, %r616, 4;
	add.s64 	%rd34, %rd101, %rd130;
	add.s32 	%r617, %r553, %r3;
	mul.wide.u32 	%rd131, %r617, 4;
	add.s64 	%rd35, %rd101, %rd131;
	add.s32 	%r618, %r555, %r3;
	mul.wide.u32 	%rd132, %r618, 4;
	add.s64 	%rd36, %rd101, %rd132;
	add.s32 	%r619, %r557, %r3;
	mul.wide.u32 	%rd133, %r619, 4;
	add.s64 	%rd37, %rd101, %rd133;
	add.s32 	%r620, %r560, %r526;
	mul.wide.u32 	%rd134, %r620, 4;
	add.s64 	%rd38, %rd101, %rd134;
	add.s32 	%r621, %r560, %r528;
	mul.wide.u32 	%rd135, %r621, 4;
	add.s64 	%rd39, %rd101, %rd135;
	add.s32 	%r622, %r560, %r530;
	mul.wide.u32 	%rd136, %r622, 4;
	add.s64 	%rd40, %rd101, %rd136;
	add.s32 	%r623, %r560, %r532;
	mul.wide.u32 	%rd137, %r623, 4;
	add.s64 	%rd41, %rd101, %rd137;
	add.s32 	%r624, %r560, %r534;
	mul.wide.u32 	%rd138, %r624, 4;
	add.s64 	%rd42, %rd101, %rd138;
	add.s32 	%r625, %r560, %r536;
	mul.wide.u32 	%rd139, %r625, 4;
	add.s64 	%rd43, %rd101, %rd139;
	add.s32 	%r626, %r560, %r538;
	mul.wide.u32 	%rd140, %r626, 4;
	add.s64 	%rd44, %rd101, %rd140;
	add.s32 	%r627, %r560, %r540;
	mul.wide.u32 	%rd141, %r627, 4;
	add.s64 	%rd45, %rd101, %rd141;
	add.s32 	%r628, %r560, %r542;
	mul.wide.u32 	%rd142, %r628, 4;
	add.s64 	%rd46, %rd101, %rd142;
	add.s32 	%r629, %r560, %r544;
	mul.wide.u32 	%rd143, %r629, 4;
	add.s64 	%rd47, %rd101, %rd143;
	add.s32 	%r630, %r560, %r546;
	mul.wide.u32 	%rd144, %r630, 4;
	add.s64 	%rd48, %rd101, %rd144;
	add.s32 	%r631, %r560, %r548;
	mul.wide.u32 	%rd145, %r631, 4;
	add.s64 	%rd49, %rd101, %rd145;
	add.s32 	%r632, %r560, %r550;
	mul.wide.u32 	%rd146, %r632, 4;
	add.s64 	%rd50, %rd101, %rd146;
	add.s32 	%r633, %r560, %r552;
	mul.wide.u32 	%rd147, %r633, 4;
	add.s64 	%rd51, %rd101, %rd147;
	add.s32 	%r634, %r560, %r554;
	mul.wide.u32 	%rd148, %r634, 4;
	add.s64 	%rd52, %rd101, %rd148;
	add.s32 	%r635, %r560, %r556;
	mul.wide.u32 	%rd149, %r635, 4;
	add.s64 	%rd53, %rd101, %rd149;
	add.s32 	%r636, %r147, -1;
	setp.lt.u32 	%p240, %r636, 3;
	or.pred  	%p241, %p234, %p240;
	or.pred  	%p242, %p241, %p235;
	and.b32  	%r637, %r3, 24;
	setp.eq.s32 	%p243, %r637, 24;
	or.pred  	%p244, %p236, %p243;
	selp.b32 	%r180, 1145324612, -286331154, %p241;
	or.pred  	%p1, %p242, %p244;
	shl.b32 	%r181, %r526, 5;
	add.s32 	%r638, %r178, %r181;
	mul.wide.u32 	%rd150, %r638, 4;
	add.s64 	%rd54, %rd101, %rd150;
	cvt.u64.u32 	%rd151, %r181;
	cvt.u64.u32 	%rd152, %r570;
	cvt.u64.u32 	%rd153, %r573;
	add.s64 	%rd55, %rd153, %rd152;
	add.s64 	%rd154, %rd55, %rd151;
	shl.b64 	%rd155, %rd154, 2;
	add.s64 	%rd58, %rd101, %rd155;
	shl.b32 	%r639, %r528, 5;
	add.s32 	%r640, %r178, %r639;
	mul.wide.u32 	%rd156, %r640, 4;
	add.s64 	%rd59, %rd101, %rd156;
	cvt.u64.u32 	%rd157, %r639;
	add.s64 	%rd158, %rd55, %rd157;
	shl.b64 	%rd159, %rd158, 2;
	add.s64 	%rd61, %rd101, %rd159;
	shl.b32 	%r641, %r530, 5;
	add.s32 	%r642, %r178, %r641;
	mul.wide.u32 	%rd160, %r642, 4;
	add.s64 	%rd62, %rd101, %rd160;
	cvt.u64.u32 	%rd161, %r641;
	add.s64 	%rd162, %rd55, %rd161;
	shl.b64 	%rd163, %rd162, 2;
	add.s64 	%rd64, %rd101, %rd163;
	shl.b32 	%r643, %r532, 5;
	add.s32 	%r644, %r178, %r643;
	mul.wide.u32 	%rd164, %r644, 4;
	add.s64 	%rd65, %rd101, %rd164;
	cvt.u64.u32 	%rd165, %r643;
	add.s64 	%rd166, %rd55, %rd165;
	shl.b64 	%rd167, %rd166, 2;
	add.s64 	%rd67, %rd101, %rd167;
	add.s32 	%r645, %r596, 32;
	mul.wide.u32 	%rd168, %r645, 4;
	add.s64 	%rd68, %rd101, %rd168;
	add.s32 	%r646, %r596, 48;
	mul.wide.u32 	%rd169, %r646, 4;
	add.s64 	%rd69, %rd101, %rd169;
	add.s32 	%r647, %r596, 64;
	mul.wide.u32 	%rd170, %r647, 4;
	add.s64 	%rd70, %rd101, %rd170;
	add.s32 	%r648, %r596, 80;
	mul.wide.u32 	%rd171, %r648, 4;
	add.s64 	%rd71, %rd101, %rd171;
	add.s32 	%r649, %r596, 96;
	mul.wide.u32 	%rd172, %r649, 4;
	add.s64 	%rd72, %rd101, %rd172;
	add.s32 	%r650, %r596, 112;
	mul.wide.u32 	%rd173, %r650, 4;
	add.s64 	%rd73, %rd101, %rd173;
	add.s32 	%r651, %r596, 128;
	mul.wide.u32 	%rd174, %r651, 4;
	add.s64 	%rd74, %rd101, %rd174;
	add.s32 	%r652, %r596, 144;
	mul.wide.u32 	%rd175, %r652, 4;
	add.s64 	%rd75, %rd101, %rd175;
	add.s32 	%r653, %r596, 160;
	mul.wide.u32 	%rd176, %r653, 4;
	add.s64 	%rd76, %rd101, %rd176;
	add.s32 	%r654, %r596, 176;
	mul.wide.u32 	%rd177, %r654, 4;
	add.s64 	%rd77, %rd101, %rd177;
	add.s32 	%r655, %r596, 192;
	mul.wide.u32 	%rd178, %r655, 4;
	add.s64 	%rd78, %rd101, %rd178;
	add.s32 	%r656, %r596, 208;
	mul.wide.u32 	%rd179, %r656, 4;
	add.s64 	%rd79, %rd101, %rd179;
	add.s32 	%r657, %r596, 224;
	mul.wide.u32 	%rd180, %r657, 4;
	add.s64 	%rd80, %rd101, %rd180;
	add.s32 	%r658, %r596, 240;
	mul.wide.u32 	%rd181, %r658, 4;
	add.s64 	%rd81, %rd101, %rd181;
	mov.u32 	%r89, 0;
	setp.eq.s32 	%p246, %r177, 0;
	mov.u16 	%rs38, 25600;
	mov.u16 	%rs40, 21504;
	mov.u16 	%rs44, 18432;
	mov.u32 	%r3459, %r89;
	mov.u32 	%r3460, %r89;
	mov.u32 	%r3461, %r89;
	bra.uni 	$L__BB0_192;
$L__BB0_163:                            // %L47585
                                        //   in Loop: Header=BB0_192 Depth=1
	add.s32 	%r145, %r89, 64;
	setp.ne.s32 	%p319, %r89, 960;
	mov.u32 	%r89, %r145;
	@%p319 bra 	$L__BB0_192;
	bra.uni 	$L__BB0_164;
$L__BB0_192:                            // %L1602
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_210 Depth 2
                                        //     Child Loop BB0_154 Depth 2
	add.s32 	%r659, %r89, %r285;
	setp.lt.s32 	%p245, %r659, %r286;
	@%p245 bra 	$L__BB0_193;
	bra.uni 	$L__BB0_164;
$L__BB0_193:                            // %pass780
                                        //   in Loop: Header=BB0_192 Depth=1
	cvt.u32.u64 	%r852, %rd20;
	or.b32  	%r853, %r89, %r1;
	shl.b32 	%r854, %r853, 13;
	and.b32  	%r855, %r854, 7987200;
	or.b32  	%r856, %r855, %r175;
	or.b32  	%r857, %r856, %r176;
	add.s32 	%r858, %r174, %r857;
	shr.s32 	%r859, %r858, 31;
	shr.u32 	%r860, %r859, 9;
	add.s32 	%r861, %r858, %r860;
	shr.s32 	%r862, %r861, 23;
	setp.lt.s32 	%p247, %r858, 0;
	and.b32  	%r863, %r861, -8388608;
	setp.ne.s32 	%p248, %r863, %r858;
	and.pred  	%p249, %p247, %p248;
	selp.u32 	%r864, 1, 0, %p249;
	sub.s32 	%r865, %r864, %r862;
	shl.b32 	%r866, %r865, 23;
	add.s32 	%r867, %r866, %r858;
	mul.wide.s32 	%rd182, %r867, 4;
	add.s64 	%rd183, %rd3, %rd182;
	ld.global.v4.u32 	{%r868, %r869, %r870, %r871}, [%rd183];
	or.b32  	%r872, %r853, 16;
	shl.b32 	%r873, %r872, 13;
	and.b32  	%r874, %r873, 8118272;
	or.b32  	%r875, %r874, %r175;
	or.b32  	%r876, %r875, %r176;
	add.s32 	%r877, %r174, %r876;
	shr.s32 	%r878, %r877, 31;
	shr.u32 	%r879, %r878, 9;
	add.s32 	%r880, %r877, %r879;
	shr.s32 	%r881, %r880, 23;
	setp.lt.s32 	%p250, %r877, 0;
	and.b32  	%r882, %r880, -8388608;
	setp.ne.s32 	%p251, %r882, %r877;
	and.pred  	%p252, %p250, %p251;
	selp.u32 	%r883, 1, 0, %p252;
	sub.s32 	%r884, %r883, %r881;
	shl.b32 	%r885, %r884, 23;
	add.s32 	%r886, %r885, %r877;
	mul.wide.s32 	%rd184, %r886, 4;
	add.s64 	%rd185, %rd3, %rd184;
	ld.global.v4.u32 	{%r887, %r888, %r889, %r890}, [%rd185];
	and.b32  	%r891, %r89, 960;
	or.b32  	%r892, %r1, %r891;
	shl.b32 	%r893, %r892, 13;
	or.b32  	%r894, %r893, %r175;
	or.b32  	%r895, %r894, %r176;
	or.b32  	%r896, %r895, 262144;
	add.s32 	%r897, %r174, %r896;
	shr.s32 	%r898, %r897, 31;
	shr.u32 	%r899, %r898, 9;
	add.s32 	%r900, %r897, %r899;
	shr.s32 	%r901, %r900, 23;
	setp.lt.s32 	%p253, %r897, 0;
	and.b32  	%r902, %r900, -8388608;
	setp.ne.s32 	%p254, %r902, %r897;
	and.pred  	%p255, %p253, %p254;
	selp.u32 	%r903, 1, 0, %p255;
	sub.s32 	%r904, %r903, %r901;
	shl.b32 	%r905, %r904, 23;
	add.s32 	%r906, %r905, %r897;
	mul.wide.s32 	%rd186, %r906, 4;
	add.s64 	%rd187, %rd3, %rd186;
	ld.global.v4.u32 	{%r907, %r908, %r909, %r910}, [%rd187];
	or.b32  	%r911, %r895, 393216;
	add.s32 	%r912, %r174, %r911;
	shr.s32 	%r913, %r912, 31;
	shr.u32 	%r914, %r913, 9;
	add.s32 	%r915, %r912, %r914;
	shr.s32 	%r916, %r915, 23;
	setp.lt.s32 	%p256, %r912, 0;
	and.b32  	%r917, %r915, -8388608;
	setp.ne.s32 	%p257, %r917, %r912;
	and.pred  	%p258, %p256, %p257;
	selp.u32 	%r918, 1, 0, %p258;
	sub.s32 	%r919, %r918, %r916;
	shl.b32 	%r920, %r919, 23;
	add.s32 	%r921, %r920, %r912;
	mul.wide.s32 	%rd188, %r921, 4;
	add.s64 	%rd189, %rd3, %rd188;
	ld.global.v4.u32 	{%r922, %r923, %r924, %r925}, [%rd189];
	selp.b32 	%r926, %r870, %r868, %p246;
	shfl.sync.bfly.b32	%r927, %r926, 16, 31, -1;
	selp.b32 	%r662, %r868, %r927, %p246;
	selp.b32 	%r667, %r927, %r870, %p246;
	selp.b32 	%r928, %r871, %r869, %p246;
	shfl.sync.bfly.b32	%r929, %r928, 16, 31, -1;
	selp.b32 	%r670, %r869, %r929, %p246;
	selp.b32 	%r675, %r929, %r871, %p246;
	selp.b32 	%r930, %r889, %r887, %p246;
	shfl.sync.bfly.b32	%r931, %r930, 16, 31, -1;
	selp.b32 	%r678, %r887, %r931, %p246;
	selp.b32 	%r683, %r931, %r889, %p246;
	selp.b32 	%r932, %r890, %r888, %p246;
	shfl.sync.bfly.b32	%r933, %r932, 16, 31, -1;
	selp.b32 	%r686, %r888, %r933, %p246;
	selp.b32 	%r691, %r933, %r890, %p246;
	selp.b32 	%r934, %r909, %r907, %p246;
	shfl.sync.bfly.b32	%r935, %r934, 16, 31, -1;
	selp.b32 	%r694, %r907, %r935, %p246;
	selp.b32 	%r699, %r935, %r909, %p246;
	selp.b32 	%r936, %r910, %r908, %p246;
	shfl.sync.bfly.b32	%r937, %r936, 16, 31, -1;
	selp.b32 	%r702, %r908, %r937, %p246;
	selp.b32 	%r707, %r937, %r910, %p246;
	selp.b32 	%r938, %r924, %r922, %p246;
	shfl.sync.bfly.b32	%r939, %r938, 16, 31, -1;
	selp.b32 	%r710, %r922, %r939, %p246;
	selp.b32 	%r715, %r939, %r924, %p246;
	selp.b32 	%r940, %r925, %r923, %p246;
	shfl.sync.bfly.b32	%r941, %r940, 16, 31, -1;
	selp.b32 	%r718, %r923, %r941, %p246;
	selp.b32 	%r723, %r941, %r925, %p246;
	shl.b32 	%r663, %r667, 4;
	mov.u32 	%r661, 252645135;
	// begin inline asm
	lop3.b32 %r725, %r661, %r662, %r663, 202;
	// end inline asm
	shr.u32 	%r666, %r662, 4;
	// begin inline asm
	lop3.b32 %r741, %r661, %r666, %r667, 202;
	// end inline asm
	shl.b32 	%r671, %r675, 4;
	// begin inline asm
	lop3.b32 %r733, %r661, %r670, %r671, 202;
	// end inline asm
	shr.u32 	%r674, %r670, 4;
	// begin inline asm
	lop3.b32 %r749, %r661, %r674, %r675, 202;
	// end inline asm
	shl.b32 	%r679, %r683, 4;
	// begin inline asm
	lop3.b32 %r757, %r661, %r678, %r679, 202;
	// end inline asm
	shr.u32 	%r682, %r678, 4;
	// begin inline asm
	lop3.b32 %r773, %r661, %r682, %r683, 202;
	// end inline asm
	shl.b32 	%r687, %r691, 4;
	// begin inline asm
	lop3.b32 %r765, %r661, %r686, %r687, 202;
	// end inline asm
	shr.u32 	%r690, %r686, 4;
	// begin inline asm
	lop3.b32 %r781, %r661, %r690, %r691, 202;
	// end inline asm
	shl.b32 	%r695, %r699, 4;
	// begin inline asm
	lop3.b32 %r726, %r661, %r694, %r695, 202;
	// end inline asm
	shr.u32 	%r698, %r694, 4;
	// begin inline asm
	lop3.b32 %r742, %r661, %r698, %r699, 202;
	// end inline asm
	shl.b32 	%r703, %r707, 4;
	// begin inline asm
	lop3.b32 %r734, %r661, %r702, %r703, 202;
	// end inline asm
	shr.u32 	%r706, %r702, 4;
	// begin inline asm
	lop3.b32 %r750, %r661, %r706, %r707, 202;
	// end inline asm
	shl.b32 	%r711, %r715, 4;
	// begin inline asm
	lop3.b32 %r758, %r661, %r710, %r711, 202;
	// end inline asm
	shr.u32 	%r714, %r710, 4;
	// begin inline asm
	lop3.b32 %r774, %r661, %r714, %r715, 202;
	// end inline asm
	shl.b32 	%r719, %r723, 4;
	// begin inline asm
	lop3.b32 %r766, %r661, %r718, %r719, 202;
	// end inline asm
	shr.u32 	%r722, %r718, 4;
	// begin inline asm
	lop3.b32 %r782, %r661, %r722, %r723, 202;
	// end inline asm
	mov.u32 	%r727, 25152;
	// begin inline asm
	prmt.b32 %r789, %r725, %r726, %r727;
	// end inline asm
	mov.u32 	%r731, 29521;
	// begin inline asm
	prmt.b32 %r821, %r725, %r726, %r731;
	// end inline asm
	// begin inline asm
	prmt.b32 %r797, %r733, %r734, %r727;
	// end inline asm
	// begin inline asm
	prmt.b32 %r829, %r733, %r734, %r731;
	// end inline asm
	// begin inline asm
	prmt.b32 %r790, %r741, %r742, %r727;
	// end inline asm
	// begin inline asm
	prmt.b32 %r822, %r741, %r742, %r731;
	// end inline asm
	// begin inline asm
	prmt.b32 %r798, %r749, %r750, %r727;
	// end inline asm
	// begin inline asm
	prmt.b32 %r830, %r749, %r750, %r731;
	// end inline asm
	// begin inline asm
	prmt.b32 %r805, %r757, %r758, %r727;
	// end inline asm
	// begin inline asm
	prmt.b32 %r837, %r757, %r758, %r731;
	// end inline asm
	// begin inline asm
	prmt.b32 %r813, %r765, %r766, %r727;
	// end inline asm
	// begin inline asm
	prmt.b32 %r845, %r765, %r766, %r731;
	// end inline asm
	// begin inline asm
	prmt.b32 %r806, %r773, %r774, %r727;
	// end inline asm
	// begin inline asm
	prmt.b32 %r838, %r773, %r774, %r731;
	// end inline asm
	// begin inline asm
	prmt.b32 %r814, %r781, %r782, %r727;
	// end inline asm
	// begin inline asm
	prmt.b32 %r846, %r781, %r782, %r731;
	// end inline asm
	mov.u32 	%r847, 21520;
	// begin inline asm
	prmt.b32 %r788, %r789, %r790, %r847;
	// end inline asm
	mov.u32 	%r851, 30258;
	// begin inline asm
	prmt.b32 %r792, %r789, %r790, %r851;
	// end inline asm
	// begin inline asm
	prmt.b32 %r796, %r797, %r798, %r847;
	// end inline asm
	// begin inline asm
	prmt.b32 %r800, %r797, %r798, %r851;
	// end inline asm
	// begin inline asm
	prmt.b32 %r804, %r805, %r806, %r847;
	// end inline asm
	// begin inline asm
	prmt.b32 %r808, %r805, %r806, %r851;
	// end inline asm
	// begin inline asm
	prmt.b32 %r812, %r813, %r814, %r847;
	// end inline asm
	// begin inline asm
	prmt.b32 %r816, %r813, %r814, %r851;
	// end inline asm
	// begin inline asm
	prmt.b32 %r820, %r821, %r822, %r847;
	// end inline asm
	// begin inline asm
	prmt.b32 %r824, %r821, %r822, %r851;
	// end inline asm
	// begin inline asm
	prmt.b32 %r828, %r829, %r830, %r847;
	// end inline asm
	// begin inline asm
	prmt.b32 %r832, %r829, %r830, %r851;
	// end inline asm
	// begin inline asm
	prmt.b32 %r836, %r837, %r838, %r847;
	// end inline asm
	// begin inline asm
	prmt.b32 %r840, %r837, %r838, %r851;
	// end inline asm
	// begin inline asm
	prmt.b32 %r844, %r845, %r846, %r847;
	// end inline asm
	// begin inline asm
	prmt.b32 %r848, %r845, %r846, %r851;
	// end inline asm
	st.shared.u32 	[%rd19], %r788;
	st.shared.u32 	[%rd21+512], %r796;
	st.shared.u32 	[%rd21+256], %r792;
	st.shared.u32 	[%rd21+768], %r800;
	and.b32  	%r942, %r872, 31;
	add.s32 	%r943, %r942, %r852;
	mul.wide.u32 	%rd190, %r943, 4;
	add.s64 	%rd192, %rd101, %rd190;
	st.shared.u32 	[%rd192], %r804;
	cvt.u64.u32 	%rd193, %r942;
	add.s64 	%rd194, %rd20, %rd193;
	shl.b64 	%rd195, %rd194, 2;
	add.s64 	%rd196, %rd101, %rd195;
	st.shared.u32 	[%rd196+512], %r812;
	st.shared.u32 	[%rd196+256], %r808;
	st.shared.u32 	[%rd196+768], %r816;
	st.shared.u32 	[%rd21+128], %r820;
	st.shared.u32 	[%rd21+640], %r828;
	st.shared.u32 	[%rd21+384], %r824;
	st.shared.u32 	[%rd21+896], %r832;
	st.shared.u32 	[%rd196+128], %r836;
	st.shared.u32 	[%rd196+640], %r844;
	st.shared.u32 	[%rd196+384], %r840;
	st.shared.u32 	[%rd196+896], %r848;
	bar.sync 	0;
	ld.shared.u32 	%r182, [%rd22];
	ld.shared.u32 	%r183, [%rd23];
	ld.shared.u32 	%r184, [%rd24];
	ld.shared.u32 	%r185, [%rd25];
	ld.shared.u32 	%r186, [%rd26];
	ld.shared.u32 	%r187, [%rd27];
	ld.shared.u32 	%r188, [%rd28];
	ld.shared.u32 	%r189, [%rd29];
	ld.shared.u32 	%r190, [%rd30];
	ld.shared.u32 	%r191, [%rd31];
	ld.shared.u32 	%r192, [%rd32];
	ld.shared.u32 	%r193, [%rd33];
	ld.shared.u32 	%r194, [%rd34];
	ld.shared.u32 	%r195, [%rd35];
	ld.shared.u32 	%r196, [%rd36];
	ld.shared.u32 	%r197, [%rd37];
	bar.sync 	0;
	shfl.sync.idx.b32	%r198, %r171, 0, 31, -1;
	shfl.sync.idx.b32	%r199, %r171, 1, 31, -1;
	shfl.sync.idx.b32	%r200, %r171, 2, 31, -1;
	shfl.sync.idx.b32	%r201, %r171, 3, 31, -1;
	shfl.sync.idx.b32	%r202, %r171, 4, 31, -1;
	shfl.sync.idx.b32	%r203, %r171, 5, 31, -1;
	shfl.sync.idx.b32	%r204, %r171, 6, 31, -1;
	shfl.sync.idx.b32	%r205, %r171, 7, 31, -1;
	shfl.sync.idx.b32	%r206, %r171, 8, 31, -1;
	shfl.sync.idx.b32	%r207, %r171, 9, 31, -1;
	shfl.sync.idx.b32	%r208, %r171, 10, 31, -1;
	shfl.sync.idx.b32	%r209, %r171, 11, 31, -1;
	shfl.sync.idx.b32	%r210, %r171, 12, 31, -1;
	shfl.sync.idx.b32	%r211, %r171, 13, 31, -1;
	shfl.sync.idx.b32	%r212, %r171, 14, 31, -1;
	shfl.sync.idx.b32	%r213, %r171, 15, 31, -1;
	setp.eq.s32 	%p259, %r198, 999999999;
	@%p259 bra 	$L__BB0_136;
// %bb.194:                             // %pass3083
                                        //   in Loop: Header=BB0_192 Depth=1
	add.s32 	%r944, %r198, %r3;
	mul.wide.s32 	%rd197, %r944, 4;
	add.s64 	%rd199, %rd101, %rd197;
	st.shared.u32 	[%rd199], %r182;
	setp.eq.s32 	%p260, %r199, 999999999;
	@%p260 bra 	$L__BB0_137;
// %bb.195:                             // %pass3151
                                        //   in Loop: Header=BB0_192 Depth=1
	add.s32 	%r945, %r199, %r3;
	mul.wide.s32 	%rd200, %r945, 4;
	add.s64 	%rd202, %rd101, %rd200;
	st.shared.u32 	[%rd202], %r183;
	setp.eq.s32 	%p261, %r200, 999999999;
	@%p261 bra 	$L__BB0_138;
// %bb.196:                             // %pass3219
                                        //   in Loop: Header=BB0_192 Depth=1
	add.s32 	%r946, %r200, %r3;
	mul.wide.s32 	%rd203, %r946, 4;
	add.s64 	%rd205, %rd101, %rd203;
	st.shared.u32 	[%rd205], %r184;
	setp.eq.s32 	%p262, %r201, 999999999;
	@%p262 bra 	$L__BB0_139;
// %bb.197:                             // %pass3287
                                        //   in Loop: Header=BB0_192 Depth=1
	add.s32 	%r947, %r201, %r3;
	mul.wide.s32 	%rd206, %r947, 4;
	add.s64 	%rd208, %rd101, %rd206;
	st.shared.u32 	[%rd208], %r185;
	setp.eq.s32 	%p263, %r202, 999999999;
	@%p263 bra 	$L__BB0_140;
// %bb.198:                             // %pass3355
                                        //   in Loop: Header=BB0_192 Depth=1
	add.s32 	%r948, %r202, %r3;
	mul.wide.s32 	%rd209, %r948, 4;
	add.s64 	%rd211, %rd101, %rd209;
	st.shared.u32 	[%rd211], %r186;
	setp.eq.s32 	%p264, %r203, 999999999;
	@%p264 bra 	$L__BB0_141;
// %bb.199:                             // %pass3423
                                        //   in Loop: Header=BB0_192 Depth=1
	add.s32 	%r949, %r203, %r3;
	mul.wide.s32 	%rd212, %r949, 4;
	add.s64 	%rd214, %rd101, %rd212;
	st.shared.u32 	[%rd214], %r187;
	setp.eq.s32 	%p265, %r204, 999999999;
	@%p265 bra 	$L__BB0_142;
// %bb.200:                             // %pass3491
                                        //   in Loop: Header=BB0_192 Depth=1
	add.s32 	%r950, %r204, %r3;
	mul.wide.s32 	%rd215, %r950, 4;
	add.s64 	%rd217, %rd101, %rd215;
	st.shared.u32 	[%rd217], %r188;
	setp.eq.s32 	%p266, %r205, 999999999;
	@%p266 bra 	$L__BB0_143;
// %bb.201:                             // %pass3559
                                        //   in Loop: Header=BB0_192 Depth=1
	add.s32 	%r951, %r205, %r3;
	mul.wide.s32 	%rd218, %r951, 4;
	add.s64 	%rd220, %rd101, %rd218;
	st.shared.u32 	[%rd220], %r189;
	setp.eq.s32 	%p267, %r206, 999999999;
	@%p267 bra 	$L__BB0_144;
// %bb.202:                             // %pass3627
                                        //   in Loop: Header=BB0_192 Depth=1
	add.s32 	%r952, %r206, %r3;
	mul.wide.s32 	%rd221, %r952, 4;
	add.s64 	%rd223, %rd101, %rd221;
	st.shared.u32 	[%rd223], %r190;
	setp.eq.s32 	%p268, %r207, 999999999;
	@%p268 bra 	$L__BB0_145;
// %bb.203:                             // %pass3695
                                        //   in Loop: Header=BB0_192 Depth=1
	add.s32 	%r953, %r207, %r3;
	mul.wide.s32 	%rd224, %r953, 4;
	add.s64 	%rd226, %rd101, %rd224;
	st.shared.u32 	[%rd226], %r191;
	setp.eq.s32 	%p269, %r208, 999999999;
	@%p269 bra 	$L__BB0_146;
// %bb.204:                             // %pass3763
                                        //   in Loop: Header=BB0_192 Depth=1
	add.s32 	%r954, %r208, %r3;
	mul.wide.s32 	%rd227, %r954, 4;
	add.s64 	%rd229, %rd101, %rd227;
	st.shared.u32 	[%rd229], %r192;
	setp.eq.s32 	%p270, %r209, 999999999;
	@%p270 bra 	$L__BB0_147;
// %bb.205:                             // %pass3831
                                        //   in Loop: Header=BB0_192 Depth=1
	add.s32 	%r955, %r209, %r3;
	mul.wide.s32 	%rd230, %r955, 4;
	add.s64 	%rd232, %rd101, %rd230;
	st.shared.u32 	[%rd232], %r193;
	setp.eq.s32 	%p271, %r210, 999999999;
	@%p271 bra 	$L__BB0_148;
// %bb.206:                             // %pass3899
                                        //   in Loop: Header=BB0_192 Depth=1
	add.s32 	%r956, %r210, %r3;
	mul.wide.s32 	%rd233, %r956, 4;
	add.s64 	%rd235, %rd101, %rd233;
	st.shared.u32 	[%rd235], %r194;
	setp.eq.s32 	%p272, %r211, 999999999;
	@%p272 bra 	$L__BB0_149;
// %bb.207:                             // %pass3967
                                        //   in Loop: Header=BB0_192 Depth=1
	add.s32 	%r957, %r211, %r3;
	mul.wide.s32 	%rd236, %r957, 4;
	add.s64 	%rd238, %rd101, %rd236;
	st.shared.u32 	[%rd238], %r195;
	setp.eq.s32 	%p273, %r212, 999999999;
	@%p273 bra 	$L__BB0_150;
// %bb.208:                             // %pass4035
                                        //   in Loop: Header=BB0_192 Depth=1
	add.s32 	%r958, %r212, %r3;
	mul.wide.s32 	%rd239, %r958, 4;
	add.s64 	%rd241, %rd101, %rd239;
	st.shared.u32 	[%rd241], %r196;
	setp.eq.s32 	%p274, %r213, 999999999;
	@%p274 bra 	$L__BB0_151;
// %bb.209:                             // %pass4103
                                        //   in Loop: Header=BB0_192 Depth=1
	add.s32 	%r960, %r213, %r3;
	mul.wide.s32 	%rd242, %r960, 4;
	add.s64 	%rd244, %rd101, %rd242;
	st.shared.u32 	[%rd244], %r197;
	bar.sync 	0;
	ld.shared.u32 	%r214, [%rd38];
	ld.shared.u32 	%r215, [%rd39];
	ld.shared.u32 	%r216, [%rd40];
	ld.shared.u32 	%r217, [%rd41];
	ld.shared.u32 	%r218, [%rd42];
	ld.shared.u32 	%r219, [%rd43];
	ld.shared.u32 	%r220, [%rd44];
	ld.shared.u32 	%r221, [%rd45];
	ld.shared.u32 	%r222, [%rd46];
	ld.shared.u32 	%r223, [%rd47];
	ld.shared.u32 	%r224, [%rd48];
	ld.shared.u32 	%r225, [%rd49];
	ld.shared.u32 	%r226, [%rd50];
	ld.shared.u32 	%r227, [%rd51];
	ld.shared.u32 	%r228, [%rd52];
	ld.shared.u32 	%r229, [%rd53];
	bar.sync 	0;
	mov.u32 	%r3451, 16;
	bra.uni 	$L__BB0_210;
$L__BB0_152:                            // %L29905
                                        //   in Loop: Header=BB0_210 Depth=2
	bar.sync 	0;
	add.s32 	%r3451, %r3451, -8;
	setp.ne.s32 	%p296, %r3451, -16;
	@%p296 bra 	$L__BB0_210;
	bra.uni 	$L__BB0_153;
$L__BB0_210:                            // %L12262
                                        //   Parent Loop BB0_192 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p275, %r3451, 16;
	selp.b32 	%r1353, %r214, 0, %p275;
	setp.eq.s32 	%p276, %r3451, 8;
	selp.b32 	%r1354, %r218, %r1353, %p276;
	setp.eq.s32 	%p277, %r3451, 0;
	selp.b32 	%r1355, %r222, %r1354, %p277;
	setp.eq.s32 	%p278, %r3451, -8;
	selp.b32 	%r1356, %r226, %r1355, %p278;
	selp.b32 	%r1357, %r215, 0, %p275;
	selp.b32 	%r1358, %r219, %r1357, %p276;
	selp.b32 	%r1359, %r223, %r1358, %p277;
	selp.b32 	%r1360, %r227, %r1359, %p278;
	selp.b32 	%r1361, %r216, 0, %p275;
	selp.b32 	%r1362, %r220, %r1361, %p276;
	selp.b32 	%r1363, %r224, %r1362, %p277;
	selp.b32 	%r1364, %r228, %r1363, %p278;
	selp.b32 	%r1365, %r217, 0, %p275;
	selp.b32 	%r1366, %r221, %r1365, %p276;
	selp.b32 	%r1367, %r225, %r1366, %p277;
	selp.b32 	%r1368, %r229, %r1367, %p278;
	// begin inline asm
	mov.b32 %r966, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r977, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r965, %r1356, -2004318072;
	mov.u32 	%r1102, 983055;
	// begin inline asm
	lop3.b32 %r963, %r1102, %r965, %r966, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r967, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r968, %r966, %r967;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r971, %r963, %r968;
	// end inline asm
	mov.u32 	%r1113, 15728880;
	// begin inline asm
	lop3.b32 %r974, %r1113, %r965, %r977, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r978, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r979, %r977, %r978;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r982, %r974, %r979;
	// end inline asm
	// begin inline asm
	mov.b32 %r1012, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1023, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1011, %r1360, -2004318072;
	// begin inline asm
	lop3.b32 %r1009, %r1102, %r1011, %r1012, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1013, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1014, %r1012, %r1013;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1017, %r1009, %r1014;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1020, %r1113, %r1011, %r1023, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1024, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1025, %r1023, %r1024;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1028, %r1020, %r1025;
	// end inline asm
	// begin inline asm
	mov.b32 %r1058, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1069, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1057, %r1364, -2004318072;
	// begin inline asm
	lop3.b32 %r1055, %r1102, %r1057, %r1058, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1059, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1060, %r1058, %r1059;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1063, %r1055, %r1060;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1066, %r1113, %r1057, %r1069, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1070, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1071, %r1069, %r1070;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1074, %r1066, %r1071;
	// end inline asm
	// begin inline asm
	mov.b32 %r1104, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1115, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1103, %r1368, -2004318072;
	// begin inline asm
	lop3.b32 %r1101, %r1102, %r1103, %r1104, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1105, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1106, %r1104, %r1105;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1109, %r1101, %r1106;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1112, %r1113, %r1103, %r1115, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1116, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1117, %r1115, %r1116;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1120, %r1112, %r1117;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r971;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1145, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r982;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1148, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r1017;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1151, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r1028;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1154, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r1063;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1157, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r1074;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1160, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r1109;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1163, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r1120;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1166, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1224, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1169, %r1170}, {%r314, %r317}, {%r1145}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1176, %r1177}, {%r314, %r317}, {%r1148}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1183, %r1184}, {%r314, %r317}, {%r1151}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1190, %r1191}, {%r314, %r317}, {%r1154}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1197, %r1198}, {%r314, %r317}, {%r1157}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1204, %r1205}, {%r314, %r317}, {%r1160}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1211, %r1212}, {%r314, %r317}, {%r1163}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1218, %r1219}, {%r314, %r317}, {%r1166}, {%r1224, %r1224};
	// end inline asm
	@%p1 bra 	$L__BB0_212;
	bra.uni 	$L__BB0_211;
$L__BB0_212:                            // %pass5517
                                        //   in Loop: Header=BB0_210 Depth=2
	// begin inline asm
	neg.f16x2 %r1225, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1227, %r1225, %r1170;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1230, %r352, %r1169, %r1227;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1234, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1236, %r1234, %r1177;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1239, %r352, %r1176, %r1236;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1243, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1245, %r1243, %r1184;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1248, %r352, %r1183, %r1245;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1252, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1254, %r1252, %r1191;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1257, %r352, %r1190, %r1254;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1261, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1263, %r1261, %r1198;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1266, %r352, %r1197, %r1263;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1270, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1272, %r1270, %r1205;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1275, %r352, %r1204, %r1272;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1279, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1281, %r1279, %r1212;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1284, %r352, %r1211, %r1281;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1288, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1290, %r1288, %r1219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1293, %r352, %r1218, %r1290;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1297, %r355, %r1169;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1300, %r352, %r1170, %r1297;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1304, %r355, %r1176;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1307, %r352, %r1177, %r1304;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1311, %r355, %r1183;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1314, %r352, %r1184, %r1311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1318, %r355, %r1190;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1321, %r352, %r1191, %r1318;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1325, %r355, %r1197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1328, %r352, %r1198, %r1325;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1332, %r355, %r1204;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1335, %r352, %r1205, %r1332;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1339, %r355, %r1211;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1342, %r352, %r1212, %r1339;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1346, %r355, %r1218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1349, %r352, %r1219, %r1346;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1442, %r1443}, {%r399, %r402}, {%r1230, %r1300}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1450, %r1451}, {%r399, %r402}, {%r1239, %r1307}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1458, %r1459}, {%r399, %r402}, {%r1248, %r1314}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1466, %r1467}, {%r399, %r402}, {%r1257, %r1321}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1474, %r1475}, {%r399, %r402}, {%r1266, %r1328}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1482, %r1483}, {%r399, %r402}, {%r1275, %r1335}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1490, %r1491}, {%r399, %r402}, {%r1284, %r1342}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1498, %r1499}, {%r399, %r402}, {%r1293, %r1349}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r230, %r1442, %r1443, %r847;
	// end inline asm
	// begin inline asm
	prmt.b32 %r231, %r1442, %r1443, %r851;
	// end inline asm
	// begin inline asm
	prmt.b32 %r232, %r1450, %r1451, %r847;
	// end inline asm
	// begin inline asm
	prmt.b32 %r233, %r1450, %r1451, %r851;
	// end inline asm
	// begin inline asm
	prmt.b32 %r234, %r1458, %r1459, %r847;
	// end inline asm
	// begin inline asm
	prmt.b32 %r235, %r1458, %r1459, %r851;
	// end inline asm
	// begin inline asm
	prmt.b32 %r236, %r1466, %r1467, %r847;
	// end inline asm
	// begin inline asm
	prmt.b32 %r237, %r1466, %r1467, %r851;
	// end inline asm
	// begin inline asm
	prmt.b32 %r238, %r1474, %r1475, %r847;
	// end inline asm
	// begin inline asm
	prmt.b32 %r239, %r1474, %r1475, %r851;
	// end inline asm
	// begin inline asm
	prmt.b32 %r240, %r1482, %r1483, %r847;
	// end inline asm
	// begin inline asm
	prmt.b32 %r241, %r1482, %r1483, %r851;
	// end inline asm
	// begin inline asm
	prmt.b32 %r242, %r1490, %r1491, %r847;
	// end inline asm
	// begin inline asm
	prmt.b32 %r243, %r1490, %r1491, %r851;
	// end inline asm
	// begin inline asm
	prmt.b32 %r244, %r1498, %r1499, %r847;
	// end inline asm
	// begin inline asm
	prmt.b32 %r245, %r1498, %r1499, %r851;
	// end inline asm
	st.shared.u32 	[%rd54], %r230;
	st.shared.u32 	[%rd58+16576], %r231;
	st.shared.u32 	[%rd58+64], %r232;
	st.shared.u32 	[%rd58+16640], %r233;
	st.shared.u32 	[%rd59], %r234;
	st.shared.u32 	[%rd61+16576], %r235;
	st.shared.u32 	[%rd61+64], %r236;
	st.shared.u32 	[%rd61+16640], %r237;
	st.shared.u32 	[%rd62], %r238;
	st.shared.u32 	[%rd64+16576], %r239;
	st.shared.u32 	[%rd64+64], %r240;
	st.shared.u32 	[%rd64+16640], %r241;
	st.shared.u32 	[%rd65], %r242;
	st.shared.u32 	[%rd67+16576], %r243;
	st.shared.u32 	[%rd67+64], %r244;
	st.shared.u32 	[%rd67+16640], %r245;
	@%p229 bra 	$L__BB0_214;
// %bb.213:                             // %pass7905
                                        //   in Loop: Header=BB0_210 Depth=2
	st.shared.u32 	[%rd54], %r230;
	st.shared.u32 	[%rd58+16576], %r231;
	st.shared.u32 	[%rd58+64], %r232;
	st.shared.u32 	[%rd58+16640], %r233;
	st.shared.u32 	[%rd59], %r234;
	st.shared.u32 	[%rd61+16576], %r235;
	st.shared.u32 	[%rd61+64], %r236;
	st.shared.u32 	[%rd61+16640], %r237;
	st.shared.u32 	[%rd62], %r238;
	st.shared.u32 	[%rd64+16576], %r239;
	st.shared.u32 	[%rd64+64], %r240;
	st.shared.u32 	[%rd64+16640], %r241;
	st.shared.u32 	[%rd65], %r242;
	st.shared.u32 	[%rd67+16576], %r243;
	st.shared.u32 	[%rd67+64], %r244;
	st.shared.u32 	[%rd67+16640], %r245;
$L__BB0_214:                            // %L21619
                                        //   in Loop: Header=BB0_210 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1509, [%rd16];
	ld.shared.u32 	%r1516, [%rd17+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1526, %r1523}, {%r411, %r414}, {%r1509}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1535, %r1532}, {%r411, %r414}, {%r1516}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1519, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1521, %r1519, %r1523;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1524, %r445, %r1526, %r1521;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1528, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1530, %r1528, %r1532;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1533, %r445, %r1535, %r1530;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1537, %r448, %r1526;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1540, %r445, %r1523, %r1537;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1544, %r448, %r1535;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1547, %r445, %r1532, %r1544;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1570, %r1573}, {%r487, %r490}, {%r1524, %r1540}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1577, %r1581}, {%r487, %r490}, {%r1533, %r1547}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1569, %r1570, %r1570;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1572, %r1573, %r1573, %r1569;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1576, %r1577, %r1577, %r1572;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1580, %r1581, %r1581, %r1576;
	// end inline asm
	mov.u32 	%r1668, 626337109;
	// begin inline asm
	fma.rn.f16x2 %r1584, %r1668, %r1580, %r3461;
	// end inline asm
	ld.shared.u32 	%r1592, [%rd68];
	ld.shared.u32 	%r1599, [%rd69];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1609, %r1606}, {%r411, %r414}, {%r1592}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1618, %r1615}, {%r411, %r414}, {%r1599}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1602, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1604, %r1602, %r1606;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1607, %r445, %r1609, %r1604;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1611, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1613, %r1611, %r1615;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1616, %r445, %r1618, %r1613;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1620, %r448, %r1609;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1623, %r445, %r1606, %r1620;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1627, %r448, %r1618;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1630, %r445, %r1615, %r1627;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1653, %r1656}, {%r487, %r490}, {%r1607, %r1623}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1660, %r1664}, {%r487, %r490}, {%r1616, %r1630}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1652, %r1653, %r1653;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1655, %r1656, %r1656, %r1652;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1659, %r1660, %r1660, %r1655;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1663, %r1664, %r1664, %r1659;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3472, %r1668, %r1663, %r1584;
	// end inline asm
	add.s32 	%r3470, %r3459, 2;
	setp.eq.s32 	%p280, %r3470, 6;
	@%p280 bra 	$L__BB0_215;
	bra.uni 	$L__BB0_216;
$L__BB0_215:                            // %pass10754
                                        //   in Loop: Header=BB0_210 Depth=2
	shl.b32 	%r1672, %r3460, 20;
	or.b32  	%r1673, %r179, %r1672;
	cvt.u64.u32 	%rd247, %r1673;
	add.s64 	%rd248, %rd247, %rd18;
	shr.u64 	%rd249, %rd248, 34;
	add.s64 	%rd250, %rd248, %rd249;
	shr.s64 	%rd251, %rd250, 30;
	setp.lt.s64 	%p281, %rd248, 0;
	and.b64  	%rd252, %rd250, -1073741824;
	setp.ne.s64 	%p282, %rd252, %rd248;
	and.pred  	%p283, %p281, %p282;
	selp.u64 	%rd253, 1, 0, %p283;
	sub.s64 	%rd254, %rd253, %rd251;
	shl.b64 	%rd255, %rd254, 30;
	add.s64 	%rd256, %rd255, %rd248;
	shl.b64 	%rd257, %rd256, 2;
	add.s64 	%rd258, %rd4, %rd257;
	st.global.u32 	[%rd258], %r3472;
	add.s32 	%r3460, %r3460, 1;
	mov.u32 	%r3470, 0;
	mov.u32 	%r3472, %r3470;
$L__BB0_216:                            // %pass10999
                                        //   in Loop: Header=BB0_210 Depth=2
	ld.shared.u32 	%r1678, [%rd70];
	ld.shared.u32 	%r1685, [%rd71];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1695, %r1692}, {%r411, %r414}, {%r1678}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1704, %r1701}, {%r411, %r414}, {%r1685}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1688, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1690, %r1688, %r1692;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1693, %r445, %r1695, %r1690;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1697, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1699, %r1697, %r1701;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1702, %r445, %r1704, %r1699;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1706, %r448, %r1695;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1709, %r445, %r1692, %r1706;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1713, %r448, %r1704;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1716, %r445, %r1701, %r1713;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1739, %r1742}, {%r487, %r490}, {%r1693, %r1709}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1746, %r1750}, {%r487, %r490}, {%r1702, %r1716}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1738, %r1739, %r1739;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1741, %r1742, %r1742, %r1738;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1745, %r1746, %r1746, %r1741;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1749, %r1750, %r1750, %r1745;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1753, %r1668, %r1749, %r3472;
	// end inline asm
	ld.shared.u32 	%r1761, [%rd72];
	ld.shared.u32 	%r1768, [%rd73];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1778, %r1775}, {%r411, %r414}, {%r1761}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1787, %r1784}, {%r411, %r414}, {%r1768}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1771, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1773, %r1771, %r1775;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1776, %r445, %r1778, %r1773;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1780, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1782, %r1780, %r1784;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1785, %r445, %r1787, %r1782;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1789, %r448, %r1778;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1792, %r445, %r1775, %r1789;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1796, %r448, %r1787;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1799, %r445, %r1784, %r1796;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1822, %r1825}, {%r487, %r490}, {%r1776, %r1792}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1829, %r1833}, {%r487, %r490}, {%r1785, %r1799}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1821, %r1822, %r1822;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1824, %r1825, %r1825, %r1821;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1828, %r1829, %r1829, %r1824;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1832, %r1833, %r1833, %r1828;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3475, %r1668, %r1832, %r1753;
	// end inline asm
	add.s32 	%r3473, %r3470, 2;
	setp.ne.s32 	%p284, %r3473, 6;
	@%p284 bra 	$L__BB0_218;
// %bb.217:                             // %pass11670
                                        //   in Loop: Header=BB0_210 Depth=2
	shl.b32 	%r1841, %r3460, 20;
	or.b32  	%r1842, %r179, %r1841;
	cvt.u64.u32 	%rd259, %r1842;
	add.s64 	%rd260, %rd259, %rd18;
	shr.u64 	%rd261, %rd260, 34;
	add.s64 	%rd262, %rd260, %rd261;
	shr.s64 	%rd263, %rd262, 30;
	setp.lt.s64 	%p285, %rd260, 0;
	and.b64  	%rd264, %rd262, -1073741824;
	setp.ne.s64 	%p286, %rd264, %rd260;
	and.pred  	%p287, %p285, %p286;
	selp.u64 	%rd265, 1, 0, %p287;
	sub.s64 	%rd266, %rd265, %rd263;
	shl.b64 	%rd267, %rd266, 30;
	add.s64 	%rd268, %rd267, %rd260;
	shl.b64 	%rd269, %rd268, 2;
	add.s64 	%rd270, %rd4, %rd269;
	st.global.u32 	[%rd270], %r3475;
	add.s32 	%r3460, %r3460, 1;
	mov.u32 	%r3473, 0;
	mov.u32 	%r3475, %r3473;
$L__BB0_218:                            // %pass11915
                                        //   in Loop: Header=BB0_210 Depth=2
	ld.shared.u32 	%r1847, [%rd74];
	ld.shared.u32 	%r1854, [%rd75];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1864, %r1861}, {%r411, %r414}, {%r1847}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1873, %r1870}, {%r411, %r414}, {%r1854}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1857, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1859, %r1857, %r1861;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1862, %r445, %r1864, %r1859;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1866, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1868, %r1866, %r1870;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1871, %r445, %r1873, %r1868;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1875, %r448, %r1864;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1878, %r445, %r1861, %r1875;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1882, %r448, %r1873;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1885, %r445, %r1870, %r1882;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1908, %r1911}, {%r487, %r490}, {%r1862, %r1878}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1915, %r1919}, {%r487, %r490}, {%r1871, %r1885}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1907, %r1908, %r1908;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1910, %r1911, %r1911, %r1907;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1914, %r1915, %r1915, %r1910;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1918, %r1919, %r1919, %r1914;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1922, %r1668, %r1918, %r3475;
	// end inline asm
	ld.shared.u32 	%r1930, [%rd76];
	ld.shared.u32 	%r1937, [%rd77];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1947, %r1944}, {%r411, %r414}, {%r1930}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1956, %r1953}, {%r411, %r414}, {%r1937}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1940, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1942, %r1940, %r1944;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1945, %r445, %r1947, %r1942;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1949, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1951, %r1949, %r1953;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1954, %r445, %r1956, %r1951;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1958, %r448, %r1947;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1961, %r445, %r1944, %r1958;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1965, %r448, %r1956;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1968, %r445, %r1953, %r1965;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1991, %r1994}, {%r487, %r490}, {%r1945, %r1961}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1998, %r2002}, {%r487, %r490}, {%r1954, %r1968}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1990, %r1991, %r1991;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1993, %r1994, %r1994, %r1990;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1997, %r1998, %r1998, %r1993;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2001, %r2002, %r2002, %r1997;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3478, %r1668, %r2001, %r1922;
	// end inline asm
	add.s32 	%r3476, %r3473, 2;
	setp.ne.s32 	%p288, %r3476, 6;
	@%p288 bra 	$L__BB0_220;
// %bb.219:                             // %pass12586
                                        //   in Loop: Header=BB0_210 Depth=2
	shl.b32 	%r2010, %r3460, 20;
	or.b32  	%r2011, %r179, %r2010;
	cvt.u64.u32 	%rd271, %r2011;
	add.s64 	%rd272, %rd271, %rd18;
	shr.u64 	%rd273, %rd272, 34;
	add.s64 	%rd274, %rd272, %rd273;
	shr.s64 	%rd275, %rd274, 30;
	setp.lt.s64 	%p289, %rd272, 0;
	and.b64  	%rd276, %rd274, -1073741824;
	setp.ne.s64 	%p290, %rd276, %rd272;
	and.pred  	%p291, %p289, %p290;
	selp.u64 	%rd277, 1, 0, %p291;
	sub.s64 	%rd278, %rd277, %rd275;
	shl.b64 	%rd279, %rd278, 30;
	add.s64 	%rd280, %rd279, %rd272;
	shl.b64 	%rd281, %rd280, 2;
	add.s64 	%rd282, %rd4, %rd281;
	st.global.u32 	[%rd282], %r3478;
	add.s32 	%r3460, %r3460, 1;
	mov.u32 	%r3476, 0;
	mov.u32 	%r3478, %r3476;
$L__BB0_220:                            // %pass12831
                                        //   in Loop: Header=BB0_210 Depth=2
	ld.shared.u32 	%r2016, [%rd78];
	ld.shared.u32 	%r2023, [%rd79];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2033, %r2030}, {%r411, %r414}, {%r2016}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2042, %r2039}, {%r411, %r414}, {%r2023}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2026, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2028, %r2026, %r2030;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2031, %r445, %r2033, %r2028;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2035, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2037, %r2035, %r2039;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2040, %r445, %r2042, %r2037;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2044, %r448, %r2033;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2047, %r445, %r2030, %r2044;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2051, %r448, %r2042;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2054, %r445, %r2039, %r2051;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2077, %r2080}, {%r487, %r490}, {%r2031, %r2047}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2084, %r2088}, {%r487, %r490}, {%r2040, %r2054}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2076, %r2077, %r2077;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2079, %r2080, %r2080, %r2076;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2083, %r2084, %r2084, %r2079;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2087, %r2088, %r2088, %r2083;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2091, %r1668, %r2087, %r3478;
	// end inline asm
	ld.shared.u32 	%r2099, [%rd80];
	ld.shared.u32 	%r2106, [%rd81];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2116, %r2113}, {%r411, %r414}, {%r2099}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2125, %r2122}, {%r411, %r414}, {%r2106}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2109, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2111, %r2109, %r2113;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2114, %r445, %r2116, %r2111;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2118, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2120, %r2118, %r2122;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2123, %r445, %r2125, %r2120;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2127, %r448, %r2116;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2130, %r445, %r2113, %r2127;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2134, %r448, %r2125;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2137, %r445, %r2122, %r2134;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2160, %r2163}, {%r487, %r490}, {%r2114, %r2130}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2167, %r2171}, {%r487, %r490}, {%r2123, %r2137}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2159, %r2160, %r2160;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2162, %r2163, %r2163, %r2159;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2166, %r2167, %r2167, %r2162;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2170, %r2171, %r2171, %r2166;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3461, %r1668, %r2170, %r2091;
	// end inline asm
	add.s32 	%r3459, %r3476, 2;
	setp.ne.s32 	%p292, %r3459, 6;
	@%p292 bra 	$L__BB0_152;
// %bb.221:                             // %pass13502
                                        //   in Loop: Header=BB0_210 Depth=2
	shl.b32 	%r2179, %r3460, 20;
	or.b32  	%r2180, %r179, %r2179;
	cvt.u64.u32 	%rd283, %r2180;
	add.s64 	%rd284, %rd283, %rd18;
	shr.u64 	%rd285, %rd284, 34;
	add.s64 	%rd286, %rd284, %rd285;
	shr.s64 	%rd287, %rd286, 30;
	setp.lt.s64 	%p293, %rd284, 0;
	and.b64  	%rd288, %rd286, -1073741824;
	setp.ne.s64 	%p294, %rd288, %rd284;
	and.pred  	%p295, %p293, %p294;
	selp.u64 	%rd289, 1, 0, %p295;
	sub.s64 	%rd290, %rd289, %rd287;
	shl.b64 	%rd291, %rd290, 30;
	add.s64 	%rd292, %rd291, %rd284;
	shl.b64 	%rd293, %rd292, 2;
	add.s64 	%rd294, %rd4, %rd293;
	st.global.u32 	[%rd294], %r3461;
	add.s32 	%r3460, %r3460, 1;
	mov.u32 	%r3459, 0;
	mov.u32 	%r3461, %r3459;
	bra.uni 	$L__BB0_152;
$L__BB0_153:                            // %L29926.preheader
                                        //   in Loop: Header=BB0_192 Depth=1
	or.b32  	%r2182, %r181, 64;
	add.s32 	%r2183, %r178, %r2182;
	mul.wide.u32 	%rd295, %r2183, 4;
	add.s64 	%rd7, %rd101, %rd295;
	cvt.u64.u32 	%rd297, %r2182;
	add.s64 	%rd298, %rd55, %rd297;
	shl.b64 	%rd299, %rd298, 2;
	add.s64 	%rd8, %rd101, %rd299;
	or.b32  	%r2184, %r181, 128;
	add.s32 	%r2185, %r178, %r2184;
	mul.wide.u32 	%rd302, %r2185, 4;
	add.s64 	%rd10, %rd101, %rd302;
	cvt.u64.u32 	%rd303, %r2184;
	add.s64 	%rd304, %rd55, %rd303;
	shl.b64 	%rd305, %rd304, 2;
	add.s64 	%rd11, %rd101, %rd305;
	or.b32  	%r2186, %r181, 192;
	add.s32 	%r2187, %r178, %r2186;
	mul.wide.u32 	%rd308, %r2187, 4;
	add.s64 	%rd13, %rd101, %rd308;
	cvt.u64.u32 	%rd309, %r2186;
	add.s64 	%rd310, %rd55, %rd309;
	shl.b64 	%rd311, %rd310, 2;
	add.s64 	%rd14, %rd101, %rd311;
	mov.u32 	%r3458, 16;
	bra.uni 	$L__BB0_154;
$L__BB0_162:                            // %L47569
                                        //   in Loop: Header=BB0_154 Depth=2
	bar.sync 	0;
	add.s32 	%r3458, %r3458, -8;
	setp.ne.s32 	%p318, %r3458, -16;
	@%p318 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_163;
$L__BB0_154:                            // %L29926
                                        //   Parent Loop BB0_192 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.lt.u32 	%p297, %r3, 16;
	setp.eq.s32 	%p298, %r3458, 16;
	selp.b32 	%r2716, %r214, 0, %p298;
	setp.eq.s32 	%p299, %r3458, 8;
	selp.b32 	%r2717, %r218, %r2716, %p299;
	setp.eq.s32 	%p300, %r3458, 0;
	selp.b32 	%r2718, %r222, %r2717, %p300;
	setp.eq.s32 	%p301, %r3458, -8;
	selp.b32 	%r2719, %r226, %r2718, %p301;
	selp.b32 	%r2720, %r215, 0, %p298;
	selp.b32 	%r2721, %r219, %r2720, %p299;
	selp.b32 	%r2722, %r223, %r2721, %p300;
	selp.b32 	%r2723, %r227, %r2722, %p301;
	selp.b32 	%r2724, %r216, 0, %p298;
	selp.b32 	%r2725, %r220, %r2724, %p299;
	selp.b32 	%r2726, %r224, %r2725, %p300;
	selp.b32 	%r2727, %r228, %r2726, %p301;
	selp.b32 	%r2728, %r217, 0, %p298;
	selp.b32 	%r2729, %r221, %r2728, %p299;
	selp.b32 	%r2730, %r225, %r2729, %p300;
	selp.b32 	%r2731, %r229, %r2730, %p301;
	// begin inline asm
	mov.b32 %r2215, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2226, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2732, %r2719, 8;
	xor.b32  	%r2225, %r2732, 8947848;
	// begin inline asm
	lop3.b32 %r2212, %r1102, %r2225, %r2215, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2216, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2217, %r2215, %r2216;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2220, %r2212, %r2217;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2223, %r1113, %r2225, %r2226, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2227, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2228, %r2226, %r2227;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2231, %r2223, %r2228;
	// end inline asm
	// begin inline asm
	mov.b32 %r2261, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2272, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2733, %r2723, 8;
	xor.b32  	%r2271, %r2733, 8947848;
	// begin inline asm
	lop3.b32 %r2258, %r1102, %r2271, %r2261, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2262, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2263, %r2261, %r2262;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2266, %r2258, %r2263;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2269, %r1113, %r2271, %r2272, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2273, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2274, %r2272, %r2273;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2277, %r2269, %r2274;
	// end inline asm
	// begin inline asm
	mov.b32 %r2307, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2318, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2734, %r2727, 8;
	xor.b32  	%r2317, %r2734, 8947848;
	// begin inline asm
	lop3.b32 %r2304, %r1102, %r2317, %r2307, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2308, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2309, %r2307, %r2308;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2312, %r2304, %r2309;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2315, %r1113, %r2317, %r2318, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2319, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2320, %r2318, %r2319;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2323, %r2315, %r2320;
	// end inline asm
	// begin inline asm
	mov.b32 %r2353, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2364, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2735, %r2731, 8;
	xor.b32  	%r2363, %r2735, 8947848;
	// begin inline asm
	lop3.b32 %r2350, %r1102, %r2363, %r2353, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2354, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2355, %r2353, %r2354;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2358, %r2350, %r2355;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2361, %r1113, %r2363, %r2364, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2365, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2366, %r2364, %r2365;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2369, %r2361, %r2366;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2220;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2372, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r2231;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2375, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2266;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2378, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r2277;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2381, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2312;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2384, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r2323;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2387, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2358;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2390, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r2369;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2393, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2459, %r2456}, {%r314, %r317}, {%r2372}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2468, %r2465}, {%r314, %r317}, {%r2375}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2477, %r2474}, {%r314, %r317}, {%r2378}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2486, %r2483}, {%r314, %r317}, {%r2381}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2495, %r2492}, {%r314, %r317}, {%r2384}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2504, %r2501}, {%r314, %r317}, {%r2387}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2513, %r2510}, {%r314, %r317}, {%r2390}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2522, %r2519}, {%r314, %r317}, {%r2393}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2452, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2454, %r2452, %r2456;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2457, %r352, %r2459, %r2454;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2461, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2463, %r2461, %r2465;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2466, %r352, %r2468, %r2463;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2470, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2472, %r2470, %r2474;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2475, %r352, %r2477, %r2472;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2479, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2481, %r2479, %r2483;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2484, %r352, %r2486, %r2481;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2488, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2490, %r2488, %r2492;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2493, %r352, %r2495, %r2490;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2497, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2499, %r2497, %r2501;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2502, %r352, %r2504, %r2499;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2506, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2508, %r2506, %r2510;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2511, %r352, %r2513, %r2508;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2515, %r355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2517, %r2515, %r2519;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2520, %r352, %r2522, %r2517;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2524, %r355, %r2459;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2527, %r352, %r2456, %r2524;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2531, %r355, %r2468;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2534, %r352, %r2465, %r2531;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2538, %r355, %r2477;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2541, %r352, %r2474, %r2538;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2545, %r355, %r2486;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2548, %r352, %r2483, %r2545;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2552, %r355, %r2495;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2555, %r352, %r2492, %r2552;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2559, %r355, %r2504;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2562, %r352, %r2501, %r2559;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2566, %r355, %r2513;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2569, %r352, %r2510, %r2566;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2573, %r355, %r2522;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2576, %r352, %r2519, %r2573;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2653, %r2654}, {%r399, %r402}, {%r2457, %r2527}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2661, %r2662}, {%r399, %r402}, {%r2466, %r2534}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2669, %r2670}, {%r399, %r402}, {%r2475, %r2541}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2677, %r2678}, {%r399, %r402}, {%r2484, %r2548}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2685, %r2686}, {%r399, %r402}, {%r2493, %r2555}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2693, %r2694}, {%r399, %r402}, {%r2502, %r2562}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2701, %r2702}, {%r399, %r402}, {%r2511, %r2569}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2709, %r2710}, {%r399, %r402}, {%r2520, %r2576}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2652, %r2653, %r2654, %r847;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2656, %r2653, %r2654, %r851;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2660, %r2661, %r2662, %r847;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2664, %r2661, %r2662, %r851;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2668, %r2669, %r2670, %r847;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2672, %r2669, %r2670, %r851;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2676, %r2677, %r2678, %r847;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2680, %r2677, %r2678, %r851;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2684, %r2685, %r2686, %r847;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2688, %r2685, %r2686, %r851;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2692, %r2693, %r2694, %r847;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2696, %r2693, %r2694, %r851;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2700, %r2701, %r2702, %r847;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2704, %r2701, %r2702, %r851;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2708, %r2709, %r2710, %r847;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2712, %r2709, %r2710, %r851;
	// end inline asm
	st.shared.u32 	[%rd54], %r2652;
	st.shared.u32 	[%rd58+16576], %r2656;
	st.shared.u32 	[%rd58+64], %r2660;
	st.shared.u32 	[%rd58+16640], %r2664;
	st.shared.u32 	[%rd7], %r2668;
	st.shared.u32 	[%rd8+16576], %r2672;
	st.shared.u32 	[%rd8+64], %r2676;
	st.shared.u32 	[%rd8+16640], %r2680;
	st.shared.u32 	[%rd10], %r2684;
	st.shared.u32 	[%rd11+16576], %r2688;
	st.shared.u32 	[%rd11+64], %r2692;
	st.shared.u32 	[%rd11+16640], %r2696;
	st.shared.u32 	[%rd13], %r2700;
	st.shared.u32 	[%rd14+16576], %r2704;
	st.shared.u32 	[%rd14+64], %r2708;
	st.shared.u32 	[%rd14+16640], %r2712;
	@%p297 bra 	$L__BB0_222;
	bra.uni 	$L__BB0_155;
$L__BB0_222:                            // %pass16027
                                        //   in Loop: Header=BB0_154 Depth=2
	st.shared.u32 	[%rd54], %r2652;
	st.shared.u32 	[%rd58+16576], %r2656;
	st.shared.u32 	[%rd58+64], %r2660;
	st.shared.u32 	[%rd58+16640], %r2664;
	st.shared.u32 	[%rd7], %r2668;
	st.shared.u32 	[%rd8+16576], %r2672;
	st.shared.u32 	[%rd8+64], %r2676;
	st.shared.u32 	[%rd8+16640], %r2680;
	st.shared.u32 	[%rd10], %r2684;
	st.shared.u32 	[%rd11+16576], %r2688;
	st.shared.u32 	[%rd11+64], %r2692;
	st.shared.u32 	[%rd11+16640], %r2696;
	st.shared.u32 	[%rd13], %r2700;
	st.shared.u32 	[%rd14+16576], %r2704;
	st.shared.u32 	[%rd14+64], %r2708;
	st.shared.u32 	[%rd14+16640], %r2712;
$L__BB0_155:                            // %L39283
                                        //   in Loop: Header=BB0_154 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r2740, [%rd16];
	ld.shared.u32 	%r2747, [%rd17+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2757, %r2754}, {%r411, %r414}, {%r2740}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2766, %r2763}, {%r411, %r414}, {%r2747}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2750, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2752, %r2750, %r2754;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2755, %r445, %r2757, %r2752;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2759, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2761, %r2759, %r2763;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2764, %r445, %r2766, %r2761;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2768, %r448, %r2757;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2771, %r445, %r2754, %r2768;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2775, %r448, %r2766;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2778, %r445, %r2763, %r2775;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2801, %r2804}, {%r487, %r490}, {%r2755, %r2771}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2808, %r2812}, {%r487, %r490}, {%r2764, %r2778}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2800, %r2801, %r2801;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2803, %r2804, %r2804, %r2800;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2807, %r2808, %r2808, %r2803;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2811, %r2812, %r2812, %r2807;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2815, %r1668, %r2811, %r3461;
	// end inline asm
	ld.shared.u32 	%r2823, [%rd68];
	ld.shared.u32 	%r2830, [%rd69];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2840, %r2837}, {%r411, %r414}, {%r2823}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2849, %r2846}, {%r411, %r414}, {%r2830}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2833, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2835, %r2833, %r2837;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2838, %r445, %r2840, %r2835;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2842, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2844, %r2842, %r2846;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2847, %r445, %r2849, %r2844;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2851, %r448, %r2840;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2854, %r445, %r2837, %r2851;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2858, %r448, %r2849;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2861, %r445, %r2846, %r2858;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2884, %r2887}, {%r487, %r490}, {%r2838, %r2854}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2891, %r2895}, {%r487, %r490}, {%r2847, %r2861}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2883, %r2884, %r2884;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2886, %r2887, %r2887, %r2883;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2890, %r2891, %r2891, %r2886;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2894, %r2895, %r2895, %r2890;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3481, %r1668, %r2894, %r2815;
	// end inline asm
	add.s32 	%r3479, %r3459, 2;
	setp.eq.s32 	%p302, %r3479, 6;
	@%p302 bra 	$L__BB0_156;
	bra.uni 	$L__BB0_157;
$L__BB0_156:                            // %pass18876
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r2903, %r3460, 20;
	or.b32  	%r2904, %r179, %r2903;
	cvt.u64.u32 	%rd314, %r2904;
	add.s64 	%rd315, %rd314, %rd18;
	shr.u64 	%rd316, %rd315, 34;
	add.s64 	%rd317, %rd315, %rd316;
	shr.s64 	%rd318, %rd317, 30;
	setp.lt.s64 	%p303, %rd315, 0;
	and.b64  	%rd319, %rd317, -1073741824;
	setp.ne.s64 	%p304, %rd319, %rd315;
	and.pred  	%p305, %p303, %p304;
	selp.u64 	%rd320, 1, 0, %p305;
	sub.s64 	%rd321, %rd320, %rd318;
	shl.b64 	%rd322, %rd321, 30;
	add.s64 	%rd323, %rd322, %rd315;
	shl.b64 	%rd324, %rd323, 2;
	add.s64 	%rd325, %rd4, %rd324;
	st.global.u32 	[%rd325], %r3481;
	add.s32 	%r3460, %r3460, 1;
	mov.u32 	%r3479, 0;
	mov.u32 	%r3481, %r3479;
$L__BB0_157:                            // %pass19121
                                        //   in Loop: Header=BB0_154 Depth=2
	ld.shared.u32 	%r2909, [%rd70];
	ld.shared.u32 	%r2916, [%rd71];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2926, %r2923}, {%r411, %r414}, {%r2909}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2935, %r2932}, {%r411, %r414}, {%r2916}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2919, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2921, %r2919, %r2923;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2924, %r445, %r2926, %r2921;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2928, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2930, %r2928, %r2932;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2933, %r445, %r2935, %r2930;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2937, %r448, %r2926;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2940, %r445, %r2923, %r2937;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2944, %r448, %r2935;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2947, %r445, %r2932, %r2944;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2970, %r2973}, {%r487, %r490}, {%r2924, %r2940}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2977, %r2981}, {%r487, %r490}, {%r2933, %r2947}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2969, %r2970, %r2970;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2972, %r2973, %r2973, %r2969;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2976, %r2977, %r2977, %r2972;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2980, %r2981, %r2981, %r2976;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2984, %r1668, %r2980, %r3481;
	// end inline asm
	ld.shared.u32 	%r2992, [%rd72];
	ld.shared.u32 	%r2999, [%rd73];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3009, %r3006}, {%r411, %r414}, {%r2992}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3018, %r3015}, {%r411, %r414}, {%r2999}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3002, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3004, %r3002, %r3006;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3007, %r445, %r3009, %r3004;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3011, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3013, %r3011, %r3015;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3016, %r445, %r3018, %r3013;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3020, %r448, %r3009;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3023, %r445, %r3006, %r3020;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3027, %r448, %r3018;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3030, %r445, %r3015, %r3027;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3053, %r3056}, {%r487, %r490}, {%r3007, %r3023}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3060, %r3064}, {%r487, %r490}, {%r3016, %r3030}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3052, %r3053, %r3053;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3055, %r3056, %r3056, %r3052;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3059, %r3060, %r3060, %r3055;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3063, %r3064, %r3064, %r3059;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3484, %r1668, %r3063, %r2984;
	// end inline asm
	add.s32 	%r3482, %r3479, 2;
	setp.ne.s32 	%p306, %r3482, 6;
	@%p306 bra 	$L__BB0_159;
// %bb.158:                             // %pass19792
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r3072, %r3460, 20;
	or.b32  	%r3073, %r179, %r3072;
	cvt.u64.u32 	%rd326, %r3073;
	add.s64 	%rd327, %rd326, %rd18;
	shr.u64 	%rd328, %rd327, 34;
	add.s64 	%rd329, %rd327, %rd328;
	shr.s64 	%rd330, %rd329, 30;
	setp.lt.s64 	%p307, %rd327, 0;
	and.b64  	%rd331, %rd329, -1073741824;
	setp.ne.s64 	%p308, %rd331, %rd327;
	and.pred  	%p309, %p307, %p308;
	selp.u64 	%rd332, 1, 0, %p309;
	sub.s64 	%rd333, %rd332, %rd330;
	shl.b64 	%rd334, %rd333, 30;
	add.s64 	%rd335, %rd334, %rd327;
	shl.b64 	%rd336, %rd335, 2;
	add.s64 	%rd337, %rd4, %rd336;
	st.global.u32 	[%rd337], %r3484;
	add.s32 	%r3460, %r3460, 1;
	mov.u32 	%r3482, 0;
	mov.u32 	%r3484, %r3482;
$L__BB0_159:                            // %pass20037
                                        //   in Loop: Header=BB0_154 Depth=2
	ld.shared.u32 	%r3078, [%rd74];
	ld.shared.u32 	%r3085, [%rd75];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3095, %r3092}, {%r411, %r414}, {%r3078}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3104, %r3101}, {%r411, %r414}, {%r3085}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3088, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3090, %r3088, %r3092;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3093, %r445, %r3095, %r3090;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3097, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3099, %r3097, %r3101;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3102, %r445, %r3104, %r3099;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3106, %r448, %r3095;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3109, %r445, %r3092, %r3106;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3113, %r448, %r3104;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3116, %r445, %r3101, %r3113;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3139, %r3142}, {%r487, %r490}, {%r3093, %r3109}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3146, %r3150}, {%r487, %r490}, {%r3102, %r3116}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3138, %r3139, %r3139;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3141, %r3142, %r3142, %r3138;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3145, %r3146, %r3146, %r3141;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3149, %r3150, %r3150, %r3145;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3153, %r1668, %r3149, %r3484;
	// end inline asm
	ld.shared.u32 	%r3161, [%rd76];
	ld.shared.u32 	%r3168, [%rd77];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3178, %r3175}, {%r411, %r414}, {%r3161}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3187, %r3184}, {%r411, %r414}, {%r3168}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3171, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3173, %r3171, %r3175;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3176, %r445, %r3178, %r3173;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3180, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3182, %r3180, %r3184;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3185, %r445, %r3187, %r3182;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3189, %r448, %r3178;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3192, %r445, %r3175, %r3189;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3196, %r448, %r3187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3199, %r445, %r3184, %r3196;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3222, %r3225}, {%r487, %r490}, {%r3176, %r3192}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3229, %r3233}, {%r487, %r490}, {%r3185, %r3199}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3221, %r3222, %r3222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3224, %r3225, %r3225, %r3221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3228, %r3229, %r3229, %r3224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3232, %r3233, %r3233, %r3228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3487, %r1668, %r3232, %r3153;
	// end inline asm
	add.s32 	%r3485, %r3482, 2;
	setp.ne.s32 	%p310, %r3485, 6;
	@%p310 bra 	$L__BB0_161;
// %bb.160:                             // %pass20708
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r3241, %r3460, 20;
	or.b32  	%r3242, %r179, %r3241;
	cvt.u64.u32 	%rd338, %r3242;
	add.s64 	%rd339, %rd338, %rd18;
	shr.u64 	%rd340, %rd339, 34;
	add.s64 	%rd341, %rd339, %rd340;
	shr.s64 	%rd342, %rd341, 30;
	setp.lt.s64 	%p311, %rd339, 0;
	and.b64  	%rd343, %rd341, -1073741824;
	setp.ne.s64 	%p312, %rd343, %rd339;
	and.pred  	%p313, %p311, %p312;
	selp.u64 	%rd344, 1, 0, %p313;
	sub.s64 	%rd345, %rd344, %rd342;
	shl.b64 	%rd346, %rd345, 30;
	add.s64 	%rd347, %rd346, %rd339;
	shl.b64 	%rd348, %rd347, 2;
	add.s64 	%rd349, %rd4, %rd348;
	st.global.u32 	[%rd349], %r3487;
	add.s32 	%r3460, %r3460, 1;
	mov.u32 	%r3485, 0;
	mov.u32 	%r3487, %r3485;
$L__BB0_161:                            // %pass20953
                                        //   in Loop: Header=BB0_154 Depth=2
	ld.shared.u32 	%r3247, [%rd78];
	ld.shared.u32 	%r3254, [%rd79];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3264, %r3261}, {%r411, %r414}, {%r3247}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3273, %r3270}, {%r411, %r414}, {%r3254}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3257, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3259, %r3257, %r3261;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3262, %r445, %r3264, %r3259;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3266, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3268, %r3266, %r3270;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3271, %r445, %r3273, %r3268;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3275, %r448, %r3264;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3278, %r445, %r3261, %r3275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3282, %r448, %r3273;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3285, %r445, %r3270, %r3282;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3308, %r3311}, {%r487, %r490}, {%r3262, %r3278}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3315, %r3319}, {%r487, %r490}, {%r3271, %r3285}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3307, %r3308, %r3308;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3310, %r3311, %r3311, %r3307;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3314, %r3315, %r3315, %r3310;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3318, %r3319, %r3319, %r3314;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3322, %r1668, %r3318, %r3487;
	// end inline asm
	ld.shared.u32 	%r3330, [%rd80];
	ld.shared.u32 	%r3337, [%rd81];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3347, %r3344}, {%r411, %r414}, {%r3330}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3356, %r3353}, {%r411, %r414}, {%r3337}, {%r1224, %r1224};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3340, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3342, %r3340, %r3344;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3345, %r445, %r3347, %r3342;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3349, %r448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3351, %r3349, %r3353;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3354, %r445, %r3356, %r3351;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3358, %r448, %r3347;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3361, %r445, %r3344, %r3358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3365, %r448, %r3356;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3368, %r445, %r3353, %r3365;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3391, %r3394}, {%r487, %r490}, {%r3345, %r3361}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3398, %r3402}, {%r487, %r490}, {%r3354, %r3368}, {%r1224, %r1224}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3390, %r3391, %r3391;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3393, %r3394, %r3394, %r3390;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3397, %r3398, %r3398, %r3393;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3401, %r3402, %r3402, %r3397;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3461, %r1668, %r3401, %r3322;
	// end inline asm
	add.s32 	%r3459, %r3485, 2;
	setp.ne.s32 	%p314, %r3459, 6;
	@%p314 bra 	$L__BB0_162;
// %bb.223:                             // %pass21624
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r3410, %r3460, 20;
	or.b32  	%r3411, %r179, %r3410;
	cvt.u64.u32 	%rd350, %r3411;
	add.s64 	%rd351, %rd350, %rd18;
	shr.u64 	%rd352, %rd351, 34;
	add.s64 	%rd353, %rd351, %rd352;
	shr.s64 	%rd354, %rd353, 30;
	setp.lt.s64 	%p315, %rd351, 0;
	and.b64  	%rd355, %rd353, -1073741824;
	setp.ne.s64 	%p316, %rd355, %rd351;
	and.pred  	%p317, %p315, %p316;
	selp.u64 	%rd356, 1, 0, %p317;
	sub.s64 	%rd357, %rd356, %rd354;
	shl.b64 	%rd358, %rd357, 30;
	add.s64 	%rd359, %rd358, %rd351;
	shl.b64 	%rd360, %rd359, 2;
	add.s64 	%rd361, %rd4, %rd360;
	st.global.u32 	[%rd361], %r3461;
	add.s32 	%r3460, %r3460, 1;
	mov.u32 	%r3459, %r1224;
	mov.u32 	%r3461, %r1224;
	bra.uni 	$L__BB0_162;
$L__BB0_164:                            // %L47600
	mov.u32 	%r3412, 0;
	st.global.u32 	[%rd6], %r3412;
	ret;
$L__BB0_211:                            // %post_box_union
	mov.u64 	%rd245, exception4228;
	cvta.global.u64 	%rd246, %rd245;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd246;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r284;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_136:                            // %L6855
	mov.u32 	%r3428, 5;
	st.global.u32 	[%rd6], %r3428;
	mov.u64 	%rd392, exception4180;
	cvta.global.u64 	%rd393, %rd392;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd393;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r284;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_137:                            // %L7011
	mov.u32 	%r3427, 5;
	st.global.u32 	[%rd6], %r3427;
	mov.u64 	%rd390, exception4180;
	cvta.global.u64 	%rd391, %rd390;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd391;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r284;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_138:                            // %L7167
	mov.u32 	%r3426, 5;
	st.global.u32 	[%rd6], %r3426;
	mov.u64 	%rd388, exception4180;
	cvta.global.u64 	%rd389, %rd388;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd389;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r284;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_139:                            // %L7323
	mov.u32 	%r3425, 5;
	st.global.u32 	[%rd6], %r3425;
	mov.u64 	%rd386, exception4180;
	cvta.global.u64 	%rd387, %rd386;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd387;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r284;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_140:                            // %L7479
	mov.u32 	%r3424, 5;
	st.global.u32 	[%rd6], %r3424;
	mov.u64 	%rd384, exception4180;
	cvta.global.u64 	%rd385, %rd384;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd385;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r284;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_141:                            // %L7635
	mov.u32 	%r3423, 5;
	st.global.u32 	[%rd6], %r3423;
	mov.u64 	%rd382, exception4180;
	cvta.global.u64 	%rd383, %rd382;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd383;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r284;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_142:                            // %L7791
	mov.u32 	%r3422, 5;
	st.global.u32 	[%rd6], %r3422;
	mov.u64 	%rd380, exception4180;
	cvta.global.u64 	%rd381, %rd380;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd381;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r284;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_143:                            // %L7947
	mov.u32 	%r3421, 5;
	st.global.u32 	[%rd6], %r3421;
	mov.u64 	%rd378, exception4180;
	cvta.global.u64 	%rd379, %rd378;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd379;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r284;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_144:                            // %L8103
	mov.u32 	%r3420, 5;
	st.global.u32 	[%rd6], %r3420;
	mov.u64 	%rd376, exception4180;
	cvta.global.u64 	%rd377, %rd376;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd377;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r284;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L8259
	mov.u32 	%r3419, 5;
	st.global.u32 	[%rd6], %r3419;
	mov.u64 	%rd374, exception4180;
	cvta.global.u64 	%rd375, %rd374;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd375;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r284;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L8415
	mov.u32 	%r3418, 5;
	st.global.u32 	[%rd6], %r3418;
	mov.u64 	%rd372, exception4180;
	cvta.global.u64 	%rd373, %rd372;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd373;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r284;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L8571
	mov.u32 	%r3417, 5;
	st.global.u32 	[%rd6], %r3417;
	mov.u64 	%rd370, exception4180;
	cvta.global.u64 	%rd371, %rd370;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd371;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r284;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L8727
	mov.u32 	%r3416, 5;
	st.global.u32 	[%rd6], %r3416;
	mov.u64 	%rd368, exception4180;
	cvta.global.u64 	%rd369, %rd368;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd369;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r284;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L8883
	mov.u32 	%r3415, 5;
	st.global.u32 	[%rd6], %r3415;
	mov.u64 	%rd366, exception4180;
	cvta.global.u64 	%rd367, %rd366;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd367;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r284;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L9039
	mov.u32 	%r3414, 5;
	st.global.u32 	[%rd6], %r3414;
	mov.u64 	%rd364, exception4180;
	cvta.global.u64 	%rd365, %rd364;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd365;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r284;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_151:                            // %L9195
	mov.u32 	%r3413, 5;
	st.global.u32 	[%rd6], %r3413;
	mov.u64 	%rd362, exception4180;
	cvta.global.u64 	%rd363, %rd362;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd363;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r284;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L166
	mov.u32 	%r3430, 2;
	st.global.u32 	[%rd6], %r3430;
	mov.u64 	%rd396, exception4180;
	cvta.global.u64 	%rd397, %rd396;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd397;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r284;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_13:                             // %L307
	mov.u32 	%r3429, 3;
	st.global.u32 	[%rd6], %r3429;
	mov.u64 	%rd394, exception4180;
	cvta.global.u64 	%rd395, %rd394;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd395;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r284;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd88, exception1;
	cvta.global.u64 	%rd89, %rd88;
	{ // callseq 45, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd89;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 45
	{ // callseq 46, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r284;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 46
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_135:                            // %L1153
	add.u64 	%rd87, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r3, %r1};
	st.local.v2.u32 	[%rd5+8], {%r4, %r86};
	st.local.u32 	[%rd5+16], %r87;
	mov.u64 	%rd93, __unnamed_1;
	cvta.global.u64 	%rd94, %rd93;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd94;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd87;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r500, [retval0+0];
	} // callseq 47
	mov.u32 	%r502, 4;
	st.global.u32 	[%rd6], %r502;
	mov.u64 	%rd96, exception4180;
	cvta.global.u64 	%rd97, %rd96;
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd97;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 48
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r284;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 49
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
