// PTX kernel code for the CUDA upchannelizer
// This file has been generated automatically by `upchan.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for upchan(::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE // -- Begin function _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.func julia_AssertionError_11283
()
.noreturn
{
	trap;
}
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func  (.param .b64 func_retval0) julia_power_by_squaring_11294
(
	.param .align 8 .b8 julia_power_by_squaring_11294_param_0[16],
	.param .b64 julia_power_by_squaring_11294_param_1,
	.param .b64 julia_power_by_squaring_11294_param_2
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception3325[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.visible .entry _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE(
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<259>;
	.reg .b16 	%rs<1185>;
	.reg .b32 	%r<8041>;
	.reg .f32 	%f<914>;
	.reg .b64 	%rd<191>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r184, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd40, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r185, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r185, 66815;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	ld.param.u64 	%rd57, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8];
	ld.param.u64 	%rd41, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %ctaid.x;
	shl.b32 	%r186, %r4, 9;
	or.b32  	%r187, %r3, %r1;
	or.b32  	%r188, %r187, %r186;
	mul.wide.u32 	%rd63, %r188, 4;
	add.s64 	%rd4, %rd57, %rd63;
	mov.u32 	%r189, 1;
	st.global.u32 	[%rd4], %r189;
	ld.global.u32 	%r5, [%rd41];
	setp.lt.s32 	%p2, %r5, 0;
	@%p2 bra 	$L__BB0_7;
// %bb.3:                               // %L204
	ld.param.u64 	%rd45, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2];
	ld.global.u32 	%r6, [%rd45];
	setp.lt.s32 	%p3, %r6, %r5;
	setp.gt.s32 	%p4, %r6, 16384;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_7;
// %bb.4:                               // %L214
	ld.param.u64 	%rd49, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3];
	ld.global.u32 	%r7, [%rd49];
	sub.s32 	%r190, %r6, %r5;
	and.b32  	%r191, %r190, 255;
	setp.ne.s32 	%p6, %r191, 0;
	setp.lt.s32 	%p7, %r7, 0;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L220
	ld.param.u64 	%rd53, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4];
	ld.global.u32 	%r8, [%rd53];
	setp.lt.s32 	%p9, %r8, %r7;
	setp.gt.s32 	%p10, %r8, 256;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L230
	not.b32 	%r192, %r7;
	add.s32 	%r193, %r192, %r8;
	and.b32  	%r194, %r193, 3;
	setp.eq.s32 	%p12, %r194, 0;
	@%p12 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_7;
$L__BB0_8:                              // %pass167
	bfe.u32 	%r120, %r1, 2, 1;
	shr.u32 	%r121, %r1, 4;
	shl.b32 	%r200, %r121, 1;
	shl.b32 	%r201, %r120, 2;
	shl.b32 	%r122, %r1, 3;
	and.b32  	%r202, %r122, 24;
	or.b32  	%r203, %r201, %r202;
	or.b32  	%r204, %r200, %r203;
	bfe.u32 	%r205, %r1, 3, 1;
	or.b32  	%r124, %r205, %r204;
	or.b32  	%r125, %r124, 32;
	mov.f32 	%f181, 0f40000000;
	mov.f32 	%f182, 0f437F0000;
	div.approx.f32 	%f153, %f182, %f181;
	cvt.rn.f32.s32 	%f183, %r124;
	sub.f32 	%f184, %f183, %f153;
	mov.f32 	%f213, 0f42800000;
	div.approx.f32 	%f155, %f184, %f213;
	setp.ne.f32 	%p18, %f155, 0f00000000;
	mov.f32 	%f881, 0f3F800000;
	mov.f32 	%f874, %f881;
	@%p18 bra 	$L__BB0_9;
	bra.uni 	$L__BB0_10;
$L__BB0_9:                              // %L572
	sin.approx.f32 	%f214, %f155;
	div.approx.f32 	%f874, %f214, %f155;
$L__BB0_10:                             // %L575
	cvt.rn.f32.s32 	%f217, %r125;
	sub.f32 	%f218, %f217, %f153;
	div.approx.f32 	%f5, %f218, %f213;
	setp.eq.f32 	%p24, %f5, 0f00000000;
	mov.f32 	%f875, %f881;
	@%p24 bra 	$L__BB0_12;
// %bb.11:                              // %L592
	sin.approx.f32 	%f248, %f5;
	div.approx.f32 	%f875, %f248, %f5;
$L__BB0_12:                             // %L595
	or.b32  	%r223, %r124, 64;
	or.b32  	%r10, %r124, 96;
	cvt.rn.f32.s32 	%f252, %r223;
	sub.f32 	%f253, %f252, %f153;
	div.approx.f32 	%f9, %f253, %f213;
	setp.eq.f32 	%p30, %f9, 0f00000000;
	mov.f32 	%f876, %f881;
	@%p30 bra 	$L__BB0_14;
// %bb.13:                              // %L674
	sin.approx.f32 	%f283, %f9;
	div.approx.f32 	%f876, %f283, %f9;
$L__BB0_14:                             // %L677
	cvt.rn.f32.s32 	%f286, %r10;
	sub.f32 	%f287, %f286, %f153;
	div.approx.f32 	%f14, %f287, %f213;
	setp.eq.f32 	%p36, %f14, 0f00000000;
	mov.f32 	%f877, %f881;
	@%p36 bra 	$L__BB0_16;
// %bb.15:                              // %L694
	sin.approx.f32 	%f317, %f14;
	div.approx.f32 	%f877, %f317, %f14;
$L__BB0_16:                             // %L697
	shl.b32 	%r111, %r1, 2;
	shl.b32 	%r113, %r4, 6;
	and.b32  	%r117, %r1, 18;
	or.b32  	%r241, %r124, 128;
	or.b32  	%r12, %r124, 160;
	cvt.rn.f32.s32 	%f321, %r241;
	sub.f32 	%f322, %f321, %f153;
	div.approx.f32 	%f18, %f322, %f213;
	setp.eq.f32 	%p42, %f18, 0f00000000;
	mov.f32 	%f878, %f881;
	@%p42 bra 	$L__BB0_18;
// %bb.17:                              // %L776
	sin.approx.f32 	%f352, %f18;
	div.approx.f32 	%f878, %f352, %f18;
$L__BB0_18:                             // %L779
	and.b32  	%r112, %r111, 4;
	shl.b32 	%r114, %r1, 1;
	or.b32  	%r195, %r117, %r113;
	cvt.rn.f32.s32 	%f355, %r12;
	sub.f32 	%f356, %f355, %f153;
	div.approx.f32 	%f23, %f356, %f213;
	setp.eq.f32 	%p48, %f23, 0f00000000;
	mov.f32 	%f879, %f881;
	@%p48 bra 	$L__BB0_20;
// %bb.19:                              // %L796
	sin.approx.f32 	%f386, %f23;
	div.approx.f32 	%f879, %f386, %f23;
$L__BB0_20:                             // %L799
	and.b32  	%r115, %r114, 8;
	or.b32  	%r196, %r195, %r112;
	or.b32  	%r259, %r124, 192;
	or.b32  	%r14, %r124, 224;
	cvt.rn.f32.s32 	%f390, %r259;
	sub.f32 	%f391, %f390, %f153;
	div.approx.f32 	%f27, %f391, %f213;
	setp.eq.f32 	%p54, %f27, 0f00000000;
	mov.f32 	%f880, %f881;
	@%p54 bra 	$L__BB0_22;
// %bb.21:                              // %L878
	sin.approx.f32 	%f421, %f27;
	div.approx.f32 	%f880, %f421, %f27;
$L__BB0_22:                             // %L881
	and.b32  	%r116, %r111, 32;
	or.b32  	%r197, %r196, %r115;
	cvt.rn.f32.s32 	%f424, %r14;
	sub.f32 	%f425, %f424, %f153;
	div.approx.f32 	%f32, %f425, %f213;
	setp.eq.f32 	%p60, %f32, 0f00000000;
	@%p60 bra 	$L__BB0_24;
// %bb.23:                              // %L898
	sin.approx.f32 	%f455, %f32;
	div.approx.f32 	%f881, %f455, %f32;
$L__BB0_24:                             // %L901
	or.b32  	%r198, %r197, %r116;
	mul.lo.s32 	%r16, %r124, 63;
	cvt.rn.f32.s32 	%f458, %r16;
	div.approx.f32 	%f35, %f458, %f213;
	abs.f32 	%f884, %f35;
	setp.lt.f32 	%p61, %f884, 0f40000000;
	@%p61 bra 	$L__BB0_36;
// %bb.25:
	setp.gtu.f32 	%p62, %f884, 0f4B800000;
	@%p62 bra 	$L__BB0_32;
	bra.uni 	$L__BB0_26;
$L__BB0_32:
	mov.b32 	%r18, %f884;
	and.b32  	%r277, %r18, 8388607;
	or.b32  	%r7998, %r277, 1065353216;
	mov.b32 	%f883, %r7998;
	add.s32 	%r278, %r18, -1073741824;
	and.b32  	%r7999, %r278, -8388608;
	setp.eq.s32 	%p68, %r7999, 0;
	@%p68 bra 	$L__BB0_35;
// %bb.33:                              // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f469, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f468,%f469;
	// end inline asm
$L__BB0_34:                             // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r279, %r7999, 192937984;
	add.s32 	%r280, %r7998, %r279;
	mov.b32 	%f470, %r280;
	mul.f32 	%f471, %f468, %f470;
	sub.f32 	%f472, %f470, %f471;
	fma.rn.f32 	%f473, %f472, %f468, %f471;
	sub.f32 	%f474, %f470, %f473;
	fma.rz.f32 	%f475, %f474, %f468, %f473;
	cvt.rzi.f32.f32 	%f476, %f475;
	sub.f32 	%f883, %f470, %f476;
	sub.s32 	%r7999, %r7999, %r279;
	mov.b32 	%r7998, %f883;
	setp.ne.s32 	%p69, %r7999, 0;
	setp.ne.s32 	%p70, %r7998, 0;
	and.pred  	%p71, %p69, %p70;
	@%p71 bra 	$L__BB0_34;
$L__BB0_35:                             // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p72, %r18, 2139095039;
	selp.f32 	%f477, 0f7FFFFFFF, 0f4B800000, %p72;
	mul.f32 	%f478, %f883, 0f34000000;
	mul.f32 	%f884, %f477, %f478;
	bra.uni 	$L__BB0_36;
$L__BB0_26:                             // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f461, %f884, %f181;
	cvt.rzi.f32.f32 	%f882, %f461;
	fma.rn.f32 	%f38, %f882, 0fC0000000, %f884;
	mov.b32 	%r17, %f38;
	setp.lt.u32 	%p63, %r17, 1073741824;
	@%p63 bra 	$L__BB0_31;
// %bb.27:
	setp.lt.u32 	%p64, %r17, -2147483647;
	@%p64 bra 	$L__BB0_29;
// %bb.28:
	add.f32 	%f466, %f882, 0fBF800000;
	setp.lt.f32 	%p67, %f38, 0fC0000000;
	add.f32 	%f467, %f466, 0fBF800000;
	selp.f32 	%f882, %f467, %f466, %p67;
	bra.uni 	$L__BB0_31;
$L__BB0_29:
	add.f32 	%f882, %f882, 0f3F800000;
	setp.ltu.f32 	%p65, %f38, 0f40800000;
	@%p65 bra 	$L__BB0_31;
// %bb.30:                              // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f462, %f882, 0f3F800000;
	fma.rn.f32 	%f464, %f181, 0fC0400000, %f38;
	setp.ge.f32 	%p66, %f464, 0f00000000;
	add.f32 	%f465, %f462, 0f3F800000;
	selp.f32 	%f882, %f465, %f462, %p66;
$L__BB0_31:                             // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f884, %f882, 0fC0000000, %f884;
$L__BB0_36:                             // %__internal_fmodf_kernel.exit.i
	shr.u32 	%r199, %r198, 1;
	abs.f32 	%f479, %f884;
	setp.gtu.f32 	%p73, %f479, 0f7F800000;
	@%p73 bra 	$L__BB0_38;
// %bb.37:
	mov.b32 	%r281, %f35;
	and.b32  	%r282, %r281, -2147483648;
	mov.b32 	%r283, %f884;
	or.b32  	%r284, %r282, %r283;
	mov.b32 	%f884, %r284;
$L__BB0_38:                             // %__nv_fmodf.exit
	ld.param.u64 	%rd1, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5];
	mul.wide.u32 	%rd64, %r199, 4;
	add.s32 	%r293, %r16, 2016;
	cvt.rn.f32.s32 	%f510, %r293;
	div.approx.f32 	%f54, %f510, %f213;
	abs.f32 	%f888, %f54;
	setp.lt.f32 	%p81, %f888, 0f40000000;
	@%p81 bra 	$L__BB0_50;
// %bb.39:
	setp.gtu.f32 	%p82, %f888, 0f4B800000;
	@%p82 bra 	$L__BB0_46;
	bra.uni 	$L__BB0_40;
$L__BB0_46:
	mov.b32 	%r26, %f888;
	and.b32  	%r294, %r26, 8388607;
	or.b32  	%r8000, %r294, 1065353216;
	mov.b32 	%f887, %r8000;
	add.s32 	%r295, %r26, -1073741824;
	and.b32  	%r8001, %r295, -8388608;
	setp.eq.s32 	%p88, %r8001, 0;
	@%p88 bra 	$L__BB0_49;
// %bb.47:                              // %__nv_fmaf_rn.exit4.i.i.i897.preheader
	mov.f32 	%f521, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f520,%f521;
	// end inline asm
$L__BB0_48:                             // %__nv_fmaf_rn.exit4.i.i.i897
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r296, %r8001, 192937984;
	add.s32 	%r297, %r8000, %r296;
	mov.b32 	%f522, %r297;
	mul.f32 	%f523, %f520, %f522;
	sub.f32 	%f524, %f522, %f523;
	fma.rn.f32 	%f525, %f524, %f520, %f523;
	sub.f32 	%f526, %f522, %f525;
	fma.rz.f32 	%f527, %f526, %f520, %f525;
	cvt.rzi.f32.f32 	%f528, %f527;
	sub.f32 	%f887, %f522, %f528;
	sub.s32 	%r8001, %r8001, %r296;
	mov.b32 	%r8000, %f887;
	setp.ne.s32 	%p89, %r8001, 0;
	setp.ne.s32 	%p90, %r8000, 0;
	and.pred  	%p91, %p89, %p90;
	@%p91 bra 	$L__BB0_48;
$L__BB0_49:                             // %__internal_fmodf_slowpath_mod.exit.i.i899
	setp.gt.u32 	%p92, %r26, 2139095039;
	selp.f32 	%f529, 0f7FFFFFFF, 0f4B800000, %p92;
	mul.f32 	%f530, %f887, 0f34000000;
	mul.f32 	%f888, %f529, %f530;
	bra.uni 	$L__BB0_50;
$L__BB0_40:                             // %__nv_fast_fdividef.exit.i.i.i876
	div.approx.f32 	%f513, %f888, %f181;
	cvt.rzi.f32.f32 	%f886, %f513;
	fma.rn.f32 	%f57, %f886, 0fC0000000, %f888;
	mov.b32 	%r25, %f57;
	setp.lt.u32 	%p83, %r25, 1073741824;
	@%p83 bra 	$L__BB0_45;
// %bb.41:
	setp.lt.u32 	%p84, %r25, -2147483647;
	@%p84 bra 	$L__BB0_43;
// %bb.42:
	add.f32 	%f518, %f886, 0fBF800000;
	setp.lt.f32 	%p87, %f57, 0fC0000000;
	add.f32 	%f519, %f518, 0fBF800000;
	selp.f32 	%f886, %f519, %f518, %p87;
	bra.uni 	$L__BB0_45;
$L__BB0_43:
	add.f32 	%f886, %f886, 0f3F800000;
	setp.ltu.f32 	%p85, %f57, 0f40800000;
	@%p85 bra 	$L__BB0_45;
// %bb.44:                              // %__nv_fmaf_rn.exit.i.i.i880
	add.f32 	%f514, %f886, 0f3F800000;
	fma.rn.f32 	%f516, %f181, 0fC0400000, %f57;
	setp.ge.f32 	%p86, %f516, 0f00000000;
	add.f32 	%f517, %f514, 0f3F800000;
	selp.f32 	%f886, %f517, %f514, %p86;
$L__BB0_45:                             // %__internal_fmodf_fastpath_quot.exit.i.i883
	fma.rn.f32 	%f888, %f886, 0fC0000000, %f888;
$L__BB0_50:                             // %__internal_fmodf_kernel.exit.i902
	add.s64 	%rd65, %rd1, %rd64;
	abs.f32 	%f531, %f888;
	setp.gtu.f32 	%p93, %f531, 0f7F800000;
	@%p93 bra 	$L__BB0_52;
// %bb.51:
	mov.b32 	%r298, %f54;
	and.b32  	%r299, %r298, -2147483648;
	mov.b32 	%r300, %f888;
	or.b32  	%r301, %r299, %r300;
	mov.b32 	%f888, %r301;
$L__BB0_52:                             // %__nv_fmodf.exit903
	ld.global.u32 	%r118, [%rd65];
	mov.u64 	%rd66, 2;
	mov.u64 	%rd67, 6;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd40;
	st.param.b32 	[param0+8], %r184;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd66;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd67;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11294, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd68, [retval0+0];
	} // callseq 2
	setp.eq.s64 	%p101, %rd68, 64;
	@%p101 bra 	$L__BB0_54;
	bra.uni 	$L__BB0_53;
$L__BB0_54:                             // %pass323
	shr.u32 	%r119, %r1, 1;
	shr.u32 	%r123, %r1, 3;
	and.b32  	%r316, %r1, 3;
	and.b32  	%r317, %r123, 2;
	or.b32  	%r318, %r120, %r317;
	and.b32  	%r319, %r119, 4;
	or.b32  	%r126, %r318, %r319;
	mul.lo.s32 	%r320, %r316, %r126;
	shl.b32 	%r321, %r320, 1;
	neg.s32 	%r322, %r321;
	cvt.rn.f32.s32 	%f156, %r322;
	mov.f32 	%f564, 0f41000000;
	div.approx.f32 	%f157, %f156, %f564;
	abs.f32 	%f904, %f157;
	setp.lt.f32 	%p102, %f904, 0f40000000;
	mov.f32 	%f892, %f904;
	@%p102 bra 	$L__BB0_66;
// %bb.55:
	setp.gtu.f32 	%p103, %f904, 0f4B800000;
	@%p103 bra 	$L__BB0_62;
	bra.uni 	$L__BB0_56;
$L__BB0_62:
	mov.b32 	%r36, %f904;
	and.b32  	%r323, %r36, 8388607;
	or.b32  	%r8002, %r323, 1065353216;
	mov.b32 	%f891, %r8002;
	add.s32 	%r324, %r36, -1073741824;
	and.b32  	%r8003, %r324, -8388608;
	setp.eq.s32 	%p109, %r8003, 0;
	@%p109 bra 	$L__BB0_65;
// %bb.63:                              // %__nv_fmaf_rn.exit4.i.i.i928.preheader
	mov.f32 	%f574, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f573,%f574;
	// end inline asm
$L__BB0_64:                             // %__nv_fmaf_rn.exit4.i.i.i928
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r325, %r8003, 192937984;
	add.s32 	%r326, %r8002, %r325;
	mov.b32 	%f575, %r326;
	mul.f32 	%f576, %f573, %f575;
	sub.f32 	%f577, %f575, %f576;
	fma.rn.f32 	%f578, %f577, %f573, %f576;
	sub.f32 	%f579, %f575, %f578;
	fma.rz.f32 	%f580, %f579, %f573, %f578;
	cvt.rzi.f32.f32 	%f581, %f580;
	sub.f32 	%f891, %f575, %f581;
	sub.s32 	%r8003, %r8003, %r325;
	mov.b32 	%r8002, %f891;
	setp.ne.s32 	%p110, %r8003, 0;
	setp.ne.s32 	%p111, %r8002, 0;
	and.pred  	%p112, %p110, %p111;
	@%p112 bra 	$L__BB0_64;
$L__BB0_65:                             // %__internal_fmodf_slowpath_mod.exit.i.i930
	setp.gt.u32 	%p113, %r36, 2139095039;
	selp.f32 	%f582, 0f7FFFFFFF, 0f4B800000, %p113;
	mul.f32 	%f583, %f891, 0f34000000;
	mul.f32 	%f892, %f582, %f583;
	bra.uni 	$L__BB0_66;
$L__BB0_56:                             // %__nv_fast_fdividef.exit.i.i.i907
	div.approx.f32 	%f566, %f904, %f181;
	cvt.rzi.f32.f32 	%f890, %f566;
	fma.rn.f32 	%f72, %f890, 0fC0000000, %f904;
	mov.b32 	%r35, %f72;
	setp.lt.u32 	%p104, %r35, 1073741824;
	@%p104 bra 	$L__BB0_61;
// %bb.57:
	setp.lt.u32 	%p105, %r35, -2147483647;
	@%p105 bra 	$L__BB0_59;
// %bb.58:
	add.f32 	%f571, %f890, 0fBF800000;
	setp.lt.f32 	%p108, %f72, 0fC0000000;
	add.f32 	%f572, %f571, 0fBF800000;
	selp.f32 	%f890, %f572, %f571, %p108;
	bra.uni 	$L__BB0_61;
$L__BB0_59:
	add.f32 	%f890, %f890, 0f3F800000;
	setp.ltu.f32 	%p106, %f72, 0f40800000;
	@%p106 bra 	$L__BB0_61;
// %bb.60:                              // %__nv_fmaf_rn.exit.i.i.i911
	add.f32 	%f567, %f890, 0f3F800000;
	fma.rn.f32 	%f569, %f181, 0fC0400000, %f72;
	setp.ge.f32 	%p107, %f569, 0f00000000;
	add.f32 	%f570, %f567, 0f3F800000;
	selp.f32 	%f890, %f570, %f567, %p107;
$L__BB0_61:                             // %__internal_fmodf_fastpath_quot.exit.i.i914
	fma.rn.f32 	%f892, %f890, 0fC0000000, %f904;
$L__BB0_66:                             // %__internal_fmodf_kernel.exit.i933
	abs.f32 	%f584, %f892;
	setp.gtu.f32 	%p114, %f584, 0f7F800000;
	mov.b32 	%r327, %f157;
	and.b32  	%r43, %r327, -2147483648;
	@%p114 bra 	$L__BB0_68;
// %bb.67:
	mov.b32 	%r328, %f892;
	or.b32  	%r329, %r43, %r328;
	mov.b32 	%f892, %r329;
$L__BB0_68:                             // %__nv_fmodf.exit934
	and.b32  	%r338, %r114, 6;
	mov.u32 	%r339, -8;
	sub.s32 	%r340, %r339, %r338;
	mul.lo.s32 	%r341, %r126, %r340;
	cvt.rn.f32.s32 	%f88, %r341;
	div.approx.f32 	%f89, %f88, %f564;
	abs.f32 	%f908, %f89;
	setp.lt.f32 	%p122, %f908, 0f40000000;
	mov.f32 	%f896, %f908;
	@%p122 bra 	$L__BB0_80;
// %bb.69:
	setp.gtu.f32 	%p123, %f908, 0f4B800000;
	@%p123 bra 	$L__BB0_76;
	bra.uni 	$L__BB0_70;
$L__BB0_76:
	mov.b32 	%r45, %f908;
	and.b32  	%r342, %r45, 8388607;
	or.b32  	%r8004, %r342, 1065353216;
	mov.b32 	%f895, %r8004;
	add.s32 	%r343, %r45, -1073741824;
	and.b32  	%r8005, %r343, -8388608;
	setp.eq.s32 	%p129, %r8005, 0;
	@%p129 bra 	$L__BB0_79;
// %bb.77:                              // %__nv_fmaf_rn.exit4.i.i.i959.preheader
	mov.f32 	%f625, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f624,%f625;
	// end inline asm
$L__BB0_78:                             // %__nv_fmaf_rn.exit4.i.i.i959
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r344, %r8005, 192937984;
	add.s32 	%r345, %r8004, %r344;
	mov.b32 	%f626, %r345;
	mul.f32 	%f627, %f624, %f626;
	sub.f32 	%f628, %f626, %f627;
	fma.rn.f32 	%f629, %f628, %f624, %f627;
	sub.f32 	%f630, %f626, %f629;
	fma.rz.f32 	%f631, %f630, %f624, %f629;
	cvt.rzi.f32.f32 	%f632, %f631;
	sub.f32 	%f895, %f626, %f632;
	sub.s32 	%r8005, %r8005, %r344;
	mov.b32 	%r8004, %f895;
	setp.ne.s32 	%p130, %r8005, 0;
	setp.ne.s32 	%p131, %r8004, 0;
	and.pred  	%p132, %p130, %p131;
	@%p132 bra 	$L__BB0_78;
$L__BB0_79:                             // %__internal_fmodf_slowpath_mod.exit.i.i961
	setp.gt.u32 	%p133, %r45, 2139095039;
	selp.f32 	%f633, 0f7FFFFFFF, 0f4B800000, %p133;
	mul.f32 	%f634, %f895, 0f34000000;
	mul.f32 	%f896, %f633, %f634;
	bra.uni 	$L__BB0_80;
$L__BB0_70:                             // %__nv_fast_fdividef.exit.i.i.i938
	div.approx.f32 	%f617, %f908, %f181;
	cvt.rzi.f32.f32 	%f894, %f617;
	fma.rn.f32 	%f92, %f894, 0fC0000000, %f908;
	mov.b32 	%r44, %f92;
	setp.lt.u32 	%p124, %r44, 1073741824;
	@%p124 bra 	$L__BB0_75;
// %bb.71:
	setp.lt.u32 	%p125, %r44, -2147483647;
	@%p125 bra 	$L__BB0_73;
// %bb.72:
	add.f32 	%f622, %f894, 0fBF800000;
	setp.lt.f32 	%p128, %f92, 0fC0000000;
	add.f32 	%f623, %f622, 0fBF800000;
	selp.f32 	%f894, %f623, %f622, %p128;
	bra.uni 	$L__BB0_75;
$L__BB0_73:
	add.f32 	%f894, %f894, 0f3F800000;
	setp.ltu.f32 	%p126, %f92, 0f40800000;
	@%p126 bra 	$L__BB0_75;
// %bb.74:                              // %__nv_fmaf_rn.exit.i.i.i942
	add.f32 	%f618, %f894, 0f3F800000;
	fma.rn.f32 	%f620, %f181, 0fC0400000, %f92;
	setp.ge.f32 	%p127, %f620, 0f00000000;
	add.f32 	%f621, %f618, 0f3F800000;
	selp.f32 	%f894, %f621, %f618, %p127;
$L__BB0_75:                             // %__internal_fmodf_fastpath_quot.exit.i.i945
	fma.rn.f32 	%f896, %f894, 0fC0000000, %f908;
$L__BB0_80:                             // %__internal_fmodf_kernel.exit.i964
	abs.f32 	%f635, %f896;
	setp.gtu.f32 	%p134, %f635, 0f7F800000;
	mov.b32 	%r346, %f89;
	and.b32  	%r52, %r346, -2147483648;
	@%p134 bra 	$L__BB0_82;
// %bb.81:
	mov.b32 	%r347, %f896;
	or.b32  	%r348, %r52, %r347;
	mov.b32 	%f896, %r348;
$L__BB0_82:                             // %__nv_fmodf.exit965
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd40;
	st.param.b32 	[param0+8], %r184;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd66;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd67;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11294, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd74, [retval0+0];
	} // callseq 6
	setp.eq.s64 	%p142, %rd74, 64;
	@%p142 bra 	$L__BB0_133;
	bra.uni 	$L__BB0_83;
$L__BB0_133:                            // %pass400
	{ // callseq 10, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd40;
	st.param.b32 	[param0+8], %r184;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd66;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd67;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11294, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd80, [retval0+0];
	} // callseq 10
	cvt.rn.f32.s64 	%f668, %rd80;
	div.approx.f32 	%f159, %f156, %f668;
	abs.f32 	%f912, %f159;
	setp.lt.f32 	%p143, %f912, 0f40000000;
	@%p143 bra 	$L__BB0_145;
// %bb.134:
	setp.gtu.f32 	%p144, %f912, 0f4B800000;
	@%p144 bra 	$L__BB0_141;
	bra.uni 	$L__BB0_135;
$L__BB0_141:
	mov.b32 	%r128, %f912;
	and.b32  	%r369, %r128, 8388607;
	or.b32  	%r8025, %r369, 1065353216;
	mov.b32 	%f911, %r8025;
	add.s32 	%r370, %r128, -1073741824;
	and.b32  	%r8026, %r370, -8388608;
	setp.eq.s32 	%p150, %r8026, 0;
	@%p150 bra 	$L__BB0_144;
// %bb.142:                             // %__nv_fmaf_rn.exit4.i.i.i1083.preheader
	mov.f32 	%f678, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f677,%f678;
	// end inline asm
$L__BB0_143:                            // %__nv_fmaf_rn.exit4.i.i.i1083
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r371, %r8026, 192937984;
	add.s32 	%r372, %r8025, %r371;
	mov.b32 	%f679, %r372;
	mul.f32 	%f680, %f677, %f679;
	sub.f32 	%f681, %f679, %f680;
	fma.rn.f32 	%f682, %f681, %f677, %f680;
	sub.f32 	%f683, %f679, %f682;
	fma.rz.f32 	%f684, %f683, %f677, %f682;
	cvt.rzi.f32.f32 	%f685, %f684;
	sub.f32 	%f911, %f679, %f685;
	sub.s32 	%r8026, %r8026, %r371;
	mov.b32 	%r8025, %f911;
	setp.ne.s32 	%p151, %r8026, 0;
	setp.ne.s32 	%p152, %r8025, 0;
	and.pred  	%p153, %p151, %p152;
	@%p153 bra 	$L__BB0_143;
$L__BB0_144:                            // %__internal_fmodf_slowpath_mod.exit.i.i1085
	setp.gt.u32 	%p154, %r128, 2139095039;
	selp.f32 	%f686, 0f7FFFFFFF, 0f4B800000, %p154;
	mul.f32 	%f687, %f911, 0f34000000;
	mul.f32 	%f912, %f686, %f687;
	bra.uni 	$L__BB0_145;
$L__BB0_135:                            // %__nv_fast_fdividef.exit.i.i.i1062
	div.approx.f32 	%f670, %f912, %f181;
	cvt.rzi.f32.f32 	%f910, %f670;
	fma.rn.f32 	%f162, %f910, 0fC0000000, %f912;
	mov.b32 	%r127, %f162;
	setp.lt.u32 	%p145, %r127, 1073741824;
	@%p145 bra 	$L__BB0_140;
// %bb.136:
	setp.lt.u32 	%p146, %r127, -2147483647;
	@%p146 bra 	$L__BB0_138;
// %bb.137:
	add.f32 	%f675, %f910, 0fBF800000;
	setp.lt.f32 	%p149, %f162, 0fC0000000;
	add.f32 	%f676, %f675, 0fBF800000;
	selp.f32 	%f910, %f676, %f675, %p149;
	bra.uni 	$L__BB0_140;
$L__BB0_138:
	add.f32 	%f910, %f910, 0f3F800000;
	setp.ltu.f32 	%p147, %f162, 0f40800000;
	@%p147 bra 	$L__BB0_140;
// %bb.139:                             // %__nv_fmaf_rn.exit.i.i.i1066
	add.f32 	%f671, %f910, 0f3F800000;
	fma.rn.f32 	%f673, %f181, 0fC0400000, %f162;
	setp.ge.f32 	%p148, %f673, 0f00000000;
	add.f32 	%f674, %f671, 0f3F800000;
	selp.f32 	%f910, %f674, %f671, %p148;
$L__BB0_140:                            // %__internal_fmodf_fastpath_quot.exit.i.i1069
	fma.rn.f32 	%f912, %f910, 0fC0000000, %f912;
$L__BB0_145:                            // %__internal_fmodf_kernel.exit.i1088
	abs.f32 	%f688, %f912;
	setp.gtu.f32 	%p155, %f688, 0f7F800000;
	@%p155 bra 	$L__BB0_147;
// %bb.146:
	mov.b32 	%r373, %f159;
	and.b32  	%r374, %r373, -2147483648;
	mov.b32 	%r375, %f912;
	or.b32  	%r376, %r374, %r375;
	mov.b32 	%f912, %r376;
$L__BB0_147:                            // %__nv_fmodf.exit1089
	{ // callseq 11, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd40;
	st.param.b32 	[param0+8], %r184;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd66;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd67;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11294, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd84, [retval0+0];
	} // callseq 11
	cvt.rn.f32.s64 	%f719, %rd84;
	div.approx.f32 	%f178, %f88, %f719;
	abs.f32 	%f900, %f178;
	setp.lt.f32 	%p163, %f900, 0f40000000;
	@%p163 bra 	$L__BB0_95;
// %bb.84:
	setp.gtu.f32 	%p164, %f900, 0f4B800000;
	@%p164 bra 	$L__BB0_91;
	bra.uni 	$L__BB0_85;
$L__BB0_91:
	mov.b32 	%r58, %f900;
	and.b32  	%r385, %r58, 8388607;
	or.b32  	%r8006, %r385, 1065353216;
	mov.b32 	%f899, %r8006;
	add.s32 	%r386, %r58, -1073741824;
	and.b32  	%r8007, %r386, -8388608;
	setp.eq.s32 	%p170, %r8007, 0;
	@%p170 bra 	$L__BB0_94;
// %bb.92:                              // %__nv_fmaf_rn.exit4.i.i.i990.preheader
	mov.f32 	%f729, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f728,%f729;
	// end inline asm
$L__BB0_93:                             // %__nv_fmaf_rn.exit4.i.i.i990
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r387, %r8007, 192937984;
	add.s32 	%r388, %r8006, %r387;
	mov.b32 	%f730, %r388;
	mul.f32 	%f731, %f728, %f730;
	sub.f32 	%f732, %f730, %f731;
	fma.rn.f32 	%f733, %f732, %f728, %f731;
	sub.f32 	%f734, %f730, %f733;
	fma.rz.f32 	%f735, %f734, %f728, %f733;
	cvt.rzi.f32.f32 	%f736, %f735;
	sub.f32 	%f899, %f730, %f736;
	sub.s32 	%r8007, %r8007, %r387;
	mov.b32 	%r8006, %f899;
	setp.ne.s32 	%p171, %r8007, 0;
	setp.ne.s32 	%p172, %r8006, 0;
	and.pred  	%p173, %p171, %p172;
	@%p173 bra 	$L__BB0_93;
$L__BB0_94:                             // %__internal_fmodf_slowpath_mod.exit.i.i992
	setp.gt.u32 	%p174, %r58, 2139095039;
	selp.f32 	%f737, 0f7FFFFFFF, 0f4B800000, %p174;
	mul.f32 	%f738, %f899, 0f34000000;
	mul.f32 	%f900, %f737, %f738;
	bra.uni 	$L__BB0_95;
$L__BB0_85:                             // %__nv_fast_fdividef.exit.i.i.i969
	div.approx.f32 	%f721, %f900, %f181;
	cvt.rzi.f32.f32 	%f898, %f721;
	fma.rn.f32 	%f107, %f898, 0fC0000000, %f900;
	mov.b32 	%r57, %f107;
	setp.lt.u32 	%p165, %r57, 1073741824;
	@%p165 bra 	$L__BB0_90;
// %bb.86:
	setp.lt.u32 	%p166, %r57, -2147483647;
	@%p166 bra 	$L__BB0_88;
// %bb.87:
	add.f32 	%f726, %f898, 0fBF800000;
	setp.lt.f32 	%p169, %f107, 0fC0000000;
	add.f32 	%f727, %f726, 0fBF800000;
	selp.f32 	%f898, %f727, %f726, %p169;
	bra.uni 	$L__BB0_90;
$L__BB0_88:
	add.f32 	%f898, %f898, 0f3F800000;
	setp.ltu.f32 	%p167, %f107, 0f40800000;
	@%p167 bra 	$L__BB0_90;
// %bb.89:                              // %__nv_fmaf_rn.exit.i.i.i973
	add.f32 	%f722, %f898, 0f3F800000;
	fma.rn.f32 	%f724, %f181, 0fC0400000, %f107;
	setp.ge.f32 	%p168, %f724, 0f00000000;
	add.f32 	%f725, %f722, 0f3F800000;
	selp.f32 	%f898, %f725, %f722, %p168;
$L__BB0_90:                             // %__internal_fmodf_fastpath_quot.exit.i.i976
	fma.rn.f32 	%f900, %f898, 0fC0000000, %f900;
$L__BB0_95:                             // %__internal_fmodf_kernel.exit.i995
	abs.f32 	%f739, %f900;
	setp.gtu.f32 	%p175, %f739, 0f7F800000;
	@%p175 bra 	$L__BB0_97;
// %bb.96:
	mov.b32 	%r389, %f178;
	and.b32  	%r390, %r389, -2147483648;
	mov.b32 	%r391, %f900;
	or.b32  	%r392, %r390, %r391;
	mov.b32 	%f900, %r392;
$L__BB0_97:                             // %__nv_fmodf.exit996
	{ // callseq 12, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd40;
	st.param.b32 	[param0+8], %r184;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd66;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd67;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11294, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd88, [retval0+0];
	} // callseq 12
	setp.eq.s64 	%p183, %rd88, 64;
	@%p183 bra 	$L__BB0_99;
	bra.uni 	$L__BB0_98;
$L__BB0_99:                             // %pass465
	@%p102 bra 	$L__BB0_111;
// %bb.100:
	setp.gtu.f32 	%p185, %f904, 0f4B800000;
	@%p185 bra 	$L__BB0_107;
	bra.uni 	$L__BB0_101;
$L__BB0_107:
	mov.b32 	%r68, %f904;
	and.b32  	%r407, %r68, 8388607;
	or.b32  	%r8008, %r407, 1065353216;
	mov.b32 	%f903, %r8008;
	add.s32 	%r408, %r68, -1073741824;
	and.b32  	%r8009, %r408, -8388608;
	setp.eq.s32 	%p191, %r8009, 0;
	@%p191 bra 	$L__BB0_110;
// %bb.108:                             // %__nv_fmaf_rn.exit4.i.i.i1021.preheader
	mov.f32 	%f781, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f780,%f781;
	// end inline asm
$L__BB0_109:                            // %__nv_fmaf_rn.exit4.i.i.i1021
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r409, %r8009, 192937984;
	add.s32 	%r410, %r8008, %r409;
	mov.b32 	%f782, %r410;
	mul.f32 	%f783, %f780, %f782;
	sub.f32 	%f784, %f782, %f783;
	fma.rn.f32 	%f785, %f784, %f780, %f783;
	sub.f32 	%f786, %f782, %f785;
	fma.rz.f32 	%f787, %f786, %f780, %f785;
	cvt.rzi.f32.f32 	%f788, %f787;
	sub.f32 	%f903, %f782, %f788;
	sub.s32 	%r8009, %r8009, %r409;
	mov.b32 	%r8008, %f903;
	setp.ne.s32 	%p192, %r8009, 0;
	setp.ne.s32 	%p193, %r8008, 0;
	and.pred  	%p194, %p192, %p193;
	@%p194 bra 	$L__BB0_109;
$L__BB0_110:                            // %__internal_fmodf_slowpath_mod.exit.i.i1023
	setp.gt.u32 	%p195, %r68, 2139095039;
	selp.f32 	%f789, 0f7FFFFFFF, 0f4B800000, %p195;
	mul.f32 	%f790, %f903, 0f34000000;
	mul.f32 	%f904, %f789, %f790;
	bra.uni 	$L__BB0_111;
$L__BB0_101:                            // %__nv_fast_fdividef.exit.i.i.i1000
	div.approx.f32 	%f773, %f904, %f181;
	cvt.rzi.f32.f32 	%f902, %f773;
	fma.rn.f32 	%f122, %f902, 0fC0000000, %f904;
	mov.b32 	%r67, %f122;
	setp.lt.u32 	%p186, %r67, 1073741824;
	@%p186 bra 	$L__BB0_106;
// %bb.102:
	setp.lt.u32 	%p187, %r67, -2147483647;
	@%p187 bra 	$L__BB0_104;
// %bb.103:
	add.f32 	%f778, %f902, 0fBF800000;
	setp.lt.f32 	%p190, %f122, 0fC0000000;
	add.f32 	%f779, %f778, 0fBF800000;
	selp.f32 	%f902, %f779, %f778, %p190;
	bra.uni 	$L__BB0_106;
$L__BB0_104:
	add.f32 	%f902, %f902, 0f3F800000;
	setp.ltu.f32 	%p188, %f122, 0f40800000;
	@%p188 bra 	$L__BB0_106;
// %bb.105:                             // %__nv_fmaf_rn.exit.i.i.i1004
	add.f32 	%f774, %f902, 0f3F800000;
	fma.rn.f32 	%f776, %f181, 0fC0400000, %f122;
	setp.ge.f32 	%p189, %f776, 0f00000000;
	add.f32 	%f777, %f774, 0f3F800000;
	selp.f32 	%f902, %f777, %f774, %p189;
$L__BB0_106:                            // %__internal_fmodf_fastpath_quot.exit.i.i1007
	fma.rn.f32 	%f904, %f902, 0fC0000000, %f904;
$L__BB0_111:                            // %__internal_fmodf_kernel.exit.i1026
	abs.f32 	%f791, %f904;
	setp.gtu.f32 	%p196, %f791, 0f7F800000;
	@%p196 bra 	$L__BB0_113;
// %bb.112:
	mov.b32 	%r411, %f904;
	or.b32  	%r412, %r43, %r411;
	mov.b32 	%f904, %r412;
$L__BB0_113:                            // %__nv_fmodf.exit1027
	@%p122 bra 	$L__BB0_125;
// %bb.114:
	setp.gtu.f32 	%p205, %f908, 0f4B800000;
	@%p205 bra 	$L__BB0_121;
	bra.uni 	$L__BB0_115;
$L__BB0_121:
	mov.b32 	%r76, %f908;
	and.b32  	%r421, %r76, 8388607;
	or.b32  	%r8010, %r421, 1065353216;
	mov.b32 	%f907, %r8010;
	add.s32 	%r422, %r76, -1073741824;
	and.b32  	%r8011, %r422, -8388608;
	setp.eq.s32 	%p211, %r8011, 0;
	@%p211 bra 	$L__BB0_124;
// %bb.122:                             // %__nv_fmaf_rn.exit4.i.i.i1052.preheader
	mov.f32 	%f831, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f830,%f831;
	// end inline asm
$L__BB0_123:                            // %__nv_fmaf_rn.exit4.i.i.i1052
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r423, %r8011, 192937984;
	add.s32 	%r424, %r8010, %r423;
	mov.b32 	%f832, %r424;
	mul.f32 	%f833, %f830, %f832;
	sub.f32 	%f834, %f832, %f833;
	fma.rn.f32 	%f835, %f834, %f830, %f833;
	sub.f32 	%f836, %f832, %f835;
	fma.rz.f32 	%f837, %f836, %f830, %f835;
	cvt.rzi.f32.f32 	%f838, %f837;
	sub.f32 	%f907, %f832, %f838;
	sub.s32 	%r8011, %r8011, %r423;
	mov.b32 	%r8010, %f907;
	setp.ne.s32 	%p212, %r8011, 0;
	setp.ne.s32 	%p213, %r8010, 0;
	and.pred  	%p214, %p212, %p213;
	@%p214 bra 	$L__BB0_123;
$L__BB0_124:                            // %__internal_fmodf_slowpath_mod.exit.i.i1054
	setp.gt.u32 	%p215, %r76, 2139095039;
	selp.f32 	%f839, 0f7FFFFFFF, 0f4B800000, %p215;
	mul.f32 	%f840, %f907, 0f34000000;
	mul.f32 	%f908, %f839, %f840;
	bra.uni 	$L__BB0_125;
$L__BB0_115:                            // %__nv_fast_fdividef.exit.i.i.i1031
	div.approx.f32 	%f823, %f908, %f181;
	cvt.rzi.f32.f32 	%f906, %f823;
	fma.rn.f32 	%f139, %f906, 0fC0000000, %f908;
	mov.b32 	%r75, %f139;
	setp.lt.u32 	%p206, %r75, 1073741824;
	@%p206 bra 	$L__BB0_120;
// %bb.116:
	setp.lt.u32 	%p207, %r75, -2147483647;
	@%p207 bra 	$L__BB0_118;
// %bb.117:
	add.f32 	%f828, %f906, 0fBF800000;
	setp.lt.f32 	%p210, %f139, 0fC0000000;
	add.f32 	%f829, %f828, 0fBF800000;
	selp.f32 	%f906, %f829, %f828, %p210;
	bra.uni 	$L__BB0_120;
$L__BB0_118:
	add.f32 	%f906, %f906, 0f3F800000;
	setp.ltu.f32 	%p208, %f139, 0f40800000;
	@%p208 bra 	$L__BB0_120;
// %bb.119:                             // %__nv_fmaf_rn.exit.i.i.i1035
	add.f32 	%f824, %f906, 0f3F800000;
	fma.rn.f32 	%f826, %f181, 0fC0400000, %f139;
	setp.ge.f32 	%p209, %f826, 0f00000000;
	add.f32 	%f827, %f824, 0f3F800000;
	selp.f32 	%f906, %f827, %f824, %p209;
$L__BB0_120:                            // %__internal_fmodf_fastpath_quot.exit.i.i1038
	fma.rn.f32 	%f908, %f906, 0fC0000000, %f908;
$L__BB0_125:                            // %__internal_fmodf_kernel.exit.i1057
	abs.f32 	%f841, %f908;
	setp.gtu.f32 	%p216, %f841, 0f7F800000;
	@%p216 bra 	$L__BB0_127;
// %bb.126:
	mov.b32 	%r425, %f908;
	or.b32  	%r426, %r52, %r425;
	mov.b32 	%f908, %r426;
$L__BB0_127:                            // %__nv_fmodf.exit1058
	setp.le.s32 	%p224, %r6, %r5;
	mov.u32 	%r7995, 0;
	@%p224 bra 	$L__BB0_153;
// %bb.128:                             // %L1561.lr.ph
	mov.f32 	%f185, 0f43808000;
	div.approx.f32 	%f186, %f184, %f185;
	div.approx.f32 	%f220, %f218, %f185;
	div.approx.f32 	%f255, %f253, %f185;
	div.approx.f32 	%f289, %f287, %f185;
	div.approx.f32 	%f324, %f322, %f185;
	div.approx.f32 	%f358, %f356, %f185;
	div.approx.f32 	%f393, %f391, %f185;
	div.approx.f32 	%f427, %f425, %f185;
	abs.f32 	%f187, %f186;
	abs.f32 	%f221, %f220;
	abs.f32 	%f256, %f255;
	abs.f32 	%f290, %f289;
	abs.f32 	%f325, %f324;
	abs.f32 	%f359, %f358;
	abs.f32 	%f394, %f393;
	abs.f32 	%f428, %f427;
	setp.gt.f32 	%p13, %f187, 0f4B800000;
	mul.f32 	%f188, %f186, 0f00000000;
	setp.gt.f32 	%p19, %f221, 0f4B800000;
	mul.f32 	%f222, %f220, 0f00000000;
	setp.gt.f32 	%p25, %f256, 0f4B800000;
	mul.f32 	%f257, %f255, 0f00000000;
	setp.gt.f32 	%p31, %f290, 0f4B800000;
	mul.f32 	%f291, %f289, 0f00000000;
	setp.gt.f32 	%p37, %f325, 0f4B800000;
	mul.f32 	%f326, %f324, 0f00000000;
	setp.gt.f32 	%p43, %f359, 0f4B800000;
	mul.f32 	%f360, %f358, 0f00000000;
	setp.gt.f32 	%p49, %f394, 0f4B800000;
	mul.f32 	%f395, %f393, 0f00000000;
	setp.gt.f32 	%p55, %f428, 0f4B800000;
	mul.f32 	%f429, %f427, 0f00000000;
	selp.f32 	%f189, %f188, %f186, %p13;
	selp.f32 	%f223, %f222, %f220, %p19;
	selp.f32 	%f258, %f257, %f255, %p25;
	selp.f32 	%f292, %f291, %f289, %p31;
	selp.f32 	%f327, %f326, %f324, %p37;
	selp.f32 	%f361, %f360, %f358, %p43;
	selp.f32 	%f396, %f395, %f393, %p49;
	selp.f32 	%f430, %f429, %f427, %p55;
	add.f32 	%f190, %f189, %f189;
	add.f32 	%f224, %f223, %f223;
	add.f32 	%f259, %f258, %f258;
	add.f32 	%f293, %f292, %f292;
	add.f32 	%f328, %f327, %f327;
	add.f32 	%f362, %f361, %f361;
	add.f32 	%f397, %f396, %f396;
	add.f32 	%f431, %f430, %f430;
	add.f32 	%f480, %f884, %f884;
	add.f32 	%f532, %f888, %f888;
	add.f32 	%f585, %f892, %f892;
	add.f32 	%f636, %f896, %f896;
	mov.b32 	%r206, %f190;
	mov.b32 	%r213, %f224;
	mov.b32 	%r224, %f259;
	mov.b32 	%r231, %f293;
	mov.b32 	%r242, %f328;
	mov.b32 	%r249, %f362;
	mov.b32 	%r260, %f397;
	mov.b32 	%r267, %f431;
	mov.b32 	%r285, %f480;
	mov.b32 	%r308, %f532;
	mov.b32 	%r330, %f585;
	mov.b32 	%r361, %f636;
	and.b32  	%r207, %r206, -2147483648;
	and.b32  	%r214, %r213, -2147483648;
	and.b32  	%r225, %r224, -2147483648;
	and.b32  	%r232, %r231, -2147483648;
	and.b32  	%r243, %r242, -2147483648;
	and.b32  	%r250, %r249, -2147483648;
	and.b32  	%r261, %r260, -2147483648;
	and.b32  	%r268, %r267, -2147483648;
	and.b32  	%r286, %r285, -2147483648;
	and.b32  	%r309, %r308, -2147483648;
	and.b32  	%r331, %r330, -2147483648;
	and.b32  	%r362, %r361, -2147483648;
	add.f32 	%f689, %f912, %f912;
	add.f32 	%f740, %f900, %f900;
	or.b32  	%r208, %r207, 1056964608;
	or.b32  	%r215, %r214, 1056964608;
	or.b32  	%r226, %r225, 1056964608;
	or.b32  	%r233, %r232, 1056964608;
	or.b32  	%r244, %r243, 1056964608;
	or.b32  	%r251, %r250, 1056964608;
	or.b32  	%r262, %r261, 1056964608;
	or.b32  	%r269, %r268, 1056964608;
	or.b32  	%r287, %r286, 1056964608;
	or.b32  	%r310, %r309, 1056964608;
	or.b32  	%r332, %r331, 1056964608;
	or.b32  	%r363, %r362, 1056964608;
	mov.b32 	%r377, %f689;
	mov.b32 	%r399, %f740;
	mov.b32 	%f191, %r208;
	mov.b32 	%f225, %r215;
	mov.b32 	%f260, %r226;
	mov.b32 	%f294, %r233;
	mov.b32 	%f329, %r244;
	mov.b32 	%f363, %r251;
	mov.b32 	%f398, %r262;
	mov.b32 	%f432, %r269;
	mov.b32 	%f481, %r287;
	mov.b32 	%f533, %r310;
	mov.b32 	%f586, %r332;
	mov.b32 	%f637, %r363;
	and.b32  	%r378, %r377, -2147483648;
	and.b32  	%r400, %r399, -2147483648;
	add.f32 	%f792, %f904, %f904;
	add.f32 	%f192, %f190, %f191;
	abs.f32 	%f194, %f190;
	add.f32 	%f226, %f224, %f225;
	abs.f32 	%f228, %f224;
	add.f32 	%f261, %f259, %f260;
	abs.f32 	%f263, %f259;
	add.f32 	%f295, %f293, %f294;
	abs.f32 	%f297, %f293;
	add.f32 	%f330, %f328, %f329;
	abs.f32 	%f332, %f328;
	add.f32 	%f364, %f362, %f363;
	abs.f32 	%f366, %f362;
	add.f32 	%f399, %f397, %f398;
	abs.f32 	%f401, %f397;
	add.f32 	%f433, %f431, %f432;
	abs.f32 	%f435, %f431;
	add.f32 	%f482, %f480, %f481;
	abs.f32 	%f484, %f480;
	add.f32 	%f534, %f532, %f533;
	abs.f32 	%f536, %f532;
	add.f32 	%f587, %f585, %f586;
	abs.f32 	%f589, %f585;
	add.f32 	%f638, %f636, %f637;
	abs.f32 	%f640, %f636;
	or.b32  	%r379, %r378, 1056964608;
	or.b32  	%r401, %r400, 1056964608;
	mov.b32 	%r413, %f792;
	cvt.rzi.f32.f32 	%f193, %f192;
	setp.gt.f32 	%p14, %f194, 0f4B000000;
	cvt.rzi.f32.f32 	%f227, %f226;
	setp.gt.f32 	%p20, %f228, 0f4B000000;
	cvt.rzi.f32.f32 	%f262, %f261;
	setp.gt.f32 	%p26, %f263, 0f4B000000;
	cvt.rzi.f32.f32 	%f296, %f295;
	setp.gt.f32 	%p32, %f297, 0f4B000000;
	cvt.rzi.f32.f32 	%f331, %f330;
	setp.gt.f32 	%p38, %f332, 0f4B000000;
	cvt.rzi.f32.f32 	%f365, %f364;
	setp.gt.f32 	%p44, %f366, 0f4B000000;
	cvt.rzi.f32.f32 	%f400, %f399;
	setp.gt.f32 	%p50, %f401, 0f4B000000;
	cvt.rzi.f32.f32 	%f434, %f433;
	setp.gt.f32 	%p56, %f435, 0f4B000000;
	cvt.rzi.f32.f32 	%f483, %f482;
	setp.gt.f32 	%p74, %f484, 0f4B000000;
	cvt.rzi.f32.f32 	%f535, %f534;
	setp.gt.f32 	%p94, %f536, 0f4B000000;
	cvt.rzi.f32.f32 	%f588, %f587;
	setp.gt.f32 	%p115, %f589, 0f4B000000;
	cvt.rzi.f32.f32 	%f639, %f638;
	setp.gt.f32 	%p135, %f640, 0f4B000000;
	mov.b32 	%f690, %r379;
	mov.b32 	%f741, %r401;
	and.b32  	%r414, %r413, -2147483648;
	selp.f32 	%f195, %f190, %f193, %p14;
	cvt.rzi.f32.f32 	%f196, %f190;
	setp.lt.f32 	%p15, %f194, 0f3F000000;
	selp.f32 	%f229, %f224, %f227, %p20;
	cvt.rzi.f32.f32 	%f230, %f224;
	setp.lt.f32 	%p21, %f228, 0f3F000000;
	selp.f32 	%f264, %f259, %f262, %p26;
	cvt.rzi.f32.f32 	%f265, %f259;
	setp.lt.f32 	%p27, %f263, 0f3F000000;
	selp.f32 	%f298, %f293, %f296, %p32;
	cvt.rzi.f32.f32 	%f299, %f293;
	setp.lt.f32 	%p33, %f297, 0f3F000000;
	selp.f32 	%f333, %f328, %f331, %p38;
	cvt.rzi.f32.f32 	%f334, %f328;
	setp.lt.f32 	%p39, %f332, 0f3F000000;
	selp.f32 	%f367, %f362, %f365, %p44;
	cvt.rzi.f32.f32 	%f368, %f362;
	setp.lt.f32 	%p45, %f366, 0f3F000000;
	selp.f32 	%f402, %f397, %f400, %p50;
	cvt.rzi.f32.f32 	%f403, %f397;
	setp.lt.f32 	%p51, %f401, 0f3F000000;
	selp.f32 	%f436, %f431, %f434, %p56;
	cvt.rzi.f32.f32 	%f437, %f431;
	setp.lt.f32 	%p57, %f435, 0f3F000000;
	selp.f32 	%f485, %f480, %f483, %p74;
	cvt.rzi.f32.f32 	%f486, %f480;
	setp.lt.f32 	%p75, %f484, 0f3F000000;
	selp.f32 	%f537, %f532, %f535, %p94;
	cvt.rzi.f32.f32 	%f538, %f532;
	setp.lt.f32 	%p95, %f536, 0f3F000000;
	selp.f32 	%f590, %f585, %f588, %p115;
	cvt.rzi.f32.f32 	%f591, %f585;
	setp.lt.f32 	%p116, %f589, 0f3F000000;
	selp.f32 	%f641, %f636, %f639, %p135;
	cvt.rzi.f32.f32 	%f642, %f636;
	setp.lt.f32 	%p136, %f640, 0f3F000000;
	add.f32 	%f691, %f689, %f690;
	abs.f32 	%f693, %f689;
	add.f32 	%f742, %f740, %f741;
	abs.f32 	%f744, %f740;
	or.b32  	%r415, %r414, 1056964608;
	selp.f32 	%f197, %f196, %f195, %p15;
	selp.f32 	%f231, %f230, %f229, %p21;
	selp.f32 	%f266, %f265, %f264, %p27;
	selp.f32 	%f300, %f299, %f298, %p33;
	selp.f32 	%f335, %f334, %f333, %p39;
	selp.f32 	%f369, %f368, %f367, %p45;
	selp.f32 	%f404, %f403, %f402, %p51;
	selp.f32 	%f438, %f437, %f436, %p57;
	selp.f32 	%f487, %f486, %f485, %p75;
	selp.f32 	%f539, %f538, %f537, %p95;
	selp.f32 	%f592, %f591, %f590, %p116;
	selp.f32 	%f643, %f642, %f641, %p136;
	cvt.rzi.f32.f32 	%f692, %f691;
	setp.gt.f32 	%p156, %f693, 0f4B000000;
	cvt.rzi.f32.f32 	%f743, %f742;
	setp.gt.f32 	%p176, %f744, 0f4B000000;
	mov.b32 	%f793, %r415;
	fma.rn.f32 	%f198, %f197, 0fBF000000, %f189;
	fma.rn.f32 	%f232, %f231, 0fBF000000, %f223;
	fma.rn.f32 	%f267, %f266, 0fBF000000, %f258;
	fma.rn.f32 	%f301, %f300, 0fBF000000, %f292;
	fma.rn.f32 	%f336, %f335, 0fBF000000, %f327;
	fma.rn.f32 	%f370, %f369, 0fBF000000, %f361;
	fma.rn.f32 	%f405, %f404, 0fBF000000, %f396;
	fma.rn.f32 	%f439, %f438, 0fBF000000, %f430;
	fma.rn.f32 	%f488, %f487, 0fBF000000, %f884;
	fma.rn.f32 	%f540, %f539, 0fBF000000, %f888;
	fma.rn.f32 	%f593, %f592, 0fBF000000, %f892;
	fma.rn.f32 	%f644, %f643, 0fBF000000, %f896;
	selp.f32 	%f694, %f689, %f692, %p156;
	cvt.rzi.f32.f32 	%f695, %f689;
	setp.lt.f32 	%p157, %f693, 0f3F000000;
	selp.f32 	%f745, %f740, %f743, %p176;
	cvt.rzi.f32.f32 	%f746, %f740;
	setp.lt.f32 	%p177, %f744, 0f3F000000;
	add.f32 	%f794, %f792, %f793;
	abs.f32 	%f796, %f792;
	mul.f32 	%f199, %f198, %f198;
	mul.f32 	%f233, %f232, %f232;
	mul.f32 	%f268, %f267, %f267;
	mul.f32 	%f302, %f301, %f301;
	mul.f32 	%f337, %f336, %f336;
	mul.f32 	%f371, %f370, %f370;
	mul.f32 	%f406, %f405, %f405;
	mul.f32 	%f440, %f439, %f439;
	mul.f32 	%f489, %f488, %f488;
	mul.f32 	%f541, %f540, %f540;
	mul.f32 	%f594, %f593, %f593;
	mul.f32 	%f645, %f644, %f644;
	selp.f32 	%f696, %f695, %f694, %p157;
	selp.f32 	%f747, %f746, %f745, %p177;
	cvt.rzi.f32.f32 	%f795, %f794;
	setp.gt.f32 	%p198, %f796, 0f4B000000;
	cvt.rzi.s32.f32 	%r209, %f197;
	fma.rn.f32 	%f200, %f199, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f201, %f199, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r216, %f231;
	fma.rn.f32 	%f234, %f233, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f235, %f233, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r227, %f266;
	fma.rn.f32 	%f269, %f268, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f270, %f268, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r234, %f300;
	fma.rn.f32 	%f303, %f302, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f304, %f302, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r245, %f335;
	fma.rn.f32 	%f338, %f337, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f339, %f337, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r252, %f369;
	fma.rn.f32 	%f372, %f371, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f373, %f371, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r263, %f404;
	fma.rn.f32 	%f407, %f406, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f408, %f406, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r270, %f438;
	fma.rn.f32 	%f441, %f440, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f442, %f440, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f490, %f489, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f491, %f489, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f542, %f541, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f543, %f541, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f595, %f594, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f596, %f594, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f646, %f645, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f647, %f645, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f697, %f696, 0fBF000000, %f912;
	fma.rn.f32 	%f748, %f747, 0fBF000000, %f900;
	selp.f32 	%f797, %f792, %f795, %p198;
	cvt.rzi.f32.f32 	%f798, %f792;
	setp.lt.f32 	%p199, %f796, 0f3F000000;
	add.s32 	%r210, %r209, 1;
	fma.rn.f32 	%f202, %f200, %f199, 0fC0A55DF6;
	fma.rn.f32 	%f203, %f201, %f199, 0f4081E0CF;
	fma.rn.f32 	%f204, %f199, %f198, 0f00000000;
	add.s32 	%r217, %r216, 1;
	fma.rn.f32 	%f236, %f234, %f233, 0fC0A55DF6;
	fma.rn.f32 	%f237, %f235, %f233, 0f4081E0CF;
	fma.rn.f32 	%f238, %f233, %f232, 0f00000000;
	add.s32 	%r228, %r227, 1;
	fma.rn.f32 	%f271, %f269, %f268, 0fC0A55DF6;
	fma.rn.f32 	%f272, %f270, %f268, 0f4081E0CF;
	fma.rn.f32 	%f273, %f268, %f267, 0f00000000;
	add.s32 	%r235, %r234, 1;
	fma.rn.f32 	%f305, %f303, %f302, 0fC0A55DF6;
	fma.rn.f32 	%f306, %f304, %f302, 0f4081E0CF;
	fma.rn.f32 	%f307, %f302, %f301, 0f00000000;
	add.s32 	%r246, %r245, 1;
	fma.rn.f32 	%f340, %f338, %f337, 0fC0A55DF6;
	fma.rn.f32 	%f341, %f339, %f337, 0f4081E0CF;
	fma.rn.f32 	%f342, %f337, %f336, 0f00000000;
	add.s32 	%r253, %r252, 1;
	fma.rn.f32 	%f374, %f372, %f371, 0fC0A55DF6;
	fma.rn.f32 	%f375, %f373, %f371, 0f4081E0CF;
	fma.rn.f32 	%f376, %f371, %f370, 0f00000000;
	add.s32 	%r264, %r263, 1;
	fma.rn.f32 	%f409, %f407, %f406, 0fC0A55DF6;
	fma.rn.f32 	%f410, %f408, %f406, 0f4081E0CF;
	fma.rn.f32 	%f411, %f406, %f405, 0f00000000;
	add.s32 	%r271, %r270, 1;
	fma.rn.f32 	%f443, %f441, %f440, 0fC0A55DF6;
	fma.rn.f32 	%f444, %f442, %f440, 0f4081E0CF;
	fma.rn.f32 	%f445, %f440, %f439, 0f00000000;
	cvt.rzi.s32.f32 	%r288, %f487;
	fma.rn.f32 	%f492, %f490, %f489, 0fC0A55DF6;
	fma.rn.f32 	%f493, %f491, %f489, 0f4081E0CF;
	fma.rn.f32 	%f494, %f489, %f488, 0f00000000;
	cvt.rzi.s32.f32 	%r311, %f539;
	fma.rn.f32 	%f544, %f542, %f541, 0fC0A55DF6;
	fma.rn.f32 	%f545, %f543, %f541, 0f4081E0CF;
	fma.rn.f32 	%f546, %f541, %f540, 0f00000000;
	cvt.rzi.s32.f32 	%r333, %f592;
	fma.rn.f32 	%f597, %f595, %f594, 0fC0A55DF6;
	fma.rn.f32 	%f598, %f596, %f594, 0f4081E0CF;
	fma.rn.f32 	%f599, %f594, %f593, 0f00000000;
	cvt.rzi.s32.f32 	%r364, %f643;
	fma.rn.f32 	%f648, %f646, %f645, 0fC0A55DF6;
	fma.rn.f32 	%f649, %f647, %f645, 0f4081E0CF;
	fma.rn.f32 	%f650, %f645, %f644, 0f00000000;
	mul.f32 	%f698, %f697, %f697;
	mul.f32 	%f749, %f748, %f748;
	selp.f32 	%f799, %f798, %f797, %p199;
	fma.rn.f32 	%f205, %f203, %f199, 0fC09DE9E6;
	fma.rn.f32 	%f206, %f202, %f204, 0f00000000;
	and.b32  	%r211, %r210, 1;
	fma.rn.f32 	%f239, %f237, %f233, 0fC09DE9E6;
	fma.rn.f32 	%f240, %f236, %f238, 0f00000000;
	and.b32  	%r218, %r217, 1;
	fma.rn.f32 	%f274, %f272, %f268, 0fC09DE9E6;
	fma.rn.f32 	%f275, %f271, %f273, 0f00000000;
	and.b32  	%r229, %r228, 1;
	fma.rn.f32 	%f308, %f306, %f302, 0fC09DE9E6;
	fma.rn.f32 	%f309, %f305, %f307, 0f00000000;
	and.b32  	%r236, %r235, 1;
	fma.rn.f32 	%f343, %f341, %f337, 0fC09DE9E6;
	fma.rn.f32 	%f344, %f340, %f342, 0f00000000;
	and.b32  	%r247, %r246, 1;
	fma.rn.f32 	%f377, %f375, %f371, 0fC09DE9E6;
	fma.rn.f32 	%f378, %f374, %f376, 0f00000000;
	and.b32  	%r254, %r253, 1;
	fma.rn.f32 	%f412, %f410, %f406, 0fC09DE9E6;
	fma.rn.f32 	%f413, %f409, %f411, 0f00000000;
	and.b32  	%r265, %r264, 1;
	fma.rn.f32 	%f446, %f444, %f440, 0fC09DE9E6;
	fma.rn.f32 	%f447, %f443, %f445, 0f00000000;
	and.b32  	%r272, %r271, 1;
	fma.rn.f32 	%f495, %f493, %f489, 0fC09DE9E6;
	fma.rn.f32 	%f496, %f492, %f494, 0f00000000;
	and.b32  	%r289, %r288, 1;
	fma.rn.f32 	%f547, %f545, %f541, 0fC09DE9E6;
	fma.rn.f32 	%f548, %f544, %f546, 0f00000000;
	and.b32  	%r312, %r311, 1;
	fma.rn.f32 	%f600, %f598, %f594, 0fC09DE9E6;
	fma.rn.f32 	%f601, %f597, %f599, 0f00000000;
	and.b32  	%r334, %r333, 1;
	fma.rn.f32 	%f651, %f649, %f645, 0fC09DE9E6;
	fma.rn.f32 	%f652, %f648, %f650, 0f00000000;
	and.b32  	%r365, %r364, 1;
	fma.rn.f32 	%f699, %f698, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f700, %f698, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f750, %f749, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f751, %f749, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f800, %f799, 0fBF000000, %f904;
	fma.rn.f32 	%f207, %f205, %f199, 0f3F800000;
	fma.rn.f32 	%f208, %f198, 0f40490FDB, %f206;
	setp.eq.b32 	%p16, %r211, 1;
	fma.rn.f32 	%f241, %f239, %f233, 0f3F800000;
	fma.rn.f32 	%f242, %f232, 0f40490FDB, %f240;
	setp.eq.b32 	%p22, %r218, 1;
	fma.rn.f32 	%f276, %f274, %f268, 0f3F800000;
	fma.rn.f32 	%f277, %f267, 0f40490FDB, %f275;
	setp.eq.b32 	%p28, %r229, 1;
	fma.rn.f32 	%f310, %f308, %f302, 0f3F800000;
	fma.rn.f32 	%f311, %f301, 0f40490FDB, %f309;
	setp.eq.b32 	%p34, %r236, 1;
	fma.rn.f32 	%f345, %f343, %f337, 0f3F800000;
	fma.rn.f32 	%f346, %f336, 0f40490FDB, %f344;
	setp.eq.b32 	%p40, %r247, 1;
	fma.rn.f32 	%f379, %f377, %f371, 0f3F800000;
	fma.rn.f32 	%f380, %f370, 0f40490FDB, %f378;
	setp.eq.b32 	%p46, %r254, 1;
	fma.rn.f32 	%f414, %f412, %f406, 0f3F800000;
	fma.rn.f32 	%f415, %f405, 0f40490FDB, %f413;
	setp.eq.b32 	%p52, %r265, 1;
	fma.rn.f32 	%f448, %f446, %f440, 0f3F800000;
	fma.rn.f32 	%f449, %f439, 0f40490FDB, %f447;
	setp.eq.b32 	%p58, %r272, 1;
	fma.rn.f32 	%f497, %f495, %f489, 0f3F800000;
	fma.rn.f32 	%f498, %f488, 0f40490FDB, %f496;
	setp.eq.b32 	%p76, %r289, 1;
	fma.rn.f32 	%f549, %f547, %f541, 0f3F800000;
	fma.rn.f32 	%f550, %f540, 0f40490FDB, %f548;
	setp.eq.b32 	%p96, %r312, 1;
	fma.rn.f32 	%f602, %f600, %f594, 0f3F800000;
	fma.rn.f32 	%f603, %f593, 0f40490FDB, %f601;
	setp.eq.b32 	%p117, %r334, 1;
	fma.rn.f32 	%f653, %f651, %f645, 0f3F800000;
	fma.rn.f32 	%f654, %f644, 0f40490FDB, %f652;
	setp.eq.b32 	%p137, %r365, 1;
	cvt.rzi.s32.f32 	%r380, %f696;
	fma.rn.f32 	%f701, %f699, %f698, 0fC0A55DF6;
	fma.rn.f32 	%f702, %f700, %f698, 0f4081E0CF;
	fma.rn.f32 	%f703, %f698, %f697, 0f00000000;
	cvt.rzi.s32.f32 	%r402, %f747;
	fma.rn.f32 	%f752, %f750, %f749, 0fC0A55DF6;
	fma.rn.f32 	%f753, %f751, %f749, 0f4081E0CF;
	fma.rn.f32 	%f754, %f749, %f748, 0f00000000;
	mul.f32 	%f801, %f800, %f800;
	selp.f32 	%f209, %f207, %f208, %p16;
	and.b32  	%r212, %r210, 2;
	mov.f32 	%f210, 0f00000000;
	selp.f32 	%f243, %f241, %f242, %p22;
	and.b32  	%r219, %r217, 2;
	selp.f32 	%f278, %f276, %f277, %p28;
	and.b32  	%r230, %r228, 2;
	selp.f32 	%f312, %f310, %f311, %p34;
	and.b32  	%r237, %r235, 2;
	selp.f32 	%f347, %f345, %f346, %p40;
	and.b32  	%r248, %r246, 2;
	selp.f32 	%f381, %f379, %f380, %p46;
	and.b32  	%r255, %r253, 2;
	selp.f32 	%f416, %f414, %f415, %p52;
	and.b32  	%r266, %r264, 2;
	selp.f32 	%f450, %f448, %f449, %p58;
	and.b32  	%r273, %r271, 2;
	selp.f32 	%f499, %f497, %f498, %p76;
	and.b32  	%r290, %r288, 2;
	selp.f32 	%f551, %f549, %f550, %p96;
	and.b32  	%r313, %r311, 2;
	selp.f32 	%f604, %f602, %f603, %p117;
	and.b32  	%r335, %r333, 2;
	selp.f32 	%f655, %f653, %f654, %p137;
	and.b32  	%r366, %r364, 2;
	fma.rn.f32 	%f704, %f702, %f698, 0fC09DE9E6;
	fma.rn.f32 	%f705, %f701, %f703, 0f00000000;
	and.b32  	%r381, %r380, 1;
	fma.rn.f32 	%f755, %f753, %f749, 0fC09DE9E6;
	fma.rn.f32 	%f756, %f752, %f754, 0f00000000;
	and.b32  	%r403, %r402, 1;
	fma.rn.f32 	%f802, %f801, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f803, %f801, 0f3E684E12, 0fBFAAD2E0;
	setp.eq.s32 	%p17, %r212, 0;
	sub.f32 	%f211, %f210, %f209;
	setp.eq.s32 	%p23, %r219, 0;
	sub.f32 	%f245, %f210, %f243;
	setp.eq.s32 	%p29, %r230, 0;
	sub.f32 	%f280, %f210, %f278;
	setp.eq.s32 	%p35, %r237, 0;
	sub.f32 	%f314, %f210, %f312;
	setp.eq.s32 	%p41, %r248, 0;
	sub.f32 	%f349, %f210, %f347;
	setp.eq.s32 	%p47, %r255, 0;
	sub.f32 	%f383, %f210, %f381;
	setp.eq.s32 	%p53, %r266, 0;
	sub.f32 	%f418, %f210, %f416;
	setp.eq.s32 	%p59, %r273, 0;
	sub.f32 	%f452, %f210, %f450;
	setp.eq.s32 	%p77, %r290, 0;
	neg.f32 	%f501, %f499;
	add.s32 	%r291, %r288, 1;
	cvt.rzi.f32.f32 	%f506, %f884;
	setp.eq.s32 	%p97, %r313, 0;
	neg.f32 	%f553, %f551;
	add.s32 	%r314, %r311, 1;
	cvt.rzi.f32.f32 	%f558, %f888;
	setp.eq.s32 	%p118, %r335, 0;
	neg.f32 	%f606, %f604;
	add.s32 	%r336, %r333, 1;
	cvt.rzi.f32.f32 	%f611, %f892;
	setp.eq.s32 	%p138, %r366, 0;
	neg.f32 	%f657, %f655;
	add.s32 	%r367, %r364, 1;
	cvt.rzi.f32.f32 	%f662, %f896;
	fma.rn.f32 	%f706, %f704, %f698, 0f3F800000;
	fma.rn.f32 	%f707, %f697, 0f40490FDB, %f705;
	setp.eq.b32 	%p158, %r381, 1;
	fma.rn.f32 	%f757, %f755, %f749, 0f3F800000;
	fma.rn.f32 	%f758, %f748, 0f40490FDB, %f756;
	setp.eq.b32 	%p178, %r403, 1;
	cvt.rzi.s32.f32 	%r416, %f799;
	fma.rn.f32 	%f804, %f802, %f801, 0fC0A55DF6;
	fma.rn.f32 	%f805, %f803, %f801, 0f4081E0CF;
	fma.rn.f32 	%f806, %f801, %f800, 0f00000000;
	selp.f32 	%f212, %f209, %f211, %p17;
	selp.f32 	%f246, %f243, %f245, %p23;
	selp.f32 	%f281, %f278, %f280, %p29;
	selp.f32 	%f315, %f312, %f314, %p35;
	selp.f32 	%f350, %f347, %f349, %p41;
	selp.f32 	%f384, %f381, %f383, %p47;
	selp.f32 	%f419, %f416, %f418, %p53;
	selp.f32 	%f453, %f450, %f452, %p59;
	selp.f32 	%f500, %f498, %f497, %p76;
	selp.f32 	%f502, %f499, %f501, %p77;
	and.b32  	%r292, %r291, 2;
	setp.eq.f32 	%p79, %f506, %f884;
	mul.f32 	%f507, %f884, 0f00000000;
	selp.f32 	%f552, %f550, %f549, %p96;
	selp.f32 	%f554, %f551, %f553, %p97;
	and.b32  	%r315, %r314, 2;
	setp.eq.f32 	%p99, %f558, %f888;
	mul.f32 	%f559, %f888, 0f00000000;
	selp.f32 	%f605, %f603, %f602, %p117;
	selp.f32 	%f607, %f604, %f606, %p118;
	and.b32  	%r337, %r336, 2;
	setp.eq.f32 	%p120, %f611, %f892;
	mul.f32 	%f612, %f892, 0f00000000;
	selp.f32 	%f656, %f654, %f653, %p137;
	selp.f32 	%f658, %f655, %f657, %p138;
	and.b32  	%r368, %r367, 2;
	setp.eq.f32 	%p140, %f662, %f896;
	mul.f32 	%f663, %f896, 0f00000000;
	selp.f32 	%f708, %f706, %f707, %p158;
	and.b32  	%r382, %r380, 2;
	selp.f32 	%f759, %f757, %f758, %p178;
	and.b32  	%r404, %r402, 2;
	fma.rn.f32 	%f807, %f805, %f801, 0fC09DE9E6;
	fma.rn.f32 	%f808, %f804, %f806, 0f00000000;
	and.b32  	%r417, %r416, 1;
	mul.f32 	%f154, %f212, %f212;
	mul.f32 	%f4, %f246, %f246;
	mul.f32 	%f8, %f281, %f281;
	mul.f32 	%f13, %f315, %f315;
	mul.f32 	%f17, %f350, %f350;
	mul.f32 	%f22, %f384, %f384;
	mul.f32 	%f26, %f419, %f419;
	mul.f32 	%f31, %f453, %f453;
	setp.eq.s32 	%p78, %r292, 0;
	sub.f32 	%f504, %f210, %f500;
	selp.f32 	%f52, %f507, %f502, %p79;
	abs.f32 	%f508, %f884;
	setp.eq.s32 	%p98, %r315, 0;
	sub.f32 	%f556, %f210, %f552;
	selp.f32 	%f560, %f559, %f554, %p99;
	abs.f32 	%f561, %f888;
	setp.eq.s32 	%p119, %r337, 0;
	sub.f32 	%f609, %f210, %f605;
	selp.f32 	%f86, %f612, %f607, %p120;
	abs.f32 	%f613, %f892;
	setp.eq.s32 	%p139, %r368, 0;
	sub.f32 	%f660, %f210, %f656;
	selp.f32 	%f664, %f663, %f658, %p140;
	abs.f32 	%f665, %f896;
	setp.eq.s32 	%p159, %r382, 0;
	neg.f32 	%f710, %f708;
	add.s32 	%r383, %r380, 1;
	cvt.rzi.f32.f32 	%f715, %f912;
	setp.eq.s32 	%p179, %r404, 0;
	neg.f32 	%f761, %f759;
	add.s32 	%r405, %r402, 1;
	cvt.rzi.f32.f32 	%f766, %f900;
	fma.rn.f32 	%f809, %f807, %f801, 0f3F800000;
	fma.rn.f32 	%f810, %f800, 0f40490FDB, %f808;
	setp.eq.b32 	%p200, %r417, 1;
	mul.f32 	%f216, %f154, 0f3C0AF64E;
	mul.f32 	%f250, %f4, 0f3C0AF64E;
	mul.f32 	%f285, %f8, 0f3C0AF64E;
	mul.f32 	%f319, %f13, 0f3C0AF64E;
	mul.f32 	%f354, %f17, 0f3C0AF64E;
	mul.f32 	%f388, %f22, 0f3C0AF64E;
	mul.f32 	%f423, %f26, 0f3C0AF64E;
	mul.f32 	%f456, %f31, 0f3C0AF64E;
	selp.f32 	%f505, %f500, %f504, %p78;
	setp.gt.f32 	%p80, %f508, 0f4B800000;
	add.f32 	%f509, %f52, 0f3F800000;
	selp.f32 	%f557, %f552, %f556, %p98;
	setp.gt.f32 	%p100, %f561, 0f4B800000;
	add.f32 	%f562, %f560, 0f3F800000;
	selp.f32 	%f610, %f605, %f609, %p119;
	setp.gt.f32 	%p121, %f613, 0f4B800000;
	add.f32 	%f614, %f86, 0f3F800000;
	selp.f32 	%f661, %f656, %f660, %p139;
	setp.gt.f32 	%p141, %f665, 0f4B800000;
	add.f32 	%f666, %f664, 0f3F800000;
	selp.f32 	%f709, %f707, %f706, %p158;
	selp.f32 	%f711, %f708, %f710, %p159;
	and.b32  	%r384, %r383, 2;
	setp.eq.f32 	%p161, %f715, %f912;
	mul.f32 	%f716, %f912, 0f00000000;
	selp.f32 	%f760, %f758, %f757, %p178;
	selp.f32 	%f762, %f759, %f761, %p179;
	and.b32  	%r406, %r405, 2;
	setp.eq.f32 	%p181, %f766, %f900;
	mul.f32 	%f767, %f900, 0f00000000;
	selp.f32 	%f811, %f809, %f810, %p200;
	and.b32  	%r418, %r416, 2;
	mul.f32 	%f3, %f216, %f874;
	mul.f32 	%f251, %f250, %f875;
	mul.f32 	%f12, %f285, %f876;
	mul.f32 	%f320, %f319, %f877;
	mul.f32 	%f21, %f354, %f878;
	mul.f32 	%f389, %f388, %f879;
	mul.f32 	%f30, %f423, %f880;
	mul.f32 	%f457, %f456, %f881;
	selp.f32 	%f53, %f509, %f505, %p80;
	selp.f32 	%f563, %f562, %f557, %p100;
	selp.f32 	%f87, %f614, %f610, %p121;
	selp.f32 	%f667, %f666, %f661, %p141;
	setp.eq.s32 	%p160, %r384, 0;
	sub.f32 	%f713, %f210, %f709;
	selp.f32 	%f176, %f716, %f711, %p161;
	abs.f32 	%f717, %f912;
	setp.eq.s32 	%p180, %r406, 0;
	sub.f32 	%f764, %f210, %f760;
	selp.f32 	%f768, %f767, %f762, %p181;
	abs.f32 	%f769, %f900;
	setp.eq.s32 	%p201, %r418, 0;
	neg.f32 	%f813, %f811;
	add.s32 	%r419, %r416, 1;
	cvt.rzi.f32.f32 	%f818, %f904;
	ld.param.u64 	%rd2, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6];
	ld.param.u64 	%rd3, [_Z6upchan13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7];
	and.b32  	%r110, %r1, 16;
	mov.b32 	%r222, %f251;
	mov.b32 	%r221, %f3;
	mov.b32 	%r240, %f320;
	mov.b32 	%r239, %f12;
	mov.b32 	%r258, %f389;
	mov.b32 	%r257, %f21;
	mov.b32 	%r276, %f457;
	mov.b32 	%r275, %f30;
	mov.b32 	%r304, %f563;
	mov.b32 	%r303, %f53;
	mov.b32 	%r307, %f560;
	mov.b32 	%r306, %f52;
	mov.b32 	%r351, %f667;
	mov.b32 	%r350, %f87;
	mov.b32 	%r357, %f664;
	mov.b32 	%r356, %f86;
	selp.f32 	%f714, %f709, %f713, %p160;
	setp.gt.f32 	%p162, %f717, 0f4B800000;
	add.f32 	%f718, %f176, 0f3F800000;
	selp.f32 	%f765, %f760, %f764, %p180;
	setp.gt.f32 	%p182, %f769, 0f4B800000;
	add.f32 	%f770, %f768, 0f3F800000;
	selp.f32 	%f812, %f810, %f809, %p200;
	selp.f32 	%f814, %f811, %f813, %p201;
	and.b32  	%r420, %r419, 2;
	setp.eq.f32 	%p203, %f818, %f904;
	mul.f32 	%f819, %f904, 0f00000000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r220, %r222, %r221;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r238, %r240, %r239;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r256, %r258, %r257;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r274, %r276, %r275;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r302, %r304, %r303;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r305, %r307, %r306;
	// end inline asm
	xor.b32  	%r354, %r357, -2147483648;
	xor.b32  	%r353, %r356, -2147483648;
	selp.f32 	%f177, %f718, %f714, %p162;
	selp.f32 	%f771, %f770, %f765, %p182;
	setp.eq.s32 	%p202, %r420, 0;
	sub.f32 	%f816, %f210, %f812;
	selp.f32 	%f136, %f819, %f814, %p203;
	abs.f32 	%f820, %f904;
	// begin inline asm
	cvt.rn.f16x2.f32 %r349, %r351, %r350;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r352, %r354, %r353;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r355, %r357, %r356;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r358, %r351, %r350;
	// end inline asm
	mov.b32 	%r395, %f771;
	mov.b32 	%r394, %f177;
	mov.b32 	%r398, %f768;
	mov.b32 	%r397, %f176;
	selp.f32 	%f817, %f812, %f816, %p202;
	setp.gt.f32 	%p204, %f820, 0f4B800000;
	add.f32 	%f821, %f136, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r393, %r395, %r394;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r396, %r398, %r397;
	// end inline asm
	selp.f32 	%f137, %f821, %f817, %p204;
	add.f32 	%f842, %f908, %f908;
	mov.b32 	%r439, %f842;
	and.b32  	%r440, %r439, -2147483648;
	or.b32  	%r441, %r440, 1056964608;
	mov.b32 	%f843, %r441;
	add.f32 	%f844, %f842, %f843;
	cvt.rzi.f32.f32 	%f845, %f844;
	abs.f32 	%f846, %f842;
	setp.gt.f32 	%p217, %f846, 0f4B000000;
	selp.f32 	%f847, %f842, %f845, %p217;
	cvt.rzi.f32.f32 	%f848, %f842;
	setp.lt.f32 	%p218, %f846, 0f3F000000;
	selp.f32 	%f849, %f848, %f847, %p218;
	cvt.rzi.s32.f32 	%r442, %f849;
	fma.rn.f32 	%f850, %f849, 0fBF000000, %f908;
	mul.f32 	%f851, %f850, %f850;
	fma.rn.f32 	%f852, %f851, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f853, %f851, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f854, %f852, %f851, 0fC0A55DF6;
	fma.rn.f32 	%f855, %f853, %f851, 0f4081E0CF;
	fma.rn.f32 	%f856, %f851, %f850, 0f00000000;
	fma.rn.f32 	%f857, %f855, %f851, 0fC09DE9E6;
	fma.rn.f32 	%f858, %f854, %f856, 0f00000000;
	fma.rn.f32 	%f859, %f857, %f851, 0f3F800000;
	fma.rn.f32 	%f860, %f850, 0f40490FDB, %f858;
	and.b32  	%r443, %r442, 1;
	setp.eq.b32 	%p219, %r443, 1;
	selp.f32 	%f861, %f859, %f860, %p219;
	selp.f32 	%f862, %f860, %f859, %p219;
	and.b32  	%r444, %r442, 2;
	setp.eq.s32 	%p220, %r444, 0;
	neg.f32 	%f863, %f861;
	selp.f32 	%f864, %f861, %f863, %p220;
	add.s32 	%r445, %r442, 1;
	and.b32  	%r446, %r445, 2;
	setp.eq.s32 	%p221, %r446, 0;
	sub.f32 	%f866, %f210, %f862;
	selp.f32 	%f867, %f862, %f866, %p221;
	cvt.rzi.f32.f32 	%f868, %f908;
	setp.eq.f32 	%p222, %f868, %f908;
	mul.f32 	%f869, %f908, 0f00000000;
	selp.f32 	%f870, %f869, %f864, %p222;
	abs.f32 	%f871, %f908;
	setp.gt.f32 	%p223, %f871, 0f4B800000;
	add.f32 	%f872, %f870, 0f3F800000;
	selp.f32 	%f873, %f872, %f867, %p223;
	mov.b32 	%r429, %f873;
	mov.b32 	%r428, %f137;
	// begin inline asm
	cvt.rn.f16x2.f32 %r427, %r429, %r428;
	// end inline asm
	mov.b32 	%r435, %f870;
	xor.b32  	%r432, %r435, -2147483648;
	mov.b32 	%r434, %f136;
	xor.b32  	%r431, %r434, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r430, %r432, %r431;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r433, %r435, %r434;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r436, %r429, %r428;
	// end inline asm
	shl.b32 	%r448, %r5, 12;
	shl.b32 	%r449, %r4, 11;
	and.b32  	%r450, %r449, 2048;
	and.b32  	%r451, %r111, 12;
	and.b32  	%r452, %r111, 16;
	or.b32  	%r453, %r450, %r451;
	or.b32  	%r454, %r453, %r452;
	or.b32  	%r87, %r110, %r2;
	or.b32  	%r88, %r454, %r448;
	and.b32  	%r89, %r1, 8;
	shl.b32 	%r455, %r1, 4;
	or.b32  	%r456, %r89, %r455;
	shr.u32 	%r457, %r456, 2;
	and.b32  	%r458, %r457, 14;
	or.b32  	%r459, %r458, %r452;
	and.b32  	%r460, %r1, 4;
	or.b32  	%r90, %r460, %r123;
	and.b32  	%r461, %r3, 32;
	shr.u32 	%r462, %r2, 1;
	or.b32  	%r92, %r461, %r462;
	or.b32  	%r93, %r92, 8;
	or.b32  	%r94, %r92, 16;
	or.b32  	%r95, %r92, 24;
	or.b32  	%r463, %r117, %r112;
	or.b32  	%r464, %r463, %r116;
	or.b32  	%r465, %r464, %r115;
	shr.u32 	%r466, %r465, 1;
	mul.lo.s32 	%r467, %r466, 65;
	add.s32 	%r468, %r92, %r467;
	add.s32 	%r469, %r93, %r467;
	add.s32 	%r470, %r94, %r467;
	add.s32 	%r471, %r95, %r467;
	shl.b32 	%r472, %r2, 1;
	or.b32  	%r473, %r121, %r472;
	mul.lo.s32 	%r474, %r473, 65;
	add.s32 	%r475, %r474, %r452;
	add.s32 	%r476, %r475, %r458;
	mul.wide.u32 	%rd92, %r476, 4;
	mov.u64 	%rd93, shmem;
	add.s64 	%rd5, %rd93, %rd92;
	cvt.u64.u32 	%rd94, %r458;
	cvt.u64.u32 	%rd95, %r474;
	cvt.u64.u32 	%rd96, %r452;
	add.s64 	%rd97, %rd96, %rd95;
	add.s64 	%rd98, %rd97, %rd94;
	shl.b64 	%rd99, %rd98, 2;
	add.s64 	%rd6, %rd93, %rd99;
	shl.b32 	%r477, %r7, 18;
	add.s32 	%r478, %r477, -786432;
	shl.b32 	%r479, %r2, 2;
	or.b32  	%r480, %r479, %r113;
	or.b32  	%r481, %r480, %r123;
	shl.b32 	%r482, %r481, 5;
	and.b32  	%r483, %r111, 28;
	or.b32  	%r96, %r483, %r482;
	cvt.s64.s32 	%rd7, %r478;
	and.b32  	%r484, %r2, 1;
	neg.s32 	%r485, %r484;
	and.b32  	%r486, %r485, 1040;
	shr.u32 	%r487, %r2, 3;
	bfe.s32 	%r488, %r2, 2, 1;
	and.b32  	%r489, %r488, 260;
	bfe.s32 	%r490, %r2, 1, 1;
	and.b32  	%r491, %r490, 520;
	add.s32 	%r492, %r486, %r459;
	mad.lo.s32 	%r493, %r487, 130, %r492;
	add.s32 	%r494, %r493, %r489;
	add.s32 	%r495, %r494, %r491;
	mad.lo.s32 	%r496, %r121, 65, %r495;
	mul.wide.u32 	%rd100, %r496, 4;
	add.s64 	%rd8, %rd93, %rd100;
	add.s32 	%r497, %r496, 32;
	mul.wide.u32 	%rd101, %r497, 4;
	add.s64 	%rd9, %rd93, %rd101;
	add.s32 	%r498, %r496, 1;
	mul.wide.u32 	%rd102, %r498, 4;
	add.s64 	%rd10, %rd93, %rd102;
	add.s32 	%r499, %r496, 33;
	mul.wide.u32 	%rd103, %r499, 4;
	add.s64 	%rd11, %rd93, %rd103;
	add.s32 	%r500, %r496, 2081;
	mul.wide.u32 	%rd104, %r500, 4;
	add.s64 	%rd12, %rd93, %rd104;
	add.s32 	%r501, %r496, 2113;
	mul.wide.u32 	%rd105, %r501, 4;
	add.s64 	%rd13, %rd93, %rd105;
	add.s32 	%r502, %r496, 2082;
	mul.wide.u32 	%rd106, %r502, 4;
	add.s64 	%rd14, %rd93, %rd106;
	add.s32 	%r503, %r496, 2114;
	mul.wide.u32 	%rd107, %r503, 4;
	add.s64 	%rd15, %rd93, %rd107;
	add.s32 	%r504, %r496, 4162;
	mul.wide.u32 	%rd108, %r504, 4;
	add.s64 	%rd16, %rd93, %rd108;
	add.s32 	%r505, %r496, 4194;
	mul.wide.u32 	%rd109, %r505, 4;
	add.s64 	%rd17, %rd93, %rd109;
	add.s32 	%r506, %r496, 4163;
	mul.wide.u32 	%rd110, %r506, 4;
	add.s64 	%rd18, %rd93, %rd110;
	add.s32 	%r507, %r496, 4195;
	mul.wide.u32 	%rd111, %r507, 4;
	add.s64 	%rd19, %rd93, %rd111;
	add.s32 	%r508, %r496, 6243;
	mul.wide.u32 	%rd112, %r508, 4;
	add.s64 	%rd20, %rd93, %rd112;
	add.s32 	%r509, %r496, 6275;
	mul.wide.u32 	%rd113, %r509, 4;
	add.s64 	%rd21, %rd93, %rd113;
	add.s32 	%r510, %r496, 6244;
	mul.wide.u32 	%rd114, %r510, 4;
	add.s64 	%rd22, %rd93, %rd114;
	add.s32 	%r511, %r496, 6276;
	mul.wide.u32 	%rd115, %r511, 4;
	add.s64 	%rd23, %rd93, %rd115;
	mul.wide.u32 	%rd116, %r471, 4;
	add.s64 	%rd24, %rd93, %rd116;
	mul.wide.u32 	%rd117, %r470, 4;
	add.s64 	%rd25, %rd93, %rd117;
	mul.wide.u32 	%rd118, %r469, 4;
	add.s64 	%rd26, %rd93, %rd118;
	mul.wide.u32 	%rd119, %r468, 4;
	add.s64 	%rd27, %rd93, %rd119;
	setp.eq.s32 	%p225, %r89, 0;
	mov.u16 	%rs1176, 25600;
	mov.u16 	%rs1072, 21504;
	mov.u16 	%rs1184, 18432;
	mov.u16 	%rs1142, -14592;
	mov.u32 	%r8039, %r7995;
	mov.u32 	%r8038, %r7995;
	mov.u32 	%r8037, %r7995;
	mov.u32 	%r8036, %r7995;
	mov.u32 	%r8035, %r7995;
	mov.u32 	%r8034, %r7995;
	mov.u32 	%r8033, %r7995;
	mov.u32 	%r8032, %r7995;
	mov.u32 	%r8031, %r7995;
	mov.u32 	%r8030, %r7995;
	mov.u32 	%r8029, %r7995;
	mov.u32 	%r8028, %r7995;
	mov.u32 	%r109, %r7995;
	bra.uni 	$L__BB0_129;
$L__BB0_152:                            // %pass16427
                                        //   in Loop: Header=BB0_129 Depth=1
	or.b32  	%r7991, %r7997, 786432;
	cvt.s64.s32 	%rd173, %r7991;
	add.s64 	%rd174, %rd173, %rd7;
	shr.u64 	%rd175, %rd174, 39;
	add.s64 	%rd176, %rd174, %rd175;
	shr.s64 	%rd177, %rd176, 25;
	setp.lt.s64 	%p253, %rd174, 0;
	and.b64  	%rd178, %rd176, -33554432;
	setp.ne.s64 	%p254, %rd178, %rd174;
	and.pred  	%p255, %p253, %p254;
	selp.u64 	%rd179, 1, 0, %p255;
	sub.s64 	%rd180, %rd179, %rd177;
	shl.b64 	%rd181, %rd180, 25;
	add.s64 	%rd182, %rd181, %rd174;
	shl.b64 	%rd183, %rd182, 2;
	add.s64 	%rd184, %rd3, %rd183;
	st.global.v4.u32 	[%rd184], {%r179, %r181, %r180, %r182};
	setp.ne.s32 	%p256, %r109, 7936;
	add.s32 	%r109, %r109, 256;
	add.s32 	%r7992, %r109, %r5;
	setp.gt.s32 	%p257, %r6, %r7992;
	and.pred  	%p258, %p256, %p257;
	@%p258 bra 	$L__BB0_129;
	bra.uni 	$L__BB0_153;
$L__BB0_129:                            // %L1561
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_130 Depth 2
	or.b32  	%r577, %r109, %r111;
	and.b32  	%r578, %r577, 7968;
	or.b32  	%r579, %r87, %r578;
	shl.b32 	%r580, %r579, 12;
	add.s32 	%r581, %r88, %r580;
	shr.s32 	%r582, %r581, 31;
	shr.u32 	%r583, %r582, 7;
	add.s32 	%r584, %r581, %r583;
	shr.s32 	%r585, %r584, 25;
	setp.lt.s32 	%p226, %r581, 0;
	and.b32  	%r586, %r584, -33554432;
	setp.ne.s32 	%p227, %r586, %r581;
	and.pred  	%p228, %p226, %p227;
	selp.u32 	%r587, 1, 0, %p228;
	sub.s32 	%r588, %r587, %r585;
	shl.b32 	%r589, %r588, 25;
	add.s32 	%r590, %r589, %r581;
	mul.wide.s32 	%rd120, %r590, 4;
	add.s64 	%rd121, %rd2, %rd120;
	ld.global.v4.u32 	{%r591, %r592, %r593, %r594}, [%rd121];
	or.b32  	%r595, %r580, 262144;
	add.s32 	%r596, %r88, %r595;
	shr.s32 	%r597, %r596, 31;
	shr.u32 	%r598, %r597, 7;
	add.s32 	%r599, %r596, %r598;
	shr.s32 	%r600, %r599, 25;
	setp.lt.s32 	%p229, %r596, 0;
	and.b32  	%r601, %r599, -33554432;
	setp.ne.s32 	%p230, %r601, %r596;
	and.pred  	%p231, %p229, %p230;
	selp.u32 	%r602, 1, 0, %p231;
	sub.s32 	%r603, %r602, %r600;
	shl.b32 	%r604, %r603, 25;
	add.s32 	%r605, %r604, %r596;
	mul.wide.s32 	%rd122, %r605, 4;
	add.s64 	%rd123, %rd2, %rd122;
	ld.global.v4.u32 	{%r606, %r607, %r608, %r609}, [%rd123];
	or.b32  	%r610, %r580, 524288;
	add.s32 	%r611, %r88, %r610;
	shr.s32 	%r612, %r611, 31;
	shr.u32 	%r613, %r612, 7;
	add.s32 	%r614, %r611, %r613;
	shr.s32 	%r615, %r614, 25;
	setp.lt.s32 	%p232, %r611, 0;
	and.b32  	%r616, %r614, -33554432;
	setp.ne.s32 	%p233, %r616, %r611;
	and.pred  	%p234, %p232, %p233;
	selp.u32 	%r617, 1, 0, %p234;
	sub.s32 	%r618, %r617, %r615;
	shl.b32 	%r619, %r618, 25;
	add.s32 	%r620, %r619, %r611;
	mul.wide.s32 	%rd124, %r620, 4;
	add.s64 	%rd125, %rd2, %rd124;
	ld.global.v4.u32 	{%r621, %r622, %r623, %r624}, [%rd125];
	or.b32  	%r625, %r580, 786432;
	add.s32 	%r626, %r88, %r625;
	shr.s32 	%r627, %r626, 31;
	shr.u32 	%r628, %r627, 7;
	add.s32 	%r629, %r626, %r628;
	shr.s32 	%r630, %r629, 25;
	setp.lt.s32 	%p235, %r626, 0;
	and.b32  	%r631, %r629, -33554432;
	setp.ne.s32 	%p236, %r631, %r626;
	and.pred  	%p237, %p235, %p236;
	selp.u32 	%r632, 1, 0, %p237;
	sub.s32 	%r633, %r632, %r630;
	shl.b32 	%r634, %r633, 25;
	add.s32 	%r635, %r634, %r626;
	mul.wide.s32 	%rd126, %r635, 4;
	add.s64 	%rd127, %rd2, %rd126;
	ld.global.v4.u32 	{%r636, %r637, %r638, %r639}, [%rd127];
	selp.b32 	%r640, %r593, %r591, %p225;
	shfl.sync.bfly.b32	%r641, %r640, 8, 31, -1;
	selp.b32 	%r513, %r591, %r641, %p225;
	selp.b32 	%r514, %r641, %r593, %p225;
	selp.b32 	%r642, %r594, %r592, %p225;
	shfl.sync.bfly.b32	%r643, %r642, 8, 31, -1;
	selp.b32 	%r521, %r592, %r643, %p225;
	selp.b32 	%r522, %r643, %r594, %p225;
	selp.b32 	%r644, %r608, %r606, %p225;
	shfl.sync.bfly.b32	%r645, %r644, 8, 31, -1;
	selp.b32 	%r529, %r606, %r645, %p225;
	selp.b32 	%r530, %r645, %r608, %p225;
	selp.b32 	%r646, %r609, %r607, %p225;
	shfl.sync.bfly.b32	%r647, %r646, 8, 31, -1;
	selp.b32 	%r537, %r607, %r647, %p225;
	selp.b32 	%r538, %r647, %r609, %p225;
	selp.b32 	%r648, %r623, %r621, %p225;
	shfl.sync.bfly.b32	%r649, %r648, 8, 31, -1;
	selp.b32 	%r545, %r621, %r649, %p225;
	selp.b32 	%r546, %r649, %r623, %p225;
	selp.b32 	%r650, %r624, %r622, %p225;
	shfl.sync.bfly.b32	%r651, %r650, 8, 31, -1;
	selp.b32 	%r553, %r622, %r651, %p225;
	selp.b32 	%r554, %r651, %r624, %p225;
	selp.b32 	%r652, %r638, %r636, %p225;
	shfl.sync.bfly.b32	%r653, %r652, 8, 31, -1;
	selp.b32 	%r561, %r636, %r653, %p225;
	selp.b32 	%r562, %r653, %r638, %p225;
	selp.b32 	%r654, %r639, %r637, %p225;
	shfl.sync.bfly.b32	%r655, %r654, 8, 31, -1;
	selp.b32 	%r569, %r637, %r655, %p225;
	selp.b32 	%r570, %r655, %r639, %p225;
	mov.u32 	%r571, 21520;
	// begin inline asm
	prmt.b32 %r512, %r513, %r514, %r571;
	// end inline asm
	mov.u32 	%r575, 30258;
	// begin inline asm
	prmt.b32 %r516, %r513, %r514, %r575;
	// end inline asm
	// begin inline asm
	prmt.b32 %r520, %r521, %r522, %r571;
	// end inline asm
	// begin inline asm
	prmt.b32 %r524, %r521, %r522, %r575;
	// end inline asm
	// begin inline asm
	prmt.b32 %r528, %r529, %r530, %r571;
	// end inline asm
	// begin inline asm
	prmt.b32 %r532, %r529, %r530, %r575;
	// end inline asm
	// begin inline asm
	prmt.b32 %r536, %r537, %r538, %r571;
	// end inline asm
	// begin inline asm
	prmt.b32 %r540, %r537, %r538, %r575;
	// end inline asm
	// begin inline asm
	prmt.b32 %r544, %r545, %r546, %r571;
	// end inline asm
	// begin inline asm
	prmt.b32 %r548, %r545, %r546, %r575;
	// end inline asm
	// begin inline asm
	prmt.b32 %r552, %r553, %r554, %r571;
	// end inline asm
	// begin inline asm
	prmt.b32 %r556, %r553, %r554, %r575;
	// end inline asm
	// begin inline asm
	prmt.b32 %r560, %r561, %r562, %r571;
	// end inline asm
	// begin inline asm
	prmt.b32 %r564, %r561, %r562, %r575;
	// end inline asm
	// begin inline asm
	prmt.b32 %r568, %r569, %r570, %r571;
	// end inline asm
	// begin inline asm
	prmt.b32 %r572, %r569, %r570, %r575;
	// end inline asm
	st.shared.u32 	[%rd8], %r512;
	st.shared.u32 	[%rd9], %r516;
	st.shared.u32 	[%rd10], %r520;
	st.shared.u32 	[%rd11], %r524;
	st.shared.u32 	[%rd12], %r528;
	st.shared.u32 	[%rd13], %r532;
	st.shared.u32 	[%rd14], %r536;
	st.shared.u32 	[%rd15], %r540;
	st.shared.u32 	[%rd16], %r544;
	st.shared.u32 	[%rd17], %r548;
	st.shared.u32 	[%rd18], %r552;
	st.shared.u32 	[%rd19], %r556;
	st.shared.u32 	[%rd20], %r560;
	st.shared.u32 	[%rd21], %r564;
	st.shared.u32 	[%rd22], %r568;
	st.shared.u32 	[%rd23], %r572;
	bar.sync 	0;
	mov.u64 	%rd187, %rd27;
	mov.u64 	%rd188, %rd26;
	mov.u64 	%rd189, %rd25;
	mov.u64 	%rd190, %rd24;
	mov.u32 	%r8027, %r7995;
$L__BB0_130:                            // %pass5573
                                        //   Parent Loop BB0_129 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	or.b32  	%r7840, %r90, %r8027;
	add.s32 	%r7841, %r7840, %r109;
	and.b32  	%r7842, %r7841, 1;
	neg.s32 	%r7843, %r7842;
	and.b32  	%r7844, %r7843, 1040;
	or.b32  	%r7845, %r7841, %r202;
	bfe.s32 	%r7846, %r7845, 3, 1;
	and.b32  	%r7847, %r7846, 130;
	bfe.u32 	%r7848, %r7841, 6, 2;
	mul.lo.s32 	%r7849, %r7848, 2081;
	bfe.s32 	%r7850, %r7841, 2, 1;
	and.b32  	%r7851, %r7850, 260;
	bfe.s32 	%r7852, %r7841, 1, 1;
	and.b32  	%r7853, %r7852, 520;
	bfe.s32 	%r7854, %r7845, 4, 1;
	and.b32  	%r7855, %r7854, 65;
	or.b32  	%r7856, %r92, %r7844;
	add.s32 	%r7857, %r7856, %r7847;
	add.s32 	%r7858, %r7857, %r7849;
	add.s32 	%r7859, %r7858, %r7851;
	add.s32 	%r7860, %r7859, %r7853;
	add.s32 	%r7861, %r7860, %r7855;
	mul.wide.u32 	%rd128, %r7861, 4;
	add.s64 	%rd130, %rd93, %rd128;
	ld.shared.u32 	%r7862, [%rd130];
	or.b32  	%r7863, %r93, %r7844;
	add.s32 	%r7864, %r7863, %r7847;
	add.s32 	%r7865, %r7864, %r7849;
	add.s32 	%r7866, %r7865, %r7851;
	add.s32 	%r7867, %r7866, %r7853;
	add.s32 	%r7868, %r7867, %r7855;
	mul.wide.u32 	%rd131, %r7868, 4;
	add.s64 	%rd132, %rd93, %rd131;
	ld.shared.u32 	%r7869, [%rd132];
	add.s32 	%r7870, %r94, %r7844;
	add.s32 	%r7871, %r7870, %r7847;
	add.s32 	%r7872, %r7871, %r7849;
	add.s32 	%r7873, %r7872, %r7851;
	add.s32 	%r7874, %r7873, %r7853;
	add.s32 	%r7875, %r7874, %r7855;
	mul.wide.u32 	%rd133, %r7875, 4;
	add.s64 	%rd134, %rd93, %rd133;
	ld.shared.u32 	%r7876, [%rd134];
	add.s32 	%r7877, %r95, %r7844;
	add.s32 	%r7878, %r7877, %r7847;
	add.s32 	%r7879, %r7878, %r7849;
	add.s32 	%r7880, %r7879, %r7851;
	add.s32 	%r7881, %r7880, %r7853;
	add.s32 	%r7882, %r7881, %r7855;
	mul.wide.u32 	%rd135, %r7882, 4;
	add.s64 	%rd136, %rd93, %rd135;
	ld.shared.u32 	%r7883, [%rd136];
	// begin inline asm
	mov.b32 %r661, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r672, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r660, %r7862, -2004318072;
	mov.u32 	%r659, 983055;
	// begin inline asm
	lop3.b32 %r658, %r659, %r660, %r661, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r662, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r663, %r661, %r662;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r666, %r658, %r663;
	// end inline asm
	mov.u32 	%r670, 15728880;
	// begin inline asm
	lop3.b32 %r669, %r670, %r660, %r672, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r673, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r674, %r672, %r673;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r677, %r669, %r674;
	// end inline asm
	shr.u32 	%r682, %r660, 8;
	// begin inline asm
	lop3.b32 %r680, %r659, %r682, %r661, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r684, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r685, %r661, %r684;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r688, %r680, %r685;
	// end inline asm
	// begin inline asm
	lop3.b32 %r691, %r670, %r682, %r672, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r695, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r696, %r672, %r695;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r699, %r691, %r696;
	// end inline asm
	// begin inline asm
	mov.b32 %r707, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r718, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r706, %r7869, -2004318072;
	// begin inline asm
	lop3.b32 %r704, %r659, %r706, %r707, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r708, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r709, %r707, %r708;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r712, %r704, %r709;
	// end inline asm
	// begin inline asm
	lop3.b32 %r715, %r670, %r706, %r718, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r719, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r720, %r718, %r719;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r723, %r715, %r720;
	// end inline asm
	shr.u32 	%r728, %r706, 8;
	// begin inline asm
	lop3.b32 %r726, %r659, %r728, %r707, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r730, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r731, %r707, %r730;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r734, %r726, %r731;
	// end inline asm
	// begin inline asm
	lop3.b32 %r737, %r670, %r728, %r718, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r741, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r742, %r718, %r741;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r745, %r737, %r742;
	// end inline asm
	// begin inline asm
	mov.b32 %r753, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r764, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r752, %r7876, -2004318072;
	// begin inline asm
	lop3.b32 %r750, %r659, %r752, %r753, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r754, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r755, %r753, %r754;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r758, %r750, %r755;
	// end inline asm
	// begin inline asm
	lop3.b32 %r761, %r670, %r752, %r764, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r765, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r766, %r764, %r765;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r769, %r761, %r766;
	// end inline asm
	shr.u32 	%r774, %r752, 8;
	// begin inline asm
	lop3.b32 %r772, %r659, %r774, %r753, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r776, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r777, %r753, %r776;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r780, %r772, %r777;
	// end inline asm
	// begin inline asm
	lop3.b32 %r783, %r670, %r774, %r764, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r787, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r788, %r764, %r787;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r791, %r783, %r788;
	// end inline asm
	// begin inline asm
	mov.b32 %r799, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r810, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r798, %r7883, -2004318072;
	// begin inline asm
	lop3.b32 %r796, %r659, %r798, %r799, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r800, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r801, %r799, %r800;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r804, %r796, %r801;
	// end inline asm
	// begin inline asm
	lop3.b32 %r807, %r670, %r798, %r810, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r811, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r812, %r810, %r811;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r815, %r807, %r812;
	// end inline asm
	shr.u32 	%r820, %r798, 8;
	// begin inline asm
	lop3.b32 %r818, %r659, %r820, %r799, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r822, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r823, %r799, %r822;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r826, %r818, %r823;
	// end inline asm
	// begin inline asm
	lop3.b32 %r829, %r670, %r820, %r810, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r833, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r834, %r810, %r833;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r837, %r829, %r834;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r840, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r842, %r840, %r666;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r845, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r847, %r845, %r677;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r850, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r852, %r850, %r688;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r855, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r857, %r855, %r699;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r860, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r862, %r860, %r712;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r865, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r867, %r865, %r723;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r870, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r872, %r870, %r734;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r875, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r877, %r875, %r745;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r880, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r882, %r880, %r758;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r885, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r887, %r885, %r769;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r890, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r892, %r890, %r780;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r895, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r897, %r895, %r791;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r900, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r902, %r900, %r804;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r905, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r907, %r905, %r815;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r910, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r912, %r910, %r826;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r915, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r917, %r915, %r837;
	// end inline asm
	// begin inline asm
	mov.b32 %r925, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r936, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r924, %r8039, -2004318072;
	// begin inline asm
	lop3.b32 %r922, %r659, %r924, %r925, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r926, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r927, %r925, %r926;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r930, %r922, %r927;
	// end inline asm
	// begin inline asm
	lop3.b32 %r933, %r670, %r924, %r936, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r937, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r938, %r936, %r937;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r941, %r933, %r938;
	// end inline asm
	shr.u32 	%r946, %r924, 8;
	// begin inline asm
	lop3.b32 %r944, %r659, %r946, %r925, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r948, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r949, %r925, %r948;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r952, %r944, %r949;
	// end inline asm
	// begin inline asm
	lop3.b32 %r955, %r670, %r946, %r936, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r959, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r960, %r936, %r959;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r963, %r955, %r960;
	// end inline asm
	// begin inline asm
	mov.b32 %r971, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r982, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r970, %r8038, -2004318072;
	// begin inline asm
	lop3.b32 %r968, %r659, %r970, %r971, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r972, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r973, %r971, %r972;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r976, %r968, %r973;
	// end inline asm
	// begin inline asm
	lop3.b32 %r979, %r670, %r970, %r982, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r983, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r984, %r982, %r983;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r987, %r979, %r984;
	// end inline asm
	shr.u32 	%r992, %r970, 8;
	// begin inline asm
	lop3.b32 %r990, %r659, %r992, %r971, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r994, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r995, %r971, %r994;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r998, %r990, %r995;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1001, %r670, %r992, %r982, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1005, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1006, %r982, %r1005;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1009, %r1001, %r1006;
	// end inline asm
	// begin inline asm
	mov.b32 %r1017, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1028, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1016, %r8033, -2004318072;
	// begin inline asm
	lop3.b32 %r1014, %r659, %r1016, %r1017, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1018, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1019, %r1017, %r1018;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1022, %r1014, %r1019;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1025, %r670, %r1016, %r1028, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1029, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1030, %r1028, %r1029;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1033, %r1025, %r1030;
	// end inline asm
	shr.u32 	%r1038, %r1016, 8;
	// begin inline asm
	lop3.b32 %r1036, %r659, %r1038, %r1017, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1040, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1041, %r1017, %r1040;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1044, %r1036, %r1041;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1047, %r670, %r1038, %r1028, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1051, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1052, %r1028, %r1051;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1055, %r1047, %r1052;
	// end inline asm
	// begin inline asm
	mov.b32 %r1063, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1074, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1062, %r8032, -2004318072;
	// begin inline asm
	lop3.b32 %r1060, %r659, %r1062, %r1063, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1064, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1065, %r1063, %r1064;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1068, %r1060, %r1065;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1071, %r670, %r1062, %r1074, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1075, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1076, %r1074, %r1075;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1079, %r1071, %r1076;
	// end inline asm
	shr.u32 	%r1084, %r1062, 8;
	// begin inline asm
	lop3.b32 %r1082, %r659, %r1084, %r1063, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1086, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1087, %r1063, %r1086;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1090, %r1082, %r1087;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1093, %r670, %r1084, %r1074, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1097, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1098, %r1074, %r1097;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1101, %r1093, %r1098;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1104, %r220, %r930, %r842;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1108, %r220, %r941, %r847;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1112, %r220, %r952, %r852;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1116, %r220, %r963, %r857;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1120, %r220, %r976, %r862;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1124, %r220, %r987, %r867;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1128, %r220, %r998, %r872;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1132, %r220, %r1009, %r877;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1136, %r220, %r1022, %r882;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1140, %r220, %r1033, %r887;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1144, %r220, %r1044, %r892;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1148, %r220, %r1055, %r897;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1152, %r220, %r1068, %r902;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1156, %r220, %r1079, %r907;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1160, %r220, %r1090, %r912;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1164, %r220, %r1101, %r917;
	// end inline asm
	// begin inline asm
	mov.b32 %r1173, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1184, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1172, %r8037, -2004318072;
	// begin inline asm
	lop3.b32 %r1170, %r659, %r1172, %r1173, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1174, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1175, %r1173, %r1174;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1178, %r1170, %r1175;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1181, %r670, %r1172, %r1184, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1185, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1186, %r1184, %r1185;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1189, %r1181, %r1186;
	// end inline asm
	shr.u32 	%r1194, %r1172, 8;
	// begin inline asm
	lop3.b32 %r1192, %r659, %r1194, %r1173, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1196, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1197, %r1173, %r1196;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1200, %r1192, %r1197;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1203, %r670, %r1194, %r1184, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1207, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1208, %r1184, %r1207;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1211, %r1203, %r1208;
	// end inline asm
	// begin inline asm
	mov.b32 %r1219, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1230, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1218, %r8036, -2004318072;
	// begin inline asm
	lop3.b32 %r1216, %r659, %r1218, %r1219, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1220, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1221, %r1219, %r1220;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1224, %r1216, %r1221;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1227, %r670, %r1218, %r1230, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1231, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1232, %r1230, %r1231;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1235, %r1227, %r1232;
	// end inline asm
	shr.u32 	%r1240, %r1218, 8;
	// begin inline asm
	lop3.b32 %r1238, %r659, %r1240, %r1219, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1242, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1243, %r1219, %r1242;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1246, %r1238, %r1243;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1249, %r670, %r1240, %r1230, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1253, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1254, %r1230, %r1253;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1257, %r1249, %r1254;
	// end inline asm
	// begin inline asm
	mov.b32 %r1265, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1276, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1264, %r8031, -2004318072;
	// begin inline asm
	lop3.b32 %r1262, %r659, %r1264, %r1265, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1266, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1267, %r1265, %r1266;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1270, %r1262, %r1267;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1273, %r670, %r1264, %r1276, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1277, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1278, %r1276, %r1277;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1281, %r1273, %r1278;
	// end inline asm
	shr.u32 	%r1286, %r1264, 8;
	// begin inline asm
	lop3.b32 %r1284, %r659, %r1286, %r1265, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1288, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1289, %r1265, %r1288;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1292, %r1284, %r1289;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1295, %r670, %r1286, %r1276, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1299, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1300, %r1276, %r1299;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1303, %r1295, %r1300;
	// end inline asm
	// begin inline asm
	mov.b32 %r1311, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1322, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1310, %r8030, -2004318072;
	// begin inline asm
	lop3.b32 %r1308, %r659, %r1310, %r1311, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1312, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1313, %r1311, %r1312;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1316, %r1308, %r1313;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1319, %r670, %r1310, %r1322, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1323, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1324, %r1322, %r1323;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1327, %r1319, %r1324;
	// end inline asm
	shr.u32 	%r1332, %r1310, 8;
	// begin inline asm
	lop3.b32 %r1330, %r659, %r1332, %r1311, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1334, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1335, %r1311, %r1334;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1338, %r1330, %r1335;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1341, %r670, %r1332, %r1322, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1345, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1346, %r1322, %r1345;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1349, %r1341, %r1346;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1352, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1354, %r1352, %r1178, %r1104;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1358, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1360, %r1358, %r1189, %r1108;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1364, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1366, %r1364, %r1200, %r1112;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1370, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1372, %r1370, %r1211, %r1116;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1376, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1378, %r1376, %r1224, %r1120;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1382, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1384, %r1382, %r1235, %r1124;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1388, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1390, %r1388, %r1246, %r1128;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1394, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1396, %r1394, %r1257, %r1132;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1400, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1402, %r1400, %r1270, %r1136;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1406, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1408, %r1406, %r1281, %r1140;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1412, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1414, %r1412, %r1292, %r1144;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1418, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1420, %r1418, %r1303, %r1148;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1424, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1426, %r1424, %r1316, %r1152;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1430, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1432, %r1430, %r1327, %r1156;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1436, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1438, %r1436, %r1338, %r1160;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1442, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1444, %r1442, %r1349, %r1164;
	// end inline asm
	// begin inline asm
	mov.b32 %r1453, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1464, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1452, %r8035, -2004318072;
	// begin inline asm
	lop3.b32 %r1450, %r659, %r1452, %r1453, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1454, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1455, %r1453, %r1454;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1458, %r1450, %r1455;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1461, %r670, %r1452, %r1464, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1465, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1466, %r1464, %r1465;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1469, %r1461, %r1466;
	// end inline asm
	shr.u32 	%r1474, %r1452, 8;
	// begin inline asm
	lop3.b32 %r1472, %r659, %r1474, %r1453, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1476, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1477, %r1453, %r1476;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1480, %r1472, %r1477;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1483, %r670, %r1474, %r1464, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1487, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1488, %r1464, %r1487;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1491, %r1483, %r1488;
	// end inline asm
	// begin inline asm
	mov.b32 %r1499, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1510, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1498, %r8034, -2004318072;
	// begin inline asm
	lop3.b32 %r1496, %r659, %r1498, %r1499, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1500, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1501, %r1499, %r1500;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1504, %r1496, %r1501;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1507, %r670, %r1498, %r1510, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1511, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1512, %r1510, %r1511;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1515, %r1507, %r1512;
	// end inline asm
	shr.u32 	%r1520, %r1498, 8;
	// begin inline asm
	lop3.b32 %r1518, %r659, %r1520, %r1499, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1522, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1523, %r1499, %r1522;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1526, %r1518, %r1523;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1529, %r670, %r1520, %r1510, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1533, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1534, %r1510, %r1533;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1537, %r1529, %r1534;
	// end inline asm
	// begin inline asm
	mov.b32 %r1545, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1556, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1544, %r8029, -2004318072;
	// begin inline asm
	lop3.b32 %r1542, %r659, %r1544, %r1545, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1546, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1547, %r1545, %r1546;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1550, %r1542, %r1547;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1553, %r670, %r1544, %r1556, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1557, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1558, %r1556, %r1557;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1561, %r1553, %r1558;
	// end inline asm
	shr.u32 	%r1566, %r1544, 8;
	// begin inline asm
	lop3.b32 %r1564, %r659, %r1566, %r1545, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1568, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1569, %r1545, %r1568;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1572, %r1564, %r1569;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1575, %r670, %r1566, %r1556, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1579, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1580, %r1556, %r1579;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1583, %r1575, %r1580;
	// end inline asm
	// begin inline asm
	mov.b32 %r1591, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1602, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1590, %r8028, -2004318072;
	// begin inline asm
	lop3.b32 %r1588, %r659, %r1590, %r1591, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1592, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1593, %r1591, %r1592;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1596, %r1588, %r1593;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1599, %r670, %r1590, %r1602, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1603, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1604, %r1602, %r1603;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1607, %r1599, %r1604;
	// end inline asm
	shr.u32 	%r1612, %r1590, 8;
	// begin inline asm
	lop3.b32 %r1610, %r659, %r1612, %r1591, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1614, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1615, %r1591, %r1614;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1618, %r1610, %r1615;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1621, %r670, %r1612, %r1602, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1625, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1626, %r1602, %r1625;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1629, %r1621, %r1626;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1703, %r256, %r1458, %r1354;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1700, %r256, %r1469, %r1360;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1712, %r256, %r1480, %r1366;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1709, %r256, %r1491, %r1372;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1721, %r256, %r1504, %r1378;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1718, %r256, %r1515, %r1384;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1730, %r256, %r1526, %r1390;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1727, %r256, %r1537, %r1396;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1739, %r256, %r1550, %r1402;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1736, %r256, %r1561, %r1408;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1748, %r256, %r1572, %r1414;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1745, %r256, %r1583, %r1420;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1757, %r256, %r1596, %r1426;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1754, %r256, %r1607, %r1432;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1766, %r256, %r1618, %r1438;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1763, %r256, %r1629, %r1444;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1696, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1698, %r1696, %r1700;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1701, %r302, %r1703, %r1698;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1705, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1707, %r1705, %r1709;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1710, %r302, %r1712, %r1707;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1714, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1716, %r1714, %r1718;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1719, %r302, %r1721, %r1716;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1723, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1725, %r1723, %r1727;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1728, %r302, %r1730, %r1725;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1732, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1734, %r1732, %r1736;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1737, %r302, %r1739, %r1734;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1741, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1743, %r1741, %r1745;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1746, %r302, %r1748, %r1743;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1750, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1752, %r1750, %r1754;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1755, %r302, %r1757, %r1752;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1759, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1761, %r1759, %r1763;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1764, %r302, %r1766, %r1761;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1768, %r305, %r1703;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1771, %r302, %r1700, %r1768;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1775, %r305, %r1712;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1778, %r302, %r1709, %r1775;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1782, %r305, %r1721;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1785, %r302, %r1718, %r1782;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1789, %r305, %r1730;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1792, %r302, %r1727, %r1789;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1796, %r305, %r1739;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1799, %r302, %r1736, %r1796;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1803, %r305, %r1748;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1806, %r302, %r1745, %r1803;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1810, %r305, %r1757;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1813, %r302, %r1754, %r1810;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1817, %r305, %r1766;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1820, %r302, %r1763, %r1817;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1911, %r1908}, {%r349, %r355, %r352, %r358}, {%r1701, %r1771}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1920, %r1917}, {%r349, %r355, %r352, %r358}, {%r1710, %r1778}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1929, %r1926}, {%r349, %r355, %r352, %r358}, {%r1719, %r1785}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1938, %r1935}, {%r349, %r355, %r352, %r358}, {%r1728, %r1792}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1947, %r1944}, {%r349, %r355, %r352, %r358}, {%r1737, %r1799}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1956, %r1953}, {%r349, %r355, %r352, %r358}, {%r1746, %r1806}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1965, %r1962}, {%r349, %r355, %r352, %r358}, {%r1755, %r1813}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1974, %r1971}, {%r349, %r355, %r352, %r358}, {%r1764, %r1820}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1904, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1906, %r1904, %r1908;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1909, %r393, %r1911, %r1906;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1913, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1915, %r1913, %r1917;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1918, %r393, %r1920, %r1915;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1922, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1924, %r1922, %r1926;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1927, %r393, %r1929, %r1924;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1931, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1933, %r1931, %r1935;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1936, %r393, %r1938, %r1933;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1940, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1942, %r1940, %r1944;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1945, %r393, %r1947, %r1942;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1949, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1951, %r1949, %r1953;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1954, %r393, %r1956, %r1951;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1958, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1960, %r1958, %r1962;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1963, %r393, %r1965, %r1960;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1967, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1969, %r1967, %r1971;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1972, %r393, %r1974, %r1969;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1976, %r396, %r1911;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1979, %r393, %r1908, %r1976;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1983, %r396, %r1920;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1986, %r393, %r1917, %r1983;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1990, %r396, %r1929;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1993, %r393, %r1926, %r1990;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1997, %r396, %r1938;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2000, %r393, %r1935, %r1997;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2004, %r396, %r1947;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2007, %r393, %r1944, %r2004;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2011, %r396, %r1956;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2014, %r393, %r1953, %r2011;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2018, %r396, %r1965;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2021, %r393, %r1962, %r2018;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2025, %r396, %r1974;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2028, %r393, %r1971, %r2025;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2032, %r2033}, {%r427, %r433, %r430, %r436}, {%r1909, %r1979}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2042, %r2043}, {%r427, %r433, %r430, %r436}, {%r1918, %r1986}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2052, %r2053}, {%r427, %r433, %r430, %r436}, {%r1927, %r1993}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2062, %r2063}, {%r427, %r433, %r430, %r436}, {%r1936, %r2000}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2072, %r2073}, {%r427, %r433, %r430, %r436}, {%r1945, %r2007}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2082, %r2083}, {%r427, %r433, %r430, %r436}, {%r1954, %r2014}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2092, %r2093}, {%r427, %r433, %r430, %r436}, {%r1963, %r2021}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2102, %r2103}, {%r427, %r433, %r430, %r436}, {%r1972, %r2028}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2112, %r118, %r2032;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2115, %r118, %r2033;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2118, %r118, %r2042;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2121, %r118, %r2043;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2124, %r118, %r2052;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2127, %r118, %r2053;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2130, %r118, %r2062;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2133, %r118, %r2063;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2136, %r118, %r2072;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2139, %r118, %r2073;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2142, %r118, %r2082;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2145, %r118, %r2083;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2148, %r118, %r2092;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2151, %r118, %r2093;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2154, %r118, %r2102;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2157, %r118, %r2103;
	// end inline asm
	// begin inline asm
	mov.b32 %r2160, {%rs1142, %rs1142};
	// end inline asm
	mov.u16 	%rs195, 18176;
	// begin inline asm
	mov.b32 %r2161, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2162, %r2112, %r2160;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2165, %r2162, %r2161;
	// end inline asm
	// begin inline asm
	mov.b32 %r2168, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2169, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2170, %r2115, %r2168;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2173, %r2170, %r2169;
	// end inline asm
	// begin inline asm
	mov.b32 %r2176, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2177, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2178, %r2118, %r2176;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2181, %r2178, %r2177;
	// end inline asm
	// begin inline asm
	mov.b32 %r2184, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2185, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2186, %r2121, %r2184;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2189, %r2186, %r2185;
	// end inline asm
	// begin inline asm
	mov.b32 %r2192, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2193, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2194, %r2124, %r2192;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2197, %r2194, %r2193;
	// end inline asm
	// begin inline asm
	mov.b32 %r2200, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2201, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2202, %r2127, %r2200;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2205, %r2202, %r2201;
	// end inline asm
	// begin inline asm
	mov.b32 %r2208, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2209, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2210, %r2130, %r2208;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2213, %r2210, %r2209;
	// end inline asm
	// begin inline asm
	mov.b32 %r2216, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2217, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2218, %r2133, %r2216;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2221, %r2218, %r2217;
	// end inline asm
	// begin inline asm
	mov.b32 %r2224, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2225, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2226, %r2136, %r2224;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2229, %r2226, %r2225;
	// end inline asm
	// begin inline asm
	mov.b32 %r2232, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2233, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2234, %r2139, %r2232;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2237, %r2234, %r2233;
	// end inline asm
	// begin inline asm
	mov.b32 %r2240, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2241, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2242, %r2142, %r2240;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2245, %r2242, %r2241;
	// end inline asm
	// begin inline asm
	mov.b32 %r2248, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2249, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2250, %r2145, %r2248;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2253, %r2250, %r2249;
	// end inline asm
	// begin inline asm
	mov.b32 %r2256, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2257, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2258, %r2148, %r2256;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2261, %r2258, %r2257;
	// end inline asm
	// begin inline asm
	mov.b32 %r2264, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2265, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2266, %r2151, %r2264;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2269, %r2266, %r2265;
	// end inline asm
	// begin inline asm
	mov.b32 %r2272, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2273, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2274, %r2154, %r2272;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2277, %r2274, %r2273;
	// end inline asm
	// begin inline asm
	mov.b32 %r2280, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2281, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2282, %r2157, %r2280;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2285, %r2282, %r2281;
	// end inline asm
	// begin inline asm
	mov.b32 %r2291, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2289, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2290, %r2291, %r2289;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2293, %r2165, %r2290;
	// end inline asm
	// begin inline asm
	mov.b32 %r2296, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2297, %r2291, %r2296;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2300, %r2173, %r2297;
	// end inline asm
	// begin inline asm
	mov.b32 %r2303, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2304, %r2291, %r2303;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2307, %r2181, %r2304;
	// end inline asm
	// begin inline asm
	mov.b32 %r2310, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2311, %r2291, %r2310;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2314, %r2189, %r2311;
	// end inline asm
	mov.u32 	%r2320, 25152;
	// begin inline asm
	prmt.b32 %r2317, %r2293, %r2307, %r2320;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2321, %r2300, %r2314, %r2320;
	// end inline asm
	shl.b32 	%r2328, %r2321, 4;
	mov.u32 	%r2326, 252645135;
	// begin inline asm
	lop3.b32 %r2325, %r2326, %r2317, %r2328, 202;
	// end inline asm
	xor.b32  	%r7884, %r2325, -2004318072;
	// begin inline asm
	mov.b32 %r2332, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2330, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2331, %r2332, %r2330;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2334, %r2197, %r2331;
	// end inline asm
	// begin inline asm
	mov.b32 %r2337, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2338, %r2332, %r2337;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2341, %r2205, %r2338;
	// end inline asm
	// begin inline asm
	mov.b32 %r2344, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2345, %r2332, %r2344;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2348, %r2213, %r2345;
	// end inline asm
	// begin inline asm
	mov.b32 %r2351, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2352, %r2332, %r2351;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2355, %r2221, %r2352;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2358, %r2334, %r2348, %r2320;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2362, %r2341, %r2355, %r2320;
	// end inline asm
	shl.b32 	%r2369, %r2362, 4;
	// begin inline asm
	lop3.b32 %r2366, %r2326, %r2358, %r2369, 202;
	// end inline asm
	xor.b32  	%r7885, %r2366, -2004318072;
	// begin inline asm
	mov.b32 %r2373, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2371, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2372, %r2373, %r2371;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2375, %r2229, %r2372;
	// end inline asm
	// begin inline asm
	mov.b32 %r2378, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2379, %r2373, %r2378;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2382, %r2237, %r2379;
	// end inline asm
	// begin inline asm
	mov.b32 %r2385, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2386, %r2373, %r2385;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2389, %r2245, %r2386;
	// end inline asm
	// begin inline asm
	mov.b32 %r2392, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2393, %r2373, %r2392;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2396, %r2253, %r2393;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2399, %r2375, %r2389, %r2320;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2403, %r2382, %r2396, %r2320;
	// end inline asm
	shl.b32 	%r2410, %r2403, 4;
	// begin inline asm
	lop3.b32 %r2407, %r2326, %r2399, %r2410, 202;
	// end inline asm
	xor.b32  	%r7886, %r2407, -2004318072;
	// begin inline asm
	mov.b32 %r2414, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2412, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2413, %r2414, %r2412;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2416, %r2261, %r2413;
	// end inline asm
	// begin inline asm
	mov.b32 %r2419, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2420, %r2414, %r2419;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2423, %r2269, %r2420;
	// end inline asm
	// begin inline asm
	mov.b32 %r2426, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2427, %r2414, %r2426;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2430, %r2277, %r2427;
	// end inline asm
	// begin inline asm
	mov.b32 %r2433, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2434, %r2414, %r2433;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2437, %r2285, %r2434;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2440, %r2416, %r2430, %r2320;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2444, %r2423, %r2437, %r2320;
	// end inline asm
	shl.b32 	%r2451, %r2444, 4;
	// begin inline asm
	lop3.b32 %r2448, %r2326, %r2440, %r2451, 202;
	// end inline asm
	xor.b32  	%r7887, %r2448, -2004318072;
	st.shared.u32 	[%rd187], %r7884;
	st.shared.u32 	[%rd188], %r7885;
	st.shared.u32 	[%rd189], %r7886;
	st.shared.u32 	[%rd190], %r7887;
	ld.shared.u32 	%r8039, [%rd130];
	ld.shared.u32 	%r8038, [%rd132];
	ld.shared.u32 	%r8033, [%rd134];
	ld.shared.u32 	%r8032, [%rd136];
	// begin inline asm
	mov.b32 %r2457, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2468, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2456, %r8039, -2004318072;
	// begin inline asm
	lop3.b32 %r2454, %r659, %r2456, %r2457, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2458, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2459, %r2457, %r2458;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2462, %r2454, %r2459;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2465, %r670, %r2456, %r2468, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2469, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2470, %r2468, %r2469;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2473, %r2465, %r2470;
	// end inline asm
	shr.u32 	%r2478, %r2456, 8;
	// begin inline asm
	lop3.b32 %r2476, %r659, %r2478, %r2457, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2480, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2481, %r2457, %r2480;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2484, %r2476, %r2481;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2487, %r670, %r2478, %r2468, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2491, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2492, %r2468, %r2491;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2495, %r2487, %r2492;
	// end inline asm
	// begin inline asm
	mov.b32 %r2503, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2514, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2502, %r8038, -2004318072;
	// begin inline asm
	lop3.b32 %r2500, %r659, %r2502, %r2503, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2504, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2505, %r2503, %r2504;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2508, %r2500, %r2505;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2511, %r670, %r2502, %r2514, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2515, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2516, %r2514, %r2515;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2519, %r2511, %r2516;
	// end inline asm
	shr.u32 	%r2524, %r2502, 8;
	// begin inline asm
	lop3.b32 %r2522, %r659, %r2524, %r2503, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2526, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2527, %r2503, %r2526;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2530, %r2522, %r2527;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2533, %r670, %r2524, %r2514, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2537, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2538, %r2514, %r2537;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2541, %r2533, %r2538;
	// end inline asm
	// begin inline asm
	mov.b32 %r2549, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2560, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2548, %r8033, -2004318072;
	// begin inline asm
	lop3.b32 %r2546, %r659, %r2548, %r2549, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2550, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2551, %r2549, %r2550;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2554, %r2546, %r2551;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2557, %r670, %r2548, %r2560, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2561, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2562, %r2560, %r2561;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2565, %r2557, %r2562;
	// end inline asm
	shr.u32 	%r2570, %r2548, 8;
	// begin inline asm
	lop3.b32 %r2568, %r659, %r2570, %r2549, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2572, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2573, %r2549, %r2572;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2576, %r2568, %r2573;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2579, %r670, %r2570, %r2560, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2583, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2584, %r2560, %r2583;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2587, %r2579, %r2584;
	// end inline asm
	// begin inline asm
	mov.b32 %r2595, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2606, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2594, %r8032, -2004318072;
	// begin inline asm
	lop3.b32 %r2592, %r659, %r2594, %r2595, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2596, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2597, %r2595, %r2596;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2600, %r2592, %r2597;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2603, %r670, %r2594, %r2606, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2607, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2608, %r2606, %r2607;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2611, %r2603, %r2608;
	// end inline asm
	shr.u32 	%r2616, %r2594, 8;
	// begin inline asm
	lop3.b32 %r2614, %r659, %r2616, %r2595, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2618, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2619, %r2595, %r2618;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2622, %r2614, %r2619;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2625, %r670, %r2616, %r2606, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2629, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2630, %r2606, %r2629;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2633, %r2625, %r2630;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2636, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2638, %r2636, %r2462;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2641, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2643, %r2641, %r2473;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2646, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2648, %r2646, %r2484;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2651, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2653, %r2651, %r2495;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2656, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2658, %r2656, %r2508;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2661, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2663, %r2661, %r2519;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2666, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2668, %r2666, %r2530;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2671, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2673, %r2671, %r2541;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2676, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2678, %r2676, %r2554;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2681, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2683, %r2681, %r2565;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2686, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2688, %r2686, %r2576;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2691, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2693, %r2691, %r2587;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2696, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2698, %r2696, %r2600;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2701, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2703, %r2701, %r2611;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2706, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2708, %r2706, %r2622;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2711, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2713, %r2711, %r2633;
	// end inline asm
	// begin inline asm
	mov.b32 %r2721, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2732, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2718, %r659, %r1172, %r2721, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2722, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2723, %r2721, %r2722;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2726, %r2718, %r2723;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2729, %r670, %r1172, %r2732, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2733, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2734, %r2732, %r2733;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2737, %r2729, %r2734;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2740, %r659, %r1194, %r2721, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2744, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2745, %r2721, %r2744;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2748, %r2740, %r2745;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2751, %r670, %r1194, %r2732, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2755, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2756, %r2732, %r2755;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2759, %r2751, %r2756;
	// end inline asm
	// begin inline asm
	mov.b32 %r2767, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2778, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2764, %r659, %r1218, %r2767, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2768, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2769, %r2767, %r2768;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2772, %r2764, %r2769;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2775, %r670, %r1218, %r2778, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2779, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2780, %r2778, %r2779;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2783, %r2775, %r2780;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2786, %r659, %r1240, %r2767, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2790, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2791, %r2767, %r2790;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2794, %r2786, %r2791;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2797, %r670, %r1240, %r2778, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2801, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2802, %r2778, %r2801;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2805, %r2797, %r2802;
	// end inline asm
	// begin inline asm
	mov.b32 %r2813, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2824, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2810, %r659, %r1264, %r2813, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2814, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2815, %r2813, %r2814;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2818, %r2810, %r2815;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2821, %r670, %r1264, %r2824, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2825, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2826, %r2824, %r2825;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2829, %r2821, %r2826;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2832, %r659, %r1286, %r2813, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2836, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2837, %r2813, %r2836;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2840, %r2832, %r2837;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2843, %r670, %r1286, %r2824, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2847, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2848, %r2824, %r2847;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2851, %r2843, %r2848;
	// end inline asm
	// begin inline asm
	mov.b32 %r2859, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2870, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2856, %r659, %r1310, %r2859, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2860, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2861, %r2859, %r2860;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2864, %r2856, %r2861;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2867, %r670, %r1310, %r2870, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2871, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2872, %r2870, %r2871;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2875, %r2867, %r2872;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2878, %r659, %r1332, %r2859, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2882, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2883, %r2859, %r2882;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2886, %r2878, %r2883;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2889, %r670, %r1332, %r2870, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2893, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2894, %r2870, %r2893;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2897, %r2889, %r2894;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2900, %r220, %r2726, %r2638;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2904, %r220, %r2737, %r2643;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2908, %r220, %r2748, %r2648;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2912, %r220, %r2759, %r2653;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2916, %r220, %r2772, %r2658;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2920, %r220, %r2783, %r2663;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2924, %r220, %r2794, %r2668;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2928, %r220, %r2805, %r2673;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2932, %r220, %r2818, %r2678;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2936, %r220, %r2829, %r2683;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2940, %r220, %r2840, %r2688;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2944, %r220, %r2851, %r2693;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2948, %r220, %r2864, %r2698;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2952, %r220, %r2875, %r2703;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2956, %r220, %r2886, %r2708;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2960, %r220, %r2897, %r2713;
	// end inline asm
	// begin inline asm
	mov.b32 %r2969, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2980, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2966, %r659, %r1452, %r2969, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2970, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2971, %r2969, %r2970;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2974, %r2966, %r2971;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2977, %r670, %r1452, %r2980, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2981, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2982, %r2980, %r2981;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2985, %r2977, %r2982;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2988, %r659, %r1474, %r2969, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2992, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2993, %r2969, %r2992;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2996, %r2988, %r2993;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2999, %r670, %r1474, %r2980, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3003, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3004, %r2980, %r3003;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3007, %r2999, %r3004;
	// end inline asm
	// begin inline asm
	mov.b32 %r3015, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3026, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3012, %r659, %r1498, %r3015, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3016, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3017, %r3015, %r3016;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3020, %r3012, %r3017;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3023, %r670, %r1498, %r3026, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3027, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3028, %r3026, %r3027;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3031, %r3023, %r3028;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3034, %r659, %r1520, %r3015, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3038, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3039, %r3015, %r3038;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3042, %r3034, %r3039;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3045, %r670, %r1520, %r3026, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3049, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3050, %r3026, %r3049;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3053, %r3045, %r3050;
	// end inline asm
	// begin inline asm
	mov.b32 %r3061, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3072, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3058, %r659, %r1544, %r3061, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3062, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3063, %r3061, %r3062;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3066, %r3058, %r3063;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3069, %r670, %r1544, %r3072, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3073, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3074, %r3072, %r3073;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3077, %r3069, %r3074;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3080, %r659, %r1566, %r3061, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3084, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3085, %r3061, %r3084;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3088, %r3080, %r3085;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3091, %r670, %r1566, %r3072, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3095, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3096, %r3072, %r3095;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3099, %r3091, %r3096;
	// end inline asm
	// begin inline asm
	mov.b32 %r3107, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3118, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3104, %r659, %r1590, %r3107, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3108, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3109, %r3107, %r3108;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3112, %r3104, %r3109;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3115, %r670, %r1590, %r3118, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3119, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3120, %r3118, %r3119;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3123, %r3115, %r3120;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3126, %r659, %r1612, %r3107, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3130, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3131, %r3107, %r3130;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3134, %r3126, %r3131;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3137, %r670, %r1612, %r3118, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3141, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3142, %r3118, %r3141;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3145, %r3137, %r3142;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3148, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3150, %r3148, %r2974, %r2900;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3154, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3156, %r3154, %r2985, %r2904;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3160, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3162, %r3160, %r2996, %r2908;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3166, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3168, %r3166, %r3007, %r2912;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3172, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3174, %r3172, %r3020, %r2916;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3178, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3180, %r3178, %r3031, %r2920;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3184, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3186, %r3184, %r3042, %r2924;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3190, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3192, %r3190, %r3053, %r2928;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3196, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3198, %r3196, %r3066, %r2932;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3202, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3204, %r3202, %r3077, %r2936;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3208, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3210, %r3208, %r3088, %r2940;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3214, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3216, %r3214, %r3099, %r2944;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3220, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3222, %r3220, %r3112, %r2948;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3226, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3228, %r3226, %r3123, %r2952;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3232, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3234, %r3232, %r3134, %r2956;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3238, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3240, %r3238, %r3145, %r2960;
	// end inline asm
	// begin inline asm
	mov.b32 %r3249, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3260, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3246, %r659, %r660, %r3249, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3250, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3251, %r3249, %r3250;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3254, %r3246, %r3251;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3257, %r670, %r660, %r3260, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3261, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3262, %r3260, %r3261;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3265, %r3257, %r3262;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3268, %r659, %r682, %r3249, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3272, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3273, %r3249, %r3272;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3276, %r3268, %r3273;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3279, %r670, %r682, %r3260, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3283, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3284, %r3260, %r3283;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3287, %r3279, %r3284;
	// end inline asm
	// begin inline asm
	mov.b32 %r3295, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3306, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3292, %r659, %r706, %r3295, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3296, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3297, %r3295, %r3296;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3300, %r3292, %r3297;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3303, %r670, %r706, %r3306, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3307, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3308, %r3306, %r3307;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3311, %r3303, %r3308;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3314, %r659, %r728, %r3295, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3318, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3319, %r3295, %r3318;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3322, %r3314, %r3319;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3325, %r670, %r728, %r3306, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3329, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3330, %r3306, %r3329;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3333, %r3325, %r3330;
	// end inline asm
	// begin inline asm
	mov.b32 %r3341, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3352, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3338, %r659, %r752, %r3341, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3342, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3343, %r3341, %r3342;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3346, %r3338, %r3343;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3349, %r670, %r752, %r3352, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3353, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3354, %r3352, %r3353;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3357, %r3349, %r3354;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3360, %r659, %r774, %r3341, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3364, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3365, %r3341, %r3364;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3368, %r3360, %r3365;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3371, %r670, %r774, %r3352, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3375, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3376, %r3352, %r3375;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3379, %r3371, %r3376;
	// end inline asm
	// begin inline asm
	mov.b32 %r3387, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3398, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3384, %r659, %r798, %r3387, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3388, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3389, %r3387, %r3388;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3392, %r3384, %r3389;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3395, %r670, %r798, %r3398, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3399, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3400, %r3398, %r3399;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3403, %r3395, %r3400;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3406, %r659, %r820, %r3387, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3410, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3411, %r3387, %r3410;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3414, %r3406, %r3411;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3417, %r670, %r820, %r3398, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3421, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3422, %r3398, %r3421;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3425, %r3417, %r3422;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3499, %r256, %r3254, %r3150;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3496, %r256, %r3265, %r3156;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3508, %r256, %r3276, %r3162;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3505, %r256, %r3287, %r3168;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3517, %r256, %r3300, %r3174;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3514, %r256, %r3311, %r3180;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3526, %r256, %r3322, %r3186;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3523, %r256, %r3333, %r3192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3535, %r256, %r3346, %r3198;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3532, %r256, %r3357, %r3204;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3544, %r256, %r3368, %r3210;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3541, %r256, %r3379, %r3216;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3553, %r256, %r3392, %r3222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3550, %r256, %r3403, %r3228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3562, %r256, %r3414, %r3234;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3559, %r256, %r3425, %r3240;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3492, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3494, %r3492, %r3496;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3497, %r302, %r3499, %r3494;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3501, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3503, %r3501, %r3505;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3506, %r302, %r3508, %r3503;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3510, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3512, %r3510, %r3514;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3515, %r302, %r3517, %r3512;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3519, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3521, %r3519, %r3523;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3524, %r302, %r3526, %r3521;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3528, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3530, %r3528, %r3532;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3533, %r302, %r3535, %r3530;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3537, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3539, %r3537, %r3541;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3542, %r302, %r3544, %r3539;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3546, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3548, %r3546, %r3550;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3551, %r302, %r3553, %r3548;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3555, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3557, %r3555, %r3559;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3560, %r302, %r3562, %r3557;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3564, %r305, %r3499;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3567, %r302, %r3496, %r3564;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3571, %r305, %r3508;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3574, %r302, %r3505, %r3571;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3578, %r305, %r3517;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3581, %r302, %r3514, %r3578;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3585, %r305, %r3526;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3588, %r302, %r3523, %r3585;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3592, %r305, %r3535;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3595, %r302, %r3532, %r3592;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3599, %r305, %r3544;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3602, %r302, %r3541, %r3599;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3606, %r305, %r3553;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3609, %r302, %r3550, %r3606;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3613, %r305, %r3562;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3616, %r302, %r3559, %r3613;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3707, %r3704}, {%r349, %r355, %r352, %r358}, {%r3497, %r3567}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3716, %r3713}, {%r349, %r355, %r352, %r358}, {%r3506, %r3574}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3725, %r3722}, {%r349, %r355, %r352, %r358}, {%r3515, %r3581}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3734, %r3731}, {%r349, %r355, %r352, %r358}, {%r3524, %r3588}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3743, %r3740}, {%r349, %r355, %r352, %r358}, {%r3533, %r3595}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3752, %r3749}, {%r349, %r355, %r352, %r358}, {%r3542, %r3602}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3761, %r3758}, {%r349, %r355, %r352, %r358}, {%r3551, %r3609}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3770, %r3767}, {%r349, %r355, %r352, %r358}, {%r3560, %r3616}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3700, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3702, %r3700, %r3704;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3705, %r393, %r3707, %r3702;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3709, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3711, %r3709, %r3713;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3714, %r393, %r3716, %r3711;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3718, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3720, %r3718, %r3722;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3723, %r393, %r3725, %r3720;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3727, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3729, %r3727, %r3731;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3732, %r393, %r3734, %r3729;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3736, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3738, %r3736, %r3740;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3741, %r393, %r3743, %r3738;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3745, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3747, %r3745, %r3749;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3750, %r393, %r3752, %r3747;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3754, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3756, %r3754, %r3758;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3759, %r393, %r3761, %r3756;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3763, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3765, %r3763, %r3767;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3768, %r393, %r3770, %r3765;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3772, %r396, %r3707;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3775, %r393, %r3704, %r3772;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3779, %r396, %r3716;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3782, %r393, %r3713, %r3779;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3786, %r396, %r3725;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3789, %r393, %r3722, %r3786;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3793, %r396, %r3734;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3796, %r393, %r3731, %r3793;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3800, %r396, %r3743;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3803, %r393, %r3740, %r3800;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3807, %r396, %r3752;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3810, %r393, %r3749, %r3807;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3814, %r396, %r3761;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3817, %r393, %r3758, %r3814;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3821, %r396, %r3770;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3824, %r393, %r3767, %r3821;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3828, %r3829}, {%r427, %r433, %r430, %r436}, {%r3705, %r3775}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3838, %r3839}, {%r427, %r433, %r430, %r436}, {%r3714, %r3782}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3848, %r3849}, {%r427, %r433, %r430, %r436}, {%r3723, %r3789}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3858, %r3859}, {%r427, %r433, %r430, %r436}, {%r3732, %r3796}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3868, %r3869}, {%r427, %r433, %r430, %r436}, {%r3741, %r3803}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3878, %r3879}, {%r427, %r433, %r430, %r436}, {%r3750, %r3810}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3888, %r3889}, {%r427, %r433, %r430, %r436}, {%r3759, %r3817}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3898, %r3899}, {%r427, %r433, %r430, %r436}, {%r3768, %r3824}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3908, %r118, %r3828;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3911, %r118, %r3829;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3914, %r118, %r3838;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3917, %r118, %r3839;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3920, %r118, %r3848;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3923, %r118, %r3849;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3926, %r118, %r3858;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3929, %r118, %r3859;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3932, %r118, %r3868;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3935, %r118, %r3869;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3938, %r118, %r3878;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3941, %r118, %r3879;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3944, %r118, %r3888;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3947, %r118, %r3889;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3950, %r118, %r3898;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3953, %r118, %r3899;
	// end inline asm
	// begin inline asm
	mov.b32 %r3956, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3957, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3958, %r3908, %r3956;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3961, %r3958, %r3957;
	// end inline asm
	// begin inline asm
	mov.b32 %r3964, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3965, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3966, %r3911, %r3964;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3969, %r3966, %r3965;
	// end inline asm
	// begin inline asm
	mov.b32 %r3972, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3973, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3974, %r3914, %r3972;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3977, %r3974, %r3973;
	// end inline asm
	// begin inline asm
	mov.b32 %r3980, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3981, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3982, %r3917, %r3980;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3985, %r3982, %r3981;
	// end inline asm
	// begin inline asm
	mov.b32 %r3988, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3989, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3990, %r3920, %r3988;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3993, %r3990, %r3989;
	// end inline asm
	// begin inline asm
	mov.b32 %r3996, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3997, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3998, %r3923, %r3996;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4001, %r3998, %r3997;
	// end inline asm
	// begin inline asm
	mov.b32 %r4004, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4005, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4006, %r3926, %r4004;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4009, %r4006, %r4005;
	// end inline asm
	// begin inline asm
	mov.b32 %r4012, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4013, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4014, %r3929, %r4012;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4017, %r4014, %r4013;
	// end inline asm
	// begin inline asm
	mov.b32 %r4020, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4021, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4022, %r3932, %r4020;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4025, %r4022, %r4021;
	// end inline asm
	// begin inline asm
	mov.b32 %r4028, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4029, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4030, %r3935, %r4028;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4033, %r4030, %r4029;
	// end inline asm
	// begin inline asm
	mov.b32 %r4036, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4037, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4038, %r3938, %r4036;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4041, %r4038, %r4037;
	// end inline asm
	// begin inline asm
	mov.b32 %r4044, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4045, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4046, %r3941, %r4044;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4049, %r4046, %r4045;
	// end inline asm
	// begin inline asm
	mov.b32 %r4052, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4053, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4054, %r3944, %r4052;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4057, %r4054, %r4053;
	// end inline asm
	// begin inline asm
	mov.b32 %r4060, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4061, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4062, %r3947, %r4060;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4065, %r4062, %r4061;
	// end inline asm
	// begin inline asm
	mov.b32 %r4068, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4069, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4070, %r3950, %r4068;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4073, %r4070, %r4069;
	// end inline asm
	// begin inline asm
	mov.b32 %r4076, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4077, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4078, %r3953, %r4076;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4081, %r4078, %r4077;
	// end inline asm
	// begin inline asm
	mov.b32 %r4087, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4085, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4086, %r4087, %r4085;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4089, %r3961, %r4086;
	// end inline asm
	// begin inline asm
	mov.b32 %r4092, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4093, %r4087, %r4092;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4096, %r3969, %r4093;
	// end inline asm
	// begin inline asm
	mov.b32 %r4099, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4100, %r4087, %r4099;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4103, %r3977, %r4100;
	// end inline asm
	// begin inline asm
	mov.b32 %r4106, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4107, %r4087, %r4106;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4110, %r3985, %r4107;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4113, %r4089, %r4103, %r2320;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4117, %r4096, %r4110, %r2320;
	// end inline asm
	shl.b32 	%r4124, %r4117, 4;
	// begin inline asm
	lop3.b32 %r4121, %r2326, %r4113, %r4124, 202;
	// end inline asm
	xor.b32  	%r7888, %r4121, -2004318072;
	// begin inline asm
	mov.b32 %r4128, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4126, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4127, %r4128, %r4126;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4130, %r3993, %r4127;
	// end inline asm
	// begin inline asm
	mov.b32 %r4133, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4134, %r4128, %r4133;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4137, %r4001, %r4134;
	// end inline asm
	// begin inline asm
	mov.b32 %r4140, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4141, %r4128, %r4140;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4144, %r4009, %r4141;
	// end inline asm
	// begin inline asm
	mov.b32 %r4147, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4148, %r4128, %r4147;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4151, %r4017, %r4148;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4154, %r4130, %r4144, %r2320;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4158, %r4137, %r4151, %r2320;
	// end inline asm
	shl.b32 	%r4165, %r4158, 4;
	// begin inline asm
	lop3.b32 %r4162, %r2326, %r4154, %r4165, 202;
	// end inline asm
	xor.b32  	%r7889, %r4162, -2004318072;
	// begin inline asm
	mov.b32 %r4169, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4167, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4168, %r4169, %r4167;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4171, %r4025, %r4168;
	// end inline asm
	// begin inline asm
	mov.b32 %r4174, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4175, %r4169, %r4174;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4178, %r4033, %r4175;
	// end inline asm
	// begin inline asm
	mov.b32 %r4181, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4182, %r4169, %r4181;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4185, %r4041, %r4182;
	// end inline asm
	// begin inline asm
	mov.b32 %r4188, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4189, %r4169, %r4188;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4192, %r4049, %r4189;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4195, %r4171, %r4185, %r2320;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4199, %r4178, %r4192, %r2320;
	// end inline asm
	shl.b32 	%r4206, %r4199, 4;
	// begin inline asm
	lop3.b32 %r4203, %r2326, %r4195, %r4206, 202;
	// end inline asm
	xor.b32  	%r7890, %r4203, -2004318072;
	// begin inline asm
	mov.b32 %r4210, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4208, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4209, %r4210, %r4208;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4212, %r4057, %r4209;
	// end inline asm
	// begin inline asm
	mov.b32 %r4215, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4216, %r4210, %r4215;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4219, %r4065, %r4216;
	// end inline asm
	// begin inline asm
	mov.b32 %r4222, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4223, %r4210, %r4222;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4226, %r4073, %r4223;
	// end inline asm
	// begin inline asm
	mov.b32 %r4229, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4230, %r4210, %r4229;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4233, %r4081, %r4230;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4236, %r4212, %r4226, %r2320;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4240, %r4219, %r4233, %r2320;
	// end inline asm
	shl.b32 	%r4247, %r4240, 4;
	// begin inline asm
	lop3.b32 %r4244, %r2326, %r4236, %r4247, 202;
	// end inline asm
	xor.b32  	%r7891, %r4244, -2004318072;
	st.shared.u32 	[%rd187], %r7888;
	st.shared.u32 	[%rd188], %r7889;
	st.shared.u32 	[%rd189], %r7890;
	st.shared.u32 	[%rd190], %r7891;
	ld.shared.u32 	%r8037, [%rd130];
	ld.shared.u32 	%r8036, [%rd132];
	ld.shared.u32 	%r8031, [%rd134];
	ld.shared.u32 	%r8030, [%rd136];
	// begin inline asm
	mov.b32 %r4253, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4264, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4252, %r8037, -2004318072;
	// begin inline asm
	lop3.b32 %r4250, %r659, %r4252, %r4253, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4254, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4255, %r4253, %r4254;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4258, %r4250, %r4255;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4261, %r670, %r4252, %r4264, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4265, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4266, %r4264, %r4265;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4269, %r4261, %r4266;
	// end inline asm
	shr.u32 	%r4274, %r4252, 8;
	// begin inline asm
	lop3.b32 %r4272, %r659, %r4274, %r4253, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4276, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4277, %r4253, %r4276;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4280, %r4272, %r4277;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4283, %r670, %r4274, %r4264, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4287, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4288, %r4264, %r4287;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4291, %r4283, %r4288;
	// end inline asm
	// begin inline asm
	mov.b32 %r4299, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4310, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4298, %r8036, -2004318072;
	// begin inline asm
	lop3.b32 %r4296, %r659, %r4298, %r4299, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4300, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4301, %r4299, %r4300;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4304, %r4296, %r4301;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4307, %r670, %r4298, %r4310, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4311, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4312, %r4310, %r4311;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4315, %r4307, %r4312;
	// end inline asm
	shr.u32 	%r4320, %r4298, 8;
	// begin inline asm
	lop3.b32 %r4318, %r659, %r4320, %r4299, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4322, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4323, %r4299, %r4322;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4326, %r4318, %r4323;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4329, %r670, %r4320, %r4310, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4333, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4334, %r4310, %r4333;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4337, %r4329, %r4334;
	// end inline asm
	// begin inline asm
	mov.b32 %r4345, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4356, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4344, %r8031, -2004318072;
	// begin inline asm
	lop3.b32 %r4342, %r659, %r4344, %r4345, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4346, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4347, %r4345, %r4346;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4350, %r4342, %r4347;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4353, %r670, %r4344, %r4356, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4357, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4358, %r4356, %r4357;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4361, %r4353, %r4358;
	// end inline asm
	shr.u32 	%r4366, %r4344, 8;
	// begin inline asm
	lop3.b32 %r4364, %r659, %r4366, %r4345, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4368, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4369, %r4345, %r4368;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4372, %r4364, %r4369;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4375, %r670, %r4366, %r4356, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4379, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4380, %r4356, %r4379;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4383, %r4375, %r4380;
	// end inline asm
	// begin inline asm
	mov.b32 %r4391, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4402, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4390, %r8030, -2004318072;
	// begin inline asm
	lop3.b32 %r4388, %r659, %r4390, %r4391, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4392, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4393, %r4391, %r4392;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4396, %r4388, %r4393;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4399, %r670, %r4390, %r4402, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4403, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4404, %r4402, %r4403;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4407, %r4399, %r4404;
	// end inline asm
	shr.u32 	%r4412, %r4390, 8;
	// begin inline asm
	lop3.b32 %r4410, %r659, %r4412, %r4391, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4414, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4415, %r4391, %r4414;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4418, %r4410, %r4415;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4421, %r670, %r4412, %r4402, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4425, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4426, %r4402, %r4425;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4429, %r4421, %r4426;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4432, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4434, %r4432, %r4258;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4437, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4439, %r4437, %r4269;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4442, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4444, %r4442, %r4280;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4447, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4449, %r4447, %r4291;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4452, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4454, %r4452, %r4304;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4457, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4459, %r4457, %r4315;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4462, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4464, %r4462, %r4326;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4467, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4469, %r4467, %r4337;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4472, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4474, %r4472, %r4350;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4477, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4479, %r4477, %r4361;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4482, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4484, %r4482, %r4372;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4487, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4489, %r4487, %r4383;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4492, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4494, %r4492, %r4396;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4497, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4499, %r4497, %r4407;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4502, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4504, %r4502, %r4418;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4507, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4509, %r4507, %r4429;
	// end inline asm
	// begin inline asm
	mov.b32 %r4517, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4528, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4514, %r659, %r1452, %r4517, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4518, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4519, %r4517, %r4518;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4522, %r4514, %r4519;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4525, %r670, %r1452, %r4528, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4529, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4530, %r4528, %r4529;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4533, %r4525, %r4530;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4536, %r659, %r1474, %r4517, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4540, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4541, %r4517, %r4540;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4544, %r4536, %r4541;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4547, %r670, %r1474, %r4528, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4551, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4552, %r4528, %r4551;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4555, %r4547, %r4552;
	// end inline asm
	// begin inline asm
	mov.b32 %r4563, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4574, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4560, %r659, %r1498, %r4563, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4564, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4565, %r4563, %r4564;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4568, %r4560, %r4565;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4571, %r670, %r1498, %r4574, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4575, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4576, %r4574, %r4575;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4579, %r4571, %r4576;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4582, %r659, %r1520, %r4563, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4586, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4587, %r4563, %r4586;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4590, %r4582, %r4587;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4593, %r670, %r1520, %r4574, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4597, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4598, %r4574, %r4597;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4601, %r4593, %r4598;
	// end inline asm
	// begin inline asm
	mov.b32 %r4609, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4620, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4606, %r659, %r1544, %r4609, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4610, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4611, %r4609, %r4610;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4614, %r4606, %r4611;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4617, %r670, %r1544, %r4620, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4621, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4622, %r4620, %r4621;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4625, %r4617, %r4622;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4628, %r659, %r1566, %r4609, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4632, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4633, %r4609, %r4632;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4636, %r4628, %r4633;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4639, %r670, %r1566, %r4620, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4643, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4644, %r4620, %r4643;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4647, %r4639, %r4644;
	// end inline asm
	// begin inline asm
	mov.b32 %r4655, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4666, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4652, %r659, %r1590, %r4655, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4656, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4657, %r4655, %r4656;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4660, %r4652, %r4657;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4663, %r670, %r1590, %r4666, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4667, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4668, %r4666, %r4667;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4671, %r4663, %r4668;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4674, %r659, %r1612, %r4655, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4678, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4679, %r4655, %r4678;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4682, %r4674, %r4679;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4685, %r670, %r1612, %r4666, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4689, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4690, %r4666, %r4689;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4693, %r4685, %r4690;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4696, %r220, %r4522, %r4434;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4700, %r220, %r4533, %r4439;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4704, %r220, %r4544, %r4444;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4708, %r220, %r4555, %r4449;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4712, %r220, %r4568, %r4454;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4716, %r220, %r4579, %r4459;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4720, %r220, %r4590, %r4464;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4724, %r220, %r4601, %r4469;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4728, %r220, %r4614, %r4474;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4732, %r220, %r4625, %r4479;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4736, %r220, %r4636, %r4484;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4740, %r220, %r4647, %r4489;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4744, %r220, %r4660, %r4494;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4748, %r220, %r4671, %r4499;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4752, %r220, %r4682, %r4504;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4756, %r220, %r4693, %r4509;
	// end inline asm
	// begin inline asm
	mov.b32 %r4765, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4776, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4762, %r659, %r660, %r4765, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4766, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4767, %r4765, %r4766;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4770, %r4762, %r4767;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4773, %r670, %r660, %r4776, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4777, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4778, %r4776, %r4777;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4781, %r4773, %r4778;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4784, %r659, %r682, %r4765, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4788, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4789, %r4765, %r4788;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4792, %r4784, %r4789;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4795, %r670, %r682, %r4776, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4799, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4800, %r4776, %r4799;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4803, %r4795, %r4800;
	// end inline asm
	// begin inline asm
	mov.b32 %r4811, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4822, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4808, %r659, %r706, %r4811, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4812, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4813, %r4811, %r4812;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4816, %r4808, %r4813;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4819, %r670, %r706, %r4822, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4823, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4824, %r4822, %r4823;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4827, %r4819, %r4824;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4830, %r659, %r728, %r4811, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4834, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4835, %r4811, %r4834;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4838, %r4830, %r4835;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4841, %r670, %r728, %r4822, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4845, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4846, %r4822, %r4845;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4849, %r4841, %r4846;
	// end inline asm
	// begin inline asm
	mov.b32 %r4857, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4868, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4854, %r659, %r752, %r4857, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4858, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4859, %r4857, %r4858;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4862, %r4854, %r4859;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4865, %r670, %r752, %r4868, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4869, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4870, %r4868, %r4869;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4873, %r4865, %r4870;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4876, %r659, %r774, %r4857, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4880, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4881, %r4857, %r4880;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4884, %r4876, %r4881;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4887, %r670, %r774, %r4868, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4891, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4892, %r4868, %r4891;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4895, %r4887, %r4892;
	// end inline asm
	// begin inline asm
	mov.b32 %r4903, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4914, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4900, %r659, %r798, %r4903, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4904, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4905, %r4903, %r4904;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4908, %r4900, %r4905;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4911, %r670, %r798, %r4914, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4915, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4916, %r4914, %r4915;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4919, %r4911, %r4916;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4922, %r659, %r820, %r4903, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4926, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4927, %r4903, %r4926;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4930, %r4922, %r4927;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4933, %r670, %r820, %r4914, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4937, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4938, %r4914, %r4937;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4941, %r4933, %r4938;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4944, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4946, %r4944, %r4770, %r4696;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4950, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4952, %r4950, %r4781, %r4700;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4956, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4958, %r4956, %r4792, %r4704;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4962, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4964, %r4962, %r4803, %r4708;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4968, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4970, %r4968, %r4816, %r4712;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4974, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4976, %r4974, %r4827, %r4716;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4980, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4982, %r4980, %r4838, %r4720;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4986, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4988, %r4986, %r4849, %r4724;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4992, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4994, %r4992, %r4862, %r4728;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4998, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5000, %r4998, %r4873, %r4732;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5004, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5006, %r5004, %r4884, %r4736;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5010, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5012, %r5010, %r4895, %r4740;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5016, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5018, %r5016, %r4908, %r4744;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5022, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5024, %r5022, %r4919, %r4748;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5028, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5030, %r5028, %r4930, %r4752;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5034, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5036, %r5034, %r4941, %r4756;
	// end inline asm
	// begin inline asm
	mov.b32 %r5045, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5056, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5042, %r659, %r2456, %r5045, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5046, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5047, %r5045, %r5046;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5050, %r5042, %r5047;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5053, %r670, %r2456, %r5056, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5057, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5058, %r5056, %r5057;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5061, %r5053, %r5058;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5064, %r659, %r2478, %r5045, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5068, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5069, %r5045, %r5068;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5072, %r5064, %r5069;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5075, %r670, %r2478, %r5056, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5079, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5080, %r5056, %r5079;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5083, %r5075, %r5080;
	// end inline asm
	// begin inline asm
	mov.b32 %r5091, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5102, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5088, %r659, %r2502, %r5091, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5092, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5093, %r5091, %r5092;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5096, %r5088, %r5093;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5099, %r670, %r2502, %r5102, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5103, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5104, %r5102, %r5103;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5107, %r5099, %r5104;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5110, %r659, %r2524, %r5091, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5114, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5115, %r5091, %r5114;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5118, %r5110, %r5115;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5121, %r670, %r2524, %r5102, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5125, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5126, %r5102, %r5125;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5129, %r5121, %r5126;
	// end inline asm
	// begin inline asm
	mov.b32 %r5137, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5148, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5134, %r659, %r2548, %r5137, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5138, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5139, %r5137, %r5138;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5142, %r5134, %r5139;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5145, %r670, %r2548, %r5148, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5149, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5150, %r5148, %r5149;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5153, %r5145, %r5150;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5156, %r659, %r2570, %r5137, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5160, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5161, %r5137, %r5160;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5164, %r5156, %r5161;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5167, %r670, %r2570, %r5148, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5171, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5172, %r5148, %r5171;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5175, %r5167, %r5172;
	// end inline asm
	// begin inline asm
	mov.b32 %r5183, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5194, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5180, %r659, %r2594, %r5183, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5184, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5185, %r5183, %r5184;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5188, %r5180, %r5185;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5191, %r670, %r2594, %r5194, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5195, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5196, %r5194, %r5195;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5199, %r5191, %r5196;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5202, %r659, %r2616, %r5183, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5206, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5207, %r5183, %r5206;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5210, %r5202, %r5207;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5213, %r670, %r2616, %r5194, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5217, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5218, %r5194, %r5217;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5221, %r5213, %r5218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5295, %r256, %r5050, %r4946;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5292, %r256, %r5061, %r4952;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5304, %r256, %r5072, %r4958;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5301, %r256, %r5083, %r4964;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5313, %r256, %r5096, %r4970;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5310, %r256, %r5107, %r4976;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5322, %r256, %r5118, %r4982;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5319, %r256, %r5129, %r4988;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5331, %r256, %r5142, %r4994;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5328, %r256, %r5153, %r5000;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5340, %r256, %r5164, %r5006;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5337, %r256, %r5175, %r5012;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5349, %r256, %r5188, %r5018;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5346, %r256, %r5199, %r5024;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5358, %r256, %r5210, %r5030;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5355, %r256, %r5221, %r5036;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5288, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5290, %r5288, %r5292;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5293, %r302, %r5295, %r5290;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5297, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5299, %r5297, %r5301;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5302, %r302, %r5304, %r5299;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5306, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5308, %r5306, %r5310;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5311, %r302, %r5313, %r5308;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5315, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5317, %r5315, %r5319;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5320, %r302, %r5322, %r5317;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5324, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5326, %r5324, %r5328;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5329, %r302, %r5331, %r5326;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5333, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5335, %r5333, %r5337;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5338, %r302, %r5340, %r5335;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5342, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5344, %r5342, %r5346;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5347, %r302, %r5349, %r5344;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5351, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5353, %r5351, %r5355;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5356, %r302, %r5358, %r5353;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5360, %r305, %r5295;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5363, %r302, %r5292, %r5360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5367, %r305, %r5304;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5370, %r302, %r5301, %r5367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5374, %r305, %r5313;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5377, %r302, %r5310, %r5374;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5381, %r305, %r5322;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5384, %r302, %r5319, %r5381;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5388, %r305, %r5331;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5391, %r302, %r5328, %r5388;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5395, %r305, %r5340;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5398, %r302, %r5337, %r5395;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5402, %r305, %r5349;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5405, %r302, %r5346, %r5402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5409, %r305, %r5358;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5412, %r302, %r5355, %r5409;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5503, %r5500}, {%r349, %r355, %r352, %r358}, {%r5293, %r5363}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5512, %r5509}, {%r349, %r355, %r352, %r358}, {%r5302, %r5370}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5521, %r5518}, {%r349, %r355, %r352, %r358}, {%r5311, %r5377}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5530, %r5527}, {%r349, %r355, %r352, %r358}, {%r5320, %r5384}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5539, %r5536}, {%r349, %r355, %r352, %r358}, {%r5329, %r5391}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5548, %r5545}, {%r349, %r355, %r352, %r358}, {%r5338, %r5398}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5557, %r5554}, {%r349, %r355, %r352, %r358}, {%r5347, %r5405}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5566, %r5563}, {%r349, %r355, %r352, %r358}, {%r5356, %r5412}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5496, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5498, %r5496, %r5500;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5501, %r393, %r5503, %r5498;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5505, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5507, %r5505, %r5509;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5510, %r393, %r5512, %r5507;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5514, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5516, %r5514, %r5518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5519, %r393, %r5521, %r5516;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5523, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5525, %r5523, %r5527;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5528, %r393, %r5530, %r5525;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5532, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5534, %r5532, %r5536;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5537, %r393, %r5539, %r5534;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5541, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5543, %r5541, %r5545;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5546, %r393, %r5548, %r5543;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5550, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5552, %r5550, %r5554;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5555, %r393, %r5557, %r5552;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5559, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5561, %r5559, %r5563;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5564, %r393, %r5566, %r5561;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5568, %r396, %r5503;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5571, %r393, %r5500, %r5568;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5575, %r396, %r5512;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5578, %r393, %r5509, %r5575;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5582, %r396, %r5521;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5585, %r393, %r5518, %r5582;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5589, %r396, %r5530;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5592, %r393, %r5527, %r5589;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5596, %r396, %r5539;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5599, %r393, %r5536, %r5596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5603, %r396, %r5548;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5606, %r393, %r5545, %r5603;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5610, %r396, %r5557;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5613, %r393, %r5554, %r5610;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5617, %r396, %r5566;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5620, %r393, %r5563, %r5617;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5624, %r5625}, {%r427, %r433, %r430, %r436}, {%r5501, %r5571}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5634, %r5635}, {%r427, %r433, %r430, %r436}, {%r5510, %r5578}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5644, %r5645}, {%r427, %r433, %r430, %r436}, {%r5519, %r5585}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5654, %r5655}, {%r427, %r433, %r430, %r436}, {%r5528, %r5592}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5664, %r5665}, {%r427, %r433, %r430, %r436}, {%r5537, %r5599}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5674, %r5675}, {%r427, %r433, %r430, %r436}, {%r5546, %r5606}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5684, %r5685}, {%r427, %r433, %r430, %r436}, {%r5555, %r5613}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5694, %r5695}, {%r427, %r433, %r430, %r436}, {%r5564, %r5620}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5704, %r118, %r5624;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5707, %r118, %r5625;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5710, %r118, %r5634;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5713, %r118, %r5635;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5716, %r118, %r5644;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5719, %r118, %r5645;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5722, %r118, %r5654;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5725, %r118, %r5655;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5728, %r118, %r5664;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5731, %r118, %r5665;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5734, %r118, %r5674;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5737, %r118, %r5675;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5740, %r118, %r5684;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5743, %r118, %r5685;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5746, %r118, %r5694;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5749, %r118, %r5695;
	// end inline asm
	// begin inline asm
	mov.b32 %r5752, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5753, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5754, %r5704, %r5752;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5757, %r5754, %r5753;
	// end inline asm
	// begin inline asm
	mov.b32 %r5760, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5761, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5762, %r5707, %r5760;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5765, %r5762, %r5761;
	// end inline asm
	// begin inline asm
	mov.b32 %r5768, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5769, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5770, %r5710, %r5768;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5773, %r5770, %r5769;
	// end inline asm
	// begin inline asm
	mov.b32 %r5776, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5777, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5778, %r5713, %r5776;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5781, %r5778, %r5777;
	// end inline asm
	// begin inline asm
	mov.b32 %r5784, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5785, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5786, %r5716, %r5784;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5789, %r5786, %r5785;
	// end inline asm
	// begin inline asm
	mov.b32 %r5792, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5793, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5794, %r5719, %r5792;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5797, %r5794, %r5793;
	// end inline asm
	// begin inline asm
	mov.b32 %r5800, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5801, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5802, %r5722, %r5800;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5805, %r5802, %r5801;
	// end inline asm
	// begin inline asm
	mov.b32 %r5808, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5809, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5810, %r5725, %r5808;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5813, %r5810, %r5809;
	// end inline asm
	// begin inline asm
	mov.b32 %r5816, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5817, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5818, %r5728, %r5816;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5821, %r5818, %r5817;
	// end inline asm
	// begin inline asm
	mov.b32 %r5824, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5825, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5826, %r5731, %r5824;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5829, %r5826, %r5825;
	// end inline asm
	// begin inline asm
	mov.b32 %r5832, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5833, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5834, %r5734, %r5832;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5837, %r5834, %r5833;
	// end inline asm
	// begin inline asm
	mov.b32 %r5840, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5841, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5842, %r5737, %r5840;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5845, %r5842, %r5841;
	// end inline asm
	// begin inline asm
	mov.b32 %r5848, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5849, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5850, %r5740, %r5848;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5853, %r5850, %r5849;
	// end inline asm
	// begin inline asm
	mov.b32 %r5856, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5857, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5858, %r5743, %r5856;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5861, %r5858, %r5857;
	// end inline asm
	// begin inline asm
	mov.b32 %r5864, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5865, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5866, %r5746, %r5864;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5869, %r5866, %r5865;
	// end inline asm
	// begin inline asm
	mov.b32 %r5872, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5873, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5874, %r5749, %r5872;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5877, %r5874, %r5873;
	// end inline asm
	// begin inline asm
	mov.b32 %r5883, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5881, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5882, %r5883, %r5881;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5885, %r5757, %r5882;
	// end inline asm
	// begin inline asm
	mov.b32 %r5888, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5889, %r5883, %r5888;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5892, %r5765, %r5889;
	// end inline asm
	// begin inline asm
	mov.b32 %r5895, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5896, %r5883, %r5895;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5899, %r5773, %r5896;
	// end inline asm
	// begin inline asm
	mov.b32 %r5902, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5903, %r5883, %r5902;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5906, %r5781, %r5903;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5909, %r5885, %r5899, %r2320;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5913, %r5892, %r5906, %r2320;
	// end inline asm
	shl.b32 	%r5920, %r5913, 4;
	// begin inline asm
	lop3.b32 %r5917, %r2326, %r5909, %r5920, 202;
	// end inline asm
	xor.b32  	%r7892, %r5917, -2004318072;
	// begin inline asm
	mov.b32 %r5924, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5922, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5923, %r5924, %r5922;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5926, %r5789, %r5923;
	// end inline asm
	// begin inline asm
	mov.b32 %r5929, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5930, %r5924, %r5929;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5933, %r5797, %r5930;
	// end inline asm
	// begin inline asm
	mov.b32 %r5936, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5937, %r5924, %r5936;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5940, %r5805, %r5937;
	// end inline asm
	// begin inline asm
	mov.b32 %r5943, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5944, %r5924, %r5943;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5947, %r5813, %r5944;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5950, %r5926, %r5940, %r2320;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5954, %r5933, %r5947, %r2320;
	// end inline asm
	shl.b32 	%r5961, %r5954, 4;
	// begin inline asm
	lop3.b32 %r5958, %r2326, %r5950, %r5961, 202;
	// end inline asm
	xor.b32  	%r7893, %r5958, -2004318072;
	// begin inline asm
	mov.b32 %r5965, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5963, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5964, %r5965, %r5963;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5967, %r5821, %r5964;
	// end inline asm
	// begin inline asm
	mov.b32 %r5970, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5971, %r5965, %r5970;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5974, %r5829, %r5971;
	// end inline asm
	// begin inline asm
	mov.b32 %r5977, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5978, %r5965, %r5977;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5981, %r5837, %r5978;
	// end inline asm
	// begin inline asm
	mov.b32 %r5984, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5985, %r5965, %r5984;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5988, %r5845, %r5985;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5991, %r5967, %r5981, %r2320;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5995, %r5974, %r5988, %r2320;
	// end inline asm
	shl.b32 	%r6002, %r5995, 4;
	// begin inline asm
	lop3.b32 %r5999, %r2326, %r5991, %r6002, 202;
	// end inline asm
	xor.b32  	%r7894, %r5999, -2004318072;
	// begin inline asm
	mov.b32 %r6006, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6004, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6005, %r6006, %r6004;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6008, %r5853, %r6005;
	// end inline asm
	// begin inline asm
	mov.b32 %r6011, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6012, %r6006, %r6011;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6015, %r5861, %r6012;
	// end inline asm
	// begin inline asm
	mov.b32 %r6018, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6019, %r6006, %r6018;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6022, %r5869, %r6019;
	// end inline asm
	// begin inline asm
	mov.b32 %r6025, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6026, %r6006, %r6025;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6029, %r5877, %r6026;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6032, %r6008, %r6022, %r2320;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6036, %r6015, %r6029, %r2320;
	// end inline asm
	shl.b32 	%r6043, %r6036, 4;
	// begin inline asm
	lop3.b32 %r6040, %r2326, %r6032, %r6043, 202;
	// end inline asm
	xor.b32  	%r7895, %r6040, -2004318072;
	st.shared.u32 	[%rd187], %r7892;
	st.shared.u32 	[%rd188], %r7893;
	st.shared.u32 	[%rd189], %r7894;
	st.shared.u32 	[%rd190], %r7895;
	ld.shared.u32 	%r8035, [%rd130];
	ld.shared.u32 	%r8034, [%rd132];
	ld.shared.u32 	%r8029, [%rd134];
	ld.shared.u32 	%r8028, [%rd136];
	// begin inline asm
	mov.b32 %r6049, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6060, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6048, %r8035, -2004318072;
	// begin inline asm
	lop3.b32 %r6046, %r659, %r6048, %r6049, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6050, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6051, %r6049, %r6050;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6054, %r6046, %r6051;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6057, %r670, %r6048, %r6060, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6061, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6062, %r6060, %r6061;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6065, %r6057, %r6062;
	// end inline asm
	shr.u32 	%r6070, %r6048, 8;
	// begin inline asm
	lop3.b32 %r6068, %r659, %r6070, %r6049, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6072, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6073, %r6049, %r6072;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6076, %r6068, %r6073;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6079, %r670, %r6070, %r6060, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6083, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6084, %r6060, %r6083;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6087, %r6079, %r6084;
	// end inline asm
	// begin inline asm
	mov.b32 %r6095, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6106, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6094, %r8034, -2004318072;
	// begin inline asm
	lop3.b32 %r6092, %r659, %r6094, %r6095, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6096, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6097, %r6095, %r6096;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6100, %r6092, %r6097;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6103, %r670, %r6094, %r6106, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6107, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6108, %r6106, %r6107;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6111, %r6103, %r6108;
	// end inline asm
	shr.u32 	%r6116, %r6094, 8;
	// begin inline asm
	lop3.b32 %r6114, %r659, %r6116, %r6095, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6118, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6119, %r6095, %r6118;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6122, %r6114, %r6119;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6125, %r670, %r6116, %r6106, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6129, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6130, %r6106, %r6129;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6133, %r6125, %r6130;
	// end inline asm
	// begin inline asm
	mov.b32 %r6141, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6152, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6140, %r8029, -2004318072;
	// begin inline asm
	lop3.b32 %r6138, %r659, %r6140, %r6141, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6142, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6143, %r6141, %r6142;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6146, %r6138, %r6143;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6149, %r670, %r6140, %r6152, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6153, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6154, %r6152, %r6153;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6157, %r6149, %r6154;
	// end inline asm
	shr.u32 	%r6162, %r6140, 8;
	// begin inline asm
	lop3.b32 %r6160, %r659, %r6162, %r6141, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6164, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6165, %r6141, %r6164;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6168, %r6160, %r6165;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6171, %r670, %r6162, %r6152, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6175, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6176, %r6152, %r6175;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6179, %r6171, %r6176;
	// end inline asm
	// begin inline asm
	mov.b32 %r6187, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6198, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6186, %r8028, -2004318072;
	// begin inline asm
	lop3.b32 %r6184, %r659, %r6186, %r6187, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6188, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6189, %r6187, %r6188;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6192, %r6184, %r6189;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6195, %r670, %r6186, %r6198, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6199, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6200, %r6198, %r6199;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6203, %r6195, %r6200;
	// end inline asm
	shr.u32 	%r6208, %r6186, 8;
	// begin inline asm
	lop3.b32 %r6206, %r659, %r6208, %r6187, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6210, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6211, %r6187, %r6210;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6214, %r6206, %r6211;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6217, %r670, %r6208, %r6198, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6221, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6222, %r6198, %r6221;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6225, %r6217, %r6222;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6228, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6230, %r6228, %r6054;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6233, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6235, %r6233, %r6065;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6238, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6240, %r6238, %r6076;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6243, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6245, %r6243, %r6087;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6248, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6250, %r6248, %r6100;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6253, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6255, %r6253, %r6111;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6258, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6260, %r6258, %r6122;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6263, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6265, %r6263, %r6133;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6268, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6270, %r6268, %r6146;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6273, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6275, %r6273, %r6157;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6278, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6280, %r6278, %r6168;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6283, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6285, %r6283, %r6179;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6288, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6290, %r6288, %r6192;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6293, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6295, %r6293, %r6203;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6298, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6300, %r6298, %r6214;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6303, %r274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6305, %r6303, %r6225;
	// end inline asm
	// begin inline asm
	mov.b32 %r6313, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6324, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6310, %r659, %r660, %r6313, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6314, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6315, %r6313, %r6314;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6318, %r6310, %r6315;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6321, %r670, %r660, %r6324, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6325, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6326, %r6324, %r6325;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6329, %r6321, %r6326;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6332, %r659, %r682, %r6313, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6336, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6337, %r6313, %r6336;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6340, %r6332, %r6337;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6343, %r670, %r682, %r6324, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6347, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6348, %r6324, %r6347;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6351, %r6343, %r6348;
	// end inline asm
	// begin inline asm
	mov.b32 %r6359, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6370, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6356, %r659, %r706, %r6359, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6360, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6361, %r6359, %r6360;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6364, %r6356, %r6361;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6367, %r670, %r706, %r6370, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6371, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6372, %r6370, %r6371;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6375, %r6367, %r6372;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6378, %r659, %r728, %r6359, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6382, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6383, %r6359, %r6382;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6386, %r6378, %r6383;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6389, %r670, %r728, %r6370, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6393, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6394, %r6370, %r6393;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6397, %r6389, %r6394;
	// end inline asm
	// begin inline asm
	mov.b32 %r6405, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6416, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6402, %r659, %r752, %r6405, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6406, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6407, %r6405, %r6406;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6410, %r6402, %r6407;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6413, %r670, %r752, %r6416, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6417, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6418, %r6416, %r6417;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6421, %r6413, %r6418;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6424, %r659, %r774, %r6405, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6428, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6429, %r6405, %r6428;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6432, %r6424, %r6429;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6435, %r670, %r774, %r6416, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6439, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6440, %r6416, %r6439;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6443, %r6435, %r6440;
	// end inline asm
	// begin inline asm
	mov.b32 %r6451, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6462, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6448, %r659, %r798, %r6451, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6452, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6453, %r6451, %r6452;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6456, %r6448, %r6453;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6459, %r670, %r798, %r6462, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6463, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6464, %r6462, %r6463;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6467, %r6459, %r6464;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6470, %r659, %r820, %r6451, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6474, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6475, %r6451, %r6474;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6478, %r6470, %r6475;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6481, %r670, %r820, %r6462, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6485, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6486, %r6462, %r6485;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6489, %r6481, %r6486;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6492, %r220, %r6318, %r6230;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6496, %r220, %r6329, %r6235;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6500, %r220, %r6340, %r6240;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6504, %r220, %r6351, %r6245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6508, %r220, %r6364, %r6250;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6512, %r220, %r6375, %r6255;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6516, %r220, %r6386, %r6260;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6520, %r220, %r6397, %r6265;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6524, %r220, %r6410, %r6270;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6528, %r220, %r6421, %r6275;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6532, %r220, %r6432, %r6280;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6536, %r220, %r6443, %r6285;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6540, %r220, %r6456, %r6290;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6544, %r220, %r6467, %r6295;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6548, %r220, %r6478, %r6300;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6552, %r220, %r6489, %r6305;
	// end inline asm
	// begin inline asm
	mov.b32 %r6561, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6572, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6558, %r659, %r2456, %r6561, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6562, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6563, %r6561, %r6562;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6566, %r6558, %r6563;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6569, %r670, %r2456, %r6572, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6573, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6574, %r6572, %r6573;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6577, %r6569, %r6574;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6580, %r659, %r2478, %r6561, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6584, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6585, %r6561, %r6584;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6588, %r6580, %r6585;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6591, %r670, %r2478, %r6572, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6595, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6596, %r6572, %r6595;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6599, %r6591, %r6596;
	// end inline asm
	// begin inline asm
	mov.b32 %r6607, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6618, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6604, %r659, %r2502, %r6607, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6608, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6609, %r6607, %r6608;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6612, %r6604, %r6609;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6615, %r670, %r2502, %r6618, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6619, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6620, %r6618, %r6619;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6623, %r6615, %r6620;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6626, %r659, %r2524, %r6607, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6630, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6631, %r6607, %r6630;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6634, %r6626, %r6631;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6637, %r670, %r2524, %r6618, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6641, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6642, %r6618, %r6641;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6645, %r6637, %r6642;
	// end inline asm
	// begin inline asm
	mov.b32 %r6653, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6664, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6650, %r659, %r2548, %r6653, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6654, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6655, %r6653, %r6654;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6658, %r6650, %r6655;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6661, %r670, %r2548, %r6664, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6665, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6666, %r6664, %r6665;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6669, %r6661, %r6666;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6672, %r659, %r2570, %r6653, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6676, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6677, %r6653, %r6676;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6680, %r6672, %r6677;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6683, %r670, %r2570, %r6664, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6687, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6688, %r6664, %r6687;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6691, %r6683, %r6688;
	// end inline asm
	// begin inline asm
	mov.b32 %r6699, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6710, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6696, %r659, %r2594, %r6699, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6700, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6701, %r6699, %r6700;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6704, %r6696, %r6701;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6707, %r670, %r2594, %r6710, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6711, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6712, %r6710, %r6711;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6715, %r6707, %r6712;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6718, %r659, %r2616, %r6699, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6722, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6723, %r6699, %r6722;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6726, %r6718, %r6723;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6729, %r670, %r2616, %r6710, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6733, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6734, %r6710, %r6733;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6737, %r6729, %r6734;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6740, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6742, %r6740, %r6566, %r6492;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6746, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6748, %r6746, %r6577, %r6496;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6752, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6754, %r6752, %r6588, %r6500;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6758, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6760, %r6758, %r6599, %r6504;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6764, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6766, %r6764, %r6612, %r6508;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6770, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6772, %r6770, %r6623, %r6512;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6776, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6778, %r6776, %r6634, %r6516;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6782, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6784, %r6782, %r6645, %r6520;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6788, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6790, %r6788, %r6658, %r6524;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6794, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6796, %r6794, %r6669, %r6528;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6800, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6802, %r6800, %r6680, %r6532;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6806, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6808, %r6806, %r6691, %r6536;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6812, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6814, %r6812, %r6704, %r6540;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6818, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6820, %r6818, %r6715, %r6544;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6824, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6826, %r6824, %r6726, %r6548;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6830, %r238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6832, %r6830, %r6737, %r6552;
	// end inline asm
	// begin inline asm
	mov.b32 %r6841, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6852, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6838, %r659, %r4252, %r6841, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6842, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6843, %r6841, %r6842;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6846, %r6838, %r6843;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6849, %r670, %r4252, %r6852, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6853, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6854, %r6852, %r6853;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6857, %r6849, %r6854;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6860, %r659, %r4274, %r6841, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6864, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6865, %r6841, %r6864;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6868, %r6860, %r6865;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6871, %r670, %r4274, %r6852, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6875, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6876, %r6852, %r6875;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6879, %r6871, %r6876;
	// end inline asm
	// begin inline asm
	mov.b32 %r6887, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6898, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6884, %r659, %r4298, %r6887, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6888, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6889, %r6887, %r6888;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6892, %r6884, %r6889;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6895, %r670, %r4298, %r6898, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6899, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6900, %r6898, %r6899;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6903, %r6895, %r6900;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6906, %r659, %r4320, %r6887, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6910, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6911, %r6887, %r6910;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6914, %r6906, %r6911;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6917, %r670, %r4320, %r6898, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6921, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6922, %r6898, %r6921;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6925, %r6917, %r6922;
	// end inline asm
	// begin inline asm
	mov.b32 %r6933, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6944, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6930, %r659, %r4344, %r6933, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6934, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6935, %r6933, %r6934;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6938, %r6930, %r6935;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6941, %r670, %r4344, %r6944, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6945, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6946, %r6944, %r6945;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6949, %r6941, %r6946;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6952, %r659, %r4366, %r6933, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6956, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6957, %r6933, %r6956;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6960, %r6952, %r6957;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6963, %r670, %r4366, %r6944, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6967, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6968, %r6944, %r6967;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6971, %r6963, %r6968;
	// end inline asm
	// begin inline asm
	mov.b32 %r6979, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6990, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6976, %r659, %r4390, %r6979, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6980, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6981, %r6979, %r6980;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6984, %r6976, %r6981;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6987, %r670, %r4390, %r6990, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6991, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6992, %r6990, %r6991;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6995, %r6987, %r6992;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6998, %r659, %r4412, %r6979, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r7002, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7003, %r6979, %r7002;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r7006, %r6998, %r7003;
	// end inline asm
	// begin inline asm
	lop3.b32 %r7009, %r670, %r4412, %r6990, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r7013, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7014, %r6990, %r7013;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r7017, %r7009, %r7014;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7091, %r256, %r6846, %r6742;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7088, %r256, %r6857, %r6748;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7100, %r256, %r6868, %r6754;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7097, %r256, %r6879, %r6760;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7109, %r256, %r6892, %r6766;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7106, %r256, %r6903, %r6772;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7118, %r256, %r6914, %r6778;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7115, %r256, %r6925, %r6784;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7127, %r256, %r6938, %r6790;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7124, %r256, %r6949, %r6796;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7136, %r256, %r6960, %r6802;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7133, %r256, %r6971, %r6808;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7145, %r256, %r6984, %r6814;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7142, %r256, %r6995, %r6820;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7154, %r256, %r7006, %r6826;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7151, %r256, %r7017, %r6832;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7084, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7086, %r7084, %r7088;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7089, %r302, %r7091, %r7086;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7093, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7095, %r7093, %r7097;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7098, %r302, %r7100, %r7095;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7102, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7104, %r7102, %r7106;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7107, %r302, %r7109, %r7104;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7111, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7113, %r7111, %r7115;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7116, %r302, %r7118, %r7113;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7120, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7122, %r7120, %r7124;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7125, %r302, %r7127, %r7122;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7129, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7131, %r7129, %r7133;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7134, %r302, %r7136, %r7131;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7138, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7140, %r7138, %r7142;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7143, %r302, %r7145, %r7140;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7147, %r305;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7149, %r7147, %r7151;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7152, %r302, %r7154, %r7149;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7156, %r305, %r7091;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7159, %r302, %r7088, %r7156;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7163, %r305, %r7100;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7166, %r302, %r7097, %r7163;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7170, %r305, %r7109;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7173, %r302, %r7106, %r7170;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7177, %r305, %r7118;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7180, %r302, %r7115, %r7177;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7184, %r305, %r7127;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7187, %r302, %r7124, %r7184;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7191, %r305, %r7136;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7194, %r302, %r7133, %r7191;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7198, %r305, %r7145;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7201, %r302, %r7142, %r7198;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7205, %r305, %r7154;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7208, %r302, %r7151, %r7205;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7299, %r7296}, {%r349, %r355, %r352, %r358}, {%r7089, %r7159}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7308, %r7305}, {%r349, %r355, %r352, %r358}, {%r7098, %r7166}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7317, %r7314}, {%r349, %r355, %r352, %r358}, {%r7107, %r7173}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7326, %r7323}, {%r349, %r355, %r352, %r358}, {%r7116, %r7180}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7335, %r7332}, {%r349, %r355, %r352, %r358}, {%r7125, %r7187}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7344, %r7341}, {%r349, %r355, %r352, %r358}, {%r7134, %r7194}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7353, %r7350}, {%r349, %r355, %r352, %r358}, {%r7143, %r7201}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7362, %r7359}, {%r349, %r355, %r352, %r358}, {%r7152, %r7208}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7292, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7294, %r7292, %r7296;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7297, %r393, %r7299, %r7294;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7301, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7303, %r7301, %r7305;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7306, %r393, %r7308, %r7303;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7310, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7312, %r7310, %r7314;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7315, %r393, %r7317, %r7312;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7319, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7321, %r7319, %r7323;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7324, %r393, %r7326, %r7321;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7328, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7330, %r7328, %r7332;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7333, %r393, %r7335, %r7330;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7337, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7339, %r7337, %r7341;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7342, %r393, %r7344, %r7339;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7346, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7348, %r7346, %r7350;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7351, %r393, %r7353, %r7348;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7355, %r396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7357, %r7355, %r7359;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7360, %r393, %r7362, %r7357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7364, %r396, %r7299;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7367, %r393, %r7296, %r7364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7371, %r396, %r7308;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7374, %r393, %r7305, %r7371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7378, %r396, %r7317;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7381, %r393, %r7314, %r7378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7385, %r396, %r7326;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7388, %r393, %r7323, %r7385;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7392, %r396, %r7335;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7395, %r393, %r7332, %r7392;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7399, %r396, %r7344;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7402, %r393, %r7341, %r7399;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7406, %r396, %r7353;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7409, %r393, %r7350, %r7406;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7413, %r396, %r7362;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7416, %r393, %r7359, %r7413;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7420, %r7421}, {%r427, %r433, %r430, %r436}, {%r7297, %r7367}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7430, %r7431}, {%r427, %r433, %r430, %r436}, {%r7306, %r7374}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7440, %r7441}, {%r427, %r433, %r430, %r436}, {%r7315, %r7381}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7450, %r7451}, {%r427, %r433, %r430, %r436}, {%r7324, %r7388}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7460, %r7461}, {%r427, %r433, %r430, %r436}, {%r7333, %r7395}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7470, %r7471}, {%r427, %r433, %r430, %r436}, {%r7342, %r7402}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7480, %r7481}, {%r427, %r433, %r430, %r436}, {%r7351, %r7409}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7490, %r7491}, {%r427, %r433, %r430, %r436}, {%r7360, %r7416}, {%r7995, %r7995};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7500, %r118, %r7420;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7503, %r118, %r7421;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7506, %r118, %r7430;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7509, %r118, %r7431;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7512, %r118, %r7440;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7515, %r118, %r7441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7518, %r118, %r7450;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7521, %r118, %r7451;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7524, %r118, %r7460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7527, %r118, %r7461;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7530, %r118, %r7470;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7533, %r118, %r7471;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7536, %r118, %r7480;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7539, %r118, %r7481;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7542, %r118, %r7490;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7545, %r118, %r7491;
	// end inline asm
	// begin inline asm
	mov.b32 %r7548, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7549, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7550, %r7500, %r7548;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7553, %r7550, %r7549;
	// end inline asm
	// begin inline asm
	mov.b32 %r7556, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7557, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7558, %r7503, %r7556;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7561, %r7558, %r7557;
	// end inline asm
	// begin inline asm
	mov.b32 %r7564, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7565, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7566, %r7506, %r7564;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7569, %r7566, %r7565;
	// end inline asm
	// begin inline asm
	mov.b32 %r7572, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7573, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7574, %r7509, %r7572;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7577, %r7574, %r7573;
	// end inline asm
	// begin inline asm
	mov.b32 %r7580, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7581, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7582, %r7512, %r7580;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7585, %r7582, %r7581;
	// end inline asm
	// begin inline asm
	mov.b32 %r7588, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7589, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7590, %r7515, %r7588;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7593, %r7590, %r7589;
	// end inline asm
	// begin inline asm
	mov.b32 %r7596, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7597, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7598, %r7518, %r7596;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7601, %r7598, %r7597;
	// end inline asm
	// begin inline asm
	mov.b32 %r7604, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7605, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7606, %r7521, %r7604;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7609, %r7606, %r7605;
	// end inline asm
	// begin inline asm
	mov.b32 %r7612, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7613, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7614, %r7524, %r7612;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7617, %r7614, %r7613;
	// end inline asm
	// begin inline asm
	mov.b32 %r7620, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7621, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7622, %r7527, %r7620;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7625, %r7622, %r7621;
	// end inline asm
	// begin inline asm
	mov.b32 %r7628, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7629, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7630, %r7530, %r7628;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7633, %r7630, %r7629;
	// end inline asm
	// begin inline asm
	mov.b32 %r7636, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7637, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7638, %r7533, %r7636;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7641, %r7638, %r7637;
	// end inline asm
	// begin inline asm
	mov.b32 %r7644, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7645, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7646, %r7536, %r7644;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7649, %r7646, %r7645;
	// end inline asm
	// begin inline asm
	mov.b32 %r7652, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7653, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7654, %r7539, %r7652;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7657, %r7654, %r7653;
	// end inline asm
	// begin inline asm
	mov.b32 %r7660, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7661, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7662, %r7542, %r7660;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7665, %r7662, %r7661;
	// end inline asm
	// begin inline asm
	mov.b32 %r7668, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7669, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7670, %r7545, %r7668;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7673, %r7670, %r7669;
	// end inline asm
	// begin inline asm
	mov.b32 %r7679, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7677, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7678, %r7679, %r7677;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7681, %r7553, %r7678;
	// end inline asm
	// begin inline asm
	mov.b32 %r7684, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7685, %r7679, %r7684;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7688, %r7561, %r7685;
	// end inline asm
	// begin inline asm
	mov.b32 %r7691, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7692, %r7679, %r7691;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7695, %r7569, %r7692;
	// end inline asm
	// begin inline asm
	mov.b32 %r7698, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7699, %r7679, %r7698;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7702, %r7577, %r7699;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7705, %r7681, %r7695, %r2320;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7709, %r7688, %r7702, %r2320;
	// end inline asm
	shl.b32 	%r7716, %r7709, 4;
	// begin inline asm
	lop3.b32 %r7713, %r2326, %r7705, %r7716, 202;
	// end inline asm
	xor.b32  	%r7896, %r7713, -2004318072;
	// begin inline asm
	mov.b32 %r7720, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7718, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7719, %r7720, %r7718;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7722, %r7585, %r7719;
	// end inline asm
	// begin inline asm
	mov.b32 %r7725, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7726, %r7720, %r7725;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7729, %r7593, %r7726;
	// end inline asm
	// begin inline asm
	mov.b32 %r7732, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7733, %r7720, %r7732;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7736, %r7601, %r7733;
	// end inline asm
	// begin inline asm
	mov.b32 %r7739, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7740, %r7720, %r7739;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7743, %r7609, %r7740;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7746, %r7722, %r7736, %r2320;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7750, %r7729, %r7743, %r2320;
	// end inline asm
	shl.b32 	%r7757, %r7750, 4;
	// begin inline asm
	lop3.b32 %r7754, %r2326, %r7746, %r7757, 202;
	// end inline asm
	xor.b32  	%r7897, %r7754, -2004318072;
	// begin inline asm
	mov.b32 %r7761, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7759, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7760, %r7761, %r7759;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7763, %r7617, %r7760;
	// end inline asm
	// begin inline asm
	mov.b32 %r7766, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7767, %r7761, %r7766;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7770, %r7625, %r7767;
	// end inline asm
	// begin inline asm
	mov.b32 %r7773, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7774, %r7761, %r7773;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7777, %r7633, %r7774;
	// end inline asm
	// begin inline asm
	mov.b32 %r7780, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7781, %r7761, %r7780;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7784, %r7641, %r7781;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7787, %r7763, %r7777, %r2320;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7791, %r7770, %r7784, %r2320;
	// end inline asm
	shl.b32 	%r7798, %r7791, 4;
	// begin inline asm
	lop3.b32 %r7795, %r2326, %r7787, %r7798, 202;
	// end inline asm
	xor.b32  	%r7898, %r7795, -2004318072;
	// begin inline asm
	mov.b32 %r7802, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7800, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7801, %r7802, %r7800;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7804, %r7649, %r7801;
	// end inline asm
	// begin inline asm
	mov.b32 %r7807, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7808, %r7802, %r7807;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7811, %r7657, %r7808;
	// end inline asm
	// begin inline asm
	mov.b32 %r7814, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7815, %r7802, %r7814;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7818, %r7665, %r7815;
	// end inline asm
	// begin inline asm
	mov.b32 %r7821, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7822, %r7802, %r7821;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7825, %r7673, %r7822;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7828, %r7804, %r7818, %r2320;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7832, %r7811, %r7825, %r2320;
	// end inline asm
	shl.b32 	%r7839, %r7832, 4;
	// begin inline asm
	lop3.b32 %r7836, %r2326, %r7828, %r7839, 202;
	// end inline asm
	xor.b32  	%r7899, %r7836, -2004318072;
	st.shared.u32 	[%rd187], %r7896;
	st.shared.u32 	[%rd188], %r7897;
	st.shared.u32 	[%rd189], %r7898;
	st.shared.u32 	[%rd190], %r7899;
	add.s32 	%r8027, %r8027, 64;
	add.s64 	%rd190, %rd190, 8324;
	add.s64 	%rd189, %rd189, 8324;
	add.s64 	%rd188, %rd188, 8324;
	add.s64 	%rd187, %rd187, 8324;
	setp.eq.s32 	%p238, %r8027, 256;
	@%p238 bra 	$L__BB0_131;
	bra.uni 	$L__BB0_130;
$L__BB0_131:                            // %guard_exit16936
                                        //   in Loop: Header=BB0_129 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r7905, [%rd5];
	ld.shared.u32 	%r7906, [%rd6+128];
	ld.shared.u32 	%r7913, [%rd6+4];
	ld.shared.u32 	%r7914, [%rd6+132];
	ld.shared.u32 	%r7921, [%rd5+8324];
	ld.shared.u32 	%r7922, [%rd6+8452];
	ld.shared.u32 	%r7929, [%rd6+8328];
	ld.shared.u32 	%r7930, [%rd6+8456];
	ld.shared.u32 	%r7937, [%rd5+16648];
	ld.shared.u32 	%r7938, [%rd6+16776];
	ld.shared.u32 	%r7945, [%rd6+16652];
	ld.shared.u32 	%r7946, [%rd6+16780];
	ld.shared.u32 	%r7953, [%rd5+24972];
	ld.shared.u32 	%r7954, [%rd6+25100];
	ld.shared.u32 	%r7961, [%rd6+24976];
	ld.shared.u32 	%r7962, [%rd6+25104];
	// begin inline asm
	prmt.b32 %r7900, %r7905, %r7906, %r571;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7904, %r7905, %r7906, %r575;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7908, %r7913, %r7914, %r571;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7912, %r7913, %r7914, %r575;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7916, %r7921, %r7922, %r571;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7920, %r7921, %r7922, %r575;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7924, %r7929, %r7930, %r571;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7928, %r7929, %r7930, %r575;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7932, %r7937, %r7938, %r571;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7936, %r7937, %r7938, %r575;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7940, %r7945, %r7946, %r571;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7944, %r7945, %r7946, %r575;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7948, %r7953, %r7954, %r571;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7952, %r7953, %r7954, %r575;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7956, %r7961, %r7962, %r571;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7960, %r7961, %r7962, %r575;
	// end inline asm
	selp.b32 	%r7964, %r7904, %r7900, %p225;
	shfl.sync.bfly.b32	%r169, %r7964, 8, 31, -1;
	selp.b32 	%r7965, %r7912, %r7908, %p225;
	shfl.sync.bfly.b32	%r170, %r7965, 8, 31, -1;
	selp.b32 	%r7966, %r7920, %r7916, %p225;
	shfl.sync.bfly.b32	%r7967, %r7966, 8, 31, -1;
	selp.b32 	%r7968, %r7928, %r7924, %p225;
	shfl.sync.bfly.b32	%r7969, %r7968, 8, 31, -1;
	selp.b32 	%r7970, %r7936, %r7932, %p225;
	shfl.sync.bfly.b32	%r7971, %r7970, 8, 31, -1;
	selp.b32 	%r7972, %r7944, %r7940, %p225;
	shfl.sync.bfly.b32	%r7973, %r7972, 8, 31, -1;
	selp.b32 	%r7974, %r7952, %r7948, %p225;
	shfl.sync.bfly.b32	%r7975, %r7974, 8, 31, -1;
	selp.b32 	%r7976, %r7960, %r7956, %p225;
	shfl.sync.bfly.b32	%r7977, %r7976, 8, 31, -1;
	and.b32  	%r183, %r109, 256;
	setp.eq.s32 	%p240, %r183, 0;
	shl.b32 	%r8040, %r109, 12;
	@%p240 bra 	$L__BB0_148;
// %bb.132:                             // %pass16148
                                        //   in Loop: Header=BB0_129 Depth=1
	selp.b32 	%r7978, %r170, %r7912, %p225;
	selp.b32 	%r7979, %r7908, %r170, %p225;
	selp.b32 	%r7980, %r169, %r7904, %p225;
	selp.b32 	%r7981, %r7900, %r169, %p225;
	or.b32  	%r7983, %r96, %r8040;
	cvt.s64.s32 	%rd137, %r7983;
	add.s64 	%rd138, %rd137, %rd7;
	shr.u64 	%rd139, %rd138, 39;
	add.s64 	%rd140, %rd138, %rd139;
	shr.s64 	%rd141, %rd140, 25;
	setp.lt.s64 	%p242, %rd138, 0;
	and.b64  	%rd142, %rd140, -33554432;
	setp.ne.s64 	%p243, %rd142, %rd138;
	and.pred  	%p244, %p242, %p243;
	selp.u64 	%rd143, 1, 0, %p244;
	sub.s64 	%rd144, %rd143, %rd141;
	shl.b64 	%rd145, %rd144, 25;
	add.s64 	%rd146, %rd145, %rd138;
	shl.b64 	%rd147, %rd146, 2;
	add.s64 	%rd148, %rd3, %rd147;
	st.global.v4.u32 	[%rd148], {%r7981, %r7979, %r7980, %r7978};
$L__BB0_148:                            // %pass16156
                                        //   in Loop: Header=BB0_129 Depth=1
	or.b32  	%r7984, %r183, 64;
	setp.gt.u32 	%p245, %r7984, 191;
	@%p245 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_150;
$L__BB0_149:                            // %pass16241
                                        //   in Loop: Header=BB0_129 Depth=1
	selp.b32 	%r171, %r7916, %r7967, %p225;
	selp.b32 	%r172, %r7967, %r7920, %p225;
	selp.b32 	%r173, %r7924, %r7969, %p225;
	selp.b32 	%r174, %r7969, %r7928, %p225;
	or.b32  	%r7985, %r8040, %r96;
	or.b32  	%r7986, %r7985, 262144;
	cvt.s64.s32 	%rd149, %r7986;
	add.s64 	%rd150, %rd149, %rd7;
	shr.u64 	%rd151, %rd150, 39;
	add.s64 	%rd152, %rd150, %rd151;
	shr.s64 	%rd153, %rd152, 25;
	setp.lt.s64 	%p246, %rd150, 0;
	and.b64  	%rd154, %rd152, -33554432;
	setp.ne.s64 	%p247, %rd154, %rd150;
	and.pred  	%p248, %p246, %p247;
	selp.u64 	%rd155, 1, 0, %p248;
	sub.s64 	%rd156, %rd155, %rd153;
	shl.b64 	%rd157, %rd156, 25;
	add.s64 	%rd158, %rd157, %rd150;
	shl.b64 	%rd159, %rd158, 2;
	add.s64 	%rd160, %rd3, %rd159;
	st.global.v4.u32 	[%rd160], {%r171, %r173, %r172, %r174};
$L__BB0_150:                            // %pass16249
                                        //   in Loop: Header=BB0_129 Depth=1
	selp.b32 	%r179, %r7948, %r7975, %p225;
	selp.b32 	%r180, %r7975, %r7952, %p225;
	selp.b32 	%r181, %r7956, %r7977, %p225;
	selp.b32 	%r182, %r7977, %r7960, %p225;
	or.b32  	%r7987, %r183, 128;
	setp.lt.u32 	%p249, %r7987, 192;
	or.b32  	%r7997, %r8040, %r96;
	@%p249 bra 	$L__BB0_152;
// %bb.151:                             // %pass16334
                                        //   in Loop: Header=BB0_129 Depth=1
	selp.b32 	%r175, %r7932, %r7971, %p225;
	selp.b32 	%r176, %r7971, %r7936, %p225;
	selp.b32 	%r177, %r7940, %r7973, %p225;
	selp.b32 	%r178, %r7973, %r7944, %p225;
	or.b32  	%r7989, %r7997, 524288;
	cvt.s64.s32 	%rd161, %r7989;
	add.s64 	%rd162, %rd161, %rd7;
	shr.u64 	%rd163, %rd162, 39;
	add.s64 	%rd164, %rd162, %rd163;
	shr.s64 	%rd165, %rd164, 25;
	setp.lt.s64 	%p250, %rd162, 0;
	and.b64  	%rd166, %rd164, -33554432;
	setp.ne.s64 	%p251, %rd166, %rd162;
	and.pred  	%p252, %p250, %p251;
	selp.u64 	%rd167, 1, 0, %p252;
	sub.s64 	%rd168, %rd167, %rd165;
	shl.b64 	%rd169, %rd168, 25;
	add.s64 	%rd170, %rd169, %rd162;
	shl.b64 	%rd171, %rd170, 2;
	add.s64 	%rd172, %rd3, %rd171;
	st.global.v4.u32 	[%rd172], {%r175, %r177, %r176, %r178};
	bra.uni 	$L__BB0_152;
$L__BB0_153:                            // %L38264
	st.global.u32 	[%rd4], %r7995;
	ret;
$L__BB0_7:                              // %L246
	mov.u32 	%r7994, 2;
	st.global.u32 	[%rd4], %r7994;
	mov.u64 	%rd185, exception3325;
	cvta.global.u64 	%rd186, %rd185;
	{ // callseq 16, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd186;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 16
	{ // callseq 17, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd40;
	st.param.b32 	[param0+8], %r184;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 17
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd61, exception1;
	cvta.global.u64 	%rd62, %rd61;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd62;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd40;
	st.param.b32 	[param0+8], %r184;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_53:                             // %L38363
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_11283, 
	(
	);
	} // callseq 3
	mov.u64 	%rd70, exception1;
	cvta.global.u64 	%rd71, %rd70;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd71;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd40;
	st.param.b32 	[param0+8], %r184;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_83:                             // %L38360
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_11283, 
	(
	);
	} // callseq 7
	mov.u64 	%rd76, exception1;
	cvta.global.u64 	%rd77, %rd76;
	{ // callseq 8, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd77;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 8
	{ // callseq 9, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd40;
	st.param.b32 	[param0+8], %r184;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 9
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_98:                             // %L38357
	{ // callseq 13, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_11283, 
	(
	);
	} // callseq 13
	mov.u64 	%rd90, exception1;
	cvta.global.u64 	%rd91, %rd90;
	{ // callseq 14, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd91;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 14
	{ // callseq 15, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd40;
	st.param.b32 	[param0+8], %r184;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 15
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
