// PTX kernel code for the CUDA upchannelizer
// This file has been generated automatically by `upchan.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for upchan64(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception2044[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception12064[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .align 8 .b8 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32],
	.param .align 8 .b8 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<184>;
	.reg .b16 	%rs<265>;
	.reg .b32 	%r<2548>;
	.reg .f32 	%f<721>;
	.reg .b64 	%rd<150>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r108, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd41, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r115, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r115, 33407;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L10
	// begin inline asm
	mov.u32 %r116, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r116, 33407;
	@%p2 bra 	$L__BB0_4;
	bra.uni 	$L__BB0_3;
$L__BB0_4:                              // %L26
	ld.param.u32 	%r109, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	ld.param.u64 	%rd4, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r117, %r2, 9;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r118, %r117, %r1;
	or.b32  	%r119, %r118, %r4;
	mul.wide.u32 	%rd46, %r119, 4;
	add.s64 	%rd5, %rd4, %rd46;
	mov.u32 	%r120, 1;
	st.global.u32 	[%rd5], %r120;
	setp.gt.u32 	%p3, %r109, 32767;
	@%p3 bra 	$L__BB0_9;
// %bb.5:                               // %L133
	ld.param.u32 	%r110, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p4, %r110, %r109;
	setp.gt.s32 	%p5, %r110, 65535;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_9;
// %bb.6:                               // %L140
	ld.param.u32 	%r111, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r121, %r110, %r109;
	and.b32  	%r122, %r121, 255;
	setp.ne.s32 	%p7, %r122, 0;
	setp.gt.u32 	%p8, %r111, 511;
	or.pred  	%p9, %p7, %p8;
	@%p9 bra 	$L__BB0_9;
// %bb.7:                               // %L151
	ld.param.u32 	%r112, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.lt.s32 	%p10, %r112, %r111;
	setp.gt.s32 	%p11, %r112, 1023;
	or.pred  	%p12, %p10, %p11;
	@%p12 bra 	$L__BB0_9;
// %bb.8:                               // %L158
	not.b32 	%r123, %r111;
	add.s32 	%r124, %r123, %r112;
	and.b32  	%r125, %r124, 3;
	setp.eq.s32 	%p13, %r125, 0;
	@%p13 bra 	$L__BB0_10;
	bra.uni 	$L__BB0_9;
$L__BB0_10:                             // %L273
	ld.param.u32 	%r113, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p14, %r113, 0;
	@%p14 bra 	$L__BB0_12;
// %bb.11:                              // %L275
	ld.param.u32 	%r114, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.le.s32 	%p15, %r113, %r114;
	setp.lt.s32 	%p16, %r114, 385;
	and.pred  	%p17, %p15, %p16;
	@%p17 bra 	$L__BB0_13;
	bra.uni 	$L__BB0_12;
$L__BB0_13:                             // %pass188
	bfe.u32 	%r61, %r1, 2, 1;
	shr.u32 	%r62, %r1, 4;
	shl.b32 	%r131, %r62, 1;
	shl.b32 	%r132, %r61, 2;
	shl.b32 	%r63, %r1, 3;
	and.b32  	%r133, %r63, 24;
	or.b32  	%r134, %r132, %r133;
	or.b32  	%r135, %r131, %r134;
	bfe.u32 	%r136, %r1, 3, 1;
	or.b32  	%r65, %r136, %r135;
	shl.b32 	%r66, %r65, 1;
	or.b32  	%r137, %r66, -255;
	cvt.rn.f32.s32 	%f46, %r137;
	mov.f32 	%f47, 0f44008000;
	div.approx.f32 	%f42, %f46, %f47;
	mov.f32 	%f71, 0f00000000;
	mul.f32 	%f44, %f42, 0f40800000;
	setp.neu.f32 	%p23, %f44, 0f00000000;
	mov.f32 	%f720, 0f3F800000;
	mov.f32 	%f713, %f720;
	@%p23 bra 	$L__BB0_14;
	bra.uni 	$L__BB0_15;
$L__BB0_14:                             // %L611
	add.f32 	%f74, %f44, %f44;
	mov.b32 	%r145, %f74;
	and.b32  	%r146, %r145, -2147483648;
	or.b32  	%r147, %r146, 1056964608;
	mov.b32 	%f75, %r147;
	add.f32 	%f76, %f74, %f75;
	cvt.rzi.f32.f32 	%f77, %f76;
	abs.f32 	%f78, %f74;
	setp.gt.f32 	%p24, %f78, 0f4B000000;
	selp.f32 	%f79, %f74, %f77, %p24;
	cvt.rzi.f32.f32 	%f80, %f74;
	setp.lt.f32 	%p25, %f78, 0f3F000000;
	selp.f32 	%f81, %f80, %f79, %p25;
	cvt.rzi.s32.f32 	%r148, %f81;
	fma.rn.f32 	%f82, %f81, 0fBF000000, %f44;
	mul.f32 	%f83, %f82, %f82;
	fma.rn.f32 	%f84, %f83, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f85, %f83, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f86, %f84, %f83, 0fC0A55DF6;
	fma.rn.f32 	%f87, %f85, %f83, 0f4081E0CF;
	fma.rn.f32 	%f88, %f83, %f82, 0f00000000;
	fma.rn.f32 	%f89, %f87, %f83, 0fC09DE9E6;
	fma.rn.f32 	%f90, %f86, %f88, 0f00000000;
	fma.rn.f32 	%f91, %f89, %f83, 0f3F800000;
	fma.rn.f32 	%f92, %f82, 0f40490FDB, %f90;
	and.b32  	%r149, %r148, 1;
	setp.eq.b32 	%p26, %r149, 1;
	selp.f32 	%f93, %f91, %f92, %p26;
	and.b32  	%r150, %r148, 2;
	setp.eq.s32 	%p27, %r150, 0;
	sub.f32 	%f95, %f71, %f93;
	selp.f32 	%f96, %f93, %f95, %p27;
	cvt.rzi.f32.f32 	%f97, %f44;
	setp.eq.f32 	%p28, %f44, %f97;
	mul.f32 	%f98, %f44, 0f00000000;
	selp.f32 	%f99, %f98, %f96, %p28;
	mul.f32 	%f100, %f42, 0f41490FDB;
	div.approx.f32 	%f713, %f99, %f100;
$L__BB0_15:                             // %L615
	or.b32  	%r151, %r66, -191;
	cvt.rn.f32.s32 	%f104, %r151;
	div.approx.f32 	%f4, %f104, %f47;
	mul.f32 	%f6, %f4, 0f40800000;
	setp.eq.f32 	%p34, %f6, 0f00000000;
	mov.f32 	%f714, %f720;
	@%p34 bra 	$L__BB0_17;
// %bb.16:                              // %L629
	add.f32 	%f132, %f6, %f6;
	mov.b32 	%r159, %f132;
	and.b32  	%r160, %r159, -2147483648;
	or.b32  	%r161, %r160, 1056964608;
	mov.b32 	%f133, %r161;
	add.f32 	%f134, %f132, %f133;
	cvt.rzi.f32.f32 	%f135, %f134;
	abs.f32 	%f136, %f132;
	setp.gt.f32 	%p35, %f136, 0f4B000000;
	selp.f32 	%f137, %f132, %f135, %p35;
	cvt.rzi.f32.f32 	%f138, %f132;
	setp.lt.f32 	%p36, %f136, 0f3F000000;
	selp.f32 	%f139, %f138, %f137, %p36;
	cvt.rzi.s32.f32 	%r162, %f139;
	fma.rn.f32 	%f140, %f139, 0fBF000000, %f6;
	mul.f32 	%f141, %f140, %f140;
	fma.rn.f32 	%f142, %f141, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f143, %f141, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f144, %f142, %f141, 0fC0A55DF6;
	fma.rn.f32 	%f145, %f143, %f141, 0f4081E0CF;
	fma.rn.f32 	%f146, %f141, %f140, 0f00000000;
	fma.rn.f32 	%f147, %f145, %f141, 0fC09DE9E6;
	fma.rn.f32 	%f148, %f144, %f146, 0f00000000;
	fma.rn.f32 	%f149, %f147, %f141, 0f3F800000;
	fma.rn.f32 	%f150, %f140, 0f40490FDB, %f148;
	and.b32  	%r163, %r162, 1;
	setp.eq.b32 	%p37, %r163, 1;
	selp.f32 	%f151, %f149, %f150, %p37;
	and.b32  	%r164, %r162, 2;
	setp.eq.s32 	%p38, %r164, 0;
	sub.f32 	%f153, %f71, %f151;
	selp.f32 	%f154, %f151, %f153, %p38;
	cvt.rzi.f32.f32 	%f155, %f6;
	setp.eq.f32 	%p39, %f6, %f155;
	mul.f32 	%f156, %f6, 0f00000000;
	selp.f32 	%f157, %f156, %f154, %p39;
	mul.f32 	%f158, %f4, 0f41490FDB;
	div.approx.f32 	%f714, %f157, %f158;
$L__BB0_17:                             // %L633
	or.b32  	%r168, %r66, -127;
	cvt.rn.f32.s32 	%f163, %r168;
	div.approx.f32 	%f9, %f163, %f47;
	mul.f32 	%f11, %f9, 0f40800000;
	setp.eq.f32 	%p45, %f11, 0f00000000;
	mov.f32 	%f715, %f720;
	@%p45 bra 	$L__BB0_19;
// %bb.18:                              // %L709
	add.f32 	%f191, %f11, %f11;
	mov.b32 	%r176, %f191;
	and.b32  	%r177, %r176, -2147483648;
	or.b32  	%r178, %r177, 1056964608;
	mov.b32 	%f192, %r178;
	add.f32 	%f193, %f191, %f192;
	cvt.rzi.f32.f32 	%f194, %f193;
	abs.f32 	%f195, %f191;
	setp.gt.f32 	%p46, %f195, 0f4B000000;
	selp.f32 	%f196, %f191, %f194, %p46;
	cvt.rzi.f32.f32 	%f197, %f191;
	setp.lt.f32 	%p47, %f195, 0f3F000000;
	selp.f32 	%f198, %f197, %f196, %p47;
	cvt.rzi.s32.f32 	%r179, %f198;
	fma.rn.f32 	%f199, %f198, 0fBF000000, %f11;
	mul.f32 	%f200, %f199, %f199;
	fma.rn.f32 	%f201, %f200, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f202, %f200, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f203, %f201, %f200, 0fC0A55DF6;
	fma.rn.f32 	%f204, %f202, %f200, 0f4081E0CF;
	fma.rn.f32 	%f205, %f200, %f199, 0f00000000;
	fma.rn.f32 	%f206, %f204, %f200, 0fC09DE9E6;
	fma.rn.f32 	%f207, %f203, %f205, 0f00000000;
	fma.rn.f32 	%f208, %f206, %f200, 0f3F800000;
	fma.rn.f32 	%f209, %f199, 0f40490FDB, %f207;
	and.b32  	%r180, %r179, 1;
	setp.eq.b32 	%p48, %r180, 1;
	selp.f32 	%f210, %f208, %f209, %p48;
	and.b32  	%r181, %r179, 2;
	setp.eq.s32 	%p49, %r181, 0;
	sub.f32 	%f212, %f71, %f210;
	selp.f32 	%f213, %f210, %f212, %p49;
	cvt.rzi.f32.f32 	%f214, %f11;
	setp.eq.f32 	%p50, %f11, %f214;
	mul.f32 	%f215, %f11, 0f00000000;
	selp.f32 	%f216, %f215, %f213, %p50;
	mul.f32 	%f217, %f9, 0f41490FDB;
	div.approx.f32 	%f715, %f216, %f217;
$L__BB0_19:                             // %L713
	or.b32  	%r182, %r66, -63;
	cvt.rn.f32.s32 	%f221, %r182;
	div.approx.f32 	%f15, %f221, %f47;
	mul.f32 	%f17, %f15, 0f40800000;
	setp.eq.f32 	%p56, %f17, 0f00000000;
	mov.f32 	%f716, %f720;
	@%p56 bra 	$L__BB0_21;
// %bb.20:                              // %L727
	add.f32 	%f249, %f17, %f17;
	mov.b32 	%r190, %f249;
	and.b32  	%r191, %r190, -2147483648;
	or.b32  	%r192, %r191, 1056964608;
	mov.b32 	%f250, %r192;
	add.f32 	%f251, %f249, %f250;
	cvt.rzi.f32.f32 	%f252, %f251;
	abs.f32 	%f253, %f249;
	setp.gt.f32 	%p57, %f253, 0f4B000000;
	selp.f32 	%f254, %f249, %f252, %p57;
	cvt.rzi.f32.f32 	%f255, %f249;
	setp.lt.f32 	%p58, %f253, 0f3F000000;
	selp.f32 	%f256, %f255, %f254, %p58;
	cvt.rzi.s32.f32 	%r193, %f256;
	fma.rn.f32 	%f257, %f256, 0fBF000000, %f17;
	mul.f32 	%f258, %f257, %f257;
	fma.rn.f32 	%f259, %f258, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f260, %f258, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f261, %f259, %f258, 0fC0A55DF6;
	fma.rn.f32 	%f262, %f260, %f258, 0f4081E0CF;
	fma.rn.f32 	%f263, %f258, %f257, 0f00000000;
	fma.rn.f32 	%f264, %f262, %f258, 0fC09DE9E6;
	fma.rn.f32 	%f265, %f261, %f263, 0f00000000;
	fma.rn.f32 	%f266, %f264, %f258, 0f3F800000;
	fma.rn.f32 	%f267, %f257, 0f40490FDB, %f265;
	and.b32  	%r194, %r193, 1;
	setp.eq.b32 	%p59, %r194, 1;
	selp.f32 	%f268, %f266, %f267, %p59;
	and.b32  	%r195, %r193, 2;
	setp.eq.s32 	%p60, %r195, 0;
	sub.f32 	%f270, %f71, %f268;
	selp.f32 	%f271, %f268, %f270, %p60;
	cvt.rzi.f32.f32 	%f272, %f17;
	setp.eq.f32 	%p61, %f17, %f272;
	mul.f32 	%f273, %f17, 0f00000000;
	selp.f32 	%f274, %f273, %f271, %p61;
	mul.f32 	%f275, %f15, 0f41490FDB;
	div.approx.f32 	%f716, %f274, %f275;
$L__BB0_21:                             // %L731
	or.b32  	%r199, %r66, 1;
	cvt.rn.f32.s32 	%f280, %r199;
	div.approx.f32 	%f20, %f280, %f47;
	mul.f32 	%f22, %f20, 0f40800000;
	setp.eq.f32 	%p67, %f22, 0f00000000;
	mov.f32 	%f717, %f720;
	@%p67 bra 	$L__BB0_23;
// %bb.22:                              // %L807
	add.f32 	%f308, %f22, %f22;
	mov.b32 	%r207, %f308;
	and.b32  	%r208, %r207, -2147483648;
	or.b32  	%r209, %r208, 1056964608;
	mov.b32 	%f309, %r209;
	add.f32 	%f310, %f308, %f309;
	cvt.rzi.f32.f32 	%f311, %f310;
	abs.f32 	%f312, %f308;
	setp.gt.f32 	%p68, %f312, 0f4B000000;
	selp.f32 	%f313, %f308, %f311, %p68;
	cvt.rzi.f32.f32 	%f314, %f308;
	setp.lt.f32 	%p69, %f312, 0f3F000000;
	selp.f32 	%f315, %f314, %f313, %p69;
	cvt.rzi.s32.f32 	%r210, %f315;
	fma.rn.f32 	%f316, %f315, 0fBF000000, %f22;
	mul.f32 	%f317, %f316, %f316;
	fma.rn.f32 	%f318, %f317, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f319, %f317, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f320, %f318, %f317, 0fC0A55DF6;
	fma.rn.f32 	%f321, %f319, %f317, 0f4081E0CF;
	fma.rn.f32 	%f322, %f317, %f316, 0f00000000;
	fma.rn.f32 	%f323, %f321, %f317, 0fC09DE9E6;
	fma.rn.f32 	%f324, %f320, %f322, 0f00000000;
	fma.rn.f32 	%f325, %f323, %f317, 0f3F800000;
	fma.rn.f32 	%f326, %f316, 0f40490FDB, %f324;
	and.b32  	%r211, %r210, 1;
	setp.eq.b32 	%p70, %r211, 1;
	selp.f32 	%f327, %f325, %f326, %p70;
	and.b32  	%r212, %r210, 2;
	setp.eq.s32 	%p71, %r212, 0;
	sub.f32 	%f329, %f71, %f327;
	selp.f32 	%f330, %f327, %f329, %p71;
	cvt.rzi.f32.f32 	%f331, %f22;
	setp.eq.f32 	%p72, %f22, %f331;
	mul.f32 	%f332, %f22, 0f00000000;
	selp.f32 	%f333, %f332, %f330, %p72;
	mul.f32 	%f334, %f20, 0f41490FDB;
	div.approx.f32 	%f717, %f333, %f334;
$L__BB0_23:                             // %L811
	or.b32  	%r213, %r66, 65;
	cvt.rn.f32.s32 	%f338, %r213;
	div.approx.f32 	%f26, %f338, %f47;
	mul.f32 	%f28, %f26, 0f40800000;
	setp.eq.f32 	%p78, %f28, 0f00000000;
	mov.f32 	%f718, %f720;
	@%p78 bra 	$L__BB0_25;
// %bb.24:                              // %L825
	add.f32 	%f366, %f28, %f28;
	mov.b32 	%r221, %f366;
	and.b32  	%r222, %r221, -2147483648;
	or.b32  	%r223, %r222, 1056964608;
	mov.b32 	%f367, %r223;
	add.f32 	%f368, %f366, %f367;
	cvt.rzi.f32.f32 	%f369, %f368;
	abs.f32 	%f370, %f366;
	setp.gt.f32 	%p79, %f370, 0f4B000000;
	selp.f32 	%f371, %f366, %f369, %p79;
	cvt.rzi.f32.f32 	%f372, %f366;
	setp.lt.f32 	%p80, %f370, 0f3F000000;
	selp.f32 	%f373, %f372, %f371, %p80;
	cvt.rzi.s32.f32 	%r224, %f373;
	fma.rn.f32 	%f374, %f373, 0fBF000000, %f28;
	mul.f32 	%f375, %f374, %f374;
	fma.rn.f32 	%f376, %f375, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f377, %f375, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f378, %f376, %f375, 0fC0A55DF6;
	fma.rn.f32 	%f379, %f377, %f375, 0f4081E0CF;
	fma.rn.f32 	%f380, %f375, %f374, 0f00000000;
	fma.rn.f32 	%f381, %f379, %f375, 0fC09DE9E6;
	fma.rn.f32 	%f382, %f378, %f380, 0f00000000;
	fma.rn.f32 	%f383, %f381, %f375, 0f3F800000;
	fma.rn.f32 	%f384, %f374, 0f40490FDB, %f382;
	and.b32  	%r225, %r224, 1;
	setp.eq.b32 	%p81, %r225, 1;
	selp.f32 	%f385, %f383, %f384, %p81;
	and.b32  	%r226, %r224, 2;
	setp.eq.s32 	%p82, %r226, 0;
	sub.f32 	%f387, %f71, %f385;
	selp.f32 	%f388, %f385, %f387, %p82;
	cvt.rzi.f32.f32 	%f389, %f28;
	setp.eq.f32 	%p83, %f28, %f389;
	mul.f32 	%f390, %f28, 0f00000000;
	selp.f32 	%f391, %f390, %f388, %p83;
	mul.f32 	%f392, %f26, 0f41490FDB;
	div.approx.f32 	%f718, %f391, %f392;
$L__BB0_25:                             // %L829
	or.b32  	%r230, %r66, 129;
	cvt.rn.f32.s32 	%f397, %r230;
	div.approx.f32 	%f31, %f397, %f47;
	mul.f32 	%f33, %f31, 0f40800000;
	setp.eq.f32 	%p89, %f33, 0f00000000;
	mov.f32 	%f719, %f720;
	@%p89 bra 	$L__BB0_27;
// %bb.26:                              // %L905
	add.f32 	%f425, %f33, %f33;
	mov.b32 	%r238, %f425;
	and.b32  	%r239, %r238, -2147483648;
	or.b32  	%r240, %r239, 1056964608;
	mov.b32 	%f426, %r240;
	add.f32 	%f427, %f425, %f426;
	cvt.rzi.f32.f32 	%f428, %f427;
	abs.f32 	%f429, %f425;
	setp.gt.f32 	%p90, %f429, 0f4B000000;
	selp.f32 	%f430, %f425, %f428, %p90;
	cvt.rzi.f32.f32 	%f431, %f425;
	setp.lt.f32 	%p91, %f429, 0f3F000000;
	selp.f32 	%f432, %f431, %f430, %p91;
	cvt.rzi.s32.f32 	%r241, %f432;
	fma.rn.f32 	%f433, %f432, 0fBF000000, %f33;
	mul.f32 	%f434, %f433, %f433;
	fma.rn.f32 	%f435, %f434, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f436, %f434, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f437, %f435, %f434, 0fC0A55DF6;
	fma.rn.f32 	%f438, %f436, %f434, 0f4081E0CF;
	fma.rn.f32 	%f439, %f434, %f433, 0f00000000;
	fma.rn.f32 	%f440, %f438, %f434, 0fC09DE9E6;
	fma.rn.f32 	%f441, %f437, %f439, 0f00000000;
	fma.rn.f32 	%f442, %f440, %f434, 0f3F800000;
	fma.rn.f32 	%f443, %f433, 0f40490FDB, %f441;
	and.b32  	%r242, %r241, 1;
	setp.eq.b32 	%p92, %r242, 1;
	selp.f32 	%f444, %f442, %f443, %p92;
	and.b32  	%r243, %r241, 2;
	setp.eq.s32 	%p93, %r243, 0;
	sub.f32 	%f446, %f71, %f444;
	selp.f32 	%f447, %f444, %f446, %p93;
	cvt.rzi.f32.f32 	%f448, %f33;
	setp.eq.f32 	%p94, %f33, %f448;
	mul.f32 	%f449, %f33, 0f00000000;
	selp.f32 	%f450, %f449, %f447, %p94;
	mul.f32 	%f451, %f31, 0f41490FDB;
	div.approx.f32 	%f719, %f450, %f451;
$L__BB0_27:                             // %L909
	or.b32  	%r244, %r66, 193;
	cvt.rn.f32.s32 	%f455, %r244;
	div.approx.f32 	%f37, %f455, %f47;
	mul.f32 	%f39, %f37, 0f40800000;
	setp.eq.f32 	%p100, %f39, 0f00000000;
	@%p100 bra 	$L__BB0_29;
// %bb.28:                              // %L923
	add.f32 	%f483, %f39, %f39;
	mov.b32 	%r252, %f483;
	and.b32  	%r253, %r252, -2147483648;
	or.b32  	%r254, %r253, 1056964608;
	mov.b32 	%f484, %r254;
	add.f32 	%f485, %f483, %f484;
	cvt.rzi.f32.f32 	%f486, %f485;
	abs.f32 	%f487, %f483;
	setp.gt.f32 	%p101, %f487, 0f4B000000;
	selp.f32 	%f488, %f483, %f486, %p101;
	cvt.rzi.f32.f32 	%f489, %f483;
	setp.lt.f32 	%p102, %f487, 0f3F000000;
	selp.f32 	%f490, %f489, %f488, %p102;
	cvt.rzi.s32.f32 	%r255, %f490;
	fma.rn.f32 	%f491, %f490, 0fBF000000, %f39;
	mul.f32 	%f492, %f491, %f491;
	fma.rn.f32 	%f493, %f492, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f494, %f492, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f495, %f493, %f492, 0fC0A55DF6;
	fma.rn.f32 	%f496, %f494, %f492, 0f4081E0CF;
	fma.rn.f32 	%f497, %f492, %f491, 0f00000000;
	fma.rn.f32 	%f498, %f496, %f492, 0fC09DE9E6;
	fma.rn.f32 	%f499, %f495, %f497, 0f00000000;
	fma.rn.f32 	%f500, %f498, %f492, 0f3F800000;
	fma.rn.f32 	%f501, %f491, 0f40490FDB, %f499;
	and.b32  	%r256, %r255, 1;
	setp.eq.b32 	%p103, %r256, 1;
	selp.f32 	%f502, %f500, %f501, %p103;
	and.b32  	%r257, %r255, 2;
	setp.eq.s32 	%p104, %r257, 0;
	sub.f32 	%f504, %f71, %f502;
	selp.f32 	%f505, %f502, %f504, %p104;
	cvt.rzi.f32.f32 	%f506, %f39;
	setp.eq.f32 	%p105, %f39, %f506;
	mul.f32 	%f507, %f39, 0f00000000;
	selp.f32 	%f508, %f507, %f505, %p105;
	mul.f32 	%f509, %f37, 0f41490FDB;
	div.approx.f32 	%f720, %f508, %f509;
$L__BB0_29:                             // %L927
	setp.le.s32 	%p148, %r110, %r109;
	mov.u32 	%r2519, 0;
	@%p148 bra 	$L__BB0_40;
// %bb.30:                              // %L1522.lr.ph
	abs.f32 	%f48, %f42;
	abs.f32 	%f106, %f4;
	abs.f32 	%f165, %f9;
	abs.f32 	%f223, %f15;
	abs.f32 	%f282, %f20;
	abs.f32 	%f340, %f26;
	setp.gt.f32 	%p18, %f48, 0f4B800000;
	mul.f32 	%f49, %f42, 0f00000000;
	setp.gt.f32 	%p29, %f106, 0f4B800000;
	mul.f32 	%f107, %f4, 0f00000000;
	setp.gt.f32 	%p40, %f165, 0f4B800000;
	mul.f32 	%f166, %f9, 0f00000000;
	setp.gt.f32 	%p51, %f223, 0f4B800000;
	mul.f32 	%f224, %f15, 0f00000000;
	setp.gt.f32 	%p62, %f282, 0f4B800000;
	mul.f32 	%f283, %f20, 0f00000000;
	setp.gt.f32 	%p73, %f340, 0f4B800000;
	mul.f32 	%f341, %f26, 0f00000000;
	abs.f32 	%f399, %f31;
	selp.f32 	%f50, %f49, %f42, %p18;
	selp.f32 	%f108, %f107, %f4, %p29;
	selp.f32 	%f167, %f166, %f9, %p40;
	selp.f32 	%f225, %f224, %f15, %p51;
	selp.f32 	%f284, %f283, %f20, %p62;
	selp.f32 	%f342, %f341, %f26, %p73;
	setp.gt.f32 	%p84, %f399, 0f4B800000;
	mul.f32 	%f400, %f31, 0f00000000;
	add.f32 	%f51, %f50, %f50;
	add.f32 	%f109, %f108, %f108;
	add.f32 	%f168, %f167, %f167;
	add.f32 	%f226, %f225, %f225;
	add.f32 	%f285, %f284, %f284;
	add.f32 	%f343, %f342, %f342;
	selp.f32 	%f401, %f400, %f31, %p84;
	abs.f32 	%f457, %f37;
	mov.b32 	%r138, %f51;
	mov.b32 	%r152, %f109;
	mov.b32 	%r169, %f168;
	mov.b32 	%r183, %f226;
	mov.b32 	%r200, %f285;
	mov.b32 	%r214, %f343;
	add.f32 	%f402, %f401, %f401;
	setp.gt.f32 	%p95, %f457, 0f4B800000;
	mul.f32 	%f458, %f37, 0f00000000;
	and.b32  	%r139, %r138, -2147483648;
	and.b32  	%r153, %r152, -2147483648;
	and.b32  	%r170, %r169, -2147483648;
	and.b32  	%r184, %r183, -2147483648;
	and.b32  	%r201, %r200, -2147483648;
	and.b32  	%r215, %r214, -2147483648;
	mov.b32 	%r231, %f402;
	selp.f32 	%f459, %f458, %f37, %p95;
	or.b32  	%r140, %r139, 1056964608;
	or.b32  	%r154, %r153, 1056964608;
	or.b32  	%r171, %r170, 1056964608;
	or.b32  	%r185, %r184, 1056964608;
	or.b32  	%r202, %r201, 1056964608;
	or.b32  	%r216, %r215, 1056964608;
	and.b32  	%r232, %r231, -2147483648;
	add.f32 	%f460, %f459, %f459;
	mov.b32 	%f52, %r140;
	mov.b32 	%f110, %r154;
	mov.b32 	%f169, %r171;
	mov.b32 	%f227, %r185;
	mov.b32 	%f286, %r202;
	mov.b32 	%f344, %r216;
	or.b32  	%r233, %r232, 1056964608;
	mov.b32 	%r245, %f460;
	add.f32 	%f53, %f51, %f52;
	abs.f32 	%f55, %f51;
	add.f32 	%f111, %f109, %f110;
	abs.f32 	%f113, %f109;
	add.f32 	%f170, %f168, %f169;
	abs.f32 	%f172, %f168;
	add.f32 	%f228, %f226, %f227;
	abs.f32 	%f230, %f226;
	add.f32 	%f287, %f285, %f286;
	abs.f32 	%f289, %f285;
	add.f32 	%f345, %f343, %f344;
	abs.f32 	%f347, %f343;
	mov.b32 	%f403, %r233;
	and.b32  	%r246, %r245, -2147483648;
	cvt.rzi.f32.f32 	%f54, %f53;
	setp.gt.f32 	%p19, %f55, 0f4B000000;
	cvt.rzi.f32.f32 	%f112, %f111;
	setp.gt.f32 	%p30, %f113, 0f4B000000;
	cvt.rzi.f32.f32 	%f171, %f170;
	setp.gt.f32 	%p41, %f172, 0f4B000000;
	cvt.rzi.f32.f32 	%f229, %f228;
	setp.gt.f32 	%p52, %f230, 0f4B000000;
	cvt.rzi.f32.f32 	%f288, %f287;
	setp.gt.f32 	%p63, %f289, 0f4B000000;
	cvt.rzi.f32.f32 	%f346, %f345;
	setp.gt.f32 	%p74, %f347, 0f4B000000;
	add.f32 	%f404, %f402, %f403;
	abs.f32 	%f406, %f402;
	or.b32  	%r247, %r246, 1056964608;
	selp.f32 	%f56, %f51, %f54, %p19;
	cvt.rzi.f32.f32 	%f57, %f51;
	setp.lt.f32 	%p20, %f55, 0f3F000000;
	selp.f32 	%f114, %f109, %f112, %p30;
	cvt.rzi.f32.f32 	%f115, %f109;
	setp.lt.f32 	%p31, %f113, 0f3F000000;
	selp.f32 	%f173, %f168, %f171, %p41;
	cvt.rzi.f32.f32 	%f174, %f168;
	setp.lt.f32 	%p42, %f172, 0f3F000000;
	selp.f32 	%f231, %f226, %f229, %p52;
	cvt.rzi.f32.f32 	%f232, %f226;
	setp.lt.f32 	%p53, %f230, 0f3F000000;
	selp.f32 	%f290, %f285, %f288, %p63;
	cvt.rzi.f32.f32 	%f291, %f285;
	setp.lt.f32 	%p64, %f289, 0f3F000000;
	selp.f32 	%f348, %f343, %f346, %p74;
	cvt.rzi.f32.f32 	%f349, %f343;
	setp.lt.f32 	%p75, %f347, 0f3F000000;
	cvt.rzi.f32.f32 	%f405, %f404;
	setp.gt.f32 	%p85, %f406, 0f4B000000;
	mov.b32 	%f461, %r247;
	selp.f32 	%f58, %f57, %f56, %p20;
	selp.f32 	%f116, %f115, %f114, %p31;
	selp.f32 	%f175, %f174, %f173, %p42;
	selp.f32 	%f233, %f232, %f231, %p53;
	selp.f32 	%f292, %f291, %f290, %p64;
	selp.f32 	%f350, %f349, %f348, %p75;
	selp.f32 	%f407, %f402, %f405, %p85;
	cvt.rzi.f32.f32 	%f408, %f402;
	setp.lt.f32 	%p86, %f406, 0f3F000000;
	add.f32 	%f462, %f460, %f461;
	abs.f32 	%f464, %f460;
	fma.rn.f32 	%f59, %f58, 0fBF000000, %f50;
	fma.rn.f32 	%f117, %f116, 0fBF000000, %f108;
	fma.rn.f32 	%f176, %f175, 0fBF000000, %f167;
	fma.rn.f32 	%f234, %f233, 0fBF000000, %f225;
	fma.rn.f32 	%f293, %f292, 0fBF000000, %f284;
	fma.rn.f32 	%f351, %f350, 0fBF000000, %f342;
	selp.f32 	%f409, %f408, %f407, %p86;
	cvt.rzi.f32.f32 	%f463, %f462;
	setp.gt.f32 	%p96, %f464, 0f4B000000;
	mul.f32 	%f60, %f59, %f59;
	mul.f32 	%f118, %f117, %f117;
	mul.f32 	%f177, %f176, %f176;
	mul.f32 	%f235, %f234, %f234;
	mul.f32 	%f294, %f293, %f293;
	mul.f32 	%f352, %f351, %f351;
	fma.rn.f32 	%f410, %f409, 0fBF000000, %f401;
	selp.f32 	%f465, %f460, %f463, %p96;
	cvt.rzi.f32.f32 	%f466, %f460;
	setp.lt.f32 	%p97, %f464, 0f3F000000;
	cvt.rzi.s32.f32 	%r141, %f58;
	fma.rn.f32 	%f61, %f60, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f62, %f60, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r155, %f116;
	fma.rn.f32 	%f119, %f118, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f120, %f118, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r172, %f175;
	fma.rn.f32 	%f178, %f177, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f179, %f177, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r186, %f233;
	fma.rn.f32 	%f236, %f235, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f237, %f235, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r203, %f292;
	fma.rn.f32 	%f295, %f294, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f296, %f294, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r217, %f350;
	fma.rn.f32 	%f353, %f352, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f354, %f352, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f411, %f410, %f410;
	selp.f32 	%f467, %f466, %f465, %p97;
	add.s32 	%r142, %r141, 1;
	fma.rn.f32 	%f63, %f61, %f60, 0fC0A55DF6;
	fma.rn.f32 	%f64, %f62, %f60, 0f4081E0CF;
	fma.rn.f32 	%f65, %f60, %f59, 0f00000000;
	add.s32 	%r156, %r155, 1;
	fma.rn.f32 	%f121, %f119, %f118, 0fC0A55DF6;
	fma.rn.f32 	%f122, %f120, %f118, 0f4081E0CF;
	fma.rn.f32 	%f123, %f118, %f117, 0f00000000;
	add.s32 	%r173, %r172, 1;
	fma.rn.f32 	%f180, %f178, %f177, 0fC0A55DF6;
	fma.rn.f32 	%f181, %f179, %f177, 0f4081E0CF;
	fma.rn.f32 	%f182, %f177, %f176, 0f00000000;
	add.s32 	%r187, %r186, 1;
	fma.rn.f32 	%f238, %f236, %f235, 0fC0A55DF6;
	fma.rn.f32 	%f239, %f237, %f235, 0f4081E0CF;
	fma.rn.f32 	%f240, %f235, %f234, 0f00000000;
	add.s32 	%r204, %r203, 1;
	fma.rn.f32 	%f297, %f295, %f294, 0fC0A55DF6;
	fma.rn.f32 	%f298, %f296, %f294, 0f4081E0CF;
	fma.rn.f32 	%f299, %f294, %f293, 0f00000000;
	add.s32 	%r218, %r217, 1;
	fma.rn.f32 	%f355, %f353, %f352, 0fC0A55DF6;
	fma.rn.f32 	%f356, %f354, %f352, 0f4081E0CF;
	fma.rn.f32 	%f357, %f352, %f351, 0f00000000;
	cvt.rzi.s32.f32 	%r234, %f409;
	fma.rn.f32 	%f412, %f411, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f413, %f411, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f468, %f467, 0fBF000000, %f459;
	shl.b32 	%r51, %r1, 2;
	shl.b32 	%r55, %r2, 6;
	and.b32  	%r58, %r1, 18;
	fma.rn.f32 	%f66, %f64, %f60, 0fC09DE9E6;
	fma.rn.f32 	%f67, %f63, %f65, 0f00000000;
	and.b32  	%r143, %r142, 1;
	fma.rn.f32 	%f124, %f122, %f118, 0fC09DE9E6;
	fma.rn.f32 	%f125, %f121, %f123, 0f00000000;
	and.b32  	%r157, %r156, 1;
	fma.rn.f32 	%f183, %f181, %f177, 0fC09DE9E6;
	fma.rn.f32 	%f184, %f180, %f182, 0f00000000;
	and.b32  	%r174, %r173, 1;
	fma.rn.f32 	%f241, %f239, %f235, 0fC09DE9E6;
	fma.rn.f32 	%f242, %f238, %f240, 0f00000000;
	and.b32  	%r188, %r187, 1;
	fma.rn.f32 	%f300, %f298, %f294, 0fC09DE9E6;
	fma.rn.f32 	%f301, %f297, %f299, 0f00000000;
	and.b32  	%r205, %r204, 1;
	fma.rn.f32 	%f358, %f356, %f352, 0fC09DE9E6;
	fma.rn.f32 	%f359, %f355, %f357, 0f00000000;
	and.b32  	%r219, %r218, 1;
	add.s32 	%r235, %r234, 1;
	fma.rn.f32 	%f414, %f412, %f411, 0fC0A55DF6;
	fma.rn.f32 	%f415, %f413, %f411, 0f4081E0CF;
	fma.rn.f32 	%f416, %f411, %f410, 0f00000000;
	mul.f32 	%f469, %f468, %f468;
	and.b32  	%r52, %r51, 32;
	or.b32  	%r126, %r58, %r55;
	fma.rn.f32 	%f68, %f66, %f60, 0f3F800000;
	fma.rn.f32 	%f69, %f59, 0f40490FDB, %f67;
	setp.eq.b32 	%p21, %r143, 1;
	fma.rn.f32 	%f126, %f124, %f118, 0f3F800000;
	fma.rn.f32 	%f127, %f117, 0f40490FDB, %f125;
	setp.eq.b32 	%p32, %r157, 1;
	fma.rn.f32 	%f185, %f183, %f177, 0f3F800000;
	fma.rn.f32 	%f186, %f176, 0f40490FDB, %f184;
	setp.eq.b32 	%p43, %r174, 1;
	fma.rn.f32 	%f243, %f241, %f235, 0f3F800000;
	fma.rn.f32 	%f244, %f234, 0f40490FDB, %f242;
	setp.eq.b32 	%p54, %r188, 1;
	fma.rn.f32 	%f302, %f300, %f294, 0f3F800000;
	fma.rn.f32 	%f303, %f293, 0f40490FDB, %f301;
	setp.eq.b32 	%p65, %r205, 1;
	fma.rn.f32 	%f360, %f358, %f352, 0f3F800000;
	fma.rn.f32 	%f361, %f351, 0f40490FDB, %f359;
	setp.eq.b32 	%p76, %r219, 1;
	fma.rn.f32 	%f417, %f415, %f411, 0fC09DE9E6;
	fma.rn.f32 	%f418, %f414, %f416, 0f00000000;
	and.b32  	%r236, %r235, 1;
	cvt.rzi.s32.f32 	%r248, %f467;
	fma.rn.f32 	%f470, %f469, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f471, %f469, 0f3E684E12, 0fBFAAD2E0;
	and.b32  	%r54, %r51, 4;
	shl.b32 	%r56, %r1, 1;
	or.b32  	%r127, %r126, %r52;
	selp.f32 	%f70, %f68, %f69, %p21;
	and.b32  	%r144, %r142, 2;
	selp.f32 	%f128, %f126, %f127, %p32;
	and.b32  	%r158, %r156, 2;
	selp.f32 	%f187, %f185, %f186, %p43;
	and.b32  	%r175, %r173, 2;
	selp.f32 	%f245, %f243, %f244, %p54;
	and.b32  	%r189, %r187, 2;
	selp.f32 	%f304, %f302, %f303, %p65;
	and.b32  	%r206, %r204, 2;
	selp.f32 	%f362, %f360, %f361, %p76;
	and.b32  	%r220, %r218, 2;
	fma.rn.f32 	%f419, %f417, %f411, 0f3F800000;
	fma.rn.f32 	%f420, %f410, 0f40490FDB, %f418;
	setp.eq.b32 	%p87, %r236, 1;
	add.s32 	%r249, %r248, 1;
	fma.rn.f32 	%f472, %f470, %f469, 0fC0A55DF6;
	fma.rn.f32 	%f473, %f471, %f469, 0f4081E0CF;
	fma.rn.f32 	%f474, %f469, %f468, 0f00000000;
	and.b32  	%r57, %r56, 8;
	or.b32  	%r128, %r127, %r54;
	setp.eq.s32 	%p22, %r144, 0;
	sub.f32 	%f72, %f71, %f70;
	setp.eq.s32 	%p33, %r158, 0;
	sub.f32 	%f130, %f71, %f128;
	setp.eq.s32 	%p44, %r175, 0;
	sub.f32 	%f189, %f71, %f187;
	setp.eq.s32 	%p55, %r189, 0;
	sub.f32 	%f247, %f71, %f245;
	setp.eq.s32 	%p66, %r206, 0;
	sub.f32 	%f306, %f71, %f304;
	setp.eq.s32 	%p77, %r220, 0;
	sub.f32 	%f364, %f71, %f362;
	selp.f32 	%f421, %f419, %f420, %p87;
	and.b32  	%r237, %r235, 2;
	fma.rn.f32 	%f475, %f473, %f469, 0fC09DE9E6;
	fma.rn.f32 	%f476, %f472, %f474, 0f00000000;
	and.b32  	%r250, %r249, 1;
	or.b32  	%r129, %r128, %r57;
	selp.f32 	%f73, %f70, %f72, %p22;
	selp.f32 	%f131, %f128, %f130, %p33;
	selp.f32 	%f190, %f187, %f189, %p44;
	selp.f32 	%f248, %f245, %f247, %p55;
	selp.f32 	%f307, %f304, %f306, %p66;
	selp.f32 	%f365, %f362, %f364, %p77;
	setp.eq.s32 	%p88, %r237, 0;
	sub.f32 	%f423, %f71, %f421;
	fma.rn.f32 	%f477, %f475, %f469, 0f3F800000;
	fma.rn.f32 	%f478, %f468, 0f40490FDB, %f476;
	setp.eq.b32 	%p98, %r250, 1;
	bfe.u32 	%r130, %r129, 1, 10;
	mul.f32 	%f43, %f73, %f73;
	mul.f32 	%f5, %f131, %f131;
	mul.f32 	%f10, %f190, %f190;
	mul.f32 	%f16, %f248, %f248;
	mul.f32 	%f21, %f307, %f307;
	mul.f32 	%f27, %f365, %f365;
	selp.f32 	%f424, %f421, %f423, %p88;
	selp.f32 	%f479, %f477, %f478, %p98;
	and.b32  	%r251, %r249, 2;
	ld.param.u64 	%rd1, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mul.wide.u32 	%rd47, %r130, 4;
	mul.f32 	%f102, %f713, %f43;
	mov.f32 	%f103, 0f42800000;
	mul.f32 	%f160, %f714, %f5;
	mul.f32 	%f219, %f715, %f10;
	mul.f32 	%f277, %f716, %f16;
	mul.f32 	%f336, %f717, %f21;
	mul.f32 	%f394, %f718, %f27;
	mul.f32 	%f32, %f424, %f424;
	setp.eq.s32 	%p99, %r251, 0;
	sub.f32 	%f481, %f71, %f479;
	add.s64 	%rd48, %rd1, %rd47;
	div.approx.f32 	%f3, %f102, %f103;
	div.approx.f32 	%f162, %f160, %f103;
	div.approx.f32 	%f14, %f219, %f103;
	div.approx.f32 	%f279, %f277, %f103;
	div.approx.f32 	%f25, %f336, %f103;
	div.approx.f32 	%f396, %f394, %f103;
	mul.f32 	%f453, %f719, %f32;
	selp.f32 	%f482, %f479, %f481, %p99;
	ld.param.u64 	%rd2, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	ld.param.u64 	%rd3, [_Z8upchan645Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	and.b32  	%r53, %r1, 16;
	ld.global.u32 	%r59, [%rd48];
	shr.u32 	%r60, %r1, 1;
	shr.u32 	%r64, %r1, 3;
	mov.b32 	%r167, %f162;
	mov.b32 	%r166, %f3;
	mov.b32 	%r198, %f279;
	mov.b32 	%r197, %f14;
	mov.b32 	%r229, %f396;
	mov.b32 	%r228, %f25;
	div.approx.f32 	%f36, %f453, %f103;
	mul.f32 	%f38, %f482, %f482;
	// begin inline asm
	cvt.rn.f16x2.f32 %r165, %r167, %r166;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r196, %r198, %r197;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r227, %r229, %r228;
	// end inline asm
	mul.f32 	%f510, %f720, %f38;
	div.approx.f32 	%f512, %f510, %f103;
	mov.b32 	%r260, %f512;
	mov.b32 	%r259, %f36;
	// begin inline asm
	cvt.rn.f16x2.f32 %r258, %r260, %r259;
	// end inline asm
	mul.lo.s32 	%r297, %r65, 63;
	and.b32  	%r298, %r297, 127;
	cvt.rn.f32.s32 	%f513, %r298;
	div.approx.f32 	%f514, %f513, %f103;
	add.f32 	%f515, %f514, %f514;
	mov.b32 	%r299, %f515;
	and.b32  	%r300, %r299, -2147483648;
	or.b32  	%r301, %r300, 1056964608;
	mov.b32 	%f516, %r301;
	add.f32 	%f517, %f515, %f516;
	cvt.rzi.f32.f32 	%f518, %f517;
	abs.f32 	%f519, %f515;
	setp.gt.f32 	%p106, %f519, 0f4B000000;
	selp.f32 	%f520, %f515, %f518, %p106;
	cvt.rzi.f32.f32 	%f521, %f515;
	setp.lt.f32 	%p107, %f519, 0f3F000000;
	selp.f32 	%f522, %f521, %f520, %p107;
	cvt.rzi.s32.f32 	%r302, %f522;
	fma.rn.f32 	%f523, %f522, 0fBF000000, %f514;
	mul.f32 	%f524, %f523, %f523;
	fma.rn.f32 	%f525, %f524, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f526, %f524, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f527, %f525, %f524, 0fC0A55DF6;
	fma.rn.f32 	%f528, %f526, %f524, 0f4081E0CF;
	fma.rn.f32 	%f529, %f524, %f523, 0f00000000;
	fma.rn.f32 	%f530, %f528, %f524, 0fC09DE9E6;
	fma.rn.f32 	%f531, %f527, %f529, 0f00000000;
	fma.rn.f32 	%f532, %f530, %f524, 0f3F800000;
	fma.rn.f32 	%f533, %f523, 0f40490FDB, %f531;
	and.b32  	%r303, %r302, 1;
	setp.eq.b32 	%p108, %r303, 1;
	selp.f32 	%f534, %f532, %f533, %p108;
	selp.f32 	%f535, %f533, %f532, %p108;
	and.b32  	%r304, %r302, 2;
	setp.eq.s32 	%p109, %r304, 0;
	neg.f32 	%f536, %f534;
	selp.f32 	%f537, %f534, %f536, %p109;
	add.s32 	%r305, %r302, 1;
	and.b32  	%r306, %r305, 2;
	setp.eq.s32 	%p110, %r306, 0;
	sub.f32 	%f539, %f71, %f535;
	selp.f32 	%f540, %f535, %f539, %p110;
	cvt.rzi.f32.f32 	%f541, %f514;
	setp.eq.f32 	%p111, %f541, %f514;
	mul.f32 	%f542, %f514, 0f00000000;
	selp.f32 	%f543, %f542, %f537, %p111;
	abs.f32 	%f544, %f514;
	setp.gt.f32 	%p112, %f544, 0f4B800000;
	add.f32 	%f545, %f543, 0f3F800000;
	selp.f32 	%f546, %f545, %f540, %p112;
	add.s32 	%r307, %r297, 96;
	and.b32  	%r308, %r307, 127;
	cvt.rn.f32.s32 	%f547, %r308;
	div.approx.f32 	%f548, %f547, %f103;
	add.f32 	%f549, %f548, %f548;
	mov.b32 	%r309, %f549;
	and.b32  	%r310, %r309, -2147483648;
	or.b32  	%r311, %r310, 1056964608;
	mov.b32 	%f550, %r311;
	add.f32 	%f551, %f549, %f550;
	cvt.rzi.f32.f32 	%f552, %f551;
	abs.f32 	%f553, %f549;
	setp.gt.f32 	%p113, %f553, 0f4B000000;
	selp.f32 	%f554, %f549, %f552, %p113;
	cvt.rzi.f32.f32 	%f555, %f549;
	setp.lt.f32 	%p114, %f553, 0f3F000000;
	selp.f32 	%f556, %f555, %f554, %p114;
	cvt.rzi.s32.f32 	%r312, %f556;
	fma.rn.f32 	%f557, %f556, 0fBF000000, %f548;
	mul.f32 	%f558, %f557, %f557;
	fma.rn.f32 	%f559, %f558, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f560, %f558, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f561, %f559, %f558, 0fC0A55DF6;
	fma.rn.f32 	%f562, %f560, %f558, 0f4081E0CF;
	fma.rn.f32 	%f563, %f558, %f557, 0f00000000;
	fma.rn.f32 	%f564, %f562, %f558, 0fC09DE9E6;
	fma.rn.f32 	%f565, %f561, %f563, 0f00000000;
	fma.rn.f32 	%f566, %f564, %f558, 0f3F800000;
	fma.rn.f32 	%f567, %f557, 0f40490FDB, %f565;
	and.b32  	%r313, %r312, 1;
	setp.eq.b32 	%p115, %r313, 1;
	selp.f32 	%f568, %f566, %f567, %p115;
	selp.f32 	%f569, %f567, %f566, %p115;
	and.b32  	%r314, %r312, 2;
	setp.eq.s32 	%p116, %r314, 0;
	neg.f32 	%f570, %f568;
	selp.f32 	%f571, %f568, %f570, %p116;
	add.s32 	%r315, %r312, 1;
	and.b32  	%r316, %r315, 2;
	setp.eq.s32 	%p117, %r316, 0;
	sub.f32 	%f572, %f71, %f569;
	selp.f32 	%f573, %f569, %f572, %p117;
	cvt.rzi.f32.f32 	%f574, %f548;
	setp.eq.f32 	%p118, %f574, %f548;
	mul.f32 	%f575, %f548, 0f00000000;
	selp.f32 	%f576, %f575, %f571, %p118;
	abs.f32 	%f577, %f548;
	setp.gt.f32 	%p119, %f577, 0f4B800000;
	add.f32 	%f578, %f576, 0f3F800000;
	selp.f32 	%f579, %f578, %f573, %p119;
	mov.b32 	%r262, %f546;
	mov.b32 	%r263, %f579;
	// begin inline asm
	cvt.rn.f16x2.f32 %r261, %r263, %r262;
	// end inline asm
	mov.b32 	%r265, %f543;
	mov.b32 	%r266, %f576;
	// begin inline asm
	cvt.rn.f16x2.f32 %r264, %r266, %r265;
	// end inline asm
	and.b32  	%r317, %r64, 2;
	and.b32  	%r318, %r60, 4;
	or.b32  	%r319, %r61, %r317;
	or.b32  	%r320, %r319, %r318;
	and.b32  	%r321, %r56, 6;
	mul.lo.s32 	%r322, %r320, %r321;
	and.b32  	%r323, %r322, 14;
	cvt.rn.f32.s32 	%f580, %r323;
	mov.f32 	%f581, 0f41000000;
	div.approx.f32 	%f582, %f580, %f581;
	add.f32 	%f583, %f582, %f582;
	mov.b32 	%r324, %f583;
	and.b32  	%r325, %r324, -2147483648;
	or.b32  	%r326, %r325, 1056964608;
	mov.b32 	%f584, %r326;
	add.f32 	%f585, %f583, %f584;
	cvt.rzi.f32.f32 	%f586, %f585;
	abs.f32 	%f587, %f583;
	setp.gt.f32 	%p120, %f587, 0f4B000000;
	selp.f32 	%f588, %f583, %f586, %p120;
	cvt.rzi.f32.f32 	%f589, %f583;
	setp.lt.f32 	%p121, %f587, 0f3F000000;
	selp.f32 	%f590, %f589, %f588, %p121;
	cvt.rzi.s32.f32 	%r327, %f590;
	fma.rn.f32 	%f591, %f590, 0fBF000000, %f582;
	mul.f32 	%f592, %f591, %f591;
	fma.rn.f32 	%f593, %f592, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f594, %f592, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f595, %f593, %f592, 0fC0A55DF6;
	fma.rn.f32 	%f596, %f594, %f592, 0f4081E0CF;
	fma.rn.f32 	%f597, %f592, %f591, 0f00000000;
	fma.rn.f32 	%f598, %f596, %f592, 0fC09DE9E6;
	fma.rn.f32 	%f599, %f595, %f597, 0f00000000;
	fma.rn.f32 	%f600, %f598, %f592, 0f3F800000;
	fma.rn.f32 	%f601, %f591, 0f40490FDB, %f599;
	and.b32  	%r328, %r327, 1;
	setp.eq.b32 	%p122, %r328, 1;
	selp.f32 	%f602, %f600, %f601, %p122;
	selp.f32 	%f603, %f601, %f600, %p122;
	and.b32  	%r329, %r327, 2;
	setp.eq.s32 	%p123, %r329, 0;
	neg.f32 	%f604, %f602;
	selp.f32 	%f605, %f602, %f604, %p123;
	add.s32 	%r330, %r327, 1;
	and.b32  	%r331, %r330, 2;
	setp.eq.s32 	%p124, %r331, 0;
	sub.f32 	%f606, %f71, %f603;
	selp.f32 	%f607, %f603, %f606, %p124;
	cvt.rzi.f32.f32 	%f608, %f582;
	setp.eq.f32 	%p125, %f608, %f582;
	mul.f32 	%f609, %f582, 0f00000000;
	selp.f32 	%f610, %f609, %f605, %p125;
	abs.f32 	%f611, %f582;
	setp.gt.f32 	%p126, %f611, 0f4B800000;
	add.f32 	%f612, %f610, 0f3F800000;
	selp.f32 	%f613, %f612, %f607, %p126;
	or.b32  	%r332, %r56, 8;
	mul.lo.s32 	%r333, %r320, %r332;
	and.b32  	%r334, %r333, 14;
	cvt.rn.f32.s32 	%f614, %r334;
	div.approx.f32 	%f615, %f614, %f581;
	add.f32 	%f616, %f615, %f615;
	mov.b32 	%r335, %f616;
	and.b32  	%r336, %r335, -2147483648;
	or.b32  	%r337, %r336, 1056964608;
	mov.b32 	%f617, %r337;
	add.f32 	%f618, %f616, %f617;
	cvt.rzi.f32.f32 	%f619, %f618;
	abs.f32 	%f620, %f616;
	setp.gt.f32 	%p127, %f620, 0f4B000000;
	selp.f32 	%f621, %f616, %f619, %p127;
	cvt.rzi.f32.f32 	%f622, %f616;
	setp.lt.f32 	%p128, %f620, 0f3F000000;
	selp.f32 	%f623, %f622, %f621, %p128;
	cvt.rzi.s32.f32 	%r338, %f623;
	fma.rn.f32 	%f624, %f623, 0fBF000000, %f615;
	mul.f32 	%f625, %f624, %f624;
	fma.rn.f32 	%f626, %f625, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f627, %f625, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f628, %f626, %f625, 0fC0A55DF6;
	fma.rn.f32 	%f629, %f627, %f625, 0f4081E0CF;
	fma.rn.f32 	%f630, %f625, %f624, 0f00000000;
	fma.rn.f32 	%f631, %f629, %f625, 0fC09DE9E6;
	fma.rn.f32 	%f632, %f628, %f630, 0f00000000;
	fma.rn.f32 	%f633, %f631, %f625, 0f3F800000;
	fma.rn.f32 	%f634, %f624, 0f40490FDB, %f632;
	and.b32  	%r339, %r338, 1;
	setp.eq.b32 	%p129, %r339, 1;
	selp.f32 	%f635, %f633, %f634, %p129;
	selp.f32 	%f636, %f634, %f633, %p129;
	and.b32  	%r340, %r338, 2;
	setp.eq.s32 	%p130, %r340, 0;
	neg.f32 	%f637, %f635;
	selp.f32 	%f638, %f635, %f637, %p130;
	add.s32 	%r341, %r338, 1;
	and.b32  	%r342, %r341, 2;
	setp.eq.s32 	%p131, %r342, 0;
	sub.f32 	%f639, %f71, %f636;
	selp.f32 	%f640, %f636, %f639, %p131;
	cvt.rzi.f32.f32 	%f641, %f615;
	setp.eq.f32 	%p132, %f641, %f615;
	mul.f32 	%f642, %f615, 0f00000000;
	selp.f32 	%f643, %f642, %f638, %p132;
	abs.f32 	%f644, %f615;
	setp.gt.f32 	%p133, %f644, 0f4B800000;
	add.f32 	%f645, %f643, 0f3F800000;
	selp.f32 	%f646, %f645, %f640, %p133;
	mov.b32 	%r268, %f613;
	mov.b32 	%r269, %f646;
	// begin inline asm
	cvt.rn.f16x2.f32 %r267, %r269, %r268;
	// end inline asm
	mov.b32 	%r271, %f610;
	mov.b32 	%r272, %f643;
	// begin inline asm
	cvt.rn.f16x2.f32 %r270, %r272, %r271;
	// end inline asm
	xor.b32  	%r292, %r271, -2147483648;
	xor.b32  	%r293, %r272, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r273, %r293, %r292;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r276, %r269, %r268;
	// end inline asm
	cvt.rn.f32.s32 	%f647, %r322;
	div.approx.f32 	%f648, %f647, %f103;
	add.f32 	%f649, %f648, %f648;
	mov.b32 	%r343, %f649;
	and.b32  	%r344, %r343, -2147483648;
	or.b32  	%r345, %r344, 1056964608;
	mov.b32 	%f650, %r345;
	add.f32 	%f651, %f649, %f650;
	cvt.rzi.f32.f32 	%f652, %f651;
	abs.f32 	%f653, %f649;
	setp.gt.f32 	%p134, %f653, 0f4B000000;
	selp.f32 	%f654, %f649, %f652, %p134;
	cvt.rzi.f32.f32 	%f655, %f649;
	setp.lt.f32 	%p135, %f653, 0f3F000000;
	selp.f32 	%f656, %f655, %f654, %p135;
	cvt.rzi.s32.f32 	%r346, %f656;
	fma.rn.f32 	%f657, %f656, 0fBF000000, %f648;
	mul.f32 	%f658, %f657, %f657;
	fma.rn.f32 	%f659, %f658, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f660, %f658, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f661, %f659, %f658, 0fC0A55DF6;
	fma.rn.f32 	%f662, %f660, %f658, 0f4081E0CF;
	fma.rn.f32 	%f663, %f658, %f657, 0f00000000;
	fma.rn.f32 	%f664, %f662, %f658, 0fC09DE9E6;
	fma.rn.f32 	%f665, %f661, %f663, 0f00000000;
	fma.rn.f32 	%f666, %f664, %f658, 0f3F800000;
	fma.rn.f32 	%f667, %f657, 0f40490FDB, %f665;
	and.b32  	%r347, %r346, 1;
	setp.eq.b32 	%p136, %r347, 1;
	selp.f32 	%f668, %f666, %f667, %p136;
	selp.f32 	%f669, %f667, %f666, %p136;
	and.b32  	%r348, %r346, 2;
	setp.eq.s32 	%p137, %r348, 0;
	neg.f32 	%f670, %f668;
	selp.f32 	%f671, %f668, %f670, %p137;
	add.s32 	%r349, %r346, 1;
	and.b32  	%r350, %r349, 2;
	setp.eq.s32 	%p138, %r350, 0;
	sub.f32 	%f672, %f71, %f669;
	selp.f32 	%f673, %f669, %f672, %p138;
	cvt.rzi.f32.f32 	%f674, %f648;
	setp.eq.f32 	%p139, %f674, %f648;
	mul.f32 	%f675, %f648, 0f00000000;
	selp.f32 	%f676, %f675, %f671, %p139;
	mov.b32 	%r351, %f676;
	abs.f32 	%f677, %f648;
	setp.gt.f32 	%p140, %f677, 0f4B800000;
	add.f32 	%f678, %f676, 0f3F800000;
	selp.f32 	%f679, %f678, %f673, %p140;
	shl.b32 	%r352, %r320, 3;
	add.s32 	%r353, %r322, %r352;
	cvt.rn.f32.s32 	%f680, %r353;
	div.approx.f32 	%f681, %f680, %f103;
	add.f32 	%f682, %f681, %f681;
	mov.b32 	%r354, %f682;
	and.b32  	%r355, %r354, -2147483648;
	or.b32  	%r356, %r355, 1056964608;
	mov.b32 	%f683, %r356;
	add.f32 	%f684, %f682, %f683;
	cvt.rzi.f32.f32 	%f685, %f684;
	abs.f32 	%f686, %f682;
	setp.gt.f32 	%p141, %f686, 0f4B000000;
	selp.f32 	%f687, %f682, %f685, %p141;
	cvt.rzi.f32.f32 	%f688, %f682;
	setp.lt.f32 	%p142, %f686, 0f3F000000;
	selp.f32 	%f689, %f688, %f687, %p142;
	cvt.rzi.s32.f32 	%r357, %f689;
	fma.rn.f32 	%f690, %f689, 0fBF000000, %f681;
	mul.f32 	%f691, %f690, %f690;
	fma.rn.f32 	%f692, %f691, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f693, %f691, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f694, %f692, %f691, 0fC0A55DF6;
	fma.rn.f32 	%f695, %f693, %f691, 0f4081E0CF;
	fma.rn.f32 	%f696, %f691, %f690, 0f00000000;
	fma.rn.f32 	%f697, %f695, %f691, 0fC09DE9E6;
	fma.rn.f32 	%f698, %f694, %f696, 0f00000000;
	fma.rn.f32 	%f699, %f697, %f691, 0f3F800000;
	fma.rn.f32 	%f700, %f690, 0f40490FDB, %f698;
	and.b32  	%r358, %r357, 1;
	setp.eq.b32 	%p143, %r358, 1;
	selp.f32 	%f701, %f699, %f700, %p143;
	selp.f32 	%f702, %f700, %f699, %p143;
	and.b32  	%r359, %r357, 2;
	setp.eq.s32 	%p144, %r359, 0;
	neg.f32 	%f703, %f701;
	selp.f32 	%f704, %f701, %f703, %p144;
	add.s32 	%r360, %r357, 1;
	and.b32  	%r361, %r360, 2;
	setp.eq.s32 	%p145, %r361, 0;
	sub.f32 	%f705, %f71, %f702;
	selp.f32 	%f706, %f702, %f705, %p145;
	cvt.rzi.f32.f32 	%f707, %f681;
	setp.eq.f32 	%p146, %f707, %f681;
	mul.f32 	%f708, %f681, 0f00000000;
	selp.f32 	%f709, %f708, %f704, %p146;
	mov.b32 	%r362, %f709;
	abs.f32 	%f710, %f681;
	setp.gt.f32 	%p147, %f710, 0f4B800000;
	add.f32 	%f711, %f709, 0f3F800000;
	selp.f32 	%f712, %f711, %f706, %p147;
	mov.b32 	%r281, %f712;
	mov.b32 	%r280, %f679;
	// begin inline asm
	cvt.rn.f16x2.f32 %r279, %r281, %r280;
	// end inline asm
	xor.b32  	%r284, %r362, -2147483648;
	xor.b32  	%r283, %r351, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r282, %r284, %r283;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r285, %r269, %r268;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r288, %r272, %r271;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r291, %r293, %r292;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r294, %r269, %r268;
	// end inline asm
	or.b32  	%r364, %r53, %r3;
	or.b32  	%r21, %r364, %r52;
	and.b32  	%r22, %r51, 12;
	and.b32  	%r23, %r51, 16;
	add.s32 	%r365, %r2, %r113;
	shl.b32 	%r24, %r365, 5;
	and.b32  	%r25, %r51, 28;
	bfe.s32 	%r366, %r1, 3, 1;
	and.b32  	%r26, %r1, 8;
	shl.b32 	%r367, %r1, 4;
	or.b32  	%r368, %r26, %r367;
	shr.u32 	%r369, %r368, 2;
	and.b32  	%r370, %r369, 14;
	or.b32  	%r371, %r370, %r23;
	and.b32  	%r372, %r1, 4;
	or.b32  	%r27, %r133, %r372;
	shr.u32 	%r374, %r3, 1;
	and.b32  	%r375, %r4, 32;
	or.b32  	%r376, %r375, %r374;
	or.b32  	%r377, %r58, %r52;
	or.b32  	%r378, %r377, %r54;
	or.b32  	%r379, %r378, %r57;
	shr.u32 	%r380, %r379, 1;
	mul.lo.s32 	%r381, %r380, 65;
	add.s32 	%r382, %r376, %r381;
	or.b32  	%r383, %r376, 8;
	add.s32 	%r384, %r383, %r381;
	or.b32  	%r385, %r376, 16;
	add.s32 	%r386, %r385, %r381;
	or.b32  	%r387, %r376, 24;
	add.s32 	%r388, %r387, %r381;
	shl.b32 	%r389, %r3, 1;
	or.b32  	%r390, %r62, %r389;
	mul.lo.s32 	%r391, %r390, 65;
	add.s32 	%r392, %r391, %r23;
	add.s32 	%r393, %r392, %r370;
	mul.wide.u32 	%rd49, %r393, 4;
	mov.u64 	%rd50, shmem;
	add.s64 	%rd6, %rd50, %rd49;
	cvt.u64.u32 	%rd51, %r370;
	cvt.u64.u32 	%rd52, %r391;
	cvt.u64.u32 	%rd53, %r23;
	add.s64 	%rd54, %rd53, %rd52;
	add.s64 	%rd55, %rd54, %rd51;
	shl.b64 	%rd56, %rd55, 2;
	add.s64 	%rd7, %rd50, %rd56;
	shl.b32 	%r394, %r111, 16;
	add.s32 	%r395, %r394, -196608;
	shl.b32 	%r396, %r3, 7;
	and.b32  	%r397, %r55, 1984;
	or.b32  	%r398, %r397, %r64;
	shl.b32 	%r399, %r398, 5;
	or.b32  	%r28, %r396, %r399;
	cvt.s64.s32 	%rd8, %r395;
	or.b32  	%r29, %r28, %r23;
	bfe.s32 	%r400, %r3, 2, 1;
	and.b32  	%r401, %r400, 260;
	and.b32  	%r402, %r3, 1;
	neg.s32 	%r403, %r402;
	and.b32  	%r404, %r403, 1040;
	bfe.s32 	%r405, %r3, 1, 1;
	and.b32  	%r406, %r405, 520;
	shr.u32 	%r407, %r3, 3;
	add.s32 	%r408, %r404, %r371;
	add.s32 	%r409, %r408, %r401;
	mad.lo.s32 	%r410, %r62, 65, %r409;
	add.s32 	%r411, %r410, %r406;
	mad.lo.s32 	%r412, %r407, 130, %r411;
	mul.wide.u32 	%rd57, %r412, 4;
	add.s64 	%rd9, %rd50, %rd57;
	add.s32 	%r413, %r412, 32;
	mul.wide.u32 	%rd58, %r413, 4;
	add.s64 	%rd10, %rd50, %rd58;
	add.s32 	%r414, %r412, 1;
	mul.wide.u32 	%rd59, %r414, 4;
	add.s64 	%rd11, %rd50, %rd59;
	add.s32 	%r415, %r412, 33;
	mul.wide.u32 	%rd60, %r415, 4;
	add.s64 	%rd12, %rd50, %rd60;
	add.s32 	%r416, %r412, 2081;
	mul.wide.u32 	%rd61, %r416, 4;
	add.s64 	%rd13, %rd50, %rd61;
	add.s32 	%r417, %r412, 2113;
	mul.wide.u32 	%rd62, %r417, 4;
	add.s64 	%rd14, %rd50, %rd62;
	add.s32 	%r418, %r412, 2082;
	mul.wide.u32 	%rd63, %r418, 4;
	add.s64 	%rd15, %rd50, %rd63;
	add.s32 	%r419, %r412, 2114;
	mul.wide.u32 	%rd64, %r419, 4;
	add.s64 	%rd16, %rd50, %rd64;
	add.s32 	%r420, %r412, 4162;
	mul.wide.u32 	%rd65, %r420, 4;
	add.s64 	%rd17, %rd50, %rd65;
	add.s32 	%r421, %r412, 4194;
	mul.wide.u32 	%rd66, %r421, 4;
	add.s64 	%rd18, %rd50, %rd66;
	add.s32 	%r422, %r412, 4163;
	mul.wide.u32 	%rd67, %r422, 4;
	add.s64 	%rd19, %rd50, %rd67;
	add.s32 	%r423, %r412, 4195;
	mul.wide.u32 	%rd68, %r423, 4;
	add.s64 	%rd20, %rd50, %rd68;
	add.s32 	%r424, %r412, 6243;
	mul.wide.u32 	%rd69, %r424, 4;
	add.s64 	%rd21, %rd50, %rd69;
	add.s32 	%r425, %r412, 6275;
	mul.wide.u32 	%rd70, %r425, 4;
	add.s64 	%rd22, %rd50, %rd70;
	add.s32 	%r426, %r412, 6244;
	mul.wide.u32 	%rd71, %r426, 4;
	add.s64 	%rd23, %rd50, %rd71;
	add.s32 	%r427, %r412, 6276;
	mul.wide.u32 	%rd72, %r427, 4;
	add.s64 	%rd24, %rd50, %rd72;
	and.b32  	%r428, %r366, 1040;
	setp.lt.u32 	%p149, %r1, 16;
	selp.b32 	%r30, 0, 520, %p149;
	or.b32  	%r31, %r376, %r428;
	or.b32  	%r32, %r383, %r428;
	add.s32 	%r33, %r385, %r428;
	add.s32 	%r34, %r387, %r428;
	mul.wide.u32 	%rd73, %r388, 4;
	add.s64 	%rd25, %rd50, %rd73;
	mul.wide.u32 	%rd74, %r386, 4;
	add.s64 	%rd26, %rd50, %rd74;
	mul.wide.u32 	%rd75, %r384, 4;
	add.s64 	%rd27, %rd50, %rd75;
	mul.wide.u32 	%rd76, %r382, 4;
	add.s64 	%rd28, %rd50, %rd76;
	mov.u16 	%rs236, 25600;
	mov.u16 	%rs238, 21504;
	mov.u16 	%rs246, 18432;
	mov.u16 	%rs260, -14592;
	mov.u32 	%r2521, %r2519;
	mov.u32 	%r2522, %r2519;
	mov.u32 	%r2538, %r2519;
	mov.u32 	%r2537, %r2519;
	mov.u32 	%r2536, %r2519;
	mov.u32 	%r2535, %r2519;
	mov.u32 	%r2527, %r2519;
	mov.u32 	%r2528, %r2519;
	mov.u32 	%r2529, %r2519;
	mov.u32 	%r2530, %r2519;
	mov.u32 	%r2541, %r2519;
	mov.u32 	%r2542, %r2519;
	mov.u32 	%r47, %r2519;
	bra.uni 	$L__BB0_31;
$L__BB0_39:                             // %pass10192
                                        //   in Loop: Header=BB0_31 Depth=1
	or.b32  	%r2512, %r2520, %r22;
	or.b32  	%r2513, %r2512, %r29;
	or.b32  	%r2514, %r2513, 196608;
	cvt.s64.s32 	%rd130, %r2514;
	add.s64 	%rd131, %rd130, %rd8;
	shr.u64 	%rd132, %rd131, 39;
	add.s64 	%rd133, %rd131, %rd132;
	shr.s64 	%rd134, %rd133, 25;
	setp.lt.s64 	%p178, %rd131, 0;
	and.b64  	%rd135, %rd133, -33554432;
	setp.ne.s64 	%p179, %rd135, %rd131;
	and.pred  	%p180, %p178, %p179;
	selp.u64 	%rd136, 1, 0, %p180;
	sub.s64 	%rd137, %rd136, %rd134;
	shl.b64 	%rd138, %rd137, 25;
	add.s64 	%rd139, %rd138, %rd131;
	shl.b64 	%rd140, %rd139, 2;
	add.s64 	%rd141, %rd3, %rd140;
	st.global.v4.u32 	[%rd141], {%r104, %r106, %r105, %r107};
	setp.ne.s32 	%p181, %r47, 32512;
	add.s32 	%r47, %r47, 256;
	add.s32 	%r2515, %r47, %r109;
	setp.lt.s32 	%p182, %r2515, %r110;
	and.pred  	%p183, %p181, %p182;
	@%p183 bra 	$L__BB0_31;
	bra.uni 	$L__BB0_40;
$L__BB0_31:                             // %L1522
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_32 Depth 2
	setp.eq.s32 	%p150, %r26, 0;
	and.b32  	%r48, %r47, 32512;
	or.b32  	%r494, %r21, %r48;
	add.s32 	%r495, %r494, %r109;
	mul.lo.s32 	%r496, %r495, 12288;
	or.b32  	%r497, %r25, %r496;
	add.s32 	%r498, %r497, %r24;
	mul.hi.s32 	%r499, %r498, 715827883;
	shr.u32 	%r500, %r499, 31;
	shr.s32 	%r501, %r499, 26;
	add.s32 	%r502, %r501, %r500;
	setp.lt.s32 	%p151, %r498, 0;
	mul.lo.s32 	%r503, %r502, 402653184;
	setp.ne.s32 	%p152, %r503, %r498;
	and.pred  	%p153, %p151, %p152;
	selp.s32 	%r504, -1, 0, %p153;
	add.s32 	%r505, %r502, %r504;
	mad.lo.s32 	%r506, %r505, -402653184, %r498;
	mul.wide.s32 	%rd77, %r506, 4;
	add.s64 	%rd78, %rd2, %rd77;
	ld.global.v4.u32 	{%r507, %r508, %r509, %r510}, [%rd78];
	or.b32  	%r511, %r494, 64;
	add.s32 	%r512, %r511, %r109;
	mul.lo.s32 	%r513, %r512, 12288;
	or.b32  	%r514, %r25, %r513;
	add.s32 	%r515, %r514, %r24;
	mul.hi.s32 	%r516, %r515, 715827883;
	shr.u32 	%r517, %r516, 31;
	shr.s32 	%r518, %r516, 26;
	add.s32 	%r519, %r518, %r517;
	setp.lt.s32 	%p154, %r515, 0;
	mul.lo.s32 	%r520, %r519, 402653184;
	setp.ne.s32 	%p155, %r520, %r515;
	and.pred  	%p156, %p154, %p155;
	selp.s32 	%r521, -1, 0, %p156;
	add.s32 	%r522, %r519, %r521;
	mad.lo.s32 	%r523, %r522, -402653184, %r515;
	mul.wide.s32 	%rd79, %r523, 4;
	add.s64 	%rd80, %rd2, %rd79;
	ld.global.v4.u32 	{%r524, %r525, %r526, %r527}, [%rd80];
	or.b32  	%r528, %r494, 128;
	add.s32 	%r529, %r528, %r109;
	mul.lo.s32 	%r530, %r529, 12288;
	or.b32  	%r531, %r25, %r530;
	add.s32 	%r532, %r531, %r24;
	mul.hi.s32 	%r533, %r532, 715827883;
	shr.u32 	%r534, %r533, 31;
	shr.s32 	%r535, %r533, 26;
	add.s32 	%r536, %r535, %r534;
	setp.lt.s32 	%p157, %r532, 0;
	mul.lo.s32 	%r537, %r536, 402653184;
	setp.ne.s32 	%p158, %r537, %r532;
	and.pred  	%p159, %p157, %p158;
	selp.s32 	%r538, -1, 0, %p159;
	add.s32 	%r539, %r536, %r538;
	mad.lo.s32 	%r540, %r539, -402653184, %r532;
	mul.wide.s32 	%rd81, %r540, 4;
	add.s64 	%rd82, %rd2, %rd81;
	ld.global.v4.u32 	{%r541, %r542, %r543, %r544}, [%rd82];
	or.b32  	%r545, %r494, 192;
	add.s32 	%r546, %r545, %r109;
	mul.lo.s32 	%r547, %r546, 12288;
	or.b32  	%r548, %r25, %r547;
	add.s32 	%r549, %r548, %r24;
	mul.hi.s32 	%r550, %r549, 715827883;
	shr.u32 	%r551, %r550, 31;
	shr.s32 	%r552, %r550, 26;
	add.s32 	%r553, %r552, %r551;
	setp.lt.s32 	%p160, %r549, 0;
	mul.lo.s32 	%r554, %r553, 402653184;
	setp.ne.s32 	%p161, %r554, %r549;
	and.pred  	%p162, %p160, %p161;
	selp.s32 	%r555, -1, 0, %p162;
	add.s32 	%r556, %r553, %r555;
	mad.lo.s32 	%r557, %r556, -402653184, %r549;
	mul.wide.s32 	%rd83, %r557, 4;
	add.s64 	%rd84, %rd2, %rd83;
	ld.global.v4.u32 	{%r558, %r559, %r560, %r561}, [%rd84];
	selp.b32 	%r562, %r509, %r507, %p150;
	shfl.sync.bfly.b32	%r563, %r562, 8, 31, -1;
	selp.b32 	%r430, %r507, %r563, %p150;
	selp.b32 	%r431, %r563, %r509, %p150;
	selp.b32 	%r564, %r510, %r508, %p150;
	shfl.sync.bfly.b32	%r565, %r564, 8, 31, -1;
	selp.b32 	%r438, %r508, %r565, %p150;
	selp.b32 	%r439, %r565, %r510, %p150;
	selp.b32 	%r566, %r526, %r524, %p150;
	shfl.sync.bfly.b32	%r567, %r566, 8, 31, -1;
	selp.b32 	%r446, %r524, %r567, %p150;
	selp.b32 	%r447, %r567, %r526, %p150;
	selp.b32 	%r568, %r527, %r525, %p150;
	shfl.sync.bfly.b32	%r569, %r568, 8, 31, -1;
	selp.b32 	%r454, %r525, %r569, %p150;
	selp.b32 	%r455, %r569, %r527, %p150;
	selp.b32 	%r570, %r543, %r541, %p150;
	shfl.sync.bfly.b32	%r571, %r570, 8, 31, -1;
	selp.b32 	%r462, %r541, %r571, %p150;
	selp.b32 	%r463, %r571, %r543, %p150;
	selp.b32 	%r572, %r544, %r542, %p150;
	shfl.sync.bfly.b32	%r573, %r572, 8, 31, -1;
	selp.b32 	%r470, %r542, %r573, %p150;
	selp.b32 	%r471, %r573, %r544, %p150;
	selp.b32 	%r574, %r560, %r558, %p150;
	shfl.sync.bfly.b32	%r575, %r574, 8, 31, -1;
	selp.b32 	%r478, %r558, %r575, %p150;
	selp.b32 	%r479, %r575, %r560, %p150;
	selp.b32 	%r576, %r561, %r559, %p150;
	shfl.sync.bfly.b32	%r577, %r576, 8, 31, -1;
	selp.b32 	%r486, %r559, %r577, %p150;
	selp.b32 	%r487, %r577, %r561, %p150;
	mov.u32 	%r488, 21520;
	// begin inline asm
	prmt.b32 %r429, %r430, %r431, %r488;
	// end inline asm
	mov.u32 	%r492, 30258;
	// begin inline asm
	prmt.b32 %r433, %r430, %r431, %r492;
	// end inline asm
	// begin inline asm
	prmt.b32 %r437, %r438, %r439, %r488;
	// end inline asm
	// begin inline asm
	prmt.b32 %r441, %r438, %r439, %r492;
	// end inline asm
	// begin inline asm
	prmt.b32 %r445, %r446, %r447, %r488;
	// end inline asm
	// begin inline asm
	prmt.b32 %r449, %r446, %r447, %r492;
	// end inline asm
	// begin inline asm
	prmt.b32 %r453, %r454, %r455, %r488;
	// end inline asm
	// begin inline asm
	prmt.b32 %r457, %r454, %r455, %r492;
	// end inline asm
	// begin inline asm
	prmt.b32 %r461, %r462, %r463, %r488;
	// end inline asm
	// begin inline asm
	prmt.b32 %r465, %r462, %r463, %r492;
	// end inline asm
	// begin inline asm
	prmt.b32 %r469, %r470, %r471, %r488;
	// end inline asm
	// begin inline asm
	prmt.b32 %r473, %r470, %r471, %r492;
	// end inline asm
	// begin inline asm
	prmt.b32 %r477, %r478, %r479, %r488;
	// end inline asm
	// begin inline asm
	prmt.b32 %r481, %r478, %r479, %r492;
	// end inline asm
	// begin inline asm
	prmt.b32 %r485, %r486, %r487, %r488;
	// end inline asm
	// begin inline asm
	prmt.b32 %r489, %r486, %r487, %r492;
	// end inline asm
	st.shared.u32 	[%rd9], %r429;
	st.shared.u32 	[%rd10], %r433;
	st.shared.u32 	[%rd11], %r437;
	st.shared.u32 	[%rd12], %r441;
	st.shared.u32 	[%rd13], %r445;
	st.shared.u32 	[%rd14], %r449;
	st.shared.u32 	[%rd15], %r453;
	st.shared.u32 	[%rd16], %r457;
	st.shared.u32 	[%rd17], %r461;
	st.shared.u32 	[%rd18], %r465;
	st.shared.u32 	[%rd19], %r469;
	st.shared.u32 	[%rd20], %r473;
	st.shared.u32 	[%rd21], %r477;
	st.shared.u32 	[%rd22], %r481;
	st.shared.u32 	[%rd23], %r485;
	st.shared.u32 	[%rd24], %r489;
	bar.sync 	0;
	or.b32  	%r49, %r27, %r47;
	shr.u32 	%r2534, %r49, 6;
	mov.u64 	%rd146, %rd28;
	mov.u64 	%rd147, %rd27;
	mov.u64 	%rd148, %rd26;
	mov.u64 	%rd149, %rd25;
	mov.u32 	%r2539, %r2529;
	mov.u32 	%r2540, %r2530;
	mov.u32 	%r2543, %r2519;
	mov.u32 	%r2544, %r2528;
	mov.u32 	%r2545, %r2527;
	mov.u32 	%r2546, %r2522;
	mov.u32 	%r2547, %r2521;
$L__BB0_32:                             // %pass5622
                                        //   Parent Loop BB0_31 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov.u32 	%r2530, %r2542;
	mov.u32 	%r2529, %r2541;
	mov.u32 	%r2528, %r2540;
	mov.u32 	%r2527, %r2539;
	mov.u32 	%r2521, %r2538;
	mov.u32 	%r2522, %r2537;
	mov.u32 	%r2538, %r2536;
	mov.u32 	%r2537, %r2535;
	add.s32 	%r2390, %r49, %r2543;
	bfe.s32 	%r2391, %r2390, 2, 1;
	and.b32  	%r2392, %r2391, 260;
	and.b32  	%r2393, %r2534, 3;
	mul.lo.s32 	%r2394, %r2393, 2081;
	bfe.s32 	%r2395, %r2390, 4, 1;
	and.b32  	%r2396, %r2395, 65;
	bfe.s32 	%r2397, %r2390, 3, 1;
	and.b32  	%r2398, %r2397, 130;
	add.s32 	%r2399, %r31, %r2394;
	add.s32 	%r2400, %r2399, %r2392;
	add.s32 	%r2401, %r2400, %r2396;
	add.s32 	%r2402, %r2401, %r30;
	add.s32 	%r2403, %r2402, %r2398;
	mul.wide.u32 	%rd85, %r2403, 4;
	add.s64 	%rd87, %rd50, %rd85;
	ld.shared.u32 	%r2536, [%rd87];
	// begin inline asm
	mov.b32 %r583, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r594, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r582, %r2536, -2004318072;
	mov.u32 	%r581, 983055;
	// begin inline asm
	lop3.b32 %r580, %r581, %r582, %r583, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r584, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r585, %r583, %r584;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r588, %r580, %r585;
	// end inline asm
	mov.u32 	%r592, 15728880;
	// begin inline asm
	lop3.b32 %r591, %r592, %r582, %r594, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r595, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r596, %r594, %r595;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r599, %r591, %r596;
	// end inline asm
	shr.u32 	%r604, %r582, 8;
	// begin inline asm
	lop3.b32 %r602, %r581, %r604, %r583, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r606, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r607, %r583, %r606;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r610, %r602, %r607;
	// end inline asm
	// begin inline asm
	lop3.b32 %r613, %r592, %r604, %r594, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r617, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r618, %r594, %r617;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r621, %r613, %r618;
	// end inline asm
	// begin inline asm
	mov.b32 %r629, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r640, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r628, %r2547, -2004318072;
	// begin inline asm
	lop3.b32 %r626, %r581, %r628, %r629, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r630, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r631, %r629, %r630;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r634, %r626, %r631;
	// end inline asm
	// begin inline asm
	lop3.b32 %r637, %r592, %r628, %r640, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r641, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r642, %r640, %r641;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r645, %r637, %r642;
	// end inline asm
	shr.u32 	%r650, %r628, 8;
	// begin inline asm
	lop3.b32 %r648, %r581, %r650, %r629, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r652, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r653, %r629, %r652;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r656, %r648, %r653;
	// end inline asm
	// begin inline asm
	lop3.b32 %r659, %r592, %r650, %r640, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r663, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r664, %r640, %r663;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r667, %r659, %r664;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r672, %r165, %r634, %r2519;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r678, %r165, %r645, %r2519;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r684, %r165, %r656, %r2519;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r690, %r165, %r667, %r2519;
	// end inline asm
	// begin inline asm
	mov.b32 %r699, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r710, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r698, %r2521, -2004318072;
	// begin inline asm
	lop3.b32 %r696, %r581, %r698, %r699, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r700, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r701, %r699, %r700;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r704, %r696, %r701;
	// end inline asm
	// begin inline asm
	lop3.b32 %r707, %r592, %r698, %r710, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r711, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r712, %r710, %r711;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r715, %r707, %r712;
	// end inline asm
	shr.u32 	%r720, %r698, 8;
	// begin inline asm
	lop3.b32 %r718, %r581, %r720, %r699, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r722, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r723, %r699, %r722;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r726, %r718, %r723;
	// end inline asm
	// begin inline asm
	lop3.b32 %r729, %r592, %r720, %r710, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r733, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r734, %r710, %r733;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r737, %r729, %r734;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r740, %r196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r742, %r740, %r704, %r672;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r746, %r196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r748, %r746, %r715, %r678;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r752, %r196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r754, %r752, %r726, %r684;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r758, %r196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r760, %r758, %r737, %r690;
	// end inline asm
	// begin inline asm
	mov.b32 %r769, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r780, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r768, %r2538, -2004318072;
	// begin inline asm
	lop3.b32 %r766, %r581, %r768, %r769, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r770, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r771, %r769, %r770;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r774, %r766, %r771;
	// end inline asm
	// begin inline asm
	lop3.b32 %r777, %r592, %r768, %r780, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r781, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r782, %r780, %r781;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r785, %r777, %r782;
	// end inline asm
	shr.u32 	%r790, %r768, 8;
	// begin inline asm
	lop3.b32 %r788, %r581, %r790, %r769, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r792, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r793, %r769, %r792;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r796, %r788, %r793;
	// end inline asm
	// begin inline asm
	lop3.b32 %r799, %r592, %r790, %r780, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r803, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r804, %r780, %r803;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r807, %r799, %r804;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r812, %r227, %r774, %r742;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r818, %r227, %r785, %r748;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r824, %r227, %r796, %r754;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r830, %r227, %r807, %r760;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r834, %r258;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r865, %r834, %r588, %r812;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r840, %r258;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r862, %r840, %r599, %r818;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r846, %r258;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r874, %r846, %r610, %r824;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r852, %r258;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r871, %r852, %r621, %r830;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r858, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r860, %r858, %r862;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r863, %r261, %r865, %r860;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r867, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r869, %r867, %r871;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r872, %r261, %r874, %r869;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r876, %r264, %r865;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r879, %r261, %r862, %r876;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r883, %r264, %r874;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r886, %r261, %r871, %r883;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r917, %r914}, {%r267, %r273, %r270, %r276}, {%r863, %r879}, {%r2519, %r2519};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r926, %r923}, {%r267, %r273, %r270, %r276}, {%r872, %r886}, {%r2519, %r2519};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r910, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r912, %r910, %r914;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r915, %r279, %r917, %r912;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r919, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r921, %r919, %r923;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r924, %r279, %r926, %r921;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r928, %r282, %r917;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r931, %r279, %r914, %r928;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r935, %r282, %r926;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r938, %r279, %r923, %r935;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r942, %r943}, {%r285, %r291, %r288, %r294}, {%r915, %r931}, {%r2519, %r2519};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r952, %r953}, {%r285, %r291, %r288, %r294}, {%r924, %r938}, {%r2519, %r2519};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r962, %r59, %r942;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r965, %r59, %r943;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r968, %r59, %r952;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r971, %r59, %r953;
	// end inline asm
	// begin inline asm
	mov.b32 %r974, {%rs260, %rs260};
	// end inline asm
	mov.u16 	%rs51, 18176;
	// begin inline asm
	mov.b32 %r975, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r976, %r962, %r974;
	// end inline asm
	// begin inline asm
	min.f16x2 %r979, %r976, %r975;
	// end inline asm
	// begin inline asm
	mov.b32 %r982, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r983, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r984, %r965, %r982;
	// end inline asm
	// begin inline asm
	min.f16x2 %r987, %r984, %r983;
	// end inline asm
	// begin inline asm
	mov.b32 %r990, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r991, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r992, %r968, %r990;
	// end inline asm
	// begin inline asm
	min.f16x2 %r995, %r992, %r991;
	// end inline asm
	// begin inline asm
	mov.b32 %r998, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r999, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1000, %r971, %r998;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1003, %r1000, %r999;
	// end inline asm
	mov.u16 	%rs65, 26112;
	// begin inline asm
	mov.b32 %r1009, {%rs65, %rs65};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1007, %r979, %r1009;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1010, %r987, %r1009;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1013, %r995, %r1009;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1016, %r1003, %r1009;
	// end inline asm
	mov.u32 	%r1022, 25152;
	// begin inline asm
	prmt.b32 %r1019, %r1007, %r1013, %r1022;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1023, %r1010, %r1016, %r1022;
	// end inline asm
	shl.b32 	%r1030, %r1023, 4;
	mov.u32 	%r1028, 252645135;
	// begin inline asm
	lop3.b32 %r1027, %r1028, %r1019, %r1030, 202;
	// end inline asm
	st.shared.u32 	[%rd146], %r1027;
	add.s32 	%r2404, %r32, %r2394;
	add.s32 	%r2405, %r2404, %r2392;
	add.s32 	%r2406, %r2405, %r2396;
	add.s32 	%r2407, %r2406, %r30;
	add.s32 	%r2408, %r2407, %r2398;
	mul.wide.u32 	%rd88, %r2408, 4;
	add.s64 	%rd89, %rd50, %rd88;
	ld.shared.u32 	%r2535, [%rd89];
	// begin inline asm
	mov.b32 %r1036, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1047, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1035, %r2535, -2004318072;
	// begin inline asm
	lop3.b32 %r1033, %r581, %r1035, %r1036, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1037, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1038, %r1036, %r1037;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1041, %r1033, %r1038;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1044, %r592, %r1035, %r1047, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1048, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1049, %r1047, %r1048;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1052, %r1044, %r1049;
	// end inline asm
	shr.u32 	%r1057, %r1035, 8;
	// begin inline asm
	lop3.b32 %r1055, %r581, %r1057, %r1036, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1059, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1060, %r1036, %r1059;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1063, %r1055, %r1060;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1066, %r592, %r1057, %r1047, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1070, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1071, %r1047, %r1070;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1074, %r1066, %r1071;
	// end inline asm
	// begin inline asm
	mov.b32 %r1082, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1093, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1081, %r2546, -2004318072;
	// begin inline asm
	lop3.b32 %r1079, %r581, %r1081, %r1082, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1083, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1084, %r1082, %r1083;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1087, %r1079, %r1084;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1090, %r592, %r1081, %r1093, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1094, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1095, %r1093, %r1094;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1098, %r1090, %r1095;
	// end inline asm
	shr.u32 	%r1103, %r1081, 8;
	// begin inline asm
	lop3.b32 %r1101, %r581, %r1103, %r1082, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1105, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1106, %r1082, %r1105;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1109, %r1101, %r1106;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1112, %r592, %r1103, %r1093, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1116, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1117, %r1093, %r1116;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1120, %r1112, %r1117;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1125, %r165, %r1087, %r2519;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1131, %r165, %r1098, %r2519;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1137, %r165, %r1109, %r2519;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1143, %r165, %r1120, %r2519;
	// end inline asm
	// begin inline asm
	mov.b32 %r1152, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1163, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1151, %r2522, -2004318072;
	// begin inline asm
	lop3.b32 %r1149, %r581, %r1151, %r1152, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1153, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1154, %r1152, %r1153;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1157, %r1149, %r1154;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1160, %r592, %r1151, %r1163, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1164, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1165, %r1163, %r1164;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1168, %r1160, %r1165;
	// end inline asm
	shr.u32 	%r1173, %r1151, 8;
	// begin inline asm
	lop3.b32 %r1171, %r581, %r1173, %r1152, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1175, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1176, %r1152, %r1175;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1179, %r1171, %r1176;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1182, %r592, %r1173, %r1163, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1186, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1187, %r1163, %r1186;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1190, %r1182, %r1187;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1193, %r196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1195, %r1193, %r1157, %r1125;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1199, %r196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1201, %r1199, %r1168, %r1131;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1205, %r196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1207, %r1205, %r1179, %r1137;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1211, %r196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1213, %r1211, %r1190, %r1143;
	// end inline asm
	// begin inline asm
	mov.b32 %r1222, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1233, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1221, %r2537, -2004318072;
	// begin inline asm
	lop3.b32 %r1219, %r581, %r1221, %r1222, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1223, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1224, %r1222, %r1223;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1227, %r1219, %r1224;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1230, %r592, %r1221, %r1233, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1234, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1235, %r1233, %r1234;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1238, %r1230, %r1235;
	// end inline asm
	shr.u32 	%r1243, %r1221, 8;
	// begin inline asm
	lop3.b32 %r1241, %r581, %r1243, %r1222, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1245, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1246, %r1222, %r1245;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1249, %r1241, %r1246;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1252, %r592, %r1243, %r1233, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1256, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1257, %r1233, %r1256;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1260, %r1252, %r1257;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1265, %r227, %r1227, %r1195;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1271, %r227, %r1238, %r1201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1277, %r227, %r1249, %r1207;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1283, %r227, %r1260, %r1213;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1287, %r258;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1318, %r1287, %r1041, %r1265;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1293, %r258;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1315, %r1293, %r1052, %r1271;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1299, %r258;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1327, %r1299, %r1063, %r1277;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1305, %r258;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1324, %r1305, %r1074, %r1283;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1311, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1313, %r1311, %r1315;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1316, %r261, %r1318, %r1313;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1320, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1322, %r1320, %r1324;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1325, %r261, %r1327, %r1322;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1329, %r264, %r1318;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1332, %r261, %r1315, %r1329;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1336, %r264, %r1327;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1339, %r261, %r1324, %r1336;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1370, %r1367}, {%r267, %r273, %r270, %r276}, {%r1316, %r1332}, {%r2519, %r2519};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1379, %r1376}, {%r267, %r273, %r270, %r276}, {%r1325, %r1339}, {%r2519, %r2519};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1363, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1365, %r1363, %r1367;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1368, %r279, %r1370, %r1365;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1372, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1374, %r1372, %r1376;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1377, %r279, %r1379, %r1374;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1381, %r282, %r1370;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1384, %r279, %r1367, %r1381;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1388, %r282, %r1379;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1391, %r279, %r1376, %r1388;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1395, %r1396}, {%r285, %r291, %r288, %r294}, {%r1368, %r1384}, {%r2519, %r2519};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1405, %r1406}, {%r285, %r291, %r288, %r294}, {%r1377, %r1391}, {%r2519, %r2519};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1415, %r59, %r1395;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1418, %r59, %r1396;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1421, %r59, %r1405;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1424, %r59, %r1406;
	// end inline asm
	// begin inline asm
	mov.b32 %r1427, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1428, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1429, %r1415, %r1427;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1432, %r1429, %r1428;
	// end inline asm
	// begin inline asm
	mov.b32 %r1435, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1436, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1437, %r1418, %r1435;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1440, %r1437, %r1436;
	// end inline asm
	// begin inline asm
	mov.b32 %r1443, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1444, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1445, %r1421, %r1443;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1448, %r1445, %r1444;
	// end inline asm
	// begin inline asm
	mov.b32 %r1451, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1452, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1453, %r1424, %r1451;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1456, %r1453, %r1452;
	// end inline asm
	// begin inline asm
	mov.b32 %r1462, {%rs65, %rs65};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1460, %r1432, %r1462;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1463, %r1440, %r1462;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1466, %r1448, %r1462;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1469, %r1456, %r1462;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1472, %r1460, %r1466, %r1022;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1476, %r1463, %r1469, %r1022;
	// end inline asm
	shl.b32 	%r1483, %r1476, 4;
	// begin inline asm
	lop3.b32 %r1480, %r1028, %r1472, %r1483, 202;
	// end inline asm
	st.shared.u32 	[%rd147], %r1480;
	add.s32 	%r2409, %r33, %r2394;
	add.s32 	%r2410, %r2409, %r2392;
	add.s32 	%r2411, %r2410, %r2396;
	add.s32 	%r2412, %r2411, %r30;
	add.s32 	%r2413, %r2412, %r2398;
	mul.wide.u32 	%rd90, %r2413, 4;
	add.s64 	%rd91, %rd50, %rd90;
	ld.shared.u32 	%r2541, [%rd91];
	// begin inline asm
	mov.b32 %r1489, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1500, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1488, %r2541, -2004318072;
	// begin inline asm
	lop3.b32 %r1486, %r581, %r1488, %r1489, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1490, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1491, %r1489, %r1490;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1494, %r1486, %r1491;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1497, %r592, %r1488, %r1500, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1501, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1502, %r1500, %r1501;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1505, %r1497, %r1502;
	// end inline asm
	shr.u32 	%r1510, %r1488, 8;
	// begin inline asm
	lop3.b32 %r1508, %r581, %r1510, %r1489, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1512, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1513, %r1489, %r1512;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1516, %r1508, %r1513;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1519, %r592, %r1510, %r1500, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1523, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1524, %r1500, %r1523;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1527, %r1519, %r1524;
	// end inline asm
	// begin inline asm
	mov.b32 %r1535, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1546, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1534, %r2545, -2004318072;
	// begin inline asm
	lop3.b32 %r1532, %r581, %r1534, %r1535, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1536, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1537, %r1535, %r1536;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1540, %r1532, %r1537;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1543, %r592, %r1534, %r1546, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1547, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1548, %r1546, %r1547;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1551, %r1543, %r1548;
	// end inline asm
	shr.u32 	%r1556, %r1534, 8;
	// begin inline asm
	lop3.b32 %r1554, %r581, %r1556, %r1535, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1558, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1559, %r1535, %r1558;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1562, %r1554, %r1559;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1565, %r592, %r1556, %r1546, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1569, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1570, %r1546, %r1569;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1573, %r1565, %r1570;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1578, %r165, %r1540, %r2519;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1584, %r165, %r1551, %r2519;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1590, %r165, %r1562, %r2519;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1596, %r165, %r1573, %r2519;
	// end inline asm
	// begin inline asm
	mov.b32 %r1605, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1616, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1604, %r2527, -2004318072;
	// begin inline asm
	lop3.b32 %r1602, %r581, %r1604, %r1605, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1606, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1607, %r1605, %r1606;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1610, %r1602, %r1607;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1613, %r592, %r1604, %r1616, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1617, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1618, %r1616, %r1617;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1621, %r1613, %r1618;
	// end inline asm
	shr.u32 	%r1626, %r1604, 8;
	// begin inline asm
	lop3.b32 %r1624, %r581, %r1626, %r1605, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1628, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1629, %r1605, %r1628;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1632, %r1624, %r1629;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1635, %r592, %r1626, %r1616, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1639, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1640, %r1616, %r1639;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1643, %r1635, %r1640;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1646, %r196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1648, %r1646, %r1610, %r1578;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1652, %r196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1654, %r1652, %r1621, %r1584;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1658, %r196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1660, %r1658, %r1632, %r1590;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1664, %r196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1666, %r1664, %r1643, %r1596;
	// end inline asm
	// begin inline asm
	mov.b32 %r1675, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1686, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1674, %r2529, -2004318072;
	// begin inline asm
	lop3.b32 %r1672, %r581, %r1674, %r1675, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1676, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1677, %r1675, %r1676;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1680, %r1672, %r1677;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1683, %r592, %r1674, %r1686, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1687, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1688, %r1686, %r1687;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1691, %r1683, %r1688;
	// end inline asm
	shr.u32 	%r1696, %r1674, 8;
	// begin inline asm
	lop3.b32 %r1694, %r581, %r1696, %r1675, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1698, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1699, %r1675, %r1698;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1702, %r1694, %r1699;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1705, %r592, %r1696, %r1686, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1709, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1710, %r1686, %r1709;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1713, %r1705, %r1710;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1718, %r227, %r1680, %r1648;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1724, %r227, %r1691, %r1654;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1730, %r227, %r1702, %r1660;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1736, %r227, %r1713, %r1666;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1740, %r258;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1771, %r1740, %r1494, %r1718;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1746, %r258;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1768, %r1746, %r1505, %r1724;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1752, %r258;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1780, %r1752, %r1516, %r1730;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1758, %r258;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1777, %r1758, %r1527, %r1736;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1764, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1766, %r1764, %r1768;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1769, %r261, %r1771, %r1766;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1773, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1775, %r1773, %r1777;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1778, %r261, %r1780, %r1775;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1782, %r264, %r1771;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1785, %r261, %r1768, %r1782;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1789, %r264, %r1780;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1792, %r261, %r1777, %r1789;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1823, %r1820}, {%r267, %r273, %r270, %r276}, {%r1769, %r1785}, {%r2519, %r2519};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1832, %r1829}, {%r267, %r273, %r270, %r276}, {%r1778, %r1792}, {%r2519, %r2519};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1816, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1818, %r1816, %r1820;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1821, %r279, %r1823, %r1818;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1825, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1827, %r1825, %r1829;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1830, %r279, %r1832, %r1827;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1834, %r282, %r1823;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1837, %r279, %r1820, %r1834;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1841, %r282, %r1832;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1844, %r279, %r1829, %r1841;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1848, %r1849}, {%r285, %r291, %r288, %r294}, {%r1821, %r1837}, {%r2519, %r2519};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1858, %r1859}, {%r285, %r291, %r288, %r294}, {%r1830, %r1844}, {%r2519, %r2519};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1868, %r59, %r1848;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1871, %r59, %r1849;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1874, %r59, %r1858;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1877, %r59, %r1859;
	// end inline asm
	// begin inline asm
	mov.b32 %r1880, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1881, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1882, %r1868, %r1880;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1885, %r1882, %r1881;
	// end inline asm
	// begin inline asm
	mov.b32 %r1888, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1889, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1890, %r1871, %r1888;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1893, %r1890, %r1889;
	// end inline asm
	// begin inline asm
	mov.b32 %r1896, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1897, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1898, %r1874, %r1896;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1901, %r1898, %r1897;
	// end inline asm
	// begin inline asm
	mov.b32 %r1904, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r1905, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1906, %r1877, %r1904;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1909, %r1906, %r1905;
	// end inline asm
	// begin inline asm
	mov.b32 %r1915, {%rs65, %rs65};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1913, %r1885, %r1915;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1916, %r1893, %r1915;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1919, %r1901, %r1915;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1922, %r1909, %r1915;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1925, %r1913, %r1919, %r1022;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1929, %r1916, %r1922, %r1022;
	// end inline asm
	shl.b32 	%r1936, %r1929, 4;
	// begin inline asm
	lop3.b32 %r1933, %r1028, %r1925, %r1936, 202;
	// end inline asm
	st.shared.u32 	[%rd148], %r1933;
	add.s32 	%r2414, %r34, %r2394;
	add.s32 	%r2415, %r2414, %r2392;
	add.s32 	%r2416, %r2415, %r2396;
	add.s32 	%r2417, %r2416, %r30;
	add.s32 	%r2418, %r2417, %r2398;
	mul.wide.u32 	%rd92, %r2418, 4;
	add.s64 	%rd93, %rd50, %rd92;
	ld.shared.u32 	%r2542, [%rd93];
	// begin inline asm
	mov.b32 %r1942, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1953, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1941, %r2542, -2004318072;
	// begin inline asm
	lop3.b32 %r1939, %r581, %r1941, %r1942, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1943, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1944, %r1942, %r1943;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1947, %r1939, %r1944;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1950, %r592, %r1941, %r1953, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1954, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1955, %r1953, %r1954;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1958, %r1950, %r1955;
	// end inline asm
	shr.u32 	%r1963, %r1941, 8;
	// begin inline asm
	lop3.b32 %r1961, %r581, %r1963, %r1942, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1965, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1966, %r1942, %r1965;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1969, %r1961, %r1966;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1972, %r592, %r1963, %r1953, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1976, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1977, %r1953, %r1976;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1980, %r1972, %r1977;
	// end inline asm
	// begin inline asm
	mov.b32 %r1988, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r1999, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r1987, %r2544, -2004318072;
	// begin inline asm
	lop3.b32 %r1985, %r581, %r1987, %r1988, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1989, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1990, %r1988, %r1989;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1993, %r1985, %r1990;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1996, %r592, %r1987, %r1999, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2000, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2001, %r1999, %r2000;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2004, %r1996, %r2001;
	// end inline asm
	shr.u32 	%r2009, %r1987, 8;
	// begin inline asm
	lop3.b32 %r2007, %r581, %r2009, %r1988, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2011, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2012, %r1988, %r2011;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2015, %r2007, %r2012;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2018, %r592, %r2009, %r1999, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2022, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2023, %r1999, %r2022;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2026, %r2018, %r2023;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2031, %r165, %r1993, %r2519;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2037, %r165, %r2004, %r2519;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2043, %r165, %r2015, %r2519;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2049, %r165, %r2026, %r2519;
	// end inline asm
	// begin inline asm
	mov.b32 %r2058, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r2069, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r2057, %r2528, -2004318072;
	// begin inline asm
	lop3.b32 %r2055, %r581, %r2057, %r2058, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2059, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2060, %r2058, %r2059;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2063, %r2055, %r2060;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2066, %r592, %r2057, %r2069, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2070, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2071, %r2069, %r2070;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2074, %r2066, %r2071;
	// end inline asm
	shr.u32 	%r2079, %r2057, 8;
	// begin inline asm
	lop3.b32 %r2077, %r581, %r2079, %r2058, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2081, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2082, %r2058, %r2081;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2085, %r2077, %r2082;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2088, %r592, %r2079, %r2069, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2092, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2093, %r2069, %r2092;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2096, %r2088, %r2093;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2099, %r196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2101, %r2099, %r2063, %r2031;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2105, %r196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2107, %r2105, %r2074, %r2037;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2111, %r196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2113, %r2111, %r2085, %r2043;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2117, %r196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2119, %r2117, %r2096, %r2049;
	// end inline asm
	// begin inline asm
	mov.b32 %r2128, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	mov.b32 %r2139, {%rs238, %rs238};
	// end inline asm
	xor.b32  	%r2127, %r2530, -2004318072;
	// begin inline asm
	lop3.b32 %r2125, %r581, %r2127, %r2128, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2129, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2130, %r2128, %r2129;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2133, %r2125, %r2130;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2136, %r592, %r2127, %r2139, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2140, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2141, %r2139, %r2140;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2144, %r2136, %r2141;
	// end inline asm
	shr.u32 	%r2149, %r2127, 8;
	// begin inline asm
	lop3.b32 %r2147, %r581, %r2149, %r2128, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2151, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2152, %r2128, %r2151;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2155, %r2147, %r2152;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2158, %r592, %r2149, %r2139, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2162, {%rs246, %rs246};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2163, %r2139, %r2162;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2166, %r2158, %r2163;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2171, %r227, %r2133, %r2101;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2177, %r227, %r2144, %r2107;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2183, %r227, %r2155, %r2113;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2189, %r227, %r2166, %r2119;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2193, %r258;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2224, %r2193, %r1947, %r2171;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2199, %r258;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2221, %r2199, %r1958, %r2177;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2205, %r258;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2233, %r2205, %r1969, %r2183;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2211, %r258;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2230, %r2211, %r1980, %r2189;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2217, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2219, %r2217, %r2221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2222, %r261, %r2224, %r2219;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2226, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2228, %r2226, %r2230;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2231, %r261, %r2233, %r2228;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2235, %r264, %r2224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2238, %r261, %r2221, %r2235;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2242, %r264, %r2233;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2245, %r261, %r2230, %r2242;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2276, %r2273}, {%r267, %r273, %r270, %r276}, {%r2222, %r2238}, {%r2519, %r2519};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2285, %r2282}, {%r267, %r273, %r270, %r276}, {%r2231, %r2245}, {%r2519, %r2519};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2269, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2271, %r2269, %r2273;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2274, %r279, %r2276, %r2271;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2278, %r282;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2280, %r2278, %r2282;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2283, %r279, %r2285, %r2280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2287, %r282, %r2276;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2290, %r279, %r2273, %r2287;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2294, %r282, %r2285;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2297, %r279, %r2282, %r2294;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2301, %r2302}, {%r285, %r291, %r288, %r294}, {%r2274, %r2290}, {%r2519, %r2519};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2311, %r2312}, {%r285, %r291, %r288, %r294}, {%r2283, %r2297}, {%r2519, %r2519};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2321, %r59, %r2301;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2324, %r59, %r2302;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2327, %r59, %r2311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2330, %r59, %r2312;
	// end inline asm
	// begin inline asm
	mov.b32 %r2333, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r2334, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2335, %r2321, %r2333;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2338, %r2335, %r2334;
	// end inline asm
	// begin inline asm
	mov.b32 %r2341, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r2342, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2343, %r2324, %r2341;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2346, %r2343, %r2342;
	// end inline asm
	// begin inline asm
	mov.b32 %r2349, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r2350, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2351, %r2327, %r2349;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2354, %r2351, %r2350;
	// end inline asm
	// begin inline asm
	mov.b32 %r2357, {%rs260, %rs260};
	// end inline asm
	// begin inline asm
	mov.b32 %r2358, {%rs51, %rs51};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2359, %r2330, %r2357;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2362, %r2359, %r2358;
	// end inline asm
	// begin inline asm
	mov.b32 %r2368, {%rs65, %rs65};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2366, %r2338, %r2368;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2369, %r2346, %r2368;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2372, %r2354, %r2368;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2375, %r2362, %r2368;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2378, %r2366, %r2372, %r1022;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2382, %r2369, %r2375, %r1022;
	// end inline asm
	shl.b32 	%r2389, %r2382, 4;
	// begin inline asm
	lop3.b32 %r2386, %r1028, %r2378, %r2389, 202;
	// end inline asm
	st.shared.u32 	[%rd149], %r2386;
	add.s32 	%r2543, %r2543, 64;
	add.s64 	%rd149, %rd149, 8324;
	add.s64 	%rd148, %rd148, 8324;
	add.s64 	%rd147, %rd147, 8324;
	add.s64 	%rd146, %rd146, 8324;
	add.s32 	%r2534, %r2534, 1;
	setp.eq.s32 	%p163, %r2543, 256;
	mov.u32 	%r2539, %r2529;
	mov.u32 	%r2540, %r2530;
	mov.u32 	%r2544, %r2528;
	mov.u32 	%r2545, %r2527;
	mov.u32 	%r2546, %r2522;
	mov.u32 	%r2547, %r2521;
	@%p163 bra 	$L__BB0_33;
	bra.uni 	$L__BB0_32;
$L__BB0_33:                             // %guard_exit10758
                                        //   in Loop: Header=BB0_31 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r2424, [%rd6];
	ld.shared.u32 	%r2425, [%rd7+128];
	ld.shared.u32 	%r2432, [%rd7+4];
	ld.shared.u32 	%r2433, [%rd7+132];
	ld.shared.u32 	%r2440, [%rd6+8324];
	ld.shared.u32 	%r2441, [%rd7+8452];
	ld.shared.u32 	%r2448, [%rd7+8328];
	ld.shared.u32 	%r2449, [%rd7+8456];
	ld.shared.u32 	%r2456, [%rd6+16648];
	ld.shared.u32 	%r2457, [%rd7+16776];
	ld.shared.u32 	%r2464, [%rd7+16652];
	ld.shared.u32 	%r2465, [%rd7+16780];
	ld.shared.u32 	%r2472, [%rd6+24972];
	ld.shared.u32 	%r2473, [%rd7+25100];
	ld.shared.u32 	%r2480, [%rd7+24976];
	ld.shared.u32 	%r2481, [%rd7+25104];
	// begin inline asm
	prmt.b32 %r2419, %r2424, %r2425, %r488;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2423, %r2424, %r2425, %r492;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2427, %r2432, %r2433, %r488;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2431, %r2432, %r2433, %r492;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2435, %r2440, %r2441, %r488;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2439, %r2440, %r2441, %r492;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2443, %r2448, %r2449, %r488;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2447, %r2448, %r2449, %r492;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2451, %r2456, %r2457, %r488;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2455, %r2456, %r2457, %r492;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2459, %r2464, %r2465, %r488;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2463, %r2464, %r2465, %r492;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2467, %r2472, %r2473, %r488;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2471, %r2472, %r2473, %r492;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2475, %r2480, %r2481, %r488;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2479, %r2480, %r2481, %r492;
	// end inline asm
	selp.b32 	%r2483, %r2423, %r2419, %p150;
	shfl.sync.bfly.b32	%r94, %r2483, 8, 31, -1;
	selp.b32 	%r2484, %r2431, %r2427, %p150;
	shfl.sync.bfly.b32	%r95, %r2484, 8, 31, -1;
	selp.b32 	%r2485, %r2439, %r2435, %p150;
	shfl.sync.bfly.b32	%r2486, %r2485, 8, 31, -1;
	selp.b32 	%r2487, %r2447, %r2443, %p150;
	shfl.sync.bfly.b32	%r2488, %r2487, 8, 31, -1;
	selp.b32 	%r2489, %r2455, %r2451, %p150;
	shfl.sync.bfly.b32	%r2490, %r2489, 8, 31, -1;
	selp.b32 	%r2491, %r2463, %r2459, %p150;
	shfl.sync.bfly.b32	%r2492, %r2491, 8, 31, -1;
	selp.b32 	%r2493, %r2471, %r2467, %p150;
	shfl.sync.bfly.b32	%r2494, %r2493, 8, 31, -1;
	selp.b32 	%r2495, %r2479, %r2475, %p150;
	shfl.sync.bfly.b32	%r2496, %r2495, 8, 31, -1;
	setp.eq.s32 	%p165, %r48, 0;
	shl.b32 	%r2520, %r47, 10;
	@%p165 bra 	$L__BB0_35;
// %bb.34:                              // %pass9898
                                        //   in Loop: Header=BB0_31 Depth=1
	selp.b32 	%r2497, %r95, %r2431, %p150;
	selp.b32 	%r2498, %r2427, %r95, %p150;
	selp.b32 	%r2499, %r94, %r2423, %p150;
	selp.b32 	%r2500, %r2419, %r94, %p150;
	or.b32  	%r2502, %r2520, %r22;
	or.b32  	%r2503, %r2502, %r28;
	or.b32  	%r2504, %r2503, %r23;
	cvt.u64.u32 	%rd94, %r2504;
	add.s64 	%rd95, %rd94, %rd8;
	shr.u64 	%rd96, %rd95, 39;
	add.s64 	%rd97, %rd95, %rd96;
	shr.s64 	%rd98, %rd97, 25;
	setp.lt.s64 	%p167, %rd95, 0;
	and.b64  	%rd99, %rd97, -33554432;
	setp.ne.s64 	%p168, %rd99, %rd95;
	and.pred  	%p169, %p167, %p168;
	selp.u64 	%rd100, 1, 0, %p169;
	sub.s64 	%rd101, %rd100, %rd98;
	shl.b64 	%rd102, %rd101, 25;
	add.s64 	%rd103, %rd102, %rd95;
	shl.b64 	%rd104, %rd103, 2;
	add.s64 	%rd105, %rd3, %rd104;
	st.global.v4.u32 	[%rd105], {%r2500, %r2498, %r2499, %r2497};
$L__BB0_35:                             // %pass9973
                                        //   in Loop: Header=BB0_31 Depth=1
	or.b32  	%r88, %r47, 64;
	setp.lt.u32 	%p170, %r88, 192;
	@%p170 bra 	$L__BB0_37;
// %bb.36:                              // %pass9996
                                        //   in Loop: Header=BB0_31 Depth=1
	selp.b32 	%r96, %r2435, %r2486, %p150;
	selp.b32 	%r97, %r2486, %r2439, %p150;
	selp.b32 	%r98, %r2443, %r2488, %p150;
	selp.b32 	%r99, %r2488, %r2447, %p150;
	shl.b32 	%r2505, %r88, 10;
	or.b32  	%r2506, %r2505, %r22;
	or.b32  	%r2507, %r29, %r2506;
	cvt.u64.u32 	%rd106, %r2507;
	add.s64 	%rd107, %rd106, %rd8;
	shr.u64 	%rd108, %rd107, 39;
	add.s64 	%rd109, %rd107, %rd108;
	shr.s64 	%rd110, %rd109, 25;
	setp.lt.s64 	%p171, %rd107, 0;
	and.b64  	%rd111, %rd109, -33554432;
	setp.ne.s64 	%p172, %rd111, %rd107;
	and.pred  	%p173, %p171, %p172;
	selp.u64 	%rd112, 1, 0, %p173;
	sub.s64 	%rd113, %rd112, %rd110;
	shl.b64 	%rd114, %rd113, 25;
	add.s64 	%rd115, %rd114, %rd107;
	shl.b64 	%rd116, %rd115, 2;
	add.s64 	%rd117, %rd3, %rd116;
	st.global.v4.u32 	[%rd117], {%r96, %r98, %r97, %r99};
$L__BB0_37:                             // %pass10071
                                        //   in Loop: Header=BB0_31 Depth=1
	or.b32  	%r89, %r47, 128;
	selp.b32 	%r104, %r2467, %r2494, %p150;
	selp.b32 	%r105, %r2494, %r2471, %p150;
	selp.b32 	%r106, %r2475, %r2496, %p150;
	selp.b32 	%r107, %r2496, %r2479, %p150;
	setp.lt.u32 	%p174, %r89, 192;
	@%p174 bra 	$L__BB0_39;
// %bb.38:                              // %pass10094
                                        //   in Loop: Header=BB0_31 Depth=1
	selp.b32 	%r100, %r2451, %r2490, %p150;
	selp.b32 	%r101, %r2490, %r2455, %p150;
	selp.b32 	%r102, %r2459, %r2492, %p150;
	selp.b32 	%r103, %r2492, %r2463, %p150;
	shl.b32 	%r2508, %r89, 10;
	or.b32  	%r2509, %r2508, %r22;
	or.b32  	%r2510, %r29, %r2509;
	cvt.u64.u32 	%rd118, %r2510;
	add.s64 	%rd119, %rd118, %rd8;
	shr.u64 	%rd120, %rd119, 39;
	add.s64 	%rd121, %rd119, %rd120;
	shr.s64 	%rd122, %rd121, 25;
	setp.lt.s64 	%p175, %rd119, 0;
	and.b64  	%rd123, %rd121, -33554432;
	setp.ne.s64 	%p176, %rd123, %rd119;
	and.pred  	%p177, %p175, %p176;
	selp.u64 	%rd124, 1, 0, %p177;
	sub.s64 	%rd125, %rd124, %rd122;
	shl.b64 	%rd126, %rd125, 25;
	add.s64 	%rd127, %rd126, %rd119;
	shl.b64 	%rd128, %rd127, 2;
	add.s64 	%rd129, %rd3, %rd128;
	st.global.v4.u32 	[%rd129], {%r100, %r102, %r101, %r103};
	bra.uni 	$L__BB0_39;
$L__BB0_40:                             // %L21943
	st.global.u32 	[%rd5], %r2519;
	ret;
$L__BB0_9:                              // %L180
	mov.u32 	%r2518, 2;
	st.global.u32 	[%rd5], %r2518;
	mov.u64 	%rd144, exception2044;
	cvta.global.u64 	%rd145, %rd144;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd145;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r108;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_12:                             // %L288
	mov.u32 	%r2517, 3;
	st.global.u32 	[%rd5], %r2517;
	mov.u64 	%rd142, exception2044;
	cvta.global.u64 	%rd143, %rd142;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd143;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r108;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd42, exception12064;
	cvta.global.u64 	%rd43, %rd42;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd43;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r108;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_3:                              // %L24
	mov.u64 	%rd44, exception12064;
	cvta.global.u64 	%rd45, %rd44;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd45;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r108;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
