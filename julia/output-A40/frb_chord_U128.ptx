// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception4036[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<360>;
	.reg .b16 	%rs<249>;
	.reg .b32 	%r<3808>;
	.reg .f32 	%f<787>;
	.reg .b64 	%rd<530>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r377, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd41, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r386, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p3, %r386, 76895;
	@%p3 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd42, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r378, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r4, %ctaid.x;
	or.b32  	%r387, %r2, %r3;
	mad.lo.s32 	%r388, %r4, 768, %r387;
	mul.wide.u32 	%rd49, %r388, 4;
	add.s64 	%rd6, %rd42, %rd49;
	mov.u32 	%r389, 1;
	st.global.u32 	[%rd6], %r389;
	setp.gt.u32 	%p4, %r378, 255;
	@%p4 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r379, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p5, %r379, %r378;
	setp.gt.s32 	%p6, %r379, 511;
	or.pred  	%p7, %p5, %p6;
	@%p7 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r380, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r5, %r379, %r378;
	mad.lo.s32 	%r390, %r5, -1431655765, 715827872;
	shf.r.wrap.b32 	%r391, %r390, %r390, 4;
	setp.gt.u32 	%p8, %r391, 89478484;
	setp.gt.u32 	%p9, %r380, 1023;
	or.pred  	%p10, %p8, %p9;
	@%p10 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r381, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p11, %r381, %r380;
	setp.lt.s32 	%p12, %r381, 2048;
	and.pred  	%p13, %p11, %p12;
	sub.s32 	%r392, %r381, %r380;
	setp.eq.s32 	%p14, %r392, %r5;
	and.pred  	%p15, %p13, %p14;
	@%p15 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %L258
	ld.param.u32 	%r382, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p16, %r382, 0;
	@%p16 bra 	$L__BB0_12;
// %bb.8:                               // %L260
	ld.param.u32 	%r383, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p17, %r383, %r382;
	setp.gt.s32 	%p18, %r383, 128;
	or.pred  	%p19, %p17, %p18;
	@%p19 bra 	$L__BB0_12;
// %bb.9:                               // %L270
	ld.param.u32 	%r384, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r6, %r383, %r382;
	and.b32  	%r393, %r6, 127;
	setp.ne.s32 	%p20, %r393, 0;
	setp.lt.s32 	%p21, %r384, 0;
	or.pred  	%p22, %p20, %p21;
	@%p22 bra 	$L__BB0_12;
// %bb.10:                              // %L276
	ld.param.u32 	%r385, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p23, %r385, %r384;
	setp.gt.s32 	%p24, %r385, 512;
	or.pred  	%p25, %p23, %p24;
	@%p25 bra 	$L__BB0_12;
// %bb.11:                              // %L286
	sub.s32 	%r394, %r385, %r384;
	and.b32  	%r395, %r394, 127;
	setp.eq.s32 	%p26, %r395, 0;
	setp.eq.s32 	%p27, %r394, %r6;
	and.pred  	%p28, %p26, %p27;
	@%p28 bra 	$L__BB0_199;
	bra.uni 	$L__BB0_12;
$L__BB0_199:                            // %pass162
	and.b32  	%r240, %r3, 3;
	shr.u32 	%r241, %r3, 2;
	mul.lo.s32 	%r396, %r240, %r241;
	and.b32  	%r397, %r396, 7;
	cvt.rn.f32.s32 	%f201, %r397;
	mov.f32 	%f202, 0f40800000;
	div.approx.f32 	%f169, %f201, %f202;
	abs.f32 	%f785, %f169;
	setp.lt.f32 	%p29, %f785, 0f40000000;
	setp.gtu.f32 	%p359, %f785, 0f4B800000;
	mov.f32 	%f781, %f785;
	@%p29 bra 	$L__BB0_211;
// %bb.200:
	@%p359 bra 	$L__BB0_207;
	bra.uni 	$L__BB0_201;
$L__BB0_207:
	mov.b32 	%r243, %f785;
	and.b32  	%r398, %r243, 8388607;
	or.b32  	%r3803, %r398, 1065353216;
	mov.b32 	%f780, %r3803;
	add.s32 	%r399, %r243, -1073741824;
	and.b32  	%r3804, %r399, -8388608;
	setp.eq.s32 	%p36, %r3804, 0;
	@%p36 bra 	$L__BB0_210;
// %bb.208:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f212, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f211,%f212;
	// end inline asm
$L__BB0_209:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r400, %r3804, 192937984;
	add.s32 	%r401, %r3803, %r400;
	mov.b32 	%f213, %r401;
	mul.f32 	%f214, %f211, %f213;
	sub.f32 	%f215, %f213, %f214;
	fma.rn.f32 	%f216, %f215, %f211, %f214;
	sub.f32 	%f217, %f213, %f216;
	fma.rz.f32 	%f218, %f217, %f211, %f216;
	cvt.rzi.f32.f32 	%f219, %f218;
	sub.f32 	%f780, %f213, %f219;
	sub.s32 	%r3804, %r3804, %r400;
	mov.b32 	%r3803, %f780;
	setp.ne.s32 	%p37, %r3804, 0;
	setp.ne.s32 	%p38, %r3803, 0;
	and.pred  	%p39, %p37, %p38;
	@%p39 bra 	$L__BB0_209;
$L__BB0_210:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p40, %r243, 2139095039;
	selp.f32 	%f220, 0f7FFFFFFF, 0f4B800000, %p40;
	mul.f32 	%f221, %f780, 0f34000000;
	mul.f32 	%f781, %f220, %f221;
	bra.uni 	$L__BB0_211;
$L__BB0_201:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f203, 0f40000000;
	div.approx.f32 	%f204, %f785, %f203;
	cvt.rzi.f32.f32 	%f779, %f204;
	fma.rn.f32 	%f172, %f779, 0fC0000000, %f785;
	mov.b32 	%r242, %f172;
	setp.lt.u32 	%p31, %r242, 1073741824;
	@%p31 bra 	$L__BB0_206;
// %bb.202:
	setp.lt.u32 	%p32, %r242, -2147483647;
	@%p32 bra 	$L__BB0_204;
// %bb.203:
	add.f32 	%f209, %f779, 0fBF800000;
	setp.lt.f32 	%p35, %f172, 0fC0000000;
	add.f32 	%f210, %f209, 0fBF800000;
	selp.f32 	%f779, %f210, %f209, %p35;
	bra.uni 	$L__BB0_206;
$L__BB0_204:
	add.f32 	%f779, %f779, 0f3F800000;
	setp.ltu.f32 	%p33, %f172, 0f40800000;
	@%p33 bra 	$L__BB0_206;
// %bb.205:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f205, %f779, 0f3F800000;
	fma.rn.f32 	%f207, %f203, 0fC0400000, %f172;
	setp.ge.f32 	%p34, %f207, 0f00000000;
	add.f32 	%f208, %f205, 0f3F800000;
	selp.f32 	%f779, %f208, %f205, %p34;
$L__BB0_206:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f781, %f779, 0fC0000000, %f785;
$L__BB0_211:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f222, %f781;
	setp.gtu.f32 	%p41, %f222, 0f7F800000;
	mov.b32 	%r402, %f169;
	and.b32  	%r250, %r402, -2147483648;
	@%p41 bra 	$L__BB0_213;
// %bb.212:
	mov.b32 	%r403, %f781;
	or.b32  	%r404, %r250, %r403;
	mov.b32 	%f781, %r404;
$L__BB0_213:                            // %__nv_fmodf.exit
	mov.f32 	%f223, 0f00000000;
	shl.b32 	%r253, %r3, 1;
	and.b32  	%r254, %r253, 6;
	or.b32  	%r255, %r254, 1;
	setp.eq.s32 	%p49, %r254, 6;
	mov.f32 	%f729, 0f41C00000;
	mul.lo.s32 	%r3717, %r254, %r241;
	mov.f32 	%f20, %f223;
	mov.f32 	%f21, %f223;
	@%p49 bra 	$L__BB0_28;
// %bb.13:                              // %L487
	cvt.u16.u32 	%rs1, %r3717;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 13;
	mul.lo.s16 	%rs5, %rs4, 48;
	sub.s16 	%rs6, %rs1, %rs5;
	and.b16  	%rs7, %rs6, 255;
	cvt.rn.f32.u16 	%f255, %rs7;
	div.approx.f32 	%f1, %f255, %f729;
	abs.f32 	%f733, %f1;
	setp.lt.f32 	%p50, %f733, 0f40000000;
	@%p50 bra 	$L__BB0_25;
// %bb.14:
	setp.gtu.f32 	%p51, %f733, 0f4B800000;
	@%p51 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_15;
$L__BB0_21:
	mov.b32 	%r8, %f733;
	and.b32  	%r420, %r8, 8388607;
	or.b32  	%r3721, %r420, 1065353216;
	mov.b32 	%f732, %r3721;
	add.s32 	%r421, %r8, -1073741824;
	and.b32  	%r3722, %r421, -8388608;
	setp.eq.s32 	%p57, %r3722, 0;
	@%p57 bra 	$L__BB0_24;
// %bb.22:                              // %__nv_fmaf_rn.exit4.i.i.i1017.preheader
	mov.f32 	%f266, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f265,%f266;
	// end inline asm
$L__BB0_23:                             // %__nv_fmaf_rn.exit4.i.i.i1017
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r422, %r3722, 192937984;
	add.s32 	%r423, %r3721, %r422;
	mov.b32 	%f267, %r423;
	mul.f32 	%f268, %f265, %f267;
	sub.f32 	%f269, %f267, %f268;
	fma.rn.f32 	%f270, %f269, %f265, %f268;
	sub.f32 	%f271, %f267, %f270;
	fma.rz.f32 	%f272, %f271, %f265, %f270;
	cvt.rzi.f32.f32 	%f273, %f272;
	sub.f32 	%f732, %f267, %f273;
	sub.s32 	%r3722, %r3722, %r422;
	mov.b32 	%r3721, %f732;
	setp.ne.s32 	%p58, %r3722, 0;
	setp.ne.s32 	%p59, %r3721, 0;
	and.pred  	%p60, %p58, %p59;
	@%p60 bra 	$L__BB0_23;
$L__BB0_24:                             // %__internal_fmodf_slowpath_mod.exit.i.i1019
	setp.gt.u32 	%p61, %r8, 2139095039;
	selp.f32 	%f274, 0f7FFFFFFF, 0f4B800000, %p61;
	mul.f32 	%f275, %f732, 0f34000000;
	mul.f32 	%f733, %f274, %f275;
	bra.uni 	$L__BB0_25;
$L__BB0_15:                             // %__nv_fast_fdividef.exit.i.i.i996
	mov.f32 	%f257, 0f40000000;
	div.approx.f32 	%f258, %f733, %f257;
	cvt.rzi.f32.f32 	%f731, %f258;
	fma.rn.f32 	%f4, %f731, 0fC0000000, %f733;
	mov.b32 	%r7, %f4;
	setp.lt.u32 	%p52, %r7, 1073741824;
	@%p52 bra 	$L__BB0_20;
// %bb.16:
	setp.lt.u32 	%p53, %r7, -2147483647;
	@%p53 bra 	$L__BB0_18;
// %bb.17:
	add.f32 	%f263, %f731, 0fBF800000;
	setp.lt.f32 	%p56, %f4, 0fC0000000;
	add.f32 	%f264, %f263, 0fBF800000;
	selp.f32 	%f731, %f264, %f263, %p56;
	bra.uni 	$L__BB0_20;
$L__BB0_18:
	add.f32 	%f731, %f731, 0f3F800000;
	setp.ltu.f32 	%p54, %f4, 0f40800000;
	@%p54 bra 	$L__BB0_20;
// %bb.19:                              // %__nv_fmaf_rn.exit.i.i.i1000
	add.f32 	%f259, %f731, 0f3F800000;
	fma.rn.f32 	%f261, %f257, 0fC0400000, %f4;
	setp.ge.f32 	%p55, %f261, 0f00000000;
	add.f32 	%f262, %f259, 0f3F800000;
	selp.f32 	%f731, %f262, %f259, %p55;
$L__BB0_20:                             // %__internal_fmodf_fastpath_quot.exit.i.i1003
	fma.rn.f32 	%f733, %f731, 0fC0000000, %f733;
$L__BB0_25:                             // %__internal_fmodf_kernel.exit.i1022
	abs.f32 	%f276, %f733;
	setp.gtu.f32 	%p62, %f276, 0f7F800000;
	@%p62 bra 	$L__BB0_27;
// %bb.26:
	mov.b32 	%r424, %f1;
	and.b32  	%r425, %r424, -2147483648;
	mov.b32 	%r426, %f733;
	or.b32  	%r427, %r425, %r426;
	mov.b32 	%f733, %r427;
$L__BB0_27:                             // %__nv_fmodf.exit1023
	add.f32 	%f277, %f733, %f733;
	mov.b32 	%r428, %f277;
	and.b32  	%r429, %r428, -2147483648;
	or.b32  	%r430, %r429, 1056964608;
	mov.b32 	%f278, %r430;
	add.f32 	%f279, %f277, %f278;
	cvt.rzi.f32.f32 	%f280, %f279;
	abs.f32 	%f281, %f277;
	setp.gt.f32 	%p63, %f281, 0f4B000000;
	selp.f32 	%f282, %f277, %f280, %p63;
	cvt.rzi.f32.f32 	%f283, %f277;
	setp.lt.f32 	%p64, %f281, 0f3F000000;
	selp.f32 	%f284, %f283, %f282, %p64;
	cvt.rzi.s32.f32 	%r431, %f284;
	fma.rn.f32 	%f285, %f284, 0fBF000000, %f733;
	mul.f32 	%f286, %f285, %f285;
	fma.rn.f32 	%f287, %f286, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f288, %f286, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f289, %f287, %f286, 0fC0A55DF6;
	fma.rn.f32 	%f290, %f288, %f286, 0f4081E0CF;
	fma.rn.f32 	%f291, %f286, %f285, 0f00000000;
	fma.rn.f32 	%f292, %f290, %f286, 0fC09DE9E6;
	fma.rn.f32 	%f293, %f289, %f291, 0f00000000;
	fma.rn.f32 	%f294, %f292, %f286, 0f3F800000;
	fma.rn.f32 	%f295, %f285, 0f40490FDB, %f293;
	and.b32  	%r432, %r431, 1;
	setp.eq.b32 	%p65, %r432, 1;
	selp.f32 	%f296, %f294, %f295, %p65;
	selp.f32 	%f297, %f295, %f294, %p65;
	and.b32  	%r433, %r431, 2;
	setp.eq.s32 	%p66, %r433, 0;
	neg.f32 	%f298, %f296;
	selp.f32 	%f299, %f296, %f298, %p66;
	add.s32 	%r434, %r431, 1;
	and.b32  	%r435, %r434, 2;
	setp.eq.s32 	%p67, %r435, 0;
	mov.f32 	%f300, 0f00000000;
	sub.f32 	%f301, %f300, %f297;
	selp.f32 	%f302, %f297, %f301, %p67;
	cvt.rzi.f32.f32 	%f303, %f733;
	setp.eq.f32 	%p68, %f303, %f733;
	mul.f32 	%f304, %f733, 0f00000000;
	selp.f32 	%f21, %f304, %f299, %p68;
	abs.f32 	%f305, %f733;
	setp.gt.f32 	%p69, %f305, 0f4B800000;
	add.f32 	%f306, %f21, 0f3F800000;
	selp.f32 	%f20, %f306, %f302, %p69;
$L__BB0_28:                             // %L521
	setp.gt.u32 	%p70, %r255, 5;
	mul.lo.s32 	%r3718, %r255, %r241;
	mov.f32 	%f41, %f223;
	mov.f32 	%f42, %f223;
	@%p70 bra 	$L__BB0_44;
// %bb.29:                              // %L525
	mul.hi.u32 	%r437, %r3718, -1431655765;
	shr.u32 	%r438, %r437, 5;
	mul.lo.s32 	%r439, %r438, 48;
	sub.s32 	%r440, %r3718, %r439;
	cvt.rn.f32.s32 	%f308, %r440;
	div.approx.f32 	%f22, %f308, %f729;
	abs.f32 	%f739, %f22;
	setp.lt.f32 	%p71, %f739, 0f40000000;
	@%p71 bra 	$L__BB0_41;
// %bb.30:
	setp.gtu.f32 	%p72, %f739, 0f4B800000;
	@%p72 bra 	$L__BB0_37;
	bra.uni 	$L__BB0_31;
$L__BB0_37:
	mov.b32 	%r16, %f739;
	and.b32  	%r441, %r16, 8388607;
	or.b32  	%r3723, %r441, 1065353216;
	mov.b32 	%f738, %r3723;
	add.s32 	%r442, %r16, -1073741824;
	and.b32  	%r3724, %r442, -8388608;
	setp.eq.s32 	%p78, %r3724, 0;
	@%p78 bra 	$L__BB0_40;
// %bb.38:                              // %__nv_fmaf_rn.exit4.i.i.i1048.preheader
	mov.f32 	%f319, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f318,%f319;
	// end inline asm
$L__BB0_39:                             // %__nv_fmaf_rn.exit4.i.i.i1048
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r443, %r3724, 192937984;
	add.s32 	%r444, %r3723, %r443;
	mov.b32 	%f320, %r444;
	mul.f32 	%f321, %f318, %f320;
	sub.f32 	%f322, %f320, %f321;
	fma.rn.f32 	%f323, %f322, %f318, %f321;
	sub.f32 	%f324, %f320, %f323;
	fma.rz.f32 	%f325, %f324, %f318, %f323;
	cvt.rzi.f32.f32 	%f326, %f325;
	sub.f32 	%f738, %f320, %f326;
	sub.s32 	%r3724, %r3724, %r443;
	mov.b32 	%r3723, %f738;
	setp.ne.s32 	%p79, %r3724, 0;
	setp.ne.s32 	%p80, %r3723, 0;
	and.pred  	%p81, %p79, %p80;
	@%p81 bra 	$L__BB0_39;
$L__BB0_40:                             // %__internal_fmodf_slowpath_mod.exit.i.i1050
	setp.gt.u32 	%p82, %r16, 2139095039;
	selp.f32 	%f327, 0f7FFFFFFF, 0f4B800000, %p82;
	mul.f32 	%f328, %f738, 0f34000000;
	mul.f32 	%f739, %f327, %f328;
	bra.uni 	$L__BB0_41;
$L__BB0_31:                             // %__nv_fast_fdividef.exit.i.i.i1027
	mov.f32 	%f310, 0f40000000;
	div.approx.f32 	%f311, %f739, %f310;
	cvt.rzi.f32.f32 	%f737, %f311;
	fma.rn.f32 	%f25, %f737, 0fC0000000, %f739;
	mov.b32 	%r15, %f25;
	setp.lt.u32 	%p73, %r15, 1073741824;
	@%p73 bra 	$L__BB0_36;
// %bb.32:
	setp.lt.u32 	%p74, %r15, -2147483647;
	@%p74 bra 	$L__BB0_34;
// %bb.33:
	add.f32 	%f316, %f737, 0fBF800000;
	setp.lt.f32 	%p77, %f25, 0fC0000000;
	add.f32 	%f317, %f316, 0fBF800000;
	selp.f32 	%f737, %f317, %f316, %p77;
	bra.uni 	$L__BB0_36;
$L__BB0_34:
	add.f32 	%f737, %f737, 0f3F800000;
	setp.ltu.f32 	%p75, %f25, 0f40800000;
	@%p75 bra 	$L__BB0_36;
// %bb.35:                              // %__nv_fmaf_rn.exit.i.i.i1031
	add.f32 	%f312, %f737, 0f3F800000;
	fma.rn.f32 	%f314, %f310, 0fC0400000, %f25;
	setp.ge.f32 	%p76, %f314, 0f00000000;
	add.f32 	%f315, %f312, 0f3F800000;
	selp.f32 	%f737, %f315, %f312, %p76;
$L__BB0_36:                             // %__internal_fmodf_fastpath_quot.exit.i.i1034
	fma.rn.f32 	%f739, %f737, 0fC0000000, %f739;
$L__BB0_41:                             // %__internal_fmodf_kernel.exit.i1053
	abs.f32 	%f329, %f739;
	setp.gtu.f32 	%p83, %f329, 0f7F800000;
	@%p83 bra 	$L__BB0_43;
// %bb.42:
	mov.b32 	%r445, %f22;
	and.b32  	%r446, %r445, -2147483648;
	mov.b32 	%r447, %f739;
	or.b32  	%r448, %r446, %r447;
	mov.b32 	%f739, %r448;
$L__BB0_43:                             // %__nv_fmodf.exit1054
	add.f32 	%f330, %f739, %f739;
	mov.b32 	%r449, %f330;
	and.b32  	%r450, %r449, -2147483648;
	or.b32  	%r451, %r450, 1056964608;
	mov.b32 	%f331, %r451;
	add.f32 	%f332, %f330, %f331;
	cvt.rzi.f32.f32 	%f333, %f332;
	abs.f32 	%f334, %f330;
	setp.gt.f32 	%p84, %f334, 0f4B000000;
	selp.f32 	%f335, %f330, %f333, %p84;
	cvt.rzi.f32.f32 	%f336, %f330;
	setp.lt.f32 	%p85, %f334, 0f3F000000;
	selp.f32 	%f337, %f336, %f335, %p85;
	cvt.rzi.s32.f32 	%r452, %f337;
	fma.rn.f32 	%f338, %f337, 0fBF000000, %f739;
	mul.f32 	%f339, %f338, %f338;
	fma.rn.f32 	%f340, %f339, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f341, %f339, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f342, %f340, %f339, 0fC0A55DF6;
	fma.rn.f32 	%f343, %f341, %f339, 0f4081E0CF;
	fma.rn.f32 	%f344, %f339, %f338, 0f00000000;
	fma.rn.f32 	%f345, %f343, %f339, 0fC09DE9E6;
	fma.rn.f32 	%f346, %f342, %f344, 0f00000000;
	fma.rn.f32 	%f347, %f345, %f339, 0f3F800000;
	fma.rn.f32 	%f348, %f338, 0f40490FDB, %f346;
	and.b32  	%r453, %r452, 1;
	setp.eq.b32 	%p86, %r453, 1;
	selp.f32 	%f349, %f347, %f348, %p86;
	selp.f32 	%f350, %f348, %f347, %p86;
	and.b32  	%r454, %r452, 2;
	setp.eq.s32 	%p87, %r454, 0;
	neg.f32 	%f351, %f349;
	selp.f32 	%f352, %f349, %f351, %p87;
	add.s32 	%r455, %r452, 1;
	and.b32  	%r456, %r455, 2;
	setp.eq.s32 	%p88, %r456, 0;
	mov.f32 	%f353, 0f00000000;
	sub.f32 	%f354, %f353, %f350;
	selp.f32 	%f355, %f350, %f354, %p88;
	cvt.rzi.f32.f32 	%f356, %f739;
	setp.eq.f32 	%p89, %f356, %f739;
	mul.f32 	%f357, %f739, 0f00000000;
	selp.f32 	%f42, %f357, %f352, %p89;
	abs.f32 	%f358, %f739;
	setp.gt.f32 	%p90, %f358, 0f4B800000;
	add.f32 	%f359, %f42, 0f3F800000;
	selp.f32 	%f41, %f359, %f355, %p90;
$L__BB0_44:                             // %L559
	setp.gt.u32 	%p92, %r3, 23;
	or.pred  	%p1, %p49, %p92;
	mov.f32 	%f730, 0f40400000;
	mov.f32 	%f62, %f223;
	mov.f32 	%f63, %f223;
	@%p1 bra 	$L__BB0_60;
// %bb.45:                              // %L597
	cvt.u16.u32 	%rs8, %r3717;
	and.b16  	%rs9, %rs8, 255;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 10;
	mul.lo.s16 	%rs12, %rs11, 6;
	sub.s16 	%rs13, %rs8, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f361, %rs14;
	div.approx.f32 	%f43, %f361, %f730;
	abs.f32 	%f745, %f43;
	setp.lt.f32 	%p93, %f745, 0f40000000;
	@%p93 bra 	$L__BB0_57;
// %bb.46:
	setp.gtu.f32 	%p94, %f745, 0f4B800000;
	@%p94 bra 	$L__BB0_53;
	bra.uni 	$L__BB0_47;
$L__BB0_53:
	mov.b32 	%r26, %f745;
	and.b32  	%r464, %r26, 8388607;
	or.b32  	%r3725, %r464, 1065353216;
	mov.b32 	%f744, %r3725;
	add.s32 	%r465, %r26, -1073741824;
	and.b32  	%r3726, %r465, -8388608;
	setp.eq.s32 	%p100, %r3726, 0;
	@%p100 bra 	$L__BB0_56;
// %bb.54:                              // %__nv_fmaf_rn.exit4.i.i.i1079.preheader
	mov.f32 	%f372, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f371,%f372;
	// end inline asm
$L__BB0_55:                             // %__nv_fmaf_rn.exit4.i.i.i1079
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r466, %r3726, 192937984;
	add.s32 	%r467, %r3725, %r466;
	mov.b32 	%f373, %r467;
	mul.f32 	%f374, %f371, %f373;
	sub.f32 	%f375, %f373, %f374;
	fma.rn.f32 	%f376, %f375, %f371, %f374;
	sub.f32 	%f377, %f373, %f376;
	fma.rz.f32 	%f378, %f377, %f371, %f376;
	cvt.rzi.f32.f32 	%f379, %f378;
	sub.f32 	%f744, %f373, %f379;
	sub.s32 	%r3726, %r3726, %r466;
	mov.b32 	%r3725, %f744;
	setp.ne.s32 	%p101, %r3726, 0;
	setp.ne.s32 	%p102, %r3725, 0;
	and.pred  	%p103, %p101, %p102;
	@%p103 bra 	$L__BB0_55;
$L__BB0_56:                             // %__internal_fmodf_slowpath_mod.exit.i.i1081
	setp.gt.u32 	%p104, %r26, 2139095039;
	selp.f32 	%f380, 0f7FFFFFFF, 0f4B800000, %p104;
	mul.f32 	%f381, %f744, 0f34000000;
	mul.f32 	%f745, %f380, %f381;
	bra.uni 	$L__BB0_57;
$L__BB0_47:                             // %__nv_fast_fdividef.exit.i.i.i1058
	mov.f32 	%f363, 0f40000000;
	div.approx.f32 	%f364, %f745, %f363;
	cvt.rzi.f32.f32 	%f743, %f364;
	fma.rn.f32 	%f46, %f743, 0fC0000000, %f745;
	mov.b32 	%r25, %f46;
	setp.lt.u32 	%p95, %r25, 1073741824;
	@%p95 bra 	$L__BB0_52;
// %bb.48:
	setp.lt.u32 	%p96, %r25, -2147483647;
	@%p96 bra 	$L__BB0_50;
// %bb.49:
	add.f32 	%f369, %f743, 0fBF800000;
	setp.lt.f32 	%p99, %f46, 0fC0000000;
	add.f32 	%f370, %f369, 0fBF800000;
	selp.f32 	%f743, %f370, %f369, %p99;
	bra.uni 	$L__BB0_52;
$L__BB0_50:
	add.f32 	%f743, %f743, 0f3F800000;
	setp.ltu.f32 	%p97, %f46, 0f40800000;
	@%p97 bra 	$L__BB0_52;
// %bb.51:                              // %__nv_fmaf_rn.exit.i.i.i1062
	add.f32 	%f365, %f743, 0f3F800000;
	fma.rn.f32 	%f367, %f363, 0fC0400000, %f46;
	setp.ge.f32 	%p98, %f367, 0f00000000;
	add.f32 	%f368, %f365, 0f3F800000;
	selp.f32 	%f743, %f368, %f365, %p98;
$L__BB0_52:                             // %__internal_fmodf_fastpath_quot.exit.i.i1065
	fma.rn.f32 	%f745, %f743, 0fC0000000, %f745;
$L__BB0_57:                             // %__internal_fmodf_kernel.exit.i1084
	abs.f32 	%f382, %f745;
	setp.gtu.f32 	%p105, %f382, 0f7F800000;
	@%p105 bra 	$L__BB0_59;
// %bb.58:
	mov.b32 	%r468, %f43;
	and.b32  	%r469, %r468, -2147483648;
	mov.b32 	%r470, %f745;
	or.b32  	%r471, %r469, %r470;
	mov.b32 	%f745, %r471;
$L__BB0_59:                             // %__nv_fmodf.exit1085
	add.f32 	%f383, %f745, %f745;
	mov.b32 	%r472, %f383;
	and.b32  	%r473, %r472, -2147483648;
	or.b32  	%r474, %r473, 1056964608;
	mov.b32 	%f384, %r474;
	add.f32 	%f385, %f383, %f384;
	cvt.rzi.f32.f32 	%f386, %f385;
	abs.f32 	%f387, %f383;
	setp.gt.f32 	%p106, %f387, 0f4B000000;
	selp.f32 	%f388, %f383, %f386, %p106;
	cvt.rzi.f32.f32 	%f389, %f383;
	setp.lt.f32 	%p107, %f387, 0f3F000000;
	selp.f32 	%f390, %f389, %f388, %p107;
	cvt.rzi.s32.f32 	%r475, %f390;
	fma.rn.f32 	%f391, %f390, 0fBF000000, %f745;
	mul.f32 	%f392, %f391, %f391;
	fma.rn.f32 	%f393, %f392, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f394, %f392, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f395, %f393, %f392, 0fC0A55DF6;
	fma.rn.f32 	%f396, %f394, %f392, 0f4081E0CF;
	fma.rn.f32 	%f397, %f392, %f391, 0f00000000;
	fma.rn.f32 	%f398, %f396, %f392, 0fC09DE9E6;
	fma.rn.f32 	%f399, %f395, %f397, 0f00000000;
	fma.rn.f32 	%f400, %f398, %f392, 0f3F800000;
	fma.rn.f32 	%f401, %f391, 0f40490FDB, %f399;
	and.b32  	%r476, %r475, 1;
	setp.eq.b32 	%p108, %r476, 1;
	selp.f32 	%f402, %f400, %f401, %p108;
	selp.f32 	%f403, %f401, %f400, %p108;
	and.b32  	%r477, %r475, 2;
	setp.eq.s32 	%p109, %r477, 0;
	neg.f32 	%f404, %f402;
	selp.f32 	%f405, %f402, %f404, %p109;
	add.s32 	%r478, %r475, 1;
	and.b32  	%r479, %r478, 2;
	setp.eq.s32 	%p110, %r479, 0;
	mov.f32 	%f406, 0f00000000;
	sub.f32 	%f407, %f406, %f403;
	selp.f32 	%f408, %f403, %f407, %p110;
	cvt.rzi.f32.f32 	%f409, %f745;
	setp.eq.f32 	%p111, %f409, %f745;
	mul.f32 	%f410, %f745, 0f00000000;
	selp.f32 	%f63, %f410, %f405, %p111;
	abs.f32 	%f411, %f745;
	setp.gt.f32 	%p112, %f411, 0f4B800000;
	add.f32 	%f412, %f63, 0f3F800000;
	selp.f32 	%f62, %f412, %f408, %p112;
$L__BB0_60:                             // %L631
	or.pred  	%p2, %p70, %p92;
	mov.f32 	%f83, %f223;
	mov.f32 	%f84, %f223;
	@%p2 bra 	$L__BB0_76;
// %bb.61:                              // %L639
	mul.hi.u32 	%r481, %r3718, -1431655765;
	shr.u32 	%r482, %r481, 2;
	mul.lo.s32 	%r483, %r482, 6;
	sub.s32 	%r484, %r3718, %r483;
	cvt.rn.f32.s32 	%f414, %r484;
	div.approx.f32 	%f64, %f414, %f730;
	abs.f32 	%f751, %f64;
	setp.lt.f32 	%p115, %f751, 0f40000000;
	@%p115 bra 	$L__BB0_73;
// %bb.62:
	setp.gtu.f32 	%p116, %f751, 0f4B800000;
	@%p116 bra 	$L__BB0_69;
	bra.uni 	$L__BB0_63;
$L__BB0_69:
	mov.b32 	%r34, %f751;
	and.b32  	%r485, %r34, 8388607;
	or.b32  	%r3727, %r485, 1065353216;
	mov.b32 	%f750, %r3727;
	add.s32 	%r486, %r34, -1073741824;
	and.b32  	%r3728, %r486, -8388608;
	setp.eq.s32 	%p122, %r3728, 0;
	@%p122 bra 	$L__BB0_72;
// %bb.70:                              // %__nv_fmaf_rn.exit4.i.i.i1110.preheader
	mov.f32 	%f425, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f424,%f425;
	// end inline asm
$L__BB0_71:                             // %__nv_fmaf_rn.exit4.i.i.i1110
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r487, %r3728, 192937984;
	add.s32 	%r488, %r3727, %r487;
	mov.b32 	%f426, %r488;
	mul.f32 	%f427, %f424, %f426;
	sub.f32 	%f428, %f426, %f427;
	fma.rn.f32 	%f429, %f428, %f424, %f427;
	sub.f32 	%f430, %f426, %f429;
	fma.rz.f32 	%f431, %f430, %f424, %f429;
	cvt.rzi.f32.f32 	%f432, %f431;
	sub.f32 	%f750, %f426, %f432;
	sub.s32 	%r3728, %r3728, %r487;
	mov.b32 	%r3727, %f750;
	setp.ne.s32 	%p123, %r3728, 0;
	setp.ne.s32 	%p124, %r3727, 0;
	and.pred  	%p125, %p123, %p124;
	@%p125 bra 	$L__BB0_71;
$L__BB0_72:                             // %__internal_fmodf_slowpath_mod.exit.i.i1112
	setp.gt.u32 	%p126, %r34, 2139095039;
	selp.f32 	%f433, 0f7FFFFFFF, 0f4B800000, %p126;
	mul.f32 	%f434, %f750, 0f34000000;
	mul.f32 	%f751, %f433, %f434;
	bra.uni 	$L__BB0_73;
$L__BB0_63:                             // %__nv_fast_fdividef.exit.i.i.i1089
	mov.f32 	%f416, 0f40000000;
	div.approx.f32 	%f417, %f751, %f416;
	cvt.rzi.f32.f32 	%f749, %f417;
	fma.rn.f32 	%f67, %f749, 0fC0000000, %f751;
	mov.b32 	%r33, %f67;
	setp.lt.u32 	%p117, %r33, 1073741824;
	@%p117 bra 	$L__BB0_68;
// %bb.64:
	setp.lt.u32 	%p118, %r33, -2147483647;
	@%p118 bra 	$L__BB0_66;
// %bb.65:
	add.f32 	%f422, %f749, 0fBF800000;
	setp.lt.f32 	%p121, %f67, 0fC0000000;
	add.f32 	%f423, %f422, 0fBF800000;
	selp.f32 	%f749, %f423, %f422, %p121;
	bra.uni 	$L__BB0_68;
$L__BB0_66:
	add.f32 	%f749, %f749, 0f3F800000;
	setp.ltu.f32 	%p119, %f67, 0f40800000;
	@%p119 bra 	$L__BB0_68;
// %bb.67:                              // %__nv_fmaf_rn.exit.i.i.i1093
	add.f32 	%f418, %f749, 0f3F800000;
	fma.rn.f32 	%f420, %f416, 0fC0400000, %f67;
	setp.ge.f32 	%p120, %f420, 0f00000000;
	add.f32 	%f421, %f418, 0f3F800000;
	selp.f32 	%f749, %f421, %f418, %p120;
$L__BB0_68:                             // %__internal_fmodf_fastpath_quot.exit.i.i1096
	fma.rn.f32 	%f751, %f749, 0fC0000000, %f751;
$L__BB0_73:                             // %__internal_fmodf_kernel.exit.i1115
	abs.f32 	%f435, %f751;
	setp.gtu.f32 	%p127, %f435, 0f7F800000;
	@%p127 bra 	$L__BB0_75;
// %bb.74:
	mov.b32 	%r489, %f64;
	and.b32  	%r490, %r489, -2147483648;
	mov.b32 	%r491, %f751;
	or.b32  	%r492, %r490, %r491;
	mov.b32 	%f751, %r492;
$L__BB0_75:                             // %__nv_fmodf.exit1116
	add.f32 	%f436, %f751, %f751;
	mov.b32 	%r493, %f436;
	and.b32  	%r494, %r493, -2147483648;
	or.b32  	%r495, %r494, 1056964608;
	mov.b32 	%f437, %r495;
	add.f32 	%f438, %f436, %f437;
	cvt.rzi.f32.f32 	%f439, %f438;
	abs.f32 	%f440, %f436;
	setp.gt.f32 	%p128, %f440, 0f4B000000;
	selp.f32 	%f441, %f436, %f439, %p128;
	cvt.rzi.f32.f32 	%f442, %f436;
	setp.lt.f32 	%p129, %f440, 0f3F000000;
	selp.f32 	%f443, %f442, %f441, %p129;
	cvt.rzi.s32.f32 	%r496, %f443;
	fma.rn.f32 	%f444, %f443, 0fBF000000, %f751;
	mul.f32 	%f445, %f444, %f444;
	fma.rn.f32 	%f446, %f445, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f447, %f445, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f448, %f446, %f445, 0fC0A55DF6;
	fma.rn.f32 	%f449, %f447, %f445, 0f4081E0CF;
	fma.rn.f32 	%f450, %f445, %f444, 0f00000000;
	fma.rn.f32 	%f451, %f449, %f445, 0fC09DE9E6;
	fma.rn.f32 	%f452, %f448, %f450, 0f00000000;
	fma.rn.f32 	%f453, %f451, %f445, 0f3F800000;
	fma.rn.f32 	%f454, %f444, 0f40490FDB, %f452;
	and.b32  	%r497, %r496, 1;
	setp.eq.b32 	%p130, %r497, 1;
	selp.f32 	%f455, %f453, %f454, %p130;
	selp.f32 	%f456, %f454, %f453, %p130;
	and.b32  	%r498, %r496, 2;
	setp.eq.s32 	%p131, %r498, 0;
	neg.f32 	%f457, %f455;
	selp.f32 	%f458, %f455, %f457, %p131;
	add.s32 	%r499, %r496, 1;
	and.b32  	%r500, %r499, 2;
	setp.eq.s32 	%p132, %r500, 0;
	mov.f32 	%f459, 0f00000000;
	sub.f32 	%f460, %f459, %f456;
	selp.f32 	%f461, %f456, %f460, %p132;
	cvt.rzi.f32.f32 	%f462, %f751;
	setp.eq.f32 	%p133, %f462, %f751;
	mul.f32 	%f463, %f751, 0f00000000;
	selp.f32 	%f84, %f463, %f458, %p133;
	abs.f32 	%f464, %f751;
	setp.gt.f32 	%p134, %f464, 0f4B800000;
	add.f32 	%f465, %f84, 0f3F800000;
	selp.f32 	%f83, %f465, %f461, %p134;
$L__BB0_76:                             // %L673
	@%p29 bra 	$L__BB0_221;
// %bb.77:
	@%p359 bra 	$L__BB0_217;
	bra.uni 	$L__BB0_78;
$L__BB0_217:
	mov.b32 	%r257, %f785;
	and.b32  	%r513, %r257, 8388607;
	or.b32  	%r3805, %r513, 1065353216;
	mov.b32 	%f784, %r3805;
	add.s32 	%r514, %r257, -1073741824;
	and.b32  	%r3806, %r514, -8388608;
	setp.eq.s32 	%p142, %r3806, 0;
	@%p142 bra 	$L__BB0_220;
// %bb.218:                             // %__nv_fmaf_rn.exit4.i.i.i1141.preheader
	mov.f32 	%f475, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f474,%f475;
	// end inline asm
$L__BB0_219:                            // %__nv_fmaf_rn.exit4.i.i.i1141
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r515, %r3806, 192937984;
	add.s32 	%r516, %r3805, %r515;
	mov.b32 	%f476, %r516;
	mul.f32 	%f477, %f474, %f476;
	sub.f32 	%f478, %f476, %f477;
	fma.rn.f32 	%f479, %f478, %f474, %f477;
	sub.f32 	%f480, %f476, %f479;
	fma.rz.f32 	%f481, %f480, %f474, %f479;
	cvt.rzi.f32.f32 	%f482, %f481;
	sub.f32 	%f784, %f476, %f482;
	sub.s32 	%r3806, %r3806, %r515;
	mov.b32 	%r3805, %f784;
	setp.ne.s32 	%p143, %r3806, 0;
	setp.ne.s32 	%p144, %r3805, 0;
	and.pred  	%p145, %p143, %p144;
	@%p145 bra 	$L__BB0_219;
$L__BB0_220:                            // %__internal_fmodf_slowpath_mod.exit.i.i1143
	setp.gt.u32 	%p146, %r257, 2139095039;
	selp.f32 	%f483, 0f7FFFFFFF, 0f4B800000, %p146;
	mul.f32 	%f484, %f784, 0f34000000;
	mul.f32 	%f785, %f483, %f484;
	bra.uni 	$L__BB0_221;
$L__BB0_78:                             // %__nv_fast_fdividef.exit.i.i.i1120
	mov.f32 	%f466, 0f40000000;
	div.approx.f32 	%f467, %f785, %f466;
	cvt.rzi.f32.f32 	%f783, %f467;
	fma.rn.f32 	%f187, %f783, 0fC0000000, %f785;
	mov.b32 	%r256, %f187;
	setp.lt.u32 	%p137, %r256, 1073741824;
	@%p137 bra 	$L__BB0_216;
// %bb.79:
	setp.lt.u32 	%p138, %r256, -2147483647;
	@%p138 bra 	$L__BB0_214;
// %bb.80:
	add.f32 	%f472, %f783, 0fBF800000;
	setp.lt.f32 	%p141, %f187, 0fC0000000;
	add.f32 	%f473, %f472, 0fBF800000;
	selp.f32 	%f783, %f473, %f472, %p141;
	bra.uni 	$L__BB0_216;
$L__BB0_214:
	add.f32 	%f783, %f783, 0f3F800000;
	setp.ltu.f32 	%p139, %f187, 0f40800000;
	@%p139 bra 	$L__BB0_216;
// %bb.215:                             // %__nv_fmaf_rn.exit.i.i.i1124
	add.f32 	%f468, %f783, 0f3F800000;
	fma.rn.f32 	%f470, %f466, 0fC0400000, %f187;
	setp.ge.f32 	%p140, %f470, 0f00000000;
	add.f32 	%f471, %f468, 0f3F800000;
	selp.f32 	%f783, %f471, %f468, %p140;
$L__BB0_216:                            // %__internal_fmodf_fastpath_quot.exit.i.i1127
	fma.rn.f32 	%f785, %f783, 0fC0000000, %f785;
$L__BB0_221:                            // %__internal_fmodf_kernel.exit.i1146
	abs.f32 	%f485, %f785;
	setp.gtu.f32 	%p147, %f485, 0f7F800000;
	@%p147 bra 	$L__BB0_223;
// %bb.222:
	mov.b32 	%r517, %f785;
	or.b32  	%r518, %r250, %r517;
	mov.b32 	%f785, %r518;
$L__BB0_223:                            // %__nv_fmodf.exit1147
	mov.f32 	%f486, 0f00000000;
	mov.f32 	%f104, %f486;
	mov.f32 	%f105, %f486;
	@%p49 bra 	$L__BB0_96;
// %bb.81:                              // %L775
	cvt.u16.u32 	%rs15, %r3717;
	and.b16  	%rs16, %rs15, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 13;
	mul.lo.s16 	%rs19, %rs18, 48;
	sub.s16 	%rs20, %rs15, %rs19;
	and.b16  	%rs21, %rs20, 255;
	cvt.rn.f32.u16 	%f518, %rs21;
	div.approx.f32 	%f85, %f518, %f729;
	abs.f32 	%f757, %f85;
	setp.lt.f32 	%p156, %f757, 0f40000000;
	@%p156 bra 	$L__BB0_93;
// %bb.82:
	setp.gtu.f32 	%p157, %f757, 0f4B800000;
	@%p157 bra 	$L__BB0_89;
	bra.uni 	$L__BB0_83;
$L__BB0_89:
	mov.b32 	%r46, %f757;
	and.b32  	%r534, %r46, 8388607;
	or.b32  	%r3729, %r534, 1065353216;
	mov.b32 	%f756, %r3729;
	add.s32 	%r535, %r46, -1073741824;
	and.b32  	%r3730, %r535, -8388608;
	setp.eq.s32 	%p163, %r3730, 0;
	@%p163 bra 	$L__BB0_92;
// %bb.90:                              // %__nv_fmaf_rn.exit4.i.i.i1172.preheader
	mov.f32 	%f529, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f528,%f529;
	// end inline asm
$L__BB0_91:                             // %__nv_fmaf_rn.exit4.i.i.i1172
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r536, %r3730, 192937984;
	add.s32 	%r537, %r3729, %r536;
	mov.b32 	%f530, %r537;
	mul.f32 	%f531, %f528, %f530;
	sub.f32 	%f532, %f530, %f531;
	fma.rn.f32 	%f533, %f532, %f528, %f531;
	sub.f32 	%f534, %f530, %f533;
	fma.rz.f32 	%f535, %f534, %f528, %f533;
	cvt.rzi.f32.f32 	%f536, %f535;
	sub.f32 	%f756, %f530, %f536;
	sub.s32 	%r3730, %r3730, %r536;
	mov.b32 	%r3729, %f756;
	setp.ne.s32 	%p164, %r3730, 0;
	setp.ne.s32 	%p165, %r3729, 0;
	and.pred  	%p166, %p164, %p165;
	@%p166 bra 	$L__BB0_91;
$L__BB0_92:                             // %__internal_fmodf_slowpath_mod.exit.i.i1174
	setp.gt.u32 	%p167, %r46, 2139095039;
	selp.f32 	%f537, 0f7FFFFFFF, 0f4B800000, %p167;
	mul.f32 	%f538, %f756, 0f34000000;
	mul.f32 	%f757, %f537, %f538;
	bra.uni 	$L__BB0_93;
$L__BB0_83:                             // %__nv_fast_fdividef.exit.i.i.i1151
	mov.f32 	%f520, 0f40000000;
	div.approx.f32 	%f521, %f757, %f520;
	cvt.rzi.f32.f32 	%f755, %f521;
	fma.rn.f32 	%f88, %f755, 0fC0000000, %f757;
	mov.b32 	%r45, %f88;
	setp.lt.u32 	%p158, %r45, 1073741824;
	@%p158 bra 	$L__BB0_88;
// %bb.84:
	setp.lt.u32 	%p159, %r45, -2147483647;
	@%p159 bra 	$L__BB0_86;
// %bb.85:
	add.f32 	%f526, %f755, 0fBF800000;
	setp.lt.f32 	%p162, %f88, 0fC0000000;
	add.f32 	%f527, %f526, 0fBF800000;
	selp.f32 	%f755, %f527, %f526, %p162;
	bra.uni 	$L__BB0_88;
$L__BB0_86:
	add.f32 	%f755, %f755, 0f3F800000;
	setp.ltu.f32 	%p160, %f88, 0f40800000;
	@%p160 bra 	$L__BB0_88;
// %bb.87:                              // %__nv_fmaf_rn.exit.i.i.i1155
	add.f32 	%f522, %f755, 0f3F800000;
	fma.rn.f32 	%f524, %f520, 0fC0400000, %f88;
	setp.ge.f32 	%p161, %f524, 0f00000000;
	add.f32 	%f525, %f522, 0f3F800000;
	selp.f32 	%f755, %f525, %f522, %p161;
$L__BB0_88:                             // %__internal_fmodf_fastpath_quot.exit.i.i1158
	fma.rn.f32 	%f757, %f755, 0fC0000000, %f757;
$L__BB0_93:                             // %__internal_fmodf_kernel.exit.i1177
	abs.f32 	%f539, %f757;
	setp.gtu.f32 	%p168, %f539, 0f7F800000;
	@%p168 bra 	$L__BB0_95;
// %bb.94:
	mov.b32 	%r538, %f85;
	and.b32  	%r539, %r538, -2147483648;
	mov.b32 	%r540, %f757;
	or.b32  	%r541, %r539, %r540;
	mov.b32 	%f757, %r541;
$L__BB0_95:                             // %__nv_fmodf.exit1178
	add.f32 	%f540, %f757, %f757;
	mov.b32 	%r542, %f540;
	and.b32  	%r543, %r542, -2147483648;
	or.b32  	%r544, %r543, 1056964608;
	mov.b32 	%f541, %r544;
	add.f32 	%f542, %f540, %f541;
	cvt.rzi.f32.f32 	%f543, %f542;
	abs.f32 	%f544, %f540;
	setp.gt.f32 	%p169, %f544, 0f4B000000;
	selp.f32 	%f545, %f540, %f543, %p169;
	cvt.rzi.f32.f32 	%f546, %f540;
	setp.lt.f32 	%p170, %f544, 0f3F000000;
	selp.f32 	%f547, %f546, %f545, %p170;
	cvt.rzi.s32.f32 	%r545, %f547;
	fma.rn.f32 	%f548, %f547, 0fBF000000, %f757;
	mul.f32 	%f549, %f548, %f548;
	fma.rn.f32 	%f550, %f549, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f551, %f549, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f552, %f550, %f549, 0fC0A55DF6;
	fma.rn.f32 	%f553, %f551, %f549, 0f4081E0CF;
	fma.rn.f32 	%f554, %f549, %f548, 0f00000000;
	fma.rn.f32 	%f555, %f553, %f549, 0fC09DE9E6;
	fma.rn.f32 	%f556, %f552, %f554, 0f00000000;
	fma.rn.f32 	%f557, %f555, %f549, 0f3F800000;
	fma.rn.f32 	%f558, %f548, 0f40490FDB, %f556;
	and.b32  	%r546, %r545, 1;
	setp.eq.b32 	%p171, %r546, 1;
	selp.f32 	%f559, %f557, %f558, %p171;
	selp.f32 	%f560, %f558, %f557, %p171;
	and.b32  	%r547, %r545, 2;
	setp.eq.s32 	%p172, %r547, 0;
	neg.f32 	%f561, %f559;
	selp.f32 	%f562, %f559, %f561, %p172;
	add.s32 	%r548, %r545, 1;
	and.b32  	%r549, %r548, 2;
	setp.eq.s32 	%p173, %r549, 0;
	mov.f32 	%f563, 0f00000000;
	sub.f32 	%f564, %f563, %f560;
	selp.f32 	%f565, %f560, %f564, %p173;
	cvt.rzi.f32.f32 	%f566, %f757;
	setp.eq.f32 	%p174, %f566, %f757;
	mul.f32 	%f567, %f757, 0f00000000;
	selp.f32 	%f105, %f567, %f562, %p174;
	abs.f32 	%f568, %f757;
	setp.gt.f32 	%p175, %f568, 0f4B800000;
	add.f32 	%f569, %f105, 0f3F800000;
	selp.f32 	%f104, %f569, %f565, %p175;
$L__BB0_96:                             // %L809
	mov.f32 	%f125, %f486;
	mov.f32 	%f126, %f486;
	@%p70 bra 	$L__BB0_112;
// %bb.97:                              // %L813
	mul.hi.u32 	%r551, %r3718, -1431655765;
	shr.u32 	%r552, %r551, 5;
	mul.lo.s32 	%r553, %r552, 48;
	sub.s32 	%r554, %r3718, %r553;
	cvt.rn.f32.s32 	%f571, %r554;
	div.approx.f32 	%f106, %f571, %f729;
	abs.f32 	%f763, %f106;
	setp.lt.f32 	%p177, %f763, 0f40000000;
	@%p177 bra 	$L__BB0_109;
// %bb.98:
	setp.gtu.f32 	%p178, %f763, 0f4B800000;
	@%p178 bra 	$L__BB0_105;
	bra.uni 	$L__BB0_99;
$L__BB0_105:
	mov.b32 	%r54, %f763;
	and.b32  	%r555, %r54, 8388607;
	or.b32  	%r3731, %r555, 1065353216;
	mov.b32 	%f762, %r3731;
	add.s32 	%r556, %r54, -1073741824;
	and.b32  	%r3732, %r556, -8388608;
	setp.eq.s32 	%p184, %r3732, 0;
	@%p184 bra 	$L__BB0_108;
// %bb.106:                             // %__nv_fmaf_rn.exit4.i.i.i1203.preheader
	mov.f32 	%f582, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f581,%f582;
	// end inline asm
$L__BB0_107:                            // %__nv_fmaf_rn.exit4.i.i.i1203
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r557, %r3732, 192937984;
	add.s32 	%r558, %r3731, %r557;
	mov.b32 	%f583, %r558;
	mul.f32 	%f584, %f581, %f583;
	sub.f32 	%f585, %f583, %f584;
	fma.rn.f32 	%f586, %f585, %f581, %f584;
	sub.f32 	%f587, %f583, %f586;
	fma.rz.f32 	%f588, %f587, %f581, %f586;
	cvt.rzi.f32.f32 	%f589, %f588;
	sub.f32 	%f762, %f583, %f589;
	sub.s32 	%r3732, %r3732, %r557;
	mov.b32 	%r3731, %f762;
	setp.ne.s32 	%p185, %r3732, 0;
	setp.ne.s32 	%p186, %r3731, 0;
	and.pred  	%p187, %p185, %p186;
	@%p187 bra 	$L__BB0_107;
$L__BB0_108:                            // %__internal_fmodf_slowpath_mod.exit.i.i1205
	setp.gt.u32 	%p188, %r54, 2139095039;
	selp.f32 	%f590, 0f7FFFFFFF, 0f4B800000, %p188;
	mul.f32 	%f591, %f762, 0f34000000;
	mul.f32 	%f763, %f590, %f591;
	bra.uni 	$L__BB0_109;
$L__BB0_99:                             // %__nv_fast_fdividef.exit.i.i.i1182
	mov.f32 	%f573, 0f40000000;
	div.approx.f32 	%f574, %f763, %f573;
	cvt.rzi.f32.f32 	%f761, %f574;
	fma.rn.f32 	%f109, %f761, 0fC0000000, %f763;
	mov.b32 	%r53, %f109;
	setp.lt.u32 	%p179, %r53, 1073741824;
	@%p179 bra 	$L__BB0_104;
// %bb.100:
	setp.lt.u32 	%p180, %r53, -2147483647;
	@%p180 bra 	$L__BB0_102;
// %bb.101:
	add.f32 	%f579, %f761, 0fBF800000;
	setp.lt.f32 	%p183, %f109, 0fC0000000;
	add.f32 	%f580, %f579, 0fBF800000;
	selp.f32 	%f761, %f580, %f579, %p183;
	bra.uni 	$L__BB0_104;
$L__BB0_102:
	add.f32 	%f761, %f761, 0f3F800000;
	setp.ltu.f32 	%p181, %f109, 0f40800000;
	@%p181 bra 	$L__BB0_104;
// %bb.103:                             // %__nv_fmaf_rn.exit.i.i.i1186
	add.f32 	%f575, %f761, 0f3F800000;
	fma.rn.f32 	%f577, %f573, 0fC0400000, %f109;
	setp.ge.f32 	%p182, %f577, 0f00000000;
	add.f32 	%f578, %f575, 0f3F800000;
	selp.f32 	%f761, %f578, %f575, %p182;
$L__BB0_104:                            // %__internal_fmodf_fastpath_quot.exit.i.i1189
	fma.rn.f32 	%f763, %f761, 0fC0000000, %f763;
$L__BB0_109:                            // %__internal_fmodf_kernel.exit.i1208
	abs.f32 	%f592, %f763;
	setp.gtu.f32 	%p189, %f592, 0f7F800000;
	@%p189 bra 	$L__BB0_111;
// %bb.110:
	mov.b32 	%r559, %f106;
	and.b32  	%r560, %r559, -2147483648;
	mov.b32 	%r561, %f763;
	or.b32  	%r562, %r560, %r561;
	mov.b32 	%f763, %r562;
$L__BB0_111:                            // %__nv_fmodf.exit1209
	add.f32 	%f593, %f763, %f763;
	mov.b32 	%r563, %f593;
	and.b32  	%r564, %r563, -2147483648;
	or.b32  	%r565, %r564, 1056964608;
	mov.b32 	%f594, %r565;
	add.f32 	%f595, %f593, %f594;
	cvt.rzi.f32.f32 	%f596, %f595;
	abs.f32 	%f597, %f593;
	setp.gt.f32 	%p190, %f597, 0f4B000000;
	selp.f32 	%f598, %f593, %f596, %p190;
	cvt.rzi.f32.f32 	%f599, %f593;
	setp.lt.f32 	%p191, %f597, 0f3F000000;
	selp.f32 	%f600, %f599, %f598, %p191;
	cvt.rzi.s32.f32 	%r566, %f600;
	fma.rn.f32 	%f601, %f600, 0fBF000000, %f763;
	mul.f32 	%f602, %f601, %f601;
	fma.rn.f32 	%f603, %f602, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f604, %f602, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f603, %f602, 0fC0A55DF6;
	fma.rn.f32 	%f606, %f604, %f602, 0f4081E0CF;
	fma.rn.f32 	%f607, %f602, %f601, 0f00000000;
	fma.rn.f32 	%f608, %f606, %f602, 0fC09DE9E6;
	fma.rn.f32 	%f609, %f605, %f607, 0f00000000;
	fma.rn.f32 	%f610, %f608, %f602, 0f3F800000;
	fma.rn.f32 	%f611, %f601, 0f40490FDB, %f609;
	and.b32  	%r567, %r566, 1;
	setp.eq.b32 	%p192, %r567, 1;
	selp.f32 	%f612, %f610, %f611, %p192;
	selp.f32 	%f613, %f611, %f610, %p192;
	and.b32  	%r568, %r566, 2;
	setp.eq.s32 	%p193, %r568, 0;
	neg.f32 	%f614, %f612;
	selp.f32 	%f615, %f612, %f614, %p193;
	add.s32 	%r569, %r566, 1;
	and.b32  	%r570, %r569, 2;
	setp.eq.s32 	%p194, %r570, 0;
	mov.f32 	%f616, 0f00000000;
	sub.f32 	%f617, %f616, %f613;
	selp.f32 	%f618, %f613, %f617, %p194;
	cvt.rzi.f32.f32 	%f619, %f763;
	setp.eq.f32 	%p195, %f619, %f763;
	mul.f32 	%f620, %f763, 0f00000000;
	selp.f32 	%f126, %f620, %f615, %p195;
	abs.f32 	%f621, %f763;
	setp.gt.f32 	%p196, %f621, 0f4B800000;
	add.f32 	%f622, %f126, 0f3F800000;
	selp.f32 	%f125, %f622, %f618, %p196;
$L__BB0_112:                            // %L847
	mov.f32 	%f146, %f486;
	mov.f32 	%f147, %f486;
	@%p1 bra 	$L__BB0_128;
// %bb.113:                             // %L885
	cvt.u16.u32 	%rs22, %r3717;
	and.b16  	%rs23, %rs22, 255;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 10;
	mul.lo.s16 	%rs26, %rs25, 6;
	sub.s16 	%rs27, %rs22, %rs26;
	and.b16  	%rs28, %rs27, 255;
	cvt.rn.f32.u16 	%f624, %rs28;
	div.approx.f32 	%f127, %f624, %f730;
	abs.f32 	%f769, %f127;
	setp.lt.f32 	%p197, %f769, 0f40000000;
	@%p197 bra 	$L__BB0_125;
// %bb.114:
	setp.gtu.f32 	%p198, %f769, 0f4B800000;
	@%p198 bra 	$L__BB0_121;
	bra.uni 	$L__BB0_115;
$L__BB0_121:
	mov.b32 	%r64, %f769;
	and.b32  	%r578, %r64, 8388607;
	or.b32  	%r3733, %r578, 1065353216;
	mov.b32 	%f768, %r3733;
	add.s32 	%r579, %r64, -1073741824;
	and.b32  	%r3734, %r579, -8388608;
	setp.eq.s32 	%p204, %r3734, 0;
	@%p204 bra 	$L__BB0_124;
// %bb.122:                             // %__nv_fmaf_rn.exit4.i.i.i1234.preheader
	mov.f32 	%f635, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f634,%f635;
	// end inline asm
$L__BB0_123:                            // %__nv_fmaf_rn.exit4.i.i.i1234
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r580, %r3734, 192937984;
	add.s32 	%r581, %r3733, %r580;
	mov.b32 	%f636, %r581;
	mul.f32 	%f637, %f634, %f636;
	sub.f32 	%f638, %f636, %f637;
	fma.rn.f32 	%f639, %f638, %f634, %f637;
	sub.f32 	%f640, %f636, %f639;
	fma.rz.f32 	%f641, %f640, %f634, %f639;
	cvt.rzi.f32.f32 	%f642, %f641;
	sub.f32 	%f768, %f636, %f642;
	sub.s32 	%r3734, %r3734, %r580;
	mov.b32 	%r3733, %f768;
	setp.ne.s32 	%p205, %r3734, 0;
	setp.ne.s32 	%p206, %r3733, 0;
	and.pred  	%p207, %p205, %p206;
	@%p207 bra 	$L__BB0_123;
$L__BB0_124:                            // %__internal_fmodf_slowpath_mod.exit.i.i1236
	setp.gt.u32 	%p208, %r64, 2139095039;
	selp.f32 	%f643, 0f7FFFFFFF, 0f4B800000, %p208;
	mul.f32 	%f644, %f768, 0f34000000;
	mul.f32 	%f769, %f643, %f644;
	bra.uni 	$L__BB0_125;
$L__BB0_115:                            // %__nv_fast_fdividef.exit.i.i.i1213
	mov.f32 	%f626, 0f40000000;
	div.approx.f32 	%f627, %f769, %f626;
	cvt.rzi.f32.f32 	%f767, %f627;
	fma.rn.f32 	%f130, %f767, 0fC0000000, %f769;
	mov.b32 	%r63, %f130;
	setp.lt.u32 	%p199, %r63, 1073741824;
	@%p199 bra 	$L__BB0_120;
// %bb.116:
	setp.lt.u32 	%p200, %r63, -2147483647;
	@%p200 bra 	$L__BB0_118;
// %bb.117:
	add.f32 	%f632, %f767, 0fBF800000;
	setp.lt.f32 	%p203, %f130, 0fC0000000;
	add.f32 	%f633, %f632, 0fBF800000;
	selp.f32 	%f767, %f633, %f632, %p203;
	bra.uni 	$L__BB0_120;
$L__BB0_118:
	add.f32 	%f767, %f767, 0f3F800000;
	setp.ltu.f32 	%p201, %f130, 0f40800000;
	@%p201 bra 	$L__BB0_120;
// %bb.119:                             // %__nv_fmaf_rn.exit.i.i.i1217
	add.f32 	%f628, %f767, 0f3F800000;
	fma.rn.f32 	%f630, %f626, 0fC0400000, %f130;
	setp.ge.f32 	%p202, %f630, 0f00000000;
	add.f32 	%f631, %f628, 0f3F800000;
	selp.f32 	%f767, %f631, %f628, %p202;
$L__BB0_120:                            // %__internal_fmodf_fastpath_quot.exit.i.i1220
	fma.rn.f32 	%f769, %f767, 0fC0000000, %f769;
$L__BB0_125:                            // %__internal_fmodf_kernel.exit.i1239
	abs.f32 	%f645, %f769;
	setp.gtu.f32 	%p209, %f645, 0f7F800000;
	@%p209 bra 	$L__BB0_127;
// %bb.126:
	mov.b32 	%r582, %f127;
	and.b32  	%r583, %r582, -2147483648;
	mov.b32 	%r584, %f769;
	or.b32  	%r585, %r583, %r584;
	mov.b32 	%f769, %r585;
$L__BB0_127:                            // %__nv_fmodf.exit1240
	add.f32 	%f646, %f769, %f769;
	mov.b32 	%r586, %f646;
	and.b32  	%r587, %r586, -2147483648;
	or.b32  	%r588, %r587, 1056964608;
	mov.b32 	%f647, %r588;
	add.f32 	%f648, %f646, %f647;
	cvt.rzi.f32.f32 	%f649, %f648;
	abs.f32 	%f650, %f646;
	setp.gt.f32 	%p210, %f650, 0f4B000000;
	selp.f32 	%f651, %f646, %f649, %p210;
	cvt.rzi.f32.f32 	%f652, %f646;
	setp.lt.f32 	%p211, %f650, 0f3F000000;
	selp.f32 	%f653, %f652, %f651, %p211;
	cvt.rzi.s32.f32 	%r589, %f653;
	fma.rn.f32 	%f654, %f653, 0fBF000000, %f769;
	mul.f32 	%f655, %f654, %f654;
	fma.rn.f32 	%f656, %f655, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f657, %f655, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f658, %f656, %f655, 0fC0A55DF6;
	fma.rn.f32 	%f659, %f657, %f655, 0f4081E0CF;
	fma.rn.f32 	%f660, %f655, %f654, 0f00000000;
	fma.rn.f32 	%f661, %f659, %f655, 0fC09DE9E6;
	fma.rn.f32 	%f662, %f658, %f660, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f655, 0f3F800000;
	fma.rn.f32 	%f664, %f654, 0f40490FDB, %f662;
	and.b32  	%r590, %r589, 1;
	setp.eq.b32 	%p212, %r590, 1;
	selp.f32 	%f665, %f663, %f664, %p212;
	selp.f32 	%f666, %f664, %f663, %p212;
	and.b32  	%r591, %r589, 2;
	setp.eq.s32 	%p213, %r591, 0;
	neg.f32 	%f667, %f665;
	selp.f32 	%f668, %f665, %f667, %p213;
	add.s32 	%r592, %r589, 1;
	and.b32  	%r593, %r592, 2;
	setp.eq.s32 	%p214, %r593, 0;
	mov.f32 	%f669, 0f00000000;
	sub.f32 	%f670, %f669, %f666;
	selp.f32 	%f671, %f666, %f670, %p214;
	cvt.rzi.f32.f32 	%f672, %f769;
	setp.eq.f32 	%p215, %f672, %f769;
	mul.f32 	%f673, %f769, 0f00000000;
	selp.f32 	%f147, %f673, %f668, %p215;
	abs.f32 	%f674, %f769;
	setp.gt.f32 	%p216, %f674, 0f4B800000;
	add.f32 	%f675, %f147, 0f3F800000;
	selp.f32 	%f146, %f675, %f671, %p216;
$L__BB0_128:                            // %L919
	mov.f32 	%f167, %f486;
	mov.f32 	%f168, %f486;
	@%p2 bra 	$L__BB0_144;
// %bb.129:                             // %L927
	mul.hi.u32 	%r595, %r3718, -1431655765;
	shr.u32 	%r596, %r595, 2;
	mul.lo.s32 	%r597, %r596, 6;
	sub.s32 	%r598, %r3718, %r597;
	cvt.rn.f32.s32 	%f677, %r598;
	div.approx.f32 	%f148, %f677, %f730;
	abs.f32 	%f775, %f148;
	setp.lt.f32 	%p217, %f775, 0f40000000;
	@%p217 bra 	$L__BB0_141;
// %bb.130:
	setp.gtu.f32 	%p218, %f775, 0f4B800000;
	@%p218 bra 	$L__BB0_137;
	bra.uni 	$L__BB0_131;
$L__BB0_137:
	mov.b32 	%r72, %f775;
	and.b32  	%r599, %r72, 8388607;
	or.b32  	%r3735, %r599, 1065353216;
	mov.b32 	%f774, %r3735;
	add.s32 	%r600, %r72, -1073741824;
	and.b32  	%r3736, %r600, -8388608;
	setp.eq.s32 	%p224, %r3736, 0;
	@%p224 bra 	$L__BB0_140;
// %bb.138:                             // %__nv_fmaf_rn.exit4.i.i.i1265.preheader
	mov.f32 	%f688, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f687,%f688;
	// end inline asm
$L__BB0_139:                            // %__nv_fmaf_rn.exit4.i.i.i1265
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r601, %r3736, 192937984;
	add.s32 	%r602, %r3735, %r601;
	mov.b32 	%f689, %r602;
	mul.f32 	%f690, %f687, %f689;
	sub.f32 	%f691, %f689, %f690;
	fma.rn.f32 	%f692, %f691, %f687, %f690;
	sub.f32 	%f693, %f689, %f692;
	fma.rz.f32 	%f694, %f693, %f687, %f692;
	cvt.rzi.f32.f32 	%f695, %f694;
	sub.f32 	%f774, %f689, %f695;
	sub.s32 	%r3736, %r3736, %r601;
	mov.b32 	%r3735, %f774;
	setp.ne.s32 	%p225, %r3736, 0;
	setp.ne.s32 	%p226, %r3735, 0;
	and.pred  	%p227, %p225, %p226;
	@%p227 bra 	$L__BB0_139;
$L__BB0_140:                            // %__internal_fmodf_slowpath_mod.exit.i.i1267
	setp.gt.u32 	%p228, %r72, 2139095039;
	selp.f32 	%f696, 0f7FFFFFFF, 0f4B800000, %p228;
	mul.f32 	%f697, %f774, 0f34000000;
	mul.f32 	%f775, %f696, %f697;
	bra.uni 	$L__BB0_141;
$L__BB0_131:                            // %__nv_fast_fdividef.exit.i.i.i1244
	mov.f32 	%f679, 0f40000000;
	div.approx.f32 	%f680, %f775, %f679;
	cvt.rzi.f32.f32 	%f773, %f680;
	fma.rn.f32 	%f151, %f773, 0fC0000000, %f775;
	mov.b32 	%r71, %f151;
	setp.lt.u32 	%p219, %r71, 1073741824;
	@%p219 bra 	$L__BB0_136;
// %bb.132:
	setp.lt.u32 	%p220, %r71, -2147483647;
	@%p220 bra 	$L__BB0_134;
// %bb.133:
	add.f32 	%f685, %f773, 0fBF800000;
	setp.lt.f32 	%p223, %f151, 0fC0000000;
	add.f32 	%f686, %f685, 0fBF800000;
	selp.f32 	%f773, %f686, %f685, %p223;
	bra.uni 	$L__BB0_136;
$L__BB0_134:
	add.f32 	%f773, %f773, 0f3F800000;
	setp.ltu.f32 	%p221, %f151, 0f40800000;
	@%p221 bra 	$L__BB0_136;
// %bb.135:                             // %__nv_fmaf_rn.exit.i.i.i1248
	add.f32 	%f681, %f773, 0f3F800000;
	fma.rn.f32 	%f683, %f679, 0fC0400000, %f151;
	setp.ge.f32 	%p222, %f683, 0f00000000;
	add.f32 	%f684, %f681, 0f3F800000;
	selp.f32 	%f773, %f684, %f681, %p222;
$L__BB0_136:                            // %__internal_fmodf_fastpath_quot.exit.i.i1251
	fma.rn.f32 	%f775, %f773, 0fC0000000, %f775;
$L__BB0_141:                            // %__internal_fmodf_kernel.exit.i1270
	abs.f32 	%f698, %f775;
	setp.gtu.f32 	%p229, %f698, 0f7F800000;
	@%p229 bra 	$L__BB0_143;
// %bb.142:
	mov.b32 	%r603, %f148;
	and.b32  	%r604, %r603, -2147483648;
	mov.b32 	%r605, %f775;
	or.b32  	%r606, %r604, %r605;
	mov.b32 	%f775, %r606;
$L__BB0_143:                            // %__nv_fmodf.exit1271
	add.f32 	%f699, %f775, %f775;
	mov.b32 	%r607, %f699;
	and.b32  	%r608, %r607, -2147483648;
	or.b32  	%r609, %r608, 1056964608;
	mov.b32 	%f700, %r609;
	add.f32 	%f701, %f699, %f700;
	cvt.rzi.f32.f32 	%f702, %f701;
	abs.f32 	%f703, %f699;
	setp.gt.f32 	%p230, %f703, 0f4B000000;
	selp.f32 	%f704, %f699, %f702, %p230;
	cvt.rzi.f32.f32 	%f705, %f699;
	setp.lt.f32 	%p231, %f703, 0f3F000000;
	selp.f32 	%f706, %f705, %f704, %p231;
	cvt.rzi.s32.f32 	%r610, %f706;
	fma.rn.f32 	%f707, %f706, 0fBF000000, %f775;
	mul.f32 	%f708, %f707, %f707;
	fma.rn.f32 	%f709, %f708, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f710, %f708, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f711, %f709, %f708, 0fC0A55DF6;
	fma.rn.f32 	%f712, %f710, %f708, 0f4081E0CF;
	fma.rn.f32 	%f713, %f708, %f707, 0f00000000;
	fma.rn.f32 	%f714, %f712, %f708, 0fC09DE9E6;
	fma.rn.f32 	%f715, %f711, %f713, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f708, 0f3F800000;
	fma.rn.f32 	%f717, %f707, 0f40490FDB, %f715;
	and.b32  	%r611, %r610, 1;
	setp.eq.b32 	%p232, %r611, 1;
	selp.f32 	%f718, %f716, %f717, %p232;
	selp.f32 	%f719, %f717, %f716, %p232;
	and.b32  	%r612, %r610, 2;
	setp.eq.s32 	%p233, %r612, 0;
	neg.f32 	%f720, %f718;
	selp.f32 	%f721, %f718, %f720, %p233;
	add.s32 	%r613, %r610, 1;
	and.b32  	%r614, %r613, 2;
	setp.eq.s32 	%p234, %r614, 0;
	mov.f32 	%f722, 0f00000000;
	sub.f32 	%f723, %f722, %f719;
	selp.f32 	%f724, %f719, %f723, %p234;
	cvt.rzi.f32.f32 	%f725, %f775;
	setp.eq.f32 	%p235, %f725, %f775;
	mul.f32 	%f726, %f775, 0f00000000;
	selp.f32 	%f168, %f726, %f721, %p235;
	abs.f32 	%f727, %f775;
	setp.gt.f32 	%p236, %f727, 0f4B800000;
	add.f32 	%f728, %f168, 0f3F800000;
	selp.f32 	%f167, %f728, %f724, %p236;
$L__BB0_144:                            // %L961
	mov.u32 	%r266, 999999999;
	cvt.u16.u32 	%rs247, %r3;
	@%p92 bra 	$L__BB0_225;
// %bb.145:                             // %L997
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	and.b16  	%rs30, %rs247, 255;
	mul.lo.s16 	%rs31, %rs30, 171;
	shr.u16 	%rs32, %rs31, 12;
	mul.lo.s16 	%rs33, %rs32, 24;
	sub.s16 	%rs34, %rs247, %rs33;
	cvt.u32.u16 	%r628, %rs34;
	and.b32  	%r629, %r628, 255;
	mad.lo.s32 	%r630, %r629, 24, %r1;
	cvt.u16.u32 	%rs35, %r630;
	mul.hi.u16 	%rs36, %rs35, -7281;
	shr.u16 	%rs37, %rs36, 9;
	mul.lo.s16 	%rs38, %rs37, 576;
	sub.s16 	%rs39, %rs35, %rs38;
	cvt.u32.u16 	%r631, %rs39;
	mul.wide.u32 	%rd50, %r631, 4;
	add.s64 	%rd51, %rd1, %rd50;
	ld.global.u32 	%r632, [%rd51];
	shl.b32 	%r633, %r632, 16;
	cvt.s32.s16 	%r83, %r632;
	shr.s32 	%r84, %r632, 16;
	or.b32  	%r634, %r633, 65535;
	setp.lt.u32 	%p238, %r634, 1638399;
	setp.lt.u32 	%p239, %r632, 1572864;
	and.pred  	%p240, %p238, %p239;
	@%p240 bra 	$L__BB0_224;
	bra.uni 	$L__BB0_146;
$L__BB0_224:                            // %L1237
	mul.lo.s32 	%r638, %r84, 801;
	mad.lo.s32 	%r266, %r83, 33, %r638;
$L__BB0_225:                            // %pass503
	add.f32 	%f224, %f781, %f781;
	mov.b32 	%r411, %f224;
	add.f32 	%f487, %f785, %f785;
	and.b32  	%r412, %r411, -2147483648;
	mov.b32 	%r525, %f487;
	or.b32  	%r413, %r412, 1056964608;
	and.b32  	%r526, %r525, -2147483648;
	mov.b32 	%f225, %r413;
	or.b32  	%r527, %r526, 1056964608;
	add.f32 	%f226, %f224, %f225;
	abs.f32 	%f228, %f224;
	mov.b32 	%f488, %r527;
	cvt.rzi.f32.f32 	%f227, %f226;
	setp.gt.f32 	%p42, %f228, 0f4B000000;
	add.f32 	%f489, %f487, %f488;
	abs.f32 	%f491, %f487;
	selp.f32 	%f229, %f224, %f227, %p42;
	cvt.rzi.f32.f32 	%f230, %f224;
	setp.lt.f32 	%p43, %f228, 0f3F000000;
	cvt.rzi.f32.f32 	%f490, %f489;
	setp.gt.f32 	%p149, %f491, 0f4B000000;
	selp.f32 	%f231, %f230, %f229, %p43;
	selp.f32 	%f492, %f487, %f490, %p149;
	cvt.rzi.f32.f32 	%f493, %f487;
	setp.lt.f32 	%p150, %f491, 0f3F000000;
	fma.rn.f32 	%f232, %f231, 0fBF000000, %f781;
	selp.f32 	%f494, %f493, %f492, %p150;
	mul.f32 	%f233, %f232, %f232;
	fma.rn.f32 	%f495, %f494, 0fBF000000, %f785;
	fma.rn.f32 	%f234, %f233, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f235, %f233, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f496, %f495, %f495;
	cvt.rzi.s32.f32 	%r414, %f231;
	fma.rn.f32 	%f236, %f234, %f233, 0fC0A55DF6;
	fma.rn.f32 	%f237, %f235, %f233, 0f4081E0CF;
	fma.rn.f32 	%f238, %f233, %f232, 0f00000000;
	fma.rn.f32 	%f497, %f496, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f498, %f496, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f239, %f237, %f233, 0fC09DE9E6;
	fma.rn.f32 	%f240, %f236, %f238, 0f00000000;
	and.b32  	%r415, %r414, 1;
	cvt.rzi.s32.f32 	%r528, %f494;
	fma.rn.f32 	%f499, %f497, %f496, 0fC0A55DF6;
	fma.rn.f32 	%f500, %f498, %f496, 0f4081E0CF;
	fma.rn.f32 	%f501, %f496, %f495, 0f00000000;
	fma.rn.f32 	%f241, %f239, %f233, 0f3F800000;
	fma.rn.f32 	%f242, %f232, 0f40490FDB, %f240;
	setp.eq.b32 	%p44, %r415, 1;
	fma.rn.f32 	%f502, %f500, %f496, 0fC09DE9E6;
	fma.rn.f32 	%f503, %f499, %f501, 0f00000000;
	and.b32  	%r529, %r528, 1;
	selp.f32 	%f243, %f241, %f242, %p44;
	and.b32  	%r416, %r414, 2;
	fma.rn.f32 	%f504, %f502, %f496, 0f3F800000;
	fma.rn.f32 	%f505, %f495, 0f40490FDB, %f503;
	setp.eq.b32 	%p151, %r529, 1;
	setp.eq.s32 	%p45, %r416, 0;
	neg.f32 	%f245, %f243;
	add.s32 	%r417, %r414, 1;
	cvt.rzi.f32.f32 	%f249, %f781;
	selp.f32 	%f506, %f504, %f505, %p151;
	and.b32  	%r530, %r528, 2;
	selp.f32 	%f244, %f242, %f241, %p44;
	selp.f32 	%f246, %f243, %f245, %p45;
	and.b32  	%r418, %r417, 2;
	setp.eq.f32 	%p47, %f249, %f781;
	mul.f32 	%f250, %f781, 0f00000000;
	setp.eq.s32 	%p152, %r530, 0;
	neg.f32 	%f508, %f506;
	add.s32 	%r531, %r528, 1;
	cvt.rzi.f32.f32 	%f512, %f785;
	setp.eq.s32 	%p46, %r418, 0;
	sub.f32 	%f247, %f223, %f244;
	selp.f32 	%f251, %f250, %f246, %p47;
	abs.f32 	%f252, %f781;
	selp.f32 	%f507, %f505, %f504, %p151;
	selp.f32 	%f509, %f506, %f508, %p152;
	and.b32  	%r532, %r531, 2;
	setp.eq.f32 	%p154, %f512, %f785;
	mul.f32 	%f513, %f785, 0f00000000;
	selp.f32 	%f248, %f244, %f247, %p46;
	setp.gt.f32 	%p48, %f252, 0f4B800000;
	add.f32 	%f253, %f251, 0f3F800000;
	setp.eq.s32 	%p153, %r532, 0;
	sub.f32 	%f510, %f486, %f507;
	selp.f32 	%f514, %f513, %f509, %p154;
	abs.f32 	%f515, %f785;
	selp.f32 	%f254, %f253, %f248, %p48;
	selp.f32 	%f511, %f507, %f510, %p153;
	setp.gt.f32 	%p155, %f515, 0f4B800000;
	add.f32 	%f516, %f514, 0f3F800000;
	mov.b32 	%r407, %f254;
	mov.b32 	%r410, %f251;
	selp.f32 	%f517, %f516, %f511, %p155;
	xor.b32  	%r406, %r410, -2147483648;
	mov.b32 	%r502, %f62;
	mov.b32 	%r503, %f83;
	mov.b32 	%r508, %f63;
	mov.b32 	%r509, %f84;
	mov.b32 	%r521, %f517;
	mov.b32 	%r524, %f514;
	mov.b32 	%r458, %f20;
	mov.b32 	%r459, %f41;
	mov.b32 	%r461, %f21;
	mov.b32 	%r462, %f42;
	xor.b32  	%r505, %r508, -2147483648;
	xor.b32  	%r506, %r509, -2147483648;
	xor.b32  	%r520, %r524, -2147483648;
	mov.b32 	%r572, %f104;
	mov.b32 	%r573, %f125;
	mov.b32 	%r575, %f105;
	mov.b32 	%r576, %f126;
	mov.b32 	%r616, %f146;
	mov.b32 	%r617, %f167;
	mov.b32 	%r622, %f147;
	xor.b32  	%r619, %r622, -2147483648;
	mov.b32 	%r623, %f168;
	xor.b32  	%r620, %r623, -2147483648;
	and.b32  	%r639, %r3, 24;
	setp.ne.s32 	%p241, %r639, 24;
	cvt.u16.u32 	%rs248, %r241;
	mul.lo.s32 	%r3737, %r4, 1152;
	@%p241 bra 	$L__BB0_147;
// %bb.226:                             // %pass503.L1497_crit_edge
	mul.lo.s16 	%rs47, %rs248, 171;
	shr.u16 	%rs48, %rs47, 10;
	mul.lo.s16 	%rs49, %rs48, 6;
	sub.s16 	%rs50, %rs248, %rs49;
	cvt.u32.u16 	%r651, %rs50;
	and.b32  	%r3738, %r651, 255;
	mov.u32 	%r88, 0;
	mov.u32 	%r89, %r88;
	bra.uni 	$L__BB0_148;
$L__BB0_147:                            // %pass529
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	mul.lo.s32 	%r640, %r240, 144;
	mul.lo.s16 	%rs41, %rs248, 171;
	shr.u16 	%rs42, %rs41, 10;
	mul.lo.s16 	%rs43, %rs42, 6;
	sub.s16 	%rs44, %rs248, %rs43;
	cvt.u32.u16 	%r641, %rs44;
	and.b32  	%r3738, %r641, 255;
	and.b16  	%rs45, %rs44, 255;
	mul.wide.u16 	%r642, %rs45, 24;
	or.b32  	%r643, %r3737, %r1;
	add.s32 	%r644, %r643, %r640;
	add.s32 	%r645, %r644, %r642;
	mul.wide.u32 	%rd57, %r645, 4;
	add.s64 	%rd58, %rd2, %rd57;
	ld.global.u32 	%r88, [%rd58];
	or.b32  	%r646, %r1, 576;
	add.s32 	%r647, %r646, %r3737;
	add.s32 	%r648, %r647, %r640;
	add.s32 	%r649, %r648, %r642;
	mul.wide.u32 	%rd59, %r649, 4;
	add.s64 	%rd60, %rd2, %rd59;
	ld.global.u32 	%r89, [%rd60];
$L__BB0_148:                            // %L1497
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	// begin inline asm
	cvt.rn.f16x2.f32 %r405, %r407, %r406;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r408, %r410, %r407;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r457, %r459, %r458;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r460, %r462, %r461;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r501, %r503, %r502;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r504, %r506, %r505;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r507, %r509, %r508;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r510, %r503, %r502;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r519, %r521, %r520;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r522, %r524, %r521;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r571, %r573, %r572;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r574, %r576, %r575;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r615, %r617, %r616;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r618, %r620, %r619;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r621, %r623, %r622;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r624, %r617, %r616;
	// end inline asm
	mov.u32 	%r121, 0;
	shl.b32 	%r653, %r378, 15;
	shl.b32 	%r654, %r382, 8;
	add.s32 	%r90, %r654, %r653;
	shl.b32 	%r655, %r4, 8;
	shl.b32 	%r656, %r3, 2;
	and.b32  	%r657, %r656, 60;
	shl.b32 	%r658, %r3, 3;
	and.b32  	%r659, %r658, 128;
	or.b32  	%r660, %r657, %r655;
	or.b32  	%r91, %r660, %r659;
	or.b32  	%r661, %r656, %r655;
	or.b32  	%r662, %r661, %r659;
	or.b32  	%r92, %r662, 64;
	add.s32 	%r93, %r1, 24;
	shr.u32 	%r663, %r3, 4;
	and.b32  	%r664, %r253, 30;
	or.b32  	%r665, %r664, %r663;
	mul.lo.s32 	%r94, %r665, 257;
	or.b32  	%r666, %r253, %r663;
	or.b32  	%r667, %r666, 32;
	mul.lo.s32 	%r95, %r667, 257;
	and.b32  	%r668, %r2, 224;
	and.b16  	%rs52, %rs247, 255;
	mul.lo.s16 	%rs53, %rs52, 171;
	shr.u16 	%rs54, %rs53, 12;
	mul.lo.s16 	%rs55, %rs54, 24;
	sub.s16 	%rs56, %rs247, %rs55;
	cvt.u32.u16 	%r669, %rs56;
	and.b32  	%r96, %r669, 255;
	shr.u32 	%r670, %r1, 3;
	mad.lo.s32 	%r97, %r670, 257, %r668;
	shr.u32 	%r671, %r93, 3;
	mad.lo.s32 	%r98, %r671, 257, %r668;
	add.s32 	%r672, %r1, 48;
	shr.u32 	%r673, %r672, 3;
	mad.lo.s32 	%r99, %r673, 257, %r668;
	add.s32 	%r674, %r1, 72;
	shr.u32 	%r675, %r674, 3;
	mad.lo.s32 	%r100, %r675, 257, %r668;
	or.b32  	%r676, %r670, 12;
	mad.lo.s32 	%r101, %r676, 257, %r668;
	add.s32 	%r677, %r1, 120;
	shr.u32 	%r678, %r677, 3;
	mad.lo.s32 	%r102, %r678, 257, %r668;
	add.s32 	%r679, %r1, 144;
	shr.u32 	%r680, %r679, 3;
	mad.lo.s32 	%r103, %r680, 257, %r668;
	add.s32 	%r681, %r1, 168;
	shr.u32 	%r682, %r681, 3;
	mad.lo.s32 	%r104, %r682, 257, %r668;
	or.b32  	%r683, %r670, 24;
	mad.lo.s32 	%r105, %r683, 257, %r668;
	add.s32 	%r684, %r1, 216;
	shr.u32 	%r685, %r684, 3;
	mad.lo.s32 	%r106, %r685, 257, %r668;
	add.s32 	%r686, %r1, 240;
	shr.u32 	%r687, %r686, 3;
	mad.lo.s32 	%r107, %r687, 257, %r668;
	add.s32 	%r688, %r1, 264;
	shr.u32 	%r689, %r688, 3;
	mad.lo.s32 	%r108, %r689, 257, %r668;
	or.b32  	%r690, %r670, 36;
	mad.lo.s32 	%r109, %r690, 257, %r668;
	add.s32 	%r691, %r1, 312;
	shr.u32 	%r692, %r691, 3;
	mad.lo.s32 	%r110, %r692, 257, %r668;
	add.s32 	%r693, %r1, 336;
	shr.u32 	%r694, %r693, 3;
	mad.lo.s32 	%r111, %r694, 257, %r668;
	add.s32 	%r695, %r1, 360;
	shr.u32 	%r696, %r695, 3;
	mad.lo.s32 	%r112, %r696, 257, %r668;
	or.b32  	%r697, %r670, 48;
	mad.lo.s32 	%r113, %r697, 257, %r668;
	add.s32 	%r698, %r1, 408;
	shr.u32 	%r699, %r698, 3;
	mad.lo.s32 	%r114, %r699, 257, %r668;
	add.s32 	%r700, %r1, 432;
	shr.u32 	%r701, %r700, 3;
	mad.lo.s32 	%r115, %r701, 257, %r668;
	add.s32 	%r702, %r1, 456;
	shr.u32 	%r703, %r702, 3;
	mad.lo.s32 	%r116, %r703, 257, %r668;
	or.b32  	%r704, %r670, 60;
	mad.lo.s32 	%r117, %r704, 257, %r668;
	add.s32 	%r705, %r1, 504;
	bfe.u32 	%r706, %r705, 3, 6;
	mad.lo.s32 	%r118, %r706, 257, %r668;
	mul.lo.s32 	%r707, %r1, 33;
	mad.lo.s32 	%r708, %r240, 4806, %r707;
	mad.lo.s32 	%r709, %r3738, 801, %r708;
	bfe.s32 	%r710, %r3, 2, 1;
	and.b32  	%r711, %r3, 4;
	setp.eq.s32 	%p242, %r711, 0;
	and.b32  	%r712, %r710, 1028;
	bfe.s32 	%r713, %r3, 3, 1;
	and.b32  	%r714, %r713, 514;
	bfe.s32 	%r715, %r3, 1, 1;
	and.b32  	%r716, %r715, 2056;
	and.b32  	%r717, %r3, 1;
	neg.s32 	%r718, %r717;
	and.b32  	%r719, %r718, 4112;
	mul.lo.s32 	%r720, %r663, 257;
	add.s32 	%r721, %r720, %r1;
	add.s32 	%r722, %r721, %r714;
	add.s32 	%r723, %r722, %r712;
	add.s32 	%r724, %r723, %r716;
	add.s32 	%r725, %r724, %r719;
	mul.wide.u32 	%rd61, %r725, 4;
	mov.u64 	%rd62, shmem;
	add.s64 	%rd7, %rd62, %rd61;
	selp.b32 	%r726, 8256, 9284, %p242;
	add.s32 	%r727, %r722, %r726;
	add.s32 	%r728, %r727, %r716;
	add.s32 	%r729, %r728, %r719;
	mul.wide.u32 	%rd63, %r729, 4;
	add.s64 	%rd8, %rd62, %rd63;
	or.b32  	%r730, %r1, 32;
	add.s32 	%r731, %r730, %r720;
	add.s32 	%r732, %r731, %r714;
	add.s32 	%r733, %r732, %r712;
	add.s32 	%r734, %r733, %r716;
	add.s32 	%r735, %r734, %r719;
	mul.wide.u32 	%rd64, %r735, 4;
	add.s64 	%rd9, %rd62, %rd64;
	add.s32 	%r736, %r732, %r726;
	add.s32 	%r737, %r736, %r716;
	add.s32 	%r738, %r737, %r719;
	mul.wide.u32 	%rd65, %r738, 4;
	add.s64 	%rd10, %rd62, %rd65;
	bfe.s32 	%r739, %r1, 3, 1;
	and.b32  	%r740, %r1, 8;
	setp.eq.s32 	%p243, %r740, 0;
	and.b32  	%r741, %r739, 1028;
	mul.lo.s32 	%r742, %r240, 6;
	and.b32  	%r743, %r1, 1;
	neg.s32 	%r744, %r743;
	and.b32  	%r745, %r744, 8256;
	shr.u32 	%r746, %r1, 4;
	mul.lo.s32 	%r747, %r746, 514;
	bfe.s32 	%r748, %r1, 2, 1;
	and.b32  	%r749, %r748, 2056;
	bfe.s32 	%r750, %r1, 1, 1;
	and.b32  	%r751, %r750, 4112;
	add.s32 	%r752, %r747, %r742;
	add.s32 	%r753, %r752, %r741;
	add.s32 	%r754, %r753, %r745;
	add.s32 	%r755, %r754, %r749;
	add.s32 	%r756, %r755, %r751;
	add.s32 	%r757, %r756, %r3738;
	mul.wide.u32 	%rd66, %r757, 4;
	add.s64 	%rd11, %rd62, %rd66;
	selp.b32 	%r758, 1028, 0, %p243;
	bfe.s32 	%r759, %r93, 4, 1;
	and.b32  	%r760, %r759, 514;
	shr.u32 	%r761, %r93, 5;
	mul.lo.s32 	%r762, %r761, 257;
	add.s32 	%r763, %r758, %r742;
	or.b32  	%r764, %r763, %r745;
	add.s32 	%r765, %r764, %r749;
	add.s32 	%r766, %r765, %r751;
	add.s32 	%r767, %r766, %r762;
	add.s32 	%r768, %r767, %r760;
	add.s32 	%r769, %r768, %r3738;
	mul.wide.u32 	%rd67, %r769, 4;
	add.s64 	%rd12, %rd62, %rd67;
	or.b32  	%r770, %r742, 32;
	add.s32 	%r771, %r770, %r747;
	add.s32 	%r772, %r771, %r741;
	add.s32 	%r773, %r772, %r745;
	add.s32 	%r774, %r773, %r749;
	add.s32 	%r775, %r774, %r751;
	add.s32 	%r776, %r775, %r3738;
	mul.wide.u32 	%rd68, %r776, 4;
	add.s64 	%rd13, %rd62, %rd68;
	add.s32 	%r777, %r770, %r758;
	add.s32 	%r778, %r777, %r745;
	add.s32 	%r779, %r778, %r749;
	add.s32 	%r780, %r779, %r751;
	add.s32 	%r781, %r780, %r762;
	add.s32 	%r782, %r781, %r760;
	add.s32 	%r783, %r782, %r3738;
	mul.wide.u32 	%rd69, %r783, 4;
	add.s64 	%rd14, %rd62, %rd69;
	mul.lo.s32 	%r784, %r380, 589824;
	mad.lo.s32 	%r785, %r384, 1152, %r784;
	cvt.s64.s32 	%rd15, %r785;
	cvt.u16.u32 	%rs57, %r93;
	and.b16  	%rs58, %rs57, 255;
	mul.lo.s16 	%rs59, %rs58, 171;
	shr.u16 	%rs60, %rs59, 13;
	mul.lo.s16 	%rs61, %rs60, 48;
	sub.s16 	%rs62, %rs57, %rs61;
	cvt.u32.u16 	%r786, %rs62;
	and.b32  	%r787, %r786, 255;
	or.b32  	%r788, %r3737, %r96;
	mul.wide.u32 	%rd70, %r709, 4;
	add.s64 	%rd16, %rd62, %rd70;
	add.s32 	%r789, %r725, 64;
	mul.wide.u32 	%rd71, %r789, 4;
	add.s64 	%rd17, %rd62, %rd71;
	add.s32 	%r790, %r729, 64;
	mul.wide.u32 	%rd72, %r790, 4;
	add.s64 	%rd18, %rd62, %rd72;
	add.s32 	%r791, %r735, 64;
	mul.wide.u32 	%rd73, %r791, 4;
	add.s64 	%rd19, %rd62, %rd73;
	add.s32 	%r792, %r738, 64;
	mul.wide.u32 	%rd74, %r792, 4;
	add.s64 	%rd20, %rd62, %rd74;
	add.s32 	%r793, %r725, 128;
	mul.wide.u32 	%rd75, %r793, 4;
	add.s64 	%rd21, %rd62, %rd75;
	add.s32 	%r794, %r729, 128;
	mul.wide.u32 	%rd76, %r794, 4;
	add.s64 	%rd22, %rd62, %rd76;
	add.s32 	%r795, %r735, 128;
	mul.wide.u32 	%rd77, %r795, 4;
	add.s64 	%rd23, %rd62, %rd77;
	add.s32 	%r796, %r738, 128;
	mul.wide.u32 	%rd78, %r796, 4;
	add.s64 	%rd24, %rd62, %rd78;
	add.s32 	%r797, %r725, 192;
	mul.wide.u32 	%rd79, %r797, 4;
	add.s64 	%rd25, %rd62, %rd79;
	add.s32 	%r798, %r729, 192;
	mul.wide.u32 	%rd80, %r798, 4;
	add.s64 	%rd26, %rd62, %rd80;
	add.s32 	%r799, %r735, 192;
	mul.wide.u32 	%rd81, %r799, 4;
	add.s64 	%rd27, %rd62, %rd81;
	add.s32 	%r800, %r738, 192;
	mul.wide.u32 	%rd82, %r800, 4;
	add.s64 	%rd28, %rd62, %rd82;
	add.s32 	%r801, %r757, 64;
	mul.wide.u32 	%rd83, %r801, 4;
	add.s64 	%rd29, %rd62, %rd83;
	add.s32 	%r802, %r769, 64;
	mul.wide.u32 	%rd84, %r802, 4;
	add.s64 	%rd30, %rd62, %rd84;
	add.s32 	%r803, %r776, 64;
	mul.wide.u32 	%rd85, %r803, 4;
	add.s64 	%rd31, %rd62, %rd85;
	add.s32 	%r804, %r783, 64;
	mul.wide.u32 	%rd86, %r804, 4;
	add.s64 	%rd32, %rd62, %rd86;
	add.s32 	%r805, %r757, 128;
	mul.wide.u32 	%rd87, %r805, 4;
	add.s64 	%rd33, %rd62, %rd87;
	add.s32 	%r806, %r769, 128;
	mul.wide.u32 	%rd88, %r806, 4;
	add.s64 	%rd34, %rd62, %rd88;
	add.s32 	%r807, %r776, 128;
	mul.wide.u32 	%rd89, %r807, 4;
	add.s64 	%rd35, %rd62, %rd89;
	add.s32 	%r808, %r783, 128;
	mul.wide.u32 	%rd90, %r808, 4;
	add.s64 	%rd36, %rd62, %rd90;
	add.s32 	%r809, %r757, 192;
	mul.wide.u32 	%rd91, %r809, 4;
	add.s64 	%rd37, %rd62, %rd91;
	add.s32 	%r810, %r769, 192;
	mul.wide.u32 	%rd92, %r810, 4;
	add.s64 	%rd38, %rd62, %rd92;
	add.s32 	%r811, %r776, 192;
	mul.wide.u32 	%rd93, %r811, 4;
	add.s64 	%rd39, %rd62, %rd93;
	add.s32 	%r812, %r783, 192;
	mul.wide.u32 	%rd94, %r812, 4;
	add.s64 	%rd40, %rd62, %rd94;
	mad.lo.s32 	%r119, %r787, 24, %r788;
	mad.lo.s32 	%r813, %r1, 24, %r3737;
	add.s32 	%r120, %r813, %r96;
	setp.lt.u32 	%p245, %r3, 16;
	setp.gt.u32 	%p274, %r1, 7;
	setp.lt.u32 	%p278, %r3, 24;
	mov.u32 	%r122, %r121;
	bra.uni 	$L__BB0_149;
$L__BB0_197:                            // %L43545
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r239, %r121, 48;
	setp.ne.s32 	%p358, %r121, 192;
	mov.u32 	%r121, %r239;
	@%p358 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_198;
$L__BB0_149:                            // %L1500
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_176 Depth 2
                                        //     Child Loop BB0_187 Depth 2
	add.s32 	%r814, %r121, %r378;
	setp.lt.s32 	%p244, %r814, %r379;
	@%p244 bra 	$L__BB0_150;
	bra.uni 	$L__BB0_198;
$L__BB0_150:                            // %oksrem699
                                        //   in Loop: Header=BB0_149 Depth=1
	mul.hi.u32 	%r1007, %r121, -1431655765;
	shr.u32 	%r1008, %r1007, 5;
	mul.lo.s32 	%r273, %r1008, 48;
	add.s32 	%r1009, %r273, %r1;
	cvt.u16.u32 	%rs63, %r1009;
	shr.s16 	%rs64, %rs63, 15;
	shr.u16 	%rs65, %rs64, 8;
	add.s16 	%rs66, %rs63, %rs65;
	and.b16  	%rs67, %rs66, -256;
	sub.s16 	%rs68, %rs63, %rs67;
	cvt.s32.s16 	%r1010, %rs68;
	shl.b32 	%r1011, %r1010, 15;
	or.b32  	%r1012, %r1011, %r91;
	add.s32 	%r1013, %r90, %r1012;
	shr.s32 	%r1014, %r1013, 31;
	shr.u32 	%r1015, %r1014, 9;
	add.s32 	%r1016, %r1013, %r1015;
	shr.s32 	%r1017, %r1016, 23;
	setp.lt.s32 	%p246, %r1013, 0;
	and.b32  	%r1018, %r1016, -8388608;
	setp.ne.s32 	%p247, %r1018, %r1013;
	and.pred  	%p248, %p246, %p247;
	selp.u32 	%r1019, 1, 0, %p248;
	sub.s32 	%r1020, %r1019, %r1017;
	shl.b32 	%r1021, %r1020, 23;
	add.s32 	%r1022, %r1021, %r1013;
	mul.wide.s32 	%rd95, %r1022, 4;
	add.s64 	%rd96, %rd3, %rd95;
	ld.global.v4.u32 	{%r1023, %r1024, %r1025, %r1026}, [%rd96];
	or.b32  	%r1027, %r92, %r1011;
	add.s32 	%r1028, %r90, %r1027;
	shr.s32 	%r1029, %r1028, 31;
	shr.u32 	%r1030, %r1029, 9;
	add.s32 	%r1031, %r1028, %r1030;
	shr.u32 	%r1032, %r1031, 23;
	shr.u32 	%r1033, %r1028, 31;
	sub.s32 	%r1034, %r1033, %r1032;
	shl.b32 	%r1035, %r1034, 23;
	or.b32  	%r1036, %r1028, 1;
	add.s32 	%r1037, %r1036, %r1035;
	mul.wide.s32 	%rd97, %r1037, 4;
	add.s64 	%rd98, %rd3, %rd97;
	ld.global.v4.u32 	{%r1038, %r1039, %r1040, %r1041}, [%rd98+-4];
	add.s32 	%r1042, %r93, %r273;
	cvt.u16.u32 	%rs69, %r1042;
	shr.s16 	%rs70, %rs69, 15;
	shr.u16 	%rs71, %rs70, 8;
	add.s16 	%rs72, %rs69, %rs71;
	and.b16  	%rs73, %rs72, -256;
	sub.s16 	%rs74, %rs69, %rs73;
	cvt.s32.s16 	%r1043, %rs74;
	shl.b32 	%r1044, %r1043, 15;
	or.b32  	%r1045, %r1044, %r91;
	add.s32 	%r1046, %r90, %r1045;
	shr.s32 	%r1047, %r1046, 31;
	shr.u32 	%r1048, %r1047, 9;
	add.s32 	%r1049, %r1046, %r1048;
	shr.s32 	%r1050, %r1049, 23;
	setp.lt.s32 	%p249, %r1046, 0;
	and.b32  	%r1051, %r1049, -8388608;
	setp.ne.s32 	%p250, %r1051, %r1046;
	and.pred  	%p251, %p249, %p250;
	selp.u32 	%r1052, 1, 0, %p251;
	sub.s32 	%r1053, %r1052, %r1050;
	shl.b32 	%r1054, %r1053, 23;
	add.s32 	%r1055, %r1054, %r1046;
	mul.wide.s32 	%rd99, %r1055, 4;
	add.s64 	%rd100, %rd3, %rd99;
	ld.global.v4.u32 	{%r1056, %r1057, %r1058, %r1059}, [%rd100];
	or.b32  	%r1060, %r92, %r1044;
	add.s32 	%r1061, %r90, %r1060;
	shr.s32 	%r1062, %r1061, 31;
	shr.u32 	%r1063, %r1062, 9;
	add.s32 	%r1064, %r1061, %r1063;
	shr.u32 	%r1065, %r1064, 23;
	shr.u32 	%r1066, %r1061, 31;
	sub.s32 	%r1067, %r1066, %r1065;
	shl.b32 	%r1068, %r1067, 23;
	or.b32  	%r1069, %r1061, 1;
	add.s32 	%r1070, %r1069, %r1068;
	mul.wide.s32 	%rd101, %r1070, 4;
	add.s64 	%rd102, %rd3, %rd101;
	ld.global.v4.u32 	{%r1071, %r1072, %r1073, %r1074}, [%rd102+-4];
	selp.b32 	%r1075, %r1025, %r1023, %p245;
	shfl.sync.bfly.b32	%r1076, %r1075, 16, 31, -1;
	selp.b32 	%r817, %r1023, %r1076, %p245;
	selp.b32 	%r822, %r1076, %r1025, %p245;
	selp.b32 	%r1077, %r1026, %r1024, %p245;
	shfl.sync.bfly.b32	%r1078, %r1077, 16, 31, -1;
	selp.b32 	%r825, %r1024, %r1078, %p245;
	selp.b32 	%r830, %r1078, %r1026, %p245;
	selp.b32 	%r1079, %r1040, %r1038, %p245;
	shfl.sync.bfly.b32	%r1080, %r1079, 16, 31, -1;
	selp.b32 	%r833, %r1038, %r1080, %p245;
	selp.b32 	%r838, %r1080, %r1040, %p245;
	selp.b32 	%r1081, %r1041, %r1039, %p245;
	shfl.sync.bfly.b32	%r1082, %r1081, 16, 31, -1;
	selp.b32 	%r841, %r1039, %r1082, %p245;
	selp.b32 	%r846, %r1082, %r1041, %p245;
	selp.b32 	%r1083, %r1058, %r1056, %p245;
	shfl.sync.bfly.b32	%r1084, %r1083, 16, 31, -1;
	selp.b32 	%r849, %r1056, %r1084, %p245;
	selp.b32 	%r854, %r1084, %r1058, %p245;
	selp.b32 	%r1085, %r1059, %r1057, %p245;
	shfl.sync.bfly.b32	%r1086, %r1085, 16, 31, -1;
	selp.b32 	%r857, %r1057, %r1086, %p245;
	selp.b32 	%r862, %r1086, %r1059, %p245;
	selp.b32 	%r1087, %r1073, %r1071, %p245;
	shfl.sync.bfly.b32	%r1088, %r1087, 16, 31, -1;
	selp.b32 	%r865, %r1071, %r1088, %p245;
	selp.b32 	%r870, %r1088, %r1073, %p245;
	selp.b32 	%r1089, %r1074, %r1072, %p245;
	shfl.sync.bfly.b32	%r1090, %r1089, 16, 31, -1;
	selp.b32 	%r873, %r1072, %r1090, %p245;
	selp.b32 	%r878, %r1090, %r1074, %p245;
	shl.b32 	%r818, %r822, 4;
	mov.u32 	%r816, 252645135;
	// begin inline asm
	lop3.b32 %r880, %r816, %r817, %r818, 202;
	// end inline asm
	shr.u32 	%r821, %r817, 4;
	// begin inline asm
	lop3.b32 %r896, %r816, %r821, %r822, 202;
	// end inline asm
	shl.b32 	%r826, %r830, 4;
	// begin inline asm
	lop3.b32 %r888, %r816, %r825, %r826, 202;
	// end inline asm
	shr.u32 	%r829, %r825, 4;
	// begin inline asm
	lop3.b32 %r904, %r816, %r829, %r830, 202;
	// end inline asm
	shl.b32 	%r834, %r838, 4;
	// begin inline asm
	lop3.b32 %r912, %r816, %r833, %r834, 202;
	// end inline asm
	shr.u32 	%r837, %r833, 4;
	// begin inline asm
	lop3.b32 %r928, %r816, %r837, %r838, 202;
	// end inline asm
	shl.b32 	%r842, %r846, 4;
	// begin inline asm
	lop3.b32 %r920, %r816, %r841, %r842, 202;
	// end inline asm
	shr.u32 	%r845, %r841, 4;
	// begin inline asm
	lop3.b32 %r936, %r816, %r845, %r846, 202;
	// end inline asm
	shl.b32 	%r850, %r854, 4;
	// begin inline asm
	lop3.b32 %r881, %r816, %r849, %r850, 202;
	// end inline asm
	shr.u32 	%r853, %r849, 4;
	// begin inline asm
	lop3.b32 %r897, %r816, %r853, %r854, 202;
	// end inline asm
	shl.b32 	%r858, %r862, 4;
	// begin inline asm
	lop3.b32 %r889, %r816, %r857, %r858, 202;
	// end inline asm
	shr.u32 	%r861, %r857, 4;
	// begin inline asm
	lop3.b32 %r905, %r816, %r861, %r862, 202;
	// end inline asm
	shl.b32 	%r866, %r870, 4;
	// begin inline asm
	lop3.b32 %r913, %r816, %r865, %r866, 202;
	// end inline asm
	shr.u32 	%r869, %r865, 4;
	// begin inline asm
	lop3.b32 %r929, %r816, %r869, %r870, 202;
	// end inline asm
	shl.b32 	%r874, %r878, 4;
	// begin inline asm
	lop3.b32 %r921, %r816, %r873, %r874, 202;
	// end inline asm
	shr.u32 	%r877, %r873, 4;
	// begin inline asm
	lop3.b32 %r937, %r816, %r877, %r878, 202;
	// end inline asm
	mov.u32 	%r882, 25152;
	// begin inline asm
	prmt.b32 %r944, %r880, %r881, %r882;
	// end inline asm
	mov.u32 	%r886, 29521;
	// begin inline asm
	prmt.b32 %r976, %r880, %r881, %r886;
	// end inline asm
	// begin inline asm
	prmt.b32 %r952, %r888, %r889, %r882;
	// end inline asm
	// begin inline asm
	prmt.b32 %r984, %r888, %r889, %r886;
	// end inline asm
	// begin inline asm
	prmt.b32 %r945, %r896, %r897, %r882;
	// end inline asm
	// begin inline asm
	prmt.b32 %r977, %r896, %r897, %r886;
	// end inline asm
	// begin inline asm
	prmt.b32 %r953, %r904, %r905, %r882;
	// end inline asm
	// begin inline asm
	prmt.b32 %r985, %r904, %r905, %r886;
	// end inline asm
	// begin inline asm
	prmt.b32 %r960, %r912, %r913, %r882;
	// end inline asm
	// begin inline asm
	prmt.b32 %r992, %r912, %r913, %r886;
	// end inline asm
	// begin inline asm
	prmt.b32 %r968, %r920, %r921, %r882;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1000, %r920, %r921, %r886;
	// end inline asm
	// begin inline asm
	prmt.b32 %r961, %r928, %r929, %r882;
	// end inline asm
	// begin inline asm
	prmt.b32 %r993, %r928, %r929, %r886;
	// end inline asm
	// begin inline asm
	prmt.b32 %r969, %r936, %r937, %r882;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1001, %r936, %r937, %r886;
	// end inline asm
	mov.u32 	%r1002, 21520;
	// begin inline asm
	prmt.b32 %r943, %r944, %r945, %r1002;
	// end inline asm
	mov.u32 	%r1006, 30258;
	// begin inline asm
	prmt.b32 %r947, %r944, %r945, %r1006;
	// end inline asm
	// begin inline asm
	prmt.b32 %r951, %r952, %r953, %r1002;
	// end inline asm
	// begin inline asm
	prmt.b32 %r955, %r952, %r953, %r1006;
	// end inline asm
	// begin inline asm
	prmt.b32 %r959, %r960, %r961, %r1002;
	// end inline asm
	// begin inline asm
	prmt.b32 %r963, %r960, %r961, %r1006;
	// end inline asm
	// begin inline asm
	prmt.b32 %r967, %r968, %r969, %r1002;
	// end inline asm
	// begin inline asm
	prmt.b32 %r971, %r968, %r969, %r1006;
	// end inline asm
	// begin inline asm
	prmt.b32 %r975, %r976, %r977, %r1002;
	// end inline asm
	// begin inline asm
	prmt.b32 %r979, %r976, %r977, %r1006;
	// end inline asm
	// begin inline asm
	prmt.b32 %r983, %r984, %r985, %r1002;
	// end inline asm
	// begin inline asm
	prmt.b32 %r987, %r984, %r985, %r1006;
	// end inline asm
	// begin inline asm
	prmt.b32 %r991, %r992, %r993, %r1002;
	// end inline asm
	// begin inline asm
	prmt.b32 %r995, %r992, %r993, %r1006;
	// end inline asm
	// begin inline asm
	prmt.b32 %r999, %r1000, %r1001, %r1002;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1003, %r1000, %r1001, %r1006;
	// end inline asm
	mul.hi.s16 	%rs75, %rs63, 10923;
	shr.u16 	%rs76, %rs75, 15;
	shr.s16 	%rs77, %rs75, 2;
	add.s16 	%rs78, %rs77, %rs76;
	mul.lo.s16 	%rs79, %rs78, 24;
	sub.s16 	%rs80, %rs63, %rs79;
	cvt.s32.s16 	%r1091, %rs80;
	add.s32 	%r1092, %r94, %r1091;
	mul.wide.s32 	%rd103, %r1092, 4;
	add.s64 	%rd105, %rd62, %rd103;
	st.shared.u32 	[%rd105], %r943;
	add.s32 	%r1093, %r1092, 128;
	mul.wide.u32 	%rd106, %r1093, 4;
	add.s64 	%rd107, %rd62, %rd106;
	st.shared.u32 	[%rd107], %r951;
	add.s32 	%r1094, %r1092, 64;
	mul.wide.u32 	%rd108, %r1094, 4;
	add.s64 	%rd109, %rd62, %rd108;
	st.shared.u32 	[%rd109], %r947;
	add.s32 	%r1095, %r1092, 192;
	mul.wide.u32 	%rd110, %r1095, 4;
	add.s64 	%rd111, %rd62, %rd110;
	st.shared.u32 	[%rd111], %r955;
	add.s32 	%r1096, %r95, %r1091;
	mul.wide.u32 	%rd112, %r1096, 4;
	add.s64 	%rd113, %rd62, %rd112;
	st.shared.u32 	[%rd113], %r959;
	add.s32 	%r1097, %r1096, 128;
	mul.wide.u32 	%rd114, %r1097, 4;
	add.s64 	%rd115, %rd62, %rd114;
	st.shared.u32 	[%rd115], %r967;
	add.s32 	%r1098, %r1096, 64;
	mul.wide.u32 	%rd116, %r1098, 4;
	add.s64 	%rd117, %rd62, %rd116;
	st.shared.u32 	[%rd117], %r963;
	add.s32 	%r1099, %r1096, 192;
	mul.wide.u32 	%rd118, %r1099, 4;
	add.s64 	%rd119, %rd62, %rd118;
	st.shared.u32 	[%rd119], %r971;
	add.s32 	%r1100, %r1092, 32;
	mul.wide.u32 	%rd120, %r1100, 4;
	add.s64 	%rd121, %rd62, %rd120;
	st.shared.u32 	[%rd121], %r975;
	add.s32 	%r1101, %r1092, 160;
	mul.wide.u32 	%rd122, %r1101, 4;
	add.s64 	%rd123, %rd62, %rd122;
	st.shared.u32 	[%rd123], %r983;
	add.s32 	%r1102, %r1092, 96;
	mul.wide.u32 	%rd124, %r1102, 4;
	add.s64 	%rd125, %rd62, %rd124;
	st.shared.u32 	[%rd125], %r979;
	add.s32 	%r1103, %r1092, 224;
	mul.wide.u32 	%rd126, %r1103, 4;
	add.s64 	%rd127, %rd62, %rd126;
	st.shared.u32 	[%rd127], %r987;
	add.s32 	%r1104, %r1096, 32;
	mul.wide.u32 	%rd128, %r1104, 4;
	add.s64 	%rd129, %rd62, %rd128;
	st.shared.u32 	[%rd129], %r991;
	add.s32 	%r1105, %r1096, 160;
	mul.wide.u32 	%rd130, %r1105, 4;
	add.s64 	%rd131, %rd62, %rd130;
	st.shared.u32 	[%rd131], %r999;
	add.s32 	%r1106, %r1096, 96;
	mul.wide.u32 	%rd132, %r1106, 4;
	add.s64 	%rd133, %rd62, %rd132;
	st.shared.u32 	[%rd133], %r995;
	add.s32 	%r1107, %r1096, 224;
	mul.wide.u32 	%rd134, %r1107, 4;
	add.s64 	%rd135, %rd62, %rd134;
	st.shared.u32 	[%rd135], %r1003;
	bar.sync 	0;
	add.s32 	%r1108, %r273, %r96;
	cvt.u16.u32 	%rs81, %r1108;
	mul.hi.s16 	%rs82, %rs81, 10923;
	shr.u16 	%rs83, %rs82, 15;
	shr.s16 	%rs84, %rs82, 2;
	add.s16 	%rs85, %rs84, %rs83;
	mul.lo.s16 	%rs86, %rs85, 24;
	sub.s16 	%rs87, %rs81, %rs86;
	cvt.s32.s16 	%r274, %rs87;
	add.s32 	%r1109, %r97, %r274;
	mul.wide.s32 	%rd136, %r1109, 4;
	add.s64 	%rd137, %rd62, %rd136;
	ld.shared.u32 	%r275, [%rd137];
	add.s32 	%r1110, %r98, %r274;
	mul.wide.u32 	%rd138, %r1110, 4;
	add.s64 	%rd139, %rd62, %rd138;
	ld.shared.u32 	%r276, [%rd139];
	add.s32 	%r1111, %r99, %r274;
	mul.wide.u32 	%rd140, %r1111, 4;
	add.s64 	%rd141, %rd62, %rd140;
	ld.shared.u32 	%r277, [%rd141];
	add.s32 	%r1112, %r100, %r274;
	mul.wide.u32 	%rd142, %r1112, 4;
	add.s64 	%rd143, %rd62, %rd142;
	ld.shared.u32 	%r278, [%rd143];
	add.s32 	%r1113, %r101, %r274;
	mul.wide.u32 	%rd144, %r1113, 4;
	add.s64 	%rd145, %rd62, %rd144;
	ld.shared.u32 	%r279, [%rd145];
	add.s32 	%r1114, %r102, %r274;
	mul.wide.u32 	%rd146, %r1114, 4;
	add.s64 	%rd147, %rd62, %rd146;
	ld.shared.u32 	%r280, [%rd147];
	add.s32 	%r1115, %r103, %r274;
	mul.wide.u32 	%rd148, %r1115, 4;
	add.s64 	%rd149, %rd62, %rd148;
	ld.shared.u32 	%r281, [%rd149];
	add.s32 	%r1116, %r104, %r274;
	mul.wide.u32 	%rd150, %r1116, 4;
	add.s64 	%rd151, %rd62, %rd150;
	ld.shared.u32 	%r282, [%rd151];
	add.s32 	%r1117, %r105, %r274;
	mul.wide.u32 	%rd152, %r1117, 4;
	add.s64 	%rd153, %rd62, %rd152;
	ld.shared.u32 	%r283, [%rd153];
	add.s32 	%r1118, %r106, %r274;
	mul.wide.u32 	%rd154, %r1118, 4;
	add.s64 	%rd155, %rd62, %rd154;
	ld.shared.u32 	%r284, [%rd155];
	add.s32 	%r1119, %r107, %r274;
	mul.wide.u32 	%rd156, %r1119, 4;
	add.s64 	%rd157, %rd62, %rd156;
	ld.shared.u32 	%r285, [%rd157];
	add.s32 	%r1120, %r108, %r274;
	mul.wide.u32 	%rd158, %r1120, 4;
	add.s64 	%rd159, %rd62, %rd158;
	ld.shared.u32 	%r286, [%rd159];
	add.s32 	%r1121, %r109, %r274;
	mul.wide.u32 	%rd160, %r1121, 4;
	add.s64 	%rd161, %rd62, %rd160;
	ld.shared.u32 	%r287, [%rd161];
	add.s32 	%r1122, %r110, %r274;
	mul.wide.u32 	%rd162, %r1122, 4;
	add.s64 	%rd163, %rd62, %rd162;
	ld.shared.u32 	%r288, [%rd163];
	add.s32 	%r1123, %r111, %r274;
	mul.wide.u32 	%rd164, %r1123, 4;
	add.s64 	%rd165, %rd62, %rd164;
	ld.shared.u32 	%r289, [%rd165];
	add.s32 	%r1124, %r112, %r274;
	mul.wide.u32 	%rd166, %r1124, 4;
	add.s64 	%rd167, %rd62, %rd166;
	ld.shared.u32 	%r290, [%rd167];
	add.s32 	%r1125, %r113, %r274;
	mul.wide.u32 	%rd168, %r1125, 4;
	add.s64 	%rd169, %rd62, %rd168;
	ld.shared.u32 	%r291, [%rd169];
	add.s32 	%r1126, %r114, %r274;
	mul.wide.u32 	%rd170, %r1126, 4;
	add.s64 	%rd171, %rd62, %rd170;
	ld.shared.u32 	%r292, [%rd171];
	add.s32 	%r1127, %r115, %r274;
	mul.wide.u32 	%rd172, %r1127, 4;
	add.s64 	%rd173, %rd62, %rd172;
	ld.shared.u32 	%r293, [%rd173];
	add.s32 	%r1128, %r116, %r274;
	mul.wide.u32 	%rd174, %r1128, 4;
	add.s64 	%rd175, %rd62, %rd174;
	ld.shared.u32 	%r294, [%rd175];
	add.s32 	%r1129, %r117, %r274;
	mul.wide.u32 	%rd176, %r1129, 4;
	add.s64 	%rd177, %rd62, %rd176;
	ld.shared.u32 	%r295, [%rd177];
	add.s32 	%r1130, %r118, %r274;
	mul.wide.s32 	%rd178, %r1130, 4;
	add.s64 	%rd179, %rd62, %rd178;
	ld.shared.u32 	%r296, [%rd179];
	bar.sync 	0;
	shfl.sync.idx.b32	%r297, %r266, 0, 31, -1;
	shfl.sync.idx.b32	%r298, %r266, 1, 31, -1;
	shfl.sync.idx.b32	%r299, %r266, 2, 31, -1;
	shfl.sync.idx.b32	%r300, %r266, 3, 31, -1;
	shfl.sync.idx.b32	%r301, %r266, 4, 31, -1;
	shfl.sync.idx.b32	%r302, %r266, 5, 31, -1;
	shfl.sync.idx.b32	%r303, %r266, 6, 31, -1;
	shfl.sync.idx.b32	%r304, %r266, 7, 31, -1;
	shfl.sync.idx.b32	%r305, %r266, 8, 31, -1;
	shfl.sync.idx.b32	%r306, %r266, 9, 31, -1;
	shfl.sync.idx.b32	%r307, %r266, 10, 31, -1;
	shfl.sync.idx.b32	%r308, %r266, 11, 31, -1;
	shfl.sync.idx.b32	%r309, %r266, 12, 31, -1;
	shfl.sync.idx.b32	%r310, %r266, 13, 31, -1;
	shfl.sync.idx.b32	%r311, %r266, 14, 31, -1;
	shfl.sync.idx.b32	%r312, %r266, 15, 31, -1;
	shfl.sync.idx.b32	%r313, %r266, 16, 31, -1;
	shfl.sync.idx.b32	%r314, %r266, 17, 31, -1;
	shfl.sync.idx.b32	%r315, %r266, 18, 31, -1;
	shfl.sync.idx.b32	%r316, %r266, 19, 31, -1;
	shfl.sync.idx.b32	%r317, %r266, 20, 31, -1;
	shfl.sync.idx.b32	%r318, %r266, 21, 31, -1;
	shfl.sync.idx.b32	%r319, %r266, 22, 31, -1;
	shfl.sync.idx.b32	%r320, %r266, 23, 31, -1;
	setp.eq.s32 	%p252, %r297, 999999999;
	@%p252 bra 	$L__BB0_151;
// %bb.227:                             // %oksrem3327
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1131, %r297, %r274;
	mul.wide.s32 	%rd180, %r1131, 4;
	add.s64 	%rd182, %rd62, %rd180;
	st.shared.u32 	[%rd182], %r275;
	setp.eq.s32 	%p253, %r298, 999999999;
	@%p253 bra 	$L__BB0_152;
// %bb.228:                             // %oksrem3395
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1132, %r298, %r274;
	mul.wide.s32 	%rd183, %r1132, 4;
	add.s64 	%rd185, %rd62, %rd183;
	st.shared.u32 	[%rd185], %r276;
	setp.eq.s32 	%p254, %r299, 999999999;
	@%p254 bra 	$L__BB0_153;
// %bb.229:                             // %oksrem3463
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1133, %r299, %r274;
	mul.wide.s32 	%rd186, %r1133, 4;
	add.s64 	%rd188, %rd62, %rd186;
	st.shared.u32 	[%rd188], %r277;
	setp.eq.s32 	%p255, %r300, 999999999;
	@%p255 bra 	$L__BB0_154;
// %bb.230:                             // %oksrem3531
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1134, %r300, %r274;
	mul.wide.s32 	%rd189, %r1134, 4;
	add.s64 	%rd191, %rd62, %rd189;
	st.shared.u32 	[%rd191], %r278;
	setp.eq.s32 	%p256, %r301, 999999999;
	@%p256 bra 	$L__BB0_155;
// %bb.231:                             // %oksrem3599
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1135, %r301, %r274;
	mul.wide.s32 	%rd192, %r1135, 4;
	add.s64 	%rd194, %rd62, %rd192;
	st.shared.u32 	[%rd194], %r279;
	setp.eq.s32 	%p257, %r302, 999999999;
	@%p257 bra 	$L__BB0_156;
// %bb.232:                             // %oksrem3667
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1136, %r302, %r274;
	mul.wide.s32 	%rd195, %r1136, 4;
	add.s64 	%rd197, %rd62, %rd195;
	st.shared.u32 	[%rd197], %r280;
	setp.eq.s32 	%p258, %r303, 999999999;
	@%p258 bra 	$L__BB0_157;
// %bb.233:                             // %oksrem3735
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1137, %r303, %r274;
	mul.wide.s32 	%rd198, %r1137, 4;
	add.s64 	%rd200, %rd62, %rd198;
	st.shared.u32 	[%rd200], %r281;
	setp.eq.s32 	%p259, %r304, 999999999;
	@%p259 bra 	$L__BB0_158;
// %bb.234:                             // %oksrem3803
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1138, %r304, %r274;
	mul.wide.s32 	%rd201, %r1138, 4;
	add.s64 	%rd203, %rd62, %rd201;
	st.shared.u32 	[%rd203], %r282;
	setp.eq.s32 	%p260, %r305, 999999999;
	@%p260 bra 	$L__BB0_159;
// %bb.235:                             // %oksrem3871
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1139, %r305, %r274;
	mul.wide.s32 	%rd204, %r1139, 4;
	add.s64 	%rd206, %rd62, %rd204;
	st.shared.u32 	[%rd206], %r283;
	setp.eq.s32 	%p261, %r306, 999999999;
	@%p261 bra 	$L__BB0_160;
// %bb.236:                             // %oksrem3939
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1140, %r306, %r274;
	mul.wide.s32 	%rd207, %r1140, 4;
	add.s64 	%rd209, %rd62, %rd207;
	st.shared.u32 	[%rd209], %r284;
	setp.eq.s32 	%p262, %r307, 999999999;
	@%p262 bra 	$L__BB0_161;
// %bb.237:                             // %oksrem4007
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1141, %r307, %r274;
	mul.wide.s32 	%rd210, %r1141, 4;
	add.s64 	%rd212, %rd62, %rd210;
	st.shared.u32 	[%rd212], %r285;
	setp.eq.s32 	%p263, %r308, 999999999;
	@%p263 bra 	$L__BB0_162;
// %bb.238:                             // %oksrem4075
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1142, %r308, %r274;
	mul.wide.s32 	%rd213, %r1142, 4;
	add.s64 	%rd215, %rd62, %rd213;
	st.shared.u32 	[%rd215], %r286;
	setp.eq.s32 	%p264, %r309, 999999999;
	@%p264 bra 	$L__BB0_163;
// %bb.239:                             // %oksrem4143
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1143, %r309, %r274;
	mul.wide.s32 	%rd216, %r1143, 4;
	add.s64 	%rd218, %rd62, %rd216;
	st.shared.u32 	[%rd218], %r287;
	setp.eq.s32 	%p265, %r310, 999999999;
	@%p265 bra 	$L__BB0_164;
// %bb.240:                             // %oksrem4211
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1144, %r310, %r274;
	mul.wide.s32 	%rd219, %r1144, 4;
	add.s64 	%rd221, %rd62, %rd219;
	st.shared.u32 	[%rd221], %r288;
	setp.eq.s32 	%p266, %r311, 999999999;
	@%p266 bra 	$L__BB0_165;
// %bb.241:                             // %oksrem4279
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1145, %r311, %r274;
	mul.wide.s32 	%rd222, %r1145, 4;
	add.s64 	%rd224, %rd62, %rd222;
	st.shared.u32 	[%rd224], %r289;
	setp.eq.s32 	%p267, %r312, 999999999;
	@%p267 bra 	$L__BB0_166;
// %bb.242:                             // %oksrem4347
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1146, %r312, %r274;
	mul.wide.s32 	%rd225, %r1146, 4;
	add.s64 	%rd227, %rd62, %rd225;
	st.shared.u32 	[%rd227], %r290;
	setp.eq.s32 	%p268, %r313, 999999999;
	@%p268 bra 	$L__BB0_167;
// %bb.243:                             // %oksrem4415
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1147, %r313, %r274;
	mul.wide.s32 	%rd228, %r1147, 4;
	add.s64 	%rd230, %rd62, %rd228;
	st.shared.u32 	[%rd230], %r291;
	setp.eq.s32 	%p269, %r314, 999999999;
	@%p269 bra 	$L__BB0_168;
// %bb.244:                             // %oksrem4483
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1148, %r314, %r274;
	mul.wide.s32 	%rd231, %r1148, 4;
	add.s64 	%rd233, %rd62, %rd231;
	st.shared.u32 	[%rd233], %r292;
	setp.eq.s32 	%p270, %r315, 999999999;
	@%p270 bra 	$L__BB0_169;
// %bb.245:                             // %oksrem4551
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1149, %r315, %r274;
	mul.wide.s32 	%rd234, %r1149, 4;
	add.s64 	%rd236, %rd62, %rd234;
	st.shared.u32 	[%rd236], %r293;
	setp.eq.s32 	%p271, %r316, 999999999;
	@%p271 bra 	$L__BB0_170;
// %bb.246:                             // %oksrem4619
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1150, %r316, %r274;
	mul.wide.s32 	%rd237, %r1150, 4;
	add.s64 	%rd239, %rd62, %rd237;
	st.shared.u32 	[%rd239], %r294;
	setp.eq.s32 	%p272, %r317, 999999999;
	@%p272 bra 	$L__BB0_171;
// %bb.247:                             // %oksrem4687
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1151, %r317, %r274;
	mul.wide.s32 	%rd240, %r1151, 4;
	add.s64 	%rd242, %rd62, %rd240;
	st.shared.u32 	[%rd242], %r295;
	setp.eq.s32 	%p273, %r318, 999999999;
	@%p273 bra 	$L__BB0_172;
// %bb.248:                             // %oksrem4756
                                        //   in Loop: Header=BB0_149 Depth=1
	selp.b32 	%r1152, 0, %r296, %p274;
	add.s32 	%r1153, %r318, %r274;
	mul.wide.s32 	%rd243, %r1153, 4;
	add.s64 	%rd245, %rd62, %rd243;
	st.shared.u32 	[%rd245], %r1152;
	setp.eq.s32 	%p275, %r319, 999999999;
	@%p275 bra 	$L__BB0_173;
// %bb.249:                             // %oksrem4824
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1154, %r319, %r274;
	mul.wide.s32 	%rd246, %r1154, 4;
	add.s64 	%rd248, %rd62, %rd246;
	mov.u32 	%r1155, 0;
	st.shared.u32 	[%rd248], %r1155;
	setp.eq.s32 	%p276, %r320, 999999999;
	@%p276 bra 	$L__BB0_174;
// %bb.250:                             // %oksrem4891
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r1157, %r320, %r274;
	mul.wide.s32 	%rd249, %r1157, 4;
	add.s64 	%rd251, %rd62, %rd249;
	st.shared.u32 	[%rd251], %r1155;
	bar.sync 	0;
	mov.u32 	%r3743, %r1155;
	mov.u32 	%r3744, %r1155;
	mov.u32 	%r3745, %r1155;
	mov.u32 	%r3746, %r1155;
	mov.u32 	%r3747, %r1155;
	mov.u32 	%r3748, %r1155;
	mov.u32 	%r3749, %r1155;
	mov.u32 	%r3750, %r1155;
	mov.u32 	%r3751, %r1155;
	mov.u32 	%r3752, %r1155;
	mov.u32 	%r3753, %r1155;
	mov.u32 	%r3754, %r1155;
	mov.u32 	%r3755, %r1155;
	mov.u32 	%r3756, %r1155;
	mov.u32 	%r3757, %r1155;
	mov.u32 	%r3758, %r1155;
	mov.u32 	%r3759, %r1155;
	mov.u32 	%r3760, %r1155;
	mov.u32 	%r3761, %r1155;
	mov.u32 	%r3762, %r1155;
	mov.u32 	%r3763, %r1155;
	mov.u32 	%r3764, %r1155;
	mov.u32 	%r3765, %r1155;
	mov.u32 	%r3766, %r1155;
	@%p92 bra 	$L__BB0_175;
// %bb.251:                             // %oksrem4929
                                        //   in Loop: Header=BB0_149 Depth=1
	cvt.u16.u32 	%rs88, %r273;
	mul.hi.s16 	%rs89, %rs88, 10923;
	shr.u16 	%rs90, %rs89, 15;
	shr.s16 	%rs91, %rs89, 2;
	add.s16 	%rs92, %rs91, %rs90;
	mul.lo.s16 	%rs93, %rs92, 24;
	sub.s16 	%rs94, %rs88, %rs93;
	cvt.s32.s16 	%r1158, %rs94;
	mul.wide.s32 	%rd252, %r1158, 4;
	add.s64 	%rd253, %rd16, %rd252;
	ld.shared.u32 	%r3743, [%rd253];
	ld.shared.u32 	%r3744, [%rd16+4];
	ld.shared.u32 	%r3745, [%rd16+8];
	ld.shared.u32 	%r3746, [%rd16+12];
	ld.shared.u32 	%r3747, [%rd16+16];
	ld.shared.u32 	%r3748, [%rd16+20];
	ld.shared.u32 	%r3749, [%rd16+24];
	ld.shared.u32 	%r3750, [%rd16+28];
	ld.shared.u32 	%r3751, [%rd16+32];
	ld.shared.u32 	%r3752, [%rd16+36];
	ld.shared.u32 	%r3753, [%rd16+40];
	ld.shared.u32 	%r3754, [%rd16+44];
	ld.shared.u32 	%r3755, [%rd16+48];
	ld.shared.u32 	%r3756, [%rd16+52];
	ld.shared.u32 	%r3757, [%rd16+56];
	ld.shared.u32 	%r3758, [%rd16+60];
	add.s16 	%rs95, %rs88, 16;
	mul.hi.s16 	%rs96, %rs95, 10923;
	shr.u16 	%rs97, %rs96, 15;
	shr.s16 	%rs98, %rs96, 2;
	add.s16 	%rs99, %rs98, %rs97;
	mul.lo.s16 	%rs100, %rs99, 24;
	sub.s16 	%rs101, %rs95, %rs100;
	cvt.s32.s16 	%r1159, %rs101;
	mul.wide.s32 	%rd254, %r1159, 4;
	add.s64 	%rd255, %rd16, %rd254;
	ld.shared.u32 	%r3759, [%rd255];
	add.s16 	%rs102, %rs88, 17;
	mul.hi.s16 	%rs103, %rs102, 10923;
	shr.u16 	%rs104, %rs103, 15;
	shr.s16 	%rs105, %rs103, 2;
	add.s16 	%rs106, %rs105, %rs104;
	mul.lo.s16 	%rs107, %rs106, 24;
	sub.s16 	%rs108, %rs102, %rs107;
	cvt.s32.s16 	%r1160, %rs108;
	mul.wide.s32 	%rd256, %r1160, 4;
	add.s64 	%rd257, %rd16, %rd256;
	ld.shared.u32 	%r3760, [%rd257];
	add.s16 	%rs109, %rs88, 18;
	mul.hi.s16 	%rs110, %rs109, 10923;
	shr.u16 	%rs111, %rs110, 15;
	shr.s16 	%rs112, %rs110, 2;
	add.s16 	%rs113, %rs112, %rs111;
	mul.lo.s16 	%rs114, %rs113, 24;
	sub.s16 	%rs115, %rs109, %rs114;
	cvt.s32.s16 	%r1161, %rs115;
	mul.wide.s32 	%rd258, %r1161, 4;
	add.s64 	%rd259, %rd16, %rd258;
	ld.shared.u32 	%r3761, [%rd259];
	add.s16 	%rs116, %rs88, 19;
	mul.hi.s16 	%rs117, %rs116, 10923;
	shr.u16 	%rs118, %rs117, 15;
	shr.s16 	%rs119, %rs117, 2;
	add.s16 	%rs120, %rs119, %rs118;
	mul.lo.s16 	%rs121, %rs120, 24;
	sub.s16 	%rs122, %rs116, %rs121;
	cvt.s32.s16 	%r1162, %rs122;
	mul.wide.s32 	%rd260, %r1162, 4;
	add.s64 	%rd261, %rd16, %rd260;
	ld.shared.u32 	%r3762, [%rd261];
	add.s16 	%rs123, %rs88, 20;
	mul.hi.s16 	%rs124, %rs123, 10923;
	shr.u16 	%rs125, %rs124, 15;
	shr.s16 	%rs126, %rs124, 2;
	add.s16 	%rs127, %rs126, %rs125;
	mul.lo.s16 	%rs128, %rs127, 24;
	sub.s16 	%rs129, %rs123, %rs128;
	cvt.s32.s16 	%r1163, %rs129;
	mul.wide.s32 	%rd262, %r1163, 4;
	add.s64 	%rd263, %rd16, %rd262;
	ld.shared.u32 	%r3763, [%rd263];
	add.s16 	%rs130, %rs88, 21;
	mul.hi.s16 	%rs131, %rs130, 10923;
	shr.u16 	%rs132, %rs131, 15;
	shr.s16 	%rs133, %rs131, 2;
	add.s16 	%rs134, %rs133, %rs132;
	mul.lo.s16 	%rs135, %rs134, 24;
	sub.s16 	%rs136, %rs130, %rs135;
	cvt.s32.s16 	%r1164, %rs136;
	mul.wide.s32 	%rd264, %r1164, 4;
	add.s64 	%rd265, %rd16, %rd264;
	ld.shared.u32 	%r3764, [%rd265];
	add.s16 	%rs137, %rs88, 22;
	mul.hi.s16 	%rs138, %rs137, 10923;
	shr.u16 	%rs139, %rs138, 15;
	shr.s16 	%rs140, %rs138, 2;
	add.s16 	%rs141, %rs140, %rs139;
	mul.lo.s16 	%rs142, %rs141, 24;
	sub.s16 	%rs143, %rs137, %rs142;
	cvt.s32.s16 	%r1165, %rs143;
	mul.wide.s32 	%rd266, %r1165, 4;
	add.s64 	%rd267, %rd16, %rd266;
	ld.shared.u32 	%r3765, [%rd267];
	add.s16 	%rs144, %rs88, 23;
	mul.hi.s16 	%rs145, %rs144, 10923;
	shr.u16 	%rs146, %rs145, 15;
	shr.s16 	%rs147, %rs145, 2;
	add.s16 	%rs148, %rs147, %rs146;
	mul.lo.s16 	%rs149, %rs148, 24;
	sub.s16 	%rs150, %rs144, %rs149;
	cvt.s32.s16 	%r1166, %rs150;
	mul.wide.s32 	%rd268, %r1166, 4;
	add.s64 	%rd269, %rd16, %rd268;
	ld.shared.u32 	%r3766, [%rd269];
$L__BB0_175:                            // %L13901
                                        //   in Loop: Header=BB0_149 Depth=1
	bar.sync 	0;
	mul.lo.s32 	%r1168, %r122, 589824;
	add.s32 	%r147, %r119, %r1168;
	add.s32 	%r148, %r120, %r1168;
	mov.u32 	%r3767, %r1155;
	bra.uni 	$L__BB0_176;
$L__BB0_185:                            // %L28721
                                        //   in Loop: Header=BB0_176 Depth=2
	add.s32 	%r122, %r122, 4;
	bar.sync 	0;
	add.s32 	%r3767, %r3767, 2359296;
	setp.ne.s32 	%p317, %r3767, 14155776;
	@%p317 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_186;
$L__BB0_176:                            // %L13927
                                        //   Parent Loop BB0_149 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p279, %r3767, 0;
	selp.b32 	%r1705, %r3743, 0, %p279;
	setp.eq.s32 	%p280, %r3767, 2359296;
	selp.b32 	%r1706, %r3747, %r1705, %p280;
	setp.eq.s32 	%p281, %r3767, 4718592;
	selp.b32 	%r1707, %r3751, %r1706, %p281;
	setp.eq.s32 	%p282, %r3767, 7077888;
	selp.b32 	%r1708, %r3755, %r1707, %p282;
	setp.eq.s32 	%p283, %r3767, 9437184;
	selp.b32 	%r1709, %r3759, %r1708, %p283;
	setp.eq.s32 	%p284, %r3767, 11796480;
	selp.b32 	%r1710, %r3763, %r1709, %p284;
	selp.b32 	%r1711, %r3744, 0, %p279;
	selp.b32 	%r1712, %r3748, %r1711, %p280;
	selp.b32 	%r1713, %r3752, %r1712, %p281;
	selp.b32 	%r1714, %r3756, %r1713, %p282;
	selp.b32 	%r1715, %r3760, %r1714, %p283;
	selp.b32 	%r1716, %r3764, %r1715, %p284;
	selp.b32 	%r1717, %r3745, 0, %p279;
	selp.b32 	%r1718, %r3749, %r1717, %p280;
	selp.b32 	%r1719, %r3753, %r1718, %p281;
	selp.b32 	%r1720, %r3757, %r1719, %p282;
	selp.b32 	%r1721, %r3761, %r1720, %p283;
	selp.b32 	%r1722, %r3765, %r1721, %p284;
	selp.b32 	%r1723, %r3746, 0, %p279;
	selp.b32 	%r1724, %r3750, %r1723, %p280;
	selp.b32 	%r1725, %r3754, %r1724, %p281;
	selp.b32 	%r1726, %r3758, %r1725, %p282;
	selp.b32 	%r1727, %r3762, %r1726, %p283;
	selp.b32 	%r1728, %r3766, %r1727, %p284;
	mov.u16 	%rs188, 25600;
	// begin inline asm
	mov.b32 %r1174, {%rs188, %rs188};
	// end inline asm
	mov.u16 	%rs190, 21504;
	// begin inline asm
	mov.b32 %r1185, {%rs190, %rs190};
	// end inline asm
	xor.b32  	%r1173, %r1710, -2004318072;
	mov.u32 	%r1310, 983055;
	// begin inline asm
	lop3.b32 %r1171, %r1310, %r1173, %r1174, 202;
	// end inline asm
	mov.u16 	%rs194, 18432;
	// begin inline asm
	mov.b32 %r1175, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1176, %r1174, %r1175;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1179, %r1171, %r1176;
	// end inline asm
	mov.u32 	%r1321, 15728880;
	// begin inline asm
	lop3.b32 %r1182, %r1321, %r1173, %r1185, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1186, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1187, %r1185, %r1186;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1190, %r1182, %r1187;
	// end inline asm
	// begin inline asm
	mov.b32 %r1220, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r1231, {%rs190, %rs190};
	// end inline asm
	xor.b32  	%r1219, %r1716, -2004318072;
	// begin inline asm
	lop3.b32 %r1217, %r1310, %r1219, %r1220, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1221, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1222, %r1220, %r1221;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1225, %r1217, %r1222;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1228, %r1321, %r1219, %r1231, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1232, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1233, %r1231, %r1232;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1236, %r1228, %r1233;
	// end inline asm
	// begin inline asm
	mov.b32 %r1266, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r1277, {%rs190, %rs190};
	// end inline asm
	xor.b32  	%r1265, %r1722, -2004318072;
	// begin inline asm
	lop3.b32 %r1263, %r1310, %r1265, %r1266, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1267, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1268, %r1266, %r1267;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1271, %r1263, %r1268;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1274, %r1321, %r1265, %r1277, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1278, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1279, %r1277, %r1278;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1282, %r1274, %r1279;
	// end inline asm
	// begin inline asm
	mov.b32 %r1312, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r1323, {%rs190, %rs190};
	// end inline asm
	xor.b32  	%r1311, %r1728, -2004318072;
	// begin inline asm
	lop3.b32 %r1309, %r1310, %r1311, %r1312, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1313, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1314, %r1312, %r1313;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1317, %r1309, %r1314;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1320, %r1321, %r1311, %r1323, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1324, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1325, %r1323, %r1324;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1328, %r1320, %r1325;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1179;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1353, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r1190;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1356, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1225;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1359, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r1236;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1362, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1271;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1365, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r1282;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1368, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r1317;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1371, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r1328;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1374, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1440, %r1437}, {%r405, %r408}, {%r1353}, {%r1155, %r1155};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1449, %r1446}, {%r405, %r408}, {%r1356}, {%r1155, %r1155};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1458, %r1455}, {%r405, %r408}, {%r1359}, {%r1155, %r1155};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1467, %r1464}, {%r405, %r408}, {%r1362}, {%r1155, %r1155};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1476, %r1473}, {%r405, %r408}, {%r1365}, {%r1155, %r1155};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1485, %r1482}, {%r405, %r408}, {%r1368}, {%r1155, %r1155};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1494, %r1491}, {%r405, %r408}, {%r1371}, {%r1155, %r1155};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1503, %r1500}, {%r405, %r408}, {%r1374}, {%r1155, %r1155};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1433, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1435, %r1433, %r1437;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1438, %r457, %r1440, %r1435;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1442, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1444, %r1442, %r1446;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1447, %r457, %r1449, %r1444;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1451, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1453, %r1451, %r1455;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1456, %r457, %r1458, %r1453;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1460, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1462, %r1460, %r1464;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1465, %r457, %r1467, %r1462;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1469, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1471, %r1469, %r1473;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1474, %r457, %r1476, %r1471;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1478, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1480, %r1478, %r1482;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1483, %r457, %r1485, %r1480;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1487, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1489, %r1487, %r1491;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1492, %r457, %r1494, %r1489;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1496, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1498, %r1496, %r1500;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1501, %r457, %r1503, %r1498;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1505, %r460, %r1440;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1508, %r457, %r1437, %r1505;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1512, %r460, %r1449;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1515, %r457, %r1446, %r1512;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1519, %r460, %r1458;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1522, %r457, %r1455, %r1519;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1526, %r460, %r1467;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1529, %r457, %r1464, %r1526;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1533, %r460, %r1476;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1536, %r457, %r1473, %r1533;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1540, %r460, %r1485;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1543, %r457, %r1482, %r1540;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1547, %r460, %r1494;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1550, %r457, %r1491, %r1547;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1554, %r460, %r1503;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1557, %r457, %r1500, %r1554;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1642, %r1643}, {%r501, %r507, %r504, %r510}, {%r1438, %r1508}, {%r1155, %r1155};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1650, %r1651}, {%r501, %r507, %r504, %r510}, {%r1447, %r1515}, {%r1155, %r1155};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1658, %r1659}, {%r501, %r507, %r504, %r510}, {%r1456, %r1522}, {%r1155, %r1155};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1666, %r1667}, {%r501, %r507, %r504, %r510}, {%r1465, %r1529}, {%r1155, %r1155};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1674, %r1675}, {%r501, %r507, %r504, %r510}, {%r1474, %r1536}, {%r1155, %r1155};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1682, %r1683}, {%r501, %r507, %r504, %r510}, {%r1483, %r1543}, {%r1155, %r1155};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1690, %r1691}, {%r501, %r507, %r504, %r510}, {%r1492, %r1550}, {%r1155, %r1155};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1698, %r1699}, {%r501, %r507, %r504, %r510}, {%r1501, %r1557}, {%r1155, %r1155};
	// end inline asm
	// begin inline asm
	prmt.b32 %r1641, %r1642, %r1643, %r1002;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1645, %r1642, %r1643, %r1006;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1649, %r1650, %r1651, %r1002;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1653, %r1650, %r1651, %r1006;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1657, %r1658, %r1659, %r1002;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1661, %r1658, %r1659, %r1006;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1665, %r1666, %r1667, %r1002;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1669, %r1666, %r1667, %r1006;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1673, %r1674, %r1675, %r1002;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1677, %r1674, %r1675, %r1006;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1681, %r1682, %r1683, %r1002;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1685, %r1682, %r1683, %r1006;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1689, %r1690, %r1691, %r1002;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1693, %r1690, %r1691, %r1006;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1697, %r1698, %r1699, %r1002;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1701, %r1698, %r1699, %r1006;
	// end inline asm
	st.shared.u32 	[%rd7], %r1641;
	st.shared.u32 	[%rd8], %r1645;
	st.shared.u32 	[%rd9], %r1649;
	st.shared.u32 	[%rd10], %r1653;
	st.shared.u32 	[%rd17], %r1657;
	st.shared.u32 	[%rd18], %r1661;
	st.shared.u32 	[%rd19], %r1665;
	st.shared.u32 	[%rd20], %r1669;
	st.shared.u32 	[%rd21], %r1673;
	st.shared.u32 	[%rd22], %r1677;
	st.shared.u32 	[%rd23], %r1681;
	st.shared.u32 	[%rd24], %r1685;
	st.shared.u32 	[%rd25], %r1689;
	st.shared.u32 	[%rd26], %r1693;
	st.shared.u32 	[%rd27], %r1697;
	st.shared.u32 	[%rd28], %r1701;
	@%p278 bra 	$L__BB0_252;
	bra.uni 	$L__BB0_177;
$L__BB0_252:                            // %pass8537
                                        //   in Loop: Header=BB0_176 Depth=2
	st.shared.u32 	[%rd7], %r1641;
	st.shared.u32 	[%rd8], %r1645;
	st.shared.u32 	[%rd9], %r1649;
	st.shared.u32 	[%rd10], %r1653;
	st.shared.u32 	[%rd17], %r1657;
	st.shared.u32 	[%rd18], %r1661;
	st.shared.u32 	[%rd19], %r1665;
	st.shared.u32 	[%rd20], %r1669;
	st.shared.u32 	[%rd21], %r1673;
	st.shared.u32 	[%rd22], %r1677;
	st.shared.u32 	[%rd23], %r1681;
	st.shared.u32 	[%rd24], %r1685;
	st.shared.u32 	[%rd25], %r1689;
	st.shared.u32 	[%rd26], %r1693;
	st.shared.u32 	[%rd27], %r1697;
	st.shared.u32 	[%rd28], %r1701;
$L__BB0_177:                            // %L22298
                                        //   in Loop: Header=BB0_176 Depth=2
	bar.sync 	0;
	mov.u32 	%r1729, 0;
	mov.u32 	%r3769, %r1729;
	mov.u32 	%r3770, %r1729;
	mov.u32 	%r3771, %r1729;
	mov.u32 	%r3772, %r1729;
	@%p278 bra 	$L__BB0_253;
	bra.uni 	$L__BB0_178;
$L__BB0_253:                            // %pass10632
                                        //   in Loop: Header=BB0_176 Depth=2
	ld.shared.u32 	%r3769, [%rd11];
	ld.shared.u32 	%r3770, [%rd12];
	ld.shared.u32 	%r3771, [%rd13];
	ld.shared.u32 	%r3772, [%rd14];
$L__BB0_178:                            // %L23373
                                        //   in Loop: Header=BB0_176 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1765, %r1762}, {%r519, %r522}, {%r3769}, {%r1729, %r1729};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1774, %r1771}, {%r519, %r522}, {%r3770}, {%r1729, %r1729};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1783, %r1780}, {%r519, %r522}, {%r3771}, {%r1729, %r1729};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1792, %r1789}, {%r519, %r522}, {%r3772}, {%r1729, %r1729};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1758, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1760, %r1758, %r1762;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1763, %r571, %r1765, %r1760;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1767, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1769, %r1767, %r1771;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1772, %r571, %r1774, %r1769;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1776, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1778, %r1776, %r1780;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1781, %r571, %r1783, %r1778;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1785, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1787, %r1785, %r1789;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1790, %r571, %r1792, %r1787;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1794, %r574, %r1765;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1797, %r571, %r1762, %r1794;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1801, %r574, %r1774;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1804, %r571, %r1771, %r1801;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1808, %r574, %r1783;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1811, %r571, %r1780, %r1808;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1815, %r574, %r1792;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1818, %r571, %r1789, %r1815;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1822, %r1823}, {%r615, %r621, %r618, %r624}, {%r1763, %r1797}, {%r1729, %r1729};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1832, %r1833}, {%r615, %r621, %r618, %r624}, {%r1772, %r1804}, {%r1729, %r1729};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1842, %r1843}, {%r615, %r621, %r618, %r624}, {%r1781, %r1811}, {%r1729, %r1729};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1852, %r1853}, {%r615, %r621, %r618, %r624}, {%r1790, %r1818}, {%r1729, %r1729};
	// end inline asm
	mov.u32 	%r1897, 805318656;
	@%p278 bra 	$L__BB0_254;
	bra.uni 	$L__BB0_179;
$L__BB0_254:                            // %pass11105
                                        //   in Loop: Header=BB0_176 Depth=2
	// begin inline asm
	mul.rn.f16x2 %r1862, %r1822, %r1822;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1865, %r1823, %r1823, %r1862;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1869, %r1842, %r1842, %r1865;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1873, %r1843, %r1843, %r1869;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1877, %r1897, %r1873, %r1729;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1881, %r1832, %r1832;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1884, %r1833, %r1833, %r1881;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1888, %r1852, %r1852, %r1884;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1892, %r1853, %r1853, %r1888;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1896, %r1897, %r1892, %r1729;
	// end inline asm
	add.s32 	%r1900, %r148, %r3767;
	cvt.s64.s32 	%rd270, %r1900;
	add.s64 	%rd271, %rd270, %rd15;
	mul.hi.s64 	%rd272, %rd271, 1024819115206086201;
	shr.u64 	%rd273, %rd272, 63;
	shr.s64 	%rd274, %rd272, 25;
	add.s64 	%rd275, %rd274, %rd273;
	setp.lt.s64 	%p287, %rd271, 0;
	mul.lo.s64 	%rd276, %rd275, 603979776;
	setp.ne.s64 	%p288, %rd276, %rd271;
	and.pred  	%p289, %p287, %p288;
	selp.s64 	%rd277, -1, 0, %p289;
	add.s64 	%rd278, %rd275, %rd277;
	mul.lo.s64 	%rd279, %rd278, -603979776;
	add.s64 	%rd280, %rd279, %rd271;
	shl.b64 	%rd281, %rd280, 2;
	add.s64 	%rd282, %rd4, %rd281;
	st.global.u32 	[%rd282], %r1877;
	add.s32 	%r1901, %r147, %r3767;
	cvt.s64.s32 	%rd283, %r1901;
	add.s64 	%rd284, %rd283, %rd15;
	mul.hi.s64 	%rd285, %rd284, 1024819115206086201;
	shr.u64 	%rd286, %rd285, 63;
	shr.s64 	%rd287, %rd285, 25;
	add.s64 	%rd288, %rd287, %rd286;
	setp.lt.s64 	%p290, %rd284, 0;
	mul.lo.s64 	%rd289, %rd288, 603979776;
	setp.ne.s64 	%p291, %rd289, %rd284;
	and.pred  	%p292, %p290, %p291;
	selp.s64 	%rd290, -1, 0, %p292;
	add.s64 	%rd291, %rd288, %rd290;
	mul.lo.s64 	%rd292, %rd291, -603979776;
	add.s64 	%rd293, %rd292, %rd284;
	shl.b64 	%rd294, %rd293, 2;
	add.s64 	%rd295, %rd4, %rd294;
	st.global.u32 	[%rd295], %r1896;
$L__BB0_179:                            // %L23903
                                        //   in Loop: Header=BB0_176 Depth=2
	mov.u32 	%r1902, 0;
	mov.u32 	%r3773, %r1902;
	mov.u32 	%r3774, %r1902;
	mov.u32 	%r3775, %r1902;
	mov.u32 	%r3776, %r1902;
	@%p278 bra 	$L__BB0_255;
	bra.uni 	$L__BB0_180;
$L__BB0_255:                            // %pass11404
                                        //   in Loop: Header=BB0_176 Depth=2
	ld.shared.u32 	%r3773, [%rd29];
	ld.shared.u32 	%r3774, [%rd30];
	ld.shared.u32 	%r3775, [%rd31];
	ld.shared.u32 	%r3776, [%rd32];
$L__BB0_180:                            // %L24979
                                        //   in Loop: Header=BB0_176 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1938, %r1935}, {%r519, %r522}, {%r3773}, {%r1902, %r1902};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1947, %r1944}, {%r519, %r522}, {%r3774}, {%r1902, %r1902};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1956, %r1953}, {%r519, %r522}, {%r3775}, {%r1902, %r1902};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1965, %r1962}, {%r519, %r522}, {%r3776}, {%r1902, %r1902};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1931, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1933, %r1931, %r1935;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1936, %r571, %r1938, %r1933;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1940, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1942, %r1940, %r1944;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1945, %r571, %r1947, %r1942;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1949, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1951, %r1949, %r1953;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1954, %r571, %r1956, %r1951;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1958, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1960, %r1958, %r1962;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1963, %r571, %r1965, %r1960;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1967, %r574, %r1938;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1970, %r571, %r1935, %r1967;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1974, %r574, %r1947;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1977, %r571, %r1944, %r1974;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1981, %r574, %r1956;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1984, %r571, %r1953, %r1981;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1988, %r574, %r1965;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1991, %r571, %r1962, %r1988;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1995, %r1996}, {%r615, %r621, %r618, %r624}, {%r1936, %r1970}, {%r1902, %r1902};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2005, %r2006}, {%r615, %r621, %r618, %r624}, {%r1945, %r1977}, {%r1902, %r1902};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2015, %r2016}, {%r615, %r621, %r618, %r624}, {%r1954, %r1984}, {%r1902, %r1902};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2025, %r2026}, {%r615, %r621, %r618, %r624}, {%r1963, %r1991}, {%r1902, %r1902};
	// end inline asm
	@%p278 bra 	$L__BB0_256;
	bra.uni 	$L__BB0_181;
$L__BB0_256:                            // %pass11877
                                        //   in Loop: Header=BB0_176 Depth=2
	// begin inline asm
	mul.rn.f16x2 %r2035, %r1995, %r1995;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2038, %r1996, %r1996, %r2035;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2042, %r2015, %r2015, %r2038;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2046, %r2016, %r2016, %r2042;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2050, %r1897, %r2046, %r1902;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2054, %r2005, %r2005;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2057, %r2006, %r2006, %r2054;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2061, %r2025, %r2025, %r2057;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2065, %r2026, %r2026, %r2061;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2069, %r1897, %r2065, %r1902;
	// end inline asm
	add.s32 	%r2073, %r148, %r3767;
	add.s32 	%r2074, %r2073, 589824;
	cvt.s64.s32 	%rd296, %r2074;
	add.s64 	%rd297, %rd296, %rd15;
	mul.hi.s64 	%rd298, %rd297, 1024819115206086201;
	shr.u64 	%rd299, %rd298, 63;
	shr.s64 	%rd300, %rd298, 25;
	add.s64 	%rd301, %rd300, %rd299;
	setp.lt.s64 	%p295, %rd297, 0;
	mul.lo.s64 	%rd302, %rd301, 603979776;
	setp.ne.s64 	%p296, %rd302, %rd297;
	and.pred  	%p297, %p295, %p296;
	selp.s64 	%rd303, -1, 0, %p297;
	add.s64 	%rd304, %rd301, %rd303;
	mul.lo.s64 	%rd305, %rd304, -603979776;
	add.s64 	%rd306, %rd305, %rd297;
	shl.b64 	%rd307, %rd306, 2;
	add.s64 	%rd308, %rd4, %rd307;
	st.global.u32 	[%rd308], %r2050;
	add.s32 	%r2075, %r147, %r3767;
	add.s32 	%r2076, %r2075, 589824;
	cvt.s64.s32 	%rd309, %r2076;
	add.s64 	%rd310, %rd309, %rd15;
	mul.hi.s64 	%rd311, %rd310, 1024819115206086201;
	shr.u64 	%rd312, %rd311, 63;
	shr.s64 	%rd313, %rd311, 25;
	add.s64 	%rd314, %rd313, %rd312;
	setp.lt.s64 	%p298, %rd310, 0;
	mul.lo.s64 	%rd315, %rd314, 603979776;
	setp.ne.s64 	%p299, %rd315, %rd310;
	and.pred  	%p300, %p298, %p299;
	selp.s64 	%rd316, -1, 0, %p300;
	add.s64 	%rd317, %rd314, %rd316;
	mul.lo.s64 	%rd318, %rd317, -603979776;
	add.s64 	%rd319, %rd318, %rd310;
	shl.b64 	%rd320, %rd319, 2;
	add.s64 	%rd321, %rd4, %rd320;
	st.global.u32 	[%rd321], %r2069;
$L__BB0_181:                            // %L25509
                                        //   in Loop: Header=BB0_176 Depth=2
	mov.u32 	%r2077, 0;
	mov.u32 	%r3777, %r2077;
	mov.u32 	%r3778, %r2077;
	mov.u32 	%r3779, %r2077;
	mov.u32 	%r3780, %r2077;
	@%p278 bra 	$L__BB0_257;
	bra.uni 	$L__BB0_182;
$L__BB0_257:                            // %pass12176
                                        //   in Loop: Header=BB0_176 Depth=2
	ld.shared.u32 	%r3777, [%rd33];
	ld.shared.u32 	%r3778, [%rd34];
	ld.shared.u32 	%r3779, [%rd35];
	ld.shared.u32 	%r3780, [%rd36];
$L__BB0_182:                            // %L26585
                                        //   in Loop: Header=BB0_176 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2113, %r2110}, {%r519, %r522}, {%r3777}, {%r2077, %r2077};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2122, %r2119}, {%r519, %r522}, {%r3778}, {%r2077, %r2077};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2131, %r2128}, {%r519, %r522}, {%r3779}, {%r2077, %r2077};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2140, %r2137}, {%r519, %r522}, {%r3780}, {%r2077, %r2077};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2106, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2108, %r2106, %r2110;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2111, %r571, %r2113, %r2108;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2115, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2117, %r2115, %r2119;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2120, %r571, %r2122, %r2117;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2124, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2126, %r2124, %r2128;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2129, %r571, %r2131, %r2126;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2133, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2135, %r2133, %r2137;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2138, %r571, %r2140, %r2135;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2142, %r574, %r2113;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2145, %r571, %r2110, %r2142;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2149, %r574, %r2122;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2152, %r571, %r2119, %r2149;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2156, %r574, %r2131;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2159, %r571, %r2128, %r2156;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2163, %r574, %r2140;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2166, %r571, %r2137, %r2163;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2170, %r2171}, {%r615, %r621, %r618, %r624}, {%r2111, %r2145}, {%r2077, %r2077};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2180, %r2181}, {%r615, %r621, %r618, %r624}, {%r2120, %r2152}, {%r2077, %r2077};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2190, %r2191}, {%r615, %r621, %r618, %r624}, {%r2129, %r2159}, {%r2077, %r2077};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2200, %r2201}, {%r615, %r621, %r618, %r624}, {%r2138, %r2166}, {%r2077, %r2077};
	// end inline asm
	@%p278 bra 	$L__BB0_258;
	bra.uni 	$L__BB0_183;
$L__BB0_258:                            // %pass12649
                                        //   in Loop: Header=BB0_176 Depth=2
	// begin inline asm
	mul.rn.f16x2 %r2210, %r2170, %r2170;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2213, %r2171, %r2171, %r2210;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2217, %r2190, %r2190, %r2213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2221, %r2191, %r2191, %r2217;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2225, %r1897, %r2221, %r2077;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2229, %r2180, %r2180;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2232, %r2181, %r2181, %r2229;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2236, %r2200, %r2200, %r2232;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2240, %r2201, %r2201, %r2236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2244, %r1897, %r2240, %r2077;
	// end inline asm
	add.s32 	%r2248, %r148, %r3767;
	add.s32 	%r2249, %r2248, 1179648;
	cvt.s64.s32 	%rd322, %r2249;
	add.s64 	%rd323, %rd322, %rd15;
	mul.hi.s64 	%rd324, %rd323, 1024819115206086201;
	shr.u64 	%rd325, %rd324, 63;
	shr.s64 	%rd326, %rd324, 25;
	add.s64 	%rd327, %rd326, %rd325;
	setp.lt.s64 	%p303, %rd323, 0;
	mul.lo.s64 	%rd328, %rd327, 603979776;
	setp.ne.s64 	%p304, %rd328, %rd323;
	and.pred  	%p305, %p303, %p304;
	selp.s64 	%rd329, -1, 0, %p305;
	add.s64 	%rd330, %rd327, %rd329;
	mul.lo.s64 	%rd331, %rd330, -603979776;
	add.s64 	%rd332, %rd331, %rd323;
	shl.b64 	%rd333, %rd332, 2;
	add.s64 	%rd334, %rd4, %rd333;
	st.global.u32 	[%rd334], %r2225;
	add.s32 	%r2250, %r147, %r3767;
	add.s32 	%r2251, %r2250, 1179648;
	cvt.s64.s32 	%rd335, %r2251;
	add.s64 	%rd336, %rd335, %rd15;
	mul.hi.s64 	%rd337, %rd336, 1024819115206086201;
	shr.u64 	%rd338, %rd337, 63;
	shr.s64 	%rd339, %rd337, 25;
	add.s64 	%rd340, %rd339, %rd338;
	setp.lt.s64 	%p306, %rd336, 0;
	mul.lo.s64 	%rd341, %rd340, 603979776;
	setp.ne.s64 	%p307, %rd341, %rd336;
	and.pred  	%p308, %p306, %p307;
	selp.s64 	%rd342, -1, 0, %p308;
	add.s64 	%rd343, %rd340, %rd342;
	mul.lo.s64 	%rd344, %rd343, -603979776;
	add.s64 	%rd345, %rd344, %rd336;
	shl.b64 	%rd346, %rd345, 2;
	add.s64 	%rd347, %rd4, %rd346;
	st.global.u32 	[%rd347], %r2244;
$L__BB0_183:                            // %L27115
                                        //   in Loop: Header=BB0_176 Depth=2
	mov.u32 	%r2252, 0;
	mov.u32 	%r3781, %r2252;
	mov.u32 	%r3782, %r2252;
	mov.u32 	%r3783, %r2252;
	mov.u32 	%r3784, %r2252;
	@%p278 bra 	$L__BB0_259;
	bra.uni 	$L__BB0_184;
$L__BB0_259:                            // %pass12948
                                        //   in Loop: Header=BB0_176 Depth=2
	ld.shared.u32 	%r3781, [%rd37];
	ld.shared.u32 	%r3782, [%rd38];
	ld.shared.u32 	%r3783, [%rd39];
	ld.shared.u32 	%r3784, [%rd40];
$L__BB0_184:                            // %L28191
                                        //   in Loop: Header=BB0_176 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2288, %r2285}, {%r519, %r522}, {%r3781}, {%r2252, %r2252};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2297, %r2294}, {%r519, %r522}, {%r3782}, {%r2252, %r2252};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2306, %r2303}, {%r519, %r522}, {%r3783}, {%r2252, %r2252};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2315, %r2312}, {%r519, %r522}, {%r3784}, {%r2252, %r2252};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2281, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2283, %r2281, %r2285;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2286, %r571, %r2288, %r2283;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2290, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2292, %r2290, %r2294;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2295, %r571, %r2297, %r2292;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2299, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2301, %r2299, %r2303;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2304, %r571, %r2306, %r2301;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2308, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2310, %r2308, %r2312;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2313, %r571, %r2315, %r2310;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2317, %r574, %r2288;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2320, %r571, %r2285, %r2317;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2324, %r574, %r2297;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2327, %r571, %r2294, %r2324;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2331, %r574, %r2306;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2334, %r571, %r2303, %r2331;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2338, %r574, %r2315;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2341, %r571, %r2312, %r2338;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2345, %r2346}, {%r615, %r621, %r618, %r624}, {%r2286, %r2320}, {%r2252, %r2252};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2355, %r2356}, {%r615, %r621, %r618, %r624}, {%r2295, %r2327}, {%r2252, %r2252};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2365, %r2366}, {%r615, %r621, %r618, %r624}, {%r2304, %r2334}, {%r2252, %r2252};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2375, %r2376}, {%r615, %r621, %r618, %r624}, {%r2313, %r2341}, {%r2252, %r2252};
	// end inline asm
	@%p278 bra 	$L__BB0_260;
	bra.uni 	$L__BB0_185;
$L__BB0_260:                            // %pass13421
                                        //   in Loop: Header=BB0_176 Depth=2
	// begin inline asm
	mul.rn.f16x2 %r2385, %r2345, %r2345;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2388, %r2346, %r2346, %r2385;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2392, %r2365, %r2365, %r2388;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2396, %r2366, %r2366, %r2392;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2400, %r1897, %r2396, %r2252;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2404, %r2355, %r2355;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2407, %r2356, %r2356, %r2404;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2411, %r2375, %r2375, %r2407;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2415, %r2376, %r2376, %r2411;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2419, %r1897, %r2415, %r2252;
	// end inline asm
	add.s32 	%r2423, %r148, %r3767;
	add.s32 	%r2424, %r2423, 1769472;
	cvt.s64.s32 	%rd348, %r2424;
	add.s64 	%rd349, %rd348, %rd15;
	mul.hi.s64 	%rd350, %rd349, 1024819115206086201;
	shr.u64 	%rd351, %rd350, 63;
	shr.s64 	%rd352, %rd350, 25;
	add.s64 	%rd353, %rd352, %rd351;
	setp.lt.s64 	%p311, %rd349, 0;
	mul.lo.s64 	%rd354, %rd353, 603979776;
	setp.ne.s64 	%p312, %rd354, %rd349;
	and.pred  	%p313, %p311, %p312;
	selp.s64 	%rd355, -1, 0, %p313;
	add.s64 	%rd356, %rd353, %rd355;
	mul.lo.s64 	%rd357, %rd356, -603979776;
	add.s64 	%rd358, %rd357, %rd349;
	shl.b64 	%rd359, %rd358, 2;
	add.s64 	%rd360, %rd4, %rd359;
	st.global.u32 	[%rd360], %r2400;
	add.s32 	%r2425, %r147, %r3767;
	add.s32 	%r2426, %r2425, 1769472;
	cvt.s64.s32 	%rd361, %r2426;
	add.s64 	%rd362, %rd361, %rd15;
	mul.hi.s64 	%rd363, %rd362, 1024819115206086201;
	shr.u64 	%rd364, %rd363, 63;
	shr.s64 	%rd365, %rd363, 25;
	add.s64 	%rd366, %rd365, %rd364;
	setp.lt.s64 	%p314, %rd362, 0;
	mul.lo.s64 	%rd367, %rd366, 603979776;
	setp.ne.s64 	%p315, %rd367, %rd362;
	and.pred  	%p316, %p314, %p315;
	selp.s64 	%rd368, -1, 0, %p316;
	add.s64 	%rd369, %rd366, %rd368;
	mul.lo.s64 	%rd370, %rd369, -603979776;
	add.s64 	%rd371, %rd370, %rd362;
	shl.b64 	%rd372, %rd371, 2;
	add.s64 	%rd373, %rd4, %rd372;
	st.global.u32 	[%rd373], %r2419;
	bra.uni 	$L__BB0_185;
$L__BB0_186:                            // %L28737.preheader
                                        //   in Loop: Header=BB0_149 Depth=1
	add.s32 	%r193, %r147, %r3767;
	add.s32 	%r194, %r148, %r3767;
	mov.u32 	%r2427, 0;
	mov.u32 	%r3785, %r2427;
	bra.uni 	$L__BB0_187;
$L__BB0_196:                            // %L43531
                                        //   in Loop: Header=BB0_187 Depth=2
	add.s32 	%r122, %r122, 4;
	bar.sync 	0;
	add.s32 	%r3785, %r3785, 2359296;
	setp.ne.s32 	%p357, %r3785, 14155776;
	@%p357 bra 	$L__BB0_187;
	bra.uni 	$L__BB0_197;
$L__BB0_187:                            // %L28737
                                        //   Parent Loop BB0_149 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p319, %r3785, 0;
	selp.b32 	%r2964, %r3743, 0, %p319;
	setp.eq.s32 	%p320, %r3785, 2359296;
	selp.b32 	%r2965, %r3747, %r2964, %p320;
	setp.eq.s32 	%p321, %r3785, 4718592;
	selp.b32 	%r2966, %r3751, %r2965, %p321;
	setp.eq.s32 	%p322, %r3785, 7077888;
	selp.b32 	%r2967, %r3755, %r2966, %p322;
	setp.eq.s32 	%p323, %r3785, 9437184;
	selp.b32 	%r2968, %r3759, %r2967, %p323;
	setp.eq.s32 	%p324, %r3785, 11796480;
	selp.b32 	%r2969, %r3763, %r2968, %p324;
	selp.b32 	%r2970, %r3744, 0, %p319;
	selp.b32 	%r2971, %r3748, %r2970, %p320;
	selp.b32 	%r2972, %r3752, %r2971, %p321;
	selp.b32 	%r2973, %r3756, %r2972, %p322;
	selp.b32 	%r2974, %r3760, %r2973, %p323;
	selp.b32 	%r2975, %r3764, %r2974, %p324;
	selp.b32 	%r2976, %r3745, 0, %p319;
	selp.b32 	%r2977, %r3749, %r2976, %p320;
	selp.b32 	%r2978, %r3753, %r2977, %p321;
	selp.b32 	%r2979, %r3757, %r2978, %p322;
	selp.b32 	%r2980, %r3761, %r2979, %p323;
	selp.b32 	%r2981, %r3765, %r2980, %p324;
	selp.b32 	%r2982, %r3746, 0, %p319;
	selp.b32 	%r2983, %r3750, %r2982, %p320;
	selp.b32 	%r2984, %r3754, %r2983, %p321;
	selp.b32 	%r2985, %r3758, %r2984, %p322;
	selp.b32 	%r2986, %r3762, %r2985, %p323;
	selp.b32 	%r2987, %r3766, %r2986, %p324;
	// begin inline asm
	mov.b32 %r2455, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r2466, {%rs190, %rs190};
	// end inline asm
	shr.u32 	%r2988, %r2969, 8;
	xor.b32  	%r2465, %r2988, 8947848;
	// begin inline asm
	lop3.b32 %r2452, %r1310, %r2465, %r2455, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2456, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2457, %r2455, %r2456;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2460, %r2452, %r2457;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2463, %r1321, %r2465, %r2466, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2467, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2468, %r2466, %r2467;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2471, %r2463, %r2468;
	// end inline asm
	// begin inline asm
	mov.b32 %r2501, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r2512, {%rs190, %rs190};
	// end inline asm
	shr.u32 	%r2989, %r2975, 8;
	xor.b32  	%r2511, %r2989, 8947848;
	// begin inline asm
	lop3.b32 %r2498, %r1310, %r2511, %r2501, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2502, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2503, %r2501, %r2502;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2506, %r2498, %r2503;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2509, %r1321, %r2511, %r2512, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2513, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2514, %r2512, %r2513;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2517, %r2509, %r2514;
	// end inline asm
	// begin inline asm
	mov.b32 %r2547, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r2558, {%rs190, %rs190};
	// end inline asm
	shr.u32 	%r2990, %r2981, 8;
	xor.b32  	%r2557, %r2990, 8947848;
	// begin inline asm
	lop3.b32 %r2544, %r1310, %r2557, %r2547, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2548, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2549, %r2547, %r2548;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2552, %r2544, %r2549;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2555, %r1321, %r2557, %r2558, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2559, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2560, %r2558, %r2559;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2563, %r2555, %r2560;
	// end inline asm
	// begin inline asm
	mov.b32 %r2593, {%rs188, %rs188};
	// end inline asm
	// begin inline asm
	mov.b32 %r2604, {%rs190, %rs190};
	// end inline asm
	shr.u32 	%r2991, %r2987, 8;
	xor.b32  	%r2603, %r2991, 8947848;
	// begin inline asm
	lop3.b32 %r2590, %r1310, %r2603, %r2593, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2594, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2595, %r2593, %r2594;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2598, %r2590, %r2595;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2601, %r1321, %r2603, %r2604, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2605, {%rs194, %rs194};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2606, %r2604, %r2605;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2609, %r2601, %r2606;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2460;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2612, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r2471;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2615, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2506;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2618, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r2517;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2621, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2552;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2624, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r2563;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2627, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r88;
    mov.b32 {%r2re, %r2im}, %r2598;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2630, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r89;
    mov.b32 {%r2re, %r2im}, %r2609;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2633, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2699, %r2696}, {%r405, %r408}, {%r2612}, {%r2427, %r2427};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2708, %r2705}, {%r405, %r408}, {%r2615}, {%r2427, %r2427};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2717, %r2714}, {%r405, %r408}, {%r2618}, {%r2427, %r2427};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2726, %r2723}, {%r405, %r408}, {%r2621}, {%r2427, %r2427};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2735, %r2732}, {%r405, %r408}, {%r2624}, {%r2427, %r2427};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2744, %r2741}, {%r405, %r408}, {%r2627}, {%r2427, %r2427};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2753, %r2750}, {%r405, %r408}, {%r2630}, {%r2427, %r2427};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2762, %r2759}, {%r405, %r408}, {%r2633}, {%r2427, %r2427};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2692, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2694, %r2692, %r2696;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2697, %r457, %r2699, %r2694;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2701, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2703, %r2701, %r2705;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2706, %r457, %r2708, %r2703;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2710, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2712, %r2710, %r2714;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2715, %r457, %r2717, %r2712;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2719, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2721, %r2719, %r2723;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2724, %r457, %r2726, %r2721;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2728, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2730, %r2728, %r2732;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2733, %r457, %r2735, %r2730;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2737, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2739, %r2737, %r2741;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2742, %r457, %r2744, %r2739;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2746, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2748, %r2746, %r2750;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2751, %r457, %r2753, %r2748;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2755, %r460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2757, %r2755, %r2759;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2760, %r457, %r2762, %r2757;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2764, %r460, %r2699;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2767, %r457, %r2696, %r2764;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2771, %r460, %r2708;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2774, %r457, %r2705, %r2771;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2778, %r460, %r2717;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2781, %r457, %r2714, %r2778;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2785, %r460, %r2726;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2788, %r457, %r2723, %r2785;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2792, %r460, %r2735;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2795, %r457, %r2732, %r2792;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2799, %r460, %r2744;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2802, %r457, %r2741, %r2799;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2806, %r460, %r2753;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2809, %r457, %r2750, %r2806;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2813, %r460, %r2762;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2816, %r457, %r2759, %r2813;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2901, %r2902}, {%r501, %r507, %r504, %r510}, {%r2697, %r2767}, {%r2427, %r2427};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2909, %r2910}, {%r501, %r507, %r504, %r510}, {%r2706, %r2774}, {%r2427, %r2427};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2917, %r2918}, {%r501, %r507, %r504, %r510}, {%r2715, %r2781}, {%r2427, %r2427};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2925, %r2926}, {%r501, %r507, %r504, %r510}, {%r2724, %r2788}, {%r2427, %r2427};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2933, %r2934}, {%r501, %r507, %r504, %r510}, {%r2733, %r2795}, {%r2427, %r2427};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2941, %r2942}, {%r501, %r507, %r504, %r510}, {%r2742, %r2802}, {%r2427, %r2427};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2949, %r2950}, {%r501, %r507, %r504, %r510}, {%r2751, %r2809}, {%r2427, %r2427};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2957, %r2958}, {%r501, %r507, %r504, %r510}, {%r2760, %r2816}, {%r2427, %r2427};
	// end inline asm
	// begin inline asm
	prmt.b32 %r2900, %r2901, %r2902, %r1002;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2904, %r2901, %r2902, %r1006;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2908, %r2909, %r2910, %r1002;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2912, %r2909, %r2910, %r1006;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2916, %r2917, %r2918, %r1002;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2920, %r2917, %r2918, %r1006;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2924, %r2925, %r2926, %r1002;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2928, %r2925, %r2926, %r1006;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2932, %r2933, %r2934, %r1002;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2936, %r2933, %r2934, %r1006;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2940, %r2941, %r2942, %r1002;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2944, %r2941, %r2942, %r1006;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2948, %r2949, %r2950, %r1002;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2952, %r2949, %r2950, %r1006;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2956, %r2957, %r2958, %r1002;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2960, %r2957, %r2958, %r1006;
	// end inline asm
	st.shared.u32 	[%rd7], %r2900;
	st.shared.u32 	[%rd8], %r2904;
	st.shared.u32 	[%rd9], %r2908;
	st.shared.u32 	[%rd10], %r2912;
	st.shared.u32 	[%rd17], %r2916;
	st.shared.u32 	[%rd18], %r2920;
	st.shared.u32 	[%rd19], %r2924;
	st.shared.u32 	[%rd20], %r2928;
	st.shared.u32 	[%rd21], %r2932;
	st.shared.u32 	[%rd22], %r2936;
	st.shared.u32 	[%rd23], %r2940;
	st.shared.u32 	[%rd24], %r2944;
	st.shared.u32 	[%rd25], %r2948;
	st.shared.u32 	[%rd26], %r2952;
	st.shared.u32 	[%rd27], %r2956;
	st.shared.u32 	[%rd28], %r2960;
	@%p278 bra 	$L__BB0_261;
	bra.uni 	$L__BB0_188;
$L__BB0_261:                            // %pass15821
                                        //   in Loop: Header=BB0_187 Depth=2
	st.shared.u32 	[%rd7], %r2900;
	st.shared.u32 	[%rd8], %r2904;
	st.shared.u32 	[%rd9], %r2908;
	st.shared.u32 	[%rd10], %r2912;
	st.shared.u32 	[%rd17], %r2916;
	st.shared.u32 	[%rd18], %r2920;
	st.shared.u32 	[%rd19], %r2924;
	st.shared.u32 	[%rd20], %r2928;
	st.shared.u32 	[%rd21], %r2932;
	st.shared.u32 	[%rd22], %r2936;
	st.shared.u32 	[%rd23], %r2940;
	st.shared.u32 	[%rd24], %r2944;
	st.shared.u32 	[%rd25], %r2948;
	st.shared.u32 	[%rd26], %r2952;
	st.shared.u32 	[%rd27], %r2956;
	st.shared.u32 	[%rd28], %r2960;
$L__BB0_188:                            // %L37108
                                        //   in Loop: Header=BB0_187 Depth=2
	bar.sync 	0;
	mov.u32 	%r2992, 0;
	mov.u32 	%r3787, %r2992;
	mov.u32 	%r3788, %r2992;
	mov.u32 	%r3789, %r2992;
	mov.u32 	%r3790, %r2992;
	@%p278 bra 	$L__BB0_262;
	bra.uni 	$L__BB0_189;
$L__BB0_262:                            // %pass17916
                                        //   in Loop: Header=BB0_187 Depth=2
	ld.shared.u32 	%r3790, [%rd11];
	ld.shared.u32 	%r3789, [%rd12];
	ld.shared.u32 	%r3788, [%rd13];
	ld.shared.u32 	%r3787, [%rd14];
$L__BB0_189:                            // %L38183
                                        //   in Loop: Header=BB0_187 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3028, %r3025}, {%r519, %r522}, {%r3790}, {%r2992, %r2992};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3037, %r3034}, {%r519, %r522}, {%r3789}, {%r2992, %r2992};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3046, %r3043}, {%r519, %r522}, {%r3788}, {%r2992, %r2992};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3055, %r3052}, {%r519, %r522}, {%r3787}, {%r2992, %r2992};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3021, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3023, %r3021, %r3025;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3026, %r571, %r3028, %r3023;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3030, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3032, %r3030, %r3034;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3035, %r571, %r3037, %r3032;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3039, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3041, %r3039, %r3043;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3044, %r571, %r3046, %r3041;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3048, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3050, %r3048, %r3052;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3053, %r571, %r3055, %r3050;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3057, %r574, %r3028;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3060, %r571, %r3025, %r3057;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3064, %r574, %r3037;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3067, %r571, %r3034, %r3064;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3071, %r574, %r3046;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3074, %r571, %r3043, %r3071;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3078, %r574, %r3055;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3081, %r571, %r3052, %r3078;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3085, %r3086}, {%r615, %r621, %r618, %r624}, {%r3026, %r3060}, {%r2992, %r2992};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3095, %r3096}, {%r615, %r621, %r618, %r624}, {%r3035, %r3067}, {%r2992, %r2992};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3105, %r3106}, {%r615, %r621, %r618, %r624}, {%r3044, %r3074}, {%r2992, %r2992};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3115, %r3116}, {%r615, %r621, %r618, %r624}, {%r3053, %r3081}, {%r2992, %r2992};
	// end inline asm
	@%p278 bra 	$L__BB0_263;
	bra.uni 	$L__BB0_190;
$L__BB0_263:                            // %pass18389
                                        //   in Loop: Header=BB0_187 Depth=2
	// begin inline asm
	mul.rn.f16x2 %r3125, %r3085, %r3085;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3128, %r3086, %r3086, %r3125;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3132, %r3105, %r3105, %r3128;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3136, %r3106, %r3106, %r3132;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3140, %r1897, %r3136, %r2992;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3144, %r3095, %r3095;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3147, %r3096, %r3096, %r3144;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3151, %r3115, %r3115, %r3147;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3155, %r3116, %r3116, %r3151;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3159, %r1897, %r3155, %r2992;
	// end inline asm
	add.s32 	%r3163, %r194, %r3785;
	cvt.s64.s32 	%rd374, %r3163;
	add.s64 	%rd375, %rd374, %rd15;
	mul.hi.s64 	%rd376, %rd375, 1024819115206086201;
	shr.u64 	%rd377, %rd376, 63;
	shr.s64 	%rd378, %rd376, 25;
	add.s64 	%rd379, %rd378, %rd377;
	setp.lt.s64 	%p327, %rd375, 0;
	mul.lo.s64 	%rd380, %rd379, 603979776;
	setp.ne.s64 	%p328, %rd380, %rd375;
	and.pred  	%p329, %p327, %p328;
	selp.s64 	%rd381, -1, 0, %p329;
	add.s64 	%rd382, %rd379, %rd381;
	mul.lo.s64 	%rd383, %rd382, -603979776;
	add.s64 	%rd384, %rd383, %rd375;
	shl.b64 	%rd385, %rd384, 2;
	add.s64 	%rd386, %rd4, %rd385;
	st.global.u32 	[%rd386], %r3140;
	add.s32 	%r3164, %r193, %r3785;
	cvt.s64.s32 	%rd387, %r3164;
	add.s64 	%rd388, %rd387, %rd15;
	mul.hi.s64 	%rd389, %rd388, 1024819115206086201;
	shr.u64 	%rd390, %rd389, 63;
	shr.s64 	%rd391, %rd389, 25;
	add.s64 	%rd392, %rd391, %rd390;
	setp.lt.s64 	%p330, %rd388, 0;
	mul.lo.s64 	%rd393, %rd392, 603979776;
	setp.ne.s64 	%p331, %rd393, %rd388;
	and.pred  	%p332, %p330, %p331;
	selp.s64 	%rd394, -1, 0, %p332;
	add.s64 	%rd395, %rd392, %rd394;
	mul.lo.s64 	%rd396, %rd395, -603979776;
	add.s64 	%rd397, %rd396, %rd388;
	shl.b64 	%rd398, %rd397, 2;
	add.s64 	%rd399, %rd4, %rd398;
	st.global.u32 	[%rd399], %r3159;
$L__BB0_190:                            // %L38713
                                        //   in Loop: Header=BB0_187 Depth=2
	mov.u32 	%r3165, 0;
	mov.u32 	%r3791, %r3165;
	mov.u32 	%r3792, %r3165;
	mov.u32 	%r3793, %r3165;
	mov.u32 	%r3794, %r3165;
	@%p278 bra 	$L__BB0_264;
	bra.uni 	$L__BB0_191;
$L__BB0_264:                            // %pass18688
                                        //   in Loop: Header=BB0_187 Depth=2
	ld.shared.u32 	%r3794, [%rd29];
	ld.shared.u32 	%r3793, [%rd30];
	ld.shared.u32 	%r3792, [%rd31];
	ld.shared.u32 	%r3791, [%rd32];
$L__BB0_191:                            // %L39789
                                        //   in Loop: Header=BB0_187 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3201, %r3198}, {%r519, %r522}, {%r3794}, {%r3165, %r3165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3210, %r3207}, {%r519, %r522}, {%r3793}, {%r3165, %r3165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3219, %r3216}, {%r519, %r522}, {%r3792}, {%r3165, %r3165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3228, %r3225}, {%r519, %r522}, {%r3791}, {%r3165, %r3165};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3194, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3196, %r3194, %r3198;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3199, %r571, %r3201, %r3196;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3203, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3205, %r3203, %r3207;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3208, %r571, %r3210, %r3205;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3212, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3214, %r3212, %r3216;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3217, %r571, %r3219, %r3214;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3221, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3223, %r3221, %r3225;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3226, %r571, %r3228, %r3223;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3230, %r574, %r3201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3233, %r571, %r3198, %r3230;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3237, %r574, %r3210;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3240, %r571, %r3207, %r3237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3244, %r574, %r3219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3247, %r571, %r3216, %r3244;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3251, %r574, %r3228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3254, %r571, %r3225, %r3251;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3258, %r3259}, {%r615, %r621, %r618, %r624}, {%r3199, %r3233}, {%r3165, %r3165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3268, %r3269}, {%r615, %r621, %r618, %r624}, {%r3208, %r3240}, {%r3165, %r3165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3278, %r3279}, {%r615, %r621, %r618, %r624}, {%r3217, %r3247}, {%r3165, %r3165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3288, %r3289}, {%r615, %r621, %r618, %r624}, {%r3226, %r3254}, {%r3165, %r3165};
	// end inline asm
	@%p278 bra 	$L__BB0_265;
	bra.uni 	$L__BB0_192;
$L__BB0_265:                            // %pass19161
                                        //   in Loop: Header=BB0_187 Depth=2
	// begin inline asm
	mul.rn.f16x2 %r3298, %r3258, %r3258;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3301, %r3259, %r3259, %r3298;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3305, %r3278, %r3278, %r3301;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3309, %r3279, %r3279, %r3305;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3313, %r1897, %r3309, %r3165;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3317, %r3268, %r3268;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3320, %r3269, %r3269, %r3317;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3324, %r3288, %r3288, %r3320;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3328, %r3289, %r3289, %r3324;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3332, %r1897, %r3328, %r3165;
	// end inline asm
	add.s32 	%r3336, %r194, %r3785;
	add.s32 	%r3337, %r3336, 589824;
	cvt.s64.s32 	%rd400, %r3337;
	add.s64 	%rd401, %rd400, %rd15;
	mul.hi.s64 	%rd402, %rd401, 1024819115206086201;
	shr.u64 	%rd403, %rd402, 63;
	shr.s64 	%rd404, %rd402, 25;
	add.s64 	%rd405, %rd404, %rd403;
	setp.lt.s64 	%p335, %rd401, 0;
	mul.lo.s64 	%rd406, %rd405, 603979776;
	setp.ne.s64 	%p336, %rd406, %rd401;
	and.pred  	%p337, %p335, %p336;
	selp.s64 	%rd407, -1, 0, %p337;
	add.s64 	%rd408, %rd405, %rd407;
	mul.lo.s64 	%rd409, %rd408, -603979776;
	add.s64 	%rd410, %rd409, %rd401;
	shl.b64 	%rd411, %rd410, 2;
	add.s64 	%rd412, %rd4, %rd411;
	st.global.u32 	[%rd412], %r3313;
	add.s32 	%r3338, %r193, %r3785;
	add.s32 	%r3339, %r3338, 589824;
	cvt.s64.s32 	%rd413, %r3339;
	add.s64 	%rd414, %rd413, %rd15;
	mul.hi.s64 	%rd415, %rd414, 1024819115206086201;
	shr.u64 	%rd416, %rd415, 63;
	shr.s64 	%rd417, %rd415, 25;
	add.s64 	%rd418, %rd417, %rd416;
	setp.lt.s64 	%p338, %rd414, 0;
	mul.lo.s64 	%rd419, %rd418, 603979776;
	setp.ne.s64 	%p339, %rd419, %rd414;
	and.pred  	%p340, %p338, %p339;
	selp.s64 	%rd420, -1, 0, %p340;
	add.s64 	%rd421, %rd418, %rd420;
	mul.lo.s64 	%rd422, %rd421, -603979776;
	add.s64 	%rd423, %rd422, %rd414;
	shl.b64 	%rd424, %rd423, 2;
	add.s64 	%rd425, %rd4, %rd424;
	st.global.u32 	[%rd425], %r3332;
$L__BB0_192:                            // %L40319
                                        //   in Loop: Header=BB0_187 Depth=2
	mov.u32 	%r3340, 0;
	mov.u32 	%r3795, %r3340;
	mov.u32 	%r3796, %r3340;
	mov.u32 	%r3797, %r3340;
	mov.u32 	%r3798, %r3340;
	@%p278 bra 	$L__BB0_266;
	bra.uni 	$L__BB0_193;
$L__BB0_266:                            // %pass19460
                                        //   in Loop: Header=BB0_187 Depth=2
	ld.shared.u32 	%r3798, [%rd33];
	ld.shared.u32 	%r3797, [%rd34];
	ld.shared.u32 	%r3796, [%rd35];
	ld.shared.u32 	%r3795, [%rd36];
$L__BB0_193:                            // %L41395
                                        //   in Loop: Header=BB0_187 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3376, %r3373}, {%r519, %r522}, {%r3798}, {%r3340, %r3340};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3385, %r3382}, {%r519, %r522}, {%r3797}, {%r3340, %r3340};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3394, %r3391}, {%r519, %r522}, {%r3796}, {%r3340, %r3340};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3403, %r3400}, {%r519, %r522}, {%r3795}, {%r3340, %r3340};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3369, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3371, %r3369, %r3373;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3374, %r571, %r3376, %r3371;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3378, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3380, %r3378, %r3382;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3383, %r571, %r3385, %r3380;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3387, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3389, %r3387, %r3391;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3392, %r571, %r3394, %r3389;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3396, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3398, %r3396, %r3400;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3401, %r571, %r3403, %r3398;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3405, %r574, %r3376;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3408, %r571, %r3373, %r3405;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3412, %r574, %r3385;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3415, %r571, %r3382, %r3412;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3419, %r574, %r3394;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3422, %r571, %r3391, %r3419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3426, %r574, %r3403;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3429, %r571, %r3400, %r3426;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3433, %r3434}, {%r615, %r621, %r618, %r624}, {%r3374, %r3408}, {%r3340, %r3340};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3443, %r3444}, {%r615, %r621, %r618, %r624}, {%r3383, %r3415}, {%r3340, %r3340};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3453, %r3454}, {%r615, %r621, %r618, %r624}, {%r3392, %r3422}, {%r3340, %r3340};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3463, %r3464}, {%r615, %r621, %r618, %r624}, {%r3401, %r3429}, {%r3340, %r3340};
	// end inline asm
	@%p278 bra 	$L__BB0_267;
	bra.uni 	$L__BB0_194;
$L__BB0_267:                            // %pass19933
                                        //   in Loop: Header=BB0_187 Depth=2
	// begin inline asm
	mul.rn.f16x2 %r3473, %r3433, %r3433;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3476, %r3434, %r3434, %r3473;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3480, %r3453, %r3453, %r3476;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3484, %r3454, %r3454, %r3480;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3488, %r1897, %r3484, %r3340;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3492, %r3443, %r3443;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3495, %r3444, %r3444, %r3492;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3499, %r3463, %r3463, %r3495;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3503, %r3464, %r3464, %r3499;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3507, %r1897, %r3503, %r3340;
	// end inline asm
	add.s32 	%r3511, %r194, %r3785;
	add.s32 	%r3512, %r3511, 1179648;
	cvt.s64.s32 	%rd426, %r3512;
	add.s64 	%rd427, %rd426, %rd15;
	mul.hi.s64 	%rd428, %rd427, 1024819115206086201;
	shr.u64 	%rd429, %rd428, 63;
	shr.s64 	%rd430, %rd428, 25;
	add.s64 	%rd431, %rd430, %rd429;
	setp.lt.s64 	%p343, %rd427, 0;
	mul.lo.s64 	%rd432, %rd431, 603979776;
	setp.ne.s64 	%p344, %rd432, %rd427;
	and.pred  	%p345, %p343, %p344;
	selp.s64 	%rd433, -1, 0, %p345;
	add.s64 	%rd434, %rd431, %rd433;
	mul.lo.s64 	%rd435, %rd434, -603979776;
	add.s64 	%rd436, %rd435, %rd427;
	shl.b64 	%rd437, %rd436, 2;
	add.s64 	%rd438, %rd4, %rd437;
	st.global.u32 	[%rd438], %r3488;
	add.s32 	%r3513, %r193, %r3785;
	add.s32 	%r3514, %r3513, 1179648;
	cvt.s64.s32 	%rd439, %r3514;
	add.s64 	%rd440, %rd439, %rd15;
	mul.hi.s64 	%rd441, %rd440, 1024819115206086201;
	shr.u64 	%rd442, %rd441, 63;
	shr.s64 	%rd443, %rd441, 25;
	add.s64 	%rd444, %rd443, %rd442;
	setp.lt.s64 	%p346, %rd440, 0;
	mul.lo.s64 	%rd445, %rd444, 603979776;
	setp.ne.s64 	%p347, %rd445, %rd440;
	and.pred  	%p348, %p346, %p347;
	selp.s64 	%rd446, -1, 0, %p348;
	add.s64 	%rd447, %rd444, %rd446;
	mul.lo.s64 	%rd448, %rd447, -603979776;
	add.s64 	%rd449, %rd448, %rd440;
	shl.b64 	%rd450, %rd449, 2;
	add.s64 	%rd451, %rd4, %rd450;
	st.global.u32 	[%rd451], %r3507;
$L__BB0_194:                            // %L41925
                                        //   in Loop: Header=BB0_187 Depth=2
	mov.u32 	%r3515, 0;
	mov.u32 	%r3799, %r3515;
	mov.u32 	%r3800, %r3515;
	mov.u32 	%r3801, %r3515;
	mov.u32 	%r3802, %r3515;
	@%p278 bra 	$L__BB0_268;
	bra.uni 	$L__BB0_195;
$L__BB0_268:                            // %pass20232
                                        //   in Loop: Header=BB0_187 Depth=2
	ld.shared.u32 	%r3802, [%rd37];
	ld.shared.u32 	%r3801, [%rd38];
	ld.shared.u32 	%r3800, [%rd39];
	ld.shared.u32 	%r3799, [%rd40];
$L__BB0_195:                            // %L43001
                                        //   in Loop: Header=BB0_187 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3551, %r3548}, {%r519, %r522}, {%r3802}, {%r3515, %r3515};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3560, %r3557}, {%r519, %r522}, {%r3801}, {%r3515, %r3515};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3569, %r3566}, {%r519, %r522}, {%r3800}, {%r3515, %r3515};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3578, %r3575}, {%r519, %r522}, {%r3799}, {%r3515, %r3515};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3544, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3546, %r3544, %r3548;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3549, %r571, %r3551, %r3546;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3553, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3555, %r3553, %r3557;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3558, %r571, %r3560, %r3555;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3562, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3564, %r3562, %r3566;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3567, %r571, %r3569, %r3564;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3571, %r574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3573, %r3571, %r3575;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3576, %r571, %r3578, %r3573;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3580, %r574, %r3551;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3583, %r571, %r3548, %r3580;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3587, %r574, %r3560;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3590, %r571, %r3557, %r3587;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3594, %r574, %r3569;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3597, %r571, %r3566, %r3594;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3601, %r574, %r3578;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3604, %r571, %r3575, %r3601;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3608, %r3609}, {%r615, %r621, %r618, %r624}, {%r3549, %r3583}, {%r3515, %r3515};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3618, %r3619}, {%r615, %r621, %r618, %r624}, {%r3558, %r3590}, {%r3515, %r3515};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3628, %r3629}, {%r615, %r621, %r618, %r624}, {%r3567, %r3597}, {%r3515, %r3515};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3638, %r3639}, {%r615, %r621, %r618, %r624}, {%r3576, %r3604}, {%r3515, %r3515};
	// end inline asm
	@%p278 bra 	$L__BB0_269;
	bra.uni 	$L__BB0_196;
$L__BB0_269:                            // %pass20705
                                        //   in Loop: Header=BB0_187 Depth=2
	// begin inline asm
	mul.rn.f16x2 %r3648, %r3608, %r3608;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3651, %r3609, %r3609, %r3648;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3655, %r3628, %r3628, %r3651;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3659, %r3629, %r3629, %r3655;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3663, %r1897, %r3659, %r3515;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3667, %r3618, %r3618;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3670, %r3619, %r3619, %r3667;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3674, %r3638, %r3638, %r3670;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3678, %r3639, %r3639, %r3674;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3682, %r1897, %r3678, %r3515;
	// end inline asm
	add.s32 	%r3686, %r194, %r3785;
	add.s32 	%r3687, %r3686, 1769472;
	cvt.s64.s32 	%rd452, %r3687;
	add.s64 	%rd453, %rd452, %rd15;
	mul.hi.s64 	%rd454, %rd453, 1024819115206086201;
	shr.u64 	%rd455, %rd454, 63;
	shr.s64 	%rd456, %rd454, 25;
	add.s64 	%rd457, %rd456, %rd455;
	setp.lt.s64 	%p351, %rd453, 0;
	mul.lo.s64 	%rd458, %rd457, 603979776;
	setp.ne.s64 	%p352, %rd458, %rd453;
	and.pred  	%p353, %p351, %p352;
	selp.s64 	%rd459, -1, 0, %p353;
	add.s64 	%rd460, %rd457, %rd459;
	mul.lo.s64 	%rd461, %rd460, -603979776;
	add.s64 	%rd462, %rd461, %rd453;
	shl.b64 	%rd463, %rd462, 2;
	add.s64 	%rd464, %rd4, %rd463;
	st.global.u32 	[%rd464], %r3663;
	add.s32 	%r3688, %r193, %r3785;
	add.s32 	%r3689, %r3688, 1769472;
	cvt.s64.s32 	%rd465, %r3689;
	add.s64 	%rd466, %rd465, %rd15;
	mul.hi.s64 	%rd467, %rd466, 1024819115206086201;
	shr.u64 	%rd468, %rd467, 63;
	shr.s64 	%rd469, %rd467, 25;
	add.s64 	%rd470, %rd469, %rd468;
	setp.lt.s64 	%p354, %rd466, 0;
	mul.lo.s64 	%rd471, %rd470, 603979776;
	setp.ne.s64 	%p355, %rd471, %rd466;
	and.pred  	%p356, %p354, %p355;
	selp.s64 	%rd472, -1, 0, %p356;
	add.s64 	%rd473, %rd470, %rd472;
	mul.lo.s64 	%rd474, %rd473, -603979776;
	add.s64 	%rd475, %rd474, %rd466;
	shl.b64 	%rd476, %rd475, 2;
	add.s64 	%rd477, %rd4, %rd476;
	st.global.u32 	[%rd477], %r3682;
	bra.uni 	$L__BB0_196;
$L__BB0_198:                            // %L43557
	mov.u32 	%r3690, 0;
	st.global.u32 	[%rd6], %r3690;
	ret;
$L__BB0_151:                            // %L7438
	mov.u32 	%r3714, 5;
	st.global.u32 	[%rd6], %r3714;
	mov.u64 	%rd524, exception4036;
	cvta.global.u64 	%rd525, %rd524;
	{ // callseq 110, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd525;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 110
	{ // callseq 111, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r377;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 111
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_152:                            // %L7594
	mov.u32 	%r3713, 5;
	st.global.u32 	[%rd6], %r3713;
	mov.u64 	%rd522, exception4036;
	cvta.global.u64 	%rd523, %rd522;
	{ // callseq 108, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd523;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 108
	{ // callseq 109, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r377;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 109
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_153:                            // %L7750
	mov.u32 	%r3712, 5;
	st.global.u32 	[%rd6], %r3712;
	mov.u64 	%rd520, exception4036;
	cvta.global.u64 	%rd521, %rd520;
	{ // callseq 106, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd521;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 106
	{ // callseq 107, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r377;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 107
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_154:                            // %L7906
	mov.u32 	%r3711, 5;
	st.global.u32 	[%rd6], %r3711;
	mov.u64 	%rd518, exception4036;
	cvta.global.u64 	%rd519, %rd518;
	{ // callseq 104, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd519;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 104
	{ // callseq 105, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r377;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 105
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_155:                            // %L8062
	mov.u32 	%r3710, 5;
	st.global.u32 	[%rd6], %r3710;
	mov.u64 	%rd516, exception4036;
	cvta.global.u64 	%rd517, %rd516;
	{ // callseq 102, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd517;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 102
	{ // callseq 103, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r377;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 103
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_156:                            // %L8218
	mov.u32 	%r3709, 5;
	st.global.u32 	[%rd6], %r3709;
	mov.u64 	%rd514, exception4036;
	cvta.global.u64 	%rd515, %rd514;
	{ // callseq 100, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd515;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 100
	{ // callseq 101, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r377;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 101
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_157:                            // %L8374
	mov.u32 	%r3708, 5;
	st.global.u32 	[%rd6], %r3708;
	mov.u64 	%rd512, exception4036;
	cvta.global.u64 	%rd513, %rd512;
	{ // callseq 98, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd513;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 98
	{ // callseq 99, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r377;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 99
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_158:                            // %L8530
	mov.u32 	%r3707, 5;
	st.global.u32 	[%rd6], %r3707;
	mov.u64 	%rd510, exception4036;
	cvta.global.u64 	%rd511, %rd510;
	{ // callseq 96, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd511;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 96
	{ // callseq 97, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r377;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 97
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_159:                            // %L8686
	mov.u32 	%r3706, 5;
	st.global.u32 	[%rd6], %r3706;
	mov.u64 	%rd508, exception4036;
	cvta.global.u64 	%rd509, %rd508;
	{ // callseq 94, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd509;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 94
	{ // callseq 95, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r377;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 95
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_160:                            // %L8842
	mov.u32 	%r3705, 5;
	st.global.u32 	[%rd6], %r3705;
	mov.u64 	%rd506, exception4036;
	cvta.global.u64 	%rd507, %rd506;
	{ // callseq 92, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd507;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 92
	{ // callseq 93, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r377;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 93
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_161:                            // %L8998
	mov.u32 	%r3704, 5;
	st.global.u32 	[%rd6], %r3704;
	mov.u64 	%rd504, exception4036;
	cvta.global.u64 	%rd505, %rd504;
	{ // callseq 90, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd505;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 90
	{ // callseq 91, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r377;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 91
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_162:                            // %L9154
	mov.u32 	%r3703, 5;
	st.global.u32 	[%rd6], %r3703;
	mov.u64 	%rd502, exception4036;
	cvta.global.u64 	%rd503, %rd502;
	{ // callseq 88, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd503;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 88
	{ // callseq 89, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r377;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 89
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_163:                            // %L9310
	mov.u32 	%r3702, 5;
	st.global.u32 	[%rd6], %r3702;
	mov.u64 	%rd500, exception4036;
	cvta.global.u64 	%rd501, %rd500;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd501;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r377;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_164:                            // %L9466
	mov.u32 	%r3701, 5;
	st.global.u32 	[%rd6], %r3701;
	mov.u64 	%rd498, exception4036;
	cvta.global.u64 	%rd499, %rd498;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd499;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r377;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_165:                            // %L9622
	mov.u32 	%r3700, 5;
	st.global.u32 	[%rd6], %r3700;
	mov.u64 	%rd496, exception4036;
	cvta.global.u64 	%rd497, %rd496;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd497;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r377;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_166:                            // %L9778
	mov.u32 	%r3699, 5;
	st.global.u32 	[%rd6], %r3699;
	mov.u64 	%rd494, exception4036;
	cvta.global.u64 	%rd495, %rd494;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd495;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r377;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_167:                            // %L9934
	mov.u32 	%r3698, 5;
	st.global.u32 	[%rd6], %r3698;
	mov.u64 	%rd492, exception4036;
	cvta.global.u64 	%rd493, %rd492;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd493;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r377;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_168:                            // %L10090
	mov.u32 	%r3697, 5;
	st.global.u32 	[%rd6], %r3697;
	mov.u64 	%rd490, exception4036;
	cvta.global.u64 	%rd491, %rd490;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd491;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r377;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_169:                            // %L10246
	mov.u32 	%r3696, 5;
	st.global.u32 	[%rd6], %r3696;
	mov.u64 	%rd488, exception4036;
	cvta.global.u64 	%rd489, %rd488;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd489;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r377;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_170:                            // %L10402
	mov.u32 	%r3695, 5;
	st.global.u32 	[%rd6], %r3695;
	mov.u64 	%rd486, exception4036;
	cvta.global.u64 	%rd487, %rd486;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd487;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r377;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_171:                            // %L10558
	mov.u32 	%r3694, 5;
	st.global.u32 	[%rd6], %r3694;
	mov.u64 	%rd484, exception4036;
	cvta.global.u64 	%rd485, %rd484;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd485;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r377;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_172:                            // %L10740
	mov.u32 	%r3693, 5;
	st.global.u32 	[%rd6], %r3693;
	mov.u64 	%rd482, exception4036;
	cvta.global.u64 	%rd483, %rd482;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd483;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r377;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_173:                            // %L10896
	mov.u32 	%r3692, 5;
	st.global.u32 	[%rd6], %r3692;
	mov.u64 	%rd480, exception4036;
	cvta.global.u64 	%rd481, %rd480;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd481;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r377;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_174:                            // %L11052
	mov.u32 	%r3691, 5;
	st.global.u32 	[%rd6], %r3691;
	mov.u64 	%rd478, exception4036;
	cvta.global.u64 	%rd479, %rd478;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd479;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r377;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_12:                             // %L307
	mov.u32 	%r3715, 3;
	st.global.u32 	[%rd6], %r3715;
	mov.u64 	%rd526, exception4036;
	cvta.global.u64 	%rd527, %rd526;
	{ // callseq 112, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd527;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 112
	{ // callseq 113, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r377;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 113
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L166
	mov.u32 	%r3716, 2;
	st.global.u32 	[%rd6], %r3716;
	mov.u64 	%rd528, exception4036;
	cvta.global.u64 	%rd529, %rd528;
	{ // callseq 114, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd529;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 114
	{ // callseq 115, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r377;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 115
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd47, exception1;
	cvta.global.u64 	%rd48, %rd47;
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd48;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 59
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r377;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 60
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L1143
	add.u64 	%rd46, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r3, %r1};
	st.local.v2.u32 	[%rd5+8], {%r4, %r83};
	st.local.u32 	[%rd5+16], %r84;
	mov.u64 	%rd52, __unnamed_1;
	cvta.global.u64 	%rd53, %rd52;
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd53;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd46;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r635, [retval0+0];
	} // callseq 61
	mov.u32 	%r637, 4;
	st.global.u32 	[%rd6], %r637;
	mov.u64 	%rd55, exception4036;
	cvta.global.u64 	%rd56, %rd55;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd56;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd41;
	st.param.b32 	[param0+8], %r377;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
