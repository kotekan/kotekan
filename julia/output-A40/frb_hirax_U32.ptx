// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception4104[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception4152[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 512, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<309>;
	.reg .b16 	%rs<97>;
	.reg .b32 	%r<3446>;
	.reg .f32 	%f<752>;
	.reg .b64 	%rd<350>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r261, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd82, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r270, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r270, 34943;
	@%p2 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd83, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r262, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r4, %ctaid.x;
	shl.b32 	%r5, %r4, 9;
	or.b32  	%r271, %r2, %r3;
	or.b32  	%r272, %r271, %r5;
	mul.wide.u32 	%rd90, %r272, 4;
	add.s64 	%rd6, %rd83, %rd90;
	mov.u32 	%r273, 1;
	st.global.u32 	[%rd6], %r273;
	setp.gt.u32 	%p3, %r262, 2047;
	@%p3 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r263, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p4, %r263, %r262;
	setp.gt.s32 	%p5, %r263, 4095;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r264, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r263, %r262;
	and.b32  	%r274, %r6, 63;
	setp.ne.s32 	%p7, %r274, 0;
	setp.gt.u32 	%p8, %r264, 1023;
	or.pred  	%p9, %p7, %p8;
	@%p9 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r265, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p10, %r265, %r264;
	setp.lt.s32 	%p11, %r265, 2048;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r275, %r265, %r264;
	mul.hi.s32 	%r276, %r6, 715827883;
	shr.u32 	%r277, %r276, 31;
	shr.s32 	%r278, %r276, 1;
	add.s32 	%r279, %r278, %r277;
	setp.eq.s32 	%p13, %r275, %r279;
	@%p13 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L258
	ld.param.u32 	%r266, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p14, %r266, 0;
	@%p14 bra 	$L__BB0_13;
// %bb.9:                               // %L260
	ld.param.u32 	%r267, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p15, %r267, %r266;
	setp.gt.s32 	%p16, %r267, 1024;
	or.pred  	%p17, %p15, %p16;
	@%p17 bra 	$L__BB0_13;
// %bb.10:                              // %L270
	ld.param.u32 	%r268, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r7, %r267, %r266;
	and.b32  	%r280, %r7, 31;
	setp.ne.s32 	%p18, %r280, 0;
	setp.lt.s32 	%p19, %r268, 0;
	or.pred  	%p20, %p18, %p19;
	@%p20 bra 	$L__BB0_13;
// %bb.11:                              // %L276
	ld.param.u32 	%r269, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p21, %r269, %r268;
	setp.gt.s32 	%p22, %r269, 2048;
	or.pred  	%p23, %p21, %p22;
	@%p23 bra 	$L__BB0_13;
// %bb.12:                              // %L286
	sub.s32 	%r281, %r269, %r268;
	and.b32  	%r282, %r281, 31;
	setp.eq.s32 	%p24, %r282, 0;
	setp.eq.s32 	%p25, %r281, %r7;
	and.pred  	%p26, %p24, %p25;
	@%p26 bra 	$L__BB0_161;
	bra.uni 	$L__BB0_13;
$L__BB0_161:                            // %pass162
	and.b32  	%r146, %r3, 3;
	shr.u32 	%r147, %r3, 2;
	mul.lo.s32 	%r283, %r146, %r147;
	and.b32  	%r284, %r283, 7;
	cvt.rn.f32.s32 	%f185, %r284;
	mov.f32 	%f186, 0f40800000;
	div.approx.f32 	%f151, %f185, %f186;
	abs.f32 	%f750, %f151;
	setp.lt.f32 	%p27, %f750, 0f40000000;
	mov.f32 	%f703, 0f40000000;
	setp.gtu.f32 	%p304, %f750, 0f4B800000;
	mov.f32 	%f746, %f750;
	@%p27 bra 	$L__BB0_173;
// %bb.162:
	@%p304 bra 	$L__BB0_169;
	bra.uni 	$L__BB0_163;
$L__BB0_169:
	mov.b32 	%r149, %f750;
	and.b32  	%r285, %r149, 8388607;
	or.b32  	%r3435, %r285, 1065353216;
	mov.b32 	%f745, %r3435;
	add.s32 	%r286, %r149, -1073741824;
	and.b32  	%r3436, %r286, -8388608;
	setp.eq.s32 	%p34, %r3436, 0;
	@%p34 bra 	$L__BB0_172;
// %bb.170:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f196, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f195,%f196;
	// end inline asm
$L__BB0_171:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r287, %r3436, 192937984;
	add.s32 	%r288, %r3435, %r287;
	mov.b32 	%f197, %r288;
	mul.f32 	%f198, %f195, %f197;
	sub.f32 	%f199, %f197, %f198;
	fma.rn.f32 	%f200, %f199, %f195, %f198;
	sub.f32 	%f201, %f197, %f200;
	fma.rz.f32 	%f202, %f201, %f195, %f200;
	cvt.rzi.f32.f32 	%f203, %f202;
	sub.f32 	%f745, %f197, %f203;
	sub.s32 	%r3436, %r3436, %r287;
	mov.b32 	%r3435, %f745;
	setp.ne.s32 	%p35, %r3436, 0;
	setp.ne.s32 	%p36, %r3435, 0;
	and.pred  	%p37, %p35, %p36;
	@%p37 bra 	$L__BB0_171;
$L__BB0_172:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p38, %r149, 2139095039;
	selp.f32 	%f204, 0f7FFFFFFF, 0f4B800000, %p38;
	mul.f32 	%f205, %f745, 0f34000000;
	mul.f32 	%f746, %f204, %f205;
	bra.uni 	$L__BB0_173;
$L__BB0_163:                            // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f188, %f750, %f703;
	cvt.rzi.f32.f32 	%f744, %f188;
	fma.rn.f32 	%f154, %f744, 0fC0000000, %f750;
	mov.b32 	%r148, %f154;
	setp.lt.u32 	%p29, %r148, 1073741824;
	@%p29 bra 	$L__BB0_168;
// %bb.164:
	setp.lt.u32 	%p30, %r148, -2147483647;
	@%p30 bra 	$L__BB0_166;
// %bb.165:
	add.f32 	%f193, %f744, 0fBF800000;
	setp.lt.f32 	%p33, %f154, 0fC0000000;
	add.f32 	%f194, %f193, 0fBF800000;
	selp.f32 	%f744, %f194, %f193, %p33;
	bra.uni 	$L__BB0_168;
$L__BB0_166:
	add.f32 	%f744, %f744, 0f3F800000;
	setp.ltu.f32 	%p31, %f154, 0f40800000;
	@%p31 bra 	$L__BB0_168;
// %bb.167:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f189, %f744, 0f3F800000;
	fma.rn.f32 	%f191, %f703, 0fC0400000, %f154;
	setp.ge.f32 	%p32, %f191, 0f00000000;
	add.f32 	%f192, %f189, 0f3F800000;
	selp.f32 	%f744, %f192, %f189, %p32;
$L__BB0_168:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f746, %f744, 0fC0000000, %f750;
$L__BB0_173:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f206, %f746;
	setp.gtu.f32 	%p39, %f206, 0f7F800000;
	mov.b32 	%r289, %f151;
	and.b32  	%r156, %r289, -2147483648;
	@%p39 bra 	$L__BB0_175;
// %bb.174:
	mov.b32 	%r290, %f746;
	or.b32  	%r291, %r156, %r290;
	mov.b32 	%f746, %r291;
$L__BB0_175:                            // %__nv_fmodf.exit
	shl.b32 	%r159, %r3, 1;
	and.b32  	%r306, %r159, 2;
	mul.lo.s32 	%r160, %r306, %r147;
	cvt.rn.f32.s32 	%f239, %r160;
	mov.f32 	%f240, 0f41800000;
	div.approx.f32 	%f168, %f239, %f240;
	abs.f32 	%f726, %f168;
	setp.lt.f32 	%p47, %f726, 0f40000000;
	setp.gtu.f32 	%p305, %f726, 0f4B800000;
	mov.f32 	%f706, %f726;
	@%p47 bra 	$L__BB0_25;
// %bb.14:
	@%p305 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_15;
$L__BB0_21:
	mov.b32 	%r9, %f726;
	and.b32  	%r307, %r9, 8388607;
	or.b32  	%r3401, %r307, 1065353216;
	mov.b32 	%f705, %r3401;
	add.s32 	%r308, %r9, -1073741824;
	and.b32  	%r3402, %r308, -8388608;
	setp.eq.s32 	%p54, %r3402, 0;
	@%p54 bra 	$L__BB0_24;
// %bb.22:                              // %__nv_fmaf_rn.exit4.i.i.i2363.preheader
	mov.f32 	%f250, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f249,%f250;
	// end inline asm
$L__BB0_23:                             // %__nv_fmaf_rn.exit4.i.i.i2363
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r309, %r3402, 192937984;
	add.s32 	%r310, %r3401, %r309;
	mov.b32 	%f251, %r310;
	mul.f32 	%f252, %f249, %f251;
	sub.f32 	%f253, %f251, %f252;
	fma.rn.f32 	%f254, %f253, %f249, %f252;
	sub.f32 	%f255, %f251, %f254;
	fma.rz.f32 	%f256, %f255, %f249, %f254;
	cvt.rzi.f32.f32 	%f257, %f256;
	sub.f32 	%f705, %f251, %f257;
	sub.s32 	%r3402, %r3402, %r309;
	mov.b32 	%r3401, %f705;
	setp.ne.s32 	%p55, %r3402, 0;
	setp.ne.s32 	%p56, %r3401, 0;
	and.pred  	%p57, %p55, %p56;
	@%p57 bra 	$L__BB0_23;
$L__BB0_24:                             // %__internal_fmodf_slowpath_mod.exit.i.i2365
	setp.gt.u32 	%p58, %r9, 2139095039;
	selp.f32 	%f258, 0f7FFFFFFF, 0f4B800000, %p58;
	mul.f32 	%f259, %f705, 0f34000000;
	mul.f32 	%f706, %f258, %f259;
	bra.uni 	$L__BB0_25;
$L__BB0_15:                             // %__nv_fast_fdividef.exit.i.i.i2342
	div.approx.f32 	%f242, %f726, %f703;
	cvt.rzi.f32.f32 	%f704, %f242;
	fma.rn.f32 	%f2, %f704, 0fC0000000, %f726;
	mov.b32 	%r8, %f2;
	setp.lt.u32 	%p49, %r8, 1073741824;
	@%p49 bra 	$L__BB0_20;
// %bb.16:
	setp.lt.u32 	%p50, %r8, -2147483647;
	@%p50 bra 	$L__BB0_18;
// %bb.17:
	add.f32 	%f247, %f704, 0fBF800000;
	setp.lt.f32 	%p53, %f2, 0fC0000000;
	add.f32 	%f248, %f247, 0fBF800000;
	selp.f32 	%f704, %f248, %f247, %p53;
	bra.uni 	$L__BB0_20;
$L__BB0_18:
	add.f32 	%f704, %f704, 0f3F800000;
	setp.ltu.f32 	%p51, %f2, 0f40800000;
	@%p51 bra 	$L__BB0_20;
// %bb.19:                              // %__nv_fmaf_rn.exit.i.i.i2346
	add.f32 	%f243, %f704, 0f3F800000;
	fma.rn.f32 	%f245, %f703, 0fC0400000, %f2;
	setp.ge.f32 	%p52, %f245, 0f00000000;
	add.f32 	%f246, %f243, 0f3F800000;
	selp.f32 	%f704, %f246, %f243, %p52;
$L__BB0_20:                             // %__internal_fmodf_fastpath_quot.exit.i.i2349
	fma.rn.f32 	%f706, %f704, 0fC0000000, %f726;
$L__BB0_25:                             // %__internal_fmodf_kernel.exit.i2368
	abs.f32 	%f260, %f706;
	setp.gtu.f32 	%p59, %f260, 0f7F800000;
	mov.b32 	%r311, %f168;
	and.b32  	%r16, %r311, -2147483648;
	@%p59 bra 	$L__BB0_27;
// %bb.26:
	mov.b32 	%r312, %f706;
	or.b32  	%r313, %r16, %r312;
	mov.b32 	%f706, %r313;
$L__BB0_27:                             // %__nv_fmodf.exit2369
	add.s32 	%r322, %r160, %r147;
	cvt.rn.f32.s32 	%f291, %r322;
	div.approx.f32 	%f18, %f291, %f240;
	abs.f32 	%f730, %f18;
	setp.lt.f32 	%p67, %f730, 0f40000000;
	setp.gtu.f32 	%p306, %f730, 0f4B800000;
	mov.f32 	%f710, %f730;
	@%p67 bra 	$L__BB0_39;
// %bb.28:
	@%p306 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_29;
$L__BB0_35:
	mov.b32 	%r18, %f730;
	and.b32  	%r323, %r18, 8388607;
	or.b32  	%r3403, %r323, 1065353216;
	mov.b32 	%f709, %r3403;
	add.s32 	%r324, %r18, -1073741824;
	and.b32  	%r3404, %r324, -8388608;
	setp.eq.s32 	%p74, %r3404, 0;
	@%p74 bra 	$L__BB0_38;
// %bb.36:                              // %__nv_fmaf_rn.exit4.i.i.i2394.preheader
	mov.f32 	%f302, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f301,%f302;
	// end inline asm
$L__BB0_37:                             // %__nv_fmaf_rn.exit4.i.i.i2394
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r325, %r3404, 192937984;
	add.s32 	%r326, %r3403, %r325;
	mov.b32 	%f303, %r326;
	mul.f32 	%f304, %f301, %f303;
	sub.f32 	%f305, %f303, %f304;
	fma.rn.f32 	%f306, %f305, %f301, %f304;
	sub.f32 	%f307, %f303, %f306;
	fma.rz.f32 	%f308, %f307, %f301, %f306;
	cvt.rzi.f32.f32 	%f309, %f308;
	sub.f32 	%f709, %f303, %f309;
	sub.s32 	%r3404, %r3404, %r325;
	mov.b32 	%r3403, %f709;
	setp.ne.s32 	%p75, %r3404, 0;
	setp.ne.s32 	%p76, %r3403, 0;
	and.pred  	%p77, %p75, %p76;
	@%p77 bra 	$L__BB0_37;
$L__BB0_38:                             // %__internal_fmodf_slowpath_mod.exit.i.i2396
	setp.gt.u32 	%p78, %r18, 2139095039;
	selp.f32 	%f310, 0f7FFFFFFF, 0f4B800000, %p78;
	mul.f32 	%f311, %f709, 0f34000000;
	mul.f32 	%f710, %f310, %f311;
	bra.uni 	$L__BB0_39;
$L__BB0_29:                             // %__nv_fast_fdividef.exit.i.i.i2373
	div.approx.f32 	%f294, %f730, %f703;
	cvt.rzi.f32.f32 	%f708, %f294;
	fma.rn.f32 	%f21, %f708, 0fC0000000, %f730;
	mov.b32 	%r17, %f21;
	setp.lt.u32 	%p69, %r17, 1073741824;
	@%p69 bra 	$L__BB0_34;
// %bb.30:
	setp.lt.u32 	%p70, %r17, -2147483647;
	@%p70 bra 	$L__BB0_32;
// %bb.31:
	add.f32 	%f299, %f708, 0fBF800000;
	setp.lt.f32 	%p73, %f21, 0fC0000000;
	add.f32 	%f300, %f299, 0fBF800000;
	selp.f32 	%f708, %f300, %f299, %p73;
	bra.uni 	$L__BB0_34;
$L__BB0_32:
	add.f32 	%f708, %f708, 0f3F800000;
	setp.ltu.f32 	%p71, %f21, 0f40800000;
	@%p71 bra 	$L__BB0_34;
// %bb.33:                              // %__nv_fmaf_rn.exit.i.i.i2377
	add.f32 	%f295, %f708, 0f3F800000;
	fma.rn.f32 	%f297, %f703, 0fC0400000, %f21;
	setp.ge.f32 	%p72, %f297, 0f00000000;
	add.f32 	%f298, %f295, 0f3F800000;
	selp.f32 	%f708, %f298, %f295, %p72;
$L__BB0_34:                             // %__internal_fmodf_fastpath_quot.exit.i.i2380
	fma.rn.f32 	%f710, %f708, 0fC0000000, %f730;
$L__BB0_39:                             // %__internal_fmodf_kernel.exit.i2399
	abs.f32 	%f312, %f710;
	setp.gtu.f32 	%p79, %f312, 0f7F800000;
	mov.b32 	%r327, %f18;
	and.b32  	%r25, %r327, -2147483648;
	@%p79 bra 	$L__BB0_41;
// %bb.40:
	mov.b32 	%r328, %f710;
	or.b32  	%r329, %r25, %r328;
	mov.b32 	%f710, %r329;
$L__BB0_41:                             // %__nv_fmodf.exit2400
	mul.lo.s32 	%r28, %r159, %r147;
	and.b32  	%r344, %r28, 2;
	cvt.rn.f32.s32 	%f345, %r344;
	div.approx.f32 	%f35, %f345, %f703;
	abs.f32 	%f734, %f35;
	setp.lt.f32 	%p87, %f734, 0f40000000;
	setp.gtu.f32 	%p307, %f734, 0f4B800000;
	mov.f32 	%f714, %f734;
	@%p87 bra 	$L__BB0_53;
// %bb.42:
	@%p307 bra 	$L__BB0_49;
	bra.uni 	$L__BB0_43;
$L__BB0_49:
	mov.b32 	%r30, %f734;
	and.b32  	%r345, %r30, 8388607;
	or.b32  	%r3405, %r345, 1065353216;
	mov.b32 	%f713, %r3405;
	add.s32 	%r346, %r30, -1073741824;
	and.b32  	%r3406, %r346, -8388608;
	setp.eq.s32 	%p94, %r3406, 0;
	@%p94 bra 	$L__BB0_52;
// %bb.50:                              // %__nv_fmaf_rn.exit4.i.i.i2425.preheader
	mov.f32 	%f356, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f355,%f356;
	// end inline asm
$L__BB0_51:                             // %__nv_fmaf_rn.exit4.i.i.i2425
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r347, %r3406, 192937984;
	add.s32 	%r348, %r3405, %r347;
	mov.b32 	%f357, %r348;
	mul.f32 	%f358, %f355, %f357;
	sub.f32 	%f359, %f357, %f358;
	fma.rn.f32 	%f360, %f359, %f355, %f358;
	sub.f32 	%f361, %f357, %f360;
	fma.rz.f32 	%f362, %f361, %f355, %f360;
	cvt.rzi.f32.f32 	%f363, %f362;
	sub.f32 	%f713, %f357, %f363;
	sub.s32 	%r3406, %r3406, %r347;
	mov.b32 	%r3405, %f713;
	setp.ne.s32 	%p95, %r3406, 0;
	setp.ne.s32 	%p96, %r3405, 0;
	and.pred  	%p97, %p95, %p96;
	@%p97 bra 	$L__BB0_51;
$L__BB0_52:                             // %__internal_fmodf_slowpath_mod.exit.i.i2427
	setp.gt.u32 	%p98, %r30, 2139095039;
	selp.f32 	%f364, 0f7FFFFFFF, 0f4B800000, %p98;
	mul.f32 	%f365, %f713, 0f34000000;
	mul.f32 	%f714, %f364, %f365;
	bra.uni 	$L__BB0_53;
$L__BB0_43:                             // %__nv_fast_fdividef.exit.i.i.i2404
	div.approx.f32 	%f348, %f734, %f703;
	cvt.rzi.f32.f32 	%f712, %f348;
	fma.rn.f32 	%f38, %f712, 0fC0000000, %f734;
	mov.b32 	%r29, %f38;
	setp.lt.u32 	%p89, %r29, 1073741824;
	@%p89 bra 	$L__BB0_48;
// %bb.44:
	setp.lt.u32 	%p90, %r29, -2147483647;
	@%p90 bra 	$L__BB0_46;
// %bb.45:
	add.f32 	%f353, %f712, 0fBF800000;
	setp.lt.f32 	%p93, %f38, 0fC0000000;
	add.f32 	%f354, %f353, 0fBF800000;
	selp.f32 	%f712, %f354, %f353, %p93;
	bra.uni 	$L__BB0_48;
$L__BB0_46:
	add.f32 	%f712, %f712, 0f3F800000;
	setp.ltu.f32 	%p91, %f38, 0f40800000;
	@%p91 bra 	$L__BB0_48;
// %bb.47:                              // %__nv_fmaf_rn.exit.i.i.i2408
	add.f32 	%f349, %f712, 0f3F800000;
	fma.rn.f32 	%f351, %f703, 0fC0400000, %f38;
	setp.ge.f32 	%p92, %f351, 0f00000000;
	add.f32 	%f352, %f349, 0f3F800000;
	selp.f32 	%f712, %f352, %f349, %p92;
$L__BB0_48:                             // %__internal_fmodf_fastpath_quot.exit.i.i2411
	fma.rn.f32 	%f714, %f712, 0fC0000000, %f734;
$L__BB0_53:                             // %__internal_fmodf_kernel.exit.i2430
	mov.f32 	%f230, 0f00000000;
	abs.f32 	%f366, %f714;
	setp.gtu.f32 	%p99, %f366, 0f7F800000;
	mov.b32 	%r349, %f35;
	and.b32  	%r37, %r349, -2147483648;
	@%p99 bra 	$L__BB0_55;
// %bb.54:
	mov.b32 	%r350, %f714;
	or.b32  	%r351, %r37, %r350;
	mov.b32 	%f714, %r351;
$L__BB0_55:                             // %__nv_fmodf.exit2431
	add.f32 	%f367, %f714, %f714;
	mov.b32 	%r352, %f367;
	and.b32  	%r353, %r352, -2147483648;
	or.b32  	%r354, %r353, 1056964608;
	mov.b32 	%f368, %r354;
	add.f32 	%f369, %f367, %f368;
	cvt.rzi.f32.f32 	%f370, %f369;
	abs.f32 	%f371, %f367;
	setp.gt.f32 	%p100, %f371, 0f4B000000;
	selp.f32 	%f372, %f367, %f370, %p100;
	cvt.rzi.f32.f32 	%f373, %f367;
	setp.lt.f32 	%p101, %f371, 0f3F000000;
	selp.f32 	%f374, %f373, %f372, %p101;
	cvt.rzi.s32.f32 	%r355, %f374;
	fma.rn.f32 	%f375, %f374, 0fBF000000, %f714;
	mul.f32 	%f376, %f375, %f375;
	fma.rn.f32 	%f377, %f376, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f378, %f376, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f379, %f377, %f376, 0fC0A55DF6;
	fma.rn.f32 	%f380, %f378, %f376, 0f4081E0CF;
	fma.rn.f32 	%f381, %f376, %f375, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f376, 0fC09DE9E6;
	fma.rn.f32 	%f383, %f379, %f381, 0f00000000;
	fma.rn.f32 	%f384, %f382, %f376, 0f3F800000;
	fma.rn.f32 	%f385, %f375, 0f40490FDB, %f383;
	and.b32  	%r356, %r355, 1;
	setp.eq.b32 	%p102, %r356, 1;
	selp.f32 	%f386, %f384, %f385, %p102;
	selp.f32 	%f387, %f385, %f384, %p102;
	and.b32  	%r357, %r355, 2;
	setp.eq.s32 	%p103, %r357, 0;
	neg.f32 	%f388, %f386;
	selp.f32 	%f389, %f386, %f388, %p103;
	add.s32 	%r358, %r355, 1;
	and.b32  	%r359, %r358, 2;
	setp.eq.s32 	%p104, %r359, 0;
	sub.f32 	%f391, %f230, %f387;
	cvt.rzi.f32.f32 	%f393, %f714;
	setp.eq.f32 	%p105, %f393, %f714;
	mul.f32 	%f394, %f714, 0f00000000;
	selp.f32 	%f76, %f394, %f389, %p105;
	abs.f32 	%f395, %f714;
	add.s32 	%r360, %r28, %r147;
	and.b32  	%r361, %r360, 3;
	cvt.rn.f32.s32 	%f397, %r361;
	div.approx.f32 	%f54, %f397, %f703;
	abs.f32 	%f738, %f54;
	setp.lt.f32 	%p107, %f738, 0f40000000;
	setp.gtu.f32 	%p308, %f738, 0f4B800000;
	mov.f32 	%f718, %f738;
	@%p107 bra 	$L__BB0_67;
// %bb.56:
	@%p308 bra 	$L__BB0_63;
	bra.uni 	$L__BB0_57;
$L__BB0_63:
	mov.b32 	%r39, %f738;
	and.b32  	%r362, %r39, 8388607;
	or.b32  	%r3407, %r362, 1065353216;
	mov.b32 	%f717, %r3407;
	add.s32 	%r363, %r39, -1073741824;
	and.b32  	%r3408, %r363, -8388608;
	setp.eq.s32 	%p114, %r3408, 0;
	@%p114 bra 	$L__BB0_66;
// %bb.64:                              // %__nv_fmaf_rn.exit4.i.i.i2456.preheader
	mov.f32 	%f408, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f407,%f408;
	// end inline asm
$L__BB0_65:                             // %__nv_fmaf_rn.exit4.i.i.i2456
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r364, %r3408, 192937984;
	add.s32 	%r365, %r3407, %r364;
	mov.b32 	%f409, %r365;
	mul.f32 	%f410, %f407, %f409;
	sub.f32 	%f411, %f409, %f410;
	fma.rn.f32 	%f412, %f411, %f407, %f410;
	sub.f32 	%f413, %f409, %f412;
	fma.rz.f32 	%f414, %f413, %f407, %f412;
	cvt.rzi.f32.f32 	%f415, %f414;
	sub.f32 	%f717, %f409, %f415;
	sub.s32 	%r3408, %r3408, %r364;
	mov.b32 	%r3407, %f717;
	setp.ne.s32 	%p115, %r3408, 0;
	setp.ne.s32 	%p116, %r3407, 0;
	and.pred  	%p117, %p115, %p116;
	@%p117 bra 	$L__BB0_65;
$L__BB0_66:                             // %__internal_fmodf_slowpath_mod.exit.i.i2458
	setp.gt.u32 	%p118, %r39, 2139095039;
	selp.f32 	%f416, 0f7FFFFFFF, 0f4B800000, %p118;
	mul.f32 	%f417, %f717, 0f34000000;
	mul.f32 	%f718, %f416, %f417;
	bra.uni 	$L__BB0_67;
$L__BB0_57:                             // %__nv_fast_fdividef.exit.i.i.i2435
	div.approx.f32 	%f400, %f738, %f703;
	cvt.rzi.f32.f32 	%f716, %f400;
	fma.rn.f32 	%f57, %f716, 0fC0000000, %f738;
	mov.b32 	%r38, %f57;
	setp.lt.u32 	%p109, %r38, 1073741824;
	@%p109 bra 	$L__BB0_62;
// %bb.58:
	setp.lt.u32 	%p110, %r38, -2147483647;
	@%p110 bra 	$L__BB0_60;
// %bb.59:
	add.f32 	%f405, %f716, 0fBF800000;
	setp.lt.f32 	%p113, %f57, 0fC0000000;
	add.f32 	%f406, %f405, 0fBF800000;
	selp.f32 	%f716, %f406, %f405, %p113;
	bra.uni 	$L__BB0_62;
$L__BB0_60:
	add.f32 	%f716, %f716, 0f3F800000;
	setp.ltu.f32 	%p111, %f57, 0f40800000;
	@%p111 bra 	$L__BB0_62;
// %bb.61:                              // %__nv_fmaf_rn.exit.i.i.i2439
	add.f32 	%f401, %f716, 0f3F800000;
	fma.rn.f32 	%f403, %f703, 0fC0400000, %f57;
	setp.ge.f32 	%p112, %f403, 0f00000000;
	add.f32 	%f404, %f401, 0f3F800000;
	selp.f32 	%f716, %f404, %f401, %p112;
$L__BB0_62:                             // %__internal_fmodf_fastpath_quot.exit.i.i2442
	fma.rn.f32 	%f718, %f716, 0fC0000000, %f738;
$L__BB0_67:                             // %__internal_fmodf_kernel.exit.i2461
	selp.f32 	%f392, %f387, %f391, %p104;
	setp.gt.f32 	%p106, %f395, 0f4B800000;
	add.f32 	%f396, %f76, 0f3F800000;
	abs.f32 	%f418, %f718;
	setp.gtu.f32 	%p119, %f418, 0f7F800000;
	mov.b32 	%r366, %f54;
	and.b32  	%r46, %r366, -2147483648;
	@%p119 bra 	$L__BB0_69;
// %bb.68:
	mov.b32 	%r367, %f718;
	or.b32  	%r368, %r46, %r367;
	mov.b32 	%f718, %r368;
$L__BB0_69:                             // %__nv_fmodf.exit2462
	selp.f32 	%f53, %f396, %f392, %p106;
	add.f32 	%f419, %f718, %f718;
	mov.b32 	%r369, %f419;
	and.b32  	%r370, %r369, -2147483648;
	or.b32  	%r371, %r370, 1056964608;
	mov.b32 	%f420, %r371;
	add.f32 	%f421, %f419, %f420;
	cvt.rzi.f32.f32 	%f422, %f421;
	abs.f32 	%f423, %f419;
	setp.gt.f32 	%p120, %f423, 0f4B000000;
	selp.f32 	%f424, %f419, %f422, %p120;
	cvt.rzi.f32.f32 	%f425, %f419;
	setp.lt.f32 	%p121, %f423, 0f3F000000;
	selp.f32 	%f426, %f425, %f424, %p121;
	cvt.rzi.s32.f32 	%r372, %f426;
	fma.rn.f32 	%f427, %f426, 0fBF000000, %f718;
	mul.f32 	%f428, %f427, %f427;
	fma.rn.f32 	%f429, %f428, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f430, %f428, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f431, %f429, %f428, 0fC0A55DF6;
	fma.rn.f32 	%f432, %f430, %f428, 0f4081E0CF;
	fma.rn.f32 	%f433, %f428, %f427, 0f00000000;
	fma.rn.f32 	%f434, %f432, %f428, 0fC09DE9E6;
	fma.rn.f32 	%f435, %f431, %f433, 0f00000000;
	fma.rn.f32 	%f436, %f434, %f428, 0f3F800000;
	fma.rn.f32 	%f437, %f427, 0f40490FDB, %f435;
	and.b32  	%r373, %r372, 1;
	setp.eq.b32 	%p122, %r373, 1;
	selp.f32 	%f438, %f436, %f437, %p122;
	selp.f32 	%f439, %f437, %f436, %p122;
	and.b32  	%r374, %r372, 2;
	setp.eq.s32 	%p123, %r374, 0;
	neg.f32 	%f440, %f438;
	selp.f32 	%f441, %f438, %f440, %p123;
	add.s32 	%r375, %r372, 1;
	and.b32  	%r376, %r375, 2;
	setp.eq.s32 	%p124, %r376, 0;
	sub.f32 	%f443, %f230, %f439;
	selp.f32 	%f444, %f439, %f443, %p124;
	cvt.rzi.f32.f32 	%f445, %f718;
	setp.eq.f32 	%p125, %f445, %f718;
	mul.f32 	%f446, %f718, 0f00000000;
	selp.f32 	%f78, %f446, %f441, %p125;
	abs.f32 	%f447, %f718;
	setp.gt.f32 	%p126, %f447, 0f4B800000;
	add.f32 	%f448, %f78, 0f3F800000;
	selp.f32 	%f72, %f448, %f444, %p126;
	and.b32  	%r47, %r3, 2;
	setp.eq.s32 	%p127, %r47, 0;
	mov.f32 	%f75, %f53;
	mov.f32 	%f77, %f72;
	@%p127 bra 	$L__BB0_71;
// %bb.70:                              // %L682
	neg.f32 	%f77, %f78;
	neg.f32 	%f75, %f76;
	mov.f32 	%f76, %f53;
	mov.f32 	%f78, %f72;
$L__BB0_71:                             // %L684
	@%p27 bra 	$L__BB0_183;
// %bb.72:
	@%p304 bra 	$L__BB0_179;
	bra.uni 	$L__BB0_73;
$L__BB0_179:
	mov.b32 	%r162, %f750;
	and.b32  	%r383, %r162, 8388607;
	or.b32  	%r3437, %r383, 1065353216;
	mov.b32 	%f749, %r3437;
	add.s32 	%r384, %r162, -1073741824;
	and.b32  	%r3438, %r384, -8388608;
	setp.eq.s32 	%p135, %r3438, 0;
	@%p135 bra 	$L__BB0_182;
// %bb.180:                             // %__nv_fmaf_rn.exit4.i.i.i2487.preheader
	mov.f32 	%f458, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f457,%f458;
	// end inline asm
$L__BB0_181:                            // %__nv_fmaf_rn.exit4.i.i.i2487
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r385, %r3438, 192937984;
	add.s32 	%r386, %r3437, %r385;
	mov.b32 	%f459, %r386;
	mul.f32 	%f460, %f457, %f459;
	sub.f32 	%f461, %f459, %f460;
	fma.rn.f32 	%f462, %f461, %f457, %f460;
	sub.f32 	%f463, %f459, %f462;
	fma.rz.f32 	%f464, %f463, %f457, %f462;
	cvt.rzi.f32.f32 	%f465, %f464;
	sub.f32 	%f749, %f459, %f465;
	sub.s32 	%r3438, %r3438, %r385;
	mov.b32 	%r3437, %f749;
	setp.ne.s32 	%p136, %r3438, 0;
	setp.ne.s32 	%p137, %r3437, 0;
	and.pred  	%p138, %p136, %p137;
	@%p138 bra 	$L__BB0_181;
$L__BB0_182:                            // %__internal_fmodf_slowpath_mod.exit.i.i2489
	setp.gt.u32 	%p139, %r162, 2139095039;
	selp.f32 	%f466, 0f7FFFFFFF, 0f4B800000, %p139;
	mul.f32 	%f467, %f749, 0f34000000;
	mul.f32 	%f750, %f466, %f467;
	bra.uni 	$L__BB0_183;
$L__BB0_73:                             // %__nv_fast_fdividef.exit.i.i.i2466
	div.approx.f32 	%f450, %f750, %f703;
	cvt.rzi.f32.f32 	%f748, %f450;
	fma.rn.f32 	%f171, %f748, 0fC0000000, %f750;
	mov.b32 	%r161, %f171;
	setp.lt.u32 	%p130, %r161, 1073741824;
	@%p130 bra 	$L__BB0_178;
// %bb.74:
	setp.lt.u32 	%p131, %r161, -2147483647;
	@%p131 bra 	$L__BB0_176;
// %bb.75:
	add.f32 	%f455, %f748, 0fBF800000;
	setp.lt.f32 	%p134, %f171, 0fC0000000;
	add.f32 	%f456, %f455, 0fBF800000;
	selp.f32 	%f748, %f456, %f455, %p134;
	bra.uni 	$L__BB0_178;
$L__BB0_176:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p132, %f171, 0f40800000;
	@%p132 bra 	$L__BB0_178;
// %bb.177:                             // %__nv_fmaf_rn.exit.i.i.i2470
	add.f32 	%f451, %f748, 0f3F800000;
	fma.rn.f32 	%f453, %f703, 0fC0400000, %f171;
	setp.ge.f32 	%p133, %f453, 0f00000000;
	add.f32 	%f454, %f451, 0f3F800000;
	selp.f32 	%f748, %f454, %f451, %p133;
$L__BB0_178:                            // %__internal_fmodf_fastpath_quot.exit.i.i2473
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_183:                            // %__internal_fmodf_kernel.exit.i2492
	abs.f32 	%f468, %f750;
	setp.gtu.f32 	%p140, %f468, 0f7F800000;
	@%p140 bra 	$L__BB0_185;
// %bb.184:
	mov.b32 	%r387, %f750;
	or.b32  	%r388, %r156, %r387;
	mov.b32 	%f750, %r388;
$L__BB0_185:                            // %__nv_fmodf.exit2493
	@%p47 bra 	$L__BB0_87;
// %bb.76:
	@%p305 bra 	$L__BB0_83;
	bra.uni 	$L__BB0_77;
$L__BB0_83:
	mov.b32 	%r51, %f726;
	and.b32  	%r403, %r51, 8388607;
	or.b32  	%r3409, %r403, 1065353216;
	mov.b32 	%f725, %r3409;
	add.s32 	%r404, %r51, -1073741824;
	and.b32  	%r3410, %r404, -8388608;
	setp.eq.s32 	%p155, %r3410, 0;
	@%p155 bra 	$L__BB0_86;
// %bb.84:                              // %__nv_fmaf_rn.exit4.i.i.i2518.preheader
	mov.f32 	%f510, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f509,%f510;
	// end inline asm
$L__BB0_85:                             // %__nv_fmaf_rn.exit4.i.i.i2518
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r405, %r3410, 192937984;
	add.s32 	%r406, %r3409, %r405;
	mov.b32 	%f511, %r406;
	mul.f32 	%f512, %f509, %f511;
	sub.f32 	%f513, %f511, %f512;
	fma.rn.f32 	%f514, %f513, %f509, %f512;
	sub.f32 	%f515, %f511, %f514;
	fma.rz.f32 	%f516, %f515, %f509, %f514;
	cvt.rzi.f32.f32 	%f517, %f516;
	sub.f32 	%f725, %f511, %f517;
	sub.s32 	%r3410, %r3410, %r405;
	mov.b32 	%r3409, %f725;
	setp.ne.s32 	%p156, %r3410, 0;
	setp.ne.s32 	%p157, %r3409, 0;
	and.pred  	%p158, %p156, %p157;
	@%p158 bra 	$L__BB0_85;
$L__BB0_86:                             // %__internal_fmodf_slowpath_mod.exit.i.i2520
	setp.gt.u32 	%p159, %r51, 2139095039;
	selp.f32 	%f518, 0f7FFFFFFF, 0f4B800000, %p159;
	mul.f32 	%f519, %f725, 0f34000000;
	mul.f32 	%f726, %f518, %f519;
	bra.uni 	$L__BB0_87;
$L__BB0_77:                             // %__nv_fast_fdividef.exit.i.i.i2497
	div.approx.f32 	%f502, %f726, %f703;
	cvt.rzi.f32.f32 	%f724, %f502;
	fma.rn.f32 	%f80, %f724, 0fC0000000, %f726;
	mov.b32 	%r50, %f80;
	setp.lt.u32 	%p150, %r50, 1073741824;
	@%p150 bra 	$L__BB0_82;
// %bb.78:
	setp.lt.u32 	%p151, %r50, -2147483647;
	@%p151 bra 	$L__BB0_80;
// %bb.79:
	add.f32 	%f507, %f724, 0fBF800000;
	setp.lt.f32 	%p154, %f80, 0fC0000000;
	add.f32 	%f508, %f507, 0fBF800000;
	selp.f32 	%f724, %f508, %f507, %p154;
	bra.uni 	$L__BB0_82;
$L__BB0_80:
	add.f32 	%f724, %f724, 0f3F800000;
	setp.ltu.f32 	%p152, %f80, 0f40800000;
	@%p152 bra 	$L__BB0_82;
// %bb.81:                              // %__nv_fmaf_rn.exit.i.i.i2501
	add.f32 	%f503, %f724, 0f3F800000;
	fma.rn.f32 	%f505, %f703, 0fC0400000, %f80;
	setp.ge.f32 	%p153, %f505, 0f00000000;
	add.f32 	%f506, %f503, 0f3F800000;
	selp.f32 	%f724, %f506, %f503, %p153;
$L__BB0_82:                             // %__internal_fmodf_fastpath_quot.exit.i.i2504
	fma.rn.f32 	%f726, %f724, 0fC0000000, %f726;
$L__BB0_87:                             // %__internal_fmodf_kernel.exit.i2523
	abs.f32 	%f520, %f726;
	setp.gtu.f32 	%p160, %f520, 0f7F800000;
	@%p160 bra 	$L__BB0_89;
// %bb.88:
	mov.b32 	%r407, %f726;
	or.b32  	%r408, %r16, %r407;
	mov.b32 	%f726, %r408;
$L__BB0_89:                             // %__nv_fmodf.exit2524
	@%p67 bra 	$L__BB0_101;
// %bb.90:
	@%p306 bra 	$L__BB0_97;
	bra.uni 	$L__BB0_91;
$L__BB0_97:
	mov.b32 	%r59, %f730;
	and.b32  	%r417, %r59, 8388607;
	or.b32  	%r3411, %r417, 1065353216;
	mov.b32 	%f729, %r3411;
	add.s32 	%r418, %r59, -1073741824;
	and.b32  	%r3412, %r418, -8388608;
	setp.eq.s32 	%p175, %r3412, 0;
	@%p175 bra 	$L__BB0_100;
// %bb.98:                              // %__nv_fmaf_rn.exit4.i.i.i2549.preheader
	mov.f32 	%f560, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f559,%f560;
	// end inline asm
$L__BB0_99:                             // %__nv_fmaf_rn.exit4.i.i.i2549
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r419, %r3412, 192937984;
	add.s32 	%r420, %r3411, %r419;
	mov.b32 	%f561, %r420;
	mul.f32 	%f562, %f559, %f561;
	sub.f32 	%f563, %f561, %f562;
	fma.rn.f32 	%f564, %f563, %f559, %f562;
	sub.f32 	%f565, %f561, %f564;
	fma.rz.f32 	%f566, %f565, %f559, %f564;
	cvt.rzi.f32.f32 	%f567, %f566;
	sub.f32 	%f729, %f561, %f567;
	sub.s32 	%r3412, %r3412, %r419;
	mov.b32 	%r3411, %f729;
	setp.ne.s32 	%p176, %r3412, 0;
	setp.ne.s32 	%p177, %r3411, 0;
	and.pred  	%p178, %p176, %p177;
	@%p178 bra 	$L__BB0_99;
$L__BB0_100:                            // %__internal_fmodf_slowpath_mod.exit.i.i2551
	setp.gt.u32 	%p179, %r59, 2139095039;
	selp.f32 	%f568, 0f7FFFFFFF, 0f4B800000, %p179;
	mul.f32 	%f569, %f729, 0f34000000;
	mul.f32 	%f730, %f568, %f569;
	bra.uni 	$L__BB0_101;
$L__BB0_91:                             // %__nv_fast_fdividef.exit.i.i.i2528
	div.approx.f32 	%f552, %f730, %f703;
	cvt.rzi.f32.f32 	%f728, %f552;
	fma.rn.f32 	%f97, %f728, 0fC0000000, %f730;
	mov.b32 	%r58, %f97;
	setp.lt.u32 	%p170, %r58, 1073741824;
	@%p170 bra 	$L__BB0_96;
// %bb.92:
	setp.lt.u32 	%p171, %r58, -2147483647;
	@%p171 bra 	$L__BB0_94;
// %bb.93:
	add.f32 	%f557, %f728, 0fBF800000;
	setp.lt.f32 	%p174, %f97, 0fC0000000;
	add.f32 	%f558, %f557, 0fBF800000;
	selp.f32 	%f728, %f558, %f557, %p174;
	bra.uni 	$L__BB0_96;
$L__BB0_94:
	add.f32 	%f728, %f728, 0f3F800000;
	setp.ltu.f32 	%p172, %f97, 0f40800000;
	@%p172 bra 	$L__BB0_96;
// %bb.95:                              // %__nv_fmaf_rn.exit.i.i.i2532
	add.f32 	%f553, %f728, 0f3F800000;
	fma.rn.f32 	%f555, %f703, 0fC0400000, %f97;
	setp.ge.f32 	%p173, %f555, 0f00000000;
	add.f32 	%f556, %f553, 0f3F800000;
	selp.f32 	%f728, %f556, %f553, %p173;
$L__BB0_96:                             // %__internal_fmodf_fastpath_quot.exit.i.i2535
	fma.rn.f32 	%f730, %f728, 0fC0000000, %f730;
$L__BB0_101:                            // %__internal_fmodf_kernel.exit.i2554
	abs.f32 	%f570, %f730;
	setp.gtu.f32 	%p180, %f570, 0f7F800000;
	@%p180 bra 	$L__BB0_103;
// %bb.102:
	mov.b32 	%r421, %f730;
	or.b32  	%r422, %r25, %r421;
	mov.b32 	%f730, %r422;
$L__BB0_103:                            // %__nv_fmodf.exit2555
	@%p87 bra 	$L__BB0_115;
// %bb.104:
	@%p307 bra 	$L__BB0_111;
	bra.uni 	$L__BB0_105;
$L__BB0_111:
	mov.b32 	%r69, %f734;
	and.b32  	%r437, %r69, 8388607;
	or.b32  	%r3413, %r437, 1065353216;
	mov.b32 	%f733, %r3413;
	add.s32 	%r438, %r69, -1073741824;
	and.b32  	%r3414, %r438, -8388608;
	setp.eq.s32 	%p195, %r3414, 0;
	@%p195 bra 	$L__BB0_114;
// %bb.112:                             // %__nv_fmaf_rn.exit4.i.i.i2580.preheader
	mov.f32 	%f612, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f611,%f612;
	// end inline asm
$L__BB0_113:                            // %__nv_fmaf_rn.exit4.i.i.i2580
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r439, %r3414, 192937984;
	add.s32 	%r440, %r3413, %r439;
	mov.b32 	%f613, %r440;
	mul.f32 	%f614, %f611, %f613;
	sub.f32 	%f615, %f613, %f614;
	fma.rn.f32 	%f616, %f615, %f611, %f614;
	sub.f32 	%f617, %f613, %f616;
	fma.rz.f32 	%f618, %f617, %f611, %f616;
	cvt.rzi.f32.f32 	%f619, %f618;
	sub.f32 	%f733, %f613, %f619;
	sub.s32 	%r3414, %r3414, %r439;
	mov.b32 	%r3413, %f733;
	setp.ne.s32 	%p196, %r3414, 0;
	setp.ne.s32 	%p197, %r3413, 0;
	and.pred  	%p198, %p196, %p197;
	@%p198 bra 	$L__BB0_113;
$L__BB0_114:                            // %__internal_fmodf_slowpath_mod.exit.i.i2582
	setp.gt.u32 	%p199, %r69, 2139095039;
	selp.f32 	%f620, 0f7FFFFFFF, 0f4B800000, %p199;
	mul.f32 	%f621, %f733, 0f34000000;
	mul.f32 	%f734, %f620, %f621;
	bra.uni 	$L__BB0_115;
$L__BB0_105:                            // %__nv_fast_fdividef.exit.i.i.i2559
	div.approx.f32 	%f604, %f734, %f703;
	cvt.rzi.f32.f32 	%f732, %f604;
	fma.rn.f32 	%f112, %f732, 0fC0000000, %f734;
	mov.b32 	%r68, %f112;
	setp.lt.u32 	%p190, %r68, 1073741824;
	@%p190 bra 	$L__BB0_110;
// %bb.106:
	setp.lt.u32 	%p191, %r68, -2147483647;
	@%p191 bra 	$L__BB0_108;
// %bb.107:
	add.f32 	%f609, %f732, 0fBF800000;
	setp.lt.f32 	%p194, %f112, 0fC0000000;
	add.f32 	%f610, %f609, 0fBF800000;
	selp.f32 	%f732, %f610, %f609, %p194;
	bra.uni 	$L__BB0_110;
$L__BB0_108:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p192, %f112, 0f40800000;
	@%p192 bra 	$L__BB0_110;
// %bb.109:                             // %__nv_fmaf_rn.exit.i.i.i2563
	add.f32 	%f605, %f732, 0f3F800000;
	fma.rn.f32 	%f607, %f703, 0fC0400000, %f112;
	setp.ge.f32 	%p193, %f607, 0f00000000;
	add.f32 	%f608, %f605, 0f3F800000;
	selp.f32 	%f732, %f608, %f605, %p193;
$L__BB0_110:                            // %__internal_fmodf_fastpath_quot.exit.i.i2566
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_115:                            // %__internal_fmodf_kernel.exit.i2585
	abs.f32 	%f622, %f734;
	setp.gtu.f32 	%p200, %f622, 0f7F800000;
	@%p200 bra 	$L__BB0_117;
// %bb.116:
	mov.b32 	%r441, %f734;
	or.b32  	%r442, %r37, %r441;
	mov.b32 	%f734, %r442;
$L__BB0_117:                            // %__nv_fmodf.exit2586
	add.f32 	%f623, %f734, %f734;
	mov.b32 	%r443, %f623;
	and.b32  	%r444, %r443, -2147483648;
	or.b32  	%r445, %r444, 1056964608;
	mov.b32 	%f624, %r445;
	add.f32 	%f625, %f623, %f624;
	cvt.rzi.f32.f32 	%f626, %f625;
	abs.f32 	%f627, %f623;
	setp.gt.f32 	%p202, %f627, 0f4B000000;
	selp.f32 	%f628, %f623, %f626, %p202;
	cvt.rzi.f32.f32 	%f629, %f623;
	setp.lt.f32 	%p203, %f627, 0f3F000000;
	selp.f32 	%f630, %f629, %f628, %p203;
	cvt.rzi.s32.f32 	%r446, %f630;
	fma.rn.f32 	%f631, %f630, 0fBF000000, %f734;
	mul.f32 	%f632, %f631, %f631;
	fma.rn.f32 	%f633, %f632, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f634, %f632, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f635, %f633, %f632, 0fC0A55DF6;
	fma.rn.f32 	%f636, %f634, %f632, 0f4081E0CF;
	fma.rn.f32 	%f637, %f632, %f631, 0f00000000;
	fma.rn.f32 	%f638, %f636, %f632, 0fC09DE9E6;
	fma.rn.f32 	%f639, %f635, %f637, 0f00000000;
	fma.rn.f32 	%f640, %f638, %f632, 0f3F800000;
	fma.rn.f32 	%f641, %f631, 0f40490FDB, %f639;
	and.b32  	%r447, %r446, 1;
	setp.eq.b32 	%p204, %r447, 1;
	selp.f32 	%f642, %f640, %f641, %p204;
	selp.f32 	%f643, %f641, %f640, %p204;
	and.b32  	%r448, %r446, 2;
	setp.eq.s32 	%p205, %r448, 0;
	neg.f32 	%f644, %f642;
	selp.f32 	%f645, %f642, %f644, %p205;
	add.s32 	%r449, %r446, 1;
	and.b32  	%r450, %r449, 2;
	setp.eq.s32 	%p206, %r450, 0;
	sub.f32 	%f647, %f230, %f643;
	cvt.rzi.f32.f32 	%f649, %f734;
	setp.eq.f32 	%p207, %f649, %f734;
	mul.f32 	%f650, %f734, 0f00000000;
	selp.f32 	%f148, %f650, %f645, %p207;
	abs.f32 	%f651, %f734;
	@%p107 bra 	$L__BB0_129;
// %bb.118:
	@%p308 bra 	$L__BB0_125;
	bra.uni 	$L__BB0_119;
$L__BB0_125:
	mov.b32 	%r77, %f738;
	and.b32  	%r451, %r77, 8388607;
	or.b32  	%r3415, %r451, 1065353216;
	mov.b32 	%f737, %r3415;
	add.s32 	%r452, %r77, -1073741824;
	and.b32  	%r3416, %r452, -8388608;
	setp.eq.s32 	%p215, %r3416, 0;
	@%p215 bra 	$L__BB0_128;
// %bb.126:                             // %__nv_fmaf_rn.exit4.i.i.i2611.preheader
	mov.f32 	%f662, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f661,%f662;
	// end inline asm
$L__BB0_127:                            // %__nv_fmaf_rn.exit4.i.i.i2611
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r453, %r3416, 192937984;
	add.s32 	%r454, %r3415, %r453;
	mov.b32 	%f663, %r454;
	mul.f32 	%f664, %f661, %f663;
	sub.f32 	%f665, %f663, %f664;
	fma.rn.f32 	%f666, %f665, %f661, %f664;
	sub.f32 	%f667, %f663, %f666;
	fma.rz.f32 	%f668, %f667, %f661, %f666;
	cvt.rzi.f32.f32 	%f669, %f668;
	sub.f32 	%f737, %f663, %f669;
	sub.s32 	%r3416, %r3416, %r453;
	mov.b32 	%r3415, %f737;
	setp.ne.s32 	%p216, %r3416, 0;
	setp.ne.s32 	%p217, %r3415, 0;
	and.pred  	%p218, %p216, %p217;
	@%p218 bra 	$L__BB0_127;
$L__BB0_128:                            // %__internal_fmodf_slowpath_mod.exit.i.i2613
	setp.gt.u32 	%p219, %r77, 2139095039;
	selp.f32 	%f670, 0f7FFFFFFF, 0f4B800000, %p219;
	mul.f32 	%f671, %f737, 0f34000000;
	mul.f32 	%f738, %f670, %f671;
	bra.uni 	$L__BB0_129;
$L__BB0_119:                            // %__nv_fast_fdividef.exit.i.i.i2590
	div.approx.f32 	%f654, %f738, %f703;
	cvt.rzi.f32.f32 	%f736, %f654;
	fma.rn.f32 	%f129, %f736, 0fC0000000, %f738;
	mov.b32 	%r76, %f129;
	setp.lt.u32 	%p210, %r76, 1073741824;
	@%p210 bra 	$L__BB0_124;
// %bb.120:
	setp.lt.u32 	%p211, %r76, -2147483647;
	@%p211 bra 	$L__BB0_122;
// %bb.121:
	add.f32 	%f659, %f736, 0fBF800000;
	setp.lt.f32 	%p214, %f129, 0fC0000000;
	add.f32 	%f660, %f659, 0fBF800000;
	selp.f32 	%f736, %f660, %f659, %p214;
	bra.uni 	$L__BB0_124;
$L__BB0_122:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p212, %f129, 0f40800000;
	@%p212 bra 	$L__BB0_124;
// %bb.123:                             // %__nv_fmaf_rn.exit.i.i.i2594
	add.f32 	%f655, %f736, 0f3F800000;
	fma.rn.f32 	%f657, %f703, 0fC0400000, %f129;
	setp.ge.f32 	%p213, %f657, 0f00000000;
	add.f32 	%f658, %f655, 0f3F800000;
	selp.f32 	%f736, %f658, %f655, %p213;
$L__BB0_124:                            // %__internal_fmodf_fastpath_quot.exit.i.i2597
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_129:                            // %__internal_fmodf_kernel.exit.i2616
	selp.f32 	%f648, %f643, %f647, %p206;
	setp.gt.f32 	%p208, %f651, 0f4B800000;
	add.f32 	%f652, %f148, 0f3F800000;
	abs.f32 	%f672, %f738;
	setp.gtu.f32 	%p220, %f672, 0f7F800000;
	@%p220 bra 	$L__BB0_131;
// %bb.130:
	mov.b32 	%r455, %f738;
	or.b32  	%r456, %r46, %r455;
	mov.b32 	%f738, %r456;
$L__BB0_131:                            // %__nv_fmodf.exit2617
	selp.f32 	%f127, %f652, %f648, %p208;
	add.f32 	%f673, %f738, %f738;
	mov.b32 	%r457, %f673;
	and.b32  	%r458, %r457, -2147483648;
	or.b32  	%r459, %r458, 1056964608;
	mov.b32 	%f674, %r459;
	add.f32 	%f675, %f673, %f674;
	cvt.rzi.f32.f32 	%f676, %f675;
	abs.f32 	%f677, %f673;
	setp.gt.f32 	%p222, %f677, 0f4B000000;
	selp.f32 	%f678, %f673, %f676, %p222;
	cvt.rzi.f32.f32 	%f679, %f673;
	setp.lt.f32 	%p223, %f677, 0f3F000000;
	selp.f32 	%f680, %f679, %f678, %p223;
	cvt.rzi.s32.f32 	%r460, %f680;
	fma.rn.f32 	%f681, %f680, 0fBF000000, %f738;
	mul.f32 	%f682, %f681, %f681;
	fma.rn.f32 	%f683, %f682, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f684, %f682, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f685, %f683, %f682, 0fC0A55DF6;
	fma.rn.f32 	%f686, %f684, %f682, 0f4081E0CF;
	fma.rn.f32 	%f687, %f682, %f681, 0f00000000;
	fma.rn.f32 	%f688, %f686, %f682, 0fC09DE9E6;
	fma.rn.f32 	%f689, %f685, %f687, 0f00000000;
	fma.rn.f32 	%f690, %f688, %f682, 0f3F800000;
	fma.rn.f32 	%f691, %f681, 0f40490FDB, %f689;
	and.b32  	%r461, %r460, 1;
	setp.eq.b32 	%p224, %r461, 1;
	selp.f32 	%f692, %f690, %f691, %p224;
	selp.f32 	%f693, %f691, %f690, %p224;
	and.b32  	%r462, %r460, 2;
	setp.eq.s32 	%p225, %r462, 0;
	neg.f32 	%f694, %f692;
	selp.f32 	%f695, %f692, %f694, %p225;
	add.s32 	%r463, %r460, 1;
	and.b32  	%r464, %r463, 2;
	setp.eq.s32 	%p226, %r464, 0;
	sub.f32 	%f697, %f230, %f693;
	selp.f32 	%f698, %f693, %f697, %p226;
	cvt.rzi.f32.f32 	%f699, %f738;
	setp.eq.f32 	%p227, %f699, %f738;
	mul.f32 	%f700, %f738, 0f00000000;
	selp.f32 	%f150, %f700, %f695, %p227;
	abs.f32 	%f701, %f738;
	setp.gt.f32 	%p228, %f701, 0f4B800000;
	add.f32 	%f702, %f150, 0f3F800000;
	selp.f32 	%f144, %f702, %f698, %p228;
	mov.f32 	%f147, %f127;
	mov.f32 	%f149, %f144;
	@%p127 bra 	$L__BB0_133;
// %bb.132:                             // %L975
	neg.f32 	%f149, %f150;
	neg.f32 	%f147, %f148;
	mov.f32 	%f148, %f127;
	mov.f32 	%f150, %f144;
$L__BB0_133:                            // %L977
	setp.gt.u32 	%p229, %r3, 15;
	mov.u32 	%r171, 999999999;
	@%p229 bra 	$L__BB0_187;
// %bb.134:                             // %L1007
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	shl.b32 	%r472, %r3, 4;
	and.b32  	%r473, %r472, 240;
	or.b32  	%r474, %r473, %r1;
	mul.wide.u32 	%rd91, %r474, 4;
	add.s64 	%rd92, %rd1, %rd91;
	ld.global.u32 	%r475, [%rd92];
	shl.b32 	%r476, %r475, 16;
	cvt.s32.s16 	%r86, %r475;
	shr.s32 	%r87, %r475, 16;
	or.b32  	%r477, %r476, 65535;
	setp.lt.u32 	%p230, %r477, 1114111;
	setp.lt.u32 	%p231, %r475, 1048576;
	and.pred  	%p232, %p230, %p231;
	@%p232 bra 	$L__BB0_186;
	bra.uni 	$L__BB0_135;
$L__BB0_186:                            // %L1247
	mul.lo.s32 	%r481, %r87, 546;
	mad.lo.s32 	%r171, %r86, 33, %r481;
$L__BB0_187:                            // %pass527
	add.f32 	%f207, %f746, %f746;
	mov.b32 	%r298, %f207;
	add.f32 	%f469, %f750, %f750;
	and.b32  	%r299, %r298, -2147483648;
	add.f32 	%f261, %f706, %f706;
	add.f32 	%f313, %f710, %f710;
	mov.b32 	%r395, %f469;
	or.b32  	%r300, %r299, 1056964608;
	mov.b32 	%r314, %f261;
	mov.b32 	%r336, %f313;
	and.b32  	%r396, %r395, -2147483648;
	add.f32 	%f521, %f726, %f726;
	add.f32 	%f571, %f730, %f730;
	mov.b32 	%f208, %r300;
	and.b32  	%r315, %r314, -2147483648;
	and.b32  	%r337, %r336, -2147483648;
	or.b32  	%r397, %r396, 1056964608;
	mov.b32 	%r409, %f521;
	mov.b32 	%r429, %f571;
	add.f32 	%f209, %f207, %f208;
	abs.f32 	%f211, %f207;
	or.b32  	%r316, %r315, 1056964608;
	or.b32  	%r338, %r337, 1056964608;
	mov.b32 	%f470, %r397;
	and.b32  	%r410, %r409, -2147483648;
	and.b32  	%r430, %r429, -2147483648;
	cvt.rzi.f32.f32 	%f210, %f209;
	setp.gt.f32 	%p40, %f211, 0f4B000000;
	mov.b32 	%f262, %r316;
	mov.b32 	%f314, %r338;
	add.f32 	%f471, %f469, %f470;
	abs.f32 	%f473, %f469;
	or.b32  	%r411, %r410, 1056964608;
	or.b32  	%r431, %r430, 1056964608;
	selp.f32 	%f212, %f207, %f210, %p40;
	cvt.rzi.f32.f32 	%f213, %f207;
	setp.lt.f32 	%p41, %f211, 0f3F000000;
	add.f32 	%f263, %f261, %f262;
	abs.f32 	%f265, %f261;
	add.f32 	%f315, %f313, %f314;
	abs.f32 	%f317, %f313;
	cvt.rzi.f32.f32 	%f472, %f471;
	setp.gt.f32 	%p142, %f473, 0f4B000000;
	mov.b32 	%f522, %r411;
	mov.b32 	%f572, %r431;
	selp.f32 	%f214, %f213, %f212, %p41;
	cvt.rzi.f32.f32 	%f264, %f263;
	setp.gt.f32 	%p60, %f265, 0f4B000000;
	cvt.rzi.f32.f32 	%f316, %f315;
	setp.gt.f32 	%p80, %f317, 0f4B000000;
	selp.f32 	%f474, %f469, %f472, %p142;
	cvt.rzi.f32.f32 	%f475, %f469;
	setp.lt.f32 	%p143, %f473, 0f3F000000;
	add.f32 	%f523, %f521, %f522;
	abs.f32 	%f525, %f521;
	add.f32 	%f573, %f571, %f572;
	abs.f32 	%f575, %f571;
	fma.rn.f32 	%f215, %f214, 0fBF000000, %f746;
	selp.f32 	%f266, %f261, %f264, %p60;
	cvt.rzi.f32.f32 	%f267, %f261;
	setp.lt.f32 	%p61, %f265, 0f3F000000;
	selp.f32 	%f318, %f313, %f316, %p80;
	cvt.rzi.f32.f32 	%f319, %f313;
	setp.lt.f32 	%p81, %f317, 0f3F000000;
	selp.f32 	%f476, %f475, %f474, %p143;
	cvt.rzi.f32.f32 	%f524, %f523;
	setp.gt.f32 	%p162, %f525, 0f4B000000;
	cvt.rzi.f32.f32 	%f574, %f573;
	setp.gt.f32 	%p182, %f575, 0f4B000000;
	mul.f32 	%f216, %f215, %f215;
	selp.f32 	%f268, %f267, %f266, %p61;
	selp.f32 	%f320, %f319, %f318, %p81;
	fma.rn.f32 	%f477, %f476, 0fBF000000, %f750;
	selp.f32 	%f526, %f521, %f524, %p162;
	cvt.rzi.f32.f32 	%f527, %f521;
	setp.lt.f32 	%p163, %f525, 0f3F000000;
	selp.f32 	%f576, %f571, %f574, %p182;
	cvt.rzi.f32.f32 	%f577, %f571;
	setp.lt.f32 	%p183, %f575, 0f3F000000;
	fma.rn.f32 	%f217, %f216, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f218, %f216, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f269, %f268, 0fBF000000, %f706;
	fma.rn.f32 	%f321, %f320, 0fBF000000, %f710;
	mul.f32 	%f478, %f477, %f477;
	selp.f32 	%f528, %f527, %f526, %p163;
	selp.f32 	%f578, %f577, %f576, %p183;
	cvt.rzi.s32.f32 	%r301, %f214;
	fma.rn.f32 	%f219, %f217, %f216, 0fC0A55DF6;
	fma.rn.f32 	%f220, %f218, %f216, 0f4081E0CF;
	fma.rn.f32 	%f221, %f216, %f215, 0f00000000;
	mul.f32 	%f270, %f269, %f269;
	mul.f32 	%f322, %f321, %f321;
	fma.rn.f32 	%f479, %f478, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f480, %f478, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f529, %f528, 0fBF000000, %f726;
	fma.rn.f32 	%f579, %f578, 0fBF000000, %f730;
	fma.rn.f32 	%f222, %f220, %f216, 0fC09DE9E6;
	fma.rn.f32 	%f223, %f219, %f221, 0f00000000;
	and.b32  	%r302, %r301, 1;
	fma.rn.f32 	%f271, %f270, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f272, %f270, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f323, %f322, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f324, %f322, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r398, %f476;
	fma.rn.f32 	%f481, %f479, %f478, 0fC0A55DF6;
	fma.rn.f32 	%f482, %f480, %f478, 0f4081E0CF;
	fma.rn.f32 	%f483, %f478, %f477, 0f00000000;
	mul.f32 	%f530, %f529, %f529;
	mul.f32 	%f580, %f579, %f579;
	fma.rn.f32 	%f224, %f222, %f216, 0f3F800000;
	fma.rn.f32 	%f225, %f215, 0f40490FDB, %f223;
	setp.eq.b32 	%p42, %r302, 1;
	cvt.rzi.s32.f32 	%r317, %f268;
	fma.rn.f32 	%f273, %f271, %f270, 0fC0A55DF6;
	fma.rn.f32 	%f274, %f272, %f270, 0f4081E0CF;
	fma.rn.f32 	%f275, %f270, %f269, 0f00000000;
	cvt.rzi.s32.f32 	%r339, %f320;
	fma.rn.f32 	%f325, %f323, %f322, 0fC0A55DF6;
	fma.rn.f32 	%f326, %f324, %f322, 0f4081E0CF;
	fma.rn.f32 	%f327, %f322, %f321, 0f00000000;
	fma.rn.f32 	%f484, %f482, %f478, 0fC09DE9E6;
	fma.rn.f32 	%f485, %f481, %f483, 0f00000000;
	and.b32  	%r399, %r398, 1;
	fma.rn.f32 	%f531, %f530, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f532, %f530, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f581, %f580, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f582, %f580, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f226, %f224, %f225, %p42;
	and.b32  	%r303, %r301, 2;
	fma.rn.f32 	%f276, %f274, %f270, 0fC09DE9E6;
	fma.rn.f32 	%f277, %f273, %f275, 0f00000000;
	and.b32  	%r318, %r317, 1;
	fma.rn.f32 	%f328, %f326, %f322, 0fC09DE9E6;
	fma.rn.f32 	%f329, %f325, %f327, 0f00000000;
	and.b32  	%r340, %r339, 1;
	fma.rn.f32 	%f486, %f484, %f478, 0f3F800000;
	fma.rn.f32 	%f487, %f477, 0f40490FDB, %f485;
	setp.eq.b32 	%p144, %r399, 1;
	cvt.rzi.s32.f32 	%r412, %f528;
	fma.rn.f32 	%f533, %f531, %f530, 0fC0A55DF6;
	fma.rn.f32 	%f534, %f532, %f530, 0f4081E0CF;
	fma.rn.f32 	%f535, %f530, %f529, 0f00000000;
	cvt.rzi.s32.f32 	%r432, %f578;
	fma.rn.f32 	%f583, %f581, %f580, 0fC0A55DF6;
	fma.rn.f32 	%f584, %f582, %f580, 0f4081E0CF;
	fma.rn.f32 	%f585, %f580, %f579, 0f00000000;
	setp.eq.s32 	%p43, %r303, 0;
	neg.f32 	%f228, %f226;
	add.s32 	%r304, %r301, 1;
	cvt.rzi.f32.f32 	%f233, %f746;
	fma.rn.f32 	%f278, %f276, %f270, 0f3F800000;
	fma.rn.f32 	%f279, %f269, 0f40490FDB, %f277;
	setp.eq.b32 	%p62, %r318, 1;
	fma.rn.f32 	%f330, %f328, %f322, 0f3F800000;
	fma.rn.f32 	%f331, %f321, 0f40490FDB, %f329;
	setp.eq.b32 	%p82, %r340, 1;
	selp.f32 	%f488, %f486, %f487, %p144;
	and.b32  	%r400, %r398, 2;
	fma.rn.f32 	%f536, %f534, %f530, 0fC09DE9E6;
	fma.rn.f32 	%f537, %f533, %f535, 0f00000000;
	and.b32  	%r413, %r412, 1;
	fma.rn.f32 	%f586, %f584, %f580, 0fC09DE9E6;
	fma.rn.f32 	%f587, %f583, %f585, 0f00000000;
	and.b32  	%r433, %r432, 1;
	selp.f32 	%f227, %f225, %f224, %p42;
	selp.f32 	%f229, %f226, %f228, %p43;
	and.b32  	%r305, %r304, 2;
	setp.eq.f32 	%p45, %f233, %f746;
	mul.f32 	%f234, %f746, 0f00000000;
	selp.f32 	%f280, %f278, %f279, %p62;
	and.b32  	%r319, %r317, 2;
	selp.f32 	%f332, %f330, %f331, %p82;
	and.b32  	%r341, %r339, 2;
	setp.eq.s32 	%p145, %r400, 0;
	neg.f32 	%f490, %f488;
	add.s32 	%r401, %r398, 1;
	cvt.rzi.f32.f32 	%f495, %f750;
	fma.rn.f32 	%f538, %f536, %f530, 0f3F800000;
	fma.rn.f32 	%f539, %f529, 0f40490FDB, %f537;
	setp.eq.b32 	%p164, %r413, 1;
	fma.rn.f32 	%f588, %f586, %f580, 0f3F800000;
	fma.rn.f32 	%f589, %f579, 0f40490FDB, %f587;
	setp.eq.b32 	%p184, %r433, 1;
	setp.eq.s32 	%p44, %r305, 0;
	sub.f32 	%f231, %f230, %f227;
	selp.f32 	%f235, %f234, %f229, %p45;
	abs.f32 	%f236, %f746;
	setp.eq.s32 	%p63, %r319, 0;
	neg.f32 	%f282, %f280;
	add.s32 	%r320, %r317, 1;
	cvt.rzi.f32.f32 	%f287, %f706;
	setp.eq.s32 	%p83, %r341, 0;
	neg.f32 	%f334, %f332;
	add.s32 	%r342, %r339, 1;
	cvt.rzi.f32.f32 	%f339, %f710;
	selp.f32 	%f489, %f487, %f486, %p144;
	selp.f32 	%f491, %f488, %f490, %p145;
	and.b32  	%r402, %r401, 2;
	setp.eq.f32 	%p147, %f495, %f750;
	mul.f32 	%f496, %f750, 0f00000000;
	selp.f32 	%f540, %f538, %f539, %p164;
	and.b32  	%r414, %r412, 2;
	selp.f32 	%f590, %f588, %f589, %p184;
	and.b32  	%r434, %r432, 2;
	selp.f32 	%f232, %f227, %f231, %p44;
	setp.gt.f32 	%p46, %f236, 0f4B800000;
	add.f32 	%f237, %f235, 0f3F800000;
	selp.f32 	%f281, %f279, %f278, %p62;
	selp.f32 	%f283, %f280, %f282, %p63;
	and.b32  	%r321, %r320, 2;
	setp.eq.f32 	%p65, %f287, %f706;
	mul.f32 	%f288, %f706, 0f00000000;
	selp.f32 	%f333, %f331, %f330, %p82;
	selp.f32 	%f335, %f332, %f334, %p83;
	and.b32  	%r343, %r342, 2;
	setp.eq.f32 	%p85, %f339, %f710;
	mul.f32 	%f340, %f710, 0f00000000;
	setp.eq.s32 	%p146, %r402, 0;
	sub.f32 	%f493, %f230, %f489;
	selp.f32 	%f497, %f496, %f491, %p147;
	abs.f32 	%f498, %f750;
	setp.eq.s32 	%p165, %r414, 0;
	neg.f32 	%f542, %f540;
	add.s32 	%r415, %r412, 1;
	cvt.rzi.f32.f32 	%f547, %f726;
	setp.eq.s32 	%p185, %r434, 0;
	neg.f32 	%f592, %f590;
	add.s32 	%r435, %r432, 1;
	cvt.rzi.f32.f32 	%f597, %f730;
	selp.f32 	%f238, %f237, %f232, %p46;
	setp.eq.s32 	%p64, %r321, 0;
	sub.f32 	%f285, %f230, %f281;
	selp.f32 	%f16, %f288, %f283, %p65;
	abs.f32 	%f289, %f706;
	setp.eq.s32 	%p84, %r343, 0;
	sub.f32 	%f337, %f230, %f333;
	selp.f32 	%f341, %f340, %f335, %p85;
	abs.f32 	%f342, %f710;
	selp.f32 	%f494, %f489, %f493, %p146;
	setp.gt.f32 	%p148, %f498, 0f4B800000;
	add.f32 	%f499, %f497, 0f3F800000;
	selp.f32 	%f541, %f539, %f538, %p164;
	selp.f32 	%f543, %f540, %f542, %p165;
	and.b32  	%r416, %r415, 2;
	setp.eq.f32 	%p167, %f547, %f726;
	mul.f32 	%f548, %f726, 0f00000000;
	selp.f32 	%f591, %f589, %f588, %p184;
	selp.f32 	%f593, %f590, %f592, %p185;
	and.b32  	%r436, %r435, 2;
	setp.eq.f32 	%p187, %f597, %f730;
	mul.f32 	%f598, %f730, 0f00000000;
	mov.b32 	%r294, %f238;
	mov.b32 	%r297, %f235;
	selp.f32 	%f286, %f281, %f285, %p64;
	setp.gt.f32 	%p66, %f289, 0f4B800000;
	add.f32 	%f290, %f16, 0f3F800000;
	selp.f32 	%f338, %f333, %f337, %p84;
	setp.gt.f32 	%p86, %f342, 0f4B800000;
	add.f32 	%f343, %f341, 0f3F800000;
	selp.f32 	%f500, %f499, %f494, %p148;
	setp.eq.s32 	%p166, %r416, 0;
	sub.f32 	%f545, %f230, %f541;
	selp.f32 	%f94, %f548, %f543, %p167;
	abs.f32 	%f549, %f726;
	setp.eq.s32 	%p186, %r436, 0;
	sub.f32 	%f595, %f230, %f591;
	selp.f32 	%f599, %f598, %f593, %p187;
	abs.f32 	%f600, %f730;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r293, %r297, -2147483648;
	selp.f32 	%f17, %f290, %f286, %p66;
	selp.f32 	%f344, %f343, %f338, %p86;
	mov.b32 	%r391, %f500;
	mov.b32 	%r394, %f497;
	selp.f32 	%f546, %f541, %f545, %p166;
	setp.gt.f32 	%p168, %f549, 0f4B800000;
	add.f32 	%f550, %f94, 0f3F800000;
	selp.f32 	%f596, %f591, %f595, %p186;
	setp.gt.f32 	%p188, %f600, 0f4B800000;
	add.f32 	%f601, %f599, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r292, %r294, %r293;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r295, %r297, %r294;
	// end inline asm
	mov.b32 	%r332, %f344;
	mov.b32 	%r331, %f17;
	mov.b32 	%r335, %f341;
	mov.b32 	%r334, %f16;
	mov.b32 	%r378, %f75;
	mov.b32 	%r379, %f77;
	mov.b32 	%r381, %f76;
	mov.b32 	%r382, %f78;
	xor.b32  	%r390, %r394, -2147483648;
	selp.f32 	%f95, %f550, %f546, %p168;
	selp.f32 	%f602, %f601, %f596, %p188;
	// begin inline asm
	cvt.rn.f16x2.f32 %r330, %r332, %r331;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r333, %r335, %r334;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r377, %r379, %r378;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r380, %r382, %r381;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r389, %r391, %r390;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r392, %r394, %r391;
	// end inline asm
	mov.b32 	%r425, %f602;
	mov.b32 	%r424, %f95;
	mov.b32 	%r428, %f599;
	mov.b32 	%r427, %f94;
	// begin inline asm
	cvt.rn.f16x2.f32 %r423, %r425, %r424;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r426, %r428, %r427;
	// end inline asm
	mov.b32 	%r466, %f147;
	mov.b32 	%r467, %f149;
	// begin inline asm
	cvt.rn.f16x2.f32 %r465, %r467, %r466;
	// end inline asm
	mov.b32 	%r469, %f148;
	mov.b32 	%r470, %f150;
	// begin inline asm
	cvt.rn.f16x2.f32 %r468, %r470, %r469;
	// end inline asm
	shl.b32 	%r483, %r3, 6;
	and.b32  	%r484, %r483, 192;
	and.b32  	%r485, %r147, 1;
	shr.u32 	%r486, %r3, 3;
	and.b32  	%r487, %r486, 2;
	or.b32  	%r488, %r485, %r487;
	shl.b32 	%r489, %r488, 4;
	bfe.u32 	%r490, %r3, 3, 1;
	shl.b32 	%r491, %r1, 1;
	and.b32  	%r492, %r491, 14;
	or.b32  	%r493, %r490, %r492;
	or.b32  	%r494, %r489, %r484;
	or.b32  	%r495, %r494, %r493;
	or.b32  	%r496, %r495, %r5;
	mul.wide.u32 	%rd98, %r496, 4;
	add.s64 	%rd99, %rd2, %rd98;
	ld.global.u32 	%r172, [%rd99];
	ld.global.u32 	%r173, [%rd99+1024];
	shl.b32 	%r497, %r262, 17;
	shl.b32 	%r498, %r266, 7;
	add.s32 	%r174, %r498, %r497;
	shl.b32 	%r499, %r3, 2;
	and.b32  	%r175, %r499, 60;
	and.b32  	%r176, %r499, 64;
	shl.b32 	%r177, %r4, 7;
	and.b32  	%r178, %r3, 16;
	shr.u32 	%r500, %r3, 4;
	and.b32  	%r501, %r159, 30;
	or.b32  	%r502, %r501, %r500;
	mul.lo.s32 	%r503, %r502, 257;
	and.b32  	%r504, %r2, 224;
	shr.u32 	%r505, %r1, 3;
	mad.lo.s32 	%r506, %r505, 257, %r504;
	or.b32  	%r507, %r505, 2;
	mad.lo.s32 	%r508, %r507, 257, %r504;
	or.b32  	%r509, %r505, 4;
	mad.lo.s32 	%r510, %r509, 257, %r504;
	or.b32  	%r511, %r505, 6;
	mad.lo.s32 	%r512, %r511, 257, %r504;
	or.b32  	%r513, %r505, 8;
	mad.lo.s32 	%r514, %r513, 257, %r504;
	or.b32  	%r515, %r505, 10;
	mad.lo.s32 	%r516, %r515, 257, %r504;
	or.b32  	%r517, %r505, 12;
	mad.lo.s32 	%r518, %r517, 257, %r504;
	or.b32  	%r519, %r505, 14;
	mad.lo.s32 	%r520, %r519, 257, %r504;
	or.b32  	%r521, %r505, 16;
	mad.lo.s32 	%r522, %r521, 257, %r504;
	or.b32  	%r523, %r505, 18;
	mad.lo.s32 	%r524, %r523, 257, %r504;
	or.b32  	%r525, %r505, 20;
	mad.lo.s32 	%r526, %r525, 257, %r504;
	or.b32  	%r527, %r505, 22;
	mad.lo.s32 	%r528, %r527, 257, %r504;
	or.b32  	%r529, %r505, 24;
	mad.lo.s32 	%r530, %r529, 257, %r504;
	or.b32  	%r531, %r505, 26;
	mad.lo.s32 	%r532, %r531, 257, %r504;
	or.b32  	%r533, %r505, 28;
	mad.lo.s32 	%r534, %r533, 257, %r504;
	or.b32  	%r535, %r505, 30;
	mad.lo.s32 	%r536, %r535, 257, %r504;
	mul.lo.s32 	%r537, %r146, 2184;
	mad.lo.s32 	%r538, %r488, 546, %r537;
	mad.lo.s32 	%r539, %r493, 33, %r538;
	setp.lt.u32 	%p234, %r3, 4;
	setp.eq.s32 	%p235, %r147, 4;
	setp.eq.s32 	%p236, %r147, 5;
	and.b32  	%r540, %r3, 1;
	neg.s32 	%r541, %r540;
	and.b32  	%r542, %r541, 2064;
	bfe.s32 	%r543, %r3, 3, 1;
	and.b32  	%r544, %r3, 8;
	setp.eq.s32 	%p237, %r544, 0;
	and.b32  	%r545, %r543, 258;
	selp.b32 	%r546, 0, 1032, %p127;
	bfe.s32 	%r547, %r3, 2, 1;
	and.b32  	%r548, %r547, 516;
	or.b32  	%r549, %r492, %r500;
	or.b32  	%r550, %r545, %r542;
	or.b32  	%r551, %r550, %r546;
	or.b32  	%r552, %r551, %r548;
	add.s32 	%r179, %r552, %r549;
	and.b32  	%r553, %r1, 1;
	neg.s32 	%r554, %r553;
	and.b32  	%r555, %r554, 2064;
	and.b32  	%r556, %r499, 12;
	mul.lo.s32 	%r557, %r505, 258;
	bfe.s32 	%r558, %r1, 1, 1;
	and.b32  	%r559, %r1, 2;
	setp.eq.s32 	%p238, %r559, 0;
	and.b32  	%r560, %r558, 1032;
	bfe.s32 	%r561, %r1, 2, 1;
	and.b32  	%r562, %r1, 4;
	setp.eq.s32 	%p239, %r562, 0;
	and.b32  	%r563, %r561, 516;
	and.b32  	%r564, %r543, 4144;
	or.b32  	%r565, %r555, %r488;
	add.s32 	%r566, %r557, %r556;
	add.s32 	%r567, %r566, %r560;
	add.s32 	%r568, %r567, %r563;
	add.s32 	%r569, %r568, %r564;
	add.s32 	%r570, %r569, %r565;
	mul.wide.u32 	%rd100, %r570, 4;
	mov.u64 	%rd101, shmem;
	add.s64 	%rd16, %rd101, %rd100;
	cvt.u64.u32 	%rd102, %r565;
	selp.b64 	%rd103, 0, 4144, %p237;
	selp.b64 	%rd104, 0, 516, %p239;
	selp.b64 	%rd105, 0, 1032, %p238;
	cvt.u64.u32 	%rd106, %r557;
	cvt.u64.u32 	%rd107, %r556;
	add.s64 	%rd108, %rd107, %rd106;
	add.s64 	%rd109, %rd108, %rd105;
	add.s64 	%rd110, %rd109, %rd104;
	add.s64 	%rd111, %rd110, %rd103;
	add.s64 	%rd112, %rd111, %rd102;
	shl.b64 	%rd113, %rd112, 2;
	add.s64 	%rd17, %rd101, %rd113;
	add.s32 	%r571, %r566, %r555;
	add.s32 	%r572, %r571, %r488;
	add.s32 	%r573, %r572, %r560;
	add.s32 	%r574, %r573, %r563;
	add.s32 	%r575, %r574, %r564;
	shl.b32 	%r576, %r264, 20;
	shl.b32 	%r577, %r268, 9;
	add.s32 	%r578, %r577, %r576;
	and.b32  	%r579, %r3, 15;
	or.b32  	%r580, %r2, %r178;
	or.b32  	%r581, %r579, %r5;
	or.b32  	%r180, %r581, %r580;
	cvt.s64.s32 	%rd18, %r578;
	add.s32 	%r582, %r1, %r503;
	mul.wide.u32 	%rd114, %r582, 4;
	add.s64 	%rd19, %rd101, %rd114;
	cvt.u64.u32 	%rd115, %r1;
	cvt.u64.u32 	%rd20, %r503;
	add.s64 	%rd116, %rd20, %rd115;
	shl.b64 	%rd117, %rd116, 2;
	add.s64 	%rd21, %rd101, %rd117;
	add.s32 	%r583, %r506, %r3;
	mul.wide.u32 	%rd118, %r583, 4;
	add.s64 	%rd22, %rd101, %rd118;
	add.s32 	%r584, %r508, %r3;
	mul.wide.u32 	%rd119, %r584, 4;
	add.s64 	%rd23, %rd101, %rd119;
	add.s32 	%r585, %r510, %r3;
	mul.wide.u32 	%rd120, %r585, 4;
	add.s64 	%rd24, %rd101, %rd120;
	add.s32 	%r586, %r512, %r3;
	mul.wide.u32 	%rd121, %r586, 4;
	add.s64 	%rd25, %rd101, %rd121;
	add.s32 	%r587, %r514, %r3;
	mul.wide.u32 	%rd122, %r587, 4;
	add.s64 	%rd26, %rd101, %rd122;
	add.s32 	%r588, %r516, %r3;
	mul.wide.u32 	%rd123, %r588, 4;
	add.s64 	%rd27, %rd101, %rd123;
	add.s32 	%r589, %r518, %r3;
	mul.wide.u32 	%rd124, %r589, 4;
	add.s64 	%rd28, %rd101, %rd124;
	add.s32 	%r590, %r520, %r3;
	mul.wide.u32 	%rd125, %r590, 4;
	add.s64 	%rd29, %rd101, %rd125;
	add.s32 	%r591, %r522, %r3;
	mul.wide.u32 	%rd126, %r591, 4;
	add.s64 	%rd30, %rd101, %rd126;
	add.s32 	%r592, %r524, %r3;
	mul.wide.u32 	%rd127, %r592, 4;
	add.s64 	%rd31, %rd101, %rd127;
	add.s32 	%r593, %r526, %r3;
	mul.wide.u32 	%rd128, %r593, 4;
	add.s64 	%rd32, %rd101, %rd128;
	add.s32 	%r594, %r528, %r3;
	mul.wide.u32 	%rd129, %r594, 4;
	add.s64 	%rd33, %rd101, %rd129;
	add.s32 	%r595, %r530, %r3;
	mul.wide.u32 	%rd130, %r595, 4;
	add.s64 	%rd34, %rd101, %rd130;
	add.s32 	%r596, %r532, %r3;
	mul.wide.u32 	%rd131, %r596, 4;
	add.s64 	%rd35, %rd101, %rd131;
	add.s32 	%r597, %r534, %r3;
	mul.wide.u32 	%rd132, %r597, 4;
	add.s64 	%rd36, %rd101, %rd132;
	add.s32 	%r598, %r536, %r3;
	mul.wide.u32 	%rd133, %r598, 4;
	add.s64 	%rd37, %rd101, %rd133;
	add.s32 	%r599, %r539, %r505;
	mul.wide.u32 	%rd134, %r599, 4;
	add.s64 	%rd38, %rd101, %rd134;
	add.s32 	%r600, %r539, %r507;
	mul.wide.u32 	%rd135, %r600, 4;
	add.s64 	%rd39, %rd101, %rd135;
	add.s32 	%r601, %r539, %r509;
	mul.wide.u32 	%rd136, %r601, 4;
	add.s64 	%rd40, %rd101, %rd136;
	add.s32 	%r602, %r539, %r511;
	mul.wide.u32 	%rd137, %r602, 4;
	add.s64 	%rd41, %rd101, %rd137;
	add.s32 	%r603, %r539, %r513;
	mul.wide.u32 	%rd138, %r603, 4;
	add.s64 	%rd42, %rd101, %rd138;
	add.s32 	%r604, %r539, %r515;
	mul.wide.u32 	%rd139, %r604, 4;
	add.s64 	%rd43, %rd101, %rd139;
	add.s32 	%r605, %r539, %r517;
	mul.wide.u32 	%rd140, %r605, 4;
	add.s64 	%rd44, %rd101, %rd140;
	add.s32 	%r606, %r539, %r519;
	mul.wide.u32 	%rd141, %r606, 4;
	add.s64 	%rd45, %rd101, %rd141;
	add.s32 	%r607, %r539, %r521;
	mul.wide.u32 	%rd142, %r607, 4;
	add.s64 	%rd46, %rd101, %rd142;
	add.s32 	%r608, %r539, %r523;
	mul.wide.u32 	%rd143, %r608, 4;
	add.s64 	%rd47, %rd101, %rd143;
	add.s32 	%r609, %r539, %r525;
	mul.wide.u32 	%rd144, %r609, 4;
	add.s64 	%rd48, %rd101, %rd144;
	add.s32 	%r610, %r539, %r527;
	mul.wide.u32 	%rd145, %r610, 4;
	add.s64 	%rd49, %rd101, %rd145;
	add.s32 	%r611, %r539, %r529;
	mul.wide.u32 	%rd146, %r611, 4;
	add.s64 	%rd50, %rd101, %rd146;
	add.s32 	%r612, %r539, %r531;
	mul.wide.u32 	%rd147, %r612, 4;
	add.s64 	%rd51, %rd101, %rd147;
	add.s32 	%r613, %r539, %r533;
	mul.wide.u32 	%rd148, %r613, 4;
	add.s64 	%rd52, %rd101, %rd148;
	add.s32 	%r614, %r539, %r535;
	mul.wide.u32 	%rd149, %r614, 4;
	add.s64 	%rd53, %rd101, %rd149;
	add.s32 	%r615, %r147, -1;
	setp.lt.u32 	%p240, %r615, 3;
	or.pred  	%p241, %p234, %p240;
	or.pred  	%p242, %p241, %p235;
	and.b32  	%r616, %r3, 24;
	setp.eq.s32 	%p243, %r616, 24;
	or.pred  	%p244, %p236, %p243;
	selp.b32 	%r181, 1145324612, -286331154, %p241;
	or.pred  	%p1, %p242, %p244;
	shl.b32 	%r182, %r505, 5;
	add.s32 	%r617, %r179, %r182;
	mul.wide.u32 	%rd150, %r617, 4;
	add.s64 	%rd54, %rd101, %rd150;
	cvt.u64.u32 	%rd151, %r182;
	cvt.u64.u32 	%rd152, %r549;
	cvt.u64.u32 	%rd153, %r552;
	add.s64 	%rd55, %rd153, %rd152;
	add.s64 	%rd154, %rd55, %rd151;
	shl.b64 	%rd155, %rd154, 2;
	add.s64 	%rd58, %rd101, %rd155;
	shl.b32 	%r618, %r507, 5;
	add.s32 	%r619, %r179, %r618;
	mul.wide.u32 	%rd156, %r619, 4;
	add.s64 	%rd59, %rd101, %rd156;
	cvt.u64.u32 	%rd157, %r618;
	add.s64 	%rd158, %rd55, %rd157;
	shl.b64 	%rd159, %rd158, 2;
	add.s64 	%rd61, %rd101, %rd159;
	shl.b32 	%r620, %r509, 5;
	add.s32 	%r621, %r179, %r620;
	mul.wide.u32 	%rd160, %r621, 4;
	add.s64 	%rd62, %rd101, %rd160;
	cvt.u64.u32 	%rd161, %r620;
	add.s64 	%rd162, %rd55, %rd161;
	shl.b64 	%rd163, %rd162, 2;
	add.s64 	%rd64, %rd101, %rd163;
	shl.b32 	%r622, %r511, 5;
	add.s32 	%r623, %r179, %r622;
	mul.wide.u32 	%rd164, %r623, 4;
	add.s64 	%rd65, %rd101, %rd164;
	cvt.u64.u32 	%rd165, %r622;
	add.s64 	%rd166, %rd55, %rd165;
	shl.b64 	%rd167, %rd166, 2;
	add.s64 	%rd67, %rd101, %rd167;
	add.s32 	%r624, %r575, 32;
	mul.wide.u32 	%rd168, %r624, 4;
	add.s64 	%rd68, %rd101, %rd168;
	add.s32 	%r625, %r575, 48;
	mul.wide.u32 	%rd169, %r625, 4;
	add.s64 	%rd69, %rd101, %rd169;
	add.s32 	%r626, %r575, 64;
	mul.wide.u32 	%rd170, %r626, 4;
	add.s64 	%rd70, %rd101, %rd170;
	add.s32 	%r627, %r575, 80;
	mul.wide.u32 	%rd171, %r627, 4;
	add.s64 	%rd71, %rd101, %rd171;
	add.s32 	%r628, %r575, 96;
	mul.wide.u32 	%rd172, %r628, 4;
	add.s64 	%rd72, %rd101, %rd172;
	add.s32 	%r629, %r575, 112;
	mul.wide.u32 	%rd173, %r629, 4;
	add.s64 	%rd73, %rd101, %rd173;
	add.s32 	%r630, %r575, 128;
	mul.wide.u32 	%rd174, %r630, 4;
	add.s64 	%rd74, %rd101, %rd174;
	add.s32 	%r631, %r575, 144;
	mul.wide.u32 	%rd175, %r631, 4;
	add.s64 	%rd75, %rd101, %rd175;
	add.s32 	%r632, %r575, 160;
	mul.wide.u32 	%rd176, %r632, 4;
	add.s64 	%rd76, %rd101, %rd176;
	add.s32 	%r633, %r575, 176;
	mul.wide.u32 	%rd177, %r633, 4;
	add.s64 	%rd77, %rd101, %rd177;
	add.s32 	%r634, %r575, 192;
	mul.wide.u32 	%rd178, %r634, 4;
	add.s64 	%rd78, %rd101, %rd178;
	add.s32 	%r635, %r575, 208;
	mul.wide.u32 	%rd179, %r635, 4;
	add.s64 	%rd79, %rd101, %rd179;
	add.s32 	%r636, %r575, 224;
	mul.wide.u32 	%rd180, %r636, 4;
	add.s64 	%rd80, %rd101, %rd180;
	add.s32 	%r637, %r575, 240;
	mul.wide.u32 	%rd181, %r637, 4;
	add.s64 	%rd81, %rd101, %rd181;
	mov.u32 	%r89, 0;
	setp.eq.s32 	%p246, %r178, 0;
	mov.u16 	%rs38, 25600;
	mov.u16 	%rs40, 21504;
	mov.u16 	%rs44, 18432;
	mov.u32 	%r3429, %r89;
	mov.u32 	%r3430, %r89;
	mov.u32 	%r3431, %r89;
	bra.uni 	$L__BB0_188;
$L__BB0_159:                            // %L46617
                                        //   in Loop: Header=BB0_188 Depth=1
	add.s32 	%r145, %r89, 64;
	setp.ne.s32 	%p303, %r89, 1984;
	mov.u32 	%r89, %r145;
	@%p303 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_160;
$L__BB0_188:                            // %L1602
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_206 Depth 2
                                        //     Child Loop BB0_154 Depth 2
	add.s32 	%r638, %r89, %r262;
	setp.lt.s32 	%p245, %r638, %r263;
	@%p245 bra 	$L__BB0_189;
	bra.uni 	$L__BB0_160;
$L__BB0_189:                            // %pass780
                                        //   in Loop: Header=BB0_188 Depth=1
	cvt.u32.u64 	%r831, %rd20;
	or.b32  	%r832, %r89, %r1;
	shl.b32 	%r833, %r832, 17;
	and.b32  	%r834, %r833, 262012928;
	or.b32  	%r835, %r834, %r175;
	or.b32  	%r836, %r835, %r176;
	or.b32  	%r837, %r836, %r177;
	add.s32 	%r838, %r174, %r837;
	shr.s32 	%r839, %r838, 31;
	shr.u32 	%r840, %r839, 4;
	add.s32 	%r841, %r838, %r840;
	shr.s32 	%r842, %r841, 28;
	setp.lt.s32 	%p247, %r838, 0;
	and.b32  	%r843, %r841, -268435456;
	setp.ne.s32 	%p248, %r843, %r838;
	and.pred  	%p249, %p247, %p248;
	selp.u32 	%r844, 1, 0, %p249;
	sub.s32 	%r845, %r844, %r842;
	shl.b32 	%r846, %r845, 28;
	add.s32 	%r847, %r846, %r838;
	mul.wide.s32 	%rd182, %r847, 4;
	add.s64 	%rd183, %rd3, %rd182;
	ld.global.v4.u32 	{%r848, %r849, %r850, %r851}, [%rd183];
	or.b32  	%r852, %r832, 16;
	shl.b32 	%r853, %r852, 17;
	and.b32  	%r854, %r853, 264110080;
	or.b32  	%r855, %r854, %r175;
	or.b32  	%r856, %r855, %r176;
	or.b32  	%r857, %r856, %r177;
	add.s32 	%r858, %r174, %r857;
	shr.s32 	%r859, %r858, 31;
	shr.u32 	%r860, %r859, 4;
	add.s32 	%r861, %r858, %r860;
	shr.s32 	%r862, %r861, 28;
	setp.lt.s32 	%p250, %r858, 0;
	and.b32  	%r863, %r861, -268435456;
	setp.ne.s32 	%p251, %r863, %r858;
	and.pred  	%p252, %p250, %p251;
	selp.u32 	%r864, 1, 0, %p252;
	sub.s32 	%r865, %r864, %r862;
	shl.b32 	%r866, %r865, 28;
	add.s32 	%r867, %r866, %r858;
	mul.wide.s32 	%rd184, %r867, 4;
	add.s64 	%rd185, %rd3, %rd184;
	ld.global.v4.u32 	{%r868, %r869, %r870, %r871}, [%rd185];
	and.b32  	%r872, %r89, 1984;
	or.b32  	%r873, %r1, %r872;
	shl.b32 	%r874, %r873, 17;
	or.b32  	%r875, %r874, %r175;
	or.b32  	%r876, %r875, %r176;
	or.b32  	%r877, %r876, %r177;
	or.b32  	%r878, %r877, 4194304;
	add.s32 	%r879, %r174, %r878;
	shr.s32 	%r880, %r879, 31;
	shr.u32 	%r881, %r880, 4;
	add.s32 	%r882, %r879, %r881;
	shr.s32 	%r883, %r882, 28;
	setp.lt.s32 	%p253, %r879, 0;
	and.b32  	%r884, %r882, -268435456;
	setp.ne.s32 	%p254, %r884, %r879;
	and.pred  	%p255, %p253, %p254;
	selp.u32 	%r885, 1, 0, %p255;
	sub.s32 	%r886, %r885, %r883;
	shl.b32 	%r887, %r886, 28;
	add.s32 	%r888, %r887, %r879;
	mul.wide.s32 	%rd186, %r888, 4;
	add.s64 	%rd187, %rd3, %rd186;
	ld.global.v4.u32 	{%r889, %r890, %r891, %r892}, [%rd187];
	or.b32  	%r893, %r877, 6291456;
	add.s32 	%r894, %r174, %r893;
	shr.s32 	%r895, %r894, 31;
	shr.u32 	%r896, %r895, 4;
	add.s32 	%r897, %r894, %r896;
	shr.s32 	%r898, %r897, 28;
	setp.lt.s32 	%p256, %r894, 0;
	and.b32  	%r899, %r897, -268435456;
	setp.ne.s32 	%p257, %r899, %r894;
	and.pred  	%p258, %p256, %p257;
	selp.u32 	%r900, 1, 0, %p258;
	sub.s32 	%r901, %r900, %r898;
	shl.b32 	%r902, %r901, 28;
	add.s32 	%r903, %r902, %r894;
	mul.wide.s32 	%rd188, %r903, 4;
	add.s64 	%rd189, %rd3, %rd188;
	ld.global.v4.u32 	{%r904, %r905, %r906, %r907}, [%rd189];
	selp.b32 	%r908, %r850, %r848, %p246;
	shfl.sync.bfly.b32	%r909, %r908, 16, 31, -1;
	selp.b32 	%r641, %r848, %r909, %p246;
	selp.b32 	%r646, %r909, %r850, %p246;
	selp.b32 	%r910, %r851, %r849, %p246;
	shfl.sync.bfly.b32	%r911, %r910, 16, 31, -1;
	selp.b32 	%r649, %r849, %r911, %p246;
	selp.b32 	%r654, %r911, %r851, %p246;
	selp.b32 	%r912, %r870, %r868, %p246;
	shfl.sync.bfly.b32	%r913, %r912, 16, 31, -1;
	selp.b32 	%r657, %r868, %r913, %p246;
	selp.b32 	%r662, %r913, %r870, %p246;
	selp.b32 	%r914, %r871, %r869, %p246;
	shfl.sync.bfly.b32	%r915, %r914, 16, 31, -1;
	selp.b32 	%r665, %r869, %r915, %p246;
	selp.b32 	%r670, %r915, %r871, %p246;
	selp.b32 	%r916, %r891, %r889, %p246;
	shfl.sync.bfly.b32	%r917, %r916, 16, 31, -1;
	selp.b32 	%r673, %r889, %r917, %p246;
	selp.b32 	%r678, %r917, %r891, %p246;
	selp.b32 	%r918, %r892, %r890, %p246;
	shfl.sync.bfly.b32	%r919, %r918, 16, 31, -1;
	selp.b32 	%r681, %r890, %r919, %p246;
	selp.b32 	%r686, %r919, %r892, %p246;
	selp.b32 	%r920, %r906, %r904, %p246;
	shfl.sync.bfly.b32	%r921, %r920, 16, 31, -1;
	selp.b32 	%r689, %r904, %r921, %p246;
	selp.b32 	%r694, %r921, %r906, %p246;
	selp.b32 	%r922, %r907, %r905, %p246;
	shfl.sync.bfly.b32	%r923, %r922, 16, 31, -1;
	selp.b32 	%r697, %r905, %r923, %p246;
	selp.b32 	%r702, %r923, %r907, %p246;
	shl.b32 	%r642, %r646, 4;
	mov.u32 	%r640, 252645135;
	// begin inline asm
	lop3.b32 %r704, %r640, %r641, %r642, 202;
	// end inline asm
	shr.u32 	%r645, %r641, 4;
	// begin inline asm
	lop3.b32 %r720, %r640, %r645, %r646, 202;
	// end inline asm
	shl.b32 	%r650, %r654, 4;
	// begin inline asm
	lop3.b32 %r712, %r640, %r649, %r650, 202;
	// end inline asm
	shr.u32 	%r653, %r649, 4;
	// begin inline asm
	lop3.b32 %r728, %r640, %r653, %r654, 202;
	// end inline asm
	shl.b32 	%r658, %r662, 4;
	// begin inline asm
	lop3.b32 %r736, %r640, %r657, %r658, 202;
	// end inline asm
	shr.u32 	%r661, %r657, 4;
	// begin inline asm
	lop3.b32 %r752, %r640, %r661, %r662, 202;
	// end inline asm
	shl.b32 	%r666, %r670, 4;
	// begin inline asm
	lop3.b32 %r744, %r640, %r665, %r666, 202;
	// end inline asm
	shr.u32 	%r669, %r665, 4;
	// begin inline asm
	lop3.b32 %r760, %r640, %r669, %r670, 202;
	// end inline asm
	shl.b32 	%r674, %r678, 4;
	// begin inline asm
	lop3.b32 %r705, %r640, %r673, %r674, 202;
	// end inline asm
	shr.u32 	%r677, %r673, 4;
	// begin inline asm
	lop3.b32 %r721, %r640, %r677, %r678, 202;
	// end inline asm
	shl.b32 	%r682, %r686, 4;
	// begin inline asm
	lop3.b32 %r713, %r640, %r681, %r682, 202;
	// end inline asm
	shr.u32 	%r685, %r681, 4;
	// begin inline asm
	lop3.b32 %r729, %r640, %r685, %r686, 202;
	// end inline asm
	shl.b32 	%r690, %r694, 4;
	// begin inline asm
	lop3.b32 %r737, %r640, %r689, %r690, 202;
	// end inline asm
	shr.u32 	%r693, %r689, 4;
	// begin inline asm
	lop3.b32 %r753, %r640, %r693, %r694, 202;
	// end inline asm
	shl.b32 	%r698, %r702, 4;
	// begin inline asm
	lop3.b32 %r745, %r640, %r697, %r698, 202;
	// end inline asm
	shr.u32 	%r701, %r697, 4;
	// begin inline asm
	lop3.b32 %r761, %r640, %r701, %r702, 202;
	// end inline asm
	mov.u32 	%r706, 25152;
	// begin inline asm
	prmt.b32 %r768, %r704, %r705, %r706;
	// end inline asm
	mov.u32 	%r710, 29521;
	// begin inline asm
	prmt.b32 %r800, %r704, %r705, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r776, %r712, %r713, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r808, %r712, %r713, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r769, %r720, %r721, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r801, %r720, %r721, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r777, %r728, %r729, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r809, %r728, %r729, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r784, %r736, %r737, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r816, %r736, %r737, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r792, %r744, %r745, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r824, %r744, %r745, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r785, %r752, %r753, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r817, %r752, %r753, %r710;
	// end inline asm
	// begin inline asm
	prmt.b32 %r793, %r760, %r761, %r706;
	// end inline asm
	// begin inline asm
	prmt.b32 %r825, %r760, %r761, %r710;
	// end inline asm
	mov.u32 	%r826, 21520;
	// begin inline asm
	prmt.b32 %r767, %r768, %r769, %r826;
	// end inline asm
	mov.u32 	%r830, 30258;
	// begin inline asm
	prmt.b32 %r771, %r768, %r769, %r830;
	// end inline asm
	// begin inline asm
	prmt.b32 %r775, %r776, %r777, %r826;
	// end inline asm
	// begin inline asm
	prmt.b32 %r779, %r776, %r777, %r830;
	// end inline asm
	// begin inline asm
	prmt.b32 %r783, %r784, %r785, %r826;
	// end inline asm
	// begin inline asm
	prmt.b32 %r787, %r784, %r785, %r830;
	// end inline asm
	// begin inline asm
	prmt.b32 %r791, %r792, %r793, %r826;
	// end inline asm
	// begin inline asm
	prmt.b32 %r795, %r792, %r793, %r830;
	// end inline asm
	// begin inline asm
	prmt.b32 %r799, %r800, %r801, %r826;
	// end inline asm
	// begin inline asm
	prmt.b32 %r803, %r800, %r801, %r830;
	// end inline asm
	// begin inline asm
	prmt.b32 %r807, %r808, %r809, %r826;
	// end inline asm
	// begin inline asm
	prmt.b32 %r811, %r808, %r809, %r830;
	// end inline asm
	// begin inline asm
	prmt.b32 %r815, %r816, %r817, %r826;
	// end inline asm
	// begin inline asm
	prmt.b32 %r819, %r816, %r817, %r830;
	// end inline asm
	// begin inline asm
	prmt.b32 %r823, %r824, %r825, %r826;
	// end inline asm
	// begin inline asm
	prmt.b32 %r827, %r824, %r825, %r830;
	// end inline asm
	st.shared.u32 	[%rd19], %r767;
	st.shared.u32 	[%rd21+512], %r775;
	st.shared.u32 	[%rd21+256], %r771;
	st.shared.u32 	[%rd21+768], %r779;
	and.b32  	%r924, %r852, 31;
	add.s32 	%r925, %r924, %r831;
	mul.wide.u32 	%rd190, %r925, 4;
	add.s64 	%rd192, %rd101, %rd190;
	st.shared.u32 	[%rd192], %r783;
	cvt.u64.u32 	%rd193, %r924;
	add.s64 	%rd194, %rd20, %rd193;
	shl.b64 	%rd195, %rd194, 2;
	add.s64 	%rd196, %rd101, %rd195;
	st.shared.u32 	[%rd196+512], %r791;
	st.shared.u32 	[%rd196+256], %r787;
	st.shared.u32 	[%rd196+768], %r795;
	st.shared.u32 	[%rd21+128], %r799;
	st.shared.u32 	[%rd21+640], %r807;
	st.shared.u32 	[%rd21+384], %r803;
	st.shared.u32 	[%rd21+896], %r811;
	st.shared.u32 	[%rd196+128], %r815;
	st.shared.u32 	[%rd196+640], %r823;
	st.shared.u32 	[%rd196+384], %r819;
	st.shared.u32 	[%rd196+896], %r827;
	bar.sync 	0;
	ld.shared.u32 	%r183, [%rd22];
	ld.shared.u32 	%r184, [%rd23];
	ld.shared.u32 	%r185, [%rd24];
	ld.shared.u32 	%r186, [%rd25];
	ld.shared.u32 	%r187, [%rd26];
	ld.shared.u32 	%r188, [%rd27];
	ld.shared.u32 	%r189, [%rd28];
	ld.shared.u32 	%r190, [%rd29];
	ld.shared.u32 	%r191, [%rd30];
	ld.shared.u32 	%r192, [%rd31];
	ld.shared.u32 	%r193, [%rd32];
	ld.shared.u32 	%r194, [%rd33];
	ld.shared.u32 	%r195, [%rd34];
	ld.shared.u32 	%r196, [%rd35];
	ld.shared.u32 	%r197, [%rd36];
	ld.shared.u32 	%r198, [%rd37];
	bar.sync 	0;
	shfl.sync.idx.b32	%r199, %r171, 0, 31, -1;
	shfl.sync.idx.b32	%r200, %r171, 1, 31, -1;
	shfl.sync.idx.b32	%r201, %r171, 2, 31, -1;
	shfl.sync.idx.b32	%r202, %r171, 3, 31, -1;
	shfl.sync.idx.b32	%r203, %r171, 4, 31, -1;
	shfl.sync.idx.b32	%r204, %r171, 5, 31, -1;
	shfl.sync.idx.b32	%r205, %r171, 6, 31, -1;
	shfl.sync.idx.b32	%r206, %r171, 7, 31, -1;
	shfl.sync.idx.b32	%r207, %r171, 8, 31, -1;
	shfl.sync.idx.b32	%r208, %r171, 9, 31, -1;
	shfl.sync.idx.b32	%r209, %r171, 10, 31, -1;
	shfl.sync.idx.b32	%r210, %r171, 11, 31, -1;
	shfl.sync.idx.b32	%r211, %r171, 12, 31, -1;
	shfl.sync.idx.b32	%r212, %r171, 13, 31, -1;
	shfl.sync.idx.b32	%r213, %r171, 14, 31, -1;
	shfl.sync.idx.b32	%r214, %r171, 15, 31, -1;
	setp.eq.s32 	%p259, %r199, 999999999;
	@%p259 bra 	$L__BB0_136;
// %bb.190:                             // %pass3083
                                        //   in Loop: Header=BB0_188 Depth=1
	add.s32 	%r926, %r199, %r3;
	mul.wide.s32 	%rd197, %r926, 4;
	add.s64 	%rd199, %rd101, %rd197;
	st.shared.u32 	[%rd199], %r183;
	setp.eq.s32 	%p260, %r200, 999999999;
	@%p260 bra 	$L__BB0_137;
// %bb.191:                             // %pass3151
                                        //   in Loop: Header=BB0_188 Depth=1
	add.s32 	%r927, %r200, %r3;
	mul.wide.s32 	%rd200, %r927, 4;
	add.s64 	%rd202, %rd101, %rd200;
	st.shared.u32 	[%rd202], %r184;
	setp.eq.s32 	%p261, %r201, 999999999;
	@%p261 bra 	$L__BB0_138;
// %bb.192:                             // %pass3219
                                        //   in Loop: Header=BB0_188 Depth=1
	add.s32 	%r928, %r201, %r3;
	mul.wide.s32 	%rd203, %r928, 4;
	add.s64 	%rd205, %rd101, %rd203;
	st.shared.u32 	[%rd205], %r185;
	setp.eq.s32 	%p262, %r202, 999999999;
	@%p262 bra 	$L__BB0_139;
// %bb.193:                             // %pass3287
                                        //   in Loop: Header=BB0_188 Depth=1
	add.s32 	%r929, %r202, %r3;
	mul.wide.s32 	%rd206, %r929, 4;
	add.s64 	%rd208, %rd101, %rd206;
	st.shared.u32 	[%rd208], %r186;
	setp.eq.s32 	%p263, %r203, 999999999;
	@%p263 bra 	$L__BB0_140;
// %bb.194:                             // %pass3355
                                        //   in Loop: Header=BB0_188 Depth=1
	add.s32 	%r930, %r203, %r3;
	mul.wide.s32 	%rd209, %r930, 4;
	add.s64 	%rd211, %rd101, %rd209;
	st.shared.u32 	[%rd211], %r187;
	setp.eq.s32 	%p264, %r204, 999999999;
	@%p264 bra 	$L__BB0_141;
// %bb.195:                             // %pass3423
                                        //   in Loop: Header=BB0_188 Depth=1
	add.s32 	%r931, %r204, %r3;
	mul.wide.s32 	%rd212, %r931, 4;
	add.s64 	%rd214, %rd101, %rd212;
	st.shared.u32 	[%rd214], %r188;
	setp.eq.s32 	%p265, %r205, 999999999;
	@%p265 bra 	$L__BB0_142;
// %bb.196:                             // %pass3491
                                        //   in Loop: Header=BB0_188 Depth=1
	add.s32 	%r932, %r205, %r3;
	mul.wide.s32 	%rd215, %r932, 4;
	add.s64 	%rd217, %rd101, %rd215;
	st.shared.u32 	[%rd217], %r189;
	setp.eq.s32 	%p266, %r206, 999999999;
	@%p266 bra 	$L__BB0_143;
// %bb.197:                             // %pass3559
                                        //   in Loop: Header=BB0_188 Depth=1
	add.s32 	%r933, %r206, %r3;
	mul.wide.s32 	%rd218, %r933, 4;
	add.s64 	%rd220, %rd101, %rd218;
	st.shared.u32 	[%rd220], %r190;
	setp.eq.s32 	%p267, %r207, 999999999;
	@%p267 bra 	$L__BB0_144;
// %bb.198:                             // %pass3627
                                        //   in Loop: Header=BB0_188 Depth=1
	add.s32 	%r934, %r207, %r3;
	mul.wide.s32 	%rd221, %r934, 4;
	add.s64 	%rd223, %rd101, %rd221;
	st.shared.u32 	[%rd223], %r191;
	setp.eq.s32 	%p268, %r208, 999999999;
	@%p268 bra 	$L__BB0_145;
// %bb.199:                             // %pass3695
                                        //   in Loop: Header=BB0_188 Depth=1
	add.s32 	%r935, %r208, %r3;
	mul.wide.s32 	%rd224, %r935, 4;
	add.s64 	%rd226, %rd101, %rd224;
	st.shared.u32 	[%rd226], %r192;
	setp.eq.s32 	%p269, %r209, 999999999;
	@%p269 bra 	$L__BB0_146;
// %bb.200:                             // %pass3763
                                        //   in Loop: Header=BB0_188 Depth=1
	add.s32 	%r936, %r209, %r3;
	mul.wide.s32 	%rd227, %r936, 4;
	add.s64 	%rd229, %rd101, %rd227;
	st.shared.u32 	[%rd229], %r193;
	setp.eq.s32 	%p270, %r210, 999999999;
	@%p270 bra 	$L__BB0_147;
// %bb.201:                             // %pass3831
                                        //   in Loop: Header=BB0_188 Depth=1
	add.s32 	%r937, %r210, %r3;
	mul.wide.s32 	%rd230, %r937, 4;
	add.s64 	%rd232, %rd101, %rd230;
	st.shared.u32 	[%rd232], %r194;
	setp.eq.s32 	%p271, %r211, 999999999;
	@%p271 bra 	$L__BB0_148;
// %bb.202:                             // %pass3899
                                        //   in Loop: Header=BB0_188 Depth=1
	add.s32 	%r938, %r211, %r3;
	mul.wide.s32 	%rd233, %r938, 4;
	add.s64 	%rd235, %rd101, %rd233;
	st.shared.u32 	[%rd235], %r195;
	setp.eq.s32 	%p272, %r212, 999999999;
	@%p272 bra 	$L__BB0_149;
// %bb.203:                             // %pass3967
                                        //   in Loop: Header=BB0_188 Depth=1
	add.s32 	%r939, %r212, %r3;
	mul.wide.s32 	%rd236, %r939, 4;
	add.s64 	%rd238, %rd101, %rd236;
	st.shared.u32 	[%rd238], %r196;
	setp.eq.s32 	%p273, %r213, 999999999;
	@%p273 bra 	$L__BB0_150;
// %bb.204:                             // %pass4035
                                        //   in Loop: Header=BB0_188 Depth=1
	add.s32 	%r940, %r213, %r3;
	mul.wide.s32 	%rd239, %r940, 4;
	add.s64 	%rd241, %rd101, %rd239;
	st.shared.u32 	[%rd241], %r197;
	setp.eq.s32 	%p274, %r214, 999999999;
	@%p274 bra 	$L__BB0_151;
// %bb.205:                             // %pass4103
                                        //   in Loop: Header=BB0_188 Depth=1
	add.s32 	%r942, %r214, %r3;
	mul.wide.s32 	%rd242, %r942, 4;
	add.s64 	%rd244, %rd101, %rd242;
	st.shared.u32 	[%rd244], %r198;
	bar.sync 	0;
	ld.shared.u32 	%r215, [%rd38];
	ld.shared.u32 	%r216, [%rd39];
	ld.shared.u32 	%r217, [%rd40];
	ld.shared.u32 	%r218, [%rd41];
	ld.shared.u32 	%r219, [%rd42];
	ld.shared.u32 	%r220, [%rd43];
	ld.shared.u32 	%r221, [%rd44];
	ld.shared.u32 	%r222, [%rd45];
	ld.shared.u32 	%r223, [%rd46];
	ld.shared.u32 	%r224, [%rd47];
	ld.shared.u32 	%r225, [%rd48];
	ld.shared.u32 	%r226, [%rd49];
	ld.shared.u32 	%r227, [%rd50];
	ld.shared.u32 	%r228, [%rd51];
	ld.shared.u32 	%r229, [%rd52];
	ld.shared.u32 	%r230, [%rd53];
	bar.sync 	0;
	mov.u32 	%r3421, 16;
	bra.uni 	$L__BB0_206;
$L__BB0_152:                            // %L29421
                                        //   in Loop: Header=BB0_206 Depth=2
	bar.sync 	0;
	add.s32 	%r3421, %r3421, -8;
	setp.ne.s32 	%p288, %r3421, -16;
	@%p288 bra 	$L__BB0_206;
	bra.uni 	$L__BB0_153;
$L__BB0_206:                            // %L12262
                                        //   Parent Loop BB0_188 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p275, %r3421, 16;
	selp.b32 	%r1335, %r215, 0, %p275;
	setp.eq.s32 	%p276, %r3421, 8;
	selp.b32 	%r1336, %r219, %r1335, %p276;
	setp.eq.s32 	%p277, %r3421, 0;
	selp.b32 	%r1337, %r223, %r1336, %p277;
	setp.eq.s32 	%p278, %r3421, -8;
	selp.b32 	%r1338, %r227, %r1337, %p278;
	selp.b32 	%r1339, %r216, 0, %p275;
	selp.b32 	%r1340, %r220, %r1339, %p276;
	selp.b32 	%r1341, %r224, %r1340, %p277;
	selp.b32 	%r1342, %r228, %r1341, %p278;
	selp.b32 	%r1343, %r217, 0, %p275;
	selp.b32 	%r1344, %r221, %r1343, %p276;
	selp.b32 	%r1345, %r225, %r1344, %p277;
	selp.b32 	%r1346, %r229, %r1345, %p278;
	selp.b32 	%r1347, %r218, 0, %p275;
	selp.b32 	%r1348, %r222, %r1347, %p276;
	selp.b32 	%r1349, %r226, %r1348, %p277;
	selp.b32 	%r1350, %r230, %r1349, %p278;
	// begin inline asm
	mov.b32 %r948, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r959, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r947, %r1338, -2004318072;
	mov.u32 	%r1084, 983055;
	// begin inline asm
	lop3.b32 %r945, %r1084, %r947, %r948, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r949, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r950, %r948, %r949;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r953, %r945, %r950;
	// end inline asm
	mov.u32 	%r1095, 15728880;
	// begin inline asm
	lop3.b32 %r956, %r1095, %r947, %r959, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r960, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r961, %r959, %r960;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r964, %r956, %r961;
	// end inline asm
	// begin inline asm
	mov.b32 %r994, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1005, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r993, %r1342, -2004318072;
	// begin inline asm
	lop3.b32 %r991, %r1084, %r993, %r994, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r995, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r996, %r994, %r995;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r999, %r991, %r996;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1002, %r1095, %r993, %r1005, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1006, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1007, %r1005, %r1006;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1010, %r1002, %r1007;
	// end inline asm
	// begin inline asm
	mov.b32 %r1040, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1051, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1039, %r1346, -2004318072;
	// begin inline asm
	lop3.b32 %r1037, %r1084, %r1039, %r1040, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1041, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1042, %r1040, %r1041;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1045, %r1037, %r1042;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1048, %r1095, %r1039, %r1051, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1052, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1053, %r1051, %r1052;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1056, %r1048, %r1053;
	// end inline asm
	// begin inline asm
	mov.b32 %r1086, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1097, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1085, %r1350, -2004318072;
	// begin inline asm
	lop3.b32 %r1083, %r1084, %r1085, %r1086, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1087, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1088, %r1086, %r1087;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1091, %r1083, %r1088;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1094, %r1095, %r1085, %r1097, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1098, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1099, %r1097, %r1098;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1102, %r1094, %r1099;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r953;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1127, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r964;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1130, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r999;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1133, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r1010;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1136, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r1045;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1139, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r1056;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1142, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r1091;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1145, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r1102;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1148, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1206, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1151, %r1152}, {%r292, %r295}, {%r1127}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1158, %r1159}, {%r292, %r295}, {%r1130}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1165, %r1166}, {%r292, %r295}, {%r1133}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1172, %r1173}, {%r292, %r295}, {%r1136}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1179, %r1180}, {%r292, %r295}, {%r1139}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1186, %r1187}, {%r292, %r295}, {%r1142}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1193, %r1194}, {%r292, %r295}, {%r1145}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1200, %r1201}, {%r292, %r295}, {%r1148}, {%r1206, %r1206};
	// end inline asm
	@%p1 bra 	$L__BB0_208;
	bra.uni 	$L__BB0_207;
$L__BB0_208:                            // %pass5517
                                        //   in Loop: Header=BB0_206 Depth=2
	// begin inline asm
	neg.f16x2 %r1207, %r333;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1209, %r1207, %r1152;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1212, %r330, %r1151, %r1209;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1216, %r333;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1218, %r1216, %r1159;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1221, %r330, %r1158, %r1218;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1225, %r333;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1227, %r1225, %r1166;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1230, %r330, %r1165, %r1227;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1234, %r333;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1236, %r1234, %r1173;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1239, %r330, %r1172, %r1236;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1243, %r333;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1245, %r1243, %r1180;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1248, %r330, %r1179, %r1245;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1252, %r333;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1254, %r1252, %r1187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1257, %r330, %r1186, %r1254;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1261, %r333;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1263, %r1261, %r1194;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1266, %r330, %r1193, %r1263;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1270, %r333;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1272, %r1270, %r1201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1275, %r330, %r1200, %r1272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1279, %r333, %r1151;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1282, %r330, %r1152, %r1279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1286, %r333, %r1158;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1289, %r330, %r1159, %r1286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1293, %r333, %r1165;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1296, %r330, %r1166, %r1293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1300, %r333, %r1172;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1303, %r330, %r1173, %r1300;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1307, %r333, %r1179;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1310, %r330, %r1180, %r1307;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1314, %r333, %r1186;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1317, %r330, %r1187, %r1314;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1321, %r333, %r1193;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1324, %r330, %r1194, %r1321;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1328, %r333, %r1200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1331, %r330, %r1201, %r1328;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1424, %r1425}, {%r377, %r380}, {%r1212, %r1282}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1432, %r1433}, {%r377, %r380}, {%r1221, %r1289}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1440, %r1441}, {%r377, %r380}, {%r1230, %r1296}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1448, %r1449}, {%r377, %r380}, {%r1239, %r1303}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1456, %r1457}, {%r377, %r380}, {%r1248, %r1310}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1464, %r1465}, {%r377, %r380}, {%r1257, %r1317}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1472, %r1473}, {%r377, %r380}, {%r1266, %r1324}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1480, %r1481}, {%r377, %r380}, {%r1275, %r1331}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r231, %r1424, %r1425, %r826;
	// end inline asm
	// begin inline asm
	prmt.b32 %r232, %r1424, %r1425, %r830;
	// end inline asm
	// begin inline asm
	prmt.b32 %r233, %r1432, %r1433, %r826;
	// end inline asm
	// begin inline asm
	prmt.b32 %r234, %r1432, %r1433, %r830;
	// end inline asm
	// begin inline asm
	prmt.b32 %r235, %r1440, %r1441, %r826;
	// end inline asm
	// begin inline asm
	prmt.b32 %r236, %r1440, %r1441, %r830;
	// end inline asm
	// begin inline asm
	prmt.b32 %r237, %r1448, %r1449, %r826;
	// end inline asm
	// begin inline asm
	prmt.b32 %r238, %r1448, %r1449, %r830;
	// end inline asm
	// begin inline asm
	prmt.b32 %r239, %r1456, %r1457, %r826;
	// end inline asm
	// begin inline asm
	prmt.b32 %r240, %r1456, %r1457, %r830;
	// end inline asm
	// begin inline asm
	prmt.b32 %r241, %r1464, %r1465, %r826;
	// end inline asm
	// begin inline asm
	prmt.b32 %r242, %r1464, %r1465, %r830;
	// end inline asm
	// begin inline asm
	prmt.b32 %r243, %r1472, %r1473, %r826;
	// end inline asm
	// begin inline asm
	prmt.b32 %r244, %r1472, %r1473, %r830;
	// end inline asm
	// begin inline asm
	prmt.b32 %r245, %r1480, %r1481, %r826;
	// end inline asm
	// begin inline asm
	prmt.b32 %r246, %r1480, %r1481, %r830;
	// end inline asm
	st.shared.u32 	[%rd54], %r231;
	st.shared.u32 	[%rd58+16576], %r232;
	st.shared.u32 	[%rd58+64], %r233;
	st.shared.u32 	[%rd58+16640], %r234;
	st.shared.u32 	[%rd59], %r235;
	st.shared.u32 	[%rd61+16576], %r236;
	st.shared.u32 	[%rd61+64], %r237;
	st.shared.u32 	[%rd61+16640], %r238;
	st.shared.u32 	[%rd62], %r239;
	st.shared.u32 	[%rd64+16576], %r240;
	st.shared.u32 	[%rd64+64], %r241;
	st.shared.u32 	[%rd64+16640], %r242;
	st.shared.u32 	[%rd65], %r243;
	st.shared.u32 	[%rd67+16576], %r244;
	st.shared.u32 	[%rd67+64], %r245;
	st.shared.u32 	[%rd67+16640], %r246;
	@%p229 bra 	$L__BB0_210;
// %bb.209:                             // %pass7905
                                        //   in Loop: Header=BB0_206 Depth=2
	st.shared.u32 	[%rd54], %r231;
	st.shared.u32 	[%rd58+16576], %r232;
	st.shared.u32 	[%rd58+64], %r233;
	st.shared.u32 	[%rd58+16640], %r234;
	st.shared.u32 	[%rd59], %r235;
	st.shared.u32 	[%rd61+16576], %r236;
	st.shared.u32 	[%rd61+64], %r237;
	st.shared.u32 	[%rd61+16640], %r238;
	st.shared.u32 	[%rd62], %r239;
	st.shared.u32 	[%rd64+16576], %r240;
	st.shared.u32 	[%rd64+64], %r241;
	st.shared.u32 	[%rd64+16640], %r242;
	st.shared.u32 	[%rd65], %r243;
	st.shared.u32 	[%rd67+16576], %r244;
	st.shared.u32 	[%rd67+64], %r245;
	st.shared.u32 	[%rd67+16640], %r246;
$L__BB0_210:                            // %L21619
                                        //   in Loop: Header=BB0_206 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1491, [%rd16];
	ld.shared.u32 	%r1498, [%rd17+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1508, %r1505}, {%r389, %r392}, {%r1491}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1517, %r1514}, {%r389, %r392}, {%r1498}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1501, %r426;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1503, %r1501, %r1505;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1506, %r423, %r1508, %r1503;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1510, %r426;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1512, %r1510, %r1514;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1515, %r423, %r1517, %r1512;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1519, %r426, %r1508;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1522, %r423, %r1505, %r1519;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1526, %r426, %r1517;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1529, %r423, %r1514, %r1526;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1552, %r1555}, {%r465, %r468}, {%r1506, %r1522}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1559, %r1563}, {%r465, %r468}, {%r1515, %r1529}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1551, %r1552, %r1552;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1554, %r1555, %r1555, %r1551;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1558, %r1559, %r1559, %r1554;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1562, %r1563, %r1563, %r1558;
	// end inline asm
	mov.u32 	%r1816, 559227221;
	// begin inline asm
	fma.rn.f16x2 %r1566, %r1816, %r1562, %r3431;
	// end inline asm
	ld.shared.u32 	%r1574, [%rd68];
	ld.shared.u32 	%r1581, [%rd69];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1591, %r1588}, {%r389, %r392}, {%r1574}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1600, %r1597}, {%r389, %r392}, {%r1581}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1584, %r426;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1586, %r1584, %r1588;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1589, %r423, %r1591, %r1586;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1593, %r426;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1595, %r1593, %r1597;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1598, %r423, %r1600, %r1595;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1602, %r426, %r1591;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1605, %r423, %r1588, %r1602;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1609, %r426, %r1600;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1612, %r423, %r1597, %r1609;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1635, %r1638}, {%r465, %r468}, {%r1589, %r1605}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1642, %r1646}, {%r465, %r468}, {%r1598, %r1612}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1634, %r1635, %r1635;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1637, %r1638, %r1638, %r1634;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1641, %r1642, %r1642, %r1637;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1645, %r1646, %r1646, %r1641;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1649, %r1816, %r1645, %r1566;
	// end inline asm
	ld.shared.u32 	%r1657, [%rd70];
	ld.shared.u32 	%r1664, [%rd71];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1674, %r1671}, {%r389, %r392}, {%r1657}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1683, %r1680}, {%r389, %r392}, {%r1664}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1667, %r426;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1669, %r1667, %r1671;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1672, %r423, %r1674, %r1669;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1676, %r426;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1678, %r1676, %r1680;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1681, %r423, %r1683, %r1678;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1685, %r426, %r1674;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1688, %r423, %r1671, %r1685;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1692, %r426, %r1683;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1695, %r423, %r1680, %r1692;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1718, %r1721}, {%r465, %r468}, {%r1672, %r1688}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1725, %r1729}, {%r465, %r468}, {%r1681, %r1695}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1717, %r1718, %r1718;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1720, %r1721, %r1721, %r1717;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1724, %r1725, %r1725, %r1720;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1728, %r1729, %r1729, %r1724;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1732, %r1816, %r1728, %r1649;
	// end inline asm
	ld.shared.u32 	%r1740, [%rd72];
	ld.shared.u32 	%r1747, [%rd73];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1757, %r1754}, {%r389, %r392}, {%r1740}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1766, %r1763}, {%r389, %r392}, {%r1747}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1750, %r426;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1752, %r1750, %r1754;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1755, %r423, %r1757, %r1752;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1759, %r426;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1761, %r1759, %r1763;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1764, %r423, %r1766, %r1761;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1768, %r426, %r1757;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1771, %r423, %r1754, %r1768;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1775, %r426, %r1766;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1778, %r423, %r1763, %r1775;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1801, %r1804}, {%r465, %r468}, {%r1755, %r1771}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1808, %r1812}, {%r465, %r468}, {%r1764, %r1778}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1800, %r1801, %r1801;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1803, %r1804, %r1804, %r1800;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1807, %r1808, %r1808, %r1803;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1811, %r1812, %r1812, %r1807;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3442, %r1816, %r1811, %r1732;
	// end inline asm
	add.s32 	%r3440, %r3429, 4;
	setp.eq.s32 	%p280, %r3440, 12;
	@%p280 bra 	$L__BB0_211;
	bra.uni 	$L__BB0_212;
$L__BB0_211:                            // %pass11566
                                        //   in Loop: Header=BB0_206 Depth=2
	shl.b32 	%r1820, %r3430, 20;
	or.b32  	%r1821, %r180, %r1820;
	cvt.u64.u32 	%rd247, %r1821;
	add.s64 	%rd248, %rd247, %rd18;
	shr.u64 	%rd249, %rd248, 34;
	add.s64 	%rd250, %rd248, %rd249;
	shr.s64 	%rd251, %rd250, 30;
	setp.lt.s64 	%p281, %rd248, 0;
	and.b64  	%rd252, %rd250, -1073741824;
	setp.ne.s64 	%p282, %rd252, %rd248;
	and.pred  	%p283, %p281, %p282;
	selp.u64 	%rd253, 1, 0, %p283;
	sub.s64 	%rd254, %rd253, %rd251;
	shl.b64 	%rd255, %rd254, 30;
	add.s64 	%rd256, %rd255, %rd248;
	shl.b64 	%rd257, %rd256, 2;
	add.s64 	%rd258, %rd4, %rd257;
	st.global.u32 	[%rd258], %r3442;
	add.s32 	%r3430, %r3430, 1;
	mov.u32 	%r3440, 0;
	mov.u32 	%r3442, %r3440;
$L__BB0_212:                            // %pass11811
                                        //   in Loop: Header=BB0_206 Depth=2
	ld.shared.u32 	%r1826, [%rd74];
	ld.shared.u32 	%r1833, [%rd75];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1843, %r1840}, {%r389, %r392}, {%r1826}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1852, %r1849}, {%r389, %r392}, {%r1833}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1836, %r426;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1838, %r1836, %r1840;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1841, %r423, %r1843, %r1838;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1845, %r426;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1847, %r1845, %r1849;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1850, %r423, %r1852, %r1847;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1854, %r426, %r1843;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1857, %r423, %r1840, %r1854;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1861, %r426, %r1852;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1864, %r423, %r1849, %r1861;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1887, %r1890}, {%r465, %r468}, {%r1841, %r1857}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1894, %r1898}, {%r465, %r468}, {%r1850, %r1864}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1886, %r1887, %r1887;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1889, %r1890, %r1890, %r1886;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1893, %r1894, %r1894, %r1889;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1897, %r1898, %r1898, %r1893;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1901, %r1816, %r1897, %r3442;
	// end inline asm
	ld.shared.u32 	%r1909, [%rd76];
	ld.shared.u32 	%r1916, [%rd77];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1926, %r1923}, {%r389, %r392}, {%r1909}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1935, %r1932}, {%r389, %r392}, {%r1916}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1919, %r426;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1921, %r1919, %r1923;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1924, %r423, %r1926, %r1921;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1928, %r426;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1930, %r1928, %r1932;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1933, %r423, %r1935, %r1930;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1937, %r426, %r1926;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1940, %r423, %r1923, %r1937;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1944, %r426, %r1935;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1947, %r423, %r1932, %r1944;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1970, %r1973}, {%r465, %r468}, {%r1924, %r1940}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1977, %r1981}, {%r465, %r468}, {%r1933, %r1947}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1969, %r1970, %r1970;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1972, %r1973, %r1973, %r1969;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1976, %r1977, %r1977, %r1972;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1980, %r1981, %r1981, %r1976;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1984, %r1816, %r1980, %r1901;
	// end inline asm
	ld.shared.u32 	%r1992, [%rd78];
	ld.shared.u32 	%r1999, [%rd79];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2009, %r2006}, {%r389, %r392}, {%r1992}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2018, %r2015}, {%r389, %r392}, {%r1999}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2002, %r426;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2004, %r2002, %r2006;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2007, %r423, %r2009, %r2004;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2011, %r426;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2013, %r2011, %r2015;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2016, %r423, %r2018, %r2013;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2020, %r426, %r2009;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2023, %r423, %r2006, %r2020;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2027, %r426, %r2018;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2030, %r423, %r2015, %r2027;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2053, %r2056}, {%r465, %r468}, {%r2007, %r2023}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2060, %r2064}, {%r465, %r468}, {%r2016, %r2030}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2052, %r2053, %r2053;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2055, %r2056, %r2056, %r2052;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2059, %r2060, %r2060, %r2055;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2063, %r2064, %r2064, %r2059;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2067, %r1816, %r2063, %r1984;
	// end inline asm
	ld.shared.u32 	%r2075, [%rd80];
	ld.shared.u32 	%r2082, [%rd81];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2092, %r2089}, {%r389, %r392}, {%r2075}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2101, %r2098}, {%r389, %r392}, {%r2082}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2085, %r426;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2087, %r2085, %r2089;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2090, %r423, %r2092, %r2087;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2094, %r426;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2096, %r2094, %r2098;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2099, %r423, %r2101, %r2096;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2103, %r426, %r2092;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2106, %r423, %r2089, %r2103;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2110, %r426, %r2101;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2113, %r423, %r2098, %r2110;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2136, %r2139}, {%r465, %r468}, {%r2090, %r2106}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2143, %r2147}, {%r465, %r468}, {%r2099, %r2113}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2135, %r2136, %r2136;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2138, %r2139, %r2139, %r2135;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2142, %r2143, %r2143, %r2138;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2146, %r2147, %r2147, %r2142;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3431, %r1816, %r2146, %r2067;
	// end inline asm
	add.s32 	%r3429, %r3440, 4;
	setp.ne.s32 	%p284, %r3429, 12;
	@%p284 bra 	$L__BB0_152;
// %bb.213:                             // %pass13294
                                        //   in Loop: Header=BB0_206 Depth=2
	shl.b32 	%r2155, %r3430, 20;
	or.b32  	%r2156, %r180, %r2155;
	cvt.u64.u32 	%rd259, %r2156;
	add.s64 	%rd260, %rd259, %rd18;
	shr.u64 	%rd261, %rd260, 34;
	add.s64 	%rd262, %rd260, %rd261;
	shr.s64 	%rd263, %rd262, 30;
	setp.lt.s64 	%p285, %rd260, 0;
	and.b64  	%rd264, %rd262, -1073741824;
	setp.ne.s64 	%p286, %rd264, %rd260;
	and.pred  	%p287, %p285, %p286;
	selp.u64 	%rd265, 1, 0, %p287;
	sub.s64 	%rd266, %rd265, %rd263;
	shl.b64 	%rd267, %rd266, 30;
	add.s64 	%rd268, %rd267, %rd260;
	shl.b64 	%rd269, %rd268, 2;
	add.s64 	%rd270, %rd4, %rd269;
	st.global.u32 	[%rd270], %r3431;
	add.s32 	%r3430, %r3430, 1;
	mov.u32 	%r3429, 0;
	mov.u32 	%r3431, %r3429;
	bra.uni 	$L__BB0_152;
$L__BB0_153:                            // %L29442.preheader
                                        //   in Loop: Header=BB0_188 Depth=1
	or.b32  	%r2158, %r182, 64;
	add.s32 	%r2159, %r179, %r2158;
	mul.wide.u32 	%rd271, %r2159, 4;
	add.s64 	%rd7, %rd101, %rd271;
	cvt.u64.u32 	%rd273, %r2158;
	add.s64 	%rd274, %rd55, %rd273;
	shl.b64 	%rd275, %rd274, 2;
	add.s64 	%rd8, %rd101, %rd275;
	or.b32  	%r2160, %r182, 128;
	add.s32 	%r2161, %r179, %r2160;
	mul.wide.u32 	%rd278, %r2161, 4;
	add.s64 	%rd10, %rd101, %rd278;
	cvt.u64.u32 	%rd279, %r2160;
	add.s64 	%rd280, %rd55, %rd279;
	shl.b64 	%rd281, %rd280, 2;
	add.s64 	%rd11, %rd101, %rd281;
	or.b32  	%r2162, %r182, 192;
	add.s32 	%r2163, %r179, %r2162;
	mul.wide.u32 	%rd284, %r2163, 4;
	add.s64 	%rd13, %rd101, %rd284;
	cvt.u64.u32 	%rd285, %r2162;
	add.s64 	%rd286, %rd55, %rd285;
	shl.b64 	%rd287, %rd286, 2;
	add.s64 	%rd14, %rd101, %rd287;
	mov.u32 	%r3428, 16;
	bra.uni 	$L__BB0_154;
$L__BB0_158:                            // %L46601
                                        //   in Loop: Header=BB0_154 Depth=2
	bar.sync 	0;
	add.s32 	%r3428, %r3428, -8;
	setp.ne.s32 	%p302, %r3428, -16;
	@%p302 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_159;
$L__BB0_154:                            // %L29442
                                        //   Parent Loop BB0_188 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.lt.u32 	%p289, %r3, 16;
	setp.eq.s32 	%p290, %r3428, 16;
	selp.b32 	%r2692, %r215, 0, %p290;
	setp.eq.s32 	%p291, %r3428, 8;
	selp.b32 	%r2693, %r219, %r2692, %p291;
	setp.eq.s32 	%p292, %r3428, 0;
	selp.b32 	%r2694, %r223, %r2693, %p292;
	setp.eq.s32 	%p293, %r3428, -8;
	selp.b32 	%r2695, %r227, %r2694, %p293;
	selp.b32 	%r2696, %r216, 0, %p290;
	selp.b32 	%r2697, %r220, %r2696, %p291;
	selp.b32 	%r2698, %r224, %r2697, %p292;
	selp.b32 	%r2699, %r228, %r2698, %p293;
	selp.b32 	%r2700, %r217, 0, %p290;
	selp.b32 	%r2701, %r221, %r2700, %p291;
	selp.b32 	%r2702, %r225, %r2701, %p292;
	selp.b32 	%r2703, %r229, %r2702, %p293;
	selp.b32 	%r2704, %r218, 0, %p290;
	selp.b32 	%r2705, %r222, %r2704, %p291;
	selp.b32 	%r2706, %r226, %r2705, %p292;
	selp.b32 	%r2707, %r230, %r2706, %p293;
	// begin inline asm
	mov.b32 %r2191, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2202, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2708, %r2695, 8;
	xor.b32  	%r2201, %r2708, 8947848;
	// begin inline asm
	lop3.b32 %r2188, %r1084, %r2201, %r2191, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2192, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2193, %r2191, %r2192;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2196, %r2188, %r2193;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2199, %r1095, %r2201, %r2202, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2203, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2204, %r2202, %r2203;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2207, %r2199, %r2204;
	// end inline asm
	// begin inline asm
	mov.b32 %r2237, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2248, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2709, %r2699, 8;
	xor.b32  	%r2247, %r2709, 8947848;
	// begin inline asm
	lop3.b32 %r2234, %r1084, %r2247, %r2237, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2238, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2239, %r2237, %r2238;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2242, %r2234, %r2239;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2245, %r1095, %r2247, %r2248, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2249, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2250, %r2248, %r2249;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2253, %r2245, %r2250;
	// end inline asm
	// begin inline asm
	mov.b32 %r2283, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2294, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2710, %r2703, 8;
	xor.b32  	%r2293, %r2710, 8947848;
	// begin inline asm
	lop3.b32 %r2280, %r1084, %r2293, %r2283, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2284, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2285, %r2283, %r2284;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2288, %r2280, %r2285;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2291, %r1095, %r2293, %r2294, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2295, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2296, %r2294, %r2295;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2299, %r2291, %r2296;
	// end inline asm
	// begin inline asm
	mov.b32 %r2329, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2340, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2711, %r2707, 8;
	xor.b32  	%r2339, %r2711, 8947848;
	// begin inline asm
	lop3.b32 %r2326, %r1084, %r2339, %r2329, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2330, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2331, %r2329, %r2330;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2334, %r2326, %r2331;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2337, %r1095, %r2339, %r2340, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2341, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2342, %r2340, %r2341;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2345, %r2337, %r2342;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2196;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2348, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r2207;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2351, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2242;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2354, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r2253;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2357, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2288;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2360, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r2299;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2363, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2334;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2366, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r2345;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2369, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2435, %r2432}, {%r292, %r295}, {%r2348}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2444, %r2441}, {%r292, %r295}, {%r2351}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2453, %r2450}, {%r292, %r295}, {%r2354}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2462, %r2459}, {%r292, %r295}, {%r2357}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2471, %r2468}, {%r292, %r295}, {%r2360}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2480, %r2477}, {%r292, %r295}, {%r2363}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2489, %r2486}, {%r292, %r295}, {%r2366}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2498, %r2495}, {%r292, %r295}, {%r2369}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2428, %r333;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2430, %r2428, %r2432;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2433, %r330, %r2435, %r2430;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2437, %r333;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2439, %r2437, %r2441;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2442, %r330, %r2444, %r2439;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2446, %r333;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2448, %r2446, %r2450;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2451, %r330, %r2453, %r2448;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2455, %r333;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2457, %r2455, %r2459;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2460, %r330, %r2462, %r2457;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2464, %r333;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2466, %r2464, %r2468;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2469, %r330, %r2471, %r2466;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2473, %r333;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2475, %r2473, %r2477;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2478, %r330, %r2480, %r2475;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2482, %r333;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2484, %r2482, %r2486;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2487, %r330, %r2489, %r2484;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2491, %r333;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2493, %r2491, %r2495;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2496, %r330, %r2498, %r2493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2500, %r333, %r2435;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2503, %r330, %r2432, %r2500;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2507, %r333, %r2444;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2510, %r330, %r2441, %r2507;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2514, %r333, %r2453;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2517, %r330, %r2450, %r2514;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2521, %r333, %r2462;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2524, %r330, %r2459, %r2521;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2528, %r333, %r2471;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2531, %r330, %r2468, %r2528;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2535, %r333, %r2480;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2538, %r330, %r2477, %r2535;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2542, %r333, %r2489;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2545, %r330, %r2486, %r2542;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2549, %r333, %r2498;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2552, %r330, %r2495, %r2549;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2629, %r2630}, {%r377, %r380}, {%r2433, %r2503}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2637, %r2638}, {%r377, %r380}, {%r2442, %r2510}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2645, %r2646}, {%r377, %r380}, {%r2451, %r2517}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2653, %r2654}, {%r377, %r380}, {%r2460, %r2524}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2661, %r2662}, {%r377, %r380}, {%r2469, %r2531}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2669, %r2670}, {%r377, %r380}, {%r2478, %r2538}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2677, %r2678}, {%r377, %r380}, {%r2487, %r2545}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2685, %r2686}, {%r377, %r380}, {%r2496, %r2552}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2628, %r2629, %r2630, %r826;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2632, %r2629, %r2630, %r830;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2636, %r2637, %r2638, %r826;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2640, %r2637, %r2638, %r830;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2644, %r2645, %r2646, %r826;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2648, %r2645, %r2646, %r830;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2652, %r2653, %r2654, %r826;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2656, %r2653, %r2654, %r830;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2660, %r2661, %r2662, %r826;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2664, %r2661, %r2662, %r830;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2668, %r2669, %r2670, %r826;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2672, %r2669, %r2670, %r830;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2676, %r2677, %r2678, %r826;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2680, %r2677, %r2678, %r830;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2684, %r2685, %r2686, %r826;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2688, %r2685, %r2686, %r830;
	// end inline asm
	st.shared.u32 	[%rd54], %r2628;
	st.shared.u32 	[%rd58+16576], %r2632;
	st.shared.u32 	[%rd58+64], %r2636;
	st.shared.u32 	[%rd58+16640], %r2640;
	st.shared.u32 	[%rd7], %r2644;
	st.shared.u32 	[%rd8+16576], %r2648;
	st.shared.u32 	[%rd8+64], %r2652;
	st.shared.u32 	[%rd8+16640], %r2656;
	st.shared.u32 	[%rd10], %r2660;
	st.shared.u32 	[%rd11+16576], %r2664;
	st.shared.u32 	[%rd11+64], %r2668;
	st.shared.u32 	[%rd11+16640], %r2672;
	st.shared.u32 	[%rd13], %r2676;
	st.shared.u32 	[%rd14+16576], %r2680;
	st.shared.u32 	[%rd14+64], %r2684;
	st.shared.u32 	[%rd14+16640], %r2688;
	@%p289 bra 	$L__BB0_214;
	bra.uni 	$L__BB0_155;
$L__BB0_214:                            // %pass15819
                                        //   in Loop: Header=BB0_154 Depth=2
	st.shared.u32 	[%rd54], %r2628;
	st.shared.u32 	[%rd58+16576], %r2632;
	st.shared.u32 	[%rd58+64], %r2636;
	st.shared.u32 	[%rd58+16640], %r2640;
	st.shared.u32 	[%rd7], %r2644;
	st.shared.u32 	[%rd8+16576], %r2648;
	st.shared.u32 	[%rd8+64], %r2652;
	st.shared.u32 	[%rd8+16640], %r2656;
	st.shared.u32 	[%rd10], %r2660;
	st.shared.u32 	[%rd11+16576], %r2664;
	st.shared.u32 	[%rd11+64], %r2668;
	st.shared.u32 	[%rd11+16640], %r2672;
	st.shared.u32 	[%rd13], %r2676;
	st.shared.u32 	[%rd14+16576], %r2680;
	st.shared.u32 	[%rd14+64], %r2684;
	st.shared.u32 	[%rd14+16640], %r2688;
$L__BB0_155:                            // %L38799
                                        //   in Loop: Header=BB0_154 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r2716, [%rd16];
	ld.shared.u32 	%r2723, [%rd17+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2733, %r2730}, {%r389, %r392}, {%r2716}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2742, %r2739}, {%r389, %r392}, {%r2723}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2726, %r426;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2728, %r2726, %r2730;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2731, %r423, %r2733, %r2728;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2735, %r426;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2737, %r2735, %r2739;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2740, %r423, %r2742, %r2737;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2744, %r426, %r2733;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2747, %r423, %r2730, %r2744;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2751, %r426, %r2742;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2754, %r423, %r2739, %r2751;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2777, %r2780}, {%r465, %r468}, {%r2731, %r2747}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2784, %r2788}, {%r465, %r468}, {%r2740, %r2754}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2776, %r2777, %r2777;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2779, %r2780, %r2780, %r2776;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2783, %r2784, %r2784, %r2779;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2787, %r2788, %r2788, %r2783;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2791, %r1816, %r2787, %r3431;
	// end inline asm
	ld.shared.u32 	%r2799, [%rd68];
	ld.shared.u32 	%r2806, [%rd69];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2816, %r2813}, {%r389, %r392}, {%r2799}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2825, %r2822}, {%r389, %r392}, {%r2806}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2809, %r426;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2811, %r2809, %r2813;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2814, %r423, %r2816, %r2811;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2818, %r426;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2820, %r2818, %r2822;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2823, %r423, %r2825, %r2820;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2827, %r426, %r2816;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2830, %r423, %r2813, %r2827;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2834, %r426, %r2825;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2837, %r423, %r2822, %r2834;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2860, %r2863}, {%r465, %r468}, {%r2814, %r2830}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2867, %r2871}, {%r465, %r468}, {%r2823, %r2837}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2859, %r2860, %r2860;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2862, %r2863, %r2863, %r2859;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2866, %r2867, %r2867, %r2862;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2870, %r2871, %r2871, %r2866;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2874, %r1816, %r2870, %r2791;
	// end inline asm
	ld.shared.u32 	%r2882, [%rd70];
	ld.shared.u32 	%r2889, [%rd71];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2899, %r2896}, {%r389, %r392}, {%r2882}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2908, %r2905}, {%r389, %r392}, {%r2889}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2892, %r426;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2894, %r2892, %r2896;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2897, %r423, %r2899, %r2894;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2901, %r426;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2903, %r2901, %r2905;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2906, %r423, %r2908, %r2903;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2910, %r426, %r2899;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2913, %r423, %r2896, %r2910;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2917, %r426, %r2908;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2920, %r423, %r2905, %r2917;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2943, %r2946}, {%r465, %r468}, {%r2897, %r2913}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2950, %r2954}, {%r465, %r468}, {%r2906, %r2920}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2942, %r2943, %r2943;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2945, %r2946, %r2946, %r2942;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2949, %r2950, %r2950, %r2945;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2953, %r2954, %r2954, %r2949;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2957, %r1816, %r2953, %r2874;
	// end inline asm
	ld.shared.u32 	%r2965, [%rd72];
	ld.shared.u32 	%r2972, [%rd73];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2982, %r2979}, {%r389, %r392}, {%r2965}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2991, %r2988}, {%r389, %r392}, {%r2972}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2975, %r426;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2977, %r2975, %r2979;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2980, %r423, %r2982, %r2977;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2984, %r426;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2986, %r2984, %r2988;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2989, %r423, %r2991, %r2986;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2993, %r426, %r2982;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2996, %r423, %r2979, %r2993;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3000, %r426, %r2991;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3003, %r423, %r2988, %r3000;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3026, %r3029}, {%r465, %r468}, {%r2980, %r2996}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3033, %r3037}, {%r465, %r468}, {%r2989, %r3003}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3025, %r3026, %r3026;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3028, %r3029, %r3029, %r3025;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3032, %r3033, %r3033, %r3028;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3036, %r3037, %r3037, %r3032;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3445, %r1816, %r3036, %r2957;
	// end inline asm
	add.s32 	%r3443, %r3429, 4;
	setp.eq.s32 	%p294, %r3443, 12;
	@%p294 bra 	$L__BB0_156;
	bra.uni 	$L__BB0_157;
$L__BB0_156:                            // %pass19480
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r3045, %r3430, 20;
	or.b32  	%r3046, %r180, %r3045;
	cvt.u64.u32 	%rd290, %r3046;
	add.s64 	%rd291, %rd290, %rd18;
	shr.u64 	%rd292, %rd291, 34;
	add.s64 	%rd293, %rd291, %rd292;
	shr.s64 	%rd294, %rd293, 30;
	setp.lt.s64 	%p295, %rd291, 0;
	and.b64  	%rd295, %rd293, -1073741824;
	setp.ne.s64 	%p296, %rd295, %rd291;
	and.pred  	%p297, %p295, %p296;
	selp.u64 	%rd296, 1, 0, %p297;
	sub.s64 	%rd297, %rd296, %rd294;
	shl.b64 	%rd298, %rd297, 30;
	add.s64 	%rd299, %rd298, %rd291;
	shl.b64 	%rd300, %rd299, 2;
	add.s64 	%rd301, %rd4, %rd300;
	st.global.u32 	[%rd301], %r3445;
	add.s32 	%r3430, %r3430, 1;
	mov.u32 	%r3443, 0;
	mov.u32 	%r3445, %r3443;
$L__BB0_157:                            // %pass19725
                                        //   in Loop: Header=BB0_154 Depth=2
	ld.shared.u32 	%r3051, [%rd74];
	ld.shared.u32 	%r3058, [%rd75];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3068, %r3065}, {%r389, %r392}, {%r3051}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3077, %r3074}, {%r389, %r392}, {%r3058}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3061, %r426;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3063, %r3061, %r3065;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3066, %r423, %r3068, %r3063;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3070, %r426;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3072, %r3070, %r3074;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3075, %r423, %r3077, %r3072;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3079, %r426, %r3068;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3082, %r423, %r3065, %r3079;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3086, %r426, %r3077;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3089, %r423, %r3074, %r3086;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3112, %r3115}, {%r465, %r468}, {%r3066, %r3082}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3119, %r3123}, {%r465, %r468}, {%r3075, %r3089}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3111, %r3112, %r3112;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3114, %r3115, %r3115, %r3111;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3118, %r3119, %r3119, %r3114;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3122, %r3123, %r3123, %r3118;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3126, %r1816, %r3122, %r3445;
	// end inline asm
	ld.shared.u32 	%r3134, [%rd76];
	ld.shared.u32 	%r3141, [%rd77];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3151, %r3148}, {%r389, %r392}, {%r3134}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3160, %r3157}, {%r389, %r392}, {%r3141}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3144, %r426;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3146, %r3144, %r3148;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3149, %r423, %r3151, %r3146;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3153, %r426;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3155, %r3153, %r3157;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3158, %r423, %r3160, %r3155;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3162, %r426, %r3151;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3165, %r423, %r3148, %r3162;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3169, %r426, %r3160;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3172, %r423, %r3157, %r3169;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3195, %r3198}, {%r465, %r468}, {%r3149, %r3165}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3202, %r3206}, {%r465, %r468}, {%r3158, %r3172}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3194, %r3195, %r3195;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3197, %r3198, %r3198, %r3194;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3201, %r3202, %r3202, %r3197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3205, %r3206, %r3206, %r3201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3209, %r1816, %r3205, %r3126;
	// end inline asm
	ld.shared.u32 	%r3217, [%rd78];
	ld.shared.u32 	%r3224, [%rd79];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3234, %r3231}, {%r389, %r392}, {%r3217}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3243, %r3240}, {%r389, %r392}, {%r3224}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3227, %r426;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3229, %r3227, %r3231;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3232, %r423, %r3234, %r3229;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3236, %r426;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3238, %r3236, %r3240;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3241, %r423, %r3243, %r3238;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3245, %r426, %r3234;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3248, %r423, %r3231, %r3245;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3252, %r426, %r3243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3255, %r423, %r3240, %r3252;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3278, %r3281}, {%r465, %r468}, {%r3232, %r3248}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3285, %r3289}, {%r465, %r468}, {%r3241, %r3255}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3277, %r3278, %r3278;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3280, %r3281, %r3281, %r3277;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3284, %r3285, %r3285, %r3280;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3288, %r3289, %r3289, %r3284;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3292, %r1816, %r3288, %r3209;
	// end inline asm
	ld.shared.u32 	%r3300, [%rd80];
	ld.shared.u32 	%r3307, [%rd81];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3317, %r3314}, {%r389, %r392}, {%r3300}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3326, %r3323}, {%r389, %r392}, {%r3307}, {%r1206, %r1206};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3310, %r426;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3312, %r3310, %r3314;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3315, %r423, %r3317, %r3312;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3319, %r426;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3321, %r3319, %r3323;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3324, %r423, %r3326, %r3321;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3328, %r426, %r3317;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3331, %r423, %r3314, %r3328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3335, %r426, %r3326;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3338, %r423, %r3323, %r3335;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3361, %r3364}, {%r465, %r468}, {%r3315, %r3331}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3368, %r3372}, {%r465, %r468}, {%r3324, %r3338}, {%r1206, %r1206}, %r181, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3360, %r3361, %r3361;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3363, %r3364, %r3364, %r3360;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3367, %r3368, %r3368, %r3363;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3371, %r3372, %r3372, %r3367;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3431, %r1816, %r3371, %r3292;
	// end inline asm
	add.s32 	%r3429, %r3443, 4;
	setp.ne.s32 	%p298, %r3429, 12;
	@%p298 bra 	$L__BB0_158;
// %bb.215:                             // %pass21208
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r3380, %r3430, 20;
	or.b32  	%r3381, %r180, %r3380;
	cvt.u64.u32 	%rd302, %r3381;
	add.s64 	%rd303, %rd302, %rd18;
	shr.u64 	%rd304, %rd303, 34;
	add.s64 	%rd305, %rd303, %rd304;
	shr.s64 	%rd306, %rd305, 30;
	setp.lt.s64 	%p299, %rd303, 0;
	and.b64  	%rd307, %rd305, -1073741824;
	setp.ne.s64 	%p300, %rd307, %rd303;
	and.pred  	%p301, %p299, %p300;
	selp.u64 	%rd308, 1, 0, %p301;
	sub.s64 	%rd309, %rd308, %rd306;
	shl.b64 	%rd310, %rd309, 30;
	add.s64 	%rd311, %rd310, %rd303;
	shl.b64 	%rd312, %rd311, 2;
	add.s64 	%rd313, %rd4, %rd312;
	st.global.u32 	[%rd313], %r3431;
	add.s32 	%r3430, %r3430, 1;
	mov.u32 	%r3429, %r1206;
	mov.u32 	%r3431, %r1206;
	bra.uni 	$L__BB0_158;
$L__BB0_160:                            // %L46632
	mov.u32 	%r3382, 0;
	st.global.u32 	[%rd6], %r3382;
	ret;
$L__BB0_207:                            // %post_box_union
	mov.u64 	%rd245, exception4152;
	cvta.global.u64 	%rd246, %rd245;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd246;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r261;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_136:                            // %L6855
	mov.u32 	%r3398, 5;
	st.global.u32 	[%rd6], %r3398;
	mov.u64 	%rd344, exception4104;
	cvta.global.u64 	%rd345, %rd344;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd345;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r261;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_137:                            // %L7011
	mov.u32 	%r3397, 5;
	st.global.u32 	[%rd6], %r3397;
	mov.u64 	%rd342, exception4104;
	cvta.global.u64 	%rd343, %rd342;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd343;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r261;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_138:                            // %L7167
	mov.u32 	%r3396, 5;
	st.global.u32 	[%rd6], %r3396;
	mov.u64 	%rd340, exception4104;
	cvta.global.u64 	%rd341, %rd340;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd341;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r261;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_139:                            // %L7323
	mov.u32 	%r3395, 5;
	st.global.u32 	[%rd6], %r3395;
	mov.u64 	%rd338, exception4104;
	cvta.global.u64 	%rd339, %rd338;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd339;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r261;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_140:                            // %L7479
	mov.u32 	%r3394, 5;
	st.global.u32 	[%rd6], %r3394;
	mov.u64 	%rd336, exception4104;
	cvta.global.u64 	%rd337, %rd336;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd337;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r261;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_141:                            // %L7635
	mov.u32 	%r3393, 5;
	st.global.u32 	[%rd6], %r3393;
	mov.u64 	%rd334, exception4104;
	cvta.global.u64 	%rd335, %rd334;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd335;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r261;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_142:                            // %L7791
	mov.u32 	%r3392, 5;
	st.global.u32 	[%rd6], %r3392;
	mov.u64 	%rd332, exception4104;
	cvta.global.u64 	%rd333, %rd332;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd333;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r261;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_143:                            // %L7947
	mov.u32 	%r3391, 5;
	st.global.u32 	[%rd6], %r3391;
	mov.u64 	%rd330, exception4104;
	cvta.global.u64 	%rd331, %rd330;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd331;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r261;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_144:                            // %L8103
	mov.u32 	%r3390, 5;
	st.global.u32 	[%rd6], %r3390;
	mov.u64 	%rd328, exception4104;
	cvta.global.u64 	%rd329, %rd328;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd329;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r261;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L8259
	mov.u32 	%r3389, 5;
	st.global.u32 	[%rd6], %r3389;
	mov.u64 	%rd326, exception4104;
	cvta.global.u64 	%rd327, %rd326;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd327;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r261;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L8415
	mov.u32 	%r3388, 5;
	st.global.u32 	[%rd6], %r3388;
	mov.u64 	%rd324, exception4104;
	cvta.global.u64 	%rd325, %rd324;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd325;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r261;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L8571
	mov.u32 	%r3387, 5;
	st.global.u32 	[%rd6], %r3387;
	mov.u64 	%rd322, exception4104;
	cvta.global.u64 	%rd323, %rd322;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd323;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r261;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L8727
	mov.u32 	%r3386, 5;
	st.global.u32 	[%rd6], %r3386;
	mov.u64 	%rd320, exception4104;
	cvta.global.u64 	%rd321, %rd320;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd321;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r261;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L8883
	mov.u32 	%r3385, 5;
	st.global.u32 	[%rd6], %r3385;
	mov.u64 	%rd318, exception4104;
	cvta.global.u64 	%rd319, %rd318;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd319;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r261;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L9039
	mov.u32 	%r3384, 5;
	st.global.u32 	[%rd6], %r3384;
	mov.u64 	%rd316, exception4104;
	cvta.global.u64 	%rd317, %rd316;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd317;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r261;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_151:                            // %L9195
	mov.u32 	%r3383, 5;
	st.global.u32 	[%rd6], %r3383;
	mov.u64 	%rd314, exception4104;
	cvta.global.u64 	%rd315, %rd314;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd315;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r261;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L166
	mov.u32 	%r3400, 2;
	st.global.u32 	[%rd6], %r3400;
	mov.u64 	%rd348, exception4104;
	cvta.global.u64 	%rd349, %rd348;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd349;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r261;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_13:                             // %L307
	mov.u32 	%r3399, 3;
	st.global.u32 	[%rd6], %r3399;
	mov.u64 	%rd346, exception4104;
	cvta.global.u64 	%rd347, %rd346;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd347;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r261;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd88, exception1;
	cvta.global.u64 	%rd89, %rd88;
	{ // callseq 45, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd89;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 45
	{ // callseq 46, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r261;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 46
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_135:                            // %L1153
	add.u64 	%rd87, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r3, %r1};
	st.local.v2.u32 	[%rd5+8], {%r4, %r86};
	st.local.u32 	[%rd5+16], %r87;
	mov.u64 	%rd93, __unnamed_1;
	cvta.global.u64 	%rd94, %rd93;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd94;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd87;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r478, [retval0+0];
	} // callseq 47
	mov.u32 	%r480, 4;
	st.global.u32 	[%rd6], %r480;
	mov.u64 	%rd96, exception4104;
	cvta.global.u64 	%rd97, %rd96;
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd97;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 48
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd82;
	st.param.b32 	[param0+8], %r261;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 49
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
