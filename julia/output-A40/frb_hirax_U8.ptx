// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception4066[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception4114[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 512, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<303>;
	.reg .b16 	%rs<97>;
	.reg .b32 	%r<3404>;
	.reg .f32 	%f<752>;
	.reg .b64 	%rd<316>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r248, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd74, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r257, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r257, 34943;
	@%p2 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd75, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r249, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r3, %r2, 9;
	mov.u32 	%r4, %tid.y;
	shl.b32 	%r5, %r4, 5;
	or.b32  	%r258, %r3, %r1;
	or.b32  	%r259, %r258, %r5;
	mul.wide.u32 	%rd82, %r259, 4;
	add.s64 	%rd6, %rd75, %rd82;
	mov.u32 	%r260, 1;
	st.global.u32 	[%rd6], %r260;
	setp.gt.u32 	%p3, %r249, 8191;
	@%p3 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r250, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p4, %r250, %r249;
	setp.gt.s32 	%p5, %r250, 16383;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r251, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r250, %r249;
	and.b32  	%r261, %r6, 63;
	setp.ne.s32 	%p7, %r261, 0;
	setp.gt.u32 	%p8, %r251, 1023;
	or.pred  	%p9, %p7, %p8;
	@%p9 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r252, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p10, %r252, %r251;
	setp.lt.s32 	%p11, %r252, 2048;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r262, %r252, %r251;
	mul.hi.s32 	%r263, %r6, 715827883;
	shr.u32 	%r264, %r263, 31;
	shr.s32 	%r265, %r263, 3;
	add.s32 	%r266, %r265, %r264;
	setp.eq.s32 	%p13, %r262, %r266;
	@%p13 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L258
	ld.param.u32 	%r253, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p14, %r253, 0;
	@%p14 bra 	$L__BB0_13;
// %bb.9:                               // %L260
	ld.param.u32 	%r254, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p15, %r254, %r253;
	setp.gt.s32 	%p16, %r254, 128;
	or.pred  	%p17, %p15, %p16;
	@%p17 bra 	$L__BB0_13;
// %bb.10:                              // %L270
	ld.param.u32 	%r255, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r7, %r254, %r253;
	and.b32  	%r267, %r7, 7;
	setp.ne.s32 	%p18, %r267, 0;
	setp.lt.s32 	%p19, %r255, 0;
	or.pred  	%p20, %p18, %p19;
	@%p20 bra 	$L__BB0_13;
// %bb.11:                              // %L276
	ld.param.u32 	%r256, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p21, %r256, %r255;
	setp.gt.s32 	%p22, %r256, 2048;
	or.pred  	%p23, %p21, %p22;
	@%p23 bra 	$L__BB0_13;
// %bb.12:                              // %L286
	sub.s32 	%r268, %r256, %r255;
	and.b32  	%r269, %r268, 7;
	setp.eq.s32 	%p24, %r269, 0;
	setp.eq.s32 	%p25, %r268, %r7;
	and.pred  	%p26, %p24, %p25;
	@%p26 bra 	$L__BB0_160;
	bra.uni 	$L__BB0_13;
$L__BB0_160:                            // %pass162
	and.b32  	%r146, %r1, 3;
	shr.u32 	%r147, %r1, 2;
	mul.lo.s32 	%r270, %r146, %r147;
	and.b32  	%r271, %r270, 7;
	cvt.rn.f32.s32 	%f185, %r271;
	mov.f32 	%f186, 0f40800000;
	div.approx.f32 	%f151, %f185, %f186;
	abs.f32 	%f750, %f151;
	setp.lt.f32 	%p27, %f750, 0f40000000;
	mov.f32 	%f703, 0f40000000;
	setp.gtu.f32 	%p298, %f750, 0f4B800000;
	mov.f32 	%f746, %f750;
	@%p27 bra 	$L__BB0_172;
// %bb.161:
	@%p298 bra 	$L__BB0_168;
	bra.uni 	$L__BB0_162;
$L__BB0_168:
	mov.b32 	%r149, %f750;
	and.b32  	%r272, %r149, 8388607;
	or.b32  	%r3399, %r272, 1065353216;
	mov.b32 	%f745, %r3399;
	add.s32 	%r273, %r149, -1073741824;
	and.b32  	%r3400, %r273, -8388608;
	setp.eq.s32 	%p34, %r3400, 0;
	@%p34 bra 	$L__BB0_171;
// %bb.169:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f196, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f195,%f196;
	// end inline asm
$L__BB0_170:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r274, %r3400, 192937984;
	add.s32 	%r275, %r3399, %r274;
	mov.b32 	%f197, %r275;
	mul.f32 	%f198, %f195, %f197;
	sub.f32 	%f199, %f197, %f198;
	fma.rn.f32 	%f200, %f199, %f195, %f198;
	sub.f32 	%f201, %f197, %f200;
	fma.rz.f32 	%f202, %f201, %f195, %f200;
	cvt.rzi.f32.f32 	%f203, %f202;
	sub.f32 	%f745, %f197, %f203;
	sub.s32 	%r3400, %r3400, %r274;
	mov.b32 	%r3399, %f745;
	setp.ne.s32 	%p35, %r3400, 0;
	setp.ne.s32 	%p36, %r3399, 0;
	and.pred  	%p37, %p35, %p36;
	@%p37 bra 	$L__BB0_170;
$L__BB0_171:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p38, %r149, 2139095039;
	selp.f32 	%f204, 0f7FFFFFFF, 0f4B800000, %p38;
	mul.f32 	%f205, %f745, 0f34000000;
	mul.f32 	%f746, %f204, %f205;
	bra.uni 	$L__BB0_172;
$L__BB0_162:                            // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f188, %f750, %f703;
	cvt.rzi.f32.f32 	%f744, %f188;
	fma.rn.f32 	%f154, %f744, 0fC0000000, %f750;
	mov.b32 	%r148, %f154;
	setp.lt.u32 	%p29, %r148, 1073741824;
	@%p29 bra 	$L__BB0_167;
// %bb.163:
	setp.lt.u32 	%p30, %r148, -2147483647;
	@%p30 bra 	$L__BB0_165;
// %bb.164:
	add.f32 	%f193, %f744, 0fBF800000;
	setp.lt.f32 	%p33, %f154, 0fC0000000;
	add.f32 	%f194, %f193, 0fBF800000;
	selp.f32 	%f744, %f194, %f193, %p33;
	bra.uni 	$L__BB0_167;
$L__BB0_165:
	add.f32 	%f744, %f744, 0f3F800000;
	setp.ltu.f32 	%p31, %f154, 0f40800000;
	@%p31 bra 	$L__BB0_167;
// %bb.166:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f189, %f744, 0f3F800000;
	fma.rn.f32 	%f191, %f703, 0fC0400000, %f154;
	setp.ge.f32 	%p32, %f191, 0f00000000;
	add.f32 	%f192, %f189, 0f3F800000;
	selp.f32 	%f744, %f192, %f189, %p32;
$L__BB0_167:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f746, %f744, 0fC0000000, %f750;
$L__BB0_172:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f206, %f746;
	setp.gtu.f32 	%p39, %f206, 0f7F800000;
	mov.b32 	%r276, %f151;
	and.b32  	%r156, %r276, -2147483648;
	@%p39 bra 	$L__BB0_174;
// %bb.173:
	mov.b32 	%r277, %f746;
	or.b32  	%r278, %r156, %r277;
	mov.b32 	%f746, %r278;
$L__BB0_174:                            // %__nv_fmodf.exit
	shl.b32 	%r159, %r1, 1;
	and.b32  	%r293, %r159, 2;
	mul.lo.s32 	%r160, %r293, %r147;
	cvt.rn.f32.s32 	%f239, %r160;
	mov.f32 	%f240, 0f41800000;
	div.approx.f32 	%f168, %f239, %f240;
	abs.f32 	%f726, %f168;
	setp.lt.f32 	%p47, %f726, 0f40000000;
	setp.gtu.f32 	%p299, %f726, 0f4B800000;
	mov.f32 	%f706, %f726;
	@%p47 bra 	$L__BB0_25;
// %bb.14:
	@%p299 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_15;
$L__BB0_21:
	mov.b32 	%r9, %f726;
	and.b32  	%r294, %r9, 8388607;
	or.b32  	%r3365, %r294, 1065353216;
	mov.b32 	%f705, %r3365;
	add.s32 	%r295, %r9, -1073741824;
	and.b32  	%r3366, %r295, -8388608;
	setp.eq.s32 	%p54, %r3366, 0;
	@%p54 bra 	$L__BB0_24;
// %bb.22:                              // %__nv_fmaf_rn.exit4.i.i.i2387.preheader
	mov.f32 	%f250, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f249,%f250;
	// end inline asm
$L__BB0_23:                             // %__nv_fmaf_rn.exit4.i.i.i2387
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r296, %r3366, 192937984;
	add.s32 	%r297, %r3365, %r296;
	mov.b32 	%f251, %r297;
	mul.f32 	%f252, %f249, %f251;
	sub.f32 	%f253, %f251, %f252;
	fma.rn.f32 	%f254, %f253, %f249, %f252;
	sub.f32 	%f255, %f251, %f254;
	fma.rz.f32 	%f256, %f255, %f249, %f254;
	cvt.rzi.f32.f32 	%f257, %f256;
	sub.f32 	%f705, %f251, %f257;
	sub.s32 	%r3366, %r3366, %r296;
	mov.b32 	%r3365, %f705;
	setp.ne.s32 	%p55, %r3366, 0;
	setp.ne.s32 	%p56, %r3365, 0;
	and.pred  	%p57, %p55, %p56;
	@%p57 bra 	$L__BB0_23;
$L__BB0_24:                             // %__internal_fmodf_slowpath_mod.exit.i.i2389
	setp.gt.u32 	%p58, %r9, 2139095039;
	selp.f32 	%f258, 0f7FFFFFFF, 0f4B800000, %p58;
	mul.f32 	%f259, %f705, 0f34000000;
	mul.f32 	%f706, %f258, %f259;
	bra.uni 	$L__BB0_25;
$L__BB0_15:                             // %__nv_fast_fdividef.exit.i.i.i2366
	div.approx.f32 	%f242, %f726, %f703;
	cvt.rzi.f32.f32 	%f704, %f242;
	fma.rn.f32 	%f2, %f704, 0fC0000000, %f726;
	mov.b32 	%r8, %f2;
	setp.lt.u32 	%p49, %r8, 1073741824;
	@%p49 bra 	$L__BB0_20;
// %bb.16:
	setp.lt.u32 	%p50, %r8, -2147483647;
	@%p50 bra 	$L__BB0_18;
// %bb.17:
	add.f32 	%f247, %f704, 0fBF800000;
	setp.lt.f32 	%p53, %f2, 0fC0000000;
	add.f32 	%f248, %f247, 0fBF800000;
	selp.f32 	%f704, %f248, %f247, %p53;
	bra.uni 	$L__BB0_20;
$L__BB0_18:
	add.f32 	%f704, %f704, 0f3F800000;
	setp.ltu.f32 	%p51, %f2, 0f40800000;
	@%p51 bra 	$L__BB0_20;
// %bb.19:                              // %__nv_fmaf_rn.exit.i.i.i2370
	add.f32 	%f243, %f704, 0f3F800000;
	fma.rn.f32 	%f245, %f703, 0fC0400000, %f2;
	setp.ge.f32 	%p52, %f245, 0f00000000;
	add.f32 	%f246, %f243, 0f3F800000;
	selp.f32 	%f704, %f246, %f243, %p52;
$L__BB0_20:                             // %__internal_fmodf_fastpath_quot.exit.i.i2373
	fma.rn.f32 	%f706, %f704, 0fC0000000, %f726;
$L__BB0_25:                             // %__internal_fmodf_kernel.exit.i2392
	abs.f32 	%f260, %f706;
	setp.gtu.f32 	%p59, %f260, 0f7F800000;
	mov.b32 	%r298, %f168;
	and.b32  	%r16, %r298, -2147483648;
	@%p59 bra 	$L__BB0_27;
// %bb.26:
	mov.b32 	%r299, %f706;
	or.b32  	%r300, %r16, %r299;
	mov.b32 	%f706, %r300;
$L__BB0_27:                             // %__nv_fmodf.exit2393
	add.s32 	%r309, %r160, %r147;
	cvt.rn.f32.s32 	%f291, %r309;
	div.approx.f32 	%f18, %f291, %f240;
	abs.f32 	%f730, %f18;
	setp.lt.f32 	%p67, %f730, 0f40000000;
	setp.gtu.f32 	%p300, %f730, 0f4B800000;
	mov.f32 	%f710, %f730;
	@%p67 bra 	$L__BB0_39;
// %bb.28:
	@%p300 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_29;
$L__BB0_35:
	mov.b32 	%r18, %f730;
	and.b32  	%r310, %r18, 8388607;
	or.b32  	%r3367, %r310, 1065353216;
	mov.b32 	%f709, %r3367;
	add.s32 	%r311, %r18, -1073741824;
	and.b32  	%r3368, %r311, -8388608;
	setp.eq.s32 	%p74, %r3368, 0;
	@%p74 bra 	$L__BB0_38;
// %bb.36:                              // %__nv_fmaf_rn.exit4.i.i.i2418.preheader
	mov.f32 	%f302, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f301,%f302;
	// end inline asm
$L__BB0_37:                             // %__nv_fmaf_rn.exit4.i.i.i2418
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r312, %r3368, 192937984;
	add.s32 	%r313, %r3367, %r312;
	mov.b32 	%f303, %r313;
	mul.f32 	%f304, %f301, %f303;
	sub.f32 	%f305, %f303, %f304;
	fma.rn.f32 	%f306, %f305, %f301, %f304;
	sub.f32 	%f307, %f303, %f306;
	fma.rz.f32 	%f308, %f307, %f301, %f306;
	cvt.rzi.f32.f32 	%f309, %f308;
	sub.f32 	%f709, %f303, %f309;
	sub.s32 	%r3368, %r3368, %r312;
	mov.b32 	%r3367, %f709;
	setp.ne.s32 	%p75, %r3368, 0;
	setp.ne.s32 	%p76, %r3367, 0;
	and.pred  	%p77, %p75, %p76;
	@%p77 bra 	$L__BB0_37;
$L__BB0_38:                             // %__internal_fmodf_slowpath_mod.exit.i.i2420
	setp.gt.u32 	%p78, %r18, 2139095039;
	selp.f32 	%f310, 0f7FFFFFFF, 0f4B800000, %p78;
	mul.f32 	%f311, %f709, 0f34000000;
	mul.f32 	%f710, %f310, %f311;
	bra.uni 	$L__BB0_39;
$L__BB0_29:                             // %__nv_fast_fdividef.exit.i.i.i2397
	div.approx.f32 	%f294, %f730, %f703;
	cvt.rzi.f32.f32 	%f708, %f294;
	fma.rn.f32 	%f21, %f708, 0fC0000000, %f730;
	mov.b32 	%r17, %f21;
	setp.lt.u32 	%p69, %r17, 1073741824;
	@%p69 bra 	$L__BB0_34;
// %bb.30:
	setp.lt.u32 	%p70, %r17, -2147483647;
	@%p70 bra 	$L__BB0_32;
// %bb.31:
	add.f32 	%f299, %f708, 0fBF800000;
	setp.lt.f32 	%p73, %f21, 0fC0000000;
	add.f32 	%f300, %f299, 0fBF800000;
	selp.f32 	%f708, %f300, %f299, %p73;
	bra.uni 	$L__BB0_34;
$L__BB0_32:
	add.f32 	%f708, %f708, 0f3F800000;
	setp.ltu.f32 	%p71, %f21, 0f40800000;
	@%p71 bra 	$L__BB0_34;
// %bb.33:                              // %__nv_fmaf_rn.exit.i.i.i2401
	add.f32 	%f295, %f708, 0f3F800000;
	fma.rn.f32 	%f297, %f703, 0fC0400000, %f21;
	setp.ge.f32 	%p72, %f297, 0f00000000;
	add.f32 	%f298, %f295, 0f3F800000;
	selp.f32 	%f708, %f298, %f295, %p72;
$L__BB0_34:                             // %__internal_fmodf_fastpath_quot.exit.i.i2404
	fma.rn.f32 	%f710, %f708, 0fC0000000, %f730;
$L__BB0_39:                             // %__internal_fmodf_kernel.exit.i2423
	abs.f32 	%f312, %f710;
	setp.gtu.f32 	%p79, %f312, 0f7F800000;
	mov.b32 	%r314, %f18;
	and.b32  	%r25, %r314, -2147483648;
	@%p79 bra 	$L__BB0_41;
// %bb.40:
	mov.b32 	%r315, %f710;
	or.b32  	%r316, %r25, %r315;
	mov.b32 	%f710, %r316;
$L__BB0_41:                             // %__nv_fmodf.exit2424
	mul.lo.s32 	%r28, %r159, %r147;
	and.b32  	%r331, %r28, 2;
	cvt.rn.f32.s32 	%f345, %r331;
	div.approx.f32 	%f35, %f345, %f703;
	abs.f32 	%f734, %f35;
	setp.lt.f32 	%p87, %f734, 0f40000000;
	setp.gtu.f32 	%p301, %f734, 0f4B800000;
	mov.f32 	%f714, %f734;
	@%p87 bra 	$L__BB0_53;
// %bb.42:
	@%p301 bra 	$L__BB0_49;
	bra.uni 	$L__BB0_43;
$L__BB0_49:
	mov.b32 	%r30, %f734;
	and.b32  	%r332, %r30, 8388607;
	or.b32  	%r3369, %r332, 1065353216;
	mov.b32 	%f713, %r3369;
	add.s32 	%r333, %r30, -1073741824;
	and.b32  	%r3370, %r333, -8388608;
	setp.eq.s32 	%p94, %r3370, 0;
	@%p94 bra 	$L__BB0_52;
// %bb.50:                              // %__nv_fmaf_rn.exit4.i.i.i2449.preheader
	mov.f32 	%f356, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f355,%f356;
	// end inline asm
$L__BB0_51:                             // %__nv_fmaf_rn.exit4.i.i.i2449
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r334, %r3370, 192937984;
	add.s32 	%r335, %r3369, %r334;
	mov.b32 	%f357, %r335;
	mul.f32 	%f358, %f355, %f357;
	sub.f32 	%f359, %f357, %f358;
	fma.rn.f32 	%f360, %f359, %f355, %f358;
	sub.f32 	%f361, %f357, %f360;
	fma.rz.f32 	%f362, %f361, %f355, %f360;
	cvt.rzi.f32.f32 	%f363, %f362;
	sub.f32 	%f713, %f357, %f363;
	sub.s32 	%r3370, %r3370, %r334;
	mov.b32 	%r3369, %f713;
	setp.ne.s32 	%p95, %r3370, 0;
	setp.ne.s32 	%p96, %r3369, 0;
	and.pred  	%p97, %p95, %p96;
	@%p97 bra 	$L__BB0_51;
$L__BB0_52:                             // %__internal_fmodf_slowpath_mod.exit.i.i2451
	setp.gt.u32 	%p98, %r30, 2139095039;
	selp.f32 	%f364, 0f7FFFFFFF, 0f4B800000, %p98;
	mul.f32 	%f365, %f713, 0f34000000;
	mul.f32 	%f714, %f364, %f365;
	bra.uni 	$L__BB0_53;
$L__BB0_43:                             // %__nv_fast_fdividef.exit.i.i.i2428
	div.approx.f32 	%f348, %f734, %f703;
	cvt.rzi.f32.f32 	%f712, %f348;
	fma.rn.f32 	%f38, %f712, 0fC0000000, %f734;
	mov.b32 	%r29, %f38;
	setp.lt.u32 	%p89, %r29, 1073741824;
	@%p89 bra 	$L__BB0_48;
// %bb.44:
	setp.lt.u32 	%p90, %r29, -2147483647;
	@%p90 bra 	$L__BB0_46;
// %bb.45:
	add.f32 	%f353, %f712, 0fBF800000;
	setp.lt.f32 	%p93, %f38, 0fC0000000;
	add.f32 	%f354, %f353, 0fBF800000;
	selp.f32 	%f712, %f354, %f353, %p93;
	bra.uni 	$L__BB0_48;
$L__BB0_46:
	add.f32 	%f712, %f712, 0f3F800000;
	setp.ltu.f32 	%p91, %f38, 0f40800000;
	@%p91 bra 	$L__BB0_48;
// %bb.47:                              // %__nv_fmaf_rn.exit.i.i.i2432
	add.f32 	%f349, %f712, 0f3F800000;
	fma.rn.f32 	%f351, %f703, 0fC0400000, %f38;
	setp.ge.f32 	%p92, %f351, 0f00000000;
	add.f32 	%f352, %f349, 0f3F800000;
	selp.f32 	%f712, %f352, %f349, %p92;
$L__BB0_48:                             // %__internal_fmodf_fastpath_quot.exit.i.i2435
	fma.rn.f32 	%f714, %f712, 0fC0000000, %f734;
$L__BB0_53:                             // %__internal_fmodf_kernel.exit.i2454
	mov.f32 	%f230, 0f00000000;
	abs.f32 	%f366, %f714;
	setp.gtu.f32 	%p99, %f366, 0f7F800000;
	mov.b32 	%r336, %f35;
	and.b32  	%r37, %r336, -2147483648;
	@%p99 bra 	$L__BB0_55;
// %bb.54:
	mov.b32 	%r337, %f714;
	or.b32  	%r338, %r37, %r337;
	mov.b32 	%f714, %r338;
$L__BB0_55:                             // %__nv_fmodf.exit2455
	add.f32 	%f367, %f714, %f714;
	mov.b32 	%r339, %f367;
	and.b32  	%r340, %r339, -2147483648;
	or.b32  	%r341, %r340, 1056964608;
	mov.b32 	%f368, %r341;
	add.f32 	%f369, %f367, %f368;
	cvt.rzi.f32.f32 	%f370, %f369;
	abs.f32 	%f371, %f367;
	setp.gt.f32 	%p100, %f371, 0f4B000000;
	selp.f32 	%f372, %f367, %f370, %p100;
	cvt.rzi.f32.f32 	%f373, %f367;
	setp.lt.f32 	%p101, %f371, 0f3F000000;
	selp.f32 	%f374, %f373, %f372, %p101;
	cvt.rzi.s32.f32 	%r342, %f374;
	fma.rn.f32 	%f375, %f374, 0fBF000000, %f714;
	mul.f32 	%f376, %f375, %f375;
	fma.rn.f32 	%f377, %f376, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f378, %f376, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f379, %f377, %f376, 0fC0A55DF6;
	fma.rn.f32 	%f380, %f378, %f376, 0f4081E0CF;
	fma.rn.f32 	%f381, %f376, %f375, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f376, 0fC09DE9E6;
	fma.rn.f32 	%f383, %f379, %f381, 0f00000000;
	fma.rn.f32 	%f384, %f382, %f376, 0f3F800000;
	fma.rn.f32 	%f385, %f375, 0f40490FDB, %f383;
	and.b32  	%r343, %r342, 1;
	setp.eq.b32 	%p102, %r343, 1;
	selp.f32 	%f386, %f384, %f385, %p102;
	selp.f32 	%f387, %f385, %f384, %p102;
	and.b32  	%r344, %r342, 2;
	setp.eq.s32 	%p103, %r344, 0;
	neg.f32 	%f388, %f386;
	selp.f32 	%f389, %f386, %f388, %p103;
	add.s32 	%r345, %r342, 1;
	and.b32  	%r346, %r345, 2;
	setp.eq.s32 	%p104, %r346, 0;
	sub.f32 	%f391, %f230, %f387;
	cvt.rzi.f32.f32 	%f393, %f714;
	setp.eq.f32 	%p105, %f393, %f714;
	mul.f32 	%f394, %f714, 0f00000000;
	selp.f32 	%f76, %f394, %f389, %p105;
	abs.f32 	%f395, %f714;
	add.s32 	%r347, %r28, %r147;
	and.b32  	%r348, %r347, 3;
	cvt.rn.f32.s32 	%f397, %r348;
	div.approx.f32 	%f54, %f397, %f703;
	abs.f32 	%f738, %f54;
	setp.lt.f32 	%p107, %f738, 0f40000000;
	setp.gtu.f32 	%p302, %f738, 0f4B800000;
	mov.f32 	%f718, %f738;
	@%p107 bra 	$L__BB0_67;
// %bb.56:
	@%p302 bra 	$L__BB0_63;
	bra.uni 	$L__BB0_57;
$L__BB0_63:
	mov.b32 	%r39, %f738;
	and.b32  	%r349, %r39, 8388607;
	or.b32  	%r3371, %r349, 1065353216;
	mov.b32 	%f717, %r3371;
	add.s32 	%r350, %r39, -1073741824;
	and.b32  	%r3372, %r350, -8388608;
	setp.eq.s32 	%p114, %r3372, 0;
	@%p114 bra 	$L__BB0_66;
// %bb.64:                              // %__nv_fmaf_rn.exit4.i.i.i2480.preheader
	mov.f32 	%f408, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f407,%f408;
	// end inline asm
$L__BB0_65:                             // %__nv_fmaf_rn.exit4.i.i.i2480
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r351, %r3372, 192937984;
	add.s32 	%r352, %r3371, %r351;
	mov.b32 	%f409, %r352;
	mul.f32 	%f410, %f407, %f409;
	sub.f32 	%f411, %f409, %f410;
	fma.rn.f32 	%f412, %f411, %f407, %f410;
	sub.f32 	%f413, %f409, %f412;
	fma.rz.f32 	%f414, %f413, %f407, %f412;
	cvt.rzi.f32.f32 	%f415, %f414;
	sub.f32 	%f717, %f409, %f415;
	sub.s32 	%r3372, %r3372, %r351;
	mov.b32 	%r3371, %f717;
	setp.ne.s32 	%p115, %r3372, 0;
	setp.ne.s32 	%p116, %r3371, 0;
	and.pred  	%p117, %p115, %p116;
	@%p117 bra 	$L__BB0_65;
$L__BB0_66:                             // %__internal_fmodf_slowpath_mod.exit.i.i2482
	setp.gt.u32 	%p118, %r39, 2139095039;
	selp.f32 	%f416, 0f7FFFFFFF, 0f4B800000, %p118;
	mul.f32 	%f417, %f717, 0f34000000;
	mul.f32 	%f718, %f416, %f417;
	bra.uni 	$L__BB0_67;
$L__BB0_57:                             // %__nv_fast_fdividef.exit.i.i.i2459
	div.approx.f32 	%f400, %f738, %f703;
	cvt.rzi.f32.f32 	%f716, %f400;
	fma.rn.f32 	%f57, %f716, 0fC0000000, %f738;
	mov.b32 	%r38, %f57;
	setp.lt.u32 	%p109, %r38, 1073741824;
	@%p109 bra 	$L__BB0_62;
// %bb.58:
	setp.lt.u32 	%p110, %r38, -2147483647;
	@%p110 bra 	$L__BB0_60;
// %bb.59:
	add.f32 	%f405, %f716, 0fBF800000;
	setp.lt.f32 	%p113, %f57, 0fC0000000;
	add.f32 	%f406, %f405, 0fBF800000;
	selp.f32 	%f716, %f406, %f405, %p113;
	bra.uni 	$L__BB0_62;
$L__BB0_60:
	add.f32 	%f716, %f716, 0f3F800000;
	setp.ltu.f32 	%p111, %f57, 0f40800000;
	@%p111 bra 	$L__BB0_62;
// %bb.61:                              // %__nv_fmaf_rn.exit.i.i.i2463
	add.f32 	%f401, %f716, 0f3F800000;
	fma.rn.f32 	%f403, %f703, 0fC0400000, %f57;
	setp.ge.f32 	%p112, %f403, 0f00000000;
	add.f32 	%f404, %f401, 0f3F800000;
	selp.f32 	%f716, %f404, %f401, %p112;
$L__BB0_62:                             // %__internal_fmodf_fastpath_quot.exit.i.i2466
	fma.rn.f32 	%f718, %f716, 0fC0000000, %f738;
$L__BB0_67:                             // %__internal_fmodf_kernel.exit.i2485
	selp.f32 	%f392, %f387, %f391, %p104;
	setp.gt.f32 	%p106, %f395, 0f4B800000;
	add.f32 	%f396, %f76, 0f3F800000;
	abs.f32 	%f418, %f718;
	setp.gtu.f32 	%p119, %f418, 0f7F800000;
	mov.b32 	%r353, %f54;
	and.b32  	%r46, %r353, -2147483648;
	@%p119 bra 	$L__BB0_69;
// %bb.68:
	mov.b32 	%r354, %f718;
	or.b32  	%r355, %r46, %r354;
	mov.b32 	%f718, %r355;
$L__BB0_69:                             // %__nv_fmodf.exit2486
	selp.f32 	%f53, %f396, %f392, %p106;
	add.f32 	%f419, %f718, %f718;
	mov.b32 	%r356, %f419;
	and.b32  	%r357, %r356, -2147483648;
	or.b32  	%r358, %r357, 1056964608;
	mov.b32 	%f420, %r358;
	add.f32 	%f421, %f419, %f420;
	cvt.rzi.f32.f32 	%f422, %f421;
	abs.f32 	%f423, %f419;
	setp.gt.f32 	%p120, %f423, 0f4B000000;
	selp.f32 	%f424, %f419, %f422, %p120;
	cvt.rzi.f32.f32 	%f425, %f419;
	setp.lt.f32 	%p121, %f423, 0f3F000000;
	selp.f32 	%f426, %f425, %f424, %p121;
	cvt.rzi.s32.f32 	%r359, %f426;
	fma.rn.f32 	%f427, %f426, 0fBF000000, %f718;
	mul.f32 	%f428, %f427, %f427;
	fma.rn.f32 	%f429, %f428, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f430, %f428, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f431, %f429, %f428, 0fC0A55DF6;
	fma.rn.f32 	%f432, %f430, %f428, 0f4081E0CF;
	fma.rn.f32 	%f433, %f428, %f427, 0f00000000;
	fma.rn.f32 	%f434, %f432, %f428, 0fC09DE9E6;
	fma.rn.f32 	%f435, %f431, %f433, 0f00000000;
	fma.rn.f32 	%f436, %f434, %f428, 0f3F800000;
	fma.rn.f32 	%f437, %f427, 0f40490FDB, %f435;
	and.b32  	%r360, %r359, 1;
	setp.eq.b32 	%p122, %r360, 1;
	selp.f32 	%f438, %f436, %f437, %p122;
	selp.f32 	%f439, %f437, %f436, %p122;
	and.b32  	%r361, %r359, 2;
	setp.eq.s32 	%p123, %r361, 0;
	neg.f32 	%f440, %f438;
	selp.f32 	%f441, %f438, %f440, %p123;
	add.s32 	%r362, %r359, 1;
	and.b32  	%r363, %r362, 2;
	setp.eq.s32 	%p124, %r363, 0;
	sub.f32 	%f443, %f230, %f439;
	selp.f32 	%f444, %f439, %f443, %p124;
	cvt.rzi.f32.f32 	%f445, %f718;
	setp.eq.f32 	%p125, %f445, %f718;
	mul.f32 	%f446, %f718, 0f00000000;
	selp.f32 	%f78, %f446, %f441, %p125;
	abs.f32 	%f447, %f718;
	setp.gt.f32 	%p126, %f447, 0f4B800000;
	add.f32 	%f448, %f78, 0f3F800000;
	selp.f32 	%f72, %f448, %f444, %p126;
	and.b32  	%r47, %r1, 2;
	setp.eq.s32 	%p127, %r47, 0;
	mov.f32 	%f75, %f53;
	mov.f32 	%f77, %f72;
	@%p127 bra 	$L__BB0_71;
// %bb.70:                              // %L682
	neg.f32 	%f77, %f78;
	neg.f32 	%f75, %f76;
	mov.f32 	%f76, %f53;
	mov.f32 	%f78, %f72;
$L__BB0_71:                             // %L684
	@%p27 bra 	$L__BB0_182;
// %bb.72:
	@%p298 bra 	$L__BB0_178;
	bra.uni 	$L__BB0_73;
$L__BB0_178:
	mov.b32 	%r162, %f750;
	and.b32  	%r370, %r162, 8388607;
	or.b32  	%r3401, %r370, 1065353216;
	mov.b32 	%f749, %r3401;
	add.s32 	%r371, %r162, -1073741824;
	and.b32  	%r3402, %r371, -8388608;
	setp.eq.s32 	%p135, %r3402, 0;
	@%p135 bra 	$L__BB0_181;
// %bb.179:                             // %__nv_fmaf_rn.exit4.i.i.i2511.preheader
	mov.f32 	%f458, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f457,%f458;
	// end inline asm
$L__BB0_180:                            // %__nv_fmaf_rn.exit4.i.i.i2511
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r372, %r3402, 192937984;
	add.s32 	%r373, %r3401, %r372;
	mov.b32 	%f459, %r373;
	mul.f32 	%f460, %f457, %f459;
	sub.f32 	%f461, %f459, %f460;
	fma.rn.f32 	%f462, %f461, %f457, %f460;
	sub.f32 	%f463, %f459, %f462;
	fma.rz.f32 	%f464, %f463, %f457, %f462;
	cvt.rzi.f32.f32 	%f465, %f464;
	sub.f32 	%f749, %f459, %f465;
	sub.s32 	%r3402, %r3402, %r372;
	mov.b32 	%r3401, %f749;
	setp.ne.s32 	%p136, %r3402, 0;
	setp.ne.s32 	%p137, %r3401, 0;
	and.pred  	%p138, %p136, %p137;
	@%p138 bra 	$L__BB0_180;
$L__BB0_181:                            // %__internal_fmodf_slowpath_mod.exit.i.i2513
	setp.gt.u32 	%p139, %r162, 2139095039;
	selp.f32 	%f466, 0f7FFFFFFF, 0f4B800000, %p139;
	mul.f32 	%f467, %f749, 0f34000000;
	mul.f32 	%f750, %f466, %f467;
	bra.uni 	$L__BB0_182;
$L__BB0_73:                             // %__nv_fast_fdividef.exit.i.i.i2490
	div.approx.f32 	%f450, %f750, %f703;
	cvt.rzi.f32.f32 	%f748, %f450;
	fma.rn.f32 	%f171, %f748, 0fC0000000, %f750;
	mov.b32 	%r161, %f171;
	setp.lt.u32 	%p130, %r161, 1073741824;
	@%p130 bra 	$L__BB0_177;
// %bb.74:
	setp.lt.u32 	%p131, %r161, -2147483647;
	@%p131 bra 	$L__BB0_175;
// %bb.75:
	add.f32 	%f455, %f748, 0fBF800000;
	setp.lt.f32 	%p134, %f171, 0fC0000000;
	add.f32 	%f456, %f455, 0fBF800000;
	selp.f32 	%f748, %f456, %f455, %p134;
	bra.uni 	$L__BB0_177;
$L__BB0_175:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p132, %f171, 0f40800000;
	@%p132 bra 	$L__BB0_177;
// %bb.176:                             // %__nv_fmaf_rn.exit.i.i.i2494
	add.f32 	%f451, %f748, 0f3F800000;
	fma.rn.f32 	%f453, %f703, 0fC0400000, %f171;
	setp.ge.f32 	%p133, %f453, 0f00000000;
	add.f32 	%f454, %f451, 0f3F800000;
	selp.f32 	%f748, %f454, %f451, %p133;
$L__BB0_177:                            // %__internal_fmodf_fastpath_quot.exit.i.i2497
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_182:                            // %__internal_fmodf_kernel.exit.i2516
	abs.f32 	%f468, %f750;
	setp.gtu.f32 	%p140, %f468, 0f7F800000;
	@%p140 bra 	$L__BB0_184;
// %bb.183:
	mov.b32 	%r374, %f750;
	or.b32  	%r375, %r156, %r374;
	mov.b32 	%f750, %r375;
$L__BB0_184:                            // %__nv_fmodf.exit2517
	@%p47 bra 	$L__BB0_87;
// %bb.76:
	@%p299 bra 	$L__BB0_83;
	bra.uni 	$L__BB0_77;
$L__BB0_83:
	mov.b32 	%r51, %f726;
	and.b32  	%r390, %r51, 8388607;
	or.b32  	%r3373, %r390, 1065353216;
	mov.b32 	%f725, %r3373;
	add.s32 	%r391, %r51, -1073741824;
	and.b32  	%r3374, %r391, -8388608;
	setp.eq.s32 	%p155, %r3374, 0;
	@%p155 bra 	$L__BB0_86;
// %bb.84:                              // %__nv_fmaf_rn.exit4.i.i.i2542.preheader
	mov.f32 	%f510, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f509,%f510;
	// end inline asm
$L__BB0_85:                             // %__nv_fmaf_rn.exit4.i.i.i2542
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r392, %r3374, 192937984;
	add.s32 	%r393, %r3373, %r392;
	mov.b32 	%f511, %r393;
	mul.f32 	%f512, %f509, %f511;
	sub.f32 	%f513, %f511, %f512;
	fma.rn.f32 	%f514, %f513, %f509, %f512;
	sub.f32 	%f515, %f511, %f514;
	fma.rz.f32 	%f516, %f515, %f509, %f514;
	cvt.rzi.f32.f32 	%f517, %f516;
	sub.f32 	%f725, %f511, %f517;
	sub.s32 	%r3374, %r3374, %r392;
	mov.b32 	%r3373, %f725;
	setp.ne.s32 	%p156, %r3374, 0;
	setp.ne.s32 	%p157, %r3373, 0;
	and.pred  	%p158, %p156, %p157;
	@%p158 bra 	$L__BB0_85;
$L__BB0_86:                             // %__internal_fmodf_slowpath_mod.exit.i.i2544
	setp.gt.u32 	%p159, %r51, 2139095039;
	selp.f32 	%f518, 0f7FFFFFFF, 0f4B800000, %p159;
	mul.f32 	%f519, %f725, 0f34000000;
	mul.f32 	%f726, %f518, %f519;
	bra.uni 	$L__BB0_87;
$L__BB0_77:                             // %__nv_fast_fdividef.exit.i.i.i2521
	div.approx.f32 	%f502, %f726, %f703;
	cvt.rzi.f32.f32 	%f724, %f502;
	fma.rn.f32 	%f80, %f724, 0fC0000000, %f726;
	mov.b32 	%r50, %f80;
	setp.lt.u32 	%p150, %r50, 1073741824;
	@%p150 bra 	$L__BB0_82;
// %bb.78:
	setp.lt.u32 	%p151, %r50, -2147483647;
	@%p151 bra 	$L__BB0_80;
// %bb.79:
	add.f32 	%f507, %f724, 0fBF800000;
	setp.lt.f32 	%p154, %f80, 0fC0000000;
	add.f32 	%f508, %f507, 0fBF800000;
	selp.f32 	%f724, %f508, %f507, %p154;
	bra.uni 	$L__BB0_82;
$L__BB0_80:
	add.f32 	%f724, %f724, 0f3F800000;
	setp.ltu.f32 	%p152, %f80, 0f40800000;
	@%p152 bra 	$L__BB0_82;
// %bb.81:                              // %__nv_fmaf_rn.exit.i.i.i2525
	add.f32 	%f503, %f724, 0f3F800000;
	fma.rn.f32 	%f505, %f703, 0fC0400000, %f80;
	setp.ge.f32 	%p153, %f505, 0f00000000;
	add.f32 	%f506, %f503, 0f3F800000;
	selp.f32 	%f724, %f506, %f503, %p153;
$L__BB0_82:                             // %__internal_fmodf_fastpath_quot.exit.i.i2528
	fma.rn.f32 	%f726, %f724, 0fC0000000, %f726;
$L__BB0_87:                             // %__internal_fmodf_kernel.exit.i2547
	abs.f32 	%f520, %f726;
	setp.gtu.f32 	%p160, %f520, 0f7F800000;
	@%p160 bra 	$L__BB0_89;
// %bb.88:
	mov.b32 	%r394, %f726;
	or.b32  	%r395, %r16, %r394;
	mov.b32 	%f726, %r395;
$L__BB0_89:                             // %__nv_fmodf.exit2548
	@%p67 bra 	$L__BB0_101;
// %bb.90:
	@%p300 bra 	$L__BB0_97;
	bra.uni 	$L__BB0_91;
$L__BB0_97:
	mov.b32 	%r59, %f730;
	and.b32  	%r404, %r59, 8388607;
	or.b32  	%r3375, %r404, 1065353216;
	mov.b32 	%f729, %r3375;
	add.s32 	%r405, %r59, -1073741824;
	and.b32  	%r3376, %r405, -8388608;
	setp.eq.s32 	%p175, %r3376, 0;
	@%p175 bra 	$L__BB0_100;
// %bb.98:                              // %__nv_fmaf_rn.exit4.i.i.i2573.preheader
	mov.f32 	%f560, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f559,%f560;
	// end inline asm
$L__BB0_99:                             // %__nv_fmaf_rn.exit4.i.i.i2573
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r406, %r3376, 192937984;
	add.s32 	%r407, %r3375, %r406;
	mov.b32 	%f561, %r407;
	mul.f32 	%f562, %f559, %f561;
	sub.f32 	%f563, %f561, %f562;
	fma.rn.f32 	%f564, %f563, %f559, %f562;
	sub.f32 	%f565, %f561, %f564;
	fma.rz.f32 	%f566, %f565, %f559, %f564;
	cvt.rzi.f32.f32 	%f567, %f566;
	sub.f32 	%f729, %f561, %f567;
	sub.s32 	%r3376, %r3376, %r406;
	mov.b32 	%r3375, %f729;
	setp.ne.s32 	%p176, %r3376, 0;
	setp.ne.s32 	%p177, %r3375, 0;
	and.pred  	%p178, %p176, %p177;
	@%p178 bra 	$L__BB0_99;
$L__BB0_100:                            // %__internal_fmodf_slowpath_mod.exit.i.i2575
	setp.gt.u32 	%p179, %r59, 2139095039;
	selp.f32 	%f568, 0f7FFFFFFF, 0f4B800000, %p179;
	mul.f32 	%f569, %f729, 0f34000000;
	mul.f32 	%f730, %f568, %f569;
	bra.uni 	$L__BB0_101;
$L__BB0_91:                             // %__nv_fast_fdividef.exit.i.i.i2552
	div.approx.f32 	%f552, %f730, %f703;
	cvt.rzi.f32.f32 	%f728, %f552;
	fma.rn.f32 	%f97, %f728, 0fC0000000, %f730;
	mov.b32 	%r58, %f97;
	setp.lt.u32 	%p170, %r58, 1073741824;
	@%p170 bra 	$L__BB0_96;
// %bb.92:
	setp.lt.u32 	%p171, %r58, -2147483647;
	@%p171 bra 	$L__BB0_94;
// %bb.93:
	add.f32 	%f557, %f728, 0fBF800000;
	setp.lt.f32 	%p174, %f97, 0fC0000000;
	add.f32 	%f558, %f557, 0fBF800000;
	selp.f32 	%f728, %f558, %f557, %p174;
	bra.uni 	$L__BB0_96;
$L__BB0_94:
	add.f32 	%f728, %f728, 0f3F800000;
	setp.ltu.f32 	%p172, %f97, 0f40800000;
	@%p172 bra 	$L__BB0_96;
// %bb.95:                              // %__nv_fmaf_rn.exit.i.i.i2556
	add.f32 	%f553, %f728, 0f3F800000;
	fma.rn.f32 	%f555, %f703, 0fC0400000, %f97;
	setp.ge.f32 	%p173, %f555, 0f00000000;
	add.f32 	%f556, %f553, 0f3F800000;
	selp.f32 	%f728, %f556, %f553, %p173;
$L__BB0_96:                             // %__internal_fmodf_fastpath_quot.exit.i.i2559
	fma.rn.f32 	%f730, %f728, 0fC0000000, %f730;
$L__BB0_101:                            // %__internal_fmodf_kernel.exit.i2578
	abs.f32 	%f570, %f730;
	setp.gtu.f32 	%p180, %f570, 0f7F800000;
	@%p180 bra 	$L__BB0_103;
// %bb.102:
	mov.b32 	%r408, %f730;
	or.b32  	%r409, %r25, %r408;
	mov.b32 	%f730, %r409;
$L__BB0_103:                            // %__nv_fmodf.exit2579
	@%p87 bra 	$L__BB0_115;
// %bb.104:
	@%p301 bra 	$L__BB0_111;
	bra.uni 	$L__BB0_105;
$L__BB0_111:
	mov.b32 	%r69, %f734;
	and.b32  	%r424, %r69, 8388607;
	or.b32  	%r3377, %r424, 1065353216;
	mov.b32 	%f733, %r3377;
	add.s32 	%r425, %r69, -1073741824;
	and.b32  	%r3378, %r425, -8388608;
	setp.eq.s32 	%p195, %r3378, 0;
	@%p195 bra 	$L__BB0_114;
// %bb.112:                             // %__nv_fmaf_rn.exit4.i.i.i2604.preheader
	mov.f32 	%f612, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f611,%f612;
	// end inline asm
$L__BB0_113:                            // %__nv_fmaf_rn.exit4.i.i.i2604
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r426, %r3378, 192937984;
	add.s32 	%r427, %r3377, %r426;
	mov.b32 	%f613, %r427;
	mul.f32 	%f614, %f611, %f613;
	sub.f32 	%f615, %f613, %f614;
	fma.rn.f32 	%f616, %f615, %f611, %f614;
	sub.f32 	%f617, %f613, %f616;
	fma.rz.f32 	%f618, %f617, %f611, %f616;
	cvt.rzi.f32.f32 	%f619, %f618;
	sub.f32 	%f733, %f613, %f619;
	sub.s32 	%r3378, %r3378, %r426;
	mov.b32 	%r3377, %f733;
	setp.ne.s32 	%p196, %r3378, 0;
	setp.ne.s32 	%p197, %r3377, 0;
	and.pred  	%p198, %p196, %p197;
	@%p198 bra 	$L__BB0_113;
$L__BB0_114:                            // %__internal_fmodf_slowpath_mod.exit.i.i2606
	setp.gt.u32 	%p199, %r69, 2139095039;
	selp.f32 	%f620, 0f7FFFFFFF, 0f4B800000, %p199;
	mul.f32 	%f621, %f733, 0f34000000;
	mul.f32 	%f734, %f620, %f621;
	bra.uni 	$L__BB0_115;
$L__BB0_105:                            // %__nv_fast_fdividef.exit.i.i.i2583
	div.approx.f32 	%f604, %f734, %f703;
	cvt.rzi.f32.f32 	%f732, %f604;
	fma.rn.f32 	%f112, %f732, 0fC0000000, %f734;
	mov.b32 	%r68, %f112;
	setp.lt.u32 	%p190, %r68, 1073741824;
	@%p190 bra 	$L__BB0_110;
// %bb.106:
	setp.lt.u32 	%p191, %r68, -2147483647;
	@%p191 bra 	$L__BB0_108;
// %bb.107:
	add.f32 	%f609, %f732, 0fBF800000;
	setp.lt.f32 	%p194, %f112, 0fC0000000;
	add.f32 	%f610, %f609, 0fBF800000;
	selp.f32 	%f732, %f610, %f609, %p194;
	bra.uni 	$L__BB0_110;
$L__BB0_108:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p192, %f112, 0f40800000;
	@%p192 bra 	$L__BB0_110;
// %bb.109:                             // %__nv_fmaf_rn.exit.i.i.i2587
	add.f32 	%f605, %f732, 0f3F800000;
	fma.rn.f32 	%f607, %f703, 0fC0400000, %f112;
	setp.ge.f32 	%p193, %f607, 0f00000000;
	add.f32 	%f608, %f605, 0f3F800000;
	selp.f32 	%f732, %f608, %f605, %p193;
$L__BB0_110:                            // %__internal_fmodf_fastpath_quot.exit.i.i2590
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_115:                            // %__internal_fmodf_kernel.exit.i2609
	abs.f32 	%f622, %f734;
	setp.gtu.f32 	%p200, %f622, 0f7F800000;
	@%p200 bra 	$L__BB0_117;
// %bb.116:
	mov.b32 	%r428, %f734;
	or.b32  	%r429, %r37, %r428;
	mov.b32 	%f734, %r429;
$L__BB0_117:                            // %__nv_fmodf.exit2610
	add.f32 	%f623, %f734, %f734;
	mov.b32 	%r430, %f623;
	and.b32  	%r431, %r430, -2147483648;
	or.b32  	%r432, %r431, 1056964608;
	mov.b32 	%f624, %r432;
	add.f32 	%f625, %f623, %f624;
	cvt.rzi.f32.f32 	%f626, %f625;
	abs.f32 	%f627, %f623;
	setp.gt.f32 	%p202, %f627, 0f4B000000;
	selp.f32 	%f628, %f623, %f626, %p202;
	cvt.rzi.f32.f32 	%f629, %f623;
	setp.lt.f32 	%p203, %f627, 0f3F000000;
	selp.f32 	%f630, %f629, %f628, %p203;
	cvt.rzi.s32.f32 	%r433, %f630;
	fma.rn.f32 	%f631, %f630, 0fBF000000, %f734;
	mul.f32 	%f632, %f631, %f631;
	fma.rn.f32 	%f633, %f632, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f634, %f632, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f635, %f633, %f632, 0fC0A55DF6;
	fma.rn.f32 	%f636, %f634, %f632, 0f4081E0CF;
	fma.rn.f32 	%f637, %f632, %f631, 0f00000000;
	fma.rn.f32 	%f638, %f636, %f632, 0fC09DE9E6;
	fma.rn.f32 	%f639, %f635, %f637, 0f00000000;
	fma.rn.f32 	%f640, %f638, %f632, 0f3F800000;
	fma.rn.f32 	%f641, %f631, 0f40490FDB, %f639;
	and.b32  	%r434, %r433, 1;
	setp.eq.b32 	%p204, %r434, 1;
	selp.f32 	%f642, %f640, %f641, %p204;
	selp.f32 	%f643, %f641, %f640, %p204;
	and.b32  	%r435, %r433, 2;
	setp.eq.s32 	%p205, %r435, 0;
	neg.f32 	%f644, %f642;
	selp.f32 	%f645, %f642, %f644, %p205;
	add.s32 	%r436, %r433, 1;
	and.b32  	%r437, %r436, 2;
	setp.eq.s32 	%p206, %r437, 0;
	sub.f32 	%f647, %f230, %f643;
	cvt.rzi.f32.f32 	%f649, %f734;
	setp.eq.f32 	%p207, %f649, %f734;
	mul.f32 	%f650, %f734, 0f00000000;
	selp.f32 	%f148, %f650, %f645, %p207;
	abs.f32 	%f651, %f734;
	@%p107 bra 	$L__BB0_129;
// %bb.118:
	@%p302 bra 	$L__BB0_125;
	bra.uni 	$L__BB0_119;
$L__BB0_125:
	mov.b32 	%r77, %f738;
	and.b32  	%r438, %r77, 8388607;
	or.b32  	%r3379, %r438, 1065353216;
	mov.b32 	%f737, %r3379;
	add.s32 	%r439, %r77, -1073741824;
	and.b32  	%r3380, %r439, -8388608;
	setp.eq.s32 	%p215, %r3380, 0;
	@%p215 bra 	$L__BB0_128;
// %bb.126:                             // %__nv_fmaf_rn.exit4.i.i.i2635.preheader
	mov.f32 	%f662, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f661,%f662;
	// end inline asm
$L__BB0_127:                            // %__nv_fmaf_rn.exit4.i.i.i2635
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r440, %r3380, 192937984;
	add.s32 	%r441, %r3379, %r440;
	mov.b32 	%f663, %r441;
	mul.f32 	%f664, %f661, %f663;
	sub.f32 	%f665, %f663, %f664;
	fma.rn.f32 	%f666, %f665, %f661, %f664;
	sub.f32 	%f667, %f663, %f666;
	fma.rz.f32 	%f668, %f667, %f661, %f666;
	cvt.rzi.f32.f32 	%f669, %f668;
	sub.f32 	%f737, %f663, %f669;
	sub.s32 	%r3380, %r3380, %r440;
	mov.b32 	%r3379, %f737;
	setp.ne.s32 	%p216, %r3380, 0;
	setp.ne.s32 	%p217, %r3379, 0;
	and.pred  	%p218, %p216, %p217;
	@%p218 bra 	$L__BB0_127;
$L__BB0_128:                            // %__internal_fmodf_slowpath_mod.exit.i.i2637
	setp.gt.u32 	%p219, %r77, 2139095039;
	selp.f32 	%f670, 0f7FFFFFFF, 0f4B800000, %p219;
	mul.f32 	%f671, %f737, 0f34000000;
	mul.f32 	%f738, %f670, %f671;
	bra.uni 	$L__BB0_129;
$L__BB0_119:                            // %__nv_fast_fdividef.exit.i.i.i2614
	div.approx.f32 	%f654, %f738, %f703;
	cvt.rzi.f32.f32 	%f736, %f654;
	fma.rn.f32 	%f129, %f736, 0fC0000000, %f738;
	mov.b32 	%r76, %f129;
	setp.lt.u32 	%p210, %r76, 1073741824;
	@%p210 bra 	$L__BB0_124;
// %bb.120:
	setp.lt.u32 	%p211, %r76, -2147483647;
	@%p211 bra 	$L__BB0_122;
// %bb.121:
	add.f32 	%f659, %f736, 0fBF800000;
	setp.lt.f32 	%p214, %f129, 0fC0000000;
	add.f32 	%f660, %f659, 0fBF800000;
	selp.f32 	%f736, %f660, %f659, %p214;
	bra.uni 	$L__BB0_124;
$L__BB0_122:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p212, %f129, 0f40800000;
	@%p212 bra 	$L__BB0_124;
// %bb.123:                             // %__nv_fmaf_rn.exit.i.i.i2618
	add.f32 	%f655, %f736, 0f3F800000;
	fma.rn.f32 	%f657, %f703, 0fC0400000, %f129;
	setp.ge.f32 	%p213, %f657, 0f00000000;
	add.f32 	%f658, %f655, 0f3F800000;
	selp.f32 	%f736, %f658, %f655, %p213;
$L__BB0_124:                            // %__internal_fmodf_fastpath_quot.exit.i.i2621
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_129:                            // %__internal_fmodf_kernel.exit.i2640
	selp.f32 	%f648, %f643, %f647, %p206;
	setp.gt.f32 	%p208, %f651, 0f4B800000;
	add.f32 	%f652, %f148, 0f3F800000;
	abs.f32 	%f672, %f738;
	setp.gtu.f32 	%p220, %f672, 0f7F800000;
	@%p220 bra 	$L__BB0_131;
// %bb.130:
	mov.b32 	%r442, %f738;
	or.b32  	%r443, %r46, %r442;
	mov.b32 	%f738, %r443;
$L__BB0_131:                            // %__nv_fmodf.exit2641
	selp.f32 	%f127, %f652, %f648, %p208;
	add.f32 	%f673, %f738, %f738;
	mov.b32 	%r444, %f673;
	and.b32  	%r445, %r444, -2147483648;
	or.b32  	%r446, %r445, 1056964608;
	mov.b32 	%f674, %r446;
	add.f32 	%f675, %f673, %f674;
	cvt.rzi.f32.f32 	%f676, %f675;
	abs.f32 	%f677, %f673;
	setp.gt.f32 	%p222, %f677, 0f4B000000;
	selp.f32 	%f678, %f673, %f676, %p222;
	cvt.rzi.f32.f32 	%f679, %f673;
	setp.lt.f32 	%p223, %f677, 0f3F000000;
	selp.f32 	%f680, %f679, %f678, %p223;
	cvt.rzi.s32.f32 	%r447, %f680;
	fma.rn.f32 	%f681, %f680, 0fBF000000, %f738;
	mul.f32 	%f682, %f681, %f681;
	fma.rn.f32 	%f683, %f682, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f684, %f682, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f685, %f683, %f682, 0fC0A55DF6;
	fma.rn.f32 	%f686, %f684, %f682, 0f4081E0CF;
	fma.rn.f32 	%f687, %f682, %f681, 0f00000000;
	fma.rn.f32 	%f688, %f686, %f682, 0fC09DE9E6;
	fma.rn.f32 	%f689, %f685, %f687, 0f00000000;
	fma.rn.f32 	%f690, %f688, %f682, 0f3F800000;
	fma.rn.f32 	%f691, %f681, 0f40490FDB, %f689;
	and.b32  	%r448, %r447, 1;
	setp.eq.b32 	%p224, %r448, 1;
	selp.f32 	%f692, %f690, %f691, %p224;
	selp.f32 	%f693, %f691, %f690, %p224;
	and.b32  	%r449, %r447, 2;
	setp.eq.s32 	%p225, %r449, 0;
	neg.f32 	%f694, %f692;
	selp.f32 	%f695, %f692, %f694, %p225;
	add.s32 	%r450, %r447, 1;
	and.b32  	%r451, %r450, 2;
	setp.eq.s32 	%p226, %r451, 0;
	sub.f32 	%f697, %f230, %f693;
	selp.f32 	%f698, %f693, %f697, %p226;
	cvt.rzi.f32.f32 	%f699, %f738;
	setp.eq.f32 	%p227, %f699, %f738;
	mul.f32 	%f700, %f738, 0f00000000;
	selp.f32 	%f150, %f700, %f695, %p227;
	abs.f32 	%f701, %f738;
	setp.gt.f32 	%p228, %f701, 0f4B800000;
	add.f32 	%f702, %f150, 0f3F800000;
	selp.f32 	%f144, %f702, %f698, %p228;
	mov.f32 	%f147, %f127;
	mov.f32 	%f149, %f144;
	@%p127 bra 	$L__BB0_133;
// %bb.132:                             // %L975
	neg.f32 	%f149, %f150;
	neg.f32 	%f147, %f148;
	mov.f32 	%f148, %f127;
	mov.f32 	%f150, %f144;
$L__BB0_133:                            // %L977
	setp.gt.u32 	%p229, %r1, 15;
	mov.u32 	%r171, 999999999;
	@%p229 bra 	$L__BB0_186;
// %bb.134:                             // %L1007
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	shl.b32 	%r459, %r1, 4;
	and.b32  	%r460, %r459, 240;
	or.b32  	%r461, %r460, %r4;
	mul.wide.u32 	%rd83, %r461, 4;
	add.s64 	%rd84, %rd1, %rd83;
	ld.global.u32 	%r462, [%rd84];
	shl.b32 	%r463, %r462, 16;
	cvt.s32.s16 	%r86, %r462;
	shr.s32 	%r87, %r462, 16;
	or.b32  	%r464, %r463, 65535;
	setp.lt.u32 	%p230, %r464, 1114111;
	setp.lt.u32 	%p231, %r462, 1048576;
	and.pred  	%p232, %p230, %p231;
	@%p232 bra 	$L__BB0_185;
	bra.uni 	$L__BB0_135;
$L__BB0_185:                            // %L1247
	mul.lo.s32 	%r468, %r87, 546;
	mad.lo.s32 	%r171, %r86, 33, %r468;
$L__BB0_186:                            // %pass548
	add.f32 	%f207, %f746, %f746;
	mov.b32 	%r285, %f207;
	add.f32 	%f469, %f750, %f750;
	and.b32  	%r286, %r285, -2147483648;
	add.f32 	%f261, %f706, %f706;
	add.f32 	%f313, %f710, %f710;
	mov.b32 	%r382, %f469;
	or.b32  	%r287, %r286, 1056964608;
	mov.b32 	%r301, %f261;
	mov.b32 	%r323, %f313;
	and.b32  	%r383, %r382, -2147483648;
	add.f32 	%f521, %f726, %f726;
	add.f32 	%f571, %f730, %f730;
	mov.b32 	%f208, %r287;
	and.b32  	%r302, %r301, -2147483648;
	and.b32  	%r324, %r323, -2147483648;
	or.b32  	%r384, %r383, 1056964608;
	mov.b32 	%r396, %f521;
	mov.b32 	%r416, %f571;
	add.f32 	%f209, %f207, %f208;
	abs.f32 	%f211, %f207;
	or.b32  	%r303, %r302, 1056964608;
	or.b32  	%r325, %r324, 1056964608;
	mov.b32 	%f470, %r384;
	and.b32  	%r397, %r396, -2147483648;
	and.b32  	%r417, %r416, -2147483648;
	cvt.rzi.f32.f32 	%f210, %f209;
	setp.gt.f32 	%p40, %f211, 0f4B000000;
	mov.b32 	%f262, %r303;
	mov.b32 	%f314, %r325;
	add.f32 	%f471, %f469, %f470;
	abs.f32 	%f473, %f469;
	or.b32  	%r398, %r397, 1056964608;
	or.b32  	%r418, %r417, 1056964608;
	selp.f32 	%f212, %f207, %f210, %p40;
	cvt.rzi.f32.f32 	%f213, %f207;
	setp.lt.f32 	%p41, %f211, 0f3F000000;
	add.f32 	%f263, %f261, %f262;
	abs.f32 	%f265, %f261;
	add.f32 	%f315, %f313, %f314;
	abs.f32 	%f317, %f313;
	cvt.rzi.f32.f32 	%f472, %f471;
	setp.gt.f32 	%p142, %f473, 0f4B000000;
	mov.b32 	%f522, %r398;
	mov.b32 	%f572, %r418;
	selp.f32 	%f214, %f213, %f212, %p41;
	cvt.rzi.f32.f32 	%f264, %f263;
	setp.gt.f32 	%p60, %f265, 0f4B000000;
	cvt.rzi.f32.f32 	%f316, %f315;
	setp.gt.f32 	%p80, %f317, 0f4B000000;
	selp.f32 	%f474, %f469, %f472, %p142;
	cvt.rzi.f32.f32 	%f475, %f469;
	setp.lt.f32 	%p143, %f473, 0f3F000000;
	add.f32 	%f523, %f521, %f522;
	abs.f32 	%f525, %f521;
	add.f32 	%f573, %f571, %f572;
	abs.f32 	%f575, %f571;
	fma.rn.f32 	%f215, %f214, 0fBF000000, %f746;
	selp.f32 	%f266, %f261, %f264, %p60;
	cvt.rzi.f32.f32 	%f267, %f261;
	setp.lt.f32 	%p61, %f265, 0f3F000000;
	selp.f32 	%f318, %f313, %f316, %p80;
	cvt.rzi.f32.f32 	%f319, %f313;
	setp.lt.f32 	%p81, %f317, 0f3F000000;
	selp.f32 	%f476, %f475, %f474, %p143;
	cvt.rzi.f32.f32 	%f524, %f523;
	setp.gt.f32 	%p162, %f525, 0f4B000000;
	cvt.rzi.f32.f32 	%f574, %f573;
	setp.gt.f32 	%p182, %f575, 0f4B000000;
	mul.f32 	%f216, %f215, %f215;
	selp.f32 	%f268, %f267, %f266, %p61;
	selp.f32 	%f320, %f319, %f318, %p81;
	fma.rn.f32 	%f477, %f476, 0fBF000000, %f750;
	selp.f32 	%f526, %f521, %f524, %p162;
	cvt.rzi.f32.f32 	%f527, %f521;
	setp.lt.f32 	%p163, %f525, 0f3F000000;
	selp.f32 	%f576, %f571, %f574, %p182;
	cvt.rzi.f32.f32 	%f577, %f571;
	setp.lt.f32 	%p183, %f575, 0f3F000000;
	fma.rn.f32 	%f217, %f216, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f218, %f216, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f269, %f268, 0fBF000000, %f706;
	fma.rn.f32 	%f321, %f320, 0fBF000000, %f710;
	mul.f32 	%f478, %f477, %f477;
	selp.f32 	%f528, %f527, %f526, %p163;
	selp.f32 	%f578, %f577, %f576, %p183;
	cvt.rzi.s32.f32 	%r288, %f214;
	fma.rn.f32 	%f219, %f217, %f216, 0fC0A55DF6;
	fma.rn.f32 	%f220, %f218, %f216, 0f4081E0CF;
	fma.rn.f32 	%f221, %f216, %f215, 0f00000000;
	mul.f32 	%f270, %f269, %f269;
	mul.f32 	%f322, %f321, %f321;
	fma.rn.f32 	%f479, %f478, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f480, %f478, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f529, %f528, 0fBF000000, %f726;
	fma.rn.f32 	%f579, %f578, 0fBF000000, %f730;
	fma.rn.f32 	%f222, %f220, %f216, 0fC09DE9E6;
	fma.rn.f32 	%f223, %f219, %f221, 0f00000000;
	and.b32  	%r289, %r288, 1;
	fma.rn.f32 	%f271, %f270, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f272, %f270, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f323, %f322, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f324, %f322, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r385, %f476;
	fma.rn.f32 	%f481, %f479, %f478, 0fC0A55DF6;
	fma.rn.f32 	%f482, %f480, %f478, 0f4081E0CF;
	fma.rn.f32 	%f483, %f478, %f477, 0f00000000;
	mul.f32 	%f530, %f529, %f529;
	mul.f32 	%f580, %f579, %f579;
	fma.rn.f32 	%f224, %f222, %f216, 0f3F800000;
	fma.rn.f32 	%f225, %f215, 0f40490FDB, %f223;
	setp.eq.b32 	%p42, %r289, 1;
	cvt.rzi.s32.f32 	%r304, %f268;
	fma.rn.f32 	%f273, %f271, %f270, 0fC0A55DF6;
	fma.rn.f32 	%f274, %f272, %f270, 0f4081E0CF;
	fma.rn.f32 	%f275, %f270, %f269, 0f00000000;
	cvt.rzi.s32.f32 	%r326, %f320;
	fma.rn.f32 	%f325, %f323, %f322, 0fC0A55DF6;
	fma.rn.f32 	%f326, %f324, %f322, 0f4081E0CF;
	fma.rn.f32 	%f327, %f322, %f321, 0f00000000;
	fma.rn.f32 	%f484, %f482, %f478, 0fC09DE9E6;
	fma.rn.f32 	%f485, %f481, %f483, 0f00000000;
	and.b32  	%r386, %r385, 1;
	fma.rn.f32 	%f531, %f530, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f532, %f530, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f581, %f580, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f582, %f580, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f226, %f224, %f225, %p42;
	and.b32  	%r290, %r288, 2;
	fma.rn.f32 	%f276, %f274, %f270, 0fC09DE9E6;
	fma.rn.f32 	%f277, %f273, %f275, 0f00000000;
	and.b32  	%r305, %r304, 1;
	fma.rn.f32 	%f328, %f326, %f322, 0fC09DE9E6;
	fma.rn.f32 	%f329, %f325, %f327, 0f00000000;
	and.b32  	%r327, %r326, 1;
	fma.rn.f32 	%f486, %f484, %f478, 0f3F800000;
	fma.rn.f32 	%f487, %f477, 0f40490FDB, %f485;
	setp.eq.b32 	%p144, %r386, 1;
	cvt.rzi.s32.f32 	%r399, %f528;
	fma.rn.f32 	%f533, %f531, %f530, 0fC0A55DF6;
	fma.rn.f32 	%f534, %f532, %f530, 0f4081E0CF;
	fma.rn.f32 	%f535, %f530, %f529, 0f00000000;
	cvt.rzi.s32.f32 	%r419, %f578;
	fma.rn.f32 	%f583, %f581, %f580, 0fC0A55DF6;
	fma.rn.f32 	%f584, %f582, %f580, 0f4081E0CF;
	fma.rn.f32 	%f585, %f580, %f579, 0f00000000;
	setp.eq.s32 	%p43, %r290, 0;
	neg.f32 	%f228, %f226;
	add.s32 	%r291, %r288, 1;
	cvt.rzi.f32.f32 	%f233, %f746;
	fma.rn.f32 	%f278, %f276, %f270, 0f3F800000;
	fma.rn.f32 	%f279, %f269, 0f40490FDB, %f277;
	setp.eq.b32 	%p62, %r305, 1;
	fma.rn.f32 	%f330, %f328, %f322, 0f3F800000;
	fma.rn.f32 	%f331, %f321, 0f40490FDB, %f329;
	setp.eq.b32 	%p82, %r327, 1;
	selp.f32 	%f488, %f486, %f487, %p144;
	and.b32  	%r387, %r385, 2;
	fma.rn.f32 	%f536, %f534, %f530, 0fC09DE9E6;
	fma.rn.f32 	%f537, %f533, %f535, 0f00000000;
	and.b32  	%r400, %r399, 1;
	fma.rn.f32 	%f586, %f584, %f580, 0fC09DE9E6;
	fma.rn.f32 	%f587, %f583, %f585, 0f00000000;
	and.b32  	%r420, %r419, 1;
	selp.f32 	%f227, %f225, %f224, %p42;
	selp.f32 	%f229, %f226, %f228, %p43;
	and.b32  	%r292, %r291, 2;
	setp.eq.f32 	%p45, %f233, %f746;
	mul.f32 	%f234, %f746, 0f00000000;
	selp.f32 	%f280, %f278, %f279, %p62;
	and.b32  	%r306, %r304, 2;
	selp.f32 	%f332, %f330, %f331, %p82;
	and.b32  	%r328, %r326, 2;
	setp.eq.s32 	%p145, %r387, 0;
	neg.f32 	%f490, %f488;
	add.s32 	%r388, %r385, 1;
	cvt.rzi.f32.f32 	%f495, %f750;
	fma.rn.f32 	%f538, %f536, %f530, 0f3F800000;
	fma.rn.f32 	%f539, %f529, 0f40490FDB, %f537;
	setp.eq.b32 	%p164, %r400, 1;
	fma.rn.f32 	%f588, %f586, %f580, 0f3F800000;
	fma.rn.f32 	%f589, %f579, 0f40490FDB, %f587;
	setp.eq.b32 	%p184, %r420, 1;
	setp.eq.s32 	%p44, %r292, 0;
	sub.f32 	%f231, %f230, %f227;
	selp.f32 	%f235, %f234, %f229, %p45;
	abs.f32 	%f236, %f746;
	setp.eq.s32 	%p63, %r306, 0;
	neg.f32 	%f282, %f280;
	add.s32 	%r307, %r304, 1;
	cvt.rzi.f32.f32 	%f287, %f706;
	setp.eq.s32 	%p83, %r328, 0;
	neg.f32 	%f334, %f332;
	add.s32 	%r329, %r326, 1;
	cvt.rzi.f32.f32 	%f339, %f710;
	selp.f32 	%f489, %f487, %f486, %p144;
	selp.f32 	%f491, %f488, %f490, %p145;
	and.b32  	%r389, %r388, 2;
	setp.eq.f32 	%p147, %f495, %f750;
	mul.f32 	%f496, %f750, 0f00000000;
	selp.f32 	%f540, %f538, %f539, %p164;
	and.b32  	%r401, %r399, 2;
	selp.f32 	%f590, %f588, %f589, %p184;
	and.b32  	%r421, %r419, 2;
	selp.f32 	%f232, %f227, %f231, %p44;
	setp.gt.f32 	%p46, %f236, 0f4B800000;
	add.f32 	%f237, %f235, 0f3F800000;
	selp.f32 	%f281, %f279, %f278, %p62;
	selp.f32 	%f283, %f280, %f282, %p63;
	and.b32  	%r308, %r307, 2;
	setp.eq.f32 	%p65, %f287, %f706;
	mul.f32 	%f288, %f706, 0f00000000;
	selp.f32 	%f333, %f331, %f330, %p82;
	selp.f32 	%f335, %f332, %f334, %p83;
	and.b32  	%r330, %r329, 2;
	setp.eq.f32 	%p85, %f339, %f710;
	mul.f32 	%f340, %f710, 0f00000000;
	setp.eq.s32 	%p146, %r389, 0;
	sub.f32 	%f493, %f230, %f489;
	selp.f32 	%f497, %f496, %f491, %p147;
	abs.f32 	%f498, %f750;
	setp.eq.s32 	%p165, %r401, 0;
	neg.f32 	%f542, %f540;
	add.s32 	%r402, %r399, 1;
	cvt.rzi.f32.f32 	%f547, %f726;
	setp.eq.s32 	%p185, %r421, 0;
	neg.f32 	%f592, %f590;
	add.s32 	%r422, %r419, 1;
	cvt.rzi.f32.f32 	%f597, %f730;
	selp.f32 	%f238, %f237, %f232, %p46;
	setp.eq.s32 	%p64, %r308, 0;
	sub.f32 	%f285, %f230, %f281;
	selp.f32 	%f16, %f288, %f283, %p65;
	abs.f32 	%f289, %f706;
	setp.eq.s32 	%p84, %r330, 0;
	sub.f32 	%f337, %f230, %f333;
	selp.f32 	%f341, %f340, %f335, %p85;
	abs.f32 	%f342, %f710;
	selp.f32 	%f494, %f489, %f493, %p146;
	setp.gt.f32 	%p148, %f498, 0f4B800000;
	add.f32 	%f499, %f497, 0f3F800000;
	selp.f32 	%f541, %f539, %f538, %p164;
	selp.f32 	%f543, %f540, %f542, %p165;
	and.b32  	%r403, %r402, 2;
	setp.eq.f32 	%p167, %f547, %f726;
	mul.f32 	%f548, %f726, 0f00000000;
	selp.f32 	%f591, %f589, %f588, %p184;
	selp.f32 	%f593, %f590, %f592, %p185;
	and.b32  	%r423, %r422, 2;
	setp.eq.f32 	%p187, %f597, %f730;
	mul.f32 	%f598, %f730, 0f00000000;
	mov.b32 	%r281, %f238;
	mov.b32 	%r284, %f235;
	selp.f32 	%f286, %f281, %f285, %p64;
	setp.gt.f32 	%p66, %f289, 0f4B800000;
	add.f32 	%f290, %f16, 0f3F800000;
	selp.f32 	%f338, %f333, %f337, %p84;
	setp.gt.f32 	%p86, %f342, 0f4B800000;
	add.f32 	%f343, %f341, 0f3F800000;
	selp.f32 	%f500, %f499, %f494, %p148;
	setp.eq.s32 	%p166, %r403, 0;
	sub.f32 	%f545, %f230, %f541;
	selp.f32 	%f94, %f548, %f543, %p167;
	abs.f32 	%f549, %f726;
	setp.eq.s32 	%p186, %r423, 0;
	sub.f32 	%f595, %f230, %f591;
	selp.f32 	%f599, %f598, %f593, %p187;
	abs.f32 	%f600, %f730;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r280, %r284, -2147483648;
	selp.f32 	%f17, %f290, %f286, %p66;
	selp.f32 	%f344, %f343, %f338, %p86;
	mov.b32 	%r378, %f500;
	mov.b32 	%r381, %f497;
	selp.f32 	%f546, %f541, %f545, %p166;
	setp.gt.f32 	%p168, %f549, 0f4B800000;
	add.f32 	%f550, %f94, 0f3F800000;
	selp.f32 	%f596, %f591, %f595, %p186;
	setp.gt.f32 	%p188, %f600, 0f4B800000;
	add.f32 	%f601, %f599, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r279, %r281, %r280;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r282, %r284, %r281;
	// end inline asm
	mov.b32 	%r319, %f344;
	mov.b32 	%r318, %f17;
	mov.b32 	%r322, %f341;
	mov.b32 	%r321, %f16;
	mov.b32 	%r365, %f75;
	mov.b32 	%r366, %f77;
	mov.b32 	%r368, %f76;
	mov.b32 	%r369, %f78;
	xor.b32  	%r377, %r381, -2147483648;
	selp.f32 	%f95, %f550, %f546, %p168;
	selp.f32 	%f602, %f601, %f596, %p188;
	// begin inline asm
	cvt.rn.f16x2.f32 %r317, %r319, %r318;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r320, %r322, %r321;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r364, %r366, %r365;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r367, %r369, %r368;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r376, %r378, %r377;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r379, %r381, %r378;
	// end inline asm
	mov.b32 	%r412, %f602;
	mov.b32 	%r411, %f95;
	mov.b32 	%r415, %f599;
	mov.b32 	%r414, %f94;
	// begin inline asm
	cvt.rn.f16x2.f32 %r410, %r412, %r411;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r413, %r415, %r414;
	// end inline asm
	mov.b32 	%r453, %f147;
	mov.b32 	%r454, %f149;
	// begin inline asm
	cvt.rn.f16x2.f32 %r452, %r454, %r453;
	// end inline asm
	mov.b32 	%r456, %f148;
	mov.b32 	%r457, %f150;
	// begin inline asm
	cvt.rn.f16x2.f32 %r455, %r457, %r456;
	// end inline asm
	shl.b32 	%r470, %r4, 1;
	shr.u32 	%r471, %r1, 3;
	bfe.u32 	%r472, %r1, 3, 1;
	and.b32  	%r473, %r470, 14;
	or.b32  	%r474, %r473, %r472;
	and.b32  	%r475, %r147, 1;
	and.b32  	%r476, %r471, 2;
	or.b32  	%r477, %r475, %r476;
	shl.b32 	%r478, %r477, 4;
	shl.b32 	%r479, %r1, 6;
	and.b32  	%r480, %r479, 192;
	or.b32  	%r481, %r474, %r3;
	or.b32  	%r482, %r481, %r478;
	or.b32  	%r483, %r482, %r480;
	mul.wide.u32 	%rd90, %r483, 4;
	add.s64 	%rd91, %rd2, %rd90;
	ld.global.u32 	%r172, [%rd91];
	ld.global.u32 	%r173, [%rd91+1024];
	shl.b32 	%r484, %r249, 14;
	shl.b32 	%r485, %r253, 7;
	add.s32 	%r174, %r485, %r484;
	shl.b32 	%r486, %r2, 7;
	shl.b32 	%r487, %r1, 2;
	or.b32  	%r175, %r487, %r486;
	and.b32  	%r176, %r1, 16;
	shr.u32 	%r488, %r1, 4;
	and.b32  	%r489, %r159, 30;
	or.b32  	%r490, %r489, %r488;
	mul.lo.s32 	%r491, %r490, 257;
	and.b32  	%r492, %r5, 224;
	shr.u32 	%r493, %r4, 3;
	mad.lo.s32 	%r494, %r493, 257, %r492;
	or.b32  	%r495, %r493, 2;
	mad.lo.s32 	%r496, %r495, 257, %r492;
	or.b32  	%r497, %r493, 4;
	mad.lo.s32 	%r498, %r497, 257, %r492;
	or.b32  	%r499, %r493, 6;
	mad.lo.s32 	%r500, %r499, 257, %r492;
	or.b32  	%r501, %r493, 8;
	mad.lo.s32 	%r502, %r501, 257, %r492;
	or.b32  	%r503, %r493, 10;
	mad.lo.s32 	%r504, %r503, 257, %r492;
	or.b32  	%r505, %r493, 12;
	mad.lo.s32 	%r506, %r505, 257, %r492;
	or.b32  	%r507, %r493, 14;
	mad.lo.s32 	%r508, %r507, 257, %r492;
	or.b32  	%r509, %r493, 16;
	mad.lo.s32 	%r510, %r509, 257, %r492;
	or.b32  	%r511, %r493, 18;
	mad.lo.s32 	%r512, %r511, 257, %r492;
	or.b32  	%r513, %r493, 20;
	mad.lo.s32 	%r514, %r513, 257, %r492;
	or.b32  	%r515, %r493, 22;
	mad.lo.s32 	%r516, %r515, 257, %r492;
	or.b32  	%r517, %r493, 24;
	mad.lo.s32 	%r518, %r517, 257, %r492;
	or.b32  	%r519, %r493, 26;
	mad.lo.s32 	%r520, %r519, 257, %r492;
	or.b32  	%r521, %r493, 28;
	mad.lo.s32 	%r522, %r521, 257, %r492;
	or.b32  	%r523, %r493, 30;
	mad.lo.s32 	%r524, %r523, 257, %r492;
	mul.lo.s32 	%r525, %r146, 2184;
	mad.lo.s32 	%r526, %r477, 546, %r525;
	mad.lo.s32 	%r527, %r474, 33, %r526;
	setp.lt.u32 	%p234, %r1, 4;
	setp.eq.s32 	%p235, %r147, 4;
	setp.eq.s32 	%p236, %r147, 5;
	bfe.s32 	%r528, %r1, 2, 1;
	and.b32  	%r529, %r528, 516;
	bfe.s32 	%r530, %r1, 3, 1;
	and.b32  	%r531, %r1, 8;
	setp.eq.s32 	%p237, %r531, 0;
	and.b32  	%r532, %r530, 258;
	or.b32  	%r533, %r473, %r488;
	selp.b32 	%r534, 0, 1032, %p127;
	and.b32  	%r535, %r1, 1;
	neg.s32 	%r536, %r535;
	setp.eq.b32 	%p238, %r535, 1;
	and.b32  	%r537, %r536, 2064;
	or.b32  	%r538, %r532, %r529;
	add.s32 	%r539, %r538, %r533;
	add.s32 	%r540, %r539, %r534;
	add.s32 	%r177, %r540, %r537;
	bfe.s32 	%r541, %r4, 2, 1;
	and.b32  	%r542, %r4, 4;
	setp.eq.s32 	%p239, %r542, 0;
	and.b32  	%r543, %r541, 516;
	and.b32  	%r544, %r487, 12;
	and.b32  	%r545, %r530, 4144;
	mul.lo.s32 	%r546, %r493, 258;
	bfe.s32 	%r547, %r4, 1, 1;
	and.b32  	%r548, %r4, 2;
	setp.eq.s32 	%p240, %r548, 0;
	and.b32  	%r549, %r547, 1032;
	and.b32  	%r550, %r4, 1;
	neg.s32 	%r551, %r550;
	setp.eq.b32 	%p241, %r550, 1;
	and.b32  	%r552, %r551, 2064;
	or.b32  	%r553, %r477, %r544;
	add.s32 	%r554, %r553, %r546;
	add.s32 	%r555, %r554, %r543;
	add.s32 	%r556, %r555, %r545;
	add.s32 	%r557, %r556, %r549;
	add.s32 	%r558, %r557, %r552;
	mul.wide.u32 	%rd92, %r558, 4;
	mov.u64 	%rd93, shmem;
	add.s64 	%rd13, %rd93, %rd92;
	selp.b64 	%rd94, 2064, 0, %p241;
	selp.b64 	%rd95, 0, 1032, %p240;
	selp.b64 	%rd96, 0, 4144, %p237;
	selp.b64 	%rd97, 0, 516, %p239;
	cvt.u64.u32 	%rd98, %r546;
	cvt.u64.u32 	%rd99, %r553;
	add.s64 	%rd100, %rd99, %rd98;
	add.s64 	%rd101, %rd100, %rd97;
	add.s64 	%rd102, %rd101, %rd96;
	add.s64 	%rd103, %rd102, %rd95;
	add.s64 	%rd104, %rd103, %rd94;
	shl.b64 	%rd105, %rd104, 2;
	add.s64 	%rd14, %rd93, %rd105;
	shl.b32 	%r559, %r251, 20;
	shl.b32 	%r560, %r255, 9;
	add.s32 	%r561, %r560, %r559;
	or.b32  	%r178, %r5, %r176;
	and.b32  	%r179, %r1, 15;
	cvt.s64.s32 	%rd15, %r561;
	add.s32 	%r562, %r4, %r491;
	mul.wide.u32 	%rd106, %r562, 4;
	add.s64 	%rd16, %rd93, %rd106;
	cvt.u64.u32 	%rd107, %r4;
	cvt.u64.u32 	%rd17, %r491;
	add.s64 	%rd108, %rd17, %rd107;
	shl.b64 	%rd109, %rd108, 2;
	add.s64 	%rd18, %rd93, %rd109;
	add.s32 	%r563, %r494, %r1;
	mul.wide.u32 	%rd110, %r563, 4;
	add.s64 	%rd19, %rd93, %rd110;
	add.s32 	%r564, %r496, %r1;
	mul.wide.u32 	%rd111, %r564, 4;
	add.s64 	%rd20, %rd93, %rd111;
	add.s32 	%r565, %r498, %r1;
	mul.wide.u32 	%rd112, %r565, 4;
	add.s64 	%rd21, %rd93, %rd112;
	add.s32 	%r566, %r500, %r1;
	mul.wide.u32 	%rd113, %r566, 4;
	add.s64 	%rd22, %rd93, %rd113;
	add.s32 	%r567, %r502, %r1;
	mul.wide.u32 	%rd114, %r567, 4;
	add.s64 	%rd23, %rd93, %rd114;
	add.s32 	%r568, %r504, %r1;
	mul.wide.u32 	%rd115, %r568, 4;
	add.s64 	%rd24, %rd93, %rd115;
	add.s32 	%r569, %r506, %r1;
	mul.wide.u32 	%rd116, %r569, 4;
	add.s64 	%rd25, %rd93, %rd116;
	add.s32 	%r570, %r508, %r1;
	mul.wide.u32 	%rd117, %r570, 4;
	add.s64 	%rd26, %rd93, %rd117;
	add.s32 	%r571, %r510, %r1;
	mul.wide.u32 	%rd118, %r571, 4;
	add.s64 	%rd27, %rd93, %rd118;
	add.s32 	%r572, %r512, %r1;
	mul.wide.u32 	%rd119, %r572, 4;
	add.s64 	%rd28, %rd93, %rd119;
	add.s32 	%r573, %r514, %r1;
	mul.wide.u32 	%rd120, %r573, 4;
	add.s64 	%rd29, %rd93, %rd120;
	add.s32 	%r574, %r516, %r1;
	mul.wide.u32 	%rd121, %r574, 4;
	add.s64 	%rd30, %rd93, %rd121;
	add.s32 	%r575, %r518, %r1;
	mul.wide.u32 	%rd122, %r575, 4;
	add.s64 	%rd31, %rd93, %rd122;
	add.s32 	%r576, %r520, %r1;
	mul.wide.u32 	%rd123, %r576, 4;
	add.s64 	%rd32, %rd93, %rd123;
	add.s32 	%r577, %r522, %r1;
	mul.wide.u32 	%rd124, %r577, 4;
	add.s64 	%rd33, %rd93, %rd124;
	add.s32 	%r578, %r524, %r1;
	mul.wide.u32 	%rd125, %r578, 4;
	add.s64 	%rd34, %rd93, %rd125;
	add.s32 	%r579, %r527, %r493;
	mul.wide.u32 	%rd126, %r579, 4;
	add.s64 	%rd35, %rd93, %rd126;
	add.s32 	%r580, %r527, %r495;
	mul.wide.u32 	%rd127, %r580, 4;
	add.s64 	%rd36, %rd93, %rd127;
	add.s32 	%r581, %r527, %r497;
	mul.wide.u32 	%rd128, %r581, 4;
	add.s64 	%rd37, %rd93, %rd128;
	add.s32 	%r582, %r527, %r499;
	mul.wide.u32 	%rd129, %r582, 4;
	add.s64 	%rd38, %rd93, %rd129;
	add.s32 	%r583, %r527, %r501;
	mul.wide.u32 	%rd130, %r583, 4;
	add.s64 	%rd39, %rd93, %rd130;
	add.s32 	%r584, %r527, %r503;
	mul.wide.u32 	%rd131, %r584, 4;
	add.s64 	%rd40, %rd93, %rd131;
	add.s32 	%r585, %r527, %r505;
	mul.wide.u32 	%rd132, %r585, 4;
	add.s64 	%rd41, %rd93, %rd132;
	add.s32 	%r586, %r527, %r507;
	mul.wide.u32 	%rd133, %r586, 4;
	add.s64 	%rd42, %rd93, %rd133;
	add.s32 	%r587, %r527, %r509;
	mul.wide.u32 	%rd134, %r587, 4;
	add.s64 	%rd43, %rd93, %rd134;
	add.s32 	%r588, %r527, %r511;
	mul.wide.u32 	%rd135, %r588, 4;
	add.s64 	%rd44, %rd93, %rd135;
	add.s32 	%r589, %r527, %r513;
	mul.wide.u32 	%rd136, %r589, 4;
	add.s64 	%rd45, %rd93, %rd136;
	add.s32 	%r590, %r527, %r515;
	mul.wide.u32 	%rd137, %r590, 4;
	add.s64 	%rd46, %rd93, %rd137;
	add.s32 	%r591, %r527, %r517;
	mul.wide.u32 	%rd138, %r591, 4;
	add.s64 	%rd47, %rd93, %rd138;
	add.s32 	%r592, %r527, %r519;
	mul.wide.u32 	%rd139, %r592, 4;
	add.s64 	%rd48, %rd93, %rd139;
	add.s32 	%r593, %r527, %r521;
	mul.wide.u32 	%rd140, %r593, 4;
	add.s64 	%rd49, %rd93, %rd140;
	add.s32 	%r594, %r527, %r523;
	mul.wide.u32 	%rd141, %r594, 4;
	add.s64 	%rd50, %rd93, %rd141;
	add.s32 	%r595, %r147, -1;
	setp.lt.u32 	%p242, %r595, 3;
	or.pred  	%p243, %p234, %p242;
	or.pred  	%p244, %p243, %p235;
	and.b32  	%r596, %r1, 24;
	setp.eq.s32 	%p245, %r596, 24;
	or.pred  	%p246, %p236, %p245;
	selp.b32 	%r180, 1145324612, -286331154, %p243;
	or.pred  	%p1, %p244, %p246;
	shl.b32 	%r181, %r493, 5;
	add.s32 	%r597, %r177, %r181;
	mul.wide.u32 	%rd142, %r597, 4;
	add.s64 	%rd51, %rd93, %rd142;
	cvt.u64.u32 	%rd143, %r181;
	selp.b64 	%rd144, 2064, 0, %p238;
	selp.b64 	%rd145, 0, 1032, %p127;
	cvt.u64.u32 	%rd146, %r533;
	cvt.u64.u32 	%rd147, %r538;
	add.s64 	%rd148, %rd147, %rd146;
	add.s64 	%rd149, %rd148, %rd145;
	add.s64 	%rd52, %rd149, %rd144;
	add.s64 	%rd150, %rd52, %rd143;
	shl.b64 	%rd151, %rd150, 2;
	add.s64 	%rd53, %rd93, %rd151;
	shl.b32 	%r598, %r495, 5;
	add.s32 	%r599, %r177, %r598;
	mul.wide.u32 	%rd152, %r599, 4;
	add.s64 	%rd54, %rd93, %rd152;
	cvt.u64.u32 	%rd153, %r598;
	add.s64 	%rd154, %rd52, %rd153;
	shl.b64 	%rd155, %rd154, 2;
	add.s64 	%rd55, %rd93, %rd155;
	shl.b32 	%r600, %r497, 5;
	add.s32 	%r601, %r177, %r600;
	mul.wide.u32 	%rd156, %r601, 4;
	add.s64 	%rd56, %rd93, %rd156;
	cvt.u64.u32 	%rd157, %r600;
	add.s64 	%rd158, %rd52, %rd157;
	shl.b64 	%rd159, %rd158, 2;
	add.s64 	%rd57, %rd93, %rd159;
	shl.b32 	%r602, %r499, 5;
	add.s32 	%r603, %r177, %r602;
	mul.wide.u32 	%rd160, %r603, 4;
	add.s64 	%rd58, %rd93, %rd160;
	cvt.u64.u32 	%rd161, %r602;
	add.s64 	%rd162, %rd52, %rd161;
	shl.b64 	%rd163, %rd162, 2;
	add.s64 	%rd59, %rd93, %rd163;
	add.s32 	%r604, %r558, 32;
	mul.wide.u32 	%rd164, %r604, 4;
	add.s64 	%rd60, %rd93, %rd164;
	add.s32 	%r605, %r558, 48;
	mul.wide.u32 	%rd165, %r605, 4;
	add.s64 	%rd61, %rd93, %rd165;
	add.s32 	%r606, %r558, 64;
	mul.wide.u32 	%rd166, %r606, 4;
	add.s64 	%rd62, %rd93, %rd166;
	add.s32 	%r607, %r558, 80;
	mul.wide.u32 	%rd167, %r607, 4;
	add.s64 	%rd63, %rd93, %rd167;
	add.s32 	%r608, %r558, 96;
	mul.wide.u32 	%rd168, %r608, 4;
	add.s64 	%rd64, %rd93, %rd168;
	add.s32 	%r609, %r558, 112;
	mul.wide.u32 	%rd169, %r609, 4;
	add.s64 	%rd65, %rd93, %rd169;
	add.s32 	%r610, %r558, 128;
	mul.wide.u32 	%rd170, %r610, 4;
	add.s64 	%rd66, %rd93, %rd170;
	add.s32 	%r611, %r558, 144;
	mul.wide.u32 	%rd171, %r611, 4;
	add.s64 	%rd67, %rd93, %rd171;
	add.s32 	%r612, %r558, 160;
	mul.wide.u32 	%rd172, %r612, 4;
	add.s64 	%rd68, %rd93, %rd172;
	add.s32 	%r613, %r558, 176;
	mul.wide.u32 	%rd173, %r613, 4;
	add.s64 	%rd69, %rd93, %rd173;
	add.s32 	%r614, %r558, 192;
	mul.wide.u32 	%rd174, %r614, 4;
	add.s64 	%rd70, %rd93, %rd174;
	add.s32 	%r615, %r558, 208;
	mul.wide.u32 	%rd175, %r615, 4;
	add.s64 	%rd71, %rd93, %rd175;
	add.s32 	%r616, %r558, 224;
	mul.wide.u32 	%rd176, %r616, 4;
	add.s64 	%rd72, %rd93, %rd176;
	add.s32 	%r617, %r558, 240;
	mul.wide.u32 	%rd177, %r617, 4;
	add.s64 	%rd73, %rd93, %rd177;
	mov.u32 	%r89, 0;
	setp.eq.s32 	%p248, %r176, 0;
	mov.u16 	%rs38, 25600;
	mov.u16 	%rs40, 21504;
	mov.u16 	%rs44, 18432;
	mov.u32 	%r3393, %r89;
	mov.u32 	%r3394, %r89;
	mov.u32 	%r3395, %r89;
	bra.uni 	$L__BB0_187;
$L__BB0_158:                            // %L46149
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r145, %r89, 64;
	setp.ne.s32 	%p297, %r89, 8128;
	mov.u32 	%r89, %r145;
	@%p297 bra 	$L__BB0_187;
	bra.uni 	$L__BB0_159;
$L__BB0_187:                            // %L1602
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_205 Depth 2
                                        //     Child Loop BB0_155 Depth 2
	add.s32 	%r618, %r89, %r249;
	setp.lt.s32 	%p247, %r618, %r250;
	@%p247 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_159;
$L__BB0_188:                            // %pass733
                                        //   in Loop: Header=BB0_187 Depth=1
	cvt.u32.u64 	%r811, %rd17;
	or.b32  	%r812, %r89, %r4;
	shl.b32 	%r813, %r812, 14;
	and.b32  	%r814, %r813, 133414912;
	or.b32  	%r815, %r175, %r814;
	add.s32 	%r816, %r174, %r815;
	shr.s32 	%r817, %r816, 31;
	shr.u32 	%r818, %r817, 5;
	add.s32 	%r819, %r816, %r818;
	shr.s32 	%r820, %r819, 27;
	setp.lt.s32 	%p249, %r816, 0;
	and.b32  	%r821, %r819, -134217728;
	setp.ne.s32 	%p250, %r821, %r816;
	and.pred  	%p251, %p249, %p250;
	selp.u32 	%r822, 1, 0, %p251;
	sub.s32 	%r823, %r822, %r820;
	shl.b32 	%r824, %r823, 27;
	add.s32 	%r825, %r824, %r816;
	mul.wide.s32 	%rd178, %r825, 4;
	add.s64 	%rd179, %rd3, %rd178;
	ld.global.v4.u32 	{%r826, %r827, %r828, %r829}, [%rd179];
	or.b32  	%r830, %r812, 16;
	shl.b32 	%r831, %r830, 14;
	and.b32  	%r832, %r831, 133677056;
	or.b32  	%r833, %r175, %r832;
	add.s32 	%r834, %r174, %r833;
	shr.s32 	%r835, %r834, 31;
	shr.u32 	%r836, %r835, 5;
	add.s32 	%r837, %r834, %r836;
	shr.s32 	%r838, %r837, 27;
	setp.lt.s32 	%p252, %r834, 0;
	and.b32  	%r839, %r837, -134217728;
	setp.ne.s32 	%p253, %r839, %r834;
	and.pred  	%p254, %p252, %p253;
	selp.u32 	%r840, 1, 0, %p254;
	sub.s32 	%r841, %r840, %r838;
	shl.b32 	%r842, %r841, 27;
	add.s32 	%r843, %r842, %r834;
	mul.wide.s32 	%rd180, %r843, 4;
	add.s64 	%rd181, %rd3, %rd180;
	ld.global.v4.u32 	{%r844, %r845, %r846, %r847}, [%rd181];
	and.b32  	%r848, %r89, 8128;
	or.b32  	%r849, %r4, %r848;
	shl.b32 	%r850, %r849, 14;
	or.b32  	%r851, %r850, %r175;
	or.b32  	%r852, %r851, 524288;
	add.s32 	%r853, %r174, %r852;
	shr.s32 	%r854, %r853, 31;
	shr.u32 	%r855, %r854, 5;
	add.s32 	%r856, %r853, %r855;
	shr.s32 	%r857, %r856, 27;
	setp.lt.s32 	%p255, %r853, 0;
	and.b32  	%r858, %r856, -134217728;
	setp.ne.s32 	%p256, %r858, %r853;
	and.pred  	%p257, %p255, %p256;
	selp.u32 	%r859, 1, 0, %p257;
	sub.s32 	%r860, %r859, %r857;
	shl.b32 	%r861, %r860, 27;
	add.s32 	%r862, %r861, %r853;
	mul.wide.s32 	%rd182, %r862, 4;
	add.s64 	%rd183, %rd3, %rd182;
	ld.global.v4.u32 	{%r863, %r864, %r865, %r866}, [%rd183];
	or.b32  	%r867, %r851, 786432;
	add.s32 	%r868, %r174, %r867;
	shr.s32 	%r869, %r868, 31;
	shr.u32 	%r870, %r869, 5;
	add.s32 	%r871, %r868, %r870;
	shr.s32 	%r872, %r871, 27;
	setp.lt.s32 	%p258, %r868, 0;
	and.b32  	%r873, %r871, -134217728;
	setp.ne.s32 	%p259, %r873, %r868;
	and.pred  	%p260, %p258, %p259;
	selp.u32 	%r874, 1, 0, %p260;
	sub.s32 	%r875, %r874, %r872;
	shl.b32 	%r876, %r875, 27;
	add.s32 	%r877, %r876, %r868;
	mul.wide.s32 	%rd184, %r877, 4;
	add.s64 	%rd185, %rd3, %rd184;
	ld.global.v4.u32 	{%r878, %r879, %r880, %r881}, [%rd185];
	selp.b32 	%r882, %r828, %r826, %p248;
	shfl.sync.bfly.b32	%r883, %r882, 16, 31, -1;
	selp.b32 	%r621, %r826, %r883, %p248;
	selp.b32 	%r626, %r883, %r828, %p248;
	selp.b32 	%r884, %r829, %r827, %p248;
	shfl.sync.bfly.b32	%r885, %r884, 16, 31, -1;
	selp.b32 	%r629, %r827, %r885, %p248;
	selp.b32 	%r634, %r885, %r829, %p248;
	selp.b32 	%r886, %r846, %r844, %p248;
	shfl.sync.bfly.b32	%r887, %r886, 16, 31, -1;
	selp.b32 	%r637, %r844, %r887, %p248;
	selp.b32 	%r642, %r887, %r846, %p248;
	selp.b32 	%r888, %r847, %r845, %p248;
	shfl.sync.bfly.b32	%r889, %r888, 16, 31, -1;
	selp.b32 	%r645, %r845, %r889, %p248;
	selp.b32 	%r650, %r889, %r847, %p248;
	selp.b32 	%r890, %r865, %r863, %p248;
	shfl.sync.bfly.b32	%r891, %r890, 16, 31, -1;
	selp.b32 	%r653, %r863, %r891, %p248;
	selp.b32 	%r658, %r891, %r865, %p248;
	selp.b32 	%r892, %r866, %r864, %p248;
	shfl.sync.bfly.b32	%r893, %r892, 16, 31, -1;
	selp.b32 	%r661, %r864, %r893, %p248;
	selp.b32 	%r666, %r893, %r866, %p248;
	selp.b32 	%r894, %r880, %r878, %p248;
	shfl.sync.bfly.b32	%r895, %r894, 16, 31, -1;
	selp.b32 	%r669, %r878, %r895, %p248;
	selp.b32 	%r674, %r895, %r880, %p248;
	selp.b32 	%r896, %r881, %r879, %p248;
	shfl.sync.bfly.b32	%r897, %r896, 16, 31, -1;
	selp.b32 	%r677, %r879, %r897, %p248;
	selp.b32 	%r682, %r897, %r881, %p248;
	shl.b32 	%r622, %r626, 4;
	mov.u32 	%r620, 252645135;
	// begin inline asm
	lop3.b32 %r684, %r620, %r621, %r622, 202;
	// end inline asm
	shr.u32 	%r625, %r621, 4;
	// begin inline asm
	lop3.b32 %r700, %r620, %r625, %r626, 202;
	// end inline asm
	shl.b32 	%r630, %r634, 4;
	// begin inline asm
	lop3.b32 %r692, %r620, %r629, %r630, 202;
	// end inline asm
	shr.u32 	%r633, %r629, 4;
	// begin inline asm
	lop3.b32 %r708, %r620, %r633, %r634, 202;
	// end inline asm
	shl.b32 	%r638, %r642, 4;
	// begin inline asm
	lop3.b32 %r716, %r620, %r637, %r638, 202;
	// end inline asm
	shr.u32 	%r641, %r637, 4;
	// begin inline asm
	lop3.b32 %r732, %r620, %r641, %r642, 202;
	// end inline asm
	shl.b32 	%r646, %r650, 4;
	// begin inline asm
	lop3.b32 %r724, %r620, %r645, %r646, 202;
	// end inline asm
	shr.u32 	%r649, %r645, 4;
	// begin inline asm
	lop3.b32 %r740, %r620, %r649, %r650, 202;
	// end inline asm
	shl.b32 	%r654, %r658, 4;
	// begin inline asm
	lop3.b32 %r685, %r620, %r653, %r654, 202;
	// end inline asm
	shr.u32 	%r657, %r653, 4;
	// begin inline asm
	lop3.b32 %r701, %r620, %r657, %r658, 202;
	// end inline asm
	shl.b32 	%r662, %r666, 4;
	// begin inline asm
	lop3.b32 %r693, %r620, %r661, %r662, 202;
	// end inline asm
	shr.u32 	%r665, %r661, 4;
	// begin inline asm
	lop3.b32 %r709, %r620, %r665, %r666, 202;
	// end inline asm
	shl.b32 	%r670, %r674, 4;
	// begin inline asm
	lop3.b32 %r717, %r620, %r669, %r670, 202;
	// end inline asm
	shr.u32 	%r673, %r669, 4;
	// begin inline asm
	lop3.b32 %r733, %r620, %r673, %r674, 202;
	// end inline asm
	shl.b32 	%r678, %r682, 4;
	// begin inline asm
	lop3.b32 %r725, %r620, %r677, %r678, 202;
	// end inline asm
	shr.u32 	%r681, %r677, 4;
	// begin inline asm
	lop3.b32 %r741, %r620, %r681, %r682, 202;
	// end inline asm
	mov.u32 	%r686, 25152;
	// begin inline asm
	prmt.b32 %r748, %r684, %r685, %r686;
	// end inline asm
	mov.u32 	%r690, 29521;
	// begin inline asm
	prmt.b32 %r780, %r684, %r685, %r690;
	// end inline asm
	// begin inline asm
	prmt.b32 %r756, %r692, %r693, %r686;
	// end inline asm
	// begin inline asm
	prmt.b32 %r788, %r692, %r693, %r690;
	// end inline asm
	// begin inline asm
	prmt.b32 %r749, %r700, %r701, %r686;
	// end inline asm
	// begin inline asm
	prmt.b32 %r781, %r700, %r701, %r690;
	// end inline asm
	// begin inline asm
	prmt.b32 %r757, %r708, %r709, %r686;
	// end inline asm
	// begin inline asm
	prmt.b32 %r789, %r708, %r709, %r690;
	// end inline asm
	// begin inline asm
	prmt.b32 %r764, %r716, %r717, %r686;
	// end inline asm
	// begin inline asm
	prmt.b32 %r796, %r716, %r717, %r690;
	// end inline asm
	// begin inline asm
	prmt.b32 %r772, %r724, %r725, %r686;
	// end inline asm
	// begin inline asm
	prmt.b32 %r804, %r724, %r725, %r690;
	// end inline asm
	// begin inline asm
	prmt.b32 %r765, %r732, %r733, %r686;
	// end inline asm
	// begin inline asm
	prmt.b32 %r797, %r732, %r733, %r690;
	// end inline asm
	// begin inline asm
	prmt.b32 %r773, %r740, %r741, %r686;
	// end inline asm
	// begin inline asm
	prmt.b32 %r805, %r740, %r741, %r690;
	// end inline asm
	mov.u32 	%r806, 21520;
	// begin inline asm
	prmt.b32 %r747, %r748, %r749, %r806;
	// end inline asm
	mov.u32 	%r810, 30258;
	// begin inline asm
	prmt.b32 %r751, %r748, %r749, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r755, %r756, %r757, %r806;
	// end inline asm
	// begin inline asm
	prmt.b32 %r759, %r756, %r757, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r763, %r764, %r765, %r806;
	// end inline asm
	// begin inline asm
	prmt.b32 %r767, %r764, %r765, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r771, %r772, %r773, %r806;
	// end inline asm
	// begin inline asm
	prmt.b32 %r775, %r772, %r773, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r779, %r780, %r781, %r806;
	// end inline asm
	// begin inline asm
	prmt.b32 %r783, %r780, %r781, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r787, %r788, %r789, %r806;
	// end inline asm
	// begin inline asm
	prmt.b32 %r791, %r788, %r789, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r795, %r796, %r797, %r806;
	// end inline asm
	// begin inline asm
	prmt.b32 %r799, %r796, %r797, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r803, %r804, %r805, %r806;
	// end inline asm
	// begin inline asm
	prmt.b32 %r807, %r804, %r805, %r810;
	// end inline asm
	st.shared.u32 	[%rd16], %r747;
	st.shared.u32 	[%rd18+512], %r755;
	st.shared.u32 	[%rd18+256], %r751;
	st.shared.u32 	[%rd18+768], %r759;
	and.b32  	%r898, %r830, 31;
	add.s32 	%r899, %r898, %r811;
	mul.wide.u32 	%rd186, %r899, 4;
	add.s64 	%rd188, %rd93, %rd186;
	st.shared.u32 	[%rd188], %r763;
	cvt.u64.u32 	%rd189, %r898;
	add.s64 	%rd190, %rd17, %rd189;
	shl.b64 	%rd191, %rd190, 2;
	add.s64 	%rd192, %rd93, %rd191;
	st.shared.u32 	[%rd192+512], %r771;
	st.shared.u32 	[%rd192+256], %r767;
	st.shared.u32 	[%rd192+768], %r775;
	st.shared.u32 	[%rd18+128], %r779;
	st.shared.u32 	[%rd18+640], %r787;
	st.shared.u32 	[%rd18+384], %r783;
	st.shared.u32 	[%rd18+896], %r791;
	st.shared.u32 	[%rd192+128], %r795;
	st.shared.u32 	[%rd192+640], %r803;
	st.shared.u32 	[%rd192+384], %r799;
	st.shared.u32 	[%rd192+896], %r807;
	bar.sync 	0;
	ld.shared.u32 	%r182, [%rd19];
	ld.shared.u32 	%r183, [%rd20];
	ld.shared.u32 	%r184, [%rd21];
	ld.shared.u32 	%r185, [%rd22];
	ld.shared.u32 	%r186, [%rd23];
	ld.shared.u32 	%r187, [%rd24];
	ld.shared.u32 	%r188, [%rd25];
	ld.shared.u32 	%r189, [%rd26];
	ld.shared.u32 	%r190, [%rd27];
	ld.shared.u32 	%r191, [%rd28];
	ld.shared.u32 	%r192, [%rd29];
	ld.shared.u32 	%r193, [%rd30];
	ld.shared.u32 	%r194, [%rd31];
	ld.shared.u32 	%r195, [%rd32];
	ld.shared.u32 	%r196, [%rd33];
	ld.shared.u32 	%r197, [%rd34];
	bar.sync 	0;
	shfl.sync.idx.b32	%r198, %r171, 0, 31, -1;
	shfl.sync.idx.b32	%r199, %r171, 1, 31, -1;
	shfl.sync.idx.b32	%r200, %r171, 2, 31, -1;
	shfl.sync.idx.b32	%r201, %r171, 3, 31, -1;
	shfl.sync.idx.b32	%r202, %r171, 4, 31, -1;
	shfl.sync.idx.b32	%r203, %r171, 5, 31, -1;
	shfl.sync.idx.b32	%r204, %r171, 6, 31, -1;
	shfl.sync.idx.b32	%r205, %r171, 7, 31, -1;
	shfl.sync.idx.b32	%r206, %r171, 8, 31, -1;
	shfl.sync.idx.b32	%r207, %r171, 9, 31, -1;
	shfl.sync.idx.b32	%r208, %r171, 10, 31, -1;
	shfl.sync.idx.b32	%r209, %r171, 11, 31, -1;
	shfl.sync.idx.b32	%r210, %r171, 12, 31, -1;
	shfl.sync.idx.b32	%r211, %r171, 13, 31, -1;
	shfl.sync.idx.b32	%r212, %r171, 14, 31, -1;
	shfl.sync.idx.b32	%r213, %r171, 15, 31, -1;
	setp.eq.s32 	%p261, %r198, 999999999;
	@%p261 bra 	$L__BB0_136;
// %bb.189:                             // %pass3077
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r900, %r198, %r1;
	mul.wide.s32 	%rd193, %r900, 4;
	add.s64 	%rd195, %rd93, %rd193;
	st.shared.u32 	[%rd195], %r182;
	setp.eq.s32 	%p262, %r199, 999999999;
	@%p262 bra 	$L__BB0_137;
// %bb.190:                             // %pass3145
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r901, %r199, %r1;
	mul.wide.s32 	%rd196, %r901, 4;
	add.s64 	%rd198, %rd93, %rd196;
	st.shared.u32 	[%rd198], %r183;
	setp.eq.s32 	%p263, %r200, 999999999;
	@%p263 bra 	$L__BB0_138;
// %bb.191:                             // %pass3213
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r902, %r200, %r1;
	mul.wide.s32 	%rd199, %r902, 4;
	add.s64 	%rd201, %rd93, %rd199;
	st.shared.u32 	[%rd201], %r184;
	setp.eq.s32 	%p264, %r201, 999999999;
	@%p264 bra 	$L__BB0_139;
// %bb.192:                             // %pass3281
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r903, %r201, %r1;
	mul.wide.s32 	%rd202, %r903, 4;
	add.s64 	%rd204, %rd93, %rd202;
	st.shared.u32 	[%rd204], %r185;
	setp.eq.s32 	%p265, %r202, 999999999;
	@%p265 bra 	$L__BB0_140;
// %bb.193:                             // %pass3349
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r904, %r202, %r1;
	mul.wide.s32 	%rd205, %r904, 4;
	add.s64 	%rd207, %rd93, %rd205;
	st.shared.u32 	[%rd207], %r186;
	setp.eq.s32 	%p266, %r203, 999999999;
	@%p266 bra 	$L__BB0_141;
// %bb.194:                             // %pass3417
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r905, %r203, %r1;
	mul.wide.s32 	%rd208, %r905, 4;
	add.s64 	%rd210, %rd93, %rd208;
	st.shared.u32 	[%rd210], %r187;
	setp.eq.s32 	%p267, %r204, 999999999;
	@%p267 bra 	$L__BB0_142;
// %bb.195:                             // %pass3485
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r906, %r204, %r1;
	mul.wide.s32 	%rd211, %r906, 4;
	add.s64 	%rd213, %rd93, %rd211;
	st.shared.u32 	[%rd213], %r188;
	setp.eq.s32 	%p268, %r205, 999999999;
	@%p268 bra 	$L__BB0_143;
// %bb.196:                             // %pass3553
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r907, %r205, %r1;
	mul.wide.s32 	%rd214, %r907, 4;
	add.s64 	%rd216, %rd93, %rd214;
	st.shared.u32 	[%rd216], %r189;
	setp.eq.s32 	%p269, %r206, 999999999;
	@%p269 bra 	$L__BB0_144;
// %bb.197:                             // %pass3621
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r908, %r206, %r1;
	mul.wide.s32 	%rd217, %r908, 4;
	add.s64 	%rd219, %rd93, %rd217;
	st.shared.u32 	[%rd219], %r190;
	setp.eq.s32 	%p270, %r207, 999999999;
	@%p270 bra 	$L__BB0_145;
// %bb.198:                             // %pass3689
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r909, %r207, %r1;
	mul.wide.s32 	%rd220, %r909, 4;
	add.s64 	%rd222, %rd93, %rd220;
	st.shared.u32 	[%rd222], %r191;
	setp.eq.s32 	%p271, %r208, 999999999;
	@%p271 bra 	$L__BB0_146;
// %bb.199:                             // %pass3757
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r910, %r208, %r1;
	mul.wide.s32 	%rd223, %r910, 4;
	add.s64 	%rd225, %rd93, %rd223;
	st.shared.u32 	[%rd225], %r192;
	setp.eq.s32 	%p272, %r209, 999999999;
	@%p272 bra 	$L__BB0_147;
// %bb.200:                             // %pass3825
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r911, %r209, %r1;
	mul.wide.s32 	%rd226, %r911, 4;
	add.s64 	%rd228, %rd93, %rd226;
	st.shared.u32 	[%rd228], %r193;
	setp.eq.s32 	%p273, %r210, 999999999;
	@%p273 bra 	$L__BB0_148;
// %bb.201:                             // %pass3893
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r912, %r210, %r1;
	mul.wide.s32 	%rd229, %r912, 4;
	add.s64 	%rd231, %rd93, %rd229;
	st.shared.u32 	[%rd231], %r194;
	setp.eq.s32 	%p274, %r211, 999999999;
	@%p274 bra 	$L__BB0_149;
// %bb.202:                             // %pass3961
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r913, %r211, %r1;
	mul.wide.s32 	%rd232, %r913, 4;
	add.s64 	%rd234, %rd93, %rd232;
	st.shared.u32 	[%rd234], %r195;
	setp.eq.s32 	%p275, %r212, 999999999;
	@%p275 bra 	$L__BB0_150;
// %bb.203:                             // %pass4029
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r914, %r212, %r1;
	mul.wide.s32 	%rd235, %r914, 4;
	add.s64 	%rd237, %rd93, %rd235;
	st.shared.u32 	[%rd237], %r196;
	setp.eq.s32 	%p276, %r213, 999999999;
	@%p276 bra 	$L__BB0_151;
// %bb.204:                             // %pass4097
                                        //   in Loop: Header=BB0_187 Depth=1
	add.s32 	%r916, %r213, %r1;
	mul.wide.s32 	%rd238, %r916, 4;
	add.s64 	%rd240, %rd93, %rd238;
	st.shared.u32 	[%rd240], %r197;
	bar.sync 	0;
	ld.shared.u32 	%r214, [%rd35];
	ld.shared.u32 	%r215, [%rd36];
	ld.shared.u32 	%r216, [%rd37];
	ld.shared.u32 	%r217, [%rd38];
	ld.shared.u32 	%r218, [%rd39];
	ld.shared.u32 	%r219, [%rd40];
	ld.shared.u32 	%r220, [%rd41];
	ld.shared.u32 	%r221, [%rd42];
	ld.shared.u32 	%r222, [%rd43];
	ld.shared.u32 	%r223, [%rd44];
	ld.shared.u32 	%r224, [%rd45];
	ld.shared.u32 	%r225, [%rd46];
	ld.shared.u32 	%r226, [%rd47];
	ld.shared.u32 	%r227, [%rd48];
	ld.shared.u32 	%r228, [%rd49];
	ld.shared.u32 	%r229, [%rd50];
	bar.sync 	0;
	mov.u32 	%r3385, 16;
	bra.uni 	$L__BB0_205;
$L__BB0_152:                            // %L21627
                                        //   in Loop: Header=BB0_205 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1461, [%rd13];
	ld.shared.u32 	%r1468, [%rd14+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1478, %r1475}, {%r376, %r379}, {%r1461}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1487, %r1484}, {%r376, %r379}, {%r1468}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1471, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1473, %r1471, %r1475;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1476, %r410, %r1478, %r1473;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1480, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1482, %r1480, %r1484;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1485, %r410, %r1487, %r1482;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1489, %r413, %r1478;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1492, %r410, %r1475, %r1489;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1496, %r413, %r1487;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1499, %r410, %r1484, %r1496;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1522, %r1525}, {%r452, %r455}, {%r1476, %r1492}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1529, %r1533}, {%r452, %r455}, {%r1485, %r1499}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1521, %r1522, %r1522;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1524, %r1525, %r1525, %r1521;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1528, %r1529, %r1529, %r1524;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1532, %r1533, %r1533, %r1528;
	// end inline asm
	mov.u32 	%r2118, 425007445;
	// begin inline asm
	fma.rn.f16x2 %r1536, %r2118, %r1532, %r3395;
	// end inline asm
	ld.shared.u32 	%r1544, [%rd60];
	ld.shared.u32 	%r1551, [%rd61];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1561, %r1558}, {%r376, %r379}, {%r1544}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1570, %r1567}, {%r376, %r379}, {%r1551}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1554, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1556, %r1554, %r1558;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1559, %r410, %r1561, %r1556;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1563, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1565, %r1563, %r1567;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1568, %r410, %r1570, %r1565;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1572, %r413, %r1561;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1575, %r410, %r1558, %r1572;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1579, %r413, %r1570;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1582, %r410, %r1567, %r1579;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1605, %r1608}, {%r452, %r455}, {%r1559, %r1575}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1612, %r1616}, {%r452, %r455}, {%r1568, %r1582}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1604, %r1605, %r1605;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1607, %r1608, %r1608, %r1604;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1611, %r1612, %r1612, %r1607;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1615, %r1616, %r1616, %r1611;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1619, %r2118, %r1615, %r1536;
	// end inline asm
	ld.shared.u32 	%r1627, [%rd62];
	ld.shared.u32 	%r1634, [%rd63];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1644, %r1641}, {%r376, %r379}, {%r1627}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1653, %r1650}, {%r376, %r379}, {%r1634}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1637, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1639, %r1637, %r1641;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1642, %r410, %r1644, %r1639;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1646, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1648, %r1646, %r1650;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1651, %r410, %r1653, %r1648;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1655, %r413, %r1644;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1658, %r410, %r1641, %r1655;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1662, %r413, %r1653;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1665, %r410, %r1650, %r1662;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1688, %r1691}, {%r452, %r455}, {%r1642, %r1658}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1695, %r1699}, {%r452, %r455}, {%r1651, %r1665}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1687, %r1688, %r1688;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1690, %r1691, %r1691, %r1687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1694, %r1695, %r1695, %r1690;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1698, %r1699, %r1699, %r1694;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1702, %r2118, %r1698, %r1619;
	// end inline asm
	ld.shared.u32 	%r1710, [%rd64];
	ld.shared.u32 	%r1717, [%rd65];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1727, %r1724}, {%r376, %r379}, {%r1710}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1736, %r1733}, {%r376, %r379}, {%r1717}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1720, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1722, %r1720, %r1724;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1725, %r410, %r1727, %r1722;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1729, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1731, %r1729, %r1733;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1734, %r410, %r1736, %r1731;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1738, %r413, %r1727;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1741, %r410, %r1724, %r1738;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1745, %r413, %r1736;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1748, %r410, %r1733, %r1745;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1771, %r1774}, {%r452, %r455}, {%r1725, %r1741}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1778, %r1782}, {%r452, %r455}, {%r1734, %r1748}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1770, %r1771, %r1771;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1773, %r1774, %r1774, %r1770;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1777, %r1778, %r1778, %r1773;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1781, %r1782, %r1782, %r1777;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1785, %r2118, %r1781, %r1702;
	// end inline asm
	ld.shared.u32 	%r1793, [%rd66];
	ld.shared.u32 	%r1800, [%rd67];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1810, %r1807}, {%r376, %r379}, {%r1793}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1819, %r1816}, {%r376, %r379}, {%r1800}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1803, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1805, %r1803, %r1807;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1808, %r410, %r1810, %r1805;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1812, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1814, %r1812, %r1816;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1817, %r410, %r1819, %r1814;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1821, %r413, %r1810;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1824, %r410, %r1807, %r1821;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1828, %r413, %r1819;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1831, %r410, %r1816, %r1828;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1854, %r1857}, {%r452, %r455}, {%r1808, %r1824}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1861, %r1865}, {%r452, %r455}, {%r1817, %r1831}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1853, %r1854, %r1854;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1856, %r1857, %r1857, %r1853;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1860, %r1861, %r1861, %r1856;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1864, %r1865, %r1865, %r1860;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1868, %r2118, %r1864, %r1785;
	// end inline asm
	ld.shared.u32 	%r1876, [%rd68];
	ld.shared.u32 	%r1883, [%rd69];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1893, %r1890}, {%r376, %r379}, {%r1876}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1902, %r1899}, {%r376, %r379}, {%r1883}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1886, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1888, %r1886, %r1890;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1891, %r410, %r1893, %r1888;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1895, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1897, %r1895, %r1899;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1900, %r410, %r1902, %r1897;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1904, %r413, %r1893;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1907, %r410, %r1890, %r1904;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1911, %r413, %r1902;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1914, %r410, %r1899, %r1911;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1937, %r1940}, {%r452, %r455}, {%r1891, %r1907}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1944, %r1948}, {%r452, %r455}, {%r1900, %r1914}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1936, %r1937, %r1937;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1939, %r1940, %r1940, %r1936;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1943, %r1944, %r1944, %r1939;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1947, %r1948, %r1948, %r1943;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1951, %r2118, %r1947, %r1868;
	// end inline asm
	ld.shared.u32 	%r1959, [%rd70];
	ld.shared.u32 	%r1966, [%rd71];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1976, %r1973}, {%r376, %r379}, {%r1959}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1985, %r1982}, {%r376, %r379}, {%r1966}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1969, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1971, %r1969, %r1973;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1974, %r410, %r1976, %r1971;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1978, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1980, %r1978, %r1982;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1983, %r410, %r1985, %r1980;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1987, %r413, %r1976;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1990, %r410, %r1973, %r1987;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1994, %r413, %r1985;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1997, %r410, %r1982, %r1994;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2020, %r2023}, {%r452, %r455}, {%r1974, %r1990}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2027, %r2031}, {%r452, %r455}, {%r1983, %r1997}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2019, %r2020, %r2020;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2022, %r2023, %r2023, %r2019;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2026, %r2027, %r2027, %r2022;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2030, %r2031, %r2031, %r2026;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2034, %r2118, %r2030, %r1951;
	// end inline asm
	ld.shared.u32 	%r2042, [%rd72];
	ld.shared.u32 	%r2049, [%rd73];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2059, %r2056}, {%r376, %r379}, {%r2042}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2068, %r2065}, {%r376, %r379}, {%r2049}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2052, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2054, %r2052, %r2056;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2057, %r410, %r2059, %r2054;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2061, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2063, %r2061, %r2065;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2066, %r410, %r2068, %r2063;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2070, %r413, %r2059;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2073, %r410, %r2056, %r2070;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2077, %r413, %r2068;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2080, %r410, %r2065, %r2077;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2103, %r2106}, {%r452, %r455}, {%r2057, %r2073}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2110, %r2114}, {%r452, %r455}, {%r2066, %r2080}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2102, %r2103, %r2103;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2105, %r2106, %r2106, %r2102;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2109, %r2110, %r2110, %r2105;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2113, %r2114, %r2114, %r2109;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3395, %r2118, %r2113, %r2034;
	// end inline asm
	add.s32 	%r3393, %r3393, 8;
	setp.eq.s32 	%p282, %r3393, 48;
	@%p282 bra 	$L__BB0_209;
$L__BB0_153:                            // %L29187
                                        //   in Loop: Header=BB0_205 Depth=2
	bar.sync 	0;
	add.s32 	%r3385, %r3385, -8;
	setp.ne.s32 	%p286, %r3385, -16;
	@%p286 bra 	$L__BB0_205;
	bra.uni 	$L__BB0_154;
$L__BB0_205:                            // %L12262
                                        //   Parent Loop BB0_187 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p277, %r3385, 16;
	selp.b32 	%r1309, %r214, 0, %p277;
	setp.eq.s32 	%p278, %r3385, 8;
	selp.b32 	%r1310, %r218, %r1309, %p278;
	setp.eq.s32 	%p279, %r3385, 0;
	selp.b32 	%r1311, %r222, %r1310, %p279;
	setp.eq.s32 	%p280, %r3385, -8;
	selp.b32 	%r921, %r226, %r1311, %p280;
	selp.b32 	%r1312, %r215, 0, %p277;
	selp.b32 	%r1313, %r219, %r1312, %p278;
	selp.b32 	%r1314, %r223, %r1313, %p279;
	selp.b32 	%r967, %r227, %r1314, %p280;
	selp.b32 	%r1315, %r216, 0, %p277;
	selp.b32 	%r1316, %r220, %r1315, %p278;
	selp.b32 	%r1317, %r224, %r1316, %p279;
	selp.b32 	%r1013, %r228, %r1317, %p280;
	selp.b32 	%r1318, %r217, 0, %p277;
	selp.b32 	%r1319, %r221, %r1318, %p278;
	selp.b32 	%r1320, %r225, %r1319, %p279;
	selp.b32 	%r1059, %r229, %r1320, %p280;
	// begin inline asm
	mov.b32 %r922, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r933, {%rs40, %rs40};
	// end inline asm
	mov.u32 	%r1058, 983055;
	// begin inline asm
	lop3.b32 %r919, %r1058, %r921, %r922, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r923, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r924, %r922, %r923;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r927, %r919, %r924;
	// end inline asm
	mov.u32 	%r1069, 15728880;
	// begin inline asm
	lop3.b32 %r930, %r1069, %r921, %r933, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r934, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r935, %r933, %r934;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r938, %r930, %r935;
	// end inline asm
	// begin inline asm
	mov.b32 %r968, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r979, {%rs40, %rs40};
	// end inline asm
	// begin inline asm
	lop3.b32 %r965, %r1058, %r967, %r968, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r969, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r970, %r968, %r969;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r973, %r965, %r970;
	// end inline asm
	// begin inline asm
	lop3.b32 %r976, %r1069, %r967, %r979, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r980, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r981, %r979, %r980;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r984, %r976, %r981;
	// end inline asm
	// begin inline asm
	mov.b32 %r1014, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1025, {%rs40, %rs40};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1011, %r1058, %r1013, %r1014, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1015, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1016, %r1014, %r1015;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1019, %r1011, %r1016;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1022, %r1069, %r1013, %r1025, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1026, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1027, %r1025, %r1026;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1030, %r1022, %r1027;
	// end inline asm
	// begin inline asm
	mov.b32 %r1060, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1071, {%rs40, %rs40};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1057, %r1058, %r1059, %r1060, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1061, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1062, %r1060, %r1061;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1065, %r1057, %r1062;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1068, %r1069, %r1059, %r1071, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1072, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1073, %r1071, %r1072;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1076, %r1068, %r1073;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r938;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1101, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r927;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1104, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r984;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1107, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r973;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1110, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r1030;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1113, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r1019;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1116, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r1076;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1119, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r1065;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1122, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1180, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1125, %r1126}, {%r279, %r282}, {%r1101}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1132, %r1133}, {%r279, %r282}, {%r1104}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1139, %r1140}, {%r279, %r282}, {%r1107}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1146, %r1147}, {%r279, %r282}, {%r1110}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1153, %r1154}, {%r279, %r282}, {%r1113}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1160, %r1161}, {%r279, %r282}, {%r1116}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1167, %r1168}, {%r279, %r282}, {%r1119}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1174, %r1175}, {%r279, %r282}, {%r1122}, {%r1180, %r1180};
	// end inline asm
	@%p1 bra 	$L__BB0_207;
	bra.uni 	$L__BB0_206;
$L__BB0_207:                            // %pass5529
                                        //   in Loop: Header=BB0_205 Depth=2
	// begin inline asm
	neg.f16x2 %r1181, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1183, %r1181, %r1126;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1186, %r317, %r1125, %r1183;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1190, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1192, %r1190, %r1133;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1195, %r317, %r1132, %r1192;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1199, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1201, %r1199, %r1140;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1204, %r317, %r1139, %r1201;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1208, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1210, %r1208, %r1147;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1213, %r317, %r1146, %r1210;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1217, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1219, %r1217, %r1154;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1222, %r317, %r1153, %r1219;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1226, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1228, %r1226, %r1161;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1231, %r317, %r1160, %r1228;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1235, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1237, %r1235, %r1168;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1240, %r317, %r1167, %r1237;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1244, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1246, %r1244, %r1175;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1249, %r317, %r1174, %r1246;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1253, %r320, %r1125;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1256, %r317, %r1126, %r1253;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1260, %r320, %r1132;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1263, %r317, %r1133, %r1260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1267, %r320, %r1139;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1270, %r317, %r1140, %r1267;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1274, %r320, %r1146;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1277, %r317, %r1147, %r1274;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1281, %r320, %r1153;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1284, %r317, %r1154, %r1281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1288, %r320, %r1160;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1291, %r317, %r1161, %r1288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1295, %r320, %r1167;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1298, %r317, %r1168, %r1295;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1302, %r320, %r1174;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1305, %r317, %r1175, %r1302;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1394, %r1395}, {%r364, %r367}, {%r1186, %r1256}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1402, %r1403}, {%r364, %r367}, {%r1195, %r1263}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1410, %r1411}, {%r364, %r367}, {%r1204, %r1270}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1418, %r1419}, {%r364, %r367}, {%r1213, %r1277}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1426, %r1427}, {%r364, %r367}, {%r1222, %r1284}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1434, %r1435}, {%r364, %r367}, {%r1231, %r1291}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1442, %r1443}, {%r364, %r367}, {%r1240, %r1298}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1450, %r1451}, {%r364, %r367}, {%r1249, %r1305}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r230, %r1394, %r1395, %r806;
	// end inline asm
	// begin inline asm
	prmt.b32 %r231, %r1394, %r1395, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r232, %r1402, %r1403, %r806;
	// end inline asm
	// begin inline asm
	prmt.b32 %r233, %r1402, %r1403, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r234, %r1410, %r1411, %r806;
	// end inline asm
	// begin inline asm
	prmt.b32 %r235, %r1410, %r1411, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r236, %r1418, %r1419, %r806;
	// end inline asm
	// begin inline asm
	prmt.b32 %r237, %r1418, %r1419, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r238, %r1426, %r1427, %r806;
	// end inline asm
	// begin inline asm
	prmt.b32 %r239, %r1426, %r1427, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r240, %r1434, %r1435, %r806;
	// end inline asm
	// begin inline asm
	prmt.b32 %r241, %r1434, %r1435, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r242, %r1442, %r1443, %r806;
	// end inline asm
	// begin inline asm
	prmt.b32 %r243, %r1442, %r1443, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r244, %r1450, %r1451, %r806;
	// end inline asm
	// begin inline asm
	prmt.b32 %r245, %r1450, %r1451, %r810;
	// end inline asm
	st.shared.u32 	[%rd51], %r230;
	st.shared.u32 	[%rd53+16576], %r231;
	st.shared.u32 	[%rd53+64], %r232;
	st.shared.u32 	[%rd53+16640], %r233;
	st.shared.u32 	[%rd54], %r234;
	st.shared.u32 	[%rd55+16576], %r235;
	st.shared.u32 	[%rd55+64], %r236;
	st.shared.u32 	[%rd55+16640], %r237;
	st.shared.u32 	[%rd56], %r238;
	st.shared.u32 	[%rd57+16576], %r239;
	st.shared.u32 	[%rd57+64], %r240;
	st.shared.u32 	[%rd57+16640], %r241;
	st.shared.u32 	[%rd58], %r242;
	st.shared.u32 	[%rd59+16576], %r243;
	st.shared.u32 	[%rd59+64], %r244;
	st.shared.u32 	[%rd59+16640], %r245;
	@%p229 bra 	$L__BB0_152;
// %bb.208:                             // %pass7928
                                        //   in Loop: Header=BB0_205 Depth=2
	st.shared.u32 	[%rd51], %r230;
	st.shared.u32 	[%rd53+16576], %r231;
	st.shared.u32 	[%rd53+64], %r232;
	st.shared.u32 	[%rd53+16640], %r233;
	st.shared.u32 	[%rd54], %r234;
	st.shared.u32 	[%rd55+16576], %r235;
	st.shared.u32 	[%rd55+64], %r236;
	st.shared.u32 	[%rd55+16640], %r237;
	st.shared.u32 	[%rd56], %r238;
	st.shared.u32 	[%rd57+16576], %r239;
	st.shared.u32 	[%rd57+64], %r240;
	st.shared.u32 	[%rd57+16640], %r241;
	st.shared.u32 	[%rd58], %r242;
	st.shared.u32 	[%rd59+16576], %r243;
	st.shared.u32 	[%rd59+64], %r244;
	st.shared.u32 	[%rd59+16640], %r245;
	bra.uni 	$L__BB0_152;
$L__BB0_209:                            // %pass13202
                                        //   in Loop: Header=BB0_205 Depth=2
	shl.b32 	%r2122, %r3394, 20;
	or.b32  	%r2123, %r2122, %r178;
	or.b32  	%r2124, %r2123, %r179;
	or.b32  	%r2125, %r2124, %r3;
	cvt.u64.u32 	%rd243, %r2125;
	add.s64 	%rd244, %rd243, %rd15;
	shr.u64 	%rd245, %rd244, 34;
	add.s64 	%rd246, %rd244, %rd245;
	shr.s64 	%rd247, %rd246, 30;
	setp.lt.s64 	%p283, %rd244, 0;
	and.b64  	%rd248, %rd246, -1073741824;
	setp.ne.s64 	%p284, %rd248, %rd244;
	and.pred  	%p285, %p283, %p284;
	selp.u64 	%rd249, 1, 0, %p285;
	sub.s64 	%rd250, %rd249, %rd247;
	shl.b64 	%rd251, %rd250, 30;
	add.s64 	%rd252, %rd251, %rd244;
	shl.b64 	%rd253, %rd252, 2;
	add.s64 	%rd254, %rd4, %rd253;
	st.global.u32 	[%rd254], %r3395;
	add.s32 	%r3394, %r3394, 1;
	mov.u32 	%r3393, 0;
	mov.u32 	%r3395, %r3393;
	bra.uni 	$L__BB0_153;
$L__BB0_154:                            // %L29208.preheader
                                        //   in Loop: Header=BB0_187 Depth=1
	or.b32  	%r2127, %r181, 64;
	add.s32 	%r2128, %r177, %r2127;
	mul.wide.u32 	%rd255, %r2128, 4;
	add.s64 	%rd7, %rd93, %rd255;
	cvt.u64.u32 	%rd257, %r2127;
	add.s64 	%rd258, %rd52, %rd257;
	shl.b64 	%rd259, %rd258, 2;
	add.s64 	%rd8, %rd93, %rd259;
	or.b32  	%r2129, %r181, 128;
	add.s32 	%r2130, %r177, %r2129;
	mul.wide.u32 	%rd260, %r2130, 4;
	add.s64 	%rd9, %rd93, %rd260;
	cvt.u64.u32 	%rd261, %r2129;
	add.s64 	%rd262, %rd52, %rd261;
	shl.b64 	%rd263, %rd262, 2;
	add.s64 	%rd10, %rd93, %rd263;
	or.b32  	%r2131, %r181, 192;
	add.s32 	%r2132, %r177, %r2131;
	mul.wide.u32 	%rd264, %r2132, 4;
	add.s64 	%rd11, %rd93, %rd264;
	cvt.u64.u32 	%rd265, %r2131;
	add.s64 	%rd266, %rd52, %rd265;
	shl.b64 	%rd267, %rd266, 2;
	add.s64 	%rd12, %rd93, %rd267;
	mov.u32 	%r3392, 16;
	bra.uni 	$L__BB0_155;
$L__BB0_156:                            // %L38573
                                        //   in Loop: Header=BB0_155 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r2681, [%rd13];
	ld.shared.u32 	%r2688, [%rd14+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2698, %r2695}, {%r376, %r379}, {%r2681}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2707, %r2704}, {%r376, %r379}, {%r2688}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2691, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2693, %r2691, %r2695;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2696, %r410, %r2698, %r2693;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2700, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2702, %r2700, %r2704;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2705, %r410, %r2707, %r2702;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2709, %r413, %r2698;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2712, %r410, %r2695, %r2709;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2716, %r413, %r2707;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2719, %r410, %r2704, %r2716;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2742, %r2745}, {%r452, %r455}, {%r2696, %r2712}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2749, %r2753}, {%r452, %r455}, {%r2705, %r2719}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2741, %r2742, %r2742;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2744, %r2745, %r2745, %r2741;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2748, %r2749, %r2749, %r2744;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2752, %r2753, %r2753, %r2748;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2756, %r2118, %r2752, %r3395;
	// end inline asm
	ld.shared.u32 	%r2764, [%rd60];
	ld.shared.u32 	%r2771, [%rd61];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2781, %r2778}, {%r376, %r379}, {%r2764}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2790, %r2787}, {%r376, %r379}, {%r2771}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2774, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2776, %r2774, %r2778;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2779, %r410, %r2781, %r2776;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2783, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2785, %r2783, %r2787;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2788, %r410, %r2790, %r2785;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2792, %r413, %r2781;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2795, %r410, %r2778, %r2792;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2799, %r413, %r2790;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2802, %r410, %r2787, %r2799;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2825, %r2828}, {%r452, %r455}, {%r2779, %r2795}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2832, %r2836}, {%r452, %r455}, {%r2788, %r2802}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2824, %r2825, %r2825;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2827, %r2828, %r2828, %r2824;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2831, %r2832, %r2832, %r2827;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2835, %r2836, %r2836, %r2831;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2839, %r2118, %r2835, %r2756;
	// end inline asm
	ld.shared.u32 	%r2847, [%rd62];
	ld.shared.u32 	%r2854, [%rd63];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2864, %r2861}, {%r376, %r379}, {%r2847}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2873, %r2870}, {%r376, %r379}, {%r2854}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2857, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2859, %r2857, %r2861;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2862, %r410, %r2864, %r2859;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2866, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2868, %r2866, %r2870;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2871, %r410, %r2873, %r2868;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2875, %r413, %r2864;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2878, %r410, %r2861, %r2875;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2882, %r413, %r2873;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2885, %r410, %r2870, %r2882;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2908, %r2911}, {%r452, %r455}, {%r2862, %r2878}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2915, %r2919}, {%r452, %r455}, {%r2871, %r2885}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2907, %r2908, %r2908;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2910, %r2911, %r2911, %r2907;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2914, %r2915, %r2915, %r2910;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2918, %r2919, %r2919, %r2914;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2922, %r2118, %r2918, %r2839;
	// end inline asm
	ld.shared.u32 	%r2930, [%rd64];
	ld.shared.u32 	%r2937, [%rd65];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2947, %r2944}, {%r376, %r379}, {%r2930}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2956, %r2953}, {%r376, %r379}, {%r2937}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2940, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2942, %r2940, %r2944;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2945, %r410, %r2947, %r2942;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2949, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2951, %r2949, %r2953;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2954, %r410, %r2956, %r2951;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2958, %r413, %r2947;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2961, %r410, %r2944, %r2958;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2965, %r413, %r2956;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2968, %r410, %r2953, %r2965;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2991, %r2994}, {%r452, %r455}, {%r2945, %r2961}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2998, %r3002}, {%r452, %r455}, {%r2954, %r2968}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2990, %r2991, %r2991;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2993, %r2994, %r2994, %r2990;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2997, %r2998, %r2998, %r2993;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3001, %r3002, %r3002, %r2997;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3005, %r2118, %r3001, %r2922;
	// end inline asm
	ld.shared.u32 	%r3013, [%rd66];
	ld.shared.u32 	%r3020, [%rd67];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3030, %r3027}, {%r376, %r379}, {%r3013}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3039, %r3036}, {%r376, %r379}, {%r3020}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3023, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3025, %r3023, %r3027;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3028, %r410, %r3030, %r3025;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3032, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3034, %r3032, %r3036;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3037, %r410, %r3039, %r3034;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3041, %r413, %r3030;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3044, %r410, %r3027, %r3041;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3048, %r413, %r3039;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3051, %r410, %r3036, %r3048;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3074, %r3077}, {%r452, %r455}, {%r3028, %r3044}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3081, %r3085}, {%r452, %r455}, {%r3037, %r3051}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3073, %r3074, %r3074;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3076, %r3077, %r3077, %r3073;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3080, %r3081, %r3081, %r3076;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3084, %r3085, %r3085, %r3080;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3088, %r2118, %r3084, %r3005;
	// end inline asm
	ld.shared.u32 	%r3096, [%rd68];
	ld.shared.u32 	%r3103, [%rd69];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3113, %r3110}, {%r376, %r379}, {%r3096}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3122, %r3119}, {%r376, %r379}, {%r3103}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3106, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3108, %r3106, %r3110;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3111, %r410, %r3113, %r3108;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3115, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3117, %r3115, %r3119;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3120, %r410, %r3122, %r3117;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3124, %r413, %r3113;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3127, %r410, %r3110, %r3124;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3131, %r413, %r3122;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3134, %r410, %r3119, %r3131;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3157, %r3160}, {%r452, %r455}, {%r3111, %r3127}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3164, %r3168}, {%r452, %r455}, {%r3120, %r3134}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3156, %r3157, %r3157;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3159, %r3160, %r3160, %r3156;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3163, %r3164, %r3164, %r3159;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3167, %r3168, %r3168, %r3163;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3171, %r2118, %r3167, %r3088;
	// end inline asm
	ld.shared.u32 	%r3179, [%rd70];
	ld.shared.u32 	%r3186, [%rd71];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3196, %r3193}, {%r376, %r379}, {%r3179}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3205, %r3202}, {%r376, %r379}, {%r3186}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3189, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3191, %r3189, %r3193;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3194, %r410, %r3196, %r3191;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3198, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3200, %r3198, %r3202;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3203, %r410, %r3205, %r3200;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3207, %r413, %r3196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3210, %r410, %r3193, %r3207;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3214, %r413, %r3205;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3217, %r410, %r3202, %r3214;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3240, %r3243}, {%r452, %r455}, {%r3194, %r3210}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3247, %r3251}, {%r452, %r455}, {%r3203, %r3217}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3239, %r3240, %r3240;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3242, %r3243, %r3243, %r3239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3246, %r3247, %r3247, %r3242;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3250, %r3251, %r3251, %r3246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3254, %r2118, %r3250, %r3171;
	// end inline asm
	ld.shared.u32 	%r3262, [%rd72];
	ld.shared.u32 	%r3269, [%rd73];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3279, %r3276}, {%r376, %r379}, {%r3262}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3288, %r3285}, {%r376, %r379}, {%r3269}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3272, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3274, %r3272, %r3276;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3277, %r410, %r3279, %r3274;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3281, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3283, %r3281, %r3285;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3286, %r410, %r3288, %r3283;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3290, %r413, %r3279;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3293, %r410, %r3276, %r3290;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3297, %r413, %r3288;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3300, %r410, %r3285, %r3297;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3323, %r3326}, {%r452, %r455}, {%r3277, %r3293}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3330, %r3334}, {%r452, %r455}, {%r3286, %r3300}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3322, %r3323, %r3323;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3325, %r3326, %r3326, %r3322;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3329, %r3330, %r3330, %r3325;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3333, %r3334, %r3334, %r3329;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3395, %r2118, %r3333, %r3254;
	// end inline asm
	add.s32 	%r3393, %r3393, 8;
	setp.eq.s32 	%p292, %r3393, 48;
	@%p292 bra 	$L__BB0_211;
$L__BB0_157:                            // %L46133
                                        //   in Loop: Header=BB0_155 Depth=2
	bar.sync 	0;
	add.s32 	%r3392, %r3392, -8;
	setp.ne.s32 	%p296, %r3392, -16;
	@%p296 bra 	$L__BB0_155;
	bra.uni 	$L__BB0_158;
$L__BB0_155:                            // %L29208
                                        //   Parent Loop BB0_187 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.lt.u32 	%p287, %r1, 16;
	setp.eq.s32 	%p288, %r3392, 16;
	selp.b32 	%r2661, %r214, 0, %p288;
	setp.eq.s32 	%p289, %r3392, 8;
	selp.b32 	%r2662, %r218, %r2661, %p289;
	setp.eq.s32 	%p290, %r3392, 0;
	selp.b32 	%r2663, %r222, %r2662, %p290;
	setp.eq.s32 	%p291, %r3392, -8;
	selp.b32 	%r2664, %r226, %r2663, %p291;
	selp.b32 	%r2665, %r215, 0, %p288;
	selp.b32 	%r2666, %r219, %r2665, %p289;
	selp.b32 	%r2667, %r223, %r2666, %p290;
	selp.b32 	%r2668, %r227, %r2667, %p291;
	selp.b32 	%r2669, %r216, 0, %p288;
	selp.b32 	%r2670, %r220, %r2669, %p289;
	selp.b32 	%r2671, %r224, %r2670, %p290;
	selp.b32 	%r2672, %r228, %r2671, %p291;
	selp.b32 	%r2673, %r217, 0, %p288;
	selp.b32 	%r2674, %r221, %r2673, %p289;
	selp.b32 	%r2675, %r225, %r2674, %p290;
	selp.b32 	%r2676, %r229, %r2675, %p291;
	// begin inline asm
	mov.b32 %r2160, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2171, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2159, %r2664, 8;
	// begin inline asm
	lop3.b32 %r2157, %r1058, %r2159, %r2160, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2161, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2162, %r2160, %r2161;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2165, %r2157, %r2162;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2168, %r1069, %r2159, %r2171, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2172, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2173, %r2171, %r2172;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2176, %r2168, %r2173;
	// end inline asm
	// begin inline asm
	mov.b32 %r2206, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2217, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2205, %r2668, 8;
	// begin inline asm
	lop3.b32 %r2203, %r1058, %r2205, %r2206, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2207, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2208, %r2206, %r2207;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2211, %r2203, %r2208;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2214, %r1069, %r2205, %r2217, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2218, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2219, %r2217, %r2218;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2222, %r2214, %r2219;
	// end inline asm
	// begin inline asm
	mov.b32 %r2252, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2263, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2251, %r2672, 8;
	// begin inline asm
	lop3.b32 %r2249, %r1058, %r2251, %r2252, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2253, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2254, %r2252, %r2253;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2257, %r2249, %r2254;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2260, %r1069, %r2251, %r2263, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2264, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2265, %r2263, %r2264;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2268, %r2260, %r2265;
	// end inline asm
	// begin inline asm
	mov.b32 %r2298, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2309, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2297, %r2676, 8;
	// begin inline asm
	lop3.b32 %r2295, %r1058, %r2297, %r2298, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2299, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2300, %r2298, %r2299;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2303, %r2295, %r2300;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2306, %r1069, %r2297, %r2309, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2310, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2311, %r2309, %r2310;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2314, %r2306, %r2311;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2176;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2317, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r2165;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2320, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2222;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2323, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r2211;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2326, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2268;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2329, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r2257;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2332, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2314;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2335, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r2303;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2338, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2404, %r2401}, {%r279, %r282}, {%r2317}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2413, %r2410}, {%r279, %r282}, {%r2320}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2422, %r2419}, {%r279, %r282}, {%r2323}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2431, %r2428}, {%r279, %r282}, {%r2326}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2440, %r2437}, {%r279, %r282}, {%r2329}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2449, %r2446}, {%r279, %r282}, {%r2332}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2458, %r2455}, {%r279, %r282}, {%r2335}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2467, %r2464}, {%r279, %r282}, {%r2338}, {%r1180, %r1180};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2397, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2399, %r2397, %r2401;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2402, %r317, %r2404, %r2399;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2406, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2408, %r2406, %r2410;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2411, %r317, %r2413, %r2408;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2415, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2417, %r2415, %r2419;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2420, %r317, %r2422, %r2417;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2424, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2426, %r2424, %r2428;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2429, %r317, %r2431, %r2426;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2433, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2435, %r2433, %r2437;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2438, %r317, %r2440, %r2435;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2442, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2444, %r2442, %r2446;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2447, %r317, %r2449, %r2444;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2451, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2453, %r2451, %r2455;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2456, %r317, %r2458, %r2453;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2460, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2462, %r2460, %r2464;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2465, %r317, %r2467, %r2462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2469, %r320, %r2404;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2472, %r317, %r2401, %r2469;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2476, %r320, %r2413;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2479, %r317, %r2410, %r2476;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2483, %r320, %r2422;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2486, %r317, %r2419, %r2483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2490, %r320, %r2431;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2493, %r317, %r2428, %r2490;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2497, %r320, %r2440;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2500, %r317, %r2437, %r2497;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2504, %r320, %r2449;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2507, %r317, %r2446, %r2504;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2511, %r320, %r2458;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2514, %r317, %r2455, %r2511;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2518, %r320, %r2467;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2521, %r317, %r2464, %r2518;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2598, %r2599}, {%r364, %r367}, {%r2402, %r2472}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2606, %r2607}, {%r364, %r367}, {%r2411, %r2479}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2614, %r2615}, {%r364, %r367}, {%r2420, %r2486}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2622, %r2623}, {%r364, %r367}, {%r2429, %r2493}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2630, %r2631}, {%r364, %r367}, {%r2438, %r2500}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2638, %r2639}, {%r364, %r367}, {%r2447, %r2507}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2646, %r2647}, {%r364, %r367}, {%r2456, %r2514}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2654, %r2655}, {%r364, %r367}, {%r2465, %r2521}, {%r1180, %r1180}, %r180, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2597, %r2598, %r2599, %r806;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2601, %r2598, %r2599, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2605, %r2606, %r2607, %r806;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2609, %r2606, %r2607, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2613, %r2614, %r2615, %r806;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2617, %r2614, %r2615, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2621, %r2622, %r2623, %r806;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2625, %r2622, %r2623, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2629, %r2630, %r2631, %r806;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2633, %r2630, %r2631, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2637, %r2638, %r2639, %r806;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2641, %r2638, %r2639, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2645, %r2646, %r2647, %r806;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2649, %r2646, %r2647, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2653, %r2654, %r2655, %r806;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2657, %r2654, %r2655, %r810;
	// end inline asm
	st.shared.u32 	[%rd51], %r2597;
	st.shared.u32 	[%rd53+16576], %r2601;
	st.shared.u32 	[%rd53+64], %r2605;
	st.shared.u32 	[%rd53+16640], %r2609;
	st.shared.u32 	[%rd7], %r2613;
	st.shared.u32 	[%rd8+16576], %r2617;
	st.shared.u32 	[%rd8+64], %r2621;
	st.shared.u32 	[%rd8+16640], %r2625;
	st.shared.u32 	[%rd9], %r2629;
	st.shared.u32 	[%rd10+16576], %r2633;
	st.shared.u32 	[%rd10+64], %r2637;
	st.shared.u32 	[%rd10+16640], %r2641;
	st.shared.u32 	[%rd11], %r2645;
	st.shared.u32 	[%rd12+16576], %r2649;
	st.shared.u32 	[%rd12+64], %r2653;
	st.shared.u32 	[%rd12+16640], %r2657;
	@%p287 bra 	$L__BB0_210;
	bra.uni 	$L__BB0_156;
$L__BB0_210:                            // %pass15750
                                        //   in Loop: Header=BB0_155 Depth=2
	st.shared.u32 	[%rd51], %r2597;
	st.shared.u32 	[%rd53+16576], %r2601;
	st.shared.u32 	[%rd53+64], %r2605;
	st.shared.u32 	[%rd53+16640], %r2609;
	st.shared.u32 	[%rd7], %r2613;
	st.shared.u32 	[%rd8+16576], %r2617;
	st.shared.u32 	[%rd8+64], %r2621;
	st.shared.u32 	[%rd8+16640], %r2625;
	st.shared.u32 	[%rd9], %r2629;
	st.shared.u32 	[%rd10+16576], %r2633;
	st.shared.u32 	[%rd10+64], %r2637;
	st.shared.u32 	[%rd10+16640], %r2641;
	st.shared.u32 	[%rd11], %r2645;
	st.shared.u32 	[%rd12+16576], %r2649;
	st.shared.u32 	[%rd12+64], %r2653;
	st.shared.u32 	[%rd12+16640], %r2657;
	bra.uni 	$L__BB0_156;
$L__BB0_211:                            // %pass21024
                                        //   in Loop: Header=BB0_155 Depth=2
	shl.b32 	%r3342, %r3394, 20;
	or.b32  	%r3343, %r3342, %r178;
	or.b32  	%r3344, %r3343, %r179;
	or.b32  	%r3345, %r3344, %r3;
	cvt.u64.u32 	%rd268, %r3345;
	add.s64 	%rd269, %rd268, %rd15;
	shr.u64 	%rd270, %rd269, 34;
	add.s64 	%rd271, %rd269, %rd270;
	shr.s64 	%rd272, %rd271, 30;
	setp.lt.s64 	%p293, %rd269, 0;
	and.b64  	%rd273, %rd271, -1073741824;
	setp.ne.s64 	%p294, %rd273, %rd269;
	and.pred  	%p295, %p293, %p294;
	selp.u64 	%rd274, 1, 0, %p295;
	sub.s64 	%rd275, %rd274, %rd272;
	shl.b64 	%rd276, %rd275, 30;
	add.s64 	%rd277, %rd276, %rd269;
	shl.b64 	%rd278, %rd277, 2;
	add.s64 	%rd279, %rd4, %rd278;
	st.global.u32 	[%rd279], %r3395;
	add.s32 	%r3394, %r3394, 1;
	mov.u32 	%r3393, %r1180;
	mov.u32 	%r3395, %r1180;
	bra.uni 	$L__BB0_157;
$L__BB0_159:                            // %L46164
	mov.u32 	%r3346, 0;
	st.global.u32 	[%rd6], %r3346;
	ret;
$L__BB0_206:                            // %post_box_union
	mov.u64 	%rd241, exception4114;
	cvta.global.u64 	%rd242, %rd241;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd242;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_136:                            // %L6855
	mov.u32 	%r3362, 5;
	st.global.u32 	[%rd6], %r3362;
	mov.u64 	%rd310, exception4066;
	cvta.global.u64 	%rd311, %rd310;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd311;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_137:                            // %L7011
	mov.u32 	%r3361, 5;
	st.global.u32 	[%rd6], %r3361;
	mov.u64 	%rd308, exception4066;
	cvta.global.u64 	%rd309, %rd308;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd309;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_138:                            // %L7167
	mov.u32 	%r3360, 5;
	st.global.u32 	[%rd6], %r3360;
	mov.u64 	%rd306, exception4066;
	cvta.global.u64 	%rd307, %rd306;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd307;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_139:                            // %L7323
	mov.u32 	%r3359, 5;
	st.global.u32 	[%rd6], %r3359;
	mov.u64 	%rd304, exception4066;
	cvta.global.u64 	%rd305, %rd304;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd305;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_140:                            // %L7479
	mov.u32 	%r3358, 5;
	st.global.u32 	[%rd6], %r3358;
	mov.u64 	%rd302, exception4066;
	cvta.global.u64 	%rd303, %rd302;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd303;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_141:                            // %L7635
	mov.u32 	%r3357, 5;
	st.global.u32 	[%rd6], %r3357;
	mov.u64 	%rd300, exception4066;
	cvta.global.u64 	%rd301, %rd300;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd301;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_142:                            // %L7791
	mov.u32 	%r3356, 5;
	st.global.u32 	[%rd6], %r3356;
	mov.u64 	%rd298, exception4066;
	cvta.global.u64 	%rd299, %rd298;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd299;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_143:                            // %L7947
	mov.u32 	%r3355, 5;
	st.global.u32 	[%rd6], %r3355;
	mov.u64 	%rd296, exception4066;
	cvta.global.u64 	%rd297, %rd296;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd297;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_144:                            // %L8103
	mov.u32 	%r3354, 5;
	st.global.u32 	[%rd6], %r3354;
	mov.u64 	%rd294, exception4066;
	cvta.global.u64 	%rd295, %rd294;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd295;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L8259
	mov.u32 	%r3353, 5;
	st.global.u32 	[%rd6], %r3353;
	mov.u64 	%rd292, exception4066;
	cvta.global.u64 	%rd293, %rd292;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd293;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L8415
	mov.u32 	%r3352, 5;
	st.global.u32 	[%rd6], %r3352;
	mov.u64 	%rd290, exception4066;
	cvta.global.u64 	%rd291, %rd290;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd291;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L8571
	mov.u32 	%r3351, 5;
	st.global.u32 	[%rd6], %r3351;
	mov.u64 	%rd288, exception4066;
	cvta.global.u64 	%rd289, %rd288;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd289;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L8727
	mov.u32 	%r3350, 5;
	st.global.u32 	[%rd6], %r3350;
	mov.u64 	%rd286, exception4066;
	cvta.global.u64 	%rd287, %rd286;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd287;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L8883
	mov.u32 	%r3349, 5;
	st.global.u32 	[%rd6], %r3349;
	mov.u64 	%rd284, exception4066;
	cvta.global.u64 	%rd285, %rd284;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd285;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L9039
	mov.u32 	%r3348, 5;
	st.global.u32 	[%rd6], %r3348;
	mov.u64 	%rd282, exception4066;
	cvta.global.u64 	%rd283, %rd282;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd283;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_151:                            // %L9195
	mov.u32 	%r3347, 5;
	st.global.u32 	[%rd6], %r3347;
	mov.u64 	%rd280, exception4066;
	cvta.global.u64 	%rd281, %rd280;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd281;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L166
	mov.u32 	%r3364, 2;
	st.global.u32 	[%rd6], %r3364;
	mov.u64 	%rd314, exception4066;
	cvta.global.u64 	%rd315, %rd314;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd315;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_13:                             // %L307
	mov.u32 	%r3363, 3;
	st.global.u32 	[%rd6], %r3363;
	mov.u64 	%rd312, exception4066;
	cvta.global.u64 	%rd313, %rd312;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd313;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd80, exception1;
	cvta.global.u64 	%rd81, %rd80;
	{ // callseq 45, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd81;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 45
	{ // callseq 46, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 46
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_135:                            // %L1153
	add.u64 	%rd79, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r1, %r4};
	st.local.v2.u32 	[%rd5+8], {%r2, %r86};
	st.local.u32 	[%rd5+16], %r87;
	mov.u64 	%rd85, __unnamed_1;
	cvta.global.u64 	%rd86, %rd85;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd86;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd79;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r465, [retval0+0];
	} // callseq 47
	mov.u32 	%r467, 4;
	st.global.u32 	[%rd6], %r467;
	mov.u64 	%rd88, exception4066;
	cvta.global.u64 	%rd89, %rd88;
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd89;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 48
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd74;
	st.param.b32 	[param0+8], %r248;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 49
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
