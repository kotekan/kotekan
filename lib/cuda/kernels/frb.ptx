// PTX CompilerJob of kernel #frb(CuDeviceVector{Int16x2, 1}, CuDeviceVector{Float16x2, 1}, CuDeviceVector{Int4x8, 1}, CuDeviceVector{Float16x2, 1}, CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 7.1
.target sm_86
.address_size 64

	// .globl	_Z15julia_frb_1037413CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE // -- Begin function _Z15julia_frb_1037413CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[8]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z15julia_frb_1037413CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.visible .entry _Z15julia_frb_1037413CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE(
	.param .align 8 .b8 _Z15julia_frb_1037413CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0[8],
	.param .align 8 .b8 _Z15julia_frb_1037413CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z15julia_frb_1037413CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z15julia_frb_1037413CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z15julia_frb_1037413CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z15julia_frb_1037413CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<78>;
	.reg .b16 	%rs<285>;
	.reg .b32 	%r<3431>;
	.reg .f32 	%f<202>;
	.reg .b64 	%rd<296>;

// %bb.0:                               // %conversion
	// begin inline asm
	mov.u32 %r252, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r252, 76895;
	@%p1 bra 	LBB0_2;
	bra.uni 	LBB0_1;
LBB0_2:                                 // %L10
	ld.param.u64 	%rd12, [_Z15julia_frb_1037413CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	mul.lo.s32 	%r259, %r2, 768;
	or.b32  	%r260, %r259, %r1;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	add.s32 	%r261, %r260, %r4;
	mul.wide.u32 	%rd18, %r261, 4;
	add.s64 	%rd5, %rd12, %rd18;
	mov.u32 	%r262, 1;
	st.global.u32 	[%rd5], %r262;
	and.b32  	%r5, %r1, 3;
	shr.u32 	%r6, %r1, 2;
	mul.lo.s32 	%r263, %r5, %r6;
	and.b32  	%r264, %r263, 7;
	cvt.rn.f32.u32 	%f18, %r264;
	mov.f32 	%f19, 0f40800000;
	div.approx.f32 	%f20, %f18, %f19;
	add.f32 	%f21, %f20, %f20;
	mov.b32 	%r265, %f21;
	and.b32  	%r266, %r265, -2147483648;
	or.b32  	%r267, %r266, 1056964608;
	mov.b32 	%f22, %r267;
	add.f32 	%f23, %f21, %f22;
	cvt.rzi.f32.f32 	%f24, %f23;
	abs.f32 	%f25, %f21;
	setp.gt.f32 	%p2, %f25, 0f4B000000;
	selp.f32 	%f26, %f21, %f24, %p2;
	cvt.rzi.f32.f32 	%f27, %f21;
	setp.lt.f32 	%p3, %f25, 0f3F000000;
	selp.f32 	%f28, %f27, %f26, %p3;
	cvt.rzi.s32.f32 	%r268, %f28;
	fma.rn.f32 	%f29, %f28, 0fBF000000, %f20;
	mul.f32 	%f30, %f29, 0f34222169;
	fma.rn.f32 	%f31, %f29, 0f40490FDA, %f30;
	mul.f32 	%f32, %f31, %f31;
	fma.rn.f32 	%f33, %f32, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f34, %f33, %f32, 0f3D2AAABB;
	fma.rn.f32 	%f35, %f34, %f32, 0fBEFFFFFF;
	fma.rn.f32 	%f36, %f35, %f32, 0f3F800000;
	fma.rn.f32 	%f37, %f32, %f31, 0f00000000;
	fma.rn.f32 	%f38, %f32, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f39, %f38, %f32, 0fBE2AAAA8;
	fma.rn.f32 	%f40, %f39, %f37, %f31;
	and.b32  	%r269, %r268, 1;
	setp.eq.b32 	%p4, %r269, 1;
	selp.f32 	%f41, %f36, %f40, %p4;
	selp.f32 	%f42, %f40, %f36, %p4;
	and.b32  	%r270, %r268, 2;
	setp.eq.s32 	%p5, %r270, 0;
	neg.f32 	%f43, %f41;
	selp.f32 	%f44, %f41, %f43, %p5;
	add.s32 	%r271, %r268, 1;
	and.b32  	%r272, %r271, 2;
	mov.f32 	%f200, 0f00000000;
	cvt.rzi.f32.f32 	%f47, %f20;
	setp.eq.f32 	%p7, %f47, %f20;
	mul.f32 	%f48, %f20, 0f00000000;
	shl.b32 	%r9, %r1, 1;
	and.b32  	%r10, %r9, 6;
	or.b32  	%r11, %r10, 1;
	setp.eq.s32 	%p9, %r10, 6;
	mov.f32 	%f192, 0f41C00000;
	mul.lo.s32 	%r3340, %r10, %r6;
	mov.f32 	%f194, %f200;
	mov.f32 	%f195, %f200;
	@%p9 bra 	LBB0_4;
// %bb.3:                               // %L205
	cvt.u16.u32 	%rs2, %r3340;
	and.b16  	%rs3, %rs2, 255;
	mul.lo.s16 	%rs4, %rs3, 171;
	shr.u16 	%rs5, %rs4, 13;
	mul.lo.s16 	%rs6, %rs5, 48;
	sub.s16 	%rs7, %rs2, %rs6;
	and.b16  	%rs8, %rs7, 255;
	cvt.rn.f32.u16 	%f53, %rs8;
	div.approx.f32 	%f55, %f53, %f192;
	add.f32 	%f56, %f55, %f55;
	mov.b32 	%r274, %f56;
	and.b32  	%r275, %r274, -2147483648;
	or.b32  	%r276, %r275, 1056964608;
	mov.b32 	%f57, %r276;
	add.f32 	%f58, %f56, %f57;
	cvt.rzi.f32.f32 	%f59, %f58;
	abs.f32 	%f60, %f56;
	setp.gt.f32 	%p10, %f60, 0f4B000000;
	selp.f32 	%f61, %f56, %f59, %p10;
	cvt.rzi.f32.f32 	%f62, %f56;
	setp.lt.f32 	%p11, %f60, 0f3F000000;
	selp.f32 	%f63, %f62, %f61, %p11;
	cvt.rzi.s32.f32 	%r277, %f63;
	fma.rn.f32 	%f64, %f63, 0fBF000000, %f55;
	mul.f32 	%f65, %f64, 0f34222169;
	fma.rn.f32 	%f66, %f64, 0f40490FDA, %f65;
	mul.f32 	%f67, %f66, %f66;
	fma.rn.f32 	%f68, %f67, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f69, %f68, %f67, 0f3D2AAABB;
	fma.rn.f32 	%f70, %f69, %f67, 0fBEFFFFFF;
	fma.rn.f32 	%f71, %f70, %f67, 0f3F800000;
	fma.rn.f32 	%f72, %f67, %f66, 0f00000000;
	fma.rn.f32 	%f73, %f67, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f74, %f73, %f67, 0fBE2AAAA8;
	fma.rn.f32 	%f75, %f74, %f72, %f66;
	and.b32  	%r278, %r277, 1;
	setp.eq.b32 	%p12, %r278, 1;
	selp.f32 	%f76, %f71, %f75, %p12;
	selp.f32 	%f77, %f75, %f71, %p12;
	and.b32  	%r279, %r277, 2;
	setp.eq.s32 	%p13, %r279, 0;
	neg.f32 	%f78, %f76;
	selp.f32 	%f79, %f76, %f78, %p13;
	add.s32 	%r280, %r277, 1;
	and.b32  	%r281, %r280, 2;
	setp.eq.s32 	%p14, %r281, 0;
	mov.f32 	%f80, 0f00000000;
	sub.f32 	%f81, %f80, %f77;
	selp.f32 	%f82, %f77, %f81, %p14;
	cvt.rzi.f32.f32 	%f83, %f55;
	setp.eq.f32 	%p15, %f83, %f55;
	mul.f32 	%f84, %f55, 0f00000000;
	selp.f32 	%f195, %f84, %f79, %p15;
	abs.f32 	%f85, %f55;
	setp.gt.f32 	%p16, %f85, 0f4B800000;
	add.f32 	%f86, %f195, 0f3F800000;
	selp.f32 	%f194, %f86, %f82, %p16;
LBB0_4:                                 // %L220
	setp.eq.s32 	%p6, %r272, 0;
	sub.f32 	%f45, %f200, %f42;
	selp.f32 	%f49, %f48, %f44, %p7;
	abs.f32 	%f50, %f20;
	setp.gt.u32 	%p17, %r11, 5;
	mul.lo.s32 	%r3341, %r11, %r6;
	mov.f32 	%f196, %f200;
	mov.f32 	%f197, %f200;
	@%p17 bra 	LBB0_6;
// %bb.5:                               // %L224
	cvt.u16.u32 	%rs9, %r3341;
	and.b16  	%rs10, %rs9, 255;
	mul.lo.s16 	%rs11, %rs10, 171;
	shr.u16 	%rs12, %rs11, 13;
	mul.lo.s16 	%rs13, %rs12, 48;
	sub.s16 	%rs14, %rs9, %rs13;
	and.b16  	%rs15, %rs14, 255;
	cvt.rn.f32.u16 	%f88, %rs15;
	div.approx.f32 	%f90, %f88, %f192;
	add.f32 	%f91, %f90, %f90;
	mov.b32 	%r283, %f91;
	and.b32  	%r284, %r283, -2147483648;
	or.b32  	%r285, %r284, 1056964608;
	mov.b32 	%f92, %r285;
	add.f32 	%f93, %f91, %f92;
	cvt.rzi.f32.f32 	%f94, %f93;
	abs.f32 	%f95, %f91;
	setp.gt.f32 	%p18, %f95, 0f4B000000;
	selp.f32 	%f96, %f91, %f94, %p18;
	cvt.rzi.f32.f32 	%f97, %f91;
	setp.lt.f32 	%p19, %f95, 0f3F000000;
	selp.f32 	%f98, %f97, %f96, %p19;
	cvt.rzi.s32.f32 	%r286, %f98;
	fma.rn.f32 	%f99, %f98, 0fBF000000, %f90;
	mul.f32 	%f100, %f99, 0f34222169;
	fma.rn.f32 	%f101, %f99, 0f40490FDA, %f100;
	mul.f32 	%f102, %f101, %f101;
	fma.rn.f32 	%f103, %f102, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f104, %f103, %f102, 0f3D2AAABB;
	fma.rn.f32 	%f105, %f104, %f102, 0fBEFFFFFF;
	fma.rn.f32 	%f106, %f105, %f102, 0f3F800000;
	fma.rn.f32 	%f107, %f102, %f101, 0f00000000;
	fma.rn.f32 	%f108, %f102, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f109, %f108, %f102, 0fBE2AAAA8;
	fma.rn.f32 	%f110, %f109, %f107, %f101;
	and.b32  	%r287, %r286, 1;
	setp.eq.b32 	%p20, %r287, 1;
	selp.f32 	%f111, %f106, %f110, %p20;
	selp.f32 	%f112, %f110, %f106, %p20;
	and.b32  	%r288, %r286, 2;
	setp.eq.s32 	%p21, %r288, 0;
	neg.f32 	%f113, %f111;
	selp.f32 	%f114, %f111, %f113, %p21;
	add.s32 	%r289, %r286, 1;
	and.b32  	%r290, %r289, 2;
	setp.eq.s32 	%p22, %r290, 0;
	mov.f32 	%f115, 0f00000000;
	sub.f32 	%f116, %f115, %f112;
	selp.f32 	%f117, %f112, %f116, %p22;
	cvt.rzi.f32.f32 	%f118, %f90;
	setp.eq.f32 	%p23, %f118, %f90;
	mul.f32 	%f119, %f90, 0f00000000;
	selp.f32 	%f197, %f119, %f114, %p23;
	abs.f32 	%f120, %f90;
	setp.gt.f32 	%p24, %f120, 0f4B800000;
	add.f32 	%f121, %f197, 0f3F800000;
	selp.f32 	%f196, %f121, %f117, %p24;
LBB0_6:                                 // %L239
	selp.f32 	%f46, %f42, %f45, %p6;
	setp.gt.f32 	%p8, %f50, 0f4B800000;
	add.f32 	%f51, %f49, 0f3F800000;
	setp.gt.u32 	%p26, %r1, 23;
	or.pred  	%p27, %p9, %p26;
	mov.f32 	%f193, 0f40400000;
	mov.f32 	%f198, %f200;
	mov.f32 	%f199, %f200;
	@%p27 bra 	LBB0_8;
// %bb.7:                               // %L276
	cvt.u16.u32 	%rs16, %r3340;
	and.b16  	%rs17, %rs16, 255;
	mul.lo.s16 	%rs18, %rs17, 171;
	shr.u16 	%rs19, %rs18, 10;
	mul.lo.s16 	%rs20, %rs19, 6;
	sub.s16 	%rs21, %rs16, %rs20;
	and.b16  	%rs22, %rs21, 255;
	cvt.rn.f32.u16 	%f123, %rs22;
	div.approx.f32 	%f125, %f123, %f193;
	add.f32 	%f126, %f125, %f125;
	mov.b32 	%r298, %f126;
	and.b32  	%r299, %r298, -2147483648;
	or.b32  	%r300, %r299, 1056964608;
	mov.b32 	%f127, %r300;
	add.f32 	%f128, %f126, %f127;
	cvt.rzi.f32.f32 	%f129, %f128;
	abs.f32 	%f130, %f126;
	setp.gt.f32 	%p28, %f130, 0f4B000000;
	selp.f32 	%f131, %f126, %f129, %p28;
	cvt.rzi.f32.f32 	%f132, %f126;
	setp.lt.f32 	%p29, %f130, 0f3F000000;
	selp.f32 	%f133, %f132, %f131, %p29;
	cvt.rzi.s32.f32 	%r301, %f133;
	fma.rn.f32 	%f134, %f133, 0fBF000000, %f125;
	mul.f32 	%f135, %f134, 0f34222169;
	fma.rn.f32 	%f136, %f134, 0f40490FDA, %f135;
	mul.f32 	%f137, %f136, %f136;
	fma.rn.f32 	%f138, %f137, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f139, %f138, %f137, 0f3D2AAABB;
	fma.rn.f32 	%f140, %f139, %f137, 0fBEFFFFFF;
	fma.rn.f32 	%f141, %f140, %f137, 0f3F800000;
	fma.rn.f32 	%f142, %f137, %f136, 0f00000000;
	fma.rn.f32 	%f143, %f137, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f144, %f143, %f137, 0fBE2AAAA8;
	fma.rn.f32 	%f145, %f144, %f142, %f136;
	and.b32  	%r302, %r301, 1;
	setp.eq.b32 	%p30, %r302, 1;
	selp.f32 	%f146, %f141, %f145, %p30;
	selp.f32 	%f147, %f145, %f141, %p30;
	and.b32  	%r303, %r301, 2;
	setp.eq.s32 	%p31, %r303, 0;
	neg.f32 	%f148, %f146;
	selp.f32 	%f149, %f146, %f148, %p31;
	add.s32 	%r304, %r301, 1;
	and.b32  	%r305, %r304, 2;
	setp.eq.s32 	%p32, %r305, 0;
	mov.f32 	%f150, 0f00000000;
	sub.f32 	%f151, %f150, %f147;
	selp.f32 	%f152, %f147, %f151, %p32;
	cvt.rzi.f32.f32 	%f153, %f125;
	setp.eq.f32 	%p33, %f153, %f125;
	mul.f32 	%f154, %f125, 0f00000000;
	selp.f32 	%f199, %f154, %f149, %p33;
	abs.f32 	%f155, %f125;
	setp.gt.f32 	%p34, %f155, 0f4B800000;
	add.f32 	%f156, %f199, 0f3F800000;
	selp.f32 	%f198, %f156, %f152, %p34;
LBB0_8:                                 // %L291
	selp.f32 	%f52, %f51, %f46, %p8;
	or.pred  	%p37, %p17, %p26;
	mov.f32 	%f201, %f200;
	@%p37 bra 	LBB0_10;
// %bb.9:                               // %L299
	cvt.u16.u32 	%rs23, %r3341;
	and.b16  	%rs24, %rs23, 255;
	mul.lo.s16 	%rs25, %rs24, 171;
	shr.u16 	%rs26, %rs25, 10;
	mul.lo.s16 	%rs27, %rs26, 6;
	sub.s16 	%rs28, %rs23, %rs27;
	and.b16  	%rs29, %rs28, 255;
	cvt.rn.f32.u16 	%f158, %rs29;
	div.approx.f32 	%f160, %f158, %f193;
	add.f32 	%f161, %f160, %f160;
	mov.b32 	%r307, %f161;
	and.b32  	%r308, %r307, -2147483648;
	or.b32  	%r309, %r308, 1056964608;
	mov.b32 	%f162, %r309;
	add.f32 	%f163, %f161, %f162;
	cvt.rzi.f32.f32 	%f164, %f163;
	abs.f32 	%f165, %f161;
	setp.gt.f32 	%p38, %f165, 0f4B000000;
	selp.f32 	%f166, %f161, %f164, %p38;
	cvt.rzi.f32.f32 	%f167, %f161;
	setp.lt.f32 	%p39, %f165, 0f3F000000;
	selp.f32 	%f168, %f167, %f166, %p39;
	cvt.rzi.s32.f32 	%r310, %f168;
	fma.rn.f32 	%f169, %f168, 0fBF000000, %f160;
	mul.f32 	%f170, %f169, 0f34222169;
	fma.rn.f32 	%f171, %f169, 0f40490FDA, %f170;
	mul.f32 	%f172, %f171, %f171;
	fma.rn.f32 	%f173, %f172, 0f37CBAC00, 0fBAB607ED;
	fma.rn.f32 	%f174, %f173, %f172, 0f3D2AAABB;
	fma.rn.f32 	%f175, %f174, %f172, 0fBEFFFFFF;
	fma.rn.f32 	%f176, %f175, %f172, 0f3F800000;
	fma.rn.f32 	%f177, %f172, %f171, 0f00000000;
	fma.rn.f32 	%f178, %f172, 0fB94D4153, 0f3C0885E4;
	fma.rn.f32 	%f179, %f178, %f172, 0fBE2AAAA8;
	fma.rn.f32 	%f180, %f179, %f177, %f171;
	and.b32  	%r311, %r310, 1;
	setp.eq.b32 	%p40, %r311, 1;
	selp.f32 	%f181, %f176, %f180, %p40;
	selp.f32 	%f182, %f180, %f176, %p40;
	and.b32  	%r312, %r310, 2;
	setp.eq.s32 	%p41, %r312, 0;
	neg.f32 	%f183, %f181;
	selp.f32 	%f184, %f181, %f183, %p41;
	add.s32 	%r313, %r310, 1;
	and.b32  	%r314, %r313, 2;
	setp.eq.s32 	%p42, %r314, 0;
	mov.f32 	%f185, 0f00000000;
	sub.f32 	%f186, %f185, %f182;
	selp.f32 	%f187, %f182, %f186, %p42;
	cvt.rzi.f32.f32 	%f188, %f160;
	setp.eq.f32 	%p43, %f188, %f160;
	mul.f32 	%f189, %f160, 0f00000000;
	selp.f32 	%f201, %f189, %f184, %p43;
	abs.f32 	%f190, %f160;
	setp.gt.f32 	%p44, %f190, 0f4B800000;
	add.f32 	%f191, %f201, 0f3F800000;
	selp.f32 	%f200, %f191, %f187, %p44;
LBB0_10:                                // %L314
	mov.b32 	%r255, %f52;
	mov.b32 	%r258, %f49;
	mov.b32 	%r316, %f198;
	mov.b32 	%r317, %f200;
	mov.b32 	%r322, %f199;
	mov.b32 	%r323, %f201;
	mov.u32 	%r3343, 999999999;
	cvt.u16.u32 	%rs283, %r1;
	@%p26 bra 	LBB0_12;
// %bb.11:                              // %L350
	ld.param.u64 	%rd1, [_Z15julia_frb_1037413CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1];
	and.b16  	%rs31, %rs283, 255;
	mul.lo.s16 	%rs32, %rs31, 171;
	shr.u16 	%rs33, %rs32, 12;
	mul.lo.s16 	%rs34, %rs33, 24;
	sub.s16 	%rs35, %rs283, %rs34;
	cvt.u32.u16 	%r328, %rs35;
	and.b32  	%r329, %r328, 255;
	mad.lo.s32 	%r330, %r329, 24, %r3;
	cvt.u16.u32 	%rs36, %r330;
	mul.hi.u16 	%rs37, %rs36, -7281;
	shr.u16 	%rs38, %rs37, 9;
	mul.lo.s16 	%rs39, %rs38, 576;
	sub.s16 	%rs40, %rs36, %rs39;
	cvt.u32.u16 	%r331, %rs40;
	mul.wide.u32 	%rd19, %r331, 4;
	add.s64 	%rd20, %rd1, %rd19;
	ld.global.u32 	%r332, [%rd20];
	cvt.s32.s16 	%r333, %r332;
	shr.s32 	%r334, %r332, 16;
	mul.lo.s32 	%r335, %r334, 801;
	mad.lo.s32 	%r3343, %r333, 33, %r335;
LBB0_12:                                // %L428
	xor.b32  	%r254, %r258, -2147483648;
	mov.b32 	%r292, %f194;
	mov.b32 	%r293, %f196;
	mov.b32 	%r295, %f195;
	mov.b32 	%r296, %f197;
	xor.b32  	%r319, %r322, -2147483648;
	xor.b32  	%r320, %r323, -2147483648;
	and.b32  	%r20, %r1, 24;
	setp.ne.s32 	%p46, %r20, 24;
	cvt.u16.u32 	%rs284, %r6;
	@%p46 bra 	LBB0_14;
// %bb.13:                              // %L428.L734_crit_edge
	mul.lo.s16 	%rs54, %rs284, 171;
	shr.u16 	%rs55, %rs54, 10;
	mul.lo.s16 	%rs56, %rs55, 6;
	sub.s16 	%rs57, %rs284, %rs56;
	cvt.u32.u16 	%r350, %rs57;
	and.b32  	%r3347, %r350, 255;
	cvt.u16.u32 	%rs58, %r3;
	and.b16  	%rs59, %rs58, 255;
	mul.lo.s16 	%rs60, %rs59, 171;
	shr.u16 	%rs61, %rs60, 10;
	mul.lo.s16 	%rs62, %rs61, -6;
	add.s16 	%rs63, %rs62, %rs58;
	cvt.u32.u16 	%r352, %rs63;
	and.b32  	%r3346, %r352, 255;
	cvt.u32.u16 	%r3345, %rs61;
	mul.wide.u16 	%r3344, %rs61, 6;
	mov.u32 	%r3348, 0;
	mov.u32 	%r3349, %r3348;
	bra.uni 	LBB0_15;
LBB0_14:                                // %L454
	ld.param.u64 	%rd2, [_Z15julia_frb_1037413CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2];
	cvt.u16.u32 	%rs41, %r3;
	and.b16  	%rs42, %rs41, 255;
	mul.lo.s16 	%rs43, %rs42, 171;
	shr.u16 	%rs44, %rs43, 10;
	cvt.u32.u16 	%r3345, %rs44;
	mul.wide.u16 	%r3344, %rs44, 6;
	mul.lo.s32 	%r337, %r2, 576;
	mul.lo.s16 	%rs46, %rs284, 171;
	shr.u16 	%rs47, %rs46, 10;
	mul.lo.s16 	%rs48, %rs47, 6;
	sub.s16 	%rs49, %rs284, %rs48;
	cvt.u32.u16 	%r338, %rs49;
	and.b32  	%r3347, %r338, 255;
	and.b16  	%rs50, %rs49, 255;
	mul.wide.u16 	%r339, %rs50, 24;
	mul.lo.s16 	%rs51, %rs44, -6;
	add.s16 	%rs52, %rs51, %rs41;
	cvt.u32.u16 	%r340, %rs52;
	and.b32  	%r3346, %r340, 255;
	mad.lo.s32 	%r341, %r5, 144, %r337;
	or.b32  	%r342, %r341, %r3346;
	add.s32 	%r343, %r342, %r3344;
	add.s32 	%r344, %r343, %r339;
	mul.wide.u32 	%rd21, %r344, 4;
	add.s64 	%rd22, %rd2, %rd21;
	ld.global.u32 	%r3348, [%rd22];
	add.s32 	%r345, %r341, 147456;
	or.b32  	%r346, %r345, %r3346;
	add.s32 	%r347, %r346, %r3344;
	add.s32 	%r348, %r347, %r339;
	mul.wide.u32 	%rd23, %r348, 4;
	add.s64 	%rd24, %rd2, %rd23;
	ld.global.u32 	%r3349, [%rd24];
LBB0_15:                                // %L734
	ld.param.u64 	%rd3, [_Z15julia_frb_1037413CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3];
	ld.param.u64 	%rd4, [_Z15julia_frb_1037413CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4];
	// begin inline asm
	cvt.rn.f16x2.f32 %r253, %r255, %r254;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r256, %r258, %r255;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r291, %r293, %r292;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r294, %r296, %r295;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r315, %r317, %r316;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r318, %r320, %r319;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r321, %r323, %r322;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r324, %r317, %r316;
	// end inline asm
	mov.u32 	%r3342, 0;
	shl.b32 	%r354, %r1, 2;
	and.b32  	%r37, %r354, 60;
	shl.b32 	%r355, %r1, 11;
	and.b32  	%r38, %r355, 32768;
	shl.b32 	%r39, %r2, 7;
	or.b32  	%r40, %r354, 64;
	add.s32 	%r41, %r3, 24;
	and.b16  	%rs1, %rs283, 16;
	and.b32  	%r356, %r9, 30;
	shr.u32 	%r357, %r1, 4;
	or.b32  	%r358, %r356, %r357;
	mul.lo.s32 	%r42, %r358, 257;
	or.b32  	%r359, %r357, %r9;
	or.b32  	%r360, %r359, 32;
	mul.lo.s32 	%r43, %r360, 257;
	shr.u32 	%r361, %r3, 3;
	and.b32  	%r362, %r4, 224;
	mad.lo.s32 	%r44, %r361, 257, %r362;
	and.b16  	%rs65, %rs283, 255;
	mul.lo.s16 	%rs66, %rs65, 171;
	shr.u16 	%rs67, %rs66, 12;
	mul.lo.s16 	%rs68, %rs67, 24;
	sub.s16 	%rs69, %rs283, %rs68;
	cvt.u32.u16 	%r363, %rs69;
	and.b32  	%r45, %r363, 255;
	shr.u32 	%r364, %r41, 3;
	mad.lo.s32 	%r46, %r364, 257, %r362;
	add.s32 	%r365, %r3, 48;
	shr.u32 	%r366, %r365, 3;
	mad.lo.s32 	%r47, %r366, 257, %r362;
	add.s32 	%r367, %r3, 72;
	shr.u32 	%r368, %r367, 3;
	mad.lo.s32 	%r48, %r368, 257, %r362;
	or.b32  	%r369, %r361, 12;
	mad.lo.s32 	%r49, %r369, 257, %r362;
	add.s32 	%r370, %r3, 120;
	shr.u32 	%r371, %r370, 3;
	mad.lo.s32 	%r50, %r371, 257, %r362;
	add.s32 	%r372, %r3, 144;
	shr.u32 	%r373, %r372, 3;
	mad.lo.s32 	%r51, %r373, 257, %r362;
	add.s32 	%r374, %r3, 168;
	shr.u32 	%r375, %r374, 3;
	mad.lo.s32 	%r52, %r375, 257, %r362;
	or.b32  	%r376, %r361, 24;
	mad.lo.s32 	%r53, %r376, 257, %r362;
	add.s32 	%r377, %r3, 216;
	shr.u32 	%r378, %r377, 3;
	mad.lo.s32 	%r54, %r378, 257, %r362;
	add.s32 	%r379, %r3, 240;
	shr.u32 	%r380, %r379, 3;
	mad.lo.s32 	%r55, %r380, 257, %r362;
	add.s32 	%r381, %r3, 264;
	shr.u32 	%r382, %r381, 3;
	mad.lo.s32 	%r56, %r382, 257, %r362;
	or.b32  	%r383, %r361, 36;
	mad.lo.s32 	%r57, %r383, 257, %r362;
	add.s32 	%r384, %r3, 312;
	shr.u32 	%r385, %r384, 3;
	mad.lo.s32 	%r58, %r385, 257, %r362;
	add.s32 	%r386, %r3, 336;
	shr.u32 	%r387, %r386, 3;
	mad.lo.s32 	%r59, %r387, 257, %r362;
	add.s32 	%r388, %r3, 360;
	shr.u32 	%r389, %r388, 3;
	mad.lo.s32 	%r60, %r389, 257, %r362;
	or.b32  	%r390, %r361, 48;
	mad.lo.s32 	%r61, %r390, 257, %r362;
	add.s32 	%r391, %r3, 408;
	shr.u32 	%r392, %r391, 3;
	mad.lo.s32 	%r62, %r392, 257, %r362;
	add.s32 	%r393, %r3, 432;
	shr.u32 	%r394, %r393, 3;
	mad.lo.s32 	%r63, %r394, 257, %r362;
	add.s32 	%r395, %r3, 456;
	shr.u32 	%r396, %r395, 3;
	mad.lo.s32 	%r64, %r396, 257, %r362;
	or.b32  	%r397, %r361, 60;
	mad.lo.s32 	%r65, %r397, 257, %r362;
	add.s32 	%r398, %r3, 504;
	bfe.u32 	%r399, %r398, 3, 6;
	mad.lo.s32 	%r66, %r399, 257, %r362;
	mul.lo.s32 	%r400, %r5, 4806;
	mad.lo.s32 	%r401, %r3346, 33, %r400;
	mad.lo.s32 	%r402, %r3345, 198, %r401;
	mad.lo.s32 	%r403, %r3347, 801, %r402;
	and.b32  	%r404, %r1, 1;
	mul.lo.s32 	%r405, %r404, 4112;
	and.b32  	%r406, %r6, 1;
	mul.lo.s32 	%r407, %r406, 1028;
	bfe.u32 	%r408, %r1, 3, 1;
	mul.lo.s32 	%r409, %r408, 514;
	mul.lo.s32 	%r410, %r357, 257;
	bfe.u32 	%r411, %r1, 1, 1;
	mul.lo.s32 	%r412, %r411, 2056;
	add.s32 	%r413, %r410, %r405;
	add.s32 	%r414, %r413, %r407;
	add.s32 	%r415, %r414, %r3346;
	add.s32 	%r416, %r415, %r409;
	add.s32 	%r417, %r416, %r412;
	add.s32 	%r67, %r417, %r3344;
	mul.wide.u32 	%rd25, %r67, 4;
	mov.u64 	%rd26, shmem;
	add.s64 	%rd6, %rd26, %rd25;
	add.s32 	%r68, %r67, 8256;
	cvt.u64.u32 	%rd27, %r3344;
	cvt.u64.u32 	%rd28, %r412;
	cvt.u64.u32 	%rd29, %r409;
	cvt.u64.u32 	%rd30, %r3346;
	cvt.u64.u32 	%rd31, %r407;
	cvt.u64.u32 	%rd32, %r410;
	cvt.u64.u32 	%rd33, %r405;
	add.s64 	%rd34, %rd33, %rd32;
	add.s64 	%rd35, %rd34, %rd31;
	add.s64 	%rd36, %rd35, %rd30;
	add.s64 	%rd37, %rd36, %rd29;
	add.s64 	%rd38, %rd37, %rd28;
	add.s64 	%rd39, %rd38, %rd27;
	shl.b64 	%rd40, %rd39, 2;
	add.s64 	%rd7, %rd26, %rd40;
	add.s32 	%r69, %r67, 32;
	add.s32 	%r70, %r67, 8288;
	and.b32  	%r418, %r3, 1;
	mul.lo.s32 	%r419, %r418, 4112;
	bfe.u32 	%r420, %r3, 2, 1;
	mul.lo.s32 	%r421, %r420, 1028;
	bfe.u32 	%r422, %r3, 3, 1;
	mul.lo.s32 	%r423, %r422, 514;
	shr.u32 	%r424, %r3, 4;
	mul.lo.s32 	%r425, %r424, 257;
	bfe.u32 	%r426, %r3, 1, 1;
	mul.lo.s32 	%r427, %r426, 2056;
	mul.lo.s32 	%r428, %r5, 6;
	add.s32 	%r429, %r425, %r419;
	add.s32 	%r430, %r429, %r428;
	add.s32 	%r431, %r430, %r421;
	add.s32 	%r432, %r431, %r423;
	add.s32 	%r433, %r432, %r427;
	add.s32 	%r71, %r433, %r3347;
	mul.wide.u32 	%rd41, %r71, 4;
	add.s64 	%rd8, %rd26, %rd41;
	add.s32 	%r72, %r71, 8256;
	cvt.u64.u32 	%rd42, %r3347;
	cvt.u64.u32 	%rd43, %r427;
	cvt.u64.u32 	%rd44, %r423;
	cvt.u64.u32 	%rd45, %r421;
	cvt.u64.u32 	%rd46, %r428;
	cvt.u64.u32 	%rd47, %r425;
	cvt.u64.u32 	%rd48, %r419;
	add.s64 	%rd49, %rd48, %rd47;
	add.s64 	%rd50, %rd49, %rd46;
	add.s64 	%rd51, %rd50, %rd45;
	add.s64 	%rd52, %rd51, %rd44;
	add.s64 	%rd53, %rd52, %rd43;
	add.s64 	%rd54, %rd53, %rd42;
	shl.b64 	%rd55, %rd54, 2;
	add.s64 	%rd9, %rd26, %rd55;
	add.s32 	%r73, %r71, 32;
	add.s32 	%r74, %r71, 8288;
	mul.lo.s32 	%r434, %r2, 59904;
	or.b32  	%r435, %r434, %r45;
	cvt.u16.u32 	%rs70, %r3;
	shl.b16 	%rs71, %rs70, 1;
	and.b16  	%rs72, %rs71, 254;
	mul.lo.s16 	%rs73, %rs72, 171;
	shr.u16 	%rs74, %rs73, 13;
	mul.lo.s16 	%rs75, %rs74, 48;
	sub.s16 	%rs76, %rs71, %rs75;
	cvt.u32.u16 	%r436, %rs76;
	and.b32  	%r437, %r436, 254;
	mad.lo.s32 	%r75, %r437, 24, %r435;
	or.b16  	%rs77, %rs71, 1;
	and.b16  	%rs78, %rs77, 255;
	mul.lo.s16 	%rs79, %rs78, 171;
	shr.u16 	%rs80, %rs79, 13;
	mul.lo.s16 	%rs81, %rs80, 48;
	sub.s16 	%rs82, %rs77, %rs81;
	cvt.u32.u16 	%r438, %rs82;
	and.b32  	%r439, %r438, 255;
	mad.lo.s32 	%r76, %r439, 24, %r435;
	mul.wide.u32 	%rd56, %r403, 4;
	add.s64 	%rd10, %rd26, %rd56;
	setp.gt.u32 	%p47, %r3, 7;
	setp.eq.s16 	%p48, %rs1, 0;
	setp.lt.u32 	%p50, %r1, 24;
	mov.u32 	%r3350, %r3342;
	mov.u32 	%r3381, %r3342;
	mov.u32 	%r3382, %r3342;
	mov.u32 	%r3383, %r3342;
	mov.u32 	%r3384, %r3342;
	bra.uni 	LBB0_16;
LBB0_37:                                // %guard_pass14622
                                        //   in Loop: Header=BB0_16 Depth=1
	add.s32 	%r251, %r3350, 48;
	setp.ne.s32 	%p76, %r3350, 2016;
	mov.u32 	%r3350, %r251;
	@%p76 bra 	LBB0_16;
	bra.uni 	LBB0_38;
LBB0_16:                                // %L737
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_18 Depth 2
                                        //     Child Loop BB0_28 Depth 2
	mul.hi.u32 	%r633, %r3350, -1431655765;
	shr.u32 	%r634, %r633, 5;
	mul.lo.s32 	%r82, %r634, 48;
	add.s32 	%r635, %r82, %r3;
	cvt.u16.u32 	%rs83, %r635;
	mul.hi.s16 	%rs84, %rs83, 16257;
	shr.u16 	%rs85, %rs84, 15;
	shr.s16 	%rs86, %rs84, 9;
	add.s16 	%rs87, %rs86, %rs85;
	mul.lo.s16 	%rs88, %rs87, 2064;
	sub.s16 	%rs89, %rs83, %rs88;
	cvt.u32.u16 	%r636, %rs89;
	shl.b32 	%r637, %r636, 16;
	or.b32  	%r638, %r637, %r37;
	or.b32  	%r639, %r638, %r38;
	or.b32  	%r640, %r639, %r39;
	mul.wide.s32 	%rd57, %r640, 4;
	add.s64 	%rd58, %rd3, %rd57;
	ld.global.v4.u32 	{%r641, %r642, %r643, %r644}, [%rd58];
	or.b32  	%r645, %r637, %r40;
	or.b32  	%r646, %r645, %r38;
	or.b32  	%r647, %r646, %r39;
	mul.wide.s32 	%rd59, %r647, 4;
	add.s64 	%rd60, %rd3, %rd59;
	ld.global.v4.u32 	{%r648, %r649, %r650, %r651}, [%rd60];
	add.s32 	%r652, %r41, %r82;
	cvt.u16.u32 	%rs90, %r652;
	mul.hi.s16 	%rs91, %rs90, 16257;
	shr.u16 	%rs92, %rs91, 15;
	shr.s16 	%rs93, %rs91, 9;
	add.s16 	%rs94, %rs93, %rs92;
	mul.lo.s16 	%rs95, %rs94, 2064;
	sub.s16 	%rs96, %rs90, %rs95;
	cvt.u32.u16 	%r653, %rs96;
	shl.b32 	%r654, %r653, 16;
	or.b32  	%r655, %r654, %r37;
	or.b32  	%r656, %r655, %r38;
	or.b32  	%r657, %r656, %r39;
	mul.wide.s32 	%rd61, %r657, 4;
	add.s64 	%rd62, %rd3, %rd61;
	ld.global.v4.u32 	{%r658, %r659, %r660, %r661}, [%rd62];
	or.b32  	%r662, %r654, %r40;
	or.b32  	%r663, %r662, %r38;
	or.b32  	%r664, %r663, %r39;
	mul.wide.s32 	%rd63, %r664, 4;
	add.s64 	%rd64, %rd3, %rd63;
	ld.global.v4.u32 	{%r665, %r666, %r667, %r668}, [%rd64];
	selp.b32 	%r669, %r643, %r641, %p48;
	shfl.sync.bfly.b32	%r670, %r669, 16, 31, -1;
	selp.b32 	%r442, %r641, %r670, %p48;
	selp.b32 	%r447, %r670, %r643, %p48;
	selp.b32 	%r671, %r644, %r642, %p48;
	shfl.sync.bfly.b32	%r672, %r671, 16, 31, -1;
	selp.b32 	%r450, %r642, %r672, %p48;
	selp.b32 	%r455, %r672, %r644, %p48;
	selp.b32 	%r673, %r650, %r648, %p48;
	shfl.sync.bfly.b32	%r674, %r673, 16, 31, -1;
	selp.b32 	%r458, %r648, %r674, %p48;
	selp.b32 	%r463, %r674, %r650, %p48;
	selp.b32 	%r675, %r651, %r649, %p48;
	shfl.sync.bfly.b32	%r676, %r675, 16, 31, -1;
	selp.b32 	%r466, %r649, %r676, %p48;
	selp.b32 	%r471, %r676, %r651, %p48;
	selp.b32 	%r677, %r660, %r658, %p48;
	shfl.sync.bfly.b32	%r678, %r677, 16, 31, -1;
	selp.b32 	%r474, %r658, %r678, %p48;
	selp.b32 	%r479, %r678, %r660, %p48;
	selp.b32 	%r679, %r661, %r659, %p48;
	shfl.sync.bfly.b32	%r680, %r679, 16, 31, -1;
	selp.b32 	%r482, %r659, %r680, %p48;
	selp.b32 	%r487, %r680, %r661, %p48;
	selp.b32 	%r681, %r667, %r665, %p48;
	shfl.sync.bfly.b32	%r682, %r681, 16, 31, -1;
	selp.b32 	%r490, %r665, %r682, %p48;
	selp.b32 	%r495, %r682, %r667, %p48;
	selp.b32 	%r683, %r668, %r666, %p48;
	shfl.sync.bfly.b32	%r684, %r683, 16, 31, -1;
	selp.b32 	%r498, %r666, %r684, %p48;
	selp.b32 	%r503, %r684, %r668, %p48;
	shl.b32 	%r443, %r447, 4;
	mov.u32 	%r441, 252645135;
	// begin inline asm
	lop3.b32 %r505, %r441, %r442, %r443, 202;
	// end inline asm
	shr.u32 	%r446, %r442, 4;
	// begin inline asm
	lop3.b32 %r521, %r441, %r446, %r447, 202;
	// end inline asm
	shl.b32 	%r451, %r455, 4;
	// begin inline asm
	lop3.b32 %r513, %r441, %r450, %r451, 202;
	// end inline asm
	shr.u32 	%r454, %r450, 4;
	// begin inline asm
	lop3.b32 %r529, %r441, %r454, %r455, 202;
	// end inline asm
	shl.b32 	%r459, %r463, 4;
	// begin inline asm
	lop3.b32 %r537, %r441, %r458, %r459, 202;
	// end inline asm
	shr.u32 	%r462, %r458, 4;
	// begin inline asm
	lop3.b32 %r553, %r441, %r462, %r463, 202;
	// end inline asm
	shl.b32 	%r467, %r471, 4;
	// begin inline asm
	lop3.b32 %r545, %r441, %r466, %r467, 202;
	// end inline asm
	shr.u32 	%r470, %r466, 4;
	// begin inline asm
	lop3.b32 %r561, %r441, %r470, %r471, 202;
	// end inline asm
	shl.b32 	%r475, %r479, 4;
	// begin inline asm
	lop3.b32 %r506, %r441, %r474, %r475, 202;
	// end inline asm
	shr.u32 	%r478, %r474, 4;
	// begin inline asm
	lop3.b32 %r522, %r441, %r478, %r479, 202;
	// end inline asm
	shl.b32 	%r483, %r487, 4;
	// begin inline asm
	lop3.b32 %r514, %r441, %r482, %r483, 202;
	// end inline asm
	shr.u32 	%r486, %r482, 4;
	// begin inline asm
	lop3.b32 %r530, %r441, %r486, %r487, 202;
	// end inline asm
	shl.b32 	%r491, %r495, 4;
	// begin inline asm
	lop3.b32 %r538, %r441, %r490, %r491, 202;
	// end inline asm
	shr.u32 	%r494, %r490, 4;
	// begin inline asm
	lop3.b32 %r554, %r441, %r494, %r495, 202;
	// end inline asm
	shl.b32 	%r499, %r503, 4;
	// begin inline asm
	lop3.b32 %r546, %r441, %r498, %r499, 202;
	// end inline asm
	shr.u32 	%r502, %r498, 4;
	// begin inline asm
	lop3.b32 %r562, %r441, %r502, %r503, 202;
	// end inline asm
	mov.u32 	%r507, 25152;
	// begin inline asm
	prmt.b32 %r569, %r505, %r506, %r507;
	// end inline asm
	mov.u32 	%r511, 29521;
	// begin inline asm
	prmt.b32 %r601, %r505, %r506, %r511;
	// end inline asm
	// begin inline asm
	prmt.b32 %r577, %r513, %r514, %r507;
	// end inline asm
	// begin inline asm
	prmt.b32 %r609, %r513, %r514, %r511;
	// end inline asm
	// begin inline asm
	prmt.b32 %r570, %r521, %r522, %r507;
	// end inline asm
	// begin inline asm
	prmt.b32 %r602, %r521, %r522, %r511;
	// end inline asm
	// begin inline asm
	prmt.b32 %r578, %r529, %r530, %r507;
	// end inline asm
	// begin inline asm
	prmt.b32 %r610, %r529, %r530, %r511;
	// end inline asm
	// begin inline asm
	prmt.b32 %r585, %r537, %r538, %r507;
	// end inline asm
	// begin inline asm
	prmt.b32 %r617, %r537, %r538, %r511;
	// end inline asm
	// begin inline asm
	prmt.b32 %r593, %r545, %r546, %r507;
	// end inline asm
	// begin inline asm
	prmt.b32 %r625, %r545, %r546, %r511;
	// end inline asm
	// begin inline asm
	prmt.b32 %r586, %r553, %r554, %r507;
	// end inline asm
	// begin inline asm
	prmt.b32 %r618, %r553, %r554, %r511;
	// end inline asm
	// begin inline asm
	prmt.b32 %r594, %r561, %r562, %r507;
	// end inline asm
	// begin inline asm
	prmt.b32 %r626, %r561, %r562, %r511;
	// end inline asm
	mov.u32 	%r627, 21520;
	// begin inline asm
	prmt.b32 %r568, %r569, %r570, %r627;
	// end inline asm
	mov.u32 	%r631, 30258;
	// begin inline asm
	prmt.b32 %r572, %r569, %r570, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r576, %r577, %r578, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r580, %r577, %r578, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r584, %r585, %r586, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r588, %r585, %r586, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r592, %r593, %r594, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r596, %r593, %r594, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r600, %r601, %r602, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r604, %r601, %r602, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r608, %r609, %r610, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r612, %r609, %r610, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r616, %r617, %r618, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r620, %r617, %r618, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r624, %r625, %r626, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r628, %r625, %r626, %r631;
	// end inline asm
	mul.hi.s16 	%rs97, %rs83, 10923;
	shr.u16 	%rs98, %rs97, 15;
	shr.s16 	%rs99, %rs97, 2;
	add.s16 	%rs100, %rs99, %rs98;
	mul.lo.s16 	%rs101, %rs100, 24;
	sub.s16 	%rs102, %rs83, %rs101;
	cvt.s32.s16 	%r685, %rs102;
	add.s32 	%r686, %r42, %r685;
	mul.wide.s32 	%rd65, %r686, 4;
	add.s64 	%rd67, %rd26, %rd65;
	st.shared.u32 	[%rd67], %r568;
	st.shared.u32 	[%rd67+512], %r576;
	st.shared.u32 	[%rd67+256], %r572;
	st.shared.u32 	[%rd67+768], %r580;
	add.s32 	%r687, %r43, %r685;
	mul.wide.s32 	%rd68, %r687, 4;
	add.s64 	%rd69, %rd26, %rd68;
	st.shared.u32 	[%rd69], %r584;
	st.shared.u32 	[%rd69+512], %r592;
	st.shared.u32 	[%rd69+256], %r588;
	st.shared.u32 	[%rd69+768], %r596;
	st.shared.u32 	[%rd67+128], %r600;
	st.shared.u32 	[%rd67+640], %r608;
	st.shared.u32 	[%rd67+384], %r604;
	st.shared.u32 	[%rd67+896], %r612;
	st.shared.u32 	[%rd69+128], %r616;
	st.shared.u32 	[%rd69+640], %r624;
	st.shared.u32 	[%rd69+384], %r620;
	st.shared.u32 	[%rd69+896], %r628;
	bar.sync 	0;
	add.s32 	%r688, %r82, %r45;
	cvt.u16.u32 	%rs103, %r688;
	mul.hi.s16 	%rs104, %rs103, 10923;
	shr.u16 	%rs105, %rs104, 15;
	shr.s16 	%rs106, %rs104, 2;
	add.s16 	%rs107, %rs106, %rs105;
	mul.lo.s16 	%rs108, %rs107, 24;
	sub.s16 	%rs109, %rs103, %rs108;
	cvt.s32.s16 	%r689, %rs109;
	add.s32 	%r690, %r44, %r689;
	mul.wide.s32 	%rd70, %r690, 4;
	add.s64 	%rd71, %rd26, %rd70;
	ld.shared.u32 	%r691, [%rd71];
	add.s32 	%r692, %r46, %r689;
	mul.wide.u32 	%rd72, %r692, 4;
	add.s64 	%rd73, %rd26, %rd72;
	ld.shared.u32 	%r693, [%rd73];
	add.s32 	%r694, %r47, %r689;
	mul.wide.u32 	%rd74, %r694, 4;
	add.s64 	%rd75, %rd26, %rd74;
	ld.shared.u32 	%r695, [%rd75];
	add.s32 	%r696, %r48, %r689;
	mul.wide.u32 	%rd76, %r696, 4;
	add.s64 	%rd77, %rd26, %rd76;
	ld.shared.u32 	%r697, [%rd77];
	add.s32 	%r698, %r49, %r689;
	mul.wide.s32 	%rd78, %r698, 4;
	add.s64 	%rd79, %rd26, %rd78;
	ld.shared.u32 	%r699, [%rd79];
	add.s32 	%r700, %r50, %r689;
	mul.wide.u32 	%rd80, %r700, 4;
	add.s64 	%rd81, %rd26, %rd80;
	ld.shared.u32 	%r701, [%rd81];
	add.s32 	%r702, %r51, %r689;
	mul.wide.u32 	%rd82, %r702, 4;
	add.s64 	%rd83, %rd26, %rd82;
	ld.shared.u32 	%r703, [%rd83];
	add.s32 	%r704, %r52, %r689;
	mul.wide.u32 	%rd84, %r704, 4;
	add.s64 	%rd85, %rd26, %rd84;
	ld.shared.u32 	%r705, [%rd85];
	add.s32 	%r706, %r53, %r689;
	mul.wide.s32 	%rd86, %r706, 4;
	add.s64 	%rd87, %rd26, %rd86;
	ld.shared.u32 	%r707, [%rd87];
	add.s32 	%r708, %r54, %r689;
	mul.wide.u32 	%rd88, %r708, 4;
	add.s64 	%rd89, %rd26, %rd88;
	ld.shared.u32 	%r709, [%rd89];
	add.s32 	%r710, %r55, %r689;
	mul.wide.u32 	%rd90, %r710, 4;
	add.s64 	%rd91, %rd26, %rd90;
	ld.shared.u32 	%r711, [%rd91];
	add.s32 	%r712, %r56, %r689;
	mul.wide.u32 	%rd92, %r712, 4;
	add.s64 	%rd93, %rd26, %rd92;
	ld.shared.u32 	%r713, [%rd93];
	add.s32 	%r714, %r57, %r689;
	mul.wide.s32 	%rd94, %r714, 4;
	add.s64 	%rd95, %rd26, %rd94;
	ld.shared.u32 	%r715, [%rd95];
	add.s32 	%r716, %r58, %r689;
	mul.wide.u32 	%rd96, %r716, 4;
	add.s64 	%rd97, %rd26, %rd96;
	ld.shared.u32 	%r717, [%rd97];
	add.s32 	%r718, %r59, %r689;
	mul.wide.u32 	%rd98, %r718, 4;
	add.s64 	%rd99, %rd26, %rd98;
	ld.shared.u32 	%r719, [%rd99];
	add.s32 	%r720, %r60, %r689;
	mul.wide.u32 	%rd100, %r720, 4;
	add.s64 	%rd101, %rd26, %rd100;
	ld.shared.u32 	%r721, [%rd101];
	add.s32 	%r722, %r61, %r689;
	mul.wide.s32 	%rd102, %r722, 4;
	add.s64 	%rd103, %rd26, %rd102;
	ld.shared.u32 	%r723, [%rd103];
	add.s32 	%r724, %r62, %r689;
	mul.wide.u32 	%rd104, %r724, 4;
	add.s64 	%rd105, %rd26, %rd104;
	ld.shared.u32 	%r725, [%rd105];
	add.s32 	%r726, %r63, %r689;
	mul.wide.u32 	%rd106, %r726, 4;
	add.s64 	%rd107, %rd26, %rd106;
	ld.shared.u32 	%r727, [%rd107];
	add.s32 	%r728, %r64, %r689;
	mul.wide.u32 	%rd108, %r728, 4;
	add.s64 	%rd109, %rd26, %rd108;
	ld.shared.u32 	%r729, [%rd109];
	add.s32 	%r730, %r65, %r689;
	mul.wide.s32 	%rd110, %r730, 4;
	add.s64 	%rd111, %rd26, %rd110;
	ld.shared.u32 	%r731, [%rd111];
	add.s32 	%r732, %r66, %r689;
	mul.wide.s32 	%rd112, %r732, 4;
	add.s64 	%rd113, %rd26, %rd112;
	ld.shared.u32 	%r733, [%rd113];
	bar.sync 	0;
	shfl.sync.idx.b32	%r734, %r3343, 0, 31, -1;
	shfl.sync.idx.b32	%r735, %r3343, 1, 31, -1;
	shfl.sync.idx.b32	%r736, %r3343, 2, 31, -1;
	shfl.sync.idx.b32	%r737, %r3343, 3, 31, -1;
	shfl.sync.idx.b32	%r738, %r3343, 4, 31, -1;
	shfl.sync.idx.b32	%r739, %r3343, 5, 31, -1;
	shfl.sync.idx.b32	%r740, %r3343, 6, 31, -1;
	shfl.sync.idx.b32	%r741, %r3343, 7, 31, -1;
	shfl.sync.idx.b32	%r742, %r3343, 8, 31, -1;
	shfl.sync.idx.b32	%r743, %r3343, 9, 31, -1;
	shfl.sync.idx.b32	%r744, %r3343, 10, 31, -1;
	shfl.sync.idx.b32	%r745, %r3343, 11, 31, -1;
	shfl.sync.idx.b32	%r746, %r3343, 12, 31, -1;
	shfl.sync.idx.b32	%r747, %r3343, 13, 31, -1;
	shfl.sync.idx.b32	%r748, %r3343, 14, 31, -1;
	shfl.sync.idx.b32	%r749, %r3343, 15, 31, -1;
	shfl.sync.idx.b32	%r750, %r3343, 16, 31, -1;
	shfl.sync.idx.b32	%r751, %r3343, 17, 31, -1;
	shfl.sync.idx.b32	%r752, %r3343, 18, 31, -1;
	shfl.sync.idx.b32	%r753, %r3343, 19, 31, -1;
	shfl.sync.idx.b32	%r754, %r3343, 20, 31, -1;
	shfl.sync.idx.b32	%r755, %r3343, 21, 31, -1;
	shfl.sync.idx.b32	%r756, %r3343, 22, 31, -1;
	shfl.sync.idx.b32	%r757, %r3343, 23, 31, -1;
	add.s32 	%r758, %r734, %r689;
	mul.wide.s32 	%rd114, %r758, 4;
	add.s64 	%rd115, %rd26, %rd114;
	st.shared.u32 	[%rd115], %r691;
	add.s32 	%r759, %r735, %r689;
	mul.wide.s32 	%rd116, %r759, 4;
	add.s64 	%rd117, %rd26, %rd116;
	st.shared.u32 	[%rd117], %r693;
	add.s32 	%r760, %r736, %r689;
	mul.wide.s32 	%rd118, %r760, 4;
	add.s64 	%rd119, %rd26, %rd118;
	st.shared.u32 	[%rd119], %r695;
	add.s32 	%r761, %r737, %r689;
	mul.wide.s32 	%rd120, %r761, 4;
	add.s64 	%rd121, %rd26, %rd120;
	st.shared.u32 	[%rd121], %r697;
	add.s32 	%r762, %r738, %r689;
	mul.wide.s32 	%rd122, %r762, 4;
	add.s64 	%rd123, %rd26, %rd122;
	st.shared.u32 	[%rd123], %r699;
	add.s32 	%r763, %r739, %r689;
	mul.wide.s32 	%rd124, %r763, 4;
	add.s64 	%rd125, %rd26, %rd124;
	st.shared.u32 	[%rd125], %r701;
	add.s32 	%r764, %r740, %r689;
	mul.wide.s32 	%rd126, %r764, 4;
	add.s64 	%rd127, %rd26, %rd126;
	st.shared.u32 	[%rd127], %r703;
	add.s32 	%r765, %r741, %r689;
	mul.wide.s32 	%rd128, %r765, 4;
	add.s64 	%rd129, %rd26, %rd128;
	st.shared.u32 	[%rd129], %r705;
	add.s32 	%r766, %r742, %r689;
	mul.wide.s32 	%rd130, %r766, 4;
	add.s64 	%rd131, %rd26, %rd130;
	st.shared.u32 	[%rd131], %r707;
	add.s32 	%r767, %r743, %r689;
	mul.wide.s32 	%rd132, %r767, 4;
	add.s64 	%rd133, %rd26, %rd132;
	st.shared.u32 	[%rd133], %r709;
	add.s32 	%r768, %r744, %r689;
	mul.wide.s32 	%rd134, %r768, 4;
	add.s64 	%rd135, %rd26, %rd134;
	st.shared.u32 	[%rd135], %r711;
	add.s32 	%r769, %r745, %r689;
	mul.wide.s32 	%rd136, %r769, 4;
	add.s64 	%rd137, %rd26, %rd136;
	st.shared.u32 	[%rd137], %r713;
	add.s32 	%r770, %r746, %r689;
	mul.wide.s32 	%rd138, %r770, 4;
	add.s64 	%rd139, %rd26, %rd138;
	st.shared.u32 	[%rd139], %r715;
	add.s32 	%r771, %r747, %r689;
	mul.wide.s32 	%rd140, %r771, 4;
	add.s64 	%rd141, %rd26, %rd140;
	st.shared.u32 	[%rd141], %r717;
	add.s32 	%r772, %r748, %r689;
	mul.wide.s32 	%rd142, %r772, 4;
	add.s64 	%rd143, %rd26, %rd142;
	st.shared.u32 	[%rd143], %r719;
	add.s32 	%r773, %r749, %r689;
	mul.wide.s32 	%rd144, %r773, 4;
	add.s64 	%rd145, %rd26, %rd144;
	st.shared.u32 	[%rd145], %r721;
	add.s32 	%r774, %r750, %r689;
	mul.wide.s32 	%rd146, %r774, 4;
	add.s64 	%rd147, %rd26, %rd146;
	st.shared.u32 	[%rd147], %r723;
	add.s32 	%r775, %r751, %r689;
	mul.wide.s32 	%rd148, %r775, 4;
	add.s64 	%rd149, %rd26, %rd148;
	st.shared.u32 	[%rd149], %r725;
	add.s32 	%r776, %r752, %r689;
	mul.wide.s32 	%rd150, %r776, 4;
	add.s64 	%rd151, %rd26, %rd150;
	st.shared.u32 	[%rd151], %r727;
	add.s32 	%r777, %r753, %r689;
	mul.wide.s32 	%rd152, %r777, 4;
	add.s64 	%rd153, %rd26, %rd152;
	st.shared.u32 	[%rd153], %r729;
	add.s32 	%r778, %r754, %r689;
	mul.wide.s32 	%rd154, %r778, 4;
	add.s64 	%rd155, %rd26, %rd154;
	st.shared.u32 	[%rd155], %r731;
	selp.b32 	%r779, 0, %r733, %p47;
	add.s32 	%r780, %r755, %r689;
	mul.wide.s32 	%rd156, %r780, 4;
	add.s64 	%rd157, %rd26, %rd156;
	st.shared.u32 	[%rd157], %r779;
	add.s32 	%r781, %r756, %r689;
	mul.wide.s32 	%rd158, %r781, 4;
	add.s64 	%rd159, %rd26, %rd158;
	st.shared.u32 	[%rd159], %r3342;
	add.s32 	%r782, %r757, %r689;
	mul.wide.s32 	%rd160, %r782, 4;
	add.s64 	%rd161, %rd26, %rd160;
	st.shared.u32 	[%rd161], %r3342;
	bar.sync 	0;
	mov.u32 	%r3355, %r3342;
	mov.u32 	%r3356, %r3342;
	mov.u32 	%r3357, %r3342;
	mov.u32 	%r3358, %r3342;
	mov.u32 	%r3359, %r3342;
	mov.u32 	%r3360, %r3342;
	mov.u32 	%r3361, %r3342;
	mov.u32 	%r3362, %r3342;
	mov.u32 	%r3363, %r3342;
	mov.u32 	%r3364, %r3342;
	mov.u32 	%r3365, %r3342;
	mov.u32 	%r3366, %r3342;
	mov.u32 	%r3367, %r3342;
	mov.u32 	%r3368, %r3342;
	mov.u32 	%r3369, %r3342;
	mov.u32 	%r3370, %r3342;
	mov.u32 	%r3371, %r3342;
	mov.u32 	%r3372, %r3342;
	mov.u32 	%r3373, %r3342;
	mov.u32 	%r3374, %r3342;
	mov.u32 	%r3375, %r3342;
	mov.u32 	%r3376, %r3342;
	mov.u32 	%r3377, %r3342;
	mov.u32 	%r3378, %r3342;
	@%p46 bra 	LBB0_41;
	bra.uni 	LBB0_17;
LBB0_41:                                // %oksrem3306
                                        //   in Loop: Header=BB0_16 Depth=1
	cvt.u16.u32 	%rs110, %r82;
	mul.hi.s16 	%rs111, %rs110, 10923;
	shr.u16 	%rs112, %rs111, 15;
	shr.s16 	%rs113, %rs111, 2;
	add.s16 	%rs114, %rs113, %rs112;
	mul.lo.s16 	%rs115, %rs114, 24;
	sub.s16 	%rs116, %rs110, %rs115;
	cvt.s32.s16 	%r783, %rs116;
	mul.wide.s32 	%rd162, %r783, 4;
	add.s64 	%rd163, %rd10, %rd162;
	ld.shared.u32 	%r3355, [%rd163];
	ld.shared.u32 	%r3356, [%rd10+4];
	ld.shared.u32 	%r3357, [%rd10+8];
	ld.shared.u32 	%r3358, [%rd10+12];
	ld.shared.u32 	%r3359, [%rd10+16];
	ld.shared.u32 	%r3360, [%rd10+20];
	ld.shared.u32 	%r3361, [%rd10+24];
	ld.shared.u32 	%r3362, [%rd10+28];
	ld.shared.u32 	%r3363, [%rd10+32];
	ld.shared.u32 	%r3364, [%rd10+36];
	ld.shared.u32 	%r3365, [%rd10+40];
	ld.shared.u32 	%r3366, [%rd10+44];
	ld.shared.u32 	%r3367, [%rd10+48];
	ld.shared.u32 	%r3368, [%rd10+52];
	ld.shared.u32 	%r3369, [%rd10+56];
	ld.shared.u32 	%r3370, [%rd10+60];
	add.s16 	%rs117, %rs110, 16;
	mul.hi.s16 	%rs118, %rs117, 10923;
	shr.u16 	%rs119, %rs118, 15;
	shr.s16 	%rs120, %rs118, 2;
	add.s16 	%rs121, %rs120, %rs119;
	mul.lo.s16 	%rs122, %rs121, 24;
	sub.s16 	%rs123, %rs117, %rs122;
	cvt.s32.s16 	%r784, %rs123;
	mul.wide.s32 	%rd164, %r784, 4;
	add.s64 	%rd165, %rd10, %rd164;
	ld.shared.u32 	%r3371, [%rd165];
	add.s16 	%rs124, %rs110, 17;
	mul.hi.s16 	%rs125, %rs124, 10923;
	shr.u16 	%rs126, %rs125, 15;
	shr.s16 	%rs127, %rs125, 2;
	add.s16 	%rs128, %rs127, %rs126;
	mul.lo.s16 	%rs129, %rs128, 24;
	sub.s16 	%rs130, %rs124, %rs129;
	cvt.s32.s16 	%r785, %rs130;
	mul.wide.s32 	%rd166, %r785, 4;
	add.s64 	%rd167, %rd10, %rd166;
	ld.shared.u32 	%r3372, [%rd167];
	add.s16 	%rs131, %rs110, 18;
	mul.hi.s16 	%rs132, %rs131, 10923;
	shr.u16 	%rs133, %rs132, 15;
	shr.s16 	%rs134, %rs132, 2;
	add.s16 	%rs135, %rs134, %rs133;
	mul.lo.s16 	%rs136, %rs135, 24;
	sub.s16 	%rs137, %rs131, %rs136;
	cvt.s32.s16 	%r786, %rs137;
	mul.wide.s32 	%rd168, %r786, 4;
	add.s64 	%rd169, %rd10, %rd168;
	ld.shared.u32 	%r3373, [%rd169];
	add.s16 	%rs138, %rs110, 19;
	mul.hi.s16 	%rs139, %rs138, 10923;
	shr.u16 	%rs140, %rs139, 15;
	shr.s16 	%rs141, %rs139, 2;
	add.s16 	%rs142, %rs141, %rs140;
	mul.lo.s16 	%rs143, %rs142, 24;
	sub.s16 	%rs144, %rs138, %rs143;
	cvt.s32.s16 	%r787, %rs144;
	mul.wide.s32 	%rd170, %r787, 4;
	add.s64 	%rd171, %rd10, %rd170;
	ld.shared.u32 	%r3374, [%rd171];
	add.s16 	%rs145, %rs110, 20;
	mul.hi.s16 	%rs146, %rs145, 10923;
	shr.u16 	%rs147, %rs146, 15;
	shr.s16 	%rs148, %rs146, 2;
	add.s16 	%rs149, %rs148, %rs147;
	mul.lo.s16 	%rs150, %rs149, 24;
	sub.s16 	%rs151, %rs145, %rs150;
	cvt.s32.s16 	%r788, %rs151;
	mul.wide.s32 	%rd172, %r788, 4;
	add.s64 	%rd173, %rd10, %rd172;
	ld.shared.u32 	%r3375, [%rd173];
	add.s16 	%rs152, %rs110, 21;
	mul.hi.s16 	%rs153, %rs152, 10923;
	shr.u16 	%rs154, %rs153, 15;
	shr.s16 	%rs155, %rs153, 2;
	add.s16 	%rs156, %rs155, %rs154;
	mul.lo.s16 	%rs157, %rs156, 24;
	sub.s16 	%rs158, %rs152, %rs157;
	cvt.s32.s16 	%r789, %rs158;
	mul.wide.s32 	%rd174, %r789, 4;
	add.s64 	%rd175, %rd10, %rd174;
	ld.shared.u32 	%r3376, [%rd175];
	add.s16 	%rs159, %rs110, 22;
	mul.hi.s16 	%rs160, %rs159, 10923;
	shr.u16 	%rs161, %rs160, 15;
	shr.s16 	%rs162, %rs160, 2;
	add.s16 	%rs163, %rs162, %rs161;
	mul.lo.s16 	%rs164, %rs163, 24;
	sub.s16 	%rs165, %rs159, %rs164;
	cvt.s32.s16 	%r790, %rs165;
	mul.wide.s32 	%rd176, %r790, 4;
	add.s64 	%rd177, %rd10, %rd176;
	ld.shared.u32 	%r3377, [%rd177];
	add.s16 	%rs166, %rs110, 23;
	mul.hi.s16 	%rs167, %rs166, 10923;
	shr.u16 	%rs168, %rs167, 15;
	shr.s16 	%rs169, %rs167, 2;
	add.s16 	%rs170, %rs169, %rs168;
	mul.lo.s16 	%rs171, %rs170, 24;
	sub.s16 	%rs172, %rs166, %rs171;
	cvt.s32.s16 	%r791, %rs172;
	mul.wide.s32 	%rd178, %r791, 4;
	add.s64 	%rd179, %rd10, %rd178;
	ld.shared.u32 	%r3378, [%rd179];
LBB0_17:                                // %L11390
                                        //   in Loop: Header=BB0_16 Depth=1
	bar.sync 	0;
	add.s32 	%r107, %r82, 1;
	add.s32 	%r108, %r82, 2;
	add.s32 	%r109, %r82, 3;
	mov.u32 	%r3379, 12;
	mov.u32 	%r3380, %r3342;
	bra.uni 	LBB0_18;
LBB0_25:                                // %L21391
                                        //   in Loop: Header=BB0_18 Depth=2
	add.s32 	%r3382, %r3382, 1;
	mov.u32 	%r3381, 0;
	mov.u32 	%r3383, %r3381;
	mov.u32 	%r3384, %r3381;
LBB0_26:                                // %L21392
                                        //   in Loop: Header=BB0_18 Depth=2
	bar.sync 	0;
	add.s32 	%r3380, %r3380, 1;
	add.s32 	%r3379, %r3379, -4;
	setp.ne.s32 	%p62, %r3379, -12;
	@%p62 bra 	LBB0_18;
	bra.uni 	LBB0_27;
LBB0_18:                                // %L11416
                                        //   Parent Loop BB0_16 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p51, %r3379, 12;
	selp.b32 	%r1331, %r3355, 0, %p51;
	setp.eq.s32 	%p52, %r3379, 8;
	selp.b32 	%r1332, %r3359, %r1331, %p52;
	setp.eq.s32 	%p53, %r3379, 4;
	selp.b32 	%r1333, %r3363, %r1332, %p53;
	setp.eq.s32 	%p54, %r3379, 0;
	selp.b32 	%r1334, %r3367, %r1333, %p54;
	setp.eq.s32 	%p55, %r3379, -4;
	selp.b32 	%r1335, %r3371, %r1334, %p55;
	setp.eq.s32 	%p56, %r3379, -8;
	selp.b32 	%r1336, %r3375, %r1335, %p56;
	selp.b32 	%r1337, %r3356, 0, %p51;
	selp.b32 	%r1338, %r3360, %r1337, %p52;
	selp.b32 	%r1339, %r3364, %r1338, %p53;
	selp.b32 	%r1340, %r3368, %r1339, %p54;
	selp.b32 	%r1341, %r3372, %r1340, %p55;
	selp.b32 	%r1342, %r3376, %r1341, %p56;
	selp.b32 	%r1343, %r3357, 0, %p51;
	selp.b32 	%r1344, %r3361, %r1343, %p52;
	selp.b32 	%r1345, %r3365, %r1344, %p53;
	selp.b32 	%r1346, %r3369, %r1345, %p54;
	selp.b32 	%r1347, %r3373, %r1346, %p55;
	selp.b32 	%r1348, %r3377, %r1347, %p56;
	selp.b32 	%r1349, %r3358, 0, %p51;
	selp.b32 	%r1350, %r3362, %r1349, %p52;
	selp.b32 	%r1351, %r3366, %r1350, %p53;
	selp.b32 	%r1352, %r3370, %r1351, %p54;
	selp.b32 	%r1353, %r3374, %r1352, %p55;
	selp.b32 	%r1354, %r3378, %r1353, %p56;
	mov.u16 	%rs210, 25600;
	// begin inline asm
	mov.b32 %r799, {%rs210, %rs210};
	// end inline asm
	mov.u16 	%rs212, 21504;
	// begin inline asm
	mov.b32 %r810, {%rs212, %rs212};
	// end inline asm
	xor.b32  	%r798, %r1336, -2004318072;
	mov.u32 	%r935, 983055;
	// begin inline asm
	lop3.b32 %r796, %r935, %r798, %r799, 202;
	// end inline asm
	mov.u16 	%rs216, 18432;
	// begin inline asm
	mov.b32 %r800, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r801, %r799, %r800;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r804, %r796, %r801;
	// end inline asm
	mov.u32 	%r946, 15728880;
	// begin inline asm
	lop3.b32 %r807, %r946, %r798, %r810, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r811, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r812, %r810, %r811;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r815, %r807, %r812;
	// end inline asm
	// begin inline asm
	mov.b32 %r845, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	mov.b32 %r856, {%rs212, %rs212};
	// end inline asm
	xor.b32  	%r844, %r1342, -2004318072;
	// begin inline asm
	lop3.b32 %r842, %r935, %r844, %r845, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r846, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r847, %r845, %r846;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r850, %r842, %r847;
	// end inline asm
	// begin inline asm
	lop3.b32 %r853, %r946, %r844, %r856, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r857, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r858, %r856, %r857;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r861, %r853, %r858;
	// end inline asm
	// begin inline asm
	mov.b32 %r891, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	mov.b32 %r902, {%rs212, %rs212};
	// end inline asm
	xor.b32  	%r890, %r1348, -2004318072;
	// begin inline asm
	lop3.b32 %r888, %r935, %r890, %r891, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r892, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r893, %r891, %r892;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r896, %r888, %r893;
	// end inline asm
	// begin inline asm
	lop3.b32 %r899, %r946, %r890, %r902, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r903, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r904, %r902, %r903;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r907, %r899, %r904;
	// end inline asm
	// begin inline asm
	mov.b32 %r937, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	mov.b32 %r948, {%rs212, %rs212};
	// end inline asm
	xor.b32  	%r936, %r1354, -2004318072;
	// begin inline asm
	lop3.b32 %r934, %r935, %r936, %r937, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r938, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r939, %r937, %r938;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r942, %r934, %r939;
	// end inline asm
	// begin inline asm
	lop3.b32 %r945, %r946, %r936, %r948, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r949, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r950, %r948, %r949;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r953, %r945, %r950;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3348;
    mov.b32 {%r2im, %r2re}, %r804;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r978, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3349;
    mov.b32 {%r2im, %r2re}, %r815;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r981, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3348;
    mov.b32 {%r2im, %r2re}, %r850;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r984, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3349;
    mov.b32 {%r2im, %r2re}, %r861;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r987, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3348;
    mov.b32 {%r2im, %r2re}, %r896;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r990, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3349;
    mov.b32 {%r2im, %r2re}, %r907;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r993, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3348;
    mov.b32 {%r2im, %r2re}, %r942;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r996, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3349;
    mov.b32 {%r2im, %r2re}, %r953;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r999, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1062, %r1065}, {%r256, %r253}, {%r978}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1071, %r1074}, {%r256, %r253}, {%r981}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1080, %r1083}, {%r256, %r253}, {%r984}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1089, %r1092}, {%r256, %r253}, {%r987}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1098, %r1101}, {%r256, %r253}, {%r990}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1107, %r1110}, {%r256, %r253}, {%r993}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1116, %r1119}, {%r256, %r253}, {%r996}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1125, %r1128}, {%r256, %r253}, {%r999}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1058, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1060, %r1058, %r1062;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1063, %r291, %r1065, %r1060;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1067, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1069, %r1067, %r1071;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1072, %r291, %r1074, %r1069;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1076, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1078, %r1076, %r1080;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1081, %r291, %r1083, %r1078;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1085, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1087, %r1085, %r1089;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1090, %r291, %r1092, %r1087;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1094, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1096, %r1094, %r1098;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1099, %r291, %r1101, %r1096;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1103, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1105, %r1103, %r1107;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1108, %r291, %r1110, %r1105;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1112, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1114, %r1112, %r1116;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1117, %r291, %r1119, %r1114;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1121, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1123, %r1121, %r1125;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1126, %r291, %r1128, %r1123;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1130, %r294, %r1065;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1133, %r291, %r1062, %r1130;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1137, %r294, %r1074;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1140, %r291, %r1071, %r1137;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1144, %r294, %r1083;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1147, %r291, %r1080, %r1144;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1151, %r294, %r1092;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1154, %r291, %r1089, %r1151;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1158, %r294, %r1101;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1161, %r291, %r1098, %r1158;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1165, %r294, %r1110;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1168, %r291, %r1107, %r1165;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1172, %r294, %r1119;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1175, %r291, %r1116, %r1172;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1179, %r294, %r1128;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1182, %r291, %r1125, %r1179;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1267, %r1268}, {%r324, %r318, %r321, %r315}, {%r1133, %r1063}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1275, %r1276}, {%r324, %r318, %r321, %r315}, {%r1140, %r1072}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1283, %r1284}, {%r324, %r318, %r321, %r315}, {%r1147, %r1081}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1291, %r1292}, {%r324, %r318, %r321, %r315}, {%r1154, %r1090}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1299, %r1300}, {%r324, %r318, %r321, %r315}, {%r1161, %r1099}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1307, %r1308}, {%r324, %r318, %r321, %r315}, {%r1168, %r1108}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1315, %r1316}, {%r324, %r318, %r321, %r315}, {%r1175, %r1117}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1323, %r1324}, {%r324, %r318, %r321, %r315}, {%r1182, %r1126}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	prmt.b32 %r1266, %r1267, %r1268, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1270, %r1267, %r1268, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1274, %r1275, %r1276, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1278, %r1275, %r1276, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1282, %r1283, %r1284, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1286, %r1283, %r1284, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1290, %r1291, %r1292, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1294, %r1291, %r1292, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1298, %r1299, %r1300, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1302, %r1299, %r1300, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1306, %r1307, %r1308, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1310, %r1307, %r1308, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1314, %r1315, %r1316, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1318, %r1315, %r1316, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1322, %r1323, %r1324, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1326, %r1323, %r1324, %r631;
	// end inline asm
	st.shared.u32 	[%rd6], %r1266;
	st.shared.u32 	[%rd7+33024], %r1270;
	st.shared.u32 	[%rd7+128], %r1274;
	st.shared.u32 	[%rd7+33152], %r1278;
	cvt.u16.u32 	%rs221, %r3380;
	and.b16  	%rs222, %rs221, 255;
	mul.lo.s16 	%rs223, %rs222, 171;
	shr.u16 	%rs224, %rs223, 10;
	mul.lo.s16 	%rs225, %rs224, 6;
	sub.s16 	%rs226, %rs221, %rs225;
	shl.b16 	%rs227, %rs226, 2;
	cvt.u32.u16 	%r1355, %rs227;
	and.b32  	%r1356, %r1355, 252;
	add.s32 	%r1357, %r107, %r1356;
	shr.s32 	%r1358, %r1357, 31;
	shr.u32 	%r1359, %r1358, 30;
	add.s32 	%r1360, %r1357, %r1359;
	and.b32  	%r1361, %r1360, 67108860;
	sub.s32 	%r1362, %r1357, %r1361;
	shl.b32 	%r116, %r1362, 6;
	add.s32 	%r1363, %r67, %r116;
	mul.wide.s32 	%rd180, %r1363, 4;
	add.s64 	%rd182, %rd26, %rd180;
	st.shared.u32 	[%rd182], %r1282;
	add.s32 	%r1364, %r68, %r116;
	mul.wide.u32 	%rd183, %r1364, 4;
	add.s64 	%rd184, %rd26, %rd183;
	st.shared.u32 	[%rd184], %r1286;
	add.s32 	%r1365, %r69, %r116;
	mul.wide.s32 	%rd185, %r1365, 4;
	add.s64 	%rd186, %rd26, %rd185;
	st.shared.u32 	[%rd186], %r1290;
	add.s32 	%r1366, %r70, %r116;
	mul.wide.u32 	%rd187, %r1366, 4;
	add.s64 	%rd188, %rd26, %rd187;
	st.shared.u32 	[%rd188], %r1294;
	add.s32 	%r1367, %r108, %r1356;
	shr.s32 	%r1368, %r1367, 31;
	shr.u32 	%r1369, %r1368, 30;
	add.s32 	%r1370, %r1367, %r1369;
	and.b32  	%r1371, %r1370, 67108860;
	sub.s32 	%r1372, %r1367, %r1371;
	shl.b32 	%r117, %r1372, 6;
	add.s32 	%r1373, %r67, %r117;
	mul.wide.s32 	%rd189, %r1373, 4;
	add.s64 	%rd190, %rd26, %rd189;
	st.shared.u32 	[%rd190], %r1298;
	add.s32 	%r1374, %r68, %r117;
	mul.wide.u32 	%rd191, %r1374, 4;
	add.s64 	%rd192, %rd26, %rd191;
	st.shared.u32 	[%rd192], %r1302;
	add.s32 	%r1375, %r69, %r117;
	mul.wide.s32 	%rd193, %r1375, 4;
	add.s64 	%rd194, %rd26, %rd193;
	st.shared.u32 	[%rd194], %r1306;
	add.s32 	%r1376, %r70, %r117;
	mul.wide.u32 	%rd195, %r1376, 4;
	add.s64 	%rd196, %rd26, %rd195;
	st.shared.u32 	[%rd196], %r1310;
	add.s32 	%r1377, %r109, %r1356;
	shr.s32 	%r1378, %r1377, 31;
	shr.u32 	%r1379, %r1378, 30;
	add.s32 	%r1380, %r1377, %r1379;
	and.b32  	%r1381, %r1380, 67108860;
	sub.s32 	%r1382, %r1377, %r1381;
	shl.b32 	%r118, %r1382, 6;
	add.s32 	%r1383, %r67, %r118;
	mul.wide.s32 	%rd197, %r1383, 4;
	add.s64 	%rd198, %rd26, %rd197;
	st.shared.u32 	[%rd198], %r1314;
	add.s32 	%r1384, %r68, %r118;
	mul.wide.u32 	%rd199, %r1384, 4;
	add.s64 	%rd200, %rd26, %rd199;
	st.shared.u32 	[%rd200], %r1318;
	add.s32 	%r1385, %r69, %r118;
	mul.wide.s32 	%rd201, %r1385, 4;
	add.s64 	%rd202, %rd26, %rd201;
	st.shared.u32 	[%rd202], %r1322;
	add.s32 	%r1386, %r70, %r118;
	mul.wide.u32 	%rd203, %r1386, 4;
	add.s64 	%rd204, %rd26, %rd203;
	st.shared.u32 	[%rd204], %r1326;
	bar.sync 	0;
	mov.u32 	%r3385, %r3342;
	mov.u32 	%r3386, %r3342;
	mov.u32 	%r3387, %r3342;
	mov.u32 	%r3388, %r3342;
	@%p50 bra 	LBB0_42;
	bra.uni 	LBB0_19;
LBB0_42:                                // %oksrem7106
                                        //   in Loop: Header=BB0_18 Depth=2
	ld.shared.u32 	%r3385, [%rd8];
	ld.shared.u32 	%r3386, [%rd9+33024];
	ld.shared.u32 	%r3387, [%rd9+128];
	ld.shared.u32 	%r3388, [%rd9+33152];
LBB0_19:                                // %L17285
                                        //   in Loop: Header=BB0_18 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1419, %r1422}, {%r256, %r253}, {%r3385}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1428, %r1431}, {%r256, %r253}, {%r3386}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1437, %r1440}, {%r256, %r253}, {%r3387}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1446, %r1449}, {%r256, %r253}, {%r3388}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1415, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1417, %r1415, %r1419;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1420, %r291, %r1422, %r1417;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1424, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1426, %r1424, %r1428;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1429, %r291, %r1431, %r1426;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1433, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1435, %r1433, %r1437;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1438, %r291, %r1440, %r1435;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1442, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1444, %r1442, %r1446;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1447, %r291, %r1449, %r1444;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1451, %r294, %r1422;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1454, %r291, %r1419, %r1451;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1458, %r294, %r1431;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1461, %r291, %r1428, %r1458;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1465, %r294, %r1440;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1468, %r291, %r1437, %r1465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1472, %r294, %r1449;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1475, %r291, %r1446, %r1472;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1524, %r1520}, {%r324, %r318, %r321, %r315}, {%r1454, %r1420}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1540, %r1536}, {%r324, %r318, %r321, %r315}, {%r1461, %r1429}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1532, %r1528}, {%r324, %r318, %r321, %r315}, {%r1468, %r1438}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1548, %r1544}, {%r324, %r318, %r321, %r315}, {%r1475, %r1447}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1519, %r1520, %r1520, %r3384;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1523, %r1524, %r1524, %r1519;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1527, %r1528, %r1528, %r1523;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1531, %r1532, %r1532, %r1527;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1535, %r1536, %r1536, %r3383;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1539, %r1540, %r1540, %r1535;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1543, %r1544, %r1544, %r1539;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1547, %r1548, %r1548, %r1543;
	// end inline asm
	mov.u32 	%r3389, %r3342;
	mov.u32 	%r3390, %r3342;
	mov.u32 	%r3391, %r3342;
	mov.u32 	%r3392, %r3342;
	@%p50 bra 	LBB0_43;
	bra.uni 	LBB0_20;
LBB0_43:                                // %oksrem7641
                                        //   in Loop: Header=BB0_18 Depth=2
	add.s32 	%r1552, %r71, %r116;
	mul.wide.s32 	%rd205, %r1552, 4;
	add.s64 	%rd207, %rd26, %rd205;
	ld.shared.u32 	%r3389, [%rd207];
	add.s32 	%r1553, %r72, %r116;
	mul.wide.u32 	%rd208, %r1553, 4;
	add.s64 	%rd209, %rd26, %rd208;
	ld.shared.u32 	%r3390, [%rd209];
	add.s32 	%r1554, %r73, %r116;
	mul.wide.s32 	%rd210, %r1554, 4;
	add.s64 	%rd211, %rd26, %rd210;
	ld.shared.u32 	%r3391, [%rd211];
	add.s32 	%r1555, %r74, %r116;
	mul.wide.u32 	%rd212, %r1555, 4;
	add.s64 	%rd213, %rd26, %rd212;
	ld.shared.u32 	%r3392, [%rd213];
LBB0_20:                                // %L18508
                                        //   in Loop: Header=BB0_18 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1588, %r1591}, {%r256, %r253}, {%r3389}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1597, %r1600}, {%r256, %r253}, {%r3390}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1606, %r1609}, {%r256, %r253}, {%r3391}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1615, %r1618}, {%r256, %r253}, {%r3392}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1584, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1586, %r1584, %r1588;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1589, %r291, %r1591, %r1586;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1593, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1595, %r1593, %r1597;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1598, %r291, %r1600, %r1595;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1602, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1604, %r1602, %r1606;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1607, %r291, %r1609, %r1604;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1611, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1613, %r1611, %r1615;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1616, %r291, %r1618, %r1613;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1620, %r294, %r1591;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1623, %r291, %r1588, %r1620;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1627, %r294, %r1600;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1630, %r291, %r1597, %r1627;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1634, %r294, %r1609;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1637, %r291, %r1606, %r1634;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1641, %r294, %r1618;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1644, %r291, %r1615, %r1641;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1693, %r1689}, {%r324, %r318, %r321, %r315}, {%r1623, %r1589}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1709, %r1705}, {%r324, %r318, %r321, %r315}, {%r1630, %r1598}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1701, %r1697}, {%r324, %r318, %r321, %r315}, {%r1637, %r1607}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1717, %r1713}, {%r324, %r318, %r321, %r315}, {%r1644, %r1616}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1688, %r1689, %r1689, %r1531;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1692, %r1693, %r1693, %r1688;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1696, %r1697, %r1697, %r1692;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1700, %r1701, %r1701, %r1696;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1704, %r1705, %r1705, %r1547;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1708, %r1709, %r1709, %r1704;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1712, %r1713, %r1713, %r1708;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1716, %r1717, %r1717, %r1712;
	// end inline asm
	mov.u32 	%r3393, %r3342;
	mov.u32 	%r3394, %r3342;
	mov.u32 	%r3395, %r3342;
	mov.u32 	%r3396, %r3342;
	@%p50 bra 	LBB0_44;
	bra.uni 	LBB0_21;
LBB0_44:                                // %oksrem8176
                                        //   in Loop: Header=BB0_18 Depth=2
	add.s32 	%r1721, %r71, %r117;
	mul.wide.s32 	%rd214, %r1721, 4;
	add.s64 	%rd216, %rd26, %rd214;
	ld.shared.u32 	%r3393, [%rd216];
	add.s32 	%r1722, %r72, %r117;
	mul.wide.u32 	%rd217, %r1722, 4;
	add.s64 	%rd218, %rd26, %rd217;
	ld.shared.u32 	%r3394, [%rd218];
	add.s32 	%r1723, %r73, %r117;
	mul.wide.s32 	%rd219, %r1723, 4;
	add.s64 	%rd220, %rd26, %rd219;
	ld.shared.u32 	%r3395, [%rd220];
	add.s32 	%r1724, %r74, %r117;
	mul.wide.u32 	%rd221, %r1724, 4;
	add.s64 	%rd222, %rd26, %rd221;
	ld.shared.u32 	%r3396, [%rd222];
LBB0_21:                                // %L19731
                                        //   in Loop: Header=BB0_18 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1757, %r1760}, {%r256, %r253}, {%r3393}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1766, %r1769}, {%r256, %r253}, {%r3394}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1775, %r1778}, {%r256, %r253}, {%r3395}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1784, %r1787}, {%r256, %r253}, {%r3396}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1753, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1755, %r1753, %r1757;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1758, %r291, %r1760, %r1755;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1762, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1764, %r1762, %r1766;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1767, %r291, %r1769, %r1764;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1771, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1773, %r1771, %r1775;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1776, %r291, %r1778, %r1773;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1780, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1782, %r1780, %r1784;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1785, %r291, %r1787, %r1782;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1789, %r294, %r1760;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1792, %r291, %r1757, %r1789;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1796, %r294, %r1769;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1799, %r291, %r1766, %r1796;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1803, %r294, %r1778;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1806, %r291, %r1775, %r1803;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1810, %r294, %r1787;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1813, %r291, %r1784, %r1810;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1862, %r1858}, {%r324, %r318, %r321, %r315}, {%r1792, %r1758}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1878, %r1874}, {%r324, %r318, %r321, %r315}, {%r1799, %r1767}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1870, %r1866}, {%r324, %r318, %r321, %r315}, {%r1806, %r1776}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1886, %r1882}, {%r324, %r318, %r321, %r315}, {%r1813, %r1785}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1857, %r1858, %r1858, %r1700;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1861, %r1862, %r1862, %r1857;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1865, %r1866, %r1866, %r1861;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1869, %r1870, %r1870, %r1865;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1873, %r1874, %r1874, %r1716;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1877, %r1878, %r1878, %r1873;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1881, %r1882, %r1882, %r1877;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1885, %r1886, %r1886, %r1881;
	// end inline asm
	mov.u32 	%r3397, %r3342;
	mov.u32 	%r3398, %r3342;
	mov.u32 	%r3399, %r3342;
	mov.u32 	%r3400, %r3342;
	@%p50 bra 	LBB0_45;
	bra.uni 	LBB0_22;
LBB0_45:                                // %oksrem8711
                                        //   in Loop: Header=BB0_18 Depth=2
	add.s32 	%r1890, %r71, %r118;
	mul.wide.s32 	%rd223, %r1890, 4;
	add.s64 	%rd225, %rd26, %rd223;
	ld.shared.u32 	%r3397, [%rd225];
	add.s32 	%r1891, %r72, %r118;
	mul.wide.u32 	%rd226, %r1891, 4;
	add.s64 	%rd227, %rd26, %rd226;
	ld.shared.u32 	%r3398, [%rd227];
	add.s32 	%r1892, %r73, %r118;
	mul.wide.s32 	%rd228, %r1892, 4;
	add.s64 	%rd229, %rd26, %rd228;
	ld.shared.u32 	%r3399, [%rd229];
	add.s32 	%r1893, %r74, %r118;
	mul.wide.u32 	%rd230, %r1893, 4;
	add.s64 	%rd231, %rd26, %rd230;
	ld.shared.u32 	%r3400, [%rd231];
LBB0_22:                                // %L20954
                                        //   in Loop: Header=BB0_18 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1926, %r1929}, {%r256, %r253}, {%r3397}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1935, %r1938}, {%r256, %r253}, {%r3398}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1944, %r1947}, {%r256, %r253}, {%r3399}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1953, %r1956}, {%r256, %r253}, {%r3400}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1922, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1924, %r1922, %r1926;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1927, %r291, %r1929, %r1924;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1931, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1933, %r1931, %r1935;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1936, %r291, %r1938, %r1933;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1940, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1942, %r1940, %r1944;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1945, %r291, %r1947, %r1942;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1949, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1951, %r1949, %r1953;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1954, %r291, %r1956, %r1951;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1958, %r294, %r1929;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1961, %r291, %r1926, %r1958;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1965, %r294, %r1938;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1968, %r291, %r1935, %r1965;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1972, %r294, %r1947;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1975, %r291, %r1944, %r1972;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1979, %r294, %r1956;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1982, %r291, %r1953, %r1979;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2031, %r2027}, {%r324, %r318, %r321, %r315}, {%r1961, %r1927}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2047, %r2043}, {%r324, %r318, %r321, %r315}, {%r1968, %r1936}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2039, %r2035}, {%r324, %r318, %r321, %r315}, {%r1975, %r1945}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2055, %r2051}, {%r324, %r318, %r321, %r315}, {%r1982, %r1954}, {%r3342, %r3342};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2026, %r2027, %r2027, %r1869;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2030, %r2031, %r2031, %r2026;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2034, %r2035, %r2035, %r2030;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3384, %r2039, %r2039, %r2034;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2042, %r2043, %r2043, %r1885;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2046, %r2047, %r2047, %r2042;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2050, %r2051, %r2051, %r2046;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3383, %r2055, %r2055, %r2050;
	// end inline asm
	add.s32 	%r3381, %r3381, 4;
	setp.ne.s32 	%p60, %r3381, 40;
	@%p60 bra 	LBB0_26;
// %bb.23:                              // %L21100
                                        //   in Loop: Header=BB0_18 Depth=2
	@%p26 bra 	LBB0_25;
// %bb.24:                              // %L21159
                                        //   in Loop: Header=BB0_18 Depth=2
	mul.lo.s32 	%r2058, %r3382, 1152;
	add.s32 	%r2059, %r75, %r2058;
	mul.wide.u32 	%rd232, %r2059, 4;
	add.s64 	%rd233, %rd4, %rd232;
	st.global.u32 	[%rd233], %r3384;
	add.s32 	%r2060, %r76, %r2058;
	mul.wide.u32 	%rd234, %r2060, 4;
	add.s64 	%rd235, %rd4, %rd234;
	st.global.u32 	[%rd235], %r3383;
	bra.uni 	LBB0_25;
LBB0_27:                                // %L21421.preheader
                                        //   in Loop: Header=BB0_16 Depth=1
	add.s32 	%r151, %r82, 25;
	add.s32 	%r152, %r82, 26;
	add.s32 	%r153, %r82, 27;
	mov.u32 	%r2063, 0;
	mov.u32 	%r3405, 12;
	mov.u32 	%r3406, %r2063;
	bra.uni 	LBB0_28;
LBB0_35:                                // %L31396
                                        //   in Loop: Header=BB0_28 Depth=2
	add.s32 	%r3382, %r3382, 1;
	mov.u32 	%r3383, 0;
	mov.u32 	%r3384, %r3383;
	mov.u32 	%r3381, %r3383;
LBB0_36:                                // %L31397
                                        //   in Loop: Header=BB0_28 Depth=2
	bar.sync 	0;
	add.s32 	%r3406, %r3406, 1;
	add.s32 	%r3405, %r3405, -4;
	setp.eq.s32 	%p75, %r3405, -12;
	@%p75 bra 	LBB0_37;
LBB0_28:                                // %L21421
                                        //   Parent Loop BB0_16 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p64, %r3405, 12;
	selp.b32 	%r2601, %r3355, 0, %p64;
	setp.eq.s32 	%p65, %r3405, 8;
	selp.b32 	%r2602, %r3359, %r2601, %p65;
	setp.eq.s32 	%p66, %r3405, 4;
	selp.b32 	%r2603, %r3363, %r2602, %p66;
	setp.eq.s32 	%p67, %r3405, 0;
	selp.b32 	%r2604, %r3367, %r2603, %p67;
	setp.eq.s32 	%p68, %r3405, -4;
	selp.b32 	%r2605, %r3371, %r2604, %p68;
	setp.eq.s32 	%p69, %r3405, -8;
	selp.b32 	%r2606, %r3375, %r2605, %p69;
	selp.b32 	%r2607, %r3356, 0, %p64;
	selp.b32 	%r2608, %r3360, %r2607, %p65;
	selp.b32 	%r2609, %r3364, %r2608, %p66;
	selp.b32 	%r2610, %r3368, %r2609, %p67;
	selp.b32 	%r2611, %r3372, %r2610, %p68;
	selp.b32 	%r2612, %r3376, %r2611, %p69;
	selp.b32 	%r2613, %r3357, 0, %p64;
	selp.b32 	%r2614, %r3361, %r2613, %p65;
	selp.b32 	%r2615, %r3365, %r2614, %p66;
	selp.b32 	%r2616, %r3369, %r2615, %p67;
	selp.b32 	%r2617, %r3373, %r2616, %p68;
	selp.b32 	%r2618, %r3377, %r2617, %p69;
	selp.b32 	%r2619, %r3358, 0, %p64;
	selp.b32 	%r2620, %r3362, %r2619, %p65;
	selp.b32 	%r2621, %r3366, %r2620, %p66;
	selp.b32 	%r2622, %r3370, %r2621, %p67;
	selp.b32 	%r2623, %r3374, %r2622, %p68;
	selp.b32 	%r2624, %r3378, %r2623, %p69;
	// begin inline asm
	mov.b32 %r2091, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	mov.b32 %r2102, {%rs212, %rs212};
	// end inline asm
	shr.u32 	%r2625, %r2606, 8;
	xor.b32  	%r2101, %r2625, 8947848;
	// begin inline asm
	lop3.b32 %r2088, %r935, %r2101, %r2091, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2092, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2093, %r2091, %r2092;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2096, %r2088, %r2093;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2099, %r946, %r2101, %r2102, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2103, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2104, %r2102, %r2103;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2107, %r2099, %r2104;
	// end inline asm
	// begin inline asm
	mov.b32 %r2137, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	mov.b32 %r2148, {%rs212, %rs212};
	// end inline asm
	shr.u32 	%r2626, %r2612, 8;
	xor.b32  	%r2147, %r2626, 8947848;
	// begin inline asm
	lop3.b32 %r2134, %r935, %r2147, %r2137, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2138, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2139, %r2137, %r2138;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2142, %r2134, %r2139;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2145, %r946, %r2147, %r2148, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2149, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2150, %r2148, %r2149;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2153, %r2145, %r2150;
	// end inline asm
	// begin inline asm
	mov.b32 %r2183, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	mov.b32 %r2194, {%rs212, %rs212};
	// end inline asm
	shr.u32 	%r2627, %r2618, 8;
	xor.b32  	%r2193, %r2627, 8947848;
	// begin inline asm
	lop3.b32 %r2180, %r935, %r2193, %r2183, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2184, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2185, %r2183, %r2184;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2188, %r2180, %r2185;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2191, %r946, %r2193, %r2194, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2195, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2196, %r2194, %r2195;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2199, %r2191, %r2196;
	// end inline asm
	// begin inline asm
	mov.b32 %r2229, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	mov.b32 %r2240, {%rs212, %rs212};
	// end inline asm
	shr.u32 	%r2628, %r2624, 8;
	xor.b32  	%r2239, %r2628, 8947848;
	// begin inline asm
	lop3.b32 %r2226, %r935, %r2239, %r2229, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2230, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2231, %r2229, %r2230;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2234, %r2226, %r2231;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2237, %r946, %r2239, %r2240, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2241, {%rs216, %rs216};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2242, %r2240, %r2241;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2245, %r2237, %r2242;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3348;
    mov.b32 {%r2im, %r2re}, %r2096;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2248, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3349;
    mov.b32 {%r2im, %r2re}, %r2107;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2251, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3348;
    mov.b32 {%r2im, %r2re}, %r2142;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2254, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3349;
    mov.b32 {%r2im, %r2re}, %r2153;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2257, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3348;
    mov.b32 {%r2im, %r2re}, %r2188;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2260, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3349;
    mov.b32 {%r2im, %r2re}, %r2199;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2263, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3348;
    mov.b32 {%r2im, %r2re}, %r2234;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2266, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1im, %r1re}, %r3349;
    mov.b32 {%r2im, %r2re}, %r2245;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2269, {%r0im, %r0re};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2332, %r2335}, {%r256, %r253}, {%r2248}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2341, %r2344}, {%r256, %r253}, {%r2251}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2350, %r2353}, {%r256, %r253}, {%r2254}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2359, %r2362}, {%r256, %r253}, {%r2257}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2368, %r2371}, {%r256, %r253}, {%r2260}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2377, %r2380}, {%r256, %r253}, {%r2263}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2386, %r2389}, {%r256, %r253}, {%r2266}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2395, %r2398}, {%r256, %r253}, {%r2269}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2328, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2330, %r2328, %r2332;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2333, %r291, %r2335, %r2330;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2337, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2339, %r2337, %r2341;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2342, %r291, %r2344, %r2339;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2346, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2348, %r2346, %r2350;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2351, %r291, %r2353, %r2348;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2355, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2357, %r2355, %r2359;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2360, %r291, %r2362, %r2357;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2364, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2366, %r2364, %r2368;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2369, %r291, %r2371, %r2366;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2373, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2375, %r2373, %r2377;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2378, %r291, %r2380, %r2375;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2382, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2384, %r2382, %r2386;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2387, %r291, %r2389, %r2384;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2391, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2393, %r2391, %r2395;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2396, %r291, %r2398, %r2393;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2400, %r294, %r2335;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2403, %r291, %r2332, %r2400;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2407, %r294, %r2344;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2410, %r291, %r2341, %r2407;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2414, %r294, %r2353;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2417, %r291, %r2350, %r2414;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2421, %r294, %r2362;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2424, %r291, %r2359, %r2421;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2428, %r294, %r2371;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2431, %r291, %r2368, %r2428;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2435, %r294, %r2380;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2438, %r291, %r2377, %r2435;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2442, %r294, %r2389;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2445, %r291, %r2386, %r2442;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2449, %r294, %r2398;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2452, %r291, %r2395, %r2449;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2537, %r2538}, {%r324, %r318, %r321, %r315}, {%r2403, %r2333}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2545, %r2546}, {%r324, %r318, %r321, %r315}, {%r2410, %r2342}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2553, %r2554}, {%r324, %r318, %r321, %r315}, {%r2417, %r2351}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2561, %r2562}, {%r324, %r318, %r321, %r315}, {%r2424, %r2360}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2569, %r2570}, {%r324, %r318, %r321, %r315}, {%r2431, %r2369}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2577, %r2578}, {%r324, %r318, %r321, %r315}, {%r2438, %r2378}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2585, %r2586}, {%r324, %r318, %r321, %r315}, {%r2445, %r2387}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2593, %r2594}, {%r324, %r318, %r321, %r315}, {%r2452, %r2396}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	prmt.b32 %r2536, %r2537, %r2538, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2540, %r2537, %r2538, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2544, %r2545, %r2546, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2548, %r2545, %r2546, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2552, %r2553, %r2554, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2556, %r2553, %r2554, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2560, %r2561, %r2562, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2564, %r2561, %r2562, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2568, %r2569, %r2570, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2572, %r2569, %r2570, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2576, %r2577, %r2578, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2580, %r2577, %r2578, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2584, %r2585, %r2586, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2588, %r2585, %r2586, %r631;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2592, %r2593, %r2594, %r627;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2596, %r2593, %r2594, %r631;
	// end inline asm
	st.shared.u32 	[%rd6], %r2536;
	st.shared.u32 	[%rd7+33024], %r2540;
	st.shared.u32 	[%rd7+128], %r2544;
	st.shared.u32 	[%rd7+33152], %r2548;
	cvt.u16.u32 	%rs276, %r3406;
	and.b16  	%rs277, %rs276, 255;
	mul.lo.s16 	%rs278, %rs277, 171;
	shr.u16 	%rs279, %rs278, 10;
	mul.lo.s16 	%rs280, %rs279, 6;
	sub.s16 	%rs281, %rs276, %rs280;
	shl.b16 	%rs282, %rs281, 2;
	cvt.u32.u16 	%r2629, %rs282;
	and.b32  	%r2630, %r2629, 252;
	add.s32 	%r2631, %r151, %r2630;
	shr.s32 	%r2632, %r2631, 31;
	shr.u32 	%r2633, %r2632, 30;
	add.s32 	%r2634, %r2631, %r2633;
	and.b32  	%r2635, %r2634, 67108860;
	sub.s32 	%r2636, %r2631, %r2635;
	shl.b32 	%r160, %r2636, 6;
	add.s32 	%r2637, %r67, %r160;
	mul.wide.s32 	%rd236, %r2637, 4;
	add.s64 	%rd238, %rd26, %rd236;
	st.shared.u32 	[%rd238], %r2552;
	add.s32 	%r2638, %r68, %r160;
	mul.wide.u32 	%rd239, %r2638, 4;
	add.s64 	%rd240, %rd26, %rd239;
	st.shared.u32 	[%rd240], %r2556;
	add.s32 	%r2639, %r69, %r160;
	mul.wide.s32 	%rd241, %r2639, 4;
	add.s64 	%rd242, %rd26, %rd241;
	st.shared.u32 	[%rd242], %r2560;
	add.s32 	%r2640, %r70, %r160;
	mul.wide.u32 	%rd243, %r2640, 4;
	add.s64 	%rd244, %rd26, %rd243;
	st.shared.u32 	[%rd244], %r2564;
	add.s32 	%r2641, %r152, %r2630;
	shr.s32 	%r2642, %r2641, 31;
	shr.u32 	%r2643, %r2642, 30;
	add.s32 	%r2644, %r2641, %r2643;
	and.b32  	%r2645, %r2644, 67108860;
	sub.s32 	%r2646, %r2641, %r2645;
	shl.b32 	%r161, %r2646, 6;
	add.s32 	%r2647, %r67, %r161;
	mul.wide.s32 	%rd245, %r2647, 4;
	add.s64 	%rd246, %rd26, %rd245;
	st.shared.u32 	[%rd246], %r2568;
	add.s32 	%r2648, %r68, %r161;
	mul.wide.u32 	%rd247, %r2648, 4;
	add.s64 	%rd248, %rd26, %rd247;
	st.shared.u32 	[%rd248], %r2572;
	add.s32 	%r2649, %r69, %r161;
	mul.wide.s32 	%rd249, %r2649, 4;
	add.s64 	%rd250, %rd26, %rd249;
	st.shared.u32 	[%rd250], %r2576;
	add.s32 	%r2650, %r70, %r161;
	mul.wide.u32 	%rd251, %r2650, 4;
	add.s64 	%rd252, %rd26, %rd251;
	st.shared.u32 	[%rd252], %r2580;
	add.s32 	%r2651, %r153, %r2630;
	shr.s32 	%r2652, %r2651, 31;
	shr.u32 	%r2653, %r2652, 30;
	add.s32 	%r2654, %r2651, %r2653;
	and.b32  	%r2655, %r2654, 67108860;
	sub.s32 	%r2656, %r2651, %r2655;
	shl.b32 	%r162, %r2656, 6;
	add.s32 	%r2657, %r67, %r162;
	mul.wide.s32 	%rd253, %r2657, 4;
	add.s64 	%rd254, %rd26, %rd253;
	st.shared.u32 	[%rd254], %r2584;
	add.s32 	%r2658, %r68, %r162;
	mul.wide.u32 	%rd255, %r2658, 4;
	add.s64 	%rd256, %rd26, %rd255;
	st.shared.u32 	[%rd256], %r2588;
	add.s32 	%r2659, %r69, %r162;
	mul.wide.s32 	%rd257, %r2659, 4;
	add.s64 	%rd258, %rd26, %rd257;
	st.shared.u32 	[%rd258], %r2592;
	add.s32 	%r2660, %r70, %r162;
	mul.wide.u32 	%rd259, %r2660, 4;
	add.s64 	%rd260, %rd26, %rd259;
	st.shared.u32 	[%rd260], %r2596;
	bar.sync 	0;
	mov.u32 	%r3411, %r2063;
	mov.u32 	%r3412, %r2063;
	mov.u32 	%r3413, %r2063;
	mov.u32 	%r3414, %r2063;
	@%p50 bra 	LBB0_46;
	bra.uni 	LBB0_29;
LBB0_46:                                // %oksrem11504
                                        //   in Loop: Header=BB0_28 Depth=2
	ld.shared.u32 	%r3414, [%rd8];
	ld.shared.u32 	%r3413, [%rd9+33024];
	ld.shared.u32 	%r3412, [%rd9+128];
	ld.shared.u32 	%r3411, [%rd9+33152];
LBB0_29:                                // %L27290
                                        //   in Loop: Header=BB0_28 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2693, %r2696}, {%r256, %r253}, {%r3414}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2702, %r2705}, {%r256, %r253}, {%r3413}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2711, %r2714}, {%r256, %r253}, {%r3412}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2720, %r2723}, {%r256, %r253}, {%r3411}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2689, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2691, %r2689, %r2693;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2694, %r291, %r2696, %r2691;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2698, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2700, %r2698, %r2702;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2703, %r291, %r2705, %r2700;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2707, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2709, %r2707, %r2711;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2712, %r291, %r2714, %r2709;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2716, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2718, %r2716, %r2720;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2721, %r291, %r2723, %r2718;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2725, %r294, %r2696;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2728, %r291, %r2693, %r2725;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2732, %r294, %r2705;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2735, %r291, %r2702, %r2732;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2739, %r294, %r2714;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2742, %r291, %r2711, %r2739;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2746, %r294, %r2723;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2749, %r291, %r2720, %r2746;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2798, %r2794}, {%r324, %r318, %r321, %r315}, {%r2728, %r2694}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2814, %r2810}, {%r324, %r318, %r321, %r315}, {%r2735, %r2703}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2806, %r2802}, {%r324, %r318, %r321, %r315}, {%r2742, %r2712}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2822, %r2818}, {%r324, %r318, %r321, %r315}, {%r2749, %r2721}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2793, %r2794, %r2794, %r3384;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2797, %r2798, %r2798, %r2793;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2801, %r2802, %r2802, %r2797;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2805, %r2806, %r2806, %r2801;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2809, %r2810, %r2810, %r3383;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2813, %r2814, %r2814, %r2809;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2817, %r2818, %r2818, %r2813;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2821, %r2822, %r2822, %r2817;
	// end inline asm
	mov.u32 	%r3415, %r2063;
	mov.u32 	%r3416, %r2063;
	mov.u32 	%r3417, %r2063;
	mov.u32 	%r3418, %r2063;
	@%p50 bra 	LBB0_47;
	bra.uni 	LBB0_30;
LBB0_47:                                // %oksrem12039
                                        //   in Loop: Header=BB0_28 Depth=2
	add.s32 	%r2826, %r71, %r160;
	mul.wide.s32 	%rd261, %r2826, 4;
	add.s64 	%rd263, %rd26, %rd261;
	ld.shared.u32 	%r3418, [%rd263];
	add.s32 	%r2827, %r72, %r160;
	mul.wide.u32 	%rd264, %r2827, 4;
	add.s64 	%rd265, %rd26, %rd264;
	ld.shared.u32 	%r3417, [%rd265];
	add.s32 	%r2828, %r73, %r160;
	mul.wide.s32 	%rd266, %r2828, 4;
	add.s64 	%rd267, %rd26, %rd266;
	ld.shared.u32 	%r3416, [%rd267];
	add.s32 	%r2829, %r74, %r160;
	mul.wide.u32 	%rd268, %r2829, 4;
	add.s64 	%rd269, %rd26, %rd268;
	ld.shared.u32 	%r3415, [%rd269];
LBB0_30:                                // %L28513
                                        //   in Loop: Header=BB0_28 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2862, %r2865}, {%r256, %r253}, {%r3418}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2871, %r2874}, {%r256, %r253}, {%r3417}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2880, %r2883}, {%r256, %r253}, {%r3416}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2889, %r2892}, {%r256, %r253}, {%r3415}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2858, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2860, %r2858, %r2862;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2863, %r291, %r2865, %r2860;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2867, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2869, %r2867, %r2871;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2872, %r291, %r2874, %r2869;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2876, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2878, %r2876, %r2880;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2881, %r291, %r2883, %r2878;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2885, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2887, %r2885, %r2889;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2890, %r291, %r2892, %r2887;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2894, %r294, %r2865;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2897, %r291, %r2862, %r2894;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2901, %r294, %r2874;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2904, %r291, %r2871, %r2901;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2908, %r294, %r2883;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2911, %r291, %r2880, %r2908;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2915, %r294, %r2892;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2918, %r291, %r2889, %r2915;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2967, %r2963}, {%r324, %r318, %r321, %r315}, {%r2897, %r2863}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2983, %r2979}, {%r324, %r318, %r321, %r315}, {%r2904, %r2872}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2975, %r2971}, {%r324, %r318, %r321, %r315}, {%r2911, %r2881}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2991, %r2987}, {%r324, %r318, %r321, %r315}, {%r2918, %r2890}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2962, %r2963, %r2963, %r2805;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2966, %r2967, %r2967, %r2962;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2970, %r2971, %r2971, %r2966;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2974, %r2975, %r2975, %r2970;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2978, %r2979, %r2979, %r2821;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2982, %r2983, %r2983, %r2978;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2986, %r2987, %r2987, %r2982;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2990, %r2991, %r2991, %r2986;
	// end inline asm
	mov.u32 	%r3419, %r2063;
	mov.u32 	%r3420, %r2063;
	mov.u32 	%r3421, %r2063;
	mov.u32 	%r3422, %r2063;
	@%p50 bra 	LBB0_48;
	bra.uni 	LBB0_31;
LBB0_48:                                // %oksrem12574
                                        //   in Loop: Header=BB0_28 Depth=2
	add.s32 	%r2995, %r71, %r161;
	mul.wide.s32 	%rd270, %r2995, 4;
	add.s64 	%rd272, %rd26, %rd270;
	ld.shared.u32 	%r3422, [%rd272];
	add.s32 	%r2996, %r72, %r161;
	mul.wide.u32 	%rd273, %r2996, 4;
	add.s64 	%rd274, %rd26, %rd273;
	ld.shared.u32 	%r3421, [%rd274];
	add.s32 	%r2997, %r73, %r161;
	mul.wide.s32 	%rd275, %r2997, 4;
	add.s64 	%rd276, %rd26, %rd275;
	ld.shared.u32 	%r3420, [%rd276];
	add.s32 	%r2998, %r74, %r161;
	mul.wide.u32 	%rd277, %r2998, 4;
	add.s64 	%rd278, %rd26, %rd277;
	ld.shared.u32 	%r3419, [%rd278];
LBB0_31:                                // %L29736
                                        //   in Loop: Header=BB0_28 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3031, %r3034}, {%r256, %r253}, {%r3422}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3040, %r3043}, {%r256, %r253}, {%r3421}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3049, %r3052}, {%r256, %r253}, {%r3420}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3058, %r3061}, {%r256, %r253}, {%r3419}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3027, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3029, %r3027, %r3031;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3032, %r291, %r3034, %r3029;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3036, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3038, %r3036, %r3040;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3041, %r291, %r3043, %r3038;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3045, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3047, %r3045, %r3049;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3050, %r291, %r3052, %r3047;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3054, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3056, %r3054, %r3058;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3059, %r291, %r3061, %r3056;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3063, %r294, %r3034;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3066, %r291, %r3031, %r3063;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3070, %r294, %r3043;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3073, %r291, %r3040, %r3070;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3077, %r294, %r3052;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3080, %r291, %r3049, %r3077;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3084, %r294, %r3061;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3087, %r291, %r3058, %r3084;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3136, %r3132}, {%r324, %r318, %r321, %r315}, {%r3066, %r3032}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3152, %r3148}, {%r324, %r318, %r321, %r315}, {%r3073, %r3041}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3144, %r3140}, {%r324, %r318, %r321, %r315}, {%r3080, %r3050}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3160, %r3156}, {%r324, %r318, %r321, %r315}, {%r3087, %r3059}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3131, %r3132, %r3132, %r2974;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3135, %r3136, %r3136, %r3131;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3139, %r3140, %r3140, %r3135;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3143, %r3144, %r3144, %r3139;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3147, %r3148, %r3148, %r2990;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3151, %r3152, %r3152, %r3147;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3155, %r3156, %r3156, %r3151;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3159, %r3160, %r3160, %r3155;
	// end inline asm
	mov.u32 	%r3423, %r2063;
	mov.u32 	%r3424, %r2063;
	mov.u32 	%r3425, %r2063;
	mov.u32 	%r3426, %r2063;
	@%p50 bra 	LBB0_49;
	bra.uni 	LBB0_32;
LBB0_49:                                // %oksrem13109
                                        //   in Loop: Header=BB0_28 Depth=2
	add.s32 	%r3164, %r71, %r162;
	mul.wide.s32 	%rd279, %r3164, 4;
	add.s64 	%rd281, %rd26, %rd279;
	ld.shared.u32 	%r3426, [%rd281];
	add.s32 	%r3165, %r72, %r162;
	mul.wide.u32 	%rd282, %r3165, 4;
	add.s64 	%rd283, %rd26, %rd282;
	ld.shared.u32 	%r3425, [%rd283];
	add.s32 	%r3166, %r73, %r162;
	mul.wide.s32 	%rd284, %r3166, 4;
	add.s64 	%rd285, %rd26, %rd284;
	ld.shared.u32 	%r3424, [%rd285];
	add.s32 	%r3167, %r74, %r162;
	mul.wide.u32 	%rd286, %r3167, 4;
	add.s64 	%rd287, %rd26, %rd286;
	ld.shared.u32 	%r3423, [%rd287];
LBB0_32:                                // %L30959
                                        //   in Loop: Header=BB0_28 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3200, %r3203}, {%r256, %r253}, {%r3426}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3209, %r3212}, {%r256, %r253}, {%r3425}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3218, %r3221}, {%r256, %r253}, {%r3424}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3227, %r3230}, {%r256, %r253}, {%r3423}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3196, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3198, %r3196, %r3200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3201, %r291, %r3203, %r3198;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3205, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3207, %r3205, %r3209;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3210, %r291, %r3212, %r3207;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3214, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3216, %r3214, %r3218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3219, %r291, %r3221, %r3216;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3223, %r294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3225, %r3223, %r3227;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3228, %r291, %r3230, %r3225;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3232, %r294, %r3203;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3235, %r291, %r3200, %r3232;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3239, %r294, %r3212;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3242, %r291, %r3209, %r3239;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3246, %r294, %r3221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3249, %r291, %r3218, %r3246;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3253, %r294, %r3230;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3256, %r291, %r3227, %r3253;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3305, %r3301}, {%r324, %r318, %r321, %r315}, {%r3235, %r3201}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3321, %r3317}, {%r324, %r318, %r321, %r315}, {%r3242, %r3210}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3313, %r3309}, {%r324, %r318, %r321, %r315}, {%r3249, %r3219}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3329, %r3325}, {%r324, %r318, %r321, %r315}, {%r3256, %r3228}, {%r2063, %r2063};
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3300, %r3301, %r3301, %r3143;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3304, %r3305, %r3305, %r3300;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3308, %r3309, %r3309, %r3304;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3384, %r3313, %r3313, %r3308;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3316, %r3317, %r3317, %r3159;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3320, %r3321, %r3321, %r3316;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3324, %r3325, %r3325, %r3320;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3383, %r3329, %r3329, %r3324;
	// end inline asm
	add.s32 	%r3381, %r3381, 4;
	setp.ne.s32 	%p73, %r3381, 40;
	@%p73 bra 	LBB0_36;
// %bb.33:                              // %L31105
                                        //   in Loop: Header=BB0_28 Depth=2
	@%p26 bra 	LBB0_35;
// %bb.34:                              // %L31164
                                        //   in Loop: Header=BB0_28 Depth=2
	mul.lo.s32 	%r3332, %r3382, 1152;
	add.s32 	%r3333, %r75, %r3332;
	mul.wide.u32 	%rd288, %r3333, 4;
	add.s64 	%rd289, %rd4, %rd288;
	st.global.u32 	[%rd289], %r3384;
	add.s32 	%r3334, %r76, %r3332;
	mul.wide.u32 	%rd290, %r3334, 4;
	add.s64 	%rd291, %rd4, %rd290;
	st.global.u32 	[%rd291], %r3383;
	bra.uni 	LBB0_35;
LBB0_38:                                // %guard_pass14638
	@%p26 bra 	LBB0_40;
// %bb.39:                              // %L31498
	mul.lo.s32 	%r3336, %r3382, 1152;
	add.s32 	%r3337, %r75, %r3336;
	mul.wide.u32 	%rd292, %r3337, 4;
	add.s64 	%rd293, %rd4, %rd292;
	st.global.u32 	[%rd293], %r3384;
	add.s32 	%r3338, %r76, %r3336;
	mul.wide.u32 	%rd294, %r3338, 4;
	add.s64 	%rd295, %rd4, %rd294;
	st.global.u32 	[%rd295], %r3383;
LBB0_40:                                // %L31730
	mov.u32 	%r3339, 0;
	st.global.u32 	[%rd5], %r3339;
	ret;
LBB0_1:                                 // %L8
	ld.param.u64 	%rd11, [_Z15julia_frb_1037413CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0];
	mov.u64 	%rd16, exception1;
	cvta.global.u64 	%rd17, %rd16;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd17;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[8];
	st.param.b64 	[param0+0], %rd11;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
