// PTX kernel code for the CUDA upchannelizer
// This file has been generated automatically by `upchan.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for upchan(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception3413[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<239>;
	.reg .b16 	%rs<1185>;
	.reg .b32 	%r<8015>;
	.reg .f32 	%f<832>;
	.reg .b64 	%rd<149>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r167, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd35, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r174, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r174, 66815;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd36, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u32 	%r168, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r4, %ctaid.x;
	shl.b32 	%r175, %r4, 9;
	or.b32  	%r176, %r2, %r3;
	or.b32  	%r177, %r176, %r175;
	mul.wide.u32 	%rd42, %r177, 4;
	add.s64 	%rd4, %rd36, %rd42;
	mov.u32 	%r178, 1;
	st.global.u32 	[%rd4], %r178;
	setp.gt.u32 	%p2, %r168, 32767;
	@%p2 bra 	$L__BB0_7;
// %bb.3:                               // %L120
	ld.param.u32 	%r169, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p3, %r169, %r168;
	setp.gt.s32 	%p4, %r169, 65535;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_7;
// %bb.4:                               // %L127
	ld.param.u32 	%r170, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r179, %r169, %r168;
	and.b32  	%r180, %r179, 255;
	setp.ne.s32 	%p6, %r180, 0;
	setp.gt.u32 	%p7, %r170, 511;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L138
	ld.param.u32 	%r171, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.lt.s32 	%p9, %r171, %r170;
	setp.gt.s32 	%p10, %r171, 1023;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L145
	not.b32 	%r181, %r170;
	add.s32 	%r182, %r181, %r171;
	and.b32  	%r183, %r182, 3;
	setp.eq.s32 	%p12, %r183, 0;
	@%p12 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_7;
$L__BB0_8:                              // %L260
	ld.param.u32 	%r172, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p13, %r172, 0;
	@%p13 bra 	$L__BB0_10;
// %bb.9:                               // %L262
	ld.param.u32 	%r173, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.le.s32 	%p14, %r172, %r173;
	setp.lt.s32 	%p15, %r173, 65;
	and.pred  	%p16, %p14, %p15;
	@%p16 bra 	$L__BB0_11;
	bra.uni 	$L__BB0_10;
$L__BB0_11:                             // %pass189
	bfe.u32 	%r115, %r3, 2, 1;
	shr.u32 	%r116, %r3, 4;
	shl.b32 	%r190, %r116, 1;
	shl.b32 	%r191, %r115, 2;
	shl.b32 	%r117, %r3, 3;
	and.b32  	%r192, %r117, 24;
	or.b32  	%r193, %r191, %r192;
	or.b32  	%r194, %r190, %r193;
	bfe.u32 	%r195, %r3, 3, 1;
	or.b32  	%r119, %r195, %r194;
	or.b32  	%r120, %r119, 32;
	mov.f32 	%f145, 0f40000000;
	mov.f32 	%f146, 0f437F0000;
	div.approx.f32 	%f85, %f146, %f145;
	cvt.rn.f32.s32 	%f147, %r119;
	sub.f32 	%f148, %f147, %f85;
	mov.f32 	%f177, 0f42800000;
	div.approx.f32 	%f87, %f148, %f177;
	setp.ne.f32 	%p22, %f87, 0f00000000;
	mov.f32 	%f807, 0f3F800000;
	mov.f32 	%f800, %f807;
	@%p22 bra 	$L__BB0_12;
	bra.uni 	$L__BB0_13;
$L__BB0_12:                             // %L602
	sin.approx.f32 	%f178, %f87;
	div.approx.f32 	%f800, %f178, %f87;
$L__BB0_13:                             // %L605
	cvt.rn.f32.s32 	%f181, %r120;
	sub.f32 	%f182, %f181, %f85;
	div.approx.f32 	%f5, %f182, %f177;
	setp.eq.f32 	%p28, %f5, 0f00000000;
	mov.f32 	%f801, %f807;
	@%p28 bra 	$L__BB0_15;
// %bb.14:                              // %L622
	sin.approx.f32 	%f212, %f5;
	div.approx.f32 	%f801, %f212, %f5;
$L__BB0_15:                             // %L625
	or.b32  	%r213, %r119, 64;
	or.b32  	%r6, %r119, 96;
	cvt.rn.f32.s32 	%f216, %r213;
	sub.f32 	%f217, %f216, %f85;
	div.approx.f32 	%f9, %f217, %f177;
	setp.eq.f32 	%p34, %f9, 0f00000000;
	mov.f32 	%f802, %f807;
	@%p34 bra 	$L__BB0_17;
// %bb.16:                              // %L704
	sin.approx.f32 	%f247, %f9;
	div.approx.f32 	%f802, %f247, %f9;
$L__BB0_17:                             // %L707
	cvt.rn.f32.s32 	%f250, %r6;
	sub.f32 	%f251, %f250, %f85;
	div.approx.f32 	%f14, %f251, %f177;
	setp.eq.f32 	%p40, %f14, 0f00000000;
	mov.f32 	%f803, %f807;
	@%p40 bra 	$L__BB0_19;
// %bb.18:                              // %L724
	sin.approx.f32 	%f281, %f14;
	div.approx.f32 	%f803, %f281, %f14;
$L__BB0_19:                             // %L727
	or.b32  	%r231, %r119, 128;
	or.b32  	%r8, %r119, 160;
	cvt.rn.f32.s32 	%f285, %r231;
	sub.f32 	%f286, %f285, %f85;
	div.approx.f32 	%f18, %f286, %f177;
	setp.eq.f32 	%p46, %f18, 0f00000000;
	mov.f32 	%f804, %f807;
	@%p46 bra 	$L__BB0_21;
// %bb.20:                              // %L806
	sin.approx.f32 	%f316, %f18;
	div.approx.f32 	%f804, %f316, %f18;
$L__BB0_21:                             // %L809
	cvt.rn.f32.s32 	%f319, %r8;
	sub.f32 	%f320, %f319, %f85;
	div.approx.f32 	%f23, %f320, %f177;
	setp.eq.f32 	%p52, %f23, 0f00000000;
	mov.f32 	%f805, %f807;
	@%p52 bra 	$L__BB0_23;
// %bb.22:                              // %L826
	sin.approx.f32 	%f350, %f23;
	div.approx.f32 	%f805, %f350, %f23;
$L__BB0_23:                             // %L829
	or.b32  	%r249, %r119, 192;
	or.b32  	%r10, %r119, 224;
	cvt.rn.f32.s32 	%f354, %r249;
	sub.f32 	%f355, %f354, %f85;
	div.approx.f32 	%f27, %f355, %f177;
	setp.eq.f32 	%p58, %f27, 0f00000000;
	mov.f32 	%f806, %f807;
	@%p58 bra 	$L__BB0_25;
// %bb.24:                              // %L908
	sin.approx.f32 	%f385, %f27;
	div.approx.f32 	%f806, %f385, %f27;
$L__BB0_25:                             // %L911
	shr.u32 	%r114, %r3, 1;
	shr.u32 	%r118, %r3, 3;
	cvt.rn.f32.s32 	%f388, %r10;
	sub.f32 	%f389, %f388, %f85;
	div.approx.f32 	%f32, %f389, %f177;
	setp.eq.f32 	%p64, %f32, 0f00000000;
	@%p64 bra 	$L__BB0_27;
// %bb.26:                              // %L928
	sin.approx.f32 	%f419, %f32;
	div.approx.f32 	%f807, %f419, %f32;
$L__BB0_27:                             // %L931
	and.b32  	%r293, %r3, 3;
	and.b32  	%r294, %r118, 2;
	and.b32  	%r295, %r114, 4;
	or.b32  	%r296, %r115, %r294;
	or.b32  	%r14, %r296, %r295;
	mul.lo.s32 	%r297, %r293, %r14;
	shl.b32 	%r298, %r297, 1;
	neg.s32 	%r299, %r298;
	cvt.rn.f32.s32 	%f35, %r299;
	mov.f32 	%f490, 0f41000000;
	div.approx.f32 	%f36, %f35, %f490;
	abs.f32 	%f830, %f36;
	setp.lt.f32 	%p79, %f830, 0f40000000;
	setp.gtu.f32 	%p237, %f830, 0f4B800000;
	mov.f32 	%f822, %f830;
	@%p79 bra 	$L__BB0_100;
// %bb.28:
	@%p237 bra 	$L__BB0_96;
	bra.uni 	$L__BB0_29;
$L__BB0_96:
	mov.b32 	%r122, %f830;
	and.b32  	%r300, %r122, 8388607;
	or.b32  	%r8009, %r300, 1065353216;
	mov.b32 	%f821, %r8009;
	add.s32 	%r301, %r122, -1073741824;
	and.b32  	%r8010, %r301, -8388608;
	setp.eq.s32 	%p86, %r8010, 0;
	@%p86 bra 	$L__BB0_99;
// %bb.97:                              // %__nv_fmaf_rn.exit4.i.i.i923.preheader
	mov.f32 	%f500, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f499,%f500;
	// end inline asm
$L__BB0_98:                             // %__nv_fmaf_rn.exit4.i.i.i923
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r302, %r8010, 192937984;
	add.s32 	%r303, %r8009, %r302;
	mov.b32 	%f501, %r303;
	mul.f32 	%f502, %f499, %f501;
	sub.f32 	%f503, %f501, %f502;
	fma.rn.f32 	%f504, %f503, %f499, %f502;
	sub.f32 	%f505, %f501, %f504;
	fma.rz.f32 	%f506, %f505, %f499, %f504;
	cvt.rzi.f32.f32 	%f507, %f506;
	sub.f32 	%f821, %f501, %f507;
	sub.s32 	%r8010, %r8010, %r302;
	mov.b32 	%r8009, %f821;
	setp.ne.s32 	%p87, %r8010, 0;
	setp.ne.s32 	%p88, %r8009, 0;
	and.pred  	%p89, %p87, %p88;
	@%p89 bra 	$L__BB0_98;
$L__BB0_99:                             // %__internal_fmodf_slowpath_mod.exit.i.i925
	setp.gt.u32 	%p90, %r122, 2139095039;
	selp.f32 	%f508, 0f7FFFFFFF, 0f4B800000, %p90;
	mul.f32 	%f509, %f821, 0f34000000;
	mul.f32 	%f822, %f508, %f509;
	bra.uni 	$L__BB0_100;
$L__BB0_29:                             // %__nv_fast_fdividef.exit.i.i.i902
	div.approx.f32 	%f492, %f830, %f145;
	cvt.rzi.f32.f32 	%f820, %f492;
	fma.rn.f32 	%f89, %f820, 0fC0000000, %f830;
	mov.b32 	%r121, %f89;
	setp.lt.u32 	%p81, %r121, 1073741824;
	@%p81 bra 	$L__BB0_95;
// %bb.30:
	setp.lt.u32 	%p82, %r121, -2147483647;
	@%p82 bra 	$L__BB0_93;
// %bb.31:
	add.f32 	%f497, %f820, 0fBF800000;
	setp.lt.f32 	%p85, %f89, 0fC0000000;
	add.f32 	%f498, %f497, 0fBF800000;
	selp.f32 	%f820, %f498, %f497, %p85;
	bra.uni 	$L__BB0_95;
$L__BB0_93:
	add.f32 	%f820, %f820, 0f3F800000;
	setp.ltu.f32 	%p83, %f89, 0f40800000;
	@%p83 bra 	$L__BB0_95;
// %bb.94:                              // %__nv_fmaf_rn.exit.i.i.i906
	add.f32 	%f493, %f820, 0f3F800000;
	fma.rn.f32 	%f495, %f145, 0fC0400000, %f89;
	setp.ge.f32 	%p84, %f495, 0f00000000;
	add.f32 	%f496, %f493, 0f3F800000;
	selp.f32 	%f820, %f496, %f493, %p84;
$L__BB0_95:                             // %__internal_fmodf_fastpath_quot.exit.i.i909
	fma.rn.f32 	%f822, %f820, 0fC0000000, %f830;
$L__BB0_100:                            // %__internal_fmodf_kernel.exit.i928
	shl.b32 	%r110, %r3, 1;
	abs.f32 	%f510, %f822;
	setp.gtu.f32 	%p91, %f510, 0f7F800000;
	mov.b32 	%r304, %f36;
	and.b32  	%r129, %r304, -2147483648;
	@%p91 bra 	$L__BB0_102;
// %bb.101:
	mov.b32 	%r305, %f822;
	or.b32  	%r306, %r129, %r305;
	mov.b32 	%f822, %r306;
$L__BB0_102:                            // %__nv_fmodf.exit929
	and.b32  	%r315, %r110, 6;
	mov.u32 	%r316, -8;
	sub.s32 	%r317, %r316, %r315;
	mul.lo.s32 	%r318, %r14, %r317;
	cvt.rn.f32.s32 	%f105, %r318;
	div.approx.f32 	%f106, %f105, %f490;
	abs.f32 	%f818, %f106;
	setp.lt.f32 	%p99, %f818, 0f40000000;
	setp.gtu.f32 	%p238, %f818, 0f4B800000;
	mov.f32 	%f810, %f818;
	@%p99 bra 	$L__BB0_43;
// %bb.32:
	@%p238 bra 	$L__BB0_39;
	bra.uni 	$L__BB0_33;
$L__BB0_39:
	mov.b32 	%r16, %f818;
	and.b32  	%r319, %r16, 8388607;
	or.b32  	%r7976, %r319, 1065353216;
	mov.b32 	%f809, %r7976;
	add.s32 	%r320, %r16, -1073741824;
	and.b32  	%r7977, %r320, -8388608;
	setp.eq.s32 	%p106, %r7977, 0;
	@%p106 bra 	$L__BB0_42;
// %bb.40:                              // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f551, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f550,%f551;
	// end inline asm
$L__BB0_41:                             // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r321, %r7977, 192937984;
	add.s32 	%r322, %r7976, %r321;
	mov.b32 	%f552, %r322;
	mul.f32 	%f553, %f550, %f552;
	sub.f32 	%f554, %f552, %f553;
	fma.rn.f32 	%f555, %f554, %f550, %f553;
	sub.f32 	%f556, %f552, %f555;
	fma.rz.f32 	%f557, %f556, %f550, %f555;
	cvt.rzi.f32.f32 	%f558, %f557;
	sub.f32 	%f809, %f552, %f558;
	sub.s32 	%r7977, %r7977, %r321;
	mov.b32 	%r7976, %f809;
	setp.ne.s32 	%p107, %r7977, 0;
	setp.ne.s32 	%p108, %r7976, 0;
	and.pred  	%p109, %p107, %p108;
	@%p109 bra 	$L__BB0_41;
$L__BB0_42:                             // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p110, %r16, 2139095039;
	selp.f32 	%f559, 0f7FFFFFFF, 0f4B800000, %p110;
	mul.f32 	%f560, %f809, 0f34000000;
	mul.f32 	%f810, %f559, %f560;
	bra.uni 	$L__BB0_43;
$L__BB0_33:                             // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f543, %f818, %f145;
	cvt.rzi.f32.f32 	%f808, %f543;
	fma.rn.f32 	%f39, %f808, 0fC0000000, %f818;
	mov.b32 	%r15, %f39;
	setp.lt.u32 	%p101, %r15, 1073741824;
	@%p101 bra 	$L__BB0_38;
// %bb.34:
	setp.lt.u32 	%p102, %r15, -2147483647;
	@%p102 bra 	$L__BB0_36;
// %bb.35:
	add.f32 	%f548, %f808, 0fBF800000;
	setp.lt.f32 	%p105, %f39, 0fC0000000;
	add.f32 	%f549, %f548, 0fBF800000;
	selp.f32 	%f808, %f549, %f548, %p105;
	bra.uni 	$L__BB0_38;
$L__BB0_36:
	add.f32 	%f808, %f808, 0f3F800000;
	setp.ltu.f32 	%p103, %f39, 0f40800000;
	@%p103 bra 	$L__BB0_38;
// %bb.37:                              // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f544, %f808, 0f3F800000;
	fma.rn.f32 	%f546, %f145, 0fC0400000, %f39;
	setp.ge.f32 	%p104, %f546, 0f00000000;
	add.f32 	%f547, %f544, 0f3F800000;
	selp.f32 	%f808, %f547, %f544, %p104;
$L__BB0_38:                             // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f810, %f808, 0fC0000000, %f818;
$L__BB0_43:                             // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f561, %f810;
	setp.gtu.f32 	%p111, %f561, 0f7F800000;
	mov.b32 	%r323, %f106;
	and.b32  	%r23, %r323, -2147483648;
	@%p111 bra 	$L__BB0_45;
// %bb.44:
	mov.b32 	%r324, %f810;
	or.b32  	%r325, %r23, %r324;
	mov.b32 	%f810, %r325;
$L__BB0_45:                             // %__nv_fmodf.exit
	div.approx.f32 	%f53, %f35, %f177;
	abs.f32 	%f826, %f53;
	setp.lt.f32 	%p119, %f826, 0f40000000;
	@%p119 bra 	$L__BB0_110;
// %bb.46:
	setp.gtu.f32 	%p120, %f826, 0f4B800000;
	@%p120 bra 	$L__BB0_106;
	bra.uni 	$L__BB0_47;
$L__BB0_106:
	mov.b32 	%r131, %f826;
	and.b32  	%r346, %r131, 8388607;
	or.b32  	%r8011, %r346, 1065353216;
	mov.b32 	%f825, %r8011;
	add.s32 	%r347, %r131, -1073741824;
	and.b32  	%r8012, %r347, -8388608;
	setp.eq.s32 	%p126, %r8012, 0;
	@%p126 bra 	$L__BB0_109;
// %bb.107:                             // %__nv_fmaf_rn.exit4.i.i.i954.preheader
	mov.f32 	%f604, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f603,%f604;
	// end inline asm
$L__BB0_108:                            // %__nv_fmaf_rn.exit4.i.i.i954
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r348, %r8012, 192937984;
	add.s32 	%r349, %r8011, %r348;
	mov.b32 	%f605, %r349;
	mul.f32 	%f606, %f603, %f605;
	sub.f32 	%f607, %f605, %f606;
	fma.rn.f32 	%f608, %f607, %f603, %f606;
	sub.f32 	%f609, %f605, %f608;
	fma.rz.f32 	%f610, %f609, %f603, %f608;
	cvt.rzi.f32.f32 	%f611, %f610;
	sub.f32 	%f825, %f605, %f611;
	sub.s32 	%r8012, %r8012, %r348;
	mov.b32 	%r8011, %f825;
	setp.ne.s32 	%p127, %r8012, 0;
	setp.ne.s32 	%p128, %r8011, 0;
	and.pred  	%p129, %p127, %p128;
	@%p129 bra 	$L__BB0_108;
$L__BB0_109:                            // %__internal_fmodf_slowpath_mod.exit.i.i956
	setp.gt.u32 	%p130, %r131, 2139095039;
	selp.f32 	%f612, 0f7FFFFFFF, 0f4B800000, %p130;
	mul.f32 	%f613, %f825, 0f34000000;
	mul.f32 	%f826, %f612, %f613;
	bra.uni 	$L__BB0_110;
$L__BB0_47:                             // %__nv_fast_fdividef.exit.i.i.i933
	div.approx.f32 	%f596, %f826, %f145;
	cvt.rzi.f32.f32 	%f824, %f596;
	fma.rn.f32 	%f109, %f824, 0fC0000000, %f826;
	mov.b32 	%r130, %f109;
	setp.lt.u32 	%p121, %r130, 1073741824;
	@%p121 bra 	$L__BB0_105;
// %bb.48:
	setp.lt.u32 	%p122, %r130, -2147483647;
	@%p122 bra 	$L__BB0_103;
// %bb.49:
	add.f32 	%f601, %f824, 0fBF800000;
	setp.lt.f32 	%p125, %f109, 0fC0000000;
	add.f32 	%f602, %f601, 0fBF800000;
	selp.f32 	%f824, %f602, %f601, %p125;
	bra.uni 	$L__BB0_105;
$L__BB0_103:
	add.f32 	%f824, %f824, 0f3F800000;
	setp.ltu.f32 	%p123, %f109, 0f40800000;
	@%p123 bra 	$L__BB0_105;
// %bb.104:                             // %__nv_fmaf_rn.exit.i.i.i937
	add.f32 	%f597, %f824, 0f3F800000;
	fma.rn.f32 	%f599, %f145, 0fC0400000, %f109;
	setp.ge.f32 	%p124, %f599, 0f00000000;
	add.f32 	%f600, %f597, 0f3F800000;
	selp.f32 	%f824, %f600, %f597, %p124;
$L__BB0_105:                            // %__internal_fmodf_fastpath_quot.exit.i.i940
	fma.rn.f32 	%f826, %f824, 0fC0000000, %f826;
$L__BB0_110:                            // %__internal_fmodf_kernel.exit.i959
	abs.f32 	%f614, %f826;
	setp.gtu.f32 	%p131, %f614, 0f7F800000;
	@%p131 bra 	$L__BB0_112;
// %bb.111:
	mov.b32 	%r350, %f53;
	and.b32  	%r351, %r350, -2147483648;
	mov.b32 	%r352, %f826;
	or.b32  	%r353, %r351, %r352;
	mov.b32 	%f826, %r353;
$L__BB0_112:                            // %__nv_fmodf.exit960
	div.approx.f32 	%f125, %f105, %f177;
	abs.f32 	%f814, %f125;
	setp.lt.f32 	%p139, %f814, 0f40000000;
	@%p139 bra 	$L__BB0_61;
// %bb.50:
	setp.gtu.f32 	%p140, %f814, 0f4B800000;
	@%p140 bra 	$L__BB0_57;
	bra.uni 	$L__BB0_51;
$L__BB0_57:
	mov.b32 	%r29, %f814;
	and.b32  	%r362, %r29, 8388607;
	or.b32  	%r7978, %r362, 1065353216;
	mov.b32 	%f813, %r7978;
	add.s32 	%r363, %r29, -1073741824;
	and.b32  	%r7979, %r363, -8388608;
	setp.eq.s32 	%p146, %r7979, 0;
	@%p146 bra 	$L__BB0_60;
// %bb.58:                              // %__nv_fmaf_rn.exit4.i.i.i861.preheader
	mov.f32 	%f655, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f654,%f655;
	// end inline asm
$L__BB0_59:                             // %__nv_fmaf_rn.exit4.i.i.i861
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r364, %r7979, 192937984;
	add.s32 	%r365, %r7978, %r364;
	mov.b32 	%f656, %r365;
	mul.f32 	%f657, %f654, %f656;
	sub.f32 	%f658, %f656, %f657;
	fma.rn.f32 	%f659, %f658, %f654, %f657;
	sub.f32 	%f660, %f656, %f659;
	fma.rz.f32 	%f661, %f660, %f654, %f659;
	cvt.rzi.f32.f32 	%f662, %f661;
	sub.f32 	%f813, %f656, %f662;
	sub.s32 	%r7979, %r7979, %r364;
	mov.b32 	%r7978, %f813;
	setp.ne.s32 	%p147, %r7979, 0;
	setp.ne.s32 	%p148, %r7978, 0;
	and.pred  	%p149, %p147, %p148;
	@%p149 bra 	$L__BB0_59;
$L__BB0_60:                             // %__internal_fmodf_slowpath_mod.exit.i.i863
	setp.gt.u32 	%p150, %r29, 2139095039;
	selp.f32 	%f663, 0f7FFFFFFF, 0f4B800000, %p150;
	mul.f32 	%f664, %f813, 0f34000000;
	mul.f32 	%f814, %f663, %f664;
	bra.uni 	$L__BB0_61;
$L__BB0_51:                             // %__nv_fast_fdividef.exit.i.i.i840
	div.approx.f32 	%f647, %f814, %f145;
	cvt.rzi.f32.f32 	%f812, %f647;
	fma.rn.f32 	%f56, %f812, 0fC0000000, %f814;
	mov.b32 	%r28, %f56;
	setp.lt.u32 	%p141, %r28, 1073741824;
	@%p141 bra 	$L__BB0_56;
// %bb.52:
	setp.lt.u32 	%p142, %r28, -2147483647;
	@%p142 bra 	$L__BB0_54;
// %bb.53:
	add.f32 	%f652, %f812, 0fBF800000;
	setp.lt.f32 	%p145, %f56, 0fC0000000;
	add.f32 	%f653, %f652, 0fBF800000;
	selp.f32 	%f812, %f653, %f652, %p145;
	bra.uni 	$L__BB0_56;
$L__BB0_54:
	add.f32 	%f812, %f812, 0f3F800000;
	setp.ltu.f32 	%p143, %f56, 0f40800000;
	@%p143 bra 	$L__BB0_56;
// %bb.55:                              // %__nv_fmaf_rn.exit.i.i.i844
	add.f32 	%f648, %f812, 0f3F800000;
	fma.rn.f32 	%f650, %f145, 0fC0400000, %f56;
	setp.ge.f32 	%p144, %f650, 0f00000000;
	add.f32 	%f651, %f648, 0f3F800000;
	selp.f32 	%f812, %f651, %f648, %p144;
$L__BB0_56:                             // %__internal_fmodf_fastpath_quot.exit.i.i847
	fma.rn.f32 	%f814, %f812, 0fC0000000, %f814;
$L__BB0_61:                             // %__internal_fmodf_kernel.exit.i866
	abs.f32 	%f665, %f814;
	setp.gtu.f32 	%p151, %f665, 0f7F800000;
	@%p151 bra 	$L__BB0_63;
// %bb.62:
	mov.b32 	%r366, %f125;
	and.b32  	%r367, %r366, -2147483648;
	mov.b32 	%r368, %f814;
	or.b32  	%r369, %r367, %r368;
	mov.b32 	%f814, %r369;
$L__BB0_63:                             // %__nv_fmodf.exit867
	@%p79 bra 	$L__BB0_120;
// %bb.64:
	@%p237 bra 	$L__BB0_116;
	bra.uni 	$L__BB0_65;
$L__BB0_116:
	mov.b32 	%r139, %f830;
	and.b32  	%r384, %r139, 8388607;
	or.b32  	%r8013, %r384, 1065353216;
	mov.b32 	%f829, %r8013;
	add.s32 	%r385, %r139, -1073741824;
	and.b32  	%r8014, %r385, -8388608;
	setp.eq.s32 	%p166, %r8014, 0;
	@%p166 bra 	$L__BB0_119;
// %bb.117:                             // %__nv_fmaf_rn.exit4.i.i.i985.preheader
	mov.f32 	%f707, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f706,%f707;
	// end inline asm
$L__BB0_118:                            // %__nv_fmaf_rn.exit4.i.i.i985
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r386, %r8014, 192937984;
	add.s32 	%r387, %r8013, %r386;
	mov.b32 	%f708, %r387;
	mul.f32 	%f709, %f706, %f708;
	sub.f32 	%f710, %f708, %f709;
	fma.rn.f32 	%f711, %f710, %f706, %f709;
	sub.f32 	%f712, %f708, %f711;
	fma.rz.f32 	%f713, %f712, %f706, %f711;
	cvt.rzi.f32.f32 	%f714, %f713;
	sub.f32 	%f829, %f708, %f714;
	sub.s32 	%r8014, %r8014, %r386;
	mov.b32 	%r8013, %f829;
	setp.ne.s32 	%p167, %r8014, 0;
	setp.ne.s32 	%p168, %r8013, 0;
	and.pred  	%p169, %p167, %p168;
	@%p169 bra 	$L__BB0_118;
$L__BB0_119:                            // %__internal_fmodf_slowpath_mod.exit.i.i987
	setp.gt.u32 	%p170, %r139, 2139095039;
	selp.f32 	%f715, 0f7FFFFFFF, 0f4B800000, %p170;
	mul.f32 	%f716, %f829, 0f34000000;
	mul.f32 	%f830, %f715, %f716;
	bra.uni 	$L__BB0_120;
$L__BB0_65:                             // %__nv_fast_fdividef.exit.i.i.i964
	div.approx.f32 	%f699, %f830, %f145;
	cvt.rzi.f32.f32 	%f828, %f699;
	fma.rn.f32 	%f128, %f828, 0fC0000000, %f830;
	mov.b32 	%r138, %f128;
	setp.lt.u32 	%p161, %r138, 1073741824;
	@%p161 bra 	$L__BB0_115;
// %bb.66:
	setp.lt.u32 	%p162, %r138, -2147483647;
	@%p162 bra 	$L__BB0_113;
// %bb.67:
	add.f32 	%f704, %f828, 0fBF800000;
	setp.lt.f32 	%p165, %f128, 0fC0000000;
	add.f32 	%f705, %f704, 0fBF800000;
	selp.f32 	%f828, %f705, %f704, %p165;
	bra.uni 	$L__BB0_115;
$L__BB0_113:
	add.f32 	%f828, %f828, 0f3F800000;
	setp.ltu.f32 	%p163, %f128, 0f40800000;
	@%p163 bra 	$L__BB0_115;
// %bb.114:                             // %__nv_fmaf_rn.exit.i.i.i968
	add.f32 	%f700, %f828, 0f3F800000;
	fma.rn.f32 	%f702, %f145, 0fC0400000, %f128;
	setp.ge.f32 	%p164, %f702, 0f00000000;
	add.f32 	%f703, %f700, 0f3F800000;
	selp.f32 	%f828, %f703, %f700, %p164;
$L__BB0_115:                            // %__internal_fmodf_fastpath_quot.exit.i.i971
	fma.rn.f32 	%f830, %f828, 0fC0000000, %f830;
$L__BB0_120:                            // %__internal_fmodf_kernel.exit.i990
	abs.f32 	%f717, %f830;
	setp.gtu.f32 	%p171, %f717, 0f7F800000;
	@%p171 bra 	$L__BB0_122;
// %bb.121:
	mov.b32 	%r388, %f830;
	or.b32  	%r389, %r129, %r388;
	mov.b32 	%f830, %r389;
$L__BB0_122:                            // %__nv_fmodf.exit991
	@%p99 bra 	$L__BB0_79;
// %bb.68:
	@%p238 bra 	$L__BB0_75;
	bra.uni 	$L__BB0_69;
$L__BB0_75:
	mov.b32 	%r39, %f818;
	and.b32  	%r398, %r39, 8388607;
	or.b32  	%r7980, %r398, 1065353216;
	mov.b32 	%f817, %r7980;
	add.s32 	%r399, %r39, -1073741824;
	and.b32  	%r7981, %r399, -8388608;
	setp.eq.s32 	%p186, %r7981, 0;
	@%p186 bra 	$L__BB0_78;
// %bb.76:                              // %__nv_fmaf_rn.exit4.i.i.i892.preheader
	mov.f32 	%f757, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f756,%f757;
	// end inline asm
$L__BB0_77:                             // %__nv_fmaf_rn.exit4.i.i.i892
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r400, %r7981, 192937984;
	add.s32 	%r401, %r7980, %r400;
	mov.b32 	%f758, %r401;
	mul.f32 	%f759, %f756, %f758;
	sub.f32 	%f760, %f758, %f759;
	fma.rn.f32 	%f761, %f760, %f756, %f759;
	sub.f32 	%f762, %f758, %f761;
	fma.rz.f32 	%f763, %f762, %f756, %f761;
	cvt.rzi.f32.f32 	%f764, %f763;
	sub.f32 	%f817, %f758, %f764;
	sub.s32 	%r7981, %r7981, %r400;
	mov.b32 	%r7980, %f817;
	setp.ne.s32 	%p187, %r7981, 0;
	setp.ne.s32 	%p188, %r7980, 0;
	and.pred  	%p189, %p187, %p188;
	@%p189 bra 	$L__BB0_77;
$L__BB0_78:                             // %__internal_fmodf_slowpath_mod.exit.i.i894
	setp.gt.u32 	%p190, %r39, 2139095039;
	selp.f32 	%f765, 0f7FFFFFFF, 0f4B800000, %p190;
	mul.f32 	%f766, %f817, 0f34000000;
	mul.f32 	%f818, %f765, %f766;
	bra.uni 	$L__BB0_79;
$L__BB0_69:                             // %__nv_fast_fdividef.exit.i.i.i871
	div.approx.f32 	%f749, %f818, %f145;
	cvt.rzi.f32.f32 	%f816, %f749;
	fma.rn.f32 	%f71, %f816, 0fC0000000, %f818;
	mov.b32 	%r38, %f71;
	setp.lt.u32 	%p181, %r38, 1073741824;
	@%p181 bra 	$L__BB0_74;
// %bb.70:
	setp.lt.u32 	%p182, %r38, -2147483647;
	@%p182 bra 	$L__BB0_72;
// %bb.71:
	add.f32 	%f754, %f816, 0fBF800000;
	setp.lt.f32 	%p185, %f71, 0fC0000000;
	add.f32 	%f755, %f754, 0fBF800000;
	selp.f32 	%f816, %f755, %f754, %p185;
	bra.uni 	$L__BB0_74;
$L__BB0_72:
	add.f32 	%f816, %f816, 0f3F800000;
	setp.ltu.f32 	%p183, %f71, 0f40800000;
	@%p183 bra 	$L__BB0_74;
// %bb.73:                              // %__nv_fmaf_rn.exit.i.i.i875
	add.f32 	%f750, %f816, 0f3F800000;
	fma.rn.f32 	%f752, %f145, 0fC0400000, %f71;
	setp.ge.f32 	%p184, %f752, 0f00000000;
	add.f32 	%f753, %f750, 0f3F800000;
	selp.f32 	%f816, %f753, %f750, %p184;
$L__BB0_74:                             // %__internal_fmodf_fastpath_quot.exit.i.i878
	fma.rn.f32 	%f818, %f816, 0fC0000000, %f818;
$L__BB0_79:                             // %__internal_fmodf_kernel.exit.i897
	abs.f32 	%f767, %f818;
	setp.gtu.f32 	%p191, %f767, 0f7F800000;
	@%p191 bra 	$L__BB0_81;
// %bb.80:
	mov.b32 	%r402, %f818;
	or.b32  	%r403, %r23, %r402;
	mov.b32 	%f818, %r403;
$L__BB0_81:                             // %__nv_fmodf.exit898
	setp.le.s32 	%p199, %r169, %r168;
	mov.u32 	%r7974, 0;
	@%p199 bra 	$L__BB0_92;
// %bb.82:                              // %L1448.lr.ph
	mov.f32 	%f149, 0f43808000;
	mul.lo.s32 	%r273, %r119, 63;
	div.approx.f32 	%f150, %f148, %f149;
	div.approx.f32 	%f184, %f182, %f149;
	div.approx.f32 	%f219, %f217, %f149;
	div.approx.f32 	%f253, %f251, %f149;
	div.approx.f32 	%f288, %f286, %f149;
	div.approx.f32 	%f322, %f320, %f149;
	div.approx.f32 	%f357, %f355, %f149;
	div.approx.f32 	%f391, %f389, %f149;
	add.s32 	%r283, %r273, 96;
	abs.f32 	%f151, %f150;
	abs.f32 	%f185, %f184;
	abs.f32 	%f220, %f219;
	abs.f32 	%f254, %f253;
	abs.f32 	%f289, %f288;
	abs.f32 	%f323, %f322;
	abs.f32 	%f358, %f357;
	abs.f32 	%f392, %f391;
	and.b32  	%r274, %r273, 127;
	and.b32  	%r284, %r283, 127;
	setp.gt.f32 	%p17, %f151, 0f4B800000;
	mul.f32 	%f152, %f150, 0f00000000;
	setp.gt.f32 	%p23, %f185, 0f4B800000;
	mul.f32 	%f186, %f184, 0f00000000;
	setp.gt.f32 	%p29, %f220, 0f4B800000;
	mul.f32 	%f221, %f219, 0f00000000;
	setp.gt.f32 	%p35, %f254, 0f4B800000;
	mul.f32 	%f255, %f253, 0f00000000;
	setp.gt.f32 	%p41, %f289, 0f4B800000;
	mul.f32 	%f290, %f288, 0f00000000;
	setp.gt.f32 	%p47, %f323, 0f4B800000;
	mul.f32 	%f324, %f322, 0f00000000;
	setp.gt.f32 	%p53, %f358, 0f4B800000;
	mul.f32 	%f359, %f357, 0f00000000;
	setp.gt.f32 	%p59, %f392, 0f4B800000;
	mul.f32 	%f393, %f391, 0f00000000;
	cvt.rn.f32.s32 	%f422, %r274;
	cvt.rn.f32.s32 	%f457, %r284;
	selp.f32 	%f153, %f152, %f150, %p17;
	selp.f32 	%f187, %f186, %f184, %p23;
	selp.f32 	%f222, %f221, %f219, %p29;
	selp.f32 	%f256, %f255, %f253, %p35;
	selp.f32 	%f291, %f290, %f288, %p41;
	selp.f32 	%f325, %f324, %f322, %p47;
	selp.f32 	%f360, %f359, %f357, %p53;
	selp.f32 	%f394, %f393, %f391, %p59;
	div.approx.f32 	%f424, %f422, %f177;
	div.approx.f32 	%f458, %f457, %f177;
	add.f32 	%f154, %f153, %f153;
	add.f32 	%f188, %f187, %f187;
	add.f32 	%f223, %f222, %f222;
	add.f32 	%f257, %f256, %f256;
	add.f32 	%f292, %f291, %f291;
	add.f32 	%f326, %f325, %f325;
	add.f32 	%f361, %f360, %f360;
	add.f32 	%f395, %f394, %f394;
	add.f32 	%f425, %f424, %f424;
	add.f32 	%f459, %f458, %f458;
	add.f32 	%f511, %f822, %f822;
	add.f32 	%f562, %f810, %f810;
	mov.b32 	%r196, %f154;
	mov.b32 	%r203, %f188;
	mov.b32 	%r214, %f223;
	mov.b32 	%r221, %f257;
	mov.b32 	%r232, %f292;
	mov.b32 	%r239, %f326;
	mov.b32 	%r250, %f361;
	mov.b32 	%r257, %f395;
	mov.b32 	%r275, %f425;
	mov.b32 	%r285, %f459;
	mov.b32 	%r307, %f511;
	mov.b32 	%r338, %f562;
	and.b32  	%r197, %r196, -2147483648;
	and.b32  	%r204, %r203, -2147483648;
	and.b32  	%r215, %r214, -2147483648;
	and.b32  	%r222, %r221, -2147483648;
	and.b32  	%r233, %r232, -2147483648;
	and.b32  	%r240, %r239, -2147483648;
	and.b32  	%r251, %r250, -2147483648;
	and.b32  	%r258, %r257, -2147483648;
	and.b32  	%r276, %r275, -2147483648;
	and.b32  	%r286, %r285, -2147483648;
	and.b32  	%r308, %r307, -2147483648;
	and.b32  	%r339, %r338, -2147483648;
	add.f32 	%f615, %f826, %f826;
	add.f32 	%f666, %f814, %f814;
	or.b32  	%r198, %r197, 1056964608;
	or.b32  	%r205, %r204, 1056964608;
	or.b32  	%r216, %r215, 1056964608;
	or.b32  	%r223, %r222, 1056964608;
	or.b32  	%r234, %r233, 1056964608;
	or.b32  	%r241, %r240, 1056964608;
	or.b32  	%r252, %r251, 1056964608;
	or.b32  	%r259, %r258, 1056964608;
	or.b32  	%r277, %r276, 1056964608;
	or.b32  	%r287, %r286, 1056964608;
	or.b32  	%r309, %r308, 1056964608;
	or.b32  	%r340, %r339, 1056964608;
	mov.b32 	%r354, %f615;
	mov.b32 	%r376, %f666;
	mov.b32 	%f155, %r198;
	mov.b32 	%f189, %r205;
	mov.b32 	%f224, %r216;
	mov.b32 	%f258, %r223;
	mov.b32 	%f293, %r234;
	mov.b32 	%f327, %r241;
	mov.b32 	%f362, %r252;
	mov.b32 	%f396, %r259;
	mov.b32 	%f426, %r277;
	mov.b32 	%f460, %r287;
	mov.b32 	%f512, %r309;
	mov.b32 	%f563, %r340;
	and.b32  	%r355, %r354, -2147483648;
	and.b32  	%r377, %r376, -2147483648;
	add.f32 	%f718, %f830, %f830;
	add.f32 	%f156, %f154, %f155;
	abs.f32 	%f158, %f154;
	add.f32 	%f190, %f188, %f189;
	abs.f32 	%f192, %f188;
	add.f32 	%f225, %f223, %f224;
	abs.f32 	%f227, %f223;
	add.f32 	%f259, %f257, %f258;
	abs.f32 	%f261, %f257;
	add.f32 	%f294, %f292, %f293;
	abs.f32 	%f296, %f292;
	add.f32 	%f328, %f326, %f327;
	abs.f32 	%f330, %f326;
	add.f32 	%f363, %f361, %f362;
	abs.f32 	%f365, %f361;
	add.f32 	%f397, %f395, %f396;
	abs.f32 	%f399, %f395;
	add.f32 	%f427, %f425, %f426;
	abs.f32 	%f429, %f425;
	add.f32 	%f461, %f459, %f460;
	abs.f32 	%f463, %f459;
	add.f32 	%f513, %f511, %f512;
	abs.f32 	%f515, %f511;
	add.f32 	%f564, %f562, %f563;
	abs.f32 	%f566, %f562;
	or.b32  	%r356, %r355, 1056964608;
	or.b32  	%r378, %r377, 1056964608;
	mov.b32 	%r390, %f718;
	cvt.rzi.f32.f32 	%f157, %f156;
	setp.gt.f32 	%p18, %f158, 0f4B000000;
	cvt.rzi.f32.f32 	%f191, %f190;
	setp.gt.f32 	%p24, %f192, 0f4B000000;
	cvt.rzi.f32.f32 	%f226, %f225;
	setp.gt.f32 	%p30, %f227, 0f4B000000;
	cvt.rzi.f32.f32 	%f260, %f259;
	setp.gt.f32 	%p36, %f261, 0f4B000000;
	cvt.rzi.f32.f32 	%f295, %f294;
	setp.gt.f32 	%p42, %f296, 0f4B000000;
	cvt.rzi.f32.f32 	%f329, %f328;
	setp.gt.f32 	%p48, %f330, 0f4B000000;
	cvt.rzi.f32.f32 	%f364, %f363;
	setp.gt.f32 	%p54, %f365, 0f4B000000;
	cvt.rzi.f32.f32 	%f398, %f397;
	setp.gt.f32 	%p60, %f399, 0f4B000000;
	cvt.rzi.f32.f32 	%f428, %f427;
	setp.gt.f32 	%p65, %f429, 0f4B000000;
	cvt.rzi.f32.f32 	%f462, %f461;
	setp.gt.f32 	%p72, %f463, 0f4B000000;
	cvt.rzi.f32.f32 	%f514, %f513;
	setp.gt.f32 	%p92, %f515, 0f4B000000;
	cvt.rzi.f32.f32 	%f565, %f564;
	setp.gt.f32 	%p112, %f566, 0f4B000000;
	mov.b32 	%f616, %r356;
	mov.b32 	%f667, %r378;
	and.b32  	%r391, %r390, -2147483648;
	selp.f32 	%f159, %f154, %f157, %p18;
	cvt.rzi.f32.f32 	%f160, %f154;
	setp.lt.f32 	%p19, %f158, 0f3F000000;
	selp.f32 	%f193, %f188, %f191, %p24;
	cvt.rzi.f32.f32 	%f194, %f188;
	setp.lt.f32 	%p25, %f192, 0f3F000000;
	selp.f32 	%f228, %f223, %f226, %p30;
	cvt.rzi.f32.f32 	%f229, %f223;
	setp.lt.f32 	%p31, %f227, 0f3F000000;
	selp.f32 	%f262, %f257, %f260, %p36;
	cvt.rzi.f32.f32 	%f263, %f257;
	setp.lt.f32 	%p37, %f261, 0f3F000000;
	selp.f32 	%f297, %f292, %f295, %p42;
	cvt.rzi.f32.f32 	%f298, %f292;
	setp.lt.f32 	%p43, %f296, 0f3F000000;
	selp.f32 	%f331, %f326, %f329, %p48;
	cvt.rzi.f32.f32 	%f332, %f326;
	setp.lt.f32 	%p49, %f330, 0f3F000000;
	selp.f32 	%f366, %f361, %f364, %p54;
	cvt.rzi.f32.f32 	%f367, %f361;
	setp.lt.f32 	%p55, %f365, 0f3F000000;
	selp.f32 	%f400, %f395, %f398, %p60;
	cvt.rzi.f32.f32 	%f401, %f395;
	setp.lt.f32 	%p61, %f399, 0f3F000000;
	selp.f32 	%f430, %f425, %f428, %p65;
	cvt.rzi.f32.f32 	%f431, %f425;
	setp.lt.f32 	%p66, %f429, 0f3F000000;
	selp.f32 	%f464, %f459, %f462, %p72;
	cvt.rzi.f32.f32 	%f465, %f459;
	setp.lt.f32 	%p73, %f463, 0f3F000000;
	selp.f32 	%f516, %f511, %f514, %p92;
	cvt.rzi.f32.f32 	%f517, %f511;
	setp.lt.f32 	%p93, %f515, 0f3F000000;
	selp.f32 	%f567, %f562, %f565, %p112;
	cvt.rzi.f32.f32 	%f568, %f562;
	setp.lt.f32 	%p113, %f566, 0f3F000000;
	add.f32 	%f617, %f615, %f616;
	abs.f32 	%f619, %f615;
	add.f32 	%f668, %f666, %f667;
	abs.f32 	%f670, %f666;
	or.b32  	%r392, %r391, 1056964608;
	selp.f32 	%f161, %f160, %f159, %p19;
	selp.f32 	%f195, %f194, %f193, %p25;
	selp.f32 	%f230, %f229, %f228, %p31;
	selp.f32 	%f264, %f263, %f262, %p37;
	selp.f32 	%f299, %f298, %f297, %p43;
	selp.f32 	%f333, %f332, %f331, %p49;
	selp.f32 	%f368, %f367, %f366, %p55;
	selp.f32 	%f402, %f401, %f400, %p61;
	selp.f32 	%f432, %f431, %f430, %p66;
	selp.f32 	%f466, %f465, %f464, %p73;
	selp.f32 	%f518, %f517, %f516, %p93;
	selp.f32 	%f569, %f568, %f567, %p113;
	cvt.rzi.f32.f32 	%f618, %f617;
	setp.gt.f32 	%p132, %f619, 0f4B000000;
	cvt.rzi.f32.f32 	%f669, %f668;
	setp.gt.f32 	%p153, %f670, 0f4B000000;
	mov.b32 	%f719, %r392;
	fma.rn.f32 	%f162, %f161, 0fBF000000, %f153;
	fma.rn.f32 	%f196, %f195, 0fBF000000, %f187;
	fma.rn.f32 	%f231, %f230, 0fBF000000, %f222;
	fma.rn.f32 	%f265, %f264, 0fBF000000, %f256;
	fma.rn.f32 	%f300, %f299, 0fBF000000, %f291;
	fma.rn.f32 	%f334, %f333, 0fBF000000, %f325;
	fma.rn.f32 	%f369, %f368, 0fBF000000, %f360;
	fma.rn.f32 	%f403, %f402, 0fBF000000, %f394;
	fma.rn.f32 	%f433, %f432, 0fBF000000, %f424;
	fma.rn.f32 	%f467, %f466, 0fBF000000, %f458;
	fma.rn.f32 	%f519, %f518, 0fBF000000, %f822;
	fma.rn.f32 	%f570, %f569, 0fBF000000, %f810;
	selp.f32 	%f620, %f615, %f618, %p132;
	cvt.rzi.f32.f32 	%f621, %f615;
	setp.lt.f32 	%p133, %f619, 0f3F000000;
	selp.f32 	%f671, %f666, %f669, %p153;
	cvt.rzi.f32.f32 	%f672, %f666;
	setp.lt.f32 	%p154, %f670, 0f3F000000;
	add.f32 	%f720, %f718, %f719;
	abs.f32 	%f722, %f718;
	mul.f32 	%f163, %f162, %f162;
	mul.f32 	%f197, %f196, %f196;
	mul.f32 	%f232, %f231, %f231;
	mul.f32 	%f266, %f265, %f265;
	mul.f32 	%f301, %f300, %f300;
	mul.f32 	%f335, %f334, %f334;
	mul.f32 	%f370, %f369, %f369;
	mul.f32 	%f404, %f403, %f403;
	mul.f32 	%f434, %f433, %f433;
	mul.f32 	%f468, %f467, %f467;
	mul.f32 	%f520, %f519, %f519;
	mul.f32 	%f571, %f570, %f570;
	selp.f32 	%f622, %f621, %f620, %p133;
	selp.f32 	%f673, %f672, %f671, %p154;
	cvt.rzi.f32.f32 	%f721, %f720;
	setp.gt.f32 	%p173, %f722, 0f4B000000;
	cvt.rzi.s32.f32 	%r199, %f161;
	fma.rn.f32 	%f164, %f163, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f165, %f163, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r206, %f195;
	fma.rn.f32 	%f198, %f197, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f199, %f197, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r217, %f230;
	fma.rn.f32 	%f233, %f232, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f234, %f232, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r224, %f264;
	fma.rn.f32 	%f267, %f266, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f268, %f266, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r235, %f299;
	fma.rn.f32 	%f302, %f301, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f303, %f301, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r242, %f333;
	fma.rn.f32 	%f336, %f335, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f337, %f335, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r253, %f368;
	fma.rn.f32 	%f371, %f370, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f372, %f370, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r260, %f402;
	fma.rn.f32 	%f405, %f404, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f406, %f404, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f435, %f434, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f436, %f434, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f469, %f468, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f470, %f468, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f521, %f520, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f522, %f520, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f572, %f571, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f573, %f571, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f623, %f622, 0fBF000000, %f826;
	fma.rn.f32 	%f674, %f673, 0fBF000000, %f814;
	selp.f32 	%f723, %f718, %f721, %p173;
	cvt.rzi.f32.f32 	%f724, %f718;
	setp.lt.f32 	%p174, %f722, 0f3F000000;
	shl.b32 	%r184, %r4, 4;
	add.s32 	%r200, %r199, 1;
	fma.rn.f32 	%f166, %f164, %f163, 0fC0A55DF6;
	fma.rn.f32 	%f167, %f165, %f163, 0f4081E0CF;
	fma.rn.f32 	%f168, %f163, %f162, 0f00000000;
	add.s32 	%r207, %r206, 1;
	fma.rn.f32 	%f200, %f198, %f197, 0fC0A55DF6;
	fma.rn.f32 	%f201, %f199, %f197, 0f4081E0CF;
	fma.rn.f32 	%f202, %f197, %f196, 0f00000000;
	add.s32 	%r218, %r217, 1;
	fma.rn.f32 	%f235, %f233, %f232, 0fC0A55DF6;
	fma.rn.f32 	%f236, %f234, %f232, 0f4081E0CF;
	fma.rn.f32 	%f237, %f232, %f231, 0f00000000;
	add.s32 	%r225, %r224, 1;
	fma.rn.f32 	%f269, %f267, %f266, 0fC0A55DF6;
	fma.rn.f32 	%f270, %f268, %f266, 0f4081E0CF;
	fma.rn.f32 	%f271, %f266, %f265, 0f00000000;
	add.s32 	%r236, %r235, 1;
	fma.rn.f32 	%f304, %f302, %f301, 0fC0A55DF6;
	fma.rn.f32 	%f305, %f303, %f301, 0f4081E0CF;
	fma.rn.f32 	%f306, %f301, %f300, 0f00000000;
	add.s32 	%r243, %r242, 1;
	fma.rn.f32 	%f338, %f336, %f335, 0fC0A55DF6;
	fma.rn.f32 	%f339, %f337, %f335, 0f4081E0CF;
	fma.rn.f32 	%f340, %f335, %f334, 0f00000000;
	add.s32 	%r254, %r253, 1;
	fma.rn.f32 	%f373, %f371, %f370, 0fC0A55DF6;
	fma.rn.f32 	%f374, %f372, %f370, 0f4081E0CF;
	fma.rn.f32 	%f375, %f370, %f369, 0f00000000;
	add.s32 	%r261, %r260, 1;
	fma.rn.f32 	%f407, %f405, %f404, 0fC0A55DF6;
	fma.rn.f32 	%f408, %f406, %f404, 0f4081E0CF;
	fma.rn.f32 	%f409, %f404, %f403, 0f00000000;
	cvt.rzi.s32.f32 	%r278, %f432;
	fma.rn.f32 	%f437, %f435, %f434, 0fC0A55DF6;
	fma.rn.f32 	%f438, %f436, %f434, 0f4081E0CF;
	fma.rn.f32 	%f439, %f434, %f433, 0f00000000;
	cvt.rzi.s32.f32 	%r288, %f466;
	fma.rn.f32 	%f471, %f469, %f468, 0fC0A55DF6;
	fma.rn.f32 	%f472, %f470, %f468, 0f4081E0CF;
	fma.rn.f32 	%f473, %f468, %f467, 0f00000000;
	cvt.rzi.s32.f32 	%r310, %f518;
	fma.rn.f32 	%f523, %f521, %f520, 0fC0A55DF6;
	fma.rn.f32 	%f524, %f522, %f520, 0f4081E0CF;
	fma.rn.f32 	%f525, %f520, %f519, 0f00000000;
	cvt.rzi.s32.f32 	%r341, %f569;
	fma.rn.f32 	%f574, %f572, %f571, 0fC0A55DF6;
	fma.rn.f32 	%f575, %f573, %f571, 0f4081E0CF;
	fma.rn.f32 	%f576, %f571, %f570, 0f00000000;
	mul.f32 	%f624, %f623, %f623;
	mul.f32 	%f675, %f674, %f674;
	selp.f32 	%f725, %f724, %f723, %p174;
	shl.b32 	%r105, %r3, 2;
	and.b32  	%r107, %r184, 4032;
	and.b32  	%r112, %r3, 18;
	fma.rn.f32 	%f169, %f167, %f163, 0fC09DE9E6;
	fma.rn.f32 	%f170, %f166, %f168, 0f00000000;
	and.b32  	%r201, %r200, 1;
	fma.rn.f32 	%f203, %f201, %f197, 0fC09DE9E6;
	fma.rn.f32 	%f204, %f200, %f202, 0f00000000;
	and.b32  	%r208, %r207, 1;
	fma.rn.f32 	%f238, %f236, %f232, 0fC09DE9E6;
	fma.rn.f32 	%f239, %f235, %f237, 0f00000000;
	and.b32  	%r219, %r218, 1;
	fma.rn.f32 	%f272, %f270, %f266, 0fC09DE9E6;
	fma.rn.f32 	%f273, %f269, %f271, 0f00000000;
	and.b32  	%r226, %r225, 1;
	fma.rn.f32 	%f307, %f305, %f301, 0fC09DE9E6;
	fma.rn.f32 	%f308, %f304, %f306, 0f00000000;
	and.b32  	%r237, %r236, 1;
	fma.rn.f32 	%f341, %f339, %f335, 0fC09DE9E6;
	fma.rn.f32 	%f342, %f338, %f340, 0f00000000;
	and.b32  	%r244, %r243, 1;
	fma.rn.f32 	%f376, %f374, %f370, 0fC09DE9E6;
	fma.rn.f32 	%f377, %f373, %f375, 0f00000000;
	and.b32  	%r255, %r254, 1;
	fma.rn.f32 	%f410, %f408, %f404, 0fC09DE9E6;
	fma.rn.f32 	%f411, %f407, %f409, 0f00000000;
	and.b32  	%r262, %r261, 1;
	fma.rn.f32 	%f440, %f438, %f434, 0fC09DE9E6;
	fma.rn.f32 	%f441, %f437, %f439, 0f00000000;
	and.b32  	%r279, %r278, 1;
	fma.rn.f32 	%f474, %f472, %f468, 0fC09DE9E6;
	fma.rn.f32 	%f475, %f471, %f473, 0f00000000;
	and.b32  	%r289, %r288, 1;
	fma.rn.f32 	%f526, %f524, %f520, 0fC09DE9E6;
	fma.rn.f32 	%f527, %f523, %f525, 0f00000000;
	and.b32  	%r311, %r310, 1;
	fma.rn.f32 	%f577, %f575, %f571, 0fC09DE9E6;
	fma.rn.f32 	%f578, %f574, %f576, 0f00000000;
	and.b32  	%r342, %r341, 1;
	fma.rn.f32 	%f625, %f624, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f626, %f624, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f676, %f675, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f677, %f675, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f726, %f725, 0fBF000000, %f830;
	and.b32  	%r106, %r105, 4;
	or.b32  	%r185, %r112, %r107;
	fma.rn.f32 	%f171, %f169, %f163, 0f3F800000;
	fma.rn.f32 	%f172, %f162, 0f40490FDB, %f170;
	setp.eq.b32 	%p20, %r201, 1;
	fma.rn.f32 	%f205, %f203, %f197, 0f3F800000;
	fma.rn.f32 	%f206, %f196, 0f40490FDB, %f204;
	setp.eq.b32 	%p26, %r208, 1;
	fma.rn.f32 	%f240, %f238, %f232, 0f3F800000;
	fma.rn.f32 	%f241, %f231, 0f40490FDB, %f239;
	setp.eq.b32 	%p32, %r219, 1;
	fma.rn.f32 	%f274, %f272, %f266, 0f3F800000;
	fma.rn.f32 	%f275, %f265, 0f40490FDB, %f273;
	setp.eq.b32 	%p38, %r226, 1;
	fma.rn.f32 	%f309, %f307, %f301, 0f3F800000;
	fma.rn.f32 	%f310, %f300, 0f40490FDB, %f308;
	setp.eq.b32 	%p44, %r237, 1;
	fma.rn.f32 	%f343, %f341, %f335, 0f3F800000;
	fma.rn.f32 	%f344, %f334, 0f40490FDB, %f342;
	setp.eq.b32 	%p50, %r244, 1;
	fma.rn.f32 	%f378, %f376, %f370, 0f3F800000;
	fma.rn.f32 	%f379, %f369, 0f40490FDB, %f377;
	setp.eq.b32 	%p56, %r255, 1;
	fma.rn.f32 	%f412, %f410, %f404, 0f3F800000;
	fma.rn.f32 	%f413, %f403, 0f40490FDB, %f411;
	setp.eq.b32 	%p62, %r262, 1;
	fma.rn.f32 	%f442, %f440, %f434, 0f3F800000;
	fma.rn.f32 	%f443, %f433, 0f40490FDB, %f441;
	setp.eq.b32 	%p67, %r279, 1;
	fma.rn.f32 	%f476, %f474, %f468, 0f3F800000;
	fma.rn.f32 	%f477, %f467, 0f40490FDB, %f475;
	setp.eq.b32 	%p74, %r289, 1;
	fma.rn.f32 	%f528, %f526, %f520, 0f3F800000;
	fma.rn.f32 	%f529, %f519, 0f40490FDB, %f527;
	setp.eq.b32 	%p94, %r311, 1;
	fma.rn.f32 	%f579, %f577, %f571, 0f3F800000;
	fma.rn.f32 	%f580, %f570, 0f40490FDB, %f578;
	setp.eq.b32 	%p114, %r342, 1;
	cvt.rzi.s32.f32 	%r357, %f622;
	fma.rn.f32 	%f627, %f625, %f624, 0fC0A55DF6;
	fma.rn.f32 	%f628, %f626, %f624, 0f4081E0CF;
	fma.rn.f32 	%f629, %f624, %f623, 0f00000000;
	cvt.rzi.s32.f32 	%r379, %f673;
	fma.rn.f32 	%f678, %f676, %f675, 0fC0A55DF6;
	fma.rn.f32 	%f679, %f677, %f675, 0f4081E0CF;
	fma.rn.f32 	%f680, %f675, %f674, 0f00000000;
	mul.f32 	%f727, %f726, %f726;
	and.b32  	%r109, %r105, 32;
	or.b32  	%r186, %r185, %r106;
	selp.f32 	%f173, %f171, %f172, %p20;
	and.b32  	%r202, %r200, 2;
	mov.f32 	%f174, 0f00000000;
	selp.f32 	%f207, %f205, %f206, %p26;
	and.b32  	%r209, %r207, 2;
	selp.f32 	%f242, %f240, %f241, %p32;
	and.b32  	%r220, %r218, 2;
	selp.f32 	%f276, %f274, %f275, %p38;
	and.b32  	%r227, %r225, 2;
	selp.f32 	%f311, %f309, %f310, %p44;
	and.b32  	%r238, %r236, 2;
	selp.f32 	%f345, %f343, %f344, %p50;
	and.b32  	%r245, %r243, 2;
	selp.f32 	%f380, %f378, %f379, %p56;
	and.b32  	%r256, %r254, 2;
	selp.f32 	%f414, %f412, %f413, %p62;
	and.b32  	%r263, %r261, 2;
	selp.f32 	%f444, %f442, %f443, %p67;
	and.b32  	%r280, %r278, 2;
	selp.f32 	%f478, %f476, %f477, %p74;
	and.b32  	%r290, %r288, 2;
	selp.f32 	%f530, %f528, %f529, %p94;
	and.b32  	%r312, %r310, 2;
	selp.f32 	%f581, %f579, %f580, %p114;
	and.b32  	%r343, %r341, 2;
	fma.rn.f32 	%f630, %f628, %f624, 0fC09DE9E6;
	fma.rn.f32 	%f631, %f627, %f629, 0f00000000;
	and.b32  	%r358, %r357, 1;
	fma.rn.f32 	%f681, %f679, %f675, 0fC09DE9E6;
	fma.rn.f32 	%f682, %f678, %f680, 0f00000000;
	and.b32  	%r380, %r379, 1;
	fma.rn.f32 	%f728, %f727, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f729, %f727, 0f3E684E12, 0fBFAAD2E0;
	and.b32  	%r111, %r110, 8;
	or.b32  	%r187, %r186, %r109;
	setp.eq.s32 	%p21, %r202, 0;
	sub.f32 	%f175, %f174, %f173;
	setp.eq.s32 	%p27, %r209, 0;
	sub.f32 	%f209, %f174, %f207;
	setp.eq.s32 	%p33, %r220, 0;
	sub.f32 	%f244, %f174, %f242;
	setp.eq.s32 	%p39, %r227, 0;
	sub.f32 	%f278, %f174, %f276;
	setp.eq.s32 	%p45, %r238, 0;
	sub.f32 	%f313, %f174, %f311;
	setp.eq.s32 	%p51, %r245, 0;
	sub.f32 	%f347, %f174, %f345;
	setp.eq.s32 	%p57, %r256, 0;
	sub.f32 	%f382, %f174, %f380;
	setp.eq.s32 	%p63, %r263, 0;
	sub.f32 	%f416, %f174, %f414;
	setp.eq.s32 	%p68, %r280, 0;
	neg.f32 	%f446, %f444;
	add.s32 	%r281, %r278, 1;
	cvt.rzi.f32.f32 	%f451, %f424;
	setp.eq.s32 	%p75, %r290, 0;
	neg.f32 	%f480, %f478;
	add.s32 	%r291, %r288, 1;
	cvt.rzi.f32.f32 	%f484, %f458;
	setp.eq.s32 	%p95, %r312, 0;
	neg.f32 	%f532, %f530;
	add.s32 	%r313, %r310, 1;
	cvt.rzi.f32.f32 	%f537, %f822;
	setp.eq.s32 	%p115, %r343, 0;
	neg.f32 	%f583, %f581;
	add.s32 	%r344, %r341, 1;
	cvt.rzi.f32.f32 	%f588, %f810;
	fma.rn.f32 	%f632, %f630, %f624, 0f3F800000;
	fma.rn.f32 	%f633, %f623, 0f40490FDB, %f631;
	setp.eq.b32 	%p134, %r358, 1;
	fma.rn.f32 	%f683, %f681, %f675, 0f3F800000;
	fma.rn.f32 	%f684, %f674, 0f40490FDB, %f682;
	setp.eq.b32 	%p155, %r380, 1;
	cvt.rzi.s32.f32 	%r393, %f725;
	fma.rn.f32 	%f730, %f728, %f727, 0fC0A55DF6;
	fma.rn.f32 	%f731, %f729, %f727, 0f4081E0CF;
	fma.rn.f32 	%f732, %f727, %f726, 0f00000000;
	or.b32  	%r188, %r187, %r111;
	selp.f32 	%f176, %f173, %f175, %p21;
	selp.f32 	%f210, %f207, %f209, %p27;
	selp.f32 	%f245, %f242, %f244, %p33;
	selp.f32 	%f279, %f276, %f278, %p39;
	selp.f32 	%f314, %f311, %f313, %p45;
	selp.f32 	%f348, %f345, %f347, %p51;
	selp.f32 	%f383, %f380, %f382, %p57;
	selp.f32 	%f417, %f414, %f416, %p63;
	selp.f32 	%f445, %f443, %f442, %p67;
	selp.f32 	%f447, %f444, %f446, %p68;
	and.b32  	%r282, %r281, 2;
	setp.eq.f32 	%p70, %f451, %f424;
	mul.f32 	%f452, %f424, 0f00000000;
	selp.f32 	%f479, %f477, %f476, %p74;
	selp.f32 	%f481, %f478, %f480, %p75;
	and.b32  	%r292, %r291, 2;
	setp.eq.f32 	%p77, %f484, %f458;
	mul.f32 	%f485, %f458, 0f00000000;
	selp.f32 	%f531, %f529, %f528, %p94;
	selp.f32 	%f533, %f530, %f532, %p95;
	and.b32  	%r314, %r313, 2;
	setp.eq.f32 	%p97, %f537, %f822;
	mul.f32 	%f538, %f822, 0f00000000;
	selp.f32 	%f582, %f580, %f579, %p114;
	selp.f32 	%f584, %f581, %f583, %p115;
	and.b32  	%r345, %r344, 2;
	setp.eq.f32 	%p117, %f588, %f810;
	mul.f32 	%f589, %f810, 0f00000000;
	selp.f32 	%f634, %f632, %f633, %p134;
	and.b32  	%r359, %r357, 2;
	selp.f32 	%f685, %f683, %f684, %p155;
	and.b32  	%r381, %r379, 2;
	fma.rn.f32 	%f733, %f731, %f727, 0fC09DE9E6;
	fma.rn.f32 	%f734, %f730, %f732, 0f00000000;
	and.b32  	%r394, %r393, 1;
	shr.u32 	%r189, %r188, 1;
	mul.f32 	%f86, %f176, %f176;
	mul.f32 	%f4, %f210, %f210;
	mul.f32 	%f8, %f245, %f245;
	mul.f32 	%f13, %f279, %f279;
	mul.f32 	%f17, %f314, %f314;
	mul.f32 	%f22, %f348, %f348;
	mul.f32 	%f26, %f383, %f383;
	mul.f32 	%f31, %f417, %f417;
	setp.eq.s32 	%p69, %r282, 0;
	sub.f32 	%f449, %f174, %f445;
	selp.f32 	%f453, %f452, %f447, %p70;
	abs.f32 	%f454, %f424;
	setp.eq.s32 	%p76, %r292, 0;
	sub.f32 	%f482, %f174, %f479;
	selp.f32 	%f486, %f485, %f481, %p77;
	abs.f32 	%f487, %f458;
	setp.eq.s32 	%p96, %r314, 0;
	sub.f32 	%f535, %f174, %f531;
	selp.f32 	%f103, %f538, %f533, %p97;
	abs.f32 	%f539, %f822;
	setp.eq.s32 	%p116, %r345, 0;
	sub.f32 	%f586, %f174, %f582;
	selp.f32 	%f590, %f589, %f584, %p117;
	abs.f32 	%f591, %f810;
	setp.eq.s32 	%p135, %r359, 0;
	neg.f32 	%f636, %f634;
	add.s32 	%r360, %r357, 1;
	cvt.rzi.f32.f32 	%f641, %f826;
	setp.eq.s32 	%p156, %r381, 0;
	neg.f32 	%f687, %f685;
	add.s32 	%r382, %r379, 1;
	cvt.rzi.f32.f32 	%f692, %f814;
	fma.rn.f32 	%f735, %f733, %f727, 0f3F800000;
	fma.rn.f32 	%f736, %f726, 0f40490FDB, %f734;
	setp.eq.b32 	%p175, %r394, 1;
	ld.param.u64 	%rd1, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mul.wide.u32 	%rd43, %r189, 4;
	mul.f32 	%f180, %f86, 0f3C0AF64E;
	mul.f32 	%f214, %f4, 0f3C0AF64E;
	mul.f32 	%f249, %f8, 0f3C0AF64E;
	mul.f32 	%f283, %f13, 0f3C0AF64E;
	mul.f32 	%f318, %f17, 0f3C0AF64E;
	mul.f32 	%f352, %f22, 0f3C0AF64E;
	mul.f32 	%f387, %f26, 0f3C0AF64E;
	mul.f32 	%f420, %f31, 0f3C0AF64E;
	selp.f32 	%f450, %f445, %f449, %p69;
	setp.gt.f32 	%p71, %f454, 0f4B800000;
	add.f32 	%f455, %f453, 0f3F800000;
	selp.f32 	%f483, %f479, %f482, %p76;
	setp.gt.f32 	%p78, %f487, 0f4B800000;
	add.f32 	%f488, %f486, 0f3F800000;
	selp.f32 	%f536, %f531, %f535, %p96;
	setp.gt.f32 	%p98, %f539, 0f4B800000;
	add.f32 	%f540, %f103, 0f3F800000;
	selp.f32 	%f587, %f582, %f586, %p116;
	setp.gt.f32 	%p118, %f591, 0f4B800000;
	add.f32 	%f592, %f590, 0f3F800000;
	selp.f32 	%f635, %f633, %f632, %p134;
	selp.f32 	%f637, %f634, %f636, %p135;
	and.b32  	%r361, %r360, 2;
	setp.eq.f32 	%p137, %f641, %f826;
	mul.f32 	%f642, %f826, 0f00000000;
	selp.f32 	%f686, %f684, %f683, %p155;
	selp.f32 	%f688, %f685, %f687, %p156;
	and.b32  	%r383, %r382, 2;
	setp.eq.f32 	%p158, %f692, %f814;
	mul.f32 	%f693, %f814, 0f00000000;
	selp.f32 	%f737, %f735, %f736, %p175;
	and.b32  	%r395, %r393, 2;
	add.s64 	%rd44, %rd1, %rd43;
	mul.f32 	%f3, %f180, %f800;
	mul.f32 	%f215, %f214, %f801;
	mul.f32 	%f12, %f249, %f802;
	mul.f32 	%f284, %f283, %f803;
	mul.f32 	%f21, %f318, %f804;
	mul.f32 	%f353, %f352, %f805;
	mul.f32 	%f30, %f387, %f806;
	mul.f32 	%f421, %f420, %f807;
	selp.f32 	%f456, %f455, %f450, %p71;
	selp.f32 	%f489, %f488, %f483, %p78;
	selp.f32 	%f104, %f540, %f536, %p98;
	selp.f32 	%f593, %f592, %f587, %p118;
	setp.eq.s32 	%p136, %r361, 0;
	sub.f32 	%f639, %f174, %f635;
	selp.f32 	%f123, %f642, %f637, %p137;
	abs.f32 	%f643, %f826;
	setp.eq.s32 	%p157, %r383, 0;
	sub.f32 	%f690, %f174, %f686;
	selp.f32 	%f694, %f693, %f688, %p158;
	abs.f32 	%f695, %f814;
	setp.eq.s32 	%p176, %r395, 0;
	neg.f32 	%f739, %f737;
	add.s32 	%r396, %r393, 1;
	cvt.rzi.f32.f32 	%f744, %f830;
	ld.param.u64 	%rd2, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	ld.param.u64 	%rd3, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	and.b32  	%r108, %r3, 16;
	ld.global.u32 	%r113, [%rd44];
	mov.b32 	%r212, %f215;
	mov.b32 	%r211, %f3;
	mov.b32 	%r230, %f284;
	mov.b32 	%r229, %f12;
	mov.b32 	%r248, %f353;
	mov.b32 	%r247, %f21;
	mov.b32 	%r266, %f421;
	mov.b32 	%r265, %f30;
	mov.b32 	%r268, %f456;
	mov.b32 	%r269, %f489;
	mov.b32 	%r271, %f453;
	mov.b32 	%r272, %f486;
	mov.b32 	%r328, %f593;
	mov.b32 	%r327, %f104;
	mov.b32 	%r334, %f590;
	mov.b32 	%r333, %f103;
	selp.f32 	%f640, %f635, %f639, %p136;
	setp.gt.f32 	%p138, %f643, 0f4B800000;
	add.f32 	%f644, %f123, 0f3F800000;
	selp.f32 	%f691, %f686, %f690, %p157;
	setp.gt.f32 	%p159, %f695, 0f4B800000;
	add.f32 	%f696, %f694, 0f3F800000;
	selp.f32 	%f738, %f736, %f735, %p175;
	selp.f32 	%f740, %f737, %f739, %p176;
	and.b32  	%r397, %r396, 2;
	setp.eq.f32 	%p178, %f744, %f830;
	mul.f32 	%f745, %f830, 0f00000000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r210, %r212, %r211;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r228, %r230, %r229;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r246, %r248, %r247;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r264, %r266, %r265;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r267, %r269, %r268;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r270, %r272, %r271;
	// end inline asm
	xor.b32  	%r331, %r334, -2147483648;
	xor.b32  	%r330, %r333, -2147483648;
	selp.f32 	%f124, %f644, %f640, %p138;
	selp.f32 	%f697, %f696, %f691, %p159;
	setp.eq.s32 	%p177, %r397, 0;
	sub.f32 	%f742, %f174, %f738;
	selp.f32 	%f142, %f745, %f740, %p178;
	abs.f32 	%f746, %f830;
	// begin inline asm
	cvt.rn.f16x2.f32 %r326, %r328, %r327;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r329, %r331, %r330;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r332, %r334, %r333;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r335, %r328, %r327;
	// end inline asm
	mov.b32 	%r372, %f697;
	mov.b32 	%r371, %f124;
	mov.b32 	%r375, %f694;
	mov.b32 	%r374, %f123;
	selp.f32 	%f743, %f738, %f742, %p177;
	setp.gt.f32 	%p179, %f746, 0f4B800000;
	add.f32 	%f747, %f142, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r370, %r372, %r371;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r373, %r375, %r374;
	// end inline asm
	selp.f32 	%f143, %f747, %f743, %p179;
	add.f32 	%f768, %f818, %f818;
	mov.b32 	%r416, %f768;
	and.b32  	%r417, %r416, -2147483648;
	or.b32  	%r418, %r417, 1056964608;
	mov.b32 	%f769, %r418;
	add.f32 	%f770, %f768, %f769;
	cvt.rzi.f32.f32 	%f771, %f770;
	abs.f32 	%f772, %f768;
	setp.gt.f32 	%p192, %f772, 0f4B000000;
	selp.f32 	%f773, %f768, %f771, %p192;
	cvt.rzi.f32.f32 	%f774, %f768;
	setp.lt.f32 	%p193, %f772, 0f3F000000;
	selp.f32 	%f775, %f774, %f773, %p193;
	cvt.rzi.s32.f32 	%r419, %f775;
	fma.rn.f32 	%f776, %f775, 0fBF000000, %f818;
	mul.f32 	%f777, %f776, %f776;
	fma.rn.f32 	%f778, %f777, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f779, %f777, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f780, %f778, %f777, 0fC0A55DF6;
	fma.rn.f32 	%f781, %f779, %f777, 0f4081E0CF;
	fma.rn.f32 	%f782, %f777, %f776, 0f00000000;
	fma.rn.f32 	%f783, %f781, %f777, 0fC09DE9E6;
	fma.rn.f32 	%f784, %f780, %f782, 0f00000000;
	fma.rn.f32 	%f785, %f783, %f777, 0f3F800000;
	fma.rn.f32 	%f786, %f776, 0f40490FDB, %f784;
	and.b32  	%r420, %r419, 1;
	setp.eq.b32 	%p194, %r420, 1;
	selp.f32 	%f787, %f785, %f786, %p194;
	selp.f32 	%f788, %f786, %f785, %p194;
	and.b32  	%r421, %r419, 2;
	setp.eq.s32 	%p195, %r421, 0;
	neg.f32 	%f789, %f787;
	selp.f32 	%f790, %f787, %f789, %p195;
	add.s32 	%r422, %r419, 1;
	and.b32  	%r423, %r422, 2;
	setp.eq.s32 	%p196, %r423, 0;
	sub.f32 	%f792, %f174, %f788;
	selp.f32 	%f793, %f788, %f792, %p196;
	cvt.rzi.f32.f32 	%f794, %f818;
	setp.eq.f32 	%p197, %f794, %f818;
	mul.f32 	%f795, %f818, 0f00000000;
	selp.f32 	%f796, %f795, %f790, %p197;
	abs.f32 	%f797, %f818;
	setp.gt.f32 	%p198, %f797, 0f4B800000;
	add.f32 	%f798, %f796, 0f3F800000;
	selp.f32 	%f799, %f798, %f793, %p198;
	mov.b32 	%r406, %f799;
	mov.b32 	%r405, %f143;
	// begin inline asm
	cvt.rn.f16x2.f32 %r404, %r406, %r405;
	// end inline asm
	mov.b32 	%r412, %f796;
	xor.b32  	%r409, %r412, -2147483648;
	mov.b32 	%r411, %f142;
	xor.b32  	%r408, %r411, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r407, %r409, %r408;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r410, %r412, %r411;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r413, %r406, %r405;
	// end inline asm
	shl.b32 	%r425, %r168, 13;
	shl.b32 	%r426, %r172, 7;
	and.b32  	%r427, %r105, 28;
	shl.b32 	%r428, %r4, 5;
	and.b32  	%r429, %r428, 32;
	or.b32  	%r50, %r427, %r429;
	or.b32  	%r51, %r108, %r1;
	and.b32  	%r52, %r428, 64;
	or.b32  	%r430, %r425, %r52;
	or.b32  	%r431, %r430, %r50;
	add.s32 	%r53, %r431, %r426;
	and.b32  	%r54, %r3, 8;
	shl.b32 	%r432, %r3, 4;
	or.b32  	%r433, %r54, %r432;
	shr.u32 	%r434, %r433, 2;
	and.b32  	%r435, %r434, 30;
	and.b32  	%r56, %r3, 4;
	and.b32  	%r436, %r2, 32;
	shr.u32 	%r437, %r1, 1;
	or.b32  	%r57, %r436, %r437;
	or.b32  	%r58, %r57, 8;
	or.b32  	%r59, %r57, 16;
	or.b32  	%r60, %r57, 24;
	or.b32  	%r438, %r112, %r109;
	or.b32  	%r439, %r438, %r111;
	or.b32  	%r440, %r439, %r106;
	shr.u32 	%r441, %r440, 1;
	mul.lo.s32 	%r442, %r441, 65;
	add.s32 	%r443, %r57, %r442;
	add.s32 	%r444, %r58, %r442;
	add.s32 	%r445, %r59, %r442;
	add.s32 	%r446, %r60, %r442;
	shl.b32 	%r447, %r1, 1;
	or.b32  	%r448, %r116, %r447;
	mul.lo.s32 	%r449, %r448, 65;
	add.s32 	%r450, %r435, %r449;
	mul.wide.u32 	%rd45, %r450, 4;
	mov.u64 	%rd46, shmem;
	add.s64 	%rd5, %rd46, %rd45;
	cvt.u64.u32 	%rd47, %r435;
	cvt.u64.u32 	%rd48, %r449;
	add.s64 	%rd49, %rd48, %rd47;
	shl.b64 	%rd50, %rd49, 2;
	add.s64 	%rd6, %rd46, %rd50;
	shl.b32 	%r451, %r170, 19;
	add.s32 	%r452, %r451, -1572864;
	shl.b32 	%r453, %r1, 2;
	or.b32  	%r454, %r118, %r453;
	or.b32  	%r455, %r454, %r107;
	shl.b32 	%r61, %r455, 7;
	cvt.s64.s32 	%rd7, %r452;
	and.b32  	%r456, %r1, 1;
	neg.s32 	%r457, %r456;
	setp.eq.b32 	%p200, %r456, 1;
	and.b32  	%r458, %r457, 1040;
	bfe.s32 	%r459, %r1, 1, 1;
	and.b32  	%r460, %r1, 2;
	setp.eq.s32 	%p201, %r460, 0;
	and.b32  	%r461, %r459, 520;
	bfe.s32 	%r462, %r1, 2, 1;
	and.b32  	%r463, %r1, 4;
	setp.eq.s32 	%p202, %r463, 0;
	and.b32  	%r464, %r462, 260;
	mul.lo.s32 	%r465, %r116, 65;
	shr.u32 	%r466, %r1, 3;
	mul.lo.s32 	%r467, %r466, 130;
	add.s32 	%r468, %r458, %r435;
	add.s32 	%r469, %r468, %r461;
	add.s32 	%r470, %r469, %r464;
	add.s32 	%r471, %r470, %r465;
	add.s32 	%r472, %r471, %r467;
	mul.wide.u32 	%rd51, %r472, 4;
	add.s64 	%rd8, %rd46, %rd51;
	cvt.u64.u32 	%rd52, %r467;
	cvt.u64.u32 	%rd53, %r465;
	selp.b64 	%rd54, 0, 260, %p202;
	selp.b64 	%rd55, 0, 520, %p201;
	selp.b64 	%rd56, 1040, 0, %p200;
	add.s64 	%rd57, %rd47, %rd56;
	add.s64 	%rd58, %rd57, %rd55;
	add.s64 	%rd59, %rd58, %rd54;
	add.s64 	%rd60, %rd59, %rd53;
	add.s64 	%rd61, %rd60, %rd52;
	shl.b64 	%rd62, %rd61, 2;
	add.s64 	%rd9, %rd46, %rd62;
	add.s32 	%r473, %r472, 2113;
	mul.wide.u32 	%rd63, %r473, 4;
	add.s64 	%rd10, %rd46, %rd63;
	add.s32 	%r474, %r472, 2082;
	mul.wide.u32 	%rd64, %r474, 4;
	add.s64 	%rd11, %rd46, %rd64;
	add.s32 	%r475, %r472, 2114;
	mul.wide.u32 	%rd65, %r475, 4;
	add.s64 	%rd12, %rd46, %rd65;
	add.s32 	%r476, %r472, 4194;
	mul.wide.u32 	%rd66, %r476, 4;
	add.s64 	%rd13, %rd46, %rd66;
	add.s32 	%r477, %r472, 4163;
	mul.wide.u32 	%rd67, %r477, 4;
	add.s64 	%rd14, %rd46, %rd67;
	add.s32 	%r478, %r472, 4195;
	mul.wide.u32 	%rd68, %r478, 4;
	add.s64 	%rd15, %rd46, %rd68;
	add.s32 	%r479, %r472, 6275;
	mul.wide.u32 	%rd69, %r479, 4;
	add.s64 	%rd16, %rd46, %rd69;
	add.s32 	%r480, %r472, 6244;
	mul.wide.u32 	%rd70, %r480, 4;
	add.s64 	%rd17, %rd46, %rd70;
	add.s32 	%r481, %r472, 6276;
	mul.wide.u32 	%rd71, %r481, 4;
	add.s64 	%rd18, %rd46, %rd71;
	mul.wide.u32 	%rd72, %r446, 4;
	add.s64 	%rd19, %rd46, %rd72;
	mul.wide.u32 	%rd73, %r445, 4;
	add.s64 	%rd20, %rd46, %rd73;
	mul.wide.u32 	%rd74, %r444, 4;
	add.s64 	%rd21, %rd46, %rd74;
	mul.wide.u32 	%rd75, %r443, 4;
	add.s64 	%rd22, %rd46, %rd75;
	setp.eq.s32 	%p203, %r54, 0;
	mov.u16 	%rs1176, 25600;
	mov.u16 	%rs1072, 21504;
	mov.u16 	%rs1184, 18432;
	mov.u16 	%rs1142, -14592;
	mov.u32 	%r7996, %r7974;
	mov.u32 	%r7997, %r7974;
	mov.u32 	%r7998, %r7974;
	mov.u32 	%r7999, %r7974;
	mov.u32 	%r8000, %r7974;
	mov.u32 	%r8001, %r7974;
	mov.u32 	%r8002, %r7974;
	mov.u32 	%r8003, %r7974;
	mov.u32 	%r8004, %r7974;
	mov.u32 	%r8005, %r7974;
	mov.u32 	%r8006, %r7974;
	mov.u32 	%r8007, %r7974;
	mov.u32 	%r74, %r7974;
	bra.uni 	$L__BB0_83;
$L__BB0_91:                             // %pass16865
                                        //   in Loop: Header=BB0_83 Depth=1
	or.b32  	%r7966, %r7975, %r50;
	or.b32  	%r7967, %r7966, %r61;
	or.b32  	%r7968, %r7967, %r52;
	or.b32  	%r7969, %r7968, 1572864;
	cvt.s64.s32 	%rd129, %r7969;
	add.s64 	%rd130, %rd129, %rd7;
	shr.u64 	%rd131, %rd130, 36;
	add.s64 	%rd132, %rd130, %rd131;
	shr.s64 	%rd133, %rd132, 28;
	setp.lt.s64 	%p231, %rd130, 0;
	and.b64  	%rd134, %rd132, -268435456;
	setp.ne.s64 	%p232, %rd134, %rd130;
	and.pred  	%p233, %p231, %p232;
	selp.u64 	%rd135, 1, 0, %p233;
	sub.s64 	%rd136, %rd135, %rd133;
	shl.b64 	%rd137, %rd136, 28;
	add.s64 	%rd138, %rd137, %rd130;
	shl.b64 	%rd139, %rd138, 2;
	add.s64 	%rd140, %rd3, %rd139;
	st.global.v4.u32 	[%rd140], {%r163, %r165, %r164, %r166};
	setp.ne.s32 	%p234, %r74, 32512;
	add.s32 	%r74, %r74, 256;
	add.s32 	%r7970, %r74, %r168;
	setp.lt.s32 	%p235, %r7970, %r169;
	and.pred  	%p236, %p234, %p235;
	@%p236 bra 	$L__BB0_83;
	bra.uni 	$L__BB0_92;
$L__BB0_83:                             // %L1448
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_84 Depth 2
	or.b32  	%r547, %r74, %r105;
	and.b32  	%r548, %r547, 32544;
	or.b32  	%r549, %r51, %r548;
	shl.b32 	%r550, %r549, 13;
	add.s32 	%r551, %r53, %r550;
	shr.s32 	%r552, %r551, 31;
	shr.u32 	%r553, %r552, 4;
	add.s32 	%r554, %r551, %r553;
	shr.s32 	%r555, %r554, 28;
	setp.lt.s32 	%p204, %r551, 0;
	and.b32  	%r556, %r554, -268435456;
	setp.ne.s32 	%p205, %r556, %r551;
	and.pred  	%p206, %p204, %p205;
	selp.u32 	%r557, 1, 0, %p206;
	sub.s32 	%r558, %r557, %r555;
	shl.b32 	%r559, %r558, 28;
	add.s32 	%r560, %r559, %r551;
	mul.wide.s32 	%rd76, %r560, 4;
	add.s64 	%rd77, %rd2, %rd76;
	ld.global.v4.u32 	{%r561, %r562, %r563, %r564}, [%rd77];
	or.b32  	%r565, %r550, 524288;
	add.s32 	%r566, %r53, %r565;
	shr.s32 	%r567, %r566, 31;
	shr.u32 	%r568, %r567, 4;
	add.s32 	%r569, %r566, %r568;
	shr.s32 	%r570, %r569, 28;
	setp.lt.s32 	%p207, %r566, 0;
	and.b32  	%r571, %r569, -268435456;
	setp.ne.s32 	%p208, %r571, %r566;
	and.pred  	%p209, %p207, %p208;
	selp.u32 	%r572, 1, 0, %p209;
	sub.s32 	%r573, %r572, %r570;
	shl.b32 	%r574, %r573, 28;
	add.s32 	%r575, %r574, %r566;
	mul.wide.s32 	%rd78, %r575, 4;
	add.s64 	%rd79, %rd2, %rd78;
	ld.global.v4.u32 	{%r576, %r577, %r578, %r579}, [%rd79];
	or.b32  	%r580, %r550, 1048576;
	add.s32 	%r581, %r53, %r580;
	shr.s32 	%r582, %r581, 31;
	shr.u32 	%r583, %r582, 4;
	add.s32 	%r584, %r581, %r583;
	shr.s32 	%r585, %r584, 28;
	setp.lt.s32 	%p210, %r581, 0;
	and.b32  	%r586, %r584, -268435456;
	setp.ne.s32 	%p211, %r586, %r581;
	and.pred  	%p212, %p210, %p211;
	selp.u32 	%r587, 1, 0, %p212;
	sub.s32 	%r588, %r587, %r585;
	shl.b32 	%r589, %r588, 28;
	add.s32 	%r590, %r589, %r581;
	mul.wide.s32 	%rd80, %r590, 4;
	add.s64 	%rd81, %rd2, %rd80;
	ld.global.v4.u32 	{%r591, %r592, %r593, %r594}, [%rd81];
	or.b32  	%r595, %r550, 1572864;
	add.s32 	%r596, %r53, %r595;
	shr.s32 	%r597, %r596, 31;
	shr.u32 	%r598, %r597, 4;
	add.s32 	%r599, %r596, %r598;
	shr.s32 	%r600, %r599, 28;
	setp.lt.s32 	%p213, %r596, 0;
	and.b32  	%r601, %r599, -268435456;
	setp.ne.s32 	%p214, %r601, %r596;
	and.pred  	%p215, %p213, %p214;
	selp.u32 	%r602, 1, 0, %p215;
	sub.s32 	%r603, %r602, %r600;
	shl.b32 	%r604, %r603, 28;
	add.s32 	%r605, %r604, %r596;
	mul.wide.s32 	%rd82, %r605, 4;
	add.s64 	%rd83, %rd2, %rd82;
	ld.global.v4.u32 	{%r606, %r607, %r608, %r609}, [%rd83];
	selp.b32 	%r610, %r563, %r561, %p203;
	shfl.sync.bfly.b32	%r611, %r610, 8, 31, -1;
	selp.b32 	%r483, %r561, %r611, %p203;
	selp.b32 	%r484, %r611, %r563, %p203;
	selp.b32 	%r612, %r564, %r562, %p203;
	shfl.sync.bfly.b32	%r613, %r612, 8, 31, -1;
	selp.b32 	%r491, %r562, %r613, %p203;
	selp.b32 	%r492, %r613, %r564, %p203;
	selp.b32 	%r614, %r578, %r576, %p203;
	shfl.sync.bfly.b32	%r615, %r614, 8, 31, -1;
	selp.b32 	%r499, %r576, %r615, %p203;
	selp.b32 	%r500, %r615, %r578, %p203;
	selp.b32 	%r616, %r579, %r577, %p203;
	shfl.sync.bfly.b32	%r617, %r616, 8, 31, -1;
	selp.b32 	%r507, %r577, %r617, %p203;
	selp.b32 	%r508, %r617, %r579, %p203;
	selp.b32 	%r618, %r593, %r591, %p203;
	shfl.sync.bfly.b32	%r619, %r618, 8, 31, -1;
	selp.b32 	%r515, %r591, %r619, %p203;
	selp.b32 	%r516, %r619, %r593, %p203;
	selp.b32 	%r620, %r594, %r592, %p203;
	shfl.sync.bfly.b32	%r621, %r620, 8, 31, -1;
	selp.b32 	%r523, %r592, %r621, %p203;
	selp.b32 	%r524, %r621, %r594, %p203;
	selp.b32 	%r622, %r608, %r606, %p203;
	shfl.sync.bfly.b32	%r623, %r622, 8, 31, -1;
	selp.b32 	%r531, %r606, %r623, %p203;
	selp.b32 	%r532, %r623, %r608, %p203;
	selp.b32 	%r624, %r609, %r607, %p203;
	shfl.sync.bfly.b32	%r625, %r624, 8, 31, -1;
	selp.b32 	%r539, %r607, %r625, %p203;
	selp.b32 	%r540, %r625, %r609, %p203;
	mov.u32 	%r541, 21520;
	// begin inline asm
	prmt.b32 %r482, %r483, %r484, %r541;
	// end inline asm
	mov.u32 	%r545, 30258;
	// begin inline asm
	prmt.b32 %r486, %r483, %r484, %r545;
	// end inline asm
	// begin inline asm
	prmt.b32 %r490, %r491, %r492, %r541;
	// end inline asm
	// begin inline asm
	prmt.b32 %r494, %r491, %r492, %r545;
	// end inline asm
	// begin inline asm
	prmt.b32 %r498, %r499, %r500, %r541;
	// end inline asm
	// begin inline asm
	prmt.b32 %r502, %r499, %r500, %r545;
	// end inline asm
	// begin inline asm
	prmt.b32 %r506, %r507, %r508, %r541;
	// end inline asm
	// begin inline asm
	prmt.b32 %r510, %r507, %r508, %r545;
	// end inline asm
	// begin inline asm
	prmt.b32 %r514, %r515, %r516, %r541;
	// end inline asm
	// begin inline asm
	prmt.b32 %r518, %r515, %r516, %r545;
	// end inline asm
	// begin inline asm
	prmt.b32 %r522, %r523, %r524, %r541;
	// end inline asm
	// begin inline asm
	prmt.b32 %r526, %r523, %r524, %r545;
	// end inline asm
	// begin inline asm
	prmt.b32 %r530, %r531, %r532, %r541;
	// end inline asm
	// begin inline asm
	prmt.b32 %r534, %r531, %r532, %r545;
	// end inline asm
	// begin inline asm
	prmt.b32 %r538, %r539, %r540, %r541;
	// end inline asm
	// begin inline asm
	prmt.b32 %r542, %r539, %r540, %r545;
	// end inline asm
	st.shared.u32 	[%rd8], %r482;
	st.shared.u32 	[%rd9+128], %r486;
	st.shared.u32 	[%rd9+4], %r490;
	st.shared.u32 	[%rd9+132], %r494;
	st.shared.u32 	[%rd8+8324], %r498;
	st.shared.u32 	[%rd10], %r502;
	st.shared.u32 	[%rd11], %r506;
	st.shared.u32 	[%rd12], %r510;
	st.shared.u32 	[%rd8+16648], %r514;
	st.shared.u32 	[%rd13], %r518;
	st.shared.u32 	[%rd14], %r522;
	st.shared.u32 	[%rd15], %r526;
	st.shared.u32 	[%rd8+24972], %r530;
	st.shared.u32 	[%rd16], %r534;
	st.shared.u32 	[%rd17], %r538;
	st.shared.u32 	[%rd18], %r542;
	bar.sync 	0;
	or.b32  	%r626, %r74, %r192;
	or.b32  	%r627, %r626, %r56;
	or.b32  	%r75, %r627, %r118;
	shr.u32 	%r7995, %r75, 6;
	mov.u64 	%rd145, %rd22;
	mov.u64 	%rd146, %rd21;
	mov.u64 	%rd147, %rd20;
	mov.u64 	%rd148, %rd19;
	mov.u32 	%r8008, %r7974;
$L__BB0_84:                             // %L11716
                                        //   Parent Loop BB0_83 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add.s32 	%r7812, %r75, %r8008;
	and.b32  	%r7813, %r7812, 1;
	neg.s32 	%r7814, %r7813;
	and.b32  	%r7815, %r7814, 1040;
	bfe.s32 	%r7816, %r7812, 1, 1;
	and.b32  	%r7817, %r7816, 520;
	bfe.s32 	%r7818, %r7812, 2, 1;
	and.b32  	%r7819, %r7818, 260;
	bfe.s32 	%r7820, %r7812, 4, 1;
	and.b32  	%r7821, %r7820, 65;
	bfe.s32 	%r7822, %r7812, 3, 1;
	and.b32  	%r7823, %r7822, 130;
	and.b32  	%r7824, %r7995, 3;
	mul.lo.s32 	%r7825, %r7824, 2081;
	or.b32  	%r7826, %r57, %r7815;
	or.b32  	%r7827, %r7826, %r7817;
	add.s32 	%r7828, %r7827, %r7819;
	add.s32 	%r7829, %r7828, %r7821;
	add.s32 	%r7830, %r7829, %r7823;
	add.s32 	%r7831, %r7830, %r7825;
	mul.wide.u32 	%rd84, %r7831, 4;
	add.s64 	%rd86, %rd46, %rd84;
	ld.shared.u32 	%r7832, [%rd86];
	or.b32  	%r7833, %r58, %r7815;
	add.s32 	%r7834, %r7833, %r7817;
	add.s32 	%r7835, %r7834, %r7819;
	add.s32 	%r7836, %r7835, %r7821;
	add.s32 	%r7837, %r7836, %r7823;
	add.s32 	%r7838, %r7837, %r7825;
	mul.wide.u32 	%rd87, %r7838, 4;
	add.s64 	%rd88, %rd46, %rd87;
	ld.shared.u32 	%r7839, [%rd88];
	add.s32 	%r7840, %r59, %r7815;
	or.b32  	%r7841, %r7840, %r7817;
	add.s32 	%r7842, %r7841, %r7819;
	add.s32 	%r7843, %r7842, %r7821;
	add.s32 	%r7844, %r7843, %r7823;
	add.s32 	%r7845, %r7844, %r7825;
	mul.wide.u32 	%rd89, %r7845, 4;
	add.s64 	%rd90, %rd46, %rd89;
	ld.shared.u32 	%r7846, [%rd90];
	add.s32 	%r7847, %r60, %r7815;
	add.s32 	%r7848, %r7847, %r7817;
	add.s32 	%r7849, %r7848, %r7819;
	add.s32 	%r7850, %r7849, %r7821;
	add.s32 	%r7851, %r7850, %r7823;
	add.s32 	%r7852, %r7851, %r7825;
	mul.wide.u32 	%rd91, %r7852, 4;
	add.s64 	%rd92, %rd46, %rd91;
	ld.shared.u32 	%r7853, [%rd92];
	// begin inline asm
	mov.b32 %r633, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r644, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r632, %r7832, -2004318072;
	mov.u32 	%r631, 983055;
	// begin inline asm
	lop3.b32 %r630, %r631, %r632, %r633, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r634, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r635, %r633, %r634;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r638, %r630, %r635;
	// end inline asm
	mov.u32 	%r642, 15728880;
	// begin inline asm
	lop3.b32 %r641, %r642, %r632, %r644, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r645, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r646, %r644, %r645;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r649, %r641, %r646;
	// end inline asm
	shr.u32 	%r654, %r632, 8;
	// begin inline asm
	lop3.b32 %r652, %r631, %r654, %r633, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r656, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r657, %r633, %r656;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r660, %r652, %r657;
	// end inline asm
	// begin inline asm
	lop3.b32 %r663, %r642, %r654, %r644, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r667, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r668, %r644, %r667;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r671, %r663, %r668;
	// end inline asm
	// begin inline asm
	mov.b32 %r679, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r690, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r678, %r7839, -2004318072;
	// begin inline asm
	lop3.b32 %r676, %r631, %r678, %r679, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r680, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r681, %r679, %r680;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r684, %r676, %r681;
	// end inline asm
	// begin inline asm
	lop3.b32 %r687, %r642, %r678, %r690, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r691, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r692, %r690, %r691;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r695, %r687, %r692;
	// end inline asm
	shr.u32 	%r700, %r678, 8;
	// begin inline asm
	lop3.b32 %r698, %r631, %r700, %r679, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r702, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r703, %r679, %r702;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r706, %r698, %r703;
	// end inline asm
	// begin inline asm
	lop3.b32 %r709, %r642, %r700, %r690, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r713, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r714, %r690, %r713;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r717, %r709, %r714;
	// end inline asm
	// begin inline asm
	mov.b32 %r725, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r736, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r724, %r7846, -2004318072;
	// begin inline asm
	lop3.b32 %r722, %r631, %r724, %r725, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r726, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r727, %r725, %r726;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r730, %r722, %r727;
	// end inline asm
	// begin inline asm
	lop3.b32 %r733, %r642, %r724, %r736, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r737, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r738, %r736, %r737;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r741, %r733, %r738;
	// end inline asm
	shr.u32 	%r746, %r724, 8;
	// begin inline asm
	lop3.b32 %r744, %r631, %r746, %r725, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r748, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r749, %r725, %r748;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r752, %r744, %r749;
	// end inline asm
	// begin inline asm
	lop3.b32 %r755, %r642, %r746, %r736, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r759, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r760, %r736, %r759;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r763, %r755, %r760;
	// end inline asm
	// begin inline asm
	mov.b32 %r771, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r782, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r770, %r7853, -2004318072;
	// begin inline asm
	lop3.b32 %r768, %r631, %r770, %r771, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r772, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r773, %r771, %r772;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r776, %r768, %r773;
	// end inline asm
	// begin inline asm
	lop3.b32 %r779, %r642, %r770, %r782, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r783, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r784, %r782, %r783;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r787, %r779, %r784;
	// end inline asm
	shr.u32 	%r792, %r770, 8;
	// begin inline asm
	lop3.b32 %r790, %r631, %r792, %r771, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r794, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r795, %r771, %r794;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r798, %r790, %r795;
	// end inline asm
	// begin inline asm
	lop3.b32 %r801, %r642, %r792, %r782, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r805, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r806, %r782, %r805;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r809, %r801, %r806;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r812, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r814, %r812, %r638;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r817, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r819, %r817, %r649;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r822, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r824, %r822, %r660;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r827, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r829, %r827, %r671;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r832, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r834, %r832, %r684;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r837, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r839, %r837, %r695;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r842, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r844, %r842, %r706;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r847, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r849, %r847, %r717;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r852, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r854, %r852, %r730;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r857, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r859, %r857, %r741;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r862, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r864, %r862, %r752;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r867, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r869, %r867, %r763;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r872, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r874, %r872, %r776;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r877, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r879, %r877, %r787;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r882, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r884, %r882, %r798;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r887, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r889, %r887, %r809;
	// end inline asm
	// begin inline asm
	mov.b32 %r897, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r908, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r896, %r7996, -2004318072;
	// begin inline asm
	lop3.b32 %r894, %r631, %r896, %r897, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r898, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r899, %r897, %r898;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r902, %r894, %r899;
	// end inline asm
	// begin inline asm
	lop3.b32 %r905, %r642, %r896, %r908, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r909, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r910, %r908, %r909;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r913, %r905, %r910;
	// end inline asm
	shr.u32 	%r918, %r896, 8;
	// begin inline asm
	lop3.b32 %r916, %r631, %r918, %r897, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r920, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r921, %r897, %r920;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r924, %r916, %r921;
	// end inline asm
	// begin inline asm
	lop3.b32 %r927, %r642, %r918, %r908, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r931, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r932, %r908, %r931;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r935, %r927, %r932;
	// end inline asm
	// begin inline asm
	mov.b32 %r943, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r954, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r942, %r7997, -2004318072;
	// begin inline asm
	lop3.b32 %r940, %r631, %r942, %r943, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r944, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r945, %r943, %r944;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r948, %r940, %r945;
	// end inline asm
	// begin inline asm
	lop3.b32 %r951, %r642, %r942, %r954, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r955, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r956, %r954, %r955;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r959, %r951, %r956;
	// end inline asm
	shr.u32 	%r964, %r942, 8;
	// begin inline asm
	lop3.b32 %r962, %r631, %r964, %r943, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r966, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r967, %r943, %r966;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r970, %r962, %r967;
	// end inline asm
	// begin inline asm
	lop3.b32 %r973, %r642, %r964, %r954, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r977, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r978, %r954, %r977;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r981, %r973, %r978;
	// end inline asm
	// begin inline asm
	mov.b32 %r989, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1000, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r988, %r7998, -2004318072;
	// begin inline asm
	lop3.b32 %r986, %r631, %r988, %r989, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r990, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r991, %r989, %r990;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r994, %r986, %r991;
	// end inline asm
	// begin inline asm
	lop3.b32 %r997, %r642, %r988, %r1000, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1001, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1002, %r1000, %r1001;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1005, %r997, %r1002;
	// end inline asm
	shr.u32 	%r1010, %r988, 8;
	// begin inline asm
	lop3.b32 %r1008, %r631, %r1010, %r989, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1012, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1013, %r989, %r1012;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1016, %r1008, %r1013;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1019, %r642, %r1010, %r1000, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1023, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1024, %r1000, %r1023;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1027, %r1019, %r1024;
	// end inline asm
	// begin inline asm
	mov.b32 %r1035, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1046, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1034, %r7999, -2004318072;
	// begin inline asm
	lop3.b32 %r1032, %r631, %r1034, %r1035, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1036, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1037, %r1035, %r1036;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1040, %r1032, %r1037;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1043, %r642, %r1034, %r1046, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1047, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1048, %r1046, %r1047;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1051, %r1043, %r1048;
	// end inline asm
	shr.u32 	%r1056, %r1034, 8;
	// begin inline asm
	lop3.b32 %r1054, %r631, %r1056, %r1035, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1058, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1059, %r1035, %r1058;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1062, %r1054, %r1059;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1065, %r642, %r1056, %r1046, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1069, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1070, %r1046, %r1069;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1073, %r1065, %r1070;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1076, %r210, %r902, %r814;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1080, %r210, %r913, %r819;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1084, %r210, %r924, %r824;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1088, %r210, %r935, %r829;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1092, %r210, %r948, %r834;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1096, %r210, %r959, %r839;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1100, %r210, %r970, %r844;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1104, %r210, %r981, %r849;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1108, %r210, %r994, %r854;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1112, %r210, %r1005, %r859;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1116, %r210, %r1016, %r864;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1120, %r210, %r1027, %r869;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1124, %r210, %r1040, %r874;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1128, %r210, %r1051, %r879;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1132, %r210, %r1062, %r884;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1136, %r210, %r1073, %r889;
	// end inline asm
	// begin inline asm
	mov.b32 %r1145, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1156, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1144, %r8000, -2004318072;
	// begin inline asm
	lop3.b32 %r1142, %r631, %r1144, %r1145, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1146, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1147, %r1145, %r1146;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1150, %r1142, %r1147;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1153, %r642, %r1144, %r1156, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1157, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1158, %r1156, %r1157;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1161, %r1153, %r1158;
	// end inline asm
	shr.u32 	%r1166, %r1144, 8;
	// begin inline asm
	lop3.b32 %r1164, %r631, %r1166, %r1145, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1168, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1169, %r1145, %r1168;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1172, %r1164, %r1169;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1175, %r642, %r1166, %r1156, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1179, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1180, %r1156, %r1179;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1183, %r1175, %r1180;
	// end inline asm
	// begin inline asm
	mov.b32 %r1191, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1202, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1190, %r8001, -2004318072;
	// begin inline asm
	lop3.b32 %r1188, %r631, %r1190, %r1191, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1192, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1193, %r1191, %r1192;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1196, %r1188, %r1193;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1199, %r642, %r1190, %r1202, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1203, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1204, %r1202, %r1203;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1207, %r1199, %r1204;
	// end inline asm
	shr.u32 	%r1212, %r1190, 8;
	// begin inline asm
	lop3.b32 %r1210, %r631, %r1212, %r1191, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1214, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1215, %r1191, %r1214;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1218, %r1210, %r1215;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1221, %r642, %r1212, %r1202, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1225, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1226, %r1202, %r1225;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1229, %r1221, %r1226;
	// end inline asm
	// begin inline asm
	mov.b32 %r1237, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1248, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1236, %r8002, -2004318072;
	// begin inline asm
	lop3.b32 %r1234, %r631, %r1236, %r1237, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1238, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1239, %r1237, %r1238;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1242, %r1234, %r1239;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1245, %r642, %r1236, %r1248, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1249, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1250, %r1248, %r1249;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1253, %r1245, %r1250;
	// end inline asm
	shr.u32 	%r1258, %r1236, 8;
	// begin inline asm
	lop3.b32 %r1256, %r631, %r1258, %r1237, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1260, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1261, %r1237, %r1260;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1264, %r1256, %r1261;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1267, %r642, %r1258, %r1248, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1271, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1272, %r1248, %r1271;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1275, %r1267, %r1272;
	// end inline asm
	// begin inline asm
	mov.b32 %r1283, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1294, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1282, %r8003, -2004318072;
	// begin inline asm
	lop3.b32 %r1280, %r631, %r1282, %r1283, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1284, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1285, %r1283, %r1284;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1288, %r1280, %r1285;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1291, %r642, %r1282, %r1294, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1295, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1296, %r1294, %r1295;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1299, %r1291, %r1296;
	// end inline asm
	shr.u32 	%r1304, %r1282, 8;
	// begin inline asm
	lop3.b32 %r1302, %r631, %r1304, %r1283, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1306, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1307, %r1283, %r1306;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1310, %r1302, %r1307;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1313, %r642, %r1304, %r1294, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1317, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1318, %r1294, %r1317;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1321, %r1313, %r1318;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1324, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1326, %r1324, %r1150, %r1076;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1330, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1332, %r1330, %r1161, %r1080;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1336, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1338, %r1336, %r1172, %r1084;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1342, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1344, %r1342, %r1183, %r1088;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1348, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1350, %r1348, %r1196, %r1092;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1354, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1356, %r1354, %r1207, %r1096;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1360, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1362, %r1360, %r1218, %r1100;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1366, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1368, %r1366, %r1229, %r1104;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1372, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1374, %r1372, %r1242, %r1108;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1378, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1380, %r1378, %r1253, %r1112;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1384, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1386, %r1384, %r1264, %r1116;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1390, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1392, %r1390, %r1275, %r1120;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1396, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1398, %r1396, %r1288, %r1124;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1402, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1404, %r1402, %r1299, %r1128;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1408, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1410, %r1408, %r1310, %r1132;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1414, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1416, %r1414, %r1321, %r1136;
	// end inline asm
	// begin inline asm
	mov.b32 %r1425, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1436, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1424, %r8004, -2004318072;
	// begin inline asm
	lop3.b32 %r1422, %r631, %r1424, %r1425, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1426, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1427, %r1425, %r1426;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1430, %r1422, %r1427;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1433, %r642, %r1424, %r1436, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1437, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1438, %r1436, %r1437;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1441, %r1433, %r1438;
	// end inline asm
	shr.u32 	%r1446, %r1424, 8;
	// begin inline asm
	lop3.b32 %r1444, %r631, %r1446, %r1425, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1448, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1449, %r1425, %r1448;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1452, %r1444, %r1449;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1455, %r642, %r1446, %r1436, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1459, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1460, %r1436, %r1459;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1463, %r1455, %r1460;
	// end inline asm
	// begin inline asm
	mov.b32 %r1471, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1482, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1470, %r8005, -2004318072;
	// begin inline asm
	lop3.b32 %r1468, %r631, %r1470, %r1471, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1472, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1473, %r1471, %r1472;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1476, %r1468, %r1473;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1479, %r642, %r1470, %r1482, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1483, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1484, %r1482, %r1483;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1487, %r1479, %r1484;
	// end inline asm
	shr.u32 	%r1492, %r1470, 8;
	// begin inline asm
	lop3.b32 %r1490, %r631, %r1492, %r1471, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1494, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1495, %r1471, %r1494;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1498, %r1490, %r1495;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1501, %r642, %r1492, %r1482, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1505, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1506, %r1482, %r1505;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1509, %r1501, %r1506;
	// end inline asm
	// begin inline asm
	mov.b32 %r1517, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1528, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1516, %r8006, -2004318072;
	// begin inline asm
	lop3.b32 %r1514, %r631, %r1516, %r1517, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1518, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1519, %r1517, %r1518;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1522, %r1514, %r1519;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1525, %r642, %r1516, %r1528, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1529, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1530, %r1528, %r1529;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1533, %r1525, %r1530;
	// end inline asm
	shr.u32 	%r1538, %r1516, 8;
	// begin inline asm
	lop3.b32 %r1536, %r631, %r1538, %r1517, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1540, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1541, %r1517, %r1540;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1544, %r1536, %r1541;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1547, %r642, %r1538, %r1528, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1551, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1552, %r1528, %r1551;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1555, %r1547, %r1552;
	// end inline asm
	// begin inline asm
	mov.b32 %r1563, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1574, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1562, %r8007, -2004318072;
	// begin inline asm
	lop3.b32 %r1560, %r631, %r1562, %r1563, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1564, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1565, %r1563, %r1564;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1568, %r1560, %r1565;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1571, %r642, %r1562, %r1574, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1575, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1576, %r1574, %r1575;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1579, %r1571, %r1576;
	// end inline asm
	shr.u32 	%r1584, %r1562, 8;
	// begin inline asm
	lop3.b32 %r1582, %r631, %r1584, %r1563, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1586, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1587, %r1563, %r1586;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1590, %r1582, %r1587;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1593, %r642, %r1584, %r1574, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1597, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1598, %r1574, %r1597;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1601, %r1593, %r1598;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1675, %r246, %r1430, %r1326;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1672, %r246, %r1441, %r1332;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1684, %r246, %r1452, %r1338;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1681, %r246, %r1463, %r1344;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1693, %r246, %r1476, %r1350;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1690, %r246, %r1487, %r1356;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1702, %r246, %r1498, %r1362;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1699, %r246, %r1509, %r1368;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1711, %r246, %r1522, %r1374;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1708, %r246, %r1533, %r1380;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1720, %r246, %r1544, %r1386;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1717, %r246, %r1555, %r1392;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1729, %r246, %r1568, %r1398;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1726, %r246, %r1579, %r1404;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1738, %r246, %r1590, %r1410;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1735, %r246, %r1601, %r1416;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1668, %r270;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1670, %r1668, %r1672;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1673, %r267, %r1675, %r1670;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1677, %r270;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1679, %r1677, %r1681;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1682, %r267, %r1684, %r1679;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1686, %r270;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1688, %r1686, %r1690;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1691, %r267, %r1693, %r1688;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1695, %r270;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1697, %r1695, %r1699;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1700, %r267, %r1702, %r1697;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1704, %r270;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1706, %r1704, %r1708;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1709, %r267, %r1711, %r1706;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1713, %r270;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1715, %r1713, %r1717;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1718, %r267, %r1720, %r1715;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1722, %r270;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1724, %r1722, %r1726;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1727, %r267, %r1729, %r1724;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1731, %r270;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1733, %r1731, %r1735;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1736, %r267, %r1738, %r1733;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1740, %r270, %r1675;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1743, %r267, %r1672, %r1740;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1747, %r270, %r1684;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1750, %r267, %r1681, %r1747;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1754, %r270, %r1693;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1757, %r267, %r1690, %r1754;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1761, %r270, %r1702;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1764, %r267, %r1699, %r1761;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1768, %r270, %r1711;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1771, %r267, %r1708, %r1768;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1775, %r270, %r1720;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1778, %r267, %r1717, %r1775;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1782, %r270, %r1729;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1785, %r267, %r1726, %r1782;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1789, %r270, %r1738;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1792, %r267, %r1735, %r1789;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1883, %r1880}, {%r326, %r332, %r329, %r335}, {%r1673, %r1743}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1892, %r1889}, {%r326, %r332, %r329, %r335}, {%r1682, %r1750}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1901, %r1898}, {%r326, %r332, %r329, %r335}, {%r1691, %r1757}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1910, %r1907}, {%r326, %r332, %r329, %r335}, {%r1700, %r1764}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1919, %r1916}, {%r326, %r332, %r329, %r335}, {%r1709, %r1771}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1928, %r1925}, {%r326, %r332, %r329, %r335}, {%r1718, %r1778}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1937, %r1934}, {%r326, %r332, %r329, %r335}, {%r1727, %r1785}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1946, %r1943}, {%r326, %r332, %r329, %r335}, {%r1736, %r1792}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1876, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1878, %r1876, %r1880;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1881, %r370, %r1883, %r1878;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1885, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1887, %r1885, %r1889;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1890, %r370, %r1892, %r1887;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1894, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1896, %r1894, %r1898;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1899, %r370, %r1901, %r1896;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1903, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1905, %r1903, %r1907;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1908, %r370, %r1910, %r1905;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1912, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1914, %r1912, %r1916;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1917, %r370, %r1919, %r1914;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1921, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1923, %r1921, %r1925;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1926, %r370, %r1928, %r1923;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1930, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1932, %r1930, %r1934;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1935, %r370, %r1937, %r1932;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1939, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1941, %r1939, %r1943;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1944, %r370, %r1946, %r1941;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1948, %r373, %r1883;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1951, %r370, %r1880, %r1948;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1955, %r373, %r1892;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1958, %r370, %r1889, %r1955;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1962, %r373, %r1901;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1965, %r370, %r1898, %r1962;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1969, %r373, %r1910;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1972, %r370, %r1907, %r1969;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1976, %r373, %r1919;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1979, %r370, %r1916, %r1976;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1983, %r373, %r1928;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1986, %r370, %r1925, %r1983;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1990, %r373, %r1937;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1993, %r370, %r1934, %r1990;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1997, %r373, %r1946;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2000, %r370, %r1943, %r1997;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2004, %r2005}, {%r404, %r410, %r407, %r413}, {%r1881, %r1951}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2014, %r2015}, {%r404, %r410, %r407, %r413}, {%r1890, %r1958}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2024, %r2025}, {%r404, %r410, %r407, %r413}, {%r1899, %r1965}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2034, %r2035}, {%r404, %r410, %r407, %r413}, {%r1908, %r1972}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2044, %r2045}, {%r404, %r410, %r407, %r413}, {%r1917, %r1979}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2054, %r2055}, {%r404, %r410, %r407, %r413}, {%r1926, %r1986}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2064, %r2065}, {%r404, %r410, %r407, %r413}, {%r1935, %r1993}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2074, %r2075}, {%r404, %r410, %r407, %r413}, {%r1944, %r2000}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2084, %r113, %r2004;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2087, %r113, %r2005;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2090, %r113, %r2014;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2093, %r113, %r2015;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2096, %r113, %r2024;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2099, %r113, %r2025;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2102, %r113, %r2034;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2105, %r113, %r2035;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2108, %r113, %r2044;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2111, %r113, %r2045;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2114, %r113, %r2054;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2117, %r113, %r2055;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2120, %r113, %r2064;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2123, %r113, %r2065;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2126, %r113, %r2074;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2129, %r113, %r2075;
	// end inline asm
	// begin inline asm
	mov.b32 %r2132, {%rs1142, %rs1142};
	// end inline asm
	mov.u16 	%rs195, 18176;
	// begin inline asm
	mov.b32 %r2133, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2134, %r2084, %r2132;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2137, %r2134, %r2133;
	// end inline asm
	// begin inline asm
	mov.b32 %r2140, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2141, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2142, %r2087, %r2140;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2145, %r2142, %r2141;
	// end inline asm
	// begin inline asm
	mov.b32 %r2148, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2149, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2150, %r2090, %r2148;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2153, %r2150, %r2149;
	// end inline asm
	// begin inline asm
	mov.b32 %r2156, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2157, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2158, %r2093, %r2156;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2161, %r2158, %r2157;
	// end inline asm
	// begin inline asm
	mov.b32 %r2164, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2165, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2166, %r2096, %r2164;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2169, %r2166, %r2165;
	// end inline asm
	// begin inline asm
	mov.b32 %r2172, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2173, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2174, %r2099, %r2172;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2177, %r2174, %r2173;
	// end inline asm
	// begin inline asm
	mov.b32 %r2180, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2181, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2182, %r2102, %r2180;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2185, %r2182, %r2181;
	// end inline asm
	// begin inline asm
	mov.b32 %r2188, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2189, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2190, %r2105, %r2188;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2193, %r2190, %r2189;
	// end inline asm
	// begin inline asm
	mov.b32 %r2196, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2197, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2198, %r2108, %r2196;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2201, %r2198, %r2197;
	// end inline asm
	// begin inline asm
	mov.b32 %r2204, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2205, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2206, %r2111, %r2204;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2209, %r2206, %r2205;
	// end inline asm
	// begin inline asm
	mov.b32 %r2212, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2213, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2214, %r2114, %r2212;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2217, %r2214, %r2213;
	// end inline asm
	// begin inline asm
	mov.b32 %r2220, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2221, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2222, %r2117, %r2220;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2225, %r2222, %r2221;
	// end inline asm
	// begin inline asm
	mov.b32 %r2228, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2229, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2230, %r2120, %r2228;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2233, %r2230, %r2229;
	// end inline asm
	// begin inline asm
	mov.b32 %r2236, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2237, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2238, %r2123, %r2236;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2241, %r2238, %r2237;
	// end inline asm
	// begin inline asm
	mov.b32 %r2244, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2245, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2246, %r2126, %r2244;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2249, %r2246, %r2245;
	// end inline asm
	// begin inline asm
	mov.b32 %r2252, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2253, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2254, %r2129, %r2252;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2257, %r2254, %r2253;
	// end inline asm
	// begin inline asm
	mov.b32 %r2263, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2261, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2262, %r2263, %r2261;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2265, %r2137, %r2262;
	// end inline asm
	// begin inline asm
	mov.b32 %r2268, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2269, %r2263, %r2268;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2272, %r2145, %r2269;
	// end inline asm
	// begin inline asm
	mov.b32 %r2275, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2276, %r2263, %r2275;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2279, %r2153, %r2276;
	// end inline asm
	// begin inline asm
	mov.b32 %r2282, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2283, %r2263, %r2282;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2286, %r2161, %r2283;
	// end inline asm
	mov.u32 	%r2292, 25152;
	// begin inline asm
	prmt.b32 %r2289, %r2265, %r2279, %r2292;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2293, %r2272, %r2286, %r2292;
	// end inline asm
	shl.b32 	%r2300, %r2293, 4;
	mov.u32 	%r2298, 252645135;
	// begin inline asm
	lop3.b32 %r2297, %r2298, %r2289, %r2300, 202;
	// end inline asm
	xor.b32  	%r7854, %r2297, -2004318072;
	// begin inline asm
	mov.b32 %r2304, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2302, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2303, %r2304, %r2302;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2306, %r2169, %r2303;
	// end inline asm
	// begin inline asm
	mov.b32 %r2309, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2310, %r2304, %r2309;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2313, %r2177, %r2310;
	// end inline asm
	// begin inline asm
	mov.b32 %r2316, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2317, %r2304, %r2316;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2320, %r2185, %r2317;
	// end inline asm
	// begin inline asm
	mov.b32 %r2323, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2324, %r2304, %r2323;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2327, %r2193, %r2324;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2330, %r2306, %r2320, %r2292;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2334, %r2313, %r2327, %r2292;
	// end inline asm
	shl.b32 	%r2341, %r2334, 4;
	// begin inline asm
	lop3.b32 %r2338, %r2298, %r2330, %r2341, 202;
	// end inline asm
	xor.b32  	%r7855, %r2338, -2004318072;
	// begin inline asm
	mov.b32 %r2345, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2343, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2344, %r2345, %r2343;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2347, %r2201, %r2344;
	// end inline asm
	// begin inline asm
	mov.b32 %r2350, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2351, %r2345, %r2350;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2354, %r2209, %r2351;
	// end inline asm
	// begin inline asm
	mov.b32 %r2357, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2358, %r2345, %r2357;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2361, %r2217, %r2358;
	// end inline asm
	// begin inline asm
	mov.b32 %r2364, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2365, %r2345, %r2364;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2368, %r2225, %r2365;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2371, %r2347, %r2361, %r2292;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2375, %r2354, %r2368, %r2292;
	// end inline asm
	shl.b32 	%r2382, %r2375, 4;
	// begin inline asm
	lop3.b32 %r2379, %r2298, %r2371, %r2382, 202;
	// end inline asm
	xor.b32  	%r7856, %r2379, -2004318072;
	// begin inline asm
	mov.b32 %r2386, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2384, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2385, %r2386, %r2384;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2388, %r2233, %r2385;
	// end inline asm
	// begin inline asm
	mov.b32 %r2391, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2392, %r2386, %r2391;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2395, %r2241, %r2392;
	// end inline asm
	// begin inline asm
	mov.b32 %r2398, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2399, %r2386, %r2398;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2402, %r2249, %r2399;
	// end inline asm
	// begin inline asm
	mov.b32 %r2405, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2406, %r2386, %r2405;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2409, %r2257, %r2406;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2412, %r2388, %r2402, %r2292;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2416, %r2395, %r2409, %r2292;
	// end inline asm
	shl.b32 	%r2423, %r2416, 4;
	// begin inline asm
	lop3.b32 %r2420, %r2298, %r2412, %r2423, 202;
	// end inline asm
	xor.b32  	%r7857, %r2420, -2004318072;
	st.shared.u32 	[%rd145], %r7854;
	st.shared.u32 	[%rd146], %r7855;
	st.shared.u32 	[%rd147], %r7856;
	st.shared.u32 	[%rd148], %r7857;
	ld.shared.u32 	%r7996, [%rd86];
	ld.shared.u32 	%r7997, [%rd88];
	ld.shared.u32 	%r7998, [%rd90];
	ld.shared.u32 	%r7999, [%rd92];
	// begin inline asm
	mov.b32 %r2429, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2440, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2428, %r7996, -2004318072;
	// begin inline asm
	lop3.b32 %r2426, %r631, %r2428, %r2429, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2430, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2431, %r2429, %r2430;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2434, %r2426, %r2431;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2437, %r642, %r2428, %r2440, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2441, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2442, %r2440, %r2441;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2445, %r2437, %r2442;
	// end inline asm
	shr.u32 	%r2450, %r2428, 8;
	// begin inline asm
	lop3.b32 %r2448, %r631, %r2450, %r2429, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2452, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2453, %r2429, %r2452;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2456, %r2448, %r2453;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2459, %r642, %r2450, %r2440, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2463, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2464, %r2440, %r2463;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2467, %r2459, %r2464;
	// end inline asm
	// begin inline asm
	mov.b32 %r2475, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2486, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2474, %r7997, -2004318072;
	// begin inline asm
	lop3.b32 %r2472, %r631, %r2474, %r2475, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2476, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2477, %r2475, %r2476;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2480, %r2472, %r2477;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2483, %r642, %r2474, %r2486, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2487, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2488, %r2486, %r2487;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2491, %r2483, %r2488;
	// end inline asm
	shr.u32 	%r2496, %r2474, 8;
	// begin inline asm
	lop3.b32 %r2494, %r631, %r2496, %r2475, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2498, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2499, %r2475, %r2498;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2502, %r2494, %r2499;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2505, %r642, %r2496, %r2486, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2509, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2510, %r2486, %r2509;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2513, %r2505, %r2510;
	// end inline asm
	// begin inline asm
	mov.b32 %r2521, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2532, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2520, %r7998, -2004318072;
	// begin inline asm
	lop3.b32 %r2518, %r631, %r2520, %r2521, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2522, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2523, %r2521, %r2522;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2526, %r2518, %r2523;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2529, %r642, %r2520, %r2532, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2533, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2534, %r2532, %r2533;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2537, %r2529, %r2534;
	// end inline asm
	shr.u32 	%r2542, %r2520, 8;
	// begin inline asm
	lop3.b32 %r2540, %r631, %r2542, %r2521, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2544, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2545, %r2521, %r2544;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2548, %r2540, %r2545;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2551, %r642, %r2542, %r2532, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2555, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2556, %r2532, %r2555;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2559, %r2551, %r2556;
	// end inline asm
	// begin inline asm
	mov.b32 %r2567, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2578, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2566, %r7999, -2004318072;
	// begin inline asm
	lop3.b32 %r2564, %r631, %r2566, %r2567, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2568, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2569, %r2567, %r2568;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2572, %r2564, %r2569;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2575, %r642, %r2566, %r2578, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2579, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2580, %r2578, %r2579;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2583, %r2575, %r2580;
	// end inline asm
	shr.u32 	%r2588, %r2566, 8;
	// begin inline asm
	lop3.b32 %r2586, %r631, %r2588, %r2567, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2590, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2591, %r2567, %r2590;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2594, %r2586, %r2591;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2597, %r642, %r2588, %r2578, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2601, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2602, %r2578, %r2601;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2605, %r2597, %r2602;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2608, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2610, %r2608, %r2434;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2613, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2615, %r2613, %r2445;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2618, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2620, %r2618, %r2456;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2623, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2625, %r2623, %r2467;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2628, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2630, %r2628, %r2480;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2633, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2635, %r2633, %r2491;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2638, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2640, %r2638, %r2502;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2643, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2645, %r2643, %r2513;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2648, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2650, %r2648, %r2526;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2653, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2655, %r2653, %r2537;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2658, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2660, %r2658, %r2548;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2663, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2665, %r2663, %r2559;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2668, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2670, %r2668, %r2572;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2673, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2675, %r2673, %r2583;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2678, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2680, %r2678, %r2594;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2683, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2685, %r2683, %r2605;
	// end inline asm
	// begin inline asm
	mov.b32 %r2693, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2704, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2690, %r631, %r1144, %r2693, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2694, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2695, %r2693, %r2694;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2698, %r2690, %r2695;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2701, %r642, %r1144, %r2704, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2705, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2706, %r2704, %r2705;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2709, %r2701, %r2706;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2712, %r631, %r1166, %r2693, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2716, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2717, %r2693, %r2716;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2720, %r2712, %r2717;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2723, %r642, %r1166, %r2704, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2727, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2728, %r2704, %r2727;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2731, %r2723, %r2728;
	// end inline asm
	// begin inline asm
	mov.b32 %r2739, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2750, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2736, %r631, %r1190, %r2739, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2740, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2741, %r2739, %r2740;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2744, %r2736, %r2741;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2747, %r642, %r1190, %r2750, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2751, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2752, %r2750, %r2751;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2755, %r2747, %r2752;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2758, %r631, %r1212, %r2739, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2762, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2763, %r2739, %r2762;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2766, %r2758, %r2763;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2769, %r642, %r1212, %r2750, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2773, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2774, %r2750, %r2773;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2777, %r2769, %r2774;
	// end inline asm
	// begin inline asm
	mov.b32 %r2785, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2796, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2782, %r631, %r1236, %r2785, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2786, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2787, %r2785, %r2786;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2790, %r2782, %r2787;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2793, %r642, %r1236, %r2796, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2797, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2798, %r2796, %r2797;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2801, %r2793, %r2798;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2804, %r631, %r1258, %r2785, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2808, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2809, %r2785, %r2808;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2812, %r2804, %r2809;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2815, %r642, %r1258, %r2796, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2819, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2820, %r2796, %r2819;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2823, %r2815, %r2820;
	// end inline asm
	// begin inline asm
	mov.b32 %r2831, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2842, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2828, %r631, %r1282, %r2831, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2832, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2833, %r2831, %r2832;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2836, %r2828, %r2833;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2839, %r642, %r1282, %r2842, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2843, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2844, %r2842, %r2843;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2847, %r2839, %r2844;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2850, %r631, %r1304, %r2831, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2854, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2855, %r2831, %r2854;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2858, %r2850, %r2855;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2861, %r642, %r1304, %r2842, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2865, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2866, %r2842, %r2865;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2869, %r2861, %r2866;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2872, %r210, %r2698, %r2610;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2876, %r210, %r2709, %r2615;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2880, %r210, %r2720, %r2620;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2884, %r210, %r2731, %r2625;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2888, %r210, %r2744, %r2630;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2892, %r210, %r2755, %r2635;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2896, %r210, %r2766, %r2640;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2900, %r210, %r2777, %r2645;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2904, %r210, %r2790, %r2650;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2908, %r210, %r2801, %r2655;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2912, %r210, %r2812, %r2660;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2916, %r210, %r2823, %r2665;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2920, %r210, %r2836, %r2670;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2924, %r210, %r2847, %r2675;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2928, %r210, %r2858, %r2680;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2932, %r210, %r2869, %r2685;
	// end inline asm
	// begin inline asm
	mov.b32 %r2941, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2952, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2938, %r631, %r1424, %r2941, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2942, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2943, %r2941, %r2942;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2946, %r2938, %r2943;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2949, %r642, %r1424, %r2952, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2953, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2954, %r2952, %r2953;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2957, %r2949, %r2954;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2960, %r631, %r1446, %r2941, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2964, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2965, %r2941, %r2964;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2968, %r2960, %r2965;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2971, %r642, %r1446, %r2952, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2975, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2976, %r2952, %r2975;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2979, %r2971, %r2976;
	// end inline asm
	// begin inline asm
	mov.b32 %r2987, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2998, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2984, %r631, %r1470, %r2987, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2988, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2989, %r2987, %r2988;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2992, %r2984, %r2989;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2995, %r642, %r1470, %r2998, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2999, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3000, %r2998, %r2999;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3003, %r2995, %r3000;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3006, %r631, %r1492, %r2987, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3010, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3011, %r2987, %r3010;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3014, %r3006, %r3011;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3017, %r642, %r1492, %r2998, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3021, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3022, %r2998, %r3021;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3025, %r3017, %r3022;
	// end inline asm
	// begin inline asm
	mov.b32 %r3033, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3044, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3030, %r631, %r1516, %r3033, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3034, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3035, %r3033, %r3034;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3038, %r3030, %r3035;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3041, %r642, %r1516, %r3044, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3045, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3046, %r3044, %r3045;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3049, %r3041, %r3046;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3052, %r631, %r1538, %r3033, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3056, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3057, %r3033, %r3056;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3060, %r3052, %r3057;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3063, %r642, %r1538, %r3044, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3067, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3068, %r3044, %r3067;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3071, %r3063, %r3068;
	// end inline asm
	// begin inline asm
	mov.b32 %r3079, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3090, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3076, %r631, %r1562, %r3079, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3080, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3081, %r3079, %r3080;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3084, %r3076, %r3081;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3087, %r642, %r1562, %r3090, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3091, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3092, %r3090, %r3091;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3095, %r3087, %r3092;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3098, %r631, %r1584, %r3079, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3102, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3103, %r3079, %r3102;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3106, %r3098, %r3103;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3109, %r642, %r1584, %r3090, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3113, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3114, %r3090, %r3113;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3117, %r3109, %r3114;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3120, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3122, %r3120, %r2946, %r2872;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3126, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3128, %r3126, %r2957, %r2876;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3132, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3134, %r3132, %r2968, %r2880;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3138, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3140, %r3138, %r2979, %r2884;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3144, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3146, %r3144, %r2992, %r2888;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3150, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3152, %r3150, %r3003, %r2892;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3156, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3158, %r3156, %r3014, %r2896;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3162, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3164, %r3162, %r3025, %r2900;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3168, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3170, %r3168, %r3038, %r2904;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3174, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3176, %r3174, %r3049, %r2908;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3180, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3182, %r3180, %r3060, %r2912;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3186, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3188, %r3186, %r3071, %r2916;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3192, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3194, %r3192, %r3084, %r2920;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3198, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3200, %r3198, %r3095, %r2924;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3204, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3206, %r3204, %r3106, %r2928;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3210, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3212, %r3210, %r3117, %r2932;
	// end inline asm
	// begin inline asm
	mov.b32 %r3221, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3232, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3218, %r631, %r632, %r3221, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3222, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3223, %r3221, %r3222;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3226, %r3218, %r3223;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3229, %r642, %r632, %r3232, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3233, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3234, %r3232, %r3233;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3237, %r3229, %r3234;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3240, %r631, %r654, %r3221, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3244, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3245, %r3221, %r3244;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3248, %r3240, %r3245;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3251, %r642, %r654, %r3232, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3255, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3256, %r3232, %r3255;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3259, %r3251, %r3256;
	// end inline asm
	// begin inline asm
	mov.b32 %r3267, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3278, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3264, %r631, %r678, %r3267, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3268, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3269, %r3267, %r3268;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3272, %r3264, %r3269;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3275, %r642, %r678, %r3278, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3279, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3280, %r3278, %r3279;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3283, %r3275, %r3280;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3286, %r631, %r700, %r3267, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3290, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3291, %r3267, %r3290;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3294, %r3286, %r3291;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3297, %r642, %r700, %r3278, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3301, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3302, %r3278, %r3301;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3305, %r3297, %r3302;
	// end inline asm
	// begin inline asm
	mov.b32 %r3313, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3324, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3310, %r631, %r724, %r3313, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3314, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3315, %r3313, %r3314;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3318, %r3310, %r3315;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3321, %r642, %r724, %r3324, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3325, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3326, %r3324, %r3325;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3329, %r3321, %r3326;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3332, %r631, %r746, %r3313, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3336, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3337, %r3313, %r3336;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3340, %r3332, %r3337;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3343, %r642, %r746, %r3324, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3347, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3348, %r3324, %r3347;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3351, %r3343, %r3348;
	// end inline asm
	// begin inline asm
	mov.b32 %r3359, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3370, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3356, %r631, %r770, %r3359, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3360, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3361, %r3359, %r3360;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3364, %r3356, %r3361;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3367, %r642, %r770, %r3370, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3371, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3372, %r3370, %r3371;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3375, %r3367, %r3372;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3378, %r631, %r792, %r3359, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3382, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3383, %r3359, %r3382;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3386, %r3378, %r3383;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3389, %r642, %r792, %r3370, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3393, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3394, %r3370, %r3393;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3397, %r3389, %r3394;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3471, %r246, %r3226, %r3122;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3468, %r246, %r3237, %r3128;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3480, %r246, %r3248, %r3134;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3477, %r246, %r3259, %r3140;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3489, %r246, %r3272, %r3146;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3486, %r246, %r3283, %r3152;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3498, %r246, %r3294, %r3158;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3495, %r246, %r3305, %r3164;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3507, %r246, %r3318, %r3170;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3504, %r246, %r3329, %r3176;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3516, %r246, %r3340, %r3182;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3513, %r246, %r3351, %r3188;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3525, %r246, %r3364, %r3194;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3522, %r246, %r3375, %r3200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3534, %r246, %r3386, %r3206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3531, %r246, %r3397, %r3212;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3464, %r270;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3466, %r3464, %r3468;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3469, %r267, %r3471, %r3466;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3473, %r270;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3475, %r3473, %r3477;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3478, %r267, %r3480, %r3475;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3482, %r270;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3484, %r3482, %r3486;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3487, %r267, %r3489, %r3484;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3491, %r270;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3493, %r3491, %r3495;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3496, %r267, %r3498, %r3493;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3500, %r270;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3502, %r3500, %r3504;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3505, %r267, %r3507, %r3502;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3509, %r270;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3511, %r3509, %r3513;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3514, %r267, %r3516, %r3511;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3518, %r270;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3520, %r3518, %r3522;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3523, %r267, %r3525, %r3520;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3527, %r270;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3529, %r3527, %r3531;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3532, %r267, %r3534, %r3529;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3536, %r270, %r3471;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3539, %r267, %r3468, %r3536;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3543, %r270, %r3480;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3546, %r267, %r3477, %r3543;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3550, %r270, %r3489;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3553, %r267, %r3486, %r3550;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3557, %r270, %r3498;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3560, %r267, %r3495, %r3557;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3564, %r270, %r3507;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3567, %r267, %r3504, %r3564;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3571, %r270, %r3516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3574, %r267, %r3513, %r3571;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3578, %r270, %r3525;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3581, %r267, %r3522, %r3578;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3585, %r270, %r3534;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3588, %r267, %r3531, %r3585;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3679, %r3676}, {%r326, %r332, %r329, %r335}, {%r3469, %r3539}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3688, %r3685}, {%r326, %r332, %r329, %r335}, {%r3478, %r3546}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3697, %r3694}, {%r326, %r332, %r329, %r335}, {%r3487, %r3553}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3706, %r3703}, {%r326, %r332, %r329, %r335}, {%r3496, %r3560}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3715, %r3712}, {%r326, %r332, %r329, %r335}, {%r3505, %r3567}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3724, %r3721}, {%r326, %r332, %r329, %r335}, {%r3514, %r3574}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3733, %r3730}, {%r326, %r332, %r329, %r335}, {%r3523, %r3581}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3742, %r3739}, {%r326, %r332, %r329, %r335}, {%r3532, %r3588}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3672, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3674, %r3672, %r3676;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3677, %r370, %r3679, %r3674;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3681, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3683, %r3681, %r3685;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3686, %r370, %r3688, %r3683;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3690, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3692, %r3690, %r3694;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3695, %r370, %r3697, %r3692;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3699, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3701, %r3699, %r3703;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3704, %r370, %r3706, %r3701;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3708, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3710, %r3708, %r3712;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3713, %r370, %r3715, %r3710;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3717, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3719, %r3717, %r3721;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3722, %r370, %r3724, %r3719;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3726, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3728, %r3726, %r3730;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3731, %r370, %r3733, %r3728;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3735, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3737, %r3735, %r3739;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3740, %r370, %r3742, %r3737;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3744, %r373, %r3679;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3747, %r370, %r3676, %r3744;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3751, %r373, %r3688;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3754, %r370, %r3685, %r3751;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3758, %r373, %r3697;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3761, %r370, %r3694, %r3758;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3765, %r373, %r3706;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3768, %r370, %r3703, %r3765;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3772, %r373, %r3715;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3775, %r370, %r3712, %r3772;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3779, %r373, %r3724;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3782, %r370, %r3721, %r3779;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3786, %r373, %r3733;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3789, %r370, %r3730, %r3786;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3793, %r373, %r3742;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3796, %r370, %r3739, %r3793;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3800, %r3801}, {%r404, %r410, %r407, %r413}, {%r3677, %r3747}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3810, %r3811}, {%r404, %r410, %r407, %r413}, {%r3686, %r3754}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3820, %r3821}, {%r404, %r410, %r407, %r413}, {%r3695, %r3761}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3830, %r3831}, {%r404, %r410, %r407, %r413}, {%r3704, %r3768}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3840, %r3841}, {%r404, %r410, %r407, %r413}, {%r3713, %r3775}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3850, %r3851}, {%r404, %r410, %r407, %r413}, {%r3722, %r3782}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3860, %r3861}, {%r404, %r410, %r407, %r413}, {%r3731, %r3789}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3870, %r3871}, {%r404, %r410, %r407, %r413}, {%r3740, %r3796}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3880, %r113, %r3800;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3883, %r113, %r3801;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3886, %r113, %r3810;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3889, %r113, %r3811;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3892, %r113, %r3820;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3895, %r113, %r3821;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3898, %r113, %r3830;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3901, %r113, %r3831;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3904, %r113, %r3840;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3907, %r113, %r3841;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3910, %r113, %r3850;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3913, %r113, %r3851;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3916, %r113, %r3860;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3919, %r113, %r3861;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3922, %r113, %r3870;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3925, %r113, %r3871;
	// end inline asm
	// begin inline asm
	mov.b32 %r3928, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3929, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3930, %r3880, %r3928;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3933, %r3930, %r3929;
	// end inline asm
	// begin inline asm
	mov.b32 %r3936, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3937, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3938, %r3883, %r3936;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3941, %r3938, %r3937;
	// end inline asm
	// begin inline asm
	mov.b32 %r3944, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3945, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3946, %r3886, %r3944;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3949, %r3946, %r3945;
	// end inline asm
	// begin inline asm
	mov.b32 %r3952, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3953, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3954, %r3889, %r3952;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3957, %r3954, %r3953;
	// end inline asm
	// begin inline asm
	mov.b32 %r3960, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3961, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3962, %r3892, %r3960;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3965, %r3962, %r3961;
	// end inline asm
	// begin inline asm
	mov.b32 %r3968, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3969, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3970, %r3895, %r3968;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3973, %r3970, %r3969;
	// end inline asm
	// begin inline asm
	mov.b32 %r3976, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3977, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3978, %r3898, %r3976;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3981, %r3978, %r3977;
	// end inline asm
	// begin inline asm
	mov.b32 %r3984, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3985, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3986, %r3901, %r3984;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3989, %r3986, %r3985;
	// end inline asm
	// begin inline asm
	mov.b32 %r3992, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3993, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3994, %r3904, %r3992;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3997, %r3994, %r3993;
	// end inline asm
	// begin inline asm
	mov.b32 %r4000, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4001, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4002, %r3907, %r4000;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4005, %r4002, %r4001;
	// end inline asm
	// begin inline asm
	mov.b32 %r4008, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4009, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4010, %r3910, %r4008;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4013, %r4010, %r4009;
	// end inline asm
	// begin inline asm
	mov.b32 %r4016, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4017, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4018, %r3913, %r4016;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4021, %r4018, %r4017;
	// end inline asm
	// begin inline asm
	mov.b32 %r4024, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4025, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4026, %r3916, %r4024;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4029, %r4026, %r4025;
	// end inline asm
	// begin inline asm
	mov.b32 %r4032, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4033, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4034, %r3919, %r4032;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4037, %r4034, %r4033;
	// end inline asm
	// begin inline asm
	mov.b32 %r4040, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4041, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4042, %r3922, %r4040;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4045, %r4042, %r4041;
	// end inline asm
	// begin inline asm
	mov.b32 %r4048, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4049, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4050, %r3925, %r4048;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4053, %r4050, %r4049;
	// end inline asm
	// begin inline asm
	mov.b32 %r4059, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4057, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4058, %r4059, %r4057;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4061, %r3933, %r4058;
	// end inline asm
	// begin inline asm
	mov.b32 %r4064, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4065, %r4059, %r4064;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4068, %r3941, %r4065;
	// end inline asm
	// begin inline asm
	mov.b32 %r4071, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4072, %r4059, %r4071;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4075, %r3949, %r4072;
	// end inline asm
	// begin inline asm
	mov.b32 %r4078, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4079, %r4059, %r4078;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4082, %r3957, %r4079;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4085, %r4061, %r4075, %r2292;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4089, %r4068, %r4082, %r2292;
	// end inline asm
	shl.b32 	%r4096, %r4089, 4;
	// begin inline asm
	lop3.b32 %r4093, %r2298, %r4085, %r4096, 202;
	// end inline asm
	xor.b32  	%r7858, %r4093, -2004318072;
	// begin inline asm
	mov.b32 %r4100, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4098, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4099, %r4100, %r4098;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4102, %r3965, %r4099;
	// end inline asm
	// begin inline asm
	mov.b32 %r4105, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4106, %r4100, %r4105;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4109, %r3973, %r4106;
	// end inline asm
	// begin inline asm
	mov.b32 %r4112, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4113, %r4100, %r4112;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4116, %r3981, %r4113;
	// end inline asm
	// begin inline asm
	mov.b32 %r4119, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4120, %r4100, %r4119;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4123, %r3989, %r4120;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4126, %r4102, %r4116, %r2292;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4130, %r4109, %r4123, %r2292;
	// end inline asm
	shl.b32 	%r4137, %r4130, 4;
	// begin inline asm
	lop3.b32 %r4134, %r2298, %r4126, %r4137, 202;
	// end inline asm
	xor.b32  	%r7859, %r4134, -2004318072;
	// begin inline asm
	mov.b32 %r4141, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4139, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4140, %r4141, %r4139;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4143, %r3997, %r4140;
	// end inline asm
	// begin inline asm
	mov.b32 %r4146, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4147, %r4141, %r4146;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4150, %r4005, %r4147;
	// end inline asm
	// begin inline asm
	mov.b32 %r4153, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4154, %r4141, %r4153;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4157, %r4013, %r4154;
	// end inline asm
	// begin inline asm
	mov.b32 %r4160, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4161, %r4141, %r4160;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4164, %r4021, %r4161;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4167, %r4143, %r4157, %r2292;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4171, %r4150, %r4164, %r2292;
	// end inline asm
	shl.b32 	%r4178, %r4171, 4;
	// begin inline asm
	lop3.b32 %r4175, %r2298, %r4167, %r4178, 202;
	// end inline asm
	xor.b32  	%r7860, %r4175, -2004318072;
	// begin inline asm
	mov.b32 %r4182, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4180, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4181, %r4182, %r4180;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4184, %r4029, %r4181;
	// end inline asm
	// begin inline asm
	mov.b32 %r4187, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4188, %r4182, %r4187;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4191, %r4037, %r4188;
	// end inline asm
	// begin inline asm
	mov.b32 %r4194, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4195, %r4182, %r4194;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4198, %r4045, %r4195;
	// end inline asm
	// begin inline asm
	mov.b32 %r4201, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4202, %r4182, %r4201;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4205, %r4053, %r4202;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4208, %r4184, %r4198, %r2292;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4212, %r4191, %r4205, %r2292;
	// end inline asm
	shl.b32 	%r4219, %r4212, 4;
	// begin inline asm
	lop3.b32 %r4216, %r2298, %r4208, %r4219, 202;
	// end inline asm
	xor.b32  	%r7861, %r4216, -2004318072;
	st.shared.u32 	[%rd145], %r7858;
	st.shared.u32 	[%rd146], %r7859;
	st.shared.u32 	[%rd147], %r7860;
	st.shared.u32 	[%rd148], %r7861;
	ld.shared.u32 	%r8000, [%rd86];
	ld.shared.u32 	%r8001, [%rd88];
	ld.shared.u32 	%r8002, [%rd90];
	ld.shared.u32 	%r8003, [%rd92];
	// begin inline asm
	mov.b32 %r4225, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4236, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4224, %r8000, -2004318072;
	// begin inline asm
	lop3.b32 %r4222, %r631, %r4224, %r4225, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4226, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4227, %r4225, %r4226;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4230, %r4222, %r4227;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4233, %r642, %r4224, %r4236, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4237, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4238, %r4236, %r4237;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4241, %r4233, %r4238;
	// end inline asm
	shr.u32 	%r4246, %r4224, 8;
	// begin inline asm
	lop3.b32 %r4244, %r631, %r4246, %r4225, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4248, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4249, %r4225, %r4248;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4252, %r4244, %r4249;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4255, %r642, %r4246, %r4236, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4259, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4260, %r4236, %r4259;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4263, %r4255, %r4260;
	// end inline asm
	// begin inline asm
	mov.b32 %r4271, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4282, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4270, %r8001, -2004318072;
	// begin inline asm
	lop3.b32 %r4268, %r631, %r4270, %r4271, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4272, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4273, %r4271, %r4272;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4276, %r4268, %r4273;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4279, %r642, %r4270, %r4282, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4283, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4284, %r4282, %r4283;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4287, %r4279, %r4284;
	// end inline asm
	shr.u32 	%r4292, %r4270, 8;
	// begin inline asm
	lop3.b32 %r4290, %r631, %r4292, %r4271, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4294, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4295, %r4271, %r4294;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4298, %r4290, %r4295;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4301, %r642, %r4292, %r4282, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4305, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4306, %r4282, %r4305;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4309, %r4301, %r4306;
	// end inline asm
	// begin inline asm
	mov.b32 %r4317, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4328, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4316, %r8002, -2004318072;
	// begin inline asm
	lop3.b32 %r4314, %r631, %r4316, %r4317, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4318, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4319, %r4317, %r4318;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4322, %r4314, %r4319;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4325, %r642, %r4316, %r4328, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4329, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4330, %r4328, %r4329;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4333, %r4325, %r4330;
	// end inline asm
	shr.u32 	%r4338, %r4316, 8;
	// begin inline asm
	lop3.b32 %r4336, %r631, %r4338, %r4317, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4340, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4341, %r4317, %r4340;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4344, %r4336, %r4341;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4347, %r642, %r4338, %r4328, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4351, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4352, %r4328, %r4351;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4355, %r4347, %r4352;
	// end inline asm
	// begin inline asm
	mov.b32 %r4363, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4374, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4362, %r8003, -2004318072;
	// begin inline asm
	lop3.b32 %r4360, %r631, %r4362, %r4363, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4364, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4365, %r4363, %r4364;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4368, %r4360, %r4365;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4371, %r642, %r4362, %r4374, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4375, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4376, %r4374, %r4375;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4379, %r4371, %r4376;
	// end inline asm
	shr.u32 	%r4384, %r4362, 8;
	// begin inline asm
	lop3.b32 %r4382, %r631, %r4384, %r4363, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4386, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4387, %r4363, %r4386;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4390, %r4382, %r4387;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4393, %r642, %r4384, %r4374, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4397, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4398, %r4374, %r4397;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4401, %r4393, %r4398;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4404, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4406, %r4404, %r4230;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4409, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4411, %r4409, %r4241;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4414, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4416, %r4414, %r4252;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4419, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4421, %r4419, %r4263;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4424, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4426, %r4424, %r4276;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4429, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4431, %r4429, %r4287;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4434, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4436, %r4434, %r4298;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4439, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4441, %r4439, %r4309;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4444, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4446, %r4444, %r4322;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4449, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4451, %r4449, %r4333;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4454, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4456, %r4454, %r4344;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4459, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4461, %r4459, %r4355;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4464, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4466, %r4464, %r4368;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4469, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4471, %r4469, %r4379;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4474, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4476, %r4474, %r4390;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4479, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4481, %r4479, %r4401;
	// end inline asm
	// begin inline asm
	mov.b32 %r4489, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4500, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4486, %r631, %r1424, %r4489, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4490, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4491, %r4489, %r4490;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4494, %r4486, %r4491;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4497, %r642, %r1424, %r4500, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4501, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4502, %r4500, %r4501;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4505, %r4497, %r4502;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4508, %r631, %r1446, %r4489, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4512, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4513, %r4489, %r4512;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4516, %r4508, %r4513;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4519, %r642, %r1446, %r4500, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4523, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4524, %r4500, %r4523;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4527, %r4519, %r4524;
	// end inline asm
	// begin inline asm
	mov.b32 %r4535, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4546, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4532, %r631, %r1470, %r4535, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4536, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4537, %r4535, %r4536;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4540, %r4532, %r4537;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4543, %r642, %r1470, %r4546, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4547, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4548, %r4546, %r4547;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4551, %r4543, %r4548;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4554, %r631, %r1492, %r4535, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4558, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4559, %r4535, %r4558;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4562, %r4554, %r4559;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4565, %r642, %r1492, %r4546, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4569, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4570, %r4546, %r4569;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4573, %r4565, %r4570;
	// end inline asm
	// begin inline asm
	mov.b32 %r4581, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4592, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4578, %r631, %r1516, %r4581, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4582, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4583, %r4581, %r4582;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4586, %r4578, %r4583;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4589, %r642, %r1516, %r4592, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4593, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4594, %r4592, %r4593;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4597, %r4589, %r4594;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4600, %r631, %r1538, %r4581, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4604, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4605, %r4581, %r4604;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4608, %r4600, %r4605;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4611, %r642, %r1538, %r4592, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4615, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4616, %r4592, %r4615;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4619, %r4611, %r4616;
	// end inline asm
	// begin inline asm
	mov.b32 %r4627, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4638, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4624, %r631, %r1562, %r4627, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4628, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4629, %r4627, %r4628;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4632, %r4624, %r4629;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4635, %r642, %r1562, %r4638, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4639, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4640, %r4638, %r4639;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4643, %r4635, %r4640;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4646, %r631, %r1584, %r4627, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4650, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4651, %r4627, %r4650;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4654, %r4646, %r4651;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4657, %r642, %r1584, %r4638, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4661, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4662, %r4638, %r4661;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4665, %r4657, %r4662;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4668, %r210, %r4494, %r4406;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4672, %r210, %r4505, %r4411;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4676, %r210, %r4516, %r4416;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4680, %r210, %r4527, %r4421;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4684, %r210, %r4540, %r4426;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4688, %r210, %r4551, %r4431;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4692, %r210, %r4562, %r4436;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4696, %r210, %r4573, %r4441;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4700, %r210, %r4586, %r4446;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4704, %r210, %r4597, %r4451;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4708, %r210, %r4608, %r4456;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4712, %r210, %r4619, %r4461;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4716, %r210, %r4632, %r4466;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4720, %r210, %r4643, %r4471;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4724, %r210, %r4654, %r4476;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4728, %r210, %r4665, %r4481;
	// end inline asm
	// begin inline asm
	mov.b32 %r4737, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4748, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4734, %r631, %r632, %r4737, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4738, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4739, %r4737, %r4738;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4742, %r4734, %r4739;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4745, %r642, %r632, %r4748, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4749, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4750, %r4748, %r4749;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4753, %r4745, %r4750;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4756, %r631, %r654, %r4737, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4760, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4761, %r4737, %r4760;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4764, %r4756, %r4761;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4767, %r642, %r654, %r4748, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4771, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4772, %r4748, %r4771;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4775, %r4767, %r4772;
	// end inline asm
	// begin inline asm
	mov.b32 %r4783, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4794, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4780, %r631, %r678, %r4783, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4784, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4785, %r4783, %r4784;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4788, %r4780, %r4785;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4791, %r642, %r678, %r4794, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4795, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4796, %r4794, %r4795;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4799, %r4791, %r4796;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4802, %r631, %r700, %r4783, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4806, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4807, %r4783, %r4806;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4810, %r4802, %r4807;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4813, %r642, %r700, %r4794, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4817, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4818, %r4794, %r4817;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4821, %r4813, %r4818;
	// end inline asm
	// begin inline asm
	mov.b32 %r4829, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4840, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4826, %r631, %r724, %r4829, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4830, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4831, %r4829, %r4830;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4834, %r4826, %r4831;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4837, %r642, %r724, %r4840, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4841, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4842, %r4840, %r4841;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4845, %r4837, %r4842;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4848, %r631, %r746, %r4829, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4852, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4853, %r4829, %r4852;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4856, %r4848, %r4853;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4859, %r642, %r746, %r4840, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4863, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4864, %r4840, %r4863;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4867, %r4859, %r4864;
	// end inline asm
	// begin inline asm
	mov.b32 %r4875, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4886, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4872, %r631, %r770, %r4875, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4876, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4877, %r4875, %r4876;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4880, %r4872, %r4877;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4883, %r642, %r770, %r4886, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4887, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4888, %r4886, %r4887;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4891, %r4883, %r4888;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4894, %r631, %r792, %r4875, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4898, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4899, %r4875, %r4898;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4902, %r4894, %r4899;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4905, %r642, %r792, %r4886, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4909, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4910, %r4886, %r4909;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4913, %r4905, %r4910;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4916, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4918, %r4916, %r4742, %r4668;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4922, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4924, %r4922, %r4753, %r4672;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4928, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4930, %r4928, %r4764, %r4676;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4934, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4936, %r4934, %r4775, %r4680;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4940, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4942, %r4940, %r4788, %r4684;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4946, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4948, %r4946, %r4799, %r4688;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4952, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4954, %r4952, %r4810, %r4692;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4958, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4960, %r4958, %r4821, %r4696;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4964, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4966, %r4964, %r4834, %r4700;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4970, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4972, %r4970, %r4845, %r4704;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4976, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4978, %r4976, %r4856, %r4708;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4982, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4984, %r4982, %r4867, %r4712;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4988, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4990, %r4988, %r4880, %r4716;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4994, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4996, %r4994, %r4891, %r4720;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5000, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5002, %r5000, %r4902, %r4724;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5006, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5008, %r5006, %r4913, %r4728;
	// end inline asm
	// begin inline asm
	mov.b32 %r5017, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5028, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5014, %r631, %r2428, %r5017, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5018, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5019, %r5017, %r5018;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5022, %r5014, %r5019;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5025, %r642, %r2428, %r5028, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5029, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5030, %r5028, %r5029;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5033, %r5025, %r5030;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5036, %r631, %r2450, %r5017, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5040, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5041, %r5017, %r5040;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5044, %r5036, %r5041;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5047, %r642, %r2450, %r5028, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5051, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5052, %r5028, %r5051;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5055, %r5047, %r5052;
	// end inline asm
	// begin inline asm
	mov.b32 %r5063, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5074, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5060, %r631, %r2474, %r5063, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5064, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5065, %r5063, %r5064;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5068, %r5060, %r5065;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5071, %r642, %r2474, %r5074, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5075, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5076, %r5074, %r5075;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5079, %r5071, %r5076;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5082, %r631, %r2496, %r5063, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5086, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5087, %r5063, %r5086;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5090, %r5082, %r5087;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5093, %r642, %r2496, %r5074, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5097, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5098, %r5074, %r5097;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5101, %r5093, %r5098;
	// end inline asm
	// begin inline asm
	mov.b32 %r5109, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5120, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5106, %r631, %r2520, %r5109, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5110, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5111, %r5109, %r5110;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5114, %r5106, %r5111;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5117, %r642, %r2520, %r5120, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5121, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5122, %r5120, %r5121;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5125, %r5117, %r5122;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5128, %r631, %r2542, %r5109, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5132, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5133, %r5109, %r5132;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5136, %r5128, %r5133;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5139, %r642, %r2542, %r5120, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5143, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5144, %r5120, %r5143;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5147, %r5139, %r5144;
	// end inline asm
	// begin inline asm
	mov.b32 %r5155, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5166, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5152, %r631, %r2566, %r5155, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5156, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5157, %r5155, %r5156;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5160, %r5152, %r5157;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5163, %r642, %r2566, %r5166, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5167, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5168, %r5166, %r5167;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5171, %r5163, %r5168;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5174, %r631, %r2588, %r5155, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5178, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5179, %r5155, %r5178;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5182, %r5174, %r5179;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5185, %r642, %r2588, %r5166, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5189, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5190, %r5166, %r5189;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5193, %r5185, %r5190;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5267, %r246, %r5022, %r4918;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5264, %r246, %r5033, %r4924;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5276, %r246, %r5044, %r4930;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5273, %r246, %r5055, %r4936;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5285, %r246, %r5068, %r4942;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5282, %r246, %r5079, %r4948;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5294, %r246, %r5090, %r4954;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5291, %r246, %r5101, %r4960;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5303, %r246, %r5114, %r4966;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5300, %r246, %r5125, %r4972;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5312, %r246, %r5136, %r4978;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5309, %r246, %r5147, %r4984;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5321, %r246, %r5160, %r4990;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5318, %r246, %r5171, %r4996;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5330, %r246, %r5182, %r5002;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5327, %r246, %r5193, %r5008;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5260, %r270;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5262, %r5260, %r5264;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5265, %r267, %r5267, %r5262;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5269, %r270;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5271, %r5269, %r5273;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5274, %r267, %r5276, %r5271;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5278, %r270;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5280, %r5278, %r5282;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5283, %r267, %r5285, %r5280;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5287, %r270;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5289, %r5287, %r5291;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5292, %r267, %r5294, %r5289;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5296, %r270;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5298, %r5296, %r5300;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5301, %r267, %r5303, %r5298;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5305, %r270;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5307, %r5305, %r5309;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5310, %r267, %r5312, %r5307;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5314, %r270;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5316, %r5314, %r5318;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5319, %r267, %r5321, %r5316;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5323, %r270;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5325, %r5323, %r5327;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5328, %r267, %r5330, %r5325;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5332, %r270, %r5267;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5335, %r267, %r5264, %r5332;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5339, %r270, %r5276;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5342, %r267, %r5273, %r5339;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5346, %r270, %r5285;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5349, %r267, %r5282, %r5346;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5353, %r270, %r5294;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5356, %r267, %r5291, %r5353;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5360, %r270, %r5303;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5363, %r267, %r5300, %r5360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5367, %r270, %r5312;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5370, %r267, %r5309, %r5367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5374, %r270, %r5321;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5377, %r267, %r5318, %r5374;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5381, %r270, %r5330;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5384, %r267, %r5327, %r5381;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5475, %r5472}, {%r326, %r332, %r329, %r335}, {%r5265, %r5335}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5484, %r5481}, {%r326, %r332, %r329, %r335}, {%r5274, %r5342}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5493, %r5490}, {%r326, %r332, %r329, %r335}, {%r5283, %r5349}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5502, %r5499}, {%r326, %r332, %r329, %r335}, {%r5292, %r5356}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5511, %r5508}, {%r326, %r332, %r329, %r335}, {%r5301, %r5363}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5520, %r5517}, {%r326, %r332, %r329, %r335}, {%r5310, %r5370}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5529, %r5526}, {%r326, %r332, %r329, %r335}, {%r5319, %r5377}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5538, %r5535}, {%r326, %r332, %r329, %r335}, {%r5328, %r5384}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5468, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5470, %r5468, %r5472;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5473, %r370, %r5475, %r5470;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5477, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5479, %r5477, %r5481;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5482, %r370, %r5484, %r5479;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5486, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5488, %r5486, %r5490;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5491, %r370, %r5493, %r5488;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5495, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5497, %r5495, %r5499;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5500, %r370, %r5502, %r5497;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5504, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5506, %r5504, %r5508;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5509, %r370, %r5511, %r5506;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5513, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5515, %r5513, %r5517;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5518, %r370, %r5520, %r5515;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5522, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5524, %r5522, %r5526;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5527, %r370, %r5529, %r5524;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5531, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5533, %r5531, %r5535;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5536, %r370, %r5538, %r5533;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5540, %r373, %r5475;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5543, %r370, %r5472, %r5540;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5547, %r373, %r5484;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5550, %r370, %r5481, %r5547;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5554, %r373, %r5493;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5557, %r370, %r5490, %r5554;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5561, %r373, %r5502;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5564, %r370, %r5499, %r5561;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5568, %r373, %r5511;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5571, %r370, %r5508, %r5568;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5575, %r373, %r5520;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5578, %r370, %r5517, %r5575;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5582, %r373, %r5529;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5585, %r370, %r5526, %r5582;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5589, %r373, %r5538;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5592, %r370, %r5535, %r5589;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5596, %r5597}, {%r404, %r410, %r407, %r413}, {%r5473, %r5543}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5606, %r5607}, {%r404, %r410, %r407, %r413}, {%r5482, %r5550}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5616, %r5617}, {%r404, %r410, %r407, %r413}, {%r5491, %r5557}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5626, %r5627}, {%r404, %r410, %r407, %r413}, {%r5500, %r5564}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5636, %r5637}, {%r404, %r410, %r407, %r413}, {%r5509, %r5571}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5646, %r5647}, {%r404, %r410, %r407, %r413}, {%r5518, %r5578}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5656, %r5657}, {%r404, %r410, %r407, %r413}, {%r5527, %r5585}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5666, %r5667}, {%r404, %r410, %r407, %r413}, {%r5536, %r5592}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5676, %r113, %r5596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5679, %r113, %r5597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5682, %r113, %r5606;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5685, %r113, %r5607;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5688, %r113, %r5616;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5691, %r113, %r5617;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5694, %r113, %r5626;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5697, %r113, %r5627;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5700, %r113, %r5636;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5703, %r113, %r5637;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5706, %r113, %r5646;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5709, %r113, %r5647;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5712, %r113, %r5656;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5715, %r113, %r5657;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5718, %r113, %r5666;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5721, %r113, %r5667;
	// end inline asm
	// begin inline asm
	mov.b32 %r5724, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5725, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5726, %r5676, %r5724;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5729, %r5726, %r5725;
	// end inline asm
	// begin inline asm
	mov.b32 %r5732, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5733, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5734, %r5679, %r5732;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5737, %r5734, %r5733;
	// end inline asm
	// begin inline asm
	mov.b32 %r5740, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5741, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5742, %r5682, %r5740;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5745, %r5742, %r5741;
	// end inline asm
	// begin inline asm
	mov.b32 %r5748, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5749, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5750, %r5685, %r5748;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5753, %r5750, %r5749;
	// end inline asm
	// begin inline asm
	mov.b32 %r5756, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5757, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5758, %r5688, %r5756;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5761, %r5758, %r5757;
	// end inline asm
	// begin inline asm
	mov.b32 %r5764, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5765, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5766, %r5691, %r5764;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5769, %r5766, %r5765;
	// end inline asm
	// begin inline asm
	mov.b32 %r5772, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5773, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5774, %r5694, %r5772;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5777, %r5774, %r5773;
	// end inline asm
	// begin inline asm
	mov.b32 %r5780, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5781, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5782, %r5697, %r5780;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5785, %r5782, %r5781;
	// end inline asm
	// begin inline asm
	mov.b32 %r5788, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5789, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5790, %r5700, %r5788;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5793, %r5790, %r5789;
	// end inline asm
	// begin inline asm
	mov.b32 %r5796, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5797, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5798, %r5703, %r5796;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5801, %r5798, %r5797;
	// end inline asm
	// begin inline asm
	mov.b32 %r5804, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5805, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5806, %r5706, %r5804;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5809, %r5806, %r5805;
	// end inline asm
	// begin inline asm
	mov.b32 %r5812, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5813, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5814, %r5709, %r5812;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5817, %r5814, %r5813;
	// end inline asm
	// begin inline asm
	mov.b32 %r5820, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5821, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5822, %r5712, %r5820;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5825, %r5822, %r5821;
	// end inline asm
	// begin inline asm
	mov.b32 %r5828, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5829, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5830, %r5715, %r5828;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5833, %r5830, %r5829;
	// end inline asm
	// begin inline asm
	mov.b32 %r5836, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5837, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5838, %r5718, %r5836;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5841, %r5838, %r5837;
	// end inline asm
	// begin inline asm
	mov.b32 %r5844, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5845, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5846, %r5721, %r5844;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5849, %r5846, %r5845;
	// end inline asm
	// begin inline asm
	mov.b32 %r5855, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5853, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5854, %r5855, %r5853;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5857, %r5729, %r5854;
	// end inline asm
	// begin inline asm
	mov.b32 %r5860, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5861, %r5855, %r5860;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5864, %r5737, %r5861;
	// end inline asm
	// begin inline asm
	mov.b32 %r5867, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5868, %r5855, %r5867;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5871, %r5745, %r5868;
	// end inline asm
	// begin inline asm
	mov.b32 %r5874, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5875, %r5855, %r5874;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5878, %r5753, %r5875;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5881, %r5857, %r5871, %r2292;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5885, %r5864, %r5878, %r2292;
	// end inline asm
	shl.b32 	%r5892, %r5885, 4;
	// begin inline asm
	lop3.b32 %r5889, %r2298, %r5881, %r5892, 202;
	// end inline asm
	xor.b32  	%r7862, %r5889, -2004318072;
	// begin inline asm
	mov.b32 %r5896, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5894, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5895, %r5896, %r5894;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5898, %r5761, %r5895;
	// end inline asm
	// begin inline asm
	mov.b32 %r5901, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5902, %r5896, %r5901;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5905, %r5769, %r5902;
	// end inline asm
	// begin inline asm
	mov.b32 %r5908, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5909, %r5896, %r5908;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5912, %r5777, %r5909;
	// end inline asm
	// begin inline asm
	mov.b32 %r5915, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5916, %r5896, %r5915;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5919, %r5785, %r5916;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5922, %r5898, %r5912, %r2292;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5926, %r5905, %r5919, %r2292;
	// end inline asm
	shl.b32 	%r5933, %r5926, 4;
	// begin inline asm
	lop3.b32 %r5930, %r2298, %r5922, %r5933, 202;
	// end inline asm
	xor.b32  	%r7863, %r5930, -2004318072;
	// begin inline asm
	mov.b32 %r5937, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5935, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5936, %r5937, %r5935;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5939, %r5793, %r5936;
	// end inline asm
	// begin inline asm
	mov.b32 %r5942, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5943, %r5937, %r5942;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5946, %r5801, %r5943;
	// end inline asm
	// begin inline asm
	mov.b32 %r5949, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5950, %r5937, %r5949;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5953, %r5809, %r5950;
	// end inline asm
	// begin inline asm
	mov.b32 %r5956, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5957, %r5937, %r5956;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5960, %r5817, %r5957;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5963, %r5939, %r5953, %r2292;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5967, %r5946, %r5960, %r2292;
	// end inline asm
	shl.b32 	%r5974, %r5967, 4;
	// begin inline asm
	lop3.b32 %r5971, %r2298, %r5963, %r5974, 202;
	// end inline asm
	xor.b32  	%r7864, %r5971, -2004318072;
	// begin inline asm
	mov.b32 %r5978, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5976, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5977, %r5978, %r5976;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5980, %r5825, %r5977;
	// end inline asm
	// begin inline asm
	mov.b32 %r5983, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5984, %r5978, %r5983;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5987, %r5833, %r5984;
	// end inline asm
	// begin inline asm
	mov.b32 %r5990, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5991, %r5978, %r5990;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5994, %r5841, %r5991;
	// end inline asm
	// begin inline asm
	mov.b32 %r5997, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5998, %r5978, %r5997;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6001, %r5849, %r5998;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6004, %r5980, %r5994, %r2292;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6008, %r5987, %r6001, %r2292;
	// end inline asm
	shl.b32 	%r6015, %r6008, 4;
	// begin inline asm
	lop3.b32 %r6012, %r2298, %r6004, %r6015, 202;
	// end inline asm
	xor.b32  	%r7865, %r6012, -2004318072;
	st.shared.u32 	[%rd145], %r7862;
	st.shared.u32 	[%rd146], %r7863;
	st.shared.u32 	[%rd147], %r7864;
	st.shared.u32 	[%rd148], %r7865;
	ld.shared.u32 	%r8004, [%rd86];
	ld.shared.u32 	%r8005, [%rd88];
	ld.shared.u32 	%r8006, [%rd90];
	ld.shared.u32 	%r8007, [%rd92];
	// begin inline asm
	mov.b32 %r6021, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6032, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6020, %r8004, -2004318072;
	// begin inline asm
	lop3.b32 %r6018, %r631, %r6020, %r6021, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6022, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6023, %r6021, %r6022;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6026, %r6018, %r6023;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6029, %r642, %r6020, %r6032, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6033, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6034, %r6032, %r6033;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6037, %r6029, %r6034;
	// end inline asm
	shr.u32 	%r6042, %r6020, 8;
	// begin inline asm
	lop3.b32 %r6040, %r631, %r6042, %r6021, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6044, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6045, %r6021, %r6044;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6048, %r6040, %r6045;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6051, %r642, %r6042, %r6032, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6055, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6056, %r6032, %r6055;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6059, %r6051, %r6056;
	// end inline asm
	// begin inline asm
	mov.b32 %r6067, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6078, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6066, %r8005, -2004318072;
	// begin inline asm
	lop3.b32 %r6064, %r631, %r6066, %r6067, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6068, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6069, %r6067, %r6068;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6072, %r6064, %r6069;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6075, %r642, %r6066, %r6078, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6079, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6080, %r6078, %r6079;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6083, %r6075, %r6080;
	// end inline asm
	shr.u32 	%r6088, %r6066, 8;
	// begin inline asm
	lop3.b32 %r6086, %r631, %r6088, %r6067, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6090, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6091, %r6067, %r6090;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6094, %r6086, %r6091;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6097, %r642, %r6088, %r6078, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6101, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6102, %r6078, %r6101;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6105, %r6097, %r6102;
	// end inline asm
	// begin inline asm
	mov.b32 %r6113, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6124, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6112, %r8006, -2004318072;
	// begin inline asm
	lop3.b32 %r6110, %r631, %r6112, %r6113, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6114, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6115, %r6113, %r6114;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6118, %r6110, %r6115;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6121, %r642, %r6112, %r6124, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6125, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6126, %r6124, %r6125;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6129, %r6121, %r6126;
	// end inline asm
	shr.u32 	%r6134, %r6112, 8;
	// begin inline asm
	lop3.b32 %r6132, %r631, %r6134, %r6113, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6136, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6137, %r6113, %r6136;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6140, %r6132, %r6137;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6143, %r642, %r6134, %r6124, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6147, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6148, %r6124, %r6147;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6151, %r6143, %r6148;
	// end inline asm
	// begin inline asm
	mov.b32 %r6159, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6170, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6158, %r8007, -2004318072;
	// begin inline asm
	lop3.b32 %r6156, %r631, %r6158, %r6159, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6160, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6161, %r6159, %r6160;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6164, %r6156, %r6161;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6167, %r642, %r6158, %r6170, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6171, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6172, %r6170, %r6171;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6175, %r6167, %r6172;
	// end inline asm
	shr.u32 	%r6180, %r6158, 8;
	// begin inline asm
	lop3.b32 %r6178, %r631, %r6180, %r6159, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6182, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6183, %r6159, %r6182;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6186, %r6178, %r6183;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6189, %r642, %r6180, %r6170, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6193, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6194, %r6170, %r6193;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6197, %r6189, %r6194;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6200, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6202, %r6200, %r6026;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6205, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6207, %r6205, %r6037;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6210, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6212, %r6210, %r6048;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6215, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6217, %r6215, %r6059;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6220, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6222, %r6220, %r6072;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6225, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6227, %r6225, %r6083;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6230, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6232, %r6230, %r6094;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6235, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6237, %r6235, %r6105;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6240, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6242, %r6240, %r6118;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6245, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6247, %r6245, %r6129;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6250, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6252, %r6250, %r6140;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6255, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6257, %r6255, %r6151;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6260, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6262, %r6260, %r6164;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6265, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6267, %r6265, %r6175;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6270, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6272, %r6270, %r6186;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6275, %r264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6277, %r6275, %r6197;
	// end inline asm
	// begin inline asm
	mov.b32 %r6285, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6296, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6282, %r631, %r632, %r6285, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6286, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6287, %r6285, %r6286;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6290, %r6282, %r6287;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6293, %r642, %r632, %r6296, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6297, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6298, %r6296, %r6297;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6301, %r6293, %r6298;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6304, %r631, %r654, %r6285, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6308, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6309, %r6285, %r6308;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6312, %r6304, %r6309;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6315, %r642, %r654, %r6296, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6319, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6320, %r6296, %r6319;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6323, %r6315, %r6320;
	// end inline asm
	// begin inline asm
	mov.b32 %r6331, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6342, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6328, %r631, %r678, %r6331, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6332, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6333, %r6331, %r6332;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6336, %r6328, %r6333;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6339, %r642, %r678, %r6342, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6343, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6344, %r6342, %r6343;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6347, %r6339, %r6344;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6350, %r631, %r700, %r6331, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6354, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6355, %r6331, %r6354;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6358, %r6350, %r6355;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6361, %r642, %r700, %r6342, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6365, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6366, %r6342, %r6365;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6369, %r6361, %r6366;
	// end inline asm
	// begin inline asm
	mov.b32 %r6377, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6388, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6374, %r631, %r724, %r6377, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6378, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6379, %r6377, %r6378;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6382, %r6374, %r6379;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6385, %r642, %r724, %r6388, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6389, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6390, %r6388, %r6389;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6393, %r6385, %r6390;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6396, %r631, %r746, %r6377, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6400, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6401, %r6377, %r6400;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6404, %r6396, %r6401;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6407, %r642, %r746, %r6388, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6411, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6412, %r6388, %r6411;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6415, %r6407, %r6412;
	// end inline asm
	// begin inline asm
	mov.b32 %r6423, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6434, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6420, %r631, %r770, %r6423, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6424, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6425, %r6423, %r6424;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6428, %r6420, %r6425;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6431, %r642, %r770, %r6434, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6435, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6436, %r6434, %r6435;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6439, %r6431, %r6436;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6442, %r631, %r792, %r6423, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6446, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6447, %r6423, %r6446;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6450, %r6442, %r6447;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6453, %r642, %r792, %r6434, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6457, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6458, %r6434, %r6457;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6461, %r6453, %r6458;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6464, %r210, %r6290, %r6202;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6468, %r210, %r6301, %r6207;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6472, %r210, %r6312, %r6212;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6476, %r210, %r6323, %r6217;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6480, %r210, %r6336, %r6222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6484, %r210, %r6347, %r6227;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6488, %r210, %r6358, %r6232;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6492, %r210, %r6369, %r6237;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6496, %r210, %r6382, %r6242;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6500, %r210, %r6393, %r6247;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6504, %r210, %r6404, %r6252;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6508, %r210, %r6415, %r6257;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6512, %r210, %r6428, %r6262;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6516, %r210, %r6439, %r6267;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6520, %r210, %r6450, %r6272;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6524, %r210, %r6461, %r6277;
	// end inline asm
	// begin inline asm
	mov.b32 %r6533, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6544, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6530, %r631, %r2428, %r6533, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6534, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6535, %r6533, %r6534;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6538, %r6530, %r6535;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6541, %r642, %r2428, %r6544, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6545, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6546, %r6544, %r6545;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6549, %r6541, %r6546;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6552, %r631, %r2450, %r6533, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6556, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6557, %r6533, %r6556;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6560, %r6552, %r6557;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6563, %r642, %r2450, %r6544, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6567, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6568, %r6544, %r6567;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6571, %r6563, %r6568;
	// end inline asm
	// begin inline asm
	mov.b32 %r6579, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6590, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6576, %r631, %r2474, %r6579, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6580, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6581, %r6579, %r6580;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6584, %r6576, %r6581;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6587, %r642, %r2474, %r6590, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6591, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6592, %r6590, %r6591;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6595, %r6587, %r6592;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6598, %r631, %r2496, %r6579, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6602, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6603, %r6579, %r6602;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6606, %r6598, %r6603;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6609, %r642, %r2496, %r6590, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6613, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6614, %r6590, %r6613;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6617, %r6609, %r6614;
	// end inline asm
	// begin inline asm
	mov.b32 %r6625, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6636, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6622, %r631, %r2520, %r6625, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6626, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6627, %r6625, %r6626;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6630, %r6622, %r6627;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6633, %r642, %r2520, %r6636, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6637, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6638, %r6636, %r6637;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6641, %r6633, %r6638;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6644, %r631, %r2542, %r6625, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6648, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6649, %r6625, %r6648;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6652, %r6644, %r6649;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6655, %r642, %r2542, %r6636, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6659, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6660, %r6636, %r6659;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6663, %r6655, %r6660;
	// end inline asm
	// begin inline asm
	mov.b32 %r6671, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6682, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6668, %r631, %r2566, %r6671, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6672, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6673, %r6671, %r6672;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6676, %r6668, %r6673;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6679, %r642, %r2566, %r6682, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6683, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6684, %r6682, %r6683;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6687, %r6679, %r6684;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6690, %r631, %r2588, %r6671, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6694, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6695, %r6671, %r6694;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6698, %r6690, %r6695;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6701, %r642, %r2588, %r6682, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6705, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6706, %r6682, %r6705;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6709, %r6701, %r6706;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6712, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6714, %r6712, %r6538, %r6464;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6718, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6720, %r6718, %r6549, %r6468;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6724, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6726, %r6724, %r6560, %r6472;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6730, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6732, %r6730, %r6571, %r6476;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6736, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6738, %r6736, %r6584, %r6480;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6742, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6744, %r6742, %r6595, %r6484;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6748, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6750, %r6748, %r6606, %r6488;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6754, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6756, %r6754, %r6617, %r6492;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6760, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6762, %r6760, %r6630, %r6496;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6766, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6768, %r6766, %r6641, %r6500;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6772, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6774, %r6772, %r6652, %r6504;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6778, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6780, %r6778, %r6663, %r6508;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6784, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6786, %r6784, %r6676, %r6512;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6790, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6792, %r6790, %r6687, %r6516;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6796, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6798, %r6796, %r6698, %r6520;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6802, %r228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6804, %r6802, %r6709, %r6524;
	// end inline asm
	// begin inline asm
	mov.b32 %r6813, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6824, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6810, %r631, %r4224, %r6813, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6814, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6815, %r6813, %r6814;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6818, %r6810, %r6815;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6821, %r642, %r4224, %r6824, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6825, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6826, %r6824, %r6825;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6829, %r6821, %r6826;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6832, %r631, %r4246, %r6813, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6836, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6837, %r6813, %r6836;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6840, %r6832, %r6837;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6843, %r642, %r4246, %r6824, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6847, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6848, %r6824, %r6847;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6851, %r6843, %r6848;
	// end inline asm
	// begin inline asm
	mov.b32 %r6859, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6870, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6856, %r631, %r4270, %r6859, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6860, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6861, %r6859, %r6860;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6864, %r6856, %r6861;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6867, %r642, %r4270, %r6870, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6871, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6872, %r6870, %r6871;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6875, %r6867, %r6872;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6878, %r631, %r4292, %r6859, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6882, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6883, %r6859, %r6882;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6886, %r6878, %r6883;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6889, %r642, %r4292, %r6870, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6893, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6894, %r6870, %r6893;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6897, %r6889, %r6894;
	// end inline asm
	// begin inline asm
	mov.b32 %r6905, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6916, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6902, %r631, %r4316, %r6905, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6906, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6907, %r6905, %r6906;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6910, %r6902, %r6907;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6913, %r642, %r4316, %r6916, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6917, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6918, %r6916, %r6917;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6921, %r6913, %r6918;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6924, %r631, %r4338, %r6905, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6928, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6929, %r6905, %r6928;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6932, %r6924, %r6929;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6935, %r642, %r4338, %r6916, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6939, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6940, %r6916, %r6939;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6943, %r6935, %r6940;
	// end inline asm
	// begin inline asm
	mov.b32 %r6951, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6962, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6948, %r631, %r4362, %r6951, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6952, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6953, %r6951, %r6952;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6956, %r6948, %r6953;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6959, %r642, %r4362, %r6962, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6963, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6964, %r6962, %r6963;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6967, %r6959, %r6964;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6970, %r631, %r4384, %r6951, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6974, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6975, %r6951, %r6974;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6978, %r6970, %r6975;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6981, %r642, %r4384, %r6962, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6985, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6986, %r6962, %r6985;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6989, %r6981, %r6986;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7063, %r246, %r6818, %r6714;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7060, %r246, %r6829, %r6720;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7072, %r246, %r6840, %r6726;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7069, %r246, %r6851, %r6732;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7081, %r246, %r6864, %r6738;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7078, %r246, %r6875, %r6744;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7090, %r246, %r6886, %r6750;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7087, %r246, %r6897, %r6756;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7099, %r246, %r6910, %r6762;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7096, %r246, %r6921, %r6768;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7108, %r246, %r6932, %r6774;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7105, %r246, %r6943, %r6780;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7117, %r246, %r6956, %r6786;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7114, %r246, %r6967, %r6792;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7126, %r246, %r6978, %r6798;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7123, %r246, %r6989, %r6804;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7056, %r270;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7058, %r7056, %r7060;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7061, %r267, %r7063, %r7058;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7065, %r270;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7067, %r7065, %r7069;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7070, %r267, %r7072, %r7067;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7074, %r270;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7076, %r7074, %r7078;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7079, %r267, %r7081, %r7076;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7083, %r270;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7085, %r7083, %r7087;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7088, %r267, %r7090, %r7085;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7092, %r270;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7094, %r7092, %r7096;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7097, %r267, %r7099, %r7094;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7101, %r270;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7103, %r7101, %r7105;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7106, %r267, %r7108, %r7103;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7110, %r270;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7112, %r7110, %r7114;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7115, %r267, %r7117, %r7112;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7119, %r270;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7121, %r7119, %r7123;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7124, %r267, %r7126, %r7121;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7128, %r270, %r7063;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7131, %r267, %r7060, %r7128;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7135, %r270, %r7072;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7138, %r267, %r7069, %r7135;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7142, %r270, %r7081;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7145, %r267, %r7078, %r7142;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7149, %r270, %r7090;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7152, %r267, %r7087, %r7149;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7156, %r270, %r7099;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7159, %r267, %r7096, %r7156;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7163, %r270, %r7108;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7166, %r267, %r7105, %r7163;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7170, %r270, %r7117;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7173, %r267, %r7114, %r7170;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7177, %r270, %r7126;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7180, %r267, %r7123, %r7177;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7271, %r7268}, {%r326, %r332, %r329, %r335}, {%r7061, %r7131}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7280, %r7277}, {%r326, %r332, %r329, %r335}, {%r7070, %r7138}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7289, %r7286}, {%r326, %r332, %r329, %r335}, {%r7079, %r7145}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7298, %r7295}, {%r326, %r332, %r329, %r335}, {%r7088, %r7152}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7307, %r7304}, {%r326, %r332, %r329, %r335}, {%r7097, %r7159}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7316, %r7313}, {%r326, %r332, %r329, %r335}, {%r7106, %r7166}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7325, %r7322}, {%r326, %r332, %r329, %r335}, {%r7115, %r7173}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7334, %r7331}, {%r326, %r332, %r329, %r335}, {%r7124, %r7180}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7264, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7266, %r7264, %r7268;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7269, %r370, %r7271, %r7266;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7273, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7275, %r7273, %r7277;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7278, %r370, %r7280, %r7275;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7282, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7284, %r7282, %r7286;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7287, %r370, %r7289, %r7284;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7291, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7293, %r7291, %r7295;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7296, %r370, %r7298, %r7293;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7300, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7302, %r7300, %r7304;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7305, %r370, %r7307, %r7302;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7309, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7311, %r7309, %r7313;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7314, %r370, %r7316, %r7311;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7318, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7320, %r7318, %r7322;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7323, %r370, %r7325, %r7320;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7327, %r373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7329, %r7327, %r7331;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7332, %r370, %r7334, %r7329;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7336, %r373, %r7271;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7339, %r370, %r7268, %r7336;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7343, %r373, %r7280;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7346, %r370, %r7277, %r7343;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7350, %r373, %r7289;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7353, %r370, %r7286, %r7350;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7357, %r373, %r7298;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7360, %r370, %r7295, %r7357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7364, %r373, %r7307;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7367, %r370, %r7304, %r7364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7371, %r373, %r7316;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7374, %r370, %r7313, %r7371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7378, %r373, %r7325;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7381, %r370, %r7322, %r7378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7385, %r373, %r7334;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7388, %r370, %r7331, %r7385;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7392, %r7393}, {%r404, %r410, %r407, %r413}, {%r7269, %r7339}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7402, %r7403}, {%r404, %r410, %r407, %r413}, {%r7278, %r7346}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7412, %r7413}, {%r404, %r410, %r407, %r413}, {%r7287, %r7353}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7422, %r7423}, {%r404, %r410, %r407, %r413}, {%r7296, %r7360}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7432, %r7433}, {%r404, %r410, %r407, %r413}, {%r7305, %r7367}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7442, %r7443}, {%r404, %r410, %r407, %r413}, {%r7314, %r7374}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7452, %r7453}, {%r404, %r410, %r407, %r413}, {%r7323, %r7381}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7462, %r7463}, {%r404, %r410, %r407, %r413}, {%r7332, %r7388}, {%r7974, %r7974};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7472, %r113, %r7392;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7475, %r113, %r7393;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7478, %r113, %r7402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7481, %r113, %r7403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7484, %r113, %r7412;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7487, %r113, %r7413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7490, %r113, %r7422;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7493, %r113, %r7423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7496, %r113, %r7432;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7499, %r113, %r7433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7502, %r113, %r7442;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7505, %r113, %r7443;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7508, %r113, %r7452;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7511, %r113, %r7453;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7514, %r113, %r7462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7517, %r113, %r7463;
	// end inline asm
	// begin inline asm
	mov.b32 %r7520, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7521, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7522, %r7472, %r7520;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7525, %r7522, %r7521;
	// end inline asm
	// begin inline asm
	mov.b32 %r7528, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7529, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7530, %r7475, %r7528;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7533, %r7530, %r7529;
	// end inline asm
	// begin inline asm
	mov.b32 %r7536, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7537, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7538, %r7478, %r7536;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7541, %r7538, %r7537;
	// end inline asm
	// begin inline asm
	mov.b32 %r7544, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7545, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7546, %r7481, %r7544;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7549, %r7546, %r7545;
	// end inline asm
	// begin inline asm
	mov.b32 %r7552, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7553, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7554, %r7484, %r7552;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7557, %r7554, %r7553;
	// end inline asm
	// begin inline asm
	mov.b32 %r7560, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7561, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7562, %r7487, %r7560;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7565, %r7562, %r7561;
	// end inline asm
	// begin inline asm
	mov.b32 %r7568, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7569, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7570, %r7490, %r7568;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7573, %r7570, %r7569;
	// end inline asm
	// begin inline asm
	mov.b32 %r7576, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7577, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7578, %r7493, %r7576;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7581, %r7578, %r7577;
	// end inline asm
	// begin inline asm
	mov.b32 %r7584, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7585, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7586, %r7496, %r7584;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7589, %r7586, %r7585;
	// end inline asm
	// begin inline asm
	mov.b32 %r7592, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7593, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7594, %r7499, %r7592;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7597, %r7594, %r7593;
	// end inline asm
	// begin inline asm
	mov.b32 %r7600, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7601, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7602, %r7502, %r7600;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7605, %r7602, %r7601;
	// end inline asm
	// begin inline asm
	mov.b32 %r7608, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7609, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7610, %r7505, %r7608;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7613, %r7610, %r7609;
	// end inline asm
	// begin inline asm
	mov.b32 %r7616, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7617, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7618, %r7508, %r7616;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7621, %r7618, %r7617;
	// end inline asm
	// begin inline asm
	mov.b32 %r7624, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7625, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7626, %r7511, %r7624;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7629, %r7626, %r7625;
	// end inline asm
	// begin inline asm
	mov.b32 %r7632, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7633, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7634, %r7514, %r7632;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7637, %r7634, %r7633;
	// end inline asm
	// begin inline asm
	mov.b32 %r7640, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7641, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7642, %r7517, %r7640;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7645, %r7642, %r7641;
	// end inline asm
	// begin inline asm
	mov.b32 %r7651, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7649, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7650, %r7651, %r7649;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7653, %r7525, %r7650;
	// end inline asm
	// begin inline asm
	mov.b32 %r7656, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7657, %r7651, %r7656;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7660, %r7533, %r7657;
	// end inline asm
	// begin inline asm
	mov.b32 %r7663, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7664, %r7651, %r7663;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7667, %r7541, %r7664;
	// end inline asm
	// begin inline asm
	mov.b32 %r7670, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7671, %r7651, %r7670;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7674, %r7549, %r7671;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7677, %r7653, %r7667, %r2292;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7681, %r7660, %r7674, %r2292;
	// end inline asm
	shl.b32 	%r7688, %r7681, 4;
	// begin inline asm
	lop3.b32 %r7685, %r2298, %r7677, %r7688, 202;
	// end inline asm
	xor.b32  	%r7866, %r7685, -2004318072;
	// begin inline asm
	mov.b32 %r7692, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7690, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7691, %r7692, %r7690;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7694, %r7557, %r7691;
	// end inline asm
	// begin inline asm
	mov.b32 %r7697, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7698, %r7692, %r7697;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7701, %r7565, %r7698;
	// end inline asm
	// begin inline asm
	mov.b32 %r7704, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7705, %r7692, %r7704;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7708, %r7573, %r7705;
	// end inline asm
	// begin inline asm
	mov.b32 %r7711, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7712, %r7692, %r7711;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7715, %r7581, %r7712;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7718, %r7694, %r7708, %r2292;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7722, %r7701, %r7715, %r2292;
	// end inline asm
	shl.b32 	%r7729, %r7722, 4;
	// begin inline asm
	lop3.b32 %r7726, %r2298, %r7718, %r7729, 202;
	// end inline asm
	xor.b32  	%r7867, %r7726, -2004318072;
	// begin inline asm
	mov.b32 %r7733, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7731, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7732, %r7733, %r7731;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7735, %r7589, %r7732;
	// end inline asm
	// begin inline asm
	mov.b32 %r7738, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7739, %r7733, %r7738;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7742, %r7597, %r7739;
	// end inline asm
	// begin inline asm
	mov.b32 %r7745, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7746, %r7733, %r7745;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7749, %r7605, %r7746;
	// end inline asm
	// begin inline asm
	mov.b32 %r7752, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7753, %r7733, %r7752;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7756, %r7613, %r7753;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7759, %r7735, %r7749, %r2292;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7763, %r7742, %r7756, %r2292;
	// end inline asm
	shl.b32 	%r7770, %r7763, 4;
	// begin inline asm
	lop3.b32 %r7767, %r2298, %r7759, %r7770, 202;
	// end inline asm
	xor.b32  	%r7868, %r7767, -2004318072;
	// begin inline asm
	mov.b32 %r7774, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7772, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7773, %r7774, %r7772;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7776, %r7621, %r7773;
	// end inline asm
	// begin inline asm
	mov.b32 %r7779, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7780, %r7774, %r7779;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7783, %r7629, %r7780;
	// end inline asm
	// begin inline asm
	mov.b32 %r7786, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7787, %r7774, %r7786;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7790, %r7637, %r7787;
	// end inline asm
	// begin inline asm
	mov.b32 %r7793, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7794, %r7774, %r7793;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7797, %r7645, %r7794;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7800, %r7776, %r7790, %r2292;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7804, %r7783, %r7797, %r2292;
	// end inline asm
	shl.b32 	%r7811, %r7804, 4;
	// begin inline asm
	lop3.b32 %r7808, %r2298, %r7800, %r7811, 202;
	// end inline asm
	xor.b32  	%r7869, %r7808, -2004318072;
	st.shared.u32 	[%rd145], %r7866;
	st.shared.u32 	[%rd146], %r7867;
	st.shared.u32 	[%rd147], %r7868;
	st.shared.u32 	[%rd148], %r7869;
	add.s32 	%r8008, %r8008, 64;
	add.s64 	%rd148, %rd148, 8324;
	add.s64 	%rd147, %rd147, 8324;
	add.s64 	%rd146, %rd146, 8324;
	add.s64 	%rd145, %rd145, 8324;
	add.s32 	%r7995, %r7995, 1;
	setp.eq.s32 	%p216, %r8008, 256;
	@%p216 bra 	$L__BB0_85;
	bra.uni 	$L__BB0_84;
$L__BB0_85:                             // %guard_exit17429
                                        //   in Loop: Header=BB0_83 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r7875, [%rd5];
	ld.shared.u32 	%r7876, [%rd6+128];
	ld.shared.u32 	%r7883, [%rd6+4];
	ld.shared.u32 	%r7884, [%rd6+132];
	ld.shared.u32 	%r7891, [%rd5+8324];
	ld.shared.u32 	%r7892, [%rd6+8452];
	ld.shared.u32 	%r7899, [%rd6+8328];
	ld.shared.u32 	%r7900, [%rd6+8456];
	ld.shared.u32 	%r7907, [%rd5+16648];
	ld.shared.u32 	%r7908, [%rd6+16776];
	ld.shared.u32 	%r7915, [%rd6+16652];
	ld.shared.u32 	%r7916, [%rd6+16780];
	ld.shared.u32 	%r7923, [%rd5+24972];
	ld.shared.u32 	%r7924, [%rd6+25100];
	ld.shared.u32 	%r7931, [%rd6+24976];
	ld.shared.u32 	%r7932, [%rd6+25104];
	// begin inline asm
	prmt.b32 %r7870, %r7875, %r7876, %r541;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7874, %r7875, %r7876, %r545;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7878, %r7883, %r7884, %r541;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7882, %r7883, %r7884, %r545;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7886, %r7891, %r7892, %r541;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7890, %r7891, %r7892, %r545;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7894, %r7899, %r7900, %r541;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7898, %r7899, %r7900, %r545;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7902, %r7907, %r7908, %r541;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7906, %r7907, %r7908, %r545;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7910, %r7915, %r7916, %r541;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7914, %r7915, %r7916, %r545;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7918, %r7923, %r7924, %r541;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7922, %r7923, %r7924, %r545;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7926, %r7931, %r7932, %r541;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7930, %r7931, %r7932, %r545;
	// end inline asm
	selp.b32 	%r7934, %r7874, %r7870, %p203;
	shfl.sync.bfly.b32	%r153, %r7934, 8, 31, -1;
	selp.b32 	%r7935, %r7882, %r7878, %p203;
	shfl.sync.bfly.b32	%r154, %r7935, 8, 31, -1;
	selp.b32 	%r7936, %r7890, %r7886, %p203;
	shfl.sync.bfly.b32	%r7937, %r7936, 8, 31, -1;
	selp.b32 	%r7938, %r7898, %r7894, %p203;
	shfl.sync.bfly.b32	%r7939, %r7938, 8, 31, -1;
	selp.b32 	%r7940, %r7906, %r7902, %p203;
	shfl.sync.bfly.b32	%r7941, %r7940, 8, 31, -1;
	selp.b32 	%r7942, %r7914, %r7910, %p203;
	shfl.sync.bfly.b32	%r7943, %r7942, 8, 31, -1;
	selp.b32 	%r7944, %r7922, %r7918, %p203;
	shfl.sync.bfly.b32	%r7945, %r7944, 8, 31, -1;
	selp.b32 	%r7946, %r7930, %r7926, %p203;
	shfl.sync.bfly.b32	%r7947, %r7946, 8, 31, -1;
	and.b32  	%r7948, %r74, 32512;
	setp.eq.s32 	%p218, %r7948, 0;
	shl.b32 	%r7975, %r74, 13;
	@%p218 bra 	$L__BB0_87;
// %bb.86:                              // %pass16544
                                        //   in Loop: Header=BB0_83 Depth=1
	selp.b32 	%r7949, %r154, %r7882, %p203;
	selp.b32 	%r7950, %r7878, %r154, %p203;
	selp.b32 	%r7951, %r153, %r7874, %p203;
	selp.b32 	%r7952, %r7870, %r153, %p203;
	or.b32  	%r7954, %r7975, %r50;
	or.b32  	%r7955, %r7954, %r61;
	or.b32  	%r7956, %r7955, %r52;
	cvt.s64.s32 	%rd93, %r7956;
	add.s64 	%rd94, %rd93, %rd7;
	shr.u64 	%rd95, %rd94, 36;
	add.s64 	%rd96, %rd94, %rd95;
	shr.s64 	%rd97, %rd96, 28;
	setp.lt.s64 	%p220, %rd94, 0;
	and.b64  	%rd98, %rd96, -268435456;
	setp.ne.s64 	%p221, %rd98, %rd94;
	and.pred  	%p222, %p220, %p221;
	selp.u64 	%rd99, 1, 0, %p222;
	sub.s64 	%rd100, %rd99, %rd97;
	shl.b64 	%rd101, %rd100, 28;
	add.s64 	%rd102, %rd101, %rd94;
	shl.b64 	%rd103, %rd102, 2;
	add.s64 	%rd104, %rd3, %rd103;
	st.global.v4.u32 	[%rd104], {%r7952, %r7950, %r7951, %r7949};
$L__BB0_87:                             // %pass16628
                                        //   in Loop: Header=BB0_83 Depth=1
	or.b32  	%r147, %r74, 64;
	setp.lt.u32 	%p223, %r147, 192;
	@%p223 bra 	$L__BB0_89;
// %bb.88:                              // %pass16651
                                        //   in Loop: Header=BB0_83 Depth=1
	selp.b32 	%r155, %r7886, %r7937, %p203;
	selp.b32 	%r156, %r7937, %r7890, %p203;
	selp.b32 	%r157, %r7894, %r7939, %p203;
	selp.b32 	%r158, %r7939, %r7898, %p203;
	shl.b32 	%r7957, %r147, 13;
	or.b32  	%r7958, %r7957, %r50;
	or.b32  	%r7959, %r7958, %r61;
	or.b32  	%r7960, %r7959, %r52;
	cvt.s64.s32 	%rd105, %r7960;
	add.s64 	%rd106, %rd105, %rd7;
	shr.u64 	%rd107, %rd106, 36;
	add.s64 	%rd108, %rd106, %rd107;
	shr.s64 	%rd109, %rd108, 28;
	setp.lt.s64 	%p224, %rd106, 0;
	and.b64  	%rd110, %rd108, -268435456;
	setp.ne.s64 	%p225, %rd110, %rd106;
	and.pred  	%p226, %p224, %p225;
	selp.u64 	%rd111, 1, 0, %p226;
	sub.s64 	%rd112, %rd111, %rd109;
	shl.b64 	%rd113, %rd112, 28;
	add.s64 	%rd114, %rd113, %rd106;
	shl.b64 	%rd115, %rd114, 2;
	add.s64 	%rd116, %rd3, %rd115;
	st.global.v4.u32 	[%rd116], {%r155, %r157, %r156, %r158};
$L__BB0_89:                             // %pass16735
                                        //   in Loop: Header=BB0_83 Depth=1
	or.b32  	%r148, %r74, 128;
	selp.b32 	%r163, %r7918, %r7945, %p203;
	selp.b32 	%r164, %r7945, %r7922, %p203;
	selp.b32 	%r165, %r7926, %r7947, %p203;
	selp.b32 	%r166, %r7947, %r7930, %p203;
	setp.lt.u32 	%p227, %r148, 192;
	@%p227 bra 	$L__BB0_91;
// %bb.90:                              // %pass16758
                                        //   in Loop: Header=BB0_83 Depth=1
	selp.b32 	%r159, %r7902, %r7941, %p203;
	selp.b32 	%r160, %r7941, %r7906, %p203;
	selp.b32 	%r161, %r7910, %r7943, %p203;
	selp.b32 	%r162, %r7943, %r7914, %p203;
	shl.b32 	%r7961, %r148, 13;
	or.b32  	%r7962, %r7961, %r50;
	or.b32  	%r7963, %r7962, %r61;
	or.b32  	%r7964, %r7963, %r52;
	cvt.s64.s32 	%rd117, %r7964;
	add.s64 	%rd118, %rd117, %rd7;
	shr.u64 	%rd119, %rd118, 36;
	add.s64 	%rd120, %rd118, %rd119;
	shr.s64 	%rd121, %rd120, 28;
	setp.lt.s64 	%p228, %rd118, 0;
	and.b64  	%rd122, %rd120, -268435456;
	setp.ne.s64 	%p229, %rd122, %rd118;
	and.pred  	%p230, %p228, %p229;
	selp.u64 	%rd123, 1, 0, %p230;
	sub.s64 	%rd124, %rd123, %rd121;
	shl.b64 	%rd125, %rd124, 28;
	add.s64 	%rd126, %rd125, %rd118;
	shl.b64 	%rd127, %rd126, 2;
	add.s64 	%rd128, %rd3, %rd127;
	st.global.v4.u32 	[%rd128], {%r159, %r161, %r160, %r162};
	bra.uni 	$L__BB0_91;
$L__BB0_92:                             // %L40455
	st.global.u32 	[%rd4], %r7974;
	ret;
$L__BB0_7:                              // %L167
	mov.u32 	%r7973, 2;
	st.global.u32 	[%rd4], %r7973;
	mov.u64 	%rd143, exception3413;
	cvta.global.u64 	%rd144, %rd143;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd144;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r167;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_10:                             // %L275
	mov.u32 	%r7972, 3;
	st.global.u32 	[%rd4], %r7972;
	mov.u64 	%rd141, exception3413;
	cvta.global.u64 	%rd142, %rd141;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd142;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r167;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd40, exception1;
	cvta.global.u64 	%rd41, %rd40;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd41;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd35;
	st.param.b32 	[param0+8], %r167;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
