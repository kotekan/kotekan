// PTX kernel code for the CUDA upchannelizer
// This file has been generated automatically by `upchan.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for upchan(::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.func julia_AssertionError_11687
()
.noreturn
{
	trap;
}
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.func  (.param .b64 func_retval0) julia_power_by_squaring_11698
(
	.param .align 8 .b8 julia_power_by_squaring_11698_param_0[16],
	.param .b64 julia_power_by_squaring_11698_param_1,
	.param .b64 julia_power_by_squaring_11698_param_2
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception3405[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<262>;
	.reg .b16 	%rs<1185>;
	.reg .b32 	%r<8035>;
	.reg .f32 	%f<914>;
	.reg .b64 	%rd<178>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r180, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd36, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r185, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r185, 66815;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd37, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	ld.param.u32 	%r181, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r186, %r2, 9;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r187, %r186, %r1;
	or.b32  	%r188, %r187, %r4;
	mul.wide.u32 	%rd43, %r188, 4;
	add.s64 	%rd4, %rd37, %rd43;
	mov.u32 	%r189, 1;
	st.global.u32 	[%rd4], %r189;
	setp.lt.s32 	%p2, %r181, 0;
	@%p2 bra 	$L__BB0_7;
// %bb.3:                               // %L115
	ld.param.u32 	%r182, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p3, %r182, %r181;
	setp.gt.s32 	%p4, %r182, 131072;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_7;
// %bb.4:                               // %L125
	ld.param.u32 	%r183, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r190, %r182, %r181;
	and.b32  	%r191, %r190, 255;
	setp.ne.s32 	%p6, %r191, 0;
	setp.lt.s32 	%p7, %r183, 0;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L131
	ld.param.u32 	%r184, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.lt.s32 	%p9, %r184, %r183;
	setp.gt.s32 	%p10, %r184, 2048;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L141
	not.b32 	%r192, %r183;
	add.s32 	%r193, %r192, %r184;
	and.b32  	%r194, %r193, 3;
	setp.eq.s32 	%p12, %r194, 0;
	@%p12 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_7;
$L__BB0_8:                              // %pass145
	bfe.u32 	%r116, %r1, 2, 1;
	shr.u32 	%r117, %r1, 4;
	shl.b32 	%r201, %r117, 1;
	shl.b32 	%r202, %r116, 2;
	shl.b32 	%r118, %r1, 3;
	and.b32  	%r203, %r118, 24;
	or.b32  	%r204, %r202, %r203;
	or.b32  	%r205, %r201, %r204;
	bfe.u32 	%r206, %r1, 3, 1;
	or.b32  	%r120, %r206, %r205;
	or.b32  	%r121, %r120, 32;
	mov.f32 	%f181, 0f40000000;
	mov.f32 	%f182, 0f437F0000;
	div.approx.f32 	%f153, %f182, %f181;
	cvt.rn.f32.s32 	%f183, %r120;
	sub.f32 	%f184, %f183, %f153;
	mov.f32 	%f213, 0f42800000;
	div.approx.f32 	%f155, %f184, %f213;
	setp.ne.f32 	%p18, %f155, 0f00000000;
	mov.f32 	%f881, 0f3F800000;
	mov.f32 	%f874, %f881;
	@%p18 bra 	$L__BB0_9;
	bra.uni 	$L__BB0_10;
$L__BB0_9:                              // %L484
	sin.approx.f32 	%f214, %f155;
	div.approx.f32 	%f874, %f214, %f155;
$L__BB0_10:                             // %L487
	cvt.rn.f32.s32 	%f217, %r121;
	sub.f32 	%f218, %f217, %f153;
	div.approx.f32 	%f5, %f218, %f213;
	setp.eq.f32 	%p24, %f5, 0f00000000;
	mov.f32 	%f875, %f881;
	@%p24 bra 	$L__BB0_12;
// %bb.11:                              // %L504
	sin.approx.f32 	%f248, %f5;
	div.approx.f32 	%f875, %f248, %f5;
$L__BB0_12:                             // %L507
	or.b32  	%r224, %r120, 64;
	or.b32  	%r6, %r120, 96;
	cvt.rn.f32.s32 	%f252, %r224;
	sub.f32 	%f253, %f252, %f153;
	div.approx.f32 	%f9, %f253, %f213;
	setp.eq.f32 	%p30, %f9, 0f00000000;
	mov.f32 	%f876, %f881;
	@%p30 bra 	$L__BB0_14;
// %bb.13:                              // %L586
	sin.approx.f32 	%f283, %f9;
	div.approx.f32 	%f876, %f283, %f9;
$L__BB0_14:                             // %L589
	shl.b32 	%r195, %r2, 4;
	cvt.rn.f32.s32 	%f286, %r6;
	sub.f32 	%f287, %f286, %f153;
	div.approx.f32 	%f14, %f287, %f213;
	setp.eq.f32 	%p36, %f14, 0f00000000;
	mov.f32 	%f877, %f881;
	@%p36 bra 	$L__BB0_16;
// %bb.15:                              // %L606
	sin.approx.f32 	%f317, %f14;
	div.approx.f32 	%f877, %f317, %f14;
$L__BB0_16:                             // %L609
	and.b32  	%r106, %r195, 4032;
	shl.b32 	%r107, %r1, 1;
	and.b32  	%r113, %r1, 18;
	or.b32  	%r242, %r120, 128;
	or.b32  	%r8, %r120, 160;
	cvt.rn.f32.s32 	%f321, %r242;
	sub.f32 	%f322, %f321, %f153;
	div.approx.f32 	%f18, %f322, %f213;
	setp.eq.f32 	%p42, %f18, 0f00000000;
	mov.f32 	%f878, %f881;
	@%p42 bra 	$L__BB0_18;
// %bb.17:                              // %L688
	sin.approx.f32 	%f352, %f18;
	div.approx.f32 	%f878, %f352, %f18;
$L__BB0_18:                             // %L691
	and.b32  	%r108, %r107, 8;
	shl.b32 	%r109, %r1, 2;
	or.b32  	%r196, %r113, %r106;
	cvt.rn.f32.s32 	%f355, %r8;
	sub.f32 	%f356, %f355, %f153;
	div.approx.f32 	%f23, %f356, %f213;
	setp.eq.f32 	%p48, %f23, 0f00000000;
	mov.f32 	%f879, %f881;
	@%p48 bra 	$L__BB0_20;
// %bb.19:                              // %L708
	sin.approx.f32 	%f386, %f23;
	div.approx.f32 	%f879, %f386, %f23;
$L__BB0_20:                             // %L711
	and.b32  	%r110, %r109, 32;
	or.b32  	%r197, %r196, %r108;
	or.b32  	%r260, %r120, 192;
	or.b32  	%r10, %r120, 224;
	cvt.rn.f32.s32 	%f390, %r260;
	sub.f32 	%f391, %f390, %f153;
	div.approx.f32 	%f27, %f391, %f213;
	setp.eq.f32 	%p54, %f27, 0f00000000;
	mov.f32 	%f880, %f881;
	@%p54 bra 	$L__BB0_22;
// %bb.21:                              // %L790
	sin.approx.f32 	%f421, %f27;
	div.approx.f32 	%f880, %f421, %f27;
$L__BB0_22:                             // %L793
	and.b32  	%r112, %r109, 4;
	or.b32  	%r198, %r197, %r110;
	cvt.rn.f32.s32 	%f424, %r10;
	sub.f32 	%f425, %f424, %f153;
	div.approx.f32 	%f32, %f425, %f213;
	setp.eq.f32 	%p60, %f32, 0f00000000;
	@%p60 bra 	$L__BB0_24;
// %bb.23:                              // %L810
	sin.approx.f32 	%f455, %f32;
	div.approx.f32 	%f881, %f455, %f32;
$L__BB0_24:                             // %L813
	or.b32  	%r199, %r198, %r112;
	mul.lo.s32 	%r12, %r120, 63;
	cvt.rn.f32.s32 	%f458, %r12;
	div.approx.f32 	%f35, %f458, %f213;
	abs.f32 	%f884, %f35;
	setp.lt.f32 	%p61, %f884, 0f40000000;
	@%p61 bra 	$L__BB0_36;
// %bb.25:
	setp.gtu.f32 	%p62, %f884, 0f4B800000;
	@%p62 bra 	$L__BB0_32;
	bra.uni 	$L__BB0_26;
$L__BB0_32:
	mov.b32 	%r14, %f884;
	and.b32  	%r278, %r14, 8388607;
	or.b32  	%r7992, %r278, 1065353216;
	mov.b32 	%f883, %r7992;
	add.s32 	%r279, %r14, -1073741824;
	and.b32  	%r7993, %r279, -8388608;
	setp.eq.s32 	%p68, %r7993, 0;
	@%p68 bra 	$L__BB0_35;
// %bb.33:                              // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f469, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f468,%f469;
	// end inline asm
$L__BB0_34:                             // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r280, %r7993, 192937984;
	add.s32 	%r281, %r7992, %r280;
	mov.b32 	%f470, %r281;
	mul.f32 	%f471, %f468, %f470;
	sub.f32 	%f472, %f470, %f471;
	fma.rn.f32 	%f473, %f472, %f468, %f471;
	sub.f32 	%f474, %f470, %f473;
	fma.rz.f32 	%f475, %f474, %f468, %f473;
	cvt.rzi.f32.f32 	%f476, %f475;
	sub.f32 	%f883, %f470, %f476;
	sub.s32 	%r7993, %r7993, %r280;
	mov.b32 	%r7992, %f883;
	setp.ne.s32 	%p69, %r7993, 0;
	setp.ne.s32 	%p70, %r7992, 0;
	and.pred  	%p71, %p69, %p70;
	@%p71 bra 	$L__BB0_34;
$L__BB0_35:                             // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p72, %r14, 2139095039;
	selp.f32 	%f477, 0f7FFFFFFF, 0f4B800000, %p72;
	mul.f32 	%f478, %f883, 0f34000000;
	mul.f32 	%f884, %f477, %f478;
	bra.uni 	$L__BB0_36;
$L__BB0_26:                             // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f461, %f884, %f181;
	cvt.rzi.f32.f32 	%f882, %f461;
	fma.rn.f32 	%f38, %f882, 0fC0000000, %f884;
	mov.b32 	%r13, %f38;
	setp.lt.u32 	%p63, %r13, 1073741824;
	@%p63 bra 	$L__BB0_31;
// %bb.27:
	setp.lt.u32 	%p64, %r13, -2147483647;
	@%p64 bra 	$L__BB0_29;
// %bb.28:
	add.f32 	%f466, %f882, 0fBF800000;
	setp.lt.f32 	%p67, %f38, 0fC0000000;
	add.f32 	%f467, %f466, 0fBF800000;
	selp.f32 	%f882, %f467, %f466, %p67;
	bra.uni 	$L__BB0_31;
$L__BB0_29:
	add.f32 	%f882, %f882, 0f3F800000;
	setp.ltu.f32 	%p65, %f38, 0f40800000;
	@%p65 bra 	$L__BB0_31;
// %bb.30:                              // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f462, %f882, 0f3F800000;
	fma.rn.f32 	%f464, %f181, 0fC0400000, %f38;
	setp.ge.f32 	%p66, %f464, 0f00000000;
	add.f32 	%f465, %f462, 0f3F800000;
	selp.f32 	%f882, %f465, %f462, %p66;
$L__BB0_31:                             // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f884, %f882, 0fC0000000, %f884;
$L__BB0_36:                             // %__internal_fmodf_kernel.exit.i
	shr.u32 	%r200, %r199, 1;
	abs.f32 	%f479, %f884;
	setp.gtu.f32 	%p73, %f479, 0f7F800000;
	@%p73 bra 	$L__BB0_38;
// %bb.37:
	mov.b32 	%r282, %f35;
	and.b32  	%r283, %r282, -2147483648;
	mov.b32 	%r284, %f884;
	or.b32  	%r285, %r283, %r284;
	mov.b32 	%f884, %r285;
$L__BB0_38:                             // %__nv_fmodf.exit
	ld.param.u64 	%rd1, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	mul.wide.u32 	%rd44, %r200, 4;
	add.s32 	%r294, %r12, 2016;
	cvt.rn.f32.s32 	%f510, %r294;
	div.approx.f32 	%f54, %f510, %f213;
	abs.f32 	%f888, %f54;
	setp.lt.f32 	%p81, %f888, 0f40000000;
	@%p81 bra 	$L__BB0_50;
// %bb.39:
	setp.gtu.f32 	%p82, %f888, 0f4B800000;
	@%p82 bra 	$L__BB0_46;
	bra.uni 	$L__BB0_40;
$L__BB0_46:
	mov.b32 	%r22, %f888;
	and.b32  	%r295, %r22, 8388607;
	or.b32  	%r7994, %r295, 1065353216;
	mov.b32 	%f887, %r7994;
	add.s32 	%r296, %r22, -1073741824;
	and.b32  	%r7995, %r296, -8388608;
	setp.eq.s32 	%p88, %r7995, 0;
	@%p88 bra 	$L__BB0_49;
// %bb.47:                              // %__nv_fmaf_rn.exit4.i.i.i861.preheader
	mov.f32 	%f521, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f520,%f521;
	// end inline asm
$L__BB0_48:                             // %__nv_fmaf_rn.exit4.i.i.i861
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r297, %r7995, 192937984;
	add.s32 	%r298, %r7994, %r297;
	mov.b32 	%f522, %r298;
	mul.f32 	%f523, %f520, %f522;
	sub.f32 	%f524, %f522, %f523;
	fma.rn.f32 	%f525, %f524, %f520, %f523;
	sub.f32 	%f526, %f522, %f525;
	fma.rz.f32 	%f527, %f526, %f520, %f525;
	cvt.rzi.f32.f32 	%f528, %f527;
	sub.f32 	%f887, %f522, %f528;
	sub.s32 	%r7995, %r7995, %r297;
	mov.b32 	%r7994, %f887;
	setp.ne.s32 	%p89, %r7995, 0;
	setp.ne.s32 	%p90, %r7994, 0;
	and.pred  	%p91, %p89, %p90;
	@%p91 bra 	$L__BB0_48;
$L__BB0_49:                             // %__internal_fmodf_slowpath_mod.exit.i.i863
	setp.gt.u32 	%p92, %r22, 2139095039;
	selp.f32 	%f529, 0f7FFFFFFF, 0f4B800000, %p92;
	mul.f32 	%f530, %f887, 0f34000000;
	mul.f32 	%f888, %f529, %f530;
	bra.uni 	$L__BB0_50;
$L__BB0_40:                             // %__nv_fast_fdividef.exit.i.i.i840
	div.approx.f32 	%f513, %f888, %f181;
	cvt.rzi.f32.f32 	%f886, %f513;
	fma.rn.f32 	%f57, %f886, 0fC0000000, %f888;
	mov.b32 	%r21, %f57;
	setp.lt.u32 	%p83, %r21, 1073741824;
	@%p83 bra 	$L__BB0_45;
// %bb.41:
	setp.lt.u32 	%p84, %r21, -2147483647;
	@%p84 bra 	$L__BB0_43;
// %bb.42:
	add.f32 	%f518, %f886, 0fBF800000;
	setp.lt.f32 	%p87, %f57, 0fC0000000;
	add.f32 	%f519, %f518, 0fBF800000;
	selp.f32 	%f886, %f519, %f518, %p87;
	bra.uni 	$L__BB0_45;
$L__BB0_43:
	add.f32 	%f886, %f886, 0f3F800000;
	setp.ltu.f32 	%p85, %f57, 0f40800000;
	@%p85 bra 	$L__BB0_45;
// %bb.44:                              // %__nv_fmaf_rn.exit.i.i.i844
	add.f32 	%f514, %f886, 0f3F800000;
	fma.rn.f32 	%f516, %f181, 0fC0400000, %f57;
	setp.ge.f32 	%p86, %f516, 0f00000000;
	add.f32 	%f517, %f514, 0f3F800000;
	selp.f32 	%f886, %f517, %f514, %p86;
$L__BB0_45:                             // %__internal_fmodf_fastpath_quot.exit.i.i847
	fma.rn.f32 	%f888, %f886, 0fC0000000, %f888;
$L__BB0_50:                             // %__internal_fmodf_kernel.exit.i866
	add.s64 	%rd45, %rd1, %rd44;
	abs.f32 	%f531, %f888;
	setp.gtu.f32 	%p93, %f531, 0f7F800000;
	@%p93 bra 	$L__BB0_52;
// %bb.51:
	mov.b32 	%r299, %f54;
	and.b32  	%r300, %r299, -2147483648;
	mov.b32 	%r301, %f888;
	or.b32  	%r302, %r300, %r301;
	mov.b32 	%f888, %r302;
$L__BB0_52:                             // %__nv_fmodf.exit867
	ld.global.u32 	%r114, [%rd45];
	mov.u64 	%rd46, 2;
	mov.u64 	%rd47, 6;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r180;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd46;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd47;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11698, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd48, [retval0+0];
	} // callseq 2
	setp.eq.s64 	%p101, %rd48, 64;
	@%p101 bra 	$L__BB0_54;
	bra.uni 	$L__BB0_53;
$L__BB0_54:                             // %pass300
	shr.u32 	%r115, %r1, 1;
	shr.u32 	%r119, %r1, 3;
	and.b32  	%r317, %r1, 3;
	and.b32  	%r318, %r119, 2;
	or.b32  	%r319, %r116, %r318;
	and.b32  	%r320, %r115, 4;
	or.b32  	%r122, %r319, %r320;
	mul.lo.s32 	%r321, %r317, %r122;
	shl.b32 	%r322, %r321, 1;
	neg.s32 	%r323, %r322;
	cvt.rn.f32.s32 	%f156, %r323;
	mov.f32 	%f564, 0f41000000;
	div.approx.f32 	%f157, %f156, %f564;
	abs.f32 	%f904, %f157;
	setp.lt.f32 	%p102, %f904, 0f40000000;
	mov.f32 	%f892, %f904;
	@%p102 bra 	$L__BB0_66;
// %bb.55:
	setp.gtu.f32 	%p103, %f904, 0f4B800000;
	@%p103 bra 	$L__BB0_62;
	bra.uni 	$L__BB0_56;
$L__BB0_62:
	mov.b32 	%r32, %f904;
	and.b32  	%r324, %r32, 8388607;
	or.b32  	%r7996, %r324, 1065353216;
	mov.b32 	%f891, %r7996;
	add.s32 	%r325, %r32, -1073741824;
	and.b32  	%r7997, %r325, -8388608;
	setp.eq.s32 	%p109, %r7997, 0;
	@%p109 bra 	$L__BB0_65;
// %bb.63:                              // %__nv_fmaf_rn.exit4.i.i.i892.preheader
	mov.f32 	%f574, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f573,%f574;
	// end inline asm
$L__BB0_64:                             // %__nv_fmaf_rn.exit4.i.i.i892
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r326, %r7997, 192937984;
	add.s32 	%r327, %r7996, %r326;
	mov.b32 	%f575, %r327;
	mul.f32 	%f576, %f573, %f575;
	sub.f32 	%f577, %f575, %f576;
	fma.rn.f32 	%f578, %f577, %f573, %f576;
	sub.f32 	%f579, %f575, %f578;
	fma.rz.f32 	%f580, %f579, %f573, %f578;
	cvt.rzi.f32.f32 	%f581, %f580;
	sub.f32 	%f891, %f575, %f581;
	sub.s32 	%r7997, %r7997, %r326;
	mov.b32 	%r7996, %f891;
	setp.ne.s32 	%p110, %r7997, 0;
	setp.ne.s32 	%p111, %r7996, 0;
	and.pred  	%p112, %p110, %p111;
	@%p112 bra 	$L__BB0_64;
$L__BB0_65:                             // %__internal_fmodf_slowpath_mod.exit.i.i894
	setp.gt.u32 	%p113, %r32, 2139095039;
	selp.f32 	%f582, 0f7FFFFFFF, 0f4B800000, %p113;
	mul.f32 	%f583, %f891, 0f34000000;
	mul.f32 	%f892, %f582, %f583;
	bra.uni 	$L__BB0_66;
$L__BB0_56:                             // %__nv_fast_fdividef.exit.i.i.i871
	div.approx.f32 	%f566, %f904, %f181;
	cvt.rzi.f32.f32 	%f890, %f566;
	fma.rn.f32 	%f72, %f890, 0fC0000000, %f904;
	mov.b32 	%r31, %f72;
	setp.lt.u32 	%p104, %r31, 1073741824;
	@%p104 bra 	$L__BB0_61;
// %bb.57:
	setp.lt.u32 	%p105, %r31, -2147483647;
	@%p105 bra 	$L__BB0_59;
// %bb.58:
	add.f32 	%f571, %f890, 0fBF800000;
	setp.lt.f32 	%p108, %f72, 0fC0000000;
	add.f32 	%f572, %f571, 0fBF800000;
	selp.f32 	%f890, %f572, %f571, %p108;
	bra.uni 	$L__BB0_61;
$L__BB0_59:
	add.f32 	%f890, %f890, 0f3F800000;
	setp.ltu.f32 	%p106, %f72, 0f40800000;
	@%p106 bra 	$L__BB0_61;
// %bb.60:                              // %__nv_fmaf_rn.exit.i.i.i875
	add.f32 	%f567, %f890, 0f3F800000;
	fma.rn.f32 	%f569, %f181, 0fC0400000, %f72;
	setp.ge.f32 	%p107, %f569, 0f00000000;
	add.f32 	%f570, %f567, 0f3F800000;
	selp.f32 	%f890, %f570, %f567, %p107;
$L__BB0_61:                             // %__internal_fmodf_fastpath_quot.exit.i.i878
	fma.rn.f32 	%f892, %f890, 0fC0000000, %f904;
$L__BB0_66:                             // %__internal_fmodf_kernel.exit.i897
	abs.f32 	%f584, %f892;
	setp.gtu.f32 	%p114, %f584, 0f7F800000;
	mov.b32 	%r328, %f157;
	and.b32  	%r39, %r328, -2147483648;
	@%p114 bra 	$L__BB0_68;
// %bb.67:
	mov.b32 	%r329, %f892;
	or.b32  	%r330, %r39, %r329;
	mov.b32 	%f892, %r330;
$L__BB0_68:                             // %__nv_fmodf.exit898
	and.b32  	%r339, %r107, 6;
	mov.u32 	%r340, -8;
	sub.s32 	%r341, %r340, %r339;
	mul.lo.s32 	%r342, %r122, %r341;
	cvt.rn.f32.s32 	%f88, %r342;
	div.approx.f32 	%f89, %f88, %f564;
	abs.f32 	%f908, %f89;
	setp.lt.f32 	%p122, %f908, 0f40000000;
	mov.f32 	%f896, %f908;
	@%p122 bra 	$L__BB0_80;
// %bb.69:
	setp.gtu.f32 	%p123, %f908, 0f4B800000;
	@%p123 bra 	$L__BB0_76;
	bra.uni 	$L__BB0_70;
$L__BB0_76:
	mov.b32 	%r41, %f908;
	and.b32  	%r343, %r41, 8388607;
	or.b32  	%r7998, %r343, 1065353216;
	mov.b32 	%f895, %r7998;
	add.s32 	%r344, %r41, -1073741824;
	and.b32  	%r7999, %r344, -8388608;
	setp.eq.s32 	%p129, %r7999, 0;
	@%p129 bra 	$L__BB0_79;
// %bb.77:                              // %__nv_fmaf_rn.exit4.i.i.i923.preheader
	mov.f32 	%f625, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f624,%f625;
	// end inline asm
$L__BB0_78:                             // %__nv_fmaf_rn.exit4.i.i.i923
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r345, %r7999, 192937984;
	add.s32 	%r346, %r7998, %r345;
	mov.b32 	%f626, %r346;
	mul.f32 	%f627, %f624, %f626;
	sub.f32 	%f628, %f626, %f627;
	fma.rn.f32 	%f629, %f628, %f624, %f627;
	sub.f32 	%f630, %f626, %f629;
	fma.rz.f32 	%f631, %f630, %f624, %f629;
	cvt.rzi.f32.f32 	%f632, %f631;
	sub.f32 	%f895, %f626, %f632;
	sub.s32 	%r7999, %r7999, %r345;
	mov.b32 	%r7998, %f895;
	setp.ne.s32 	%p130, %r7999, 0;
	setp.ne.s32 	%p131, %r7998, 0;
	and.pred  	%p132, %p130, %p131;
	@%p132 bra 	$L__BB0_78;
$L__BB0_79:                             // %__internal_fmodf_slowpath_mod.exit.i.i925
	setp.gt.u32 	%p133, %r41, 2139095039;
	selp.f32 	%f633, 0f7FFFFFFF, 0f4B800000, %p133;
	mul.f32 	%f634, %f895, 0f34000000;
	mul.f32 	%f896, %f633, %f634;
	bra.uni 	$L__BB0_80;
$L__BB0_70:                             // %__nv_fast_fdividef.exit.i.i.i902
	div.approx.f32 	%f617, %f908, %f181;
	cvt.rzi.f32.f32 	%f894, %f617;
	fma.rn.f32 	%f92, %f894, 0fC0000000, %f908;
	mov.b32 	%r40, %f92;
	setp.lt.u32 	%p124, %r40, 1073741824;
	@%p124 bra 	$L__BB0_75;
// %bb.71:
	setp.lt.u32 	%p125, %r40, -2147483647;
	@%p125 bra 	$L__BB0_73;
// %bb.72:
	add.f32 	%f622, %f894, 0fBF800000;
	setp.lt.f32 	%p128, %f92, 0fC0000000;
	add.f32 	%f623, %f622, 0fBF800000;
	selp.f32 	%f894, %f623, %f622, %p128;
	bra.uni 	$L__BB0_75;
$L__BB0_73:
	add.f32 	%f894, %f894, 0f3F800000;
	setp.ltu.f32 	%p126, %f92, 0f40800000;
	@%p126 bra 	$L__BB0_75;
// %bb.74:                              // %__nv_fmaf_rn.exit.i.i.i906
	add.f32 	%f618, %f894, 0f3F800000;
	fma.rn.f32 	%f620, %f181, 0fC0400000, %f92;
	setp.ge.f32 	%p127, %f620, 0f00000000;
	add.f32 	%f621, %f618, 0f3F800000;
	selp.f32 	%f894, %f621, %f618, %p127;
$L__BB0_75:                             // %__internal_fmodf_fastpath_quot.exit.i.i909
	fma.rn.f32 	%f896, %f894, 0fC0000000, %f908;
$L__BB0_80:                             // %__internal_fmodf_kernel.exit.i928
	abs.f32 	%f635, %f896;
	setp.gtu.f32 	%p134, %f635, 0f7F800000;
	mov.b32 	%r347, %f89;
	and.b32  	%r48, %r347, -2147483648;
	@%p134 bra 	$L__BB0_82;
// %bb.81:
	mov.b32 	%r348, %f896;
	or.b32  	%r349, %r48, %r348;
	mov.b32 	%f896, %r349;
$L__BB0_82:                             // %__nv_fmodf.exit929
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r180;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd46;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd47;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11698, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd54, [retval0+0];
	} // callseq 6
	setp.eq.s64 	%p142, %rd54, 64;
	@%p142 bra 	$L__BB0_133;
	bra.uni 	$L__BB0_83;
$L__BB0_133:                            // %pass377
	{ // callseq 10, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r180;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd46;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd47;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11698, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd60, [retval0+0];
	} // callseq 10
	cvt.rn.f32.s64 	%f668, %rd60;
	div.approx.f32 	%f159, %f156, %f668;
	abs.f32 	%f912, %f159;
	setp.lt.f32 	%p143, %f912, 0f40000000;
	@%p143 bra 	$L__BB0_145;
// %bb.134:
	setp.gtu.f32 	%p144, %f912, 0f4B800000;
	@%p144 bra 	$L__BB0_141;
	bra.uni 	$L__BB0_135;
$L__BB0_141:
	mov.b32 	%r124, %f912;
	and.b32  	%r370, %r124, 8388607;
	or.b32  	%r8019, %r370, 1065353216;
	mov.b32 	%f911, %r8019;
	add.s32 	%r371, %r124, -1073741824;
	and.b32  	%r8020, %r371, -8388608;
	setp.eq.s32 	%p150, %r8020, 0;
	@%p150 bra 	$L__BB0_144;
// %bb.142:                             // %__nv_fmaf_rn.exit4.i.i.i1047.preheader
	mov.f32 	%f678, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f677,%f678;
	// end inline asm
$L__BB0_143:                            // %__nv_fmaf_rn.exit4.i.i.i1047
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r372, %r8020, 192937984;
	add.s32 	%r373, %r8019, %r372;
	mov.b32 	%f679, %r373;
	mul.f32 	%f680, %f677, %f679;
	sub.f32 	%f681, %f679, %f680;
	fma.rn.f32 	%f682, %f681, %f677, %f680;
	sub.f32 	%f683, %f679, %f682;
	fma.rz.f32 	%f684, %f683, %f677, %f682;
	cvt.rzi.f32.f32 	%f685, %f684;
	sub.f32 	%f911, %f679, %f685;
	sub.s32 	%r8020, %r8020, %r372;
	mov.b32 	%r8019, %f911;
	setp.ne.s32 	%p151, %r8020, 0;
	setp.ne.s32 	%p152, %r8019, 0;
	and.pred  	%p153, %p151, %p152;
	@%p153 bra 	$L__BB0_143;
$L__BB0_144:                            // %__internal_fmodf_slowpath_mod.exit.i.i1049
	setp.gt.u32 	%p154, %r124, 2139095039;
	selp.f32 	%f686, 0f7FFFFFFF, 0f4B800000, %p154;
	mul.f32 	%f687, %f911, 0f34000000;
	mul.f32 	%f912, %f686, %f687;
	bra.uni 	$L__BB0_145;
$L__BB0_135:                            // %__nv_fast_fdividef.exit.i.i.i1026
	div.approx.f32 	%f670, %f912, %f181;
	cvt.rzi.f32.f32 	%f910, %f670;
	fma.rn.f32 	%f162, %f910, 0fC0000000, %f912;
	mov.b32 	%r123, %f162;
	setp.lt.u32 	%p145, %r123, 1073741824;
	@%p145 bra 	$L__BB0_140;
// %bb.136:
	setp.lt.u32 	%p146, %r123, -2147483647;
	@%p146 bra 	$L__BB0_138;
// %bb.137:
	add.f32 	%f675, %f910, 0fBF800000;
	setp.lt.f32 	%p149, %f162, 0fC0000000;
	add.f32 	%f676, %f675, 0fBF800000;
	selp.f32 	%f910, %f676, %f675, %p149;
	bra.uni 	$L__BB0_140;
$L__BB0_138:
	add.f32 	%f910, %f910, 0f3F800000;
	setp.ltu.f32 	%p147, %f162, 0f40800000;
	@%p147 bra 	$L__BB0_140;
// %bb.139:                             // %__nv_fmaf_rn.exit.i.i.i1030
	add.f32 	%f671, %f910, 0f3F800000;
	fma.rn.f32 	%f673, %f181, 0fC0400000, %f162;
	setp.ge.f32 	%p148, %f673, 0f00000000;
	add.f32 	%f674, %f671, 0f3F800000;
	selp.f32 	%f910, %f674, %f671, %p148;
$L__BB0_140:                            // %__internal_fmodf_fastpath_quot.exit.i.i1033
	fma.rn.f32 	%f912, %f910, 0fC0000000, %f912;
$L__BB0_145:                            // %__internal_fmodf_kernel.exit.i1052
	abs.f32 	%f688, %f912;
	setp.gtu.f32 	%p155, %f688, 0f7F800000;
	@%p155 bra 	$L__BB0_147;
// %bb.146:
	mov.b32 	%r374, %f159;
	and.b32  	%r375, %r374, -2147483648;
	mov.b32 	%r376, %f912;
	or.b32  	%r377, %r375, %r376;
	mov.b32 	%f912, %r377;
$L__BB0_147:                            // %__nv_fmodf.exit1053
	{ // callseq 11, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r180;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd46;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd47;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11698, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd64, [retval0+0];
	} // callseq 11
	cvt.rn.f32.s64 	%f719, %rd64;
	div.approx.f32 	%f178, %f88, %f719;
	abs.f32 	%f900, %f178;
	setp.lt.f32 	%p163, %f900, 0f40000000;
	@%p163 bra 	$L__BB0_95;
// %bb.84:
	setp.gtu.f32 	%p164, %f900, 0f4B800000;
	@%p164 bra 	$L__BB0_91;
	bra.uni 	$L__BB0_85;
$L__BB0_91:
	mov.b32 	%r54, %f900;
	and.b32  	%r386, %r54, 8388607;
	or.b32  	%r8000, %r386, 1065353216;
	mov.b32 	%f899, %r8000;
	add.s32 	%r387, %r54, -1073741824;
	and.b32  	%r8001, %r387, -8388608;
	setp.eq.s32 	%p170, %r8001, 0;
	@%p170 bra 	$L__BB0_94;
// %bb.92:                              // %__nv_fmaf_rn.exit4.i.i.i954.preheader
	mov.f32 	%f729, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f728,%f729;
	// end inline asm
$L__BB0_93:                             // %__nv_fmaf_rn.exit4.i.i.i954
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r388, %r8001, 192937984;
	add.s32 	%r389, %r8000, %r388;
	mov.b32 	%f730, %r389;
	mul.f32 	%f731, %f728, %f730;
	sub.f32 	%f732, %f730, %f731;
	fma.rn.f32 	%f733, %f732, %f728, %f731;
	sub.f32 	%f734, %f730, %f733;
	fma.rz.f32 	%f735, %f734, %f728, %f733;
	cvt.rzi.f32.f32 	%f736, %f735;
	sub.f32 	%f899, %f730, %f736;
	sub.s32 	%r8001, %r8001, %r388;
	mov.b32 	%r8000, %f899;
	setp.ne.s32 	%p171, %r8001, 0;
	setp.ne.s32 	%p172, %r8000, 0;
	and.pred  	%p173, %p171, %p172;
	@%p173 bra 	$L__BB0_93;
$L__BB0_94:                             // %__internal_fmodf_slowpath_mod.exit.i.i956
	setp.gt.u32 	%p174, %r54, 2139095039;
	selp.f32 	%f737, 0f7FFFFFFF, 0f4B800000, %p174;
	mul.f32 	%f738, %f899, 0f34000000;
	mul.f32 	%f900, %f737, %f738;
	bra.uni 	$L__BB0_95;
$L__BB0_85:                             // %__nv_fast_fdividef.exit.i.i.i933
	div.approx.f32 	%f721, %f900, %f181;
	cvt.rzi.f32.f32 	%f898, %f721;
	fma.rn.f32 	%f107, %f898, 0fC0000000, %f900;
	mov.b32 	%r53, %f107;
	setp.lt.u32 	%p165, %r53, 1073741824;
	@%p165 bra 	$L__BB0_90;
// %bb.86:
	setp.lt.u32 	%p166, %r53, -2147483647;
	@%p166 bra 	$L__BB0_88;
// %bb.87:
	add.f32 	%f726, %f898, 0fBF800000;
	setp.lt.f32 	%p169, %f107, 0fC0000000;
	add.f32 	%f727, %f726, 0fBF800000;
	selp.f32 	%f898, %f727, %f726, %p169;
	bra.uni 	$L__BB0_90;
$L__BB0_88:
	add.f32 	%f898, %f898, 0f3F800000;
	setp.ltu.f32 	%p167, %f107, 0f40800000;
	@%p167 bra 	$L__BB0_90;
// %bb.89:                              // %__nv_fmaf_rn.exit.i.i.i937
	add.f32 	%f722, %f898, 0f3F800000;
	fma.rn.f32 	%f724, %f181, 0fC0400000, %f107;
	setp.ge.f32 	%p168, %f724, 0f00000000;
	add.f32 	%f725, %f722, 0f3F800000;
	selp.f32 	%f898, %f725, %f722, %p168;
$L__BB0_90:                             // %__internal_fmodf_fastpath_quot.exit.i.i940
	fma.rn.f32 	%f900, %f898, 0fC0000000, %f900;
$L__BB0_95:                             // %__internal_fmodf_kernel.exit.i959
	abs.f32 	%f739, %f900;
	setp.gtu.f32 	%p175, %f739, 0f7F800000;
	@%p175 bra 	$L__BB0_97;
// %bb.96:
	mov.b32 	%r390, %f178;
	and.b32  	%r391, %r390, -2147483648;
	mov.b32 	%r392, %f900;
	or.b32  	%r393, %r391, %r392;
	mov.b32 	%f900, %r393;
$L__BB0_97:                             // %__nv_fmodf.exit960
	{ // callseq 12, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r180;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd46;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd47;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11698, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd68, [retval0+0];
	} // callseq 12
	setp.eq.s64 	%p183, %rd68, 64;
	@%p183 bra 	$L__BB0_99;
	bra.uni 	$L__BB0_98;
$L__BB0_99:                             // %pass442
	@%p102 bra 	$L__BB0_111;
// %bb.100:
	setp.gtu.f32 	%p185, %f904, 0f4B800000;
	@%p185 bra 	$L__BB0_107;
	bra.uni 	$L__BB0_101;
$L__BB0_107:
	mov.b32 	%r64, %f904;
	and.b32  	%r408, %r64, 8388607;
	or.b32  	%r8002, %r408, 1065353216;
	mov.b32 	%f903, %r8002;
	add.s32 	%r409, %r64, -1073741824;
	and.b32  	%r8003, %r409, -8388608;
	setp.eq.s32 	%p191, %r8003, 0;
	@%p191 bra 	$L__BB0_110;
// %bb.108:                             // %__nv_fmaf_rn.exit4.i.i.i985.preheader
	mov.f32 	%f781, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f780,%f781;
	// end inline asm
$L__BB0_109:                            // %__nv_fmaf_rn.exit4.i.i.i985
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r410, %r8003, 192937984;
	add.s32 	%r411, %r8002, %r410;
	mov.b32 	%f782, %r411;
	mul.f32 	%f783, %f780, %f782;
	sub.f32 	%f784, %f782, %f783;
	fma.rn.f32 	%f785, %f784, %f780, %f783;
	sub.f32 	%f786, %f782, %f785;
	fma.rz.f32 	%f787, %f786, %f780, %f785;
	cvt.rzi.f32.f32 	%f788, %f787;
	sub.f32 	%f903, %f782, %f788;
	sub.s32 	%r8003, %r8003, %r410;
	mov.b32 	%r8002, %f903;
	setp.ne.s32 	%p192, %r8003, 0;
	setp.ne.s32 	%p193, %r8002, 0;
	and.pred  	%p194, %p192, %p193;
	@%p194 bra 	$L__BB0_109;
$L__BB0_110:                            // %__internal_fmodf_slowpath_mod.exit.i.i987
	setp.gt.u32 	%p195, %r64, 2139095039;
	selp.f32 	%f789, 0f7FFFFFFF, 0f4B800000, %p195;
	mul.f32 	%f790, %f903, 0f34000000;
	mul.f32 	%f904, %f789, %f790;
	bra.uni 	$L__BB0_111;
$L__BB0_101:                            // %__nv_fast_fdividef.exit.i.i.i964
	div.approx.f32 	%f773, %f904, %f181;
	cvt.rzi.f32.f32 	%f902, %f773;
	fma.rn.f32 	%f122, %f902, 0fC0000000, %f904;
	mov.b32 	%r63, %f122;
	setp.lt.u32 	%p186, %r63, 1073741824;
	@%p186 bra 	$L__BB0_106;
// %bb.102:
	setp.lt.u32 	%p187, %r63, -2147483647;
	@%p187 bra 	$L__BB0_104;
// %bb.103:
	add.f32 	%f778, %f902, 0fBF800000;
	setp.lt.f32 	%p190, %f122, 0fC0000000;
	add.f32 	%f779, %f778, 0fBF800000;
	selp.f32 	%f902, %f779, %f778, %p190;
	bra.uni 	$L__BB0_106;
$L__BB0_104:
	add.f32 	%f902, %f902, 0f3F800000;
	setp.ltu.f32 	%p188, %f122, 0f40800000;
	@%p188 bra 	$L__BB0_106;
// %bb.105:                             // %__nv_fmaf_rn.exit.i.i.i968
	add.f32 	%f774, %f902, 0f3F800000;
	fma.rn.f32 	%f776, %f181, 0fC0400000, %f122;
	setp.ge.f32 	%p189, %f776, 0f00000000;
	add.f32 	%f777, %f774, 0f3F800000;
	selp.f32 	%f902, %f777, %f774, %p189;
$L__BB0_106:                            // %__internal_fmodf_fastpath_quot.exit.i.i971
	fma.rn.f32 	%f904, %f902, 0fC0000000, %f904;
$L__BB0_111:                            // %__internal_fmodf_kernel.exit.i990
	abs.f32 	%f791, %f904;
	setp.gtu.f32 	%p196, %f791, 0f7F800000;
	@%p196 bra 	$L__BB0_113;
// %bb.112:
	mov.b32 	%r412, %f904;
	or.b32  	%r413, %r39, %r412;
	mov.b32 	%f904, %r413;
$L__BB0_113:                            // %__nv_fmodf.exit991
	@%p122 bra 	$L__BB0_125;
// %bb.114:
	setp.gtu.f32 	%p205, %f908, 0f4B800000;
	@%p205 bra 	$L__BB0_121;
	bra.uni 	$L__BB0_115;
$L__BB0_121:
	mov.b32 	%r72, %f908;
	and.b32  	%r422, %r72, 8388607;
	or.b32  	%r8004, %r422, 1065353216;
	mov.b32 	%f907, %r8004;
	add.s32 	%r423, %r72, -1073741824;
	and.b32  	%r8005, %r423, -8388608;
	setp.eq.s32 	%p211, %r8005, 0;
	@%p211 bra 	$L__BB0_124;
// %bb.122:                             // %__nv_fmaf_rn.exit4.i.i.i1016.preheader
	mov.f32 	%f831, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f830,%f831;
	// end inline asm
$L__BB0_123:                            // %__nv_fmaf_rn.exit4.i.i.i1016
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r424, %r8005, 192937984;
	add.s32 	%r425, %r8004, %r424;
	mov.b32 	%f832, %r425;
	mul.f32 	%f833, %f830, %f832;
	sub.f32 	%f834, %f832, %f833;
	fma.rn.f32 	%f835, %f834, %f830, %f833;
	sub.f32 	%f836, %f832, %f835;
	fma.rz.f32 	%f837, %f836, %f830, %f835;
	cvt.rzi.f32.f32 	%f838, %f837;
	sub.f32 	%f907, %f832, %f838;
	sub.s32 	%r8005, %r8005, %r424;
	mov.b32 	%r8004, %f907;
	setp.ne.s32 	%p212, %r8005, 0;
	setp.ne.s32 	%p213, %r8004, 0;
	and.pred  	%p214, %p212, %p213;
	@%p214 bra 	$L__BB0_123;
$L__BB0_124:                            // %__internal_fmodf_slowpath_mod.exit.i.i1018
	setp.gt.u32 	%p215, %r72, 2139095039;
	selp.f32 	%f839, 0f7FFFFFFF, 0f4B800000, %p215;
	mul.f32 	%f840, %f907, 0f34000000;
	mul.f32 	%f908, %f839, %f840;
	bra.uni 	$L__BB0_125;
$L__BB0_115:                            // %__nv_fast_fdividef.exit.i.i.i995
	div.approx.f32 	%f823, %f908, %f181;
	cvt.rzi.f32.f32 	%f906, %f823;
	fma.rn.f32 	%f139, %f906, 0fC0000000, %f908;
	mov.b32 	%r71, %f139;
	setp.lt.u32 	%p206, %r71, 1073741824;
	@%p206 bra 	$L__BB0_120;
// %bb.116:
	setp.lt.u32 	%p207, %r71, -2147483647;
	@%p207 bra 	$L__BB0_118;
// %bb.117:
	add.f32 	%f828, %f906, 0fBF800000;
	setp.lt.f32 	%p210, %f139, 0fC0000000;
	add.f32 	%f829, %f828, 0fBF800000;
	selp.f32 	%f906, %f829, %f828, %p210;
	bra.uni 	$L__BB0_120;
$L__BB0_118:
	add.f32 	%f906, %f906, 0f3F800000;
	setp.ltu.f32 	%p208, %f139, 0f40800000;
	@%p208 bra 	$L__BB0_120;
// %bb.119:                             // %__nv_fmaf_rn.exit.i.i.i999
	add.f32 	%f824, %f906, 0f3F800000;
	fma.rn.f32 	%f826, %f181, 0fC0400000, %f139;
	setp.ge.f32 	%p209, %f826, 0f00000000;
	add.f32 	%f827, %f824, 0f3F800000;
	selp.f32 	%f906, %f827, %f824, %p209;
$L__BB0_120:                            // %__internal_fmodf_fastpath_quot.exit.i.i1002
	fma.rn.f32 	%f908, %f906, 0fC0000000, %f908;
$L__BB0_125:                            // %__internal_fmodf_kernel.exit.i1021
	abs.f32 	%f841, %f908;
	setp.gtu.f32 	%p216, %f841, 0f7F800000;
	@%p216 bra 	$L__BB0_127;
// %bb.126:
	mov.b32 	%r426, %f908;
	or.b32  	%r427, %r48, %r426;
	mov.b32 	%f908, %r427;
$L__BB0_127:                            // %__nv_fmodf.exit1022
	setp.le.s32 	%p224, %r182, %r181;
	mov.u32 	%r7989, 0;
	@%p224 bra 	$L__BB0_153;
// %bb.128:                             // %L1473.lr.ph
	mov.f32 	%f185, 0f43808000;
	div.approx.f32 	%f186, %f184, %f185;
	div.approx.f32 	%f220, %f218, %f185;
	div.approx.f32 	%f255, %f253, %f185;
	div.approx.f32 	%f289, %f287, %f185;
	div.approx.f32 	%f324, %f322, %f185;
	div.approx.f32 	%f358, %f356, %f185;
	div.approx.f32 	%f393, %f391, %f185;
	div.approx.f32 	%f427, %f425, %f185;
	abs.f32 	%f187, %f186;
	abs.f32 	%f221, %f220;
	abs.f32 	%f256, %f255;
	abs.f32 	%f290, %f289;
	abs.f32 	%f325, %f324;
	abs.f32 	%f359, %f358;
	abs.f32 	%f394, %f393;
	abs.f32 	%f428, %f427;
	setp.gt.f32 	%p13, %f187, 0f4B800000;
	mul.f32 	%f188, %f186, 0f00000000;
	setp.gt.f32 	%p19, %f221, 0f4B800000;
	mul.f32 	%f222, %f220, 0f00000000;
	setp.gt.f32 	%p25, %f256, 0f4B800000;
	mul.f32 	%f257, %f255, 0f00000000;
	setp.gt.f32 	%p31, %f290, 0f4B800000;
	mul.f32 	%f291, %f289, 0f00000000;
	setp.gt.f32 	%p37, %f325, 0f4B800000;
	mul.f32 	%f326, %f324, 0f00000000;
	setp.gt.f32 	%p43, %f359, 0f4B800000;
	mul.f32 	%f360, %f358, 0f00000000;
	setp.gt.f32 	%p49, %f394, 0f4B800000;
	mul.f32 	%f395, %f393, 0f00000000;
	setp.gt.f32 	%p55, %f428, 0f4B800000;
	mul.f32 	%f429, %f427, 0f00000000;
	selp.f32 	%f189, %f188, %f186, %p13;
	selp.f32 	%f223, %f222, %f220, %p19;
	selp.f32 	%f258, %f257, %f255, %p25;
	selp.f32 	%f292, %f291, %f289, %p31;
	selp.f32 	%f327, %f326, %f324, %p37;
	selp.f32 	%f361, %f360, %f358, %p43;
	selp.f32 	%f396, %f395, %f393, %p49;
	selp.f32 	%f430, %f429, %f427, %p55;
	add.f32 	%f190, %f189, %f189;
	add.f32 	%f224, %f223, %f223;
	add.f32 	%f259, %f258, %f258;
	add.f32 	%f293, %f292, %f292;
	add.f32 	%f328, %f327, %f327;
	add.f32 	%f362, %f361, %f361;
	add.f32 	%f397, %f396, %f396;
	add.f32 	%f431, %f430, %f430;
	add.f32 	%f480, %f884, %f884;
	add.f32 	%f532, %f888, %f888;
	add.f32 	%f585, %f892, %f892;
	add.f32 	%f636, %f896, %f896;
	mov.b32 	%r207, %f190;
	mov.b32 	%r214, %f224;
	mov.b32 	%r225, %f259;
	mov.b32 	%r232, %f293;
	mov.b32 	%r243, %f328;
	mov.b32 	%r250, %f362;
	mov.b32 	%r261, %f397;
	mov.b32 	%r268, %f431;
	mov.b32 	%r286, %f480;
	mov.b32 	%r309, %f532;
	mov.b32 	%r331, %f585;
	mov.b32 	%r362, %f636;
	and.b32  	%r208, %r207, -2147483648;
	and.b32  	%r215, %r214, -2147483648;
	and.b32  	%r226, %r225, -2147483648;
	and.b32  	%r233, %r232, -2147483648;
	and.b32  	%r244, %r243, -2147483648;
	and.b32  	%r251, %r250, -2147483648;
	and.b32  	%r262, %r261, -2147483648;
	and.b32  	%r269, %r268, -2147483648;
	and.b32  	%r287, %r286, -2147483648;
	and.b32  	%r310, %r309, -2147483648;
	and.b32  	%r332, %r331, -2147483648;
	and.b32  	%r363, %r362, -2147483648;
	add.f32 	%f689, %f912, %f912;
	add.f32 	%f740, %f900, %f900;
	or.b32  	%r209, %r208, 1056964608;
	or.b32  	%r216, %r215, 1056964608;
	or.b32  	%r227, %r226, 1056964608;
	or.b32  	%r234, %r233, 1056964608;
	or.b32  	%r245, %r244, 1056964608;
	or.b32  	%r252, %r251, 1056964608;
	or.b32  	%r263, %r262, 1056964608;
	or.b32  	%r270, %r269, 1056964608;
	or.b32  	%r288, %r287, 1056964608;
	or.b32  	%r311, %r310, 1056964608;
	or.b32  	%r333, %r332, 1056964608;
	or.b32  	%r364, %r363, 1056964608;
	mov.b32 	%r378, %f689;
	mov.b32 	%r400, %f740;
	mov.b32 	%f191, %r209;
	mov.b32 	%f225, %r216;
	mov.b32 	%f260, %r227;
	mov.b32 	%f294, %r234;
	mov.b32 	%f329, %r245;
	mov.b32 	%f363, %r252;
	mov.b32 	%f398, %r263;
	mov.b32 	%f432, %r270;
	mov.b32 	%f481, %r288;
	mov.b32 	%f533, %r311;
	mov.b32 	%f586, %r333;
	mov.b32 	%f637, %r364;
	and.b32  	%r379, %r378, -2147483648;
	and.b32  	%r401, %r400, -2147483648;
	add.f32 	%f792, %f904, %f904;
	add.f32 	%f192, %f190, %f191;
	abs.f32 	%f194, %f190;
	add.f32 	%f226, %f224, %f225;
	abs.f32 	%f228, %f224;
	add.f32 	%f261, %f259, %f260;
	abs.f32 	%f263, %f259;
	add.f32 	%f295, %f293, %f294;
	abs.f32 	%f297, %f293;
	add.f32 	%f330, %f328, %f329;
	abs.f32 	%f332, %f328;
	add.f32 	%f364, %f362, %f363;
	abs.f32 	%f366, %f362;
	add.f32 	%f399, %f397, %f398;
	abs.f32 	%f401, %f397;
	add.f32 	%f433, %f431, %f432;
	abs.f32 	%f435, %f431;
	add.f32 	%f482, %f480, %f481;
	abs.f32 	%f484, %f480;
	add.f32 	%f534, %f532, %f533;
	abs.f32 	%f536, %f532;
	add.f32 	%f587, %f585, %f586;
	abs.f32 	%f589, %f585;
	add.f32 	%f638, %f636, %f637;
	abs.f32 	%f640, %f636;
	or.b32  	%r380, %r379, 1056964608;
	or.b32  	%r402, %r401, 1056964608;
	mov.b32 	%r414, %f792;
	cvt.rzi.f32.f32 	%f193, %f192;
	setp.gt.f32 	%p14, %f194, 0f4B000000;
	cvt.rzi.f32.f32 	%f227, %f226;
	setp.gt.f32 	%p20, %f228, 0f4B000000;
	cvt.rzi.f32.f32 	%f262, %f261;
	setp.gt.f32 	%p26, %f263, 0f4B000000;
	cvt.rzi.f32.f32 	%f296, %f295;
	setp.gt.f32 	%p32, %f297, 0f4B000000;
	cvt.rzi.f32.f32 	%f331, %f330;
	setp.gt.f32 	%p38, %f332, 0f4B000000;
	cvt.rzi.f32.f32 	%f365, %f364;
	setp.gt.f32 	%p44, %f366, 0f4B000000;
	cvt.rzi.f32.f32 	%f400, %f399;
	setp.gt.f32 	%p50, %f401, 0f4B000000;
	cvt.rzi.f32.f32 	%f434, %f433;
	setp.gt.f32 	%p56, %f435, 0f4B000000;
	cvt.rzi.f32.f32 	%f483, %f482;
	setp.gt.f32 	%p74, %f484, 0f4B000000;
	cvt.rzi.f32.f32 	%f535, %f534;
	setp.gt.f32 	%p94, %f536, 0f4B000000;
	cvt.rzi.f32.f32 	%f588, %f587;
	setp.gt.f32 	%p115, %f589, 0f4B000000;
	cvt.rzi.f32.f32 	%f639, %f638;
	setp.gt.f32 	%p135, %f640, 0f4B000000;
	mov.b32 	%f690, %r380;
	mov.b32 	%f741, %r402;
	and.b32  	%r415, %r414, -2147483648;
	selp.f32 	%f195, %f190, %f193, %p14;
	cvt.rzi.f32.f32 	%f196, %f190;
	setp.lt.f32 	%p15, %f194, 0f3F000000;
	selp.f32 	%f229, %f224, %f227, %p20;
	cvt.rzi.f32.f32 	%f230, %f224;
	setp.lt.f32 	%p21, %f228, 0f3F000000;
	selp.f32 	%f264, %f259, %f262, %p26;
	cvt.rzi.f32.f32 	%f265, %f259;
	setp.lt.f32 	%p27, %f263, 0f3F000000;
	selp.f32 	%f298, %f293, %f296, %p32;
	cvt.rzi.f32.f32 	%f299, %f293;
	setp.lt.f32 	%p33, %f297, 0f3F000000;
	selp.f32 	%f333, %f328, %f331, %p38;
	cvt.rzi.f32.f32 	%f334, %f328;
	setp.lt.f32 	%p39, %f332, 0f3F000000;
	selp.f32 	%f367, %f362, %f365, %p44;
	cvt.rzi.f32.f32 	%f368, %f362;
	setp.lt.f32 	%p45, %f366, 0f3F000000;
	selp.f32 	%f402, %f397, %f400, %p50;
	cvt.rzi.f32.f32 	%f403, %f397;
	setp.lt.f32 	%p51, %f401, 0f3F000000;
	selp.f32 	%f436, %f431, %f434, %p56;
	cvt.rzi.f32.f32 	%f437, %f431;
	setp.lt.f32 	%p57, %f435, 0f3F000000;
	selp.f32 	%f485, %f480, %f483, %p74;
	cvt.rzi.f32.f32 	%f486, %f480;
	setp.lt.f32 	%p75, %f484, 0f3F000000;
	selp.f32 	%f537, %f532, %f535, %p94;
	cvt.rzi.f32.f32 	%f538, %f532;
	setp.lt.f32 	%p95, %f536, 0f3F000000;
	selp.f32 	%f590, %f585, %f588, %p115;
	cvt.rzi.f32.f32 	%f591, %f585;
	setp.lt.f32 	%p116, %f589, 0f3F000000;
	selp.f32 	%f641, %f636, %f639, %p135;
	cvt.rzi.f32.f32 	%f642, %f636;
	setp.lt.f32 	%p136, %f640, 0f3F000000;
	add.f32 	%f691, %f689, %f690;
	abs.f32 	%f693, %f689;
	add.f32 	%f742, %f740, %f741;
	abs.f32 	%f744, %f740;
	or.b32  	%r416, %r415, 1056964608;
	selp.f32 	%f197, %f196, %f195, %p15;
	selp.f32 	%f231, %f230, %f229, %p21;
	selp.f32 	%f266, %f265, %f264, %p27;
	selp.f32 	%f300, %f299, %f298, %p33;
	selp.f32 	%f335, %f334, %f333, %p39;
	selp.f32 	%f369, %f368, %f367, %p45;
	selp.f32 	%f404, %f403, %f402, %p51;
	selp.f32 	%f438, %f437, %f436, %p57;
	selp.f32 	%f487, %f486, %f485, %p75;
	selp.f32 	%f539, %f538, %f537, %p95;
	selp.f32 	%f592, %f591, %f590, %p116;
	selp.f32 	%f643, %f642, %f641, %p136;
	cvt.rzi.f32.f32 	%f692, %f691;
	setp.gt.f32 	%p156, %f693, 0f4B000000;
	cvt.rzi.f32.f32 	%f743, %f742;
	setp.gt.f32 	%p176, %f744, 0f4B000000;
	mov.b32 	%f793, %r416;
	fma.rn.f32 	%f198, %f197, 0fBF000000, %f189;
	fma.rn.f32 	%f232, %f231, 0fBF000000, %f223;
	fma.rn.f32 	%f267, %f266, 0fBF000000, %f258;
	fma.rn.f32 	%f301, %f300, 0fBF000000, %f292;
	fma.rn.f32 	%f336, %f335, 0fBF000000, %f327;
	fma.rn.f32 	%f370, %f369, 0fBF000000, %f361;
	fma.rn.f32 	%f405, %f404, 0fBF000000, %f396;
	fma.rn.f32 	%f439, %f438, 0fBF000000, %f430;
	fma.rn.f32 	%f488, %f487, 0fBF000000, %f884;
	fma.rn.f32 	%f540, %f539, 0fBF000000, %f888;
	fma.rn.f32 	%f593, %f592, 0fBF000000, %f892;
	fma.rn.f32 	%f644, %f643, 0fBF000000, %f896;
	selp.f32 	%f694, %f689, %f692, %p156;
	cvt.rzi.f32.f32 	%f695, %f689;
	setp.lt.f32 	%p157, %f693, 0f3F000000;
	selp.f32 	%f745, %f740, %f743, %p176;
	cvt.rzi.f32.f32 	%f746, %f740;
	setp.lt.f32 	%p177, %f744, 0f3F000000;
	add.f32 	%f794, %f792, %f793;
	abs.f32 	%f796, %f792;
	mul.f32 	%f199, %f198, %f198;
	mul.f32 	%f233, %f232, %f232;
	mul.f32 	%f268, %f267, %f267;
	mul.f32 	%f302, %f301, %f301;
	mul.f32 	%f337, %f336, %f336;
	mul.f32 	%f371, %f370, %f370;
	mul.f32 	%f406, %f405, %f405;
	mul.f32 	%f440, %f439, %f439;
	mul.f32 	%f489, %f488, %f488;
	mul.f32 	%f541, %f540, %f540;
	mul.f32 	%f594, %f593, %f593;
	mul.f32 	%f645, %f644, %f644;
	selp.f32 	%f696, %f695, %f694, %p157;
	selp.f32 	%f747, %f746, %f745, %p177;
	cvt.rzi.f32.f32 	%f795, %f794;
	setp.gt.f32 	%p198, %f796, 0f4B000000;
	cvt.rzi.s32.f32 	%r210, %f197;
	fma.rn.f32 	%f200, %f199, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f201, %f199, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r217, %f231;
	fma.rn.f32 	%f234, %f233, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f235, %f233, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r228, %f266;
	fma.rn.f32 	%f269, %f268, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f270, %f268, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r235, %f300;
	fma.rn.f32 	%f303, %f302, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f304, %f302, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r246, %f335;
	fma.rn.f32 	%f338, %f337, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f339, %f337, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r253, %f369;
	fma.rn.f32 	%f372, %f371, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f373, %f371, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r264, %f404;
	fma.rn.f32 	%f407, %f406, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f408, %f406, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r271, %f438;
	fma.rn.f32 	%f441, %f440, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f442, %f440, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f490, %f489, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f491, %f489, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f542, %f541, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f543, %f541, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f595, %f594, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f596, %f594, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f646, %f645, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f647, %f645, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f697, %f696, 0fBF000000, %f912;
	fma.rn.f32 	%f748, %f747, 0fBF000000, %f900;
	selp.f32 	%f797, %f792, %f795, %p198;
	cvt.rzi.f32.f32 	%f798, %f792;
	setp.lt.f32 	%p199, %f796, 0f3F000000;
	add.s32 	%r211, %r210, 1;
	fma.rn.f32 	%f202, %f200, %f199, 0fC0A55DF6;
	fma.rn.f32 	%f203, %f201, %f199, 0f4081E0CF;
	fma.rn.f32 	%f204, %f199, %f198, 0f00000000;
	add.s32 	%r218, %r217, 1;
	fma.rn.f32 	%f236, %f234, %f233, 0fC0A55DF6;
	fma.rn.f32 	%f237, %f235, %f233, 0f4081E0CF;
	fma.rn.f32 	%f238, %f233, %f232, 0f00000000;
	add.s32 	%r229, %r228, 1;
	fma.rn.f32 	%f271, %f269, %f268, 0fC0A55DF6;
	fma.rn.f32 	%f272, %f270, %f268, 0f4081E0CF;
	fma.rn.f32 	%f273, %f268, %f267, 0f00000000;
	add.s32 	%r236, %r235, 1;
	fma.rn.f32 	%f305, %f303, %f302, 0fC0A55DF6;
	fma.rn.f32 	%f306, %f304, %f302, 0f4081E0CF;
	fma.rn.f32 	%f307, %f302, %f301, 0f00000000;
	add.s32 	%r247, %r246, 1;
	fma.rn.f32 	%f340, %f338, %f337, 0fC0A55DF6;
	fma.rn.f32 	%f341, %f339, %f337, 0f4081E0CF;
	fma.rn.f32 	%f342, %f337, %f336, 0f00000000;
	add.s32 	%r254, %r253, 1;
	fma.rn.f32 	%f374, %f372, %f371, 0fC0A55DF6;
	fma.rn.f32 	%f375, %f373, %f371, 0f4081E0CF;
	fma.rn.f32 	%f376, %f371, %f370, 0f00000000;
	add.s32 	%r265, %r264, 1;
	fma.rn.f32 	%f409, %f407, %f406, 0fC0A55DF6;
	fma.rn.f32 	%f410, %f408, %f406, 0f4081E0CF;
	fma.rn.f32 	%f411, %f406, %f405, 0f00000000;
	add.s32 	%r272, %r271, 1;
	fma.rn.f32 	%f443, %f441, %f440, 0fC0A55DF6;
	fma.rn.f32 	%f444, %f442, %f440, 0f4081E0CF;
	fma.rn.f32 	%f445, %f440, %f439, 0f00000000;
	cvt.rzi.s32.f32 	%r289, %f487;
	fma.rn.f32 	%f492, %f490, %f489, 0fC0A55DF6;
	fma.rn.f32 	%f493, %f491, %f489, 0f4081E0CF;
	fma.rn.f32 	%f494, %f489, %f488, 0f00000000;
	cvt.rzi.s32.f32 	%r312, %f539;
	fma.rn.f32 	%f544, %f542, %f541, 0fC0A55DF6;
	fma.rn.f32 	%f545, %f543, %f541, 0f4081E0CF;
	fma.rn.f32 	%f546, %f541, %f540, 0f00000000;
	cvt.rzi.s32.f32 	%r334, %f592;
	fma.rn.f32 	%f597, %f595, %f594, 0fC0A55DF6;
	fma.rn.f32 	%f598, %f596, %f594, 0f4081E0CF;
	fma.rn.f32 	%f599, %f594, %f593, 0f00000000;
	cvt.rzi.s32.f32 	%r365, %f643;
	fma.rn.f32 	%f648, %f646, %f645, 0fC0A55DF6;
	fma.rn.f32 	%f649, %f647, %f645, 0f4081E0CF;
	fma.rn.f32 	%f650, %f645, %f644, 0f00000000;
	mul.f32 	%f698, %f697, %f697;
	mul.f32 	%f749, %f748, %f748;
	selp.f32 	%f799, %f798, %f797, %p199;
	fma.rn.f32 	%f205, %f203, %f199, 0fC09DE9E6;
	fma.rn.f32 	%f206, %f202, %f204, 0f00000000;
	and.b32  	%r212, %r211, 1;
	fma.rn.f32 	%f239, %f237, %f233, 0fC09DE9E6;
	fma.rn.f32 	%f240, %f236, %f238, 0f00000000;
	and.b32  	%r219, %r218, 1;
	fma.rn.f32 	%f274, %f272, %f268, 0fC09DE9E6;
	fma.rn.f32 	%f275, %f271, %f273, 0f00000000;
	and.b32  	%r230, %r229, 1;
	fma.rn.f32 	%f308, %f306, %f302, 0fC09DE9E6;
	fma.rn.f32 	%f309, %f305, %f307, 0f00000000;
	and.b32  	%r237, %r236, 1;
	fma.rn.f32 	%f343, %f341, %f337, 0fC09DE9E6;
	fma.rn.f32 	%f344, %f340, %f342, 0f00000000;
	and.b32  	%r248, %r247, 1;
	fma.rn.f32 	%f377, %f375, %f371, 0fC09DE9E6;
	fma.rn.f32 	%f378, %f374, %f376, 0f00000000;
	and.b32  	%r255, %r254, 1;
	fma.rn.f32 	%f412, %f410, %f406, 0fC09DE9E6;
	fma.rn.f32 	%f413, %f409, %f411, 0f00000000;
	and.b32  	%r266, %r265, 1;
	fma.rn.f32 	%f446, %f444, %f440, 0fC09DE9E6;
	fma.rn.f32 	%f447, %f443, %f445, 0f00000000;
	and.b32  	%r273, %r272, 1;
	fma.rn.f32 	%f495, %f493, %f489, 0fC09DE9E6;
	fma.rn.f32 	%f496, %f492, %f494, 0f00000000;
	and.b32  	%r290, %r289, 1;
	fma.rn.f32 	%f547, %f545, %f541, 0fC09DE9E6;
	fma.rn.f32 	%f548, %f544, %f546, 0f00000000;
	and.b32  	%r313, %r312, 1;
	fma.rn.f32 	%f600, %f598, %f594, 0fC09DE9E6;
	fma.rn.f32 	%f601, %f597, %f599, 0f00000000;
	and.b32  	%r335, %r334, 1;
	fma.rn.f32 	%f651, %f649, %f645, 0fC09DE9E6;
	fma.rn.f32 	%f652, %f648, %f650, 0f00000000;
	and.b32  	%r366, %r365, 1;
	fma.rn.f32 	%f699, %f698, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f700, %f698, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f750, %f749, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f751, %f749, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f800, %f799, 0fBF000000, %f904;
	fma.rn.f32 	%f207, %f205, %f199, 0f3F800000;
	fma.rn.f32 	%f208, %f198, 0f40490FDB, %f206;
	setp.eq.b32 	%p16, %r212, 1;
	fma.rn.f32 	%f241, %f239, %f233, 0f3F800000;
	fma.rn.f32 	%f242, %f232, 0f40490FDB, %f240;
	setp.eq.b32 	%p22, %r219, 1;
	fma.rn.f32 	%f276, %f274, %f268, 0f3F800000;
	fma.rn.f32 	%f277, %f267, 0f40490FDB, %f275;
	setp.eq.b32 	%p28, %r230, 1;
	fma.rn.f32 	%f310, %f308, %f302, 0f3F800000;
	fma.rn.f32 	%f311, %f301, 0f40490FDB, %f309;
	setp.eq.b32 	%p34, %r237, 1;
	fma.rn.f32 	%f345, %f343, %f337, 0f3F800000;
	fma.rn.f32 	%f346, %f336, 0f40490FDB, %f344;
	setp.eq.b32 	%p40, %r248, 1;
	fma.rn.f32 	%f379, %f377, %f371, 0f3F800000;
	fma.rn.f32 	%f380, %f370, 0f40490FDB, %f378;
	setp.eq.b32 	%p46, %r255, 1;
	fma.rn.f32 	%f414, %f412, %f406, 0f3F800000;
	fma.rn.f32 	%f415, %f405, 0f40490FDB, %f413;
	setp.eq.b32 	%p52, %r266, 1;
	fma.rn.f32 	%f448, %f446, %f440, 0f3F800000;
	fma.rn.f32 	%f449, %f439, 0f40490FDB, %f447;
	setp.eq.b32 	%p58, %r273, 1;
	fma.rn.f32 	%f497, %f495, %f489, 0f3F800000;
	fma.rn.f32 	%f498, %f488, 0f40490FDB, %f496;
	setp.eq.b32 	%p76, %r290, 1;
	fma.rn.f32 	%f549, %f547, %f541, 0f3F800000;
	fma.rn.f32 	%f550, %f540, 0f40490FDB, %f548;
	setp.eq.b32 	%p96, %r313, 1;
	fma.rn.f32 	%f602, %f600, %f594, 0f3F800000;
	fma.rn.f32 	%f603, %f593, 0f40490FDB, %f601;
	setp.eq.b32 	%p117, %r335, 1;
	fma.rn.f32 	%f653, %f651, %f645, 0f3F800000;
	fma.rn.f32 	%f654, %f644, 0f40490FDB, %f652;
	setp.eq.b32 	%p137, %r366, 1;
	cvt.rzi.s32.f32 	%r381, %f696;
	fma.rn.f32 	%f701, %f699, %f698, 0fC0A55DF6;
	fma.rn.f32 	%f702, %f700, %f698, 0f4081E0CF;
	fma.rn.f32 	%f703, %f698, %f697, 0f00000000;
	cvt.rzi.s32.f32 	%r403, %f747;
	fma.rn.f32 	%f752, %f750, %f749, 0fC0A55DF6;
	fma.rn.f32 	%f753, %f751, %f749, 0f4081E0CF;
	fma.rn.f32 	%f754, %f749, %f748, 0f00000000;
	mul.f32 	%f801, %f800, %f800;
	selp.f32 	%f209, %f207, %f208, %p16;
	and.b32  	%r213, %r211, 2;
	mov.f32 	%f210, 0f00000000;
	selp.f32 	%f243, %f241, %f242, %p22;
	and.b32  	%r220, %r218, 2;
	selp.f32 	%f278, %f276, %f277, %p28;
	and.b32  	%r231, %r229, 2;
	selp.f32 	%f312, %f310, %f311, %p34;
	and.b32  	%r238, %r236, 2;
	selp.f32 	%f347, %f345, %f346, %p40;
	and.b32  	%r249, %r247, 2;
	selp.f32 	%f381, %f379, %f380, %p46;
	and.b32  	%r256, %r254, 2;
	selp.f32 	%f416, %f414, %f415, %p52;
	and.b32  	%r267, %r265, 2;
	selp.f32 	%f450, %f448, %f449, %p58;
	and.b32  	%r274, %r272, 2;
	selp.f32 	%f499, %f497, %f498, %p76;
	and.b32  	%r291, %r289, 2;
	selp.f32 	%f551, %f549, %f550, %p96;
	and.b32  	%r314, %r312, 2;
	selp.f32 	%f604, %f602, %f603, %p117;
	and.b32  	%r336, %r334, 2;
	selp.f32 	%f655, %f653, %f654, %p137;
	and.b32  	%r367, %r365, 2;
	fma.rn.f32 	%f704, %f702, %f698, 0fC09DE9E6;
	fma.rn.f32 	%f705, %f701, %f703, 0f00000000;
	and.b32  	%r382, %r381, 1;
	fma.rn.f32 	%f755, %f753, %f749, 0fC09DE9E6;
	fma.rn.f32 	%f756, %f752, %f754, 0f00000000;
	and.b32  	%r404, %r403, 1;
	fma.rn.f32 	%f802, %f801, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f803, %f801, 0f3E684E12, 0fBFAAD2E0;
	setp.eq.s32 	%p17, %r213, 0;
	sub.f32 	%f211, %f210, %f209;
	setp.eq.s32 	%p23, %r220, 0;
	sub.f32 	%f245, %f210, %f243;
	setp.eq.s32 	%p29, %r231, 0;
	sub.f32 	%f280, %f210, %f278;
	setp.eq.s32 	%p35, %r238, 0;
	sub.f32 	%f314, %f210, %f312;
	setp.eq.s32 	%p41, %r249, 0;
	sub.f32 	%f349, %f210, %f347;
	setp.eq.s32 	%p47, %r256, 0;
	sub.f32 	%f383, %f210, %f381;
	setp.eq.s32 	%p53, %r267, 0;
	sub.f32 	%f418, %f210, %f416;
	setp.eq.s32 	%p59, %r274, 0;
	sub.f32 	%f452, %f210, %f450;
	setp.eq.s32 	%p77, %r291, 0;
	neg.f32 	%f501, %f499;
	add.s32 	%r292, %r289, 1;
	cvt.rzi.f32.f32 	%f506, %f884;
	setp.eq.s32 	%p97, %r314, 0;
	neg.f32 	%f553, %f551;
	add.s32 	%r315, %r312, 1;
	cvt.rzi.f32.f32 	%f558, %f888;
	setp.eq.s32 	%p118, %r336, 0;
	neg.f32 	%f606, %f604;
	add.s32 	%r337, %r334, 1;
	cvt.rzi.f32.f32 	%f611, %f892;
	setp.eq.s32 	%p138, %r367, 0;
	neg.f32 	%f657, %f655;
	add.s32 	%r368, %r365, 1;
	cvt.rzi.f32.f32 	%f662, %f896;
	fma.rn.f32 	%f706, %f704, %f698, 0f3F800000;
	fma.rn.f32 	%f707, %f697, 0f40490FDB, %f705;
	setp.eq.b32 	%p158, %r382, 1;
	fma.rn.f32 	%f757, %f755, %f749, 0f3F800000;
	fma.rn.f32 	%f758, %f748, 0f40490FDB, %f756;
	setp.eq.b32 	%p178, %r404, 1;
	cvt.rzi.s32.f32 	%r417, %f799;
	fma.rn.f32 	%f804, %f802, %f801, 0fC0A55DF6;
	fma.rn.f32 	%f805, %f803, %f801, 0f4081E0CF;
	fma.rn.f32 	%f806, %f801, %f800, 0f00000000;
	selp.f32 	%f212, %f209, %f211, %p17;
	selp.f32 	%f246, %f243, %f245, %p23;
	selp.f32 	%f281, %f278, %f280, %p29;
	selp.f32 	%f315, %f312, %f314, %p35;
	selp.f32 	%f350, %f347, %f349, %p41;
	selp.f32 	%f384, %f381, %f383, %p47;
	selp.f32 	%f419, %f416, %f418, %p53;
	selp.f32 	%f453, %f450, %f452, %p59;
	selp.f32 	%f500, %f498, %f497, %p76;
	selp.f32 	%f502, %f499, %f501, %p77;
	and.b32  	%r293, %r292, 2;
	setp.eq.f32 	%p79, %f506, %f884;
	mul.f32 	%f507, %f884, 0f00000000;
	selp.f32 	%f552, %f550, %f549, %p96;
	selp.f32 	%f554, %f551, %f553, %p97;
	and.b32  	%r316, %r315, 2;
	setp.eq.f32 	%p99, %f558, %f888;
	mul.f32 	%f559, %f888, 0f00000000;
	selp.f32 	%f605, %f603, %f602, %p117;
	selp.f32 	%f607, %f604, %f606, %p118;
	and.b32  	%r338, %r337, 2;
	setp.eq.f32 	%p120, %f611, %f892;
	mul.f32 	%f612, %f892, 0f00000000;
	selp.f32 	%f656, %f654, %f653, %p137;
	selp.f32 	%f658, %f655, %f657, %p138;
	and.b32  	%r369, %r368, 2;
	setp.eq.f32 	%p140, %f662, %f896;
	mul.f32 	%f663, %f896, 0f00000000;
	selp.f32 	%f708, %f706, %f707, %p158;
	and.b32  	%r383, %r381, 2;
	selp.f32 	%f759, %f757, %f758, %p178;
	and.b32  	%r405, %r403, 2;
	fma.rn.f32 	%f807, %f805, %f801, 0fC09DE9E6;
	fma.rn.f32 	%f808, %f804, %f806, 0f00000000;
	and.b32  	%r418, %r417, 1;
	mul.f32 	%f154, %f212, %f212;
	mul.f32 	%f4, %f246, %f246;
	mul.f32 	%f8, %f281, %f281;
	mul.f32 	%f13, %f315, %f315;
	mul.f32 	%f17, %f350, %f350;
	mul.f32 	%f22, %f384, %f384;
	mul.f32 	%f26, %f419, %f419;
	mul.f32 	%f31, %f453, %f453;
	setp.eq.s32 	%p78, %r293, 0;
	sub.f32 	%f504, %f210, %f500;
	selp.f32 	%f52, %f507, %f502, %p79;
	abs.f32 	%f508, %f884;
	setp.eq.s32 	%p98, %r316, 0;
	sub.f32 	%f556, %f210, %f552;
	selp.f32 	%f560, %f559, %f554, %p99;
	abs.f32 	%f561, %f888;
	setp.eq.s32 	%p119, %r338, 0;
	sub.f32 	%f609, %f210, %f605;
	selp.f32 	%f86, %f612, %f607, %p120;
	abs.f32 	%f613, %f892;
	setp.eq.s32 	%p139, %r369, 0;
	sub.f32 	%f660, %f210, %f656;
	selp.f32 	%f664, %f663, %f658, %p140;
	abs.f32 	%f665, %f896;
	setp.eq.s32 	%p159, %r383, 0;
	neg.f32 	%f710, %f708;
	add.s32 	%r384, %r381, 1;
	cvt.rzi.f32.f32 	%f715, %f912;
	setp.eq.s32 	%p179, %r405, 0;
	neg.f32 	%f761, %f759;
	add.s32 	%r406, %r403, 1;
	cvt.rzi.f32.f32 	%f766, %f900;
	fma.rn.f32 	%f809, %f807, %f801, 0f3F800000;
	fma.rn.f32 	%f810, %f800, 0f40490FDB, %f808;
	setp.eq.b32 	%p200, %r418, 1;
	mul.f32 	%f216, %f154, 0f3C0AF64E;
	mul.f32 	%f250, %f4, 0f3C0AF64E;
	mul.f32 	%f285, %f8, 0f3C0AF64E;
	mul.f32 	%f319, %f13, 0f3C0AF64E;
	mul.f32 	%f354, %f17, 0f3C0AF64E;
	mul.f32 	%f388, %f22, 0f3C0AF64E;
	mul.f32 	%f423, %f26, 0f3C0AF64E;
	mul.f32 	%f456, %f31, 0f3C0AF64E;
	selp.f32 	%f505, %f500, %f504, %p78;
	setp.gt.f32 	%p80, %f508, 0f4B800000;
	add.f32 	%f509, %f52, 0f3F800000;
	selp.f32 	%f557, %f552, %f556, %p98;
	setp.gt.f32 	%p100, %f561, 0f4B800000;
	add.f32 	%f562, %f560, 0f3F800000;
	selp.f32 	%f610, %f605, %f609, %p119;
	setp.gt.f32 	%p121, %f613, 0f4B800000;
	add.f32 	%f614, %f86, 0f3F800000;
	selp.f32 	%f661, %f656, %f660, %p139;
	setp.gt.f32 	%p141, %f665, 0f4B800000;
	add.f32 	%f666, %f664, 0f3F800000;
	selp.f32 	%f709, %f707, %f706, %p158;
	selp.f32 	%f711, %f708, %f710, %p159;
	and.b32  	%r385, %r384, 2;
	setp.eq.f32 	%p161, %f715, %f912;
	mul.f32 	%f716, %f912, 0f00000000;
	selp.f32 	%f760, %f758, %f757, %p178;
	selp.f32 	%f762, %f759, %f761, %p179;
	and.b32  	%r407, %r406, 2;
	setp.eq.f32 	%p181, %f766, %f900;
	mul.f32 	%f767, %f900, 0f00000000;
	selp.f32 	%f811, %f809, %f810, %p200;
	and.b32  	%r419, %r417, 2;
	mul.f32 	%f3, %f216, %f874;
	mul.f32 	%f251, %f250, %f875;
	mul.f32 	%f12, %f285, %f876;
	mul.f32 	%f320, %f319, %f877;
	mul.f32 	%f21, %f354, %f878;
	mul.f32 	%f389, %f388, %f879;
	mul.f32 	%f30, %f423, %f880;
	mul.f32 	%f457, %f456, %f881;
	selp.f32 	%f53, %f509, %f505, %p80;
	selp.f32 	%f563, %f562, %f557, %p100;
	selp.f32 	%f87, %f614, %f610, %p121;
	selp.f32 	%f667, %f666, %f661, %p141;
	setp.eq.s32 	%p160, %r385, 0;
	sub.f32 	%f713, %f210, %f709;
	selp.f32 	%f176, %f716, %f711, %p161;
	abs.f32 	%f717, %f912;
	setp.eq.s32 	%p180, %r407, 0;
	sub.f32 	%f764, %f210, %f760;
	selp.f32 	%f768, %f767, %f762, %p181;
	abs.f32 	%f769, %f900;
	setp.eq.s32 	%p201, %r419, 0;
	neg.f32 	%f813, %f811;
	add.s32 	%r420, %r417, 1;
	cvt.rzi.f32.f32 	%f818, %f904;
	ld.param.u64 	%rd2, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	ld.param.u64 	%rd3, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	and.b32  	%r111, %r1, 16;
	mov.b32 	%r223, %f251;
	mov.b32 	%r222, %f3;
	mov.b32 	%r241, %f320;
	mov.b32 	%r240, %f12;
	mov.b32 	%r259, %f389;
	mov.b32 	%r258, %f21;
	mov.b32 	%r277, %f457;
	mov.b32 	%r276, %f30;
	mov.b32 	%r305, %f563;
	mov.b32 	%r304, %f53;
	mov.b32 	%r308, %f560;
	mov.b32 	%r307, %f52;
	mov.b32 	%r352, %f667;
	mov.b32 	%r351, %f87;
	mov.b32 	%r358, %f664;
	mov.b32 	%r357, %f86;
	selp.f32 	%f714, %f709, %f713, %p160;
	setp.gt.f32 	%p162, %f717, 0f4B800000;
	add.f32 	%f718, %f176, 0f3F800000;
	selp.f32 	%f765, %f760, %f764, %p180;
	setp.gt.f32 	%p182, %f769, 0f4B800000;
	add.f32 	%f770, %f768, 0f3F800000;
	selp.f32 	%f812, %f810, %f809, %p200;
	selp.f32 	%f814, %f811, %f813, %p201;
	and.b32  	%r421, %r420, 2;
	setp.eq.f32 	%p203, %f818, %f904;
	mul.f32 	%f819, %f904, 0f00000000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r221, %r223, %r222;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r239, %r241, %r240;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r257, %r259, %r258;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r275, %r277, %r276;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r303, %r305, %r304;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r306, %r308, %r307;
	// end inline asm
	xor.b32  	%r355, %r358, -2147483648;
	xor.b32  	%r354, %r357, -2147483648;
	selp.f32 	%f177, %f718, %f714, %p162;
	selp.f32 	%f771, %f770, %f765, %p182;
	setp.eq.s32 	%p202, %r421, 0;
	sub.f32 	%f816, %f210, %f812;
	selp.f32 	%f136, %f819, %f814, %p203;
	abs.f32 	%f820, %f904;
	// begin inline asm
	cvt.rn.f16x2.f32 %r350, %r352, %r351;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r353, %r355, %r354;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r356, %r358, %r357;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r359, %r352, %r351;
	// end inline asm
	mov.b32 	%r396, %f771;
	mov.b32 	%r395, %f177;
	mov.b32 	%r399, %f768;
	mov.b32 	%r398, %f176;
	selp.f32 	%f817, %f812, %f816, %p202;
	setp.gt.f32 	%p204, %f820, 0f4B800000;
	add.f32 	%f821, %f136, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r394, %r396, %r395;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r397, %r399, %r398;
	// end inline asm
	selp.f32 	%f137, %f821, %f817, %p204;
	add.f32 	%f842, %f908, %f908;
	mov.b32 	%r440, %f842;
	and.b32  	%r441, %r440, -2147483648;
	or.b32  	%r442, %r441, 1056964608;
	mov.b32 	%f843, %r442;
	add.f32 	%f844, %f842, %f843;
	cvt.rzi.f32.f32 	%f845, %f844;
	abs.f32 	%f846, %f842;
	setp.gt.f32 	%p217, %f846, 0f4B000000;
	selp.f32 	%f847, %f842, %f845, %p217;
	cvt.rzi.f32.f32 	%f848, %f842;
	setp.lt.f32 	%p218, %f846, 0f3F000000;
	selp.f32 	%f849, %f848, %f847, %p218;
	cvt.rzi.s32.f32 	%r443, %f849;
	fma.rn.f32 	%f850, %f849, 0fBF000000, %f908;
	mul.f32 	%f851, %f850, %f850;
	fma.rn.f32 	%f852, %f851, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f853, %f851, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f854, %f852, %f851, 0fC0A55DF6;
	fma.rn.f32 	%f855, %f853, %f851, 0f4081E0CF;
	fma.rn.f32 	%f856, %f851, %f850, 0f00000000;
	fma.rn.f32 	%f857, %f855, %f851, 0fC09DE9E6;
	fma.rn.f32 	%f858, %f854, %f856, 0f00000000;
	fma.rn.f32 	%f859, %f857, %f851, 0f3F800000;
	fma.rn.f32 	%f860, %f850, 0f40490FDB, %f858;
	and.b32  	%r444, %r443, 1;
	setp.eq.b32 	%p219, %r444, 1;
	selp.f32 	%f861, %f859, %f860, %p219;
	selp.f32 	%f862, %f860, %f859, %p219;
	and.b32  	%r445, %r443, 2;
	setp.eq.s32 	%p220, %r445, 0;
	neg.f32 	%f863, %f861;
	selp.f32 	%f864, %f861, %f863, %p220;
	add.s32 	%r446, %r443, 1;
	and.b32  	%r447, %r446, 2;
	setp.eq.s32 	%p221, %r447, 0;
	sub.f32 	%f866, %f210, %f862;
	selp.f32 	%f867, %f862, %f866, %p221;
	cvt.rzi.f32.f32 	%f868, %f908;
	setp.eq.f32 	%p222, %f868, %f908;
	mul.f32 	%f869, %f908, 0f00000000;
	selp.f32 	%f870, %f869, %f864, %p222;
	abs.f32 	%f871, %f908;
	setp.gt.f32 	%p223, %f871, 0f4B800000;
	add.f32 	%f872, %f870, 0f3F800000;
	selp.f32 	%f873, %f872, %f867, %p223;
	mov.b32 	%r430, %f873;
	mov.b32 	%r429, %f137;
	// begin inline asm
	cvt.rn.f16x2.f32 %r428, %r430, %r429;
	// end inline asm
	mov.b32 	%r436, %f870;
	xor.b32  	%r433, %r436, -2147483648;
	mov.b32 	%r435, %f136;
	xor.b32  	%r432, %r435, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r431, %r433, %r432;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r434, %r436, %r435;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r437, %r430, %r429;
	// end inline asm
	shl.b32 	%r449, %r181, 13;
	shl.b32 	%r450, %r2, 5;
	and.b32  	%r451, %r109, 28;
	and.b32  	%r452, %r450, 96;
	or.b32  	%r453, %r452, %r451;
	or.b32  	%r454, %r111, %r3;
	or.b32  	%r83, %r454, %r110;
	or.b32  	%r84, %r453, %r449;
	and.b32  	%r85, %r1, 8;
	shl.b32 	%r455, %r1, 4;
	or.b32  	%r456, %r85, %r455;
	shr.u32 	%r457, %r456, 2;
	and.b32  	%r458, %r457, 30;
	shr.u32 	%r459, %r3, 1;
	and.b32  	%r86, %r1, 4;
	and.b32  	%r460, %r4, 32;
	or.b32  	%r88, %r460, %r459;
	or.b32  	%r89, %r88, 8;
	or.b32  	%r90, %r88, 16;
	or.b32  	%r91, %r88, 24;
	or.b32  	%r461, %r113, %r110;
	or.b32  	%r462, %r461, %r108;
	or.b32  	%r463, %r462, %r112;
	shr.u32 	%r464, %r463, 1;
	mul.lo.s32 	%r465, %r464, 65;
	add.s32 	%r466, %r88, %r465;
	add.s32 	%r467, %r89, %r465;
	add.s32 	%r468, %r90, %r465;
	add.s32 	%r469, %r91, %r465;
	shl.b32 	%r470, %r3, 1;
	or.b32  	%r471, %r117, %r470;
	mul.lo.s32 	%r472, %r471, 65;
	add.s32 	%r473, %r458, %r472;
	mul.wide.u32 	%rd72, %r473, 4;
	mov.u64 	%rd73, shmem;
	add.s64 	%rd5, %rd73, %rd72;
	cvt.u64.u32 	%rd74, %r458;
	cvt.u64.u32 	%rd75, %r472;
	add.s64 	%rd76, %rd75, %rd74;
	shl.b64 	%rd77, %rd76, 2;
	add.s64 	%rd6, %rd73, %rd77;
	shl.b32 	%r474, %r183, 19;
	add.s32 	%r475, %r474, -1572864;
	or.b32  	%r476, %r106, %r119;
	shl.b32 	%r477, %r3, 9;
	shl.b32 	%r478, %r476, 7;
	or.b32  	%r479, %r478, %r477;
	or.b32  	%r92, %r453, %r479;
	cvt.s64.s32 	%rd7, %r475;
	mul.lo.s32 	%r480, %r117, 65;
	bfe.s32 	%r481, %r3, 2, 1;
	and.b32  	%r482, %r3, 4;
	setp.eq.s32 	%p225, %r482, 0;
	and.b32  	%r483, %r481, 260;
	and.b32  	%r484, %r3, 1;
	neg.s32 	%r485, %r484;
	setp.eq.b32 	%p226, %r484, 1;
	and.b32  	%r486, %r485, 1040;
	bfe.s32 	%r487, %r3, 1, 1;
	and.b32  	%r488, %r3, 2;
	setp.eq.s32 	%p227, %r488, 0;
	and.b32  	%r489, %r487, 520;
	shr.u32 	%r490, %r3, 3;
	mul.lo.s32 	%r491, %r490, 130;
	add.s32 	%r492, %r486, %r458;
	add.s32 	%r493, %r492, %r480;
	add.s32 	%r494, %r493, %r483;
	add.s32 	%r495, %r494, %r489;
	add.s32 	%r496, %r495, %r491;
	mul.wide.u32 	%rd78, %r496, 4;
	add.s64 	%rd8, %rd73, %rd78;
	cvt.u64.u32 	%rd79, %r491;
	selp.b64 	%rd80, 0, 520, %p227;
	selp.b64 	%rd81, 0, 260, %p225;
	cvt.u64.u32 	%rd82, %r480;
	selp.b64 	%rd83, 1040, 0, %p226;
	add.s64 	%rd84, %rd74, %rd83;
	add.s64 	%rd85, %rd84, %rd82;
	add.s64 	%rd86, %rd85, %rd81;
	add.s64 	%rd87, %rd86, %rd80;
	add.s64 	%rd88, %rd87, %rd79;
	shl.b64 	%rd89, %rd88, 2;
	add.s64 	%rd9, %rd73, %rd89;
	cvt.u64.u32 	%rd90, %r494;
	add.s64 	%rd91, %rd90, %rd80;
	add.s64 	%rd92, %rd91, %rd79;
	shl.b64 	%rd93, %rd92, 2;
	add.s64 	%rd10, %rd73, %rd93;
	add.s32 	%r497, %r496, 2113;
	mul.wide.u32 	%rd94, %r497, 4;
	add.s64 	%rd11, %rd73, %rd94;
	add.s32 	%r498, %r496, 2082;
	mul.wide.u32 	%rd95, %r498, 4;
	add.s64 	%rd12, %rd73, %rd95;
	add.s32 	%r499, %r496, 2114;
	mul.wide.u32 	%rd96, %r499, 4;
	add.s64 	%rd13, %rd73, %rd96;
	add.s32 	%r500, %r496, 4194;
	mul.wide.u32 	%rd97, %r500, 4;
	add.s64 	%rd14, %rd73, %rd97;
	add.s32 	%r501, %r496, 4163;
	mul.wide.u32 	%rd98, %r501, 4;
	add.s64 	%rd15, %rd73, %rd98;
	add.s32 	%r502, %r496, 4195;
	mul.wide.u32 	%rd99, %r502, 4;
	add.s64 	%rd16, %rd73, %rd99;
	add.s32 	%r503, %r496, 6275;
	mul.wide.u32 	%rd100, %r503, 4;
	add.s64 	%rd17, %rd73, %rd100;
	add.s32 	%r504, %r496, 6244;
	mul.wide.u32 	%rd101, %r504, 4;
	add.s64 	%rd18, %rd73, %rd101;
	add.s32 	%r505, %r496, 6276;
	mul.wide.u32 	%rd102, %r505, 4;
	add.s64 	%rd19, %rd73, %rd102;
	mul.wide.u32 	%rd103, %r469, 4;
	add.s64 	%rd20, %rd73, %rd103;
	mul.wide.u32 	%rd104, %r468, 4;
	add.s64 	%rd21, %rd73, %rd104;
	mul.wide.u32 	%rd105, %r467, 4;
	add.s64 	%rd22, %rd73, %rd105;
	mul.wide.u32 	%rd106, %r466, 4;
	add.s64 	%rd23, %rd73, %rd106;
	setp.eq.s32 	%p228, %r85, 0;
	mov.u16 	%rs1176, 25600;
	mov.u16 	%rs1072, 21504;
	mov.u16 	%rs1184, 18432;
	mov.u16 	%rs1142, -14592;
	mov.u32 	%r8033, %r7989;
	mov.u32 	%r8032, %r7989;
	mov.u32 	%r8031, %r7989;
	mov.u32 	%r8030, %r7989;
	mov.u32 	%r8029, %r7989;
	mov.u32 	%r8028, %r7989;
	mov.u32 	%r8027, %r7989;
	mov.u32 	%r8026, %r7989;
	mov.u32 	%r8025, %r7989;
	mov.u32 	%r8024, %r7989;
	mov.u32 	%r8023, %r7989;
	mov.u32 	%r8022, %r7989;
	mov.u32 	%r105, %r7989;
	bra.uni 	$L__BB0_129;
$L__BB0_152:                            // %pass16878
                                        //   in Loop: Header=BB0_129 Depth=1
	or.b32  	%r7985, %r7991, 1572864;
	cvt.s64.s32 	%rd160, %r7985;
	add.s64 	%rd161, %rd160, %rd7;
	shr.u64 	%rd162, %rd161, 35;
	add.s64 	%rd163, %rd161, %rd162;
	shr.s64 	%rd164, %rd163, 29;
	setp.lt.s64 	%p256, %rd161, 0;
	and.b64  	%rd165, %rd163, -536870912;
	setp.ne.s64 	%p257, %rd165, %rd161;
	and.pred  	%p258, %p256, %p257;
	selp.u64 	%rd166, 1, 0, %p258;
	sub.s64 	%rd167, %rd166, %rd164;
	shl.b64 	%rd168, %rd167, 29;
	add.s64 	%rd169, %rd168, %rd161;
	shl.b64 	%rd170, %rd169, 2;
	add.s64 	%rd171, %rd3, %rd170;
	st.global.v4.u32 	[%rd171], {%r175, %r177, %r176, %r178};
	setp.ne.s32 	%p259, %r105, 65280;
	add.s32 	%r105, %r105, 256;
	add.s32 	%r7986, %r105, %r181;
	setp.lt.s32 	%p260, %r7986, %r182;
	and.pred  	%p261, %p259, %p260;
	@%p261 bra 	$L__BB0_129;
	bra.uni 	$L__BB0_153;
$L__BB0_129:                            // %L1473
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_130 Depth 2
	and.b32  	%r571, %r105, 65280;
	or.b32  	%r572, %r83, %r571;
	shl.b32 	%r573, %r572, 13;
	add.s32 	%r574, %r84, %r573;
	shr.s32 	%r575, %r574, 31;
	shr.u32 	%r576, %r575, 3;
	add.s32 	%r577, %r574, %r576;
	shr.s32 	%r578, %r577, 29;
	setp.lt.s32 	%p229, %r574, 0;
	and.b32  	%r579, %r577, -536870912;
	setp.ne.s32 	%p230, %r579, %r574;
	and.pred  	%p231, %p229, %p230;
	selp.u32 	%r580, 1, 0, %p231;
	sub.s32 	%r581, %r580, %r578;
	shl.b32 	%r582, %r581, 29;
	add.s32 	%r583, %r582, %r574;
	mul.wide.s32 	%rd107, %r583, 4;
	add.s64 	%rd108, %rd2, %rd107;
	ld.global.v4.u32 	{%r584, %r585, %r586, %r587}, [%rd108];
	or.b32  	%r588, %r573, 524288;
	add.s32 	%r589, %r84, %r588;
	shr.s32 	%r590, %r589, 31;
	shr.u32 	%r591, %r590, 3;
	add.s32 	%r592, %r589, %r591;
	shr.s32 	%r593, %r592, 29;
	setp.lt.s32 	%p232, %r589, 0;
	and.b32  	%r594, %r592, -536870912;
	setp.ne.s32 	%p233, %r594, %r589;
	and.pred  	%p234, %p232, %p233;
	selp.u32 	%r595, 1, 0, %p234;
	sub.s32 	%r596, %r595, %r593;
	shl.b32 	%r597, %r596, 29;
	add.s32 	%r598, %r597, %r589;
	mul.wide.s32 	%rd109, %r598, 4;
	add.s64 	%rd110, %rd2, %rd109;
	ld.global.v4.u32 	{%r599, %r600, %r601, %r602}, [%rd110];
	or.b32  	%r603, %r573, 1048576;
	add.s32 	%r604, %r84, %r603;
	shr.s32 	%r605, %r604, 31;
	shr.u32 	%r606, %r605, 3;
	add.s32 	%r607, %r604, %r606;
	shr.s32 	%r608, %r607, 29;
	setp.lt.s32 	%p235, %r604, 0;
	and.b32  	%r609, %r607, -536870912;
	setp.ne.s32 	%p236, %r609, %r604;
	and.pred  	%p237, %p235, %p236;
	selp.u32 	%r610, 1, 0, %p237;
	sub.s32 	%r611, %r610, %r608;
	shl.b32 	%r612, %r611, 29;
	add.s32 	%r613, %r612, %r604;
	mul.wide.s32 	%rd111, %r613, 4;
	add.s64 	%rd112, %rd2, %rd111;
	ld.global.v4.u32 	{%r614, %r615, %r616, %r617}, [%rd112];
	or.b32  	%r618, %r573, 1572864;
	add.s32 	%r619, %r84, %r618;
	shr.s32 	%r620, %r619, 31;
	shr.u32 	%r621, %r620, 3;
	add.s32 	%r622, %r619, %r621;
	shr.s32 	%r623, %r622, 29;
	setp.lt.s32 	%p238, %r619, 0;
	and.b32  	%r624, %r622, -536870912;
	setp.ne.s32 	%p239, %r624, %r619;
	and.pred  	%p240, %p238, %p239;
	selp.u32 	%r625, 1, 0, %p240;
	sub.s32 	%r626, %r625, %r623;
	shl.b32 	%r627, %r626, 29;
	add.s32 	%r628, %r627, %r619;
	mul.wide.s32 	%rd113, %r628, 4;
	add.s64 	%rd114, %rd2, %rd113;
	ld.global.v4.u32 	{%r629, %r630, %r631, %r632}, [%rd114];
	selp.b32 	%r633, %r586, %r584, %p228;
	shfl.sync.bfly.b32	%r634, %r633, 8, 31, -1;
	selp.b32 	%r507, %r584, %r634, %p228;
	selp.b32 	%r508, %r634, %r586, %p228;
	selp.b32 	%r635, %r587, %r585, %p228;
	shfl.sync.bfly.b32	%r636, %r635, 8, 31, -1;
	selp.b32 	%r515, %r585, %r636, %p228;
	selp.b32 	%r516, %r636, %r587, %p228;
	selp.b32 	%r637, %r601, %r599, %p228;
	shfl.sync.bfly.b32	%r638, %r637, 8, 31, -1;
	selp.b32 	%r523, %r599, %r638, %p228;
	selp.b32 	%r524, %r638, %r601, %p228;
	selp.b32 	%r639, %r602, %r600, %p228;
	shfl.sync.bfly.b32	%r640, %r639, 8, 31, -1;
	selp.b32 	%r531, %r600, %r640, %p228;
	selp.b32 	%r532, %r640, %r602, %p228;
	selp.b32 	%r641, %r616, %r614, %p228;
	shfl.sync.bfly.b32	%r642, %r641, 8, 31, -1;
	selp.b32 	%r539, %r614, %r642, %p228;
	selp.b32 	%r540, %r642, %r616, %p228;
	selp.b32 	%r643, %r617, %r615, %p228;
	shfl.sync.bfly.b32	%r644, %r643, 8, 31, -1;
	selp.b32 	%r547, %r615, %r644, %p228;
	selp.b32 	%r548, %r644, %r617, %p228;
	selp.b32 	%r645, %r631, %r629, %p228;
	shfl.sync.bfly.b32	%r646, %r645, 8, 31, -1;
	selp.b32 	%r555, %r629, %r646, %p228;
	selp.b32 	%r556, %r646, %r631, %p228;
	selp.b32 	%r647, %r632, %r630, %p228;
	shfl.sync.bfly.b32	%r648, %r647, 8, 31, -1;
	selp.b32 	%r563, %r630, %r648, %p228;
	selp.b32 	%r564, %r648, %r632, %p228;
	mov.u32 	%r565, 21520;
	// begin inline asm
	prmt.b32 %r506, %r507, %r508, %r565;
	// end inline asm
	mov.u32 	%r569, 30258;
	// begin inline asm
	prmt.b32 %r510, %r507, %r508, %r569;
	// end inline asm
	// begin inline asm
	prmt.b32 %r514, %r515, %r516, %r565;
	// end inline asm
	// begin inline asm
	prmt.b32 %r518, %r515, %r516, %r569;
	// end inline asm
	// begin inline asm
	prmt.b32 %r522, %r523, %r524, %r565;
	// end inline asm
	// begin inline asm
	prmt.b32 %r526, %r523, %r524, %r569;
	// end inline asm
	// begin inline asm
	prmt.b32 %r530, %r531, %r532, %r565;
	// end inline asm
	// begin inline asm
	prmt.b32 %r534, %r531, %r532, %r569;
	// end inline asm
	// begin inline asm
	prmt.b32 %r538, %r539, %r540, %r565;
	// end inline asm
	// begin inline asm
	prmt.b32 %r542, %r539, %r540, %r569;
	// end inline asm
	// begin inline asm
	prmt.b32 %r546, %r547, %r548, %r565;
	// end inline asm
	// begin inline asm
	prmt.b32 %r550, %r547, %r548, %r569;
	// end inline asm
	// begin inline asm
	prmt.b32 %r554, %r555, %r556, %r565;
	// end inline asm
	// begin inline asm
	prmt.b32 %r558, %r555, %r556, %r569;
	// end inline asm
	// begin inline asm
	prmt.b32 %r562, %r563, %r564, %r565;
	// end inline asm
	// begin inline asm
	prmt.b32 %r566, %r563, %r564, %r569;
	// end inline asm
	st.shared.u32 	[%rd8], %r506;
	st.shared.u32 	[%rd9+128], %r510;
	st.shared.u32 	[%rd9+4], %r514;
	st.shared.u32 	[%rd9+132], %r518;
	st.shared.u32 	[%rd10+8324], %r522;
	st.shared.u32 	[%rd11], %r526;
	st.shared.u32 	[%rd12], %r530;
	st.shared.u32 	[%rd13], %r534;
	st.shared.u32 	[%rd10+16648], %r538;
	st.shared.u32 	[%rd14], %r542;
	st.shared.u32 	[%rd15], %r546;
	st.shared.u32 	[%rd16], %r550;
	st.shared.u32 	[%rd10+24972], %r554;
	st.shared.u32 	[%rd17], %r558;
	st.shared.u32 	[%rd18], %r562;
	st.shared.u32 	[%rd19], %r566;
	bar.sync 	0;
	mov.u64 	%rd174, %rd23;
	mov.u64 	%rd175, %rd22;
	mov.u64 	%rd176, %rd21;
	mov.u64 	%rd177, %rd20;
	mov.u32 	%r8021, %r7989;
$L__BB0_130:                            // %pass5557
                                        //   Parent Loop BB0_129 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	or.b32  	%r7833, %r8021, %r86;
	or.b32  	%r7834, %r7833, %r203;
	or.b32  	%r7835, %r7834, %r119;
	add.s32 	%r7836, %r7835, %r105;
	bfe.s32 	%r7837, %r7836, 4, 1;
	and.b32  	%r7838, %r7837, 65;
	bfe.s32 	%r7839, %r7836, 2, 1;
	and.b32  	%r7840, %r7839, 260;
	bfe.u32 	%r7841, %r7836, 6, 2;
	mul.lo.s32 	%r7842, %r7841, 2081;
	and.b32  	%r7843, %r7836, 1;
	neg.s32 	%r7844, %r7843;
	and.b32  	%r7845, %r7844, 1040;
	bfe.s32 	%r7846, %r7836, 1, 1;
	and.b32  	%r7847, %r7846, 520;
	bfe.s32 	%r7848, %r7836, 3, 1;
	and.b32  	%r7849, %r7848, 130;
	or.b32  	%r7850, %r88, %r7845;
	add.s32 	%r7851, %r7850, %r7838;
	add.s32 	%r7852, %r7851, %r7840;
	add.s32 	%r7853, %r7852, %r7842;
	add.s32 	%r7854, %r7853, %r7847;
	add.s32 	%r7855, %r7854, %r7849;
	mul.wide.u32 	%rd115, %r7855, 4;
	add.s64 	%rd117, %rd73, %rd115;
	ld.shared.u32 	%r7856, [%rd117];
	or.b32  	%r7857, %r89, %r7845;
	add.s32 	%r7858, %r7857, %r7838;
	add.s32 	%r7859, %r7858, %r7840;
	add.s32 	%r7860, %r7859, %r7842;
	add.s32 	%r7861, %r7860, %r7847;
	add.s32 	%r7862, %r7861, %r7849;
	mul.wide.u32 	%rd118, %r7862, 4;
	add.s64 	%rd119, %rd73, %rd118;
	ld.shared.u32 	%r7863, [%rd119];
	add.s32 	%r7864, %r90, %r7845;
	add.s32 	%r7865, %r7864, %r7838;
	add.s32 	%r7866, %r7865, %r7840;
	add.s32 	%r7867, %r7866, %r7842;
	add.s32 	%r7868, %r7867, %r7847;
	add.s32 	%r7869, %r7868, %r7849;
	mul.wide.u32 	%rd120, %r7869, 4;
	add.s64 	%rd121, %rd73, %rd120;
	ld.shared.u32 	%r7870, [%rd121];
	add.s32 	%r7871, %r91, %r7845;
	add.s32 	%r7872, %r7871, %r7838;
	add.s32 	%r7873, %r7872, %r7840;
	add.s32 	%r7874, %r7873, %r7842;
	add.s32 	%r7875, %r7874, %r7847;
	add.s32 	%r7876, %r7875, %r7849;
	mul.wide.u32 	%rd122, %r7876, 4;
	add.s64 	%rd123, %rd73, %rd122;
	ld.shared.u32 	%r7877, [%rd123];
	// begin inline asm
	mov.b32 %r654, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r665, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r653, %r7856, -2004318072;
	mov.u32 	%r652, 983055;
	// begin inline asm
	lop3.b32 %r651, %r652, %r653, %r654, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r655, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r656, %r654, %r655;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r659, %r651, %r656;
	// end inline asm
	mov.u32 	%r663, 15728880;
	// begin inline asm
	lop3.b32 %r662, %r663, %r653, %r665, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r666, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r667, %r665, %r666;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r670, %r662, %r667;
	// end inline asm
	shr.u32 	%r675, %r653, 8;
	// begin inline asm
	lop3.b32 %r673, %r652, %r675, %r654, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r677, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r678, %r654, %r677;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r681, %r673, %r678;
	// end inline asm
	// begin inline asm
	lop3.b32 %r684, %r663, %r675, %r665, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r688, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r689, %r665, %r688;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r692, %r684, %r689;
	// end inline asm
	// begin inline asm
	mov.b32 %r700, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r711, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r699, %r7863, -2004318072;
	// begin inline asm
	lop3.b32 %r697, %r652, %r699, %r700, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r701, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r702, %r700, %r701;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r705, %r697, %r702;
	// end inline asm
	// begin inline asm
	lop3.b32 %r708, %r663, %r699, %r711, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r712, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r713, %r711, %r712;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r716, %r708, %r713;
	// end inline asm
	shr.u32 	%r721, %r699, 8;
	// begin inline asm
	lop3.b32 %r719, %r652, %r721, %r700, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r723, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r724, %r700, %r723;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r727, %r719, %r724;
	// end inline asm
	// begin inline asm
	lop3.b32 %r730, %r663, %r721, %r711, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r734, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r735, %r711, %r734;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r738, %r730, %r735;
	// end inline asm
	// begin inline asm
	mov.b32 %r746, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r757, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r745, %r7870, -2004318072;
	// begin inline asm
	lop3.b32 %r743, %r652, %r745, %r746, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r747, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r748, %r746, %r747;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r751, %r743, %r748;
	// end inline asm
	// begin inline asm
	lop3.b32 %r754, %r663, %r745, %r757, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r758, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r759, %r757, %r758;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r762, %r754, %r759;
	// end inline asm
	shr.u32 	%r767, %r745, 8;
	// begin inline asm
	lop3.b32 %r765, %r652, %r767, %r746, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r769, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r770, %r746, %r769;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r773, %r765, %r770;
	// end inline asm
	// begin inline asm
	lop3.b32 %r776, %r663, %r767, %r757, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r780, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r781, %r757, %r780;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r784, %r776, %r781;
	// end inline asm
	// begin inline asm
	mov.b32 %r792, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r803, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r791, %r7877, -2004318072;
	// begin inline asm
	lop3.b32 %r789, %r652, %r791, %r792, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r793, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r794, %r792, %r793;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r797, %r789, %r794;
	// end inline asm
	// begin inline asm
	lop3.b32 %r800, %r663, %r791, %r803, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r804, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r805, %r803, %r804;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r808, %r800, %r805;
	// end inline asm
	shr.u32 	%r813, %r791, 8;
	// begin inline asm
	lop3.b32 %r811, %r652, %r813, %r792, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r815, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r816, %r792, %r815;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r819, %r811, %r816;
	// end inline asm
	// begin inline asm
	lop3.b32 %r822, %r663, %r813, %r803, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r826, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r827, %r803, %r826;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r830, %r822, %r827;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r833, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r835, %r833, %r659;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r838, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r840, %r838, %r670;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r843, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r845, %r843, %r681;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r848, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r850, %r848, %r692;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r853, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r855, %r853, %r705;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r858, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r860, %r858, %r716;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r863, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r865, %r863, %r727;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r868, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r870, %r868, %r738;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r873, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r875, %r873, %r751;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r878, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r880, %r878, %r762;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r883, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r885, %r883, %r773;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r888, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r890, %r888, %r784;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r893, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r895, %r893, %r797;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r898, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r900, %r898, %r808;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r903, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r905, %r903, %r819;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r908, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r910, %r908, %r830;
	// end inline asm
	// begin inline asm
	mov.b32 %r918, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r929, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r917, %r8033, -2004318072;
	// begin inline asm
	lop3.b32 %r915, %r652, %r917, %r918, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r919, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r920, %r918, %r919;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r923, %r915, %r920;
	// end inline asm
	// begin inline asm
	lop3.b32 %r926, %r663, %r917, %r929, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r930, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r931, %r929, %r930;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r934, %r926, %r931;
	// end inline asm
	shr.u32 	%r939, %r917, 8;
	// begin inline asm
	lop3.b32 %r937, %r652, %r939, %r918, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r941, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r942, %r918, %r941;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r945, %r937, %r942;
	// end inline asm
	// begin inline asm
	lop3.b32 %r948, %r663, %r939, %r929, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r952, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r953, %r929, %r952;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r956, %r948, %r953;
	// end inline asm
	// begin inline asm
	mov.b32 %r964, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r975, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r963, %r8032, -2004318072;
	// begin inline asm
	lop3.b32 %r961, %r652, %r963, %r964, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r965, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r966, %r964, %r965;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r969, %r961, %r966;
	// end inline asm
	// begin inline asm
	lop3.b32 %r972, %r663, %r963, %r975, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r976, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r977, %r975, %r976;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r980, %r972, %r977;
	// end inline asm
	shr.u32 	%r985, %r963, 8;
	// begin inline asm
	lop3.b32 %r983, %r652, %r985, %r964, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r987, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r988, %r964, %r987;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r991, %r983, %r988;
	// end inline asm
	// begin inline asm
	lop3.b32 %r994, %r663, %r985, %r975, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r998, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r999, %r975, %r998;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1002, %r994, %r999;
	// end inline asm
	// begin inline asm
	mov.b32 %r1010, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1021, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1009, %r8031, -2004318072;
	// begin inline asm
	lop3.b32 %r1007, %r652, %r1009, %r1010, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1011, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1012, %r1010, %r1011;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1015, %r1007, %r1012;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1018, %r663, %r1009, %r1021, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1022, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1023, %r1021, %r1022;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1026, %r1018, %r1023;
	// end inline asm
	shr.u32 	%r1031, %r1009, 8;
	// begin inline asm
	lop3.b32 %r1029, %r652, %r1031, %r1010, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1033, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1034, %r1010, %r1033;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1037, %r1029, %r1034;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1040, %r663, %r1031, %r1021, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1044, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1045, %r1021, %r1044;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1048, %r1040, %r1045;
	// end inline asm
	// begin inline asm
	mov.b32 %r1056, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1067, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1055, %r8030, -2004318072;
	// begin inline asm
	lop3.b32 %r1053, %r652, %r1055, %r1056, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1057, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1058, %r1056, %r1057;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1061, %r1053, %r1058;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1064, %r663, %r1055, %r1067, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1068, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1069, %r1067, %r1068;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1072, %r1064, %r1069;
	// end inline asm
	shr.u32 	%r1077, %r1055, 8;
	// begin inline asm
	lop3.b32 %r1075, %r652, %r1077, %r1056, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1079, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1080, %r1056, %r1079;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1083, %r1075, %r1080;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1086, %r663, %r1077, %r1067, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1090, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1091, %r1067, %r1090;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1094, %r1086, %r1091;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1097, %r221, %r923, %r835;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1101, %r221, %r934, %r840;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1105, %r221, %r945, %r845;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1109, %r221, %r956, %r850;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1113, %r221, %r969, %r855;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1117, %r221, %r980, %r860;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1121, %r221, %r991, %r865;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1125, %r221, %r1002, %r870;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1129, %r221, %r1015, %r875;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1133, %r221, %r1026, %r880;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1137, %r221, %r1037, %r885;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1141, %r221, %r1048, %r890;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1145, %r221, %r1061, %r895;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1149, %r221, %r1072, %r900;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1153, %r221, %r1083, %r905;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1157, %r221, %r1094, %r910;
	// end inline asm
	// begin inline asm
	mov.b32 %r1166, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1177, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1165, %r8029, -2004318072;
	// begin inline asm
	lop3.b32 %r1163, %r652, %r1165, %r1166, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1167, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1168, %r1166, %r1167;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1171, %r1163, %r1168;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1174, %r663, %r1165, %r1177, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1178, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1179, %r1177, %r1178;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1182, %r1174, %r1179;
	// end inline asm
	shr.u32 	%r1187, %r1165, 8;
	// begin inline asm
	lop3.b32 %r1185, %r652, %r1187, %r1166, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1189, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1190, %r1166, %r1189;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1193, %r1185, %r1190;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1196, %r663, %r1187, %r1177, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1200, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1201, %r1177, %r1200;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1204, %r1196, %r1201;
	// end inline asm
	// begin inline asm
	mov.b32 %r1212, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1223, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1211, %r8028, -2004318072;
	// begin inline asm
	lop3.b32 %r1209, %r652, %r1211, %r1212, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1213, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1214, %r1212, %r1213;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1217, %r1209, %r1214;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1220, %r663, %r1211, %r1223, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1224, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1225, %r1223, %r1224;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1228, %r1220, %r1225;
	// end inline asm
	shr.u32 	%r1233, %r1211, 8;
	// begin inline asm
	lop3.b32 %r1231, %r652, %r1233, %r1212, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1235, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1236, %r1212, %r1235;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1239, %r1231, %r1236;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1242, %r663, %r1233, %r1223, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1246, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1247, %r1223, %r1246;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1250, %r1242, %r1247;
	// end inline asm
	// begin inline asm
	mov.b32 %r1258, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1269, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1257, %r8027, -2004318072;
	// begin inline asm
	lop3.b32 %r1255, %r652, %r1257, %r1258, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1259, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1260, %r1258, %r1259;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1263, %r1255, %r1260;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1266, %r663, %r1257, %r1269, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1270, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1271, %r1269, %r1270;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1274, %r1266, %r1271;
	// end inline asm
	shr.u32 	%r1279, %r1257, 8;
	// begin inline asm
	lop3.b32 %r1277, %r652, %r1279, %r1258, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1281, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1282, %r1258, %r1281;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1285, %r1277, %r1282;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1288, %r663, %r1279, %r1269, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1292, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1293, %r1269, %r1292;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1296, %r1288, %r1293;
	// end inline asm
	// begin inline asm
	mov.b32 %r1304, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1315, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1303, %r8026, -2004318072;
	// begin inline asm
	lop3.b32 %r1301, %r652, %r1303, %r1304, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1305, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1306, %r1304, %r1305;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1309, %r1301, %r1306;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1312, %r663, %r1303, %r1315, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1316, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1317, %r1315, %r1316;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1320, %r1312, %r1317;
	// end inline asm
	shr.u32 	%r1325, %r1303, 8;
	// begin inline asm
	lop3.b32 %r1323, %r652, %r1325, %r1304, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1327, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1328, %r1304, %r1327;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1331, %r1323, %r1328;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1334, %r663, %r1325, %r1315, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1338, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1339, %r1315, %r1338;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1342, %r1334, %r1339;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1345, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1347, %r1345, %r1171, %r1097;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1351, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1353, %r1351, %r1182, %r1101;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1357, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1359, %r1357, %r1193, %r1105;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1363, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1365, %r1363, %r1204, %r1109;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1369, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1371, %r1369, %r1217, %r1113;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1375, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1377, %r1375, %r1228, %r1117;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1381, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1383, %r1381, %r1239, %r1121;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1387, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1389, %r1387, %r1250, %r1125;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1393, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1395, %r1393, %r1263, %r1129;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1399, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1401, %r1399, %r1274, %r1133;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1405, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1407, %r1405, %r1285, %r1137;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1411, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1413, %r1411, %r1296, %r1141;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1417, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1419, %r1417, %r1309, %r1145;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1423, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1425, %r1423, %r1320, %r1149;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1429, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1431, %r1429, %r1331, %r1153;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1435, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1437, %r1435, %r1342, %r1157;
	// end inline asm
	// begin inline asm
	mov.b32 %r1446, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1457, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1445, %r8025, -2004318072;
	// begin inline asm
	lop3.b32 %r1443, %r652, %r1445, %r1446, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1447, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1448, %r1446, %r1447;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1451, %r1443, %r1448;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1454, %r663, %r1445, %r1457, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1458, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1459, %r1457, %r1458;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1462, %r1454, %r1459;
	// end inline asm
	shr.u32 	%r1467, %r1445, 8;
	// begin inline asm
	lop3.b32 %r1465, %r652, %r1467, %r1446, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1469, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1470, %r1446, %r1469;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1473, %r1465, %r1470;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1476, %r663, %r1467, %r1457, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1480, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1481, %r1457, %r1480;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1484, %r1476, %r1481;
	// end inline asm
	// begin inline asm
	mov.b32 %r1492, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1503, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1491, %r8024, -2004318072;
	// begin inline asm
	lop3.b32 %r1489, %r652, %r1491, %r1492, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1493, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1494, %r1492, %r1493;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1497, %r1489, %r1494;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1500, %r663, %r1491, %r1503, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1504, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1505, %r1503, %r1504;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1508, %r1500, %r1505;
	// end inline asm
	shr.u32 	%r1513, %r1491, 8;
	// begin inline asm
	lop3.b32 %r1511, %r652, %r1513, %r1492, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1515, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1516, %r1492, %r1515;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1519, %r1511, %r1516;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1522, %r663, %r1513, %r1503, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1526, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1527, %r1503, %r1526;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1530, %r1522, %r1527;
	// end inline asm
	// begin inline asm
	mov.b32 %r1538, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1549, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1537, %r8023, -2004318072;
	// begin inline asm
	lop3.b32 %r1535, %r652, %r1537, %r1538, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1539, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1540, %r1538, %r1539;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1543, %r1535, %r1540;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1546, %r663, %r1537, %r1549, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1550, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1551, %r1549, %r1550;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1554, %r1546, %r1551;
	// end inline asm
	shr.u32 	%r1559, %r1537, 8;
	// begin inline asm
	lop3.b32 %r1557, %r652, %r1559, %r1538, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1561, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1562, %r1538, %r1561;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1565, %r1557, %r1562;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1568, %r663, %r1559, %r1549, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1572, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1573, %r1549, %r1572;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1576, %r1568, %r1573;
	// end inline asm
	// begin inline asm
	mov.b32 %r1584, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1595, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1583, %r8022, -2004318072;
	// begin inline asm
	lop3.b32 %r1581, %r652, %r1583, %r1584, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1585, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1586, %r1584, %r1585;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1589, %r1581, %r1586;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1592, %r663, %r1583, %r1595, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1596, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1597, %r1595, %r1596;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1600, %r1592, %r1597;
	// end inline asm
	shr.u32 	%r1605, %r1583, 8;
	// begin inline asm
	lop3.b32 %r1603, %r652, %r1605, %r1584, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1607, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1608, %r1584, %r1607;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1611, %r1603, %r1608;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1614, %r663, %r1605, %r1595, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1618, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1619, %r1595, %r1618;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1622, %r1614, %r1619;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1696, %r257, %r1451, %r1347;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1693, %r257, %r1462, %r1353;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1705, %r257, %r1473, %r1359;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1702, %r257, %r1484, %r1365;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1714, %r257, %r1497, %r1371;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1711, %r257, %r1508, %r1377;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1723, %r257, %r1519, %r1383;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1720, %r257, %r1530, %r1389;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1732, %r257, %r1543, %r1395;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1729, %r257, %r1554, %r1401;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1741, %r257, %r1565, %r1407;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1738, %r257, %r1576, %r1413;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1750, %r257, %r1589, %r1419;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1747, %r257, %r1600, %r1425;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1759, %r257, %r1611, %r1431;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1756, %r257, %r1622, %r1437;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1689, %r306;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1691, %r1689, %r1693;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1694, %r303, %r1696, %r1691;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1698, %r306;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1700, %r1698, %r1702;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1703, %r303, %r1705, %r1700;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1707, %r306;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1709, %r1707, %r1711;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1712, %r303, %r1714, %r1709;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1716, %r306;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1718, %r1716, %r1720;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1721, %r303, %r1723, %r1718;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1725, %r306;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1727, %r1725, %r1729;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1730, %r303, %r1732, %r1727;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1734, %r306;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1736, %r1734, %r1738;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1739, %r303, %r1741, %r1736;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1743, %r306;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1745, %r1743, %r1747;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1748, %r303, %r1750, %r1745;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1752, %r306;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1754, %r1752, %r1756;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1757, %r303, %r1759, %r1754;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1761, %r306, %r1696;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1764, %r303, %r1693, %r1761;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1768, %r306, %r1705;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1771, %r303, %r1702, %r1768;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1775, %r306, %r1714;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1778, %r303, %r1711, %r1775;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1782, %r306, %r1723;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1785, %r303, %r1720, %r1782;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1789, %r306, %r1732;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1792, %r303, %r1729, %r1789;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1796, %r306, %r1741;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1799, %r303, %r1738, %r1796;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1803, %r306, %r1750;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1806, %r303, %r1747, %r1803;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1810, %r306, %r1759;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1813, %r303, %r1756, %r1810;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1904, %r1901}, {%r350, %r356, %r353, %r359}, {%r1694, %r1764}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1913, %r1910}, {%r350, %r356, %r353, %r359}, {%r1703, %r1771}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1922, %r1919}, {%r350, %r356, %r353, %r359}, {%r1712, %r1778}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1931, %r1928}, {%r350, %r356, %r353, %r359}, {%r1721, %r1785}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1940, %r1937}, {%r350, %r356, %r353, %r359}, {%r1730, %r1792}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1949, %r1946}, {%r350, %r356, %r353, %r359}, {%r1739, %r1799}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1958, %r1955}, {%r350, %r356, %r353, %r359}, {%r1748, %r1806}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1967, %r1964}, {%r350, %r356, %r353, %r359}, {%r1757, %r1813}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1897, %r397;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1899, %r1897, %r1901;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1902, %r394, %r1904, %r1899;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1906, %r397;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1908, %r1906, %r1910;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1911, %r394, %r1913, %r1908;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1915, %r397;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1917, %r1915, %r1919;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1920, %r394, %r1922, %r1917;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1924, %r397;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1926, %r1924, %r1928;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1929, %r394, %r1931, %r1926;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1933, %r397;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1935, %r1933, %r1937;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1938, %r394, %r1940, %r1935;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1942, %r397;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1944, %r1942, %r1946;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1947, %r394, %r1949, %r1944;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1951, %r397;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1953, %r1951, %r1955;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1956, %r394, %r1958, %r1953;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1960, %r397;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1962, %r1960, %r1964;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1965, %r394, %r1967, %r1962;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1969, %r397, %r1904;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1972, %r394, %r1901, %r1969;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1976, %r397, %r1913;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1979, %r394, %r1910, %r1976;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1983, %r397, %r1922;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1986, %r394, %r1919, %r1983;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1990, %r397, %r1931;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1993, %r394, %r1928, %r1990;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1997, %r397, %r1940;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2000, %r394, %r1937, %r1997;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2004, %r397, %r1949;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2007, %r394, %r1946, %r2004;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2011, %r397, %r1958;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2014, %r394, %r1955, %r2011;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2018, %r397, %r1967;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2021, %r394, %r1964, %r2018;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2025, %r2026}, {%r428, %r434, %r431, %r437}, {%r1902, %r1972}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2035, %r2036}, {%r428, %r434, %r431, %r437}, {%r1911, %r1979}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2045, %r2046}, {%r428, %r434, %r431, %r437}, {%r1920, %r1986}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2055, %r2056}, {%r428, %r434, %r431, %r437}, {%r1929, %r1993}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2065, %r2066}, {%r428, %r434, %r431, %r437}, {%r1938, %r2000}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2075, %r2076}, {%r428, %r434, %r431, %r437}, {%r1947, %r2007}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2085, %r2086}, {%r428, %r434, %r431, %r437}, {%r1956, %r2014}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2095, %r2096}, {%r428, %r434, %r431, %r437}, {%r1965, %r2021}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2105, %r114, %r2025;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2108, %r114, %r2026;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2111, %r114, %r2035;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2114, %r114, %r2036;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2117, %r114, %r2045;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2120, %r114, %r2046;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2123, %r114, %r2055;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2126, %r114, %r2056;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2129, %r114, %r2065;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2132, %r114, %r2066;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2135, %r114, %r2075;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2138, %r114, %r2076;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2141, %r114, %r2085;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2144, %r114, %r2086;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2147, %r114, %r2095;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2150, %r114, %r2096;
	// end inline asm
	// begin inline asm
	mov.b32 %r2153, {%rs1142, %rs1142};
	// end inline asm
	mov.u16 	%rs195, 18176;
	// begin inline asm
	mov.b32 %r2154, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2155, %r2105, %r2153;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2158, %r2155, %r2154;
	// end inline asm
	// begin inline asm
	mov.b32 %r2161, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2162, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2163, %r2108, %r2161;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2166, %r2163, %r2162;
	// end inline asm
	// begin inline asm
	mov.b32 %r2169, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2170, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2171, %r2111, %r2169;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2174, %r2171, %r2170;
	// end inline asm
	// begin inline asm
	mov.b32 %r2177, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2178, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2179, %r2114, %r2177;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2182, %r2179, %r2178;
	// end inline asm
	// begin inline asm
	mov.b32 %r2185, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2186, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2187, %r2117, %r2185;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2190, %r2187, %r2186;
	// end inline asm
	// begin inline asm
	mov.b32 %r2193, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2194, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2195, %r2120, %r2193;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2198, %r2195, %r2194;
	// end inline asm
	// begin inline asm
	mov.b32 %r2201, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2202, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2203, %r2123, %r2201;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2206, %r2203, %r2202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2209, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2210, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2211, %r2126, %r2209;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2214, %r2211, %r2210;
	// end inline asm
	// begin inline asm
	mov.b32 %r2217, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2218, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2219, %r2129, %r2217;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2222, %r2219, %r2218;
	// end inline asm
	// begin inline asm
	mov.b32 %r2225, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2226, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2227, %r2132, %r2225;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2230, %r2227, %r2226;
	// end inline asm
	// begin inline asm
	mov.b32 %r2233, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2234, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2235, %r2135, %r2233;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2238, %r2235, %r2234;
	// end inline asm
	// begin inline asm
	mov.b32 %r2241, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2242, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2243, %r2138, %r2241;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2246, %r2243, %r2242;
	// end inline asm
	// begin inline asm
	mov.b32 %r2249, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2250, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2251, %r2141, %r2249;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2254, %r2251, %r2250;
	// end inline asm
	// begin inline asm
	mov.b32 %r2257, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2258, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2259, %r2144, %r2257;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2262, %r2259, %r2258;
	// end inline asm
	// begin inline asm
	mov.b32 %r2265, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2266, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2267, %r2147, %r2265;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2270, %r2267, %r2266;
	// end inline asm
	// begin inline asm
	mov.b32 %r2273, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2274, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2275, %r2150, %r2273;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2278, %r2275, %r2274;
	// end inline asm
	// begin inline asm
	mov.b32 %r2284, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2282, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2283, %r2284, %r2282;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2286, %r2158, %r2283;
	// end inline asm
	// begin inline asm
	mov.b32 %r2289, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2290, %r2284, %r2289;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2293, %r2166, %r2290;
	// end inline asm
	// begin inline asm
	mov.b32 %r2296, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2297, %r2284, %r2296;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2300, %r2174, %r2297;
	// end inline asm
	// begin inline asm
	mov.b32 %r2303, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2304, %r2284, %r2303;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2307, %r2182, %r2304;
	// end inline asm
	mov.u32 	%r2313, 25152;
	// begin inline asm
	prmt.b32 %r2310, %r2286, %r2300, %r2313;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2314, %r2293, %r2307, %r2313;
	// end inline asm
	shl.b32 	%r2321, %r2314, 4;
	mov.u32 	%r2319, 252645135;
	// begin inline asm
	lop3.b32 %r2318, %r2319, %r2310, %r2321, 202;
	// end inline asm
	xor.b32  	%r7878, %r2318, -2004318072;
	// begin inline asm
	mov.b32 %r2325, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2323, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2324, %r2325, %r2323;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2327, %r2190, %r2324;
	// end inline asm
	// begin inline asm
	mov.b32 %r2330, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2331, %r2325, %r2330;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2334, %r2198, %r2331;
	// end inline asm
	// begin inline asm
	mov.b32 %r2337, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2338, %r2325, %r2337;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2341, %r2206, %r2338;
	// end inline asm
	// begin inline asm
	mov.b32 %r2344, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2345, %r2325, %r2344;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2348, %r2214, %r2345;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2351, %r2327, %r2341, %r2313;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2355, %r2334, %r2348, %r2313;
	// end inline asm
	shl.b32 	%r2362, %r2355, 4;
	// begin inline asm
	lop3.b32 %r2359, %r2319, %r2351, %r2362, 202;
	// end inline asm
	xor.b32  	%r7879, %r2359, -2004318072;
	// begin inline asm
	mov.b32 %r2366, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2364, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2365, %r2366, %r2364;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2368, %r2222, %r2365;
	// end inline asm
	// begin inline asm
	mov.b32 %r2371, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2372, %r2366, %r2371;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2375, %r2230, %r2372;
	// end inline asm
	// begin inline asm
	mov.b32 %r2378, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2379, %r2366, %r2378;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2382, %r2238, %r2379;
	// end inline asm
	// begin inline asm
	mov.b32 %r2385, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2386, %r2366, %r2385;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2389, %r2246, %r2386;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2392, %r2368, %r2382, %r2313;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2396, %r2375, %r2389, %r2313;
	// end inline asm
	shl.b32 	%r2403, %r2396, 4;
	// begin inline asm
	lop3.b32 %r2400, %r2319, %r2392, %r2403, 202;
	// end inline asm
	xor.b32  	%r7880, %r2400, -2004318072;
	// begin inline asm
	mov.b32 %r2407, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2405, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2406, %r2407, %r2405;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2409, %r2254, %r2406;
	// end inline asm
	// begin inline asm
	mov.b32 %r2412, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2413, %r2407, %r2412;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2416, %r2262, %r2413;
	// end inline asm
	// begin inline asm
	mov.b32 %r2419, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2420, %r2407, %r2419;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2423, %r2270, %r2420;
	// end inline asm
	// begin inline asm
	mov.b32 %r2426, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2427, %r2407, %r2426;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2430, %r2278, %r2427;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2433, %r2409, %r2423, %r2313;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2437, %r2416, %r2430, %r2313;
	// end inline asm
	shl.b32 	%r2444, %r2437, 4;
	// begin inline asm
	lop3.b32 %r2441, %r2319, %r2433, %r2444, 202;
	// end inline asm
	xor.b32  	%r7881, %r2441, -2004318072;
	st.shared.u32 	[%rd174], %r7878;
	st.shared.u32 	[%rd175], %r7879;
	st.shared.u32 	[%rd176], %r7880;
	st.shared.u32 	[%rd177], %r7881;
	ld.shared.u32 	%r8033, [%rd117];
	ld.shared.u32 	%r8032, [%rd119];
	ld.shared.u32 	%r8031, [%rd121];
	ld.shared.u32 	%r8030, [%rd123];
	// begin inline asm
	mov.b32 %r2450, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2461, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2449, %r8033, -2004318072;
	// begin inline asm
	lop3.b32 %r2447, %r652, %r2449, %r2450, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2451, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2452, %r2450, %r2451;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2455, %r2447, %r2452;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2458, %r663, %r2449, %r2461, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2462, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2463, %r2461, %r2462;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2466, %r2458, %r2463;
	// end inline asm
	shr.u32 	%r2471, %r2449, 8;
	// begin inline asm
	lop3.b32 %r2469, %r652, %r2471, %r2450, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2473, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2474, %r2450, %r2473;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2477, %r2469, %r2474;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2480, %r663, %r2471, %r2461, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2484, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2485, %r2461, %r2484;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2488, %r2480, %r2485;
	// end inline asm
	// begin inline asm
	mov.b32 %r2496, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2507, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2495, %r8032, -2004318072;
	// begin inline asm
	lop3.b32 %r2493, %r652, %r2495, %r2496, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2497, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2498, %r2496, %r2497;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2501, %r2493, %r2498;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2504, %r663, %r2495, %r2507, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2508, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2509, %r2507, %r2508;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2512, %r2504, %r2509;
	// end inline asm
	shr.u32 	%r2517, %r2495, 8;
	// begin inline asm
	lop3.b32 %r2515, %r652, %r2517, %r2496, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2519, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2520, %r2496, %r2519;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2523, %r2515, %r2520;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2526, %r663, %r2517, %r2507, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2530, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2531, %r2507, %r2530;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2534, %r2526, %r2531;
	// end inline asm
	// begin inline asm
	mov.b32 %r2542, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2553, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2541, %r8031, -2004318072;
	// begin inline asm
	lop3.b32 %r2539, %r652, %r2541, %r2542, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2543, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2544, %r2542, %r2543;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2547, %r2539, %r2544;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2550, %r663, %r2541, %r2553, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2554, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2555, %r2553, %r2554;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2558, %r2550, %r2555;
	// end inline asm
	shr.u32 	%r2563, %r2541, 8;
	// begin inline asm
	lop3.b32 %r2561, %r652, %r2563, %r2542, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2565, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2566, %r2542, %r2565;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2569, %r2561, %r2566;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2572, %r663, %r2563, %r2553, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2576, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2577, %r2553, %r2576;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2580, %r2572, %r2577;
	// end inline asm
	// begin inline asm
	mov.b32 %r2588, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2599, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2587, %r8030, -2004318072;
	// begin inline asm
	lop3.b32 %r2585, %r652, %r2587, %r2588, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2589, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2590, %r2588, %r2589;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2593, %r2585, %r2590;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2596, %r663, %r2587, %r2599, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2600, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2601, %r2599, %r2600;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2604, %r2596, %r2601;
	// end inline asm
	shr.u32 	%r2609, %r2587, 8;
	// begin inline asm
	lop3.b32 %r2607, %r652, %r2609, %r2588, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2611, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2612, %r2588, %r2611;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2615, %r2607, %r2612;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2618, %r663, %r2609, %r2599, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2622, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2623, %r2599, %r2622;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2626, %r2618, %r2623;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2629, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2631, %r2629, %r2455;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2634, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2636, %r2634, %r2466;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2639, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2641, %r2639, %r2477;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2644, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2646, %r2644, %r2488;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2649, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2651, %r2649, %r2501;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2654, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2656, %r2654, %r2512;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2659, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2661, %r2659, %r2523;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2664, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2666, %r2664, %r2534;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2669, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2671, %r2669, %r2547;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2674, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2676, %r2674, %r2558;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2679, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2681, %r2679, %r2569;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2684, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2686, %r2684, %r2580;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2689, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2691, %r2689, %r2593;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2694, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2696, %r2694, %r2604;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2699, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2701, %r2699, %r2615;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2704, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2706, %r2704, %r2626;
	// end inline asm
	// begin inline asm
	mov.b32 %r2714, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2725, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2711, %r652, %r1165, %r2714, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2715, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2716, %r2714, %r2715;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2719, %r2711, %r2716;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2722, %r663, %r1165, %r2725, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2726, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2727, %r2725, %r2726;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2730, %r2722, %r2727;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2733, %r652, %r1187, %r2714, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2737, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2738, %r2714, %r2737;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2741, %r2733, %r2738;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2744, %r663, %r1187, %r2725, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2748, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2749, %r2725, %r2748;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2752, %r2744, %r2749;
	// end inline asm
	// begin inline asm
	mov.b32 %r2760, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2771, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2757, %r652, %r1211, %r2760, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2761, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2762, %r2760, %r2761;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2765, %r2757, %r2762;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2768, %r663, %r1211, %r2771, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2772, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2773, %r2771, %r2772;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2776, %r2768, %r2773;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2779, %r652, %r1233, %r2760, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2783, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2784, %r2760, %r2783;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2787, %r2779, %r2784;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2790, %r663, %r1233, %r2771, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2794, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2795, %r2771, %r2794;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2798, %r2790, %r2795;
	// end inline asm
	// begin inline asm
	mov.b32 %r2806, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2817, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2803, %r652, %r1257, %r2806, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2807, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2808, %r2806, %r2807;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2811, %r2803, %r2808;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2814, %r663, %r1257, %r2817, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2818, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2819, %r2817, %r2818;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2822, %r2814, %r2819;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2825, %r652, %r1279, %r2806, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2829, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2830, %r2806, %r2829;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2833, %r2825, %r2830;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2836, %r663, %r1279, %r2817, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2840, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2841, %r2817, %r2840;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2844, %r2836, %r2841;
	// end inline asm
	// begin inline asm
	mov.b32 %r2852, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2863, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2849, %r652, %r1303, %r2852, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2853, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2854, %r2852, %r2853;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2857, %r2849, %r2854;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2860, %r663, %r1303, %r2863, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2864, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2865, %r2863, %r2864;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2868, %r2860, %r2865;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2871, %r652, %r1325, %r2852, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2875, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2876, %r2852, %r2875;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2879, %r2871, %r2876;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2882, %r663, %r1325, %r2863, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2886, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2887, %r2863, %r2886;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2890, %r2882, %r2887;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2893, %r221, %r2719, %r2631;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2897, %r221, %r2730, %r2636;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2901, %r221, %r2741, %r2641;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2905, %r221, %r2752, %r2646;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2909, %r221, %r2765, %r2651;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2913, %r221, %r2776, %r2656;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2917, %r221, %r2787, %r2661;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2921, %r221, %r2798, %r2666;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2925, %r221, %r2811, %r2671;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2929, %r221, %r2822, %r2676;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2933, %r221, %r2833, %r2681;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2937, %r221, %r2844, %r2686;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2941, %r221, %r2857, %r2691;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2945, %r221, %r2868, %r2696;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2949, %r221, %r2879, %r2701;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2953, %r221, %r2890, %r2706;
	// end inline asm
	// begin inline asm
	mov.b32 %r2962, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2973, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2959, %r652, %r1445, %r2962, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2963, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2964, %r2962, %r2963;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2967, %r2959, %r2964;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2970, %r663, %r1445, %r2973, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2974, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2975, %r2973, %r2974;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2978, %r2970, %r2975;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2981, %r652, %r1467, %r2962, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2985, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2986, %r2962, %r2985;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2989, %r2981, %r2986;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2992, %r663, %r1467, %r2973, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2996, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2997, %r2973, %r2996;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3000, %r2992, %r2997;
	// end inline asm
	// begin inline asm
	mov.b32 %r3008, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3019, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3005, %r652, %r1491, %r3008, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3009, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3010, %r3008, %r3009;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3013, %r3005, %r3010;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3016, %r663, %r1491, %r3019, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3020, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3021, %r3019, %r3020;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3024, %r3016, %r3021;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3027, %r652, %r1513, %r3008, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3031, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3032, %r3008, %r3031;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3035, %r3027, %r3032;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3038, %r663, %r1513, %r3019, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3042, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3043, %r3019, %r3042;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3046, %r3038, %r3043;
	// end inline asm
	// begin inline asm
	mov.b32 %r3054, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3065, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3051, %r652, %r1537, %r3054, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3055, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3056, %r3054, %r3055;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3059, %r3051, %r3056;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3062, %r663, %r1537, %r3065, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3066, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3067, %r3065, %r3066;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3070, %r3062, %r3067;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3073, %r652, %r1559, %r3054, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3077, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3078, %r3054, %r3077;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3081, %r3073, %r3078;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3084, %r663, %r1559, %r3065, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3088, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3089, %r3065, %r3088;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3092, %r3084, %r3089;
	// end inline asm
	// begin inline asm
	mov.b32 %r3100, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3111, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3097, %r652, %r1583, %r3100, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3101, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3102, %r3100, %r3101;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3105, %r3097, %r3102;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3108, %r663, %r1583, %r3111, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3112, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3113, %r3111, %r3112;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3116, %r3108, %r3113;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3119, %r652, %r1605, %r3100, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3123, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3124, %r3100, %r3123;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3127, %r3119, %r3124;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3130, %r663, %r1605, %r3111, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3134, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3135, %r3111, %r3134;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3138, %r3130, %r3135;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3141, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3143, %r3141, %r2967, %r2893;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3147, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3149, %r3147, %r2978, %r2897;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3153, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3155, %r3153, %r2989, %r2901;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3159, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3161, %r3159, %r3000, %r2905;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3165, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3167, %r3165, %r3013, %r2909;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3171, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3173, %r3171, %r3024, %r2913;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3177, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3179, %r3177, %r3035, %r2917;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3183, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3185, %r3183, %r3046, %r2921;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3189, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3191, %r3189, %r3059, %r2925;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3195, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3197, %r3195, %r3070, %r2929;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3201, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3203, %r3201, %r3081, %r2933;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3207, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3209, %r3207, %r3092, %r2937;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3213, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3215, %r3213, %r3105, %r2941;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3219, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3221, %r3219, %r3116, %r2945;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3225, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3227, %r3225, %r3127, %r2949;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3231, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3233, %r3231, %r3138, %r2953;
	// end inline asm
	// begin inline asm
	mov.b32 %r3242, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3253, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3239, %r652, %r653, %r3242, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3243, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3244, %r3242, %r3243;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3247, %r3239, %r3244;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3250, %r663, %r653, %r3253, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3254, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3255, %r3253, %r3254;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3258, %r3250, %r3255;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3261, %r652, %r675, %r3242, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3265, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3266, %r3242, %r3265;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3269, %r3261, %r3266;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3272, %r663, %r675, %r3253, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3276, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3277, %r3253, %r3276;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3280, %r3272, %r3277;
	// end inline asm
	// begin inline asm
	mov.b32 %r3288, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3299, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3285, %r652, %r699, %r3288, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3289, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3290, %r3288, %r3289;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3293, %r3285, %r3290;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3296, %r663, %r699, %r3299, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3300, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3301, %r3299, %r3300;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3304, %r3296, %r3301;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3307, %r652, %r721, %r3288, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3311, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3312, %r3288, %r3311;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3315, %r3307, %r3312;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3318, %r663, %r721, %r3299, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3322, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3323, %r3299, %r3322;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3326, %r3318, %r3323;
	// end inline asm
	// begin inline asm
	mov.b32 %r3334, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3345, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3331, %r652, %r745, %r3334, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3335, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3336, %r3334, %r3335;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3339, %r3331, %r3336;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3342, %r663, %r745, %r3345, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3346, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3347, %r3345, %r3346;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3350, %r3342, %r3347;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3353, %r652, %r767, %r3334, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3357, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3358, %r3334, %r3357;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3361, %r3353, %r3358;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3364, %r663, %r767, %r3345, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3368, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3369, %r3345, %r3368;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3372, %r3364, %r3369;
	// end inline asm
	// begin inline asm
	mov.b32 %r3380, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3391, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3377, %r652, %r791, %r3380, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3381, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3382, %r3380, %r3381;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3385, %r3377, %r3382;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3388, %r663, %r791, %r3391, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3392, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3393, %r3391, %r3392;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3396, %r3388, %r3393;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3399, %r652, %r813, %r3380, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3403, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3404, %r3380, %r3403;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3407, %r3399, %r3404;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3410, %r663, %r813, %r3391, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3414, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3415, %r3391, %r3414;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3418, %r3410, %r3415;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3492, %r257, %r3247, %r3143;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3489, %r257, %r3258, %r3149;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3501, %r257, %r3269, %r3155;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3498, %r257, %r3280, %r3161;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3510, %r257, %r3293, %r3167;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3507, %r257, %r3304, %r3173;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3519, %r257, %r3315, %r3179;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3516, %r257, %r3326, %r3185;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3528, %r257, %r3339, %r3191;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3525, %r257, %r3350, %r3197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3537, %r257, %r3361, %r3203;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3534, %r257, %r3372, %r3209;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3546, %r257, %r3385, %r3215;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3543, %r257, %r3396, %r3221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3555, %r257, %r3407, %r3227;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3552, %r257, %r3418, %r3233;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3485, %r306;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3487, %r3485, %r3489;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3490, %r303, %r3492, %r3487;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3494, %r306;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3496, %r3494, %r3498;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3499, %r303, %r3501, %r3496;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3503, %r306;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3505, %r3503, %r3507;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3508, %r303, %r3510, %r3505;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3512, %r306;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3514, %r3512, %r3516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3517, %r303, %r3519, %r3514;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3521, %r306;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3523, %r3521, %r3525;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3526, %r303, %r3528, %r3523;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3530, %r306;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3532, %r3530, %r3534;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3535, %r303, %r3537, %r3532;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3539, %r306;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3541, %r3539, %r3543;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3544, %r303, %r3546, %r3541;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3548, %r306;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3550, %r3548, %r3552;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3553, %r303, %r3555, %r3550;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3557, %r306, %r3492;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3560, %r303, %r3489, %r3557;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3564, %r306, %r3501;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3567, %r303, %r3498, %r3564;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3571, %r306, %r3510;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3574, %r303, %r3507, %r3571;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3578, %r306, %r3519;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3581, %r303, %r3516, %r3578;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3585, %r306, %r3528;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3588, %r303, %r3525, %r3585;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3592, %r306, %r3537;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3595, %r303, %r3534, %r3592;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3599, %r306, %r3546;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3602, %r303, %r3543, %r3599;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3606, %r306, %r3555;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3609, %r303, %r3552, %r3606;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3700, %r3697}, {%r350, %r356, %r353, %r359}, {%r3490, %r3560}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3709, %r3706}, {%r350, %r356, %r353, %r359}, {%r3499, %r3567}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3718, %r3715}, {%r350, %r356, %r353, %r359}, {%r3508, %r3574}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3727, %r3724}, {%r350, %r356, %r353, %r359}, {%r3517, %r3581}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3736, %r3733}, {%r350, %r356, %r353, %r359}, {%r3526, %r3588}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3745, %r3742}, {%r350, %r356, %r353, %r359}, {%r3535, %r3595}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3754, %r3751}, {%r350, %r356, %r353, %r359}, {%r3544, %r3602}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3763, %r3760}, {%r350, %r356, %r353, %r359}, {%r3553, %r3609}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3693, %r397;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3695, %r3693, %r3697;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3698, %r394, %r3700, %r3695;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3702, %r397;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3704, %r3702, %r3706;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3707, %r394, %r3709, %r3704;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3711, %r397;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3713, %r3711, %r3715;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3716, %r394, %r3718, %r3713;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3720, %r397;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3722, %r3720, %r3724;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3725, %r394, %r3727, %r3722;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3729, %r397;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3731, %r3729, %r3733;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3734, %r394, %r3736, %r3731;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3738, %r397;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3740, %r3738, %r3742;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3743, %r394, %r3745, %r3740;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3747, %r397;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3749, %r3747, %r3751;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3752, %r394, %r3754, %r3749;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3756, %r397;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3758, %r3756, %r3760;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3761, %r394, %r3763, %r3758;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3765, %r397, %r3700;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3768, %r394, %r3697, %r3765;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3772, %r397, %r3709;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3775, %r394, %r3706, %r3772;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3779, %r397, %r3718;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3782, %r394, %r3715, %r3779;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3786, %r397, %r3727;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3789, %r394, %r3724, %r3786;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3793, %r397, %r3736;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3796, %r394, %r3733, %r3793;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3800, %r397, %r3745;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3803, %r394, %r3742, %r3800;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3807, %r397, %r3754;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3810, %r394, %r3751, %r3807;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3814, %r397, %r3763;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3817, %r394, %r3760, %r3814;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3821, %r3822}, {%r428, %r434, %r431, %r437}, {%r3698, %r3768}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3831, %r3832}, {%r428, %r434, %r431, %r437}, {%r3707, %r3775}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3841, %r3842}, {%r428, %r434, %r431, %r437}, {%r3716, %r3782}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3851, %r3852}, {%r428, %r434, %r431, %r437}, {%r3725, %r3789}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3861, %r3862}, {%r428, %r434, %r431, %r437}, {%r3734, %r3796}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3871, %r3872}, {%r428, %r434, %r431, %r437}, {%r3743, %r3803}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3881, %r3882}, {%r428, %r434, %r431, %r437}, {%r3752, %r3810}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3891, %r3892}, {%r428, %r434, %r431, %r437}, {%r3761, %r3817}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3901, %r114, %r3821;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3904, %r114, %r3822;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3907, %r114, %r3831;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3910, %r114, %r3832;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3913, %r114, %r3841;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3916, %r114, %r3842;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3919, %r114, %r3851;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3922, %r114, %r3852;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3925, %r114, %r3861;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3928, %r114, %r3862;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3931, %r114, %r3871;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3934, %r114, %r3872;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3937, %r114, %r3881;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3940, %r114, %r3882;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3943, %r114, %r3891;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3946, %r114, %r3892;
	// end inline asm
	// begin inline asm
	mov.b32 %r3949, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3950, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3951, %r3901, %r3949;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3954, %r3951, %r3950;
	// end inline asm
	// begin inline asm
	mov.b32 %r3957, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3958, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3959, %r3904, %r3957;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3962, %r3959, %r3958;
	// end inline asm
	// begin inline asm
	mov.b32 %r3965, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3966, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3967, %r3907, %r3965;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3970, %r3967, %r3966;
	// end inline asm
	// begin inline asm
	mov.b32 %r3973, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3974, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3975, %r3910, %r3973;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3978, %r3975, %r3974;
	// end inline asm
	// begin inline asm
	mov.b32 %r3981, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3982, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3983, %r3913, %r3981;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3986, %r3983, %r3982;
	// end inline asm
	// begin inline asm
	mov.b32 %r3989, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3990, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3991, %r3916, %r3989;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3994, %r3991, %r3990;
	// end inline asm
	// begin inline asm
	mov.b32 %r3997, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3998, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3999, %r3919, %r3997;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4002, %r3999, %r3998;
	// end inline asm
	// begin inline asm
	mov.b32 %r4005, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4006, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4007, %r3922, %r4005;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4010, %r4007, %r4006;
	// end inline asm
	// begin inline asm
	mov.b32 %r4013, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4014, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4015, %r3925, %r4013;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4018, %r4015, %r4014;
	// end inline asm
	// begin inline asm
	mov.b32 %r4021, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4022, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4023, %r3928, %r4021;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4026, %r4023, %r4022;
	// end inline asm
	// begin inline asm
	mov.b32 %r4029, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4030, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4031, %r3931, %r4029;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4034, %r4031, %r4030;
	// end inline asm
	// begin inline asm
	mov.b32 %r4037, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4038, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4039, %r3934, %r4037;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4042, %r4039, %r4038;
	// end inline asm
	// begin inline asm
	mov.b32 %r4045, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4046, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4047, %r3937, %r4045;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4050, %r4047, %r4046;
	// end inline asm
	// begin inline asm
	mov.b32 %r4053, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4054, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4055, %r3940, %r4053;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4058, %r4055, %r4054;
	// end inline asm
	// begin inline asm
	mov.b32 %r4061, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4062, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4063, %r3943, %r4061;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4066, %r4063, %r4062;
	// end inline asm
	// begin inline asm
	mov.b32 %r4069, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4070, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4071, %r3946, %r4069;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4074, %r4071, %r4070;
	// end inline asm
	// begin inline asm
	mov.b32 %r4080, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4078, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4079, %r4080, %r4078;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4082, %r3954, %r4079;
	// end inline asm
	// begin inline asm
	mov.b32 %r4085, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4086, %r4080, %r4085;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4089, %r3962, %r4086;
	// end inline asm
	// begin inline asm
	mov.b32 %r4092, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4093, %r4080, %r4092;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4096, %r3970, %r4093;
	// end inline asm
	// begin inline asm
	mov.b32 %r4099, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4100, %r4080, %r4099;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4103, %r3978, %r4100;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4106, %r4082, %r4096, %r2313;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4110, %r4089, %r4103, %r2313;
	// end inline asm
	shl.b32 	%r4117, %r4110, 4;
	// begin inline asm
	lop3.b32 %r4114, %r2319, %r4106, %r4117, 202;
	// end inline asm
	xor.b32  	%r7882, %r4114, -2004318072;
	// begin inline asm
	mov.b32 %r4121, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4119, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4120, %r4121, %r4119;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4123, %r3986, %r4120;
	// end inline asm
	// begin inline asm
	mov.b32 %r4126, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4127, %r4121, %r4126;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4130, %r3994, %r4127;
	// end inline asm
	// begin inline asm
	mov.b32 %r4133, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4134, %r4121, %r4133;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4137, %r4002, %r4134;
	// end inline asm
	// begin inline asm
	mov.b32 %r4140, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4141, %r4121, %r4140;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4144, %r4010, %r4141;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4147, %r4123, %r4137, %r2313;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4151, %r4130, %r4144, %r2313;
	// end inline asm
	shl.b32 	%r4158, %r4151, 4;
	// begin inline asm
	lop3.b32 %r4155, %r2319, %r4147, %r4158, 202;
	// end inline asm
	xor.b32  	%r7883, %r4155, -2004318072;
	// begin inline asm
	mov.b32 %r4162, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4160, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4161, %r4162, %r4160;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4164, %r4018, %r4161;
	// end inline asm
	// begin inline asm
	mov.b32 %r4167, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4168, %r4162, %r4167;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4171, %r4026, %r4168;
	// end inline asm
	// begin inline asm
	mov.b32 %r4174, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4175, %r4162, %r4174;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4178, %r4034, %r4175;
	// end inline asm
	// begin inline asm
	mov.b32 %r4181, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4182, %r4162, %r4181;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4185, %r4042, %r4182;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4188, %r4164, %r4178, %r2313;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4192, %r4171, %r4185, %r2313;
	// end inline asm
	shl.b32 	%r4199, %r4192, 4;
	// begin inline asm
	lop3.b32 %r4196, %r2319, %r4188, %r4199, 202;
	// end inline asm
	xor.b32  	%r7884, %r4196, -2004318072;
	// begin inline asm
	mov.b32 %r4203, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4201, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4202, %r4203, %r4201;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4205, %r4050, %r4202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4208, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4209, %r4203, %r4208;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4212, %r4058, %r4209;
	// end inline asm
	// begin inline asm
	mov.b32 %r4215, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4216, %r4203, %r4215;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4219, %r4066, %r4216;
	// end inline asm
	// begin inline asm
	mov.b32 %r4222, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4223, %r4203, %r4222;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4226, %r4074, %r4223;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4229, %r4205, %r4219, %r2313;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4233, %r4212, %r4226, %r2313;
	// end inline asm
	shl.b32 	%r4240, %r4233, 4;
	// begin inline asm
	lop3.b32 %r4237, %r2319, %r4229, %r4240, 202;
	// end inline asm
	xor.b32  	%r7885, %r4237, -2004318072;
	st.shared.u32 	[%rd174], %r7882;
	st.shared.u32 	[%rd175], %r7883;
	st.shared.u32 	[%rd176], %r7884;
	st.shared.u32 	[%rd177], %r7885;
	ld.shared.u32 	%r8029, [%rd117];
	ld.shared.u32 	%r8028, [%rd119];
	ld.shared.u32 	%r8027, [%rd121];
	ld.shared.u32 	%r8026, [%rd123];
	// begin inline asm
	mov.b32 %r4246, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4257, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4245, %r8029, -2004318072;
	// begin inline asm
	lop3.b32 %r4243, %r652, %r4245, %r4246, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4247, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4248, %r4246, %r4247;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4251, %r4243, %r4248;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4254, %r663, %r4245, %r4257, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4258, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4259, %r4257, %r4258;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4262, %r4254, %r4259;
	// end inline asm
	shr.u32 	%r4267, %r4245, 8;
	// begin inline asm
	lop3.b32 %r4265, %r652, %r4267, %r4246, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4269, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4270, %r4246, %r4269;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4273, %r4265, %r4270;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4276, %r663, %r4267, %r4257, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4280, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4281, %r4257, %r4280;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4284, %r4276, %r4281;
	// end inline asm
	// begin inline asm
	mov.b32 %r4292, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4303, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4291, %r8028, -2004318072;
	// begin inline asm
	lop3.b32 %r4289, %r652, %r4291, %r4292, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4293, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4294, %r4292, %r4293;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4297, %r4289, %r4294;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4300, %r663, %r4291, %r4303, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4304, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4305, %r4303, %r4304;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4308, %r4300, %r4305;
	// end inline asm
	shr.u32 	%r4313, %r4291, 8;
	// begin inline asm
	lop3.b32 %r4311, %r652, %r4313, %r4292, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4315, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4316, %r4292, %r4315;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4319, %r4311, %r4316;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4322, %r663, %r4313, %r4303, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4326, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4327, %r4303, %r4326;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4330, %r4322, %r4327;
	// end inline asm
	// begin inline asm
	mov.b32 %r4338, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4349, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4337, %r8027, -2004318072;
	// begin inline asm
	lop3.b32 %r4335, %r652, %r4337, %r4338, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4339, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4340, %r4338, %r4339;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4343, %r4335, %r4340;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4346, %r663, %r4337, %r4349, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4350, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4351, %r4349, %r4350;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4354, %r4346, %r4351;
	// end inline asm
	shr.u32 	%r4359, %r4337, 8;
	// begin inline asm
	lop3.b32 %r4357, %r652, %r4359, %r4338, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4361, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4362, %r4338, %r4361;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4365, %r4357, %r4362;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4368, %r663, %r4359, %r4349, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4372, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4373, %r4349, %r4372;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4376, %r4368, %r4373;
	// end inline asm
	// begin inline asm
	mov.b32 %r4384, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4395, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4383, %r8026, -2004318072;
	// begin inline asm
	lop3.b32 %r4381, %r652, %r4383, %r4384, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4385, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4386, %r4384, %r4385;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4389, %r4381, %r4386;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4392, %r663, %r4383, %r4395, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4396, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4397, %r4395, %r4396;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4400, %r4392, %r4397;
	// end inline asm
	shr.u32 	%r4405, %r4383, 8;
	// begin inline asm
	lop3.b32 %r4403, %r652, %r4405, %r4384, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4407, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4408, %r4384, %r4407;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4411, %r4403, %r4408;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4414, %r663, %r4405, %r4395, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4418, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4419, %r4395, %r4418;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4422, %r4414, %r4419;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4425, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4427, %r4425, %r4251;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4430, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4432, %r4430, %r4262;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4435, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4437, %r4435, %r4273;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4440, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4442, %r4440, %r4284;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4445, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4447, %r4445, %r4297;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4450, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4452, %r4450, %r4308;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4455, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4457, %r4455, %r4319;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4460, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4462, %r4460, %r4330;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4465, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4467, %r4465, %r4343;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4470, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4472, %r4470, %r4354;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4475, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4477, %r4475, %r4365;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4480, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4482, %r4480, %r4376;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4485, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4487, %r4485, %r4389;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4490, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4492, %r4490, %r4400;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4495, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4497, %r4495, %r4411;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4500, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4502, %r4500, %r4422;
	// end inline asm
	// begin inline asm
	mov.b32 %r4510, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4521, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4507, %r652, %r1445, %r4510, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4511, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4512, %r4510, %r4511;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4515, %r4507, %r4512;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4518, %r663, %r1445, %r4521, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4522, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4523, %r4521, %r4522;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4526, %r4518, %r4523;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4529, %r652, %r1467, %r4510, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4533, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4534, %r4510, %r4533;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4537, %r4529, %r4534;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4540, %r663, %r1467, %r4521, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4544, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4545, %r4521, %r4544;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4548, %r4540, %r4545;
	// end inline asm
	// begin inline asm
	mov.b32 %r4556, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4567, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4553, %r652, %r1491, %r4556, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4557, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4558, %r4556, %r4557;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4561, %r4553, %r4558;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4564, %r663, %r1491, %r4567, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4568, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4569, %r4567, %r4568;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4572, %r4564, %r4569;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4575, %r652, %r1513, %r4556, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4579, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4580, %r4556, %r4579;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4583, %r4575, %r4580;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4586, %r663, %r1513, %r4567, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4590, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4591, %r4567, %r4590;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4594, %r4586, %r4591;
	// end inline asm
	// begin inline asm
	mov.b32 %r4602, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4613, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4599, %r652, %r1537, %r4602, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4603, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4604, %r4602, %r4603;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4607, %r4599, %r4604;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4610, %r663, %r1537, %r4613, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4614, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4615, %r4613, %r4614;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4618, %r4610, %r4615;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4621, %r652, %r1559, %r4602, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4625, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4626, %r4602, %r4625;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4629, %r4621, %r4626;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4632, %r663, %r1559, %r4613, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4636, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4637, %r4613, %r4636;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4640, %r4632, %r4637;
	// end inline asm
	// begin inline asm
	mov.b32 %r4648, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4659, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4645, %r652, %r1583, %r4648, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4649, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4650, %r4648, %r4649;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4653, %r4645, %r4650;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4656, %r663, %r1583, %r4659, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4660, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4661, %r4659, %r4660;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4664, %r4656, %r4661;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4667, %r652, %r1605, %r4648, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4671, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4672, %r4648, %r4671;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4675, %r4667, %r4672;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4678, %r663, %r1605, %r4659, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4682, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4683, %r4659, %r4682;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4686, %r4678, %r4683;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4689, %r221, %r4515, %r4427;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4693, %r221, %r4526, %r4432;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4697, %r221, %r4537, %r4437;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4701, %r221, %r4548, %r4442;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4705, %r221, %r4561, %r4447;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4709, %r221, %r4572, %r4452;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4713, %r221, %r4583, %r4457;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4717, %r221, %r4594, %r4462;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4721, %r221, %r4607, %r4467;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4725, %r221, %r4618, %r4472;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4729, %r221, %r4629, %r4477;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4733, %r221, %r4640, %r4482;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4737, %r221, %r4653, %r4487;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4741, %r221, %r4664, %r4492;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4745, %r221, %r4675, %r4497;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4749, %r221, %r4686, %r4502;
	// end inline asm
	// begin inline asm
	mov.b32 %r4758, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4769, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4755, %r652, %r653, %r4758, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4759, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4760, %r4758, %r4759;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4763, %r4755, %r4760;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4766, %r663, %r653, %r4769, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4770, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4771, %r4769, %r4770;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4774, %r4766, %r4771;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4777, %r652, %r675, %r4758, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4781, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4782, %r4758, %r4781;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4785, %r4777, %r4782;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4788, %r663, %r675, %r4769, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4792, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4793, %r4769, %r4792;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4796, %r4788, %r4793;
	// end inline asm
	// begin inline asm
	mov.b32 %r4804, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4815, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4801, %r652, %r699, %r4804, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4805, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4806, %r4804, %r4805;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4809, %r4801, %r4806;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4812, %r663, %r699, %r4815, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4816, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4817, %r4815, %r4816;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4820, %r4812, %r4817;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4823, %r652, %r721, %r4804, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4827, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4828, %r4804, %r4827;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4831, %r4823, %r4828;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4834, %r663, %r721, %r4815, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4838, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4839, %r4815, %r4838;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4842, %r4834, %r4839;
	// end inline asm
	// begin inline asm
	mov.b32 %r4850, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4861, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4847, %r652, %r745, %r4850, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4851, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4852, %r4850, %r4851;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4855, %r4847, %r4852;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4858, %r663, %r745, %r4861, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4862, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4863, %r4861, %r4862;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4866, %r4858, %r4863;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4869, %r652, %r767, %r4850, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4873, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4874, %r4850, %r4873;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4877, %r4869, %r4874;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4880, %r663, %r767, %r4861, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4884, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4885, %r4861, %r4884;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4888, %r4880, %r4885;
	// end inline asm
	// begin inline asm
	mov.b32 %r4896, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4907, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4893, %r652, %r791, %r4896, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4897, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4898, %r4896, %r4897;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4901, %r4893, %r4898;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4904, %r663, %r791, %r4907, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4908, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4909, %r4907, %r4908;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4912, %r4904, %r4909;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4915, %r652, %r813, %r4896, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4919, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4920, %r4896, %r4919;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4923, %r4915, %r4920;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4926, %r663, %r813, %r4907, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4930, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4931, %r4907, %r4930;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4934, %r4926, %r4931;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4937, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4939, %r4937, %r4763, %r4689;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4943, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4945, %r4943, %r4774, %r4693;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4949, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4951, %r4949, %r4785, %r4697;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4955, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4957, %r4955, %r4796, %r4701;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4961, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4963, %r4961, %r4809, %r4705;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4967, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4969, %r4967, %r4820, %r4709;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4973, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4975, %r4973, %r4831, %r4713;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4979, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4981, %r4979, %r4842, %r4717;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4985, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4987, %r4985, %r4855, %r4721;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4991, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4993, %r4991, %r4866, %r4725;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4997, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4999, %r4997, %r4877, %r4729;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5003, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5005, %r5003, %r4888, %r4733;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5009, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5011, %r5009, %r4901, %r4737;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5015, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5017, %r5015, %r4912, %r4741;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5021, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5023, %r5021, %r4923, %r4745;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5027, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5029, %r5027, %r4934, %r4749;
	// end inline asm
	// begin inline asm
	mov.b32 %r5038, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5049, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5035, %r652, %r2449, %r5038, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5039, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5040, %r5038, %r5039;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5043, %r5035, %r5040;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5046, %r663, %r2449, %r5049, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5050, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5051, %r5049, %r5050;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5054, %r5046, %r5051;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5057, %r652, %r2471, %r5038, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5061, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5062, %r5038, %r5061;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5065, %r5057, %r5062;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5068, %r663, %r2471, %r5049, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5072, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5073, %r5049, %r5072;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5076, %r5068, %r5073;
	// end inline asm
	// begin inline asm
	mov.b32 %r5084, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5095, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5081, %r652, %r2495, %r5084, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5085, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5086, %r5084, %r5085;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5089, %r5081, %r5086;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5092, %r663, %r2495, %r5095, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5096, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5097, %r5095, %r5096;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5100, %r5092, %r5097;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5103, %r652, %r2517, %r5084, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5107, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5108, %r5084, %r5107;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5111, %r5103, %r5108;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5114, %r663, %r2517, %r5095, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5118, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5119, %r5095, %r5118;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5122, %r5114, %r5119;
	// end inline asm
	// begin inline asm
	mov.b32 %r5130, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5141, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5127, %r652, %r2541, %r5130, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5131, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5132, %r5130, %r5131;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5135, %r5127, %r5132;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5138, %r663, %r2541, %r5141, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5142, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5143, %r5141, %r5142;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5146, %r5138, %r5143;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5149, %r652, %r2563, %r5130, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5153, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5154, %r5130, %r5153;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5157, %r5149, %r5154;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5160, %r663, %r2563, %r5141, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5164, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5165, %r5141, %r5164;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5168, %r5160, %r5165;
	// end inline asm
	// begin inline asm
	mov.b32 %r5176, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5187, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5173, %r652, %r2587, %r5176, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5177, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5178, %r5176, %r5177;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5181, %r5173, %r5178;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5184, %r663, %r2587, %r5187, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5188, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5189, %r5187, %r5188;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5192, %r5184, %r5189;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5195, %r652, %r2609, %r5176, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5199, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5200, %r5176, %r5199;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5203, %r5195, %r5200;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5206, %r663, %r2609, %r5187, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5210, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5211, %r5187, %r5210;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5214, %r5206, %r5211;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5288, %r257, %r5043, %r4939;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5285, %r257, %r5054, %r4945;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5297, %r257, %r5065, %r4951;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5294, %r257, %r5076, %r4957;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5306, %r257, %r5089, %r4963;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5303, %r257, %r5100, %r4969;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5315, %r257, %r5111, %r4975;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5312, %r257, %r5122, %r4981;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5324, %r257, %r5135, %r4987;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5321, %r257, %r5146, %r4993;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5333, %r257, %r5157, %r4999;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5330, %r257, %r5168, %r5005;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5342, %r257, %r5181, %r5011;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5339, %r257, %r5192, %r5017;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5351, %r257, %r5203, %r5023;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5348, %r257, %r5214, %r5029;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5281, %r306;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5283, %r5281, %r5285;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5286, %r303, %r5288, %r5283;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5290, %r306;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5292, %r5290, %r5294;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5295, %r303, %r5297, %r5292;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5299, %r306;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5301, %r5299, %r5303;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5304, %r303, %r5306, %r5301;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5308, %r306;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5310, %r5308, %r5312;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5313, %r303, %r5315, %r5310;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5317, %r306;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5319, %r5317, %r5321;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5322, %r303, %r5324, %r5319;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5326, %r306;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5328, %r5326, %r5330;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5331, %r303, %r5333, %r5328;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5335, %r306;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5337, %r5335, %r5339;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5340, %r303, %r5342, %r5337;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5344, %r306;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5346, %r5344, %r5348;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5349, %r303, %r5351, %r5346;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5353, %r306, %r5288;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5356, %r303, %r5285, %r5353;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5360, %r306, %r5297;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5363, %r303, %r5294, %r5360;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5367, %r306, %r5306;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5370, %r303, %r5303, %r5367;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5374, %r306, %r5315;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5377, %r303, %r5312, %r5374;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5381, %r306, %r5324;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5384, %r303, %r5321, %r5381;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5388, %r306, %r5333;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5391, %r303, %r5330, %r5388;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5395, %r306, %r5342;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5398, %r303, %r5339, %r5395;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5402, %r306, %r5351;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5405, %r303, %r5348, %r5402;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5496, %r5493}, {%r350, %r356, %r353, %r359}, {%r5286, %r5356}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5505, %r5502}, {%r350, %r356, %r353, %r359}, {%r5295, %r5363}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5514, %r5511}, {%r350, %r356, %r353, %r359}, {%r5304, %r5370}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5523, %r5520}, {%r350, %r356, %r353, %r359}, {%r5313, %r5377}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5532, %r5529}, {%r350, %r356, %r353, %r359}, {%r5322, %r5384}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5541, %r5538}, {%r350, %r356, %r353, %r359}, {%r5331, %r5391}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5550, %r5547}, {%r350, %r356, %r353, %r359}, {%r5340, %r5398}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5559, %r5556}, {%r350, %r356, %r353, %r359}, {%r5349, %r5405}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5489, %r397;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5491, %r5489, %r5493;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5494, %r394, %r5496, %r5491;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5498, %r397;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5500, %r5498, %r5502;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5503, %r394, %r5505, %r5500;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5507, %r397;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5509, %r5507, %r5511;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5512, %r394, %r5514, %r5509;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5516, %r397;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5518, %r5516, %r5520;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5521, %r394, %r5523, %r5518;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5525, %r397;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5527, %r5525, %r5529;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5530, %r394, %r5532, %r5527;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5534, %r397;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5536, %r5534, %r5538;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5539, %r394, %r5541, %r5536;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5543, %r397;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5545, %r5543, %r5547;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5548, %r394, %r5550, %r5545;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5552, %r397;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5554, %r5552, %r5556;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5557, %r394, %r5559, %r5554;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5561, %r397, %r5496;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5564, %r394, %r5493, %r5561;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5568, %r397, %r5505;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5571, %r394, %r5502, %r5568;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5575, %r397, %r5514;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5578, %r394, %r5511, %r5575;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5582, %r397, %r5523;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5585, %r394, %r5520, %r5582;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5589, %r397, %r5532;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5592, %r394, %r5529, %r5589;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5596, %r397, %r5541;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5599, %r394, %r5538, %r5596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5603, %r397, %r5550;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5606, %r394, %r5547, %r5603;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5610, %r397, %r5559;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5613, %r394, %r5556, %r5610;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5617, %r5618}, {%r428, %r434, %r431, %r437}, {%r5494, %r5564}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5627, %r5628}, {%r428, %r434, %r431, %r437}, {%r5503, %r5571}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5637, %r5638}, {%r428, %r434, %r431, %r437}, {%r5512, %r5578}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5647, %r5648}, {%r428, %r434, %r431, %r437}, {%r5521, %r5585}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5657, %r5658}, {%r428, %r434, %r431, %r437}, {%r5530, %r5592}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5667, %r5668}, {%r428, %r434, %r431, %r437}, {%r5539, %r5599}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5677, %r5678}, {%r428, %r434, %r431, %r437}, {%r5548, %r5606}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5687, %r5688}, {%r428, %r434, %r431, %r437}, {%r5557, %r5613}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5697, %r114, %r5617;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5700, %r114, %r5618;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5703, %r114, %r5627;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5706, %r114, %r5628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5709, %r114, %r5637;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5712, %r114, %r5638;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5715, %r114, %r5647;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5718, %r114, %r5648;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5721, %r114, %r5657;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5724, %r114, %r5658;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5727, %r114, %r5667;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5730, %r114, %r5668;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5733, %r114, %r5677;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5736, %r114, %r5678;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5739, %r114, %r5687;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5742, %r114, %r5688;
	// end inline asm
	// begin inline asm
	mov.b32 %r5745, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5746, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5747, %r5697, %r5745;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5750, %r5747, %r5746;
	// end inline asm
	// begin inline asm
	mov.b32 %r5753, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5754, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5755, %r5700, %r5753;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5758, %r5755, %r5754;
	// end inline asm
	// begin inline asm
	mov.b32 %r5761, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5762, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5763, %r5703, %r5761;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5766, %r5763, %r5762;
	// end inline asm
	// begin inline asm
	mov.b32 %r5769, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5770, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5771, %r5706, %r5769;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5774, %r5771, %r5770;
	// end inline asm
	// begin inline asm
	mov.b32 %r5777, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5778, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5779, %r5709, %r5777;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5782, %r5779, %r5778;
	// end inline asm
	// begin inline asm
	mov.b32 %r5785, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5786, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5787, %r5712, %r5785;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5790, %r5787, %r5786;
	// end inline asm
	// begin inline asm
	mov.b32 %r5793, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5794, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5795, %r5715, %r5793;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5798, %r5795, %r5794;
	// end inline asm
	// begin inline asm
	mov.b32 %r5801, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5802, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5803, %r5718, %r5801;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5806, %r5803, %r5802;
	// end inline asm
	// begin inline asm
	mov.b32 %r5809, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5810, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5811, %r5721, %r5809;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5814, %r5811, %r5810;
	// end inline asm
	// begin inline asm
	mov.b32 %r5817, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5818, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5819, %r5724, %r5817;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5822, %r5819, %r5818;
	// end inline asm
	// begin inline asm
	mov.b32 %r5825, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5826, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5827, %r5727, %r5825;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5830, %r5827, %r5826;
	// end inline asm
	// begin inline asm
	mov.b32 %r5833, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5834, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5835, %r5730, %r5833;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5838, %r5835, %r5834;
	// end inline asm
	// begin inline asm
	mov.b32 %r5841, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5842, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5843, %r5733, %r5841;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5846, %r5843, %r5842;
	// end inline asm
	// begin inline asm
	mov.b32 %r5849, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5850, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5851, %r5736, %r5849;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5854, %r5851, %r5850;
	// end inline asm
	// begin inline asm
	mov.b32 %r5857, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5858, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5859, %r5739, %r5857;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5862, %r5859, %r5858;
	// end inline asm
	// begin inline asm
	mov.b32 %r5865, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5866, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5867, %r5742, %r5865;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5870, %r5867, %r5866;
	// end inline asm
	// begin inline asm
	mov.b32 %r5876, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5874, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5875, %r5876, %r5874;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5878, %r5750, %r5875;
	// end inline asm
	// begin inline asm
	mov.b32 %r5881, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5882, %r5876, %r5881;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5885, %r5758, %r5882;
	// end inline asm
	// begin inline asm
	mov.b32 %r5888, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5889, %r5876, %r5888;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5892, %r5766, %r5889;
	// end inline asm
	// begin inline asm
	mov.b32 %r5895, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5896, %r5876, %r5895;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5899, %r5774, %r5896;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5902, %r5878, %r5892, %r2313;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5906, %r5885, %r5899, %r2313;
	// end inline asm
	shl.b32 	%r5913, %r5906, 4;
	// begin inline asm
	lop3.b32 %r5910, %r2319, %r5902, %r5913, 202;
	// end inline asm
	xor.b32  	%r7886, %r5910, -2004318072;
	// begin inline asm
	mov.b32 %r5917, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5915, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5916, %r5917, %r5915;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5919, %r5782, %r5916;
	// end inline asm
	// begin inline asm
	mov.b32 %r5922, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5923, %r5917, %r5922;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5926, %r5790, %r5923;
	// end inline asm
	// begin inline asm
	mov.b32 %r5929, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5930, %r5917, %r5929;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5933, %r5798, %r5930;
	// end inline asm
	// begin inline asm
	mov.b32 %r5936, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5937, %r5917, %r5936;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5940, %r5806, %r5937;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5943, %r5919, %r5933, %r2313;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5947, %r5926, %r5940, %r2313;
	// end inline asm
	shl.b32 	%r5954, %r5947, 4;
	// begin inline asm
	lop3.b32 %r5951, %r2319, %r5943, %r5954, 202;
	// end inline asm
	xor.b32  	%r7887, %r5951, -2004318072;
	// begin inline asm
	mov.b32 %r5958, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5956, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5957, %r5958, %r5956;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5960, %r5814, %r5957;
	// end inline asm
	// begin inline asm
	mov.b32 %r5963, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5964, %r5958, %r5963;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5967, %r5822, %r5964;
	// end inline asm
	// begin inline asm
	mov.b32 %r5970, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5971, %r5958, %r5970;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5974, %r5830, %r5971;
	// end inline asm
	// begin inline asm
	mov.b32 %r5977, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5978, %r5958, %r5977;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5981, %r5838, %r5978;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5984, %r5960, %r5974, %r2313;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5988, %r5967, %r5981, %r2313;
	// end inline asm
	shl.b32 	%r5995, %r5988, 4;
	// begin inline asm
	lop3.b32 %r5992, %r2319, %r5984, %r5995, 202;
	// end inline asm
	xor.b32  	%r7888, %r5992, -2004318072;
	// begin inline asm
	mov.b32 %r5999, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5997, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5998, %r5999, %r5997;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6001, %r5846, %r5998;
	// end inline asm
	// begin inline asm
	mov.b32 %r6004, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6005, %r5999, %r6004;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6008, %r5854, %r6005;
	// end inline asm
	// begin inline asm
	mov.b32 %r6011, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6012, %r5999, %r6011;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6015, %r5862, %r6012;
	// end inline asm
	// begin inline asm
	mov.b32 %r6018, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6019, %r5999, %r6018;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6022, %r5870, %r6019;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6025, %r6001, %r6015, %r2313;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6029, %r6008, %r6022, %r2313;
	// end inline asm
	shl.b32 	%r6036, %r6029, 4;
	// begin inline asm
	lop3.b32 %r6033, %r2319, %r6025, %r6036, 202;
	// end inline asm
	xor.b32  	%r7889, %r6033, -2004318072;
	st.shared.u32 	[%rd174], %r7886;
	st.shared.u32 	[%rd175], %r7887;
	st.shared.u32 	[%rd176], %r7888;
	st.shared.u32 	[%rd177], %r7889;
	ld.shared.u32 	%r8025, [%rd117];
	ld.shared.u32 	%r8024, [%rd119];
	ld.shared.u32 	%r8023, [%rd121];
	ld.shared.u32 	%r8022, [%rd123];
	// begin inline asm
	mov.b32 %r6042, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6053, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6041, %r8025, -2004318072;
	// begin inline asm
	lop3.b32 %r6039, %r652, %r6041, %r6042, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6043, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6044, %r6042, %r6043;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6047, %r6039, %r6044;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6050, %r663, %r6041, %r6053, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6054, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6055, %r6053, %r6054;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6058, %r6050, %r6055;
	// end inline asm
	shr.u32 	%r6063, %r6041, 8;
	// begin inline asm
	lop3.b32 %r6061, %r652, %r6063, %r6042, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6065, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6066, %r6042, %r6065;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6069, %r6061, %r6066;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6072, %r663, %r6063, %r6053, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6076, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6077, %r6053, %r6076;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6080, %r6072, %r6077;
	// end inline asm
	// begin inline asm
	mov.b32 %r6088, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6099, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6087, %r8024, -2004318072;
	// begin inline asm
	lop3.b32 %r6085, %r652, %r6087, %r6088, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6089, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6090, %r6088, %r6089;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6093, %r6085, %r6090;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6096, %r663, %r6087, %r6099, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6100, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6101, %r6099, %r6100;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6104, %r6096, %r6101;
	// end inline asm
	shr.u32 	%r6109, %r6087, 8;
	// begin inline asm
	lop3.b32 %r6107, %r652, %r6109, %r6088, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6111, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6112, %r6088, %r6111;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6115, %r6107, %r6112;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6118, %r663, %r6109, %r6099, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6122, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6123, %r6099, %r6122;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6126, %r6118, %r6123;
	// end inline asm
	// begin inline asm
	mov.b32 %r6134, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6145, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6133, %r8023, -2004318072;
	// begin inline asm
	lop3.b32 %r6131, %r652, %r6133, %r6134, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6135, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6136, %r6134, %r6135;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6139, %r6131, %r6136;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6142, %r663, %r6133, %r6145, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6146, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6147, %r6145, %r6146;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6150, %r6142, %r6147;
	// end inline asm
	shr.u32 	%r6155, %r6133, 8;
	// begin inline asm
	lop3.b32 %r6153, %r652, %r6155, %r6134, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6157, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6158, %r6134, %r6157;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6161, %r6153, %r6158;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6164, %r663, %r6155, %r6145, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6168, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6169, %r6145, %r6168;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6172, %r6164, %r6169;
	// end inline asm
	// begin inline asm
	mov.b32 %r6180, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6191, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6179, %r8022, -2004318072;
	// begin inline asm
	lop3.b32 %r6177, %r652, %r6179, %r6180, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6181, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6182, %r6180, %r6181;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6185, %r6177, %r6182;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6188, %r663, %r6179, %r6191, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6192, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6193, %r6191, %r6192;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6196, %r6188, %r6193;
	// end inline asm
	shr.u32 	%r6201, %r6179, 8;
	// begin inline asm
	lop3.b32 %r6199, %r652, %r6201, %r6180, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6203, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6204, %r6180, %r6203;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6207, %r6199, %r6204;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6210, %r663, %r6201, %r6191, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6214, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6215, %r6191, %r6214;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6218, %r6210, %r6215;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6221, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6223, %r6221, %r6047;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6226, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6228, %r6226, %r6058;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6231, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6233, %r6231, %r6069;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6236, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6238, %r6236, %r6080;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6241, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6243, %r6241, %r6093;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6246, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6248, %r6246, %r6104;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6251, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6253, %r6251, %r6115;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6256, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6258, %r6256, %r6126;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6261, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6263, %r6261, %r6139;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6266, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6268, %r6266, %r6150;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6271, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6273, %r6271, %r6161;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6276, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6278, %r6276, %r6172;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6281, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6283, %r6281, %r6185;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6286, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6288, %r6286, %r6196;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6291, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6293, %r6291, %r6207;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6296, %r275;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6298, %r6296, %r6218;
	// end inline asm
	// begin inline asm
	mov.b32 %r6306, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6317, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6303, %r652, %r653, %r6306, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6307, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6308, %r6306, %r6307;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6311, %r6303, %r6308;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6314, %r663, %r653, %r6317, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6318, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6319, %r6317, %r6318;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6322, %r6314, %r6319;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6325, %r652, %r675, %r6306, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6329, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6330, %r6306, %r6329;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6333, %r6325, %r6330;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6336, %r663, %r675, %r6317, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6340, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6341, %r6317, %r6340;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6344, %r6336, %r6341;
	// end inline asm
	// begin inline asm
	mov.b32 %r6352, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6363, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6349, %r652, %r699, %r6352, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6353, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6354, %r6352, %r6353;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6357, %r6349, %r6354;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6360, %r663, %r699, %r6363, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6364, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6365, %r6363, %r6364;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6368, %r6360, %r6365;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6371, %r652, %r721, %r6352, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6375, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6376, %r6352, %r6375;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6379, %r6371, %r6376;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6382, %r663, %r721, %r6363, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6386, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6387, %r6363, %r6386;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6390, %r6382, %r6387;
	// end inline asm
	// begin inline asm
	mov.b32 %r6398, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6409, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6395, %r652, %r745, %r6398, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6399, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6400, %r6398, %r6399;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6403, %r6395, %r6400;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6406, %r663, %r745, %r6409, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6410, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6411, %r6409, %r6410;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6414, %r6406, %r6411;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6417, %r652, %r767, %r6398, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6421, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6422, %r6398, %r6421;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6425, %r6417, %r6422;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6428, %r663, %r767, %r6409, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6432, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6433, %r6409, %r6432;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6436, %r6428, %r6433;
	// end inline asm
	// begin inline asm
	mov.b32 %r6444, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6455, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6441, %r652, %r791, %r6444, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6445, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6446, %r6444, %r6445;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6449, %r6441, %r6446;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6452, %r663, %r791, %r6455, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6456, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6457, %r6455, %r6456;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6460, %r6452, %r6457;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6463, %r652, %r813, %r6444, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6467, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6468, %r6444, %r6467;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6471, %r6463, %r6468;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6474, %r663, %r813, %r6455, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6478, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6479, %r6455, %r6478;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6482, %r6474, %r6479;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6485, %r221, %r6311, %r6223;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6489, %r221, %r6322, %r6228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6493, %r221, %r6333, %r6233;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6497, %r221, %r6344, %r6238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6501, %r221, %r6357, %r6243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6505, %r221, %r6368, %r6248;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6509, %r221, %r6379, %r6253;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6513, %r221, %r6390, %r6258;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6517, %r221, %r6403, %r6263;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6521, %r221, %r6414, %r6268;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6525, %r221, %r6425, %r6273;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6529, %r221, %r6436, %r6278;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6533, %r221, %r6449, %r6283;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6537, %r221, %r6460, %r6288;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6541, %r221, %r6471, %r6293;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6545, %r221, %r6482, %r6298;
	// end inline asm
	// begin inline asm
	mov.b32 %r6554, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6565, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6551, %r652, %r2449, %r6554, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6555, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6556, %r6554, %r6555;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6559, %r6551, %r6556;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6562, %r663, %r2449, %r6565, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6566, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6567, %r6565, %r6566;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6570, %r6562, %r6567;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6573, %r652, %r2471, %r6554, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6577, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6578, %r6554, %r6577;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6581, %r6573, %r6578;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6584, %r663, %r2471, %r6565, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6588, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6589, %r6565, %r6588;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6592, %r6584, %r6589;
	// end inline asm
	// begin inline asm
	mov.b32 %r6600, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6611, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6597, %r652, %r2495, %r6600, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6601, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6602, %r6600, %r6601;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6605, %r6597, %r6602;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6608, %r663, %r2495, %r6611, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6612, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6613, %r6611, %r6612;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6616, %r6608, %r6613;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6619, %r652, %r2517, %r6600, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6623, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6624, %r6600, %r6623;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6627, %r6619, %r6624;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6630, %r663, %r2517, %r6611, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6634, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6635, %r6611, %r6634;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6638, %r6630, %r6635;
	// end inline asm
	// begin inline asm
	mov.b32 %r6646, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6657, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6643, %r652, %r2541, %r6646, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6647, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6648, %r6646, %r6647;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6651, %r6643, %r6648;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6654, %r663, %r2541, %r6657, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6658, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6659, %r6657, %r6658;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6662, %r6654, %r6659;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6665, %r652, %r2563, %r6646, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6669, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6670, %r6646, %r6669;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6673, %r6665, %r6670;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6676, %r663, %r2563, %r6657, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6680, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6681, %r6657, %r6680;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6684, %r6676, %r6681;
	// end inline asm
	// begin inline asm
	mov.b32 %r6692, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6703, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6689, %r652, %r2587, %r6692, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6693, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6694, %r6692, %r6693;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6697, %r6689, %r6694;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6700, %r663, %r2587, %r6703, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6704, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6705, %r6703, %r6704;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6708, %r6700, %r6705;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6711, %r652, %r2609, %r6692, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6715, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6716, %r6692, %r6715;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6719, %r6711, %r6716;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6722, %r663, %r2609, %r6703, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6726, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6727, %r6703, %r6726;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6730, %r6722, %r6727;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6733, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6735, %r6733, %r6559, %r6485;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6739, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6741, %r6739, %r6570, %r6489;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6745, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6747, %r6745, %r6581, %r6493;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6751, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6753, %r6751, %r6592, %r6497;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6757, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6759, %r6757, %r6605, %r6501;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6763, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6765, %r6763, %r6616, %r6505;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6769, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6771, %r6769, %r6627, %r6509;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6775, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6777, %r6775, %r6638, %r6513;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6781, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6783, %r6781, %r6651, %r6517;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6787, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6789, %r6787, %r6662, %r6521;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6793, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6795, %r6793, %r6673, %r6525;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6799, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6801, %r6799, %r6684, %r6529;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6805, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6807, %r6805, %r6697, %r6533;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6811, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6813, %r6811, %r6708, %r6537;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6817, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6819, %r6817, %r6719, %r6541;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6823, %r239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6825, %r6823, %r6730, %r6545;
	// end inline asm
	// begin inline asm
	mov.b32 %r6834, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6845, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6831, %r652, %r4245, %r6834, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6835, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6836, %r6834, %r6835;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6839, %r6831, %r6836;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6842, %r663, %r4245, %r6845, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6846, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6847, %r6845, %r6846;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6850, %r6842, %r6847;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6853, %r652, %r4267, %r6834, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6857, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6858, %r6834, %r6857;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6861, %r6853, %r6858;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6864, %r663, %r4267, %r6845, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6868, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6869, %r6845, %r6868;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6872, %r6864, %r6869;
	// end inline asm
	// begin inline asm
	mov.b32 %r6880, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6891, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6877, %r652, %r4291, %r6880, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6881, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6882, %r6880, %r6881;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6885, %r6877, %r6882;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6888, %r663, %r4291, %r6891, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6892, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6893, %r6891, %r6892;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6896, %r6888, %r6893;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6899, %r652, %r4313, %r6880, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6903, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6904, %r6880, %r6903;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6907, %r6899, %r6904;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6910, %r663, %r4313, %r6891, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6914, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6915, %r6891, %r6914;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6918, %r6910, %r6915;
	// end inline asm
	// begin inline asm
	mov.b32 %r6926, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6937, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6923, %r652, %r4337, %r6926, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6927, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6928, %r6926, %r6927;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6931, %r6923, %r6928;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6934, %r663, %r4337, %r6937, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6938, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6939, %r6937, %r6938;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6942, %r6934, %r6939;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6945, %r652, %r4359, %r6926, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6949, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6950, %r6926, %r6949;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6953, %r6945, %r6950;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6956, %r663, %r4359, %r6937, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6960, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6961, %r6937, %r6960;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6964, %r6956, %r6961;
	// end inline asm
	// begin inline asm
	mov.b32 %r6972, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6983, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6969, %r652, %r4383, %r6972, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6973, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6974, %r6972, %r6973;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6977, %r6969, %r6974;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6980, %r663, %r4383, %r6983, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6984, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6985, %r6983, %r6984;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6988, %r6980, %r6985;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6991, %r652, %r4405, %r6972, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6995, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6996, %r6972, %r6995;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6999, %r6991, %r6996;
	// end inline asm
	// begin inline asm
	lop3.b32 %r7002, %r663, %r4405, %r6983, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r7006, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7007, %r6983, %r7006;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r7010, %r7002, %r7007;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7084, %r257, %r6839, %r6735;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7081, %r257, %r6850, %r6741;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7093, %r257, %r6861, %r6747;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7090, %r257, %r6872, %r6753;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7102, %r257, %r6885, %r6759;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7099, %r257, %r6896, %r6765;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7111, %r257, %r6907, %r6771;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7108, %r257, %r6918, %r6777;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7120, %r257, %r6931, %r6783;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7117, %r257, %r6942, %r6789;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7129, %r257, %r6953, %r6795;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7126, %r257, %r6964, %r6801;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7138, %r257, %r6977, %r6807;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7135, %r257, %r6988, %r6813;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7147, %r257, %r6999, %r6819;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7144, %r257, %r7010, %r6825;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7077, %r306;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7079, %r7077, %r7081;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7082, %r303, %r7084, %r7079;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7086, %r306;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7088, %r7086, %r7090;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7091, %r303, %r7093, %r7088;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7095, %r306;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7097, %r7095, %r7099;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7100, %r303, %r7102, %r7097;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7104, %r306;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7106, %r7104, %r7108;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7109, %r303, %r7111, %r7106;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7113, %r306;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7115, %r7113, %r7117;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7118, %r303, %r7120, %r7115;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7122, %r306;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7124, %r7122, %r7126;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7127, %r303, %r7129, %r7124;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7131, %r306;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7133, %r7131, %r7135;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7136, %r303, %r7138, %r7133;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7140, %r306;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7142, %r7140, %r7144;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7145, %r303, %r7147, %r7142;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7149, %r306, %r7084;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7152, %r303, %r7081, %r7149;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7156, %r306, %r7093;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7159, %r303, %r7090, %r7156;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7163, %r306, %r7102;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7166, %r303, %r7099, %r7163;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7170, %r306, %r7111;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7173, %r303, %r7108, %r7170;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7177, %r306, %r7120;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7180, %r303, %r7117, %r7177;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7184, %r306, %r7129;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7187, %r303, %r7126, %r7184;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7191, %r306, %r7138;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7194, %r303, %r7135, %r7191;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7198, %r306, %r7147;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7201, %r303, %r7144, %r7198;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7292, %r7289}, {%r350, %r356, %r353, %r359}, {%r7082, %r7152}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7301, %r7298}, {%r350, %r356, %r353, %r359}, {%r7091, %r7159}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7310, %r7307}, {%r350, %r356, %r353, %r359}, {%r7100, %r7166}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7319, %r7316}, {%r350, %r356, %r353, %r359}, {%r7109, %r7173}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7328, %r7325}, {%r350, %r356, %r353, %r359}, {%r7118, %r7180}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7337, %r7334}, {%r350, %r356, %r353, %r359}, {%r7127, %r7187}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7346, %r7343}, {%r350, %r356, %r353, %r359}, {%r7136, %r7194}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7355, %r7352}, {%r350, %r356, %r353, %r359}, {%r7145, %r7201}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7285, %r397;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7287, %r7285, %r7289;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7290, %r394, %r7292, %r7287;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7294, %r397;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7296, %r7294, %r7298;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7299, %r394, %r7301, %r7296;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7303, %r397;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7305, %r7303, %r7307;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7308, %r394, %r7310, %r7305;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7312, %r397;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7314, %r7312, %r7316;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7317, %r394, %r7319, %r7314;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7321, %r397;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7323, %r7321, %r7325;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7326, %r394, %r7328, %r7323;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7330, %r397;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7332, %r7330, %r7334;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7335, %r394, %r7337, %r7332;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7339, %r397;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7341, %r7339, %r7343;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7344, %r394, %r7346, %r7341;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7348, %r397;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7350, %r7348, %r7352;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7353, %r394, %r7355, %r7350;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7357, %r397, %r7292;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7360, %r394, %r7289, %r7357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7364, %r397, %r7301;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7367, %r394, %r7298, %r7364;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7371, %r397, %r7310;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7374, %r394, %r7307, %r7371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7378, %r397, %r7319;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7381, %r394, %r7316, %r7378;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7385, %r397, %r7328;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7388, %r394, %r7325, %r7385;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7392, %r397, %r7337;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7395, %r394, %r7334, %r7392;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7399, %r397, %r7346;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7402, %r394, %r7343, %r7399;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7406, %r397, %r7355;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7409, %r394, %r7352, %r7406;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7413, %r7414}, {%r428, %r434, %r431, %r437}, {%r7290, %r7360}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7423, %r7424}, {%r428, %r434, %r431, %r437}, {%r7299, %r7367}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7433, %r7434}, {%r428, %r434, %r431, %r437}, {%r7308, %r7374}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7443, %r7444}, {%r428, %r434, %r431, %r437}, {%r7317, %r7381}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7453, %r7454}, {%r428, %r434, %r431, %r437}, {%r7326, %r7388}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7463, %r7464}, {%r428, %r434, %r431, %r437}, {%r7335, %r7395}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7473, %r7474}, {%r428, %r434, %r431, %r437}, {%r7344, %r7402}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7483, %r7484}, {%r428, %r434, %r431, %r437}, {%r7353, %r7409}, {%r7989, %r7989};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7493, %r114, %r7413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7496, %r114, %r7414;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7499, %r114, %r7423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7502, %r114, %r7424;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7505, %r114, %r7433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7508, %r114, %r7434;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7511, %r114, %r7443;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7514, %r114, %r7444;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7517, %r114, %r7453;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7520, %r114, %r7454;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7523, %r114, %r7463;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7526, %r114, %r7464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7529, %r114, %r7473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7532, %r114, %r7474;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7535, %r114, %r7483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7538, %r114, %r7484;
	// end inline asm
	// begin inline asm
	mov.b32 %r7541, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7542, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7543, %r7493, %r7541;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7546, %r7543, %r7542;
	// end inline asm
	// begin inline asm
	mov.b32 %r7549, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7550, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7551, %r7496, %r7549;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7554, %r7551, %r7550;
	// end inline asm
	// begin inline asm
	mov.b32 %r7557, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7558, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7559, %r7499, %r7557;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7562, %r7559, %r7558;
	// end inline asm
	// begin inline asm
	mov.b32 %r7565, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7566, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7567, %r7502, %r7565;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7570, %r7567, %r7566;
	// end inline asm
	// begin inline asm
	mov.b32 %r7573, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7574, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7575, %r7505, %r7573;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7578, %r7575, %r7574;
	// end inline asm
	// begin inline asm
	mov.b32 %r7581, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7582, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7583, %r7508, %r7581;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7586, %r7583, %r7582;
	// end inline asm
	// begin inline asm
	mov.b32 %r7589, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7590, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7591, %r7511, %r7589;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7594, %r7591, %r7590;
	// end inline asm
	// begin inline asm
	mov.b32 %r7597, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7598, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7599, %r7514, %r7597;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7602, %r7599, %r7598;
	// end inline asm
	// begin inline asm
	mov.b32 %r7605, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7606, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7607, %r7517, %r7605;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7610, %r7607, %r7606;
	// end inline asm
	// begin inline asm
	mov.b32 %r7613, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7614, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7615, %r7520, %r7613;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7618, %r7615, %r7614;
	// end inline asm
	// begin inline asm
	mov.b32 %r7621, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7622, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7623, %r7523, %r7621;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7626, %r7623, %r7622;
	// end inline asm
	// begin inline asm
	mov.b32 %r7629, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7630, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7631, %r7526, %r7629;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7634, %r7631, %r7630;
	// end inline asm
	// begin inline asm
	mov.b32 %r7637, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7638, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7639, %r7529, %r7637;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7642, %r7639, %r7638;
	// end inline asm
	// begin inline asm
	mov.b32 %r7645, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7646, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7647, %r7532, %r7645;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7650, %r7647, %r7646;
	// end inline asm
	// begin inline asm
	mov.b32 %r7653, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7654, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7655, %r7535, %r7653;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7658, %r7655, %r7654;
	// end inline asm
	// begin inline asm
	mov.b32 %r7661, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7662, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7663, %r7538, %r7661;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7666, %r7663, %r7662;
	// end inline asm
	// begin inline asm
	mov.b32 %r7672, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7670, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7671, %r7672, %r7670;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7674, %r7546, %r7671;
	// end inline asm
	// begin inline asm
	mov.b32 %r7677, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7678, %r7672, %r7677;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7681, %r7554, %r7678;
	// end inline asm
	// begin inline asm
	mov.b32 %r7684, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7685, %r7672, %r7684;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7688, %r7562, %r7685;
	// end inline asm
	// begin inline asm
	mov.b32 %r7691, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7692, %r7672, %r7691;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7695, %r7570, %r7692;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7698, %r7674, %r7688, %r2313;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7702, %r7681, %r7695, %r2313;
	// end inline asm
	shl.b32 	%r7709, %r7702, 4;
	// begin inline asm
	lop3.b32 %r7706, %r2319, %r7698, %r7709, 202;
	// end inline asm
	xor.b32  	%r7890, %r7706, -2004318072;
	// begin inline asm
	mov.b32 %r7713, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7711, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7712, %r7713, %r7711;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7715, %r7578, %r7712;
	// end inline asm
	// begin inline asm
	mov.b32 %r7718, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7719, %r7713, %r7718;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7722, %r7586, %r7719;
	// end inline asm
	// begin inline asm
	mov.b32 %r7725, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7726, %r7713, %r7725;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7729, %r7594, %r7726;
	// end inline asm
	// begin inline asm
	mov.b32 %r7732, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7733, %r7713, %r7732;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7736, %r7602, %r7733;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7739, %r7715, %r7729, %r2313;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7743, %r7722, %r7736, %r2313;
	// end inline asm
	shl.b32 	%r7750, %r7743, 4;
	// begin inline asm
	lop3.b32 %r7747, %r2319, %r7739, %r7750, 202;
	// end inline asm
	xor.b32  	%r7891, %r7747, -2004318072;
	// begin inline asm
	mov.b32 %r7754, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7752, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7753, %r7754, %r7752;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7756, %r7610, %r7753;
	// end inline asm
	// begin inline asm
	mov.b32 %r7759, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7760, %r7754, %r7759;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7763, %r7618, %r7760;
	// end inline asm
	// begin inline asm
	mov.b32 %r7766, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7767, %r7754, %r7766;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7770, %r7626, %r7767;
	// end inline asm
	// begin inline asm
	mov.b32 %r7773, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7774, %r7754, %r7773;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7777, %r7634, %r7774;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7780, %r7756, %r7770, %r2313;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7784, %r7763, %r7777, %r2313;
	// end inline asm
	shl.b32 	%r7791, %r7784, 4;
	// begin inline asm
	lop3.b32 %r7788, %r2319, %r7780, %r7791, 202;
	// end inline asm
	xor.b32  	%r7892, %r7788, -2004318072;
	// begin inline asm
	mov.b32 %r7795, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7793, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7794, %r7795, %r7793;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7797, %r7642, %r7794;
	// end inline asm
	// begin inline asm
	mov.b32 %r7800, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7801, %r7795, %r7800;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7804, %r7650, %r7801;
	// end inline asm
	// begin inline asm
	mov.b32 %r7807, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7808, %r7795, %r7807;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7811, %r7658, %r7808;
	// end inline asm
	// begin inline asm
	mov.b32 %r7814, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7815, %r7795, %r7814;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7818, %r7666, %r7815;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7821, %r7797, %r7811, %r2313;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7825, %r7804, %r7818, %r2313;
	// end inline asm
	shl.b32 	%r7832, %r7825, 4;
	// begin inline asm
	lop3.b32 %r7829, %r2319, %r7821, %r7832, 202;
	// end inline asm
	xor.b32  	%r7893, %r7829, -2004318072;
	st.shared.u32 	[%rd174], %r7890;
	st.shared.u32 	[%rd175], %r7891;
	st.shared.u32 	[%rd176], %r7892;
	st.shared.u32 	[%rd177], %r7893;
	add.s32 	%r8021, %r8021, 64;
	add.s64 	%rd177, %rd177, 8324;
	add.s64 	%rd176, %rd176, 8324;
	add.s64 	%rd175, %rd175, 8324;
	add.s64 	%rd174, %rd174, 8324;
	setp.eq.s32 	%p241, %r8021, 256;
	@%p241 bra 	$L__BB0_131;
	bra.uni 	$L__BB0_130;
$L__BB0_131:                            // %guard_exit17381
                                        //   in Loop: Header=BB0_129 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r7899, [%rd5];
	ld.shared.u32 	%r7900, [%rd6+128];
	ld.shared.u32 	%r7907, [%rd6+4];
	ld.shared.u32 	%r7908, [%rd6+132];
	ld.shared.u32 	%r7915, [%rd5+8324];
	ld.shared.u32 	%r7916, [%rd6+8452];
	ld.shared.u32 	%r7923, [%rd6+8328];
	ld.shared.u32 	%r7924, [%rd6+8456];
	ld.shared.u32 	%r7931, [%rd5+16648];
	ld.shared.u32 	%r7932, [%rd6+16776];
	ld.shared.u32 	%r7939, [%rd6+16652];
	ld.shared.u32 	%r7940, [%rd6+16780];
	ld.shared.u32 	%r7947, [%rd5+24972];
	ld.shared.u32 	%r7948, [%rd6+25100];
	ld.shared.u32 	%r7955, [%rd6+24976];
	ld.shared.u32 	%r7956, [%rd6+25104];
	// begin inline asm
	prmt.b32 %r7894, %r7899, %r7900, %r565;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7898, %r7899, %r7900, %r569;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7902, %r7907, %r7908, %r565;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7906, %r7907, %r7908, %r569;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7910, %r7915, %r7916, %r565;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7914, %r7915, %r7916, %r569;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7918, %r7923, %r7924, %r565;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7922, %r7923, %r7924, %r569;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7926, %r7931, %r7932, %r565;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7930, %r7931, %r7932, %r569;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7934, %r7939, %r7940, %r565;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7938, %r7939, %r7940, %r569;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7942, %r7947, %r7948, %r565;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7946, %r7947, %r7948, %r569;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7950, %r7955, %r7956, %r565;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7954, %r7955, %r7956, %r569;
	// end inline asm
	selp.b32 	%r7958, %r7898, %r7894, %p228;
	shfl.sync.bfly.b32	%r165, %r7958, 8, 31, -1;
	selp.b32 	%r7959, %r7906, %r7902, %p228;
	shfl.sync.bfly.b32	%r166, %r7959, 8, 31, -1;
	selp.b32 	%r7960, %r7914, %r7910, %p228;
	shfl.sync.bfly.b32	%r7961, %r7960, 8, 31, -1;
	selp.b32 	%r7962, %r7922, %r7918, %p228;
	shfl.sync.bfly.b32	%r7963, %r7962, 8, 31, -1;
	selp.b32 	%r7964, %r7930, %r7926, %p228;
	shfl.sync.bfly.b32	%r7965, %r7964, 8, 31, -1;
	selp.b32 	%r7966, %r7938, %r7934, %p228;
	shfl.sync.bfly.b32	%r7967, %r7966, 8, 31, -1;
	selp.b32 	%r7968, %r7946, %r7942, %p228;
	shfl.sync.bfly.b32	%r7969, %r7968, 8, 31, -1;
	selp.b32 	%r7970, %r7954, %r7950, %p228;
	shfl.sync.bfly.b32	%r7971, %r7970, 8, 31, -1;
	and.b32  	%r179, %r105, 256;
	setp.eq.s32 	%p243, %r179, 0;
	shl.b32 	%r8034, %r105, 13;
	@%p243 bra 	$L__BB0_148;
// %bb.132:                             // %pass16578
                                        //   in Loop: Header=BB0_129 Depth=1
	selp.b32 	%r7972, %r166, %r7906, %p228;
	selp.b32 	%r7973, %r7902, %r166, %p228;
	selp.b32 	%r7974, %r165, %r7898, %p228;
	selp.b32 	%r7975, %r7894, %r165, %p228;
	or.b32  	%r7977, %r92, %r8034;
	cvt.u64.u32 	%rd124, %r7977;
	add.s64 	%rd125, %rd124, %rd7;
	shr.u64 	%rd126, %rd125, 35;
	add.s64 	%rd127, %rd125, %rd126;
	shr.s64 	%rd128, %rd127, 29;
	setp.lt.s64 	%p245, %rd125, 0;
	and.b64  	%rd129, %rd127, -536870912;
	setp.ne.s64 	%p246, %rd129, %rd125;
	and.pred  	%p247, %p245, %p246;
	selp.u64 	%rd130, 1, 0, %p247;
	sub.s64 	%rd131, %rd130, %rd128;
	shl.b64 	%rd132, %rd131, 29;
	add.s64 	%rd133, %rd132, %rd125;
	shl.b64 	%rd134, %rd133, 2;
	add.s64 	%rd135, %rd3, %rd134;
	st.global.v4.u32 	[%rd135], {%r7975, %r7973, %r7974, %r7972};
$L__BB0_148:                            // %pass16584
                                        //   in Loop: Header=BB0_129 Depth=1
	or.b32  	%r7978, %r179, 64;
	setp.gt.u32 	%p248, %r7978, 191;
	@%p248 bra 	$L__BB0_149;
	bra.uni 	$L__BB0_150;
$L__BB0_149:                            // %pass16678
                                        //   in Loop: Header=BB0_129 Depth=1
	selp.b32 	%r167, %r7910, %r7961, %p228;
	selp.b32 	%r168, %r7961, %r7914, %p228;
	selp.b32 	%r169, %r7918, %r7963, %p228;
	selp.b32 	%r170, %r7963, %r7922, %p228;
	or.b32  	%r7979, %r8034, %r92;
	or.b32  	%r7980, %r7979, 524288;
	cvt.s64.s32 	%rd136, %r7980;
	add.s64 	%rd137, %rd136, %rd7;
	shr.u64 	%rd138, %rd137, 35;
	add.s64 	%rd139, %rd137, %rd138;
	shr.s64 	%rd140, %rd139, 29;
	setp.lt.s64 	%p249, %rd137, 0;
	and.b64  	%rd141, %rd139, -536870912;
	setp.ne.s64 	%p250, %rd141, %rd137;
	and.pred  	%p251, %p249, %p250;
	selp.u64 	%rd142, 1, 0, %p251;
	sub.s64 	%rd143, %rd142, %rd140;
	shl.b64 	%rd144, %rd143, 29;
	add.s64 	%rd145, %rd144, %rd137;
	shl.b64 	%rd146, %rd145, 2;
	add.s64 	%rd147, %rd3, %rd146;
	st.global.v4.u32 	[%rd147], {%r167, %r169, %r168, %r170};
$L__BB0_150:                            // %pass16684
                                        //   in Loop: Header=BB0_129 Depth=1
	selp.b32 	%r175, %r7942, %r7969, %p228;
	selp.b32 	%r176, %r7969, %r7946, %p228;
	selp.b32 	%r177, %r7950, %r7971, %p228;
	selp.b32 	%r178, %r7971, %r7954, %p228;
	or.b32  	%r7981, %r179, 128;
	setp.lt.u32 	%p252, %r7981, 192;
	or.b32  	%r7991, %r8034, %r92;
	@%p252 bra 	$L__BB0_152;
// %bb.151:                             // %pass16778
                                        //   in Loop: Header=BB0_129 Depth=1
	selp.b32 	%r171, %r7926, %r7965, %p228;
	selp.b32 	%r172, %r7965, %r7930, %p228;
	selp.b32 	%r173, %r7934, %r7967, %p228;
	selp.b32 	%r174, %r7967, %r7938, %p228;
	or.b32  	%r7983, %r7991, 1048576;
	cvt.s64.s32 	%rd148, %r7983;
	add.s64 	%rd149, %rd148, %rd7;
	shr.u64 	%rd150, %rd149, 35;
	add.s64 	%rd151, %rd149, %rd150;
	shr.s64 	%rd152, %rd151, 29;
	setp.lt.s64 	%p253, %rd149, 0;
	and.b64  	%rd153, %rd151, -536870912;
	setp.ne.s64 	%p254, %rd153, %rd149;
	and.pred  	%p255, %p253, %p254;
	selp.u64 	%rd154, 1, 0, %p255;
	sub.s64 	%rd155, %rd154, %rd152;
	shl.b64 	%rd156, %rd155, 29;
	add.s64 	%rd157, %rd156, %rd149;
	shl.b64 	%rd158, %rd157, 2;
	add.s64 	%rd159, %rd3, %rd158;
	st.global.v4.u32 	[%rd159], {%r171, %r173, %r172, %r174};
	bra.uni 	$L__BB0_152;
$L__BB0_153:                            // %L40408
	st.global.u32 	[%rd4], %r7989;
	ret;
$L__BB0_7:                              // %L157
	mov.u32 	%r7988, 2;
	st.global.u32 	[%rd4], %r7988;
	mov.u64 	%rd172, exception3405;
	cvta.global.u64 	%rd173, %rd172;
	{ // callseq 16, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd173;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 16
	{ // callseq 17, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r180;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 17
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd41, exception1;
	cvta.global.u64 	%rd42, %rd41;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd42;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r180;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_53:                             // %L40507
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_11687, 
	(
	);
	} // callseq 3
	mov.u64 	%rd50, exception1;
	cvta.global.u64 	%rd51, %rd50;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd51;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r180;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_83:                             // %L40504
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_11687, 
	(
	);
	} // callseq 7
	mov.u64 	%rd56, exception1;
	cvta.global.u64 	%rd57, %rd56;
	{ // callseq 8, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd57;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 8
	{ // callseq 9, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r180;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 9
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_98:                             // %L40501
	{ // callseq 13, 0
	.reg .b32 temp_param_reg;
	call.uni 
	julia_AssertionError_11687, 
	(
	);
	} // callseq 13
	mov.u64 	%rd70, exception1;
	cvta.global.u64 	%rd71, %rd70;
	{ // callseq 14, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd71;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 14
	{ // callseq 15, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r180;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 15
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
