// PTX kernel code for the CUDA upchannelizer
// This file has been generated automatically by `upchan.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for upchan(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception3410[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<239>;
	.reg .b16 	%rs<1185>;
	.reg .b32 	%r<8008>;
	.reg .f32 	%f<832>;
	.reg .b64 	%rd<156>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r163, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd36, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r170, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r170, 66815;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L19
	ld.param.u64 	%rd37, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u32 	%r164, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r171, %r1, 9;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %tid.x;
	or.b32  	%r172, %r3, %r4;
	or.b32  	%r173, %r172, %r171;
	mul.wide.u32 	%rd43, %r173, 4;
	add.s64 	%rd4, %rd37, %rd43;
	mov.u32 	%r174, 1;
	st.global.u32 	[%rd4], %r174;
	setp.gt.u32 	%p2, %r164, 32767;
	@%p2 bra 	$L__BB0_7;
// %bb.3:                               // %L119
	ld.param.u32 	%r165, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p3, %r165, %r164;
	setp.gt.s32 	%p4, %r165, 65535;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_7;
// %bb.4:                               // %L126
	ld.param.u32 	%r166, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r175, %r165, %r164;
	and.b32  	%r176, %r175, 255;
	setp.ne.s32 	%p6, %r176, 0;
	setp.gt.u32 	%p7, %r166, 511;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L137
	ld.param.u32 	%r167, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.lt.s32 	%p9, %r167, %r166;
	setp.gt.s32 	%p10, %r167, 1023;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L144
	not.b32 	%r177, %r166;
	add.s32 	%r178, %r177, %r167;
	and.b32  	%r179, %r178, 3;
	setp.eq.s32 	%p12, %r179, 0;
	@%p12 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_7;
$L__BB0_8:                              // %L260
	ld.param.u32 	%r168, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p13, %r168, 0;
	@%p13 bra 	$L__BB0_10;
// %bb.9:                               // %L262
	ld.param.u32 	%r169, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.le.s32 	%p14, %r168, %r169;
	setp.lt.s32 	%p15, %r169, 65;
	and.pred  	%p16, %p14, %p15;
	@%p16 bra 	$L__BB0_11;
	bra.uni 	$L__BB0_10;
$L__BB0_11:                             // %pass180
	bfe.u32 	%r111, %r4, 2, 1;
	shr.u32 	%r112, %r4, 4;
	shl.b32 	%r186, %r112, 1;
	shl.b32 	%r187, %r111, 2;
	shl.b32 	%r113, %r4, 3;
	and.b32  	%r188, %r113, 24;
	or.b32  	%r189, %r187, %r188;
	or.b32  	%r190, %r186, %r189;
	bfe.u32 	%r191, %r4, 3, 1;
	or.b32  	%r115, %r191, %r190;
	or.b32  	%r116, %r115, 32;
	mov.f32 	%f145, 0f40000000;
	mov.f32 	%f146, 0f437F0000;
	div.approx.f32 	%f85, %f146, %f145;
	cvt.rn.f32.s32 	%f147, %r115;
	sub.f32 	%f148, %f147, %f85;
	mov.f32 	%f177, 0f42800000;
	div.approx.f32 	%f87, %f148, %f177;
	setp.ne.f32 	%p22, %f87, 0f00000000;
	mov.f32 	%f807, 0f3F800000;
	mov.f32 	%f800, %f807;
	@%p22 bra 	$L__BB0_12;
	bra.uni 	$L__BB0_13;
$L__BB0_12:                             // %L604
	sin.approx.f32 	%f178, %f87;
	div.approx.f32 	%f800, %f178, %f87;
$L__BB0_13:                             // %L607
	cvt.rn.f32.s32 	%f181, %r116;
	sub.f32 	%f182, %f181, %f85;
	div.approx.f32 	%f5, %f182, %f177;
	setp.eq.f32 	%p28, %f5, 0f00000000;
	mov.f32 	%f801, %f807;
	@%p28 bra 	$L__BB0_15;
// %bb.14:                              // %L624
	sin.approx.f32 	%f212, %f5;
	div.approx.f32 	%f801, %f212, %f5;
$L__BB0_15:                             // %L627
	or.b32  	%r209, %r115, 64;
	or.b32  	%r6, %r115, 96;
	cvt.rn.f32.s32 	%f216, %r209;
	sub.f32 	%f217, %f216, %f85;
	div.approx.f32 	%f9, %f217, %f177;
	setp.eq.f32 	%p34, %f9, 0f00000000;
	mov.f32 	%f802, %f807;
	@%p34 bra 	$L__BB0_17;
// %bb.16:                              // %L706
	sin.approx.f32 	%f247, %f9;
	div.approx.f32 	%f802, %f247, %f9;
$L__BB0_17:                             // %L709
	cvt.rn.f32.s32 	%f250, %r6;
	sub.f32 	%f251, %f250, %f85;
	div.approx.f32 	%f14, %f251, %f177;
	setp.eq.f32 	%p40, %f14, 0f00000000;
	mov.f32 	%f803, %f807;
	@%p40 bra 	$L__BB0_19;
// %bb.18:                              // %L726
	sin.approx.f32 	%f281, %f14;
	div.approx.f32 	%f803, %f281, %f14;
$L__BB0_19:                             // %L729
	or.b32  	%r227, %r115, 128;
	or.b32  	%r8, %r115, 160;
	cvt.rn.f32.s32 	%f285, %r227;
	sub.f32 	%f286, %f285, %f85;
	div.approx.f32 	%f18, %f286, %f177;
	setp.eq.f32 	%p46, %f18, 0f00000000;
	mov.f32 	%f804, %f807;
	@%p46 bra 	$L__BB0_21;
// %bb.20:                              // %L808
	sin.approx.f32 	%f316, %f18;
	div.approx.f32 	%f804, %f316, %f18;
$L__BB0_21:                             // %L811
	cvt.rn.f32.s32 	%f319, %r8;
	sub.f32 	%f320, %f319, %f85;
	div.approx.f32 	%f23, %f320, %f177;
	setp.eq.f32 	%p52, %f23, 0f00000000;
	mov.f32 	%f805, %f807;
	@%p52 bra 	$L__BB0_23;
// %bb.22:                              // %L828
	sin.approx.f32 	%f350, %f23;
	div.approx.f32 	%f805, %f350, %f23;
$L__BB0_23:                             // %L831
	or.b32  	%r245, %r115, 192;
	or.b32  	%r10, %r115, 224;
	cvt.rn.f32.s32 	%f354, %r245;
	sub.f32 	%f355, %f354, %f85;
	div.approx.f32 	%f27, %f355, %f177;
	setp.eq.f32 	%p58, %f27, 0f00000000;
	mov.f32 	%f806, %f807;
	@%p58 bra 	$L__BB0_25;
// %bb.24:                              // %L910
	sin.approx.f32 	%f385, %f27;
	div.approx.f32 	%f806, %f385, %f27;
$L__BB0_25:                             // %L913
	shr.u32 	%r110, %r4, 1;
	shr.u32 	%r114, %r4, 3;
	cvt.rn.f32.s32 	%f388, %r10;
	sub.f32 	%f389, %f388, %f85;
	div.approx.f32 	%f32, %f389, %f177;
	setp.eq.f32 	%p64, %f32, 0f00000000;
	@%p64 bra 	$L__BB0_27;
// %bb.26:                              // %L930
	sin.approx.f32 	%f419, %f32;
	div.approx.f32 	%f807, %f419, %f32;
$L__BB0_27:                             // %L933
	and.b32  	%r289, %r4, 3;
	and.b32  	%r290, %r114, 2;
	and.b32  	%r291, %r110, 4;
	or.b32  	%r292, %r111, %r290;
	or.b32  	%r14, %r292, %r291;
	mul.lo.s32 	%r293, %r289, %r14;
	shl.b32 	%r294, %r293, 1;
	neg.s32 	%r295, %r294;
	cvt.rn.f32.s32 	%f35, %r295;
	mov.f32 	%f490, 0f41000000;
	div.approx.f32 	%f36, %f35, %f490;
	abs.f32 	%f830, %f36;
	setp.lt.f32 	%p79, %f830, 0f40000000;
	setp.gtu.f32 	%p237, %f830, 0f4B800000;
	mov.f32 	%f822, %f830;
	@%p79 bra 	$L__BB0_100;
// %bb.28:
	@%p237 bra 	$L__BB0_96;
	bra.uni 	$L__BB0_29;
$L__BB0_96:
	mov.b32 	%r118, %f830;
	and.b32  	%r296, %r118, 8388607;
	or.b32  	%r8002, %r296, 1065353216;
	mov.b32 	%f821, %r8002;
	add.s32 	%r297, %r118, -1073741824;
	and.b32  	%r8003, %r297, -8388608;
	setp.eq.s32 	%p86, %r8003, 0;
	@%p86 bra 	$L__BB0_99;
// %bb.97:                              // %__nv_fmaf_rn.exit4.i.i.i923.preheader
	mov.f32 	%f500, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f499,%f500;
	// end inline asm
$L__BB0_98:                             // %__nv_fmaf_rn.exit4.i.i.i923
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r298, %r8003, 192937984;
	add.s32 	%r299, %r8002, %r298;
	mov.b32 	%f501, %r299;
	mul.f32 	%f502, %f499, %f501;
	sub.f32 	%f503, %f501, %f502;
	fma.rn.f32 	%f504, %f503, %f499, %f502;
	sub.f32 	%f505, %f501, %f504;
	fma.rz.f32 	%f506, %f505, %f499, %f504;
	cvt.rzi.f32.f32 	%f507, %f506;
	sub.f32 	%f821, %f501, %f507;
	sub.s32 	%r8003, %r8003, %r298;
	mov.b32 	%r8002, %f821;
	setp.ne.s32 	%p87, %r8003, 0;
	setp.ne.s32 	%p88, %r8002, 0;
	and.pred  	%p89, %p87, %p88;
	@%p89 bra 	$L__BB0_98;
$L__BB0_99:                             // %__internal_fmodf_slowpath_mod.exit.i.i925
	setp.gt.u32 	%p90, %r118, 2139095039;
	selp.f32 	%f508, 0f7FFFFFFF, 0f4B800000, %p90;
	mul.f32 	%f509, %f821, 0f34000000;
	mul.f32 	%f822, %f508, %f509;
	bra.uni 	$L__BB0_100;
$L__BB0_29:                             // %__nv_fast_fdividef.exit.i.i.i902
	div.approx.f32 	%f492, %f830, %f145;
	cvt.rzi.f32.f32 	%f820, %f492;
	fma.rn.f32 	%f89, %f820, 0fC0000000, %f830;
	mov.b32 	%r117, %f89;
	setp.lt.u32 	%p81, %r117, 1073741824;
	@%p81 bra 	$L__BB0_95;
// %bb.30:
	setp.lt.u32 	%p82, %r117, -2147483647;
	@%p82 bra 	$L__BB0_93;
// %bb.31:
	add.f32 	%f497, %f820, 0fBF800000;
	setp.lt.f32 	%p85, %f89, 0fC0000000;
	add.f32 	%f498, %f497, 0fBF800000;
	selp.f32 	%f820, %f498, %f497, %p85;
	bra.uni 	$L__BB0_95;
$L__BB0_93:
	add.f32 	%f820, %f820, 0f3F800000;
	setp.ltu.f32 	%p83, %f89, 0f40800000;
	@%p83 bra 	$L__BB0_95;
// %bb.94:                              // %__nv_fmaf_rn.exit.i.i.i906
	add.f32 	%f493, %f820, 0f3F800000;
	fma.rn.f32 	%f495, %f145, 0fC0400000, %f89;
	setp.ge.f32 	%p84, %f495, 0f00000000;
	add.f32 	%f496, %f493, 0f3F800000;
	selp.f32 	%f820, %f496, %f493, %p84;
$L__BB0_95:                             // %__internal_fmodf_fastpath_quot.exit.i.i909
	fma.rn.f32 	%f822, %f820, 0fC0000000, %f830;
$L__BB0_100:                            // %__internal_fmodf_kernel.exit.i928
	shl.b32 	%r101, %r4, 1;
	abs.f32 	%f510, %f822;
	setp.gtu.f32 	%p91, %f510, 0f7F800000;
	mov.b32 	%r300, %f36;
	and.b32  	%r125, %r300, -2147483648;
	@%p91 bra 	$L__BB0_102;
// %bb.101:
	mov.b32 	%r301, %f822;
	or.b32  	%r302, %r125, %r301;
	mov.b32 	%f822, %r302;
$L__BB0_102:                            // %__nv_fmodf.exit929
	and.b32  	%r311, %r101, 6;
	mov.u32 	%r312, -8;
	sub.s32 	%r313, %r312, %r311;
	mul.lo.s32 	%r314, %r14, %r313;
	cvt.rn.f32.s32 	%f105, %r314;
	div.approx.f32 	%f106, %f105, %f490;
	abs.f32 	%f818, %f106;
	setp.lt.f32 	%p99, %f818, 0f40000000;
	setp.gtu.f32 	%p238, %f818, 0f4B800000;
	mov.f32 	%f810, %f818;
	@%p99 bra 	$L__BB0_43;
// %bb.32:
	@%p238 bra 	$L__BB0_39;
	bra.uni 	$L__BB0_33;
$L__BB0_39:
	mov.b32 	%r16, %f818;
	and.b32  	%r315, %r16, 8388607;
	or.b32  	%r7970, %r315, 1065353216;
	mov.b32 	%f809, %r7970;
	add.s32 	%r316, %r16, -1073741824;
	and.b32  	%r7971, %r316, -8388608;
	setp.eq.s32 	%p106, %r7971, 0;
	@%p106 bra 	$L__BB0_42;
// %bb.40:                              // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f551, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f550,%f551;
	// end inline asm
$L__BB0_41:                             // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r317, %r7971, 192937984;
	add.s32 	%r318, %r7970, %r317;
	mov.b32 	%f552, %r318;
	mul.f32 	%f553, %f550, %f552;
	sub.f32 	%f554, %f552, %f553;
	fma.rn.f32 	%f555, %f554, %f550, %f553;
	sub.f32 	%f556, %f552, %f555;
	fma.rz.f32 	%f557, %f556, %f550, %f555;
	cvt.rzi.f32.f32 	%f558, %f557;
	sub.f32 	%f809, %f552, %f558;
	sub.s32 	%r7971, %r7971, %r317;
	mov.b32 	%r7970, %f809;
	setp.ne.s32 	%p107, %r7971, 0;
	setp.ne.s32 	%p108, %r7970, 0;
	and.pred  	%p109, %p107, %p108;
	@%p109 bra 	$L__BB0_41;
$L__BB0_42:                             // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p110, %r16, 2139095039;
	selp.f32 	%f559, 0f7FFFFFFF, 0f4B800000, %p110;
	mul.f32 	%f560, %f809, 0f34000000;
	mul.f32 	%f810, %f559, %f560;
	bra.uni 	$L__BB0_43;
$L__BB0_33:                             // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f543, %f818, %f145;
	cvt.rzi.f32.f32 	%f808, %f543;
	fma.rn.f32 	%f39, %f808, 0fC0000000, %f818;
	mov.b32 	%r15, %f39;
	setp.lt.u32 	%p101, %r15, 1073741824;
	@%p101 bra 	$L__BB0_38;
// %bb.34:
	setp.lt.u32 	%p102, %r15, -2147483647;
	@%p102 bra 	$L__BB0_36;
// %bb.35:
	add.f32 	%f548, %f808, 0fBF800000;
	setp.lt.f32 	%p105, %f39, 0fC0000000;
	add.f32 	%f549, %f548, 0fBF800000;
	selp.f32 	%f808, %f549, %f548, %p105;
	bra.uni 	$L__BB0_38;
$L__BB0_36:
	add.f32 	%f808, %f808, 0f3F800000;
	setp.ltu.f32 	%p103, %f39, 0f40800000;
	@%p103 bra 	$L__BB0_38;
// %bb.37:                              // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f544, %f808, 0f3F800000;
	fma.rn.f32 	%f546, %f145, 0fC0400000, %f39;
	setp.ge.f32 	%p104, %f546, 0f00000000;
	add.f32 	%f547, %f544, 0f3F800000;
	selp.f32 	%f808, %f547, %f544, %p104;
$L__BB0_38:                             // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f810, %f808, 0fC0000000, %f818;
$L__BB0_43:                             // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f561, %f810;
	setp.gtu.f32 	%p111, %f561, 0f7F800000;
	mov.b32 	%r319, %f106;
	and.b32  	%r23, %r319, -2147483648;
	@%p111 bra 	$L__BB0_45;
// %bb.44:
	mov.b32 	%r320, %f810;
	or.b32  	%r321, %r23, %r320;
	mov.b32 	%f810, %r321;
$L__BB0_45:                             // %__nv_fmodf.exit
	div.approx.f32 	%f53, %f35, %f177;
	abs.f32 	%f826, %f53;
	setp.lt.f32 	%p119, %f826, 0f40000000;
	@%p119 bra 	$L__BB0_110;
// %bb.46:
	setp.gtu.f32 	%p120, %f826, 0f4B800000;
	@%p120 bra 	$L__BB0_106;
	bra.uni 	$L__BB0_47;
$L__BB0_106:
	mov.b32 	%r127, %f826;
	and.b32  	%r342, %r127, 8388607;
	or.b32  	%r8004, %r342, 1065353216;
	mov.b32 	%f825, %r8004;
	add.s32 	%r343, %r127, -1073741824;
	and.b32  	%r8005, %r343, -8388608;
	setp.eq.s32 	%p126, %r8005, 0;
	@%p126 bra 	$L__BB0_109;
// %bb.107:                             // %__nv_fmaf_rn.exit4.i.i.i954.preheader
	mov.f32 	%f604, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f603,%f604;
	// end inline asm
$L__BB0_108:                            // %__nv_fmaf_rn.exit4.i.i.i954
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r344, %r8005, 192937984;
	add.s32 	%r345, %r8004, %r344;
	mov.b32 	%f605, %r345;
	mul.f32 	%f606, %f603, %f605;
	sub.f32 	%f607, %f605, %f606;
	fma.rn.f32 	%f608, %f607, %f603, %f606;
	sub.f32 	%f609, %f605, %f608;
	fma.rz.f32 	%f610, %f609, %f603, %f608;
	cvt.rzi.f32.f32 	%f611, %f610;
	sub.f32 	%f825, %f605, %f611;
	sub.s32 	%r8005, %r8005, %r344;
	mov.b32 	%r8004, %f825;
	setp.ne.s32 	%p127, %r8005, 0;
	setp.ne.s32 	%p128, %r8004, 0;
	and.pred  	%p129, %p127, %p128;
	@%p129 bra 	$L__BB0_108;
$L__BB0_109:                            // %__internal_fmodf_slowpath_mod.exit.i.i956
	setp.gt.u32 	%p130, %r127, 2139095039;
	selp.f32 	%f612, 0f7FFFFFFF, 0f4B800000, %p130;
	mul.f32 	%f613, %f825, 0f34000000;
	mul.f32 	%f826, %f612, %f613;
	bra.uni 	$L__BB0_110;
$L__BB0_47:                             // %__nv_fast_fdividef.exit.i.i.i933
	div.approx.f32 	%f596, %f826, %f145;
	cvt.rzi.f32.f32 	%f824, %f596;
	fma.rn.f32 	%f109, %f824, 0fC0000000, %f826;
	mov.b32 	%r126, %f109;
	setp.lt.u32 	%p121, %r126, 1073741824;
	@%p121 bra 	$L__BB0_105;
// %bb.48:
	setp.lt.u32 	%p122, %r126, -2147483647;
	@%p122 bra 	$L__BB0_103;
// %bb.49:
	add.f32 	%f601, %f824, 0fBF800000;
	setp.lt.f32 	%p125, %f109, 0fC0000000;
	add.f32 	%f602, %f601, 0fBF800000;
	selp.f32 	%f824, %f602, %f601, %p125;
	bra.uni 	$L__BB0_105;
$L__BB0_103:
	add.f32 	%f824, %f824, 0f3F800000;
	setp.ltu.f32 	%p123, %f109, 0f40800000;
	@%p123 bra 	$L__BB0_105;
// %bb.104:                             // %__nv_fmaf_rn.exit.i.i.i937
	add.f32 	%f597, %f824, 0f3F800000;
	fma.rn.f32 	%f599, %f145, 0fC0400000, %f109;
	setp.ge.f32 	%p124, %f599, 0f00000000;
	add.f32 	%f600, %f597, 0f3F800000;
	selp.f32 	%f824, %f600, %f597, %p124;
$L__BB0_105:                            // %__internal_fmodf_fastpath_quot.exit.i.i940
	fma.rn.f32 	%f826, %f824, 0fC0000000, %f826;
$L__BB0_110:                            // %__internal_fmodf_kernel.exit.i959
	abs.f32 	%f614, %f826;
	setp.gtu.f32 	%p131, %f614, 0f7F800000;
	@%p131 bra 	$L__BB0_112;
// %bb.111:
	mov.b32 	%r346, %f53;
	and.b32  	%r347, %r346, -2147483648;
	mov.b32 	%r348, %f826;
	or.b32  	%r349, %r347, %r348;
	mov.b32 	%f826, %r349;
$L__BB0_112:                            // %__nv_fmodf.exit960
	div.approx.f32 	%f125, %f105, %f177;
	abs.f32 	%f814, %f125;
	setp.lt.f32 	%p139, %f814, 0f40000000;
	@%p139 bra 	$L__BB0_61;
// %bb.50:
	setp.gtu.f32 	%p140, %f814, 0f4B800000;
	@%p140 bra 	$L__BB0_57;
	bra.uni 	$L__BB0_51;
$L__BB0_57:
	mov.b32 	%r29, %f814;
	and.b32  	%r358, %r29, 8388607;
	or.b32  	%r7972, %r358, 1065353216;
	mov.b32 	%f813, %r7972;
	add.s32 	%r359, %r29, -1073741824;
	and.b32  	%r7973, %r359, -8388608;
	setp.eq.s32 	%p146, %r7973, 0;
	@%p146 bra 	$L__BB0_60;
// %bb.58:                              // %__nv_fmaf_rn.exit4.i.i.i861.preheader
	mov.f32 	%f655, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f654,%f655;
	// end inline asm
$L__BB0_59:                             // %__nv_fmaf_rn.exit4.i.i.i861
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r360, %r7973, 192937984;
	add.s32 	%r361, %r7972, %r360;
	mov.b32 	%f656, %r361;
	mul.f32 	%f657, %f654, %f656;
	sub.f32 	%f658, %f656, %f657;
	fma.rn.f32 	%f659, %f658, %f654, %f657;
	sub.f32 	%f660, %f656, %f659;
	fma.rz.f32 	%f661, %f660, %f654, %f659;
	cvt.rzi.f32.f32 	%f662, %f661;
	sub.f32 	%f813, %f656, %f662;
	sub.s32 	%r7973, %r7973, %r360;
	mov.b32 	%r7972, %f813;
	setp.ne.s32 	%p147, %r7973, 0;
	setp.ne.s32 	%p148, %r7972, 0;
	and.pred  	%p149, %p147, %p148;
	@%p149 bra 	$L__BB0_59;
$L__BB0_60:                             // %__internal_fmodf_slowpath_mod.exit.i.i863
	setp.gt.u32 	%p150, %r29, 2139095039;
	selp.f32 	%f663, 0f7FFFFFFF, 0f4B800000, %p150;
	mul.f32 	%f664, %f813, 0f34000000;
	mul.f32 	%f814, %f663, %f664;
	bra.uni 	$L__BB0_61;
$L__BB0_51:                             // %__nv_fast_fdividef.exit.i.i.i840
	div.approx.f32 	%f647, %f814, %f145;
	cvt.rzi.f32.f32 	%f812, %f647;
	fma.rn.f32 	%f56, %f812, 0fC0000000, %f814;
	mov.b32 	%r28, %f56;
	setp.lt.u32 	%p141, %r28, 1073741824;
	@%p141 bra 	$L__BB0_56;
// %bb.52:
	setp.lt.u32 	%p142, %r28, -2147483647;
	@%p142 bra 	$L__BB0_54;
// %bb.53:
	add.f32 	%f652, %f812, 0fBF800000;
	setp.lt.f32 	%p145, %f56, 0fC0000000;
	add.f32 	%f653, %f652, 0fBF800000;
	selp.f32 	%f812, %f653, %f652, %p145;
	bra.uni 	$L__BB0_56;
$L__BB0_54:
	add.f32 	%f812, %f812, 0f3F800000;
	setp.ltu.f32 	%p143, %f56, 0f40800000;
	@%p143 bra 	$L__BB0_56;
// %bb.55:                              // %__nv_fmaf_rn.exit.i.i.i844
	add.f32 	%f648, %f812, 0f3F800000;
	fma.rn.f32 	%f650, %f145, 0fC0400000, %f56;
	setp.ge.f32 	%p144, %f650, 0f00000000;
	add.f32 	%f651, %f648, 0f3F800000;
	selp.f32 	%f812, %f651, %f648, %p144;
$L__BB0_56:                             // %__internal_fmodf_fastpath_quot.exit.i.i847
	fma.rn.f32 	%f814, %f812, 0fC0000000, %f814;
$L__BB0_61:                             // %__internal_fmodf_kernel.exit.i866
	abs.f32 	%f665, %f814;
	setp.gtu.f32 	%p151, %f665, 0f7F800000;
	@%p151 bra 	$L__BB0_63;
// %bb.62:
	mov.b32 	%r362, %f125;
	and.b32  	%r363, %r362, -2147483648;
	mov.b32 	%r364, %f814;
	or.b32  	%r365, %r363, %r364;
	mov.b32 	%f814, %r365;
$L__BB0_63:                             // %__nv_fmodf.exit867
	@%p79 bra 	$L__BB0_120;
// %bb.64:
	@%p237 bra 	$L__BB0_116;
	bra.uni 	$L__BB0_65;
$L__BB0_116:
	mov.b32 	%r135, %f830;
	and.b32  	%r380, %r135, 8388607;
	or.b32  	%r8006, %r380, 1065353216;
	mov.b32 	%f829, %r8006;
	add.s32 	%r381, %r135, -1073741824;
	and.b32  	%r8007, %r381, -8388608;
	setp.eq.s32 	%p166, %r8007, 0;
	@%p166 bra 	$L__BB0_119;
// %bb.117:                             // %__nv_fmaf_rn.exit4.i.i.i985.preheader
	mov.f32 	%f707, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f706,%f707;
	// end inline asm
$L__BB0_118:                            // %__nv_fmaf_rn.exit4.i.i.i985
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r382, %r8007, 192937984;
	add.s32 	%r383, %r8006, %r382;
	mov.b32 	%f708, %r383;
	mul.f32 	%f709, %f706, %f708;
	sub.f32 	%f710, %f708, %f709;
	fma.rn.f32 	%f711, %f710, %f706, %f709;
	sub.f32 	%f712, %f708, %f711;
	fma.rz.f32 	%f713, %f712, %f706, %f711;
	cvt.rzi.f32.f32 	%f714, %f713;
	sub.f32 	%f829, %f708, %f714;
	sub.s32 	%r8007, %r8007, %r382;
	mov.b32 	%r8006, %f829;
	setp.ne.s32 	%p167, %r8007, 0;
	setp.ne.s32 	%p168, %r8006, 0;
	and.pred  	%p169, %p167, %p168;
	@%p169 bra 	$L__BB0_118;
$L__BB0_119:                            // %__internal_fmodf_slowpath_mod.exit.i.i987
	setp.gt.u32 	%p170, %r135, 2139095039;
	selp.f32 	%f715, 0f7FFFFFFF, 0f4B800000, %p170;
	mul.f32 	%f716, %f829, 0f34000000;
	mul.f32 	%f830, %f715, %f716;
	bra.uni 	$L__BB0_120;
$L__BB0_65:                             // %__nv_fast_fdividef.exit.i.i.i964
	div.approx.f32 	%f699, %f830, %f145;
	cvt.rzi.f32.f32 	%f828, %f699;
	fma.rn.f32 	%f128, %f828, 0fC0000000, %f830;
	mov.b32 	%r134, %f128;
	setp.lt.u32 	%p161, %r134, 1073741824;
	@%p161 bra 	$L__BB0_115;
// %bb.66:
	setp.lt.u32 	%p162, %r134, -2147483647;
	@%p162 bra 	$L__BB0_113;
// %bb.67:
	add.f32 	%f704, %f828, 0fBF800000;
	setp.lt.f32 	%p165, %f128, 0fC0000000;
	add.f32 	%f705, %f704, 0fBF800000;
	selp.f32 	%f828, %f705, %f704, %p165;
	bra.uni 	$L__BB0_115;
$L__BB0_113:
	add.f32 	%f828, %f828, 0f3F800000;
	setp.ltu.f32 	%p163, %f128, 0f40800000;
	@%p163 bra 	$L__BB0_115;
// %bb.114:                             // %__nv_fmaf_rn.exit.i.i.i968
	add.f32 	%f700, %f828, 0f3F800000;
	fma.rn.f32 	%f702, %f145, 0fC0400000, %f128;
	setp.ge.f32 	%p164, %f702, 0f00000000;
	add.f32 	%f703, %f700, 0f3F800000;
	selp.f32 	%f828, %f703, %f700, %p164;
$L__BB0_115:                            // %__internal_fmodf_fastpath_quot.exit.i.i971
	fma.rn.f32 	%f830, %f828, 0fC0000000, %f830;
$L__BB0_120:                            // %__internal_fmodf_kernel.exit.i990
	abs.f32 	%f717, %f830;
	setp.gtu.f32 	%p171, %f717, 0f7F800000;
	@%p171 bra 	$L__BB0_122;
// %bb.121:
	mov.b32 	%r384, %f830;
	or.b32  	%r385, %r125, %r384;
	mov.b32 	%f830, %r385;
$L__BB0_122:                            // %__nv_fmodf.exit991
	@%p99 bra 	$L__BB0_79;
// %bb.68:
	@%p238 bra 	$L__BB0_75;
	bra.uni 	$L__BB0_69;
$L__BB0_75:
	mov.b32 	%r39, %f818;
	and.b32  	%r394, %r39, 8388607;
	or.b32  	%r7974, %r394, 1065353216;
	mov.b32 	%f817, %r7974;
	add.s32 	%r395, %r39, -1073741824;
	and.b32  	%r7975, %r395, -8388608;
	setp.eq.s32 	%p186, %r7975, 0;
	@%p186 bra 	$L__BB0_78;
// %bb.76:                              // %__nv_fmaf_rn.exit4.i.i.i892.preheader
	mov.f32 	%f757, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f756,%f757;
	// end inline asm
$L__BB0_77:                             // %__nv_fmaf_rn.exit4.i.i.i892
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r396, %r7975, 192937984;
	add.s32 	%r397, %r7974, %r396;
	mov.b32 	%f758, %r397;
	mul.f32 	%f759, %f756, %f758;
	sub.f32 	%f760, %f758, %f759;
	fma.rn.f32 	%f761, %f760, %f756, %f759;
	sub.f32 	%f762, %f758, %f761;
	fma.rz.f32 	%f763, %f762, %f756, %f761;
	cvt.rzi.f32.f32 	%f764, %f763;
	sub.f32 	%f817, %f758, %f764;
	sub.s32 	%r7975, %r7975, %r396;
	mov.b32 	%r7974, %f817;
	setp.ne.s32 	%p187, %r7975, 0;
	setp.ne.s32 	%p188, %r7974, 0;
	and.pred  	%p189, %p187, %p188;
	@%p189 bra 	$L__BB0_77;
$L__BB0_78:                             // %__internal_fmodf_slowpath_mod.exit.i.i894
	setp.gt.u32 	%p190, %r39, 2139095039;
	selp.f32 	%f765, 0f7FFFFFFF, 0f4B800000, %p190;
	mul.f32 	%f766, %f817, 0f34000000;
	mul.f32 	%f818, %f765, %f766;
	bra.uni 	$L__BB0_79;
$L__BB0_69:                             // %__nv_fast_fdividef.exit.i.i.i871
	div.approx.f32 	%f749, %f818, %f145;
	cvt.rzi.f32.f32 	%f816, %f749;
	fma.rn.f32 	%f71, %f816, 0fC0000000, %f818;
	mov.b32 	%r38, %f71;
	setp.lt.u32 	%p181, %r38, 1073741824;
	@%p181 bra 	$L__BB0_74;
// %bb.70:
	setp.lt.u32 	%p182, %r38, -2147483647;
	@%p182 bra 	$L__BB0_72;
// %bb.71:
	add.f32 	%f754, %f816, 0fBF800000;
	setp.lt.f32 	%p185, %f71, 0fC0000000;
	add.f32 	%f755, %f754, 0fBF800000;
	selp.f32 	%f816, %f755, %f754, %p185;
	bra.uni 	$L__BB0_74;
$L__BB0_72:
	add.f32 	%f816, %f816, 0f3F800000;
	setp.ltu.f32 	%p183, %f71, 0f40800000;
	@%p183 bra 	$L__BB0_74;
// %bb.73:                              // %__nv_fmaf_rn.exit.i.i.i875
	add.f32 	%f750, %f816, 0f3F800000;
	fma.rn.f32 	%f752, %f145, 0fC0400000, %f71;
	setp.ge.f32 	%p184, %f752, 0f00000000;
	add.f32 	%f753, %f750, 0f3F800000;
	selp.f32 	%f816, %f753, %f750, %p184;
$L__BB0_74:                             // %__internal_fmodf_fastpath_quot.exit.i.i878
	fma.rn.f32 	%f818, %f816, 0fC0000000, %f818;
$L__BB0_79:                             // %__internal_fmodf_kernel.exit.i897
	abs.f32 	%f767, %f818;
	setp.gtu.f32 	%p191, %f767, 0f7F800000;
	@%p191 bra 	$L__BB0_81;
// %bb.80:
	mov.b32 	%r398, %f818;
	or.b32  	%r399, %r23, %r398;
	mov.b32 	%f818, %r399;
$L__BB0_81:                             // %__nv_fmodf.exit898
	setp.le.s32 	%p199, %r165, %r164;
	mov.u32 	%r7968, 0;
	@%p199 bra 	$L__BB0_92;
// %bb.82:                              // %L1450.lr.ph
	mov.f32 	%f149, 0f43808000;
	mul.lo.s32 	%r269, %r115, 63;
	div.approx.f32 	%f150, %f148, %f149;
	div.approx.f32 	%f184, %f182, %f149;
	div.approx.f32 	%f219, %f217, %f149;
	div.approx.f32 	%f253, %f251, %f149;
	div.approx.f32 	%f288, %f286, %f149;
	div.approx.f32 	%f322, %f320, %f149;
	div.approx.f32 	%f357, %f355, %f149;
	div.approx.f32 	%f391, %f389, %f149;
	add.s32 	%r279, %r269, 96;
	abs.f32 	%f151, %f150;
	abs.f32 	%f185, %f184;
	abs.f32 	%f220, %f219;
	abs.f32 	%f254, %f253;
	abs.f32 	%f289, %f288;
	abs.f32 	%f323, %f322;
	abs.f32 	%f358, %f357;
	abs.f32 	%f392, %f391;
	and.b32  	%r270, %r269, 127;
	and.b32  	%r280, %r279, 127;
	setp.gt.f32 	%p17, %f151, 0f4B800000;
	mul.f32 	%f152, %f150, 0f00000000;
	setp.gt.f32 	%p23, %f185, 0f4B800000;
	mul.f32 	%f186, %f184, 0f00000000;
	setp.gt.f32 	%p29, %f220, 0f4B800000;
	mul.f32 	%f221, %f219, 0f00000000;
	setp.gt.f32 	%p35, %f254, 0f4B800000;
	mul.f32 	%f255, %f253, 0f00000000;
	setp.gt.f32 	%p41, %f289, 0f4B800000;
	mul.f32 	%f290, %f288, 0f00000000;
	setp.gt.f32 	%p47, %f323, 0f4B800000;
	mul.f32 	%f324, %f322, 0f00000000;
	setp.gt.f32 	%p53, %f358, 0f4B800000;
	mul.f32 	%f359, %f357, 0f00000000;
	setp.gt.f32 	%p59, %f392, 0f4B800000;
	mul.f32 	%f393, %f391, 0f00000000;
	cvt.rn.f32.s32 	%f422, %r270;
	cvt.rn.f32.s32 	%f457, %r280;
	selp.f32 	%f153, %f152, %f150, %p17;
	selp.f32 	%f187, %f186, %f184, %p23;
	selp.f32 	%f222, %f221, %f219, %p29;
	selp.f32 	%f256, %f255, %f253, %p35;
	selp.f32 	%f291, %f290, %f288, %p41;
	selp.f32 	%f325, %f324, %f322, %p47;
	selp.f32 	%f360, %f359, %f357, %p53;
	selp.f32 	%f394, %f393, %f391, %p59;
	div.approx.f32 	%f424, %f422, %f177;
	div.approx.f32 	%f458, %f457, %f177;
	add.f32 	%f154, %f153, %f153;
	add.f32 	%f188, %f187, %f187;
	add.f32 	%f223, %f222, %f222;
	add.f32 	%f257, %f256, %f256;
	add.f32 	%f292, %f291, %f291;
	add.f32 	%f326, %f325, %f325;
	add.f32 	%f361, %f360, %f360;
	add.f32 	%f395, %f394, %f394;
	add.f32 	%f425, %f424, %f424;
	add.f32 	%f459, %f458, %f458;
	add.f32 	%f511, %f822, %f822;
	add.f32 	%f562, %f810, %f810;
	mov.b32 	%r192, %f154;
	mov.b32 	%r199, %f188;
	mov.b32 	%r210, %f223;
	mov.b32 	%r217, %f257;
	mov.b32 	%r228, %f292;
	mov.b32 	%r235, %f326;
	mov.b32 	%r246, %f361;
	mov.b32 	%r253, %f395;
	mov.b32 	%r271, %f425;
	mov.b32 	%r281, %f459;
	mov.b32 	%r303, %f511;
	mov.b32 	%r334, %f562;
	and.b32  	%r193, %r192, -2147483648;
	and.b32  	%r200, %r199, -2147483648;
	and.b32  	%r211, %r210, -2147483648;
	and.b32  	%r218, %r217, -2147483648;
	and.b32  	%r229, %r228, -2147483648;
	and.b32  	%r236, %r235, -2147483648;
	and.b32  	%r247, %r246, -2147483648;
	and.b32  	%r254, %r253, -2147483648;
	and.b32  	%r272, %r271, -2147483648;
	and.b32  	%r282, %r281, -2147483648;
	and.b32  	%r304, %r303, -2147483648;
	and.b32  	%r335, %r334, -2147483648;
	add.f32 	%f615, %f826, %f826;
	add.f32 	%f666, %f814, %f814;
	or.b32  	%r194, %r193, 1056964608;
	or.b32  	%r201, %r200, 1056964608;
	or.b32  	%r212, %r211, 1056964608;
	or.b32  	%r219, %r218, 1056964608;
	or.b32  	%r230, %r229, 1056964608;
	or.b32  	%r237, %r236, 1056964608;
	or.b32  	%r248, %r247, 1056964608;
	or.b32  	%r255, %r254, 1056964608;
	or.b32  	%r273, %r272, 1056964608;
	or.b32  	%r283, %r282, 1056964608;
	or.b32  	%r305, %r304, 1056964608;
	or.b32  	%r336, %r335, 1056964608;
	mov.b32 	%r350, %f615;
	mov.b32 	%r372, %f666;
	mov.b32 	%f155, %r194;
	mov.b32 	%f189, %r201;
	mov.b32 	%f224, %r212;
	mov.b32 	%f258, %r219;
	mov.b32 	%f293, %r230;
	mov.b32 	%f327, %r237;
	mov.b32 	%f362, %r248;
	mov.b32 	%f396, %r255;
	mov.b32 	%f426, %r273;
	mov.b32 	%f460, %r283;
	mov.b32 	%f512, %r305;
	mov.b32 	%f563, %r336;
	and.b32  	%r351, %r350, -2147483648;
	and.b32  	%r373, %r372, -2147483648;
	add.f32 	%f718, %f830, %f830;
	add.f32 	%f156, %f154, %f155;
	abs.f32 	%f158, %f154;
	add.f32 	%f190, %f188, %f189;
	abs.f32 	%f192, %f188;
	add.f32 	%f225, %f223, %f224;
	abs.f32 	%f227, %f223;
	add.f32 	%f259, %f257, %f258;
	abs.f32 	%f261, %f257;
	add.f32 	%f294, %f292, %f293;
	abs.f32 	%f296, %f292;
	add.f32 	%f328, %f326, %f327;
	abs.f32 	%f330, %f326;
	add.f32 	%f363, %f361, %f362;
	abs.f32 	%f365, %f361;
	add.f32 	%f397, %f395, %f396;
	abs.f32 	%f399, %f395;
	add.f32 	%f427, %f425, %f426;
	abs.f32 	%f429, %f425;
	add.f32 	%f461, %f459, %f460;
	abs.f32 	%f463, %f459;
	add.f32 	%f513, %f511, %f512;
	abs.f32 	%f515, %f511;
	add.f32 	%f564, %f562, %f563;
	abs.f32 	%f566, %f562;
	or.b32  	%r352, %r351, 1056964608;
	or.b32  	%r374, %r373, 1056964608;
	mov.b32 	%r386, %f718;
	cvt.rzi.f32.f32 	%f157, %f156;
	setp.gt.f32 	%p18, %f158, 0f4B000000;
	cvt.rzi.f32.f32 	%f191, %f190;
	setp.gt.f32 	%p24, %f192, 0f4B000000;
	cvt.rzi.f32.f32 	%f226, %f225;
	setp.gt.f32 	%p30, %f227, 0f4B000000;
	cvt.rzi.f32.f32 	%f260, %f259;
	setp.gt.f32 	%p36, %f261, 0f4B000000;
	cvt.rzi.f32.f32 	%f295, %f294;
	setp.gt.f32 	%p42, %f296, 0f4B000000;
	cvt.rzi.f32.f32 	%f329, %f328;
	setp.gt.f32 	%p48, %f330, 0f4B000000;
	cvt.rzi.f32.f32 	%f364, %f363;
	setp.gt.f32 	%p54, %f365, 0f4B000000;
	cvt.rzi.f32.f32 	%f398, %f397;
	setp.gt.f32 	%p60, %f399, 0f4B000000;
	cvt.rzi.f32.f32 	%f428, %f427;
	setp.gt.f32 	%p65, %f429, 0f4B000000;
	cvt.rzi.f32.f32 	%f462, %f461;
	setp.gt.f32 	%p72, %f463, 0f4B000000;
	cvt.rzi.f32.f32 	%f514, %f513;
	setp.gt.f32 	%p92, %f515, 0f4B000000;
	cvt.rzi.f32.f32 	%f565, %f564;
	setp.gt.f32 	%p112, %f566, 0f4B000000;
	mov.b32 	%f616, %r352;
	mov.b32 	%f667, %r374;
	and.b32  	%r387, %r386, -2147483648;
	selp.f32 	%f159, %f154, %f157, %p18;
	cvt.rzi.f32.f32 	%f160, %f154;
	setp.lt.f32 	%p19, %f158, 0f3F000000;
	selp.f32 	%f193, %f188, %f191, %p24;
	cvt.rzi.f32.f32 	%f194, %f188;
	setp.lt.f32 	%p25, %f192, 0f3F000000;
	selp.f32 	%f228, %f223, %f226, %p30;
	cvt.rzi.f32.f32 	%f229, %f223;
	setp.lt.f32 	%p31, %f227, 0f3F000000;
	selp.f32 	%f262, %f257, %f260, %p36;
	cvt.rzi.f32.f32 	%f263, %f257;
	setp.lt.f32 	%p37, %f261, 0f3F000000;
	selp.f32 	%f297, %f292, %f295, %p42;
	cvt.rzi.f32.f32 	%f298, %f292;
	setp.lt.f32 	%p43, %f296, 0f3F000000;
	selp.f32 	%f331, %f326, %f329, %p48;
	cvt.rzi.f32.f32 	%f332, %f326;
	setp.lt.f32 	%p49, %f330, 0f3F000000;
	selp.f32 	%f366, %f361, %f364, %p54;
	cvt.rzi.f32.f32 	%f367, %f361;
	setp.lt.f32 	%p55, %f365, 0f3F000000;
	selp.f32 	%f400, %f395, %f398, %p60;
	cvt.rzi.f32.f32 	%f401, %f395;
	setp.lt.f32 	%p61, %f399, 0f3F000000;
	selp.f32 	%f430, %f425, %f428, %p65;
	cvt.rzi.f32.f32 	%f431, %f425;
	setp.lt.f32 	%p66, %f429, 0f3F000000;
	selp.f32 	%f464, %f459, %f462, %p72;
	cvt.rzi.f32.f32 	%f465, %f459;
	setp.lt.f32 	%p73, %f463, 0f3F000000;
	selp.f32 	%f516, %f511, %f514, %p92;
	cvt.rzi.f32.f32 	%f517, %f511;
	setp.lt.f32 	%p93, %f515, 0f3F000000;
	selp.f32 	%f567, %f562, %f565, %p112;
	cvt.rzi.f32.f32 	%f568, %f562;
	setp.lt.f32 	%p113, %f566, 0f3F000000;
	add.f32 	%f617, %f615, %f616;
	abs.f32 	%f619, %f615;
	add.f32 	%f668, %f666, %f667;
	abs.f32 	%f670, %f666;
	or.b32  	%r388, %r387, 1056964608;
	selp.f32 	%f161, %f160, %f159, %p19;
	selp.f32 	%f195, %f194, %f193, %p25;
	selp.f32 	%f230, %f229, %f228, %p31;
	selp.f32 	%f264, %f263, %f262, %p37;
	selp.f32 	%f299, %f298, %f297, %p43;
	selp.f32 	%f333, %f332, %f331, %p49;
	selp.f32 	%f368, %f367, %f366, %p55;
	selp.f32 	%f402, %f401, %f400, %p61;
	selp.f32 	%f432, %f431, %f430, %p66;
	selp.f32 	%f466, %f465, %f464, %p73;
	selp.f32 	%f518, %f517, %f516, %p93;
	selp.f32 	%f569, %f568, %f567, %p113;
	cvt.rzi.f32.f32 	%f618, %f617;
	setp.gt.f32 	%p132, %f619, 0f4B000000;
	cvt.rzi.f32.f32 	%f669, %f668;
	setp.gt.f32 	%p153, %f670, 0f4B000000;
	mov.b32 	%f719, %r388;
	fma.rn.f32 	%f162, %f161, 0fBF000000, %f153;
	fma.rn.f32 	%f196, %f195, 0fBF000000, %f187;
	fma.rn.f32 	%f231, %f230, 0fBF000000, %f222;
	fma.rn.f32 	%f265, %f264, 0fBF000000, %f256;
	fma.rn.f32 	%f300, %f299, 0fBF000000, %f291;
	fma.rn.f32 	%f334, %f333, 0fBF000000, %f325;
	fma.rn.f32 	%f369, %f368, 0fBF000000, %f360;
	fma.rn.f32 	%f403, %f402, 0fBF000000, %f394;
	fma.rn.f32 	%f433, %f432, 0fBF000000, %f424;
	fma.rn.f32 	%f467, %f466, 0fBF000000, %f458;
	fma.rn.f32 	%f519, %f518, 0fBF000000, %f822;
	fma.rn.f32 	%f570, %f569, 0fBF000000, %f810;
	selp.f32 	%f620, %f615, %f618, %p132;
	cvt.rzi.f32.f32 	%f621, %f615;
	setp.lt.f32 	%p133, %f619, 0f3F000000;
	selp.f32 	%f671, %f666, %f669, %p153;
	cvt.rzi.f32.f32 	%f672, %f666;
	setp.lt.f32 	%p154, %f670, 0f3F000000;
	add.f32 	%f720, %f718, %f719;
	abs.f32 	%f722, %f718;
	mul.f32 	%f163, %f162, %f162;
	mul.f32 	%f197, %f196, %f196;
	mul.f32 	%f232, %f231, %f231;
	mul.f32 	%f266, %f265, %f265;
	mul.f32 	%f301, %f300, %f300;
	mul.f32 	%f335, %f334, %f334;
	mul.f32 	%f370, %f369, %f369;
	mul.f32 	%f404, %f403, %f403;
	mul.f32 	%f434, %f433, %f433;
	mul.f32 	%f468, %f467, %f467;
	mul.f32 	%f520, %f519, %f519;
	mul.f32 	%f571, %f570, %f570;
	selp.f32 	%f622, %f621, %f620, %p133;
	selp.f32 	%f673, %f672, %f671, %p154;
	cvt.rzi.f32.f32 	%f721, %f720;
	setp.gt.f32 	%p173, %f722, 0f4B000000;
	cvt.rzi.s32.f32 	%r195, %f161;
	fma.rn.f32 	%f164, %f163, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f165, %f163, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r202, %f195;
	fma.rn.f32 	%f198, %f197, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f199, %f197, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r213, %f230;
	fma.rn.f32 	%f233, %f232, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f234, %f232, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r220, %f264;
	fma.rn.f32 	%f267, %f266, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f268, %f266, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r231, %f299;
	fma.rn.f32 	%f302, %f301, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f303, %f301, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r238, %f333;
	fma.rn.f32 	%f336, %f335, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f337, %f335, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r249, %f368;
	fma.rn.f32 	%f371, %f370, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f372, %f370, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r256, %f402;
	fma.rn.f32 	%f405, %f404, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f406, %f404, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f435, %f434, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f436, %f434, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f469, %f468, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f470, %f468, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f521, %f520, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f522, %f520, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f572, %f571, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f573, %f571, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f623, %f622, 0fBF000000, %f826;
	fma.rn.f32 	%f674, %f673, 0fBF000000, %f814;
	selp.f32 	%f723, %f718, %f721, %p173;
	cvt.rzi.f32.f32 	%f724, %f718;
	setp.lt.f32 	%p174, %f722, 0f3F000000;
	add.s32 	%r196, %r195, 1;
	fma.rn.f32 	%f166, %f164, %f163, 0fC0A55DF6;
	fma.rn.f32 	%f167, %f165, %f163, 0f4081E0CF;
	fma.rn.f32 	%f168, %f163, %f162, 0f00000000;
	add.s32 	%r203, %r202, 1;
	fma.rn.f32 	%f200, %f198, %f197, 0fC0A55DF6;
	fma.rn.f32 	%f201, %f199, %f197, 0f4081E0CF;
	fma.rn.f32 	%f202, %f197, %f196, 0f00000000;
	add.s32 	%r214, %r213, 1;
	fma.rn.f32 	%f235, %f233, %f232, 0fC0A55DF6;
	fma.rn.f32 	%f236, %f234, %f232, 0f4081E0CF;
	fma.rn.f32 	%f237, %f232, %f231, 0f00000000;
	add.s32 	%r221, %r220, 1;
	fma.rn.f32 	%f269, %f267, %f266, 0fC0A55DF6;
	fma.rn.f32 	%f270, %f268, %f266, 0f4081E0CF;
	fma.rn.f32 	%f271, %f266, %f265, 0f00000000;
	add.s32 	%r232, %r231, 1;
	fma.rn.f32 	%f304, %f302, %f301, 0fC0A55DF6;
	fma.rn.f32 	%f305, %f303, %f301, 0f4081E0CF;
	fma.rn.f32 	%f306, %f301, %f300, 0f00000000;
	add.s32 	%r239, %r238, 1;
	fma.rn.f32 	%f338, %f336, %f335, 0fC0A55DF6;
	fma.rn.f32 	%f339, %f337, %f335, 0f4081E0CF;
	fma.rn.f32 	%f340, %f335, %f334, 0f00000000;
	add.s32 	%r250, %r249, 1;
	fma.rn.f32 	%f373, %f371, %f370, 0fC0A55DF6;
	fma.rn.f32 	%f374, %f372, %f370, 0f4081E0CF;
	fma.rn.f32 	%f375, %f370, %f369, 0f00000000;
	add.s32 	%r257, %r256, 1;
	fma.rn.f32 	%f407, %f405, %f404, 0fC0A55DF6;
	fma.rn.f32 	%f408, %f406, %f404, 0f4081E0CF;
	fma.rn.f32 	%f409, %f404, %f403, 0f00000000;
	cvt.rzi.s32.f32 	%r274, %f432;
	fma.rn.f32 	%f437, %f435, %f434, 0fC0A55DF6;
	fma.rn.f32 	%f438, %f436, %f434, 0f4081E0CF;
	fma.rn.f32 	%f439, %f434, %f433, 0f00000000;
	cvt.rzi.s32.f32 	%r284, %f466;
	fma.rn.f32 	%f471, %f469, %f468, 0fC0A55DF6;
	fma.rn.f32 	%f472, %f470, %f468, 0f4081E0CF;
	fma.rn.f32 	%f473, %f468, %f467, 0f00000000;
	cvt.rzi.s32.f32 	%r306, %f518;
	fma.rn.f32 	%f523, %f521, %f520, 0fC0A55DF6;
	fma.rn.f32 	%f524, %f522, %f520, 0f4081E0CF;
	fma.rn.f32 	%f525, %f520, %f519, 0f00000000;
	cvt.rzi.s32.f32 	%r337, %f569;
	fma.rn.f32 	%f574, %f572, %f571, 0fC0A55DF6;
	fma.rn.f32 	%f575, %f573, %f571, 0f4081E0CF;
	fma.rn.f32 	%f576, %f571, %f570, 0f00000000;
	mul.f32 	%f624, %f623, %f623;
	mul.f32 	%f675, %f674, %f674;
	selp.f32 	%f725, %f724, %f723, %p174;
	and.b32  	%r102, %r101, 8;
	shl.b32 	%r180, %r1, 4;
	and.b32  	%r108, %r4, 18;
	fma.rn.f32 	%f169, %f167, %f163, 0fC09DE9E6;
	fma.rn.f32 	%f170, %f166, %f168, 0f00000000;
	and.b32  	%r197, %r196, 1;
	fma.rn.f32 	%f203, %f201, %f197, 0fC09DE9E6;
	fma.rn.f32 	%f204, %f200, %f202, 0f00000000;
	and.b32  	%r204, %r203, 1;
	fma.rn.f32 	%f238, %f236, %f232, 0fC09DE9E6;
	fma.rn.f32 	%f239, %f235, %f237, 0f00000000;
	and.b32  	%r215, %r214, 1;
	fma.rn.f32 	%f272, %f270, %f266, 0fC09DE9E6;
	fma.rn.f32 	%f273, %f269, %f271, 0f00000000;
	and.b32  	%r222, %r221, 1;
	fma.rn.f32 	%f307, %f305, %f301, 0fC09DE9E6;
	fma.rn.f32 	%f308, %f304, %f306, 0f00000000;
	and.b32  	%r233, %r232, 1;
	fma.rn.f32 	%f341, %f339, %f335, 0fC09DE9E6;
	fma.rn.f32 	%f342, %f338, %f340, 0f00000000;
	and.b32  	%r240, %r239, 1;
	fma.rn.f32 	%f376, %f374, %f370, 0fC09DE9E6;
	fma.rn.f32 	%f377, %f373, %f375, 0f00000000;
	and.b32  	%r251, %r250, 1;
	fma.rn.f32 	%f410, %f408, %f404, 0fC09DE9E6;
	fma.rn.f32 	%f411, %f407, %f409, 0f00000000;
	and.b32  	%r258, %r257, 1;
	fma.rn.f32 	%f440, %f438, %f434, 0fC09DE9E6;
	fma.rn.f32 	%f441, %f437, %f439, 0f00000000;
	and.b32  	%r275, %r274, 1;
	fma.rn.f32 	%f474, %f472, %f468, 0fC09DE9E6;
	fma.rn.f32 	%f475, %f471, %f473, 0f00000000;
	and.b32  	%r285, %r284, 1;
	fma.rn.f32 	%f526, %f524, %f520, 0fC09DE9E6;
	fma.rn.f32 	%f527, %f523, %f525, 0f00000000;
	and.b32  	%r307, %r306, 1;
	fma.rn.f32 	%f577, %f575, %f571, 0fC09DE9E6;
	fma.rn.f32 	%f578, %f574, %f576, 0f00000000;
	and.b32  	%r338, %r337, 1;
	fma.rn.f32 	%f625, %f624, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f626, %f624, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f676, %f675, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f677, %f675, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f726, %f725, 0fBF000000, %f830;
	and.b32  	%r104, %r180, 4032;
	shl.b32 	%r105, %r4, 2;
	or.b32  	%r181, %r108, %r102;
	fma.rn.f32 	%f171, %f169, %f163, 0f3F800000;
	fma.rn.f32 	%f172, %f162, 0f40490FDB, %f170;
	setp.eq.b32 	%p20, %r197, 1;
	fma.rn.f32 	%f205, %f203, %f197, 0f3F800000;
	fma.rn.f32 	%f206, %f196, 0f40490FDB, %f204;
	setp.eq.b32 	%p26, %r204, 1;
	fma.rn.f32 	%f240, %f238, %f232, 0f3F800000;
	fma.rn.f32 	%f241, %f231, 0f40490FDB, %f239;
	setp.eq.b32 	%p32, %r215, 1;
	fma.rn.f32 	%f274, %f272, %f266, 0f3F800000;
	fma.rn.f32 	%f275, %f265, 0f40490FDB, %f273;
	setp.eq.b32 	%p38, %r222, 1;
	fma.rn.f32 	%f309, %f307, %f301, 0f3F800000;
	fma.rn.f32 	%f310, %f300, 0f40490FDB, %f308;
	setp.eq.b32 	%p44, %r233, 1;
	fma.rn.f32 	%f343, %f341, %f335, 0f3F800000;
	fma.rn.f32 	%f344, %f334, 0f40490FDB, %f342;
	setp.eq.b32 	%p50, %r240, 1;
	fma.rn.f32 	%f378, %f376, %f370, 0f3F800000;
	fma.rn.f32 	%f379, %f369, 0f40490FDB, %f377;
	setp.eq.b32 	%p56, %r251, 1;
	fma.rn.f32 	%f412, %f410, %f404, 0f3F800000;
	fma.rn.f32 	%f413, %f403, 0f40490FDB, %f411;
	setp.eq.b32 	%p62, %r258, 1;
	fma.rn.f32 	%f442, %f440, %f434, 0f3F800000;
	fma.rn.f32 	%f443, %f433, 0f40490FDB, %f441;
	setp.eq.b32 	%p67, %r275, 1;
	fma.rn.f32 	%f476, %f474, %f468, 0f3F800000;
	fma.rn.f32 	%f477, %f467, 0f40490FDB, %f475;
	setp.eq.b32 	%p74, %r285, 1;
	fma.rn.f32 	%f528, %f526, %f520, 0f3F800000;
	fma.rn.f32 	%f529, %f519, 0f40490FDB, %f527;
	setp.eq.b32 	%p94, %r307, 1;
	fma.rn.f32 	%f579, %f577, %f571, 0f3F800000;
	fma.rn.f32 	%f580, %f570, 0f40490FDB, %f578;
	setp.eq.b32 	%p114, %r338, 1;
	cvt.rzi.s32.f32 	%r353, %f622;
	fma.rn.f32 	%f627, %f625, %f624, 0fC0A55DF6;
	fma.rn.f32 	%f628, %f626, %f624, 0f4081E0CF;
	fma.rn.f32 	%f629, %f624, %f623, 0f00000000;
	cvt.rzi.s32.f32 	%r375, %f673;
	fma.rn.f32 	%f678, %f676, %f675, 0fC0A55DF6;
	fma.rn.f32 	%f679, %f677, %f675, 0f4081E0CF;
	fma.rn.f32 	%f680, %f675, %f674, 0f00000000;
	mul.f32 	%f727, %f726, %f726;
	and.b32  	%r106, %r105, 4;
	or.b32  	%r182, %r181, %r104;
	selp.f32 	%f173, %f171, %f172, %p20;
	and.b32  	%r198, %r196, 2;
	mov.f32 	%f174, 0f00000000;
	selp.f32 	%f207, %f205, %f206, %p26;
	and.b32  	%r205, %r203, 2;
	selp.f32 	%f242, %f240, %f241, %p32;
	and.b32  	%r216, %r214, 2;
	selp.f32 	%f276, %f274, %f275, %p38;
	and.b32  	%r223, %r221, 2;
	selp.f32 	%f311, %f309, %f310, %p44;
	and.b32  	%r234, %r232, 2;
	selp.f32 	%f345, %f343, %f344, %p50;
	and.b32  	%r241, %r239, 2;
	selp.f32 	%f380, %f378, %f379, %p56;
	and.b32  	%r252, %r250, 2;
	selp.f32 	%f414, %f412, %f413, %p62;
	and.b32  	%r259, %r257, 2;
	selp.f32 	%f444, %f442, %f443, %p67;
	and.b32  	%r276, %r274, 2;
	selp.f32 	%f478, %f476, %f477, %p74;
	and.b32  	%r286, %r284, 2;
	selp.f32 	%f530, %f528, %f529, %p94;
	and.b32  	%r308, %r306, 2;
	selp.f32 	%f581, %f579, %f580, %p114;
	and.b32  	%r339, %r337, 2;
	fma.rn.f32 	%f630, %f628, %f624, 0fC09DE9E6;
	fma.rn.f32 	%f631, %f627, %f629, 0f00000000;
	and.b32  	%r354, %r353, 1;
	fma.rn.f32 	%f681, %f679, %f675, 0fC09DE9E6;
	fma.rn.f32 	%f682, %f678, %f680, 0f00000000;
	and.b32  	%r376, %r375, 1;
	fma.rn.f32 	%f728, %f727, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f729, %f727, 0f3E684E12, 0fBFAAD2E0;
	and.b32  	%r107, %r105, 32;
	or.b32  	%r183, %r182, %r106;
	setp.eq.s32 	%p21, %r198, 0;
	sub.f32 	%f175, %f174, %f173;
	setp.eq.s32 	%p27, %r205, 0;
	sub.f32 	%f209, %f174, %f207;
	setp.eq.s32 	%p33, %r216, 0;
	sub.f32 	%f244, %f174, %f242;
	setp.eq.s32 	%p39, %r223, 0;
	sub.f32 	%f278, %f174, %f276;
	setp.eq.s32 	%p45, %r234, 0;
	sub.f32 	%f313, %f174, %f311;
	setp.eq.s32 	%p51, %r241, 0;
	sub.f32 	%f347, %f174, %f345;
	setp.eq.s32 	%p57, %r252, 0;
	sub.f32 	%f382, %f174, %f380;
	setp.eq.s32 	%p63, %r259, 0;
	sub.f32 	%f416, %f174, %f414;
	setp.eq.s32 	%p68, %r276, 0;
	neg.f32 	%f446, %f444;
	add.s32 	%r277, %r274, 1;
	cvt.rzi.f32.f32 	%f451, %f424;
	setp.eq.s32 	%p75, %r286, 0;
	neg.f32 	%f480, %f478;
	add.s32 	%r287, %r284, 1;
	cvt.rzi.f32.f32 	%f484, %f458;
	setp.eq.s32 	%p95, %r308, 0;
	neg.f32 	%f532, %f530;
	add.s32 	%r309, %r306, 1;
	cvt.rzi.f32.f32 	%f537, %f822;
	setp.eq.s32 	%p115, %r339, 0;
	neg.f32 	%f583, %f581;
	add.s32 	%r340, %r337, 1;
	cvt.rzi.f32.f32 	%f588, %f810;
	fma.rn.f32 	%f632, %f630, %f624, 0f3F800000;
	fma.rn.f32 	%f633, %f623, 0f40490FDB, %f631;
	setp.eq.b32 	%p134, %r354, 1;
	fma.rn.f32 	%f683, %f681, %f675, 0f3F800000;
	fma.rn.f32 	%f684, %f674, 0f40490FDB, %f682;
	setp.eq.b32 	%p155, %r376, 1;
	cvt.rzi.s32.f32 	%r389, %f725;
	fma.rn.f32 	%f730, %f728, %f727, 0fC0A55DF6;
	fma.rn.f32 	%f731, %f729, %f727, 0f4081E0CF;
	fma.rn.f32 	%f732, %f727, %f726, 0f00000000;
	or.b32  	%r184, %r183, %r107;
	selp.f32 	%f176, %f173, %f175, %p21;
	selp.f32 	%f210, %f207, %f209, %p27;
	selp.f32 	%f245, %f242, %f244, %p33;
	selp.f32 	%f279, %f276, %f278, %p39;
	selp.f32 	%f314, %f311, %f313, %p45;
	selp.f32 	%f348, %f345, %f347, %p51;
	selp.f32 	%f383, %f380, %f382, %p57;
	selp.f32 	%f417, %f414, %f416, %p63;
	selp.f32 	%f445, %f443, %f442, %p67;
	selp.f32 	%f447, %f444, %f446, %p68;
	and.b32  	%r278, %r277, 2;
	setp.eq.f32 	%p70, %f451, %f424;
	mul.f32 	%f452, %f424, 0f00000000;
	selp.f32 	%f479, %f477, %f476, %p74;
	selp.f32 	%f481, %f478, %f480, %p75;
	and.b32  	%r288, %r287, 2;
	setp.eq.f32 	%p77, %f484, %f458;
	mul.f32 	%f485, %f458, 0f00000000;
	selp.f32 	%f531, %f529, %f528, %p94;
	selp.f32 	%f533, %f530, %f532, %p95;
	and.b32  	%r310, %r309, 2;
	setp.eq.f32 	%p97, %f537, %f822;
	mul.f32 	%f538, %f822, 0f00000000;
	selp.f32 	%f582, %f580, %f579, %p114;
	selp.f32 	%f584, %f581, %f583, %p115;
	and.b32  	%r341, %r340, 2;
	setp.eq.f32 	%p117, %f588, %f810;
	mul.f32 	%f589, %f810, 0f00000000;
	selp.f32 	%f634, %f632, %f633, %p134;
	and.b32  	%r355, %r353, 2;
	selp.f32 	%f685, %f683, %f684, %p155;
	and.b32  	%r377, %r375, 2;
	fma.rn.f32 	%f733, %f731, %f727, 0fC09DE9E6;
	fma.rn.f32 	%f734, %f730, %f732, 0f00000000;
	and.b32  	%r390, %r389, 1;
	shr.u32 	%r185, %r184, 1;
	mul.f32 	%f86, %f176, %f176;
	mul.f32 	%f4, %f210, %f210;
	mul.f32 	%f8, %f245, %f245;
	mul.f32 	%f13, %f279, %f279;
	mul.f32 	%f17, %f314, %f314;
	mul.f32 	%f22, %f348, %f348;
	mul.f32 	%f26, %f383, %f383;
	mul.f32 	%f31, %f417, %f417;
	setp.eq.s32 	%p69, %r278, 0;
	sub.f32 	%f449, %f174, %f445;
	selp.f32 	%f453, %f452, %f447, %p70;
	abs.f32 	%f454, %f424;
	setp.eq.s32 	%p76, %r288, 0;
	sub.f32 	%f482, %f174, %f479;
	selp.f32 	%f486, %f485, %f481, %p77;
	abs.f32 	%f487, %f458;
	setp.eq.s32 	%p96, %r310, 0;
	sub.f32 	%f535, %f174, %f531;
	selp.f32 	%f103, %f538, %f533, %p97;
	abs.f32 	%f539, %f822;
	setp.eq.s32 	%p116, %r341, 0;
	sub.f32 	%f586, %f174, %f582;
	selp.f32 	%f590, %f589, %f584, %p117;
	abs.f32 	%f591, %f810;
	setp.eq.s32 	%p135, %r355, 0;
	neg.f32 	%f636, %f634;
	add.s32 	%r356, %r353, 1;
	cvt.rzi.f32.f32 	%f641, %f826;
	setp.eq.s32 	%p156, %r377, 0;
	neg.f32 	%f687, %f685;
	add.s32 	%r378, %r375, 1;
	cvt.rzi.f32.f32 	%f692, %f814;
	fma.rn.f32 	%f735, %f733, %f727, 0f3F800000;
	fma.rn.f32 	%f736, %f726, 0f40490FDB, %f734;
	setp.eq.b32 	%p175, %r390, 1;
	ld.param.u64 	%rd1, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mul.wide.u32 	%rd44, %r185, 4;
	mul.f32 	%f180, %f86, 0f3C0AF64E;
	mul.f32 	%f214, %f4, 0f3C0AF64E;
	mul.f32 	%f249, %f8, 0f3C0AF64E;
	mul.f32 	%f283, %f13, 0f3C0AF64E;
	mul.f32 	%f318, %f17, 0f3C0AF64E;
	mul.f32 	%f352, %f22, 0f3C0AF64E;
	mul.f32 	%f387, %f26, 0f3C0AF64E;
	mul.f32 	%f420, %f31, 0f3C0AF64E;
	selp.f32 	%f450, %f445, %f449, %p69;
	setp.gt.f32 	%p71, %f454, 0f4B800000;
	add.f32 	%f455, %f453, 0f3F800000;
	selp.f32 	%f483, %f479, %f482, %p76;
	setp.gt.f32 	%p78, %f487, 0f4B800000;
	add.f32 	%f488, %f486, 0f3F800000;
	selp.f32 	%f536, %f531, %f535, %p96;
	setp.gt.f32 	%p98, %f539, 0f4B800000;
	add.f32 	%f540, %f103, 0f3F800000;
	selp.f32 	%f587, %f582, %f586, %p116;
	setp.gt.f32 	%p118, %f591, 0f4B800000;
	add.f32 	%f592, %f590, 0f3F800000;
	selp.f32 	%f635, %f633, %f632, %p134;
	selp.f32 	%f637, %f634, %f636, %p135;
	and.b32  	%r357, %r356, 2;
	setp.eq.f32 	%p137, %f641, %f826;
	mul.f32 	%f642, %f826, 0f00000000;
	selp.f32 	%f686, %f684, %f683, %p155;
	selp.f32 	%f688, %f685, %f687, %p156;
	and.b32  	%r379, %r378, 2;
	setp.eq.f32 	%p158, %f692, %f814;
	mul.f32 	%f693, %f814, 0f00000000;
	selp.f32 	%f737, %f735, %f736, %p175;
	and.b32  	%r391, %r389, 2;
	add.s64 	%rd45, %rd1, %rd44;
	mul.f32 	%f3, %f180, %f800;
	mul.f32 	%f215, %f214, %f801;
	mul.f32 	%f12, %f249, %f802;
	mul.f32 	%f284, %f283, %f803;
	mul.f32 	%f21, %f318, %f804;
	mul.f32 	%f353, %f352, %f805;
	mul.f32 	%f30, %f387, %f806;
	mul.f32 	%f421, %f420, %f807;
	selp.f32 	%f456, %f455, %f450, %p71;
	selp.f32 	%f489, %f488, %f483, %p78;
	selp.f32 	%f104, %f540, %f536, %p98;
	selp.f32 	%f593, %f592, %f587, %p118;
	setp.eq.s32 	%p136, %r357, 0;
	sub.f32 	%f639, %f174, %f635;
	selp.f32 	%f123, %f642, %f637, %p137;
	abs.f32 	%f643, %f826;
	setp.eq.s32 	%p157, %r379, 0;
	sub.f32 	%f690, %f174, %f686;
	selp.f32 	%f694, %f693, %f688, %p158;
	abs.f32 	%f695, %f814;
	setp.eq.s32 	%p176, %r391, 0;
	neg.f32 	%f739, %f737;
	add.s32 	%r392, %r389, 1;
	cvt.rzi.f32.f32 	%f744, %f830;
	ld.param.u64 	%rd2, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	ld.param.u64 	%rd3, [_Z6upchan5Int32S_S_S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	and.b32  	%r103, %r4, 16;
	ld.global.u32 	%r109, [%rd45];
	mov.b32 	%r208, %f215;
	mov.b32 	%r207, %f3;
	mov.b32 	%r226, %f284;
	mov.b32 	%r225, %f12;
	mov.b32 	%r244, %f353;
	mov.b32 	%r243, %f21;
	mov.b32 	%r262, %f421;
	mov.b32 	%r261, %f30;
	mov.b32 	%r264, %f456;
	mov.b32 	%r265, %f489;
	mov.b32 	%r267, %f453;
	mov.b32 	%r268, %f486;
	mov.b32 	%r324, %f593;
	mov.b32 	%r323, %f104;
	mov.b32 	%r330, %f590;
	mov.b32 	%r329, %f103;
	selp.f32 	%f640, %f635, %f639, %p136;
	setp.gt.f32 	%p138, %f643, 0f4B800000;
	add.f32 	%f644, %f123, 0f3F800000;
	selp.f32 	%f691, %f686, %f690, %p157;
	setp.gt.f32 	%p159, %f695, 0f4B800000;
	add.f32 	%f696, %f694, 0f3F800000;
	selp.f32 	%f738, %f736, %f735, %p175;
	selp.f32 	%f740, %f737, %f739, %p176;
	and.b32  	%r393, %r392, 2;
	setp.eq.f32 	%p178, %f744, %f830;
	mul.f32 	%f745, %f830, 0f00000000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r206, %r208, %r207;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r224, %r226, %r225;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r242, %r244, %r243;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r260, %r262, %r261;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r263, %r265, %r264;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r266, %r268, %r267;
	// end inline asm
	xor.b32  	%r327, %r330, -2147483648;
	xor.b32  	%r326, %r329, -2147483648;
	selp.f32 	%f124, %f644, %f640, %p138;
	selp.f32 	%f697, %f696, %f691, %p159;
	setp.eq.s32 	%p177, %r393, 0;
	sub.f32 	%f742, %f174, %f738;
	selp.f32 	%f142, %f745, %f740, %p178;
	abs.f32 	%f746, %f830;
	// begin inline asm
	cvt.rn.f16x2.f32 %r322, %r324, %r323;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r325, %r327, %r326;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r328, %r330, %r329;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r331, %r324, %r323;
	// end inline asm
	mov.b32 	%r368, %f697;
	mov.b32 	%r367, %f124;
	mov.b32 	%r371, %f694;
	mov.b32 	%r370, %f123;
	selp.f32 	%f743, %f738, %f742, %p177;
	setp.gt.f32 	%p179, %f746, 0f4B800000;
	add.f32 	%f747, %f142, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r366, %r368, %r367;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r369, %r371, %r370;
	// end inline asm
	selp.f32 	%f143, %f747, %f743, %p179;
	add.f32 	%f768, %f818, %f818;
	mov.b32 	%r412, %f768;
	and.b32  	%r413, %r412, -2147483648;
	or.b32  	%r414, %r413, 1056964608;
	mov.b32 	%f769, %r414;
	add.f32 	%f770, %f768, %f769;
	cvt.rzi.f32.f32 	%f771, %f770;
	abs.f32 	%f772, %f768;
	setp.gt.f32 	%p192, %f772, 0f4B000000;
	selp.f32 	%f773, %f768, %f771, %p192;
	cvt.rzi.f32.f32 	%f774, %f768;
	setp.lt.f32 	%p193, %f772, 0f3F000000;
	selp.f32 	%f775, %f774, %f773, %p193;
	cvt.rzi.s32.f32 	%r415, %f775;
	fma.rn.f32 	%f776, %f775, 0fBF000000, %f818;
	mul.f32 	%f777, %f776, %f776;
	fma.rn.f32 	%f778, %f777, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f779, %f777, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f780, %f778, %f777, 0fC0A55DF6;
	fma.rn.f32 	%f781, %f779, %f777, 0f4081E0CF;
	fma.rn.f32 	%f782, %f777, %f776, 0f00000000;
	fma.rn.f32 	%f783, %f781, %f777, 0fC09DE9E6;
	fma.rn.f32 	%f784, %f780, %f782, 0f00000000;
	fma.rn.f32 	%f785, %f783, %f777, 0f3F800000;
	fma.rn.f32 	%f786, %f776, 0f40490FDB, %f784;
	and.b32  	%r416, %r415, 1;
	setp.eq.b32 	%p194, %r416, 1;
	selp.f32 	%f787, %f785, %f786, %p194;
	selp.f32 	%f788, %f786, %f785, %p194;
	and.b32  	%r417, %r415, 2;
	setp.eq.s32 	%p195, %r417, 0;
	neg.f32 	%f789, %f787;
	selp.f32 	%f790, %f787, %f789, %p195;
	add.s32 	%r418, %r415, 1;
	and.b32  	%r419, %r418, 2;
	setp.eq.s32 	%p196, %r419, 0;
	sub.f32 	%f792, %f174, %f788;
	selp.f32 	%f793, %f788, %f792, %p196;
	cvt.rzi.f32.f32 	%f794, %f818;
	setp.eq.f32 	%p197, %f794, %f818;
	mul.f32 	%f795, %f818, 0f00000000;
	selp.f32 	%f796, %f795, %f790, %p197;
	abs.f32 	%f797, %f818;
	setp.gt.f32 	%p198, %f797, 0f4B800000;
	add.f32 	%f798, %f796, 0f3F800000;
	selp.f32 	%f799, %f798, %f793, %p198;
	mov.b32 	%r402, %f799;
	mov.b32 	%r401, %f143;
	// begin inline asm
	cvt.rn.f16x2.f32 %r400, %r402, %r401;
	// end inline asm
	mov.b32 	%r408, %f796;
	xor.b32  	%r405, %r408, -2147483648;
	mov.b32 	%r407, %f142;
	xor.b32  	%r404, %r407, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r403, %r405, %r404;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r406, %r408, %r407;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r409, %r402, %r401;
	// end inline asm
	shl.b32 	%r421, %r164, 13;
	shl.b32 	%r422, %r168, 7;
	or.b32  	%r423, %r103, %r2;
	or.b32  	%r50, %r423, %r107;
	shl.b32 	%r424, %r1, 5;
	and.b32  	%r425, %r105, 28;
	and.b32  	%r426, %r424, 32;
	or.b32  	%r427, %r426, %r425;
	and.b32  	%r428, %r424, 64;
	or.b32  	%r429, %r421, %r428;
	or.b32  	%r430, %r429, %r427;
	add.s32 	%r51, %r430, %r422;
	and.b32  	%r52, %r4, 8;
	shl.b32 	%r431, %r4, 4;
	or.b32  	%r432, %r431, %r52;
	shr.u32 	%r433, %r432, 2;
	and.b32  	%r434, %r433, 30;
	and.b32  	%r435, %r4, 4;
	or.b32  	%r54, %r435, %r114;
	shr.u32 	%r55, %r2, 1;
	and.b32  	%r56, %r3, 32;
	or.b32  	%r57, %r55, 8;
	or.b32  	%r436, %r56, %r55;
	or.b32  	%r58, %r436, 16;
	or.b32  	%r59, %r436, 24;
	or.b32  	%r437, %r108, %r104;
	or.b32  	%r438, %r437, %r106;
	or.b32  	%r439, %r438, %r102;
	or.b32  	%r440, %r439, %r107;
	bfe.u32 	%r441, %r440, 1, 5;
	mul.lo.s32 	%r442, %r441, 65;
	add.s32 	%r443, %r442, %r436;
	or.b32  	%r444, %r57, %r56;
	add.s32 	%r445, %r442, %r444;
	add.s32 	%r446, %r442, %r58;
	add.s32 	%r447, %r442, %r59;
	shl.b32 	%r448, %r2, 1;
	or.b32  	%r449, %r448, %r112;
	mul.lo.s32 	%r450, %r449, 65;
	add.s32 	%r451, %r434, %r450;
	mul.wide.u32 	%rd46, %r451, 4;
	mov.u64 	%rd47, shmem;
	add.s64 	%rd5, %rd47, %rd46;
	cvt.u64.u32 	%rd48, %r434;
	cvt.u64.u32 	%rd49, %r450;
	add.s64 	%rd50, %rd49, %rd48;
	shl.b64 	%rd51, %rd50, 2;
	add.s64 	%rd6, %rd47, %rd51;
	shl.b32 	%r452, %r166, 19;
	add.s32 	%r453, %r452, -1572864;
	or.b32  	%r454, %r104, %r114;
	shl.b32 	%r455, %r2, 9;
	shl.b32 	%r456, %r454, 7;
	or.b32  	%r457, %r455, %r456;
	or.b32  	%r458, %r427, %r457;
	or.b32  	%r60, %r458, %r428;
	cvt.s64.s32 	%rd7, %r453;
	and.b32  	%r459, %r2, 1;
	neg.s32 	%r460, %r459;
	setp.eq.b32 	%p200, %r459, 1;
	and.b32  	%r461, %r460, 1040;
	bfe.s32 	%r462, %r2, 2, 1;
	and.b32  	%r463, %r2, 4;
	setp.eq.s32 	%p201, %r463, 0;
	and.b32  	%r464, %r462, 260;
	mul.lo.s32 	%r465, %r112, 65;
	bfe.s32 	%r466, %r2, 1, 1;
	and.b32  	%r467, %r2, 2;
	setp.eq.s32 	%p202, %r467, 0;
	and.b32  	%r468, %r466, 520;
	shr.u32 	%r469, %r2, 3;
	mul.lo.s32 	%r470, %r469, 130;
	add.s32 	%r471, %r461, %r434;
	add.s32 	%r472, %r471, %r464;
	add.s32 	%r473, %r472, %r465;
	add.s32 	%r474, %r473, %r468;
	add.s32 	%r475, %r474, %r470;
	mul.wide.u32 	%rd52, %r475, 4;
	add.s64 	%rd8, %rd47, %rd52;
	cvt.u64.u32 	%rd53, %r470;
	selp.b64 	%rd54, 0, 520, %p202;
	cvt.u64.u32 	%rd55, %r465;
	selp.b64 	%rd56, 0, 260, %p201;
	selp.b64 	%rd57, 1040, 0, %p200;
	add.s64 	%rd58, %rd48, %rd57;
	add.s64 	%rd59, %rd58, %rd56;
	add.s64 	%rd60, %rd59, %rd55;
	add.s64 	%rd61, %rd60, %rd54;
	add.s64 	%rd62, %rd61, %rd53;
	shl.b64 	%rd63, %rd62, 2;
	add.s64 	%rd9, %rd47, %rd63;
	cvt.u64.u32 	%rd64, %r471;
	add.s64 	%rd65, %rd64, %rd56;
	add.s64 	%rd66, %rd65, %rd55;
	add.s64 	%rd67, %rd66, %rd54;
	add.s64 	%rd68, %rd67, %rd53;
	shl.b64 	%rd69, %rd68, 2;
	add.s64 	%rd10, %rd47, %rd69;
	add.s32 	%r476, %r475, 2113;
	mul.wide.u32 	%rd70, %r476, 4;
	add.s64 	%rd11, %rd47, %rd70;
	add.s32 	%r477, %r475, 2082;
	mul.wide.u32 	%rd71, %r477, 4;
	add.s64 	%rd12, %rd47, %rd71;
	add.s32 	%r478, %r475, 2114;
	mul.wide.u32 	%rd72, %r478, 4;
	add.s64 	%rd13, %rd47, %rd72;
	add.s32 	%r479, %r475, 4194;
	mul.wide.u32 	%rd73, %r479, 4;
	add.s64 	%rd14, %rd47, %rd73;
	add.s32 	%r480, %r475, 4163;
	mul.wide.u32 	%rd74, %r480, 4;
	add.s64 	%rd15, %rd47, %rd74;
	add.s32 	%r481, %r475, 4195;
	mul.wide.u32 	%rd75, %r481, 4;
	add.s64 	%rd16, %rd47, %rd75;
	add.s32 	%r482, %r475, 6275;
	mul.wide.u32 	%rd76, %r482, 4;
	add.s64 	%rd17, %rd47, %rd76;
	add.s32 	%r483, %r475, 6244;
	mul.wide.u32 	%rd77, %r483, 4;
	add.s64 	%rd18, %rd47, %rd77;
	add.s32 	%r484, %r475, 6276;
	mul.wide.u32 	%rd78, %r484, 4;
	add.s64 	%rd19, %rd47, %rd78;
	mul.wide.u32 	%rd79, %r447, 4;
	add.s64 	%rd20, %rd47, %rd79;
	mul.wide.u32 	%rd80, %r446, 4;
	add.s64 	%rd21, %rd47, %rd80;
	mul.wide.u32 	%rd81, %r445, 4;
	add.s64 	%rd22, %rd47, %rd81;
	mul.wide.u32 	%rd82, %r443, 4;
	add.s64 	%rd23, %rd47, %rd82;
	setp.eq.s32 	%p203, %r52, 0;
	mov.u16 	%rs1176, 25600;
	mov.u16 	%rs1072, 21504;
	mov.u16 	%rs1184, 18432;
	mov.u16 	%rs1142, -14592;
	mov.u32 	%r7989, %r7968;
	mov.u32 	%r7990, %r7968;
	mov.u32 	%r7991, %r7968;
	mov.u32 	%r7992, %r7968;
	mov.u32 	%r7993, %r7968;
	mov.u32 	%r7994, %r7968;
	mov.u32 	%r7995, %r7968;
	mov.u32 	%r7996, %r7968;
	mov.u32 	%r7997, %r7968;
	mov.u32 	%r7998, %r7968;
	mov.u32 	%r7999, %r7968;
	mov.u32 	%r8000, %r7968;
	mov.u32 	%r73, %r7968;
	bra.uni 	$L__BB0_83;
$L__BB0_91:                             // %pass16860
                                        //   in Loop: Header=BB0_83 Depth=1
	or.b32  	%r7962, %r7969, 1572864;
	add.s32 	%r7963, %r60, %r7962;
	cvt.s64.s32 	%rd136, %r7963;
	add.s64 	%rd137, %rd136, %rd7;
	shr.u64 	%rd138, %rd137, 36;
	add.s64 	%rd139, %rd137, %rd138;
	shr.s64 	%rd140, %rd139, 28;
	setp.lt.s64 	%p231, %rd137, 0;
	and.b64  	%rd141, %rd139, -268435456;
	setp.ne.s64 	%p232, %rd141, %rd137;
	and.pred  	%p233, %p231, %p232;
	selp.u64 	%rd142, 1, 0, %p233;
	sub.s64 	%rd143, %rd142, %rd140;
	shl.b64 	%rd144, %rd143, 28;
	add.s64 	%rd145, %rd144, %rd137;
	shl.b64 	%rd146, %rd145, 2;
	add.s64 	%rd147, %rd3, %rd146;
	st.global.v4.u32 	[%rd147], {%r159, %r161, %r160, %r162};
	setp.ne.s32 	%p234, %r73, 32512;
	add.s32 	%r73, %r73, 256;
	add.s32 	%r7964, %r73, %r164;
	setp.lt.s32 	%p235, %r7964, %r165;
	and.pred  	%p236, %p234, %p235;
	@%p236 bra 	$L__BB0_83;
	bra.uni 	$L__BB0_92;
$L__BB0_83:                             // %L1450
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_84 Depth 2
	and.b32  	%r74, %r73, 32512;
	or.b32  	%r550, %r50, %r74;
	shl.b32 	%r551, %r550, 13;
	add.s32 	%r552, %r51, %r551;
	shr.s32 	%r553, %r552, 31;
	shr.u32 	%r554, %r553, 4;
	add.s32 	%r555, %r552, %r554;
	shr.s32 	%r556, %r555, 28;
	setp.lt.s32 	%p204, %r552, 0;
	and.b32  	%r557, %r555, -268435456;
	setp.ne.s32 	%p205, %r557, %r552;
	and.pred  	%p206, %p204, %p205;
	selp.u32 	%r558, 1, 0, %p206;
	sub.s32 	%r559, %r558, %r556;
	shl.b32 	%r560, %r559, 28;
	add.s32 	%r561, %r560, %r552;
	mul.wide.s32 	%rd83, %r561, 4;
	add.s64 	%rd84, %rd2, %rd83;
	ld.global.v4.u32 	{%r562, %r563, %r564, %r565}, [%rd84];
	or.b32  	%r566, %r551, 524288;
	add.s32 	%r567, %r51, %r566;
	shr.s32 	%r568, %r567, 31;
	shr.u32 	%r569, %r568, 4;
	add.s32 	%r570, %r567, %r569;
	shr.s32 	%r571, %r570, 28;
	setp.lt.s32 	%p207, %r567, 0;
	and.b32  	%r572, %r570, -268435456;
	setp.ne.s32 	%p208, %r572, %r567;
	and.pred  	%p209, %p207, %p208;
	selp.u32 	%r573, 1, 0, %p209;
	sub.s32 	%r574, %r573, %r571;
	shl.b32 	%r575, %r574, 28;
	add.s32 	%r576, %r575, %r567;
	mul.wide.s32 	%rd85, %r576, 4;
	add.s64 	%rd86, %rd2, %rd85;
	ld.global.v4.u32 	{%r577, %r578, %r579, %r580}, [%rd86];
	or.b32  	%r581, %r551, 1048576;
	add.s32 	%r582, %r51, %r581;
	shr.s32 	%r583, %r582, 31;
	shr.u32 	%r584, %r583, 4;
	add.s32 	%r585, %r582, %r584;
	shr.s32 	%r586, %r585, 28;
	setp.lt.s32 	%p210, %r582, 0;
	and.b32  	%r587, %r585, -268435456;
	setp.ne.s32 	%p211, %r587, %r582;
	and.pred  	%p212, %p210, %p211;
	selp.u32 	%r588, 1, 0, %p212;
	sub.s32 	%r589, %r588, %r586;
	shl.b32 	%r590, %r589, 28;
	add.s32 	%r591, %r590, %r582;
	mul.wide.s32 	%rd87, %r591, 4;
	add.s64 	%rd88, %rd2, %rd87;
	ld.global.v4.u32 	{%r592, %r593, %r594, %r595}, [%rd88];
	or.b32  	%r596, %r551, 1572864;
	add.s32 	%r597, %r51, %r596;
	shr.s32 	%r598, %r597, 31;
	shr.u32 	%r599, %r598, 4;
	add.s32 	%r600, %r597, %r599;
	shr.s32 	%r601, %r600, 28;
	setp.lt.s32 	%p213, %r597, 0;
	and.b32  	%r602, %r600, -268435456;
	setp.ne.s32 	%p214, %r602, %r597;
	and.pred  	%p215, %p213, %p214;
	selp.u32 	%r603, 1, 0, %p215;
	sub.s32 	%r604, %r603, %r601;
	shl.b32 	%r605, %r604, 28;
	add.s32 	%r606, %r605, %r597;
	mul.wide.s32 	%rd89, %r606, 4;
	add.s64 	%rd90, %rd2, %rd89;
	ld.global.v4.u32 	{%r607, %r608, %r609, %r610}, [%rd90];
	selp.b32 	%r611, %r564, %r562, %p203;
	shfl.sync.bfly.b32	%r612, %r611, 8, 31, -1;
	selp.b32 	%r486, %r562, %r612, %p203;
	selp.b32 	%r487, %r612, %r564, %p203;
	selp.b32 	%r613, %r565, %r563, %p203;
	shfl.sync.bfly.b32	%r614, %r613, 8, 31, -1;
	selp.b32 	%r494, %r563, %r614, %p203;
	selp.b32 	%r495, %r614, %r565, %p203;
	selp.b32 	%r615, %r579, %r577, %p203;
	shfl.sync.bfly.b32	%r616, %r615, 8, 31, -1;
	selp.b32 	%r502, %r577, %r616, %p203;
	selp.b32 	%r503, %r616, %r579, %p203;
	selp.b32 	%r617, %r580, %r578, %p203;
	shfl.sync.bfly.b32	%r618, %r617, 8, 31, -1;
	selp.b32 	%r510, %r578, %r618, %p203;
	selp.b32 	%r511, %r618, %r580, %p203;
	selp.b32 	%r619, %r594, %r592, %p203;
	shfl.sync.bfly.b32	%r620, %r619, 8, 31, -1;
	selp.b32 	%r518, %r592, %r620, %p203;
	selp.b32 	%r519, %r620, %r594, %p203;
	selp.b32 	%r621, %r595, %r593, %p203;
	shfl.sync.bfly.b32	%r622, %r621, 8, 31, -1;
	selp.b32 	%r526, %r593, %r622, %p203;
	selp.b32 	%r527, %r622, %r595, %p203;
	selp.b32 	%r623, %r609, %r607, %p203;
	shfl.sync.bfly.b32	%r624, %r623, 8, 31, -1;
	selp.b32 	%r534, %r607, %r624, %p203;
	selp.b32 	%r535, %r624, %r609, %p203;
	selp.b32 	%r625, %r610, %r608, %p203;
	shfl.sync.bfly.b32	%r626, %r625, 8, 31, -1;
	selp.b32 	%r542, %r608, %r626, %p203;
	selp.b32 	%r543, %r626, %r610, %p203;
	mov.u32 	%r544, 21520;
	// begin inline asm
	prmt.b32 %r485, %r486, %r487, %r544;
	// end inline asm
	mov.u32 	%r548, 30258;
	// begin inline asm
	prmt.b32 %r489, %r486, %r487, %r548;
	// end inline asm
	// begin inline asm
	prmt.b32 %r493, %r494, %r495, %r544;
	// end inline asm
	// begin inline asm
	prmt.b32 %r497, %r494, %r495, %r548;
	// end inline asm
	// begin inline asm
	prmt.b32 %r501, %r502, %r503, %r544;
	// end inline asm
	// begin inline asm
	prmt.b32 %r505, %r502, %r503, %r548;
	// end inline asm
	// begin inline asm
	prmt.b32 %r509, %r510, %r511, %r544;
	// end inline asm
	// begin inline asm
	prmt.b32 %r513, %r510, %r511, %r548;
	// end inline asm
	// begin inline asm
	prmt.b32 %r517, %r518, %r519, %r544;
	// end inline asm
	// begin inline asm
	prmt.b32 %r521, %r518, %r519, %r548;
	// end inline asm
	// begin inline asm
	prmt.b32 %r525, %r526, %r527, %r544;
	// end inline asm
	// begin inline asm
	prmt.b32 %r529, %r526, %r527, %r548;
	// end inline asm
	// begin inline asm
	prmt.b32 %r533, %r534, %r535, %r544;
	// end inline asm
	// begin inline asm
	prmt.b32 %r537, %r534, %r535, %r548;
	// end inline asm
	// begin inline asm
	prmt.b32 %r541, %r542, %r543, %r544;
	// end inline asm
	// begin inline asm
	prmt.b32 %r545, %r542, %r543, %r548;
	// end inline asm
	st.shared.u32 	[%rd8], %r485;
	st.shared.u32 	[%rd9+128], %r489;
	st.shared.u32 	[%rd9+4], %r493;
	st.shared.u32 	[%rd9+132], %r497;
	st.shared.u32 	[%rd10+8324], %r501;
	st.shared.u32 	[%rd11], %r505;
	st.shared.u32 	[%rd12], %r509;
	st.shared.u32 	[%rd13], %r513;
	st.shared.u32 	[%rd10+16648], %r517;
	st.shared.u32 	[%rd14], %r521;
	st.shared.u32 	[%rd15], %r525;
	st.shared.u32 	[%rd16], %r529;
	st.shared.u32 	[%rd10+24972], %r533;
	st.shared.u32 	[%rd17], %r537;
	st.shared.u32 	[%rd18], %r541;
	st.shared.u32 	[%rd19], %r545;
	bar.sync 	0;
	mov.u64 	%rd152, %rd23;
	mov.u64 	%rd153, %rd22;
	mov.u64 	%rd154, %rd21;
	mov.u64 	%rd155, %rd20;
	mov.u32 	%r8001, %r7968;
$L__BB0_84:                             // %L11771
                                        //   Parent Loop BB0_83 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	or.b32  	%r7811, %r8001, %r188;
	or.b32  	%r7812, %r54, %r7811;
	add.s32 	%r7813, %r7812, %r73;
	and.b32  	%r7814, %r7813, 1;
	neg.s32 	%r7815, %r7814;
	and.b32  	%r7816, %r7815, 1040;
	bfe.u32 	%r7817, %r7813, 6, 2;
	mul.lo.s32 	%r7818, %r7817, 2081;
	bfe.s32 	%r7819, %r7813, 2, 1;
	and.b32  	%r7820, %r7819, 260;
	bfe.s32 	%r7821, %r7813, 4, 1;
	and.b32  	%r7822, %r7821, 65;
	bfe.s32 	%r7823, %r7813, 1, 1;
	and.b32  	%r7824, %r7823, 520;
	bfe.s32 	%r7825, %r7813, 3, 1;
	and.b32  	%r7826, %r7825, 130;
	or.b32  	%r7827, %r7816, %r55;
	or.b32  	%r7828, %r7827, %r56;
	add.s32 	%r7829, %r7828, %r7818;
	add.s32 	%r7830, %r7829, %r7820;
	add.s32 	%r7831, %r7830, %r7822;
	add.s32 	%r7832, %r7831, %r7824;
	add.s32 	%r7833, %r7832, %r7826;
	mul.wide.u32 	%rd91, %r7833, 4;
	add.s64 	%rd93, %rd47, %rd91;
	ld.shared.u32 	%r7834, [%rd93];
	or.b32  	%r7835, %r57, %r7816;
	or.b32  	%r7836, %r7835, %r56;
	add.s32 	%r7837, %r7836, %r7818;
	add.s32 	%r7838, %r7837, %r7820;
	add.s32 	%r7839, %r7838, %r7822;
	add.s32 	%r7840, %r7839, %r7824;
	add.s32 	%r7841, %r7840, %r7826;
	mul.wide.u32 	%rd94, %r7841, 4;
	add.s64 	%rd95, %rd47, %rd94;
	ld.shared.u32 	%r7842, [%rd95];
	add.s32 	%r7843, %r58, %r7816;
	add.s32 	%r7844, %r7843, %r7818;
	add.s32 	%r7845, %r7844, %r7820;
	add.s32 	%r7846, %r7845, %r7822;
	add.s32 	%r7847, %r7846, %r7824;
	add.s32 	%r7848, %r7847, %r7826;
	mul.wide.u32 	%rd96, %r7848, 4;
	add.s64 	%rd97, %rd47, %rd96;
	ld.shared.u32 	%r7849, [%rd97];
	add.s32 	%r7850, %r59, %r7816;
	add.s32 	%r7851, %r7850, %r7818;
	add.s32 	%r7852, %r7851, %r7820;
	add.s32 	%r7853, %r7852, %r7822;
	add.s32 	%r7854, %r7853, %r7824;
	add.s32 	%r7855, %r7854, %r7826;
	mul.wide.u32 	%rd98, %r7855, 4;
	add.s64 	%rd99, %rd47, %rd98;
	ld.shared.u32 	%r7856, [%rd99];
	// begin inline asm
	mov.b32 %r632, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r643, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r631, %r7834, -2004318072;
	mov.u32 	%r630, 983055;
	// begin inline asm
	lop3.b32 %r629, %r630, %r631, %r632, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r633, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r634, %r632, %r633;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r637, %r629, %r634;
	// end inline asm
	mov.u32 	%r641, 15728880;
	// begin inline asm
	lop3.b32 %r640, %r641, %r631, %r643, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r644, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r645, %r643, %r644;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r648, %r640, %r645;
	// end inline asm
	shr.u32 	%r653, %r631, 8;
	// begin inline asm
	lop3.b32 %r651, %r630, %r653, %r632, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r655, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r656, %r632, %r655;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r659, %r651, %r656;
	// end inline asm
	// begin inline asm
	lop3.b32 %r662, %r641, %r653, %r643, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r666, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r667, %r643, %r666;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r670, %r662, %r667;
	// end inline asm
	// begin inline asm
	mov.b32 %r678, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r689, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r677, %r7842, -2004318072;
	// begin inline asm
	lop3.b32 %r675, %r630, %r677, %r678, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r679, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r680, %r678, %r679;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r683, %r675, %r680;
	// end inline asm
	// begin inline asm
	lop3.b32 %r686, %r641, %r677, %r689, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r690, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r691, %r689, %r690;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r694, %r686, %r691;
	// end inline asm
	shr.u32 	%r699, %r677, 8;
	// begin inline asm
	lop3.b32 %r697, %r630, %r699, %r678, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r701, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r702, %r678, %r701;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r705, %r697, %r702;
	// end inline asm
	// begin inline asm
	lop3.b32 %r708, %r641, %r699, %r689, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r712, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r713, %r689, %r712;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r716, %r708, %r713;
	// end inline asm
	// begin inline asm
	mov.b32 %r724, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r735, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r723, %r7849, -2004318072;
	// begin inline asm
	lop3.b32 %r721, %r630, %r723, %r724, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r725, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r726, %r724, %r725;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r729, %r721, %r726;
	// end inline asm
	// begin inline asm
	lop3.b32 %r732, %r641, %r723, %r735, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r736, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r737, %r735, %r736;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r740, %r732, %r737;
	// end inline asm
	shr.u32 	%r745, %r723, 8;
	// begin inline asm
	lop3.b32 %r743, %r630, %r745, %r724, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r747, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r748, %r724, %r747;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r751, %r743, %r748;
	// end inline asm
	// begin inline asm
	lop3.b32 %r754, %r641, %r745, %r735, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r758, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r759, %r735, %r758;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r762, %r754, %r759;
	// end inline asm
	// begin inline asm
	mov.b32 %r770, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r781, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r769, %r7856, -2004318072;
	// begin inline asm
	lop3.b32 %r767, %r630, %r769, %r770, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r771, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r772, %r770, %r771;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r775, %r767, %r772;
	// end inline asm
	// begin inline asm
	lop3.b32 %r778, %r641, %r769, %r781, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r782, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r783, %r781, %r782;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r786, %r778, %r783;
	// end inline asm
	shr.u32 	%r791, %r769, 8;
	// begin inline asm
	lop3.b32 %r789, %r630, %r791, %r770, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r793, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r794, %r770, %r793;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r797, %r789, %r794;
	// end inline asm
	// begin inline asm
	lop3.b32 %r800, %r641, %r791, %r781, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r804, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r805, %r781, %r804;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r808, %r800, %r805;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r811, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r813, %r811, %r637;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r816, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r818, %r816, %r648;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r821, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r823, %r821, %r659;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r826, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r828, %r826, %r670;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r831, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r833, %r831, %r683;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r836, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r838, %r836, %r694;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r841, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r843, %r841, %r705;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r846, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r848, %r846, %r716;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r851, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r853, %r851, %r729;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r856, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r858, %r856, %r740;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r861, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r863, %r861, %r751;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r866, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r868, %r866, %r762;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r871, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r873, %r871, %r775;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r876, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r878, %r876, %r786;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r881, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r883, %r881, %r797;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r886, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r888, %r886, %r808;
	// end inline asm
	// begin inline asm
	mov.b32 %r896, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r907, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r895, %r7989, -2004318072;
	// begin inline asm
	lop3.b32 %r893, %r630, %r895, %r896, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r897, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r898, %r896, %r897;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r901, %r893, %r898;
	// end inline asm
	// begin inline asm
	lop3.b32 %r904, %r641, %r895, %r907, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r908, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r909, %r907, %r908;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r912, %r904, %r909;
	// end inline asm
	shr.u32 	%r917, %r895, 8;
	// begin inline asm
	lop3.b32 %r915, %r630, %r917, %r896, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r919, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r920, %r896, %r919;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r923, %r915, %r920;
	// end inline asm
	// begin inline asm
	lop3.b32 %r926, %r641, %r917, %r907, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r930, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r931, %r907, %r930;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r934, %r926, %r931;
	// end inline asm
	// begin inline asm
	mov.b32 %r942, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r953, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r941, %r7990, -2004318072;
	// begin inline asm
	lop3.b32 %r939, %r630, %r941, %r942, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r943, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r944, %r942, %r943;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r947, %r939, %r944;
	// end inline asm
	// begin inline asm
	lop3.b32 %r950, %r641, %r941, %r953, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r954, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r955, %r953, %r954;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r958, %r950, %r955;
	// end inline asm
	shr.u32 	%r963, %r941, 8;
	// begin inline asm
	lop3.b32 %r961, %r630, %r963, %r942, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r965, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r966, %r942, %r965;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r969, %r961, %r966;
	// end inline asm
	// begin inline asm
	lop3.b32 %r972, %r641, %r963, %r953, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r976, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r977, %r953, %r976;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r980, %r972, %r977;
	// end inline asm
	// begin inline asm
	mov.b32 %r988, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r999, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r987, %r7991, -2004318072;
	// begin inline asm
	lop3.b32 %r985, %r630, %r987, %r988, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r989, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r990, %r988, %r989;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r993, %r985, %r990;
	// end inline asm
	// begin inline asm
	lop3.b32 %r996, %r641, %r987, %r999, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1000, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1001, %r999, %r1000;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1004, %r996, %r1001;
	// end inline asm
	shr.u32 	%r1009, %r987, 8;
	// begin inline asm
	lop3.b32 %r1007, %r630, %r1009, %r988, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1011, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1012, %r988, %r1011;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1015, %r1007, %r1012;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1018, %r641, %r1009, %r999, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1022, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1023, %r999, %r1022;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1026, %r1018, %r1023;
	// end inline asm
	// begin inline asm
	mov.b32 %r1034, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1045, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1033, %r7992, -2004318072;
	// begin inline asm
	lop3.b32 %r1031, %r630, %r1033, %r1034, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1035, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1036, %r1034, %r1035;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1039, %r1031, %r1036;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1042, %r641, %r1033, %r1045, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1046, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1047, %r1045, %r1046;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1050, %r1042, %r1047;
	// end inline asm
	shr.u32 	%r1055, %r1033, 8;
	// begin inline asm
	lop3.b32 %r1053, %r630, %r1055, %r1034, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1057, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1058, %r1034, %r1057;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1061, %r1053, %r1058;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1064, %r641, %r1055, %r1045, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1068, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1069, %r1045, %r1068;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1072, %r1064, %r1069;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1075, %r206, %r901, %r813;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1079, %r206, %r912, %r818;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1083, %r206, %r923, %r823;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1087, %r206, %r934, %r828;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1091, %r206, %r947, %r833;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1095, %r206, %r958, %r838;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1099, %r206, %r969, %r843;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1103, %r206, %r980, %r848;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1107, %r206, %r993, %r853;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1111, %r206, %r1004, %r858;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1115, %r206, %r1015, %r863;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1119, %r206, %r1026, %r868;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1123, %r206, %r1039, %r873;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1127, %r206, %r1050, %r878;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1131, %r206, %r1061, %r883;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1135, %r206, %r1072, %r888;
	// end inline asm
	// begin inline asm
	mov.b32 %r1144, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1155, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1143, %r7993, -2004318072;
	// begin inline asm
	lop3.b32 %r1141, %r630, %r1143, %r1144, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1145, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1146, %r1144, %r1145;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1149, %r1141, %r1146;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1152, %r641, %r1143, %r1155, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1156, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1157, %r1155, %r1156;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1160, %r1152, %r1157;
	// end inline asm
	shr.u32 	%r1165, %r1143, 8;
	// begin inline asm
	lop3.b32 %r1163, %r630, %r1165, %r1144, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1167, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1168, %r1144, %r1167;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1171, %r1163, %r1168;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1174, %r641, %r1165, %r1155, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1178, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1179, %r1155, %r1178;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1182, %r1174, %r1179;
	// end inline asm
	// begin inline asm
	mov.b32 %r1190, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1201, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1189, %r7994, -2004318072;
	// begin inline asm
	lop3.b32 %r1187, %r630, %r1189, %r1190, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1191, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1192, %r1190, %r1191;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1195, %r1187, %r1192;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1198, %r641, %r1189, %r1201, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1202, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1203, %r1201, %r1202;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1206, %r1198, %r1203;
	// end inline asm
	shr.u32 	%r1211, %r1189, 8;
	// begin inline asm
	lop3.b32 %r1209, %r630, %r1211, %r1190, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1213, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1214, %r1190, %r1213;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1217, %r1209, %r1214;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1220, %r641, %r1211, %r1201, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1224, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1225, %r1201, %r1224;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1228, %r1220, %r1225;
	// end inline asm
	// begin inline asm
	mov.b32 %r1236, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1247, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1235, %r7995, -2004318072;
	// begin inline asm
	lop3.b32 %r1233, %r630, %r1235, %r1236, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1237, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1238, %r1236, %r1237;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1241, %r1233, %r1238;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1244, %r641, %r1235, %r1247, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1248, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1249, %r1247, %r1248;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1252, %r1244, %r1249;
	// end inline asm
	shr.u32 	%r1257, %r1235, 8;
	// begin inline asm
	lop3.b32 %r1255, %r630, %r1257, %r1236, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1259, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1260, %r1236, %r1259;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1263, %r1255, %r1260;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1266, %r641, %r1257, %r1247, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1270, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1271, %r1247, %r1270;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1274, %r1266, %r1271;
	// end inline asm
	// begin inline asm
	mov.b32 %r1282, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1293, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1281, %r7996, -2004318072;
	// begin inline asm
	lop3.b32 %r1279, %r630, %r1281, %r1282, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1283, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1284, %r1282, %r1283;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1287, %r1279, %r1284;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1290, %r641, %r1281, %r1293, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1294, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1295, %r1293, %r1294;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1298, %r1290, %r1295;
	// end inline asm
	shr.u32 	%r1303, %r1281, 8;
	// begin inline asm
	lop3.b32 %r1301, %r630, %r1303, %r1282, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1305, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1306, %r1282, %r1305;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1309, %r1301, %r1306;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1312, %r641, %r1303, %r1293, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1316, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1317, %r1293, %r1316;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1320, %r1312, %r1317;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1323, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1325, %r1323, %r1149, %r1075;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1329, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1331, %r1329, %r1160, %r1079;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1335, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1337, %r1335, %r1171, %r1083;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1341, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1343, %r1341, %r1182, %r1087;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1347, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1349, %r1347, %r1195, %r1091;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1353, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1355, %r1353, %r1206, %r1095;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1359, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1361, %r1359, %r1217, %r1099;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1365, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1367, %r1365, %r1228, %r1103;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1371, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1373, %r1371, %r1241, %r1107;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1377, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1379, %r1377, %r1252, %r1111;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1383, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1385, %r1383, %r1263, %r1115;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1389, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1391, %r1389, %r1274, %r1119;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1395, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1397, %r1395, %r1287, %r1123;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1401, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1403, %r1401, %r1298, %r1127;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1407, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1409, %r1407, %r1309, %r1131;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1413, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1415, %r1413, %r1320, %r1135;
	// end inline asm
	// begin inline asm
	mov.b32 %r1424, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1435, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1423, %r7997, -2004318072;
	// begin inline asm
	lop3.b32 %r1421, %r630, %r1423, %r1424, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1425, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1426, %r1424, %r1425;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1429, %r1421, %r1426;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1432, %r641, %r1423, %r1435, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1436, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1437, %r1435, %r1436;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1440, %r1432, %r1437;
	// end inline asm
	shr.u32 	%r1445, %r1423, 8;
	// begin inline asm
	lop3.b32 %r1443, %r630, %r1445, %r1424, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1447, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1448, %r1424, %r1447;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1451, %r1443, %r1448;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1454, %r641, %r1445, %r1435, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1458, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1459, %r1435, %r1458;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1462, %r1454, %r1459;
	// end inline asm
	// begin inline asm
	mov.b32 %r1470, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1481, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1469, %r7998, -2004318072;
	// begin inline asm
	lop3.b32 %r1467, %r630, %r1469, %r1470, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1471, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1472, %r1470, %r1471;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1475, %r1467, %r1472;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1478, %r641, %r1469, %r1481, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1482, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1483, %r1481, %r1482;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1486, %r1478, %r1483;
	// end inline asm
	shr.u32 	%r1491, %r1469, 8;
	// begin inline asm
	lop3.b32 %r1489, %r630, %r1491, %r1470, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1493, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1494, %r1470, %r1493;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1497, %r1489, %r1494;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1500, %r641, %r1491, %r1481, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1504, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1505, %r1481, %r1504;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1508, %r1500, %r1505;
	// end inline asm
	// begin inline asm
	mov.b32 %r1516, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1527, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1515, %r7999, -2004318072;
	// begin inline asm
	lop3.b32 %r1513, %r630, %r1515, %r1516, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1517, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1518, %r1516, %r1517;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1521, %r1513, %r1518;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1524, %r641, %r1515, %r1527, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1528, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1529, %r1527, %r1528;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1532, %r1524, %r1529;
	// end inline asm
	shr.u32 	%r1537, %r1515, 8;
	// begin inline asm
	lop3.b32 %r1535, %r630, %r1537, %r1516, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1539, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1540, %r1516, %r1539;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1543, %r1535, %r1540;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1546, %r641, %r1537, %r1527, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1550, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1551, %r1527, %r1550;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1554, %r1546, %r1551;
	// end inline asm
	// begin inline asm
	mov.b32 %r1562, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1573, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1561, %r8000, -2004318072;
	// begin inline asm
	lop3.b32 %r1559, %r630, %r1561, %r1562, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1563, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1564, %r1562, %r1563;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1567, %r1559, %r1564;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1570, %r641, %r1561, %r1573, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1574, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1575, %r1573, %r1574;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1578, %r1570, %r1575;
	// end inline asm
	shr.u32 	%r1583, %r1561, 8;
	// begin inline asm
	lop3.b32 %r1581, %r630, %r1583, %r1562, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1585, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1586, %r1562, %r1585;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1589, %r1581, %r1586;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1592, %r641, %r1583, %r1573, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1596, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1597, %r1573, %r1596;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1600, %r1592, %r1597;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1674, %r242, %r1429, %r1325;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1671, %r242, %r1440, %r1331;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1683, %r242, %r1451, %r1337;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1680, %r242, %r1462, %r1343;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1692, %r242, %r1475, %r1349;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1689, %r242, %r1486, %r1355;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1701, %r242, %r1497, %r1361;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1698, %r242, %r1508, %r1367;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1710, %r242, %r1521, %r1373;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1707, %r242, %r1532, %r1379;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1719, %r242, %r1543, %r1385;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1716, %r242, %r1554, %r1391;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1728, %r242, %r1567, %r1397;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1725, %r242, %r1578, %r1403;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1737, %r242, %r1589, %r1409;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1734, %r242, %r1600, %r1415;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1667, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1669, %r1667, %r1671;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1672, %r263, %r1674, %r1669;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1676, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1678, %r1676, %r1680;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1681, %r263, %r1683, %r1678;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1685, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1687, %r1685, %r1689;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1690, %r263, %r1692, %r1687;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1694, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1696, %r1694, %r1698;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1699, %r263, %r1701, %r1696;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1703, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1705, %r1703, %r1707;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1708, %r263, %r1710, %r1705;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1712, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1714, %r1712, %r1716;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1717, %r263, %r1719, %r1714;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1721, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1723, %r1721, %r1725;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1726, %r263, %r1728, %r1723;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1730, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1732, %r1730, %r1734;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1735, %r263, %r1737, %r1732;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1739, %r266, %r1674;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1742, %r263, %r1671, %r1739;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1746, %r266, %r1683;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1749, %r263, %r1680, %r1746;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1753, %r266, %r1692;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1756, %r263, %r1689, %r1753;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1760, %r266, %r1701;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1763, %r263, %r1698, %r1760;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1767, %r266, %r1710;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1770, %r263, %r1707, %r1767;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1774, %r266, %r1719;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1777, %r263, %r1716, %r1774;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1781, %r266, %r1728;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1784, %r263, %r1725, %r1781;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1788, %r266, %r1737;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1791, %r263, %r1734, %r1788;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1882, %r1879}, {%r322, %r328, %r325, %r331}, {%r1672, %r1742}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1891, %r1888}, {%r322, %r328, %r325, %r331}, {%r1681, %r1749}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1900, %r1897}, {%r322, %r328, %r325, %r331}, {%r1690, %r1756}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1909, %r1906}, {%r322, %r328, %r325, %r331}, {%r1699, %r1763}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1918, %r1915}, {%r322, %r328, %r325, %r331}, {%r1708, %r1770}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1927, %r1924}, {%r322, %r328, %r325, %r331}, {%r1717, %r1777}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1936, %r1933}, {%r322, %r328, %r325, %r331}, {%r1726, %r1784}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1945, %r1942}, {%r322, %r328, %r325, %r331}, {%r1735, %r1791}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1875, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1877, %r1875, %r1879;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1880, %r366, %r1882, %r1877;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1884, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1886, %r1884, %r1888;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1889, %r366, %r1891, %r1886;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1893, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1895, %r1893, %r1897;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1898, %r366, %r1900, %r1895;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1902, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1904, %r1902, %r1906;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1907, %r366, %r1909, %r1904;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1911, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1913, %r1911, %r1915;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1916, %r366, %r1918, %r1913;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1920, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1922, %r1920, %r1924;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1925, %r366, %r1927, %r1922;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1929, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1931, %r1929, %r1933;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1934, %r366, %r1936, %r1931;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1938, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1940, %r1938, %r1942;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1943, %r366, %r1945, %r1940;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1947, %r369, %r1882;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1950, %r366, %r1879, %r1947;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1954, %r369, %r1891;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1957, %r366, %r1888, %r1954;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1961, %r369, %r1900;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1964, %r366, %r1897, %r1961;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1968, %r369, %r1909;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1971, %r366, %r1906, %r1968;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1975, %r369, %r1918;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1978, %r366, %r1915, %r1975;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1982, %r369, %r1927;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1985, %r366, %r1924, %r1982;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1989, %r369, %r1936;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1992, %r366, %r1933, %r1989;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1996, %r369, %r1945;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1999, %r366, %r1942, %r1996;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2003, %r2004}, {%r400, %r406, %r403, %r409}, {%r1880, %r1950}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2013, %r2014}, {%r400, %r406, %r403, %r409}, {%r1889, %r1957}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2023, %r2024}, {%r400, %r406, %r403, %r409}, {%r1898, %r1964}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2033, %r2034}, {%r400, %r406, %r403, %r409}, {%r1907, %r1971}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2043, %r2044}, {%r400, %r406, %r403, %r409}, {%r1916, %r1978}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2053, %r2054}, {%r400, %r406, %r403, %r409}, {%r1925, %r1985}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2063, %r2064}, {%r400, %r406, %r403, %r409}, {%r1934, %r1992}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2073, %r2074}, {%r400, %r406, %r403, %r409}, {%r1943, %r1999}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2083, %r109, %r2003;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2086, %r109, %r2004;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2089, %r109, %r2013;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2092, %r109, %r2014;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2095, %r109, %r2023;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2098, %r109, %r2024;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2101, %r109, %r2033;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2104, %r109, %r2034;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2107, %r109, %r2043;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2110, %r109, %r2044;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2113, %r109, %r2053;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2116, %r109, %r2054;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2119, %r109, %r2063;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2122, %r109, %r2064;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2125, %r109, %r2073;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2128, %r109, %r2074;
	// end inline asm
	// begin inline asm
	mov.b32 %r2131, {%rs1142, %rs1142};
	// end inline asm
	mov.u16 	%rs195, 18176;
	// begin inline asm
	mov.b32 %r2132, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2133, %r2083, %r2131;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2136, %r2133, %r2132;
	// end inline asm
	// begin inline asm
	mov.b32 %r2139, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2140, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2141, %r2086, %r2139;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2144, %r2141, %r2140;
	// end inline asm
	// begin inline asm
	mov.b32 %r2147, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2148, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2149, %r2089, %r2147;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2152, %r2149, %r2148;
	// end inline asm
	// begin inline asm
	mov.b32 %r2155, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2156, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2157, %r2092, %r2155;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2160, %r2157, %r2156;
	// end inline asm
	// begin inline asm
	mov.b32 %r2163, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2164, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2165, %r2095, %r2163;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2168, %r2165, %r2164;
	// end inline asm
	// begin inline asm
	mov.b32 %r2171, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2172, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2173, %r2098, %r2171;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2176, %r2173, %r2172;
	// end inline asm
	// begin inline asm
	mov.b32 %r2179, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2180, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2181, %r2101, %r2179;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2184, %r2181, %r2180;
	// end inline asm
	// begin inline asm
	mov.b32 %r2187, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2188, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2189, %r2104, %r2187;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2192, %r2189, %r2188;
	// end inline asm
	// begin inline asm
	mov.b32 %r2195, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2196, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2197, %r2107, %r2195;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2200, %r2197, %r2196;
	// end inline asm
	// begin inline asm
	mov.b32 %r2203, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2204, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2205, %r2110, %r2203;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2208, %r2205, %r2204;
	// end inline asm
	// begin inline asm
	mov.b32 %r2211, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2212, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2213, %r2113, %r2211;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2216, %r2213, %r2212;
	// end inline asm
	// begin inline asm
	mov.b32 %r2219, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2220, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2221, %r2116, %r2219;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2224, %r2221, %r2220;
	// end inline asm
	// begin inline asm
	mov.b32 %r2227, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2228, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2229, %r2119, %r2227;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2232, %r2229, %r2228;
	// end inline asm
	// begin inline asm
	mov.b32 %r2235, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2236, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2237, %r2122, %r2235;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2240, %r2237, %r2236;
	// end inline asm
	// begin inline asm
	mov.b32 %r2243, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2244, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2245, %r2125, %r2243;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2248, %r2245, %r2244;
	// end inline asm
	// begin inline asm
	mov.b32 %r2251, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2252, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2253, %r2128, %r2251;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2256, %r2253, %r2252;
	// end inline asm
	// begin inline asm
	mov.b32 %r2262, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2260, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2261, %r2262, %r2260;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2264, %r2136, %r2261;
	// end inline asm
	// begin inline asm
	mov.b32 %r2267, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2268, %r2262, %r2267;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2271, %r2144, %r2268;
	// end inline asm
	// begin inline asm
	mov.b32 %r2274, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2275, %r2262, %r2274;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2278, %r2152, %r2275;
	// end inline asm
	// begin inline asm
	mov.b32 %r2281, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2282, %r2262, %r2281;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2285, %r2160, %r2282;
	// end inline asm
	mov.u32 	%r2291, 25152;
	// begin inline asm
	prmt.b32 %r2288, %r2264, %r2278, %r2291;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2292, %r2271, %r2285, %r2291;
	// end inline asm
	shl.b32 	%r2299, %r2292, 4;
	mov.u32 	%r2297, 252645135;
	// begin inline asm
	lop3.b32 %r2296, %r2297, %r2288, %r2299, 202;
	// end inline asm
	xor.b32  	%r7857, %r2296, -2004318072;
	// begin inline asm
	mov.b32 %r2303, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2301, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2302, %r2303, %r2301;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2305, %r2168, %r2302;
	// end inline asm
	// begin inline asm
	mov.b32 %r2308, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2309, %r2303, %r2308;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2312, %r2176, %r2309;
	// end inline asm
	// begin inline asm
	mov.b32 %r2315, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2316, %r2303, %r2315;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2319, %r2184, %r2316;
	// end inline asm
	// begin inline asm
	mov.b32 %r2322, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2323, %r2303, %r2322;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2326, %r2192, %r2323;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2329, %r2305, %r2319, %r2291;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2333, %r2312, %r2326, %r2291;
	// end inline asm
	shl.b32 	%r2340, %r2333, 4;
	// begin inline asm
	lop3.b32 %r2337, %r2297, %r2329, %r2340, 202;
	// end inline asm
	xor.b32  	%r7858, %r2337, -2004318072;
	// begin inline asm
	mov.b32 %r2344, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2342, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2343, %r2344, %r2342;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2346, %r2200, %r2343;
	// end inline asm
	// begin inline asm
	mov.b32 %r2349, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2350, %r2344, %r2349;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2353, %r2208, %r2350;
	// end inline asm
	// begin inline asm
	mov.b32 %r2356, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2357, %r2344, %r2356;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2360, %r2216, %r2357;
	// end inline asm
	// begin inline asm
	mov.b32 %r2363, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2364, %r2344, %r2363;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2367, %r2224, %r2364;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2370, %r2346, %r2360, %r2291;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2374, %r2353, %r2367, %r2291;
	// end inline asm
	shl.b32 	%r2381, %r2374, 4;
	// begin inline asm
	lop3.b32 %r2378, %r2297, %r2370, %r2381, 202;
	// end inline asm
	xor.b32  	%r7859, %r2378, -2004318072;
	// begin inline asm
	mov.b32 %r2385, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2383, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2384, %r2385, %r2383;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2387, %r2232, %r2384;
	// end inline asm
	// begin inline asm
	mov.b32 %r2390, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2391, %r2385, %r2390;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2394, %r2240, %r2391;
	// end inline asm
	// begin inline asm
	mov.b32 %r2397, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2398, %r2385, %r2397;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2401, %r2248, %r2398;
	// end inline asm
	// begin inline asm
	mov.b32 %r2404, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2405, %r2385, %r2404;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2408, %r2256, %r2405;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2411, %r2387, %r2401, %r2291;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2415, %r2394, %r2408, %r2291;
	// end inline asm
	shl.b32 	%r2422, %r2415, 4;
	// begin inline asm
	lop3.b32 %r2419, %r2297, %r2411, %r2422, 202;
	// end inline asm
	xor.b32  	%r7860, %r2419, -2004318072;
	st.shared.u32 	[%rd152], %r7857;
	st.shared.u32 	[%rd153], %r7858;
	st.shared.u32 	[%rd154], %r7859;
	st.shared.u32 	[%rd155], %r7860;
	ld.shared.u32 	%r7989, [%rd93];
	ld.shared.u32 	%r7990, [%rd95];
	ld.shared.u32 	%r7991, [%rd97];
	ld.shared.u32 	%r7992, [%rd99];
	// begin inline asm
	mov.b32 %r2428, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2439, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2427, %r7989, -2004318072;
	// begin inline asm
	lop3.b32 %r2425, %r630, %r2427, %r2428, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2429, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2430, %r2428, %r2429;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2433, %r2425, %r2430;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2436, %r641, %r2427, %r2439, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2440, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2441, %r2439, %r2440;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2444, %r2436, %r2441;
	// end inline asm
	shr.u32 	%r2449, %r2427, 8;
	// begin inline asm
	lop3.b32 %r2447, %r630, %r2449, %r2428, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2451, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2452, %r2428, %r2451;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2455, %r2447, %r2452;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2458, %r641, %r2449, %r2439, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2462, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2463, %r2439, %r2462;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2466, %r2458, %r2463;
	// end inline asm
	// begin inline asm
	mov.b32 %r2474, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2485, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2473, %r7990, -2004318072;
	// begin inline asm
	lop3.b32 %r2471, %r630, %r2473, %r2474, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2475, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2476, %r2474, %r2475;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2479, %r2471, %r2476;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2482, %r641, %r2473, %r2485, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2486, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2487, %r2485, %r2486;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2490, %r2482, %r2487;
	// end inline asm
	shr.u32 	%r2495, %r2473, 8;
	// begin inline asm
	lop3.b32 %r2493, %r630, %r2495, %r2474, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2497, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2498, %r2474, %r2497;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2501, %r2493, %r2498;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2504, %r641, %r2495, %r2485, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2508, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2509, %r2485, %r2508;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2512, %r2504, %r2509;
	// end inline asm
	// begin inline asm
	mov.b32 %r2520, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2531, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2519, %r7991, -2004318072;
	// begin inline asm
	lop3.b32 %r2517, %r630, %r2519, %r2520, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2521, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2522, %r2520, %r2521;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2525, %r2517, %r2522;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2528, %r641, %r2519, %r2531, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2532, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2533, %r2531, %r2532;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2536, %r2528, %r2533;
	// end inline asm
	shr.u32 	%r2541, %r2519, 8;
	// begin inline asm
	lop3.b32 %r2539, %r630, %r2541, %r2520, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2543, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2544, %r2520, %r2543;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2547, %r2539, %r2544;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2550, %r641, %r2541, %r2531, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2554, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2555, %r2531, %r2554;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2558, %r2550, %r2555;
	// end inline asm
	// begin inline asm
	mov.b32 %r2566, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2577, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2565, %r7992, -2004318072;
	// begin inline asm
	lop3.b32 %r2563, %r630, %r2565, %r2566, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2567, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2568, %r2566, %r2567;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2571, %r2563, %r2568;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2574, %r641, %r2565, %r2577, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2578, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2579, %r2577, %r2578;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2582, %r2574, %r2579;
	// end inline asm
	shr.u32 	%r2587, %r2565, 8;
	// begin inline asm
	lop3.b32 %r2585, %r630, %r2587, %r2566, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2589, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2590, %r2566, %r2589;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2593, %r2585, %r2590;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2596, %r641, %r2587, %r2577, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2600, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2601, %r2577, %r2600;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2604, %r2596, %r2601;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2607, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2609, %r2607, %r2433;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2612, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2614, %r2612, %r2444;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2617, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2619, %r2617, %r2455;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2622, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2624, %r2622, %r2466;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2627, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2629, %r2627, %r2479;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2632, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2634, %r2632, %r2490;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2637, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2639, %r2637, %r2501;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2642, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2644, %r2642, %r2512;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2647, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2649, %r2647, %r2525;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2652, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2654, %r2652, %r2536;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2657, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2659, %r2657, %r2547;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2662, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2664, %r2662, %r2558;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2667, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2669, %r2667, %r2571;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2672, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2674, %r2672, %r2582;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2677, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2679, %r2677, %r2593;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2682, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2684, %r2682, %r2604;
	// end inline asm
	// begin inline asm
	mov.b32 %r2692, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2703, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2689, %r630, %r1143, %r2692, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2693, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2694, %r2692, %r2693;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2697, %r2689, %r2694;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2700, %r641, %r1143, %r2703, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2704, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2705, %r2703, %r2704;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2708, %r2700, %r2705;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2711, %r630, %r1165, %r2692, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2715, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2716, %r2692, %r2715;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2719, %r2711, %r2716;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2722, %r641, %r1165, %r2703, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2726, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2727, %r2703, %r2726;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2730, %r2722, %r2727;
	// end inline asm
	// begin inline asm
	mov.b32 %r2738, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2749, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2735, %r630, %r1189, %r2738, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2739, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2740, %r2738, %r2739;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2743, %r2735, %r2740;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2746, %r641, %r1189, %r2749, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2750, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2751, %r2749, %r2750;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2754, %r2746, %r2751;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2757, %r630, %r1211, %r2738, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2761, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2762, %r2738, %r2761;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2765, %r2757, %r2762;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2768, %r641, %r1211, %r2749, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2772, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2773, %r2749, %r2772;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2776, %r2768, %r2773;
	// end inline asm
	// begin inline asm
	mov.b32 %r2784, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2795, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2781, %r630, %r1235, %r2784, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2785, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2786, %r2784, %r2785;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2789, %r2781, %r2786;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2792, %r641, %r1235, %r2795, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2796, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2797, %r2795, %r2796;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2800, %r2792, %r2797;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2803, %r630, %r1257, %r2784, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2807, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2808, %r2784, %r2807;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2811, %r2803, %r2808;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2814, %r641, %r1257, %r2795, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2818, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2819, %r2795, %r2818;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2822, %r2814, %r2819;
	// end inline asm
	// begin inline asm
	mov.b32 %r2830, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2841, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2827, %r630, %r1281, %r2830, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2831, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2832, %r2830, %r2831;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2835, %r2827, %r2832;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2838, %r641, %r1281, %r2841, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2842, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2843, %r2841, %r2842;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2846, %r2838, %r2843;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2849, %r630, %r1303, %r2830, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2853, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2854, %r2830, %r2853;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2857, %r2849, %r2854;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2860, %r641, %r1303, %r2841, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2864, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2865, %r2841, %r2864;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2868, %r2860, %r2865;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2871, %r206, %r2697, %r2609;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2875, %r206, %r2708, %r2614;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2879, %r206, %r2719, %r2619;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2883, %r206, %r2730, %r2624;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2887, %r206, %r2743, %r2629;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2891, %r206, %r2754, %r2634;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2895, %r206, %r2765, %r2639;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2899, %r206, %r2776, %r2644;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2903, %r206, %r2789, %r2649;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2907, %r206, %r2800, %r2654;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2911, %r206, %r2811, %r2659;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2915, %r206, %r2822, %r2664;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2919, %r206, %r2835, %r2669;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2923, %r206, %r2846, %r2674;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2927, %r206, %r2857, %r2679;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2931, %r206, %r2868, %r2684;
	// end inline asm
	// begin inline asm
	mov.b32 %r2940, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2951, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2937, %r630, %r1423, %r2940, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2941, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2942, %r2940, %r2941;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2945, %r2937, %r2942;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2948, %r641, %r1423, %r2951, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2952, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2953, %r2951, %r2952;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2956, %r2948, %r2953;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2959, %r630, %r1445, %r2940, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2963, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2964, %r2940, %r2963;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2967, %r2959, %r2964;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2970, %r641, %r1445, %r2951, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2974, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2975, %r2951, %r2974;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2978, %r2970, %r2975;
	// end inline asm
	// begin inline asm
	mov.b32 %r2986, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2997, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2983, %r630, %r1469, %r2986, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2987, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2988, %r2986, %r2987;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2991, %r2983, %r2988;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2994, %r641, %r1469, %r2997, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2998, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2999, %r2997, %r2998;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3002, %r2994, %r2999;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3005, %r630, %r1491, %r2986, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3009, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3010, %r2986, %r3009;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3013, %r3005, %r3010;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3016, %r641, %r1491, %r2997, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3020, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3021, %r2997, %r3020;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3024, %r3016, %r3021;
	// end inline asm
	// begin inline asm
	mov.b32 %r3032, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3043, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3029, %r630, %r1515, %r3032, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3033, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3034, %r3032, %r3033;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3037, %r3029, %r3034;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3040, %r641, %r1515, %r3043, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3044, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3045, %r3043, %r3044;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3048, %r3040, %r3045;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3051, %r630, %r1537, %r3032, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3055, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3056, %r3032, %r3055;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3059, %r3051, %r3056;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3062, %r641, %r1537, %r3043, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3066, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3067, %r3043, %r3066;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3070, %r3062, %r3067;
	// end inline asm
	// begin inline asm
	mov.b32 %r3078, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3089, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3075, %r630, %r1561, %r3078, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3079, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3080, %r3078, %r3079;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3083, %r3075, %r3080;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3086, %r641, %r1561, %r3089, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3090, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3091, %r3089, %r3090;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3094, %r3086, %r3091;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3097, %r630, %r1583, %r3078, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3101, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3102, %r3078, %r3101;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3105, %r3097, %r3102;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3108, %r641, %r1583, %r3089, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3112, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3113, %r3089, %r3112;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3116, %r3108, %r3113;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3119, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3121, %r3119, %r2945, %r2871;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3125, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3127, %r3125, %r2956, %r2875;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3131, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3133, %r3131, %r2967, %r2879;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3137, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3139, %r3137, %r2978, %r2883;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3143, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3145, %r3143, %r2991, %r2887;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3149, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3151, %r3149, %r3002, %r2891;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3155, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3157, %r3155, %r3013, %r2895;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3161, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3163, %r3161, %r3024, %r2899;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3167, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3169, %r3167, %r3037, %r2903;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3173, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3175, %r3173, %r3048, %r2907;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3179, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3181, %r3179, %r3059, %r2911;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3185, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3187, %r3185, %r3070, %r2915;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3191, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3193, %r3191, %r3083, %r2919;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3197, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3199, %r3197, %r3094, %r2923;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3203, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3205, %r3203, %r3105, %r2927;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3209, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3211, %r3209, %r3116, %r2931;
	// end inline asm
	// begin inline asm
	mov.b32 %r3220, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3231, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3217, %r630, %r631, %r3220, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3221, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3222, %r3220, %r3221;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3225, %r3217, %r3222;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3228, %r641, %r631, %r3231, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3232, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3233, %r3231, %r3232;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3236, %r3228, %r3233;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3239, %r630, %r653, %r3220, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3243, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3244, %r3220, %r3243;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3247, %r3239, %r3244;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3250, %r641, %r653, %r3231, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3254, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3255, %r3231, %r3254;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3258, %r3250, %r3255;
	// end inline asm
	// begin inline asm
	mov.b32 %r3266, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3277, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3263, %r630, %r677, %r3266, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3267, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3268, %r3266, %r3267;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3271, %r3263, %r3268;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3274, %r641, %r677, %r3277, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3278, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3279, %r3277, %r3278;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3282, %r3274, %r3279;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3285, %r630, %r699, %r3266, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3289, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3290, %r3266, %r3289;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3293, %r3285, %r3290;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3296, %r641, %r699, %r3277, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3300, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3301, %r3277, %r3300;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3304, %r3296, %r3301;
	// end inline asm
	// begin inline asm
	mov.b32 %r3312, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3323, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3309, %r630, %r723, %r3312, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3313, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3314, %r3312, %r3313;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3317, %r3309, %r3314;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3320, %r641, %r723, %r3323, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3324, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3325, %r3323, %r3324;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3328, %r3320, %r3325;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3331, %r630, %r745, %r3312, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3335, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3336, %r3312, %r3335;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3339, %r3331, %r3336;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3342, %r641, %r745, %r3323, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3346, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3347, %r3323, %r3346;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3350, %r3342, %r3347;
	// end inline asm
	// begin inline asm
	mov.b32 %r3358, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3369, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3355, %r630, %r769, %r3358, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3359, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3360, %r3358, %r3359;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3363, %r3355, %r3360;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3366, %r641, %r769, %r3369, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3370, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3371, %r3369, %r3370;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3374, %r3366, %r3371;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3377, %r630, %r791, %r3358, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3381, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3382, %r3358, %r3381;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3385, %r3377, %r3382;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3388, %r641, %r791, %r3369, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3392, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3393, %r3369, %r3392;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3396, %r3388, %r3393;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3470, %r242, %r3225, %r3121;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3467, %r242, %r3236, %r3127;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3479, %r242, %r3247, %r3133;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3476, %r242, %r3258, %r3139;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3488, %r242, %r3271, %r3145;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3485, %r242, %r3282, %r3151;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3497, %r242, %r3293, %r3157;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3494, %r242, %r3304, %r3163;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3506, %r242, %r3317, %r3169;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3503, %r242, %r3328, %r3175;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3515, %r242, %r3339, %r3181;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3512, %r242, %r3350, %r3187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3524, %r242, %r3363, %r3193;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3521, %r242, %r3374, %r3199;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3533, %r242, %r3385, %r3205;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3530, %r242, %r3396, %r3211;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3463, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3465, %r3463, %r3467;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3468, %r263, %r3470, %r3465;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3472, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3474, %r3472, %r3476;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3477, %r263, %r3479, %r3474;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3481, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3483, %r3481, %r3485;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3486, %r263, %r3488, %r3483;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3490, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3492, %r3490, %r3494;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3495, %r263, %r3497, %r3492;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3499, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3501, %r3499, %r3503;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3504, %r263, %r3506, %r3501;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3508, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3510, %r3508, %r3512;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3513, %r263, %r3515, %r3510;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3517, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3519, %r3517, %r3521;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3522, %r263, %r3524, %r3519;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3526, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3528, %r3526, %r3530;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3531, %r263, %r3533, %r3528;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3535, %r266, %r3470;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3538, %r263, %r3467, %r3535;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3542, %r266, %r3479;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3545, %r263, %r3476, %r3542;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3549, %r266, %r3488;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3552, %r263, %r3485, %r3549;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3556, %r266, %r3497;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3559, %r263, %r3494, %r3556;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3563, %r266, %r3506;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3566, %r263, %r3503, %r3563;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3570, %r266, %r3515;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3573, %r263, %r3512, %r3570;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3577, %r266, %r3524;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3580, %r263, %r3521, %r3577;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3584, %r266, %r3533;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3587, %r263, %r3530, %r3584;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3678, %r3675}, {%r322, %r328, %r325, %r331}, {%r3468, %r3538}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3687, %r3684}, {%r322, %r328, %r325, %r331}, {%r3477, %r3545}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3696, %r3693}, {%r322, %r328, %r325, %r331}, {%r3486, %r3552}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3705, %r3702}, {%r322, %r328, %r325, %r331}, {%r3495, %r3559}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3714, %r3711}, {%r322, %r328, %r325, %r331}, {%r3504, %r3566}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3723, %r3720}, {%r322, %r328, %r325, %r331}, {%r3513, %r3573}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3732, %r3729}, {%r322, %r328, %r325, %r331}, {%r3522, %r3580}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3741, %r3738}, {%r322, %r328, %r325, %r331}, {%r3531, %r3587}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3671, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3673, %r3671, %r3675;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3676, %r366, %r3678, %r3673;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3680, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3682, %r3680, %r3684;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3685, %r366, %r3687, %r3682;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3689, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3691, %r3689, %r3693;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3694, %r366, %r3696, %r3691;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3698, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3700, %r3698, %r3702;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3703, %r366, %r3705, %r3700;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3707, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3709, %r3707, %r3711;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3712, %r366, %r3714, %r3709;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3716, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3718, %r3716, %r3720;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3721, %r366, %r3723, %r3718;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3725, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3727, %r3725, %r3729;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3730, %r366, %r3732, %r3727;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3734, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3736, %r3734, %r3738;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3739, %r366, %r3741, %r3736;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3743, %r369, %r3678;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3746, %r366, %r3675, %r3743;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3750, %r369, %r3687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3753, %r366, %r3684, %r3750;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3757, %r369, %r3696;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3760, %r366, %r3693, %r3757;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3764, %r369, %r3705;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3767, %r366, %r3702, %r3764;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3771, %r369, %r3714;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3774, %r366, %r3711, %r3771;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3778, %r369, %r3723;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3781, %r366, %r3720, %r3778;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3785, %r369, %r3732;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3788, %r366, %r3729, %r3785;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3792, %r369, %r3741;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3795, %r366, %r3738, %r3792;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3799, %r3800}, {%r400, %r406, %r403, %r409}, {%r3676, %r3746}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3809, %r3810}, {%r400, %r406, %r403, %r409}, {%r3685, %r3753}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3819, %r3820}, {%r400, %r406, %r403, %r409}, {%r3694, %r3760}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3829, %r3830}, {%r400, %r406, %r403, %r409}, {%r3703, %r3767}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3839, %r3840}, {%r400, %r406, %r403, %r409}, {%r3712, %r3774}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3849, %r3850}, {%r400, %r406, %r403, %r409}, {%r3721, %r3781}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3859, %r3860}, {%r400, %r406, %r403, %r409}, {%r3730, %r3788}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3869, %r3870}, {%r400, %r406, %r403, %r409}, {%r3739, %r3795}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3879, %r109, %r3799;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3882, %r109, %r3800;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3885, %r109, %r3809;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3888, %r109, %r3810;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3891, %r109, %r3819;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3894, %r109, %r3820;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3897, %r109, %r3829;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3900, %r109, %r3830;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3903, %r109, %r3839;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3906, %r109, %r3840;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3909, %r109, %r3849;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3912, %r109, %r3850;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3915, %r109, %r3859;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3918, %r109, %r3860;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3921, %r109, %r3869;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3924, %r109, %r3870;
	// end inline asm
	// begin inline asm
	mov.b32 %r3927, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3928, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3929, %r3879, %r3927;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3932, %r3929, %r3928;
	// end inline asm
	// begin inline asm
	mov.b32 %r3935, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3936, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3937, %r3882, %r3935;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3940, %r3937, %r3936;
	// end inline asm
	// begin inline asm
	mov.b32 %r3943, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3944, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3945, %r3885, %r3943;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3948, %r3945, %r3944;
	// end inline asm
	// begin inline asm
	mov.b32 %r3951, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3952, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3953, %r3888, %r3951;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3956, %r3953, %r3952;
	// end inline asm
	// begin inline asm
	mov.b32 %r3959, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3960, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3961, %r3891, %r3959;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3964, %r3961, %r3960;
	// end inline asm
	// begin inline asm
	mov.b32 %r3967, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3968, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3969, %r3894, %r3967;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3972, %r3969, %r3968;
	// end inline asm
	// begin inline asm
	mov.b32 %r3975, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3976, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3977, %r3897, %r3975;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3980, %r3977, %r3976;
	// end inline asm
	// begin inline asm
	mov.b32 %r3983, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3984, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3985, %r3900, %r3983;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3988, %r3985, %r3984;
	// end inline asm
	// begin inline asm
	mov.b32 %r3991, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3992, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3993, %r3903, %r3991;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3996, %r3993, %r3992;
	// end inline asm
	// begin inline asm
	mov.b32 %r3999, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4000, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4001, %r3906, %r3999;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4004, %r4001, %r4000;
	// end inline asm
	// begin inline asm
	mov.b32 %r4007, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4008, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4009, %r3909, %r4007;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4012, %r4009, %r4008;
	// end inline asm
	// begin inline asm
	mov.b32 %r4015, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4016, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4017, %r3912, %r4015;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4020, %r4017, %r4016;
	// end inline asm
	// begin inline asm
	mov.b32 %r4023, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4024, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4025, %r3915, %r4023;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4028, %r4025, %r4024;
	// end inline asm
	// begin inline asm
	mov.b32 %r4031, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4032, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4033, %r3918, %r4031;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4036, %r4033, %r4032;
	// end inline asm
	// begin inline asm
	mov.b32 %r4039, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4040, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4041, %r3921, %r4039;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4044, %r4041, %r4040;
	// end inline asm
	// begin inline asm
	mov.b32 %r4047, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4048, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4049, %r3924, %r4047;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4052, %r4049, %r4048;
	// end inline asm
	// begin inline asm
	mov.b32 %r4058, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4056, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4057, %r4058, %r4056;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4060, %r3932, %r4057;
	// end inline asm
	// begin inline asm
	mov.b32 %r4063, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4064, %r4058, %r4063;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4067, %r3940, %r4064;
	// end inline asm
	// begin inline asm
	mov.b32 %r4070, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4071, %r4058, %r4070;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4074, %r3948, %r4071;
	// end inline asm
	// begin inline asm
	mov.b32 %r4077, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4078, %r4058, %r4077;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4081, %r3956, %r4078;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4084, %r4060, %r4074, %r2291;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4088, %r4067, %r4081, %r2291;
	// end inline asm
	shl.b32 	%r4095, %r4088, 4;
	// begin inline asm
	lop3.b32 %r4092, %r2297, %r4084, %r4095, 202;
	// end inline asm
	xor.b32  	%r7861, %r4092, -2004318072;
	// begin inline asm
	mov.b32 %r4099, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4097, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4098, %r4099, %r4097;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4101, %r3964, %r4098;
	// end inline asm
	// begin inline asm
	mov.b32 %r4104, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4105, %r4099, %r4104;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4108, %r3972, %r4105;
	// end inline asm
	// begin inline asm
	mov.b32 %r4111, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4112, %r4099, %r4111;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4115, %r3980, %r4112;
	// end inline asm
	// begin inline asm
	mov.b32 %r4118, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4119, %r4099, %r4118;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4122, %r3988, %r4119;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4125, %r4101, %r4115, %r2291;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4129, %r4108, %r4122, %r2291;
	// end inline asm
	shl.b32 	%r4136, %r4129, 4;
	// begin inline asm
	lop3.b32 %r4133, %r2297, %r4125, %r4136, 202;
	// end inline asm
	xor.b32  	%r7862, %r4133, -2004318072;
	// begin inline asm
	mov.b32 %r4140, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4138, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4139, %r4140, %r4138;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4142, %r3996, %r4139;
	// end inline asm
	// begin inline asm
	mov.b32 %r4145, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4146, %r4140, %r4145;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4149, %r4004, %r4146;
	// end inline asm
	// begin inline asm
	mov.b32 %r4152, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4153, %r4140, %r4152;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4156, %r4012, %r4153;
	// end inline asm
	// begin inline asm
	mov.b32 %r4159, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4160, %r4140, %r4159;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4163, %r4020, %r4160;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4166, %r4142, %r4156, %r2291;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4170, %r4149, %r4163, %r2291;
	// end inline asm
	shl.b32 	%r4177, %r4170, 4;
	// begin inline asm
	lop3.b32 %r4174, %r2297, %r4166, %r4177, 202;
	// end inline asm
	xor.b32  	%r7863, %r4174, -2004318072;
	// begin inline asm
	mov.b32 %r4181, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4179, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4180, %r4181, %r4179;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4183, %r4028, %r4180;
	// end inline asm
	// begin inline asm
	mov.b32 %r4186, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4187, %r4181, %r4186;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4190, %r4036, %r4187;
	// end inline asm
	// begin inline asm
	mov.b32 %r4193, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4194, %r4181, %r4193;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4197, %r4044, %r4194;
	// end inline asm
	// begin inline asm
	mov.b32 %r4200, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4201, %r4181, %r4200;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4204, %r4052, %r4201;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4207, %r4183, %r4197, %r2291;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4211, %r4190, %r4204, %r2291;
	// end inline asm
	shl.b32 	%r4218, %r4211, 4;
	// begin inline asm
	lop3.b32 %r4215, %r2297, %r4207, %r4218, 202;
	// end inline asm
	xor.b32  	%r7864, %r4215, -2004318072;
	st.shared.u32 	[%rd152], %r7861;
	st.shared.u32 	[%rd153], %r7862;
	st.shared.u32 	[%rd154], %r7863;
	st.shared.u32 	[%rd155], %r7864;
	ld.shared.u32 	%r7993, [%rd93];
	ld.shared.u32 	%r7994, [%rd95];
	ld.shared.u32 	%r7995, [%rd97];
	ld.shared.u32 	%r7996, [%rd99];
	// begin inline asm
	mov.b32 %r4224, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4235, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4223, %r7993, -2004318072;
	// begin inline asm
	lop3.b32 %r4221, %r630, %r4223, %r4224, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4225, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4226, %r4224, %r4225;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4229, %r4221, %r4226;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4232, %r641, %r4223, %r4235, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4236, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4237, %r4235, %r4236;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4240, %r4232, %r4237;
	// end inline asm
	shr.u32 	%r4245, %r4223, 8;
	// begin inline asm
	lop3.b32 %r4243, %r630, %r4245, %r4224, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4247, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4248, %r4224, %r4247;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4251, %r4243, %r4248;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4254, %r641, %r4245, %r4235, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4258, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4259, %r4235, %r4258;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4262, %r4254, %r4259;
	// end inline asm
	// begin inline asm
	mov.b32 %r4270, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4281, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4269, %r7994, -2004318072;
	// begin inline asm
	lop3.b32 %r4267, %r630, %r4269, %r4270, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4271, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4272, %r4270, %r4271;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4275, %r4267, %r4272;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4278, %r641, %r4269, %r4281, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4282, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4283, %r4281, %r4282;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4286, %r4278, %r4283;
	// end inline asm
	shr.u32 	%r4291, %r4269, 8;
	// begin inline asm
	lop3.b32 %r4289, %r630, %r4291, %r4270, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4293, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4294, %r4270, %r4293;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4297, %r4289, %r4294;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4300, %r641, %r4291, %r4281, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4304, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4305, %r4281, %r4304;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4308, %r4300, %r4305;
	// end inline asm
	// begin inline asm
	mov.b32 %r4316, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4327, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4315, %r7995, -2004318072;
	// begin inline asm
	lop3.b32 %r4313, %r630, %r4315, %r4316, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4317, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4318, %r4316, %r4317;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4321, %r4313, %r4318;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4324, %r641, %r4315, %r4327, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4328, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4329, %r4327, %r4328;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4332, %r4324, %r4329;
	// end inline asm
	shr.u32 	%r4337, %r4315, 8;
	// begin inline asm
	lop3.b32 %r4335, %r630, %r4337, %r4316, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4339, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4340, %r4316, %r4339;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4343, %r4335, %r4340;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4346, %r641, %r4337, %r4327, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4350, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4351, %r4327, %r4350;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4354, %r4346, %r4351;
	// end inline asm
	// begin inline asm
	mov.b32 %r4362, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4373, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4361, %r7996, -2004318072;
	// begin inline asm
	lop3.b32 %r4359, %r630, %r4361, %r4362, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4363, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4364, %r4362, %r4363;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4367, %r4359, %r4364;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4370, %r641, %r4361, %r4373, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4374, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4375, %r4373, %r4374;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4378, %r4370, %r4375;
	// end inline asm
	shr.u32 	%r4383, %r4361, 8;
	// begin inline asm
	lop3.b32 %r4381, %r630, %r4383, %r4362, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4385, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4386, %r4362, %r4385;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4389, %r4381, %r4386;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4392, %r641, %r4383, %r4373, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4396, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4397, %r4373, %r4396;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4400, %r4392, %r4397;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4403, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4405, %r4403, %r4229;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4408, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4410, %r4408, %r4240;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4413, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4415, %r4413, %r4251;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4418, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4420, %r4418, %r4262;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4423, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4425, %r4423, %r4275;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4428, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4430, %r4428, %r4286;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4433, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4435, %r4433, %r4297;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4438, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4440, %r4438, %r4308;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4443, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4445, %r4443, %r4321;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4448, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4450, %r4448, %r4332;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4453, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4455, %r4453, %r4343;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4458, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4460, %r4458, %r4354;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4463, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4465, %r4463, %r4367;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4468, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4470, %r4468, %r4378;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4473, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4475, %r4473, %r4389;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4478, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4480, %r4478, %r4400;
	// end inline asm
	// begin inline asm
	mov.b32 %r4488, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4499, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4485, %r630, %r1423, %r4488, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4489, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4490, %r4488, %r4489;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4493, %r4485, %r4490;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4496, %r641, %r1423, %r4499, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4500, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4501, %r4499, %r4500;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4504, %r4496, %r4501;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4507, %r630, %r1445, %r4488, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4511, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4512, %r4488, %r4511;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4515, %r4507, %r4512;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4518, %r641, %r1445, %r4499, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4522, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4523, %r4499, %r4522;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4526, %r4518, %r4523;
	// end inline asm
	// begin inline asm
	mov.b32 %r4534, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4545, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4531, %r630, %r1469, %r4534, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4535, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4536, %r4534, %r4535;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4539, %r4531, %r4536;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4542, %r641, %r1469, %r4545, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4546, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4547, %r4545, %r4546;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4550, %r4542, %r4547;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4553, %r630, %r1491, %r4534, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4557, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4558, %r4534, %r4557;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4561, %r4553, %r4558;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4564, %r641, %r1491, %r4545, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4568, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4569, %r4545, %r4568;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4572, %r4564, %r4569;
	// end inline asm
	// begin inline asm
	mov.b32 %r4580, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4591, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4577, %r630, %r1515, %r4580, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4581, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4582, %r4580, %r4581;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4585, %r4577, %r4582;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4588, %r641, %r1515, %r4591, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4592, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4593, %r4591, %r4592;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4596, %r4588, %r4593;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4599, %r630, %r1537, %r4580, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4603, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4604, %r4580, %r4603;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4607, %r4599, %r4604;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4610, %r641, %r1537, %r4591, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4614, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4615, %r4591, %r4614;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4618, %r4610, %r4615;
	// end inline asm
	// begin inline asm
	mov.b32 %r4626, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4637, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4623, %r630, %r1561, %r4626, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4627, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4628, %r4626, %r4627;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4631, %r4623, %r4628;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4634, %r641, %r1561, %r4637, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4638, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4639, %r4637, %r4638;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4642, %r4634, %r4639;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4645, %r630, %r1583, %r4626, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4649, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4650, %r4626, %r4649;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4653, %r4645, %r4650;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4656, %r641, %r1583, %r4637, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4660, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4661, %r4637, %r4660;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4664, %r4656, %r4661;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4667, %r206, %r4493, %r4405;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4671, %r206, %r4504, %r4410;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4675, %r206, %r4515, %r4415;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4679, %r206, %r4526, %r4420;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4683, %r206, %r4539, %r4425;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4687, %r206, %r4550, %r4430;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4691, %r206, %r4561, %r4435;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4695, %r206, %r4572, %r4440;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4699, %r206, %r4585, %r4445;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4703, %r206, %r4596, %r4450;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4707, %r206, %r4607, %r4455;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4711, %r206, %r4618, %r4460;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4715, %r206, %r4631, %r4465;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4719, %r206, %r4642, %r4470;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4723, %r206, %r4653, %r4475;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4727, %r206, %r4664, %r4480;
	// end inline asm
	// begin inline asm
	mov.b32 %r4736, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4747, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4733, %r630, %r631, %r4736, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4737, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4738, %r4736, %r4737;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4741, %r4733, %r4738;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4744, %r641, %r631, %r4747, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4748, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4749, %r4747, %r4748;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4752, %r4744, %r4749;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4755, %r630, %r653, %r4736, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4759, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4760, %r4736, %r4759;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4763, %r4755, %r4760;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4766, %r641, %r653, %r4747, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4770, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4771, %r4747, %r4770;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4774, %r4766, %r4771;
	// end inline asm
	// begin inline asm
	mov.b32 %r4782, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4793, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4779, %r630, %r677, %r4782, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4783, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4784, %r4782, %r4783;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4787, %r4779, %r4784;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4790, %r641, %r677, %r4793, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4794, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4795, %r4793, %r4794;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4798, %r4790, %r4795;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4801, %r630, %r699, %r4782, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4805, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4806, %r4782, %r4805;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4809, %r4801, %r4806;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4812, %r641, %r699, %r4793, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4816, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4817, %r4793, %r4816;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4820, %r4812, %r4817;
	// end inline asm
	// begin inline asm
	mov.b32 %r4828, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4839, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4825, %r630, %r723, %r4828, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4829, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4830, %r4828, %r4829;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4833, %r4825, %r4830;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4836, %r641, %r723, %r4839, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4840, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4841, %r4839, %r4840;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4844, %r4836, %r4841;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4847, %r630, %r745, %r4828, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4851, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4852, %r4828, %r4851;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4855, %r4847, %r4852;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4858, %r641, %r745, %r4839, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4862, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4863, %r4839, %r4862;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4866, %r4858, %r4863;
	// end inline asm
	// begin inline asm
	mov.b32 %r4874, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4885, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4871, %r630, %r769, %r4874, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4875, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4876, %r4874, %r4875;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4879, %r4871, %r4876;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4882, %r641, %r769, %r4885, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4886, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4887, %r4885, %r4886;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4890, %r4882, %r4887;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4893, %r630, %r791, %r4874, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4897, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4898, %r4874, %r4897;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4901, %r4893, %r4898;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4904, %r641, %r791, %r4885, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4908, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4909, %r4885, %r4908;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4912, %r4904, %r4909;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4915, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4917, %r4915, %r4741, %r4667;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4921, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4923, %r4921, %r4752, %r4671;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4927, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4929, %r4927, %r4763, %r4675;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4933, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4935, %r4933, %r4774, %r4679;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4939, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4941, %r4939, %r4787, %r4683;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4945, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4947, %r4945, %r4798, %r4687;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4951, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4953, %r4951, %r4809, %r4691;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4957, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4959, %r4957, %r4820, %r4695;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4963, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4965, %r4963, %r4833, %r4699;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4969, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4971, %r4969, %r4844, %r4703;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4975, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4977, %r4975, %r4855, %r4707;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4981, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4983, %r4981, %r4866, %r4711;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4987, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4989, %r4987, %r4879, %r4715;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4993, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4995, %r4993, %r4890, %r4719;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4999, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5001, %r4999, %r4901, %r4723;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5005, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5007, %r5005, %r4912, %r4727;
	// end inline asm
	// begin inline asm
	mov.b32 %r5016, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5027, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5013, %r630, %r2427, %r5016, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5017, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5018, %r5016, %r5017;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5021, %r5013, %r5018;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5024, %r641, %r2427, %r5027, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5028, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5029, %r5027, %r5028;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5032, %r5024, %r5029;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5035, %r630, %r2449, %r5016, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5039, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5040, %r5016, %r5039;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5043, %r5035, %r5040;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5046, %r641, %r2449, %r5027, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5050, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5051, %r5027, %r5050;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5054, %r5046, %r5051;
	// end inline asm
	// begin inline asm
	mov.b32 %r5062, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5073, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5059, %r630, %r2473, %r5062, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5063, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5064, %r5062, %r5063;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5067, %r5059, %r5064;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5070, %r641, %r2473, %r5073, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5074, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5075, %r5073, %r5074;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5078, %r5070, %r5075;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5081, %r630, %r2495, %r5062, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5085, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5086, %r5062, %r5085;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5089, %r5081, %r5086;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5092, %r641, %r2495, %r5073, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5096, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5097, %r5073, %r5096;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5100, %r5092, %r5097;
	// end inline asm
	// begin inline asm
	mov.b32 %r5108, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5119, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5105, %r630, %r2519, %r5108, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5109, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5110, %r5108, %r5109;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5113, %r5105, %r5110;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5116, %r641, %r2519, %r5119, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5120, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5121, %r5119, %r5120;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5124, %r5116, %r5121;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5127, %r630, %r2541, %r5108, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5131, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5132, %r5108, %r5131;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5135, %r5127, %r5132;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5138, %r641, %r2541, %r5119, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5142, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5143, %r5119, %r5142;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5146, %r5138, %r5143;
	// end inline asm
	// begin inline asm
	mov.b32 %r5154, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5165, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5151, %r630, %r2565, %r5154, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5155, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5156, %r5154, %r5155;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5159, %r5151, %r5156;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5162, %r641, %r2565, %r5165, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5166, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5167, %r5165, %r5166;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5170, %r5162, %r5167;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5173, %r630, %r2587, %r5154, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5177, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5178, %r5154, %r5177;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5181, %r5173, %r5178;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5184, %r641, %r2587, %r5165, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5188, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5189, %r5165, %r5188;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5192, %r5184, %r5189;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5266, %r242, %r5021, %r4917;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5263, %r242, %r5032, %r4923;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5275, %r242, %r5043, %r4929;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5272, %r242, %r5054, %r4935;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5284, %r242, %r5067, %r4941;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5281, %r242, %r5078, %r4947;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5293, %r242, %r5089, %r4953;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5290, %r242, %r5100, %r4959;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5302, %r242, %r5113, %r4965;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5299, %r242, %r5124, %r4971;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5311, %r242, %r5135, %r4977;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5308, %r242, %r5146, %r4983;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5320, %r242, %r5159, %r4989;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5317, %r242, %r5170, %r4995;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5329, %r242, %r5181, %r5001;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5326, %r242, %r5192, %r5007;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5259, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5261, %r5259, %r5263;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5264, %r263, %r5266, %r5261;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5268, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5270, %r5268, %r5272;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5273, %r263, %r5275, %r5270;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5277, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5279, %r5277, %r5281;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5282, %r263, %r5284, %r5279;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5286, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5288, %r5286, %r5290;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5291, %r263, %r5293, %r5288;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5295, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5297, %r5295, %r5299;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5300, %r263, %r5302, %r5297;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5304, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5306, %r5304, %r5308;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5309, %r263, %r5311, %r5306;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5313, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5315, %r5313, %r5317;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5318, %r263, %r5320, %r5315;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5322, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5324, %r5322, %r5326;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5327, %r263, %r5329, %r5324;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5331, %r266, %r5266;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5334, %r263, %r5263, %r5331;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5338, %r266, %r5275;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5341, %r263, %r5272, %r5338;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5345, %r266, %r5284;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5348, %r263, %r5281, %r5345;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5352, %r266, %r5293;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5355, %r263, %r5290, %r5352;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5359, %r266, %r5302;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5362, %r263, %r5299, %r5359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5366, %r266, %r5311;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5369, %r263, %r5308, %r5366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5373, %r266, %r5320;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5376, %r263, %r5317, %r5373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5380, %r266, %r5329;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5383, %r263, %r5326, %r5380;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5474, %r5471}, {%r322, %r328, %r325, %r331}, {%r5264, %r5334}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5483, %r5480}, {%r322, %r328, %r325, %r331}, {%r5273, %r5341}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5492, %r5489}, {%r322, %r328, %r325, %r331}, {%r5282, %r5348}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5501, %r5498}, {%r322, %r328, %r325, %r331}, {%r5291, %r5355}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5510, %r5507}, {%r322, %r328, %r325, %r331}, {%r5300, %r5362}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5519, %r5516}, {%r322, %r328, %r325, %r331}, {%r5309, %r5369}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5528, %r5525}, {%r322, %r328, %r325, %r331}, {%r5318, %r5376}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5537, %r5534}, {%r322, %r328, %r325, %r331}, {%r5327, %r5383}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5467, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5469, %r5467, %r5471;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5472, %r366, %r5474, %r5469;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5476, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5478, %r5476, %r5480;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5481, %r366, %r5483, %r5478;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5485, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5487, %r5485, %r5489;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5490, %r366, %r5492, %r5487;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5494, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5496, %r5494, %r5498;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5499, %r366, %r5501, %r5496;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5503, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5505, %r5503, %r5507;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5508, %r366, %r5510, %r5505;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5512, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5514, %r5512, %r5516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5517, %r366, %r5519, %r5514;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5521, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5523, %r5521, %r5525;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5526, %r366, %r5528, %r5523;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5530, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5532, %r5530, %r5534;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5535, %r366, %r5537, %r5532;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5539, %r369, %r5474;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5542, %r366, %r5471, %r5539;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5546, %r369, %r5483;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5549, %r366, %r5480, %r5546;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5553, %r369, %r5492;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5556, %r366, %r5489, %r5553;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5560, %r369, %r5501;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5563, %r366, %r5498, %r5560;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5567, %r369, %r5510;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5570, %r366, %r5507, %r5567;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5574, %r369, %r5519;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5577, %r366, %r5516, %r5574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5581, %r369, %r5528;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5584, %r366, %r5525, %r5581;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5588, %r369, %r5537;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5591, %r366, %r5534, %r5588;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5595, %r5596}, {%r400, %r406, %r403, %r409}, {%r5472, %r5542}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5605, %r5606}, {%r400, %r406, %r403, %r409}, {%r5481, %r5549}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5615, %r5616}, {%r400, %r406, %r403, %r409}, {%r5490, %r5556}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5625, %r5626}, {%r400, %r406, %r403, %r409}, {%r5499, %r5563}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5635, %r5636}, {%r400, %r406, %r403, %r409}, {%r5508, %r5570}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5645, %r5646}, {%r400, %r406, %r403, %r409}, {%r5517, %r5577}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5655, %r5656}, {%r400, %r406, %r403, %r409}, {%r5526, %r5584}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5665, %r5666}, {%r400, %r406, %r403, %r409}, {%r5535, %r5591}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5675, %r109, %r5595;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5678, %r109, %r5596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5681, %r109, %r5605;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5684, %r109, %r5606;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5687, %r109, %r5615;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5690, %r109, %r5616;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5693, %r109, %r5625;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5696, %r109, %r5626;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5699, %r109, %r5635;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5702, %r109, %r5636;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5705, %r109, %r5645;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5708, %r109, %r5646;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5711, %r109, %r5655;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5714, %r109, %r5656;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5717, %r109, %r5665;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5720, %r109, %r5666;
	// end inline asm
	// begin inline asm
	mov.b32 %r5723, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5724, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5725, %r5675, %r5723;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5728, %r5725, %r5724;
	// end inline asm
	// begin inline asm
	mov.b32 %r5731, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5732, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5733, %r5678, %r5731;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5736, %r5733, %r5732;
	// end inline asm
	// begin inline asm
	mov.b32 %r5739, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5740, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5741, %r5681, %r5739;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5744, %r5741, %r5740;
	// end inline asm
	// begin inline asm
	mov.b32 %r5747, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5748, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5749, %r5684, %r5747;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5752, %r5749, %r5748;
	// end inline asm
	// begin inline asm
	mov.b32 %r5755, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5756, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5757, %r5687, %r5755;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5760, %r5757, %r5756;
	// end inline asm
	// begin inline asm
	mov.b32 %r5763, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5764, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5765, %r5690, %r5763;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5768, %r5765, %r5764;
	// end inline asm
	// begin inline asm
	mov.b32 %r5771, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5772, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5773, %r5693, %r5771;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5776, %r5773, %r5772;
	// end inline asm
	// begin inline asm
	mov.b32 %r5779, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5780, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5781, %r5696, %r5779;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5784, %r5781, %r5780;
	// end inline asm
	// begin inline asm
	mov.b32 %r5787, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5788, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5789, %r5699, %r5787;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5792, %r5789, %r5788;
	// end inline asm
	// begin inline asm
	mov.b32 %r5795, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5796, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5797, %r5702, %r5795;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5800, %r5797, %r5796;
	// end inline asm
	// begin inline asm
	mov.b32 %r5803, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5804, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5805, %r5705, %r5803;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5808, %r5805, %r5804;
	// end inline asm
	// begin inline asm
	mov.b32 %r5811, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5812, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5813, %r5708, %r5811;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5816, %r5813, %r5812;
	// end inline asm
	// begin inline asm
	mov.b32 %r5819, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5820, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5821, %r5711, %r5819;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5824, %r5821, %r5820;
	// end inline asm
	// begin inline asm
	mov.b32 %r5827, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5828, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5829, %r5714, %r5827;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5832, %r5829, %r5828;
	// end inline asm
	// begin inline asm
	mov.b32 %r5835, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5836, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5837, %r5717, %r5835;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5840, %r5837, %r5836;
	// end inline asm
	// begin inline asm
	mov.b32 %r5843, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5844, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5845, %r5720, %r5843;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5848, %r5845, %r5844;
	// end inline asm
	// begin inline asm
	mov.b32 %r5854, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5852, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5853, %r5854, %r5852;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5856, %r5728, %r5853;
	// end inline asm
	// begin inline asm
	mov.b32 %r5859, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5860, %r5854, %r5859;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5863, %r5736, %r5860;
	// end inline asm
	// begin inline asm
	mov.b32 %r5866, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5867, %r5854, %r5866;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5870, %r5744, %r5867;
	// end inline asm
	// begin inline asm
	mov.b32 %r5873, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5874, %r5854, %r5873;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5877, %r5752, %r5874;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5880, %r5856, %r5870, %r2291;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5884, %r5863, %r5877, %r2291;
	// end inline asm
	shl.b32 	%r5891, %r5884, 4;
	// begin inline asm
	lop3.b32 %r5888, %r2297, %r5880, %r5891, 202;
	// end inline asm
	xor.b32  	%r7865, %r5888, -2004318072;
	// begin inline asm
	mov.b32 %r5895, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5893, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5894, %r5895, %r5893;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5897, %r5760, %r5894;
	// end inline asm
	// begin inline asm
	mov.b32 %r5900, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5901, %r5895, %r5900;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5904, %r5768, %r5901;
	// end inline asm
	// begin inline asm
	mov.b32 %r5907, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5908, %r5895, %r5907;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5911, %r5776, %r5908;
	// end inline asm
	// begin inline asm
	mov.b32 %r5914, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5915, %r5895, %r5914;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5918, %r5784, %r5915;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5921, %r5897, %r5911, %r2291;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5925, %r5904, %r5918, %r2291;
	// end inline asm
	shl.b32 	%r5932, %r5925, 4;
	// begin inline asm
	lop3.b32 %r5929, %r2297, %r5921, %r5932, 202;
	// end inline asm
	xor.b32  	%r7866, %r5929, -2004318072;
	// begin inline asm
	mov.b32 %r5936, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5934, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5935, %r5936, %r5934;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5938, %r5792, %r5935;
	// end inline asm
	// begin inline asm
	mov.b32 %r5941, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5942, %r5936, %r5941;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5945, %r5800, %r5942;
	// end inline asm
	// begin inline asm
	mov.b32 %r5948, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5949, %r5936, %r5948;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5952, %r5808, %r5949;
	// end inline asm
	// begin inline asm
	mov.b32 %r5955, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5956, %r5936, %r5955;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5959, %r5816, %r5956;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5962, %r5938, %r5952, %r2291;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5966, %r5945, %r5959, %r2291;
	// end inline asm
	shl.b32 	%r5973, %r5966, 4;
	// begin inline asm
	lop3.b32 %r5970, %r2297, %r5962, %r5973, 202;
	// end inline asm
	xor.b32  	%r7867, %r5970, -2004318072;
	// begin inline asm
	mov.b32 %r5977, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5975, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5976, %r5977, %r5975;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5979, %r5824, %r5976;
	// end inline asm
	// begin inline asm
	mov.b32 %r5982, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5983, %r5977, %r5982;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5986, %r5832, %r5983;
	// end inline asm
	// begin inline asm
	mov.b32 %r5989, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5990, %r5977, %r5989;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5993, %r5840, %r5990;
	// end inline asm
	// begin inline asm
	mov.b32 %r5996, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5997, %r5977, %r5996;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6000, %r5848, %r5997;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6003, %r5979, %r5993, %r2291;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6007, %r5986, %r6000, %r2291;
	// end inline asm
	shl.b32 	%r6014, %r6007, 4;
	// begin inline asm
	lop3.b32 %r6011, %r2297, %r6003, %r6014, 202;
	// end inline asm
	xor.b32  	%r7868, %r6011, -2004318072;
	st.shared.u32 	[%rd152], %r7865;
	st.shared.u32 	[%rd153], %r7866;
	st.shared.u32 	[%rd154], %r7867;
	st.shared.u32 	[%rd155], %r7868;
	ld.shared.u32 	%r7997, [%rd93];
	ld.shared.u32 	%r7998, [%rd95];
	ld.shared.u32 	%r7999, [%rd97];
	ld.shared.u32 	%r8000, [%rd99];
	// begin inline asm
	mov.b32 %r6020, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6031, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6019, %r7997, -2004318072;
	// begin inline asm
	lop3.b32 %r6017, %r630, %r6019, %r6020, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6021, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6022, %r6020, %r6021;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6025, %r6017, %r6022;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6028, %r641, %r6019, %r6031, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6032, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6033, %r6031, %r6032;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6036, %r6028, %r6033;
	// end inline asm
	shr.u32 	%r6041, %r6019, 8;
	// begin inline asm
	lop3.b32 %r6039, %r630, %r6041, %r6020, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6043, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6044, %r6020, %r6043;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6047, %r6039, %r6044;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6050, %r641, %r6041, %r6031, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6054, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6055, %r6031, %r6054;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6058, %r6050, %r6055;
	// end inline asm
	// begin inline asm
	mov.b32 %r6066, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6077, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6065, %r7998, -2004318072;
	// begin inline asm
	lop3.b32 %r6063, %r630, %r6065, %r6066, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6067, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6068, %r6066, %r6067;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6071, %r6063, %r6068;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6074, %r641, %r6065, %r6077, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6078, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6079, %r6077, %r6078;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6082, %r6074, %r6079;
	// end inline asm
	shr.u32 	%r6087, %r6065, 8;
	// begin inline asm
	lop3.b32 %r6085, %r630, %r6087, %r6066, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6089, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6090, %r6066, %r6089;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6093, %r6085, %r6090;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6096, %r641, %r6087, %r6077, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6100, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6101, %r6077, %r6100;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6104, %r6096, %r6101;
	// end inline asm
	// begin inline asm
	mov.b32 %r6112, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6123, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6111, %r7999, -2004318072;
	// begin inline asm
	lop3.b32 %r6109, %r630, %r6111, %r6112, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6113, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6114, %r6112, %r6113;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6117, %r6109, %r6114;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6120, %r641, %r6111, %r6123, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6124, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6125, %r6123, %r6124;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6128, %r6120, %r6125;
	// end inline asm
	shr.u32 	%r6133, %r6111, 8;
	// begin inline asm
	lop3.b32 %r6131, %r630, %r6133, %r6112, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6135, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6136, %r6112, %r6135;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6139, %r6131, %r6136;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6142, %r641, %r6133, %r6123, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6146, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6147, %r6123, %r6146;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6150, %r6142, %r6147;
	// end inline asm
	// begin inline asm
	mov.b32 %r6158, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6169, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6157, %r8000, -2004318072;
	// begin inline asm
	lop3.b32 %r6155, %r630, %r6157, %r6158, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6159, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6160, %r6158, %r6159;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6163, %r6155, %r6160;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6166, %r641, %r6157, %r6169, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6170, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6171, %r6169, %r6170;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6174, %r6166, %r6171;
	// end inline asm
	shr.u32 	%r6179, %r6157, 8;
	// begin inline asm
	lop3.b32 %r6177, %r630, %r6179, %r6158, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6181, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6182, %r6158, %r6181;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6185, %r6177, %r6182;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6188, %r641, %r6179, %r6169, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6192, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6193, %r6169, %r6192;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6196, %r6188, %r6193;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6199, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6201, %r6199, %r6025;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6204, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6206, %r6204, %r6036;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6209, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6211, %r6209, %r6047;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6214, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6216, %r6214, %r6058;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6219, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6221, %r6219, %r6071;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6224, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6226, %r6224, %r6082;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6229, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6231, %r6229, %r6093;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6234, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6236, %r6234, %r6104;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6239, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6241, %r6239, %r6117;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6244, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6246, %r6244, %r6128;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6249, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6251, %r6249, %r6139;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6254, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6256, %r6254, %r6150;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6259, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6261, %r6259, %r6163;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6264, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6266, %r6264, %r6174;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6269, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6271, %r6269, %r6185;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6274, %r260;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6276, %r6274, %r6196;
	// end inline asm
	// begin inline asm
	mov.b32 %r6284, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6295, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6281, %r630, %r631, %r6284, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6285, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6286, %r6284, %r6285;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6289, %r6281, %r6286;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6292, %r641, %r631, %r6295, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6296, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6297, %r6295, %r6296;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6300, %r6292, %r6297;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6303, %r630, %r653, %r6284, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6307, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6308, %r6284, %r6307;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6311, %r6303, %r6308;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6314, %r641, %r653, %r6295, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6318, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6319, %r6295, %r6318;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6322, %r6314, %r6319;
	// end inline asm
	// begin inline asm
	mov.b32 %r6330, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6341, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6327, %r630, %r677, %r6330, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6331, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6332, %r6330, %r6331;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6335, %r6327, %r6332;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6338, %r641, %r677, %r6341, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6342, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6343, %r6341, %r6342;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6346, %r6338, %r6343;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6349, %r630, %r699, %r6330, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6353, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6354, %r6330, %r6353;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6357, %r6349, %r6354;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6360, %r641, %r699, %r6341, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6364, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6365, %r6341, %r6364;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6368, %r6360, %r6365;
	// end inline asm
	// begin inline asm
	mov.b32 %r6376, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6387, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6373, %r630, %r723, %r6376, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6377, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6378, %r6376, %r6377;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6381, %r6373, %r6378;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6384, %r641, %r723, %r6387, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6388, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6389, %r6387, %r6388;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6392, %r6384, %r6389;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6395, %r630, %r745, %r6376, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6399, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6400, %r6376, %r6399;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6403, %r6395, %r6400;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6406, %r641, %r745, %r6387, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6410, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6411, %r6387, %r6410;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6414, %r6406, %r6411;
	// end inline asm
	// begin inline asm
	mov.b32 %r6422, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6433, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6419, %r630, %r769, %r6422, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6423, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6424, %r6422, %r6423;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6427, %r6419, %r6424;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6430, %r641, %r769, %r6433, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6434, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6435, %r6433, %r6434;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6438, %r6430, %r6435;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6441, %r630, %r791, %r6422, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6445, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6446, %r6422, %r6445;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6449, %r6441, %r6446;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6452, %r641, %r791, %r6433, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6456, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6457, %r6433, %r6456;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6460, %r6452, %r6457;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6463, %r206, %r6289, %r6201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6467, %r206, %r6300, %r6206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6471, %r206, %r6311, %r6211;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6475, %r206, %r6322, %r6216;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6479, %r206, %r6335, %r6221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6483, %r206, %r6346, %r6226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6487, %r206, %r6357, %r6231;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6491, %r206, %r6368, %r6236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6495, %r206, %r6381, %r6241;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6499, %r206, %r6392, %r6246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6503, %r206, %r6403, %r6251;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6507, %r206, %r6414, %r6256;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6511, %r206, %r6427, %r6261;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6515, %r206, %r6438, %r6266;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6519, %r206, %r6449, %r6271;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6523, %r206, %r6460, %r6276;
	// end inline asm
	// begin inline asm
	mov.b32 %r6532, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6543, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6529, %r630, %r2427, %r6532, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6533, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6534, %r6532, %r6533;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6537, %r6529, %r6534;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6540, %r641, %r2427, %r6543, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6544, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6545, %r6543, %r6544;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6548, %r6540, %r6545;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6551, %r630, %r2449, %r6532, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6555, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6556, %r6532, %r6555;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6559, %r6551, %r6556;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6562, %r641, %r2449, %r6543, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6566, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6567, %r6543, %r6566;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6570, %r6562, %r6567;
	// end inline asm
	// begin inline asm
	mov.b32 %r6578, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6589, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6575, %r630, %r2473, %r6578, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6579, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6580, %r6578, %r6579;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6583, %r6575, %r6580;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6586, %r641, %r2473, %r6589, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6590, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6591, %r6589, %r6590;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6594, %r6586, %r6591;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6597, %r630, %r2495, %r6578, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6601, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6602, %r6578, %r6601;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6605, %r6597, %r6602;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6608, %r641, %r2495, %r6589, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6612, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6613, %r6589, %r6612;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6616, %r6608, %r6613;
	// end inline asm
	// begin inline asm
	mov.b32 %r6624, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6635, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6621, %r630, %r2519, %r6624, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6625, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6626, %r6624, %r6625;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6629, %r6621, %r6626;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6632, %r641, %r2519, %r6635, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6636, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6637, %r6635, %r6636;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6640, %r6632, %r6637;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6643, %r630, %r2541, %r6624, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6647, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6648, %r6624, %r6647;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6651, %r6643, %r6648;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6654, %r641, %r2541, %r6635, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6658, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6659, %r6635, %r6658;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6662, %r6654, %r6659;
	// end inline asm
	// begin inline asm
	mov.b32 %r6670, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6681, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6667, %r630, %r2565, %r6670, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6671, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6672, %r6670, %r6671;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6675, %r6667, %r6672;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6678, %r641, %r2565, %r6681, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6682, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6683, %r6681, %r6682;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6686, %r6678, %r6683;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6689, %r630, %r2587, %r6670, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6693, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6694, %r6670, %r6693;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6697, %r6689, %r6694;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6700, %r641, %r2587, %r6681, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6704, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6705, %r6681, %r6704;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6708, %r6700, %r6705;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6711, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6713, %r6711, %r6537, %r6463;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6717, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6719, %r6717, %r6548, %r6467;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6723, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6725, %r6723, %r6559, %r6471;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6729, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6731, %r6729, %r6570, %r6475;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6735, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6737, %r6735, %r6583, %r6479;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6741, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6743, %r6741, %r6594, %r6483;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6747, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6749, %r6747, %r6605, %r6487;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6753, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6755, %r6753, %r6616, %r6491;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6759, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6761, %r6759, %r6629, %r6495;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6765, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6767, %r6765, %r6640, %r6499;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6771, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6773, %r6771, %r6651, %r6503;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6777, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6779, %r6777, %r6662, %r6507;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6783, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6785, %r6783, %r6675, %r6511;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6789, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6791, %r6789, %r6686, %r6515;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6795, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6797, %r6795, %r6697, %r6519;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6801, %r224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6803, %r6801, %r6708, %r6523;
	// end inline asm
	// begin inline asm
	mov.b32 %r6812, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6823, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6809, %r630, %r4223, %r6812, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6813, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6814, %r6812, %r6813;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6817, %r6809, %r6814;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6820, %r641, %r4223, %r6823, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6824, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6825, %r6823, %r6824;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6828, %r6820, %r6825;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6831, %r630, %r4245, %r6812, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6835, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6836, %r6812, %r6835;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6839, %r6831, %r6836;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6842, %r641, %r4245, %r6823, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6846, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6847, %r6823, %r6846;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6850, %r6842, %r6847;
	// end inline asm
	// begin inline asm
	mov.b32 %r6858, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6869, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6855, %r630, %r4269, %r6858, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6859, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6860, %r6858, %r6859;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6863, %r6855, %r6860;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6866, %r641, %r4269, %r6869, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6870, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6871, %r6869, %r6870;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6874, %r6866, %r6871;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6877, %r630, %r4291, %r6858, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6881, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6882, %r6858, %r6881;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6885, %r6877, %r6882;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6888, %r641, %r4291, %r6869, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6892, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6893, %r6869, %r6892;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6896, %r6888, %r6893;
	// end inline asm
	// begin inline asm
	mov.b32 %r6904, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6915, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6901, %r630, %r4315, %r6904, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6905, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6906, %r6904, %r6905;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6909, %r6901, %r6906;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6912, %r641, %r4315, %r6915, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6916, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6917, %r6915, %r6916;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6920, %r6912, %r6917;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6923, %r630, %r4337, %r6904, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6927, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6928, %r6904, %r6927;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6931, %r6923, %r6928;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6934, %r641, %r4337, %r6915, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6938, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6939, %r6915, %r6938;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6942, %r6934, %r6939;
	// end inline asm
	// begin inline asm
	mov.b32 %r6950, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6961, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6947, %r630, %r4361, %r6950, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6951, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6952, %r6950, %r6951;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6955, %r6947, %r6952;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6958, %r641, %r4361, %r6961, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6962, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6963, %r6961, %r6962;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6966, %r6958, %r6963;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6969, %r630, %r4383, %r6950, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6973, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6974, %r6950, %r6973;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6977, %r6969, %r6974;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6980, %r641, %r4383, %r6961, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6984, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6985, %r6961, %r6984;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6988, %r6980, %r6985;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7062, %r242, %r6817, %r6713;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7059, %r242, %r6828, %r6719;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7071, %r242, %r6839, %r6725;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7068, %r242, %r6850, %r6731;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7080, %r242, %r6863, %r6737;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7077, %r242, %r6874, %r6743;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7089, %r242, %r6885, %r6749;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7086, %r242, %r6896, %r6755;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7098, %r242, %r6909, %r6761;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7095, %r242, %r6920, %r6767;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7107, %r242, %r6931, %r6773;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7104, %r242, %r6942, %r6779;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7116, %r242, %r6955, %r6785;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7113, %r242, %r6966, %r6791;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7125, %r242, %r6977, %r6797;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7122, %r242, %r6988, %r6803;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7055, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7057, %r7055, %r7059;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7060, %r263, %r7062, %r7057;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7064, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7066, %r7064, %r7068;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7069, %r263, %r7071, %r7066;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7073, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7075, %r7073, %r7077;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7078, %r263, %r7080, %r7075;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7082, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7084, %r7082, %r7086;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7087, %r263, %r7089, %r7084;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7091, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7093, %r7091, %r7095;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7096, %r263, %r7098, %r7093;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7100, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7102, %r7100, %r7104;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7105, %r263, %r7107, %r7102;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7109, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7111, %r7109, %r7113;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7114, %r263, %r7116, %r7111;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7118, %r266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7120, %r7118, %r7122;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7123, %r263, %r7125, %r7120;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7127, %r266, %r7062;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7130, %r263, %r7059, %r7127;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7134, %r266, %r7071;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7137, %r263, %r7068, %r7134;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7141, %r266, %r7080;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7144, %r263, %r7077, %r7141;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7148, %r266, %r7089;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7151, %r263, %r7086, %r7148;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7155, %r266, %r7098;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7158, %r263, %r7095, %r7155;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7162, %r266, %r7107;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7165, %r263, %r7104, %r7162;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7169, %r266, %r7116;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7172, %r263, %r7113, %r7169;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7176, %r266, %r7125;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7179, %r263, %r7122, %r7176;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7270, %r7267}, {%r322, %r328, %r325, %r331}, {%r7060, %r7130}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7279, %r7276}, {%r322, %r328, %r325, %r331}, {%r7069, %r7137}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7288, %r7285}, {%r322, %r328, %r325, %r331}, {%r7078, %r7144}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7297, %r7294}, {%r322, %r328, %r325, %r331}, {%r7087, %r7151}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7306, %r7303}, {%r322, %r328, %r325, %r331}, {%r7096, %r7158}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7315, %r7312}, {%r322, %r328, %r325, %r331}, {%r7105, %r7165}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7324, %r7321}, {%r322, %r328, %r325, %r331}, {%r7114, %r7172}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7333, %r7330}, {%r322, %r328, %r325, %r331}, {%r7123, %r7179}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7263, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7265, %r7263, %r7267;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7268, %r366, %r7270, %r7265;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7272, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7274, %r7272, %r7276;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7277, %r366, %r7279, %r7274;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7281, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7283, %r7281, %r7285;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7286, %r366, %r7288, %r7283;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7290, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7292, %r7290, %r7294;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7295, %r366, %r7297, %r7292;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7299, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7301, %r7299, %r7303;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7304, %r366, %r7306, %r7301;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7308, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7310, %r7308, %r7312;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7313, %r366, %r7315, %r7310;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7317, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7319, %r7317, %r7321;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7322, %r366, %r7324, %r7319;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7326, %r369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7328, %r7326, %r7330;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7331, %r366, %r7333, %r7328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7335, %r369, %r7270;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7338, %r366, %r7267, %r7335;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7342, %r369, %r7279;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7345, %r366, %r7276, %r7342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7349, %r369, %r7288;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7352, %r366, %r7285, %r7349;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7356, %r369, %r7297;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7359, %r366, %r7294, %r7356;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7363, %r369, %r7306;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7366, %r366, %r7303, %r7363;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7370, %r369, %r7315;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7373, %r366, %r7312, %r7370;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7377, %r369, %r7324;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7380, %r366, %r7321, %r7377;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7384, %r369, %r7333;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7387, %r366, %r7330, %r7384;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7391, %r7392}, {%r400, %r406, %r403, %r409}, {%r7268, %r7338}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7401, %r7402}, {%r400, %r406, %r403, %r409}, {%r7277, %r7345}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7411, %r7412}, {%r400, %r406, %r403, %r409}, {%r7286, %r7352}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7421, %r7422}, {%r400, %r406, %r403, %r409}, {%r7295, %r7359}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7431, %r7432}, {%r400, %r406, %r403, %r409}, {%r7304, %r7366}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7441, %r7442}, {%r400, %r406, %r403, %r409}, {%r7313, %r7373}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7451, %r7452}, {%r400, %r406, %r403, %r409}, {%r7322, %r7380}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7461, %r7462}, {%r400, %r406, %r403, %r409}, {%r7331, %r7387}, {%r7968, %r7968};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7471, %r109, %r7391;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7474, %r109, %r7392;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7477, %r109, %r7401;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7480, %r109, %r7402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7483, %r109, %r7411;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7486, %r109, %r7412;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7489, %r109, %r7421;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7492, %r109, %r7422;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7495, %r109, %r7431;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7498, %r109, %r7432;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7501, %r109, %r7441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7504, %r109, %r7442;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7507, %r109, %r7451;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7510, %r109, %r7452;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7513, %r109, %r7461;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7516, %r109, %r7462;
	// end inline asm
	// begin inline asm
	mov.b32 %r7519, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7520, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7521, %r7471, %r7519;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7524, %r7521, %r7520;
	// end inline asm
	// begin inline asm
	mov.b32 %r7527, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7528, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7529, %r7474, %r7527;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7532, %r7529, %r7528;
	// end inline asm
	// begin inline asm
	mov.b32 %r7535, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7536, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7537, %r7477, %r7535;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7540, %r7537, %r7536;
	// end inline asm
	// begin inline asm
	mov.b32 %r7543, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7544, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7545, %r7480, %r7543;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7548, %r7545, %r7544;
	// end inline asm
	// begin inline asm
	mov.b32 %r7551, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7552, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7553, %r7483, %r7551;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7556, %r7553, %r7552;
	// end inline asm
	// begin inline asm
	mov.b32 %r7559, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7560, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7561, %r7486, %r7559;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7564, %r7561, %r7560;
	// end inline asm
	// begin inline asm
	mov.b32 %r7567, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7568, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7569, %r7489, %r7567;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7572, %r7569, %r7568;
	// end inline asm
	// begin inline asm
	mov.b32 %r7575, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7576, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7577, %r7492, %r7575;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7580, %r7577, %r7576;
	// end inline asm
	// begin inline asm
	mov.b32 %r7583, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7584, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7585, %r7495, %r7583;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7588, %r7585, %r7584;
	// end inline asm
	// begin inline asm
	mov.b32 %r7591, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7592, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7593, %r7498, %r7591;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7596, %r7593, %r7592;
	// end inline asm
	// begin inline asm
	mov.b32 %r7599, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7600, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7601, %r7501, %r7599;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7604, %r7601, %r7600;
	// end inline asm
	// begin inline asm
	mov.b32 %r7607, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7608, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7609, %r7504, %r7607;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7612, %r7609, %r7608;
	// end inline asm
	// begin inline asm
	mov.b32 %r7615, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7616, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7617, %r7507, %r7615;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7620, %r7617, %r7616;
	// end inline asm
	// begin inline asm
	mov.b32 %r7623, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7624, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7625, %r7510, %r7623;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7628, %r7625, %r7624;
	// end inline asm
	// begin inline asm
	mov.b32 %r7631, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7632, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7633, %r7513, %r7631;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7636, %r7633, %r7632;
	// end inline asm
	// begin inline asm
	mov.b32 %r7639, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7640, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7641, %r7516, %r7639;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7644, %r7641, %r7640;
	// end inline asm
	// begin inline asm
	mov.b32 %r7650, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7648, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7649, %r7650, %r7648;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7652, %r7524, %r7649;
	// end inline asm
	// begin inline asm
	mov.b32 %r7655, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7656, %r7650, %r7655;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7659, %r7532, %r7656;
	// end inline asm
	// begin inline asm
	mov.b32 %r7662, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7663, %r7650, %r7662;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7666, %r7540, %r7663;
	// end inline asm
	// begin inline asm
	mov.b32 %r7669, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7670, %r7650, %r7669;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7673, %r7548, %r7670;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7676, %r7652, %r7666, %r2291;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7680, %r7659, %r7673, %r2291;
	// end inline asm
	shl.b32 	%r7687, %r7680, 4;
	// begin inline asm
	lop3.b32 %r7684, %r2297, %r7676, %r7687, 202;
	// end inline asm
	xor.b32  	%r7869, %r7684, -2004318072;
	// begin inline asm
	mov.b32 %r7691, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7689, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7690, %r7691, %r7689;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7693, %r7556, %r7690;
	// end inline asm
	// begin inline asm
	mov.b32 %r7696, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7697, %r7691, %r7696;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7700, %r7564, %r7697;
	// end inline asm
	// begin inline asm
	mov.b32 %r7703, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7704, %r7691, %r7703;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7707, %r7572, %r7704;
	// end inline asm
	// begin inline asm
	mov.b32 %r7710, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7711, %r7691, %r7710;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7714, %r7580, %r7711;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7717, %r7693, %r7707, %r2291;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7721, %r7700, %r7714, %r2291;
	// end inline asm
	shl.b32 	%r7728, %r7721, 4;
	// begin inline asm
	lop3.b32 %r7725, %r2297, %r7717, %r7728, 202;
	// end inline asm
	xor.b32  	%r7870, %r7725, -2004318072;
	// begin inline asm
	mov.b32 %r7732, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7730, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7731, %r7732, %r7730;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7734, %r7588, %r7731;
	// end inline asm
	// begin inline asm
	mov.b32 %r7737, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7738, %r7732, %r7737;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7741, %r7596, %r7738;
	// end inline asm
	// begin inline asm
	mov.b32 %r7744, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7745, %r7732, %r7744;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7748, %r7604, %r7745;
	// end inline asm
	// begin inline asm
	mov.b32 %r7751, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7752, %r7732, %r7751;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7755, %r7612, %r7752;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7758, %r7734, %r7748, %r2291;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7762, %r7741, %r7755, %r2291;
	// end inline asm
	shl.b32 	%r7769, %r7762, 4;
	// begin inline asm
	lop3.b32 %r7766, %r2297, %r7758, %r7769, 202;
	// end inline asm
	xor.b32  	%r7871, %r7766, -2004318072;
	// begin inline asm
	mov.b32 %r7773, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7771, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7772, %r7773, %r7771;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7775, %r7620, %r7772;
	// end inline asm
	// begin inline asm
	mov.b32 %r7778, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7779, %r7773, %r7778;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7782, %r7628, %r7779;
	// end inline asm
	// begin inline asm
	mov.b32 %r7785, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7786, %r7773, %r7785;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7789, %r7636, %r7786;
	// end inline asm
	// begin inline asm
	mov.b32 %r7792, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7793, %r7773, %r7792;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7796, %r7644, %r7793;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7799, %r7775, %r7789, %r2291;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7803, %r7782, %r7796, %r2291;
	// end inline asm
	shl.b32 	%r7810, %r7803, 4;
	// begin inline asm
	lop3.b32 %r7807, %r2297, %r7799, %r7810, 202;
	// end inline asm
	xor.b32  	%r7872, %r7807, -2004318072;
	st.shared.u32 	[%rd152], %r7869;
	st.shared.u32 	[%rd153], %r7870;
	st.shared.u32 	[%rd154], %r7871;
	st.shared.u32 	[%rd155], %r7872;
	add.s32 	%r8001, %r8001, 64;
	add.s64 	%rd155, %rd155, 8324;
	add.s64 	%rd154, %rd154, 8324;
	add.s64 	%rd153, %rd153, 8324;
	add.s64 	%rd152, %rd152, 8324;
	setp.eq.s32 	%p216, %r8001, 256;
	@%p216 bra 	$L__BB0_85;
	bra.uni 	$L__BB0_84;
$L__BB0_85:                             // %guard_exit17352
                                        //   in Loop: Header=BB0_83 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r7878, [%rd5];
	ld.shared.u32 	%r7879, [%rd6+128];
	ld.shared.u32 	%r7886, [%rd6+4];
	ld.shared.u32 	%r7887, [%rd6+132];
	ld.shared.u32 	%r7894, [%rd5+8324];
	ld.shared.u32 	%r7895, [%rd6+8452];
	ld.shared.u32 	%r7902, [%rd6+8328];
	ld.shared.u32 	%r7903, [%rd6+8456];
	ld.shared.u32 	%r7910, [%rd5+16648];
	ld.shared.u32 	%r7911, [%rd6+16776];
	ld.shared.u32 	%r7918, [%rd6+16652];
	ld.shared.u32 	%r7919, [%rd6+16780];
	ld.shared.u32 	%r7926, [%rd5+24972];
	ld.shared.u32 	%r7927, [%rd6+25100];
	ld.shared.u32 	%r7934, [%rd6+24976];
	ld.shared.u32 	%r7935, [%rd6+25104];
	// begin inline asm
	prmt.b32 %r7873, %r7878, %r7879, %r544;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7877, %r7878, %r7879, %r548;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7881, %r7886, %r7887, %r544;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7885, %r7886, %r7887, %r548;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7889, %r7894, %r7895, %r544;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7893, %r7894, %r7895, %r548;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7897, %r7902, %r7903, %r544;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7901, %r7902, %r7903, %r548;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7905, %r7910, %r7911, %r544;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7909, %r7910, %r7911, %r548;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7913, %r7918, %r7919, %r544;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7917, %r7918, %r7919, %r548;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7921, %r7926, %r7927, %r544;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7925, %r7926, %r7927, %r548;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7929, %r7934, %r7935, %r544;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7933, %r7934, %r7935, %r548;
	// end inline asm
	selp.b32 	%r7937, %r7877, %r7873, %p203;
	shfl.sync.bfly.b32	%r149, %r7937, 8, 31, -1;
	selp.b32 	%r7938, %r7885, %r7881, %p203;
	shfl.sync.bfly.b32	%r150, %r7938, 8, 31, -1;
	selp.b32 	%r7939, %r7893, %r7889, %p203;
	shfl.sync.bfly.b32	%r7940, %r7939, 8, 31, -1;
	selp.b32 	%r7941, %r7901, %r7897, %p203;
	shfl.sync.bfly.b32	%r7942, %r7941, 8, 31, -1;
	selp.b32 	%r7943, %r7909, %r7905, %p203;
	shfl.sync.bfly.b32	%r7944, %r7943, 8, 31, -1;
	selp.b32 	%r7945, %r7917, %r7913, %p203;
	shfl.sync.bfly.b32	%r7946, %r7945, 8, 31, -1;
	selp.b32 	%r7947, %r7925, %r7921, %p203;
	shfl.sync.bfly.b32	%r7948, %r7947, 8, 31, -1;
	selp.b32 	%r7949, %r7933, %r7929, %p203;
	shfl.sync.bfly.b32	%r7950, %r7949, 8, 31, -1;
	setp.eq.s32 	%p218, %r74, 0;
	shl.b32 	%r7969, %r73, 13;
	@%p218 bra 	$L__BB0_87;
// %bb.86:                              // %pass16539
                                        //   in Loop: Header=BB0_83 Depth=1
	selp.b32 	%r7951, %r150, %r7885, %p203;
	selp.b32 	%r7952, %r7881, %r150, %p203;
	selp.b32 	%r7953, %r149, %r7877, %p203;
	selp.b32 	%r7954, %r7873, %r149, %p203;
	add.s32 	%r7956, %r60, %r7969;
	cvt.s64.s32 	%rd100, %r7956;
	add.s64 	%rd101, %rd100, %rd7;
	shr.u64 	%rd102, %rd101, 36;
	add.s64 	%rd103, %rd101, %rd102;
	shr.s64 	%rd104, %rd103, 28;
	setp.lt.s64 	%p220, %rd101, 0;
	and.b64  	%rd105, %rd103, -268435456;
	setp.ne.s64 	%p221, %rd105, %rd101;
	and.pred  	%p222, %p220, %p221;
	selp.u64 	%rd106, 1, 0, %p222;
	sub.s64 	%rd107, %rd106, %rd104;
	shl.b64 	%rd108, %rd107, 28;
	add.s64 	%rd109, %rd108, %rd101;
	shl.b64 	%rd110, %rd109, 2;
	add.s64 	%rd111, %rd3, %rd110;
	st.global.v4.u32 	[%rd111], {%r7954, %r7952, %r7953, %r7951};
$L__BB0_87:                             // %pass16552
                                        //   in Loop: Header=BB0_83 Depth=1
	or.b32  	%r143, %r73, 64;
	setp.lt.u32 	%p223, %r143, 192;
	@%p223 bra 	$L__BB0_89;
// %bb.88:                              // %pass16646
                                        //   in Loop: Header=BB0_83 Depth=1
	selp.b32 	%r151, %r7889, %r7940, %p203;
	selp.b32 	%r152, %r7940, %r7893, %p203;
	selp.b32 	%r153, %r7897, %r7942, %p203;
	selp.b32 	%r154, %r7942, %r7901, %p203;
	shl.b32 	%r7957, %r143, 13;
	add.s32 	%r7958, %r60, %r7957;
	cvt.s64.s32 	%rd112, %r7958;
	add.s64 	%rd113, %rd112, %rd7;
	shr.u64 	%rd114, %rd113, 36;
	add.s64 	%rd115, %rd113, %rd114;
	shr.s64 	%rd116, %rd115, 28;
	setp.lt.s64 	%p224, %rd113, 0;
	and.b64  	%rd117, %rd115, -268435456;
	setp.ne.s64 	%p225, %rd117, %rd113;
	and.pred  	%p226, %p224, %p225;
	selp.u64 	%rd118, 1, 0, %p226;
	sub.s64 	%rd119, %rd118, %rd116;
	shl.b64 	%rd120, %rd119, 28;
	add.s64 	%rd121, %rd120, %rd113;
	shl.b64 	%rd122, %rd121, 2;
	add.s64 	%rd123, %rd3, %rd122;
	st.global.v4.u32 	[%rd123], {%r151, %r153, %r152, %r154};
$L__BB0_89:                             // %pass16659
                                        //   in Loop: Header=BB0_83 Depth=1
	or.b32  	%r144, %r73, 128;
	selp.b32 	%r159, %r7921, %r7948, %p203;
	selp.b32 	%r160, %r7948, %r7925, %p203;
	selp.b32 	%r161, %r7929, %r7950, %p203;
	selp.b32 	%r162, %r7950, %r7933, %p203;
	setp.lt.u32 	%p227, %r144, 192;
	@%p227 bra 	$L__BB0_91;
// %bb.90:                              // %pass16753
                                        //   in Loop: Header=BB0_83 Depth=1
	selp.b32 	%r155, %r7905, %r7944, %p203;
	selp.b32 	%r156, %r7944, %r7909, %p203;
	selp.b32 	%r157, %r7913, %r7946, %p203;
	selp.b32 	%r158, %r7946, %r7917, %p203;
	shl.b32 	%r7959, %r144, 13;
	add.s32 	%r7960, %r60, %r7959;
	cvt.s64.s32 	%rd124, %r7960;
	add.s64 	%rd125, %rd124, %rd7;
	shr.u64 	%rd126, %rd125, 36;
	add.s64 	%rd127, %rd125, %rd126;
	shr.s64 	%rd128, %rd127, 28;
	setp.lt.s64 	%p228, %rd125, 0;
	and.b64  	%rd129, %rd127, -268435456;
	setp.ne.s64 	%p229, %rd129, %rd125;
	and.pred  	%p230, %p228, %p229;
	selp.u64 	%rd130, 1, 0, %p230;
	sub.s64 	%rd131, %rd130, %rd128;
	shl.b64 	%rd132, %rd131, 28;
	add.s64 	%rd133, %rd132, %rd125;
	shl.b64 	%rd134, %rd133, 2;
	add.s64 	%rd135, %rd3, %rd134;
	st.global.v4.u32 	[%rd135], {%r155, %r157, %r156, %r158};
	bra.uni 	$L__BB0_91;
$L__BB0_92:                             // %L40591
	st.global.u32 	[%rd4], %r7968;
	ret;
$L__BB0_7:                              // %L166
	mov.u32 	%r7967, 2;
	st.global.u32 	[%rd4], %r7967;
	mov.u64 	%rd150, exception3410;
	cvta.global.u64 	%rd151, %rd150;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd151;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r163;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_10:                             // %L275
	mov.u32 	%r7966, 3;
	st.global.u32 	[%rd4], %r7966;
	mov.u64 	%rd148, exception3410;
	cvta.global.u64 	%rd149, %rd148;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd149;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r163;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd41, exception1;
	cvta.global.u64 	%rd42, %rd41;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd42;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd36;
	st.param.b32 	[param0+8], %r163;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
