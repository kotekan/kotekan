// PTX kernel code for the CUDA upchannelizer
// This file has been generated automatically by `upchan.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for upchan(::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.func  (.param .b64 func_retval0) julia_power_by_squaring_11713
(
	.param .align 8 .b8 julia_power_by_squaring_11713_param_0[16],
	.param .b64 julia_power_by_squaring_11713_param_1,
	.param .b64 julia_power_by_squaring_11713_param_2
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception3405[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception13425[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<233>;
	.reg .b16 	%rs<1185>;
	.reg .b32 	%r<7977>;
	.reg .f32 	%f<832>;
	.reg .b64 	%rd<148>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r151, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd30, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r156, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r156, 66815;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L19
	ld.param.u64 	%rd31, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	ld.param.u32 	%r152, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %ctaid.x;
	shl.b32 	%r157, %r3, 9;
	mov.u32 	%r4, %tid.x;
	or.b32  	%r158, %r157, %r4;
	or.b32  	%r159, %r158, %r2;
	mul.wide.u32 	%rd37, %r159, 4;
	add.s64 	%rd4, %rd31, %rd37;
	mov.u32 	%r160, 1;
	st.global.u32 	[%rd4], %r160;
	setp.lt.s32 	%p2, %r152, 0;
	@%p2 bra 	$L__BB0_7;
// %bb.3:                               // %L114
	ld.param.u32 	%r153, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p3, %r153, %r152;
	setp.gt.s32 	%p4, %r153, 65536;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_7;
// %bb.4:                               // %L124
	ld.param.u32 	%r154, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r161, %r153, %r152;
	and.b32  	%r162, %r161, 255;
	setp.ne.s32 	%p6, %r162, 0;
	setp.lt.s32 	%p7, %r154, 0;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L130
	ld.param.u32 	%r155, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.lt.s32 	%p9, %r155, %r154;
	setp.gt.s32 	%p10, %r155, 1024;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L140
	not.b32 	%r163, %r154;
	add.s32 	%r164, %r163, %r155;
	and.b32  	%r165, %r164, 3;
	setp.eq.s32 	%p12, %r165, 0;
	@%p12 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_7;
$L__BB0_8:                              // %pass137
	bfe.u32 	%r102, %r4, 2, 1;
	shr.u32 	%r103, %r4, 4;
	shl.b32 	%r174, %r103, 1;
	shl.b32 	%r175, %r102, 2;
	shl.b32 	%r176, %r4, 3;
	and.b32  	%r177, %r176, 24;
	or.b32  	%r178, %r175, %r177;
	or.b32  	%r179, %r174, %r178;
	bfe.u32 	%r180, %r4, 3, 1;
	or.b32  	%r105, %r180, %r179;
	or.b32  	%r106, %r105, 32;
	mov.f32 	%f145, 0f40000000;
	mov.f32 	%f146, 0f437F0000;
	div.approx.f32 	%f85, %f146, %f145;
	cvt.rn.f32.s32 	%f147, %r105;
	sub.f32 	%f148, %f147, %f85;
	mov.f32 	%f177, 0f42800000;
	div.approx.f32 	%f87, %f148, %f177;
	setp.ne.f32 	%p18, %f87, 0f00000000;
	mov.f32 	%f807, 0f3F800000;
	mov.f32 	%f800, %f807;
	@%p18 bra 	$L__BB0_9;
	bra.uni 	$L__BB0_10;
$L__BB0_9:                              // %L485
	sin.approx.f32 	%f178, %f87;
	div.approx.f32 	%f800, %f178, %f87;
$L__BB0_10:                             // %L488
	cvt.rn.f32.s32 	%f181, %r106;
	sub.f32 	%f182, %f181, %f85;
	div.approx.f32 	%f5, %f182, %f177;
	setp.eq.f32 	%p24, %f5, 0f00000000;
	mov.f32 	%f801, %f807;
	@%p24 bra 	$L__BB0_12;
// %bb.11:                              // %L505
	sin.approx.f32 	%f212, %f5;
	div.approx.f32 	%f801, %f212, %f5;
$L__BB0_12:                             // %L508
	or.b32  	%r198, %r105, 64;
	or.b32  	%r6, %r105, 96;
	cvt.rn.f32.s32 	%f216, %r198;
	sub.f32 	%f217, %f216, %f85;
	div.approx.f32 	%f9, %f217, %f177;
	setp.eq.f32 	%p30, %f9, 0f00000000;
	mov.f32 	%f802, %f807;
	@%p30 bra 	$L__BB0_14;
// %bb.13:                              // %L587
	sin.approx.f32 	%f247, %f9;
	div.approx.f32 	%f802, %f247, %f9;
$L__BB0_14:                             // %L590
	shl.b32 	%r97, %r4, 1;
	cvt.rn.f32.s32 	%f250, %r6;
	sub.f32 	%f251, %f250, %f85;
	div.approx.f32 	%f14, %f251, %f177;
	setp.eq.f32 	%p36, %f14, 0f00000000;
	mov.f32 	%f803, %f807;
	@%p36 bra 	$L__BB0_16;
// %bb.15:                              // %L607
	sin.approx.f32 	%f281, %f14;
	div.approx.f32 	%f803, %f281, %f14;
$L__BB0_16:                             // %L610
	shl.b32 	%r95, %r4, 2;
	and.b32  	%r166, %r97, 8;
	and.b32  	%r169, %r4, 18;
	or.b32  	%r216, %r105, 128;
	or.b32  	%r8, %r105, 160;
	cvt.rn.f32.s32 	%f285, %r216;
	sub.f32 	%f286, %f285, %f85;
	div.approx.f32 	%f18, %f286, %f177;
	setp.eq.f32 	%p42, %f18, 0f00000000;
	mov.f32 	%f804, %f807;
	@%p42 bra 	$L__BB0_18;
// %bb.17:                              // %L689
	sin.approx.f32 	%f316, %f18;
	div.approx.f32 	%f804, %f316, %f18;
$L__BB0_18:                             // %L692
	and.b32  	%r96, %r95, 32;
	or.b32  	%r170, %r169, %r166;
	cvt.rn.f32.s32 	%f319, %r8;
	sub.f32 	%f320, %f319, %f85;
	div.approx.f32 	%f23, %f320, %f177;
	setp.eq.f32 	%p48, %f23, 0f00000000;
	mov.f32 	%f805, %f807;
	@%p48 bra 	$L__BB0_20;
// %bb.19:                              // %L709
	sin.approx.f32 	%f350, %f23;
	div.approx.f32 	%f805, %f350, %f23;
$L__BB0_20:                             // %L712
	and.b32  	%r167, %r95, 4;
	shl.b32 	%r168, %r3, 4;
	or.b32  	%r171, %r170, %r96;
	or.b32  	%r234, %r105, 192;
	or.b32  	%r10, %r105, 224;
	cvt.rn.f32.s32 	%f354, %r234;
	sub.f32 	%f355, %f354, %f85;
	div.approx.f32 	%f27, %f355, %f177;
	setp.eq.f32 	%p54, %f27, 0f00000000;
	mov.f32 	%f806, %f807;
	@%p54 bra 	$L__BB0_22;
// %bb.21:                              // %L791
	sin.approx.f32 	%f385, %f27;
	div.approx.f32 	%f806, %f385, %f27;
$L__BB0_22:                             // %L794
	and.b32  	%r98, %r168, 4032;
	or.b32  	%r99, %r171, %r167;
	shr.u32 	%r101, %r4, 1;
	shr.u32 	%r104, %r4, 3;
	cvt.rn.f32.s32 	%f388, %r10;
	sub.f32 	%f389, %f388, %f85;
	div.approx.f32 	%f32, %f389, %f177;
	setp.eq.f32 	%p60, %f32, 0f00000000;
	@%p60 bra 	$L__BB0_24;
// %bb.23:                              // %L811
	sin.approx.f32 	%f419, %f32;
	div.approx.f32 	%f807, %f419, %f32;
$L__BB0_24:                             // %L814
	or.b32  	%r172, %r99, %r98;
	and.b32  	%r278, %r4, 3;
	and.b32  	%r279, %r104, 2;
	and.b32  	%r280, %r101, 4;
	or.b32  	%r281, %r102, %r279;
	or.b32  	%r14, %r281, %r280;
	mul.lo.s32 	%r282, %r278, %r14;
	shl.b32 	%r283, %r282, 1;
	neg.s32 	%r284, %r283;
	cvt.rn.f32.s32 	%f35, %r284;
	mov.f32 	%f490, 0f41000000;
	div.approx.f32 	%f36, %f35, %f490;
	abs.f32 	%f830, %f36;
	setp.lt.f32 	%p75, %f830, 0f40000000;
	setp.gtu.f32 	%p231, %f830, 0f4B800000;
	mov.f32 	%f822, %f830;
	@%p75 bra 	$L__BB0_94;
// %bb.25:
	@%p231 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_26;
$L__BB0_90:
	mov.b32 	%r108, %f830;
	and.b32  	%r285, %r108, 8388607;
	or.b32  	%r7971, %r285, 1065353216;
	mov.b32 	%f821, %r7971;
	add.s32 	%r286, %r108, -1073741824;
	and.b32  	%r7972, %r286, -8388608;
	setp.eq.s32 	%p82, %r7972, 0;
	@%p82 bra 	$L__BB0_93;
// %bb.91:                              // %__nv_fmaf_rn.exit4.i.i.i923.preheader
	mov.f32 	%f500, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f499,%f500;
	// end inline asm
$L__BB0_92:                             // %__nv_fmaf_rn.exit4.i.i.i923
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r287, %r7972, 192937984;
	add.s32 	%r288, %r7971, %r287;
	mov.b32 	%f501, %r288;
	mul.f32 	%f502, %f499, %f501;
	sub.f32 	%f503, %f501, %f502;
	fma.rn.f32 	%f504, %f503, %f499, %f502;
	sub.f32 	%f505, %f501, %f504;
	fma.rz.f32 	%f506, %f505, %f499, %f504;
	cvt.rzi.f32.f32 	%f507, %f506;
	sub.f32 	%f821, %f501, %f507;
	sub.s32 	%r7972, %r7972, %r287;
	mov.b32 	%r7971, %f821;
	setp.ne.s32 	%p83, %r7972, 0;
	setp.ne.s32 	%p84, %r7971, 0;
	and.pred  	%p85, %p83, %p84;
	@%p85 bra 	$L__BB0_92;
$L__BB0_93:                             // %__internal_fmodf_slowpath_mod.exit.i.i925
	setp.gt.u32 	%p86, %r108, 2139095039;
	selp.f32 	%f508, 0f7FFFFFFF, 0f4B800000, %p86;
	mul.f32 	%f509, %f821, 0f34000000;
	mul.f32 	%f822, %f508, %f509;
	bra.uni 	$L__BB0_94;
$L__BB0_26:                             // %__nv_fast_fdividef.exit.i.i.i902
	div.approx.f32 	%f492, %f830, %f145;
	cvt.rzi.f32.f32 	%f820, %f492;
	fma.rn.f32 	%f89, %f820, 0fC0000000, %f830;
	mov.b32 	%r107, %f89;
	setp.lt.u32 	%p77, %r107, 1073741824;
	@%p77 bra 	$L__BB0_89;
// %bb.27:
	setp.lt.u32 	%p78, %r107, -2147483647;
	@%p78 bra 	$L__BB0_87;
// %bb.28:
	add.f32 	%f497, %f820, 0fBF800000;
	setp.lt.f32 	%p81, %f89, 0fC0000000;
	add.f32 	%f498, %f497, 0fBF800000;
	selp.f32 	%f820, %f498, %f497, %p81;
	bra.uni 	$L__BB0_89;
$L__BB0_87:
	add.f32 	%f820, %f820, 0f3F800000;
	setp.ltu.f32 	%p79, %f89, 0f40800000;
	@%p79 bra 	$L__BB0_89;
// %bb.88:                              // %__nv_fmaf_rn.exit.i.i.i906
	add.f32 	%f493, %f820, 0f3F800000;
	fma.rn.f32 	%f495, %f145, 0fC0400000, %f89;
	setp.ge.f32 	%p80, %f495, 0f00000000;
	add.f32 	%f496, %f493, 0f3F800000;
	selp.f32 	%f820, %f496, %f493, %p80;
$L__BB0_89:                             // %__internal_fmodf_fastpath_quot.exit.i.i909
	fma.rn.f32 	%f822, %f820, 0fC0000000, %f830;
$L__BB0_94:                             // %__internal_fmodf_kernel.exit.i928
	shr.u32 	%r173, %r172, 1;
	abs.f32 	%f510, %f822;
	setp.gtu.f32 	%p87, %f510, 0f7F800000;
	mov.b32 	%r289, %f36;
	and.b32  	%r115, %r289, -2147483648;
	@%p87 bra 	$L__BB0_96;
// %bb.95:
	mov.b32 	%r290, %f822;
	or.b32  	%r291, %r115, %r290;
	mov.b32 	%f822, %r291;
$L__BB0_96:                             // %__nv_fmodf.exit929
	ld.param.u64 	%rd1, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	mul.wide.u32 	%rd38, %r173, 4;
	and.b32  	%r300, %r97, 6;
	mov.u32 	%r301, -8;
	sub.s32 	%r302, %r301, %r300;
	mul.lo.s32 	%r303, %r14, %r302;
	cvt.rn.f32.s32 	%f105, %r303;
	div.approx.f32 	%f106, %f105, %f490;
	abs.f32 	%f818, %f106;
	setp.lt.f32 	%p95, %f818, 0f40000000;
	setp.gtu.f32 	%p232, %f818, 0f4B800000;
	mov.f32 	%f810, %f818;
	@%p95 bra 	$L__BB0_40;
// %bb.29:
	@%p232 bra 	$L__BB0_36;
	bra.uni 	$L__BB0_30;
$L__BB0_36:
	mov.b32 	%r16, %f818;
	and.b32  	%r304, %r16, 8388607;
	or.b32  	%r7938, %r304, 1065353216;
	mov.b32 	%f809, %r7938;
	add.s32 	%r305, %r16, -1073741824;
	and.b32  	%r7939, %r305, -8388608;
	setp.eq.s32 	%p102, %r7939, 0;
	@%p102 bra 	$L__BB0_39;
// %bb.37:                              // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f551, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f550,%f551;
	// end inline asm
$L__BB0_38:                             // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r306, %r7939, 192937984;
	add.s32 	%r307, %r7938, %r306;
	mov.b32 	%f552, %r307;
	mul.f32 	%f553, %f550, %f552;
	sub.f32 	%f554, %f552, %f553;
	fma.rn.f32 	%f555, %f554, %f550, %f553;
	sub.f32 	%f556, %f552, %f555;
	fma.rz.f32 	%f557, %f556, %f550, %f555;
	cvt.rzi.f32.f32 	%f558, %f557;
	sub.f32 	%f809, %f552, %f558;
	sub.s32 	%r7939, %r7939, %r306;
	mov.b32 	%r7938, %f809;
	setp.ne.s32 	%p103, %r7939, 0;
	setp.ne.s32 	%p104, %r7938, 0;
	and.pred  	%p105, %p103, %p104;
	@%p105 bra 	$L__BB0_38;
$L__BB0_39:                             // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p106, %r16, 2139095039;
	selp.f32 	%f559, 0f7FFFFFFF, 0f4B800000, %p106;
	mul.f32 	%f560, %f809, 0f34000000;
	mul.f32 	%f810, %f559, %f560;
	bra.uni 	$L__BB0_40;
$L__BB0_30:                             // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f543, %f818, %f145;
	cvt.rzi.f32.f32 	%f808, %f543;
	fma.rn.f32 	%f39, %f808, 0fC0000000, %f818;
	mov.b32 	%r15, %f39;
	setp.lt.u32 	%p97, %r15, 1073741824;
	@%p97 bra 	$L__BB0_35;
// %bb.31:
	setp.lt.u32 	%p98, %r15, -2147483647;
	@%p98 bra 	$L__BB0_33;
// %bb.32:
	add.f32 	%f548, %f808, 0fBF800000;
	setp.lt.f32 	%p101, %f39, 0fC0000000;
	add.f32 	%f549, %f548, 0fBF800000;
	selp.f32 	%f808, %f549, %f548, %p101;
	bra.uni 	$L__BB0_35;
$L__BB0_33:
	add.f32 	%f808, %f808, 0f3F800000;
	setp.ltu.f32 	%p99, %f39, 0f40800000;
	@%p99 bra 	$L__BB0_35;
// %bb.34:                              // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f544, %f808, 0f3F800000;
	fma.rn.f32 	%f546, %f145, 0fC0400000, %f39;
	setp.ge.f32 	%p100, %f546, 0f00000000;
	add.f32 	%f547, %f544, 0f3F800000;
	selp.f32 	%f808, %f547, %f544, %p100;
$L__BB0_35:                             // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f810, %f808, 0fC0000000, %f818;
$L__BB0_40:                             // %__internal_fmodf_kernel.exit.i
	add.s64 	%rd39, %rd1, %rd38;
	abs.f32 	%f561, %f810;
	setp.gtu.f32 	%p107, %f561, 0f7F800000;
	mov.b32 	%r308, %f106;
	and.b32  	%r23, %r308, -2147483648;
	@%p107 bra 	$L__BB0_42;
// %bb.41:
	mov.b32 	%r309, %f810;
	or.b32  	%r310, %r23, %r309;
	mov.b32 	%f810, %r310;
$L__BB0_42:                             // %__nv_fmodf.exit
	ld.global.u32 	%r100, [%rd39];
	mov.u64 	%rd40, 2;
	mov.u64 	%rd41, 6;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd30;
	st.param.b32 	[param0+8], %r151;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd40;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd41;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11713, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd42, [retval0+0];
	} // callseq 2
	cvt.rn.f32.s64 	%f594, %rd42;
	div.approx.f32 	%f53, %f35, %f594;
	abs.f32 	%f826, %f53;
	setp.lt.f32 	%p115, %f826, 0f40000000;
	@%p115 bra 	$L__BB0_104;
// %bb.43:
	setp.gtu.f32 	%p116, %f826, 0f4B800000;
	@%p116 bra 	$L__BB0_100;
	bra.uni 	$L__BB0_44;
$L__BB0_100:
	mov.b32 	%r117, %f826;
	and.b32  	%r331, %r117, 8388607;
	or.b32  	%r7973, %r331, 1065353216;
	mov.b32 	%f825, %r7973;
	add.s32 	%r332, %r117, -1073741824;
	and.b32  	%r7974, %r332, -8388608;
	setp.eq.s32 	%p122, %r7974, 0;
	@%p122 bra 	$L__BB0_103;
// %bb.101:                             // %__nv_fmaf_rn.exit4.i.i.i954.preheader
	mov.f32 	%f604, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f603,%f604;
	// end inline asm
$L__BB0_102:                            // %__nv_fmaf_rn.exit4.i.i.i954
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r333, %r7974, 192937984;
	add.s32 	%r334, %r7973, %r333;
	mov.b32 	%f605, %r334;
	mul.f32 	%f606, %f603, %f605;
	sub.f32 	%f607, %f605, %f606;
	fma.rn.f32 	%f608, %f607, %f603, %f606;
	sub.f32 	%f609, %f605, %f608;
	fma.rz.f32 	%f610, %f609, %f603, %f608;
	cvt.rzi.f32.f32 	%f611, %f610;
	sub.f32 	%f825, %f605, %f611;
	sub.s32 	%r7974, %r7974, %r333;
	mov.b32 	%r7973, %f825;
	setp.ne.s32 	%p123, %r7974, 0;
	setp.ne.s32 	%p124, %r7973, 0;
	and.pred  	%p125, %p123, %p124;
	@%p125 bra 	$L__BB0_102;
$L__BB0_103:                            // %__internal_fmodf_slowpath_mod.exit.i.i956
	setp.gt.u32 	%p126, %r117, 2139095039;
	selp.f32 	%f612, 0f7FFFFFFF, 0f4B800000, %p126;
	mul.f32 	%f613, %f825, 0f34000000;
	mul.f32 	%f826, %f612, %f613;
	bra.uni 	$L__BB0_104;
$L__BB0_44:                             // %__nv_fast_fdividef.exit.i.i.i933
	div.approx.f32 	%f596, %f826, %f145;
	cvt.rzi.f32.f32 	%f824, %f596;
	fma.rn.f32 	%f109, %f824, 0fC0000000, %f826;
	mov.b32 	%r116, %f109;
	setp.lt.u32 	%p117, %r116, 1073741824;
	@%p117 bra 	$L__BB0_99;
// %bb.45:
	setp.lt.u32 	%p118, %r116, -2147483647;
	@%p118 bra 	$L__BB0_97;
// %bb.46:
	add.f32 	%f601, %f824, 0fBF800000;
	setp.lt.f32 	%p121, %f109, 0fC0000000;
	add.f32 	%f602, %f601, 0fBF800000;
	selp.f32 	%f824, %f602, %f601, %p121;
	bra.uni 	$L__BB0_99;
$L__BB0_97:
	add.f32 	%f824, %f824, 0f3F800000;
	setp.ltu.f32 	%p119, %f109, 0f40800000;
	@%p119 bra 	$L__BB0_99;
// %bb.98:                              // %__nv_fmaf_rn.exit.i.i.i937
	add.f32 	%f597, %f824, 0f3F800000;
	fma.rn.f32 	%f599, %f145, 0fC0400000, %f109;
	setp.ge.f32 	%p120, %f599, 0f00000000;
	add.f32 	%f600, %f597, 0f3F800000;
	selp.f32 	%f824, %f600, %f597, %p120;
$L__BB0_99:                             // %__internal_fmodf_fastpath_quot.exit.i.i940
	fma.rn.f32 	%f826, %f824, 0fC0000000, %f826;
$L__BB0_104:                            // %__internal_fmodf_kernel.exit.i959
	abs.f32 	%f614, %f826;
	setp.gtu.f32 	%p127, %f614, 0f7F800000;
	@%p127 bra 	$L__BB0_106;
// %bb.105:
	mov.b32 	%r335, %f53;
	and.b32  	%r336, %r335, -2147483648;
	mov.b32 	%r337, %f826;
	or.b32  	%r338, %r336, %r337;
	mov.b32 	%f826, %r338;
$L__BB0_106:                            // %__nv_fmodf.exit960
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd30;
	st.param.b32 	[param0+8], %r151;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd40;
	.param .b64 param2;
	st.param.b64 	[param2+0], %rd41;
	.param .b64 retval0;
	call.uni (retval0), 
	julia_power_by_squaring_11713, 
	(
	param0, 
	param1, 
	param2
	);
	ld.param.b64 	%rd46, [retval0+0];
	} // callseq 3
	cvt.rn.f32.s64 	%f645, %rd46;
	div.approx.f32 	%f125, %f105, %f645;
	abs.f32 	%f814, %f125;
	setp.lt.f32 	%p135, %f814, 0f40000000;
	@%p135 bra 	$L__BB0_58;
// %bb.47:
	setp.gtu.f32 	%p136, %f814, 0f4B800000;
	@%p136 bra 	$L__BB0_54;
	bra.uni 	$L__BB0_48;
$L__BB0_54:
	mov.b32 	%r29, %f814;
	and.b32  	%r347, %r29, 8388607;
	or.b32  	%r7940, %r347, 1065353216;
	mov.b32 	%f813, %r7940;
	add.s32 	%r348, %r29, -1073741824;
	and.b32  	%r7941, %r348, -8388608;
	setp.eq.s32 	%p142, %r7941, 0;
	@%p142 bra 	$L__BB0_57;
// %bb.55:                              // %__nv_fmaf_rn.exit4.i.i.i861.preheader
	mov.f32 	%f655, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f654,%f655;
	// end inline asm
$L__BB0_56:                             // %__nv_fmaf_rn.exit4.i.i.i861
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r349, %r7941, 192937984;
	add.s32 	%r350, %r7940, %r349;
	mov.b32 	%f656, %r350;
	mul.f32 	%f657, %f654, %f656;
	sub.f32 	%f658, %f656, %f657;
	fma.rn.f32 	%f659, %f658, %f654, %f657;
	sub.f32 	%f660, %f656, %f659;
	fma.rz.f32 	%f661, %f660, %f654, %f659;
	cvt.rzi.f32.f32 	%f662, %f661;
	sub.f32 	%f813, %f656, %f662;
	sub.s32 	%r7941, %r7941, %r349;
	mov.b32 	%r7940, %f813;
	setp.ne.s32 	%p143, %r7941, 0;
	setp.ne.s32 	%p144, %r7940, 0;
	and.pred  	%p145, %p143, %p144;
	@%p145 bra 	$L__BB0_56;
$L__BB0_57:                             // %__internal_fmodf_slowpath_mod.exit.i.i863
	setp.gt.u32 	%p146, %r29, 2139095039;
	selp.f32 	%f663, 0f7FFFFFFF, 0f4B800000, %p146;
	mul.f32 	%f664, %f813, 0f34000000;
	mul.f32 	%f814, %f663, %f664;
	bra.uni 	$L__BB0_58;
$L__BB0_48:                             // %__nv_fast_fdividef.exit.i.i.i840
	div.approx.f32 	%f647, %f814, %f145;
	cvt.rzi.f32.f32 	%f812, %f647;
	fma.rn.f32 	%f56, %f812, 0fC0000000, %f814;
	mov.b32 	%r28, %f56;
	setp.lt.u32 	%p137, %r28, 1073741824;
	@%p137 bra 	$L__BB0_53;
// %bb.49:
	setp.lt.u32 	%p138, %r28, -2147483647;
	@%p138 bra 	$L__BB0_51;
// %bb.50:
	add.f32 	%f652, %f812, 0fBF800000;
	setp.lt.f32 	%p141, %f56, 0fC0000000;
	add.f32 	%f653, %f652, 0fBF800000;
	selp.f32 	%f812, %f653, %f652, %p141;
	bra.uni 	$L__BB0_53;
$L__BB0_51:
	add.f32 	%f812, %f812, 0f3F800000;
	setp.ltu.f32 	%p139, %f56, 0f40800000;
	@%p139 bra 	$L__BB0_53;
// %bb.52:                              // %__nv_fmaf_rn.exit.i.i.i844
	add.f32 	%f648, %f812, 0f3F800000;
	fma.rn.f32 	%f650, %f145, 0fC0400000, %f56;
	setp.ge.f32 	%p140, %f650, 0f00000000;
	add.f32 	%f651, %f648, 0f3F800000;
	selp.f32 	%f812, %f651, %f648, %p140;
$L__BB0_53:                             // %__internal_fmodf_fastpath_quot.exit.i.i847
	fma.rn.f32 	%f814, %f812, 0fC0000000, %f814;
$L__BB0_58:                             // %__internal_fmodf_kernel.exit.i866
	abs.f32 	%f665, %f814;
	setp.gtu.f32 	%p147, %f665, 0f7F800000;
	@%p147 bra 	$L__BB0_60;
// %bb.59:
	mov.b32 	%r351, %f125;
	and.b32  	%r352, %r351, -2147483648;
	mov.b32 	%r353, %f814;
	or.b32  	%r354, %r352, %r353;
	mov.b32 	%f814, %r354;
$L__BB0_60:                             // %__nv_fmodf.exit867
	@%p75 bra 	$L__BB0_114;
// %bb.61:
	@%p231 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_62;
$L__BB0_110:
	mov.b32 	%r125, %f830;
	and.b32  	%r369, %r125, 8388607;
	or.b32  	%r7975, %r369, 1065353216;
	mov.b32 	%f829, %r7975;
	add.s32 	%r370, %r125, -1073741824;
	and.b32  	%r7976, %r370, -8388608;
	setp.eq.s32 	%p162, %r7976, 0;
	@%p162 bra 	$L__BB0_113;
// %bb.111:                             // %__nv_fmaf_rn.exit4.i.i.i985.preheader
	mov.f32 	%f707, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f706,%f707;
	// end inline asm
$L__BB0_112:                            // %__nv_fmaf_rn.exit4.i.i.i985
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r371, %r7976, 192937984;
	add.s32 	%r372, %r7975, %r371;
	mov.b32 	%f708, %r372;
	mul.f32 	%f709, %f706, %f708;
	sub.f32 	%f710, %f708, %f709;
	fma.rn.f32 	%f711, %f710, %f706, %f709;
	sub.f32 	%f712, %f708, %f711;
	fma.rz.f32 	%f713, %f712, %f706, %f711;
	cvt.rzi.f32.f32 	%f714, %f713;
	sub.f32 	%f829, %f708, %f714;
	sub.s32 	%r7976, %r7976, %r371;
	mov.b32 	%r7975, %f829;
	setp.ne.s32 	%p163, %r7976, 0;
	setp.ne.s32 	%p164, %r7975, 0;
	and.pred  	%p165, %p163, %p164;
	@%p165 bra 	$L__BB0_112;
$L__BB0_113:                            // %__internal_fmodf_slowpath_mod.exit.i.i987
	setp.gt.u32 	%p166, %r125, 2139095039;
	selp.f32 	%f715, 0f7FFFFFFF, 0f4B800000, %p166;
	mul.f32 	%f716, %f829, 0f34000000;
	mul.f32 	%f830, %f715, %f716;
	bra.uni 	$L__BB0_114;
$L__BB0_62:                             // %__nv_fast_fdividef.exit.i.i.i964
	div.approx.f32 	%f699, %f830, %f145;
	cvt.rzi.f32.f32 	%f828, %f699;
	fma.rn.f32 	%f128, %f828, 0fC0000000, %f830;
	mov.b32 	%r124, %f128;
	setp.lt.u32 	%p157, %r124, 1073741824;
	@%p157 bra 	$L__BB0_109;
// %bb.63:
	setp.lt.u32 	%p158, %r124, -2147483647;
	@%p158 bra 	$L__BB0_107;
// %bb.64:
	add.f32 	%f704, %f828, 0fBF800000;
	setp.lt.f32 	%p161, %f128, 0fC0000000;
	add.f32 	%f705, %f704, 0fBF800000;
	selp.f32 	%f828, %f705, %f704, %p161;
	bra.uni 	$L__BB0_109;
$L__BB0_107:
	add.f32 	%f828, %f828, 0f3F800000;
	setp.ltu.f32 	%p159, %f128, 0f40800000;
	@%p159 bra 	$L__BB0_109;
// %bb.108:                             // %__nv_fmaf_rn.exit.i.i.i968
	add.f32 	%f700, %f828, 0f3F800000;
	fma.rn.f32 	%f702, %f145, 0fC0400000, %f128;
	setp.ge.f32 	%p160, %f702, 0f00000000;
	add.f32 	%f703, %f700, 0f3F800000;
	selp.f32 	%f828, %f703, %f700, %p160;
$L__BB0_109:                            // %__internal_fmodf_fastpath_quot.exit.i.i971
	fma.rn.f32 	%f830, %f828, 0fC0000000, %f830;
$L__BB0_114:                            // %__internal_fmodf_kernel.exit.i990
	abs.f32 	%f717, %f830;
	setp.gtu.f32 	%p167, %f717, 0f7F800000;
	@%p167 bra 	$L__BB0_116;
// %bb.115:
	mov.b32 	%r373, %f830;
	or.b32  	%r374, %r115, %r373;
	mov.b32 	%f830, %r374;
$L__BB0_116:                            // %__nv_fmodf.exit991
	@%p95 bra 	$L__BB0_76;
// %bb.65:
	@%p232 bra 	$L__BB0_72;
	bra.uni 	$L__BB0_66;
$L__BB0_72:
	mov.b32 	%r39, %f818;
	and.b32  	%r383, %r39, 8388607;
	or.b32  	%r7942, %r383, 1065353216;
	mov.b32 	%f817, %r7942;
	add.s32 	%r384, %r39, -1073741824;
	and.b32  	%r7943, %r384, -8388608;
	setp.eq.s32 	%p182, %r7943, 0;
	@%p182 bra 	$L__BB0_75;
// %bb.73:                              // %__nv_fmaf_rn.exit4.i.i.i892.preheader
	mov.f32 	%f757, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f756,%f757;
	// end inline asm
$L__BB0_74:                             // %__nv_fmaf_rn.exit4.i.i.i892
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r385, %r7943, 192937984;
	add.s32 	%r386, %r7942, %r385;
	mov.b32 	%f758, %r386;
	mul.f32 	%f759, %f756, %f758;
	sub.f32 	%f760, %f758, %f759;
	fma.rn.f32 	%f761, %f760, %f756, %f759;
	sub.f32 	%f762, %f758, %f761;
	fma.rz.f32 	%f763, %f762, %f756, %f761;
	cvt.rzi.f32.f32 	%f764, %f763;
	sub.f32 	%f817, %f758, %f764;
	sub.s32 	%r7943, %r7943, %r385;
	mov.b32 	%r7942, %f817;
	setp.ne.s32 	%p183, %r7943, 0;
	setp.ne.s32 	%p184, %r7942, 0;
	and.pred  	%p185, %p183, %p184;
	@%p185 bra 	$L__BB0_74;
$L__BB0_75:                             // %__internal_fmodf_slowpath_mod.exit.i.i894
	setp.gt.u32 	%p186, %r39, 2139095039;
	selp.f32 	%f765, 0f7FFFFFFF, 0f4B800000, %p186;
	mul.f32 	%f766, %f817, 0f34000000;
	mul.f32 	%f818, %f765, %f766;
	bra.uni 	$L__BB0_76;
$L__BB0_66:                             // %__nv_fast_fdividef.exit.i.i.i871
	div.approx.f32 	%f749, %f818, %f145;
	cvt.rzi.f32.f32 	%f816, %f749;
	fma.rn.f32 	%f71, %f816, 0fC0000000, %f818;
	mov.b32 	%r38, %f71;
	setp.lt.u32 	%p177, %r38, 1073741824;
	@%p177 bra 	$L__BB0_71;
// %bb.67:
	setp.lt.u32 	%p178, %r38, -2147483647;
	@%p178 bra 	$L__BB0_69;
// %bb.68:
	add.f32 	%f754, %f816, 0fBF800000;
	setp.lt.f32 	%p181, %f71, 0fC0000000;
	add.f32 	%f755, %f754, 0fBF800000;
	selp.f32 	%f816, %f755, %f754, %p181;
	bra.uni 	$L__BB0_71;
$L__BB0_69:
	add.f32 	%f816, %f816, 0f3F800000;
	setp.ltu.f32 	%p179, %f71, 0f40800000;
	@%p179 bra 	$L__BB0_71;
// %bb.70:                              // %__nv_fmaf_rn.exit.i.i.i875
	add.f32 	%f750, %f816, 0f3F800000;
	fma.rn.f32 	%f752, %f145, 0fC0400000, %f71;
	setp.ge.f32 	%p180, %f752, 0f00000000;
	add.f32 	%f753, %f750, 0f3F800000;
	selp.f32 	%f816, %f753, %f750, %p180;
$L__BB0_71:                             // %__internal_fmodf_fastpath_quot.exit.i.i878
	fma.rn.f32 	%f818, %f816, 0fC0000000, %f818;
$L__BB0_76:                             // %__internal_fmodf_kernel.exit.i897
	abs.f32 	%f767, %f818;
	setp.gtu.f32 	%p187, %f767, 0f7F800000;
	@%p187 bra 	$L__BB0_78;
// %bb.77:
	mov.b32 	%r387, %f818;
	or.b32  	%r388, %r23, %r387;
	mov.b32 	%f818, %r388;
$L__BB0_78:                             // %__nv_fmodf.exit898
	setp.le.s32 	%p195, %r153, %r152;
	mov.u32 	%r7936, 0;
	@%p195 bra 	$L__BB0_86;
// %bb.79:                              // %L1335.lr.ph
	mov.f32 	%f149, 0f43808000;
	mul.lo.s32 	%r258, %r105, 63;
	div.approx.f32 	%f150, %f148, %f149;
	div.approx.f32 	%f184, %f182, %f149;
	div.approx.f32 	%f219, %f217, %f149;
	div.approx.f32 	%f253, %f251, %f149;
	div.approx.f32 	%f288, %f286, %f149;
	div.approx.f32 	%f322, %f320, %f149;
	div.approx.f32 	%f357, %f355, %f149;
	div.approx.f32 	%f391, %f389, %f149;
	add.s32 	%r268, %r258, 96;
	abs.f32 	%f151, %f150;
	abs.f32 	%f185, %f184;
	abs.f32 	%f220, %f219;
	abs.f32 	%f254, %f253;
	abs.f32 	%f289, %f288;
	abs.f32 	%f323, %f322;
	abs.f32 	%f358, %f357;
	abs.f32 	%f392, %f391;
	and.b32  	%r259, %r258, 127;
	and.b32  	%r269, %r268, 127;
	setp.gt.f32 	%p13, %f151, 0f4B800000;
	mul.f32 	%f152, %f150, 0f00000000;
	setp.gt.f32 	%p19, %f185, 0f4B800000;
	mul.f32 	%f186, %f184, 0f00000000;
	setp.gt.f32 	%p25, %f220, 0f4B800000;
	mul.f32 	%f221, %f219, 0f00000000;
	setp.gt.f32 	%p31, %f254, 0f4B800000;
	mul.f32 	%f255, %f253, 0f00000000;
	setp.gt.f32 	%p37, %f289, 0f4B800000;
	mul.f32 	%f290, %f288, 0f00000000;
	setp.gt.f32 	%p43, %f323, 0f4B800000;
	mul.f32 	%f324, %f322, 0f00000000;
	setp.gt.f32 	%p49, %f358, 0f4B800000;
	mul.f32 	%f359, %f357, 0f00000000;
	setp.gt.f32 	%p55, %f392, 0f4B800000;
	mul.f32 	%f393, %f391, 0f00000000;
	cvt.rn.f32.s32 	%f422, %r259;
	cvt.rn.f32.s32 	%f457, %r269;
	selp.f32 	%f153, %f152, %f150, %p13;
	selp.f32 	%f187, %f186, %f184, %p19;
	selp.f32 	%f222, %f221, %f219, %p25;
	selp.f32 	%f256, %f255, %f253, %p31;
	selp.f32 	%f291, %f290, %f288, %p37;
	selp.f32 	%f325, %f324, %f322, %p43;
	selp.f32 	%f360, %f359, %f357, %p49;
	selp.f32 	%f394, %f393, %f391, %p55;
	div.approx.f32 	%f424, %f422, %f177;
	div.approx.f32 	%f458, %f457, %f177;
	add.f32 	%f154, %f153, %f153;
	add.f32 	%f188, %f187, %f187;
	add.f32 	%f223, %f222, %f222;
	add.f32 	%f257, %f256, %f256;
	add.f32 	%f292, %f291, %f291;
	add.f32 	%f326, %f325, %f325;
	add.f32 	%f361, %f360, %f360;
	add.f32 	%f395, %f394, %f394;
	add.f32 	%f425, %f424, %f424;
	add.f32 	%f459, %f458, %f458;
	add.f32 	%f511, %f822, %f822;
	add.f32 	%f562, %f810, %f810;
	mov.b32 	%r181, %f154;
	mov.b32 	%r188, %f188;
	mov.b32 	%r199, %f223;
	mov.b32 	%r206, %f257;
	mov.b32 	%r217, %f292;
	mov.b32 	%r224, %f326;
	mov.b32 	%r235, %f361;
	mov.b32 	%r242, %f395;
	mov.b32 	%r260, %f425;
	mov.b32 	%r270, %f459;
	mov.b32 	%r292, %f511;
	mov.b32 	%r323, %f562;
	and.b32  	%r182, %r181, -2147483648;
	and.b32  	%r189, %r188, -2147483648;
	and.b32  	%r200, %r199, -2147483648;
	and.b32  	%r207, %r206, -2147483648;
	and.b32  	%r218, %r217, -2147483648;
	and.b32  	%r225, %r224, -2147483648;
	and.b32  	%r236, %r235, -2147483648;
	and.b32  	%r243, %r242, -2147483648;
	and.b32  	%r261, %r260, -2147483648;
	and.b32  	%r271, %r270, -2147483648;
	and.b32  	%r293, %r292, -2147483648;
	and.b32  	%r324, %r323, -2147483648;
	add.f32 	%f615, %f826, %f826;
	add.f32 	%f666, %f814, %f814;
	or.b32  	%r183, %r182, 1056964608;
	or.b32  	%r190, %r189, 1056964608;
	or.b32  	%r201, %r200, 1056964608;
	or.b32  	%r208, %r207, 1056964608;
	or.b32  	%r219, %r218, 1056964608;
	or.b32  	%r226, %r225, 1056964608;
	or.b32  	%r237, %r236, 1056964608;
	or.b32  	%r244, %r243, 1056964608;
	or.b32  	%r262, %r261, 1056964608;
	or.b32  	%r272, %r271, 1056964608;
	or.b32  	%r294, %r293, 1056964608;
	or.b32  	%r325, %r324, 1056964608;
	mov.b32 	%r339, %f615;
	mov.b32 	%r361, %f666;
	mov.b32 	%f155, %r183;
	mov.b32 	%f189, %r190;
	mov.b32 	%f224, %r201;
	mov.b32 	%f258, %r208;
	mov.b32 	%f293, %r219;
	mov.b32 	%f327, %r226;
	mov.b32 	%f362, %r237;
	mov.b32 	%f396, %r244;
	mov.b32 	%f426, %r262;
	mov.b32 	%f460, %r272;
	mov.b32 	%f512, %r294;
	mov.b32 	%f563, %r325;
	and.b32  	%r340, %r339, -2147483648;
	and.b32  	%r362, %r361, -2147483648;
	add.f32 	%f718, %f830, %f830;
	add.f32 	%f156, %f154, %f155;
	abs.f32 	%f158, %f154;
	add.f32 	%f190, %f188, %f189;
	abs.f32 	%f192, %f188;
	add.f32 	%f225, %f223, %f224;
	abs.f32 	%f227, %f223;
	add.f32 	%f259, %f257, %f258;
	abs.f32 	%f261, %f257;
	add.f32 	%f294, %f292, %f293;
	abs.f32 	%f296, %f292;
	add.f32 	%f328, %f326, %f327;
	abs.f32 	%f330, %f326;
	add.f32 	%f363, %f361, %f362;
	abs.f32 	%f365, %f361;
	add.f32 	%f397, %f395, %f396;
	abs.f32 	%f399, %f395;
	add.f32 	%f427, %f425, %f426;
	abs.f32 	%f429, %f425;
	add.f32 	%f461, %f459, %f460;
	abs.f32 	%f463, %f459;
	add.f32 	%f513, %f511, %f512;
	abs.f32 	%f515, %f511;
	add.f32 	%f564, %f562, %f563;
	abs.f32 	%f566, %f562;
	or.b32  	%r341, %r340, 1056964608;
	or.b32  	%r363, %r362, 1056964608;
	mov.b32 	%r375, %f718;
	cvt.rzi.f32.f32 	%f157, %f156;
	setp.gt.f32 	%p14, %f158, 0f4B000000;
	cvt.rzi.f32.f32 	%f191, %f190;
	setp.gt.f32 	%p20, %f192, 0f4B000000;
	cvt.rzi.f32.f32 	%f226, %f225;
	setp.gt.f32 	%p26, %f227, 0f4B000000;
	cvt.rzi.f32.f32 	%f260, %f259;
	setp.gt.f32 	%p32, %f261, 0f4B000000;
	cvt.rzi.f32.f32 	%f295, %f294;
	setp.gt.f32 	%p38, %f296, 0f4B000000;
	cvt.rzi.f32.f32 	%f329, %f328;
	setp.gt.f32 	%p44, %f330, 0f4B000000;
	cvt.rzi.f32.f32 	%f364, %f363;
	setp.gt.f32 	%p50, %f365, 0f4B000000;
	cvt.rzi.f32.f32 	%f398, %f397;
	setp.gt.f32 	%p56, %f399, 0f4B000000;
	cvt.rzi.f32.f32 	%f428, %f427;
	setp.gt.f32 	%p61, %f429, 0f4B000000;
	cvt.rzi.f32.f32 	%f462, %f461;
	setp.gt.f32 	%p68, %f463, 0f4B000000;
	cvt.rzi.f32.f32 	%f514, %f513;
	setp.gt.f32 	%p88, %f515, 0f4B000000;
	cvt.rzi.f32.f32 	%f565, %f564;
	setp.gt.f32 	%p108, %f566, 0f4B000000;
	mov.b32 	%f616, %r341;
	mov.b32 	%f667, %r363;
	and.b32  	%r376, %r375, -2147483648;
	selp.f32 	%f159, %f154, %f157, %p14;
	cvt.rzi.f32.f32 	%f160, %f154;
	setp.lt.f32 	%p15, %f158, 0f3F000000;
	selp.f32 	%f193, %f188, %f191, %p20;
	cvt.rzi.f32.f32 	%f194, %f188;
	setp.lt.f32 	%p21, %f192, 0f3F000000;
	selp.f32 	%f228, %f223, %f226, %p26;
	cvt.rzi.f32.f32 	%f229, %f223;
	setp.lt.f32 	%p27, %f227, 0f3F000000;
	selp.f32 	%f262, %f257, %f260, %p32;
	cvt.rzi.f32.f32 	%f263, %f257;
	setp.lt.f32 	%p33, %f261, 0f3F000000;
	selp.f32 	%f297, %f292, %f295, %p38;
	cvt.rzi.f32.f32 	%f298, %f292;
	setp.lt.f32 	%p39, %f296, 0f3F000000;
	selp.f32 	%f331, %f326, %f329, %p44;
	cvt.rzi.f32.f32 	%f332, %f326;
	setp.lt.f32 	%p45, %f330, 0f3F000000;
	selp.f32 	%f366, %f361, %f364, %p50;
	cvt.rzi.f32.f32 	%f367, %f361;
	setp.lt.f32 	%p51, %f365, 0f3F000000;
	selp.f32 	%f400, %f395, %f398, %p56;
	cvt.rzi.f32.f32 	%f401, %f395;
	setp.lt.f32 	%p57, %f399, 0f3F000000;
	selp.f32 	%f430, %f425, %f428, %p61;
	cvt.rzi.f32.f32 	%f431, %f425;
	setp.lt.f32 	%p62, %f429, 0f3F000000;
	selp.f32 	%f464, %f459, %f462, %p68;
	cvt.rzi.f32.f32 	%f465, %f459;
	setp.lt.f32 	%p69, %f463, 0f3F000000;
	selp.f32 	%f516, %f511, %f514, %p88;
	cvt.rzi.f32.f32 	%f517, %f511;
	setp.lt.f32 	%p89, %f515, 0f3F000000;
	selp.f32 	%f567, %f562, %f565, %p108;
	cvt.rzi.f32.f32 	%f568, %f562;
	setp.lt.f32 	%p109, %f566, 0f3F000000;
	add.f32 	%f617, %f615, %f616;
	abs.f32 	%f619, %f615;
	add.f32 	%f668, %f666, %f667;
	abs.f32 	%f670, %f666;
	or.b32  	%r377, %r376, 1056964608;
	selp.f32 	%f161, %f160, %f159, %p15;
	selp.f32 	%f195, %f194, %f193, %p21;
	selp.f32 	%f230, %f229, %f228, %p27;
	selp.f32 	%f264, %f263, %f262, %p33;
	selp.f32 	%f299, %f298, %f297, %p39;
	selp.f32 	%f333, %f332, %f331, %p45;
	selp.f32 	%f368, %f367, %f366, %p51;
	selp.f32 	%f402, %f401, %f400, %p57;
	selp.f32 	%f432, %f431, %f430, %p62;
	selp.f32 	%f466, %f465, %f464, %p69;
	selp.f32 	%f518, %f517, %f516, %p89;
	selp.f32 	%f569, %f568, %f567, %p109;
	cvt.rzi.f32.f32 	%f618, %f617;
	setp.gt.f32 	%p128, %f619, 0f4B000000;
	cvt.rzi.f32.f32 	%f669, %f668;
	setp.gt.f32 	%p149, %f670, 0f4B000000;
	mov.b32 	%f719, %r377;
	fma.rn.f32 	%f162, %f161, 0fBF000000, %f153;
	fma.rn.f32 	%f196, %f195, 0fBF000000, %f187;
	fma.rn.f32 	%f231, %f230, 0fBF000000, %f222;
	fma.rn.f32 	%f265, %f264, 0fBF000000, %f256;
	fma.rn.f32 	%f300, %f299, 0fBF000000, %f291;
	fma.rn.f32 	%f334, %f333, 0fBF000000, %f325;
	fma.rn.f32 	%f369, %f368, 0fBF000000, %f360;
	fma.rn.f32 	%f403, %f402, 0fBF000000, %f394;
	fma.rn.f32 	%f433, %f432, 0fBF000000, %f424;
	fma.rn.f32 	%f467, %f466, 0fBF000000, %f458;
	fma.rn.f32 	%f519, %f518, 0fBF000000, %f822;
	fma.rn.f32 	%f570, %f569, 0fBF000000, %f810;
	selp.f32 	%f620, %f615, %f618, %p128;
	cvt.rzi.f32.f32 	%f621, %f615;
	setp.lt.f32 	%p129, %f619, 0f3F000000;
	selp.f32 	%f671, %f666, %f669, %p149;
	cvt.rzi.f32.f32 	%f672, %f666;
	setp.lt.f32 	%p150, %f670, 0f3F000000;
	add.f32 	%f720, %f718, %f719;
	abs.f32 	%f722, %f718;
	mul.f32 	%f163, %f162, %f162;
	mul.f32 	%f197, %f196, %f196;
	mul.f32 	%f232, %f231, %f231;
	mul.f32 	%f266, %f265, %f265;
	mul.f32 	%f301, %f300, %f300;
	mul.f32 	%f335, %f334, %f334;
	mul.f32 	%f370, %f369, %f369;
	mul.f32 	%f404, %f403, %f403;
	mul.f32 	%f434, %f433, %f433;
	mul.f32 	%f468, %f467, %f467;
	mul.f32 	%f520, %f519, %f519;
	mul.f32 	%f571, %f570, %f570;
	selp.f32 	%f622, %f621, %f620, %p129;
	selp.f32 	%f673, %f672, %f671, %p150;
	cvt.rzi.f32.f32 	%f721, %f720;
	setp.gt.f32 	%p169, %f722, 0f4B000000;
	cvt.rzi.s32.f32 	%r184, %f161;
	fma.rn.f32 	%f164, %f163, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f165, %f163, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r191, %f195;
	fma.rn.f32 	%f198, %f197, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f199, %f197, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r202, %f230;
	fma.rn.f32 	%f233, %f232, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f234, %f232, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r209, %f264;
	fma.rn.f32 	%f267, %f266, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f268, %f266, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r220, %f299;
	fma.rn.f32 	%f302, %f301, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f303, %f301, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r227, %f333;
	fma.rn.f32 	%f336, %f335, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f337, %f335, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r238, %f368;
	fma.rn.f32 	%f371, %f370, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f372, %f370, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r245, %f402;
	fma.rn.f32 	%f405, %f404, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f406, %f404, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f435, %f434, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f436, %f434, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f469, %f468, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f470, %f468, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f521, %f520, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f522, %f520, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f572, %f571, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f573, %f571, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f623, %f622, 0fBF000000, %f826;
	fma.rn.f32 	%f674, %f673, 0fBF000000, %f814;
	selp.f32 	%f723, %f718, %f721, %p169;
	cvt.rzi.f32.f32 	%f724, %f718;
	setp.lt.f32 	%p170, %f722, 0f3F000000;
	add.s32 	%r185, %r184, 1;
	fma.rn.f32 	%f166, %f164, %f163, 0fC0A55DF6;
	fma.rn.f32 	%f167, %f165, %f163, 0f4081E0CF;
	fma.rn.f32 	%f168, %f163, %f162, 0f00000000;
	add.s32 	%r192, %r191, 1;
	fma.rn.f32 	%f200, %f198, %f197, 0fC0A55DF6;
	fma.rn.f32 	%f201, %f199, %f197, 0f4081E0CF;
	fma.rn.f32 	%f202, %f197, %f196, 0f00000000;
	add.s32 	%r203, %r202, 1;
	fma.rn.f32 	%f235, %f233, %f232, 0fC0A55DF6;
	fma.rn.f32 	%f236, %f234, %f232, 0f4081E0CF;
	fma.rn.f32 	%f237, %f232, %f231, 0f00000000;
	add.s32 	%r210, %r209, 1;
	fma.rn.f32 	%f269, %f267, %f266, 0fC0A55DF6;
	fma.rn.f32 	%f270, %f268, %f266, 0f4081E0CF;
	fma.rn.f32 	%f271, %f266, %f265, 0f00000000;
	add.s32 	%r221, %r220, 1;
	fma.rn.f32 	%f304, %f302, %f301, 0fC0A55DF6;
	fma.rn.f32 	%f305, %f303, %f301, 0f4081E0CF;
	fma.rn.f32 	%f306, %f301, %f300, 0f00000000;
	add.s32 	%r228, %r227, 1;
	fma.rn.f32 	%f338, %f336, %f335, 0fC0A55DF6;
	fma.rn.f32 	%f339, %f337, %f335, 0f4081E0CF;
	fma.rn.f32 	%f340, %f335, %f334, 0f00000000;
	add.s32 	%r239, %r238, 1;
	fma.rn.f32 	%f373, %f371, %f370, 0fC0A55DF6;
	fma.rn.f32 	%f374, %f372, %f370, 0f4081E0CF;
	fma.rn.f32 	%f375, %f370, %f369, 0f00000000;
	add.s32 	%r246, %r245, 1;
	fma.rn.f32 	%f407, %f405, %f404, 0fC0A55DF6;
	fma.rn.f32 	%f408, %f406, %f404, 0f4081E0CF;
	fma.rn.f32 	%f409, %f404, %f403, 0f00000000;
	cvt.rzi.s32.f32 	%r263, %f432;
	fma.rn.f32 	%f437, %f435, %f434, 0fC0A55DF6;
	fma.rn.f32 	%f438, %f436, %f434, 0f4081E0CF;
	fma.rn.f32 	%f439, %f434, %f433, 0f00000000;
	cvt.rzi.s32.f32 	%r273, %f466;
	fma.rn.f32 	%f471, %f469, %f468, 0fC0A55DF6;
	fma.rn.f32 	%f472, %f470, %f468, 0f4081E0CF;
	fma.rn.f32 	%f473, %f468, %f467, 0f00000000;
	cvt.rzi.s32.f32 	%r295, %f518;
	fma.rn.f32 	%f523, %f521, %f520, 0fC0A55DF6;
	fma.rn.f32 	%f524, %f522, %f520, 0f4081E0CF;
	fma.rn.f32 	%f525, %f520, %f519, 0f00000000;
	cvt.rzi.s32.f32 	%r326, %f569;
	fma.rn.f32 	%f574, %f572, %f571, 0fC0A55DF6;
	fma.rn.f32 	%f575, %f573, %f571, 0f4081E0CF;
	fma.rn.f32 	%f576, %f571, %f570, 0f00000000;
	mul.f32 	%f624, %f623, %f623;
	mul.f32 	%f675, %f674, %f674;
	selp.f32 	%f725, %f724, %f723, %p170;
	fma.rn.f32 	%f169, %f167, %f163, 0fC09DE9E6;
	fma.rn.f32 	%f170, %f166, %f168, 0f00000000;
	and.b32  	%r186, %r185, 1;
	fma.rn.f32 	%f203, %f201, %f197, 0fC09DE9E6;
	fma.rn.f32 	%f204, %f200, %f202, 0f00000000;
	and.b32  	%r193, %r192, 1;
	fma.rn.f32 	%f238, %f236, %f232, 0fC09DE9E6;
	fma.rn.f32 	%f239, %f235, %f237, 0f00000000;
	and.b32  	%r204, %r203, 1;
	fma.rn.f32 	%f272, %f270, %f266, 0fC09DE9E6;
	fma.rn.f32 	%f273, %f269, %f271, 0f00000000;
	and.b32  	%r211, %r210, 1;
	fma.rn.f32 	%f307, %f305, %f301, 0fC09DE9E6;
	fma.rn.f32 	%f308, %f304, %f306, 0f00000000;
	and.b32  	%r222, %r221, 1;
	fma.rn.f32 	%f341, %f339, %f335, 0fC09DE9E6;
	fma.rn.f32 	%f342, %f338, %f340, 0f00000000;
	and.b32  	%r229, %r228, 1;
	fma.rn.f32 	%f376, %f374, %f370, 0fC09DE9E6;
	fma.rn.f32 	%f377, %f373, %f375, 0f00000000;
	and.b32  	%r240, %r239, 1;
	fma.rn.f32 	%f410, %f408, %f404, 0fC09DE9E6;
	fma.rn.f32 	%f411, %f407, %f409, 0f00000000;
	and.b32  	%r247, %r246, 1;
	fma.rn.f32 	%f440, %f438, %f434, 0fC09DE9E6;
	fma.rn.f32 	%f441, %f437, %f439, 0f00000000;
	and.b32  	%r264, %r263, 1;
	fma.rn.f32 	%f474, %f472, %f468, 0fC09DE9E6;
	fma.rn.f32 	%f475, %f471, %f473, 0f00000000;
	and.b32  	%r274, %r273, 1;
	fma.rn.f32 	%f526, %f524, %f520, 0fC09DE9E6;
	fma.rn.f32 	%f527, %f523, %f525, 0f00000000;
	and.b32  	%r296, %r295, 1;
	fma.rn.f32 	%f577, %f575, %f571, 0fC09DE9E6;
	fma.rn.f32 	%f578, %f574, %f576, 0f00000000;
	and.b32  	%r327, %r326, 1;
	fma.rn.f32 	%f625, %f624, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f626, %f624, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f676, %f675, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f677, %f675, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f726, %f725, 0fBF000000, %f830;
	fma.rn.f32 	%f171, %f169, %f163, 0f3F800000;
	fma.rn.f32 	%f172, %f162, 0f40490FDB, %f170;
	setp.eq.b32 	%p16, %r186, 1;
	fma.rn.f32 	%f205, %f203, %f197, 0f3F800000;
	fma.rn.f32 	%f206, %f196, 0f40490FDB, %f204;
	setp.eq.b32 	%p22, %r193, 1;
	fma.rn.f32 	%f240, %f238, %f232, 0f3F800000;
	fma.rn.f32 	%f241, %f231, 0f40490FDB, %f239;
	setp.eq.b32 	%p28, %r204, 1;
	fma.rn.f32 	%f274, %f272, %f266, 0f3F800000;
	fma.rn.f32 	%f275, %f265, 0f40490FDB, %f273;
	setp.eq.b32 	%p34, %r211, 1;
	fma.rn.f32 	%f309, %f307, %f301, 0f3F800000;
	fma.rn.f32 	%f310, %f300, 0f40490FDB, %f308;
	setp.eq.b32 	%p40, %r222, 1;
	fma.rn.f32 	%f343, %f341, %f335, 0f3F800000;
	fma.rn.f32 	%f344, %f334, 0f40490FDB, %f342;
	setp.eq.b32 	%p46, %r229, 1;
	fma.rn.f32 	%f378, %f376, %f370, 0f3F800000;
	fma.rn.f32 	%f379, %f369, 0f40490FDB, %f377;
	setp.eq.b32 	%p52, %r240, 1;
	fma.rn.f32 	%f412, %f410, %f404, 0f3F800000;
	fma.rn.f32 	%f413, %f403, 0f40490FDB, %f411;
	setp.eq.b32 	%p58, %r247, 1;
	fma.rn.f32 	%f442, %f440, %f434, 0f3F800000;
	fma.rn.f32 	%f443, %f433, 0f40490FDB, %f441;
	setp.eq.b32 	%p63, %r264, 1;
	fma.rn.f32 	%f476, %f474, %f468, 0f3F800000;
	fma.rn.f32 	%f477, %f467, 0f40490FDB, %f475;
	setp.eq.b32 	%p70, %r274, 1;
	fma.rn.f32 	%f528, %f526, %f520, 0f3F800000;
	fma.rn.f32 	%f529, %f519, 0f40490FDB, %f527;
	setp.eq.b32 	%p90, %r296, 1;
	fma.rn.f32 	%f579, %f577, %f571, 0f3F800000;
	fma.rn.f32 	%f580, %f570, 0f40490FDB, %f578;
	setp.eq.b32 	%p110, %r327, 1;
	cvt.rzi.s32.f32 	%r342, %f622;
	fma.rn.f32 	%f627, %f625, %f624, 0fC0A55DF6;
	fma.rn.f32 	%f628, %f626, %f624, 0f4081E0CF;
	fma.rn.f32 	%f629, %f624, %f623, 0f00000000;
	cvt.rzi.s32.f32 	%r364, %f673;
	fma.rn.f32 	%f678, %f676, %f675, 0fC0A55DF6;
	fma.rn.f32 	%f679, %f677, %f675, 0f4081E0CF;
	fma.rn.f32 	%f680, %f675, %f674, 0f00000000;
	mul.f32 	%f727, %f726, %f726;
	selp.f32 	%f173, %f171, %f172, %p16;
	and.b32  	%r187, %r185, 2;
	mov.f32 	%f174, 0f00000000;
	selp.f32 	%f207, %f205, %f206, %p22;
	and.b32  	%r194, %r192, 2;
	selp.f32 	%f242, %f240, %f241, %p28;
	and.b32  	%r205, %r203, 2;
	selp.f32 	%f276, %f274, %f275, %p34;
	and.b32  	%r212, %r210, 2;
	selp.f32 	%f311, %f309, %f310, %p40;
	and.b32  	%r223, %r221, 2;
	selp.f32 	%f345, %f343, %f344, %p46;
	and.b32  	%r230, %r228, 2;
	selp.f32 	%f380, %f378, %f379, %p52;
	and.b32  	%r241, %r239, 2;
	selp.f32 	%f414, %f412, %f413, %p58;
	and.b32  	%r248, %r246, 2;
	selp.f32 	%f444, %f442, %f443, %p63;
	and.b32  	%r265, %r263, 2;
	selp.f32 	%f478, %f476, %f477, %p70;
	and.b32  	%r275, %r273, 2;
	selp.f32 	%f530, %f528, %f529, %p90;
	and.b32  	%r297, %r295, 2;
	selp.f32 	%f581, %f579, %f580, %p110;
	and.b32  	%r328, %r326, 2;
	fma.rn.f32 	%f630, %f628, %f624, 0fC09DE9E6;
	fma.rn.f32 	%f631, %f627, %f629, 0f00000000;
	and.b32  	%r343, %r342, 1;
	fma.rn.f32 	%f681, %f679, %f675, 0fC09DE9E6;
	fma.rn.f32 	%f682, %f678, %f680, 0f00000000;
	and.b32  	%r365, %r364, 1;
	fma.rn.f32 	%f728, %f727, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f729, %f727, 0f3E684E12, 0fBFAAD2E0;
	setp.eq.s32 	%p17, %r187, 0;
	sub.f32 	%f175, %f174, %f173;
	setp.eq.s32 	%p23, %r194, 0;
	sub.f32 	%f209, %f174, %f207;
	setp.eq.s32 	%p29, %r205, 0;
	sub.f32 	%f244, %f174, %f242;
	setp.eq.s32 	%p35, %r212, 0;
	sub.f32 	%f278, %f174, %f276;
	setp.eq.s32 	%p41, %r223, 0;
	sub.f32 	%f313, %f174, %f311;
	setp.eq.s32 	%p47, %r230, 0;
	sub.f32 	%f347, %f174, %f345;
	setp.eq.s32 	%p53, %r241, 0;
	sub.f32 	%f382, %f174, %f380;
	setp.eq.s32 	%p59, %r248, 0;
	sub.f32 	%f416, %f174, %f414;
	setp.eq.s32 	%p64, %r265, 0;
	neg.f32 	%f446, %f444;
	add.s32 	%r266, %r263, 1;
	cvt.rzi.f32.f32 	%f451, %f424;
	setp.eq.s32 	%p71, %r275, 0;
	neg.f32 	%f480, %f478;
	add.s32 	%r276, %r273, 1;
	cvt.rzi.f32.f32 	%f484, %f458;
	setp.eq.s32 	%p91, %r297, 0;
	neg.f32 	%f532, %f530;
	add.s32 	%r298, %r295, 1;
	cvt.rzi.f32.f32 	%f537, %f822;
	setp.eq.s32 	%p111, %r328, 0;
	neg.f32 	%f583, %f581;
	add.s32 	%r329, %r326, 1;
	cvt.rzi.f32.f32 	%f588, %f810;
	fma.rn.f32 	%f632, %f630, %f624, 0f3F800000;
	fma.rn.f32 	%f633, %f623, 0f40490FDB, %f631;
	setp.eq.b32 	%p130, %r343, 1;
	fma.rn.f32 	%f683, %f681, %f675, 0f3F800000;
	fma.rn.f32 	%f684, %f674, 0f40490FDB, %f682;
	setp.eq.b32 	%p151, %r365, 1;
	cvt.rzi.s32.f32 	%r378, %f725;
	fma.rn.f32 	%f730, %f728, %f727, 0fC0A55DF6;
	fma.rn.f32 	%f731, %f729, %f727, 0f4081E0CF;
	fma.rn.f32 	%f732, %f727, %f726, 0f00000000;
	selp.f32 	%f176, %f173, %f175, %p17;
	selp.f32 	%f210, %f207, %f209, %p23;
	selp.f32 	%f245, %f242, %f244, %p29;
	selp.f32 	%f279, %f276, %f278, %p35;
	selp.f32 	%f314, %f311, %f313, %p41;
	selp.f32 	%f348, %f345, %f347, %p47;
	selp.f32 	%f383, %f380, %f382, %p53;
	selp.f32 	%f417, %f414, %f416, %p59;
	selp.f32 	%f445, %f443, %f442, %p63;
	selp.f32 	%f447, %f444, %f446, %p64;
	and.b32  	%r267, %r266, 2;
	setp.eq.f32 	%p66, %f451, %f424;
	mul.f32 	%f452, %f424, 0f00000000;
	selp.f32 	%f479, %f477, %f476, %p70;
	selp.f32 	%f481, %f478, %f480, %p71;
	and.b32  	%r277, %r276, 2;
	setp.eq.f32 	%p73, %f484, %f458;
	mul.f32 	%f485, %f458, 0f00000000;
	selp.f32 	%f531, %f529, %f528, %p90;
	selp.f32 	%f533, %f530, %f532, %p91;
	and.b32  	%r299, %r298, 2;
	setp.eq.f32 	%p93, %f537, %f822;
	mul.f32 	%f538, %f822, 0f00000000;
	selp.f32 	%f582, %f580, %f579, %p110;
	selp.f32 	%f584, %f581, %f583, %p111;
	and.b32  	%r330, %r329, 2;
	setp.eq.f32 	%p113, %f588, %f810;
	mul.f32 	%f589, %f810, 0f00000000;
	selp.f32 	%f634, %f632, %f633, %p130;
	and.b32  	%r344, %r342, 2;
	selp.f32 	%f685, %f683, %f684, %p151;
	and.b32  	%r366, %r364, 2;
	fma.rn.f32 	%f733, %f731, %f727, 0fC09DE9E6;
	fma.rn.f32 	%f734, %f730, %f732, 0f00000000;
	and.b32  	%r379, %r378, 1;
	mul.f32 	%f86, %f176, %f176;
	mul.f32 	%f4, %f210, %f210;
	mul.f32 	%f8, %f245, %f245;
	mul.f32 	%f13, %f279, %f279;
	mul.f32 	%f17, %f314, %f314;
	mul.f32 	%f22, %f348, %f348;
	mul.f32 	%f26, %f383, %f383;
	mul.f32 	%f31, %f417, %f417;
	setp.eq.s32 	%p65, %r267, 0;
	sub.f32 	%f449, %f174, %f445;
	selp.f32 	%f453, %f452, %f447, %p66;
	abs.f32 	%f454, %f424;
	setp.eq.s32 	%p72, %r277, 0;
	sub.f32 	%f482, %f174, %f479;
	selp.f32 	%f486, %f485, %f481, %p73;
	abs.f32 	%f487, %f458;
	setp.eq.s32 	%p92, %r299, 0;
	sub.f32 	%f535, %f174, %f531;
	selp.f32 	%f103, %f538, %f533, %p93;
	abs.f32 	%f539, %f822;
	setp.eq.s32 	%p112, %r330, 0;
	sub.f32 	%f586, %f174, %f582;
	selp.f32 	%f590, %f589, %f584, %p113;
	abs.f32 	%f591, %f810;
	setp.eq.s32 	%p131, %r344, 0;
	neg.f32 	%f636, %f634;
	add.s32 	%r345, %r342, 1;
	cvt.rzi.f32.f32 	%f641, %f826;
	setp.eq.s32 	%p152, %r366, 0;
	neg.f32 	%f687, %f685;
	add.s32 	%r367, %r364, 1;
	cvt.rzi.f32.f32 	%f692, %f814;
	fma.rn.f32 	%f735, %f733, %f727, 0f3F800000;
	fma.rn.f32 	%f736, %f726, 0f40490FDB, %f734;
	setp.eq.b32 	%p171, %r379, 1;
	mul.f32 	%f180, %f86, 0f3C0AF64E;
	mul.f32 	%f214, %f4, 0f3C0AF64E;
	mul.f32 	%f249, %f8, 0f3C0AF64E;
	mul.f32 	%f283, %f13, 0f3C0AF64E;
	mul.f32 	%f318, %f17, 0f3C0AF64E;
	mul.f32 	%f352, %f22, 0f3C0AF64E;
	mul.f32 	%f387, %f26, 0f3C0AF64E;
	mul.f32 	%f420, %f31, 0f3C0AF64E;
	selp.f32 	%f450, %f445, %f449, %p65;
	setp.gt.f32 	%p67, %f454, 0f4B800000;
	add.f32 	%f455, %f453, 0f3F800000;
	selp.f32 	%f483, %f479, %f482, %p72;
	setp.gt.f32 	%p74, %f487, 0f4B800000;
	add.f32 	%f488, %f486, 0f3F800000;
	selp.f32 	%f536, %f531, %f535, %p92;
	setp.gt.f32 	%p94, %f539, 0f4B800000;
	add.f32 	%f540, %f103, 0f3F800000;
	selp.f32 	%f587, %f582, %f586, %p112;
	setp.gt.f32 	%p114, %f591, 0f4B800000;
	add.f32 	%f592, %f590, 0f3F800000;
	selp.f32 	%f635, %f633, %f632, %p130;
	selp.f32 	%f637, %f634, %f636, %p131;
	and.b32  	%r346, %r345, 2;
	setp.eq.f32 	%p133, %f641, %f826;
	mul.f32 	%f642, %f826, 0f00000000;
	selp.f32 	%f686, %f684, %f683, %p151;
	selp.f32 	%f688, %f685, %f687, %p152;
	and.b32  	%r368, %r367, 2;
	setp.eq.f32 	%p154, %f692, %f814;
	mul.f32 	%f693, %f814, 0f00000000;
	selp.f32 	%f737, %f735, %f736, %p171;
	and.b32  	%r380, %r378, 2;
	mul.f32 	%f3, %f180, %f800;
	mul.f32 	%f215, %f214, %f801;
	mul.f32 	%f12, %f249, %f802;
	mul.f32 	%f284, %f283, %f803;
	mul.f32 	%f21, %f318, %f804;
	mul.f32 	%f353, %f352, %f805;
	mul.f32 	%f30, %f387, %f806;
	mul.f32 	%f421, %f420, %f807;
	selp.f32 	%f456, %f455, %f450, %p67;
	selp.f32 	%f489, %f488, %f483, %p74;
	selp.f32 	%f104, %f540, %f536, %p94;
	selp.f32 	%f593, %f592, %f587, %p114;
	setp.eq.s32 	%p132, %r346, 0;
	sub.f32 	%f639, %f174, %f635;
	selp.f32 	%f123, %f642, %f637, %p133;
	abs.f32 	%f643, %f826;
	setp.eq.s32 	%p153, %r368, 0;
	sub.f32 	%f690, %f174, %f686;
	selp.f32 	%f694, %f693, %f688, %p154;
	abs.f32 	%f695, %f814;
	setp.eq.s32 	%p172, %r380, 0;
	neg.f32 	%f739, %f737;
	add.s32 	%r381, %r378, 1;
	cvt.rzi.f32.f32 	%f744, %f830;
	ld.param.u64 	%rd2, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	ld.param.u64 	%rd3, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	mov.b32 	%r197, %f215;
	mov.b32 	%r196, %f3;
	mov.b32 	%r215, %f284;
	mov.b32 	%r214, %f12;
	mov.b32 	%r233, %f353;
	mov.b32 	%r232, %f21;
	mov.b32 	%r251, %f421;
	mov.b32 	%r250, %f30;
	mov.b32 	%r253, %f456;
	mov.b32 	%r254, %f489;
	mov.b32 	%r256, %f453;
	mov.b32 	%r257, %f486;
	mov.b32 	%r313, %f593;
	mov.b32 	%r312, %f104;
	mov.b32 	%r319, %f590;
	mov.b32 	%r318, %f103;
	selp.f32 	%f640, %f635, %f639, %p132;
	setp.gt.f32 	%p134, %f643, 0f4B800000;
	add.f32 	%f644, %f123, 0f3F800000;
	selp.f32 	%f691, %f686, %f690, %p153;
	setp.gt.f32 	%p155, %f695, 0f4B800000;
	add.f32 	%f696, %f694, 0f3F800000;
	selp.f32 	%f738, %f736, %f735, %p171;
	selp.f32 	%f740, %f737, %f739, %p172;
	and.b32  	%r382, %r381, 2;
	setp.eq.f32 	%p174, %f744, %f830;
	mul.f32 	%f745, %f830, 0f00000000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r195, %r197, %r196;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r213, %r215, %r214;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r231, %r233, %r232;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r249, %r251, %r250;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r252, %r254, %r253;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r255, %r257, %r256;
	// end inline asm
	xor.b32  	%r316, %r319, -2147483648;
	xor.b32  	%r315, %r318, -2147483648;
	selp.f32 	%f124, %f644, %f640, %p134;
	selp.f32 	%f697, %f696, %f691, %p155;
	setp.eq.s32 	%p173, %r382, 0;
	sub.f32 	%f742, %f174, %f738;
	selp.f32 	%f142, %f745, %f740, %p174;
	abs.f32 	%f746, %f830;
	// begin inline asm
	cvt.rn.f16x2.f32 %r311, %r313, %r312;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r314, %r316, %r315;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r317, %r319, %r318;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r320, %r313, %r312;
	// end inline asm
	mov.b32 	%r357, %f697;
	mov.b32 	%r356, %f124;
	mov.b32 	%r360, %f694;
	mov.b32 	%r359, %f123;
	selp.f32 	%f743, %f738, %f742, %p173;
	setp.gt.f32 	%p175, %f746, 0f4B800000;
	add.f32 	%f747, %f142, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r355, %r357, %r356;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r358, %r360, %r359;
	// end inline asm
	selp.f32 	%f143, %f747, %f743, %p175;
	add.f32 	%f768, %f818, %f818;
	mov.b32 	%r401, %f768;
	and.b32  	%r402, %r401, -2147483648;
	or.b32  	%r403, %r402, 1056964608;
	mov.b32 	%f769, %r403;
	add.f32 	%f770, %f768, %f769;
	cvt.rzi.f32.f32 	%f771, %f770;
	abs.f32 	%f772, %f768;
	setp.gt.f32 	%p188, %f772, 0f4B000000;
	selp.f32 	%f773, %f768, %f771, %p188;
	cvt.rzi.f32.f32 	%f774, %f768;
	setp.lt.f32 	%p189, %f772, 0f3F000000;
	selp.f32 	%f775, %f774, %f773, %p189;
	cvt.rzi.s32.f32 	%r404, %f775;
	fma.rn.f32 	%f776, %f775, 0fBF000000, %f818;
	mul.f32 	%f777, %f776, %f776;
	fma.rn.f32 	%f778, %f777, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f779, %f777, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f780, %f778, %f777, 0fC0A55DF6;
	fma.rn.f32 	%f781, %f779, %f777, 0f4081E0CF;
	fma.rn.f32 	%f782, %f777, %f776, 0f00000000;
	fma.rn.f32 	%f783, %f781, %f777, 0fC09DE9E6;
	fma.rn.f32 	%f784, %f780, %f782, 0f00000000;
	fma.rn.f32 	%f785, %f783, %f777, 0f3F800000;
	fma.rn.f32 	%f786, %f776, 0f40490FDB, %f784;
	and.b32  	%r405, %r404, 1;
	setp.eq.b32 	%p190, %r405, 1;
	selp.f32 	%f787, %f785, %f786, %p190;
	selp.f32 	%f788, %f786, %f785, %p190;
	and.b32  	%r406, %r404, 2;
	setp.eq.s32 	%p191, %r406, 0;
	neg.f32 	%f789, %f787;
	selp.f32 	%f790, %f787, %f789, %p191;
	add.s32 	%r407, %r404, 1;
	and.b32  	%r408, %r407, 2;
	setp.eq.s32 	%p192, %r408, 0;
	sub.f32 	%f792, %f174, %f788;
	selp.f32 	%f793, %f788, %f792, %p192;
	cvt.rzi.f32.f32 	%f794, %f818;
	setp.eq.f32 	%p193, %f794, %f818;
	mul.f32 	%f795, %f818, 0f00000000;
	selp.f32 	%f796, %f795, %f790, %p193;
	abs.f32 	%f797, %f818;
	setp.gt.f32 	%p194, %f797, 0f4B800000;
	add.f32 	%f798, %f796, 0f3F800000;
	selp.f32 	%f799, %f798, %f793, %p194;
	mov.b32 	%r391, %f799;
	mov.b32 	%r390, %f143;
	// begin inline asm
	cvt.rn.f16x2.f32 %r389, %r391, %r390;
	// end inline asm
	mov.b32 	%r397, %f796;
	xor.b32  	%r394, %r397, -2147483648;
	mov.b32 	%r396, %f142;
	xor.b32  	%r393, %r396, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r392, %r394, %r393;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r395, %r397, %r396;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r398, %r391, %r390;
	// end inline asm
	shl.b32 	%r410, %r152, 13;
	shl.b32 	%r411, %r3, 5;
	and.b32  	%r412, %r411, 64;
	and.b32  	%r413, %r95, 28;
	and.b32  	%r414, %r411, 32;
	or.b32  	%r415, %r414, %r413;
	or.b32  	%r416, %r412, %r415;
	or.b32  	%r50, %r416, %r410;
	bfe.s32 	%r417, %r4, 3, 1;
	and.b32  	%r51, %r4, 8;
	shl.b32 	%r418, %r4, 4;
	or.b32  	%r419, %r51, %r418;
	shr.u32 	%r420, %r419, 2;
	and.b32  	%r421, %r420, 30;
	shr.u32 	%r422, %r1, 1;
	and.b32  	%r423, %r2, 32;
	or.b32  	%r424, %r423, %r422;
	or.b32  	%r425, %r424, 8;
	or.b32  	%r426, %r424, 16;
	or.b32  	%r427, %r424, 24;
	shr.u32 	%r428, %r99, 1;
	mul.lo.s32 	%r429, %r428, 65;
	add.s32 	%r430, %r424, %r429;
	add.s32 	%r431, %r425, %r429;
	add.s32 	%r432, %r426, %r429;
	add.s32 	%r433, %r427, %r429;
	shl.b32 	%r434, %r1, 1;
	or.b32  	%r435, %r103, %r434;
	mul.lo.s32 	%r436, %r435, 65;
	add.s32 	%r437, %r421, %r436;
	mul.wide.u32 	%rd48, %r437, 4;
	mov.u64 	%rd49, shmem;
	add.s64 	%rd5, %rd49, %rd48;
	cvt.u64.u32 	%rd50, %r421;
	cvt.u64.u32 	%rd51, %r436;
	add.s64 	%rd52, %rd51, %rd50;
	shl.b64 	%rd53, %rd52, 2;
	add.s64 	%rd6, %rd49, %rd53;
	shl.b32 	%r438, %r154, 19;
	add.s32 	%r439, %r438, -1572864;
	or.b32  	%r440, %r98, %r104;
	shl.b32 	%r441, %r1, 9;
	shl.b32 	%r442, %r440, 7;
	or.b32  	%r443, %r441, %r442;
	or.b32  	%r52, %r416, %r443;
	cvt.s64.s32 	%rd7, %r439;
	shr.u32 	%r444, %r1, 3;
	mul.lo.s32 	%r445, %r444, 130;
	bfe.s32 	%r446, %r1, 1, 1;
	and.b32  	%r447, %r1, 2;
	setp.eq.s32 	%p196, %r447, 0;
	and.b32  	%r448, %r446, 520;
	mul.lo.s32 	%r449, %r103, 65;
	bfe.s32 	%r450, %r1, 2, 1;
	and.b32  	%r451, %r1, 4;
	setp.eq.s32 	%p197, %r451, 0;
	and.b32  	%r452, %r450, 260;
	and.b32  	%r453, %r1, 1;
	neg.s32 	%r454, %r453;
	setp.eq.b32 	%p198, %r453, 1;
	and.b32  	%r455, %r454, 1040;
	add.s32 	%r456, %r455, %r421;
	add.s32 	%r457, %r456, %r445;
	add.s32 	%r458, %r457, %r448;
	add.s32 	%r459, %r458, %r449;
	add.s32 	%r460, %r459, %r452;
	mul.wide.u32 	%rd54, %r460, 4;
	add.s64 	%rd8, %rd49, %rd54;
	selp.b64 	%rd55, 0, 260, %p197;
	cvt.u64.u32 	%rd56, %r449;
	selp.b64 	%rd57, 0, 520, %p196;
	cvt.u64.u32 	%rd58, %r445;
	selp.b64 	%rd59, 1040, 0, %p198;
	add.s64 	%rd60, %rd50, %rd59;
	add.s64 	%rd61, %rd60, %rd58;
	add.s64 	%rd62, %rd61, %rd57;
	add.s64 	%rd63, %rd62, %rd56;
	add.s64 	%rd64, %rd63, %rd55;
	shl.b64 	%rd65, %rd64, 2;
	add.s64 	%rd9, %rd49, %rd65;
	cvt.u64.u32 	%rd66, %r457;
	add.s64 	%rd67, %rd66, %rd57;
	add.s64 	%rd68, %rd67, %rd56;
	add.s64 	%rd69, %rd68, %rd55;
	shl.b64 	%rd70, %rd69, 2;
	add.s64 	%rd10, %rd49, %rd70;
	add.s32 	%r461, %r460, 2113;
	mul.wide.u32 	%rd71, %r461, 4;
	add.s64 	%rd11, %rd49, %rd71;
	add.s32 	%r462, %r460, 2082;
	mul.wide.u32 	%rd72, %r462, 4;
	add.s64 	%rd12, %rd49, %rd72;
	add.s32 	%r463, %r460, 2114;
	mul.wide.u32 	%rd73, %r463, 4;
	add.s64 	%rd13, %rd49, %rd73;
	add.s32 	%r464, %r460, 4194;
	mul.wide.u32 	%rd74, %r464, 4;
	add.s64 	%rd14, %rd49, %rd74;
	add.s32 	%r465, %r460, 4163;
	mul.wide.u32 	%rd75, %r465, 4;
	add.s64 	%rd15, %rd49, %rd75;
	add.s32 	%r466, %r460, 4195;
	mul.wide.u32 	%rd76, %r466, 4;
	add.s64 	%rd16, %rd49, %rd76;
	add.s32 	%r467, %r460, 6275;
	mul.wide.u32 	%rd77, %r467, 4;
	add.s64 	%rd17, %rd49, %rd77;
	add.s32 	%r468, %r460, 6244;
	mul.wide.u32 	%rd78, %r468, 4;
	add.s64 	%rd18, %rd49, %rd78;
	add.s32 	%r469, %r460, 6276;
	mul.wide.u32 	%rd79, %r469, 4;
	add.s64 	%rd19, %rd49, %rd79;
	and.b32  	%r470, %r4, 1;
	neg.s32 	%r471, %r470;
	and.b32  	%r472, %r471, 130;
	mul.lo.s32 	%r473, %r103, 520;
	bfe.s32 	%r474, %r4, 1, 1;
	and.b32  	%r475, %r474, 65;
	bfe.s32 	%r476, %r4, 2, 1;
	and.b32  	%r477, %r476, 260;
	and.b32  	%r478, %r417, 1040;
	or.b32  	%r479, %r424, %r478;
	or.b32  	%r480, %r425, %r478;
	mul.wide.u32 	%rd20, %r433, 4;
	mul.wide.u32 	%rd21, %r432, 4;
	mul.wide.u32 	%rd22, %r431, 4;
	mul.wide.u32 	%rd23, %r430, 4;
	or.b32  	%r481, %r472, %r475;
	or.b32  	%r482, %r481, %r477;
	or.b32  	%r483, %r482, %r478;
	add.s32 	%r484, %r483, %r427;
	add.s32 	%r485, %r484, %r473;
	mul.wide.u32 	%rd24, %r485, 4;
	add.s32 	%r486, %r483, %r426;
	add.s32 	%r487, %r486, %r473;
	mul.wide.u32 	%rd25, %r487, 4;
	add.s32 	%r488, %r482, %r480;
	add.s32 	%r489, %r488, %r473;
	mul.wide.u32 	%rd26, %r489, 4;
	add.s32 	%r490, %r482, %r479;
	add.s32 	%r491, %r490, %r473;
	mul.wide.u32 	%rd27, %r491, 4;
	setp.eq.s32 	%p199, %r51, 0;
	mov.u16 	%rs1176, 25600;
	mov.u16 	%rs1072, 21504;
	mov.u16 	%rs1184, 18432;
	mov.u16 	%rs1142, -14592;
	mov.u32 	%r7958, %r7936;
	mov.u32 	%r7959, %r7936;
	mov.u32 	%r7960, %r7936;
	mov.u32 	%r7961, %r7936;
	mov.u32 	%r7962, %r7936;
	mov.u32 	%r7963, %r7936;
	mov.u32 	%r7964, %r7936;
	mov.u32 	%r7965, %r7936;
	mov.u32 	%r7966, %r7936;
	mov.u32 	%r7967, %r7936;
	mov.u32 	%r7968, %r7936;
	mov.u32 	%r7969, %r7936;
	mov.u32 	%r7956, %r7936;
	bra.uni 	$L__BB0_80;
$L__BB0_85:                             // %L40173
                                        //   in Loop: Header=BB0_80 Depth=1
	or.b32  	%r7931, %r7970, 1572864;
	add.s32 	%r7932, %r52, %r7931;
	cvt.s64.s32 	%rd133, %r7932;
	add.s64 	%rd134, %rd133, %rd7;
	shr.u64 	%rd135, %rd134, 36;
	add.s64 	%rd136, %rd134, %rd135;
	shr.s64 	%rd137, %rd136, 28;
	setp.lt.s64 	%p227, %rd134, 0;
	and.b64  	%rd138, %rd136, -268435456;
	setp.ne.s64 	%p228, %rd138, %rd134;
	and.pred  	%p229, %p227, %p228;
	selp.u64 	%rd139, 1, 0, %p229;
	sub.s64 	%rd140, %rd139, %rd137;
	shl.b64 	%rd141, %rd140, 28;
	add.s64 	%rd142, %rd141, %rd134;
	shl.b64 	%rd143, %rd142, 2;
	add.s64 	%rd144, %rd3, %rd143;
	st.global.v4.u32 	[%rd144], {%r147, %r149, %r148, %r150};
	add.s32 	%r7956, %r7956, 256;
	add.s32 	%r7933, %r7956, %r152;
	setp.lt.s32 	%p230, %r7933, %r153;
	@%p230 bra 	$L__BB0_80;
	bra.uni 	$L__BB0_86;
$L__BB0_80:                             // %L1335
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_81 Depth 2
	or.b32  	%r557, %r7956, %r4;
	and.b32  	%r558, %r557, 32528;
	or.b32  	%r559, %r558, %r96;
	or.b32  	%r560, %r559, %r1;
	shl.b32 	%r561, %r560, 13;
	add.s32 	%r562, %r50, %r561;
	shr.s32 	%r563, %r562, 31;
	shr.u32 	%r564, %r563, 4;
	add.s32 	%r565, %r562, %r564;
	shr.s32 	%r566, %r565, 28;
	setp.lt.s32 	%p200, %r562, 0;
	and.b32  	%r567, %r565, -268435456;
	setp.ne.s32 	%p201, %r567, %r562;
	and.pred  	%p202, %p200, %p201;
	selp.u32 	%r568, 1, 0, %p202;
	sub.s32 	%r569, %r568, %r566;
	shl.b32 	%r570, %r569, 28;
	add.s32 	%r571, %r570, %r562;
	mul.wide.s32 	%rd81, %r571, 4;
	add.s64 	%rd82, %rd2, %rd81;
	ld.global.v4.u32 	{%r572, %r573, %r574, %r575}, [%rd82];
	or.b32  	%r576, %r561, 524288;
	add.s32 	%r577, %r50, %r576;
	shr.s32 	%r578, %r577, 31;
	shr.u32 	%r579, %r578, 4;
	add.s32 	%r580, %r577, %r579;
	shr.s32 	%r581, %r580, 28;
	setp.lt.s32 	%p203, %r577, 0;
	and.b32  	%r582, %r580, -268435456;
	setp.ne.s32 	%p204, %r582, %r577;
	and.pred  	%p205, %p203, %p204;
	selp.u32 	%r583, 1, 0, %p205;
	sub.s32 	%r584, %r583, %r581;
	shl.b32 	%r585, %r584, 28;
	add.s32 	%r586, %r585, %r577;
	mul.wide.s32 	%rd83, %r586, 4;
	add.s64 	%rd84, %rd2, %rd83;
	ld.global.v4.u32 	{%r587, %r588, %r589, %r590}, [%rd84];
	or.b32  	%r591, %r561, 1048576;
	add.s32 	%r592, %r50, %r591;
	shr.s32 	%r593, %r592, 31;
	shr.u32 	%r594, %r593, 4;
	add.s32 	%r595, %r592, %r594;
	shr.s32 	%r596, %r595, 28;
	setp.lt.s32 	%p206, %r592, 0;
	and.b32  	%r597, %r595, -268435456;
	setp.ne.s32 	%p207, %r597, %r592;
	and.pred  	%p208, %p206, %p207;
	selp.u32 	%r598, 1, 0, %p208;
	sub.s32 	%r599, %r598, %r596;
	shl.b32 	%r600, %r599, 28;
	add.s32 	%r601, %r600, %r592;
	mul.wide.s32 	%rd85, %r601, 4;
	add.s64 	%rd86, %rd2, %rd85;
	ld.global.v4.u32 	{%r602, %r603, %r604, %r605}, [%rd86];
	or.b32  	%r606, %r561, 1572864;
	add.s32 	%r607, %r50, %r606;
	shr.s32 	%r608, %r607, 31;
	shr.u32 	%r609, %r608, 4;
	add.s32 	%r610, %r607, %r609;
	shr.s32 	%r611, %r610, 28;
	setp.lt.s32 	%p209, %r607, 0;
	and.b32  	%r612, %r610, -268435456;
	setp.ne.s32 	%p210, %r612, %r607;
	and.pred  	%p211, %p209, %p210;
	selp.u32 	%r613, 1, 0, %p211;
	sub.s32 	%r614, %r613, %r611;
	shl.b32 	%r615, %r614, 28;
	add.s32 	%r616, %r615, %r607;
	mul.wide.s32 	%rd87, %r616, 4;
	add.s64 	%rd88, %rd2, %rd87;
	ld.global.v4.u32 	{%r617, %r618, %r619, %r620}, [%rd88];
	selp.b32 	%r621, %r574, %r572, %p199;
	shfl.sync.bfly.b32	%r622, %r621, 8, 31, -1;
	selp.b32 	%r493, %r572, %r622, %p199;
	selp.b32 	%r494, %r622, %r574, %p199;
	selp.b32 	%r623, %r575, %r573, %p199;
	shfl.sync.bfly.b32	%r624, %r623, 8, 31, -1;
	selp.b32 	%r501, %r573, %r624, %p199;
	selp.b32 	%r502, %r624, %r575, %p199;
	selp.b32 	%r625, %r589, %r587, %p199;
	shfl.sync.bfly.b32	%r626, %r625, 8, 31, -1;
	selp.b32 	%r509, %r587, %r626, %p199;
	selp.b32 	%r510, %r626, %r589, %p199;
	selp.b32 	%r627, %r590, %r588, %p199;
	shfl.sync.bfly.b32	%r628, %r627, 8, 31, -1;
	selp.b32 	%r517, %r588, %r628, %p199;
	selp.b32 	%r518, %r628, %r590, %p199;
	selp.b32 	%r629, %r604, %r602, %p199;
	shfl.sync.bfly.b32	%r630, %r629, 8, 31, -1;
	selp.b32 	%r525, %r602, %r630, %p199;
	selp.b32 	%r526, %r630, %r604, %p199;
	selp.b32 	%r631, %r605, %r603, %p199;
	shfl.sync.bfly.b32	%r632, %r631, 8, 31, -1;
	selp.b32 	%r533, %r603, %r632, %p199;
	selp.b32 	%r534, %r632, %r605, %p199;
	selp.b32 	%r633, %r619, %r617, %p199;
	shfl.sync.bfly.b32	%r634, %r633, 8, 31, -1;
	selp.b32 	%r541, %r617, %r634, %p199;
	selp.b32 	%r542, %r634, %r619, %p199;
	selp.b32 	%r635, %r620, %r618, %p199;
	shfl.sync.bfly.b32	%r636, %r635, 8, 31, -1;
	selp.b32 	%r549, %r618, %r636, %p199;
	selp.b32 	%r550, %r636, %r620, %p199;
	mov.u32 	%r551, 21520;
	// begin inline asm
	prmt.b32 %r492, %r493, %r494, %r551;
	// end inline asm
	mov.u32 	%r555, 30258;
	// begin inline asm
	prmt.b32 %r496, %r493, %r494, %r555;
	// end inline asm
	// begin inline asm
	prmt.b32 %r500, %r501, %r502, %r551;
	// end inline asm
	// begin inline asm
	prmt.b32 %r504, %r501, %r502, %r555;
	// end inline asm
	// begin inline asm
	prmt.b32 %r508, %r509, %r510, %r551;
	// end inline asm
	// begin inline asm
	prmt.b32 %r512, %r509, %r510, %r555;
	// end inline asm
	// begin inline asm
	prmt.b32 %r516, %r517, %r518, %r551;
	// end inline asm
	// begin inline asm
	prmt.b32 %r520, %r517, %r518, %r555;
	// end inline asm
	// begin inline asm
	prmt.b32 %r524, %r525, %r526, %r551;
	// end inline asm
	// begin inline asm
	prmt.b32 %r528, %r525, %r526, %r555;
	// end inline asm
	// begin inline asm
	prmt.b32 %r532, %r533, %r534, %r551;
	// end inline asm
	// begin inline asm
	prmt.b32 %r536, %r533, %r534, %r555;
	// end inline asm
	// begin inline asm
	prmt.b32 %r540, %r541, %r542, %r551;
	// end inline asm
	// begin inline asm
	prmt.b32 %r544, %r541, %r542, %r555;
	// end inline asm
	// begin inline asm
	prmt.b32 %r548, %r549, %r550, %r551;
	// end inline asm
	// begin inline asm
	prmt.b32 %r552, %r549, %r550, %r555;
	// end inline asm
	st.shared.u32 	[%rd8], %r492;
	st.shared.u32 	[%rd9+128], %r496;
	st.shared.u32 	[%rd9+4], %r500;
	st.shared.u32 	[%rd9+132], %r504;
	st.shared.u32 	[%rd10+8324], %r508;
	st.shared.u32 	[%rd11], %r512;
	st.shared.u32 	[%rd12], %r516;
	st.shared.u32 	[%rd13], %r520;
	st.shared.u32 	[%rd10+16648], %r524;
	st.shared.u32 	[%rd14], %r528;
	st.shared.u32 	[%rd15], %r532;
	st.shared.u32 	[%rd16], %r536;
	st.shared.u32 	[%rd10+24972], %r540;
	st.shared.u32 	[%rd17], %r544;
	st.shared.u32 	[%rd18], %r548;
	st.shared.u32 	[%rd19], %r552;
	bar.sync 	0;
	mov.u32 	%r7957, 256;
	mov.u64 	%rd147, %rd49;
$L__BB0_81:                             // %L11611
                                        //   Parent Loop BB0_80 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	add.s64 	%rd89, %rd147, %rd27;
	ld.shared.u32 	%r7821, [%rd89];
	add.s64 	%rd90, %rd147, %rd26;
	ld.shared.u32 	%r7822, [%rd90];
	add.s64 	%rd91, %rd147, %rd25;
	ld.shared.u32 	%r7823, [%rd91];
	add.s64 	%rd92, %rd147, %rd24;
	ld.shared.u32 	%r7824, [%rd92];
	// begin inline asm
	mov.b32 %r642, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r653, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r641, %r7821, -2004318072;
	mov.u32 	%r640, 983055;
	// begin inline asm
	lop3.b32 %r639, %r640, %r641, %r642, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r643, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r644, %r642, %r643;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r647, %r639, %r644;
	// end inline asm
	mov.u32 	%r651, 15728880;
	// begin inline asm
	lop3.b32 %r650, %r651, %r641, %r653, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r654, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r655, %r653, %r654;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r658, %r650, %r655;
	// end inline asm
	shr.u32 	%r663, %r641, 8;
	// begin inline asm
	lop3.b32 %r661, %r640, %r663, %r642, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r665, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r666, %r642, %r665;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r669, %r661, %r666;
	// end inline asm
	// begin inline asm
	lop3.b32 %r672, %r651, %r663, %r653, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r676, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r677, %r653, %r676;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r680, %r672, %r677;
	// end inline asm
	// begin inline asm
	mov.b32 %r688, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r699, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r687, %r7822, -2004318072;
	// begin inline asm
	lop3.b32 %r685, %r640, %r687, %r688, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r689, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r690, %r688, %r689;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r693, %r685, %r690;
	// end inline asm
	// begin inline asm
	lop3.b32 %r696, %r651, %r687, %r699, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r700, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r701, %r699, %r700;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r704, %r696, %r701;
	// end inline asm
	shr.u32 	%r709, %r687, 8;
	// begin inline asm
	lop3.b32 %r707, %r640, %r709, %r688, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r711, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r712, %r688, %r711;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r715, %r707, %r712;
	// end inline asm
	// begin inline asm
	lop3.b32 %r718, %r651, %r709, %r699, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r722, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r723, %r699, %r722;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r726, %r718, %r723;
	// end inline asm
	// begin inline asm
	mov.b32 %r734, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r745, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r733, %r7823, -2004318072;
	// begin inline asm
	lop3.b32 %r731, %r640, %r733, %r734, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r735, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r736, %r734, %r735;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r739, %r731, %r736;
	// end inline asm
	// begin inline asm
	lop3.b32 %r742, %r651, %r733, %r745, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r746, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r747, %r745, %r746;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r750, %r742, %r747;
	// end inline asm
	shr.u32 	%r755, %r733, 8;
	// begin inline asm
	lop3.b32 %r753, %r640, %r755, %r734, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r757, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r758, %r734, %r757;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r761, %r753, %r758;
	// end inline asm
	// begin inline asm
	lop3.b32 %r764, %r651, %r755, %r745, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r768, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r769, %r745, %r768;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r772, %r764, %r769;
	// end inline asm
	// begin inline asm
	mov.b32 %r780, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r791, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r779, %r7824, -2004318072;
	// begin inline asm
	lop3.b32 %r777, %r640, %r779, %r780, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r781, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r782, %r780, %r781;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r785, %r777, %r782;
	// end inline asm
	// begin inline asm
	lop3.b32 %r788, %r651, %r779, %r791, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r792, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r793, %r791, %r792;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r796, %r788, %r793;
	// end inline asm
	shr.u32 	%r801, %r779, 8;
	// begin inline asm
	lop3.b32 %r799, %r640, %r801, %r780, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r803, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r804, %r780, %r803;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r807, %r799, %r804;
	// end inline asm
	// begin inline asm
	lop3.b32 %r810, %r651, %r801, %r791, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r814, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r815, %r791, %r814;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r818, %r810, %r815;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r821, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r823, %r821, %r647;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r826, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r828, %r826, %r658;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r831, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r833, %r831, %r669;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r836, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r838, %r836, %r680;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r841, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r843, %r841, %r693;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r846, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r848, %r846, %r704;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r851, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r853, %r851, %r715;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r856, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r858, %r856, %r726;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r861, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r863, %r861, %r739;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r866, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r868, %r866, %r750;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r871, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r873, %r871, %r761;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r876, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r878, %r876, %r772;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r881, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r883, %r881, %r785;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r886, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r888, %r886, %r796;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r891, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r893, %r891, %r807;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r896, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r898, %r896, %r818;
	// end inline asm
	// begin inline asm
	mov.b32 %r906, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r917, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r905, %r7958, -2004318072;
	// begin inline asm
	lop3.b32 %r903, %r640, %r905, %r906, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r907, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r908, %r906, %r907;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r911, %r903, %r908;
	// end inline asm
	// begin inline asm
	lop3.b32 %r914, %r651, %r905, %r917, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r918, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r919, %r917, %r918;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r922, %r914, %r919;
	// end inline asm
	shr.u32 	%r927, %r905, 8;
	// begin inline asm
	lop3.b32 %r925, %r640, %r927, %r906, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r929, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r930, %r906, %r929;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r933, %r925, %r930;
	// end inline asm
	// begin inline asm
	lop3.b32 %r936, %r651, %r927, %r917, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r940, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r941, %r917, %r940;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r944, %r936, %r941;
	// end inline asm
	// begin inline asm
	mov.b32 %r952, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r963, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r951, %r7959, -2004318072;
	// begin inline asm
	lop3.b32 %r949, %r640, %r951, %r952, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r953, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r954, %r952, %r953;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r957, %r949, %r954;
	// end inline asm
	// begin inline asm
	lop3.b32 %r960, %r651, %r951, %r963, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r964, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r965, %r963, %r964;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r968, %r960, %r965;
	// end inline asm
	shr.u32 	%r973, %r951, 8;
	// begin inline asm
	lop3.b32 %r971, %r640, %r973, %r952, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r975, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r976, %r952, %r975;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r979, %r971, %r976;
	// end inline asm
	// begin inline asm
	lop3.b32 %r982, %r651, %r973, %r963, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r986, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r987, %r963, %r986;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r990, %r982, %r987;
	// end inline asm
	// begin inline asm
	mov.b32 %r998, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1009, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r997, %r7960, -2004318072;
	// begin inline asm
	lop3.b32 %r995, %r640, %r997, %r998, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r999, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1000, %r998, %r999;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1003, %r995, %r1000;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1006, %r651, %r997, %r1009, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1010, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1011, %r1009, %r1010;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1014, %r1006, %r1011;
	// end inline asm
	shr.u32 	%r1019, %r997, 8;
	// begin inline asm
	lop3.b32 %r1017, %r640, %r1019, %r998, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1021, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1022, %r998, %r1021;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1025, %r1017, %r1022;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1028, %r651, %r1019, %r1009, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1032, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1033, %r1009, %r1032;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1036, %r1028, %r1033;
	// end inline asm
	// begin inline asm
	mov.b32 %r1044, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1055, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1043, %r7961, -2004318072;
	// begin inline asm
	lop3.b32 %r1041, %r640, %r1043, %r1044, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1045, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1046, %r1044, %r1045;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1049, %r1041, %r1046;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1052, %r651, %r1043, %r1055, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1056, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1057, %r1055, %r1056;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1060, %r1052, %r1057;
	// end inline asm
	shr.u32 	%r1065, %r1043, 8;
	// begin inline asm
	lop3.b32 %r1063, %r640, %r1065, %r1044, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1067, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1068, %r1044, %r1067;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1071, %r1063, %r1068;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1074, %r651, %r1065, %r1055, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1078, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1079, %r1055, %r1078;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1082, %r1074, %r1079;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1085, %r195, %r911, %r823;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1089, %r195, %r922, %r828;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1093, %r195, %r933, %r833;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1097, %r195, %r944, %r838;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1101, %r195, %r957, %r843;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1105, %r195, %r968, %r848;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1109, %r195, %r979, %r853;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1113, %r195, %r990, %r858;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1117, %r195, %r1003, %r863;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1121, %r195, %r1014, %r868;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1125, %r195, %r1025, %r873;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1129, %r195, %r1036, %r878;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1133, %r195, %r1049, %r883;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1137, %r195, %r1060, %r888;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1141, %r195, %r1071, %r893;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1145, %r195, %r1082, %r898;
	// end inline asm
	// begin inline asm
	mov.b32 %r1154, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1165, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1153, %r7962, -2004318072;
	// begin inline asm
	lop3.b32 %r1151, %r640, %r1153, %r1154, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1155, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1156, %r1154, %r1155;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1159, %r1151, %r1156;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1162, %r651, %r1153, %r1165, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1166, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1167, %r1165, %r1166;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1170, %r1162, %r1167;
	// end inline asm
	shr.u32 	%r1175, %r1153, 8;
	// begin inline asm
	lop3.b32 %r1173, %r640, %r1175, %r1154, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1177, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1178, %r1154, %r1177;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1181, %r1173, %r1178;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1184, %r651, %r1175, %r1165, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1188, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1189, %r1165, %r1188;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1192, %r1184, %r1189;
	// end inline asm
	// begin inline asm
	mov.b32 %r1200, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1211, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1199, %r7963, -2004318072;
	// begin inline asm
	lop3.b32 %r1197, %r640, %r1199, %r1200, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1201, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1202, %r1200, %r1201;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1205, %r1197, %r1202;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1208, %r651, %r1199, %r1211, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1212, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1213, %r1211, %r1212;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1216, %r1208, %r1213;
	// end inline asm
	shr.u32 	%r1221, %r1199, 8;
	// begin inline asm
	lop3.b32 %r1219, %r640, %r1221, %r1200, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1223, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1224, %r1200, %r1223;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1227, %r1219, %r1224;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1230, %r651, %r1221, %r1211, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1234, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1235, %r1211, %r1234;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1238, %r1230, %r1235;
	// end inline asm
	// begin inline asm
	mov.b32 %r1246, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1257, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1245, %r7964, -2004318072;
	// begin inline asm
	lop3.b32 %r1243, %r640, %r1245, %r1246, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1247, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1248, %r1246, %r1247;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1251, %r1243, %r1248;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1254, %r651, %r1245, %r1257, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1258, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1259, %r1257, %r1258;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1262, %r1254, %r1259;
	// end inline asm
	shr.u32 	%r1267, %r1245, 8;
	// begin inline asm
	lop3.b32 %r1265, %r640, %r1267, %r1246, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1269, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1270, %r1246, %r1269;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1273, %r1265, %r1270;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1276, %r651, %r1267, %r1257, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1280, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1281, %r1257, %r1280;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1284, %r1276, %r1281;
	// end inline asm
	// begin inline asm
	mov.b32 %r1292, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1303, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1291, %r7965, -2004318072;
	// begin inline asm
	lop3.b32 %r1289, %r640, %r1291, %r1292, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1293, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1294, %r1292, %r1293;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1297, %r1289, %r1294;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1300, %r651, %r1291, %r1303, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1304, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1305, %r1303, %r1304;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1308, %r1300, %r1305;
	// end inline asm
	shr.u32 	%r1313, %r1291, 8;
	// begin inline asm
	lop3.b32 %r1311, %r640, %r1313, %r1292, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1315, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1316, %r1292, %r1315;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1319, %r1311, %r1316;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1322, %r651, %r1313, %r1303, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1326, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1327, %r1303, %r1326;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1330, %r1322, %r1327;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1333, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1335, %r1333, %r1159, %r1085;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1339, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1341, %r1339, %r1170, %r1089;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1345, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1347, %r1345, %r1181, %r1093;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1351, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1353, %r1351, %r1192, %r1097;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1357, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1359, %r1357, %r1205, %r1101;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1363, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1365, %r1363, %r1216, %r1105;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1369, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1371, %r1369, %r1227, %r1109;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1375, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1377, %r1375, %r1238, %r1113;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1381, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1383, %r1381, %r1251, %r1117;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1387, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1389, %r1387, %r1262, %r1121;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1393, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1395, %r1393, %r1273, %r1125;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1399, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1401, %r1399, %r1284, %r1129;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1405, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1407, %r1405, %r1297, %r1133;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1411, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1413, %r1411, %r1308, %r1137;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1417, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1419, %r1417, %r1319, %r1141;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1423, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1425, %r1423, %r1330, %r1145;
	// end inline asm
	// begin inline asm
	mov.b32 %r1434, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1445, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1433, %r7966, -2004318072;
	// begin inline asm
	lop3.b32 %r1431, %r640, %r1433, %r1434, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1435, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1436, %r1434, %r1435;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1439, %r1431, %r1436;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1442, %r651, %r1433, %r1445, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1446, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1447, %r1445, %r1446;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1450, %r1442, %r1447;
	// end inline asm
	shr.u32 	%r1455, %r1433, 8;
	// begin inline asm
	lop3.b32 %r1453, %r640, %r1455, %r1434, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1457, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1458, %r1434, %r1457;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1461, %r1453, %r1458;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1464, %r651, %r1455, %r1445, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1468, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1469, %r1445, %r1468;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1472, %r1464, %r1469;
	// end inline asm
	// begin inline asm
	mov.b32 %r1480, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1491, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1479, %r7967, -2004318072;
	// begin inline asm
	lop3.b32 %r1477, %r640, %r1479, %r1480, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1481, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1482, %r1480, %r1481;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1485, %r1477, %r1482;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1488, %r651, %r1479, %r1491, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1492, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1493, %r1491, %r1492;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1496, %r1488, %r1493;
	// end inline asm
	shr.u32 	%r1501, %r1479, 8;
	// begin inline asm
	lop3.b32 %r1499, %r640, %r1501, %r1480, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1503, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1504, %r1480, %r1503;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1507, %r1499, %r1504;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1510, %r651, %r1501, %r1491, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1514, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1515, %r1491, %r1514;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1518, %r1510, %r1515;
	// end inline asm
	// begin inline asm
	mov.b32 %r1526, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1537, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1525, %r7968, -2004318072;
	// begin inline asm
	lop3.b32 %r1523, %r640, %r1525, %r1526, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1527, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1528, %r1526, %r1527;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1531, %r1523, %r1528;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1534, %r651, %r1525, %r1537, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1538, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1539, %r1537, %r1538;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1542, %r1534, %r1539;
	// end inline asm
	shr.u32 	%r1547, %r1525, 8;
	// begin inline asm
	lop3.b32 %r1545, %r640, %r1547, %r1526, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1549, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1550, %r1526, %r1549;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1553, %r1545, %r1550;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1556, %r651, %r1547, %r1537, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1560, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1561, %r1537, %r1560;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1564, %r1556, %r1561;
	// end inline asm
	// begin inline asm
	mov.b32 %r1572, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r1583, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r1571, %r7969, -2004318072;
	// begin inline asm
	lop3.b32 %r1569, %r640, %r1571, %r1572, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1573, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1574, %r1572, %r1573;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1577, %r1569, %r1574;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1580, %r651, %r1571, %r1583, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1584, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1585, %r1583, %r1584;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1588, %r1580, %r1585;
	// end inline asm
	shr.u32 	%r1593, %r1571, 8;
	// begin inline asm
	lop3.b32 %r1591, %r640, %r1593, %r1572, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1595, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1596, %r1572, %r1595;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1599, %r1591, %r1596;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1602, %r651, %r1593, %r1583, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1606, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1607, %r1583, %r1606;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1610, %r1602, %r1607;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1684, %r231, %r1439, %r1335;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1681, %r231, %r1450, %r1341;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1693, %r231, %r1461, %r1347;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1690, %r231, %r1472, %r1353;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1702, %r231, %r1485, %r1359;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1699, %r231, %r1496, %r1365;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1711, %r231, %r1507, %r1371;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1708, %r231, %r1518, %r1377;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1720, %r231, %r1531, %r1383;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1717, %r231, %r1542, %r1389;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1729, %r231, %r1553, %r1395;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1726, %r231, %r1564, %r1401;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1738, %r231, %r1577, %r1407;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1735, %r231, %r1588, %r1413;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1747, %r231, %r1599, %r1419;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1744, %r231, %r1610, %r1425;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1677, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1679, %r1677, %r1681;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1682, %r252, %r1684, %r1679;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1686, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1688, %r1686, %r1690;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1691, %r252, %r1693, %r1688;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1695, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1697, %r1695, %r1699;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1700, %r252, %r1702, %r1697;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1704, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1706, %r1704, %r1708;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1709, %r252, %r1711, %r1706;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1713, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1715, %r1713, %r1717;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1718, %r252, %r1720, %r1715;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1722, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1724, %r1722, %r1726;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1727, %r252, %r1729, %r1724;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1731, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1733, %r1731, %r1735;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1736, %r252, %r1738, %r1733;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1740, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1742, %r1740, %r1744;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1745, %r252, %r1747, %r1742;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1749, %r255, %r1684;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1752, %r252, %r1681, %r1749;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1756, %r255, %r1693;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1759, %r252, %r1690, %r1756;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1763, %r255, %r1702;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1766, %r252, %r1699, %r1763;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1770, %r255, %r1711;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1773, %r252, %r1708, %r1770;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1777, %r255, %r1720;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1780, %r252, %r1717, %r1777;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1784, %r255, %r1729;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1787, %r252, %r1726, %r1784;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1791, %r255, %r1738;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1794, %r252, %r1735, %r1791;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1798, %r255, %r1747;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1801, %r252, %r1744, %r1798;
	// end inline asm
	mov.u32 	%r1813, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1892, %r1889}, {%r311, %r317, %r314, %r320}, {%r1682, %r1752}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1901, %r1898}, {%r311, %r317, %r314, %r320}, {%r1691, %r1759}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1910, %r1907}, {%r311, %r317, %r314, %r320}, {%r1700, %r1766}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1919, %r1916}, {%r311, %r317, %r314, %r320}, {%r1709, %r1773}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1928, %r1925}, {%r311, %r317, %r314, %r320}, {%r1718, %r1780}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1937, %r1934}, {%r311, %r317, %r314, %r320}, {%r1727, %r1787}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1946, %r1943}, {%r311, %r317, %r314, %r320}, {%r1736, %r1794}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1955, %r1952}, {%r311, %r317, %r314, %r320}, {%r1745, %r1801}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1885, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1887, %r1885, %r1889;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1890, %r355, %r1892, %r1887;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1894, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1896, %r1894, %r1898;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1899, %r355, %r1901, %r1896;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1903, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1905, %r1903, %r1907;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1908, %r355, %r1910, %r1905;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1912, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1914, %r1912, %r1916;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1917, %r355, %r1919, %r1914;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1921, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1923, %r1921, %r1925;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1926, %r355, %r1928, %r1923;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1930, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1932, %r1930, %r1934;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1935, %r355, %r1937, %r1932;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1939, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1941, %r1939, %r1943;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1944, %r355, %r1946, %r1941;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1948, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1950, %r1948, %r1952;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1953, %r355, %r1955, %r1950;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1957, %r358, %r1892;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1960, %r355, %r1889, %r1957;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1964, %r358, %r1901;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1967, %r355, %r1898, %r1964;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1971, %r358, %r1910;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1974, %r355, %r1907, %r1971;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1978, %r358, %r1919;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1981, %r355, %r1916, %r1978;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1985, %r358, %r1928;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1988, %r355, %r1925, %r1985;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1992, %r358, %r1937;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1995, %r355, %r1934, %r1992;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1999, %r358, %r1946;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2002, %r355, %r1943, %r1999;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2006, %r358, %r1955;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2009, %r355, %r1952, %r2006;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2013, %r2014}, {%r389, %r395, %r392, %r398}, {%r1890, %r1960}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2023, %r2024}, {%r389, %r395, %r392, %r398}, {%r1899, %r1967}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2033, %r2034}, {%r389, %r395, %r392, %r398}, {%r1908, %r1974}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2043, %r2044}, {%r389, %r395, %r392, %r398}, {%r1917, %r1981}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2053, %r2054}, {%r389, %r395, %r392, %r398}, {%r1926, %r1988}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2063, %r2064}, {%r389, %r395, %r392, %r398}, {%r1935, %r1995}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2073, %r2074}, {%r389, %r395, %r392, %r398}, {%r1944, %r2002}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2083, %r2084}, {%r389, %r395, %r392, %r398}, {%r1953, %r2009}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2093, %r100, %r2013;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2096, %r100, %r2014;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2099, %r100, %r2023;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2102, %r100, %r2024;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2105, %r100, %r2033;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2108, %r100, %r2034;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2111, %r100, %r2043;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2114, %r100, %r2044;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2117, %r100, %r2053;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2120, %r100, %r2054;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2123, %r100, %r2063;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2126, %r100, %r2064;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2129, %r100, %r2073;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2132, %r100, %r2074;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2135, %r100, %r2083;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2138, %r100, %r2084;
	// end inline asm
	// begin inline asm
	mov.b32 %r2141, {%rs1142, %rs1142};
	// end inline asm
	mov.u16 	%rs195, 18176;
	// begin inline asm
	mov.b32 %r2142, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2143, %r2093, %r2141;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2146, %r2143, %r2142;
	// end inline asm
	// begin inline asm
	mov.b32 %r2149, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2150, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2151, %r2096, %r2149;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2154, %r2151, %r2150;
	// end inline asm
	// begin inline asm
	mov.b32 %r2157, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2158, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2159, %r2099, %r2157;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2162, %r2159, %r2158;
	// end inline asm
	// begin inline asm
	mov.b32 %r2165, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2166, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2167, %r2102, %r2165;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2170, %r2167, %r2166;
	// end inline asm
	// begin inline asm
	mov.b32 %r2173, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2174, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2175, %r2105, %r2173;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2178, %r2175, %r2174;
	// end inline asm
	// begin inline asm
	mov.b32 %r2181, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2182, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2183, %r2108, %r2181;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2186, %r2183, %r2182;
	// end inline asm
	// begin inline asm
	mov.b32 %r2189, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2190, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2191, %r2111, %r2189;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2194, %r2191, %r2190;
	// end inline asm
	// begin inline asm
	mov.b32 %r2197, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2198, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2199, %r2114, %r2197;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2202, %r2199, %r2198;
	// end inline asm
	// begin inline asm
	mov.b32 %r2205, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2206, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2207, %r2117, %r2205;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2210, %r2207, %r2206;
	// end inline asm
	// begin inline asm
	mov.b32 %r2213, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2214, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2215, %r2120, %r2213;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2218, %r2215, %r2214;
	// end inline asm
	// begin inline asm
	mov.b32 %r2221, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2222, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2223, %r2123, %r2221;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2226, %r2223, %r2222;
	// end inline asm
	// begin inline asm
	mov.b32 %r2229, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2230, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2231, %r2126, %r2229;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2234, %r2231, %r2230;
	// end inline asm
	// begin inline asm
	mov.b32 %r2237, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2238, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2239, %r2129, %r2237;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2242, %r2239, %r2238;
	// end inline asm
	// begin inline asm
	mov.b32 %r2245, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2246, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2247, %r2132, %r2245;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2250, %r2247, %r2246;
	// end inline asm
	// begin inline asm
	mov.b32 %r2253, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2254, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2255, %r2135, %r2253;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2258, %r2255, %r2254;
	// end inline asm
	// begin inline asm
	mov.b32 %r2261, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r2262, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2263, %r2138, %r2261;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2266, %r2263, %r2262;
	// end inline asm
	// begin inline asm
	mov.b32 %r2272, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2270, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2271, %r2272, %r2270;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2274, %r2146, %r2271;
	// end inline asm
	// begin inline asm
	mov.b32 %r2277, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2278, %r2272, %r2277;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2281, %r2154, %r2278;
	// end inline asm
	// begin inline asm
	mov.b32 %r2284, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2285, %r2272, %r2284;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2288, %r2162, %r2285;
	// end inline asm
	// begin inline asm
	mov.b32 %r2291, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2292, %r2272, %r2291;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2295, %r2170, %r2292;
	// end inline asm
	mov.u32 	%r2301, 25152;
	// begin inline asm
	prmt.b32 %r2298, %r2274, %r2288, %r2301;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2302, %r2281, %r2295, %r2301;
	// end inline asm
	shl.b32 	%r2309, %r2302, 4;
	mov.u32 	%r2307, 252645135;
	// begin inline asm
	lop3.b32 %r2306, %r2307, %r2298, %r2309, 202;
	// end inline asm
	xor.b32  	%r7825, %r2306, -2004318072;
	// begin inline asm
	mov.b32 %r2313, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2311, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2312, %r2313, %r2311;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2315, %r2178, %r2312;
	// end inline asm
	// begin inline asm
	mov.b32 %r2318, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2319, %r2313, %r2318;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2322, %r2186, %r2319;
	// end inline asm
	// begin inline asm
	mov.b32 %r2325, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2326, %r2313, %r2325;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2329, %r2194, %r2326;
	// end inline asm
	// begin inline asm
	mov.b32 %r2332, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2333, %r2313, %r2332;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2336, %r2202, %r2333;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2339, %r2315, %r2329, %r2301;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2343, %r2322, %r2336, %r2301;
	// end inline asm
	shl.b32 	%r2350, %r2343, 4;
	// begin inline asm
	lop3.b32 %r2347, %r2307, %r2339, %r2350, 202;
	// end inline asm
	xor.b32  	%r7826, %r2347, -2004318072;
	// begin inline asm
	mov.b32 %r2354, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2352, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2353, %r2354, %r2352;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2356, %r2210, %r2353;
	// end inline asm
	// begin inline asm
	mov.b32 %r2359, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2360, %r2354, %r2359;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2363, %r2218, %r2360;
	// end inline asm
	// begin inline asm
	mov.b32 %r2366, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2367, %r2354, %r2366;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2370, %r2226, %r2367;
	// end inline asm
	// begin inline asm
	mov.b32 %r2373, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2374, %r2354, %r2373;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2377, %r2234, %r2374;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2380, %r2356, %r2370, %r2301;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2384, %r2363, %r2377, %r2301;
	// end inline asm
	shl.b32 	%r2391, %r2384, 4;
	// begin inline asm
	lop3.b32 %r2388, %r2307, %r2380, %r2391, 202;
	// end inline asm
	xor.b32  	%r7827, %r2388, -2004318072;
	// begin inline asm
	mov.b32 %r2395, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2393, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2394, %r2395, %r2393;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2397, %r2242, %r2394;
	// end inline asm
	// begin inline asm
	mov.b32 %r2400, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2401, %r2395, %r2400;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2404, %r2250, %r2401;
	// end inline asm
	// begin inline asm
	mov.b32 %r2407, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2408, %r2395, %r2407;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2411, %r2258, %r2408;
	// end inline asm
	// begin inline asm
	mov.b32 %r2414, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2415, %r2395, %r2414;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2418, %r2266, %r2415;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2421, %r2397, %r2411, %r2301;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2425, %r2404, %r2418, %r2301;
	// end inline asm
	shl.b32 	%r2432, %r2425, 4;
	// begin inline asm
	lop3.b32 %r2429, %r2307, %r2421, %r2432, 202;
	// end inline asm
	xor.b32  	%r7828, %r2429, -2004318072;
	add.s64 	%rd93, %rd147, %rd23;
	st.shared.u32 	[%rd93], %r7825;
	add.s64 	%rd94, %rd147, %rd22;
	st.shared.u32 	[%rd94], %r7826;
	add.s64 	%rd95, %rd147, %rd21;
	st.shared.u32 	[%rd95], %r7827;
	add.s64 	%rd96, %rd147, %rd20;
	st.shared.u32 	[%rd96], %r7828;
	ld.shared.u32 	%r7958, [%rd89];
	ld.shared.u32 	%r7959, [%rd90];
	ld.shared.u32 	%r7960, [%rd91];
	ld.shared.u32 	%r7961, [%rd92];
	// begin inline asm
	mov.b32 %r2438, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2449, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2437, %r7958, -2004318072;
	// begin inline asm
	lop3.b32 %r2435, %r640, %r2437, %r2438, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2439, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2440, %r2438, %r2439;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2443, %r2435, %r2440;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2446, %r651, %r2437, %r2449, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2450, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2451, %r2449, %r2450;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2454, %r2446, %r2451;
	// end inline asm
	shr.u32 	%r2459, %r2437, 8;
	// begin inline asm
	lop3.b32 %r2457, %r640, %r2459, %r2438, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2461, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2462, %r2438, %r2461;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2465, %r2457, %r2462;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2468, %r651, %r2459, %r2449, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2472, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2473, %r2449, %r2472;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2476, %r2468, %r2473;
	// end inline asm
	// begin inline asm
	mov.b32 %r2484, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2495, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2483, %r7959, -2004318072;
	// begin inline asm
	lop3.b32 %r2481, %r640, %r2483, %r2484, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2485, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2486, %r2484, %r2485;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2489, %r2481, %r2486;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2492, %r651, %r2483, %r2495, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2496, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2497, %r2495, %r2496;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2500, %r2492, %r2497;
	// end inline asm
	shr.u32 	%r2505, %r2483, 8;
	// begin inline asm
	lop3.b32 %r2503, %r640, %r2505, %r2484, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2507, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2508, %r2484, %r2507;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2511, %r2503, %r2508;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2514, %r651, %r2505, %r2495, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2518, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2519, %r2495, %r2518;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2522, %r2514, %r2519;
	// end inline asm
	// begin inline asm
	mov.b32 %r2530, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2541, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2529, %r7960, -2004318072;
	// begin inline asm
	lop3.b32 %r2527, %r640, %r2529, %r2530, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2531, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2532, %r2530, %r2531;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2535, %r2527, %r2532;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2538, %r651, %r2529, %r2541, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2542, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2543, %r2541, %r2542;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2546, %r2538, %r2543;
	// end inline asm
	shr.u32 	%r2551, %r2529, 8;
	// begin inline asm
	lop3.b32 %r2549, %r640, %r2551, %r2530, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2553, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2554, %r2530, %r2553;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2557, %r2549, %r2554;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2560, %r651, %r2551, %r2541, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2564, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2565, %r2541, %r2564;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2568, %r2560, %r2565;
	// end inline asm
	// begin inline asm
	mov.b32 %r2576, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2587, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r2575, %r7961, -2004318072;
	// begin inline asm
	lop3.b32 %r2573, %r640, %r2575, %r2576, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2577, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2578, %r2576, %r2577;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2581, %r2573, %r2578;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2584, %r651, %r2575, %r2587, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2588, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2589, %r2587, %r2588;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2592, %r2584, %r2589;
	// end inline asm
	shr.u32 	%r2597, %r2575, 8;
	// begin inline asm
	lop3.b32 %r2595, %r640, %r2597, %r2576, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2599, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2600, %r2576, %r2599;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2603, %r2595, %r2600;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2606, %r651, %r2597, %r2587, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2610, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2611, %r2587, %r2610;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2614, %r2606, %r2611;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2617, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2619, %r2617, %r2443;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2622, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2624, %r2622, %r2454;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2627, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2629, %r2627, %r2465;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2632, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2634, %r2632, %r2476;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2637, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2639, %r2637, %r2489;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2642, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2644, %r2642, %r2500;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2647, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2649, %r2647, %r2511;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2652, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2654, %r2652, %r2522;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2657, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2659, %r2657, %r2535;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2662, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2664, %r2662, %r2546;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2667, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2669, %r2667, %r2557;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2672, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2674, %r2672, %r2568;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2677, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2679, %r2677, %r2581;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2682, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2684, %r2682, %r2592;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2687, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2689, %r2687, %r2603;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2692, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2694, %r2692, %r2614;
	// end inline asm
	// begin inline asm
	mov.b32 %r2702, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2713, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2699, %r640, %r1153, %r2702, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2703, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2704, %r2702, %r2703;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2707, %r2699, %r2704;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2710, %r651, %r1153, %r2713, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2714, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2715, %r2713, %r2714;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2718, %r2710, %r2715;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2721, %r640, %r1175, %r2702, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2725, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2726, %r2702, %r2725;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2729, %r2721, %r2726;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2732, %r651, %r1175, %r2713, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2736, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2737, %r2713, %r2736;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2740, %r2732, %r2737;
	// end inline asm
	// begin inline asm
	mov.b32 %r2748, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2759, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2745, %r640, %r1199, %r2748, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2749, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2750, %r2748, %r2749;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2753, %r2745, %r2750;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2756, %r651, %r1199, %r2759, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2760, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2761, %r2759, %r2760;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2764, %r2756, %r2761;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2767, %r640, %r1221, %r2748, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2771, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2772, %r2748, %r2771;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2775, %r2767, %r2772;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2778, %r651, %r1221, %r2759, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2782, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2783, %r2759, %r2782;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2786, %r2778, %r2783;
	// end inline asm
	// begin inline asm
	mov.b32 %r2794, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2805, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2791, %r640, %r1245, %r2794, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2795, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2796, %r2794, %r2795;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2799, %r2791, %r2796;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2802, %r651, %r1245, %r2805, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2806, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2807, %r2805, %r2806;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2810, %r2802, %r2807;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2813, %r640, %r1267, %r2794, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2817, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2818, %r2794, %r2817;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2821, %r2813, %r2818;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2824, %r651, %r1267, %r2805, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2828, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2829, %r2805, %r2828;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2832, %r2824, %r2829;
	// end inline asm
	// begin inline asm
	mov.b32 %r2840, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2851, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2837, %r640, %r1291, %r2840, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2841, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2842, %r2840, %r2841;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2845, %r2837, %r2842;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2848, %r651, %r1291, %r2851, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2852, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2853, %r2851, %r2852;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2856, %r2848, %r2853;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2859, %r640, %r1313, %r2840, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2863, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2864, %r2840, %r2863;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2867, %r2859, %r2864;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2870, %r651, %r1313, %r2851, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2874, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2875, %r2851, %r2874;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2878, %r2870, %r2875;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2881, %r195, %r2707, %r2619;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2885, %r195, %r2718, %r2624;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2889, %r195, %r2729, %r2629;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2893, %r195, %r2740, %r2634;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2897, %r195, %r2753, %r2639;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2901, %r195, %r2764, %r2644;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2905, %r195, %r2775, %r2649;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2909, %r195, %r2786, %r2654;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2913, %r195, %r2799, %r2659;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2917, %r195, %r2810, %r2664;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2921, %r195, %r2821, %r2669;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2925, %r195, %r2832, %r2674;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2929, %r195, %r2845, %r2679;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2933, %r195, %r2856, %r2684;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2937, %r195, %r2867, %r2689;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2941, %r195, %r2878, %r2694;
	// end inline asm
	// begin inline asm
	mov.b32 %r2950, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r2961, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2947, %r640, %r1433, %r2950, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2951, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2952, %r2950, %r2951;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2955, %r2947, %r2952;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2958, %r651, %r1433, %r2961, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2962, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2963, %r2961, %r2962;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2966, %r2958, %r2963;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2969, %r640, %r1455, %r2950, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2973, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2974, %r2950, %r2973;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2977, %r2969, %r2974;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2980, %r651, %r1455, %r2961, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2984, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2985, %r2961, %r2984;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2988, %r2980, %r2985;
	// end inline asm
	// begin inline asm
	mov.b32 %r2996, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3007, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r2993, %r640, %r1479, %r2996, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2997, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2998, %r2996, %r2997;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3001, %r2993, %r2998;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3004, %r651, %r1479, %r3007, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3008, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3009, %r3007, %r3008;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3012, %r3004, %r3009;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3015, %r640, %r1501, %r2996, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3019, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3020, %r2996, %r3019;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3023, %r3015, %r3020;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3026, %r651, %r1501, %r3007, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3030, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3031, %r3007, %r3030;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3034, %r3026, %r3031;
	// end inline asm
	// begin inline asm
	mov.b32 %r3042, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3053, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3039, %r640, %r1525, %r3042, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3043, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3044, %r3042, %r3043;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3047, %r3039, %r3044;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3050, %r651, %r1525, %r3053, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3054, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3055, %r3053, %r3054;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3058, %r3050, %r3055;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3061, %r640, %r1547, %r3042, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3065, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3066, %r3042, %r3065;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3069, %r3061, %r3066;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3072, %r651, %r1547, %r3053, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3076, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3077, %r3053, %r3076;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3080, %r3072, %r3077;
	// end inline asm
	// begin inline asm
	mov.b32 %r3088, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3099, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3085, %r640, %r1571, %r3088, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3089, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3090, %r3088, %r3089;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3093, %r3085, %r3090;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3096, %r651, %r1571, %r3099, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3100, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3101, %r3099, %r3100;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3104, %r3096, %r3101;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3107, %r640, %r1593, %r3088, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3111, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3112, %r3088, %r3111;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3115, %r3107, %r3112;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3118, %r651, %r1593, %r3099, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3122, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3123, %r3099, %r3122;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3126, %r3118, %r3123;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3129, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3131, %r3129, %r2955, %r2881;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3135, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3137, %r3135, %r2966, %r2885;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3141, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3143, %r3141, %r2977, %r2889;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3147, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3149, %r3147, %r2988, %r2893;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3153, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3155, %r3153, %r3001, %r2897;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3159, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3161, %r3159, %r3012, %r2901;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3165, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3167, %r3165, %r3023, %r2905;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3171, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3173, %r3171, %r3034, %r2909;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3177, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3179, %r3177, %r3047, %r2913;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3183, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3185, %r3183, %r3058, %r2917;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3189, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3191, %r3189, %r3069, %r2921;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3195, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3197, %r3195, %r3080, %r2925;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3201, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3203, %r3201, %r3093, %r2929;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3207, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3209, %r3207, %r3104, %r2933;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3213, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3215, %r3213, %r3115, %r2937;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3219, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3221, %r3219, %r3126, %r2941;
	// end inline asm
	// begin inline asm
	mov.b32 %r3230, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3241, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3227, %r640, %r641, %r3230, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3231, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3232, %r3230, %r3231;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3235, %r3227, %r3232;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3238, %r651, %r641, %r3241, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3242, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3243, %r3241, %r3242;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3246, %r3238, %r3243;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3249, %r640, %r663, %r3230, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3253, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3254, %r3230, %r3253;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3257, %r3249, %r3254;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3260, %r651, %r663, %r3241, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3264, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3265, %r3241, %r3264;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3268, %r3260, %r3265;
	// end inline asm
	// begin inline asm
	mov.b32 %r3276, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3287, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3273, %r640, %r687, %r3276, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3277, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3278, %r3276, %r3277;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3281, %r3273, %r3278;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3284, %r651, %r687, %r3287, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3288, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3289, %r3287, %r3288;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3292, %r3284, %r3289;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3295, %r640, %r709, %r3276, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3299, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3300, %r3276, %r3299;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3303, %r3295, %r3300;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3306, %r651, %r709, %r3287, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3310, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3311, %r3287, %r3310;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3314, %r3306, %r3311;
	// end inline asm
	// begin inline asm
	mov.b32 %r3322, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3333, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3319, %r640, %r733, %r3322, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3323, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3324, %r3322, %r3323;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3327, %r3319, %r3324;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3330, %r651, %r733, %r3333, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3334, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3335, %r3333, %r3334;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3338, %r3330, %r3335;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3341, %r640, %r755, %r3322, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3345, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3346, %r3322, %r3345;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3349, %r3341, %r3346;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3352, %r651, %r755, %r3333, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3356, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3357, %r3333, %r3356;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3360, %r3352, %r3357;
	// end inline asm
	// begin inline asm
	mov.b32 %r3368, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r3379, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r3365, %r640, %r779, %r3368, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3369, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3370, %r3368, %r3369;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3373, %r3365, %r3370;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3376, %r651, %r779, %r3379, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3380, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3381, %r3379, %r3380;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3384, %r3376, %r3381;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3387, %r640, %r801, %r3368, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3391, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3392, %r3368, %r3391;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3395, %r3387, %r3392;
	// end inline asm
	// begin inline asm
	lop3.b32 %r3398, %r651, %r801, %r3379, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r3402, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r3403, %r3379, %r3402;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r3406, %r3398, %r3403;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3480, %r231, %r3235, %r3131;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3477, %r231, %r3246, %r3137;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3489, %r231, %r3257, %r3143;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3486, %r231, %r3268, %r3149;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3498, %r231, %r3281, %r3155;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3495, %r231, %r3292, %r3161;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3507, %r231, %r3303, %r3167;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3504, %r231, %r3314, %r3173;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3516, %r231, %r3327, %r3179;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3513, %r231, %r3338, %r3185;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3525, %r231, %r3349, %r3191;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3522, %r231, %r3360, %r3197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3534, %r231, %r3373, %r3203;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3531, %r231, %r3384, %r3209;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3543, %r231, %r3395, %r3215;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3540, %r231, %r3406, %r3221;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3473, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3475, %r3473, %r3477;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3478, %r252, %r3480, %r3475;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3482, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3484, %r3482, %r3486;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3487, %r252, %r3489, %r3484;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3491, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3493, %r3491, %r3495;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3496, %r252, %r3498, %r3493;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3500, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3502, %r3500, %r3504;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3505, %r252, %r3507, %r3502;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3509, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3511, %r3509, %r3513;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3514, %r252, %r3516, %r3511;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3518, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3520, %r3518, %r3522;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3523, %r252, %r3525, %r3520;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3527, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3529, %r3527, %r3531;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3532, %r252, %r3534, %r3529;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3536, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3538, %r3536, %r3540;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3541, %r252, %r3543, %r3538;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3545, %r255, %r3480;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3548, %r252, %r3477, %r3545;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3552, %r255, %r3489;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3555, %r252, %r3486, %r3552;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3559, %r255, %r3498;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3562, %r252, %r3495, %r3559;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3566, %r255, %r3507;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3569, %r252, %r3504, %r3566;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3573, %r255, %r3516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3576, %r252, %r3513, %r3573;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3580, %r255, %r3525;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3583, %r252, %r3522, %r3580;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3587, %r255, %r3534;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3590, %r252, %r3531, %r3587;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3594, %r255, %r3543;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3597, %r252, %r3540, %r3594;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3688, %r3685}, {%r311, %r317, %r314, %r320}, {%r3478, %r3548}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3697, %r3694}, {%r311, %r317, %r314, %r320}, {%r3487, %r3555}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3706, %r3703}, {%r311, %r317, %r314, %r320}, {%r3496, %r3562}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3715, %r3712}, {%r311, %r317, %r314, %r320}, {%r3505, %r3569}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3724, %r3721}, {%r311, %r317, %r314, %r320}, {%r3514, %r3576}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3733, %r3730}, {%r311, %r317, %r314, %r320}, {%r3523, %r3583}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3742, %r3739}, {%r311, %r317, %r314, %r320}, {%r3532, %r3590}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3751, %r3748}, {%r311, %r317, %r314, %r320}, {%r3541, %r3597}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3681, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3683, %r3681, %r3685;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3686, %r355, %r3688, %r3683;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3690, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3692, %r3690, %r3694;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3695, %r355, %r3697, %r3692;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3699, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3701, %r3699, %r3703;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3704, %r355, %r3706, %r3701;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3708, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3710, %r3708, %r3712;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3713, %r355, %r3715, %r3710;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3717, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3719, %r3717, %r3721;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3722, %r355, %r3724, %r3719;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3726, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3728, %r3726, %r3730;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3731, %r355, %r3733, %r3728;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3735, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3737, %r3735, %r3739;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3740, %r355, %r3742, %r3737;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3744, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3746, %r3744, %r3748;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3749, %r355, %r3751, %r3746;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3753, %r358, %r3688;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3756, %r355, %r3685, %r3753;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3760, %r358, %r3697;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3763, %r355, %r3694, %r3760;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3767, %r358, %r3706;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3770, %r355, %r3703, %r3767;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3774, %r358, %r3715;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3777, %r355, %r3712, %r3774;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3781, %r358, %r3724;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3784, %r355, %r3721, %r3781;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3788, %r358, %r3733;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3791, %r355, %r3730, %r3788;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3795, %r358, %r3742;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3798, %r355, %r3739, %r3795;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3802, %r358, %r3751;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3805, %r355, %r3748, %r3802;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3809, %r3810}, {%r389, %r395, %r392, %r398}, {%r3686, %r3756}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3819, %r3820}, {%r389, %r395, %r392, %r398}, {%r3695, %r3763}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3829, %r3830}, {%r389, %r395, %r392, %r398}, {%r3704, %r3770}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3839, %r3840}, {%r389, %r395, %r392, %r398}, {%r3713, %r3777}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3849, %r3850}, {%r389, %r395, %r392, %r398}, {%r3722, %r3784}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3859, %r3860}, {%r389, %r395, %r392, %r398}, {%r3731, %r3791}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3869, %r3870}, {%r389, %r395, %r392, %r398}, {%r3740, %r3798}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3879, %r3880}, {%r389, %r395, %r392, %r398}, {%r3749, %r3805}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3889, %r100, %r3809;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3892, %r100, %r3810;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3895, %r100, %r3819;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3898, %r100, %r3820;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3901, %r100, %r3829;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3904, %r100, %r3830;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3907, %r100, %r3839;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3910, %r100, %r3840;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3913, %r100, %r3849;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3916, %r100, %r3850;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3919, %r100, %r3859;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3922, %r100, %r3860;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3925, %r100, %r3869;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3928, %r100, %r3870;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3931, %r100, %r3879;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3934, %r100, %r3880;
	// end inline asm
	// begin inline asm
	mov.b32 %r3937, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3938, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3939, %r3889, %r3937;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3942, %r3939, %r3938;
	// end inline asm
	// begin inline asm
	mov.b32 %r3945, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3946, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3947, %r3892, %r3945;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3950, %r3947, %r3946;
	// end inline asm
	// begin inline asm
	mov.b32 %r3953, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3954, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3955, %r3895, %r3953;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3958, %r3955, %r3954;
	// end inline asm
	// begin inline asm
	mov.b32 %r3961, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3962, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3963, %r3898, %r3961;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3966, %r3963, %r3962;
	// end inline asm
	// begin inline asm
	mov.b32 %r3969, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3970, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3971, %r3901, %r3969;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3974, %r3971, %r3970;
	// end inline asm
	// begin inline asm
	mov.b32 %r3977, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3978, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3979, %r3904, %r3977;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3982, %r3979, %r3978;
	// end inline asm
	// begin inline asm
	mov.b32 %r3985, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3986, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3987, %r3907, %r3985;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3990, %r3987, %r3986;
	// end inline asm
	// begin inline asm
	mov.b32 %r3993, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r3994, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r3995, %r3910, %r3993;
	// end inline asm
	// begin inline asm
	min.f16x2 %r3998, %r3995, %r3994;
	// end inline asm
	// begin inline asm
	mov.b32 %r4001, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4002, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4003, %r3913, %r4001;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4006, %r4003, %r4002;
	// end inline asm
	// begin inline asm
	mov.b32 %r4009, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4010, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4011, %r3916, %r4009;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4014, %r4011, %r4010;
	// end inline asm
	// begin inline asm
	mov.b32 %r4017, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4018, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4019, %r3919, %r4017;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4022, %r4019, %r4018;
	// end inline asm
	// begin inline asm
	mov.b32 %r4025, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4026, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4027, %r3922, %r4025;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4030, %r4027, %r4026;
	// end inline asm
	// begin inline asm
	mov.b32 %r4033, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4034, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4035, %r3925, %r4033;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4038, %r4035, %r4034;
	// end inline asm
	// begin inline asm
	mov.b32 %r4041, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4042, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4043, %r3928, %r4041;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4046, %r4043, %r4042;
	// end inline asm
	// begin inline asm
	mov.b32 %r4049, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4050, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4051, %r3931, %r4049;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4054, %r4051, %r4050;
	// end inline asm
	// begin inline asm
	mov.b32 %r4057, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r4058, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r4059, %r3934, %r4057;
	// end inline asm
	// begin inline asm
	min.f16x2 %r4062, %r4059, %r4058;
	// end inline asm
	// begin inline asm
	mov.b32 %r4068, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4066, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4067, %r4068, %r4066;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4070, %r3942, %r4067;
	// end inline asm
	// begin inline asm
	mov.b32 %r4073, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4074, %r4068, %r4073;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4077, %r3950, %r4074;
	// end inline asm
	// begin inline asm
	mov.b32 %r4080, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4081, %r4068, %r4080;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4084, %r3958, %r4081;
	// end inline asm
	// begin inline asm
	mov.b32 %r4087, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4088, %r4068, %r4087;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4091, %r3966, %r4088;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4094, %r4070, %r4084, %r2301;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4098, %r4077, %r4091, %r2301;
	// end inline asm
	shl.b32 	%r4105, %r4098, 4;
	// begin inline asm
	lop3.b32 %r4102, %r2307, %r4094, %r4105, 202;
	// end inline asm
	xor.b32  	%r7829, %r4102, -2004318072;
	// begin inline asm
	mov.b32 %r4109, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4107, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4108, %r4109, %r4107;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4111, %r3974, %r4108;
	// end inline asm
	// begin inline asm
	mov.b32 %r4114, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4115, %r4109, %r4114;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4118, %r3982, %r4115;
	// end inline asm
	// begin inline asm
	mov.b32 %r4121, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4122, %r4109, %r4121;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4125, %r3990, %r4122;
	// end inline asm
	// begin inline asm
	mov.b32 %r4128, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4129, %r4109, %r4128;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4132, %r3998, %r4129;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4135, %r4111, %r4125, %r2301;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4139, %r4118, %r4132, %r2301;
	// end inline asm
	shl.b32 	%r4146, %r4139, 4;
	// begin inline asm
	lop3.b32 %r4143, %r2307, %r4135, %r4146, 202;
	// end inline asm
	xor.b32  	%r7830, %r4143, -2004318072;
	// begin inline asm
	mov.b32 %r4150, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4148, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4149, %r4150, %r4148;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4152, %r4006, %r4149;
	// end inline asm
	// begin inline asm
	mov.b32 %r4155, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4156, %r4150, %r4155;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4159, %r4014, %r4156;
	// end inline asm
	// begin inline asm
	mov.b32 %r4162, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4163, %r4150, %r4162;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4166, %r4022, %r4163;
	// end inline asm
	// begin inline asm
	mov.b32 %r4169, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4170, %r4150, %r4169;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4173, %r4030, %r4170;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4176, %r4152, %r4166, %r2301;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4180, %r4159, %r4173, %r2301;
	// end inline asm
	shl.b32 	%r4187, %r4180, 4;
	// begin inline asm
	lop3.b32 %r4184, %r2307, %r4176, %r4187, 202;
	// end inline asm
	xor.b32  	%r7831, %r4184, -2004318072;
	// begin inline asm
	mov.b32 %r4191, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4189, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4190, %r4191, %r4189;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4193, %r4038, %r4190;
	// end inline asm
	// begin inline asm
	mov.b32 %r4196, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4197, %r4191, %r4196;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4200, %r4046, %r4197;
	// end inline asm
	// begin inline asm
	mov.b32 %r4203, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4204, %r4191, %r4203;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4207, %r4054, %r4204;
	// end inline asm
	// begin inline asm
	mov.b32 %r4210, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4211, %r4191, %r4210;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4214, %r4062, %r4211;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4217, %r4193, %r4207, %r2301;
	// end inline asm
	// begin inline asm
	prmt.b32 %r4221, %r4200, %r4214, %r2301;
	// end inline asm
	shl.b32 	%r4228, %r4221, 4;
	// begin inline asm
	lop3.b32 %r4225, %r2307, %r4217, %r4228, 202;
	// end inline asm
	xor.b32  	%r7832, %r4225, -2004318072;
	st.shared.u32 	[%rd93], %r7829;
	st.shared.u32 	[%rd94], %r7830;
	st.shared.u32 	[%rd95], %r7831;
	st.shared.u32 	[%rd96], %r7832;
	ld.shared.u32 	%r7962, [%rd89];
	ld.shared.u32 	%r7963, [%rd90];
	ld.shared.u32 	%r7964, [%rd91];
	ld.shared.u32 	%r7965, [%rd92];
	// begin inline asm
	mov.b32 %r4234, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4245, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4233, %r7962, -2004318072;
	// begin inline asm
	lop3.b32 %r4231, %r640, %r4233, %r4234, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4235, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4236, %r4234, %r4235;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4239, %r4231, %r4236;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4242, %r651, %r4233, %r4245, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4246, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4247, %r4245, %r4246;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4250, %r4242, %r4247;
	// end inline asm
	shr.u32 	%r4255, %r4233, 8;
	// begin inline asm
	lop3.b32 %r4253, %r640, %r4255, %r4234, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4257, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4258, %r4234, %r4257;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4261, %r4253, %r4258;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4264, %r651, %r4255, %r4245, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4268, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4269, %r4245, %r4268;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4272, %r4264, %r4269;
	// end inline asm
	// begin inline asm
	mov.b32 %r4280, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4291, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4279, %r7963, -2004318072;
	// begin inline asm
	lop3.b32 %r4277, %r640, %r4279, %r4280, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4281, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4282, %r4280, %r4281;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4285, %r4277, %r4282;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4288, %r651, %r4279, %r4291, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4292, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4293, %r4291, %r4292;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4296, %r4288, %r4293;
	// end inline asm
	shr.u32 	%r4301, %r4279, 8;
	// begin inline asm
	lop3.b32 %r4299, %r640, %r4301, %r4280, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4303, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4304, %r4280, %r4303;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4307, %r4299, %r4304;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4310, %r651, %r4301, %r4291, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4314, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4315, %r4291, %r4314;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4318, %r4310, %r4315;
	// end inline asm
	// begin inline asm
	mov.b32 %r4326, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4337, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4325, %r7964, -2004318072;
	// begin inline asm
	lop3.b32 %r4323, %r640, %r4325, %r4326, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4327, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4328, %r4326, %r4327;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4331, %r4323, %r4328;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4334, %r651, %r4325, %r4337, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4338, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4339, %r4337, %r4338;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4342, %r4334, %r4339;
	// end inline asm
	shr.u32 	%r4347, %r4325, 8;
	// begin inline asm
	lop3.b32 %r4345, %r640, %r4347, %r4326, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4349, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4350, %r4326, %r4349;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4353, %r4345, %r4350;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4356, %r651, %r4347, %r4337, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4360, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4361, %r4337, %r4360;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4364, %r4356, %r4361;
	// end inline asm
	// begin inline asm
	mov.b32 %r4372, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4383, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r4371, %r7965, -2004318072;
	// begin inline asm
	lop3.b32 %r4369, %r640, %r4371, %r4372, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4373, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4374, %r4372, %r4373;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4377, %r4369, %r4374;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4380, %r651, %r4371, %r4383, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4384, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4385, %r4383, %r4384;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4388, %r4380, %r4385;
	// end inline asm
	shr.u32 	%r4393, %r4371, 8;
	// begin inline asm
	lop3.b32 %r4391, %r640, %r4393, %r4372, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4395, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4396, %r4372, %r4395;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4399, %r4391, %r4396;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4402, %r651, %r4393, %r4383, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4406, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4407, %r4383, %r4406;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4410, %r4402, %r4407;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4413, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4415, %r4413, %r4239;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4418, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4420, %r4418, %r4250;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4423, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4425, %r4423, %r4261;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4428, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4430, %r4428, %r4272;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4433, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4435, %r4433, %r4285;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4438, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4440, %r4438, %r4296;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4443, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4445, %r4443, %r4307;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4448, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4450, %r4448, %r4318;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4453, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4455, %r4453, %r4331;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4458, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4460, %r4458, %r4342;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4463, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4465, %r4463, %r4353;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4468, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4470, %r4468, %r4364;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4473, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4475, %r4473, %r4377;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4478, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4480, %r4478, %r4388;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4483, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4485, %r4483, %r4399;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4488, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r4490, %r4488, %r4410;
	// end inline asm
	// begin inline asm
	mov.b32 %r4498, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4509, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4495, %r640, %r1433, %r4498, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4499, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4500, %r4498, %r4499;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4503, %r4495, %r4500;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4506, %r651, %r1433, %r4509, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4510, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4511, %r4509, %r4510;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4514, %r4506, %r4511;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4517, %r640, %r1455, %r4498, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4521, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4522, %r4498, %r4521;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4525, %r4517, %r4522;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4528, %r651, %r1455, %r4509, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4532, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4533, %r4509, %r4532;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4536, %r4528, %r4533;
	// end inline asm
	// begin inline asm
	mov.b32 %r4544, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4555, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4541, %r640, %r1479, %r4544, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4545, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4546, %r4544, %r4545;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4549, %r4541, %r4546;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4552, %r651, %r1479, %r4555, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4556, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4557, %r4555, %r4556;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4560, %r4552, %r4557;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4563, %r640, %r1501, %r4544, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4567, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4568, %r4544, %r4567;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4571, %r4563, %r4568;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4574, %r651, %r1501, %r4555, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4578, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4579, %r4555, %r4578;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4582, %r4574, %r4579;
	// end inline asm
	// begin inline asm
	mov.b32 %r4590, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4601, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4587, %r640, %r1525, %r4590, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4591, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4592, %r4590, %r4591;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4595, %r4587, %r4592;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4598, %r651, %r1525, %r4601, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4602, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4603, %r4601, %r4602;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4606, %r4598, %r4603;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4609, %r640, %r1547, %r4590, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4613, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4614, %r4590, %r4613;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4617, %r4609, %r4614;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4620, %r651, %r1547, %r4601, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4624, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4625, %r4601, %r4624;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4628, %r4620, %r4625;
	// end inline asm
	// begin inline asm
	mov.b32 %r4636, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4647, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4633, %r640, %r1571, %r4636, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4637, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4638, %r4636, %r4637;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4641, %r4633, %r4638;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4644, %r651, %r1571, %r4647, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4648, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4649, %r4647, %r4648;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4652, %r4644, %r4649;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4655, %r640, %r1593, %r4636, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4659, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4660, %r4636, %r4659;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4663, %r4655, %r4660;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4666, %r651, %r1593, %r4647, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4670, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4671, %r4647, %r4670;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4674, %r4666, %r4671;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4677, %r195, %r4503, %r4415;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4681, %r195, %r4514, %r4420;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4685, %r195, %r4525, %r4425;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4689, %r195, %r4536, %r4430;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4693, %r195, %r4549, %r4435;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4697, %r195, %r4560, %r4440;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4701, %r195, %r4571, %r4445;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4705, %r195, %r4582, %r4450;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4709, %r195, %r4595, %r4455;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4713, %r195, %r4606, %r4460;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4717, %r195, %r4617, %r4465;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4721, %r195, %r4628, %r4470;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4725, %r195, %r4641, %r4475;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4729, %r195, %r4652, %r4480;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4733, %r195, %r4663, %r4485;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4737, %r195, %r4674, %r4490;
	// end inline asm
	// begin inline asm
	mov.b32 %r4746, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4757, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4743, %r640, %r641, %r4746, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4747, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4748, %r4746, %r4747;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4751, %r4743, %r4748;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4754, %r651, %r641, %r4757, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4758, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4759, %r4757, %r4758;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4762, %r4754, %r4759;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4765, %r640, %r663, %r4746, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4769, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4770, %r4746, %r4769;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4773, %r4765, %r4770;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4776, %r651, %r663, %r4757, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4780, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4781, %r4757, %r4780;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4784, %r4776, %r4781;
	// end inline asm
	// begin inline asm
	mov.b32 %r4792, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4803, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4789, %r640, %r687, %r4792, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4793, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4794, %r4792, %r4793;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4797, %r4789, %r4794;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4800, %r651, %r687, %r4803, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4804, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4805, %r4803, %r4804;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4808, %r4800, %r4805;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4811, %r640, %r709, %r4792, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4815, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4816, %r4792, %r4815;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4819, %r4811, %r4816;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4822, %r651, %r709, %r4803, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4826, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4827, %r4803, %r4826;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4830, %r4822, %r4827;
	// end inline asm
	// begin inline asm
	mov.b32 %r4838, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4849, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4835, %r640, %r733, %r4838, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4839, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4840, %r4838, %r4839;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4843, %r4835, %r4840;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4846, %r651, %r733, %r4849, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4850, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4851, %r4849, %r4850;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4854, %r4846, %r4851;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4857, %r640, %r755, %r4838, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4861, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4862, %r4838, %r4861;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4865, %r4857, %r4862;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4868, %r651, %r755, %r4849, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4872, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4873, %r4849, %r4872;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4876, %r4868, %r4873;
	// end inline asm
	// begin inline asm
	mov.b32 %r4884, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r4895, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r4881, %r640, %r779, %r4884, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4885, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4886, %r4884, %r4885;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4889, %r4881, %r4886;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4892, %r651, %r779, %r4895, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4896, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4897, %r4895, %r4896;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4900, %r4892, %r4897;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4903, %r640, %r801, %r4884, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4907, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4908, %r4884, %r4907;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4911, %r4903, %r4908;
	// end inline asm
	// begin inline asm
	lop3.b32 %r4914, %r651, %r801, %r4895, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r4918, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r4919, %r4895, %r4918;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r4922, %r4914, %r4919;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4925, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4927, %r4925, %r4751, %r4677;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4931, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4933, %r4931, %r4762, %r4681;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4937, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4939, %r4937, %r4773, %r4685;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4943, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4945, %r4943, %r4784, %r4689;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4949, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4951, %r4949, %r4797, %r4693;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4955, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4957, %r4955, %r4808, %r4697;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4961, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4963, %r4961, %r4819, %r4701;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4967, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4969, %r4967, %r4830, %r4705;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4973, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4975, %r4973, %r4843, %r4709;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4979, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4981, %r4979, %r4854, %r4713;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4985, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4987, %r4985, %r4865, %r4717;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4991, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4993, %r4991, %r4876, %r4721;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r4997, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r4999, %r4997, %r4889, %r4725;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5003, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5005, %r5003, %r4900, %r4729;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5009, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5011, %r5009, %r4911, %r4733;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5015, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5017, %r5015, %r4922, %r4737;
	// end inline asm
	// begin inline asm
	mov.b32 %r5026, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5037, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5023, %r640, %r2437, %r5026, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5027, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5028, %r5026, %r5027;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5031, %r5023, %r5028;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5034, %r651, %r2437, %r5037, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5038, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5039, %r5037, %r5038;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5042, %r5034, %r5039;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5045, %r640, %r2459, %r5026, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5049, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5050, %r5026, %r5049;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5053, %r5045, %r5050;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5056, %r651, %r2459, %r5037, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5060, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5061, %r5037, %r5060;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5064, %r5056, %r5061;
	// end inline asm
	// begin inline asm
	mov.b32 %r5072, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5083, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5069, %r640, %r2483, %r5072, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5073, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5074, %r5072, %r5073;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5077, %r5069, %r5074;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5080, %r651, %r2483, %r5083, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5084, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5085, %r5083, %r5084;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5088, %r5080, %r5085;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5091, %r640, %r2505, %r5072, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5095, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5096, %r5072, %r5095;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5099, %r5091, %r5096;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5102, %r651, %r2505, %r5083, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5106, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5107, %r5083, %r5106;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5110, %r5102, %r5107;
	// end inline asm
	// begin inline asm
	mov.b32 %r5118, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5129, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5115, %r640, %r2529, %r5118, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5119, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5120, %r5118, %r5119;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5123, %r5115, %r5120;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5126, %r651, %r2529, %r5129, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5130, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5131, %r5129, %r5130;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5134, %r5126, %r5131;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5137, %r640, %r2551, %r5118, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5141, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5142, %r5118, %r5141;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5145, %r5137, %r5142;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5148, %r651, %r2551, %r5129, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5152, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5153, %r5129, %r5152;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5156, %r5148, %r5153;
	// end inline asm
	// begin inline asm
	mov.b32 %r5164, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5175, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r5161, %r640, %r2575, %r5164, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5165, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5166, %r5164, %r5165;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5169, %r5161, %r5166;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5172, %r651, %r2575, %r5175, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5176, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5177, %r5175, %r5176;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5180, %r5172, %r5177;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5183, %r640, %r2597, %r5164, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5187, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5188, %r5164, %r5187;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5191, %r5183, %r5188;
	// end inline asm
	// begin inline asm
	lop3.b32 %r5194, %r651, %r2597, %r5175, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r5198, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5199, %r5175, %r5198;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r5202, %r5194, %r5199;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5276, %r231, %r5031, %r4927;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5273, %r231, %r5042, %r4933;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5285, %r231, %r5053, %r4939;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5282, %r231, %r5064, %r4945;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5294, %r231, %r5077, %r4951;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5291, %r231, %r5088, %r4957;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5303, %r231, %r5099, %r4963;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5300, %r231, %r5110, %r4969;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5312, %r231, %r5123, %r4975;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5309, %r231, %r5134, %r4981;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5321, %r231, %r5145, %r4987;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5318, %r231, %r5156, %r4993;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5330, %r231, %r5169, %r4999;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5327, %r231, %r5180, %r5005;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5339, %r231, %r5191, %r5011;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5336, %r231, %r5202, %r5017;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5269, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5271, %r5269, %r5273;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5274, %r252, %r5276, %r5271;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5278, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5280, %r5278, %r5282;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5283, %r252, %r5285, %r5280;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5287, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5289, %r5287, %r5291;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5292, %r252, %r5294, %r5289;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5296, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5298, %r5296, %r5300;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5301, %r252, %r5303, %r5298;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5305, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5307, %r5305, %r5309;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5310, %r252, %r5312, %r5307;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5314, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5316, %r5314, %r5318;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5319, %r252, %r5321, %r5316;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5323, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5325, %r5323, %r5327;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5328, %r252, %r5330, %r5325;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5332, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5334, %r5332, %r5336;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5337, %r252, %r5339, %r5334;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5341, %r255, %r5276;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5344, %r252, %r5273, %r5341;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5348, %r255, %r5285;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5351, %r252, %r5282, %r5348;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5355, %r255, %r5294;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5358, %r252, %r5291, %r5355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5362, %r255, %r5303;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5365, %r252, %r5300, %r5362;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5369, %r255, %r5312;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5372, %r252, %r5309, %r5369;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5376, %r255, %r5321;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5379, %r252, %r5318, %r5376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5383, %r255, %r5330;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5386, %r252, %r5327, %r5383;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5390, %r255, %r5339;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5393, %r252, %r5336, %r5390;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5484, %r5481}, {%r311, %r317, %r314, %r320}, {%r5274, %r5344}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5493, %r5490}, {%r311, %r317, %r314, %r320}, {%r5283, %r5351}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5502, %r5499}, {%r311, %r317, %r314, %r320}, {%r5292, %r5358}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5511, %r5508}, {%r311, %r317, %r314, %r320}, {%r5301, %r5365}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5520, %r5517}, {%r311, %r317, %r314, %r320}, {%r5310, %r5372}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5529, %r5526}, {%r311, %r317, %r314, %r320}, {%r5319, %r5379}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5538, %r5535}, {%r311, %r317, %r314, %r320}, {%r5328, %r5386}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5547, %r5544}, {%r311, %r317, %r314, %r320}, {%r5337, %r5393}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5477, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5479, %r5477, %r5481;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5482, %r355, %r5484, %r5479;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5486, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5488, %r5486, %r5490;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5491, %r355, %r5493, %r5488;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5495, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5497, %r5495, %r5499;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5500, %r355, %r5502, %r5497;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5504, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5506, %r5504, %r5508;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5509, %r355, %r5511, %r5506;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5513, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5515, %r5513, %r5517;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5518, %r355, %r5520, %r5515;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5522, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5524, %r5522, %r5526;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5527, %r355, %r5529, %r5524;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5531, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5533, %r5531, %r5535;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5536, %r355, %r5538, %r5533;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r5540, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5542, %r5540, %r5544;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5545, %r355, %r5547, %r5542;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5549, %r358, %r5484;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5552, %r355, %r5481, %r5549;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5556, %r358, %r5493;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5559, %r355, %r5490, %r5556;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5563, %r358, %r5502;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5566, %r355, %r5499, %r5563;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5570, %r358, %r5511;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5573, %r355, %r5508, %r5570;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5577, %r358, %r5520;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5580, %r355, %r5517, %r5577;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5584, %r358, %r5529;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5587, %r355, %r5526, %r5584;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5591, %r358, %r5538;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5594, %r355, %r5535, %r5591;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5598, %r358, %r5547;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r5601, %r355, %r5544, %r5598;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5605, %r5606}, {%r389, %r395, %r392, %r398}, {%r5482, %r5552}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5615, %r5616}, {%r389, %r395, %r392, %r398}, {%r5491, %r5559}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5625, %r5626}, {%r389, %r395, %r392, %r398}, {%r5500, %r5566}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5635, %r5636}, {%r389, %r395, %r392, %r398}, {%r5509, %r5573}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5645, %r5646}, {%r389, %r395, %r392, %r398}, {%r5518, %r5580}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5655, %r5656}, {%r389, %r395, %r392, %r398}, {%r5527, %r5587}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5665, %r5666}, {%r389, %r395, %r392, %r398}, {%r5536, %r5594}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r5675, %r5676}, {%r389, %r395, %r392, %r398}, {%r5545, %r5601}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5685, %r100, %r5605;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5688, %r100, %r5606;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5691, %r100, %r5615;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5694, %r100, %r5616;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5697, %r100, %r5625;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5700, %r100, %r5626;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5703, %r100, %r5635;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5706, %r100, %r5636;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5709, %r100, %r5645;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5712, %r100, %r5646;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5715, %r100, %r5655;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5718, %r100, %r5656;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5721, %r100, %r5665;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5724, %r100, %r5666;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5727, %r100, %r5675;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r5730, %r100, %r5676;
	// end inline asm
	// begin inline asm
	mov.b32 %r5733, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5734, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5735, %r5685, %r5733;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5738, %r5735, %r5734;
	// end inline asm
	// begin inline asm
	mov.b32 %r5741, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5742, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5743, %r5688, %r5741;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5746, %r5743, %r5742;
	// end inline asm
	// begin inline asm
	mov.b32 %r5749, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5750, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5751, %r5691, %r5749;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5754, %r5751, %r5750;
	// end inline asm
	// begin inline asm
	mov.b32 %r5757, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5758, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5759, %r5694, %r5757;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5762, %r5759, %r5758;
	// end inline asm
	// begin inline asm
	mov.b32 %r5765, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5766, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5767, %r5697, %r5765;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5770, %r5767, %r5766;
	// end inline asm
	// begin inline asm
	mov.b32 %r5773, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5774, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5775, %r5700, %r5773;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5778, %r5775, %r5774;
	// end inline asm
	// begin inline asm
	mov.b32 %r5781, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5782, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5783, %r5703, %r5781;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5786, %r5783, %r5782;
	// end inline asm
	// begin inline asm
	mov.b32 %r5789, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5790, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5791, %r5706, %r5789;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5794, %r5791, %r5790;
	// end inline asm
	// begin inline asm
	mov.b32 %r5797, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5798, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5799, %r5709, %r5797;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5802, %r5799, %r5798;
	// end inline asm
	// begin inline asm
	mov.b32 %r5805, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5806, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5807, %r5712, %r5805;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5810, %r5807, %r5806;
	// end inline asm
	// begin inline asm
	mov.b32 %r5813, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5814, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5815, %r5715, %r5813;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5818, %r5815, %r5814;
	// end inline asm
	// begin inline asm
	mov.b32 %r5821, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5822, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5823, %r5718, %r5821;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5826, %r5823, %r5822;
	// end inline asm
	// begin inline asm
	mov.b32 %r5829, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5830, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5831, %r5721, %r5829;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5834, %r5831, %r5830;
	// end inline asm
	// begin inline asm
	mov.b32 %r5837, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5838, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5839, %r5724, %r5837;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5842, %r5839, %r5838;
	// end inline asm
	// begin inline asm
	mov.b32 %r5845, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5846, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5847, %r5727, %r5845;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5850, %r5847, %r5846;
	// end inline asm
	// begin inline asm
	mov.b32 %r5853, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r5854, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r5855, %r5730, %r5853;
	// end inline asm
	// begin inline asm
	min.f16x2 %r5858, %r5855, %r5854;
	// end inline asm
	// begin inline asm
	mov.b32 %r5864, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5862, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5863, %r5864, %r5862;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5866, %r5738, %r5863;
	// end inline asm
	// begin inline asm
	mov.b32 %r5869, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5870, %r5864, %r5869;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5873, %r5746, %r5870;
	// end inline asm
	// begin inline asm
	mov.b32 %r5876, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5877, %r5864, %r5876;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5880, %r5754, %r5877;
	// end inline asm
	// begin inline asm
	mov.b32 %r5883, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5884, %r5864, %r5883;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5887, %r5762, %r5884;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5890, %r5866, %r5880, %r2301;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5894, %r5873, %r5887, %r2301;
	// end inline asm
	shl.b32 	%r5901, %r5894, 4;
	// begin inline asm
	lop3.b32 %r5898, %r2307, %r5890, %r5901, 202;
	// end inline asm
	xor.b32  	%r7833, %r5898, -2004318072;
	// begin inline asm
	mov.b32 %r5905, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5903, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5904, %r5905, %r5903;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5907, %r5770, %r5904;
	// end inline asm
	// begin inline asm
	mov.b32 %r5910, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5911, %r5905, %r5910;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5914, %r5778, %r5911;
	// end inline asm
	// begin inline asm
	mov.b32 %r5917, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5918, %r5905, %r5917;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5921, %r5786, %r5918;
	// end inline asm
	// begin inline asm
	mov.b32 %r5924, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5925, %r5905, %r5924;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5928, %r5794, %r5925;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5931, %r5907, %r5921, %r2301;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5935, %r5914, %r5928, %r2301;
	// end inline asm
	shl.b32 	%r5942, %r5935, 4;
	// begin inline asm
	lop3.b32 %r5939, %r2307, %r5931, %r5942, 202;
	// end inline asm
	xor.b32  	%r7834, %r5939, -2004318072;
	// begin inline asm
	mov.b32 %r5946, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5944, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5945, %r5946, %r5944;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5948, %r5802, %r5945;
	// end inline asm
	// begin inline asm
	mov.b32 %r5951, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5952, %r5946, %r5951;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5955, %r5810, %r5952;
	// end inline asm
	// begin inline asm
	mov.b32 %r5958, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5959, %r5946, %r5958;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5962, %r5818, %r5959;
	// end inline asm
	// begin inline asm
	mov.b32 %r5965, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5966, %r5946, %r5965;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5969, %r5826, %r5966;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5972, %r5948, %r5962, %r2301;
	// end inline asm
	// begin inline asm
	prmt.b32 %r5976, %r5955, %r5969, %r2301;
	// end inline asm
	shl.b32 	%r5983, %r5976, 4;
	// begin inline asm
	lop3.b32 %r5980, %r2307, %r5972, %r5983, 202;
	// end inline asm
	xor.b32  	%r7835, %r5980, -2004318072;
	// begin inline asm
	mov.b32 %r5987, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r5985, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5986, %r5987, %r5985;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5989, %r5834, %r5986;
	// end inline asm
	// begin inline asm
	mov.b32 %r5992, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5993, %r5987, %r5992;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r5996, %r5842, %r5993;
	// end inline asm
	// begin inline asm
	mov.b32 %r5999, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6000, %r5987, %r5999;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6003, %r5850, %r6000;
	// end inline asm
	// begin inline asm
	mov.b32 %r6006, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6007, %r5987, %r6006;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6010, %r5858, %r6007;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6013, %r5989, %r6003, %r2301;
	// end inline asm
	// begin inline asm
	prmt.b32 %r6017, %r5996, %r6010, %r2301;
	// end inline asm
	shl.b32 	%r6024, %r6017, 4;
	// begin inline asm
	lop3.b32 %r6021, %r2307, %r6013, %r6024, 202;
	// end inline asm
	xor.b32  	%r7836, %r6021, -2004318072;
	st.shared.u32 	[%rd93], %r7833;
	st.shared.u32 	[%rd94], %r7834;
	st.shared.u32 	[%rd95], %r7835;
	st.shared.u32 	[%rd96], %r7836;
	ld.shared.u32 	%r7966, [%rd89];
	ld.shared.u32 	%r7967, [%rd90];
	ld.shared.u32 	%r7968, [%rd91];
	ld.shared.u32 	%r7969, [%rd92];
	// begin inline asm
	mov.b32 %r6030, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6041, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6029, %r7966, -2004318072;
	// begin inline asm
	lop3.b32 %r6027, %r640, %r6029, %r6030, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6031, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6032, %r6030, %r6031;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6035, %r6027, %r6032;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6038, %r651, %r6029, %r6041, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6042, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6043, %r6041, %r6042;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6046, %r6038, %r6043;
	// end inline asm
	shr.u32 	%r6051, %r6029, 8;
	// begin inline asm
	lop3.b32 %r6049, %r640, %r6051, %r6030, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6053, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6054, %r6030, %r6053;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6057, %r6049, %r6054;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6060, %r651, %r6051, %r6041, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6064, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6065, %r6041, %r6064;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6068, %r6060, %r6065;
	// end inline asm
	// begin inline asm
	mov.b32 %r6076, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6087, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6075, %r7967, -2004318072;
	// begin inline asm
	lop3.b32 %r6073, %r640, %r6075, %r6076, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6077, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6078, %r6076, %r6077;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6081, %r6073, %r6078;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6084, %r651, %r6075, %r6087, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6088, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6089, %r6087, %r6088;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6092, %r6084, %r6089;
	// end inline asm
	shr.u32 	%r6097, %r6075, 8;
	// begin inline asm
	lop3.b32 %r6095, %r640, %r6097, %r6076, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6099, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6100, %r6076, %r6099;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6103, %r6095, %r6100;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6106, %r651, %r6097, %r6087, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6110, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6111, %r6087, %r6110;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6114, %r6106, %r6111;
	// end inline asm
	// begin inline asm
	mov.b32 %r6122, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6133, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6121, %r7968, -2004318072;
	// begin inline asm
	lop3.b32 %r6119, %r640, %r6121, %r6122, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6123, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6124, %r6122, %r6123;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6127, %r6119, %r6124;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6130, %r651, %r6121, %r6133, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6134, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6135, %r6133, %r6134;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6138, %r6130, %r6135;
	// end inline asm
	shr.u32 	%r6143, %r6121, 8;
	// begin inline asm
	lop3.b32 %r6141, %r640, %r6143, %r6122, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6145, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6146, %r6122, %r6145;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6149, %r6141, %r6146;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6152, %r651, %r6143, %r6133, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6156, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6157, %r6133, %r6156;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6160, %r6152, %r6157;
	// end inline asm
	// begin inline asm
	mov.b32 %r6168, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6179, {%rs1072, %rs1072};
	// end inline asm
	xor.b32  	%r6167, %r7969, -2004318072;
	// begin inline asm
	lop3.b32 %r6165, %r640, %r6167, %r6168, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6169, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6170, %r6168, %r6169;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6173, %r6165, %r6170;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6176, %r651, %r6167, %r6179, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6180, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6181, %r6179, %r6180;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6184, %r6176, %r6181;
	// end inline asm
	shr.u32 	%r6189, %r6167, 8;
	// begin inline asm
	lop3.b32 %r6187, %r640, %r6189, %r6168, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6191, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6192, %r6168, %r6191;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6195, %r6187, %r6192;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6198, %r651, %r6189, %r6179, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6202, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6203, %r6179, %r6202;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6206, %r6198, %r6203;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6209, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6211, %r6209, %r6035;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6214, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6216, %r6214, %r6046;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6219, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6221, %r6219, %r6057;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6224, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6226, %r6224, %r6068;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6229, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6231, %r6229, %r6081;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6234, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6236, %r6234, %r6092;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6239, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6241, %r6239, %r6103;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6244, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6246, %r6244, %r6114;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6249, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6251, %r6249, %r6127;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6254, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6256, %r6254, %r6138;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6259, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6261, %r6259, %r6149;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6264, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6266, %r6264, %r6160;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6269, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6271, %r6269, %r6173;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6274, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6276, %r6274, %r6184;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6279, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6281, %r6279, %r6195;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6284, %r249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r6286, %r6284, %r6206;
	// end inline asm
	// begin inline asm
	mov.b32 %r6294, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6305, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6291, %r640, %r641, %r6294, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6295, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6296, %r6294, %r6295;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6299, %r6291, %r6296;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6302, %r651, %r641, %r6305, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6306, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6307, %r6305, %r6306;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6310, %r6302, %r6307;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6313, %r640, %r663, %r6294, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6317, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6318, %r6294, %r6317;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6321, %r6313, %r6318;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6324, %r651, %r663, %r6305, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6328, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6329, %r6305, %r6328;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6332, %r6324, %r6329;
	// end inline asm
	// begin inline asm
	mov.b32 %r6340, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6351, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6337, %r640, %r687, %r6340, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6341, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6342, %r6340, %r6341;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6345, %r6337, %r6342;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6348, %r651, %r687, %r6351, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6352, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6353, %r6351, %r6352;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6356, %r6348, %r6353;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6359, %r640, %r709, %r6340, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6363, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6364, %r6340, %r6363;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6367, %r6359, %r6364;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6370, %r651, %r709, %r6351, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6374, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6375, %r6351, %r6374;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6378, %r6370, %r6375;
	// end inline asm
	// begin inline asm
	mov.b32 %r6386, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6397, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6383, %r640, %r733, %r6386, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6387, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6388, %r6386, %r6387;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6391, %r6383, %r6388;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6394, %r651, %r733, %r6397, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6398, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6399, %r6397, %r6398;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6402, %r6394, %r6399;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6405, %r640, %r755, %r6386, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6409, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6410, %r6386, %r6409;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6413, %r6405, %r6410;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6416, %r651, %r755, %r6397, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6420, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6421, %r6397, %r6420;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6424, %r6416, %r6421;
	// end inline asm
	// begin inline asm
	mov.b32 %r6432, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6443, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6429, %r640, %r779, %r6432, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6433, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6434, %r6432, %r6433;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6437, %r6429, %r6434;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6440, %r651, %r779, %r6443, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6444, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6445, %r6443, %r6444;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6448, %r6440, %r6445;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6451, %r640, %r801, %r6432, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6455, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6456, %r6432, %r6455;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6459, %r6451, %r6456;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6462, %r651, %r801, %r6443, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6466, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6467, %r6443, %r6466;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6470, %r6462, %r6467;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6473, %r195, %r6299, %r6211;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6477, %r195, %r6310, %r6216;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6481, %r195, %r6321, %r6221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6485, %r195, %r6332, %r6226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6489, %r195, %r6345, %r6231;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6493, %r195, %r6356, %r6236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6497, %r195, %r6367, %r6241;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6501, %r195, %r6378, %r6246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6505, %r195, %r6391, %r6251;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6509, %r195, %r6402, %r6256;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6513, %r195, %r6413, %r6261;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6517, %r195, %r6424, %r6266;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6521, %r195, %r6437, %r6271;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6525, %r195, %r6448, %r6276;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6529, %r195, %r6459, %r6281;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6533, %r195, %r6470, %r6286;
	// end inline asm
	// begin inline asm
	mov.b32 %r6542, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6553, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6539, %r640, %r2437, %r6542, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6543, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6544, %r6542, %r6543;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6547, %r6539, %r6544;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6550, %r651, %r2437, %r6553, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6554, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6555, %r6553, %r6554;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6558, %r6550, %r6555;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6561, %r640, %r2459, %r6542, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6565, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6566, %r6542, %r6565;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6569, %r6561, %r6566;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6572, %r651, %r2459, %r6553, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6576, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6577, %r6553, %r6576;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6580, %r6572, %r6577;
	// end inline asm
	// begin inline asm
	mov.b32 %r6588, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6599, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6585, %r640, %r2483, %r6588, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6589, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6590, %r6588, %r6589;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6593, %r6585, %r6590;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6596, %r651, %r2483, %r6599, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6600, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6601, %r6599, %r6600;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6604, %r6596, %r6601;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6607, %r640, %r2505, %r6588, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6611, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6612, %r6588, %r6611;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6615, %r6607, %r6612;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6618, %r651, %r2505, %r6599, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6622, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6623, %r6599, %r6622;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6626, %r6618, %r6623;
	// end inline asm
	// begin inline asm
	mov.b32 %r6634, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6645, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6631, %r640, %r2529, %r6634, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6635, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6636, %r6634, %r6635;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6639, %r6631, %r6636;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6642, %r651, %r2529, %r6645, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6646, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6647, %r6645, %r6646;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6650, %r6642, %r6647;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6653, %r640, %r2551, %r6634, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6657, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6658, %r6634, %r6657;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6661, %r6653, %r6658;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6664, %r651, %r2551, %r6645, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6668, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6669, %r6645, %r6668;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6672, %r6664, %r6669;
	// end inline asm
	// begin inline asm
	mov.b32 %r6680, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6691, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6677, %r640, %r2575, %r6680, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6681, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6682, %r6680, %r6681;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6685, %r6677, %r6682;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6688, %r651, %r2575, %r6691, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6692, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6693, %r6691, %r6692;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6696, %r6688, %r6693;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6699, %r640, %r2597, %r6680, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6703, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6704, %r6680, %r6703;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6707, %r6699, %r6704;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6710, %r651, %r2597, %r6691, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6714, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6715, %r6691, %r6714;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6718, %r6710, %r6715;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6721, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6723, %r6721, %r6547, %r6473;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6727, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6729, %r6727, %r6558, %r6477;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6733, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6735, %r6733, %r6569, %r6481;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6739, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6741, %r6739, %r6580, %r6485;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6745, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6747, %r6745, %r6593, %r6489;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6751, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6753, %r6751, %r6604, %r6493;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6757, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6759, %r6757, %r6615, %r6497;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6763, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6765, %r6763, %r6626, %r6501;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6769, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6771, %r6769, %r6639, %r6505;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6775, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6777, %r6775, %r6650, %r6509;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6781, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6783, %r6781, %r6661, %r6513;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6787, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6789, %r6787, %r6672, %r6517;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6793, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6795, %r6793, %r6685, %r6521;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6799, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6801, %r6799, %r6696, %r6525;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6805, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6807, %r6805, %r6707, %r6529;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r6811, %r213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r6813, %r6811, %r6718, %r6533;
	// end inline asm
	// begin inline asm
	mov.b32 %r6822, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6833, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6819, %r640, %r4233, %r6822, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6823, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6824, %r6822, %r6823;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6827, %r6819, %r6824;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6830, %r651, %r4233, %r6833, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6834, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6835, %r6833, %r6834;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6838, %r6830, %r6835;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6841, %r640, %r4255, %r6822, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6845, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6846, %r6822, %r6845;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6849, %r6841, %r6846;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6852, %r651, %r4255, %r6833, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6856, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6857, %r6833, %r6856;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6860, %r6852, %r6857;
	// end inline asm
	// begin inline asm
	mov.b32 %r6868, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6879, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6865, %r640, %r4279, %r6868, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6869, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6870, %r6868, %r6869;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6873, %r6865, %r6870;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6876, %r651, %r4279, %r6879, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6880, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6881, %r6879, %r6880;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6884, %r6876, %r6881;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6887, %r640, %r4301, %r6868, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6891, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6892, %r6868, %r6891;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6895, %r6887, %r6892;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6898, %r651, %r4301, %r6879, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6902, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6903, %r6879, %r6902;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6906, %r6898, %r6903;
	// end inline asm
	// begin inline asm
	mov.b32 %r6914, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6925, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6911, %r640, %r4325, %r6914, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6915, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6916, %r6914, %r6915;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6919, %r6911, %r6916;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6922, %r651, %r4325, %r6925, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6926, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6927, %r6925, %r6926;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6930, %r6922, %r6927;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6933, %r640, %r4347, %r6914, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6937, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6938, %r6914, %r6937;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6941, %r6933, %r6938;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6944, %r651, %r4347, %r6925, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6948, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6949, %r6925, %r6948;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6952, %r6944, %r6949;
	// end inline asm
	// begin inline asm
	mov.b32 %r6960, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r6971, {%rs1072, %rs1072};
	// end inline asm
	// begin inline asm
	lop3.b32 %r6957, %r640, %r4371, %r6960, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6961, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6962, %r6960, %r6961;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6965, %r6957, %r6962;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6968, %r651, %r4371, %r6971, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6972, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6973, %r6971, %r6972;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6976, %r6968, %r6973;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6979, %r640, %r4393, %r6960, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6983, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6984, %r6960, %r6983;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6987, %r6979, %r6984;
	// end inline asm
	// begin inline asm
	lop3.b32 %r6990, %r651, %r4393, %r6971, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r6994, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r6995, %r6971, %r6994;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r6998, %r6990, %r6995;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7072, %r231, %r6827, %r6723;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7069, %r231, %r6838, %r6729;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7081, %r231, %r6849, %r6735;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7078, %r231, %r6860, %r6741;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7090, %r231, %r6873, %r6747;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7087, %r231, %r6884, %r6753;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7099, %r231, %r6895, %r6759;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7096, %r231, %r6906, %r6765;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7108, %r231, %r6919, %r6771;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7105, %r231, %r6930, %r6777;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7117, %r231, %r6941, %r6783;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7114, %r231, %r6952, %r6789;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7126, %r231, %r6965, %r6795;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7123, %r231, %r6976, %r6801;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7135, %r231, %r6987, %r6807;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7132, %r231, %r6998, %r6813;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7065, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7067, %r7065, %r7069;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7070, %r252, %r7072, %r7067;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7074, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7076, %r7074, %r7078;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7079, %r252, %r7081, %r7076;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7083, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7085, %r7083, %r7087;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7088, %r252, %r7090, %r7085;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7092, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7094, %r7092, %r7096;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7097, %r252, %r7099, %r7094;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7101, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7103, %r7101, %r7105;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7106, %r252, %r7108, %r7103;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7110, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7112, %r7110, %r7114;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7115, %r252, %r7117, %r7112;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7119, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7121, %r7119, %r7123;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7124, %r252, %r7126, %r7121;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7128, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7130, %r7128, %r7132;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7133, %r252, %r7135, %r7130;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7137, %r255, %r7072;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7140, %r252, %r7069, %r7137;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7144, %r255, %r7081;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7147, %r252, %r7078, %r7144;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7151, %r255, %r7090;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7154, %r252, %r7087, %r7151;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7158, %r255, %r7099;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7161, %r252, %r7096, %r7158;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7165, %r255, %r7108;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7168, %r252, %r7105, %r7165;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7172, %r255, %r7117;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7175, %r252, %r7114, %r7172;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7179, %r255, %r7126;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7182, %r252, %r7123, %r7179;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7186, %r255, %r7135;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7189, %r252, %r7132, %r7186;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7280, %r7277}, {%r311, %r317, %r314, %r320}, {%r7070, %r7140}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7289, %r7286}, {%r311, %r317, %r314, %r320}, {%r7079, %r7147}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7298, %r7295}, {%r311, %r317, %r314, %r320}, {%r7088, %r7154}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7307, %r7304}, {%r311, %r317, %r314, %r320}, {%r7097, %r7161}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7316, %r7313}, {%r311, %r317, %r314, %r320}, {%r7106, %r7168}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7325, %r7322}, {%r311, %r317, %r314, %r320}, {%r7115, %r7175}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7334, %r7331}, {%r311, %r317, %r314, %r320}, {%r7124, %r7182}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7343, %r7340}, {%r311, %r317, %r314, %r320}, {%r7133, %r7189}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7273, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7275, %r7273, %r7277;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7278, %r355, %r7280, %r7275;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7282, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7284, %r7282, %r7286;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7287, %r355, %r7289, %r7284;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7291, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7293, %r7291, %r7295;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7296, %r355, %r7298, %r7293;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7300, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7302, %r7300, %r7304;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7305, %r355, %r7307, %r7302;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7309, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7311, %r7309, %r7313;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7314, %r355, %r7316, %r7311;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7318, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7320, %r7318, %r7322;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7323, %r355, %r7325, %r7320;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7327, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7329, %r7327, %r7331;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7332, %r355, %r7334, %r7329;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r7336, %r358;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7338, %r7336, %r7340;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7341, %r355, %r7343, %r7338;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7345, %r358, %r7280;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7348, %r355, %r7277, %r7345;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7352, %r358, %r7289;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7355, %r355, %r7286, %r7352;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7359, %r358, %r7298;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7362, %r355, %r7295, %r7359;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7366, %r358, %r7307;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7369, %r355, %r7304, %r7366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7373, %r358, %r7316;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7376, %r355, %r7313, %r7373;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7380, %r358, %r7325;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7383, %r355, %r7322, %r7380;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7387, %r358, %r7334;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7390, %r355, %r7331, %r7387;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7394, %r358, %r7343;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r7397, %r355, %r7340, %r7394;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7401, %r7402}, {%r389, %r395, %r392, %r398}, {%r7278, %r7348}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7411, %r7412}, {%r389, %r395, %r392, %r398}, {%r7287, %r7355}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7421, %r7422}, {%r389, %r395, %r392, %r398}, {%r7296, %r7362}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7431, %r7432}, {%r389, %r395, %r392, %r398}, {%r7305, %r7369}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7441, %r7442}, {%r389, %r395, %r392, %r398}, {%r7314, %r7376}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7451, %r7452}, {%r389, %r395, %r392, %r398}, {%r7323, %r7383}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7461, %r7462}, {%r389, %r395, %r392, %r398}, {%r7332, %r7390}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r7471, %r7472}, {%r389, %r395, %r392, %r398}, {%r7341, %r7397}, {%r1813, %r1813};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7481, %r100, %r7401;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7484, %r100, %r7402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7487, %r100, %r7411;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7490, %r100, %r7412;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7493, %r100, %r7421;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7496, %r100, %r7422;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7499, %r100, %r7431;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7502, %r100, %r7432;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7505, %r100, %r7441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7508, %r100, %r7442;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7511, %r100, %r7451;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7514, %r100, %r7452;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7517, %r100, %r7461;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7520, %r100, %r7462;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7523, %r100, %r7471;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r7526, %r100, %r7472;
	// end inline asm
	// begin inline asm
	mov.b32 %r7529, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7530, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7531, %r7481, %r7529;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7534, %r7531, %r7530;
	// end inline asm
	// begin inline asm
	mov.b32 %r7537, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7538, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7539, %r7484, %r7537;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7542, %r7539, %r7538;
	// end inline asm
	// begin inline asm
	mov.b32 %r7545, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7546, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7547, %r7487, %r7545;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7550, %r7547, %r7546;
	// end inline asm
	// begin inline asm
	mov.b32 %r7553, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7554, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7555, %r7490, %r7553;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7558, %r7555, %r7554;
	// end inline asm
	// begin inline asm
	mov.b32 %r7561, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7562, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7563, %r7493, %r7561;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7566, %r7563, %r7562;
	// end inline asm
	// begin inline asm
	mov.b32 %r7569, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7570, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7571, %r7496, %r7569;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7574, %r7571, %r7570;
	// end inline asm
	// begin inline asm
	mov.b32 %r7577, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7578, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7579, %r7499, %r7577;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7582, %r7579, %r7578;
	// end inline asm
	// begin inline asm
	mov.b32 %r7585, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7586, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7587, %r7502, %r7585;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7590, %r7587, %r7586;
	// end inline asm
	// begin inline asm
	mov.b32 %r7593, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7594, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7595, %r7505, %r7593;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7598, %r7595, %r7594;
	// end inline asm
	// begin inline asm
	mov.b32 %r7601, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7602, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7603, %r7508, %r7601;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7606, %r7603, %r7602;
	// end inline asm
	// begin inline asm
	mov.b32 %r7609, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7610, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7611, %r7511, %r7609;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7614, %r7611, %r7610;
	// end inline asm
	// begin inline asm
	mov.b32 %r7617, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7618, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7619, %r7514, %r7617;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7622, %r7619, %r7618;
	// end inline asm
	// begin inline asm
	mov.b32 %r7625, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7626, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7627, %r7517, %r7625;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7630, %r7627, %r7626;
	// end inline asm
	// begin inline asm
	mov.b32 %r7633, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7634, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7635, %r7520, %r7633;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7638, %r7635, %r7634;
	// end inline asm
	// begin inline asm
	mov.b32 %r7641, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7642, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7643, %r7523, %r7641;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7646, %r7643, %r7642;
	// end inline asm
	// begin inline asm
	mov.b32 %r7649, {%rs1142, %rs1142};
	// end inline asm
	// begin inline asm
	mov.b32 %r7650, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	max.f16x2 %r7651, %r7526, %r7649;
	// end inline asm
	// begin inline asm
	min.f16x2 %r7654, %r7651, %r7650;
	// end inline asm
	// begin inline asm
	mov.b32 %r7660, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7658, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7659, %r7660, %r7658;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7662, %r7534, %r7659;
	// end inline asm
	// begin inline asm
	mov.b32 %r7665, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7666, %r7660, %r7665;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7669, %r7542, %r7666;
	// end inline asm
	// begin inline asm
	mov.b32 %r7672, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7673, %r7660, %r7672;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7676, %r7550, %r7673;
	// end inline asm
	// begin inline asm
	mov.b32 %r7679, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7680, %r7660, %r7679;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7683, %r7558, %r7680;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7686, %r7662, %r7676, %r2301;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7690, %r7669, %r7683, %r2301;
	// end inline asm
	shl.b32 	%r7697, %r7690, 4;
	// begin inline asm
	lop3.b32 %r7694, %r2307, %r7686, %r7697, 202;
	// end inline asm
	xor.b32  	%r7837, %r7694, -2004318072;
	// begin inline asm
	mov.b32 %r7701, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7699, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7700, %r7701, %r7699;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7703, %r7566, %r7700;
	// end inline asm
	// begin inline asm
	mov.b32 %r7706, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7707, %r7701, %r7706;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7710, %r7574, %r7707;
	// end inline asm
	// begin inline asm
	mov.b32 %r7713, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7714, %r7701, %r7713;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7717, %r7582, %r7714;
	// end inline asm
	// begin inline asm
	mov.b32 %r7720, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7721, %r7701, %r7720;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7724, %r7590, %r7721;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7727, %r7703, %r7717, %r2301;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7731, %r7710, %r7724, %r2301;
	// end inline asm
	shl.b32 	%r7738, %r7731, 4;
	// begin inline asm
	lop3.b32 %r7735, %r2307, %r7727, %r7738, 202;
	// end inline asm
	xor.b32  	%r7838, %r7735, -2004318072;
	// begin inline asm
	mov.b32 %r7742, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7740, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7741, %r7742, %r7740;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7744, %r7598, %r7741;
	// end inline asm
	// begin inline asm
	mov.b32 %r7747, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7748, %r7742, %r7747;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7751, %r7606, %r7748;
	// end inline asm
	// begin inline asm
	mov.b32 %r7754, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7755, %r7742, %r7754;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7758, %r7614, %r7755;
	// end inline asm
	// begin inline asm
	mov.b32 %r7761, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7762, %r7742, %r7761;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7765, %r7622, %r7762;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7768, %r7744, %r7758, %r2301;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7772, %r7751, %r7765, %r2301;
	// end inline asm
	shl.b32 	%r7779, %r7772, 4;
	// begin inline asm
	lop3.b32 %r7776, %r2307, %r7768, %r7779, 202;
	// end inline asm
	xor.b32  	%r7839, %r7776, -2004318072;
	// begin inline asm
	mov.b32 %r7783, {%rs1176, %rs1176};
	// end inline asm
	// begin inline asm
	mov.b32 %r7781, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7782, %r7783, %r7781;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7785, %r7630, %r7782;
	// end inline asm
	// begin inline asm
	mov.b32 %r7788, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7789, %r7783, %r7788;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7792, %r7638, %r7789;
	// end inline asm
	// begin inline asm
	mov.b32 %r7795, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7796, %r7783, %r7795;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7799, %r7646, %r7796;
	// end inline asm
	// begin inline asm
	mov.b32 %r7802, {%rs1184, %rs1184};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7803, %r7783, %r7802;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r7806, %r7654, %r7803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7809, %r7785, %r7799, %r2301;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7813, %r7792, %r7806, %r2301;
	// end inline asm
	shl.b32 	%r7820, %r7813, 4;
	// begin inline asm
	lop3.b32 %r7817, %r2307, %r7809, %r7820, 202;
	// end inline asm
	xor.b32  	%r7840, %r7817, -2004318072;
	st.shared.u32 	[%rd93], %r7837;
	st.shared.u32 	[%rd94], %r7838;
	st.shared.u32 	[%rd95], %r7839;
	st.shared.u32 	[%rd96], %r7840;
	add.s32 	%r7957, %r7957, -64;
	add.s64 	%rd147, %rd147, 8324;
	setp.eq.s32 	%p212, %r7957, 0;
	@%p212 bra 	$L__BB0_82;
	bra.uni 	$L__BB0_81;
$L__BB0_82:                             // %guard_exit17308
                                        //   in Loop: Header=BB0_80 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r7846, [%rd5];
	ld.shared.u32 	%r7847, [%rd6+128];
	ld.shared.u32 	%r7854, [%rd6+4];
	ld.shared.u32 	%r7855, [%rd6+132];
	ld.shared.u32 	%r7862, [%rd5+8324];
	ld.shared.u32 	%r7863, [%rd6+8452];
	ld.shared.u32 	%r7870, [%rd6+8328];
	ld.shared.u32 	%r7871, [%rd6+8456];
	ld.shared.u32 	%r7878, [%rd5+16648];
	ld.shared.u32 	%r7879, [%rd6+16776];
	ld.shared.u32 	%r7886, [%rd6+16652];
	ld.shared.u32 	%r7887, [%rd6+16780];
	ld.shared.u32 	%r7894, [%rd5+24972];
	ld.shared.u32 	%r7895, [%rd6+25100];
	ld.shared.u32 	%r7902, [%rd6+24976];
	ld.shared.u32 	%r7903, [%rd6+25104];
	// begin inline asm
	prmt.b32 %r7841, %r7846, %r7847, %r551;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7845, %r7846, %r7847, %r555;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7849, %r7854, %r7855, %r551;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7853, %r7854, %r7855, %r555;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7857, %r7862, %r7863, %r551;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7861, %r7862, %r7863, %r555;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7865, %r7870, %r7871, %r551;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7869, %r7870, %r7871, %r555;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7873, %r7878, %r7879, %r551;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7877, %r7878, %r7879, %r555;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7881, %r7886, %r7887, %r551;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7885, %r7886, %r7887, %r555;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7889, %r7894, %r7895, %r551;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7893, %r7894, %r7895, %r555;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7897, %r7902, %r7903, %r551;
	// end inline asm
	// begin inline asm
	prmt.b32 %r7901, %r7902, %r7903, %r555;
	// end inline asm
	selp.b32 	%r7905, %r7845, %r7841, %p199;
	shfl.sync.bfly.b32	%r137, %r7905, 8, 31, -1;
	selp.b32 	%r7906, %r7853, %r7849, %p199;
	shfl.sync.bfly.b32	%r138, %r7906, 8, 31, -1;
	selp.b32 	%r7907, %r7861, %r7857, %p199;
	shfl.sync.bfly.b32	%r7908, %r7907, 8, 31, -1;
	selp.b32 	%r7909, %r7869, %r7865, %p199;
	shfl.sync.bfly.b32	%r7910, %r7909, 8, 31, -1;
	selp.b32 	%r7911, %r7877, %r7873, %p199;
	shfl.sync.bfly.b32	%r7912, %r7911, 8, 31, -1;
	selp.b32 	%r7913, %r7885, %r7881, %p199;
	shfl.sync.bfly.b32	%r7914, %r7913, 8, 31, -1;
	selp.b32 	%r7915, %r7893, %r7889, %p199;
	shfl.sync.bfly.b32	%r7916, %r7915, 8, 31, -1;
	selp.b32 	%r7917, %r7901, %r7897, %p199;
	shfl.sync.bfly.b32	%r7918, %r7917, 8, 31, -1;
	setp.eq.s32 	%p214, %r7956, 0;
	shl.b32 	%r7970, %r7956, 13;
	@%p214 bra 	$L__BB0_83;
// %bb.119:                             // %pass16496
                                        //   in Loop: Header=BB0_80 Depth=1
	selp.b32 	%r7919, %r138, %r7853, %p199;
	selp.b32 	%r7920, %r7849, %r138, %p199;
	selp.b32 	%r7921, %r137, %r7845, %p199;
	selp.b32 	%r7922, %r7841, %r137, %p199;
	add.s32 	%r7924, %r52, %r7970;
	cvt.s64.s32 	%rd97, %r7924;
	add.s64 	%rd98, %rd97, %rd7;
	shr.u64 	%rd99, %rd98, 36;
	add.s64 	%rd100, %rd98, %rd99;
	shr.s64 	%rd101, %rd100, 28;
	setp.lt.s64 	%p216, %rd98, 0;
	and.b64  	%rd102, %rd100, -268435456;
	setp.ne.s64 	%p217, %rd102, %rd98;
	and.pred  	%p218, %p216, %p217;
	selp.u64 	%rd103, 1, 0, %p218;
	sub.s64 	%rd104, %rd103, %rd101;
	shl.b64 	%rd105, %rd104, 28;
	add.s64 	%rd106, %rd105, %rd98;
	shl.b64 	%rd107, %rd106, 2;
	add.s64 	%rd108, %rd3, %rd107;
	st.global.v4.u32 	[%rd108], {%r7922, %r7920, %r7921, %r7919};
$L__BB0_83:                             // %L39737
                                        //   in Loop: Header=BB0_80 Depth=1
	or.b32  	%r7925, %r7956, 64;
	setp.gt.u32 	%p219, %r7925, 191;
	@%p219 bra 	$L__BB0_117;
	bra.uni 	$L__BB0_84;
$L__BB0_117:                            // %pass16603
                                        //   in Loop: Header=BB0_80 Depth=1
	selp.b32 	%r139, %r7857, %r7908, %p199;
	selp.b32 	%r140, %r7908, %r7861, %p199;
	selp.b32 	%r141, %r7865, %r7910, %p199;
	selp.b32 	%r142, %r7910, %r7869, %p199;
	or.b32  	%r7926, %r7970, 524288;
	add.s32 	%r7927, %r52, %r7926;
	cvt.s64.s32 	%rd109, %r7927;
	add.s64 	%rd110, %rd109, %rd7;
	shr.u64 	%rd111, %rd110, 36;
	add.s64 	%rd112, %rd110, %rd111;
	shr.s64 	%rd113, %rd112, 28;
	setp.lt.s64 	%p220, %rd110, 0;
	and.b64  	%rd114, %rd112, -268435456;
	setp.ne.s64 	%p221, %rd114, %rd110;
	and.pred  	%p222, %p220, %p221;
	selp.u64 	%rd115, 1, 0, %p222;
	sub.s64 	%rd116, %rd115, %rd113;
	shl.b64 	%rd117, %rd116, 28;
	add.s64 	%rd118, %rd117, %rd110;
	shl.b64 	%rd119, %rd118, 2;
	add.s64 	%rd120, %rd3, %rd119;
	st.global.v4.u32 	[%rd120], {%r139, %r141, %r140, %r142};
$L__BB0_84:                             // %L39955
                                        //   in Loop: Header=BB0_80 Depth=1
	selp.b32 	%r147, %r7889, %r7916, %p199;
	selp.b32 	%r148, %r7916, %r7893, %p199;
	selp.b32 	%r149, %r7897, %r7918, %p199;
	selp.b32 	%r150, %r7918, %r7901, %p199;
	or.b32  	%r7928, %r7956, 128;
	setp.gt.u32 	%p223, %r7928, 191;
	@%p223 bra 	$L__BB0_118;
	bra.uni 	$L__BB0_85;
$L__BB0_118:                            // %pass16710
                                        //   in Loop: Header=BB0_80 Depth=1
	selp.b32 	%r143, %r7873, %r7912, %p199;
	selp.b32 	%r144, %r7912, %r7877, %p199;
	selp.b32 	%r145, %r7881, %r7914, %p199;
	selp.b32 	%r146, %r7914, %r7885, %p199;
	or.b32  	%r7929, %r7970, 1048576;
	add.s32 	%r7930, %r52, %r7929;
	cvt.s64.s32 	%rd121, %r7930;
	add.s64 	%rd122, %rd121, %rd7;
	shr.u64 	%rd123, %rd122, 36;
	add.s64 	%rd124, %rd122, %rd123;
	shr.s64 	%rd125, %rd124, 28;
	setp.lt.s64 	%p224, %rd122, 0;
	and.b64  	%rd126, %rd124, -268435456;
	setp.ne.s64 	%p225, %rd126, %rd122;
	and.pred  	%p226, %p224, %p225;
	selp.u64 	%rd127, 1, 0, %p226;
	sub.s64 	%rd128, %rd127, %rd125;
	shl.b64 	%rd129, %rd128, 28;
	add.s64 	%rd130, %rd129, %rd122;
	shl.b64 	%rd131, %rd130, 2;
	add.s64 	%rd132, %rd3, %rd131;
	st.global.v4.u32 	[%rd132], {%r143, %r145, %r144, %r146};
	bra.uni 	$L__BB0_85;
$L__BB0_86:                             // %L40402
	st.global.u32 	[%rd4], %r7936;
	ret;
$L__BB0_7:                              // %L156
	mov.u32 	%r7935, 2;
	st.global.u32 	[%rd4], %r7935;
	mov.u64 	%rd145, exception3405;
	cvta.global.u64 	%rd146, %rd145;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd146;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd30;
	st.param.b32 	[param0+8], %r151;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd35, exception13425;
	cvta.global.u64 	%rd36, %rd35;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd36;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd30;
	st.param.b32 	[param0+8], %r151;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
