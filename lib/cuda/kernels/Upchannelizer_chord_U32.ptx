// PTX kernel code for the CUDA upchannelizer
// This file has been generated automatically by `upchan.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for upchan(::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=2

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception2083[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32]
)
.reqntid 512, 1, 1
.minnctapersm 2
{
	.reg .pred 	%p<255>;
	.reg .b16 	%rs<297>;
	.reg .b32 	%r<2594>;
	.reg .f32 	%f<929>;
	.reg .b64 	%rd<135>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r161, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd30, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r166, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r166, 67839;
	@%p1 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd31, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	ld.param.u32 	%r162, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r167, %r2, 9;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	or.b32  	%r168, %r167, %r1;
	or.b32  	%r169, %r168, %r4;
	mul.wide.u32 	%rd37, %r169, 4;
	add.s64 	%rd4, %rd31, %rd37;
	mov.u32 	%r170, 1;
	st.global.u32 	[%rd4], %r170;
	setp.lt.s32 	%p2, %r162, 0;
	@%p2 bra 	$L__BB0_7;
// %bb.3:                               // %L115
	ld.param.u32 	%r163, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p3, %r163, %r162;
	setp.gt.s32 	%p4, %r163, 262144;
	or.pred  	%p5, %p3, %p4;
	@%p5 bra 	$L__BB0_7;
// %bb.4:                               // %L125
	ld.param.u32 	%r164, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r171, %r163, %r162;
	and.b32  	%r172, %r171, 255;
	setp.ne.s32 	%p6, %r172, 0;
	setp.lt.s32 	%p7, %r164, 0;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_7;
// %bb.5:                               // %L131
	ld.param.u32 	%r165, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.lt.s32 	%p9, %r165, %r164;
	setp.gt.s32 	%p10, %r165, 8192;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_7;
// %bb.6:                               // %L141
	sub.s32 	%r173, %r165, %r164;
	add.s32 	%r174, %r173, 3;
	and.b32  	%r175, %r174, 7;
	setp.eq.s32 	%p12, %r175, 0;
	@%p12 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_7;
$L__BB0_8:                              // %pass136
	bfe.u32 	%r115, %r1, 1, 1;
	and.b32  	%r116, %r1, 1;
	bfe.u32 	%r117, %r1, 2, 1;
	shl.b32 	%r182, %r117, 1;
	shl.b32 	%r183, %r116, 2;
	shl.b32 	%r184, %r115, 3;
	or.b32  	%r185, %r183, %r184;
	or.b32  	%r186, %r182, %r185;
	shr.u32 	%r118, %r1, 4;
	or.b32  	%r119, %r118, %r186;
	or.b32  	%r120, %r119, 16;
	mov.f32 	%f184, 0f40000000;
	mov.f32 	%f185, 0f42FE0000;
	div.approx.f32 	%f160, %f185, %f184;
	cvt.rn.f32.s32 	%f186, %r119;
	sub.f32 	%f187, %f186, %f160;
	mov.f32 	%f216, 0f42000000;
	div.approx.f32 	%f162, %f187, %f216;
	setp.ne.f32 	%p18, %f162, 0f00000000;
	mov.f32 	%f896, 0f3F800000;
	mov.f32 	%f889, %f896;
	@%p18 bra 	$L__BB0_9;
	bra.uni 	$L__BB0_10;
$L__BB0_9:                              // %L461
	sin.approx.f32 	%f217, %f162;
	div.approx.f32 	%f889, %f217, %f162;
$L__BB0_10:                             // %L464
	cvt.rn.f32.s32 	%f220, %r120;
	sub.f32 	%f221, %f220, %f160;
	div.approx.f32 	%f5, %f221, %f216;
	setp.eq.f32 	%p24, %f5, 0f00000000;
	mov.f32 	%f890, %f896;
	@%p24 bra 	$L__BB0_12;
// %bb.11:                              // %L481
	sin.approx.f32 	%f251, %f5;
	div.approx.f32 	%f890, %f251, %f5;
$L__BB0_12:                             // %L484
	or.b32  	%r204, %r119, 32;
	or.b32  	%r6, %r119, 48;
	cvt.rn.f32.s32 	%f255, %r204;
	sub.f32 	%f256, %f255, %f160;
	div.approx.f32 	%f9, %f256, %f216;
	setp.eq.f32 	%p30, %f9, 0f00000000;
	mov.f32 	%f891, %f896;
	@%p30 bra 	$L__BB0_14;
// %bb.13:                              // %L563
	sin.approx.f32 	%f286, %f9;
	div.approx.f32 	%f891, %f286, %f9;
$L__BB0_14:                             // %L566
	cvt.rn.f32.s32 	%f289, %r6;
	sub.f32 	%f290, %f289, %f160;
	div.approx.f32 	%f14, %f290, %f216;
	setp.eq.f32 	%p36, %f14, 0f00000000;
	mov.f32 	%f892, %f896;
	@%p36 bra 	$L__BB0_16;
// %bb.15:                              // %L583
	sin.approx.f32 	%f320, %f14;
	div.approx.f32 	%f892, %f320, %f14;
$L__BB0_16:                             // %L586
	or.b32  	%r222, %r119, 64;
	or.b32  	%r8, %r119, 80;
	cvt.rn.f32.s32 	%f324, %r222;
	sub.f32 	%f325, %f324, %f160;
	div.approx.f32 	%f18, %f325, %f216;
	setp.eq.f32 	%p42, %f18, 0f00000000;
	mov.f32 	%f893, %f896;
	@%p42 bra 	$L__BB0_18;
// %bb.17:                              // %L665
	sin.approx.f32 	%f355, %f18;
	div.approx.f32 	%f893, %f355, %f18;
$L__BB0_18:                             // %L668
	cvt.rn.f32.s32 	%f358, %r8;
	sub.f32 	%f359, %f358, %f160;
	div.approx.f32 	%f23, %f359, %f216;
	setp.eq.f32 	%p48, %f23, 0f00000000;
	mov.f32 	%f894, %f896;
	@%p48 bra 	$L__BB0_20;
// %bb.19:                              // %L685
	sin.approx.f32 	%f389, %f23;
	div.approx.f32 	%f894, %f389, %f23;
$L__BB0_20:                             // %L688
	or.b32  	%r240, %r119, 96;
	or.b32  	%r10, %r119, 112;
	cvt.rn.f32.s32 	%f393, %r240;
	sub.f32 	%f394, %f393, %f160;
	div.approx.f32 	%f27, %f394, %f216;
	setp.eq.f32 	%p54, %f27, 0f00000000;
	mov.f32 	%f895, %f896;
	@%p54 bra 	$L__BB0_22;
// %bb.21:                              // %L767
	sin.approx.f32 	%f424, %f27;
	div.approx.f32 	%f895, %f424, %f27;
$L__BB0_22:                             // %L770
	cvt.rn.f32.s32 	%f427, %r10;
	sub.f32 	%f428, %f427, %f160;
	div.approx.f32 	%f32, %f428, %f216;
	setp.eq.f32 	%p60, %f32, 0f00000000;
	@%p60 bra 	$L__BB0_24;
// %bb.23:                              // %L787
	sin.approx.f32 	%f458, %f32;
	div.approx.f32 	%f896, %f458, %f32;
$L__BB0_24:                             // %L790
	mul.lo.s32 	%r12, %r119, 31;
	cvt.rn.f32.s32 	%f461, %r12;
	div.approx.f32 	%f35, %f461, %f216;
	abs.f32 	%f899, %f35;
	setp.lt.f32 	%p61, %f899, 0f40000000;
	@%p61 bra 	$L__BB0_36;
// %bb.25:
	setp.gtu.f32 	%p62, %f899, 0f4B800000;
	@%p62 bra 	$L__BB0_32;
	bra.uni 	$L__BB0_26;
$L__BB0_32:
	mov.b32 	%r14, %f899;
	and.b32  	%r258, %r14, 8388607;
	or.b32  	%r2562, %r258, 1065353216;
	mov.b32 	%f898, %r2562;
	add.s32 	%r259, %r14, -1073741824;
	and.b32  	%r2563, %r259, -8388608;
	setp.eq.s32 	%p68, %r2563, 0;
	@%p68 bra 	$L__BB0_35;
// %bb.33:                              // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f472, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f471,%f472;
	// end inline asm
$L__BB0_34:                             // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r260, %r2563, 192937984;
	add.s32 	%r261, %r2562, %r260;
	mov.b32 	%f473, %r261;
	mul.f32 	%f474, %f471, %f473;
	sub.f32 	%f475, %f473, %f474;
	fma.rn.f32 	%f476, %f475, %f471, %f474;
	sub.f32 	%f477, %f473, %f476;
	fma.rz.f32 	%f478, %f477, %f471, %f476;
	cvt.rzi.f32.f32 	%f479, %f478;
	sub.f32 	%f898, %f473, %f479;
	sub.s32 	%r2563, %r2563, %r260;
	mov.b32 	%r2562, %f898;
	setp.ne.s32 	%p69, %r2563, 0;
	setp.ne.s32 	%p70, %r2562, 0;
	and.pred  	%p71, %p69, %p70;
	@%p71 bra 	$L__BB0_34;
$L__BB0_35:                             // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p72, %r14, 2139095039;
	selp.f32 	%f480, 0f7FFFFFFF, 0f4B800000, %p72;
	mul.f32 	%f481, %f898, 0f34000000;
	mul.f32 	%f899, %f480, %f481;
	bra.uni 	$L__BB0_36;
$L__BB0_26:                             // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f464, %f899, %f184;
	cvt.rzi.f32.f32 	%f897, %f464;
	fma.rn.f32 	%f38, %f897, 0fC0000000, %f899;
	mov.b32 	%r13, %f38;
	setp.lt.u32 	%p63, %r13, 1073741824;
	@%p63 bra 	$L__BB0_31;
// %bb.27:
	setp.lt.u32 	%p64, %r13, -2147483647;
	@%p64 bra 	$L__BB0_29;
// %bb.28:
	add.f32 	%f469, %f897, 0fBF800000;
	setp.lt.f32 	%p67, %f38, 0fC0000000;
	add.f32 	%f470, %f469, 0fBF800000;
	selp.f32 	%f897, %f470, %f469, %p67;
	bra.uni 	$L__BB0_31;
$L__BB0_29:
	add.f32 	%f897, %f897, 0f3F800000;
	setp.ltu.f32 	%p65, %f38, 0f40800000;
	@%p65 bra 	$L__BB0_31;
// %bb.30:                              // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f465, %f897, 0f3F800000;
	fma.rn.f32 	%f467, %f184, 0fC0400000, %f38;
	setp.ge.f32 	%p66, %f467, 0f00000000;
	add.f32 	%f468, %f465, 0f3F800000;
	selp.f32 	%f897, %f468, %f465, %p66;
$L__BB0_31:                             // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f899, %f897, 0fC0000000, %f899;
$L__BB0_36:                             // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f482, %f899;
	setp.gtu.f32 	%p73, %f482, 0f7F800000;
	@%p73 bra 	$L__BB0_38;
// %bb.37:
	mov.b32 	%r262, %f35;
	and.b32  	%r263, %r262, -2147483648;
	mov.b32 	%r264, %f899;
	or.b32  	%r265, %r263, %r264;
	mov.b32 	%f899, %r265;
$L__BB0_38:                             // %__nv_fmodf.exit
	add.s32 	%r274, %r12, 496;
	cvt.rn.f32.s32 	%f513, %r274;
	div.approx.f32 	%f54, %f513, %f216;
	abs.f32 	%f903, %f54;
	setp.lt.f32 	%p81, %f903, 0f40000000;
	@%p81 bra 	$L__BB0_50;
// %bb.39:
	setp.gtu.f32 	%p82, %f903, 0f4B800000;
	@%p82 bra 	$L__BB0_46;
	bra.uni 	$L__BB0_40;
$L__BB0_46:
	mov.b32 	%r22, %f903;
	and.b32  	%r275, %r22, 8388607;
	or.b32  	%r2564, %r275, 1065353216;
	mov.b32 	%f902, %r2564;
	add.s32 	%r276, %r22, -1073741824;
	and.b32  	%r2565, %r276, -8388608;
	setp.eq.s32 	%p88, %r2565, 0;
	@%p88 bra 	$L__BB0_49;
// %bb.47:                              // %__nv_fmaf_rn.exit4.i.i.i587.preheader
	mov.f32 	%f524, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f523,%f524;
	// end inline asm
$L__BB0_48:                             // %__nv_fmaf_rn.exit4.i.i.i587
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r277, %r2565, 192937984;
	add.s32 	%r278, %r2564, %r277;
	mov.b32 	%f525, %r278;
	mul.f32 	%f526, %f523, %f525;
	sub.f32 	%f527, %f525, %f526;
	fma.rn.f32 	%f528, %f527, %f523, %f526;
	sub.f32 	%f529, %f525, %f528;
	fma.rz.f32 	%f530, %f529, %f523, %f528;
	cvt.rzi.f32.f32 	%f531, %f530;
	sub.f32 	%f902, %f525, %f531;
	sub.s32 	%r2565, %r2565, %r277;
	mov.b32 	%r2564, %f902;
	setp.ne.s32 	%p89, %r2565, 0;
	setp.ne.s32 	%p90, %r2564, 0;
	and.pred  	%p91, %p89, %p90;
	@%p91 bra 	$L__BB0_48;
$L__BB0_49:                             // %__internal_fmodf_slowpath_mod.exit.i.i589
	setp.gt.u32 	%p92, %r22, 2139095039;
	selp.f32 	%f532, 0f7FFFFFFF, 0f4B800000, %p92;
	mul.f32 	%f533, %f902, 0f34000000;
	mul.f32 	%f903, %f532, %f533;
	bra.uni 	$L__BB0_50;
$L__BB0_40:                             // %__nv_fast_fdividef.exit.i.i.i566
	div.approx.f32 	%f516, %f903, %f184;
	cvt.rzi.f32.f32 	%f901, %f516;
	fma.rn.f32 	%f57, %f901, 0fC0000000, %f903;
	mov.b32 	%r21, %f57;
	setp.lt.u32 	%p83, %r21, 1073741824;
	@%p83 bra 	$L__BB0_45;
// %bb.41:
	setp.lt.u32 	%p84, %r21, -2147483647;
	@%p84 bra 	$L__BB0_43;
// %bb.42:
	add.f32 	%f521, %f901, 0fBF800000;
	setp.lt.f32 	%p87, %f57, 0fC0000000;
	add.f32 	%f522, %f521, 0fBF800000;
	selp.f32 	%f901, %f522, %f521, %p87;
	bra.uni 	$L__BB0_45;
$L__BB0_43:
	add.f32 	%f901, %f901, 0f3F800000;
	setp.ltu.f32 	%p85, %f57, 0f40800000;
	@%p85 bra 	$L__BB0_45;
// %bb.44:                              // %__nv_fmaf_rn.exit.i.i.i570
	add.f32 	%f517, %f901, 0f3F800000;
	fma.rn.f32 	%f519, %f184, 0fC0400000, %f57;
	setp.ge.f32 	%p86, %f519, 0f00000000;
	add.f32 	%f520, %f517, 0f3F800000;
	selp.f32 	%f901, %f520, %f517, %p86;
$L__BB0_45:                             // %__internal_fmodf_fastpath_quot.exit.i.i573
	fma.rn.f32 	%f903, %f901, 0fC0000000, %f903;
$L__BB0_50:                             // %__internal_fmodf_kernel.exit.i592
	shr.u32 	%r114, %r1, 1;
	abs.f32 	%f534, %f903;
	setp.gtu.f32 	%p93, %f534, 0f7F800000;
	@%p93 bra 	$L__BB0_52;
// %bb.51:
	mov.b32 	%r279, %f54;
	and.b32  	%r280, %r279, -2147483648;
	mov.b32 	%r281, %f903;
	or.b32  	%r282, %r280, %r281;
	mov.b32 	%f903, %r282;
$L__BB0_52:                             // %__nv_fmodf.exit593
	shr.u32 	%r31, %r1, 3;
	and.b32  	%r297, %r31, 2;
	or.b32  	%r32, %r117, %r297;
	and.b32  	%r298, %r114, 4;
	or.b32  	%r33, %r32, %r298;
	and.b32  	%r299, %r1, 3;
	mul.lo.s32 	%r300, %r299, %r33;
	shl.b32 	%r301, %r300, 1;
	neg.s32 	%r302, %r301;
	cvt.rn.f32.s32 	%f567, %r302;
	mov.f32 	%f568, 0f41000000;
	div.approx.f32 	%f71, %f567, %f568;
	abs.f32 	%f907, %f71;
	setp.lt.f32 	%p101, %f907, 0f40000000;
	@%p101 bra 	$L__BB0_64;
// %bb.53:
	setp.gtu.f32 	%p102, %f907, 0f4B800000;
	@%p102 bra 	$L__BB0_60;
	bra.uni 	$L__BB0_54;
$L__BB0_60:
	mov.b32 	%r35, %f907;
	and.b32  	%r303, %r35, 8388607;
	or.b32  	%r2566, %r303, 1065353216;
	mov.b32 	%f906, %r2566;
	add.s32 	%r304, %r35, -1073741824;
	and.b32  	%r2567, %r304, -8388608;
	setp.eq.s32 	%p108, %r2567, 0;
	@%p108 bra 	$L__BB0_63;
// %bb.61:                              // %__nv_fmaf_rn.exit4.i.i.i618.preheader
	mov.f32 	%f578, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f577,%f578;
	// end inline asm
$L__BB0_62:                             // %__nv_fmaf_rn.exit4.i.i.i618
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r305, %r2567, 192937984;
	add.s32 	%r306, %r2566, %r305;
	mov.b32 	%f579, %r306;
	mul.f32 	%f580, %f577, %f579;
	sub.f32 	%f581, %f579, %f580;
	fma.rn.f32 	%f582, %f581, %f577, %f580;
	sub.f32 	%f583, %f579, %f582;
	fma.rz.f32 	%f584, %f583, %f577, %f582;
	cvt.rzi.f32.f32 	%f585, %f584;
	sub.f32 	%f906, %f579, %f585;
	sub.s32 	%r2567, %r2567, %r305;
	mov.b32 	%r2566, %f906;
	setp.ne.s32 	%p109, %r2567, 0;
	setp.ne.s32 	%p110, %r2566, 0;
	and.pred  	%p111, %p109, %p110;
	@%p111 bra 	$L__BB0_62;
$L__BB0_63:                             // %__internal_fmodf_slowpath_mod.exit.i.i620
	setp.gt.u32 	%p112, %r35, 2139095039;
	selp.f32 	%f586, 0f7FFFFFFF, 0f4B800000, %p112;
	mul.f32 	%f587, %f906, 0f34000000;
	mul.f32 	%f907, %f586, %f587;
	bra.uni 	$L__BB0_64;
$L__BB0_54:                             // %__nv_fast_fdividef.exit.i.i.i597
	div.approx.f32 	%f570, %f907, %f184;
	cvt.rzi.f32.f32 	%f905, %f570;
	fma.rn.f32 	%f74, %f905, 0fC0000000, %f907;
	mov.b32 	%r34, %f74;
	setp.lt.u32 	%p103, %r34, 1073741824;
	@%p103 bra 	$L__BB0_59;
// %bb.55:
	setp.lt.u32 	%p104, %r34, -2147483647;
	@%p104 bra 	$L__BB0_57;
// %bb.56:
	add.f32 	%f575, %f905, 0fBF800000;
	setp.lt.f32 	%p107, %f74, 0fC0000000;
	add.f32 	%f576, %f575, 0fBF800000;
	selp.f32 	%f905, %f576, %f575, %p107;
	bra.uni 	$L__BB0_59;
$L__BB0_57:
	add.f32 	%f905, %f905, 0f3F800000;
	setp.ltu.f32 	%p105, %f74, 0f40800000;
	@%p105 bra 	$L__BB0_59;
// %bb.58:                              // %__nv_fmaf_rn.exit.i.i.i601
	add.f32 	%f571, %f905, 0f3F800000;
	fma.rn.f32 	%f573, %f184, 0fC0400000, %f74;
	setp.ge.f32 	%p106, %f573, 0f00000000;
	add.f32 	%f574, %f571, 0f3F800000;
	selp.f32 	%f905, %f574, %f571, %p106;
$L__BB0_59:                             // %__internal_fmodf_fastpath_quot.exit.i.i604
	fma.rn.f32 	%f907, %f905, 0fC0000000, %f907;
$L__BB0_64:                             // %__internal_fmodf_kernel.exit.i623
	shl.b32 	%r108, %r1, 1;
	abs.f32 	%f588, %f907;
	setp.gtu.f32 	%p113, %f588, 0f7F800000;
	@%p113 bra 	$L__BB0_66;
// %bb.65:
	mov.b32 	%r307, %f71;
	and.b32  	%r308, %r307, -2147483648;
	mov.b32 	%r309, %f907;
	or.b32  	%r310, %r308, %r309;
	mov.b32 	%f907, %r310;
$L__BB0_66:                             // %__nv_fmodf.exit624
	and.b32  	%r319, %r108, 6;
	mov.u32 	%r320, -8;
	sub.s32 	%r321, %r320, %r319;
	mul.lo.s32 	%r322, %r33, %r321;
	cvt.rn.f32.s32 	%f619, %r322;
	div.approx.f32 	%f90, %f619, %f568;
	abs.f32 	%f911, %f90;
	setp.lt.f32 	%p121, %f911, 0f40000000;
	@%p121 bra 	$L__BB0_78;
// %bb.67:
	setp.gtu.f32 	%p122, %f911, 0f4B800000;
	@%p122 bra 	$L__BB0_74;
	bra.uni 	$L__BB0_68;
$L__BB0_74:
	mov.b32 	%r43, %f911;
	and.b32  	%r323, %r43, 8388607;
	or.b32  	%r2568, %r323, 1065353216;
	mov.b32 	%f910, %r2568;
	add.s32 	%r324, %r43, -1073741824;
	and.b32  	%r2569, %r324, -8388608;
	setp.eq.s32 	%p128, %r2569, 0;
	@%p128 bra 	$L__BB0_77;
// %bb.75:                              // %__nv_fmaf_rn.exit4.i.i.i649.preheader
	mov.f32 	%f630, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f629,%f630;
	// end inline asm
$L__BB0_76:                             // %__nv_fmaf_rn.exit4.i.i.i649
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r325, %r2569, 192937984;
	add.s32 	%r326, %r2568, %r325;
	mov.b32 	%f631, %r326;
	mul.f32 	%f632, %f629, %f631;
	sub.f32 	%f633, %f631, %f632;
	fma.rn.f32 	%f634, %f633, %f629, %f632;
	sub.f32 	%f635, %f631, %f634;
	fma.rz.f32 	%f636, %f635, %f629, %f634;
	cvt.rzi.f32.f32 	%f637, %f636;
	sub.f32 	%f910, %f631, %f637;
	sub.s32 	%r2569, %r2569, %r325;
	mov.b32 	%r2568, %f910;
	setp.ne.s32 	%p129, %r2569, 0;
	setp.ne.s32 	%p130, %r2568, 0;
	and.pred  	%p131, %p129, %p130;
	@%p131 bra 	$L__BB0_76;
$L__BB0_77:                             // %__internal_fmodf_slowpath_mod.exit.i.i651
	setp.gt.u32 	%p132, %r43, 2139095039;
	selp.f32 	%f638, 0f7FFFFFFF, 0f4B800000, %p132;
	mul.f32 	%f639, %f910, 0f34000000;
	mul.f32 	%f911, %f638, %f639;
	bra.uni 	$L__BB0_78;
$L__BB0_68:                             // %__nv_fast_fdividef.exit.i.i.i628
	div.approx.f32 	%f622, %f911, %f184;
	cvt.rzi.f32.f32 	%f909, %f622;
	fma.rn.f32 	%f93, %f909, 0fC0000000, %f911;
	mov.b32 	%r42, %f93;
	setp.lt.u32 	%p123, %r42, 1073741824;
	@%p123 bra 	$L__BB0_73;
// %bb.69:
	setp.lt.u32 	%p124, %r42, -2147483647;
	@%p124 bra 	$L__BB0_71;
// %bb.70:
	add.f32 	%f627, %f909, 0fBF800000;
	setp.lt.f32 	%p127, %f93, 0fC0000000;
	add.f32 	%f628, %f627, 0fBF800000;
	selp.f32 	%f909, %f628, %f627, %p127;
	bra.uni 	$L__BB0_73;
$L__BB0_71:
	add.f32 	%f909, %f909, 0f3F800000;
	setp.ltu.f32 	%p125, %f93, 0f40800000;
	@%p125 bra 	$L__BB0_73;
// %bb.72:                              // %__nv_fmaf_rn.exit.i.i.i632
	add.f32 	%f623, %f909, 0f3F800000;
	fma.rn.f32 	%f625, %f184, 0fC0400000, %f93;
	setp.ge.f32 	%p126, %f625, 0f00000000;
	add.f32 	%f626, %f623, 0f3F800000;
	selp.f32 	%f909, %f626, %f623, %p126;
$L__BB0_73:                             // %__internal_fmodf_fastpath_quot.exit.i.i635
	fma.rn.f32 	%f911, %f909, 0fC0000000, %f911;
$L__BB0_78:                             // %__internal_fmodf_kernel.exit.i654
	abs.f32 	%f640, %f911;
	setp.gtu.f32 	%p133, %f640, 0f7F800000;
	@%p133 bra 	$L__BB0_80;
// %bb.79:
	mov.b32 	%r327, %f90;
	and.b32  	%r328, %r327, -2147483648;
	mov.b32 	%r329, %f911;
	or.b32  	%r330, %r328, %r329;
	mov.b32 	%f911, %r330;
$L__BB0_80:                             // %__nv_fmodf.exit655
	shl.b32 	%r351, %r115, 1;
	neg.s32 	%r54, %r351;
	mul.lo.s32 	%r55, %r54, %r33;
	cvt.rn.f32.s32 	%f673, %r55;
	div.approx.f32 	%f107, %f673, %f216;
	abs.f32 	%f915, %f107;
	setp.lt.f32 	%p141, %f915, 0f40000000;
	@%p141 bra 	$L__BB0_92;
// %bb.81:
	setp.gtu.f32 	%p142, %f915, 0f4B800000;
	@%p142 bra 	$L__BB0_88;
	bra.uni 	$L__BB0_82;
$L__BB0_88:
	mov.b32 	%r57, %f915;
	and.b32  	%r352, %r57, 8388607;
	or.b32  	%r2570, %r352, 1065353216;
	mov.b32 	%f914, %r2570;
	add.s32 	%r353, %r57, -1073741824;
	and.b32  	%r2571, %r353, -8388608;
	setp.eq.s32 	%p148, %r2571, 0;
	@%p148 bra 	$L__BB0_91;
// %bb.89:                              // %__nv_fmaf_rn.exit4.i.i.i680.preheader
	mov.f32 	%f684, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f683,%f684;
	// end inline asm
$L__BB0_90:                             // %__nv_fmaf_rn.exit4.i.i.i680
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r354, %r2571, 192937984;
	add.s32 	%r355, %r2570, %r354;
	mov.b32 	%f685, %r355;
	mul.f32 	%f686, %f683, %f685;
	sub.f32 	%f687, %f685, %f686;
	fma.rn.f32 	%f688, %f687, %f683, %f686;
	sub.f32 	%f689, %f685, %f688;
	fma.rz.f32 	%f690, %f689, %f683, %f688;
	cvt.rzi.f32.f32 	%f691, %f690;
	sub.f32 	%f914, %f685, %f691;
	sub.s32 	%r2571, %r2571, %r354;
	mov.b32 	%r2570, %f914;
	setp.ne.s32 	%p149, %r2571, 0;
	setp.ne.s32 	%p150, %r2570, 0;
	and.pred  	%p151, %p149, %p150;
	@%p151 bra 	$L__BB0_90;
$L__BB0_91:                             // %__internal_fmodf_slowpath_mod.exit.i.i682
	setp.gt.u32 	%p152, %r57, 2139095039;
	selp.f32 	%f692, 0f7FFFFFFF, 0f4B800000, %p152;
	mul.f32 	%f693, %f914, 0f34000000;
	mul.f32 	%f915, %f692, %f693;
	bra.uni 	$L__BB0_92;
$L__BB0_82:                             // %__nv_fast_fdividef.exit.i.i.i659
	div.approx.f32 	%f676, %f915, %f184;
	cvt.rzi.f32.f32 	%f913, %f676;
	fma.rn.f32 	%f110, %f913, 0fC0000000, %f915;
	mov.b32 	%r56, %f110;
	setp.lt.u32 	%p143, %r56, 1073741824;
	@%p143 bra 	$L__BB0_87;
// %bb.83:
	setp.lt.u32 	%p144, %r56, -2147483647;
	@%p144 bra 	$L__BB0_85;
// %bb.84:
	add.f32 	%f681, %f913, 0fBF800000;
	setp.lt.f32 	%p147, %f110, 0fC0000000;
	add.f32 	%f682, %f681, 0fBF800000;
	selp.f32 	%f913, %f682, %f681, %p147;
	bra.uni 	$L__BB0_87;
$L__BB0_85:
	add.f32 	%f913, %f913, 0f3F800000;
	setp.ltu.f32 	%p145, %f110, 0f40800000;
	@%p145 bra 	$L__BB0_87;
// %bb.86:                              // %__nv_fmaf_rn.exit.i.i.i663
	add.f32 	%f677, %f913, 0f3F800000;
	fma.rn.f32 	%f679, %f184, 0fC0400000, %f110;
	setp.ge.f32 	%p146, %f679, 0f00000000;
	add.f32 	%f680, %f677, 0f3F800000;
	selp.f32 	%f913, %f680, %f677, %p146;
$L__BB0_87:                             // %__internal_fmodf_fastpath_quot.exit.i.i666
	fma.rn.f32 	%f915, %f913, 0fC0000000, %f915;
$L__BB0_92:                             // %__internal_fmodf_kernel.exit.i685
	abs.f32 	%f694, %f915;
	setp.gtu.f32 	%p153, %f694, 0f7F800000;
	@%p153 bra 	$L__BB0_94;
// %bb.93:
	mov.b32 	%r356, %f107;
	and.b32  	%r357, %r356, -2147483648;
	mov.b32 	%r358, %f915;
	or.b32  	%r359, %r357, %r358;
	mov.b32 	%f915, %r359;
$L__BB0_94:                             // %__nv_fmodf.exit686
	shl.b32 	%r368, %r33, 2;
	sub.s32 	%r369, %r55, %r368;
	cvt.rn.f32.s32 	%f725, %r369;
	div.approx.f32 	%f126, %f725, %f216;
	abs.f32 	%f919, %f126;
	setp.lt.f32 	%p161, %f919, 0f40000000;
	@%p161 bra 	$L__BB0_106;
// %bb.95:
	setp.gtu.f32 	%p162, %f919, 0f4B800000;
	@%p162 bra 	$L__BB0_102;
	bra.uni 	$L__BB0_96;
$L__BB0_102:
	mov.b32 	%r65, %f919;
	and.b32  	%r370, %r65, 8388607;
	or.b32  	%r2572, %r370, 1065353216;
	mov.b32 	%f918, %r2572;
	add.s32 	%r371, %r65, -1073741824;
	and.b32  	%r2573, %r371, -8388608;
	setp.eq.s32 	%p168, %r2573, 0;
	@%p168 bra 	$L__BB0_105;
// %bb.103:                             // %__nv_fmaf_rn.exit4.i.i.i711.preheader
	mov.f32 	%f736, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f735,%f736;
	// end inline asm
$L__BB0_104:                            // %__nv_fmaf_rn.exit4.i.i.i711
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r372, %r2573, 192937984;
	add.s32 	%r373, %r2572, %r372;
	mov.b32 	%f737, %r373;
	mul.f32 	%f738, %f735, %f737;
	sub.f32 	%f739, %f737, %f738;
	fma.rn.f32 	%f740, %f739, %f735, %f738;
	sub.f32 	%f741, %f737, %f740;
	fma.rz.f32 	%f742, %f741, %f735, %f740;
	cvt.rzi.f32.f32 	%f743, %f742;
	sub.f32 	%f918, %f737, %f743;
	sub.s32 	%r2573, %r2573, %r372;
	mov.b32 	%r2572, %f918;
	setp.ne.s32 	%p169, %r2573, 0;
	setp.ne.s32 	%p170, %r2572, 0;
	and.pred  	%p171, %p169, %p170;
	@%p171 bra 	$L__BB0_104;
$L__BB0_105:                            // %__internal_fmodf_slowpath_mod.exit.i.i713
	setp.gt.u32 	%p172, %r65, 2139095039;
	selp.f32 	%f744, 0f7FFFFFFF, 0f4B800000, %p172;
	mul.f32 	%f745, %f918, 0f34000000;
	mul.f32 	%f919, %f744, %f745;
	bra.uni 	$L__BB0_106;
$L__BB0_96:                             // %__nv_fast_fdividef.exit.i.i.i690
	div.approx.f32 	%f728, %f919, %f184;
	cvt.rzi.f32.f32 	%f917, %f728;
	fma.rn.f32 	%f129, %f917, 0fC0000000, %f919;
	mov.b32 	%r64, %f129;
	setp.lt.u32 	%p163, %r64, 1073741824;
	@%p163 bra 	$L__BB0_101;
// %bb.97:
	setp.lt.u32 	%p164, %r64, -2147483647;
	@%p164 bra 	$L__BB0_99;
// %bb.98:
	add.f32 	%f733, %f917, 0fBF800000;
	setp.lt.f32 	%p167, %f129, 0fC0000000;
	add.f32 	%f734, %f733, 0fBF800000;
	selp.f32 	%f917, %f734, %f733, %p167;
	bra.uni 	$L__BB0_101;
$L__BB0_99:
	add.f32 	%f917, %f917, 0f3F800000;
	setp.ltu.f32 	%p165, %f129, 0f40800000;
	@%p165 bra 	$L__BB0_101;
// %bb.100:                             // %__nv_fmaf_rn.exit.i.i.i694
	add.f32 	%f729, %f917, 0f3F800000;
	fma.rn.f32 	%f731, %f184, 0fC0400000, %f129;
	setp.ge.f32 	%p166, %f731, 0f00000000;
	add.f32 	%f732, %f729, 0f3F800000;
	selp.f32 	%f917, %f732, %f729, %p166;
$L__BB0_101:                            // %__internal_fmodf_fastpath_quot.exit.i.i697
	fma.rn.f32 	%f919, %f917, 0fC0000000, %f919;
$L__BB0_106:                            // %__internal_fmodf_kernel.exit.i716
	abs.f32 	%f746, %f919;
	setp.gtu.f32 	%p173, %f746, 0f7F800000;
	@%p173 bra 	$L__BB0_108;
// %bb.107:
	mov.b32 	%r374, %f126;
	and.b32  	%r375, %r374, -2147483648;
	mov.b32 	%r376, %f919;
	or.b32  	%r377, %r375, %r376;
	mov.b32 	%f919, %r377;
$L__BB0_108:                            // %__nv_fmodf.exit717
	mul.lo.s32 	%r75, %r54, %r32;
	cvt.rn.f32.s32 	%f779, %r75;
	mov.f32 	%f780, 0f40800000;
	div.approx.f32 	%f143, %f779, %f780;
	abs.f32 	%f927, %f143;
	setp.lt.f32 	%p181, %f927, 0f40000000;
	@%p181 bra 	$L__BB0_141;
// %bb.109:
	setp.gtu.f32 	%p182, %f927, 0f4B800000;
	@%p182 bra 	$L__BB0_137;
	bra.uni 	$L__BB0_110;
$L__BB0_137:
	mov.b32 	%r122, %f927;
	and.b32  	%r392, %r122, 8388607;
	or.b32  	%r2583, %r392, 1065353216;
	mov.b32 	%f926, %r2583;
	add.s32 	%r393, %r122, -1073741824;
	and.b32  	%r2584, %r393, -8388608;
	setp.eq.s32 	%p188, %r2584, 0;
	@%p188 bra 	$L__BB0_140;
// %bb.138:                             // %__nv_fmaf_rn.exit4.i.i.i773.preheader
	mov.f32 	%f790, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f789,%f790;
	// end inline asm
$L__BB0_139:                            // %__nv_fmaf_rn.exit4.i.i.i773
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r394, %r2584, 192937984;
	add.s32 	%r395, %r2583, %r394;
	mov.b32 	%f791, %r395;
	mul.f32 	%f792, %f789, %f791;
	sub.f32 	%f793, %f791, %f792;
	fma.rn.f32 	%f794, %f793, %f789, %f792;
	sub.f32 	%f795, %f791, %f794;
	fma.rz.f32 	%f796, %f795, %f789, %f794;
	cvt.rzi.f32.f32 	%f797, %f796;
	sub.f32 	%f926, %f791, %f797;
	sub.s32 	%r2584, %r2584, %r394;
	mov.b32 	%r2583, %f926;
	setp.ne.s32 	%p189, %r2584, 0;
	setp.ne.s32 	%p190, %r2583, 0;
	and.pred  	%p191, %p189, %p190;
	@%p191 bra 	$L__BB0_139;
$L__BB0_140:                            // %__internal_fmodf_slowpath_mod.exit.i.i775
	setp.gt.u32 	%p192, %r122, 2139095039;
	selp.f32 	%f798, 0f7FFFFFFF, 0f4B800000, %p192;
	mul.f32 	%f799, %f926, 0f34000000;
	mul.f32 	%f927, %f798, %f799;
	bra.uni 	$L__BB0_141;
$L__BB0_110:                            // %__nv_fast_fdividef.exit.i.i.i752
	div.approx.f32 	%f782, %f927, %f184;
	cvt.rzi.f32.f32 	%f925, %f782;
	fma.rn.f32 	%f164, %f925, 0fC0000000, %f927;
	mov.b32 	%r121, %f164;
	setp.lt.u32 	%p183, %r121, 1073741824;
	@%p183 bra 	$L__BB0_136;
// %bb.111:
	setp.lt.u32 	%p184, %r121, -2147483647;
	@%p184 bra 	$L__BB0_134;
// %bb.112:
	add.f32 	%f787, %f925, 0fBF800000;
	setp.lt.f32 	%p187, %f164, 0fC0000000;
	add.f32 	%f788, %f787, 0fBF800000;
	selp.f32 	%f925, %f788, %f787, %p187;
	bra.uni 	$L__BB0_136;
$L__BB0_134:
	add.f32 	%f925, %f925, 0f3F800000;
	setp.ltu.f32 	%p185, %f164, 0f40800000;
	@%p185 bra 	$L__BB0_136;
// %bb.135:                             // %__nv_fmaf_rn.exit.i.i.i756
	add.f32 	%f783, %f925, 0f3F800000;
	fma.rn.f32 	%f785, %f184, 0fC0400000, %f164;
	setp.ge.f32 	%p186, %f785, 0f00000000;
	add.f32 	%f786, %f783, 0f3F800000;
	selp.f32 	%f925, %f786, %f783, %p186;
$L__BB0_136:                            // %__internal_fmodf_fastpath_quot.exit.i.i759
	fma.rn.f32 	%f927, %f925, 0fC0000000, %f927;
$L__BB0_141:                            // %__internal_fmodf_kernel.exit.i778
	abs.f32 	%f800, %f927;
	setp.gtu.f32 	%p193, %f800, 0f7F800000;
	@%p193 bra 	$L__BB0_143;
// %bb.142:
	mov.b32 	%r396, %f143;
	and.b32  	%r397, %r396, -2147483648;
	mov.b32 	%r398, %f927;
	or.b32  	%r399, %r397, %r398;
	mov.b32 	%f927, %r399;
$L__BB0_143:                            // %__nv_fmodf.exit779
	shl.b32 	%r408, %r32, 2;
	sub.s32 	%r409, %r75, %r408;
	cvt.rn.f32.s32 	%f833, %r409;
	div.approx.f32 	%f181, %f833, %f780;
	abs.f32 	%f923, %f181;
	setp.lt.f32 	%p202, %f923, 0f40000000;
	@%p202 bra 	$L__BB0_124;
// %bb.113:
	setp.gtu.f32 	%p203, %f923, 0f4B800000;
	@%p203 bra 	$L__BB0_120;
	bra.uni 	$L__BB0_114;
$L__BB0_120:
	mov.b32 	%r77, %f923;
	and.b32  	%r410, %r77, 8388607;
	or.b32  	%r2574, %r410, 1065353216;
	mov.b32 	%f922, %r2574;
	add.s32 	%r411, %r77, -1073741824;
	and.b32  	%r2575, %r411, -8388608;
	setp.eq.s32 	%p209, %r2575, 0;
	@%p209 bra 	$L__BB0_123;
// %bb.121:                             // %__nv_fmaf_rn.exit4.i.i.i742.preheader
	mov.f32 	%f844, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f843,%f844;
	// end inline asm
$L__BB0_122:                            // %__nv_fmaf_rn.exit4.i.i.i742
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r412, %r2575, 192937984;
	add.s32 	%r413, %r2574, %r412;
	mov.b32 	%f845, %r413;
	mul.f32 	%f846, %f843, %f845;
	sub.f32 	%f847, %f845, %f846;
	fma.rn.f32 	%f848, %f847, %f843, %f846;
	sub.f32 	%f849, %f845, %f848;
	fma.rz.f32 	%f850, %f849, %f843, %f848;
	cvt.rzi.f32.f32 	%f851, %f850;
	sub.f32 	%f922, %f845, %f851;
	sub.s32 	%r2575, %r2575, %r412;
	mov.b32 	%r2574, %f922;
	setp.ne.s32 	%p210, %r2575, 0;
	setp.ne.s32 	%p211, %r2574, 0;
	and.pred  	%p212, %p210, %p211;
	@%p212 bra 	$L__BB0_122;
$L__BB0_123:                            // %__internal_fmodf_slowpath_mod.exit.i.i744
	setp.gt.u32 	%p213, %r77, 2139095039;
	selp.f32 	%f852, 0f7FFFFFFF, 0f4B800000, %p213;
	mul.f32 	%f853, %f922, 0f34000000;
	mul.f32 	%f923, %f852, %f853;
	bra.uni 	$L__BB0_124;
$L__BB0_114:                            // %__nv_fast_fdividef.exit.i.i.i721
	div.approx.f32 	%f836, %f923, %f184;
	cvt.rzi.f32.f32 	%f921, %f836;
	fma.rn.f32 	%f146, %f921, 0fC0000000, %f923;
	mov.b32 	%r76, %f146;
	setp.lt.u32 	%p204, %r76, 1073741824;
	@%p204 bra 	$L__BB0_119;
// %bb.115:
	setp.lt.u32 	%p205, %r76, -2147483647;
	@%p205 bra 	$L__BB0_117;
// %bb.116:
	add.f32 	%f841, %f921, 0fBF800000;
	setp.lt.f32 	%p208, %f146, 0fC0000000;
	add.f32 	%f842, %f841, 0fBF800000;
	selp.f32 	%f921, %f842, %f841, %p208;
	bra.uni 	$L__BB0_119;
$L__BB0_117:
	add.f32 	%f921, %f921, 0f3F800000;
	setp.ltu.f32 	%p206, %f146, 0f40800000;
	@%p206 bra 	$L__BB0_119;
// %bb.118:                             // %__nv_fmaf_rn.exit.i.i.i725
	add.f32 	%f837, %f921, 0f3F800000;
	fma.rn.f32 	%f839, %f184, 0fC0400000, %f146;
	setp.ge.f32 	%p207, %f839, 0f00000000;
	add.f32 	%f840, %f837, 0f3F800000;
	selp.f32 	%f921, %f840, %f837, %p207;
$L__BB0_119:                            // %__internal_fmodf_fastpath_quot.exit.i.i728
	fma.rn.f32 	%f923, %f921, 0fC0000000, %f923;
$L__BB0_124:                            // %__internal_fmodf_kernel.exit.i747
	abs.f32 	%f854, %f923;
	setp.gtu.f32 	%p214, %f854, 0f7F800000;
	@%p214 bra 	$L__BB0_126;
// %bb.125:
	mov.b32 	%r414, %f181;
	and.b32  	%r415, %r414, -2147483648;
	mov.b32 	%r416, %f923;
	or.b32  	%r417, %r415, %r416;
	mov.b32 	%f923, %r417;
$L__BB0_126:                            // %__nv_fmodf.exit748
	setp.le.s32 	%p222, %r163, %r162;
	mov.u32 	%r2560, 0;
	@%p222 bra 	$L__BB0_133;
// %bb.127:                             // %L1507.lr.ph
	mov.f32 	%f188, 0f43010000;
	div.approx.f32 	%f189, %f187, %f188;
	div.approx.f32 	%f223, %f221, %f188;
	div.approx.f32 	%f258, %f256, %f188;
	div.approx.f32 	%f292, %f290, %f188;
	div.approx.f32 	%f327, %f325, %f188;
	div.approx.f32 	%f361, %f359, %f188;
	div.approx.f32 	%f396, %f394, %f188;
	div.approx.f32 	%f430, %f428, %f188;
	abs.f32 	%f190, %f189;
	abs.f32 	%f224, %f223;
	abs.f32 	%f259, %f258;
	abs.f32 	%f293, %f292;
	abs.f32 	%f328, %f327;
	abs.f32 	%f362, %f361;
	abs.f32 	%f397, %f396;
	abs.f32 	%f431, %f430;
	setp.gt.f32 	%p13, %f190, 0f4B800000;
	mul.f32 	%f191, %f189, 0f00000000;
	setp.gt.f32 	%p19, %f224, 0f4B800000;
	mul.f32 	%f225, %f223, 0f00000000;
	setp.gt.f32 	%p25, %f259, 0f4B800000;
	mul.f32 	%f260, %f258, 0f00000000;
	setp.gt.f32 	%p31, %f293, 0f4B800000;
	mul.f32 	%f294, %f292, 0f00000000;
	setp.gt.f32 	%p37, %f328, 0f4B800000;
	mul.f32 	%f329, %f327, 0f00000000;
	setp.gt.f32 	%p43, %f362, 0f4B800000;
	mul.f32 	%f363, %f361, 0f00000000;
	setp.gt.f32 	%p49, %f397, 0f4B800000;
	mul.f32 	%f398, %f396, 0f00000000;
	setp.gt.f32 	%p55, %f431, 0f4B800000;
	mul.f32 	%f432, %f430, 0f00000000;
	selp.f32 	%f192, %f191, %f189, %p13;
	selp.f32 	%f226, %f225, %f223, %p19;
	selp.f32 	%f261, %f260, %f258, %p25;
	selp.f32 	%f295, %f294, %f292, %p31;
	selp.f32 	%f330, %f329, %f327, %p37;
	selp.f32 	%f364, %f363, %f361, %p43;
	selp.f32 	%f399, %f398, %f396, %p49;
	selp.f32 	%f433, %f432, %f430, %p55;
	add.f32 	%f589, %f907, %f907;
	add.f32 	%f641, %f911, %f911;
	add.f32 	%f193, %f192, %f192;
	add.f32 	%f227, %f226, %f226;
	add.f32 	%f262, %f261, %f261;
	add.f32 	%f296, %f295, %f295;
	add.f32 	%f331, %f330, %f330;
	add.f32 	%f365, %f364, %f364;
	add.f32 	%f400, %f399, %f399;
	add.f32 	%f434, %f433, %f433;
	add.f32 	%f483, %f899, %f899;
	add.f32 	%f535, %f903, %f903;
	mov.b32 	%r311, %f589;
	mov.b32 	%r343, %f641;
	add.f32 	%f695, %f915, %f915;
	add.f32 	%f747, %f919, %f919;
	mov.b32 	%r187, %f193;
	mov.b32 	%r194, %f227;
	mov.b32 	%r205, %f262;
	mov.b32 	%r212, %f296;
	mov.b32 	%r223, %f331;
	mov.b32 	%r230, %f365;
	mov.b32 	%r241, %f400;
	mov.b32 	%r248, %f434;
	mov.b32 	%r266, %f483;
	mov.b32 	%r289, %f535;
	and.b32  	%r312, %r311, -2147483648;
	and.b32  	%r344, %r343, -2147483648;
	mov.b32 	%r360, %f695;
	mov.b32 	%r384, %f747;
	add.f32 	%f801, %f927, %f927;
	and.b32  	%r188, %r187, -2147483648;
	and.b32  	%r195, %r194, -2147483648;
	and.b32  	%r206, %r205, -2147483648;
	and.b32  	%r213, %r212, -2147483648;
	and.b32  	%r224, %r223, -2147483648;
	and.b32  	%r231, %r230, -2147483648;
	and.b32  	%r242, %r241, -2147483648;
	and.b32  	%r249, %r248, -2147483648;
	and.b32  	%r267, %r266, -2147483648;
	and.b32  	%r290, %r289, -2147483648;
	or.b32  	%r313, %r312, 1056964608;
	or.b32  	%r345, %r344, 1056964608;
	and.b32  	%r361, %r360, -2147483648;
	and.b32  	%r385, %r384, -2147483648;
	mov.b32 	%r400, %f801;
	or.b32  	%r189, %r188, 1056964608;
	or.b32  	%r196, %r195, 1056964608;
	or.b32  	%r207, %r206, 1056964608;
	or.b32  	%r214, %r213, 1056964608;
	or.b32  	%r225, %r224, 1056964608;
	or.b32  	%r232, %r231, 1056964608;
	or.b32  	%r243, %r242, 1056964608;
	or.b32  	%r250, %r249, 1056964608;
	or.b32  	%r268, %r267, 1056964608;
	or.b32  	%r291, %r290, 1056964608;
	mov.b32 	%f590, %r313;
	mov.b32 	%f642, %r345;
	or.b32  	%r362, %r361, 1056964608;
	or.b32  	%r386, %r385, 1056964608;
	and.b32  	%r401, %r400, -2147483648;
	mov.b32 	%f194, %r189;
	mov.b32 	%f228, %r196;
	mov.b32 	%f263, %r207;
	mov.b32 	%f297, %r214;
	mov.b32 	%f332, %r225;
	mov.b32 	%f366, %r232;
	mov.b32 	%f401, %r243;
	mov.b32 	%f435, %r250;
	mov.b32 	%f484, %r268;
	mov.b32 	%f536, %r291;
	add.f32 	%f591, %f589, %f590;
	abs.f32 	%f593, %f589;
	add.f32 	%f643, %f641, %f642;
	abs.f32 	%f645, %f641;
	mov.b32 	%f696, %r362;
	mov.b32 	%f748, %r386;
	or.b32  	%r402, %r401, 1056964608;
	add.f32 	%f195, %f193, %f194;
	abs.f32 	%f197, %f193;
	add.f32 	%f229, %f227, %f228;
	abs.f32 	%f231, %f227;
	add.f32 	%f264, %f262, %f263;
	abs.f32 	%f266, %f262;
	add.f32 	%f298, %f296, %f297;
	abs.f32 	%f300, %f296;
	add.f32 	%f333, %f331, %f332;
	abs.f32 	%f335, %f331;
	add.f32 	%f367, %f365, %f366;
	abs.f32 	%f369, %f365;
	add.f32 	%f402, %f400, %f401;
	abs.f32 	%f404, %f400;
	add.f32 	%f436, %f434, %f435;
	abs.f32 	%f438, %f434;
	add.f32 	%f485, %f483, %f484;
	abs.f32 	%f487, %f483;
	add.f32 	%f537, %f535, %f536;
	abs.f32 	%f539, %f535;
	cvt.rzi.f32.f32 	%f592, %f591;
	setp.gt.f32 	%p114, %f593, 0f4B000000;
	cvt.rzi.f32.f32 	%f644, %f643;
	setp.gt.f32 	%p134, %f645, 0f4B000000;
	add.f32 	%f697, %f695, %f696;
	abs.f32 	%f699, %f695;
	add.f32 	%f749, %f747, %f748;
	abs.f32 	%f751, %f747;
	mov.b32 	%f802, %r402;
	cvt.rzi.f32.f32 	%f196, %f195;
	setp.gt.f32 	%p14, %f197, 0f4B000000;
	cvt.rzi.f32.f32 	%f230, %f229;
	setp.gt.f32 	%p20, %f231, 0f4B000000;
	cvt.rzi.f32.f32 	%f265, %f264;
	setp.gt.f32 	%p26, %f266, 0f4B000000;
	cvt.rzi.f32.f32 	%f299, %f298;
	setp.gt.f32 	%p32, %f300, 0f4B000000;
	cvt.rzi.f32.f32 	%f334, %f333;
	setp.gt.f32 	%p38, %f335, 0f4B000000;
	cvt.rzi.f32.f32 	%f368, %f367;
	setp.gt.f32 	%p44, %f369, 0f4B000000;
	cvt.rzi.f32.f32 	%f403, %f402;
	setp.gt.f32 	%p50, %f404, 0f4B000000;
	cvt.rzi.f32.f32 	%f437, %f436;
	setp.gt.f32 	%p56, %f438, 0f4B000000;
	cvt.rzi.f32.f32 	%f486, %f485;
	setp.gt.f32 	%p74, %f487, 0f4B000000;
	cvt.rzi.f32.f32 	%f538, %f537;
	setp.gt.f32 	%p94, %f539, 0f4B000000;
	selp.f32 	%f594, %f589, %f592, %p114;
	cvt.rzi.f32.f32 	%f595, %f589;
	setp.lt.f32 	%p115, %f593, 0f3F000000;
	selp.f32 	%f646, %f641, %f644, %p134;
	cvt.rzi.f32.f32 	%f647, %f641;
	setp.lt.f32 	%p135, %f645, 0f3F000000;
	cvt.rzi.f32.f32 	%f698, %f697;
	setp.gt.f32 	%p154, %f699, 0f4B000000;
	cvt.rzi.f32.f32 	%f750, %f749;
	setp.gt.f32 	%p174, %f751, 0f4B000000;
	add.f32 	%f803, %f801, %f802;
	abs.f32 	%f805, %f801;
	selp.f32 	%f198, %f193, %f196, %p14;
	cvt.rzi.f32.f32 	%f199, %f193;
	setp.lt.f32 	%p15, %f197, 0f3F000000;
	selp.f32 	%f232, %f227, %f230, %p20;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p21, %f231, 0f3F000000;
	selp.f32 	%f267, %f262, %f265, %p26;
	cvt.rzi.f32.f32 	%f268, %f262;
	setp.lt.f32 	%p27, %f266, 0f3F000000;
	selp.f32 	%f301, %f296, %f299, %p32;
	cvt.rzi.f32.f32 	%f302, %f296;
	setp.lt.f32 	%p33, %f300, 0f3F000000;
	selp.f32 	%f336, %f331, %f334, %p38;
	cvt.rzi.f32.f32 	%f337, %f331;
	setp.lt.f32 	%p39, %f335, 0f3F000000;
	selp.f32 	%f370, %f365, %f368, %p44;
	cvt.rzi.f32.f32 	%f371, %f365;
	setp.lt.f32 	%p45, %f369, 0f3F000000;
	selp.f32 	%f405, %f400, %f403, %p50;
	cvt.rzi.f32.f32 	%f406, %f400;
	setp.lt.f32 	%p51, %f404, 0f3F000000;
	selp.f32 	%f439, %f434, %f437, %p56;
	cvt.rzi.f32.f32 	%f440, %f434;
	setp.lt.f32 	%p57, %f438, 0f3F000000;
	selp.f32 	%f488, %f483, %f486, %p74;
	cvt.rzi.f32.f32 	%f489, %f483;
	setp.lt.f32 	%p75, %f487, 0f3F000000;
	selp.f32 	%f540, %f535, %f538, %p94;
	cvt.rzi.f32.f32 	%f541, %f535;
	setp.lt.f32 	%p95, %f539, 0f3F000000;
	selp.f32 	%f596, %f595, %f594, %p115;
	selp.f32 	%f648, %f647, %f646, %p135;
	selp.f32 	%f700, %f695, %f698, %p154;
	cvt.rzi.f32.f32 	%f701, %f695;
	setp.lt.f32 	%p155, %f699, 0f3F000000;
	selp.f32 	%f752, %f747, %f750, %p174;
	cvt.rzi.f32.f32 	%f753, %f747;
	setp.lt.f32 	%p175, %f751, 0f3F000000;
	cvt.rzi.f32.f32 	%f804, %f803;
	setp.gt.f32 	%p195, %f805, 0f4B000000;
	selp.f32 	%f200, %f199, %f198, %p15;
	selp.f32 	%f234, %f233, %f232, %p21;
	selp.f32 	%f269, %f268, %f267, %p27;
	selp.f32 	%f303, %f302, %f301, %p33;
	selp.f32 	%f338, %f337, %f336, %p39;
	selp.f32 	%f372, %f371, %f370, %p45;
	selp.f32 	%f407, %f406, %f405, %p51;
	selp.f32 	%f441, %f440, %f439, %p57;
	selp.f32 	%f490, %f489, %f488, %p75;
	selp.f32 	%f542, %f541, %f540, %p95;
	fma.rn.f32 	%f597, %f596, 0fBF000000, %f907;
	fma.rn.f32 	%f649, %f648, 0fBF000000, %f911;
	selp.f32 	%f702, %f701, %f700, %p155;
	selp.f32 	%f754, %f753, %f752, %p175;
	selp.f32 	%f806, %f801, %f804, %p195;
	cvt.rzi.f32.f32 	%f807, %f801;
	setp.lt.f32 	%p196, %f805, 0f3F000000;
	fma.rn.f32 	%f201, %f200, 0fBF000000, %f192;
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f226;
	fma.rn.f32 	%f270, %f269, 0fBF000000, %f261;
	fma.rn.f32 	%f304, %f303, 0fBF000000, %f295;
	fma.rn.f32 	%f339, %f338, 0fBF000000, %f330;
	fma.rn.f32 	%f373, %f372, 0fBF000000, %f364;
	fma.rn.f32 	%f408, %f407, 0fBF000000, %f399;
	fma.rn.f32 	%f442, %f441, 0fBF000000, %f433;
	fma.rn.f32 	%f491, %f490, 0fBF000000, %f899;
	fma.rn.f32 	%f543, %f542, 0fBF000000, %f903;
	mul.f32 	%f598, %f597, %f597;
	mul.f32 	%f650, %f649, %f649;
	fma.rn.f32 	%f703, %f702, 0fBF000000, %f915;
	fma.rn.f32 	%f755, %f754, 0fBF000000, %f919;
	selp.f32 	%f808, %f807, %f806, %p196;
	mul.f32 	%f202, %f201, %f201;
	mul.f32 	%f236, %f235, %f235;
	mul.f32 	%f271, %f270, %f270;
	mul.f32 	%f305, %f304, %f304;
	mul.f32 	%f340, %f339, %f339;
	mul.f32 	%f374, %f373, %f373;
	mul.f32 	%f409, %f408, %f408;
	mul.f32 	%f443, %f442, %f442;
	mul.f32 	%f492, %f491, %f491;
	mul.f32 	%f544, %f543, %f543;
	fma.rn.f32 	%f599, %f598, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f600, %f598, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f651, %f650, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f652, %f650, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f704, %f703, %f703;
	mul.f32 	%f756, %f755, %f755;
	fma.rn.f32 	%f809, %f808, 0fBF000000, %f927;
	cvt.rzi.s32.f32 	%r190, %f200;
	fma.rn.f32 	%f203, %f202, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f204, %f202, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r197, %f234;
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r208, %f269;
	fma.rn.f32 	%f272, %f271, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f273, %f271, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r215, %f303;
	fma.rn.f32 	%f306, %f305, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f307, %f305, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r226, %f338;
	fma.rn.f32 	%f341, %f340, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f342, %f340, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r233, %f372;
	fma.rn.f32 	%f375, %f374, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f376, %f374, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r244, %f407;
	fma.rn.f32 	%f410, %f409, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f411, %f409, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r251, %f441;
	fma.rn.f32 	%f444, %f443, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f445, %f443, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f493, %f492, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f494, %f492, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f545, %f544, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f546, %f544, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r314, %f596;
	fma.rn.f32 	%f601, %f599, %f598, 0fC0A55DF6;
	fma.rn.f32 	%f602, %f600, %f598, 0f4081E0CF;
	fma.rn.f32 	%f603, %f598, %f597, 0f00000000;
	cvt.rzi.s32.f32 	%r346, %f648;
	fma.rn.f32 	%f653, %f651, %f650, 0fC0A55DF6;
	fma.rn.f32 	%f654, %f652, %f650, 0f4081E0CF;
	fma.rn.f32 	%f655, %f650, %f649, 0f00000000;
	fma.rn.f32 	%f705, %f704, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f706, %f704, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f757, %f756, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f758, %f756, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f810, %f809, %f809;
	add.s32 	%r191, %r190, 1;
	fma.rn.f32 	%f205, %f203, %f202, 0fC0A55DF6;
	fma.rn.f32 	%f206, %f204, %f202, 0f4081E0CF;
	fma.rn.f32 	%f207, %f202, %f201, 0f00000000;
	add.s32 	%r198, %r197, 1;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	add.s32 	%r209, %r208, 1;
	fma.rn.f32 	%f274, %f272, %f271, 0fC0A55DF6;
	fma.rn.f32 	%f275, %f273, %f271, 0f4081E0CF;
	fma.rn.f32 	%f276, %f271, %f270, 0f00000000;
	add.s32 	%r216, %r215, 1;
	fma.rn.f32 	%f308, %f306, %f305, 0fC0A55DF6;
	fma.rn.f32 	%f309, %f307, %f305, 0f4081E0CF;
	fma.rn.f32 	%f310, %f305, %f304, 0f00000000;
	add.s32 	%r227, %r226, 1;
	fma.rn.f32 	%f343, %f341, %f340, 0fC0A55DF6;
	fma.rn.f32 	%f344, %f342, %f340, 0f4081E0CF;
	fma.rn.f32 	%f345, %f340, %f339, 0f00000000;
	add.s32 	%r234, %r233, 1;
	fma.rn.f32 	%f377, %f375, %f374, 0fC0A55DF6;
	fma.rn.f32 	%f378, %f376, %f374, 0f4081E0CF;
	fma.rn.f32 	%f379, %f374, %f373, 0f00000000;
	add.s32 	%r245, %r244, 1;
	fma.rn.f32 	%f412, %f410, %f409, 0fC0A55DF6;
	fma.rn.f32 	%f413, %f411, %f409, 0f4081E0CF;
	fma.rn.f32 	%f414, %f409, %f408, 0f00000000;
	add.s32 	%r252, %r251, 1;
	fma.rn.f32 	%f446, %f444, %f443, 0fC0A55DF6;
	fma.rn.f32 	%f447, %f445, %f443, 0f4081E0CF;
	fma.rn.f32 	%f448, %f443, %f442, 0f00000000;
	cvt.rzi.s32.f32 	%r269, %f490;
	fma.rn.f32 	%f495, %f493, %f492, 0fC0A55DF6;
	fma.rn.f32 	%f496, %f494, %f492, 0f4081E0CF;
	fma.rn.f32 	%f497, %f492, %f491, 0f00000000;
	cvt.rzi.s32.f32 	%r292, %f542;
	fma.rn.f32 	%f547, %f545, %f544, 0fC0A55DF6;
	fma.rn.f32 	%f548, %f546, %f544, 0f4081E0CF;
	fma.rn.f32 	%f549, %f544, %f543, 0f00000000;
	fma.rn.f32 	%f604, %f602, %f598, 0fC09DE9E6;
	fma.rn.f32 	%f605, %f601, %f603, 0f00000000;
	and.b32  	%r315, %r314, 1;
	fma.rn.f32 	%f656, %f654, %f650, 0fC09DE9E6;
	fma.rn.f32 	%f657, %f653, %f655, 0f00000000;
	and.b32  	%r347, %r346, 1;
	cvt.rzi.s32.f32 	%r363, %f702;
	fma.rn.f32 	%f707, %f705, %f704, 0fC0A55DF6;
	fma.rn.f32 	%f708, %f706, %f704, 0f4081E0CF;
	fma.rn.f32 	%f709, %f704, %f703, 0f00000000;
	cvt.rzi.s32.f32 	%r387, %f754;
	fma.rn.f32 	%f759, %f757, %f756, 0fC0A55DF6;
	fma.rn.f32 	%f760, %f758, %f756, 0f4081E0CF;
	fma.rn.f32 	%f761, %f756, %f755, 0f00000000;
	fma.rn.f32 	%f811, %f810, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f812, %f810, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f208, %f206, %f202, 0fC09DE9E6;
	fma.rn.f32 	%f209, %f205, %f207, 0f00000000;
	and.b32  	%r192, %r191, 1;
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r199, %r198, 1;
	fma.rn.f32 	%f277, %f275, %f271, 0fC09DE9E6;
	fma.rn.f32 	%f278, %f274, %f276, 0f00000000;
	and.b32  	%r210, %r209, 1;
	fma.rn.f32 	%f311, %f309, %f305, 0fC09DE9E6;
	fma.rn.f32 	%f312, %f308, %f310, 0f00000000;
	and.b32  	%r217, %r216, 1;
	fma.rn.f32 	%f346, %f344, %f340, 0fC09DE9E6;
	fma.rn.f32 	%f347, %f343, %f345, 0f00000000;
	and.b32  	%r228, %r227, 1;
	fma.rn.f32 	%f380, %f378, %f374, 0fC09DE9E6;
	fma.rn.f32 	%f381, %f377, %f379, 0f00000000;
	and.b32  	%r235, %r234, 1;
	fma.rn.f32 	%f415, %f413, %f409, 0fC09DE9E6;
	fma.rn.f32 	%f416, %f412, %f414, 0f00000000;
	and.b32  	%r246, %r245, 1;
	fma.rn.f32 	%f449, %f447, %f443, 0fC09DE9E6;
	fma.rn.f32 	%f450, %f446, %f448, 0f00000000;
	and.b32  	%r253, %r252, 1;
	fma.rn.f32 	%f498, %f496, %f492, 0fC09DE9E6;
	fma.rn.f32 	%f499, %f495, %f497, 0f00000000;
	and.b32  	%r270, %r269, 1;
	fma.rn.f32 	%f550, %f548, %f544, 0fC09DE9E6;
	fma.rn.f32 	%f551, %f547, %f549, 0f00000000;
	and.b32  	%r293, %r292, 1;
	fma.rn.f32 	%f606, %f604, %f598, 0f3F800000;
	fma.rn.f32 	%f607, %f597, 0f40490FDB, %f605;
	setp.eq.b32 	%p116, %r315, 1;
	fma.rn.f32 	%f658, %f656, %f650, 0f3F800000;
	fma.rn.f32 	%f659, %f649, 0f40490FDB, %f657;
	setp.eq.b32 	%p136, %r347, 1;
	fma.rn.f32 	%f710, %f708, %f704, 0fC09DE9E6;
	fma.rn.f32 	%f711, %f707, %f709, 0f00000000;
	and.b32  	%r364, %r363, 1;
	fma.rn.f32 	%f762, %f760, %f756, 0fC09DE9E6;
	fma.rn.f32 	%f763, %f759, %f761, 0f00000000;
	and.b32  	%r388, %r387, 1;
	cvt.rzi.s32.f32 	%r403, %f808;
	fma.rn.f32 	%f813, %f811, %f810, 0fC0A55DF6;
	fma.rn.f32 	%f814, %f812, %f810, 0f4081E0CF;
	fma.rn.f32 	%f815, %f810, %f809, 0f00000000;
	and.b32  	%r176, %r108, 8;
	shl.b32 	%r177, %r2, 2;
	and.b32  	%r178, %r1, 18;
	fma.rn.f32 	%f210, %f208, %f202, 0f3F800000;
	fma.rn.f32 	%f211, %f201, 0f40490FDB, %f209;
	setp.eq.b32 	%p16, %r192, 1;
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p22, %r199, 1;
	fma.rn.f32 	%f279, %f277, %f271, 0f3F800000;
	fma.rn.f32 	%f280, %f270, 0f40490FDB, %f278;
	setp.eq.b32 	%p28, %r210, 1;
	fma.rn.f32 	%f313, %f311, %f305, 0f3F800000;
	fma.rn.f32 	%f314, %f304, 0f40490FDB, %f312;
	setp.eq.b32 	%p34, %r217, 1;
	fma.rn.f32 	%f348, %f346, %f340, 0f3F800000;
	fma.rn.f32 	%f349, %f339, 0f40490FDB, %f347;
	setp.eq.b32 	%p40, %r228, 1;
	fma.rn.f32 	%f382, %f380, %f374, 0f3F800000;
	fma.rn.f32 	%f383, %f373, 0f40490FDB, %f381;
	setp.eq.b32 	%p46, %r235, 1;
	fma.rn.f32 	%f417, %f415, %f409, 0f3F800000;
	fma.rn.f32 	%f418, %f408, 0f40490FDB, %f416;
	setp.eq.b32 	%p52, %r246, 1;
	fma.rn.f32 	%f451, %f449, %f443, 0f3F800000;
	fma.rn.f32 	%f452, %f442, 0f40490FDB, %f450;
	setp.eq.b32 	%p58, %r253, 1;
	fma.rn.f32 	%f500, %f498, %f492, 0f3F800000;
	fma.rn.f32 	%f501, %f491, 0f40490FDB, %f499;
	setp.eq.b32 	%p76, %r270, 1;
	fma.rn.f32 	%f552, %f550, %f544, 0f3F800000;
	fma.rn.f32 	%f553, %f543, 0f40490FDB, %f551;
	setp.eq.b32 	%p96, %r293, 1;
	selp.f32 	%f608, %f606, %f607, %p116;
	and.b32  	%r316, %r314, 2;
	selp.f32 	%f660, %f658, %f659, %p136;
	and.b32  	%r348, %r346, 2;
	fma.rn.f32 	%f712, %f710, %f704, 0f3F800000;
	fma.rn.f32 	%f713, %f703, 0f40490FDB, %f711;
	setp.eq.b32 	%p156, %r364, 1;
	fma.rn.f32 	%f764, %f762, %f756, 0f3F800000;
	fma.rn.f32 	%f765, %f755, 0f40490FDB, %f763;
	setp.eq.b32 	%p176, %r388, 1;
	fma.rn.f32 	%f816, %f814, %f810, 0fC09DE9E6;
	fma.rn.f32 	%f817, %f813, %f815, 0f00000000;
	and.b32  	%r404, %r403, 1;
	and.b32  	%r109, %r177, 480;
	shl.b32 	%r110, %r1, 2;
	or.b32  	%r112, %r178, %r176;
	selp.f32 	%f212, %f210, %f211, %p16;
	and.b32  	%r193, %r191, 2;
	mov.f32 	%f213, 0f00000000;
	selp.f32 	%f246, %f244, %f245, %p22;
	and.b32  	%r200, %r198, 2;
	selp.f32 	%f281, %f279, %f280, %p28;
	and.b32  	%r211, %r209, 2;
	selp.f32 	%f315, %f313, %f314, %p34;
	and.b32  	%r218, %r216, 2;
	selp.f32 	%f350, %f348, %f349, %p40;
	and.b32  	%r229, %r227, 2;
	selp.f32 	%f384, %f382, %f383, %p46;
	and.b32  	%r236, %r234, 2;
	selp.f32 	%f419, %f417, %f418, %p52;
	and.b32  	%r247, %r245, 2;
	selp.f32 	%f453, %f451, %f452, %p58;
	and.b32  	%r254, %r252, 2;
	selp.f32 	%f502, %f500, %f501, %p76;
	and.b32  	%r271, %r269, 2;
	selp.f32 	%f554, %f552, %f553, %p96;
	and.b32  	%r294, %r292, 2;
	setp.eq.s32 	%p117, %r316, 0;
	neg.f32 	%f610, %f608;
	add.s32 	%r317, %r314, 1;
	cvt.rzi.f32.f32 	%f615, %f907;
	setp.eq.s32 	%p137, %r348, 0;
	neg.f32 	%f662, %f660;
	add.s32 	%r349, %r346, 1;
	cvt.rzi.f32.f32 	%f667, %f911;
	selp.f32 	%f714, %f712, %f713, %p156;
	and.b32  	%r365, %r363, 2;
	selp.f32 	%f766, %f764, %f765, %p176;
	and.b32  	%r389, %r387, 2;
	fma.rn.f32 	%f818, %f816, %f810, 0f3F800000;
	fma.rn.f32 	%f819, %f809, 0f40490FDB, %f817;
	setp.eq.b32 	%p197, %r404, 1;
	and.b32  	%r111, %r110, 4;
	or.b32  	%r179, %r112, %r109;
	setp.eq.s32 	%p17, %r193, 0;
	sub.f32 	%f214, %f213, %f212;
	setp.eq.s32 	%p23, %r200, 0;
	sub.f32 	%f248, %f213, %f246;
	setp.eq.s32 	%p29, %r211, 0;
	sub.f32 	%f283, %f213, %f281;
	setp.eq.s32 	%p35, %r218, 0;
	sub.f32 	%f317, %f213, %f315;
	setp.eq.s32 	%p41, %r229, 0;
	sub.f32 	%f352, %f213, %f350;
	setp.eq.s32 	%p47, %r236, 0;
	sub.f32 	%f386, %f213, %f384;
	setp.eq.s32 	%p53, %r247, 0;
	sub.f32 	%f421, %f213, %f419;
	setp.eq.s32 	%p59, %r254, 0;
	sub.f32 	%f455, %f213, %f453;
	setp.eq.s32 	%p77, %r271, 0;
	neg.f32 	%f504, %f502;
	add.s32 	%r272, %r269, 1;
	cvt.rzi.f32.f32 	%f509, %f899;
	setp.eq.s32 	%p97, %r294, 0;
	neg.f32 	%f556, %f554;
	add.s32 	%r295, %r292, 1;
	cvt.rzi.f32.f32 	%f561, %f903;
	selp.f32 	%f609, %f607, %f606, %p116;
	selp.f32 	%f611, %f608, %f610, %p117;
	and.b32  	%r318, %r317, 2;
	setp.eq.f32 	%p119, %f615, %f907;
	mul.f32 	%f616, %f907, 0f00000000;
	selp.f32 	%f661, %f659, %f658, %p136;
	selp.f32 	%f663, %f660, %f662, %p137;
	and.b32  	%r350, %r349, 2;
	setp.eq.f32 	%p139, %f667, %f911;
	mul.f32 	%f668, %f911, 0f00000000;
	setp.eq.s32 	%p157, %r365, 0;
	neg.f32 	%f716, %f714;
	add.s32 	%r366, %r363, 1;
	cvt.rzi.f32.f32 	%f721, %f915;
	setp.eq.s32 	%p177, %r389, 0;
	neg.f32 	%f768, %f766;
	add.s32 	%r390, %r387, 1;
	cvt.rzi.f32.f32 	%f773, %f919;
	selp.f32 	%f820, %f818, %f819, %p197;
	and.b32  	%r405, %r403, 2;
	or.b32  	%r180, %r179, %r111;
	selp.f32 	%f215, %f212, %f214, %p17;
	selp.f32 	%f249, %f246, %f248, %p23;
	selp.f32 	%f284, %f281, %f283, %p29;
	selp.f32 	%f318, %f315, %f317, %p35;
	selp.f32 	%f353, %f350, %f352, %p41;
	selp.f32 	%f387, %f384, %f386, %p47;
	selp.f32 	%f422, %f419, %f421, %p53;
	selp.f32 	%f456, %f453, %f455, %p59;
	selp.f32 	%f503, %f501, %f500, %p76;
	selp.f32 	%f505, %f502, %f504, %p77;
	and.b32  	%r273, %r272, 2;
	setp.eq.f32 	%p79, %f509, %f899;
	mul.f32 	%f510, %f899, 0f00000000;
	selp.f32 	%f555, %f553, %f552, %p96;
	selp.f32 	%f557, %f554, %f556, %p97;
	and.b32  	%r296, %r295, 2;
	setp.eq.f32 	%p99, %f561, %f903;
	mul.f32 	%f562, %f903, 0f00000000;
	setp.eq.s32 	%p118, %r318, 0;
	sub.f32 	%f613, %f213, %f609;
	selp.f32 	%f88, %f616, %f611, %p119;
	abs.f32 	%f617, %f907;
	setp.eq.s32 	%p138, %r350, 0;
	sub.f32 	%f665, %f213, %f661;
	selp.f32 	%f669, %f668, %f663, %p139;
	abs.f32 	%f670, %f911;
	selp.f32 	%f715, %f713, %f712, %p156;
	selp.f32 	%f717, %f714, %f716, %p157;
	and.b32  	%r367, %r366, 2;
	setp.eq.f32 	%p159, %f721, %f915;
	mul.f32 	%f722, %f915, 0f00000000;
	selp.f32 	%f767, %f765, %f764, %p176;
	selp.f32 	%f769, %f766, %f768, %p177;
	and.b32  	%r391, %r390, 2;
	setp.eq.f32 	%p179, %f773, %f919;
	mul.f32 	%f774, %f919, 0f00000000;
	setp.eq.s32 	%p198, %r405, 0;
	neg.f32 	%f822, %f820;
	add.s32 	%r406, %r403, 1;
	cvt.rzi.f32.f32 	%f827, %f927;
	shr.u32 	%r181, %r180, 1;
	mul.f32 	%f161, %f215, %f215;
	mul.f32 	%f4, %f249, %f249;
	mul.f32 	%f8, %f284, %f284;
	mul.f32 	%f13, %f318, %f318;
	mul.f32 	%f17, %f353, %f353;
	mul.f32 	%f22, %f387, %f387;
	mul.f32 	%f26, %f422, %f422;
	mul.f32 	%f31, %f456, %f456;
	setp.eq.s32 	%p78, %r273, 0;
	sub.f32 	%f507, %f213, %f503;
	selp.f32 	%f52, %f510, %f505, %p79;
	abs.f32 	%f511, %f899;
	setp.eq.s32 	%p98, %r296, 0;
	sub.f32 	%f559, %f213, %f555;
	selp.f32 	%f563, %f562, %f557, %p99;
	abs.f32 	%f564, %f903;
	selp.f32 	%f614, %f609, %f613, %p118;
	setp.gt.f32 	%p120, %f617, 0f4B800000;
	add.f32 	%f618, %f88, 0f3F800000;
	selp.f32 	%f666, %f661, %f665, %p138;
	setp.gt.f32 	%p140, %f670, 0f4B800000;
	add.f32 	%f671, %f669, 0f3F800000;
	setp.eq.s32 	%p158, %r367, 0;
	sub.f32 	%f719, %f213, %f715;
	selp.f32 	%f124, %f722, %f717, %p159;
	abs.f32 	%f723, %f915;
	setp.eq.s32 	%p178, %r391, 0;
	sub.f32 	%f771, %f213, %f767;
	selp.f32 	%f775, %f774, %f769, %p179;
	abs.f32 	%f776, %f919;
	selp.f32 	%f821, %f819, %f818, %p197;
	selp.f32 	%f823, %f820, %f822, %p198;
	and.b32  	%r407, %r406, 2;
	setp.eq.f32 	%p200, %f827, %f927;
	mul.f32 	%f828, %f927, 0f00000000;
	ld.param.u64 	%rd1, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	mul.wide.u32 	%rd38, %r181, 4;
	mul.f32 	%f219, %f161, 0f3C8A83B8;
	mul.f32 	%f253, %f4, 0f3C8A83B8;
	mul.f32 	%f288, %f8, 0f3C8A83B8;
	mul.f32 	%f322, %f13, 0f3C8A83B8;
	mul.f32 	%f357, %f17, 0f3C8A83B8;
	mul.f32 	%f391, %f22, 0f3C8A83B8;
	mul.f32 	%f426, %f26, 0f3C8A83B8;
	mul.f32 	%f459, %f31, 0f3C8A83B8;
	selp.f32 	%f508, %f503, %f507, %p78;
	setp.gt.f32 	%p80, %f511, 0f4B800000;
	add.f32 	%f512, %f52, 0f3F800000;
	selp.f32 	%f560, %f555, %f559, %p98;
	setp.gt.f32 	%p100, %f564, 0f4B800000;
	add.f32 	%f565, %f563, 0f3F800000;
	selp.f32 	%f89, %f618, %f614, %p120;
	selp.f32 	%f672, %f671, %f666, %p140;
	selp.f32 	%f720, %f715, %f719, %p158;
	setp.gt.f32 	%p160, %f723, 0f4B800000;
	add.f32 	%f724, %f124, 0f3F800000;
	selp.f32 	%f772, %f767, %f771, %p178;
	setp.gt.f32 	%p180, %f776, 0f4B800000;
	add.f32 	%f777, %f775, 0f3F800000;
	and.b32  	%r74, %r31, 1;
	setp.eq.s32 	%p199, %r407, 0;
	sub.f32 	%f825, %f213, %f821;
	selp.f32 	%f829, %f828, %f823, %p200;
	abs.f32 	%f830, %f927;
	add.s64 	%rd39, %rd1, %rd38;
	mul.f32 	%f3, %f219, %f889;
	mul.f32 	%f254, %f253, %f890;
	mul.f32 	%f12, %f288, %f891;
	mul.f32 	%f323, %f322, %f892;
	mul.f32 	%f21, %f357, %f893;
	mul.f32 	%f392, %f391, %f894;
	mul.f32 	%f30, %f426, %f895;
	mul.f32 	%f460, %f459, %f896;
	selp.f32 	%f53, %f512, %f508, %p80;
	selp.f32 	%f566, %f565, %f560, %p100;
	mov.b32 	%r333, %f672;
	mov.b32 	%r332, %f89;
	mov.b32 	%r339, %f669;
	mov.b32 	%r338, %f88;
	selp.f32 	%f125, %f724, %f720, %p160;
	selp.f32 	%f778, %f777, %f772, %p180;
	setp.eq.s32 	%p194, %r74, %r116;
	selp.f32 	%f826, %f821, %f825, %p199;
	setp.gt.f32 	%p201, %f830, 0f4B800000;
	add.f32 	%f831, %f829, 0f3F800000;
	ld.param.u64 	%rd2, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	ld.param.u64 	%rd3, [_Z6upchan5Int32S_S_S_13CuDeviceArrayI9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	ld.global.u32 	%r113, [%rd39];
	mov.b32 	%r203, %f254;
	mov.b32 	%r202, %f3;
	mov.b32 	%r221, %f323;
	mov.b32 	%r220, %f12;
	mov.b32 	%r239, %f392;
	mov.b32 	%r238, %f21;
	mov.b32 	%r257, %f460;
	mov.b32 	%r256, %f30;
	mov.b32 	%r285, %f566;
	mov.b32 	%r284, %f53;
	mov.b32 	%r288, %f563;
	mov.b32 	%r287, %f52;
	xor.b32  	%r336, %r339, -2147483648;
	xor.b32  	%r335, %r338, -2147483648;
	mov.b32 	%r380, %f778;
	mov.b32 	%r379, %f125;
	mov.b32 	%r383, %f775;
	mov.b32 	%r382, %f124;
	selp.f32 	%f832, %f831, %f826, %p201;
	selp.f32 	%f178, 0f3F800000, 0f00000000, %p194;
	// begin inline asm
	cvt.rn.f16x2.f32 %r201, %r203, %r202;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r219, %r221, %r220;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r237, %r239, %r238;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r255, %r257, %r256;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r283, %r285, %r284;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r286, %r288, %r287;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r331, %r333, %r332;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r334, %r336, %r335;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r337, %r339, %r338;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r340, %r333, %r332;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r378, %r380, %r379;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r381, %r383, %r382;
	// end inline asm
	mul.f32 	%f179, %f832, %f178;
	mul.f32 	%f180, %f829, %f178;
	add.f32 	%f855, %f923, %f923;
	mov.b32 	%r430, %f855;
	and.b32  	%r431, %r430, -2147483648;
	or.b32  	%r432, %r431, 1056964608;
	mov.b32 	%f856, %r432;
	add.f32 	%f857, %f855, %f856;
	cvt.rzi.f32.f32 	%f858, %f857;
	abs.f32 	%f859, %f855;
	setp.gt.f32 	%p215, %f859, 0f4B000000;
	selp.f32 	%f860, %f855, %f858, %p215;
	cvt.rzi.f32.f32 	%f861, %f855;
	setp.lt.f32 	%p216, %f859, 0f3F000000;
	selp.f32 	%f862, %f861, %f860, %p216;
	cvt.rzi.s32.f32 	%r433, %f862;
	fma.rn.f32 	%f863, %f862, 0fBF000000, %f923;
	mul.f32 	%f864, %f863, %f863;
	fma.rn.f32 	%f865, %f864, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f866, %f864, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f867, %f865, %f864, 0fC0A55DF6;
	fma.rn.f32 	%f868, %f866, %f864, 0f4081E0CF;
	fma.rn.f32 	%f869, %f864, %f863, 0f00000000;
	fma.rn.f32 	%f870, %f868, %f864, 0fC09DE9E6;
	fma.rn.f32 	%f871, %f867, %f869, 0f00000000;
	fma.rn.f32 	%f872, %f870, %f864, 0f3F800000;
	fma.rn.f32 	%f873, %f863, 0f40490FDB, %f871;
	and.b32  	%r434, %r433, 1;
	setp.eq.b32 	%p217, %r434, 1;
	selp.f32 	%f874, %f872, %f873, %p217;
	selp.f32 	%f875, %f873, %f872, %p217;
	and.b32  	%r435, %r433, 2;
	setp.eq.s32 	%p218, %r435, 0;
	neg.f32 	%f876, %f874;
	selp.f32 	%f877, %f874, %f876, %p218;
	add.s32 	%r436, %r433, 1;
	and.b32  	%r437, %r436, 2;
	setp.eq.s32 	%p219, %r437, 0;
	sub.f32 	%f879, %f213, %f875;
	selp.f32 	%f880, %f875, %f879, %p219;
	cvt.rzi.f32.f32 	%f881, %f923;
	setp.eq.f32 	%p220, %f881, %f923;
	mul.f32 	%f882, %f923, 0f00000000;
	selp.f32 	%f883, %f882, %f877, %p220;
	abs.f32 	%f884, %f923;
	setp.gt.f32 	%p221, %f884, 0f4B800000;
	add.f32 	%f885, %f883, 0f3F800000;
	selp.f32 	%f886, %f885, %f880, %p221;
	mul.f32 	%f887, %f886, %f178;
	mul.f32 	%f888, %f883, %f178;
	mov.b32 	%r420, %f887;
	mov.b32 	%r419, %f179;
	// begin inline asm
	cvt.rn.f16x2.f32 %r418, %r420, %r419;
	// end inline asm
	mov.b32 	%r426, %f888;
	xor.b32  	%r423, %r426, -2147483648;
	mov.b32 	%r425, %f180;
	xor.b32  	%r422, %r425, -2147483648;
	// begin inline asm
	cvt.rn.f16x2.f32 %r421, %r423, %r422;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r424, %r426, %r425;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r427, %r420, %r419;
	// end inline asm
	shl.b32 	%r439, %r162, 12;
	shl.b32 	%r440, %r2, 5;
	and.b32  	%r441, %r110, 28;
	shl.b32 	%r442, %r3, 2;
	and.b32  	%r88, %r442, 32;
	and.b32  	%r443, %r108, 16;
	or.b32  	%r89, %r88, %r443;
	and.b32  	%r90, %r3, 7;
	and.b32  	%r91, %r114, 8;
	and.b32  	%r444, %r440, 224;
	or.b32  	%r445, %r444, %r441;
	or.b32  	%r92, %r445, %r439;
	and.b32  	%r93, %r1, 8;
	shl.b32 	%r446, %r1, 4;
	or.b32  	%r447, %r93, %r446;
	shr.u32 	%r448, %r447, 2;
	and.b32  	%r449, %r448, 30;
	shl.b32 	%r450, %r1, 3;
	and.b32  	%r451, %r450, 64;
	shl.b32 	%r452, %r3, 1;
	or.b32  	%r453, %r451, %r452;
	shr.u32 	%r454, %r453, 2;
	and.b32  	%r455, %r110, 12;
	and.b32  	%r456, %r114, 2;
	or.b32  	%r94, %r456, %r455;
	and.b32  	%r457, %r4, 32;
	or.b32  	%r95, %r454, %r457;
	or.b32  	%r96, %r95, 8;
	or.b32  	%r458, %r112, %r111;
	shr.u32 	%r459, %r458, 1;
	mul.lo.s32 	%r460, %r459, 65;
	add.s32 	%r461, %r460, %r95;
	add.s32 	%r462, %r460, %r96;
	shl.b32 	%r463, %r164, 17;
	add.s32 	%r464, %r463, -393216;
	and.b32  	%r465, %r442, 28;
	or.b32  	%r466, %r465, %r31;
	or.b32  	%r467, %r466, %r109;
	shl.b32 	%r468, %r467, 8;
	or.b32  	%r97, %r445, %r468;
	cvt.s64.s32 	%rd5, %r464;
	shr.u32 	%r469, %r3, 3;
	or.b32  	%r470, %r469, 2;
	or.b32  	%r471, %r469, 4;
	or.b32  	%r472, %r469, 6;
	bfe.s32 	%r473, %r3, 2, 1;
	and.b32  	%r474, %r3, 4;
	setp.eq.s32 	%p223, %r474, 0;
	and.b32  	%r475, %r473, 130;
	and.b32  	%r476, %r3, 1;
	neg.s32 	%r477, %r476;
	setp.eq.b32 	%p224, %r476, 1;
	and.b32  	%r478, %r477, 520;
	bfe.s32 	%r479, %r3, 1, 1;
	and.b32  	%r480, %r3, 2;
	setp.eq.s32 	%p225, %r480, 0;
	and.b32  	%r481, %r479, 260;
	mul.lo.s32 	%r482, %r118, 65;
	mul.lo.s32 	%r483, %r469, 1057;
	add.s32 	%r484, %r478, %r449;
	add.s32 	%r485, %r484, %r475;
	add.s32 	%r486, %r485, %r481;
	add.s32 	%r487, %r486, %r482;
	add.s32 	%r488, %r487, %r483;
	mul.wide.u32 	%rd40, %r488, 4;
	mov.u64 	%rd41, shmem;
	add.s64 	%rd6, %rd41, %rd40;
	cvt.u64.u32 	%rd42, %r483;
	cvt.u64.u32 	%rd43, %r482;
	selp.b64 	%rd44, 0, 260, %p225;
	selp.b64 	%rd45, 0, 130, %p223;
	selp.b64 	%rd46, 520, 0, %p224;
	cvt.u64.u32 	%rd47, %r449;
	add.s64 	%rd48, %rd47, %rd46;
	add.s64 	%rd49, %rd48, %rd45;
	add.s64 	%rd50, %rd49, %rd44;
	add.s64 	%rd51, %rd50, %rd43;
	add.s64 	%rd52, %rd51, %rd42;
	shl.b64 	%rd53, %rd52, 2;
	add.s64 	%rd7, %rd41, %rd53;
	mul.lo.s32 	%r489, %r470, 1057;
	add.s32 	%r490, %r487, %r489;
	mul.wide.u32 	%rd54, %r490, 4;
	add.s64 	%rd8, %rd41, %rd54;
	cvt.u64.u32 	%rd55, %r489;
	add.s64 	%rd56, %rd51, %rd55;
	shl.b64 	%rd57, %rd56, 2;
	add.s64 	%rd9, %rd41, %rd57;
	mul.lo.s32 	%r491, %r471, 1057;
	add.s32 	%r492, %r487, %r491;
	mul.wide.u32 	%rd58, %r492, 4;
	add.s64 	%rd10, %rd41, %rd58;
	cvt.u64.u32 	%rd59, %r491;
	add.s64 	%rd60, %rd51, %rd59;
	shl.b64 	%rd61, %rd60, 2;
	add.s64 	%rd11, %rd41, %rd61;
	mul.lo.s32 	%r493, %r472, 1057;
	add.s32 	%r494, %r487, %r493;
	mul.wide.u32 	%rd62, %r494, 4;
	add.s64 	%rd12, %rd41, %rd62;
	cvt.u64.u32 	%rd63, %r493;
	add.s64 	%rd64, %rd51, %rd63;
	shl.b64 	%rd65, %rd64, 2;
	add.s64 	%rd13, %rd41, %rd65;
	and.b32  	%r495, %r452, 14;
	or.b32  	%r496, %r495, %r118;
	mul.lo.s32 	%r497, %r496, 65;
	add.s32 	%r498, %r497, %r449;
	add.s32 	%r499, %r498, %r483;
	mul.wide.u32 	%rd66, %r499, 4;
	add.s64 	%rd14, %rd41, %rd66;
	cvt.u64.u32 	%rd67, %r497;
	add.s64 	%rd68, %rd47, %rd67;
	add.s64 	%rd69, %rd68, %rd42;
	shl.b64 	%rd70, %rd69, 2;
	add.s64 	%rd15, %rd41, %rd70;
	add.s32 	%r500, %r498, %r489;
	mul.wide.u32 	%rd71, %r500, 4;
	add.s64 	%rd16, %rd41, %rd71;
	add.s64 	%rd72, %rd68, %rd55;
	shl.b64 	%rd73, %rd72, 2;
	add.s64 	%rd17, %rd41, %rd73;
	add.s32 	%r501, %r498, %r491;
	mul.wide.u32 	%rd74, %r501, 4;
	add.s64 	%rd18, %rd41, %rd74;
	add.s64 	%rd75, %rd68, %rd59;
	shl.b64 	%rd76, %rd75, 2;
	add.s64 	%rd19, %rd41, %rd76;
	add.s32 	%r502, %r498, %r493;
	mul.wide.u32 	%rd77, %r502, 4;
	add.s64 	%rd20, %rd41, %rd77;
	add.s64 	%rd78, %rd68, %rd63;
	shl.b64 	%rd79, %rd78, 2;
	add.s64 	%rd21, %rd41, %rd79;
	mul.wide.u32 	%rd80, %r462, 4;
	add.s64 	%rd22, %rd41, %rd80;
	mul.wide.u32 	%rd81, %r461, 4;
	add.s64 	%rd23, %rd41, %rd81;
	setp.eq.s32 	%p226, %r93, 0;
	mov.u16 	%rs288, 25600;
	mov.u16 	%rs236, 21504;
	mov.u16 	%rs296, 18432;
	mov.u16 	%rs274, -14592;
	setp.gt.u32 	%p240, %r3, 7;
	mov.u32 	%r2576, %r2560;
	mov.u32 	%r2577, %r2560;
	mov.u32 	%r2578, %r2560;
	mov.u32 	%r2579, %r2560;
	mov.u32 	%r2586, %r2560;
	mov.u32 	%r2587, %r2560;
	mov.u32 	%r104, %r2560;
	bra.uni 	$L__BB0_128;
$L__BB0_132:                            // %pass10166
                                        //   in Loop: Header=BB0_128 Depth=1
	or.b32  	%r2554, %r2593, %r97;
	or.b32  	%r2555, %r2554, 524288;
	cvt.s64.s32 	%rd107, %r2555;
	add.s64 	%rd108, %rd107, %rd5;
	shr.u64 	%rd109, %rd108, 35;
	add.s64 	%rd110, %rd108, %rd109;
	shr.s64 	%rd111, %rd110, 29;
	setp.lt.s64 	%p246, %rd108, 0;
	and.b64  	%rd112, %rd110, -536870912;
	setp.ne.s64 	%p247, %rd112, %rd108;
	and.pred  	%p248, %p246, %p247;
	selp.u64 	%rd113, 1, 0, %p248;
	sub.s64 	%rd114, %rd113, %rd111;
	shl.b64 	%rd115, %rd114, 29;
	add.s64 	%rd116, %rd115, %rd108;
	shl.b64 	%rd117, %rd116, 2;
	add.s64 	%rd118, %rd3, %rd117;
	st.global.v4.u32 	[%rd118], {%r152, %r154, %r153, %r155};
	or.b32  	%r2556, %r2554, 786432;
	cvt.s64.s32 	%rd119, %r2556;
	add.s64 	%rd120, %rd119, %rd5;
	shr.u64 	%rd121, %rd120, 35;
	add.s64 	%rd122, %rd120, %rd121;
	shr.s64 	%rd123, %rd122, 29;
	setp.lt.s64 	%p249, %rd120, 0;
	and.b64  	%rd124, %rd122, -536870912;
	setp.ne.s64 	%p250, %rd124, %rd120;
	and.pred  	%p251, %p249, %p250;
	selp.u64 	%rd125, 1, 0, %p251;
	sub.s64 	%rd126, %rd125, %rd123;
	shl.b64 	%rd127, %rd126, 29;
	add.s64 	%rd128, %rd127, %rd120;
	shl.b64 	%rd129, %rd128, 2;
	add.s64 	%rd130, %rd3, %rd129;
	st.global.v4.u32 	[%rd130], {%r156, %r158, %r157, %r159};
	setp.ne.s32 	%p252, %r104, 130816;
	add.s32 	%r104, %r104, 256;
	add.s32 	%r2557, %r104, %r162;
	setp.lt.s32 	%p253, %r2557, %r163;
	and.pred  	%p254, %p252, %p253;
	@%p254 bra 	$L__BB0_128;
	bra.uni 	$L__BB0_133;
$L__BB0_128:                            // %L1507
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_129 Depth 2
	or.b32  	%r568, %r104, %r89;
	or.b32  	%r569, %r568, %r90;
	or.b32  	%r570, %r569, %r91;
	shl.b32 	%r571, %r570, 12;
	add.s32 	%r572, %r92, %r571;
	shr.s32 	%r573, %r572, 31;
	shr.u32 	%r574, %r573, 3;
	add.s32 	%r575, %r572, %r574;
	shr.s32 	%r576, %r575, 29;
	setp.lt.s32 	%p227, %r572, 0;
	and.b32  	%r577, %r575, -536870912;
	setp.ne.s32 	%p228, %r577, %r572;
	and.pred  	%p229, %p227, %p228;
	selp.u32 	%r578, 1, 0, %p229;
	sub.s32 	%r579, %r578, %r576;
	shl.b32 	%r580, %r579, 29;
	add.s32 	%r581, %r580, %r572;
	mul.wide.s32 	%rd82, %r581, 4;
	add.s64 	%rd83, %rd2, %rd82;
	ld.global.v4.u32 	{%r582, %r583, %r584, %r585}, [%rd83];
	or.b32  	%r586, %r571, 262144;
	add.s32 	%r587, %r92, %r586;
	shr.s32 	%r588, %r587, 31;
	shr.u32 	%r589, %r588, 3;
	add.s32 	%r590, %r587, %r589;
	shr.s32 	%r591, %r590, 29;
	setp.lt.s32 	%p230, %r587, 0;
	and.b32  	%r592, %r590, -536870912;
	setp.ne.s32 	%p231, %r592, %r587;
	and.pred  	%p232, %p230, %p231;
	selp.u32 	%r593, 1, 0, %p232;
	sub.s32 	%r594, %r593, %r591;
	shl.b32 	%r595, %r594, 29;
	add.s32 	%r596, %r595, %r587;
	mul.wide.s32 	%rd84, %r596, 4;
	add.s64 	%rd85, %rd2, %rd84;
	ld.global.v4.u32 	{%r597, %r598, %r599, %r600}, [%rd85];
	or.b32  	%r601, %r571, 524288;
	add.s32 	%r602, %r92, %r601;
	shr.s32 	%r603, %r602, 31;
	shr.u32 	%r604, %r603, 3;
	add.s32 	%r605, %r602, %r604;
	shr.s32 	%r606, %r605, 29;
	setp.lt.s32 	%p233, %r602, 0;
	and.b32  	%r607, %r605, -536870912;
	setp.ne.s32 	%p234, %r607, %r602;
	and.pred  	%p235, %p233, %p234;
	selp.u32 	%r608, 1, 0, %p235;
	sub.s32 	%r609, %r608, %r606;
	shl.b32 	%r610, %r609, 29;
	add.s32 	%r611, %r610, %r602;
	mul.wide.s32 	%rd86, %r611, 4;
	add.s64 	%rd87, %rd2, %rd86;
	ld.global.v4.u32 	{%r612, %r613, %r614, %r615}, [%rd87];
	or.b32  	%r616, %r571, 786432;
	add.s32 	%r617, %r92, %r616;
	shr.s32 	%r618, %r617, 31;
	shr.u32 	%r619, %r618, 3;
	add.s32 	%r620, %r617, %r619;
	shr.s32 	%r621, %r620, 29;
	setp.lt.s32 	%p236, %r617, 0;
	and.b32  	%r622, %r620, -536870912;
	setp.ne.s32 	%p237, %r622, %r617;
	and.pred  	%p238, %p236, %p237;
	selp.u32 	%r623, 1, 0, %p238;
	sub.s32 	%r624, %r623, %r621;
	shl.b32 	%r625, %r624, 29;
	add.s32 	%r626, %r625, %r617;
	mul.wide.s32 	%rd88, %r626, 4;
	add.s64 	%rd89, %rd2, %rd88;
	ld.global.v4.u32 	{%r627, %r628, %r629, %r630}, [%rd89];
	selp.b32 	%r631, %r584, %r582, %p226;
	shfl.sync.bfly.b32	%r632, %r631, 8, 31, -1;
	selp.b32 	%r504, %r582, %r632, %p226;
	selp.b32 	%r505, %r632, %r584, %p226;
	selp.b32 	%r633, %r585, %r583, %p226;
	shfl.sync.bfly.b32	%r634, %r633, 8, 31, -1;
	selp.b32 	%r512, %r583, %r634, %p226;
	selp.b32 	%r513, %r634, %r585, %p226;
	selp.b32 	%r635, %r599, %r597, %p226;
	shfl.sync.bfly.b32	%r636, %r635, 8, 31, -1;
	selp.b32 	%r520, %r597, %r636, %p226;
	selp.b32 	%r521, %r636, %r599, %p226;
	selp.b32 	%r637, %r600, %r598, %p226;
	shfl.sync.bfly.b32	%r638, %r637, 8, 31, -1;
	selp.b32 	%r528, %r598, %r638, %p226;
	selp.b32 	%r529, %r638, %r600, %p226;
	selp.b32 	%r639, %r614, %r612, %p226;
	shfl.sync.bfly.b32	%r640, %r639, 8, 31, -1;
	selp.b32 	%r536, %r612, %r640, %p226;
	selp.b32 	%r537, %r640, %r614, %p226;
	selp.b32 	%r641, %r615, %r613, %p226;
	shfl.sync.bfly.b32	%r642, %r641, 8, 31, -1;
	selp.b32 	%r544, %r613, %r642, %p226;
	selp.b32 	%r545, %r642, %r615, %p226;
	selp.b32 	%r643, %r629, %r627, %p226;
	shfl.sync.bfly.b32	%r644, %r643, 8, 31, -1;
	selp.b32 	%r552, %r627, %r644, %p226;
	selp.b32 	%r553, %r644, %r629, %p226;
	selp.b32 	%r645, %r630, %r628, %p226;
	shfl.sync.bfly.b32	%r646, %r645, 8, 31, -1;
	selp.b32 	%r560, %r628, %r646, %p226;
	selp.b32 	%r561, %r646, %r630, %p226;
	mov.u32 	%r562, 21520;
	// begin inline asm
	prmt.b32 %r503, %r504, %r505, %r562;
	// end inline asm
	mov.u32 	%r566, 30258;
	// begin inline asm
	prmt.b32 %r507, %r504, %r505, %r566;
	// end inline asm
	// begin inline asm
	prmt.b32 %r511, %r512, %r513, %r562;
	// end inline asm
	// begin inline asm
	prmt.b32 %r515, %r512, %r513, %r566;
	// end inline asm
	// begin inline asm
	prmt.b32 %r519, %r520, %r521, %r562;
	// end inline asm
	// begin inline asm
	prmt.b32 %r523, %r520, %r521, %r566;
	// end inline asm
	// begin inline asm
	prmt.b32 %r527, %r528, %r529, %r562;
	// end inline asm
	// begin inline asm
	prmt.b32 %r531, %r528, %r529, %r566;
	// end inline asm
	// begin inline asm
	prmt.b32 %r535, %r536, %r537, %r562;
	// end inline asm
	// begin inline asm
	prmt.b32 %r539, %r536, %r537, %r566;
	// end inline asm
	// begin inline asm
	prmt.b32 %r543, %r544, %r545, %r562;
	// end inline asm
	// begin inline asm
	prmt.b32 %r547, %r544, %r545, %r566;
	// end inline asm
	// begin inline asm
	prmt.b32 %r551, %r552, %r553, %r562;
	// end inline asm
	// begin inline asm
	prmt.b32 %r555, %r552, %r553, %r566;
	// end inline asm
	// begin inline asm
	prmt.b32 %r559, %r560, %r561, %r562;
	// end inline asm
	// begin inline asm
	prmt.b32 %r563, %r560, %r561, %r566;
	// end inline asm
	or.b32  	%r105, %r104, %r88;
	st.shared.u32 	[%rd6], %r503;
	st.shared.u32 	[%rd7+128], %r507;
	st.shared.u32 	[%rd7+4], %r511;
	st.shared.u32 	[%rd7+132], %r515;
	st.shared.u32 	[%rd8], %r519;
	st.shared.u32 	[%rd9+128], %r523;
	st.shared.u32 	[%rd9+4], %r527;
	st.shared.u32 	[%rd9+132], %r531;
	st.shared.u32 	[%rd10], %r535;
	st.shared.u32 	[%rd11+128], %r539;
	st.shared.u32 	[%rd11+4], %r543;
	st.shared.u32 	[%rd11+132], %r547;
	st.shared.u32 	[%rd12], %r551;
	st.shared.u32 	[%rd13+128], %r555;
	st.shared.u32 	[%rd13+4], %r559;
	st.shared.u32 	[%rd13+132], %r563;
	bar.sync 	0;
	or.b32  	%r647, %r104, %r118;
	or.b32  	%r106, %r94, %r647;
	shr.u32 	%r2585, %r106, 5;
	mov.u64 	%rd133, %rd23;
	mov.u64 	%rd134, %rd22;
	mov.u32 	%r2588, %r2560;
	mov.u32 	%r2589, %r2579;
	mov.u32 	%r2590, %r2578;
	mov.u32 	%r2591, %r2577;
	mov.u32 	%r2592, %r2576;
$L__BB0_129:                            // %pass5695
                                        //   Parent Loop BB0_128 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov.u32 	%r2577, %r2587;
	mov.u32 	%r2576, %r2586;
	add.s32 	%r2444, %r106, %r2588;
	bfe.s32 	%r2445, %r2444, 2, 1;
	and.b32  	%r2446, %r2445, 130;
	and.b32  	%r2447, %r2444, 1;
	neg.s32 	%r2448, %r2447;
	and.b32  	%r2449, %r2448, 520;
	bfe.s32 	%r2450, %r2444, 1, 1;
	and.b32  	%r2451, %r2450, 260;
	bfe.s32 	%r2452, %r2444, 3, 1;
	and.b32  	%r2453, %r2452, 65;
	and.b32  	%r2454, %r2585, 7;
	mul.lo.s32 	%r2455, %r2454, 1057;
	or.b32  	%r2456, %r95, %r2449;
	add.s32 	%r2457, %r2456, %r2446;
	add.s32 	%r2458, %r2457, %r2451;
	add.s32 	%r2459, %r2458, %r2453;
	add.s32 	%r2460, %r2459, %r2455;
	mul.wide.u32 	%rd90, %r2460, 4;
	add.s64 	%rd92, %rd41, %rd90;
	ld.shared.u32 	%r2578, [%rd92];
	add.s32 	%r2461, %r96, %r2449;
	add.s32 	%r2462, %r2461, %r2446;
	add.s32 	%r2463, %r2462, %r2451;
	add.s32 	%r2464, %r2463, %r2453;
	add.s32 	%r2465, %r2464, %r2455;
	mul.wide.u32 	%rd93, %r2465, 4;
	add.s64 	%rd94, %rd41, %rd93;
	ld.shared.u32 	%r2579, [%rd94];
	// begin inline asm
	mov.b32 %r653, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r664, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r652, %r2578, -2004318072;
	mov.u32 	%r651, 983055;
	// begin inline asm
	lop3.b32 %r650, %r651, %r652, %r653, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r654, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r655, %r653, %r654;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r658, %r650, %r655;
	// end inline asm
	mov.u32 	%r662, 15728880;
	// begin inline asm
	lop3.b32 %r661, %r662, %r652, %r664, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r665, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r666, %r664, %r665;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r669, %r661, %r666;
	// end inline asm
	shr.u32 	%r674, %r652, 8;
	// begin inline asm
	lop3.b32 %r672, %r651, %r674, %r653, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r676, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r677, %r653, %r676;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r680, %r672, %r677;
	// end inline asm
	// begin inline asm
	lop3.b32 %r683, %r662, %r674, %r664, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r687, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r688, %r664, %r687;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r691, %r683, %r688;
	// end inline asm
	// begin inline asm
	mov.b32 %r699, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r710, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r698, %r2579, -2004318072;
	// begin inline asm
	lop3.b32 %r696, %r651, %r698, %r699, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r700, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r701, %r699, %r700;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r704, %r696, %r701;
	// end inline asm
	// begin inline asm
	lop3.b32 %r707, %r662, %r698, %r710, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r711, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r712, %r710, %r711;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r715, %r707, %r712;
	// end inline asm
	shr.u32 	%r720, %r698, 8;
	// begin inline asm
	lop3.b32 %r718, %r651, %r720, %r699, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r722, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r723, %r699, %r722;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r726, %r718, %r723;
	// end inline asm
	// begin inline asm
	lop3.b32 %r729, %r662, %r720, %r710, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r733, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r734, %r710, %r733;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r737, %r729, %r734;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r740, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r742, %r740, %r658;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r745, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r747, %r745, %r669;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r750, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r752, %r750, %r680;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r755, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r757, %r755, %r691;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r760, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r762, %r760, %r704;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r765, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r767, %r765, %r715;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r770, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r772, %r770, %r726;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r775, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r777, %r775, %r737;
	// end inline asm
	// begin inline asm
	mov.b32 %r785, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r796, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r784, %r2592, -2004318072;
	// begin inline asm
	lop3.b32 %r782, %r651, %r784, %r785, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r786, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r787, %r785, %r786;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r790, %r782, %r787;
	// end inline asm
	// begin inline asm
	lop3.b32 %r793, %r662, %r784, %r796, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r797, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r798, %r796, %r797;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r801, %r793, %r798;
	// end inline asm
	shr.u32 	%r806, %r784, 8;
	// begin inline asm
	lop3.b32 %r804, %r651, %r806, %r785, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r808, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r809, %r785, %r808;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r812, %r804, %r809;
	// end inline asm
	// begin inline asm
	lop3.b32 %r815, %r662, %r806, %r796, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r819, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r820, %r796, %r819;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r823, %r815, %r820;
	// end inline asm
	// begin inline asm
	mov.b32 %r831, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r842, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r830, %r2591, -2004318072;
	// begin inline asm
	lop3.b32 %r828, %r651, %r830, %r831, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r832, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r833, %r831, %r832;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r836, %r828, %r833;
	// end inline asm
	// begin inline asm
	lop3.b32 %r839, %r662, %r830, %r842, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r843, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r844, %r842, %r843;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r847, %r839, %r844;
	// end inline asm
	shr.u32 	%r852, %r830, 8;
	// begin inline asm
	lop3.b32 %r850, %r651, %r852, %r831, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r854, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r855, %r831, %r854;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r858, %r850, %r855;
	// end inline asm
	// begin inline asm
	lop3.b32 %r861, %r662, %r852, %r842, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r865, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r866, %r842, %r865;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r869, %r861, %r866;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r872, %r201, %r790, %r742;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r876, %r201, %r801, %r747;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r880, %r201, %r812, %r752;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r884, %r201, %r823, %r757;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r888, %r201, %r836, %r762;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r892, %r201, %r847, %r767;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r896, %r201, %r858, %r772;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r900, %r201, %r869, %r777;
	// end inline asm
	// begin inline asm
	mov.b32 %r909, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r920, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r908, %r2590, -2004318072;
	// begin inline asm
	lop3.b32 %r906, %r651, %r908, %r909, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r910, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r911, %r909, %r910;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r914, %r906, %r911;
	// end inline asm
	// begin inline asm
	lop3.b32 %r917, %r662, %r908, %r920, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r921, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r922, %r920, %r921;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r925, %r917, %r922;
	// end inline asm
	shr.u32 	%r930, %r908, 8;
	// begin inline asm
	lop3.b32 %r928, %r651, %r930, %r909, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r932, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r933, %r909, %r932;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r936, %r928, %r933;
	// end inline asm
	// begin inline asm
	lop3.b32 %r939, %r662, %r930, %r920, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r943, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r944, %r920, %r943;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r947, %r939, %r944;
	// end inline asm
	// begin inline asm
	mov.b32 %r955, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r966, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r954, %r2589, -2004318072;
	// begin inline asm
	lop3.b32 %r952, %r651, %r954, %r955, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r956, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r957, %r955, %r956;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r960, %r952, %r957;
	// end inline asm
	// begin inline asm
	lop3.b32 %r963, %r662, %r954, %r966, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r967, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r968, %r966, %r967;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r971, %r963, %r968;
	// end inline asm
	shr.u32 	%r976, %r954, 8;
	// begin inline asm
	lop3.b32 %r974, %r651, %r976, %r955, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r978, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r979, %r955, %r978;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r982, %r974, %r979;
	// end inline asm
	// begin inline asm
	lop3.b32 %r985, %r662, %r976, %r966, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r989, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r990, %r966, %r989;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r993, %r985, %r990;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r996, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r998, %r996, %r914, %r872;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1002, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1004, %r1002, %r925, %r876;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1008, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1010, %r1008, %r936, %r880;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1014, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1016, %r1014, %r947, %r884;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1020, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1022, %r1020, %r960, %r888;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1026, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1028, %r1026, %r971, %r892;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1032, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1034, %r1032, %r982, %r896;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1038, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1040, %r1038, %r993, %r900;
	// end inline asm
	// begin inline asm
	mov.b32 %r1049, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1060, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1048, %r2576, -2004318072;
	// begin inline asm
	lop3.b32 %r1046, %r651, %r1048, %r1049, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1050, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1051, %r1049, %r1050;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1054, %r1046, %r1051;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1057, %r662, %r1048, %r1060, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1061, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1062, %r1060, %r1061;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1065, %r1057, %r1062;
	// end inline asm
	shr.u32 	%r1070, %r1048, 8;
	// begin inline asm
	lop3.b32 %r1068, %r651, %r1070, %r1049, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1072, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1073, %r1049, %r1072;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1076, %r1068, %r1073;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1079, %r662, %r1070, %r1060, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1083, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1084, %r1060, %r1083;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1087, %r1079, %r1084;
	// end inline asm
	// begin inline asm
	mov.b32 %r1095, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1106, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1094, %r2577, -2004318072;
	// begin inline asm
	lop3.b32 %r1092, %r651, %r1094, %r1095, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1096, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1097, %r1095, %r1096;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1100, %r1092, %r1097;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1103, %r662, %r1094, %r1106, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1107, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1108, %r1106, %r1107;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1111, %r1103, %r1108;
	// end inline asm
	shr.u32 	%r1116, %r1094, 8;
	// begin inline asm
	lop3.b32 %r1114, %r651, %r1116, %r1095, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1118, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1119, %r1095, %r1118;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1122, %r1114, %r1119;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1125, %r662, %r1116, %r1106, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1129, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1130, %r1106, %r1129;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1133, %r1125, %r1130;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1175, %r237, %r1054, %r998;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1172, %r237, %r1065, %r1004;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1184, %r237, %r1076, %r1010;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1181, %r237, %r1087, %r1016;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1193, %r237, %r1100, %r1022;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1190, %r237, %r1111, %r1028;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1202, %r237, %r1122, %r1034;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1199, %r237, %r1133, %r1040;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1168, %r286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1170, %r1168, %r1172;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1173, %r283, %r1175, %r1170;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1177, %r286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1179, %r1177, %r1181;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1182, %r283, %r1184, %r1179;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1186, %r286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1188, %r1186, %r1190;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1191, %r283, %r1193, %r1188;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1195, %r286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1197, %r1195, %r1199;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1200, %r283, %r1202, %r1197;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1204, %r286, %r1175;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1207, %r283, %r1172, %r1204;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1211, %r286, %r1184;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1214, %r283, %r1181, %r1211;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1218, %r286, %r1193;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1221, %r283, %r1190, %r1218;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1225, %r286, %r1202;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1228, %r283, %r1199, %r1225;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1279, %r1276}, {%r331, %r337, %r334, %r340}, {%r1173, %r1207}, {%r2560, %r2560};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1288, %r1285}, {%r331, %r337, %r334, %r340}, {%r1182, %r1214}, {%r2560, %r2560};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1297, %r1294}, {%r331, %r337, %r334, %r340}, {%r1191, %r1221}, {%r2560, %r2560};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1306, %r1303}, {%r331, %r337, %r334, %r340}, {%r1200, %r1228}, {%r2560, %r2560};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1272, %r381;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1274, %r1272, %r1276;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1277, %r378, %r1279, %r1274;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1281, %r381;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1283, %r1281, %r1285;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1286, %r378, %r1288, %r1283;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1290, %r381;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1292, %r1290, %r1294;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1295, %r378, %r1297, %r1292;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1299, %r381;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1301, %r1299, %r1303;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1304, %r378, %r1306, %r1301;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1308, %r381, %r1279;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1311, %r378, %r1276, %r1308;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1315, %r381, %r1288;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1318, %r378, %r1285, %r1315;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1322, %r381, %r1297;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1325, %r378, %r1294, %r1322;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1329, %r381, %r1306;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1332, %r378, %r1303, %r1329;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1336, %r1337}, {%r418, %r424, %r421, %r427}, {%r1277, %r1311}, {%r2560, %r2560};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1346, %r1347}, {%r418, %r424, %r421, %r427}, {%r1286, %r1318}, {%r2560, %r2560};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1356, %r1357}, {%r418, %r424, %r421, %r427}, {%r1295, %r1325}, {%r2560, %r2560};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1366, %r1367}, {%r418, %r424, %r421, %r427}, {%r1304, %r1332}, {%r2560, %r2560};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1376, %r113, %r1336;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1379, %r113, %r1337;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1382, %r113, %r1346;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1385, %r113, %r1347;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1388, %r113, %r1356;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1391, %r113, %r1357;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1394, %r113, %r1366;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1397, %r113, %r1367;
	// end inline asm
	// begin inline asm
	mov.b32 %r1400, {%rs274, %rs274};
	// end inline asm
	mov.u16 	%rs99, 18176;
	// begin inline asm
	mov.b32 %r1401, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1402, %r1376, %r1400;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1405, %r1402, %r1401;
	// end inline asm
	// begin inline asm
	mov.b32 %r1408, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1409, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1410, %r1379, %r1408;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1413, %r1410, %r1409;
	// end inline asm
	// begin inline asm
	mov.b32 %r1416, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1417, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1418, %r1382, %r1416;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1421, %r1418, %r1417;
	// end inline asm
	// begin inline asm
	mov.b32 %r1424, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1425, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1426, %r1385, %r1424;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1429, %r1426, %r1425;
	// end inline asm
	// begin inline asm
	mov.b32 %r1432, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1433, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1434, %r1388, %r1432;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1437, %r1434, %r1433;
	// end inline asm
	// begin inline asm
	mov.b32 %r1440, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1441, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1442, %r1391, %r1440;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1445, %r1442, %r1441;
	// end inline asm
	// begin inline asm
	mov.b32 %r1448, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1449, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1450, %r1394, %r1448;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1453, %r1450, %r1449;
	// end inline asm
	// begin inline asm
	mov.b32 %r1456, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r1457, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r1458, %r1397, %r1456;
	// end inline asm
	// begin inline asm
	min.f16x2 %r1461, %r1458, %r1457;
	// end inline asm
	// begin inline asm
	mov.b32 %r1467, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1465, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1466, %r1467, %r1465;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1469, %r1405, %r1466;
	// end inline asm
	// begin inline asm
	mov.b32 %r1472, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1473, %r1467, %r1472;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1476, %r1413, %r1473;
	// end inline asm
	// begin inline asm
	mov.b32 %r1479, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1480, %r1467, %r1479;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1483, %r1421, %r1480;
	// end inline asm
	// begin inline asm
	mov.b32 %r1486, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1487, %r1467, %r1486;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1490, %r1429, %r1487;
	// end inline asm
	mov.u32 	%r1496, 25152;
	// begin inline asm
	prmt.b32 %r1493, %r1469, %r1483, %r1496;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1497, %r1476, %r1490, %r1496;
	// end inline asm
	shl.b32 	%r1504, %r1497, 4;
	mov.u32 	%r1502, 252645135;
	// begin inline asm
	lop3.b32 %r1501, %r1502, %r1493, %r1504, 202;
	// end inline asm
	xor.b32  	%r2466, %r1501, -2004318072;
	// begin inline asm
	mov.b32 %r1508, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1506, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1507, %r1508, %r1506;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1510, %r1437, %r1507;
	// end inline asm
	// begin inline asm
	mov.b32 %r1513, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1514, %r1508, %r1513;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1517, %r1445, %r1514;
	// end inline asm
	// begin inline asm
	mov.b32 %r1520, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1521, %r1508, %r1520;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1524, %r1453, %r1521;
	// end inline asm
	// begin inline asm
	mov.b32 %r1527, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1528, %r1508, %r1527;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1531, %r1461, %r1528;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1534, %r1510, %r1524, %r1496;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1538, %r1517, %r1531, %r1496;
	// end inline asm
	shl.b32 	%r1545, %r1538, 4;
	// begin inline asm
	lop3.b32 %r1542, %r1502, %r1534, %r1545, 202;
	// end inline asm
	xor.b32  	%r2467, %r1542, -2004318072;
	st.shared.u32 	[%rd133], %r2466;
	st.shared.u32 	[%rd134], %r2467;
	ld.shared.u32 	%r2586, [%rd92];
	ld.shared.u32 	%r2587, [%rd94];
	// begin inline asm
	mov.b32 %r1551, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1562, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1550, %r2586, -2004318072;
	// begin inline asm
	lop3.b32 %r1548, %r651, %r1550, %r1551, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1552, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1553, %r1551, %r1552;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1556, %r1548, %r1553;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1559, %r662, %r1550, %r1562, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1563, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1564, %r1562, %r1563;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1567, %r1559, %r1564;
	// end inline asm
	shr.u32 	%r1572, %r1550, 8;
	// begin inline asm
	lop3.b32 %r1570, %r651, %r1572, %r1551, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1574, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1575, %r1551, %r1574;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1578, %r1570, %r1575;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1581, %r662, %r1572, %r1562, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1585, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1586, %r1562, %r1585;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1589, %r1581, %r1586;
	// end inline asm
	// begin inline asm
	mov.b32 %r1597, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1608, {%rs236, %rs236};
	// end inline asm
	xor.b32  	%r1596, %r2587, -2004318072;
	// begin inline asm
	lop3.b32 %r1594, %r651, %r1596, %r1597, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1598, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1599, %r1597, %r1598;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1602, %r1594, %r1599;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1605, %r662, %r1596, %r1608, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1609, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1610, %r1608, %r1609;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1613, %r1605, %r1610;
	// end inline asm
	shr.u32 	%r1618, %r1596, 8;
	// begin inline asm
	lop3.b32 %r1616, %r651, %r1618, %r1597, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1620, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1621, %r1597, %r1620;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1624, %r1616, %r1621;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1627, %r662, %r1618, %r1608, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1631, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1632, %r1608, %r1631;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1635, %r1627, %r1632;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1638, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1640, %r1638, %r1556;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1643, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1645, %r1643, %r1567;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1648, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1650, %r1648, %r1578;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1653, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1655, %r1653, %r1589;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1658, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1660, %r1658, %r1602;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1663, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1665, %r1663, %r1613;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1668, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1670, %r1668, %r1624;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1673, %r255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1675, %r1673, %r1635;
	// end inline asm
	// begin inline asm
	mov.b32 %r1683, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1694, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1680, %r651, %r908, %r1683, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1684, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1685, %r1683, %r1684;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1688, %r1680, %r1685;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1691, %r662, %r908, %r1694, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1695, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1696, %r1694, %r1695;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1699, %r1691, %r1696;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1702, %r651, %r930, %r1683, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1706, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1707, %r1683, %r1706;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1710, %r1702, %r1707;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1713, %r662, %r930, %r1694, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1717, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1718, %r1694, %r1717;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1721, %r1713, %r1718;
	// end inline asm
	// begin inline asm
	mov.b32 %r1729, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1740, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1726, %r651, %r954, %r1729, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1730, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1731, %r1729, %r1730;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1734, %r1726, %r1731;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1737, %r662, %r954, %r1740, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1741, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1742, %r1740, %r1741;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1745, %r1737, %r1742;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1748, %r651, %r976, %r1729, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1752, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1753, %r1729, %r1752;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1756, %r1748, %r1753;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1759, %r662, %r976, %r1740, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1763, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1764, %r1740, %r1763;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1767, %r1759, %r1764;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1770, %r201, %r1688, %r1640;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1774, %r201, %r1699, %r1645;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1778, %r201, %r1710, %r1650;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1782, %r201, %r1721, %r1655;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1786, %r201, %r1734, %r1660;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1790, %r201, %r1745, %r1665;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1794, %r201, %r1756, %r1670;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1798, %r201, %r1767, %r1675;
	// end inline asm
	// begin inline asm
	mov.b32 %r1807, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1818, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1804, %r651, %r1048, %r1807, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1808, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1809, %r1807, %r1808;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1812, %r1804, %r1809;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1815, %r662, %r1048, %r1818, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1819, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1820, %r1818, %r1819;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1823, %r1815, %r1820;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1826, %r651, %r1070, %r1807, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1830, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1831, %r1807, %r1830;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1834, %r1826, %r1831;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1837, %r662, %r1070, %r1818, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1841, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1842, %r1818, %r1841;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1845, %r1837, %r1842;
	// end inline asm
	// begin inline asm
	mov.b32 %r1853, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1864, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1850, %r651, %r1094, %r1853, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1854, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1855, %r1853, %r1854;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1858, %r1850, %r1855;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1861, %r662, %r1094, %r1864, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1865, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1866, %r1864, %r1865;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1869, %r1861, %r1866;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1872, %r651, %r1116, %r1853, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1876, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1877, %r1853, %r1876;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1880, %r1872, %r1877;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1883, %r662, %r1116, %r1864, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1887, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1888, %r1864, %r1887;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1891, %r1883, %r1888;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1894, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1896, %r1894, %r1812, %r1770;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1900, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1902, %r1900, %r1823, %r1774;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1906, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1908, %r1906, %r1834, %r1778;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1912, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1914, %r1912, %r1845, %r1782;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1918, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1920, %r1918, %r1858, %r1786;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1924, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1926, %r1924, %r1869, %r1790;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1930, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1932, %r1930, %r1880, %r1794;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1936, %r219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1938, %r1936, %r1891, %r1798;
	// end inline asm
	// begin inline asm
	mov.b32 %r1947, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r1958, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1944, %r651, %r652, %r1947, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1948, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1949, %r1947, %r1948;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1952, %r1944, %r1949;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1955, %r662, %r652, %r1958, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1959, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1960, %r1958, %r1959;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1963, %r1955, %r1960;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1966, %r651, %r674, %r1947, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1970, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1971, %r1947, %r1970;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1974, %r1966, %r1971;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1977, %r662, %r674, %r1958, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1981, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1982, %r1958, %r1981;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1985, %r1977, %r1982;
	// end inline asm
	// begin inline asm
	mov.b32 %r1993, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r2004, {%rs236, %rs236};
	// end inline asm
	// begin inline asm
	lop3.b32 %r1990, %r651, %r698, %r1993, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1994, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1995, %r1993, %r1994;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1998, %r1990, %r1995;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2001, %r662, %r698, %r2004, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2005, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2006, %r2004, %r2005;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2009, %r2001, %r2006;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2012, %r651, %r720, %r1993, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2016, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2017, %r1993, %r2016;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2020, %r2012, %r2017;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2023, %r662, %r720, %r2004, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2027, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2028, %r2004, %r2027;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2031, %r2023, %r2028;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2073, %r237, %r1952, %r1896;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2070, %r237, %r1963, %r1902;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2082, %r237, %r1974, %r1908;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2079, %r237, %r1985, %r1914;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2091, %r237, %r1998, %r1920;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2088, %r237, %r2009, %r1926;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2100, %r237, %r2020, %r1932;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2097, %r237, %r2031, %r1938;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2066, %r286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2068, %r2066, %r2070;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2071, %r283, %r2073, %r2068;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2075, %r286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2077, %r2075, %r2079;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2080, %r283, %r2082, %r2077;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2084, %r286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2086, %r2084, %r2088;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2089, %r283, %r2091, %r2086;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2093, %r286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2095, %r2093, %r2097;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2098, %r283, %r2100, %r2095;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2102, %r286, %r2073;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2105, %r283, %r2070, %r2102;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2109, %r286, %r2082;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2112, %r283, %r2079, %r2109;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2116, %r286, %r2091;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2119, %r283, %r2088, %r2116;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2123, %r286, %r2100;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2126, %r283, %r2097, %r2123;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2177, %r2174}, {%r331, %r337, %r334, %r340}, {%r2071, %r2105}, {%r2560, %r2560};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2186, %r2183}, {%r331, %r337, %r334, %r340}, {%r2080, %r2112}, {%r2560, %r2560};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2195, %r2192}, {%r331, %r337, %r334, %r340}, {%r2089, %r2119}, {%r2560, %r2560};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2204, %r2201}, {%r331, %r337, %r334, %r340}, {%r2098, %r2126}, {%r2560, %r2560};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2170, %r381;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2172, %r2170, %r2174;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2175, %r378, %r2177, %r2172;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2179, %r381;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2181, %r2179, %r2183;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2184, %r378, %r2186, %r2181;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2188, %r381;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2190, %r2188, %r2192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2193, %r378, %r2195, %r2190;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2197, %r381;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2199, %r2197, %r2201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2202, %r378, %r2204, %r2199;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2206, %r381, %r2177;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2209, %r378, %r2174, %r2206;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2213, %r381, %r2186;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2216, %r378, %r2183, %r2213;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2220, %r381, %r2195;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2223, %r378, %r2192, %r2220;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2227, %r381, %r2204;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2230, %r378, %r2201, %r2227;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2234, %r2235}, {%r418, %r424, %r421, %r427}, {%r2175, %r2209}, {%r2560, %r2560};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2244, %r2245}, {%r418, %r424, %r421, %r427}, {%r2184, %r2216}, {%r2560, %r2560};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2254, %r2255}, {%r418, %r424, %r421, %r427}, {%r2193, %r2223}, {%r2560, %r2560};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2264, %r2265}, {%r418, %r424, %r421, %r427}, {%r2202, %r2230}, {%r2560, %r2560};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2274, %r113, %r2234;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2277, %r113, %r2235;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2280, %r113, %r2244;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2283, %r113, %r2245;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2286, %r113, %r2254;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2289, %r113, %r2255;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2292, %r113, %r2264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2295, %r113, %r2265;
	// end inline asm
	// begin inline asm
	mov.b32 %r2298, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2299, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2300, %r2274, %r2298;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2303, %r2300, %r2299;
	// end inline asm
	// begin inline asm
	mov.b32 %r2306, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2307, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2308, %r2277, %r2306;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2311, %r2308, %r2307;
	// end inline asm
	// begin inline asm
	mov.b32 %r2314, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2315, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2316, %r2280, %r2314;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2319, %r2316, %r2315;
	// end inline asm
	// begin inline asm
	mov.b32 %r2322, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2323, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2324, %r2283, %r2322;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2327, %r2324, %r2323;
	// end inline asm
	// begin inline asm
	mov.b32 %r2330, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2331, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2332, %r2286, %r2330;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2335, %r2332, %r2331;
	// end inline asm
	// begin inline asm
	mov.b32 %r2338, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2339, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2340, %r2289, %r2338;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2343, %r2340, %r2339;
	// end inline asm
	// begin inline asm
	mov.b32 %r2346, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2347, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2348, %r2292, %r2346;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2351, %r2348, %r2347;
	// end inline asm
	// begin inline asm
	mov.b32 %r2354, {%rs274, %rs274};
	// end inline asm
	// begin inline asm
	mov.b32 %r2355, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	max.f16x2 %r2356, %r2295, %r2354;
	// end inline asm
	// begin inline asm
	min.f16x2 %r2359, %r2356, %r2355;
	// end inline asm
	// begin inline asm
	mov.b32 %r2365, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r2363, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2364, %r2365, %r2363;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2367, %r2303, %r2364;
	// end inline asm
	// begin inline asm
	mov.b32 %r2370, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2371, %r2365, %r2370;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2374, %r2311, %r2371;
	// end inline asm
	// begin inline asm
	mov.b32 %r2377, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2378, %r2365, %r2377;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2381, %r2319, %r2378;
	// end inline asm
	// begin inline asm
	mov.b32 %r2384, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2385, %r2365, %r2384;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2388, %r2327, %r2385;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2391, %r2367, %r2381, %r1496;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2395, %r2374, %r2388, %r1496;
	// end inline asm
	shl.b32 	%r2402, %r2395, 4;
	// begin inline asm
	lop3.b32 %r2399, %r1502, %r2391, %r2402, 202;
	// end inline asm
	xor.b32  	%r2468, %r2399, -2004318072;
	// begin inline asm
	mov.b32 %r2406, {%rs288, %rs288};
	// end inline asm
	// begin inline asm
	mov.b32 %r2404, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2405, %r2406, %r2404;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2408, %r2335, %r2405;
	// end inline asm
	// begin inline asm
	mov.b32 %r2411, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2412, %r2406, %r2411;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2415, %r2343, %r2412;
	// end inline asm
	// begin inline asm
	mov.b32 %r2418, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2419, %r2406, %r2418;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2422, %r2351, %r2419;
	// end inline asm
	// begin inline asm
	mov.b32 %r2425, {%rs296, %rs296};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2426, %r2406, %r2425;
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2429, %r2359, %r2426;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2432, %r2408, %r2422, %r1496;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2436, %r2415, %r2429, %r1496;
	// end inline asm
	shl.b32 	%r2443, %r2436, 4;
	// begin inline asm
	lop3.b32 %r2440, %r1502, %r2432, %r2443, 202;
	// end inline asm
	xor.b32  	%r2469, %r2440, -2004318072;
	st.shared.u32 	[%rd133], %r2468;
	st.shared.u32 	[%rd134], %r2469;
	add.s32 	%r2588, %r2588, 32;
	add.s64 	%rd134, %rd134, 4228;
	add.s64 	%rd133, %rd133, 4228;
	add.s32 	%r2585, %r2585, 1;
	setp.eq.s32 	%p239, %r2588, 256;
	mov.u32 	%r2589, %r2579;
	mov.u32 	%r2590, %r2578;
	mov.u32 	%r2591, %r2577;
	mov.u32 	%r2592, %r2576;
	@%p239 bra 	$L__BB0_130;
	bra.uni 	$L__BB0_129;
$L__BB0_130:                            // %guard_exit10538
                                        //   in Loop: Header=BB0_128 Depth=1
	bar.sync 	0;
	ld.shared.u32 	%r2475, [%rd14];
	ld.shared.u32 	%r2476, [%rd15+128];
	ld.shared.u32 	%r2483, [%rd15+4];
	ld.shared.u32 	%r2484, [%rd15+132];
	ld.shared.u32 	%r2491, [%rd16];
	ld.shared.u32 	%r2492, [%rd17+128];
	ld.shared.u32 	%r2499, [%rd17+4];
	ld.shared.u32 	%r2500, [%rd17+132];
	ld.shared.u32 	%r2507, [%rd18];
	ld.shared.u32 	%r2508, [%rd19+128];
	ld.shared.u32 	%r2515, [%rd19+4];
	ld.shared.u32 	%r2516, [%rd19+132];
	ld.shared.u32 	%r2523, [%rd20];
	ld.shared.u32 	%r2524, [%rd21+128];
	ld.shared.u32 	%r2531, [%rd21+4];
	ld.shared.u32 	%r2532, [%rd21+132];
	// begin inline asm
	prmt.b32 %r2470, %r2475, %r2476, %r562;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2474, %r2475, %r2476, %r566;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2478, %r2483, %r2484, %r562;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2482, %r2483, %r2484, %r566;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2486, %r2491, %r2492, %r562;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2490, %r2491, %r2492, %r566;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2494, %r2499, %r2500, %r562;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2498, %r2499, %r2500, %r566;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2502, %r2507, %r2508, %r562;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2506, %r2507, %r2508, %r566;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2510, %r2515, %r2516, %r562;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2514, %r2515, %r2516, %r566;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2518, %r2523, %r2524, %r562;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2522, %r2523, %r2524, %r566;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2526, %r2531, %r2532, %r562;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2530, %r2531, %r2532, %r566;
	// end inline asm
	selp.b32 	%r2534, %r2474, %r2470, %p226;
	shfl.sync.bfly.b32	%r2535, %r2534, 8, 31, -1;
	selp.b32 	%r2536, %r2482, %r2478, %p226;
	shfl.sync.bfly.b32	%r2537, %r2536, 8, 31, -1;
	selp.b32 	%r2538, %r2490, %r2486, %p226;
	shfl.sync.bfly.b32	%r150, %r2538, 8, 31, -1;
	selp.b32 	%r2539, %r2498, %r2494, %p226;
	shfl.sync.bfly.b32	%r151, %r2539, 8, 31, -1;
	selp.b32 	%r2540, %r2506, %r2502, %p226;
	shfl.sync.bfly.b32	%r2541, %r2540, 8, 31, -1;
	selp.b32 	%r152, %r2502, %r2541, %p226;
	selp.b32 	%r153, %r2541, %r2506, %p226;
	selp.b32 	%r2542, %r2514, %r2510, %p226;
	shfl.sync.bfly.b32	%r2543, %r2542, 8, 31, -1;
	selp.b32 	%r154, %r2510, %r2543, %p226;
	selp.b32 	%r155, %r2543, %r2514, %p226;
	selp.b32 	%r2544, %r2522, %r2518, %p226;
	shfl.sync.bfly.b32	%r2545, %r2544, 8, 31, -1;
	selp.b32 	%r156, %r2518, %r2545, %p226;
	selp.b32 	%r157, %r2545, %r2522, %p226;
	selp.b32 	%r2546, %r2530, %r2526, %p226;
	shfl.sync.bfly.b32	%r2547, %r2546, 8, 31, -1;
	selp.b32 	%r158, %r2526, %r2547, %p226;
	selp.b32 	%r159, %r2547, %r2530, %p226;
	shl.b32 	%r2593, %r105, 12;
	@%p240 bra 	$L__BB0_131;
	bra.uni 	$L__BB0_132;
$L__BB0_131:                            // %pass10057
                                        //   in Loop: Header=BB0_128 Depth=1
	selp.b32 	%r2548, %r151, %r2498, %p226;
	selp.b32 	%r2549, %r2494, %r151, %p226;
	selp.b32 	%r2550, %r150, %r2490, %p226;
	selp.b32 	%r2551, %r2486, %r150, %p226;
	or.b32  	%r2552, %r2593, %r97;
	or.b32  	%r2553, %r2552, 262144;
	cvt.s64.s32 	%rd95, %r2553;
	add.s64 	%rd96, %rd95, %rd5;
	shr.u64 	%rd97, %rd96, 35;
	add.s64 	%rd98, %rd96, %rd97;
	shr.s64 	%rd99, %rd98, 29;
	setp.lt.s64 	%p243, %rd96, 0;
	and.b64  	%rd100, %rd98, -536870912;
	setp.ne.s64 	%p244, %rd100, %rd96;
	and.pred  	%p245, %p243, %p244;
	selp.u64 	%rd101, 1, 0, %p245;
	sub.s64 	%rd102, %rd101, %rd99;
	shl.b64 	%rd103, %rd102, 29;
	add.s64 	%rd104, %rd103, %rd96;
	shl.b64 	%rd105, %rd104, 2;
	add.s64 	%rd106, %rd3, %rd105;
	st.global.v4.u32 	[%rd106], {%r2551, %r2549, %r2550, %r2548};
	bra.uni 	$L__BB0_132;
$L__BB0_133:                            // %L23862
	st.global.u32 	[%rd4], %r2560;
	ret;
$L__BB0_7:                              // %L157
	mov.u32 	%r2559, 2;
	st.global.u32 	[%rd4], %r2559;
	mov.u64 	%rd131, exception2083;
	cvta.global.u64 	%rd132, %rd131;
	{ // callseq 2, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd132;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 2
	{ // callseq 3, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd30;
	st.param.b32 	[param0+8], %r161;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 3
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd35, exception1;
	cvta.global.u64 	%rd36, %rd35;
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd36;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 0
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd30;
	st.param.b32 	[param0+8], %r161;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 1
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
