// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=192, blocks_per_sm=4

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception1869[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1909[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 192, 1, 1
.minnctapersm 4
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<323>;
	.reg .b16 	%rs<235>;
	.reg .b32 	%r<3059>;
	.reg .f32 	%f<790>;
	.reg .b64 	%rd<331>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r282, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd12, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r291, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p4, %r291, 13919;
	@%p4 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L20
	ld.param.u64 	%rd13, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r283, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %ctaid.x;
	mul.lo.s32 	%r2, %r1, 192;
	mov.u32 	%r3, %tid.y;
	shl.b32 	%r4, %r3, 5;
	mov.u32 	%r292, %tid.x;
	add.s32 	%r293, %r2, %r4;
	or.b32  	%r294, %r293, %r292;
	mul.wide.u32 	%rd20, %r294, 4;
	add.s64 	%rd6, %rd13, %rd20;
	mov.u32 	%r295, 1;
	st.global.u32 	[%rd6], %r295;
	setp.gt.u32 	%p5, %r283, 8191;
	@%p5 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r284, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p6, %r284, %r283;
	setp.gt.s32 	%p7, %r284, 16383;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r285, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r284, %r283;
	mad.lo.s32 	%r296, %r6, -1431655765, 715827872;
	shf.r.wrap.b32 	%r297, %r296, %r296, 4;
	setp.gt.u32 	%p9, %r297, 89478484;
	setp.gt.u32 	%p10, %r285, 511;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r286, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p12, %r286, %r285;
	setp.lt.s32 	%p13, %r286, 1024;
	and.pred  	%p14, %p12, %p13;
	@%p14 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass40
	sub.s32 	%r298, %r286, %r285;
	shr.s32 	%r299, %r6, 31;
	shr.u32 	%r300, %r299, 26;
	add.s32 	%r301, %r6, %r300;
	shr.s32 	%r302, %r301, 6;
	setp.eq.s32 	%p15, %r298, %r302;
	@%p15 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L261
	ld.param.u32 	%r287, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p16, %r287, 0;
	@%p16 bra 	$L__BB0_13;
// %bb.9:                               // %L263
	ld.param.u32 	%r288, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p17, %r288, %r287;
	setp.gt.s32 	%p18, %r288, 512;
	or.pred  	%p19, %p17, %p18;
	@%p19 bra 	$L__BB0_13;
// %bb.10:                              // %L273
	ld.param.u32 	%r289, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r7, %r288, %r287;
	and.b32  	%r303, %r7, 3;
	setp.ne.s32 	%p20, %r303, 0;
	setp.lt.s32 	%p21, %r289, 0;
	or.pred  	%p22, %p20, %p21;
	@%p22 bra 	$L__BB0_13;
// %bb.11:                              // %L279
	ld.param.u32 	%r290, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p23, %r290, %r289;
	setp.gt.s32 	%p24, %r290, 4096;
	or.pred  	%p25, %p23, %p24;
	@%p25 bra 	$L__BB0_13;
// %bb.12:                              // %L289
	sub.s32 	%r304, %r290, %r289;
	and.b32  	%r305, %r304, 3;
	setp.eq.s32 	%p26, %r305, 0;
	setp.eq.s32 	%p27, %r304, %r7;
	and.pred  	%p28, %p26, %p27;
	@%p28 bra 	$L__BB0_191;
	bra.uni 	$L__BB0_13;
$L__BB0_191:                            // %pass149
	and.b32  	%r149, %r292, 3;
	shr.u32 	%r150, %r292, 2;
	mul.lo.s32 	%r306, %r149, %r150;
	and.b32  	%r307, %r306, 7;
	cvt.rn.f32.s32 	%f205, %r307;
	mov.f32 	%f206, 0f40800000;
	div.approx.f32 	%f169, %f205, %f206;
	abs.f32 	%f788, %f169;
	setp.lt.f32 	%p29, %f788, 0f40000000;
	setp.gtu.f32 	%p322, %f788, 0f4B800000;
	mov.f32 	%f784, %f788;
	@%p29 bra 	$L__BB0_203;
// %bb.192:
	@%p322 bra 	$L__BB0_199;
	bra.uni 	$L__BB0_193;
$L__BB0_199:
	mov.b32 	%r152, %f788;
	and.b32  	%r308, %r152, 8388607;
	or.b32  	%r3042, %r308, 1065353216;
	mov.b32 	%f783, %r3042;
	add.s32 	%r309, %r152, -1073741824;
	and.b32  	%r3043, %r309, -8388608;
	setp.eq.s32 	%p36, %r3043, 0;
	@%p36 bra 	$L__BB0_202;
// %bb.200:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f216, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f215,%f216;
	// end inline asm
$L__BB0_201:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r310, %r3043, 192937984;
	add.s32 	%r311, %r3042, %r310;
	mov.b32 	%f217, %r311;
	mul.f32 	%f218, %f215, %f217;
	sub.f32 	%f219, %f217, %f218;
	fma.rn.f32 	%f220, %f219, %f215, %f218;
	sub.f32 	%f221, %f217, %f220;
	fma.rz.f32 	%f222, %f221, %f215, %f220;
	cvt.rzi.f32.f32 	%f223, %f222;
	sub.f32 	%f783, %f217, %f223;
	sub.s32 	%r3043, %r3043, %r310;
	mov.b32 	%r3042, %f783;
	setp.ne.s32 	%p37, %r3043, 0;
	setp.ne.s32 	%p38, %r3042, 0;
	and.pred  	%p39, %p37, %p38;
	@%p39 bra 	$L__BB0_201;
$L__BB0_202:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p40, %r152, 2139095039;
	selp.f32 	%f224, 0f7FFFFFFF, 0f4B800000, %p40;
	mul.f32 	%f225, %f783, 0f34000000;
	mul.f32 	%f784, %f224, %f225;
	bra.uni 	$L__BB0_203;
$L__BB0_193:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f207, 0f40000000;
	div.approx.f32 	%f208, %f788, %f207;
	cvt.rzi.f32.f32 	%f782, %f208;
	fma.rn.f32 	%f172, %f782, 0fC0000000, %f788;
	mov.b32 	%r151, %f172;
	setp.lt.u32 	%p31, %r151, 1073741824;
	@%p31 bra 	$L__BB0_198;
// %bb.194:
	setp.lt.u32 	%p32, %r151, -2147483647;
	@%p32 bra 	$L__BB0_196;
// %bb.195:
	add.f32 	%f213, %f782, 0fBF800000;
	setp.lt.f32 	%p35, %f172, 0fC0000000;
	add.f32 	%f214, %f213, 0fBF800000;
	selp.f32 	%f782, %f214, %f213, %p35;
	bra.uni 	$L__BB0_198;
$L__BB0_196:
	add.f32 	%f782, %f782, 0f3F800000;
	setp.ltu.f32 	%p33, %f172, 0f40800000;
	@%p33 bra 	$L__BB0_198;
// %bb.197:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f209, %f782, 0f3F800000;
	fma.rn.f32 	%f211, %f207, 0fC0400000, %f172;
	setp.ge.f32 	%p34, %f211, 0f00000000;
	add.f32 	%f212, %f209, 0f3F800000;
	selp.f32 	%f782, %f212, %f209, %p34;
$L__BB0_198:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f784, %f782, 0fC0000000, %f788;
$L__BB0_203:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f226, %f784;
	setp.gtu.f32 	%p41, %f226, 0f7F800000;
	mov.b32 	%r312, %f169;
	and.b32  	%r159, %r312, -2147483648;
	@%p41 bra 	$L__BB0_205;
// %bb.204:
	mov.b32 	%r313, %f784;
	or.b32  	%r314, %r159, %r313;
	mov.b32 	%f784, %r314;
$L__BB0_205:                            // %__nv_fmodf.exit
	shl.b32 	%r162, %r292, 1;
	and.b32  	%r163, %r162, 2;
	mul.lo.s32 	%r329, %r163, %r150;
	cvt.rn.f32.s32 	%f259, %r329;
	mov.f32 	%f260, 0f41400000;
	div.approx.f32 	%f186, %f259, %f260;
	abs.f32 	%f734, %f186;
	setp.lt.f32 	%p49, %f734, 0f40000000;
	@%p49 bra 	$L__BB0_25;
// %bb.14:
	setp.gtu.f32 	%p50, %f734, 0f4B800000;
	@%p50 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_15;
$L__BB0_21:
	mov.b32 	%r9, %f734;
	and.b32  	%r330, %r9, 8388607;
	or.b32  	%r2992, %r330, 1065353216;
	mov.b32 	%f733, %r2992;
	add.s32 	%r331, %r9, -1073741824;
	and.b32  	%r2993, %r331, -8388608;
	setp.eq.s32 	%p56, %r2993, 0;
	@%p56 bra 	$L__BB0_24;
// %bb.22:                              // %__nv_fmaf_rn.exit4.i.i.i1988.preheader
	mov.f32 	%f270, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f269,%f270;
	// end inline asm
$L__BB0_23:                             // %__nv_fmaf_rn.exit4.i.i.i1988
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r332, %r2993, 192937984;
	add.s32 	%r333, %r2992, %r332;
	mov.b32 	%f271, %r333;
	mul.f32 	%f272, %f269, %f271;
	sub.f32 	%f273, %f271, %f272;
	fma.rn.f32 	%f274, %f273, %f269, %f272;
	sub.f32 	%f275, %f271, %f274;
	fma.rz.f32 	%f276, %f275, %f269, %f274;
	cvt.rzi.f32.f32 	%f277, %f276;
	sub.f32 	%f733, %f271, %f277;
	sub.s32 	%r2993, %r2993, %r332;
	mov.b32 	%r2992, %f733;
	setp.ne.s32 	%p57, %r2993, 0;
	setp.ne.s32 	%p58, %r2992, 0;
	and.pred  	%p59, %p57, %p58;
	@%p59 bra 	$L__BB0_23;
$L__BB0_24:                             // %__internal_fmodf_slowpath_mod.exit.i.i1990
	setp.gt.u32 	%p60, %r9, 2139095039;
	selp.f32 	%f278, 0f7FFFFFFF, 0f4B800000, %p60;
	mul.f32 	%f279, %f733, 0f34000000;
	mul.f32 	%f734, %f278, %f279;
	bra.uni 	$L__BB0_25;
$L__BB0_15:                             // %__nv_fast_fdividef.exit.i.i.i1967
	mov.f32 	%f261, 0f40000000;
	div.approx.f32 	%f262, %f734, %f261;
	cvt.rzi.f32.f32 	%f732, %f262;
	fma.rn.f32 	%f2, %f732, 0fC0000000, %f734;
	mov.b32 	%r8, %f2;
	setp.lt.u32 	%p51, %r8, 1073741824;
	@%p51 bra 	$L__BB0_20;
// %bb.16:
	setp.lt.u32 	%p52, %r8, -2147483647;
	@%p52 bra 	$L__BB0_18;
// %bb.17:
	add.f32 	%f267, %f732, 0fBF800000;
	setp.lt.f32 	%p55, %f2, 0fC0000000;
	add.f32 	%f268, %f267, 0fBF800000;
	selp.f32 	%f732, %f268, %f267, %p55;
	bra.uni 	$L__BB0_20;
$L__BB0_18:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p53, %f2, 0f40800000;
	@%p53 bra 	$L__BB0_20;
// %bb.19:                              // %__nv_fmaf_rn.exit.i.i.i1971
	add.f32 	%f263, %f732, 0f3F800000;
	fma.rn.f32 	%f265, %f261, 0fC0400000, %f2;
	setp.ge.f32 	%p54, %f265, 0f00000000;
	add.f32 	%f266, %f263, 0f3F800000;
	selp.f32 	%f732, %f266, %f263, %p54;
$L__BB0_20:                             // %__internal_fmodf_fastpath_quot.exit.i.i1974
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_25:                             // %__internal_fmodf_kernel.exit.i1993
	or.b32  	%r164, %r163, 1;
	abs.f32 	%f280, %f734;
	setp.gtu.f32 	%p61, %f280, 0f7F800000;
	@%p61 bra 	$L__BB0_27;
// %bb.26:
	mov.b32 	%r334, %f186;
	and.b32  	%r335, %r334, -2147483648;
	mov.b32 	%r336, %f734;
	or.b32  	%r337, %r335, %r336;
	mov.b32 	%f734, %r337;
$L__BB0_27:                             // %__nv_fmodf.exit1994
	mov.f32 	%f250, 0f00000000;
	setp.eq.s32 	%p69, %r164, 3;
	mov.f32 	%f37, %f250;
	mov.f32 	%f38, %f250;
	@%p69 bra 	$L__BB0_43;
// %bb.28:                              // %L531
	mul.lo.s32 	%r346, %r164, %r150;
	mul.hi.u32 	%r347, %r346, -1431655765;
	shr.u32 	%r348, %r347, 4;
	mul.lo.s32 	%r349, %r348, 24;
	sub.s32 	%r350, %r346, %r349;
	cvt.rn.f32.s32 	%f311, %r350;
	div.approx.f32 	%f18, %f311, %f260;
	abs.f32 	%f738, %f18;
	setp.lt.f32 	%p70, %f738, 0f40000000;
	@%p70 bra 	$L__BB0_40;
// %bb.29:
	setp.gtu.f32 	%p71, %f738, 0f4B800000;
	@%p71 bra 	$L__BB0_36;
	bra.uni 	$L__BB0_30;
$L__BB0_36:
	mov.b32 	%r17, %f738;
	and.b32  	%r351, %r17, 8388607;
	or.b32  	%r2994, %r351, 1065353216;
	mov.b32 	%f737, %r2994;
	add.s32 	%r352, %r17, -1073741824;
	and.b32  	%r2995, %r352, -8388608;
	setp.eq.s32 	%p77, %r2995, 0;
	@%p77 bra 	$L__BB0_39;
// %bb.37:                              // %__nv_fmaf_rn.exit4.i.i.i2019.preheader
	mov.f32 	%f322, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f321,%f322;
	// end inline asm
$L__BB0_38:                             // %__nv_fmaf_rn.exit4.i.i.i2019
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r353, %r2995, 192937984;
	add.s32 	%r354, %r2994, %r353;
	mov.b32 	%f323, %r354;
	mul.f32 	%f324, %f321, %f323;
	sub.f32 	%f325, %f323, %f324;
	fma.rn.f32 	%f326, %f325, %f321, %f324;
	sub.f32 	%f327, %f323, %f326;
	fma.rz.f32 	%f328, %f327, %f321, %f326;
	cvt.rzi.f32.f32 	%f329, %f328;
	sub.f32 	%f737, %f323, %f329;
	sub.s32 	%r2995, %r2995, %r353;
	mov.b32 	%r2994, %f737;
	setp.ne.s32 	%p78, %r2995, 0;
	setp.ne.s32 	%p79, %r2994, 0;
	and.pred  	%p80, %p78, %p79;
	@%p80 bra 	$L__BB0_38;
$L__BB0_39:                             // %__internal_fmodf_slowpath_mod.exit.i.i2021
	setp.gt.u32 	%p81, %r17, 2139095039;
	selp.f32 	%f330, 0f7FFFFFFF, 0f4B800000, %p81;
	mul.f32 	%f331, %f737, 0f34000000;
	mul.f32 	%f738, %f330, %f331;
	bra.uni 	$L__BB0_40;
$L__BB0_30:                             // %__nv_fast_fdividef.exit.i.i.i1998
	mov.f32 	%f313, 0f40000000;
	div.approx.f32 	%f314, %f738, %f313;
	cvt.rzi.f32.f32 	%f736, %f314;
	fma.rn.f32 	%f21, %f736, 0fC0000000, %f738;
	mov.b32 	%r16, %f21;
	setp.lt.u32 	%p72, %r16, 1073741824;
	@%p72 bra 	$L__BB0_35;
// %bb.31:
	setp.lt.u32 	%p73, %r16, -2147483647;
	@%p73 bra 	$L__BB0_33;
// %bb.32:
	add.f32 	%f319, %f736, 0fBF800000;
	setp.lt.f32 	%p76, %f21, 0fC0000000;
	add.f32 	%f320, %f319, 0fBF800000;
	selp.f32 	%f736, %f320, %f319, %p76;
	bra.uni 	$L__BB0_35;
$L__BB0_33:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p74, %f21, 0f40800000;
	@%p74 bra 	$L__BB0_35;
// %bb.34:                              // %__nv_fmaf_rn.exit.i.i.i2002
	add.f32 	%f315, %f736, 0f3F800000;
	fma.rn.f32 	%f317, %f313, 0fC0400000, %f21;
	setp.ge.f32 	%p75, %f317, 0f00000000;
	add.f32 	%f318, %f315, 0f3F800000;
	selp.f32 	%f736, %f318, %f315, %p75;
$L__BB0_35:                             // %__internal_fmodf_fastpath_quot.exit.i.i2005
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_40:                             // %__internal_fmodf_kernel.exit.i2024
	abs.f32 	%f332, %f738;
	setp.gtu.f32 	%p82, %f332, 0f7F800000;
	@%p82 bra 	$L__BB0_42;
// %bb.41:
	mov.b32 	%r355, %f18;
	and.b32  	%r356, %r355, -2147483648;
	mov.b32 	%r357, %f738;
	or.b32  	%r358, %r356, %r357;
	mov.b32 	%f738, %r358;
$L__BB0_42:                             // %__nv_fmodf.exit2025
	add.f32 	%f333, %f738, %f738;
	mov.b32 	%r359, %f333;
	and.b32  	%r360, %r359, -2147483648;
	or.b32  	%r361, %r360, 1056964608;
	mov.b32 	%f334, %r361;
	add.f32 	%f335, %f333, %f334;
	cvt.rzi.f32.f32 	%f336, %f335;
	abs.f32 	%f337, %f333;
	setp.gt.f32 	%p83, %f337, 0f4B000000;
	selp.f32 	%f338, %f333, %f336, %p83;
	cvt.rzi.f32.f32 	%f339, %f333;
	setp.lt.f32 	%p84, %f337, 0f3F000000;
	selp.f32 	%f340, %f339, %f338, %p84;
	cvt.rzi.s32.f32 	%r362, %f340;
	fma.rn.f32 	%f341, %f340, 0fBF000000, %f738;
	mul.f32 	%f342, %f341, %f341;
	fma.rn.f32 	%f343, %f342, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f344, %f342, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f345, %f343, %f342, 0fC0A55DF6;
	fma.rn.f32 	%f346, %f344, %f342, 0f4081E0CF;
	fma.rn.f32 	%f347, %f342, %f341, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f342, 0fC09DE9E6;
	fma.rn.f32 	%f349, %f345, %f347, 0f00000000;
	fma.rn.f32 	%f350, %f348, %f342, 0f3F800000;
	fma.rn.f32 	%f351, %f341, 0f40490FDB, %f349;
	and.b32  	%r363, %r362, 1;
	setp.eq.b32 	%p85, %r363, 1;
	selp.f32 	%f352, %f350, %f351, %p85;
	selp.f32 	%f353, %f351, %f350, %p85;
	and.b32  	%r364, %r362, 2;
	setp.eq.s32 	%p86, %r364, 0;
	neg.f32 	%f354, %f352;
	selp.f32 	%f355, %f352, %f354, %p86;
	add.s32 	%r365, %r362, 1;
	and.b32  	%r366, %r365, 2;
	setp.eq.s32 	%p87, %r366, 0;
	mov.f32 	%f356, 0f00000000;
	sub.f32 	%f357, %f356, %f353;
	selp.f32 	%f358, %f353, %f357, %p87;
	cvt.rzi.f32.f32 	%f359, %f738;
	setp.eq.f32 	%p88, %f359, %f738;
	mul.f32 	%f360, %f738, 0f00000000;
	selp.f32 	%f38, %f360, %f355, %p88;
	abs.f32 	%f361, %f738;
	setp.gt.f32 	%p89, %f361, 0f4B800000;
	add.f32 	%f362, %f38, 0f3F800000;
	selp.f32 	%f37, %f362, %f358, %p89;
$L__BB0_43:                             // %L565
	and.b32  	%r26, %r150, 3;
	setp.eq.s32 	%p90, %r26, 3;
	mov.f32 	%f731, 0f3FC00000;
	mov.f32 	%f746, %f250;
	mov.f32 	%f755, %f250;
	@%p90 bra 	$L__BB0_59;
// %bb.44:                              // %L603
	mul.lo.s32 	%r373, %r163, %r26;
	cvt.u16.u32 	%rs9, %r373;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 9;
	mul.lo.s16 	%rs12, %rs11, 3;
	sub.s16 	%rs13, %rs9, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f364, %rs14;
	div.approx.f32 	%f39, %f364, %f731;
	abs.f32 	%f744, %f39;
	setp.lt.f32 	%p91, %f744, 0f40000000;
	@%p91 bra 	$L__BB0_56;
// %bb.45:
	setp.gtu.f32 	%p92, %f744, 0f4B800000;
	@%p92 bra 	$L__BB0_52;
	bra.uni 	$L__BB0_46;
$L__BB0_52:
	mov.b32 	%r28, %f744;
	and.b32  	%r374, %r28, 8388607;
	or.b32  	%r2996, %r374, 1065353216;
	mov.b32 	%f743, %r2996;
	add.s32 	%r375, %r28, -1073741824;
	and.b32  	%r2997, %r375, -8388608;
	setp.eq.s32 	%p98, %r2997, 0;
	@%p98 bra 	$L__BB0_55;
// %bb.53:                              // %__nv_fmaf_rn.exit4.i.i.i2050.preheader
	mov.f32 	%f375, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f374,%f375;
	// end inline asm
$L__BB0_54:                             // %__nv_fmaf_rn.exit4.i.i.i2050
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r376, %r2997, 192937984;
	add.s32 	%r377, %r2996, %r376;
	mov.b32 	%f376, %r377;
	mul.f32 	%f377, %f374, %f376;
	sub.f32 	%f378, %f376, %f377;
	fma.rn.f32 	%f379, %f378, %f374, %f377;
	sub.f32 	%f380, %f376, %f379;
	fma.rz.f32 	%f381, %f380, %f374, %f379;
	cvt.rzi.f32.f32 	%f382, %f381;
	sub.f32 	%f743, %f376, %f382;
	sub.s32 	%r2997, %r2997, %r376;
	mov.b32 	%r2996, %f743;
	setp.ne.s32 	%p99, %r2997, 0;
	setp.ne.s32 	%p100, %r2996, 0;
	and.pred  	%p101, %p99, %p100;
	@%p101 bra 	$L__BB0_54;
$L__BB0_55:                             // %__internal_fmodf_slowpath_mod.exit.i.i2052
	setp.gt.u32 	%p102, %r28, 2139095039;
	selp.f32 	%f383, 0f7FFFFFFF, 0f4B800000, %p102;
	mul.f32 	%f384, %f743, 0f34000000;
	mul.f32 	%f744, %f383, %f384;
	bra.uni 	$L__BB0_56;
$L__BB0_46:                             // %__nv_fast_fdividef.exit.i.i.i2029
	mov.f32 	%f366, 0f40000000;
	div.approx.f32 	%f367, %f744, %f366;
	cvt.rzi.f32.f32 	%f742, %f367;
	fma.rn.f32 	%f42, %f742, 0fC0000000, %f744;
	mov.b32 	%r27, %f42;
	setp.lt.u32 	%p93, %r27, 1073741824;
	@%p93 bra 	$L__BB0_51;
// %bb.47:
	setp.lt.u32 	%p94, %r27, -2147483647;
	@%p94 bra 	$L__BB0_49;
// %bb.48:
	add.f32 	%f372, %f742, 0fBF800000;
	setp.lt.f32 	%p97, %f42, 0fC0000000;
	add.f32 	%f373, %f372, 0fBF800000;
	selp.f32 	%f742, %f373, %f372, %p97;
	bra.uni 	$L__BB0_51;
$L__BB0_49:
	add.f32 	%f742, %f742, 0f3F800000;
	setp.ltu.f32 	%p95, %f42, 0f40800000;
	@%p95 bra 	$L__BB0_51;
// %bb.50:                              // %__nv_fmaf_rn.exit.i.i.i2033
	add.f32 	%f368, %f742, 0f3F800000;
	fma.rn.f32 	%f370, %f366, 0fC0400000, %f42;
	setp.ge.f32 	%p96, %f370, 0f00000000;
	add.f32 	%f371, %f368, 0f3F800000;
	selp.f32 	%f742, %f371, %f368, %p96;
$L__BB0_51:                             // %__internal_fmodf_fastpath_quot.exit.i.i2036
	fma.rn.f32 	%f744, %f742, 0fC0000000, %f744;
$L__BB0_56:                             // %__internal_fmodf_kernel.exit.i2055
	abs.f32 	%f385, %f744;
	setp.gtu.f32 	%p103, %f385, 0f7F800000;
	@%p103 bra 	$L__BB0_58;
// %bb.57:
	mov.b32 	%r378, %f39;
	and.b32  	%r379, %r378, -2147483648;
	mov.b32 	%r380, %f744;
	or.b32  	%r381, %r379, %r380;
	mov.b32 	%f744, %r381;
$L__BB0_58:                             // %__nv_fmodf.exit2056
	add.f32 	%f386, %f744, %f744;
	mov.b32 	%r382, %f386;
	and.b32  	%r383, %r382, -2147483648;
	or.b32  	%r384, %r383, 1056964608;
	mov.b32 	%f387, %r384;
	add.f32 	%f388, %f386, %f387;
	cvt.rzi.f32.f32 	%f389, %f388;
	abs.f32 	%f390, %f386;
	setp.gt.f32 	%p104, %f390, 0f4B000000;
	selp.f32 	%f391, %f386, %f389, %p104;
	cvt.rzi.f32.f32 	%f392, %f386;
	setp.lt.f32 	%p105, %f390, 0f3F000000;
	selp.f32 	%f393, %f392, %f391, %p105;
	cvt.rzi.s32.f32 	%r385, %f393;
	fma.rn.f32 	%f394, %f393, 0fBF000000, %f744;
	mul.f32 	%f395, %f394, %f394;
	fma.rn.f32 	%f396, %f395, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f397, %f395, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f398, %f396, %f395, 0fC0A55DF6;
	fma.rn.f32 	%f399, %f397, %f395, 0f4081E0CF;
	fma.rn.f32 	%f400, %f395, %f394, 0f00000000;
	fma.rn.f32 	%f401, %f399, %f395, 0fC09DE9E6;
	fma.rn.f32 	%f402, %f398, %f400, 0f00000000;
	fma.rn.f32 	%f403, %f401, %f395, 0f3F800000;
	fma.rn.f32 	%f404, %f394, 0f40490FDB, %f402;
	and.b32  	%r386, %r385, 1;
	setp.eq.b32 	%p106, %r386, 1;
	selp.f32 	%f405, %f403, %f404, %p106;
	selp.f32 	%f406, %f404, %f403, %p106;
	and.b32  	%r387, %r385, 2;
	setp.eq.s32 	%p107, %r387, 0;
	neg.f32 	%f407, %f405;
	selp.f32 	%f408, %f405, %f407, %p107;
	add.s32 	%r388, %r385, 1;
	and.b32  	%r389, %r388, 2;
	setp.eq.s32 	%p108, %r389, 0;
	mov.f32 	%f409, 0f00000000;
	sub.f32 	%f410, %f409, %f406;
	selp.f32 	%f411, %f406, %f410, %p108;
	cvt.rzi.f32.f32 	%f412, %f744;
	setp.eq.f32 	%p109, %f412, %f744;
	mul.f32 	%f413, %f744, 0f00000000;
	selp.f32 	%f755, %f413, %f408, %p109;
	abs.f32 	%f414, %f744;
	setp.gt.f32 	%p110, %f414, 0f4B800000;
	add.f32 	%f415, %f755, 0f3F800000;
	selp.f32 	%f746, %f415, %f411, %p110;
$L__BB0_59:                             // %L637
	or.pred  	%p113, %p69, %p90;
	mov.f32 	%f752, %f250;
	mov.f32 	%f757, %f250;
	@%p113 bra 	$L__BB0_75;
// %bb.60:                              // %L645
	mul.lo.s32 	%r390, %r164, %r26;
	mul.hi.u32 	%r391, %r390, -1431655765;
	shr.u32 	%r392, %r391, 1;
	mul.lo.s32 	%r393, %r392, 3;
	sub.s32 	%r394, %r390, %r393;
	cvt.rn.f32.s32 	%f417, %r394;
	div.approx.f32 	%f60, %f417, %f731;
	abs.f32 	%f750, %f60;
	setp.lt.f32 	%p114, %f750, 0f40000000;
	@%p114 bra 	$L__BB0_72;
// %bb.61:
	setp.gtu.f32 	%p115, %f750, 0f4B800000;
	@%p115 bra 	$L__BB0_68;
	bra.uni 	$L__BB0_62;
$L__BB0_68:
	mov.b32 	%r36, %f750;
	and.b32  	%r395, %r36, 8388607;
	or.b32  	%r2998, %r395, 1065353216;
	mov.b32 	%f749, %r2998;
	add.s32 	%r396, %r36, -1073741824;
	and.b32  	%r2999, %r396, -8388608;
	setp.eq.s32 	%p121, %r2999, 0;
	@%p121 bra 	$L__BB0_71;
// %bb.69:                              // %__nv_fmaf_rn.exit4.i.i.i2081.preheader
	mov.f32 	%f428, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f427,%f428;
	// end inline asm
$L__BB0_70:                             // %__nv_fmaf_rn.exit4.i.i.i2081
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r397, %r2999, 192937984;
	add.s32 	%r398, %r2998, %r397;
	mov.b32 	%f429, %r398;
	mul.f32 	%f430, %f427, %f429;
	sub.f32 	%f431, %f429, %f430;
	fma.rn.f32 	%f432, %f431, %f427, %f430;
	sub.f32 	%f433, %f429, %f432;
	fma.rz.f32 	%f434, %f433, %f427, %f432;
	cvt.rzi.f32.f32 	%f435, %f434;
	sub.f32 	%f749, %f429, %f435;
	sub.s32 	%r2999, %r2999, %r397;
	mov.b32 	%r2998, %f749;
	setp.ne.s32 	%p122, %r2999, 0;
	setp.ne.s32 	%p123, %r2998, 0;
	and.pred  	%p124, %p122, %p123;
	@%p124 bra 	$L__BB0_70;
$L__BB0_71:                             // %__internal_fmodf_slowpath_mod.exit.i.i2083
	setp.gt.u32 	%p125, %r36, 2139095039;
	selp.f32 	%f436, 0f7FFFFFFF, 0f4B800000, %p125;
	mul.f32 	%f437, %f749, 0f34000000;
	mul.f32 	%f750, %f436, %f437;
	bra.uni 	$L__BB0_72;
$L__BB0_62:                             // %__nv_fast_fdividef.exit.i.i.i2060
	mov.f32 	%f419, 0f40000000;
	div.approx.f32 	%f420, %f750, %f419;
	cvt.rzi.f32.f32 	%f748, %f420;
	fma.rn.f32 	%f63, %f748, 0fC0000000, %f750;
	mov.b32 	%r35, %f63;
	setp.lt.u32 	%p116, %r35, 1073741824;
	@%p116 bra 	$L__BB0_67;
// %bb.63:
	setp.lt.u32 	%p117, %r35, -2147483647;
	@%p117 bra 	$L__BB0_65;
// %bb.64:
	add.f32 	%f425, %f748, 0fBF800000;
	setp.lt.f32 	%p120, %f63, 0fC0000000;
	add.f32 	%f426, %f425, 0fBF800000;
	selp.f32 	%f748, %f426, %f425, %p120;
	bra.uni 	$L__BB0_67;
$L__BB0_65:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p118, %f63, 0f40800000;
	@%p118 bra 	$L__BB0_67;
// %bb.66:                              // %__nv_fmaf_rn.exit.i.i.i2064
	add.f32 	%f421, %f748, 0f3F800000;
	fma.rn.f32 	%f423, %f419, 0fC0400000, %f63;
	setp.ge.f32 	%p119, %f423, 0f00000000;
	add.f32 	%f424, %f421, 0f3F800000;
	selp.f32 	%f748, %f424, %f421, %p119;
$L__BB0_67:                             // %__internal_fmodf_fastpath_quot.exit.i.i2067
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_72:                             // %__internal_fmodf_kernel.exit.i2086
	abs.f32 	%f438, %f750;
	setp.gtu.f32 	%p126, %f438, 0f7F800000;
	@%p126 bra 	$L__BB0_74;
// %bb.73:
	mov.b32 	%r399, %f60;
	and.b32  	%r400, %r399, -2147483648;
	mov.b32 	%r401, %f750;
	or.b32  	%r402, %r400, %r401;
	mov.b32 	%f750, %r402;
$L__BB0_74:                             // %__nv_fmodf.exit2087
	add.f32 	%f439, %f750, %f750;
	mov.b32 	%r403, %f439;
	and.b32  	%r404, %r403, -2147483648;
	or.b32  	%r405, %r404, 1056964608;
	mov.b32 	%f440, %r405;
	add.f32 	%f441, %f439, %f440;
	cvt.rzi.f32.f32 	%f442, %f441;
	abs.f32 	%f443, %f439;
	setp.gt.f32 	%p127, %f443, 0f4B000000;
	selp.f32 	%f444, %f439, %f442, %p127;
	cvt.rzi.f32.f32 	%f445, %f439;
	setp.lt.f32 	%p128, %f443, 0f3F000000;
	selp.f32 	%f446, %f445, %f444, %p128;
	cvt.rzi.s32.f32 	%r406, %f446;
	fma.rn.f32 	%f447, %f446, 0fBF000000, %f750;
	mul.f32 	%f448, %f447, %f447;
	fma.rn.f32 	%f449, %f448, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f450, %f448, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f451, %f449, %f448, 0fC0A55DF6;
	fma.rn.f32 	%f452, %f450, %f448, 0f4081E0CF;
	fma.rn.f32 	%f453, %f448, %f447, 0f00000000;
	fma.rn.f32 	%f454, %f452, %f448, 0fC09DE9E6;
	fma.rn.f32 	%f455, %f451, %f453, 0f00000000;
	fma.rn.f32 	%f456, %f454, %f448, 0f3F800000;
	fma.rn.f32 	%f457, %f447, 0f40490FDB, %f455;
	and.b32  	%r407, %r406, 1;
	setp.eq.b32 	%p129, %r407, 1;
	selp.f32 	%f458, %f456, %f457, %p129;
	selp.f32 	%f459, %f457, %f456, %p129;
	and.b32  	%r408, %r406, 2;
	setp.eq.s32 	%p130, %r408, 0;
	neg.f32 	%f460, %f458;
	selp.f32 	%f461, %f458, %f460, %p130;
	add.s32 	%r409, %r406, 1;
	and.b32  	%r410, %r409, 2;
	setp.eq.s32 	%p131, %r410, 0;
	mov.f32 	%f462, 0f00000000;
	sub.f32 	%f463, %f462, %f459;
	selp.f32 	%f464, %f459, %f463, %p131;
	cvt.rzi.f32.f32 	%f465, %f750;
	setp.eq.f32 	%p132, %f465, %f750;
	mul.f32 	%f466, %f750, 0f00000000;
	selp.f32 	%f757, %f466, %f461, %p132;
	abs.f32 	%f467, %f750;
	setp.gt.f32 	%p133, %f467, 0f4B800000;
	add.f32 	%f468, %f757, 0f3F800000;
	selp.f32 	%f752, %f468, %f464, %p133;
$L__BB0_75:                             // %L679
	and.b32  	%r43, %r292, 2;
	setp.eq.s32 	%p134, %r43, 0;
	mov.f32 	%f83, %f746;
	mov.f32 	%f85, %f752;
	@%p134 bra 	$L__BB0_77;
// %bb.76:                              // %L688
	neg.f32 	%f85, %f757;
	neg.f32 	%f83, %f755;
	mov.f32 	%f755, %f746;
	mov.f32 	%f757, %f752;
$L__BB0_77:                             // %L690
	@%p29 bra 	$L__BB0_213;
// %bb.78:
	@%p322 bra 	$L__BB0_209;
	bra.uni 	$L__BB0_79;
$L__BB0_209:
	mov.b32 	%r166, %f788;
	and.b32  	%r417, %r166, 8388607;
	or.b32  	%r3044, %r417, 1065353216;
	mov.b32 	%f787, %r3044;
	add.s32 	%r418, %r166, -1073741824;
	and.b32  	%r3045, %r418, -8388608;
	setp.eq.s32 	%p142, %r3045, 0;
	@%p142 bra 	$L__BB0_212;
// %bb.210:                             // %__nv_fmaf_rn.exit4.i.i.i2112.preheader
	mov.f32 	%f478, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f477,%f478;
	// end inline asm
$L__BB0_211:                            // %__nv_fmaf_rn.exit4.i.i.i2112
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r419, %r3045, 192937984;
	add.s32 	%r420, %r3044, %r419;
	mov.b32 	%f479, %r420;
	mul.f32 	%f480, %f477, %f479;
	sub.f32 	%f481, %f479, %f480;
	fma.rn.f32 	%f482, %f481, %f477, %f480;
	sub.f32 	%f483, %f479, %f482;
	fma.rz.f32 	%f484, %f483, %f477, %f482;
	cvt.rzi.f32.f32 	%f485, %f484;
	sub.f32 	%f787, %f479, %f485;
	sub.s32 	%r3045, %r3045, %r419;
	mov.b32 	%r3044, %f787;
	setp.ne.s32 	%p143, %r3045, 0;
	setp.ne.s32 	%p144, %r3044, 0;
	and.pred  	%p145, %p143, %p144;
	@%p145 bra 	$L__BB0_211;
$L__BB0_212:                            // %__internal_fmodf_slowpath_mod.exit.i.i2114
	setp.gt.u32 	%p146, %r166, 2139095039;
	selp.f32 	%f486, 0f7FFFFFFF, 0f4B800000, %p146;
	mul.f32 	%f487, %f787, 0f34000000;
	mul.f32 	%f788, %f486, %f487;
	bra.uni 	$L__BB0_213;
$L__BB0_79:                             // %__nv_fast_fdividef.exit.i.i.i2091
	mov.f32 	%f469, 0f40000000;
	div.approx.f32 	%f470, %f788, %f469;
	cvt.rzi.f32.f32 	%f786, %f470;
	fma.rn.f32 	%f189, %f786, 0fC0000000, %f788;
	mov.b32 	%r165, %f189;
	setp.lt.u32 	%p137, %r165, 1073741824;
	@%p137 bra 	$L__BB0_208;
// %bb.80:
	setp.lt.u32 	%p138, %r165, -2147483647;
	@%p138 bra 	$L__BB0_206;
// %bb.81:
	add.f32 	%f475, %f786, 0fBF800000;
	setp.lt.f32 	%p141, %f189, 0fC0000000;
	add.f32 	%f476, %f475, 0fBF800000;
	selp.f32 	%f786, %f476, %f475, %p141;
	bra.uni 	$L__BB0_208;
$L__BB0_206:
	add.f32 	%f786, %f786, 0f3F800000;
	setp.ltu.f32 	%p139, %f189, 0f40800000;
	@%p139 bra 	$L__BB0_208;
// %bb.207:                             // %__nv_fmaf_rn.exit.i.i.i2095
	add.f32 	%f471, %f786, 0f3F800000;
	fma.rn.f32 	%f473, %f469, 0fC0400000, %f189;
	setp.ge.f32 	%p140, %f473, 0f00000000;
	add.f32 	%f474, %f471, 0f3F800000;
	selp.f32 	%f786, %f474, %f471, %p140;
$L__BB0_208:                            // %__internal_fmodf_fastpath_quot.exit.i.i2098
	fma.rn.f32 	%f788, %f786, 0fC0000000, %f788;
$L__BB0_213:                            // %__internal_fmodf_kernel.exit.i2117
	abs.f32 	%f488, %f788;
	setp.gtu.f32 	%p147, %f488, 0f7F800000;
	@%p147 bra 	$L__BB0_215;
// %bb.214:
	mov.b32 	%r421, %f788;
	or.b32  	%r422, %r159, %r421;
	mov.b32 	%f788, %r422;
$L__BB0_215:                            // %__nv_fmodf.exit2118
	mov.f32 	%f512, 0f00000000;
	mov.f32 	%f521, 0f41000000;
	div.approx.f32 	%f203, %f512, %f521;
	abs.f32 	%f760, %f203;
	setp.lt.f32 	%p155, %f760, 0f40000000;
	@%p155 bra 	$L__BB0_93;
// %bb.82:
	setp.gtu.f32 	%p156, %f760, 0f4B800000;
	@%p156 bra 	$L__BB0_89;
	bra.uni 	$L__BB0_83;
$L__BB0_89:
	mov.b32 	%r47, %f760;
	and.b32  	%r437, %r47, 8388607;
	or.b32  	%r3000, %r437, 1065353216;
	mov.b32 	%f759, %r3000;
	add.s32 	%r438, %r47, -1073741824;
	and.b32  	%r3001, %r438, -8388608;
	setp.eq.s32 	%p162, %r3001, 0;
	@%p162 bra 	$L__BB0_92;
// %bb.90:                              // %__nv_fmaf_rn.exit4.i.i.i2143.preheader
	mov.f32 	%f531, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f530,%f531;
	// end inline asm
$L__BB0_91:                             // %__nv_fmaf_rn.exit4.i.i.i2143
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r439, %r3001, 192937984;
	add.s32 	%r440, %r3000, %r439;
	mov.b32 	%f532, %r440;
	mul.f32 	%f533, %f530, %f532;
	sub.f32 	%f534, %f532, %f533;
	fma.rn.f32 	%f535, %f534, %f530, %f533;
	sub.f32 	%f536, %f532, %f535;
	fma.rz.f32 	%f537, %f536, %f530, %f535;
	cvt.rzi.f32.f32 	%f538, %f537;
	sub.f32 	%f759, %f532, %f538;
	sub.s32 	%r3001, %r3001, %r439;
	mov.b32 	%r3000, %f759;
	setp.ne.s32 	%p163, %r3001, 0;
	setp.ne.s32 	%p164, %r3000, 0;
	and.pred  	%p165, %p163, %p164;
	@%p165 bra 	$L__BB0_91;
$L__BB0_92:                             // %__internal_fmodf_slowpath_mod.exit.i.i2145
	setp.gt.u32 	%p166, %r47, 2139095039;
	selp.f32 	%f539, 0f7FFFFFFF, 0f4B800000, %p166;
	mul.f32 	%f540, %f759, 0f34000000;
	mul.f32 	%f760, %f539, %f540;
	bra.uni 	$L__BB0_93;
$L__BB0_83:                             // %__nv_fast_fdividef.exit.i.i.i2122
	mov.f32 	%f522, 0f40000000;
	div.approx.f32 	%f523, %f760, %f522;
	cvt.rzi.f32.f32 	%f758, %f523;
	fma.rn.f32 	%f88, %f758, 0fC0000000, %f760;
	mov.b32 	%r46, %f88;
	setp.lt.u32 	%p157, %r46, 1073741824;
	@%p157 bra 	$L__BB0_88;
// %bb.84:
	setp.lt.u32 	%p158, %r46, -2147483647;
	@%p158 bra 	$L__BB0_86;
// %bb.85:
	add.f32 	%f528, %f758, 0fBF800000;
	setp.lt.f32 	%p161, %f88, 0fC0000000;
	add.f32 	%f529, %f528, 0fBF800000;
	selp.f32 	%f758, %f529, %f528, %p161;
	bra.uni 	$L__BB0_88;
$L__BB0_86:
	add.f32 	%f758, %f758, 0f3F800000;
	setp.ltu.f32 	%p159, %f88, 0f40800000;
	@%p159 bra 	$L__BB0_88;
// %bb.87:                              // %__nv_fmaf_rn.exit.i.i.i2126
	add.f32 	%f524, %f758, 0f3F800000;
	fma.rn.f32 	%f526, %f522, 0fC0400000, %f88;
	setp.ge.f32 	%p160, %f526, 0f00000000;
	add.f32 	%f527, %f524, 0f3F800000;
	selp.f32 	%f758, %f527, %f524, %p160;
$L__BB0_88:                             // %__internal_fmodf_fastpath_quot.exit.i.i2129
	fma.rn.f32 	%f760, %f758, 0fC0000000, %f760;
$L__BB0_93:                             // %__internal_fmodf_kernel.exit.i2148
	abs.f32 	%f541, %f760;
	setp.gtu.f32 	%p167, %f541, 0f7F800000;
	@%p167 bra 	$L__BB0_95;
// %bb.94:
	mov.b32 	%r441, %f203;
	and.b32  	%r442, %r441, -2147483648;
	mov.b32 	%r443, %f760;
	or.b32  	%r444, %r442, %r443;
	mov.b32 	%f760, %r444;
$L__BB0_95:                             // %__nv_fmodf.exit2149
	cvt.rn.f32.s32 	%f572, %r150;
	div.approx.f32 	%f104, %f572, %f521;
	abs.f32 	%f764, %f104;
	setp.lt.f32 	%p175, %f764, 0f40000000;
	@%p175 bra 	$L__BB0_107;
// %bb.96:
	setp.gtu.f32 	%p176, %f764, 0f4B800000;
	@%p176 bra 	$L__BB0_103;
	bra.uni 	$L__BB0_97;
$L__BB0_103:
	mov.b32 	%r55, %f764;
	and.b32  	%r453, %r55, 8388607;
	or.b32  	%r3002, %r453, 1065353216;
	mov.b32 	%f763, %r3002;
	add.s32 	%r454, %r55, -1073741824;
	and.b32  	%r3003, %r454, -8388608;
	setp.eq.s32 	%p182, %r3003, 0;
	@%p182 bra 	$L__BB0_106;
// %bb.104:                             // %__nv_fmaf_rn.exit4.i.i.i2174.preheader
	mov.f32 	%f583, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f582,%f583;
	// end inline asm
$L__BB0_105:                            // %__nv_fmaf_rn.exit4.i.i.i2174
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r455, %r3003, 192937984;
	add.s32 	%r456, %r3002, %r455;
	mov.b32 	%f584, %r456;
	mul.f32 	%f585, %f582, %f584;
	sub.f32 	%f586, %f584, %f585;
	fma.rn.f32 	%f587, %f586, %f582, %f585;
	sub.f32 	%f588, %f584, %f587;
	fma.rz.f32 	%f589, %f588, %f582, %f587;
	cvt.rzi.f32.f32 	%f590, %f589;
	sub.f32 	%f763, %f584, %f590;
	sub.s32 	%r3003, %r3003, %r455;
	mov.b32 	%r3002, %f763;
	setp.ne.s32 	%p183, %r3003, 0;
	setp.ne.s32 	%p184, %r3002, 0;
	and.pred  	%p185, %p183, %p184;
	@%p185 bra 	$L__BB0_105;
$L__BB0_106:                            // %__internal_fmodf_slowpath_mod.exit.i.i2176
	setp.gt.u32 	%p186, %r55, 2139095039;
	selp.f32 	%f591, 0f7FFFFFFF, 0f4B800000, %p186;
	mul.f32 	%f592, %f763, 0f34000000;
	mul.f32 	%f764, %f591, %f592;
	bra.uni 	$L__BB0_107;
$L__BB0_97:                             // %__nv_fast_fdividef.exit.i.i.i2153
	mov.f32 	%f574, 0f40000000;
	div.approx.f32 	%f575, %f764, %f574;
	cvt.rzi.f32.f32 	%f762, %f575;
	fma.rn.f32 	%f107, %f762, 0fC0000000, %f764;
	mov.b32 	%r54, %f107;
	setp.lt.u32 	%p177, %r54, 1073741824;
	@%p177 bra 	$L__BB0_102;
// %bb.98:
	setp.lt.u32 	%p178, %r54, -2147483647;
	@%p178 bra 	$L__BB0_100;
// %bb.99:
	add.f32 	%f580, %f762, 0fBF800000;
	setp.lt.f32 	%p181, %f107, 0fC0000000;
	add.f32 	%f581, %f580, 0fBF800000;
	selp.f32 	%f762, %f581, %f580, %p181;
	bra.uni 	$L__BB0_102;
$L__BB0_100:
	add.f32 	%f762, %f762, 0f3F800000;
	setp.ltu.f32 	%p179, %f107, 0f40800000;
	@%p179 bra 	$L__BB0_102;
// %bb.101:                             // %__nv_fmaf_rn.exit.i.i.i2157
	add.f32 	%f576, %f762, 0f3F800000;
	fma.rn.f32 	%f578, %f574, 0fC0400000, %f107;
	setp.ge.f32 	%p180, %f578, 0f00000000;
	add.f32 	%f579, %f576, 0f3F800000;
	selp.f32 	%f762, %f579, %f576, %p180;
$L__BB0_102:                            // %__internal_fmodf_fastpath_quot.exit.i.i2160
	fma.rn.f32 	%f764, %f762, 0fC0000000, %f764;
$L__BB0_107:                            // %__internal_fmodf_kernel.exit.i2179
	abs.f32 	%f593, %f764;
	setp.gtu.f32 	%p187, %f593, 0f7F800000;
	@%p187 bra 	$L__BB0_109;
// %bb.108:
	mov.b32 	%r457, %f104;
	and.b32  	%r458, %r457, -2147483648;
	mov.b32 	%r459, %f764;
	or.b32  	%r460, %r458, %r459;
	mov.b32 	%f764, %r460;
$L__BB0_109:                            // %__nv_fmodf.exit2180
	and.b32  	%r65, %r292, 1;
	shr.u32 	%r66, %r292, 4;
	setp.ne.s32 	%p195, %r65, %r66;
	mov.f32 	%f770, %f512;
	mov.f32 	%f779, %f512;
	@%p195 bra 	$L__BB0_125;
// %bb.110:                             // %L895
	mov.f32 	%f626, 0f3F800000;
	mov.f32 	%f627, 0f00000000;
	div.approx.f32 	%f121, %f627, %f626;
	abs.f32 	%f768, %f121;
	setp.lt.f32 	%p196, %f768, 0f40000000;
	@%p196 bra 	$L__BB0_122;
// %bb.111:
	setp.gtu.f32 	%p197, %f768, 0f4B800000;
	@%p197 bra 	$L__BB0_118;
	bra.uni 	$L__BB0_112;
$L__BB0_118:
	mov.b32 	%r68, %f768;
	and.b32  	%r475, %r68, 8388607;
	or.b32  	%r3004, %r475, 1065353216;
	mov.b32 	%f767, %r3004;
	add.s32 	%r476, %r68, -1073741824;
	and.b32  	%r3005, %r476, -8388608;
	setp.eq.s32 	%p203, %r3005, 0;
	@%p203 bra 	$L__BB0_121;
// %bb.119:                             // %__nv_fmaf_rn.exit4.i.i.i2205.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f636,%f626;
	// end inline asm
$L__BB0_120:                            // %__nv_fmaf_rn.exit4.i.i.i2205
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r477, %r3005, 192937984;
	add.s32 	%r478, %r3004, %r477;
	mov.b32 	%f638, %r478;
	mul.f32 	%f639, %f636, %f638;
	sub.f32 	%f640, %f638, %f639;
	fma.rn.f32 	%f641, %f640, %f636, %f639;
	sub.f32 	%f642, %f638, %f641;
	fma.rz.f32 	%f643, %f642, %f636, %f641;
	cvt.rzi.f32.f32 	%f644, %f643;
	sub.f32 	%f767, %f638, %f644;
	sub.s32 	%r3005, %r3005, %r477;
	mov.b32 	%r3004, %f767;
	setp.ne.s32 	%p204, %r3005, 0;
	setp.ne.s32 	%p205, %r3004, 0;
	and.pred  	%p206, %p204, %p205;
	@%p206 bra 	$L__BB0_120;
$L__BB0_121:                            // %__internal_fmodf_slowpath_mod.exit.i.i2207
	setp.gt.u32 	%p207, %r68, 2139095039;
	selp.f32 	%f645, 0f7FFFFFFF, 0f4B800000, %p207;
	mul.f32 	%f646, %f767, 0f34000000;
	mul.f32 	%f768, %f645, %f646;
	bra.uni 	$L__BB0_122;
$L__BB0_112:                            // %__nv_fast_fdividef.exit.i.i.i2184
	mov.f32 	%f628, 0f40000000;
	div.approx.f32 	%f629, %f768, %f628;
	cvt.rzi.f32.f32 	%f766, %f629;
	fma.rn.f32 	%f124, %f766, 0fC0000000, %f768;
	mov.b32 	%r67, %f124;
	setp.lt.u32 	%p198, %r67, 1073741824;
	@%p198 bra 	$L__BB0_117;
// %bb.113:
	setp.lt.u32 	%p199, %r67, -2147483647;
	@%p199 bra 	$L__BB0_115;
// %bb.114:
	add.f32 	%f634, %f766, 0fBF800000;
	setp.lt.f32 	%p202, %f124, 0fC0000000;
	add.f32 	%f635, %f634, 0fBF800000;
	selp.f32 	%f766, %f635, %f634, %p202;
	bra.uni 	$L__BB0_117;
$L__BB0_115:
	add.f32 	%f766, %f766, 0f3F800000;
	setp.ltu.f32 	%p200, %f124, 0f40800000;
	@%p200 bra 	$L__BB0_117;
// %bb.116:                             // %__nv_fmaf_rn.exit.i.i.i2188
	add.f32 	%f630, %f766, 0f3F800000;
	fma.rn.f32 	%f632, %f628, 0fC0400000, %f124;
	setp.ge.f32 	%p201, %f632, 0f00000000;
	add.f32 	%f633, %f630, 0f3F800000;
	selp.f32 	%f766, %f633, %f630, %p201;
$L__BB0_117:                            // %__internal_fmodf_fastpath_quot.exit.i.i2191
	fma.rn.f32 	%f768, %f766, 0fC0000000, %f768;
$L__BB0_122:                            // %__internal_fmodf_kernel.exit.i2210
	abs.f32 	%f647, %f768;
	setp.gtu.f32 	%p208, %f647, 0f7F800000;
	@%p208 bra 	$L__BB0_124;
// %bb.123:
	mov.b32 	%r479, %f121;
	and.b32  	%r480, %r479, -2147483648;
	mov.b32 	%r481, %f768;
	or.b32  	%r482, %r480, %r481;
	mov.b32 	%f768, %r482;
$L__BB0_124:                            // %__nv_fmodf.exit2211
	add.f32 	%f648, %f768, %f768;
	mov.b32 	%r483, %f648;
	and.b32  	%r484, %r483, -2147483648;
	or.b32  	%r485, %r484, 1056964608;
	mov.b32 	%f649, %r485;
	add.f32 	%f650, %f648, %f649;
	cvt.rzi.f32.f32 	%f651, %f650;
	abs.f32 	%f652, %f648;
	setp.gt.f32 	%p209, %f652, 0f4B000000;
	selp.f32 	%f653, %f648, %f651, %p209;
	cvt.rzi.f32.f32 	%f654, %f648;
	setp.lt.f32 	%p210, %f652, 0f3F000000;
	selp.f32 	%f655, %f654, %f653, %p210;
	cvt.rzi.s32.f32 	%r486, %f655;
	fma.rn.f32 	%f656, %f655, 0fBF000000, %f768;
	mul.f32 	%f657, %f656, %f656;
	fma.rn.f32 	%f658, %f657, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f659, %f657, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f660, %f658, %f657, 0fC0A55DF6;
	fma.rn.f32 	%f661, %f659, %f657, 0f4081E0CF;
	fma.rn.f32 	%f662, %f657, %f656, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f657, 0fC09DE9E6;
	fma.rn.f32 	%f664, %f660, %f662, 0f00000000;
	fma.rn.f32 	%f665, %f663, %f657, 0f3F800000;
	fma.rn.f32 	%f666, %f656, 0f40490FDB, %f664;
	and.b32  	%r487, %r486, 1;
	setp.eq.b32 	%p211, %r487, 1;
	selp.f32 	%f667, %f665, %f666, %p211;
	selp.f32 	%f668, %f666, %f665, %p211;
	and.b32  	%r488, %r486, 2;
	setp.eq.s32 	%p212, %r488, 0;
	neg.f32 	%f669, %f667;
	selp.f32 	%f670, %f667, %f669, %p212;
	add.s32 	%r489, %r486, 1;
	and.b32  	%r490, %r489, 2;
	setp.eq.s32 	%p213, %r490, 0;
	sub.f32 	%f672, %f627, %f668;
	selp.f32 	%f673, %f668, %f672, %p213;
	cvt.rzi.f32.f32 	%f674, %f768;
	setp.eq.f32 	%p214, %f674, %f768;
	mul.f32 	%f675, %f768, 0f00000000;
	selp.f32 	%f779, %f675, %f670, %p214;
	abs.f32 	%f676, %f768;
	setp.gt.f32 	%p215, %f676, 0f4B800000;
	add.f32 	%f677, %f779, 0f3F800000;
	selp.f32 	%f770, %f677, %f673, %p215;
$L__BB0_125:                            // %L934
	and.b32  	%r64, %r150, 1;
	mov.f32 	%f776, %f512;
	mov.f32 	%f781, %f512;
	@%p195 bra 	$L__BB0_141;
// %bb.126:                             // %L937
	cvt.rn.f32.s32 	%f679, %r64;
	mov.f32 	%f680, 0f3F800000;
	div.approx.f32 	%f142, %f679, %f680;
	abs.f32 	%f774, %f142;
	setp.lt.f32 	%p217, %f774, 0f40000000;
	@%p217 bra 	$L__BB0_138;
// %bb.127:
	setp.gtu.f32 	%p218, %f774, 0f4B800000;
	@%p218 bra 	$L__BB0_134;
	bra.uni 	$L__BB0_128;
$L__BB0_134:
	mov.b32 	%r76, %f774;
	and.b32  	%r491, %r76, 8388607;
	or.b32  	%r3006, %r491, 1065353216;
	mov.b32 	%f773, %r3006;
	add.s32 	%r492, %r76, -1073741824;
	and.b32  	%r3007, %r492, -8388608;
	setp.eq.s32 	%p224, %r3007, 0;
	@%p224 bra 	$L__BB0_137;
// %bb.135:                             // %__nv_fmaf_rn.exit4.i.i.i2236.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f689,%f680;
	// end inline asm
$L__BB0_136:                            // %__nv_fmaf_rn.exit4.i.i.i2236
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r493, %r3007, 192937984;
	add.s32 	%r494, %r3006, %r493;
	mov.b32 	%f691, %r494;
	mul.f32 	%f692, %f689, %f691;
	sub.f32 	%f693, %f691, %f692;
	fma.rn.f32 	%f694, %f693, %f689, %f692;
	sub.f32 	%f695, %f691, %f694;
	fma.rz.f32 	%f696, %f695, %f689, %f694;
	cvt.rzi.f32.f32 	%f697, %f696;
	sub.f32 	%f773, %f691, %f697;
	sub.s32 	%r3007, %r3007, %r493;
	mov.b32 	%r3006, %f773;
	setp.ne.s32 	%p225, %r3007, 0;
	setp.ne.s32 	%p226, %r3006, 0;
	and.pred  	%p227, %p225, %p226;
	@%p227 bra 	$L__BB0_136;
$L__BB0_137:                            // %__internal_fmodf_slowpath_mod.exit.i.i2238
	setp.gt.u32 	%p228, %r76, 2139095039;
	selp.f32 	%f698, 0f7FFFFFFF, 0f4B800000, %p228;
	mul.f32 	%f699, %f773, 0f34000000;
	mul.f32 	%f774, %f698, %f699;
	bra.uni 	$L__BB0_138;
$L__BB0_128:                            // %__nv_fast_fdividef.exit.i.i.i2215
	mov.f32 	%f681, 0f40000000;
	div.approx.f32 	%f682, %f774, %f681;
	cvt.rzi.f32.f32 	%f772, %f682;
	fma.rn.f32 	%f145, %f772, 0fC0000000, %f774;
	mov.b32 	%r75, %f145;
	setp.lt.u32 	%p219, %r75, 1073741824;
	@%p219 bra 	$L__BB0_133;
// %bb.129:
	setp.lt.u32 	%p220, %r75, -2147483647;
	@%p220 bra 	$L__BB0_131;
// %bb.130:
	add.f32 	%f687, %f772, 0fBF800000;
	setp.lt.f32 	%p223, %f145, 0fC0000000;
	add.f32 	%f688, %f687, 0fBF800000;
	selp.f32 	%f772, %f688, %f687, %p223;
	bra.uni 	$L__BB0_133;
$L__BB0_131:
	add.f32 	%f772, %f772, 0f3F800000;
	setp.ltu.f32 	%p221, %f145, 0f40800000;
	@%p221 bra 	$L__BB0_133;
// %bb.132:                             // %__nv_fmaf_rn.exit.i.i.i2219
	add.f32 	%f683, %f772, 0f3F800000;
	fma.rn.f32 	%f685, %f681, 0fC0400000, %f145;
	setp.ge.f32 	%p222, %f685, 0f00000000;
	add.f32 	%f686, %f683, 0f3F800000;
	selp.f32 	%f772, %f686, %f683, %p222;
$L__BB0_133:                            // %__internal_fmodf_fastpath_quot.exit.i.i2222
	fma.rn.f32 	%f774, %f772, 0fC0000000, %f774;
$L__BB0_138:                            // %__internal_fmodf_kernel.exit.i2241
	abs.f32 	%f700, %f774;
	setp.gtu.f32 	%p229, %f700, 0f7F800000;
	@%p229 bra 	$L__BB0_140;
// %bb.139:
	mov.b32 	%r495, %f142;
	and.b32  	%r496, %r495, -2147483648;
	mov.b32 	%r497, %f774;
	or.b32  	%r498, %r496, %r497;
	mov.b32 	%f774, %r498;
$L__BB0_140:                            // %__nv_fmodf.exit2242
	add.f32 	%f701, %f774, %f774;
	mov.b32 	%r499, %f701;
	and.b32  	%r500, %r499, -2147483648;
	or.b32  	%r501, %r500, 1056964608;
	mov.b32 	%f702, %r501;
	add.f32 	%f703, %f701, %f702;
	cvt.rzi.f32.f32 	%f704, %f703;
	abs.f32 	%f705, %f701;
	setp.gt.f32 	%p230, %f705, 0f4B000000;
	selp.f32 	%f706, %f701, %f704, %p230;
	cvt.rzi.f32.f32 	%f707, %f701;
	setp.lt.f32 	%p231, %f705, 0f3F000000;
	selp.f32 	%f708, %f707, %f706, %p231;
	cvt.rzi.s32.f32 	%r502, %f708;
	fma.rn.f32 	%f709, %f708, 0fBF000000, %f774;
	mul.f32 	%f710, %f709, %f709;
	fma.rn.f32 	%f711, %f710, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f712, %f710, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f713, %f711, %f710, 0fC0A55DF6;
	fma.rn.f32 	%f714, %f712, %f710, 0f4081E0CF;
	fma.rn.f32 	%f715, %f710, %f709, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f710, 0fC09DE9E6;
	fma.rn.f32 	%f717, %f713, %f715, 0f00000000;
	fma.rn.f32 	%f718, %f716, %f710, 0f3F800000;
	fma.rn.f32 	%f719, %f709, 0f40490FDB, %f717;
	and.b32  	%r503, %r502, 1;
	setp.eq.b32 	%p232, %r503, 1;
	selp.f32 	%f720, %f718, %f719, %p232;
	selp.f32 	%f721, %f719, %f718, %p232;
	and.b32  	%r504, %r502, 2;
	setp.eq.s32 	%p233, %r504, 0;
	neg.f32 	%f722, %f720;
	selp.f32 	%f723, %f720, %f722, %p233;
	add.s32 	%r505, %r502, 1;
	and.b32  	%r506, %r505, 2;
	setp.eq.s32 	%p234, %r506, 0;
	mov.f32 	%f724, 0f00000000;
	sub.f32 	%f725, %f724, %f721;
	selp.f32 	%f726, %f721, %f725, %p234;
	cvt.rzi.f32.f32 	%f727, %f774;
	setp.eq.f32 	%p235, %f727, %f774;
	mul.f32 	%f728, %f774, 0f00000000;
	selp.f32 	%f781, %f728, %f723, %p235;
	abs.f32 	%f729, %f774;
	setp.gt.f32 	%p236, %f729, 0f4B800000;
	add.f32 	%f730, %f781, 0f3F800000;
	selp.f32 	%f776, %f730, %f726, %p236;
$L__BB0_141:                            // %L971
	mov.f32 	%f165, %f770;
	mov.f32 	%f167, %f776;
	@%p134 bra 	$L__BB0_143;
// %bb.142:                             // %L980
	neg.f32 	%f167, %f781;
	neg.f32 	%f165, %f779;
	mov.f32 	%f779, %f770;
	mov.f32 	%f781, %f776;
$L__BB0_143:                            // %L982
	setp.gt.u32 	%p238, %r292, 15;
	mov.u32 	%r175, 999999999;
	@%p238 bra 	$L__BB0_217;
// %bb.144:                             // %L1012
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	mad.lo.s32 	%r514, %r292, 6, %r3;
	cvt.u16.u32 	%rs15, %r514;
	and.b16  	%rs16, %rs15, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 14;
	mul.lo.s16 	%rs19, %rs18, 96;
	sub.s16 	%rs20, %rs15, %rs19;
	cvt.u32.u16 	%r515, %rs20;
	and.b32  	%r516, %r515, 255;
	mul.wide.u32 	%rd21, %r516, 4;
	add.s64 	%rd22, %rd1, %rd21;
	ld.global.u32 	%r517, [%rd22];
	shl.b32 	%r518, %r517, 16;
	cvt.s32.s16 	%r85, %r517;
	shr.s32 	%r86, %r517, 16;
	or.b32  	%r519, %r518, 65535;
	setp.lt.u32 	%p239, %r519, 589823;
	setp.lt.u32 	%p240, %r517, 786432;
	and.pred  	%p241, %p239, %p240;
	@%p241 bra 	$L__BB0_216;
	bra.uni 	$L__BB0_145;
$L__BB0_216:                            // %L1256
	mul.lo.s32 	%r523, %r86, 290;
	mad.lo.s32 	%r175, %r85, 33, %r523;
$L__BB0_217:                            // %pass521
	add.f32 	%f227, %f784, %f784;
	mov.b32 	%r321, %f227;
	add.f32 	%f489, %f788, %f788;
	and.b32  	%r322, %r321, -2147483648;
	add.f32 	%f282, %f734, %f734;
	mov.b32 	%r429, %f489;
	or.b32  	%r323, %r322, 1056964608;
	mov.b32 	%r338, %f282;
	and.b32  	%r430, %r429, -2147483648;
	add.f32 	%f542, %f760, %f760;
	add.f32 	%f595, %f764, %f764;
	mov.b32 	%f228, %r323;
	and.b32  	%r339, %r338, -2147483648;
	or.b32  	%r431, %r430, 1056964608;
	mov.b32 	%r445, %f542;
	mov.b32 	%r467, %f595;
	add.f32 	%f229, %f227, %f228;
	abs.f32 	%f231, %f227;
	or.b32  	%r340, %r339, 1056964608;
	mov.b32 	%f490, %r431;
	and.b32  	%r446, %r445, -2147483648;
	and.b32  	%r468, %r467, -2147483648;
	cvt.rzi.f32.f32 	%f230, %f229;
	setp.gt.f32 	%p42, %f231, 0f4B000000;
	mov.b32 	%f283, %r340;
	add.f32 	%f491, %f489, %f490;
	abs.f32 	%f493, %f489;
	or.b32  	%r447, %r446, 1056964608;
	or.b32  	%r469, %r468, 1056964608;
	selp.f32 	%f232, %f227, %f230, %p42;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p43, %f231, 0f3F000000;
	add.f32 	%f284, %f282, %f283;
	abs.f32 	%f286, %f282;
	cvt.rzi.f32.f32 	%f492, %f491;
	setp.gt.f32 	%p148, %f493, 0f4B000000;
	mov.b32 	%f543, %r447;
	mov.b32 	%f596, %r469;
	selp.f32 	%f234, %f233, %f232, %p43;
	cvt.rzi.f32.f32 	%f285, %f284;
	setp.gt.f32 	%p62, %f286, 0f4B000000;
	selp.f32 	%f494, %f489, %f492, %p148;
	cvt.rzi.f32.f32 	%f495, %f489;
	setp.lt.f32 	%p149, %f493, 0f3F000000;
	add.f32 	%f544, %f542, %f543;
	abs.f32 	%f546, %f542;
	add.f32 	%f597, %f595, %f596;
	abs.f32 	%f599, %f595;
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f784;
	selp.f32 	%f287, %f282, %f285, %p62;
	cvt.rzi.f32.f32 	%f288, %f282;
	setp.lt.f32 	%p63, %f286, 0f3F000000;
	selp.f32 	%f496, %f495, %f494, %p149;
	cvt.rzi.f32.f32 	%f545, %f544;
	setp.gt.f32 	%p168, %f546, 0f4B000000;
	cvt.rzi.f32.f32 	%f598, %f597;
	setp.gt.f32 	%p188, %f599, 0f4B000000;
	mul.f32 	%f236, %f235, %f235;
	selp.f32 	%f289, %f288, %f287, %p63;
	fma.rn.f32 	%f497, %f496, 0fBF000000, %f788;
	selp.f32 	%f547, %f542, %f545, %p168;
	cvt.rzi.f32.f32 	%f548, %f542;
	setp.lt.f32 	%p169, %f546, 0f3F000000;
	selp.f32 	%f600, %f595, %f598, %p188;
	cvt.rzi.f32.f32 	%f601, %f595;
	setp.lt.f32 	%p189, %f599, 0f3F000000;
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f290, %f289, 0fBF000000, %f734;
	mul.f32 	%f498, %f497, %f497;
	selp.f32 	%f549, %f548, %f547, %p169;
	selp.f32 	%f602, %f601, %f600, %p189;
	cvt.rzi.s32.f32 	%r324, %f234;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	mul.f32 	%f291, %f290, %f290;
	fma.rn.f32 	%f499, %f498, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f500, %f498, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f550, %f549, 0fBF000000, %f760;
	fma.rn.f32 	%f603, %f602, 0fBF000000, %f764;
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r325, %r324, 1;
	fma.rn.f32 	%f292, %f291, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f293, %f291, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r432, %f496;
	fma.rn.f32 	%f501, %f499, %f498, 0fC0A55DF6;
	fma.rn.f32 	%f502, %f500, %f498, 0f4081E0CF;
	fma.rn.f32 	%f503, %f498, %f497, 0f00000000;
	mul.f32 	%f551, %f550, %f550;
	mul.f32 	%f604, %f603, %f603;
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p44, %r325, 1;
	cvt.rzi.s32.f32 	%r341, %f289;
	fma.rn.f32 	%f294, %f292, %f291, 0fC0A55DF6;
	fma.rn.f32 	%f295, %f293, %f291, 0f4081E0CF;
	fma.rn.f32 	%f296, %f291, %f290, 0f00000000;
	fma.rn.f32 	%f504, %f502, %f498, 0fC09DE9E6;
	fma.rn.f32 	%f505, %f501, %f503, 0f00000000;
	and.b32  	%r433, %r432, 1;
	fma.rn.f32 	%f552, %f551, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f553, %f551, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f604, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f606, %f604, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f246, %f244, %f245, %p44;
	and.b32  	%r326, %r324, 2;
	fma.rn.f32 	%f297, %f295, %f291, 0fC09DE9E6;
	fma.rn.f32 	%f298, %f294, %f296, 0f00000000;
	and.b32  	%r342, %r341, 1;
	fma.rn.f32 	%f506, %f504, %f498, 0f3F800000;
	fma.rn.f32 	%f507, %f497, 0f40490FDB, %f505;
	setp.eq.b32 	%p150, %r433, 1;
	cvt.rzi.s32.f32 	%r448, %f549;
	fma.rn.f32 	%f554, %f552, %f551, 0fC0A55DF6;
	fma.rn.f32 	%f555, %f553, %f551, 0f4081E0CF;
	fma.rn.f32 	%f556, %f551, %f550, 0f00000000;
	cvt.rzi.s32.f32 	%r470, %f602;
	fma.rn.f32 	%f607, %f605, %f604, 0fC0A55DF6;
	fma.rn.f32 	%f608, %f606, %f604, 0f4081E0CF;
	fma.rn.f32 	%f609, %f604, %f603, 0f00000000;
	setp.eq.s32 	%p45, %r326, 0;
	neg.f32 	%f248, %f246;
	add.s32 	%r327, %r324, 1;
	cvt.rzi.f32.f32 	%f253, %f784;
	fma.rn.f32 	%f299, %f297, %f291, 0f3F800000;
	fma.rn.f32 	%f300, %f290, 0f40490FDB, %f298;
	setp.eq.b32 	%p64, %r342, 1;
	selp.f32 	%f508, %f506, %f507, %p150;
	and.b32  	%r434, %r432, 2;
	fma.rn.f32 	%f557, %f555, %f551, 0fC09DE9E6;
	fma.rn.f32 	%f558, %f554, %f556, 0f00000000;
	and.b32  	%r449, %r448, 1;
	fma.rn.f32 	%f610, %f608, %f604, 0fC09DE9E6;
	fma.rn.f32 	%f611, %f607, %f609, 0f00000000;
	and.b32  	%r471, %r470, 1;
	selp.f32 	%f247, %f245, %f244, %p44;
	selp.f32 	%f249, %f246, %f248, %p45;
	and.b32  	%r328, %r327, 2;
	setp.eq.f32 	%p47, %f253, %f784;
	mul.f32 	%f254, %f784, 0f00000000;
	selp.f32 	%f301, %f299, %f300, %p64;
	and.b32  	%r343, %r341, 2;
	setp.eq.s32 	%p151, %r434, 0;
	neg.f32 	%f510, %f508;
	add.s32 	%r435, %r432, 1;
	cvt.rzi.f32.f32 	%f515, %f788;
	fma.rn.f32 	%f559, %f557, %f551, 0f3F800000;
	fma.rn.f32 	%f560, %f550, 0f40490FDB, %f558;
	setp.eq.b32 	%p170, %r449, 1;
	fma.rn.f32 	%f612, %f610, %f604, 0f3F800000;
	fma.rn.f32 	%f613, %f603, 0f40490FDB, %f611;
	setp.eq.b32 	%p190, %r471, 1;
	setp.eq.s32 	%p46, %r328, 0;
	sub.f32 	%f251, %f250, %f247;
	selp.f32 	%f255, %f254, %f249, %p47;
	abs.f32 	%f256, %f784;
	setp.eq.s32 	%p65, %r343, 0;
	neg.f32 	%f303, %f301;
	add.s32 	%r344, %r341, 1;
	cvt.rzi.f32.f32 	%f307, %f734;
	selp.f32 	%f509, %f507, %f506, %p150;
	selp.f32 	%f511, %f508, %f510, %p151;
	and.b32  	%r436, %r435, 2;
	setp.eq.f32 	%p153, %f515, %f788;
	mul.f32 	%f516, %f788, 0f00000000;
	selp.f32 	%f561, %f559, %f560, %p170;
	and.b32  	%r450, %r448, 2;
	selp.f32 	%f614, %f612, %f613, %p190;
	and.b32  	%r472, %r470, 2;
	selp.f32 	%f252, %f247, %f251, %p46;
	setp.gt.f32 	%p48, %f256, 0f4B800000;
	add.f32 	%f257, %f255, 0f3F800000;
	selp.f32 	%f302, %f300, %f299, %p64;
	selp.f32 	%f304, %f301, %f303, %p65;
	and.b32  	%r345, %r344, 2;
	setp.eq.f32 	%p67, %f307, %f734;
	mul.f32 	%f308, %f734, 0f00000000;
	setp.eq.s32 	%p152, %r436, 0;
	sub.f32 	%f513, %f512, %f509;
	selp.f32 	%f517, %f516, %f511, %p153;
	abs.f32 	%f518, %f788;
	setp.eq.s32 	%p171, %r450, 0;
	neg.f32 	%f563, %f561;
	add.s32 	%r451, %r448, 1;
	cvt.rzi.f32.f32 	%f568, %f760;
	setp.eq.s32 	%p191, %r472, 0;
	neg.f32 	%f616, %f614;
	add.s32 	%r473, %r470, 1;
	cvt.rzi.f32.f32 	%f620, %f764;
	selp.f32 	%f258, %f257, %f252, %p48;
	setp.eq.s32 	%p66, %r345, 0;
	sub.f32 	%f305, %f250, %f302;
	selp.f32 	%f16, %f308, %f304, %p67;
	abs.f32 	%f309, %f734;
	selp.f32 	%f514, %f509, %f513, %p152;
	setp.gt.f32 	%p154, %f518, 0f4B800000;
	add.f32 	%f519, %f517, 0f3F800000;
	selp.f32 	%f562, %f560, %f559, %p170;
	selp.f32 	%f564, %f561, %f563, %p171;
	and.b32  	%r452, %r451, 2;
	setp.eq.f32 	%p173, %f568, %f760;
	mul.f32 	%f569, %f760, 0f00000000;
	selp.f32 	%f615, %f613, %f612, %p190;
	selp.f32 	%f617, %f614, %f616, %p191;
	and.b32  	%r474, %r473, 2;
	setp.eq.f32 	%p193, %f620, %f764;
	mul.f32 	%f621, %f764, 0f00000000;
	mov.b32 	%r317, %f258;
	mov.b32 	%r320, %f255;
	selp.f32 	%f306, %f302, %f305, %p66;
	setp.gt.f32 	%p68, %f309, 0f4B800000;
	add.f32 	%f310, %f16, 0f3F800000;
	selp.f32 	%f520, %f519, %f514, %p154;
	setp.eq.s32 	%p172, %r452, 0;
	sub.f32 	%f566, %f512, %f562;
	selp.f32 	%f102, %f569, %f564, %p173;
	abs.f32 	%f570, %f760;
	setp.eq.s32 	%p192, %r474, 0;
	sub.f32 	%f618, %f512, %f615;
	selp.f32 	%f622, %f621, %f617, %p193;
	abs.f32 	%f623, %f764;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r316, %r320, -2147483648;
	selp.f32 	%f17, %f310, %f306, %p68;
	mov.b32 	%r425, %f520;
	mov.b32 	%r428, %f517;
	selp.f32 	%f567, %f562, %f566, %p172;
	setp.gt.f32 	%p174, %f570, 0f4B800000;
	add.f32 	%f571, %f102, 0f3F800000;
	selp.f32 	%f619, %f615, %f618, %p192;
	setp.gt.f32 	%p194, %f623, 0f4B800000;
	add.f32 	%f624, %f622, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r315, %r317, %r316;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r318, %r320, %r317;
	// end inline asm
	mov.b32 	%r368, %f17;
	mov.b32 	%r369, %f37;
	mov.b32 	%r371, %f16;
	mov.b32 	%r372, %f38;
	mov.b32 	%r412, %f83;
	mov.b32 	%r413, %f85;
	mov.b32 	%r415, %f755;
	mov.b32 	%r416, %f757;
	xor.b32  	%r424, %r428, -2147483648;
	selp.f32 	%f103, %f571, %f567, %p174;
	selp.f32 	%f625, %f624, %f619, %p194;
	// begin inline asm
	cvt.rn.f16x2.f32 %r367, %r369, %r368;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r370, %r372, %r371;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r411, %r413, %r412;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r414, %r416, %r415;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r423, %r425, %r424;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r426, %r428, %r425;
	// end inline asm
	mov.b32 	%r463, %f625;
	mov.b32 	%r462, %f103;
	mov.b32 	%r466, %f622;
	mov.b32 	%r465, %f102;
	// begin inline asm
	cvt.rn.f16x2.f32 %r461, %r463, %r462;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r464, %r466, %r465;
	// end inline asm
	mov.b32 	%r508, %f165;
	mov.b32 	%r509, %f167;
	// begin inline asm
	cvt.rn.f16x2.f32 %r507, %r509, %r508;
	// end inline asm
	mov.b32 	%r511, %f779;
	mov.b32 	%r512, %f781;
	// begin inline asm
	cvt.rn.f16x2.f32 %r510, %r512, %r511;
	// end inline asm
	shr.u32 	%r525, %r292, 3;
	bfe.u32 	%r526, %r292, 3, 1;
	shl.b32 	%r527, %r3, 1;
	and.b32  	%r528, %r527, 2;
	or.b32  	%r529, %r526, %r528;
	mul.lo.s32 	%r530, %r149, 24;
	and.b32  	%r531, %r525, 2;
	or.b32  	%r176, %r64, %r531;
	cvt.u16.u32 	%rs23, %r176;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 9;
	mul.lo.s16 	%rs26, %rs25, 3;
	sub.s16 	%rs27, %rs23, %rs26;
	cvt.u32.u16 	%r532, %rs27;
	and.b32  	%r533, %r532, 255;
	and.b16  	%rs28, %rs27, 255;
	mul.wide.u16 	%r534, %rs28, 8;
	add.s32 	%r535, %r530, %r2;
	or.b32  	%r536, %r535, %r529;
	add.s32 	%r537, %r536, %r534;
	mul.wide.u32 	%rd28, %r537, 4;
	add.s64 	%rd29, %rd2, %rd28;
	ld.global.u32 	%r177, [%rd29];
	cvt.u64.u32 	%rd30, %r534;
	cvt.u64.u32 	%rd31, %r529;
	cvt.u64.u32 	%rd32, %r530;
	cvt.u64.u32 	%rd33, %r2;
	add.s64 	%rd34, %rd33, %rd32;
	add.s64 	%rd35, %rd34, %rd31;
	add.s64 	%rd36, %rd35, %rd30;
	shl.b64 	%rd37, %rd36, 2;
	add.s64 	%rd38, %rd2, %rd37;
	ld.global.u32 	%r178, [%rd38+16];
	ld.global.u32 	%r179, [%rd38+384];
	ld.global.u32 	%r180, [%rd38+400];
	shl.b32 	%r538, %r283, 14;
	shl.b32 	%r539, %r287, 5;
	add.s32 	%r181, %r539, %r538;
	shl.b32 	%r540, %r292, 2;
	and.b32  	%r182, %r540, 12;
	shl.b32 	%r541, %r3, 2;
	or.b32  	%r183, %r525, %r541;
	and.b32  	%r184, %r540, 16;
	shl.b32 	%r185, %r1, 5;
	or.b32  	%r542, %r525, 24;
	add.s32 	%r186, %r542, %r541;
	and.b32  	%r187, %r292, 4;
	and.b32  	%r543, %r162, 8;
	shl.b32 	%r544, %r292, 4;
	or.b32  	%r545, %r543, %r544;
	bfe.u32 	%r546, %r545, 3, 3;
	mul.lo.s32 	%r188, %r546, 260;
	cvt.u16.u32 	%rs29, %r292;
	and.b16  	%rs30, %rs29, 255;
	mul.lo.s16 	%rs31, %rs30, 171;
	shr.u16 	%rs32, %rs31, 12;
	mul.lo.s16 	%rs33, %rs32, 24;
	sub.s16 	%rs34, %rs29, %rs33;
	cvt.u32.u16 	%r547, %rs34;
	and.b32  	%r189, %r547, 255;
	add.s32 	%r548, %r3, 6;
	add.s32 	%r549, %r4, 192;
	and.b32  	%r550, %r549, 224;
	shr.u32 	%r551, %r548, 3;
	mad.lo.s32 	%r190, %r551, 260, %r550;
	add.s32 	%r552, %r3, 12;
	add.s32 	%r553, %r4, 128;
	and.b32  	%r554, %r553, 224;
	shr.u32 	%r555, %r552, 3;
	mad.lo.s32 	%r191, %r555, 260, %r554;
	add.s32 	%r556, %r3, 18;
	add.s32 	%r557, %r4, 64;
	and.b32  	%r558, %r557, 224;
	shr.u32 	%r559, %r556, 3;
	mad.lo.s32 	%r192, %r559, 260, %r558;
	or.b32  	%r193, %r4, 780;
	add.s32 	%r560, %r3, 30;
	shr.u32 	%r561, %r560, 3;
	mad.lo.s32 	%r194, %r561, 260, %r550;
	add.s32 	%r562, %r3, 36;
	shr.u32 	%r563, %r562, 3;
	mad.lo.s32 	%r195, %r563, 260, %r554;
	add.s32 	%r564, %r3, 42;
	shr.u32 	%r565, %r564, 3;
	mad.lo.s32 	%r196, %r565, 260, %r558;
	or.b32  	%r197, %r4, 1560;
	add.s32 	%r566, %r3, 54;
	shr.u32 	%r567, %r566, 3;
	mad.lo.s32 	%r198, %r567, 260, %r550;
	add.s32 	%r568, %r3, 60;
	bfe.u32 	%r569, %r568, 3, 3;
	mad.lo.s32 	%r199, %r569, 260, %r554;
	shr.u32 	%r570, %r3, 1;
	cvt.u16.u32 	%rs35, %r570;
	and.b16  	%rs36, %rs35, 255;
	mul.lo.s16 	%rs37, %rs36, 171;
	shr.u16 	%rs38, %rs37, 9;
	mul.lo.s16 	%rs39, %rs38, 3;
	sub.s16 	%rs40, %rs35, %rs39;
	cvt.u32.u16 	%r571, %rs40;
	and.b32  	%r200, %r571, 255;
	mul.lo.s32 	%r572, %r149, 870;
	mad.lo.s32 	%r573, %r529, 33, %r572;
	mad.lo.s32 	%r201, %r533, 290, %r573;
	add.s32 	%r202, %r201, 132;
	setp.lt.u32 	%p242, %r292, 4;
	setp.eq.s32 	%p243, %r150, 1;
	setp.eq.s32 	%p244, %r150, 4;
	setp.eq.s32 	%p245, %r150, 5;
	mul.lo.s32 	%r574, %r66, 784;
	and.b32  	%r575, %r3, 1;
	neg.s32 	%r576, %r575;
	and.b32  	%r577, %r576, 392;
	bfe.s32 	%r578, %r3, 1, 1;
	and.b32  	%r579, %r578, 196;
	and.b32  	%r580, %r162, 6;
	bfe.s32 	%r581, %r292, 3, 1;
	and.b32  	%r582, %r581, 1576;
	shr.u32 	%r583, %r3, 2;
	or.b32  	%r584, %r580, %r574;
	mad.lo.s32 	%r585, %r583, 98, %r584;
	or.b32  	%r586, %r585, %r64;
	add.s32 	%r587, %r586, %r577;
	add.s32 	%r588, %r587, %r579;
	add.s32 	%r203, %r588, %r582;
	add.s32 	%r204, %r203, 8;
	mul.lo.s32 	%r589, %r285, 786432;
	mad.lo.s32 	%r590, %r289, 192, %r589;
	and.b32  	%r591, %r292, 7;
	cvt.u16.u32 	%rs41, %r183;
	and.b16  	%rs42, %rs41, 255;
	mul.lo.s16 	%rs43, %rs42, 171;
	shr.u16 	%rs44, %rs43, 9;
	and.b16  	%rs45, %rs44, 24;
	add.s16 	%rs46, %rs41, %rs45;
	shl.b16 	%rs47, %rs46, 3;
	cvt.u32.u16 	%r592, %rs47;
	and.b32  	%r593, %r592, 248;
	or.b32  	%r594, %r2, %r591;
	add.s32 	%r205, %r594, %r593;
	cvt.s64.s32 	%rd7, %r590;
	add.s32 	%r595, %r201, %r200;
	mul.wide.u32 	%rd39, %r595, 4;
	mov.u64 	%rd40, shmem;
	add.s64 	%rd8, %rd40, %rd39;
	add.s32 	%r596, %r202, %r200;
	mul.wide.u32 	%rd41, %r596, 4;
	add.s64 	%rd9, %rd40, %rd41;
	cvt.u64.u32 	%rd42, %r201;
	cvt.u64.u16 	%rd43, %rs40;
	and.b64  	%rd44, %rd43, 255;
	add.s64 	%rd45, %rd42, %rd44;
	shl.b64 	%rd46, %rd45, 2;
	add.s64 	%rd10, %rd40, %rd46;
	cvt.u64.u32 	%rd47, %r202;
	add.s64 	%rd48, %rd47, %rd44;
	shl.b64 	%rd49, %rd48, 2;
	add.s64 	%rd11, %rd40, %rd49;
	or.pred  	%p246, %p242, %p243;
	and.b32  	%r597, %r292, 24;
	setp.eq.s32 	%p247, %r597, 8;
	or.pred  	%p248, %p246, %p247;
	or.pred  	%p249, %p248, %p244;
	setp.eq.s32 	%p250, %r597, 24;
	or.pred  	%p251, %p245, %p250;
	selp.b32 	%r206, 1145324612, -286331154, %p248;
	or.pred  	%p1, %p249, %p251;
	selp.b32 	%r207, 1145324612, -286331154, %p246;
	add.s32 	%r598, %r150, -1;
	setp.lt.u32 	%p252, %r598, 3;
	or.pred  	%p2, %p242, %p252;
	setp.eq.s32 	%p253, %r597, 16;
	or.pred  	%p3, %p253, %p250;
	selp.b32 	%r208, 1145324612, -286331154, %p253;
	mov.u32 	%r88, 0;
	mov.u16 	%rs2, 0;
	mov.u16 	%rs1, 29;
	selp.b32 	%r258, %r207, %r208, %p2;
	or.pred  	%p284, %p2, %p3;
	mov.u32 	%r108, %r88;
	mov.u32 	%r109, %r88;
	mov.u32 	%r110, %r88;
	bra.uni 	$L__BB0_218;
$L__BB0_189:                            // %L24370
                                        //   in Loop: Header=BB0_218 Depth=1
	add.s32 	%r148, %r88, 48;
	add.s16 	%rs2, %rs2, 48;
	add.s16 	%rs1, %rs1, 48;
	setp.ne.s32 	%p321, %r88, 8112;
	mov.u32 	%r88, %r148;
	@%p321 bra 	$L__BB0_218;
	bra.uni 	$L__BB0_190;
$L__BB0_218:                            // %L1941
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_163 Depth 2
                                        //     Child Loop BB0_176 Depth 2
	add.s32 	%r599, %r88, %r283;
	setp.lt.s32 	%p254, %r599, %r284;
	@%p254 bra 	$L__BB0_219;
	bra.uni 	$L__BB0_190;
$L__BB0_219:                            // %oksrem871
                                        //   in Loop: Header=BB0_218 Depth=1
	setp.eq.s32 	%p255, %r187, 0;
	mul.hi.u32 	%r696, %r88, -1431655765;
	shr.u32 	%r697, %r696, 5;
	mul.lo.s32 	%r209, %r697, 48;
	add.s32 	%r698, %r209, %r183;
	cvt.u16.u32 	%rs48, %r698;
	shr.s16 	%rs49, %rs48, 15;
	shr.u16 	%rs50, %rs49, 3;
	add.s16 	%rs51, %rs48, %rs50;
	and.b16  	%rs52, %rs51, -8192;
	sub.s16 	%rs53, %rs48, %rs52;
	mul.wide.s16 	%r699, %rs53, 16384;
	or.b32  	%r700, %r699, %r182;
	or.b32  	%r701, %r700, %r184;
	or.b32  	%r702, %r701, %r185;
	add.s32 	%r703, %r181, %r702;
	shr.s32 	%r704, %r703, 31;
	shr.u32 	%r705, %r704, 5;
	add.s32 	%r706, %r703, %r705;
	shr.s32 	%r707, %r706, 27;
	setp.lt.s32 	%p256, %r703, 0;
	and.b32  	%r708, %r706, -134217728;
	setp.ne.s32 	%p257, %r708, %r703;
	and.pred  	%p258, %p256, %p257;
	selp.u32 	%r709, 1, 0, %p258;
	sub.s32 	%r710, %r709, %r707;
	shl.b32 	%r711, %r710, 27;
	add.s32 	%r712, %r711, %r703;
	mul.wide.s32 	%rd50, %r712, 4;
	add.s64 	%rd51, %rd3, %rd50;
	ld.global.v4.u32 	{%r713, %r714, %r715, %r716}, [%rd51];
	add.s32 	%r717, %r186, %r209;
	cvt.u16.u32 	%rs54, %r717;
	shr.s16 	%rs55, %rs54, 15;
	shr.u16 	%rs56, %rs55, 3;
	add.s16 	%rs57, %rs54, %rs56;
	and.b16  	%rs58, %rs57, -8192;
	sub.s16 	%rs59, %rs54, %rs58;
	mul.wide.s16 	%r718, %rs59, 16384;
	or.b32  	%r719, %r718, %r182;
	or.b32  	%r720, %r719, %r184;
	or.b32  	%r721, %r720, %r185;
	add.s32 	%r722, %r181, %r721;
	shr.s32 	%r723, %r722, 31;
	shr.u32 	%r724, %r723, 5;
	add.s32 	%r725, %r722, %r724;
	shr.s32 	%r726, %r725, 27;
	setp.lt.s32 	%p259, %r722, 0;
	and.b32  	%r727, %r725, -134217728;
	setp.ne.s32 	%p260, %r727, %r722;
	and.pred  	%p261, %p259, %p260;
	selp.u32 	%r728, 1, 0, %p261;
	sub.s32 	%r729, %r728, %r726;
	shl.b32 	%r730, %r729, 27;
	add.s32 	%r731, %r730, %r722;
	mul.wide.s32 	%rd52, %r731, 4;
	add.s64 	%rd53, %rd3, %rd52;
	ld.global.v4.u32 	{%r732, %r733, %r734, %r735}, [%rd53];
	selp.b32 	%r736, %r715, %r713, %p255;
	shfl.sync.bfly.b32	%r737, %r736, 4, 31, -1;
	selp.b32 	%r602, %r713, %r737, %p255;
	selp.b32 	%r607, %r737, %r715, %p255;
	selp.b32 	%r738, %r716, %r714, %p255;
	shfl.sync.bfly.b32	%r739, %r738, 4, 31, -1;
	selp.b32 	%r610, %r714, %r739, %p255;
	selp.b32 	%r615, %r739, %r716, %p255;
	selp.b32 	%r740, %r734, %r732, %p255;
	shfl.sync.bfly.b32	%r741, %r740, 4, 31, -1;
	selp.b32 	%r618, %r732, %r741, %p255;
	selp.b32 	%r623, %r741, %r734, %p255;
	selp.b32 	%r742, %r735, %r733, %p255;
	shfl.sync.bfly.b32	%r743, %r742, 4, 31, -1;
	selp.b32 	%r626, %r733, %r743, %p255;
	selp.b32 	%r631, %r743, %r735, %p255;
	shl.b32 	%r603, %r607, 4;
	mov.u32 	%r601, 252645135;
	// begin inline asm
	lop3.b32 %r633, %r601, %r602, %r603, 202;
	// end inline asm
	shr.u32 	%r606, %r602, 4;
	// begin inline asm
	lop3.b32 %r649, %r601, %r606, %r607, 202;
	// end inline asm
	shl.b32 	%r611, %r615, 4;
	// begin inline asm
	lop3.b32 %r641, %r601, %r610, %r611, 202;
	// end inline asm
	shr.u32 	%r614, %r610, 4;
	// begin inline asm
	lop3.b32 %r657, %r601, %r614, %r615, 202;
	// end inline asm
	shl.b32 	%r619, %r623, 4;
	// begin inline asm
	lop3.b32 %r634, %r601, %r618, %r619, 202;
	// end inline asm
	shr.u32 	%r622, %r618, 4;
	// begin inline asm
	lop3.b32 %r650, %r601, %r622, %r623, 202;
	// end inline asm
	shl.b32 	%r627, %r631, 4;
	// begin inline asm
	lop3.b32 %r642, %r601, %r626, %r627, 202;
	// end inline asm
	shr.u32 	%r630, %r626, 4;
	// begin inline asm
	lop3.b32 %r658, %r601, %r630, %r631, 202;
	// end inline asm
	mov.u32 	%r635, 25152;
	// begin inline asm
	prmt.b32 %r665, %r633, %r634, %r635;
	// end inline asm
	mov.u32 	%r639, 29521;
	// begin inline asm
	prmt.b32 %r681, %r633, %r634, %r639;
	// end inline asm
	// begin inline asm
	prmt.b32 %r673, %r641, %r642, %r635;
	// end inline asm
	// begin inline asm
	prmt.b32 %r689, %r641, %r642, %r639;
	// end inline asm
	// begin inline asm
	prmt.b32 %r666, %r649, %r650, %r635;
	// end inline asm
	// begin inline asm
	prmt.b32 %r682, %r649, %r650, %r639;
	// end inline asm
	// begin inline asm
	prmt.b32 %r674, %r657, %r658, %r635;
	// end inline asm
	// begin inline asm
	prmt.b32 %r690, %r657, %r658, %r639;
	// end inline asm
	mov.u32 	%r667, 21520;
	// begin inline asm
	prmt.b32 %r664, %r665, %r666, %r667;
	// end inline asm
	mov.u32 	%r671, 30258;
	// begin inline asm
	prmt.b32 %r668, %r665, %r666, %r671;
	// end inline asm
	// begin inline asm
	prmt.b32 %r672, %r673, %r674, %r667;
	// end inline asm
	// begin inline asm
	prmt.b32 %r676, %r673, %r674, %r671;
	// end inline asm
	// begin inline asm
	prmt.b32 %r680, %r681, %r682, %r667;
	// end inline asm
	// begin inline asm
	prmt.b32 %r684, %r681, %r682, %r671;
	// end inline asm
	// begin inline asm
	prmt.b32 %r688, %r689, %r690, %r667;
	// end inline asm
	// begin inline asm
	prmt.b32 %r692, %r689, %r690, %r671;
	// end inline asm
	mul.hi.s16 	%rs60, %rs48, 10923;
	shr.u16 	%rs61, %rs60, 15;
	shr.s16 	%rs62, %rs60, 2;
	add.s16 	%rs63, %rs62, %rs61;
	mul.lo.s16 	%rs64, %rs63, 24;
	sub.s16 	%rs65, %rs48, %rs64;
	cvt.s32.s16 	%r744, %rs65;
	add.s32 	%r745, %r188, %r744;
	mul.wide.s32 	%rd54, %r745, 4;
	add.s64 	%rd56, %rd40, %rd54;
	st.shared.u32 	[%rd56], %r664;
	add.s32 	%r746, %r745, 128;
	mul.wide.u32 	%rd57, %r746, 4;
	add.s64 	%rd58, %rd40, %rd57;
	st.shared.u32 	[%rd58], %r672;
	add.s32 	%r747, %r745, 64;
	mul.wide.u32 	%rd59, %r747, 4;
	add.s64 	%rd60, %rd40, %rd59;
	st.shared.u32 	[%rd60], %r668;
	add.s32 	%r748, %r745, 192;
	mul.wide.u32 	%rd61, %r748, 4;
	add.s64 	%rd62, %rd40, %rd61;
	st.shared.u32 	[%rd62], %r676;
	add.s32 	%r749, %r745, 32;
	mul.wide.u32 	%rd63, %r749, 4;
	add.s64 	%rd64, %rd40, %rd63;
	st.shared.u32 	[%rd64], %r680;
	add.s32 	%r750, %r745, 160;
	mul.wide.u32 	%rd65, %r750, 4;
	add.s64 	%rd66, %rd40, %rd65;
	st.shared.u32 	[%rd66], %r688;
	add.s32 	%r751, %r745, 96;
	mul.wide.u32 	%rd67, %r751, 4;
	add.s64 	%rd68, %rd40, %rd67;
	st.shared.u32 	[%rd68], %r684;
	add.s32 	%r752, %r745, 224;
	mul.wide.u32 	%rd69, %r752, 4;
	add.s64 	%rd70, %rd40, %rd69;
	st.shared.u32 	[%rd70], %r692;
	bar.sync 	0;
	add.s32 	%r753, %r209, %r189;
	cvt.u16.u32 	%rs66, %r753;
	mul.hi.s16 	%rs67, %rs66, 10923;
	shr.u16 	%rs68, %rs67, 15;
	shr.s16 	%rs69, %rs67, 2;
	add.s16 	%rs70, %rs69, %rs68;
	mul.lo.s16 	%rs71, %rs70, 24;
	sub.s16 	%rs72, %rs66, %rs71;
	cvt.s32.s16 	%r210, %rs72;
	add.s32 	%r754, %r4, %r210;
	mul.wide.s32 	%rd71, %r754, 4;
	add.s64 	%rd72, %rd40, %rd71;
	ld.shared.u32 	%r211, [%rd72];
	add.s32 	%r755, %r190, %r210;
	mul.wide.s32 	%rd73, %r755, 4;
	add.s64 	%rd74, %rd40, %rd73;
	ld.shared.u32 	%r212, [%rd74];
	add.s32 	%r756, %r191, %r210;
	mul.wide.u32 	%rd75, %r756, 4;
	add.s64 	%rd76, %rd40, %rd75;
	ld.shared.u32 	%r213, [%rd76];
	add.s32 	%r757, %r192, %r210;
	mul.wide.u32 	%rd77, %r757, 4;
	add.s64 	%rd78, %rd40, %rd77;
	ld.shared.u32 	%r214, [%rd78];
	add.s32 	%r758, %r193, %r210;
	mul.wide.u32 	%rd79, %r758, 4;
	add.s64 	%rd80, %rd40, %rd79;
	ld.shared.u32 	%r215, [%rd80];
	add.s32 	%r759, %r194, %r210;
	mul.wide.u32 	%rd81, %r759, 4;
	add.s64 	%rd82, %rd40, %rd81;
	ld.shared.u32 	%r216, [%rd82];
	add.s32 	%r760, %r195, %r210;
	mul.wide.u32 	%rd83, %r760, 4;
	add.s64 	%rd84, %rd40, %rd83;
	ld.shared.u32 	%r217, [%rd84];
	add.s32 	%r761, %r196, %r210;
	mul.wide.u32 	%rd85, %r761, 4;
	add.s64 	%rd86, %rd40, %rd85;
	ld.shared.u32 	%r218, [%rd86];
	add.s32 	%r762, %r197, %r210;
	mul.wide.u32 	%rd87, %r762, 4;
	add.s64 	%rd88, %rd40, %rd87;
	ld.shared.u32 	%r219, [%rd88];
	add.s32 	%r763, %r198, %r210;
	mul.wide.u32 	%rd89, %r763, 4;
	add.s64 	%rd90, %rd40, %rd89;
	ld.shared.u32 	%r220, [%rd90];
	add.s32 	%r764, %r199, %r210;
	mul.wide.s32 	%rd91, %r764, 4;
	add.s64 	%rd92, %rd40, %rd91;
	ld.shared.u32 	%r221, [%rd92];
	bar.sync 	0;
	shfl.sync.idx.b32	%r222, %r175, 0, 31, -1;
	shfl.sync.idx.b32	%r223, %r175, 1, 31, -1;
	shfl.sync.idx.b32	%r224, %r175, 2, 31, -1;
	shfl.sync.idx.b32	%r225, %r175, 3, 31, -1;
	shfl.sync.idx.b32	%r226, %r175, 4, 31, -1;
	shfl.sync.idx.b32	%r227, %r175, 5, 31, -1;
	shfl.sync.idx.b32	%r228, %r175, 6, 31, -1;
	shfl.sync.idx.b32	%r229, %r175, 7, 31, -1;
	shfl.sync.idx.b32	%r230, %r175, 8, 31, -1;
	shfl.sync.idx.b32	%r231, %r175, 9, 31, -1;
	shfl.sync.idx.b32	%r232, %r175, 10, 31, -1;
	shfl.sync.idx.b32	%r233, %r175, 11, 31, -1;
	shfl.sync.idx.b32	%r234, %r175, 12, 31, -1;
	shfl.sync.idx.b32	%r235, %r175, 13, 31, -1;
	shfl.sync.idx.b32	%r236, %r175, 14, 31, -1;
	shfl.sync.idx.b32	%r237, %r175, 15, 31, -1;
	setp.eq.s32 	%p262, %r222, 999999999;
	@%p262 bra 	$L__BB0_146;
// %bb.220:                             // %oksrem2271
                                        //   in Loop: Header=BB0_218 Depth=1
	add.s32 	%r765, %r222, %r210;
	mul.wide.s32 	%rd93, %r765, 4;
	add.s64 	%rd95, %rd40, %rd93;
	st.shared.u32 	[%rd95], %r211;
	setp.eq.s32 	%p263, %r223, 999999999;
	@%p263 bra 	$L__BB0_147;
// %bb.221:                             // %oksrem2337
                                        //   in Loop: Header=BB0_218 Depth=1
	add.s32 	%r766, %r223, %r210;
	mul.wide.s32 	%rd96, %r766, 4;
	add.s64 	%rd98, %rd40, %rd96;
	st.shared.u32 	[%rd98], %r212;
	setp.eq.s32 	%p264, %r224, 999999999;
	@%p264 bra 	$L__BB0_148;
// %bb.222:                             // %oksrem2403
                                        //   in Loop: Header=BB0_218 Depth=1
	add.s32 	%r767, %r224, %r210;
	mul.wide.s32 	%rd99, %r767, 4;
	add.s64 	%rd101, %rd40, %rd99;
	st.shared.u32 	[%rd101], %r213;
	setp.eq.s32 	%p265, %r225, 999999999;
	@%p265 bra 	$L__BB0_149;
// %bb.223:                             // %oksrem2469
                                        //   in Loop: Header=BB0_218 Depth=1
	add.s32 	%r768, %r225, %r210;
	mul.wide.s32 	%rd102, %r768, 4;
	add.s64 	%rd104, %rd40, %rd102;
	st.shared.u32 	[%rd104], %r214;
	setp.eq.s32 	%p266, %r226, 999999999;
	@%p266 bra 	$L__BB0_150;
// %bb.224:                             // %oksrem2535
                                        //   in Loop: Header=BB0_218 Depth=1
	add.s32 	%r769, %r226, %r210;
	mul.wide.s32 	%rd105, %r769, 4;
	add.s64 	%rd107, %rd40, %rd105;
	st.shared.u32 	[%rd107], %r215;
	setp.eq.s32 	%p267, %r227, 999999999;
	@%p267 bra 	$L__BB0_151;
// %bb.225:                             // %oksrem2601
                                        //   in Loop: Header=BB0_218 Depth=1
	add.s32 	%r770, %r227, %r210;
	mul.wide.s32 	%rd108, %r770, 4;
	add.s64 	%rd110, %rd40, %rd108;
	st.shared.u32 	[%rd110], %r216;
	setp.eq.s32 	%p268, %r228, 999999999;
	@%p268 bra 	$L__BB0_152;
// %bb.226:                             // %oksrem2667
                                        //   in Loop: Header=BB0_218 Depth=1
	add.s32 	%r771, %r228, %r210;
	mul.wide.s32 	%rd111, %r771, 4;
	add.s64 	%rd113, %rd40, %rd111;
	st.shared.u32 	[%rd113], %r217;
	setp.eq.s32 	%p269, %r229, 999999999;
	@%p269 bra 	$L__BB0_153;
// %bb.227:                             // %oksrem2733
                                        //   in Loop: Header=BB0_218 Depth=1
	add.s32 	%r772, %r229, %r210;
	mul.wide.s32 	%rd114, %r772, 4;
	add.s64 	%rd116, %rd40, %rd114;
	st.shared.u32 	[%rd116], %r218;
	setp.eq.s32 	%p270, %r230, 999999999;
	@%p270 bra 	$L__BB0_154;
// %bb.228:                             // %oksrem2799
                                        //   in Loop: Header=BB0_218 Depth=1
	add.s32 	%r773, %r230, %r210;
	mul.wide.s32 	%rd117, %r773, 4;
	add.s64 	%rd119, %rd40, %rd117;
	st.shared.u32 	[%rd119], %r219;
	setp.eq.s32 	%p271, %r231, 999999999;
	@%p271 bra 	$L__BB0_155;
// %bb.229:                             // %oksrem2865
                                        //   in Loop: Header=BB0_218 Depth=1
	add.s32 	%r774, %r231, %r210;
	mul.wide.s32 	%rd120, %r774, 4;
	add.s64 	%rd122, %rd40, %rd120;
	st.shared.u32 	[%rd122], %r220;
	setp.eq.s32 	%p272, %r232, 999999999;
	@%p272 bra 	$L__BB0_156;
// %bb.230:                             // %oksrem2932
                                        //   in Loop: Header=BB0_218 Depth=1
	setp.gt.u32 	%p273, %r3, 3;
	selp.b32 	%r775, 0, %r221, %p273;
	add.s32 	%r776, %r232, %r210;
	mul.wide.s32 	%rd123, %r776, 4;
	add.s64 	%rd125, %rd40, %rd123;
	st.shared.u32 	[%rd125], %r775;
	setp.eq.s32 	%p274, %r233, 999999999;
	@%p274 bra 	$L__BB0_157;
// %bb.231:                             // %oksrem2998
                                        //   in Loop: Header=BB0_218 Depth=1
	add.s32 	%r777, %r233, %r210;
	mul.wide.s32 	%rd126, %r777, 4;
	add.s64 	%rd128, %rd40, %rd126;
	mov.u32 	%r778, 0;
	st.shared.u32 	[%rd128], %r778;
	setp.eq.s32 	%p275, %r234, 999999999;
	@%p275 bra 	$L__BB0_158;
// %bb.232:                             // %oksrem3063
                                        //   in Loop: Header=BB0_218 Depth=1
	add.s32 	%r779, %r234, %r210;
	mul.wide.s32 	%rd129, %r779, 4;
	add.s64 	%rd131, %rd40, %rd129;
	st.shared.u32 	[%rd131], %r778;
	setp.eq.s32 	%p276, %r235, 999999999;
	@%p276 bra 	$L__BB0_159;
// %bb.233:                             // %oksrem3128
                                        //   in Loop: Header=BB0_218 Depth=1
	add.s32 	%r781, %r235, %r210;
	mul.wide.s32 	%rd132, %r781, 4;
	add.s64 	%rd134, %rd40, %rd132;
	st.shared.u32 	[%rd134], %r778;
	setp.eq.s32 	%p277, %r236, 999999999;
	@%p277 bra 	$L__BB0_160;
// %bb.234:                             // %oksrem3193
                                        //   in Loop: Header=BB0_218 Depth=1
	add.s32 	%r783, %r236, %r210;
	mul.wide.s32 	%rd135, %r783, 4;
	add.s64 	%rd137, %rd40, %rd135;
	st.shared.u32 	[%rd137], %r778;
	setp.eq.s32 	%p278, %r237, 999999999;
	@%p278 bra 	$L__BB0_161;
// %bb.235:                             // %oksrem3258
                                        //   in Loop: Header=BB0_218 Depth=1
	setp.eq.s32 	%p279, %r176, 3;
	add.s32 	%r786, %r237, %r210;
	mul.wide.s32 	%rd138, %r786, 4;
	add.s64 	%rd140, %rd40, %rd138;
	st.shared.u32 	[%rd140], %r778;
	bar.sync 	0;
	mov.u32 	%r92, %r778;
	mov.u32 	%r93, %r778;
	mov.u32 	%r94, %r778;
	mov.u32 	%r95, %r778;
	mov.u32 	%r96, %r778;
	mov.u32 	%r97, %r778;
	mov.u32 	%r98, %r778;
	mov.u32 	%r99, %r778;
	mov.u32 	%r100, %r778;
	mov.u32 	%r101, %r778;
	mov.u32 	%r102, %r778;
	mov.u32 	%r103, %r778;
	mov.u32 	%r104, %r778;
	mov.u32 	%r105, %r778;
	mov.u32 	%r106, %r778;
	mov.u32 	%r107, %r778;
	@%p279 bra 	$L__BB0_162;
// %bb.236:                             // %oksrem3304
                                        //   in Loop: Header=BB0_218 Depth=1
	add.s32 	%r787, %r209, %r200;
	ld.shared.u32 	%r92, [%rd8];
	ld.shared.u32 	%r93, [%rd9];
	ld.shared.u32 	%r94, [%rd10+12];
	ld.shared.u32 	%r95, [%rd11+12];
	ld.shared.u32 	%r96, [%rd10+24];
	ld.shared.u32 	%r97, [%rd11+24];
	ld.shared.u32 	%r98, [%rd10+36];
	ld.shared.u32 	%r99, [%rd11+36];
	add.s32 	%r788, %r787, 12;
	mul.hi.u32 	%r789, %r788, -1431655765;
	shr.u32 	%r790, %r789, 4;
	mul.lo.s32 	%r791, %r790, 24;
	sub.s32 	%r792, %r788, %r791;
	add.s32 	%r793, %r201, %r792;
	mul.wide.u32 	%rd141, %r793, 4;
	add.s64 	%rd143, %rd40, %rd141;
	ld.shared.u32 	%r100, [%rd143];
	add.s32 	%r794, %r202, %r792;
	mul.wide.u32 	%rd144, %r794, 4;
	add.s64 	%rd145, %rd40, %rd144;
	ld.shared.u32 	%r101, [%rd145];
	cvt.u16.u32 	%rs73, %r787;
	add.s16 	%rs74, %rs73, 15;
	mul.hi.s16 	%rs75, %rs74, 10923;
	shr.u16 	%rs76, %rs75, 15;
	shr.s16 	%rs77, %rs75, 2;
	add.s16 	%rs78, %rs77, %rs76;
	mul.lo.s16 	%rs79, %rs78, 24;
	sub.s16 	%rs80, %rs74, %rs79;
	cvt.s32.s16 	%r795, %rs80;
	add.s32 	%r796, %r201, %r795;
	mul.wide.s32 	%rd146, %r796, 4;
	add.s64 	%rd147, %rd40, %rd146;
	ld.shared.u32 	%r102, [%rd147];
	add.s32 	%r797, %r202, %r795;
	mul.wide.u32 	%rd148, %r797, 4;
	add.s64 	%rd149, %rd40, %rd148;
	ld.shared.u32 	%r103, [%rd149];
	add.s16 	%rs81, %rs73, 18;
	mul.hi.s16 	%rs82, %rs81, 10923;
	shr.u16 	%rs83, %rs82, 15;
	shr.s16 	%rs84, %rs82, 2;
	add.s16 	%rs85, %rs84, %rs83;
	mul.lo.s16 	%rs86, %rs85, 24;
	sub.s16 	%rs87, %rs81, %rs86;
	cvt.s32.s16 	%r798, %rs87;
	add.s32 	%r799, %r201, %r798;
	mul.wide.s32 	%rd150, %r799, 4;
	add.s64 	%rd151, %rd40, %rd150;
	ld.shared.u32 	%r104, [%rd151];
	add.s32 	%r800, %r202, %r798;
	mul.wide.u32 	%rd152, %r800, 4;
	add.s64 	%rd153, %rd40, %rd152;
	ld.shared.u32 	%r105, [%rd153];
	add.s16 	%rs88, %rs73, 21;
	mul.hi.s16 	%rs89, %rs88, 10923;
	shr.u16 	%rs90, %rs89, 15;
	shr.s16 	%rs91, %rs89, 2;
	add.s16 	%rs92, %rs91, %rs90;
	mul.lo.s16 	%rs93, %rs92, 24;
	sub.s16 	%rs94, %rs88, %rs93;
	cvt.s32.s16 	%r801, %rs94;
	add.s32 	%r802, %r201, %r801;
	mul.wide.s32 	%rd154, %r802, 4;
	add.s64 	%rd155, %rd40, %rd154;
	ld.shared.u32 	%r106, [%rd155];
	add.s32 	%r803, %r202, %r801;
	mul.wide.u32 	%rd156, %r803, 4;
	add.s64 	%rd157, %rd40, %rd156;
	ld.shared.u32 	%r107, [%rd157];
$L__BB0_162:                            // %L10675
                                        //   in Loop: Header=BB0_218 Depth=1
	bar.sync 	0;
	mov.u16 	%rs3, %rs2;
	mov.u32 	%r111, %r778;
	bra.uni 	$L__BB0_163;
$L__BB0_173:                            // %L17512
                                        //   in Loop: Header=BB0_163 Depth=2
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r108, 0;
	mov.u32 	%r110, %r108;
$L__BB0_174:                            // %L17513
                                        //   in Loop: Header=BB0_163 Depth=2
	bar.sync 	0;
	add.s32 	%r111, %r111, 6;
	add.s16 	%rs3, %rs3, 6;
	setp.ne.s32 	%p300, %r111, 24;
	@%p300 bra 	$L__BB0_163;
	bra.uni 	$L__BB0_175;
$L__BB0_163:                            // %L10693
                                        //   Parent Loop BB0_218 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p280, %r111, 0;
	selp.b32 	%r1197, %r92, 0, %p280;
	setp.eq.s32 	%p281, %r111, 6;
	selp.b32 	%r1198, %r96, %r1197, %p281;
	setp.eq.s32 	%p282, %r111, 12;
	selp.b32 	%r1199, %r100, %r1198, %p282;
	setp.eq.s32 	%p283, %r111, 18;
	selp.b32 	%r1200, %r104, %r1199, %p283;
	selp.b32 	%r1201, %r93, 0, %p280;
	selp.b32 	%r1202, %r97, %r1201, %p281;
	selp.b32 	%r1203, %r101, %r1202, %p282;
	selp.b32 	%r1204, %r105, %r1203, %p283;
	selp.b32 	%r1205, %r94, 0, %p280;
	selp.b32 	%r1206, %r98, %r1205, %p281;
	selp.b32 	%r1207, %r102, %r1206, %p282;
	selp.b32 	%r1208, %r106, %r1207, %p283;
	selp.b32 	%r1209, %r95, 0, %p280;
	selp.b32 	%r1210, %r99, %r1209, %p281;
	selp.b32 	%r1211, %r103, %r1210, %p282;
	selp.b32 	%r1212, %r107, %r1211, %p283;
	mov.u16 	%rs132, 25600;
	// begin inline asm
	mov.b32 %r810, {%rs132, %rs132};
	// end inline asm
	mov.u16 	%rs134, 21504;
	// begin inline asm
	mov.b32 %r821, {%rs134, %rs134};
	// end inline asm
	xor.b32  	%r809, %r1200, -2004318072;
	mov.u32 	%r946, 983055;
	// begin inline asm
	lop3.b32 %r807, %r946, %r809, %r810, 202;
	// end inline asm
	mov.u16 	%rs138, 18432;
	// begin inline asm
	mov.b32 %r811, {%rs138, %rs138};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r812, %r810, %r811;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r815, %r807, %r812;
	// end inline asm
	mov.u32 	%r957, 15728880;
	// begin inline asm
	lop3.b32 %r818, %r957, %r809, %r821, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r822, {%rs138, %rs138};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r823, %r821, %r822;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r826, %r818, %r823;
	// end inline asm
	// begin inline asm
	mov.b32 %r856, {%rs132, %rs132};
	// end inline asm
	// begin inline asm
	mov.b32 %r867, {%rs134, %rs134};
	// end inline asm
	xor.b32  	%r855, %r1204, -2004318072;
	// begin inline asm
	lop3.b32 %r853, %r946, %r855, %r856, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r857, {%rs138, %rs138};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r858, %r856, %r857;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r861, %r853, %r858;
	// end inline asm
	// begin inline asm
	lop3.b32 %r864, %r957, %r855, %r867, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r868, {%rs138, %rs138};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r869, %r867, %r868;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r872, %r864, %r869;
	// end inline asm
	// begin inline asm
	mov.b32 %r902, {%rs132, %rs132};
	// end inline asm
	// begin inline asm
	mov.b32 %r913, {%rs134, %rs134};
	// end inline asm
	xor.b32  	%r901, %r1208, -2004318072;
	// begin inline asm
	lop3.b32 %r899, %r946, %r901, %r902, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r903, {%rs138, %rs138};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r904, %r902, %r903;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r907, %r899, %r904;
	// end inline asm
	// begin inline asm
	lop3.b32 %r910, %r957, %r901, %r913, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r914, {%rs138, %rs138};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r915, %r913, %r914;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r918, %r910, %r915;
	// end inline asm
	// begin inline asm
	mov.b32 %r948, {%rs132, %rs132};
	// end inline asm
	// begin inline asm
	mov.b32 %r959, {%rs134, %rs134};
	// end inline asm
	xor.b32  	%r947, %r1212, -2004318072;
	// begin inline asm
	lop3.b32 %r945, %r946, %r947, %r948, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r949, {%rs138, %rs138};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r950, %r948, %r949;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r953, %r945, %r950;
	// end inline asm
	// begin inline asm
	lop3.b32 %r956, %r957, %r947, %r959, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r960, {%rs138, %rs138};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r961, %r959, %r960;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r964, %r956, %r961;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r177;
    mov.b32 {%r2re, %r2im}, %r815;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r989, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r178;
    mov.b32 {%r2re, %r2im}, %r861;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r992, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r179;
    mov.b32 {%r2re, %r2im}, %r826;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r995, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r180;
    mov.b32 {%r2re, %r2im}, %r872;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r998, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r177;
    mov.b32 {%r2re, %r2im}, %r907;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1001, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r178;
    mov.b32 {%r2re, %r2im}, %r953;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1004, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r179;
    mov.b32 {%r2re, %r2im}, %r918;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1007, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r180;
    mov.b32 {%r2re, %r2im}, %r964;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1010, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1013, %r1014}, {%r315, %r318}, {%r989}, {%r778, %r778};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1020, %r1021}, {%r315, %r318}, {%r992}, {%r778, %r778};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1027, %r1028}, {%r315, %r318}, {%r995}, {%r778, %r778};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1034, %r1035}, {%r315, %r318}, {%r998}, {%r778, %r778};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1041, %r1042}, {%r315, %r318}, {%r1001}, {%r778, %r778};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1048, %r1049}, {%r315, %r318}, {%r1004}, {%r778, %r778};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1055, %r1056}, {%r315, %r318}, {%r1007}, {%r778, %r778};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1062, %r1063}, {%r315, %r318}, {%r1010}, {%r778, %r778};
	// end inline asm
	@%p1 bra 	$L__BB0_237;
	bra.uni 	$L__BB0_164;
$L__BB0_237:                            // %pass4659
                                        //   in Loop: Header=BB0_163 Depth=2
	// begin inline asm
	neg.f16x2 %r1069, %r370;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1071, %r1069, %r1014;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1074, %r367, %r1013, %r1071;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1078, %r370;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1080, %r1078, %r1021;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1083, %r367, %r1020, %r1080;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1087, %r370;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1089, %r1087, %r1028;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1092, %r367, %r1027, %r1089;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1096, %r370;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1098, %r1096, %r1035;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1101, %r367, %r1034, %r1098;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1105, %r370;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1107, %r1105, %r1042;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1110, %r367, %r1041, %r1107;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1114, %r370;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1116, %r1114, %r1049;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1119, %r367, %r1048, %r1116;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1123, %r370;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1125, %r1123, %r1056;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1128, %r367, %r1055, %r1125;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1132, %r370;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1134, %r1132, %r1063;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1137, %r367, %r1062, %r1134;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1141, %r370, %r1013;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1144, %r367, %r1014, %r1141;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1148, %r370, %r1020;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1151, %r367, %r1021, %r1148;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1155, %r370, %r1027;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1158, %r367, %r1028, %r1155;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1162, %r370, %r1034;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1165, %r367, %r1035, %r1162;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1169, %r370, %r1041;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1172, %r367, %r1042, %r1169;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1176, %r370, %r1048;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1179, %r367, %r1049, %r1176;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1183, %r370, %r1055;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1186, %r367, %r1056, %r1183;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1190, %r370, %r1062;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1193, %r367, %r1063, %r1190;
	// end inline asm
	mov.u32 	%r1362, 0;
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1213, %r1214}, {%r411, %r414}, {%r1074, %r1144}, {%r1362, %r1362}, %r206, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1222, %r1223}, {%r411, %r414}, {%r1083, %r1151}, {%r1362, %r1362}, %r206, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1231, %r1232}, {%r411, %r414}, {%r1092, %r1158}, {%r1362, %r1362}, %r206, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1240, %r1241}, {%r411, %r414}, {%r1101, %r1165}, {%r1362, %r1362}, %r206, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1249, %r1250}, {%r411, %r414}, {%r1110, %r1172}, {%r1362, %r1362}, %r206, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1258, %r1259}, {%r411, %r414}, {%r1119, %r1179}, {%r1362, %r1362}, %r206, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1267, %r1268}, {%r411, %r414}, {%r1128, %r1186}, {%r1362, %r1362}, %r206, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1276, %r1277}, {%r411, %r414}, {%r1137, %r1193}, {%r1362, %r1362}, %r206, 0;
	// end inline asm
	bar.sync 	0;
	mul.hi.s16 	%rs143, %rs3, 10923;
	shr.u16 	%rs144, %rs143, 15;
	add.s16 	%rs145, %rs143, %rs144;
	mul.lo.s16 	%rs146, %rs145, 6;
	sub.s16 	%rs147, %rs3, %rs146;
	mul.wide.s16 	%r1395, %rs147, 16;
	add.s32 	%r1396, %r203, %r1395;
	mul.wide.s32 	%rd160, %r1396, 4;
	add.s64 	%rd162, %rd40, %rd160;
	ld.shared.u32 	%r1353, [%rd162];
	add.s32 	%r1397, %r204, %r1395;
	mul.wide.s32 	%rd163, %r1397, 4;
	add.s64 	%rd164, %rd40, %rd163;
	ld.shared.u32 	%r1360, [%rd164];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1349, %r1350}, {%r423, %r426}, {%r1353}, {%r1362, %r1362};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1356, %r1357}, {%r423, %r426}, {%r1360}, {%r1362, %r1362};
	// end inline asm
	@%p284 bra 	$L__BB0_239;
	bra.uni 	$L__BB0_238;
$L__BB0_239:                            // %pass5153
                                        //   in Loop: Header=BB0_163 Depth=2
	// begin inline asm
	neg.f16x2 %r1363, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1365, %r1363, %r1350;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1368, %r461, %r1349, %r1365;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1372, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1374, %r1372, %r1357;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1377, %r461, %r1356, %r1374;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1381, %r464, %r1349;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1384, %r461, %r1350, %r1381;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1388, %r464, %r1356;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1391, %r461, %r1357, %r1388;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1417, %r1420}, {%r507, %r510}, {%r1368, %r1384}, {%r1362, %r1362}, %r258, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1424, %r1428}, {%r507, %r510}, {%r1377, %r1391}, {%r1362, %r1362}, %r258, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1416, %r1417, %r1417;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1419, %r1420, %r1420, %r1416;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1423, %r1424, %r1424, %r1419;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1427, %r1428, %r1428, %r1423;
	// end inline asm
	mov.u32 	%r1515, 402659328;
	// begin inline asm
	fma.rn.f16x2 %r1431, %r1515, %r1427, %r110;
	// end inline asm
	add.s32 	%r259, %r88, %r111;
	add.s32 	%r1518, %r259, 1;
	mul.hi.u32 	%r1519, %r1518, -1431655765;
	shr.u32 	%r1520, %r1519, 2;
	mul.lo.s32 	%r1521, %r1520, 6;
	sub.s32 	%r1522, %r1518, %r1521;
	shl.b32 	%r1523, %r1522, 4;
	add.s32 	%r1524, %r203, %r1523;
	mul.wide.u32 	%rd167, %r1524, 4;
	add.s64 	%rd169, %rd40, %rd167;
	ld.shared.u32 	%r1439, [%rd169];
	add.s32 	%r1525, %r204, %r1523;
	mul.wide.u32 	%rd170, %r1525, 4;
	add.s64 	%rd171, %rd40, %rd170;
	ld.shared.u32 	%r1446, [%rd171];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1456, %r1453}, {%r423, %r426}, {%r1439}, {%r1362, %r1362};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1465, %r1462}, {%r423, %r426}, {%r1446}, {%r1362, %r1362};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1449, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1451, %r1449, %r1453;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1454, %r461, %r1456, %r1451;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1458, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1460, %r1458, %r1462;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1463, %r461, %r1465, %r1460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1467, %r464, %r1456;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1470, %r461, %r1453, %r1467;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1474, %r464, %r1465;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1477, %r461, %r1462, %r1474;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1500, %r1503}, {%r507, %r510}, {%r1454, %r1470}, {%r1362, %r1362}, %r258, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1507, %r1511}, {%r507, %r510}, {%r1463, %r1477}, {%r1362, %r1362}, %r258, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1499, %r1500, %r1500;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1502, %r1503, %r1503, %r1499;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1506, %r1507, %r1507, %r1502;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1510, %r1511, %r1511, %r1506;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3049, %r1515, %r1510, %r1431;
	// end inline asm
	add.s32 	%r3047, %r108, 2;
	setp.eq.s32 	%p285, %r3047, 64;
	@%p285 bra 	$L__BB0_165;
	bra.uni 	$L__BB0_240;
$L__BB0_165:                            // %L13369
                                        //   in Loop: Header=BB0_163 Depth=2
	setp.gt.u32 	%p286, %r292, 7;
	@%p286 bra 	$L__BB0_167;
// %bb.166:                             // %L13429
                                        //   in Loop: Header=BB0_163 Depth=2
	mul.lo.s32 	%r1526, %r109, 786432;
	or.b32  	%r1527, %r205, %r1526;
	cvt.u64.u32 	%rd172, %r1527;
	add.s64 	%rd173, %rd172, %rd7;
	mul.hi.s64 	%rd174, %rd173, 3074457345618258603;
	shr.u64 	%rd175, %rd174, 63;
	shr.s64 	%rd176, %rd174, 26;
	add.s64 	%rd177, %rd176, %rd175;
	setp.lt.s64 	%p287, %rd173, 0;
	mul.lo.s64 	%rd178, %rd177, 402653184;
	setp.ne.s64 	%p288, %rd178, %rd173;
	and.pred  	%p289, %p287, %p288;
	selp.s64 	%rd179, -1, 0, %p289;
	add.s64 	%rd180, %rd177, %rd179;
	mul.lo.s64 	%rd181, %rd180, -402653184;
	add.s64 	%rd182, %rd181, %rd173;
	shl.b64 	%rd183, %rd182, 2;
	add.s64 	%rd184, %rd4, %rd183;
	st.global.u32 	[%rd184], %r3049;
$L__BB0_167:                            // %L13586
                                        //   in Loop: Header=BB0_163 Depth=2
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r3047, 0;
	mov.u32 	%r3049, %r3047;
$L__BB0_240:                            // %oksrem5658
                                        //   in Loop: Header=BB0_163 Depth=2
	add.s32 	%r1695, %r259, 2;
	mul.hi.u32 	%r1696, %r1695, -1431655765;
	shr.u32 	%r1697, %r1696, 2;
	mul.lo.s32 	%r1698, %r1697, 6;
	sub.s32 	%r1699, %r1695, %r1698;
	shl.b32 	%r1700, %r1699, 4;
	add.s32 	%r1701, %r203, %r1700;
	mul.wide.u32 	%rd185, %r1701, 4;
	add.s64 	%rd187, %rd40, %rd185;
	ld.shared.u32 	%r1533, [%rd187];
	add.s32 	%r1702, %r204, %r1700;
	mul.wide.u32 	%rd188, %r1702, 4;
	add.s64 	%rd189, %rd40, %rd188;
	ld.shared.u32 	%r1540, [%rd189];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1550, %r1547}, {%r423, %r426}, {%r1533}, {%r1362, %r1362};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1559, %r1556}, {%r423, %r426}, {%r1540}, {%r1362, %r1362};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1543, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1545, %r1543, %r1547;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1548, %r461, %r1550, %r1545;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1552, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1554, %r1552, %r1556;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1557, %r461, %r1559, %r1554;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1561, %r464, %r1550;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1564, %r461, %r1547, %r1561;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1568, %r464, %r1559;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1571, %r461, %r1556, %r1568;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1594, %r1597}, {%r507, %r510}, {%r1548, %r1564}, {%r1362, %r1362}, %r258, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1601, %r1605}, {%r507, %r510}, {%r1557, %r1571}, {%r1362, %r1362}, %r258, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1593, %r1594, %r1594;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1596, %r1597, %r1597, %r1593;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1600, %r1601, %r1601, %r1596;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1604, %r1605, %r1605, %r1600;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1608, %r1515, %r1604, %r3049;
	// end inline asm
	add.s32 	%r1703, %r259, 3;
	mul.hi.u32 	%r1704, %r1703, -1431655765;
	shr.u32 	%r1705, %r1704, 2;
	mul.lo.s32 	%r1706, %r1705, 6;
	sub.s32 	%r1707, %r1703, %r1706;
	shl.b32 	%r1708, %r1707, 4;
	add.s32 	%r1709, %r203, %r1708;
	mul.wide.u32 	%rd190, %r1709, 4;
	add.s64 	%rd191, %rd40, %rd190;
	ld.shared.u32 	%r1616, [%rd191];
	add.s32 	%r1710, %r204, %r1708;
	mul.wide.u32 	%rd192, %r1710, 4;
	add.s64 	%rd193, %rd40, %rd192;
	ld.shared.u32 	%r1623, [%rd193];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1633, %r1630}, {%r423, %r426}, {%r1616}, {%r1362, %r1362};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1642, %r1639}, {%r423, %r426}, {%r1623}, {%r1362, %r1362};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1626, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1628, %r1626, %r1630;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1631, %r461, %r1633, %r1628;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1635, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1637, %r1635, %r1639;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1640, %r461, %r1642, %r1637;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1644, %r464, %r1633;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1647, %r461, %r1630, %r1644;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1651, %r464, %r1642;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1654, %r461, %r1639, %r1651;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1677, %r1680}, {%r507, %r510}, {%r1631, %r1647}, {%r1362, %r1362}, %r258, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1684, %r1688}, {%r507, %r510}, {%r1640, %r1654}, {%r1362, %r1362}, %r258, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1676, %r1677, %r1677;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1679, %r1680, %r1680, %r1676;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1683, %r1684, %r1684, %r1679;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1687, %r1688, %r1688, %r1683;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3052, %r1515, %r1687, %r1608;
	// end inline asm
	add.s32 	%r3050, %r3047, 2;
	setp.eq.s32 	%p290, %r3050, 64;
	@%p290 bra 	$L__BB0_168;
	bra.uni 	$L__BB0_241;
$L__BB0_168:                            // %L15332
                                        //   in Loop: Header=BB0_163 Depth=2
	setp.gt.u32 	%p291, %r292, 7;
	@%p291 bra 	$L__BB0_170;
// %bb.169:                             // %L15392
                                        //   in Loop: Header=BB0_163 Depth=2
	mul.lo.s32 	%r1711, %r109, 786432;
	or.b32  	%r1712, %r205, %r1711;
	cvt.u64.u32 	%rd194, %r1712;
	add.s64 	%rd195, %rd194, %rd7;
	mul.hi.s64 	%rd196, %rd195, 3074457345618258603;
	shr.u64 	%rd197, %rd196, 63;
	shr.s64 	%rd198, %rd196, 26;
	add.s64 	%rd199, %rd198, %rd197;
	setp.lt.s64 	%p292, %rd195, 0;
	mul.lo.s64 	%rd200, %rd199, 402653184;
	setp.ne.s64 	%p293, %rd200, %rd195;
	and.pred  	%p294, %p292, %p293;
	selp.s64 	%rd201, -1, 0, %p294;
	add.s64 	%rd202, %rd199, %rd201;
	mul.lo.s64 	%rd203, %rd202, -402653184;
	add.s64 	%rd204, %rd203, %rd195;
	shl.b64 	%rd205, %rd204, 2;
	add.s64 	%rd206, %rd4, %rd205;
	st.global.u32 	[%rd206], %r3052;
$L__BB0_170:                            // %L15549
                                        //   in Loop: Header=BB0_163 Depth=2
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r3050, 0;
	mov.u32 	%r3052, %r3050;
$L__BB0_241:                            // %oksrem6509
                                        //   in Loop: Header=BB0_163 Depth=2
	add.s32 	%r1880, %r259, 4;
	mul.hi.u32 	%r1881, %r1880, -1431655765;
	shr.u32 	%r1882, %r1881, 2;
	mul.lo.s32 	%r1883, %r1882, 6;
	sub.s32 	%r1884, %r1880, %r1883;
	shl.b32 	%r1885, %r1884, 4;
	add.s32 	%r1886, %r203, %r1885;
	mul.wide.u32 	%rd207, %r1886, 4;
	add.s64 	%rd209, %rd40, %rd207;
	ld.shared.u32 	%r1718, [%rd209];
	add.s32 	%r1887, %r204, %r1885;
	mul.wide.u32 	%rd210, %r1887, 4;
	add.s64 	%rd211, %rd40, %rd210;
	ld.shared.u32 	%r1725, [%rd211];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1735, %r1732}, {%r423, %r426}, {%r1718}, {%r1362, %r1362};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1744, %r1741}, {%r423, %r426}, {%r1725}, {%r1362, %r1362};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1728, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1730, %r1728, %r1732;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1733, %r461, %r1735, %r1730;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1737, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1739, %r1737, %r1741;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1742, %r461, %r1744, %r1739;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1746, %r464, %r1735;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1749, %r461, %r1732, %r1746;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1753, %r464, %r1744;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1756, %r461, %r1741, %r1753;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1779, %r1782}, {%r507, %r510}, {%r1733, %r1749}, {%r1362, %r1362}, %r258, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1786, %r1790}, {%r507, %r510}, {%r1742, %r1756}, {%r1362, %r1362}, %r258, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1778, %r1779, %r1779;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1781, %r1782, %r1782, %r1778;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1785, %r1786, %r1786, %r1781;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1789, %r1790, %r1790, %r1785;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1793, %r1515, %r1789, %r3052;
	// end inline asm
	add.s32 	%r1888, %r259, 5;
	mul.hi.u32 	%r1889, %r1888, -1431655765;
	shr.u32 	%r1890, %r1889, 2;
	mul.lo.s32 	%r1891, %r1890, 6;
	sub.s32 	%r1892, %r1888, %r1891;
	shl.b32 	%r1893, %r1892, 4;
	add.s32 	%r1894, %r203, %r1893;
	mul.wide.u32 	%rd212, %r1894, 4;
	add.s64 	%rd213, %rd40, %rd212;
	ld.shared.u32 	%r1801, [%rd213];
	add.s32 	%r1895, %r204, %r1893;
	mul.wide.u32 	%rd214, %r1895, 4;
	add.s64 	%rd215, %rd40, %rd214;
	ld.shared.u32 	%r1808, [%rd215];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1818, %r1815}, {%r423, %r426}, {%r1801}, {%r1362, %r1362};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1827, %r1824}, {%r423, %r426}, {%r1808}, {%r1362, %r1362};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1811, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1813, %r1811, %r1815;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1816, %r461, %r1818, %r1813;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1820, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1822, %r1820, %r1824;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1825, %r461, %r1827, %r1822;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1829, %r464, %r1818;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1832, %r461, %r1815, %r1829;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1836, %r464, %r1827;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1839, %r461, %r1824, %r1836;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1862, %r1865}, {%r507, %r510}, {%r1816, %r1832}, {%r1362, %r1362}, %r258, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1869, %r1873}, {%r507, %r510}, {%r1825, %r1839}, {%r1362, %r1362}, %r258, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1861, %r1862, %r1862;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1864, %r1865, %r1865, %r1861;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1868, %r1869, %r1869, %r1864;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1872, %r1873, %r1873, %r1868;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r110, %r1515, %r1872, %r1793;
	// end inline asm
	add.s32 	%r108, %r3050, 2;
	setp.eq.s32 	%p295, %r108, 64;
	@%p295 bra 	$L__BB0_171;
	bra.uni 	$L__BB0_174;
$L__BB0_171:                            // %L17295
                                        //   in Loop: Header=BB0_163 Depth=2
	setp.gt.u32 	%p296, %r292, 7;
	@%p296 bra 	$L__BB0_173;
// %bb.172:                             // %L17355
                                        //   in Loop: Header=BB0_163 Depth=2
	mul.lo.s32 	%r1896, %r109, 786432;
	or.b32  	%r1897, %r205, %r1896;
	cvt.u64.u32 	%rd216, %r1897;
	add.s64 	%rd217, %rd216, %rd7;
	mul.hi.s64 	%rd218, %rd217, 3074457345618258603;
	shr.u64 	%rd219, %rd218, 63;
	shr.s64 	%rd220, %rd218, 26;
	add.s64 	%rd221, %rd220, %rd219;
	setp.lt.s64 	%p297, %rd217, 0;
	mul.lo.s64 	%rd222, %rd221, 402653184;
	setp.ne.s64 	%p298, %rd222, %rd217;
	and.pred  	%p299, %p297, %p298;
	selp.s64 	%rd223, -1, 0, %p299;
	add.s64 	%rd224, %rd221, %rd223;
	mul.lo.s64 	%rd225, %rd224, -402653184;
	add.s64 	%rd226, %rd225, %rd217;
	shl.b64 	%rd227, %rd226, 2;
	add.s64 	%rd228, %rd4, %rd227;
	st.global.u32 	[%rd228], %r110;
	bra.uni 	$L__BB0_173;
$L__BB0_175:                            // %L17534.preheader
                                        //   in Loop: Header=BB0_218 Depth=1
	mov.u16 	%rs234, %rs1;
	mov.u32 	%r3038, %r1362;
	bra.uni 	$L__BB0_176;
$L__BB0_187:                            // %L24353
                                        //   in Loop: Header=BB0_176 Depth=2
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r108, %r2768;
	mov.u32 	%r110, %r2768;
$L__BB0_188:                            // %L24354
                                        //   in Loop: Header=BB0_176 Depth=2
	bar.sync 	0;
	add.s32 	%r3038, %r3038, 6;
	add.s16 	%rs234, %rs234, 6;
	setp.ne.s32 	%p320, %r3038, 24;
	@%p320 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_189;
$L__BB0_176:                            // %L17534
                                        //   Parent Loop BB0_218 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p301, %r3038, 0;
	selp.b32 	%r2594, %r92, 0, %p301;
	setp.eq.s32 	%p302, %r3038, 6;
	selp.b32 	%r2595, %r96, %r2594, %p302;
	setp.eq.s32 	%p303, %r3038, 12;
	selp.b32 	%r2596, %r100, %r2595, %p303;
	setp.eq.s32 	%p304, %r3038, 18;
	selp.b32 	%r2597, %r104, %r2596, %p304;
	selp.b32 	%r2598, %r93, 0, %p301;
	selp.b32 	%r2599, %r97, %r2598, %p302;
	selp.b32 	%r2600, %r101, %r2599, %p303;
	selp.b32 	%r2601, %r105, %r2600, %p304;
	selp.b32 	%r2602, %r94, 0, %p301;
	selp.b32 	%r2603, %r98, %r2602, %p302;
	selp.b32 	%r2604, %r102, %r2603, %p303;
	selp.b32 	%r2605, %r106, %r2604, %p304;
	selp.b32 	%r2606, %r95, 0, %p301;
	selp.b32 	%r2607, %r99, %r2606, %p302;
	selp.b32 	%r2608, %r103, %r2607, %p303;
	selp.b32 	%r2609, %r107, %r2608, %p304;
	// begin inline asm
	mov.b32 %r1927, {%rs132, %rs132};
	// end inline asm
	// begin inline asm
	mov.b32 %r1938, {%rs134, %rs134};
	// end inline asm
	shr.u32 	%r2610, %r2597, 8;
	xor.b32  	%r1937, %r2610, 8947848;
	// begin inline asm
	lop3.b32 %r1924, %r946, %r1937, %r1927, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1928, {%rs138, %rs138};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1929, %r1927, %r1928;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1932, %r1924, %r1929;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1935, %r957, %r1937, %r1938, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1939, {%rs138, %rs138};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1940, %r1938, %r1939;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1943, %r1935, %r1940;
	// end inline asm
	// begin inline asm
	mov.b32 %r1973, {%rs132, %rs132};
	// end inline asm
	// begin inline asm
	mov.b32 %r1984, {%rs134, %rs134};
	// end inline asm
	shr.u32 	%r2611, %r2601, 8;
	xor.b32  	%r1983, %r2611, 8947848;
	// begin inline asm
	lop3.b32 %r1970, %r946, %r1983, %r1973, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1974, {%rs138, %rs138};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1975, %r1973, %r1974;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1978, %r1970, %r1975;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1981, %r957, %r1983, %r1984, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1985, {%rs138, %rs138};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1986, %r1984, %r1985;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1989, %r1981, %r1986;
	// end inline asm
	// begin inline asm
	mov.b32 %r2019, {%rs132, %rs132};
	// end inline asm
	// begin inline asm
	mov.b32 %r2030, {%rs134, %rs134};
	// end inline asm
	shr.u32 	%r2612, %r2605, 8;
	xor.b32  	%r2029, %r2612, 8947848;
	// begin inline asm
	lop3.b32 %r2016, %r946, %r2029, %r2019, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2020, {%rs138, %rs138};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2021, %r2019, %r2020;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2024, %r2016, %r2021;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2027, %r957, %r2029, %r2030, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2031, {%rs138, %rs138};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2032, %r2030, %r2031;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2035, %r2027, %r2032;
	// end inline asm
	// begin inline asm
	mov.b32 %r2065, {%rs132, %rs132};
	// end inline asm
	// begin inline asm
	mov.b32 %r2076, {%rs134, %rs134};
	// end inline asm
	shr.u32 	%r2613, %r2609, 8;
	xor.b32  	%r2075, %r2613, 8947848;
	// begin inline asm
	lop3.b32 %r2062, %r946, %r2075, %r2065, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2066, {%rs138, %rs138};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2067, %r2065, %r2066;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2070, %r2062, %r2067;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2073, %r957, %r2075, %r2076, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2077, {%rs138, %rs138};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2078, %r2076, %r2077;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2081, %r2073, %r2078;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r177;
    mov.b32 {%r2re, %r2im}, %r1932;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2084, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r178;
    mov.b32 {%r2re, %r2im}, %r1978;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2087, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r179;
    mov.b32 {%r2re, %r2im}, %r1943;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2090, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r180;
    mov.b32 {%r2re, %r2im}, %r1989;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2093, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r177;
    mov.b32 {%r2re, %r2im}, %r2024;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2096, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r178;
    mov.b32 {%r2re, %r2im}, %r2070;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2099, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r179;
    mov.b32 {%r2re, %r2im}, %r2035;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2102, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r180;
    mov.b32 {%r2re, %r2im}, %r2081;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2105, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2171, %r2168}, {%r315, %r318}, {%r2084}, {%r1362, %r1362};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2180, %r2177}, {%r315, %r318}, {%r2087}, {%r1362, %r1362};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2189, %r2186}, {%r315, %r318}, {%r2090}, {%r1362, %r1362};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2198, %r2195}, {%r315, %r318}, {%r2093}, {%r1362, %r1362};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2207, %r2204}, {%r315, %r318}, {%r2096}, {%r1362, %r1362};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2216, %r2213}, {%r315, %r318}, {%r2099}, {%r1362, %r1362};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2225, %r2222}, {%r315, %r318}, {%r2102}, {%r1362, %r1362};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2234, %r2231}, {%r315, %r318}, {%r2105}, {%r1362, %r1362};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2164, %r370;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2166, %r2164, %r2168;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2169, %r367, %r2171, %r2166;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2173, %r370;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2175, %r2173, %r2177;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2178, %r367, %r2180, %r2175;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2182, %r370;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2184, %r2182, %r2186;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2187, %r367, %r2189, %r2184;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2191, %r370;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2193, %r2191, %r2195;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2196, %r367, %r2198, %r2193;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2200, %r370;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2202, %r2200, %r2204;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2205, %r367, %r2207, %r2202;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2209, %r370;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2211, %r2209, %r2213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2214, %r367, %r2216, %r2211;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2218, %r370;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2220, %r2218, %r2222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2223, %r367, %r2225, %r2220;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2227, %r370;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2229, %r2227, %r2231;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2232, %r367, %r2234, %r2229;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2236, %r370, %r2171;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2239, %r367, %r2168, %r2236;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2243, %r370, %r2180;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2246, %r367, %r2177, %r2243;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2250, %r370, %r2189;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2253, %r367, %r2186, %r2250;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2257, %r370, %r2198;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2260, %r367, %r2195, %r2257;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2264, %r370, %r2207;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2267, %r367, %r2204, %r2264;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2271, %r370, %r2216;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2274, %r367, %r2213, %r2271;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2278, %r370, %r2225;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2281, %r367, %r2222, %r2278;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2285, %r370, %r2234;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2288, %r367, %r2231, %r2285;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2292, %r2293}, {%r411, %r414}, {%r2169, %r2239}, {%r1362, %r1362}, %r206, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2301, %r2302}, {%r411, %r414}, {%r2178, %r2246}, {%r1362, %r1362}, %r206, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2310, %r2311}, {%r411, %r414}, {%r2187, %r2253}, {%r1362, %r1362}, %r206, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2319, %r2320}, {%r411, %r414}, {%r2196, %r2260}, {%r1362, %r1362}, %r206, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2328, %r2329}, {%r411, %r414}, {%r2205, %r2267}, {%r1362, %r1362}, %r206, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2337, %r2338}, {%r411, %r414}, {%r2214, %r2274}, {%r1362, %r1362}, %r206, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2346, %r2347}, {%r411, %r414}, {%r2223, %r2281}, {%r1362, %r1362}, %r206, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2355, %r2356}, {%r411, %r414}, {%r2232, %r2288}, {%r1362, %r1362}, %r206, 0;
	// end inline asm
	bar.sync 	0;
	add.s16 	%rs196, %rs234, -5;
	mul.hi.s16 	%rs197, %rs196, 10923;
	shr.u16 	%rs198, %rs197, 15;
	add.s16 	%rs199, %rs197, %rs198;
	mul.lo.s16 	%rs200, %rs199, 6;
	sub.s16 	%rs201, %rs196, %rs200;
	mul.wide.s16 	%r2614, %rs201, 16;
	add.s32 	%r2615, %r203, %r2614;
	mul.wide.s32 	%rd229, %r2615, 4;
	add.s64 	%rd231, %rd40, %rd229;
	ld.shared.u32 	%r2432, [%rd231];
	add.s32 	%r2616, %r204, %r2614;
	mul.wide.s32 	%rd232, %r2616, 4;
	add.s64 	%rd233, %rd40, %rd232;
	ld.shared.u32 	%r2439, [%rd233];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2449, %r2446}, {%r423, %r426}, {%r2432}, {%r1362, %r1362};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2458, %r2455}, {%r423, %r426}, {%r2439}, {%r1362, %r1362};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2442, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2444, %r2442, %r2446;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2447, %r461, %r2449, %r2444;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2451, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2453, %r2451, %r2455;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2456, %r461, %r2458, %r2453;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2460, %r464, %r2449;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2463, %r461, %r2446, %r2460;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2467, %r464, %r2458;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2470, %r461, %r2455, %r2467;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2493, %r2496}, {%r507, %r510}, {%r2447, %r2463}, {%r1362, %r1362}, %r258, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2500, %r2504}, {%r507, %r510}, {%r2456, %r2470}, {%r1362, %r1362}, %r258, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2492, %r2493, %r2493;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2495, %r2496, %r2496, %r2492;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2499, %r2500, %r2500, %r2495;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2503, %r2504, %r2504, %r2499;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2507, %r1515, %r2503, %r110;
	// end inline asm
	add.s16 	%rs202, %rs234, -4;
	mul.hi.s16 	%rs203, %rs202, 10923;
	shr.u16 	%rs204, %rs203, 15;
	add.s16 	%rs205, %rs203, %rs204;
	mul.lo.s16 	%rs206, %rs205, 6;
	sub.s16 	%rs207, %rs202, %rs206;
	mul.wide.s16 	%r2617, %rs207, 16;
	add.s32 	%r2618, %r203, %r2617;
	mul.wide.s32 	%rd234, %r2618, 4;
	add.s64 	%rd235, %rd40, %rd234;
	ld.shared.u32 	%r2515, [%rd235];
	add.s32 	%r2619, %r204, %r2617;
	mul.wide.s32 	%rd236, %r2619, 4;
	add.s64 	%rd237, %rd40, %rd236;
	ld.shared.u32 	%r2522, [%rd237];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2532, %r2529}, {%r423, %r426}, {%r2515}, {%r1362, %r1362};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2541, %r2538}, {%r423, %r426}, {%r2522}, {%r1362, %r1362};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2525, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2527, %r2525, %r2529;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2530, %r461, %r2532, %r2527;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2534, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2536, %r2534, %r2538;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2539, %r461, %r2541, %r2536;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2543, %r464, %r2532;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2546, %r461, %r2529, %r2543;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2550, %r464, %r2541;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2553, %r461, %r2538, %r2550;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2576, %r2579}, {%r507, %r510}, {%r2530, %r2546}, {%r1362, %r1362}, %r258, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2583, %r2587}, {%r507, %r510}, {%r2539, %r2553}, {%r1362, %r1362}, %r258, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2575, %r2576, %r2576;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2578, %r2579, %r2579, %r2575;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2582, %r2583, %r2583, %r2578;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2586, %r2587, %r2587, %r2582;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3055, %r1515, %r2586, %r2507;
	// end inline asm
	add.s32 	%r3053, %r108, 2;
	setp.ne.s32 	%p305, %r3053, 64;
	@%p305 bra 	$L__BB0_180;
// %bb.177:                             // %L20210
                                        //   in Loop: Header=BB0_176 Depth=2
	setp.gt.u32 	%p306, %r292, 7;
	@%p306 bra 	$L__BB0_179;
// %bb.178:                             // %L20270
                                        //   in Loop: Header=BB0_176 Depth=2
	mul.lo.s32 	%r2620, %r109, 786432;
	or.b32  	%r2621, %r205, %r2620;
	cvt.u64.u32 	%rd238, %r2621;
	add.s64 	%rd239, %rd238, %rd7;
	mul.hi.s64 	%rd240, %rd239, 3074457345618258603;
	shr.u64 	%rd241, %rd240, 63;
	shr.s64 	%rd242, %rd240, 26;
	add.s64 	%rd243, %rd242, %rd241;
	setp.lt.s64 	%p307, %rd239, 0;
	mul.lo.s64 	%rd244, %rd243, 402653184;
	setp.ne.s64 	%p308, %rd244, %rd239;
	and.pred  	%p309, %p307, %p308;
	selp.s64 	%rd245, -1, 0, %p309;
	add.s64 	%rd246, %rd243, %rd245;
	mul.lo.s64 	%rd247, %rd246, -402653184;
	add.s64 	%rd248, %rd247, %rd239;
	shl.b64 	%rd249, %rd248, 2;
	add.s64 	%rd250, %rd4, %rd249;
	st.global.u32 	[%rd250], %r3055;
$L__BB0_179:                            // %L20427
                                        //   in Loop: Header=BB0_176 Depth=2
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r3053, 0;
	mov.u32 	%r3055, %r3053;
$L__BB0_180:                            // %oksrem8396
                                        //   in Loop: Header=BB0_176 Depth=2
	add.s16 	%rs208, %rs234, -3;
	mul.hi.s16 	%rs209, %rs208, 10923;
	shr.u16 	%rs210, %rs209, 15;
	add.s16 	%rs211, %rs209, %rs210;
	mul.lo.s16 	%rs212, %rs211, 6;
	sub.s16 	%rs213, %rs208, %rs212;
	mul.wide.s16 	%r2789, %rs213, 16;
	add.s32 	%r2790, %r203, %r2789;
	mul.wide.s32 	%rd251, %r2790, 4;
	add.s64 	%rd253, %rd40, %rd251;
	ld.shared.u32 	%r2627, [%rd253];
	add.s32 	%r2791, %r204, %r2789;
	mul.wide.s32 	%rd254, %r2791, 4;
	add.s64 	%rd255, %rd40, %rd254;
	ld.shared.u32 	%r2634, [%rd255];
	mov.u32 	%r2768, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2644, %r2641}, {%r423, %r426}, {%r2627}, {%r2768, %r2768};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2653, %r2650}, {%r423, %r426}, {%r2634}, {%r2768, %r2768};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2637, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2639, %r2637, %r2641;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2642, %r461, %r2644, %r2639;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2646, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2648, %r2646, %r2650;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2651, %r461, %r2653, %r2648;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2655, %r464, %r2644;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2658, %r461, %r2641, %r2655;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2662, %r464, %r2653;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2665, %r461, %r2650, %r2662;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2688, %r2691}, {%r507, %r510}, {%r2642, %r2658}, {%r2768, %r2768}, %r258, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2695, %r2699}, {%r507, %r510}, {%r2651, %r2665}, {%r2768, %r2768}, %r258, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2687, %r2688, %r2688;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2690, %r2691, %r2691, %r2687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2694, %r2695, %r2695, %r2690;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2698, %r2699, %r2699, %r2694;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2702, %r1515, %r2698, %r3055;
	// end inline asm
	add.s16 	%rs214, %rs234, -2;
	mul.hi.s16 	%rs215, %rs214, 10923;
	shr.u16 	%rs216, %rs215, 15;
	add.s16 	%rs217, %rs215, %rs216;
	mul.lo.s16 	%rs218, %rs217, 6;
	sub.s16 	%rs219, %rs214, %rs218;
	mul.wide.s16 	%r2792, %rs219, 16;
	add.s32 	%r2793, %r203, %r2792;
	mul.wide.s32 	%rd256, %r2793, 4;
	add.s64 	%rd257, %rd40, %rd256;
	ld.shared.u32 	%r2710, [%rd257];
	add.s32 	%r2794, %r204, %r2792;
	mul.wide.s32 	%rd258, %r2794, 4;
	add.s64 	%rd259, %rd40, %rd258;
	ld.shared.u32 	%r2717, [%rd259];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2727, %r2724}, {%r423, %r426}, {%r2710}, {%r2768, %r2768};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2736, %r2733}, {%r423, %r426}, {%r2717}, {%r2768, %r2768};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2720, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2722, %r2720, %r2724;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2725, %r461, %r2727, %r2722;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2729, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2731, %r2729, %r2733;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2734, %r461, %r2736, %r2731;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2738, %r464, %r2727;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2741, %r461, %r2724, %r2738;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2745, %r464, %r2736;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2748, %r461, %r2733, %r2745;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2771, %r2774}, {%r507, %r510}, {%r2725, %r2741}, {%r2768, %r2768}, %r258, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2778, %r2782}, {%r507, %r510}, {%r2734, %r2748}, {%r2768, %r2768}, %r258, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2770, %r2771, %r2771;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2773, %r2774, %r2774, %r2770;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2777, %r2778, %r2778, %r2773;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2781, %r2782, %r2782, %r2777;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3058, %r1515, %r2781, %r2702;
	// end inline asm
	add.s32 	%r3056, %r3053, 2;
	setp.eq.s32 	%p310, %r3056, 64;
	@%p310 bra 	$L__BB0_181;
	bra.uni 	$L__BB0_184;
$L__BB0_181:                            // %L22173
                                        //   in Loop: Header=BB0_176 Depth=2
	setp.gt.u32 	%p311, %r292, 7;
	@%p311 bra 	$L__BB0_183;
// %bb.182:                             // %L22233
                                        //   in Loop: Header=BB0_176 Depth=2
	mul.lo.s32 	%r2795, %r109, 786432;
	or.b32  	%r2796, %r205, %r2795;
	cvt.u64.u32 	%rd260, %r2796;
	add.s64 	%rd261, %rd260, %rd7;
	mul.hi.s64 	%rd262, %rd261, 3074457345618258603;
	shr.u64 	%rd263, %rd262, 63;
	shr.s64 	%rd264, %rd262, 26;
	add.s64 	%rd265, %rd264, %rd263;
	setp.lt.s64 	%p312, %rd261, 0;
	mul.lo.s64 	%rd266, %rd265, 402653184;
	setp.ne.s64 	%p313, %rd266, %rd261;
	and.pred  	%p314, %p312, %p313;
	selp.s64 	%rd267, -1, 0, %p314;
	add.s64 	%rd268, %rd265, %rd267;
	mul.lo.s64 	%rd269, %rd268, -402653184;
	add.s64 	%rd270, %rd269, %rd261;
	shl.b64 	%rd271, %rd270, 2;
	add.s64 	%rd272, %rd4, %rd271;
	st.global.u32 	[%rd272], %r3058;
$L__BB0_183:                            // %L22390
                                        //   in Loop: Header=BB0_176 Depth=2
	add.s32 	%r109, %r109, 1;
	mov.u32 	%r3056, 0;
	mov.u32 	%r3058, %r3056;
$L__BB0_184:                            // %oksrem9247
                                        //   in Loop: Header=BB0_176 Depth=2
	add.s16 	%rs220, %rs234, -1;
	mul.hi.s16 	%rs221, %rs220, 10923;
	shr.u16 	%rs222, %rs221, 15;
	add.s16 	%rs223, %rs221, %rs222;
	mul.lo.s16 	%rs224, %rs223, 6;
	sub.s16 	%rs225, %rs220, %rs224;
	mul.wide.s16 	%r2964, %rs225, 16;
	add.s32 	%r2965, %r203, %r2964;
	mul.wide.s32 	%rd273, %r2965, 4;
	add.s64 	%rd275, %rd40, %rd273;
	ld.shared.u32 	%r2802, [%rd275];
	add.s32 	%r2966, %r204, %r2964;
	mul.wide.s32 	%rd276, %r2966, 4;
	add.s64 	%rd277, %rd40, %rd276;
	ld.shared.u32 	%r2809, [%rd277];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2819, %r2816}, {%r423, %r426}, {%r2802}, {%r2768, %r2768};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2828, %r2825}, {%r423, %r426}, {%r2809}, {%r2768, %r2768};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2812, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2814, %r2812, %r2816;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2817, %r461, %r2819, %r2814;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2821, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2823, %r2821, %r2825;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2826, %r461, %r2828, %r2823;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2830, %r464, %r2819;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2833, %r461, %r2816, %r2830;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2837, %r464, %r2828;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2840, %r461, %r2825, %r2837;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2863, %r2866}, {%r507, %r510}, {%r2817, %r2833}, {%r2768, %r2768}, %r258, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2870, %r2874}, {%r507, %r510}, {%r2826, %r2840}, {%r2768, %r2768}, %r258, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2862, %r2863, %r2863;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2865, %r2866, %r2866, %r2862;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2869, %r2870, %r2870, %r2865;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2873, %r2874, %r2874, %r2869;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2877, %r1515, %r2873, %r3058;
	// end inline asm
	mul.hi.s16 	%rs226, %rs234, 10923;
	shr.u16 	%rs227, %rs226, 15;
	add.s16 	%rs228, %rs226, %rs227;
	mul.lo.s16 	%rs229, %rs228, 6;
	sub.s16 	%rs230, %rs234, %rs229;
	mul.wide.s16 	%r2967, %rs230, 16;
	add.s32 	%r2968, %r203, %r2967;
	mul.wide.s32 	%rd278, %r2968, 4;
	add.s64 	%rd279, %rd40, %rd278;
	ld.shared.u32 	%r2885, [%rd279];
	add.s32 	%r2969, %r204, %r2967;
	mul.wide.s32 	%rd280, %r2969, 4;
	add.s64 	%rd281, %rd40, %rd280;
	ld.shared.u32 	%r2892, [%rd281];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2902, %r2899}, {%r423, %r426}, {%r2885}, {%r2768, %r2768};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2911, %r2908}, {%r423, %r426}, {%r2892}, {%r2768, %r2768};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2895, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2897, %r2895, %r2899;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2900, %r461, %r2902, %r2897;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2904, %r464;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2906, %r2904, %r2908;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2909, %r461, %r2911, %r2906;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2913, %r464, %r2902;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2916, %r461, %r2899, %r2913;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2920, %r464, %r2911;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2923, %r461, %r2908, %r2920;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2946, %r2949}, {%r507, %r510}, {%r2900, %r2916}, {%r2768, %r2768}, %r258, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2953, %r2957}, {%r507, %r510}, {%r2909, %r2923}, {%r2768, %r2768}, %r258, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2945, %r2946, %r2946;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2948, %r2949, %r2949, %r2945;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2952, %r2953, %r2953, %r2948;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2956, %r2957, %r2957, %r2952;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r110, %r1515, %r2956, %r2877;
	// end inline asm
	add.s32 	%r108, %r3056, 2;
	setp.eq.s32 	%p315, %r108, 64;
	@%p315 bra 	$L__BB0_185;
	bra.uni 	$L__BB0_188;
$L__BB0_185:                            // %L24136
                                        //   in Loop: Header=BB0_176 Depth=2
	setp.gt.u32 	%p316, %r292, 7;
	@%p316 bra 	$L__BB0_187;
// %bb.186:                             // %L24196
                                        //   in Loop: Header=BB0_176 Depth=2
	mul.lo.s32 	%r2970, %r109, 786432;
	or.b32  	%r2971, %r205, %r2970;
	cvt.u64.u32 	%rd282, %r2971;
	add.s64 	%rd283, %rd282, %rd7;
	mul.hi.s64 	%rd284, %rd283, 3074457345618258603;
	shr.u64 	%rd285, %rd284, 63;
	shr.s64 	%rd286, %rd284, 26;
	add.s64 	%rd287, %rd286, %rd285;
	setp.lt.s64 	%p317, %rd283, 0;
	mul.lo.s64 	%rd288, %rd287, 402653184;
	setp.ne.s64 	%p318, %rd288, %rd283;
	and.pred  	%p319, %p317, %p318;
	selp.s64 	%rd289, -1, 0, %p319;
	add.s64 	%rd290, %rd287, %rd289;
	mul.lo.s64 	%rd291, %rd290, -402653184;
	add.s64 	%rd292, %rd291, %rd283;
	shl.b64 	%rd293, %rd292, 2;
	add.s64 	%rd294, %rd4, %rd293;
	st.global.u32 	[%rd294], %r110;
	bra.uni 	$L__BB0_187;
$L__BB0_190:                            // %L24385
	mov.u32 	%r2973, 0;
	st.global.u32 	[%rd6], %r2973;
	ret;
$L__BB0_164:                            // %post_box_union
	mov.u64 	%rd158, exception1909;
	cvta.global.u64 	%rd159, %rd158;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd159;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_238:                            // %post_box_union5148
	mov.u64 	%rd165, exception1909;
	cvta.global.u64 	%rd166, %rd165;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd166;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L5143
	mov.u32 	%r2989, 5;
	st.global.u32 	[%rd6], %r2989;
	mov.u64 	%rd325, exception1869;
	cvta.global.u64 	%rd326, %rd325;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd326;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L5305
	mov.u32 	%r2988, 5;
	st.global.u32 	[%rd6], %r2988;
	mov.u64 	%rd323, exception1869;
	cvta.global.u64 	%rd324, %rd323;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd324;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L5467
	mov.u32 	%r2987, 5;
	st.global.u32 	[%rd6], %r2987;
	mov.u64 	%rd321, exception1869;
	cvta.global.u64 	%rd322, %rd321;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd322;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L5629
	mov.u32 	%r2986, 5;
	st.global.u32 	[%rd6], %r2986;
	mov.u64 	%rd319, exception1869;
	cvta.global.u64 	%rd320, %rd319;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd320;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L5791
	mov.u32 	%r2985, 5;
	st.global.u32 	[%rd6], %r2985;
	mov.u64 	%rd317, exception1869;
	cvta.global.u64 	%rd318, %rd317;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd318;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_151:                            // %L5953
	mov.u32 	%r2984, 5;
	st.global.u32 	[%rd6], %r2984;
	mov.u64 	%rd315, exception1869;
	cvta.global.u64 	%rd316, %rd315;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd316;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_152:                            // %L6115
	mov.u32 	%r2983, 5;
	st.global.u32 	[%rd6], %r2983;
	mov.u64 	%rd313, exception1869;
	cvta.global.u64 	%rd314, %rd313;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd314;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_153:                            // %L6277
	mov.u32 	%r2982, 5;
	st.global.u32 	[%rd6], %r2982;
	mov.u64 	%rd311, exception1869;
	cvta.global.u64 	%rd312, %rd311;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd312;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_154:                            // %L6439
	mov.u32 	%r2981, 5;
	st.global.u32 	[%rd6], %r2981;
	mov.u64 	%rd309, exception1869;
	cvta.global.u64 	%rd310, %rd309;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd310;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_155:                            // %L6601
	mov.u32 	%r2980, 5;
	st.global.u32 	[%rd6], %r2980;
	mov.u64 	%rd307, exception1869;
	cvta.global.u64 	%rd308, %rd307;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd308;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_156:                            // %L6789
	mov.u32 	%r2979, 5;
	st.global.u32 	[%rd6], %r2979;
	mov.u64 	%rd305, exception1869;
	cvta.global.u64 	%rd306, %rd305;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd306;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_157:                            // %L6951
	mov.u32 	%r2978, 5;
	st.global.u32 	[%rd6], %r2978;
	mov.u64 	%rd303, exception1869;
	cvta.global.u64 	%rd304, %rd303;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd304;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_158:                            // %L7113
	mov.u32 	%r2977, 5;
	st.global.u32 	[%rd6], %r2977;
	mov.u64 	%rd301, exception1869;
	cvta.global.u64 	%rd302, %rd301;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd302;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_159:                            // %L7275
	mov.u32 	%r2976, 5;
	st.global.u32 	[%rd6], %r2976;
	mov.u64 	%rd299, exception1869;
	cvta.global.u64 	%rd300, %rd299;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd300;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_160:                            // %L7437
	mov.u32 	%r2975, 5;
	st.global.u32 	[%rd6], %r2975;
	mov.u64 	%rd297, exception1869;
	cvta.global.u64 	%rd298, %rd297;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd298;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_161:                            // %L7599
	mov.u32 	%r2974, 5;
	st.global.u32 	[%rd6], %r2974;
	mov.u64 	%rd295, exception1869;
	cvta.global.u64 	%rd296, %rd295;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd296;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L167
	mov.u32 	%r2991, 2;
	st.global.u32 	[%rd6], %r2991;
	mov.u64 	%rd329, exception1869;
	cvta.global.u64 	%rd330, %rd329;
	{ // callseq 90, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd330;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 90
	{ // callseq 91, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 91
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_13:                             // %L311
	mov.u32 	%r2990, 3;
	st.global.u32 	[%rd6], %r2990;
	mov.u64 	%rd327, exception1869;
	cvta.global.u64 	%rd328, %rd327;
	{ // callseq 88, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd328;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 88
	{ // callseq 89, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 89
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 47
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 48
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L1159
	add.u64 	%rd17, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r292, %r3};
	st.local.v2.u32 	[%rd5+8], {%r1, %r85};
	st.local.u32 	[%rd5+16], %r86;
	mov.u64 	%rd23, __unnamed_1;
	cvta.global.u64 	%rd24, %rd23;
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd24;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd17;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r520, [retval0+0];
	} // callseq 49
	mov.u32 	%r522, 4;
	st.global.u32 	[%rd6], %r522;
	mov.u64 	%rd26, exception1869;
	cvta.global.u64 	%rd27, %rd26;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd27;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
