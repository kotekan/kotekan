// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=192, blocks_per_sm=4

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception3602[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception3642[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 192, 1, 1
.minnctapersm 4
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<309>;
	.reg .b16 	%rs<238>;
	.reg .b32 	%r<3097>;
	.reg .f32 	%f<790>;
	.reg .b64 	%rd<391>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r292, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd45, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r301, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p4, %r301, 13919;
	@%p4 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd46, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r293, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %ctaid.x;
	mul.lo.s32 	%r2, %r1, 192;
	mov.u32 	%r302, %tid.x;
	mov.u32 	%r4, %tid.y;
	shl.b32 	%r5, %r4, 5;
	or.b32  	%r303, %r2, %r302;
	add.s32 	%r304, %r303, %r5;
	mul.wide.u32 	%rd53, %r304, 4;
	add.s64 	%rd6, %rd46, %rd53;
	mov.u32 	%r305, 1;
	st.global.u32 	[%rd6], %r305;
	setp.gt.u32 	%p5, %r293, 511;
	@%p5 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r294, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p6, %r294, %r293;
	setp.gt.s32 	%p7, %r294, 1023;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r295, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r294, %r293;
	mad.lo.s32 	%r306, %r6, -1431655765, 715827872;
	shf.r.wrap.b32 	%r307, %r306, %r306, 4;
	setp.gt.u32 	%p9, %r307, 89478484;
	setp.gt.u32 	%p10, %r295, 1023;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r296, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p12, %r296, %r295;
	setp.lt.s32 	%p13, %r296, 2048;
	and.pred  	%p14, %p12, %p13;
	@%p14 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r308, %r296, %r295;
	mul.hi.s32 	%r309, %r6, 1431655766;
	shr.u32 	%r310, %r309, 31;
	add.s32 	%r311, %r309, %r310;
	setp.eq.s32 	%p15, %r308, %r311;
	@%p15 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L258
	ld.param.u32 	%r297, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p16, %r297, 0;
	@%p16 bra 	$L__BB0_13;
// %bb.9:                               // %L260
	ld.param.u32 	%r298, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p17, %r298, %r297;
	setp.gt.s32 	%p18, %r298, 2048;
	or.pred  	%p19, %p17, %p18;
	@%p19 bra 	$L__BB0_13;
// %bb.10:                              // %L270
	ld.param.u32 	%r299, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r7, %r298, %r297;
	and.b32  	%r312, %r7, 63;
	setp.ne.s32 	%p20, %r312, 0;
	setp.lt.s32 	%p21, %r299, 0;
	or.pred  	%p22, %p20, %p21;
	@%p22 bra 	$L__BB0_13;
// %bb.11:                              // %L276
	ld.param.u32 	%r300, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p23, %r300, %r299;
	setp.gt.s32 	%p24, %r300, 4096;
	or.pred  	%p25, %p23, %p24;
	@%p25 bra 	$L__BB0_13;
// %bb.12:                              // %L286
	sub.s32 	%r313, %r300, %r299;
	and.b32  	%r314, %r313, 63;
	setp.eq.s32 	%p26, %r314, 0;
	setp.eq.s32 	%p27, %r313, %r7;
	and.pred  	%p28, %p26, %p27;
	@%p28 bra 	$L__BB0_171;
	bra.uni 	$L__BB0_13;
$L__BB0_171:                            // %pass162
	and.b32  	%r156, %r302, 3;
	shr.u32 	%r157, %r302, 2;
	mul.lo.s32 	%r315, %r156, %r157;
	and.b32  	%r316, %r315, 7;
	cvt.rn.f32.s32 	%f205, %r316;
	mov.f32 	%f206, 0f40800000;
	div.approx.f32 	%f169, %f205, %f206;
	abs.f32 	%f788, %f169;
	setp.lt.f32 	%p29, %f788, 0f40000000;
	setp.gtu.f32 	%p308, %f788, 0f4B800000;
	mov.f32 	%f784, %f788;
	@%p29 bra 	$L__BB0_183;
// %bb.172:
	@%p308 bra 	$L__BB0_179;
	bra.uni 	$L__BB0_173;
$L__BB0_179:
	mov.b32 	%r159, %f788;
	and.b32  	%r317, %r159, 8388607;
	or.b32  	%r3092, %r317, 1065353216;
	mov.b32 	%f783, %r3092;
	add.s32 	%r318, %r159, -1073741824;
	and.b32  	%r3093, %r318, -8388608;
	setp.eq.s32 	%p36, %r3093, 0;
	@%p36 bra 	$L__BB0_182;
// %bb.180:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f216, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f215,%f216;
	// end inline asm
$L__BB0_181:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r319, %r3093, 192937984;
	add.s32 	%r320, %r3092, %r319;
	mov.b32 	%f217, %r320;
	mul.f32 	%f218, %f215, %f217;
	sub.f32 	%f219, %f217, %f218;
	fma.rn.f32 	%f220, %f219, %f215, %f218;
	sub.f32 	%f221, %f217, %f220;
	fma.rz.f32 	%f222, %f221, %f215, %f220;
	cvt.rzi.f32.f32 	%f223, %f222;
	sub.f32 	%f783, %f217, %f223;
	sub.s32 	%r3093, %r3093, %r319;
	mov.b32 	%r3092, %f783;
	setp.ne.s32 	%p37, %r3093, 0;
	setp.ne.s32 	%p38, %r3092, 0;
	and.pred  	%p39, %p37, %p38;
	@%p39 bra 	$L__BB0_181;
$L__BB0_182:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p40, %r159, 2139095039;
	selp.f32 	%f224, 0f7FFFFFFF, 0f4B800000, %p40;
	mul.f32 	%f225, %f783, 0f34000000;
	mul.f32 	%f784, %f224, %f225;
	bra.uni 	$L__BB0_183;
$L__BB0_173:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f207, 0f40000000;
	div.approx.f32 	%f208, %f788, %f207;
	cvt.rzi.f32.f32 	%f782, %f208;
	fma.rn.f32 	%f172, %f782, 0fC0000000, %f788;
	mov.b32 	%r158, %f172;
	setp.lt.u32 	%p31, %r158, 1073741824;
	@%p31 bra 	$L__BB0_178;
// %bb.174:
	setp.lt.u32 	%p32, %r158, -2147483647;
	@%p32 bra 	$L__BB0_176;
// %bb.175:
	add.f32 	%f213, %f782, 0fBF800000;
	setp.lt.f32 	%p35, %f172, 0fC0000000;
	add.f32 	%f214, %f213, 0fBF800000;
	selp.f32 	%f782, %f214, %f213, %p35;
	bra.uni 	$L__BB0_178;
$L__BB0_176:
	add.f32 	%f782, %f782, 0f3F800000;
	setp.ltu.f32 	%p33, %f172, 0f40800000;
	@%p33 bra 	$L__BB0_178;
// %bb.177:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f209, %f782, 0f3F800000;
	fma.rn.f32 	%f211, %f207, 0fC0400000, %f172;
	setp.ge.f32 	%p34, %f211, 0f00000000;
	add.f32 	%f212, %f209, 0f3F800000;
	selp.f32 	%f782, %f212, %f209, %p34;
$L__BB0_178:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f784, %f782, 0fC0000000, %f788;
$L__BB0_183:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f226, %f784;
	setp.gtu.f32 	%p41, %f226, 0f7F800000;
	mov.b32 	%r321, %f169;
	and.b32  	%r166, %r321, -2147483648;
	@%p41 bra 	$L__BB0_185;
// %bb.184:
	mov.b32 	%r322, %f784;
	or.b32  	%r323, %r166, %r322;
	mov.b32 	%f784, %r323;
$L__BB0_185:                            // %__nv_fmodf.exit
	shl.b32 	%r169, %r302, 1;
	and.b32  	%r170, %r169, 2;
	mul.lo.s32 	%r338, %r170, %r157;
	cvt.rn.f32.s32 	%f259, %r338;
	mov.f32 	%f260, 0f41400000;
	div.approx.f32 	%f186, %f259, %f260;
	abs.f32 	%f734, %f186;
	setp.lt.f32 	%p49, %f734, 0f40000000;
	@%p49 bra 	$L__BB0_25;
// %bb.14:
	setp.gtu.f32 	%p50, %f734, 0f4B800000;
	@%p50 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_15;
$L__BB0_21:
	mov.b32 	%r9, %f734;
	and.b32  	%r339, %r9, 8388607;
	or.b32  	%r3051, %r339, 1065353216;
	mov.b32 	%f733, %r3051;
	add.s32 	%r340, %r9, -1073741824;
	and.b32  	%r3052, %r340, -8388608;
	setp.eq.s32 	%p56, %r3052, 0;
	@%p56 bra 	$L__BB0_24;
// %bb.22:                              // %__nv_fmaf_rn.exit4.i.i.i2022.preheader
	mov.f32 	%f270, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f269,%f270;
	// end inline asm
$L__BB0_23:                             // %__nv_fmaf_rn.exit4.i.i.i2022
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r341, %r3052, 192937984;
	add.s32 	%r342, %r3051, %r341;
	mov.b32 	%f271, %r342;
	mul.f32 	%f272, %f269, %f271;
	sub.f32 	%f273, %f271, %f272;
	fma.rn.f32 	%f274, %f273, %f269, %f272;
	sub.f32 	%f275, %f271, %f274;
	fma.rz.f32 	%f276, %f275, %f269, %f274;
	cvt.rzi.f32.f32 	%f277, %f276;
	sub.f32 	%f733, %f271, %f277;
	sub.s32 	%r3052, %r3052, %r341;
	mov.b32 	%r3051, %f733;
	setp.ne.s32 	%p57, %r3052, 0;
	setp.ne.s32 	%p58, %r3051, 0;
	and.pred  	%p59, %p57, %p58;
	@%p59 bra 	$L__BB0_23;
$L__BB0_24:                             // %__internal_fmodf_slowpath_mod.exit.i.i2024
	setp.gt.u32 	%p60, %r9, 2139095039;
	selp.f32 	%f278, 0f7FFFFFFF, 0f4B800000, %p60;
	mul.f32 	%f279, %f733, 0f34000000;
	mul.f32 	%f734, %f278, %f279;
	bra.uni 	$L__BB0_25;
$L__BB0_15:                             // %__nv_fast_fdividef.exit.i.i.i2001
	mov.f32 	%f261, 0f40000000;
	div.approx.f32 	%f262, %f734, %f261;
	cvt.rzi.f32.f32 	%f732, %f262;
	fma.rn.f32 	%f2, %f732, 0fC0000000, %f734;
	mov.b32 	%r8, %f2;
	setp.lt.u32 	%p51, %r8, 1073741824;
	@%p51 bra 	$L__BB0_20;
// %bb.16:
	setp.lt.u32 	%p52, %r8, -2147483647;
	@%p52 bra 	$L__BB0_18;
// %bb.17:
	add.f32 	%f267, %f732, 0fBF800000;
	setp.lt.f32 	%p55, %f2, 0fC0000000;
	add.f32 	%f268, %f267, 0fBF800000;
	selp.f32 	%f732, %f268, %f267, %p55;
	bra.uni 	$L__BB0_20;
$L__BB0_18:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p53, %f2, 0f40800000;
	@%p53 bra 	$L__BB0_20;
// %bb.19:                              // %__nv_fmaf_rn.exit.i.i.i2005
	add.f32 	%f263, %f732, 0f3F800000;
	fma.rn.f32 	%f265, %f261, 0fC0400000, %f2;
	setp.ge.f32 	%p54, %f265, 0f00000000;
	add.f32 	%f266, %f263, 0f3F800000;
	selp.f32 	%f732, %f266, %f263, %p54;
$L__BB0_20:                             // %__internal_fmodf_fastpath_quot.exit.i.i2008
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_25:                             // %__internal_fmodf_kernel.exit.i2027
	or.b32  	%r171, %r170, 1;
	abs.f32 	%f280, %f734;
	setp.gtu.f32 	%p61, %f280, 0f7F800000;
	@%p61 bra 	$L__BB0_27;
// %bb.26:
	mov.b32 	%r343, %f186;
	and.b32  	%r344, %r343, -2147483648;
	mov.b32 	%r345, %f734;
	or.b32  	%r346, %r344, %r345;
	mov.b32 	%f734, %r346;
$L__BB0_27:                             // %__nv_fmodf.exit2028
	mov.f32 	%f250, 0f00000000;
	setp.eq.s32 	%p69, %r171, 3;
	mov.f32 	%f37, %f250;
	mov.f32 	%f38, %f250;
	@%p69 bra 	$L__BB0_43;
// %bb.28:                              // %L525
	mul.lo.s32 	%r355, %r171, %r157;
	mul.hi.u32 	%r356, %r355, -1431655765;
	shr.u32 	%r357, %r356, 4;
	mul.lo.s32 	%r358, %r357, 24;
	sub.s32 	%r359, %r355, %r358;
	cvt.rn.f32.s32 	%f311, %r359;
	div.approx.f32 	%f18, %f311, %f260;
	abs.f32 	%f738, %f18;
	setp.lt.f32 	%p70, %f738, 0f40000000;
	@%p70 bra 	$L__BB0_40;
// %bb.29:
	setp.gtu.f32 	%p71, %f738, 0f4B800000;
	@%p71 bra 	$L__BB0_36;
	bra.uni 	$L__BB0_30;
$L__BB0_36:
	mov.b32 	%r17, %f738;
	and.b32  	%r360, %r17, 8388607;
	or.b32  	%r3053, %r360, 1065353216;
	mov.b32 	%f737, %r3053;
	add.s32 	%r361, %r17, -1073741824;
	and.b32  	%r3054, %r361, -8388608;
	setp.eq.s32 	%p77, %r3054, 0;
	@%p77 bra 	$L__BB0_39;
// %bb.37:                              // %__nv_fmaf_rn.exit4.i.i.i2053.preheader
	mov.f32 	%f322, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f321,%f322;
	// end inline asm
$L__BB0_38:                             // %__nv_fmaf_rn.exit4.i.i.i2053
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r362, %r3054, 192937984;
	add.s32 	%r363, %r3053, %r362;
	mov.b32 	%f323, %r363;
	mul.f32 	%f324, %f321, %f323;
	sub.f32 	%f325, %f323, %f324;
	fma.rn.f32 	%f326, %f325, %f321, %f324;
	sub.f32 	%f327, %f323, %f326;
	fma.rz.f32 	%f328, %f327, %f321, %f326;
	cvt.rzi.f32.f32 	%f329, %f328;
	sub.f32 	%f737, %f323, %f329;
	sub.s32 	%r3054, %r3054, %r362;
	mov.b32 	%r3053, %f737;
	setp.ne.s32 	%p78, %r3054, 0;
	setp.ne.s32 	%p79, %r3053, 0;
	and.pred  	%p80, %p78, %p79;
	@%p80 bra 	$L__BB0_38;
$L__BB0_39:                             // %__internal_fmodf_slowpath_mod.exit.i.i2055
	setp.gt.u32 	%p81, %r17, 2139095039;
	selp.f32 	%f330, 0f7FFFFFFF, 0f4B800000, %p81;
	mul.f32 	%f331, %f737, 0f34000000;
	mul.f32 	%f738, %f330, %f331;
	bra.uni 	$L__BB0_40;
$L__BB0_30:                             // %__nv_fast_fdividef.exit.i.i.i2032
	mov.f32 	%f313, 0f40000000;
	div.approx.f32 	%f314, %f738, %f313;
	cvt.rzi.f32.f32 	%f736, %f314;
	fma.rn.f32 	%f21, %f736, 0fC0000000, %f738;
	mov.b32 	%r16, %f21;
	setp.lt.u32 	%p72, %r16, 1073741824;
	@%p72 bra 	$L__BB0_35;
// %bb.31:
	setp.lt.u32 	%p73, %r16, -2147483647;
	@%p73 bra 	$L__BB0_33;
// %bb.32:
	add.f32 	%f319, %f736, 0fBF800000;
	setp.lt.f32 	%p76, %f21, 0fC0000000;
	add.f32 	%f320, %f319, 0fBF800000;
	selp.f32 	%f736, %f320, %f319, %p76;
	bra.uni 	$L__BB0_35;
$L__BB0_33:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p74, %f21, 0f40800000;
	@%p74 bra 	$L__BB0_35;
// %bb.34:                              // %__nv_fmaf_rn.exit.i.i.i2036
	add.f32 	%f315, %f736, 0f3F800000;
	fma.rn.f32 	%f317, %f313, 0fC0400000, %f21;
	setp.ge.f32 	%p75, %f317, 0f00000000;
	add.f32 	%f318, %f315, 0f3F800000;
	selp.f32 	%f736, %f318, %f315, %p75;
$L__BB0_35:                             // %__internal_fmodf_fastpath_quot.exit.i.i2039
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_40:                             // %__internal_fmodf_kernel.exit.i2058
	abs.f32 	%f332, %f738;
	setp.gtu.f32 	%p82, %f332, 0f7F800000;
	@%p82 bra 	$L__BB0_42;
// %bb.41:
	mov.b32 	%r364, %f18;
	and.b32  	%r365, %r364, -2147483648;
	mov.b32 	%r366, %f738;
	or.b32  	%r367, %r365, %r366;
	mov.b32 	%f738, %r367;
$L__BB0_42:                             // %__nv_fmodf.exit2059
	add.f32 	%f333, %f738, %f738;
	mov.b32 	%r368, %f333;
	and.b32  	%r369, %r368, -2147483648;
	or.b32  	%r370, %r369, 1056964608;
	mov.b32 	%f334, %r370;
	add.f32 	%f335, %f333, %f334;
	cvt.rzi.f32.f32 	%f336, %f335;
	abs.f32 	%f337, %f333;
	setp.gt.f32 	%p83, %f337, 0f4B000000;
	selp.f32 	%f338, %f333, %f336, %p83;
	cvt.rzi.f32.f32 	%f339, %f333;
	setp.lt.f32 	%p84, %f337, 0f3F000000;
	selp.f32 	%f340, %f339, %f338, %p84;
	cvt.rzi.s32.f32 	%r371, %f340;
	fma.rn.f32 	%f341, %f340, 0fBF000000, %f738;
	mul.f32 	%f342, %f341, %f341;
	fma.rn.f32 	%f343, %f342, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f344, %f342, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f345, %f343, %f342, 0fC0A55DF6;
	fma.rn.f32 	%f346, %f344, %f342, 0f4081E0CF;
	fma.rn.f32 	%f347, %f342, %f341, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f342, 0fC09DE9E6;
	fma.rn.f32 	%f349, %f345, %f347, 0f00000000;
	fma.rn.f32 	%f350, %f348, %f342, 0f3F800000;
	fma.rn.f32 	%f351, %f341, 0f40490FDB, %f349;
	and.b32  	%r372, %r371, 1;
	setp.eq.b32 	%p85, %r372, 1;
	selp.f32 	%f352, %f350, %f351, %p85;
	selp.f32 	%f353, %f351, %f350, %p85;
	and.b32  	%r373, %r371, 2;
	setp.eq.s32 	%p86, %r373, 0;
	neg.f32 	%f354, %f352;
	selp.f32 	%f355, %f352, %f354, %p86;
	add.s32 	%r374, %r371, 1;
	and.b32  	%r375, %r374, 2;
	setp.eq.s32 	%p87, %r375, 0;
	mov.f32 	%f356, 0f00000000;
	sub.f32 	%f357, %f356, %f353;
	selp.f32 	%f358, %f353, %f357, %p87;
	cvt.rzi.f32.f32 	%f359, %f738;
	setp.eq.f32 	%p88, %f359, %f738;
	mul.f32 	%f360, %f738, 0f00000000;
	selp.f32 	%f38, %f360, %f355, %p88;
	abs.f32 	%f361, %f738;
	setp.gt.f32 	%p89, %f361, 0f4B800000;
	add.f32 	%f362, %f38, 0f3F800000;
	selp.f32 	%f37, %f362, %f358, %p89;
$L__BB0_43:                             // %L559
	and.b32  	%r26, %r157, 3;
	setp.eq.s32 	%p90, %r26, 3;
	mov.f32 	%f731, 0f3FC00000;
	mov.f32 	%f746, %f250;
	mov.f32 	%f755, %f250;
	@%p90 bra 	$L__BB0_59;
// %bb.44:                              // %L597
	mul.lo.s32 	%r382, %r170, %r26;
	cvt.u16.u32 	%rs11, %r382;
	mul.lo.s16 	%rs12, %rs11, 171;
	shr.u16 	%rs13, %rs12, 9;
	mul.lo.s16 	%rs14, %rs13, 3;
	sub.s16 	%rs15, %rs11, %rs14;
	and.b16  	%rs16, %rs15, 255;
	cvt.rn.f32.u16 	%f364, %rs16;
	div.approx.f32 	%f39, %f364, %f731;
	abs.f32 	%f744, %f39;
	setp.lt.f32 	%p91, %f744, 0f40000000;
	@%p91 bra 	$L__BB0_56;
// %bb.45:
	setp.gtu.f32 	%p92, %f744, 0f4B800000;
	@%p92 bra 	$L__BB0_52;
	bra.uni 	$L__BB0_46;
$L__BB0_52:
	mov.b32 	%r28, %f744;
	and.b32  	%r383, %r28, 8388607;
	or.b32  	%r3055, %r383, 1065353216;
	mov.b32 	%f743, %r3055;
	add.s32 	%r384, %r28, -1073741824;
	and.b32  	%r3056, %r384, -8388608;
	setp.eq.s32 	%p98, %r3056, 0;
	@%p98 bra 	$L__BB0_55;
// %bb.53:                              // %__nv_fmaf_rn.exit4.i.i.i2084.preheader
	mov.f32 	%f375, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f374,%f375;
	// end inline asm
$L__BB0_54:                             // %__nv_fmaf_rn.exit4.i.i.i2084
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r385, %r3056, 192937984;
	add.s32 	%r386, %r3055, %r385;
	mov.b32 	%f376, %r386;
	mul.f32 	%f377, %f374, %f376;
	sub.f32 	%f378, %f376, %f377;
	fma.rn.f32 	%f379, %f378, %f374, %f377;
	sub.f32 	%f380, %f376, %f379;
	fma.rz.f32 	%f381, %f380, %f374, %f379;
	cvt.rzi.f32.f32 	%f382, %f381;
	sub.f32 	%f743, %f376, %f382;
	sub.s32 	%r3056, %r3056, %r385;
	mov.b32 	%r3055, %f743;
	setp.ne.s32 	%p99, %r3056, 0;
	setp.ne.s32 	%p100, %r3055, 0;
	and.pred  	%p101, %p99, %p100;
	@%p101 bra 	$L__BB0_54;
$L__BB0_55:                             // %__internal_fmodf_slowpath_mod.exit.i.i2086
	setp.gt.u32 	%p102, %r28, 2139095039;
	selp.f32 	%f383, 0f7FFFFFFF, 0f4B800000, %p102;
	mul.f32 	%f384, %f743, 0f34000000;
	mul.f32 	%f744, %f383, %f384;
	bra.uni 	$L__BB0_56;
$L__BB0_46:                             // %__nv_fast_fdividef.exit.i.i.i2063
	mov.f32 	%f366, 0f40000000;
	div.approx.f32 	%f367, %f744, %f366;
	cvt.rzi.f32.f32 	%f742, %f367;
	fma.rn.f32 	%f42, %f742, 0fC0000000, %f744;
	mov.b32 	%r27, %f42;
	setp.lt.u32 	%p93, %r27, 1073741824;
	@%p93 bra 	$L__BB0_51;
// %bb.47:
	setp.lt.u32 	%p94, %r27, -2147483647;
	@%p94 bra 	$L__BB0_49;
// %bb.48:
	add.f32 	%f372, %f742, 0fBF800000;
	setp.lt.f32 	%p97, %f42, 0fC0000000;
	add.f32 	%f373, %f372, 0fBF800000;
	selp.f32 	%f742, %f373, %f372, %p97;
	bra.uni 	$L__BB0_51;
$L__BB0_49:
	add.f32 	%f742, %f742, 0f3F800000;
	setp.ltu.f32 	%p95, %f42, 0f40800000;
	@%p95 bra 	$L__BB0_51;
// %bb.50:                              // %__nv_fmaf_rn.exit.i.i.i2067
	add.f32 	%f368, %f742, 0f3F800000;
	fma.rn.f32 	%f370, %f366, 0fC0400000, %f42;
	setp.ge.f32 	%p96, %f370, 0f00000000;
	add.f32 	%f371, %f368, 0f3F800000;
	selp.f32 	%f742, %f371, %f368, %p96;
$L__BB0_51:                             // %__internal_fmodf_fastpath_quot.exit.i.i2070
	fma.rn.f32 	%f744, %f742, 0fC0000000, %f744;
$L__BB0_56:                             // %__internal_fmodf_kernel.exit.i2089
	abs.f32 	%f385, %f744;
	setp.gtu.f32 	%p103, %f385, 0f7F800000;
	@%p103 bra 	$L__BB0_58;
// %bb.57:
	mov.b32 	%r387, %f39;
	and.b32  	%r388, %r387, -2147483648;
	mov.b32 	%r389, %f744;
	or.b32  	%r390, %r388, %r389;
	mov.b32 	%f744, %r390;
$L__BB0_58:                             // %__nv_fmodf.exit2090
	add.f32 	%f386, %f744, %f744;
	mov.b32 	%r391, %f386;
	and.b32  	%r392, %r391, -2147483648;
	or.b32  	%r393, %r392, 1056964608;
	mov.b32 	%f387, %r393;
	add.f32 	%f388, %f386, %f387;
	cvt.rzi.f32.f32 	%f389, %f388;
	abs.f32 	%f390, %f386;
	setp.gt.f32 	%p104, %f390, 0f4B000000;
	selp.f32 	%f391, %f386, %f389, %p104;
	cvt.rzi.f32.f32 	%f392, %f386;
	setp.lt.f32 	%p105, %f390, 0f3F000000;
	selp.f32 	%f393, %f392, %f391, %p105;
	cvt.rzi.s32.f32 	%r394, %f393;
	fma.rn.f32 	%f394, %f393, 0fBF000000, %f744;
	mul.f32 	%f395, %f394, %f394;
	fma.rn.f32 	%f396, %f395, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f397, %f395, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f398, %f396, %f395, 0fC0A55DF6;
	fma.rn.f32 	%f399, %f397, %f395, 0f4081E0CF;
	fma.rn.f32 	%f400, %f395, %f394, 0f00000000;
	fma.rn.f32 	%f401, %f399, %f395, 0fC09DE9E6;
	fma.rn.f32 	%f402, %f398, %f400, 0f00000000;
	fma.rn.f32 	%f403, %f401, %f395, 0f3F800000;
	fma.rn.f32 	%f404, %f394, 0f40490FDB, %f402;
	and.b32  	%r395, %r394, 1;
	setp.eq.b32 	%p106, %r395, 1;
	selp.f32 	%f405, %f403, %f404, %p106;
	selp.f32 	%f406, %f404, %f403, %p106;
	and.b32  	%r396, %r394, 2;
	setp.eq.s32 	%p107, %r396, 0;
	neg.f32 	%f407, %f405;
	selp.f32 	%f408, %f405, %f407, %p107;
	add.s32 	%r397, %r394, 1;
	and.b32  	%r398, %r397, 2;
	setp.eq.s32 	%p108, %r398, 0;
	mov.f32 	%f409, 0f00000000;
	sub.f32 	%f410, %f409, %f406;
	selp.f32 	%f411, %f406, %f410, %p108;
	cvt.rzi.f32.f32 	%f412, %f744;
	setp.eq.f32 	%p109, %f412, %f744;
	mul.f32 	%f413, %f744, 0f00000000;
	selp.f32 	%f755, %f413, %f408, %p109;
	abs.f32 	%f414, %f744;
	setp.gt.f32 	%p110, %f414, 0f4B800000;
	add.f32 	%f415, %f755, 0f3F800000;
	selp.f32 	%f746, %f415, %f411, %p110;
$L__BB0_59:                             // %L631
	or.pred  	%p113, %p69, %p90;
	mov.f32 	%f752, %f250;
	mov.f32 	%f757, %f250;
	@%p113 bra 	$L__BB0_75;
// %bb.60:                              // %L639
	mul.lo.s32 	%r399, %r171, %r26;
	mul.hi.u32 	%r400, %r399, -1431655765;
	shr.u32 	%r401, %r400, 1;
	mul.lo.s32 	%r402, %r401, 3;
	sub.s32 	%r403, %r399, %r402;
	cvt.rn.f32.s32 	%f417, %r403;
	div.approx.f32 	%f60, %f417, %f731;
	abs.f32 	%f750, %f60;
	setp.lt.f32 	%p114, %f750, 0f40000000;
	@%p114 bra 	$L__BB0_72;
// %bb.61:
	setp.gtu.f32 	%p115, %f750, 0f4B800000;
	@%p115 bra 	$L__BB0_68;
	bra.uni 	$L__BB0_62;
$L__BB0_68:
	mov.b32 	%r36, %f750;
	and.b32  	%r404, %r36, 8388607;
	or.b32  	%r3057, %r404, 1065353216;
	mov.b32 	%f749, %r3057;
	add.s32 	%r405, %r36, -1073741824;
	and.b32  	%r3058, %r405, -8388608;
	setp.eq.s32 	%p121, %r3058, 0;
	@%p121 bra 	$L__BB0_71;
// %bb.69:                              // %__nv_fmaf_rn.exit4.i.i.i2115.preheader
	mov.f32 	%f428, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f427,%f428;
	// end inline asm
$L__BB0_70:                             // %__nv_fmaf_rn.exit4.i.i.i2115
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r406, %r3058, 192937984;
	add.s32 	%r407, %r3057, %r406;
	mov.b32 	%f429, %r407;
	mul.f32 	%f430, %f427, %f429;
	sub.f32 	%f431, %f429, %f430;
	fma.rn.f32 	%f432, %f431, %f427, %f430;
	sub.f32 	%f433, %f429, %f432;
	fma.rz.f32 	%f434, %f433, %f427, %f432;
	cvt.rzi.f32.f32 	%f435, %f434;
	sub.f32 	%f749, %f429, %f435;
	sub.s32 	%r3058, %r3058, %r406;
	mov.b32 	%r3057, %f749;
	setp.ne.s32 	%p122, %r3058, 0;
	setp.ne.s32 	%p123, %r3057, 0;
	and.pred  	%p124, %p122, %p123;
	@%p124 bra 	$L__BB0_70;
$L__BB0_71:                             // %__internal_fmodf_slowpath_mod.exit.i.i2117
	setp.gt.u32 	%p125, %r36, 2139095039;
	selp.f32 	%f436, 0f7FFFFFFF, 0f4B800000, %p125;
	mul.f32 	%f437, %f749, 0f34000000;
	mul.f32 	%f750, %f436, %f437;
	bra.uni 	$L__BB0_72;
$L__BB0_62:                             // %__nv_fast_fdividef.exit.i.i.i2094
	mov.f32 	%f419, 0f40000000;
	div.approx.f32 	%f420, %f750, %f419;
	cvt.rzi.f32.f32 	%f748, %f420;
	fma.rn.f32 	%f63, %f748, 0fC0000000, %f750;
	mov.b32 	%r35, %f63;
	setp.lt.u32 	%p116, %r35, 1073741824;
	@%p116 bra 	$L__BB0_67;
// %bb.63:
	setp.lt.u32 	%p117, %r35, -2147483647;
	@%p117 bra 	$L__BB0_65;
// %bb.64:
	add.f32 	%f425, %f748, 0fBF800000;
	setp.lt.f32 	%p120, %f63, 0fC0000000;
	add.f32 	%f426, %f425, 0fBF800000;
	selp.f32 	%f748, %f426, %f425, %p120;
	bra.uni 	$L__BB0_67;
$L__BB0_65:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p118, %f63, 0f40800000;
	@%p118 bra 	$L__BB0_67;
// %bb.66:                              // %__nv_fmaf_rn.exit.i.i.i2098
	add.f32 	%f421, %f748, 0f3F800000;
	fma.rn.f32 	%f423, %f419, 0fC0400000, %f63;
	setp.ge.f32 	%p119, %f423, 0f00000000;
	add.f32 	%f424, %f421, 0f3F800000;
	selp.f32 	%f748, %f424, %f421, %p119;
$L__BB0_67:                             // %__internal_fmodf_fastpath_quot.exit.i.i2101
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_72:                             // %__internal_fmodf_kernel.exit.i2120
	abs.f32 	%f438, %f750;
	setp.gtu.f32 	%p126, %f438, 0f7F800000;
	@%p126 bra 	$L__BB0_74;
// %bb.73:
	mov.b32 	%r408, %f60;
	and.b32  	%r409, %r408, -2147483648;
	mov.b32 	%r410, %f750;
	or.b32  	%r411, %r409, %r410;
	mov.b32 	%f750, %r411;
$L__BB0_74:                             // %__nv_fmodf.exit2121
	add.f32 	%f439, %f750, %f750;
	mov.b32 	%r412, %f439;
	and.b32  	%r413, %r412, -2147483648;
	or.b32  	%r414, %r413, 1056964608;
	mov.b32 	%f440, %r414;
	add.f32 	%f441, %f439, %f440;
	cvt.rzi.f32.f32 	%f442, %f441;
	abs.f32 	%f443, %f439;
	setp.gt.f32 	%p127, %f443, 0f4B000000;
	selp.f32 	%f444, %f439, %f442, %p127;
	cvt.rzi.f32.f32 	%f445, %f439;
	setp.lt.f32 	%p128, %f443, 0f3F000000;
	selp.f32 	%f446, %f445, %f444, %p128;
	cvt.rzi.s32.f32 	%r415, %f446;
	fma.rn.f32 	%f447, %f446, 0fBF000000, %f750;
	mul.f32 	%f448, %f447, %f447;
	fma.rn.f32 	%f449, %f448, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f450, %f448, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f451, %f449, %f448, 0fC0A55DF6;
	fma.rn.f32 	%f452, %f450, %f448, 0f4081E0CF;
	fma.rn.f32 	%f453, %f448, %f447, 0f00000000;
	fma.rn.f32 	%f454, %f452, %f448, 0fC09DE9E6;
	fma.rn.f32 	%f455, %f451, %f453, 0f00000000;
	fma.rn.f32 	%f456, %f454, %f448, 0f3F800000;
	fma.rn.f32 	%f457, %f447, 0f40490FDB, %f455;
	and.b32  	%r416, %r415, 1;
	setp.eq.b32 	%p129, %r416, 1;
	selp.f32 	%f458, %f456, %f457, %p129;
	selp.f32 	%f459, %f457, %f456, %p129;
	and.b32  	%r417, %r415, 2;
	setp.eq.s32 	%p130, %r417, 0;
	neg.f32 	%f460, %f458;
	selp.f32 	%f461, %f458, %f460, %p130;
	add.s32 	%r418, %r415, 1;
	and.b32  	%r419, %r418, 2;
	setp.eq.s32 	%p131, %r419, 0;
	mov.f32 	%f462, 0f00000000;
	sub.f32 	%f463, %f462, %f459;
	selp.f32 	%f464, %f459, %f463, %p131;
	cvt.rzi.f32.f32 	%f465, %f750;
	setp.eq.f32 	%p132, %f465, %f750;
	mul.f32 	%f466, %f750, 0f00000000;
	selp.f32 	%f757, %f466, %f461, %p132;
	abs.f32 	%f467, %f750;
	setp.gt.f32 	%p133, %f467, 0f4B800000;
	add.f32 	%f468, %f757, 0f3F800000;
	selp.f32 	%f752, %f468, %f464, %p133;
$L__BB0_75:                             // %L673
	and.b32  	%r43, %r302, 2;
	setp.eq.s32 	%p134, %r43, 0;
	mov.f32 	%f83, %f746;
	mov.f32 	%f85, %f752;
	@%p134 bra 	$L__BB0_77;
// %bb.76:                              // %L682
	neg.f32 	%f85, %f757;
	neg.f32 	%f83, %f755;
	mov.f32 	%f755, %f746;
	mov.f32 	%f757, %f752;
$L__BB0_77:                             // %L684
	@%p29 bra 	$L__BB0_193;
// %bb.78:
	@%p308 bra 	$L__BB0_189;
	bra.uni 	$L__BB0_79;
$L__BB0_189:
	mov.b32 	%r173, %f788;
	and.b32  	%r426, %r173, 8388607;
	or.b32  	%r3094, %r426, 1065353216;
	mov.b32 	%f787, %r3094;
	add.s32 	%r427, %r173, -1073741824;
	and.b32  	%r3095, %r427, -8388608;
	setp.eq.s32 	%p142, %r3095, 0;
	@%p142 bra 	$L__BB0_192;
// %bb.190:                             // %__nv_fmaf_rn.exit4.i.i.i2146.preheader
	mov.f32 	%f478, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f477,%f478;
	// end inline asm
$L__BB0_191:                            // %__nv_fmaf_rn.exit4.i.i.i2146
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r428, %r3095, 192937984;
	add.s32 	%r429, %r3094, %r428;
	mov.b32 	%f479, %r429;
	mul.f32 	%f480, %f477, %f479;
	sub.f32 	%f481, %f479, %f480;
	fma.rn.f32 	%f482, %f481, %f477, %f480;
	sub.f32 	%f483, %f479, %f482;
	fma.rz.f32 	%f484, %f483, %f477, %f482;
	cvt.rzi.f32.f32 	%f485, %f484;
	sub.f32 	%f787, %f479, %f485;
	sub.s32 	%r3095, %r3095, %r428;
	mov.b32 	%r3094, %f787;
	setp.ne.s32 	%p143, %r3095, 0;
	setp.ne.s32 	%p144, %r3094, 0;
	and.pred  	%p145, %p143, %p144;
	@%p145 bra 	$L__BB0_191;
$L__BB0_192:                            // %__internal_fmodf_slowpath_mod.exit.i.i2148
	setp.gt.u32 	%p146, %r173, 2139095039;
	selp.f32 	%f486, 0f7FFFFFFF, 0f4B800000, %p146;
	mul.f32 	%f487, %f787, 0f34000000;
	mul.f32 	%f788, %f486, %f487;
	bra.uni 	$L__BB0_193;
$L__BB0_79:                             // %__nv_fast_fdividef.exit.i.i.i2125
	mov.f32 	%f469, 0f40000000;
	div.approx.f32 	%f470, %f788, %f469;
	cvt.rzi.f32.f32 	%f786, %f470;
	fma.rn.f32 	%f189, %f786, 0fC0000000, %f788;
	mov.b32 	%r172, %f189;
	setp.lt.u32 	%p137, %r172, 1073741824;
	@%p137 bra 	$L__BB0_188;
// %bb.80:
	setp.lt.u32 	%p138, %r172, -2147483647;
	@%p138 bra 	$L__BB0_186;
// %bb.81:
	add.f32 	%f475, %f786, 0fBF800000;
	setp.lt.f32 	%p141, %f189, 0fC0000000;
	add.f32 	%f476, %f475, 0fBF800000;
	selp.f32 	%f786, %f476, %f475, %p141;
	bra.uni 	$L__BB0_188;
$L__BB0_186:
	add.f32 	%f786, %f786, 0f3F800000;
	setp.ltu.f32 	%p139, %f189, 0f40800000;
	@%p139 bra 	$L__BB0_188;
// %bb.187:                             // %__nv_fmaf_rn.exit.i.i.i2129
	add.f32 	%f471, %f786, 0f3F800000;
	fma.rn.f32 	%f473, %f469, 0fC0400000, %f189;
	setp.ge.f32 	%p140, %f473, 0f00000000;
	add.f32 	%f474, %f471, 0f3F800000;
	selp.f32 	%f786, %f474, %f471, %p140;
$L__BB0_188:                            // %__internal_fmodf_fastpath_quot.exit.i.i2132
	fma.rn.f32 	%f788, %f786, 0fC0000000, %f788;
$L__BB0_193:                            // %__internal_fmodf_kernel.exit.i2151
	abs.f32 	%f488, %f788;
	setp.gtu.f32 	%p147, %f488, 0f7F800000;
	@%p147 bra 	$L__BB0_195;
// %bb.194:
	mov.b32 	%r430, %f788;
	or.b32  	%r431, %r166, %r430;
	mov.b32 	%f788, %r431;
$L__BB0_195:                            // %__nv_fmodf.exit2152
	mov.f32 	%f512, 0f00000000;
	mov.f32 	%f521, 0f41000000;
	div.approx.f32 	%f203, %f512, %f521;
	abs.f32 	%f760, %f203;
	setp.lt.f32 	%p155, %f760, 0f40000000;
	@%p155 bra 	$L__BB0_93;
// %bb.82:
	setp.gtu.f32 	%p156, %f760, 0f4B800000;
	@%p156 bra 	$L__BB0_89;
	bra.uni 	$L__BB0_83;
$L__BB0_89:
	mov.b32 	%r47, %f760;
	and.b32  	%r446, %r47, 8388607;
	or.b32  	%r3059, %r446, 1065353216;
	mov.b32 	%f759, %r3059;
	add.s32 	%r447, %r47, -1073741824;
	and.b32  	%r3060, %r447, -8388608;
	setp.eq.s32 	%p162, %r3060, 0;
	@%p162 bra 	$L__BB0_92;
// %bb.90:                              // %__nv_fmaf_rn.exit4.i.i.i2177.preheader
	mov.f32 	%f531, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f530,%f531;
	// end inline asm
$L__BB0_91:                             // %__nv_fmaf_rn.exit4.i.i.i2177
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r448, %r3060, 192937984;
	add.s32 	%r449, %r3059, %r448;
	mov.b32 	%f532, %r449;
	mul.f32 	%f533, %f530, %f532;
	sub.f32 	%f534, %f532, %f533;
	fma.rn.f32 	%f535, %f534, %f530, %f533;
	sub.f32 	%f536, %f532, %f535;
	fma.rz.f32 	%f537, %f536, %f530, %f535;
	cvt.rzi.f32.f32 	%f538, %f537;
	sub.f32 	%f759, %f532, %f538;
	sub.s32 	%r3060, %r3060, %r448;
	mov.b32 	%r3059, %f759;
	setp.ne.s32 	%p163, %r3060, 0;
	setp.ne.s32 	%p164, %r3059, 0;
	and.pred  	%p165, %p163, %p164;
	@%p165 bra 	$L__BB0_91;
$L__BB0_92:                             // %__internal_fmodf_slowpath_mod.exit.i.i2179
	setp.gt.u32 	%p166, %r47, 2139095039;
	selp.f32 	%f539, 0f7FFFFFFF, 0f4B800000, %p166;
	mul.f32 	%f540, %f759, 0f34000000;
	mul.f32 	%f760, %f539, %f540;
	bra.uni 	$L__BB0_93;
$L__BB0_83:                             // %__nv_fast_fdividef.exit.i.i.i2156
	mov.f32 	%f522, 0f40000000;
	div.approx.f32 	%f523, %f760, %f522;
	cvt.rzi.f32.f32 	%f758, %f523;
	fma.rn.f32 	%f88, %f758, 0fC0000000, %f760;
	mov.b32 	%r46, %f88;
	setp.lt.u32 	%p157, %r46, 1073741824;
	@%p157 bra 	$L__BB0_88;
// %bb.84:
	setp.lt.u32 	%p158, %r46, -2147483647;
	@%p158 bra 	$L__BB0_86;
// %bb.85:
	add.f32 	%f528, %f758, 0fBF800000;
	setp.lt.f32 	%p161, %f88, 0fC0000000;
	add.f32 	%f529, %f528, 0fBF800000;
	selp.f32 	%f758, %f529, %f528, %p161;
	bra.uni 	$L__BB0_88;
$L__BB0_86:
	add.f32 	%f758, %f758, 0f3F800000;
	setp.ltu.f32 	%p159, %f88, 0f40800000;
	@%p159 bra 	$L__BB0_88;
// %bb.87:                              // %__nv_fmaf_rn.exit.i.i.i2160
	add.f32 	%f524, %f758, 0f3F800000;
	fma.rn.f32 	%f526, %f522, 0fC0400000, %f88;
	setp.ge.f32 	%p160, %f526, 0f00000000;
	add.f32 	%f527, %f524, 0f3F800000;
	selp.f32 	%f758, %f527, %f524, %p160;
$L__BB0_88:                             // %__internal_fmodf_fastpath_quot.exit.i.i2163
	fma.rn.f32 	%f760, %f758, 0fC0000000, %f760;
$L__BB0_93:                             // %__internal_fmodf_kernel.exit.i2182
	abs.f32 	%f541, %f760;
	setp.gtu.f32 	%p167, %f541, 0f7F800000;
	@%p167 bra 	$L__BB0_95;
// %bb.94:
	mov.b32 	%r450, %f203;
	and.b32  	%r451, %r450, -2147483648;
	mov.b32 	%r452, %f760;
	or.b32  	%r453, %r451, %r452;
	mov.b32 	%f760, %r453;
$L__BB0_95:                             // %__nv_fmodf.exit2183
	cvt.rn.f32.s32 	%f572, %r157;
	div.approx.f32 	%f104, %f572, %f521;
	abs.f32 	%f764, %f104;
	setp.lt.f32 	%p175, %f764, 0f40000000;
	@%p175 bra 	$L__BB0_107;
// %bb.96:
	setp.gtu.f32 	%p176, %f764, 0f4B800000;
	@%p176 bra 	$L__BB0_103;
	bra.uni 	$L__BB0_97;
$L__BB0_103:
	mov.b32 	%r55, %f764;
	and.b32  	%r462, %r55, 8388607;
	or.b32  	%r3061, %r462, 1065353216;
	mov.b32 	%f763, %r3061;
	add.s32 	%r463, %r55, -1073741824;
	and.b32  	%r3062, %r463, -8388608;
	setp.eq.s32 	%p182, %r3062, 0;
	@%p182 bra 	$L__BB0_106;
// %bb.104:                             // %__nv_fmaf_rn.exit4.i.i.i2208.preheader
	mov.f32 	%f583, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f582,%f583;
	// end inline asm
$L__BB0_105:                            // %__nv_fmaf_rn.exit4.i.i.i2208
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r464, %r3062, 192937984;
	add.s32 	%r465, %r3061, %r464;
	mov.b32 	%f584, %r465;
	mul.f32 	%f585, %f582, %f584;
	sub.f32 	%f586, %f584, %f585;
	fma.rn.f32 	%f587, %f586, %f582, %f585;
	sub.f32 	%f588, %f584, %f587;
	fma.rz.f32 	%f589, %f588, %f582, %f587;
	cvt.rzi.f32.f32 	%f590, %f589;
	sub.f32 	%f763, %f584, %f590;
	sub.s32 	%r3062, %r3062, %r464;
	mov.b32 	%r3061, %f763;
	setp.ne.s32 	%p183, %r3062, 0;
	setp.ne.s32 	%p184, %r3061, 0;
	and.pred  	%p185, %p183, %p184;
	@%p185 bra 	$L__BB0_105;
$L__BB0_106:                            // %__internal_fmodf_slowpath_mod.exit.i.i2210
	setp.gt.u32 	%p186, %r55, 2139095039;
	selp.f32 	%f591, 0f7FFFFFFF, 0f4B800000, %p186;
	mul.f32 	%f592, %f763, 0f34000000;
	mul.f32 	%f764, %f591, %f592;
	bra.uni 	$L__BB0_107;
$L__BB0_97:                             // %__nv_fast_fdividef.exit.i.i.i2187
	mov.f32 	%f574, 0f40000000;
	div.approx.f32 	%f575, %f764, %f574;
	cvt.rzi.f32.f32 	%f762, %f575;
	fma.rn.f32 	%f107, %f762, 0fC0000000, %f764;
	mov.b32 	%r54, %f107;
	setp.lt.u32 	%p177, %r54, 1073741824;
	@%p177 bra 	$L__BB0_102;
// %bb.98:
	setp.lt.u32 	%p178, %r54, -2147483647;
	@%p178 bra 	$L__BB0_100;
// %bb.99:
	add.f32 	%f580, %f762, 0fBF800000;
	setp.lt.f32 	%p181, %f107, 0fC0000000;
	add.f32 	%f581, %f580, 0fBF800000;
	selp.f32 	%f762, %f581, %f580, %p181;
	bra.uni 	$L__BB0_102;
$L__BB0_100:
	add.f32 	%f762, %f762, 0f3F800000;
	setp.ltu.f32 	%p179, %f107, 0f40800000;
	@%p179 bra 	$L__BB0_102;
// %bb.101:                             // %__nv_fmaf_rn.exit.i.i.i2191
	add.f32 	%f576, %f762, 0f3F800000;
	fma.rn.f32 	%f578, %f574, 0fC0400000, %f107;
	setp.ge.f32 	%p180, %f578, 0f00000000;
	add.f32 	%f579, %f576, 0f3F800000;
	selp.f32 	%f762, %f579, %f576, %p180;
$L__BB0_102:                            // %__internal_fmodf_fastpath_quot.exit.i.i2194
	fma.rn.f32 	%f764, %f762, 0fC0000000, %f764;
$L__BB0_107:                            // %__internal_fmodf_kernel.exit.i2213
	abs.f32 	%f593, %f764;
	setp.gtu.f32 	%p187, %f593, 0f7F800000;
	@%p187 bra 	$L__BB0_109;
// %bb.108:
	mov.b32 	%r466, %f104;
	and.b32  	%r467, %r466, -2147483648;
	mov.b32 	%r468, %f764;
	or.b32  	%r469, %r467, %r468;
	mov.b32 	%f764, %r469;
$L__BB0_109:                            // %__nv_fmodf.exit2214
	and.b32  	%r65, %r302, 1;
	shr.u32 	%r66, %r302, 4;
	setp.ne.s32 	%p195, %r65, %r66;
	mov.f32 	%f770, %f512;
	mov.f32 	%f779, %f512;
	@%p195 bra 	$L__BB0_125;
// %bb.110:                             // %L889
	mov.f32 	%f626, 0f3F800000;
	mov.f32 	%f627, 0f00000000;
	div.approx.f32 	%f121, %f627, %f626;
	abs.f32 	%f768, %f121;
	setp.lt.f32 	%p196, %f768, 0f40000000;
	@%p196 bra 	$L__BB0_122;
// %bb.111:
	setp.gtu.f32 	%p197, %f768, 0f4B800000;
	@%p197 bra 	$L__BB0_118;
	bra.uni 	$L__BB0_112;
$L__BB0_118:
	mov.b32 	%r68, %f768;
	and.b32  	%r484, %r68, 8388607;
	or.b32  	%r3063, %r484, 1065353216;
	mov.b32 	%f767, %r3063;
	add.s32 	%r485, %r68, -1073741824;
	and.b32  	%r3064, %r485, -8388608;
	setp.eq.s32 	%p203, %r3064, 0;
	@%p203 bra 	$L__BB0_121;
// %bb.119:                             // %__nv_fmaf_rn.exit4.i.i.i2239.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f636,%f626;
	// end inline asm
$L__BB0_120:                            // %__nv_fmaf_rn.exit4.i.i.i2239
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r486, %r3064, 192937984;
	add.s32 	%r487, %r3063, %r486;
	mov.b32 	%f638, %r487;
	mul.f32 	%f639, %f636, %f638;
	sub.f32 	%f640, %f638, %f639;
	fma.rn.f32 	%f641, %f640, %f636, %f639;
	sub.f32 	%f642, %f638, %f641;
	fma.rz.f32 	%f643, %f642, %f636, %f641;
	cvt.rzi.f32.f32 	%f644, %f643;
	sub.f32 	%f767, %f638, %f644;
	sub.s32 	%r3064, %r3064, %r486;
	mov.b32 	%r3063, %f767;
	setp.ne.s32 	%p204, %r3064, 0;
	setp.ne.s32 	%p205, %r3063, 0;
	and.pred  	%p206, %p204, %p205;
	@%p206 bra 	$L__BB0_120;
$L__BB0_121:                            // %__internal_fmodf_slowpath_mod.exit.i.i2241
	setp.gt.u32 	%p207, %r68, 2139095039;
	selp.f32 	%f645, 0f7FFFFFFF, 0f4B800000, %p207;
	mul.f32 	%f646, %f767, 0f34000000;
	mul.f32 	%f768, %f645, %f646;
	bra.uni 	$L__BB0_122;
$L__BB0_112:                            // %__nv_fast_fdividef.exit.i.i.i2218
	mov.f32 	%f628, 0f40000000;
	div.approx.f32 	%f629, %f768, %f628;
	cvt.rzi.f32.f32 	%f766, %f629;
	fma.rn.f32 	%f124, %f766, 0fC0000000, %f768;
	mov.b32 	%r67, %f124;
	setp.lt.u32 	%p198, %r67, 1073741824;
	@%p198 bra 	$L__BB0_117;
// %bb.113:
	setp.lt.u32 	%p199, %r67, -2147483647;
	@%p199 bra 	$L__BB0_115;
// %bb.114:
	add.f32 	%f634, %f766, 0fBF800000;
	setp.lt.f32 	%p202, %f124, 0fC0000000;
	add.f32 	%f635, %f634, 0fBF800000;
	selp.f32 	%f766, %f635, %f634, %p202;
	bra.uni 	$L__BB0_117;
$L__BB0_115:
	add.f32 	%f766, %f766, 0f3F800000;
	setp.ltu.f32 	%p200, %f124, 0f40800000;
	@%p200 bra 	$L__BB0_117;
// %bb.116:                             // %__nv_fmaf_rn.exit.i.i.i2222
	add.f32 	%f630, %f766, 0f3F800000;
	fma.rn.f32 	%f632, %f628, 0fC0400000, %f124;
	setp.ge.f32 	%p201, %f632, 0f00000000;
	add.f32 	%f633, %f630, 0f3F800000;
	selp.f32 	%f766, %f633, %f630, %p201;
$L__BB0_117:                            // %__internal_fmodf_fastpath_quot.exit.i.i2225
	fma.rn.f32 	%f768, %f766, 0fC0000000, %f768;
$L__BB0_122:                            // %__internal_fmodf_kernel.exit.i2244
	abs.f32 	%f647, %f768;
	setp.gtu.f32 	%p208, %f647, 0f7F800000;
	@%p208 bra 	$L__BB0_124;
// %bb.123:
	mov.b32 	%r488, %f121;
	and.b32  	%r489, %r488, -2147483648;
	mov.b32 	%r490, %f768;
	or.b32  	%r491, %r489, %r490;
	mov.b32 	%f768, %r491;
$L__BB0_124:                            // %__nv_fmodf.exit2245
	add.f32 	%f648, %f768, %f768;
	mov.b32 	%r492, %f648;
	and.b32  	%r493, %r492, -2147483648;
	or.b32  	%r494, %r493, 1056964608;
	mov.b32 	%f649, %r494;
	add.f32 	%f650, %f648, %f649;
	cvt.rzi.f32.f32 	%f651, %f650;
	abs.f32 	%f652, %f648;
	setp.gt.f32 	%p209, %f652, 0f4B000000;
	selp.f32 	%f653, %f648, %f651, %p209;
	cvt.rzi.f32.f32 	%f654, %f648;
	setp.lt.f32 	%p210, %f652, 0f3F000000;
	selp.f32 	%f655, %f654, %f653, %p210;
	cvt.rzi.s32.f32 	%r495, %f655;
	fma.rn.f32 	%f656, %f655, 0fBF000000, %f768;
	mul.f32 	%f657, %f656, %f656;
	fma.rn.f32 	%f658, %f657, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f659, %f657, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f660, %f658, %f657, 0fC0A55DF6;
	fma.rn.f32 	%f661, %f659, %f657, 0f4081E0CF;
	fma.rn.f32 	%f662, %f657, %f656, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f657, 0fC09DE9E6;
	fma.rn.f32 	%f664, %f660, %f662, 0f00000000;
	fma.rn.f32 	%f665, %f663, %f657, 0f3F800000;
	fma.rn.f32 	%f666, %f656, 0f40490FDB, %f664;
	and.b32  	%r496, %r495, 1;
	setp.eq.b32 	%p211, %r496, 1;
	selp.f32 	%f667, %f665, %f666, %p211;
	selp.f32 	%f668, %f666, %f665, %p211;
	and.b32  	%r497, %r495, 2;
	setp.eq.s32 	%p212, %r497, 0;
	neg.f32 	%f669, %f667;
	selp.f32 	%f670, %f667, %f669, %p212;
	add.s32 	%r498, %r495, 1;
	and.b32  	%r499, %r498, 2;
	setp.eq.s32 	%p213, %r499, 0;
	sub.f32 	%f672, %f627, %f668;
	selp.f32 	%f673, %f668, %f672, %p213;
	cvt.rzi.f32.f32 	%f674, %f768;
	setp.eq.f32 	%p214, %f674, %f768;
	mul.f32 	%f675, %f768, 0f00000000;
	selp.f32 	%f779, %f675, %f670, %p214;
	abs.f32 	%f676, %f768;
	setp.gt.f32 	%p215, %f676, 0f4B800000;
	add.f32 	%f677, %f779, 0f3F800000;
	selp.f32 	%f770, %f677, %f673, %p215;
$L__BB0_125:                            // %L928
	and.b32  	%r64, %r157, 1;
	mov.f32 	%f776, %f512;
	mov.f32 	%f781, %f512;
	@%p195 bra 	$L__BB0_141;
// %bb.126:                             // %L931
	cvt.rn.f32.s32 	%f679, %r64;
	mov.f32 	%f680, 0f3F800000;
	div.approx.f32 	%f142, %f679, %f680;
	abs.f32 	%f774, %f142;
	setp.lt.f32 	%p217, %f774, 0f40000000;
	@%p217 bra 	$L__BB0_138;
// %bb.127:
	setp.gtu.f32 	%p218, %f774, 0f4B800000;
	@%p218 bra 	$L__BB0_134;
	bra.uni 	$L__BB0_128;
$L__BB0_134:
	mov.b32 	%r76, %f774;
	and.b32  	%r500, %r76, 8388607;
	or.b32  	%r3065, %r500, 1065353216;
	mov.b32 	%f773, %r3065;
	add.s32 	%r501, %r76, -1073741824;
	and.b32  	%r3066, %r501, -8388608;
	setp.eq.s32 	%p224, %r3066, 0;
	@%p224 bra 	$L__BB0_137;
// %bb.135:                             // %__nv_fmaf_rn.exit4.i.i.i2270.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f689,%f680;
	// end inline asm
$L__BB0_136:                            // %__nv_fmaf_rn.exit4.i.i.i2270
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r502, %r3066, 192937984;
	add.s32 	%r503, %r3065, %r502;
	mov.b32 	%f691, %r503;
	mul.f32 	%f692, %f689, %f691;
	sub.f32 	%f693, %f691, %f692;
	fma.rn.f32 	%f694, %f693, %f689, %f692;
	sub.f32 	%f695, %f691, %f694;
	fma.rz.f32 	%f696, %f695, %f689, %f694;
	cvt.rzi.f32.f32 	%f697, %f696;
	sub.f32 	%f773, %f691, %f697;
	sub.s32 	%r3066, %r3066, %r502;
	mov.b32 	%r3065, %f773;
	setp.ne.s32 	%p225, %r3066, 0;
	setp.ne.s32 	%p226, %r3065, 0;
	and.pred  	%p227, %p225, %p226;
	@%p227 bra 	$L__BB0_136;
$L__BB0_137:                            // %__internal_fmodf_slowpath_mod.exit.i.i2272
	setp.gt.u32 	%p228, %r76, 2139095039;
	selp.f32 	%f698, 0f7FFFFFFF, 0f4B800000, %p228;
	mul.f32 	%f699, %f773, 0f34000000;
	mul.f32 	%f774, %f698, %f699;
	bra.uni 	$L__BB0_138;
$L__BB0_128:                            // %__nv_fast_fdividef.exit.i.i.i2249
	mov.f32 	%f681, 0f40000000;
	div.approx.f32 	%f682, %f774, %f681;
	cvt.rzi.f32.f32 	%f772, %f682;
	fma.rn.f32 	%f145, %f772, 0fC0000000, %f774;
	mov.b32 	%r75, %f145;
	setp.lt.u32 	%p219, %r75, 1073741824;
	@%p219 bra 	$L__BB0_133;
// %bb.129:
	setp.lt.u32 	%p220, %r75, -2147483647;
	@%p220 bra 	$L__BB0_131;
// %bb.130:
	add.f32 	%f687, %f772, 0fBF800000;
	setp.lt.f32 	%p223, %f145, 0fC0000000;
	add.f32 	%f688, %f687, 0fBF800000;
	selp.f32 	%f772, %f688, %f687, %p223;
	bra.uni 	$L__BB0_133;
$L__BB0_131:
	add.f32 	%f772, %f772, 0f3F800000;
	setp.ltu.f32 	%p221, %f145, 0f40800000;
	@%p221 bra 	$L__BB0_133;
// %bb.132:                             // %__nv_fmaf_rn.exit.i.i.i2253
	add.f32 	%f683, %f772, 0f3F800000;
	fma.rn.f32 	%f685, %f681, 0fC0400000, %f145;
	setp.ge.f32 	%p222, %f685, 0f00000000;
	add.f32 	%f686, %f683, 0f3F800000;
	selp.f32 	%f772, %f686, %f683, %p222;
$L__BB0_133:                            // %__internal_fmodf_fastpath_quot.exit.i.i2256
	fma.rn.f32 	%f774, %f772, 0fC0000000, %f774;
$L__BB0_138:                            // %__internal_fmodf_kernel.exit.i2275
	abs.f32 	%f700, %f774;
	setp.gtu.f32 	%p229, %f700, 0f7F800000;
	@%p229 bra 	$L__BB0_140;
// %bb.139:
	mov.b32 	%r504, %f142;
	and.b32  	%r505, %r504, -2147483648;
	mov.b32 	%r506, %f774;
	or.b32  	%r507, %r505, %r506;
	mov.b32 	%f774, %r507;
$L__BB0_140:                            // %__nv_fmodf.exit2276
	add.f32 	%f701, %f774, %f774;
	mov.b32 	%r508, %f701;
	and.b32  	%r509, %r508, -2147483648;
	or.b32  	%r510, %r509, 1056964608;
	mov.b32 	%f702, %r510;
	add.f32 	%f703, %f701, %f702;
	cvt.rzi.f32.f32 	%f704, %f703;
	abs.f32 	%f705, %f701;
	setp.gt.f32 	%p230, %f705, 0f4B000000;
	selp.f32 	%f706, %f701, %f704, %p230;
	cvt.rzi.f32.f32 	%f707, %f701;
	setp.lt.f32 	%p231, %f705, 0f3F000000;
	selp.f32 	%f708, %f707, %f706, %p231;
	cvt.rzi.s32.f32 	%r511, %f708;
	fma.rn.f32 	%f709, %f708, 0fBF000000, %f774;
	mul.f32 	%f710, %f709, %f709;
	fma.rn.f32 	%f711, %f710, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f712, %f710, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f713, %f711, %f710, 0fC0A55DF6;
	fma.rn.f32 	%f714, %f712, %f710, 0f4081E0CF;
	fma.rn.f32 	%f715, %f710, %f709, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f710, 0fC09DE9E6;
	fma.rn.f32 	%f717, %f713, %f715, 0f00000000;
	fma.rn.f32 	%f718, %f716, %f710, 0f3F800000;
	fma.rn.f32 	%f719, %f709, 0f40490FDB, %f717;
	and.b32  	%r512, %r511, 1;
	setp.eq.b32 	%p232, %r512, 1;
	selp.f32 	%f720, %f718, %f719, %p232;
	selp.f32 	%f721, %f719, %f718, %p232;
	and.b32  	%r513, %r511, 2;
	setp.eq.s32 	%p233, %r513, 0;
	neg.f32 	%f722, %f720;
	selp.f32 	%f723, %f720, %f722, %p233;
	add.s32 	%r514, %r511, 1;
	and.b32  	%r515, %r514, 2;
	setp.eq.s32 	%p234, %r515, 0;
	mov.f32 	%f724, 0f00000000;
	sub.f32 	%f725, %f724, %f721;
	selp.f32 	%f726, %f721, %f725, %p234;
	cvt.rzi.f32.f32 	%f727, %f774;
	setp.eq.f32 	%p235, %f727, %f774;
	mul.f32 	%f728, %f774, 0f00000000;
	selp.f32 	%f781, %f728, %f723, %p235;
	abs.f32 	%f729, %f774;
	setp.gt.f32 	%p236, %f729, 0f4B800000;
	add.f32 	%f730, %f781, 0f3F800000;
	selp.f32 	%f776, %f730, %f726, %p236;
$L__BB0_141:                            // %L965
	mov.f32 	%f165, %f770;
	mov.f32 	%f167, %f776;
	@%p134 bra 	$L__BB0_143;
// %bb.142:                             // %L974
	neg.f32 	%f167, %f781;
	neg.f32 	%f165, %f779;
	mov.f32 	%f779, %f770;
	mov.f32 	%f781, %f776;
$L__BB0_143:                            // %L976
	setp.gt.u32 	%p238, %r302, 15;
	mov.u32 	%r182, 999999999;
	@%p238 bra 	$L__BB0_197;
// %bb.144:                             // %L1006
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	mad.lo.s32 	%r523, %r302, 6, %r4;
	cvt.u16.u32 	%rs17, %r523;
	and.b16  	%rs18, %rs17, 255;
	mul.lo.s16 	%rs19, %rs18, 171;
	shr.u16 	%rs20, %rs19, 14;
	mul.lo.s16 	%rs21, %rs20, 96;
	sub.s16 	%rs22, %rs17, %rs21;
	cvt.u32.u16 	%r524, %rs22;
	and.b32  	%r525, %r524, 255;
	mul.wide.u32 	%rd54, %r525, 4;
	add.s64 	%rd55, %rd1, %rd54;
	ld.global.u32 	%r526, [%rd55];
	shl.b32 	%r527, %r526, 16;
	cvt.s32.s16 	%r85, %r526;
	shr.s32 	%r86, %r526, 16;
	or.b32  	%r528, %r527, 65535;
	setp.lt.u32 	%p239, %r528, 589823;
	setp.lt.u32 	%p240, %r526, 786432;
	and.pred  	%p241, %p239, %p240;
	@%p241 bra 	$L__BB0_196;
	bra.uni 	$L__BB0_145;
$L__BB0_196:                            // %L1246
	mul.lo.s32 	%r532, %r86, 290;
	mad.lo.s32 	%r182, %r85, 33, %r532;
$L__BB0_197:                            // %pass533
	add.f32 	%f227, %f784, %f784;
	mov.b32 	%r330, %f227;
	add.f32 	%f489, %f788, %f788;
	and.b32  	%r331, %r330, -2147483648;
	add.f32 	%f282, %f734, %f734;
	mov.b32 	%r438, %f489;
	or.b32  	%r332, %r331, 1056964608;
	mov.b32 	%r347, %f282;
	and.b32  	%r439, %r438, -2147483648;
	add.f32 	%f542, %f760, %f760;
	add.f32 	%f595, %f764, %f764;
	mov.b32 	%f228, %r332;
	and.b32  	%r348, %r347, -2147483648;
	or.b32  	%r440, %r439, 1056964608;
	mov.b32 	%r454, %f542;
	mov.b32 	%r476, %f595;
	add.f32 	%f229, %f227, %f228;
	abs.f32 	%f231, %f227;
	or.b32  	%r349, %r348, 1056964608;
	mov.b32 	%f490, %r440;
	and.b32  	%r455, %r454, -2147483648;
	and.b32  	%r477, %r476, -2147483648;
	cvt.rzi.f32.f32 	%f230, %f229;
	setp.gt.f32 	%p42, %f231, 0f4B000000;
	mov.b32 	%f283, %r349;
	add.f32 	%f491, %f489, %f490;
	abs.f32 	%f493, %f489;
	or.b32  	%r456, %r455, 1056964608;
	or.b32  	%r478, %r477, 1056964608;
	selp.f32 	%f232, %f227, %f230, %p42;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p43, %f231, 0f3F000000;
	add.f32 	%f284, %f282, %f283;
	abs.f32 	%f286, %f282;
	cvt.rzi.f32.f32 	%f492, %f491;
	setp.gt.f32 	%p148, %f493, 0f4B000000;
	mov.b32 	%f543, %r456;
	mov.b32 	%f596, %r478;
	selp.f32 	%f234, %f233, %f232, %p43;
	cvt.rzi.f32.f32 	%f285, %f284;
	setp.gt.f32 	%p62, %f286, 0f4B000000;
	selp.f32 	%f494, %f489, %f492, %p148;
	cvt.rzi.f32.f32 	%f495, %f489;
	setp.lt.f32 	%p149, %f493, 0f3F000000;
	add.f32 	%f544, %f542, %f543;
	abs.f32 	%f546, %f542;
	add.f32 	%f597, %f595, %f596;
	abs.f32 	%f599, %f595;
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f784;
	selp.f32 	%f287, %f282, %f285, %p62;
	cvt.rzi.f32.f32 	%f288, %f282;
	setp.lt.f32 	%p63, %f286, 0f3F000000;
	selp.f32 	%f496, %f495, %f494, %p149;
	cvt.rzi.f32.f32 	%f545, %f544;
	setp.gt.f32 	%p168, %f546, 0f4B000000;
	cvt.rzi.f32.f32 	%f598, %f597;
	setp.gt.f32 	%p188, %f599, 0f4B000000;
	mul.f32 	%f236, %f235, %f235;
	selp.f32 	%f289, %f288, %f287, %p63;
	fma.rn.f32 	%f497, %f496, 0fBF000000, %f788;
	selp.f32 	%f547, %f542, %f545, %p168;
	cvt.rzi.f32.f32 	%f548, %f542;
	setp.lt.f32 	%p169, %f546, 0f3F000000;
	selp.f32 	%f600, %f595, %f598, %p188;
	cvt.rzi.f32.f32 	%f601, %f595;
	setp.lt.f32 	%p189, %f599, 0f3F000000;
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f290, %f289, 0fBF000000, %f734;
	mul.f32 	%f498, %f497, %f497;
	selp.f32 	%f549, %f548, %f547, %p169;
	selp.f32 	%f602, %f601, %f600, %p189;
	cvt.rzi.s32.f32 	%r333, %f234;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	mul.f32 	%f291, %f290, %f290;
	fma.rn.f32 	%f499, %f498, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f500, %f498, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f550, %f549, 0fBF000000, %f760;
	fma.rn.f32 	%f603, %f602, 0fBF000000, %f764;
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r334, %r333, 1;
	fma.rn.f32 	%f292, %f291, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f293, %f291, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r441, %f496;
	fma.rn.f32 	%f501, %f499, %f498, 0fC0A55DF6;
	fma.rn.f32 	%f502, %f500, %f498, 0f4081E0CF;
	fma.rn.f32 	%f503, %f498, %f497, 0f00000000;
	mul.f32 	%f551, %f550, %f550;
	mul.f32 	%f604, %f603, %f603;
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p44, %r334, 1;
	cvt.rzi.s32.f32 	%r350, %f289;
	fma.rn.f32 	%f294, %f292, %f291, 0fC0A55DF6;
	fma.rn.f32 	%f295, %f293, %f291, 0f4081E0CF;
	fma.rn.f32 	%f296, %f291, %f290, 0f00000000;
	fma.rn.f32 	%f504, %f502, %f498, 0fC09DE9E6;
	fma.rn.f32 	%f505, %f501, %f503, 0f00000000;
	and.b32  	%r442, %r441, 1;
	fma.rn.f32 	%f552, %f551, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f553, %f551, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f604, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f606, %f604, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f246, %f244, %f245, %p44;
	and.b32  	%r335, %r333, 2;
	fma.rn.f32 	%f297, %f295, %f291, 0fC09DE9E6;
	fma.rn.f32 	%f298, %f294, %f296, 0f00000000;
	and.b32  	%r351, %r350, 1;
	fma.rn.f32 	%f506, %f504, %f498, 0f3F800000;
	fma.rn.f32 	%f507, %f497, 0f40490FDB, %f505;
	setp.eq.b32 	%p150, %r442, 1;
	cvt.rzi.s32.f32 	%r457, %f549;
	fma.rn.f32 	%f554, %f552, %f551, 0fC0A55DF6;
	fma.rn.f32 	%f555, %f553, %f551, 0f4081E0CF;
	fma.rn.f32 	%f556, %f551, %f550, 0f00000000;
	cvt.rzi.s32.f32 	%r479, %f602;
	fma.rn.f32 	%f607, %f605, %f604, 0fC0A55DF6;
	fma.rn.f32 	%f608, %f606, %f604, 0f4081E0CF;
	fma.rn.f32 	%f609, %f604, %f603, 0f00000000;
	setp.eq.s32 	%p45, %r335, 0;
	neg.f32 	%f248, %f246;
	add.s32 	%r336, %r333, 1;
	cvt.rzi.f32.f32 	%f253, %f784;
	fma.rn.f32 	%f299, %f297, %f291, 0f3F800000;
	fma.rn.f32 	%f300, %f290, 0f40490FDB, %f298;
	setp.eq.b32 	%p64, %r351, 1;
	selp.f32 	%f508, %f506, %f507, %p150;
	and.b32  	%r443, %r441, 2;
	fma.rn.f32 	%f557, %f555, %f551, 0fC09DE9E6;
	fma.rn.f32 	%f558, %f554, %f556, 0f00000000;
	and.b32  	%r458, %r457, 1;
	fma.rn.f32 	%f610, %f608, %f604, 0fC09DE9E6;
	fma.rn.f32 	%f611, %f607, %f609, 0f00000000;
	and.b32  	%r480, %r479, 1;
	selp.f32 	%f247, %f245, %f244, %p44;
	selp.f32 	%f249, %f246, %f248, %p45;
	and.b32  	%r337, %r336, 2;
	setp.eq.f32 	%p47, %f253, %f784;
	mul.f32 	%f254, %f784, 0f00000000;
	selp.f32 	%f301, %f299, %f300, %p64;
	and.b32  	%r352, %r350, 2;
	setp.eq.s32 	%p151, %r443, 0;
	neg.f32 	%f510, %f508;
	add.s32 	%r444, %r441, 1;
	cvt.rzi.f32.f32 	%f515, %f788;
	fma.rn.f32 	%f559, %f557, %f551, 0f3F800000;
	fma.rn.f32 	%f560, %f550, 0f40490FDB, %f558;
	setp.eq.b32 	%p170, %r458, 1;
	fma.rn.f32 	%f612, %f610, %f604, 0f3F800000;
	fma.rn.f32 	%f613, %f603, 0f40490FDB, %f611;
	setp.eq.b32 	%p190, %r480, 1;
	setp.eq.s32 	%p46, %r337, 0;
	sub.f32 	%f251, %f250, %f247;
	selp.f32 	%f255, %f254, %f249, %p47;
	abs.f32 	%f256, %f784;
	setp.eq.s32 	%p65, %r352, 0;
	neg.f32 	%f303, %f301;
	add.s32 	%r353, %r350, 1;
	cvt.rzi.f32.f32 	%f307, %f734;
	selp.f32 	%f509, %f507, %f506, %p150;
	selp.f32 	%f511, %f508, %f510, %p151;
	and.b32  	%r445, %r444, 2;
	setp.eq.f32 	%p153, %f515, %f788;
	mul.f32 	%f516, %f788, 0f00000000;
	selp.f32 	%f561, %f559, %f560, %p170;
	and.b32  	%r459, %r457, 2;
	selp.f32 	%f614, %f612, %f613, %p190;
	and.b32  	%r481, %r479, 2;
	selp.f32 	%f252, %f247, %f251, %p46;
	setp.gt.f32 	%p48, %f256, 0f4B800000;
	add.f32 	%f257, %f255, 0f3F800000;
	selp.f32 	%f302, %f300, %f299, %p64;
	selp.f32 	%f304, %f301, %f303, %p65;
	and.b32  	%r354, %r353, 2;
	setp.eq.f32 	%p67, %f307, %f734;
	mul.f32 	%f308, %f734, 0f00000000;
	setp.eq.s32 	%p152, %r445, 0;
	sub.f32 	%f513, %f512, %f509;
	selp.f32 	%f517, %f516, %f511, %p153;
	abs.f32 	%f518, %f788;
	setp.eq.s32 	%p171, %r459, 0;
	neg.f32 	%f563, %f561;
	add.s32 	%r460, %r457, 1;
	cvt.rzi.f32.f32 	%f568, %f760;
	setp.eq.s32 	%p191, %r481, 0;
	neg.f32 	%f616, %f614;
	add.s32 	%r482, %r479, 1;
	cvt.rzi.f32.f32 	%f620, %f764;
	selp.f32 	%f258, %f257, %f252, %p48;
	setp.eq.s32 	%p66, %r354, 0;
	sub.f32 	%f305, %f250, %f302;
	selp.f32 	%f16, %f308, %f304, %p67;
	abs.f32 	%f309, %f734;
	selp.f32 	%f514, %f509, %f513, %p152;
	setp.gt.f32 	%p154, %f518, 0f4B800000;
	add.f32 	%f519, %f517, 0f3F800000;
	selp.f32 	%f562, %f560, %f559, %p170;
	selp.f32 	%f564, %f561, %f563, %p171;
	and.b32  	%r461, %r460, 2;
	setp.eq.f32 	%p173, %f568, %f760;
	mul.f32 	%f569, %f760, 0f00000000;
	selp.f32 	%f615, %f613, %f612, %p190;
	selp.f32 	%f617, %f614, %f616, %p191;
	and.b32  	%r483, %r482, 2;
	setp.eq.f32 	%p193, %f620, %f764;
	mul.f32 	%f621, %f764, 0f00000000;
	mov.b32 	%r326, %f258;
	mov.b32 	%r329, %f255;
	selp.f32 	%f306, %f302, %f305, %p66;
	setp.gt.f32 	%p68, %f309, 0f4B800000;
	add.f32 	%f310, %f16, 0f3F800000;
	selp.f32 	%f520, %f519, %f514, %p154;
	setp.eq.s32 	%p172, %r461, 0;
	sub.f32 	%f566, %f512, %f562;
	selp.f32 	%f102, %f569, %f564, %p173;
	abs.f32 	%f570, %f760;
	setp.eq.s32 	%p192, %r483, 0;
	sub.f32 	%f618, %f512, %f615;
	selp.f32 	%f622, %f621, %f617, %p193;
	abs.f32 	%f623, %f764;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r325, %r329, -2147483648;
	selp.f32 	%f17, %f310, %f306, %p68;
	mov.b32 	%r434, %f520;
	mov.b32 	%r437, %f517;
	selp.f32 	%f567, %f562, %f566, %p172;
	setp.gt.f32 	%p174, %f570, 0f4B800000;
	add.f32 	%f571, %f102, 0f3F800000;
	selp.f32 	%f619, %f615, %f618, %p192;
	setp.gt.f32 	%p194, %f623, 0f4B800000;
	add.f32 	%f624, %f622, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r324, %r326, %r325;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r327, %r329, %r326;
	// end inline asm
	mov.b32 	%r377, %f17;
	mov.b32 	%r378, %f37;
	mov.b32 	%r380, %f16;
	mov.b32 	%r381, %f38;
	mov.b32 	%r421, %f83;
	mov.b32 	%r422, %f85;
	mov.b32 	%r424, %f755;
	mov.b32 	%r425, %f757;
	xor.b32  	%r433, %r437, -2147483648;
	selp.f32 	%f103, %f571, %f567, %p174;
	selp.f32 	%f625, %f624, %f619, %p194;
	// begin inline asm
	cvt.rn.f16x2.f32 %r376, %r378, %r377;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r379, %r381, %r380;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r420, %r422, %r421;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r423, %r425, %r424;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r432, %r434, %r433;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r435, %r437, %r434;
	// end inline asm
	mov.b32 	%r472, %f625;
	mov.b32 	%r471, %f103;
	mov.b32 	%r475, %f622;
	mov.b32 	%r474, %f102;
	// begin inline asm
	cvt.rn.f16x2.f32 %r470, %r472, %r471;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r473, %r475, %r474;
	// end inline asm
	mov.b32 	%r517, %f165;
	mov.b32 	%r518, %f167;
	// begin inline asm
	cvt.rn.f16x2.f32 %r516, %r518, %r517;
	// end inline asm
	mov.b32 	%r520, %f779;
	mov.b32 	%r521, %f781;
	// begin inline asm
	cvt.rn.f16x2.f32 %r519, %r521, %r520;
	// end inline asm
	mul.lo.s32 	%r534, %r156, 24;
	shl.b32 	%r535, %r4, 1;
	and.b32  	%r536, %r535, 2;
	shr.u32 	%r183, %r302, 3;
	and.b32  	%r537, %r183, 2;
	or.b32  	%r184, %r64, %r537;
	cvt.u16.u32 	%rs25, %r184;
	mul.lo.s16 	%rs26, %rs25, 171;
	shr.u16 	%rs27, %rs26, 9;
	mul.lo.s16 	%rs28, %rs27, 3;
	sub.s16 	%rs29, %rs25, %rs28;
	cvt.u32.u16 	%r538, %rs29;
	and.b32  	%r539, %r538, 255;
	and.b16  	%rs30, %rs29, 255;
	mul.wide.u16 	%r540, %rs30, 8;
	bfe.u32 	%r541, %r302, 3, 1;
	or.b32  	%r542, %r536, %r541;
	add.s32 	%r543, %r534, %r2;
	or.b32  	%r544, %r543, %r542;
	add.s32 	%r545, %r544, %r540;
	mul.wide.u32 	%rd61, %r545, 4;
	add.s64 	%rd62, %rd2, %rd61;
	ld.global.u32 	%r185, [%rd62];
	or.b32  	%r546, %r2, %r541;
	or.b32  	%r547, %r546, %r536;
	cvt.u64.u32 	%rd63, %r540;
	cvt.u64.u32 	%rd64, %r534;
	cvt.u64.u32 	%rd65, %r547;
	add.s64 	%rd66, %rd65, %rd64;
	add.s64 	%rd67, %rd66, %rd63;
	shl.b64 	%rd68, %rd67, 2;
	add.s64 	%rd69, %rd2, %rd68;
	ld.global.u32 	%r186, [%rd69+16];
	cvt.u64.u32 	%rd70, %r542;
	cvt.u64.u32 	%rd71, %r2;
	add.s64 	%rd72, %rd71, %rd64;
	add.s64 	%rd73, %rd72, %rd70;
	add.s64 	%rd74, %rd73, %rd63;
	shl.b64 	%rd75, %rd74, 2;
	add.s64 	%rd76, %rd2, %rd75;
	ld.global.u32 	%r187, [%rd76+384];
	cvt.u64.u32 	%rd77, %r536;
	cvt.u64.u32 	%rd78, %r541;
	add.s64 	%rd79, %rd71, %rd78;
	add.s64 	%rd80, %rd79, %rd77;
	add.s64 	%rd81, %rd80, %rd64;
	add.s64 	%rd82, %rd81, %rd63;
	shl.b64 	%rd83, %rd82, 2;
	add.s64 	%rd84, %rd2, %rd83;
	ld.global.u32 	%r188, [%rd84+400];
	shl.b32 	%r548, %r293, 16;
	shl.b32 	%r549, %r297, 5;
	add.s32 	%r189, %r549, %r548;
	shl.b32 	%r550, %r302, 2;
	shl.b32 	%r551, %r1, 5;
	shl.b32 	%r190, %r4, 2;
	and.b32  	%r552, %r550, 28;
	or.b32  	%r191, %r552, %r551;
	and.b32  	%r192, %r302, 4;
	bfe.s32 	%r553, %r302, 2, 1;
	and.b32  	%r554, %r169, 8;
	shl.b32 	%r555, %r302, 4;
	or.b32  	%r556, %r554, %r555;
	bfe.u32 	%r557, %r556, 3, 3;
	mul.lo.s32 	%r193, %r557, 260;
	cvt.u16.u32 	%rs31, %r302;
	and.b16  	%rs32, %rs31, 255;
	mul.lo.s16 	%rs33, %rs32, 171;
	shr.u16 	%rs34, %rs33, 12;
	mul.lo.s16 	%rs35, %rs34, 24;
	sub.s16 	%rs36, %rs31, %rs35;
	cvt.u32.u16 	%r558, %rs36;
	and.b32  	%r194, %r558, 255;
	add.s32 	%r559, %r4, 6;
	shr.u32 	%r560, %r559, 3;
	add.s32 	%r561, %r5, 192;
	and.b32  	%r562, %r561, 224;
	mad.lo.s32 	%r195, %r560, 260, %r562;
	add.s32 	%r563, %r4, 12;
	shr.u32 	%r564, %r563, 3;
	add.s32 	%r565, %r5, 128;
	and.b32  	%r566, %r565, 224;
	mad.lo.s32 	%r196, %r564, 260, %r566;
	add.s32 	%r567, %r4, 18;
	shr.u32 	%r568, %r567, 3;
	add.s32 	%r569, %r5, 64;
	and.b32  	%r570, %r569, 224;
	mad.lo.s32 	%r197, %r568, 260, %r570;
	or.b32  	%r198, %r5, 780;
	add.s32 	%r571, %r4, 30;
	shr.u32 	%r572, %r571, 3;
	mad.lo.s32 	%r199, %r572, 260, %r562;
	add.s32 	%r573, %r4, 36;
	shr.u32 	%r574, %r573, 3;
	mad.lo.s32 	%r200, %r574, 260, %r566;
	add.s32 	%r575, %r4, 42;
	shr.u32 	%r576, %r575, 3;
	mad.lo.s32 	%r201, %r576, 260, %r570;
	or.b32  	%r202, %r5, 1560;
	add.s32 	%r577, %r4, 54;
	shr.u32 	%r578, %r577, 3;
	mad.lo.s32 	%r203, %r578, 260, %r562;
	add.s32 	%r579, %r4, 60;
	bfe.u32 	%r580, %r579, 3, 3;
	mad.lo.s32 	%r204, %r580, 260, %r566;
	mul.lo.s32 	%r581, %r156, 870;
	shr.u32 	%r582, %r4, 1;
	cvt.u16.u32 	%rs37, %r582;
	and.b16  	%rs38, %rs37, 255;
	mul.lo.s16 	%rs39, %rs38, 171;
	shr.u16 	%rs40, %rs39, 9;
	mul.lo.s16 	%rs41, %rs40, 3;
	sub.s16 	%rs42, %rs37, %rs41;
	cvt.u32.u16 	%r583, %rs42;
	and.b32  	%r205, %r583, 255;
	mad.lo.s32 	%r584, %r542, 33, %r581;
	mad.lo.s32 	%r206, %r539, 290, %r584;
	add.s32 	%r207, %r206, 132;
	setp.lt.u32 	%p243, %r302, 4;
	setp.eq.s32 	%p244, %r157, 1;
	setp.eq.s32 	%p245, %r157, 4;
	setp.eq.s32 	%p246, %r157, 5;
	setp.eq.s32 	%p247, %r65, 0;
	selp.b32 	%r585, 0, 784, %p247;
	bfe.s32 	%r586, %r302, 3, 1;
	and.b32  	%r587, %r586, 98;
	or.b32  	%r208, %r536, %r66;
	selp.b32 	%r209, 0, 392, %p134;
	and.b32  	%r210, %r553, 196;
	or.b32  	%r211, %r587, %r585;
	add.s32 	%r588, %r211, %r208;
	add.s32 	%r589, %r588, %r209;
	add.s32 	%r212, %r589, %r210;
	add.s32 	%r590, %r211, 1576;
	add.s32 	%r591, %r590, %r208;
	add.s32 	%r592, %r591, %r209;
	add.s32 	%r213, %r592, %r210;
	or.b32  	%r593, %r208, 4;
	add.s32 	%r594, %r211, %r593;
	add.s32 	%r595, %r594, %r209;
	add.s32 	%r214, %r595, %r210;
	add.s32 	%r596, %r590, %r593;
	add.s32 	%r597, %r596, %r209;
	add.s32 	%r215, %r597, %r210;
	add.s32 	%r598, %r211, 1584;
	add.s32 	%r599, %r598, %r208;
	add.s32 	%r600, %r599, %r209;
	add.s32 	%r216, %r600, %r210;
	add.s32 	%r217, %r214, 8;
	add.s32 	%r601, %r598, %r593;
	add.s32 	%r602, %r601, %r209;
	add.s32 	%r218, %r602, %r210;
	mul.lo.s32 	%r603, %r66, 784;
	and.b32  	%r604, %r169, 6;
	shr.u32 	%r605, %r4, 2;
	and.b32  	%r606, %r4, 1;
	neg.s32 	%r607, %r606;
	and.b32  	%r608, %r607, 392;
	bfe.s32 	%r609, %r4, 1, 1;
	and.b32  	%r610, %r609, 196;
	and.b32  	%r611, %r586, 1576;
	or.b32  	%r612, %r604, %r603;
	mad.lo.s32 	%r613, %r605, 98, %r612;
	or.b32  	%r614, %r613, %r64;
	add.s32 	%r615, %r614, %r608;
	add.s32 	%r616, %r615, %r610;
	add.s32 	%r219, %r616, %r611;
	add.s32 	%r220, %r219, 8;
	mul.lo.s32 	%r617, %r295, 786432;
	mad.lo.s32 	%r618, %r299, 192, %r617;
	or.b32  	%r619, %r190, %r183;
	cvt.u16.u32 	%rs43, %r619;
	and.b16  	%rs44, %rs43, 255;
	mul.lo.s16 	%rs45, %rs44, 171;
	shr.u16 	%rs46, %rs45, 9;
	and.b16  	%rs47, %rs46, 24;
	add.s16 	%rs48, %rs43, %rs47;
	shl.b16 	%rs49, %rs48, 3;
	cvt.u32.u16 	%r620, %rs49;
	and.b32  	%r621, %r620, 248;
	and.b32  	%r622, %r302, 7;
	or.b32  	%r623, %r622, %r2;
	add.s32 	%r221, %r623, %r621;
	cvt.s64.s32 	%rd23, %r618;
	add.s32 	%r624, %r206, %r205;
	mul.wide.u32 	%rd85, %r624, 4;
	mov.u64 	%rd86, shmem;
	add.s64 	%rd24, %rd86, %rd85;
	add.s32 	%r625, %r207, %r205;
	mul.wide.u32 	%rd87, %r625, 4;
	add.s64 	%rd25, %rd86, %rd87;
	cvt.u64.u32 	%rd88, %r206;
	cvt.u64.u16 	%rd89, %rs42;
	and.b64  	%rd90, %rd89, 255;
	add.s64 	%rd91, %rd88, %rd90;
	shl.b64 	%rd92, %rd91, 2;
	add.s64 	%rd26, %rd86, %rd92;
	cvt.u64.u32 	%rd93, %r207;
	add.s64 	%rd94, %rd93, %rd90;
	shl.b64 	%rd95, %rd94, 2;
	add.s64 	%rd27, %rd86, %rd95;
	or.pred  	%p248, %p243, %p244;
	and.b32  	%r626, %r302, 24;
	setp.eq.s32 	%p249, %r626, 8;
	or.pred  	%p250, %p248, %p249;
	or.pred  	%p251, %p250, %p245;
	setp.eq.s32 	%p252, %r626, 24;
	or.pred  	%p253, %p246, %p252;
	selp.b32 	%r222, 1145324612, -286331154, %p250;
	or.pred  	%p1, %p251, %p253;
	selp.b32 	%r223, 1145324612, -286331154, %p248;
	add.s32 	%r627, %r157, -1;
	setp.lt.u32 	%p254, %r627, 3;
	or.pred  	%p2, %p243, %p254;
	setp.eq.s32 	%p255, %r626, 16;
	or.pred  	%p3, %p255, %p252;
	selp.b32 	%r224, 1145324612, -286331154, %p255;
	and.b16  	%rs8, %rs42, 255;
	add.s32 	%r225, %r221, 1572864;
	or.b16  	%rs9, %rs8, 24;
	mov.u32 	%r88, 0;
	mov.u16 	%rs2, 0;
	mov.u16 	%rs1, 29;
	selp.b32 	%r132, %r223, %r224, %p2;
	or.pred  	%p287, %p2, %p3;
	mov.u32 	%r110, %r88;
	bra.uni 	$L__BB0_198;
$L__BB0_169:                            // %L40748
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r155, %r88, 48;
	add.s16 	%rs2, %rs2, 48;
	add.s16 	%rs1, %rs1, 48;
	setp.ne.s32 	%p307, %r88, 432;
	mov.u32 	%r88, %r155;
	@%p307 bra 	$L__BB0_198;
	bra.uni 	$L__BB0_170;
$L__BB0_198:                            // %L1929
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_163 Depth 2
                                        //     Child Loop BB0_167 Depth 2
	add.s32 	%r628, %r88, %r293;
	setp.lt.s32 	%p256, %r628, %r294;
	@%p256 bra 	$L__BB0_199;
	bra.uni 	$L__BB0_170;
$L__BB0_199:                            // %oksrem905
                                        //   in Loop: Header=BB0_198 Depth=1
	setp.eq.s32 	%p257, %r192, 0;
	mul.hi.u32 	%r725, %r88, -1431655765;
	shr.u32 	%r726, %r725, 5;
	mul.lo.s32 	%r226, %r726, 48;
	add.s32 	%r727, %r226, %r190;
	or.b32  	%r728, %r727, %r183;
	shr.s32 	%r729, %r727, 31;
	shr.u32 	%r730, %r729, 23;
	add.s32 	%r731, %r728, %r730;
	and.b32  	%r732, %r731, 65024;
	sub.s32 	%r733, %r728, %r732;
	shl.b32 	%r734, %r733, 16;
	or.b32  	%r735, %r734, %r191;
	add.s32 	%r736, %r189, %r735;
	shr.s32 	%r737, %r736, 31;
	shr.u32 	%r738, %r737, 7;
	add.s32 	%r739, %r736, %r738;
	shr.s32 	%r740, %r739, 25;
	setp.lt.s32 	%p258, %r736, 0;
	and.b32  	%r741, %r739, -33554432;
	setp.ne.s32 	%p259, %r741, %r736;
	and.pred  	%p260, %p258, %p259;
	selp.u32 	%r742, 1, 0, %p260;
	sub.s32 	%r743, %r742, %r740;
	shl.b32 	%r744, %r743, 25;
	add.s32 	%r745, %r744, %r736;
	mul.wide.s32 	%rd96, %r745, 4;
	add.s64 	%rd97, %rd3, %rd96;
	ld.global.v4.u32 	{%r746, %r747, %r748, %r749}, [%rd97];
	add.s32 	%r750, %r728, 24;
	shr.s32 	%r751, %r750, 31;
	shr.u32 	%r752, %r751, 23;
	add.s32 	%r753, %r750, %r752;
	and.b32  	%r754, %r753, 65024;
	sub.s32 	%r755, %r750, %r754;
	shl.b32 	%r756, %r755, 16;
	or.b32  	%r757, %r756, %r191;
	add.s32 	%r758, %r189, %r757;
	shr.s32 	%r759, %r758, 31;
	shr.u32 	%r760, %r759, 7;
	add.s32 	%r761, %r758, %r760;
	shr.s32 	%r762, %r761, 25;
	setp.lt.s32 	%p261, %r758, 0;
	and.b32  	%r763, %r761, -33554432;
	setp.ne.s32 	%p262, %r763, %r758;
	and.pred  	%p263, %p261, %p262;
	selp.u32 	%r764, 1, 0, %p263;
	sub.s32 	%r765, %r764, %r762;
	shl.b32 	%r766, %r765, 25;
	add.s32 	%r767, %r766, %r758;
	mul.wide.s32 	%rd98, %r767, 4;
	add.s64 	%rd99, %rd3, %rd98;
	ld.global.v4.u32 	{%r768, %r769, %r770, %r771}, [%rd99];
	selp.b32 	%r772, %r748, %r746, %p257;
	shfl.sync.bfly.b32	%r773, %r772, 4, 31, -1;
	selp.b32 	%r631, %r746, %r773, %p257;
	selp.b32 	%r636, %r773, %r748, %p257;
	selp.b32 	%r774, %r749, %r747, %p257;
	shfl.sync.bfly.b32	%r775, %r774, 4, 31, -1;
	selp.b32 	%r639, %r747, %r775, %p257;
	selp.b32 	%r644, %r775, %r749, %p257;
	selp.b32 	%r776, %r770, %r768, %p257;
	shfl.sync.bfly.b32	%r777, %r776, 4, 31, -1;
	selp.b32 	%r647, %r768, %r777, %p257;
	selp.b32 	%r652, %r777, %r770, %p257;
	selp.b32 	%r778, %r771, %r769, %p257;
	shfl.sync.bfly.b32	%r779, %r778, 4, 31, -1;
	selp.b32 	%r655, %r769, %r779, %p257;
	selp.b32 	%r660, %r779, %r771, %p257;
	shl.b32 	%r632, %r636, 4;
	mov.u32 	%r630, 252645135;
	// begin inline asm
	lop3.b32 %r662, %r630, %r631, %r632, 202;
	// end inline asm
	shr.u32 	%r635, %r631, 4;
	// begin inline asm
	lop3.b32 %r678, %r630, %r635, %r636, 202;
	// end inline asm
	shl.b32 	%r640, %r644, 4;
	// begin inline asm
	lop3.b32 %r670, %r630, %r639, %r640, 202;
	// end inline asm
	shr.u32 	%r643, %r639, 4;
	// begin inline asm
	lop3.b32 %r686, %r630, %r643, %r644, 202;
	// end inline asm
	shl.b32 	%r648, %r652, 4;
	// begin inline asm
	lop3.b32 %r663, %r630, %r647, %r648, 202;
	// end inline asm
	shr.u32 	%r651, %r647, 4;
	// begin inline asm
	lop3.b32 %r679, %r630, %r651, %r652, 202;
	// end inline asm
	shl.b32 	%r656, %r660, 4;
	// begin inline asm
	lop3.b32 %r671, %r630, %r655, %r656, 202;
	// end inline asm
	shr.u32 	%r659, %r655, 4;
	// begin inline asm
	lop3.b32 %r687, %r630, %r659, %r660, 202;
	// end inline asm
	mov.u32 	%r664, 25152;
	// begin inline asm
	prmt.b32 %r694, %r662, %r663, %r664;
	// end inline asm
	mov.u32 	%r668, 29521;
	// begin inline asm
	prmt.b32 %r710, %r662, %r663, %r668;
	// end inline asm
	// begin inline asm
	prmt.b32 %r702, %r670, %r671, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r718, %r670, %r671, %r668;
	// end inline asm
	// begin inline asm
	prmt.b32 %r695, %r678, %r679, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r711, %r678, %r679, %r668;
	// end inline asm
	// begin inline asm
	prmt.b32 %r703, %r686, %r687, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r719, %r686, %r687, %r668;
	// end inline asm
	mov.u32 	%r720, 21520;
	// begin inline asm
	prmt.b32 %r693, %r694, %r695, %r720;
	// end inline asm
	mov.u32 	%r724, 30258;
	// begin inline asm
	prmt.b32 %r697, %r694, %r695, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r701, %r702, %r703, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r705, %r702, %r703, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r709, %r710, %r711, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r713, %r710, %r711, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r717, %r718, %r719, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r721, %r718, %r719, %r724;
	// end inline asm
	mul.hi.s32 	%r780, %r728, 715827883;
	shr.u32 	%r781, %r780, 31;
	shr.s32 	%r782, %r780, 2;
	add.s32 	%r783, %r782, %r781;
	mul.lo.s32 	%r784, %r783, 24;
	sub.s32 	%r785, %r728, %r784;
	add.s32 	%r786, %r785, %r193;
	mul.wide.s32 	%rd100, %r786, 4;
	add.s64 	%rd102, %rd86, %rd100;
	st.shared.u32 	[%rd102], %r693;
	add.s32 	%r787, %r786, 128;
	mul.wide.u32 	%rd103, %r787, 4;
	add.s64 	%rd104, %rd86, %rd103;
	st.shared.u32 	[%rd104], %r701;
	add.s32 	%r788, %r786, 64;
	mul.wide.u32 	%rd105, %r788, 4;
	add.s64 	%rd106, %rd86, %rd105;
	st.shared.u32 	[%rd106], %r697;
	add.s32 	%r789, %r786, 192;
	mul.wide.u32 	%rd107, %r789, 4;
	add.s64 	%rd108, %rd86, %rd107;
	st.shared.u32 	[%rd108], %r705;
	add.s32 	%r790, %r786, 32;
	mul.wide.u32 	%rd109, %r790, 4;
	add.s64 	%rd110, %rd86, %rd109;
	st.shared.u32 	[%rd110], %r709;
	add.s32 	%r791, %r786, 160;
	mul.wide.u32 	%rd111, %r791, 4;
	add.s64 	%rd112, %rd86, %rd111;
	st.shared.u32 	[%rd112], %r717;
	add.s32 	%r792, %r786, 96;
	mul.wide.u32 	%rd113, %r792, 4;
	add.s64 	%rd114, %rd86, %rd113;
	st.shared.u32 	[%rd114], %r713;
	add.s32 	%r793, %r786, 224;
	mul.wide.u32 	%rd115, %r793, 4;
	add.s64 	%rd116, %rd86, %rd115;
	st.shared.u32 	[%rd116], %r721;
	bar.sync 	0;
	add.s32 	%r794, %r226, %r194;
	cvt.u16.u32 	%rs50, %r794;
	mul.hi.s16 	%rs51, %rs50, 10923;
	shr.u16 	%rs52, %rs51, 15;
	shr.s16 	%rs53, %rs51, 2;
	add.s16 	%rs54, %rs53, %rs52;
	mul.lo.s16 	%rs55, %rs54, 24;
	sub.s16 	%rs56, %rs50, %rs55;
	cvt.s32.s16 	%r227, %rs56;
	add.s32 	%r795, %r5, %r227;
	mul.wide.s32 	%rd117, %r795, 4;
	add.s64 	%rd118, %rd86, %rd117;
	ld.shared.u32 	%r228, [%rd118];
	add.s32 	%r796, %r195, %r227;
	mul.wide.s32 	%rd119, %r796, 4;
	add.s64 	%rd120, %rd86, %rd119;
	ld.shared.u32 	%r229, [%rd120];
	add.s32 	%r797, %r196, %r227;
	mul.wide.u32 	%rd121, %r797, 4;
	add.s64 	%rd122, %rd86, %rd121;
	ld.shared.u32 	%r230, [%rd122];
	add.s32 	%r798, %r197, %r227;
	mul.wide.u32 	%rd123, %r798, 4;
	add.s64 	%rd124, %rd86, %rd123;
	ld.shared.u32 	%r231, [%rd124];
	add.s32 	%r799, %r198, %r227;
	mul.wide.u32 	%rd125, %r799, 4;
	add.s64 	%rd126, %rd86, %rd125;
	ld.shared.u32 	%r232, [%rd126];
	add.s32 	%r800, %r199, %r227;
	mul.wide.u32 	%rd127, %r800, 4;
	add.s64 	%rd128, %rd86, %rd127;
	ld.shared.u32 	%r233, [%rd128];
	add.s32 	%r801, %r200, %r227;
	mul.wide.u32 	%rd129, %r801, 4;
	add.s64 	%rd130, %rd86, %rd129;
	ld.shared.u32 	%r234, [%rd130];
	add.s32 	%r802, %r201, %r227;
	mul.wide.u32 	%rd131, %r802, 4;
	add.s64 	%rd132, %rd86, %rd131;
	ld.shared.u32 	%r235, [%rd132];
	add.s32 	%r803, %r202, %r227;
	mul.wide.u32 	%rd133, %r803, 4;
	add.s64 	%rd134, %rd86, %rd133;
	ld.shared.u32 	%r236, [%rd134];
	add.s32 	%r804, %r203, %r227;
	mul.wide.u32 	%rd135, %r804, 4;
	add.s64 	%rd136, %rd86, %rd135;
	ld.shared.u32 	%r237, [%rd136];
	add.s32 	%r805, %r204, %r227;
	mul.wide.s32 	%rd137, %r805, 4;
	add.s64 	%rd138, %rd86, %rd137;
	ld.shared.u32 	%r238, [%rd138];
	bar.sync 	0;
	shfl.sync.idx.b32	%r239, %r182, 0, 31, -1;
	shfl.sync.idx.b32	%r240, %r182, 1, 31, -1;
	shfl.sync.idx.b32	%r241, %r182, 2, 31, -1;
	shfl.sync.idx.b32	%r242, %r182, 3, 31, -1;
	shfl.sync.idx.b32	%r243, %r182, 4, 31, -1;
	shfl.sync.idx.b32	%r244, %r182, 5, 31, -1;
	shfl.sync.idx.b32	%r245, %r182, 6, 31, -1;
	shfl.sync.idx.b32	%r246, %r182, 7, 31, -1;
	shfl.sync.idx.b32	%r247, %r182, 8, 31, -1;
	shfl.sync.idx.b32	%r248, %r182, 9, 31, -1;
	shfl.sync.idx.b32	%r249, %r182, 10, 31, -1;
	shfl.sync.idx.b32	%r250, %r182, 11, 31, -1;
	shfl.sync.idx.b32	%r251, %r182, 12, 31, -1;
	shfl.sync.idx.b32	%r252, %r182, 13, 31, -1;
	shfl.sync.idx.b32	%r253, %r182, 14, 31, -1;
	shfl.sync.idx.b32	%r254, %r182, 15, 31, -1;
	setp.eq.s32 	%p264, %r239, 999999999;
	@%p264 bra 	$L__BB0_146;
// %bb.200:                             // %oksrem2309
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r806, %r239, %r227;
	mul.wide.s32 	%rd139, %r806, 4;
	add.s64 	%rd141, %rd86, %rd139;
	st.shared.u32 	[%rd141], %r228;
	setp.eq.s32 	%p265, %r240, 999999999;
	@%p265 bra 	$L__BB0_147;
// %bb.201:                             // %oksrem2377
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r807, %r240, %r227;
	mul.wide.s32 	%rd142, %r807, 4;
	add.s64 	%rd144, %rd86, %rd142;
	st.shared.u32 	[%rd144], %r229;
	setp.eq.s32 	%p266, %r241, 999999999;
	@%p266 bra 	$L__BB0_148;
// %bb.202:                             // %oksrem2445
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r808, %r241, %r227;
	mul.wide.s32 	%rd145, %r808, 4;
	add.s64 	%rd147, %rd86, %rd145;
	st.shared.u32 	[%rd147], %r230;
	setp.eq.s32 	%p267, %r242, 999999999;
	@%p267 bra 	$L__BB0_149;
// %bb.203:                             // %oksrem2513
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r809, %r242, %r227;
	mul.wide.s32 	%rd148, %r809, 4;
	add.s64 	%rd150, %rd86, %rd148;
	st.shared.u32 	[%rd150], %r231;
	setp.eq.s32 	%p268, %r243, 999999999;
	@%p268 bra 	$L__BB0_150;
// %bb.204:                             // %oksrem2581
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r810, %r243, %r227;
	mul.wide.s32 	%rd151, %r810, 4;
	add.s64 	%rd153, %rd86, %rd151;
	st.shared.u32 	[%rd153], %r232;
	setp.eq.s32 	%p269, %r244, 999999999;
	@%p269 bra 	$L__BB0_151;
// %bb.205:                             // %oksrem2649
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r811, %r244, %r227;
	mul.wide.s32 	%rd154, %r811, 4;
	add.s64 	%rd156, %rd86, %rd154;
	st.shared.u32 	[%rd156], %r233;
	setp.eq.s32 	%p270, %r245, 999999999;
	@%p270 bra 	$L__BB0_152;
// %bb.206:                             // %oksrem2717
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r812, %r245, %r227;
	mul.wide.s32 	%rd157, %r812, 4;
	add.s64 	%rd159, %rd86, %rd157;
	st.shared.u32 	[%rd159], %r234;
	setp.eq.s32 	%p271, %r246, 999999999;
	@%p271 bra 	$L__BB0_153;
// %bb.207:                             // %oksrem2785
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r813, %r246, %r227;
	mul.wide.s32 	%rd160, %r813, 4;
	add.s64 	%rd162, %rd86, %rd160;
	st.shared.u32 	[%rd162], %r235;
	setp.eq.s32 	%p272, %r247, 999999999;
	@%p272 bra 	$L__BB0_154;
// %bb.208:                             // %oksrem2853
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r814, %r247, %r227;
	mul.wide.s32 	%rd163, %r814, 4;
	add.s64 	%rd165, %rd86, %rd163;
	st.shared.u32 	[%rd165], %r236;
	setp.eq.s32 	%p273, %r248, 999999999;
	@%p273 bra 	$L__BB0_155;
// %bb.209:                             // %oksrem2921
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r815, %r248, %r227;
	mul.wide.s32 	%rd166, %r815, 4;
	add.s64 	%rd168, %rd86, %rd166;
	st.shared.u32 	[%rd168], %r237;
	setp.eq.s32 	%p274, %r249, 999999999;
	@%p274 bra 	$L__BB0_156;
// %bb.210:                             // %oksrem2990
                                        //   in Loop: Header=BB0_198 Depth=1
	setp.gt.u32 	%p275, %r4, 3;
	selp.b32 	%r816, 0, %r238, %p275;
	add.s32 	%r817, %r249, %r227;
	mul.wide.s32 	%rd169, %r817, 4;
	add.s64 	%rd171, %rd86, %rd169;
	st.shared.u32 	[%rd171], %r816;
	setp.eq.s32 	%p276, %r250, 999999999;
	@%p276 bra 	$L__BB0_157;
// %bb.211:                             // %oksrem3058
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r818, %r250, %r227;
	mul.wide.s32 	%rd172, %r818, 4;
	add.s64 	%rd174, %rd86, %rd172;
	mov.u32 	%r819, 0;
	st.shared.u32 	[%rd174], %r819;
	setp.eq.s32 	%p277, %r251, 999999999;
	@%p277 bra 	$L__BB0_158;
// %bb.212:                             // %oksrem3125
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r820, %r251, %r227;
	mul.wide.s32 	%rd175, %r820, 4;
	add.s64 	%rd177, %rd86, %rd175;
	st.shared.u32 	[%rd177], %r819;
	setp.eq.s32 	%p278, %r252, 999999999;
	@%p278 bra 	$L__BB0_159;
// %bb.213:                             // %oksrem3192
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r822, %r252, %r227;
	mul.wide.s32 	%rd178, %r822, 4;
	add.s64 	%rd180, %rd86, %rd178;
	st.shared.u32 	[%rd180], %r819;
	setp.eq.s32 	%p279, %r253, 999999999;
	@%p279 bra 	$L__BB0_160;
// %bb.214:                             // %oksrem3259
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r824, %r253, %r227;
	mul.wide.s32 	%rd181, %r824, 4;
	add.s64 	%rd183, %rd86, %rd181;
	st.shared.u32 	[%rd183], %r819;
	setp.eq.s32 	%p280, %r254, 999999999;
	@%p280 bra 	$L__BB0_161;
// %bb.215:                             // %oksrem3326
                                        //   in Loop: Header=BB0_198 Depth=1
	setp.eq.s32 	%p281, %r184, 3;
	add.s32 	%r827, %r254, %r227;
	mul.wide.s32 	%rd184, %r827, 4;
	add.s64 	%rd186, %rd86, %rd184;
	st.shared.u32 	[%rd186], %r819;
	bar.sync 	0;
	mov.u32 	%r90, %r819;
	mov.u32 	%r91, %r819;
	mov.u32 	%r92, %r819;
	mov.u32 	%r93, %r819;
	mov.u32 	%r94, %r819;
	mov.u32 	%r95, %r819;
	mov.u32 	%r96, %r819;
	mov.u32 	%r97, %r819;
	mov.u32 	%r98, %r819;
	mov.u32 	%r99, %r819;
	mov.u32 	%r100, %r819;
	mov.u32 	%r101, %r819;
	mov.u32 	%r102, %r819;
	mov.u32 	%r103, %r819;
	mov.u32 	%r104, %r819;
	mov.u32 	%r105, %r819;
	@%p281 bra 	$L__BB0_162;
// %bb.216:                             // %oksrem3375
                                        //   in Loop: Header=BB0_198 Depth=1
	add.s32 	%r255, %r226, %r205;
	ld.shared.u32 	%r90, [%rd24];
	ld.shared.u32 	%r91, [%rd25];
	ld.shared.u32 	%r92, [%rd26+12];
	ld.shared.u32 	%r93, [%rd27+12];
	ld.shared.u32 	%r94, [%rd26+24];
	ld.shared.u32 	%r95, [%rd27+24];
	ld.shared.u32 	%r96, [%rd26+36];
	ld.shared.u32 	%r97, [%rd27+36];
	add.s32 	%r828, %r255, 12;
	mul.hi.u32 	%r829, %r828, -1431655765;
	shr.u32 	%r830, %r829, 4;
	mul.lo.s32 	%r831, %r830, 24;
	sub.s32 	%r832, %r828, %r831;
	add.s32 	%r833, %r206, %r832;
	mul.wide.u32 	%rd187, %r833, 4;
	add.s64 	%rd189, %rd86, %rd187;
	ld.shared.u32 	%r98, [%rd189];
	add.s32 	%r834, %r207, %r832;
	mul.wide.u32 	%rd190, %r834, 4;
	add.s64 	%rd191, %rd86, %rd190;
	ld.shared.u32 	%r99, [%rd191];
	ld.shared.u32 	%r100, [%rd26+60];
	ld.shared.u32 	%r101, [%rd27+60];
	cvt.u16.u32 	%rs57, %r255;
	add.s16 	%rs58, %rs57, 18;
	mul.hi.s16 	%rs59, %rs58, 10923;
	shr.u16 	%rs60, %rs59, 15;
	shr.s16 	%rs61, %rs59, 2;
	add.s16 	%rs62, %rs61, %rs60;
	mul.lo.s16 	%rs63, %rs62, 24;
	sub.s16 	%rs64, %rs58, %rs63;
	cvt.s32.s16 	%r835, %rs64;
	add.s32 	%r836, %r206, %r835;
	mul.wide.s32 	%rd192, %r836, 4;
	add.s64 	%rd193, %rd86, %rd192;
	ld.shared.u32 	%r102, [%rd193];
	add.s32 	%r837, %r207, %r835;
	mul.wide.u32 	%rd194, %r837, 4;
	add.s64 	%rd195, %rd86, %rd194;
	ld.shared.u32 	%r103, [%rd195];
	add.s16 	%rs65, %rs57, 21;
	mul.hi.s16 	%rs66, %rs65, 10923;
	shr.u16 	%rs67, %rs66, 15;
	shr.s16 	%rs68, %rs66, 2;
	add.s16 	%rs69, %rs68, %rs67;
	mul.lo.s16 	%rs70, %rs69, 24;
	sub.s16 	%rs71, %rs65, %rs70;
	cvt.s32.s16 	%r838, %rs71;
	add.s32 	%r839, %r206, %r838;
	mul.wide.s32 	%rd196, %r839, 4;
	add.s64 	%rd197, %rd86, %rd196;
	ld.shared.u32 	%r104, [%rd197];
	add.s32 	%r840, %r207, %r838;
	mul.wide.u32 	%rd198, %r840, 4;
	add.s64 	%rd199, %rd86, %rd198;
	ld.shared.u32 	%r105, [%rd199];
$L__BB0_162:                            // %L10556
                                        //   in Loop: Header=BB0_198 Depth=1
	bar.sync 	0;
	mul.lo.s32 	%r842, %r110, 786432;
	add.s32 	%r109, %r221, %r842;
	add.s32 	%r3085, %r225, %r842;
	mov.u16 	%rs3, %rs2;
	mov.u32 	%r111, %r819;
$L__BB0_163:                            // %L10574
                                        //   Parent Loop BB0_198 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	mov.u32 	%r3089, %r3085;
	setp.eq.s32 	%p282, %r111, 0;
	selp.b32 	%r1235, %r90, 0, %p282;
	setp.eq.s32 	%p283, %r111, 6;
	selp.b32 	%r1236, %r94, %r1235, %p283;
	setp.eq.s32 	%p284, %r111, 12;
	selp.b32 	%r1237, %r98, %r1236, %p284;
	setp.eq.s32 	%p285, %r111, 18;
	selp.b32 	%r1238, %r102, %r1237, %p285;
	selp.b32 	%r1239, %r91, 0, %p282;
	selp.b32 	%r1240, %r95, %r1239, %p283;
	selp.b32 	%r1241, %r99, %r1240, %p284;
	selp.b32 	%r1242, %r103, %r1241, %p285;
	selp.b32 	%r1243, %r92, 0, %p282;
	selp.b32 	%r1244, %r96, %r1243, %p283;
	selp.b32 	%r1245, %r100, %r1244, %p284;
	selp.b32 	%r1246, %r104, %r1245, %p285;
	selp.b32 	%r1247, %r93, 0, %p282;
	selp.b32 	%r1248, %r97, %r1247, %p283;
	selp.b32 	%r1249, %r101, %r1248, %p284;
	selp.b32 	%r1250, %r105, %r1249, %p285;
	mov.u16 	%rs109, 25600;
	// begin inline asm
	mov.b32 %r848, {%rs109, %rs109};
	// end inline asm
	mov.u16 	%rs111, 21504;
	// begin inline asm
	mov.b32 %r859, {%rs111, %rs111};
	// end inline asm
	xor.b32  	%r847, %r1238, -2004318072;
	mov.u32 	%r984, 983055;
	// begin inline asm
	lop3.b32 %r845, %r984, %r847, %r848, 202;
	// end inline asm
	mov.u16 	%rs115, 18432;
	// begin inline asm
	mov.b32 %r849, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r850, %r848, %r849;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r853, %r845, %r850;
	// end inline asm
	mov.u32 	%r995, 15728880;
	// begin inline asm
	lop3.b32 %r856, %r995, %r847, %r859, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r860, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r861, %r859, %r860;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r864, %r856, %r861;
	// end inline asm
	// begin inline asm
	mov.b32 %r894, {%rs109, %rs109};
	// end inline asm
	// begin inline asm
	mov.b32 %r905, {%rs111, %rs111};
	// end inline asm
	xor.b32  	%r893, %r1242, -2004318072;
	// begin inline asm
	lop3.b32 %r891, %r984, %r893, %r894, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r895, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r896, %r894, %r895;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r899, %r891, %r896;
	// end inline asm
	// begin inline asm
	lop3.b32 %r902, %r995, %r893, %r905, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r906, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r907, %r905, %r906;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r910, %r902, %r907;
	// end inline asm
	// begin inline asm
	mov.b32 %r940, {%rs109, %rs109};
	// end inline asm
	// begin inline asm
	mov.b32 %r951, {%rs111, %rs111};
	// end inline asm
	xor.b32  	%r939, %r1246, -2004318072;
	// begin inline asm
	lop3.b32 %r937, %r984, %r939, %r940, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r941, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r942, %r940, %r941;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r945, %r937, %r942;
	// end inline asm
	// begin inline asm
	lop3.b32 %r948, %r995, %r939, %r951, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r952, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r953, %r951, %r952;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r956, %r948, %r953;
	// end inline asm
	// begin inline asm
	mov.b32 %r986, {%rs109, %rs109};
	// end inline asm
	// begin inline asm
	mov.b32 %r997, {%rs111, %rs111};
	// end inline asm
	xor.b32  	%r985, %r1250, -2004318072;
	// begin inline asm
	lop3.b32 %r983, %r984, %r985, %r986, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r987, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r988, %r986, %r987;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r991, %r983, %r988;
	// end inline asm
	// begin inline asm
	lop3.b32 %r994, %r995, %r985, %r997, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r998, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r999, %r997, %r998;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1002, %r994, %r999;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r185;
    mov.b32 {%r2re, %r2im}, %r853;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1027, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r186;
    mov.b32 {%r2re, %r2im}, %r899;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1030, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r187;
    mov.b32 {%r2re, %r2im}, %r864;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1033, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r188;
    mov.b32 {%r2re, %r2im}, %r910;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1036, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r185;
    mov.b32 {%r2re, %r2im}, %r945;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1039, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r186;
    mov.b32 {%r2re, %r2im}, %r991;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1042, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r187;
    mov.b32 {%r2re, %r2im}, %r956;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1045, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r188;
    mov.b32 {%r2re, %r2im}, %r1002;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1048, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1051, %r1052}, {%r324, %r327}, {%r1027}, {%r819, %r819};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1058, %r1059}, {%r324, %r327}, {%r1030}, {%r819, %r819};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1065, %r1066}, {%r324, %r327}, {%r1033}, {%r819, %r819};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1072, %r1073}, {%r324, %r327}, {%r1036}, {%r819, %r819};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1079, %r1080}, {%r324, %r327}, {%r1039}, {%r819, %r819};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1086, %r1087}, {%r324, %r327}, {%r1042}, {%r819, %r819};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1093, %r1094}, {%r324, %r327}, {%r1045}, {%r819, %r819};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1100, %r1101}, {%r324, %r327}, {%r1048}, {%r819, %r819};
	// end inline asm
	@%p1 bra 	$L__BB0_217;
	bra.uni 	$L__BB0_164;
$L__BB0_217:                            // %pass4742
                                        //   in Loop: Header=BB0_163 Depth=2
	// begin inline asm
	neg.f16x2 %r1107, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1109, %r1107, %r1052;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1112, %r376, %r1051, %r1109;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1116, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1118, %r1116, %r1059;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1121, %r376, %r1058, %r1118;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1125, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1127, %r1125, %r1066;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1130, %r376, %r1065, %r1127;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1134, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1136, %r1134, %r1073;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1139, %r376, %r1072, %r1136;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1143, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1145, %r1143, %r1080;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1148, %r376, %r1079, %r1145;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1152, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1154, %r1152, %r1087;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1157, %r376, %r1086, %r1154;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1161, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1163, %r1161, %r1094;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1166, %r376, %r1093, %r1163;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1170, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1172, %r1170, %r1101;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1175, %r376, %r1100, %r1172;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1179, %r379, %r1051;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1182, %r376, %r1052, %r1179;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1186, %r379, %r1058;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1189, %r376, %r1059, %r1186;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1193, %r379, %r1065;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1196, %r376, %r1066, %r1193;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1200, %r379, %r1072;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1203, %r376, %r1073, %r1200;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1207, %r379, %r1079;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1210, %r376, %r1080, %r1207;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1214, %r379, %r1086;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1217, %r376, %r1087, %r1214;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1221, %r379, %r1093;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1224, %r376, %r1094, %r1221;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1228, %r379, %r1100;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1231, %r376, %r1101, %r1228;
	// end inline asm
	setp.gt.u32 	%p286, %r302, 11;
	mov.u32 	%r1321, 0;
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1324, %r1325}, {%r420, %r423}, {%r1112, %r1182}, {%r1321, %r1321}, %r222, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1332, %r1333}, {%r420, %r423}, {%r1121, %r1189}, {%r1321, %r1321}, %r222, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1340, %r1341}, {%r420, %r423}, {%r1130, %r1196}, {%r1321, %r1321}, %r222, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1348, %r1349}, {%r420, %r423}, {%r1139, %r1203}, {%r1321, %r1321}, %r222, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1356, %r1357}, {%r420, %r423}, {%r1148, %r1210}, {%r1321, %r1321}, %r222, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1364, %r1365}, {%r420, %r423}, {%r1157, %r1217}, {%r1321, %r1321}, %r222, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1372, %r1373}, {%r420, %r423}, {%r1166, %r1224}, {%r1321, %r1321}, %r222, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1380, %r1381}, {%r420, %r423}, {%r1175, %r1231}, {%r1321, %r1321}, %r222, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r272, %r1324, %r1325, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r273, %r1324, %r1325, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r274, %r1332, %r1333, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r275, %r1332, %r1333, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r276, %r1340, %r1341, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r277, %r1340, %r1341, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r278, %r1348, %r1349, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r279, %r1348, %r1349, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r280, %r1356, %r1357, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r281, %r1356, %r1357, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r282, %r1364, %r1365, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r283, %r1364, %r1365, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r284, %r1372, %r1373, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r285, %r1372, %r1373, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r286, %r1380, %r1381, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r287, %r1380, %r1381, %r724;
	// end inline asm
	add.s16 	%rs120, %rs8, %rs3;
	mul.hi.s16 	%rs121, %rs120, 10923;
	shr.u16 	%rs122, %rs121, 15;
	add.s16 	%rs123, %rs121, %rs122;
	mul.lo.s16 	%rs124, %rs123, 6;
	sub.s16 	%rs125, %rs120, %rs124;
	mul.wide.s16 	%r1387, %rs125, 16;
	add.s32 	%r1388, %r212, %r1387;
	mul.wide.s32 	%rd202, %r1388, 4;
	add.s64 	%rd28, %rd86, %rd202;
	st.shared.u32 	[%rd28], %r272;
	add.s32 	%r1389, %r213, %r1387;
	mul.wide.u32 	%rd204, %r1389, 4;
	add.s64 	%rd29, %rd86, %rd204;
	st.shared.u32 	[%rd29], %r273;
	add.s32 	%r1390, %r214, %r1387;
	mul.wide.s32 	%rd205, %r1390, 4;
	add.s64 	%rd30, %rd86, %rd205;
	st.shared.u32 	[%rd30], %r274;
	add.s32 	%r1391, %r215, %r1387;
	mul.wide.u32 	%rd206, %r1391, 4;
	add.s64 	%rd31, %rd86, %rd206;
	st.shared.u32 	[%rd31], %r275;
	cvt.s64.s32 	%rd207, %r1387;
	cvt.u64.u32 	%rd208, %r210;
	cvt.u64.u32 	%rd209, %r209;
	cvt.u64.u32 	%rd210, %r208;
	cvt.u64.u32 	%rd211, %r211;
	add.s64 	%rd212, %rd211, %rd210;
	add.s64 	%rd213, %rd212, %rd209;
	add.s64 	%rd32, %rd213, %rd208;
	add.s64 	%rd214, %rd32, %rd207;
	shl.b64 	%rd215, %rd214, 2;
	add.s64 	%rd33, %rd86, %rd215;
	st.shared.u32 	[%rd33+32], %r276;
	add.s32 	%r1392, %r216, %r1387;
	mul.wide.u32 	%rd216, %r1392, 4;
	add.s64 	%rd34, %rd86, %rd216;
	st.shared.u32 	[%rd34], %r277;
	add.s32 	%r1393, %r217, %r1387;
	mul.wide.s32 	%rd217, %r1393, 4;
	add.s64 	%rd35, %rd86, %rd217;
	st.shared.u32 	[%rd35], %r278;
	add.s32 	%r1394, %r218, %r1387;
	mul.wide.u32 	%rd218, %r1394, 4;
	add.s64 	%rd36, %rd86, %rd218;
	st.shared.u32 	[%rd36], %r279;
	add.s16 	%rs126, %rs120, 3;
	mul.hi.s16 	%rs127, %rs126, 10923;
	shr.u16 	%rs128, %rs127, 15;
	add.s16 	%rs129, %rs127, %rs128;
	mul.lo.s16 	%rs130, %rs129, 6;
	sub.s16 	%rs131, %rs126, %rs130;
	mul.wide.s16 	%r1395, %rs131, 16;
	add.s32 	%r1396, %r212, %r1395;
	mul.wide.s32 	%rd219, %r1396, 4;
	add.s64 	%rd37, %rd86, %rd219;
	st.shared.u32 	[%rd37], %r280;
	add.s32 	%r1397, %r213, %r1395;
	mul.wide.u32 	%rd220, %r1397, 4;
	add.s64 	%rd38, %rd86, %rd220;
	st.shared.u32 	[%rd38], %r281;
	add.s32 	%r1398, %r214, %r1395;
	mul.wide.s32 	%rd221, %r1398, 4;
	add.s64 	%rd39, %rd86, %rd221;
	st.shared.u32 	[%rd39], %r282;
	add.s32 	%r1399, %r215, %r1395;
	mul.wide.u32 	%rd222, %r1399, 4;
	add.s64 	%rd40, %rd86, %rd222;
	st.shared.u32 	[%rd40], %r283;
	cvt.s64.s32 	%rd223, %r1395;
	add.s64 	%rd224, %rd32, %rd223;
	shl.b64 	%rd225, %rd224, 2;
	add.s64 	%rd41, %rd86, %rd225;
	st.shared.u32 	[%rd41+32], %r284;
	add.s32 	%r1400, %r216, %r1395;
	mul.wide.u32 	%rd226, %r1400, 4;
	add.s64 	%rd42, %rd86, %rd226;
	st.shared.u32 	[%rd42], %r285;
	add.s32 	%r1401, %r217, %r1395;
	mul.wide.s32 	%rd227, %r1401, 4;
	add.s64 	%rd43, %rd86, %rd227;
	st.shared.u32 	[%rd43], %r286;
	add.s32 	%r1402, %r218, %r1395;
	mul.wide.u32 	%rd228, %r1402, 4;
	add.s64 	%rd44, %rd86, %rd228;
	st.shared.u32 	[%rd44], %r287;
	@%p286 bra 	$L__BB0_219;
// %bb.218:                             // %oksrem7035
                                        //   in Loop: Header=BB0_163 Depth=2
	st.shared.u32 	[%rd28], %r272;
	st.shared.u32 	[%rd29], %r273;
	st.shared.u32 	[%rd30], %r274;
	st.shared.u32 	[%rd31], %r275;
	st.shared.u32 	[%rd33+32], %r276;
	st.shared.u32 	[%rd34], %r277;
	st.shared.u32 	[%rd35], %r278;
	st.shared.u32 	[%rd36], %r279;
	st.shared.u32 	[%rd37], %r280;
	st.shared.u32 	[%rd38], %r281;
	st.shared.u32 	[%rd39], %r282;
	st.shared.u32 	[%rd40], %r283;
	st.shared.u32 	[%rd41+32], %r284;
	st.shared.u32 	[%rd42], %r285;
	st.shared.u32 	[%rd43], %r286;
	st.shared.u32 	[%rd44], %r287;
$L__BB0_219:                            // %L19961
                                        //   in Loop: Header=BB0_163 Depth=2
	bar.sync 	0;
	mul.hi.s16 	%rs132, %rs3, 10923;
	shr.u16 	%rs133, %rs132, 15;
	add.s16 	%rs134, %rs132, %rs133;
	mul.lo.s16 	%rs135, %rs134, 6;
	sub.s16 	%rs136, %rs3, %rs135;
	mul.wide.s16 	%r1449, %rs136, 16;
	add.s32 	%r1450, %r219, %r1449;
	mul.wide.s32 	%rd229, %r1450, 4;
	add.s64 	%rd231, %rd86, %rd229;
	ld.shared.u32 	%r1407, [%rd231];
	add.s32 	%r1451, %r220, %r1449;
	mul.wide.s32 	%rd232, %r1451, 4;
	add.s64 	%rd233, %rd86, %rd232;
	ld.shared.u32 	%r1414, [%rd233];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1403, %r1404}, {%r432, %r435}, {%r1407}, {%r1321, %r1321};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1410, %r1411}, {%r432, %r435}, {%r1414}, {%r1321, %r1321};
	// end inline asm
	@%p287 bra 	$L__BB0_165;
	bra.uni 	$L__BB0_220;
$L__BB0_165:                            // %pass9511
                                        //   in Loop: Header=BB0_163 Depth=2
	// begin inline asm
	neg.f16x2 %r1417, %r473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1419, %r1417, %r1404;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1422, %r470, %r1403, %r1419;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1426, %r473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1428, %r1426, %r1411;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1431, %r470, %r1410, %r1428;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1435, %r473, %r1403;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1438, %r470, %r1404, %r1435;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1442, %r473, %r1410;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1445, %r470, %r1411, %r1442;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1471, %r1474}, {%r516, %r519}, {%r1422, %r1438}, {%r1321, %r1321}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1478, %r1482}, {%r516, %r519}, {%r1431, %r1445}, {%r1321, %r1321}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1470, %r1471, %r1471;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1473, %r1474, %r1474, %r1470;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1477, %r1478, %r1478, %r1473;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1481, %r1482, %r1482, %r1477;
	// end inline asm
	mov.u32 	%r1901, 693446997;
	// begin inline asm
	fma.rn.f16x2 %r1485, %r1901, %r1481, %r1321;
	// end inline asm
	add.s32 	%r1904, %r88, %r111;
	add.s32 	%r1905, %r1904, 1;
	mul.hi.u32 	%r1906, %r1905, -1431655765;
	shr.u32 	%r1907, %r1906, 2;
	mul.lo.s32 	%r1908, %r1907, 6;
	sub.s32 	%r1909, %r1905, %r1908;
	shl.b32 	%r1910, %r1909, 4;
	add.s32 	%r1911, %r219, %r1910;
	mul.wide.u32 	%rd236, %r1911, 4;
	add.s64 	%rd238, %rd86, %rd236;
	ld.shared.u32 	%r1493, [%rd238];
	add.s32 	%r1912, %r220, %r1910;
	mul.wide.u32 	%rd239, %r1912, 4;
	add.s64 	%rd240, %rd86, %rd239;
	ld.shared.u32 	%r1500, [%rd240];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1510, %r1507}, {%r432, %r435}, {%r1493}, {%r1321, %r1321};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1519, %r1516}, {%r432, %r435}, {%r1500}, {%r1321, %r1321};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1503, %r473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1505, %r1503, %r1507;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1508, %r470, %r1510, %r1505;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1512, %r473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1514, %r1512, %r1516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1517, %r470, %r1519, %r1514;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1521, %r473, %r1510;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1524, %r470, %r1507, %r1521;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1528, %r473, %r1519;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1531, %r470, %r1516, %r1528;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1554, %r1557}, {%r516, %r519}, {%r1508, %r1524}, {%r1321, %r1321}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1561, %r1565}, {%r516, %r519}, {%r1517, %r1531}, {%r1321, %r1321}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1553, %r1554, %r1554;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1556, %r1557, %r1557, %r1553;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1560, %r1561, %r1561, %r1556;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1564, %r1565, %r1565, %r1560;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1568, %r1901, %r1564, %r1485;
	// end inline asm
	add.s32 	%r1913, %r1904, 2;
	mul.hi.u32 	%r1914, %r1913, -1431655765;
	shr.u32 	%r1915, %r1914, 2;
	mul.lo.s32 	%r1916, %r1915, 6;
	sub.s32 	%r1917, %r1913, %r1916;
	shl.b32 	%r1918, %r1917, 4;
	add.s32 	%r1919, %r219, %r1918;
	mul.wide.u32 	%rd241, %r1919, 4;
	add.s64 	%rd242, %rd86, %rd241;
	ld.shared.u32 	%r1576, [%rd242];
	add.s32 	%r1920, %r220, %r1918;
	mul.wide.u32 	%rd243, %r1920, 4;
	add.s64 	%rd244, %rd86, %rd243;
	ld.shared.u32 	%r1583, [%rd244];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1593, %r1590}, {%r432, %r435}, {%r1576}, {%r1321, %r1321};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1602, %r1599}, {%r432, %r435}, {%r1583}, {%r1321, %r1321};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1586, %r473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1588, %r1586, %r1590;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1591, %r470, %r1593, %r1588;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1595, %r473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1597, %r1595, %r1599;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1600, %r470, %r1602, %r1597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1604, %r473, %r1593;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1607, %r470, %r1590, %r1604;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1611, %r473, %r1602;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1614, %r470, %r1599, %r1611;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1637, %r1640}, {%r516, %r519}, {%r1591, %r1607}, {%r1321, %r1321}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1644, %r1648}, {%r516, %r519}, {%r1600, %r1614}, {%r1321, %r1321}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1636, %r1637, %r1637;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1639, %r1640, %r1640, %r1636;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1643, %r1644, %r1644, %r1639;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1647, %r1648, %r1648, %r1643;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1651, %r1901, %r1647, %r1568;
	// end inline asm
	cvt.u64.u32 	%rd245, %r109;
	add.s64 	%rd246, %rd245, %rd23;
	mul.hi.s64 	%rd247, %rd246, 3074457345618258603;
	shr.u64 	%rd248, %rd247, 63;
	shr.s64 	%rd249, %rd247, 27;
	add.s64 	%rd250, %rd249, %rd248;
	setp.lt.s64 	%p288, %rd246, 0;
	mul.lo.s64 	%rd251, %rd250, 805306368;
	setp.ne.s64 	%p289, %rd251, %rd246;
	and.pred  	%p290, %p288, %p289;
	selp.s64 	%rd252, -1, 0, %p290;
	add.s64 	%rd253, %rd250, %rd252;
	mul.lo.s64 	%rd254, %rd253, -805306368;
	add.s64 	%rd255, %rd254, %rd246;
	shl.b64 	%rd256, %rd255, 2;
	add.s64 	%rd257, %rd4, %rd256;
	st.global.u32 	[%rd257], %r1651;
	add.s32 	%r1921, %r110, 1;
	add.s32 	%r1922, %r1904, 3;
	mul.hi.u32 	%r1923, %r1922, -1431655765;
	shr.u32 	%r1924, %r1923, 2;
	mul.lo.s32 	%r1925, %r1924, 6;
	sub.s32 	%r1926, %r1922, %r1925;
	shl.b32 	%r1927, %r1926, 4;
	add.s32 	%r1928, %r219, %r1927;
	mul.wide.u32 	%rd258, %r1928, 4;
	add.s64 	%rd259, %rd86, %rd258;
	ld.shared.u32 	%r1659, [%rd259];
	add.s32 	%r1929, %r220, %r1927;
	mul.wide.u32 	%rd260, %r1929, 4;
	add.s64 	%rd261, %rd86, %rd260;
	ld.shared.u32 	%r1666, [%rd261];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1676, %r1673}, {%r432, %r435}, {%r1659}, {%r1321, %r1321};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1685, %r1682}, {%r432, %r435}, {%r1666}, {%r1321, %r1321};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1669, %r473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1671, %r1669, %r1673;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1674, %r470, %r1676, %r1671;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1678, %r473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1680, %r1678, %r1682;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1683, %r470, %r1685, %r1680;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1687, %r473, %r1676;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1690, %r470, %r1673, %r1687;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1694, %r473, %r1685;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1697, %r470, %r1682, %r1694;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1720, %r1723}, {%r516, %r519}, {%r1674, %r1690}, {%r1321, %r1321}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1727, %r1731}, {%r516, %r519}, {%r1683, %r1697}, {%r1321, %r1321}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1719, %r1720, %r1720;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1722, %r1723, %r1723, %r1719;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1726, %r1727, %r1727, %r1722;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1730, %r1731, %r1731, %r1726;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1734, %r1901, %r1730, %r1321;
	// end inline asm
	add.s32 	%r1930, %r1904, 4;
	mul.hi.u32 	%r1931, %r1930, -1431655765;
	shr.u32 	%r1932, %r1931, 2;
	mul.lo.s32 	%r1933, %r1932, 6;
	sub.s32 	%r1934, %r1930, %r1933;
	shl.b32 	%r1935, %r1934, 4;
	add.s32 	%r1936, %r219, %r1935;
	mul.wide.u32 	%rd262, %r1936, 4;
	add.s64 	%rd263, %rd86, %rd262;
	ld.shared.u32 	%r1742, [%rd263];
	add.s32 	%r1937, %r220, %r1935;
	mul.wide.u32 	%rd264, %r1937, 4;
	add.s64 	%rd265, %rd86, %rd264;
	ld.shared.u32 	%r1749, [%rd265];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1759, %r1756}, {%r432, %r435}, {%r1742}, {%r1321, %r1321};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1768, %r1765}, {%r432, %r435}, {%r1749}, {%r1321, %r1321};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1752, %r473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1754, %r1752, %r1756;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1757, %r470, %r1759, %r1754;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1761, %r473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1763, %r1761, %r1765;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1766, %r470, %r1768, %r1763;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1770, %r473, %r1759;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1773, %r470, %r1756, %r1770;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1777, %r473, %r1768;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1780, %r470, %r1765, %r1777;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1803, %r1806}, {%r516, %r519}, {%r1757, %r1773}, {%r1321, %r1321}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1810, %r1814}, {%r516, %r519}, {%r1766, %r1780}, {%r1321, %r1321}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1802, %r1803, %r1803;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1805, %r1806, %r1806, %r1802;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1809, %r1810, %r1810, %r1805;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1813, %r1814, %r1814, %r1809;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1817, %r1901, %r1813, %r1734;
	// end inline asm
	add.s32 	%r1938, %r1904, 5;
	mul.hi.u32 	%r1939, %r1938, -1431655765;
	shr.u32 	%r1940, %r1939, 2;
	mul.lo.s32 	%r1941, %r1940, 6;
	sub.s32 	%r1942, %r1938, %r1941;
	shl.b32 	%r1943, %r1942, 4;
	add.s32 	%r1944, %r219, %r1943;
	mul.wide.u32 	%rd266, %r1944, 4;
	add.s64 	%rd267, %rd86, %rd266;
	ld.shared.u32 	%r1825, [%rd267];
	add.s32 	%r1945, %r220, %r1943;
	mul.wide.u32 	%rd268, %r1945, 4;
	add.s64 	%rd269, %rd86, %rd268;
	ld.shared.u32 	%r1832, [%rd269];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1842, %r1839}, {%r432, %r435}, {%r1825}, {%r1321, %r1321};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1851, %r1848}, {%r432, %r435}, {%r1832}, {%r1321, %r1321};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1835, %r473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1837, %r1835, %r1839;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1840, %r470, %r1842, %r1837;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1844, %r473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1846, %r1844, %r1848;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1849, %r470, %r1851, %r1846;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1853, %r473, %r1842;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1856, %r470, %r1839, %r1853;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1860, %r473, %r1851;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1863, %r470, %r1848, %r1860;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1886, %r1889}, {%r516, %r519}, {%r1840, %r1856}, {%r1321, %r1321}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1893, %r1897}, {%r516, %r519}, {%r1849, %r1863}, {%r1321, %r1321}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1885, %r1886, %r1886;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1888, %r1889, %r1889, %r1885;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1892, %r1893, %r1893, %r1888;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1896, %r1897, %r1897, %r1892;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1900, %r1901, %r1896, %r1817;
	// end inline asm
	and.b32  	%r1946, %r1921, 1023;
	mad.lo.s32 	%r1947, %r1946, 786432, %r221;
	cvt.u64.u32 	%rd270, %r1947;
	add.s64 	%rd271, %rd270, %rd23;
	mul.hi.s64 	%rd272, %rd271, 3074457345618258603;
	shr.u64 	%rd273, %rd272, 63;
	shr.s64 	%rd274, %rd272, 27;
	add.s64 	%rd275, %rd274, %rd273;
	setp.lt.s64 	%p291, %rd271, 0;
	mul.lo.s64 	%rd276, %rd275, 805306368;
	setp.ne.s64 	%p292, %rd276, %rd271;
	and.pred  	%p293, %p291, %p292;
	selp.s64 	%rd277, -1, 0, %p293;
	add.s64 	%rd278, %rd275, %rd277;
	mul.lo.s64 	%rd279, %rd278, -805306368;
	add.s64 	%rd280, %rd279, %rd271;
	shl.b64 	%rd281, %rd280, 2;
	add.s64 	%rd282, %rd4, %rd281;
	st.global.u32 	[%rd282], %r1900;
	add.s32 	%r110, %r110, 2;
	bar.sync 	0;
	add.s32 	%r111, %r111, 6;
	add.s32 	%r109, %r109, 1572864;
	add.s16 	%rs3, %rs3, 6;
	setp.eq.s32 	%p294, %r111, 24;
	add.s32 	%r3085, %r3089, 1572864;
	@%p294 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_163;
$L__BB0_166:                            // %L25662.preheader
                                        //   in Loop: Header=BB0_198 Depth=1
	mov.u16 	%rs237, %rs1;
	mov.u32 	%r3091, %r1321;
	bra.uni 	$L__BB0_167;
$L__BB0_168:                            // %L35049
                                        //   in Loop: Header=BB0_167 Depth=2
	bar.sync 	0;
	add.s16 	%rs199, %rs237, -5;
	mul.hi.s16 	%rs200, %rs199, 10923;
	shr.u16 	%rs201, %rs200, 15;
	add.s16 	%rs202, %rs200, %rs201;
	mul.lo.s16 	%rs203, %rs202, 6;
	sub.s16 	%rs204, %rs199, %rs203;
	mul.wide.s16 	%r3011, %rs204, 16;
	add.s32 	%r3012, %r219, %r3011;
	mul.wide.s32 	%rd304, %r3012, 4;
	add.s64 	%rd306, %rd86, %rd304;
	ld.shared.u32 	%r2517, [%rd306];
	add.s32 	%r3013, %r220, %r3011;
	mul.wide.s32 	%rd307, %r3013, 4;
	add.s64 	%rd308, %rd86, %rd307;
	ld.shared.u32 	%r2524, [%rd308];
	mov.u32 	%r2518, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2534, %r2531}, {%r432, %r435}, {%r2517}, {%r2518, %r2518};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2543, %r2540}, {%r432, %r435}, {%r2524}, {%r2518, %r2518};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2527, %r473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2529, %r2527, %r2531;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2532, %r470, %r2534, %r2529;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2536, %r473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2538, %r2536, %r2540;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2541, %r470, %r2543, %r2538;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2545, %r473, %r2534;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2548, %r470, %r2531, %r2545;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2552, %r473, %r2543;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2555, %r470, %r2540, %r2552;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2578, %r2581}, {%r516, %r519}, {%r2532, %r2548}, {%r2518, %r2518}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2585, %r2589}, {%r516, %r519}, {%r2541, %r2555}, {%r2518, %r2518}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2577, %r2578, %r2578;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2580, %r2581, %r2581, %r2577;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2584, %r2585, %r2585, %r2580;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2588, %r2589, %r2589, %r2584;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2592, %r1901, %r2588, %r2518;
	// end inline asm
	add.s16 	%rs205, %rs237, -4;
	mul.hi.s16 	%rs206, %rs205, 10923;
	shr.u16 	%rs207, %rs206, 15;
	add.s16 	%rs208, %rs206, %rs207;
	mul.lo.s16 	%rs209, %rs208, 6;
	sub.s16 	%rs210, %rs205, %rs209;
	mul.wide.s16 	%r3014, %rs210, 16;
	add.s32 	%r3015, %r219, %r3014;
	mul.wide.s32 	%rd309, %r3015, 4;
	add.s64 	%rd310, %rd86, %rd309;
	ld.shared.u32 	%r2600, [%rd310];
	add.s32 	%r3016, %r220, %r3014;
	mul.wide.s32 	%rd311, %r3016, 4;
	add.s64 	%rd312, %rd86, %rd311;
	ld.shared.u32 	%r2607, [%rd312];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2617, %r2614}, {%r432, %r435}, {%r2600}, {%r2518, %r2518};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2626, %r2623}, {%r432, %r435}, {%r2607}, {%r2518, %r2518};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2610, %r473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2612, %r2610, %r2614;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2615, %r470, %r2617, %r2612;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2619, %r473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2621, %r2619, %r2623;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2624, %r470, %r2626, %r2621;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2628, %r473, %r2617;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2631, %r470, %r2614, %r2628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2635, %r473, %r2626;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2638, %r470, %r2623, %r2635;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2661, %r2664}, {%r516, %r519}, {%r2615, %r2631}, {%r2518, %r2518}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2668, %r2672}, {%r516, %r519}, {%r2624, %r2638}, {%r2518, %r2518}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2660, %r2661, %r2661;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2663, %r2664, %r2664, %r2660;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2667, %r2668, %r2668, %r2663;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2671, %r2672, %r2672, %r2667;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2675, %r1901, %r2671, %r2592;
	// end inline asm
	add.s16 	%rs211, %rs237, -3;
	mul.hi.s16 	%rs212, %rs211, 10923;
	shr.u16 	%rs213, %rs212, 15;
	add.s16 	%rs214, %rs212, %rs213;
	mul.lo.s16 	%rs215, %rs214, 6;
	sub.s16 	%rs216, %rs211, %rs215;
	mul.wide.s16 	%r3017, %rs216, 16;
	add.s32 	%r3018, %r219, %r3017;
	mul.wide.s32 	%rd313, %r3018, 4;
	add.s64 	%rd314, %rd86, %rd313;
	ld.shared.u32 	%r2683, [%rd314];
	add.s32 	%r3019, %r220, %r3017;
	mul.wide.s32 	%rd315, %r3019, 4;
	add.s64 	%rd316, %rd86, %rd315;
	ld.shared.u32 	%r2690, [%rd316];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2700, %r2697}, {%r432, %r435}, {%r2683}, {%r2518, %r2518};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2709, %r2706}, {%r432, %r435}, {%r2690}, {%r2518, %r2518};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2693, %r473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2695, %r2693, %r2697;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2698, %r470, %r2700, %r2695;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2702, %r473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2704, %r2702, %r2706;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2707, %r470, %r2709, %r2704;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2711, %r473, %r2700;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2714, %r470, %r2697, %r2711;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2718, %r473, %r2709;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2721, %r470, %r2706, %r2718;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2744, %r2747}, {%r516, %r519}, {%r2698, %r2714}, {%r2518, %r2518}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2751, %r2755}, {%r516, %r519}, {%r2707, %r2721}, {%r2518, %r2518}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2743, %r2744, %r2744;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2746, %r2747, %r2747, %r2743;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2750, %r2751, %r2751, %r2746;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2754, %r2755, %r2755, %r2750;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2758, %r1901, %r2754, %r2675;
	// end inline asm
	cvt.u64.u32 	%rd317, %r3089;
	add.s64 	%rd318, %rd317, %rd23;
	mul.hi.s64 	%rd319, %rd318, 3074457345618258603;
	shr.u64 	%rd320, %rd319, 63;
	shr.s64 	%rd321, %rd319, 27;
	add.s64 	%rd322, %rd321, %rd320;
	setp.lt.s64 	%p300, %rd318, 0;
	mul.lo.s64 	%rd323, %rd322, 805306368;
	setp.ne.s64 	%p301, %rd323, %rd318;
	and.pred  	%p302, %p300, %p301;
	selp.s64 	%rd324, -1, 0, %p302;
	add.s64 	%rd325, %rd322, %rd324;
	mul.lo.s64 	%rd326, %rd325, -805306368;
	add.s64 	%rd327, %rd326, %rd318;
	shl.b64 	%rd328, %rd327, 2;
	add.s64 	%rd329, %rd4, %rd328;
	st.global.u32 	[%rd329], %r2758;
	add.s32 	%r3020, %r110, 1;
	add.s16 	%rs217, %rs237, -2;
	mul.hi.s16 	%rs218, %rs217, 10923;
	shr.u16 	%rs219, %rs218, 15;
	add.s16 	%rs220, %rs218, %rs219;
	mul.lo.s16 	%rs221, %rs220, 6;
	sub.s16 	%rs222, %rs217, %rs221;
	mul.wide.s16 	%r3021, %rs222, 16;
	add.s32 	%r3022, %r219, %r3021;
	mul.wide.s32 	%rd330, %r3022, 4;
	add.s64 	%rd331, %rd86, %rd330;
	ld.shared.u32 	%r2766, [%rd331];
	add.s32 	%r3023, %r220, %r3021;
	mul.wide.s32 	%rd332, %r3023, 4;
	add.s64 	%rd333, %rd86, %rd332;
	ld.shared.u32 	%r2773, [%rd333];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2783, %r2780}, {%r432, %r435}, {%r2766}, {%r2518, %r2518};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2792, %r2789}, {%r432, %r435}, {%r2773}, {%r2518, %r2518};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2776, %r473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2778, %r2776, %r2780;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2781, %r470, %r2783, %r2778;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2785, %r473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2787, %r2785, %r2789;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2790, %r470, %r2792, %r2787;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2794, %r473, %r2783;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2797, %r470, %r2780, %r2794;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2801, %r473, %r2792;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2804, %r470, %r2789, %r2801;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2827, %r2830}, {%r516, %r519}, {%r2781, %r2797}, {%r2518, %r2518}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2834, %r2838}, {%r516, %r519}, {%r2790, %r2804}, {%r2518, %r2518}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2826, %r2827, %r2827;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2829, %r2830, %r2830, %r2826;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2833, %r2834, %r2834, %r2829;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2837, %r2838, %r2838, %r2833;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2841, %r1901, %r2837, %r2518;
	// end inline asm
	add.s16 	%rs223, %rs237, -1;
	mul.hi.s16 	%rs224, %rs223, 10923;
	shr.u16 	%rs225, %rs224, 15;
	add.s16 	%rs226, %rs224, %rs225;
	mul.lo.s16 	%rs227, %rs226, 6;
	sub.s16 	%rs228, %rs223, %rs227;
	mul.wide.s16 	%r3024, %rs228, 16;
	add.s32 	%r3025, %r219, %r3024;
	mul.wide.s32 	%rd334, %r3025, 4;
	add.s64 	%rd335, %rd86, %rd334;
	ld.shared.u32 	%r2849, [%rd335];
	add.s32 	%r3026, %r220, %r3024;
	mul.wide.s32 	%rd336, %r3026, 4;
	add.s64 	%rd337, %rd86, %rd336;
	ld.shared.u32 	%r2856, [%rd337];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2866, %r2863}, {%r432, %r435}, {%r2849}, {%r2518, %r2518};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2875, %r2872}, {%r432, %r435}, {%r2856}, {%r2518, %r2518};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2859, %r473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2861, %r2859, %r2863;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2864, %r470, %r2866, %r2861;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2868, %r473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2870, %r2868, %r2872;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2873, %r470, %r2875, %r2870;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2877, %r473, %r2866;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2880, %r470, %r2863, %r2877;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2884, %r473, %r2875;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2887, %r470, %r2872, %r2884;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2910, %r2913}, {%r516, %r519}, {%r2864, %r2880}, {%r2518, %r2518}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2917, %r2921}, {%r516, %r519}, {%r2873, %r2887}, {%r2518, %r2518}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2909, %r2910, %r2910;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2912, %r2913, %r2913, %r2909;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2916, %r2917, %r2917, %r2912;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2920, %r2921, %r2921, %r2916;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2924, %r1901, %r2920, %r2841;
	// end inline asm
	mul.hi.s16 	%rs229, %rs237, 10923;
	shr.u16 	%rs230, %rs229, 15;
	add.s16 	%rs231, %rs229, %rs230;
	mul.lo.s16 	%rs232, %rs231, 6;
	sub.s16 	%rs233, %rs237, %rs232;
	mul.wide.s16 	%r3027, %rs233, 16;
	add.s32 	%r3028, %r219, %r3027;
	mul.wide.s32 	%rd338, %r3028, 4;
	add.s64 	%rd339, %rd86, %rd338;
	ld.shared.u32 	%r2932, [%rd339];
	add.s32 	%r3029, %r220, %r3027;
	mul.wide.s32 	%rd340, %r3029, 4;
	add.s64 	%rd341, %rd86, %rd340;
	ld.shared.u32 	%r2939, [%rd341];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2949, %r2946}, {%r432, %r435}, {%r2932}, {%r2518, %r2518};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2958, %r2955}, {%r432, %r435}, {%r2939}, {%r2518, %r2518};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2942, %r473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2944, %r2942, %r2946;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2947, %r470, %r2949, %r2944;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2951, %r473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2953, %r2951, %r2955;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2956, %r470, %r2958, %r2953;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2960, %r473, %r2949;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2963, %r470, %r2946, %r2960;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2967, %r473, %r2958;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2970, %r470, %r2955, %r2967;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2993, %r2996}, {%r516, %r519}, {%r2947, %r2963}, {%r2518, %r2518}, %r132, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3000, %r3004}, {%r516, %r519}, {%r2956, %r2970}, {%r2518, %r2518}, %r132, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2992, %r2993, %r2993;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2995, %r2996, %r2996, %r2992;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2999, %r3000, %r3000, %r2995;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3003, %r3004, %r3004, %r2999;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3007, %r1901, %r3003, %r2924;
	// end inline asm
	and.b32  	%r3030, %r3020, 1023;
	mad.lo.s32 	%r3031, %r3030, 786432, %r221;
	cvt.u64.u32 	%rd342, %r3031;
	add.s64 	%rd343, %rd342, %rd23;
	mul.hi.s64 	%rd344, %rd343, 3074457345618258603;
	shr.u64 	%rd345, %rd344, 63;
	shr.s64 	%rd346, %rd344, 27;
	add.s64 	%rd347, %rd346, %rd345;
	setp.lt.s64 	%p303, %rd343, 0;
	mul.lo.s64 	%rd348, %rd347, 805306368;
	setp.ne.s64 	%p304, %rd348, %rd343;
	and.pred  	%p305, %p303, %p304;
	selp.s64 	%rd349, -1, 0, %p305;
	add.s64 	%rd350, %rd347, %rd349;
	mul.lo.s64 	%rd351, %rd350, -805306368;
	add.s64 	%rd352, %rd351, %rd343;
	shl.b64 	%rd353, %rd352, 2;
	add.s64 	%rd354, %rd4, %rd353;
	st.global.u32 	[%rd354], %r3007;
	add.s32 	%r110, %r110, 2;
	bar.sync 	0;
	add.s32 	%r3091, %r3091, 6;
	add.s32 	%r3089, %r3089, 1572864;
	add.s16 	%rs237, %rs237, 6;
	setp.ne.s32 	%p306, %r3091, 24;
	@%p306 bra 	$L__BB0_167;
	bra.uni 	$L__BB0_169;
$L__BB0_167:                            // %L25662
                                        //   Parent Loop BB0_198 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.lt.u32 	%p295, %r302, 12;
	setp.eq.s32 	%p296, %r3091, 0;
	selp.b32 	%r2477, %r90, 0, %p296;
	setp.eq.s32 	%p297, %r3091, 6;
	selp.b32 	%r2478, %r94, %r2477, %p297;
	setp.eq.s32 	%p298, %r3091, 12;
	selp.b32 	%r2479, %r98, %r2478, %p298;
	setp.eq.s32 	%p299, %r3091, 18;
	selp.b32 	%r2480, %r102, %r2479, %p299;
	selp.b32 	%r2481, %r91, 0, %p296;
	selp.b32 	%r2482, %r95, %r2481, %p297;
	selp.b32 	%r2483, %r99, %r2482, %p298;
	selp.b32 	%r2484, %r103, %r2483, %p299;
	selp.b32 	%r2485, %r92, 0, %p296;
	selp.b32 	%r2486, %r96, %r2485, %p297;
	selp.b32 	%r2487, %r100, %r2486, %p298;
	selp.b32 	%r2488, %r104, %r2487, %p299;
	selp.b32 	%r2489, %r93, 0, %p296;
	selp.b32 	%r2490, %r97, %r2489, %p297;
	selp.b32 	%r2491, %r101, %r2490, %p298;
	selp.b32 	%r2492, %r105, %r2491, %p299;
	// begin inline asm
	mov.b32 %r1976, {%rs109, %rs109};
	// end inline asm
	// begin inline asm
	mov.b32 %r1987, {%rs111, %rs111};
	// end inline asm
	shr.u32 	%r2493, %r2480, 8;
	xor.b32  	%r1986, %r2493, 8947848;
	// begin inline asm
	lop3.b32 %r1973, %r984, %r1986, %r1976, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1977, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1978, %r1976, %r1977;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1981, %r1973, %r1978;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1984, %r995, %r1986, %r1987, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1988, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1989, %r1987, %r1988;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1992, %r1984, %r1989;
	// end inline asm
	// begin inline asm
	mov.b32 %r2022, {%rs109, %rs109};
	// end inline asm
	// begin inline asm
	mov.b32 %r2033, {%rs111, %rs111};
	// end inline asm
	shr.u32 	%r2494, %r2484, 8;
	xor.b32  	%r2032, %r2494, 8947848;
	// begin inline asm
	lop3.b32 %r2019, %r984, %r2032, %r2022, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2023, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2024, %r2022, %r2023;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2027, %r2019, %r2024;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2030, %r995, %r2032, %r2033, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2034, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2035, %r2033, %r2034;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2038, %r2030, %r2035;
	// end inline asm
	// begin inline asm
	mov.b32 %r2068, {%rs109, %rs109};
	// end inline asm
	// begin inline asm
	mov.b32 %r2079, {%rs111, %rs111};
	// end inline asm
	shr.u32 	%r2495, %r2488, 8;
	xor.b32  	%r2078, %r2495, 8947848;
	// begin inline asm
	lop3.b32 %r2065, %r984, %r2078, %r2068, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2069, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2070, %r2068, %r2069;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2073, %r2065, %r2070;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2076, %r995, %r2078, %r2079, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2080, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2081, %r2079, %r2080;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2084, %r2076, %r2081;
	// end inline asm
	// begin inline asm
	mov.b32 %r2114, {%rs109, %rs109};
	// end inline asm
	// begin inline asm
	mov.b32 %r2125, {%rs111, %rs111};
	// end inline asm
	shr.u32 	%r2496, %r2492, 8;
	xor.b32  	%r2124, %r2496, 8947848;
	// begin inline asm
	lop3.b32 %r2111, %r984, %r2124, %r2114, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2115, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2116, %r2114, %r2115;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2119, %r2111, %r2116;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2122, %r995, %r2124, %r2125, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2126, {%rs115, %rs115};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2127, %r2125, %r2126;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2130, %r2122, %r2127;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r185;
    mov.b32 {%r2re, %r2im}, %r1981;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2133, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r186;
    mov.b32 {%r2re, %r2im}, %r2027;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2136, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r187;
    mov.b32 {%r2re, %r2im}, %r1992;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2139, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r188;
    mov.b32 {%r2re, %r2im}, %r2038;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2142, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r185;
    mov.b32 {%r2re, %r2im}, %r2073;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2145, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r186;
    mov.b32 {%r2re, %r2im}, %r2119;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2148, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r187;
    mov.b32 {%r2re, %r2im}, %r2084;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2151, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r188;
    mov.b32 {%r2re, %r2im}, %r2130;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2154, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2220, %r2217}, {%r324, %r327}, {%r2133}, {%r1321, %r1321};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2229, %r2226}, {%r324, %r327}, {%r2136}, {%r1321, %r1321};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2238, %r2235}, {%r324, %r327}, {%r2139}, {%r1321, %r1321};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2247, %r2244}, {%r324, %r327}, {%r2142}, {%r1321, %r1321};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2256, %r2253}, {%r324, %r327}, {%r2145}, {%r1321, %r1321};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2265, %r2262}, {%r324, %r327}, {%r2148}, {%r1321, %r1321};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2274, %r2271}, {%r324, %r327}, {%r2151}, {%r1321, %r1321};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2283, %r2280}, {%r324, %r327}, {%r2154}, {%r1321, %r1321};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2213, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2215, %r2213, %r2217;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2218, %r376, %r2220, %r2215;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2222, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2224, %r2222, %r2226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2227, %r376, %r2229, %r2224;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2231, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2233, %r2231, %r2235;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2236, %r376, %r2238, %r2233;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2240, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2242, %r2240, %r2244;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2245, %r376, %r2247, %r2242;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2249, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2251, %r2249, %r2253;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2254, %r376, %r2256, %r2251;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2258, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2260, %r2258, %r2262;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2263, %r376, %r2265, %r2260;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2267, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2269, %r2267, %r2271;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2272, %r376, %r2274, %r2269;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2276, %r379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2278, %r2276, %r2280;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2281, %r376, %r2283, %r2278;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2285, %r379, %r2220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2288, %r376, %r2217, %r2285;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2292, %r379, %r2229;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2295, %r376, %r2226, %r2292;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2299, %r379, %r2238;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2302, %r376, %r2235, %r2299;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2306, %r379, %r2247;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2309, %r376, %r2244, %r2306;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2313, %r379, %r2256;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2316, %r376, %r2253, %r2313;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2320, %r379, %r2265;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2323, %r376, %r2262, %r2320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2327, %r379, %r2274;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2330, %r376, %r2271, %r2327;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2334, %r379, %r2283;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2337, %r376, %r2280, %r2334;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2414, %r2415}, {%r420, %r423}, {%r2218, %r2288}, {%r1321, %r1321}, %r222, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2422, %r2423}, {%r420, %r423}, {%r2227, %r2295}, {%r1321, %r1321}, %r222, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2430, %r2431}, {%r420, %r423}, {%r2236, %r2302}, {%r1321, %r1321}, %r222, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2438, %r2439}, {%r420, %r423}, {%r2245, %r2309}, {%r1321, %r1321}, %r222, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2446, %r2447}, {%r420, %r423}, {%r2254, %r2316}, {%r1321, %r1321}, %r222, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2454, %r2455}, {%r420, %r423}, {%r2263, %r2323}, {%r1321, %r1321}, %r222, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2462, %r2463}, {%r420, %r423}, {%r2272, %r2330}, {%r1321, %r1321}, %r222, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2470, %r2471}, {%r420, %r423}, {%r2281, %r2337}, {%r1321, %r1321}, %r222, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2413, %r2414, %r2415, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2417, %r2414, %r2415, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2421, %r2422, %r2423, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2425, %r2422, %r2423, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2429, %r2430, %r2431, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2433, %r2430, %r2431, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2437, %r2438, %r2439, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2441, %r2438, %r2439, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2445, %r2446, %r2447, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2449, %r2446, %r2447, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2453, %r2454, %r2455, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2457, %r2454, %r2455, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2461, %r2462, %r2463, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2465, %r2462, %r2463, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2469, %r2470, %r2471, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2473, %r2470, %r2471, %r724;
	// end inline asm
	add.s16 	%rs185, %rs9, %rs237;
	add.s16 	%rs186, %rs185, -29;
	mul.hi.s16 	%rs187, %rs186, 10923;
	shr.u16 	%rs188, %rs187, 15;
	add.s16 	%rs189, %rs187, %rs188;
	mul.lo.s16 	%rs190, %rs189, 6;
	sub.s16 	%rs191, %rs186, %rs190;
	mul.wide.s16 	%r2497, %rs191, 16;
	add.s32 	%r2498, %r212, %r2497;
	mul.wide.s32 	%rd283, %r2498, 4;
	add.s64 	%rd7, %rd86, %rd283;
	st.shared.u32 	[%rd7], %r2413;
	add.s32 	%r2499, %r213, %r2497;
	mul.wide.u32 	%rd285, %r2499, 4;
	add.s64 	%rd8, %rd86, %rd285;
	st.shared.u32 	[%rd8], %r2417;
	add.s32 	%r2500, %r214, %r2497;
	mul.wide.s32 	%rd286, %r2500, 4;
	add.s64 	%rd9, %rd86, %rd286;
	st.shared.u32 	[%rd9], %r2421;
	add.s32 	%r2501, %r215, %r2497;
	mul.wide.u32 	%rd287, %r2501, 4;
	add.s64 	%rd10, %rd86, %rd287;
	st.shared.u32 	[%rd10], %r2425;
	cvt.s64.s32 	%rd288, %r2497;
	add.s64 	%rd289, %rd32, %rd288;
	shl.b64 	%rd290, %rd289, 2;
	add.s64 	%rd11, %rd86, %rd290;
	st.shared.u32 	[%rd11+32], %r2429;
	add.s32 	%r2502, %r216, %r2497;
	mul.wide.u32 	%rd291, %r2502, 4;
	add.s64 	%rd12, %rd86, %rd291;
	st.shared.u32 	[%rd12], %r2433;
	add.s32 	%r2503, %r217, %r2497;
	mul.wide.s32 	%rd292, %r2503, 4;
	add.s64 	%rd13, %rd86, %rd292;
	st.shared.u32 	[%rd13], %r2437;
	add.s32 	%r2504, %r218, %r2497;
	mul.wide.u32 	%rd293, %r2504, 4;
	add.s64 	%rd14, %rd86, %rd293;
	st.shared.u32 	[%rd14], %r2441;
	add.s16 	%rs192, %rs8, %rs237;
	add.s16 	%rs193, %rs192, -2;
	mul.hi.s16 	%rs194, %rs193, 10923;
	shr.u16 	%rs195, %rs194, 15;
	add.s16 	%rs196, %rs194, %rs195;
	mul.lo.s16 	%rs197, %rs196, 6;
	sub.s16 	%rs198, %rs193, %rs197;
	mul.wide.s16 	%r2505, %rs198, 16;
	add.s32 	%r2506, %r212, %r2505;
	mul.wide.s32 	%rd294, %r2506, 4;
	add.s64 	%rd15, %rd86, %rd294;
	st.shared.u32 	[%rd15], %r2445;
	add.s32 	%r2507, %r213, %r2505;
	mul.wide.u32 	%rd295, %r2507, 4;
	add.s64 	%rd16, %rd86, %rd295;
	st.shared.u32 	[%rd16], %r2449;
	add.s32 	%r2508, %r214, %r2505;
	mul.wide.s32 	%rd296, %r2508, 4;
	add.s64 	%rd17, %rd86, %rd296;
	st.shared.u32 	[%rd17], %r2453;
	add.s32 	%r2509, %r215, %r2505;
	mul.wide.u32 	%rd297, %r2509, 4;
	add.s64 	%rd18, %rd86, %rd297;
	st.shared.u32 	[%rd18], %r2457;
	cvt.s64.s32 	%rd298, %r2505;
	add.s64 	%rd299, %rd32, %rd298;
	shl.b64 	%rd300, %rd299, 2;
	add.s64 	%rd19, %rd86, %rd300;
	st.shared.u32 	[%rd19+32], %r2461;
	add.s32 	%r2510, %r216, %r2505;
	mul.wide.u32 	%rd301, %r2510, 4;
	add.s64 	%rd20, %rd86, %rd301;
	st.shared.u32 	[%rd20], %r2465;
	add.s32 	%r2511, %r217, %r2505;
	mul.wide.s32 	%rd302, %r2511, 4;
	add.s64 	%rd21, %rd86, %rd302;
	st.shared.u32 	[%rd21], %r2469;
	add.s32 	%r2512, %r218, %r2505;
	mul.wide.u32 	%rd303, %r2512, 4;
	add.s64 	%rd22, %rd86, %rd303;
	st.shared.u32 	[%rd22], %r2473;
	@%p295 bra 	$L__BB0_221;
	bra.uni 	$L__BB0_168;
$L__BB0_221:                            // %oksrem14019
                                        //   in Loop: Header=BB0_167 Depth=2
	st.shared.u32 	[%rd7], %r2413;
	st.shared.u32 	[%rd8], %r2417;
	st.shared.u32 	[%rd9], %r2421;
	st.shared.u32 	[%rd10], %r2425;
	st.shared.u32 	[%rd11+32], %r2429;
	st.shared.u32 	[%rd12], %r2433;
	st.shared.u32 	[%rd13], %r2437;
	st.shared.u32 	[%rd14], %r2441;
	st.shared.u32 	[%rd15], %r2445;
	st.shared.u32 	[%rd16], %r2449;
	st.shared.u32 	[%rd17], %r2453;
	st.shared.u32 	[%rd18], %r2457;
	st.shared.u32 	[%rd19+32], %r2461;
	st.shared.u32 	[%rd20], %r2465;
	st.shared.u32 	[%rd21], %r2469;
	st.shared.u32 	[%rd22], %r2473;
	bra.uni 	$L__BB0_168;
$L__BB0_170:                            // %L40760
	mov.u32 	%r3032, 0;
	st.global.u32 	[%rd6], %r3032;
	ret;
$L__BB0_164:                            // %post_box_union
	mov.u64 	%rd200, exception3642;
	cvta.global.u64 	%rd201, %rd200;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd201;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd45;
	st.param.b32 	[param0+8], %r292;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_220:                            // %post_box_union9506
	mov.u64 	%rd234, exception3642;
	cvta.global.u64 	%rd235, %rd234;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd235;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd45;
	st.param.b32 	[param0+8], %r292;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L5125
	mov.u32 	%r3048, 5;
	st.global.u32 	[%rd6], %r3048;
	mov.u64 	%rd385, exception3602;
	cvta.global.u64 	%rd386, %rd385;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd386;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd45;
	st.param.b32 	[param0+8], %r292;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L5281
	mov.u32 	%r3047, 5;
	st.global.u32 	[%rd6], %r3047;
	mov.u64 	%rd383, exception3602;
	cvta.global.u64 	%rd384, %rd383;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd384;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd45;
	st.param.b32 	[param0+8], %r292;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L5437
	mov.u32 	%r3046, 5;
	st.global.u32 	[%rd6], %r3046;
	mov.u64 	%rd381, exception3602;
	cvta.global.u64 	%rd382, %rd381;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd382;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd45;
	st.param.b32 	[param0+8], %r292;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L5593
	mov.u32 	%r3045, 5;
	st.global.u32 	[%rd6], %r3045;
	mov.u64 	%rd379, exception3602;
	cvta.global.u64 	%rd380, %rd379;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd380;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd45;
	st.param.b32 	[param0+8], %r292;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L5749
	mov.u32 	%r3044, 5;
	st.global.u32 	[%rd6], %r3044;
	mov.u64 	%rd377, exception3602;
	cvta.global.u64 	%rd378, %rd377;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd378;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd45;
	st.param.b32 	[param0+8], %r292;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_151:                            // %L5905
	mov.u32 	%r3043, 5;
	st.global.u32 	[%rd6], %r3043;
	mov.u64 	%rd375, exception3602;
	cvta.global.u64 	%rd376, %rd375;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd376;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd45;
	st.param.b32 	[param0+8], %r292;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_152:                            // %L6061
	mov.u32 	%r3042, 5;
	st.global.u32 	[%rd6], %r3042;
	mov.u64 	%rd373, exception3602;
	cvta.global.u64 	%rd374, %rd373;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd374;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd45;
	st.param.b32 	[param0+8], %r292;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_153:                            // %L6217
	mov.u32 	%r3041, 5;
	st.global.u32 	[%rd6], %r3041;
	mov.u64 	%rd371, exception3602;
	cvta.global.u64 	%rd372, %rd371;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd372;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd45;
	st.param.b32 	[param0+8], %r292;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_154:                            // %L6373
	mov.u32 	%r3040, 5;
	st.global.u32 	[%rd6], %r3040;
	mov.u64 	%rd369, exception3602;
	cvta.global.u64 	%rd370, %rd369;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd370;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd45;
	st.param.b32 	[param0+8], %r292;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_155:                            // %L6529
	mov.u32 	%r3039, 5;
	st.global.u32 	[%rd6], %r3039;
	mov.u64 	%rd367, exception3602;
	cvta.global.u64 	%rd368, %rd367;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd368;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd45;
	st.param.b32 	[param0+8], %r292;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_156:                            // %L6711
	mov.u32 	%r3038, 5;
	st.global.u32 	[%rd6], %r3038;
	mov.u64 	%rd365, exception3602;
	cvta.global.u64 	%rd366, %rd365;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd366;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd45;
	st.param.b32 	[param0+8], %r292;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_157:                            // %L6867
	mov.u32 	%r3037, 5;
	st.global.u32 	[%rd6], %r3037;
	mov.u64 	%rd363, exception3602;
	cvta.global.u64 	%rd364, %rd363;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd364;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd45;
	st.param.b32 	[param0+8], %r292;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_158:                            // %L7023
	mov.u32 	%r3036, 5;
	st.global.u32 	[%rd6], %r3036;
	mov.u64 	%rd361, exception3602;
	cvta.global.u64 	%rd362, %rd361;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd362;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd45;
	st.param.b32 	[param0+8], %r292;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_159:                            // %L7179
	mov.u32 	%r3035, 5;
	st.global.u32 	[%rd6], %r3035;
	mov.u64 	%rd359, exception3602;
	cvta.global.u64 	%rd360, %rd359;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd360;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd45;
	st.param.b32 	[param0+8], %r292;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_160:                            // %L7335
	mov.u32 	%r3034, 5;
	st.global.u32 	[%rd6], %r3034;
	mov.u64 	%rd357, exception3602;
	cvta.global.u64 	%rd358, %rd357;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd358;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd45;
	st.param.b32 	[param0+8], %r292;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_161:                            // %L7491
	mov.u32 	%r3033, 5;
	st.global.u32 	[%rd6], %r3033;
	mov.u64 	%rd355, exception3602;
	cvta.global.u64 	%rd356, %rd355;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd356;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd45;
	st.param.b32 	[param0+8], %r292;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L166
	mov.u32 	%r3050, 2;
	st.global.u32 	[%rd6], %r3050;
	mov.u64 	%rd389, exception3602;
	cvta.global.u64 	%rd390, %rd389;
	{ // callseq 90, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd390;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 90
	{ // callseq 91, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd45;
	st.param.b32 	[param0+8], %r292;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 91
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_13:                             // %L307
	mov.u32 	%r3049, 3;
	st.global.u32 	[%rd6], %r3049;
	mov.u64 	%rd387, exception3602;
	cvta.global.u64 	%rd388, %rd387;
	{ // callseq 88, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd388;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 88
	{ // callseq 89, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd45;
	st.param.b32 	[param0+8], %r292;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 89
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd51, exception1;
	cvta.global.u64 	%rd52, %rd51;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd52;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 47
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd45;
	st.param.b32 	[param0+8], %r292;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 48
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L1152
	add.u64 	%rd50, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r302, %r4};
	st.local.v2.u32 	[%rd5+8], {%r1, %r85};
	st.local.u32 	[%rd5+16], %r86;
	mov.u64 	%rd56, __unnamed_1;
	cvta.global.u64 	%rd57, %rd56;
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd57;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd50;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r529, [retval0+0];
	} // callseq 49
	mov.u32 	%r531, 4;
	st.global.u32 	[%rd6], %r531;
	mov.u64 	%rd59, exception3602;
	cvta.global.u64 	%rd60, %rd59;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd60;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd45;
	st.param.b32 	[param0+8], %r292;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
