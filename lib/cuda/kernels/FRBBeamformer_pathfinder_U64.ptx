// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=192, blocks_per_sm=4

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception2604[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception2644[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception12655[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32]
)
.reqntid 192, 1, 1
.minnctapersm 4
{
	.reg .pred 	%p<298>;
	.reg .b16 	%rs<203>;
	.reg .b32 	%r<3076>;
	.reg .f32 	%f<790>;
	.reg .b64 	%rd<370>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r266, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd15, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r271, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p4, %r271, 13919;
	@%p4 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L20
	ld.param.u64 	%rd16, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	ld.param.u32 	%r267, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %ctaid.x;
	mul.lo.s32 	%r4, %r3, 192;
	mov.u32 	%r272, %tid.x;
	add.s32 	%r273, %r2, %r4;
	or.b32  	%r274, %r273, %r272;
	mul.wide.u32 	%rd22, %r274, 4;
	add.s64 	%rd5, %rd16, %rd22;
	mov.u32 	%r275, 1;
	st.global.u32 	[%rd5], %r275;
	setp.lt.s32 	%p5, %r267, 0;
	@%p5 bra 	$L__BB0_6;
// %bb.3:                               // %L115
	ld.param.u32 	%r268, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p6, %r268, %r267;
	setp.gt.s32 	%p7, %r268, 1024;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_6;
// %bb.4:                               // %L125
	ld.param.u32 	%r269, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r268, %r267;
	mad.lo.s32 	%r276, %r6, -1431655765, 715827872;
	shf.r.wrap.b32 	%r277, %r276, %r276, 4;
	setp.gt.u32 	%p9, %r277, 89478484;
	setp.lt.s32 	%p10, %r269, 0;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_6;
// %bb.5:                               // %L131
	ld.param.u32 	%r270, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p12, %r270, %r269;
	setp.lt.s32 	%p13, %r270, 129;
	and.pred  	%p14, %p12, %p13;
	@%p14 bra 	$L__BB0_162;
	bra.uni 	$L__BB0_6;
$L__BB0_162:                            // %pass40
	sub.s32 	%r278, %r270, %r269;
	shr.s32 	%r279, %r6, 31;
	shr.u32 	%r280, %r279, 30;
	add.s32 	%r281, %r6, %r280;
	shr.s32 	%r282, %r281, 2;
	setp.ne.s32 	%p15, %r278, %r282;
	@%p15 bra 	$L__BB0_6;
// %bb.163:                             // %pass90
	and.b32  	%r150, %r272, 3;
	shr.u32 	%r151, %r272, 2;
	mul.lo.s32 	%r283, %r150, %r151;
	and.b32  	%r284, %r283, 7;
	cvt.rn.f32.s32 	%f205, %r284;
	mov.f32 	%f206, 0f40800000;
	div.approx.f32 	%f169, %f205, %f206;
	abs.f32 	%f788, %f169;
	setp.lt.f32 	%p16, %f788, 0f40000000;
	setp.gtu.f32 	%p292, %f788, 0f4B800000;
	mov.f32 	%f784, %f788;
	@%p16 bra 	$L__BB0_175;
// %bb.164:
	@%p292 bra 	$L__BB0_171;
	bra.uni 	$L__BB0_165;
$L__BB0_171:
	mov.b32 	%r153, %f788;
	and.b32  	%r285, %r153, 8388607;
	or.b32  	%r3059, %r285, 1065353216;
	mov.b32 	%f783, %r3059;
	add.s32 	%r286, %r153, -1073741824;
	and.b32  	%r3060, %r286, -8388608;
	setp.eq.s32 	%p23, %r3060, 0;
	@%p23 bra 	$L__BB0_174;
// %bb.172:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f216, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f215,%f216;
	// end inline asm
$L__BB0_173:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r287, %r3060, 192937984;
	add.s32 	%r288, %r3059, %r287;
	mov.b32 	%f217, %r288;
	mul.f32 	%f218, %f215, %f217;
	sub.f32 	%f219, %f217, %f218;
	fma.rn.f32 	%f220, %f219, %f215, %f218;
	sub.f32 	%f221, %f217, %f220;
	fma.rz.f32 	%f222, %f221, %f215, %f220;
	cvt.rzi.f32.f32 	%f223, %f222;
	sub.f32 	%f783, %f217, %f223;
	sub.s32 	%r3060, %r3060, %r287;
	mov.b32 	%r3059, %f783;
	setp.ne.s32 	%p24, %r3060, 0;
	setp.ne.s32 	%p25, %r3059, 0;
	and.pred  	%p26, %p24, %p25;
	@%p26 bra 	$L__BB0_173;
$L__BB0_174:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p27, %r153, 2139095039;
	selp.f32 	%f224, 0f7FFFFFFF, 0f4B800000, %p27;
	mul.f32 	%f225, %f783, 0f34000000;
	mul.f32 	%f784, %f224, %f225;
	bra.uni 	$L__BB0_175;
$L__BB0_165:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f207, 0f40000000;
	div.approx.f32 	%f208, %f788, %f207;
	cvt.rzi.f32.f32 	%f782, %f208;
	fma.rn.f32 	%f172, %f782, 0fC0000000, %f788;
	mov.b32 	%r152, %f172;
	setp.lt.u32 	%p18, %r152, 1073741824;
	@%p18 bra 	$L__BB0_170;
// %bb.166:
	setp.lt.u32 	%p19, %r152, -2147483647;
	@%p19 bra 	$L__BB0_168;
// %bb.167:
	add.f32 	%f213, %f782, 0fBF800000;
	setp.lt.f32 	%p22, %f172, 0fC0000000;
	add.f32 	%f214, %f213, 0fBF800000;
	selp.f32 	%f782, %f214, %f213, %p22;
	bra.uni 	$L__BB0_170;
$L__BB0_168:
	add.f32 	%f782, %f782, 0f3F800000;
	setp.ltu.f32 	%p20, %f172, 0f40800000;
	@%p20 bra 	$L__BB0_170;
// %bb.169:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f209, %f782, 0f3F800000;
	fma.rn.f32 	%f211, %f207, 0fC0400000, %f172;
	setp.ge.f32 	%p21, %f211, 0f00000000;
	add.f32 	%f212, %f209, 0f3F800000;
	selp.f32 	%f782, %f212, %f209, %p21;
$L__BB0_170:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f784, %f782, 0fC0000000, %f788;
$L__BB0_175:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f226, %f784;
	setp.gtu.f32 	%p28, %f226, 0f7F800000;
	mov.b32 	%r289, %f169;
	and.b32  	%r160, %r289, -2147483648;
	@%p28 bra 	$L__BB0_177;
// %bb.176:
	mov.b32 	%r290, %f784;
	or.b32  	%r291, %r160, %r290;
	mov.b32 	%f784, %r291;
$L__BB0_177:                            // %__nv_fmodf.exit
	add.f32 	%f227, %f784, %f784;
	mov.b32 	%r298, %f227;
	and.b32  	%r299, %r298, -2147483648;
	or.b32  	%r300, %r299, 1056964608;
	mov.b32 	%f228, %r300;
	add.f32 	%f229, %f227, %f228;
	cvt.rzi.f32.f32 	%f230, %f229;
	abs.f32 	%f231, %f227;
	setp.gt.f32 	%p29, %f231, 0f4B000000;
	selp.f32 	%f232, %f227, %f230, %p29;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p30, %f231, 0f3F000000;
	shl.b32 	%r163, %r272, 1;
	and.b32  	%r164, %r163, 2;
	mul.lo.s32 	%r306, %r164, %r151;
	cvt.rn.f32.s32 	%f259, %r306;
	mov.f32 	%f260, 0f41400000;
	div.approx.f32 	%f186, %f259, %f260;
	abs.f32 	%f734, %f186;
	setp.lt.f32 	%p36, %f734, 0f40000000;
	@%p36 bra 	$L__BB0_18;
// %bb.7:
	setp.gtu.f32 	%p37, %f734, 0f4B800000;
	@%p37 bra 	$L__BB0_14;
	bra.uni 	$L__BB0_8;
$L__BB0_14:
	mov.b32 	%r8, %f734;
	and.b32  	%r307, %r8, 8388607;
	or.b32  	%r3007, %r307, 1065353216;
	mov.b32 	%f733, %r3007;
	add.s32 	%r308, %r8, -1073741824;
	and.b32  	%r3008, %r308, -8388608;
	setp.eq.s32 	%p43, %r3008, 0;
	@%p43 bra 	$L__BB0_17;
// %bb.15:                              // %__nv_fmaf_rn.exit4.i.i.i1991.preheader
	mov.f32 	%f270, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f269,%f270;
	// end inline asm
$L__BB0_16:                             // %__nv_fmaf_rn.exit4.i.i.i1991
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r309, %r3008, 192937984;
	add.s32 	%r310, %r3007, %r309;
	mov.b32 	%f271, %r310;
	mul.f32 	%f272, %f269, %f271;
	sub.f32 	%f273, %f271, %f272;
	fma.rn.f32 	%f274, %f273, %f269, %f272;
	sub.f32 	%f275, %f271, %f274;
	fma.rz.f32 	%f276, %f275, %f269, %f274;
	cvt.rzi.f32.f32 	%f277, %f276;
	sub.f32 	%f733, %f271, %f277;
	sub.s32 	%r3008, %r3008, %r309;
	mov.b32 	%r3007, %f733;
	setp.ne.s32 	%p44, %r3008, 0;
	setp.ne.s32 	%p45, %r3007, 0;
	and.pred  	%p46, %p44, %p45;
	@%p46 bra 	$L__BB0_16;
$L__BB0_17:                             // %__internal_fmodf_slowpath_mod.exit.i.i1993
	setp.gt.u32 	%p47, %r8, 2139095039;
	selp.f32 	%f278, 0f7FFFFFFF, 0f4B800000, %p47;
	mul.f32 	%f279, %f733, 0f34000000;
	mul.f32 	%f734, %f278, %f279;
	bra.uni 	$L__BB0_18;
$L__BB0_8:                              // %__nv_fast_fdividef.exit.i.i.i1970
	mov.f32 	%f261, 0f40000000;
	div.approx.f32 	%f262, %f734, %f261;
	cvt.rzi.f32.f32 	%f732, %f262;
	fma.rn.f32 	%f2, %f732, 0fC0000000, %f734;
	mov.b32 	%r7, %f2;
	setp.lt.u32 	%p38, %r7, 1073741824;
	@%p38 bra 	$L__BB0_13;
// %bb.9:
	setp.lt.u32 	%p39, %r7, -2147483647;
	@%p39 bra 	$L__BB0_11;
// %bb.10:
	add.f32 	%f267, %f732, 0fBF800000;
	setp.lt.f32 	%p42, %f2, 0fC0000000;
	add.f32 	%f268, %f267, 0fBF800000;
	selp.f32 	%f732, %f268, %f267, %p42;
	bra.uni 	$L__BB0_13;
$L__BB0_11:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p40, %f2, 0f40800000;
	@%p40 bra 	$L__BB0_13;
// %bb.12:                              // %__nv_fmaf_rn.exit.i.i.i1974
	add.f32 	%f263, %f732, 0f3F800000;
	fma.rn.f32 	%f265, %f261, 0fC0400000, %f2;
	setp.ge.f32 	%p41, %f265, 0f00000000;
	add.f32 	%f266, %f263, 0f3F800000;
	selp.f32 	%f732, %f266, %f263, %p41;
$L__BB0_13:                             // %__internal_fmodf_fastpath_quot.exit.i.i1977
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_18:                             // %__internal_fmodf_kernel.exit.i1996
	selp.f32 	%f234, %f233, %f232, %p30;
	or.b32  	%r165, %r164, 1;
	abs.f32 	%f280, %f734;
	setp.gtu.f32 	%p48, %f280, 0f7F800000;
	@%p48 bra 	$L__BB0_20;
// %bb.19:
	mov.b32 	%r311, %f186;
	and.b32  	%r312, %r311, -2147483648;
	mov.b32 	%r313, %f734;
	or.b32  	%r314, %r312, %r313;
	mov.b32 	%f734, %r314;
$L__BB0_20:                             // %__nv_fmodf.exit1997
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f784;
	mov.f32 	%f250, 0f00000000;
	add.f32 	%f282, %f734, %f734;
	mov.b32 	%r315, %f282;
	and.b32  	%r316, %r315, -2147483648;
	or.b32  	%r317, %r316, 1056964608;
	mov.b32 	%f283, %r317;
	add.f32 	%f284, %f282, %f283;
	cvt.rzi.f32.f32 	%f285, %f284;
	abs.f32 	%f286, %f282;
	setp.gt.f32 	%p49, %f286, 0f4B000000;
	selp.f32 	%f287, %f282, %f285, %p49;
	cvt.rzi.f32.f32 	%f288, %f282;
	setp.lt.f32 	%p50, %f286, 0f3F000000;
	selp.f32 	%f289, %f288, %f287, %p50;
	setp.eq.s32 	%p56, %r165, 3;
	mov.f32 	%f740, %f250;
	mov.f32 	%f741, %f250;
	@%p56 bra 	$L__BB0_36;
// %bb.21:                              // %L377
	mul.lo.s32 	%r323, %r165, %r151;
	mul.hi.u32 	%r324, %r323, -1431655765;
	shr.u32 	%r325, %r324, 4;
	mul.lo.s32 	%r326, %r325, 24;
	sub.s32 	%r327, %r323, %r326;
	cvt.rn.f32.s32 	%f311, %r327;
	div.approx.f32 	%f18, %f311, %f260;
	abs.f32 	%f738, %f18;
	setp.lt.f32 	%p57, %f738, 0f40000000;
	@%p57 bra 	$L__BB0_33;
// %bb.22:
	setp.gtu.f32 	%p58, %f738, 0f4B800000;
	@%p58 bra 	$L__BB0_29;
	bra.uni 	$L__BB0_23;
$L__BB0_29:
	mov.b32 	%r16, %f738;
	and.b32  	%r328, %r16, 8388607;
	or.b32  	%r3009, %r328, 1065353216;
	mov.b32 	%f737, %r3009;
	add.s32 	%r329, %r16, -1073741824;
	and.b32  	%r3010, %r329, -8388608;
	setp.eq.s32 	%p64, %r3010, 0;
	@%p64 bra 	$L__BB0_32;
// %bb.30:                              // %__nv_fmaf_rn.exit4.i.i.i2022.preheader
	mov.f32 	%f322, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f321,%f322;
	// end inline asm
$L__BB0_31:                             // %__nv_fmaf_rn.exit4.i.i.i2022
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r330, %r3010, 192937984;
	add.s32 	%r331, %r3009, %r330;
	mov.b32 	%f323, %r331;
	mul.f32 	%f324, %f321, %f323;
	sub.f32 	%f325, %f323, %f324;
	fma.rn.f32 	%f326, %f325, %f321, %f324;
	sub.f32 	%f327, %f323, %f326;
	fma.rz.f32 	%f328, %f327, %f321, %f326;
	cvt.rzi.f32.f32 	%f329, %f328;
	sub.f32 	%f737, %f323, %f329;
	sub.s32 	%r3010, %r3010, %r330;
	mov.b32 	%r3009, %f737;
	setp.ne.s32 	%p65, %r3010, 0;
	setp.ne.s32 	%p66, %r3009, 0;
	and.pred  	%p67, %p65, %p66;
	@%p67 bra 	$L__BB0_31;
$L__BB0_32:                             // %__internal_fmodf_slowpath_mod.exit.i.i2024
	setp.gt.u32 	%p68, %r16, 2139095039;
	selp.f32 	%f330, 0f7FFFFFFF, 0f4B800000, %p68;
	mul.f32 	%f331, %f737, 0f34000000;
	mul.f32 	%f738, %f330, %f331;
	bra.uni 	$L__BB0_33;
$L__BB0_23:                             // %__nv_fast_fdividef.exit.i.i.i2001
	mov.f32 	%f313, 0f40000000;
	div.approx.f32 	%f314, %f738, %f313;
	cvt.rzi.f32.f32 	%f736, %f314;
	fma.rn.f32 	%f21, %f736, 0fC0000000, %f738;
	mov.b32 	%r15, %f21;
	setp.lt.u32 	%p59, %r15, 1073741824;
	@%p59 bra 	$L__BB0_28;
// %bb.24:
	setp.lt.u32 	%p60, %r15, -2147483647;
	@%p60 bra 	$L__BB0_26;
// %bb.25:
	add.f32 	%f319, %f736, 0fBF800000;
	setp.lt.f32 	%p63, %f21, 0fC0000000;
	add.f32 	%f320, %f319, 0fBF800000;
	selp.f32 	%f736, %f320, %f319, %p63;
	bra.uni 	$L__BB0_28;
$L__BB0_26:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p61, %f21, 0f40800000;
	@%p61 bra 	$L__BB0_28;
// %bb.27:                              // %__nv_fmaf_rn.exit.i.i.i2005
	add.f32 	%f315, %f736, 0f3F800000;
	fma.rn.f32 	%f317, %f313, 0fC0400000, %f21;
	setp.ge.f32 	%p62, %f317, 0f00000000;
	add.f32 	%f318, %f315, 0f3F800000;
	selp.f32 	%f736, %f318, %f315, %p62;
$L__BB0_28:                             // %__internal_fmodf_fastpath_quot.exit.i.i2008
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_33:                             // %__internal_fmodf_kernel.exit.i2027
	abs.f32 	%f332, %f738;
	setp.gtu.f32 	%p69, %f332, 0f7F800000;
	@%p69 bra 	$L__BB0_35;
// %bb.34:
	mov.b32 	%r332, %f18;
	and.b32  	%r333, %r332, -2147483648;
	mov.b32 	%r334, %f738;
	or.b32  	%r335, %r333, %r334;
	mov.b32 	%f738, %r335;
$L__BB0_35:                             // %__nv_fmodf.exit2028
	add.f32 	%f333, %f738, %f738;
	mov.b32 	%r336, %f333;
	and.b32  	%r337, %r336, -2147483648;
	or.b32  	%r338, %r337, 1056964608;
	mov.b32 	%f334, %r338;
	add.f32 	%f335, %f333, %f334;
	cvt.rzi.f32.f32 	%f336, %f335;
	abs.f32 	%f337, %f333;
	setp.gt.f32 	%p70, %f337, 0f4B000000;
	selp.f32 	%f338, %f333, %f336, %p70;
	cvt.rzi.f32.f32 	%f339, %f333;
	setp.lt.f32 	%p71, %f337, 0f3F000000;
	selp.f32 	%f340, %f339, %f338, %p71;
	cvt.rzi.s32.f32 	%r339, %f340;
	fma.rn.f32 	%f341, %f340, 0fBF000000, %f738;
	mul.f32 	%f342, %f341, %f341;
	fma.rn.f32 	%f343, %f342, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f344, %f342, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f345, %f343, %f342, 0fC0A55DF6;
	fma.rn.f32 	%f346, %f344, %f342, 0f4081E0CF;
	fma.rn.f32 	%f347, %f342, %f341, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f342, 0fC09DE9E6;
	fma.rn.f32 	%f349, %f345, %f347, 0f00000000;
	fma.rn.f32 	%f350, %f348, %f342, 0f3F800000;
	fma.rn.f32 	%f351, %f341, 0f40490FDB, %f349;
	and.b32  	%r340, %r339, 1;
	setp.eq.b32 	%p72, %r340, 1;
	selp.f32 	%f352, %f350, %f351, %p72;
	selp.f32 	%f353, %f351, %f350, %p72;
	and.b32  	%r341, %r339, 2;
	setp.eq.s32 	%p73, %r341, 0;
	neg.f32 	%f354, %f352;
	selp.f32 	%f355, %f352, %f354, %p73;
	add.s32 	%r342, %r339, 1;
	and.b32  	%r343, %r342, 2;
	setp.eq.s32 	%p74, %r343, 0;
	mov.f32 	%f356, 0f00000000;
	sub.f32 	%f357, %f356, %f353;
	selp.f32 	%f358, %f353, %f357, %p74;
	cvt.rzi.f32.f32 	%f359, %f738;
	setp.eq.f32 	%p75, %f359, %f738;
	mul.f32 	%f360, %f738, 0f00000000;
	selp.f32 	%f741, %f360, %f355, %p75;
	abs.f32 	%f361, %f738;
	setp.gt.f32 	%p76, %f361, 0f4B800000;
	add.f32 	%f362, %f741, 0f3F800000;
	selp.f32 	%f740, %f362, %f358, %p76;
$L__BB0_36:                             // %L411
	mul.f32 	%f236, %f235, %f235;
	fma.rn.f32 	%f290, %f289, 0fBF000000, %f734;
	and.b32  	%r25, %r151, 3;
	setp.eq.s32 	%p77, %r25, 3;
	mov.f32 	%f731, 0f3FC00000;
	mov.f32 	%f746, %f250;
	mov.f32 	%f755, %f250;
	@%p77 bra 	$L__BB0_52;
// %bb.37:                              // %L449
	mul.lo.s32 	%r350, %r164, %r25;
	cvt.u16.u32 	%rs10, %r350;
	mul.lo.s16 	%rs11, %rs10, 171;
	shr.u16 	%rs12, %rs11, 9;
	mul.lo.s16 	%rs13, %rs12, 3;
	sub.s16 	%rs14, %rs10, %rs13;
	and.b16  	%rs15, %rs14, 255;
	cvt.rn.f32.u16 	%f364, %rs15;
	div.approx.f32 	%f39, %f364, %f731;
	abs.f32 	%f744, %f39;
	setp.lt.f32 	%p78, %f744, 0f40000000;
	@%p78 bra 	$L__BB0_49;
// %bb.38:
	setp.gtu.f32 	%p79, %f744, 0f4B800000;
	@%p79 bra 	$L__BB0_45;
	bra.uni 	$L__BB0_39;
$L__BB0_45:
	mov.b32 	%r27, %f744;
	and.b32  	%r351, %r27, 8388607;
	or.b32  	%r3011, %r351, 1065353216;
	mov.b32 	%f743, %r3011;
	add.s32 	%r352, %r27, -1073741824;
	and.b32  	%r3012, %r352, -8388608;
	setp.eq.s32 	%p85, %r3012, 0;
	@%p85 bra 	$L__BB0_48;
// %bb.46:                              // %__nv_fmaf_rn.exit4.i.i.i2053.preheader
	mov.f32 	%f375, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f374,%f375;
	// end inline asm
$L__BB0_47:                             // %__nv_fmaf_rn.exit4.i.i.i2053
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r353, %r3012, 192937984;
	add.s32 	%r354, %r3011, %r353;
	mov.b32 	%f376, %r354;
	mul.f32 	%f377, %f374, %f376;
	sub.f32 	%f378, %f376, %f377;
	fma.rn.f32 	%f379, %f378, %f374, %f377;
	sub.f32 	%f380, %f376, %f379;
	fma.rz.f32 	%f381, %f380, %f374, %f379;
	cvt.rzi.f32.f32 	%f382, %f381;
	sub.f32 	%f743, %f376, %f382;
	sub.s32 	%r3012, %r3012, %r353;
	mov.b32 	%r3011, %f743;
	setp.ne.s32 	%p86, %r3012, 0;
	setp.ne.s32 	%p87, %r3011, 0;
	and.pred  	%p88, %p86, %p87;
	@%p88 bra 	$L__BB0_47;
$L__BB0_48:                             // %__internal_fmodf_slowpath_mod.exit.i.i2055
	setp.gt.u32 	%p89, %r27, 2139095039;
	selp.f32 	%f383, 0f7FFFFFFF, 0f4B800000, %p89;
	mul.f32 	%f384, %f743, 0f34000000;
	mul.f32 	%f744, %f383, %f384;
	bra.uni 	$L__BB0_49;
$L__BB0_39:                             // %__nv_fast_fdividef.exit.i.i.i2032
	mov.f32 	%f366, 0f40000000;
	div.approx.f32 	%f367, %f744, %f366;
	cvt.rzi.f32.f32 	%f742, %f367;
	fma.rn.f32 	%f42, %f742, 0fC0000000, %f744;
	mov.b32 	%r26, %f42;
	setp.lt.u32 	%p80, %r26, 1073741824;
	@%p80 bra 	$L__BB0_44;
// %bb.40:
	setp.lt.u32 	%p81, %r26, -2147483647;
	@%p81 bra 	$L__BB0_42;
// %bb.41:
	add.f32 	%f372, %f742, 0fBF800000;
	setp.lt.f32 	%p84, %f42, 0fC0000000;
	add.f32 	%f373, %f372, 0fBF800000;
	selp.f32 	%f742, %f373, %f372, %p84;
	bra.uni 	$L__BB0_44;
$L__BB0_42:
	add.f32 	%f742, %f742, 0f3F800000;
	setp.ltu.f32 	%p82, %f42, 0f40800000;
	@%p82 bra 	$L__BB0_44;
// %bb.43:                              // %__nv_fmaf_rn.exit.i.i.i2036
	add.f32 	%f368, %f742, 0f3F800000;
	fma.rn.f32 	%f370, %f366, 0fC0400000, %f42;
	setp.ge.f32 	%p83, %f370, 0f00000000;
	add.f32 	%f371, %f368, 0f3F800000;
	selp.f32 	%f742, %f371, %f368, %p83;
$L__BB0_44:                             // %__internal_fmodf_fastpath_quot.exit.i.i2039
	fma.rn.f32 	%f744, %f742, 0fC0000000, %f744;
$L__BB0_49:                             // %__internal_fmodf_kernel.exit.i2058
	abs.f32 	%f385, %f744;
	setp.gtu.f32 	%p90, %f385, 0f7F800000;
	@%p90 bra 	$L__BB0_51;
// %bb.50:
	mov.b32 	%r355, %f39;
	and.b32  	%r356, %r355, -2147483648;
	mov.b32 	%r357, %f744;
	or.b32  	%r358, %r356, %r357;
	mov.b32 	%f744, %r358;
$L__BB0_51:                             // %__nv_fmodf.exit2059
	add.f32 	%f386, %f744, %f744;
	mov.b32 	%r359, %f386;
	and.b32  	%r360, %r359, -2147483648;
	or.b32  	%r361, %r360, 1056964608;
	mov.b32 	%f387, %r361;
	add.f32 	%f388, %f386, %f387;
	cvt.rzi.f32.f32 	%f389, %f388;
	abs.f32 	%f390, %f386;
	setp.gt.f32 	%p91, %f390, 0f4B000000;
	selp.f32 	%f391, %f386, %f389, %p91;
	cvt.rzi.f32.f32 	%f392, %f386;
	setp.lt.f32 	%p92, %f390, 0f3F000000;
	selp.f32 	%f393, %f392, %f391, %p92;
	cvt.rzi.s32.f32 	%r362, %f393;
	fma.rn.f32 	%f394, %f393, 0fBF000000, %f744;
	mul.f32 	%f395, %f394, %f394;
	fma.rn.f32 	%f396, %f395, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f397, %f395, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f398, %f396, %f395, 0fC0A55DF6;
	fma.rn.f32 	%f399, %f397, %f395, 0f4081E0CF;
	fma.rn.f32 	%f400, %f395, %f394, 0f00000000;
	fma.rn.f32 	%f401, %f399, %f395, 0fC09DE9E6;
	fma.rn.f32 	%f402, %f398, %f400, 0f00000000;
	fma.rn.f32 	%f403, %f401, %f395, 0f3F800000;
	fma.rn.f32 	%f404, %f394, 0f40490FDB, %f402;
	and.b32  	%r363, %r362, 1;
	setp.eq.b32 	%p93, %r363, 1;
	selp.f32 	%f405, %f403, %f404, %p93;
	selp.f32 	%f406, %f404, %f403, %p93;
	and.b32  	%r364, %r362, 2;
	setp.eq.s32 	%p94, %r364, 0;
	neg.f32 	%f407, %f405;
	selp.f32 	%f408, %f405, %f407, %p94;
	add.s32 	%r365, %r362, 1;
	and.b32  	%r366, %r365, 2;
	setp.eq.s32 	%p95, %r366, 0;
	mov.f32 	%f409, 0f00000000;
	sub.f32 	%f410, %f409, %f406;
	selp.f32 	%f411, %f406, %f410, %p95;
	cvt.rzi.f32.f32 	%f412, %f744;
	setp.eq.f32 	%p96, %f412, %f744;
	mul.f32 	%f413, %f744, 0f00000000;
	selp.f32 	%f755, %f413, %f408, %p96;
	abs.f32 	%f414, %f744;
	setp.gt.f32 	%p97, %f414, 0f4B800000;
	add.f32 	%f415, %f755, 0f3F800000;
	selp.f32 	%f746, %f415, %f411, %p97;
$L__BB0_52:                             // %L483
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f291, %f290, %f290;
	or.pred  	%p100, %p56, %p77;
	mov.f32 	%f752, %f250;
	mov.f32 	%f757, %f250;
	@%p100 bra 	$L__BB0_68;
// %bb.53:                              // %L491
	mul.lo.s32 	%r367, %r165, %r25;
	mul.hi.u32 	%r368, %r367, -1431655765;
	shr.u32 	%r369, %r368, 1;
	mul.lo.s32 	%r370, %r369, 3;
	sub.s32 	%r371, %r367, %r370;
	cvt.rn.f32.s32 	%f417, %r371;
	div.approx.f32 	%f60, %f417, %f731;
	abs.f32 	%f750, %f60;
	setp.lt.f32 	%p101, %f750, 0f40000000;
	@%p101 bra 	$L__BB0_65;
// %bb.54:
	setp.gtu.f32 	%p102, %f750, 0f4B800000;
	@%p102 bra 	$L__BB0_61;
	bra.uni 	$L__BB0_55;
$L__BB0_61:
	mov.b32 	%r35, %f750;
	and.b32  	%r372, %r35, 8388607;
	or.b32  	%r3013, %r372, 1065353216;
	mov.b32 	%f749, %r3013;
	add.s32 	%r373, %r35, -1073741824;
	and.b32  	%r3014, %r373, -8388608;
	setp.eq.s32 	%p108, %r3014, 0;
	@%p108 bra 	$L__BB0_64;
// %bb.62:                              // %__nv_fmaf_rn.exit4.i.i.i2084.preheader
	mov.f32 	%f428, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f427,%f428;
	// end inline asm
$L__BB0_63:                             // %__nv_fmaf_rn.exit4.i.i.i2084
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r374, %r3014, 192937984;
	add.s32 	%r375, %r3013, %r374;
	mov.b32 	%f429, %r375;
	mul.f32 	%f430, %f427, %f429;
	sub.f32 	%f431, %f429, %f430;
	fma.rn.f32 	%f432, %f431, %f427, %f430;
	sub.f32 	%f433, %f429, %f432;
	fma.rz.f32 	%f434, %f433, %f427, %f432;
	cvt.rzi.f32.f32 	%f435, %f434;
	sub.f32 	%f749, %f429, %f435;
	sub.s32 	%r3014, %r3014, %r374;
	mov.b32 	%r3013, %f749;
	setp.ne.s32 	%p109, %r3014, 0;
	setp.ne.s32 	%p110, %r3013, 0;
	and.pred  	%p111, %p109, %p110;
	@%p111 bra 	$L__BB0_63;
$L__BB0_64:                             // %__internal_fmodf_slowpath_mod.exit.i.i2086
	setp.gt.u32 	%p112, %r35, 2139095039;
	selp.f32 	%f436, 0f7FFFFFFF, 0f4B800000, %p112;
	mul.f32 	%f437, %f749, 0f34000000;
	mul.f32 	%f750, %f436, %f437;
	bra.uni 	$L__BB0_65;
$L__BB0_55:                             // %__nv_fast_fdividef.exit.i.i.i2063
	mov.f32 	%f419, 0f40000000;
	div.approx.f32 	%f420, %f750, %f419;
	cvt.rzi.f32.f32 	%f748, %f420;
	fma.rn.f32 	%f63, %f748, 0fC0000000, %f750;
	mov.b32 	%r34, %f63;
	setp.lt.u32 	%p103, %r34, 1073741824;
	@%p103 bra 	$L__BB0_60;
// %bb.56:
	setp.lt.u32 	%p104, %r34, -2147483647;
	@%p104 bra 	$L__BB0_58;
// %bb.57:
	add.f32 	%f425, %f748, 0fBF800000;
	setp.lt.f32 	%p107, %f63, 0fC0000000;
	add.f32 	%f426, %f425, 0fBF800000;
	selp.f32 	%f748, %f426, %f425, %p107;
	bra.uni 	$L__BB0_60;
$L__BB0_58:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p105, %f63, 0f40800000;
	@%p105 bra 	$L__BB0_60;
// %bb.59:                              // %__nv_fmaf_rn.exit.i.i.i2067
	add.f32 	%f421, %f748, 0f3F800000;
	fma.rn.f32 	%f423, %f419, 0fC0400000, %f63;
	setp.ge.f32 	%p106, %f423, 0f00000000;
	add.f32 	%f424, %f421, 0f3F800000;
	selp.f32 	%f748, %f424, %f421, %p106;
$L__BB0_60:                             // %__internal_fmodf_fastpath_quot.exit.i.i2070
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_65:                             // %__internal_fmodf_kernel.exit.i2089
	abs.f32 	%f438, %f750;
	setp.gtu.f32 	%p113, %f438, 0f7F800000;
	@%p113 bra 	$L__BB0_67;
// %bb.66:
	mov.b32 	%r376, %f60;
	and.b32  	%r377, %r376, -2147483648;
	mov.b32 	%r378, %f750;
	or.b32  	%r379, %r377, %r378;
	mov.b32 	%f750, %r379;
$L__BB0_67:                             // %__nv_fmodf.exit2090
	add.f32 	%f439, %f750, %f750;
	mov.b32 	%r380, %f439;
	and.b32  	%r381, %r380, -2147483648;
	or.b32  	%r382, %r381, 1056964608;
	mov.b32 	%f440, %r382;
	add.f32 	%f441, %f439, %f440;
	cvt.rzi.f32.f32 	%f442, %f441;
	abs.f32 	%f443, %f439;
	setp.gt.f32 	%p114, %f443, 0f4B000000;
	selp.f32 	%f444, %f439, %f442, %p114;
	cvt.rzi.f32.f32 	%f445, %f439;
	setp.lt.f32 	%p115, %f443, 0f3F000000;
	selp.f32 	%f446, %f445, %f444, %p115;
	cvt.rzi.s32.f32 	%r383, %f446;
	fma.rn.f32 	%f447, %f446, 0fBF000000, %f750;
	mul.f32 	%f448, %f447, %f447;
	fma.rn.f32 	%f449, %f448, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f450, %f448, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f451, %f449, %f448, 0fC0A55DF6;
	fma.rn.f32 	%f452, %f450, %f448, 0f4081E0CF;
	fma.rn.f32 	%f453, %f448, %f447, 0f00000000;
	fma.rn.f32 	%f454, %f452, %f448, 0fC09DE9E6;
	fma.rn.f32 	%f455, %f451, %f453, 0f00000000;
	fma.rn.f32 	%f456, %f454, %f448, 0f3F800000;
	fma.rn.f32 	%f457, %f447, 0f40490FDB, %f455;
	and.b32  	%r384, %r383, 1;
	setp.eq.b32 	%p116, %r384, 1;
	selp.f32 	%f458, %f456, %f457, %p116;
	selp.f32 	%f459, %f457, %f456, %p116;
	and.b32  	%r385, %r383, 2;
	setp.eq.s32 	%p117, %r385, 0;
	neg.f32 	%f460, %f458;
	selp.f32 	%f461, %f458, %f460, %p117;
	add.s32 	%r386, %r383, 1;
	and.b32  	%r387, %r386, 2;
	setp.eq.s32 	%p118, %r387, 0;
	mov.f32 	%f462, 0f00000000;
	sub.f32 	%f463, %f462, %f459;
	selp.f32 	%f464, %f459, %f463, %p118;
	cvt.rzi.f32.f32 	%f465, %f750;
	setp.eq.f32 	%p119, %f465, %f750;
	mul.f32 	%f466, %f750, 0f00000000;
	selp.f32 	%f757, %f466, %f461, %p119;
	abs.f32 	%f467, %f750;
	setp.gt.f32 	%p120, %f467, 0f4B800000;
	add.f32 	%f468, %f757, 0f3F800000;
	selp.f32 	%f752, %f468, %f464, %p120;
$L__BB0_68:                             // %L525
	cvt.rzi.s32.f32 	%r301, %f234;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	fma.rn.f32 	%f292, %f291, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f293, %f291, 0f3E684E12, 0fBFAAD2E0;
	and.b32  	%r42, %r272, 2;
	setp.eq.s32 	%p121, %r42, 0;
	mov.f32 	%f754, %f746;
	mov.f32 	%f756, %f752;
	@%p121 bra 	$L__BB0_70;
// %bb.69:                              // %L534
	neg.f32 	%f756, %f757;
	neg.f32 	%f754, %f755;
	mov.f32 	%f755, %f746;
	mov.f32 	%f757, %f752;
$L__BB0_70:                             // %L536
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r302, %r301, 1;
	cvt.rzi.s32.f32 	%r318, %f289;
	fma.rn.f32 	%f294, %f292, %f291, 0fC0A55DF6;
	fma.rn.f32 	%f295, %f293, %f291, 0f4081E0CF;
	fma.rn.f32 	%f296, %f291, %f290, 0f00000000;
	@%p16 bra 	$L__BB0_185;
// %bb.71:
	@%p292 bra 	$L__BB0_181;
	bra.uni 	$L__BB0_72;
$L__BB0_181:
	mov.b32 	%r167, %f788;
	and.b32  	%r394, %r167, 8388607;
	or.b32  	%r3061, %r394, 1065353216;
	mov.b32 	%f787, %r3061;
	add.s32 	%r395, %r167, -1073741824;
	and.b32  	%r3062, %r395, -8388608;
	setp.eq.s32 	%p129, %r3062, 0;
	@%p129 bra 	$L__BB0_184;
// %bb.182:                             // %__nv_fmaf_rn.exit4.i.i.i2115.preheader
	mov.f32 	%f478, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f477,%f478;
	// end inline asm
$L__BB0_183:                            // %__nv_fmaf_rn.exit4.i.i.i2115
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r396, %r3062, 192937984;
	add.s32 	%r397, %r3061, %r396;
	mov.b32 	%f479, %r397;
	mul.f32 	%f480, %f477, %f479;
	sub.f32 	%f481, %f479, %f480;
	fma.rn.f32 	%f482, %f481, %f477, %f480;
	sub.f32 	%f483, %f479, %f482;
	fma.rz.f32 	%f484, %f483, %f477, %f482;
	cvt.rzi.f32.f32 	%f485, %f484;
	sub.f32 	%f787, %f479, %f485;
	sub.s32 	%r3062, %r3062, %r396;
	mov.b32 	%r3061, %f787;
	setp.ne.s32 	%p130, %r3062, 0;
	setp.ne.s32 	%p131, %r3061, 0;
	and.pred  	%p132, %p130, %p131;
	@%p132 bra 	$L__BB0_183;
$L__BB0_184:                            // %__internal_fmodf_slowpath_mod.exit.i.i2117
	setp.gt.u32 	%p133, %r167, 2139095039;
	selp.f32 	%f486, 0f7FFFFFFF, 0f4B800000, %p133;
	mul.f32 	%f487, %f787, 0f34000000;
	mul.f32 	%f788, %f486, %f487;
	bra.uni 	$L__BB0_185;
$L__BB0_72:                             // %__nv_fast_fdividef.exit.i.i.i2094
	mov.f32 	%f469, 0f40000000;
	div.approx.f32 	%f470, %f788, %f469;
	cvt.rzi.f32.f32 	%f786, %f470;
	fma.rn.f32 	%f189, %f786, 0fC0000000, %f788;
	mov.b32 	%r166, %f189;
	setp.lt.u32 	%p124, %r166, 1073741824;
	@%p124 bra 	$L__BB0_180;
// %bb.73:
	setp.lt.u32 	%p125, %r166, -2147483647;
	@%p125 bra 	$L__BB0_178;
// %bb.74:
	add.f32 	%f475, %f786, 0fBF800000;
	setp.lt.f32 	%p128, %f189, 0fC0000000;
	add.f32 	%f476, %f475, 0fBF800000;
	selp.f32 	%f786, %f476, %f475, %p128;
	bra.uni 	$L__BB0_180;
$L__BB0_178:
	add.f32 	%f786, %f786, 0f3F800000;
	setp.ltu.f32 	%p126, %f189, 0f40800000;
	@%p126 bra 	$L__BB0_180;
// %bb.179:                             // %__nv_fmaf_rn.exit.i.i.i2098
	add.f32 	%f471, %f786, 0f3F800000;
	fma.rn.f32 	%f473, %f469, 0fC0400000, %f189;
	setp.ge.f32 	%p127, %f473, 0f00000000;
	add.f32 	%f474, %f471, 0f3F800000;
	selp.f32 	%f786, %f474, %f471, %p127;
$L__BB0_180:                            // %__internal_fmodf_fastpath_quot.exit.i.i2101
	fma.rn.f32 	%f788, %f786, 0fC0000000, %f788;
$L__BB0_185:                            // %__internal_fmodf_kernel.exit.i2120
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p31, %r302, 1;
	fma.rn.f32 	%f297, %f295, %f291, 0fC09DE9E6;
	fma.rn.f32 	%f298, %f294, %f296, 0f00000000;
	and.b32  	%r319, %r318, 1;
	abs.f32 	%f488, %f788;
	setp.gtu.f32 	%p134, %f488, 0f7F800000;
	@%p134 bra 	$L__BB0_187;
// %bb.186:
	mov.b32 	%r398, %f788;
	or.b32  	%r399, %r160, %r398;
	mov.b32 	%f788, %r399;
$L__BB0_187:                            // %__nv_fmodf.exit2121
	selp.f32 	%f246, %f244, %f245, %p31;
	and.b32  	%r303, %r301, 2;
	fma.rn.f32 	%f299, %f297, %f291, 0f3F800000;
	fma.rn.f32 	%f300, %f290, 0f40490FDB, %f298;
	setp.eq.b32 	%p51, %r319, 1;
	add.f32 	%f489, %f788, %f788;
	mov.b32 	%r406, %f489;
	and.b32  	%r407, %r406, -2147483648;
	or.b32  	%r408, %r407, 1056964608;
	mov.b32 	%f490, %r408;
	add.f32 	%f491, %f489, %f490;
	cvt.rzi.f32.f32 	%f492, %f491;
	abs.f32 	%f493, %f489;
	setp.gt.f32 	%p135, %f493, 0f4B000000;
	selp.f32 	%f494, %f489, %f492, %p135;
	cvt.rzi.f32.f32 	%f495, %f489;
	setp.lt.f32 	%p136, %f493, 0f3F000000;
	selp.f32 	%f496, %f495, %f494, %p136;
	cvt.rzi.s32.f32 	%r409, %f496;
	fma.rn.f32 	%f497, %f496, 0fBF000000, %f788;
	mul.f32 	%f498, %f497, %f497;
	fma.rn.f32 	%f499, %f498, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f500, %f498, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f501, %f499, %f498, 0fC0A55DF6;
	fma.rn.f32 	%f502, %f500, %f498, 0f4081E0CF;
	fma.rn.f32 	%f503, %f498, %f497, 0f00000000;
	fma.rn.f32 	%f504, %f502, %f498, 0fC09DE9E6;
	fma.rn.f32 	%f505, %f501, %f503, 0f00000000;
	fma.rn.f32 	%f506, %f504, %f498, 0f3F800000;
	fma.rn.f32 	%f507, %f497, 0f40490FDB, %f505;
	and.b32  	%r410, %r409, 1;
	setp.eq.b32 	%p137, %r410, 1;
	selp.f32 	%f508, %f506, %f507, %p137;
	and.b32  	%r411, %r409, 2;
	mov.f32 	%f776, 0f00000000;
	mov.f32 	%f521, 0f41000000;
	div.approx.f32 	%f203, %f776, %f521;
	abs.f32 	%f760, %f203;
	setp.lt.f32 	%p142, %f760, 0f40000000;
	@%p142 bra 	$L__BB0_86;
// %bb.75:
	setp.gtu.f32 	%p143, %f760, 0f4B800000;
	@%p143 bra 	$L__BB0_82;
	bra.uni 	$L__BB0_76;
$L__BB0_82:
	mov.b32 	%r46, %f760;
	and.b32  	%r414, %r46, 8388607;
	or.b32  	%r3015, %r414, 1065353216;
	mov.b32 	%f759, %r3015;
	add.s32 	%r415, %r46, -1073741824;
	and.b32  	%r3016, %r415, -8388608;
	setp.eq.s32 	%p149, %r3016, 0;
	@%p149 bra 	$L__BB0_85;
// %bb.83:                              // %__nv_fmaf_rn.exit4.i.i.i2146.preheader
	mov.f32 	%f531, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f530,%f531;
	// end inline asm
$L__BB0_84:                             // %__nv_fmaf_rn.exit4.i.i.i2146
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r416, %r3016, 192937984;
	add.s32 	%r417, %r3015, %r416;
	mov.b32 	%f532, %r417;
	mul.f32 	%f533, %f530, %f532;
	sub.f32 	%f534, %f532, %f533;
	fma.rn.f32 	%f535, %f534, %f530, %f533;
	sub.f32 	%f536, %f532, %f535;
	fma.rz.f32 	%f537, %f536, %f530, %f535;
	cvt.rzi.f32.f32 	%f538, %f537;
	sub.f32 	%f759, %f532, %f538;
	sub.s32 	%r3016, %r3016, %r416;
	mov.b32 	%r3015, %f759;
	setp.ne.s32 	%p150, %r3016, 0;
	setp.ne.s32 	%p151, %r3015, 0;
	and.pred  	%p152, %p150, %p151;
	@%p152 bra 	$L__BB0_84;
$L__BB0_85:                             // %__internal_fmodf_slowpath_mod.exit.i.i2148
	setp.gt.u32 	%p153, %r46, 2139095039;
	selp.f32 	%f539, 0f7FFFFFFF, 0f4B800000, %p153;
	mul.f32 	%f540, %f759, 0f34000000;
	mul.f32 	%f760, %f539, %f540;
	bra.uni 	$L__BB0_86;
$L__BB0_76:                             // %__nv_fast_fdividef.exit.i.i.i2125
	mov.f32 	%f522, 0f40000000;
	div.approx.f32 	%f523, %f760, %f522;
	cvt.rzi.f32.f32 	%f758, %f523;
	fma.rn.f32 	%f88, %f758, 0fC0000000, %f760;
	mov.b32 	%r45, %f88;
	setp.lt.u32 	%p144, %r45, 1073741824;
	@%p144 bra 	$L__BB0_81;
// %bb.77:
	setp.lt.u32 	%p145, %r45, -2147483647;
	@%p145 bra 	$L__BB0_79;
// %bb.78:
	add.f32 	%f528, %f758, 0fBF800000;
	setp.lt.f32 	%p148, %f88, 0fC0000000;
	add.f32 	%f529, %f528, 0fBF800000;
	selp.f32 	%f758, %f529, %f528, %p148;
	bra.uni 	$L__BB0_81;
$L__BB0_79:
	add.f32 	%f758, %f758, 0f3F800000;
	setp.ltu.f32 	%p146, %f88, 0f40800000;
	@%p146 bra 	$L__BB0_81;
// %bb.80:                              // %__nv_fmaf_rn.exit.i.i.i2129
	add.f32 	%f524, %f758, 0f3F800000;
	fma.rn.f32 	%f526, %f522, 0fC0400000, %f88;
	setp.ge.f32 	%p147, %f526, 0f00000000;
	add.f32 	%f527, %f524, 0f3F800000;
	selp.f32 	%f758, %f527, %f524, %p147;
$L__BB0_81:                             // %__internal_fmodf_fastpath_quot.exit.i.i2132
	fma.rn.f32 	%f760, %f758, 0fC0000000, %f760;
$L__BB0_86:                             // %__internal_fmodf_kernel.exit.i2151
	setp.eq.s32 	%p32, %r303, 0;
	neg.f32 	%f248, %f246;
	add.s32 	%r304, %r301, 1;
	cvt.rzi.f32.f32 	%f253, %f784;
	selp.f32 	%f301, %f299, %f300, %p51;
	and.b32  	%r320, %r318, 2;
	setp.eq.s32 	%p138, %r411, 0;
	neg.f32 	%f510, %f508;
	add.s32 	%r412, %r409, 1;
	cvt.rzi.f32.f32 	%f515, %f788;
	abs.f32 	%f541, %f760;
	setp.gtu.f32 	%p154, %f541, 0f7F800000;
	@%p154 bra 	$L__BB0_88;
// %bb.87:
	mov.b32 	%r418, %f203;
	and.b32  	%r419, %r418, -2147483648;
	mov.b32 	%r420, %f760;
	or.b32  	%r421, %r419, %r420;
	mov.b32 	%f760, %r421;
$L__BB0_88:                             // %__nv_fmodf.exit2152
	selp.f32 	%f247, %f245, %f244, %p31;
	selp.f32 	%f249, %f246, %f248, %p32;
	and.b32  	%r305, %r304, 2;
	setp.eq.f32 	%p34, %f253, %f784;
	mul.f32 	%f254, %f784, 0f00000000;
	setp.eq.s32 	%p52, %r320, 0;
	neg.f32 	%f303, %f301;
	add.s32 	%r321, %r318, 1;
	cvt.rzi.f32.f32 	%f307, %f734;
	selp.f32 	%f509, %f507, %f506, %p137;
	selp.f32 	%f511, %f508, %f510, %p138;
	and.b32  	%r413, %r412, 2;
	setp.eq.f32 	%p140, %f515, %f788;
	mul.f32 	%f516, %f788, 0f00000000;
	add.f32 	%f542, %f760, %f760;
	mov.b32 	%r422, %f542;
	and.b32  	%r423, %r422, -2147483648;
	or.b32  	%r424, %r423, 1056964608;
	mov.b32 	%f543, %r424;
	add.f32 	%f544, %f542, %f543;
	cvt.rzi.f32.f32 	%f545, %f544;
	abs.f32 	%f546, %f542;
	setp.gt.f32 	%p155, %f546, 0f4B000000;
	selp.f32 	%f547, %f542, %f545, %p155;
	cvt.rzi.f32.f32 	%f548, %f542;
	setp.lt.f32 	%p156, %f546, 0f3F000000;
	selp.f32 	%f549, %f548, %f547, %p156;
	cvt.rzi.s32.f32 	%r425, %f549;
	fma.rn.f32 	%f550, %f549, 0fBF000000, %f760;
	mul.f32 	%f551, %f550, %f550;
	fma.rn.f32 	%f552, %f551, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f553, %f551, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f554, %f552, %f551, 0fC0A55DF6;
	fma.rn.f32 	%f555, %f553, %f551, 0f4081E0CF;
	fma.rn.f32 	%f556, %f551, %f550, 0f00000000;
	fma.rn.f32 	%f557, %f555, %f551, 0fC09DE9E6;
	fma.rn.f32 	%f558, %f554, %f556, 0f00000000;
	fma.rn.f32 	%f559, %f557, %f551, 0f3F800000;
	fma.rn.f32 	%f560, %f550, 0f40490FDB, %f558;
	and.b32  	%r426, %r425, 1;
	setp.eq.b32 	%p157, %r426, 1;
	selp.f32 	%f561, %f559, %f560, %p157;
	and.b32  	%r427, %r425, 2;
	setp.eq.s32 	%p158, %r427, 0;
	neg.f32 	%f563, %f561;
	add.s32 	%r428, %r425, 1;
	cvt.rzi.f32.f32 	%f568, %f760;
	cvt.rn.f32.s32 	%f572, %r151;
	div.approx.f32 	%f104, %f572, %f521;
	abs.f32 	%f764, %f104;
	setp.lt.f32 	%p162, %f764, 0f40000000;
	@%p162 bra 	$L__BB0_100;
// %bb.89:
	setp.gtu.f32 	%p163, %f764, 0f4B800000;
	@%p163 bra 	$L__BB0_96;
	bra.uni 	$L__BB0_90;
$L__BB0_96:
	mov.b32 	%r54, %f764;
	and.b32  	%r430, %r54, 8388607;
	or.b32  	%r3017, %r430, 1065353216;
	mov.b32 	%f763, %r3017;
	add.s32 	%r431, %r54, -1073741824;
	and.b32  	%r3018, %r431, -8388608;
	setp.eq.s32 	%p169, %r3018, 0;
	@%p169 bra 	$L__BB0_99;
// %bb.97:                              // %__nv_fmaf_rn.exit4.i.i.i2177.preheader
	mov.f32 	%f583, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f582,%f583;
	// end inline asm
$L__BB0_98:                             // %__nv_fmaf_rn.exit4.i.i.i2177
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r432, %r3018, 192937984;
	add.s32 	%r433, %r3017, %r432;
	mov.b32 	%f584, %r433;
	mul.f32 	%f585, %f582, %f584;
	sub.f32 	%f586, %f584, %f585;
	fma.rn.f32 	%f587, %f586, %f582, %f585;
	sub.f32 	%f588, %f584, %f587;
	fma.rz.f32 	%f589, %f588, %f582, %f587;
	cvt.rzi.f32.f32 	%f590, %f589;
	sub.f32 	%f763, %f584, %f590;
	sub.s32 	%r3018, %r3018, %r432;
	mov.b32 	%r3017, %f763;
	setp.ne.s32 	%p170, %r3018, 0;
	setp.ne.s32 	%p171, %r3017, 0;
	and.pred  	%p172, %p170, %p171;
	@%p172 bra 	$L__BB0_98;
$L__BB0_99:                             // %__internal_fmodf_slowpath_mod.exit.i.i2179
	setp.gt.u32 	%p173, %r54, 2139095039;
	selp.f32 	%f591, 0f7FFFFFFF, 0f4B800000, %p173;
	mul.f32 	%f592, %f763, 0f34000000;
	mul.f32 	%f764, %f591, %f592;
	bra.uni 	$L__BB0_100;
$L__BB0_90:                             // %__nv_fast_fdividef.exit.i.i.i2156
	mov.f32 	%f574, 0f40000000;
	div.approx.f32 	%f575, %f764, %f574;
	cvt.rzi.f32.f32 	%f762, %f575;
	fma.rn.f32 	%f107, %f762, 0fC0000000, %f764;
	mov.b32 	%r53, %f107;
	setp.lt.u32 	%p164, %r53, 1073741824;
	@%p164 bra 	$L__BB0_95;
// %bb.91:
	setp.lt.u32 	%p165, %r53, -2147483647;
	@%p165 bra 	$L__BB0_93;
// %bb.92:
	add.f32 	%f580, %f762, 0fBF800000;
	setp.lt.f32 	%p168, %f107, 0fC0000000;
	add.f32 	%f581, %f580, 0fBF800000;
	selp.f32 	%f762, %f581, %f580, %p168;
	bra.uni 	$L__BB0_95;
$L__BB0_93:
	add.f32 	%f762, %f762, 0f3F800000;
	setp.ltu.f32 	%p166, %f107, 0f40800000;
	@%p166 bra 	$L__BB0_95;
// %bb.94:                              // %__nv_fmaf_rn.exit.i.i.i2160
	add.f32 	%f576, %f762, 0f3F800000;
	fma.rn.f32 	%f578, %f574, 0fC0400000, %f107;
	setp.ge.f32 	%p167, %f578, 0f00000000;
	add.f32 	%f579, %f576, 0f3F800000;
	selp.f32 	%f762, %f579, %f576, %p167;
$L__BB0_95:                             // %__internal_fmodf_fastpath_quot.exit.i.i2163
	fma.rn.f32 	%f764, %f762, 0fC0000000, %f764;
$L__BB0_100:                            // %__internal_fmodf_kernel.exit.i2182
	setp.eq.s32 	%p33, %r305, 0;
	sub.f32 	%f251, %f250, %f247;
	selp.f32 	%f255, %f254, %f249, %p34;
	abs.f32 	%f256, %f784;
	selp.f32 	%f302, %f300, %f299, %p51;
	selp.f32 	%f304, %f301, %f303, %p52;
	and.b32  	%r322, %r321, 2;
	setp.eq.f32 	%p54, %f307, %f734;
	mul.f32 	%f308, %f734, 0f00000000;
	setp.eq.s32 	%p139, %r413, 0;
	sub.f32 	%f513, %f776, %f509;
	selp.f32 	%f517, %f516, %f511, %p140;
	abs.f32 	%f518, %f788;
	selp.f32 	%f562, %f560, %f559, %p157;
	selp.f32 	%f564, %f561, %f563, %p158;
	and.b32  	%r429, %r428, 2;
	setp.eq.f32 	%p160, %f568, %f760;
	mul.f32 	%f569, %f760, 0f00000000;
	abs.f32 	%f593, %f764;
	setp.gtu.f32 	%p174, %f593, 0f7F800000;
	@%p174 bra 	$L__BB0_102;
// %bb.101:
	mov.b32 	%r434, %f104;
	and.b32  	%r435, %r434, -2147483648;
	mov.b32 	%r436, %f764;
	or.b32  	%r437, %r435, %r436;
	mov.b32 	%f764, %r437;
$L__BB0_102:                            // %__nv_fmodf.exit2183
	selp.f32 	%f252, %f247, %f251, %p33;
	setp.gt.f32 	%p35, %f256, 0f4B800000;
	add.f32 	%f257, %f255, 0f3F800000;
	setp.eq.s32 	%p53, %r322, 0;
	sub.f32 	%f305, %f250, %f302;
	selp.f32 	%f16, %f308, %f304, %p54;
	abs.f32 	%f309, %f734;
	selp.f32 	%f514, %f509, %f513, %p139;
	setp.gt.f32 	%p141, %f518, 0f4B800000;
	add.f32 	%f519, %f517, 0f3F800000;
	setp.eq.s32 	%p159, %r429, 0;
	sub.f32 	%f566, %f776, %f562;
	selp.f32 	%f102, %f569, %f564, %p160;
	abs.f32 	%f570, %f760;
	add.f32 	%f595, %f764, %f764;
	mov.b32 	%r444, %f595;
	and.b32  	%r445, %r444, -2147483648;
	or.b32  	%r446, %r445, 1056964608;
	mov.b32 	%f596, %r446;
	add.f32 	%f597, %f595, %f596;
	cvt.rzi.f32.f32 	%f598, %f597;
	abs.f32 	%f599, %f595;
	setp.gt.f32 	%p175, %f599, 0f4B000000;
	selp.f32 	%f600, %f595, %f598, %p175;
	cvt.rzi.f32.f32 	%f601, %f595;
	setp.lt.f32 	%p176, %f599, 0f3F000000;
	selp.f32 	%f602, %f601, %f600, %p176;
	cvt.rzi.s32.f32 	%r447, %f602;
	fma.rn.f32 	%f603, %f602, 0fBF000000, %f764;
	mul.f32 	%f604, %f603, %f603;
	fma.rn.f32 	%f605, %f604, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f606, %f604, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f607, %f605, %f604, 0fC0A55DF6;
	fma.rn.f32 	%f608, %f606, %f604, 0f4081E0CF;
	fma.rn.f32 	%f609, %f604, %f603, 0f00000000;
	fma.rn.f32 	%f610, %f608, %f604, 0fC09DE9E6;
	fma.rn.f32 	%f611, %f607, %f609, 0f00000000;
	fma.rn.f32 	%f612, %f610, %f604, 0f3F800000;
	fma.rn.f32 	%f613, %f603, 0f40490FDB, %f611;
	and.b32  	%r448, %r447, 1;
	setp.eq.b32 	%p177, %r448, 1;
	selp.f32 	%f614, %f612, %f613, %p177;
	selp.f32 	%f615, %f613, %f612, %p177;
	and.b32  	%r449, %r447, 2;
	setp.eq.s32 	%p178, %r449, 0;
	neg.f32 	%f616, %f614;
	selp.f32 	%f617, %f614, %f616, %p178;
	add.s32 	%r450, %r447, 1;
	and.b32  	%r451, %r450, 2;
	setp.eq.s32 	%p179, %r451, 0;
	sub.f32 	%f618, %f776, %f615;
	cvt.rzi.f32.f32 	%f620, %f764;
	setp.eq.f32 	%p180, %f620, %f764;
	mul.f32 	%f621, %f764, 0f00000000;
	selp.f32 	%f622, %f621, %f617, %p180;
	abs.f32 	%f623, %f764;
	and.b32  	%r64, %r272, 1;
	shr.u32 	%r65, %r272, 4;
	setp.ne.s32 	%p182, %r64, %r65;
	mov.f32 	%f770, %f776;
	mov.f32 	%f779, %f776;
	@%p182 bra 	$L__BB0_118;
// %bb.103:                             // %L741
	mov.f32 	%f626, 0f3F800000;
	mov.f32 	%f627, 0f00000000;
	div.approx.f32 	%f121, %f627, %f626;
	abs.f32 	%f768, %f121;
	setp.lt.f32 	%p183, %f768, 0f40000000;
	@%p183 bra 	$L__BB0_115;
// %bb.104:
	setp.gtu.f32 	%p184, %f768, 0f4B800000;
	@%p184 bra 	$L__BB0_111;
	bra.uni 	$L__BB0_105;
$L__BB0_111:
	mov.b32 	%r67, %f768;
	and.b32  	%r452, %r67, 8388607;
	or.b32  	%r3019, %r452, 1065353216;
	mov.b32 	%f767, %r3019;
	add.s32 	%r453, %r67, -1073741824;
	and.b32  	%r3020, %r453, -8388608;
	setp.eq.s32 	%p190, %r3020, 0;
	@%p190 bra 	$L__BB0_114;
// %bb.112:                             // %__nv_fmaf_rn.exit4.i.i.i2208.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f636,%f626;
	// end inline asm
$L__BB0_113:                            // %__nv_fmaf_rn.exit4.i.i.i2208
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r454, %r3020, 192937984;
	add.s32 	%r455, %r3019, %r454;
	mov.b32 	%f638, %r455;
	mul.f32 	%f639, %f636, %f638;
	sub.f32 	%f640, %f638, %f639;
	fma.rn.f32 	%f641, %f640, %f636, %f639;
	sub.f32 	%f642, %f638, %f641;
	fma.rz.f32 	%f643, %f642, %f636, %f641;
	cvt.rzi.f32.f32 	%f644, %f643;
	sub.f32 	%f767, %f638, %f644;
	sub.s32 	%r3020, %r3020, %r454;
	mov.b32 	%r3019, %f767;
	setp.ne.s32 	%p191, %r3020, 0;
	setp.ne.s32 	%p192, %r3019, 0;
	and.pred  	%p193, %p191, %p192;
	@%p193 bra 	$L__BB0_113;
$L__BB0_114:                            // %__internal_fmodf_slowpath_mod.exit.i.i2210
	setp.gt.u32 	%p194, %r67, 2139095039;
	selp.f32 	%f645, 0f7FFFFFFF, 0f4B800000, %p194;
	mul.f32 	%f646, %f767, 0f34000000;
	mul.f32 	%f768, %f645, %f646;
	bra.uni 	$L__BB0_115;
$L__BB0_105:                            // %__nv_fast_fdividef.exit.i.i.i2187
	mov.f32 	%f628, 0f40000000;
	div.approx.f32 	%f629, %f768, %f628;
	cvt.rzi.f32.f32 	%f766, %f629;
	fma.rn.f32 	%f124, %f766, 0fC0000000, %f768;
	mov.b32 	%r66, %f124;
	setp.lt.u32 	%p185, %r66, 1073741824;
	@%p185 bra 	$L__BB0_110;
// %bb.106:
	setp.lt.u32 	%p186, %r66, -2147483647;
	@%p186 bra 	$L__BB0_108;
// %bb.107:
	add.f32 	%f634, %f766, 0fBF800000;
	setp.lt.f32 	%p189, %f124, 0fC0000000;
	add.f32 	%f635, %f634, 0fBF800000;
	selp.f32 	%f766, %f635, %f634, %p189;
	bra.uni 	$L__BB0_110;
$L__BB0_108:
	add.f32 	%f766, %f766, 0f3F800000;
	setp.ltu.f32 	%p187, %f124, 0f40800000;
	@%p187 bra 	$L__BB0_110;
// %bb.109:                             // %__nv_fmaf_rn.exit.i.i.i2191
	add.f32 	%f630, %f766, 0f3F800000;
	fma.rn.f32 	%f632, %f628, 0fC0400000, %f124;
	setp.ge.f32 	%p188, %f632, 0f00000000;
	add.f32 	%f633, %f630, 0f3F800000;
	selp.f32 	%f766, %f633, %f630, %p188;
$L__BB0_110:                            // %__internal_fmodf_fastpath_quot.exit.i.i2194
	fma.rn.f32 	%f768, %f766, 0fC0000000, %f768;
$L__BB0_115:                            // %__internal_fmodf_kernel.exit.i2213
	abs.f32 	%f647, %f768;
	setp.gtu.f32 	%p195, %f647, 0f7F800000;
	@%p195 bra 	$L__BB0_117;
// %bb.116:
	mov.b32 	%r456, %f121;
	and.b32  	%r457, %r456, -2147483648;
	mov.b32 	%r458, %f768;
	or.b32  	%r459, %r457, %r458;
	mov.b32 	%f768, %r459;
$L__BB0_117:                            // %__nv_fmodf.exit2214
	add.f32 	%f648, %f768, %f768;
	mov.b32 	%r460, %f648;
	and.b32  	%r461, %r460, -2147483648;
	or.b32  	%r462, %r461, 1056964608;
	mov.b32 	%f649, %r462;
	add.f32 	%f650, %f648, %f649;
	cvt.rzi.f32.f32 	%f651, %f650;
	abs.f32 	%f652, %f648;
	setp.gt.f32 	%p196, %f652, 0f4B000000;
	selp.f32 	%f653, %f648, %f651, %p196;
	cvt.rzi.f32.f32 	%f654, %f648;
	setp.lt.f32 	%p197, %f652, 0f3F000000;
	selp.f32 	%f655, %f654, %f653, %p197;
	cvt.rzi.s32.f32 	%r463, %f655;
	fma.rn.f32 	%f656, %f655, 0fBF000000, %f768;
	mul.f32 	%f657, %f656, %f656;
	fma.rn.f32 	%f658, %f657, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f659, %f657, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f660, %f658, %f657, 0fC0A55DF6;
	fma.rn.f32 	%f661, %f659, %f657, 0f4081E0CF;
	fma.rn.f32 	%f662, %f657, %f656, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f657, 0fC09DE9E6;
	fma.rn.f32 	%f664, %f660, %f662, 0f00000000;
	fma.rn.f32 	%f665, %f663, %f657, 0f3F800000;
	fma.rn.f32 	%f666, %f656, 0f40490FDB, %f664;
	and.b32  	%r464, %r463, 1;
	setp.eq.b32 	%p198, %r464, 1;
	selp.f32 	%f667, %f665, %f666, %p198;
	selp.f32 	%f668, %f666, %f665, %p198;
	and.b32  	%r465, %r463, 2;
	setp.eq.s32 	%p199, %r465, 0;
	neg.f32 	%f669, %f667;
	selp.f32 	%f670, %f667, %f669, %p199;
	add.s32 	%r466, %r463, 1;
	and.b32  	%r467, %r466, 2;
	setp.eq.s32 	%p200, %r467, 0;
	sub.f32 	%f672, %f627, %f668;
	selp.f32 	%f673, %f668, %f672, %p200;
	cvt.rzi.f32.f32 	%f674, %f768;
	setp.eq.f32 	%p201, %f674, %f768;
	mul.f32 	%f675, %f768, 0f00000000;
	selp.f32 	%f779, %f675, %f670, %p201;
	abs.f32 	%f676, %f768;
	setp.gt.f32 	%p202, %f676, 0f4B800000;
	add.f32 	%f677, %f779, 0f3F800000;
	selp.f32 	%f770, %f677, %f673, %p202;
$L__BB0_118:                            // %L780
	selp.f32 	%f258, %f257, %f252, %p35;
	selp.f32 	%f306, %f302, %f305, %p53;
	setp.gt.f32 	%p55, %f309, 0f4B800000;
	add.f32 	%f310, %f16, 0f3F800000;
	selp.f32 	%f520, %f519, %f514, %p141;
	selp.f32 	%f567, %f562, %f566, %p159;
	setp.gt.f32 	%p161, %f570, 0f4B800000;
	add.f32 	%f571, %f102, 0f3F800000;
	selp.f32 	%f619, %f615, %f618, %p179;
	setp.gt.f32 	%p181, %f623, 0f4B800000;
	add.f32 	%f624, %f622, 0f3F800000;
	and.b32  	%r63, %r151, 1;
	mov.f32 	%f781, %f776;
	@%p182 bra 	$L__BB0_134;
// %bb.119:                             // %L783
	cvt.rn.f32.s32 	%f679, %r63;
	mov.f32 	%f680, 0f3F800000;
	div.approx.f32 	%f142, %f679, %f680;
	abs.f32 	%f774, %f142;
	setp.lt.f32 	%p204, %f774, 0f40000000;
	@%p204 bra 	$L__BB0_131;
// %bb.120:
	setp.gtu.f32 	%p205, %f774, 0f4B800000;
	@%p205 bra 	$L__BB0_127;
	bra.uni 	$L__BB0_121;
$L__BB0_127:
	mov.b32 	%r75, %f774;
	and.b32  	%r468, %r75, 8388607;
	or.b32  	%r3021, %r468, 1065353216;
	mov.b32 	%f773, %r3021;
	add.s32 	%r469, %r75, -1073741824;
	and.b32  	%r3022, %r469, -8388608;
	setp.eq.s32 	%p211, %r3022, 0;
	@%p211 bra 	$L__BB0_130;
// %bb.128:                             // %__nv_fmaf_rn.exit4.i.i.i2239.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f689,%f680;
	// end inline asm
$L__BB0_129:                            // %__nv_fmaf_rn.exit4.i.i.i2239
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r470, %r3022, 192937984;
	add.s32 	%r471, %r3021, %r470;
	mov.b32 	%f691, %r471;
	mul.f32 	%f692, %f689, %f691;
	sub.f32 	%f693, %f691, %f692;
	fma.rn.f32 	%f694, %f693, %f689, %f692;
	sub.f32 	%f695, %f691, %f694;
	fma.rz.f32 	%f696, %f695, %f689, %f694;
	cvt.rzi.f32.f32 	%f697, %f696;
	sub.f32 	%f773, %f691, %f697;
	sub.s32 	%r3022, %r3022, %r470;
	mov.b32 	%r3021, %f773;
	setp.ne.s32 	%p212, %r3022, 0;
	setp.ne.s32 	%p213, %r3021, 0;
	and.pred  	%p214, %p212, %p213;
	@%p214 bra 	$L__BB0_129;
$L__BB0_130:                            // %__internal_fmodf_slowpath_mod.exit.i.i2241
	setp.gt.u32 	%p215, %r75, 2139095039;
	selp.f32 	%f698, 0f7FFFFFFF, 0f4B800000, %p215;
	mul.f32 	%f699, %f773, 0f34000000;
	mul.f32 	%f774, %f698, %f699;
	bra.uni 	$L__BB0_131;
$L__BB0_121:                            // %__nv_fast_fdividef.exit.i.i.i2218
	mov.f32 	%f681, 0f40000000;
	div.approx.f32 	%f682, %f774, %f681;
	cvt.rzi.f32.f32 	%f772, %f682;
	fma.rn.f32 	%f145, %f772, 0fC0000000, %f774;
	mov.b32 	%r74, %f145;
	setp.lt.u32 	%p206, %r74, 1073741824;
	@%p206 bra 	$L__BB0_126;
// %bb.122:
	setp.lt.u32 	%p207, %r74, -2147483647;
	@%p207 bra 	$L__BB0_124;
// %bb.123:
	add.f32 	%f687, %f772, 0fBF800000;
	setp.lt.f32 	%p210, %f145, 0fC0000000;
	add.f32 	%f688, %f687, 0fBF800000;
	selp.f32 	%f772, %f688, %f687, %p210;
	bra.uni 	$L__BB0_126;
$L__BB0_124:
	add.f32 	%f772, %f772, 0f3F800000;
	setp.ltu.f32 	%p208, %f145, 0f40800000;
	@%p208 bra 	$L__BB0_126;
// %bb.125:                             // %__nv_fmaf_rn.exit.i.i.i2222
	add.f32 	%f683, %f772, 0f3F800000;
	fma.rn.f32 	%f685, %f681, 0fC0400000, %f145;
	setp.ge.f32 	%p209, %f685, 0f00000000;
	add.f32 	%f686, %f683, 0f3F800000;
	selp.f32 	%f772, %f686, %f683, %p209;
$L__BB0_126:                            // %__internal_fmodf_fastpath_quot.exit.i.i2225
	fma.rn.f32 	%f774, %f772, 0fC0000000, %f774;
$L__BB0_131:                            // %__internal_fmodf_kernel.exit.i2244
	abs.f32 	%f700, %f774;
	setp.gtu.f32 	%p216, %f700, 0f7F800000;
	@%p216 bra 	$L__BB0_133;
// %bb.132:
	mov.b32 	%r472, %f142;
	and.b32  	%r473, %r472, -2147483648;
	mov.b32 	%r474, %f774;
	or.b32  	%r475, %r473, %r474;
	mov.b32 	%f774, %r475;
$L__BB0_133:                            // %__nv_fmodf.exit2245
	add.f32 	%f701, %f774, %f774;
	mov.b32 	%r476, %f701;
	and.b32  	%r477, %r476, -2147483648;
	or.b32  	%r478, %r477, 1056964608;
	mov.b32 	%f702, %r478;
	add.f32 	%f703, %f701, %f702;
	cvt.rzi.f32.f32 	%f704, %f703;
	abs.f32 	%f705, %f701;
	setp.gt.f32 	%p217, %f705, 0f4B000000;
	selp.f32 	%f706, %f701, %f704, %p217;
	cvt.rzi.f32.f32 	%f707, %f701;
	setp.lt.f32 	%p218, %f705, 0f3F000000;
	selp.f32 	%f708, %f707, %f706, %p218;
	cvt.rzi.s32.f32 	%r479, %f708;
	fma.rn.f32 	%f709, %f708, 0fBF000000, %f774;
	mul.f32 	%f710, %f709, %f709;
	fma.rn.f32 	%f711, %f710, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f712, %f710, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f713, %f711, %f710, 0fC0A55DF6;
	fma.rn.f32 	%f714, %f712, %f710, 0f4081E0CF;
	fma.rn.f32 	%f715, %f710, %f709, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f710, 0fC09DE9E6;
	fma.rn.f32 	%f717, %f713, %f715, 0f00000000;
	fma.rn.f32 	%f718, %f716, %f710, 0f3F800000;
	fma.rn.f32 	%f719, %f709, 0f40490FDB, %f717;
	and.b32  	%r480, %r479, 1;
	setp.eq.b32 	%p219, %r480, 1;
	selp.f32 	%f720, %f718, %f719, %p219;
	selp.f32 	%f721, %f719, %f718, %p219;
	and.b32  	%r481, %r479, 2;
	setp.eq.s32 	%p220, %r481, 0;
	neg.f32 	%f722, %f720;
	selp.f32 	%f723, %f720, %f722, %p220;
	add.s32 	%r482, %r479, 1;
	and.b32  	%r483, %r482, 2;
	setp.eq.s32 	%p221, %r483, 0;
	mov.f32 	%f724, 0f00000000;
	sub.f32 	%f725, %f724, %f721;
	selp.f32 	%f726, %f721, %f725, %p221;
	cvt.rzi.f32.f32 	%f727, %f774;
	setp.eq.f32 	%p222, %f727, %f774;
	mul.f32 	%f728, %f774, 0f00000000;
	selp.f32 	%f781, %f728, %f723, %p222;
	abs.f32 	%f729, %f774;
	setp.gt.f32 	%p223, %f729, 0f4B800000;
	add.f32 	%f730, %f781, 0f3F800000;
	selp.f32 	%f776, %f730, %f726, %p223;
$L__BB0_134:                            // %L817
	mov.b32 	%r294, %f258;
	mov.b32 	%r297, %f255;
	selp.f32 	%f17, %f310, %f306, %p55;
	mov.b32 	%r402, %f520;
	mov.b32 	%r405, %f517;
	selp.f32 	%f103, %f571, %f567, %p161;
	selp.f32 	%f625, %f624, %f619, %p181;
	mov.f32 	%f778, %f770;
	mov.f32 	%f780, %f776;
	@%p121 bra 	$L__BB0_136;
// %bb.135:                             // %L826
	neg.f32 	%f780, %f781;
	neg.f32 	%f778, %f779;
	mov.f32 	%f779, %f770;
	mov.f32 	%f781, %f776;
$L__BB0_136:                            // %L828
	xor.b32  	%r293, %r297, -2147483648;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	mov.b32 	%r345, %f17;
	mov.b32 	%r346, %f740;
	mov.b32 	%r348, %f16;
	mov.b32 	%r349, %f741;
	mov.b32 	%r389, %f754;
	mov.b32 	%r390, %f756;
	mov.b32 	%r392, %f755;
	mov.b32 	%r393, %f757;
	xor.b32  	%r401, %r405, -2147483648;
	mov.b32 	%r440, %f625;
	mov.b32 	%r439, %f103;
	mov.b32 	%r443, %f622;
	mov.b32 	%r442, %f102;
	mov.b32 	%r485, %f778;
	mov.b32 	%r486, %f780;
	mov.b32 	%r488, %f779;
	mov.b32 	%r489, %f781;
	setp.gt.u32 	%p225, %r272, 15;
	mov.u32 	%r176, 999999999;
	@%p225 bra 	$L__BB0_138;
// %bb.137:                             // %L858
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	mad.lo.s32 	%r491, %r272, 6, %r1;
	cvt.u16.u32 	%rs16, %r491;
	and.b16  	%rs17, %rs16, 255;
	mul.lo.s16 	%rs18, %rs17, 171;
	shr.u16 	%rs19, %rs18, 14;
	mul.lo.s16 	%rs20, %rs19, 96;
	sub.s16 	%rs21, %rs16, %rs20;
	cvt.u32.u16 	%r492, %rs21;
	and.b32  	%r493, %r492, 255;
	mul.wide.u32 	%rd23, %r493, 4;
	add.s64 	%rd24, %rd1, %rd23;
	ld.global.u32 	%r494, [%rd24];
	cvt.s32.s16 	%r495, %r494;
	shr.s32 	%r496, %r494, 16;
	mul.lo.s32 	%r497, %r496, 290;
	mad.lo.s32 	%r176, %r495, 33, %r497;
$L__BB0_138:                            // %pass437
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	// begin inline asm
	cvt.rn.f16x2.f32 %r292, %r294, %r293;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r295, %r297, %r294;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r344, %r346, %r345;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r347, %r349, %r348;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r388, %r390, %r389;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r391, %r393, %r392;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r400, %r402, %r401;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r403, %r405, %r402;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r438, %r440, %r439;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r441, %r443, %r442;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r484, %r486, %r485;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r487, %r489, %r488;
	// end inline asm
	shl.b32 	%r499, %r1, 1;
	and.b32  	%r500, %r499, 2;
	shr.u32 	%r177, %r272, 3;
	bfe.u32 	%r501, %r272, 3, 1;
	or.b32  	%r502, %r500, %r501;
	mul.lo.s32 	%r503, %r150, 24;
	and.b32  	%r504, %r177, 2;
	or.b32  	%r178, %r504, %r63;
	cvt.u16.u32 	%rs24, %r178;
	mul.lo.s16 	%rs25, %rs24, 171;
	shr.u16 	%rs26, %rs25, 9;
	mul.lo.s16 	%rs27, %rs26, 3;
	sub.s16 	%rs28, %rs24, %rs27;
	cvt.u32.u16 	%r505, %rs28;
	and.b32  	%r506, %r505, 255;
	and.b16  	%rs29, %rs28, 255;
	mul.wide.u16 	%r507, %rs29, 8;
	add.s32 	%r508, %r503, %r4;
	or.b32  	%r509, %r508, %r502;
	add.s32 	%r510, %r509, %r507;
	mul.wide.u32 	%rd25, %r510, 4;
	add.s64 	%rd26, %rd2, %rd25;
	ld.global.u32 	%r179, [%rd26];
	or.b32  	%r511, %r502, 4;
	cvt.u64.u32 	%rd27, %r507;
	cvt.u64.u32 	%rd28, %r508;
	cvt.u64.u32 	%rd29, %r502;
	add.s64 	%rd30, %rd28, %rd29;
	add.s64 	%rd31, %rd30, %rd27;
	shl.b64 	%rd32, %rd31, 2;
	add.s64 	%rd33, %rd2, %rd32;
	ld.global.u32 	%r180, [%rd33+16];
	cvt.u64.u32 	%rd34, %r503;
	cvt.u64.u32 	%rd35, %r4;
	add.s64 	%rd36, %rd35, %rd34;
	add.s64 	%rd37, %rd36, %rd29;
	add.s64 	%rd38, %rd37, %rd27;
	shl.b64 	%rd39, %rd38, 2;
	add.s64 	%rd40, %rd2, %rd39;
	ld.global.u32 	%r181, [%rd40+384];
	cvt.u64.u32 	%rd41, %r511;
	add.s64 	%rd42, %rd36, %rd41;
	add.s64 	%rd43, %rd42, %rd27;
	shl.b64 	%rd44, %rd43, 2;
	add.s64 	%rd45, %rd2, %rd44;
	ld.global.u32 	%r182, [%rd45+384];
	shl.b32 	%r512, %r3, 5;
	shl.b32 	%r183, %r1, 2;
	shl.b32 	%r513, %r272, 2;
	and.b32  	%r514, %r513, 28;
	or.b32  	%r184, %r514, %r512;
	and.b32  	%r185, %r272, 4;
	bfe.s32 	%r515, %r272, 2, 1;
	shl.b32 	%r516, %r272, 4;
	and.b32  	%r517, %r163, 8;
	or.b32  	%r518, %r517, %r516;
	bfe.u32 	%r519, %r518, 3, 3;
	mul.lo.s32 	%r186, %r519, 260;
	cvt.u16.u32 	%rs30, %r272;
	and.b16  	%rs31, %rs30, 255;
	mul.lo.s16 	%rs32, %rs31, 171;
	shr.u16 	%rs33, %rs32, 12;
	mul.lo.s16 	%rs34, %rs33, 24;
	sub.s16 	%rs35, %rs30, %rs34;
	cvt.u32.u16 	%r520, %rs35;
	and.b32  	%r187, %r520, 255;
	add.s32 	%r521, %r1, 6;
	add.s32 	%r522, %r2, 192;
	and.b32  	%r523, %r522, 224;
	shr.u32 	%r524, %r521, 3;
	mad.lo.s32 	%r188, %r524, 260, %r523;
	add.s32 	%r525, %r1, 12;
	add.s32 	%r526, %r2, 128;
	and.b32  	%r527, %r526, 224;
	shr.u32 	%r528, %r525, 3;
	mad.lo.s32 	%r189, %r528, 260, %r527;
	add.s32 	%r529, %r1, 18;
	add.s32 	%r530, %r2, 64;
	and.b32  	%r531, %r530, 224;
	shr.u32 	%r532, %r529, 3;
	mad.lo.s32 	%r190, %r532, 260, %r531;
	or.b32  	%r191, %r2, 780;
	add.s32 	%r533, %r1, 30;
	shr.u32 	%r534, %r533, 3;
	mad.lo.s32 	%r192, %r534, 260, %r523;
	add.s32 	%r535, %r1, 36;
	shr.u32 	%r536, %r535, 3;
	mad.lo.s32 	%r193, %r536, 260, %r527;
	add.s32 	%r537, %r1, 42;
	shr.u32 	%r538, %r537, 3;
	mad.lo.s32 	%r194, %r538, 260, %r531;
	or.b32  	%r195, %r2, 1560;
	add.s32 	%r539, %r1, 54;
	shr.u32 	%r540, %r539, 3;
	mad.lo.s32 	%r196, %r540, 260, %r523;
	add.s32 	%r541, %r1, 60;
	bfe.u32 	%r542, %r541, 3, 3;
	mad.lo.s32 	%r197, %r542, 260, %r527;
	shr.u32 	%r543, %r1, 1;
	cvt.u16.u32 	%rs36, %r543;
	and.b16  	%rs37, %rs36, 255;
	mul.lo.s16 	%rs38, %rs37, 171;
	shr.u16 	%rs39, %rs38, 9;
	mul.lo.s16 	%rs40, %rs39, 3;
	sub.s16 	%rs41, %rs36, %rs40;
	cvt.u32.u16 	%r544, %rs41;
	and.b32  	%r198, %r544, 255;
	mul.lo.s32 	%r545, %r150, 870;
	mad.lo.s32 	%r546, %r502, 33, %r545;
	mad.lo.s32 	%r199, %r506, 290, %r546;
	add.s32 	%r200, %r199, 132;
	setp.lt.u32 	%p227, %r272, 4;
	setp.eq.s32 	%p228, %r151, 1;
	setp.eq.s32 	%p229, %r151, 4;
	setp.eq.s32 	%p230, %r151, 5;
	bfe.s32 	%r547, %r272, 3, 1;
	and.b32  	%r201, %r547, 98;
	setp.eq.s32 	%p231, %r64, 0;
	selp.b32 	%r202, 0, 784, %p231;
	selp.b32 	%r203, 0, 392, %p121;
	or.b32  	%r204, %r500, %r65;
	and.b32  	%r205, %r515, 196;
	or.b32  	%r206, %r201, %r202;
	add.s32 	%r548, %r206, %r203;
	add.s32 	%r549, %r548, %r204;
	add.s32 	%r207, %r549, %r205;
	add.s32 	%r550, %r548, 1576;
	add.s32 	%r551, %r550, %r204;
	add.s32 	%r208, %r551, %r205;
	or.b32  	%r209, %r204, 4;
	add.s32 	%r552, %r548, %r209;
	add.s32 	%r210, %r552, %r205;
	add.s32 	%r553, %r550, %r209;
	add.s32 	%r211, %r553, %r205;
	add.s32 	%r554, %r548, 1584;
	add.s32 	%r555, %r554, %r204;
	add.s32 	%r212, %r555, %r205;
	add.s32 	%r556, %r554, %r209;
	add.s32 	%r213, %r556, %r205;
	shr.u32 	%r557, %r1, 2;
	mul.lo.s32 	%r558, %r65, 784;
	and.b32  	%r559, %r1, 1;
	neg.s32 	%r560, %r559;
	and.b32  	%r561, %r560, 392;
	and.b32  	%r562, %r163, 6;
	and.b32  	%r563, %r547, 1576;
	bfe.s32 	%r564, %r1, 1, 1;
	and.b32  	%r565, %r564, 196;
	mad.lo.s32 	%r566, %r557, 98, %r558;
	add.s32 	%r567, %r566, %r562;
	or.b32  	%r568, %r567, %r63;
	add.s32 	%r569, %r568, %r561;
	add.s32 	%r570, %r569, %r563;
	add.s32 	%r214, %r570, %r565;
	add.s32 	%r215, %r214, 8;
	mul.lo.s32 	%r571, %r269, 4718592;
	or.b32  	%r572, %r177, %r183;
	cvt.u16.u32 	%rs42, %r572;
	and.b16  	%rs43, %rs42, 255;
	mul.lo.s16 	%rs44, %rs43, 171;
	shr.u16 	%rs45, %rs44, 9;
	and.b16  	%rs46, %rs45, 24;
	add.s16 	%rs47, %rs42, %rs46;
	shl.b16 	%rs48, %rs47, 3;
	cvt.u32.u16 	%r573, %rs48;
	and.b32  	%r574, %r573, 248;
	and.b32  	%r575, %r272, 7;
	or.b32  	%r576, %r575, %r4;
	add.s32 	%r216, %r576, %r574;
	cvt.s64.s32 	%rd6, %r571;
	add.s32 	%r577, %r199, %r198;
	mul.wide.u32 	%rd46, %r577, 4;
	mov.u64 	%rd47, shmem;
	add.s64 	%rd7, %rd47, %rd46;
	add.s32 	%r578, %r200, %r198;
	mul.wide.u32 	%rd48, %r578, 4;
	add.s64 	%rd8, %rd47, %rd48;
	cvt.u64.u32 	%rd49, %r199;
	cvt.u64.u16 	%rd50, %rs41;
	and.b64  	%rd51, %rd50, 255;
	add.s64 	%rd52, %rd49, %rd51;
	shl.b64 	%rd53, %rd52, 2;
	add.s64 	%rd9, %rd47, %rd53;
	cvt.u64.u32 	%rd54, %r200;
	add.s64 	%rd55, %rd54, %rd51;
	shl.b64 	%rd56, %rd55, 2;
	add.s64 	%rd10, %rd47, %rd56;
	or.pred  	%p232, %p227, %p228;
	and.b32  	%r579, %r272, 24;
	setp.eq.s32 	%p233, %r579, 8;
	or.pred  	%p234, %p232, %p233;
	or.pred  	%p235, %p234, %p229;
	setp.eq.s32 	%p236, %r579, 24;
	or.pred  	%p237, %p230, %p236;
	selp.b32 	%r217, 1145324612, -286331154, %p234;
	or.pred  	%p1, %p235, %p237;
	selp.b32 	%r218, 1145324612, -286331154, %p232;
	add.s32 	%r580, %r151, -1;
	setp.lt.u32 	%p238, %r580, 3;
	or.pred  	%p2, %p227, %p238;
	setp.eq.s32 	%p239, %r579, 16;
	or.pred  	%p3, %p239, %p236;
	selp.b32 	%r219, 1145324612, -286331154, %p239;
	or.b32  	%r85, %r198, 24;
	and.b16  	%rs9, %rs41, 255;
	mov.u32 	%r87, 0;
	mov.u16 	%rs2, 0;
	mov.u16 	%rs1, 29;
	selp.b32 	%r242, %r218, %r219, %p2;
	or.pred  	%p254, %p2, %p3;
	mov.u32 	%r86, %r198;
	mov.u32 	%r107, %r87;
	mov.u32 	%r108, %r87;
	mov.u32 	%r109, %r87;
	bra.uni 	$L__BB0_188;
$L__BB0_160:                            // %L30923
                                        //   in Loop: Header=BB0_188 Depth=1
	add.s32 	%r147, %r87, 48;
	add.s16 	%rs2, %rs2, 48;
	add.s32 	%r86, %r86, 48;
	add.s16 	%rs1, %rs1, 48;
	add.s32 	%r85, %r85, 48;
	setp.ne.s32 	%p291, %r87, 432;
	mov.u32 	%r87, %r147;
	@%p291 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_161;
$L__BB0_188:                            // %L1618
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_140 Depth 2
                                        //     Child Loop BB0_150 Depth 2
	add.s32 	%r581, %r87, %r267;
	setp.lt.s32 	%p240, %r581, %r268;
	@%p240 bra 	$L__BB0_189;
	bra.uni 	$L__BB0_161;
$L__BB0_189:                            // %oksrem752
                                        //   in Loop: Header=BB0_188 Depth=1
	setp.eq.s32 	%p241, %r178, 3;
	setp.gt.u32 	%p242, %r1, 3;
	setp.eq.s32 	%p243, %r185, 0;
	mul.hi.u32 	%r679, %r87, -1431655765;
	shr.u32 	%r680, %r679, 5;
	mul.lo.s32 	%r681, %r680, 48;
	or.b32  	%r682, %r681, %r177;
	add.s32 	%r683, %r682, %r183;
	shr.s32 	%r684, %r683, 31;
	shr.u32 	%r685, %r684, 23;
	add.s32 	%r686, %r683, %r685;
	and.b32  	%r687, %r686, -512;
	sub.s32 	%r688, %r683, %r687;
	add.s32 	%r689, %r688, %r267;
	mad.lo.s32 	%r690, %r689, 786432, %r184;
	mul.hi.s32 	%r691, %r690, 715827883;
	shr.u32 	%r692, %r691, 31;
	shr.s32 	%r693, %r691, 26;
	add.s32 	%r694, %r693, %r692;
	setp.lt.s32 	%p244, %r690, 0;
	mul.lo.s32 	%r695, %r694, 402653184;
	setp.ne.s32 	%p245, %r695, %r690;
	and.pred  	%p246, %p244, %p245;
	selp.s32 	%r696, -1, 0, %p246;
	add.s32 	%r697, %r694, %r696;
	mad.lo.s32 	%r698, %r697, -402653184, %r690;
	mul.wide.s32 	%rd57, %r698, 4;
	add.s64 	%rd58, %rd3, %rd57;
	ld.global.v4.u32 	{%r699, %r700, %r701, %r702}, [%rd58];
	add.s32 	%r703, %r681, 24;
	or.b32  	%r704, %r703, %r177;
	add.s32 	%r705, %r704, %r183;
	shr.s32 	%r706, %r705, 31;
	shr.u32 	%r707, %r706, 23;
	add.s32 	%r708, %r705, %r707;
	and.b32  	%r709, %r708, -512;
	sub.s32 	%r710, %r705, %r709;
	add.s32 	%r711, %r710, %r267;
	mad.lo.s32 	%r712, %r711, 786432, %r184;
	mul.hi.s32 	%r713, %r712, 715827883;
	shr.u32 	%r714, %r713, 31;
	shr.s32 	%r715, %r713, 26;
	add.s32 	%r716, %r715, %r714;
	setp.lt.s32 	%p247, %r712, 0;
	mul.lo.s32 	%r717, %r716, 402653184;
	setp.ne.s32 	%p248, %r717, %r712;
	and.pred  	%p249, %p247, %p248;
	selp.s32 	%r718, -1, 0, %p249;
	add.s32 	%r719, %r716, %r718;
	mad.lo.s32 	%r720, %r719, -402653184, %r712;
	mul.wide.s32 	%rd59, %r720, 4;
	add.s64 	%rd60, %rd3, %rd59;
	ld.global.v4.u32 	{%r721, %r722, %r723, %r724}, [%rd60];
	selp.b32 	%r725, %r701, %r699, %p243;
	shfl.sync.bfly.b32	%r726, %r725, 4, 31, -1;
	selp.b32 	%r584, %r699, %r726, %p243;
	selp.b32 	%r589, %r726, %r701, %p243;
	selp.b32 	%r727, %r702, %r700, %p243;
	shfl.sync.bfly.b32	%r728, %r727, 4, 31, -1;
	selp.b32 	%r592, %r700, %r728, %p243;
	selp.b32 	%r597, %r728, %r702, %p243;
	selp.b32 	%r729, %r723, %r721, %p243;
	shfl.sync.bfly.b32	%r730, %r729, 4, 31, -1;
	selp.b32 	%r600, %r721, %r730, %p243;
	selp.b32 	%r605, %r730, %r723, %p243;
	selp.b32 	%r731, %r724, %r722, %p243;
	shfl.sync.bfly.b32	%r732, %r731, 4, 31, -1;
	selp.b32 	%r608, %r722, %r732, %p243;
	selp.b32 	%r613, %r732, %r724, %p243;
	shl.b32 	%r585, %r589, 4;
	mov.u32 	%r583, 252645135;
	// begin inline asm
	lop3.b32 %r615, %r583, %r584, %r585, 202;
	// end inline asm
	shr.u32 	%r588, %r584, 4;
	// begin inline asm
	lop3.b32 %r631, %r583, %r588, %r589, 202;
	// end inline asm
	shl.b32 	%r593, %r597, 4;
	// begin inline asm
	lop3.b32 %r623, %r583, %r592, %r593, 202;
	// end inline asm
	shr.u32 	%r596, %r592, 4;
	// begin inline asm
	lop3.b32 %r639, %r583, %r596, %r597, 202;
	// end inline asm
	shl.b32 	%r601, %r605, 4;
	// begin inline asm
	lop3.b32 %r616, %r583, %r600, %r601, 202;
	// end inline asm
	shr.u32 	%r604, %r600, 4;
	// begin inline asm
	lop3.b32 %r632, %r583, %r604, %r605, 202;
	// end inline asm
	shl.b32 	%r609, %r613, 4;
	// begin inline asm
	lop3.b32 %r624, %r583, %r608, %r609, 202;
	// end inline asm
	shr.u32 	%r612, %r608, 4;
	// begin inline asm
	lop3.b32 %r640, %r583, %r612, %r613, 202;
	// end inline asm
	mov.u32 	%r617, 25152;
	// begin inline asm
	prmt.b32 %r647, %r615, %r616, %r617;
	// end inline asm
	mov.u32 	%r621, 29521;
	// begin inline asm
	prmt.b32 %r663, %r615, %r616, %r621;
	// end inline asm
	// begin inline asm
	prmt.b32 %r655, %r623, %r624, %r617;
	// end inline asm
	// begin inline asm
	prmt.b32 %r671, %r623, %r624, %r621;
	// end inline asm
	// begin inline asm
	prmt.b32 %r648, %r631, %r632, %r617;
	// end inline asm
	// begin inline asm
	prmt.b32 %r664, %r631, %r632, %r621;
	// end inline asm
	// begin inline asm
	prmt.b32 %r656, %r639, %r640, %r617;
	// end inline asm
	// begin inline asm
	prmt.b32 %r672, %r639, %r640, %r621;
	// end inline asm
	mov.u32 	%r673, 21520;
	// begin inline asm
	prmt.b32 %r646, %r647, %r648, %r673;
	// end inline asm
	mov.u32 	%r677, 30258;
	// begin inline asm
	prmt.b32 %r650, %r647, %r648, %r677;
	// end inline asm
	// begin inline asm
	prmt.b32 %r654, %r655, %r656, %r673;
	// end inline asm
	// begin inline asm
	prmt.b32 %r658, %r655, %r656, %r677;
	// end inline asm
	// begin inline asm
	prmt.b32 %r662, %r663, %r664, %r673;
	// end inline asm
	// begin inline asm
	prmt.b32 %r666, %r663, %r664, %r677;
	// end inline asm
	// begin inline asm
	prmt.b32 %r670, %r671, %r672, %r673;
	// end inline asm
	// begin inline asm
	prmt.b32 %r674, %r671, %r672, %r677;
	// end inline asm
	mul.hi.s32 	%r733, %r683, 715827883;
	shr.u32 	%r734, %r733, 31;
	shr.s32 	%r735, %r733, 2;
	add.s32 	%r736, %r735, %r734;
	mul.lo.s32 	%r737, %r736, 24;
	sub.s32 	%r738, %r683, %r737;
	add.s32 	%r739, %r738, %r186;
	mul.wide.s32 	%rd61, %r739, 4;
	add.s64 	%rd63, %rd47, %rd61;
	st.shared.u32 	[%rd63], %r646;
	add.s32 	%r740, %r739, 128;
	mul.wide.u32 	%rd64, %r740, 4;
	add.s64 	%rd65, %rd47, %rd64;
	st.shared.u32 	[%rd65], %r654;
	add.s32 	%r741, %r739, 64;
	mul.wide.u32 	%rd66, %r741, 4;
	add.s64 	%rd67, %rd47, %rd66;
	st.shared.u32 	[%rd67], %r650;
	add.s32 	%r742, %r739, 192;
	mul.wide.u32 	%rd68, %r742, 4;
	add.s64 	%rd69, %rd47, %rd68;
	st.shared.u32 	[%rd69], %r658;
	add.s32 	%r743, %r739, 32;
	mul.wide.u32 	%rd70, %r743, 4;
	add.s64 	%rd71, %rd47, %rd70;
	st.shared.u32 	[%rd71], %r662;
	add.s32 	%r744, %r739, 160;
	mul.wide.u32 	%rd72, %r744, 4;
	add.s64 	%rd73, %rd47, %rd72;
	st.shared.u32 	[%rd73], %r670;
	add.s32 	%r745, %r739, 96;
	mul.wide.u32 	%rd74, %r745, 4;
	add.s64 	%rd75, %rd47, %rd74;
	st.shared.u32 	[%rd75], %r666;
	add.s32 	%r746, %r739, 224;
	mul.wide.u32 	%rd76, %r746, 4;
	add.s64 	%rd77, %rd47, %rd76;
	st.shared.u32 	[%rd77], %r674;
	bar.sync 	0;
	add.s32 	%r747, %r681, %r187;
	cvt.u16.u32 	%rs49, %r747;
	mul.hi.s16 	%rs50, %rs49, 10923;
	shr.u16 	%rs51, %rs50, 15;
	shr.s16 	%rs52, %rs50, 2;
	add.s16 	%rs53, %rs52, %rs51;
	mul.lo.s16 	%rs54, %rs53, 24;
	sub.s16 	%rs55, %rs49, %rs54;
	cvt.s32.s16 	%r748, %rs55;
	add.s32 	%r749, %r2, %r748;
	mul.wide.s32 	%rd78, %r749, 4;
	add.s64 	%rd79, %rd47, %rd78;
	ld.shared.u32 	%r750, [%rd79];
	add.s32 	%r751, %r188, %r748;
	mul.wide.s32 	%rd80, %r751, 4;
	add.s64 	%rd81, %rd47, %rd80;
	ld.shared.u32 	%r752, [%rd81];
	add.s32 	%r753, %r189, %r748;
	mul.wide.u32 	%rd82, %r753, 4;
	add.s64 	%rd83, %rd47, %rd82;
	ld.shared.u32 	%r754, [%rd83];
	add.s32 	%r755, %r190, %r748;
	mul.wide.u32 	%rd84, %r755, 4;
	add.s64 	%rd85, %rd47, %rd84;
	ld.shared.u32 	%r756, [%rd85];
	add.s32 	%r757, %r191, %r748;
	mul.wide.u32 	%rd86, %r757, 4;
	add.s64 	%rd87, %rd47, %rd86;
	ld.shared.u32 	%r758, [%rd87];
	add.s32 	%r759, %r192, %r748;
	mul.wide.u32 	%rd88, %r759, 4;
	add.s64 	%rd89, %rd47, %rd88;
	ld.shared.u32 	%r760, [%rd89];
	add.s32 	%r761, %r193, %r748;
	mul.wide.u32 	%rd90, %r761, 4;
	add.s64 	%rd91, %rd47, %rd90;
	ld.shared.u32 	%r762, [%rd91];
	add.s32 	%r763, %r194, %r748;
	mul.wide.u32 	%rd92, %r763, 4;
	add.s64 	%rd93, %rd47, %rd92;
	ld.shared.u32 	%r764, [%rd93];
	add.s32 	%r765, %r195, %r748;
	mul.wide.u32 	%rd94, %r765, 4;
	add.s64 	%rd95, %rd47, %rd94;
	ld.shared.u32 	%r766, [%rd95];
	add.s32 	%r767, %r196, %r748;
	mul.wide.u32 	%rd96, %r767, 4;
	add.s64 	%rd97, %rd47, %rd96;
	ld.shared.u32 	%r768, [%rd97];
	add.s32 	%r769, %r197, %r748;
	mul.wide.s32 	%rd98, %r769, 4;
	add.s64 	%rd99, %rd47, %rd98;
	ld.shared.u32 	%r770, [%rd99];
	bar.sync 	0;
	shfl.sync.idx.b32	%r771, %r176, 0, 31, -1;
	shfl.sync.idx.b32	%r772, %r176, 1, 31, -1;
	shfl.sync.idx.b32	%r773, %r176, 2, 31, -1;
	shfl.sync.idx.b32	%r774, %r176, 3, 31, -1;
	shfl.sync.idx.b32	%r775, %r176, 4, 31, -1;
	shfl.sync.idx.b32	%r776, %r176, 5, 31, -1;
	shfl.sync.idx.b32	%r777, %r176, 6, 31, -1;
	shfl.sync.idx.b32	%r778, %r176, 7, 31, -1;
	shfl.sync.idx.b32	%r779, %r176, 8, 31, -1;
	shfl.sync.idx.b32	%r780, %r176, 9, 31, -1;
	shfl.sync.idx.b32	%r781, %r176, 10, 31, -1;
	shfl.sync.idx.b32	%r782, %r176, 11, 31, -1;
	shfl.sync.idx.b32	%r783, %r176, 12, 31, -1;
	shfl.sync.idx.b32	%r784, %r176, 13, 31, -1;
	shfl.sync.idx.b32	%r785, %r176, 14, 31, -1;
	shfl.sync.idx.b32	%r786, %r176, 15, 31, -1;
	add.s32 	%r787, %r771, %r748;
	mul.wide.s32 	%rd100, %r787, 4;
	add.s64 	%rd101, %rd47, %rd100;
	st.shared.u32 	[%rd101], %r750;
	add.s32 	%r788, %r772, %r748;
	mul.wide.s32 	%rd102, %r788, 4;
	add.s64 	%rd103, %rd47, %rd102;
	st.shared.u32 	[%rd103], %r752;
	add.s32 	%r789, %r773, %r748;
	mul.wide.s32 	%rd104, %r789, 4;
	add.s64 	%rd105, %rd47, %rd104;
	st.shared.u32 	[%rd105], %r754;
	add.s32 	%r790, %r774, %r748;
	mul.wide.s32 	%rd106, %r790, 4;
	add.s64 	%rd107, %rd47, %rd106;
	st.shared.u32 	[%rd107], %r756;
	add.s32 	%r791, %r775, %r748;
	mul.wide.s32 	%rd108, %r791, 4;
	add.s64 	%rd109, %rd47, %rd108;
	st.shared.u32 	[%rd109], %r758;
	add.s32 	%r792, %r776, %r748;
	mul.wide.s32 	%rd110, %r792, 4;
	add.s64 	%rd111, %rd47, %rd110;
	st.shared.u32 	[%rd111], %r760;
	add.s32 	%r793, %r777, %r748;
	mul.wide.s32 	%rd112, %r793, 4;
	add.s64 	%rd113, %rd47, %rd112;
	st.shared.u32 	[%rd113], %r762;
	add.s32 	%r794, %r778, %r748;
	mul.wide.s32 	%rd114, %r794, 4;
	add.s64 	%rd115, %rd47, %rd114;
	st.shared.u32 	[%rd115], %r764;
	add.s32 	%r795, %r779, %r748;
	mul.wide.s32 	%rd116, %r795, 4;
	add.s64 	%rd117, %rd47, %rd116;
	st.shared.u32 	[%rd117], %r766;
	add.s32 	%r796, %r780, %r748;
	mul.wide.s32 	%rd118, %r796, 4;
	add.s64 	%rd119, %rd47, %rd118;
	st.shared.u32 	[%rd119], %r768;
	selp.b32 	%r797, 0, %r770, %p242;
	add.s32 	%r798, %r781, %r748;
	mul.wide.s32 	%rd120, %r798, 4;
	add.s64 	%rd121, %rd47, %rd120;
	st.shared.u32 	[%rd121], %r797;
	add.s32 	%r799, %r782, %r748;
	mul.wide.s32 	%rd122, %r799, 4;
	add.s64 	%rd123, %rd47, %rd122;
	mov.u32 	%r678, 0;
	st.shared.u32 	[%rd123], %r678;
	add.s32 	%r800, %r783, %r748;
	mul.wide.s32 	%rd124, %r800, 4;
	add.s64 	%rd125, %rd47, %rd124;
	st.shared.u32 	[%rd125], %r678;
	add.s32 	%r801, %r784, %r748;
	mul.wide.s32 	%rd126, %r801, 4;
	add.s64 	%rd127, %rd47, %rd126;
	st.shared.u32 	[%rd127], %r678;
	add.s32 	%r802, %r785, %r748;
	mul.wide.s32 	%rd128, %r802, 4;
	add.s64 	%rd129, %rd47, %rd128;
	st.shared.u32 	[%rd129], %r678;
	add.s32 	%r803, %r786, %r748;
	mul.wide.s32 	%rd130, %r803, 4;
	add.s64 	%rd131, %rd47, %rd130;
	st.shared.u32 	[%rd131], %r678;
	bar.sync 	0;
	mov.u32 	%r91, %r678;
	mov.u32 	%r92, %r678;
	mov.u32 	%r93, %r678;
	mov.u32 	%r94, %r678;
	mov.u32 	%r95, %r678;
	mov.u32 	%r96, %r678;
	mov.u32 	%r97, %r678;
	mov.u32 	%r98, %r678;
	mov.u32 	%r99, %r678;
	mov.u32 	%r100, %r678;
	mov.u32 	%r101, %r678;
	mov.u32 	%r102, %r678;
	mov.u32 	%r103, %r678;
	mov.u32 	%r104, %r678;
	mov.u32 	%r105, %r678;
	mov.u32 	%r106, %r678;
	@%p241 bra 	$L__BB0_139;
// %bb.190:                             // %oksrem2590
                                        //   in Loop: Header=BB0_188 Depth=1
	add.s32 	%r221, %r681, %r198;
	ld.shared.u32 	%r91, [%rd7];
	ld.shared.u32 	%r92, [%rd8];
	ld.shared.u32 	%r93, [%rd9+12];
	ld.shared.u32 	%r94, [%rd10+12];
	ld.shared.u32 	%r95, [%rd9+24];
	ld.shared.u32 	%r96, [%rd10+24];
	ld.shared.u32 	%r97, [%rd9+36];
	ld.shared.u32 	%r98, [%rd10+36];
	add.s32 	%r804, %r221, 12;
	mul.hi.u32 	%r805, %r804, -1431655765;
	shr.u32 	%r806, %r805, 4;
	mul.lo.s32 	%r807, %r806, 24;
	sub.s32 	%r808, %r804, %r807;
	add.s32 	%r809, %r199, %r808;
	mul.wide.u32 	%rd132, %r809, 4;
	add.s64 	%rd134, %rd47, %rd132;
	ld.shared.u32 	%r99, [%rd134];
	add.s32 	%r810, %r200, %r808;
	mul.wide.u32 	%rd135, %r810, 4;
	add.s64 	%rd136, %rd47, %rd135;
	ld.shared.u32 	%r100, [%rd136];
	ld.shared.u32 	%r101, [%rd9+60];
	ld.shared.u32 	%r102, [%rd10+60];
	ld.shared.u32 	%r103, [%rd9+72];
	ld.shared.u32 	%r104, [%rd10+72];
	ld.shared.u32 	%r105, [%rd9+84];
	ld.shared.u32 	%r106, [%rd10+84];
$L__BB0_139:                            // %L8800
                                        //   in Loop: Header=BB0_188 Depth=1
	bar.sync 	0;
	mov.u16 	%rs3, %rs2;
	mov.u32 	%r110, %r678;
	bra.uni 	$L__BB0_140;
$L__BB0_147:                            // %L19851
                                        //   in Loop: Header=BB0_140 Depth=2
	add.s32 	%r108, %r108, 1;
	mov.u32 	%r107, 0;
	mov.u32 	%r109, %r107;
$L__BB0_148:                            // %L19852
                                        //   in Loop: Header=BB0_140 Depth=2
	bar.sync 	0;
	add.s32 	%r110, %r110, 6;
	add.s16 	%rs3, %rs3, 6;
	setp.ne.s32 	%p270, %r110, 24;
	@%p270 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_149;
$L__BB0_140:                            // %L8818
                                        //   Parent Loop BB0_188 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p250, %r110, 0;
	selp.b32 	%r1204, %r91, 0, %p250;
	setp.eq.s32 	%p251, %r110, 6;
	selp.b32 	%r1205, %r95, %r1204, %p251;
	setp.eq.s32 	%p252, %r110, 12;
	selp.b32 	%r1206, %r99, %r1205, %p252;
	setp.eq.s32 	%p253, %r110, 18;
	selp.b32 	%r1207, %r103, %r1206, %p253;
	selp.b32 	%r1208, %r92, 0, %p250;
	selp.b32 	%r1209, %r96, %r1208, %p251;
	selp.b32 	%r1210, %r100, %r1209, %p252;
	selp.b32 	%r1211, %r104, %r1210, %p253;
	selp.b32 	%r1212, %r93, 0, %p250;
	selp.b32 	%r1213, %r97, %r1212, %p251;
	selp.b32 	%r1214, %r101, %r1213, %p252;
	selp.b32 	%r1215, %r105, %r1214, %p253;
	selp.b32 	%r1216, %r94, 0, %p250;
	selp.b32 	%r1217, %r98, %r1216, %p251;
	selp.b32 	%r1218, %r102, %r1217, %p252;
	selp.b32 	%r1219, %r106, %r1218, %p253;
	mov.u16 	%rs93, 25600;
	// begin inline asm
	mov.b32 %r817, {%rs93, %rs93};
	// end inline asm
	mov.u16 	%rs95, 21504;
	// begin inline asm
	mov.b32 %r828, {%rs95, %rs95};
	// end inline asm
	xor.b32  	%r816, %r1207, -2004318072;
	mov.u32 	%r953, 983055;
	// begin inline asm
	lop3.b32 %r814, %r953, %r816, %r817, 202;
	// end inline asm
	mov.u16 	%rs99, 18432;
	// begin inline asm
	mov.b32 %r818, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r819, %r817, %r818;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r822, %r814, %r819;
	// end inline asm
	mov.u32 	%r964, 15728880;
	// begin inline asm
	lop3.b32 %r825, %r964, %r816, %r828, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r829, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r830, %r828, %r829;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r833, %r825, %r830;
	// end inline asm
	// begin inline asm
	mov.b32 %r863, {%rs93, %rs93};
	// end inline asm
	// begin inline asm
	mov.b32 %r874, {%rs95, %rs95};
	// end inline asm
	xor.b32  	%r862, %r1211, -2004318072;
	// begin inline asm
	lop3.b32 %r860, %r953, %r862, %r863, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r864, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r865, %r863, %r864;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r868, %r860, %r865;
	// end inline asm
	// begin inline asm
	lop3.b32 %r871, %r964, %r862, %r874, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r875, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r876, %r874, %r875;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r879, %r871, %r876;
	// end inline asm
	// begin inline asm
	mov.b32 %r909, {%rs93, %rs93};
	// end inline asm
	// begin inline asm
	mov.b32 %r920, {%rs95, %rs95};
	// end inline asm
	xor.b32  	%r908, %r1215, -2004318072;
	// begin inline asm
	lop3.b32 %r906, %r953, %r908, %r909, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r910, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r911, %r909, %r910;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r914, %r906, %r911;
	// end inline asm
	// begin inline asm
	lop3.b32 %r917, %r964, %r908, %r920, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r921, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r922, %r920, %r921;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r925, %r917, %r922;
	// end inline asm
	// begin inline asm
	mov.b32 %r955, {%rs93, %rs93};
	// end inline asm
	// begin inline asm
	mov.b32 %r966, {%rs95, %rs95};
	// end inline asm
	xor.b32  	%r954, %r1219, -2004318072;
	// begin inline asm
	lop3.b32 %r952, %r953, %r954, %r955, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r956, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r957, %r955, %r956;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r960, %r952, %r957;
	// end inline asm
	// begin inline asm
	lop3.b32 %r963, %r964, %r954, %r966, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r967, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r968, %r966, %r967;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r971, %r963, %r968;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r179;
    mov.b32 {%r2re, %r2im}, %r822;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r996, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r180;
    mov.b32 {%r2re, %r2im}, %r868;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r999, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r181;
    mov.b32 {%r2re, %r2im}, %r833;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1002, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r182;
    mov.b32 {%r2re, %r2im}, %r879;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1005, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r179;
    mov.b32 {%r2re, %r2im}, %r914;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1008, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r180;
    mov.b32 {%r2re, %r2im}, %r960;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1011, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r181;
    mov.b32 {%r2re, %r2im}, %r925;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1014, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r182;
    mov.b32 {%r2re, %r2im}, %r971;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1017, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1020, %r1021}, {%r292, %r295}, {%r996}, {%r678, %r678};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1027, %r1028}, {%r292, %r295}, {%r999}, {%r678, %r678};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1034, %r1035}, {%r292, %r295}, {%r1002}, {%r678, %r678};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1041, %r1042}, {%r292, %r295}, {%r1005}, {%r678, %r678};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1048, %r1049}, {%r292, %r295}, {%r1008}, {%r678, %r678};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1055, %r1056}, {%r292, %r295}, {%r1011}, {%r678, %r678};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1062, %r1063}, {%r292, %r295}, {%r1014}, {%r678, %r678};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1069, %r1070}, {%r292, %r295}, {%r1017}, {%r678, %r678};
	// end inline asm
	@%p1 bra 	$L__BB0_191;
	bra.uni 	$L__BB0_141;
$L__BB0_191:                            // %pass3934
                                        //   in Loop: Header=BB0_140 Depth=2
	// begin inline asm
	neg.f16x2 %r1076, %r347;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1078, %r1076, %r1021;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1081, %r344, %r1020, %r1078;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1085, %r347;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1087, %r1085, %r1028;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1090, %r344, %r1027, %r1087;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1094, %r347;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1096, %r1094, %r1035;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1099, %r344, %r1034, %r1096;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1103, %r347;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1105, %r1103, %r1042;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1108, %r344, %r1041, %r1105;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1112, %r347;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1114, %r1112, %r1049;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1117, %r344, %r1048, %r1114;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1121, %r347;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1123, %r1121, %r1056;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1126, %r344, %r1055, %r1123;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1130, %r347;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1132, %r1130, %r1063;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1135, %r344, %r1062, %r1132;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1139, %r347;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1141, %r1139, %r1070;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1144, %r344, %r1069, %r1141;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1148, %r347, %r1020;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1151, %r344, %r1021, %r1148;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1155, %r347, %r1027;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1158, %r344, %r1028, %r1155;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1162, %r347, %r1034;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1165, %r344, %r1035, %r1162;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1169, %r347, %r1041;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1172, %r344, %r1042, %r1169;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1176, %r347, %r1048;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1179, %r344, %r1049, %r1176;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1183, %r347, %r1055;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1186, %r344, %r1056, %r1183;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1190, %r347, %r1062;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1193, %r344, %r1063, %r1190;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1197, %r347, %r1069;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1200, %r344, %r1070, %r1197;
	// end inline asm
	mov.u32 	%r1369, 0;
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1293, %r1294}, {%r388, %r391}, {%r1081, %r1151}, {%r1369, %r1369}, %r217, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1301, %r1302}, {%r388, %r391}, {%r1090, %r1158}, {%r1369, %r1369}, %r217, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1309, %r1310}, {%r388, %r391}, {%r1099, %r1165}, {%r1369, %r1369}, %r217, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1317, %r1318}, {%r388, %r391}, {%r1108, %r1172}, {%r1369, %r1369}, %r217, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1325, %r1326}, {%r388, %r391}, {%r1117, %r1179}, {%r1369, %r1369}, %r217, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1333, %r1334}, {%r388, %r391}, {%r1126, %r1186}, {%r1369, %r1369}, %r217, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1341, %r1342}, {%r388, %r391}, {%r1135, %r1193}, {%r1369, %r1369}, %r217, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1349, %r1350}, {%r388, %r391}, {%r1144, %r1200}, {%r1369, %r1369}, %r217, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1292, %r1293, %r1294, %r673;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1296, %r1293, %r1294, %r677;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1300, %r1301, %r1302, %r673;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1304, %r1301, %r1302, %r677;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1308, %r1309, %r1310, %r673;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1312, %r1309, %r1310, %r677;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1316, %r1317, %r1318, %r673;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1320, %r1317, %r1318, %r677;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1324, %r1325, %r1326, %r673;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1328, %r1325, %r1326, %r677;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1332, %r1333, %r1334, %r673;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1336, %r1333, %r1334, %r677;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1340, %r1341, %r1342, %r673;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1344, %r1341, %r1342, %r677;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1348, %r1349, %r1350, %r673;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1352, %r1349, %r1350, %r677;
	// end inline asm
	add.s32 	%r1402, %r86, %r110;
	mul.hi.u32 	%r1403, %r1402, -1431655765;
	shr.u32 	%r1404, %r1403, 2;
	mul.lo.s32 	%r1405, %r1404, 6;
	sub.s32 	%r1406, %r1402, %r1405;
	shl.b32 	%r1407, %r1406, 4;
	add.s32 	%r1408, %r207, %r1407;
	mul.wide.u32 	%rd139, %r1408, 4;
	add.s64 	%rd141, %rd47, %rd139;
	st.shared.u32 	[%rd141], %r1292;
	cvt.u64.u32 	%rd142, %r1407;
	cvt.u64.u32 	%rd143, %r205;
	cvt.u64.u32 	%rd144, %r204;
	cvt.u64.u32 	%rd145, %r203;
	cvt.u64.u32 	%rd146, %r201;
	cvt.u64.u32 	%rd147, %r202;
	add.s64 	%rd148, %rd147, %rd146;
	add.s64 	%rd149, %rd148, %rd145;
	add.s64 	%rd150, %rd149, %rd144;
	add.s64 	%rd11, %rd150, %rd143;
	add.s64 	%rd151, %rd11, %rd142;
	shl.b64 	%rd152, %rd151, 2;
	add.s64 	%rd153, %rd47, %rd152;
	st.shared.u32 	[%rd153+6304], %r1296;
	add.s32 	%r1409, %r210, %r1407;
	mul.wide.u32 	%rd154, %r1409, 4;
	add.s64 	%rd155, %rd47, %rd154;
	st.shared.u32 	[%rd155], %r1300;
	cvt.u64.u32 	%rd156, %r209;
	add.s64 	%rd157, %rd149, %rd156;
	add.s64 	%rd12, %rd157, %rd143;
	add.s64 	%rd158, %rd12, %rd142;
	shl.b64 	%rd159, %rd158, 2;
	add.s64 	%rd160, %rd47, %rd159;
	st.shared.u32 	[%rd160+6304], %r1304;
	cvt.u64.u32 	%rd161, %r206;
	add.s64 	%rd162, %rd161, %rd145;
	add.s64 	%rd163, %rd162, %rd144;
	add.s64 	%rd13, %rd163, %rd143;
	add.s64 	%rd164, %rd13, %rd142;
	shl.b64 	%rd165, %rd164, 2;
	add.s64 	%rd166, %rd47, %rd165;
	st.shared.u32 	[%rd166+32], %r1308;
	st.shared.u32 	[%rd153+6336], %r1312;
	add.s64 	%rd167, %rd162, %rd156;
	add.s64 	%rd14, %rd167, %rd143;
	add.s64 	%rd168, %rd14, %rd142;
	shl.b64 	%rd169, %rd168, 2;
	add.s64 	%rd170, %rd47, %rd169;
	st.shared.u32 	[%rd170+32], %r1316;
	st.shared.u32 	[%rd160+6336], %r1320;
	add.s32 	%r1410, %r1402, 3;
	mul.hi.u32 	%r1411, %r1410, -1431655765;
	shr.u32 	%r1412, %r1411, 2;
	mul.lo.s32 	%r1413, %r1412, 6;
	sub.s32 	%r1414, %r1410, %r1413;
	shl.b32 	%r1415, %r1414, 4;
	add.s32 	%r1416, %r207, %r1415;
	mul.wide.u32 	%rd171, %r1416, 4;
	add.s64 	%rd172, %rd47, %rd171;
	st.shared.u32 	[%rd172], %r1324;
	cvt.u64.u32 	%rd173, %r1415;
	add.s64 	%rd174, %rd11, %rd173;
	shl.b64 	%rd175, %rd174, 2;
	add.s64 	%rd176, %rd47, %rd175;
	st.shared.u32 	[%rd176+6304], %r1328;
	add.s32 	%r1417, %r210, %r1415;
	mul.wide.u32 	%rd177, %r1417, 4;
	add.s64 	%rd178, %rd47, %rd177;
	st.shared.u32 	[%rd178], %r1332;
	add.s64 	%rd179, %rd12, %rd173;
	shl.b64 	%rd180, %rd179, 2;
	add.s64 	%rd181, %rd47, %rd180;
	st.shared.u32 	[%rd181+6304], %r1336;
	add.s64 	%rd182, %rd13, %rd173;
	shl.b64 	%rd183, %rd182, 2;
	add.s64 	%rd184, %rd47, %rd183;
	st.shared.u32 	[%rd184+32], %r1340;
	st.shared.u32 	[%rd176+6336], %r1344;
	add.s64 	%rd185, %rd14, %rd173;
	shl.b64 	%rd186, %rd185, 2;
	add.s64 	%rd187, %rd47, %rd186;
	st.shared.u32 	[%rd187+32], %r1348;
	st.shared.u32 	[%rd181+6336], %r1352;
	bar.sync 	0;
	mul.hi.s16 	%rs104, %rs3, 10923;
	shr.u16 	%rs105, %rs104, 15;
	add.s16 	%rs106, %rs104, %rs105;
	mul.lo.s16 	%rs107, %rs106, 6;
	sub.s16 	%rs108, %rs3, %rs107;
	mul.wide.s16 	%r1418, %rs108, 16;
	add.s32 	%r1419, %r214, %r1418;
	mul.wide.s32 	%rd188, %r1419, 4;
	add.s64 	%rd189, %rd47, %rd188;
	ld.shared.u32 	%r1360, [%rd189];
	add.s32 	%r1420, %r215, %r1418;
	mul.wide.s32 	%rd190, %r1420, 4;
	add.s64 	%rd191, %rd47, %rd190;
	ld.shared.u32 	%r1367, [%rd191];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1356, %r1357}, {%r400, %r403}, {%r1360}, {%r1369, %r1369};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1363, %r1364}, {%r400, %r403}, {%r1367}, {%r1369, %r1369};
	// end inline asm
	@%p254 bra 	$L__BB0_194;
	bra.uni 	$L__BB0_192;
$L__BB0_194:                            // %pass6556
                                        //   in Loop: Header=BB0_140 Depth=2
	// begin inline asm
	neg.f16x2 %r1370, %r441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1372, %r1370, %r1357;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1375, %r438, %r1356, %r1372;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1379, %r441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1381, %r1379, %r1364;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1384, %r438, %r1363, %r1381;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1388, %r441, %r1356;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1391, %r438, %r1357, %r1388;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1395, %r441, %r1363;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1398, %r438, %r1364, %r1395;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1440, %r1443}, {%r484, %r487}, {%r1375, %r1391}, {%r1369, %r1369}, %r242, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1447, %r1451}, {%r484, %r487}, {%r1384, %r1398}, {%r1369, %r1369}, %r242, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1439, %r1440, %r1440;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1442, %r1443, %r1443, %r1439;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1446, %r1447, %r1447, %r1442;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1450, %r1451, %r1451, %r1446;
	// end inline asm
	mov.u32 	%r1538, 671098880;
	// begin inline asm
	fma.rn.f16x2 %r1454, %r1538, %r1450, %r109;
	// end inline asm
	add.s32 	%r243, %r87, %r110;
	add.s32 	%r1541, %r243, 1;
	mul.hi.u32 	%r1542, %r1541, -1431655765;
	shr.u32 	%r1543, %r1542, 2;
	mul.lo.s32 	%r1544, %r1543, 6;
	sub.s32 	%r1545, %r1541, %r1544;
	shl.b32 	%r1546, %r1545, 4;
	add.s32 	%r1547, %r214, %r1546;
	mul.wide.u32 	%rd194, %r1547, 4;
	add.s64 	%rd196, %rd47, %rd194;
	ld.shared.u32 	%r1462, [%rd196];
	add.s32 	%r1548, %r215, %r1546;
	mul.wide.u32 	%rd197, %r1548, 4;
	add.s64 	%rd198, %rd47, %rd197;
	ld.shared.u32 	%r1469, [%rd198];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1479, %r1476}, {%r400, %r403}, {%r1462}, {%r1369, %r1369};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1488, %r1485}, {%r400, %r403}, {%r1469}, {%r1369, %r1369};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1472, %r441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1474, %r1472, %r1476;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1477, %r438, %r1479, %r1474;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1481, %r441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1483, %r1481, %r1485;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1486, %r438, %r1488, %r1483;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1490, %r441, %r1479;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1493, %r438, %r1476, %r1490;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1497, %r441, %r1488;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1500, %r438, %r1485, %r1497;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1523, %r1526}, {%r484, %r487}, {%r1477, %r1493}, {%r1369, %r1369}, %r242, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1530, %r1534}, {%r484, %r487}, {%r1486, %r1500}, {%r1369, %r1369}, %r242, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1522, %r1523, %r1523;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1525, %r1526, %r1526, %r1522;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1529, %r1530, %r1530, %r1525;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1533, %r1534, %r1534, %r1529;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3066, %r1538, %r1533, %r1454;
	// end inline asm
	add.s32 	%r3064, %r107, 2;
	setp.eq.s32 	%p255, %r3064, 4;
	setp.lt.u32 	%p297, %r272, 8;
	@%p255 bra 	$L__BB0_142;
	bra.uni 	$L__BB0_195;
$L__BB0_142:                            // %L15706
                                        //   in Loop: Header=BB0_140 Depth=2
	@%p297 bra 	$L__BB0_193;
	bra.uni 	$L__BB0_143;
$L__BB0_193:                            // %pass7008
                                        //   in Loop: Header=BB0_140 Depth=2
	mad.lo.s32 	%r1549, %r108, 4718592, %r216;
	cvt.u64.u32 	%rd199, %r1549;
	add.s64 	%rd200, %rd199, %rd6;
	mul.hi.s64 	%rd201, %rd200, 1024819115206086201;
	shr.u64 	%rd202, %rd201, 63;
	shr.s64 	%rd203, %rd201, 24;
	add.s64 	%rd204, %rd203, %rd202;
	setp.lt.s64 	%p257, %rd200, 0;
	mul.lo.s64 	%rd205, %rd204, 301989888;
	setp.ne.s64 	%p258, %rd205, %rd200;
	and.pred  	%p259, %p257, %p258;
	selp.s64 	%rd206, -1, 0, %p259;
	add.s64 	%rd207, %rd204, %rd206;
	mul.lo.s64 	%rd208, %rd207, -301989888;
	add.s64 	%rd209, %rd208, %rd200;
	shl.b64 	%rd210, %rd209, 2;
	add.s64 	%rd211, %rd4, %rd210;
	st.global.u32 	[%rd211], %r3066;
$L__BB0_143:                            // %L15921
                                        //   in Loop: Header=BB0_140 Depth=2
	add.s32 	%r108, %r108, 1;
	mov.u32 	%r3064, 0;
	mov.u32 	%r3066, %r3064;
$L__BB0_195:                            // %oksrem7141
                                        //   in Loop: Header=BB0_140 Depth=2
	add.s32 	%r1717, %r243, 2;
	mul.hi.u32 	%r1718, %r1717, -1431655765;
	shr.u32 	%r1719, %r1718, 2;
	mul.lo.s32 	%r1720, %r1719, 6;
	sub.s32 	%r1721, %r1717, %r1720;
	shl.b32 	%r1722, %r1721, 4;
	add.s32 	%r1723, %r214, %r1722;
	mul.wide.u32 	%rd212, %r1723, 4;
	add.s64 	%rd214, %rd47, %rd212;
	ld.shared.u32 	%r1555, [%rd214];
	add.s32 	%r1724, %r215, %r1722;
	mul.wide.u32 	%rd215, %r1724, 4;
	add.s64 	%rd216, %rd47, %rd215;
	ld.shared.u32 	%r1562, [%rd216];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1572, %r1569}, {%r400, %r403}, {%r1555}, {%r1369, %r1369};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1581, %r1578}, {%r400, %r403}, {%r1562}, {%r1369, %r1369};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1565, %r441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1567, %r1565, %r1569;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1570, %r438, %r1572, %r1567;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1574, %r441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1576, %r1574, %r1578;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1579, %r438, %r1581, %r1576;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1583, %r441, %r1572;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1586, %r438, %r1569, %r1583;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1590, %r441, %r1581;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1593, %r438, %r1578, %r1590;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1616, %r1619}, {%r484, %r487}, {%r1570, %r1586}, {%r1369, %r1369}, %r242, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1623, %r1627}, {%r484, %r487}, {%r1579, %r1593}, {%r1369, %r1369}, %r242, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1615, %r1616, %r1616;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1618, %r1619, %r1619, %r1615;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1622, %r1623, %r1623, %r1618;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1626, %r1627, %r1627, %r1622;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1630, %r1538, %r1626, %r3066;
	// end inline asm
	add.s32 	%r1725, %r243, 3;
	mul.hi.u32 	%r1726, %r1725, -1431655765;
	shr.u32 	%r1727, %r1726, 2;
	mul.lo.s32 	%r1728, %r1727, 6;
	sub.s32 	%r1729, %r1725, %r1728;
	shl.b32 	%r1730, %r1729, 4;
	add.s32 	%r1731, %r214, %r1730;
	mul.wide.u32 	%rd217, %r1731, 4;
	add.s64 	%rd218, %rd47, %rd217;
	ld.shared.u32 	%r1638, [%rd218];
	add.s32 	%r1732, %r215, %r1730;
	mul.wide.u32 	%rd219, %r1732, 4;
	add.s64 	%rd220, %rd47, %rd219;
	ld.shared.u32 	%r1645, [%rd220];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1655, %r1652}, {%r400, %r403}, {%r1638}, {%r1369, %r1369};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1664, %r1661}, {%r400, %r403}, {%r1645}, {%r1369, %r1369};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1648, %r441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1650, %r1648, %r1652;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1653, %r438, %r1655, %r1650;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1657, %r441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1659, %r1657, %r1661;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1662, %r438, %r1664, %r1659;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1666, %r441, %r1655;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1669, %r438, %r1652, %r1666;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1673, %r441, %r1664;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1676, %r438, %r1661, %r1673;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1699, %r1702}, {%r484, %r487}, {%r1653, %r1669}, {%r1369, %r1369}, %r242, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1706, %r1710}, {%r484, %r487}, {%r1662, %r1676}, {%r1369, %r1369}, %r242, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1698, %r1699, %r1699;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1701, %r1702, %r1702, %r1698;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1705, %r1706, %r1706, %r1701;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1709, %r1710, %r1710, %r1705;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3069, %r1538, %r1709, %r1630;
	// end inline asm
	add.s32 	%r3067, %r3064, 2;
	setp.eq.s32 	%p260, %r3067, 4;
	@%p260 bra 	$L__BB0_144;
	bra.uni 	$L__BB0_196;
$L__BB0_144:                            // %L17671
                                        //   in Loop: Header=BB0_140 Depth=2
	@%p297 bra 	$L__BB0_201;
	bra.uni 	$L__BB0_145;
$L__BB0_201:                            // %pass7859
                                        //   in Loop: Header=BB0_140 Depth=2
	mad.lo.s32 	%r1733, %r108, 4718592, %r216;
	cvt.u64.u32 	%rd221, %r1733;
	add.s64 	%rd222, %rd221, %rd6;
	mul.hi.s64 	%rd223, %rd222, 1024819115206086201;
	shr.u64 	%rd224, %rd223, 63;
	shr.s64 	%rd225, %rd223, 24;
	add.s64 	%rd226, %rd225, %rd224;
	setp.lt.s64 	%p262, %rd222, 0;
	mul.lo.s64 	%rd227, %rd226, 301989888;
	setp.ne.s64 	%p263, %rd227, %rd222;
	and.pred  	%p264, %p262, %p263;
	selp.s64 	%rd228, -1, 0, %p264;
	add.s64 	%rd229, %rd226, %rd228;
	mul.lo.s64 	%rd230, %rd229, -301989888;
	add.s64 	%rd231, %rd230, %rd222;
	shl.b64 	%rd232, %rd231, 2;
	add.s64 	%rd233, %rd4, %rd232;
	st.global.u32 	[%rd233], %r3069;
$L__BB0_145:                            // %L17886
                                        //   in Loop: Header=BB0_140 Depth=2
	add.s32 	%r108, %r108, 1;
	mov.u32 	%r3067, 0;
	mov.u32 	%r3069, %r3067;
$L__BB0_196:                            // %oksrem7992
                                        //   in Loop: Header=BB0_140 Depth=2
	add.s32 	%r1901, %r243, 4;
	mul.hi.u32 	%r1902, %r1901, -1431655765;
	shr.u32 	%r1903, %r1902, 2;
	mul.lo.s32 	%r1904, %r1903, 6;
	sub.s32 	%r1905, %r1901, %r1904;
	shl.b32 	%r1906, %r1905, 4;
	add.s32 	%r1907, %r214, %r1906;
	mul.wide.u32 	%rd234, %r1907, 4;
	add.s64 	%rd236, %rd47, %rd234;
	ld.shared.u32 	%r1739, [%rd236];
	add.s32 	%r1908, %r215, %r1906;
	mul.wide.u32 	%rd237, %r1908, 4;
	add.s64 	%rd238, %rd47, %rd237;
	ld.shared.u32 	%r1746, [%rd238];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1756, %r1753}, {%r400, %r403}, {%r1739}, {%r1369, %r1369};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1765, %r1762}, {%r400, %r403}, {%r1746}, {%r1369, %r1369};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1749, %r441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1751, %r1749, %r1753;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1754, %r438, %r1756, %r1751;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1758, %r441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1760, %r1758, %r1762;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1763, %r438, %r1765, %r1760;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1767, %r441, %r1756;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1770, %r438, %r1753, %r1767;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1774, %r441, %r1765;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1777, %r438, %r1762, %r1774;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1800, %r1803}, {%r484, %r487}, {%r1754, %r1770}, {%r1369, %r1369}, %r242, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1807, %r1811}, {%r484, %r487}, {%r1763, %r1777}, {%r1369, %r1369}, %r242, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1799, %r1800, %r1800;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1802, %r1803, %r1803, %r1799;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1806, %r1807, %r1807, %r1802;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1810, %r1811, %r1811, %r1806;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1814, %r1538, %r1810, %r3069;
	// end inline asm
	add.s32 	%r1909, %r243, 5;
	mul.hi.u32 	%r1910, %r1909, -1431655765;
	shr.u32 	%r1911, %r1910, 2;
	mul.lo.s32 	%r1912, %r1911, 6;
	sub.s32 	%r1913, %r1909, %r1912;
	shl.b32 	%r1914, %r1913, 4;
	add.s32 	%r1915, %r214, %r1914;
	mul.wide.u32 	%rd239, %r1915, 4;
	add.s64 	%rd240, %rd47, %rd239;
	ld.shared.u32 	%r1822, [%rd240];
	add.s32 	%r1916, %r215, %r1914;
	mul.wide.u32 	%rd241, %r1916, 4;
	add.s64 	%rd242, %rd47, %rd241;
	ld.shared.u32 	%r1829, [%rd242];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1839, %r1836}, {%r400, %r403}, {%r1822}, {%r1369, %r1369};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1848, %r1845}, {%r400, %r403}, {%r1829}, {%r1369, %r1369};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1832, %r441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1834, %r1832, %r1836;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1837, %r438, %r1839, %r1834;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1841, %r441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1843, %r1841, %r1845;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1846, %r438, %r1848, %r1843;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1850, %r441, %r1839;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1853, %r438, %r1836, %r1850;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1857, %r441, %r1848;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1860, %r438, %r1845, %r1857;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1883, %r1886}, {%r484, %r487}, {%r1837, %r1853}, {%r1369, %r1369}, %r242, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1890, %r1894}, {%r484, %r487}, {%r1846, %r1860}, {%r1369, %r1369}, %r242, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1882, %r1883, %r1883;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1885, %r1886, %r1886, %r1882;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1889, %r1890, %r1890, %r1885;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1893, %r1894, %r1894, %r1889;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r109, %r1538, %r1893, %r1814;
	// end inline asm
	add.s32 	%r107, %r3067, 2;
	setp.eq.s32 	%p265, %r107, 4;
	@%p265 bra 	$L__BB0_146;
	bra.uni 	$L__BB0_148;
$L__BB0_146:                            // %L19636
                                        //   in Loop: Header=BB0_140 Depth=2
	@%p297 bra 	$L__BB0_197;
	bra.uni 	$L__BB0_147;
$L__BB0_197:                            // %pass8710
                                        //   in Loop: Header=BB0_140 Depth=2
	mad.lo.s32 	%r1917, %r108, 4718592, %r216;
	cvt.u64.u32 	%rd243, %r1917;
	add.s64 	%rd244, %rd243, %rd6;
	mul.hi.s64 	%rd245, %rd244, 1024819115206086201;
	shr.u64 	%rd246, %rd245, 63;
	shr.s64 	%rd247, %rd245, 24;
	add.s64 	%rd248, %rd247, %rd246;
	setp.lt.s64 	%p267, %rd244, 0;
	mul.lo.s64 	%rd249, %rd248, 301989888;
	setp.ne.s64 	%p268, %rd249, %rd244;
	and.pred  	%p269, %p267, %p268;
	selp.s64 	%rd250, -1, 0, %p269;
	add.s64 	%rd251, %rd248, %rd250;
	mul.lo.s64 	%rd252, %rd251, -301989888;
	add.s64 	%rd253, %rd252, %rd244;
	shl.b64 	%rd254, %rd253, 2;
	add.s64 	%rd255, %rd4, %rd254;
	st.global.u32 	[%rd255], %r109;
	bra.uni 	$L__BB0_147;
$L__BB0_149:                            // %L19873.preheader
                                        //   in Loop: Header=BB0_188 Depth=1
	mov.u16 	%rs202, %rs1;
	mov.u32 	%r3055, %r1369;
	bra.uni 	$L__BB0_150;
$L__BB0_158:                            // %L30906
                                        //   in Loop: Header=BB0_150 Depth=2
	add.s32 	%r108, %r108, 1;
	mov.u32 	%r107, %r2802;
	mov.u32 	%r109, %r2802;
$L__BB0_159:                            // %L30907
                                        //   in Loop: Header=BB0_150 Depth=2
	bar.sync 	0;
	add.s32 	%r3055, %r3055, 6;
	add.s16 	%rs202, %rs202, 6;
	setp.ne.s32 	%p290, %r3055, 24;
	@%p290 bra 	$L__BB0_150;
	bra.uni 	$L__BB0_160;
$L__BB0_150:                            // %L19873
                                        //   Parent Loop BB0_188 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p271, %r3055, 0;
	selp.b32 	%r2614, %r91, 0, %p271;
	setp.eq.s32 	%p272, %r3055, 6;
	selp.b32 	%r2615, %r95, %r2614, %p272;
	setp.eq.s32 	%p273, %r3055, 12;
	selp.b32 	%r2616, %r99, %r2615, %p273;
	setp.eq.s32 	%p274, %r3055, 18;
	selp.b32 	%r2617, %r103, %r2616, %p274;
	selp.b32 	%r2618, %r92, 0, %p271;
	selp.b32 	%r2619, %r96, %r2618, %p272;
	selp.b32 	%r2620, %r100, %r2619, %p273;
	selp.b32 	%r2621, %r104, %r2620, %p274;
	selp.b32 	%r2622, %r93, 0, %p271;
	selp.b32 	%r2623, %r97, %r2622, %p272;
	selp.b32 	%r2624, %r101, %r2623, %p273;
	selp.b32 	%r2625, %r105, %r2624, %p274;
	selp.b32 	%r2626, %r94, 0, %p271;
	selp.b32 	%r2627, %r98, %r2626, %p272;
	selp.b32 	%r2628, %r102, %r2627, %p273;
	selp.b32 	%r2629, %r106, %r2628, %p274;
	// begin inline asm
	mov.b32 %r1947, {%rs93, %rs93};
	// end inline asm
	// begin inline asm
	mov.b32 %r1958, {%rs95, %rs95};
	// end inline asm
	shr.u32 	%r2630, %r2617, 8;
	xor.b32  	%r1957, %r2630, 8947848;
	// begin inline asm
	lop3.b32 %r1944, %r953, %r1957, %r1947, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1948, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1949, %r1947, %r1948;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1952, %r1944, %r1949;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1955, %r964, %r1957, %r1958, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1959, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1960, %r1958, %r1959;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1963, %r1955, %r1960;
	// end inline asm
	// begin inline asm
	mov.b32 %r1993, {%rs93, %rs93};
	// end inline asm
	// begin inline asm
	mov.b32 %r2004, {%rs95, %rs95};
	// end inline asm
	shr.u32 	%r2631, %r2621, 8;
	xor.b32  	%r2003, %r2631, 8947848;
	// begin inline asm
	lop3.b32 %r1990, %r953, %r2003, %r1993, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1994, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1995, %r1993, %r1994;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1998, %r1990, %r1995;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2001, %r964, %r2003, %r2004, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2005, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2006, %r2004, %r2005;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2009, %r2001, %r2006;
	// end inline asm
	// begin inline asm
	mov.b32 %r2039, {%rs93, %rs93};
	// end inline asm
	// begin inline asm
	mov.b32 %r2050, {%rs95, %rs95};
	// end inline asm
	shr.u32 	%r2632, %r2625, 8;
	xor.b32  	%r2049, %r2632, 8947848;
	// begin inline asm
	lop3.b32 %r2036, %r953, %r2049, %r2039, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2040, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2041, %r2039, %r2040;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2044, %r2036, %r2041;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2047, %r964, %r2049, %r2050, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2051, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2052, %r2050, %r2051;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2055, %r2047, %r2052;
	// end inline asm
	// begin inline asm
	mov.b32 %r2085, {%rs93, %rs93};
	// end inline asm
	// begin inline asm
	mov.b32 %r2096, {%rs95, %rs95};
	// end inline asm
	shr.u32 	%r2633, %r2629, 8;
	xor.b32  	%r2095, %r2633, 8947848;
	// begin inline asm
	lop3.b32 %r2082, %r953, %r2095, %r2085, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2086, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2087, %r2085, %r2086;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2090, %r2082, %r2087;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2093, %r964, %r2095, %r2096, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2097, {%rs99, %rs99};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2098, %r2096, %r2097;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2101, %r2093, %r2098;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r179;
    mov.b32 {%r2re, %r2im}, %r1952;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2104, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r180;
    mov.b32 {%r2re, %r2im}, %r1998;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2107, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r181;
    mov.b32 {%r2re, %r2im}, %r1963;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2110, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r182;
    mov.b32 {%r2re, %r2im}, %r2009;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2113, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r179;
    mov.b32 {%r2re, %r2im}, %r2044;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2116, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r180;
    mov.b32 {%r2re, %r2im}, %r2090;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2119, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r181;
    mov.b32 {%r2re, %r2im}, %r2055;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2122, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r182;
    mov.b32 {%r2re, %r2im}, %r2101;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2125, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2191, %r2188}, {%r292, %r295}, {%r2104}, {%r1369, %r1369};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2200, %r2197}, {%r292, %r295}, {%r2107}, {%r1369, %r1369};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2209, %r2206}, {%r292, %r295}, {%r2110}, {%r1369, %r1369};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2218, %r2215}, {%r292, %r295}, {%r2113}, {%r1369, %r1369};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2227, %r2224}, {%r292, %r295}, {%r2116}, {%r1369, %r1369};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2236, %r2233}, {%r292, %r295}, {%r2119}, {%r1369, %r1369};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2245, %r2242}, {%r292, %r295}, {%r2122}, {%r1369, %r1369};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2254, %r2251}, {%r292, %r295}, {%r2125}, {%r1369, %r1369};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2184, %r347;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2186, %r2184, %r2188;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2189, %r344, %r2191, %r2186;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2193, %r347;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2195, %r2193, %r2197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2198, %r344, %r2200, %r2195;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2202, %r347;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2204, %r2202, %r2206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2207, %r344, %r2209, %r2204;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2211, %r347;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2213, %r2211, %r2215;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2216, %r344, %r2218, %r2213;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2220, %r347;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2222, %r2220, %r2224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2225, %r344, %r2227, %r2222;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2229, %r347;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2231, %r2229, %r2233;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2234, %r344, %r2236, %r2231;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2238, %r347;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2240, %r2238, %r2242;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2243, %r344, %r2245, %r2240;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2247, %r347;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2249, %r2247, %r2251;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2252, %r344, %r2254, %r2249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2256, %r347, %r2191;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2259, %r344, %r2188, %r2256;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2263, %r347, %r2200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2266, %r344, %r2197, %r2263;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2270, %r347, %r2209;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2273, %r344, %r2206, %r2270;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2277, %r347, %r2218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2280, %r344, %r2215, %r2277;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2284, %r347, %r2227;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2287, %r344, %r2224, %r2284;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2291, %r347, %r2236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2294, %r344, %r2233, %r2291;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2298, %r347, %r2245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2301, %r344, %r2242, %r2298;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2305, %r347, %r2254;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2308, %r344, %r2251, %r2305;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2385, %r2386}, {%r388, %r391}, {%r2189, %r2259}, {%r1369, %r1369}, %r217, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2393, %r2394}, {%r388, %r391}, {%r2198, %r2266}, {%r1369, %r1369}, %r217, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2401, %r2402}, {%r388, %r391}, {%r2207, %r2273}, {%r1369, %r1369}, %r217, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2409, %r2410}, {%r388, %r391}, {%r2216, %r2280}, {%r1369, %r1369}, %r217, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2417, %r2418}, {%r388, %r391}, {%r2225, %r2287}, {%r1369, %r1369}, %r217, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2425, %r2426}, {%r388, %r391}, {%r2234, %r2294}, {%r1369, %r1369}, %r217, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2433, %r2434}, {%r388, %r391}, {%r2243, %r2301}, {%r1369, %r1369}, %r217, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2441, %r2442}, {%r388, %r391}, {%r2252, %r2308}, {%r1369, %r1369}, %r217, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2384, %r2385, %r2386, %r673;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2388, %r2385, %r2386, %r677;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2392, %r2393, %r2394, %r673;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2396, %r2393, %r2394, %r677;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2400, %r2401, %r2402, %r673;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2404, %r2401, %r2402, %r677;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2408, %r2409, %r2410, %r673;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2412, %r2409, %r2410, %r677;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2416, %r2417, %r2418, %r673;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2420, %r2417, %r2418, %r677;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2424, %r2425, %r2426, %r673;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2428, %r2425, %r2426, %r677;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2432, %r2433, %r2434, %r673;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2436, %r2433, %r2434, %r677;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2440, %r2441, %r2442, %r673;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2444, %r2441, %r2442, %r677;
	// end inline asm
	add.s32 	%r2634, %r85, %r3055;
	mul.hi.u32 	%r2635, %r2634, -1431655765;
	shr.u32 	%r2636, %r2635, 2;
	mul.lo.s32 	%r2637, %r2636, 6;
	sub.s32 	%r2638, %r2634, %r2637;
	shl.b32 	%r2639, %r2638, 4;
	add.s32 	%r2640, %r207, %r2639;
	mul.wide.u32 	%rd256, %r2640, 4;
	add.s64 	%rd258, %rd47, %rd256;
	st.shared.u32 	[%rd258], %r2384;
	cvt.u64.u32 	%rd259, %r2639;
	add.s64 	%rd260, %rd11, %rd259;
	shl.b64 	%rd261, %rd260, 2;
	add.s64 	%rd262, %rd47, %rd261;
	st.shared.u32 	[%rd262+6304], %r2388;
	add.s32 	%r2641, %r210, %r2639;
	mul.wide.u32 	%rd263, %r2641, 4;
	add.s64 	%rd264, %rd47, %rd263;
	st.shared.u32 	[%rd264], %r2392;
	add.s64 	%rd265, %rd12, %rd259;
	shl.b64 	%rd266, %rd265, 2;
	add.s64 	%rd267, %rd47, %rd266;
	st.shared.u32 	[%rd267+6304], %r2396;
	add.s64 	%rd268, %rd13, %rd259;
	shl.b64 	%rd269, %rd268, 2;
	add.s64 	%rd270, %rd47, %rd269;
	st.shared.u32 	[%rd270+32], %r2400;
	st.shared.u32 	[%rd262+6336], %r2404;
	add.s64 	%rd271, %rd14, %rd259;
	shl.b64 	%rd272, %rd271, 2;
	add.s64 	%rd273, %rd47, %rd272;
	st.shared.u32 	[%rd273+32], %r2408;
	st.shared.u32 	[%rd267+6336], %r2412;
	add.s16 	%rs157, %rs9, %rs202;
	add.s16 	%rs158, %rs157, -2;
	mul.hi.s16 	%rs159, %rs158, 10923;
	shr.u16 	%rs160, %rs159, 15;
	add.s16 	%rs161, %rs159, %rs160;
	mul.lo.s16 	%rs162, %rs161, 6;
	sub.s16 	%rs163, %rs158, %rs162;
	mul.wide.s16 	%r2642, %rs163, 16;
	add.s32 	%r2643, %r207, %r2642;
	mul.wide.s32 	%rd274, %r2643, 4;
	add.s64 	%rd275, %rd47, %rd274;
	st.shared.u32 	[%rd275], %r2416;
	add.s32 	%r2644, %r208, %r2642;
	mul.wide.u32 	%rd276, %r2644, 4;
	add.s64 	%rd277, %rd47, %rd276;
	st.shared.u32 	[%rd277], %r2420;
	add.s32 	%r2645, %r210, %r2642;
	mul.wide.s32 	%rd278, %r2645, 4;
	add.s64 	%rd279, %rd47, %rd278;
	st.shared.u32 	[%rd279], %r2424;
	add.s32 	%r2646, %r211, %r2642;
	mul.wide.u32 	%rd280, %r2646, 4;
	add.s64 	%rd281, %rd47, %rd280;
	st.shared.u32 	[%rd281], %r2428;
	cvt.s64.s32 	%rd282, %r2642;
	add.s64 	%rd290, %rd13, %rd282;
	shl.b64 	%rd291, %rd290, 2;
	add.s64 	%rd292, %rd47, %rd291;
	st.shared.u32 	[%rd292+32], %r2432;
	add.s32 	%r2647, %r212, %r2642;
	mul.wide.u32 	%rd293, %r2647, 4;
	add.s64 	%rd294, %rd47, %rd293;
	st.shared.u32 	[%rd294], %r2436;
	add.s64 	%rd298, %rd14, %rd282;
	shl.b64 	%rd299, %rd298, 2;
	add.s64 	%rd300, %rd47, %rd299;
	st.shared.u32 	[%rd300+32], %r2440;
	add.s32 	%r2648, %r213, %r2642;
	mul.wide.u32 	%rd301, %r2648, 4;
	add.s64 	%rd302, %rd47, %rd301;
	st.shared.u32 	[%rd302], %r2444;
	bar.sync 	0;
	add.s16 	%rs164, %rs202, -5;
	mul.hi.s16 	%rs165, %rs164, 10923;
	shr.u16 	%rs166, %rs165, 15;
	add.s16 	%rs167, %rs165, %rs166;
	mul.lo.s16 	%rs168, %rs167, 6;
	sub.s16 	%rs169, %rs164, %rs168;
	mul.wide.s16 	%r2649, %rs169, 16;
	add.s32 	%r2650, %r214, %r2649;
	mul.wide.s32 	%rd303, %r2650, 4;
	add.s64 	%rd304, %rd47, %rd303;
	ld.shared.u32 	%r2452, [%rd304];
	add.s32 	%r2651, %r215, %r2649;
	mul.wide.s32 	%rd305, %r2651, 4;
	add.s64 	%rd306, %rd47, %rd305;
	ld.shared.u32 	%r2459, [%rd306];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2469, %r2466}, {%r400, %r403}, {%r2452}, {%r1369, %r1369};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2478, %r2475}, {%r400, %r403}, {%r2459}, {%r1369, %r1369};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2462, %r441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2464, %r2462, %r2466;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2467, %r438, %r2469, %r2464;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2471, %r441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2473, %r2471, %r2475;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2476, %r438, %r2478, %r2473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2480, %r441, %r2469;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2483, %r438, %r2466, %r2480;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2487, %r441, %r2478;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2490, %r438, %r2475, %r2487;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2513, %r2516}, {%r484, %r487}, {%r2467, %r2483}, {%r1369, %r1369}, %r242, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2520, %r2524}, {%r484, %r487}, {%r2476, %r2490}, {%r1369, %r1369}, %r242, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2512, %r2513, %r2513;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2515, %r2516, %r2516, %r2512;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2519, %r2520, %r2520, %r2515;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2523, %r2524, %r2524, %r2519;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2527, %r1538, %r2523, %r109;
	// end inline asm
	add.s16 	%rs170, %rs202, -4;
	mul.hi.s16 	%rs171, %rs170, 10923;
	shr.u16 	%rs172, %rs171, 15;
	add.s16 	%rs173, %rs171, %rs172;
	mul.lo.s16 	%rs174, %rs173, 6;
	sub.s16 	%rs175, %rs170, %rs174;
	mul.wide.s16 	%r2652, %rs175, 16;
	add.s32 	%r2653, %r214, %r2652;
	mul.wide.s32 	%rd307, %r2653, 4;
	add.s64 	%rd308, %rd47, %rd307;
	ld.shared.u32 	%r2535, [%rd308];
	add.s32 	%r2654, %r215, %r2652;
	mul.wide.s32 	%rd309, %r2654, 4;
	add.s64 	%rd310, %rd47, %rd309;
	ld.shared.u32 	%r2542, [%rd310];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2552, %r2549}, {%r400, %r403}, {%r2535}, {%r1369, %r1369};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2561, %r2558}, {%r400, %r403}, {%r2542}, {%r1369, %r1369};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2545, %r441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2547, %r2545, %r2549;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2550, %r438, %r2552, %r2547;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2554, %r441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2556, %r2554, %r2558;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2559, %r438, %r2561, %r2556;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2563, %r441, %r2552;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2566, %r438, %r2549, %r2563;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2570, %r441, %r2561;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2573, %r438, %r2558, %r2570;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2596, %r2599}, {%r484, %r487}, {%r2550, %r2566}, {%r1369, %r1369}, %r242, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2603, %r2607}, {%r484, %r487}, {%r2559, %r2573}, {%r1369, %r1369}, %r242, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2595, %r2596, %r2596;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2598, %r2599, %r2599, %r2595;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2602, %r2603, %r2603, %r2598;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2606, %r2607, %r2607, %r2602;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3072, %r1538, %r2606, %r2527;
	// end inline asm
	add.s32 	%r3070, %r107, 2;
	setp.ne.s32 	%p275, %r3070, 4;
	@%p275 bra 	$L__BB0_153;
// %bb.151:                             // %L26761
                                        //   in Loop: Header=BB0_150 Depth=2
	@%p297 bra 	$L__BB0_198;
	bra.uni 	$L__BB0_152;
$L__BB0_198:                            // %pass11874
                                        //   in Loop: Header=BB0_150 Depth=2
	mad.lo.s32 	%r2655, %r108, 4718592, %r216;
	cvt.u64.u32 	%rd311, %r2655;
	add.s64 	%rd312, %rd311, %rd6;
	mul.hi.s64 	%rd313, %rd312, 1024819115206086201;
	shr.u64 	%rd314, %rd313, 63;
	shr.s64 	%rd315, %rd313, 24;
	add.s64 	%rd316, %rd315, %rd314;
	setp.lt.s64 	%p277, %rd312, 0;
	mul.lo.s64 	%rd317, %rd316, 301989888;
	setp.ne.s64 	%p278, %rd317, %rd312;
	and.pred  	%p279, %p277, %p278;
	selp.s64 	%rd318, -1, 0, %p279;
	add.s64 	%rd319, %rd316, %rd318;
	mul.lo.s64 	%rd320, %rd319, -301989888;
	add.s64 	%rd321, %rd320, %rd312;
	shl.b64 	%rd322, %rd321, 2;
	add.s64 	%rd323, %rd4, %rd322;
	st.global.u32 	[%rd323], %r3072;
$L__BB0_152:                            // %L26976
                                        //   in Loop: Header=BB0_150 Depth=2
	add.s32 	%r108, %r108, 1;
	mov.u32 	%r3070, 0;
	mov.u32 	%r3072, %r3070;
$L__BB0_153:                            // %oksrem12007
                                        //   in Loop: Header=BB0_150 Depth=2
	add.s16 	%rs176, %rs202, -3;
	mul.hi.s16 	%rs177, %rs176, 10923;
	shr.u16 	%rs178, %rs177, 15;
	add.s16 	%rs179, %rs177, %rs178;
	mul.lo.s16 	%rs180, %rs179, 6;
	sub.s16 	%rs181, %rs176, %rs180;
	mul.wide.s16 	%r2823, %rs181, 16;
	add.s32 	%r2824, %r214, %r2823;
	mul.wide.s32 	%rd324, %r2824, 4;
	add.s64 	%rd326, %rd47, %rd324;
	ld.shared.u32 	%r2661, [%rd326];
	add.s32 	%r2825, %r215, %r2823;
	mul.wide.s32 	%rd327, %r2825, 4;
	add.s64 	%rd328, %rd47, %rd327;
	ld.shared.u32 	%r2668, [%rd328];
	mov.u32 	%r2802, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2678, %r2675}, {%r400, %r403}, {%r2661}, {%r2802, %r2802};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2687, %r2684}, {%r400, %r403}, {%r2668}, {%r2802, %r2802};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2671, %r441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2673, %r2671, %r2675;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2676, %r438, %r2678, %r2673;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2680, %r441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2682, %r2680, %r2684;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2685, %r438, %r2687, %r2682;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2689, %r441, %r2678;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2692, %r438, %r2675, %r2689;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2696, %r441, %r2687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2699, %r438, %r2684, %r2696;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2722, %r2725}, {%r484, %r487}, {%r2676, %r2692}, {%r2802, %r2802}, %r242, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2729, %r2733}, {%r484, %r487}, {%r2685, %r2699}, {%r2802, %r2802}, %r242, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2721, %r2722, %r2722;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2724, %r2725, %r2725, %r2721;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2728, %r2729, %r2729, %r2724;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2732, %r2733, %r2733, %r2728;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2736, %r1538, %r2732, %r3072;
	// end inline asm
	add.s16 	%rs182, %rs202, -2;
	mul.hi.s16 	%rs183, %rs182, 10923;
	shr.u16 	%rs184, %rs183, 15;
	add.s16 	%rs185, %rs183, %rs184;
	mul.lo.s16 	%rs186, %rs185, 6;
	sub.s16 	%rs187, %rs182, %rs186;
	mul.wide.s16 	%r2826, %rs187, 16;
	add.s32 	%r2827, %r214, %r2826;
	mul.wide.s32 	%rd329, %r2827, 4;
	add.s64 	%rd330, %rd47, %rd329;
	ld.shared.u32 	%r2744, [%rd330];
	add.s32 	%r2828, %r215, %r2826;
	mul.wide.s32 	%rd331, %r2828, 4;
	add.s64 	%rd332, %rd47, %rd331;
	ld.shared.u32 	%r2751, [%rd332];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2761, %r2758}, {%r400, %r403}, {%r2744}, {%r2802, %r2802};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2770, %r2767}, {%r400, %r403}, {%r2751}, {%r2802, %r2802};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2754, %r441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2756, %r2754, %r2758;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2759, %r438, %r2761, %r2756;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2763, %r441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2765, %r2763, %r2767;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2768, %r438, %r2770, %r2765;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2772, %r441, %r2761;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2775, %r438, %r2758, %r2772;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2779, %r441, %r2770;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2782, %r438, %r2767, %r2779;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2805, %r2808}, {%r484, %r487}, {%r2759, %r2775}, {%r2802, %r2802}, %r242, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2812, %r2816}, {%r484, %r487}, {%r2768, %r2782}, {%r2802, %r2802}, %r242, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2804, %r2805, %r2805;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2807, %r2808, %r2808, %r2804;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2811, %r2812, %r2812, %r2807;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2815, %r2816, %r2816, %r2811;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3075, %r1538, %r2815, %r2736;
	// end inline asm
	add.s32 	%r3073, %r3070, 2;
	setp.eq.s32 	%p280, %r3073, 4;
	@%p280 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_156;
$L__BB0_154:                            // %L28726
                                        //   in Loop: Header=BB0_150 Depth=2
	@%p297 bra 	$L__BB0_199;
	bra.uni 	$L__BB0_155;
$L__BB0_199:                            // %pass12725
                                        //   in Loop: Header=BB0_150 Depth=2
	mad.lo.s32 	%r2829, %r108, 4718592, %r216;
	cvt.u64.u32 	%rd333, %r2829;
	add.s64 	%rd334, %rd333, %rd6;
	mul.hi.s64 	%rd335, %rd334, 1024819115206086201;
	shr.u64 	%rd336, %rd335, 63;
	shr.s64 	%rd337, %rd335, 24;
	add.s64 	%rd338, %rd337, %rd336;
	setp.lt.s64 	%p282, %rd334, 0;
	mul.lo.s64 	%rd339, %rd338, 301989888;
	setp.ne.s64 	%p283, %rd339, %rd334;
	and.pred  	%p284, %p282, %p283;
	selp.s64 	%rd340, -1, 0, %p284;
	add.s64 	%rd341, %rd338, %rd340;
	mul.lo.s64 	%rd342, %rd341, -301989888;
	add.s64 	%rd343, %rd342, %rd334;
	shl.b64 	%rd344, %rd343, 2;
	add.s64 	%rd345, %rd4, %rd344;
	st.global.u32 	[%rd345], %r3075;
$L__BB0_155:                            // %L28941
                                        //   in Loop: Header=BB0_150 Depth=2
	add.s32 	%r108, %r108, 1;
	mov.u32 	%r3073, 0;
	mov.u32 	%r3075, %r3073;
$L__BB0_156:                            // %oksrem12858
                                        //   in Loop: Header=BB0_150 Depth=2
	add.s16 	%rs188, %rs202, -1;
	mul.hi.s16 	%rs189, %rs188, 10923;
	shr.u16 	%rs190, %rs189, 15;
	add.s16 	%rs191, %rs189, %rs190;
	mul.lo.s16 	%rs192, %rs191, 6;
	sub.s16 	%rs193, %rs188, %rs192;
	mul.wide.s16 	%r2997, %rs193, 16;
	add.s32 	%r2998, %r214, %r2997;
	mul.wide.s32 	%rd346, %r2998, 4;
	add.s64 	%rd348, %rd47, %rd346;
	ld.shared.u32 	%r2835, [%rd348];
	add.s32 	%r2999, %r215, %r2997;
	mul.wide.s32 	%rd349, %r2999, 4;
	add.s64 	%rd350, %rd47, %rd349;
	ld.shared.u32 	%r2842, [%rd350];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2852, %r2849}, {%r400, %r403}, {%r2835}, {%r2802, %r2802};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2861, %r2858}, {%r400, %r403}, {%r2842}, {%r2802, %r2802};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2845, %r441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2847, %r2845, %r2849;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2850, %r438, %r2852, %r2847;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2854, %r441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2856, %r2854, %r2858;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2859, %r438, %r2861, %r2856;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2863, %r441, %r2852;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2866, %r438, %r2849, %r2863;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2870, %r441, %r2861;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2873, %r438, %r2858, %r2870;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2896, %r2899}, {%r484, %r487}, {%r2850, %r2866}, {%r2802, %r2802}, %r242, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2903, %r2907}, {%r484, %r487}, {%r2859, %r2873}, {%r2802, %r2802}, %r242, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2895, %r2896, %r2896;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2898, %r2899, %r2899, %r2895;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2902, %r2903, %r2903, %r2898;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2906, %r2907, %r2907, %r2902;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2910, %r1538, %r2906, %r3075;
	// end inline asm
	mul.hi.s16 	%rs194, %rs202, 10923;
	shr.u16 	%rs195, %rs194, 15;
	add.s16 	%rs196, %rs194, %rs195;
	mul.lo.s16 	%rs197, %rs196, 6;
	sub.s16 	%rs198, %rs202, %rs197;
	mul.wide.s16 	%r3000, %rs198, 16;
	add.s32 	%r3001, %r214, %r3000;
	mul.wide.s32 	%rd351, %r3001, 4;
	add.s64 	%rd352, %rd47, %rd351;
	ld.shared.u32 	%r2918, [%rd352];
	add.s32 	%r3002, %r215, %r3000;
	mul.wide.s32 	%rd353, %r3002, 4;
	add.s64 	%rd354, %rd47, %rd353;
	ld.shared.u32 	%r2925, [%rd354];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2935, %r2932}, {%r400, %r403}, {%r2918}, {%r2802, %r2802};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2944, %r2941}, {%r400, %r403}, {%r2925}, {%r2802, %r2802};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2928, %r441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2930, %r2928, %r2932;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2933, %r438, %r2935, %r2930;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2937, %r441;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2939, %r2937, %r2941;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2942, %r438, %r2944, %r2939;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2946, %r441, %r2935;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2949, %r438, %r2932, %r2946;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2953, %r441, %r2944;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2956, %r438, %r2941, %r2953;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2979, %r2982}, {%r484, %r487}, {%r2933, %r2949}, {%r2802, %r2802}, %r242, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2986, %r2990}, {%r484, %r487}, {%r2942, %r2956}, {%r2802, %r2802}, %r242, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2978, %r2979, %r2979;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2981, %r2982, %r2982, %r2978;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2985, %r2986, %r2986, %r2981;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2989, %r2990, %r2990, %r2985;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r109, %r1538, %r2989, %r2910;
	// end inline asm
	add.s32 	%r107, %r3073, 2;
	setp.eq.s32 	%p285, %r107, 4;
	@%p285 bra 	$L__BB0_157;
	bra.uni 	$L__BB0_159;
$L__BB0_157:                            // %L30691
                                        //   in Loop: Header=BB0_150 Depth=2
	@%p297 bra 	$L__BB0_200;
	bra.uni 	$L__BB0_158;
$L__BB0_200:                            // %pass13576
                                        //   in Loop: Header=BB0_150 Depth=2
	mad.lo.s32 	%r3003, %r108, 4718592, %r216;
	cvt.u64.u32 	%rd355, %r3003;
	add.s64 	%rd356, %rd355, %rd6;
	mul.hi.s64 	%rd357, %rd356, 1024819115206086201;
	shr.u64 	%rd358, %rd357, 63;
	shr.s64 	%rd359, %rd357, 24;
	add.s64 	%rd360, %rd359, %rd358;
	setp.lt.s64 	%p287, %rd356, 0;
	mul.lo.s64 	%rd361, %rd360, 301989888;
	setp.ne.s64 	%p288, %rd361, %rd356;
	and.pred  	%p289, %p287, %p288;
	selp.s64 	%rd362, -1, 0, %p289;
	add.s64 	%rd363, %rd360, %rd362;
	mul.lo.s64 	%rd364, %rd363, -301989888;
	add.s64 	%rd365, %rd364, %rd356;
	shl.b64 	%rd366, %rd365, 2;
	add.s64 	%rd367, %rd4, %rd366;
	st.global.u32 	[%rd367], %r109;
	bra.uni 	$L__BB0_158;
$L__BB0_161:                            // %L30938
	mov.u32 	%r3005, 0;
	st.global.u32 	[%rd5], %r3005;
	ret;
$L__BB0_141:                            // %post_box_union
	mov.u64 	%rd137, exception2644;
	cvta.global.u64 	%rd138, %rd137;
	{ // callseq 12, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd138;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 12
	{ // callseq 13, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r266;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 13
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_192:                            // %post_box_union6551
	mov.u64 	%rd192, exception2644;
	cvta.global.u64 	%rd193, %rd192;
	{ // callseq 14, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd193;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 14
	{ // callseq 15, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r266;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 15
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L157
	mov.u32 	%r3006, 2;
	st.global.u32 	[%rd5], %r3006;
	mov.u64 	%rd368, exception2604;
	cvta.global.u64 	%rd369, %rd368;
	{ // callseq 16, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd369;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 16
	{ // callseq 17, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r266;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 17
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd20, exception12655;
	cvta.global.u64 	%rd21, %rd20;
	{ // callseq 10, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd21;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 10
	{ // callseq 11, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r266;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 11
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
