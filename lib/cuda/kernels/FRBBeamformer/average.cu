__global__ void FRBBeamformer_average(const int* __restrict__ const E_global,
                                      float* __restrict__ const Esum_global) {
    asm(".reg .u32 r0;\n"
        ".reg .u32 r1;\n"
        ".reg .u32 r2;\n"
        ".reg .u32 r3;\n"
        ".reg .u32 r4;\n"
        ".reg .u32 r5;\n"
        ".reg .u32 r6;\n"
        ".reg .u32 r7;\n"
        ".reg .u32 r8;\n"
        ".reg .u32 r9;\n"
        ".reg .u32 r10;\n"
        ".reg .u32 r11;\n"
        ".reg .u32 r12;\n"
        ".reg .u32 r13;\n"
        ".reg .u32 r14;\n"
        ".reg .u32 r15;\n"
        ".reg .u32 r16;\n"
        ".reg .u32 r17;\n"
        ".reg .u32 r18;\n"
        ".reg .u32 r19;\n"
        ".reg .u32 r20;\n"
        ".reg .u32 r21;\n"
        ".reg .u32 r22;\n"
        ".reg .u32 r23;\n"
        ".reg .u32 r24;\n"
        ".reg .u32 r25;\n"
        ".reg .u32 r26;\n"
        ".reg .u32 r27;\n"
        ".reg .u32 r28;\n"
        ".reg .u32 r29;\n"
        ".reg .u32 r30;\n"
        ".reg .u32 r31;\n"
        ".reg .u32 r32;\n"
        ".reg .u32 r33;\n"
        ".reg .u32 r34;\n"
        ".reg .u32 r35;\n"
        ".reg .u32 r36;\n"
        ".reg .u32 r37;\n"
        ".reg .u32 r38;\n"
        ".reg .u32 r39;\n"
        ".reg .u32 r40;\n"
        ".reg .u32 r41;\n"
        ".reg .u32 r42;\n"
        ".reg .u32 r43;\n"
        ".reg .u32 r44;\n"
        ".reg .u32 r45;\n"
        ".reg .u32 r46;\n"
        ".reg .u32 r47;\n"
        ".reg .u32 r48;\n"
        ".reg .u32 r49;\n"
        ".reg .u32 r50;\n"
        ".reg .u32 r51;\n"
        ".reg .u32 r52;\n"
        ".reg .u32 r53;\n"
        ".reg .u32 r54;\n"
        ".reg .u32 r55;\n"
        ".reg .u32 r56;\n"
        ".reg .u32 r57;\n"
        ".reg .u32 r58;\n"
        ".reg .u32 r59;\n"
        ".reg .u64 rd0;\n"
        ".reg .u64 rd1;\n"
        ".reg .u64 rd2;\n"
        ".reg .u64 rd3;\n"
        ".reg .u64 rd4;\n"
        ".reg .u64 rd5;\n"
        ".reg .u64 rd6;\n"
        ".reg .u64 rd7;\n"
        ".reg .u64 rd8;\n"
        ".reg .u64 rd9;\n"
        ".reg .u64 rd10;\n"
        "	mov.u64 	rd4, %0;\n"
        "	mov.u64 	rd5, %1;\n"
        "	mov.u32 	r4, %%ctaid.x;\n"
        "	shl.b32 	r5, r4, 11;\n"
        "	and.b32  	r6, r5, 522240;\n"
        "	mov.u32 	r7, %%tid.y;\n"
        "	shl.b32 	r8, r7, 8;\n"
        "	and.b32  	r9, r8, 1792;\n"
        "	mov.u32 	r10, %%tid.x;\n"
        "	and.b32  	r11, r10, 31;\n"
        "	or.b32  	r12, r9, r6;\n"
        "	or.b32  	r13, r12, r11;\n"
        "	mul.wide.u32 	rd6, r13, 4;\n"
        "	add.s64 	rd7, rd5, rd6;\n"
        "	mov.u32 	r26, 0;\n"
        "	st.global.u32 	[rd7], r26;\n"
        "	st.global.u32 	[rd7+128], r26;\n"
        "	st.global.u32 	[rd7+256], r26;\n"
        "	st.global.u32 	[rd7+384], r26;\n"
        "	st.global.u32 	[rd7+512], r26;\n"
        "	st.global.u32 	[rd7+640], r26;\n"
        "	st.global.u32 	[rd7+768], r26;\n"
        "	st.global.u32 	[rd7+896], r26;\n"
"	shl.b32 	%r15, %r4, 8;\n"
"	and.b32  	%r16, %r15, 65280;\n"
"	shl.b32 	%r17, %r7, 5;\n"
"	and.b32  	%r18, %r17, 224;\n"
"	or.b32  	%r19, %r18, %r16;\n"
"	or.b32  	%r20, %r19, %r11;\n"
"	mul.wide.u32 	%rd8, %r20, 4;\n"
"	add.s64 	%rd1, %rd4, %rd8;\n"
"	shl.b32 	%r21, %r10, 3;\n"
"	and.b32  	%r22, %r21, 248;\n"
"	or.b32  	%r23, %r12, %r22;\n"
"	mul.wide.u32 	%rd9, %r23, 4;\n"
"	add.s64 	%rd10, %rd9, %rd5;\n"
"	add.s64 	%rd3, %rd10, -4;\n"
"	mov.u32 	%r55, 32768;\n"
"LBB0_1:                                 // %L577\n"
"                                        // =>This Inner Loop Header: Depth=1\n"
"	ld.global.u32 	%r48, [%rd1];\n"
"	xor.b32  	%r49, %r48, -2004318072;\n"
"	and.b32  	%r50, %r49, 252645135;\n"
"	add.s32 	%r51, %r50, 2021161080;\n"
"	xor.b32  	%r25, %r51, -2139062144;\n"
"	shr.u32 	%r52, %r49, 4;\n"
"	and.b32  	%r53, %r52, 252645135;\n"
"	add.s32 	%r54, %r53, 2021161080;\n"
"	xor.b32  	%r37, %r54, -2139062144;\n"
"	// begin inline asm\n"
"	prmt.b32 %r24, %r25, %r26, 34944;\n"
"	// end inline asm\n"
"	// begin inline asm\n"
"	prmt.b32 %r27, %r25, %r26, 39313;\n"
"	// end inline asm\n"
"	// begin inline asm\n"
"	prmt.b32 %r30, %r25, %r26, 43682;\n"
"	// end inline asm\n"
"	// begin inline asm\n"
"	prmt.b32 %r33, %r25, %r26, 48051;\n"
"	// end inline asm\n"
"	// begin inline asm\n"
"	prmt.b32 %r36, %r37, %r26, 34944;\n"
"	// end inline asm\n"
"	// begin inline asm\n"
"	prmt.b32 %r39, %r37, %r26, 39313;\n"
"	// end inline asm\n"
"	// begin inline asm\n"
"	prmt.b32 %r42, %r37, %r26, 43682;\n"
"	// end inline asm\n"
"	// begin inline asm\n"
"	prmt.b32 %r45, %r37, %r26, 48051;\n"
"	// end inline asm\n"
"	cvt.rn.f32.s32 	%f1, %r24;\n"
"	cvt.rn.f32.s32 	%f2, %r36;\n"
"	cvt.rn.f32.s32 	%f3, %r27;\n"
"	cvt.rn.f32.s32 	%f4, %r39;\n"
"	cvt.rn.f32.s32 	%f5, %r30;\n"
"	cvt.rn.f32.s32 	%f6, %r42;\n"
"	cvt.rn.f32.s32 	%f7, %r33;\n"
"	cvt.rn.f32.s32 	%f8, %r45;\n"
"	ld.global.f32 	%f9, [%rd3+4];\n"
"	add.f32 	%f10, %f9, %f1;\n"
"	st.global.f32 	[%rd3+4], %f10;\n"
"	ld.global.f32 	%f11, [%rd3+8];\n"
"	add.f32 	%f12, %f11, %f2;\n"
"	st.global.f32 	[%rd3+8], %f12;\n"
"	ld.global.f32 	%f13, [%rd3+12];\n"
"	add.f32 	%f14, %f13, %f3;\n"
"	st.global.f32 	[%rd3+12], %f14;\n"
"	ld.global.f32 	%f15, [%rd3+16];\n"
"	add.f32 	%f16, %f15, %f4;\n"
"	st.global.f32 	[%rd3+16], %f16;\n"
"	ld.global.f32 	%f17, [%rd3+20];\n"
"	add.f32 	%f18, %f17, %f5;\n"
"	st.global.f32 	[%rd3+20], %f18;\n"
"	ld.global.f32 	%f19, [%rd3+24];\n"
"	add.f32 	%f20, %f19, %f6;\n"
"	st.global.f32 	[%rd3+24], %f20;\n"
"	ld.global.f32 	%f21, [%rd3+28];\n"
"	add.f32 	%f22, %f21, %f7;\n"
"	st.global.f32 	[%rd3+28], %f22;\n"
"	ld.global.f32 	%f23, [%rd3+32];\n"
"	add.f32 	%f24, %f23, %f8;\n"
"	st.global.f32 	[%rd3+32], %f24;\n"
"	add.s32 	%r55, %r55, -1;\n"
"	setp.ne.s32 	%p1, %r55, 0;\n"
"	@%p1 bra 	LBB0_1;\n"
"// %bb.2:                               // %L1467\n"
"	ret;\n"
        //
        ::"l"(E_global),
        "l"(Esum_global));
}
