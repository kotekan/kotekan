// PTX CompilerJob of kernel runsteps(CuDeviceVector{Int4x8, 1}, CuDeviceVector{Float32, 1}) for sm_80, blocks_per_sm=1, maxregs=4096

//
// Generated by LLVM NVPTX Back-End
//

.version 7.0
.target sm_80
.address_size 64

	// .globl	_Z19julia_runsteps_630513CuDeviceArrayI6Int4x8Li1ELi1EES_I7Float32Li1ELi1EE // -- Begin function _Z19julia_runsteps_630513CuDeviceArrayI6Int4x8Li1ELi1EES_I7Float32Li1ELi1EE
                                        // @_Z19julia_runsteps_630513CuDeviceArrayI6Int4x8Li1ELi1EES_I7Float32Li1ELi1EE
.visible .entry _Z19julia_runsteps_630513CuDeviceArrayI6Int4x8Li1ELi1EES_I7Float32Li1ELi1EE(
	.param .align 8 .b8 _Z19julia_runsteps_630513CuDeviceArrayI6Int4x8Li1ELi1EES_I7Float32Li1ELi1EE_param_0[8],
	.param .align 8 .b8 _Z19julia_runsteps_630513CuDeviceArrayI6Int4x8Li1ELi1EES_I7Float32Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z19julia_runsteps_630513CuDeviceArrayI6Int4x8Li1ELi1EES_I7Float32Li1ELi1EE_param_2[32]
)
.minnctapersm 1
.maxnreg 4096
{
	.reg .pred 	%p<2>;
	.reg .f32 	%f<25>;
	.reg .b32 	%r<56>;
	.reg .b64 	%rd<11>;

// %bb.0:                               // %entry
	ld.param.u64 	%rd4, [_Z19julia_runsteps_630513CuDeviceArrayI6Int4x8Li1ELi1EES_I7Float32Li1ELi1EE_param_1];
	ld.param.u64 	%rd5, [_Z19julia_runsteps_630513CuDeviceArrayI6Int4x8Li1ELi1EES_I7Float32Li1ELi1EE_param_2];
	mov.u32 	%r4, %ctaid.x;
	shl.b32 	%r5, %r4, 11;
	and.b32  	%r6, %r5, 522240;
	mov.u32 	%r7, %tid.y;
	shl.b32 	%r8, %r7, 8;
	and.b32  	%r9, %r8, 1792;
	mov.u32 	%r10, %tid.x;
	and.b32  	%r11, %r10, 31;
	or.b32  	%r12, %r9, %r6;
	or.b32  	%r13, %r12, %r11;
	mul.wide.u32 	%rd6, %r13, 4;
	add.s64 	%rd7, %rd5, %rd6;
	mov.u32 	%r26, 0;
	st.global.u32 	[%rd7], %r26;
	st.global.u32 	[%rd7+128], %r26;
	st.global.u32 	[%rd7+256], %r26;
	st.global.u32 	[%rd7+384], %r26;
	st.global.u32 	[%rd7+512], %r26;
	st.global.u32 	[%rd7+640], %r26;
	st.global.u32 	[%rd7+768], %r26;
	st.global.u32 	[%rd7+896], %r26;
	shl.b32 	%r15, %r4, 8;
	and.b32  	%r16, %r15, 65280;
	shl.b32 	%r17, %r7, 5;
	and.b32  	%r18, %r17, 224;
	or.b32  	%r19, %r18, %r16;
	or.b32  	%r20, %r19, %r11;
	mul.wide.u32 	%rd8, %r20, 4;
	add.s64 	%rd1, %rd4, %rd8;
	shl.b32 	%r21, %r10, 3;
	and.b32  	%r22, %r21, 248;
	or.b32  	%r23, %r12, %r22;
	mul.wide.u32 	%rd9, %r23, 4;
	add.s64 	%rd10, %rd9, %rd5;
	add.s64 	%rd3, %rd10, -4;
	mov.u32 	%r55, 32768;
LBB0_1:                                 // %L577
                                        // =>This Inner Loop Header: Depth=1
	ld.global.u32 	%r48, [%rd1];
	xor.b32  	%r49, %r48, -2004318072;
	and.b32  	%r50, %r49, 252645135;
	add.s32 	%r51, %r50, 2021161080;
	xor.b32  	%r25, %r51, -2139062144;
	shr.u32 	%r52, %r49, 4;
	and.b32  	%r53, %r52, 252645135;
	add.s32 	%r54, %r53, 2021161080;
	xor.b32  	%r37, %r54, -2139062144;
	// begin inline asm
	prmt.b32 %r24, %r25, %r26, 34944;
	// end inline asm
	// begin inline asm
	prmt.b32 %r27, %r25, %r26, 39313;
	// end inline asm
	// begin inline asm
	prmt.b32 %r30, %r25, %r26, 43682;
	// end inline asm
	// begin inline asm
	prmt.b32 %r33, %r25, %r26, 48051;
	// end inline asm
	// begin inline asm
	prmt.b32 %r36, %r37, %r26, 34944;
	// end inline asm
	// begin inline asm
	prmt.b32 %r39, %r37, %r26, 39313;
	// end inline asm
	// begin inline asm
	prmt.b32 %r42, %r37, %r26, 43682;
	// end inline asm
	// begin inline asm
	prmt.b32 %r45, %r37, %r26, 48051;
	// end inline asm
	cvt.rn.f32.s32 	%f1, %r24;
	cvt.rn.f32.s32 	%f2, %r36;
	cvt.rn.f32.s32 	%f3, %r27;
	cvt.rn.f32.s32 	%f4, %r39;
	cvt.rn.f32.s32 	%f5, %r30;
	cvt.rn.f32.s32 	%f6, %r42;
	cvt.rn.f32.s32 	%f7, %r33;
	cvt.rn.f32.s32 	%f8, %r45;
	ld.global.f32 	%f9, [%rd3+4];
	add.f32 	%f10, %f9, %f1;
	st.global.f32 	[%rd3+4], %f10;
	ld.global.f32 	%f11, [%rd3+8];
	add.f32 	%f12, %f11, %f2;
	st.global.f32 	[%rd3+8], %f12;
	ld.global.f32 	%f13, [%rd3+12];
	add.f32 	%f14, %f13, %f3;
	st.global.f32 	[%rd3+12], %f14;
	ld.global.f32 	%f15, [%rd3+16];
	add.f32 	%f16, %f15, %f4;
	st.global.f32 	[%rd3+16], %f16;
	ld.global.f32 	%f17, [%rd3+20];
	add.f32 	%f18, %f17, %f5;
	st.global.f32 	[%rd3+20], %f18;
	ld.global.f32 	%f19, [%rd3+24];
	add.f32 	%f20, %f19, %f6;
	st.global.f32 	[%rd3+24], %f20;
	ld.global.f32 	%f21, [%rd3+28];
	add.f32 	%f22, %f21, %f7;
	st.global.f32 	[%rd3+28], %f22;
	ld.global.f32 	%f23, [%rd3+32];
	add.f32 	%f24, %f23, %f8;
	st.global.f32 	[%rd3+32], %f24;
	add.s32 	%r55, %r55, -1;
	setp.ne.s32 	%p1, %r55, 0;
	@%p1 bra 	LBB0_1;
// %bb.2:                               // %L1467
	ret;
                                        // -- End function
}
