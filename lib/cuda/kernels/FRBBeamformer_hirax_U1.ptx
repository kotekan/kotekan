// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception2333[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception2381[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 512, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<296>;
	.reg .b16 	%rs<97>;
	.reg .b32 	%r<3349>;
	.reg .f32 	%f<752>;
	.reg .b64 	%rd<270>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r212, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd59, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r221, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r221, 34943;
	@%p2 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd60, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r213, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %ctaid.x;
	shl.b32 	%r5, %r4, 9;
	or.b32  	%r222, %r3, %r1;
	or.b32  	%r223, %r222, %r5;
	mul.wide.u32 	%rd67, %r223, 4;
	add.s64 	%rd6, %rd60, %rd67;
	mov.u32 	%r224, 1;
	st.global.u32 	[%rd6], %r224;
	setp.gt.u32 	%p3, %r213, 65535;
	@%p3 bra 	$L__BB0_6;
// %bb.3:                               // %L122
	ld.param.u32 	%r214, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p4, %r214, %r213;
	setp.gt.s32 	%p5, %r214, 131071;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_6;
// %bb.4:                               // %L129
	ld.param.u32 	%r215, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r214, %r213;
	and.b32  	%r225, %r6, 63;
	setp.ne.s32 	%p7, %r225, 0;
	setp.gt.u32 	%p8, %r215, 1023;
	or.pred  	%p9, %p7, %p8;
	@%p9 bra 	$L__BB0_6;
// %bb.5:                               // %L140
	ld.param.u32 	%r216, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p10, %r216, %r215;
	setp.lt.s32 	%p11, %r216, 2048;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r226, %r216, %r215;
	mul.hi.s32 	%r227, %r6, 715827883;
	shr.u32 	%r228, %r227, 31;
	shr.s32 	%r229, %r227, 6;
	add.s32 	%r230, %r229, %r228;
	setp.eq.s32 	%p13, %r226, %r230;
	@%p13 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L262
	ld.param.u32 	%r217, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p14, %r217, 0;
	@%p14 bra 	$L__BB0_12;
// %bb.9:                               // %L264
	ld.param.u32 	%r219, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	ld.param.u32 	%r218, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p15, %r218, %r217;
	setp.gt.s32 	%p16, %r218, 64;
	or.pred  	%p17, %p15, %p16;
	setp.lt.s32 	%p18, %r219, 0;
	or.pred  	%p19, %p17, %p18;
	@%p19 bra 	$L__BB0_12;
// %bb.10:                              // %L280
	ld.param.u32 	%r220, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p20, %r220, %r219;
	setp.gt.s32 	%p21, %r220, 2048;
	or.pred  	%p22, %p20, %p21;
	@%p22 bra 	$L__BB0_12;
// %bb.11:                              // %L290
	sub.s32 	%r231, %r220, %r219;
	sub.s32 	%r232, %r218, %r217;
	setp.eq.s32 	%p23, %r231, %r232;
	@%p23 bra 	$L__BB0_157;
	bra.uni 	$L__BB0_12;
$L__BB0_157:                            // %pass162
	and.b32  	%r127, %r1, 3;
	shr.u32 	%r128, %r1, 2;
	mul.lo.s32 	%r233, %r127, %r128;
	and.b32  	%r234, %r233, 7;
	cvt.rn.f32.s32 	%f185, %r234;
	mov.f32 	%f186, 0f40800000;
	div.approx.f32 	%f151, %f185, %f186;
	abs.f32 	%f750, %f151;
	setp.lt.f32 	%p24, %f750, 0f40000000;
	mov.f32 	%f703, 0f40000000;
	setp.gtu.f32 	%p291, %f750, 0f4B800000;
	mov.f32 	%f746, %f750;
	@%p24 bra 	$L__BB0_169;
// %bb.158:
	@%p291 bra 	$L__BB0_165;
	bra.uni 	$L__BB0_159;
$L__BB0_165:
	mov.b32 	%r130, %f750;
	and.b32  	%r235, %r130, 8388607;
	or.b32  	%r3344, %r235, 1065353216;
	mov.b32 	%f745, %r3344;
	add.s32 	%r236, %r130, -1073741824;
	and.b32  	%r3345, %r236, -8388608;
	setp.eq.s32 	%p31, %r3345, 0;
	@%p31 bra 	$L__BB0_168;
// %bb.166:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f196, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f195,%f196;
	// end inline asm
$L__BB0_167:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r237, %r3345, 192937984;
	add.s32 	%r238, %r3344, %r237;
	mov.b32 	%f197, %r238;
	mul.f32 	%f198, %f195, %f197;
	sub.f32 	%f199, %f197, %f198;
	fma.rn.f32 	%f200, %f199, %f195, %f198;
	sub.f32 	%f201, %f197, %f200;
	fma.rz.f32 	%f202, %f201, %f195, %f200;
	cvt.rzi.f32.f32 	%f203, %f202;
	sub.f32 	%f745, %f197, %f203;
	sub.s32 	%r3345, %r3345, %r237;
	mov.b32 	%r3344, %f745;
	setp.ne.s32 	%p32, %r3345, 0;
	setp.ne.s32 	%p33, %r3344, 0;
	and.pred  	%p34, %p32, %p33;
	@%p34 bra 	$L__BB0_167;
$L__BB0_168:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p35, %r130, 2139095039;
	selp.f32 	%f204, 0f7FFFFFFF, 0f4B800000, %p35;
	mul.f32 	%f205, %f745, 0f34000000;
	mul.f32 	%f746, %f204, %f205;
	bra.uni 	$L__BB0_169;
$L__BB0_159:                            // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f188, %f750, %f703;
	cvt.rzi.f32.f32 	%f744, %f188;
	fma.rn.f32 	%f154, %f744, 0fC0000000, %f750;
	mov.b32 	%r129, %f154;
	setp.lt.u32 	%p26, %r129, 1073741824;
	@%p26 bra 	$L__BB0_164;
// %bb.160:
	setp.lt.u32 	%p27, %r129, -2147483647;
	@%p27 bra 	$L__BB0_162;
// %bb.161:
	add.f32 	%f193, %f744, 0fBF800000;
	setp.lt.f32 	%p30, %f154, 0fC0000000;
	add.f32 	%f194, %f193, 0fBF800000;
	selp.f32 	%f744, %f194, %f193, %p30;
	bra.uni 	$L__BB0_164;
$L__BB0_162:
	add.f32 	%f744, %f744, 0f3F800000;
	setp.ltu.f32 	%p28, %f154, 0f40800000;
	@%p28 bra 	$L__BB0_164;
// %bb.163:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f189, %f744, 0f3F800000;
	fma.rn.f32 	%f191, %f703, 0fC0400000, %f154;
	setp.ge.f32 	%p29, %f191, 0f00000000;
	add.f32 	%f192, %f189, 0f3F800000;
	selp.f32 	%f744, %f192, %f189, %p29;
$L__BB0_164:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f746, %f744, 0fC0000000, %f750;
$L__BB0_169:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f206, %f746;
	setp.gtu.f32 	%p36, %f206, 0f7F800000;
	mov.b32 	%r239, %f151;
	and.b32  	%r137, %r239, -2147483648;
	@%p36 bra 	$L__BB0_171;
// %bb.170:
	mov.b32 	%r240, %f746;
	or.b32  	%r241, %r137, %r240;
	mov.b32 	%f746, %r241;
$L__BB0_171:                            // %__nv_fmodf.exit
	shl.b32 	%r140, %r1, 1;
	and.b32  	%r256, %r140, 2;
	mul.lo.s32 	%r141, %r256, %r128;
	cvt.rn.f32.s32 	%f239, %r141;
	mov.f32 	%f240, 0f41800000;
	div.approx.f32 	%f168, %f239, %f240;
	abs.f32 	%f726, %f168;
	setp.lt.f32 	%p44, %f726, 0f40000000;
	setp.gtu.f32 	%p292, %f726, 0f4B800000;
	mov.f32 	%f706, %f726;
	@%p44 bra 	$L__BB0_24;
// %bb.13:
	@%p292 bra 	$L__BB0_20;
	bra.uni 	$L__BB0_14;
$L__BB0_20:
	mov.b32 	%r8, %f726;
	and.b32  	%r257, %r8, 8388607;
	or.b32  	%r3310, %r257, 1065353216;
	mov.b32 	%f705, %r3310;
	add.s32 	%r258, %r8, -1073741824;
	and.b32  	%r3311, %r258, -8388608;
	setp.eq.s32 	%p51, %r3311, 0;
	@%p51 bra 	$L__BB0_23;
// %bb.21:                              // %__nv_fmaf_rn.exit4.i.i.i2331.preheader
	mov.f32 	%f250, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f249,%f250;
	// end inline asm
$L__BB0_22:                             // %__nv_fmaf_rn.exit4.i.i.i2331
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r259, %r3311, 192937984;
	add.s32 	%r260, %r3310, %r259;
	mov.b32 	%f251, %r260;
	mul.f32 	%f252, %f249, %f251;
	sub.f32 	%f253, %f251, %f252;
	fma.rn.f32 	%f254, %f253, %f249, %f252;
	sub.f32 	%f255, %f251, %f254;
	fma.rz.f32 	%f256, %f255, %f249, %f254;
	cvt.rzi.f32.f32 	%f257, %f256;
	sub.f32 	%f705, %f251, %f257;
	sub.s32 	%r3311, %r3311, %r259;
	mov.b32 	%r3310, %f705;
	setp.ne.s32 	%p52, %r3311, 0;
	setp.ne.s32 	%p53, %r3310, 0;
	and.pred  	%p54, %p52, %p53;
	@%p54 bra 	$L__BB0_22;
$L__BB0_23:                             // %__internal_fmodf_slowpath_mod.exit.i.i2333
	setp.gt.u32 	%p55, %r8, 2139095039;
	selp.f32 	%f258, 0f7FFFFFFF, 0f4B800000, %p55;
	mul.f32 	%f259, %f705, 0f34000000;
	mul.f32 	%f706, %f258, %f259;
	bra.uni 	$L__BB0_24;
$L__BB0_14:                             // %__nv_fast_fdividef.exit.i.i.i2310
	div.approx.f32 	%f242, %f726, %f703;
	cvt.rzi.f32.f32 	%f704, %f242;
	fma.rn.f32 	%f2, %f704, 0fC0000000, %f726;
	mov.b32 	%r7, %f2;
	setp.lt.u32 	%p46, %r7, 1073741824;
	@%p46 bra 	$L__BB0_19;
// %bb.15:
	setp.lt.u32 	%p47, %r7, -2147483647;
	@%p47 bra 	$L__BB0_17;
// %bb.16:
	add.f32 	%f247, %f704, 0fBF800000;
	setp.lt.f32 	%p50, %f2, 0fC0000000;
	add.f32 	%f248, %f247, 0fBF800000;
	selp.f32 	%f704, %f248, %f247, %p50;
	bra.uni 	$L__BB0_19;
$L__BB0_17:
	add.f32 	%f704, %f704, 0f3F800000;
	setp.ltu.f32 	%p48, %f2, 0f40800000;
	@%p48 bra 	$L__BB0_19;
// %bb.18:                              // %__nv_fmaf_rn.exit.i.i.i2314
	add.f32 	%f243, %f704, 0f3F800000;
	fma.rn.f32 	%f245, %f703, 0fC0400000, %f2;
	setp.ge.f32 	%p49, %f245, 0f00000000;
	add.f32 	%f246, %f243, 0f3F800000;
	selp.f32 	%f704, %f246, %f243, %p49;
$L__BB0_19:                             // %__internal_fmodf_fastpath_quot.exit.i.i2317
	fma.rn.f32 	%f706, %f704, 0fC0000000, %f726;
$L__BB0_24:                             // %__internal_fmodf_kernel.exit.i2336
	abs.f32 	%f260, %f706;
	setp.gtu.f32 	%p56, %f260, 0f7F800000;
	mov.b32 	%r261, %f168;
	and.b32  	%r15, %r261, -2147483648;
	@%p56 bra 	$L__BB0_26;
// %bb.25:
	mov.b32 	%r262, %f706;
	or.b32  	%r263, %r15, %r262;
	mov.b32 	%f706, %r263;
$L__BB0_26:                             // %__nv_fmodf.exit2337
	add.s32 	%r272, %r141, %r128;
	cvt.rn.f32.s32 	%f291, %r272;
	div.approx.f32 	%f18, %f291, %f240;
	abs.f32 	%f730, %f18;
	setp.lt.f32 	%p64, %f730, 0f40000000;
	setp.gtu.f32 	%p293, %f730, 0f4B800000;
	mov.f32 	%f710, %f730;
	@%p64 bra 	$L__BB0_38;
// %bb.27:
	@%p293 bra 	$L__BB0_34;
	bra.uni 	$L__BB0_28;
$L__BB0_34:
	mov.b32 	%r17, %f730;
	and.b32  	%r273, %r17, 8388607;
	or.b32  	%r3312, %r273, 1065353216;
	mov.b32 	%f709, %r3312;
	add.s32 	%r274, %r17, -1073741824;
	and.b32  	%r3313, %r274, -8388608;
	setp.eq.s32 	%p71, %r3313, 0;
	@%p71 bra 	$L__BB0_37;
// %bb.35:                              // %__nv_fmaf_rn.exit4.i.i.i2362.preheader
	mov.f32 	%f302, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f301,%f302;
	// end inline asm
$L__BB0_36:                             // %__nv_fmaf_rn.exit4.i.i.i2362
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r275, %r3313, 192937984;
	add.s32 	%r276, %r3312, %r275;
	mov.b32 	%f303, %r276;
	mul.f32 	%f304, %f301, %f303;
	sub.f32 	%f305, %f303, %f304;
	fma.rn.f32 	%f306, %f305, %f301, %f304;
	sub.f32 	%f307, %f303, %f306;
	fma.rz.f32 	%f308, %f307, %f301, %f306;
	cvt.rzi.f32.f32 	%f309, %f308;
	sub.f32 	%f709, %f303, %f309;
	sub.s32 	%r3313, %r3313, %r275;
	mov.b32 	%r3312, %f709;
	setp.ne.s32 	%p72, %r3313, 0;
	setp.ne.s32 	%p73, %r3312, 0;
	and.pred  	%p74, %p72, %p73;
	@%p74 bra 	$L__BB0_36;
$L__BB0_37:                             // %__internal_fmodf_slowpath_mod.exit.i.i2364
	setp.gt.u32 	%p75, %r17, 2139095039;
	selp.f32 	%f310, 0f7FFFFFFF, 0f4B800000, %p75;
	mul.f32 	%f311, %f709, 0f34000000;
	mul.f32 	%f710, %f310, %f311;
	bra.uni 	$L__BB0_38;
$L__BB0_28:                             // %__nv_fast_fdividef.exit.i.i.i2341
	div.approx.f32 	%f294, %f730, %f703;
	cvt.rzi.f32.f32 	%f708, %f294;
	fma.rn.f32 	%f21, %f708, 0fC0000000, %f730;
	mov.b32 	%r16, %f21;
	setp.lt.u32 	%p66, %r16, 1073741824;
	@%p66 bra 	$L__BB0_33;
// %bb.29:
	setp.lt.u32 	%p67, %r16, -2147483647;
	@%p67 bra 	$L__BB0_31;
// %bb.30:
	add.f32 	%f299, %f708, 0fBF800000;
	setp.lt.f32 	%p70, %f21, 0fC0000000;
	add.f32 	%f300, %f299, 0fBF800000;
	selp.f32 	%f708, %f300, %f299, %p70;
	bra.uni 	$L__BB0_33;
$L__BB0_31:
	add.f32 	%f708, %f708, 0f3F800000;
	setp.ltu.f32 	%p68, %f21, 0f40800000;
	@%p68 bra 	$L__BB0_33;
// %bb.32:                              // %__nv_fmaf_rn.exit.i.i.i2345
	add.f32 	%f295, %f708, 0f3F800000;
	fma.rn.f32 	%f297, %f703, 0fC0400000, %f21;
	setp.ge.f32 	%p69, %f297, 0f00000000;
	add.f32 	%f298, %f295, 0f3F800000;
	selp.f32 	%f708, %f298, %f295, %p69;
$L__BB0_33:                             // %__internal_fmodf_fastpath_quot.exit.i.i2348
	fma.rn.f32 	%f710, %f708, 0fC0000000, %f730;
$L__BB0_38:                             // %__internal_fmodf_kernel.exit.i2367
	abs.f32 	%f312, %f710;
	setp.gtu.f32 	%p76, %f312, 0f7F800000;
	mov.b32 	%r277, %f18;
	and.b32  	%r24, %r277, -2147483648;
	@%p76 bra 	$L__BB0_40;
// %bb.39:
	mov.b32 	%r278, %f710;
	or.b32  	%r279, %r24, %r278;
	mov.b32 	%f710, %r279;
$L__BB0_40:                             // %__nv_fmodf.exit2368
	mul.lo.s32 	%r27, %r140, %r128;
	and.b32  	%r294, %r27, 2;
	cvt.rn.f32.s32 	%f345, %r294;
	div.approx.f32 	%f35, %f345, %f703;
	abs.f32 	%f734, %f35;
	setp.lt.f32 	%p84, %f734, 0f40000000;
	setp.gtu.f32 	%p294, %f734, 0f4B800000;
	mov.f32 	%f714, %f734;
	@%p84 bra 	$L__BB0_52;
// %bb.41:
	@%p294 bra 	$L__BB0_48;
	bra.uni 	$L__BB0_42;
$L__BB0_48:
	mov.b32 	%r29, %f734;
	and.b32  	%r295, %r29, 8388607;
	or.b32  	%r3314, %r295, 1065353216;
	mov.b32 	%f713, %r3314;
	add.s32 	%r296, %r29, -1073741824;
	and.b32  	%r3315, %r296, -8388608;
	setp.eq.s32 	%p91, %r3315, 0;
	@%p91 bra 	$L__BB0_51;
// %bb.49:                              // %__nv_fmaf_rn.exit4.i.i.i2393.preheader
	mov.f32 	%f356, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f355,%f356;
	// end inline asm
$L__BB0_50:                             // %__nv_fmaf_rn.exit4.i.i.i2393
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r297, %r3315, 192937984;
	add.s32 	%r298, %r3314, %r297;
	mov.b32 	%f357, %r298;
	mul.f32 	%f358, %f355, %f357;
	sub.f32 	%f359, %f357, %f358;
	fma.rn.f32 	%f360, %f359, %f355, %f358;
	sub.f32 	%f361, %f357, %f360;
	fma.rz.f32 	%f362, %f361, %f355, %f360;
	cvt.rzi.f32.f32 	%f363, %f362;
	sub.f32 	%f713, %f357, %f363;
	sub.s32 	%r3315, %r3315, %r297;
	mov.b32 	%r3314, %f713;
	setp.ne.s32 	%p92, %r3315, 0;
	setp.ne.s32 	%p93, %r3314, 0;
	and.pred  	%p94, %p92, %p93;
	@%p94 bra 	$L__BB0_50;
$L__BB0_51:                             // %__internal_fmodf_slowpath_mod.exit.i.i2395
	setp.gt.u32 	%p95, %r29, 2139095039;
	selp.f32 	%f364, 0f7FFFFFFF, 0f4B800000, %p95;
	mul.f32 	%f365, %f713, 0f34000000;
	mul.f32 	%f714, %f364, %f365;
	bra.uni 	$L__BB0_52;
$L__BB0_42:                             // %__nv_fast_fdividef.exit.i.i.i2372
	div.approx.f32 	%f348, %f734, %f703;
	cvt.rzi.f32.f32 	%f712, %f348;
	fma.rn.f32 	%f38, %f712, 0fC0000000, %f734;
	mov.b32 	%r28, %f38;
	setp.lt.u32 	%p86, %r28, 1073741824;
	@%p86 bra 	$L__BB0_47;
// %bb.43:
	setp.lt.u32 	%p87, %r28, -2147483647;
	@%p87 bra 	$L__BB0_45;
// %bb.44:
	add.f32 	%f353, %f712, 0fBF800000;
	setp.lt.f32 	%p90, %f38, 0fC0000000;
	add.f32 	%f354, %f353, 0fBF800000;
	selp.f32 	%f712, %f354, %f353, %p90;
	bra.uni 	$L__BB0_47;
$L__BB0_45:
	add.f32 	%f712, %f712, 0f3F800000;
	setp.ltu.f32 	%p88, %f38, 0f40800000;
	@%p88 bra 	$L__BB0_47;
// %bb.46:                              // %__nv_fmaf_rn.exit.i.i.i2376
	add.f32 	%f349, %f712, 0f3F800000;
	fma.rn.f32 	%f351, %f703, 0fC0400000, %f38;
	setp.ge.f32 	%p89, %f351, 0f00000000;
	add.f32 	%f352, %f349, 0f3F800000;
	selp.f32 	%f712, %f352, %f349, %p89;
$L__BB0_47:                             // %__internal_fmodf_fastpath_quot.exit.i.i2379
	fma.rn.f32 	%f714, %f712, 0fC0000000, %f734;
$L__BB0_52:                             // %__internal_fmodf_kernel.exit.i2398
	mov.f32 	%f230, 0f00000000;
	abs.f32 	%f366, %f714;
	setp.gtu.f32 	%p96, %f366, 0f7F800000;
	mov.b32 	%r299, %f35;
	and.b32  	%r36, %r299, -2147483648;
	@%p96 bra 	$L__BB0_54;
// %bb.53:
	mov.b32 	%r300, %f714;
	or.b32  	%r301, %r36, %r300;
	mov.b32 	%f714, %r301;
$L__BB0_54:                             // %__nv_fmodf.exit2399
	add.f32 	%f367, %f714, %f714;
	mov.b32 	%r302, %f367;
	and.b32  	%r303, %r302, -2147483648;
	or.b32  	%r304, %r303, 1056964608;
	mov.b32 	%f368, %r304;
	add.f32 	%f369, %f367, %f368;
	cvt.rzi.f32.f32 	%f370, %f369;
	abs.f32 	%f371, %f367;
	setp.gt.f32 	%p97, %f371, 0f4B000000;
	selp.f32 	%f372, %f367, %f370, %p97;
	cvt.rzi.f32.f32 	%f373, %f367;
	setp.lt.f32 	%p98, %f371, 0f3F000000;
	selp.f32 	%f374, %f373, %f372, %p98;
	cvt.rzi.s32.f32 	%r305, %f374;
	fma.rn.f32 	%f375, %f374, 0fBF000000, %f714;
	mul.f32 	%f376, %f375, %f375;
	fma.rn.f32 	%f377, %f376, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f378, %f376, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f379, %f377, %f376, 0fC0A55DF6;
	fma.rn.f32 	%f380, %f378, %f376, 0f4081E0CF;
	fma.rn.f32 	%f381, %f376, %f375, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f376, 0fC09DE9E6;
	fma.rn.f32 	%f383, %f379, %f381, 0f00000000;
	fma.rn.f32 	%f384, %f382, %f376, 0f3F800000;
	fma.rn.f32 	%f385, %f375, 0f40490FDB, %f383;
	and.b32  	%r306, %r305, 1;
	setp.eq.b32 	%p99, %r306, 1;
	selp.f32 	%f386, %f384, %f385, %p99;
	selp.f32 	%f387, %f385, %f384, %p99;
	and.b32  	%r307, %r305, 2;
	setp.eq.s32 	%p100, %r307, 0;
	neg.f32 	%f388, %f386;
	selp.f32 	%f389, %f386, %f388, %p100;
	add.s32 	%r308, %r305, 1;
	and.b32  	%r309, %r308, 2;
	setp.eq.s32 	%p101, %r309, 0;
	sub.f32 	%f391, %f230, %f387;
	cvt.rzi.f32.f32 	%f393, %f714;
	setp.eq.f32 	%p102, %f393, %f714;
	mul.f32 	%f394, %f714, 0f00000000;
	selp.f32 	%f76, %f394, %f389, %p102;
	abs.f32 	%f395, %f714;
	add.s32 	%r310, %r27, %r128;
	and.b32  	%r311, %r310, 3;
	cvt.rn.f32.s32 	%f397, %r311;
	div.approx.f32 	%f54, %f397, %f703;
	abs.f32 	%f738, %f54;
	setp.lt.f32 	%p104, %f738, 0f40000000;
	setp.gtu.f32 	%p295, %f738, 0f4B800000;
	mov.f32 	%f718, %f738;
	@%p104 bra 	$L__BB0_66;
// %bb.55:
	@%p295 bra 	$L__BB0_62;
	bra.uni 	$L__BB0_56;
$L__BB0_62:
	mov.b32 	%r38, %f738;
	and.b32  	%r312, %r38, 8388607;
	or.b32  	%r3316, %r312, 1065353216;
	mov.b32 	%f717, %r3316;
	add.s32 	%r313, %r38, -1073741824;
	and.b32  	%r3317, %r313, -8388608;
	setp.eq.s32 	%p111, %r3317, 0;
	@%p111 bra 	$L__BB0_65;
// %bb.63:                              // %__nv_fmaf_rn.exit4.i.i.i2424.preheader
	mov.f32 	%f408, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f407,%f408;
	// end inline asm
$L__BB0_64:                             // %__nv_fmaf_rn.exit4.i.i.i2424
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r314, %r3317, 192937984;
	add.s32 	%r315, %r3316, %r314;
	mov.b32 	%f409, %r315;
	mul.f32 	%f410, %f407, %f409;
	sub.f32 	%f411, %f409, %f410;
	fma.rn.f32 	%f412, %f411, %f407, %f410;
	sub.f32 	%f413, %f409, %f412;
	fma.rz.f32 	%f414, %f413, %f407, %f412;
	cvt.rzi.f32.f32 	%f415, %f414;
	sub.f32 	%f717, %f409, %f415;
	sub.s32 	%r3317, %r3317, %r314;
	mov.b32 	%r3316, %f717;
	setp.ne.s32 	%p112, %r3317, 0;
	setp.ne.s32 	%p113, %r3316, 0;
	and.pred  	%p114, %p112, %p113;
	@%p114 bra 	$L__BB0_64;
$L__BB0_65:                             // %__internal_fmodf_slowpath_mod.exit.i.i2426
	setp.gt.u32 	%p115, %r38, 2139095039;
	selp.f32 	%f416, 0f7FFFFFFF, 0f4B800000, %p115;
	mul.f32 	%f417, %f717, 0f34000000;
	mul.f32 	%f718, %f416, %f417;
	bra.uni 	$L__BB0_66;
$L__BB0_56:                             // %__nv_fast_fdividef.exit.i.i.i2403
	div.approx.f32 	%f400, %f738, %f703;
	cvt.rzi.f32.f32 	%f716, %f400;
	fma.rn.f32 	%f57, %f716, 0fC0000000, %f738;
	mov.b32 	%r37, %f57;
	setp.lt.u32 	%p106, %r37, 1073741824;
	@%p106 bra 	$L__BB0_61;
// %bb.57:
	setp.lt.u32 	%p107, %r37, -2147483647;
	@%p107 bra 	$L__BB0_59;
// %bb.58:
	add.f32 	%f405, %f716, 0fBF800000;
	setp.lt.f32 	%p110, %f57, 0fC0000000;
	add.f32 	%f406, %f405, 0fBF800000;
	selp.f32 	%f716, %f406, %f405, %p110;
	bra.uni 	$L__BB0_61;
$L__BB0_59:
	add.f32 	%f716, %f716, 0f3F800000;
	setp.ltu.f32 	%p108, %f57, 0f40800000;
	@%p108 bra 	$L__BB0_61;
// %bb.60:                              // %__nv_fmaf_rn.exit.i.i.i2407
	add.f32 	%f401, %f716, 0f3F800000;
	fma.rn.f32 	%f403, %f703, 0fC0400000, %f57;
	setp.ge.f32 	%p109, %f403, 0f00000000;
	add.f32 	%f404, %f401, 0f3F800000;
	selp.f32 	%f716, %f404, %f401, %p109;
$L__BB0_61:                             // %__internal_fmodf_fastpath_quot.exit.i.i2410
	fma.rn.f32 	%f718, %f716, 0fC0000000, %f738;
$L__BB0_66:                             // %__internal_fmodf_kernel.exit.i2429
	selp.f32 	%f392, %f387, %f391, %p101;
	setp.gt.f32 	%p103, %f395, 0f4B800000;
	add.f32 	%f396, %f76, 0f3F800000;
	abs.f32 	%f418, %f718;
	setp.gtu.f32 	%p116, %f418, 0f7F800000;
	mov.b32 	%r316, %f54;
	and.b32  	%r45, %r316, -2147483648;
	@%p116 bra 	$L__BB0_68;
// %bb.67:
	mov.b32 	%r317, %f718;
	or.b32  	%r318, %r45, %r317;
	mov.b32 	%f718, %r318;
$L__BB0_68:                             // %__nv_fmodf.exit2430
	selp.f32 	%f53, %f396, %f392, %p103;
	add.f32 	%f419, %f718, %f718;
	mov.b32 	%r319, %f419;
	and.b32  	%r320, %r319, -2147483648;
	or.b32  	%r321, %r320, 1056964608;
	mov.b32 	%f420, %r321;
	add.f32 	%f421, %f419, %f420;
	cvt.rzi.f32.f32 	%f422, %f421;
	abs.f32 	%f423, %f419;
	setp.gt.f32 	%p117, %f423, 0f4B000000;
	selp.f32 	%f424, %f419, %f422, %p117;
	cvt.rzi.f32.f32 	%f425, %f419;
	setp.lt.f32 	%p118, %f423, 0f3F000000;
	selp.f32 	%f426, %f425, %f424, %p118;
	cvt.rzi.s32.f32 	%r322, %f426;
	fma.rn.f32 	%f427, %f426, 0fBF000000, %f718;
	mul.f32 	%f428, %f427, %f427;
	fma.rn.f32 	%f429, %f428, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f430, %f428, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f431, %f429, %f428, 0fC0A55DF6;
	fma.rn.f32 	%f432, %f430, %f428, 0f4081E0CF;
	fma.rn.f32 	%f433, %f428, %f427, 0f00000000;
	fma.rn.f32 	%f434, %f432, %f428, 0fC09DE9E6;
	fma.rn.f32 	%f435, %f431, %f433, 0f00000000;
	fma.rn.f32 	%f436, %f434, %f428, 0f3F800000;
	fma.rn.f32 	%f437, %f427, 0f40490FDB, %f435;
	and.b32  	%r323, %r322, 1;
	setp.eq.b32 	%p119, %r323, 1;
	selp.f32 	%f438, %f436, %f437, %p119;
	selp.f32 	%f439, %f437, %f436, %p119;
	and.b32  	%r324, %r322, 2;
	setp.eq.s32 	%p120, %r324, 0;
	neg.f32 	%f440, %f438;
	selp.f32 	%f441, %f438, %f440, %p120;
	add.s32 	%r325, %r322, 1;
	and.b32  	%r326, %r325, 2;
	setp.eq.s32 	%p121, %r326, 0;
	sub.f32 	%f443, %f230, %f439;
	selp.f32 	%f444, %f439, %f443, %p121;
	cvt.rzi.f32.f32 	%f445, %f718;
	setp.eq.f32 	%p122, %f445, %f718;
	mul.f32 	%f446, %f718, 0f00000000;
	selp.f32 	%f78, %f446, %f441, %p122;
	abs.f32 	%f447, %f718;
	setp.gt.f32 	%p123, %f447, 0f4B800000;
	add.f32 	%f448, %f78, 0f3F800000;
	selp.f32 	%f72, %f448, %f444, %p123;
	and.b32  	%r46, %r1, 2;
	setp.eq.s32 	%p124, %r46, 0;
	mov.f32 	%f75, %f53;
	mov.f32 	%f77, %f72;
	@%p124 bra 	$L__BB0_70;
// %bb.69:                              // %L688
	neg.f32 	%f77, %f78;
	neg.f32 	%f75, %f76;
	mov.f32 	%f76, %f53;
	mov.f32 	%f78, %f72;
$L__BB0_70:                             // %L690
	@%p24 bra 	$L__BB0_179;
// %bb.71:
	@%p291 bra 	$L__BB0_175;
	bra.uni 	$L__BB0_72;
$L__BB0_175:
	mov.b32 	%r143, %f750;
	and.b32  	%r333, %r143, 8388607;
	or.b32  	%r3346, %r333, 1065353216;
	mov.b32 	%f749, %r3346;
	add.s32 	%r334, %r143, -1073741824;
	and.b32  	%r3347, %r334, -8388608;
	setp.eq.s32 	%p132, %r3347, 0;
	@%p132 bra 	$L__BB0_178;
// %bb.176:                             // %__nv_fmaf_rn.exit4.i.i.i2455.preheader
	mov.f32 	%f458, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f457,%f458;
	// end inline asm
$L__BB0_177:                            // %__nv_fmaf_rn.exit4.i.i.i2455
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r335, %r3347, 192937984;
	add.s32 	%r336, %r3346, %r335;
	mov.b32 	%f459, %r336;
	mul.f32 	%f460, %f457, %f459;
	sub.f32 	%f461, %f459, %f460;
	fma.rn.f32 	%f462, %f461, %f457, %f460;
	sub.f32 	%f463, %f459, %f462;
	fma.rz.f32 	%f464, %f463, %f457, %f462;
	cvt.rzi.f32.f32 	%f465, %f464;
	sub.f32 	%f749, %f459, %f465;
	sub.s32 	%r3347, %r3347, %r335;
	mov.b32 	%r3346, %f749;
	setp.ne.s32 	%p133, %r3347, 0;
	setp.ne.s32 	%p134, %r3346, 0;
	and.pred  	%p135, %p133, %p134;
	@%p135 bra 	$L__BB0_177;
$L__BB0_178:                            // %__internal_fmodf_slowpath_mod.exit.i.i2457
	setp.gt.u32 	%p136, %r143, 2139095039;
	selp.f32 	%f466, 0f7FFFFFFF, 0f4B800000, %p136;
	mul.f32 	%f467, %f749, 0f34000000;
	mul.f32 	%f750, %f466, %f467;
	bra.uni 	$L__BB0_179;
$L__BB0_72:                             // %__nv_fast_fdividef.exit.i.i.i2434
	div.approx.f32 	%f450, %f750, %f703;
	cvt.rzi.f32.f32 	%f748, %f450;
	fma.rn.f32 	%f171, %f748, 0fC0000000, %f750;
	mov.b32 	%r142, %f171;
	setp.lt.u32 	%p127, %r142, 1073741824;
	@%p127 bra 	$L__BB0_174;
// %bb.73:
	setp.lt.u32 	%p128, %r142, -2147483647;
	@%p128 bra 	$L__BB0_172;
// %bb.74:
	add.f32 	%f455, %f748, 0fBF800000;
	setp.lt.f32 	%p131, %f171, 0fC0000000;
	add.f32 	%f456, %f455, 0fBF800000;
	selp.f32 	%f748, %f456, %f455, %p131;
	bra.uni 	$L__BB0_174;
$L__BB0_172:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p129, %f171, 0f40800000;
	@%p129 bra 	$L__BB0_174;
// %bb.173:                             // %__nv_fmaf_rn.exit.i.i.i2438
	add.f32 	%f451, %f748, 0f3F800000;
	fma.rn.f32 	%f453, %f703, 0fC0400000, %f171;
	setp.ge.f32 	%p130, %f453, 0f00000000;
	add.f32 	%f454, %f451, 0f3F800000;
	selp.f32 	%f748, %f454, %f451, %p130;
$L__BB0_174:                            // %__internal_fmodf_fastpath_quot.exit.i.i2441
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_179:                            // %__internal_fmodf_kernel.exit.i2460
	abs.f32 	%f468, %f750;
	setp.gtu.f32 	%p137, %f468, 0f7F800000;
	@%p137 bra 	$L__BB0_181;
// %bb.180:
	mov.b32 	%r337, %f750;
	or.b32  	%r338, %r137, %r337;
	mov.b32 	%f750, %r338;
$L__BB0_181:                            // %__nv_fmodf.exit2461
	@%p44 bra 	$L__BB0_86;
// %bb.75:
	@%p292 bra 	$L__BB0_82;
	bra.uni 	$L__BB0_76;
$L__BB0_82:
	mov.b32 	%r50, %f726;
	and.b32  	%r353, %r50, 8388607;
	or.b32  	%r3318, %r353, 1065353216;
	mov.b32 	%f725, %r3318;
	add.s32 	%r354, %r50, -1073741824;
	and.b32  	%r3319, %r354, -8388608;
	setp.eq.s32 	%p152, %r3319, 0;
	@%p152 bra 	$L__BB0_85;
// %bb.83:                              // %__nv_fmaf_rn.exit4.i.i.i2486.preheader
	mov.f32 	%f510, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f509,%f510;
	// end inline asm
$L__BB0_84:                             // %__nv_fmaf_rn.exit4.i.i.i2486
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r355, %r3319, 192937984;
	add.s32 	%r356, %r3318, %r355;
	mov.b32 	%f511, %r356;
	mul.f32 	%f512, %f509, %f511;
	sub.f32 	%f513, %f511, %f512;
	fma.rn.f32 	%f514, %f513, %f509, %f512;
	sub.f32 	%f515, %f511, %f514;
	fma.rz.f32 	%f516, %f515, %f509, %f514;
	cvt.rzi.f32.f32 	%f517, %f516;
	sub.f32 	%f725, %f511, %f517;
	sub.s32 	%r3319, %r3319, %r355;
	mov.b32 	%r3318, %f725;
	setp.ne.s32 	%p153, %r3319, 0;
	setp.ne.s32 	%p154, %r3318, 0;
	and.pred  	%p155, %p153, %p154;
	@%p155 bra 	$L__BB0_84;
$L__BB0_85:                             // %__internal_fmodf_slowpath_mod.exit.i.i2488
	setp.gt.u32 	%p156, %r50, 2139095039;
	selp.f32 	%f518, 0f7FFFFFFF, 0f4B800000, %p156;
	mul.f32 	%f519, %f725, 0f34000000;
	mul.f32 	%f726, %f518, %f519;
	bra.uni 	$L__BB0_86;
$L__BB0_76:                             // %__nv_fast_fdividef.exit.i.i.i2465
	div.approx.f32 	%f502, %f726, %f703;
	cvt.rzi.f32.f32 	%f724, %f502;
	fma.rn.f32 	%f80, %f724, 0fC0000000, %f726;
	mov.b32 	%r49, %f80;
	setp.lt.u32 	%p147, %r49, 1073741824;
	@%p147 bra 	$L__BB0_81;
// %bb.77:
	setp.lt.u32 	%p148, %r49, -2147483647;
	@%p148 bra 	$L__BB0_79;
// %bb.78:
	add.f32 	%f507, %f724, 0fBF800000;
	setp.lt.f32 	%p151, %f80, 0fC0000000;
	add.f32 	%f508, %f507, 0fBF800000;
	selp.f32 	%f724, %f508, %f507, %p151;
	bra.uni 	$L__BB0_81;
$L__BB0_79:
	add.f32 	%f724, %f724, 0f3F800000;
	setp.ltu.f32 	%p149, %f80, 0f40800000;
	@%p149 bra 	$L__BB0_81;
// %bb.80:                              // %__nv_fmaf_rn.exit.i.i.i2469
	add.f32 	%f503, %f724, 0f3F800000;
	fma.rn.f32 	%f505, %f703, 0fC0400000, %f80;
	setp.ge.f32 	%p150, %f505, 0f00000000;
	add.f32 	%f506, %f503, 0f3F800000;
	selp.f32 	%f724, %f506, %f503, %p150;
$L__BB0_81:                             // %__internal_fmodf_fastpath_quot.exit.i.i2472
	fma.rn.f32 	%f726, %f724, 0fC0000000, %f726;
$L__BB0_86:                             // %__internal_fmodf_kernel.exit.i2491
	abs.f32 	%f520, %f726;
	setp.gtu.f32 	%p157, %f520, 0f7F800000;
	@%p157 bra 	$L__BB0_88;
// %bb.87:
	mov.b32 	%r357, %f726;
	or.b32  	%r358, %r15, %r357;
	mov.b32 	%f726, %r358;
$L__BB0_88:                             // %__nv_fmodf.exit2492
	@%p64 bra 	$L__BB0_100;
// %bb.89:
	@%p293 bra 	$L__BB0_96;
	bra.uni 	$L__BB0_90;
$L__BB0_96:
	mov.b32 	%r58, %f730;
	and.b32  	%r367, %r58, 8388607;
	or.b32  	%r3320, %r367, 1065353216;
	mov.b32 	%f729, %r3320;
	add.s32 	%r368, %r58, -1073741824;
	and.b32  	%r3321, %r368, -8388608;
	setp.eq.s32 	%p172, %r3321, 0;
	@%p172 bra 	$L__BB0_99;
// %bb.97:                              // %__nv_fmaf_rn.exit4.i.i.i2517.preheader
	mov.f32 	%f560, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f559,%f560;
	// end inline asm
$L__BB0_98:                             // %__nv_fmaf_rn.exit4.i.i.i2517
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r369, %r3321, 192937984;
	add.s32 	%r370, %r3320, %r369;
	mov.b32 	%f561, %r370;
	mul.f32 	%f562, %f559, %f561;
	sub.f32 	%f563, %f561, %f562;
	fma.rn.f32 	%f564, %f563, %f559, %f562;
	sub.f32 	%f565, %f561, %f564;
	fma.rz.f32 	%f566, %f565, %f559, %f564;
	cvt.rzi.f32.f32 	%f567, %f566;
	sub.f32 	%f729, %f561, %f567;
	sub.s32 	%r3321, %r3321, %r369;
	mov.b32 	%r3320, %f729;
	setp.ne.s32 	%p173, %r3321, 0;
	setp.ne.s32 	%p174, %r3320, 0;
	and.pred  	%p175, %p173, %p174;
	@%p175 bra 	$L__BB0_98;
$L__BB0_99:                             // %__internal_fmodf_slowpath_mod.exit.i.i2519
	setp.gt.u32 	%p176, %r58, 2139095039;
	selp.f32 	%f568, 0f7FFFFFFF, 0f4B800000, %p176;
	mul.f32 	%f569, %f729, 0f34000000;
	mul.f32 	%f730, %f568, %f569;
	bra.uni 	$L__BB0_100;
$L__BB0_90:                             // %__nv_fast_fdividef.exit.i.i.i2496
	div.approx.f32 	%f552, %f730, %f703;
	cvt.rzi.f32.f32 	%f728, %f552;
	fma.rn.f32 	%f97, %f728, 0fC0000000, %f730;
	mov.b32 	%r57, %f97;
	setp.lt.u32 	%p167, %r57, 1073741824;
	@%p167 bra 	$L__BB0_95;
// %bb.91:
	setp.lt.u32 	%p168, %r57, -2147483647;
	@%p168 bra 	$L__BB0_93;
// %bb.92:
	add.f32 	%f557, %f728, 0fBF800000;
	setp.lt.f32 	%p171, %f97, 0fC0000000;
	add.f32 	%f558, %f557, 0fBF800000;
	selp.f32 	%f728, %f558, %f557, %p171;
	bra.uni 	$L__BB0_95;
$L__BB0_93:
	add.f32 	%f728, %f728, 0f3F800000;
	setp.ltu.f32 	%p169, %f97, 0f40800000;
	@%p169 bra 	$L__BB0_95;
// %bb.94:                              // %__nv_fmaf_rn.exit.i.i.i2500
	add.f32 	%f553, %f728, 0f3F800000;
	fma.rn.f32 	%f555, %f703, 0fC0400000, %f97;
	setp.ge.f32 	%p170, %f555, 0f00000000;
	add.f32 	%f556, %f553, 0f3F800000;
	selp.f32 	%f728, %f556, %f553, %p170;
$L__BB0_95:                             // %__internal_fmodf_fastpath_quot.exit.i.i2503
	fma.rn.f32 	%f730, %f728, 0fC0000000, %f730;
$L__BB0_100:                            // %__internal_fmodf_kernel.exit.i2522
	abs.f32 	%f570, %f730;
	setp.gtu.f32 	%p177, %f570, 0f7F800000;
	@%p177 bra 	$L__BB0_102;
// %bb.101:
	mov.b32 	%r371, %f730;
	or.b32  	%r372, %r24, %r371;
	mov.b32 	%f730, %r372;
$L__BB0_102:                            // %__nv_fmodf.exit2523
	@%p84 bra 	$L__BB0_114;
// %bb.103:
	@%p294 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_104;
$L__BB0_110:
	mov.b32 	%r68, %f734;
	and.b32  	%r387, %r68, 8388607;
	or.b32  	%r3322, %r387, 1065353216;
	mov.b32 	%f733, %r3322;
	add.s32 	%r388, %r68, -1073741824;
	and.b32  	%r3323, %r388, -8388608;
	setp.eq.s32 	%p192, %r3323, 0;
	@%p192 bra 	$L__BB0_113;
// %bb.111:                             // %__nv_fmaf_rn.exit4.i.i.i2548.preheader
	mov.f32 	%f612, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f611,%f612;
	// end inline asm
$L__BB0_112:                            // %__nv_fmaf_rn.exit4.i.i.i2548
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r389, %r3323, 192937984;
	add.s32 	%r390, %r3322, %r389;
	mov.b32 	%f613, %r390;
	mul.f32 	%f614, %f611, %f613;
	sub.f32 	%f615, %f613, %f614;
	fma.rn.f32 	%f616, %f615, %f611, %f614;
	sub.f32 	%f617, %f613, %f616;
	fma.rz.f32 	%f618, %f617, %f611, %f616;
	cvt.rzi.f32.f32 	%f619, %f618;
	sub.f32 	%f733, %f613, %f619;
	sub.s32 	%r3323, %r3323, %r389;
	mov.b32 	%r3322, %f733;
	setp.ne.s32 	%p193, %r3323, 0;
	setp.ne.s32 	%p194, %r3322, 0;
	and.pred  	%p195, %p193, %p194;
	@%p195 bra 	$L__BB0_112;
$L__BB0_113:                            // %__internal_fmodf_slowpath_mod.exit.i.i2550
	setp.gt.u32 	%p196, %r68, 2139095039;
	selp.f32 	%f620, 0f7FFFFFFF, 0f4B800000, %p196;
	mul.f32 	%f621, %f733, 0f34000000;
	mul.f32 	%f734, %f620, %f621;
	bra.uni 	$L__BB0_114;
$L__BB0_104:                            // %__nv_fast_fdividef.exit.i.i.i2527
	div.approx.f32 	%f604, %f734, %f703;
	cvt.rzi.f32.f32 	%f732, %f604;
	fma.rn.f32 	%f112, %f732, 0fC0000000, %f734;
	mov.b32 	%r67, %f112;
	setp.lt.u32 	%p187, %r67, 1073741824;
	@%p187 bra 	$L__BB0_109;
// %bb.105:
	setp.lt.u32 	%p188, %r67, -2147483647;
	@%p188 bra 	$L__BB0_107;
// %bb.106:
	add.f32 	%f609, %f732, 0fBF800000;
	setp.lt.f32 	%p191, %f112, 0fC0000000;
	add.f32 	%f610, %f609, 0fBF800000;
	selp.f32 	%f732, %f610, %f609, %p191;
	bra.uni 	$L__BB0_109;
$L__BB0_107:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p189, %f112, 0f40800000;
	@%p189 bra 	$L__BB0_109;
// %bb.108:                             // %__nv_fmaf_rn.exit.i.i.i2531
	add.f32 	%f605, %f732, 0f3F800000;
	fma.rn.f32 	%f607, %f703, 0fC0400000, %f112;
	setp.ge.f32 	%p190, %f607, 0f00000000;
	add.f32 	%f608, %f605, 0f3F800000;
	selp.f32 	%f732, %f608, %f605, %p190;
$L__BB0_109:                            // %__internal_fmodf_fastpath_quot.exit.i.i2534
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_114:                            // %__internal_fmodf_kernel.exit.i2553
	abs.f32 	%f622, %f734;
	setp.gtu.f32 	%p197, %f622, 0f7F800000;
	@%p197 bra 	$L__BB0_116;
// %bb.115:
	mov.b32 	%r391, %f734;
	or.b32  	%r392, %r36, %r391;
	mov.b32 	%f734, %r392;
$L__BB0_116:                            // %__nv_fmodf.exit2554
	add.f32 	%f623, %f734, %f734;
	mov.b32 	%r393, %f623;
	and.b32  	%r394, %r393, -2147483648;
	or.b32  	%r395, %r394, 1056964608;
	mov.b32 	%f624, %r395;
	add.f32 	%f625, %f623, %f624;
	cvt.rzi.f32.f32 	%f626, %f625;
	abs.f32 	%f627, %f623;
	setp.gt.f32 	%p199, %f627, 0f4B000000;
	selp.f32 	%f628, %f623, %f626, %p199;
	cvt.rzi.f32.f32 	%f629, %f623;
	setp.lt.f32 	%p200, %f627, 0f3F000000;
	selp.f32 	%f630, %f629, %f628, %p200;
	cvt.rzi.s32.f32 	%r396, %f630;
	fma.rn.f32 	%f631, %f630, 0fBF000000, %f734;
	mul.f32 	%f632, %f631, %f631;
	fma.rn.f32 	%f633, %f632, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f634, %f632, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f635, %f633, %f632, 0fC0A55DF6;
	fma.rn.f32 	%f636, %f634, %f632, 0f4081E0CF;
	fma.rn.f32 	%f637, %f632, %f631, 0f00000000;
	fma.rn.f32 	%f638, %f636, %f632, 0fC09DE9E6;
	fma.rn.f32 	%f639, %f635, %f637, 0f00000000;
	fma.rn.f32 	%f640, %f638, %f632, 0f3F800000;
	fma.rn.f32 	%f641, %f631, 0f40490FDB, %f639;
	and.b32  	%r397, %r396, 1;
	setp.eq.b32 	%p201, %r397, 1;
	selp.f32 	%f642, %f640, %f641, %p201;
	selp.f32 	%f643, %f641, %f640, %p201;
	and.b32  	%r398, %r396, 2;
	setp.eq.s32 	%p202, %r398, 0;
	neg.f32 	%f644, %f642;
	selp.f32 	%f645, %f642, %f644, %p202;
	add.s32 	%r399, %r396, 1;
	and.b32  	%r400, %r399, 2;
	setp.eq.s32 	%p203, %r400, 0;
	sub.f32 	%f647, %f230, %f643;
	cvt.rzi.f32.f32 	%f649, %f734;
	setp.eq.f32 	%p204, %f649, %f734;
	mul.f32 	%f650, %f734, 0f00000000;
	selp.f32 	%f148, %f650, %f645, %p204;
	abs.f32 	%f651, %f734;
	@%p104 bra 	$L__BB0_128;
// %bb.117:
	@%p295 bra 	$L__BB0_124;
	bra.uni 	$L__BB0_118;
$L__BB0_124:
	mov.b32 	%r76, %f738;
	and.b32  	%r401, %r76, 8388607;
	or.b32  	%r3324, %r401, 1065353216;
	mov.b32 	%f737, %r3324;
	add.s32 	%r402, %r76, -1073741824;
	and.b32  	%r3325, %r402, -8388608;
	setp.eq.s32 	%p212, %r3325, 0;
	@%p212 bra 	$L__BB0_127;
// %bb.125:                             // %__nv_fmaf_rn.exit4.i.i.i2579.preheader
	mov.f32 	%f662, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f661,%f662;
	// end inline asm
$L__BB0_126:                            // %__nv_fmaf_rn.exit4.i.i.i2579
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r403, %r3325, 192937984;
	add.s32 	%r404, %r3324, %r403;
	mov.b32 	%f663, %r404;
	mul.f32 	%f664, %f661, %f663;
	sub.f32 	%f665, %f663, %f664;
	fma.rn.f32 	%f666, %f665, %f661, %f664;
	sub.f32 	%f667, %f663, %f666;
	fma.rz.f32 	%f668, %f667, %f661, %f666;
	cvt.rzi.f32.f32 	%f669, %f668;
	sub.f32 	%f737, %f663, %f669;
	sub.s32 	%r3325, %r3325, %r403;
	mov.b32 	%r3324, %f737;
	setp.ne.s32 	%p213, %r3325, 0;
	setp.ne.s32 	%p214, %r3324, 0;
	and.pred  	%p215, %p213, %p214;
	@%p215 bra 	$L__BB0_126;
$L__BB0_127:                            // %__internal_fmodf_slowpath_mod.exit.i.i2581
	setp.gt.u32 	%p216, %r76, 2139095039;
	selp.f32 	%f670, 0f7FFFFFFF, 0f4B800000, %p216;
	mul.f32 	%f671, %f737, 0f34000000;
	mul.f32 	%f738, %f670, %f671;
	bra.uni 	$L__BB0_128;
$L__BB0_118:                            // %__nv_fast_fdividef.exit.i.i.i2558
	div.approx.f32 	%f654, %f738, %f703;
	cvt.rzi.f32.f32 	%f736, %f654;
	fma.rn.f32 	%f129, %f736, 0fC0000000, %f738;
	mov.b32 	%r75, %f129;
	setp.lt.u32 	%p207, %r75, 1073741824;
	@%p207 bra 	$L__BB0_123;
// %bb.119:
	setp.lt.u32 	%p208, %r75, -2147483647;
	@%p208 bra 	$L__BB0_121;
// %bb.120:
	add.f32 	%f659, %f736, 0fBF800000;
	setp.lt.f32 	%p211, %f129, 0fC0000000;
	add.f32 	%f660, %f659, 0fBF800000;
	selp.f32 	%f736, %f660, %f659, %p211;
	bra.uni 	$L__BB0_123;
$L__BB0_121:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p209, %f129, 0f40800000;
	@%p209 bra 	$L__BB0_123;
// %bb.122:                             // %__nv_fmaf_rn.exit.i.i.i2562
	add.f32 	%f655, %f736, 0f3F800000;
	fma.rn.f32 	%f657, %f703, 0fC0400000, %f129;
	setp.ge.f32 	%p210, %f657, 0f00000000;
	add.f32 	%f658, %f655, 0f3F800000;
	selp.f32 	%f736, %f658, %f655, %p210;
$L__BB0_123:                            // %__internal_fmodf_fastpath_quot.exit.i.i2565
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_128:                            // %__internal_fmodf_kernel.exit.i2584
	selp.f32 	%f648, %f643, %f647, %p203;
	setp.gt.f32 	%p205, %f651, 0f4B800000;
	add.f32 	%f652, %f148, 0f3F800000;
	abs.f32 	%f672, %f738;
	setp.gtu.f32 	%p217, %f672, 0f7F800000;
	@%p217 bra 	$L__BB0_130;
// %bb.129:
	mov.b32 	%r405, %f738;
	or.b32  	%r406, %r45, %r405;
	mov.b32 	%f738, %r406;
$L__BB0_130:                            // %__nv_fmodf.exit2585
	selp.f32 	%f127, %f652, %f648, %p205;
	add.f32 	%f673, %f738, %f738;
	mov.b32 	%r407, %f673;
	and.b32  	%r408, %r407, -2147483648;
	or.b32  	%r409, %r408, 1056964608;
	mov.b32 	%f674, %r409;
	add.f32 	%f675, %f673, %f674;
	cvt.rzi.f32.f32 	%f676, %f675;
	abs.f32 	%f677, %f673;
	setp.gt.f32 	%p219, %f677, 0f4B000000;
	selp.f32 	%f678, %f673, %f676, %p219;
	cvt.rzi.f32.f32 	%f679, %f673;
	setp.lt.f32 	%p220, %f677, 0f3F000000;
	selp.f32 	%f680, %f679, %f678, %p220;
	cvt.rzi.s32.f32 	%r410, %f680;
	fma.rn.f32 	%f681, %f680, 0fBF000000, %f738;
	mul.f32 	%f682, %f681, %f681;
	fma.rn.f32 	%f683, %f682, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f684, %f682, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f685, %f683, %f682, 0fC0A55DF6;
	fma.rn.f32 	%f686, %f684, %f682, 0f4081E0CF;
	fma.rn.f32 	%f687, %f682, %f681, 0f00000000;
	fma.rn.f32 	%f688, %f686, %f682, 0fC09DE9E6;
	fma.rn.f32 	%f689, %f685, %f687, 0f00000000;
	fma.rn.f32 	%f690, %f688, %f682, 0f3F800000;
	fma.rn.f32 	%f691, %f681, 0f40490FDB, %f689;
	and.b32  	%r411, %r410, 1;
	setp.eq.b32 	%p221, %r411, 1;
	selp.f32 	%f692, %f690, %f691, %p221;
	selp.f32 	%f693, %f691, %f690, %p221;
	and.b32  	%r412, %r410, 2;
	setp.eq.s32 	%p222, %r412, 0;
	neg.f32 	%f694, %f692;
	selp.f32 	%f695, %f692, %f694, %p222;
	add.s32 	%r413, %r410, 1;
	and.b32  	%r414, %r413, 2;
	setp.eq.s32 	%p223, %r414, 0;
	sub.f32 	%f697, %f230, %f693;
	selp.f32 	%f698, %f693, %f697, %p223;
	cvt.rzi.f32.f32 	%f699, %f738;
	setp.eq.f32 	%p224, %f699, %f738;
	mul.f32 	%f700, %f738, 0f00000000;
	selp.f32 	%f150, %f700, %f695, %p224;
	abs.f32 	%f701, %f738;
	setp.gt.f32 	%p225, %f701, 0f4B800000;
	add.f32 	%f702, %f150, 0f3F800000;
	selp.f32 	%f144, %f702, %f698, %p225;
	mov.f32 	%f147, %f127;
	mov.f32 	%f149, %f144;
	@%p124 bra 	$L__BB0_132;
// %bb.131:                             // %L981
	neg.f32 	%f149, %f150;
	neg.f32 	%f147, %f148;
	mov.f32 	%f148, %f127;
	mov.f32 	%f150, %f144;
$L__BB0_132:                            // %L983
	setp.gt.u32 	%p226, %r1, 15;
	mov.u32 	%r152, 999999999;
	@%p226 bra 	$L__BB0_183;
// %bb.133:                             // %L1013
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	shl.b32 	%r422, %r1, 4;
	and.b32  	%r423, %r422, 240;
	or.b32  	%r424, %r423, %r2;
	mul.wide.u32 	%rd68, %r424, 4;
	add.s64 	%rd69, %rd1, %rd68;
	ld.global.u32 	%r425, [%rd69];
	shl.b32 	%r426, %r425, 16;
	cvt.s32.s16 	%r85, %r425;
	shr.s32 	%r86, %r425, 16;
	or.b32  	%r427, %r426, 65535;
	setp.lt.u32 	%p227, %r427, 1114111;
	setp.lt.u32 	%p228, %r425, 1048576;
	and.pred  	%p229, %p227, %p228;
	@%p229 bra 	$L__BB0_182;
	bra.uni 	$L__BB0_134;
$L__BB0_182:                            // %L1255
	mul.lo.s32 	%r431, %r86, 546;
	mad.lo.s32 	%r152, %r85, 33, %r431;
$L__BB0_183:                            // %pass554
	add.f32 	%f207, %f746, %f746;
	mov.b32 	%r248, %f207;
	add.f32 	%f469, %f750, %f750;
	and.b32  	%r249, %r248, -2147483648;
	add.f32 	%f261, %f706, %f706;
	add.f32 	%f313, %f710, %f710;
	mov.b32 	%r345, %f469;
	or.b32  	%r250, %r249, 1056964608;
	mov.b32 	%r264, %f261;
	mov.b32 	%r286, %f313;
	and.b32  	%r346, %r345, -2147483648;
	add.f32 	%f521, %f726, %f726;
	add.f32 	%f571, %f730, %f730;
	mov.b32 	%f208, %r250;
	and.b32  	%r265, %r264, -2147483648;
	and.b32  	%r287, %r286, -2147483648;
	or.b32  	%r347, %r346, 1056964608;
	mov.b32 	%r359, %f521;
	mov.b32 	%r379, %f571;
	add.f32 	%f209, %f207, %f208;
	abs.f32 	%f211, %f207;
	or.b32  	%r266, %r265, 1056964608;
	or.b32  	%r288, %r287, 1056964608;
	mov.b32 	%f470, %r347;
	and.b32  	%r360, %r359, -2147483648;
	and.b32  	%r380, %r379, -2147483648;
	cvt.rzi.f32.f32 	%f210, %f209;
	setp.gt.f32 	%p37, %f211, 0f4B000000;
	mov.b32 	%f262, %r266;
	mov.b32 	%f314, %r288;
	add.f32 	%f471, %f469, %f470;
	abs.f32 	%f473, %f469;
	or.b32  	%r361, %r360, 1056964608;
	or.b32  	%r381, %r380, 1056964608;
	selp.f32 	%f212, %f207, %f210, %p37;
	cvt.rzi.f32.f32 	%f213, %f207;
	setp.lt.f32 	%p38, %f211, 0f3F000000;
	add.f32 	%f263, %f261, %f262;
	abs.f32 	%f265, %f261;
	add.f32 	%f315, %f313, %f314;
	abs.f32 	%f317, %f313;
	cvt.rzi.f32.f32 	%f472, %f471;
	setp.gt.f32 	%p139, %f473, 0f4B000000;
	mov.b32 	%f522, %r361;
	mov.b32 	%f572, %r381;
	selp.f32 	%f214, %f213, %f212, %p38;
	cvt.rzi.f32.f32 	%f264, %f263;
	setp.gt.f32 	%p57, %f265, 0f4B000000;
	cvt.rzi.f32.f32 	%f316, %f315;
	setp.gt.f32 	%p77, %f317, 0f4B000000;
	selp.f32 	%f474, %f469, %f472, %p139;
	cvt.rzi.f32.f32 	%f475, %f469;
	setp.lt.f32 	%p140, %f473, 0f3F000000;
	add.f32 	%f523, %f521, %f522;
	abs.f32 	%f525, %f521;
	add.f32 	%f573, %f571, %f572;
	abs.f32 	%f575, %f571;
	fma.rn.f32 	%f215, %f214, 0fBF000000, %f746;
	selp.f32 	%f266, %f261, %f264, %p57;
	cvt.rzi.f32.f32 	%f267, %f261;
	setp.lt.f32 	%p58, %f265, 0f3F000000;
	selp.f32 	%f318, %f313, %f316, %p77;
	cvt.rzi.f32.f32 	%f319, %f313;
	setp.lt.f32 	%p78, %f317, 0f3F000000;
	selp.f32 	%f476, %f475, %f474, %p140;
	cvt.rzi.f32.f32 	%f524, %f523;
	setp.gt.f32 	%p159, %f525, 0f4B000000;
	cvt.rzi.f32.f32 	%f574, %f573;
	setp.gt.f32 	%p179, %f575, 0f4B000000;
	mul.f32 	%f216, %f215, %f215;
	selp.f32 	%f268, %f267, %f266, %p58;
	selp.f32 	%f320, %f319, %f318, %p78;
	fma.rn.f32 	%f477, %f476, 0fBF000000, %f750;
	selp.f32 	%f526, %f521, %f524, %p159;
	cvt.rzi.f32.f32 	%f527, %f521;
	setp.lt.f32 	%p160, %f525, 0f3F000000;
	selp.f32 	%f576, %f571, %f574, %p179;
	cvt.rzi.f32.f32 	%f577, %f571;
	setp.lt.f32 	%p180, %f575, 0f3F000000;
	fma.rn.f32 	%f217, %f216, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f218, %f216, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f269, %f268, 0fBF000000, %f706;
	fma.rn.f32 	%f321, %f320, 0fBF000000, %f710;
	mul.f32 	%f478, %f477, %f477;
	selp.f32 	%f528, %f527, %f526, %p160;
	selp.f32 	%f578, %f577, %f576, %p180;
	cvt.rzi.s32.f32 	%r251, %f214;
	fma.rn.f32 	%f219, %f217, %f216, 0fC0A55DF6;
	fma.rn.f32 	%f220, %f218, %f216, 0f4081E0CF;
	fma.rn.f32 	%f221, %f216, %f215, 0f00000000;
	mul.f32 	%f270, %f269, %f269;
	mul.f32 	%f322, %f321, %f321;
	fma.rn.f32 	%f479, %f478, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f480, %f478, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f529, %f528, 0fBF000000, %f726;
	fma.rn.f32 	%f579, %f578, 0fBF000000, %f730;
	fma.rn.f32 	%f222, %f220, %f216, 0fC09DE9E6;
	fma.rn.f32 	%f223, %f219, %f221, 0f00000000;
	and.b32  	%r252, %r251, 1;
	fma.rn.f32 	%f271, %f270, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f272, %f270, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f323, %f322, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f324, %f322, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r348, %f476;
	fma.rn.f32 	%f481, %f479, %f478, 0fC0A55DF6;
	fma.rn.f32 	%f482, %f480, %f478, 0f4081E0CF;
	fma.rn.f32 	%f483, %f478, %f477, 0f00000000;
	mul.f32 	%f530, %f529, %f529;
	mul.f32 	%f580, %f579, %f579;
	fma.rn.f32 	%f224, %f222, %f216, 0f3F800000;
	fma.rn.f32 	%f225, %f215, 0f40490FDB, %f223;
	setp.eq.b32 	%p39, %r252, 1;
	cvt.rzi.s32.f32 	%r267, %f268;
	fma.rn.f32 	%f273, %f271, %f270, 0fC0A55DF6;
	fma.rn.f32 	%f274, %f272, %f270, 0f4081E0CF;
	fma.rn.f32 	%f275, %f270, %f269, 0f00000000;
	cvt.rzi.s32.f32 	%r289, %f320;
	fma.rn.f32 	%f325, %f323, %f322, 0fC0A55DF6;
	fma.rn.f32 	%f326, %f324, %f322, 0f4081E0CF;
	fma.rn.f32 	%f327, %f322, %f321, 0f00000000;
	fma.rn.f32 	%f484, %f482, %f478, 0fC09DE9E6;
	fma.rn.f32 	%f485, %f481, %f483, 0f00000000;
	and.b32  	%r349, %r348, 1;
	fma.rn.f32 	%f531, %f530, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f532, %f530, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f581, %f580, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f582, %f580, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f226, %f224, %f225, %p39;
	and.b32  	%r253, %r251, 2;
	fma.rn.f32 	%f276, %f274, %f270, 0fC09DE9E6;
	fma.rn.f32 	%f277, %f273, %f275, 0f00000000;
	and.b32  	%r268, %r267, 1;
	fma.rn.f32 	%f328, %f326, %f322, 0fC09DE9E6;
	fma.rn.f32 	%f329, %f325, %f327, 0f00000000;
	and.b32  	%r290, %r289, 1;
	fma.rn.f32 	%f486, %f484, %f478, 0f3F800000;
	fma.rn.f32 	%f487, %f477, 0f40490FDB, %f485;
	setp.eq.b32 	%p141, %r349, 1;
	cvt.rzi.s32.f32 	%r362, %f528;
	fma.rn.f32 	%f533, %f531, %f530, 0fC0A55DF6;
	fma.rn.f32 	%f534, %f532, %f530, 0f4081E0CF;
	fma.rn.f32 	%f535, %f530, %f529, 0f00000000;
	cvt.rzi.s32.f32 	%r382, %f578;
	fma.rn.f32 	%f583, %f581, %f580, 0fC0A55DF6;
	fma.rn.f32 	%f584, %f582, %f580, 0f4081E0CF;
	fma.rn.f32 	%f585, %f580, %f579, 0f00000000;
	setp.eq.s32 	%p40, %r253, 0;
	neg.f32 	%f228, %f226;
	add.s32 	%r254, %r251, 1;
	cvt.rzi.f32.f32 	%f233, %f746;
	fma.rn.f32 	%f278, %f276, %f270, 0f3F800000;
	fma.rn.f32 	%f279, %f269, 0f40490FDB, %f277;
	setp.eq.b32 	%p59, %r268, 1;
	fma.rn.f32 	%f330, %f328, %f322, 0f3F800000;
	fma.rn.f32 	%f331, %f321, 0f40490FDB, %f329;
	setp.eq.b32 	%p79, %r290, 1;
	selp.f32 	%f488, %f486, %f487, %p141;
	and.b32  	%r350, %r348, 2;
	fma.rn.f32 	%f536, %f534, %f530, 0fC09DE9E6;
	fma.rn.f32 	%f537, %f533, %f535, 0f00000000;
	and.b32  	%r363, %r362, 1;
	fma.rn.f32 	%f586, %f584, %f580, 0fC09DE9E6;
	fma.rn.f32 	%f587, %f583, %f585, 0f00000000;
	and.b32  	%r383, %r382, 1;
	selp.f32 	%f227, %f225, %f224, %p39;
	selp.f32 	%f229, %f226, %f228, %p40;
	and.b32  	%r255, %r254, 2;
	setp.eq.f32 	%p42, %f233, %f746;
	mul.f32 	%f234, %f746, 0f00000000;
	selp.f32 	%f280, %f278, %f279, %p59;
	and.b32  	%r269, %r267, 2;
	selp.f32 	%f332, %f330, %f331, %p79;
	and.b32  	%r291, %r289, 2;
	setp.eq.s32 	%p142, %r350, 0;
	neg.f32 	%f490, %f488;
	add.s32 	%r351, %r348, 1;
	cvt.rzi.f32.f32 	%f495, %f750;
	fma.rn.f32 	%f538, %f536, %f530, 0f3F800000;
	fma.rn.f32 	%f539, %f529, 0f40490FDB, %f537;
	setp.eq.b32 	%p161, %r363, 1;
	fma.rn.f32 	%f588, %f586, %f580, 0f3F800000;
	fma.rn.f32 	%f589, %f579, 0f40490FDB, %f587;
	setp.eq.b32 	%p181, %r383, 1;
	setp.eq.s32 	%p41, %r255, 0;
	sub.f32 	%f231, %f230, %f227;
	selp.f32 	%f235, %f234, %f229, %p42;
	abs.f32 	%f236, %f746;
	setp.eq.s32 	%p60, %r269, 0;
	neg.f32 	%f282, %f280;
	add.s32 	%r270, %r267, 1;
	cvt.rzi.f32.f32 	%f287, %f706;
	setp.eq.s32 	%p80, %r291, 0;
	neg.f32 	%f334, %f332;
	add.s32 	%r292, %r289, 1;
	cvt.rzi.f32.f32 	%f339, %f710;
	selp.f32 	%f489, %f487, %f486, %p141;
	selp.f32 	%f491, %f488, %f490, %p142;
	and.b32  	%r352, %r351, 2;
	setp.eq.f32 	%p144, %f495, %f750;
	mul.f32 	%f496, %f750, 0f00000000;
	selp.f32 	%f540, %f538, %f539, %p161;
	and.b32  	%r364, %r362, 2;
	selp.f32 	%f590, %f588, %f589, %p181;
	and.b32  	%r384, %r382, 2;
	selp.f32 	%f232, %f227, %f231, %p41;
	setp.gt.f32 	%p43, %f236, 0f4B800000;
	add.f32 	%f237, %f235, 0f3F800000;
	selp.f32 	%f281, %f279, %f278, %p59;
	selp.f32 	%f283, %f280, %f282, %p60;
	and.b32  	%r271, %r270, 2;
	setp.eq.f32 	%p62, %f287, %f706;
	mul.f32 	%f288, %f706, 0f00000000;
	selp.f32 	%f333, %f331, %f330, %p79;
	selp.f32 	%f335, %f332, %f334, %p80;
	and.b32  	%r293, %r292, 2;
	setp.eq.f32 	%p82, %f339, %f710;
	mul.f32 	%f340, %f710, 0f00000000;
	setp.eq.s32 	%p143, %r352, 0;
	sub.f32 	%f493, %f230, %f489;
	selp.f32 	%f497, %f496, %f491, %p144;
	abs.f32 	%f498, %f750;
	setp.eq.s32 	%p162, %r364, 0;
	neg.f32 	%f542, %f540;
	add.s32 	%r365, %r362, 1;
	cvt.rzi.f32.f32 	%f547, %f726;
	setp.eq.s32 	%p182, %r384, 0;
	neg.f32 	%f592, %f590;
	add.s32 	%r385, %r382, 1;
	cvt.rzi.f32.f32 	%f597, %f730;
	selp.f32 	%f238, %f237, %f232, %p43;
	setp.eq.s32 	%p61, %r271, 0;
	sub.f32 	%f285, %f230, %f281;
	selp.f32 	%f16, %f288, %f283, %p62;
	abs.f32 	%f289, %f706;
	setp.eq.s32 	%p81, %r293, 0;
	sub.f32 	%f337, %f230, %f333;
	selp.f32 	%f341, %f340, %f335, %p82;
	abs.f32 	%f342, %f710;
	selp.f32 	%f494, %f489, %f493, %p143;
	setp.gt.f32 	%p145, %f498, 0f4B800000;
	add.f32 	%f499, %f497, 0f3F800000;
	selp.f32 	%f541, %f539, %f538, %p161;
	selp.f32 	%f543, %f540, %f542, %p162;
	and.b32  	%r366, %r365, 2;
	setp.eq.f32 	%p164, %f547, %f726;
	mul.f32 	%f548, %f726, 0f00000000;
	selp.f32 	%f591, %f589, %f588, %p181;
	selp.f32 	%f593, %f590, %f592, %p182;
	and.b32  	%r386, %r385, 2;
	setp.eq.f32 	%p184, %f597, %f730;
	mul.f32 	%f598, %f730, 0f00000000;
	mov.b32 	%r244, %f238;
	mov.b32 	%r247, %f235;
	selp.f32 	%f286, %f281, %f285, %p61;
	setp.gt.f32 	%p63, %f289, 0f4B800000;
	add.f32 	%f290, %f16, 0f3F800000;
	selp.f32 	%f338, %f333, %f337, %p81;
	setp.gt.f32 	%p83, %f342, 0f4B800000;
	add.f32 	%f343, %f341, 0f3F800000;
	selp.f32 	%f500, %f499, %f494, %p145;
	setp.eq.s32 	%p163, %r366, 0;
	sub.f32 	%f545, %f230, %f541;
	selp.f32 	%f94, %f548, %f543, %p164;
	abs.f32 	%f549, %f726;
	setp.eq.s32 	%p183, %r386, 0;
	sub.f32 	%f595, %f230, %f591;
	selp.f32 	%f599, %f598, %f593, %p184;
	abs.f32 	%f600, %f730;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r243, %r247, -2147483648;
	selp.f32 	%f17, %f290, %f286, %p63;
	selp.f32 	%f344, %f343, %f338, %p83;
	mov.b32 	%r341, %f500;
	mov.b32 	%r344, %f497;
	selp.f32 	%f546, %f541, %f545, %p163;
	setp.gt.f32 	%p165, %f549, 0f4B800000;
	add.f32 	%f550, %f94, 0f3F800000;
	selp.f32 	%f596, %f591, %f595, %p183;
	setp.gt.f32 	%p185, %f600, 0f4B800000;
	add.f32 	%f601, %f599, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r242, %r244, %r243;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r245, %r247, %r244;
	// end inline asm
	mov.b32 	%r282, %f344;
	mov.b32 	%r281, %f17;
	mov.b32 	%r285, %f341;
	mov.b32 	%r284, %f16;
	mov.b32 	%r328, %f75;
	mov.b32 	%r329, %f77;
	mov.b32 	%r331, %f76;
	mov.b32 	%r332, %f78;
	xor.b32  	%r340, %r344, -2147483648;
	selp.f32 	%f95, %f550, %f546, %p165;
	selp.f32 	%f602, %f601, %f596, %p185;
	// begin inline asm
	cvt.rn.f16x2.f32 %r280, %r282, %r281;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r283, %r285, %r284;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r327, %r329, %r328;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r330, %r332, %r331;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r339, %r341, %r340;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r342, %r344, %r341;
	// end inline asm
	mov.b32 	%r375, %f602;
	mov.b32 	%r374, %f95;
	mov.b32 	%r378, %f599;
	mov.b32 	%r377, %f94;
	// begin inline asm
	cvt.rn.f16x2.f32 %r373, %r375, %r374;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r376, %r378, %r377;
	// end inline asm
	mov.b32 	%r416, %f147;
	mov.b32 	%r417, %f149;
	// begin inline asm
	cvt.rn.f16x2.f32 %r415, %r417, %r416;
	// end inline asm
	mov.b32 	%r419, %f148;
	mov.b32 	%r420, %f150;
	// begin inline asm
	cvt.rn.f16x2.f32 %r418, %r420, %r419;
	// end inline asm
	shr.u32 	%r433, %r1, 3;
	and.b32  	%r434, %r433, 2;
	and.b32  	%r435, %r128, 1;
	or.b32  	%r436, %r434, %r435;
	shl.b32 	%r437, %r436, 4;
	bfe.u32 	%r438, %r1, 3, 1;
	shl.b32 	%r439, %r2, 1;
	and.b32  	%r440, %r439, 14;
	or.b32  	%r441, %r438, %r440;
	shl.b32 	%r442, %r1, 6;
	and.b32  	%r443, %r442, 192;
	or.b32  	%r444, %r437, %r441;
	or.b32  	%r445, %r444, %r443;
	mul.wide.u32 	%rd75, %r445, 4;
	add.s64 	%rd76, %rd2, %rd75;
	ld.global.u32 	%r153, [%rd76];
	ld.global.u32 	%r154, [%rd76+1024];
	shl.b32 	%r446, %r213, 13;
	shl.b32 	%r447, %r217, 7;
	add.s32 	%r155, %r447, %r446;
	shl.b32 	%r448, %r4, 7;
	shl.b32 	%r449, %r1, 2;
	or.b32  	%r156, %r449, %r448;
	and.b32  	%r157, %r1, 16;
	shr.u32 	%r450, %r1, 4;
	and.b32  	%r451, %r140, 30;
	or.b32  	%r452, %r451, %r450;
	mul.lo.s32 	%r453, %r452, 257;
	shr.u32 	%r454, %r2, 3;
	and.b32  	%r455, %r3, 224;
	mad.lo.s32 	%r456, %r454, 257, %r455;
	or.b32  	%r457, %r454, 2;
	mad.lo.s32 	%r458, %r457, 257, %r455;
	or.b32  	%r459, %r454, 4;
	mad.lo.s32 	%r460, %r459, 257, %r455;
	or.b32  	%r461, %r454, 6;
	mad.lo.s32 	%r462, %r461, 257, %r455;
	or.b32  	%r463, %r454, 8;
	mad.lo.s32 	%r464, %r463, 257, %r455;
	or.b32  	%r465, %r454, 10;
	mad.lo.s32 	%r466, %r465, 257, %r455;
	or.b32  	%r467, %r454, 12;
	mad.lo.s32 	%r468, %r467, 257, %r455;
	or.b32  	%r469, %r454, 14;
	mad.lo.s32 	%r470, %r469, 257, %r455;
	or.b32  	%r471, %r454, 16;
	mad.lo.s32 	%r472, %r471, 257, %r455;
	or.b32  	%r473, %r454, 18;
	mad.lo.s32 	%r474, %r473, 257, %r455;
	or.b32  	%r475, %r454, 20;
	mad.lo.s32 	%r476, %r475, 257, %r455;
	or.b32  	%r477, %r454, 22;
	mad.lo.s32 	%r478, %r477, 257, %r455;
	or.b32  	%r479, %r454, 24;
	mad.lo.s32 	%r480, %r479, 257, %r455;
	or.b32  	%r481, %r454, 26;
	mad.lo.s32 	%r482, %r481, 257, %r455;
	or.b32  	%r483, %r454, 28;
	mad.lo.s32 	%r484, %r483, 257, %r455;
	or.b32  	%r485, %r454, 30;
	mad.lo.s32 	%r486, %r485, 257, %r455;
	mul.lo.s32 	%r487, %r127, 2184;
	mad.lo.s32 	%r488, %r436, 546, %r487;
	mad.lo.s32 	%r489, %r441, 33, %r488;
	setp.lt.u32 	%p230, %r1, 4;
	setp.eq.s32 	%p231, %r128, 4;
	setp.eq.s32 	%p232, %r128, 5;
	mul.lo.s32 	%r490, %r454, 258;
	bfe.s32 	%r491, %r2, 1, 1;
	and.b32  	%r492, %r2, 2;
	setp.eq.s32 	%p233, %r492, 0;
	and.b32  	%r493, %r491, 1032;
	and.b32  	%r494, %r449, 12;
	bfe.s32 	%r495, %r2, 2, 1;
	and.b32  	%r496, %r2, 4;
	setp.eq.s32 	%p234, %r496, 0;
	and.b32  	%r497, %r495, 516;
	bfe.s32 	%r498, %r1, 3, 1;
	and.b32  	%r499, %r1, 8;
	setp.eq.s32 	%p235, %r499, 0;
	and.b32  	%r500, %r498, 4144;
	and.b32  	%r501, %r2, 1;
	neg.s32 	%r502, %r501;
	setp.eq.b32 	%p236, %r501, 1;
	and.b32  	%r503, %r502, 2064;
	add.s32 	%r504, %r436, %r490;
	add.s32 	%r505, %r504, %r494;
	add.s32 	%r506, %r505, %r493;
	add.s32 	%r507, %r506, %r497;
	add.s32 	%r508, %r507, %r500;
	add.s32 	%r509, %r508, %r503;
	mul.wide.u32 	%rd77, %r509, 4;
	mov.u64 	%rd78, shmem;
	add.s64 	%rd7, %rd78, %rd77;
	selp.b64 	%rd79, 2064, 0, %p236;
	selp.b64 	%rd80, 0, 4144, %p235;
	selp.b64 	%rd81, 0, 516, %p234;
	selp.b64 	%rd82, 0, 1032, %p233;
	cvt.u64.u32 	%rd83, %r494;
	cvt.u64.u32 	%rd84, %r435;
	cvt.u64.u32 	%rd85, %r434;
	cvt.u64.u32 	%rd86, %r490;
	add.s64 	%rd87, %rd86, %rd85;
	or.b64  	%rd88, %rd87, %rd84;
	add.s64 	%rd89, %rd88, %rd83;
	add.s64 	%rd90, %rd89, %rd82;
	add.s64 	%rd91, %rd90, %rd81;
	add.s64 	%rd92, %rd91, %rd80;
	add.s64 	%rd93, %rd92, %rd79;
	shl.b64 	%rd94, %rd93, 2;
	add.s64 	%rd8, %rd78, %rd94;
	shl.b32 	%r510, %r215, 20;
	shl.b32 	%r511, %r219, 9;
	add.s32 	%r512, %r511, %r510;
	and.b32  	%r513, %r1, 15;
	or.b32  	%r514, %r3, %r157;
	or.b32  	%r515, %r513, %r5;
	or.b32  	%r158, %r515, %r514;
	cvt.s64.s32 	%rd9, %r512;
	add.s32 	%r516, %r2, %r453;
	mul.wide.u32 	%rd95, %r516, 4;
	add.s64 	%rd10, %rd78, %rd95;
	cvt.u64.u32 	%rd96, %r2;
	cvt.u64.u32 	%rd11, %r453;
	add.s64 	%rd97, %rd11, %rd96;
	shl.b64 	%rd98, %rd97, 2;
	add.s64 	%rd12, %rd78, %rd98;
	add.s32 	%r517, %r456, %r1;
	mul.wide.u32 	%rd99, %r517, 4;
	add.s64 	%rd13, %rd78, %rd99;
	add.s32 	%r518, %r458, %r1;
	mul.wide.u32 	%rd100, %r518, 4;
	add.s64 	%rd14, %rd78, %rd100;
	add.s32 	%r519, %r460, %r1;
	mul.wide.u32 	%rd101, %r519, 4;
	add.s64 	%rd15, %rd78, %rd101;
	add.s32 	%r520, %r462, %r1;
	mul.wide.u32 	%rd102, %r520, 4;
	add.s64 	%rd16, %rd78, %rd102;
	add.s32 	%r521, %r464, %r1;
	mul.wide.u32 	%rd103, %r521, 4;
	add.s64 	%rd17, %rd78, %rd103;
	add.s32 	%r522, %r466, %r1;
	mul.wide.u32 	%rd104, %r522, 4;
	add.s64 	%rd18, %rd78, %rd104;
	add.s32 	%r523, %r468, %r1;
	mul.wide.u32 	%rd105, %r523, 4;
	add.s64 	%rd19, %rd78, %rd105;
	add.s32 	%r524, %r470, %r1;
	mul.wide.u32 	%rd106, %r524, 4;
	add.s64 	%rd20, %rd78, %rd106;
	add.s32 	%r525, %r472, %r1;
	mul.wide.u32 	%rd107, %r525, 4;
	add.s64 	%rd21, %rd78, %rd107;
	add.s32 	%r526, %r474, %r1;
	mul.wide.u32 	%rd108, %r526, 4;
	add.s64 	%rd22, %rd78, %rd108;
	add.s32 	%r527, %r476, %r1;
	mul.wide.u32 	%rd109, %r527, 4;
	add.s64 	%rd23, %rd78, %rd109;
	add.s32 	%r528, %r478, %r1;
	mul.wide.u32 	%rd110, %r528, 4;
	add.s64 	%rd24, %rd78, %rd110;
	add.s32 	%r529, %r480, %r1;
	mul.wide.u32 	%rd111, %r529, 4;
	add.s64 	%rd25, %rd78, %rd111;
	add.s32 	%r530, %r482, %r1;
	mul.wide.u32 	%rd112, %r530, 4;
	add.s64 	%rd26, %rd78, %rd112;
	add.s32 	%r531, %r484, %r1;
	mul.wide.u32 	%rd113, %r531, 4;
	add.s64 	%rd27, %rd78, %rd113;
	add.s32 	%r532, %r486, %r1;
	mul.wide.u32 	%rd114, %r532, 4;
	add.s64 	%rd28, %rd78, %rd114;
	add.s32 	%r533, %r489, %r454;
	mul.wide.u32 	%rd115, %r533, 4;
	add.s64 	%rd29, %rd78, %rd115;
	add.s32 	%r534, %r489, %r457;
	mul.wide.u32 	%rd116, %r534, 4;
	add.s64 	%rd30, %rd78, %rd116;
	add.s32 	%r535, %r489, %r459;
	mul.wide.u32 	%rd117, %r535, 4;
	add.s64 	%rd31, %rd78, %rd117;
	add.s32 	%r536, %r489, %r461;
	mul.wide.u32 	%rd118, %r536, 4;
	add.s64 	%rd32, %rd78, %rd118;
	add.s32 	%r537, %r489, %r463;
	mul.wide.u32 	%rd119, %r537, 4;
	add.s64 	%rd33, %rd78, %rd119;
	add.s32 	%r538, %r489, %r465;
	mul.wide.u32 	%rd120, %r538, 4;
	add.s64 	%rd34, %rd78, %rd120;
	add.s32 	%r539, %r489, %r467;
	mul.wide.u32 	%rd121, %r539, 4;
	add.s64 	%rd35, %rd78, %rd121;
	add.s32 	%r540, %r489, %r469;
	mul.wide.u32 	%rd122, %r540, 4;
	add.s64 	%rd36, %rd78, %rd122;
	add.s32 	%r541, %r489, %r471;
	mul.wide.u32 	%rd123, %r541, 4;
	add.s64 	%rd37, %rd78, %rd123;
	add.s32 	%r542, %r489, %r473;
	mul.wide.u32 	%rd124, %r542, 4;
	add.s64 	%rd38, %rd78, %rd124;
	add.s32 	%r543, %r489, %r475;
	mul.wide.u32 	%rd125, %r543, 4;
	add.s64 	%rd39, %rd78, %rd125;
	add.s32 	%r544, %r489, %r477;
	mul.wide.u32 	%rd126, %r544, 4;
	add.s64 	%rd40, %rd78, %rd126;
	add.s32 	%r545, %r489, %r479;
	mul.wide.u32 	%rd127, %r545, 4;
	add.s64 	%rd41, %rd78, %rd127;
	add.s32 	%r546, %r489, %r481;
	mul.wide.u32 	%rd128, %r546, 4;
	add.s64 	%rd42, %rd78, %rd128;
	add.s32 	%r547, %r489, %r483;
	mul.wide.u32 	%rd129, %r547, 4;
	add.s64 	%rd43, %rd78, %rd129;
	add.s32 	%r548, %r489, %r485;
	mul.wide.u32 	%rd130, %r548, 4;
	add.s64 	%rd44, %rd78, %rd130;
	add.s32 	%r549, %r128, -1;
	setp.lt.u32 	%p237, %r549, 3;
	or.pred  	%p238, %p230, %p237;
	or.pred  	%p239, %p238, %p231;
	and.b32  	%r550, %r1, 24;
	setp.eq.s32 	%p240, %r550, 24;
	or.pred  	%p241, %p232, %p240;
	selp.b32 	%r159, 1145324612, -286331154, %p238;
	or.pred  	%p1, %p239, %p241;
	add.s32 	%r551, %r509, 32;
	mul.wide.u32 	%rd131, %r551, 4;
	add.s64 	%rd45, %rd78, %rd131;
	add.s32 	%r552, %r509, 48;
	mul.wide.u32 	%rd132, %r552, 4;
	add.s64 	%rd46, %rd78, %rd132;
	add.s32 	%r553, %r509, 64;
	mul.wide.u32 	%rd133, %r553, 4;
	add.s64 	%rd47, %rd78, %rd133;
	add.s32 	%r554, %r509, 80;
	mul.wide.u32 	%rd134, %r554, 4;
	add.s64 	%rd48, %rd78, %rd134;
	add.s32 	%r555, %r509, 96;
	mul.wide.u32 	%rd135, %r555, 4;
	add.s64 	%rd49, %rd78, %rd135;
	add.s32 	%r556, %r509, 112;
	mul.wide.u32 	%rd136, %r556, 4;
	add.s64 	%rd50, %rd78, %rd136;
	add.s32 	%r557, %r509, 128;
	mul.wide.u32 	%rd137, %r557, 4;
	add.s64 	%rd51, %rd78, %rd137;
	add.s32 	%r558, %r509, 144;
	mul.wide.u32 	%rd138, %r558, 4;
	add.s64 	%rd52, %rd78, %rd138;
	add.s32 	%r559, %r509, 160;
	mul.wide.u32 	%rd139, %r559, 4;
	add.s64 	%rd53, %rd78, %rd139;
	add.s32 	%r560, %r509, 176;
	mul.wide.u32 	%rd140, %r560, 4;
	add.s64 	%rd54, %rd78, %rd140;
	add.s32 	%r561, %r509, 192;
	mul.wide.u32 	%rd141, %r561, 4;
	add.s64 	%rd55, %rd78, %rd141;
	add.s32 	%r562, %r509, 208;
	mul.wide.u32 	%rd142, %r562, 4;
	add.s64 	%rd56, %rd78, %rd142;
	add.s32 	%r563, %r509, 224;
	mul.wide.u32 	%rd143, %r563, 4;
	add.s64 	%rd57, %rd78, %rd143;
	add.s32 	%r564, %r509, 240;
	mul.wide.u32 	%rd144, %r564, 4;
	add.s64 	%rd58, %rd78, %rd144;
	mov.u32 	%r88, 0;
	setp.eq.s32 	%p243, %r157, 0;
	mov.u16 	%rs38, 25600;
	mov.u16 	%rs40, 21504;
	mov.u16 	%rs44, 18432;
	mov.u32 	%r3338, %r88;
	mov.u32 	%r3339, %r88;
	mov.u32 	%r3343, %r88;
	bra.uni 	$L__BB0_184;
$L__BB0_155:                            // %L29311
                                        //   in Loop: Header=BB0_184 Depth=1
	add.s32 	%r126, %r88, 64;
	setp.ne.s32 	%p290, %r88, 65472;
	mov.u32 	%r88, %r126;
	@%p290 bra 	$L__BB0_184;
	bra.uni 	$L__BB0_156;
$L__BB0_184:                            // %L1564
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_202 Depth 2
                                        //     Child Loop BB0_153 Depth 2
	add.s32 	%r565, %r88, %r213;
	setp.lt.s32 	%p242, %r565, %r214;
	@%p242 bra 	$L__BB0_185;
	bra.uni 	$L__BB0_156;
$L__BB0_185:                            // %pass717
                                        //   in Loop: Header=BB0_184 Depth=1
	cvt.u32.u64 	%r758, %rd11;
	or.b32  	%r759, %r88, %r2;
	shl.b32 	%r760, %r759, 13;
	and.b32  	%r761, %r760, 536469504;
	or.b32  	%r762, %r156, %r761;
	add.s32 	%r763, %r155, %r762;
	shr.s32 	%r764, %r763, 31;
	shr.u32 	%r765, %r764, 3;
	add.s32 	%r766, %r763, %r765;
	shr.s32 	%r767, %r766, 29;
	setp.lt.s32 	%p244, %r763, 0;
	and.b32  	%r768, %r766, -536870912;
	setp.ne.s32 	%p245, %r768, %r763;
	and.pred  	%p246, %p244, %p245;
	selp.u32 	%r769, 1, 0, %p246;
	sub.s32 	%r770, %r769, %r767;
	shl.b32 	%r771, %r770, 29;
	add.s32 	%r772, %r771, %r763;
	mul.wide.s32 	%rd145, %r772, 4;
	add.s64 	%rd146, %rd3, %rd145;
	ld.global.v4.u32 	{%r773, %r774, %r775, %r776}, [%rd146];
	or.b32  	%r777, %r759, 16;
	shl.b32 	%r778, %r777, 13;
	and.b32  	%r779, %r778, 536600576;
	or.b32  	%r780, %r156, %r779;
	add.s32 	%r781, %r155, %r780;
	shr.s32 	%r782, %r781, 31;
	shr.u32 	%r783, %r782, 3;
	add.s32 	%r784, %r781, %r783;
	shr.s32 	%r785, %r784, 29;
	setp.lt.s32 	%p247, %r781, 0;
	and.b32  	%r786, %r784, -536870912;
	setp.ne.s32 	%p248, %r786, %r781;
	and.pred  	%p249, %p247, %p248;
	selp.u32 	%r787, 1, 0, %p249;
	sub.s32 	%r788, %r787, %r785;
	shl.b32 	%r789, %r788, 29;
	add.s32 	%r790, %r789, %r781;
	mul.wide.s32 	%rd147, %r790, 4;
	add.s64 	%rd148, %rd3, %rd147;
	ld.global.v4.u32 	{%r791, %r792, %r793, %r794}, [%rd148];
	and.b32  	%r795, %r88, 65472;
	or.b32  	%r796, %r2, %r795;
	shl.b32 	%r797, %r796, 13;
	or.b32  	%r798, %r797, %r156;
	or.b32  	%r799, %r798, 262144;
	add.s32 	%r800, %r155, %r799;
	shr.s32 	%r801, %r800, 31;
	shr.u32 	%r802, %r801, 3;
	add.s32 	%r803, %r800, %r802;
	shr.s32 	%r804, %r803, 29;
	setp.lt.s32 	%p250, %r800, 0;
	and.b32  	%r805, %r803, -536870912;
	setp.ne.s32 	%p251, %r805, %r800;
	and.pred  	%p252, %p250, %p251;
	selp.u32 	%r806, 1, 0, %p252;
	sub.s32 	%r807, %r806, %r804;
	shl.b32 	%r808, %r807, 29;
	add.s32 	%r809, %r808, %r800;
	mul.wide.s32 	%rd149, %r809, 4;
	add.s64 	%rd150, %rd3, %rd149;
	ld.global.v4.u32 	{%r810, %r811, %r812, %r813}, [%rd150];
	or.b32  	%r814, %r798, 393216;
	add.s32 	%r815, %r155, %r814;
	shr.s32 	%r816, %r815, 31;
	shr.u32 	%r817, %r816, 3;
	add.s32 	%r818, %r815, %r817;
	shr.s32 	%r819, %r818, 29;
	setp.lt.s32 	%p253, %r815, 0;
	and.b32  	%r820, %r818, -536870912;
	setp.ne.s32 	%p254, %r820, %r815;
	and.pred  	%p255, %p253, %p254;
	selp.u32 	%r821, 1, 0, %p255;
	sub.s32 	%r822, %r821, %r819;
	shl.b32 	%r823, %r822, 29;
	add.s32 	%r824, %r823, %r815;
	mul.wide.s32 	%rd151, %r824, 4;
	add.s64 	%rd152, %rd3, %rd151;
	ld.global.v4.u32 	{%r825, %r826, %r827, %r828}, [%rd152];
	selp.b32 	%r829, %r775, %r773, %p243;
	shfl.sync.bfly.b32	%r830, %r829, 16, 31, -1;
	selp.b32 	%r568, %r773, %r830, %p243;
	selp.b32 	%r573, %r830, %r775, %p243;
	selp.b32 	%r831, %r776, %r774, %p243;
	shfl.sync.bfly.b32	%r832, %r831, 16, 31, -1;
	selp.b32 	%r576, %r774, %r832, %p243;
	selp.b32 	%r581, %r832, %r776, %p243;
	selp.b32 	%r833, %r793, %r791, %p243;
	shfl.sync.bfly.b32	%r834, %r833, 16, 31, -1;
	selp.b32 	%r584, %r791, %r834, %p243;
	selp.b32 	%r589, %r834, %r793, %p243;
	selp.b32 	%r835, %r794, %r792, %p243;
	shfl.sync.bfly.b32	%r836, %r835, 16, 31, -1;
	selp.b32 	%r592, %r792, %r836, %p243;
	selp.b32 	%r597, %r836, %r794, %p243;
	selp.b32 	%r837, %r812, %r810, %p243;
	shfl.sync.bfly.b32	%r838, %r837, 16, 31, -1;
	selp.b32 	%r600, %r810, %r838, %p243;
	selp.b32 	%r605, %r838, %r812, %p243;
	selp.b32 	%r839, %r813, %r811, %p243;
	shfl.sync.bfly.b32	%r840, %r839, 16, 31, -1;
	selp.b32 	%r608, %r811, %r840, %p243;
	selp.b32 	%r613, %r840, %r813, %p243;
	selp.b32 	%r841, %r827, %r825, %p243;
	shfl.sync.bfly.b32	%r842, %r841, 16, 31, -1;
	selp.b32 	%r616, %r825, %r842, %p243;
	selp.b32 	%r621, %r842, %r827, %p243;
	selp.b32 	%r843, %r828, %r826, %p243;
	shfl.sync.bfly.b32	%r844, %r843, 16, 31, -1;
	selp.b32 	%r624, %r826, %r844, %p243;
	selp.b32 	%r629, %r844, %r828, %p243;
	shl.b32 	%r569, %r573, 4;
	mov.u32 	%r567, 252645135;
	// begin inline asm
	lop3.b32 %r631, %r567, %r568, %r569, 202;
	// end inline asm
	shr.u32 	%r572, %r568, 4;
	// begin inline asm
	lop3.b32 %r647, %r567, %r572, %r573, 202;
	// end inline asm
	shl.b32 	%r577, %r581, 4;
	// begin inline asm
	lop3.b32 %r639, %r567, %r576, %r577, 202;
	// end inline asm
	shr.u32 	%r580, %r576, 4;
	// begin inline asm
	lop3.b32 %r655, %r567, %r580, %r581, 202;
	// end inline asm
	shl.b32 	%r585, %r589, 4;
	// begin inline asm
	lop3.b32 %r663, %r567, %r584, %r585, 202;
	// end inline asm
	shr.u32 	%r588, %r584, 4;
	// begin inline asm
	lop3.b32 %r679, %r567, %r588, %r589, 202;
	// end inline asm
	shl.b32 	%r593, %r597, 4;
	// begin inline asm
	lop3.b32 %r671, %r567, %r592, %r593, 202;
	// end inline asm
	shr.u32 	%r596, %r592, 4;
	// begin inline asm
	lop3.b32 %r687, %r567, %r596, %r597, 202;
	// end inline asm
	shl.b32 	%r601, %r605, 4;
	// begin inline asm
	lop3.b32 %r632, %r567, %r600, %r601, 202;
	// end inline asm
	shr.u32 	%r604, %r600, 4;
	// begin inline asm
	lop3.b32 %r648, %r567, %r604, %r605, 202;
	// end inline asm
	shl.b32 	%r609, %r613, 4;
	// begin inline asm
	lop3.b32 %r640, %r567, %r608, %r609, 202;
	// end inline asm
	shr.u32 	%r612, %r608, 4;
	// begin inline asm
	lop3.b32 %r656, %r567, %r612, %r613, 202;
	// end inline asm
	shl.b32 	%r617, %r621, 4;
	// begin inline asm
	lop3.b32 %r664, %r567, %r616, %r617, 202;
	// end inline asm
	shr.u32 	%r620, %r616, 4;
	// begin inline asm
	lop3.b32 %r680, %r567, %r620, %r621, 202;
	// end inline asm
	shl.b32 	%r625, %r629, 4;
	// begin inline asm
	lop3.b32 %r672, %r567, %r624, %r625, 202;
	// end inline asm
	shr.u32 	%r628, %r624, 4;
	// begin inline asm
	lop3.b32 %r688, %r567, %r628, %r629, 202;
	// end inline asm
	mov.u32 	%r633, 25152;
	// begin inline asm
	prmt.b32 %r695, %r631, %r632, %r633;
	// end inline asm
	mov.u32 	%r637, 29521;
	// begin inline asm
	prmt.b32 %r727, %r631, %r632, %r637;
	// end inline asm
	// begin inline asm
	prmt.b32 %r703, %r639, %r640, %r633;
	// end inline asm
	// begin inline asm
	prmt.b32 %r735, %r639, %r640, %r637;
	// end inline asm
	// begin inline asm
	prmt.b32 %r696, %r647, %r648, %r633;
	// end inline asm
	// begin inline asm
	prmt.b32 %r728, %r647, %r648, %r637;
	// end inline asm
	// begin inline asm
	prmt.b32 %r704, %r655, %r656, %r633;
	// end inline asm
	// begin inline asm
	prmt.b32 %r736, %r655, %r656, %r637;
	// end inline asm
	// begin inline asm
	prmt.b32 %r711, %r663, %r664, %r633;
	// end inline asm
	// begin inline asm
	prmt.b32 %r743, %r663, %r664, %r637;
	// end inline asm
	// begin inline asm
	prmt.b32 %r719, %r671, %r672, %r633;
	// end inline asm
	// begin inline asm
	prmt.b32 %r751, %r671, %r672, %r637;
	// end inline asm
	// begin inline asm
	prmt.b32 %r712, %r679, %r680, %r633;
	// end inline asm
	// begin inline asm
	prmt.b32 %r744, %r679, %r680, %r637;
	// end inline asm
	// begin inline asm
	prmt.b32 %r720, %r687, %r688, %r633;
	// end inline asm
	// begin inline asm
	prmt.b32 %r752, %r687, %r688, %r637;
	// end inline asm
	mov.u32 	%r697, 21520;
	// begin inline asm
	prmt.b32 %r694, %r695, %r696, %r697;
	// end inline asm
	mov.u32 	%r701, 30258;
	// begin inline asm
	prmt.b32 %r698, %r695, %r696, %r701;
	// end inline asm
	// begin inline asm
	prmt.b32 %r702, %r703, %r704, %r697;
	// end inline asm
	// begin inline asm
	prmt.b32 %r706, %r703, %r704, %r701;
	// end inline asm
	// begin inline asm
	prmt.b32 %r710, %r711, %r712, %r697;
	// end inline asm
	// begin inline asm
	prmt.b32 %r714, %r711, %r712, %r701;
	// end inline asm
	// begin inline asm
	prmt.b32 %r718, %r719, %r720, %r697;
	// end inline asm
	// begin inline asm
	prmt.b32 %r722, %r719, %r720, %r701;
	// end inline asm
	// begin inline asm
	prmt.b32 %r726, %r727, %r728, %r697;
	// end inline asm
	// begin inline asm
	prmt.b32 %r730, %r727, %r728, %r701;
	// end inline asm
	// begin inline asm
	prmt.b32 %r734, %r735, %r736, %r697;
	// end inline asm
	// begin inline asm
	prmt.b32 %r738, %r735, %r736, %r701;
	// end inline asm
	// begin inline asm
	prmt.b32 %r742, %r743, %r744, %r697;
	// end inline asm
	// begin inline asm
	prmt.b32 %r746, %r743, %r744, %r701;
	// end inline asm
	// begin inline asm
	prmt.b32 %r750, %r751, %r752, %r697;
	// end inline asm
	// begin inline asm
	prmt.b32 %r754, %r751, %r752, %r701;
	// end inline asm
	st.shared.u32 	[%rd10], %r694;
	st.shared.u32 	[%rd12+512], %r702;
	st.shared.u32 	[%rd12+256], %r698;
	st.shared.u32 	[%rd12+768], %r706;
	and.b32  	%r845, %r777, 31;
	add.s32 	%r846, %r845, %r758;
	mul.wide.u32 	%rd153, %r846, 4;
	add.s64 	%rd155, %rd78, %rd153;
	st.shared.u32 	[%rd155], %r710;
	cvt.u64.u32 	%rd156, %r845;
	add.s64 	%rd157, %rd11, %rd156;
	shl.b64 	%rd158, %rd157, 2;
	add.s64 	%rd159, %rd78, %rd158;
	st.shared.u32 	[%rd159+512], %r718;
	st.shared.u32 	[%rd159+256], %r714;
	st.shared.u32 	[%rd159+768], %r722;
	st.shared.u32 	[%rd12+128], %r726;
	st.shared.u32 	[%rd12+640], %r734;
	st.shared.u32 	[%rd12+384], %r730;
	st.shared.u32 	[%rd12+896], %r738;
	st.shared.u32 	[%rd159+128], %r742;
	st.shared.u32 	[%rd159+640], %r750;
	st.shared.u32 	[%rd159+384], %r746;
	st.shared.u32 	[%rd159+896], %r754;
	bar.sync 	0;
	ld.shared.u32 	%r160, [%rd13];
	ld.shared.u32 	%r161, [%rd14];
	ld.shared.u32 	%r162, [%rd15];
	ld.shared.u32 	%r163, [%rd16];
	ld.shared.u32 	%r164, [%rd17];
	ld.shared.u32 	%r165, [%rd18];
	ld.shared.u32 	%r166, [%rd19];
	ld.shared.u32 	%r167, [%rd20];
	ld.shared.u32 	%r168, [%rd21];
	ld.shared.u32 	%r169, [%rd22];
	ld.shared.u32 	%r170, [%rd23];
	ld.shared.u32 	%r171, [%rd24];
	ld.shared.u32 	%r172, [%rd25];
	ld.shared.u32 	%r173, [%rd26];
	ld.shared.u32 	%r174, [%rd27];
	ld.shared.u32 	%r175, [%rd28];
	bar.sync 	0;
	shfl.sync.idx.b32	%r176, %r152, 0, 31, -1;
	shfl.sync.idx.b32	%r177, %r152, 1, 31, -1;
	shfl.sync.idx.b32	%r178, %r152, 2, 31, -1;
	shfl.sync.idx.b32	%r179, %r152, 3, 31, -1;
	shfl.sync.idx.b32	%r180, %r152, 4, 31, -1;
	shfl.sync.idx.b32	%r181, %r152, 5, 31, -1;
	shfl.sync.idx.b32	%r182, %r152, 6, 31, -1;
	shfl.sync.idx.b32	%r183, %r152, 7, 31, -1;
	shfl.sync.idx.b32	%r184, %r152, 8, 31, -1;
	shfl.sync.idx.b32	%r185, %r152, 9, 31, -1;
	shfl.sync.idx.b32	%r186, %r152, 10, 31, -1;
	shfl.sync.idx.b32	%r187, %r152, 11, 31, -1;
	shfl.sync.idx.b32	%r188, %r152, 12, 31, -1;
	shfl.sync.idx.b32	%r189, %r152, 13, 31, -1;
	shfl.sync.idx.b32	%r190, %r152, 14, 31, -1;
	shfl.sync.idx.b32	%r191, %r152, 15, 31, -1;
	setp.eq.s32 	%p256, %r176, 999999999;
	@%p256 bra 	$L__BB0_135;
// %bb.186:                             // %pass3061
                                        //   in Loop: Header=BB0_184 Depth=1
	add.s32 	%r847, %r176, %r1;
	mul.wide.s32 	%rd160, %r847, 4;
	add.s64 	%rd162, %rd78, %rd160;
	st.shared.u32 	[%rd162], %r160;
	setp.eq.s32 	%p257, %r177, 999999999;
	@%p257 bra 	$L__BB0_136;
// %bb.187:                             // %pass3129
                                        //   in Loop: Header=BB0_184 Depth=1
	add.s32 	%r848, %r177, %r1;
	mul.wide.s32 	%rd163, %r848, 4;
	add.s64 	%rd165, %rd78, %rd163;
	st.shared.u32 	[%rd165], %r161;
	setp.eq.s32 	%p258, %r178, 999999999;
	@%p258 bra 	$L__BB0_137;
// %bb.188:                             // %pass3197
                                        //   in Loop: Header=BB0_184 Depth=1
	add.s32 	%r849, %r178, %r1;
	mul.wide.s32 	%rd166, %r849, 4;
	add.s64 	%rd168, %rd78, %rd166;
	st.shared.u32 	[%rd168], %r162;
	setp.eq.s32 	%p259, %r179, 999999999;
	@%p259 bra 	$L__BB0_138;
// %bb.189:                             // %pass3265
                                        //   in Loop: Header=BB0_184 Depth=1
	add.s32 	%r850, %r179, %r1;
	mul.wide.s32 	%rd169, %r850, 4;
	add.s64 	%rd171, %rd78, %rd169;
	st.shared.u32 	[%rd171], %r163;
	setp.eq.s32 	%p260, %r180, 999999999;
	@%p260 bra 	$L__BB0_139;
// %bb.190:                             // %pass3333
                                        //   in Loop: Header=BB0_184 Depth=1
	add.s32 	%r851, %r180, %r1;
	mul.wide.s32 	%rd172, %r851, 4;
	add.s64 	%rd174, %rd78, %rd172;
	st.shared.u32 	[%rd174], %r164;
	setp.eq.s32 	%p261, %r181, 999999999;
	@%p261 bra 	$L__BB0_140;
// %bb.191:                             // %pass3401
                                        //   in Loop: Header=BB0_184 Depth=1
	add.s32 	%r852, %r181, %r1;
	mul.wide.s32 	%rd175, %r852, 4;
	add.s64 	%rd177, %rd78, %rd175;
	st.shared.u32 	[%rd177], %r165;
	setp.eq.s32 	%p262, %r182, 999999999;
	@%p262 bra 	$L__BB0_141;
// %bb.192:                             // %pass3469
                                        //   in Loop: Header=BB0_184 Depth=1
	add.s32 	%r853, %r182, %r1;
	mul.wide.s32 	%rd178, %r853, 4;
	add.s64 	%rd180, %rd78, %rd178;
	st.shared.u32 	[%rd180], %r166;
	setp.eq.s32 	%p263, %r183, 999999999;
	@%p263 bra 	$L__BB0_142;
// %bb.193:                             // %pass3537
                                        //   in Loop: Header=BB0_184 Depth=1
	add.s32 	%r854, %r183, %r1;
	mul.wide.s32 	%rd181, %r854, 4;
	add.s64 	%rd183, %rd78, %rd181;
	st.shared.u32 	[%rd183], %r167;
	setp.eq.s32 	%p264, %r184, 999999999;
	@%p264 bra 	$L__BB0_143;
// %bb.194:                             // %pass3605
                                        //   in Loop: Header=BB0_184 Depth=1
	add.s32 	%r855, %r184, %r1;
	mul.wide.s32 	%rd184, %r855, 4;
	add.s64 	%rd186, %rd78, %rd184;
	st.shared.u32 	[%rd186], %r168;
	setp.eq.s32 	%p265, %r185, 999999999;
	@%p265 bra 	$L__BB0_144;
// %bb.195:                             // %pass3673
                                        //   in Loop: Header=BB0_184 Depth=1
	add.s32 	%r856, %r185, %r1;
	mul.wide.s32 	%rd187, %r856, 4;
	add.s64 	%rd189, %rd78, %rd187;
	st.shared.u32 	[%rd189], %r169;
	setp.eq.s32 	%p266, %r186, 999999999;
	@%p266 bra 	$L__BB0_145;
// %bb.196:                             // %pass3741
                                        //   in Loop: Header=BB0_184 Depth=1
	add.s32 	%r857, %r186, %r1;
	mul.wide.s32 	%rd190, %r857, 4;
	add.s64 	%rd192, %rd78, %rd190;
	st.shared.u32 	[%rd192], %r170;
	setp.eq.s32 	%p267, %r187, 999999999;
	@%p267 bra 	$L__BB0_146;
// %bb.197:                             // %pass3809
                                        //   in Loop: Header=BB0_184 Depth=1
	add.s32 	%r858, %r187, %r1;
	mul.wide.s32 	%rd193, %r858, 4;
	add.s64 	%rd195, %rd78, %rd193;
	st.shared.u32 	[%rd195], %r171;
	setp.eq.s32 	%p268, %r188, 999999999;
	@%p268 bra 	$L__BB0_147;
// %bb.198:                             // %pass3877
                                        //   in Loop: Header=BB0_184 Depth=1
	add.s32 	%r859, %r188, %r1;
	mul.wide.s32 	%rd196, %r859, 4;
	add.s64 	%rd198, %rd78, %rd196;
	st.shared.u32 	[%rd198], %r172;
	setp.eq.s32 	%p269, %r189, 999999999;
	@%p269 bra 	$L__BB0_148;
// %bb.199:                             // %pass3945
                                        //   in Loop: Header=BB0_184 Depth=1
	add.s32 	%r860, %r189, %r1;
	mul.wide.s32 	%rd199, %r860, 4;
	add.s64 	%rd201, %rd78, %rd199;
	st.shared.u32 	[%rd201], %r173;
	setp.eq.s32 	%p270, %r190, 999999999;
	@%p270 bra 	$L__BB0_149;
// %bb.200:                             // %pass4013
                                        //   in Loop: Header=BB0_184 Depth=1
	add.s32 	%r861, %r190, %r1;
	mul.wide.s32 	%rd202, %r861, 4;
	add.s64 	%rd204, %rd78, %rd202;
	st.shared.u32 	[%rd204], %r174;
	setp.eq.s32 	%p271, %r191, 999999999;
	@%p271 bra 	$L__BB0_150;
// %bb.201:                             // %pass4081
                                        //   in Loop: Header=BB0_184 Depth=1
	add.s32 	%r863, %r191, %r1;
	mul.wide.s32 	%rd205, %r863, 4;
	add.s64 	%rd207, %rd78, %rd205;
	st.shared.u32 	[%rd207], %r175;
	bar.sync 	0;
	ld.shared.u32 	%r192, [%rd29];
	ld.shared.u32 	%r193, [%rd30];
	ld.shared.u32 	%r194, [%rd31];
	ld.shared.u32 	%r195, [%rd32];
	ld.shared.u32 	%r196, [%rd33];
	ld.shared.u32 	%r197, [%rd34];
	ld.shared.u32 	%r198, [%rd35];
	ld.shared.u32 	%r199, [%rd36];
	ld.shared.u32 	%r200, [%rd37];
	ld.shared.u32 	%r201, [%rd38];
	ld.shared.u32 	%r202, [%rd39];
	ld.shared.u32 	%r203, [%rd40];
	ld.shared.u32 	%r204, [%rd41];
	ld.shared.u32 	%r205, [%rd42];
	ld.shared.u32 	%r206, [%rd43];
	ld.shared.u32 	%r207, [%rd44];
	bar.sync 	0;
	mov.u32 	%r3330, 16;
	bra.uni 	$L__BB0_202;
$L__BB0_151:                            // %L20797
                                        //   in Loop: Header=BB0_202 Depth=2
	bar.sync 	0;
	add.s32 	%r3330, %r3330, -8;
	setp.ne.s32 	%p280, %r3330, -16;
	@%p280 bra 	$L__BB0_202;
	bra.uni 	$L__BB0_152;
$L__BB0_202:                            // %L12320
                                        //   Parent Loop BB0_184 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p272, %r3330, 16;
	selp.b32 	%r1256, %r192, 0, %p272;
	setp.eq.s32 	%p273, %r3330, 8;
	selp.b32 	%r1257, %r196, %r1256, %p273;
	setp.eq.s32 	%p274, %r3330, 0;
	selp.b32 	%r1258, %r200, %r1257, %p274;
	setp.eq.s32 	%p275, %r3330, -8;
	selp.b32 	%r1259, %r204, %r1258, %p275;
	selp.b32 	%r1260, %r193, 0, %p272;
	selp.b32 	%r1261, %r197, %r1260, %p273;
	selp.b32 	%r1262, %r201, %r1261, %p274;
	selp.b32 	%r1263, %r205, %r1262, %p275;
	selp.b32 	%r1264, %r194, 0, %p272;
	selp.b32 	%r1265, %r198, %r1264, %p273;
	selp.b32 	%r1266, %r202, %r1265, %p274;
	selp.b32 	%r1267, %r206, %r1266, %p275;
	selp.b32 	%r1268, %r195, 0, %p272;
	selp.b32 	%r1269, %r199, %r1268, %p273;
	selp.b32 	%r1270, %r203, %r1269, %p274;
	selp.b32 	%r1271, %r207, %r1270, %p275;
	// begin inline asm
	mov.b32 %r869, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r880, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r868, %r1259, -2004318072;
	mov.u32 	%r1005, 983055;
	// begin inline asm
	lop3.b32 %r866, %r1005, %r868, %r869, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r870, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r871, %r869, %r870;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r874, %r866, %r871;
	// end inline asm
	mov.u32 	%r1016, 15728880;
	// begin inline asm
	lop3.b32 %r877, %r1016, %r868, %r880, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r881, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r882, %r880, %r881;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r885, %r877, %r882;
	// end inline asm
	// begin inline asm
	mov.b32 %r915, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r926, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r914, %r1263, -2004318072;
	// begin inline asm
	lop3.b32 %r912, %r1005, %r914, %r915, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r916, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r917, %r915, %r916;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r920, %r912, %r917;
	// end inline asm
	// begin inline asm
	lop3.b32 %r923, %r1016, %r914, %r926, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r927, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r928, %r926, %r927;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r931, %r923, %r928;
	// end inline asm
	// begin inline asm
	mov.b32 %r961, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r972, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r960, %r1267, -2004318072;
	// begin inline asm
	lop3.b32 %r958, %r1005, %r960, %r961, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r962, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r963, %r961, %r962;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r966, %r958, %r963;
	// end inline asm
	// begin inline asm
	lop3.b32 %r969, %r1016, %r960, %r972, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r973, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r974, %r972, %r973;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r977, %r969, %r974;
	// end inline asm
	// begin inline asm
	mov.b32 %r1007, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1018, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1006, %r1271, -2004318072;
	// begin inline asm
	lop3.b32 %r1004, %r1005, %r1006, %r1007, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1008, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1009, %r1007, %r1008;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1012, %r1004, %r1009;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1015, %r1016, %r1006, %r1018, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1019, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1020, %r1018, %r1019;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1023, %r1015, %r1020;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r153;
    mov.b32 {%r2re, %r2im}, %r874;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1048, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r885;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1051, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r153;
    mov.b32 {%r2re, %r2im}, %r920;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1054, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r931;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1057, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r153;
    mov.b32 {%r2re, %r2im}, %r966;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1060, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r977;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1063, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r153;
    mov.b32 {%r2re, %r2im}, %r1012;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1066, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r1023;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1069, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1127, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1072, %r1073}, {%r242, %r245}, {%r1048}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1079, %r1080}, {%r242, %r245}, {%r1051}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1086, %r1087}, {%r242, %r245}, {%r1054}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1093, %r1094}, {%r242, %r245}, {%r1057}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1100, %r1101}, {%r242, %r245}, {%r1060}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1107, %r1108}, {%r242, %r245}, {%r1063}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1114, %r1115}, {%r242, %r245}, {%r1066}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1121, %r1122}, {%r242, %r245}, {%r1069}, {%r1127, %r1127};
	// end inline asm
	@%p1 bra 	$L__BB0_204;
	bra.uni 	$L__BB0_203;
$L__BB0_204:                            // %pass5495
                                        //   in Loop: Header=BB0_202 Depth=2
	// begin inline asm
	neg.f16x2 %r1128, %r283;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1130, %r1128, %r1073;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1133, %r280, %r1072, %r1130;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1137, %r283;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1139, %r1137, %r1080;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1142, %r280, %r1079, %r1139;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1146, %r283;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1148, %r1146, %r1087;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1151, %r280, %r1086, %r1148;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1155, %r283;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1157, %r1155, %r1094;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1160, %r280, %r1093, %r1157;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1164, %r283;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1166, %r1164, %r1101;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1169, %r280, %r1100, %r1166;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1173, %r283;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1175, %r1173, %r1108;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1178, %r280, %r1107, %r1175;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1182, %r283;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1184, %r1182, %r1115;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1187, %r280, %r1114, %r1184;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1191, %r283;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1193, %r1191, %r1122;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1196, %r280, %r1121, %r1193;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1200, %r283, %r1072;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1203, %r280, %r1073, %r1200;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1207, %r283, %r1079;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1210, %r280, %r1080, %r1207;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1214, %r283, %r1086;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1217, %r280, %r1087, %r1214;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1221, %r283, %r1093;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1224, %r280, %r1094, %r1221;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1228, %r283, %r1100;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1231, %r280, %r1101, %r1228;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1235, %r283, %r1107;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1238, %r280, %r1108, %r1235;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1242, %r283, %r1114;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1245, %r280, %r1115, %r1242;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1249, %r283, %r1121;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1252, %r280, %r1122, %r1249;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1272, %r1273}, {%r327, %r330}, {%r1133, %r1203}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1281, %r1282}, {%r327, %r330}, {%r1142, %r1210}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1290, %r1291}, {%r327, %r330}, {%r1151, %r1217}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1299, %r1300}, {%r327, %r330}, {%r1160, %r1224}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1308, %r1309}, {%r327, %r330}, {%r1169, %r1231}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1317, %r1318}, {%r327, %r330}, {%r1178, %r1238}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1326, %r1327}, {%r327, %r330}, {%r1187, %r1245}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1335, %r1336}, {%r327, %r330}, {%r1196, %r1252}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	bar.sync 	0;
	ld.shared.u32 	%r1412, [%rd7];
	ld.shared.u32 	%r1419, [%rd8+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1429, %r1426}, {%r339, %r342}, {%r1412}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1438, %r1435}, {%r339, %r342}, {%r1419}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1422, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1424, %r1422, %r1426;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1427, %r373, %r1429, %r1424;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1431, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1433, %r1431, %r1435;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1436, %r373, %r1438, %r1433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1440, %r376, %r1429;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1443, %r373, %r1426, %r1440;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1447, %r376, %r1438;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1450, %r373, %r1435, %r1447;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1473, %r1476}, {%r415, %r418}, {%r1427, %r1443}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1480, %r1484}, {%r415, %r418}, {%r1436, %r1450}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1472, %r1473, %r1473;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1475, %r1476, %r1476, %r1472;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1479, %r1480, %r1480, %r1475;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1483, %r1484, %r1484, %r1479;
	// end inline asm
	mov.u32 	%r2069, 223677781;
	// begin inline asm
	fma.rn.f16x2 %r1487, %r2069, %r1483, %r3343;
	// end inline asm
	ld.shared.u32 	%r1495, [%rd45];
	ld.shared.u32 	%r1502, [%rd46];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1512, %r1509}, {%r339, %r342}, {%r1495}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1521, %r1518}, {%r339, %r342}, {%r1502}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1505, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1507, %r1505, %r1509;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1510, %r373, %r1512, %r1507;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1514, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1516, %r1514, %r1518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1519, %r373, %r1521, %r1516;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1523, %r376, %r1512;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1526, %r373, %r1509, %r1523;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1530, %r376, %r1521;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1533, %r373, %r1518, %r1530;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1556, %r1559}, {%r415, %r418}, {%r1510, %r1526}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1563, %r1567}, {%r415, %r418}, {%r1519, %r1533}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1555, %r1556, %r1556;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1558, %r1559, %r1559, %r1555;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1562, %r1563, %r1563, %r1558;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1566, %r1567, %r1567, %r1562;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1570, %r2069, %r1566, %r1487;
	// end inline asm
	ld.shared.u32 	%r1578, [%rd47];
	ld.shared.u32 	%r1585, [%rd48];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1595, %r1592}, {%r339, %r342}, {%r1578}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1604, %r1601}, {%r339, %r342}, {%r1585}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1588, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1590, %r1588, %r1592;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1593, %r373, %r1595, %r1590;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1597, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1599, %r1597, %r1601;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1602, %r373, %r1604, %r1599;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1606, %r376, %r1595;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1609, %r373, %r1592, %r1606;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1613, %r376, %r1604;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1616, %r373, %r1601, %r1613;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1639, %r1642}, {%r415, %r418}, {%r1593, %r1609}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1646, %r1650}, {%r415, %r418}, {%r1602, %r1616}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1638, %r1639, %r1639;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1641, %r1642, %r1642, %r1638;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1645, %r1646, %r1646, %r1641;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1649, %r1650, %r1650, %r1645;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1653, %r2069, %r1649, %r1570;
	// end inline asm
	ld.shared.u32 	%r1661, [%rd49];
	ld.shared.u32 	%r1668, [%rd50];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1678, %r1675}, {%r339, %r342}, {%r1661}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1687, %r1684}, {%r339, %r342}, {%r1668}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1671, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1673, %r1671, %r1675;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1676, %r373, %r1678, %r1673;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1680, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1682, %r1680, %r1684;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1685, %r373, %r1687, %r1682;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1689, %r376, %r1678;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1692, %r373, %r1675, %r1689;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1696, %r376, %r1687;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1699, %r373, %r1684, %r1696;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1722, %r1725}, {%r415, %r418}, {%r1676, %r1692}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1729, %r1733}, {%r415, %r418}, {%r1685, %r1699}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1721, %r1722, %r1722;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1724, %r1725, %r1725, %r1721;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1728, %r1729, %r1729, %r1724;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1732, %r1733, %r1733, %r1728;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1736, %r2069, %r1732, %r1653;
	// end inline asm
	ld.shared.u32 	%r1744, [%rd51];
	ld.shared.u32 	%r1751, [%rd52];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1761, %r1758}, {%r339, %r342}, {%r1744}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1770, %r1767}, {%r339, %r342}, {%r1751}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1754, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1756, %r1754, %r1758;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1759, %r373, %r1761, %r1756;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1763, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1765, %r1763, %r1767;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1768, %r373, %r1770, %r1765;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1772, %r376, %r1761;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1775, %r373, %r1758, %r1772;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1779, %r376, %r1770;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1782, %r373, %r1767, %r1779;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1805, %r1808}, {%r415, %r418}, {%r1759, %r1775}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1812, %r1816}, {%r415, %r418}, {%r1768, %r1782}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1804, %r1805, %r1805;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1807, %r1808, %r1808, %r1804;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1811, %r1812, %r1812, %r1807;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1815, %r1816, %r1816, %r1811;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1819, %r2069, %r1815, %r1736;
	// end inline asm
	ld.shared.u32 	%r1827, [%rd53];
	ld.shared.u32 	%r1834, [%rd54];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1844, %r1841}, {%r339, %r342}, {%r1827}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1853, %r1850}, {%r339, %r342}, {%r1834}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1837, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1839, %r1837, %r1841;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1842, %r373, %r1844, %r1839;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1846, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1848, %r1846, %r1850;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1851, %r373, %r1853, %r1848;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1855, %r376, %r1844;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1858, %r373, %r1841, %r1855;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1862, %r376, %r1853;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1865, %r373, %r1850, %r1862;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1888, %r1891}, {%r415, %r418}, {%r1842, %r1858}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1895, %r1899}, {%r415, %r418}, {%r1851, %r1865}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1887, %r1888, %r1888;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1890, %r1891, %r1891, %r1887;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1894, %r1895, %r1895, %r1890;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1898, %r1899, %r1899, %r1894;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1902, %r2069, %r1898, %r1819;
	// end inline asm
	ld.shared.u32 	%r1910, [%rd55];
	ld.shared.u32 	%r1917, [%rd56];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1927, %r1924}, {%r339, %r342}, {%r1910}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1936, %r1933}, {%r339, %r342}, {%r1917}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1920, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1922, %r1920, %r1924;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1925, %r373, %r1927, %r1922;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1929, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1931, %r1929, %r1933;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1934, %r373, %r1936, %r1931;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1938, %r376, %r1927;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1941, %r373, %r1924, %r1938;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1945, %r376, %r1936;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1948, %r373, %r1933, %r1945;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1971, %r1974}, {%r415, %r418}, {%r1925, %r1941}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1978, %r1982}, {%r415, %r418}, {%r1934, %r1948}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1970, %r1971, %r1971;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1973, %r1974, %r1974, %r1970;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1977, %r1978, %r1978, %r1973;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1981, %r1982, %r1982, %r1977;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1985, %r2069, %r1981, %r1902;
	// end inline asm
	ld.shared.u32 	%r1993, [%rd57];
	ld.shared.u32 	%r2000, [%rd58];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2010, %r2007}, {%r339, %r342}, {%r1993}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2019, %r2016}, {%r339, %r342}, {%r2000}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2003, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2005, %r2003, %r2007;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2008, %r373, %r2010, %r2005;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2012, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2014, %r2012, %r2016;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2017, %r373, %r2019, %r2014;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2021, %r376, %r2010;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2024, %r373, %r2007, %r2021;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2028, %r376, %r2019;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2031, %r373, %r2016, %r2028;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2054, %r2057}, {%r415, %r418}, {%r2008, %r2024}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2061, %r2065}, {%r415, %r418}, {%r2017, %r2031}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2053, %r2054, %r2054;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2056, %r2057, %r2057, %r2053;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2060, %r2061, %r2061, %r2056;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2064, %r2065, %r2065, %r2060;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3343, %r2069, %r2064, %r1985;
	// end inline asm
	add.s32 	%r3338, %r3338, 8;
	setp.ne.s32 	%p276, %r3338, 384;
	@%p276 bra 	$L__BB0_151;
// %bb.205:                             // %pass8895
                                        //   in Loop: Header=BB0_202 Depth=2
	shl.b32 	%r2073, %r3339, 20;
	or.b32  	%r2074, %r158, %r2073;
	cvt.u64.u32 	%rd210, %r2074;
	add.s64 	%rd211, %rd210, %rd9;
	shr.u64 	%rd212, %rd211, 34;
	add.s64 	%rd213, %rd211, %rd212;
	shr.s64 	%rd214, %rd213, 30;
	setp.lt.s64 	%p277, %rd211, 0;
	and.b64  	%rd215, %rd213, -1073741824;
	setp.ne.s64 	%p278, %rd215, %rd211;
	and.pred  	%p279, %p277, %p278;
	selp.u64 	%rd216, 1, 0, %p279;
	sub.s64 	%rd217, %rd216, %rd214;
	shl.b64 	%rd218, %rd217, 30;
	add.s64 	%rd219, %rd218, %rd211;
	shl.b64 	%rd220, %rd219, 2;
	add.s64 	%rd221, %rd4, %rd220;
	st.global.u32 	[%rd221], %r3343;
	add.s32 	%r3339, %r3339, 1;
	mov.u32 	%r3338, 0;
	mov.u32 	%r3343, %r3338;
	bra.uni 	$L__BB0_151;
$L__BB0_152:                            // %L20818.preheader
                                        //   in Loop: Header=BB0_184 Depth=1
	mov.u32 	%r3337, 16;
	bra.uni 	$L__BB0_153;
$L__BB0_154:                            // %L29295
                                        //   in Loop: Header=BB0_153 Depth=2
	bar.sync 	0;
	add.s32 	%r3337, %r3337, -8;
	setp.ne.s32 	%p289, %r3337, -16;
	@%p289 bra 	$L__BB0_153;
	bra.uni 	$L__BB0_155;
$L__BB0_153:                            // %L20818
                                        //   Parent Loop BB0_184 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p281, %r3337, 16;
	selp.b32 	%r3268, %r192, 0, %p281;
	setp.eq.s32 	%p282, %r3337, 8;
	selp.b32 	%r3269, %r196, %r3268, %p282;
	setp.eq.s32 	%p283, %r3337, 0;
	selp.b32 	%r3270, %r200, %r3269, %p283;
	setp.eq.s32 	%p284, %r3337, -8;
	selp.b32 	%r3271, %r204, %r3270, %p284;
	selp.b32 	%r3272, %r193, 0, %p281;
	selp.b32 	%r3273, %r197, %r3272, %p282;
	selp.b32 	%r3274, %r201, %r3273, %p283;
	selp.b32 	%r3275, %r205, %r3274, %p284;
	selp.b32 	%r3276, %r194, 0, %p281;
	selp.b32 	%r3277, %r198, %r3276, %p282;
	selp.b32 	%r3278, %r202, %r3277, %p283;
	selp.b32 	%r3279, %r206, %r3278, %p284;
	selp.b32 	%r3280, %r195, 0, %p281;
	selp.b32 	%r3281, %r199, %r3280, %p282;
	selp.b32 	%r3282, %r203, %r3281, %p283;
	selp.b32 	%r3283, %r207, %r3282, %p284;
	// begin inline asm
	mov.b32 %r2103, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2114, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r3284, %r3271, 8;
	xor.b32  	%r2113, %r3284, 8947848;
	// begin inline asm
	lop3.b32 %r2100, %r1005, %r2113, %r2103, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2104, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2105, %r2103, %r2104;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2108, %r2100, %r2105;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2111, %r1016, %r2113, %r2114, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2115, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2116, %r2114, %r2115;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2119, %r2111, %r2116;
	// end inline asm
	// begin inline asm
	mov.b32 %r2149, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2160, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r3285, %r3275, 8;
	xor.b32  	%r2159, %r3285, 8947848;
	// begin inline asm
	lop3.b32 %r2146, %r1005, %r2159, %r2149, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2150, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2151, %r2149, %r2150;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2154, %r2146, %r2151;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2157, %r1016, %r2159, %r2160, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2161, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2162, %r2160, %r2161;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2165, %r2157, %r2162;
	// end inline asm
	// begin inline asm
	mov.b32 %r2195, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2206, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r3286, %r3279, 8;
	xor.b32  	%r2205, %r3286, 8947848;
	// begin inline asm
	lop3.b32 %r2192, %r1005, %r2205, %r2195, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2196, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2197, %r2195, %r2196;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2200, %r2192, %r2197;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2203, %r1016, %r2205, %r2206, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2207, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2208, %r2206, %r2207;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2211, %r2203, %r2208;
	// end inline asm
	// begin inline asm
	mov.b32 %r2241, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2252, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r3287, %r3283, 8;
	xor.b32  	%r2251, %r3287, 8947848;
	// begin inline asm
	lop3.b32 %r2238, %r1005, %r2251, %r2241, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2242, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2243, %r2241, %r2242;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2246, %r2238, %r2243;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2249, %r1016, %r2251, %r2252, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2253, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2254, %r2252, %r2253;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2257, %r2249, %r2254;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r153;
    mov.b32 {%r2re, %r2im}, %r2108;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2260, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2119;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2263, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r153;
    mov.b32 {%r2re, %r2im}, %r2154;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2266, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2165;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2269, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r153;
    mov.b32 {%r2re, %r2im}, %r2200;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2272, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2211;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2275, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r153;
    mov.b32 {%r2re, %r2im}, %r2246;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2278, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2257;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2281, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2347, %r2344}, {%r242, %r245}, {%r2260}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2356, %r2353}, {%r242, %r245}, {%r2263}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2365, %r2362}, {%r242, %r245}, {%r2266}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2374, %r2371}, {%r242, %r245}, {%r2269}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2383, %r2380}, {%r242, %r245}, {%r2272}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2392, %r2389}, {%r242, %r245}, {%r2275}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2401, %r2398}, {%r242, %r245}, {%r2278}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2410, %r2407}, {%r242, %r245}, {%r2281}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2340, %r283;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2342, %r2340, %r2344;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2345, %r280, %r2347, %r2342;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2349, %r283;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2351, %r2349, %r2353;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2354, %r280, %r2356, %r2351;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2358, %r283;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2360, %r2358, %r2362;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2363, %r280, %r2365, %r2360;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2367, %r283;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2369, %r2367, %r2371;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2372, %r280, %r2374, %r2369;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2376, %r283;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2378, %r2376, %r2380;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2381, %r280, %r2383, %r2378;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2385, %r283;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2387, %r2385, %r2389;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2390, %r280, %r2392, %r2387;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2394, %r283;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2396, %r2394, %r2398;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2399, %r280, %r2401, %r2396;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2403, %r283;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2405, %r2403, %r2407;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2408, %r280, %r2410, %r2405;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2412, %r283, %r2347;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2415, %r280, %r2344, %r2412;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2419, %r283, %r2356;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2422, %r280, %r2353, %r2419;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2426, %r283, %r2365;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2429, %r280, %r2362, %r2426;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2433, %r283, %r2374;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2436, %r280, %r2371, %r2433;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2440, %r283, %r2383;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2443, %r280, %r2380, %r2440;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2447, %r283, %r2392;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2450, %r280, %r2389, %r2447;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2454, %r283, %r2401;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2457, %r280, %r2398, %r2454;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2461, %r283, %r2410;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2464, %r280, %r2407, %r2461;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2468, %r2469}, {%r327, %r330}, {%r2345, %r2415}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2477, %r2478}, {%r327, %r330}, {%r2354, %r2422}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2486, %r2487}, {%r327, %r330}, {%r2363, %r2429}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2495, %r2496}, {%r327, %r330}, {%r2372, %r2436}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2504, %r2505}, {%r327, %r330}, {%r2381, %r2443}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2513, %r2514}, {%r327, %r330}, {%r2390, %r2450}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2522, %r2523}, {%r327, %r330}, {%r2399, %r2457}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2531, %r2532}, {%r327, %r330}, {%r2408, %r2464}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	bar.sync 	0;
	ld.shared.u32 	%r2608, [%rd7];
	ld.shared.u32 	%r2615, [%rd8+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2625, %r2622}, {%r339, %r342}, {%r2608}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2634, %r2631}, {%r339, %r342}, {%r2615}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2618, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2620, %r2618, %r2622;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2623, %r373, %r2625, %r2620;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2627, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2629, %r2627, %r2631;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2632, %r373, %r2634, %r2629;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2636, %r376, %r2625;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2639, %r373, %r2622, %r2636;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2643, %r376, %r2634;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2646, %r373, %r2631, %r2643;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2669, %r2672}, {%r415, %r418}, {%r2623, %r2639}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2676, %r2680}, {%r415, %r418}, {%r2632, %r2646}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2668, %r2669, %r2669;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2671, %r2672, %r2672, %r2668;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2675, %r2676, %r2676, %r2671;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2679, %r2680, %r2680, %r2675;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2683, %r2069, %r2679, %r3343;
	// end inline asm
	ld.shared.u32 	%r2691, [%rd45];
	ld.shared.u32 	%r2698, [%rd46];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2708, %r2705}, {%r339, %r342}, {%r2691}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2717, %r2714}, {%r339, %r342}, {%r2698}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2701, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2703, %r2701, %r2705;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2706, %r373, %r2708, %r2703;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2710, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2712, %r2710, %r2714;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2715, %r373, %r2717, %r2712;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2719, %r376, %r2708;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2722, %r373, %r2705, %r2719;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2726, %r376, %r2717;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2729, %r373, %r2714, %r2726;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2752, %r2755}, {%r415, %r418}, {%r2706, %r2722}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2759, %r2763}, {%r415, %r418}, {%r2715, %r2729}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2751, %r2752, %r2752;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2754, %r2755, %r2755, %r2751;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2758, %r2759, %r2759, %r2754;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2762, %r2763, %r2763, %r2758;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2766, %r2069, %r2762, %r2683;
	// end inline asm
	ld.shared.u32 	%r2774, [%rd47];
	ld.shared.u32 	%r2781, [%rd48];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2791, %r2788}, {%r339, %r342}, {%r2774}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2800, %r2797}, {%r339, %r342}, {%r2781}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2784, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2786, %r2784, %r2788;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2789, %r373, %r2791, %r2786;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2793, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2795, %r2793, %r2797;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2798, %r373, %r2800, %r2795;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2802, %r376, %r2791;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2805, %r373, %r2788, %r2802;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2809, %r376, %r2800;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2812, %r373, %r2797, %r2809;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2835, %r2838}, {%r415, %r418}, {%r2789, %r2805}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2842, %r2846}, {%r415, %r418}, {%r2798, %r2812}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2834, %r2835, %r2835;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2837, %r2838, %r2838, %r2834;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2841, %r2842, %r2842, %r2837;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2845, %r2846, %r2846, %r2841;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2849, %r2069, %r2845, %r2766;
	// end inline asm
	ld.shared.u32 	%r2857, [%rd49];
	ld.shared.u32 	%r2864, [%rd50];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2874, %r2871}, {%r339, %r342}, {%r2857}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2883, %r2880}, {%r339, %r342}, {%r2864}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2867, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2869, %r2867, %r2871;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2872, %r373, %r2874, %r2869;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2876, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2878, %r2876, %r2880;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2881, %r373, %r2883, %r2878;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2885, %r376, %r2874;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2888, %r373, %r2871, %r2885;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2892, %r376, %r2883;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2895, %r373, %r2880, %r2892;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2918, %r2921}, {%r415, %r418}, {%r2872, %r2888}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2925, %r2929}, {%r415, %r418}, {%r2881, %r2895}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2917, %r2918, %r2918;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2920, %r2921, %r2921, %r2917;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2924, %r2925, %r2925, %r2920;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2928, %r2929, %r2929, %r2924;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2932, %r2069, %r2928, %r2849;
	// end inline asm
	ld.shared.u32 	%r2940, [%rd51];
	ld.shared.u32 	%r2947, [%rd52];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2957, %r2954}, {%r339, %r342}, {%r2940}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2966, %r2963}, {%r339, %r342}, {%r2947}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2950, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2952, %r2950, %r2954;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2955, %r373, %r2957, %r2952;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2959, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2961, %r2959, %r2963;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2964, %r373, %r2966, %r2961;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2968, %r376, %r2957;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2971, %r373, %r2954, %r2968;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2975, %r376, %r2966;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2978, %r373, %r2963, %r2975;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3001, %r3004}, {%r415, %r418}, {%r2955, %r2971}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3008, %r3012}, {%r415, %r418}, {%r2964, %r2978}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3000, %r3001, %r3001;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3003, %r3004, %r3004, %r3000;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3007, %r3008, %r3008, %r3003;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3011, %r3012, %r3012, %r3007;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3015, %r2069, %r3011, %r2932;
	// end inline asm
	ld.shared.u32 	%r3023, [%rd53];
	ld.shared.u32 	%r3030, [%rd54];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3040, %r3037}, {%r339, %r342}, {%r3023}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3049, %r3046}, {%r339, %r342}, {%r3030}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3033, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3035, %r3033, %r3037;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3038, %r373, %r3040, %r3035;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3042, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3044, %r3042, %r3046;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3047, %r373, %r3049, %r3044;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3051, %r376, %r3040;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3054, %r373, %r3037, %r3051;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3058, %r376, %r3049;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3061, %r373, %r3046, %r3058;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3084, %r3087}, {%r415, %r418}, {%r3038, %r3054}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3091, %r3095}, {%r415, %r418}, {%r3047, %r3061}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3083, %r3084, %r3084;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3086, %r3087, %r3087, %r3083;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3090, %r3091, %r3091, %r3086;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3094, %r3095, %r3095, %r3090;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3098, %r2069, %r3094, %r3015;
	// end inline asm
	ld.shared.u32 	%r3106, [%rd55];
	ld.shared.u32 	%r3113, [%rd56];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3123, %r3120}, {%r339, %r342}, {%r3106}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3132, %r3129}, {%r339, %r342}, {%r3113}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3116, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3118, %r3116, %r3120;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3121, %r373, %r3123, %r3118;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3125, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3127, %r3125, %r3129;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3130, %r373, %r3132, %r3127;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3134, %r376, %r3123;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3137, %r373, %r3120, %r3134;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3141, %r376, %r3132;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3144, %r373, %r3129, %r3141;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3167, %r3170}, {%r415, %r418}, {%r3121, %r3137}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3174, %r3178}, {%r415, %r418}, {%r3130, %r3144}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3166, %r3167, %r3167;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3169, %r3170, %r3170, %r3166;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3173, %r3174, %r3174, %r3169;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3177, %r3178, %r3178, %r3173;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3181, %r2069, %r3177, %r3098;
	// end inline asm
	ld.shared.u32 	%r3189, [%rd57];
	ld.shared.u32 	%r3196, [%rd58];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3206, %r3203}, {%r339, %r342}, {%r3189}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3215, %r3212}, {%r339, %r342}, {%r3196}, {%r1127, %r1127};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3199, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3201, %r3199, %r3203;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3204, %r373, %r3206, %r3201;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3208, %r376;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3210, %r3208, %r3212;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3213, %r373, %r3215, %r3210;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3217, %r376, %r3206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3220, %r373, %r3203, %r3217;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3224, %r376, %r3215;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3227, %r373, %r3212, %r3224;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3250, %r3253}, {%r415, %r418}, {%r3204, %r3220}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3257, %r3261}, {%r415, %r418}, {%r3213, %r3227}, {%r1127, %r1127}, %r159, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3249, %r3250, %r3250;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3252, %r3253, %r3253, %r3249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3256, %r3257, %r3257, %r3252;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3260, %r3261, %r3261, %r3256;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3343, %r2069, %r3260, %r3181;
	// end inline asm
	add.s32 	%r3338, %r3338, 8;
	setp.eq.s32 	%p285, %r3338, 384;
	@%p285 bra 	$L__BB0_206;
	bra.uni 	$L__BB0_154;
$L__BB0_206:                            // %pass12432
                                        //   in Loop: Header=BB0_153 Depth=2
	shl.b32 	%r3289, %r3339, 20;
	or.b32  	%r3290, %r158, %r3289;
	cvt.u64.u32 	%rd222, %r3290;
	add.s64 	%rd223, %rd222, %rd9;
	shr.u64 	%rd224, %rd223, 34;
	add.s64 	%rd225, %rd223, %rd224;
	shr.s64 	%rd226, %rd225, 30;
	setp.lt.s64 	%p286, %rd223, 0;
	and.b64  	%rd227, %rd225, -1073741824;
	setp.ne.s64 	%p287, %rd227, %rd223;
	and.pred  	%p288, %p286, %p287;
	selp.u64 	%rd228, 1, 0, %p288;
	sub.s64 	%rd229, %rd228, %rd226;
	shl.b64 	%rd230, %rd229, 30;
	add.s64 	%rd231, %rd230, %rd223;
	shl.b64 	%rd232, %rd231, 2;
	add.s64 	%rd233, %rd4, %rd232;
	st.global.u32 	[%rd233], %r3343;
	add.s32 	%r3339, %r3339, 1;
	mov.u32 	%r3338, %r1127;
	mov.u32 	%r3343, %r1127;
	bra.uni 	$L__BB0_154;
$L__BB0_156:                            // %L29326
	mov.u32 	%r3291, 0;
	st.global.u32 	[%rd6], %r3291;
	ret;
$L__BB0_203:                            // %post_box_union
	mov.u64 	%rd208, exception2381;
	cvta.global.u64 	%rd209, %rd208;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd209;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r212;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_135:                            // %L6850
	mov.u32 	%r3307, 5;
	st.global.u32 	[%rd6], %r3307;
	mov.u64 	%rd264, exception2333;
	cvta.global.u64 	%rd265, %rd264;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd265;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r212;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_136:                            // %L7010
	mov.u32 	%r3306, 5;
	st.global.u32 	[%rd6], %r3306;
	mov.u64 	%rd262, exception2333;
	cvta.global.u64 	%rd263, %rd262;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd263;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r212;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_137:                            // %L7170
	mov.u32 	%r3305, 5;
	st.global.u32 	[%rd6], %r3305;
	mov.u64 	%rd260, exception2333;
	cvta.global.u64 	%rd261, %rd260;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd261;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r212;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_138:                            // %L7330
	mov.u32 	%r3304, 5;
	st.global.u32 	[%rd6], %r3304;
	mov.u64 	%rd258, exception2333;
	cvta.global.u64 	%rd259, %rd258;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd259;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r212;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_139:                            // %L7490
	mov.u32 	%r3303, 5;
	st.global.u32 	[%rd6], %r3303;
	mov.u64 	%rd256, exception2333;
	cvta.global.u64 	%rd257, %rd256;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd257;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r212;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_140:                            // %L7650
	mov.u32 	%r3302, 5;
	st.global.u32 	[%rd6], %r3302;
	mov.u64 	%rd254, exception2333;
	cvta.global.u64 	%rd255, %rd254;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd255;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r212;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_141:                            // %L7810
	mov.u32 	%r3301, 5;
	st.global.u32 	[%rd6], %r3301;
	mov.u64 	%rd252, exception2333;
	cvta.global.u64 	%rd253, %rd252;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd253;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r212;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_142:                            // %L7970
	mov.u32 	%r3300, 5;
	st.global.u32 	[%rd6], %r3300;
	mov.u64 	%rd250, exception2333;
	cvta.global.u64 	%rd251, %rd250;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd251;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r212;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_143:                            // %L8130
	mov.u32 	%r3299, 5;
	st.global.u32 	[%rd6], %r3299;
	mov.u64 	%rd248, exception2333;
	cvta.global.u64 	%rd249, %rd248;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd249;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r212;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_144:                            // %L8290
	mov.u32 	%r3298, 5;
	st.global.u32 	[%rd6], %r3298;
	mov.u64 	%rd246, exception2333;
	cvta.global.u64 	%rd247, %rd246;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd247;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r212;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L8450
	mov.u32 	%r3297, 5;
	st.global.u32 	[%rd6], %r3297;
	mov.u64 	%rd244, exception2333;
	cvta.global.u64 	%rd245, %rd244;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd245;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r212;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L8610
	mov.u32 	%r3296, 5;
	st.global.u32 	[%rd6], %r3296;
	mov.u64 	%rd242, exception2333;
	cvta.global.u64 	%rd243, %rd242;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd243;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r212;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L8770
	mov.u32 	%r3295, 5;
	st.global.u32 	[%rd6], %r3295;
	mov.u64 	%rd240, exception2333;
	cvta.global.u64 	%rd241, %rd240;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd241;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r212;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L8930
	mov.u32 	%r3294, 5;
	st.global.u32 	[%rd6], %r3294;
	mov.u64 	%rd238, exception2333;
	cvta.global.u64 	%rd239, %rd238;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd239;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r212;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L9090
	mov.u32 	%r3293, 5;
	st.global.u32 	[%rd6], %r3293;
	mov.u64 	%rd236, exception2333;
	cvta.global.u64 	%rd237, %rd236;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd237;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r212;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L9250
	mov.u32 	%r3292, 5;
	st.global.u32 	[%rd6], %r3292;
	mov.u64 	%rd234, exception2333;
	cvta.global.u64 	%rd235, %rd234;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd235;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r212;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L169
	mov.u32 	%r3309, 2;
	st.global.u32 	[%rd6], %r3309;
	mov.u64 	%rd268, exception2333;
	cvta.global.u64 	%rd269, %rd268;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd269;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r212;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_12:                             // %L312
	mov.u32 	%r3308, 3;
	st.global.u32 	[%rd6], %r3308;
	mov.u64 	%rd266, exception2333;
	cvta.global.u64 	%rd267, %rd266;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd267;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r212;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd65, exception1;
	cvta.global.u64 	%rd66, %rd65;
	{ // callseq 45, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd66;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 45
	{ // callseq 46, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r212;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 46
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_134:                            // %L1159
	add.u64 	%rd64, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r1, %r2};
	st.local.v2.u32 	[%rd5+8], {%r4, %r85};
	st.local.u32 	[%rd5+16], %r86;
	mov.u64 	%rd70, __unnamed_1;
	cvta.global.u64 	%rd71, %rd70;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd71;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd64;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r428, [retval0+0];
	} // callseq 47
	mov.u32 	%r430, 4;
	st.global.u32 	[%rd6], %r430;
	mov.u64 	%rd73, exception2333;
	cvta.global.u64 	%rd74, %rd73;
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd74;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 48
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r212;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 49
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
