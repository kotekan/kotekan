// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception2333[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception2381[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 512, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<295>;
	.reg .b16 	%rs<97>;
	.reg .b32 	%r<3350>;
	.reg .f32 	%f<752>;
	.reg .b64 	%rd<266>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r213, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd59, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r222, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r222, 34943;
	@%p2 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd60, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r214, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %ctaid.x;
	shl.b32 	%r4, %r3, 9;
	mov.u32 	%r5, %tid.x;
	or.b32  	%r223, %r4, %r5;
	or.b32  	%r224, %r223, %r2;
	mul.wide.u32 	%rd67, %r224, 4;
	add.s64 	%rd6, %rd60, %rd67;
	mov.u32 	%r225, 1;
	st.global.u32 	[%rd6], %r225;
	setp.gt.u32 	%p3, %r214, 32767;
	@%p3 bra 	$L__BB0_6;
// %bb.3:                               // %L122
	ld.param.u32 	%r215, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p4, %r215, %r214;
	setp.gt.s32 	%p5, %r215, 65535;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_6;
// %bb.4:                               // %L129
	ld.param.u32 	%r216, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r215, %r214;
	and.b32  	%r226, %r6, 63;
	setp.ne.s32 	%p7, %r226, 0;
	setp.gt.u32 	%p8, %r216, 511;
	or.pred  	%p9, %p7, %p8;
	@%p9 bra 	$L__BB0_6;
// %bb.5:                               // %L140
	ld.param.u32 	%r217, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p10, %r217, %r216;
	setp.lt.s32 	%p11, %r217, 1024;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r227, %r217, %r216;
	mul.hi.s32 	%r228, %r6, 1374389535;
	shr.u32 	%r229, %r228, 31;
	shr.s32 	%r230, %r228, 7;
	add.s32 	%r231, %r230, %r229;
	setp.eq.s32 	%p13, %r227, %r231;
	@%p13 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L262
	ld.param.u32 	%r218, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p14, %r218, 0;
	@%p14 bra 	$L__BB0_12;
// %bb.9:                               // %L264
	ld.param.u32 	%r220, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	ld.param.u32 	%r219, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p15, %r219, %r218;
	setp.gt.s32 	%p16, %r219, 64;
	or.pred  	%p17, %p15, %p16;
	setp.lt.s32 	%p18, %r220, 0;
	or.pred  	%p19, %p17, %p18;
	@%p19 bra 	$L__BB0_12;
// %bb.10:                              // %L280
	ld.param.u32 	%r221, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p20, %r221, %r220;
	setp.gt.s32 	%p21, %r221, 2048;
	or.pred  	%p22, %p20, %p21;
	@%p22 bra 	$L__BB0_12;
// %bb.11:                              // %L290
	sub.s32 	%r232, %r221, %r220;
	sub.s32 	%r233, %r219, %r218;
	setp.eq.s32 	%p23, %r232, %r233;
	@%p23 bra 	$L__BB0_157;
	bra.uni 	$L__BB0_12;
$L__BB0_157:                            // %pass162
	and.b32  	%r127, %r5, 3;
	shr.u32 	%r128, %r5, 2;
	mul.lo.s32 	%r234, %r127, %r128;
	and.b32  	%r235, %r234, 7;
	cvt.rn.f32.s32 	%f185, %r235;
	mov.f32 	%f186, 0f40800000;
	div.approx.f32 	%f151, %f185, %f186;
	abs.f32 	%f750, %f151;
	setp.lt.f32 	%p24, %f750, 0f40000000;
	mov.f32 	%f703, 0f40000000;
	setp.gtu.f32 	%p290, %f750, 0f4B800000;
	mov.f32 	%f746, %f750;
	@%p24 bra 	$L__BB0_169;
// %bb.158:
	@%p290 bra 	$L__BB0_165;
	bra.uni 	$L__BB0_159;
$L__BB0_165:
	mov.b32 	%r130, %f750;
	and.b32  	%r236, %r130, 8388607;
	or.b32  	%r3345, %r236, 1065353216;
	mov.b32 	%f745, %r3345;
	add.s32 	%r237, %r130, -1073741824;
	and.b32  	%r3346, %r237, -8388608;
	setp.eq.s32 	%p31, %r3346, 0;
	@%p31 bra 	$L__BB0_168;
// %bb.166:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f196, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f195,%f196;
	// end inline asm
$L__BB0_167:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r238, %r3346, 192937984;
	add.s32 	%r239, %r3345, %r238;
	mov.b32 	%f197, %r239;
	mul.f32 	%f198, %f195, %f197;
	sub.f32 	%f199, %f197, %f198;
	fma.rn.f32 	%f200, %f199, %f195, %f198;
	sub.f32 	%f201, %f197, %f200;
	fma.rz.f32 	%f202, %f201, %f195, %f200;
	cvt.rzi.f32.f32 	%f203, %f202;
	sub.f32 	%f745, %f197, %f203;
	sub.s32 	%r3346, %r3346, %r238;
	mov.b32 	%r3345, %f745;
	setp.ne.s32 	%p32, %r3346, 0;
	setp.ne.s32 	%p33, %r3345, 0;
	and.pred  	%p34, %p32, %p33;
	@%p34 bra 	$L__BB0_167;
$L__BB0_168:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p35, %r130, 2139095039;
	selp.f32 	%f204, 0f7FFFFFFF, 0f4B800000, %p35;
	mul.f32 	%f205, %f745, 0f34000000;
	mul.f32 	%f746, %f204, %f205;
	bra.uni 	$L__BB0_169;
$L__BB0_159:                            // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f188, %f750, %f703;
	cvt.rzi.f32.f32 	%f744, %f188;
	fma.rn.f32 	%f154, %f744, 0fC0000000, %f750;
	mov.b32 	%r129, %f154;
	setp.lt.u32 	%p26, %r129, 1073741824;
	@%p26 bra 	$L__BB0_164;
// %bb.160:
	setp.lt.u32 	%p27, %r129, -2147483647;
	@%p27 bra 	$L__BB0_162;
// %bb.161:
	add.f32 	%f193, %f744, 0fBF800000;
	setp.lt.f32 	%p30, %f154, 0fC0000000;
	add.f32 	%f194, %f193, 0fBF800000;
	selp.f32 	%f744, %f194, %f193, %p30;
	bra.uni 	$L__BB0_164;
$L__BB0_162:
	add.f32 	%f744, %f744, 0f3F800000;
	setp.ltu.f32 	%p28, %f154, 0f40800000;
	@%p28 bra 	$L__BB0_164;
// %bb.163:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f189, %f744, 0f3F800000;
	fma.rn.f32 	%f191, %f703, 0fC0400000, %f154;
	setp.ge.f32 	%p29, %f191, 0f00000000;
	add.f32 	%f192, %f189, 0f3F800000;
	selp.f32 	%f744, %f192, %f189, %p29;
$L__BB0_164:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f746, %f744, 0fC0000000, %f750;
$L__BB0_169:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f206, %f746;
	setp.gtu.f32 	%p36, %f206, 0f7F800000;
	mov.b32 	%r240, %f151;
	and.b32  	%r137, %r240, -2147483648;
	@%p36 bra 	$L__BB0_171;
// %bb.170:
	mov.b32 	%r241, %f746;
	or.b32  	%r242, %r137, %r241;
	mov.b32 	%f746, %r242;
$L__BB0_171:                            // %__nv_fmodf.exit
	shl.b32 	%r140, %r5, 1;
	and.b32  	%r257, %r140, 2;
	mul.lo.s32 	%r141, %r257, %r128;
	cvt.rn.f32.s32 	%f239, %r141;
	mov.f32 	%f240, 0f41800000;
	div.approx.f32 	%f168, %f239, %f240;
	abs.f32 	%f726, %f168;
	setp.lt.f32 	%p44, %f726, 0f40000000;
	setp.gtu.f32 	%p291, %f726, 0f4B800000;
	mov.f32 	%f706, %f726;
	@%p44 bra 	$L__BB0_24;
// %bb.13:
	@%p291 bra 	$L__BB0_20;
	bra.uni 	$L__BB0_14;
$L__BB0_20:
	mov.b32 	%r8, %f726;
	and.b32  	%r258, %r8, 8388607;
	or.b32  	%r3311, %r258, 1065353216;
	mov.b32 	%f705, %r3311;
	add.s32 	%r259, %r8, -1073741824;
	and.b32  	%r3312, %r259, -8388608;
	setp.eq.s32 	%p51, %r3312, 0;
	@%p51 bra 	$L__BB0_23;
// %bb.21:                              // %__nv_fmaf_rn.exit4.i.i.i2331.preheader
	mov.f32 	%f250, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f249,%f250;
	// end inline asm
$L__BB0_22:                             // %__nv_fmaf_rn.exit4.i.i.i2331
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r260, %r3312, 192937984;
	add.s32 	%r261, %r3311, %r260;
	mov.b32 	%f251, %r261;
	mul.f32 	%f252, %f249, %f251;
	sub.f32 	%f253, %f251, %f252;
	fma.rn.f32 	%f254, %f253, %f249, %f252;
	sub.f32 	%f255, %f251, %f254;
	fma.rz.f32 	%f256, %f255, %f249, %f254;
	cvt.rzi.f32.f32 	%f257, %f256;
	sub.f32 	%f705, %f251, %f257;
	sub.s32 	%r3312, %r3312, %r260;
	mov.b32 	%r3311, %f705;
	setp.ne.s32 	%p52, %r3312, 0;
	setp.ne.s32 	%p53, %r3311, 0;
	and.pred  	%p54, %p52, %p53;
	@%p54 bra 	$L__BB0_22;
$L__BB0_23:                             // %__internal_fmodf_slowpath_mod.exit.i.i2333
	setp.gt.u32 	%p55, %r8, 2139095039;
	selp.f32 	%f258, 0f7FFFFFFF, 0f4B800000, %p55;
	mul.f32 	%f259, %f705, 0f34000000;
	mul.f32 	%f706, %f258, %f259;
	bra.uni 	$L__BB0_24;
$L__BB0_14:                             // %__nv_fast_fdividef.exit.i.i.i2310
	div.approx.f32 	%f242, %f726, %f703;
	cvt.rzi.f32.f32 	%f704, %f242;
	fma.rn.f32 	%f2, %f704, 0fC0000000, %f726;
	mov.b32 	%r7, %f2;
	setp.lt.u32 	%p46, %r7, 1073741824;
	@%p46 bra 	$L__BB0_19;
// %bb.15:
	setp.lt.u32 	%p47, %r7, -2147483647;
	@%p47 bra 	$L__BB0_17;
// %bb.16:
	add.f32 	%f247, %f704, 0fBF800000;
	setp.lt.f32 	%p50, %f2, 0fC0000000;
	add.f32 	%f248, %f247, 0fBF800000;
	selp.f32 	%f704, %f248, %f247, %p50;
	bra.uni 	$L__BB0_19;
$L__BB0_17:
	add.f32 	%f704, %f704, 0f3F800000;
	setp.ltu.f32 	%p48, %f2, 0f40800000;
	@%p48 bra 	$L__BB0_19;
// %bb.18:                              // %__nv_fmaf_rn.exit.i.i.i2314
	add.f32 	%f243, %f704, 0f3F800000;
	fma.rn.f32 	%f245, %f703, 0fC0400000, %f2;
	setp.ge.f32 	%p49, %f245, 0f00000000;
	add.f32 	%f246, %f243, 0f3F800000;
	selp.f32 	%f704, %f246, %f243, %p49;
$L__BB0_19:                             // %__internal_fmodf_fastpath_quot.exit.i.i2317
	fma.rn.f32 	%f706, %f704, 0fC0000000, %f726;
$L__BB0_24:                             // %__internal_fmodf_kernel.exit.i2336
	abs.f32 	%f260, %f706;
	setp.gtu.f32 	%p56, %f260, 0f7F800000;
	mov.b32 	%r262, %f168;
	and.b32  	%r15, %r262, -2147483648;
	@%p56 bra 	$L__BB0_26;
// %bb.25:
	mov.b32 	%r263, %f706;
	or.b32  	%r264, %r15, %r263;
	mov.b32 	%f706, %r264;
$L__BB0_26:                             // %__nv_fmodf.exit2337
	add.s32 	%r273, %r141, %r128;
	cvt.rn.f32.s32 	%f291, %r273;
	div.approx.f32 	%f18, %f291, %f240;
	abs.f32 	%f730, %f18;
	setp.lt.f32 	%p64, %f730, 0f40000000;
	setp.gtu.f32 	%p292, %f730, 0f4B800000;
	mov.f32 	%f710, %f730;
	@%p64 bra 	$L__BB0_38;
// %bb.27:
	@%p292 bra 	$L__BB0_34;
	bra.uni 	$L__BB0_28;
$L__BB0_34:
	mov.b32 	%r17, %f730;
	and.b32  	%r274, %r17, 8388607;
	or.b32  	%r3313, %r274, 1065353216;
	mov.b32 	%f709, %r3313;
	add.s32 	%r275, %r17, -1073741824;
	and.b32  	%r3314, %r275, -8388608;
	setp.eq.s32 	%p71, %r3314, 0;
	@%p71 bra 	$L__BB0_37;
// %bb.35:                              // %__nv_fmaf_rn.exit4.i.i.i2362.preheader
	mov.f32 	%f302, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f301,%f302;
	// end inline asm
$L__BB0_36:                             // %__nv_fmaf_rn.exit4.i.i.i2362
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r276, %r3314, 192937984;
	add.s32 	%r277, %r3313, %r276;
	mov.b32 	%f303, %r277;
	mul.f32 	%f304, %f301, %f303;
	sub.f32 	%f305, %f303, %f304;
	fma.rn.f32 	%f306, %f305, %f301, %f304;
	sub.f32 	%f307, %f303, %f306;
	fma.rz.f32 	%f308, %f307, %f301, %f306;
	cvt.rzi.f32.f32 	%f309, %f308;
	sub.f32 	%f709, %f303, %f309;
	sub.s32 	%r3314, %r3314, %r276;
	mov.b32 	%r3313, %f709;
	setp.ne.s32 	%p72, %r3314, 0;
	setp.ne.s32 	%p73, %r3313, 0;
	and.pred  	%p74, %p72, %p73;
	@%p74 bra 	$L__BB0_36;
$L__BB0_37:                             // %__internal_fmodf_slowpath_mod.exit.i.i2364
	setp.gt.u32 	%p75, %r17, 2139095039;
	selp.f32 	%f310, 0f7FFFFFFF, 0f4B800000, %p75;
	mul.f32 	%f311, %f709, 0f34000000;
	mul.f32 	%f710, %f310, %f311;
	bra.uni 	$L__BB0_38;
$L__BB0_28:                             // %__nv_fast_fdividef.exit.i.i.i2341
	div.approx.f32 	%f294, %f730, %f703;
	cvt.rzi.f32.f32 	%f708, %f294;
	fma.rn.f32 	%f21, %f708, 0fC0000000, %f730;
	mov.b32 	%r16, %f21;
	setp.lt.u32 	%p66, %r16, 1073741824;
	@%p66 bra 	$L__BB0_33;
// %bb.29:
	setp.lt.u32 	%p67, %r16, -2147483647;
	@%p67 bra 	$L__BB0_31;
// %bb.30:
	add.f32 	%f299, %f708, 0fBF800000;
	setp.lt.f32 	%p70, %f21, 0fC0000000;
	add.f32 	%f300, %f299, 0fBF800000;
	selp.f32 	%f708, %f300, %f299, %p70;
	bra.uni 	$L__BB0_33;
$L__BB0_31:
	add.f32 	%f708, %f708, 0f3F800000;
	setp.ltu.f32 	%p68, %f21, 0f40800000;
	@%p68 bra 	$L__BB0_33;
// %bb.32:                              // %__nv_fmaf_rn.exit.i.i.i2345
	add.f32 	%f295, %f708, 0f3F800000;
	fma.rn.f32 	%f297, %f703, 0fC0400000, %f21;
	setp.ge.f32 	%p69, %f297, 0f00000000;
	add.f32 	%f298, %f295, 0f3F800000;
	selp.f32 	%f708, %f298, %f295, %p69;
$L__BB0_33:                             // %__internal_fmodf_fastpath_quot.exit.i.i2348
	fma.rn.f32 	%f710, %f708, 0fC0000000, %f730;
$L__BB0_38:                             // %__internal_fmodf_kernel.exit.i2367
	abs.f32 	%f312, %f710;
	setp.gtu.f32 	%p76, %f312, 0f7F800000;
	mov.b32 	%r278, %f18;
	and.b32  	%r24, %r278, -2147483648;
	@%p76 bra 	$L__BB0_40;
// %bb.39:
	mov.b32 	%r279, %f710;
	or.b32  	%r280, %r24, %r279;
	mov.b32 	%f710, %r280;
$L__BB0_40:                             // %__nv_fmodf.exit2368
	mul.lo.s32 	%r27, %r140, %r128;
	and.b32  	%r295, %r27, 2;
	cvt.rn.f32.s32 	%f345, %r295;
	div.approx.f32 	%f35, %f345, %f703;
	abs.f32 	%f734, %f35;
	setp.lt.f32 	%p84, %f734, 0f40000000;
	setp.gtu.f32 	%p293, %f734, 0f4B800000;
	mov.f32 	%f714, %f734;
	@%p84 bra 	$L__BB0_52;
// %bb.41:
	@%p293 bra 	$L__BB0_48;
	bra.uni 	$L__BB0_42;
$L__BB0_48:
	mov.b32 	%r29, %f734;
	and.b32  	%r296, %r29, 8388607;
	or.b32  	%r3315, %r296, 1065353216;
	mov.b32 	%f713, %r3315;
	add.s32 	%r297, %r29, -1073741824;
	and.b32  	%r3316, %r297, -8388608;
	setp.eq.s32 	%p91, %r3316, 0;
	@%p91 bra 	$L__BB0_51;
// %bb.49:                              // %__nv_fmaf_rn.exit4.i.i.i2393.preheader
	mov.f32 	%f356, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f355,%f356;
	// end inline asm
$L__BB0_50:                             // %__nv_fmaf_rn.exit4.i.i.i2393
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r298, %r3316, 192937984;
	add.s32 	%r299, %r3315, %r298;
	mov.b32 	%f357, %r299;
	mul.f32 	%f358, %f355, %f357;
	sub.f32 	%f359, %f357, %f358;
	fma.rn.f32 	%f360, %f359, %f355, %f358;
	sub.f32 	%f361, %f357, %f360;
	fma.rz.f32 	%f362, %f361, %f355, %f360;
	cvt.rzi.f32.f32 	%f363, %f362;
	sub.f32 	%f713, %f357, %f363;
	sub.s32 	%r3316, %r3316, %r298;
	mov.b32 	%r3315, %f713;
	setp.ne.s32 	%p92, %r3316, 0;
	setp.ne.s32 	%p93, %r3315, 0;
	and.pred  	%p94, %p92, %p93;
	@%p94 bra 	$L__BB0_50;
$L__BB0_51:                             // %__internal_fmodf_slowpath_mod.exit.i.i2395
	setp.gt.u32 	%p95, %r29, 2139095039;
	selp.f32 	%f364, 0f7FFFFFFF, 0f4B800000, %p95;
	mul.f32 	%f365, %f713, 0f34000000;
	mul.f32 	%f714, %f364, %f365;
	bra.uni 	$L__BB0_52;
$L__BB0_42:                             // %__nv_fast_fdividef.exit.i.i.i2372
	div.approx.f32 	%f348, %f734, %f703;
	cvt.rzi.f32.f32 	%f712, %f348;
	fma.rn.f32 	%f38, %f712, 0fC0000000, %f734;
	mov.b32 	%r28, %f38;
	setp.lt.u32 	%p86, %r28, 1073741824;
	@%p86 bra 	$L__BB0_47;
// %bb.43:
	setp.lt.u32 	%p87, %r28, -2147483647;
	@%p87 bra 	$L__BB0_45;
// %bb.44:
	add.f32 	%f353, %f712, 0fBF800000;
	setp.lt.f32 	%p90, %f38, 0fC0000000;
	add.f32 	%f354, %f353, 0fBF800000;
	selp.f32 	%f712, %f354, %f353, %p90;
	bra.uni 	$L__BB0_47;
$L__BB0_45:
	add.f32 	%f712, %f712, 0f3F800000;
	setp.ltu.f32 	%p88, %f38, 0f40800000;
	@%p88 bra 	$L__BB0_47;
// %bb.46:                              // %__nv_fmaf_rn.exit.i.i.i2376
	add.f32 	%f349, %f712, 0f3F800000;
	fma.rn.f32 	%f351, %f703, 0fC0400000, %f38;
	setp.ge.f32 	%p89, %f351, 0f00000000;
	add.f32 	%f352, %f349, 0f3F800000;
	selp.f32 	%f712, %f352, %f349, %p89;
$L__BB0_47:                             // %__internal_fmodf_fastpath_quot.exit.i.i2379
	fma.rn.f32 	%f714, %f712, 0fC0000000, %f734;
$L__BB0_52:                             // %__internal_fmodf_kernel.exit.i2398
	mov.f32 	%f230, 0f00000000;
	abs.f32 	%f366, %f714;
	setp.gtu.f32 	%p96, %f366, 0f7F800000;
	mov.b32 	%r300, %f35;
	and.b32  	%r36, %r300, -2147483648;
	@%p96 bra 	$L__BB0_54;
// %bb.53:
	mov.b32 	%r301, %f714;
	or.b32  	%r302, %r36, %r301;
	mov.b32 	%f714, %r302;
$L__BB0_54:                             // %__nv_fmodf.exit2399
	add.f32 	%f367, %f714, %f714;
	mov.b32 	%r303, %f367;
	and.b32  	%r304, %r303, -2147483648;
	or.b32  	%r305, %r304, 1056964608;
	mov.b32 	%f368, %r305;
	add.f32 	%f369, %f367, %f368;
	cvt.rzi.f32.f32 	%f370, %f369;
	abs.f32 	%f371, %f367;
	setp.gt.f32 	%p97, %f371, 0f4B000000;
	selp.f32 	%f372, %f367, %f370, %p97;
	cvt.rzi.f32.f32 	%f373, %f367;
	setp.lt.f32 	%p98, %f371, 0f3F000000;
	selp.f32 	%f374, %f373, %f372, %p98;
	cvt.rzi.s32.f32 	%r306, %f374;
	fma.rn.f32 	%f375, %f374, 0fBF000000, %f714;
	mul.f32 	%f376, %f375, %f375;
	fma.rn.f32 	%f377, %f376, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f378, %f376, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f379, %f377, %f376, 0fC0A55DF6;
	fma.rn.f32 	%f380, %f378, %f376, 0f4081E0CF;
	fma.rn.f32 	%f381, %f376, %f375, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f376, 0fC09DE9E6;
	fma.rn.f32 	%f383, %f379, %f381, 0f00000000;
	fma.rn.f32 	%f384, %f382, %f376, 0f3F800000;
	fma.rn.f32 	%f385, %f375, 0f40490FDB, %f383;
	and.b32  	%r307, %r306, 1;
	setp.eq.b32 	%p99, %r307, 1;
	selp.f32 	%f386, %f384, %f385, %p99;
	selp.f32 	%f387, %f385, %f384, %p99;
	and.b32  	%r308, %r306, 2;
	setp.eq.s32 	%p100, %r308, 0;
	neg.f32 	%f388, %f386;
	selp.f32 	%f389, %f386, %f388, %p100;
	add.s32 	%r309, %r306, 1;
	and.b32  	%r310, %r309, 2;
	setp.eq.s32 	%p101, %r310, 0;
	sub.f32 	%f391, %f230, %f387;
	cvt.rzi.f32.f32 	%f393, %f714;
	setp.eq.f32 	%p102, %f393, %f714;
	mul.f32 	%f394, %f714, 0f00000000;
	selp.f32 	%f76, %f394, %f389, %p102;
	abs.f32 	%f395, %f714;
	add.s32 	%r311, %r27, %r128;
	and.b32  	%r312, %r311, 3;
	cvt.rn.f32.s32 	%f397, %r312;
	div.approx.f32 	%f54, %f397, %f703;
	abs.f32 	%f738, %f54;
	setp.lt.f32 	%p104, %f738, 0f40000000;
	setp.gtu.f32 	%p294, %f738, 0f4B800000;
	mov.f32 	%f718, %f738;
	@%p104 bra 	$L__BB0_66;
// %bb.55:
	@%p294 bra 	$L__BB0_62;
	bra.uni 	$L__BB0_56;
$L__BB0_62:
	mov.b32 	%r38, %f738;
	and.b32  	%r313, %r38, 8388607;
	or.b32  	%r3317, %r313, 1065353216;
	mov.b32 	%f717, %r3317;
	add.s32 	%r314, %r38, -1073741824;
	and.b32  	%r3318, %r314, -8388608;
	setp.eq.s32 	%p111, %r3318, 0;
	@%p111 bra 	$L__BB0_65;
// %bb.63:                              // %__nv_fmaf_rn.exit4.i.i.i2424.preheader
	mov.f32 	%f408, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f407,%f408;
	// end inline asm
$L__BB0_64:                             // %__nv_fmaf_rn.exit4.i.i.i2424
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r315, %r3318, 192937984;
	add.s32 	%r316, %r3317, %r315;
	mov.b32 	%f409, %r316;
	mul.f32 	%f410, %f407, %f409;
	sub.f32 	%f411, %f409, %f410;
	fma.rn.f32 	%f412, %f411, %f407, %f410;
	sub.f32 	%f413, %f409, %f412;
	fma.rz.f32 	%f414, %f413, %f407, %f412;
	cvt.rzi.f32.f32 	%f415, %f414;
	sub.f32 	%f717, %f409, %f415;
	sub.s32 	%r3318, %r3318, %r315;
	mov.b32 	%r3317, %f717;
	setp.ne.s32 	%p112, %r3318, 0;
	setp.ne.s32 	%p113, %r3317, 0;
	and.pred  	%p114, %p112, %p113;
	@%p114 bra 	$L__BB0_64;
$L__BB0_65:                             // %__internal_fmodf_slowpath_mod.exit.i.i2426
	setp.gt.u32 	%p115, %r38, 2139095039;
	selp.f32 	%f416, 0f7FFFFFFF, 0f4B800000, %p115;
	mul.f32 	%f417, %f717, 0f34000000;
	mul.f32 	%f718, %f416, %f417;
	bra.uni 	$L__BB0_66;
$L__BB0_56:                             // %__nv_fast_fdividef.exit.i.i.i2403
	div.approx.f32 	%f400, %f738, %f703;
	cvt.rzi.f32.f32 	%f716, %f400;
	fma.rn.f32 	%f57, %f716, 0fC0000000, %f738;
	mov.b32 	%r37, %f57;
	setp.lt.u32 	%p106, %r37, 1073741824;
	@%p106 bra 	$L__BB0_61;
// %bb.57:
	setp.lt.u32 	%p107, %r37, -2147483647;
	@%p107 bra 	$L__BB0_59;
// %bb.58:
	add.f32 	%f405, %f716, 0fBF800000;
	setp.lt.f32 	%p110, %f57, 0fC0000000;
	add.f32 	%f406, %f405, 0fBF800000;
	selp.f32 	%f716, %f406, %f405, %p110;
	bra.uni 	$L__BB0_61;
$L__BB0_59:
	add.f32 	%f716, %f716, 0f3F800000;
	setp.ltu.f32 	%p108, %f57, 0f40800000;
	@%p108 bra 	$L__BB0_61;
// %bb.60:                              // %__nv_fmaf_rn.exit.i.i.i2407
	add.f32 	%f401, %f716, 0f3F800000;
	fma.rn.f32 	%f403, %f703, 0fC0400000, %f57;
	setp.ge.f32 	%p109, %f403, 0f00000000;
	add.f32 	%f404, %f401, 0f3F800000;
	selp.f32 	%f716, %f404, %f401, %p109;
$L__BB0_61:                             // %__internal_fmodf_fastpath_quot.exit.i.i2410
	fma.rn.f32 	%f718, %f716, 0fC0000000, %f738;
$L__BB0_66:                             // %__internal_fmodf_kernel.exit.i2429
	selp.f32 	%f392, %f387, %f391, %p101;
	setp.gt.f32 	%p103, %f395, 0f4B800000;
	add.f32 	%f396, %f76, 0f3F800000;
	abs.f32 	%f418, %f718;
	setp.gtu.f32 	%p116, %f418, 0f7F800000;
	mov.b32 	%r317, %f54;
	and.b32  	%r45, %r317, -2147483648;
	@%p116 bra 	$L__BB0_68;
// %bb.67:
	mov.b32 	%r318, %f718;
	or.b32  	%r319, %r45, %r318;
	mov.b32 	%f718, %r319;
$L__BB0_68:                             // %__nv_fmodf.exit2430
	selp.f32 	%f53, %f396, %f392, %p103;
	add.f32 	%f419, %f718, %f718;
	mov.b32 	%r320, %f419;
	and.b32  	%r321, %r320, -2147483648;
	or.b32  	%r322, %r321, 1056964608;
	mov.b32 	%f420, %r322;
	add.f32 	%f421, %f419, %f420;
	cvt.rzi.f32.f32 	%f422, %f421;
	abs.f32 	%f423, %f419;
	setp.gt.f32 	%p117, %f423, 0f4B000000;
	selp.f32 	%f424, %f419, %f422, %p117;
	cvt.rzi.f32.f32 	%f425, %f419;
	setp.lt.f32 	%p118, %f423, 0f3F000000;
	selp.f32 	%f426, %f425, %f424, %p118;
	cvt.rzi.s32.f32 	%r323, %f426;
	fma.rn.f32 	%f427, %f426, 0fBF000000, %f718;
	mul.f32 	%f428, %f427, %f427;
	fma.rn.f32 	%f429, %f428, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f430, %f428, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f431, %f429, %f428, 0fC0A55DF6;
	fma.rn.f32 	%f432, %f430, %f428, 0f4081E0CF;
	fma.rn.f32 	%f433, %f428, %f427, 0f00000000;
	fma.rn.f32 	%f434, %f432, %f428, 0fC09DE9E6;
	fma.rn.f32 	%f435, %f431, %f433, 0f00000000;
	fma.rn.f32 	%f436, %f434, %f428, 0f3F800000;
	fma.rn.f32 	%f437, %f427, 0f40490FDB, %f435;
	and.b32  	%r324, %r323, 1;
	setp.eq.b32 	%p119, %r324, 1;
	selp.f32 	%f438, %f436, %f437, %p119;
	selp.f32 	%f439, %f437, %f436, %p119;
	and.b32  	%r325, %r323, 2;
	setp.eq.s32 	%p120, %r325, 0;
	neg.f32 	%f440, %f438;
	selp.f32 	%f441, %f438, %f440, %p120;
	add.s32 	%r326, %r323, 1;
	and.b32  	%r327, %r326, 2;
	setp.eq.s32 	%p121, %r327, 0;
	sub.f32 	%f443, %f230, %f439;
	selp.f32 	%f444, %f439, %f443, %p121;
	cvt.rzi.f32.f32 	%f445, %f718;
	setp.eq.f32 	%p122, %f445, %f718;
	mul.f32 	%f446, %f718, 0f00000000;
	selp.f32 	%f78, %f446, %f441, %p122;
	abs.f32 	%f447, %f718;
	setp.gt.f32 	%p123, %f447, 0f4B800000;
	add.f32 	%f448, %f78, 0f3F800000;
	selp.f32 	%f72, %f448, %f444, %p123;
	and.b32  	%r46, %r5, 2;
	setp.eq.s32 	%p124, %r46, 0;
	mov.f32 	%f75, %f53;
	mov.f32 	%f77, %f72;
	@%p124 bra 	$L__BB0_70;
// %bb.69:                              // %L688
	neg.f32 	%f77, %f78;
	neg.f32 	%f75, %f76;
	mov.f32 	%f76, %f53;
	mov.f32 	%f78, %f72;
$L__BB0_70:                             // %L690
	@%p24 bra 	$L__BB0_179;
// %bb.71:
	@%p290 bra 	$L__BB0_175;
	bra.uni 	$L__BB0_72;
$L__BB0_175:
	mov.b32 	%r143, %f750;
	and.b32  	%r334, %r143, 8388607;
	or.b32  	%r3347, %r334, 1065353216;
	mov.b32 	%f749, %r3347;
	add.s32 	%r335, %r143, -1073741824;
	and.b32  	%r3348, %r335, -8388608;
	setp.eq.s32 	%p132, %r3348, 0;
	@%p132 bra 	$L__BB0_178;
// %bb.176:                             // %__nv_fmaf_rn.exit4.i.i.i2455.preheader
	mov.f32 	%f458, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f457,%f458;
	// end inline asm
$L__BB0_177:                            // %__nv_fmaf_rn.exit4.i.i.i2455
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r336, %r3348, 192937984;
	add.s32 	%r337, %r3347, %r336;
	mov.b32 	%f459, %r337;
	mul.f32 	%f460, %f457, %f459;
	sub.f32 	%f461, %f459, %f460;
	fma.rn.f32 	%f462, %f461, %f457, %f460;
	sub.f32 	%f463, %f459, %f462;
	fma.rz.f32 	%f464, %f463, %f457, %f462;
	cvt.rzi.f32.f32 	%f465, %f464;
	sub.f32 	%f749, %f459, %f465;
	sub.s32 	%r3348, %r3348, %r336;
	mov.b32 	%r3347, %f749;
	setp.ne.s32 	%p133, %r3348, 0;
	setp.ne.s32 	%p134, %r3347, 0;
	and.pred  	%p135, %p133, %p134;
	@%p135 bra 	$L__BB0_177;
$L__BB0_178:                            // %__internal_fmodf_slowpath_mod.exit.i.i2457
	setp.gt.u32 	%p136, %r143, 2139095039;
	selp.f32 	%f466, 0f7FFFFFFF, 0f4B800000, %p136;
	mul.f32 	%f467, %f749, 0f34000000;
	mul.f32 	%f750, %f466, %f467;
	bra.uni 	$L__BB0_179;
$L__BB0_72:                             // %__nv_fast_fdividef.exit.i.i.i2434
	div.approx.f32 	%f450, %f750, %f703;
	cvt.rzi.f32.f32 	%f748, %f450;
	fma.rn.f32 	%f171, %f748, 0fC0000000, %f750;
	mov.b32 	%r142, %f171;
	setp.lt.u32 	%p127, %r142, 1073741824;
	@%p127 bra 	$L__BB0_174;
// %bb.73:
	setp.lt.u32 	%p128, %r142, -2147483647;
	@%p128 bra 	$L__BB0_172;
// %bb.74:
	add.f32 	%f455, %f748, 0fBF800000;
	setp.lt.f32 	%p131, %f171, 0fC0000000;
	add.f32 	%f456, %f455, 0fBF800000;
	selp.f32 	%f748, %f456, %f455, %p131;
	bra.uni 	$L__BB0_174;
$L__BB0_172:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p129, %f171, 0f40800000;
	@%p129 bra 	$L__BB0_174;
// %bb.173:                             // %__nv_fmaf_rn.exit.i.i.i2438
	add.f32 	%f451, %f748, 0f3F800000;
	fma.rn.f32 	%f453, %f703, 0fC0400000, %f171;
	setp.ge.f32 	%p130, %f453, 0f00000000;
	add.f32 	%f454, %f451, 0f3F800000;
	selp.f32 	%f748, %f454, %f451, %p130;
$L__BB0_174:                            // %__internal_fmodf_fastpath_quot.exit.i.i2441
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_179:                            // %__internal_fmodf_kernel.exit.i2460
	abs.f32 	%f468, %f750;
	setp.gtu.f32 	%p137, %f468, 0f7F800000;
	@%p137 bra 	$L__BB0_181;
// %bb.180:
	mov.b32 	%r338, %f750;
	or.b32  	%r339, %r137, %r338;
	mov.b32 	%f750, %r339;
$L__BB0_181:                            // %__nv_fmodf.exit2461
	@%p44 bra 	$L__BB0_86;
// %bb.75:
	@%p291 bra 	$L__BB0_82;
	bra.uni 	$L__BB0_76;
$L__BB0_82:
	mov.b32 	%r50, %f726;
	and.b32  	%r354, %r50, 8388607;
	or.b32  	%r3319, %r354, 1065353216;
	mov.b32 	%f725, %r3319;
	add.s32 	%r355, %r50, -1073741824;
	and.b32  	%r3320, %r355, -8388608;
	setp.eq.s32 	%p152, %r3320, 0;
	@%p152 bra 	$L__BB0_85;
// %bb.83:                              // %__nv_fmaf_rn.exit4.i.i.i2486.preheader
	mov.f32 	%f510, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f509,%f510;
	// end inline asm
$L__BB0_84:                             // %__nv_fmaf_rn.exit4.i.i.i2486
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r356, %r3320, 192937984;
	add.s32 	%r357, %r3319, %r356;
	mov.b32 	%f511, %r357;
	mul.f32 	%f512, %f509, %f511;
	sub.f32 	%f513, %f511, %f512;
	fma.rn.f32 	%f514, %f513, %f509, %f512;
	sub.f32 	%f515, %f511, %f514;
	fma.rz.f32 	%f516, %f515, %f509, %f514;
	cvt.rzi.f32.f32 	%f517, %f516;
	sub.f32 	%f725, %f511, %f517;
	sub.s32 	%r3320, %r3320, %r356;
	mov.b32 	%r3319, %f725;
	setp.ne.s32 	%p153, %r3320, 0;
	setp.ne.s32 	%p154, %r3319, 0;
	and.pred  	%p155, %p153, %p154;
	@%p155 bra 	$L__BB0_84;
$L__BB0_85:                             // %__internal_fmodf_slowpath_mod.exit.i.i2488
	setp.gt.u32 	%p156, %r50, 2139095039;
	selp.f32 	%f518, 0f7FFFFFFF, 0f4B800000, %p156;
	mul.f32 	%f519, %f725, 0f34000000;
	mul.f32 	%f726, %f518, %f519;
	bra.uni 	$L__BB0_86;
$L__BB0_76:                             // %__nv_fast_fdividef.exit.i.i.i2465
	div.approx.f32 	%f502, %f726, %f703;
	cvt.rzi.f32.f32 	%f724, %f502;
	fma.rn.f32 	%f80, %f724, 0fC0000000, %f726;
	mov.b32 	%r49, %f80;
	setp.lt.u32 	%p147, %r49, 1073741824;
	@%p147 bra 	$L__BB0_81;
// %bb.77:
	setp.lt.u32 	%p148, %r49, -2147483647;
	@%p148 bra 	$L__BB0_79;
// %bb.78:
	add.f32 	%f507, %f724, 0fBF800000;
	setp.lt.f32 	%p151, %f80, 0fC0000000;
	add.f32 	%f508, %f507, 0fBF800000;
	selp.f32 	%f724, %f508, %f507, %p151;
	bra.uni 	$L__BB0_81;
$L__BB0_79:
	add.f32 	%f724, %f724, 0f3F800000;
	setp.ltu.f32 	%p149, %f80, 0f40800000;
	@%p149 bra 	$L__BB0_81;
// %bb.80:                              // %__nv_fmaf_rn.exit.i.i.i2469
	add.f32 	%f503, %f724, 0f3F800000;
	fma.rn.f32 	%f505, %f703, 0fC0400000, %f80;
	setp.ge.f32 	%p150, %f505, 0f00000000;
	add.f32 	%f506, %f503, 0f3F800000;
	selp.f32 	%f724, %f506, %f503, %p150;
$L__BB0_81:                             // %__internal_fmodf_fastpath_quot.exit.i.i2472
	fma.rn.f32 	%f726, %f724, 0fC0000000, %f726;
$L__BB0_86:                             // %__internal_fmodf_kernel.exit.i2491
	abs.f32 	%f520, %f726;
	setp.gtu.f32 	%p157, %f520, 0f7F800000;
	@%p157 bra 	$L__BB0_88;
// %bb.87:
	mov.b32 	%r358, %f726;
	or.b32  	%r359, %r15, %r358;
	mov.b32 	%f726, %r359;
$L__BB0_88:                             // %__nv_fmodf.exit2492
	@%p64 bra 	$L__BB0_100;
// %bb.89:
	@%p292 bra 	$L__BB0_96;
	bra.uni 	$L__BB0_90;
$L__BB0_96:
	mov.b32 	%r58, %f730;
	and.b32  	%r368, %r58, 8388607;
	or.b32  	%r3321, %r368, 1065353216;
	mov.b32 	%f729, %r3321;
	add.s32 	%r369, %r58, -1073741824;
	and.b32  	%r3322, %r369, -8388608;
	setp.eq.s32 	%p172, %r3322, 0;
	@%p172 bra 	$L__BB0_99;
// %bb.97:                              // %__nv_fmaf_rn.exit4.i.i.i2517.preheader
	mov.f32 	%f560, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f559,%f560;
	// end inline asm
$L__BB0_98:                             // %__nv_fmaf_rn.exit4.i.i.i2517
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r370, %r3322, 192937984;
	add.s32 	%r371, %r3321, %r370;
	mov.b32 	%f561, %r371;
	mul.f32 	%f562, %f559, %f561;
	sub.f32 	%f563, %f561, %f562;
	fma.rn.f32 	%f564, %f563, %f559, %f562;
	sub.f32 	%f565, %f561, %f564;
	fma.rz.f32 	%f566, %f565, %f559, %f564;
	cvt.rzi.f32.f32 	%f567, %f566;
	sub.f32 	%f729, %f561, %f567;
	sub.s32 	%r3322, %r3322, %r370;
	mov.b32 	%r3321, %f729;
	setp.ne.s32 	%p173, %r3322, 0;
	setp.ne.s32 	%p174, %r3321, 0;
	and.pred  	%p175, %p173, %p174;
	@%p175 bra 	$L__BB0_98;
$L__BB0_99:                             // %__internal_fmodf_slowpath_mod.exit.i.i2519
	setp.gt.u32 	%p176, %r58, 2139095039;
	selp.f32 	%f568, 0f7FFFFFFF, 0f4B800000, %p176;
	mul.f32 	%f569, %f729, 0f34000000;
	mul.f32 	%f730, %f568, %f569;
	bra.uni 	$L__BB0_100;
$L__BB0_90:                             // %__nv_fast_fdividef.exit.i.i.i2496
	div.approx.f32 	%f552, %f730, %f703;
	cvt.rzi.f32.f32 	%f728, %f552;
	fma.rn.f32 	%f97, %f728, 0fC0000000, %f730;
	mov.b32 	%r57, %f97;
	setp.lt.u32 	%p167, %r57, 1073741824;
	@%p167 bra 	$L__BB0_95;
// %bb.91:
	setp.lt.u32 	%p168, %r57, -2147483647;
	@%p168 bra 	$L__BB0_93;
// %bb.92:
	add.f32 	%f557, %f728, 0fBF800000;
	setp.lt.f32 	%p171, %f97, 0fC0000000;
	add.f32 	%f558, %f557, 0fBF800000;
	selp.f32 	%f728, %f558, %f557, %p171;
	bra.uni 	$L__BB0_95;
$L__BB0_93:
	add.f32 	%f728, %f728, 0f3F800000;
	setp.ltu.f32 	%p169, %f97, 0f40800000;
	@%p169 bra 	$L__BB0_95;
// %bb.94:                              // %__nv_fmaf_rn.exit.i.i.i2500
	add.f32 	%f553, %f728, 0f3F800000;
	fma.rn.f32 	%f555, %f703, 0fC0400000, %f97;
	setp.ge.f32 	%p170, %f555, 0f00000000;
	add.f32 	%f556, %f553, 0f3F800000;
	selp.f32 	%f728, %f556, %f553, %p170;
$L__BB0_95:                             // %__internal_fmodf_fastpath_quot.exit.i.i2503
	fma.rn.f32 	%f730, %f728, 0fC0000000, %f730;
$L__BB0_100:                            // %__internal_fmodf_kernel.exit.i2522
	abs.f32 	%f570, %f730;
	setp.gtu.f32 	%p177, %f570, 0f7F800000;
	@%p177 bra 	$L__BB0_102;
// %bb.101:
	mov.b32 	%r372, %f730;
	or.b32  	%r373, %r24, %r372;
	mov.b32 	%f730, %r373;
$L__BB0_102:                            // %__nv_fmodf.exit2523
	@%p84 bra 	$L__BB0_114;
// %bb.103:
	@%p293 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_104;
$L__BB0_110:
	mov.b32 	%r68, %f734;
	and.b32  	%r388, %r68, 8388607;
	or.b32  	%r3323, %r388, 1065353216;
	mov.b32 	%f733, %r3323;
	add.s32 	%r389, %r68, -1073741824;
	and.b32  	%r3324, %r389, -8388608;
	setp.eq.s32 	%p192, %r3324, 0;
	@%p192 bra 	$L__BB0_113;
// %bb.111:                             // %__nv_fmaf_rn.exit4.i.i.i2548.preheader
	mov.f32 	%f612, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f611,%f612;
	// end inline asm
$L__BB0_112:                            // %__nv_fmaf_rn.exit4.i.i.i2548
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r390, %r3324, 192937984;
	add.s32 	%r391, %r3323, %r390;
	mov.b32 	%f613, %r391;
	mul.f32 	%f614, %f611, %f613;
	sub.f32 	%f615, %f613, %f614;
	fma.rn.f32 	%f616, %f615, %f611, %f614;
	sub.f32 	%f617, %f613, %f616;
	fma.rz.f32 	%f618, %f617, %f611, %f616;
	cvt.rzi.f32.f32 	%f619, %f618;
	sub.f32 	%f733, %f613, %f619;
	sub.s32 	%r3324, %r3324, %r390;
	mov.b32 	%r3323, %f733;
	setp.ne.s32 	%p193, %r3324, 0;
	setp.ne.s32 	%p194, %r3323, 0;
	and.pred  	%p195, %p193, %p194;
	@%p195 bra 	$L__BB0_112;
$L__BB0_113:                            // %__internal_fmodf_slowpath_mod.exit.i.i2550
	setp.gt.u32 	%p196, %r68, 2139095039;
	selp.f32 	%f620, 0f7FFFFFFF, 0f4B800000, %p196;
	mul.f32 	%f621, %f733, 0f34000000;
	mul.f32 	%f734, %f620, %f621;
	bra.uni 	$L__BB0_114;
$L__BB0_104:                            // %__nv_fast_fdividef.exit.i.i.i2527
	div.approx.f32 	%f604, %f734, %f703;
	cvt.rzi.f32.f32 	%f732, %f604;
	fma.rn.f32 	%f112, %f732, 0fC0000000, %f734;
	mov.b32 	%r67, %f112;
	setp.lt.u32 	%p187, %r67, 1073741824;
	@%p187 bra 	$L__BB0_109;
// %bb.105:
	setp.lt.u32 	%p188, %r67, -2147483647;
	@%p188 bra 	$L__BB0_107;
// %bb.106:
	add.f32 	%f609, %f732, 0fBF800000;
	setp.lt.f32 	%p191, %f112, 0fC0000000;
	add.f32 	%f610, %f609, 0fBF800000;
	selp.f32 	%f732, %f610, %f609, %p191;
	bra.uni 	$L__BB0_109;
$L__BB0_107:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p189, %f112, 0f40800000;
	@%p189 bra 	$L__BB0_109;
// %bb.108:                             // %__nv_fmaf_rn.exit.i.i.i2531
	add.f32 	%f605, %f732, 0f3F800000;
	fma.rn.f32 	%f607, %f703, 0fC0400000, %f112;
	setp.ge.f32 	%p190, %f607, 0f00000000;
	add.f32 	%f608, %f605, 0f3F800000;
	selp.f32 	%f732, %f608, %f605, %p190;
$L__BB0_109:                            // %__internal_fmodf_fastpath_quot.exit.i.i2534
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_114:                            // %__internal_fmodf_kernel.exit.i2553
	abs.f32 	%f622, %f734;
	setp.gtu.f32 	%p197, %f622, 0f7F800000;
	@%p197 bra 	$L__BB0_116;
// %bb.115:
	mov.b32 	%r392, %f734;
	or.b32  	%r393, %r36, %r392;
	mov.b32 	%f734, %r393;
$L__BB0_116:                            // %__nv_fmodf.exit2554
	add.f32 	%f623, %f734, %f734;
	mov.b32 	%r394, %f623;
	and.b32  	%r395, %r394, -2147483648;
	or.b32  	%r396, %r395, 1056964608;
	mov.b32 	%f624, %r396;
	add.f32 	%f625, %f623, %f624;
	cvt.rzi.f32.f32 	%f626, %f625;
	abs.f32 	%f627, %f623;
	setp.gt.f32 	%p199, %f627, 0f4B000000;
	selp.f32 	%f628, %f623, %f626, %p199;
	cvt.rzi.f32.f32 	%f629, %f623;
	setp.lt.f32 	%p200, %f627, 0f3F000000;
	selp.f32 	%f630, %f629, %f628, %p200;
	cvt.rzi.s32.f32 	%r397, %f630;
	fma.rn.f32 	%f631, %f630, 0fBF000000, %f734;
	mul.f32 	%f632, %f631, %f631;
	fma.rn.f32 	%f633, %f632, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f634, %f632, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f635, %f633, %f632, 0fC0A55DF6;
	fma.rn.f32 	%f636, %f634, %f632, 0f4081E0CF;
	fma.rn.f32 	%f637, %f632, %f631, 0f00000000;
	fma.rn.f32 	%f638, %f636, %f632, 0fC09DE9E6;
	fma.rn.f32 	%f639, %f635, %f637, 0f00000000;
	fma.rn.f32 	%f640, %f638, %f632, 0f3F800000;
	fma.rn.f32 	%f641, %f631, 0f40490FDB, %f639;
	and.b32  	%r398, %r397, 1;
	setp.eq.b32 	%p201, %r398, 1;
	selp.f32 	%f642, %f640, %f641, %p201;
	selp.f32 	%f643, %f641, %f640, %p201;
	and.b32  	%r399, %r397, 2;
	setp.eq.s32 	%p202, %r399, 0;
	neg.f32 	%f644, %f642;
	selp.f32 	%f645, %f642, %f644, %p202;
	add.s32 	%r400, %r397, 1;
	and.b32  	%r401, %r400, 2;
	setp.eq.s32 	%p203, %r401, 0;
	sub.f32 	%f647, %f230, %f643;
	cvt.rzi.f32.f32 	%f649, %f734;
	setp.eq.f32 	%p204, %f649, %f734;
	mul.f32 	%f650, %f734, 0f00000000;
	selp.f32 	%f148, %f650, %f645, %p204;
	abs.f32 	%f651, %f734;
	@%p104 bra 	$L__BB0_128;
// %bb.117:
	@%p294 bra 	$L__BB0_124;
	bra.uni 	$L__BB0_118;
$L__BB0_124:
	mov.b32 	%r76, %f738;
	and.b32  	%r402, %r76, 8388607;
	or.b32  	%r3325, %r402, 1065353216;
	mov.b32 	%f737, %r3325;
	add.s32 	%r403, %r76, -1073741824;
	and.b32  	%r3326, %r403, -8388608;
	setp.eq.s32 	%p212, %r3326, 0;
	@%p212 bra 	$L__BB0_127;
// %bb.125:                             // %__nv_fmaf_rn.exit4.i.i.i2579.preheader
	mov.f32 	%f662, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f661,%f662;
	// end inline asm
$L__BB0_126:                            // %__nv_fmaf_rn.exit4.i.i.i2579
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r404, %r3326, 192937984;
	add.s32 	%r405, %r3325, %r404;
	mov.b32 	%f663, %r405;
	mul.f32 	%f664, %f661, %f663;
	sub.f32 	%f665, %f663, %f664;
	fma.rn.f32 	%f666, %f665, %f661, %f664;
	sub.f32 	%f667, %f663, %f666;
	fma.rz.f32 	%f668, %f667, %f661, %f666;
	cvt.rzi.f32.f32 	%f669, %f668;
	sub.f32 	%f737, %f663, %f669;
	sub.s32 	%r3326, %r3326, %r404;
	mov.b32 	%r3325, %f737;
	setp.ne.s32 	%p213, %r3326, 0;
	setp.ne.s32 	%p214, %r3325, 0;
	and.pred  	%p215, %p213, %p214;
	@%p215 bra 	$L__BB0_126;
$L__BB0_127:                            // %__internal_fmodf_slowpath_mod.exit.i.i2581
	setp.gt.u32 	%p216, %r76, 2139095039;
	selp.f32 	%f670, 0f7FFFFFFF, 0f4B800000, %p216;
	mul.f32 	%f671, %f737, 0f34000000;
	mul.f32 	%f738, %f670, %f671;
	bra.uni 	$L__BB0_128;
$L__BB0_118:                            // %__nv_fast_fdividef.exit.i.i.i2558
	div.approx.f32 	%f654, %f738, %f703;
	cvt.rzi.f32.f32 	%f736, %f654;
	fma.rn.f32 	%f129, %f736, 0fC0000000, %f738;
	mov.b32 	%r75, %f129;
	setp.lt.u32 	%p207, %r75, 1073741824;
	@%p207 bra 	$L__BB0_123;
// %bb.119:
	setp.lt.u32 	%p208, %r75, -2147483647;
	@%p208 bra 	$L__BB0_121;
// %bb.120:
	add.f32 	%f659, %f736, 0fBF800000;
	setp.lt.f32 	%p211, %f129, 0fC0000000;
	add.f32 	%f660, %f659, 0fBF800000;
	selp.f32 	%f736, %f660, %f659, %p211;
	bra.uni 	$L__BB0_123;
$L__BB0_121:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p209, %f129, 0f40800000;
	@%p209 bra 	$L__BB0_123;
// %bb.122:                             // %__nv_fmaf_rn.exit.i.i.i2562
	add.f32 	%f655, %f736, 0f3F800000;
	fma.rn.f32 	%f657, %f703, 0fC0400000, %f129;
	setp.ge.f32 	%p210, %f657, 0f00000000;
	add.f32 	%f658, %f655, 0f3F800000;
	selp.f32 	%f736, %f658, %f655, %p210;
$L__BB0_123:                            // %__internal_fmodf_fastpath_quot.exit.i.i2565
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_128:                            // %__internal_fmodf_kernel.exit.i2584
	selp.f32 	%f648, %f643, %f647, %p203;
	setp.gt.f32 	%p205, %f651, 0f4B800000;
	add.f32 	%f652, %f148, 0f3F800000;
	abs.f32 	%f672, %f738;
	setp.gtu.f32 	%p217, %f672, 0f7F800000;
	@%p217 bra 	$L__BB0_130;
// %bb.129:
	mov.b32 	%r406, %f738;
	or.b32  	%r407, %r45, %r406;
	mov.b32 	%f738, %r407;
$L__BB0_130:                            // %__nv_fmodf.exit2585
	selp.f32 	%f127, %f652, %f648, %p205;
	add.f32 	%f673, %f738, %f738;
	mov.b32 	%r408, %f673;
	and.b32  	%r409, %r408, -2147483648;
	or.b32  	%r410, %r409, 1056964608;
	mov.b32 	%f674, %r410;
	add.f32 	%f675, %f673, %f674;
	cvt.rzi.f32.f32 	%f676, %f675;
	abs.f32 	%f677, %f673;
	setp.gt.f32 	%p219, %f677, 0f4B000000;
	selp.f32 	%f678, %f673, %f676, %p219;
	cvt.rzi.f32.f32 	%f679, %f673;
	setp.lt.f32 	%p220, %f677, 0f3F000000;
	selp.f32 	%f680, %f679, %f678, %p220;
	cvt.rzi.s32.f32 	%r411, %f680;
	fma.rn.f32 	%f681, %f680, 0fBF000000, %f738;
	mul.f32 	%f682, %f681, %f681;
	fma.rn.f32 	%f683, %f682, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f684, %f682, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f685, %f683, %f682, 0fC0A55DF6;
	fma.rn.f32 	%f686, %f684, %f682, 0f4081E0CF;
	fma.rn.f32 	%f687, %f682, %f681, 0f00000000;
	fma.rn.f32 	%f688, %f686, %f682, 0fC09DE9E6;
	fma.rn.f32 	%f689, %f685, %f687, 0f00000000;
	fma.rn.f32 	%f690, %f688, %f682, 0f3F800000;
	fma.rn.f32 	%f691, %f681, 0f40490FDB, %f689;
	and.b32  	%r412, %r411, 1;
	setp.eq.b32 	%p221, %r412, 1;
	selp.f32 	%f692, %f690, %f691, %p221;
	selp.f32 	%f693, %f691, %f690, %p221;
	and.b32  	%r413, %r411, 2;
	setp.eq.s32 	%p222, %r413, 0;
	neg.f32 	%f694, %f692;
	selp.f32 	%f695, %f692, %f694, %p222;
	add.s32 	%r414, %r411, 1;
	and.b32  	%r415, %r414, 2;
	setp.eq.s32 	%p223, %r415, 0;
	sub.f32 	%f697, %f230, %f693;
	selp.f32 	%f698, %f693, %f697, %p223;
	cvt.rzi.f32.f32 	%f699, %f738;
	setp.eq.f32 	%p224, %f699, %f738;
	mul.f32 	%f700, %f738, 0f00000000;
	selp.f32 	%f150, %f700, %f695, %p224;
	abs.f32 	%f701, %f738;
	setp.gt.f32 	%p225, %f701, 0f4B800000;
	add.f32 	%f702, %f150, 0f3F800000;
	selp.f32 	%f144, %f702, %f698, %p225;
	mov.f32 	%f147, %f127;
	mov.f32 	%f149, %f144;
	@%p124 bra 	$L__BB0_132;
// %bb.131:                             // %L981
	neg.f32 	%f149, %f150;
	neg.f32 	%f147, %f148;
	mov.f32 	%f148, %f127;
	mov.f32 	%f150, %f144;
$L__BB0_132:                            // %L983
	setp.gt.u32 	%p226, %r5, 15;
	mov.u32 	%r152, 999999999;
	@%p226 bra 	$L__BB0_183;
// %bb.133:                             // %L1013
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	shl.b32 	%r423, %r5, 4;
	and.b32  	%r424, %r423, 240;
	or.b32  	%r425, %r424, %r1;
	mul.wide.u32 	%rd68, %r425, 4;
	add.s64 	%rd69, %rd1, %rd68;
	ld.global.u32 	%r426, [%rd69];
	shl.b32 	%r427, %r426, 16;
	cvt.s32.s16 	%r85, %r426;
	shr.s32 	%r86, %r426, 16;
	or.b32  	%r428, %r427, 65535;
	setp.lt.u32 	%p227, %r428, 1114111;
	setp.lt.u32 	%p228, %r426, 1048576;
	and.pred  	%p229, %p227, %p228;
	@%p229 bra 	$L__BB0_182;
	bra.uni 	$L__BB0_134;
$L__BB0_182:                            // %L1255
	mul.lo.s32 	%r432, %r86, 546;
	mad.lo.s32 	%r152, %r85, 33, %r432;
$L__BB0_183:                            // %pass565
	add.f32 	%f207, %f746, %f746;
	mov.b32 	%r249, %f207;
	add.f32 	%f469, %f750, %f750;
	and.b32  	%r250, %r249, -2147483648;
	add.f32 	%f261, %f706, %f706;
	add.f32 	%f313, %f710, %f710;
	mov.b32 	%r346, %f469;
	or.b32  	%r251, %r250, 1056964608;
	mov.b32 	%r265, %f261;
	mov.b32 	%r287, %f313;
	and.b32  	%r347, %r346, -2147483648;
	add.f32 	%f521, %f726, %f726;
	add.f32 	%f571, %f730, %f730;
	mov.b32 	%f208, %r251;
	and.b32  	%r266, %r265, -2147483648;
	and.b32  	%r288, %r287, -2147483648;
	or.b32  	%r348, %r347, 1056964608;
	mov.b32 	%r360, %f521;
	mov.b32 	%r380, %f571;
	add.f32 	%f209, %f207, %f208;
	abs.f32 	%f211, %f207;
	or.b32  	%r267, %r266, 1056964608;
	or.b32  	%r289, %r288, 1056964608;
	mov.b32 	%f470, %r348;
	and.b32  	%r361, %r360, -2147483648;
	and.b32  	%r381, %r380, -2147483648;
	cvt.rzi.f32.f32 	%f210, %f209;
	setp.gt.f32 	%p37, %f211, 0f4B000000;
	mov.b32 	%f262, %r267;
	mov.b32 	%f314, %r289;
	add.f32 	%f471, %f469, %f470;
	abs.f32 	%f473, %f469;
	or.b32  	%r362, %r361, 1056964608;
	or.b32  	%r382, %r381, 1056964608;
	selp.f32 	%f212, %f207, %f210, %p37;
	cvt.rzi.f32.f32 	%f213, %f207;
	setp.lt.f32 	%p38, %f211, 0f3F000000;
	add.f32 	%f263, %f261, %f262;
	abs.f32 	%f265, %f261;
	add.f32 	%f315, %f313, %f314;
	abs.f32 	%f317, %f313;
	cvt.rzi.f32.f32 	%f472, %f471;
	setp.gt.f32 	%p139, %f473, 0f4B000000;
	mov.b32 	%f522, %r362;
	mov.b32 	%f572, %r382;
	selp.f32 	%f214, %f213, %f212, %p38;
	cvt.rzi.f32.f32 	%f264, %f263;
	setp.gt.f32 	%p57, %f265, 0f4B000000;
	cvt.rzi.f32.f32 	%f316, %f315;
	setp.gt.f32 	%p77, %f317, 0f4B000000;
	selp.f32 	%f474, %f469, %f472, %p139;
	cvt.rzi.f32.f32 	%f475, %f469;
	setp.lt.f32 	%p140, %f473, 0f3F000000;
	add.f32 	%f523, %f521, %f522;
	abs.f32 	%f525, %f521;
	add.f32 	%f573, %f571, %f572;
	abs.f32 	%f575, %f571;
	fma.rn.f32 	%f215, %f214, 0fBF000000, %f746;
	selp.f32 	%f266, %f261, %f264, %p57;
	cvt.rzi.f32.f32 	%f267, %f261;
	setp.lt.f32 	%p58, %f265, 0f3F000000;
	selp.f32 	%f318, %f313, %f316, %p77;
	cvt.rzi.f32.f32 	%f319, %f313;
	setp.lt.f32 	%p78, %f317, 0f3F000000;
	selp.f32 	%f476, %f475, %f474, %p140;
	cvt.rzi.f32.f32 	%f524, %f523;
	setp.gt.f32 	%p159, %f525, 0f4B000000;
	cvt.rzi.f32.f32 	%f574, %f573;
	setp.gt.f32 	%p179, %f575, 0f4B000000;
	mul.f32 	%f216, %f215, %f215;
	selp.f32 	%f268, %f267, %f266, %p58;
	selp.f32 	%f320, %f319, %f318, %p78;
	fma.rn.f32 	%f477, %f476, 0fBF000000, %f750;
	selp.f32 	%f526, %f521, %f524, %p159;
	cvt.rzi.f32.f32 	%f527, %f521;
	setp.lt.f32 	%p160, %f525, 0f3F000000;
	selp.f32 	%f576, %f571, %f574, %p179;
	cvt.rzi.f32.f32 	%f577, %f571;
	setp.lt.f32 	%p180, %f575, 0f3F000000;
	fma.rn.f32 	%f217, %f216, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f218, %f216, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f269, %f268, 0fBF000000, %f706;
	fma.rn.f32 	%f321, %f320, 0fBF000000, %f710;
	mul.f32 	%f478, %f477, %f477;
	selp.f32 	%f528, %f527, %f526, %p160;
	selp.f32 	%f578, %f577, %f576, %p180;
	cvt.rzi.s32.f32 	%r252, %f214;
	fma.rn.f32 	%f219, %f217, %f216, 0fC0A55DF6;
	fma.rn.f32 	%f220, %f218, %f216, 0f4081E0CF;
	fma.rn.f32 	%f221, %f216, %f215, 0f00000000;
	mul.f32 	%f270, %f269, %f269;
	mul.f32 	%f322, %f321, %f321;
	fma.rn.f32 	%f479, %f478, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f480, %f478, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f529, %f528, 0fBF000000, %f726;
	fma.rn.f32 	%f579, %f578, 0fBF000000, %f730;
	fma.rn.f32 	%f222, %f220, %f216, 0fC09DE9E6;
	fma.rn.f32 	%f223, %f219, %f221, 0f00000000;
	and.b32  	%r253, %r252, 1;
	fma.rn.f32 	%f271, %f270, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f272, %f270, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f323, %f322, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f324, %f322, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r349, %f476;
	fma.rn.f32 	%f481, %f479, %f478, 0fC0A55DF6;
	fma.rn.f32 	%f482, %f480, %f478, 0f4081E0CF;
	fma.rn.f32 	%f483, %f478, %f477, 0f00000000;
	mul.f32 	%f530, %f529, %f529;
	mul.f32 	%f580, %f579, %f579;
	fma.rn.f32 	%f224, %f222, %f216, 0f3F800000;
	fma.rn.f32 	%f225, %f215, 0f40490FDB, %f223;
	setp.eq.b32 	%p39, %r253, 1;
	cvt.rzi.s32.f32 	%r268, %f268;
	fma.rn.f32 	%f273, %f271, %f270, 0fC0A55DF6;
	fma.rn.f32 	%f274, %f272, %f270, 0f4081E0CF;
	fma.rn.f32 	%f275, %f270, %f269, 0f00000000;
	cvt.rzi.s32.f32 	%r290, %f320;
	fma.rn.f32 	%f325, %f323, %f322, 0fC0A55DF6;
	fma.rn.f32 	%f326, %f324, %f322, 0f4081E0CF;
	fma.rn.f32 	%f327, %f322, %f321, 0f00000000;
	fma.rn.f32 	%f484, %f482, %f478, 0fC09DE9E6;
	fma.rn.f32 	%f485, %f481, %f483, 0f00000000;
	and.b32  	%r350, %r349, 1;
	fma.rn.f32 	%f531, %f530, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f532, %f530, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f581, %f580, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f582, %f580, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f226, %f224, %f225, %p39;
	and.b32  	%r254, %r252, 2;
	fma.rn.f32 	%f276, %f274, %f270, 0fC09DE9E6;
	fma.rn.f32 	%f277, %f273, %f275, 0f00000000;
	and.b32  	%r269, %r268, 1;
	fma.rn.f32 	%f328, %f326, %f322, 0fC09DE9E6;
	fma.rn.f32 	%f329, %f325, %f327, 0f00000000;
	and.b32  	%r291, %r290, 1;
	fma.rn.f32 	%f486, %f484, %f478, 0f3F800000;
	fma.rn.f32 	%f487, %f477, 0f40490FDB, %f485;
	setp.eq.b32 	%p141, %r350, 1;
	cvt.rzi.s32.f32 	%r363, %f528;
	fma.rn.f32 	%f533, %f531, %f530, 0fC0A55DF6;
	fma.rn.f32 	%f534, %f532, %f530, 0f4081E0CF;
	fma.rn.f32 	%f535, %f530, %f529, 0f00000000;
	cvt.rzi.s32.f32 	%r383, %f578;
	fma.rn.f32 	%f583, %f581, %f580, 0fC0A55DF6;
	fma.rn.f32 	%f584, %f582, %f580, 0f4081E0CF;
	fma.rn.f32 	%f585, %f580, %f579, 0f00000000;
	setp.eq.s32 	%p40, %r254, 0;
	neg.f32 	%f228, %f226;
	add.s32 	%r255, %r252, 1;
	cvt.rzi.f32.f32 	%f233, %f746;
	fma.rn.f32 	%f278, %f276, %f270, 0f3F800000;
	fma.rn.f32 	%f279, %f269, 0f40490FDB, %f277;
	setp.eq.b32 	%p59, %r269, 1;
	fma.rn.f32 	%f330, %f328, %f322, 0f3F800000;
	fma.rn.f32 	%f331, %f321, 0f40490FDB, %f329;
	setp.eq.b32 	%p79, %r291, 1;
	selp.f32 	%f488, %f486, %f487, %p141;
	and.b32  	%r351, %r349, 2;
	fma.rn.f32 	%f536, %f534, %f530, 0fC09DE9E6;
	fma.rn.f32 	%f537, %f533, %f535, 0f00000000;
	and.b32  	%r364, %r363, 1;
	fma.rn.f32 	%f586, %f584, %f580, 0fC09DE9E6;
	fma.rn.f32 	%f587, %f583, %f585, 0f00000000;
	and.b32  	%r384, %r383, 1;
	selp.f32 	%f227, %f225, %f224, %p39;
	selp.f32 	%f229, %f226, %f228, %p40;
	and.b32  	%r256, %r255, 2;
	setp.eq.f32 	%p42, %f233, %f746;
	mul.f32 	%f234, %f746, 0f00000000;
	selp.f32 	%f280, %f278, %f279, %p59;
	and.b32  	%r270, %r268, 2;
	selp.f32 	%f332, %f330, %f331, %p79;
	and.b32  	%r292, %r290, 2;
	setp.eq.s32 	%p142, %r351, 0;
	neg.f32 	%f490, %f488;
	add.s32 	%r352, %r349, 1;
	cvt.rzi.f32.f32 	%f495, %f750;
	fma.rn.f32 	%f538, %f536, %f530, 0f3F800000;
	fma.rn.f32 	%f539, %f529, 0f40490FDB, %f537;
	setp.eq.b32 	%p161, %r364, 1;
	fma.rn.f32 	%f588, %f586, %f580, 0f3F800000;
	fma.rn.f32 	%f589, %f579, 0f40490FDB, %f587;
	setp.eq.b32 	%p181, %r384, 1;
	setp.eq.s32 	%p41, %r256, 0;
	sub.f32 	%f231, %f230, %f227;
	selp.f32 	%f235, %f234, %f229, %p42;
	abs.f32 	%f236, %f746;
	setp.eq.s32 	%p60, %r270, 0;
	neg.f32 	%f282, %f280;
	add.s32 	%r271, %r268, 1;
	cvt.rzi.f32.f32 	%f287, %f706;
	setp.eq.s32 	%p80, %r292, 0;
	neg.f32 	%f334, %f332;
	add.s32 	%r293, %r290, 1;
	cvt.rzi.f32.f32 	%f339, %f710;
	selp.f32 	%f489, %f487, %f486, %p141;
	selp.f32 	%f491, %f488, %f490, %p142;
	and.b32  	%r353, %r352, 2;
	setp.eq.f32 	%p144, %f495, %f750;
	mul.f32 	%f496, %f750, 0f00000000;
	selp.f32 	%f540, %f538, %f539, %p161;
	and.b32  	%r365, %r363, 2;
	selp.f32 	%f590, %f588, %f589, %p181;
	and.b32  	%r385, %r383, 2;
	selp.f32 	%f232, %f227, %f231, %p41;
	setp.gt.f32 	%p43, %f236, 0f4B800000;
	add.f32 	%f237, %f235, 0f3F800000;
	selp.f32 	%f281, %f279, %f278, %p59;
	selp.f32 	%f283, %f280, %f282, %p60;
	and.b32  	%r272, %r271, 2;
	setp.eq.f32 	%p62, %f287, %f706;
	mul.f32 	%f288, %f706, 0f00000000;
	selp.f32 	%f333, %f331, %f330, %p79;
	selp.f32 	%f335, %f332, %f334, %p80;
	and.b32  	%r294, %r293, 2;
	setp.eq.f32 	%p82, %f339, %f710;
	mul.f32 	%f340, %f710, 0f00000000;
	setp.eq.s32 	%p143, %r353, 0;
	sub.f32 	%f493, %f230, %f489;
	selp.f32 	%f497, %f496, %f491, %p144;
	abs.f32 	%f498, %f750;
	setp.eq.s32 	%p162, %r365, 0;
	neg.f32 	%f542, %f540;
	add.s32 	%r366, %r363, 1;
	cvt.rzi.f32.f32 	%f547, %f726;
	setp.eq.s32 	%p182, %r385, 0;
	neg.f32 	%f592, %f590;
	add.s32 	%r386, %r383, 1;
	cvt.rzi.f32.f32 	%f597, %f730;
	selp.f32 	%f238, %f237, %f232, %p43;
	setp.eq.s32 	%p61, %r272, 0;
	sub.f32 	%f285, %f230, %f281;
	selp.f32 	%f16, %f288, %f283, %p62;
	abs.f32 	%f289, %f706;
	setp.eq.s32 	%p81, %r294, 0;
	sub.f32 	%f337, %f230, %f333;
	selp.f32 	%f341, %f340, %f335, %p82;
	abs.f32 	%f342, %f710;
	selp.f32 	%f494, %f489, %f493, %p143;
	setp.gt.f32 	%p145, %f498, 0f4B800000;
	add.f32 	%f499, %f497, 0f3F800000;
	selp.f32 	%f541, %f539, %f538, %p161;
	selp.f32 	%f543, %f540, %f542, %p162;
	and.b32  	%r367, %r366, 2;
	setp.eq.f32 	%p164, %f547, %f726;
	mul.f32 	%f548, %f726, 0f00000000;
	selp.f32 	%f591, %f589, %f588, %p181;
	selp.f32 	%f593, %f590, %f592, %p182;
	and.b32  	%r387, %r386, 2;
	setp.eq.f32 	%p184, %f597, %f730;
	mul.f32 	%f598, %f730, 0f00000000;
	mov.b32 	%r245, %f238;
	mov.b32 	%r248, %f235;
	selp.f32 	%f286, %f281, %f285, %p61;
	setp.gt.f32 	%p63, %f289, 0f4B800000;
	add.f32 	%f290, %f16, 0f3F800000;
	selp.f32 	%f338, %f333, %f337, %p81;
	setp.gt.f32 	%p83, %f342, 0f4B800000;
	add.f32 	%f343, %f341, 0f3F800000;
	selp.f32 	%f500, %f499, %f494, %p145;
	setp.eq.s32 	%p163, %r367, 0;
	sub.f32 	%f545, %f230, %f541;
	selp.f32 	%f94, %f548, %f543, %p164;
	abs.f32 	%f549, %f726;
	setp.eq.s32 	%p183, %r387, 0;
	sub.f32 	%f595, %f230, %f591;
	selp.f32 	%f599, %f598, %f593, %p184;
	abs.f32 	%f600, %f730;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r244, %r248, -2147483648;
	selp.f32 	%f17, %f290, %f286, %p63;
	selp.f32 	%f344, %f343, %f338, %p83;
	mov.b32 	%r342, %f500;
	mov.b32 	%r345, %f497;
	selp.f32 	%f546, %f541, %f545, %p163;
	setp.gt.f32 	%p165, %f549, 0f4B800000;
	add.f32 	%f550, %f94, 0f3F800000;
	selp.f32 	%f596, %f591, %f595, %p183;
	setp.gt.f32 	%p185, %f600, 0f4B800000;
	add.f32 	%f601, %f599, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r243, %r245, %r244;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r246, %r248, %r245;
	// end inline asm
	mov.b32 	%r283, %f344;
	mov.b32 	%r282, %f17;
	mov.b32 	%r286, %f341;
	mov.b32 	%r285, %f16;
	mov.b32 	%r329, %f75;
	mov.b32 	%r330, %f77;
	mov.b32 	%r332, %f76;
	mov.b32 	%r333, %f78;
	xor.b32  	%r341, %r345, -2147483648;
	selp.f32 	%f95, %f550, %f546, %p165;
	selp.f32 	%f602, %f601, %f596, %p185;
	// begin inline asm
	cvt.rn.f16x2.f32 %r281, %r283, %r282;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r284, %r286, %r285;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r328, %r330, %r329;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r331, %r333, %r332;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r340, %r342, %r341;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r343, %r345, %r342;
	// end inline asm
	mov.b32 	%r376, %f602;
	mov.b32 	%r375, %f95;
	mov.b32 	%r379, %f599;
	mov.b32 	%r378, %f94;
	// begin inline asm
	cvt.rn.f16x2.f32 %r374, %r376, %r375;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r377, %r379, %r378;
	// end inline asm
	mov.b32 	%r417, %f147;
	mov.b32 	%r418, %f149;
	// begin inline asm
	cvt.rn.f16x2.f32 %r416, %r418, %r417;
	// end inline asm
	mov.b32 	%r420, %f148;
	mov.b32 	%r421, %f150;
	// begin inline asm
	cvt.rn.f16x2.f32 %r419, %r421, %r420;
	// end inline asm
	shl.b32 	%r434, %r5, 6;
	and.b32  	%r435, %r434, 192;
	and.b32  	%r436, %r128, 1;
	shr.u32 	%r437, %r5, 3;
	and.b32  	%r438, %r437, 2;
	or.b32  	%r439, %r436, %r438;
	shl.b32 	%r440, %r439, 4;
	bfe.u32 	%r441, %r5, 3, 1;
	shl.b32 	%r442, %r1, 1;
	and.b32  	%r443, %r442, 14;
	or.b32  	%r444, %r441, %r443;
	or.b32  	%r445, %r440, %r435;
	or.b32  	%r446, %r445, %r444;
	mul.wide.u32 	%rd75, %r446, 4;
	add.s64 	%rd76, %rd2, %rd75;
	ld.global.u32 	%r153, [%rd76];
	ld.global.u32 	%r154, [%rd76+1024];
	shl.b32 	%r447, %r214, 13;
	shl.b32 	%r448, %r218, 7;
	add.s32 	%r155, %r448, %r447;
	shl.b32 	%r449, %r3, 7;
	shl.b32 	%r450, %r5, 2;
	or.b32  	%r156, %r450, %r449;
	and.b32  	%r157, %r5, 16;
	shr.u32 	%r451, %r5, 4;
	and.b32  	%r452, %r140, 30;
	or.b32  	%r453, %r452, %r451;
	mul.lo.s32 	%r454, %r453, 257;
	shr.u32 	%r455, %r1, 3;
	and.b32  	%r456, %r2, 224;
	mad.lo.s32 	%r457, %r455, 257, %r456;
	or.b32  	%r458, %r455, 2;
	mad.lo.s32 	%r459, %r458, 257, %r456;
	or.b32  	%r460, %r455, 4;
	mad.lo.s32 	%r461, %r460, 257, %r456;
	or.b32  	%r462, %r455, 6;
	mad.lo.s32 	%r463, %r462, 257, %r456;
	or.b32  	%r464, %r455, 8;
	mad.lo.s32 	%r465, %r464, 257, %r456;
	or.b32  	%r466, %r455, 10;
	mad.lo.s32 	%r467, %r466, 257, %r456;
	or.b32  	%r468, %r455, 12;
	mad.lo.s32 	%r469, %r468, 257, %r456;
	or.b32  	%r470, %r455, 14;
	mad.lo.s32 	%r471, %r470, 257, %r456;
	or.b32  	%r472, %r455, 16;
	mad.lo.s32 	%r473, %r472, 257, %r456;
	or.b32  	%r474, %r455, 18;
	mad.lo.s32 	%r475, %r474, 257, %r456;
	or.b32  	%r476, %r455, 20;
	mad.lo.s32 	%r477, %r476, 257, %r456;
	or.b32  	%r478, %r455, 22;
	mad.lo.s32 	%r479, %r478, 257, %r456;
	or.b32  	%r480, %r455, 24;
	mad.lo.s32 	%r481, %r480, 257, %r456;
	or.b32  	%r482, %r455, 26;
	mad.lo.s32 	%r483, %r482, 257, %r456;
	or.b32  	%r484, %r455, 28;
	mad.lo.s32 	%r485, %r484, 257, %r456;
	or.b32  	%r486, %r455, 30;
	mad.lo.s32 	%r487, %r486, 257, %r456;
	mul.lo.s32 	%r488, %r127, 2184;
	mad.lo.s32 	%r489, %r439, 546, %r488;
	mad.lo.s32 	%r490, %r444, 33, %r489;
	setp.lt.u32 	%p230, %r5, 4;
	setp.eq.s32 	%p231, %r128, 4;
	setp.eq.s32 	%p232, %r128, 5;
	bfe.s32 	%r491, %r1, 1, 1;
	and.b32  	%r492, %r491, 1032;
	bfe.s32 	%r493, %r5, 3, 1;
	and.b32  	%r494, %r5, 8;
	setp.eq.s32 	%p233, %r494, 0;
	and.b32  	%r495, %r493, 4144;
	mul.lo.s32 	%r496, %r455, 258;
	and.b32  	%r497, %r450, 12;
	and.b32  	%r498, %r1, 1;
	neg.s32 	%r499, %r498;
	setp.eq.b32 	%p234, %r498, 1;
	and.b32  	%r500, %r499, 2064;
	bfe.s32 	%r501, %r1, 2, 1;
	and.b32  	%r502, %r1, 4;
	setp.eq.s32 	%p235, %r502, 0;
	and.b32  	%r503, %r501, 516;
	or.b32  	%r504, %r439, %r492;
	add.s32 	%r505, %r497, %r496;
	add.s32 	%r506, %r505, %r495;
	add.s32 	%r507, %r506, %r500;
	add.s32 	%r508, %r507, %r503;
	add.s32 	%r509, %r508, %r504;
	mul.wide.u32 	%rd77, %r509, 4;
	mov.u64 	%rd78, shmem;
	add.s64 	%rd7, %rd78, %rd77;
	cvt.u64.u32 	%rd79, %r504;
	selp.b64 	%rd80, 0, 516, %p235;
	selp.b64 	%rd81, 2064, 0, %p234;
	selp.b64 	%rd82, 0, 4144, %p233;
	cvt.u64.u32 	%rd83, %r497;
	cvt.u64.u32 	%rd84, %r496;
	add.s64 	%rd85, %rd84, %rd83;
	add.s64 	%rd86, %rd85, %rd82;
	add.s64 	%rd87, %rd86, %rd81;
	add.s64 	%rd88, %rd87, %rd80;
	add.s64 	%rd89, %rd88, %rd79;
	shl.b64 	%rd90, %rd89, 2;
	add.s64 	%rd8, %rd78, %rd90;
	shl.b32 	%r510, %r216, 20;
	shl.b32 	%r511, %r220, 9;
	add.s32 	%r512, %r511, %r510;
	or.b32  	%r158, %r157, %r2;
	and.b32  	%r159, %r5, 15;
	cvt.s64.s32 	%rd9, %r512;
	add.s32 	%r513, %r1, %r454;
	mul.wide.u32 	%rd91, %r513, 4;
	add.s64 	%rd10, %rd78, %rd91;
	cvt.u64.u32 	%rd92, %r1;
	cvt.u64.u32 	%rd11, %r454;
	add.s64 	%rd93, %rd11, %rd92;
	shl.b64 	%rd94, %rd93, 2;
	add.s64 	%rd12, %rd78, %rd94;
	add.s32 	%r514, %r457, %r5;
	mul.wide.u32 	%rd95, %r514, 4;
	add.s64 	%rd13, %rd78, %rd95;
	add.s32 	%r515, %r459, %r5;
	mul.wide.u32 	%rd96, %r515, 4;
	add.s64 	%rd14, %rd78, %rd96;
	add.s32 	%r516, %r461, %r5;
	mul.wide.u32 	%rd97, %r516, 4;
	add.s64 	%rd15, %rd78, %rd97;
	add.s32 	%r517, %r463, %r5;
	mul.wide.u32 	%rd98, %r517, 4;
	add.s64 	%rd16, %rd78, %rd98;
	add.s32 	%r518, %r465, %r5;
	mul.wide.u32 	%rd99, %r518, 4;
	add.s64 	%rd17, %rd78, %rd99;
	add.s32 	%r519, %r467, %r5;
	mul.wide.u32 	%rd100, %r519, 4;
	add.s64 	%rd18, %rd78, %rd100;
	add.s32 	%r520, %r469, %r5;
	mul.wide.u32 	%rd101, %r520, 4;
	add.s64 	%rd19, %rd78, %rd101;
	add.s32 	%r521, %r471, %r5;
	mul.wide.u32 	%rd102, %r521, 4;
	add.s64 	%rd20, %rd78, %rd102;
	add.s32 	%r522, %r473, %r5;
	mul.wide.u32 	%rd103, %r522, 4;
	add.s64 	%rd21, %rd78, %rd103;
	add.s32 	%r523, %r475, %r5;
	mul.wide.u32 	%rd104, %r523, 4;
	add.s64 	%rd22, %rd78, %rd104;
	add.s32 	%r524, %r477, %r5;
	mul.wide.u32 	%rd105, %r524, 4;
	add.s64 	%rd23, %rd78, %rd105;
	add.s32 	%r525, %r479, %r5;
	mul.wide.u32 	%rd106, %r525, 4;
	add.s64 	%rd24, %rd78, %rd106;
	add.s32 	%r526, %r481, %r5;
	mul.wide.u32 	%rd107, %r526, 4;
	add.s64 	%rd25, %rd78, %rd107;
	add.s32 	%r527, %r483, %r5;
	mul.wide.u32 	%rd108, %r527, 4;
	add.s64 	%rd26, %rd78, %rd108;
	add.s32 	%r528, %r485, %r5;
	mul.wide.u32 	%rd109, %r528, 4;
	add.s64 	%rd27, %rd78, %rd109;
	add.s32 	%r529, %r487, %r5;
	mul.wide.u32 	%rd110, %r529, 4;
	add.s64 	%rd28, %rd78, %rd110;
	add.s32 	%r530, %r490, %r455;
	mul.wide.u32 	%rd111, %r530, 4;
	add.s64 	%rd29, %rd78, %rd111;
	add.s32 	%r531, %r490, %r458;
	mul.wide.u32 	%rd112, %r531, 4;
	add.s64 	%rd30, %rd78, %rd112;
	add.s32 	%r532, %r490, %r460;
	mul.wide.u32 	%rd113, %r532, 4;
	add.s64 	%rd31, %rd78, %rd113;
	add.s32 	%r533, %r490, %r462;
	mul.wide.u32 	%rd114, %r533, 4;
	add.s64 	%rd32, %rd78, %rd114;
	add.s32 	%r534, %r490, %r464;
	mul.wide.u32 	%rd115, %r534, 4;
	add.s64 	%rd33, %rd78, %rd115;
	add.s32 	%r535, %r490, %r466;
	mul.wide.u32 	%rd116, %r535, 4;
	add.s64 	%rd34, %rd78, %rd116;
	add.s32 	%r536, %r490, %r468;
	mul.wide.u32 	%rd117, %r536, 4;
	add.s64 	%rd35, %rd78, %rd117;
	add.s32 	%r537, %r490, %r470;
	mul.wide.u32 	%rd118, %r537, 4;
	add.s64 	%rd36, %rd78, %rd118;
	add.s32 	%r538, %r490, %r472;
	mul.wide.u32 	%rd119, %r538, 4;
	add.s64 	%rd37, %rd78, %rd119;
	add.s32 	%r539, %r490, %r474;
	mul.wide.u32 	%rd120, %r539, 4;
	add.s64 	%rd38, %rd78, %rd120;
	add.s32 	%r540, %r490, %r476;
	mul.wide.u32 	%rd121, %r540, 4;
	add.s64 	%rd39, %rd78, %rd121;
	add.s32 	%r541, %r490, %r478;
	mul.wide.u32 	%rd122, %r541, 4;
	add.s64 	%rd40, %rd78, %rd122;
	add.s32 	%r542, %r490, %r480;
	mul.wide.u32 	%rd123, %r542, 4;
	add.s64 	%rd41, %rd78, %rd123;
	add.s32 	%r543, %r490, %r482;
	mul.wide.u32 	%rd124, %r543, 4;
	add.s64 	%rd42, %rd78, %rd124;
	add.s32 	%r544, %r490, %r484;
	mul.wide.u32 	%rd125, %r544, 4;
	add.s64 	%rd43, %rd78, %rd125;
	add.s32 	%r545, %r490, %r486;
	mul.wide.u32 	%rd126, %r545, 4;
	add.s64 	%rd44, %rd78, %rd126;
	add.s32 	%r546, %r128, -1;
	setp.lt.u32 	%p236, %r546, 3;
	or.pred  	%p237, %p230, %p236;
	or.pred  	%p238, %p237, %p231;
	and.b32  	%r547, %r5, 24;
	setp.eq.s32 	%p239, %r547, 24;
	or.pred  	%p240, %p232, %p239;
	selp.b32 	%r160, 1145324612, -286331154, %p237;
	or.pred  	%p1, %p238, %p240;
	add.s32 	%r548, %r509, 32;
	mul.wide.u32 	%rd127, %r548, 4;
	add.s64 	%rd45, %rd78, %rd127;
	add.s32 	%r549, %r509, 48;
	mul.wide.u32 	%rd128, %r549, 4;
	add.s64 	%rd46, %rd78, %rd128;
	add.s32 	%r550, %r509, 64;
	mul.wide.u32 	%rd129, %r550, 4;
	add.s64 	%rd47, %rd78, %rd129;
	add.s32 	%r551, %r509, 80;
	mul.wide.u32 	%rd130, %r551, 4;
	add.s64 	%rd48, %rd78, %rd130;
	add.s32 	%r552, %r509, 96;
	mul.wide.u32 	%rd131, %r552, 4;
	add.s64 	%rd49, %rd78, %rd131;
	add.s32 	%r553, %r509, 112;
	mul.wide.u32 	%rd132, %r553, 4;
	add.s64 	%rd50, %rd78, %rd132;
	add.s32 	%r554, %r509, 128;
	mul.wide.u32 	%rd133, %r554, 4;
	add.s64 	%rd51, %rd78, %rd133;
	add.s32 	%r555, %r509, 144;
	mul.wide.u32 	%rd134, %r555, 4;
	add.s64 	%rd52, %rd78, %rd134;
	add.s32 	%r556, %r509, 160;
	mul.wide.u32 	%rd135, %r556, 4;
	add.s64 	%rd53, %rd78, %rd135;
	add.s32 	%r557, %r509, 176;
	mul.wide.u32 	%rd136, %r557, 4;
	add.s64 	%rd54, %rd78, %rd136;
	add.s32 	%r558, %r509, 192;
	mul.wide.u32 	%rd137, %r558, 4;
	add.s64 	%rd55, %rd78, %rd137;
	add.s32 	%r559, %r509, 208;
	mul.wide.u32 	%rd138, %r559, 4;
	add.s64 	%rd56, %rd78, %rd138;
	add.s32 	%r560, %r509, 224;
	mul.wide.u32 	%rd139, %r560, 4;
	add.s64 	%rd57, %rd78, %rd139;
	add.s32 	%r561, %r509, 240;
	mul.wide.u32 	%rd140, %r561, 4;
	add.s64 	%rd58, %rd78, %rd140;
	mov.u32 	%r88, 0;
	setp.eq.s32 	%p242, %r157, 0;
	mov.u16 	%rs38, 25600;
	mov.u16 	%rs40, 21504;
	mov.u16 	%rs44, 18432;
	mov.u32 	%r3339, %r88;
	mov.u32 	%r3340, %r88;
	mov.u32 	%r3344, %r88;
	bra.uni 	$L__BB0_184;
$L__BB0_155:                            // %L29311
                                        //   in Loop: Header=BB0_184 Depth=1
	add.s32 	%r126, %r88, 64;
	setp.ne.s32 	%p289, %r88, 32704;
	mov.u32 	%r88, %r126;
	@%p289 bra 	$L__BB0_184;
	bra.uni 	$L__BB0_156;
$L__BB0_184:                            // %L1564
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_202 Depth 2
                                        //     Child Loop BB0_153 Depth 2
	add.s32 	%r562, %r88, %r214;
	setp.lt.s32 	%p241, %r562, %r215;
	@%p241 bra 	$L__BB0_185;
	bra.uni 	$L__BB0_156;
$L__BB0_185:                            // %pass706
                                        //   in Loop: Header=BB0_184 Depth=1
	cvt.u32.u64 	%r755, %rd11;
	or.b32  	%r756, %r88, %r1;
	shl.b32 	%r757, %r756, 13;
	and.b32  	%r758, %r757, 268034048;
	or.b32  	%r759, %r156, %r758;
	add.s32 	%r760, %r155, %r759;
	shr.s32 	%r761, %r760, 31;
	shr.u32 	%r762, %r761, 4;
	add.s32 	%r763, %r760, %r762;
	shr.s32 	%r764, %r763, 28;
	setp.lt.s32 	%p243, %r760, 0;
	and.b32  	%r765, %r763, -268435456;
	setp.ne.s32 	%p244, %r765, %r760;
	and.pred  	%p245, %p243, %p244;
	selp.u32 	%r766, 1, 0, %p245;
	sub.s32 	%r767, %r766, %r764;
	shl.b32 	%r768, %r767, 28;
	add.s32 	%r769, %r768, %r760;
	mul.wide.s32 	%rd141, %r769, 4;
	add.s64 	%rd142, %rd3, %rd141;
	ld.global.v4.u32 	{%r770, %r771, %r772, %r773}, [%rd142];
	or.b32  	%r774, %r756, 16;
	shl.b32 	%r775, %r774, 13;
	and.b32  	%r776, %r775, 268165120;
	or.b32  	%r777, %r156, %r776;
	add.s32 	%r778, %r155, %r777;
	shr.s32 	%r779, %r778, 31;
	shr.u32 	%r780, %r779, 4;
	add.s32 	%r781, %r778, %r780;
	shr.s32 	%r782, %r781, 28;
	setp.lt.s32 	%p246, %r778, 0;
	and.b32  	%r783, %r781, -268435456;
	setp.ne.s32 	%p247, %r783, %r778;
	and.pred  	%p248, %p246, %p247;
	selp.u32 	%r784, 1, 0, %p248;
	sub.s32 	%r785, %r784, %r782;
	shl.b32 	%r786, %r785, 28;
	add.s32 	%r787, %r786, %r778;
	mul.wide.s32 	%rd143, %r787, 4;
	add.s64 	%rd144, %rd3, %rd143;
	ld.global.v4.u32 	{%r788, %r789, %r790, %r791}, [%rd144];
	and.b32  	%r792, %r88, 32704;
	or.b32  	%r793, %r1, %r792;
	shl.b32 	%r794, %r793, 13;
	or.b32  	%r795, %r794, %r156;
	or.b32  	%r796, %r795, 262144;
	add.s32 	%r797, %r155, %r796;
	shr.s32 	%r798, %r797, 31;
	shr.u32 	%r799, %r798, 4;
	add.s32 	%r800, %r797, %r799;
	shr.s32 	%r801, %r800, 28;
	setp.lt.s32 	%p249, %r797, 0;
	and.b32  	%r802, %r800, -268435456;
	setp.ne.s32 	%p250, %r802, %r797;
	and.pred  	%p251, %p249, %p250;
	selp.u32 	%r803, 1, 0, %p251;
	sub.s32 	%r804, %r803, %r801;
	shl.b32 	%r805, %r804, 28;
	add.s32 	%r806, %r805, %r797;
	mul.wide.s32 	%rd145, %r806, 4;
	add.s64 	%rd146, %rd3, %rd145;
	ld.global.v4.u32 	{%r807, %r808, %r809, %r810}, [%rd146];
	or.b32  	%r811, %r795, 393216;
	add.s32 	%r812, %r155, %r811;
	shr.s32 	%r813, %r812, 31;
	shr.u32 	%r814, %r813, 4;
	add.s32 	%r815, %r812, %r814;
	shr.s32 	%r816, %r815, 28;
	setp.lt.s32 	%p252, %r812, 0;
	and.b32  	%r817, %r815, -268435456;
	setp.ne.s32 	%p253, %r817, %r812;
	and.pred  	%p254, %p252, %p253;
	selp.u32 	%r818, 1, 0, %p254;
	sub.s32 	%r819, %r818, %r816;
	shl.b32 	%r820, %r819, 28;
	add.s32 	%r821, %r820, %r812;
	mul.wide.s32 	%rd147, %r821, 4;
	add.s64 	%rd148, %rd3, %rd147;
	ld.global.v4.u32 	{%r822, %r823, %r824, %r825}, [%rd148];
	selp.b32 	%r826, %r772, %r770, %p242;
	shfl.sync.bfly.b32	%r827, %r826, 16, 31, -1;
	selp.b32 	%r565, %r770, %r827, %p242;
	selp.b32 	%r570, %r827, %r772, %p242;
	selp.b32 	%r828, %r773, %r771, %p242;
	shfl.sync.bfly.b32	%r829, %r828, 16, 31, -1;
	selp.b32 	%r573, %r771, %r829, %p242;
	selp.b32 	%r578, %r829, %r773, %p242;
	selp.b32 	%r830, %r790, %r788, %p242;
	shfl.sync.bfly.b32	%r831, %r830, 16, 31, -1;
	selp.b32 	%r581, %r788, %r831, %p242;
	selp.b32 	%r586, %r831, %r790, %p242;
	selp.b32 	%r832, %r791, %r789, %p242;
	shfl.sync.bfly.b32	%r833, %r832, 16, 31, -1;
	selp.b32 	%r589, %r789, %r833, %p242;
	selp.b32 	%r594, %r833, %r791, %p242;
	selp.b32 	%r834, %r809, %r807, %p242;
	shfl.sync.bfly.b32	%r835, %r834, 16, 31, -1;
	selp.b32 	%r597, %r807, %r835, %p242;
	selp.b32 	%r602, %r835, %r809, %p242;
	selp.b32 	%r836, %r810, %r808, %p242;
	shfl.sync.bfly.b32	%r837, %r836, 16, 31, -1;
	selp.b32 	%r605, %r808, %r837, %p242;
	selp.b32 	%r610, %r837, %r810, %p242;
	selp.b32 	%r838, %r824, %r822, %p242;
	shfl.sync.bfly.b32	%r839, %r838, 16, 31, -1;
	selp.b32 	%r613, %r822, %r839, %p242;
	selp.b32 	%r618, %r839, %r824, %p242;
	selp.b32 	%r840, %r825, %r823, %p242;
	shfl.sync.bfly.b32	%r841, %r840, 16, 31, -1;
	selp.b32 	%r621, %r823, %r841, %p242;
	selp.b32 	%r626, %r841, %r825, %p242;
	shl.b32 	%r566, %r570, 4;
	mov.u32 	%r564, 252645135;
	// begin inline asm
	lop3.b32 %r628, %r564, %r565, %r566, 202;
	// end inline asm
	shr.u32 	%r569, %r565, 4;
	// begin inline asm
	lop3.b32 %r644, %r564, %r569, %r570, 202;
	// end inline asm
	shl.b32 	%r574, %r578, 4;
	// begin inline asm
	lop3.b32 %r636, %r564, %r573, %r574, 202;
	// end inline asm
	shr.u32 	%r577, %r573, 4;
	// begin inline asm
	lop3.b32 %r652, %r564, %r577, %r578, 202;
	// end inline asm
	shl.b32 	%r582, %r586, 4;
	// begin inline asm
	lop3.b32 %r660, %r564, %r581, %r582, 202;
	// end inline asm
	shr.u32 	%r585, %r581, 4;
	// begin inline asm
	lop3.b32 %r676, %r564, %r585, %r586, 202;
	// end inline asm
	shl.b32 	%r590, %r594, 4;
	// begin inline asm
	lop3.b32 %r668, %r564, %r589, %r590, 202;
	// end inline asm
	shr.u32 	%r593, %r589, 4;
	// begin inline asm
	lop3.b32 %r684, %r564, %r593, %r594, 202;
	// end inline asm
	shl.b32 	%r598, %r602, 4;
	// begin inline asm
	lop3.b32 %r629, %r564, %r597, %r598, 202;
	// end inline asm
	shr.u32 	%r601, %r597, 4;
	// begin inline asm
	lop3.b32 %r645, %r564, %r601, %r602, 202;
	// end inline asm
	shl.b32 	%r606, %r610, 4;
	// begin inline asm
	lop3.b32 %r637, %r564, %r605, %r606, 202;
	// end inline asm
	shr.u32 	%r609, %r605, 4;
	// begin inline asm
	lop3.b32 %r653, %r564, %r609, %r610, 202;
	// end inline asm
	shl.b32 	%r614, %r618, 4;
	// begin inline asm
	lop3.b32 %r661, %r564, %r613, %r614, 202;
	// end inline asm
	shr.u32 	%r617, %r613, 4;
	// begin inline asm
	lop3.b32 %r677, %r564, %r617, %r618, 202;
	// end inline asm
	shl.b32 	%r622, %r626, 4;
	// begin inline asm
	lop3.b32 %r669, %r564, %r621, %r622, 202;
	// end inline asm
	shr.u32 	%r625, %r621, 4;
	// begin inline asm
	lop3.b32 %r685, %r564, %r625, %r626, 202;
	// end inline asm
	mov.u32 	%r630, 25152;
	// begin inline asm
	prmt.b32 %r692, %r628, %r629, %r630;
	// end inline asm
	mov.u32 	%r634, 29521;
	// begin inline asm
	prmt.b32 %r724, %r628, %r629, %r634;
	// end inline asm
	// begin inline asm
	prmt.b32 %r700, %r636, %r637, %r630;
	// end inline asm
	// begin inline asm
	prmt.b32 %r732, %r636, %r637, %r634;
	// end inline asm
	// begin inline asm
	prmt.b32 %r693, %r644, %r645, %r630;
	// end inline asm
	// begin inline asm
	prmt.b32 %r725, %r644, %r645, %r634;
	// end inline asm
	// begin inline asm
	prmt.b32 %r701, %r652, %r653, %r630;
	// end inline asm
	// begin inline asm
	prmt.b32 %r733, %r652, %r653, %r634;
	// end inline asm
	// begin inline asm
	prmt.b32 %r708, %r660, %r661, %r630;
	// end inline asm
	// begin inline asm
	prmt.b32 %r740, %r660, %r661, %r634;
	// end inline asm
	// begin inline asm
	prmt.b32 %r716, %r668, %r669, %r630;
	// end inline asm
	// begin inline asm
	prmt.b32 %r748, %r668, %r669, %r634;
	// end inline asm
	// begin inline asm
	prmt.b32 %r709, %r676, %r677, %r630;
	// end inline asm
	// begin inline asm
	prmt.b32 %r741, %r676, %r677, %r634;
	// end inline asm
	// begin inline asm
	prmt.b32 %r717, %r684, %r685, %r630;
	// end inline asm
	// begin inline asm
	prmt.b32 %r749, %r684, %r685, %r634;
	// end inline asm
	mov.u32 	%r694, 21520;
	// begin inline asm
	prmt.b32 %r691, %r692, %r693, %r694;
	// end inline asm
	mov.u32 	%r698, 30258;
	// begin inline asm
	prmt.b32 %r695, %r692, %r693, %r698;
	// end inline asm
	// begin inline asm
	prmt.b32 %r699, %r700, %r701, %r694;
	// end inline asm
	// begin inline asm
	prmt.b32 %r703, %r700, %r701, %r698;
	// end inline asm
	// begin inline asm
	prmt.b32 %r707, %r708, %r709, %r694;
	// end inline asm
	// begin inline asm
	prmt.b32 %r711, %r708, %r709, %r698;
	// end inline asm
	// begin inline asm
	prmt.b32 %r715, %r716, %r717, %r694;
	// end inline asm
	// begin inline asm
	prmt.b32 %r719, %r716, %r717, %r698;
	// end inline asm
	// begin inline asm
	prmt.b32 %r723, %r724, %r725, %r694;
	// end inline asm
	// begin inline asm
	prmt.b32 %r727, %r724, %r725, %r698;
	// end inline asm
	// begin inline asm
	prmt.b32 %r731, %r732, %r733, %r694;
	// end inline asm
	// begin inline asm
	prmt.b32 %r735, %r732, %r733, %r698;
	// end inline asm
	// begin inline asm
	prmt.b32 %r739, %r740, %r741, %r694;
	// end inline asm
	// begin inline asm
	prmt.b32 %r743, %r740, %r741, %r698;
	// end inline asm
	// begin inline asm
	prmt.b32 %r747, %r748, %r749, %r694;
	// end inline asm
	// begin inline asm
	prmt.b32 %r751, %r748, %r749, %r698;
	// end inline asm
	st.shared.u32 	[%rd10], %r691;
	st.shared.u32 	[%rd12+512], %r699;
	st.shared.u32 	[%rd12+256], %r695;
	st.shared.u32 	[%rd12+768], %r703;
	and.b32  	%r842, %r774, 31;
	add.s32 	%r843, %r842, %r755;
	mul.wide.u32 	%rd149, %r843, 4;
	add.s64 	%rd151, %rd78, %rd149;
	st.shared.u32 	[%rd151], %r707;
	cvt.u64.u32 	%rd152, %r842;
	add.s64 	%rd153, %rd11, %rd152;
	shl.b64 	%rd154, %rd153, 2;
	add.s64 	%rd155, %rd78, %rd154;
	st.shared.u32 	[%rd155+512], %r715;
	st.shared.u32 	[%rd155+256], %r711;
	st.shared.u32 	[%rd155+768], %r719;
	st.shared.u32 	[%rd12+128], %r723;
	st.shared.u32 	[%rd12+640], %r731;
	st.shared.u32 	[%rd12+384], %r727;
	st.shared.u32 	[%rd12+896], %r735;
	st.shared.u32 	[%rd155+128], %r739;
	st.shared.u32 	[%rd155+640], %r747;
	st.shared.u32 	[%rd155+384], %r743;
	st.shared.u32 	[%rd155+896], %r751;
	bar.sync 	0;
	ld.shared.u32 	%r161, [%rd13];
	ld.shared.u32 	%r162, [%rd14];
	ld.shared.u32 	%r163, [%rd15];
	ld.shared.u32 	%r164, [%rd16];
	ld.shared.u32 	%r165, [%rd17];
	ld.shared.u32 	%r166, [%rd18];
	ld.shared.u32 	%r167, [%rd19];
	ld.shared.u32 	%r168, [%rd20];
	ld.shared.u32 	%r169, [%rd21];
	ld.shared.u32 	%r170, [%rd22];
	ld.shared.u32 	%r171, [%rd23];
	ld.shared.u32 	%r172, [%rd24];
	ld.shared.u32 	%r173, [%rd25];
	ld.shared.u32 	%r174, [%rd26];
	ld.shared.u32 	%r175, [%rd27];
	ld.shared.u32 	%r176, [%rd28];
	bar.sync 	0;
	shfl.sync.idx.b32	%r177, %r152, 0, 31, -1;
	shfl.sync.idx.b32	%r178, %r152, 1, 31, -1;
	shfl.sync.idx.b32	%r179, %r152, 2, 31, -1;
	shfl.sync.idx.b32	%r180, %r152, 3, 31, -1;
	shfl.sync.idx.b32	%r181, %r152, 4, 31, -1;
	shfl.sync.idx.b32	%r182, %r152, 5, 31, -1;
	shfl.sync.idx.b32	%r183, %r152, 6, 31, -1;
	shfl.sync.idx.b32	%r184, %r152, 7, 31, -1;
	shfl.sync.idx.b32	%r185, %r152, 8, 31, -1;
	shfl.sync.idx.b32	%r186, %r152, 9, 31, -1;
	shfl.sync.idx.b32	%r187, %r152, 10, 31, -1;
	shfl.sync.idx.b32	%r188, %r152, 11, 31, -1;
	shfl.sync.idx.b32	%r189, %r152, 12, 31, -1;
	shfl.sync.idx.b32	%r190, %r152, 13, 31, -1;
	shfl.sync.idx.b32	%r191, %r152, 14, 31, -1;
	shfl.sync.idx.b32	%r192, %r152, 15, 31, -1;
	setp.eq.s32 	%p255, %r177, 999999999;
	@%p255 bra 	$L__BB0_135;
// %bb.186:                             // %pass3061
                                        //   in Loop: Header=BB0_184 Depth=1
	add.s32 	%r844, %r177, %r5;
	mul.wide.s32 	%rd156, %r844, 4;
	add.s64 	%rd158, %rd78, %rd156;
	st.shared.u32 	[%rd158], %r161;
	setp.eq.s32 	%p256, %r178, 999999999;
	@%p256 bra 	$L__BB0_136;
// %bb.187:                             // %pass3129
                                        //   in Loop: Header=BB0_184 Depth=1
	add.s32 	%r845, %r178, %r5;
	mul.wide.s32 	%rd159, %r845, 4;
	add.s64 	%rd161, %rd78, %rd159;
	st.shared.u32 	[%rd161], %r162;
	setp.eq.s32 	%p257, %r179, 999999999;
	@%p257 bra 	$L__BB0_137;
// %bb.188:                             // %pass3197
                                        //   in Loop: Header=BB0_184 Depth=1
	add.s32 	%r846, %r179, %r5;
	mul.wide.s32 	%rd162, %r846, 4;
	add.s64 	%rd164, %rd78, %rd162;
	st.shared.u32 	[%rd164], %r163;
	setp.eq.s32 	%p258, %r180, 999999999;
	@%p258 bra 	$L__BB0_138;
// %bb.189:                             // %pass3265
                                        //   in Loop: Header=BB0_184 Depth=1
	add.s32 	%r847, %r180, %r5;
	mul.wide.s32 	%rd165, %r847, 4;
	add.s64 	%rd167, %rd78, %rd165;
	st.shared.u32 	[%rd167], %r164;
	setp.eq.s32 	%p259, %r181, 999999999;
	@%p259 bra 	$L__BB0_139;
// %bb.190:                             // %pass3333
                                        //   in Loop: Header=BB0_184 Depth=1
	add.s32 	%r848, %r181, %r5;
	mul.wide.s32 	%rd168, %r848, 4;
	add.s64 	%rd170, %rd78, %rd168;
	st.shared.u32 	[%rd170], %r165;
	setp.eq.s32 	%p260, %r182, 999999999;
	@%p260 bra 	$L__BB0_140;
// %bb.191:                             // %pass3401
                                        //   in Loop: Header=BB0_184 Depth=1
	add.s32 	%r849, %r182, %r5;
	mul.wide.s32 	%rd171, %r849, 4;
	add.s64 	%rd173, %rd78, %rd171;
	st.shared.u32 	[%rd173], %r166;
	setp.eq.s32 	%p261, %r183, 999999999;
	@%p261 bra 	$L__BB0_141;
// %bb.192:                             // %pass3469
                                        //   in Loop: Header=BB0_184 Depth=1
	add.s32 	%r850, %r183, %r5;
	mul.wide.s32 	%rd174, %r850, 4;
	add.s64 	%rd176, %rd78, %rd174;
	st.shared.u32 	[%rd176], %r167;
	setp.eq.s32 	%p262, %r184, 999999999;
	@%p262 bra 	$L__BB0_142;
// %bb.193:                             // %pass3537
                                        //   in Loop: Header=BB0_184 Depth=1
	add.s32 	%r851, %r184, %r5;
	mul.wide.s32 	%rd177, %r851, 4;
	add.s64 	%rd179, %rd78, %rd177;
	st.shared.u32 	[%rd179], %r168;
	setp.eq.s32 	%p263, %r185, 999999999;
	@%p263 bra 	$L__BB0_143;
// %bb.194:                             // %pass3605
                                        //   in Loop: Header=BB0_184 Depth=1
	add.s32 	%r852, %r185, %r5;
	mul.wide.s32 	%rd180, %r852, 4;
	add.s64 	%rd182, %rd78, %rd180;
	st.shared.u32 	[%rd182], %r169;
	setp.eq.s32 	%p264, %r186, 999999999;
	@%p264 bra 	$L__BB0_144;
// %bb.195:                             // %pass3673
                                        //   in Loop: Header=BB0_184 Depth=1
	add.s32 	%r853, %r186, %r5;
	mul.wide.s32 	%rd183, %r853, 4;
	add.s64 	%rd185, %rd78, %rd183;
	st.shared.u32 	[%rd185], %r170;
	setp.eq.s32 	%p265, %r187, 999999999;
	@%p265 bra 	$L__BB0_145;
// %bb.196:                             // %pass3741
                                        //   in Loop: Header=BB0_184 Depth=1
	add.s32 	%r854, %r187, %r5;
	mul.wide.s32 	%rd186, %r854, 4;
	add.s64 	%rd188, %rd78, %rd186;
	st.shared.u32 	[%rd188], %r171;
	setp.eq.s32 	%p266, %r188, 999999999;
	@%p266 bra 	$L__BB0_146;
// %bb.197:                             // %pass3809
                                        //   in Loop: Header=BB0_184 Depth=1
	add.s32 	%r855, %r188, %r5;
	mul.wide.s32 	%rd189, %r855, 4;
	add.s64 	%rd191, %rd78, %rd189;
	st.shared.u32 	[%rd191], %r172;
	setp.eq.s32 	%p267, %r189, 999999999;
	@%p267 bra 	$L__BB0_147;
// %bb.198:                             // %pass3877
                                        //   in Loop: Header=BB0_184 Depth=1
	add.s32 	%r856, %r189, %r5;
	mul.wide.s32 	%rd192, %r856, 4;
	add.s64 	%rd194, %rd78, %rd192;
	st.shared.u32 	[%rd194], %r173;
	setp.eq.s32 	%p268, %r190, 999999999;
	@%p268 bra 	$L__BB0_148;
// %bb.199:                             // %pass3945
                                        //   in Loop: Header=BB0_184 Depth=1
	add.s32 	%r857, %r190, %r5;
	mul.wide.s32 	%rd195, %r857, 4;
	add.s64 	%rd197, %rd78, %rd195;
	st.shared.u32 	[%rd197], %r174;
	setp.eq.s32 	%p269, %r191, 999999999;
	@%p269 bra 	$L__BB0_149;
// %bb.200:                             // %pass4013
                                        //   in Loop: Header=BB0_184 Depth=1
	add.s32 	%r858, %r191, %r5;
	mul.wide.s32 	%rd198, %r858, 4;
	add.s64 	%rd200, %rd78, %rd198;
	st.shared.u32 	[%rd200], %r175;
	setp.eq.s32 	%p270, %r192, 999999999;
	@%p270 bra 	$L__BB0_150;
// %bb.201:                             // %pass4081
                                        //   in Loop: Header=BB0_184 Depth=1
	add.s32 	%r860, %r192, %r5;
	mul.wide.s32 	%rd201, %r860, 4;
	add.s64 	%rd203, %rd78, %rd201;
	st.shared.u32 	[%rd203], %r176;
	bar.sync 	0;
	ld.shared.u32 	%r193, [%rd29];
	ld.shared.u32 	%r194, [%rd30];
	ld.shared.u32 	%r195, [%rd31];
	ld.shared.u32 	%r196, [%rd32];
	ld.shared.u32 	%r197, [%rd33];
	ld.shared.u32 	%r198, [%rd34];
	ld.shared.u32 	%r199, [%rd35];
	ld.shared.u32 	%r200, [%rd36];
	ld.shared.u32 	%r201, [%rd37];
	ld.shared.u32 	%r202, [%rd38];
	ld.shared.u32 	%r203, [%rd39];
	ld.shared.u32 	%r204, [%rd40];
	ld.shared.u32 	%r205, [%rd41];
	ld.shared.u32 	%r206, [%rd42];
	ld.shared.u32 	%r207, [%rd43];
	ld.shared.u32 	%r208, [%rd44];
	bar.sync 	0;
	mov.u32 	%r3331, 16;
	bra.uni 	$L__BB0_202;
$L__BB0_151:                            // %L20781
                                        //   in Loop: Header=BB0_202 Depth=2
	bar.sync 	0;
	add.s32 	%r3331, %r3331, -8;
	setp.ne.s32 	%p279, %r3331, -16;
	@%p279 bra 	$L__BB0_202;
	bra.uni 	$L__BB0_152;
$L__BB0_202:                            // %L12288
                                        //   Parent Loop BB0_184 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p271, %r3331, 16;
	selp.b32 	%r1253, %r193, 0, %p271;
	setp.eq.s32 	%p272, %r3331, 8;
	selp.b32 	%r1254, %r197, %r1253, %p272;
	setp.eq.s32 	%p273, %r3331, 0;
	selp.b32 	%r1255, %r201, %r1254, %p273;
	setp.eq.s32 	%p274, %r3331, -8;
	selp.b32 	%r1256, %r205, %r1255, %p274;
	selp.b32 	%r1257, %r194, 0, %p271;
	selp.b32 	%r1258, %r198, %r1257, %p272;
	selp.b32 	%r1259, %r202, %r1258, %p273;
	selp.b32 	%r1260, %r206, %r1259, %p274;
	selp.b32 	%r1261, %r195, 0, %p271;
	selp.b32 	%r1262, %r199, %r1261, %p272;
	selp.b32 	%r1263, %r203, %r1262, %p273;
	selp.b32 	%r1264, %r207, %r1263, %p274;
	selp.b32 	%r1265, %r196, 0, %p271;
	selp.b32 	%r1266, %r200, %r1265, %p272;
	selp.b32 	%r1267, %r204, %r1266, %p273;
	selp.b32 	%r1268, %r208, %r1267, %p274;
	// begin inline asm
	mov.b32 %r866, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r877, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r865, %r1256, -2004318072;
	mov.u32 	%r1002, 983055;
	// begin inline asm
	lop3.b32 %r863, %r1002, %r865, %r866, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r867, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r868, %r866, %r867;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r871, %r863, %r868;
	// end inline asm
	mov.u32 	%r1013, 15728880;
	// begin inline asm
	lop3.b32 %r874, %r1013, %r865, %r877, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r878, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r879, %r877, %r878;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r882, %r874, %r879;
	// end inline asm
	// begin inline asm
	mov.b32 %r912, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r923, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r911, %r1260, -2004318072;
	// begin inline asm
	lop3.b32 %r909, %r1002, %r911, %r912, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r913, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r914, %r912, %r913;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r917, %r909, %r914;
	// end inline asm
	// begin inline asm
	lop3.b32 %r920, %r1013, %r911, %r923, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r924, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r925, %r923, %r924;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r928, %r920, %r925;
	// end inline asm
	// begin inline asm
	mov.b32 %r958, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r969, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r957, %r1264, -2004318072;
	// begin inline asm
	lop3.b32 %r955, %r1002, %r957, %r958, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r959, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r960, %r958, %r959;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r963, %r955, %r960;
	// end inline asm
	// begin inline asm
	lop3.b32 %r966, %r1013, %r957, %r969, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r970, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r971, %r969, %r970;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r974, %r966, %r971;
	// end inline asm
	// begin inline asm
	mov.b32 %r1004, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1015, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1003, %r1268, -2004318072;
	// begin inline asm
	lop3.b32 %r1001, %r1002, %r1003, %r1004, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1005, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1006, %r1004, %r1005;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1009, %r1001, %r1006;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1012, %r1013, %r1003, %r1015, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1016, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1017, %r1015, %r1016;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1020, %r1012, %r1017;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r153;
    mov.b32 {%r2re, %r2im}, %r871;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1045, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r882;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1048, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r153;
    mov.b32 {%r2re, %r2im}, %r917;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1051, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r928;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1054, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r153;
    mov.b32 {%r2re, %r2im}, %r963;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1057, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r974;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1060, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r153;
    mov.b32 {%r2re, %r2im}, %r1009;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1063, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r1020;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1066, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1124, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1069, %r1070}, {%r243, %r246}, {%r1045}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1076, %r1077}, {%r243, %r246}, {%r1048}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1083, %r1084}, {%r243, %r246}, {%r1051}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1090, %r1091}, {%r243, %r246}, {%r1054}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1097, %r1098}, {%r243, %r246}, {%r1057}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1104, %r1105}, {%r243, %r246}, {%r1060}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1111, %r1112}, {%r243, %r246}, {%r1063}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1118, %r1119}, {%r243, %r246}, {%r1066}, {%r1124, %r1124};
	// end inline asm
	@%p1 bra 	$L__BB0_204;
	bra.uni 	$L__BB0_203;
$L__BB0_204:                            // %pass5495
                                        //   in Loop: Header=BB0_202 Depth=2
	// begin inline asm
	neg.f16x2 %r1125, %r284;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1127, %r1125, %r1070;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1130, %r281, %r1069, %r1127;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1134, %r284;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1136, %r1134, %r1077;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1139, %r281, %r1076, %r1136;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1143, %r284;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1145, %r1143, %r1084;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1148, %r281, %r1083, %r1145;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1152, %r284;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1154, %r1152, %r1091;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1157, %r281, %r1090, %r1154;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1161, %r284;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1163, %r1161, %r1098;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1166, %r281, %r1097, %r1163;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1170, %r284;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1172, %r1170, %r1105;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1175, %r281, %r1104, %r1172;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1179, %r284;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1181, %r1179, %r1112;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1184, %r281, %r1111, %r1181;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1188, %r284;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1190, %r1188, %r1119;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1193, %r281, %r1118, %r1190;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1197, %r284, %r1069;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1200, %r281, %r1070, %r1197;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1204, %r284, %r1076;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1207, %r281, %r1077, %r1204;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1211, %r284, %r1083;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1214, %r281, %r1084, %r1211;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1218, %r284, %r1090;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1221, %r281, %r1091, %r1218;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1225, %r284, %r1097;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1228, %r281, %r1098, %r1225;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1232, %r284, %r1104;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1235, %r281, %r1105, %r1232;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1239, %r284, %r1111;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1242, %r281, %r1112, %r1239;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1246, %r284, %r1118;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1249, %r281, %r1119, %r1246;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1269, %r1270}, {%r328, %r331}, {%r1130, %r1200}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1278, %r1279}, {%r328, %r331}, {%r1139, %r1207}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1287, %r1288}, {%r328, %r331}, {%r1148, %r1214}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1296, %r1297}, {%r328, %r331}, {%r1157, %r1221}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1305, %r1306}, {%r328, %r331}, {%r1166, %r1228}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1314, %r1315}, {%r328, %r331}, {%r1175, %r1235}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1323, %r1324}, {%r328, %r331}, {%r1184, %r1242}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1332, %r1333}, {%r328, %r331}, {%r1193, %r1249}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	bar.sync 	0;
	ld.shared.u32 	%r1409, [%rd7];
	ld.shared.u32 	%r1416, [%rd8+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1426, %r1423}, {%r340, %r343}, {%r1409}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1435, %r1432}, {%r340, %r343}, {%r1416}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1419, %r377;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1421, %r1419, %r1423;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1424, %r374, %r1426, %r1421;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1428, %r377;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1430, %r1428, %r1432;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1433, %r374, %r1435, %r1430;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1437, %r377, %r1426;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1440, %r374, %r1423, %r1437;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1444, %r377, %r1435;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1447, %r374, %r1432, %r1444;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1470, %r1473}, {%r416, %r419}, {%r1424, %r1440}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1477, %r1481}, {%r416, %r419}, {%r1433, %r1447}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1469, %r1470, %r1470;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1472, %r1473, %r1473, %r1469;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1476, %r1477, %r1477, %r1472;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1480, %r1481, %r1481, %r1476;
	// end inline asm
	mov.u32 	%r2066, 220138783;
	// begin inline asm
	fma.rn.f16x2 %r1484, %r2066, %r1480, %r3344;
	// end inline asm
	ld.shared.u32 	%r1492, [%rd45];
	ld.shared.u32 	%r1499, [%rd46];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1509, %r1506}, {%r340, %r343}, {%r1492}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1518, %r1515}, {%r340, %r343}, {%r1499}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1502, %r377;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1504, %r1502, %r1506;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1507, %r374, %r1509, %r1504;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1511, %r377;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1513, %r1511, %r1515;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1516, %r374, %r1518, %r1513;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1520, %r377, %r1509;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1523, %r374, %r1506, %r1520;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1527, %r377, %r1518;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1530, %r374, %r1515, %r1527;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1553, %r1556}, {%r416, %r419}, {%r1507, %r1523}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1560, %r1564}, {%r416, %r419}, {%r1516, %r1530}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1552, %r1553, %r1553;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1555, %r1556, %r1556, %r1552;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1559, %r1560, %r1560, %r1555;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1563, %r1564, %r1564, %r1559;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1567, %r2066, %r1563, %r1484;
	// end inline asm
	ld.shared.u32 	%r1575, [%rd47];
	ld.shared.u32 	%r1582, [%rd48];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1592, %r1589}, {%r340, %r343}, {%r1575}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1601, %r1598}, {%r340, %r343}, {%r1582}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1585, %r377;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1587, %r1585, %r1589;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1590, %r374, %r1592, %r1587;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1594, %r377;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1596, %r1594, %r1598;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1599, %r374, %r1601, %r1596;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1603, %r377, %r1592;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1606, %r374, %r1589, %r1603;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1610, %r377, %r1601;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1613, %r374, %r1598, %r1610;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1636, %r1639}, {%r416, %r419}, {%r1590, %r1606}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1643, %r1647}, {%r416, %r419}, {%r1599, %r1613}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1635, %r1636, %r1636;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1638, %r1639, %r1639, %r1635;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1642, %r1643, %r1643, %r1638;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1646, %r1647, %r1647, %r1642;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1650, %r2066, %r1646, %r1567;
	// end inline asm
	ld.shared.u32 	%r1658, [%rd49];
	ld.shared.u32 	%r1665, [%rd50];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1675, %r1672}, {%r340, %r343}, {%r1658}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1684, %r1681}, {%r340, %r343}, {%r1665}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1668, %r377;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1670, %r1668, %r1672;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1673, %r374, %r1675, %r1670;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1677, %r377;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1679, %r1677, %r1681;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1682, %r374, %r1684, %r1679;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1686, %r377, %r1675;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1689, %r374, %r1672, %r1686;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1693, %r377, %r1684;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1696, %r374, %r1681, %r1693;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1719, %r1722}, {%r416, %r419}, {%r1673, %r1689}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1726, %r1730}, {%r416, %r419}, {%r1682, %r1696}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1718, %r1719, %r1719;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1721, %r1722, %r1722, %r1718;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1725, %r1726, %r1726, %r1721;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1729, %r1730, %r1730, %r1725;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1733, %r2066, %r1729, %r1650;
	// end inline asm
	ld.shared.u32 	%r1741, [%rd51];
	ld.shared.u32 	%r1748, [%rd52];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1758, %r1755}, {%r340, %r343}, {%r1741}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1767, %r1764}, {%r340, %r343}, {%r1748}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1751, %r377;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1753, %r1751, %r1755;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1756, %r374, %r1758, %r1753;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1760, %r377;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1762, %r1760, %r1764;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1765, %r374, %r1767, %r1762;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1769, %r377, %r1758;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1772, %r374, %r1755, %r1769;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1776, %r377, %r1767;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1779, %r374, %r1764, %r1776;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1802, %r1805}, {%r416, %r419}, {%r1756, %r1772}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1809, %r1813}, {%r416, %r419}, {%r1765, %r1779}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1801, %r1802, %r1802;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1804, %r1805, %r1805, %r1801;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1808, %r1809, %r1809, %r1804;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1812, %r1813, %r1813, %r1808;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1816, %r2066, %r1812, %r1733;
	// end inline asm
	ld.shared.u32 	%r1824, [%rd53];
	ld.shared.u32 	%r1831, [%rd54];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1841, %r1838}, {%r340, %r343}, {%r1824}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1850, %r1847}, {%r340, %r343}, {%r1831}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1834, %r377;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1836, %r1834, %r1838;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1839, %r374, %r1841, %r1836;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1843, %r377;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1845, %r1843, %r1847;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1848, %r374, %r1850, %r1845;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1852, %r377, %r1841;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1855, %r374, %r1838, %r1852;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1859, %r377, %r1850;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1862, %r374, %r1847, %r1859;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1885, %r1888}, {%r416, %r419}, {%r1839, %r1855}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1892, %r1896}, {%r416, %r419}, {%r1848, %r1862}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1884, %r1885, %r1885;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1887, %r1888, %r1888, %r1884;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1891, %r1892, %r1892, %r1887;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1895, %r1896, %r1896, %r1891;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1899, %r2066, %r1895, %r1816;
	// end inline asm
	ld.shared.u32 	%r1907, [%rd55];
	ld.shared.u32 	%r1914, [%rd56];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1924, %r1921}, {%r340, %r343}, {%r1907}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1933, %r1930}, {%r340, %r343}, {%r1914}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1917, %r377;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1919, %r1917, %r1921;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1922, %r374, %r1924, %r1919;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1926, %r377;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1928, %r1926, %r1930;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1931, %r374, %r1933, %r1928;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1935, %r377, %r1924;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1938, %r374, %r1921, %r1935;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1942, %r377, %r1933;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1945, %r374, %r1930, %r1942;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1968, %r1971}, {%r416, %r419}, {%r1922, %r1938}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1975, %r1979}, {%r416, %r419}, {%r1931, %r1945}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1967, %r1968, %r1968;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1970, %r1971, %r1971, %r1967;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1974, %r1975, %r1975, %r1970;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1978, %r1979, %r1979, %r1974;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1982, %r2066, %r1978, %r1899;
	// end inline asm
	ld.shared.u32 	%r1990, [%rd57];
	ld.shared.u32 	%r1997, [%rd58];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2007, %r2004}, {%r340, %r343}, {%r1990}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2016, %r2013}, {%r340, %r343}, {%r1997}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2000, %r377;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2002, %r2000, %r2004;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2005, %r374, %r2007, %r2002;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2009, %r377;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2011, %r2009, %r2013;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2014, %r374, %r2016, %r2011;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2018, %r377, %r2007;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2021, %r374, %r2004, %r2018;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2025, %r377, %r2016;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2028, %r374, %r2013, %r2025;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2051, %r2054}, {%r416, %r419}, {%r2005, %r2021}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2058, %r2062}, {%r416, %r419}, {%r2014, %r2028}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2050, %r2051, %r2051;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2053, %r2054, %r2054, %r2050;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2057, %r2058, %r2058, %r2053;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2061, %r2062, %r2062, %r2057;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3344, %r2066, %r2061, %r1982;
	// end inline asm
	add.s32 	%r3339, %r3339, 8;
	setp.ne.s32 	%p275, %r3339, 400;
	@%p275 bra 	$L__BB0_151;
// %bb.205:                             // %pass8905
                                        //   in Loop: Header=BB0_202 Depth=2
	shl.b32 	%r2070, %r3340, 20;
	or.b32  	%r2071, %r2070, %r158;
	or.b32  	%r2072, %r2071, %r159;
	or.b32  	%r2073, %r2072, %r4;
	cvt.u64.u32 	%rd206, %r2073;
	add.s64 	%rd207, %rd206, %rd9;
	shr.u64 	%rd208, %rd207, 35;
	add.s64 	%rd209, %rd207, %rd208;
	shr.s64 	%rd210, %rd209, 29;
	setp.lt.s64 	%p276, %rd207, 0;
	and.b64  	%rd211, %rd209, -536870912;
	setp.ne.s64 	%p277, %rd211, %rd207;
	and.pred  	%p278, %p276, %p277;
	selp.u64 	%rd212, 1, 0, %p278;
	sub.s64 	%rd213, %rd212, %rd210;
	shl.b64 	%rd214, %rd213, 29;
	add.s64 	%rd215, %rd214, %rd207;
	shl.b64 	%rd216, %rd215, 2;
	add.s64 	%rd217, %rd4, %rd216;
	st.global.u32 	[%rd217], %r3344;
	add.s32 	%r3340, %r3340, 1;
	mov.u32 	%r3339, 0;
	mov.u32 	%r3344, %r3339;
	bra.uni 	$L__BB0_151;
$L__BB0_152:                            // %L20802.preheader
                                        //   in Loop: Header=BB0_184 Depth=1
	mov.u32 	%r3338, 16;
	bra.uni 	$L__BB0_153;
$L__BB0_154:                            // %L29295
                                        //   in Loop: Header=BB0_153 Depth=2
	bar.sync 	0;
	add.s32 	%r3338, %r3338, -8;
	setp.ne.s32 	%p288, %r3338, -16;
	@%p288 bra 	$L__BB0_153;
	bra.uni 	$L__BB0_155;
$L__BB0_153:                            // %L20802
                                        //   Parent Loop BB0_184 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p280, %r3338, 16;
	selp.b32 	%r3267, %r193, 0, %p280;
	setp.eq.s32 	%p281, %r3338, 8;
	selp.b32 	%r3268, %r197, %r3267, %p281;
	setp.eq.s32 	%p282, %r3338, 0;
	selp.b32 	%r3269, %r201, %r3268, %p282;
	setp.eq.s32 	%p283, %r3338, -8;
	selp.b32 	%r3270, %r205, %r3269, %p283;
	selp.b32 	%r3271, %r194, 0, %p280;
	selp.b32 	%r3272, %r198, %r3271, %p281;
	selp.b32 	%r3273, %r202, %r3272, %p282;
	selp.b32 	%r3274, %r206, %r3273, %p283;
	selp.b32 	%r3275, %r195, 0, %p280;
	selp.b32 	%r3276, %r199, %r3275, %p281;
	selp.b32 	%r3277, %r203, %r3276, %p282;
	selp.b32 	%r3278, %r207, %r3277, %p283;
	selp.b32 	%r3279, %r196, 0, %p280;
	selp.b32 	%r3280, %r200, %r3279, %p281;
	selp.b32 	%r3281, %r204, %r3280, %p282;
	selp.b32 	%r3282, %r208, %r3281, %p283;
	// begin inline asm
	mov.b32 %r2102, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2113, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r3283, %r3270, 8;
	xor.b32  	%r2112, %r3283, 8947848;
	// begin inline asm
	lop3.b32 %r2099, %r1002, %r2112, %r2102, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2103, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2104, %r2102, %r2103;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2107, %r2099, %r2104;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2110, %r1013, %r2112, %r2113, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2114, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2115, %r2113, %r2114;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2118, %r2110, %r2115;
	// end inline asm
	// begin inline asm
	mov.b32 %r2148, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2159, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r3284, %r3274, 8;
	xor.b32  	%r2158, %r3284, 8947848;
	// begin inline asm
	lop3.b32 %r2145, %r1002, %r2158, %r2148, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2149, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2150, %r2148, %r2149;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2153, %r2145, %r2150;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2156, %r1013, %r2158, %r2159, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2160, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2161, %r2159, %r2160;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2164, %r2156, %r2161;
	// end inline asm
	// begin inline asm
	mov.b32 %r2194, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2205, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r3285, %r3278, 8;
	xor.b32  	%r2204, %r3285, 8947848;
	// begin inline asm
	lop3.b32 %r2191, %r1002, %r2204, %r2194, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2195, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2196, %r2194, %r2195;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2199, %r2191, %r2196;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2202, %r1013, %r2204, %r2205, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2206, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2207, %r2205, %r2206;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2210, %r2202, %r2207;
	// end inline asm
	// begin inline asm
	mov.b32 %r2240, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2251, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r3286, %r3282, 8;
	xor.b32  	%r2250, %r3286, 8947848;
	// begin inline asm
	lop3.b32 %r2237, %r1002, %r2250, %r2240, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2241, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2242, %r2240, %r2241;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2245, %r2237, %r2242;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2248, %r1013, %r2250, %r2251, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2252, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2253, %r2251, %r2252;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2256, %r2248, %r2253;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r153;
    mov.b32 {%r2re, %r2im}, %r2107;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2259, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2118;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2262, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r153;
    mov.b32 {%r2re, %r2im}, %r2153;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2265, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2164;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2268, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r153;
    mov.b32 {%r2re, %r2im}, %r2199;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2271, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2210;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2274, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r153;
    mov.b32 {%r2re, %r2im}, %r2245;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2277, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2256;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2280, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2346, %r2343}, {%r243, %r246}, {%r2259}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2355, %r2352}, {%r243, %r246}, {%r2262}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2364, %r2361}, {%r243, %r246}, {%r2265}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2373, %r2370}, {%r243, %r246}, {%r2268}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2382, %r2379}, {%r243, %r246}, {%r2271}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2391, %r2388}, {%r243, %r246}, {%r2274}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2400, %r2397}, {%r243, %r246}, {%r2277}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2409, %r2406}, {%r243, %r246}, {%r2280}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2339, %r284;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2341, %r2339, %r2343;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2344, %r281, %r2346, %r2341;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2348, %r284;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2350, %r2348, %r2352;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2353, %r281, %r2355, %r2350;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2357, %r284;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2359, %r2357, %r2361;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2362, %r281, %r2364, %r2359;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2366, %r284;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2368, %r2366, %r2370;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2371, %r281, %r2373, %r2368;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2375, %r284;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2377, %r2375, %r2379;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2380, %r281, %r2382, %r2377;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2384, %r284;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2386, %r2384, %r2388;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2389, %r281, %r2391, %r2386;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2393, %r284;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2395, %r2393, %r2397;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2398, %r281, %r2400, %r2395;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2402, %r284;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2404, %r2402, %r2406;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2407, %r281, %r2409, %r2404;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2411, %r284, %r2346;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2414, %r281, %r2343, %r2411;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2418, %r284, %r2355;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2421, %r281, %r2352, %r2418;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2425, %r284, %r2364;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2428, %r281, %r2361, %r2425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2432, %r284, %r2373;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2435, %r281, %r2370, %r2432;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2439, %r284, %r2382;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2442, %r281, %r2379, %r2439;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2446, %r284, %r2391;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2449, %r281, %r2388, %r2446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2453, %r284, %r2400;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2456, %r281, %r2397, %r2453;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2460, %r284, %r2409;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2463, %r281, %r2406, %r2460;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2467, %r2468}, {%r328, %r331}, {%r2344, %r2414}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2476, %r2477}, {%r328, %r331}, {%r2353, %r2421}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2485, %r2486}, {%r328, %r331}, {%r2362, %r2428}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2494, %r2495}, {%r328, %r331}, {%r2371, %r2435}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2503, %r2504}, {%r328, %r331}, {%r2380, %r2442}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2512, %r2513}, {%r328, %r331}, {%r2389, %r2449}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2521, %r2522}, {%r328, %r331}, {%r2398, %r2456}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2530, %r2531}, {%r328, %r331}, {%r2407, %r2463}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	bar.sync 	0;
	ld.shared.u32 	%r2607, [%rd7];
	ld.shared.u32 	%r2614, [%rd8+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2624, %r2621}, {%r340, %r343}, {%r2607}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2633, %r2630}, {%r340, %r343}, {%r2614}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2617, %r377;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2619, %r2617, %r2621;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2622, %r374, %r2624, %r2619;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2626, %r377;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2628, %r2626, %r2630;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2631, %r374, %r2633, %r2628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2635, %r377, %r2624;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2638, %r374, %r2621, %r2635;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2642, %r377, %r2633;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2645, %r374, %r2630, %r2642;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2668, %r2671}, {%r416, %r419}, {%r2622, %r2638}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2675, %r2679}, {%r416, %r419}, {%r2631, %r2645}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2667, %r2668, %r2668;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2670, %r2671, %r2671, %r2667;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2674, %r2675, %r2675, %r2670;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2678, %r2679, %r2679, %r2674;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2682, %r2066, %r2678, %r3344;
	// end inline asm
	ld.shared.u32 	%r2690, [%rd45];
	ld.shared.u32 	%r2697, [%rd46];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2707, %r2704}, {%r340, %r343}, {%r2690}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2716, %r2713}, {%r340, %r343}, {%r2697}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2700, %r377;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2702, %r2700, %r2704;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2705, %r374, %r2707, %r2702;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2709, %r377;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2711, %r2709, %r2713;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2714, %r374, %r2716, %r2711;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2718, %r377, %r2707;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2721, %r374, %r2704, %r2718;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2725, %r377, %r2716;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2728, %r374, %r2713, %r2725;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2751, %r2754}, {%r416, %r419}, {%r2705, %r2721}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2758, %r2762}, {%r416, %r419}, {%r2714, %r2728}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2750, %r2751, %r2751;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2753, %r2754, %r2754, %r2750;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2757, %r2758, %r2758, %r2753;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2761, %r2762, %r2762, %r2757;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2765, %r2066, %r2761, %r2682;
	// end inline asm
	ld.shared.u32 	%r2773, [%rd47];
	ld.shared.u32 	%r2780, [%rd48];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2790, %r2787}, {%r340, %r343}, {%r2773}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2799, %r2796}, {%r340, %r343}, {%r2780}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2783, %r377;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2785, %r2783, %r2787;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2788, %r374, %r2790, %r2785;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2792, %r377;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2794, %r2792, %r2796;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2797, %r374, %r2799, %r2794;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2801, %r377, %r2790;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2804, %r374, %r2787, %r2801;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2808, %r377, %r2799;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2811, %r374, %r2796, %r2808;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2834, %r2837}, {%r416, %r419}, {%r2788, %r2804}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2841, %r2845}, {%r416, %r419}, {%r2797, %r2811}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2833, %r2834, %r2834;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2836, %r2837, %r2837, %r2833;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2840, %r2841, %r2841, %r2836;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2844, %r2845, %r2845, %r2840;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2848, %r2066, %r2844, %r2765;
	// end inline asm
	ld.shared.u32 	%r2856, [%rd49];
	ld.shared.u32 	%r2863, [%rd50];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2873, %r2870}, {%r340, %r343}, {%r2856}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2882, %r2879}, {%r340, %r343}, {%r2863}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2866, %r377;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2868, %r2866, %r2870;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2871, %r374, %r2873, %r2868;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2875, %r377;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2877, %r2875, %r2879;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2880, %r374, %r2882, %r2877;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2884, %r377, %r2873;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2887, %r374, %r2870, %r2884;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2891, %r377, %r2882;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2894, %r374, %r2879, %r2891;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2917, %r2920}, {%r416, %r419}, {%r2871, %r2887}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2924, %r2928}, {%r416, %r419}, {%r2880, %r2894}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2916, %r2917, %r2917;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2919, %r2920, %r2920, %r2916;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2923, %r2924, %r2924, %r2919;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2927, %r2928, %r2928, %r2923;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2931, %r2066, %r2927, %r2848;
	// end inline asm
	ld.shared.u32 	%r2939, [%rd51];
	ld.shared.u32 	%r2946, [%rd52];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2956, %r2953}, {%r340, %r343}, {%r2939}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2965, %r2962}, {%r340, %r343}, {%r2946}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2949, %r377;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2951, %r2949, %r2953;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2954, %r374, %r2956, %r2951;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2958, %r377;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2960, %r2958, %r2962;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2963, %r374, %r2965, %r2960;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2967, %r377, %r2956;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2970, %r374, %r2953, %r2967;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2974, %r377, %r2965;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2977, %r374, %r2962, %r2974;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3000, %r3003}, {%r416, %r419}, {%r2954, %r2970}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3007, %r3011}, {%r416, %r419}, {%r2963, %r2977}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2999, %r3000, %r3000;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3002, %r3003, %r3003, %r2999;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3006, %r3007, %r3007, %r3002;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3010, %r3011, %r3011, %r3006;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3014, %r2066, %r3010, %r2931;
	// end inline asm
	ld.shared.u32 	%r3022, [%rd53];
	ld.shared.u32 	%r3029, [%rd54];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3039, %r3036}, {%r340, %r343}, {%r3022}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3048, %r3045}, {%r340, %r343}, {%r3029}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3032, %r377;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3034, %r3032, %r3036;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3037, %r374, %r3039, %r3034;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3041, %r377;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3043, %r3041, %r3045;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3046, %r374, %r3048, %r3043;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3050, %r377, %r3039;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3053, %r374, %r3036, %r3050;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3057, %r377, %r3048;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3060, %r374, %r3045, %r3057;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3083, %r3086}, {%r416, %r419}, {%r3037, %r3053}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3090, %r3094}, {%r416, %r419}, {%r3046, %r3060}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3082, %r3083, %r3083;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3085, %r3086, %r3086, %r3082;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3089, %r3090, %r3090, %r3085;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3093, %r3094, %r3094, %r3089;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3097, %r2066, %r3093, %r3014;
	// end inline asm
	ld.shared.u32 	%r3105, [%rd55];
	ld.shared.u32 	%r3112, [%rd56];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3122, %r3119}, {%r340, %r343}, {%r3105}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3131, %r3128}, {%r340, %r343}, {%r3112}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3115, %r377;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3117, %r3115, %r3119;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3120, %r374, %r3122, %r3117;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3124, %r377;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3126, %r3124, %r3128;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3129, %r374, %r3131, %r3126;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3133, %r377, %r3122;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3136, %r374, %r3119, %r3133;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3140, %r377, %r3131;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3143, %r374, %r3128, %r3140;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3166, %r3169}, {%r416, %r419}, {%r3120, %r3136}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3173, %r3177}, {%r416, %r419}, {%r3129, %r3143}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3165, %r3166, %r3166;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3168, %r3169, %r3169, %r3165;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3172, %r3173, %r3173, %r3168;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3176, %r3177, %r3177, %r3172;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3180, %r2066, %r3176, %r3097;
	// end inline asm
	ld.shared.u32 	%r3188, [%rd57];
	ld.shared.u32 	%r3195, [%rd58];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3205, %r3202}, {%r340, %r343}, {%r3188}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3214, %r3211}, {%r340, %r343}, {%r3195}, {%r1124, %r1124};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3198, %r377;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3200, %r3198, %r3202;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3203, %r374, %r3205, %r3200;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3207, %r377;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3209, %r3207, %r3211;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3212, %r374, %r3214, %r3209;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3216, %r377, %r3205;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3219, %r374, %r3202, %r3216;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3223, %r377, %r3214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3226, %r374, %r3211, %r3223;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3249, %r3252}, {%r416, %r419}, {%r3203, %r3219}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3256, %r3260}, {%r416, %r419}, {%r3212, %r3226}, {%r1124, %r1124}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3248, %r3249, %r3249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3251, %r3252, %r3252, %r3248;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3255, %r3256, %r3256, %r3251;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3259, %r3260, %r3260, %r3255;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3344, %r2066, %r3259, %r3180;
	// end inline asm
	add.s32 	%r3339, %r3339, 8;
	setp.eq.s32 	%p284, %r3339, 400;
	@%p284 bra 	$L__BB0_206;
	bra.uni 	$L__BB0_154;
$L__BB0_206:                            // %pass12442
                                        //   in Loop: Header=BB0_153 Depth=2
	shl.b32 	%r3288, %r3340, 20;
	or.b32  	%r3289, %r3288, %r158;
	or.b32  	%r3290, %r3289, %r159;
	or.b32  	%r3291, %r3290, %r4;
	cvt.u64.u32 	%rd218, %r3291;
	add.s64 	%rd219, %rd218, %rd9;
	shr.u64 	%rd220, %rd219, 35;
	add.s64 	%rd221, %rd219, %rd220;
	shr.s64 	%rd222, %rd221, 29;
	setp.lt.s64 	%p285, %rd219, 0;
	and.b64  	%rd223, %rd221, -536870912;
	setp.ne.s64 	%p286, %rd223, %rd219;
	and.pred  	%p287, %p285, %p286;
	selp.u64 	%rd224, 1, 0, %p287;
	sub.s64 	%rd225, %rd224, %rd222;
	shl.b64 	%rd226, %rd225, 29;
	add.s64 	%rd227, %rd226, %rd219;
	shl.b64 	%rd228, %rd227, 2;
	add.s64 	%rd229, %rd4, %rd228;
	st.global.u32 	[%rd229], %r3344;
	add.s32 	%r3340, %r3340, 1;
	mov.u32 	%r3339, %r1124;
	mov.u32 	%r3344, %r1124;
	bra.uni 	$L__BB0_154;
$L__BB0_156:                            // %L29326
	mov.u32 	%r3292, 0;
	st.global.u32 	[%rd6], %r3292;
	ret;
$L__BB0_203:                            // %post_box_union
	mov.u64 	%rd204, exception2381;
	cvta.global.u64 	%rd205, %rd204;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd205;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r213;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_135:                            // %L6818
	mov.u32 	%r3308, 5;
	st.global.u32 	[%rd6], %r3308;
	mov.u64 	%rd260, exception2333;
	cvta.global.u64 	%rd261, %rd260;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd261;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r213;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_136:                            // %L6978
	mov.u32 	%r3307, 5;
	st.global.u32 	[%rd6], %r3307;
	mov.u64 	%rd258, exception2333;
	cvta.global.u64 	%rd259, %rd258;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd259;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r213;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_137:                            // %L7138
	mov.u32 	%r3306, 5;
	st.global.u32 	[%rd6], %r3306;
	mov.u64 	%rd256, exception2333;
	cvta.global.u64 	%rd257, %rd256;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd257;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r213;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_138:                            // %L7298
	mov.u32 	%r3305, 5;
	st.global.u32 	[%rd6], %r3305;
	mov.u64 	%rd254, exception2333;
	cvta.global.u64 	%rd255, %rd254;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd255;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r213;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_139:                            // %L7458
	mov.u32 	%r3304, 5;
	st.global.u32 	[%rd6], %r3304;
	mov.u64 	%rd252, exception2333;
	cvta.global.u64 	%rd253, %rd252;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd253;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r213;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_140:                            // %L7618
	mov.u32 	%r3303, 5;
	st.global.u32 	[%rd6], %r3303;
	mov.u64 	%rd250, exception2333;
	cvta.global.u64 	%rd251, %rd250;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd251;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r213;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_141:                            // %L7778
	mov.u32 	%r3302, 5;
	st.global.u32 	[%rd6], %r3302;
	mov.u64 	%rd248, exception2333;
	cvta.global.u64 	%rd249, %rd248;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd249;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r213;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_142:                            // %L7938
	mov.u32 	%r3301, 5;
	st.global.u32 	[%rd6], %r3301;
	mov.u64 	%rd246, exception2333;
	cvta.global.u64 	%rd247, %rd246;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd247;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r213;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_143:                            // %L8098
	mov.u32 	%r3300, 5;
	st.global.u32 	[%rd6], %r3300;
	mov.u64 	%rd244, exception2333;
	cvta.global.u64 	%rd245, %rd244;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd245;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r213;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_144:                            // %L8258
	mov.u32 	%r3299, 5;
	st.global.u32 	[%rd6], %r3299;
	mov.u64 	%rd242, exception2333;
	cvta.global.u64 	%rd243, %rd242;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd243;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r213;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L8418
	mov.u32 	%r3298, 5;
	st.global.u32 	[%rd6], %r3298;
	mov.u64 	%rd240, exception2333;
	cvta.global.u64 	%rd241, %rd240;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd241;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r213;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L8578
	mov.u32 	%r3297, 5;
	st.global.u32 	[%rd6], %r3297;
	mov.u64 	%rd238, exception2333;
	cvta.global.u64 	%rd239, %rd238;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd239;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r213;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L8738
	mov.u32 	%r3296, 5;
	st.global.u32 	[%rd6], %r3296;
	mov.u64 	%rd236, exception2333;
	cvta.global.u64 	%rd237, %rd236;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd237;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r213;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L8898
	mov.u32 	%r3295, 5;
	st.global.u32 	[%rd6], %r3295;
	mov.u64 	%rd234, exception2333;
	cvta.global.u64 	%rd235, %rd234;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd235;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r213;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L9058
	mov.u32 	%r3294, 5;
	st.global.u32 	[%rd6], %r3294;
	mov.u64 	%rd232, exception2333;
	cvta.global.u64 	%rd233, %rd232;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd233;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r213;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L9218
	mov.u32 	%r3293, 5;
	st.global.u32 	[%rd6], %r3293;
	mov.u64 	%rd230, exception2333;
	cvta.global.u64 	%rd231, %rd230;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd231;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r213;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L169
	mov.u32 	%r3310, 2;
	st.global.u32 	[%rd6], %r3310;
	mov.u64 	%rd264, exception2333;
	cvta.global.u64 	%rd265, %rd264;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd265;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r213;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_12:                             // %L312
	mov.u32 	%r3309, 3;
	st.global.u32 	[%rd6], %r3309;
	mov.u64 	%rd262, exception2333;
	cvta.global.u64 	%rd263, %rd262;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd263;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r213;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd65, exception1;
	cvta.global.u64 	%rd66, %rd65;
	{ // callseq 45, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd66;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 45
	{ // callseq 46, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r213;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 46
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_134:                            // %L1159
	add.u64 	%rd64, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r5, %r1};
	st.local.v2.u32 	[%rd5+8], {%r3, %r85};
	st.local.u32 	[%rd5+16], %r86;
	mov.u64 	%rd70, __unnamed_1;
	cvta.global.u64 	%rd71, %rd70;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd71;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd64;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r429, [retval0+0];
	} // callseq 47
	mov.u32 	%r431, 4;
	st.global.u32 	[%rd6], %r431;
	mov.u64 	%rd73, exception2333;
	cvta.global.u64 	%rd74, %rd73;
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd74;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 48
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r213;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 49
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
