// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=192, blocks_per_sm=4

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception1869[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1909[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 192, 1, 1
.minnctapersm 4
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<320>;
	.reg .b16 	%rs<195>;
	.reg .b32 	%r<3051>;
	.reg .f32 	%f<790>;
	.reg .b64 	%rd<319>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r278, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd12, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r287, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p4, %r287, 13919;
	@%p4 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L20
	ld.param.u64 	%rd13, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r279, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %ctaid.x;
	mul.lo.s32 	%r4, %r3, 192;
	mov.u32 	%r288, %tid.x;
	add.s32 	%r289, %r2, %r4;
	or.b32  	%r290, %r289, %r288;
	mul.wide.u32 	%rd20, %r290, 4;
	add.s64 	%rd6, %rd13, %rd20;
	mov.u32 	%r291, 1;
	st.global.u32 	[%rd6], %r291;
	setp.gt.u32 	%p5, %r279, 32767;
	@%p5 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r280, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p6, %r280, %r279;
	setp.gt.s32 	%p7, %r280, 65535;
	or.pred  	%p8, %p6, %p7;
	@%p8 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r281, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r280, %r279;
	mad.lo.s32 	%r292, %r6, -1431655765, 715827872;
	shf.r.wrap.b32 	%r293, %r292, %r292, 4;
	setp.gt.u32 	%p9, %r293, 89478484;
	setp.gt.u32 	%p10, %r281, 1023;
	or.pred  	%p11, %p9, %p10;
	@%p11 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r282, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p12, %r282, %r281;
	setp.lt.s32 	%p13, %r282, 2048;
	and.pred  	%p14, %p12, %p13;
	@%p14 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass40
	sub.s32 	%r294, %r282, %r281;
	shr.s32 	%r295, %r6, 31;
	shr.u32 	%r296, %r295, 24;
	add.s32 	%r297, %r6, %r296;
	shr.s32 	%r298, %r297, 8;
	setp.eq.s32 	%p15, %r294, %r298;
	@%p15 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L261
	ld.param.u32 	%r283, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p16, %r283, 0;
	@%p16 bra 	$L__BB0_12;
// %bb.9:                               // %L263
	ld.param.u32 	%r285, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	ld.param.u32 	%r284, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p17, %r284, %r283;
	setp.gt.s32 	%p18, %r284, 384;
	or.pred  	%p19, %p17, %p18;
	setp.lt.s32 	%p20, %r285, 0;
	or.pred  	%p21, %p19, %p20;
	@%p21 bra 	$L__BB0_12;
// %bb.10:                              // %L279
	ld.param.u32 	%r286, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p22, %r286, %r285;
	setp.gt.s32 	%p23, %r286, 128;
	or.pred  	%p24, %p22, %p23;
	@%p24 bra 	$L__BB0_12;
// %bb.11:                              // %L289
	sub.s32 	%r299, %r286, %r285;
	sub.s32 	%r300, %r284, %r283;
	setp.eq.s32 	%p25, %r299, %r300;
	@%p25 bra 	$L__BB0_184;
	bra.uni 	$L__BB0_12;
$L__BB0_184:                            // %pass149
	and.b32  	%r148, %r288, 3;
	shr.u32 	%r149, %r288, 2;
	mul.lo.s32 	%r301, %r148, %r149;
	and.b32  	%r302, %r301, 7;
	cvt.rn.f32.s32 	%f205, %r302;
	mov.f32 	%f206, 0f40800000;
	div.approx.f32 	%f169, %f205, %f206;
	abs.f32 	%f788, %f169;
	setp.lt.f32 	%p26, %f788, 0f40000000;
	setp.gtu.f32 	%p319, %f788, 0f4B800000;
	mov.f32 	%f784, %f788;
	@%p26 bra 	$L__BB0_196;
// %bb.185:
	@%p319 bra 	$L__BB0_192;
	bra.uni 	$L__BB0_186;
$L__BB0_192:
	mov.b32 	%r151, %f788;
	and.b32  	%r303, %r151, 8388607;
	or.b32  	%r3034, %r303, 1065353216;
	mov.b32 	%f783, %r3034;
	add.s32 	%r304, %r151, -1073741824;
	and.b32  	%r3035, %r304, -8388608;
	setp.eq.s32 	%p33, %r3035, 0;
	@%p33 bra 	$L__BB0_195;
// %bb.193:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f216, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f215,%f216;
	// end inline asm
$L__BB0_194:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r305, %r3035, 192937984;
	add.s32 	%r306, %r3034, %r305;
	mov.b32 	%f217, %r306;
	mul.f32 	%f218, %f215, %f217;
	sub.f32 	%f219, %f217, %f218;
	fma.rn.f32 	%f220, %f219, %f215, %f218;
	sub.f32 	%f221, %f217, %f220;
	fma.rz.f32 	%f222, %f221, %f215, %f220;
	cvt.rzi.f32.f32 	%f223, %f222;
	sub.f32 	%f783, %f217, %f223;
	sub.s32 	%r3035, %r3035, %r305;
	mov.b32 	%r3034, %f783;
	setp.ne.s32 	%p34, %r3035, 0;
	setp.ne.s32 	%p35, %r3034, 0;
	and.pred  	%p36, %p34, %p35;
	@%p36 bra 	$L__BB0_194;
$L__BB0_195:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p37, %r151, 2139095039;
	selp.f32 	%f224, 0f7FFFFFFF, 0f4B800000, %p37;
	mul.f32 	%f225, %f783, 0f34000000;
	mul.f32 	%f784, %f224, %f225;
	bra.uni 	$L__BB0_196;
$L__BB0_186:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f207, 0f40000000;
	div.approx.f32 	%f208, %f788, %f207;
	cvt.rzi.f32.f32 	%f782, %f208;
	fma.rn.f32 	%f172, %f782, 0fC0000000, %f788;
	mov.b32 	%r150, %f172;
	setp.lt.u32 	%p28, %r150, 1073741824;
	@%p28 bra 	$L__BB0_191;
// %bb.187:
	setp.lt.u32 	%p29, %r150, -2147483647;
	@%p29 bra 	$L__BB0_189;
// %bb.188:
	add.f32 	%f213, %f782, 0fBF800000;
	setp.lt.f32 	%p32, %f172, 0fC0000000;
	add.f32 	%f214, %f213, 0fBF800000;
	selp.f32 	%f782, %f214, %f213, %p32;
	bra.uni 	$L__BB0_191;
$L__BB0_189:
	add.f32 	%f782, %f782, 0f3F800000;
	setp.ltu.f32 	%p30, %f172, 0f40800000;
	@%p30 bra 	$L__BB0_191;
// %bb.190:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f209, %f782, 0f3F800000;
	fma.rn.f32 	%f211, %f207, 0fC0400000, %f172;
	setp.ge.f32 	%p31, %f211, 0f00000000;
	add.f32 	%f212, %f209, 0f3F800000;
	selp.f32 	%f782, %f212, %f209, %p31;
$L__BB0_191:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f784, %f782, 0fC0000000, %f788;
$L__BB0_196:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f226, %f784;
	setp.gtu.f32 	%p38, %f226, 0f7F800000;
	mov.b32 	%r307, %f169;
	and.b32  	%r158, %r307, -2147483648;
	@%p38 bra 	$L__BB0_198;
// %bb.197:
	mov.b32 	%r308, %f784;
	or.b32  	%r309, %r158, %r308;
	mov.b32 	%f784, %r309;
$L__BB0_198:                            // %__nv_fmodf.exit
	shl.b32 	%r161, %r288, 1;
	and.b32  	%r162, %r161, 2;
	mul.lo.s32 	%r324, %r162, %r149;
	cvt.rn.f32.s32 	%f259, %r324;
	mov.f32 	%f260, 0f41400000;
	div.approx.f32 	%f186, %f259, %f260;
	abs.f32 	%f734, %f186;
	setp.lt.f32 	%p46, %f734, 0f40000000;
	@%p46 bra 	$L__BB0_24;
// %bb.13:
	setp.gtu.f32 	%p47, %f734, 0f4B800000;
	@%p47 bra 	$L__BB0_20;
	bra.uni 	$L__BB0_14;
$L__BB0_20:
	mov.b32 	%r8, %f734;
	and.b32  	%r325, %r8, 8388607;
	or.b32  	%r2984, %r325, 1065353216;
	mov.b32 	%f733, %r2984;
	add.s32 	%r326, %r8, -1073741824;
	and.b32  	%r2985, %r326, -8388608;
	setp.eq.s32 	%p53, %r2985, 0;
	@%p53 bra 	$L__BB0_23;
// %bb.21:                              // %__nv_fmaf_rn.exit4.i.i.i1988.preheader
	mov.f32 	%f270, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f269,%f270;
	// end inline asm
$L__BB0_22:                             // %__nv_fmaf_rn.exit4.i.i.i1988
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r327, %r2985, 192937984;
	add.s32 	%r328, %r2984, %r327;
	mov.b32 	%f271, %r328;
	mul.f32 	%f272, %f269, %f271;
	sub.f32 	%f273, %f271, %f272;
	fma.rn.f32 	%f274, %f273, %f269, %f272;
	sub.f32 	%f275, %f271, %f274;
	fma.rz.f32 	%f276, %f275, %f269, %f274;
	cvt.rzi.f32.f32 	%f277, %f276;
	sub.f32 	%f733, %f271, %f277;
	sub.s32 	%r2985, %r2985, %r327;
	mov.b32 	%r2984, %f733;
	setp.ne.s32 	%p54, %r2985, 0;
	setp.ne.s32 	%p55, %r2984, 0;
	and.pred  	%p56, %p54, %p55;
	@%p56 bra 	$L__BB0_22;
$L__BB0_23:                             // %__internal_fmodf_slowpath_mod.exit.i.i1990
	setp.gt.u32 	%p57, %r8, 2139095039;
	selp.f32 	%f278, 0f7FFFFFFF, 0f4B800000, %p57;
	mul.f32 	%f279, %f733, 0f34000000;
	mul.f32 	%f734, %f278, %f279;
	bra.uni 	$L__BB0_24;
$L__BB0_14:                             // %__nv_fast_fdividef.exit.i.i.i1967
	mov.f32 	%f261, 0f40000000;
	div.approx.f32 	%f262, %f734, %f261;
	cvt.rzi.f32.f32 	%f732, %f262;
	fma.rn.f32 	%f2, %f732, 0fC0000000, %f734;
	mov.b32 	%r7, %f2;
	setp.lt.u32 	%p48, %r7, 1073741824;
	@%p48 bra 	$L__BB0_19;
// %bb.15:
	setp.lt.u32 	%p49, %r7, -2147483647;
	@%p49 bra 	$L__BB0_17;
// %bb.16:
	add.f32 	%f267, %f732, 0fBF800000;
	setp.lt.f32 	%p52, %f2, 0fC0000000;
	add.f32 	%f268, %f267, 0fBF800000;
	selp.f32 	%f732, %f268, %f267, %p52;
	bra.uni 	$L__BB0_19;
$L__BB0_17:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p50, %f2, 0f40800000;
	@%p50 bra 	$L__BB0_19;
// %bb.18:                              // %__nv_fmaf_rn.exit.i.i.i1971
	add.f32 	%f263, %f732, 0f3F800000;
	fma.rn.f32 	%f265, %f261, 0fC0400000, %f2;
	setp.ge.f32 	%p51, %f265, 0f00000000;
	add.f32 	%f266, %f263, 0f3F800000;
	selp.f32 	%f732, %f266, %f263, %p51;
$L__BB0_19:                             // %__internal_fmodf_fastpath_quot.exit.i.i1974
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_24:                             // %__internal_fmodf_kernel.exit.i1993
	or.b32  	%r163, %r162, 1;
	abs.f32 	%f280, %f734;
	setp.gtu.f32 	%p58, %f280, 0f7F800000;
	@%p58 bra 	$L__BB0_26;
// %bb.25:
	mov.b32 	%r329, %f186;
	and.b32  	%r330, %r329, -2147483648;
	mov.b32 	%r331, %f734;
	or.b32  	%r332, %r330, %r331;
	mov.b32 	%f734, %r332;
$L__BB0_26:                             // %__nv_fmodf.exit1994
	mov.f32 	%f250, 0f00000000;
	setp.eq.s32 	%p66, %r163, 3;
	mov.f32 	%f37, %f250;
	mov.f32 	%f38, %f250;
	@%p66 bra 	$L__BB0_42;
// %bb.27:                              // %L531
	mul.lo.s32 	%r341, %r163, %r149;
	mul.hi.u32 	%r342, %r341, -1431655765;
	shr.u32 	%r343, %r342, 4;
	mul.lo.s32 	%r344, %r343, 24;
	sub.s32 	%r345, %r341, %r344;
	cvt.rn.f32.s32 	%f311, %r345;
	div.approx.f32 	%f18, %f311, %f260;
	abs.f32 	%f738, %f18;
	setp.lt.f32 	%p67, %f738, 0f40000000;
	@%p67 bra 	$L__BB0_39;
// %bb.28:
	setp.gtu.f32 	%p68, %f738, 0f4B800000;
	@%p68 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_29;
$L__BB0_35:
	mov.b32 	%r16, %f738;
	and.b32  	%r346, %r16, 8388607;
	or.b32  	%r2986, %r346, 1065353216;
	mov.b32 	%f737, %r2986;
	add.s32 	%r347, %r16, -1073741824;
	and.b32  	%r2987, %r347, -8388608;
	setp.eq.s32 	%p74, %r2987, 0;
	@%p74 bra 	$L__BB0_38;
// %bb.36:                              // %__nv_fmaf_rn.exit4.i.i.i2019.preheader
	mov.f32 	%f322, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f321,%f322;
	// end inline asm
$L__BB0_37:                             // %__nv_fmaf_rn.exit4.i.i.i2019
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r348, %r2987, 192937984;
	add.s32 	%r349, %r2986, %r348;
	mov.b32 	%f323, %r349;
	mul.f32 	%f324, %f321, %f323;
	sub.f32 	%f325, %f323, %f324;
	fma.rn.f32 	%f326, %f325, %f321, %f324;
	sub.f32 	%f327, %f323, %f326;
	fma.rz.f32 	%f328, %f327, %f321, %f326;
	cvt.rzi.f32.f32 	%f329, %f328;
	sub.f32 	%f737, %f323, %f329;
	sub.s32 	%r2987, %r2987, %r348;
	mov.b32 	%r2986, %f737;
	setp.ne.s32 	%p75, %r2987, 0;
	setp.ne.s32 	%p76, %r2986, 0;
	and.pred  	%p77, %p75, %p76;
	@%p77 bra 	$L__BB0_37;
$L__BB0_38:                             // %__internal_fmodf_slowpath_mod.exit.i.i2021
	setp.gt.u32 	%p78, %r16, 2139095039;
	selp.f32 	%f330, 0f7FFFFFFF, 0f4B800000, %p78;
	mul.f32 	%f331, %f737, 0f34000000;
	mul.f32 	%f738, %f330, %f331;
	bra.uni 	$L__BB0_39;
$L__BB0_29:                             // %__nv_fast_fdividef.exit.i.i.i1998
	mov.f32 	%f313, 0f40000000;
	div.approx.f32 	%f314, %f738, %f313;
	cvt.rzi.f32.f32 	%f736, %f314;
	fma.rn.f32 	%f21, %f736, 0fC0000000, %f738;
	mov.b32 	%r15, %f21;
	setp.lt.u32 	%p69, %r15, 1073741824;
	@%p69 bra 	$L__BB0_34;
// %bb.30:
	setp.lt.u32 	%p70, %r15, -2147483647;
	@%p70 bra 	$L__BB0_32;
// %bb.31:
	add.f32 	%f319, %f736, 0fBF800000;
	setp.lt.f32 	%p73, %f21, 0fC0000000;
	add.f32 	%f320, %f319, 0fBF800000;
	selp.f32 	%f736, %f320, %f319, %p73;
	bra.uni 	$L__BB0_34;
$L__BB0_32:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p71, %f21, 0f40800000;
	@%p71 bra 	$L__BB0_34;
// %bb.33:                              // %__nv_fmaf_rn.exit.i.i.i2002
	add.f32 	%f315, %f736, 0f3F800000;
	fma.rn.f32 	%f317, %f313, 0fC0400000, %f21;
	setp.ge.f32 	%p72, %f317, 0f00000000;
	add.f32 	%f318, %f315, 0f3F800000;
	selp.f32 	%f736, %f318, %f315, %p72;
$L__BB0_34:                             // %__internal_fmodf_fastpath_quot.exit.i.i2005
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_39:                             // %__internal_fmodf_kernel.exit.i2024
	abs.f32 	%f332, %f738;
	setp.gtu.f32 	%p79, %f332, 0f7F800000;
	@%p79 bra 	$L__BB0_41;
// %bb.40:
	mov.b32 	%r350, %f18;
	and.b32  	%r351, %r350, -2147483648;
	mov.b32 	%r352, %f738;
	or.b32  	%r353, %r351, %r352;
	mov.b32 	%f738, %r353;
$L__BB0_41:                             // %__nv_fmodf.exit2025
	add.f32 	%f333, %f738, %f738;
	mov.b32 	%r354, %f333;
	and.b32  	%r355, %r354, -2147483648;
	or.b32  	%r356, %r355, 1056964608;
	mov.b32 	%f334, %r356;
	add.f32 	%f335, %f333, %f334;
	cvt.rzi.f32.f32 	%f336, %f335;
	abs.f32 	%f337, %f333;
	setp.gt.f32 	%p80, %f337, 0f4B000000;
	selp.f32 	%f338, %f333, %f336, %p80;
	cvt.rzi.f32.f32 	%f339, %f333;
	setp.lt.f32 	%p81, %f337, 0f3F000000;
	selp.f32 	%f340, %f339, %f338, %p81;
	cvt.rzi.s32.f32 	%r357, %f340;
	fma.rn.f32 	%f341, %f340, 0fBF000000, %f738;
	mul.f32 	%f342, %f341, %f341;
	fma.rn.f32 	%f343, %f342, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f344, %f342, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f345, %f343, %f342, 0fC0A55DF6;
	fma.rn.f32 	%f346, %f344, %f342, 0f4081E0CF;
	fma.rn.f32 	%f347, %f342, %f341, 0f00000000;
	fma.rn.f32 	%f348, %f346, %f342, 0fC09DE9E6;
	fma.rn.f32 	%f349, %f345, %f347, 0f00000000;
	fma.rn.f32 	%f350, %f348, %f342, 0f3F800000;
	fma.rn.f32 	%f351, %f341, 0f40490FDB, %f349;
	and.b32  	%r358, %r357, 1;
	setp.eq.b32 	%p82, %r358, 1;
	selp.f32 	%f352, %f350, %f351, %p82;
	selp.f32 	%f353, %f351, %f350, %p82;
	and.b32  	%r359, %r357, 2;
	setp.eq.s32 	%p83, %r359, 0;
	neg.f32 	%f354, %f352;
	selp.f32 	%f355, %f352, %f354, %p83;
	add.s32 	%r360, %r357, 1;
	and.b32  	%r361, %r360, 2;
	setp.eq.s32 	%p84, %r361, 0;
	mov.f32 	%f356, 0f00000000;
	sub.f32 	%f357, %f356, %f353;
	selp.f32 	%f358, %f353, %f357, %p84;
	cvt.rzi.f32.f32 	%f359, %f738;
	setp.eq.f32 	%p85, %f359, %f738;
	mul.f32 	%f360, %f738, 0f00000000;
	selp.f32 	%f38, %f360, %f355, %p85;
	abs.f32 	%f361, %f738;
	setp.gt.f32 	%p86, %f361, 0f4B800000;
	add.f32 	%f362, %f38, 0f3F800000;
	selp.f32 	%f37, %f362, %f358, %p86;
$L__BB0_42:                             // %L565
	and.b32  	%r25, %r149, 3;
	setp.eq.s32 	%p87, %r25, 3;
	mov.f32 	%f731, 0f3FC00000;
	mov.f32 	%f746, %f250;
	mov.f32 	%f755, %f250;
	@%p87 bra 	$L__BB0_58;
// %bb.43:                              // %L603
	mul.lo.s32 	%r368, %r162, %r25;
	cvt.u16.u32 	%rs9, %r368;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 9;
	mul.lo.s16 	%rs12, %rs11, 3;
	sub.s16 	%rs13, %rs9, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f364, %rs14;
	div.approx.f32 	%f39, %f364, %f731;
	abs.f32 	%f744, %f39;
	setp.lt.f32 	%p88, %f744, 0f40000000;
	@%p88 bra 	$L__BB0_55;
// %bb.44:
	setp.gtu.f32 	%p89, %f744, 0f4B800000;
	@%p89 bra 	$L__BB0_51;
	bra.uni 	$L__BB0_45;
$L__BB0_51:
	mov.b32 	%r27, %f744;
	and.b32  	%r369, %r27, 8388607;
	or.b32  	%r2988, %r369, 1065353216;
	mov.b32 	%f743, %r2988;
	add.s32 	%r370, %r27, -1073741824;
	and.b32  	%r2989, %r370, -8388608;
	setp.eq.s32 	%p95, %r2989, 0;
	@%p95 bra 	$L__BB0_54;
// %bb.52:                              // %__nv_fmaf_rn.exit4.i.i.i2050.preheader
	mov.f32 	%f375, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f374,%f375;
	// end inline asm
$L__BB0_53:                             // %__nv_fmaf_rn.exit4.i.i.i2050
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r371, %r2989, 192937984;
	add.s32 	%r372, %r2988, %r371;
	mov.b32 	%f376, %r372;
	mul.f32 	%f377, %f374, %f376;
	sub.f32 	%f378, %f376, %f377;
	fma.rn.f32 	%f379, %f378, %f374, %f377;
	sub.f32 	%f380, %f376, %f379;
	fma.rz.f32 	%f381, %f380, %f374, %f379;
	cvt.rzi.f32.f32 	%f382, %f381;
	sub.f32 	%f743, %f376, %f382;
	sub.s32 	%r2989, %r2989, %r371;
	mov.b32 	%r2988, %f743;
	setp.ne.s32 	%p96, %r2989, 0;
	setp.ne.s32 	%p97, %r2988, 0;
	and.pred  	%p98, %p96, %p97;
	@%p98 bra 	$L__BB0_53;
$L__BB0_54:                             // %__internal_fmodf_slowpath_mod.exit.i.i2052
	setp.gt.u32 	%p99, %r27, 2139095039;
	selp.f32 	%f383, 0f7FFFFFFF, 0f4B800000, %p99;
	mul.f32 	%f384, %f743, 0f34000000;
	mul.f32 	%f744, %f383, %f384;
	bra.uni 	$L__BB0_55;
$L__BB0_45:                             // %__nv_fast_fdividef.exit.i.i.i2029
	mov.f32 	%f366, 0f40000000;
	div.approx.f32 	%f367, %f744, %f366;
	cvt.rzi.f32.f32 	%f742, %f367;
	fma.rn.f32 	%f42, %f742, 0fC0000000, %f744;
	mov.b32 	%r26, %f42;
	setp.lt.u32 	%p90, %r26, 1073741824;
	@%p90 bra 	$L__BB0_50;
// %bb.46:
	setp.lt.u32 	%p91, %r26, -2147483647;
	@%p91 bra 	$L__BB0_48;
// %bb.47:
	add.f32 	%f372, %f742, 0fBF800000;
	setp.lt.f32 	%p94, %f42, 0fC0000000;
	add.f32 	%f373, %f372, 0fBF800000;
	selp.f32 	%f742, %f373, %f372, %p94;
	bra.uni 	$L__BB0_50;
$L__BB0_48:
	add.f32 	%f742, %f742, 0f3F800000;
	setp.ltu.f32 	%p92, %f42, 0f40800000;
	@%p92 bra 	$L__BB0_50;
// %bb.49:                              // %__nv_fmaf_rn.exit.i.i.i2033
	add.f32 	%f368, %f742, 0f3F800000;
	fma.rn.f32 	%f370, %f366, 0fC0400000, %f42;
	setp.ge.f32 	%p93, %f370, 0f00000000;
	add.f32 	%f371, %f368, 0f3F800000;
	selp.f32 	%f742, %f371, %f368, %p93;
$L__BB0_50:                             // %__internal_fmodf_fastpath_quot.exit.i.i2036
	fma.rn.f32 	%f744, %f742, 0fC0000000, %f744;
$L__BB0_55:                             // %__internal_fmodf_kernel.exit.i2055
	abs.f32 	%f385, %f744;
	setp.gtu.f32 	%p100, %f385, 0f7F800000;
	@%p100 bra 	$L__BB0_57;
// %bb.56:
	mov.b32 	%r373, %f39;
	and.b32  	%r374, %r373, -2147483648;
	mov.b32 	%r375, %f744;
	or.b32  	%r376, %r374, %r375;
	mov.b32 	%f744, %r376;
$L__BB0_57:                             // %__nv_fmodf.exit2056
	add.f32 	%f386, %f744, %f744;
	mov.b32 	%r377, %f386;
	and.b32  	%r378, %r377, -2147483648;
	or.b32  	%r379, %r378, 1056964608;
	mov.b32 	%f387, %r379;
	add.f32 	%f388, %f386, %f387;
	cvt.rzi.f32.f32 	%f389, %f388;
	abs.f32 	%f390, %f386;
	setp.gt.f32 	%p101, %f390, 0f4B000000;
	selp.f32 	%f391, %f386, %f389, %p101;
	cvt.rzi.f32.f32 	%f392, %f386;
	setp.lt.f32 	%p102, %f390, 0f3F000000;
	selp.f32 	%f393, %f392, %f391, %p102;
	cvt.rzi.s32.f32 	%r380, %f393;
	fma.rn.f32 	%f394, %f393, 0fBF000000, %f744;
	mul.f32 	%f395, %f394, %f394;
	fma.rn.f32 	%f396, %f395, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f397, %f395, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f398, %f396, %f395, 0fC0A55DF6;
	fma.rn.f32 	%f399, %f397, %f395, 0f4081E0CF;
	fma.rn.f32 	%f400, %f395, %f394, 0f00000000;
	fma.rn.f32 	%f401, %f399, %f395, 0fC09DE9E6;
	fma.rn.f32 	%f402, %f398, %f400, 0f00000000;
	fma.rn.f32 	%f403, %f401, %f395, 0f3F800000;
	fma.rn.f32 	%f404, %f394, 0f40490FDB, %f402;
	and.b32  	%r381, %r380, 1;
	setp.eq.b32 	%p103, %r381, 1;
	selp.f32 	%f405, %f403, %f404, %p103;
	selp.f32 	%f406, %f404, %f403, %p103;
	and.b32  	%r382, %r380, 2;
	setp.eq.s32 	%p104, %r382, 0;
	neg.f32 	%f407, %f405;
	selp.f32 	%f408, %f405, %f407, %p104;
	add.s32 	%r383, %r380, 1;
	and.b32  	%r384, %r383, 2;
	setp.eq.s32 	%p105, %r384, 0;
	mov.f32 	%f409, 0f00000000;
	sub.f32 	%f410, %f409, %f406;
	selp.f32 	%f411, %f406, %f410, %p105;
	cvt.rzi.f32.f32 	%f412, %f744;
	setp.eq.f32 	%p106, %f412, %f744;
	mul.f32 	%f413, %f744, 0f00000000;
	selp.f32 	%f755, %f413, %f408, %p106;
	abs.f32 	%f414, %f744;
	setp.gt.f32 	%p107, %f414, 0f4B800000;
	add.f32 	%f415, %f755, 0f3F800000;
	selp.f32 	%f746, %f415, %f411, %p107;
$L__BB0_58:                             // %L637
	or.pred  	%p110, %p66, %p87;
	mov.f32 	%f752, %f250;
	mov.f32 	%f757, %f250;
	@%p110 bra 	$L__BB0_74;
// %bb.59:                              // %L645
	mul.lo.s32 	%r385, %r163, %r25;
	mul.hi.u32 	%r386, %r385, -1431655765;
	shr.u32 	%r387, %r386, 1;
	mul.lo.s32 	%r388, %r387, 3;
	sub.s32 	%r389, %r385, %r388;
	cvt.rn.f32.s32 	%f417, %r389;
	div.approx.f32 	%f60, %f417, %f731;
	abs.f32 	%f750, %f60;
	setp.lt.f32 	%p111, %f750, 0f40000000;
	@%p111 bra 	$L__BB0_71;
// %bb.60:
	setp.gtu.f32 	%p112, %f750, 0f4B800000;
	@%p112 bra 	$L__BB0_67;
	bra.uni 	$L__BB0_61;
$L__BB0_67:
	mov.b32 	%r35, %f750;
	and.b32  	%r390, %r35, 8388607;
	or.b32  	%r2990, %r390, 1065353216;
	mov.b32 	%f749, %r2990;
	add.s32 	%r391, %r35, -1073741824;
	and.b32  	%r2991, %r391, -8388608;
	setp.eq.s32 	%p118, %r2991, 0;
	@%p118 bra 	$L__BB0_70;
// %bb.68:                              // %__nv_fmaf_rn.exit4.i.i.i2081.preheader
	mov.f32 	%f428, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f427,%f428;
	// end inline asm
$L__BB0_69:                             // %__nv_fmaf_rn.exit4.i.i.i2081
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r392, %r2991, 192937984;
	add.s32 	%r393, %r2990, %r392;
	mov.b32 	%f429, %r393;
	mul.f32 	%f430, %f427, %f429;
	sub.f32 	%f431, %f429, %f430;
	fma.rn.f32 	%f432, %f431, %f427, %f430;
	sub.f32 	%f433, %f429, %f432;
	fma.rz.f32 	%f434, %f433, %f427, %f432;
	cvt.rzi.f32.f32 	%f435, %f434;
	sub.f32 	%f749, %f429, %f435;
	sub.s32 	%r2991, %r2991, %r392;
	mov.b32 	%r2990, %f749;
	setp.ne.s32 	%p119, %r2991, 0;
	setp.ne.s32 	%p120, %r2990, 0;
	and.pred  	%p121, %p119, %p120;
	@%p121 bra 	$L__BB0_69;
$L__BB0_70:                             // %__internal_fmodf_slowpath_mod.exit.i.i2083
	setp.gt.u32 	%p122, %r35, 2139095039;
	selp.f32 	%f436, 0f7FFFFFFF, 0f4B800000, %p122;
	mul.f32 	%f437, %f749, 0f34000000;
	mul.f32 	%f750, %f436, %f437;
	bra.uni 	$L__BB0_71;
$L__BB0_61:                             // %__nv_fast_fdividef.exit.i.i.i2060
	mov.f32 	%f419, 0f40000000;
	div.approx.f32 	%f420, %f750, %f419;
	cvt.rzi.f32.f32 	%f748, %f420;
	fma.rn.f32 	%f63, %f748, 0fC0000000, %f750;
	mov.b32 	%r34, %f63;
	setp.lt.u32 	%p113, %r34, 1073741824;
	@%p113 bra 	$L__BB0_66;
// %bb.62:
	setp.lt.u32 	%p114, %r34, -2147483647;
	@%p114 bra 	$L__BB0_64;
// %bb.63:
	add.f32 	%f425, %f748, 0fBF800000;
	setp.lt.f32 	%p117, %f63, 0fC0000000;
	add.f32 	%f426, %f425, 0fBF800000;
	selp.f32 	%f748, %f426, %f425, %p117;
	bra.uni 	$L__BB0_66;
$L__BB0_64:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p115, %f63, 0f40800000;
	@%p115 bra 	$L__BB0_66;
// %bb.65:                              // %__nv_fmaf_rn.exit.i.i.i2064
	add.f32 	%f421, %f748, 0f3F800000;
	fma.rn.f32 	%f423, %f419, 0fC0400000, %f63;
	setp.ge.f32 	%p116, %f423, 0f00000000;
	add.f32 	%f424, %f421, 0f3F800000;
	selp.f32 	%f748, %f424, %f421, %p116;
$L__BB0_66:                             // %__internal_fmodf_fastpath_quot.exit.i.i2067
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_71:                             // %__internal_fmodf_kernel.exit.i2086
	abs.f32 	%f438, %f750;
	setp.gtu.f32 	%p123, %f438, 0f7F800000;
	@%p123 bra 	$L__BB0_73;
// %bb.72:
	mov.b32 	%r394, %f60;
	and.b32  	%r395, %r394, -2147483648;
	mov.b32 	%r396, %f750;
	or.b32  	%r397, %r395, %r396;
	mov.b32 	%f750, %r397;
$L__BB0_73:                             // %__nv_fmodf.exit2087
	add.f32 	%f439, %f750, %f750;
	mov.b32 	%r398, %f439;
	and.b32  	%r399, %r398, -2147483648;
	or.b32  	%r400, %r399, 1056964608;
	mov.b32 	%f440, %r400;
	add.f32 	%f441, %f439, %f440;
	cvt.rzi.f32.f32 	%f442, %f441;
	abs.f32 	%f443, %f439;
	setp.gt.f32 	%p124, %f443, 0f4B000000;
	selp.f32 	%f444, %f439, %f442, %p124;
	cvt.rzi.f32.f32 	%f445, %f439;
	setp.lt.f32 	%p125, %f443, 0f3F000000;
	selp.f32 	%f446, %f445, %f444, %p125;
	cvt.rzi.s32.f32 	%r401, %f446;
	fma.rn.f32 	%f447, %f446, 0fBF000000, %f750;
	mul.f32 	%f448, %f447, %f447;
	fma.rn.f32 	%f449, %f448, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f450, %f448, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f451, %f449, %f448, 0fC0A55DF6;
	fma.rn.f32 	%f452, %f450, %f448, 0f4081E0CF;
	fma.rn.f32 	%f453, %f448, %f447, 0f00000000;
	fma.rn.f32 	%f454, %f452, %f448, 0fC09DE9E6;
	fma.rn.f32 	%f455, %f451, %f453, 0f00000000;
	fma.rn.f32 	%f456, %f454, %f448, 0f3F800000;
	fma.rn.f32 	%f457, %f447, 0f40490FDB, %f455;
	and.b32  	%r402, %r401, 1;
	setp.eq.b32 	%p126, %r402, 1;
	selp.f32 	%f458, %f456, %f457, %p126;
	selp.f32 	%f459, %f457, %f456, %p126;
	and.b32  	%r403, %r401, 2;
	setp.eq.s32 	%p127, %r403, 0;
	neg.f32 	%f460, %f458;
	selp.f32 	%f461, %f458, %f460, %p127;
	add.s32 	%r404, %r401, 1;
	and.b32  	%r405, %r404, 2;
	setp.eq.s32 	%p128, %r405, 0;
	mov.f32 	%f462, 0f00000000;
	sub.f32 	%f463, %f462, %f459;
	selp.f32 	%f464, %f459, %f463, %p128;
	cvt.rzi.f32.f32 	%f465, %f750;
	setp.eq.f32 	%p129, %f465, %f750;
	mul.f32 	%f466, %f750, 0f00000000;
	selp.f32 	%f757, %f466, %f461, %p129;
	abs.f32 	%f467, %f750;
	setp.gt.f32 	%p130, %f467, 0f4B800000;
	add.f32 	%f468, %f757, 0f3F800000;
	selp.f32 	%f752, %f468, %f464, %p130;
$L__BB0_74:                             // %L679
	and.b32  	%r42, %r288, 2;
	setp.eq.s32 	%p131, %r42, 0;
	mov.f32 	%f83, %f746;
	mov.f32 	%f85, %f752;
	@%p131 bra 	$L__BB0_76;
// %bb.75:                              // %L688
	neg.f32 	%f85, %f757;
	neg.f32 	%f83, %f755;
	mov.f32 	%f755, %f746;
	mov.f32 	%f757, %f752;
$L__BB0_76:                             // %L690
	@%p26 bra 	$L__BB0_206;
// %bb.77:
	@%p319 bra 	$L__BB0_202;
	bra.uni 	$L__BB0_78;
$L__BB0_202:
	mov.b32 	%r165, %f788;
	and.b32  	%r412, %r165, 8388607;
	or.b32  	%r3036, %r412, 1065353216;
	mov.b32 	%f787, %r3036;
	add.s32 	%r413, %r165, -1073741824;
	and.b32  	%r3037, %r413, -8388608;
	setp.eq.s32 	%p139, %r3037, 0;
	@%p139 bra 	$L__BB0_205;
// %bb.203:                             // %__nv_fmaf_rn.exit4.i.i.i2112.preheader
	mov.f32 	%f478, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f477,%f478;
	// end inline asm
$L__BB0_204:                            // %__nv_fmaf_rn.exit4.i.i.i2112
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r414, %r3037, 192937984;
	add.s32 	%r415, %r3036, %r414;
	mov.b32 	%f479, %r415;
	mul.f32 	%f480, %f477, %f479;
	sub.f32 	%f481, %f479, %f480;
	fma.rn.f32 	%f482, %f481, %f477, %f480;
	sub.f32 	%f483, %f479, %f482;
	fma.rz.f32 	%f484, %f483, %f477, %f482;
	cvt.rzi.f32.f32 	%f485, %f484;
	sub.f32 	%f787, %f479, %f485;
	sub.s32 	%r3037, %r3037, %r414;
	mov.b32 	%r3036, %f787;
	setp.ne.s32 	%p140, %r3037, 0;
	setp.ne.s32 	%p141, %r3036, 0;
	and.pred  	%p142, %p140, %p141;
	@%p142 bra 	$L__BB0_204;
$L__BB0_205:                            // %__internal_fmodf_slowpath_mod.exit.i.i2114
	setp.gt.u32 	%p143, %r165, 2139095039;
	selp.f32 	%f486, 0f7FFFFFFF, 0f4B800000, %p143;
	mul.f32 	%f487, %f787, 0f34000000;
	mul.f32 	%f788, %f486, %f487;
	bra.uni 	$L__BB0_206;
$L__BB0_78:                             // %__nv_fast_fdividef.exit.i.i.i2091
	mov.f32 	%f469, 0f40000000;
	div.approx.f32 	%f470, %f788, %f469;
	cvt.rzi.f32.f32 	%f786, %f470;
	fma.rn.f32 	%f189, %f786, 0fC0000000, %f788;
	mov.b32 	%r164, %f189;
	setp.lt.u32 	%p134, %r164, 1073741824;
	@%p134 bra 	$L__BB0_201;
// %bb.79:
	setp.lt.u32 	%p135, %r164, -2147483647;
	@%p135 bra 	$L__BB0_199;
// %bb.80:
	add.f32 	%f475, %f786, 0fBF800000;
	setp.lt.f32 	%p138, %f189, 0fC0000000;
	add.f32 	%f476, %f475, 0fBF800000;
	selp.f32 	%f786, %f476, %f475, %p138;
	bra.uni 	$L__BB0_201;
$L__BB0_199:
	add.f32 	%f786, %f786, 0f3F800000;
	setp.ltu.f32 	%p136, %f189, 0f40800000;
	@%p136 bra 	$L__BB0_201;
// %bb.200:                             // %__nv_fmaf_rn.exit.i.i.i2095
	add.f32 	%f471, %f786, 0f3F800000;
	fma.rn.f32 	%f473, %f469, 0fC0400000, %f189;
	setp.ge.f32 	%p137, %f473, 0f00000000;
	add.f32 	%f474, %f471, 0f3F800000;
	selp.f32 	%f786, %f474, %f471, %p137;
$L__BB0_201:                            // %__internal_fmodf_fastpath_quot.exit.i.i2098
	fma.rn.f32 	%f788, %f786, 0fC0000000, %f788;
$L__BB0_206:                            // %__internal_fmodf_kernel.exit.i2117
	abs.f32 	%f488, %f788;
	setp.gtu.f32 	%p144, %f488, 0f7F800000;
	@%p144 bra 	$L__BB0_208;
// %bb.207:
	mov.b32 	%r416, %f788;
	or.b32  	%r417, %r158, %r416;
	mov.b32 	%f788, %r417;
$L__BB0_208:                            // %__nv_fmodf.exit2118
	mov.f32 	%f512, 0f00000000;
	mov.f32 	%f521, 0f41000000;
	div.approx.f32 	%f203, %f512, %f521;
	abs.f32 	%f760, %f203;
	setp.lt.f32 	%p152, %f760, 0f40000000;
	@%p152 bra 	$L__BB0_92;
// %bb.81:
	setp.gtu.f32 	%p153, %f760, 0f4B800000;
	@%p153 bra 	$L__BB0_88;
	bra.uni 	$L__BB0_82;
$L__BB0_88:
	mov.b32 	%r46, %f760;
	and.b32  	%r432, %r46, 8388607;
	or.b32  	%r2992, %r432, 1065353216;
	mov.b32 	%f759, %r2992;
	add.s32 	%r433, %r46, -1073741824;
	and.b32  	%r2993, %r433, -8388608;
	setp.eq.s32 	%p159, %r2993, 0;
	@%p159 bra 	$L__BB0_91;
// %bb.89:                              // %__nv_fmaf_rn.exit4.i.i.i2143.preheader
	mov.f32 	%f531, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f530,%f531;
	// end inline asm
$L__BB0_90:                             // %__nv_fmaf_rn.exit4.i.i.i2143
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r434, %r2993, 192937984;
	add.s32 	%r435, %r2992, %r434;
	mov.b32 	%f532, %r435;
	mul.f32 	%f533, %f530, %f532;
	sub.f32 	%f534, %f532, %f533;
	fma.rn.f32 	%f535, %f534, %f530, %f533;
	sub.f32 	%f536, %f532, %f535;
	fma.rz.f32 	%f537, %f536, %f530, %f535;
	cvt.rzi.f32.f32 	%f538, %f537;
	sub.f32 	%f759, %f532, %f538;
	sub.s32 	%r2993, %r2993, %r434;
	mov.b32 	%r2992, %f759;
	setp.ne.s32 	%p160, %r2993, 0;
	setp.ne.s32 	%p161, %r2992, 0;
	and.pred  	%p162, %p160, %p161;
	@%p162 bra 	$L__BB0_90;
$L__BB0_91:                             // %__internal_fmodf_slowpath_mod.exit.i.i2145
	setp.gt.u32 	%p163, %r46, 2139095039;
	selp.f32 	%f539, 0f7FFFFFFF, 0f4B800000, %p163;
	mul.f32 	%f540, %f759, 0f34000000;
	mul.f32 	%f760, %f539, %f540;
	bra.uni 	$L__BB0_92;
$L__BB0_82:                             // %__nv_fast_fdividef.exit.i.i.i2122
	mov.f32 	%f522, 0f40000000;
	div.approx.f32 	%f523, %f760, %f522;
	cvt.rzi.f32.f32 	%f758, %f523;
	fma.rn.f32 	%f88, %f758, 0fC0000000, %f760;
	mov.b32 	%r45, %f88;
	setp.lt.u32 	%p154, %r45, 1073741824;
	@%p154 bra 	$L__BB0_87;
// %bb.83:
	setp.lt.u32 	%p155, %r45, -2147483647;
	@%p155 bra 	$L__BB0_85;
// %bb.84:
	add.f32 	%f528, %f758, 0fBF800000;
	setp.lt.f32 	%p158, %f88, 0fC0000000;
	add.f32 	%f529, %f528, 0fBF800000;
	selp.f32 	%f758, %f529, %f528, %p158;
	bra.uni 	$L__BB0_87;
$L__BB0_85:
	add.f32 	%f758, %f758, 0f3F800000;
	setp.ltu.f32 	%p156, %f88, 0f40800000;
	@%p156 bra 	$L__BB0_87;
// %bb.86:                              // %__nv_fmaf_rn.exit.i.i.i2126
	add.f32 	%f524, %f758, 0f3F800000;
	fma.rn.f32 	%f526, %f522, 0fC0400000, %f88;
	setp.ge.f32 	%p157, %f526, 0f00000000;
	add.f32 	%f527, %f524, 0f3F800000;
	selp.f32 	%f758, %f527, %f524, %p157;
$L__BB0_87:                             // %__internal_fmodf_fastpath_quot.exit.i.i2129
	fma.rn.f32 	%f760, %f758, 0fC0000000, %f760;
$L__BB0_92:                             // %__internal_fmodf_kernel.exit.i2148
	abs.f32 	%f541, %f760;
	setp.gtu.f32 	%p164, %f541, 0f7F800000;
	@%p164 bra 	$L__BB0_94;
// %bb.93:
	mov.b32 	%r436, %f203;
	and.b32  	%r437, %r436, -2147483648;
	mov.b32 	%r438, %f760;
	or.b32  	%r439, %r437, %r438;
	mov.b32 	%f760, %r439;
$L__BB0_94:                             // %__nv_fmodf.exit2149
	cvt.rn.f32.s32 	%f572, %r149;
	div.approx.f32 	%f104, %f572, %f521;
	abs.f32 	%f764, %f104;
	setp.lt.f32 	%p172, %f764, 0f40000000;
	@%p172 bra 	$L__BB0_106;
// %bb.95:
	setp.gtu.f32 	%p173, %f764, 0f4B800000;
	@%p173 bra 	$L__BB0_102;
	bra.uni 	$L__BB0_96;
$L__BB0_102:
	mov.b32 	%r54, %f764;
	and.b32  	%r448, %r54, 8388607;
	or.b32  	%r2994, %r448, 1065353216;
	mov.b32 	%f763, %r2994;
	add.s32 	%r449, %r54, -1073741824;
	and.b32  	%r2995, %r449, -8388608;
	setp.eq.s32 	%p179, %r2995, 0;
	@%p179 bra 	$L__BB0_105;
// %bb.103:                             // %__nv_fmaf_rn.exit4.i.i.i2174.preheader
	mov.f32 	%f583, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f582,%f583;
	// end inline asm
$L__BB0_104:                            // %__nv_fmaf_rn.exit4.i.i.i2174
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r450, %r2995, 192937984;
	add.s32 	%r451, %r2994, %r450;
	mov.b32 	%f584, %r451;
	mul.f32 	%f585, %f582, %f584;
	sub.f32 	%f586, %f584, %f585;
	fma.rn.f32 	%f587, %f586, %f582, %f585;
	sub.f32 	%f588, %f584, %f587;
	fma.rz.f32 	%f589, %f588, %f582, %f587;
	cvt.rzi.f32.f32 	%f590, %f589;
	sub.f32 	%f763, %f584, %f590;
	sub.s32 	%r2995, %r2995, %r450;
	mov.b32 	%r2994, %f763;
	setp.ne.s32 	%p180, %r2995, 0;
	setp.ne.s32 	%p181, %r2994, 0;
	and.pred  	%p182, %p180, %p181;
	@%p182 bra 	$L__BB0_104;
$L__BB0_105:                            // %__internal_fmodf_slowpath_mod.exit.i.i2176
	setp.gt.u32 	%p183, %r54, 2139095039;
	selp.f32 	%f591, 0f7FFFFFFF, 0f4B800000, %p183;
	mul.f32 	%f592, %f763, 0f34000000;
	mul.f32 	%f764, %f591, %f592;
	bra.uni 	$L__BB0_106;
$L__BB0_96:                             // %__nv_fast_fdividef.exit.i.i.i2153
	mov.f32 	%f574, 0f40000000;
	div.approx.f32 	%f575, %f764, %f574;
	cvt.rzi.f32.f32 	%f762, %f575;
	fma.rn.f32 	%f107, %f762, 0fC0000000, %f764;
	mov.b32 	%r53, %f107;
	setp.lt.u32 	%p174, %r53, 1073741824;
	@%p174 bra 	$L__BB0_101;
// %bb.97:
	setp.lt.u32 	%p175, %r53, -2147483647;
	@%p175 bra 	$L__BB0_99;
// %bb.98:
	add.f32 	%f580, %f762, 0fBF800000;
	setp.lt.f32 	%p178, %f107, 0fC0000000;
	add.f32 	%f581, %f580, 0fBF800000;
	selp.f32 	%f762, %f581, %f580, %p178;
	bra.uni 	$L__BB0_101;
$L__BB0_99:
	add.f32 	%f762, %f762, 0f3F800000;
	setp.ltu.f32 	%p176, %f107, 0f40800000;
	@%p176 bra 	$L__BB0_101;
// %bb.100:                             // %__nv_fmaf_rn.exit.i.i.i2157
	add.f32 	%f576, %f762, 0f3F800000;
	fma.rn.f32 	%f578, %f574, 0fC0400000, %f107;
	setp.ge.f32 	%p177, %f578, 0f00000000;
	add.f32 	%f579, %f576, 0f3F800000;
	selp.f32 	%f762, %f579, %f576, %p177;
$L__BB0_101:                            // %__internal_fmodf_fastpath_quot.exit.i.i2160
	fma.rn.f32 	%f764, %f762, 0fC0000000, %f764;
$L__BB0_106:                            // %__internal_fmodf_kernel.exit.i2179
	abs.f32 	%f593, %f764;
	setp.gtu.f32 	%p184, %f593, 0f7F800000;
	@%p184 bra 	$L__BB0_108;
// %bb.107:
	mov.b32 	%r452, %f104;
	and.b32  	%r453, %r452, -2147483648;
	mov.b32 	%r454, %f764;
	or.b32  	%r455, %r453, %r454;
	mov.b32 	%f764, %r455;
$L__BB0_108:                            // %__nv_fmodf.exit2180
	and.b32  	%r64, %r288, 1;
	shr.u32 	%r65, %r288, 4;
	setp.ne.s32 	%p192, %r64, %r65;
	mov.f32 	%f770, %f512;
	mov.f32 	%f779, %f512;
	@%p192 bra 	$L__BB0_124;
// %bb.109:                             // %L895
	mov.f32 	%f626, 0f3F800000;
	mov.f32 	%f627, 0f00000000;
	div.approx.f32 	%f121, %f627, %f626;
	abs.f32 	%f768, %f121;
	setp.lt.f32 	%p193, %f768, 0f40000000;
	@%p193 bra 	$L__BB0_121;
// %bb.110:
	setp.gtu.f32 	%p194, %f768, 0f4B800000;
	@%p194 bra 	$L__BB0_117;
	bra.uni 	$L__BB0_111;
$L__BB0_117:
	mov.b32 	%r67, %f768;
	and.b32  	%r470, %r67, 8388607;
	or.b32  	%r2996, %r470, 1065353216;
	mov.b32 	%f767, %r2996;
	add.s32 	%r471, %r67, -1073741824;
	and.b32  	%r2997, %r471, -8388608;
	setp.eq.s32 	%p200, %r2997, 0;
	@%p200 bra 	$L__BB0_120;
// %bb.118:                             // %__nv_fmaf_rn.exit4.i.i.i2205.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f636,%f626;
	// end inline asm
$L__BB0_119:                            // %__nv_fmaf_rn.exit4.i.i.i2205
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r472, %r2997, 192937984;
	add.s32 	%r473, %r2996, %r472;
	mov.b32 	%f638, %r473;
	mul.f32 	%f639, %f636, %f638;
	sub.f32 	%f640, %f638, %f639;
	fma.rn.f32 	%f641, %f640, %f636, %f639;
	sub.f32 	%f642, %f638, %f641;
	fma.rz.f32 	%f643, %f642, %f636, %f641;
	cvt.rzi.f32.f32 	%f644, %f643;
	sub.f32 	%f767, %f638, %f644;
	sub.s32 	%r2997, %r2997, %r472;
	mov.b32 	%r2996, %f767;
	setp.ne.s32 	%p201, %r2997, 0;
	setp.ne.s32 	%p202, %r2996, 0;
	and.pred  	%p203, %p201, %p202;
	@%p203 bra 	$L__BB0_119;
$L__BB0_120:                            // %__internal_fmodf_slowpath_mod.exit.i.i2207
	setp.gt.u32 	%p204, %r67, 2139095039;
	selp.f32 	%f645, 0f7FFFFFFF, 0f4B800000, %p204;
	mul.f32 	%f646, %f767, 0f34000000;
	mul.f32 	%f768, %f645, %f646;
	bra.uni 	$L__BB0_121;
$L__BB0_111:                            // %__nv_fast_fdividef.exit.i.i.i2184
	mov.f32 	%f628, 0f40000000;
	div.approx.f32 	%f629, %f768, %f628;
	cvt.rzi.f32.f32 	%f766, %f629;
	fma.rn.f32 	%f124, %f766, 0fC0000000, %f768;
	mov.b32 	%r66, %f124;
	setp.lt.u32 	%p195, %r66, 1073741824;
	@%p195 bra 	$L__BB0_116;
// %bb.112:
	setp.lt.u32 	%p196, %r66, -2147483647;
	@%p196 bra 	$L__BB0_114;
// %bb.113:
	add.f32 	%f634, %f766, 0fBF800000;
	setp.lt.f32 	%p199, %f124, 0fC0000000;
	add.f32 	%f635, %f634, 0fBF800000;
	selp.f32 	%f766, %f635, %f634, %p199;
	bra.uni 	$L__BB0_116;
$L__BB0_114:
	add.f32 	%f766, %f766, 0f3F800000;
	setp.ltu.f32 	%p197, %f124, 0f40800000;
	@%p197 bra 	$L__BB0_116;
// %bb.115:                             // %__nv_fmaf_rn.exit.i.i.i2188
	add.f32 	%f630, %f766, 0f3F800000;
	fma.rn.f32 	%f632, %f628, 0fC0400000, %f124;
	setp.ge.f32 	%p198, %f632, 0f00000000;
	add.f32 	%f633, %f630, 0f3F800000;
	selp.f32 	%f766, %f633, %f630, %p198;
$L__BB0_116:                            // %__internal_fmodf_fastpath_quot.exit.i.i2191
	fma.rn.f32 	%f768, %f766, 0fC0000000, %f768;
$L__BB0_121:                            // %__internal_fmodf_kernel.exit.i2210
	abs.f32 	%f647, %f768;
	setp.gtu.f32 	%p205, %f647, 0f7F800000;
	@%p205 bra 	$L__BB0_123;
// %bb.122:
	mov.b32 	%r474, %f121;
	and.b32  	%r475, %r474, -2147483648;
	mov.b32 	%r476, %f768;
	or.b32  	%r477, %r475, %r476;
	mov.b32 	%f768, %r477;
$L__BB0_123:                            // %__nv_fmodf.exit2211
	add.f32 	%f648, %f768, %f768;
	mov.b32 	%r478, %f648;
	and.b32  	%r479, %r478, -2147483648;
	or.b32  	%r480, %r479, 1056964608;
	mov.b32 	%f649, %r480;
	add.f32 	%f650, %f648, %f649;
	cvt.rzi.f32.f32 	%f651, %f650;
	abs.f32 	%f652, %f648;
	setp.gt.f32 	%p206, %f652, 0f4B000000;
	selp.f32 	%f653, %f648, %f651, %p206;
	cvt.rzi.f32.f32 	%f654, %f648;
	setp.lt.f32 	%p207, %f652, 0f3F000000;
	selp.f32 	%f655, %f654, %f653, %p207;
	cvt.rzi.s32.f32 	%r481, %f655;
	fma.rn.f32 	%f656, %f655, 0fBF000000, %f768;
	mul.f32 	%f657, %f656, %f656;
	fma.rn.f32 	%f658, %f657, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f659, %f657, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f660, %f658, %f657, 0fC0A55DF6;
	fma.rn.f32 	%f661, %f659, %f657, 0f4081E0CF;
	fma.rn.f32 	%f662, %f657, %f656, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f657, 0fC09DE9E6;
	fma.rn.f32 	%f664, %f660, %f662, 0f00000000;
	fma.rn.f32 	%f665, %f663, %f657, 0f3F800000;
	fma.rn.f32 	%f666, %f656, 0f40490FDB, %f664;
	and.b32  	%r482, %r481, 1;
	setp.eq.b32 	%p208, %r482, 1;
	selp.f32 	%f667, %f665, %f666, %p208;
	selp.f32 	%f668, %f666, %f665, %p208;
	and.b32  	%r483, %r481, 2;
	setp.eq.s32 	%p209, %r483, 0;
	neg.f32 	%f669, %f667;
	selp.f32 	%f670, %f667, %f669, %p209;
	add.s32 	%r484, %r481, 1;
	and.b32  	%r485, %r484, 2;
	setp.eq.s32 	%p210, %r485, 0;
	sub.f32 	%f672, %f627, %f668;
	selp.f32 	%f673, %f668, %f672, %p210;
	cvt.rzi.f32.f32 	%f674, %f768;
	setp.eq.f32 	%p211, %f674, %f768;
	mul.f32 	%f675, %f768, 0f00000000;
	selp.f32 	%f779, %f675, %f670, %p211;
	abs.f32 	%f676, %f768;
	setp.gt.f32 	%p212, %f676, 0f4B800000;
	add.f32 	%f677, %f779, 0f3F800000;
	selp.f32 	%f770, %f677, %f673, %p212;
$L__BB0_124:                            // %L934
	and.b32  	%r63, %r149, 1;
	mov.f32 	%f776, %f512;
	mov.f32 	%f781, %f512;
	@%p192 bra 	$L__BB0_140;
// %bb.125:                             // %L937
	cvt.rn.f32.s32 	%f679, %r63;
	mov.f32 	%f680, 0f3F800000;
	div.approx.f32 	%f142, %f679, %f680;
	abs.f32 	%f774, %f142;
	setp.lt.f32 	%p214, %f774, 0f40000000;
	@%p214 bra 	$L__BB0_137;
// %bb.126:
	setp.gtu.f32 	%p215, %f774, 0f4B800000;
	@%p215 bra 	$L__BB0_133;
	bra.uni 	$L__BB0_127;
$L__BB0_133:
	mov.b32 	%r75, %f774;
	and.b32  	%r486, %r75, 8388607;
	or.b32  	%r2998, %r486, 1065353216;
	mov.b32 	%f773, %r2998;
	add.s32 	%r487, %r75, -1073741824;
	and.b32  	%r2999, %r487, -8388608;
	setp.eq.s32 	%p221, %r2999, 0;
	@%p221 bra 	$L__BB0_136;
// %bb.134:                             // %__nv_fmaf_rn.exit4.i.i.i2236.preheader
	// begin inline asm
	rcp.approx.ftz.f32 %f689,%f680;
	// end inline asm
$L__BB0_135:                            // %__nv_fmaf_rn.exit4.i.i.i2236
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r488, %r2999, 192937984;
	add.s32 	%r489, %r2998, %r488;
	mov.b32 	%f691, %r489;
	mul.f32 	%f692, %f689, %f691;
	sub.f32 	%f693, %f691, %f692;
	fma.rn.f32 	%f694, %f693, %f689, %f692;
	sub.f32 	%f695, %f691, %f694;
	fma.rz.f32 	%f696, %f695, %f689, %f694;
	cvt.rzi.f32.f32 	%f697, %f696;
	sub.f32 	%f773, %f691, %f697;
	sub.s32 	%r2999, %r2999, %r488;
	mov.b32 	%r2998, %f773;
	setp.ne.s32 	%p222, %r2999, 0;
	setp.ne.s32 	%p223, %r2998, 0;
	and.pred  	%p224, %p222, %p223;
	@%p224 bra 	$L__BB0_135;
$L__BB0_136:                            // %__internal_fmodf_slowpath_mod.exit.i.i2238
	setp.gt.u32 	%p225, %r75, 2139095039;
	selp.f32 	%f698, 0f7FFFFFFF, 0f4B800000, %p225;
	mul.f32 	%f699, %f773, 0f34000000;
	mul.f32 	%f774, %f698, %f699;
	bra.uni 	$L__BB0_137;
$L__BB0_127:                            // %__nv_fast_fdividef.exit.i.i.i2215
	mov.f32 	%f681, 0f40000000;
	div.approx.f32 	%f682, %f774, %f681;
	cvt.rzi.f32.f32 	%f772, %f682;
	fma.rn.f32 	%f145, %f772, 0fC0000000, %f774;
	mov.b32 	%r74, %f145;
	setp.lt.u32 	%p216, %r74, 1073741824;
	@%p216 bra 	$L__BB0_132;
// %bb.128:
	setp.lt.u32 	%p217, %r74, -2147483647;
	@%p217 bra 	$L__BB0_130;
// %bb.129:
	add.f32 	%f687, %f772, 0fBF800000;
	setp.lt.f32 	%p220, %f145, 0fC0000000;
	add.f32 	%f688, %f687, 0fBF800000;
	selp.f32 	%f772, %f688, %f687, %p220;
	bra.uni 	$L__BB0_132;
$L__BB0_130:
	add.f32 	%f772, %f772, 0f3F800000;
	setp.ltu.f32 	%p218, %f145, 0f40800000;
	@%p218 bra 	$L__BB0_132;
// %bb.131:                             // %__nv_fmaf_rn.exit.i.i.i2219
	add.f32 	%f683, %f772, 0f3F800000;
	fma.rn.f32 	%f685, %f681, 0fC0400000, %f145;
	setp.ge.f32 	%p219, %f685, 0f00000000;
	add.f32 	%f686, %f683, 0f3F800000;
	selp.f32 	%f772, %f686, %f683, %p219;
$L__BB0_132:                            // %__internal_fmodf_fastpath_quot.exit.i.i2222
	fma.rn.f32 	%f774, %f772, 0fC0000000, %f774;
$L__BB0_137:                            // %__internal_fmodf_kernel.exit.i2241
	abs.f32 	%f700, %f774;
	setp.gtu.f32 	%p226, %f700, 0f7F800000;
	@%p226 bra 	$L__BB0_139;
// %bb.138:
	mov.b32 	%r490, %f142;
	and.b32  	%r491, %r490, -2147483648;
	mov.b32 	%r492, %f774;
	or.b32  	%r493, %r491, %r492;
	mov.b32 	%f774, %r493;
$L__BB0_139:                            // %__nv_fmodf.exit2242
	add.f32 	%f701, %f774, %f774;
	mov.b32 	%r494, %f701;
	and.b32  	%r495, %r494, -2147483648;
	or.b32  	%r496, %r495, 1056964608;
	mov.b32 	%f702, %r496;
	add.f32 	%f703, %f701, %f702;
	cvt.rzi.f32.f32 	%f704, %f703;
	abs.f32 	%f705, %f701;
	setp.gt.f32 	%p227, %f705, 0f4B000000;
	selp.f32 	%f706, %f701, %f704, %p227;
	cvt.rzi.f32.f32 	%f707, %f701;
	setp.lt.f32 	%p228, %f705, 0f3F000000;
	selp.f32 	%f708, %f707, %f706, %p228;
	cvt.rzi.s32.f32 	%r497, %f708;
	fma.rn.f32 	%f709, %f708, 0fBF000000, %f774;
	mul.f32 	%f710, %f709, %f709;
	fma.rn.f32 	%f711, %f710, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f712, %f710, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f713, %f711, %f710, 0fC0A55DF6;
	fma.rn.f32 	%f714, %f712, %f710, 0f4081E0CF;
	fma.rn.f32 	%f715, %f710, %f709, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f710, 0fC09DE9E6;
	fma.rn.f32 	%f717, %f713, %f715, 0f00000000;
	fma.rn.f32 	%f718, %f716, %f710, 0f3F800000;
	fma.rn.f32 	%f719, %f709, 0f40490FDB, %f717;
	and.b32  	%r498, %r497, 1;
	setp.eq.b32 	%p229, %r498, 1;
	selp.f32 	%f720, %f718, %f719, %p229;
	selp.f32 	%f721, %f719, %f718, %p229;
	and.b32  	%r499, %r497, 2;
	setp.eq.s32 	%p230, %r499, 0;
	neg.f32 	%f722, %f720;
	selp.f32 	%f723, %f720, %f722, %p230;
	add.s32 	%r500, %r497, 1;
	and.b32  	%r501, %r500, 2;
	setp.eq.s32 	%p231, %r501, 0;
	mov.f32 	%f724, 0f00000000;
	sub.f32 	%f725, %f724, %f721;
	selp.f32 	%f726, %f721, %f725, %p231;
	cvt.rzi.f32.f32 	%f727, %f774;
	setp.eq.f32 	%p232, %f727, %f774;
	mul.f32 	%f728, %f774, 0f00000000;
	selp.f32 	%f781, %f728, %f723, %p232;
	abs.f32 	%f729, %f774;
	setp.gt.f32 	%p233, %f729, 0f4B800000;
	add.f32 	%f730, %f781, 0f3F800000;
	selp.f32 	%f776, %f730, %f726, %p233;
$L__BB0_140:                            // %L971
	mov.f32 	%f165, %f770;
	mov.f32 	%f167, %f776;
	@%p131 bra 	$L__BB0_142;
// %bb.141:                             // %L980
	neg.f32 	%f167, %f781;
	neg.f32 	%f165, %f779;
	mov.f32 	%f779, %f770;
	mov.f32 	%f781, %f776;
$L__BB0_142:                            // %L982
	setp.gt.u32 	%p235, %r288, 15;
	mov.u32 	%r174, 999999999;
	@%p235 bra 	$L__BB0_210;
// %bb.143:                             // %L1012
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	mad.lo.s32 	%r509, %r288, 6, %r1;
	cvt.u16.u32 	%rs15, %r509;
	and.b16  	%rs16, %rs15, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 14;
	mul.lo.s16 	%rs19, %rs18, 96;
	sub.s16 	%rs20, %rs15, %rs19;
	cvt.u32.u16 	%r510, %rs20;
	and.b32  	%r511, %r510, 255;
	mul.wide.u32 	%rd21, %r511, 4;
	add.s64 	%rd22, %rd1, %rd21;
	ld.global.u32 	%r512, [%rd22];
	shl.b32 	%r513, %r512, 16;
	cvt.s32.s16 	%r84, %r512;
	shr.s32 	%r85, %r512, 16;
	or.b32  	%r514, %r513, 65535;
	setp.lt.u32 	%p236, %r514, 589823;
	setp.lt.u32 	%p237, %r512, 786432;
	and.pred  	%p238, %p236, %p237;
	@%p238 bra 	$L__BB0_209;
	bra.uni 	$L__BB0_144;
$L__BB0_209:                            // %L1256
	mul.lo.s32 	%r518, %r85, 290;
	mad.lo.s32 	%r174, %r84, 33, %r518;
$L__BB0_210:                            // %pass527
	add.f32 	%f227, %f784, %f784;
	mov.b32 	%r316, %f227;
	add.f32 	%f489, %f788, %f788;
	and.b32  	%r317, %r316, -2147483648;
	add.f32 	%f282, %f734, %f734;
	mov.b32 	%r424, %f489;
	or.b32  	%r318, %r317, 1056964608;
	mov.b32 	%r333, %f282;
	and.b32  	%r425, %r424, -2147483648;
	add.f32 	%f542, %f760, %f760;
	add.f32 	%f595, %f764, %f764;
	mov.b32 	%f228, %r318;
	and.b32  	%r334, %r333, -2147483648;
	or.b32  	%r426, %r425, 1056964608;
	mov.b32 	%r440, %f542;
	mov.b32 	%r462, %f595;
	add.f32 	%f229, %f227, %f228;
	abs.f32 	%f231, %f227;
	or.b32  	%r335, %r334, 1056964608;
	mov.b32 	%f490, %r426;
	and.b32  	%r441, %r440, -2147483648;
	and.b32  	%r463, %r462, -2147483648;
	cvt.rzi.f32.f32 	%f230, %f229;
	setp.gt.f32 	%p39, %f231, 0f4B000000;
	mov.b32 	%f283, %r335;
	add.f32 	%f491, %f489, %f490;
	abs.f32 	%f493, %f489;
	or.b32  	%r442, %r441, 1056964608;
	or.b32  	%r464, %r463, 1056964608;
	selp.f32 	%f232, %f227, %f230, %p39;
	cvt.rzi.f32.f32 	%f233, %f227;
	setp.lt.f32 	%p40, %f231, 0f3F000000;
	add.f32 	%f284, %f282, %f283;
	abs.f32 	%f286, %f282;
	cvt.rzi.f32.f32 	%f492, %f491;
	setp.gt.f32 	%p145, %f493, 0f4B000000;
	mov.b32 	%f543, %r442;
	mov.b32 	%f596, %r464;
	selp.f32 	%f234, %f233, %f232, %p40;
	cvt.rzi.f32.f32 	%f285, %f284;
	setp.gt.f32 	%p59, %f286, 0f4B000000;
	selp.f32 	%f494, %f489, %f492, %p145;
	cvt.rzi.f32.f32 	%f495, %f489;
	setp.lt.f32 	%p146, %f493, 0f3F000000;
	add.f32 	%f544, %f542, %f543;
	abs.f32 	%f546, %f542;
	add.f32 	%f597, %f595, %f596;
	abs.f32 	%f599, %f595;
	fma.rn.f32 	%f235, %f234, 0fBF000000, %f784;
	selp.f32 	%f287, %f282, %f285, %p59;
	cvt.rzi.f32.f32 	%f288, %f282;
	setp.lt.f32 	%p60, %f286, 0f3F000000;
	selp.f32 	%f496, %f495, %f494, %p146;
	cvt.rzi.f32.f32 	%f545, %f544;
	setp.gt.f32 	%p165, %f546, 0f4B000000;
	cvt.rzi.f32.f32 	%f598, %f597;
	setp.gt.f32 	%p185, %f599, 0f4B000000;
	mul.f32 	%f236, %f235, %f235;
	selp.f32 	%f289, %f288, %f287, %p60;
	fma.rn.f32 	%f497, %f496, 0fBF000000, %f788;
	selp.f32 	%f547, %f542, %f545, %p165;
	cvt.rzi.f32.f32 	%f548, %f542;
	setp.lt.f32 	%p166, %f546, 0f3F000000;
	selp.f32 	%f600, %f595, %f598, %p185;
	cvt.rzi.f32.f32 	%f601, %f595;
	setp.lt.f32 	%p186, %f599, 0f3F000000;
	fma.rn.f32 	%f237, %f236, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f238, %f236, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f290, %f289, 0fBF000000, %f734;
	mul.f32 	%f498, %f497, %f497;
	selp.f32 	%f549, %f548, %f547, %p166;
	selp.f32 	%f602, %f601, %f600, %p186;
	cvt.rzi.s32.f32 	%r319, %f234;
	fma.rn.f32 	%f239, %f237, %f236, 0fC0A55DF6;
	fma.rn.f32 	%f240, %f238, %f236, 0f4081E0CF;
	fma.rn.f32 	%f241, %f236, %f235, 0f00000000;
	mul.f32 	%f291, %f290, %f290;
	fma.rn.f32 	%f499, %f498, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f500, %f498, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f550, %f549, 0fBF000000, %f760;
	fma.rn.f32 	%f603, %f602, 0fBF000000, %f764;
	fma.rn.f32 	%f242, %f240, %f236, 0fC09DE9E6;
	fma.rn.f32 	%f243, %f239, %f241, 0f00000000;
	and.b32  	%r320, %r319, 1;
	fma.rn.f32 	%f292, %f291, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f293, %f291, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r427, %f496;
	fma.rn.f32 	%f501, %f499, %f498, 0fC0A55DF6;
	fma.rn.f32 	%f502, %f500, %f498, 0f4081E0CF;
	fma.rn.f32 	%f503, %f498, %f497, 0f00000000;
	mul.f32 	%f551, %f550, %f550;
	mul.f32 	%f604, %f603, %f603;
	fma.rn.f32 	%f244, %f242, %f236, 0f3F800000;
	fma.rn.f32 	%f245, %f235, 0f40490FDB, %f243;
	setp.eq.b32 	%p41, %r320, 1;
	cvt.rzi.s32.f32 	%r336, %f289;
	fma.rn.f32 	%f294, %f292, %f291, 0fC0A55DF6;
	fma.rn.f32 	%f295, %f293, %f291, 0f4081E0CF;
	fma.rn.f32 	%f296, %f291, %f290, 0f00000000;
	fma.rn.f32 	%f504, %f502, %f498, 0fC09DE9E6;
	fma.rn.f32 	%f505, %f501, %f503, 0f00000000;
	and.b32  	%r428, %r427, 1;
	fma.rn.f32 	%f552, %f551, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f553, %f551, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f604, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f606, %f604, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f246, %f244, %f245, %p41;
	and.b32  	%r321, %r319, 2;
	fma.rn.f32 	%f297, %f295, %f291, 0fC09DE9E6;
	fma.rn.f32 	%f298, %f294, %f296, 0f00000000;
	and.b32  	%r337, %r336, 1;
	fma.rn.f32 	%f506, %f504, %f498, 0f3F800000;
	fma.rn.f32 	%f507, %f497, 0f40490FDB, %f505;
	setp.eq.b32 	%p147, %r428, 1;
	cvt.rzi.s32.f32 	%r443, %f549;
	fma.rn.f32 	%f554, %f552, %f551, 0fC0A55DF6;
	fma.rn.f32 	%f555, %f553, %f551, 0f4081E0CF;
	fma.rn.f32 	%f556, %f551, %f550, 0f00000000;
	cvt.rzi.s32.f32 	%r465, %f602;
	fma.rn.f32 	%f607, %f605, %f604, 0fC0A55DF6;
	fma.rn.f32 	%f608, %f606, %f604, 0f4081E0CF;
	fma.rn.f32 	%f609, %f604, %f603, 0f00000000;
	setp.eq.s32 	%p42, %r321, 0;
	neg.f32 	%f248, %f246;
	add.s32 	%r322, %r319, 1;
	cvt.rzi.f32.f32 	%f253, %f784;
	fma.rn.f32 	%f299, %f297, %f291, 0f3F800000;
	fma.rn.f32 	%f300, %f290, 0f40490FDB, %f298;
	setp.eq.b32 	%p61, %r337, 1;
	selp.f32 	%f508, %f506, %f507, %p147;
	and.b32  	%r429, %r427, 2;
	fma.rn.f32 	%f557, %f555, %f551, 0fC09DE9E6;
	fma.rn.f32 	%f558, %f554, %f556, 0f00000000;
	and.b32  	%r444, %r443, 1;
	fma.rn.f32 	%f610, %f608, %f604, 0fC09DE9E6;
	fma.rn.f32 	%f611, %f607, %f609, 0f00000000;
	and.b32  	%r466, %r465, 1;
	selp.f32 	%f247, %f245, %f244, %p41;
	selp.f32 	%f249, %f246, %f248, %p42;
	and.b32  	%r323, %r322, 2;
	setp.eq.f32 	%p44, %f253, %f784;
	mul.f32 	%f254, %f784, 0f00000000;
	selp.f32 	%f301, %f299, %f300, %p61;
	and.b32  	%r338, %r336, 2;
	setp.eq.s32 	%p148, %r429, 0;
	neg.f32 	%f510, %f508;
	add.s32 	%r430, %r427, 1;
	cvt.rzi.f32.f32 	%f515, %f788;
	fma.rn.f32 	%f559, %f557, %f551, 0f3F800000;
	fma.rn.f32 	%f560, %f550, 0f40490FDB, %f558;
	setp.eq.b32 	%p167, %r444, 1;
	fma.rn.f32 	%f612, %f610, %f604, 0f3F800000;
	fma.rn.f32 	%f613, %f603, 0f40490FDB, %f611;
	setp.eq.b32 	%p187, %r466, 1;
	setp.eq.s32 	%p43, %r323, 0;
	sub.f32 	%f251, %f250, %f247;
	selp.f32 	%f255, %f254, %f249, %p44;
	abs.f32 	%f256, %f784;
	setp.eq.s32 	%p62, %r338, 0;
	neg.f32 	%f303, %f301;
	add.s32 	%r339, %r336, 1;
	cvt.rzi.f32.f32 	%f307, %f734;
	selp.f32 	%f509, %f507, %f506, %p147;
	selp.f32 	%f511, %f508, %f510, %p148;
	and.b32  	%r431, %r430, 2;
	setp.eq.f32 	%p150, %f515, %f788;
	mul.f32 	%f516, %f788, 0f00000000;
	selp.f32 	%f561, %f559, %f560, %p167;
	and.b32  	%r445, %r443, 2;
	selp.f32 	%f614, %f612, %f613, %p187;
	and.b32  	%r467, %r465, 2;
	selp.f32 	%f252, %f247, %f251, %p43;
	setp.gt.f32 	%p45, %f256, 0f4B800000;
	add.f32 	%f257, %f255, 0f3F800000;
	selp.f32 	%f302, %f300, %f299, %p61;
	selp.f32 	%f304, %f301, %f303, %p62;
	and.b32  	%r340, %r339, 2;
	setp.eq.f32 	%p64, %f307, %f734;
	mul.f32 	%f308, %f734, 0f00000000;
	setp.eq.s32 	%p149, %r431, 0;
	sub.f32 	%f513, %f512, %f509;
	selp.f32 	%f517, %f516, %f511, %p150;
	abs.f32 	%f518, %f788;
	setp.eq.s32 	%p168, %r445, 0;
	neg.f32 	%f563, %f561;
	add.s32 	%r446, %r443, 1;
	cvt.rzi.f32.f32 	%f568, %f760;
	setp.eq.s32 	%p188, %r467, 0;
	neg.f32 	%f616, %f614;
	add.s32 	%r468, %r465, 1;
	cvt.rzi.f32.f32 	%f620, %f764;
	selp.f32 	%f258, %f257, %f252, %p45;
	setp.eq.s32 	%p63, %r340, 0;
	sub.f32 	%f305, %f250, %f302;
	selp.f32 	%f16, %f308, %f304, %p64;
	abs.f32 	%f309, %f734;
	selp.f32 	%f514, %f509, %f513, %p149;
	setp.gt.f32 	%p151, %f518, 0f4B800000;
	add.f32 	%f519, %f517, 0f3F800000;
	selp.f32 	%f562, %f560, %f559, %p167;
	selp.f32 	%f564, %f561, %f563, %p168;
	and.b32  	%r447, %r446, 2;
	setp.eq.f32 	%p170, %f568, %f760;
	mul.f32 	%f569, %f760, 0f00000000;
	selp.f32 	%f615, %f613, %f612, %p187;
	selp.f32 	%f617, %f614, %f616, %p188;
	and.b32  	%r469, %r468, 2;
	setp.eq.f32 	%p190, %f620, %f764;
	mul.f32 	%f621, %f764, 0f00000000;
	mov.b32 	%r312, %f258;
	mov.b32 	%r315, %f255;
	selp.f32 	%f306, %f302, %f305, %p63;
	setp.gt.f32 	%p65, %f309, 0f4B800000;
	add.f32 	%f310, %f16, 0f3F800000;
	selp.f32 	%f520, %f519, %f514, %p151;
	setp.eq.s32 	%p169, %r447, 0;
	sub.f32 	%f566, %f512, %f562;
	selp.f32 	%f102, %f569, %f564, %p170;
	abs.f32 	%f570, %f760;
	setp.eq.s32 	%p189, %r469, 0;
	sub.f32 	%f618, %f512, %f615;
	selp.f32 	%f622, %f621, %f617, %p190;
	abs.f32 	%f623, %f764;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r311, %r315, -2147483648;
	selp.f32 	%f17, %f310, %f306, %p65;
	mov.b32 	%r420, %f520;
	mov.b32 	%r423, %f517;
	selp.f32 	%f567, %f562, %f566, %p169;
	setp.gt.f32 	%p171, %f570, 0f4B800000;
	add.f32 	%f571, %f102, 0f3F800000;
	selp.f32 	%f619, %f615, %f618, %p189;
	setp.gt.f32 	%p191, %f623, 0f4B800000;
	add.f32 	%f624, %f622, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r310, %r312, %r311;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r313, %r315, %r312;
	// end inline asm
	mov.b32 	%r363, %f17;
	mov.b32 	%r364, %f37;
	mov.b32 	%r366, %f16;
	mov.b32 	%r367, %f38;
	mov.b32 	%r407, %f83;
	mov.b32 	%r408, %f85;
	mov.b32 	%r410, %f755;
	mov.b32 	%r411, %f757;
	xor.b32  	%r419, %r423, -2147483648;
	selp.f32 	%f103, %f571, %f567, %p171;
	selp.f32 	%f625, %f624, %f619, %p191;
	// begin inline asm
	cvt.rn.f16x2.f32 %r362, %r364, %r363;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r365, %r367, %r366;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r406, %r408, %r407;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r409, %r411, %r410;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r418, %r420, %r419;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r421, %r423, %r420;
	// end inline asm
	mov.b32 	%r458, %f625;
	mov.b32 	%r457, %f103;
	mov.b32 	%r461, %f622;
	mov.b32 	%r460, %f102;
	// begin inline asm
	cvt.rn.f16x2.f32 %r456, %r458, %r457;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r459, %r461, %r460;
	// end inline asm
	mov.b32 	%r503, %f165;
	mov.b32 	%r504, %f167;
	// begin inline asm
	cvt.rn.f16x2.f32 %r502, %r504, %r503;
	// end inline asm
	mov.b32 	%r506, %f779;
	mov.b32 	%r507, %f781;
	// begin inline asm
	cvt.rn.f16x2.f32 %r505, %r507, %r506;
	// end inline asm
	shl.b32 	%r520, %r1, 1;
	and.b32  	%r521, %r520, 2;
	shr.u32 	%r175, %r288, 3;
	bfe.u32 	%r522, %r288, 3, 1;
	or.b32  	%r523, %r521, %r522;
	mul.lo.s32 	%r524, %r148, 24;
	and.b32  	%r525, %r175, 2;
	or.b32  	%r176, %r525, %r63;
	cvt.u16.u32 	%rs23, %r176;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 9;
	mul.lo.s16 	%rs26, %rs25, 3;
	sub.s16 	%rs27, %rs23, %rs26;
	cvt.u32.u16 	%r526, %rs27;
	and.b32  	%r527, %r526, 255;
	and.b16  	%rs28, %rs27, 255;
	mul.wide.u16 	%r528, %rs28, 8;
	add.s32 	%r529, %r524, %r4;
	or.b32  	%r530, %r529, %r523;
	add.s32 	%r531, %r530, %r528;
	mul.wide.u32 	%rd28, %r531, 4;
	add.s64 	%rd29, %rd2, %rd28;
	ld.global.u32 	%r177, [%rd29];
	cvt.u64.u32 	%rd30, %r528;
	cvt.u64.u32 	%rd31, %r523;
	cvt.u64.u32 	%rd32, %r524;
	cvt.u64.u32 	%rd33, %r4;
	add.s64 	%rd34, %rd33, %rd32;
	add.s64 	%rd35, %rd34, %rd31;
	add.s64 	%rd36, %rd35, %rd30;
	shl.b64 	%rd37, %rd36, 2;
	add.s64 	%rd38, %rd2, %rd37;
	ld.global.u32 	%r178, [%rd38+16];
	ld.global.u32 	%r179, [%rd38+384];
	ld.global.u32 	%r180, [%rd38+400];
	shl.b32 	%r532, %r283, 5;
	shl.b32 	%r533, %r288, 2;
	shl.b32 	%r534, %r3, 5;
	and.b32  	%r535, %r533, 28;
	shl.b32 	%r181, %r1, 2;
	or.b32  	%r536, %r535, %r534;
	add.s32 	%r182, %r536, %r532;
	and.b32  	%r183, %r288, 4;
	shl.b32 	%r537, %r288, 4;
	and.b32  	%r538, %r161, 8;
	or.b32  	%r539, %r538, %r537;
	bfe.u32 	%r540, %r539, 3, 3;
	mul.lo.s32 	%r184, %r540, 260;
	cvt.u16.u32 	%rs29, %r288;
	and.b16  	%rs30, %rs29, 255;
	mul.lo.s16 	%rs31, %rs30, 171;
	shr.u16 	%rs32, %rs31, 12;
	mul.lo.s16 	%rs33, %rs32, 24;
	sub.s16 	%rs34, %rs29, %rs33;
	cvt.u32.u16 	%r541, %rs34;
	and.b32  	%r185, %r541, 255;
	add.s32 	%r542, %r1, 6;
	add.s32 	%r543, %r2, 192;
	and.b32  	%r544, %r543, 224;
	shr.u32 	%r545, %r542, 3;
	mad.lo.s32 	%r186, %r545, 260, %r544;
	add.s32 	%r546, %r1, 12;
	add.s32 	%r547, %r2, 128;
	and.b32  	%r548, %r547, 224;
	shr.u32 	%r549, %r546, 3;
	mad.lo.s32 	%r187, %r549, 260, %r548;
	add.s32 	%r550, %r1, 18;
	add.s32 	%r551, %r2, 64;
	and.b32  	%r552, %r551, 224;
	shr.u32 	%r553, %r550, 3;
	mad.lo.s32 	%r188, %r553, 260, %r552;
	or.b32  	%r189, %r2, 780;
	add.s32 	%r554, %r1, 30;
	shr.u32 	%r555, %r554, 3;
	mad.lo.s32 	%r190, %r555, 260, %r544;
	add.s32 	%r556, %r1, 36;
	shr.u32 	%r557, %r556, 3;
	mad.lo.s32 	%r191, %r557, 260, %r548;
	add.s32 	%r558, %r1, 42;
	shr.u32 	%r559, %r558, 3;
	mad.lo.s32 	%r192, %r559, 260, %r552;
	or.b32  	%r193, %r2, 1560;
	add.s32 	%r560, %r1, 54;
	shr.u32 	%r561, %r560, 3;
	mad.lo.s32 	%r194, %r561, 260, %r544;
	add.s32 	%r562, %r1, 60;
	bfe.u32 	%r563, %r562, 3, 3;
	mad.lo.s32 	%r195, %r563, 260, %r548;
	shr.u32 	%r564, %r1, 1;
	cvt.u16.u32 	%rs35, %r564;
	and.b16  	%rs36, %rs35, 255;
	mul.lo.s16 	%rs37, %rs36, 171;
	shr.u16 	%rs38, %rs37, 9;
	mul.lo.s16 	%rs39, %rs38, 3;
	sub.s16 	%rs40, %rs35, %rs39;
	cvt.u32.u16 	%r565, %rs40;
	and.b32  	%r196, %r565, 255;
	mul.lo.s32 	%r566, %r148, 870;
	mad.lo.s32 	%r567, %r523, 33, %r566;
	mad.lo.s32 	%r197, %r527, 290, %r567;
	add.s32 	%r198, %r197, 132;
	setp.lt.u32 	%p239, %r288, 4;
	setp.eq.s32 	%p240, %r149, 1;
	setp.eq.s32 	%p241, %r149, 4;
	setp.eq.s32 	%p242, %r149, 5;
	shr.u32 	%r568, %r1, 2;
	mul.lo.s32 	%r569, %r65, 784;
	and.b32  	%r570, %r1, 1;
	neg.s32 	%r571, %r570;
	and.b32  	%r572, %r571, 392;
	and.b32  	%r573, %r161, 6;
	bfe.s32 	%r574, %r288, 3, 1;
	and.b32  	%r575, %r574, 1576;
	bfe.s32 	%r576, %r1, 1, 1;
	and.b32  	%r577, %r576, 196;
	mad.lo.s32 	%r578, %r568, 98, %r569;
	add.s32 	%r579, %r578, %r573;
	or.b32  	%r580, %r579, %r63;
	add.s32 	%r581, %r580, %r572;
	add.s32 	%r582, %r581, %r575;
	add.s32 	%r199, %r582, %r577;
	add.s32 	%r200, %r199, 8;
	mul.lo.s32 	%r583, %r281, 24576;
	mad.lo.s32 	%r584, %r285, 192, %r583;
	or.b32  	%r585, %r175, %r181;
	cvt.u16.u32 	%rs41, %r585;
	and.b16  	%rs42, %rs41, 255;
	mul.lo.s16 	%rs43, %rs42, 171;
	shr.u16 	%rs44, %rs43, 9;
	and.b16  	%rs45, %rs44, 24;
	add.s16 	%rs46, %rs41, %rs45;
	shl.b16 	%rs47, %rs46, 3;
	cvt.u32.u16 	%r586, %rs47;
	and.b32  	%r587, %r586, 248;
	and.b32  	%r588, %r288, 7;
	and.b32  	%r589, %r3, 127;
	mul.lo.s32 	%r590, %r589, 192;
	or.b32  	%r591, %r590, %r588;
	add.s32 	%r201, %r591, %r587;
	cvt.s64.s32 	%rd7, %r584;
	add.s32 	%r592, %r197, %r196;
	mul.wide.u32 	%rd39, %r592, 4;
	mov.u64 	%rd40, shmem;
	add.s64 	%rd8, %rd40, %rd39;
	add.s32 	%r593, %r198, %r196;
	mul.wide.u32 	%rd41, %r593, 4;
	add.s64 	%rd9, %rd40, %rd41;
	cvt.u64.u32 	%rd42, %r197;
	cvt.u64.u16 	%rd43, %rs40;
	and.b64  	%rd44, %rd43, 255;
	add.s64 	%rd45, %rd42, %rd44;
	shl.b64 	%rd46, %rd45, 2;
	add.s64 	%rd10, %rd40, %rd46;
	cvt.u64.u32 	%rd47, %r198;
	add.s64 	%rd48, %rd47, %rd44;
	shl.b64 	%rd49, %rd48, 2;
	add.s64 	%rd11, %rd40, %rd49;
	or.pred  	%p243, %p239, %p240;
	and.b32  	%r594, %r288, 24;
	setp.eq.s32 	%p244, %r594, 8;
	or.pred  	%p245, %p243, %p244;
	or.pred  	%p246, %p245, %p241;
	setp.eq.s32 	%p247, %r594, 24;
	or.pred  	%p248, %p242, %p247;
	selp.b32 	%r202, 1145324612, -286331154, %p245;
	or.pred  	%p1, %p246, %p248;
	selp.b32 	%r203, 1145324612, -286331154, %p243;
	add.s32 	%r595, %r149, -1;
	setp.lt.u32 	%p249, %r595, 3;
	or.pred  	%p2, %p239, %p249;
	setp.eq.s32 	%p250, %r594, 16;
	or.pred  	%p3, %p250, %p247;
	selp.b32 	%r204, 1145324612, -286331154, %p250;
	mov.u32 	%r87, 0;
	mov.u16 	%rs2, 0;
	mov.u16 	%rs1, 29;
	selp.b32 	%r254, %r203, %r204, %p2;
	or.pred  	%p281, %p2, %p3;
	mov.u32 	%r107, %r87;
	mov.u32 	%r108, %r87;
	mov.u32 	%r109, %r87;
	bra.uni 	$L__BB0_211;
$L__BB0_182:                            // %L24398
                                        //   in Loop: Header=BB0_211 Depth=1
	add.s32 	%r147, %r87, 48;
	add.s16 	%rs2, %rs2, 48;
	add.s16 	%rs1, %rs1, 48;
	setp.ne.s32 	%p318, %r87, 32688;
	mov.u32 	%r87, %r147;
	@%p318 bra 	$L__BB0_211;
	bra.uni 	$L__BB0_183;
$L__BB0_211:                            // %L1941
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_162 Depth 2
                                        //     Child Loop BB0_172 Depth 2
	add.s32 	%r596, %r87, %r279;
	setp.lt.s32 	%p251, %r596, %r280;
	@%p251 bra 	$L__BB0_212;
	bra.uni 	$L__BB0_183;
$L__BB0_212:                            // %oksrem881
                                        //   in Loop: Header=BB0_211 Depth=1
	setp.eq.s32 	%p252, %r183, 0;
	mul.hi.u32 	%r693, %r87, -1431655765;
	shr.u32 	%r694, %r693, 5;
	mul.lo.s32 	%r205, %r694, 48;
	or.b32  	%r695, %r205, %r175;
	add.s32 	%r696, %r695, %r181;
	shr.s32 	%r697, %r696, 31;
	shr.u32 	%r698, %r697, 17;
	add.s32 	%r699, %r696, %r698;
	and.b32  	%r700, %r699, -32768;
	sub.s32 	%r701, %r696, %r700;
	add.s32 	%r702, %r701, %r279;
	mad.lo.s32 	%r703, %r702, 12288, %r182;
	mul.hi.s32 	%r704, %r703, 715827883;
	shr.u32 	%r705, %r704, 31;
	shr.s32 	%r706, %r704, 26;
	add.s32 	%r707, %r706, %r705;
	setp.lt.s32 	%p253, %r703, 0;
	mul.lo.s32 	%r708, %r707, 402653184;
	setp.ne.s32 	%p254, %r708, %r703;
	and.pred  	%p255, %p253, %p254;
	selp.s32 	%r709, -1, 0, %p255;
	add.s32 	%r710, %r707, %r709;
	mad.lo.s32 	%r711, %r710, -402653184, %r703;
	mul.wide.s32 	%rd50, %r711, 4;
	add.s64 	%rd51, %rd3, %rd50;
	ld.global.v4.u32 	{%r712, %r713, %r714, %r715}, [%rd51];
	add.s32 	%r716, %r205, 24;
	or.b32  	%r717, %r716, %r175;
	add.s32 	%r718, %r717, %r181;
	shr.s32 	%r719, %r718, 31;
	shr.u32 	%r720, %r719, 17;
	add.s32 	%r721, %r718, %r720;
	and.b32  	%r722, %r721, -32768;
	sub.s32 	%r723, %r718, %r722;
	add.s32 	%r724, %r723, %r279;
	mad.lo.s32 	%r725, %r724, 12288, %r182;
	mul.hi.s32 	%r726, %r725, 715827883;
	shr.u32 	%r727, %r726, 31;
	shr.s32 	%r728, %r726, 26;
	add.s32 	%r729, %r728, %r727;
	setp.lt.s32 	%p256, %r725, 0;
	mul.lo.s32 	%r730, %r729, 402653184;
	setp.ne.s32 	%p257, %r730, %r725;
	and.pred  	%p258, %p256, %p257;
	selp.s32 	%r731, -1, 0, %p258;
	add.s32 	%r732, %r729, %r731;
	mad.lo.s32 	%r733, %r732, -402653184, %r725;
	mul.wide.s32 	%rd52, %r733, 4;
	add.s64 	%rd53, %rd3, %rd52;
	ld.global.v4.u32 	{%r734, %r735, %r736, %r737}, [%rd53];
	selp.b32 	%r738, %r714, %r712, %p252;
	shfl.sync.bfly.b32	%r739, %r738, 4, 31, -1;
	selp.b32 	%r599, %r712, %r739, %p252;
	selp.b32 	%r604, %r739, %r714, %p252;
	selp.b32 	%r740, %r715, %r713, %p252;
	shfl.sync.bfly.b32	%r741, %r740, 4, 31, -1;
	selp.b32 	%r607, %r713, %r741, %p252;
	selp.b32 	%r612, %r741, %r715, %p252;
	selp.b32 	%r742, %r736, %r734, %p252;
	shfl.sync.bfly.b32	%r743, %r742, 4, 31, -1;
	selp.b32 	%r615, %r734, %r743, %p252;
	selp.b32 	%r620, %r743, %r736, %p252;
	selp.b32 	%r744, %r737, %r735, %p252;
	shfl.sync.bfly.b32	%r745, %r744, 4, 31, -1;
	selp.b32 	%r623, %r735, %r745, %p252;
	selp.b32 	%r628, %r745, %r737, %p252;
	shl.b32 	%r600, %r604, 4;
	mov.u32 	%r598, 252645135;
	// begin inline asm
	lop3.b32 %r630, %r598, %r599, %r600, 202;
	// end inline asm
	shr.u32 	%r603, %r599, 4;
	// begin inline asm
	lop3.b32 %r646, %r598, %r603, %r604, 202;
	// end inline asm
	shl.b32 	%r608, %r612, 4;
	// begin inline asm
	lop3.b32 %r638, %r598, %r607, %r608, 202;
	// end inline asm
	shr.u32 	%r611, %r607, 4;
	// begin inline asm
	lop3.b32 %r654, %r598, %r611, %r612, 202;
	// end inline asm
	shl.b32 	%r616, %r620, 4;
	// begin inline asm
	lop3.b32 %r631, %r598, %r615, %r616, 202;
	// end inline asm
	shr.u32 	%r619, %r615, 4;
	// begin inline asm
	lop3.b32 %r647, %r598, %r619, %r620, 202;
	// end inline asm
	shl.b32 	%r624, %r628, 4;
	// begin inline asm
	lop3.b32 %r639, %r598, %r623, %r624, 202;
	// end inline asm
	shr.u32 	%r627, %r623, 4;
	// begin inline asm
	lop3.b32 %r655, %r598, %r627, %r628, 202;
	// end inline asm
	mov.u32 	%r632, 25152;
	// begin inline asm
	prmt.b32 %r662, %r630, %r631, %r632;
	// end inline asm
	mov.u32 	%r636, 29521;
	// begin inline asm
	prmt.b32 %r678, %r630, %r631, %r636;
	// end inline asm
	// begin inline asm
	prmt.b32 %r670, %r638, %r639, %r632;
	// end inline asm
	// begin inline asm
	prmt.b32 %r686, %r638, %r639, %r636;
	// end inline asm
	// begin inline asm
	prmt.b32 %r663, %r646, %r647, %r632;
	// end inline asm
	// begin inline asm
	prmt.b32 %r679, %r646, %r647, %r636;
	// end inline asm
	// begin inline asm
	prmt.b32 %r671, %r654, %r655, %r632;
	// end inline asm
	// begin inline asm
	prmt.b32 %r687, %r654, %r655, %r636;
	// end inline asm
	mov.u32 	%r664, 21520;
	// begin inline asm
	prmt.b32 %r661, %r662, %r663, %r664;
	// end inline asm
	mov.u32 	%r668, 30258;
	// begin inline asm
	prmt.b32 %r665, %r662, %r663, %r668;
	// end inline asm
	// begin inline asm
	prmt.b32 %r669, %r670, %r671, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r673, %r670, %r671, %r668;
	// end inline asm
	// begin inline asm
	prmt.b32 %r677, %r678, %r679, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r681, %r678, %r679, %r668;
	// end inline asm
	// begin inline asm
	prmt.b32 %r685, %r686, %r687, %r664;
	// end inline asm
	// begin inline asm
	prmt.b32 %r689, %r686, %r687, %r668;
	// end inline asm
	mul.hi.s32 	%r746, %r696, 715827883;
	shr.u32 	%r747, %r746, 31;
	shr.s32 	%r748, %r746, 2;
	add.s32 	%r749, %r748, %r747;
	mul.lo.s32 	%r750, %r749, 24;
	sub.s32 	%r751, %r696, %r750;
	add.s32 	%r752, %r751, %r184;
	mul.wide.s32 	%rd54, %r752, 4;
	add.s64 	%rd56, %rd40, %rd54;
	st.shared.u32 	[%rd56], %r661;
	add.s32 	%r753, %r752, 128;
	mul.wide.u32 	%rd57, %r753, 4;
	add.s64 	%rd58, %rd40, %rd57;
	st.shared.u32 	[%rd58], %r669;
	add.s32 	%r754, %r752, 64;
	mul.wide.u32 	%rd59, %r754, 4;
	add.s64 	%rd60, %rd40, %rd59;
	st.shared.u32 	[%rd60], %r665;
	add.s32 	%r755, %r752, 192;
	mul.wide.u32 	%rd61, %r755, 4;
	add.s64 	%rd62, %rd40, %rd61;
	st.shared.u32 	[%rd62], %r673;
	add.s32 	%r756, %r752, 32;
	mul.wide.u32 	%rd63, %r756, 4;
	add.s64 	%rd64, %rd40, %rd63;
	st.shared.u32 	[%rd64], %r677;
	add.s32 	%r757, %r752, 160;
	mul.wide.u32 	%rd65, %r757, 4;
	add.s64 	%rd66, %rd40, %rd65;
	st.shared.u32 	[%rd66], %r685;
	add.s32 	%r758, %r752, 96;
	mul.wide.u32 	%rd67, %r758, 4;
	add.s64 	%rd68, %rd40, %rd67;
	st.shared.u32 	[%rd68], %r681;
	add.s32 	%r759, %r752, 224;
	mul.wide.u32 	%rd69, %r759, 4;
	add.s64 	%rd70, %rd40, %rd69;
	st.shared.u32 	[%rd70], %r689;
	bar.sync 	0;
	add.s32 	%r760, %r205, %r185;
	cvt.u16.u32 	%rs48, %r760;
	mul.hi.s16 	%rs49, %rs48, 10923;
	shr.u16 	%rs50, %rs49, 15;
	shr.s16 	%rs51, %rs49, 2;
	add.s16 	%rs52, %rs51, %rs50;
	mul.lo.s16 	%rs53, %rs52, 24;
	sub.s16 	%rs54, %rs48, %rs53;
	cvt.s32.s16 	%r206, %rs54;
	add.s32 	%r761, %r2, %r206;
	mul.wide.s32 	%rd71, %r761, 4;
	add.s64 	%rd72, %rd40, %rd71;
	ld.shared.u32 	%r207, [%rd72];
	add.s32 	%r762, %r186, %r206;
	mul.wide.s32 	%rd73, %r762, 4;
	add.s64 	%rd74, %rd40, %rd73;
	ld.shared.u32 	%r208, [%rd74];
	add.s32 	%r763, %r187, %r206;
	mul.wide.u32 	%rd75, %r763, 4;
	add.s64 	%rd76, %rd40, %rd75;
	ld.shared.u32 	%r209, [%rd76];
	add.s32 	%r764, %r188, %r206;
	mul.wide.u32 	%rd77, %r764, 4;
	add.s64 	%rd78, %rd40, %rd77;
	ld.shared.u32 	%r210, [%rd78];
	add.s32 	%r765, %r189, %r206;
	mul.wide.u32 	%rd79, %r765, 4;
	add.s64 	%rd80, %rd40, %rd79;
	ld.shared.u32 	%r211, [%rd80];
	add.s32 	%r766, %r190, %r206;
	mul.wide.u32 	%rd81, %r766, 4;
	add.s64 	%rd82, %rd40, %rd81;
	ld.shared.u32 	%r212, [%rd82];
	add.s32 	%r767, %r191, %r206;
	mul.wide.u32 	%rd83, %r767, 4;
	add.s64 	%rd84, %rd40, %rd83;
	ld.shared.u32 	%r213, [%rd84];
	add.s32 	%r768, %r192, %r206;
	mul.wide.u32 	%rd85, %r768, 4;
	add.s64 	%rd86, %rd40, %rd85;
	ld.shared.u32 	%r214, [%rd86];
	add.s32 	%r769, %r193, %r206;
	mul.wide.u32 	%rd87, %r769, 4;
	add.s64 	%rd88, %rd40, %rd87;
	ld.shared.u32 	%r215, [%rd88];
	add.s32 	%r770, %r194, %r206;
	mul.wide.u32 	%rd89, %r770, 4;
	add.s64 	%rd90, %rd40, %rd89;
	ld.shared.u32 	%r216, [%rd90];
	add.s32 	%r771, %r195, %r206;
	mul.wide.s32 	%rd91, %r771, 4;
	add.s64 	%rd92, %rd40, %rd91;
	ld.shared.u32 	%r217, [%rd92];
	bar.sync 	0;
	shfl.sync.idx.b32	%r218, %r174, 0, 31, -1;
	shfl.sync.idx.b32	%r219, %r174, 1, 31, -1;
	shfl.sync.idx.b32	%r220, %r174, 2, 31, -1;
	shfl.sync.idx.b32	%r221, %r174, 3, 31, -1;
	shfl.sync.idx.b32	%r222, %r174, 4, 31, -1;
	shfl.sync.idx.b32	%r223, %r174, 5, 31, -1;
	shfl.sync.idx.b32	%r224, %r174, 6, 31, -1;
	shfl.sync.idx.b32	%r225, %r174, 7, 31, -1;
	shfl.sync.idx.b32	%r226, %r174, 8, 31, -1;
	shfl.sync.idx.b32	%r227, %r174, 9, 31, -1;
	shfl.sync.idx.b32	%r228, %r174, 10, 31, -1;
	shfl.sync.idx.b32	%r229, %r174, 11, 31, -1;
	shfl.sync.idx.b32	%r230, %r174, 12, 31, -1;
	shfl.sync.idx.b32	%r231, %r174, 13, 31, -1;
	shfl.sync.idx.b32	%r232, %r174, 14, 31, -1;
	shfl.sync.idx.b32	%r233, %r174, 15, 31, -1;
	setp.eq.s32 	%p259, %r218, 999999999;
	@%p259 bra 	$L__BB0_145;
// %bb.213:                             // %oksrem2271
                                        //   in Loop: Header=BB0_211 Depth=1
	add.s32 	%r772, %r218, %r206;
	mul.wide.s32 	%rd93, %r772, 4;
	add.s64 	%rd95, %rd40, %rd93;
	st.shared.u32 	[%rd95], %r207;
	setp.eq.s32 	%p260, %r219, 999999999;
	@%p260 bra 	$L__BB0_146;
// %bb.214:                             // %oksrem2337
                                        //   in Loop: Header=BB0_211 Depth=1
	add.s32 	%r773, %r219, %r206;
	mul.wide.s32 	%rd96, %r773, 4;
	add.s64 	%rd98, %rd40, %rd96;
	st.shared.u32 	[%rd98], %r208;
	setp.eq.s32 	%p261, %r220, 999999999;
	@%p261 bra 	$L__BB0_147;
// %bb.215:                             // %oksrem2403
                                        //   in Loop: Header=BB0_211 Depth=1
	add.s32 	%r774, %r220, %r206;
	mul.wide.s32 	%rd99, %r774, 4;
	add.s64 	%rd101, %rd40, %rd99;
	st.shared.u32 	[%rd101], %r209;
	setp.eq.s32 	%p262, %r221, 999999999;
	@%p262 bra 	$L__BB0_148;
// %bb.216:                             // %oksrem2469
                                        //   in Loop: Header=BB0_211 Depth=1
	add.s32 	%r775, %r221, %r206;
	mul.wide.s32 	%rd102, %r775, 4;
	add.s64 	%rd104, %rd40, %rd102;
	st.shared.u32 	[%rd104], %r210;
	setp.eq.s32 	%p263, %r222, 999999999;
	@%p263 bra 	$L__BB0_149;
// %bb.217:                             // %oksrem2535
                                        //   in Loop: Header=BB0_211 Depth=1
	add.s32 	%r776, %r222, %r206;
	mul.wide.s32 	%rd105, %r776, 4;
	add.s64 	%rd107, %rd40, %rd105;
	st.shared.u32 	[%rd107], %r211;
	setp.eq.s32 	%p264, %r223, 999999999;
	@%p264 bra 	$L__BB0_150;
// %bb.218:                             // %oksrem2601
                                        //   in Loop: Header=BB0_211 Depth=1
	add.s32 	%r777, %r223, %r206;
	mul.wide.s32 	%rd108, %r777, 4;
	add.s64 	%rd110, %rd40, %rd108;
	st.shared.u32 	[%rd110], %r212;
	setp.eq.s32 	%p265, %r224, 999999999;
	@%p265 bra 	$L__BB0_151;
// %bb.219:                             // %oksrem2667
                                        //   in Loop: Header=BB0_211 Depth=1
	add.s32 	%r778, %r224, %r206;
	mul.wide.s32 	%rd111, %r778, 4;
	add.s64 	%rd113, %rd40, %rd111;
	st.shared.u32 	[%rd113], %r213;
	setp.eq.s32 	%p266, %r225, 999999999;
	@%p266 bra 	$L__BB0_152;
// %bb.220:                             // %oksrem2733
                                        //   in Loop: Header=BB0_211 Depth=1
	add.s32 	%r779, %r225, %r206;
	mul.wide.s32 	%rd114, %r779, 4;
	add.s64 	%rd116, %rd40, %rd114;
	st.shared.u32 	[%rd116], %r214;
	setp.eq.s32 	%p267, %r226, 999999999;
	@%p267 bra 	$L__BB0_153;
// %bb.221:                             // %oksrem2799
                                        //   in Loop: Header=BB0_211 Depth=1
	add.s32 	%r780, %r226, %r206;
	mul.wide.s32 	%rd117, %r780, 4;
	add.s64 	%rd119, %rd40, %rd117;
	st.shared.u32 	[%rd119], %r215;
	setp.eq.s32 	%p268, %r227, 999999999;
	@%p268 bra 	$L__BB0_154;
// %bb.222:                             // %oksrem2865
                                        //   in Loop: Header=BB0_211 Depth=1
	add.s32 	%r781, %r227, %r206;
	mul.wide.s32 	%rd120, %r781, 4;
	add.s64 	%rd122, %rd40, %rd120;
	st.shared.u32 	[%rd122], %r216;
	setp.eq.s32 	%p269, %r228, 999999999;
	@%p269 bra 	$L__BB0_155;
// %bb.223:                             // %oksrem2932
                                        //   in Loop: Header=BB0_211 Depth=1
	setp.gt.u32 	%p270, %r1, 3;
	selp.b32 	%r782, 0, %r217, %p270;
	add.s32 	%r783, %r228, %r206;
	mul.wide.s32 	%rd123, %r783, 4;
	add.s64 	%rd125, %rd40, %rd123;
	st.shared.u32 	[%rd125], %r782;
	setp.eq.s32 	%p271, %r229, 999999999;
	@%p271 bra 	$L__BB0_156;
// %bb.224:                             // %oksrem2998
                                        //   in Loop: Header=BB0_211 Depth=1
	add.s32 	%r784, %r229, %r206;
	mul.wide.s32 	%rd126, %r784, 4;
	add.s64 	%rd128, %rd40, %rd126;
	mov.u32 	%r785, 0;
	st.shared.u32 	[%rd128], %r785;
	setp.eq.s32 	%p272, %r230, 999999999;
	@%p272 bra 	$L__BB0_157;
// %bb.225:                             // %oksrem3063
                                        //   in Loop: Header=BB0_211 Depth=1
	add.s32 	%r786, %r230, %r206;
	mul.wide.s32 	%rd129, %r786, 4;
	add.s64 	%rd131, %rd40, %rd129;
	st.shared.u32 	[%rd131], %r785;
	setp.eq.s32 	%p273, %r231, 999999999;
	@%p273 bra 	$L__BB0_158;
// %bb.226:                             // %oksrem3128
                                        //   in Loop: Header=BB0_211 Depth=1
	add.s32 	%r788, %r231, %r206;
	mul.wide.s32 	%rd132, %r788, 4;
	add.s64 	%rd134, %rd40, %rd132;
	st.shared.u32 	[%rd134], %r785;
	setp.eq.s32 	%p274, %r232, 999999999;
	@%p274 bra 	$L__BB0_159;
// %bb.227:                             // %oksrem3193
                                        //   in Loop: Header=BB0_211 Depth=1
	add.s32 	%r790, %r232, %r206;
	mul.wide.s32 	%rd135, %r790, 4;
	add.s64 	%rd137, %rd40, %rd135;
	st.shared.u32 	[%rd137], %r785;
	setp.eq.s32 	%p275, %r233, 999999999;
	@%p275 bra 	$L__BB0_160;
// %bb.228:                             // %oksrem3258
                                        //   in Loop: Header=BB0_211 Depth=1
	setp.eq.s32 	%p276, %r176, 3;
	add.s32 	%r793, %r233, %r206;
	mul.wide.s32 	%rd138, %r793, 4;
	add.s64 	%rd140, %rd40, %rd138;
	st.shared.u32 	[%rd140], %r785;
	bar.sync 	0;
	mov.u32 	%r91, %r785;
	mov.u32 	%r92, %r785;
	mov.u32 	%r93, %r785;
	mov.u32 	%r94, %r785;
	mov.u32 	%r95, %r785;
	mov.u32 	%r96, %r785;
	mov.u32 	%r97, %r785;
	mov.u32 	%r98, %r785;
	mov.u32 	%r99, %r785;
	mov.u32 	%r100, %r785;
	mov.u32 	%r101, %r785;
	mov.u32 	%r102, %r785;
	mov.u32 	%r103, %r785;
	mov.u32 	%r104, %r785;
	mov.u32 	%r105, %r785;
	mov.u32 	%r106, %r785;
	@%p276 bra 	$L__BB0_161;
// %bb.229:                             // %oksrem3315
                                        //   in Loop: Header=BB0_211 Depth=1
	add.s32 	%r794, %r205, %r196;
	ld.shared.u32 	%r91, [%rd8];
	ld.shared.u32 	%r92, [%rd9];
	ld.shared.u32 	%r93, [%rd10+12];
	ld.shared.u32 	%r94, [%rd11+12];
	ld.shared.u32 	%r95, [%rd10+24];
	ld.shared.u32 	%r96, [%rd11+24];
	ld.shared.u32 	%r97, [%rd10+36];
	ld.shared.u32 	%r98, [%rd11+36];
	add.s32 	%r795, %r794, 12;
	mul.hi.u32 	%r796, %r795, -1431655765;
	shr.u32 	%r797, %r796, 4;
	mul.lo.s32 	%r798, %r797, 24;
	sub.s32 	%r799, %r795, %r798;
	add.s32 	%r800, %r197, %r799;
	mul.wide.u32 	%rd141, %r800, 4;
	add.s64 	%rd143, %rd40, %rd141;
	ld.shared.u32 	%r99, [%rd143];
	add.s32 	%r801, %r198, %r799;
	mul.wide.u32 	%rd144, %r801, 4;
	add.s64 	%rd145, %rd40, %rd144;
	ld.shared.u32 	%r100, [%rd145];
	ld.shared.u32 	%r101, [%rd10+60];
	ld.shared.u32 	%r102, [%rd11+60];
	ld.shared.u32 	%r103, [%rd10+72];
	ld.shared.u32 	%r104, [%rd11+72];
	ld.shared.u32 	%r105, [%rd10+84];
	ld.shared.u32 	%r106, [%rd11+84];
$L__BB0_161:                            // %L10679
                                        //   in Loop: Header=BB0_211 Depth=1
	bar.sync 	0;
	mov.u16 	%rs3, %rs2;
	mov.u32 	%r110, %r785;
	bra.uni 	$L__BB0_162;
$L__BB0_169:                            // %L17528
                                        //   in Loop: Header=BB0_162 Depth=2
	add.s32 	%r108, %r108, 1;
	mov.u32 	%r107, 0;
	mov.u32 	%r109, %r107;
$L__BB0_170:                            // %L17529
                                        //   in Loop: Header=BB0_162 Depth=2
	bar.sync 	0;
	add.s32 	%r110, %r110, 6;
	add.s16 	%rs3, %rs3, 6;
	setp.ne.s32 	%p297, %r110, 24;
	@%p297 bra 	$L__BB0_162;
	bra.uni 	$L__BB0_171;
$L__BB0_162:                            // %L10697
                                        //   Parent Loop BB0_211 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p277, %r110, 0;
	selp.b32 	%r1195, %r91, 0, %p277;
	setp.eq.s32 	%p278, %r110, 6;
	selp.b32 	%r1196, %r95, %r1195, %p278;
	setp.eq.s32 	%p279, %r110, 12;
	selp.b32 	%r1197, %r99, %r1196, %p279;
	setp.eq.s32 	%p280, %r110, 18;
	selp.b32 	%r1198, %r103, %r1197, %p280;
	selp.b32 	%r1199, %r92, 0, %p277;
	selp.b32 	%r1200, %r96, %r1199, %p278;
	selp.b32 	%r1201, %r100, %r1200, %p279;
	selp.b32 	%r1202, %r104, %r1201, %p280;
	selp.b32 	%r1203, %r93, 0, %p277;
	selp.b32 	%r1204, %r97, %r1203, %p278;
	selp.b32 	%r1205, %r101, %r1204, %p279;
	selp.b32 	%r1206, %r105, %r1205, %p280;
	selp.b32 	%r1207, %r94, 0, %p277;
	selp.b32 	%r1208, %r98, %r1207, %p278;
	selp.b32 	%r1209, %r102, %r1208, %p279;
	selp.b32 	%r1210, %r106, %r1209, %p280;
	mov.u16 	%rs92, 25600;
	// begin inline asm
	mov.b32 %r808, {%rs92, %rs92};
	// end inline asm
	mov.u16 	%rs94, 21504;
	// begin inline asm
	mov.b32 %r819, {%rs94, %rs94};
	// end inline asm
	xor.b32  	%r807, %r1198, -2004318072;
	mov.u32 	%r944, 983055;
	// begin inline asm
	lop3.b32 %r805, %r944, %r807, %r808, 202;
	// end inline asm
	mov.u16 	%rs98, 18432;
	// begin inline asm
	mov.b32 %r809, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r810, %r808, %r809;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r813, %r805, %r810;
	// end inline asm
	mov.u32 	%r955, 15728880;
	// begin inline asm
	lop3.b32 %r816, %r955, %r807, %r819, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r820, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r821, %r819, %r820;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r824, %r816, %r821;
	// end inline asm
	// begin inline asm
	mov.b32 %r854, {%rs92, %rs92};
	// end inline asm
	// begin inline asm
	mov.b32 %r865, {%rs94, %rs94};
	// end inline asm
	xor.b32  	%r853, %r1202, -2004318072;
	// begin inline asm
	lop3.b32 %r851, %r944, %r853, %r854, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r855, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r856, %r854, %r855;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r859, %r851, %r856;
	// end inline asm
	// begin inline asm
	lop3.b32 %r862, %r955, %r853, %r865, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r866, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r867, %r865, %r866;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r870, %r862, %r867;
	// end inline asm
	// begin inline asm
	mov.b32 %r900, {%rs92, %rs92};
	// end inline asm
	// begin inline asm
	mov.b32 %r911, {%rs94, %rs94};
	// end inline asm
	xor.b32  	%r899, %r1206, -2004318072;
	// begin inline asm
	lop3.b32 %r897, %r944, %r899, %r900, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r901, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r902, %r900, %r901;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r905, %r897, %r902;
	// end inline asm
	// begin inline asm
	lop3.b32 %r908, %r955, %r899, %r911, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r912, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r913, %r911, %r912;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r916, %r908, %r913;
	// end inline asm
	// begin inline asm
	mov.b32 %r946, {%rs92, %rs92};
	// end inline asm
	// begin inline asm
	mov.b32 %r957, {%rs94, %rs94};
	// end inline asm
	xor.b32  	%r945, %r1210, -2004318072;
	// begin inline asm
	lop3.b32 %r943, %r944, %r945, %r946, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r947, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r948, %r946, %r947;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r951, %r943, %r948;
	// end inline asm
	// begin inline asm
	lop3.b32 %r954, %r955, %r945, %r957, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r958, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r959, %r957, %r958;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r962, %r954, %r959;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r177;
    mov.b32 {%r2re, %r2im}, %r813;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r987, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r178;
    mov.b32 {%r2re, %r2im}, %r859;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r990, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r179;
    mov.b32 {%r2re, %r2im}, %r824;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r993, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r180;
    mov.b32 {%r2re, %r2im}, %r870;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r996, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r177;
    mov.b32 {%r2re, %r2im}, %r905;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r999, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r178;
    mov.b32 {%r2re, %r2im}, %r951;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1002, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r179;
    mov.b32 {%r2re, %r2im}, %r916;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1005, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r180;
    mov.b32 {%r2re, %r2im}, %r962;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1008, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1011, %r1012}, {%r310, %r313}, {%r987}, {%r785, %r785};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1018, %r1019}, {%r310, %r313}, {%r990}, {%r785, %r785};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1025, %r1026}, {%r310, %r313}, {%r993}, {%r785, %r785};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1032, %r1033}, {%r310, %r313}, {%r996}, {%r785, %r785};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1039, %r1040}, {%r310, %r313}, {%r999}, {%r785, %r785};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1046, %r1047}, {%r310, %r313}, {%r1002}, {%r785, %r785};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1053, %r1054}, {%r310, %r313}, {%r1005}, {%r785, %r785};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1060, %r1061}, {%r310, %r313}, {%r1008}, {%r785, %r785};
	// end inline asm
	@%p1 bra 	$L__BB0_230;
	bra.uni 	$L__BB0_163;
$L__BB0_230:                            // %pass4659
                                        //   in Loop: Header=BB0_162 Depth=2
	// begin inline asm
	neg.f16x2 %r1067, %r365;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1069, %r1067, %r1012;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1072, %r362, %r1011, %r1069;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1076, %r365;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1078, %r1076, %r1019;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1081, %r362, %r1018, %r1078;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1085, %r365;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1087, %r1085, %r1026;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1090, %r362, %r1025, %r1087;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1094, %r365;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1096, %r1094, %r1033;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1099, %r362, %r1032, %r1096;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1103, %r365;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1105, %r1103, %r1040;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1108, %r362, %r1039, %r1105;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1112, %r365;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1114, %r1112, %r1047;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1117, %r362, %r1046, %r1114;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1121, %r365;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1123, %r1121, %r1054;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1126, %r362, %r1053, %r1123;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1130, %r365;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1132, %r1130, %r1061;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1135, %r362, %r1060, %r1132;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1139, %r365, %r1011;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1142, %r362, %r1012, %r1139;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1146, %r365, %r1018;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1149, %r362, %r1019, %r1146;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1153, %r365, %r1025;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1156, %r362, %r1026, %r1153;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1160, %r365, %r1032;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1163, %r362, %r1033, %r1160;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1167, %r365, %r1039;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1170, %r362, %r1040, %r1167;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1174, %r365, %r1046;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1177, %r362, %r1047, %r1174;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1181, %r365, %r1053;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1184, %r362, %r1054, %r1181;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1188, %r365, %r1060;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1191, %r362, %r1061, %r1188;
	// end inline asm
	mov.u32 	%r1360, 0;
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1211, %r1212}, {%r406, %r409}, {%r1072, %r1142}, {%r1360, %r1360}, %r202, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1220, %r1221}, {%r406, %r409}, {%r1081, %r1149}, {%r1360, %r1360}, %r202, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1229, %r1230}, {%r406, %r409}, {%r1090, %r1156}, {%r1360, %r1360}, %r202, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1238, %r1239}, {%r406, %r409}, {%r1099, %r1163}, {%r1360, %r1360}, %r202, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1247, %r1248}, {%r406, %r409}, {%r1108, %r1170}, {%r1360, %r1360}, %r202, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1256, %r1257}, {%r406, %r409}, {%r1117, %r1177}, {%r1360, %r1360}, %r202, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1265, %r1266}, {%r406, %r409}, {%r1126, %r1184}, {%r1360, %r1360}, %r202, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1274, %r1275}, {%r406, %r409}, {%r1135, %r1191}, {%r1360, %r1360}, %r202, 0;
	// end inline asm
	bar.sync 	0;
	mul.hi.s16 	%rs103, %rs3, 10923;
	shr.u16 	%rs104, %rs103, 15;
	add.s16 	%rs105, %rs103, %rs104;
	mul.lo.s16 	%rs106, %rs105, 6;
	sub.s16 	%rs107, %rs3, %rs106;
	mul.wide.s16 	%r1393, %rs107, 16;
	add.s32 	%r1394, %r199, %r1393;
	mul.wide.s32 	%rd148, %r1394, 4;
	add.s64 	%rd150, %rd40, %rd148;
	ld.shared.u32 	%r1351, [%rd150];
	add.s32 	%r1395, %r200, %r1393;
	mul.wide.s32 	%rd151, %r1395, 4;
	add.s64 	%rd152, %rd40, %rd151;
	ld.shared.u32 	%r1358, [%rd152];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1347, %r1348}, {%r418, %r421}, {%r1351}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1354, %r1355}, {%r418, %r421}, {%r1358}, {%r1360, %r1360};
	// end inline asm
	@%p281 bra 	$L__BB0_233;
	bra.uni 	$L__BB0_231;
$L__BB0_233:                            // %pass5153
                                        //   in Loop: Header=BB0_162 Depth=2
	// begin inline asm
	neg.f16x2 %r1361, %r459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1363, %r1361, %r1348;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1366, %r456, %r1347, %r1363;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1370, %r459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1372, %r1370, %r1355;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1375, %r456, %r1354, %r1372;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1379, %r459, %r1347;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1382, %r456, %r1348, %r1379;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1386, %r459, %r1354;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1389, %r456, %r1355, %r1386;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1415, %r1418}, {%r502, %r505}, {%r1366, %r1382}, {%r1360, %r1360}, %r254, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1422, %r1426}, {%r502, %r505}, {%r1375, %r1389}, {%r1360, %r1360}, %r254, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1414, %r1415, %r1415;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1417, %r1418, %r1418, %r1414;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1421, %r1422, %r1422, %r1417;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1425, %r1426, %r1426, %r1421;
	// end inline asm
	mov.u32 	%r1513, 268439552;
	// begin inline asm
	fma.rn.f16x2 %r1429, %r1513, %r1425, %r109;
	// end inline asm
	add.s32 	%r255, %r87, %r110;
	add.s32 	%r1516, %r255, 1;
	mul.hi.u32 	%r1517, %r1516, -1431655765;
	shr.u32 	%r1518, %r1517, 2;
	mul.lo.s32 	%r1519, %r1518, 6;
	sub.s32 	%r1520, %r1516, %r1519;
	shl.b32 	%r1521, %r1520, 4;
	add.s32 	%r1522, %r199, %r1521;
	mul.wide.u32 	%rd155, %r1522, 4;
	add.s64 	%rd157, %rd40, %rd155;
	ld.shared.u32 	%r1437, [%rd157];
	add.s32 	%r1523, %r200, %r1521;
	mul.wide.u32 	%rd158, %r1523, 4;
	add.s64 	%rd159, %rd40, %rd158;
	ld.shared.u32 	%r1444, [%rd159];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1454, %r1451}, {%r418, %r421}, {%r1437}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1463, %r1460}, {%r418, %r421}, {%r1444}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1447, %r459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1449, %r1447, %r1451;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1452, %r456, %r1454, %r1449;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1456, %r459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1458, %r1456, %r1460;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1461, %r456, %r1463, %r1458;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1465, %r459, %r1454;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1468, %r456, %r1451, %r1465;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1472, %r459, %r1463;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1475, %r456, %r1460, %r1472;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1498, %r1501}, {%r502, %r505}, {%r1452, %r1468}, {%r1360, %r1360}, %r254, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1505, %r1509}, {%r502, %r505}, {%r1461, %r1475}, {%r1360, %r1360}, %r254, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1497, %r1498, %r1498;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1500, %r1501, %r1501, %r1497;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1504, %r1505, %r1505, %r1500;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1508, %r1509, %r1509, %r1504;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3041, %r1513, %r1508, %r1429;
	// end inline asm
	add.s32 	%r3039, %r107, 2;
	setp.eq.s32 	%p282, %r3039, 256;
	@%p282 bra 	$L__BB0_164;
	bra.uni 	$L__BB0_234;
$L__BB0_164:                            // %L13377
                                        //   in Loop: Header=BB0_162 Depth=2
	setp.lt.u32 	%p283, %r288, 8;
	@%p283 bra 	$L__BB0_232;
	bra.uni 	$L__BB0_165;
$L__BB0_232:                            // %pass5594
                                        //   in Loop: Header=BB0_162 Depth=2
	mad.lo.s32 	%r1524, %r108, 24576, %r201;
	cvt.u64.u32 	%rd160, %r1524;
	add.s64 	%rd161, %rd160, %rd7;
	mul.hi.s64 	%rd162, %rd161, 3074457345618258603;
	shr.u64 	%rd163, %rd162, 63;
	shr.s64 	%rd164, %rd162, 22;
	add.s64 	%rd165, %rd164, %rd163;
	setp.lt.s64 	%p284, %rd161, 0;
	mul.lo.s64 	%rd166, %rd165, 25165824;
	setp.ne.s64 	%p285, %rd166, %rd161;
	and.pred  	%p286, %p284, %p285;
	selp.s64 	%rd167, -1, 0, %p286;
	add.s64 	%rd168, %rd165, %rd167;
	mul.lo.s64 	%rd169, %rd168, -25165824;
	add.s64 	%rd170, %rd169, %rd161;
	shl.b64 	%rd171, %rd170, 2;
	add.s64 	%rd172, %rd4, %rd171;
	st.global.u32 	[%rd172], %r3041;
$L__BB0_165:                            // %L13594
                                        //   in Loop: Header=BB0_162 Depth=2
	add.s32 	%r108, %r108, 1;
	mov.u32 	%r3039, 0;
	mov.u32 	%r3041, %r3039;
$L__BB0_234:                            // %oksrem5738
                                        //   in Loop: Header=BB0_162 Depth=2
	add.s32 	%r1692, %r255, 2;
	mul.hi.u32 	%r1693, %r1692, -1431655765;
	shr.u32 	%r1694, %r1693, 2;
	mul.lo.s32 	%r1695, %r1694, 6;
	sub.s32 	%r1696, %r1692, %r1695;
	shl.b32 	%r1697, %r1696, 4;
	add.s32 	%r1698, %r199, %r1697;
	mul.wide.u32 	%rd173, %r1698, 4;
	add.s64 	%rd175, %rd40, %rd173;
	ld.shared.u32 	%r1530, [%rd175];
	add.s32 	%r1699, %r200, %r1697;
	mul.wide.u32 	%rd176, %r1699, 4;
	add.s64 	%rd177, %rd40, %rd176;
	ld.shared.u32 	%r1537, [%rd177];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1547, %r1544}, {%r418, %r421}, {%r1530}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1556, %r1553}, {%r418, %r421}, {%r1537}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1540, %r459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1542, %r1540, %r1544;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1545, %r456, %r1547, %r1542;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1549, %r459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1551, %r1549, %r1553;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1554, %r456, %r1556, %r1551;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1558, %r459, %r1547;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1561, %r456, %r1544, %r1558;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1565, %r459, %r1556;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1568, %r456, %r1553, %r1565;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1591, %r1594}, {%r502, %r505}, {%r1545, %r1561}, {%r1360, %r1360}, %r254, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1598, %r1602}, {%r502, %r505}, {%r1554, %r1568}, {%r1360, %r1360}, %r254, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1590, %r1591, %r1591;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1593, %r1594, %r1594, %r1590;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1597, %r1598, %r1598, %r1593;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1601, %r1602, %r1602, %r1597;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1605, %r1513, %r1601, %r3041;
	// end inline asm
	add.s32 	%r1700, %r255, 3;
	mul.hi.u32 	%r1701, %r1700, -1431655765;
	shr.u32 	%r1702, %r1701, 2;
	mul.lo.s32 	%r1703, %r1702, 6;
	sub.s32 	%r1704, %r1700, %r1703;
	shl.b32 	%r1705, %r1704, 4;
	add.s32 	%r1706, %r199, %r1705;
	mul.wide.u32 	%rd178, %r1706, 4;
	add.s64 	%rd179, %rd40, %rd178;
	ld.shared.u32 	%r1613, [%rd179];
	add.s32 	%r1707, %r200, %r1705;
	mul.wide.u32 	%rd180, %r1707, 4;
	add.s64 	%rd181, %rd40, %rd180;
	ld.shared.u32 	%r1620, [%rd181];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1630, %r1627}, {%r418, %r421}, {%r1613}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1639, %r1636}, {%r418, %r421}, {%r1620}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1623, %r459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1625, %r1623, %r1627;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1628, %r456, %r1630, %r1625;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1632, %r459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1634, %r1632, %r1636;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1637, %r456, %r1639, %r1634;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1641, %r459, %r1630;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1644, %r456, %r1627, %r1641;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1648, %r459, %r1639;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1651, %r456, %r1636, %r1648;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1674, %r1677}, {%r502, %r505}, {%r1628, %r1644}, {%r1360, %r1360}, %r254, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1681, %r1685}, {%r502, %r505}, {%r1637, %r1651}, {%r1360, %r1360}, %r254, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1673, %r1674, %r1674;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1676, %r1677, %r1677, %r1673;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1680, %r1681, %r1681, %r1676;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1684, %r1685, %r1685, %r1680;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3044, %r1513, %r1684, %r1605;
	// end inline asm
	add.s32 	%r3042, %r3039, 2;
	setp.eq.s32 	%p287, %r3042, 256;
	@%p287 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_235;
$L__BB0_166:                            // %L15344
                                        //   in Loop: Header=BB0_162 Depth=2
	setp.lt.u32 	%p288, %r288, 8;
	@%p288 bra 	$L__BB0_240;
	bra.uni 	$L__BB0_167;
$L__BB0_240:                            // %pass6445
                                        //   in Loop: Header=BB0_162 Depth=2
	mad.lo.s32 	%r1708, %r108, 24576, %r201;
	cvt.u64.u32 	%rd182, %r1708;
	add.s64 	%rd183, %rd182, %rd7;
	mul.hi.s64 	%rd184, %rd183, 3074457345618258603;
	shr.u64 	%rd185, %rd184, 63;
	shr.s64 	%rd186, %rd184, 22;
	add.s64 	%rd187, %rd186, %rd185;
	setp.lt.s64 	%p289, %rd183, 0;
	mul.lo.s64 	%rd188, %rd187, 25165824;
	setp.ne.s64 	%p290, %rd188, %rd183;
	and.pred  	%p291, %p289, %p290;
	selp.s64 	%rd189, -1, 0, %p291;
	add.s64 	%rd190, %rd187, %rd189;
	mul.lo.s64 	%rd191, %rd190, -25165824;
	add.s64 	%rd192, %rd191, %rd183;
	shl.b64 	%rd193, %rd192, 2;
	add.s64 	%rd194, %rd4, %rd193;
	st.global.u32 	[%rd194], %r3044;
$L__BB0_167:                            // %L15561
                                        //   in Loop: Header=BB0_162 Depth=2
	add.s32 	%r108, %r108, 1;
	mov.u32 	%r3042, 0;
	mov.u32 	%r3044, %r3042;
$L__BB0_235:                            // %oksrem6589
                                        //   in Loop: Header=BB0_162 Depth=2
	add.s32 	%r1876, %r255, 4;
	mul.hi.u32 	%r1877, %r1876, -1431655765;
	shr.u32 	%r1878, %r1877, 2;
	mul.lo.s32 	%r1879, %r1878, 6;
	sub.s32 	%r1880, %r1876, %r1879;
	shl.b32 	%r1881, %r1880, 4;
	add.s32 	%r1882, %r199, %r1881;
	mul.wide.u32 	%rd195, %r1882, 4;
	add.s64 	%rd197, %rd40, %rd195;
	ld.shared.u32 	%r1714, [%rd197];
	add.s32 	%r1883, %r200, %r1881;
	mul.wide.u32 	%rd198, %r1883, 4;
	add.s64 	%rd199, %rd40, %rd198;
	ld.shared.u32 	%r1721, [%rd199];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1731, %r1728}, {%r418, %r421}, {%r1714}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1740, %r1737}, {%r418, %r421}, {%r1721}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1724, %r459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1726, %r1724, %r1728;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1729, %r456, %r1731, %r1726;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1733, %r459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1735, %r1733, %r1737;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1738, %r456, %r1740, %r1735;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1742, %r459, %r1731;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1745, %r456, %r1728, %r1742;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1749, %r459, %r1740;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1752, %r456, %r1737, %r1749;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1775, %r1778}, {%r502, %r505}, {%r1729, %r1745}, {%r1360, %r1360}, %r254, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1782, %r1786}, {%r502, %r505}, {%r1738, %r1752}, {%r1360, %r1360}, %r254, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1774, %r1775, %r1775;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1777, %r1778, %r1778, %r1774;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1781, %r1782, %r1782, %r1777;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1785, %r1786, %r1786, %r1781;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1789, %r1513, %r1785, %r3044;
	// end inline asm
	add.s32 	%r1884, %r255, 5;
	mul.hi.u32 	%r1885, %r1884, -1431655765;
	shr.u32 	%r1886, %r1885, 2;
	mul.lo.s32 	%r1887, %r1886, 6;
	sub.s32 	%r1888, %r1884, %r1887;
	shl.b32 	%r1889, %r1888, 4;
	add.s32 	%r1890, %r199, %r1889;
	mul.wide.u32 	%rd200, %r1890, 4;
	add.s64 	%rd201, %rd40, %rd200;
	ld.shared.u32 	%r1797, [%rd201];
	add.s32 	%r1891, %r200, %r1889;
	mul.wide.u32 	%rd202, %r1891, 4;
	add.s64 	%rd203, %rd40, %rd202;
	ld.shared.u32 	%r1804, [%rd203];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1814, %r1811}, {%r418, %r421}, {%r1797}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1823, %r1820}, {%r418, %r421}, {%r1804}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1807, %r459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1809, %r1807, %r1811;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1812, %r456, %r1814, %r1809;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1816, %r459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1818, %r1816, %r1820;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1821, %r456, %r1823, %r1818;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1825, %r459, %r1814;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1828, %r456, %r1811, %r1825;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1832, %r459, %r1823;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1835, %r456, %r1820, %r1832;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1858, %r1861}, {%r502, %r505}, {%r1812, %r1828}, {%r1360, %r1360}, %r254, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1865, %r1869}, {%r502, %r505}, {%r1821, %r1835}, {%r1360, %r1360}, %r254, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1857, %r1858, %r1858;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1860, %r1861, %r1861, %r1857;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1864, %r1865, %r1865, %r1860;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1868, %r1869, %r1869, %r1864;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r109, %r1513, %r1868, %r1789;
	// end inline asm
	add.s32 	%r107, %r3042, 2;
	setp.eq.s32 	%p292, %r107, 256;
	@%p292 bra 	$L__BB0_168;
	bra.uni 	$L__BB0_170;
$L__BB0_168:                            // %L17311
                                        //   in Loop: Header=BB0_162 Depth=2
	setp.lt.u32 	%p293, %r288, 8;
	@%p293 bra 	$L__BB0_236;
	bra.uni 	$L__BB0_169;
$L__BB0_236:                            // %pass7296
                                        //   in Loop: Header=BB0_162 Depth=2
	mad.lo.s32 	%r1892, %r108, 24576, %r201;
	cvt.u64.u32 	%rd204, %r1892;
	add.s64 	%rd205, %rd204, %rd7;
	mul.hi.s64 	%rd206, %rd205, 3074457345618258603;
	shr.u64 	%rd207, %rd206, 63;
	shr.s64 	%rd208, %rd206, 22;
	add.s64 	%rd209, %rd208, %rd207;
	setp.lt.s64 	%p294, %rd205, 0;
	mul.lo.s64 	%rd210, %rd209, 25165824;
	setp.ne.s64 	%p295, %rd210, %rd205;
	and.pred  	%p296, %p294, %p295;
	selp.s64 	%rd211, -1, 0, %p296;
	add.s64 	%rd212, %rd209, %rd211;
	mul.lo.s64 	%rd213, %rd212, -25165824;
	add.s64 	%rd214, %rd213, %rd205;
	shl.b64 	%rd215, %rd214, 2;
	add.s64 	%rd216, %rd4, %rd215;
	st.global.u32 	[%rd216], %r109;
	bra.uni 	$L__BB0_169;
$L__BB0_171:                            // %L17550.preheader
                                        //   in Loop: Header=BB0_211 Depth=1
	mov.u16 	%rs194, %rs1;
	mov.u32 	%r3030, %r1360;
	bra.uni 	$L__BB0_172;
$L__BB0_180:                            // %L24381
                                        //   in Loop: Header=BB0_172 Depth=2
	add.s32 	%r108, %r108, 1;
	mov.u32 	%r107, %r2762;
	mov.u32 	%r109, %r2762;
$L__BB0_181:                            // %L24382
                                        //   in Loop: Header=BB0_172 Depth=2
	bar.sync 	0;
	add.s32 	%r3030, %r3030, 6;
	add.s16 	%rs194, %rs194, 6;
	setp.ne.s32 	%p317, %r3030, 24;
	@%p317 bra 	$L__BB0_172;
	bra.uni 	$L__BB0_182;
$L__BB0_172:                            // %L17550
                                        //   Parent Loop BB0_211 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p298, %r3030, 0;
	selp.b32 	%r2589, %r91, 0, %p298;
	setp.eq.s32 	%p299, %r3030, 6;
	selp.b32 	%r2590, %r95, %r2589, %p299;
	setp.eq.s32 	%p300, %r3030, 12;
	selp.b32 	%r2591, %r99, %r2590, %p300;
	setp.eq.s32 	%p301, %r3030, 18;
	selp.b32 	%r2592, %r103, %r2591, %p301;
	selp.b32 	%r2593, %r92, 0, %p298;
	selp.b32 	%r2594, %r96, %r2593, %p299;
	selp.b32 	%r2595, %r100, %r2594, %p300;
	selp.b32 	%r2596, %r104, %r2595, %p301;
	selp.b32 	%r2597, %r93, 0, %p298;
	selp.b32 	%r2598, %r97, %r2597, %p299;
	selp.b32 	%r2599, %r101, %r2598, %p300;
	selp.b32 	%r2600, %r105, %r2599, %p301;
	selp.b32 	%r2601, %r94, 0, %p298;
	selp.b32 	%r2602, %r98, %r2601, %p299;
	selp.b32 	%r2603, %r102, %r2602, %p300;
	selp.b32 	%r2604, %r106, %r2603, %p301;
	// begin inline asm
	mov.b32 %r1922, {%rs92, %rs92};
	// end inline asm
	// begin inline asm
	mov.b32 %r1933, {%rs94, %rs94};
	// end inline asm
	shr.u32 	%r2605, %r2592, 8;
	xor.b32  	%r1932, %r2605, 8947848;
	// begin inline asm
	lop3.b32 %r1919, %r944, %r1932, %r1922, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1923, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1924, %r1922, %r1923;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1927, %r1919, %r1924;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1930, %r955, %r1932, %r1933, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1934, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1935, %r1933, %r1934;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1938, %r1930, %r1935;
	// end inline asm
	// begin inline asm
	mov.b32 %r1968, {%rs92, %rs92};
	// end inline asm
	// begin inline asm
	mov.b32 %r1979, {%rs94, %rs94};
	// end inline asm
	shr.u32 	%r2606, %r2596, 8;
	xor.b32  	%r1978, %r2606, 8947848;
	// begin inline asm
	lop3.b32 %r1965, %r944, %r1978, %r1968, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1969, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1970, %r1968, %r1969;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1973, %r1965, %r1970;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1976, %r955, %r1978, %r1979, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1980, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1981, %r1979, %r1980;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1984, %r1976, %r1981;
	// end inline asm
	// begin inline asm
	mov.b32 %r2014, {%rs92, %rs92};
	// end inline asm
	// begin inline asm
	mov.b32 %r2025, {%rs94, %rs94};
	// end inline asm
	shr.u32 	%r2607, %r2600, 8;
	xor.b32  	%r2024, %r2607, 8947848;
	// begin inline asm
	lop3.b32 %r2011, %r944, %r2024, %r2014, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2015, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2016, %r2014, %r2015;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2019, %r2011, %r2016;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2022, %r955, %r2024, %r2025, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2026, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2027, %r2025, %r2026;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2030, %r2022, %r2027;
	// end inline asm
	// begin inline asm
	mov.b32 %r2060, {%rs92, %rs92};
	// end inline asm
	// begin inline asm
	mov.b32 %r2071, {%rs94, %rs94};
	// end inline asm
	shr.u32 	%r2608, %r2604, 8;
	xor.b32  	%r2070, %r2608, 8947848;
	// begin inline asm
	lop3.b32 %r2057, %r944, %r2070, %r2060, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2061, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2062, %r2060, %r2061;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2065, %r2057, %r2062;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2068, %r955, %r2070, %r2071, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2072, {%rs98, %rs98};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2073, %r2071, %r2072;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2076, %r2068, %r2073;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r177;
    mov.b32 {%r2re, %r2im}, %r1927;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2079, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r178;
    mov.b32 {%r2re, %r2im}, %r1973;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2082, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r179;
    mov.b32 {%r2re, %r2im}, %r1938;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2085, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r180;
    mov.b32 {%r2re, %r2im}, %r1984;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2088, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r177;
    mov.b32 {%r2re, %r2im}, %r2019;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2091, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r178;
    mov.b32 {%r2re, %r2im}, %r2065;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2094, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r179;
    mov.b32 {%r2re, %r2im}, %r2030;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2097, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r180;
    mov.b32 {%r2re, %r2im}, %r2076;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2100, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2166, %r2163}, {%r310, %r313}, {%r2079}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2175, %r2172}, {%r310, %r313}, {%r2082}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2184, %r2181}, {%r310, %r313}, {%r2085}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2193, %r2190}, {%r310, %r313}, {%r2088}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2202, %r2199}, {%r310, %r313}, {%r2091}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2211, %r2208}, {%r310, %r313}, {%r2094}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2220, %r2217}, {%r310, %r313}, {%r2097}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2229, %r2226}, {%r310, %r313}, {%r2100}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2159, %r365;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2161, %r2159, %r2163;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2164, %r362, %r2166, %r2161;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2168, %r365;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2170, %r2168, %r2172;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2173, %r362, %r2175, %r2170;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2177, %r365;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2179, %r2177, %r2181;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2182, %r362, %r2184, %r2179;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2186, %r365;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2188, %r2186, %r2190;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2191, %r362, %r2193, %r2188;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2195, %r365;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2197, %r2195, %r2199;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2200, %r362, %r2202, %r2197;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2204, %r365;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2206, %r2204, %r2208;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2209, %r362, %r2211, %r2206;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2213, %r365;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2215, %r2213, %r2217;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2218, %r362, %r2220, %r2215;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2222, %r365;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2224, %r2222, %r2226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2227, %r362, %r2229, %r2224;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2231, %r365, %r2166;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2234, %r362, %r2163, %r2231;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2238, %r365, %r2175;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2241, %r362, %r2172, %r2238;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2245, %r365, %r2184;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2248, %r362, %r2181, %r2245;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2252, %r365, %r2193;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2255, %r362, %r2190, %r2252;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2259, %r365, %r2202;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2262, %r362, %r2199, %r2259;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2266, %r365, %r2211;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2269, %r362, %r2208, %r2266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2273, %r365, %r2220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2276, %r362, %r2217, %r2273;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2280, %r365, %r2229;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2283, %r362, %r2226, %r2280;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2287, %r2288}, {%r406, %r409}, {%r2164, %r2234}, {%r1360, %r1360}, %r202, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2296, %r2297}, {%r406, %r409}, {%r2173, %r2241}, {%r1360, %r1360}, %r202, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2305, %r2306}, {%r406, %r409}, {%r2182, %r2248}, {%r1360, %r1360}, %r202, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2314, %r2315}, {%r406, %r409}, {%r2191, %r2255}, {%r1360, %r1360}, %r202, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2323, %r2324}, {%r406, %r409}, {%r2200, %r2262}, {%r1360, %r1360}, %r202, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2332, %r2333}, {%r406, %r409}, {%r2209, %r2269}, {%r1360, %r1360}, %r202, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2341, %r2342}, {%r406, %r409}, {%r2218, %r2276}, {%r1360, %r1360}, %r202, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2350, %r2351}, {%r406, %r409}, {%r2227, %r2283}, {%r1360, %r1360}, %r202, 0;
	// end inline asm
	bar.sync 	0;
	add.s16 	%rs156, %rs194, -5;
	mul.hi.s16 	%rs157, %rs156, 10923;
	shr.u16 	%rs158, %rs157, 15;
	add.s16 	%rs159, %rs157, %rs158;
	mul.lo.s16 	%rs160, %rs159, 6;
	sub.s16 	%rs161, %rs156, %rs160;
	mul.wide.s16 	%r2609, %rs161, 16;
	add.s32 	%r2610, %r199, %r2609;
	mul.wide.s32 	%rd217, %r2610, 4;
	add.s64 	%rd219, %rd40, %rd217;
	ld.shared.u32 	%r2427, [%rd219];
	add.s32 	%r2611, %r200, %r2609;
	mul.wide.s32 	%rd220, %r2611, 4;
	add.s64 	%rd221, %rd40, %rd220;
	ld.shared.u32 	%r2434, [%rd221];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2444, %r2441}, {%r418, %r421}, {%r2427}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2453, %r2450}, {%r418, %r421}, {%r2434}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2437, %r459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2439, %r2437, %r2441;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2442, %r456, %r2444, %r2439;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2446, %r459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2448, %r2446, %r2450;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2451, %r456, %r2453, %r2448;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2455, %r459, %r2444;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2458, %r456, %r2441, %r2455;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2462, %r459, %r2453;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2465, %r456, %r2450, %r2462;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2488, %r2491}, {%r502, %r505}, {%r2442, %r2458}, {%r1360, %r1360}, %r254, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2495, %r2499}, {%r502, %r505}, {%r2451, %r2465}, {%r1360, %r1360}, %r254, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2487, %r2488, %r2488;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2490, %r2491, %r2491, %r2487;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2494, %r2495, %r2495, %r2490;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2498, %r2499, %r2499, %r2494;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2502, %r1513, %r2498, %r109;
	// end inline asm
	add.s16 	%rs162, %rs194, -4;
	mul.hi.s16 	%rs163, %rs162, 10923;
	shr.u16 	%rs164, %rs163, 15;
	add.s16 	%rs165, %rs163, %rs164;
	mul.lo.s16 	%rs166, %rs165, 6;
	sub.s16 	%rs167, %rs162, %rs166;
	mul.wide.s16 	%r2612, %rs167, 16;
	add.s32 	%r2613, %r199, %r2612;
	mul.wide.s32 	%rd222, %r2613, 4;
	add.s64 	%rd223, %rd40, %rd222;
	ld.shared.u32 	%r2510, [%rd223];
	add.s32 	%r2614, %r200, %r2612;
	mul.wide.s32 	%rd224, %r2614, 4;
	add.s64 	%rd225, %rd40, %rd224;
	ld.shared.u32 	%r2517, [%rd225];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2527, %r2524}, {%r418, %r421}, {%r2510}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2536, %r2533}, {%r418, %r421}, {%r2517}, {%r1360, %r1360};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2520, %r459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2522, %r2520, %r2524;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2525, %r456, %r2527, %r2522;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2529, %r459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2531, %r2529, %r2533;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2534, %r456, %r2536, %r2531;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2538, %r459, %r2527;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2541, %r456, %r2524, %r2538;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2545, %r459, %r2536;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2548, %r456, %r2533, %r2545;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2571, %r2574}, {%r502, %r505}, {%r2525, %r2541}, {%r1360, %r1360}, %r254, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2578, %r2582}, {%r502, %r505}, {%r2534, %r2548}, {%r1360, %r1360}, %r254, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2570, %r2571, %r2571;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2573, %r2574, %r2574, %r2570;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2577, %r2578, %r2578, %r2573;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2581, %r2582, %r2582, %r2577;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3047, %r1513, %r2581, %r2502;
	// end inline asm
	add.s32 	%r3045, %r107, 2;
	setp.ne.s32 	%p302, %r3045, 256;
	@%p302 bra 	$L__BB0_175;
// %bb.173:                             // %L20230
                                        //   in Loop: Header=BB0_172 Depth=2
	setp.lt.u32 	%p303, %r288, 8;
	@%p303 bra 	$L__BB0_237;
	bra.uni 	$L__BB0_174;
$L__BB0_237:                            // %pass8332
                                        //   in Loop: Header=BB0_172 Depth=2
	mad.lo.s32 	%r2615, %r108, 24576, %r201;
	cvt.u64.u32 	%rd226, %r2615;
	add.s64 	%rd227, %rd226, %rd7;
	mul.hi.s64 	%rd228, %rd227, 3074457345618258603;
	shr.u64 	%rd229, %rd228, 63;
	shr.s64 	%rd230, %rd228, 22;
	add.s64 	%rd231, %rd230, %rd229;
	setp.lt.s64 	%p304, %rd227, 0;
	mul.lo.s64 	%rd232, %rd231, 25165824;
	setp.ne.s64 	%p305, %rd232, %rd227;
	and.pred  	%p306, %p304, %p305;
	selp.s64 	%rd233, -1, 0, %p306;
	add.s64 	%rd234, %rd231, %rd233;
	mul.lo.s64 	%rd235, %rd234, -25165824;
	add.s64 	%rd236, %rd235, %rd227;
	shl.b64 	%rd237, %rd236, 2;
	add.s64 	%rd238, %rd4, %rd237;
	st.global.u32 	[%rd238], %r3047;
$L__BB0_174:                            // %L20447
                                        //   in Loop: Header=BB0_172 Depth=2
	add.s32 	%r108, %r108, 1;
	mov.u32 	%r3045, 0;
	mov.u32 	%r3047, %r3045;
$L__BB0_175:                            // %oksrem8476
                                        //   in Loop: Header=BB0_172 Depth=2
	add.s16 	%rs168, %rs194, -3;
	mul.hi.s16 	%rs169, %rs168, 10923;
	shr.u16 	%rs170, %rs169, 15;
	add.s16 	%rs171, %rs169, %rs170;
	mul.lo.s16 	%rs172, %rs171, 6;
	sub.s16 	%rs173, %rs168, %rs172;
	mul.wide.s16 	%r2783, %rs173, 16;
	add.s32 	%r2784, %r199, %r2783;
	mul.wide.s32 	%rd239, %r2784, 4;
	add.s64 	%rd241, %rd40, %rd239;
	ld.shared.u32 	%r2621, [%rd241];
	add.s32 	%r2785, %r200, %r2783;
	mul.wide.s32 	%rd242, %r2785, 4;
	add.s64 	%rd243, %rd40, %rd242;
	ld.shared.u32 	%r2628, [%rd243];
	mov.u32 	%r2762, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2638, %r2635}, {%r418, %r421}, {%r2621}, {%r2762, %r2762};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2647, %r2644}, {%r418, %r421}, {%r2628}, {%r2762, %r2762};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2631, %r459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2633, %r2631, %r2635;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2636, %r456, %r2638, %r2633;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2640, %r459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2642, %r2640, %r2644;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2645, %r456, %r2647, %r2642;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2649, %r459, %r2638;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2652, %r456, %r2635, %r2649;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2656, %r459, %r2647;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2659, %r456, %r2644, %r2656;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2682, %r2685}, {%r502, %r505}, {%r2636, %r2652}, {%r2762, %r2762}, %r254, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2689, %r2693}, {%r502, %r505}, {%r2645, %r2659}, {%r2762, %r2762}, %r254, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2681, %r2682, %r2682;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2684, %r2685, %r2685, %r2681;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2688, %r2689, %r2689, %r2684;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2692, %r2693, %r2693, %r2688;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2696, %r1513, %r2692, %r3047;
	// end inline asm
	add.s16 	%rs174, %rs194, -2;
	mul.hi.s16 	%rs175, %rs174, 10923;
	shr.u16 	%rs176, %rs175, 15;
	add.s16 	%rs177, %rs175, %rs176;
	mul.lo.s16 	%rs178, %rs177, 6;
	sub.s16 	%rs179, %rs174, %rs178;
	mul.wide.s16 	%r2786, %rs179, 16;
	add.s32 	%r2787, %r199, %r2786;
	mul.wide.s32 	%rd244, %r2787, 4;
	add.s64 	%rd245, %rd40, %rd244;
	ld.shared.u32 	%r2704, [%rd245];
	add.s32 	%r2788, %r200, %r2786;
	mul.wide.s32 	%rd246, %r2788, 4;
	add.s64 	%rd247, %rd40, %rd246;
	ld.shared.u32 	%r2711, [%rd247];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2721, %r2718}, {%r418, %r421}, {%r2704}, {%r2762, %r2762};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2730, %r2727}, {%r418, %r421}, {%r2711}, {%r2762, %r2762};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2714, %r459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2716, %r2714, %r2718;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2719, %r456, %r2721, %r2716;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2723, %r459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2725, %r2723, %r2727;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2728, %r456, %r2730, %r2725;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2732, %r459, %r2721;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2735, %r456, %r2718, %r2732;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2739, %r459, %r2730;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2742, %r456, %r2727, %r2739;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2765, %r2768}, {%r502, %r505}, {%r2719, %r2735}, {%r2762, %r2762}, %r254, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2772, %r2776}, {%r502, %r505}, {%r2728, %r2742}, {%r2762, %r2762}, %r254, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2764, %r2765, %r2765;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2767, %r2768, %r2768, %r2764;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2771, %r2772, %r2772, %r2767;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2775, %r2776, %r2776, %r2771;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3050, %r1513, %r2775, %r2696;
	// end inline asm
	add.s32 	%r3048, %r3045, 2;
	setp.eq.s32 	%p307, %r3048, 256;
	@%p307 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_178;
$L__BB0_176:                            // %L22197
                                        //   in Loop: Header=BB0_172 Depth=2
	setp.lt.u32 	%p308, %r288, 8;
	@%p308 bra 	$L__BB0_238;
	bra.uni 	$L__BB0_177;
$L__BB0_238:                            // %pass9183
                                        //   in Loop: Header=BB0_172 Depth=2
	mad.lo.s32 	%r2789, %r108, 24576, %r201;
	cvt.u64.u32 	%rd248, %r2789;
	add.s64 	%rd249, %rd248, %rd7;
	mul.hi.s64 	%rd250, %rd249, 3074457345618258603;
	shr.u64 	%rd251, %rd250, 63;
	shr.s64 	%rd252, %rd250, 22;
	add.s64 	%rd253, %rd252, %rd251;
	setp.lt.s64 	%p309, %rd249, 0;
	mul.lo.s64 	%rd254, %rd253, 25165824;
	setp.ne.s64 	%p310, %rd254, %rd249;
	and.pred  	%p311, %p309, %p310;
	selp.s64 	%rd255, -1, 0, %p311;
	add.s64 	%rd256, %rd253, %rd255;
	mul.lo.s64 	%rd257, %rd256, -25165824;
	add.s64 	%rd258, %rd257, %rd249;
	shl.b64 	%rd259, %rd258, 2;
	add.s64 	%rd260, %rd4, %rd259;
	st.global.u32 	[%rd260], %r3050;
$L__BB0_177:                            // %L22414
                                        //   in Loop: Header=BB0_172 Depth=2
	add.s32 	%r108, %r108, 1;
	mov.u32 	%r3048, 0;
	mov.u32 	%r3050, %r3048;
$L__BB0_178:                            // %oksrem9327
                                        //   in Loop: Header=BB0_172 Depth=2
	add.s16 	%rs180, %rs194, -1;
	mul.hi.s16 	%rs181, %rs180, 10923;
	shr.u16 	%rs182, %rs181, 15;
	add.s16 	%rs183, %rs181, %rs182;
	mul.lo.s16 	%rs184, %rs183, 6;
	sub.s16 	%rs185, %rs180, %rs184;
	mul.wide.s16 	%r2957, %rs185, 16;
	add.s32 	%r2958, %r199, %r2957;
	mul.wide.s32 	%rd261, %r2958, 4;
	add.s64 	%rd263, %rd40, %rd261;
	ld.shared.u32 	%r2795, [%rd263];
	add.s32 	%r2959, %r200, %r2957;
	mul.wide.s32 	%rd264, %r2959, 4;
	add.s64 	%rd265, %rd40, %rd264;
	ld.shared.u32 	%r2802, [%rd265];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2812, %r2809}, {%r418, %r421}, {%r2795}, {%r2762, %r2762};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2821, %r2818}, {%r418, %r421}, {%r2802}, {%r2762, %r2762};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2805, %r459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2807, %r2805, %r2809;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2810, %r456, %r2812, %r2807;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2814, %r459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2816, %r2814, %r2818;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2819, %r456, %r2821, %r2816;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2823, %r459, %r2812;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2826, %r456, %r2809, %r2823;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2830, %r459, %r2821;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2833, %r456, %r2818, %r2830;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2856, %r2859}, {%r502, %r505}, {%r2810, %r2826}, {%r2762, %r2762}, %r254, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2863, %r2867}, {%r502, %r505}, {%r2819, %r2833}, {%r2762, %r2762}, %r254, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2855, %r2856, %r2856;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2858, %r2859, %r2859, %r2855;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2862, %r2863, %r2863, %r2858;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2866, %r2867, %r2867, %r2862;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2870, %r1513, %r2866, %r3050;
	// end inline asm
	mul.hi.s16 	%rs186, %rs194, 10923;
	shr.u16 	%rs187, %rs186, 15;
	add.s16 	%rs188, %rs186, %rs187;
	mul.lo.s16 	%rs189, %rs188, 6;
	sub.s16 	%rs190, %rs194, %rs189;
	mul.wide.s16 	%r2960, %rs190, 16;
	add.s32 	%r2961, %r199, %r2960;
	mul.wide.s32 	%rd266, %r2961, 4;
	add.s64 	%rd267, %rd40, %rd266;
	ld.shared.u32 	%r2878, [%rd267];
	add.s32 	%r2962, %r200, %r2960;
	mul.wide.s32 	%rd268, %r2962, 4;
	add.s64 	%rd269, %rd40, %rd268;
	ld.shared.u32 	%r2885, [%rd269];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2895, %r2892}, {%r418, %r421}, {%r2878}, {%r2762, %r2762};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2904, %r2901}, {%r418, %r421}, {%r2885}, {%r2762, %r2762};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2888, %r459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2890, %r2888, %r2892;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2893, %r456, %r2895, %r2890;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2897, %r459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2899, %r2897, %r2901;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2902, %r456, %r2904, %r2899;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2906, %r459, %r2895;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2909, %r456, %r2892, %r2906;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2913, %r459, %r2904;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2916, %r456, %r2901, %r2913;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2939, %r2942}, {%r502, %r505}, {%r2893, %r2909}, {%r2762, %r2762}, %r254, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2946, %r2950}, {%r502, %r505}, {%r2902, %r2916}, {%r2762, %r2762}, %r254, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2938, %r2939, %r2939;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2941, %r2942, %r2942, %r2938;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2945, %r2946, %r2946, %r2941;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2949, %r2950, %r2950, %r2945;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r109, %r1513, %r2949, %r2870;
	// end inline asm
	add.s32 	%r107, %r3048, 2;
	setp.eq.s32 	%p312, %r107, 256;
	@%p312 bra 	$L__BB0_179;
	bra.uni 	$L__BB0_181;
$L__BB0_179:                            // %L24164
                                        //   in Loop: Header=BB0_172 Depth=2
	setp.lt.u32 	%p313, %r288, 8;
	@%p313 bra 	$L__BB0_239;
	bra.uni 	$L__BB0_180;
$L__BB0_239:                            // %pass10034
                                        //   in Loop: Header=BB0_172 Depth=2
	mad.lo.s32 	%r2963, %r108, 24576, %r201;
	cvt.u64.u32 	%rd270, %r2963;
	add.s64 	%rd271, %rd270, %rd7;
	mul.hi.s64 	%rd272, %rd271, 3074457345618258603;
	shr.u64 	%rd273, %rd272, 63;
	shr.s64 	%rd274, %rd272, 22;
	add.s64 	%rd275, %rd274, %rd273;
	setp.lt.s64 	%p314, %rd271, 0;
	mul.lo.s64 	%rd276, %rd275, 25165824;
	setp.ne.s64 	%p315, %rd276, %rd271;
	and.pred  	%p316, %p314, %p315;
	selp.s64 	%rd277, -1, 0, %p316;
	add.s64 	%rd278, %rd275, %rd277;
	mul.lo.s64 	%rd279, %rd278, -25165824;
	add.s64 	%rd280, %rd279, %rd271;
	shl.b64 	%rd281, %rd280, 2;
	add.s64 	%rd282, %rd4, %rd281;
	st.global.u32 	[%rd282], %r109;
	bra.uni 	$L__BB0_180;
$L__BB0_183:                            // %L24413
	mov.u32 	%r2965, 0;
	st.global.u32 	[%rd6], %r2965;
	ret;
$L__BB0_163:                            // %post_box_union
	mov.u64 	%rd146, exception1909;
	cvta.global.u64 	%rd147, %rd146;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd147;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r278;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_231:                            // %post_box_union5148
	mov.u64 	%rd153, exception1909;
	cvta.global.u64 	%rd154, %rd153;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd154;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r278;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L5147
	mov.u32 	%r2981, 5;
	st.global.u32 	[%rd6], %r2981;
	mov.u64 	%rd313, exception1869;
	cvta.global.u64 	%rd314, %rd313;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd314;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r278;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L5309
	mov.u32 	%r2980, 5;
	st.global.u32 	[%rd6], %r2980;
	mov.u64 	%rd311, exception1869;
	cvta.global.u64 	%rd312, %rd311;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd312;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r278;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L5471
	mov.u32 	%r2979, 5;
	st.global.u32 	[%rd6], %r2979;
	mov.u64 	%rd309, exception1869;
	cvta.global.u64 	%rd310, %rd309;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd310;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r278;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L5633
	mov.u32 	%r2978, 5;
	st.global.u32 	[%rd6], %r2978;
	mov.u64 	%rd307, exception1869;
	cvta.global.u64 	%rd308, %rd307;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd308;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r278;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L5795
	mov.u32 	%r2977, 5;
	st.global.u32 	[%rd6], %r2977;
	mov.u64 	%rd305, exception1869;
	cvta.global.u64 	%rd306, %rd305;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd306;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r278;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L5957
	mov.u32 	%r2976, 5;
	st.global.u32 	[%rd6], %r2976;
	mov.u64 	%rd303, exception1869;
	cvta.global.u64 	%rd304, %rd303;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd304;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r278;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_151:                            // %L6119
	mov.u32 	%r2975, 5;
	st.global.u32 	[%rd6], %r2975;
	mov.u64 	%rd301, exception1869;
	cvta.global.u64 	%rd302, %rd301;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd302;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r278;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_152:                            // %L6281
	mov.u32 	%r2974, 5;
	st.global.u32 	[%rd6], %r2974;
	mov.u64 	%rd299, exception1869;
	cvta.global.u64 	%rd300, %rd299;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd300;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r278;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_153:                            // %L6443
	mov.u32 	%r2973, 5;
	st.global.u32 	[%rd6], %r2973;
	mov.u64 	%rd297, exception1869;
	cvta.global.u64 	%rd298, %rd297;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd298;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r278;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_154:                            // %L6605
	mov.u32 	%r2972, 5;
	st.global.u32 	[%rd6], %r2972;
	mov.u64 	%rd295, exception1869;
	cvta.global.u64 	%rd296, %rd295;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd296;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r278;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_155:                            // %L6793
	mov.u32 	%r2971, 5;
	st.global.u32 	[%rd6], %r2971;
	mov.u64 	%rd293, exception1869;
	cvta.global.u64 	%rd294, %rd293;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd294;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r278;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_156:                            // %L6955
	mov.u32 	%r2970, 5;
	st.global.u32 	[%rd6], %r2970;
	mov.u64 	%rd291, exception1869;
	cvta.global.u64 	%rd292, %rd291;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd292;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r278;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_157:                            // %L7117
	mov.u32 	%r2969, 5;
	st.global.u32 	[%rd6], %r2969;
	mov.u64 	%rd289, exception1869;
	cvta.global.u64 	%rd290, %rd289;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd290;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r278;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_158:                            // %L7279
	mov.u32 	%r2968, 5;
	st.global.u32 	[%rd6], %r2968;
	mov.u64 	%rd287, exception1869;
	cvta.global.u64 	%rd288, %rd287;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd288;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r278;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_159:                            // %L7441
	mov.u32 	%r2967, 5;
	st.global.u32 	[%rd6], %r2967;
	mov.u64 	%rd285, exception1869;
	cvta.global.u64 	%rd286, %rd285;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd286;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r278;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_160:                            // %L7603
	mov.u32 	%r2966, 5;
	st.global.u32 	[%rd6], %r2966;
	mov.u64 	%rd283, exception1869;
	cvta.global.u64 	%rd284, %rd283;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd284;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r278;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L167
	mov.u32 	%r2983, 2;
	st.global.u32 	[%rd6], %r2983;
	mov.u64 	%rd317, exception1869;
	cvta.global.u64 	%rd318, %rd317;
	{ // callseq 90, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd318;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 90
	{ // callseq 91, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r278;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 91
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_12:                             // %L311
	mov.u32 	%r2982, 3;
	st.global.u32 	[%rd6], %r2982;
	mov.u64 	%rd315, exception1869;
	cvta.global.u64 	%rd316, %rd315;
	{ // callseq 88, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd316;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 88
	{ // callseq 89, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r278;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 89
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd18, exception1;
	cvta.global.u64 	%rd19, %rd18;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd19;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 47
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r278;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 48
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_144:                            // %L1159
	add.u64 	%rd17, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r288, %r1};
	st.local.v2.u32 	[%rd5+8], {%r3, %r84};
	st.local.u32 	[%rd5+16], %r85;
	mov.u64 	%rd23, __unnamed_1;
	cvta.global.u64 	%rd24, %rd23;
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd24;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd17;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r515, [retval0+0];
	} // callseq 49
	mov.u32 	%r517, 4;
	st.global.u32 	[%rd6], %r517;
	mov.u64 	%rd26, exception1869;
	cvta.global.u64 	%rd27, %rd26;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd27;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd12;
	st.param.b32 	[param0+8], %r278;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
