// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE // -- Begin function _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception3094[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception13106[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.visible .entry _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE(
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5[32]
)
.reqntid 512, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<240>;
	.reg .b16 	%rs<97>;
	.reg .b32 	%r<3316>;
	.reg .f32 	%f<752>;
	.reg .b64 	%rd<272>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r180, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd88, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r181, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r181, 34943;
	@%p2 bra 	$L__BB0_138;
	bra.uni 	$L__BB0_1;
$L__BB0_138:                            // %L10
	ld.param.u64 	%rd89, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %ctaid.x;
	shl.b32 	%r4, %r3, 9;
	mov.u32 	%r5, %tid.x;
	or.b32  	%r182, %r4, %r5;
	or.b32  	%r183, %r182, %r2;
	mul.wide.u32 	%rd95, %r183, 4;
	add.s64 	%rd5, %rd89, %rd95;
	mov.u32 	%r184, 1;
	st.global.u32 	[%rd5], %r184;
	and.b32  	%r6, %r5, 3;
	shr.u32 	%r7, %r5, 2;
	mul.lo.s32 	%r185, %r6, %r7;
	and.b32  	%r186, %r185, 7;
	cvt.rn.f32.s32 	%f185, %r186;
	mov.f32 	%f186, 0f40800000;
	div.approx.f32 	%f1, %f185, %f186;
	abs.f32 	%f750, %f1;
	setp.lt.f32 	%p3, %f750, 0f40000000;
	mov.f32 	%f703, 0f40000000;
	setp.gtu.f32 	%p235, %f750, 0f4B800000;
	mov.f32 	%f746, %f750;
	@%p3 bra 	$L__BB0_150;
// %bb.139:
	@%p235 bra 	$L__BB0_146;
	bra.uni 	$L__BB0_140;
$L__BB0_146:
	mov.b32 	%r145, %f750;
	and.b32  	%r187, %r145, 8388607;
	or.b32  	%r3311, %r187, 1065353216;
	mov.b32 	%f745, %r3311;
	add.s32 	%r188, %r145, -1073741824;
	and.b32  	%r3312, %r188, -8388608;
	setp.eq.s32 	%p10, %r3312, 0;
	@%p10 bra 	$L__BB0_149;
// %bb.147:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f196, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f195,%f196;
	// end inline asm
$L__BB0_148:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r189, %r3312, 192937984;
	add.s32 	%r190, %r3311, %r189;
	mov.b32 	%f197, %r190;
	mul.f32 	%f198, %f195, %f197;
	sub.f32 	%f199, %f197, %f198;
	fma.rn.f32 	%f200, %f199, %f195, %f198;
	sub.f32 	%f201, %f197, %f200;
	fma.rz.f32 	%f202, %f201, %f195, %f200;
	cvt.rzi.f32.f32 	%f203, %f202;
	sub.f32 	%f745, %f197, %f203;
	sub.s32 	%r3312, %r3312, %r189;
	mov.b32 	%r3311, %f745;
	setp.ne.s32 	%p11, %r3312, 0;
	setp.ne.s32 	%p12, %r3311, 0;
	and.pred  	%p13, %p11, %p12;
	@%p13 bra 	$L__BB0_148;
$L__BB0_149:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p14, %r145, 2139095039;
	selp.f32 	%f204, 0f7FFFFFFF, 0f4B800000, %p14;
	mul.f32 	%f205, %f745, 0f34000000;
	mul.f32 	%f746, %f204, %f205;
	bra.uni 	$L__BB0_150;
$L__BB0_140:                            // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f188, %f750, %f703;
	cvt.rzi.f32.f32 	%f744, %f188;
	fma.rn.f32 	%f154, %f744, 0fC0000000, %f750;
	mov.b32 	%r144, %f154;
	setp.lt.u32 	%p5, %r144, 1073741824;
	@%p5 bra 	$L__BB0_145;
// %bb.141:
	setp.lt.u32 	%p6, %r144, -2147483647;
	@%p6 bra 	$L__BB0_143;
// %bb.142:
	add.f32 	%f193, %f744, 0fBF800000;
	setp.lt.f32 	%p9, %f154, 0fC0000000;
	add.f32 	%f194, %f193, 0fBF800000;
	selp.f32 	%f744, %f194, %f193, %p9;
	bra.uni 	$L__BB0_145;
$L__BB0_143:
	add.f32 	%f744, %f744, 0f3F800000;
	setp.ltu.f32 	%p7, %f154, 0f40800000;
	@%p7 bra 	$L__BB0_145;
// %bb.144:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f189, %f744, 0f3F800000;
	fma.rn.f32 	%f191, %f703, 0fC0400000, %f154;
	setp.ge.f32 	%p8, %f191, 0f00000000;
	add.f32 	%f192, %f189, 0f3F800000;
	selp.f32 	%f744, %f192, %f189, %p8;
$L__BB0_145:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f746, %f744, 0fC0000000, %f750;
$L__BB0_150:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f206, %f746;
	setp.gtu.f32 	%p15, %f206, 0f7F800000;
	mov.b32 	%r191, %f1;
	and.b32  	%r152, %r191, -2147483648;
	@%p15 bra 	$L__BB0_152;
// %bb.151:
	mov.b32 	%r192, %f746;
	or.b32  	%r193, %r152, %r192;
	mov.b32 	%f746, %r193;
$L__BB0_152:                            // %__nv_fmodf.exit
	add.f32 	%f207, %f746, %f746;
	mov.b32 	%r200, %f207;
	and.b32  	%r201, %r200, -2147483648;
	shl.b32 	%r155, %r5, 1;
	and.b32  	%r208, %r155, 2;
	mul.lo.s32 	%r156, %r208, %r7;
	cvt.rn.f32.s32 	%f239, %r156;
	mov.f32 	%f240, 0f41800000;
	div.approx.f32 	%f168, %f239, %f240;
	abs.f32 	%f726, %f168;
	setp.lt.f32 	%p23, %f726, 0f40000000;
	setp.gtu.f32 	%p236, %f726, 0f4B800000;
	mov.f32 	%f706, %f726;
	@%p23 bra 	$L__BB0_13;
// %bb.2:
	@%p236 bra 	$L__BB0_9;
	bra.uni 	$L__BB0_3;
$L__BB0_9:
	mov.b32 	%r9, %f726;
	and.b32  	%r209, %r9, 8388607;
	or.b32  	%r3277, %r209, 1065353216;
	mov.b32 	%f705, %r3277;
	add.s32 	%r210, %r9, -1073741824;
	and.b32  	%r3278, %r210, -8388608;
	setp.eq.s32 	%p30, %r3278, 0;
	@%p30 bra 	$L__BB0_12;
// %bb.10:                              // %__nv_fmaf_rn.exit4.i.i.i2334.preheader
	mov.f32 	%f250, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f249,%f250;
	// end inline asm
$L__BB0_11:                             // %__nv_fmaf_rn.exit4.i.i.i2334
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r211, %r3278, 192937984;
	add.s32 	%r212, %r3277, %r211;
	mov.b32 	%f251, %r212;
	mul.f32 	%f252, %f249, %f251;
	sub.f32 	%f253, %f251, %f252;
	fma.rn.f32 	%f254, %f253, %f249, %f252;
	sub.f32 	%f255, %f251, %f254;
	fma.rz.f32 	%f256, %f255, %f249, %f254;
	cvt.rzi.f32.f32 	%f257, %f256;
	sub.f32 	%f705, %f251, %f257;
	sub.s32 	%r3278, %r3278, %r211;
	mov.b32 	%r3277, %f705;
	setp.ne.s32 	%p31, %r3278, 0;
	setp.ne.s32 	%p32, %r3277, 0;
	and.pred  	%p33, %p31, %p32;
	@%p33 bra 	$L__BB0_11;
$L__BB0_12:                             // %__internal_fmodf_slowpath_mod.exit.i.i2336
	setp.gt.u32 	%p34, %r9, 2139095039;
	selp.f32 	%f258, 0f7FFFFFFF, 0f4B800000, %p34;
	mul.f32 	%f259, %f705, 0f34000000;
	mul.f32 	%f706, %f258, %f259;
	bra.uni 	$L__BB0_13;
$L__BB0_3:                              // %__nv_fast_fdividef.exit.i.i.i2313
	div.approx.f32 	%f242, %f726, %f703;
	cvt.rzi.f32.f32 	%f704, %f242;
	fma.rn.f32 	%f4, %f704, 0fC0000000, %f726;
	mov.b32 	%r8, %f4;
	setp.lt.u32 	%p25, %r8, 1073741824;
	@%p25 bra 	$L__BB0_8;
// %bb.4:
	setp.lt.u32 	%p26, %r8, -2147483647;
	@%p26 bra 	$L__BB0_6;
// %bb.5:
	add.f32 	%f247, %f704, 0fBF800000;
	setp.lt.f32 	%p29, %f4, 0fC0000000;
	add.f32 	%f248, %f247, 0fBF800000;
	selp.f32 	%f704, %f248, %f247, %p29;
	bra.uni 	$L__BB0_8;
$L__BB0_6:
	add.f32 	%f704, %f704, 0f3F800000;
	setp.ltu.f32 	%p27, %f4, 0f40800000;
	@%p27 bra 	$L__BB0_8;
// %bb.7:                               // %__nv_fmaf_rn.exit.i.i.i2317
	add.f32 	%f243, %f704, 0f3F800000;
	fma.rn.f32 	%f245, %f703, 0fC0400000, %f4;
	setp.ge.f32 	%p28, %f245, 0f00000000;
	add.f32 	%f246, %f243, 0f3F800000;
	selp.f32 	%f704, %f246, %f243, %p28;
$L__BB0_8:                              // %__internal_fmodf_fastpath_quot.exit.i.i2320
	fma.rn.f32 	%f706, %f704, 0fC0000000, %f726;
$L__BB0_13:                             // %__internal_fmodf_kernel.exit.i2339
	or.b32  	%r202, %r201, 1056964608;
	abs.f32 	%f260, %f706;
	setp.gtu.f32 	%p35, %f260, 0f7F800000;
	mov.b32 	%r213, %f168;
	and.b32  	%r16, %r213, -2147483648;
	@%p35 bra 	$L__BB0_15;
// %bb.14:
	mov.b32 	%r214, %f706;
	or.b32  	%r215, %r16, %r214;
	mov.b32 	%f706, %r215;
$L__BB0_15:                             // %__nv_fmodf.exit2340
	mov.b32 	%f208, %r202;
	add.f32 	%f261, %f706, %f706;
	mov.b32 	%r216, %f261;
	and.b32  	%r217, %r216, -2147483648;
	or.b32  	%r218, %r217, 1056964608;
	add.s32 	%r224, %r156, %r7;
	cvt.rn.f32.s32 	%f291, %r224;
	div.approx.f32 	%f20, %f291, %f240;
	abs.f32 	%f730, %f20;
	setp.lt.f32 	%p43, %f730, 0f40000000;
	setp.gtu.f32 	%p237, %f730, 0f4B800000;
	mov.f32 	%f710, %f730;
	@%p43 bra 	$L__BB0_27;
// %bb.16:
	@%p237 bra 	$L__BB0_23;
	bra.uni 	$L__BB0_17;
$L__BB0_23:
	mov.b32 	%r18, %f730;
	and.b32  	%r225, %r18, 8388607;
	or.b32  	%r3279, %r225, 1065353216;
	mov.b32 	%f709, %r3279;
	add.s32 	%r226, %r18, -1073741824;
	and.b32  	%r3280, %r226, -8388608;
	setp.eq.s32 	%p50, %r3280, 0;
	@%p50 bra 	$L__BB0_26;
// %bb.24:                              // %__nv_fmaf_rn.exit4.i.i.i2365.preheader
	mov.f32 	%f302, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f301,%f302;
	// end inline asm
$L__BB0_25:                             // %__nv_fmaf_rn.exit4.i.i.i2365
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r227, %r3280, 192937984;
	add.s32 	%r228, %r3279, %r227;
	mov.b32 	%f303, %r228;
	mul.f32 	%f304, %f301, %f303;
	sub.f32 	%f305, %f303, %f304;
	fma.rn.f32 	%f306, %f305, %f301, %f304;
	sub.f32 	%f307, %f303, %f306;
	fma.rz.f32 	%f308, %f307, %f301, %f306;
	cvt.rzi.f32.f32 	%f309, %f308;
	sub.f32 	%f709, %f303, %f309;
	sub.s32 	%r3280, %r3280, %r227;
	mov.b32 	%r3279, %f709;
	setp.ne.s32 	%p51, %r3280, 0;
	setp.ne.s32 	%p52, %r3279, 0;
	and.pred  	%p53, %p51, %p52;
	@%p53 bra 	$L__BB0_25;
$L__BB0_26:                             // %__internal_fmodf_slowpath_mod.exit.i.i2367
	setp.gt.u32 	%p54, %r18, 2139095039;
	selp.f32 	%f310, 0f7FFFFFFF, 0f4B800000, %p54;
	mul.f32 	%f311, %f709, 0f34000000;
	mul.f32 	%f710, %f310, %f311;
	bra.uni 	$L__BB0_27;
$L__BB0_17:                             // %__nv_fast_fdividef.exit.i.i.i2344
	div.approx.f32 	%f294, %f730, %f703;
	cvt.rzi.f32.f32 	%f708, %f294;
	fma.rn.f32 	%f23, %f708, 0fC0000000, %f730;
	mov.b32 	%r17, %f23;
	setp.lt.u32 	%p45, %r17, 1073741824;
	@%p45 bra 	$L__BB0_22;
// %bb.18:
	setp.lt.u32 	%p46, %r17, -2147483647;
	@%p46 bra 	$L__BB0_20;
// %bb.19:
	add.f32 	%f299, %f708, 0fBF800000;
	setp.lt.f32 	%p49, %f23, 0fC0000000;
	add.f32 	%f300, %f299, 0fBF800000;
	selp.f32 	%f708, %f300, %f299, %p49;
	bra.uni 	$L__BB0_22;
$L__BB0_20:
	add.f32 	%f708, %f708, 0f3F800000;
	setp.ltu.f32 	%p47, %f23, 0f40800000;
	@%p47 bra 	$L__BB0_22;
// %bb.21:                              // %__nv_fmaf_rn.exit.i.i.i2348
	add.f32 	%f295, %f708, 0f3F800000;
	fma.rn.f32 	%f297, %f703, 0fC0400000, %f23;
	setp.ge.f32 	%p48, %f297, 0f00000000;
	add.f32 	%f298, %f295, 0f3F800000;
	selp.f32 	%f708, %f298, %f295, %p48;
$L__BB0_22:                             // %__internal_fmodf_fastpath_quot.exit.i.i2351
	fma.rn.f32 	%f710, %f708, 0fC0000000, %f730;
$L__BB0_27:                             // %__internal_fmodf_kernel.exit.i2370
	add.f32 	%f209, %f207, %f208;
	abs.f32 	%f211, %f207;
	mov.b32 	%f262, %r218;
	abs.f32 	%f312, %f710;
	setp.gtu.f32 	%p55, %f312, 0f7F800000;
	mov.b32 	%r229, %f20;
	and.b32  	%r25, %r229, -2147483648;
	@%p55 bra 	$L__BB0_29;
// %bb.28:
	mov.b32 	%r230, %f710;
	or.b32  	%r231, %r25, %r230;
	mov.b32 	%f710, %r231;
$L__BB0_29:                             // %__nv_fmodf.exit2371
	cvt.rzi.f32.f32 	%f210, %f209;
	setp.gt.f32 	%p16, %f211, 0f4B000000;
	add.f32 	%f263, %f261, %f262;
	abs.f32 	%f265, %f261;
	add.f32 	%f313, %f710, %f710;
	mov.b32 	%r238, %f313;
	and.b32  	%r239, %r238, -2147483648;
	or.b32  	%r240, %r239, 1056964608;
	mov.b32 	%f314, %r240;
	add.f32 	%f315, %f313, %f314;
	abs.f32 	%f317, %f313;
	mul.lo.s32 	%r28, %r155, %r7;
	and.b32  	%r246, %r28, 2;
	cvt.rn.f32.s32 	%f345, %r246;
	div.approx.f32 	%f37, %f345, %f703;
	abs.f32 	%f734, %f37;
	setp.lt.f32 	%p63, %f734, 0f40000000;
	setp.gtu.f32 	%p238, %f734, 0f4B800000;
	mov.f32 	%f714, %f734;
	@%p63 bra 	$L__BB0_41;
// %bb.30:
	@%p238 bra 	$L__BB0_37;
	bra.uni 	$L__BB0_31;
$L__BB0_37:
	mov.b32 	%r30, %f734;
	and.b32  	%r247, %r30, 8388607;
	or.b32  	%r3281, %r247, 1065353216;
	mov.b32 	%f713, %r3281;
	add.s32 	%r248, %r30, -1073741824;
	and.b32  	%r3282, %r248, -8388608;
	setp.eq.s32 	%p70, %r3282, 0;
	@%p70 bra 	$L__BB0_40;
// %bb.38:                              // %__nv_fmaf_rn.exit4.i.i.i2396.preheader
	mov.f32 	%f356, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f355,%f356;
	// end inline asm
$L__BB0_39:                             // %__nv_fmaf_rn.exit4.i.i.i2396
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r249, %r3282, 192937984;
	add.s32 	%r250, %r3281, %r249;
	mov.b32 	%f357, %r250;
	mul.f32 	%f358, %f355, %f357;
	sub.f32 	%f359, %f357, %f358;
	fma.rn.f32 	%f360, %f359, %f355, %f358;
	sub.f32 	%f361, %f357, %f360;
	fma.rz.f32 	%f362, %f361, %f355, %f360;
	cvt.rzi.f32.f32 	%f363, %f362;
	sub.f32 	%f713, %f357, %f363;
	sub.s32 	%r3282, %r3282, %r249;
	mov.b32 	%r3281, %f713;
	setp.ne.s32 	%p71, %r3282, 0;
	setp.ne.s32 	%p72, %r3281, 0;
	and.pred  	%p73, %p71, %p72;
	@%p73 bra 	$L__BB0_39;
$L__BB0_40:                             // %__internal_fmodf_slowpath_mod.exit.i.i2398
	setp.gt.u32 	%p74, %r30, 2139095039;
	selp.f32 	%f364, 0f7FFFFFFF, 0f4B800000, %p74;
	mul.f32 	%f365, %f713, 0f34000000;
	mul.f32 	%f714, %f364, %f365;
	bra.uni 	$L__BB0_41;
$L__BB0_31:                             // %__nv_fast_fdividef.exit.i.i.i2375
	div.approx.f32 	%f348, %f734, %f703;
	cvt.rzi.f32.f32 	%f712, %f348;
	fma.rn.f32 	%f40, %f712, 0fC0000000, %f734;
	mov.b32 	%r29, %f40;
	setp.lt.u32 	%p65, %r29, 1073741824;
	@%p65 bra 	$L__BB0_36;
// %bb.32:
	setp.lt.u32 	%p66, %r29, -2147483647;
	@%p66 bra 	$L__BB0_34;
// %bb.33:
	add.f32 	%f353, %f712, 0fBF800000;
	setp.lt.f32 	%p69, %f40, 0fC0000000;
	add.f32 	%f354, %f353, 0fBF800000;
	selp.f32 	%f712, %f354, %f353, %p69;
	bra.uni 	$L__BB0_36;
$L__BB0_34:
	add.f32 	%f712, %f712, 0f3F800000;
	setp.ltu.f32 	%p67, %f40, 0f40800000;
	@%p67 bra 	$L__BB0_36;
// %bb.35:                              // %__nv_fmaf_rn.exit.i.i.i2379
	add.f32 	%f349, %f712, 0f3F800000;
	fma.rn.f32 	%f351, %f703, 0fC0400000, %f40;
	setp.ge.f32 	%p68, %f351, 0f00000000;
	add.f32 	%f352, %f349, 0f3F800000;
	selp.f32 	%f712, %f352, %f349, %p68;
$L__BB0_36:                             // %__internal_fmodf_fastpath_quot.exit.i.i2382
	fma.rn.f32 	%f714, %f712, 0fC0000000, %f734;
$L__BB0_41:                             // %__internal_fmodf_kernel.exit.i2401
	selp.f32 	%f212, %f207, %f210, %p16;
	cvt.rzi.f32.f32 	%f213, %f207;
	setp.lt.f32 	%p17, %f211, 0f3F000000;
	cvt.rzi.f32.f32 	%f264, %f263;
	setp.gt.f32 	%p36, %f265, 0f4B000000;
	cvt.rzi.f32.f32 	%f316, %f315;
	setp.gt.f32 	%p56, %f317, 0f4B000000;
	mov.f32 	%f230, 0f00000000;
	abs.f32 	%f366, %f714;
	setp.gtu.f32 	%p75, %f366, 0f7F800000;
	mov.b32 	%r251, %f37;
	and.b32  	%r37, %r251, -2147483648;
	@%p75 bra 	$L__BB0_43;
// %bb.42:
	mov.b32 	%r252, %f714;
	or.b32  	%r253, %r37, %r252;
	mov.b32 	%f714, %r253;
$L__BB0_43:                             // %__nv_fmodf.exit2402
	selp.f32 	%f214, %f213, %f212, %p17;
	selp.f32 	%f266, %f261, %f264, %p36;
	cvt.rzi.f32.f32 	%f267, %f261;
	setp.lt.f32 	%p37, %f265, 0f3F000000;
	selp.f32 	%f318, %f313, %f316, %p56;
	cvt.rzi.f32.f32 	%f319, %f313;
	setp.lt.f32 	%p57, %f317, 0f3F000000;
	add.f32 	%f367, %f714, %f714;
	mov.b32 	%r254, %f367;
	and.b32  	%r255, %r254, -2147483648;
	or.b32  	%r256, %r255, 1056964608;
	mov.b32 	%f368, %r256;
	add.f32 	%f369, %f367, %f368;
	cvt.rzi.f32.f32 	%f370, %f369;
	abs.f32 	%f371, %f367;
	setp.gt.f32 	%p76, %f371, 0f4B000000;
	selp.f32 	%f372, %f367, %f370, %p76;
	cvt.rzi.f32.f32 	%f373, %f367;
	setp.lt.f32 	%p77, %f371, 0f3F000000;
	selp.f32 	%f374, %f373, %f372, %p77;
	cvt.rzi.s32.f32 	%r257, %f374;
	fma.rn.f32 	%f375, %f374, 0fBF000000, %f714;
	mul.f32 	%f376, %f375, %f375;
	fma.rn.f32 	%f377, %f376, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f378, %f376, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f379, %f377, %f376, 0fC0A55DF6;
	fma.rn.f32 	%f380, %f378, %f376, 0f4081E0CF;
	fma.rn.f32 	%f381, %f376, %f375, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f376, 0fC09DE9E6;
	fma.rn.f32 	%f383, %f379, %f381, 0f00000000;
	fma.rn.f32 	%f384, %f382, %f376, 0f3F800000;
	fma.rn.f32 	%f385, %f375, 0f40490FDB, %f383;
	and.b32  	%r258, %r257, 1;
	setp.eq.b32 	%p78, %r258, 1;
	selp.f32 	%f386, %f384, %f385, %p78;
	selp.f32 	%f387, %f385, %f384, %p78;
	and.b32  	%r259, %r257, 2;
	setp.eq.s32 	%p79, %r259, 0;
	neg.f32 	%f388, %f386;
	selp.f32 	%f389, %f386, %f388, %p79;
	add.s32 	%r260, %r257, 1;
	and.b32  	%r261, %r260, 2;
	setp.eq.s32 	%p80, %r261, 0;
	sub.f32 	%f391, %f230, %f387;
	cvt.rzi.f32.f32 	%f393, %f714;
	setp.eq.f32 	%p81, %f393, %f714;
	mul.f32 	%f394, %f714, 0f00000000;
	selp.f32 	%f721, %f394, %f389, %p81;
	abs.f32 	%f395, %f714;
	add.s32 	%r262, %r28, %r7;
	and.b32  	%r263, %r262, 3;
	cvt.rn.f32.s32 	%f397, %r263;
	div.approx.f32 	%f56, %f397, %f703;
	abs.f32 	%f738, %f56;
	setp.lt.f32 	%p83, %f738, 0f40000000;
	setp.gtu.f32 	%p239, %f738, 0f4B800000;
	mov.f32 	%f718, %f738;
	@%p83 bra 	$L__BB0_55;
// %bb.44:
	@%p239 bra 	$L__BB0_51;
	bra.uni 	$L__BB0_45;
$L__BB0_51:
	mov.b32 	%r39, %f738;
	and.b32  	%r264, %r39, 8388607;
	or.b32  	%r3283, %r264, 1065353216;
	mov.b32 	%f717, %r3283;
	add.s32 	%r265, %r39, -1073741824;
	and.b32  	%r3284, %r265, -8388608;
	setp.eq.s32 	%p90, %r3284, 0;
	@%p90 bra 	$L__BB0_54;
// %bb.52:                              // %__nv_fmaf_rn.exit4.i.i.i2427.preheader
	mov.f32 	%f408, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f407,%f408;
	// end inline asm
$L__BB0_53:                             // %__nv_fmaf_rn.exit4.i.i.i2427
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r266, %r3284, 192937984;
	add.s32 	%r267, %r3283, %r266;
	mov.b32 	%f409, %r267;
	mul.f32 	%f410, %f407, %f409;
	sub.f32 	%f411, %f409, %f410;
	fma.rn.f32 	%f412, %f411, %f407, %f410;
	sub.f32 	%f413, %f409, %f412;
	fma.rz.f32 	%f414, %f413, %f407, %f412;
	cvt.rzi.f32.f32 	%f415, %f414;
	sub.f32 	%f717, %f409, %f415;
	sub.s32 	%r3284, %r3284, %r266;
	mov.b32 	%r3283, %f717;
	setp.ne.s32 	%p91, %r3284, 0;
	setp.ne.s32 	%p92, %r3283, 0;
	and.pred  	%p93, %p91, %p92;
	@%p93 bra 	$L__BB0_53;
$L__BB0_54:                             // %__internal_fmodf_slowpath_mod.exit.i.i2429
	setp.gt.u32 	%p94, %r39, 2139095039;
	selp.f32 	%f416, 0f7FFFFFFF, 0f4B800000, %p94;
	mul.f32 	%f417, %f717, 0f34000000;
	mul.f32 	%f718, %f416, %f417;
	bra.uni 	$L__BB0_55;
$L__BB0_45:                             // %__nv_fast_fdividef.exit.i.i.i2406
	div.approx.f32 	%f400, %f738, %f703;
	cvt.rzi.f32.f32 	%f716, %f400;
	fma.rn.f32 	%f59, %f716, 0fC0000000, %f738;
	mov.b32 	%r38, %f59;
	setp.lt.u32 	%p85, %r38, 1073741824;
	@%p85 bra 	$L__BB0_50;
// %bb.46:
	setp.lt.u32 	%p86, %r38, -2147483647;
	@%p86 bra 	$L__BB0_48;
// %bb.47:
	add.f32 	%f405, %f716, 0fBF800000;
	setp.lt.f32 	%p89, %f59, 0fC0000000;
	add.f32 	%f406, %f405, 0fBF800000;
	selp.f32 	%f716, %f406, %f405, %p89;
	bra.uni 	$L__BB0_50;
$L__BB0_48:
	add.f32 	%f716, %f716, 0f3F800000;
	setp.ltu.f32 	%p87, %f59, 0f40800000;
	@%p87 bra 	$L__BB0_50;
// %bb.49:                              // %__nv_fmaf_rn.exit.i.i.i2410
	add.f32 	%f401, %f716, 0f3F800000;
	fma.rn.f32 	%f403, %f703, 0fC0400000, %f59;
	setp.ge.f32 	%p88, %f403, 0f00000000;
	add.f32 	%f404, %f401, 0f3F800000;
	selp.f32 	%f716, %f404, %f401, %p88;
$L__BB0_50:                             // %__internal_fmodf_fastpath_quot.exit.i.i2413
	fma.rn.f32 	%f718, %f716, 0fC0000000, %f738;
$L__BB0_55:                             // %__internal_fmodf_kernel.exit.i2432
	fma.rn.f32 	%f215, %f214, 0fBF000000, %f746;
	selp.f32 	%f268, %f267, %f266, %p37;
	selp.f32 	%f320, %f319, %f318, %p57;
	selp.f32 	%f392, %f387, %f391, %p80;
	setp.gt.f32 	%p82, %f395, 0f4B800000;
	add.f32 	%f396, %f721, 0f3F800000;
	abs.f32 	%f418, %f718;
	setp.gtu.f32 	%p95, %f418, 0f7F800000;
	mov.b32 	%r268, %f56;
	and.b32  	%r46, %r268, -2147483648;
	@%p95 bra 	$L__BB0_57;
// %bb.56:
	mov.b32 	%r269, %f718;
	or.b32  	%r270, %r46, %r269;
	mov.b32 	%f718, %r270;
$L__BB0_57:                             // %__nv_fmodf.exit2433
	mul.f32 	%f216, %f215, %f215;
	fma.rn.f32 	%f269, %f268, 0fBF000000, %f706;
	fma.rn.f32 	%f321, %f320, 0fBF000000, %f710;
	selp.f32 	%f55, %f396, %f392, %p82;
	add.f32 	%f419, %f718, %f718;
	mov.b32 	%r271, %f419;
	and.b32  	%r272, %r271, -2147483648;
	or.b32  	%r273, %r272, 1056964608;
	mov.b32 	%f420, %r273;
	add.f32 	%f421, %f419, %f420;
	cvt.rzi.f32.f32 	%f422, %f421;
	abs.f32 	%f423, %f419;
	setp.gt.f32 	%p96, %f423, 0f4B000000;
	selp.f32 	%f424, %f419, %f422, %p96;
	cvt.rzi.f32.f32 	%f425, %f419;
	setp.lt.f32 	%p97, %f423, 0f3F000000;
	selp.f32 	%f426, %f425, %f424, %p97;
	cvt.rzi.s32.f32 	%r274, %f426;
	fma.rn.f32 	%f427, %f426, 0fBF000000, %f718;
	mul.f32 	%f428, %f427, %f427;
	fma.rn.f32 	%f429, %f428, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f430, %f428, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f431, %f429, %f428, 0fC0A55DF6;
	fma.rn.f32 	%f432, %f430, %f428, 0f4081E0CF;
	fma.rn.f32 	%f433, %f428, %f427, 0f00000000;
	fma.rn.f32 	%f434, %f432, %f428, 0fC09DE9E6;
	fma.rn.f32 	%f435, %f431, %f433, 0f00000000;
	fma.rn.f32 	%f436, %f434, %f428, 0f3F800000;
	fma.rn.f32 	%f437, %f427, 0f40490FDB, %f435;
	and.b32  	%r275, %r274, 1;
	setp.eq.b32 	%p98, %r275, 1;
	selp.f32 	%f438, %f436, %f437, %p98;
	selp.f32 	%f439, %f437, %f436, %p98;
	and.b32  	%r276, %r274, 2;
	setp.eq.s32 	%p99, %r276, 0;
	neg.f32 	%f440, %f438;
	selp.f32 	%f441, %f438, %f440, %p99;
	add.s32 	%r277, %r274, 1;
	and.b32  	%r278, %r277, 2;
	setp.eq.s32 	%p100, %r278, 0;
	sub.f32 	%f443, %f230, %f439;
	selp.f32 	%f444, %f439, %f443, %p100;
	cvt.rzi.f32.f32 	%f445, %f718;
	setp.eq.f32 	%p101, %f445, %f718;
	mul.f32 	%f446, %f718, 0f00000000;
	selp.f32 	%f723, %f446, %f441, %p101;
	abs.f32 	%f447, %f718;
	setp.gt.f32 	%p102, %f447, 0f4B800000;
	add.f32 	%f448, %f723, 0f3F800000;
	selp.f32 	%f74, %f448, %f444, %p102;
	and.b32  	%r47, %r5, 2;
	setp.eq.s32 	%p103, %r47, 0;
	mov.f32 	%f720, %f55;
	mov.f32 	%f722, %f74;
	@%p103 bra 	$L__BB0_59;
// %bb.58:                              // %L399
	neg.f32 	%f722, %f723;
	neg.f32 	%f720, %f721;
	mov.f32 	%f721, %f55;
	mov.f32 	%f723, %f74;
$L__BB0_59:                             // %L401
	fma.rn.f32 	%f217, %f216, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f218, %f216, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f270, %f269, %f269;
	mul.f32 	%f322, %f321, %f321;
	@%p3 bra 	$L__BB0_160;
// %bb.60:
	@%p235 bra 	$L__BB0_156;
	bra.uni 	$L__BB0_61;
$L__BB0_156:
	mov.b32 	%r158, %f750;
	and.b32  	%r285, %r158, 8388607;
	or.b32  	%r3313, %r285, 1065353216;
	mov.b32 	%f749, %r3313;
	add.s32 	%r286, %r158, -1073741824;
	and.b32  	%r3314, %r286, -8388608;
	setp.eq.s32 	%p111, %r3314, 0;
	@%p111 bra 	$L__BB0_159;
// %bb.157:                             // %__nv_fmaf_rn.exit4.i.i.i2458.preheader
	mov.f32 	%f458, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f457,%f458;
	// end inline asm
$L__BB0_158:                            // %__nv_fmaf_rn.exit4.i.i.i2458
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r287, %r3314, 192937984;
	add.s32 	%r288, %r3313, %r287;
	mov.b32 	%f459, %r288;
	mul.f32 	%f460, %f457, %f459;
	sub.f32 	%f461, %f459, %f460;
	fma.rn.f32 	%f462, %f461, %f457, %f460;
	sub.f32 	%f463, %f459, %f462;
	fma.rz.f32 	%f464, %f463, %f457, %f462;
	cvt.rzi.f32.f32 	%f465, %f464;
	sub.f32 	%f749, %f459, %f465;
	sub.s32 	%r3314, %r3314, %r287;
	mov.b32 	%r3313, %f749;
	setp.ne.s32 	%p112, %r3314, 0;
	setp.ne.s32 	%p113, %r3313, 0;
	and.pred  	%p114, %p112, %p113;
	@%p114 bra 	$L__BB0_158;
$L__BB0_159:                            // %__internal_fmodf_slowpath_mod.exit.i.i2460
	setp.gt.u32 	%p115, %r158, 2139095039;
	selp.f32 	%f466, 0f7FFFFFFF, 0f4B800000, %p115;
	mul.f32 	%f467, %f749, 0f34000000;
	mul.f32 	%f750, %f466, %f467;
	bra.uni 	$L__BB0_160;
$L__BB0_61:                             // %__nv_fast_fdividef.exit.i.i.i2437
	div.approx.f32 	%f450, %f750, %f703;
	cvt.rzi.f32.f32 	%f748, %f450;
	fma.rn.f32 	%f171, %f748, 0fC0000000, %f750;
	mov.b32 	%r157, %f171;
	setp.lt.u32 	%p106, %r157, 1073741824;
	@%p106 bra 	$L__BB0_155;
// %bb.62:
	setp.lt.u32 	%p107, %r157, -2147483647;
	@%p107 bra 	$L__BB0_153;
// %bb.63:
	add.f32 	%f455, %f748, 0fBF800000;
	setp.lt.f32 	%p110, %f171, 0fC0000000;
	add.f32 	%f456, %f455, 0fBF800000;
	selp.f32 	%f748, %f456, %f455, %p110;
	bra.uni 	$L__BB0_155;
$L__BB0_153:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p108, %f171, 0f40800000;
	@%p108 bra 	$L__BB0_155;
// %bb.154:                             // %__nv_fmaf_rn.exit.i.i.i2441
	add.f32 	%f451, %f748, 0f3F800000;
	fma.rn.f32 	%f453, %f703, 0fC0400000, %f171;
	setp.ge.f32 	%p109, %f453, 0f00000000;
	add.f32 	%f454, %f451, 0f3F800000;
	selp.f32 	%f748, %f454, %f451, %p109;
$L__BB0_155:                            // %__internal_fmodf_fastpath_quot.exit.i.i2444
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_160:                            // %__internal_fmodf_kernel.exit.i2463
	cvt.rzi.s32.f32 	%r203, %f214;
	fma.rn.f32 	%f219, %f217, %f216, 0fC0A55DF6;
	fma.rn.f32 	%f220, %f218, %f216, 0f4081E0CF;
	fma.rn.f32 	%f221, %f216, %f215, 0f00000000;
	fma.rn.f32 	%f271, %f270, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f272, %f270, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f323, %f322, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f324, %f322, 0f3E684E12, 0fBFAAD2E0;
	abs.f32 	%f468, %f750;
	setp.gtu.f32 	%p116, %f468, 0f7F800000;
	@%p116 bra 	$L__BB0_162;
// %bb.161:
	mov.b32 	%r289, %f750;
	or.b32  	%r290, %r152, %r289;
	mov.b32 	%f750, %r290;
$L__BB0_162:                            // %__nv_fmodf.exit2464
	fma.rn.f32 	%f222, %f220, %f216, 0fC09DE9E6;
	fma.rn.f32 	%f223, %f219, %f221, 0f00000000;
	and.b32  	%r204, %r203, 1;
	cvt.rzi.s32.f32 	%r219, %f268;
	fma.rn.f32 	%f273, %f271, %f270, 0fC0A55DF6;
	fma.rn.f32 	%f274, %f272, %f270, 0f4081E0CF;
	fma.rn.f32 	%f275, %f270, %f269, 0f00000000;
	cvt.rzi.s32.f32 	%r241, %f320;
	fma.rn.f32 	%f325, %f323, %f322, 0fC0A55DF6;
	fma.rn.f32 	%f326, %f324, %f322, 0f4081E0CF;
	fma.rn.f32 	%f327, %f322, %f321, 0f00000000;
	add.f32 	%f469, %f750, %f750;
	mov.b32 	%r297, %f469;
	and.b32  	%r298, %r297, -2147483648;
	or.b32  	%r299, %r298, 1056964608;
	mov.b32 	%f470, %r299;
	add.f32 	%f471, %f469, %f470;
	cvt.rzi.f32.f32 	%f472, %f471;
	abs.f32 	%f473, %f469;
	setp.gt.f32 	%p118, %f473, 0f4B000000;
	selp.f32 	%f474, %f469, %f472, %p118;
	cvt.rzi.f32.f32 	%f475, %f469;
	setp.lt.f32 	%p119, %f473, 0f3F000000;
	selp.f32 	%f476, %f475, %f474, %p119;
	cvt.rzi.s32.f32 	%r300, %f476;
	fma.rn.f32 	%f477, %f476, 0fBF000000, %f750;
	mul.f32 	%f478, %f477, %f477;
	fma.rn.f32 	%f479, %f478, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f480, %f478, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f481, %f479, %f478, 0fC0A55DF6;
	fma.rn.f32 	%f482, %f480, %f478, 0f4081E0CF;
	fma.rn.f32 	%f483, %f478, %f477, 0f00000000;
	fma.rn.f32 	%f484, %f482, %f478, 0fC09DE9E6;
	fma.rn.f32 	%f485, %f481, %f483, 0f00000000;
	and.b32  	%r301, %r300, 1;
	@%p23 bra 	$L__BB0_75;
// %bb.64:
	@%p236 bra 	$L__BB0_71;
	bra.uni 	$L__BB0_65;
$L__BB0_71:
	mov.b32 	%r51, %f726;
	and.b32  	%r305, %r51, 8388607;
	or.b32  	%r3285, %r305, 1065353216;
	mov.b32 	%f725, %r3285;
	add.s32 	%r306, %r51, -1073741824;
	and.b32  	%r3286, %r306, -8388608;
	setp.eq.s32 	%p131, %r3286, 0;
	@%p131 bra 	$L__BB0_74;
// %bb.72:                              // %__nv_fmaf_rn.exit4.i.i.i2489.preheader
	mov.f32 	%f510, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f509,%f510;
	// end inline asm
$L__BB0_73:                             // %__nv_fmaf_rn.exit4.i.i.i2489
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r307, %r3286, 192937984;
	add.s32 	%r308, %r3285, %r307;
	mov.b32 	%f511, %r308;
	mul.f32 	%f512, %f509, %f511;
	sub.f32 	%f513, %f511, %f512;
	fma.rn.f32 	%f514, %f513, %f509, %f512;
	sub.f32 	%f515, %f511, %f514;
	fma.rz.f32 	%f516, %f515, %f509, %f514;
	cvt.rzi.f32.f32 	%f517, %f516;
	sub.f32 	%f725, %f511, %f517;
	sub.s32 	%r3286, %r3286, %r307;
	mov.b32 	%r3285, %f725;
	setp.ne.s32 	%p132, %r3286, 0;
	setp.ne.s32 	%p133, %r3285, 0;
	and.pred  	%p134, %p132, %p133;
	@%p134 bra 	$L__BB0_73;
$L__BB0_74:                             // %__internal_fmodf_slowpath_mod.exit.i.i2491
	setp.gt.u32 	%p135, %r51, 2139095039;
	selp.f32 	%f518, 0f7FFFFFFF, 0f4B800000, %p135;
	mul.f32 	%f519, %f725, 0f34000000;
	mul.f32 	%f726, %f518, %f519;
	bra.uni 	$L__BB0_75;
$L__BB0_65:                             // %__nv_fast_fdividef.exit.i.i.i2468
	div.approx.f32 	%f502, %f726, %f703;
	cvt.rzi.f32.f32 	%f724, %f502;
	fma.rn.f32 	%f82, %f724, 0fC0000000, %f726;
	mov.b32 	%r50, %f82;
	setp.lt.u32 	%p126, %r50, 1073741824;
	@%p126 bra 	$L__BB0_70;
// %bb.66:
	setp.lt.u32 	%p127, %r50, -2147483647;
	@%p127 bra 	$L__BB0_68;
// %bb.67:
	add.f32 	%f507, %f724, 0fBF800000;
	setp.lt.f32 	%p130, %f82, 0fC0000000;
	add.f32 	%f508, %f507, 0fBF800000;
	selp.f32 	%f724, %f508, %f507, %p130;
	bra.uni 	$L__BB0_70;
$L__BB0_68:
	add.f32 	%f724, %f724, 0f3F800000;
	setp.ltu.f32 	%p128, %f82, 0f40800000;
	@%p128 bra 	$L__BB0_70;
// %bb.69:                              // %__nv_fmaf_rn.exit.i.i.i2472
	add.f32 	%f503, %f724, 0f3F800000;
	fma.rn.f32 	%f505, %f703, 0fC0400000, %f82;
	setp.ge.f32 	%p129, %f505, 0f00000000;
	add.f32 	%f506, %f503, 0f3F800000;
	selp.f32 	%f724, %f506, %f503, %p129;
$L__BB0_70:                             // %__internal_fmodf_fastpath_quot.exit.i.i2475
	fma.rn.f32 	%f726, %f724, 0fC0000000, %f726;
$L__BB0_75:                             // %__internal_fmodf_kernel.exit.i2494
	fma.rn.f32 	%f224, %f222, %f216, 0f3F800000;
	fma.rn.f32 	%f225, %f215, 0f40490FDB, %f223;
	setp.eq.b32 	%p18, %r204, 1;
	fma.rn.f32 	%f276, %f274, %f270, 0fC09DE9E6;
	fma.rn.f32 	%f277, %f273, %f275, 0f00000000;
	and.b32  	%r220, %r219, 1;
	fma.rn.f32 	%f328, %f326, %f322, 0fC09DE9E6;
	fma.rn.f32 	%f329, %f325, %f327, 0f00000000;
	and.b32  	%r242, %r241, 1;
	fma.rn.f32 	%f486, %f484, %f478, 0f3F800000;
	fma.rn.f32 	%f487, %f477, 0f40490FDB, %f485;
	setp.eq.b32 	%p120, %r301, 1;
	abs.f32 	%f520, %f726;
	setp.gtu.f32 	%p136, %f520, 0f7F800000;
	@%p136 bra 	$L__BB0_77;
// %bb.76:
	mov.b32 	%r309, %f726;
	or.b32  	%r310, %r16, %r309;
	mov.b32 	%f726, %r310;
$L__BB0_77:                             // %__nv_fmodf.exit2495
	selp.f32 	%f226, %f224, %f225, %p18;
	and.b32  	%r205, %r203, 2;
	fma.rn.f32 	%f278, %f276, %f270, 0f3F800000;
	fma.rn.f32 	%f279, %f269, 0f40490FDB, %f277;
	setp.eq.b32 	%p38, %r220, 1;
	fma.rn.f32 	%f330, %f328, %f322, 0f3F800000;
	fma.rn.f32 	%f331, %f321, 0f40490FDB, %f329;
	setp.eq.b32 	%p58, %r242, 1;
	selp.f32 	%f488, %f486, %f487, %p120;
	and.b32  	%r302, %r300, 2;
	add.f32 	%f521, %f726, %f726;
	mov.b32 	%r311, %f521;
	and.b32  	%r312, %r311, -2147483648;
	or.b32  	%r313, %r312, 1056964608;
	mov.b32 	%f522, %r313;
	add.f32 	%f523, %f521, %f522;
	cvt.rzi.f32.f32 	%f524, %f523;
	abs.f32 	%f525, %f521;
	setp.gt.f32 	%p138, %f525, 0f4B000000;
	selp.f32 	%f526, %f521, %f524, %p138;
	cvt.rzi.f32.f32 	%f527, %f521;
	setp.lt.f32 	%p139, %f525, 0f3F000000;
	selp.f32 	%f528, %f527, %f526, %p139;
	cvt.rzi.s32.f32 	%r314, %f528;
	fma.rn.f32 	%f529, %f528, 0fBF000000, %f726;
	mul.f32 	%f530, %f529, %f529;
	fma.rn.f32 	%f531, %f530, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f532, %f530, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f533, %f531, %f530, 0fC0A55DF6;
	fma.rn.f32 	%f534, %f532, %f530, 0f4081E0CF;
	fma.rn.f32 	%f535, %f530, %f529, 0f00000000;
	fma.rn.f32 	%f536, %f534, %f530, 0fC09DE9E6;
	fma.rn.f32 	%f537, %f533, %f535, 0f00000000;
	fma.rn.f32 	%f538, %f536, %f530, 0f3F800000;
	fma.rn.f32 	%f539, %f529, 0f40490FDB, %f537;
	and.b32  	%r315, %r314, 1;
	setp.eq.b32 	%p140, %r315, 1;
	@%p43 bra 	$L__BB0_89;
// %bb.78:
	@%p237 bra 	$L__BB0_85;
	bra.uni 	$L__BB0_79;
$L__BB0_85:
	mov.b32 	%r59, %f730;
	and.b32  	%r319, %r59, 8388607;
	or.b32  	%r3287, %r319, 1065353216;
	mov.b32 	%f729, %r3287;
	add.s32 	%r320, %r59, -1073741824;
	and.b32  	%r3288, %r320, -8388608;
	setp.eq.s32 	%p151, %r3288, 0;
	@%p151 bra 	$L__BB0_88;
// %bb.86:                              // %__nv_fmaf_rn.exit4.i.i.i2520.preheader
	mov.f32 	%f560, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f559,%f560;
	// end inline asm
$L__BB0_87:                             // %__nv_fmaf_rn.exit4.i.i.i2520
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r321, %r3288, 192937984;
	add.s32 	%r322, %r3287, %r321;
	mov.b32 	%f561, %r322;
	mul.f32 	%f562, %f559, %f561;
	sub.f32 	%f563, %f561, %f562;
	fma.rn.f32 	%f564, %f563, %f559, %f562;
	sub.f32 	%f565, %f561, %f564;
	fma.rz.f32 	%f566, %f565, %f559, %f564;
	cvt.rzi.f32.f32 	%f567, %f566;
	sub.f32 	%f729, %f561, %f567;
	sub.s32 	%r3288, %r3288, %r321;
	mov.b32 	%r3287, %f729;
	setp.ne.s32 	%p152, %r3288, 0;
	setp.ne.s32 	%p153, %r3287, 0;
	and.pred  	%p154, %p152, %p153;
	@%p154 bra 	$L__BB0_87;
$L__BB0_88:                             // %__internal_fmodf_slowpath_mod.exit.i.i2522
	setp.gt.u32 	%p155, %r59, 2139095039;
	selp.f32 	%f568, 0f7FFFFFFF, 0f4B800000, %p155;
	mul.f32 	%f569, %f729, 0f34000000;
	mul.f32 	%f730, %f568, %f569;
	bra.uni 	$L__BB0_89;
$L__BB0_79:                             // %__nv_fast_fdividef.exit.i.i.i2499
	div.approx.f32 	%f552, %f730, %f703;
	cvt.rzi.f32.f32 	%f728, %f552;
	fma.rn.f32 	%f99, %f728, 0fC0000000, %f730;
	mov.b32 	%r58, %f99;
	setp.lt.u32 	%p146, %r58, 1073741824;
	@%p146 bra 	$L__BB0_84;
// %bb.80:
	setp.lt.u32 	%p147, %r58, -2147483647;
	@%p147 bra 	$L__BB0_82;
// %bb.81:
	add.f32 	%f557, %f728, 0fBF800000;
	setp.lt.f32 	%p150, %f99, 0fC0000000;
	add.f32 	%f558, %f557, 0fBF800000;
	selp.f32 	%f728, %f558, %f557, %p150;
	bra.uni 	$L__BB0_84;
$L__BB0_82:
	add.f32 	%f728, %f728, 0f3F800000;
	setp.ltu.f32 	%p148, %f99, 0f40800000;
	@%p148 bra 	$L__BB0_84;
// %bb.83:                              // %__nv_fmaf_rn.exit.i.i.i2503
	add.f32 	%f553, %f728, 0f3F800000;
	fma.rn.f32 	%f555, %f703, 0fC0400000, %f99;
	setp.ge.f32 	%p149, %f555, 0f00000000;
	add.f32 	%f556, %f553, 0f3F800000;
	selp.f32 	%f728, %f556, %f553, %p149;
$L__BB0_84:                             // %__internal_fmodf_fastpath_quot.exit.i.i2506
	fma.rn.f32 	%f730, %f728, 0fC0000000, %f730;
$L__BB0_89:                             // %__internal_fmodf_kernel.exit.i2525
	setp.eq.s32 	%p19, %r205, 0;
	neg.f32 	%f228, %f226;
	add.s32 	%r206, %r203, 1;
	cvt.rzi.f32.f32 	%f233, %f746;
	selp.f32 	%f280, %f278, %f279, %p38;
	and.b32  	%r221, %r219, 2;
	selp.f32 	%f332, %f330, %f331, %p58;
	and.b32  	%r243, %r241, 2;
	setp.eq.s32 	%p121, %r302, 0;
	neg.f32 	%f490, %f488;
	add.s32 	%r303, %r300, 1;
	cvt.rzi.f32.f32 	%f495, %f750;
	selp.f32 	%f540, %f538, %f539, %p140;
	and.b32  	%r316, %r314, 2;
	abs.f32 	%f570, %f730;
	setp.gtu.f32 	%p156, %f570, 0f7F800000;
	@%p156 bra 	$L__BB0_91;
// %bb.90:
	mov.b32 	%r323, %f730;
	or.b32  	%r324, %r25, %r323;
	mov.b32 	%f730, %r324;
$L__BB0_91:                             // %__nv_fmodf.exit2526
	selp.f32 	%f227, %f225, %f224, %p18;
	selp.f32 	%f229, %f226, %f228, %p19;
	and.b32  	%r207, %r206, 2;
	setp.eq.f32 	%p21, %f233, %f746;
	mul.f32 	%f234, %f746, 0f00000000;
	setp.eq.s32 	%p39, %r221, 0;
	neg.f32 	%f282, %f280;
	add.s32 	%r222, %r219, 1;
	cvt.rzi.f32.f32 	%f287, %f706;
	setp.eq.s32 	%p59, %r243, 0;
	neg.f32 	%f334, %f332;
	add.s32 	%r244, %r241, 1;
	cvt.rzi.f32.f32 	%f339, %f710;
	selp.f32 	%f489, %f487, %f486, %p120;
	selp.f32 	%f491, %f488, %f490, %p121;
	and.b32  	%r304, %r303, 2;
	setp.eq.f32 	%p123, %f495, %f750;
	mul.f32 	%f496, %f750, 0f00000000;
	setp.eq.s32 	%p141, %r316, 0;
	neg.f32 	%f542, %f540;
	add.s32 	%r317, %r314, 1;
	cvt.rzi.f32.f32 	%f547, %f726;
	add.f32 	%f571, %f730, %f730;
	mov.b32 	%r331, %f571;
	and.b32  	%r332, %r331, -2147483648;
	or.b32  	%r333, %r332, 1056964608;
	mov.b32 	%f572, %r333;
	add.f32 	%f573, %f571, %f572;
	cvt.rzi.f32.f32 	%f574, %f573;
	abs.f32 	%f575, %f571;
	setp.gt.f32 	%p158, %f575, 0f4B000000;
	selp.f32 	%f576, %f571, %f574, %p158;
	cvt.rzi.f32.f32 	%f577, %f571;
	setp.lt.f32 	%p159, %f575, 0f3F000000;
	selp.f32 	%f578, %f577, %f576, %p159;
	cvt.rzi.s32.f32 	%r334, %f578;
	fma.rn.f32 	%f579, %f578, 0fBF000000, %f730;
	mul.f32 	%f580, %f579, %f579;
	fma.rn.f32 	%f581, %f580, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f582, %f580, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f583, %f581, %f580, 0fC0A55DF6;
	fma.rn.f32 	%f584, %f582, %f580, 0f4081E0CF;
	fma.rn.f32 	%f585, %f580, %f579, 0f00000000;
	fma.rn.f32 	%f586, %f584, %f580, 0fC09DE9E6;
	fma.rn.f32 	%f587, %f583, %f585, 0f00000000;
	fma.rn.f32 	%f588, %f586, %f580, 0f3F800000;
	fma.rn.f32 	%f589, %f579, 0f40490FDB, %f587;
	and.b32  	%r335, %r334, 1;
	setp.eq.b32 	%p160, %r335, 1;
	selp.f32 	%f590, %f588, %f589, %p160;
	and.b32  	%r336, %r334, 2;
	setp.eq.s32 	%p161, %r336, 0;
	neg.f32 	%f592, %f590;
	add.s32 	%r337, %r334, 1;
	cvt.rzi.f32.f32 	%f597, %f730;
	@%p63 bra 	$L__BB0_103;
// %bb.92:
	@%p238 bra 	$L__BB0_99;
	bra.uni 	$L__BB0_93;
$L__BB0_99:
	mov.b32 	%r69, %f734;
	and.b32  	%r339, %r69, 8388607;
	or.b32  	%r3289, %r339, 1065353216;
	mov.b32 	%f733, %r3289;
	add.s32 	%r340, %r69, -1073741824;
	and.b32  	%r3290, %r340, -8388608;
	setp.eq.s32 	%p171, %r3290, 0;
	@%p171 bra 	$L__BB0_102;
// %bb.100:                             // %__nv_fmaf_rn.exit4.i.i.i2551.preheader
	mov.f32 	%f612, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f611,%f612;
	// end inline asm
$L__BB0_101:                            // %__nv_fmaf_rn.exit4.i.i.i2551
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r341, %r3290, 192937984;
	add.s32 	%r342, %r3289, %r341;
	mov.b32 	%f613, %r342;
	mul.f32 	%f614, %f611, %f613;
	sub.f32 	%f615, %f613, %f614;
	fma.rn.f32 	%f616, %f615, %f611, %f614;
	sub.f32 	%f617, %f613, %f616;
	fma.rz.f32 	%f618, %f617, %f611, %f616;
	cvt.rzi.f32.f32 	%f619, %f618;
	sub.f32 	%f733, %f613, %f619;
	sub.s32 	%r3290, %r3290, %r341;
	mov.b32 	%r3289, %f733;
	setp.ne.s32 	%p172, %r3290, 0;
	setp.ne.s32 	%p173, %r3289, 0;
	and.pred  	%p174, %p172, %p173;
	@%p174 bra 	$L__BB0_101;
$L__BB0_102:                            // %__internal_fmodf_slowpath_mod.exit.i.i2553
	setp.gt.u32 	%p175, %r69, 2139095039;
	selp.f32 	%f620, 0f7FFFFFFF, 0f4B800000, %p175;
	mul.f32 	%f621, %f733, 0f34000000;
	mul.f32 	%f734, %f620, %f621;
	bra.uni 	$L__BB0_103;
$L__BB0_93:                             // %__nv_fast_fdividef.exit.i.i.i2530
	div.approx.f32 	%f604, %f734, %f703;
	cvt.rzi.f32.f32 	%f732, %f604;
	fma.rn.f32 	%f114, %f732, 0fC0000000, %f734;
	mov.b32 	%r68, %f114;
	setp.lt.u32 	%p166, %r68, 1073741824;
	@%p166 bra 	$L__BB0_98;
// %bb.94:
	setp.lt.u32 	%p167, %r68, -2147483647;
	@%p167 bra 	$L__BB0_96;
// %bb.95:
	add.f32 	%f609, %f732, 0fBF800000;
	setp.lt.f32 	%p170, %f114, 0fC0000000;
	add.f32 	%f610, %f609, 0fBF800000;
	selp.f32 	%f732, %f610, %f609, %p170;
	bra.uni 	$L__BB0_98;
$L__BB0_96:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p168, %f114, 0f40800000;
	@%p168 bra 	$L__BB0_98;
// %bb.97:                              // %__nv_fmaf_rn.exit.i.i.i2534
	add.f32 	%f605, %f732, 0f3F800000;
	fma.rn.f32 	%f607, %f703, 0fC0400000, %f114;
	setp.ge.f32 	%p169, %f607, 0f00000000;
	add.f32 	%f608, %f605, 0f3F800000;
	selp.f32 	%f732, %f608, %f605, %p169;
$L__BB0_98:                             // %__internal_fmodf_fastpath_quot.exit.i.i2537
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_103:                            // %__internal_fmodf_kernel.exit.i2556
	setp.eq.s32 	%p20, %r207, 0;
	sub.f32 	%f231, %f230, %f227;
	selp.f32 	%f235, %f234, %f229, %p21;
	abs.f32 	%f236, %f746;
	selp.f32 	%f281, %f279, %f278, %p38;
	selp.f32 	%f283, %f280, %f282, %p39;
	and.b32  	%r223, %r222, 2;
	setp.eq.f32 	%p41, %f287, %f706;
	mul.f32 	%f288, %f706, 0f00000000;
	selp.f32 	%f333, %f331, %f330, %p58;
	selp.f32 	%f335, %f332, %f334, %p59;
	and.b32  	%r245, %r244, 2;
	setp.eq.f32 	%p61, %f339, %f710;
	mul.f32 	%f340, %f710, 0f00000000;
	setp.eq.s32 	%p122, %r304, 0;
	sub.f32 	%f493, %f230, %f489;
	selp.f32 	%f497, %f496, %f491, %p123;
	abs.f32 	%f498, %f750;
	selp.f32 	%f541, %f539, %f538, %p140;
	selp.f32 	%f543, %f540, %f542, %p141;
	and.b32  	%r318, %r317, 2;
	setp.eq.f32 	%p143, %f547, %f726;
	mul.f32 	%f548, %f726, 0f00000000;
	selp.f32 	%f591, %f589, %f588, %p160;
	selp.f32 	%f593, %f590, %f592, %p161;
	and.b32  	%r338, %r337, 2;
	setp.eq.f32 	%p163, %f597, %f730;
	mul.f32 	%f598, %f730, 0f00000000;
	abs.f32 	%f622, %f734;
	setp.gtu.f32 	%p176, %f622, 0f7F800000;
	@%p176 bra 	$L__BB0_105;
// %bb.104:
	mov.b32 	%r343, %f734;
	or.b32  	%r344, %r37, %r343;
	mov.b32 	%f734, %r344;
$L__BB0_105:                            // %__nv_fmodf.exit2557
	selp.f32 	%f232, %f227, %f231, %p20;
	setp.gt.f32 	%p22, %f236, 0f4B800000;
	add.f32 	%f237, %f235, 0f3F800000;
	setp.eq.s32 	%p40, %r223, 0;
	sub.f32 	%f285, %f230, %f281;
	selp.f32 	%f18, %f288, %f283, %p41;
	abs.f32 	%f289, %f706;
	setp.eq.s32 	%p60, %r245, 0;
	sub.f32 	%f337, %f230, %f333;
	selp.f32 	%f341, %f340, %f335, %p61;
	abs.f32 	%f342, %f710;
	selp.f32 	%f494, %f489, %f493, %p122;
	setp.gt.f32 	%p124, %f498, 0f4B800000;
	add.f32 	%f499, %f497, 0f3F800000;
	setp.eq.s32 	%p142, %r318, 0;
	sub.f32 	%f545, %f230, %f541;
	selp.f32 	%f96, %f548, %f543, %p143;
	abs.f32 	%f549, %f726;
	setp.eq.s32 	%p162, %r338, 0;
	sub.f32 	%f595, %f230, %f591;
	selp.f32 	%f599, %f598, %f593, %p163;
	abs.f32 	%f600, %f730;
	add.f32 	%f623, %f734, %f734;
	mov.b32 	%r345, %f623;
	and.b32  	%r346, %r345, -2147483648;
	or.b32  	%r347, %r346, 1056964608;
	mov.b32 	%f624, %r347;
	add.f32 	%f625, %f623, %f624;
	cvt.rzi.f32.f32 	%f626, %f625;
	abs.f32 	%f627, %f623;
	setp.gt.f32 	%p178, %f627, 0f4B000000;
	selp.f32 	%f628, %f623, %f626, %p178;
	cvt.rzi.f32.f32 	%f629, %f623;
	setp.lt.f32 	%p179, %f627, 0f3F000000;
	selp.f32 	%f630, %f629, %f628, %p179;
	cvt.rzi.s32.f32 	%r348, %f630;
	fma.rn.f32 	%f631, %f630, 0fBF000000, %f734;
	mul.f32 	%f632, %f631, %f631;
	fma.rn.f32 	%f633, %f632, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f634, %f632, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f635, %f633, %f632, 0fC0A55DF6;
	fma.rn.f32 	%f636, %f634, %f632, 0f4081E0CF;
	fma.rn.f32 	%f637, %f632, %f631, 0f00000000;
	fma.rn.f32 	%f638, %f636, %f632, 0fC09DE9E6;
	fma.rn.f32 	%f639, %f635, %f637, 0f00000000;
	fma.rn.f32 	%f640, %f638, %f632, 0f3F800000;
	fma.rn.f32 	%f641, %f631, 0f40490FDB, %f639;
	and.b32  	%r349, %r348, 1;
	setp.eq.b32 	%p180, %r349, 1;
	selp.f32 	%f642, %f640, %f641, %p180;
	selp.f32 	%f643, %f641, %f640, %p180;
	and.b32  	%r350, %r348, 2;
	setp.eq.s32 	%p181, %r350, 0;
	neg.f32 	%f644, %f642;
	selp.f32 	%f645, %f642, %f644, %p181;
	add.s32 	%r351, %r348, 1;
	and.b32  	%r352, %r351, 2;
	setp.eq.s32 	%p182, %r352, 0;
	sub.f32 	%f647, %f230, %f643;
	cvt.rzi.f32.f32 	%f649, %f734;
	setp.eq.f32 	%p183, %f649, %f734;
	mul.f32 	%f650, %f734, 0f00000000;
	selp.f32 	%f741, %f650, %f645, %p183;
	abs.f32 	%f651, %f734;
	@%p83 bra 	$L__BB0_117;
// %bb.106:
	@%p239 bra 	$L__BB0_113;
	bra.uni 	$L__BB0_107;
$L__BB0_113:
	mov.b32 	%r77, %f738;
	and.b32  	%r353, %r77, 8388607;
	or.b32  	%r3291, %r353, 1065353216;
	mov.b32 	%f737, %r3291;
	add.s32 	%r354, %r77, -1073741824;
	and.b32  	%r3292, %r354, -8388608;
	setp.eq.s32 	%p191, %r3292, 0;
	@%p191 bra 	$L__BB0_116;
// %bb.114:                             // %__nv_fmaf_rn.exit4.i.i.i2582.preheader
	mov.f32 	%f662, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f661,%f662;
	// end inline asm
$L__BB0_115:                            // %__nv_fmaf_rn.exit4.i.i.i2582
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r355, %r3292, 192937984;
	add.s32 	%r356, %r3291, %r355;
	mov.b32 	%f663, %r356;
	mul.f32 	%f664, %f661, %f663;
	sub.f32 	%f665, %f663, %f664;
	fma.rn.f32 	%f666, %f665, %f661, %f664;
	sub.f32 	%f667, %f663, %f666;
	fma.rz.f32 	%f668, %f667, %f661, %f666;
	cvt.rzi.f32.f32 	%f669, %f668;
	sub.f32 	%f737, %f663, %f669;
	sub.s32 	%r3292, %r3292, %r355;
	mov.b32 	%r3291, %f737;
	setp.ne.s32 	%p192, %r3292, 0;
	setp.ne.s32 	%p193, %r3291, 0;
	and.pred  	%p194, %p192, %p193;
	@%p194 bra 	$L__BB0_115;
$L__BB0_116:                            // %__internal_fmodf_slowpath_mod.exit.i.i2584
	setp.gt.u32 	%p195, %r77, 2139095039;
	selp.f32 	%f670, 0f7FFFFFFF, 0f4B800000, %p195;
	mul.f32 	%f671, %f737, 0f34000000;
	mul.f32 	%f738, %f670, %f671;
	bra.uni 	$L__BB0_117;
$L__BB0_107:                            // %__nv_fast_fdividef.exit.i.i.i2561
	div.approx.f32 	%f654, %f738, %f703;
	cvt.rzi.f32.f32 	%f736, %f654;
	fma.rn.f32 	%f131, %f736, 0fC0000000, %f738;
	mov.b32 	%r76, %f131;
	setp.lt.u32 	%p186, %r76, 1073741824;
	@%p186 bra 	$L__BB0_112;
// %bb.108:
	setp.lt.u32 	%p187, %r76, -2147483647;
	@%p187 bra 	$L__BB0_110;
// %bb.109:
	add.f32 	%f659, %f736, 0fBF800000;
	setp.lt.f32 	%p190, %f131, 0fC0000000;
	add.f32 	%f660, %f659, 0fBF800000;
	selp.f32 	%f736, %f660, %f659, %p190;
	bra.uni 	$L__BB0_112;
$L__BB0_110:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p188, %f131, 0f40800000;
	@%p188 bra 	$L__BB0_112;
// %bb.111:                             // %__nv_fmaf_rn.exit.i.i.i2565
	add.f32 	%f655, %f736, 0f3F800000;
	fma.rn.f32 	%f657, %f703, 0fC0400000, %f131;
	setp.ge.f32 	%p189, %f657, 0f00000000;
	add.f32 	%f658, %f655, 0f3F800000;
	selp.f32 	%f736, %f658, %f655, %p189;
$L__BB0_112:                            // %__internal_fmodf_fastpath_quot.exit.i.i2568
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_117:                            // %__internal_fmodf_kernel.exit.i2587
	selp.f32 	%f238, %f237, %f232, %p22;
	selp.f32 	%f286, %f281, %f285, %p40;
	setp.gt.f32 	%p42, %f289, 0f4B800000;
	add.f32 	%f290, %f18, 0f3F800000;
	selp.f32 	%f338, %f333, %f337, %p60;
	setp.gt.f32 	%p62, %f342, 0f4B800000;
	add.f32 	%f343, %f341, 0f3F800000;
	selp.f32 	%f500, %f499, %f494, %p124;
	selp.f32 	%f546, %f541, %f545, %p142;
	setp.gt.f32 	%p144, %f549, 0f4B800000;
	add.f32 	%f550, %f96, 0f3F800000;
	selp.f32 	%f596, %f591, %f595, %p162;
	setp.gt.f32 	%p164, %f600, 0f4B800000;
	add.f32 	%f601, %f599, 0f3F800000;
	selp.f32 	%f648, %f643, %f647, %p182;
	setp.gt.f32 	%p184, %f651, 0f4B800000;
	add.f32 	%f652, %f741, 0f3F800000;
	abs.f32 	%f672, %f738;
	setp.gtu.f32 	%p196, %f672, 0f7F800000;
	@%p196 bra 	$L__BB0_119;
// %bb.118:
	mov.b32 	%r357, %f738;
	or.b32  	%r358, %r46, %r357;
	mov.b32 	%f738, %r358;
$L__BB0_119:                            // %__nv_fmodf.exit2588
	mov.b32 	%r196, %f238;
	mov.b32 	%r199, %f235;
	selp.f32 	%f19, %f290, %f286, %p42;
	selp.f32 	%f344, %f343, %f338, %p62;
	mov.b32 	%r293, %f500;
	mov.b32 	%r296, %f497;
	selp.f32 	%f97, %f550, %f546, %p144;
	selp.f32 	%f602, %f601, %f596, %p164;
	selp.f32 	%f129, %f652, %f648, %p184;
	add.f32 	%f673, %f738, %f738;
	mov.b32 	%r359, %f673;
	and.b32  	%r360, %r359, -2147483648;
	or.b32  	%r361, %r360, 1056964608;
	mov.b32 	%f674, %r361;
	add.f32 	%f675, %f673, %f674;
	cvt.rzi.f32.f32 	%f676, %f675;
	abs.f32 	%f677, %f673;
	setp.gt.f32 	%p198, %f677, 0f4B000000;
	selp.f32 	%f678, %f673, %f676, %p198;
	cvt.rzi.f32.f32 	%f679, %f673;
	setp.lt.f32 	%p199, %f677, 0f3F000000;
	selp.f32 	%f680, %f679, %f678, %p199;
	cvt.rzi.s32.f32 	%r362, %f680;
	fma.rn.f32 	%f681, %f680, 0fBF000000, %f738;
	mul.f32 	%f682, %f681, %f681;
	fma.rn.f32 	%f683, %f682, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f684, %f682, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f685, %f683, %f682, 0fC0A55DF6;
	fma.rn.f32 	%f686, %f684, %f682, 0f4081E0CF;
	fma.rn.f32 	%f687, %f682, %f681, 0f00000000;
	fma.rn.f32 	%f688, %f686, %f682, 0fC09DE9E6;
	fma.rn.f32 	%f689, %f685, %f687, 0f00000000;
	fma.rn.f32 	%f690, %f688, %f682, 0f3F800000;
	fma.rn.f32 	%f691, %f681, 0f40490FDB, %f689;
	and.b32  	%r363, %r362, 1;
	setp.eq.b32 	%p200, %r363, 1;
	selp.f32 	%f692, %f690, %f691, %p200;
	selp.f32 	%f693, %f691, %f690, %p200;
	and.b32  	%r364, %r362, 2;
	setp.eq.s32 	%p201, %r364, 0;
	neg.f32 	%f694, %f692;
	selp.f32 	%f695, %f692, %f694, %p201;
	add.s32 	%r365, %r362, 1;
	and.b32  	%r366, %r365, 2;
	setp.eq.s32 	%p202, %r366, 0;
	sub.f32 	%f697, %f230, %f693;
	selp.f32 	%f698, %f693, %f697, %p202;
	cvt.rzi.f32.f32 	%f699, %f738;
	setp.eq.f32 	%p203, %f699, %f738;
	mul.f32 	%f700, %f738, 0f00000000;
	selp.f32 	%f743, %f700, %f695, %p203;
	abs.f32 	%f701, %f738;
	setp.gt.f32 	%p204, %f701, 0f4B800000;
	add.f32 	%f702, %f743, 0f3F800000;
	selp.f32 	%f146, %f702, %f698, %p204;
	mov.f32 	%f740, %f129;
	mov.f32 	%f742, %f146;
	@%p103 bra 	$L__BB0_121;
// %bb.120:                             // %L692
	neg.f32 	%f742, %f743;
	neg.f32 	%f740, %f741;
	mov.f32 	%f741, %f129;
	mov.f32 	%f743, %f146;
$L__BB0_121:                            // %L694
	xor.b32  	%r195, %r199, -2147483648;
	ld.param.u64 	%rd2, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2];
	mov.b32 	%r234, %f344;
	mov.b32 	%r233, %f19;
	mov.b32 	%r237, %f341;
	mov.b32 	%r236, %f18;
	mov.b32 	%r280, %f720;
	mov.b32 	%r281, %f722;
	mov.b32 	%r283, %f721;
	mov.b32 	%r284, %f723;
	xor.b32  	%r292, %r296, -2147483648;
	mov.b32 	%r327, %f602;
	mov.b32 	%r326, %f97;
	mov.b32 	%r330, %f599;
	mov.b32 	%r329, %f96;
	mov.b32 	%r368, %f740;
	mov.b32 	%r369, %f742;
	mov.b32 	%r371, %f741;
	mov.b32 	%r372, %f743;
	setp.gt.u32 	%p205, %r5, 15;
	mov.u32 	%r167, 999999999;
	@%p205 bra 	$L__BB0_123;
// %bb.122:                             // %L724
	ld.param.u64 	%rd1, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1];
	shl.b32 	%r374, %r5, 4;
	and.b32  	%r375, %r374, 240;
	or.b32  	%r376, %r375, %r1;
	mul.wide.u32 	%rd96, %r376, 4;
	add.s64 	%rd97, %rd1, %rd96;
	ld.global.u32 	%r377, [%rd97];
	cvt.s32.s16 	%r378, %r377;
	shr.s32 	%r379, %r377, 16;
	mul.lo.s32 	%r380, %r379, 546;
	mad.lo.s32 	%r167, %r378, 33, %r380;
$L__BB0_123:                            // %pass387
	ld.param.u64 	%rd3, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3];
	ld.param.u64 	%rd4, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4];
	// begin inline asm
	cvt.rn.f16x2.f32 %r194, %r196, %r195;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r197, %r199, %r196;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r232, %r234, %r233;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r235, %r237, %r236;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r279, %r281, %r280;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r282, %r284, %r283;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r291, %r293, %r292;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r294, %r296, %r293;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r325, %r327, %r326;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r328, %r330, %r329;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r367, %r369, %r368;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r370, %r372, %r371;
	// end inline asm
	shr.u32 	%r382, %r5, 3;
	bfe.u32 	%r383, %r5, 3, 1;
	shl.b32 	%r384, %r1, 1;
	and.b32  	%r385, %r384, 14;
	or.b32  	%r386, %r383, %r385;
	shl.b32 	%r387, %r5, 6;
	and.b32  	%r388, %r387, 192;
	and.b32  	%r389, %r7, 1;
	and.b32  	%r390, %r382, 2;
	or.b32  	%r391, %r389, %r390;
	shl.b32 	%r392, %r391, 4;
	or.b32  	%r393, %r386, %r4;
	or.b32  	%r394, %r393, %r388;
	or.b32  	%r395, %r394, %r392;
	mul.wide.u32 	%rd98, %r395, 4;
	add.s64 	%rd99, %rd2, %rd98;
	ld.global.u32 	%r168, [%rd99];
	ld.global.u32 	%r169, [%rd99+1024];
	shl.b32 	%r396, %r3, 7;
	shl.b32 	%r397, %r5, 2;
	or.b32  	%r170, %r397, %r396;
	and.b32  	%r171, %r5, 16;
	shr.u32 	%r398, %r5, 4;
	and.b32  	%r399, %r155, 30;
	or.b32  	%r400, %r399, %r398;
	mul.lo.s32 	%r401, %r400, 257;
	shr.u32 	%r402, %r1, 3;
	and.b32  	%r403, %r2, 224;
	mad.lo.s32 	%r404, %r402, 257, %r403;
	or.b32  	%r405, %r402, 2;
	mad.lo.s32 	%r406, %r405, 257, %r403;
	or.b32  	%r407, %r402, 4;
	mad.lo.s32 	%r408, %r407, 257, %r403;
	or.b32  	%r409, %r402, 6;
	mad.lo.s32 	%r410, %r409, 257, %r403;
	or.b32  	%r411, %r402, 8;
	mad.lo.s32 	%r412, %r411, 257, %r403;
	or.b32  	%r413, %r402, 10;
	mad.lo.s32 	%r414, %r413, 257, %r403;
	or.b32  	%r415, %r402, 12;
	mad.lo.s32 	%r416, %r415, 257, %r403;
	or.b32  	%r417, %r402, 14;
	mad.lo.s32 	%r418, %r417, 257, %r403;
	or.b32  	%r419, %r402, 16;
	mad.lo.s32 	%r420, %r419, 257, %r403;
	or.b32  	%r421, %r402, 18;
	mad.lo.s32 	%r422, %r421, 257, %r403;
	or.b32  	%r423, %r402, 20;
	mad.lo.s32 	%r424, %r423, 257, %r403;
	or.b32  	%r425, %r402, 22;
	mad.lo.s32 	%r426, %r425, 257, %r403;
	or.b32  	%r427, %r402, 24;
	mad.lo.s32 	%r428, %r427, 257, %r403;
	or.b32  	%r429, %r402, 26;
	mad.lo.s32 	%r430, %r429, 257, %r403;
	or.b32  	%r431, %r402, 28;
	mad.lo.s32 	%r432, %r431, 257, %r403;
	or.b32  	%r433, %r402, 30;
	mad.lo.s32 	%r434, %r433, 257, %r403;
	mul.lo.s32 	%r435, %r6, 2184;
	mad.lo.s32 	%r436, %r386, 33, %r435;
	mad.lo.s32 	%r437, %r391, 546, %r436;
	setp.lt.u32 	%p207, %r5, 4;
	setp.eq.s32 	%p208, %r7, 4;
	setp.eq.s32 	%p209, %r7, 5;
	or.b32  	%r172, %r385, %r398;
	selp.b32 	%r438, 0, 1032, %p103;
	bfe.s32 	%r439, %r5, 3, 1;
	and.b32  	%r440, %r5, 8;
	setp.eq.s32 	%p210, %r440, 0;
	and.b32  	%r441, %r439, 258;
	bfe.s32 	%r442, %r5, 2, 1;
	and.b32  	%r443, %r442, 516;
	and.b32  	%r444, %r5, 1;
	neg.s32 	%r445, %r444;
	and.b32  	%r446, %r445, 2064;
	or.b32  	%r447, %r441, %r438;
	or.b32  	%r448, %r447, %r443;
	or.b32  	%r173, %r448, %r446;
	or.b32  	%r449, %r398, %r384;
	or.b32  	%r174, %r449, 16;
	and.b32  	%r450, %r397, 12;
	bfe.s32 	%r451, %r1, 1, 1;
	and.b32  	%r452, %r1, 2;
	setp.eq.s32 	%p211, %r452, 0;
	and.b32  	%r453, %r451, 1032;
	and.b32  	%r454, %r439, 4144;
	mul.lo.s32 	%r455, %r402, 258;
	bfe.s32 	%r456, %r1, 2, 1;
	and.b32  	%r457, %r1, 4;
	setp.eq.s32 	%p212, %r457, 0;
	and.b32  	%r458, %r456, 516;
	and.b32  	%r459, %r1, 1;
	neg.s32 	%r460, %r459;
	setp.eq.b32 	%p213, %r459, 1;
	and.b32  	%r461, %r460, 2064;
	add.s32 	%r462, %r455, %r450;
	add.s32 	%r463, %r462, %r391;
	add.s32 	%r464, %r463, %r453;
	add.s32 	%r465, %r464, %r454;
	add.s32 	%r466, %r465, %r458;
	add.s32 	%r467, %r466, %r461;
	mul.wide.u32 	%rd100, %r467, 4;
	mov.u64 	%rd101, shmem;
	add.s64 	%rd20, %rd101, %rd100;
	or.b32  	%r468, %r450, %r391;
	cvt.u64.u32 	%rd102, %r468;
	selp.b64 	%rd103, 2064, 0, %p213;
	selp.b64 	%rd104, 0, 516, %p212;
	selp.b64 	%rd105, 0, 4144, %p210;
	selp.b64 	%rd106, 0, 1032, %p211;
	cvt.u64.u32 	%rd107, %r455;
	add.s64 	%rd108, %rd107, %rd106;
	add.s64 	%rd109, %rd108, %rd105;
	add.s64 	%rd110, %rd109, %rd104;
	add.s64 	%rd111, %rd110, %rd103;
	add.s64 	%rd112, %rd111, %rd102;
	shl.b64 	%rd113, %rd112, 2;
	add.s64 	%rd21, %rd101, %rd113;
	and.b32  	%r469, %r5, 15;
	mul.lo.s32 	%r470, %r3, 26112;
	or.b32  	%r471, %r2, %r171;
	or.b32  	%r472, %r469, %r470;
	or.b32  	%r175, %r472, %r471;
	add.s32 	%r473, %r1, %r401;
	mul.wide.u32 	%rd114, %r473, 4;
	add.s64 	%rd22, %rd101, %rd114;
	cvt.u64.u32 	%rd115, %r1;
	cvt.u64.u32 	%rd23, %r401;
	add.s64 	%rd116, %rd23, %rd115;
	shl.b64 	%rd117, %rd116, 2;
	add.s64 	%rd24, %rd101, %rd117;
	add.s32 	%r474, %r404, %r5;
	mul.wide.u32 	%rd118, %r474, 4;
	add.s64 	%rd25, %rd101, %rd118;
	add.s32 	%r475, %r406, %r5;
	mul.wide.u32 	%rd119, %r475, 4;
	add.s64 	%rd26, %rd101, %rd119;
	add.s32 	%r476, %r408, %r5;
	mul.wide.u32 	%rd120, %r476, 4;
	add.s64 	%rd27, %rd101, %rd120;
	add.s32 	%r477, %r410, %r5;
	mul.wide.u32 	%rd121, %r477, 4;
	add.s64 	%rd28, %rd101, %rd121;
	add.s32 	%r478, %r412, %r5;
	mul.wide.u32 	%rd122, %r478, 4;
	add.s64 	%rd29, %rd101, %rd122;
	add.s32 	%r479, %r414, %r5;
	mul.wide.u32 	%rd123, %r479, 4;
	add.s64 	%rd30, %rd101, %rd123;
	add.s32 	%r480, %r416, %r5;
	mul.wide.u32 	%rd124, %r480, 4;
	add.s64 	%rd31, %rd101, %rd124;
	add.s32 	%r481, %r418, %r5;
	mul.wide.u32 	%rd125, %r481, 4;
	add.s64 	%rd32, %rd101, %rd125;
	add.s32 	%r482, %r420, %r5;
	mul.wide.u32 	%rd126, %r482, 4;
	add.s64 	%rd33, %rd101, %rd126;
	add.s32 	%r483, %r422, %r5;
	mul.wide.u32 	%rd127, %r483, 4;
	add.s64 	%rd34, %rd101, %rd127;
	add.s32 	%r484, %r424, %r5;
	mul.wide.u32 	%rd128, %r484, 4;
	add.s64 	%rd35, %rd101, %rd128;
	add.s32 	%r485, %r426, %r5;
	mul.wide.u32 	%rd129, %r485, 4;
	add.s64 	%rd36, %rd101, %rd129;
	add.s32 	%r486, %r428, %r5;
	mul.wide.u32 	%rd130, %r486, 4;
	add.s64 	%rd37, %rd101, %rd130;
	add.s32 	%r487, %r430, %r5;
	mul.wide.u32 	%rd131, %r487, 4;
	add.s64 	%rd38, %rd101, %rd131;
	add.s32 	%r488, %r432, %r5;
	mul.wide.u32 	%rd132, %r488, 4;
	add.s64 	%rd39, %rd101, %rd132;
	add.s32 	%r489, %r434, %r5;
	mul.wide.u32 	%rd133, %r489, 4;
	add.s64 	%rd40, %rd101, %rd133;
	add.s32 	%r490, %r437, %r402;
	mul.wide.u32 	%rd134, %r490, 4;
	add.s64 	%rd41, %rd101, %rd134;
	add.s32 	%r491, %r437, %r405;
	mul.wide.u32 	%rd135, %r491, 4;
	add.s64 	%rd42, %rd101, %rd135;
	add.s32 	%r492, %r437, %r407;
	mul.wide.u32 	%rd136, %r492, 4;
	add.s64 	%rd43, %rd101, %rd136;
	add.s32 	%r493, %r437, %r409;
	mul.wide.u32 	%rd137, %r493, 4;
	add.s64 	%rd44, %rd101, %rd137;
	add.s32 	%r494, %r437, %r411;
	mul.wide.u32 	%rd138, %r494, 4;
	add.s64 	%rd45, %rd101, %rd138;
	add.s32 	%r495, %r437, %r413;
	mul.wide.u32 	%rd139, %r495, 4;
	add.s64 	%rd46, %rd101, %rd139;
	add.s32 	%r496, %r437, %r415;
	mul.wide.u32 	%rd140, %r496, 4;
	add.s64 	%rd47, %rd101, %rd140;
	add.s32 	%r497, %r437, %r417;
	mul.wide.u32 	%rd141, %r497, 4;
	add.s64 	%rd48, %rd101, %rd141;
	add.s32 	%r498, %r437, %r419;
	mul.wide.u32 	%rd142, %r498, 4;
	add.s64 	%rd49, %rd101, %rd142;
	add.s32 	%r499, %r437, %r421;
	mul.wide.u32 	%rd143, %r499, 4;
	add.s64 	%rd50, %rd101, %rd143;
	add.s32 	%r500, %r437, %r423;
	mul.wide.u32 	%rd144, %r500, 4;
	add.s64 	%rd51, %rd101, %rd144;
	add.s32 	%r501, %r437, %r425;
	mul.wide.u32 	%rd145, %r501, 4;
	add.s64 	%rd52, %rd101, %rd145;
	add.s32 	%r502, %r437, %r427;
	mul.wide.u32 	%rd146, %r502, 4;
	add.s64 	%rd53, %rd101, %rd146;
	add.s32 	%r503, %r437, %r429;
	mul.wide.u32 	%rd147, %r503, 4;
	add.s64 	%rd54, %rd101, %rd147;
	add.s32 	%r504, %r437, %r431;
	mul.wide.u32 	%rd148, %r504, 4;
	add.s64 	%rd55, %rd101, %rd148;
	add.s32 	%r505, %r437, %r433;
	mul.wide.u32 	%rd149, %r505, 4;
	add.s64 	%rd56, %rd101, %rd149;
	add.s32 	%r506, %r7, -1;
	setp.lt.u32 	%p214, %r506, 3;
	or.pred  	%p215, %p207, %p214;
	or.pred  	%p216, %p215, %p208;
	and.b32  	%r507, %r5, 24;
	setp.eq.s32 	%p217, %r507, 24;
	or.pred  	%p218, %p209, %p217;
	selp.b32 	%r176, 1145324612, -286331154, %p215;
	or.pred  	%p1, %p216, %p218;
	shl.b32 	%r177, %r402, 5;
	or.b32  	%r508, %r172, %r177;
	add.s32 	%r509, %r173, %r508;
	mul.wide.u32 	%rd150, %r509, 4;
	add.s64 	%rd57, %rd101, %rd150;
	cvt.u64.u32 	%rd151, %r508;
	cvt.u64.u32 	%rd58, %r173;
	add.s64 	%rd152, %rd58, %rd151;
	shl.b64 	%rd153, %rd152, 2;
	add.s64 	%rd59, %rd101, %rd153;
	or.b32  	%r510, %r174, %r177;
	add.s32 	%r511, %r173, %r510;
	mul.wide.u32 	%rd154, %r511, 4;
	add.s64 	%rd60, %rd101, %rd154;
	cvt.u64.u32 	%rd155, %r510;
	add.s64 	%rd156, %rd58, %rd155;
	shl.b64 	%rd157, %rd156, 2;
	add.s64 	%rd61, %rd101, %rd157;
	shl.b32 	%r512, %r405, 5;
	or.b32  	%r513, %r172, %r512;
	add.s32 	%r514, %r173, %r513;
	mul.wide.u32 	%rd158, %r514, 4;
	add.s64 	%rd62, %rd101, %rd158;
	cvt.u64.u32 	%rd159, %r513;
	add.s64 	%rd160, %rd58, %rd159;
	shl.b64 	%rd161, %rd160, 2;
	add.s64 	%rd63, %rd101, %rd161;
	or.b32  	%r515, %r174, %r512;
	add.s32 	%r516, %r173, %r515;
	mul.wide.u32 	%rd162, %r516, 4;
	add.s64 	%rd64, %rd101, %rd162;
	cvt.u64.u32 	%rd163, %r515;
	add.s64 	%rd164, %rd58, %rd163;
	shl.b64 	%rd165, %rd164, 2;
	add.s64 	%rd65, %rd101, %rd165;
	shl.b32 	%r517, %r407, 5;
	or.b32  	%r518, %r172, %r517;
	add.s32 	%r519, %r173, %r518;
	mul.wide.u32 	%rd166, %r519, 4;
	add.s64 	%rd66, %rd101, %rd166;
	cvt.u64.u32 	%rd167, %r518;
	add.s64 	%rd168, %rd58, %rd167;
	shl.b64 	%rd169, %rd168, 2;
	add.s64 	%rd67, %rd101, %rd169;
	or.b32  	%r520, %r174, %r517;
	add.s32 	%r521, %r173, %r520;
	mul.wide.u32 	%rd170, %r521, 4;
	add.s64 	%rd68, %rd101, %rd170;
	cvt.u64.u32 	%rd171, %r520;
	add.s64 	%rd172, %rd58, %rd171;
	shl.b64 	%rd173, %rd172, 2;
	add.s64 	%rd69, %rd101, %rd173;
	shl.b32 	%r522, %r409, 5;
	or.b32  	%r523, %r172, %r522;
	add.s32 	%r524, %r173, %r523;
	mul.wide.u32 	%rd174, %r524, 4;
	add.s64 	%rd70, %rd101, %rd174;
	cvt.u64.u32 	%rd175, %r523;
	add.s64 	%rd176, %rd58, %rd175;
	shl.b64 	%rd177, %rd176, 2;
	add.s64 	%rd71, %rd101, %rd177;
	or.b32  	%r525, %r174, %r522;
	add.s32 	%r526, %r173, %r525;
	mul.wide.u32 	%rd178, %r526, 4;
	add.s64 	%rd72, %rd101, %rd178;
	cvt.u64.u32 	%rd179, %r525;
	add.s64 	%rd180, %rd58, %rd179;
	shl.b64 	%rd181, %rd180, 2;
	add.s64 	%rd73, %rd101, %rd181;
	add.s32 	%r527, %r467, 32;
	mul.wide.u32 	%rd182, %r527, 4;
	add.s64 	%rd74, %rd101, %rd182;
	add.s32 	%r528, %r467, 48;
	mul.wide.u32 	%rd183, %r528, 4;
	add.s64 	%rd75, %rd101, %rd183;
	add.s32 	%r529, %r467, 64;
	mul.wide.u32 	%rd184, %r529, 4;
	add.s64 	%rd76, %rd101, %rd184;
	add.s32 	%r530, %r467, 80;
	mul.wide.u32 	%rd185, %r530, 4;
	add.s64 	%rd77, %rd101, %rd185;
	add.s32 	%r531, %r467, 96;
	mul.wide.u32 	%rd186, %r531, 4;
	add.s64 	%rd78, %rd101, %rd186;
	add.s32 	%r532, %r467, 112;
	mul.wide.u32 	%rd187, %r532, 4;
	add.s64 	%rd79, %rd101, %rd187;
	add.s32 	%r533, %r467, 128;
	mul.wide.u32 	%rd188, %r533, 4;
	add.s64 	%rd80, %rd101, %rd188;
	add.s32 	%r534, %r467, 144;
	mul.wide.u32 	%rd189, %r534, 4;
	add.s64 	%rd81, %rd101, %rd189;
	add.s32 	%r535, %r467, 160;
	mul.wide.u32 	%rd190, %r535, 4;
	add.s64 	%rd82, %rd101, %rd190;
	add.s32 	%r536, %r467, 176;
	mul.wide.u32 	%rd191, %r536, 4;
	add.s64 	%rd83, %rd101, %rd191;
	add.s32 	%r537, %r467, 192;
	mul.wide.u32 	%rd192, %r537, 4;
	add.s64 	%rd84, %rd101, %rd192;
	add.s32 	%r538, %r467, 208;
	mul.wide.u32 	%rd193, %r538, 4;
	add.s64 	%rd85, %rd101, %rd193;
	add.s32 	%r539, %r467, 224;
	mul.wide.u32 	%rd194, %r539, 4;
	add.s64 	%rd86, %rd101, %rd194;
	add.s32 	%r540, %r467, 240;
	mul.wide.u32 	%rd195, %r540, 4;
	add.s64 	%rd87, %rd101, %rd195;
	mov.u32 	%r3293, 0;
	setp.eq.s32 	%p219, %r171, 0;
	mov.u16 	%rs38, 25600;
	mov.u16 	%rs40, 21504;
	mov.u16 	%rs44, 18432;
	mov.u32 	%r3298, %r3293;
	mov.u32 	%r3299, %r3293;
	mov.u32 	%r3300, %r3293;
	bra.uni 	$L__BB0_124;
$L__BB0_136:                            // %L35582
                                        //   in Loop: Header=BB0_124 Depth=1
	add.s32 	%r143, %r3293, 64;
	setp.ne.s32 	%p234, %r3293, 1984;
	mov.u32 	%r3293, %r143;
	@%p234 bra 	$L__BB0_124;
	bra.uni 	$L__BB0_137;
$L__BB0_124:                            // %L1153
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_125 Depth 2
                                        //     Child Loop BB0_132 Depth 2
	cvt.u32.u64 	%r734, %rd23;
	or.b32  	%r735, %r3293, %r1;
	shl.b32 	%r736, %r735, 13;
	and.b32  	%r737, %r736, 16375808;
	or.b32  	%r738, %r170, %r737;
	shl.b32 	%r739, %r738, 2;
	cvt.u64.u32 	%rd196, %r739;
	add.s64 	%rd197, %rd3, %rd196;
	ld.global.v4.u32 	{%r740, %r741, %r742, %r743}, [%rd197];
	or.b32  	%r744, %r735, 16;
	shl.b32 	%r745, %r744, 13;
	and.b32  	%r746, %r745, 16506880;
	or.b32  	%r747, %r170, %r746;
	shl.b32 	%r748, %r747, 2;
	cvt.u64.u32 	%rd198, %r748;
	add.s64 	%rd199, %rd3, %rd198;
	ld.global.v4.u32 	{%r749, %r750, %r751, %r752}, [%rd199];
	and.b32  	%r753, %r3293, 1984;
	or.b32  	%r754, %r1, %r753;
	shl.b32 	%r755, %r754, 15;
	shl.b32 	%r756, %r170, 2;
	or.b32  	%r757, %r755, %r756;
	or.b32  	%r758, %r757, 1048576;
	cvt.u64.u32 	%rd200, %r758;
	add.s64 	%rd201, %rd3, %rd200;
	ld.global.v4.u32 	{%r759, %r760, %r761, %r762}, [%rd201];
	or.b32  	%r763, %r757, 1572864;
	cvt.u64.u32 	%rd202, %r763;
	add.s64 	%rd203, %rd3, %rd202;
	ld.global.v4.u32 	{%r764, %r765, %r766, %r767}, [%rd203];
	selp.b32 	%r768, %r742, %r740, %p219;
	shfl.sync.bfly.b32	%r769, %r768, 16, 31, -1;
	selp.b32 	%r543, %r740, %r769, %p219;
	selp.b32 	%r548, %r769, %r742, %p219;
	selp.b32 	%r770, %r743, %r741, %p219;
	shfl.sync.bfly.b32	%r771, %r770, 16, 31, -1;
	selp.b32 	%r551, %r741, %r771, %p219;
	selp.b32 	%r556, %r771, %r743, %p219;
	selp.b32 	%r772, %r751, %r749, %p219;
	shfl.sync.bfly.b32	%r773, %r772, 16, 31, -1;
	selp.b32 	%r559, %r749, %r773, %p219;
	selp.b32 	%r564, %r773, %r751, %p219;
	selp.b32 	%r774, %r752, %r750, %p219;
	shfl.sync.bfly.b32	%r775, %r774, 16, 31, -1;
	selp.b32 	%r567, %r750, %r775, %p219;
	selp.b32 	%r572, %r775, %r752, %p219;
	selp.b32 	%r776, %r761, %r759, %p219;
	shfl.sync.bfly.b32	%r777, %r776, 16, 31, -1;
	selp.b32 	%r575, %r759, %r777, %p219;
	selp.b32 	%r580, %r777, %r761, %p219;
	selp.b32 	%r778, %r762, %r760, %p219;
	shfl.sync.bfly.b32	%r779, %r778, 16, 31, -1;
	selp.b32 	%r583, %r760, %r779, %p219;
	selp.b32 	%r588, %r779, %r762, %p219;
	selp.b32 	%r780, %r766, %r764, %p219;
	shfl.sync.bfly.b32	%r781, %r780, 16, 31, -1;
	selp.b32 	%r591, %r764, %r781, %p219;
	selp.b32 	%r596, %r781, %r766, %p219;
	selp.b32 	%r782, %r767, %r765, %p219;
	shfl.sync.bfly.b32	%r783, %r782, 16, 31, -1;
	selp.b32 	%r599, %r765, %r783, %p219;
	selp.b32 	%r604, %r783, %r767, %p219;
	shl.b32 	%r544, %r548, 4;
	mov.u32 	%r542, 252645135;
	// begin inline asm
	lop3.b32 %r606, %r542, %r543, %r544, 202;
	// end inline asm
	shr.u32 	%r547, %r543, 4;
	// begin inline asm
	lop3.b32 %r622, %r542, %r547, %r548, 202;
	// end inline asm
	shl.b32 	%r552, %r556, 4;
	// begin inline asm
	lop3.b32 %r614, %r542, %r551, %r552, 202;
	// end inline asm
	shr.u32 	%r555, %r551, 4;
	// begin inline asm
	lop3.b32 %r630, %r542, %r555, %r556, 202;
	// end inline asm
	shl.b32 	%r560, %r564, 4;
	// begin inline asm
	lop3.b32 %r638, %r542, %r559, %r560, 202;
	// end inline asm
	shr.u32 	%r563, %r559, 4;
	// begin inline asm
	lop3.b32 %r654, %r542, %r563, %r564, 202;
	// end inline asm
	shl.b32 	%r568, %r572, 4;
	// begin inline asm
	lop3.b32 %r646, %r542, %r567, %r568, 202;
	// end inline asm
	shr.u32 	%r571, %r567, 4;
	// begin inline asm
	lop3.b32 %r662, %r542, %r571, %r572, 202;
	// end inline asm
	shl.b32 	%r576, %r580, 4;
	// begin inline asm
	lop3.b32 %r607, %r542, %r575, %r576, 202;
	// end inline asm
	shr.u32 	%r579, %r575, 4;
	// begin inline asm
	lop3.b32 %r623, %r542, %r579, %r580, 202;
	// end inline asm
	shl.b32 	%r584, %r588, 4;
	// begin inline asm
	lop3.b32 %r615, %r542, %r583, %r584, 202;
	// end inline asm
	shr.u32 	%r587, %r583, 4;
	// begin inline asm
	lop3.b32 %r631, %r542, %r587, %r588, 202;
	// end inline asm
	shl.b32 	%r592, %r596, 4;
	// begin inline asm
	lop3.b32 %r639, %r542, %r591, %r592, 202;
	// end inline asm
	shr.u32 	%r595, %r591, 4;
	// begin inline asm
	lop3.b32 %r655, %r542, %r595, %r596, 202;
	// end inline asm
	shl.b32 	%r600, %r604, 4;
	// begin inline asm
	lop3.b32 %r647, %r542, %r599, %r600, 202;
	// end inline asm
	shr.u32 	%r603, %r599, 4;
	// begin inline asm
	lop3.b32 %r663, %r542, %r603, %r604, 202;
	// end inline asm
	mov.u32 	%r608, 25152;
	// begin inline asm
	prmt.b32 %r670, %r606, %r607, %r608;
	// end inline asm
	mov.u32 	%r612, 29521;
	// begin inline asm
	prmt.b32 %r702, %r606, %r607, %r612;
	// end inline asm
	// begin inline asm
	prmt.b32 %r678, %r614, %r615, %r608;
	// end inline asm
	// begin inline asm
	prmt.b32 %r710, %r614, %r615, %r612;
	// end inline asm
	// begin inline asm
	prmt.b32 %r671, %r622, %r623, %r608;
	// end inline asm
	// begin inline asm
	prmt.b32 %r703, %r622, %r623, %r612;
	// end inline asm
	// begin inline asm
	prmt.b32 %r679, %r630, %r631, %r608;
	// end inline asm
	// begin inline asm
	prmt.b32 %r711, %r630, %r631, %r612;
	// end inline asm
	// begin inline asm
	prmt.b32 %r686, %r638, %r639, %r608;
	// end inline asm
	// begin inline asm
	prmt.b32 %r718, %r638, %r639, %r612;
	// end inline asm
	// begin inline asm
	prmt.b32 %r694, %r646, %r647, %r608;
	// end inline asm
	// begin inline asm
	prmt.b32 %r726, %r646, %r647, %r612;
	// end inline asm
	// begin inline asm
	prmt.b32 %r687, %r654, %r655, %r608;
	// end inline asm
	// begin inline asm
	prmt.b32 %r719, %r654, %r655, %r612;
	// end inline asm
	// begin inline asm
	prmt.b32 %r695, %r662, %r663, %r608;
	// end inline asm
	// begin inline asm
	prmt.b32 %r727, %r662, %r663, %r612;
	// end inline asm
	mov.u32 	%r728, 21520;
	// begin inline asm
	prmt.b32 %r669, %r670, %r671, %r728;
	// end inline asm
	mov.u32 	%r732, 30258;
	// begin inline asm
	prmt.b32 %r673, %r670, %r671, %r732;
	// end inline asm
	// begin inline asm
	prmt.b32 %r677, %r678, %r679, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r681, %r678, %r679, %r732;
	// end inline asm
	// begin inline asm
	prmt.b32 %r685, %r686, %r687, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r689, %r686, %r687, %r732;
	// end inline asm
	// begin inline asm
	prmt.b32 %r693, %r694, %r695, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r697, %r694, %r695, %r732;
	// end inline asm
	// begin inline asm
	prmt.b32 %r701, %r702, %r703, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r705, %r702, %r703, %r732;
	// end inline asm
	// begin inline asm
	prmt.b32 %r709, %r710, %r711, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r713, %r710, %r711, %r732;
	// end inline asm
	// begin inline asm
	prmt.b32 %r717, %r718, %r719, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r721, %r718, %r719, %r732;
	// end inline asm
	// begin inline asm
	prmt.b32 %r725, %r726, %r727, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r729, %r726, %r727, %r732;
	// end inline asm
	st.shared.u32 	[%rd22], %r669;
	st.shared.u32 	[%rd24+512], %r677;
	st.shared.u32 	[%rd24+256], %r673;
	st.shared.u32 	[%rd24+768], %r681;
	and.b32  	%r784, %r744, 31;
	add.s32 	%r785, %r784, %r734;
	mul.wide.u32 	%rd204, %r785, 4;
	add.s64 	%rd206, %rd101, %rd204;
	st.shared.u32 	[%rd206], %r685;
	cvt.u64.u32 	%rd207, %r784;
	add.s64 	%rd208, %rd23, %rd207;
	shl.b64 	%rd209, %rd208, 2;
	add.s64 	%rd210, %rd101, %rd209;
	st.shared.u32 	[%rd210+512], %r693;
	st.shared.u32 	[%rd210+256], %r689;
	st.shared.u32 	[%rd210+768], %r697;
	st.shared.u32 	[%rd24+128], %r701;
	st.shared.u32 	[%rd24+640], %r709;
	st.shared.u32 	[%rd24+384], %r705;
	st.shared.u32 	[%rd24+896], %r713;
	st.shared.u32 	[%rd210+128], %r717;
	st.shared.u32 	[%rd210+640], %r725;
	st.shared.u32 	[%rd210+384], %r721;
	st.shared.u32 	[%rd210+896], %r729;
	bar.sync 	0;
	ld.shared.u32 	%r786, [%rd25];
	ld.shared.u32 	%r787, [%rd26];
	ld.shared.u32 	%r788, [%rd27];
	ld.shared.u32 	%r789, [%rd28];
	ld.shared.u32 	%r790, [%rd29];
	ld.shared.u32 	%r791, [%rd30];
	ld.shared.u32 	%r792, [%rd31];
	ld.shared.u32 	%r793, [%rd32];
	ld.shared.u32 	%r794, [%rd33];
	ld.shared.u32 	%r795, [%rd34];
	ld.shared.u32 	%r796, [%rd35];
	ld.shared.u32 	%r797, [%rd36];
	ld.shared.u32 	%r798, [%rd37];
	ld.shared.u32 	%r799, [%rd38];
	ld.shared.u32 	%r800, [%rd39];
	ld.shared.u32 	%r801, [%rd40];
	bar.sync 	0;
	shfl.sync.idx.b32	%r802, %r167, 0, 31, -1;
	shfl.sync.idx.b32	%r803, %r167, 1, 31, -1;
	shfl.sync.idx.b32	%r804, %r167, 2, 31, -1;
	shfl.sync.idx.b32	%r805, %r167, 3, 31, -1;
	shfl.sync.idx.b32	%r806, %r167, 4, 31, -1;
	shfl.sync.idx.b32	%r807, %r167, 5, 31, -1;
	shfl.sync.idx.b32	%r808, %r167, 6, 31, -1;
	shfl.sync.idx.b32	%r809, %r167, 7, 31, -1;
	shfl.sync.idx.b32	%r810, %r167, 8, 31, -1;
	shfl.sync.idx.b32	%r811, %r167, 9, 31, -1;
	shfl.sync.idx.b32	%r812, %r167, 10, 31, -1;
	shfl.sync.idx.b32	%r813, %r167, 11, 31, -1;
	shfl.sync.idx.b32	%r814, %r167, 12, 31, -1;
	shfl.sync.idx.b32	%r815, %r167, 13, 31, -1;
	shfl.sync.idx.b32	%r816, %r167, 14, 31, -1;
	shfl.sync.idx.b32	%r817, %r167, 15, 31, -1;
	add.s32 	%r818, %r802, %r5;
	mul.wide.s32 	%rd211, %r818, 4;
	add.s64 	%rd212, %rd101, %rd211;
	st.shared.u32 	[%rd212], %r786;
	add.s32 	%r819, %r803, %r5;
	mul.wide.s32 	%rd213, %r819, 4;
	add.s64 	%rd214, %rd101, %rd213;
	st.shared.u32 	[%rd214], %r787;
	add.s32 	%r820, %r804, %r5;
	mul.wide.s32 	%rd215, %r820, 4;
	add.s64 	%rd216, %rd101, %rd215;
	st.shared.u32 	[%rd216], %r788;
	add.s32 	%r821, %r805, %r5;
	mul.wide.s32 	%rd217, %r821, 4;
	add.s64 	%rd218, %rd101, %rd217;
	st.shared.u32 	[%rd218], %r789;
	add.s32 	%r822, %r806, %r5;
	mul.wide.s32 	%rd219, %r822, 4;
	add.s64 	%rd220, %rd101, %rd219;
	st.shared.u32 	[%rd220], %r790;
	add.s32 	%r823, %r807, %r5;
	mul.wide.s32 	%rd221, %r823, 4;
	add.s64 	%rd222, %rd101, %rd221;
	st.shared.u32 	[%rd222], %r791;
	add.s32 	%r824, %r808, %r5;
	mul.wide.s32 	%rd223, %r824, 4;
	add.s64 	%rd224, %rd101, %rd223;
	st.shared.u32 	[%rd224], %r792;
	add.s32 	%r825, %r809, %r5;
	mul.wide.s32 	%rd225, %r825, 4;
	add.s64 	%rd226, %rd101, %rd225;
	st.shared.u32 	[%rd226], %r793;
	add.s32 	%r826, %r810, %r5;
	mul.wide.s32 	%rd227, %r826, 4;
	add.s64 	%rd228, %rd101, %rd227;
	st.shared.u32 	[%rd228], %r794;
	add.s32 	%r827, %r811, %r5;
	mul.wide.s32 	%rd229, %r827, 4;
	add.s64 	%rd230, %rd101, %rd229;
	st.shared.u32 	[%rd230], %r795;
	add.s32 	%r828, %r812, %r5;
	mul.wide.s32 	%rd231, %r828, 4;
	add.s64 	%rd232, %rd101, %rd231;
	st.shared.u32 	[%rd232], %r796;
	add.s32 	%r829, %r813, %r5;
	mul.wide.s32 	%rd233, %r829, 4;
	add.s64 	%rd234, %rd101, %rd233;
	st.shared.u32 	[%rd234], %r797;
	add.s32 	%r830, %r814, %r5;
	mul.wide.s32 	%rd235, %r830, 4;
	add.s64 	%rd236, %rd101, %rd235;
	st.shared.u32 	[%rd236], %r798;
	add.s32 	%r831, %r815, %r5;
	mul.wide.s32 	%rd237, %r831, 4;
	add.s64 	%rd238, %rd101, %rd237;
	st.shared.u32 	[%rd238], %r799;
	add.s32 	%r832, %r816, %r5;
	mul.wide.s32 	%rd239, %r832, 4;
	add.s64 	%rd240, %rd101, %rd239;
	st.shared.u32 	[%rd240], %r800;
	add.s32 	%r833, %r817, %r5;
	mul.wide.s32 	%rd241, %r833, 4;
	add.s64 	%rd242, %rd101, %rd241;
	st.shared.u32 	[%rd242], %r801;
	bar.sync 	0;
	ld.shared.u32 	%r91, [%rd41];
	ld.shared.u32 	%r92, [%rd42];
	ld.shared.u32 	%r93, [%rd43];
	ld.shared.u32 	%r94, [%rd44];
	ld.shared.u32 	%r95, [%rd45];
	ld.shared.u32 	%r96, [%rd46];
	ld.shared.u32 	%r97, [%rd47];
	ld.shared.u32 	%r98, [%rd48];
	ld.shared.u32 	%r99, [%rd49];
	ld.shared.u32 	%r100, [%rd50];
	ld.shared.u32 	%r101, [%rd51];
	ld.shared.u32 	%r102, [%rd52];
	ld.shared.u32 	%r103, [%rd53];
	ld.shared.u32 	%r104, [%rd54];
	ld.shared.u32 	%r105, [%rd55];
	ld.shared.u32 	%r106, [%rd56];
	bar.sync 	0;
	mov.u32 	%r3297, 16;
	bra.uni 	$L__BB0_125;
$L__BB0_129:                            // %L22890
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s32 	%r3299, %r3299, 1;
	mov.u32 	%r3298, 0;
	mov.u32 	%r3300, %r3298;
$L__BB0_130:                            // %L22891
                                        //   in Loop: Header=BB0_125 Depth=2
	bar.sync 	0;
	add.s32 	%r3297, %r3297, -8;
	setp.ne.s32 	%p226, %r3297, -16;
	@%p226 bra 	$L__BB0_125;
	bra.uni 	$L__BB0_131;
$L__BB0_125:                            // %L10237
                                        //   Parent Loop BB0_124 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p220, %r3297, 16;
	selp.b32 	%r1226, %r91, 0, %p220;
	setp.eq.s32 	%p221, %r3297, 8;
	selp.b32 	%r1227, %r95, %r1226, %p221;
	setp.eq.s32 	%p222, %r3297, 0;
	selp.b32 	%r1228, %r99, %r1227, %p222;
	setp.eq.s32 	%p223, %r3297, -8;
	selp.b32 	%r1229, %r103, %r1228, %p223;
	selp.b32 	%r1230, %r92, 0, %p220;
	selp.b32 	%r1231, %r96, %r1230, %p221;
	selp.b32 	%r1232, %r100, %r1231, %p222;
	selp.b32 	%r1233, %r104, %r1232, %p223;
	selp.b32 	%r1234, %r93, 0, %p220;
	selp.b32 	%r1235, %r97, %r1234, %p221;
	selp.b32 	%r1236, %r101, %r1235, %p222;
	selp.b32 	%r1237, %r105, %r1236, %p223;
	selp.b32 	%r1238, %r94, 0, %p220;
	selp.b32 	%r1239, %r98, %r1238, %p221;
	selp.b32 	%r1240, %r102, %r1239, %p222;
	selp.b32 	%r1241, %r106, %r1240, %p223;
	// begin inline asm
	mov.b32 %r839, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r850, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r838, %r1229, -2004318072;
	mov.u32 	%r975, 983055;
	// begin inline asm
	lop3.b32 %r836, %r975, %r838, %r839, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r840, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r841, %r839, %r840;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r844, %r836, %r841;
	// end inline asm
	mov.u32 	%r986, 15728880;
	// begin inline asm
	lop3.b32 %r847, %r986, %r838, %r850, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r851, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r852, %r850, %r851;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r855, %r847, %r852;
	// end inline asm
	// begin inline asm
	mov.b32 %r885, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r896, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r884, %r1233, -2004318072;
	// begin inline asm
	lop3.b32 %r882, %r975, %r884, %r885, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r886, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r887, %r885, %r886;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r890, %r882, %r887;
	// end inline asm
	// begin inline asm
	lop3.b32 %r893, %r986, %r884, %r896, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r897, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r898, %r896, %r897;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r901, %r893, %r898;
	// end inline asm
	// begin inline asm
	mov.b32 %r931, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r942, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r930, %r1237, -2004318072;
	// begin inline asm
	lop3.b32 %r928, %r975, %r930, %r931, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r932, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r933, %r931, %r932;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r936, %r928, %r933;
	// end inline asm
	// begin inline asm
	lop3.b32 %r939, %r986, %r930, %r942, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r943, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r944, %r942, %r943;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r947, %r939, %r944;
	// end inline asm
	// begin inline asm
	mov.b32 %r977, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r988, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r976, %r1241, -2004318072;
	// begin inline asm
	lop3.b32 %r974, %r975, %r976, %r977, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r978, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r979, %r977, %r978;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r982, %r974, %r979;
	// end inline asm
	// begin inline asm
	lop3.b32 %r985, %r986, %r976, %r988, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r989, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r990, %r988, %r989;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r993, %r985, %r990;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r168;
    mov.b32 {%r2re, %r2im}, %r844;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1018, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r169;
    mov.b32 {%r2re, %r2im}, %r855;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1021, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r168;
    mov.b32 {%r2re, %r2im}, %r890;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1024, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r169;
    mov.b32 {%r2re, %r2im}, %r901;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1027, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r168;
    mov.b32 {%r2re, %r2im}, %r936;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1030, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r169;
    mov.b32 {%r2re, %r2im}, %r947;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1033, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r168;
    mov.b32 {%r2re, %r2im}, %r982;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1036, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r169;
    mov.b32 {%r2re, %r2im}, %r993;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1039, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1097, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1042, %r1043}, {%r194, %r197}, {%r1018}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1049, %r1050}, {%r194, %r197}, {%r1021}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1056, %r1057}, {%r194, %r197}, {%r1024}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1063, %r1064}, {%r194, %r197}, {%r1027}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1070, %r1071}, {%r194, %r197}, {%r1030}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1077, %r1078}, {%r194, %r197}, {%r1033}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1084, %r1085}, {%r194, %r197}, {%r1036}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1091, %r1092}, {%r194, %r197}, {%r1039}, {%r1097, %r1097};
	// end inline asm
	@%p1 bra 	$L__BB0_127;
	bra.uni 	$L__BB0_126;
$L__BB0_127:                            // %pass4679
                                        //   in Loop: Header=BB0_125 Depth=2
	// begin inline asm
	neg.f16x2 %r1098, %r235;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1100, %r1098, %r1043;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1103, %r232, %r1042, %r1100;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1107, %r235;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1109, %r1107, %r1050;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1112, %r232, %r1049, %r1109;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1116, %r235;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1118, %r1116, %r1057;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1121, %r232, %r1056, %r1118;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1125, %r235;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1127, %r1125, %r1064;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1130, %r232, %r1063, %r1127;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1134, %r235;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1136, %r1134, %r1071;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1139, %r232, %r1070, %r1136;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1143, %r235;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1145, %r1143, %r1078;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1148, %r232, %r1077, %r1145;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1152, %r235;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1154, %r1152, %r1085;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1157, %r232, %r1084, %r1154;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1161, %r235;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1163, %r1161, %r1092;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1166, %r232, %r1091, %r1163;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1170, %r235, %r1042;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1173, %r232, %r1043, %r1170;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1177, %r235, %r1049;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1180, %r232, %r1050, %r1177;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1184, %r235, %r1056;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1187, %r232, %r1057, %r1184;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1191, %r235, %r1063;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1194, %r232, %r1064, %r1191;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1198, %r235, %r1070;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1201, %r232, %r1071, %r1198;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1205, %r235, %r1077;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1208, %r232, %r1078, %r1205;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1212, %r235, %r1084;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1215, %r232, %r1085, %r1212;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1219, %r235, %r1091;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1222, %r232, %r1092, %r1219;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1315, %r1316}, {%r279, %r282}, {%r1103, %r1173}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1323, %r1324}, {%r279, %r282}, {%r1112, %r1180}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1331, %r1332}, {%r279, %r282}, {%r1121, %r1187}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1339, %r1340}, {%r279, %r282}, {%r1130, %r1194}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1347, %r1348}, {%r279, %r282}, {%r1139, %r1201}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1355, %r1356}, {%r279, %r282}, {%r1148, %r1208}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1363, %r1364}, {%r279, %r282}, {%r1157, %r1215}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1371, %r1372}, {%r279, %r282}, {%r1166, %r1222}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1314, %r1315, %r1316, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1318, %r1315, %r1316, %r732;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1322, %r1323, %r1324, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1326, %r1323, %r1324, %r732;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1330, %r1331, %r1332, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1334, %r1331, %r1332, %r732;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1338, %r1339, %r1340, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1342, %r1339, %r1340, %r732;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1346, %r1347, %r1348, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1350, %r1347, %r1348, %r732;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1354, %r1355, %r1356, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1358, %r1355, %r1356, %r732;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1362, %r1363, %r1364, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1366, %r1363, %r1364, %r732;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1370, %r1371, %r1372, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1374, %r1371, %r1372, %r732;
	// end inline asm
	st.shared.u32 	[%rd57], %r1314;
	st.shared.u32 	[%rd59+16576], %r1318;
	st.shared.u32 	[%rd60], %r1322;
	st.shared.u32 	[%rd61+16576], %r1326;
	st.shared.u32 	[%rd62], %r1330;
	st.shared.u32 	[%rd63+16576], %r1334;
	st.shared.u32 	[%rd64], %r1338;
	st.shared.u32 	[%rd65+16576], %r1342;
	st.shared.u32 	[%rd66], %r1346;
	st.shared.u32 	[%rd67+16576], %r1350;
	st.shared.u32 	[%rd68], %r1354;
	st.shared.u32 	[%rd69+16576], %r1358;
	st.shared.u32 	[%rd70], %r1362;
	st.shared.u32 	[%rd71+16576], %r1366;
	st.shared.u32 	[%rd72], %r1370;
	st.shared.u32 	[%rd73+16576], %r1374;
	bar.sync 	0;
	ld.shared.u32 	%r1382, [%rd20];
	ld.shared.u32 	%r1389, [%rd21+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1399, %r1396}, {%r291, %r294}, {%r1382}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1408, %r1405}, {%r291, %r294}, {%r1389}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1392, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1394, %r1392, %r1396;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1397, %r325, %r1399, %r1394;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1401, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1403, %r1401, %r1405;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1406, %r325, %r1408, %r1403;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1410, %r328, %r1399;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1413, %r325, %r1396, %r1410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1417, %r328, %r1408;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1420, %r325, %r1405, %r1417;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1443, %r1446}, {%r367, %r370}, {%r1397, %r1413}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1450, %r1454}, {%r367, %r370}, {%r1406, %r1420}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1442, %r1443, %r1443;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1445, %r1446, %r1446, %r1442;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1449, %r1450, %r1450, %r1445;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1453, %r1454, %r1454, %r1449;
	// end inline asm
	mov.u32 	%r2039, 442899046;
	// begin inline asm
	fma.rn.f16x2 %r1457, %r2039, %r1453, %r3300;
	// end inline asm
	ld.shared.u32 	%r1465, [%rd74];
	ld.shared.u32 	%r1472, [%rd75];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1482, %r1479}, {%r291, %r294}, {%r1465}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1491, %r1488}, {%r291, %r294}, {%r1472}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1475, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1477, %r1475, %r1479;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1480, %r325, %r1482, %r1477;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1484, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1486, %r1484, %r1488;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1489, %r325, %r1491, %r1486;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1493, %r328, %r1482;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1496, %r325, %r1479, %r1493;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1500, %r328, %r1491;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1503, %r325, %r1488, %r1500;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1526, %r1529}, {%r367, %r370}, {%r1480, %r1496}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1533, %r1537}, {%r367, %r370}, {%r1489, %r1503}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1525, %r1526, %r1526;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1528, %r1529, %r1529, %r1525;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1532, %r1533, %r1533, %r1528;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1536, %r1537, %r1537, %r1532;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1540, %r2039, %r1536, %r1457;
	// end inline asm
	ld.shared.u32 	%r1548, [%rd76];
	ld.shared.u32 	%r1555, [%rd77];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1565, %r1562}, {%r291, %r294}, {%r1548}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1574, %r1571}, {%r291, %r294}, {%r1555}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1558, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1560, %r1558, %r1562;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1563, %r325, %r1565, %r1560;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1567, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1569, %r1567, %r1571;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1572, %r325, %r1574, %r1569;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1576, %r328, %r1565;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1579, %r325, %r1562, %r1576;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1583, %r328, %r1574;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1586, %r325, %r1571, %r1583;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1609, %r1612}, {%r367, %r370}, {%r1563, %r1579}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1616, %r1620}, {%r367, %r370}, {%r1572, %r1586}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1608, %r1609, %r1609;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1611, %r1612, %r1612, %r1608;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1615, %r1616, %r1616, %r1611;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1619, %r1620, %r1620, %r1615;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1623, %r2039, %r1619, %r1540;
	// end inline asm
	ld.shared.u32 	%r1631, [%rd78];
	ld.shared.u32 	%r1638, [%rd79];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1648, %r1645}, {%r291, %r294}, {%r1631}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1657, %r1654}, {%r291, %r294}, {%r1638}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1641, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1643, %r1641, %r1645;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1646, %r325, %r1648, %r1643;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1650, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1652, %r1650, %r1654;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1655, %r325, %r1657, %r1652;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1659, %r328, %r1648;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1662, %r325, %r1645, %r1659;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1666, %r328, %r1657;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1669, %r325, %r1654, %r1666;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1692, %r1695}, {%r367, %r370}, {%r1646, %r1662}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1699, %r1703}, {%r367, %r370}, {%r1655, %r1669}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1691, %r1692, %r1692;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1694, %r1695, %r1695, %r1691;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1698, %r1699, %r1699, %r1694;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1702, %r1703, %r1703, %r1698;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1706, %r2039, %r1702, %r1623;
	// end inline asm
	ld.shared.u32 	%r1714, [%rd80];
	ld.shared.u32 	%r1721, [%rd81];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1731, %r1728}, {%r291, %r294}, {%r1714}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1740, %r1737}, {%r291, %r294}, {%r1721}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1724, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1726, %r1724, %r1728;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1729, %r325, %r1731, %r1726;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1733, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1735, %r1733, %r1737;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1738, %r325, %r1740, %r1735;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1742, %r328, %r1731;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1745, %r325, %r1728, %r1742;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1749, %r328, %r1740;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1752, %r325, %r1737, %r1749;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1775, %r1778}, {%r367, %r370}, {%r1729, %r1745}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1782, %r1786}, {%r367, %r370}, {%r1738, %r1752}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1774, %r1775, %r1775;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1777, %r1778, %r1778, %r1774;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1781, %r1782, %r1782, %r1777;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1785, %r1786, %r1786, %r1781;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1789, %r2039, %r1785, %r1706;
	// end inline asm
	ld.shared.u32 	%r1797, [%rd82];
	ld.shared.u32 	%r1804, [%rd83];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1814, %r1811}, {%r291, %r294}, {%r1797}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1823, %r1820}, {%r291, %r294}, {%r1804}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1807, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1809, %r1807, %r1811;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1812, %r325, %r1814, %r1809;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1816, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1818, %r1816, %r1820;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1821, %r325, %r1823, %r1818;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1825, %r328, %r1814;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1828, %r325, %r1811, %r1825;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1832, %r328, %r1823;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1835, %r325, %r1820, %r1832;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1858, %r1861}, {%r367, %r370}, {%r1812, %r1828}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1865, %r1869}, {%r367, %r370}, {%r1821, %r1835}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1857, %r1858, %r1858;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1860, %r1861, %r1861, %r1857;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1864, %r1865, %r1865, %r1860;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1868, %r1869, %r1869, %r1864;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1872, %r2039, %r1868, %r1789;
	// end inline asm
	ld.shared.u32 	%r1880, [%rd84];
	ld.shared.u32 	%r1887, [%rd85];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1897, %r1894}, {%r291, %r294}, {%r1880}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1906, %r1903}, {%r291, %r294}, {%r1887}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1890, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1892, %r1890, %r1894;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1895, %r325, %r1897, %r1892;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1899, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1901, %r1899, %r1903;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1904, %r325, %r1906, %r1901;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1908, %r328, %r1897;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1911, %r325, %r1894, %r1908;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1915, %r328, %r1906;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1918, %r325, %r1903, %r1915;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1941, %r1944}, {%r367, %r370}, {%r1895, %r1911}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1948, %r1952}, {%r367, %r370}, {%r1904, %r1918}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1940, %r1941, %r1941;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1943, %r1944, %r1944, %r1940;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1947, %r1948, %r1948, %r1943;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1951, %r1952, %r1952, %r1947;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1955, %r2039, %r1951, %r1872;
	// end inline asm
	ld.shared.u32 	%r1963, [%rd86];
	ld.shared.u32 	%r1970, [%rd87];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1980, %r1977}, {%r291, %r294}, {%r1963}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1989, %r1986}, {%r291, %r294}, {%r1970}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1973, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1975, %r1973, %r1977;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1978, %r325, %r1980, %r1975;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1982, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1984, %r1982, %r1986;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1987, %r325, %r1989, %r1984;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1991, %r328, %r1980;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1994, %r325, %r1977, %r1991;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1998, %r328, %r1989;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2001, %r325, %r1986, %r1998;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2024, %r2027}, {%r367, %r370}, {%r1978, %r1994}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2031, %r2035}, {%r367, %r370}, {%r1987, %r2001}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2023, %r2024, %r2024;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2026, %r2027, %r2027, %r2023;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2030, %r2031, %r2031, %r2026;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2034, %r2035, %r2035, %r2030;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3300, %r2039, %r2034, %r1955;
	// end inline asm
	add.s32 	%r3298, %r3298, 8;
	setp.eq.s32 	%p224, %r3298, 40;
	@%p224 bra 	$L__BB0_128;
	bra.uni 	$L__BB0_130;
$L__BB0_128:                            // %L22691
                                        //   in Loop: Header=BB0_125 Depth=2
	setp.lt.u32 	%p225, %r5, 16;
	@%p225 bra 	$L__BB0_163;
	bra.uni 	$L__BB0_129;
$L__BB0_163:                            // %pass10240
                                        //   in Loop: Header=BB0_125 Depth=2
	shl.b32 	%r2042, %r3299, 9;
	add.s32 	%r2043, %r2042, %r175;
	mul.wide.u32 	%rd245, %r2043, 4;
	add.s64 	%rd6, %rd4, %rd245;
	st.global.u32 	[%rd6], %r3300;
	bra.uni 	$L__BB0_129;
$L__BB0_131:                            // %L22912.preheader
                                        //   in Loop: Header=BB0_124 Depth=1
	or.b32  	%r2046, %r177, 64;
	or.b32  	%r2047, %r172, %r2046;
	add.s32 	%r2048, %r173, %r2047;
	mul.wide.u32 	%rd246, %r2048, 4;
	add.s64 	%rd7, %rd101, %rd246;
	cvt.u64.u32 	%rd248, %r2047;
	add.s64 	%rd249, %rd58, %rd248;
	shl.b64 	%rd250, %rd249, 2;
	add.s64 	%rd8, %rd101, %rd250;
	or.b32  	%r2049, %r174, %r2046;
	add.s32 	%r2050, %r173, %r2049;
	mul.wide.u32 	%rd251, %r2050, 4;
	add.s64 	%rd9, %rd101, %rd251;
	cvt.u64.u32 	%rd252, %r2049;
	add.s64 	%rd253, %rd58, %rd252;
	shl.b64 	%rd254, %rd253, 2;
	add.s64 	%rd10, %rd101, %rd254;
	or.b32  	%r2051, %r177, 128;
	or.b32  	%r2052, %r172, %r2051;
	add.s32 	%r2053, %r173, %r2052;
	mul.wide.u32 	%rd255, %r2053, 4;
	add.s64 	%rd11, %rd101, %rd255;
	cvt.u64.u32 	%rd256, %r2052;
	add.s64 	%rd257, %rd58, %rd256;
	shl.b64 	%rd258, %rd257, 2;
	add.s64 	%rd12, %rd101, %rd258;
	or.b32  	%r2054, %r174, %r2051;
	add.s32 	%r2055, %r173, %r2054;
	mul.wide.u32 	%rd259, %r2055, 4;
	add.s64 	%rd13, %rd101, %rd259;
	cvt.u64.u32 	%rd260, %r2054;
	add.s64 	%rd261, %rd58, %rd260;
	shl.b64 	%rd262, %rd261, 2;
	add.s64 	%rd14, %rd101, %rd262;
	or.b32  	%r2056, %r177, 192;
	or.b32  	%r2057, %r172, %r2056;
	add.s32 	%r2058, %r173, %r2057;
	mul.wide.u32 	%rd263, %r2058, 4;
	add.s64 	%rd15, %rd101, %rd263;
	cvt.u64.u32 	%rd264, %r2057;
	add.s64 	%rd265, %rd58, %rd264;
	shl.b64 	%rd266, %rd265, 2;
	add.s64 	%rd16, %rd101, %rd266;
	or.b32  	%r2059, %r174, %r2056;
	add.s32 	%r2060, %r173, %r2059;
	mul.wide.u32 	%rd267, %r2060, 4;
	add.s64 	%rd17, %rd101, %rd267;
	cvt.u64.u32 	%rd268, %r2059;
	add.s64 	%rd269, %rd58, %rd268;
	shl.b64 	%rd270, %rd269, 2;
	add.s64 	%rd18, %rd101, %rd270;
	mov.u32 	%r3304, 16;
	bra.uni 	$L__BB0_132;
$L__BB0_134:                            // %L35565
                                        //   in Loop: Header=BB0_132 Depth=2
	add.s32 	%r3299, %r3299, 1;
	mov.u32 	%r3298, %r1097;
	mov.u32 	%r3300, %r1097;
$L__BB0_135:                            // %L35566
                                        //   in Loop: Header=BB0_132 Depth=2
	bar.sync 	0;
	add.s32 	%r3304, %r3304, -8;
	setp.ne.s32 	%p233, %r3304, -16;
	@%p233 bra 	$L__BB0_132;
	bra.uni 	$L__BB0_136;
$L__BB0_132:                            // %L22912
                                        //   Parent Loop BB0_124 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p227, %r3304, 16;
	selp.b32 	%r3253, %r91, 0, %p227;
	setp.eq.s32 	%p228, %r3304, 8;
	selp.b32 	%r3254, %r95, %r3253, %p228;
	setp.eq.s32 	%p229, %r3304, 0;
	selp.b32 	%r3255, %r99, %r3254, %p229;
	setp.eq.s32 	%p230, %r3304, -8;
	selp.b32 	%r3256, %r103, %r3255, %p230;
	selp.b32 	%r3257, %r92, 0, %p227;
	selp.b32 	%r3258, %r96, %r3257, %p228;
	selp.b32 	%r3259, %r100, %r3258, %p229;
	selp.b32 	%r3260, %r104, %r3259, %p230;
	selp.b32 	%r3261, %r93, 0, %p227;
	selp.b32 	%r3262, %r97, %r3261, %p228;
	selp.b32 	%r3263, %r101, %r3262, %p229;
	selp.b32 	%r3264, %r105, %r3263, %p230;
	selp.b32 	%r3265, %r94, 0, %p227;
	selp.b32 	%r3266, %r98, %r3265, %p228;
	selp.b32 	%r3267, %r102, %r3266, %p229;
	selp.b32 	%r3268, %r106, %r3267, %p230;
	// begin inline asm
	mov.b32 %r2088, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2099, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r3269, %r3256, 8;
	xor.b32  	%r2098, %r3269, 8947848;
	// begin inline asm
	lop3.b32 %r2085, %r975, %r2098, %r2088, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2089, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2090, %r2088, %r2089;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2093, %r2085, %r2090;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2096, %r986, %r2098, %r2099, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2100, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2101, %r2099, %r2100;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2104, %r2096, %r2101;
	// end inline asm
	// begin inline asm
	mov.b32 %r2134, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2145, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r3270, %r3260, 8;
	xor.b32  	%r2144, %r3270, 8947848;
	// begin inline asm
	lop3.b32 %r2131, %r975, %r2144, %r2134, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2135, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2136, %r2134, %r2135;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2139, %r2131, %r2136;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2142, %r986, %r2144, %r2145, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2146, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2147, %r2145, %r2146;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2150, %r2142, %r2147;
	// end inline asm
	// begin inline asm
	mov.b32 %r2180, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2191, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r3271, %r3264, 8;
	xor.b32  	%r2190, %r3271, 8947848;
	// begin inline asm
	lop3.b32 %r2177, %r975, %r2190, %r2180, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2181, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2182, %r2180, %r2181;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2185, %r2177, %r2182;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2188, %r986, %r2190, %r2191, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2192, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2193, %r2191, %r2192;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2196, %r2188, %r2193;
	// end inline asm
	// begin inline asm
	mov.b32 %r2226, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2237, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r3272, %r3268, 8;
	xor.b32  	%r2236, %r3272, 8947848;
	// begin inline asm
	lop3.b32 %r2223, %r975, %r2236, %r2226, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2227, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2228, %r2226, %r2227;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2231, %r2223, %r2228;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2234, %r986, %r2236, %r2237, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2238, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2239, %r2237, %r2238;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2242, %r2234, %r2239;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r168;
    mov.b32 {%r2re, %r2im}, %r2093;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2245, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r169;
    mov.b32 {%r2re, %r2im}, %r2104;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2248, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r168;
    mov.b32 {%r2re, %r2im}, %r2139;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2251, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r169;
    mov.b32 {%r2re, %r2im}, %r2150;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2254, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r168;
    mov.b32 {%r2re, %r2im}, %r2185;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2257, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r169;
    mov.b32 {%r2re, %r2im}, %r2196;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2260, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r168;
    mov.b32 {%r2re, %r2im}, %r2231;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2263, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r169;
    mov.b32 {%r2re, %r2im}, %r2242;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2266, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2332, %r2329}, {%r194, %r197}, {%r2245}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2341, %r2338}, {%r194, %r197}, {%r2248}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2350, %r2347}, {%r194, %r197}, {%r2251}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2359, %r2356}, {%r194, %r197}, {%r2254}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2368, %r2365}, {%r194, %r197}, {%r2257}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2377, %r2374}, {%r194, %r197}, {%r2260}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2386, %r2383}, {%r194, %r197}, {%r2263}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2395, %r2392}, {%r194, %r197}, {%r2266}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2325, %r235;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2327, %r2325, %r2329;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2330, %r232, %r2332, %r2327;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2334, %r235;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2336, %r2334, %r2338;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2339, %r232, %r2341, %r2336;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2343, %r235;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2345, %r2343, %r2347;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2348, %r232, %r2350, %r2345;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2352, %r235;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2354, %r2352, %r2356;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2357, %r232, %r2359, %r2354;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2361, %r235;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2363, %r2361, %r2365;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2366, %r232, %r2368, %r2363;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2370, %r235;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2372, %r2370, %r2374;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2375, %r232, %r2377, %r2372;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2379, %r235;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2381, %r2379, %r2383;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2384, %r232, %r2386, %r2381;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2388, %r235;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2390, %r2388, %r2392;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2393, %r232, %r2395, %r2390;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2397, %r235, %r2332;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2400, %r232, %r2329, %r2397;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2404, %r235, %r2341;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2407, %r232, %r2338, %r2404;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2411, %r235, %r2350;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2414, %r232, %r2347, %r2411;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2418, %r235, %r2359;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2421, %r232, %r2356, %r2418;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2425, %r235, %r2368;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2428, %r232, %r2365, %r2425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2432, %r235, %r2377;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2435, %r232, %r2374, %r2432;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2439, %r235, %r2386;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2442, %r232, %r2383, %r2439;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2446, %r235, %r2395;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2449, %r232, %r2392, %r2446;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2526, %r2527}, {%r279, %r282}, {%r2330, %r2400}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2534, %r2535}, {%r279, %r282}, {%r2339, %r2407}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2542, %r2543}, {%r279, %r282}, {%r2348, %r2414}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2550, %r2551}, {%r279, %r282}, {%r2357, %r2421}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2558, %r2559}, {%r279, %r282}, {%r2366, %r2428}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2566, %r2567}, {%r279, %r282}, {%r2375, %r2435}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2574, %r2575}, {%r279, %r282}, {%r2384, %r2442}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2582, %r2583}, {%r279, %r282}, {%r2393, %r2449}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2525, %r2526, %r2527, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2529, %r2526, %r2527, %r732;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2533, %r2534, %r2535, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2537, %r2534, %r2535, %r732;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2541, %r2542, %r2543, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2545, %r2542, %r2543, %r732;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2549, %r2550, %r2551, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2553, %r2550, %r2551, %r732;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2557, %r2558, %r2559, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2561, %r2558, %r2559, %r732;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2565, %r2566, %r2567, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2569, %r2566, %r2567, %r732;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2573, %r2574, %r2575, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2577, %r2574, %r2575, %r732;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2581, %r2582, %r2583, %r728;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2585, %r2582, %r2583, %r732;
	// end inline asm
	st.shared.u32 	[%rd57], %r2525;
	st.shared.u32 	[%rd59+16576], %r2529;
	st.shared.u32 	[%rd60], %r2533;
	st.shared.u32 	[%rd61+16576], %r2537;
	st.shared.u32 	[%rd7], %r2541;
	st.shared.u32 	[%rd8+16576], %r2545;
	st.shared.u32 	[%rd9], %r2549;
	st.shared.u32 	[%rd10+16576], %r2553;
	st.shared.u32 	[%rd11], %r2557;
	st.shared.u32 	[%rd12+16576], %r2561;
	st.shared.u32 	[%rd13], %r2565;
	st.shared.u32 	[%rd14+16576], %r2569;
	st.shared.u32 	[%rd15], %r2573;
	st.shared.u32 	[%rd16+16576], %r2577;
	st.shared.u32 	[%rd17], %r2581;
	st.shared.u32 	[%rd18+16576], %r2585;
	bar.sync 	0;
	ld.shared.u32 	%r2593, [%rd20];
	ld.shared.u32 	%r2600, [%rd21+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2610, %r2607}, {%r291, %r294}, {%r2593}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2619, %r2616}, {%r291, %r294}, {%r2600}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2603, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2605, %r2603, %r2607;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2608, %r325, %r2610, %r2605;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2612, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2614, %r2612, %r2616;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2617, %r325, %r2619, %r2614;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2621, %r328, %r2610;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2624, %r325, %r2607, %r2621;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2628, %r328, %r2619;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2631, %r325, %r2616, %r2628;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2654, %r2657}, {%r367, %r370}, {%r2608, %r2624}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2661, %r2665}, {%r367, %r370}, {%r2617, %r2631}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2653, %r2654, %r2654;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2656, %r2657, %r2657, %r2653;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2660, %r2661, %r2661, %r2656;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2664, %r2665, %r2665, %r2660;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2668, %r2039, %r2664, %r3300;
	// end inline asm
	ld.shared.u32 	%r2676, [%rd74];
	ld.shared.u32 	%r2683, [%rd75];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2693, %r2690}, {%r291, %r294}, {%r2676}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2702, %r2699}, {%r291, %r294}, {%r2683}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2686, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2688, %r2686, %r2690;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2691, %r325, %r2693, %r2688;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2695, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2697, %r2695, %r2699;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2700, %r325, %r2702, %r2697;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2704, %r328, %r2693;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2707, %r325, %r2690, %r2704;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2711, %r328, %r2702;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2714, %r325, %r2699, %r2711;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2737, %r2740}, {%r367, %r370}, {%r2691, %r2707}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2744, %r2748}, {%r367, %r370}, {%r2700, %r2714}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2736, %r2737, %r2737;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2739, %r2740, %r2740, %r2736;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2743, %r2744, %r2744, %r2739;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2747, %r2748, %r2748, %r2743;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2751, %r2039, %r2747, %r2668;
	// end inline asm
	ld.shared.u32 	%r2759, [%rd76];
	ld.shared.u32 	%r2766, [%rd77];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2776, %r2773}, {%r291, %r294}, {%r2759}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2785, %r2782}, {%r291, %r294}, {%r2766}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2769, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2771, %r2769, %r2773;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2774, %r325, %r2776, %r2771;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2778, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2780, %r2778, %r2782;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2783, %r325, %r2785, %r2780;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2787, %r328, %r2776;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2790, %r325, %r2773, %r2787;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2794, %r328, %r2785;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2797, %r325, %r2782, %r2794;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2820, %r2823}, {%r367, %r370}, {%r2774, %r2790}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2827, %r2831}, {%r367, %r370}, {%r2783, %r2797}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2819, %r2820, %r2820;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2822, %r2823, %r2823, %r2819;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2826, %r2827, %r2827, %r2822;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2830, %r2831, %r2831, %r2826;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2834, %r2039, %r2830, %r2751;
	// end inline asm
	ld.shared.u32 	%r2842, [%rd78];
	ld.shared.u32 	%r2849, [%rd79];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2859, %r2856}, {%r291, %r294}, {%r2842}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2868, %r2865}, {%r291, %r294}, {%r2849}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2852, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2854, %r2852, %r2856;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2857, %r325, %r2859, %r2854;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2861, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2863, %r2861, %r2865;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2866, %r325, %r2868, %r2863;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2870, %r328, %r2859;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2873, %r325, %r2856, %r2870;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2877, %r328, %r2868;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2880, %r325, %r2865, %r2877;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2903, %r2906}, {%r367, %r370}, {%r2857, %r2873}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2910, %r2914}, {%r367, %r370}, {%r2866, %r2880}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2902, %r2903, %r2903;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2905, %r2906, %r2906, %r2902;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2909, %r2910, %r2910, %r2905;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2913, %r2914, %r2914, %r2909;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2917, %r2039, %r2913, %r2834;
	// end inline asm
	ld.shared.u32 	%r2925, [%rd80];
	ld.shared.u32 	%r2932, [%rd81];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2942, %r2939}, {%r291, %r294}, {%r2925}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2951, %r2948}, {%r291, %r294}, {%r2932}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2935, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2937, %r2935, %r2939;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2940, %r325, %r2942, %r2937;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2944, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2946, %r2944, %r2948;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2949, %r325, %r2951, %r2946;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2953, %r328, %r2942;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2956, %r325, %r2939, %r2953;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2960, %r328, %r2951;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2963, %r325, %r2948, %r2960;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2986, %r2989}, {%r367, %r370}, {%r2940, %r2956}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2993, %r2997}, {%r367, %r370}, {%r2949, %r2963}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2985, %r2986, %r2986;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2988, %r2989, %r2989, %r2985;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2992, %r2993, %r2993, %r2988;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2996, %r2997, %r2997, %r2992;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3000, %r2039, %r2996, %r2917;
	// end inline asm
	ld.shared.u32 	%r3008, [%rd82];
	ld.shared.u32 	%r3015, [%rd83];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3025, %r3022}, {%r291, %r294}, {%r3008}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3034, %r3031}, {%r291, %r294}, {%r3015}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3018, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3020, %r3018, %r3022;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3023, %r325, %r3025, %r3020;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3027, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3029, %r3027, %r3031;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3032, %r325, %r3034, %r3029;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3036, %r328, %r3025;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3039, %r325, %r3022, %r3036;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3043, %r328, %r3034;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3046, %r325, %r3031, %r3043;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3069, %r3072}, {%r367, %r370}, {%r3023, %r3039}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3076, %r3080}, {%r367, %r370}, {%r3032, %r3046}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3068, %r3069, %r3069;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3071, %r3072, %r3072, %r3068;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3075, %r3076, %r3076, %r3071;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3079, %r3080, %r3080, %r3075;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3083, %r2039, %r3079, %r3000;
	// end inline asm
	ld.shared.u32 	%r3091, [%rd84];
	ld.shared.u32 	%r3098, [%rd85];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3108, %r3105}, {%r291, %r294}, {%r3091}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3117, %r3114}, {%r291, %r294}, {%r3098}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3101, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3103, %r3101, %r3105;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3106, %r325, %r3108, %r3103;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3110, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3112, %r3110, %r3114;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3115, %r325, %r3117, %r3112;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3119, %r328, %r3108;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3122, %r325, %r3105, %r3119;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3126, %r328, %r3117;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3129, %r325, %r3114, %r3126;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3152, %r3155}, {%r367, %r370}, {%r3106, %r3122}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3159, %r3163}, {%r367, %r370}, {%r3115, %r3129}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3151, %r3152, %r3152;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3154, %r3155, %r3155, %r3151;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3158, %r3159, %r3159, %r3154;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3162, %r3163, %r3163, %r3158;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3166, %r2039, %r3162, %r3083;
	// end inline asm
	ld.shared.u32 	%r3174, [%rd86];
	ld.shared.u32 	%r3181, [%rd87];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3191, %r3188}, {%r291, %r294}, {%r3174}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3200, %r3197}, {%r291, %r294}, {%r3181}, {%r1097, %r1097};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3184, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3186, %r3184, %r3188;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3189, %r325, %r3191, %r3186;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3193, %r328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3195, %r3193, %r3197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3198, %r325, %r3200, %r3195;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3202, %r328, %r3191;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3205, %r325, %r3188, %r3202;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3209, %r328, %r3200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3212, %r325, %r3197, %r3209;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3235, %r3238}, {%r367, %r370}, {%r3189, %r3205}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3242, %r3246}, {%r367, %r370}, {%r3198, %r3212}, {%r1097, %r1097}, %r176, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3234, %r3235, %r3235;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3237, %r3238, %r3238, %r3234;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3241, %r3242, %r3242, %r3237;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3245, %r3246, %r3246, %r3241;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3300, %r2039, %r3245, %r3166;
	// end inline asm
	add.s32 	%r3298, %r3298, 8;
	setp.ne.s32 	%p231, %r3298, 40;
	@%p231 bra 	$L__BB0_135;
// %bb.133:                             // %L35366
                                        //   in Loop: Header=BB0_132 Depth=2
	setp.lt.u32 	%p232, %r5, 16;
	@%p232 bra 	$L__BB0_164;
	bra.uni 	$L__BB0_134;
$L__BB0_164:                            // %pass15894
                                        //   in Loop: Header=BB0_132 Depth=2
	shl.b32 	%r3273, %r3299, 9;
	add.s32 	%r3274, %r3273, %r175;
	mul.wide.u32 	%rd271, %r3274, 4;
	add.s64 	%rd19, %rd4, %rd271;
	st.global.u32 	[%rd19], %r3300;
	bra.uni 	$L__BB0_134;
$L__BB0_137:                            // %L35597
	st.global.u32 	[%rd5], %r1097;
	ret;
$L__BB0_126:                            // %post_box_union
	mov.u64 	%rd243, exception3094;
	cvta.global.u64 	%rd244, %rd243;
	{ // callseq 8, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd244;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 8
	{ // callseq 9, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd88;
	st.param.b32 	[param0+8], %r180;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 9
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd93, exception13106;
	cvta.global.u64 	%rd94, %rd93;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd94;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd88;
	st.param.b32 	[param0+8], %r180;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
