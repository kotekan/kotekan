// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int32, 1}, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE // -- Begin function _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception3244[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception3292[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE
.visible .entry _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_9[32]
)
.reqntid 512, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<340>;
	.reg .b16 	%rs<97>;
	.reg .b32 	%r<3550>;
	.reg .f32 	%f<752>;
	.reg .b64 	%rd<452>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r271, [_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd86, [_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r272, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r272, 34943;
	@%p2 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd103, [_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_9];
	ld.param.u64 	%rd87, [_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %ctaid.x;
	shl.b32 	%r5, %r4, 9;
	or.b32  	%r273, %r3, %r1;
	or.b32  	%r274, %r273, %r5;
	mul.wide.u32 	%rd109, %r274, 4;
	add.s64 	%rd5, %rd103, %rd109;
	mov.u32 	%r275, 1;
	st.global.u32 	[%rd5], %r275;
	ld.global.u32 	%r6, [%rd87];
	setp.lt.s32 	%p3, %r6, 0;
	@%p3 bra 	$L__BB0_6;
// %bb.3:                               // %L205
	ld.param.u64 	%rd91, [_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_2];
	ld.global.u32 	%r7, [%rd91];
	setp.lt.s32 	%p4, %r7, %r6;
	setp.gt.s32 	%p5, %r7, 1024;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_6;
// %bb.4:                               // %L215
	ld.param.u64 	%rd95, [_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_3];
	ld.global.u32 	%r8, [%rd95];
	sub.s32 	%r10, %r7, %r6;
	and.b32  	%r276, %r10, 63;
	setp.ne.s32 	%p7, %r276, 0;
	setp.lt.s32 	%p8, %r8, 0;
	or.pred  	%p9, %p7, %p8;
	@%p9 bra 	$L__BB0_6;
// %bb.5:                               // %L221
	ld.param.u64 	%rd99, [_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_4];
	ld.global.u32 	%r9, [%rd99];
	setp.ge.s32 	%p10, %r9, %r8;
	setp.lt.s32 	%p11, %r9, 65;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_6;
$L__BB0_190:                            // %pass75
	sub.s32 	%r277, %r9, %r8;
	mul.hi.s32 	%r278, %r10, 1374389535;
	shr.u32 	%r279, %r278, 31;
	shr.s32 	%r280, %r278, 3;
	add.s32 	%r281, %r280, %r279;
	setp.ne.s32 	%p13, %r277, %r281;
	@%p13 bra 	$L__BB0_6;
// %bb.191:                             // %pass126
	and.b32  	%r145, %r1, 3;
	shr.u32 	%r146, %r1, 2;
	mul.lo.s32 	%r282, %r145, %r146;
	and.b32  	%r283, %r282, 7;
	cvt.rn.f32.s32 	%f185, %r283;
	mov.f32 	%f186, 0f40800000;
	div.approx.f32 	%f151, %f185, %f186;
	abs.f32 	%f750, %f151;
	setp.lt.f32 	%p14, %f750, 0f40000000;
	mov.f32 	%f703, 0f40000000;
	setp.gtu.f32 	%p335, %f750, 0f4B800000;
	mov.f32 	%f746, %f750;
	@%p14 bra 	$L__BB0_203;
// %bb.192:
	@%p335 bra 	$L__BB0_199;
	bra.uni 	$L__BB0_193;
$L__BB0_199:
	mov.b32 	%r148, %f750;
	and.b32  	%r284, %r148, 8388607;
	or.b32  	%r3503, %r284, 1065353216;
	mov.b32 	%f745, %r3503;
	add.s32 	%r285, %r148, -1073741824;
	and.b32  	%r3504, %r285, -8388608;
	setp.eq.s32 	%p21, %r3504, 0;
	@%p21 bra 	$L__BB0_202;
// %bb.200:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f196, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f195,%f196;
	// end inline asm
$L__BB0_201:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r286, %r3504, 192937984;
	add.s32 	%r287, %r3503, %r286;
	mov.b32 	%f197, %r287;
	mul.f32 	%f198, %f195, %f197;
	sub.f32 	%f199, %f197, %f198;
	fma.rn.f32 	%f200, %f199, %f195, %f198;
	sub.f32 	%f201, %f197, %f200;
	fma.rz.f32 	%f202, %f201, %f195, %f200;
	cvt.rzi.f32.f32 	%f203, %f202;
	sub.f32 	%f745, %f197, %f203;
	sub.s32 	%r3504, %r3504, %r286;
	mov.b32 	%r3503, %f745;
	setp.ne.s32 	%p22, %r3504, 0;
	setp.ne.s32 	%p23, %r3503, 0;
	and.pred  	%p24, %p22, %p23;
	@%p24 bra 	$L__BB0_201;
$L__BB0_202:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p25, %r148, 2139095039;
	selp.f32 	%f204, 0f7FFFFFFF, 0f4B800000, %p25;
	mul.f32 	%f205, %f745, 0f34000000;
	mul.f32 	%f746, %f204, %f205;
	bra.uni 	$L__BB0_203;
$L__BB0_193:                            // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f188, %f750, %f703;
	cvt.rzi.f32.f32 	%f744, %f188;
	fma.rn.f32 	%f154, %f744, 0fC0000000, %f750;
	mov.b32 	%r147, %f154;
	setp.lt.u32 	%p16, %r147, 1073741824;
	@%p16 bra 	$L__BB0_198;
// %bb.194:
	setp.lt.u32 	%p17, %r147, -2147483647;
	@%p17 bra 	$L__BB0_196;
// %bb.195:
	add.f32 	%f193, %f744, 0fBF800000;
	setp.lt.f32 	%p20, %f154, 0fC0000000;
	add.f32 	%f194, %f193, 0fBF800000;
	selp.f32 	%f744, %f194, %f193, %p20;
	bra.uni 	$L__BB0_198;
$L__BB0_196:
	add.f32 	%f744, %f744, 0f3F800000;
	setp.ltu.f32 	%p18, %f154, 0f40800000;
	@%p18 bra 	$L__BB0_198;
// %bb.197:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f189, %f744, 0f3F800000;
	fma.rn.f32 	%f191, %f703, 0fC0400000, %f154;
	setp.ge.f32 	%p19, %f191, 0f00000000;
	add.f32 	%f192, %f189, 0f3F800000;
	selp.f32 	%f744, %f192, %f189, %p19;
$L__BB0_198:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f746, %f744, 0fC0000000, %f750;
$L__BB0_203:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f206, %f746;
	setp.gtu.f32 	%p26, %f206, 0f7F800000;
	mov.b32 	%r288, %f151;
	and.b32  	%r155, %r288, -2147483648;
	@%p26 bra 	$L__BB0_205;
// %bb.204:
	mov.b32 	%r289, %f746;
	or.b32  	%r290, %r155, %r289;
	mov.b32 	%f746, %r290;
$L__BB0_205:                            // %__nv_fmodf.exit
	add.f32 	%f207, %f746, %f746;
	mov.b32 	%r297, %f207;
	and.b32  	%r298, %r297, -2147483648;
	shl.b32 	%r158, %r1, 1;
	and.b32  	%r305, %r158, 2;
	mul.lo.s32 	%r159, %r305, %r146;
	cvt.rn.f32.s32 	%f239, %r159;
	mov.f32 	%f240, 0f41800000;
	div.approx.f32 	%f168, %f239, %f240;
	abs.f32 	%f726, %f168;
	setp.lt.f32 	%p34, %f726, 0f40000000;
	setp.gtu.f32 	%p336, %f726, 0f4B800000;
	mov.f32 	%f706, %f726;
	@%p34 bra 	$L__BB0_18;
// %bb.7:
	@%p336 bra 	$L__BB0_14;
	bra.uni 	$L__BB0_8;
$L__BB0_14:
	mov.b32 	%r12, %f726;
	and.b32  	%r306, %r12, 8388607;
	or.b32  	%r3469, %r306, 1065353216;
	mov.b32 	%f705, %r3469;
	add.s32 	%r307, %r12, -1073741824;
	and.b32  	%r3470, %r307, -8388608;
	setp.eq.s32 	%p41, %r3470, 0;
	@%p41 bra 	$L__BB0_17;
// %bb.15:                              // %__nv_fmaf_rn.exit4.i.i.i2367.preheader
	mov.f32 	%f250, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f249,%f250;
	// end inline asm
$L__BB0_16:                             // %__nv_fmaf_rn.exit4.i.i.i2367
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r308, %r3470, 192937984;
	add.s32 	%r309, %r3469, %r308;
	mov.b32 	%f251, %r309;
	mul.f32 	%f252, %f249, %f251;
	sub.f32 	%f253, %f251, %f252;
	fma.rn.f32 	%f254, %f253, %f249, %f252;
	sub.f32 	%f255, %f251, %f254;
	fma.rz.f32 	%f256, %f255, %f249, %f254;
	cvt.rzi.f32.f32 	%f257, %f256;
	sub.f32 	%f705, %f251, %f257;
	sub.s32 	%r3470, %r3470, %r308;
	mov.b32 	%r3469, %f705;
	setp.ne.s32 	%p42, %r3470, 0;
	setp.ne.s32 	%p43, %r3469, 0;
	and.pred  	%p44, %p42, %p43;
	@%p44 bra 	$L__BB0_16;
$L__BB0_17:                             // %__internal_fmodf_slowpath_mod.exit.i.i2369
	setp.gt.u32 	%p45, %r12, 2139095039;
	selp.f32 	%f258, 0f7FFFFFFF, 0f4B800000, %p45;
	mul.f32 	%f259, %f705, 0f34000000;
	mul.f32 	%f706, %f258, %f259;
	bra.uni 	$L__BB0_18;
$L__BB0_8:                              // %__nv_fast_fdividef.exit.i.i.i2346
	div.approx.f32 	%f242, %f726, %f703;
	cvt.rzi.f32.f32 	%f704, %f242;
	fma.rn.f32 	%f2, %f704, 0fC0000000, %f726;
	mov.b32 	%r11, %f2;
	setp.lt.u32 	%p36, %r11, 1073741824;
	@%p36 bra 	$L__BB0_13;
// %bb.9:
	setp.lt.u32 	%p37, %r11, -2147483647;
	@%p37 bra 	$L__BB0_11;
// %bb.10:
	add.f32 	%f247, %f704, 0fBF800000;
	setp.lt.f32 	%p40, %f2, 0fC0000000;
	add.f32 	%f248, %f247, 0fBF800000;
	selp.f32 	%f704, %f248, %f247, %p40;
	bra.uni 	$L__BB0_13;
$L__BB0_11:
	add.f32 	%f704, %f704, 0f3F800000;
	setp.ltu.f32 	%p38, %f2, 0f40800000;
	@%p38 bra 	$L__BB0_13;
// %bb.12:                              // %__nv_fmaf_rn.exit.i.i.i2350
	add.f32 	%f243, %f704, 0f3F800000;
	fma.rn.f32 	%f245, %f703, 0fC0400000, %f2;
	setp.ge.f32 	%p39, %f245, 0f00000000;
	add.f32 	%f246, %f243, 0f3F800000;
	selp.f32 	%f704, %f246, %f243, %p39;
$L__BB0_13:                             // %__internal_fmodf_fastpath_quot.exit.i.i2353
	fma.rn.f32 	%f706, %f704, 0fC0000000, %f726;
$L__BB0_18:                             // %__internal_fmodf_kernel.exit.i2372
	or.b32  	%r299, %r298, 1056964608;
	abs.f32 	%f260, %f706;
	setp.gtu.f32 	%p46, %f260, 0f7F800000;
	mov.b32 	%r310, %f168;
	and.b32  	%r19, %r310, -2147483648;
	@%p46 bra 	$L__BB0_20;
// %bb.19:
	mov.b32 	%r311, %f706;
	or.b32  	%r312, %r19, %r311;
	mov.b32 	%f706, %r312;
$L__BB0_20:                             // %__nv_fmodf.exit2373
	mov.b32 	%f208, %r299;
	add.f32 	%f261, %f706, %f706;
	mov.b32 	%r313, %f261;
	and.b32  	%r314, %r313, -2147483648;
	or.b32  	%r315, %r314, 1056964608;
	add.s32 	%r321, %r159, %r146;
	cvt.rn.f32.s32 	%f291, %r321;
	div.approx.f32 	%f18, %f291, %f240;
	abs.f32 	%f730, %f18;
	setp.lt.f32 	%p54, %f730, 0f40000000;
	setp.gtu.f32 	%p337, %f730, 0f4B800000;
	mov.f32 	%f710, %f730;
	@%p54 bra 	$L__BB0_32;
// %bb.21:
	@%p337 bra 	$L__BB0_28;
	bra.uni 	$L__BB0_22;
$L__BB0_28:
	mov.b32 	%r21, %f730;
	and.b32  	%r322, %r21, 8388607;
	or.b32  	%r3471, %r322, 1065353216;
	mov.b32 	%f709, %r3471;
	add.s32 	%r323, %r21, -1073741824;
	and.b32  	%r3472, %r323, -8388608;
	setp.eq.s32 	%p61, %r3472, 0;
	@%p61 bra 	$L__BB0_31;
// %bb.29:                              // %__nv_fmaf_rn.exit4.i.i.i2398.preheader
	mov.f32 	%f302, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f301,%f302;
	// end inline asm
$L__BB0_30:                             // %__nv_fmaf_rn.exit4.i.i.i2398
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r324, %r3472, 192937984;
	add.s32 	%r325, %r3471, %r324;
	mov.b32 	%f303, %r325;
	mul.f32 	%f304, %f301, %f303;
	sub.f32 	%f305, %f303, %f304;
	fma.rn.f32 	%f306, %f305, %f301, %f304;
	sub.f32 	%f307, %f303, %f306;
	fma.rz.f32 	%f308, %f307, %f301, %f306;
	cvt.rzi.f32.f32 	%f309, %f308;
	sub.f32 	%f709, %f303, %f309;
	sub.s32 	%r3472, %r3472, %r324;
	mov.b32 	%r3471, %f709;
	setp.ne.s32 	%p62, %r3472, 0;
	setp.ne.s32 	%p63, %r3471, 0;
	and.pred  	%p64, %p62, %p63;
	@%p64 bra 	$L__BB0_30;
$L__BB0_31:                             // %__internal_fmodf_slowpath_mod.exit.i.i2400
	setp.gt.u32 	%p65, %r21, 2139095039;
	selp.f32 	%f310, 0f7FFFFFFF, 0f4B800000, %p65;
	mul.f32 	%f311, %f709, 0f34000000;
	mul.f32 	%f710, %f310, %f311;
	bra.uni 	$L__BB0_32;
$L__BB0_22:                             // %__nv_fast_fdividef.exit.i.i.i2377
	div.approx.f32 	%f294, %f730, %f703;
	cvt.rzi.f32.f32 	%f708, %f294;
	fma.rn.f32 	%f21, %f708, 0fC0000000, %f730;
	mov.b32 	%r20, %f21;
	setp.lt.u32 	%p56, %r20, 1073741824;
	@%p56 bra 	$L__BB0_27;
// %bb.23:
	setp.lt.u32 	%p57, %r20, -2147483647;
	@%p57 bra 	$L__BB0_25;
// %bb.24:
	add.f32 	%f299, %f708, 0fBF800000;
	setp.lt.f32 	%p60, %f21, 0fC0000000;
	add.f32 	%f300, %f299, 0fBF800000;
	selp.f32 	%f708, %f300, %f299, %p60;
	bra.uni 	$L__BB0_27;
$L__BB0_25:
	add.f32 	%f708, %f708, 0f3F800000;
	setp.ltu.f32 	%p58, %f21, 0f40800000;
	@%p58 bra 	$L__BB0_27;
// %bb.26:                              // %__nv_fmaf_rn.exit.i.i.i2381
	add.f32 	%f295, %f708, 0f3F800000;
	fma.rn.f32 	%f297, %f703, 0fC0400000, %f21;
	setp.ge.f32 	%p59, %f297, 0f00000000;
	add.f32 	%f298, %f295, 0f3F800000;
	selp.f32 	%f708, %f298, %f295, %p59;
$L__BB0_27:                             // %__internal_fmodf_fastpath_quot.exit.i.i2384
	fma.rn.f32 	%f710, %f708, 0fC0000000, %f730;
$L__BB0_32:                             // %__internal_fmodf_kernel.exit.i2403
	add.f32 	%f209, %f207, %f208;
	abs.f32 	%f211, %f207;
	mov.b32 	%f262, %r315;
	abs.f32 	%f312, %f710;
	setp.gtu.f32 	%p66, %f312, 0f7F800000;
	mov.b32 	%r326, %f18;
	and.b32  	%r28, %r326, -2147483648;
	@%p66 bra 	$L__BB0_34;
// %bb.33:
	mov.b32 	%r327, %f710;
	or.b32  	%r328, %r28, %r327;
	mov.b32 	%f710, %r328;
$L__BB0_34:                             // %__nv_fmodf.exit2404
	cvt.rzi.f32.f32 	%f210, %f209;
	setp.gt.f32 	%p27, %f211, 0f4B000000;
	add.f32 	%f263, %f261, %f262;
	abs.f32 	%f265, %f261;
	add.f32 	%f313, %f710, %f710;
	mov.b32 	%r335, %f313;
	and.b32  	%r336, %r335, -2147483648;
	or.b32  	%r337, %r336, 1056964608;
	mov.b32 	%f314, %r337;
	add.f32 	%f315, %f313, %f314;
	abs.f32 	%f317, %f313;
	mul.lo.s32 	%r31, %r158, %r146;
	and.b32  	%r343, %r31, 2;
	cvt.rn.f32.s32 	%f345, %r343;
	div.approx.f32 	%f35, %f345, %f703;
	abs.f32 	%f734, %f35;
	setp.lt.f32 	%p74, %f734, 0f40000000;
	setp.gtu.f32 	%p338, %f734, 0f4B800000;
	mov.f32 	%f714, %f734;
	@%p74 bra 	$L__BB0_46;
// %bb.35:
	@%p338 bra 	$L__BB0_42;
	bra.uni 	$L__BB0_36;
$L__BB0_42:
	mov.b32 	%r33, %f734;
	and.b32  	%r344, %r33, 8388607;
	or.b32  	%r3473, %r344, 1065353216;
	mov.b32 	%f713, %r3473;
	add.s32 	%r345, %r33, -1073741824;
	and.b32  	%r3474, %r345, -8388608;
	setp.eq.s32 	%p81, %r3474, 0;
	@%p81 bra 	$L__BB0_45;
// %bb.43:                              // %__nv_fmaf_rn.exit4.i.i.i2429.preheader
	mov.f32 	%f356, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f355,%f356;
	// end inline asm
$L__BB0_44:                             // %__nv_fmaf_rn.exit4.i.i.i2429
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r346, %r3474, 192937984;
	add.s32 	%r347, %r3473, %r346;
	mov.b32 	%f357, %r347;
	mul.f32 	%f358, %f355, %f357;
	sub.f32 	%f359, %f357, %f358;
	fma.rn.f32 	%f360, %f359, %f355, %f358;
	sub.f32 	%f361, %f357, %f360;
	fma.rz.f32 	%f362, %f361, %f355, %f360;
	cvt.rzi.f32.f32 	%f363, %f362;
	sub.f32 	%f713, %f357, %f363;
	sub.s32 	%r3474, %r3474, %r346;
	mov.b32 	%r3473, %f713;
	setp.ne.s32 	%p82, %r3474, 0;
	setp.ne.s32 	%p83, %r3473, 0;
	and.pred  	%p84, %p82, %p83;
	@%p84 bra 	$L__BB0_44;
$L__BB0_45:                             // %__internal_fmodf_slowpath_mod.exit.i.i2431
	setp.gt.u32 	%p85, %r33, 2139095039;
	selp.f32 	%f364, 0f7FFFFFFF, 0f4B800000, %p85;
	mul.f32 	%f365, %f713, 0f34000000;
	mul.f32 	%f714, %f364, %f365;
	bra.uni 	$L__BB0_46;
$L__BB0_36:                             // %__nv_fast_fdividef.exit.i.i.i2408
	div.approx.f32 	%f348, %f734, %f703;
	cvt.rzi.f32.f32 	%f712, %f348;
	fma.rn.f32 	%f38, %f712, 0fC0000000, %f734;
	mov.b32 	%r32, %f38;
	setp.lt.u32 	%p76, %r32, 1073741824;
	@%p76 bra 	$L__BB0_41;
// %bb.37:
	setp.lt.u32 	%p77, %r32, -2147483647;
	@%p77 bra 	$L__BB0_39;
// %bb.38:
	add.f32 	%f353, %f712, 0fBF800000;
	setp.lt.f32 	%p80, %f38, 0fC0000000;
	add.f32 	%f354, %f353, 0fBF800000;
	selp.f32 	%f712, %f354, %f353, %p80;
	bra.uni 	$L__BB0_41;
$L__BB0_39:
	add.f32 	%f712, %f712, 0f3F800000;
	setp.ltu.f32 	%p78, %f38, 0f40800000;
	@%p78 bra 	$L__BB0_41;
// %bb.40:                              // %__nv_fmaf_rn.exit.i.i.i2412
	add.f32 	%f349, %f712, 0f3F800000;
	fma.rn.f32 	%f351, %f703, 0fC0400000, %f38;
	setp.ge.f32 	%p79, %f351, 0f00000000;
	add.f32 	%f352, %f349, 0f3F800000;
	selp.f32 	%f712, %f352, %f349, %p79;
$L__BB0_41:                             // %__internal_fmodf_fastpath_quot.exit.i.i2415
	fma.rn.f32 	%f714, %f712, 0fC0000000, %f734;
$L__BB0_46:                             // %__internal_fmodf_kernel.exit.i2434
	selp.f32 	%f212, %f207, %f210, %p27;
	cvt.rzi.f32.f32 	%f213, %f207;
	setp.lt.f32 	%p28, %f211, 0f3F000000;
	cvt.rzi.f32.f32 	%f264, %f263;
	setp.gt.f32 	%p47, %f265, 0f4B000000;
	cvt.rzi.f32.f32 	%f316, %f315;
	setp.gt.f32 	%p67, %f317, 0f4B000000;
	mov.f32 	%f230, 0f00000000;
	abs.f32 	%f366, %f714;
	setp.gtu.f32 	%p86, %f366, 0f7F800000;
	mov.b32 	%r348, %f35;
	and.b32  	%r40, %r348, -2147483648;
	@%p86 bra 	$L__BB0_48;
// %bb.47:
	mov.b32 	%r349, %f714;
	or.b32  	%r350, %r40, %r349;
	mov.b32 	%f714, %r350;
$L__BB0_48:                             // %__nv_fmodf.exit2435
	selp.f32 	%f214, %f213, %f212, %p28;
	selp.f32 	%f266, %f261, %f264, %p47;
	cvt.rzi.f32.f32 	%f267, %f261;
	setp.lt.f32 	%p48, %f265, 0f3F000000;
	selp.f32 	%f318, %f313, %f316, %p67;
	cvt.rzi.f32.f32 	%f319, %f313;
	setp.lt.f32 	%p68, %f317, 0f3F000000;
	add.f32 	%f367, %f714, %f714;
	mov.b32 	%r351, %f367;
	and.b32  	%r352, %r351, -2147483648;
	or.b32  	%r353, %r352, 1056964608;
	mov.b32 	%f368, %r353;
	add.f32 	%f369, %f367, %f368;
	cvt.rzi.f32.f32 	%f370, %f369;
	abs.f32 	%f371, %f367;
	setp.gt.f32 	%p87, %f371, 0f4B000000;
	selp.f32 	%f372, %f367, %f370, %p87;
	cvt.rzi.f32.f32 	%f373, %f367;
	setp.lt.f32 	%p88, %f371, 0f3F000000;
	selp.f32 	%f374, %f373, %f372, %p88;
	cvt.rzi.s32.f32 	%r354, %f374;
	fma.rn.f32 	%f375, %f374, 0fBF000000, %f714;
	mul.f32 	%f376, %f375, %f375;
	fma.rn.f32 	%f377, %f376, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f378, %f376, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f379, %f377, %f376, 0fC0A55DF6;
	fma.rn.f32 	%f380, %f378, %f376, 0f4081E0CF;
	fma.rn.f32 	%f381, %f376, %f375, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f376, 0fC09DE9E6;
	fma.rn.f32 	%f383, %f379, %f381, 0f00000000;
	fma.rn.f32 	%f384, %f382, %f376, 0f3F800000;
	fma.rn.f32 	%f385, %f375, 0f40490FDB, %f383;
	and.b32  	%r355, %r354, 1;
	setp.eq.b32 	%p89, %r355, 1;
	selp.f32 	%f386, %f384, %f385, %p89;
	selp.f32 	%f387, %f385, %f384, %p89;
	and.b32  	%r356, %r354, 2;
	setp.eq.s32 	%p90, %r356, 0;
	neg.f32 	%f388, %f386;
	selp.f32 	%f389, %f386, %f388, %p90;
	add.s32 	%r357, %r354, 1;
	and.b32  	%r358, %r357, 2;
	setp.eq.s32 	%p91, %r358, 0;
	sub.f32 	%f391, %f230, %f387;
	cvt.rzi.f32.f32 	%f393, %f714;
	setp.eq.f32 	%p92, %f393, %f714;
	mul.f32 	%f394, %f714, 0f00000000;
	selp.f32 	%f721, %f394, %f389, %p92;
	abs.f32 	%f395, %f714;
	add.s32 	%r359, %r31, %r146;
	and.b32  	%r360, %r359, 3;
	cvt.rn.f32.s32 	%f397, %r360;
	div.approx.f32 	%f54, %f397, %f703;
	abs.f32 	%f738, %f54;
	setp.lt.f32 	%p94, %f738, 0f40000000;
	setp.gtu.f32 	%p339, %f738, 0f4B800000;
	mov.f32 	%f718, %f738;
	@%p94 bra 	$L__BB0_60;
// %bb.49:
	@%p339 bra 	$L__BB0_56;
	bra.uni 	$L__BB0_50;
$L__BB0_56:
	mov.b32 	%r42, %f738;
	and.b32  	%r361, %r42, 8388607;
	or.b32  	%r3475, %r361, 1065353216;
	mov.b32 	%f717, %r3475;
	add.s32 	%r362, %r42, -1073741824;
	and.b32  	%r3476, %r362, -8388608;
	setp.eq.s32 	%p101, %r3476, 0;
	@%p101 bra 	$L__BB0_59;
// %bb.57:                              // %__nv_fmaf_rn.exit4.i.i.i2460.preheader
	mov.f32 	%f408, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f407,%f408;
	// end inline asm
$L__BB0_58:                             // %__nv_fmaf_rn.exit4.i.i.i2460
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r363, %r3476, 192937984;
	add.s32 	%r364, %r3475, %r363;
	mov.b32 	%f409, %r364;
	mul.f32 	%f410, %f407, %f409;
	sub.f32 	%f411, %f409, %f410;
	fma.rn.f32 	%f412, %f411, %f407, %f410;
	sub.f32 	%f413, %f409, %f412;
	fma.rz.f32 	%f414, %f413, %f407, %f412;
	cvt.rzi.f32.f32 	%f415, %f414;
	sub.f32 	%f717, %f409, %f415;
	sub.s32 	%r3476, %r3476, %r363;
	mov.b32 	%r3475, %f717;
	setp.ne.s32 	%p102, %r3476, 0;
	setp.ne.s32 	%p103, %r3475, 0;
	and.pred  	%p104, %p102, %p103;
	@%p104 bra 	$L__BB0_58;
$L__BB0_59:                             // %__internal_fmodf_slowpath_mod.exit.i.i2462
	setp.gt.u32 	%p105, %r42, 2139095039;
	selp.f32 	%f416, 0f7FFFFFFF, 0f4B800000, %p105;
	mul.f32 	%f417, %f717, 0f34000000;
	mul.f32 	%f718, %f416, %f417;
	bra.uni 	$L__BB0_60;
$L__BB0_50:                             // %__nv_fast_fdividef.exit.i.i.i2439
	div.approx.f32 	%f400, %f738, %f703;
	cvt.rzi.f32.f32 	%f716, %f400;
	fma.rn.f32 	%f57, %f716, 0fC0000000, %f738;
	mov.b32 	%r41, %f57;
	setp.lt.u32 	%p96, %r41, 1073741824;
	@%p96 bra 	$L__BB0_55;
// %bb.51:
	setp.lt.u32 	%p97, %r41, -2147483647;
	@%p97 bra 	$L__BB0_53;
// %bb.52:
	add.f32 	%f405, %f716, 0fBF800000;
	setp.lt.f32 	%p100, %f57, 0fC0000000;
	add.f32 	%f406, %f405, 0fBF800000;
	selp.f32 	%f716, %f406, %f405, %p100;
	bra.uni 	$L__BB0_55;
$L__BB0_53:
	add.f32 	%f716, %f716, 0f3F800000;
	setp.ltu.f32 	%p98, %f57, 0f40800000;
	@%p98 bra 	$L__BB0_55;
// %bb.54:                              // %__nv_fmaf_rn.exit.i.i.i2443
	add.f32 	%f401, %f716, 0f3F800000;
	fma.rn.f32 	%f403, %f703, 0fC0400000, %f57;
	setp.ge.f32 	%p99, %f403, 0f00000000;
	add.f32 	%f404, %f401, 0f3F800000;
	selp.f32 	%f716, %f404, %f401, %p99;
$L__BB0_55:                             // %__internal_fmodf_fastpath_quot.exit.i.i2446
	fma.rn.f32 	%f718, %f716, 0fC0000000, %f738;
$L__BB0_60:                             // %__internal_fmodf_kernel.exit.i2465
	fma.rn.f32 	%f215, %f214, 0fBF000000, %f746;
	selp.f32 	%f268, %f267, %f266, %p48;
	selp.f32 	%f320, %f319, %f318, %p68;
	selp.f32 	%f392, %f387, %f391, %p91;
	setp.gt.f32 	%p93, %f395, 0f4B800000;
	add.f32 	%f396, %f721, 0f3F800000;
	abs.f32 	%f418, %f718;
	setp.gtu.f32 	%p106, %f418, 0f7F800000;
	mov.b32 	%r365, %f54;
	and.b32  	%r49, %r365, -2147483648;
	@%p106 bra 	$L__BB0_62;
// %bb.61:
	mov.b32 	%r366, %f718;
	or.b32  	%r367, %r49, %r366;
	mov.b32 	%f718, %r367;
$L__BB0_62:                             // %__nv_fmodf.exit2466
	mul.f32 	%f216, %f215, %f215;
	fma.rn.f32 	%f269, %f268, 0fBF000000, %f706;
	fma.rn.f32 	%f321, %f320, 0fBF000000, %f710;
	selp.f32 	%f53, %f396, %f392, %p93;
	add.f32 	%f419, %f718, %f718;
	mov.b32 	%r368, %f419;
	and.b32  	%r369, %r368, -2147483648;
	or.b32  	%r370, %r369, 1056964608;
	mov.b32 	%f420, %r370;
	add.f32 	%f421, %f419, %f420;
	cvt.rzi.f32.f32 	%f422, %f421;
	abs.f32 	%f423, %f419;
	setp.gt.f32 	%p107, %f423, 0f4B000000;
	selp.f32 	%f424, %f419, %f422, %p107;
	cvt.rzi.f32.f32 	%f425, %f419;
	setp.lt.f32 	%p108, %f423, 0f3F000000;
	selp.f32 	%f426, %f425, %f424, %p108;
	cvt.rzi.s32.f32 	%r371, %f426;
	fma.rn.f32 	%f427, %f426, 0fBF000000, %f718;
	mul.f32 	%f428, %f427, %f427;
	fma.rn.f32 	%f429, %f428, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f430, %f428, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f431, %f429, %f428, 0fC0A55DF6;
	fma.rn.f32 	%f432, %f430, %f428, 0f4081E0CF;
	fma.rn.f32 	%f433, %f428, %f427, 0f00000000;
	fma.rn.f32 	%f434, %f432, %f428, 0fC09DE9E6;
	fma.rn.f32 	%f435, %f431, %f433, 0f00000000;
	fma.rn.f32 	%f436, %f434, %f428, 0f3F800000;
	fma.rn.f32 	%f437, %f427, 0f40490FDB, %f435;
	and.b32  	%r372, %r371, 1;
	setp.eq.b32 	%p109, %r372, 1;
	selp.f32 	%f438, %f436, %f437, %p109;
	selp.f32 	%f439, %f437, %f436, %p109;
	and.b32  	%r373, %r371, 2;
	setp.eq.s32 	%p110, %r373, 0;
	neg.f32 	%f440, %f438;
	selp.f32 	%f441, %f438, %f440, %p110;
	add.s32 	%r374, %r371, 1;
	and.b32  	%r375, %r374, 2;
	setp.eq.s32 	%p111, %r375, 0;
	sub.f32 	%f443, %f230, %f439;
	selp.f32 	%f444, %f439, %f443, %p111;
	cvt.rzi.f32.f32 	%f445, %f718;
	setp.eq.f32 	%p112, %f445, %f718;
	mul.f32 	%f446, %f718, 0f00000000;
	selp.f32 	%f723, %f446, %f441, %p112;
	abs.f32 	%f447, %f718;
	setp.gt.f32 	%p113, %f447, 0f4B800000;
	add.f32 	%f448, %f723, 0f3F800000;
	selp.f32 	%f72, %f448, %f444, %p113;
	and.b32  	%r50, %r1, 2;
	setp.eq.s32 	%p114, %r50, 0;
	mov.f32 	%f720, %f53;
	mov.f32 	%f722, %f72;
	@%p114 bra 	$L__BB0_64;
// %bb.63:                              // %L623
	neg.f32 	%f722, %f723;
	neg.f32 	%f720, %f721;
	mov.f32 	%f721, %f53;
	mov.f32 	%f723, %f72;
$L__BB0_64:                             // %L625
	fma.rn.f32 	%f217, %f216, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f218, %f216, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f270, %f269, %f269;
	mul.f32 	%f322, %f321, %f321;
	@%p14 bra 	$L__BB0_213;
// %bb.65:
	@%p335 bra 	$L__BB0_209;
	bra.uni 	$L__BB0_66;
$L__BB0_209:
	mov.b32 	%r161, %f750;
	and.b32  	%r382, %r161, 8388607;
	or.b32  	%r3505, %r382, 1065353216;
	mov.b32 	%f749, %r3505;
	add.s32 	%r383, %r161, -1073741824;
	and.b32  	%r3506, %r383, -8388608;
	setp.eq.s32 	%p122, %r3506, 0;
	@%p122 bra 	$L__BB0_212;
// %bb.210:                             // %__nv_fmaf_rn.exit4.i.i.i2491.preheader
	mov.f32 	%f458, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f457,%f458;
	// end inline asm
$L__BB0_211:                            // %__nv_fmaf_rn.exit4.i.i.i2491
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r384, %r3506, 192937984;
	add.s32 	%r385, %r3505, %r384;
	mov.b32 	%f459, %r385;
	mul.f32 	%f460, %f457, %f459;
	sub.f32 	%f461, %f459, %f460;
	fma.rn.f32 	%f462, %f461, %f457, %f460;
	sub.f32 	%f463, %f459, %f462;
	fma.rz.f32 	%f464, %f463, %f457, %f462;
	cvt.rzi.f32.f32 	%f465, %f464;
	sub.f32 	%f749, %f459, %f465;
	sub.s32 	%r3506, %r3506, %r384;
	mov.b32 	%r3505, %f749;
	setp.ne.s32 	%p123, %r3506, 0;
	setp.ne.s32 	%p124, %r3505, 0;
	and.pred  	%p125, %p123, %p124;
	@%p125 bra 	$L__BB0_211;
$L__BB0_212:                            // %__internal_fmodf_slowpath_mod.exit.i.i2493
	setp.gt.u32 	%p126, %r161, 2139095039;
	selp.f32 	%f466, 0f7FFFFFFF, 0f4B800000, %p126;
	mul.f32 	%f467, %f749, 0f34000000;
	mul.f32 	%f750, %f466, %f467;
	bra.uni 	$L__BB0_213;
$L__BB0_66:                             // %__nv_fast_fdividef.exit.i.i.i2470
	div.approx.f32 	%f450, %f750, %f703;
	cvt.rzi.f32.f32 	%f748, %f450;
	fma.rn.f32 	%f171, %f748, 0fC0000000, %f750;
	mov.b32 	%r160, %f171;
	setp.lt.u32 	%p117, %r160, 1073741824;
	@%p117 bra 	$L__BB0_208;
// %bb.67:
	setp.lt.u32 	%p118, %r160, -2147483647;
	@%p118 bra 	$L__BB0_206;
// %bb.68:
	add.f32 	%f455, %f748, 0fBF800000;
	setp.lt.f32 	%p121, %f171, 0fC0000000;
	add.f32 	%f456, %f455, 0fBF800000;
	selp.f32 	%f748, %f456, %f455, %p121;
	bra.uni 	$L__BB0_208;
$L__BB0_206:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p119, %f171, 0f40800000;
	@%p119 bra 	$L__BB0_208;
// %bb.207:                             // %__nv_fmaf_rn.exit.i.i.i2474
	add.f32 	%f451, %f748, 0f3F800000;
	fma.rn.f32 	%f453, %f703, 0fC0400000, %f171;
	setp.ge.f32 	%p120, %f453, 0f00000000;
	add.f32 	%f454, %f451, 0f3F800000;
	selp.f32 	%f748, %f454, %f451, %p120;
$L__BB0_208:                            // %__internal_fmodf_fastpath_quot.exit.i.i2477
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_213:                            // %__internal_fmodf_kernel.exit.i2496
	cvt.rzi.s32.f32 	%r300, %f214;
	fma.rn.f32 	%f219, %f217, %f216, 0fC0A55DF6;
	fma.rn.f32 	%f220, %f218, %f216, 0f4081E0CF;
	fma.rn.f32 	%f221, %f216, %f215, 0f00000000;
	fma.rn.f32 	%f271, %f270, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f272, %f270, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f323, %f322, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f324, %f322, 0f3E684E12, 0fBFAAD2E0;
	abs.f32 	%f468, %f750;
	setp.gtu.f32 	%p127, %f468, 0f7F800000;
	@%p127 bra 	$L__BB0_215;
// %bb.214:
	mov.b32 	%r386, %f750;
	or.b32  	%r387, %r155, %r386;
	mov.b32 	%f750, %r387;
$L__BB0_215:                            // %__nv_fmodf.exit2497
	fma.rn.f32 	%f222, %f220, %f216, 0fC09DE9E6;
	fma.rn.f32 	%f223, %f219, %f221, 0f00000000;
	and.b32  	%r301, %r300, 1;
	cvt.rzi.s32.f32 	%r316, %f268;
	fma.rn.f32 	%f273, %f271, %f270, 0fC0A55DF6;
	fma.rn.f32 	%f274, %f272, %f270, 0f4081E0CF;
	fma.rn.f32 	%f275, %f270, %f269, 0f00000000;
	cvt.rzi.s32.f32 	%r338, %f320;
	fma.rn.f32 	%f325, %f323, %f322, 0fC0A55DF6;
	fma.rn.f32 	%f326, %f324, %f322, 0f4081E0CF;
	fma.rn.f32 	%f327, %f322, %f321, 0f00000000;
	add.f32 	%f469, %f750, %f750;
	mov.b32 	%r394, %f469;
	and.b32  	%r395, %r394, -2147483648;
	or.b32  	%r396, %r395, 1056964608;
	mov.b32 	%f470, %r396;
	add.f32 	%f471, %f469, %f470;
	cvt.rzi.f32.f32 	%f472, %f471;
	abs.f32 	%f473, %f469;
	setp.gt.f32 	%p129, %f473, 0f4B000000;
	selp.f32 	%f474, %f469, %f472, %p129;
	cvt.rzi.f32.f32 	%f475, %f469;
	setp.lt.f32 	%p130, %f473, 0f3F000000;
	selp.f32 	%f476, %f475, %f474, %p130;
	cvt.rzi.s32.f32 	%r397, %f476;
	fma.rn.f32 	%f477, %f476, 0fBF000000, %f750;
	mul.f32 	%f478, %f477, %f477;
	fma.rn.f32 	%f479, %f478, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f480, %f478, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f481, %f479, %f478, 0fC0A55DF6;
	fma.rn.f32 	%f482, %f480, %f478, 0f4081E0CF;
	fma.rn.f32 	%f483, %f478, %f477, 0f00000000;
	fma.rn.f32 	%f484, %f482, %f478, 0fC09DE9E6;
	fma.rn.f32 	%f485, %f481, %f483, 0f00000000;
	and.b32  	%r398, %r397, 1;
	@%p34 bra 	$L__BB0_80;
// %bb.69:
	@%p336 bra 	$L__BB0_76;
	bra.uni 	$L__BB0_70;
$L__BB0_76:
	mov.b32 	%r54, %f726;
	and.b32  	%r402, %r54, 8388607;
	or.b32  	%r3477, %r402, 1065353216;
	mov.b32 	%f725, %r3477;
	add.s32 	%r403, %r54, -1073741824;
	and.b32  	%r3478, %r403, -8388608;
	setp.eq.s32 	%p142, %r3478, 0;
	@%p142 bra 	$L__BB0_79;
// %bb.77:                              // %__nv_fmaf_rn.exit4.i.i.i2522.preheader
	mov.f32 	%f510, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f509,%f510;
	// end inline asm
$L__BB0_78:                             // %__nv_fmaf_rn.exit4.i.i.i2522
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r404, %r3478, 192937984;
	add.s32 	%r405, %r3477, %r404;
	mov.b32 	%f511, %r405;
	mul.f32 	%f512, %f509, %f511;
	sub.f32 	%f513, %f511, %f512;
	fma.rn.f32 	%f514, %f513, %f509, %f512;
	sub.f32 	%f515, %f511, %f514;
	fma.rz.f32 	%f516, %f515, %f509, %f514;
	cvt.rzi.f32.f32 	%f517, %f516;
	sub.f32 	%f725, %f511, %f517;
	sub.s32 	%r3478, %r3478, %r404;
	mov.b32 	%r3477, %f725;
	setp.ne.s32 	%p143, %r3478, 0;
	setp.ne.s32 	%p144, %r3477, 0;
	and.pred  	%p145, %p143, %p144;
	@%p145 bra 	$L__BB0_78;
$L__BB0_79:                             // %__internal_fmodf_slowpath_mod.exit.i.i2524
	setp.gt.u32 	%p146, %r54, 2139095039;
	selp.f32 	%f518, 0f7FFFFFFF, 0f4B800000, %p146;
	mul.f32 	%f519, %f725, 0f34000000;
	mul.f32 	%f726, %f518, %f519;
	bra.uni 	$L__BB0_80;
$L__BB0_70:                             // %__nv_fast_fdividef.exit.i.i.i2501
	div.approx.f32 	%f502, %f726, %f703;
	cvt.rzi.f32.f32 	%f724, %f502;
	fma.rn.f32 	%f80, %f724, 0fC0000000, %f726;
	mov.b32 	%r53, %f80;
	setp.lt.u32 	%p137, %r53, 1073741824;
	@%p137 bra 	$L__BB0_75;
// %bb.71:
	setp.lt.u32 	%p138, %r53, -2147483647;
	@%p138 bra 	$L__BB0_73;
// %bb.72:
	add.f32 	%f507, %f724, 0fBF800000;
	setp.lt.f32 	%p141, %f80, 0fC0000000;
	add.f32 	%f508, %f507, 0fBF800000;
	selp.f32 	%f724, %f508, %f507, %p141;
	bra.uni 	$L__BB0_75;
$L__BB0_73:
	add.f32 	%f724, %f724, 0f3F800000;
	setp.ltu.f32 	%p139, %f80, 0f40800000;
	@%p139 bra 	$L__BB0_75;
// %bb.74:                              // %__nv_fmaf_rn.exit.i.i.i2505
	add.f32 	%f503, %f724, 0f3F800000;
	fma.rn.f32 	%f505, %f703, 0fC0400000, %f80;
	setp.ge.f32 	%p140, %f505, 0f00000000;
	add.f32 	%f506, %f503, 0f3F800000;
	selp.f32 	%f724, %f506, %f503, %p140;
$L__BB0_75:                             // %__internal_fmodf_fastpath_quot.exit.i.i2508
	fma.rn.f32 	%f726, %f724, 0fC0000000, %f726;
$L__BB0_80:                             // %__internal_fmodf_kernel.exit.i2527
	fma.rn.f32 	%f224, %f222, %f216, 0f3F800000;
	fma.rn.f32 	%f225, %f215, 0f40490FDB, %f223;
	setp.eq.b32 	%p29, %r301, 1;
	fma.rn.f32 	%f276, %f274, %f270, 0fC09DE9E6;
	fma.rn.f32 	%f277, %f273, %f275, 0f00000000;
	and.b32  	%r317, %r316, 1;
	fma.rn.f32 	%f328, %f326, %f322, 0fC09DE9E6;
	fma.rn.f32 	%f329, %f325, %f327, 0f00000000;
	and.b32  	%r339, %r338, 1;
	fma.rn.f32 	%f486, %f484, %f478, 0f3F800000;
	fma.rn.f32 	%f487, %f477, 0f40490FDB, %f485;
	setp.eq.b32 	%p131, %r398, 1;
	abs.f32 	%f520, %f726;
	setp.gtu.f32 	%p147, %f520, 0f7F800000;
	@%p147 bra 	$L__BB0_82;
// %bb.81:
	mov.b32 	%r406, %f726;
	or.b32  	%r407, %r19, %r406;
	mov.b32 	%f726, %r407;
$L__BB0_82:                             // %__nv_fmodf.exit2528
	selp.f32 	%f226, %f224, %f225, %p29;
	and.b32  	%r302, %r300, 2;
	fma.rn.f32 	%f278, %f276, %f270, 0f3F800000;
	fma.rn.f32 	%f279, %f269, 0f40490FDB, %f277;
	setp.eq.b32 	%p49, %r317, 1;
	fma.rn.f32 	%f330, %f328, %f322, 0f3F800000;
	fma.rn.f32 	%f331, %f321, 0f40490FDB, %f329;
	setp.eq.b32 	%p69, %r339, 1;
	selp.f32 	%f488, %f486, %f487, %p131;
	and.b32  	%r399, %r397, 2;
	add.f32 	%f521, %f726, %f726;
	mov.b32 	%r408, %f521;
	and.b32  	%r409, %r408, -2147483648;
	or.b32  	%r410, %r409, 1056964608;
	mov.b32 	%f522, %r410;
	add.f32 	%f523, %f521, %f522;
	cvt.rzi.f32.f32 	%f524, %f523;
	abs.f32 	%f525, %f521;
	setp.gt.f32 	%p149, %f525, 0f4B000000;
	selp.f32 	%f526, %f521, %f524, %p149;
	cvt.rzi.f32.f32 	%f527, %f521;
	setp.lt.f32 	%p150, %f525, 0f3F000000;
	selp.f32 	%f528, %f527, %f526, %p150;
	cvt.rzi.s32.f32 	%r411, %f528;
	fma.rn.f32 	%f529, %f528, 0fBF000000, %f726;
	mul.f32 	%f530, %f529, %f529;
	fma.rn.f32 	%f531, %f530, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f532, %f530, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f533, %f531, %f530, 0fC0A55DF6;
	fma.rn.f32 	%f534, %f532, %f530, 0f4081E0CF;
	fma.rn.f32 	%f535, %f530, %f529, 0f00000000;
	fma.rn.f32 	%f536, %f534, %f530, 0fC09DE9E6;
	fma.rn.f32 	%f537, %f533, %f535, 0f00000000;
	fma.rn.f32 	%f538, %f536, %f530, 0f3F800000;
	fma.rn.f32 	%f539, %f529, 0f40490FDB, %f537;
	and.b32  	%r412, %r411, 1;
	setp.eq.b32 	%p151, %r412, 1;
	@%p54 bra 	$L__BB0_94;
// %bb.83:
	@%p337 bra 	$L__BB0_90;
	bra.uni 	$L__BB0_84;
$L__BB0_90:
	mov.b32 	%r62, %f730;
	and.b32  	%r416, %r62, 8388607;
	or.b32  	%r3479, %r416, 1065353216;
	mov.b32 	%f729, %r3479;
	add.s32 	%r417, %r62, -1073741824;
	and.b32  	%r3480, %r417, -8388608;
	setp.eq.s32 	%p162, %r3480, 0;
	@%p162 bra 	$L__BB0_93;
// %bb.91:                              // %__nv_fmaf_rn.exit4.i.i.i2553.preheader
	mov.f32 	%f560, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f559,%f560;
	// end inline asm
$L__BB0_92:                             // %__nv_fmaf_rn.exit4.i.i.i2553
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r418, %r3480, 192937984;
	add.s32 	%r419, %r3479, %r418;
	mov.b32 	%f561, %r419;
	mul.f32 	%f562, %f559, %f561;
	sub.f32 	%f563, %f561, %f562;
	fma.rn.f32 	%f564, %f563, %f559, %f562;
	sub.f32 	%f565, %f561, %f564;
	fma.rz.f32 	%f566, %f565, %f559, %f564;
	cvt.rzi.f32.f32 	%f567, %f566;
	sub.f32 	%f729, %f561, %f567;
	sub.s32 	%r3480, %r3480, %r418;
	mov.b32 	%r3479, %f729;
	setp.ne.s32 	%p163, %r3480, 0;
	setp.ne.s32 	%p164, %r3479, 0;
	and.pred  	%p165, %p163, %p164;
	@%p165 bra 	$L__BB0_92;
$L__BB0_93:                             // %__internal_fmodf_slowpath_mod.exit.i.i2555
	setp.gt.u32 	%p166, %r62, 2139095039;
	selp.f32 	%f568, 0f7FFFFFFF, 0f4B800000, %p166;
	mul.f32 	%f569, %f729, 0f34000000;
	mul.f32 	%f730, %f568, %f569;
	bra.uni 	$L__BB0_94;
$L__BB0_84:                             // %__nv_fast_fdividef.exit.i.i.i2532
	div.approx.f32 	%f552, %f730, %f703;
	cvt.rzi.f32.f32 	%f728, %f552;
	fma.rn.f32 	%f97, %f728, 0fC0000000, %f730;
	mov.b32 	%r61, %f97;
	setp.lt.u32 	%p157, %r61, 1073741824;
	@%p157 bra 	$L__BB0_89;
// %bb.85:
	setp.lt.u32 	%p158, %r61, -2147483647;
	@%p158 bra 	$L__BB0_87;
// %bb.86:
	add.f32 	%f557, %f728, 0fBF800000;
	setp.lt.f32 	%p161, %f97, 0fC0000000;
	add.f32 	%f558, %f557, 0fBF800000;
	selp.f32 	%f728, %f558, %f557, %p161;
	bra.uni 	$L__BB0_89;
$L__BB0_87:
	add.f32 	%f728, %f728, 0f3F800000;
	setp.ltu.f32 	%p159, %f97, 0f40800000;
	@%p159 bra 	$L__BB0_89;
// %bb.88:                              // %__nv_fmaf_rn.exit.i.i.i2536
	add.f32 	%f553, %f728, 0f3F800000;
	fma.rn.f32 	%f555, %f703, 0fC0400000, %f97;
	setp.ge.f32 	%p160, %f555, 0f00000000;
	add.f32 	%f556, %f553, 0f3F800000;
	selp.f32 	%f728, %f556, %f553, %p160;
$L__BB0_89:                             // %__internal_fmodf_fastpath_quot.exit.i.i2539
	fma.rn.f32 	%f730, %f728, 0fC0000000, %f730;
$L__BB0_94:                             // %__internal_fmodf_kernel.exit.i2558
	setp.eq.s32 	%p30, %r302, 0;
	neg.f32 	%f228, %f226;
	add.s32 	%r303, %r300, 1;
	cvt.rzi.f32.f32 	%f233, %f746;
	selp.f32 	%f280, %f278, %f279, %p49;
	and.b32  	%r318, %r316, 2;
	selp.f32 	%f332, %f330, %f331, %p69;
	and.b32  	%r340, %r338, 2;
	setp.eq.s32 	%p132, %r399, 0;
	neg.f32 	%f490, %f488;
	add.s32 	%r400, %r397, 1;
	cvt.rzi.f32.f32 	%f495, %f750;
	selp.f32 	%f540, %f538, %f539, %p151;
	and.b32  	%r413, %r411, 2;
	abs.f32 	%f570, %f730;
	setp.gtu.f32 	%p167, %f570, 0f7F800000;
	@%p167 bra 	$L__BB0_96;
// %bb.95:
	mov.b32 	%r420, %f730;
	or.b32  	%r421, %r28, %r420;
	mov.b32 	%f730, %r421;
$L__BB0_96:                             // %__nv_fmodf.exit2559
	selp.f32 	%f227, %f225, %f224, %p29;
	selp.f32 	%f229, %f226, %f228, %p30;
	and.b32  	%r304, %r303, 2;
	setp.eq.f32 	%p32, %f233, %f746;
	mul.f32 	%f234, %f746, 0f00000000;
	setp.eq.s32 	%p50, %r318, 0;
	neg.f32 	%f282, %f280;
	add.s32 	%r319, %r316, 1;
	cvt.rzi.f32.f32 	%f287, %f706;
	setp.eq.s32 	%p70, %r340, 0;
	neg.f32 	%f334, %f332;
	add.s32 	%r341, %r338, 1;
	cvt.rzi.f32.f32 	%f339, %f710;
	selp.f32 	%f489, %f487, %f486, %p131;
	selp.f32 	%f491, %f488, %f490, %p132;
	and.b32  	%r401, %r400, 2;
	setp.eq.f32 	%p134, %f495, %f750;
	mul.f32 	%f496, %f750, 0f00000000;
	setp.eq.s32 	%p152, %r413, 0;
	neg.f32 	%f542, %f540;
	add.s32 	%r414, %r411, 1;
	cvt.rzi.f32.f32 	%f547, %f726;
	add.f32 	%f571, %f730, %f730;
	mov.b32 	%r428, %f571;
	and.b32  	%r429, %r428, -2147483648;
	or.b32  	%r430, %r429, 1056964608;
	mov.b32 	%f572, %r430;
	add.f32 	%f573, %f571, %f572;
	cvt.rzi.f32.f32 	%f574, %f573;
	abs.f32 	%f575, %f571;
	setp.gt.f32 	%p169, %f575, 0f4B000000;
	selp.f32 	%f576, %f571, %f574, %p169;
	cvt.rzi.f32.f32 	%f577, %f571;
	setp.lt.f32 	%p170, %f575, 0f3F000000;
	selp.f32 	%f578, %f577, %f576, %p170;
	cvt.rzi.s32.f32 	%r431, %f578;
	fma.rn.f32 	%f579, %f578, 0fBF000000, %f730;
	mul.f32 	%f580, %f579, %f579;
	fma.rn.f32 	%f581, %f580, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f582, %f580, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f583, %f581, %f580, 0fC0A55DF6;
	fma.rn.f32 	%f584, %f582, %f580, 0f4081E0CF;
	fma.rn.f32 	%f585, %f580, %f579, 0f00000000;
	fma.rn.f32 	%f586, %f584, %f580, 0fC09DE9E6;
	fma.rn.f32 	%f587, %f583, %f585, 0f00000000;
	fma.rn.f32 	%f588, %f586, %f580, 0f3F800000;
	fma.rn.f32 	%f589, %f579, 0f40490FDB, %f587;
	and.b32  	%r432, %r431, 1;
	setp.eq.b32 	%p171, %r432, 1;
	selp.f32 	%f590, %f588, %f589, %p171;
	and.b32  	%r433, %r431, 2;
	setp.eq.s32 	%p172, %r433, 0;
	neg.f32 	%f592, %f590;
	add.s32 	%r434, %r431, 1;
	cvt.rzi.f32.f32 	%f597, %f730;
	@%p74 bra 	$L__BB0_108;
// %bb.97:
	@%p338 bra 	$L__BB0_104;
	bra.uni 	$L__BB0_98;
$L__BB0_104:
	mov.b32 	%r72, %f734;
	and.b32  	%r436, %r72, 8388607;
	or.b32  	%r3481, %r436, 1065353216;
	mov.b32 	%f733, %r3481;
	add.s32 	%r437, %r72, -1073741824;
	and.b32  	%r3482, %r437, -8388608;
	setp.eq.s32 	%p182, %r3482, 0;
	@%p182 bra 	$L__BB0_107;
// %bb.105:                             // %__nv_fmaf_rn.exit4.i.i.i2584.preheader
	mov.f32 	%f612, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f611,%f612;
	// end inline asm
$L__BB0_106:                            // %__nv_fmaf_rn.exit4.i.i.i2584
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r438, %r3482, 192937984;
	add.s32 	%r439, %r3481, %r438;
	mov.b32 	%f613, %r439;
	mul.f32 	%f614, %f611, %f613;
	sub.f32 	%f615, %f613, %f614;
	fma.rn.f32 	%f616, %f615, %f611, %f614;
	sub.f32 	%f617, %f613, %f616;
	fma.rz.f32 	%f618, %f617, %f611, %f616;
	cvt.rzi.f32.f32 	%f619, %f618;
	sub.f32 	%f733, %f613, %f619;
	sub.s32 	%r3482, %r3482, %r438;
	mov.b32 	%r3481, %f733;
	setp.ne.s32 	%p183, %r3482, 0;
	setp.ne.s32 	%p184, %r3481, 0;
	and.pred  	%p185, %p183, %p184;
	@%p185 bra 	$L__BB0_106;
$L__BB0_107:                            // %__internal_fmodf_slowpath_mod.exit.i.i2586
	setp.gt.u32 	%p186, %r72, 2139095039;
	selp.f32 	%f620, 0f7FFFFFFF, 0f4B800000, %p186;
	mul.f32 	%f621, %f733, 0f34000000;
	mul.f32 	%f734, %f620, %f621;
	bra.uni 	$L__BB0_108;
$L__BB0_98:                             // %__nv_fast_fdividef.exit.i.i.i2563
	div.approx.f32 	%f604, %f734, %f703;
	cvt.rzi.f32.f32 	%f732, %f604;
	fma.rn.f32 	%f112, %f732, 0fC0000000, %f734;
	mov.b32 	%r71, %f112;
	setp.lt.u32 	%p177, %r71, 1073741824;
	@%p177 bra 	$L__BB0_103;
// %bb.99:
	setp.lt.u32 	%p178, %r71, -2147483647;
	@%p178 bra 	$L__BB0_101;
// %bb.100:
	add.f32 	%f609, %f732, 0fBF800000;
	setp.lt.f32 	%p181, %f112, 0fC0000000;
	add.f32 	%f610, %f609, 0fBF800000;
	selp.f32 	%f732, %f610, %f609, %p181;
	bra.uni 	$L__BB0_103;
$L__BB0_101:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p179, %f112, 0f40800000;
	@%p179 bra 	$L__BB0_103;
// %bb.102:                             // %__nv_fmaf_rn.exit.i.i.i2567
	add.f32 	%f605, %f732, 0f3F800000;
	fma.rn.f32 	%f607, %f703, 0fC0400000, %f112;
	setp.ge.f32 	%p180, %f607, 0f00000000;
	add.f32 	%f608, %f605, 0f3F800000;
	selp.f32 	%f732, %f608, %f605, %p180;
$L__BB0_103:                            // %__internal_fmodf_fastpath_quot.exit.i.i2570
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_108:                            // %__internal_fmodf_kernel.exit.i2589
	setp.eq.s32 	%p31, %r304, 0;
	sub.f32 	%f231, %f230, %f227;
	selp.f32 	%f235, %f234, %f229, %p32;
	abs.f32 	%f236, %f746;
	selp.f32 	%f281, %f279, %f278, %p49;
	selp.f32 	%f283, %f280, %f282, %p50;
	and.b32  	%r320, %r319, 2;
	setp.eq.f32 	%p52, %f287, %f706;
	mul.f32 	%f288, %f706, 0f00000000;
	selp.f32 	%f333, %f331, %f330, %p69;
	selp.f32 	%f335, %f332, %f334, %p70;
	and.b32  	%r342, %r341, 2;
	setp.eq.f32 	%p72, %f339, %f710;
	mul.f32 	%f340, %f710, 0f00000000;
	setp.eq.s32 	%p133, %r401, 0;
	sub.f32 	%f493, %f230, %f489;
	selp.f32 	%f497, %f496, %f491, %p134;
	abs.f32 	%f498, %f750;
	selp.f32 	%f541, %f539, %f538, %p151;
	selp.f32 	%f543, %f540, %f542, %p152;
	and.b32  	%r415, %r414, 2;
	setp.eq.f32 	%p154, %f547, %f726;
	mul.f32 	%f548, %f726, 0f00000000;
	selp.f32 	%f591, %f589, %f588, %p171;
	selp.f32 	%f593, %f590, %f592, %p172;
	and.b32  	%r435, %r434, 2;
	setp.eq.f32 	%p174, %f597, %f730;
	mul.f32 	%f598, %f730, 0f00000000;
	abs.f32 	%f622, %f734;
	setp.gtu.f32 	%p187, %f622, 0f7F800000;
	@%p187 bra 	$L__BB0_110;
// %bb.109:
	mov.b32 	%r440, %f734;
	or.b32  	%r441, %r40, %r440;
	mov.b32 	%f734, %r441;
$L__BB0_110:                            // %__nv_fmodf.exit2590
	selp.f32 	%f232, %f227, %f231, %p31;
	setp.gt.f32 	%p33, %f236, 0f4B800000;
	add.f32 	%f237, %f235, 0f3F800000;
	setp.eq.s32 	%p51, %r320, 0;
	sub.f32 	%f285, %f230, %f281;
	selp.f32 	%f16, %f288, %f283, %p52;
	abs.f32 	%f289, %f706;
	setp.eq.s32 	%p71, %r342, 0;
	sub.f32 	%f337, %f230, %f333;
	selp.f32 	%f341, %f340, %f335, %p72;
	abs.f32 	%f342, %f710;
	selp.f32 	%f494, %f489, %f493, %p133;
	setp.gt.f32 	%p135, %f498, 0f4B800000;
	add.f32 	%f499, %f497, 0f3F800000;
	setp.eq.s32 	%p153, %r415, 0;
	sub.f32 	%f545, %f230, %f541;
	selp.f32 	%f94, %f548, %f543, %p154;
	abs.f32 	%f549, %f726;
	setp.eq.s32 	%p173, %r435, 0;
	sub.f32 	%f595, %f230, %f591;
	selp.f32 	%f599, %f598, %f593, %p174;
	abs.f32 	%f600, %f730;
	add.f32 	%f623, %f734, %f734;
	mov.b32 	%r442, %f623;
	and.b32  	%r443, %r442, -2147483648;
	or.b32  	%r444, %r443, 1056964608;
	mov.b32 	%f624, %r444;
	add.f32 	%f625, %f623, %f624;
	cvt.rzi.f32.f32 	%f626, %f625;
	abs.f32 	%f627, %f623;
	setp.gt.f32 	%p189, %f627, 0f4B000000;
	selp.f32 	%f628, %f623, %f626, %p189;
	cvt.rzi.f32.f32 	%f629, %f623;
	setp.lt.f32 	%p190, %f627, 0f3F000000;
	selp.f32 	%f630, %f629, %f628, %p190;
	cvt.rzi.s32.f32 	%r445, %f630;
	fma.rn.f32 	%f631, %f630, 0fBF000000, %f734;
	mul.f32 	%f632, %f631, %f631;
	fma.rn.f32 	%f633, %f632, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f634, %f632, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f635, %f633, %f632, 0fC0A55DF6;
	fma.rn.f32 	%f636, %f634, %f632, 0f4081E0CF;
	fma.rn.f32 	%f637, %f632, %f631, 0f00000000;
	fma.rn.f32 	%f638, %f636, %f632, 0fC09DE9E6;
	fma.rn.f32 	%f639, %f635, %f637, 0f00000000;
	fma.rn.f32 	%f640, %f638, %f632, 0f3F800000;
	fma.rn.f32 	%f641, %f631, 0f40490FDB, %f639;
	and.b32  	%r446, %r445, 1;
	setp.eq.b32 	%p191, %r446, 1;
	selp.f32 	%f642, %f640, %f641, %p191;
	selp.f32 	%f643, %f641, %f640, %p191;
	and.b32  	%r447, %r445, 2;
	setp.eq.s32 	%p192, %r447, 0;
	neg.f32 	%f644, %f642;
	selp.f32 	%f645, %f642, %f644, %p192;
	add.s32 	%r448, %r445, 1;
	and.b32  	%r449, %r448, 2;
	setp.eq.s32 	%p193, %r449, 0;
	sub.f32 	%f647, %f230, %f643;
	cvt.rzi.f32.f32 	%f649, %f734;
	setp.eq.f32 	%p194, %f649, %f734;
	mul.f32 	%f650, %f734, 0f00000000;
	selp.f32 	%f741, %f650, %f645, %p194;
	abs.f32 	%f651, %f734;
	@%p94 bra 	$L__BB0_122;
// %bb.111:
	@%p339 bra 	$L__BB0_118;
	bra.uni 	$L__BB0_112;
$L__BB0_118:
	mov.b32 	%r80, %f738;
	and.b32  	%r450, %r80, 8388607;
	or.b32  	%r3483, %r450, 1065353216;
	mov.b32 	%f737, %r3483;
	add.s32 	%r451, %r80, -1073741824;
	and.b32  	%r3484, %r451, -8388608;
	setp.eq.s32 	%p202, %r3484, 0;
	@%p202 bra 	$L__BB0_121;
// %bb.119:                             // %__nv_fmaf_rn.exit4.i.i.i2615.preheader
	mov.f32 	%f662, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f661,%f662;
	// end inline asm
$L__BB0_120:                            // %__nv_fmaf_rn.exit4.i.i.i2615
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r452, %r3484, 192937984;
	add.s32 	%r453, %r3483, %r452;
	mov.b32 	%f663, %r453;
	mul.f32 	%f664, %f661, %f663;
	sub.f32 	%f665, %f663, %f664;
	fma.rn.f32 	%f666, %f665, %f661, %f664;
	sub.f32 	%f667, %f663, %f666;
	fma.rz.f32 	%f668, %f667, %f661, %f666;
	cvt.rzi.f32.f32 	%f669, %f668;
	sub.f32 	%f737, %f663, %f669;
	sub.s32 	%r3484, %r3484, %r452;
	mov.b32 	%r3483, %f737;
	setp.ne.s32 	%p203, %r3484, 0;
	setp.ne.s32 	%p204, %r3483, 0;
	and.pred  	%p205, %p203, %p204;
	@%p205 bra 	$L__BB0_120;
$L__BB0_121:                            // %__internal_fmodf_slowpath_mod.exit.i.i2617
	setp.gt.u32 	%p206, %r80, 2139095039;
	selp.f32 	%f670, 0f7FFFFFFF, 0f4B800000, %p206;
	mul.f32 	%f671, %f737, 0f34000000;
	mul.f32 	%f738, %f670, %f671;
	bra.uni 	$L__BB0_122;
$L__BB0_112:                            // %__nv_fast_fdividef.exit.i.i.i2594
	div.approx.f32 	%f654, %f738, %f703;
	cvt.rzi.f32.f32 	%f736, %f654;
	fma.rn.f32 	%f129, %f736, 0fC0000000, %f738;
	mov.b32 	%r79, %f129;
	setp.lt.u32 	%p197, %r79, 1073741824;
	@%p197 bra 	$L__BB0_117;
// %bb.113:
	setp.lt.u32 	%p198, %r79, -2147483647;
	@%p198 bra 	$L__BB0_115;
// %bb.114:
	add.f32 	%f659, %f736, 0fBF800000;
	setp.lt.f32 	%p201, %f129, 0fC0000000;
	add.f32 	%f660, %f659, 0fBF800000;
	selp.f32 	%f736, %f660, %f659, %p201;
	bra.uni 	$L__BB0_117;
$L__BB0_115:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p199, %f129, 0f40800000;
	@%p199 bra 	$L__BB0_117;
// %bb.116:                             // %__nv_fmaf_rn.exit.i.i.i2598
	add.f32 	%f655, %f736, 0f3F800000;
	fma.rn.f32 	%f657, %f703, 0fC0400000, %f129;
	setp.ge.f32 	%p200, %f657, 0f00000000;
	add.f32 	%f658, %f655, 0f3F800000;
	selp.f32 	%f736, %f658, %f655, %p200;
$L__BB0_117:                            // %__internal_fmodf_fastpath_quot.exit.i.i2601
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_122:                            // %__internal_fmodf_kernel.exit.i2620
	selp.f32 	%f238, %f237, %f232, %p33;
	selp.f32 	%f286, %f281, %f285, %p51;
	setp.gt.f32 	%p53, %f289, 0f4B800000;
	add.f32 	%f290, %f16, 0f3F800000;
	selp.f32 	%f338, %f333, %f337, %p71;
	setp.gt.f32 	%p73, %f342, 0f4B800000;
	add.f32 	%f343, %f341, 0f3F800000;
	selp.f32 	%f500, %f499, %f494, %p135;
	selp.f32 	%f546, %f541, %f545, %p153;
	setp.gt.f32 	%p155, %f549, 0f4B800000;
	add.f32 	%f550, %f94, 0f3F800000;
	selp.f32 	%f596, %f591, %f595, %p173;
	setp.gt.f32 	%p175, %f600, 0f4B800000;
	add.f32 	%f601, %f599, 0f3F800000;
	selp.f32 	%f648, %f643, %f647, %p193;
	setp.gt.f32 	%p195, %f651, 0f4B800000;
	add.f32 	%f652, %f741, 0f3F800000;
	abs.f32 	%f672, %f738;
	setp.gtu.f32 	%p207, %f672, 0f7F800000;
	@%p207 bra 	$L__BB0_124;
// %bb.123:
	mov.b32 	%r454, %f738;
	or.b32  	%r455, %r49, %r454;
	mov.b32 	%f738, %r455;
$L__BB0_124:                            // %__nv_fmodf.exit2621
	mov.b32 	%r293, %f238;
	mov.b32 	%r296, %f235;
	selp.f32 	%f17, %f290, %f286, %p53;
	selp.f32 	%f344, %f343, %f338, %p73;
	mov.b32 	%r390, %f500;
	mov.b32 	%r393, %f497;
	selp.f32 	%f95, %f550, %f546, %p155;
	selp.f32 	%f602, %f601, %f596, %p175;
	selp.f32 	%f127, %f652, %f648, %p195;
	add.f32 	%f673, %f738, %f738;
	mov.b32 	%r456, %f673;
	and.b32  	%r457, %r456, -2147483648;
	or.b32  	%r458, %r457, 1056964608;
	mov.b32 	%f674, %r458;
	add.f32 	%f675, %f673, %f674;
	cvt.rzi.f32.f32 	%f676, %f675;
	abs.f32 	%f677, %f673;
	setp.gt.f32 	%p209, %f677, 0f4B000000;
	selp.f32 	%f678, %f673, %f676, %p209;
	cvt.rzi.f32.f32 	%f679, %f673;
	setp.lt.f32 	%p210, %f677, 0f3F000000;
	selp.f32 	%f680, %f679, %f678, %p210;
	cvt.rzi.s32.f32 	%r459, %f680;
	fma.rn.f32 	%f681, %f680, 0fBF000000, %f738;
	mul.f32 	%f682, %f681, %f681;
	fma.rn.f32 	%f683, %f682, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f684, %f682, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f685, %f683, %f682, 0fC0A55DF6;
	fma.rn.f32 	%f686, %f684, %f682, 0f4081E0CF;
	fma.rn.f32 	%f687, %f682, %f681, 0f00000000;
	fma.rn.f32 	%f688, %f686, %f682, 0fC09DE9E6;
	fma.rn.f32 	%f689, %f685, %f687, 0f00000000;
	fma.rn.f32 	%f690, %f688, %f682, 0f3F800000;
	fma.rn.f32 	%f691, %f681, 0f40490FDB, %f689;
	and.b32  	%r460, %r459, 1;
	setp.eq.b32 	%p211, %r460, 1;
	selp.f32 	%f692, %f690, %f691, %p211;
	selp.f32 	%f693, %f691, %f690, %p211;
	and.b32  	%r461, %r459, 2;
	setp.eq.s32 	%p212, %r461, 0;
	neg.f32 	%f694, %f692;
	selp.f32 	%f695, %f692, %f694, %p212;
	add.s32 	%r462, %r459, 1;
	and.b32  	%r463, %r462, 2;
	setp.eq.s32 	%p213, %r463, 0;
	sub.f32 	%f697, %f230, %f693;
	selp.f32 	%f698, %f693, %f697, %p213;
	cvt.rzi.f32.f32 	%f699, %f738;
	setp.eq.f32 	%p214, %f699, %f738;
	mul.f32 	%f700, %f738, 0f00000000;
	selp.f32 	%f743, %f700, %f695, %p214;
	abs.f32 	%f701, %f738;
	setp.gt.f32 	%p215, %f701, 0f4B800000;
	add.f32 	%f702, %f743, 0f3F800000;
	selp.f32 	%f144, %f702, %f698, %p215;
	mov.f32 	%f740, %f127;
	mov.f32 	%f742, %f144;
	@%p114 bra 	$L__BB0_126;
// %bb.125:                             // %L916
	neg.f32 	%f742, %f743;
	neg.f32 	%f740, %f741;
	mov.f32 	%f741, %f127;
	mov.f32 	%f743, %f144;
$L__BB0_126:                            // %L918
	xor.b32  	%r292, %r296, -2147483648;
	ld.param.u64 	%rd2, [_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_6];
	mov.b32 	%r331, %f344;
	mov.b32 	%r330, %f17;
	mov.b32 	%r334, %f341;
	mov.b32 	%r333, %f16;
	mov.b32 	%r377, %f720;
	mov.b32 	%r378, %f722;
	mov.b32 	%r380, %f721;
	mov.b32 	%r381, %f723;
	xor.b32  	%r389, %r393, -2147483648;
	mov.b32 	%r424, %f602;
	mov.b32 	%r423, %f95;
	mov.b32 	%r427, %f599;
	mov.b32 	%r426, %f94;
	mov.b32 	%r465, %f740;
	mov.b32 	%r466, %f742;
	mov.b32 	%r468, %f741;
	mov.b32 	%r469, %f743;
	setp.gt.u32 	%p216, %r1, 15;
	mov.u32 	%r170, 999999999;
	@%p216 bra 	$L__BB0_128;
// %bb.127:                             // %L948
	ld.param.u64 	%rd1, [_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_5];
	shl.b32 	%r471, %r1, 4;
	and.b32  	%r472, %r471, 240;
	or.b32  	%r473, %r472, %r2;
	mul.wide.u32 	%rd110, %r473, 4;
	add.s64 	%rd111, %rd1, %rd110;
	ld.global.u32 	%r474, [%rd111];
	cvt.s32.s16 	%r475, %r474;
	shr.s32 	%r476, %r474, 16;
	mul.lo.s32 	%r477, %r476, 546;
	mad.lo.s32 	%r170, %r475, 33, %r477;
$L__BB0_128:                            // %pass503
	ld.param.u64 	%rd3, [_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_7];
	ld.param.u64 	%rd4, [_Z3frb13CuDeviceArrayI5Int32Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_IS0_Li1ELi1EES_I7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS2_Li1ELi1EES_IS0_Li1ELi1EE_param_8];
	// begin inline asm
	cvt.rn.f16x2.f32 %r291, %r293, %r292;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r294, %r296, %r293;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r329, %r331, %r330;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r332, %r334, %r333;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r376, %r378, %r377;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r379, %r381, %r380;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r388, %r390, %r389;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r391, %r393, %r390;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r422, %r424, %r423;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r425, %r427, %r426;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r464, %r466, %r465;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r467, %r469, %r468;
	// end inline asm
	shl.b32 	%r479, %r2, 1;
	shl.b32 	%r480, %r1, 6;
	and.b32  	%r481, %r480, 192;
	shr.u32 	%r482, %r1, 3;
	and.b32  	%r483, %r482, 2;
	and.b32  	%r484, %r146, 1;
	or.b32  	%r485, %r483, %r484;
	shl.b32 	%r486, %r485, 4;
	bfe.u32 	%r487, %r1, 3, 1;
	and.b32  	%r488, %r479, 14;
	or.b32  	%r489, %r488, %r487;
	or.b32  	%r490, %r486, %r481;
	or.b32  	%r491, %r490, %r5;
	or.b32  	%r492, %r491, %r489;
	mul.wide.u32 	%rd112, %r492, 4;
	add.s64 	%rd113, %rd2, %rd112;
	ld.global.u32 	%r171, [%rd113];
	ld.global.u32 	%r172, [%rd113+1024];
	shl.b32 	%r173, %r6, 17;
	shl.b32 	%r493, %r4, 7;
	shl.b32 	%r494, %r1, 2;
	or.b32  	%r174, %r494, %r493;
	and.b32  	%r175, %r1, 16;
	shr.u32 	%r495, %r1, 4;
	and.b32  	%r496, %r158, 30;
	or.b32  	%r497, %r496, %r495;
	mul.lo.s32 	%r498, %r497, 257;
	shr.u32 	%r499, %r2, 3;
	and.b32  	%r500, %r3, 224;
	mad.lo.s32 	%r501, %r499, 257, %r500;
	or.b32  	%r502, %r499, 2;
	mad.lo.s32 	%r503, %r502, 257, %r500;
	or.b32  	%r504, %r499, 4;
	mad.lo.s32 	%r505, %r504, 257, %r500;
	or.b32  	%r506, %r499, 6;
	mad.lo.s32 	%r507, %r506, 257, %r500;
	or.b32  	%r508, %r499, 8;
	mad.lo.s32 	%r509, %r508, 257, %r500;
	or.b32  	%r510, %r499, 10;
	mad.lo.s32 	%r511, %r510, 257, %r500;
	or.b32  	%r512, %r499, 12;
	mad.lo.s32 	%r513, %r512, 257, %r500;
	or.b32  	%r514, %r499, 14;
	mad.lo.s32 	%r515, %r514, 257, %r500;
	or.b32  	%r516, %r499, 16;
	mad.lo.s32 	%r517, %r516, 257, %r500;
	or.b32  	%r518, %r499, 18;
	mad.lo.s32 	%r519, %r518, 257, %r500;
	or.b32  	%r520, %r499, 20;
	mad.lo.s32 	%r521, %r520, 257, %r500;
	or.b32  	%r522, %r499, 22;
	mad.lo.s32 	%r523, %r522, 257, %r500;
	or.b32  	%r524, %r499, 24;
	mad.lo.s32 	%r525, %r524, 257, %r500;
	or.b32  	%r526, %r499, 26;
	mad.lo.s32 	%r527, %r526, 257, %r500;
	or.b32  	%r528, %r499, 28;
	mad.lo.s32 	%r529, %r528, 257, %r500;
	or.b32  	%r530, %r499, 30;
	mad.lo.s32 	%r531, %r530, 257, %r500;
	mul.lo.s32 	%r532, %r145, 2184;
	mad.lo.s32 	%r533, %r485, 546, %r532;
	mad.lo.s32 	%r534, %r489, 33, %r533;
	setp.lt.u32 	%p218, %r1, 4;
	setp.eq.s32 	%p219, %r146, 4;
	setp.eq.s32 	%p220, %r146, 5;
	bfe.s32 	%r535, %r1, 3, 1;
	and.b32  	%r536, %r1, 8;
	setp.eq.s32 	%p221, %r536, 0;
	and.b32  	%r537, %r535, 258;
	or.b32  	%r538, %r488, %r495;
	and.b32  	%r539, %r1, 1;
	neg.s32 	%r540, %r539;
	and.b32  	%r541, %r540, 2064;
	bfe.s32 	%r542, %r1, 2, 1;
	and.b32  	%r543, %r542, 516;
	selp.b32 	%r544, 0, 1032, %p114;
	add.s32 	%r545, %r537, %r538;
	add.s32 	%r546, %r545, %r541;
	add.s32 	%r547, %r546, %r543;
	add.s32 	%r176, %r547, %r544;
	or.b32  	%r548, %r538, 4144;
	add.s32 	%r549, %r548, %r537;
	add.s32 	%r550, %r549, %r541;
	add.s32 	%r551, %r550, %r543;
	add.s32 	%r177, %r551, %r544;
	or.b32  	%r552, %r538, 16;
	add.s32 	%r553, %r552, %r537;
	add.s32 	%r554, %r553, %r541;
	add.s32 	%r555, %r554, %r543;
	add.s32 	%r178, %r555, %r544;
	add.s32 	%r179, %r176, 4160;
	mul.lo.s32 	%r556, %r499, 258;
	and.b32  	%r557, %r494, 12;
	and.b32  	%r558, %r535, 4144;
	and.b32  	%r559, %r2, 1;
	neg.s32 	%r560, %r559;
	setp.eq.b32 	%p222, %r559, 1;
	and.b32  	%r561, %r560, 2064;
	bfe.s32 	%r562, %r2, 2, 1;
	and.b32  	%r563, %r2, 4;
	setp.eq.s32 	%p223, %r563, 0;
	and.b32  	%r564, %r562, 516;
	bfe.s32 	%r565, %r2, 1, 1;
	and.b32  	%r566, %r2, 2;
	setp.eq.s32 	%p224, %r566, 0;
	and.b32  	%r567, %r565, 1032;
	or.b32  	%r568, %r485, %r557;
	add.s32 	%r569, %r568, %r556;
	add.s32 	%r570, %r569, %r558;
	add.s32 	%r571, %r570, %r561;
	add.s32 	%r572, %r571, %r564;
	add.s32 	%r573, %r572, %r567;
	mul.wide.u32 	%rd114, %r573, 4;
	mov.u64 	%rd115, shmem;
	add.s64 	%rd18, %rd115, %rd114;
	selp.b64 	%rd116, 0, 1032, %p224;
	selp.b64 	%rd117, 0, 516, %p223;
	selp.b64 	%rd118, 2064, 0, %p222;
	selp.b64 	%rd119, 0, 4144, %p221;
	cvt.u64.u32 	%rd120, %r557;
	cvt.u64.u32 	%rd121, %r556;
	cvt.u64.u32 	%rd122, %r485;
	add.s64 	%rd123, %rd122, %rd121;
	add.s64 	%rd124, %rd123, %rd120;
	add.s64 	%rd125, %rd124, %rd119;
	add.s64 	%rd126, %rd125, %rd118;
	add.s64 	%rd127, %rd126, %rd117;
	add.s64 	%rd128, %rd127, %rd116;
	shl.b64 	%rd129, %rd128, 2;
	add.s64 	%rd19, %rd115, %rd129;
	shl.b32 	%r574, %r8, 19;
	and.b32  	%r575, %r1, 15;
	or.b32  	%r576, %r175, %r3;
	or.b32  	%r577, %r575, %r5;
	or.b32  	%r180, %r577, %r576;
	cvt.s64.s32 	%rd20, %r574;
	add.s32 	%r578, %r485, %r556;
	add.s32 	%r579, %r578, %r557;
	add.s32 	%r580, %r579, %r558;
	add.s32 	%r581, %r580, %r561;
	add.s32 	%r582, %r581, %r564;
	add.s32 	%r583, %r582, %r567;
	add.s32 	%r584, %r2, %r498;
	mul.wide.u32 	%rd130, %r584, 4;
	add.s64 	%rd21, %rd115, %rd130;
	cvt.u64.u32 	%rd131, %r2;
	cvt.u64.u32 	%rd22, %r498;
	add.s64 	%rd132, %rd22, %rd131;
	shl.b64 	%rd133, %rd132, 2;
	add.s64 	%rd23, %rd115, %rd133;
	add.s32 	%r585, %r501, %r1;
	mul.wide.u32 	%rd134, %r585, 4;
	add.s64 	%rd24, %rd115, %rd134;
	add.s32 	%r586, %r503, %r1;
	mul.wide.u32 	%rd135, %r586, 4;
	add.s64 	%rd25, %rd115, %rd135;
	add.s32 	%r587, %r505, %r1;
	mul.wide.u32 	%rd136, %r587, 4;
	add.s64 	%rd26, %rd115, %rd136;
	add.s32 	%r588, %r507, %r1;
	mul.wide.u32 	%rd137, %r588, 4;
	add.s64 	%rd27, %rd115, %rd137;
	add.s32 	%r589, %r509, %r1;
	mul.wide.u32 	%rd138, %r589, 4;
	add.s64 	%rd28, %rd115, %rd138;
	add.s32 	%r590, %r511, %r1;
	mul.wide.u32 	%rd139, %r590, 4;
	add.s64 	%rd29, %rd115, %rd139;
	add.s32 	%r591, %r513, %r1;
	mul.wide.u32 	%rd140, %r591, 4;
	add.s64 	%rd30, %rd115, %rd140;
	add.s32 	%r592, %r515, %r1;
	mul.wide.u32 	%rd141, %r592, 4;
	add.s64 	%rd31, %rd115, %rd141;
	add.s32 	%r593, %r517, %r1;
	mul.wide.u32 	%rd142, %r593, 4;
	add.s64 	%rd32, %rd115, %rd142;
	add.s32 	%r594, %r519, %r1;
	mul.wide.u32 	%rd143, %r594, 4;
	add.s64 	%rd33, %rd115, %rd143;
	add.s32 	%r595, %r521, %r1;
	mul.wide.u32 	%rd144, %r595, 4;
	add.s64 	%rd34, %rd115, %rd144;
	add.s32 	%r596, %r523, %r1;
	mul.wide.u32 	%rd145, %r596, 4;
	add.s64 	%rd35, %rd115, %rd145;
	add.s32 	%r597, %r525, %r1;
	mul.wide.u32 	%rd146, %r597, 4;
	add.s64 	%rd36, %rd115, %rd146;
	add.s32 	%r598, %r527, %r1;
	mul.wide.u32 	%rd147, %r598, 4;
	add.s64 	%rd37, %rd115, %rd147;
	add.s32 	%r599, %r529, %r1;
	mul.wide.u32 	%rd148, %r599, 4;
	add.s64 	%rd38, %rd115, %rd148;
	add.s32 	%r600, %r531, %r1;
	mul.wide.u32 	%rd149, %r600, 4;
	add.s64 	%rd39, %rd115, %rd149;
	add.s32 	%r601, %r534, %r499;
	mul.wide.u32 	%rd150, %r601, 4;
	add.s64 	%rd40, %rd115, %rd150;
	add.s32 	%r602, %r534, %r502;
	mul.wide.u32 	%rd151, %r602, 4;
	add.s64 	%rd41, %rd115, %rd151;
	add.s32 	%r603, %r534, %r504;
	mul.wide.u32 	%rd152, %r603, 4;
	add.s64 	%rd42, %rd115, %rd152;
	add.s32 	%r604, %r534, %r506;
	mul.wide.u32 	%rd153, %r604, 4;
	add.s64 	%rd43, %rd115, %rd153;
	add.s32 	%r605, %r534, %r508;
	mul.wide.u32 	%rd154, %r605, 4;
	add.s64 	%rd44, %rd115, %rd154;
	add.s32 	%r606, %r534, %r510;
	mul.wide.u32 	%rd155, %r606, 4;
	add.s64 	%rd45, %rd115, %rd155;
	add.s32 	%r607, %r534, %r512;
	mul.wide.u32 	%rd156, %r607, 4;
	add.s64 	%rd46, %rd115, %rd156;
	add.s32 	%r608, %r534, %r514;
	mul.wide.u32 	%rd157, %r608, 4;
	add.s64 	%rd47, %rd115, %rd157;
	add.s32 	%r609, %r534, %r516;
	mul.wide.u32 	%rd158, %r609, 4;
	add.s64 	%rd48, %rd115, %rd158;
	add.s32 	%r610, %r534, %r518;
	mul.wide.u32 	%rd159, %r610, 4;
	add.s64 	%rd49, %rd115, %rd159;
	add.s32 	%r611, %r534, %r520;
	mul.wide.u32 	%rd160, %r611, 4;
	add.s64 	%rd50, %rd115, %rd160;
	add.s32 	%r612, %r534, %r522;
	mul.wide.u32 	%rd161, %r612, 4;
	add.s64 	%rd51, %rd115, %rd161;
	add.s32 	%r613, %r534, %r524;
	mul.wide.u32 	%rd162, %r613, 4;
	add.s64 	%rd52, %rd115, %rd162;
	add.s32 	%r614, %r534, %r526;
	mul.wide.u32 	%rd163, %r614, 4;
	add.s64 	%rd53, %rd115, %rd163;
	add.s32 	%r615, %r534, %r528;
	mul.wide.u32 	%rd164, %r615, 4;
	add.s64 	%rd54, %rd115, %rd164;
	add.s32 	%r616, %r534, %r530;
	mul.wide.u32 	%rd165, %r616, 4;
	add.s64 	%rd55, %rd115, %rd165;
	add.s32 	%r617, %r146, -1;
	setp.lt.u32 	%p225, %r617, 3;
	or.pred  	%p226, %p218, %p225;
	or.pred  	%p227, %p226, %p219;
	and.b32  	%r618, %r1, 24;
	setp.eq.s32 	%p228, %r618, 24;
	or.pred  	%p229, %p220, %p228;
	selp.b32 	%r181, 1145324612, -286331154, %p226;
	or.pred  	%p1, %p227, %p229;
	shl.b32 	%r182, %r499, 5;
	add.s32 	%r619, %r176, %r182;
	mul.wide.u32 	%rd166, %r619, 4;
	add.s64 	%rd56, %rd115, %rd166;
	add.s32 	%r620, %r177, %r182;
	mul.wide.u32 	%rd167, %r620, 4;
	add.s64 	%rd57, %rd115, %rd167;
	add.s32 	%r621, %r178, %r182;
	mul.wide.u32 	%rd168, %r621, 4;
	add.s64 	%rd58, %rd115, %rd168;
	add.s32 	%r622, %r179, %r182;
	mul.wide.u32 	%rd169, %r622, 4;
	add.s64 	%rd59, %rd115, %rd169;
	shl.b32 	%r623, %r502, 5;
	add.s32 	%r624, %r176, %r623;
	mul.wide.u32 	%rd170, %r624, 4;
	add.s64 	%rd60, %rd115, %rd170;
	add.s32 	%r625, %r177, %r623;
	mul.wide.u32 	%rd171, %r625, 4;
	add.s64 	%rd61, %rd115, %rd171;
	add.s32 	%r626, %r178, %r623;
	mul.wide.u32 	%rd172, %r626, 4;
	add.s64 	%rd62, %rd115, %rd172;
	add.s32 	%r627, %r179, %r623;
	mul.wide.u32 	%rd173, %r627, 4;
	add.s64 	%rd63, %rd115, %rd173;
	shl.b32 	%r628, %r504, 5;
	add.s32 	%r629, %r176, %r628;
	mul.wide.u32 	%rd174, %r629, 4;
	add.s64 	%rd64, %rd115, %rd174;
	add.s32 	%r630, %r177, %r628;
	mul.wide.u32 	%rd175, %r630, 4;
	add.s64 	%rd65, %rd115, %rd175;
	add.s32 	%r631, %r178, %r628;
	mul.wide.u32 	%rd176, %r631, 4;
	add.s64 	%rd66, %rd115, %rd176;
	add.s32 	%r632, %r179, %r628;
	mul.wide.u32 	%rd177, %r632, 4;
	add.s64 	%rd67, %rd115, %rd177;
	shl.b32 	%r633, %r506, 5;
	add.s32 	%r634, %r176, %r633;
	mul.wide.u32 	%rd178, %r634, 4;
	add.s64 	%rd68, %rd115, %rd178;
	add.s32 	%r635, %r177, %r633;
	mul.wide.u32 	%rd179, %r635, 4;
	add.s64 	%rd69, %rd115, %rd179;
	add.s32 	%r636, %r178, %r633;
	mul.wide.u32 	%rd180, %r636, 4;
	add.s64 	%rd70, %rd115, %rd180;
	add.s32 	%r637, %r179, %r633;
	mul.wide.u32 	%rd181, %r637, 4;
	add.s64 	%rd71, %rd115, %rd181;
	add.s32 	%r638, %r583, 32;
	mul.wide.u32 	%rd182, %r638, 4;
	add.s64 	%rd72, %rd115, %rd182;
	add.s32 	%r639, %r583, 48;
	mul.wide.u32 	%rd183, %r639, 4;
	add.s64 	%rd73, %rd115, %rd183;
	add.s32 	%r640, %r583, 64;
	mul.wide.u32 	%rd184, %r640, 4;
	add.s64 	%rd74, %rd115, %rd184;
	add.s32 	%r641, %r583, 80;
	mul.wide.u32 	%rd185, %r641, 4;
	add.s64 	%rd75, %rd115, %rd185;
	add.s32 	%r642, %r583, 96;
	mul.wide.u32 	%rd186, %r642, 4;
	add.s64 	%rd76, %rd115, %rd186;
	add.s32 	%r643, %r583, 112;
	mul.wide.u32 	%rd187, %r643, 4;
	add.s64 	%rd77, %rd115, %rd187;
	add.s32 	%r644, %r583, 128;
	mul.wide.u32 	%rd188, %r644, 4;
	add.s64 	%rd78, %rd115, %rd188;
	add.s32 	%r645, %r583, 144;
	mul.wide.u32 	%rd189, %r645, 4;
	add.s64 	%rd79, %rd115, %rd189;
	add.s32 	%r646, %r583, 160;
	mul.wide.u32 	%rd190, %r646, 4;
	add.s64 	%rd80, %rd115, %rd190;
	add.s32 	%r647, %r583, 176;
	mul.wide.u32 	%rd191, %r647, 4;
	add.s64 	%rd81, %rd115, %rd191;
	add.s32 	%r648, %r583, 192;
	mul.wide.u32 	%rd192, %r648, 4;
	add.s64 	%rd82, %rd115, %rd192;
	add.s32 	%r649, %r583, 208;
	mul.wide.u32 	%rd193, %r649, 4;
	add.s64 	%rd83, %rd115, %rd193;
	add.s32 	%r650, %r583, 224;
	mul.wide.u32 	%rd194, %r650, 4;
	add.s64 	%rd84, %rd115, %rd194;
	add.s32 	%r651, %r583, 240;
	mul.wide.u32 	%rd195, %r651, 4;
	add.s64 	%rd85, %rd115, %rd195;
	mov.u32 	%r90, 0;
	setp.eq.s32 	%p231, %r175, 0;
	mov.u16 	%rs38, 25600;
	mov.u16 	%rs40, 21504;
	mov.u16 	%rs44, 18432;
	mov.u32 	%r3497, %r90;
	mov.u32 	%r3530, %r90;
	mov.u32 	%r3499, %r90;
	bra.uni 	$L__BB0_216;
$L__BB0_188:                            // %L39008
                                        //   in Loop: Header=BB0_216 Depth=1
	add.s32 	%r144, %r90, 64;
	setp.ne.s32 	%p334, %r90, 448;
	mov.u32 	%r90, %r144;
	@%p334 bra 	$L__BB0_216;
	bra.uni 	$L__BB0_189;
$L__BB0_216:                            // %L1377
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_218 Depth 2
                                        //     Child Loop BB0_155 Depth 2
	add.s32 	%r652, %r90, %r6;
	setp.gt.s32 	%p230, %r7, %r652;
	@%p230 bra 	$L__BB0_217;
	bra.uni 	$L__BB0_189;
$L__BB0_217:                            // %pass660
                                        //   in Loop: Header=BB0_216 Depth=1
	cvt.u32.u64 	%r846, %rd22;
	or.b32  	%r847, %r90, %r2;
	shl.b32 	%r848, %r847, 17;
	and.b32  	%r849, %r848, 60686336;
	or.b32  	%r850, %r174, %r849;
	add.s32 	%r851, %r850, %r173;
	shr.s32 	%r852, %r851, 31;
	shr.u32 	%r853, %r852, 6;
	add.s32 	%r854, %r851, %r853;
	shr.s32 	%r855, %r854, 26;
	setp.lt.s32 	%p232, %r851, 0;
	and.b32  	%r856, %r854, -67108864;
	setp.ne.s32 	%p233, %r856, %r851;
	and.pred  	%p234, %p232, %p233;
	selp.u32 	%r857, 1, 0, %p234;
	sub.s32 	%r858, %r857, %r855;
	shl.b32 	%r859, %r858, 26;
	add.s32 	%r860, %r859, %r851;
	mul.wide.s32 	%rd196, %r860, 4;
	add.s64 	%rd197, %rd3, %rd196;
	ld.global.v4.u32 	{%r861, %r862, %r863, %r864}, [%rd197];
	or.b32  	%r865, %r847, 16;
	shl.b32 	%r866, %r865, 17;
	and.b32  	%r867, %r866, 62783488;
	or.b32  	%r868, %r174, %r867;
	add.s32 	%r869, %r868, %r173;
	shr.s32 	%r870, %r869, 31;
	shr.u32 	%r871, %r870, 6;
	add.s32 	%r872, %r869, %r871;
	shr.s32 	%r873, %r872, 26;
	setp.lt.s32 	%p235, %r869, 0;
	and.b32  	%r874, %r872, -67108864;
	setp.ne.s32 	%p236, %r874, %r869;
	and.pred  	%p237, %p235, %p236;
	selp.u32 	%r875, 1, 0, %p237;
	sub.s32 	%r876, %r875, %r873;
	shl.b32 	%r877, %r876, 26;
	add.s32 	%r878, %r877, %r869;
	mul.wide.s32 	%rd198, %r878, 4;
	add.s64 	%rd199, %rd3, %rd198;
	ld.global.v4.u32 	{%r879, %r880, %r881, %r882}, [%rd199];
	and.b32  	%r883, %r90, 448;
	or.b32  	%r884, %r2, %r883;
	shl.b32 	%r885, %r884, 17;
	or.b32  	%r886, %r885, %r174;
	or.b32  	%r887, %r886, 4194304;
	add.s32 	%r888, %r887, %r173;
	shr.s32 	%r889, %r888, 31;
	shr.u32 	%r890, %r889, 6;
	add.s32 	%r891, %r888, %r890;
	shr.s32 	%r892, %r891, 26;
	setp.lt.s32 	%p238, %r888, 0;
	and.b32  	%r893, %r891, -67108864;
	setp.ne.s32 	%p239, %r893, %r888;
	and.pred  	%p240, %p238, %p239;
	selp.u32 	%r894, 1, 0, %p240;
	sub.s32 	%r895, %r894, %r892;
	shl.b32 	%r896, %r895, 26;
	add.s32 	%r897, %r896, %r888;
	mul.wide.s32 	%rd200, %r897, 4;
	add.s64 	%rd201, %rd3, %rd200;
	ld.global.v4.u32 	{%r898, %r899, %r900, %r901}, [%rd201];
	or.b32  	%r902, %r886, 6291456;
	add.s32 	%r903, %r902, %r173;
	shr.s32 	%r904, %r903, 31;
	shr.u32 	%r905, %r904, 6;
	add.s32 	%r906, %r903, %r905;
	shr.s32 	%r907, %r906, 26;
	setp.lt.s32 	%p241, %r903, 0;
	and.b32  	%r908, %r906, -67108864;
	setp.ne.s32 	%p242, %r908, %r903;
	and.pred  	%p243, %p241, %p242;
	selp.u32 	%r909, 1, 0, %p243;
	sub.s32 	%r910, %r909, %r907;
	shl.b32 	%r911, %r910, 26;
	add.s32 	%r912, %r911, %r903;
	mul.wide.s32 	%rd202, %r912, 4;
	add.s64 	%rd203, %rd3, %rd202;
	ld.global.v4.u32 	{%r913, %r914, %r915, %r916}, [%rd203];
	selp.b32 	%r917, %r863, %r861, %p231;
	shfl.sync.bfly.b32	%r918, %r917, 16, 31, -1;
	selp.b32 	%r655, %r861, %r918, %p231;
	selp.b32 	%r660, %r918, %r863, %p231;
	selp.b32 	%r919, %r864, %r862, %p231;
	shfl.sync.bfly.b32	%r920, %r919, 16, 31, -1;
	selp.b32 	%r663, %r862, %r920, %p231;
	selp.b32 	%r668, %r920, %r864, %p231;
	selp.b32 	%r921, %r881, %r879, %p231;
	shfl.sync.bfly.b32	%r922, %r921, 16, 31, -1;
	selp.b32 	%r671, %r879, %r922, %p231;
	selp.b32 	%r676, %r922, %r881, %p231;
	selp.b32 	%r923, %r882, %r880, %p231;
	shfl.sync.bfly.b32	%r924, %r923, 16, 31, -1;
	selp.b32 	%r679, %r880, %r924, %p231;
	selp.b32 	%r684, %r924, %r882, %p231;
	selp.b32 	%r925, %r900, %r898, %p231;
	shfl.sync.bfly.b32	%r926, %r925, 16, 31, -1;
	selp.b32 	%r687, %r898, %r926, %p231;
	selp.b32 	%r692, %r926, %r900, %p231;
	selp.b32 	%r927, %r901, %r899, %p231;
	shfl.sync.bfly.b32	%r928, %r927, 16, 31, -1;
	selp.b32 	%r695, %r899, %r928, %p231;
	selp.b32 	%r700, %r928, %r901, %p231;
	selp.b32 	%r929, %r915, %r913, %p231;
	shfl.sync.bfly.b32	%r930, %r929, 16, 31, -1;
	selp.b32 	%r703, %r913, %r930, %p231;
	selp.b32 	%r708, %r930, %r915, %p231;
	selp.b32 	%r931, %r916, %r914, %p231;
	shfl.sync.bfly.b32	%r932, %r931, 16, 31, -1;
	selp.b32 	%r711, %r914, %r932, %p231;
	selp.b32 	%r716, %r932, %r916, %p231;
	shl.b32 	%r656, %r660, 4;
	mov.u32 	%r654, 252645135;
	// begin inline asm
	lop3.b32 %r718, %r654, %r655, %r656, 202;
	// end inline asm
	shr.u32 	%r659, %r655, 4;
	// begin inline asm
	lop3.b32 %r734, %r654, %r659, %r660, 202;
	// end inline asm
	shl.b32 	%r664, %r668, 4;
	// begin inline asm
	lop3.b32 %r726, %r654, %r663, %r664, 202;
	// end inline asm
	shr.u32 	%r667, %r663, 4;
	// begin inline asm
	lop3.b32 %r742, %r654, %r667, %r668, 202;
	// end inline asm
	shl.b32 	%r672, %r676, 4;
	// begin inline asm
	lop3.b32 %r750, %r654, %r671, %r672, 202;
	// end inline asm
	shr.u32 	%r675, %r671, 4;
	// begin inline asm
	lop3.b32 %r766, %r654, %r675, %r676, 202;
	// end inline asm
	shl.b32 	%r680, %r684, 4;
	// begin inline asm
	lop3.b32 %r758, %r654, %r679, %r680, 202;
	// end inline asm
	shr.u32 	%r683, %r679, 4;
	// begin inline asm
	lop3.b32 %r774, %r654, %r683, %r684, 202;
	// end inline asm
	shl.b32 	%r688, %r692, 4;
	// begin inline asm
	lop3.b32 %r719, %r654, %r687, %r688, 202;
	// end inline asm
	shr.u32 	%r691, %r687, 4;
	// begin inline asm
	lop3.b32 %r735, %r654, %r691, %r692, 202;
	// end inline asm
	shl.b32 	%r696, %r700, 4;
	// begin inline asm
	lop3.b32 %r727, %r654, %r695, %r696, 202;
	// end inline asm
	shr.u32 	%r699, %r695, 4;
	// begin inline asm
	lop3.b32 %r743, %r654, %r699, %r700, 202;
	// end inline asm
	shl.b32 	%r704, %r708, 4;
	// begin inline asm
	lop3.b32 %r751, %r654, %r703, %r704, 202;
	// end inline asm
	shr.u32 	%r707, %r703, 4;
	// begin inline asm
	lop3.b32 %r767, %r654, %r707, %r708, 202;
	// end inline asm
	shl.b32 	%r712, %r716, 4;
	// begin inline asm
	lop3.b32 %r759, %r654, %r711, %r712, 202;
	// end inline asm
	shr.u32 	%r715, %r711, 4;
	// begin inline asm
	lop3.b32 %r775, %r654, %r715, %r716, 202;
	// end inline asm
	mov.u32 	%r720, 25152;
	// begin inline asm
	prmt.b32 %r782, %r718, %r719, %r720;
	// end inline asm
	mov.u32 	%r724, 29521;
	// begin inline asm
	prmt.b32 %r814, %r718, %r719, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r790, %r726, %r727, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r822, %r726, %r727, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r783, %r734, %r735, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r815, %r734, %r735, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r791, %r742, %r743, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r823, %r742, %r743, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r798, %r750, %r751, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r830, %r750, %r751, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r806, %r758, %r759, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r838, %r758, %r759, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r799, %r766, %r767, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r831, %r766, %r767, %r724;
	// end inline asm
	// begin inline asm
	prmt.b32 %r807, %r774, %r775, %r720;
	// end inline asm
	// begin inline asm
	prmt.b32 %r839, %r774, %r775, %r724;
	// end inline asm
	mov.u32 	%r840, 21520;
	// begin inline asm
	prmt.b32 %r781, %r782, %r783, %r840;
	// end inline asm
	mov.u32 	%r844, 30258;
	// begin inline asm
	prmt.b32 %r785, %r782, %r783, %r844;
	// end inline asm
	// begin inline asm
	prmt.b32 %r789, %r790, %r791, %r840;
	// end inline asm
	// begin inline asm
	prmt.b32 %r793, %r790, %r791, %r844;
	// end inline asm
	// begin inline asm
	prmt.b32 %r797, %r798, %r799, %r840;
	// end inline asm
	// begin inline asm
	prmt.b32 %r801, %r798, %r799, %r844;
	// end inline asm
	// begin inline asm
	prmt.b32 %r805, %r806, %r807, %r840;
	// end inline asm
	// begin inline asm
	prmt.b32 %r809, %r806, %r807, %r844;
	// end inline asm
	// begin inline asm
	prmt.b32 %r813, %r814, %r815, %r840;
	// end inline asm
	// begin inline asm
	prmt.b32 %r817, %r814, %r815, %r844;
	// end inline asm
	// begin inline asm
	prmt.b32 %r821, %r822, %r823, %r840;
	// end inline asm
	// begin inline asm
	prmt.b32 %r825, %r822, %r823, %r844;
	// end inline asm
	// begin inline asm
	prmt.b32 %r829, %r830, %r831, %r840;
	// end inline asm
	// begin inline asm
	prmt.b32 %r833, %r830, %r831, %r844;
	// end inline asm
	// begin inline asm
	prmt.b32 %r837, %r838, %r839, %r840;
	// end inline asm
	// begin inline asm
	prmt.b32 %r841, %r838, %r839, %r844;
	// end inline asm
	st.shared.u32 	[%rd21], %r781;
	st.shared.u32 	[%rd23+512], %r789;
	st.shared.u32 	[%rd23+256], %r785;
	st.shared.u32 	[%rd23+768], %r793;
	and.b32  	%r933, %r865, 31;
	add.s32 	%r934, %r933, %r846;
	mul.wide.u32 	%rd204, %r934, 4;
	add.s64 	%rd206, %rd115, %rd204;
	st.shared.u32 	[%rd206], %r797;
	cvt.u64.u32 	%rd207, %r933;
	add.s64 	%rd208, %rd22, %rd207;
	shl.b64 	%rd209, %rd208, 2;
	add.s64 	%rd210, %rd115, %rd209;
	st.shared.u32 	[%rd210+512], %r805;
	st.shared.u32 	[%rd210+256], %r801;
	st.shared.u32 	[%rd210+768], %r809;
	st.shared.u32 	[%rd23+128], %r813;
	st.shared.u32 	[%rd23+640], %r821;
	st.shared.u32 	[%rd23+384], %r817;
	st.shared.u32 	[%rd23+896], %r825;
	st.shared.u32 	[%rd210+128], %r829;
	st.shared.u32 	[%rd210+640], %r837;
	st.shared.u32 	[%rd210+384], %r833;
	st.shared.u32 	[%rd210+896], %r841;
	bar.sync 	0;
	ld.shared.u32 	%r935, [%rd24];
	ld.shared.u32 	%r936, [%rd25];
	ld.shared.u32 	%r937, [%rd26];
	ld.shared.u32 	%r938, [%rd27];
	ld.shared.u32 	%r939, [%rd28];
	ld.shared.u32 	%r940, [%rd29];
	ld.shared.u32 	%r941, [%rd30];
	ld.shared.u32 	%r942, [%rd31];
	ld.shared.u32 	%r943, [%rd32];
	ld.shared.u32 	%r944, [%rd33];
	ld.shared.u32 	%r945, [%rd34];
	ld.shared.u32 	%r946, [%rd35];
	ld.shared.u32 	%r947, [%rd36];
	ld.shared.u32 	%r948, [%rd37];
	ld.shared.u32 	%r949, [%rd38];
	ld.shared.u32 	%r950, [%rd39];
	bar.sync 	0;
	shfl.sync.idx.b32	%r951, %r170, 0, 31, -1;
	shfl.sync.idx.b32	%r952, %r170, 1, 31, -1;
	shfl.sync.idx.b32	%r953, %r170, 2, 31, -1;
	shfl.sync.idx.b32	%r954, %r170, 3, 31, -1;
	shfl.sync.idx.b32	%r955, %r170, 4, 31, -1;
	shfl.sync.idx.b32	%r956, %r170, 5, 31, -1;
	shfl.sync.idx.b32	%r957, %r170, 6, 31, -1;
	shfl.sync.idx.b32	%r958, %r170, 7, 31, -1;
	shfl.sync.idx.b32	%r959, %r170, 8, 31, -1;
	shfl.sync.idx.b32	%r960, %r170, 9, 31, -1;
	shfl.sync.idx.b32	%r961, %r170, 10, 31, -1;
	shfl.sync.idx.b32	%r962, %r170, 11, 31, -1;
	shfl.sync.idx.b32	%r963, %r170, 12, 31, -1;
	shfl.sync.idx.b32	%r964, %r170, 13, 31, -1;
	shfl.sync.idx.b32	%r965, %r170, 14, 31, -1;
	shfl.sync.idx.b32	%r966, %r170, 15, 31, -1;
	add.s32 	%r967, %r951, %r1;
	mul.wide.s32 	%rd211, %r967, 4;
	add.s64 	%rd212, %rd115, %rd211;
	st.shared.u32 	[%rd212], %r935;
	add.s32 	%r968, %r952, %r1;
	mul.wide.s32 	%rd213, %r968, 4;
	add.s64 	%rd214, %rd115, %rd213;
	st.shared.u32 	[%rd214], %r936;
	add.s32 	%r969, %r953, %r1;
	mul.wide.s32 	%rd215, %r969, 4;
	add.s64 	%rd216, %rd115, %rd215;
	st.shared.u32 	[%rd216], %r937;
	add.s32 	%r970, %r954, %r1;
	mul.wide.s32 	%rd217, %r970, 4;
	add.s64 	%rd218, %rd115, %rd217;
	st.shared.u32 	[%rd218], %r938;
	add.s32 	%r971, %r955, %r1;
	mul.wide.s32 	%rd219, %r971, 4;
	add.s64 	%rd220, %rd115, %rd219;
	st.shared.u32 	[%rd220], %r939;
	add.s32 	%r972, %r956, %r1;
	mul.wide.s32 	%rd221, %r972, 4;
	add.s64 	%rd222, %rd115, %rd221;
	st.shared.u32 	[%rd222], %r940;
	add.s32 	%r973, %r957, %r1;
	mul.wide.s32 	%rd223, %r973, 4;
	add.s64 	%rd224, %rd115, %rd223;
	st.shared.u32 	[%rd224], %r941;
	add.s32 	%r974, %r958, %r1;
	mul.wide.s32 	%rd225, %r974, 4;
	add.s64 	%rd226, %rd115, %rd225;
	st.shared.u32 	[%rd226], %r942;
	add.s32 	%r975, %r959, %r1;
	mul.wide.s32 	%rd227, %r975, 4;
	add.s64 	%rd228, %rd115, %rd227;
	st.shared.u32 	[%rd228], %r943;
	add.s32 	%r976, %r960, %r1;
	mul.wide.s32 	%rd229, %r976, 4;
	add.s64 	%rd230, %rd115, %rd229;
	st.shared.u32 	[%rd230], %r944;
	add.s32 	%r977, %r961, %r1;
	mul.wide.s32 	%rd231, %r977, 4;
	add.s64 	%rd232, %rd115, %rd231;
	st.shared.u32 	[%rd232], %r945;
	add.s32 	%r978, %r962, %r1;
	mul.wide.s32 	%rd233, %r978, 4;
	add.s64 	%rd234, %rd115, %rd233;
	st.shared.u32 	[%rd234], %r946;
	add.s32 	%r979, %r963, %r1;
	mul.wide.s32 	%rd235, %r979, 4;
	add.s64 	%rd236, %rd115, %rd235;
	st.shared.u32 	[%rd236], %r947;
	add.s32 	%r980, %r964, %r1;
	mul.wide.s32 	%rd237, %r980, 4;
	add.s64 	%rd238, %rd115, %rd237;
	st.shared.u32 	[%rd238], %r948;
	add.s32 	%r981, %r965, %r1;
	mul.wide.s32 	%rd239, %r981, 4;
	add.s64 	%rd240, %rd115, %rd239;
	st.shared.u32 	[%rd240], %r949;
	add.s32 	%r982, %r966, %r1;
	mul.wide.s32 	%rd241, %r982, 4;
	add.s64 	%rd242, %rd115, %rd241;
	st.shared.u32 	[%rd242], %r950;
	bar.sync 	0;
	ld.shared.u32 	%r183, [%rd40];
	ld.shared.u32 	%r184, [%rd41];
	ld.shared.u32 	%r185, [%rd42];
	ld.shared.u32 	%r186, [%rd43];
	ld.shared.u32 	%r187, [%rd44];
	ld.shared.u32 	%r188, [%rd45];
	ld.shared.u32 	%r189, [%rd46];
	ld.shared.u32 	%r190, [%rd47];
	ld.shared.u32 	%r191, [%rd48];
	ld.shared.u32 	%r192, [%rd49];
	ld.shared.u32 	%r193, [%rd50];
	ld.shared.u32 	%r194, [%rd51];
	ld.shared.u32 	%r195, [%rd52];
	ld.shared.u32 	%r196, [%rd53];
	ld.shared.u32 	%r197, [%rd54];
	ld.shared.u32 	%r198, [%rd55];
	bar.sync 	0;
	mov.u32 	%r3489, 16;
	bra.uni 	$L__BB0_218;
$L__BB0_152:                            // %L24747
                                        //   in Loop: Header=BB0_218 Depth=2
	add.s32 	%r3530, %r3530, 1;
	mov.u32 	%r3497, 0;
	mov.u32 	%r3499, %r3497;
$L__BB0_153:                            // %L24748
                                        //   in Loop: Header=BB0_218 Depth=2
	bar.sync 	0;
	add.s32 	%r3489, %r3489, -8;
	setp.ne.s32 	%p288, %r3489, -16;
	@%p288 bra 	$L__BB0_218;
	bra.uni 	$L__BB0_154;
$L__BB0_218:                            // %L10525
                                        //   Parent Loop BB0_216 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p244, %r3489, 16;
	selp.b32 	%r1375, %r183, 0, %p244;
	setp.eq.s32 	%p245, %r3489, 8;
	selp.b32 	%r1376, %r187, %r1375, %p245;
	setp.eq.s32 	%p246, %r3489, 0;
	selp.b32 	%r1377, %r191, %r1376, %p246;
	setp.eq.s32 	%p247, %r3489, -8;
	selp.b32 	%r1378, %r195, %r1377, %p247;
	selp.b32 	%r1379, %r184, 0, %p244;
	selp.b32 	%r1380, %r188, %r1379, %p245;
	selp.b32 	%r1381, %r192, %r1380, %p246;
	selp.b32 	%r1382, %r196, %r1381, %p247;
	selp.b32 	%r1383, %r185, 0, %p244;
	selp.b32 	%r1384, %r189, %r1383, %p245;
	selp.b32 	%r1385, %r193, %r1384, %p246;
	selp.b32 	%r1386, %r197, %r1385, %p247;
	selp.b32 	%r1387, %r186, 0, %p244;
	selp.b32 	%r1388, %r190, %r1387, %p245;
	selp.b32 	%r1389, %r194, %r1388, %p246;
	selp.b32 	%r1390, %r198, %r1389, %p247;
	// begin inline asm
	mov.b32 %r988, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r999, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r987, %r1378, -2004318072;
	mov.u32 	%r1124, 983055;
	// begin inline asm
	lop3.b32 %r985, %r1124, %r987, %r988, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r989, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r990, %r988, %r989;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r993, %r985, %r990;
	// end inline asm
	mov.u32 	%r1135, 15728880;
	// begin inline asm
	lop3.b32 %r996, %r1135, %r987, %r999, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1000, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1001, %r999, %r1000;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1004, %r996, %r1001;
	// end inline asm
	// begin inline asm
	mov.b32 %r1034, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1045, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1033, %r1382, -2004318072;
	// begin inline asm
	lop3.b32 %r1031, %r1124, %r1033, %r1034, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1035, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1036, %r1034, %r1035;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1039, %r1031, %r1036;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1042, %r1135, %r1033, %r1045, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1046, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1047, %r1045, %r1046;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1050, %r1042, %r1047;
	// end inline asm
	// begin inline asm
	mov.b32 %r1080, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1091, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1079, %r1386, -2004318072;
	// begin inline asm
	lop3.b32 %r1077, %r1124, %r1079, %r1080, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1081, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1082, %r1080, %r1081;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1085, %r1077, %r1082;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1088, %r1135, %r1079, %r1091, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1092, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1093, %r1091, %r1092;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1096, %r1088, %r1093;
	// end inline asm
	// begin inline asm
	mov.b32 %r1126, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1137, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1125, %r1390, -2004318072;
	// begin inline asm
	lop3.b32 %r1123, %r1124, %r1125, %r1126, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1127, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1128, %r1126, %r1127;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1131, %r1123, %r1128;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1134, %r1135, %r1125, %r1137, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1138, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1139, %r1137, %r1138;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1142, %r1134, %r1139;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r993;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1167, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r1004;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1170, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r1039;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1173, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r1050;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1176, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r1085;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1179, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r1096;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1182, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r1131;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1185, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r1142;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1188, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1246, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1191, %r1192}, {%r291, %r294}, {%r1167}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1198, %r1199}, {%r291, %r294}, {%r1170}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1205, %r1206}, {%r291, %r294}, {%r1173}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1212, %r1213}, {%r291, %r294}, {%r1176}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1219, %r1220}, {%r291, %r294}, {%r1179}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1226, %r1227}, {%r291, %r294}, {%r1182}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1233, %r1234}, {%r291, %r294}, {%r1185}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1240, %r1241}, {%r291, %r294}, {%r1188}, {%r1246, %r1246};
	// end inline asm
	@%p1 bra 	$L__BB0_220;
	bra.uni 	$L__BB0_219;
$L__BB0_220:                            // %pass4798
                                        //   in Loop: Header=BB0_218 Depth=2
	// begin inline asm
	neg.f16x2 %r1247, %r332;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1249, %r1247, %r1192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1252, %r329, %r1191, %r1249;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1256, %r332;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1258, %r1256, %r1199;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1261, %r329, %r1198, %r1258;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1265, %r332;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1267, %r1265, %r1206;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1270, %r329, %r1205, %r1267;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1274, %r332;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1276, %r1274, %r1213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1279, %r329, %r1212, %r1276;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1283, %r332;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1285, %r1283, %r1220;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1288, %r329, %r1219, %r1285;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1292, %r332;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1294, %r1292, %r1227;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1297, %r329, %r1226, %r1294;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1301, %r332;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1303, %r1301, %r1234;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1306, %r329, %r1233, %r1303;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1310, %r332;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1312, %r1310, %r1241;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1315, %r329, %r1240, %r1312;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1319, %r332, %r1191;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1322, %r329, %r1192, %r1319;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1326, %r332, %r1198;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1329, %r329, %r1199, %r1326;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1333, %r332, %r1205;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1336, %r329, %r1206, %r1333;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1340, %r332, %r1212;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1343, %r329, %r1213, %r1340;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1347, %r332, %r1219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1350, %r329, %r1220, %r1347;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1354, %r332, %r1226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1357, %r329, %r1227, %r1354;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1361, %r332, %r1233;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1364, %r329, %r1234, %r1361;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1368, %r332, %r1240;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1371, %r329, %r1241, %r1368;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1464, %r1465}, {%r376, %r379}, {%r1252, %r1322}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1472, %r1473}, {%r376, %r379}, {%r1261, %r1329}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1480, %r1481}, {%r376, %r379}, {%r1270, %r1336}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1488, %r1489}, {%r376, %r379}, {%r1279, %r1343}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1496, %r1497}, {%r376, %r379}, {%r1288, %r1350}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1504, %r1505}, {%r376, %r379}, {%r1297, %r1357}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1512, %r1513}, {%r376, %r379}, {%r1306, %r1364}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1520, %r1521}, {%r376, %r379}, {%r1315, %r1371}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1463, %r1464, %r1465, %r840;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1467, %r1464, %r1465, %r844;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1471, %r1472, %r1473, %r840;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1475, %r1472, %r1473, %r844;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1479, %r1480, %r1481, %r840;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1483, %r1480, %r1481, %r844;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1487, %r1488, %r1489, %r840;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1491, %r1488, %r1489, %r844;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1495, %r1496, %r1497, %r840;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1499, %r1496, %r1497, %r844;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1503, %r1504, %r1505, %r840;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1507, %r1504, %r1505, %r844;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1511, %r1512, %r1513, %r840;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1515, %r1512, %r1513, %r844;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1519, %r1520, %r1521, %r840;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1523, %r1520, %r1521, %r844;
	// end inline asm
	st.shared.u32 	[%rd56], %r1463;
	st.shared.u32 	[%rd57], %r1467;
	st.shared.u32 	[%rd58], %r1471;
	st.shared.u32 	[%rd59], %r1475;
	st.shared.u32 	[%rd60], %r1479;
	st.shared.u32 	[%rd61], %r1483;
	st.shared.u32 	[%rd62], %r1487;
	st.shared.u32 	[%rd63], %r1491;
	st.shared.u32 	[%rd64], %r1495;
	st.shared.u32 	[%rd65], %r1499;
	st.shared.u32 	[%rd66], %r1503;
	st.shared.u32 	[%rd67], %r1507;
	st.shared.u32 	[%rd68], %r1511;
	st.shared.u32 	[%rd69], %r1515;
	st.shared.u32 	[%rd70], %r1519;
	st.shared.u32 	[%rd71], %r1523;
	bar.sync 	0;
	ld.shared.u32 	%r1531, [%rd18];
	ld.shared.u32 	%r1538, [%rd19+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1548, %r1545}, {%r388, %r391}, {%r1531}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1557, %r1554}, {%r388, %r391}, {%r1538}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1541, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1543, %r1541, %r1545;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1546, %r422, %r1548, %r1543;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1550, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1552, %r1550, %r1554;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1555, %r422, %r1557, %r1552;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1559, %r425, %r1548;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1562, %r422, %r1545, %r1559;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1566, %r425, %r1557;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1569, %r422, %r1554, %r1566;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1592, %r1595}, {%r464, %r467}, {%r1546, %r1562}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1599, %r1603}, {%r464, %r467}, {%r1555, %r1569}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1591, %r1592, %r1592;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1594, %r1595, %r1595, %r1591;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1598, %r1599, %r1599, %r1594;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1602, %r1603, %r1603, %r1598;
	// end inline asm
	mov.u32 	%r1607, 488578335;
	// begin inline asm
	fma.rn.f16x2 %r3510, %r1607, %r1602, %r3499;
	// end inline asm
	add.s32 	%r3508, %r3497, 1;
	setp.eq.s32 	%p248, %r3508, 25;
	@%p248 bra 	$L__BB0_129;
	bra.uni 	$L__BB0_221;
$L__BB0_129:                            // %L16574
                                        //   in Loop: Header=BB0_218 Depth=2
	@%p216 bra 	$L__BB0_131;
// %bb.130:                             // %L16634
                                        //   in Loop: Header=BB0_218 Depth=2
	shl.b32 	%r1610, %r3530, 19;
	or.b32  	%r1611, %r180, %r1610;
	cvt.u64.u32 	%rd245, %r1611;
	add.s64 	%rd246, %rd245, %rd20;
	shr.u64 	%rd247, %rd246, 40;
	add.s64 	%rd248, %rd246, %rd247;
	shr.s64 	%rd249, %rd248, 24;
	setp.lt.s64 	%p250, %rd246, 0;
	and.b64  	%rd250, %rd248, -16777216;
	setp.ne.s64 	%p251, %rd250, %rd246;
	and.pred  	%p252, %p250, %p251;
	selp.u64 	%rd251, 1, 0, %p252;
	sub.s64 	%rd252, %rd251, %rd249;
	shl.b64 	%rd253, %rd252, 24;
	add.s64 	%rd254, %rd253, %rd246;
	shl.b64 	%rd255, %rd254, 2;
	add.s64 	%rd256, %rd4, %rd255;
	st.global.u32 	[%rd256], %r3510;
$L__BB0_131:                            // %L16788
                                        //   in Loop: Header=BB0_218 Depth=2
	add.s32 	%r3530, %r3530, 1;
	mov.u32 	%r3508, 0;
	mov.u32 	%r3510, %r3508;
$L__BB0_221:                            // %pass7732
                                        //   in Loop: Header=BB0_218 Depth=2
	ld.shared.u32 	%r1617, [%rd72];
	ld.shared.u32 	%r1624, [%rd73];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1634, %r1631}, {%r388, %r391}, {%r1617}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1643, %r1640}, {%r388, %r391}, {%r1624}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1627, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1629, %r1627, %r1631;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1632, %r422, %r1634, %r1629;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1636, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1638, %r1636, %r1640;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1641, %r422, %r1643, %r1638;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1645, %r425, %r1634;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1648, %r422, %r1631, %r1645;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1652, %r425, %r1643;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1655, %r422, %r1640, %r1652;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1678, %r1681}, {%r464, %r467}, {%r1632, %r1648}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1685, %r1689}, {%r464, %r467}, {%r1641, %r1655}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1677, %r1678, %r1678;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1680, %r1681, %r1681, %r1677;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1684, %r1685, %r1685, %r1680;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1688, %r1689, %r1689, %r1684;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3513, %r1607, %r1688, %r3510;
	// end inline asm
	add.s32 	%r3511, %r3508, 1;
	setp.eq.s32 	%p253, %r3511, 25;
	@%p253 bra 	$L__BB0_132;
	bra.uni 	$L__BB0_222;
$L__BB0_132:                            // %L17711
                                        //   in Loop: Header=BB0_218 Depth=2
	@%p216 bra 	$L__BB0_134;
// %bb.133:                             // %L17771
                                        //   in Loop: Header=BB0_218 Depth=2
	shl.b32 	%r1696, %r3530, 19;
	or.b32  	%r1697, %r180, %r1696;
	cvt.u64.u32 	%rd257, %r1697;
	add.s64 	%rd258, %rd257, %rd20;
	shr.u64 	%rd259, %rd258, 40;
	add.s64 	%rd260, %rd258, %rd259;
	shr.s64 	%rd261, %rd260, 24;
	setp.lt.s64 	%p255, %rd258, 0;
	and.b64  	%rd262, %rd260, -16777216;
	setp.ne.s64 	%p256, %rd262, %rd258;
	and.pred  	%p257, %p255, %p256;
	selp.u64 	%rd263, 1, 0, %p257;
	sub.s64 	%rd264, %rd263, %rd261;
	shl.b64 	%rd265, %rd264, 24;
	add.s64 	%rd266, %rd265, %rd258;
	shl.b64 	%rd267, %rd266, 2;
	add.s64 	%rd268, %rd4, %rd267;
	st.global.u32 	[%rd268], %r3513;
$L__BB0_134:                            // %L17925
                                        //   in Loop: Header=BB0_218 Depth=2
	add.s32 	%r3530, %r3530, 1;
	mov.u32 	%r3511, 0;
	mov.u32 	%r3513, %r3511;
$L__BB0_222:                            // %pass8218
                                        //   in Loop: Header=BB0_218 Depth=2
	ld.shared.u32 	%r1703, [%rd74];
	ld.shared.u32 	%r1710, [%rd75];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1720, %r1717}, {%r388, %r391}, {%r1703}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1729, %r1726}, {%r388, %r391}, {%r1710}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1713, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1715, %r1713, %r1717;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1718, %r422, %r1720, %r1715;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1722, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1724, %r1722, %r1726;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1727, %r422, %r1729, %r1724;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1731, %r425, %r1720;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1734, %r422, %r1717, %r1731;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1738, %r425, %r1729;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1741, %r422, %r1726, %r1738;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1764, %r1767}, {%r464, %r467}, {%r1718, %r1734}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1771, %r1775}, {%r464, %r467}, {%r1727, %r1741}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1763, %r1764, %r1764;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1766, %r1767, %r1767, %r1763;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1770, %r1771, %r1771, %r1766;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1774, %r1775, %r1775, %r1770;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3516, %r1607, %r1774, %r3513;
	// end inline asm
	add.s32 	%r3514, %r3511, 1;
	setp.eq.s32 	%p258, %r3514, 25;
	@%p258 bra 	$L__BB0_135;
	bra.uni 	$L__BB0_223;
$L__BB0_135:                            // %L18848
                                        //   in Loop: Header=BB0_218 Depth=2
	@%p216 bra 	$L__BB0_137;
// %bb.136:                             // %L18908
                                        //   in Loop: Header=BB0_218 Depth=2
	shl.b32 	%r1782, %r3530, 19;
	or.b32  	%r1783, %r180, %r1782;
	cvt.u64.u32 	%rd269, %r1783;
	add.s64 	%rd270, %rd269, %rd20;
	shr.u64 	%rd271, %rd270, 40;
	add.s64 	%rd272, %rd270, %rd271;
	shr.s64 	%rd273, %rd272, 24;
	setp.lt.s64 	%p260, %rd270, 0;
	and.b64  	%rd274, %rd272, -16777216;
	setp.ne.s64 	%p261, %rd274, %rd270;
	and.pred  	%p262, %p260, %p261;
	selp.u64 	%rd275, 1, 0, %p262;
	sub.s64 	%rd276, %rd275, %rd273;
	shl.b64 	%rd277, %rd276, 24;
	add.s64 	%rd278, %rd277, %rd270;
	shl.b64 	%rd279, %rd278, 2;
	add.s64 	%rd280, %rd4, %rd279;
	st.global.u32 	[%rd280], %r3516;
$L__BB0_137:                            // %L19062
                                        //   in Loop: Header=BB0_218 Depth=2
	add.s32 	%r3530, %r3530, 1;
	mov.u32 	%r3514, 0;
	mov.u32 	%r3516, %r3514;
$L__BB0_223:                            // %pass8704
                                        //   in Loop: Header=BB0_218 Depth=2
	ld.shared.u32 	%r1789, [%rd76];
	ld.shared.u32 	%r1796, [%rd77];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1806, %r1803}, {%r388, %r391}, {%r1789}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1815, %r1812}, {%r388, %r391}, {%r1796}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1799, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1801, %r1799, %r1803;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1804, %r422, %r1806, %r1801;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1808, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1810, %r1808, %r1812;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1813, %r422, %r1815, %r1810;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1817, %r425, %r1806;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1820, %r422, %r1803, %r1817;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1824, %r425, %r1815;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1827, %r422, %r1812, %r1824;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1850, %r1853}, {%r464, %r467}, {%r1804, %r1820}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1857, %r1861}, {%r464, %r467}, {%r1813, %r1827}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1849, %r1850, %r1850;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1852, %r1853, %r1853, %r1849;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1856, %r1857, %r1857, %r1852;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1860, %r1861, %r1861, %r1856;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3519, %r1607, %r1860, %r3516;
	// end inline asm
	add.s32 	%r3517, %r3514, 1;
	setp.eq.s32 	%p263, %r3517, 25;
	@%p263 bra 	$L__BB0_138;
	bra.uni 	$L__BB0_224;
$L__BB0_138:                            // %L19985
                                        //   in Loop: Header=BB0_218 Depth=2
	@%p216 bra 	$L__BB0_140;
// %bb.139:                             // %L20045
                                        //   in Loop: Header=BB0_218 Depth=2
	shl.b32 	%r1868, %r3530, 19;
	or.b32  	%r1869, %r180, %r1868;
	cvt.u64.u32 	%rd281, %r1869;
	add.s64 	%rd282, %rd281, %rd20;
	shr.u64 	%rd283, %rd282, 40;
	add.s64 	%rd284, %rd282, %rd283;
	shr.s64 	%rd285, %rd284, 24;
	setp.lt.s64 	%p265, %rd282, 0;
	and.b64  	%rd286, %rd284, -16777216;
	setp.ne.s64 	%p266, %rd286, %rd282;
	and.pred  	%p267, %p265, %p266;
	selp.u64 	%rd287, 1, 0, %p267;
	sub.s64 	%rd288, %rd287, %rd285;
	shl.b64 	%rd289, %rd288, 24;
	add.s64 	%rd290, %rd289, %rd282;
	shl.b64 	%rd291, %rd290, 2;
	add.s64 	%rd292, %rd4, %rd291;
	st.global.u32 	[%rd292], %r3519;
$L__BB0_140:                            // %L20199
                                        //   in Loop: Header=BB0_218 Depth=2
	add.s32 	%r3530, %r3530, 1;
	mov.u32 	%r3517, 0;
	mov.u32 	%r3519, %r3517;
$L__BB0_224:                            // %pass9190
                                        //   in Loop: Header=BB0_218 Depth=2
	ld.shared.u32 	%r1875, [%rd78];
	ld.shared.u32 	%r1882, [%rd79];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1892, %r1889}, {%r388, %r391}, {%r1875}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1901, %r1898}, {%r388, %r391}, {%r1882}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1885, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1887, %r1885, %r1889;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1890, %r422, %r1892, %r1887;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1894, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1896, %r1894, %r1898;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1899, %r422, %r1901, %r1896;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1903, %r425, %r1892;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1906, %r422, %r1889, %r1903;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1910, %r425, %r1901;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1913, %r422, %r1898, %r1910;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1936, %r1939}, {%r464, %r467}, {%r1890, %r1906}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1943, %r1947}, {%r464, %r467}, {%r1899, %r1913}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1935, %r1936, %r1936;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1938, %r1939, %r1939, %r1935;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1942, %r1943, %r1943, %r1938;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1946, %r1947, %r1947, %r1942;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3522, %r1607, %r1946, %r3519;
	// end inline asm
	add.s32 	%r3520, %r3517, 1;
	setp.eq.s32 	%p268, %r3520, 25;
	@%p268 bra 	$L__BB0_141;
	bra.uni 	$L__BB0_225;
$L__BB0_141:                            // %L21122
                                        //   in Loop: Header=BB0_218 Depth=2
	@%p216 bra 	$L__BB0_143;
// %bb.142:                             // %L21182
                                        //   in Loop: Header=BB0_218 Depth=2
	shl.b32 	%r1954, %r3530, 19;
	or.b32  	%r1955, %r180, %r1954;
	cvt.u64.u32 	%rd293, %r1955;
	add.s64 	%rd294, %rd293, %rd20;
	shr.u64 	%rd295, %rd294, 40;
	add.s64 	%rd296, %rd294, %rd295;
	shr.s64 	%rd297, %rd296, 24;
	setp.lt.s64 	%p270, %rd294, 0;
	and.b64  	%rd298, %rd296, -16777216;
	setp.ne.s64 	%p271, %rd298, %rd294;
	and.pred  	%p272, %p270, %p271;
	selp.u64 	%rd299, 1, 0, %p272;
	sub.s64 	%rd300, %rd299, %rd297;
	shl.b64 	%rd301, %rd300, 24;
	add.s64 	%rd302, %rd301, %rd294;
	shl.b64 	%rd303, %rd302, 2;
	add.s64 	%rd304, %rd4, %rd303;
	st.global.u32 	[%rd304], %r3522;
$L__BB0_143:                            // %L21336
                                        //   in Loop: Header=BB0_218 Depth=2
	add.s32 	%r3530, %r3530, 1;
	mov.u32 	%r3520, 0;
	mov.u32 	%r3522, %r3520;
$L__BB0_225:                            // %pass9676
                                        //   in Loop: Header=BB0_218 Depth=2
	ld.shared.u32 	%r1961, [%rd80];
	ld.shared.u32 	%r1968, [%rd81];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1978, %r1975}, {%r388, %r391}, {%r1961}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1987, %r1984}, {%r388, %r391}, {%r1968}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1971, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1973, %r1971, %r1975;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1976, %r422, %r1978, %r1973;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1980, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1982, %r1980, %r1984;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1985, %r422, %r1987, %r1982;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1989, %r425, %r1978;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1992, %r422, %r1975, %r1989;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1996, %r425, %r1987;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1999, %r422, %r1984, %r1996;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2022, %r2025}, {%r464, %r467}, {%r1976, %r1992}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2029, %r2033}, {%r464, %r467}, {%r1985, %r1999}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2021, %r2022, %r2022;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2024, %r2025, %r2025, %r2021;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2028, %r2029, %r2029, %r2024;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2032, %r2033, %r2033, %r2028;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3525, %r1607, %r2032, %r3522;
	// end inline asm
	add.s32 	%r3523, %r3520, 1;
	setp.eq.s32 	%p273, %r3523, 25;
	@%p273 bra 	$L__BB0_144;
	bra.uni 	$L__BB0_226;
$L__BB0_144:                            // %L22259
                                        //   in Loop: Header=BB0_218 Depth=2
	@%p216 bra 	$L__BB0_146;
// %bb.145:                             // %L22319
                                        //   in Loop: Header=BB0_218 Depth=2
	shl.b32 	%r2040, %r3530, 19;
	or.b32  	%r2041, %r180, %r2040;
	cvt.u64.u32 	%rd305, %r2041;
	add.s64 	%rd306, %rd305, %rd20;
	shr.u64 	%rd307, %rd306, 40;
	add.s64 	%rd308, %rd306, %rd307;
	shr.s64 	%rd309, %rd308, 24;
	setp.lt.s64 	%p275, %rd306, 0;
	and.b64  	%rd310, %rd308, -16777216;
	setp.ne.s64 	%p276, %rd310, %rd306;
	and.pred  	%p277, %p275, %p276;
	selp.u64 	%rd311, 1, 0, %p277;
	sub.s64 	%rd312, %rd311, %rd309;
	shl.b64 	%rd313, %rd312, 24;
	add.s64 	%rd314, %rd313, %rd306;
	shl.b64 	%rd315, %rd314, 2;
	add.s64 	%rd316, %rd4, %rd315;
	st.global.u32 	[%rd316], %r3525;
$L__BB0_146:                            // %L22473
                                        //   in Loop: Header=BB0_218 Depth=2
	add.s32 	%r3530, %r3530, 1;
	mov.u32 	%r3523, 0;
	mov.u32 	%r3525, %r3523;
$L__BB0_226:                            // %pass10162
                                        //   in Loop: Header=BB0_218 Depth=2
	ld.shared.u32 	%r2047, [%rd82];
	ld.shared.u32 	%r2054, [%rd83];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2064, %r2061}, {%r388, %r391}, {%r2047}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2073, %r2070}, {%r388, %r391}, {%r2054}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2057, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2059, %r2057, %r2061;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2062, %r422, %r2064, %r2059;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2066, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2068, %r2066, %r2070;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2071, %r422, %r2073, %r2068;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2075, %r425, %r2064;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2078, %r422, %r2061, %r2075;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2082, %r425, %r2073;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2085, %r422, %r2070, %r2082;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2108, %r2111}, {%r464, %r467}, {%r2062, %r2078}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2115, %r2119}, {%r464, %r467}, {%r2071, %r2085}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2107, %r2108, %r2108;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2110, %r2111, %r2111, %r2107;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2114, %r2115, %r2115, %r2110;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2118, %r2119, %r2119, %r2114;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3528, %r1607, %r2118, %r3525;
	// end inline asm
	add.s32 	%r3526, %r3523, 1;
	setp.eq.s32 	%p278, %r3526, 25;
	@%p278 bra 	$L__BB0_147;
	bra.uni 	$L__BB0_227;
$L__BB0_147:                            // %L23396
                                        //   in Loop: Header=BB0_218 Depth=2
	@%p216 bra 	$L__BB0_149;
// %bb.148:                             // %L23456
                                        //   in Loop: Header=BB0_218 Depth=2
	shl.b32 	%r2126, %r3530, 19;
	or.b32  	%r2127, %r180, %r2126;
	cvt.u64.u32 	%rd317, %r2127;
	add.s64 	%rd318, %rd317, %rd20;
	shr.u64 	%rd319, %rd318, 40;
	add.s64 	%rd320, %rd318, %rd319;
	shr.s64 	%rd321, %rd320, 24;
	setp.lt.s64 	%p280, %rd318, 0;
	and.b64  	%rd322, %rd320, -16777216;
	setp.ne.s64 	%p281, %rd322, %rd318;
	and.pred  	%p282, %p280, %p281;
	selp.u64 	%rd323, 1, 0, %p282;
	sub.s64 	%rd324, %rd323, %rd321;
	shl.b64 	%rd325, %rd324, 24;
	add.s64 	%rd326, %rd325, %rd318;
	shl.b64 	%rd327, %rd326, 2;
	add.s64 	%rd328, %rd4, %rd327;
	st.global.u32 	[%rd328], %r3528;
$L__BB0_149:                            // %L23610
                                        //   in Loop: Header=BB0_218 Depth=2
	add.s32 	%r3530, %r3530, 1;
	mov.u32 	%r3526, 0;
	mov.u32 	%r3528, %r3526;
$L__BB0_227:                            // %pass10648
                                        //   in Loop: Header=BB0_218 Depth=2
	ld.shared.u32 	%r2133, [%rd84];
	ld.shared.u32 	%r2140, [%rd85];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2150, %r2147}, {%r388, %r391}, {%r2133}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2159, %r2156}, {%r388, %r391}, {%r2140}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2143, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2145, %r2143, %r2147;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2148, %r422, %r2150, %r2145;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2152, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2154, %r2152, %r2156;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2157, %r422, %r2159, %r2154;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2161, %r425, %r2150;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2164, %r422, %r2147, %r2161;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2168, %r425, %r2159;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2171, %r422, %r2156, %r2168;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2194, %r2197}, {%r464, %r467}, {%r2148, %r2164}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2201, %r2205}, {%r464, %r467}, {%r2157, %r2171}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2193, %r2194, %r2194;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2196, %r2197, %r2197, %r2193;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2200, %r2201, %r2201, %r2196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2204, %r2205, %r2205, %r2200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3499, %r1607, %r2204, %r3528;
	// end inline asm
	add.s32 	%r3497, %r3526, 1;
	setp.eq.s32 	%p283, %r3497, 25;
	@%p283 bra 	$L__BB0_150;
	bra.uni 	$L__BB0_153;
$L__BB0_150:                            // %L24533
                                        //   in Loop: Header=BB0_218 Depth=2
	@%p216 bra 	$L__BB0_152;
// %bb.151:                             // %L24593
                                        //   in Loop: Header=BB0_218 Depth=2
	shl.b32 	%r2212, %r3530, 19;
	or.b32  	%r2213, %r180, %r2212;
	cvt.u64.u32 	%rd329, %r2213;
	add.s64 	%rd330, %rd329, %rd20;
	shr.u64 	%rd331, %rd330, 40;
	add.s64 	%rd332, %rd330, %rd331;
	shr.s64 	%rd333, %rd332, 24;
	setp.lt.s64 	%p285, %rd330, 0;
	and.b64  	%rd334, %rd332, -16777216;
	setp.ne.s64 	%p286, %rd334, %rd330;
	and.pred  	%p287, %p285, %p286;
	selp.u64 	%rd335, 1, 0, %p287;
	sub.s64 	%rd336, %rd335, %rd333;
	shl.b64 	%rd337, %rd336, 24;
	add.s64 	%rd338, %rd337, %rd330;
	shl.b64 	%rd339, %rd338, 2;
	add.s64 	%rd340, %rd4, %rd339;
	st.global.u32 	[%rd340], %r3499;
	bra.uni 	$L__BB0_152;
$L__BB0_154:                            // %L24769.preheader
                                        //   in Loop: Header=BB0_216 Depth=1
	or.b32  	%r2216, %r182, 64;
	add.s32 	%r2217, %r176, %r2216;
	mul.wide.u32 	%rd341, %r2217, 4;
	add.s64 	%rd6, %rd115, %rd341;
	add.s32 	%r2218, %r177, %r2216;
	mul.wide.u32 	%rd343, %r2218, 4;
	add.s64 	%rd7, %rd115, %rd343;
	add.s32 	%r2219, %r178, %r2216;
	mul.wide.u32 	%rd344, %r2219, 4;
	add.s64 	%rd8, %rd115, %rd344;
	add.s32 	%r2220, %r179, %r2216;
	mul.wide.u32 	%rd345, %r2220, 4;
	add.s64 	%rd9, %rd115, %rd345;
	or.b32  	%r2221, %r182, 128;
	add.s32 	%r2222, %r176, %r2221;
	mul.wide.u32 	%rd346, %r2222, 4;
	add.s64 	%rd10, %rd115, %rd346;
	add.s32 	%r2223, %r177, %r2221;
	mul.wide.u32 	%rd347, %r2223, 4;
	add.s64 	%rd11, %rd115, %rd347;
	add.s32 	%r2224, %r178, %r2221;
	mul.wide.u32 	%rd348, %r2224, 4;
	add.s64 	%rd12, %rd115, %rd348;
	add.s32 	%r2225, %r179, %r2221;
	mul.wide.u32 	%rd349, %r2225, 4;
	add.s64 	%rd13, %rd115, %rd349;
	or.b32  	%r2226, %r182, 192;
	add.s32 	%r2227, %r176, %r2226;
	mul.wide.u32 	%rd350, %r2227, 4;
	add.s64 	%rd14, %rd115, %rd350;
	add.s32 	%r2228, %r177, %r2226;
	mul.wide.u32 	%rd351, %r2228, 4;
	add.s64 	%rd15, %rd115, %rd351;
	add.s32 	%r2229, %r178, %r2226;
	mul.wide.u32 	%rd352, %r2229, 4;
	add.s64 	%rd16, %rd115, %rd352;
	add.s32 	%r2230, %r179, %r2226;
	mul.wide.u32 	%rd353, %r2230, 4;
	add.s64 	%rd17, %rd115, %rd353;
	mov.u32 	%r3496, 16;
	bra.uni 	$L__BB0_155;
$L__BB0_186:                            // %L38991
                                        //   in Loop: Header=BB0_155 Depth=2
	add.s32 	%r3530, %r3530, 1;
	mov.u32 	%r3497, %r1246;
	mov.u32 	%r3499, %r1246;
$L__BB0_187:                            // %L38992
                                        //   in Loop: Header=BB0_155 Depth=2
	bar.sync 	0;
	add.s32 	%r3496, %r3496, -8;
	setp.ne.s32 	%p333, %r3496, -16;
	@%p333 bra 	$L__BB0_155;
	bra.uni 	$L__BB0_188;
$L__BB0_155:                            // %L24769
                                        //   Parent Loop BB0_216 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p289, %r3496, 16;
	selp.b32 	%r2842, %r183, 0, %p289;
	setp.eq.s32 	%p290, %r3496, 8;
	selp.b32 	%r2843, %r187, %r2842, %p290;
	setp.eq.s32 	%p291, %r3496, 0;
	selp.b32 	%r2844, %r191, %r2843, %p291;
	setp.eq.s32 	%p292, %r3496, -8;
	selp.b32 	%r2845, %r195, %r2844, %p292;
	selp.b32 	%r2846, %r184, 0, %p289;
	selp.b32 	%r2847, %r188, %r2846, %p290;
	selp.b32 	%r2848, %r192, %r2847, %p291;
	selp.b32 	%r2849, %r196, %r2848, %p292;
	selp.b32 	%r2850, %r185, 0, %p289;
	selp.b32 	%r2851, %r189, %r2850, %p290;
	selp.b32 	%r2852, %r193, %r2851, %p291;
	selp.b32 	%r2853, %r197, %r2852, %p292;
	selp.b32 	%r2854, %r186, 0, %p289;
	selp.b32 	%r2855, %r190, %r2854, %p290;
	selp.b32 	%r2856, %r194, %r2855, %p291;
	selp.b32 	%r2857, %r198, %r2856, %p292;
	// begin inline asm
	mov.b32 %r2258, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2269, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2858, %r2845, 8;
	xor.b32  	%r2268, %r2858, 8947848;
	// begin inline asm
	lop3.b32 %r2255, %r1124, %r2268, %r2258, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2259, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2260, %r2258, %r2259;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2263, %r2255, %r2260;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2266, %r1135, %r2268, %r2269, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2270, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2271, %r2269, %r2270;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2274, %r2266, %r2271;
	// end inline asm
	// begin inline asm
	mov.b32 %r2304, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2315, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2859, %r2849, 8;
	xor.b32  	%r2314, %r2859, 8947848;
	// begin inline asm
	lop3.b32 %r2301, %r1124, %r2314, %r2304, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2305, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2306, %r2304, %r2305;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2309, %r2301, %r2306;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2312, %r1135, %r2314, %r2315, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2316, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2317, %r2315, %r2316;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2320, %r2312, %r2317;
	// end inline asm
	// begin inline asm
	mov.b32 %r2350, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2361, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2860, %r2853, 8;
	xor.b32  	%r2360, %r2860, 8947848;
	// begin inline asm
	lop3.b32 %r2347, %r1124, %r2360, %r2350, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2351, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2352, %r2350, %r2351;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2355, %r2347, %r2352;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2358, %r1135, %r2360, %r2361, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2362, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2363, %r2361, %r2362;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2366, %r2358, %r2363;
	// end inline asm
	// begin inline asm
	mov.b32 %r2396, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2407, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2861, %r2857, 8;
	xor.b32  	%r2406, %r2861, 8947848;
	// begin inline asm
	lop3.b32 %r2393, %r1124, %r2406, %r2396, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2397, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2398, %r2396, %r2397;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2401, %r2393, %r2398;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2404, %r1135, %r2406, %r2407, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2408, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2409, %r2407, %r2408;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2412, %r2404, %r2409;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r2263;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2415, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2274;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2418, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r2309;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2421, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2320;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2424, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r2355;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2427, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2366;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2430, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r171;
    mov.b32 {%r2re, %r2im}, %r2401;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2433, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2412;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2436, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2502, %r2499}, {%r291, %r294}, {%r2415}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2511, %r2508}, {%r291, %r294}, {%r2418}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2520, %r2517}, {%r291, %r294}, {%r2421}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2529, %r2526}, {%r291, %r294}, {%r2424}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2538, %r2535}, {%r291, %r294}, {%r2427}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2547, %r2544}, {%r291, %r294}, {%r2430}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2556, %r2553}, {%r291, %r294}, {%r2433}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2565, %r2562}, {%r291, %r294}, {%r2436}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2495, %r332;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2497, %r2495, %r2499;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2500, %r329, %r2502, %r2497;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2504, %r332;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2506, %r2504, %r2508;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2509, %r329, %r2511, %r2506;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2513, %r332;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2515, %r2513, %r2517;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2518, %r329, %r2520, %r2515;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2522, %r332;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2524, %r2522, %r2526;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2527, %r329, %r2529, %r2524;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2531, %r332;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2533, %r2531, %r2535;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2536, %r329, %r2538, %r2533;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2540, %r332;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2542, %r2540, %r2544;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2545, %r329, %r2547, %r2542;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2549, %r332;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2551, %r2549, %r2553;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2554, %r329, %r2556, %r2551;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2558, %r332;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2560, %r2558, %r2562;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2563, %r329, %r2565, %r2560;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2567, %r332, %r2502;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2570, %r329, %r2499, %r2567;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2574, %r332, %r2511;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2577, %r329, %r2508, %r2574;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2581, %r332, %r2520;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2584, %r329, %r2517, %r2581;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2588, %r332, %r2529;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2591, %r329, %r2526, %r2588;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2595, %r332, %r2538;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2598, %r329, %r2535, %r2595;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2602, %r332, %r2547;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2605, %r329, %r2544, %r2602;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2609, %r332, %r2556;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2612, %r329, %r2553, %r2609;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2616, %r332, %r2565;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2619, %r329, %r2562, %r2616;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2696, %r2697}, {%r376, %r379}, {%r2500, %r2570}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2704, %r2705}, {%r376, %r379}, {%r2509, %r2577}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2712, %r2713}, {%r376, %r379}, {%r2518, %r2584}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2720, %r2721}, {%r376, %r379}, {%r2527, %r2591}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2728, %r2729}, {%r376, %r379}, {%r2536, %r2598}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2736, %r2737}, {%r376, %r379}, {%r2545, %r2605}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2744, %r2745}, {%r376, %r379}, {%r2554, %r2612}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2752, %r2753}, {%r376, %r379}, {%r2563, %r2619}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2695, %r2696, %r2697, %r840;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2699, %r2696, %r2697, %r844;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2703, %r2704, %r2705, %r840;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2707, %r2704, %r2705, %r844;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2711, %r2712, %r2713, %r840;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2715, %r2712, %r2713, %r844;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2719, %r2720, %r2721, %r840;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2723, %r2720, %r2721, %r844;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2727, %r2728, %r2729, %r840;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2731, %r2728, %r2729, %r844;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2735, %r2736, %r2737, %r840;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2739, %r2736, %r2737, %r844;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2743, %r2744, %r2745, %r840;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2747, %r2744, %r2745, %r844;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2751, %r2752, %r2753, %r840;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2755, %r2752, %r2753, %r844;
	// end inline asm
	st.shared.u32 	[%rd56], %r2695;
	st.shared.u32 	[%rd57], %r2699;
	st.shared.u32 	[%rd58], %r2703;
	st.shared.u32 	[%rd59], %r2707;
	st.shared.u32 	[%rd6], %r2711;
	st.shared.u32 	[%rd7], %r2715;
	st.shared.u32 	[%rd8], %r2719;
	st.shared.u32 	[%rd9], %r2723;
	st.shared.u32 	[%rd10], %r2727;
	st.shared.u32 	[%rd11], %r2731;
	st.shared.u32 	[%rd12], %r2735;
	st.shared.u32 	[%rd13], %r2739;
	st.shared.u32 	[%rd14], %r2743;
	st.shared.u32 	[%rd15], %r2747;
	st.shared.u32 	[%rd16], %r2751;
	st.shared.u32 	[%rd17], %r2755;
	bar.sync 	0;
	ld.shared.u32 	%r2763, [%rd18];
	ld.shared.u32 	%r2770, [%rd19+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2780, %r2777}, {%r388, %r391}, {%r2763}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2789, %r2786}, {%r388, %r391}, {%r2770}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2773, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2775, %r2773, %r2777;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2778, %r422, %r2780, %r2775;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2782, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2784, %r2782, %r2786;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2787, %r422, %r2789, %r2784;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2791, %r425, %r2780;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2794, %r422, %r2777, %r2791;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2798, %r425, %r2789;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2801, %r422, %r2786, %r2798;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2824, %r2827}, {%r464, %r467}, {%r2778, %r2794}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2831, %r2835}, {%r464, %r467}, {%r2787, %r2801}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2823, %r2824, %r2824;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2826, %r2827, %r2827, %r2823;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2830, %r2831, %r2831, %r2826;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2834, %r2835, %r2835, %r2830;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3531, %r1607, %r2834, %r3499;
	// end inline asm
	add.s32 	%r3529, %r3497, 1;
	setp.ne.s32 	%p293, %r3529, 25;
	@%p293 bra 	$L__BB0_159;
// %bb.156:                             // %L30818
                                        //   in Loop: Header=BB0_155 Depth=2
	@%p216 bra 	$L__BB0_158;
// %bb.157:                             // %L30878
                                        //   in Loop: Header=BB0_155 Depth=2
	shl.b32 	%r2862, %r3530, 19;
	or.b32  	%r2863, %r180, %r2862;
	cvt.u64.u32 	%rd354, %r2863;
	add.s64 	%rd355, %rd354, %rd20;
	shr.u64 	%rd356, %rd355, 40;
	add.s64 	%rd357, %rd355, %rd356;
	shr.s64 	%rd358, %rd357, 24;
	setp.lt.s64 	%p295, %rd355, 0;
	and.b64  	%rd359, %rd357, -16777216;
	setp.ne.s64 	%p296, %rd359, %rd355;
	and.pred  	%p297, %p295, %p296;
	selp.u64 	%rd360, 1, 0, %p297;
	sub.s64 	%rd361, %rd360, %rd358;
	shl.b64 	%rd362, %rd361, 24;
	add.s64 	%rd363, %rd362, %rd355;
	shl.b64 	%rd364, %rd363, 2;
	add.s64 	%rd365, %rd4, %rd364;
	st.global.u32 	[%rd365], %r3531;
$L__BB0_158:                            // %L31032
                                        //   in Loop: Header=BB0_155 Depth=2
	add.s32 	%r3530, %r3530, 1;
	mov.u32 	%r3529, 0;
	mov.u32 	%r3531, %r3529;
$L__BB0_159:                            // %pass13949
                                        //   in Loop: Header=BB0_155 Depth=2
	ld.shared.u32 	%r2869, [%rd72];
	ld.shared.u32 	%r2876, [%rd73];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2886, %r2883}, {%r388, %r391}, {%r2869}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2895, %r2892}, {%r388, %r391}, {%r2876}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2879, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2881, %r2879, %r2883;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2884, %r422, %r2886, %r2881;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2888, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2890, %r2888, %r2892;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2893, %r422, %r2895, %r2890;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2897, %r425, %r2886;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2900, %r422, %r2883, %r2897;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2904, %r425, %r2895;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2907, %r422, %r2892, %r2904;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2930, %r2933}, {%r464, %r467}, {%r2884, %r2900}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2937, %r2941}, {%r464, %r467}, {%r2893, %r2907}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2929, %r2930, %r2930;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2932, %r2933, %r2933, %r2929;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2936, %r2937, %r2937, %r2932;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2940, %r2941, %r2941, %r2936;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3534, %r1607, %r2940, %r3531;
	// end inline asm
	add.s32 	%r3532, %r3529, 1;
	setp.eq.s32 	%p298, %r3532, 25;
	@%p298 bra 	$L__BB0_160;
	bra.uni 	$L__BB0_163;
$L__BB0_160:                            // %L31955
                                        //   in Loop: Header=BB0_155 Depth=2
	@%p216 bra 	$L__BB0_162;
// %bb.161:                             // %L32015
                                        //   in Loop: Header=BB0_155 Depth=2
	shl.b32 	%r2948, %r3530, 19;
	or.b32  	%r2949, %r180, %r2948;
	cvt.u64.u32 	%rd366, %r2949;
	add.s64 	%rd367, %rd366, %rd20;
	shr.u64 	%rd368, %rd367, 40;
	add.s64 	%rd369, %rd367, %rd368;
	shr.s64 	%rd370, %rd369, 24;
	setp.lt.s64 	%p300, %rd367, 0;
	and.b64  	%rd371, %rd369, -16777216;
	setp.ne.s64 	%p301, %rd371, %rd367;
	and.pred  	%p302, %p300, %p301;
	selp.u64 	%rd372, 1, 0, %p302;
	sub.s64 	%rd373, %rd372, %rd370;
	shl.b64 	%rd374, %rd373, 24;
	add.s64 	%rd375, %rd374, %rd367;
	shl.b64 	%rd376, %rd375, 2;
	add.s64 	%rd377, %rd4, %rd376;
	st.global.u32 	[%rd377], %r3534;
$L__BB0_162:                            // %L32169
                                        //   in Loop: Header=BB0_155 Depth=2
	add.s32 	%r3530, %r3530, 1;
	mov.u32 	%r3532, 0;
	mov.u32 	%r3534, %r3532;
$L__BB0_163:                            // %pass14435
                                        //   in Loop: Header=BB0_155 Depth=2
	ld.shared.u32 	%r2955, [%rd74];
	ld.shared.u32 	%r2962, [%rd75];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2972, %r2969}, {%r388, %r391}, {%r2955}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2981, %r2978}, {%r388, %r391}, {%r2962}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2965, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2967, %r2965, %r2969;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2970, %r422, %r2972, %r2967;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2974, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2976, %r2974, %r2978;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2979, %r422, %r2981, %r2976;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2983, %r425, %r2972;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2986, %r422, %r2969, %r2983;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2990, %r425, %r2981;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2993, %r422, %r2978, %r2990;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3016, %r3019}, {%r464, %r467}, {%r2970, %r2986}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3023, %r3027}, {%r464, %r467}, {%r2979, %r2993}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3015, %r3016, %r3016;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3018, %r3019, %r3019, %r3015;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3022, %r3023, %r3023, %r3018;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3026, %r3027, %r3027, %r3022;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3537, %r1607, %r3026, %r3534;
	// end inline asm
	add.s32 	%r3535, %r3532, 1;
	setp.eq.s32 	%p303, %r3535, 25;
	@%p303 bra 	$L__BB0_164;
	bra.uni 	$L__BB0_167;
$L__BB0_164:                            // %L33092
                                        //   in Loop: Header=BB0_155 Depth=2
	@%p216 bra 	$L__BB0_166;
// %bb.165:                             // %L33152
                                        //   in Loop: Header=BB0_155 Depth=2
	shl.b32 	%r3034, %r3530, 19;
	or.b32  	%r3035, %r180, %r3034;
	cvt.u64.u32 	%rd378, %r3035;
	add.s64 	%rd379, %rd378, %rd20;
	shr.u64 	%rd380, %rd379, 40;
	add.s64 	%rd381, %rd379, %rd380;
	shr.s64 	%rd382, %rd381, 24;
	setp.lt.s64 	%p305, %rd379, 0;
	and.b64  	%rd383, %rd381, -16777216;
	setp.ne.s64 	%p306, %rd383, %rd379;
	and.pred  	%p307, %p305, %p306;
	selp.u64 	%rd384, 1, 0, %p307;
	sub.s64 	%rd385, %rd384, %rd382;
	shl.b64 	%rd386, %rd385, 24;
	add.s64 	%rd387, %rd386, %rd379;
	shl.b64 	%rd388, %rd387, 2;
	add.s64 	%rd389, %rd4, %rd388;
	st.global.u32 	[%rd389], %r3537;
$L__BB0_166:                            // %L33306
                                        //   in Loop: Header=BB0_155 Depth=2
	add.s32 	%r3530, %r3530, 1;
	mov.u32 	%r3535, 0;
	mov.u32 	%r3537, %r3535;
$L__BB0_167:                            // %pass14921
                                        //   in Loop: Header=BB0_155 Depth=2
	ld.shared.u32 	%r3041, [%rd76];
	ld.shared.u32 	%r3048, [%rd77];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3058, %r3055}, {%r388, %r391}, {%r3041}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3067, %r3064}, {%r388, %r391}, {%r3048}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3051, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3053, %r3051, %r3055;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3056, %r422, %r3058, %r3053;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3060, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3062, %r3060, %r3064;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3065, %r422, %r3067, %r3062;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3069, %r425, %r3058;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3072, %r422, %r3055, %r3069;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3076, %r425, %r3067;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3079, %r422, %r3064, %r3076;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3102, %r3105}, {%r464, %r467}, {%r3056, %r3072}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3109, %r3113}, {%r464, %r467}, {%r3065, %r3079}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3101, %r3102, %r3102;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3104, %r3105, %r3105, %r3101;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3108, %r3109, %r3109, %r3104;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3112, %r3113, %r3113, %r3108;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3540, %r1607, %r3112, %r3537;
	// end inline asm
	add.s32 	%r3538, %r3535, 1;
	setp.eq.s32 	%p308, %r3538, 25;
	@%p308 bra 	$L__BB0_168;
	bra.uni 	$L__BB0_171;
$L__BB0_168:                            // %L34229
                                        //   in Loop: Header=BB0_155 Depth=2
	@%p216 bra 	$L__BB0_170;
// %bb.169:                             // %L34289
                                        //   in Loop: Header=BB0_155 Depth=2
	shl.b32 	%r3120, %r3530, 19;
	or.b32  	%r3121, %r180, %r3120;
	cvt.u64.u32 	%rd390, %r3121;
	add.s64 	%rd391, %rd390, %rd20;
	shr.u64 	%rd392, %rd391, 40;
	add.s64 	%rd393, %rd391, %rd392;
	shr.s64 	%rd394, %rd393, 24;
	setp.lt.s64 	%p310, %rd391, 0;
	and.b64  	%rd395, %rd393, -16777216;
	setp.ne.s64 	%p311, %rd395, %rd391;
	and.pred  	%p312, %p310, %p311;
	selp.u64 	%rd396, 1, 0, %p312;
	sub.s64 	%rd397, %rd396, %rd394;
	shl.b64 	%rd398, %rd397, 24;
	add.s64 	%rd399, %rd398, %rd391;
	shl.b64 	%rd400, %rd399, 2;
	add.s64 	%rd401, %rd4, %rd400;
	st.global.u32 	[%rd401], %r3540;
$L__BB0_170:                            // %L34443
                                        //   in Loop: Header=BB0_155 Depth=2
	add.s32 	%r3530, %r3530, 1;
	mov.u32 	%r3538, 0;
	mov.u32 	%r3540, %r3538;
$L__BB0_171:                            // %pass15407
                                        //   in Loop: Header=BB0_155 Depth=2
	ld.shared.u32 	%r3127, [%rd78];
	ld.shared.u32 	%r3134, [%rd79];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3144, %r3141}, {%r388, %r391}, {%r3127}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3153, %r3150}, {%r388, %r391}, {%r3134}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3137, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3139, %r3137, %r3141;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3142, %r422, %r3144, %r3139;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3146, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3148, %r3146, %r3150;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3151, %r422, %r3153, %r3148;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3155, %r425, %r3144;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3158, %r422, %r3141, %r3155;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3162, %r425, %r3153;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3165, %r422, %r3150, %r3162;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3188, %r3191}, {%r464, %r467}, {%r3142, %r3158}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3195, %r3199}, {%r464, %r467}, {%r3151, %r3165}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3187, %r3188, %r3188;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3190, %r3191, %r3191, %r3187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3194, %r3195, %r3195, %r3190;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3198, %r3199, %r3199, %r3194;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3543, %r1607, %r3198, %r3540;
	// end inline asm
	add.s32 	%r3541, %r3538, 1;
	setp.eq.s32 	%p313, %r3541, 25;
	@%p313 bra 	$L__BB0_172;
	bra.uni 	$L__BB0_175;
$L__BB0_172:                            // %L35366
                                        //   in Loop: Header=BB0_155 Depth=2
	@%p216 bra 	$L__BB0_174;
// %bb.173:                             // %L35426
                                        //   in Loop: Header=BB0_155 Depth=2
	shl.b32 	%r3206, %r3530, 19;
	or.b32  	%r3207, %r180, %r3206;
	cvt.u64.u32 	%rd402, %r3207;
	add.s64 	%rd403, %rd402, %rd20;
	shr.u64 	%rd404, %rd403, 40;
	add.s64 	%rd405, %rd403, %rd404;
	shr.s64 	%rd406, %rd405, 24;
	setp.lt.s64 	%p315, %rd403, 0;
	and.b64  	%rd407, %rd405, -16777216;
	setp.ne.s64 	%p316, %rd407, %rd403;
	and.pred  	%p317, %p315, %p316;
	selp.u64 	%rd408, 1, 0, %p317;
	sub.s64 	%rd409, %rd408, %rd406;
	shl.b64 	%rd410, %rd409, 24;
	add.s64 	%rd411, %rd410, %rd403;
	shl.b64 	%rd412, %rd411, 2;
	add.s64 	%rd413, %rd4, %rd412;
	st.global.u32 	[%rd413], %r3543;
$L__BB0_174:                            // %L35580
                                        //   in Loop: Header=BB0_155 Depth=2
	add.s32 	%r3530, %r3530, 1;
	mov.u32 	%r3541, 0;
	mov.u32 	%r3543, %r3541;
$L__BB0_175:                            // %pass15893
                                        //   in Loop: Header=BB0_155 Depth=2
	ld.shared.u32 	%r3213, [%rd80];
	ld.shared.u32 	%r3220, [%rd81];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3230, %r3227}, {%r388, %r391}, {%r3213}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3239, %r3236}, {%r388, %r391}, {%r3220}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3223, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3225, %r3223, %r3227;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3228, %r422, %r3230, %r3225;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3232, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3234, %r3232, %r3236;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3237, %r422, %r3239, %r3234;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3241, %r425, %r3230;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3244, %r422, %r3227, %r3241;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3248, %r425, %r3239;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3251, %r422, %r3236, %r3248;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3274, %r3277}, {%r464, %r467}, {%r3228, %r3244}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3281, %r3285}, {%r464, %r467}, {%r3237, %r3251}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3273, %r3274, %r3274;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3276, %r3277, %r3277, %r3273;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3280, %r3281, %r3281, %r3276;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3284, %r3285, %r3285, %r3280;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3546, %r1607, %r3284, %r3543;
	// end inline asm
	add.s32 	%r3544, %r3541, 1;
	setp.eq.s32 	%p318, %r3544, 25;
	@%p318 bra 	$L__BB0_176;
	bra.uni 	$L__BB0_179;
$L__BB0_176:                            // %L36503
                                        //   in Loop: Header=BB0_155 Depth=2
	@%p216 bra 	$L__BB0_178;
// %bb.177:                             // %L36563
                                        //   in Loop: Header=BB0_155 Depth=2
	shl.b32 	%r3292, %r3530, 19;
	or.b32  	%r3293, %r180, %r3292;
	cvt.u64.u32 	%rd414, %r3293;
	add.s64 	%rd415, %rd414, %rd20;
	shr.u64 	%rd416, %rd415, 40;
	add.s64 	%rd417, %rd415, %rd416;
	shr.s64 	%rd418, %rd417, 24;
	setp.lt.s64 	%p320, %rd415, 0;
	and.b64  	%rd419, %rd417, -16777216;
	setp.ne.s64 	%p321, %rd419, %rd415;
	and.pred  	%p322, %p320, %p321;
	selp.u64 	%rd420, 1, 0, %p322;
	sub.s64 	%rd421, %rd420, %rd418;
	shl.b64 	%rd422, %rd421, 24;
	add.s64 	%rd423, %rd422, %rd415;
	shl.b64 	%rd424, %rd423, 2;
	add.s64 	%rd425, %rd4, %rd424;
	st.global.u32 	[%rd425], %r3546;
$L__BB0_178:                            // %L36717
                                        //   in Loop: Header=BB0_155 Depth=2
	add.s32 	%r3530, %r3530, 1;
	mov.u32 	%r3544, 0;
	mov.u32 	%r3546, %r3544;
$L__BB0_179:                            // %pass16379
                                        //   in Loop: Header=BB0_155 Depth=2
	ld.shared.u32 	%r3299, [%rd82];
	ld.shared.u32 	%r3306, [%rd83];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3316, %r3313}, {%r388, %r391}, {%r3299}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3325, %r3322}, {%r388, %r391}, {%r3306}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3309, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3311, %r3309, %r3313;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3314, %r422, %r3316, %r3311;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3318, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3320, %r3318, %r3322;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3323, %r422, %r3325, %r3320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3327, %r425, %r3316;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3330, %r422, %r3313, %r3327;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3334, %r425, %r3325;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3337, %r422, %r3322, %r3334;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3360, %r3363}, {%r464, %r467}, {%r3314, %r3330}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3367, %r3371}, {%r464, %r467}, {%r3323, %r3337}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3359, %r3360, %r3360;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3362, %r3363, %r3363, %r3359;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3366, %r3367, %r3367, %r3362;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3370, %r3371, %r3371, %r3366;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3549, %r1607, %r3370, %r3546;
	// end inline asm
	add.s32 	%r3547, %r3544, 1;
	setp.eq.s32 	%p323, %r3547, 25;
	@%p323 bra 	$L__BB0_180;
	bra.uni 	$L__BB0_183;
$L__BB0_180:                            // %L37640
                                        //   in Loop: Header=BB0_155 Depth=2
	@%p216 bra 	$L__BB0_182;
// %bb.181:                             // %L37700
                                        //   in Loop: Header=BB0_155 Depth=2
	shl.b32 	%r3378, %r3530, 19;
	or.b32  	%r3379, %r180, %r3378;
	cvt.u64.u32 	%rd426, %r3379;
	add.s64 	%rd427, %rd426, %rd20;
	shr.u64 	%rd428, %rd427, 40;
	add.s64 	%rd429, %rd427, %rd428;
	shr.s64 	%rd430, %rd429, 24;
	setp.lt.s64 	%p325, %rd427, 0;
	and.b64  	%rd431, %rd429, -16777216;
	setp.ne.s64 	%p326, %rd431, %rd427;
	and.pred  	%p327, %p325, %p326;
	selp.u64 	%rd432, 1, 0, %p327;
	sub.s64 	%rd433, %rd432, %rd430;
	shl.b64 	%rd434, %rd433, 24;
	add.s64 	%rd435, %rd434, %rd427;
	shl.b64 	%rd436, %rd435, 2;
	add.s64 	%rd437, %rd4, %rd436;
	st.global.u32 	[%rd437], %r3549;
$L__BB0_182:                            // %L37854
                                        //   in Loop: Header=BB0_155 Depth=2
	add.s32 	%r3530, %r3530, 1;
	mov.u32 	%r3547, 0;
	mov.u32 	%r3549, %r3547;
$L__BB0_183:                            // %pass16865
                                        //   in Loop: Header=BB0_155 Depth=2
	ld.shared.u32 	%r3385, [%rd84];
	ld.shared.u32 	%r3392, [%rd85];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3402, %r3399}, {%r388, %r391}, {%r3385}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3411, %r3408}, {%r388, %r391}, {%r3392}, {%r1246, %r1246};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3395, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3397, %r3395, %r3399;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3400, %r422, %r3402, %r3397;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3404, %r425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3406, %r3404, %r3408;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3409, %r422, %r3411, %r3406;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3413, %r425, %r3402;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3416, %r422, %r3399, %r3413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3420, %r425, %r3411;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3423, %r422, %r3408, %r3420;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3446, %r3449}, {%r464, %r467}, {%r3400, %r3416}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3453, %r3457}, {%r464, %r467}, {%r3409, %r3423}, {%r1246, %r1246}, %r181, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3445, %r3446, %r3446;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3448, %r3449, %r3449, %r3445;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3452, %r3453, %r3453, %r3448;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3456, %r3457, %r3457, %r3452;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3499, %r1607, %r3456, %r3549;
	// end inline asm
	add.s32 	%r3497, %r3547, 1;
	setp.eq.s32 	%p328, %r3497, 25;
	@%p328 bra 	$L__BB0_184;
	bra.uni 	$L__BB0_187;
$L__BB0_184:                            // %L38777
                                        //   in Loop: Header=BB0_155 Depth=2
	@%p216 bra 	$L__BB0_186;
// %bb.185:                             // %L38837
                                        //   in Loop: Header=BB0_155 Depth=2
	shl.b32 	%r3464, %r3530, 19;
	or.b32  	%r3465, %r180, %r3464;
	cvt.u64.u32 	%rd438, %r3465;
	add.s64 	%rd439, %rd438, %rd20;
	shr.u64 	%rd440, %rd439, 40;
	add.s64 	%rd441, %rd439, %rd440;
	shr.s64 	%rd442, %rd441, 24;
	setp.lt.s64 	%p330, %rd439, 0;
	and.b64  	%rd443, %rd441, -16777216;
	setp.ne.s64 	%p331, %rd443, %rd439;
	and.pred  	%p332, %p330, %p331;
	selp.u64 	%rd444, 1, 0, %p332;
	sub.s64 	%rd445, %rd444, %rd442;
	shl.b64 	%rd446, %rd445, 24;
	add.s64 	%rd447, %rd446, %rd439;
	shl.b64 	%rd448, %rd447, 2;
	add.s64 	%rd449, %rd4, %rd448;
	st.global.u32 	[%rd449], %r3499;
	bra.uni 	$L__BB0_186;
$L__BB0_189:                            // %L39023
	mov.u32 	%r3467, 0;
	st.global.u32 	[%rd5], %r3467;
	ret;
$L__BB0_219:                            // %post_box_union
	mov.u64 	%rd243, exception3292;
	cvta.global.u64 	%rd244, %rd243;
	{ // callseq 10, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd244;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 10
	{ // callseq 11, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd86;
	st.param.b32 	[param0+8], %r271;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 11
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L247
	mov.u32 	%r3468, 2;
	st.global.u32 	[%rd5], %r3468;
	mov.u64 	%rd450, exception3244;
	cvta.global.u64 	%rd451, %rd450;
	{ // callseq 12, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd451;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 12
	{ // callseq 13, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd86;
	st.param.b32 	[param0+8], %r271;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 13
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd107, exception1;
	cvta.global.u64 	%rd108, %rd107;
	{ // callseq 8, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd108;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 8
	{ // callseq 9, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd86;
	st.param.b32 	[param0+8], %r271;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 9
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
