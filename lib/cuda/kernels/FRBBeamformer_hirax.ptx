// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE // -- Begin function _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception3242[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.visible .entry _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE(
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5[32]
)
.reqntid 512, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<447>;
	.reg .b16 	%rs<531>;
	.reg .f32 	%f<752>;
	.reg .b32 	%r<3843>;
	.reg .b64 	%rd<329>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r455, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd90, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r456, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p1, %r456, 34943;
	@%p1 bra 	LBB0_530;
	bra.uni 	LBB0_1;
LBB0_530:                               // %L11
	ld.param.u64 	%rd91, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5];
	mov.u32 	%r1, %ctaid.x;
	shl.b32 	%r2, %r1, 9;
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r4, %tid.y;
	shl.b32 	%r5, %r4, 5;
	or.b32  	%r457, %r3, %r2;
	or.b32  	%r458, %r457, %r5;
	mul.wide.u32 	%rd97, %r458, 4;
	add.s64 	%rd5, %rd91, %rd97;
	mov.u32 	%r459, 1;
	st.global.u32 	[%rd5], %r459;
	and.b32  	%r6, %r3, 3;
	shr.u32 	%r7, %r3, 2;
	mul.lo.s32 	%r460, %r6, %r7;
	and.b32  	%r461, %r460, 7;
	cvt.rn.f32.s32 	%f185, %r461;
	mov.f32 	%f186, 0f40800000;
	div.approx.f32 	%f1, %f185, %f186;
	abs.f32 	%f750, %f1;
	setp.lt.f32 	%p2, %f750, 0f40000000;
	mov.f32 	%f703, 0f40000000;
	setp.gtu.f32 	%p442, %f750, 0f4B800000;
	mov.f32 	%f746, %f750;
	@%p2 bra 	LBB0_542;
// %bb.531:
	@%p442 bra 	LBB0_538;
	bra.uni 	LBB0_532;
LBB0_538:
	mov.b32 	%r332, %f750;
	and.b32  	%r462, %r332, 8388607;
	or.b32  	%r3839, %r462, 1065353216;
	mov.b32 	%f745, %r3839;
	add.s32 	%r463, %r332, -1073741824;
	and.b32  	%r3840, %r463, -8388608;
	setp.eq.s32 	%p9, %r3840, 0;
	@%p9 bra 	LBB0_541;
// %bb.539:                             // %.lr.ph5257.preheader
	mov.f32 	%f196, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f195,%f196;
	// end inline asm
LBB0_540:                               // %.lr.ph5257
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r464, %r3840, 192937984;
	add.s32 	%r465, %r464, %r3839;
	mov.b32 	%f197, %r465;
	mul.f32 	%f198, %f195, %f197;
	sub.f32 	%f199, %f197, %f198;
	fma.rn.f32 	%f200, %f199, %f195, %f198;
	sub.f32 	%f201, %f197, %f200;
	fma.rz.f32 	%f202, %f201, %f195, %f200;
	cvt.rzi.f32.f32 	%f203, %f202;
	sub.f32 	%f745, %f197, %f203;
	sub.s32 	%r3840, %r3840, %r464;
	mov.b32 	%r3839, %f745;
	setp.ne.s32 	%p10, %r3840, 0;
	setp.ne.s32 	%p11, %r3839, 0;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	LBB0_540;
LBB0_541:                               // %__internal_fmodf_slowpath_mod.exit.i.i3637
	setp.gt.u32 	%p13, %r332, 2139095039;
	selp.f32 	%f204, 0f7FFFFFFF, 0f4B800000, %p13;
	mul.f32 	%f205, %f745, 0f34000000;
	mul.f32 	%f746, %f204, %f205;
	bra.uni 	LBB0_542;
LBB0_532:                               // %__nv_fast_fdividef.exit.i.i.i3603
	div.approx.f32 	%f188, %f750, %f703;
	cvt.rzi.f32.f32 	%f153, %f188;
	fma.rn.f32 	%f154, %f153, 0fC0000000, %f750;
	mov.b32 	%r331, %f154;
	setp.lt.u32 	%p4, %r331, 1073741824;
	mov.f32 	%f744, %f153;
	@%p4 bra 	LBB0_537;
// %bb.533:
	setp.lt.u32 	%p5, %r331, -2147483647;
	@%p5 bra 	LBB0_535;
// %bb.534:
	add.f32 	%f193, %f153, 0fBF800000;
	setp.lt.f32 	%p8, %f154, 0fC0000000;
	selp.f32 	%f194, %f193, %f153, %p8;
	add.f32 	%f744, %f194, 0fBF800000;
	bra.uni 	LBB0_537;
LBB0_535:
	add.f32 	%f744, %f153, 0f3F800000;
	setp.ltu.f32 	%p6, %f154, 0f40800000;
	@%p6 bra 	LBB0_537;
// %bb.536:                             // %__nv_fmaf_rn.exit.i.i.i3608
	fma.rn.f32 	%f190, %f703, 0fC0400000, %f154;
	setp.ge.f32 	%p7, %f190, 0f00000000;
	selp.f32 	%f191, %f744, %f153, %p7;
	add.f32 	%f192, %f191, 0f3F800000;
	add.f32 	%f744, %f192, 0f3F800000;
LBB0_537:                               // %__internal_fmodf_fastpath_quot.exit.i.i3611
	fma.rn.f32 	%f746, %f744, 0fC0000000, %f750;
LBB0_542:                               // %__internal_fmodf_kernel.exit.i3640
	abs.f32 	%f206, %f746;
	setp.gtu.f32 	%p14, %f206, 0f7F800000;
	mov.b32 	%r466, %f1;
	and.b32  	%r339, %r466, -2147483648;
	@%p14 bra 	LBB0_544;
// %bb.543:
	mov.b32 	%r467, %f746;
	or.b32  	%r468, %r339, %r467;
	mov.b32 	%f746, %r468;
LBB0_544:                               // %__nv_fmodf.exit3643
	add.f32 	%f207, %f746, %f746;
	mov.b32 	%r475, %f207;
	and.b32  	%r476, %r475, -2147483648;
	shl.b32 	%r342, %r3, 1;
	and.b32  	%r343, %r342, 2;
	mul.lo.s32 	%r344, %r343, %r7;
	cvt.rn.f32.s32 	%f239, %r344;
	mov.f32 	%f240, 0f41800000;
	div.approx.f32 	%f168, %f239, %f240;
	abs.f32 	%f726, %f168;
	setp.lt.f32 	%p22, %f726, 0f40000000;
	setp.gtu.f32 	%p443, %f726, 0f4B800000;
	mov.f32 	%f706, %f726;
	@%p22 bra 	LBB0_13;
// %bb.2:
	@%p443 bra 	LBB0_9;
	bra.uni 	LBB0_3;
LBB0_9:
	mov.b32 	%r9, %f726;
	and.b32  	%r483, %r9, 8388607;
	or.b32  	%r3714, %r483, 1065353216;
	mov.b32 	%f705, %r3714;
	add.s32 	%r484, %r9, -1073741824;
	and.b32  	%r3715, %r484, -8388608;
	setp.eq.s32 	%p29, %r3715, 0;
	@%p29 bra 	LBB0_12;
// %bb.10:                              // %.lr.ph5252.preheader
	mov.f32 	%f250, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f249,%f250;
	// end inline asm
LBB0_11:                                // %.lr.ph5252
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r485, %r3715, 192937984;
	add.s32 	%r486, %r485, %r3714;
	mov.b32 	%f251, %r486;
	mul.f32 	%f252, %f249, %f251;
	sub.f32 	%f253, %f251, %f252;
	fma.rn.f32 	%f254, %f253, %f249, %f252;
	sub.f32 	%f255, %f251, %f254;
	fma.rz.f32 	%f256, %f255, %f249, %f254;
	cvt.rzi.f32.f32 	%f257, %f256;
	sub.f32 	%f705, %f251, %f257;
	sub.s32 	%r3715, %r3715, %r485;
	mov.b32 	%r3714, %f705;
	setp.ne.s32 	%p30, %r3715, 0;
	setp.ne.s32 	%p31, %r3714, 0;
	and.pred  	%p32, %p30, %p31;
	@%p32 bra 	LBB0_11;
LBB0_12:                                // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p33, %r9, 2139095039;
	selp.f32 	%f258, 0f7FFFFFFF, 0f4B800000, %p33;
	mul.f32 	%f259, %f705, 0f34000000;
	mul.f32 	%f706, %f258, %f259;
	bra.uni 	LBB0_13;
LBB0_3:                                 // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f242, %f726, %f703;
	cvt.rzi.f32.f32 	%f3, %f242;
	fma.rn.f32 	%f4, %f3, 0fC0000000, %f726;
	mov.b32 	%r8, %f4;
	setp.lt.u32 	%p24, %r8, 1073741824;
	mov.f32 	%f704, %f3;
	@%p24 bra 	LBB0_8;
// %bb.4:
	setp.lt.u32 	%p25, %r8, -2147483647;
	@%p25 bra 	LBB0_6;
// %bb.5:
	add.f32 	%f247, %f3, 0fBF800000;
	setp.lt.f32 	%p28, %f4, 0fC0000000;
	selp.f32 	%f248, %f247, %f3, %p28;
	add.f32 	%f704, %f248, 0fBF800000;
	bra.uni 	LBB0_8;
LBB0_6:
	add.f32 	%f704, %f3, 0f3F800000;
	setp.ltu.f32 	%p26, %f4, 0f40800000;
	@%p26 bra 	LBB0_8;
// %bb.7:                               // %__nv_fmaf_rn.exit.i.i.i
	fma.rn.f32 	%f244, %f703, 0fC0400000, %f4;
	setp.ge.f32 	%p27, %f244, 0f00000000;
	selp.f32 	%f245, %f704, %f3, %p27;
	add.f32 	%f246, %f245, 0f3F800000;
	add.f32 	%f704, %f246, 0f3F800000;
LBB0_8:                                 // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f706, %f704, 0fC0000000, %f726;
LBB0_13:                                // %__internal_fmodf_kernel.exit.i
	or.b32  	%r477, %r476, 1056964608;
	abs.f32 	%f260, %f706;
	setp.gtu.f32 	%p34, %f260, 0f7F800000;
	mov.b32 	%r487, %f168;
	and.b32  	%r16, %r487, -2147483648;
	@%p34 bra 	LBB0_15;
// %bb.14:
	mov.b32 	%r488, %f706;
	or.b32  	%r489, %r16, %r488;
	mov.b32 	%f706, %r489;
LBB0_15:                                // %__nv_fmodf.exit
	mov.b32 	%f208, %r477;
	add.f32 	%f261, %f706, %f706;
	mov.b32 	%r490, %f261;
	and.b32  	%r491, %r490, -2147483648;
	or.b32  	%r492, %r491, 1056964608;
	add.s32 	%r498, %r344, %r7;
	cvt.rn.f32.s32 	%f291, %r498;
	div.approx.f32 	%f20, %f291, %f240;
	abs.f32 	%f730, %f20;
	setp.lt.f32 	%p42, %f730, 0f40000000;
	setp.gtu.f32 	%p444, %f730, 0f4B800000;
	mov.f32 	%f710, %f730;
	@%p42 bra 	LBB0_27;
// %bb.16:
	@%p444 bra 	LBB0_23;
	bra.uni 	LBB0_17;
LBB0_23:
	mov.b32 	%r18, %f730;
	and.b32  	%r499, %r18, 8388607;
	or.b32  	%r3716, %r499, 1065353216;
	mov.b32 	%f709, %r3716;
	add.s32 	%r500, %r18, -1073741824;
	and.b32  	%r3717, %r500, -8388608;
	setp.eq.s32 	%p49, %r3717, 0;
	@%p49 bra 	LBB0_26;
// %bb.24:                              // %.lr.ph5247.preheader
	mov.f32 	%f302, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f301,%f302;
	// end inline asm
LBB0_25:                                // %.lr.ph5247
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r501, %r3717, 192937984;
	add.s32 	%r502, %r501, %r3716;
	mov.b32 	%f303, %r502;
	mul.f32 	%f304, %f301, %f303;
	sub.f32 	%f305, %f303, %f304;
	fma.rn.f32 	%f306, %f305, %f301, %f304;
	sub.f32 	%f307, %f303, %f306;
	fma.rz.f32 	%f308, %f307, %f301, %f306;
	cvt.rzi.f32.f32 	%f309, %f308;
	sub.f32 	%f709, %f303, %f309;
	sub.s32 	%r3717, %r3717, %r501;
	mov.b32 	%r3716, %f709;
	setp.ne.s32 	%p50, %r3717, 0;
	setp.ne.s32 	%p51, %r3716, 0;
	and.pred  	%p52, %p50, %p51;
	@%p52 bra 	LBB0_25;
LBB0_26:                                // %__internal_fmodf_slowpath_mod.exit.i.i3266
	setp.gt.u32 	%p53, %r18, 2139095039;
	selp.f32 	%f310, 0f7FFFFFFF, 0f4B800000, %p53;
	mul.f32 	%f311, %f709, 0f34000000;
	mul.f32 	%f710, %f310, %f311;
	bra.uni 	LBB0_27;
LBB0_17:                                // %__nv_fast_fdividef.exit.i.i.i3232
	div.approx.f32 	%f294, %f730, %f703;
	cvt.rzi.f32.f32 	%f22, %f294;
	fma.rn.f32 	%f23, %f22, 0fC0000000, %f730;
	mov.b32 	%r17, %f23;
	setp.lt.u32 	%p44, %r17, 1073741824;
	mov.f32 	%f708, %f22;
	@%p44 bra 	LBB0_22;
// %bb.18:
	setp.lt.u32 	%p45, %r17, -2147483647;
	@%p45 bra 	LBB0_20;
// %bb.19:
	add.f32 	%f299, %f22, 0fBF800000;
	setp.lt.f32 	%p48, %f23, 0fC0000000;
	selp.f32 	%f300, %f299, %f22, %p48;
	add.f32 	%f708, %f300, 0fBF800000;
	bra.uni 	LBB0_22;
LBB0_20:
	add.f32 	%f708, %f22, 0f3F800000;
	setp.ltu.f32 	%p46, %f23, 0f40800000;
	@%p46 bra 	LBB0_22;
// %bb.21:                              // %__nv_fmaf_rn.exit.i.i.i3237
	fma.rn.f32 	%f296, %f703, 0fC0400000, %f23;
	setp.ge.f32 	%p47, %f296, 0f00000000;
	selp.f32 	%f297, %f708, %f22, %p47;
	add.f32 	%f298, %f297, 0f3F800000;
	add.f32 	%f708, %f298, 0f3F800000;
LBB0_22:                                // %__internal_fmodf_fastpath_quot.exit.i.i3240
	fma.rn.f32 	%f710, %f708, 0fC0000000, %f730;
LBB0_27:                                // %__internal_fmodf_kernel.exit.i3269
	add.f32 	%f209, %f207, %f208;
	abs.f32 	%f211, %f207;
	mov.b32 	%f262, %r492;
	abs.f32 	%f312, %f710;
	setp.gtu.f32 	%p54, %f312, 0f7F800000;
	mov.b32 	%r503, %f20;
	and.b32  	%r25, %r503, -2147483648;
	@%p54 bra 	LBB0_29;
// %bb.28:
	mov.b32 	%r504, %f710;
	or.b32  	%r505, %r25, %r504;
	mov.b32 	%f710, %r505;
LBB0_29:                                // %__nv_fmodf.exit3272
	cvt.rzi.f32.f32 	%f210, %f209;
	setp.gt.f32 	%p15, %f211, 0f4B000000;
	add.f32 	%f263, %f261, %f262;
	abs.f32 	%f265, %f261;
	add.f32 	%f313, %f710, %f710;
	mov.b32 	%r512, %f313;
	and.b32  	%r513, %r512, -2147483648;
	or.b32  	%r514, %r513, 1056964608;
	mov.b32 	%f314, %r514;
	add.f32 	%f315, %f313, %f314;
	abs.f32 	%f317, %f313;
	and.b32  	%r28, %r7, 3;
	mul.lo.s32 	%r29, %r343, %r28;
	and.b32  	%r520, %r29, 2;
	cvt.rn.f32.s32 	%f345, %r520;
	div.approx.f32 	%f37, %f345, %f703;
	abs.f32 	%f734, %f37;
	setp.lt.f32 	%p62, %f734, 0f40000000;
	setp.gtu.f32 	%p445, %f734, 0f4B800000;
	mov.f32 	%f714, %f734;
	@%p62 bra 	LBB0_41;
// %bb.30:
	@%p445 bra 	LBB0_37;
	bra.uni 	LBB0_31;
LBB0_37:
	mov.b32 	%r31, %f734;
	and.b32  	%r521, %r31, 8388607;
	or.b32  	%r3718, %r521, 1065353216;
	mov.b32 	%f713, %r3718;
	add.s32 	%r522, %r31, -1073741824;
	and.b32  	%r3719, %r522, -8388608;
	setp.eq.s32 	%p69, %r3719, 0;
	@%p69 bra 	LBB0_40;
// %bb.38:                              // %.lr.ph5242.preheader
	mov.f32 	%f356, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f355,%f356;
	// end inline asm
LBB0_39:                                // %.lr.ph5242
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r523, %r3719, 192937984;
	add.s32 	%r524, %r523, %r3718;
	mov.b32 	%f357, %r524;
	mul.f32 	%f358, %f355, %f357;
	sub.f32 	%f359, %f357, %f358;
	fma.rn.f32 	%f360, %f359, %f355, %f358;
	sub.f32 	%f361, %f357, %f360;
	fma.rz.f32 	%f362, %f361, %f355, %f360;
	cvt.rzi.f32.f32 	%f363, %f362;
	sub.f32 	%f713, %f357, %f363;
	sub.s32 	%r3719, %r3719, %r523;
	mov.b32 	%r3718, %f713;
	setp.ne.s32 	%p70, %r3719, 0;
	setp.ne.s32 	%p71, %r3718, 0;
	and.pred  	%p72, %p70, %p71;
	@%p72 bra 	LBB0_39;
LBB0_40:                                // %__internal_fmodf_slowpath_mod.exit.i.i3319
	setp.gt.u32 	%p73, %r31, 2139095039;
	selp.f32 	%f364, 0f7FFFFFFF, 0f4B800000, %p73;
	mul.f32 	%f365, %f713, 0f34000000;
	mul.f32 	%f714, %f364, %f365;
	bra.uni 	LBB0_41;
LBB0_31:                                // %__nv_fast_fdividef.exit.i.i.i3285
	div.approx.f32 	%f348, %f734, %f703;
	cvt.rzi.f32.f32 	%f39, %f348;
	fma.rn.f32 	%f40, %f39, 0fC0000000, %f734;
	mov.b32 	%r30, %f40;
	setp.lt.u32 	%p64, %r30, 1073741824;
	mov.f32 	%f712, %f39;
	@%p64 bra 	LBB0_36;
// %bb.32:
	setp.lt.u32 	%p65, %r30, -2147483647;
	@%p65 bra 	LBB0_34;
// %bb.33:
	add.f32 	%f353, %f39, 0fBF800000;
	setp.lt.f32 	%p68, %f40, 0fC0000000;
	selp.f32 	%f354, %f353, %f39, %p68;
	add.f32 	%f712, %f354, 0fBF800000;
	bra.uni 	LBB0_36;
LBB0_34:
	add.f32 	%f712, %f39, 0f3F800000;
	setp.ltu.f32 	%p66, %f40, 0f40800000;
	@%p66 bra 	LBB0_36;
// %bb.35:                              // %__nv_fmaf_rn.exit.i.i.i3290
	fma.rn.f32 	%f350, %f703, 0fC0400000, %f40;
	setp.ge.f32 	%p67, %f350, 0f00000000;
	selp.f32 	%f351, %f712, %f39, %p67;
	add.f32 	%f352, %f351, 0f3F800000;
	add.f32 	%f712, %f352, 0f3F800000;
LBB0_36:                                // %__internal_fmodf_fastpath_quot.exit.i.i3293
	fma.rn.f32 	%f714, %f712, 0fC0000000, %f734;
LBB0_41:                                // %__internal_fmodf_kernel.exit.i3322
	selp.f32 	%f212, %f207, %f210, %p15;
	cvt.rzi.f32.f32 	%f213, %f207;
	setp.lt.f32 	%p16, %f211, 0f3F000000;
	cvt.rzi.f32.f32 	%f264, %f263;
	setp.gt.f32 	%p35, %f265, 0f4B000000;
	cvt.rzi.f32.f32 	%f316, %f315;
	setp.gt.f32 	%p55, %f317, 0f4B000000;
	mov.f32 	%f230, 0f00000000;
	abs.f32 	%f366, %f714;
	setp.gtu.f32 	%p74, %f366, 0f7F800000;
	mov.b32 	%r525, %f37;
	and.b32  	%r38, %r525, -2147483648;
	@%p74 bra 	LBB0_43;
// %bb.42:
	mov.b32 	%r526, %f714;
	or.b32  	%r527, %r38, %r526;
	mov.b32 	%f714, %r527;
LBB0_43:                                // %__nv_fmodf.exit3325
	selp.f32 	%f214, %f213, %f212, %p16;
	selp.f32 	%f266, %f261, %f264, %p35;
	cvt.rzi.f32.f32 	%f267, %f261;
	setp.lt.f32 	%p36, %f265, 0f3F000000;
	selp.f32 	%f318, %f313, %f316, %p55;
	cvt.rzi.f32.f32 	%f319, %f313;
	setp.lt.f32 	%p56, %f317, 0f3F000000;
	add.f32 	%f367, %f714, %f714;
	mov.b32 	%r528, %f367;
	and.b32  	%r529, %r528, -2147483648;
	or.b32  	%r530, %r529, 1056964608;
	mov.b32 	%f368, %r530;
	add.f32 	%f369, %f367, %f368;
	cvt.rzi.f32.f32 	%f370, %f369;
	abs.f32 	%f371, %f367;
	setp.gt.f32 	%p75, %f371, 0f4B000000;
	selp.f32 	%f372, %f367, %f370, %p75;
	cvt.rzi.f32.f32 	%f373, %f367;
	setp.lt.f32 	%p76, %f371, 0f3F000000;
	selp.f32 	%f374, %f373, %f372, %p76;
	cvt.rzi.s32.f32 	%r531, %f374;
	fma.rn.f32 	%f375, %f374, 0fBF000000, %f714;
	mul.f32 	%f376, %f375, %f375;
	fma.rn.f32 	%f377, %f376, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f378, %f376, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f379, %f377, %f376, 0fC0A55DF6;
	fma.rn.f32 	%f380, %f378, %f376, 0f4081E0CF;
	fma.rn.f32 	%f381, %f376, %f375, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f376, 0fC09DE9E6;
	fma.rn.f32 	%f383, %f379, %f381, 0f00000000;
	fma.rn.f32 	%f384, %f382, %f376, 0f3F800000;
	fma.rn.f32 	%f385, %f375, 0f40490FDB, %f383;
	and.b32  	%r532, %r531, 1;
	setp.eq.b32 	%p77, %r532, 1;
	selp.f32 	%f386, %f384, %f385, %p77;
	selp.f32 	%f387, %f385, %f384, %p77;
	and.b32  	%r533, %r531, 2;
	setp.eq.s32 	%p78, %r533, 0;
	neg.f32 	%f388, %f386;
	selp.f32 	%f389, %f386, %f388, %p78;
	add.s32 	%r534, %r531, 1;
	and.b32  	%r535, %r534, 2;
	setp.eq.s32 	%p79, %r535, 0;
	sub.f32 	%f391, %f230, %f387;
	cvt.rzi.f32.f32 	%f393, %f714;
	setp.eq.f32 	%p80, %f393, %f714;
	mul.f32 	%f394, %f714, 0f00000000;
	selp.f32 	%f721, %f394, %f389, %p80;
	abs.f32 	%f395, %f714;
	add.s32 	%r536, %r29, %r28;
	and.b32  	%r537, %r536, 3;
	cvt.rn.f32.s32 	%f397, %r537;
	div.approx.f32 	%f56, %f397, %f703;
	abs.f32 	%f738, %f56;
	setp.lt.f32 	%p82, %f738, 0f40000000;
	setp.gtu.f32 	%p446, %f738, 0f4B800000;
	mov.f32 	%f718, %f738;
	@%p82 bra 	LBB0_55;
// %bb.44:
	@%p446 bra 	LBB0_51;
	bra.uni 	LBB0_45;
LBB0_51:
	mov.b32 	%r40, %f738;
	and.b32  	%r538, %r40, 8388607;
	or.b32  	%r3720, %r538, 1065353216;
	mov.b32 	%f717, %r3720;
	add.s32 	%r539, %r40, -1073741824;
	and.b32  	%r3721, %r539, -8388608;
	setp.eq.s32 	%p89, %r3721, 0;
	@%p89 bra 	LBB0_54;
// %bb.52:                              // %.lr.ph5237.preheader
	mov.f32 	%f408, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f407,%f408;
	// end inline asm
LBB0_53:                                // %.lr.ph5237
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r540, %r3721, 192937984;
	add.s32 	%r541, %r540, %r3720;
	mov.b32 	%f409, %r541;
	mul.f32 	%f410, %f407, %f409;
	sub.f32 	%f411, %f409, %f410;
	fma.rn.f32 	%f412, %f411, %f407, %f410;
	sub.f32 	%f413, %f409, %f412;
	fma.rz.f32 	%f414, %f413, %f407, %f412;
	cvt.rzi.f32.f32 	%f415, %f414;
	sub.f32 	%f717, %f409, %f415;
	sub.s32 	%r3721, %r3721, %r540;
	mov.b32 	%r3720, %f717;
	setp.ne.s32 	%p90, %r3721, 0;
	setp.ne.s32 	%p91, %r3720, 0;
	and.pred  	%p92, %p90, %p91;
	@%p92 bra 	LBB0_53;
LBB0_54:                                // %__internal_fmodf_slowpath_mod.exit.i.i3372
	setp.gt.u32 	%p93, %r40, 2139095039;
	selp.f32 	%f416, 0f7FFFFFFF, 0f4B800000, %p93;
	mul.f32 	%f417, %f717, 0f34000000;
	mul.f32 	%f718, %f416, %f417;
	bra.uni 	LBB0_55;
LBB0_45:                                // %__nv_fast_fdividef.exit.i.i.i3338
	div.approx.f32 	%f400, %f738, %f703;
	cvt.rzi.f32.f32 	%f58, %f400;
	fma.rn.f32 	%f59, %f58, 0fC0000000, %f738;
	mov.b32 	%r39, %f59;
	setp.lt.u32 	%p84, %r39, 1073741824;
	mov.f32 	%f716, %f58;
	@%p84 bra 	LBB0_50;
// %bb.46:
	setp.lt.u32 	%p85, %r39, -2147483647;
	@%p85 bra 	LBB0_48;
// %bb.47:
	add.f32 	%f405, %f58, 0fBF800000;
	setp.lt.f32 	%p88, %f59, 0fC0000000;
	selp.f32 	%f406, %f405, %f58, %p88;
	add.f32 	%f716, %f406, 0fBF800000;
	bra.uni 	LBB0_50;
LBB0_48:
	add.f32 	%f716, %f58, 0f3F800000;
	setp.ltu.f32 	%p86, %f59, 0f40800000;
	@%p86 bra 	LBB0_50;
// %bb.49:                              // %__nv_fmaf_rn.exit.i.i.i3343
	fma.rn.f32 	%f402, %f703, 0fC0400000, %f59;
	setp.ge.f32 	%p87, %f402, 0f00000000;
	selp.f32 	%f403, %f716, %f58, %p87;
	add.f32 	%f404, %f403, 0f3F800000;
	add.f32 	%f716, %f404, 0f3F800000;
LBB0_50:                                // %__internal_fmodf_fastpath_quot.exit.i.i3346
	fma.rn.f32 	%f718, %f716, 0fC0000000, %f738;
LBB0_55:                                // %__internal_fmodf_kernel.exit.i3375
	fma.rn.f32 	%f215, %f214, 0fBF000000, %f746;
	selp.f32 	%f268, %f267, %f266, %p36;
	selp.f32 	%f320, %f319, %f318, %p56;
	selp.f32 	%f392, %f387, %f391, %p79;
	setp.gt.f32 	%p81, %f395, 0f4B800000;
	add.f32 	%f396, %f721, 0f3F800000;
	abs.f32 	%f418, %f718;
	setp.gtu.f32 	%p94, %f418, 0f7F800000;
	mov.b32 	%r542, %f56;
	and.b32  	%r47, %r542, -2147483648;
	@%p94 bra 	LBB0_57;
// %bb.56:
	mov.b32 	%r543, %f718;
	or.b32  	%r544, %r47, %r543;
	mov.b32 	%f718, %r544;
LBB0_57:                                // %__nv_fmodf.exit3378
	mul.f32 	%f216, %f215, %f215;
	fma.rn.f32 	%f269, %f268, 0fBF000000, %f706;
	fma.rn.f32 	%f321, %f320, 0fBF000000, %f710;
	selp.f32 	%f55, %f396, %f392, %p81;
	add.f32 	%f419, %f718, %f718;
	mov.b32 	%r545, %f419;
	and.b32  	%r546, %r545, -2147483648;
	or.b32  	%r547, %r546, 1056964608;
	mov.b32 	%f420, %r547;
	add.f32 	%f421, %f419, %f420;
	cvt.rzi.f32.f32 	%f422, %f421;
	abs.f32 	%f423, %f419;
	setp.gt.f32 	%p95, %f423, 0f4B000000;
	selp.f32 	%f424, %f419, %f422, %p95;
	cvt.rzi.f32.f32 	%f425, %f419;
	setp.lt.f32 	%p96, %f423, 0f3F000000;
	selp.f32 	%f426, %f425, %f424, %p96;
	cvt.rzi.s32.f32 	%r548, %f426;
	fma.rn.f32 	%f427, %f426, 0fBF000000, %f718;
	mul.f32 	%f428, %f427, %f427;
	fma.rn.f32 	%f429, %f428, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f430, %f428, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f431, %f429, %f428, 0fC0A55DF6;
	fma.rn.f32 	%f432, %f430, %f428, 0f4081E0CF;
	fma.rn.f32 	%f433, %f428, %f427, 0f00000000;
	fma.rn.f32 	%f434, %f432, %f428, 0fC09DE9E6;
	fma.rn.f32 	%f435, %f431, %f433, 0f00000000;
	fma.rn.f32 	%f436, %f434, %f428, 0f3F800000;
	fma.rn.f32 	%f437, %f427, 0f40490FDB, %f435;
	and.b32  	%r549, %r548, 1;
	setp.eq.b32 	%p97, %r549, 1;
	selp.f32 	%f438, %f436, %f437, %p97;
	selp.f32 	%f439, %f437, %f436, %p97;
	and.b32  	%r550, %r548, 2;
	setp.eq.s32 	%p98, %r550, 0;
	neg.f32 	%f440, %f438;
	selp.f32 	%f441, %f438, %f440, %p98;
	add.s32 	%r551, %r548, 1;
	and.b32  	%r552, %r551, 2;
	setp.eq.s32 	%p99, %r552, 0;
	sub.f32 	%f443, %f230, %f439;
	selp.f32 	%f444, %f439, %f443, %p99;
	cvt.rzi.f32.f32 	%f445, %f718;
	setp.eq.f32 	%p100, %f445, %f718;
	mul.f32 	%f446, %f718, 0f00000000;
	selp.f32 	%f723, %f446, %f441, %p100;
	abs.f32 	%f447, %f718;
	setp.gt.f32 	%p101, %f447, 0f4B800000;
	add.f32 	%f448, %f723, 0f3F800000;
	selp.f32 	%f74, %f448, %f444, %p101;
	and.b32  	%r48, %r3, 2;
	setp.eq.s32 	%p102, %r48, 0;
	mov.f32 	%f720, %f55;
	mov.f32 	%f722, %f74;
	@%p102 bra 	LBB0_59;
// %bb.58:                              // %L337
	neg.f32 	%f722, %f723;
	neg.f32 	%f720, %f721;
	mov.f32 	%f721, %f55;
	mov.f32 	%f723, %f74;
LBB0_59:                                // %L339
	fma.rn.f32 	%f217, %f216, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f218, %f216, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f270, %f269, %f269;
	mul.f32 	%f322, %f321, %f321;
	@%p2 bra 	LBB0_552;
// %bb.60:
	@%p442 bra 	LBB0_548;
	bra.uni 	LBB0_61;
LBB0_548:
	mov.b32 	%r346, %f750;
	and.b32  	%r559, %r346, 8388607;
	or.b32  	%r3841, %r559, 1065353216;
	mov.b32 	%f749, %r3841;
	add.s32 	%r560, %r346, -1073741824;
	and.b32  	%r3842, %r560, -8388608;
	setp.eq.s32 	%p110, %r3842, 0;
	@%p110 bra 	LBB0_551;
// %bb.549:                             // %.lr.ph5232.preheader
	mov.f32 	%f458, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f457,%f458;
	// end inline asm
LBB0_550:                               // %.lr.ph5232
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r561, %r3842, 192937984;
	add.s32 	%r562, %r561, %r3841;
	mov.b32 	%f459, %r562;
	mul.f32 	%f460, %f457, %f459;
	sub.f32 	%f461, %f459, %f460;
	fma.rn.f32 	%f462, %f461, %f457, %f460;
	sub.f32 	%f463, %f459, %f462;
	fma.rz.f32 	%f464, %f463, %f457, %f462;
	cvt.rzi.f32.f32 	%f465, %f464;
	sub.f32 	%f749, %f459, %f465;
	sub.s32 	%r3842, %r3842, %r561;
	mov.b32 	%r3841, %f749;
	setp.ne.s32 	%p111, %r3842, 0;
	setp.ne.s32 	%p112, %r3841, 0;
	and.pred  	%p113, %p111, %p112;
	@%p113 bra 	LBB0_550;
LBB0_551:                               // %__internal_fmodf_slowpath_mod.exit.i.i3690
	setp.gt.u32 	%p114, %r346, 2139095039;
	selp.f32 	%f466, 0f7FFFFFFF, 0f4B800000, %p114;
	mul.f32 	%f467, %f749, 0f34000000;
	mul.f32 	%f750, %f466, %f467;
	bra.uni 	LBB0_552;
LBB0_61:                                // %__nv_fast_fdividef.exit.i.i.i3656
	div.approx.f32 	%f450, %f750, %f703;
	cvt.rzi.f32.f32 	%f170, %f450;
	fma.rn.f32 	%f171, %f170, 0fC0000000, %f750;
	mov.b32 	%r345, %f171;
	setp.lt.u32 	%p105, %r345, 1073741824;
	mov.f32 	%f748, %f170;
	@%p105 bra 	LBB0_547;
// %bb.62:
	setp.lt.u32 	%p106, %r345, -2147483647;
	@%p106 bra 	LBB0_545;
// %bb.63:
	add.f32 	%f455, %f170, 0fBF800000;
	setp.lt.f32 	%p109, %f171, 0fC0000000;
	selp.f32 	%f456, %f455, %f170, %p109;
	add.f32 	%f748, %f456, 0fBF800000;
	bra.uni 	LBB0_547;
LBB0_545:
	add.f32 	%f748, %f170, 0f3F800000;
	setp.ltu.f32 	%p107, %f171, 0f40800000;
	@%p107 bra 	LBB0_547;
// %bb.546:                             // %__nv_fmaf_rn.exit.i.i.i3661
	fma.rn.f32 	%f452, %f703, 0fC0400000, %f171;
	setp.ge.f32 	%p108, %f452, 0f00000000;
	selp.f32 	%f453, %f748, %f170, %p108;
	add.f32 	%f454, %f453, 0f3F800000;
	add.f32 	%f748, %f454, 0f3F800000;
LBB0_547:                               // %__internal_fmodf_fastpath_quot.exit.i.i3664
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
LBB0_552:                               // %__internal_fmodf_kernel.exit.i3693
	cvt.rzi.s32.f32 	%r478, %f214;
	fma.rn.f32 	%f219, %f217, %f216, 0fC0A55DF6;
	fma.rn.f32 	%f220, %f218, %f216, 0f4081E0CF;
	fma.rn.f32 	%f221, %f216, %f215, 0f00000000;
	fma.rn.f32 	%f271, %f270, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f272, %f270, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f323, %f322, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f324, %f322, 0f3E684E12, 0fBFAAD2E0;
	abs.f32 	%f468, %f750;
	setp.gtu.f32 	%p115, %f468, 0f7F800000;
	@%p115 bra 	LBB0_554;
// %bb.553:
	mov.b32 	%r563, %f750;
	or.b32  	%r564, %r339, %r563;
	mov.b32 	%f750, %r564;
LBB0_554:                               // %__nv_fmodf.exit3696
	fma.rn.f32 	%f222, %f220, %f216, 0fC09DE9E6;
	fma.rn.f32 	%f223, %f219, %f221, 0f00000000;
	and.b32  	%r479, %r478, 1;
	cvt.rzi.s32.f32 	%r493, %f268;
	fma.rn.f32 	%f273, %f271, %f270, 0fC0A55DF6;
	fma.rn.f32 	%f274, %f272, %f270, 0f4081E0CF;
	fma.rn.f32 	%f275, %f270, %f269, 0f00000000;
	cvt.rzi.s32.f32 	%r515, %f320;
	fma.rn.f32 	%f325, %f323, %f322, 0fC0A55DF6;
	fma.rn.f32 	%f326, %f324, %f322, 0f4081E0CF;
	fma.rn.f32 	%f327, %f322, %f321, 0f00000000;
	add.f32 	%f469, %f750, %f750;
	mov.b32 	%r571, %f469;
	and.b32  	%r572, %r571, -2147483648;
	or.b32  	%r573, %r572, 1056964608;
	mov.b32 	%f470, %r573;
	add.f32 	%f471, %f469, %f470;
	cvt.rzi.f32.f32 	%f472, %f471;
	abs.f32 	%f473, %f469;
	setp.gt.f32 	%p117, %f473, 0f4B000000;
	selp.f32 	%f474, %f469, %f472, %p117;
	cvt.rzi.f32.f32 	%f475, %f469;
	setp.lt.f32 	%p118, %f473, 0f3F000000;
	selp.f32 	%f476, %f475, %f474, %p118;
	cvt.rzi.s32.f32 	%r574, %f476;
	fma.rn.f32 	%f477, %f476, 0fBF000000, %f750;
	mul.f32 	%f478, %f477, %f477;
	fma.rn.f32 	%f479, %f478, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f480, %f478, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f481, %f479, %f478, 0fC0A55DF6;
	fma.rn.f32 	%f482, %f480, %f478, 0f4081E0CF;
	fma.rn.f32 	%f483, %f478, %f477, 0f00000000;
	fma.rn.f32 	%f484, %f482, %f478, 0fC09DE9E6;
	fma.rn.f32 	%f485, %f481, %f483, 0f00000000;
	and.b32  	%r575, %r574, 1;
	@%p22 bra 	LBB0_75;
// %bb.64:
	@%p443 bra 	LBB0_71;
	bra.uni 	LBB0_65;
LBB0_71:
	mov.b32 	%r52, %f726;
	and.b32  	%r579, %r52, 8388607;
	or.b32  	%r3722, %r579, 1065353216;
	mov.b32 	%f725, %r3722;
	add.s32 	%r580, %r52, -1073741824;
	and.b32  	%r3723, %r580, -8388608;
	setp.eq.s32 	%p130, %r3723, 0;
	@%p130 bra 	LBB0_74;
// %bb.72:                              // %.lr.ph5227.preheader
	mov.f32 	%f510, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f509,%f510;
	// end inline asm
LBB0_73:                                // %.lr.ph5227
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r581, %r3723, 192937984;
	add.s32 	%r582, %r581, %r3722;
	mov.b32 	%f511, %r582;
	mul.f32 	%f512, %f509, %f511;
	sub.f32 	%f513, %f511, %f512;
	fma.rn.f32 	%f514, %f513, %f509, %f512;
	sub.f32 	%f515, %f511, %f514;
	fma.rz.f32 	%f516, %f515, %f509, %f514;
	cvt.rzi.f32.f32 	%f517, %f516;
	sub.f32 	%f725, %f511, %f517;
	sub.s32 	%r3723, %r3723, %r581;
	mov.b32 	%r3722, %f725;
	setp.ne.s32 	%p131, %r3723, 0;
	setp.ne.s32 	%p132, %r3722, 0;
	and.pred  	%p133, %p131, %p132;
	@%p133 bra 	LBB0_73;
LBB0_74:                                // %__internal_fmodf_slowpath_mod.exit.i.i3425
	setp.gt.u32 	%p134, %r52, 2139095039;
	selp.f32 	%f518, 0f7FFFFFFF, 0f4B800000, %p134;
	mul.f32 	%f519, %f725, 0f34000000;
	mul.f32 	%f726, %f518, %f519;
	bra.uni 	LBB0_75;
LBB0_65:                                // %__nv_fast_fdividef.exit.i.i.i3391
	div.approx.f32 	%f502, %f726, %f703;
	cvt.rzi.f32.f32 	%f81, %f502;
	fma.rn.f32 	%f82, %f81, 0fC0000000, %f726;
	mov.b32 	%r51, %f82;
	setp.lt.u32 	%p125, %r51, 1073741824;
	mov.f32 	%f724, %f81;
	@%p125 bra 	LBB0_70;
// %bb.66:
	setp.lt.u32 	%p126, %r51, -2147483647;
	@%p126 bra 	LBB0_68;
// %bb.67:
	add.f32 	%f507, %f81, 0fBF800000;
	setp.lt.f32 	%p129, %f82, 0fC0000000;
	selp.f32 	%f508, %f507, %f81, %p129;
	add.f32 	%f724, %f508, 0fBF800000;
	bra.uni 	LBB0_70;
LBB0_68:
	add.f32 	%f724, %f81, 0f3F800000;
	setp.ltu.f32 	%p127, %f82, 0f40800000;
	@%p127 bra 	LBB0_70;
// %bb.69:                              // %__nv_fmaf_rn.exit.i.i.i3396
	fma.rn.f32 	%f504, %f703, 0fC0400000, %f82;
	setp.ge.f32 	%p128, %f504, 0f00000000;
	selp.f32 	%f505, %f724, %f81, %p128;
	add.f32 	%f506, %f505, 0f3F800000;
	add.f32 	%f724, %f506, 0f3F800000;
LBB0_70:                                // %__internal_fmodf_fastpath_quot.exit.i.i3399
	fma.rn.f32 	%f726, %f724, 0fC0000000, %f726;
LBB0_75:                                // %__internal_fmodf_kernel.exit.i3428
	fma.rn.f32 	%f224, %f222, %f216, 0f3F800000;
	fma.rn.f32 	%f225, %f215, 0f40490FDB, %f223;
	setp.eq.b32 	%p17, %r479, 1;
	fma.rn.f32 	%f276, %f274, %f270, 0fC09DE9E6;
	fma.rn.f32 	%f277, %f273, %f275, 0f00000000;
	and.b32  	%r494, %r493, 1;
	fma.rn.f32 	%f328, %f326, %f322, 0fC09DE9E6;
	fma.rn.f32 	%f329, %f325, %f327, 0f00000000;
	and.b32  	%r516, %r515, 1;
	fma.rn.f32 	%f486, %f484, %f478, 0f3F800000;
	fma.rn.f32 	%f487, %f477, 0f40490FDB, %f485;
	setp.eq.b32 	%p119, %r575, 1;
	abs.f32 	%f520, %f726;
	setp.gtu.f32 	%p135, %f520, 0f7F800000;
	@%p135 bra 	LBB0_77;
// %bb.76:
	mov.b32 	%r583, %f726;
	or.b32  	%r584, %r16, %r583;
	mov.b32 	%f726, %r584;
LBB0_77:                                // %__nv_fmodf.exit3431
	selp.f32 	%f226, %f224, %f225, %p17;
	and.b32  	%r480, %r478, 2;
	fma.rn.f32 	%f278, %f276, %f270, 0f3F800000;
	fma.rn.f32 	%f279, %f269, 0f40490FDB, %f277;
	setp.eq.b32 	%p37, %r494, 1;
	fma.rn.f32 	%f330, %f328, %f322, 0f3F800000;
	fma.rn.f32 	%f331, %f321, 0f40490FDB, %f329;
	setp.eq.b32 	%p57, %r516, 1;
	selp.f32 	%f488, %f486, %f487, %p119;
	and.b32  	%r576, %r574, 2;
	add.f32 	%f521, %f726, %f726;
	mov.b32 	%r585, %f521;
	and.b32  	%r586, %r585, -2147483648;
	or.b32  	%r587, %r586, 1056964608;
	mov.b32 	%f522, %r587;
	add.f32 	%f523, %f521, %f522;
	cvt.rzi.f32.f32 	%f524, %f523;
	abs.f32 	%f525, %f521;
	setp.gt.f32 	%p137, %f525, 0f4B000000;
	selp.f32 	%f526, %f521, %f524, %p137;
	cvt.rzi.f32.f32 	%f527, %f521;
	setp.lt.f32 	%p138, %f525, 0f3F000000;
	selp.f32 	%f528, %f527, %f526, %p138;
	cvt.rzi.s32.f32 	%r588, %f528;
	fma.rn.f32 	%f529, %f528, 0fBF000000, %f726;
	mul.f32 	%f530, %f529, %f529;
	fma.rn.f32 	%f531, %f530, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f532, %f530, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f533, %f531, %f530, 0fC0A55DF6;
	fma.rn.f32 	%f534, %f532, %f530, 0f4081E0CF;
	fma.rn.f32 	%f535, %f530, %f529, 0f00000000;
	fma.rn.f32 	%f536, %f534, %f530, 0fC09DE9E6;
	fma.rn.f32 	%f537, %f533, %f535, 0f00000000;
	fma.rn.f32 	%f538, %f536, %f530, 0f3F800000;
	fma.rn.f32 	%f539, %f529, 0f40490FDB, %f537;
	and.b32  	%r589, %r588, 1;
	setp.eq.b32 	%p139, %r589, 1;
	@%p42 bra 	LBB0_89;
// %bb.78:
	@%p444 bra 	LBB0_85;
	bra.uni 	LBB0_79;
LBB0_85:
	mov.b32 	%r60, %f730;
	and.b32  	%r593, %r60, 8388607;
	or.b32  	%r3724, %r593, 1065353216;
	mov.b32 	%f729, %r3724;
	add.s32 	%r594, %r60, -1073741824;
	and.b32  	%r3725, %r594, -8388608;
	setp.eq.s32 	%p150, %r3725, 0;
	@%p150 bra 	LBB0_88;
// %bb.86:                              // %.lr.ph5222.preheader
	mov.f32 	%f560, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f559,%f560;
	// end inline asm
LBB0_87:                                // %.lr.ph5222
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r595, %r3725, 192937984;
	add.s32 	%r596, %r595, %r3724;
	mov.b32 	%f561, %r596;
	mul.f32 	%f562, %f559, %f561;
	sub.f32 	%f563, %f561, %f562;
	fma.rn.f32 	%f564, %f563, %f559, %f562;
	sub.f32 	%f565, %f561, %f564;
	fma.rz.f32 	%f566, %f565, %f559, %f564;
	cvt.rzi.f32.f32 	%f567, %f566;
	sub.f32 	%f729, %f561, %f567;
	sub.s32 	%r3725, %r3725, %r595;
	mov.b32 	%r3724, %f729;
	setp.ne.s32 	%p151, %r3725, 0;
	setp.ne.s32 	%p152, %r3724, 0;
	and.pred  	%p153, %p151, %p152;
	@%p153 bra 	LBB0_87;
LBB0_88:                                // %__internal_fmodf_slowpath_mod.exit.i.i3478
	setp.gt.u32 	%p154, %r60, 2139095039;
	selp.f32 	%f568, 0f7FFFFFFF, 0f4B800000, %p154;
	mul.f32 	%f569, %f729, 0f34000000;
	mul.f32 	%f730, %f568, %f569;
	bra.uni 	LBB0_89;
LBB0_79:                                // %__nv_fast_fdividef.exit.i.i.i3444
	div.approx.f32 	%f552, %f730, %f703;
	cvt.rzi.f32.f32 	%f98, %f552;
	fma.rn.f32 	%f99, %f98, 0fC0000000, %f730;
	mov.b32 	%r59, %f99;
	setp.lt.u32 	%p145, %r59, 1073741824;
	mov.f32 	%f728, %f98;
	@%p145 bra 	LBB0_84;
// %bb.80:
	setp.lt.u32 	%p146, %r59, -2147483647;
	@%p146 bra 	LBB0_82;
// %bb.81:
	add.f32 	%f557, %f98, 0fBF800000;
	setp.lt.f32 	%p149, %f99, 0fC0000000;
	selp.f32 	%f558, %f557, %f98, %p149;
	add.f32 	%f728, %f558, 0fBF800000;
	bra.uni 	LBB0_84;
LBB0_82:
	add.f32 	%f728, %f98, 0f3F800000;
	setp.ltu.f32 	%p147, %f99, 0f40800000;
	@%p147 bra 	LBB0_84;
// %bb.83:                              // %__nv_fmaf_rn.exit.i.i.i3449
	fma.rn.f32 	%f554, %f703, 0fC0400000, %f99;
	setp.ge.f32 	%p148, %f554, 0f00000000;
	selp.f32 	%f555, %f728, %f98, %p148;
	add.f32 	%f556, %f555, 0f3F800000;
	add.f32 	%f728, %f556, 0f3F800000;
LBB0_84:                                // %__internal_fmodf_fastpath_quot.exit.i.i3452
	fma.rn.f32 	%f730, %f728, 0fC0000000, %f730;
LBB0_89:                                // %__internal_fmodf_kernel.exit.i3481
	setp.eq.s32 	%p18, %r480, 0;
	neg.f32 	%f228, %f226;
	add.s32 	%r481, %r478, 1;
	cvt.rzi.f32.f32 	%f233, %f746;
	selp.f32 	%f280, %f278, %f279, %p37;
	and.b32  	%r495, %r493, 2;
	selp.f32 	%f332, %f330, %f331, %p57;
	and.b32  	%r517, %r515, 2;
	setp.eq.s32 	%p120, %r576, 0;
	neg.f32 	%f490, %f488;
	add.s32 	%r577, %r574, 1;
	cvt.rzi.f32.f32 	%f495, %f750;
	selp.f32 	%f540, %f538, %f539, %p139;
	and.b32  	%r590, %r588, 2;
	abs.f32 	%f570, %f730;
	setp.gtu.f32 	%p155, %f570, 0f7F800000;
	@%p155 bra 	LBB0_91;
// %bb.90:
	mov.b32 	%r597, %f730;
	or.b32  	%r598, %r25, %r597;
	mov.b32 	%f730, %r598;
LBB0_91:                                // %__nv_fmodf.exit3484
	selp.f32 	%f227, %f225, %f224, %p17;
	selp.f32 	%f229, %f226, %f228, %p18;
	and.b32  	%r482, %r481, 2;
	setp.eq.f32 	%p20, %f233, %f746;
	mul.f32 	%f234, %f746, 0f00000000;
	setp.eq.s32 	%p38, %r495, 0;
	neg.f32 	%f282, %f280;
	add.s32 	%r496, %r493, 1;
	cvt.rzi.f32.f32 	%f287, %f706;
	setp.eq.s32 	%p58, %r517, 0;
	neg.f32 	%f334, %f332;
	add.s32 	%r518, %r515, 1;
	cvt.rzi.f32.f32 	%f339, %f710;
	selp.f32 	%f489, %f487, %f486, %p119;
	selp.f32 	%f491, %f488, %f490, %p120;
	and.b32  	%r578, %r577, 2;
	setp.eq.f32 	%p122, %f495, %f750;
	mul.f32 	%f496, %f750, 0f00000000;
	setp.eq.s32 	%p140, %r590, 0;
	neg.f32 	%f542, %f540;
	add.s32 	%r591, %r588, 1;
	cvt.rzi.f32.f32 	%f547, %f726;
	add.f32 	%f571, %f730, %f730;
	mov.b32 	%r605, %f571;
	and.b32  	%r606, %r605, -2147483648;
	or.b32  	%r607, %r606, 1056964608;
	mov.b32 	%f572, %r607;
	add.f32 	%f573, %f571, %f572;
	cvt.rzi.f32.f32 	%f574, %f573;
	abs.f32 	%f575, %f571;
	setp.gt.f32 	%p157, %f575, 0f4B000000;
	selp.f32 	%f576, %f571, %f574, %p157;
	cvt.rzi.f32.f32 	%f577, %f571;
	setp.lt.f32 	%p158, %f575, 0f3F000000;
	selp.f32 	%f578, %f577, %f576, %p158;
	cvt.rzi.s32.f32 	%r608, %f578;
	fma.rn.f32 	%f579, %f578, 0fBF000000, %f730;
	mul.f32 	%f580, %f579, %f579;
	fma.rn.f32 	%f581, %f580, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f582, %f580, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f583, %f581, %f580, 0fC0A55DF6;
	fma.rn.f32 	%f584, %f582, %f580, 0f4081E0CF;
	fma.rn.f32 	%f585, %f580, %f579, 0f00000000;
	fma.rn.f32 	%f586, %f584, %f580, 0fC09DE9E6;
	fma.rn.f32 	%f587, %f583, %f585, 0f00000000;
	fma.rn.f32 	%f588, %f586, %f580, 0f3F800000;
	fma.rn.f32 	%f589, %f579, 0f40490FDB, %f587;
	and.b32  	%r609, %r608, 1;
	setp.eq.b32 	%p159, %r609, 1;
	selp.f32 	%f590, %f588, %f589, %p159;
	and.b32  	%r610, %r608, 2;
	setp.eq.s32 	%p160, %r610, 0;
	neg.f32 	%f592, %f590;
	add.s32 	%r611, %r608, 1;
	cvt.rzi.f32.f32 	%f597, %f730;
	@%p62 bra 	LBB0_103;
// %bb.92:
	@%p445 bra 	LBB0_99;
	bra.uni 	LBB0_93;
LBB0_99:
	mov.b32 	%r70, %f734;
	and.b32  	%r613, %r70, 8388607;
	or.b32  	%r3726, %r613, 1065353216;
	mov.b32 	%f733, %r3726;
	add.s32 	%r614, %r70, -1073741824;
	and.b32  	%r3727, %r614, -8388608;
	setp.eq.s32 	%p170, %r3727, 0;
	@%p170 bra 	LBB0_102;
// %bb.100:                             // %.lr.ph5217.preheader
	mov.f32 	%f612, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f611,%f612;
	// end inline asm
LBB0_101:                               // %.lr.ph5217
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r615, %r3727, 192937984;
	add.s32 	%r616, %r615, %r3726;
	mov.b32 	%f613, %r616;
	mul.f32 	%f614, %f611, %f613;
	sub.f32 	%f615, %f613, %f614;
	fma.rn.f32 	%f616, %f615, %f611, %f614;
	sub.f32 	%f617, %f613, %f616;
	fma.rz.f32 	%f618, %f617, %f611, %f616;
	cvt.rzi.f32.f32 	%f619, %f618;
	sub.f32 	%f733, %f613, %f619;
	sub.s32 	%r3727, %r3727, %r615;
	mov.b32 	%r3726, %f733;
	setp.ne.s32 	%p171, %r3727, 0;
	setp.ne.s32 	%p172, %r3726, 0;
	and.pred  	%p173, %p171, %p172;
	@%p173 bra 	LBB0_101;
LBB0_102:                               // %__internal_fmodf_slowpath_mod.exit.i.i3531
	setp.gt.u32 	%p174, %r70, 2139095039;
	selp.f32 	%f620, 0f7FFFFFFF, 0f4B800000, %p174;
	mul.f32 	%f621, %f733, 0f34000000;
	mul.f32 	%f734, %f620, %f621;
	bra.uni 	LBB0_103;
LBB0_93:                                // %__nv_fast_fdividef.exit.i.i.i3497
	div.approx.f32 	%f604, %f734, %f703;
	cvt.rzi.f32.f32 	%f113, %f604;
	fma.rn.f32 	%f114, %f113, 0fC0000000, %f734;
	mov.b32 	%r69, %f114;
	setp.lt.u32 	%p165, %r69, 1073741824;
	mov.f32 	%f732, %f113;
	@%p165 bra 	LBB0_98;
// %bb.94:
	setp.lt.u32 	%p166, %r69, -2147483647;
	@%p166 bra 	LBB0_96;
// %bb.95:
	add.f32 	%f609, %f113, 0fBF800000;
	setp.lt.f32 	%p169, %f114, 0fC0000000;
	selp.f32 	%f610, %f609, %f113, %p169;
	add.f32 	%f732, %f610, 0fBF800000;
	bra.uni 	LBB0_98;
LBB0_96:
	add.f32 	%f732, %f113, 0f3F800000;
	setp.ltu.f32 	%p167, %f114, 0f40800000;
	@%p167 bra 	LBB0_98;
// %bb.97:                              // %__nv_fmaf_rn.exit.i.i.i3502
	fma.rn.f32 	%f606, %f703, 0fC0400000, %f114;
	setp.ge.f32 	%p168, %f606, 0f00000000;
	selp.f32 	%f607, %f732, %f113, %p168;
	add.f32 	%f608, %f607, 0f3F800000;
	add.f32 	%f732, %f608, 0f3F800000;
LBB0_98:                                // %__internal_fmodf_fastpath_quot.exit.i.i3505
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
LBB0_103:                               // %__internal_fmodf_kernel.exit.i3534
	setp.eq.s32 	%p19, %r482, 0;
	sub.f32 	%f231, %f230, %f227;
	selp.f32 	%f235, %f234, %f229, %p20;
	abs.f32 	%f236, %f746;
	selp.f32 	%f281, %f279, %f278, %p37;
	selp.f32 	%f283, %f280, %f282, %p38;
	and.b32  	%r497, %r496, 2;
	setp.eq.f32 	%p40, %f287, %f706;
	mul.f32 	%f288, %f706, 0f00000000;
	selp.f32 	%f333, %f331, %f330, %p57;
	selp.f32 	%f335, %f332, %f334, %p58;
	and.b32  	%r519, %r518, 2;
	setp.eq.f32 	%p60, %f339, %f710;
	mul.f32 	%f340, %f710, 0f00000000;
	setp.eq.s32 	%p121, %r578, 0;
	sub.f32 	%f493, %f230, %f489;
	selp.f32 	%f497, %f496, %f491, %p122;
	abs.f32 	%f498, %f750;
	selp.f32 	%f541, %f539, %f538, %p139;
	selp.f32 	%f543, %f540, %f542, %p140;
	and.b32  	%r592, %r591, 2;
	setp.eq.f32 	%p142, %f547, %f726;
	mul.f32 	%f548, %f726, 0f00000000;
	selp.f32 	%f591, %f589, %f588, %p159;
	selp.f32 	%f593, %f590, %f592, %p160;
	and.b32  	%r612, %r611, 2;
	setp.eq.f32 	%p162, %f597, %f730;
	mul.f32 	%f598, %f730, 0f00000000;
	abs.f32 	%f622, %f734;
	setp.gtu.f32 	%p175, %f622, 0f7F800000;
	@%p175 bra 	LBB0_105;
// %bb.104:
	mov.b32 	%r617, %f734;
	or.b32  	%r618, %r38, %r617;
	mov.b32 	%f734, %r618;
LBB0_105:                               // %__nv_fmodf.exit3537
	selp.f32 	%f232, %f227, %f231, %p19;
	setp.gt.f32 	%p21, %f236, 0f4B800000;
	add.f32 	%f237, %f235, 0f3F800000;
	setp.eq.s32 	%p39, %r497, 0;
	sub.f32 	%f285, %f230, %f281;
	selp.f32 	%f18, %f288, %f283, %p40;
	abs.f32 	%f289, %f706;
	setp.eq.s32 	%p59, %r519, 0;
	sub.f32 	%f337, %f230, %f333;
	selp.f32 	%f341, %f340, %f335, %p60;
	abs.f32 	%f342, %f710;
	selp.f32 	%f494, %f489, %f493, %p121;
	setp.gt.f32 	%p123, %f498, 0f4B800000;
	add.f32 	%f499, %f497, 0f3F800000;
	setp.eq.s32 	%p141, %r592, 0;
	sub.f32 	%f545, %f230, %f541;
	selp.f32 	%f96, %f548, %f543, %p142;
	abs.f32 	%f549, %f726;
	setp.eq.s32 	%p161, %r612, 0;
	sub.f32 	%f595, %f230, %f591;
	selp.f32 	%f599, %f598, %f593, %p162;
	abs.f32 	%f600, %f730;
	add.f32 	%f623, %f734, %f734;
	mov.b32 	%r619, %f623;
	and.b32  	%r620, %r619, -2147483648;
	or.b32  	%r621, %r620, 1056964608;
	mov.b32 	%f624, %r621;
	add.f32 	%f625, %f623, %f624;
	cvt.rzi.f32.f32 	%f626, %f625;
	abs.f32 	%f627, %f623;
	setp.gt.f32 	%p177, %f627, 0f4B000000;
	selp.f32 	%f628, %f623, %f626, %p177;
	cvt.rzi.f32.f32 	%f629, %f623;
	setp.lt.f32 	%p178, %f627, 0f3F000000;
	selp.f32 	%f630, %f629, %f628, %p178;
	cvt.rzi.s32.f32 	%r622, %f630;
	fma.rn.f32 	%f631, %f630, 0fBF000000, %f734;
	mul.f32 	%f632, %f631, %f631;
	fma.rn.f32 	%f633, %f632, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f634, %f632, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f635, %f633, %f632, 0fC0A55DF6;
	fma.rn.f32 	%f636, %f634, %f632, 0f4081E0CF;
	fma.rn.f32 	%f637, %f632, %f631, 0f00000000;
	fma.rn.f32 	%f638, %f636, %f632, 0fC09DE9E6;
	fma.rn.f32 	%f639, %f635, %f637, 0f00000000;
	fma.rn.f32 	%f640, %f638, %f632, 0f3F800000;
	fma.rn.f32 	%f641, %f631, 0f40490FDB, %f639;
	and.b32  	%r623, %r622, 1;
	setp.eq.b32 	%p179, %r623, 1;
	selp.f32 	%f642, %f640, %f641, %p179;
	selp.f32 	%f643, %f641, %f640, %p179;
	and.b32  	%r624, %r622, 2;
	setp.eq.s32 	%p180, %r624, 0;
	neg.f32 	%f644, %f642;
	selp.f32 	%f645, %f642, %f644, %p180;
	add.s32 	%r625, %r622, 1;
	and.b32  	%r626, %r625, 2;
	setp.eq.s32 	%p181, %r626, 0;
	sub.f32 	%f647, %f230, %f643;
	cvt.rzi.f32.f32 	%f649, %f734;
	setp.eq.f32 	%p182, %f649, %f734;
	mul.f32 	%f650, %f734, 0f00000000;
	selp.f32 	%f741, %f650, %f645, %p182;
	abs.f32 	%f651, %f734;
	@%p82 bra 	LBB0_117;
// %bb.106:
	@%p446 bra 	LBB0_113;
	bra.uni 	LBB0_107;
LBB0_113:
	mov.b32 	%r78, %f738;
	and.b32  	%r627, %r78, 8388607;
	or.b32  	%r3728, %r627, 1065353216;
	mov.b32 	%f737, %r3728;
	add.s32 	%r628, %r78, -1073741824;
	and.b32  	%r3729, %r628, -8388608;
	setp.eq.s32 	%p190, %r3729, 0;
	@%p190 bra 	LBB0_116;
// %bb.114:                             // %.lr.ph.preheader
	mov.f32 	%f662, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f661,%f662;
	// end inline asm
LBB0_115:                               // %.lr.ph
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r629, %r3729, 192937984;
	add.s32 	%r630, %r629, %r3728;
	mov.b32 	%f663, %r630;
	mul.f32 	%f664, %f661, %f663;
	sub.f32 	%f665, %f663, %f664;
	fma.rn.f32 	%f666, %f665, %f661, %f664;
	sub.f32 	%f667, %f663, %f666;
	fma.rz.f32 	%f668, %f667, %f661, %f666;
	cvt.rzi.f32.f32 	%f669, %f668;
	sub.f32 	%f737, %f663, %f669;
	sub.s32 	%r3729, %r3729, %r629;
	mov.b32 	%r3728, %f737;
	setp.ne.s32 	%p191, %r3729, 0;
	setp.ne.s32 	%p192, %r3728, 0;
	and.pred  	%p193, %p191, %p192;
	@%p193 bra 	LBB0_115;
LBB0_116:                               // %__internal_fmodf_slowpath_mod.exit.i.i3584
	setp.gt.u32 	%p194, %r78, 2139095039;
	selp.f32 	%f670, 0f7FFFFFFF, 0f4B800000, %p194;
	mul.f32 	%f671, %f737, 0f34000000;
	mul.f32 	%f738, %f670, %f671;
	bra.uni 	LBB0_117;
LBB0_107:                               // %__nv_fast_fdividef.exit.i.i.i3550
	div.approx.f32 	%f654, %f738, %f703;
	cvt.rzi.f32.f32 	%f130, %f654;
	fma.rn.f32 	%f131, %f130, 0fC0000000, %f738;
	mov.b32 	%r77, %f131;
	setp.lt.u32 	%p185, %r77, 1073741824;
	mov.f32 	%f736, %f130;
	@%p185 bra 	LBB0_112;
// %bb.108:
	setp.lt.u32 	%p186, %r77, -2147483647;
	@%p186 bra 	LBB0_110;
// %bb.109:
	add.f32 	%f659, %f130, 0fBF800000;
	setp.lt.f32 	%p189, %f131, 0fC0000000;
	selp.f32 	%f660, %f659, %f130, %p189;
	add.f32 	%f736, %f660, 0fBF800000;
	bra.uni 	LBB0_112;
LBB0_110:
	add.f32 	%f736, %f130, 0f3F800000;
	setp.ltu.f32 	%p187, %f131, 0f40800000;
	@%p187 bra 	LBB0_112;
// %bb.111:                             // %__nv_fmaf_rn.exit.i.i.i3555
	fma.rn.f32 	%f656, %f703, 0fC0400000, %f131;
	setp.ge.f32 	%p188, %f656, 0f00000000;
	selp.f32 	%f657, %f736, %f130, %p188;
	add.f32 	%f658, %f657, 0f3F800000;
	add.f32 	%f736, %f658, 0f3F800000;
LBB0_112:                               // %__internal_fmodf_fastpath_quot.exit.i.i3558
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
LBB0_117:                               // %__internal_fmodf_kernel.exit.i3587
	selp.f32 	%f238, %f237, %f232, %p21;
	selp.f32 	%f286, %f281, %f285, %p39;
	setp.gt.f32 	%p41, %f289, 0f4B800000;
	add.f32 	%f290, %f18, 0f3F800000;
	selp.f32 	%f338, %f333, %f337, %p59;
	setp.gt.f32 	%p61, %f342, 0f4B800000;
	add.f32 	%f343, %f341, 0f3F800000;
	selp.f32 	%f500, %f499, %f494, %p123;
	selp.f32 	%f546, %f541, %f545, %p141;
	setp.gt.f32 	%p143, %f549, 0f4B800000;
	add.f32 	%f550, %f96, 0f3F800000;
	selp.f32 	%f596, %f591, %f595, %p161;
	setp.gt.f32 	%p163, %f600, 0f4B800000;
	add.f32 	%f601, %f599, 0f3F800000;
	selp.f32 	%f648, %f643, %f647, %p181;
	setp.gt.f32 	%p183, %f651, 0f4B800000;
	add.f32 	%f652, %f741, 0f3F800000;
	abs.f32 	%f672, %f738;
	setp.gtu.f32 	%p195, %f672, 0f7F800000;
	@%p195 bra 	LBB0_119;
// %bb.118:
	mov.b32 	%r631, %f738;
	or.b32  	%r632, %r47, %r631;
	mov.b32 	%f738, %r632;
LBB0_119:                               // %__nv_fmodf.exit3590
	mov.b32 	%r471, %f238;
	mov.b32 	%r474, %f235;
	selp.f32 	%f19, %f290, %f286, %p41;
	selp.f32 	%f344, %f343, %f338, %p61;
	mov.b32 	%r567, %f500;
	mov.b32 	%r570, %f497;
	selp.f32 	%f97, %f550, %f546, %p143;
	selp.f32 	%f602, %f601, %f596, %p163;
	selp.f32 	%f129, %f652, %f648, %p183;
	add.f32 	%f673, %f738, %f738;
	mov.b32 	%r633, %f673;
	and.b32  	%r634, %r633, -2147483648;
	or.b32  	%r635, %r634, 1056964608;
	mov.b32 	%f674, %r635;
	add.f32 	%f675, %f673, %f674;
	cvt.rzi.f32.f32 	%f676, %f675;
	abs.f32 	%f677, %f673;
	setp.gt.f32 	%p197, %f677, 0f4B000000;
	selp.f32 	%f678, %f673, %f676, %p197;
	cvt.rzi.f32.f32 	%f679, %f673;
	setp.lt.f32 	%p198, %f677, 0f3F000000;
	selp.f32 	%f680, %f679, %f678, %p198;
	cvt.rzi.s32.f32 	%r636, %f680;
	fma.rn.f32 	%f681, %f680, 0fBF000000, %f738;
	mul.f32 	%f682, %f681, %f681;
	fma.rn.f32 	%f683, %f682, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f684, %f682, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f685, %f683, %f682, 0fC0A55DF6;
	fma.rn.f32 	%f686, %f684, %f682, 0f4081E0CF;
	fma.rn.f32 	%f687, %f682, %f681, 0f00000000;
	fma.rn.f32 	%f688, %f686, %f682, 0fC09DE9E6;
	fma.rn.f32 	%f689, %f685, %f687, 0f00000000;
	fma.rn.f32 	%f690, %f688, %f682, 0f3F800000;
	fma.rn.f32 	%f691, %f681, 0f40490FDB, %f689;
	and.b32  	%r637, %r636, 1;
	setp.eq.b32 	%p199, %r637, 1;
	selp.f32 	%f692, %f690, %f691, %p199;
	selp.f32 	%f693, %f691, %f690, %p199;
	and.b32  	%r638, %r636, 2;
	setp.eq.s32 	%p200, %r638, 0;
	neg.f32 	%f694, %f692;
	selp.f32 	%f695, %f692, %f694, %p200;
	add.s32 	%r639, %r636, 1;
	and.b32  	%r640, %r639, 2;
	setp.eq.s32 	%p201, %r640, 0;
	sub.f32 	%f697, %f230, %f693;
	selp.f32 	%f698, %f693, %f697, %p201;
	cvt.rzi.f32.f32 	%f699, %f738;
	setp.eq.f32 	%p202, %f699, %f738;
	mul.f32 	%f700, %f738, 0f00000000;
	selp.f32 	%f743, %f700, %f695, %p202;
	abs.f32 	%f701, %f738;
	setp.gt.f32 	%p203, %f701, 0f4B800000;
	add.f32 	%f702, %f743, 0f3F800000;
	selp.f32 	%f146, %f702, %f698, %p203;
	mov.f32 	%f740, %f129;
	mov.f32 	%f742, %f146;
	@%p102 bra 	LBB0_121;
// %bb.120:                             // %L555
	neg.f32 	%f742, %f743;
	neg.f32 	%f740, %f741;
	mov.f32 	%f741, %f129;
	mov.f32 	%f743, %f146;
LBB0_121:                               // %L557
	xor.b32  	%r470, %r474, -2147483648;
	ld.param.u64 	%rd2, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2];
	mov.b32 	%r508, %f344;
	mov.b32 	%r507, %f19;
	mov.b32 	%r511, %f341;
	mov.b32 	%r510, %f18;
	mov.b32 	%r554, %f720;
	mov.b32 	%r555, %f722;
	mov.b32 	%r557, %f721;
	mov.b32 	%r558, %f723;
	xor.b32  	%r566, %r570, -2147483648;
	mov.b32 	%r601, %f602;
	mov.b32 	%r600, %f97;
	mov.b32 	%r604, %f599;
	mov.b32 	%r603, %f96;
	mov.b32 	%r642, %f740;
	mov.b32 	%r643, %f742;
	mov.b32 	%r645, %f741;
	mov.b32 	%r646, %f743;
	setp.gt.u32 	%p204, %r3, 15;
	shl.b32 	%r87, %r3, 4;
	and.b32  	%r88, %r87, 240;
	mov.u32 	%r90, 999999999;
	@%p204 bra 	LBB0_123;
// %bb.122:                             // %L592
	ld.param.u64 	%rd1, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1];
	or.b32  	%r648, %r88, %r4;
	mul.wide.u32 	%rd98, %r648, 4;
	add.s64 	%rd99, %rd1, %rd98;
	ld.global.u32 	%r649, [%rd99];
	cvt.s32.s16 	%r650, %r649;
	shr.s32 	%r651, %r649, 16;
	mul.lo.s32 	%r652, %r651, 546;
	mad.lo.s32 	%r90, %r650, 33, %r652;
LBB0_123:                               // %L678
	ld.param.u64 	%rd3, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3];
	ld.param.u64 	%rd4, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4];
	// begin inline asm
	cvt.rn.f16x2.f32 %r469, %r471, %r470;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r472, %r474, %r471;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r506, %r508, %r507;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r509, %r511, %r510;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r553, %r555, %r554;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r556, %r558, %r557;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r565, %r567, %r566;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r568, %r570, %r567;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r599, %r601, %r600;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r602, %r604, %r603;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r641, %r643, %r642;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r644, %r646, %r645;
	// end inline asm
	shl.b32 	%r654, %r4, 1;
	shr.u32 	%r655, %r3, 3;
	bfe.u32 	%r656, %r3, 3, 1;
	and.b32  	%r657, %r654, 14;
	or.b32  	%r658, %r656, %r657;
	shl.b32 	%r659, %r3, 6;
	and.b32  	%r660, %r659, 192;
	and.b32  	%r661, %r7, 1;
	and.b32  	%r662, %r655, 2;
	or.b32  	%r663, %r662, %r661;
	shl.b32 	%r664, %r663, 4;
	or.b32  	%r665, %r658, %r660;
	or.b32  	%r666, %r665, %r2;
	or.b32  	%r667, %r666, %r664;
	mul.wide.u32 	%rd100, %r667, 4;
	add.s64 	%rd101, %rd2, %rd100;
	ld.global.u32 	%r91, [%rd101];
	ld.global.u32 	%r92, [%rd101+1024];
	and.b32  	%r93, %r87, 256;
	shl.b32 	%r668, %r3, 2;
	and.b32  	%r94, %r668, 60;
	and.b32  	%r95, %r668, 64;
	shl.b32 	%r96, %r1, 7;
	shr.u32 	%r97, %r3, 4;
	and.b32  	%r669, %r342, 30;
	or.b32  	%r670, %r669, %r97;
	mul.lo.s32 	%r671, %r670, 257;
	add.s32 	%r672, %r4, %r671;
	mul.wide.u32 	%rd102, %r672, 4;
	mov.u64 	%rd103, shmem;
	add.s64 	%rd6, %rd103, %rd102;
	cvt.u64.u32 	%rd104, %r4;
	cvt.u64.u32 	%rd105, %r671;
	add.s64 	%rd106, %rd105, %rd104;
	shl.b64 	%rd107, %rd106, 2;
	add.s64 	%rd7, %rd103, %rd107;
	or.b32  	%r673, %r4, 16;
	add.s32 	%r674, %r673, %r671;
	mul.wide.u32 	%rd108, %r674, 4;
	add.s64 	%rd8, %rd103, %rd108;
	cvt.u64.u32 	%rd109, %r673;
	add.s64 	%rd110, %rd105, %rd109;
	shl.b64 	%rd111, %rd110, 2;
	add.s64 	%rd9, %rd103, %rd111;
	shr.u32 	%r675, %r4, 3;
	and.b32  	%r676, %r5, 224;
	mad.lo.s32 	%r677, %r675, 257, %r676;
	add.s32 	%r678, %r677, %r3;
	mul.wide.u32 	%rd112, %r678, 4;
	add.s64 	%rd10, %rd103, %rd112;
	or.b32  	%r679, %r675, 2;
	mad.lo.s32 	%r680, %r679, 257, %r676;
	add.s32 	%r681, %r680, %r3;
	mul.wide.u32 	%rd113, %r681, 4;
	add.s64 	%rd11, %rd103, %rd113;
	or.b32  	%r682, %r675, 4;
	mad.lo.s32 	%r683, %r682, 257, %r676;
	add.s32 	%r684, %r683, %r3;
	mul.wide.u32 	%rd114, %r684, 4;
	add.s64 	%rd12, %rd103, %rd114;
	or.b32  	%r685, %r675, 6;
	mad.lo.s32 	%r686, %r685, 257, %r676;
	add.s32 	%r687, %r686, %r3;
	mul.wide.u32 	%rd115, %r687, 4;
	add.s64 	%rd13, %rd103, %rd115;
	or.b32  	%r688, %r675, 8;
	mad.lo.s32 	%r689, %r688, 257, %r676;
	add.s32 	%r690, %r689, %r3;
	mul.wide.u32 	%rd116, %r690, 4;
	add.s64 	%rd14, %rd103, %rd116;
	or.b32  	%r691, %r675, 10;
	mad.lo.s32 	%r692, %r691, 257, %r676;
	add.s32 	%r693, %r692, %r3;
	mul.wide.u32 	%rd117, %r693, 4;
	add.s64 	%rd15, %rd103, %rd117;
	or.b32  	%r694, %r675, 12;
	mad.lo.s32 	%r695, %r694, 257, %r676;
	add.s32 	%r696, %r695, %r3;
	mul.wide.u32 	%rd118, %r696, 4;
	add.s64 	%rd16, %rd103, %rd118;
	or.b32  	%r697, %r675, 14;
	mad.lo.s32 	%r698, %r697, 257, %r676;
	add.s32 	%r699, %r698, %r3;
	mul.wide.u32 	%rd119, %r699, 4;
	add.s64 	%rd17, %rd103, %rd119;
	or.b32  	%r700, %r675, 16;
	mad.lo.s32 	%r701, %r700, 257, %r676;
	add.s32 	%r702, %r701, %r3;
	mul.wide.u32 	%rd120, %r702, 4;
	add.s64 	%rd18, %rd103, %rd120;
	or.b32  	%r703, %r675, 18;
	mad.lo.s32 	%r704, %r703, 257, %r676;
	add.s32 	%r705, %r704, %r3;
	mul.wide.u32 	%rd121, %r705, 4;
	add.s64 	%rd19, %rd103, %rd121;
	or.b32  	%r706, %r675, 20;
	mad.lo.s32 	%r707, %r706, 257, %r676;
	add.s32 	%r708, %r707, %r3;
	mul.wide.u32 	%rd122, %r708, 4;
	add.s64 	%rd20, %rd103, %rd122;
	or.b32  	%r709, %r675, 22;
	mad.lo.s32 	%r710, %r709, 257, %r676;
	add.s32 	%r711, %r710, %r3;
	mul.wide.u32 	%rd123, %r711, 4;
	add.s64 	%rd21, %rd103, %rd123;
	or.b32  	%r712, %r675, 24;
	mad.lo.s32 	%r713, %r712, 257, %r676;
	add.s32 	%r714, %r713, %r3;
	mul.wide.u32 	%rd124, %r714, 4;
	add.s64 	%rd22, %rd103, %rd124;
	or.b32  	%r715, %r675, 26;
	mad.lo.s32 	%r716, %r715, 257, %r676;
	add.s32 	%r717, %r716, %r3;
	mul.wide.u32 	%rd125, %r717, 4;
	add.s64 	%rd23, %rd103, %rd125;
	or.b32  	%r718, %r675, 28;
	mad.lo.s32 	%r719, %r718, 257, %r676;
	add.s32 	%r720, %r719, %r3;
	mul.wide.u32 	%rd126, %r720, 4;
	add.s64 	%rd24, %rd103, %rd126;
	or.b32  	%r721, %r675, 30;
	mad.lo.s32 	%r722, %r721, 257, %r676;
	add.s32 	%r723, %r722, %r3;
	mul.wide.u32 	%rd127, %r723, 4;
	add.s64 	%rd25, %rd103, %rd127;
	mul.lo.s32 	%r724, %r6, 2184;
	mul.lo.s32 	%r725, %r663, 546;
	mad.lo.s32 	%r726, %r658, 33, %r724;
	add.s32 	%r727, %r726, %r675;
	add.s32 	%r728, %r727, %r725;
	mul.wide.u32 	%rd128, %r728, 4;
	add.s64 	%rd26, %rd103, %rd128;
	add.s32 	%r729, %r726, %r725;
	add.s32 	%r730, %r729, %r679;
	mul.wide.u32 	%rd129, %r730, 4;
	add.s64 	%rd27, %rd103, %rd129;
	add.s32 	%r731, %r729, %r682;
	mul.wide.u32 	%rd130, %r731, 4;
	add.s64 	%rd28, %rd103, %rd130;
	add.s32 	%r732, %r729, %r685;
	mul.wide.u32 	%rd131, %r732, 4;
	add.s64 	%rd29, %rd103, %rd131;
	add.s32 	%r733, %r729, %r688;
	mul.wide.u32 	%rd132, %r733, 4;
	add.s64 	%rd30, %rd103, %rd132;
	add.s32 	%r734, %r729, %r691;
	mul.wide.u32 	%rd133, %r734, 4;
	add.s64 	%rd31, %rd103, %rd133;
	add.s32 	%r735, %r729, %r694;
	mul.wide.u32 	%rd134, %r735, 4;
	add.s64 	%rd32, %rd103, %rd134;
	add.s32 	%r736, %r729, %r697;
	mul.wide.u32 	%rd135, %r736, 4;
	add.s64 	%rd33, %rd103, %rd135;
	add.s32 	%r737, %r729, %r700;
	mul.wide.u32 	%rd136, %r737, 4;
	add.s64 	%rd34, %rd103, %rd136;
	add.s32 	%r738, %r729, %r703;
	mul.wide.u32 	%rd137, %r738, 4;
	add.s64 	%rd35, %rd103, %rd137;
	add.s32 	%r739, %r729, %r706;
	mul.wide.u32 	%rd138, %r739, 4;
	add.s64 	%rd36, %rd103, %rd138;
	add.s32 	%r740, %r729, %r709;
	mul.wide.u32 	%rd139, %r740, 4;
	add.s64 	%rd37, %rd103, %rd139;
	add.s32 	%r741, %r729, %r712;
	mul.wide.u32 	%rd140, %r741, 4;
	add.s64 	%rd38, %rd103, %rd140;
	add.s32 	%r742, %r729, %r715;
	mul.wide.u32 	%rd141, %r742, 4;
	add.s64 	%rd39, %rd103, %rd141;
	add.s32 	%r743, %r729, %r718;
	mul.wide.u32 	%rd142, %r743, 4;
	add.s64 	%rd40, %rd103, %rd142;
	add.s32 	%r744, %r729, %r721;
	mul.wide.u32 	%rd143, %r744, 4;
	add.s64 	%rd41, %rd103, %rd143;
	setp.eq.s32 	%p205, %r7, 7;
	selp.b16 	%rs1, 2, 1, %p205;
	bfe.u32 	%r745, %r3, 1, 1;
	shl.b32 	%r746, %r4, 2;
	and.b32  	%r747, %r746, 32;
	and.b32  	%r748, %r3, 1;
	or.b32  	%r749, %r657, %r97;
	mad.lo.s32 	%r750, %r745, 1032, %r747;
	mad.lo.s32 	%r751, %r748, 2064, %r750;
	add.s32 	%r752, %r751, %r749;
	mad.lo.s32 	%r753, %r661, 516, %r752;
	mad.lo.s32 	%r754, %r656, 258, %r753;
	mul.wide.s32 	%rd144, %r754, 4;
	add.s64 	%rd42, %rd103, %rd144;
	add.s32 	%r755, %r754, 4144;
	mul.wide.s32 	%rd145, %r755, 4;
	add.s64 	%rd43, %rd103, %rd145;
	add.s32 	%r756, %r754, 16;
	mul.wide.s32 	%rd146, %r756, 4;
	add.s64 	%rd44, %rd103, %rd146;
	add.s32 	%r757, %r754, 4160;
	mul.wide.s32 	%rd147, %r757, 4;
	add.s64 	%rd45, %rd103, %rd147;
	add.s32 	%r758, %r754, 64;
	mul.wide.s32 	%rd148, %r758, 4;
	add.s64 	%rd46, %rd103, %rd148;
	add.s32 	%r759, %r754, 4208;
	mul.wide.s32 	%rd149, %r759, 4;
	add.s64 	%rd47, %rd103, %rd149;
	add.s32 	%r760, %r754, 80;
	mul.wide.s32 	%rd150, %r760, 4;
	add.s64 	%rd48, %rd103, %rd150;
	add.s32 	%r761, %r754, 4224;
	mul.wide.s32 	%rd151, %r761, 4;
	add.s64 	%rd49, %rd103, %rd151;
	add.s32 	%r762, %r754, 128;
	mul.wide.s32 	%rd152, %r762, 4;
	add.s64 	%rd50, %rd103, %rd152;
	add.s32 	%r763, %r754, 4272;
	mul.wide.s32 	%rd153, %r763, 4;
	add.s64 	%rd51, %rd103, %rd153;
	add.s32 	%r764, %r754, 144;
	mul.wide.s32 	%rd154, %r764, 4;
	add.s64 	%rd52, %rd103, %rd154;
	add.s32 	%r765, %r754, 4288;
	mul.wide.s32 	%rd155, %r765, 4;
	add.s64 	%rd53, %rd103, %rd155;
	add.s32 	%r766, %r754, 192;
	mul.wide.s32 	%rd156, %r766, 4;
	add.s64 	%rd54, %rd103, %rd156;
	add.s32 	%r767, %r754, 4336;
	mul.wide.s32 	%rd157, %r767, 4;
	add.s64 	%rd55, %rd103, %rd157;
	add.s32 	%r768, %r754, 208;
	mul.wide.s32 	%rd158, %r768, 4;
	add.s64 	%rd56, %rd103, %rd158;
	add.s32 	%r769, %r754, 4352;
	mul.wide.s32 	%rd159, %r769, 4;
	add.s64 	%rd57, %rd103, %rd159;
	bfe.u32 	%r770, %r4, 1, 1;
	mul.lo.s32 	%r771, %r770, 1032;
	and.b32  	%r772, %r4, 1;
	and.b32  	%r773, %r668, 12;
	bfe.u32 	%r774, %r4, 2, 1;
	mad.lo.s32 	%r775, %r772, 2064, %r771;
	add.s32 	%r776, %r775, %r773;
	mad.lo.s32 	%r777, %r656, 4144, %r776;
	or.b32  	%r778, %r777, %r663;
	mad.lo.s32 	%r779, %r774, 516, %r778;
	mad.lo.s32 	%r780, %r675, 258, %r779;
	mul.wide.s32 	%rd160, %r780, 4;
	add.s64 	%rd58, %rd103, %rd160;
	add.s32 	%r781, %r780, 16;
	mul.wide.s32 	%rd161, %r781, 4;
	add.s64 	%rd59, %rd103, %rd161;
	and.b32  	%r782, %r3, 16;
	or.b32  	%r783, %r782, %r5;
	and.b32  	%r784, %r3, 15;
	mul.lo.s32 	%r98, %r1, 2560;
	or.b32  	%r99, %r784, %r783;
	add.s32 	%r785, %r780, 32;
	mul.wide.s32 	%rd162, %r785, 4;
	add.s64 	%rd60, %rd103, %rd162;
	add.s32 	%r786, %r780, 48;
	mul.wide.s32 	%rd163, %r786, 4;
	add.s64 	%rd61, %rd103, %rd163;
	add.s32 	%r787, %r780, 64;
	mul.wide.s32 	%rd164, %r787, 4;
	add.s64 	%rd62, %rd103, %rd164;
	add.s32 	%r788, %r780, 80;
	mul.wide.s32 	%rd165, %r788, 4;
	add.s64 	%rd63, %rd103, %rd165;
	add.s32 	%r789, %r780, 96;
	mul.wide.s32 	%rd166, %r789, 4;
	add.s64 	%rd64, %rd103, %rd166;
	add.s32 	%r790, %r780, 112;
	mul.wide.s32 	%rd167, %r790, 4;
	add.s64 	%rd65, %rd103, %rd167;
	add.s32 	%r791, %r780, 128;
	mul.wide.s32 	%rd168, %r791, 4;
	add.s64 	%rd66, %rd103, %rd168;
	add.s32 	%r792, %r780, 144;
	mul.wide.s32 	%rd169, %r792, 4;
	add.s64 	%rd67, %rd103, %rd169;
	add.s32 	%r793, %r780, 160;
	mul.wide.s32 	%rd170, %r793, 4;
	add.s64 	%rd68, %rd103, %rd170;
	add.s32 	%r794, %r780, 176;
	mul.wide.s32 	%rd171, %r794, 4;
	add.s64 	%rd69, %rd103, %rd171;
	add.s32 	%r795, %r780, 192;
	mul.wide.s32 	%rd172, %r795, 4;
	add.s64 	%rd70, %rd103, %rd172;
	add.s32 	%r796, %r780, 208;
	mul.wide.s32 	%rd173, %r796, 4;
	add.s64 	%rd71, %rd103, %rd173;
	add.s32 	%r797, %r780, 224;
	mul.wide.s32 	%rd174, %r797, 4;
	add.s64 	%rd72, %rd103, %rd174;
	add.s32 	%r798, %r780, 240;
	mul.wide.s32 	%rd175, %r798, 4;
	add.s64 	%rd73, %rd103, %rd175;
	cvt.u16.u32 	%rs2, %r7;
	mov.u32 	%r100, 0;
	setp.eq.s32 	%p206, %r97, 1;
	setp.lt.u32 	%p207, %r3, 4;
	mov.u16 	%rs136, 25600;
	mov.u16 	%rs138, 21504;
	mov.u32 	%r121, %r100;
	mov.u32 	%r122, %r100;
	mov.u32 	%r123, %r100;
	bra.uni 	LBB0_124;
LBB0_528:                               // %L43336
                                        //   in Loop: Header=BB0_124 Depth=1
	add.s32 	%r330, %r100, 64;
	setp.ne.s32 	%p441, %r100, 64;
	mov.u32 	%r100, %r330;
	@%p441 bra 	LBB0_124;
	bra.uni 	LBB0_529;
LBB0_124:                               // %L1075
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_125 Depth 2
                                        //     Child Loop BB0_327 Depth 2
	or.b32  	%r992, %r4, %r100;
	shl.b32 	%r993, %r992, 19;
	or.b32  	%r994, %r993, %r88;
	or.b32  	%r995, %r93, %r994;
	or.b32  	%r996, %r995, %r2;
	cvt.u64.u32 	%rd176, %r996;
	add.s64 	%rd177, %rd3, %rd176;
	ld.global.v4.u32 	{%r997, %r998, %r999, %r1000}, [%rd177];
	shl.b32 	%r1001, %r992, 17;
	or.b32  	%r1002, %r94, %r1001;
	or.b32  	%r1003, %r1002, %r95;
	or.b32  	%r1004, %r1003, %r96;
	or.b32  	%r1005, %r1004, 2097152;
	mul.wide.s32 	%rd178, %r1005, 4;
	add.s64 	%rd179, %rd3, %rd178;
	ld.global.v4.u32 	{%r1006, %r1007, %r1008, %r1009}, [%rd179];
	or.b32  	%r1010, %r1004, 4194304;
	mul.wide.s32 	%rd180, %r1010, 4;
	add.s64 	%rd181, %rd3, %rd180;
	ld.global.v4.u32 	{%r1011, %r1012, %r1013, %r1014}, [%rd181];
	or.b32  	%r1015, %r1004, 6291456;
	mul.wide.s32 	%rd182, %r1015, 4;
	add.s64 	%rd183, %rd3, %rd182;
	ld.global.v4.u32 	{%r1016, %r1017, %r1018, %r1019}, [%rd183];
	selp.b32 	%r1020, %r997, %r999, %p206;
	shfl.sync.bfly.b32	%r1021, %r1020, 16, 31, -1;
	selp.b32 	%r801, %r1021, %r997, %p206;
	selp.b32 	%r806, %r999, %r1021, %p206;
	selp.b32 	%r1022, %r998, %r1000, %p206;
	shfl.sync.bfly.b32	%r1023, %r1022, 16, 31, -1;
	selp.b32 	%r809, %r1023, %r998, %p206;
	selp.b32 	%r814, %r1000, %r1023, %p206;
	selp.b32 	%r1024, %r1006, %r1008, %p206;
	shfl.sync.bfly.b32	%r1025, %r1024, 16, 31, -1;
	selp.b32 	%r817, %r1025, %r1006, %p206;
	selp.b32 	%r822, %r1008, %r1025, %p206;
	selp.b32 	%r1026, %r1007, %r1009, %p206;
	shfl.sync.bfly.b32	%r1027, %r1026, 16, 31, -1;
	selp.b32 	%r825, %r1027, %r1007, %p206;
	selp.b32 	%r830, %r1009, %r1027, %p206;
	selp.b32 	%r1028, %r1011, %r1013, %p206;
	shfl.sync.bfly.b32	%r1029, %r1028, 16, 31, -1;
	selp.b32 	%r833, %r1029, %r1011, %p206;
	selp.b32 	%r838, %r1013, %r1029, %p206;
	selp.b32 	%r1030, %r1012, %r1014, %p206;
	shfl.sync.bfly.b32	%r1031, %r1030, 16, 31, -1;
	selp.b32 	%r841, %r1031, %r1012, %p206;
	selp.b32 	%r846, %r1014, %r1031, %p206;
	selp.b32 	%r1032, %r1016, %r1018, %p206;
	shfl.sync.bfly.b32	%r1033, %r1032, 16, 31, -1;
	selp.b32 	%r849, %r1033, %r1016, %p206;
	selp.b32 	%r854, %r1018, %r1033, %p206;
	selp.b32 	%r1034, %r1017, %r1019, %p206;
	shfl.sync.bfly.b32	%r1035, %r1034, 16, 31, -1;
	selp.b32 	%r857, %r1035, %r1017, %p206;
	selp.b32 	%r862, %r1019, %r1035, %p206;
	shl.b32 	%r802, %r806, 4;
	mov.u32 	%r800, 252645135;
	// begin inline asm
	lop3.b32 %r864, %r800, %r801, %r802, 202;
	// end inline asm
	shr.u32 	%r805, %r801, 4;
	// begin inline asm
	lop3.b32 %r880, %r800, %r805, %r806, 202;
	// end inline asm
	shl.b32 	%r810, %r814, 4;
	// begin inline asm
	lop3.b32 %r872, %r800, %r809, %r810, 202;
	// end inline asm
	shr.u32 	%r813, %r809, 4;
	// begin inline asm
	lop3.b32 %r888, %r800, %r813, %r814, 202;
	// end inline asm
	shl.b32 	%r818, %r822, 4;
	// begin inline asm
	lop3.b32 %r896, %r800, %r817, %r818, 202;
	// end inline asm
	shr.u32 	%r821, %r817, 4;
	// begin inline asm
	lop3.b32 %r912, %r800, %r821, %r822, 202;
	// end inline asm
	shl.b32 	%r826, %r830, 4;
	// begin inline asm
	lop3.b32 %r904, %r800, %r825, %r826, 202;
	// end inline asm
	shr.u32 	%r829, %r825, 4;
	// begin inline asm
	lop3.b32 %r920, %r800, %r829, %r830, 202;
	// end inline asm
	shl.b32 	%r834, %r838, 4;
	// begin inline asm
	lop3.b32 %r865, %r800, %r833, %r834, 202;
	// end inline asm
	shr.u32 	%r837, %r833, 4;
	// begin inline asm
	lop3.b32 %r881, %r800, %r837, %r838, 202;
	// end inline asm
	shl.b32 	%r842, %r846, 4;
	// begin inline asm
	lop3.b32 %r873, %r800, %r841, %r842, 202;
	// end inline asm
	shr.u32 	%r845, %r841, 4;
	// begin inline asm
	lop3.b32 %r889, %r800, %r845, %r846, 202;
	// end inline asm
	shl.b32 	%r850, %r854, 4;
	// begin inline asm
	lop3.b32 %r897, %r800, %r849, %r850, 202;
	// end inline asm
	shr.u32 	%r853, %r849, 4;
	// begin inline asm
	lop3.b32 %r913, %r800, %r853, %r854, 202;
	// end inline asm
	shl.b32 	%r858, %r862, 4;
	// begin inline asm
	lop3.b32 %r905, %r800, %r857, %r858, 202;
	// end inline asm
	shr.u32 	%r861, %r857, 4;
	// begin inline asm
	lop3.b32 %r921, %r800, %r861, %r862, 202;
	// end inline asm
	mov.u32 	%r866, 25152;
	// begin inline asm
	prmt.b32 %r928, %r864, %r865, %r866;
	// end inline asm
	mov.u32 	%r870, 29521;
	// begin inline asm
	prmt.b32 %r960, %r864, %r865, %r870;
	// end inline asm
	// begin inline asm
	prmt.b32 %r936, %r872, %r873, %r866;
	// end inline asm
	// begin inline asm
	prmt.b32 %r968, %r872, %r873, %r870;
	// end inline asm
	// begin inline asm
	prmt.b32 %r929, %r880, %r881, %r866;
	// end inline asm
	// begin inline asm
	prmt.b32 %r961, %r880, %r881, %r870;
	// end inline asm
	// begin inline asm
	prmt.b32 %r937, %r888, %r889, %r866;
	// end inline asm
	// begin inline asm
	prmt.b32 %r969, %r888, %r889, %r870;
	// end inline asm
	// begin inline asm
	prmt.b32 %r944, %r896, %r897, %r866;
	// end inline asm
	// begin inline asm
	prmt.b32 %r976, %r896, %r897, %r870;
	// end inline asm
	// begin inline asm
	prmt.b32 %r952, %r904, %r905, %r866;
	// end inline asm
	// begin inline asm
	prmt.b32 %r984, %r904, %r905, %r870;
	// end inline asm
	// begin inline asm
	prmt.b32 %r945, %r912, %r913, %r866;
	// end inline asm
	// begin inline asm
	prmt.b32 %r977, %r912, %r913, %r870;
	// end inline asm
	// begin inline asm
	prmt.b32 %r953, %r920, %r921, %r866;
	// end inline asm
	// begin inline asm
	prmt.b32 %r985, %r920, %r921, %r870;
	// end inline asm
	mov.u32 	%r986, 21520;
	// begin inline asm
	prmt.b32 %r927, %r928, %r929, %r986;
	// end inline asm
	mov.u32 	%r990, 30258;
	// begin inline asm
	prmt.b32 %r931, %r928, %r929, %r990;
	// end inline asm
	// begin inline asm
	prmt.b32 %r935, %r936, %r937, %r986;
	// end inline asm
	// begin inline asm
	prmt.b32 %r939, %r936, %r937, %r990;
	// end inline asm
	// begin inline asm
	prmt.b32 %r943, %r944, %r945, %r986;
	// end inline asm
	// begin inline asm
	prmt.b32 %r947, %r944, %r945, %r990;
	// end inline asm
	// begin inline asm
	prmt.b32 %r951, %r952, %r953, %r986;
	// end inline asm
	// begin inline asm
	prmt.b32 %r955, %r952, %r953, %r990;
	// end inline asm
	// begin inline asm
	prmt.b32 %r959, %r960, %r961, %r986;
	// end inline asm
	// begin inline asm
	prmt.b32 %r963, %r960, %r961, %r990;
	// end inline asm
	// begin inline asm
	prmt.b32 %r967, %r968, %r969, %r986;
	// end inline asm
	// begin inline asm
	prmt.b32 %r971, %r968, %r969, %r990;
	// end inline asm
	// begin inline asm
	prmt.b32 %r975, %r976, %r977, %r986;
	// end inline asm
	// begin inline asm
	prmt.b32 %r979, %r976, %r977, %r990;
	// end inline asm
	// begin inline asm
	prmt.b32 %r983, %r984, %r985, %r986;
	// end inline asm
	// begin inline asm
	prmt.b32 %r987, %r984, %r985, %r990;
	// end inline asm
	st.shared.u32 	[%rd6], %r927;
	st.shared.u32 	[%rd7+512], %r935;
	st.shared.u32 	[%rd7+256], %r931;
	st.shared.u32 	[%rd7+768], %r939;
	st.shared.u32 	[%rd8], %r943;
	st.shared.u32 	[%rd9+512], %r951;
	st.shared.u32 	[%rd9+256], %r947;
	st.shared.u32 	[%rd9+768], %r955;
	st.shared.u32 	[%rd7+128], %r959;
	st.shared.u32 	[%rd7+640], %r967;
	st.shared.u32 	[%rd7+384], %r963;
	st.shared.u32 	[%rd7+896], %r971;
	st.shared.u32 	[%rd9+128], %r975;
	st.shared.u32 	[%rd9+640], %r983;
	st.shared.u32 	[%rd9+384], %r979;
	st.shared.u32 	[%rd9+896], %r987;
	bar.sync 	0;
	ld.shared.u32 	%r1036, [%rd10];
	ld.shared.u32 	%r1037, [%rd11];
	ld.shared.u32 	%r1038, [%rd12];
	ld.shared.u32 	%r1039, [%rd13];
	ld.shared.u32 	%r1040, [%rd14];
	ld.shared.u32 	%r1041, [%rd15];
	ld.shared.u32 	%r1042, [%rd16];
	ld.shared.u32 	%r1043, [%rd17];
	ld.shared.u32 	%r1044, [%rd18];
	ld.shared.u32 	%r1045, [%rd19];
	ld.shared.u32 	%r1046, [%rd20];
	ld.shared.u32 	%r1047, [%rd21];
	ld.shared.u32 	%r1048, [%rd22];
	ld.shared.u32 	%r1049, [%rd23];
	ld.shared.u32 	%r1050, [%rd24];
	ld.shared.u32 	%r1051, [%rd25];
	bar.sync 	0;
	shfl.sync.idx.b32	%r1052, %r90, 0, 31, -1;
	shfl.sync.idx.b32	%r1053, %r90, 1, 31, -1;
	shfl.sync.idx.b32	%r1054, %r90, 2, 31, -1;
	shfl.sync.idx.b32	%r1055, %r90, 3, 31, -1;
	shfl.sync.idx.b32	%r1056, %r90, 4, 31, -1;
	shfl.sync.idx.b32	%r1057, %r90, 5, 31, -1;
	shfl.sync.idx.b32	%r1058, %r90, 6, 31, -1;
	shfl.sync.idx.b32	%r1059, %r90, 7, 31, -1;
	shfl.sync.idx.b32	%r1060, %r90, 8, 31, -1;
	shfl.sync.idx.b32	%r1061, %r90, 9, 31, -1;
	shfl.sync.idx.b32	%r1062, %r90, 10, 31, -1;
	shfl.sync.idx.b32	%r1063, %r90, 11, 31, -1;
	shfl.sync.idx.b32	%r1064, %r90, 12, 31, -1;
	shfl.sync.idx.b32	%r1065, %r90, 13, 31, -1;
	shfl.sync.idx.b32	%r1066, %r90, 14, 31, -1;
	shfl.sync.idx.b32	%r1067, %r90, 15, 31, -1;
	add.s32 	%r1068, %r3, %r1052;
	mul.wide.s32 	%rd184, %r1068, 4;
	add.s64 	%rd186, %rd103, %rd184;
	st.shared.u32 	[%rd186], %r1036;
	add.s32 	%r1069, %r3, %r1053;
	mul.wide.s32 	%rd187, %r1069, 4;
	add.s64 	%rd188, %rd103, %rd187;
	st.shared.u32 	[%rd188], %r1037;
	add.s32 	%r1070, %r3, %r1054;
	mul.wide.s32 	%rd189, %r1070, 4;
	add.s64 	%rd190, %rd103, %rd189;
	st.shared.u32 	[%rd190], %r1038;
	add.s32 	%r1071, %r3, %r1055;
	mul.wide.s32 	%rd191, %r1071, 4;
	add.s64 	%rd192, %rd103, %rd191;
	st.shared.u32 	[%rd192], %r1039;
	add.s32 	%r1072, %r3, %r1056;
	mul.wide.s32 	%rd193, %r1072, 4;
	add.s64 	%rd194, %rd103, %rd193;
	st.shared.u32 	[%rd194], %r1040;
	add.s32 	%r1073, %r3, %r1057;
	mul.wide.s32 	%rd195, %r1073, 4;
	add.s64 	%rd196, %rd103, %rd195;
	st.shared.u32 	[%rd196], %r1041;
	add.s32 	%r1074, %r3, %r1058;
	mul.wide.s32 	%rd197, %r1074, 4;
	add.s64 	%rd198, %rd103, %rd197;
	st.shared.u32 	[%rd198], %r1042;
	add.s32 	%r1075, %r3, %r1059;
	mul.wide.s32 	%rd199, %r1075, 4;
	add.s64 	%rd200, %rd103, %rd199;
	st.shared.u32 	[%rd200], %r1043;
	add.s32 	%r1076, %r3, %r1060;
	mul.wide.s32 	%rd201, %r1076, 4;
	add.s64 	%rd202, %rd103, %rd201;
	st.shared.u32 	[%rd202], %r1044;
	add.s32 	%r1077, %r3, %r1061;
	mul.wide.s32 	%rd203, %r1077, 4;
	add.s64 	%rd204, %rd103, %rd203;
	st.shared.u32 	[%rd204], %r1045;
	add.s32 	%r1078, %r3, %r1062;
	mul.wide.s32 	%rd205, %r1078, 4;
	add.s64 	%rd206, %rd103, %rd205;
	st.shared.u32 	[%rd206], %r1046;
	add.s32 	%r1079, %r3, %r1063;
	mul.wide.s32 	%rd207, %r1079, 4;
	add.s64 	%rd208, %rd103, %rd207;
	st.shared.u32 	[%rd208], %r1047;
	add.s32 	%r1080, %r3, %r1064;
	mul.wide.s32 	%rd209, %r1080, 4;
	add.s64 	%rd210, %rd103, %rd209;
	st.shared.u32 	[%rd210], %r1048;
	add.s32 	%r1081, %r3, %r1065;
	mul.wide.s32 	%rd211, %r1081, 4;
	add.s64 	%rd212, %rd103, %rd211;
	st.shared.u32 	[%rd212], %r1049;
	add.s32 	%r1082, %r3, %r1066;
	mul.wide.s32 	%rd213, %r1082, 4;
	add.s64 	%rd214, %rd103, %rd213;
	st.shared.u32 	[%rd214], %r1050;
	add.s32 	%r1083, %r3, %r1067;
	mul.wide.s32 	%rd215, %r1083, 4;
	add.s64 	%rd216, %rd103, %rd215;
	st.shared.u32 	[%rd216], %r1051;
	bar.sync 	0;
	ld.shared.u32 	%r104, [%rd26];
	ld.shared.u32 	%r105, [%rd27];
	ld.shared.u32 	%r106, [%rd28];
	ld.shared.u32 	%r107, [%rd29];
	ld.shared.u32 	%r108, [%rd30];
	ld.shared.u32 	%r109, [%rd31];
	ld.shared.u32 	%r110, [%rd32];
	ld.shared.u32 	%r111, [%rd33];
	ld.shared.u32 	%r112, [%rd34];
	ld.shared.u32 	%r113, [%rd35];
	ld.shared.u32 	%r114, [%rd36];
	ld.shared.u32 	%r115, [%rd37];
	ld.shared.u32 	%r116, [%rd38];
	ld.shared.u32 	%r117, [%rd39];
	ld.shared.u32 	%r118, [%rd40];
	ld.shared.u32 	%r119, [%rd41];
	bar.sync 	0;
	mov.u32 	%r120, 16;
	bra.uni 	LBB0_125;
LBB0_324:                               // %L27295
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s32 	%r122, %r122, 1;
	mov.u32 	%r121, 0;
	mov.u32 	%r123, %r121;
LBB0_325:                               // %L27296
                                        //   in Loop: Header=BB0_125 Depth=2
	bar.sync 	0;
	add.s32 	%r120, %r120, -8;
	setp.ne.s32 	%p323, %r120, -16;
	@%p323 bra 	LBB0_125;
	bra.uni 	LBB0_326;
LBB0_125:                               // %L11297
                                        //   Parent Loop BB0_124 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p208, %r120, 16;
	selp.b32 	%r1477, %r104, 0, %p208;
	setp.eq.s32 	%p209, %r120, 8;
	selp.b32 	%r1478, %r108, %r1477, %p209;
	setp.eq.s32 	%p210, %r120, 0;
	selp.b32 	%r1479, %r112, %r1478, %p210;
	setp.eq.s32 	%p211, %r120, -8;
	selp.b32 	%r1480, %r116, %r1479, %p211;
	selp.b32 	%r1481, %r105, 0, %p208;
	selp.b32 	%r1482, %r109, %r1481, %p209;
	selp.b32 	%r1483, %r113, %r1482, %p210;
	selp.b32 	%r1484, %r117, %r1483, %p211;
	selp.b32 	%r1485, %r106, 0, %p208;
	selp.b32 	%r1486, %r110, %r1485, %p209;
	selp.b32 	%r1487, %r114, %r1486, %p210;
	selp.b32 	%r1488, %r118, %r1487, %p211;
	selp.b32 	%r1489, %r107, 0, %p208;
	selp.b32 	%r1490, %r111, %r1489, %p209;
	selp.b32 	%r1491, %r115, %r1490, %p210;
	selp.b32 	%r1492, %r119, %r1491, %p211;
	// begin inline asm
	mov.b32 %r1089, {%rs136, %rs136};
	// end inline asm
	// begin inline asm
	mov.b32 %r1100, {%rs138, %rs138};
	// end inline asm
	xor.b32  	%r1088, %r1480, -2004318072;
	mov.u32 	%r1225, 983055;
	// begin inline asm
	lop3.b32 %r1086, %r1225, %r1088, %r1089, 202;
	// end inline asm
	mov.u16 	%rs142, 18432;
	// begin inline asm
	mov.b32 %r1090, {%rs142, %rs142};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1091, %r1089, %r1090;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1094, %r1086, %r1091;
	// end inline asm
	mov.u32 	%r1236, 15728880;
	// begin inline asm
	lop3.b32 %r1097, %r1236, %r1088, %r1100, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1101, {%rs142, %rs142};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1102, %r1100, %r1101;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1105, %r1097, %r1102;
	// end inline asm
	// begin inline asm
	mov.b32 %r1135, {%rs136, %rs136};
	// end inline asm
	// begin inline asm
	mov.b32 %r1146, {%rs138, %rs138};
	// end inline asm
	xor.b32  	%r1134, %r1484, -2004318072;
	// begin inline asm
	lop3.b32 %r1132, %r1225, %r1134, %r1135, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1136, {%rs142, %rs142};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1137, %r1135, %r1136;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1140, %r1132, %r1137;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1143, %r1236, %r1134, %r1146, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1147, {%rs142, %rs142};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1148, %r1146, %r1147;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1151, %r1143, %r1148;
	// end inline asm
	// begin inline asm
	mov.b32 %r1181, {%rs136, %rs136};
	// end inline asm
	// begin inline asm
	mov.b32 %r1192, {%rs138, %rs138};
	// end inline asm
	xor.b32  	%r1180, %r1488, -2004318072;
	// begin inline asm
	lop3.b32 %r1178, %r1225, %r1180, %r1181, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1182, {%rs142, %rs142};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1183, %r1181, %r1182;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1186, %r1178, %r1183;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1189, %r1236, %r1180, %r1192, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1193, {%rs142, %rs142};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1194, %r1192, %r1193;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1197, %r1189, %r1194;
	// end inline asm
	// begin inline asm
	mov.b32 %r1227, {%rs136, %rs136};
	// end inline asm
	// begin inline asm
	mov.b32 %r1238, {%rs138, %rs138};
	// end inline asm
	xor.b32  	%r1226, %r1492, -2004318072;
	// begin inline asm
	lop3.b32 %r1224, %r1225, %r1226, %r1227, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1228, {%rs142, %rs142};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1229, %r1227, %r1228;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1232, %r1224, %r1229;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1235, %r1236, %r1226, %r1238, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1239, {%rs142, %rs142};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1240, %r1238, %r1239;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1243, %r1235, %r1240;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r91;
    mov.b32 {%r2re, %r2im}, %r1094;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1268, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r92;
    mov.b32 {%r2re, %r2im}, %r1105;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1271, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r91;
    mov.b32 {%r2re, %r2im}, %r1140;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1274, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r92;
    mov.b32 {%r2re, %r2im}, %r1151;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1277, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r91;
    mov.b32 {%r2re, %r2im}, %r1186;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1280, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r92;
    mov.b32 {%r2re, %r2im}, %r1197;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1283, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r91;
    mov.b32 {%r2re, %r2im}, %r1232;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1286, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r92;
    mov.b32 {%r2re, %r2im}, %r1243;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1289, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1347, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1292, %r1293}, {%r469, %r472}, {%r1268}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1299, %r1300}, {%r469, %r472}, {%r1271}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1306, %r1307}, {%r469, %r472}, {%r1274}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1313, %r1314}, {%r469, %r472}, {%r1277}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1320, %r1321}, {%r469, %r472}, {%r1280}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1327, %r1328}, {%r469, %r472}, {%r1283}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1334, %r1335}, {%r469, %r472}, {%r1286}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1341, %r1342}, {%r469, %r472}, {%r1289}, {%r1347, %r1347};
	// end inline asm
	mov.u16 	%rs436, 2;
	mov.u32 	%r3739, 1145324612;
	@%p207 bra 	LBB0_130;
// %bb.126:                             // %L11847
                                        //   in Loop: Header=BB0_125 Depth=2
	and.b16  	%rs149, %rs2, 7;
	mov.u16 	%rs436, 2;
	add.s16 	%rs150, %rs149, -1;
	setp.lt.u16 	%p212, %rs150, 3;
	@%p212 bra 	LBB0_130;
// %bb.127:                             // %L11847
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s16 	%rs151, %rs149, -4;
	setp.lt.u16 	%p213, %rs151, 3;
	@%p213 bra 	LBB0_129;
// %bb.128:                             // %L11871
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u16 	%rs436, %rs1;
LBB0_129:                               // %L11882
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u32 	%r3739, -286331154;
LBB0_130:                               // %L11890
                                        //   in Loop: Header=BB0_125 Depth=2
	setp.eq.s16 	%p214, %rs436, 2;
	@%p214 bra 	LBB0_132;
	bra.uni 	LBB0_131;
LBB0_132:                               // %pass4160
                                        //   in Loop: Header=BB0_125 Depth=2
	// begin inline asm
	neg.f16x2 %r1348, %r509;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1350, %r1348, %r1293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1420, %r509, %r1292;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1353, %r506, %r1292, %r1350;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1423, %r506, %r1293, %r1420;
	// end inline asm
	setp.gt.u32 	%p215, %r3, 3;
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1495, %r1496}, {%r553, %r556}, {%r1353, %r1423}, {%r1347, %r1347}, %r3739, 0;
	// end inline asm
	mov.u16 	%rs438, 2;
	mov.u32 	%r3740, 1145324612;
	@%p215 bra 	LBB0_133;
	bra.uni 	LBB0_137;
LBB0_133:                               // %L11921
                                        //   in Loop: Header=BB0_125 Depth=2
	and.b16  	%rs154, %rs2, 7;
	mov.u16 	%rs438, 2;
	add.s16 	%rs155, %rs154, -1;
	setp.lt.u16 	%p216, %rs155, 3;
	@%p216 bra 	LBB0_137;
// %bb.134:                             // %L11921
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s16 	%rs156, %rs154, -4;
	setp.lt.u16 	%p217, %rs156, 3;
	@%p217 bra 	LBB0_136;
// %bb.135:                             // %L11945
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u16 	%rs438, %rs1;
LBB0_136:                               // %L11956
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u32 	%r3740, -286331154;
LBB0_137:                               // %L11964
                                        //   in Loop: Header=BB0_125 Depth=2
	setp.eq.s16 	%p218, %rs438, 2;
	@%p218 bra 	LBB0_139;
	bra.uni 	LBB0_138;
LBB0_139:                               // %pass4172
                                        //   in Loop: Header=BB0_125 Depth=2
	// begin inline asm
	neg.f16x2 %r1357, %r509;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1359, %r1357, %r1300;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1427, %r509, %r1299;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1362, %r506, %r1299, %r1359;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1430, %r506, %r1300, %r1427;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1507, %r1508}, {%r553, %r556}, {%r1362, %r1430}, {%r1347, %r1347}, %r3740, 0;
	// end inline asm
	mov.u16 	%rs440, 2;
	mov.u32 	%r3741, 1145324612;
	@%p215 bra 	LBB0_140;
	bra.uni 	LBB0_144;
LBB0_140:                               // %L11995
                                        //   in Loop: Header=BB0_125 Depth=2
	and.b16  	%rs159, %rs2, 7;
	mov.u16 	%rs440, 2;
	add.s16 	%rs160, %rs159, -1;
	setp.lt.u16 	%p220, %rs160, 3;
	@%p220 bra 	LBB0_144;
// %bb.141:                             // %L11995
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s16 	%rs161, %rs159, -4;
	setp.lt.u16 	%p221, %rs161, 3;
	@%p221 bra 	LBB0_143;
// %bb.142:                             // %L12019
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u16 	%rs440, %rs1;
LBB0_143:                               // %L12030
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u32 	%r3741, -286331154;
LBB0_144:                               // %L12038
                                        //   in Loop: Header=BB0_125 Depth=2
	setp.eq.s16 	%p222, %rs440, 2;
	@%p222 bra 	LBB0_146;
	bra.uni 	LBB0_145;
LBB0_146:                               // %pass4184
                                        //   in Loop: Header=BB0_125 Depth=2
	// begin inline asm
	neg.f16x2 %r1366, %r509;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1368, %r1366, %r1307;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1434, %r509, %r1306;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1371, %r506, %r1306, %r1368;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1437, %r506, %r1307, %r1434;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1519, %r1520}, {%r553, %r556}, {%r1371, %r1437}, {%r1347, %r1347}, %r3741, 0;
	// end inline asm
	mov.u16 	%rs442, 2;
	mov.u32 	%r3742, 1145324612;
	@%p215 bra 	LBB0_147;
	bra.uni 	LBB0_151;
LBB0_147:                               // %L12069
                                        //   in Loop: Header=BB0_125 Depth=2
	and.b16  	%rs164, %rs2, 7;
	mov.u16 	%rs442, 2;
	add.s16 	%rs165, %rs164, -1;
	setp.lt.u16 	%p224, %rs165, 3;
	@%p224 bra 	LBB0_151;
// %bb.148:                             // %L12069
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s16 	%rs166, %rs164, -4;
	setp.lt.u16 	%p225, %rs166, 3;
	@%p225 bra 	LBB0_150;
// %bb.149:                             // %L12093
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u16 	%rs442, %rs1;
LBB0_150:                               // %L12104
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u32 	%r3742, -286331154;
LBB0_151:                               // %L12112
                                        //   in Loop: Header=BB0_125 Depth=2
	setp.eq.s16 	%p226, %rs442, 2;
	@%p226 bra 	LBB0_153;
	bra.uni 	LBB0_152;
LBB0_153:                               // %pass4196
                                        //   in Loop: Header=BB0_125 Depth=2
	// begin inline asm
	neg.f16x2 %r1375, %r509;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1377, %r1375, %r1314;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1441, %r509, %r1313;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1380, %r506, %r1313, %r1377;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1444, %r506, %r1314, %r1441;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1531, %r1532}, {%r553, %r556}, {%r1380, %r1444}, {%r1347, %r1347}, %r3742, 0;
	// end inline asm
	mov.u16 	%rs444, 2;
	mov.u32 	%r3743, 1145324612;
	@%p215 bra 	LBB0_154;
	bra.uni 	LBB0_158;
LBB0_154:                               // %L12143
                                        //   in Loop: Header=BB0_125 Depth=2
	and.b16  	%rs169, %rs2, 7;
	mov.u16 	%rs444, 2;
	add.s16 	%rs170, %rs169, -1;
	setp.lt.u16 	%p228, %rs170, 3;
	@%p228 bra 	LBB0_158;
// %bb.155:                             // %L12143
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s16 	%rs171, %rs169, -4;
	setp.lt.u16 	%p229, %rs171, 3;
	@%p229 bra 	LBB0_157;
// %bb.156:                             // %L12167
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u16 	%rs444, %rs1;
LBB0_157:                               // %L12178
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u32 	%r3743, -286331154;
LBB0_158:                               // %L12186
                                        //   in Loop: Header=BB0_125 Depth=2
	setp.eq.s16 	%p230, %rs444, 2;
	@%p230 bra 	LBB0_160;
	bra.uni 	LBB0_159;
LBB0_160:                               // %pass4208
                                        //   in Loop: Header=BB0_125 Depth=2
	// begin inline asm
	neg.f16x2 %r1384, %r509;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1386, %r1384, %r1321;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1448, %r509, %r1320;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1389, %r506, %r1320, %r1386;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1451, %r506, %r1321, %r1448;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1543, %r1544}, {%r553, %r556}, {%r1389, %r1451}, {%r1347, %r1347}, %r3743, 0;
	// end inline asm
	mov.u16 	%rs446, 2;
	mov.u32 	%r3744, 1145324612;
	@%p215 bra 	LBB0_161;
	bra.uni 	LBB0_165;
LBB0_161:                               // %L12217
                                        //   in Loop: Header=BB0_125 Depth=2
	and.b16  	%rs174, %rs2, 7;
	mov.u16 	%rs446, 2;
	add.s16 	%rs175, %rs174, -1;
	setp.lt.u16 	%p232, %rs175, 3;
	@%p232 bra 	LBB0_165;
// %bb.162:                             // %L12217
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s16 	%rs176, %rs174, -4;
	setp.lt.u16 	%p233, %rs176, 3;
	@%p233 bra 	LBB0_164;
// %bb.163:                             // %L12241
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u16 	%rs446, %rs1;
LBB0_164:                               // %L12252
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u32 	%r3744, -286331154;
LBB0_165:                               // %L12260
                                        //   in Loop: Header=BB0_125 Depth=2
	setp.eq.s16 	%p234, %rs446, 2;
	@%p234 bra 	LBB0_167;
	bra.uni 	LBB0_166;
LBB0_167:                               // %pass4220
                                        //   in Loop: Header=BB0_125 Depth=2
	// begin inline asm
	neg.f16x2 %r1393, %r509;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1395, %r1393, %r1328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1455, %r509, %r1327;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1398, %r506, %r1327, %r1395;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1458, %r506, %r1328, %r1455;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1555, %r1556}, {%r553, %r556}, {%r1398, %r1458}, {%r1347, %r1347}, %r3744, 0;
	// end inline asm
	mov.u16 	%rs448, 2;
	mov.u32 	%r3745, 1145324612;
	@%p215 bra 	LBB0_168;
	bra.uni 	LBB0_172;
LBB0_168:                               // %L12291
                                        //   in Loop: Header=BB0_125 Depth=2
	and.b16  	%rs179, %rs2, 7;
	mov.u16 	%rs448, 2;
	add.s16 	%rs180, %rs179, -1;
	setp.lt.u16 	%p236, %rs180, 3;
	@%p236 bra 	LBB0_172;
// %bb.169:                             // %L12291
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s16 	%rs181, %rs179, -4;
	setp.lt.u16 	%p237, %rs181, 3;
	@%p237 bra 	LBB0_171;
// %bb.170:                             // %L12315
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u16 	%rs448, %rs1;
LBB0_171:                               // %L12326
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u32 	%r3745, -286331154;
LBB0_172:                               // %L12334
                                        //   in Loop: Header=BB0_125 Depth=2
	setp.eq.s16 	%p238, %rs448, 2;
	@%p238 bra 	LBB0_174;
	bra.uni 	LBB0_173;
LBB0_174:                               // %pass4232
                                        //   in Loop: Header=BB0_125 Depth=2
	// begin inline asm
	neg.f16x2 %r1402, %r509;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1404, %r1402, %r1335;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1462, %r509, %r1334;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1407, %r506, %r1334, %r1404;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1465, %r506, %r1335, %r1462;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1567, %r1568}, {%r553, %r556}, {%r1407, %r1465}, {%r1347, %r1347}, %r3745, 0;
	// end inline asm
	mov.u16 	%rs450, 2;
	mov.u32 	%r3746, 1145324612;
	@%p215 bra 	LBB0_175;
	bra.uni 	LBB0_179;
LBB0_175:                               // %L12365
                                        //   in Loop: Header=BB0_125 Depth=2
	and.b16  	%rs184, %rs2, 7;
	mov.u16 	%rs450, 2;
	add.s16 	%rs185, %rs184, -1;
	setp.lt.u16 	%p240, %rs185, 3;
	@%p240 bra 	LBB0_179;
// %bb.176:                             // %L12365
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s16 	%rs186, %rs184, -4;
	setp.lt.u16 	%p241, %rs186, 3;
	@%p241 bra 	LBB0_178;
// %bb.177:                             // %L12389
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u16 	%rs450, %rs1;
LBB0_178:                               // %L12400
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u32 	%r3746, -286331154;
LBB0_179:                               // %L12408
                                        //   in Loop: Header=BB0_125 Depth=2
	setp.eq.s16 	%p242, %rs450, 2;
	@%p242 bra 	LBB0_181;
	bra.uni 	LBB0_180;
LBB0_181:                               // %pass4244
                                        //   in Loop: Header=BB0_125 Depth=2
	// begin inline asm
	neg.f16x2 %r1411, %r509;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1413, %r1411, %r1342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1469, %r509, %r1341;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1416, %r506, %r1341, %r1413;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1472, %r506, %r1342, %r1469;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1645, %r1646}, {%r553, %r556}, {%r1416, %r1472}, {%r1347, %r1347}, %r3746, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1588, %r1495, %r1496, %r986;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1592, %r1495, %r1496, %r990;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1596, %r1507, %r1508, %r986;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1600, %r1507, %r1508, %r990;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1604, %r1519, %r1520, %r986;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1608, %r1519, %r1520, %r990;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1612, %r1531, %r1532, %r986;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1616, %r1531, %r1532, %r990;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1620, %r1543, %r1544, %r986;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1624, %r1543, %r1544, %r990;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1628, %r1555, %r1556, %r986;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1632, %r1555, %r1556, %r990;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1636, %r1567, %r1568, %r986;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1640, %r1567, %r1568, %r990;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1644, %r1645, %r1646, %r986;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1648, %r1645, %r1646, %r990;
	// end inline asm
	st.shared.u32 	[%rd42], %r1588;
	st.shared.u32 	[%rd43], %r1592;
	st.shared.u32 	[%rd44], %r1596;
	st.shared.u32 	[%rd45], %r1600;
	st.shared.u32 	[%rd46], %r1604;
	st.shared.u32 	[%rd47], %r1608;
	st.shared.u32 	[%rd48], %r1612;
	st.shared.u32 	[%rd49], %r1616;
	st.shared.u32 	[%rd50], %r1620;
	st.shared.u32 	[%rd51], %r1624;
	st.shared.u32 	[%rd52], %r1628;
	st.shared.u32 	[%rd53], %r1632;
	st.shared.u32 	[%rd54], %r1636;
	st.shared.u32 	[%rd55], %r1640;
	st.shared.u32 	[%rd56], %r1644;
	st.shared.u32 	[%rd57], %r1648;
	bar.sync 	0;
	ld.shared.u32 	%r1656, [%rd58];
	ld.shared.u32 	%r1663, [%rd59];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1652, %r1653}, {%r565, %r568}, {%r1656}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1659, %r1660}, {%r565, %r568}, {%r1663}, {%r1347, %r1347};
	// end inline asm
	mov.u16 	%rs452, 2;
	mov.u32 	%r3747, 1145324612;
	@%p215 bra 	LBB0_182;
	bra.uni 	LBB0_186;
LBB0_182:                               // %L18028
                                        //   in Loop: Header=BB0_125 Depth=2
	and.b16  	%rs189, %rs2, 7;
	mov.u16 	%rs452, 2;
	add.s16 	%rs190, %rs189, -1;
	setp.lt.u16 	%p244, %rs190, 3;
	@%p244 bra 	LBB0_186;
// %bb.183:                             // %L18028
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s16 	%rs191, %rs189, -4;
	setp.lt.u16 	%p245, %rs191, 3;
	@%p245 bra 	LBB0_185;
// %bb.184:                             // %L18052
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u16 	%rs452, %rs1;
LBB0_185:                               // %L18063
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u32 	%r3747, -286331154;
LBB0_186:                               // %L18071
                                        //   in Loop: Header=BB0_125 Depth=2
	setp.eq.s16 	%p246, %rs452, 2;
	@%p246 bra 	LBB0_188;
	bra.uni 	LBB0_187;
LBB0_188:                               // %pass6560
                                        //   in Loop: Header=BB0_125 Depth=2
	// begin inline asm
	neg.f16x2 %r1666, %r602;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1668, %r1666, %r1653;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1684, %r602, %r1652;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1671, %r599, %r1652, %r1668;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1687, %r599, %r1653, %r1684;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1701, %r1702}, {%r641, %r644}, {%r1671, %r1687}, {%r1347, %r1347}, %r3747, 0;
	// end inline asm
	mov.u16 	%rs454, 2;
	mov.u32 	%r3748, 1145324612;
	@%p215 bra 	LBB0_189;
	bra.uni 	LBB0_193;
LBB0_189:                               // %L18102
                                        //   in Loop: Header=BB0_125 Depth=2
	and.b16  	%rs194, %rs2, 7;
	mov.u16 	%rs454, 2;
	add.s16 	%rs195, %rs194, -1;
	setp.lt.u16 	%p248, %rs195, 3;
	@%p248 bra 	LBB0_193;
// %bb.190:                             // %L18102
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s16 	%rs196, %rs194, -4;
	setp.lt.u16 	%p249, %rs196, 3;
	@%p249 bra 	LBB0_192;
// %bb.191:                             // %L18126
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u16 	%rs454, %rs1;
LBB0_192:                               // %L18137
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u32 	%r3748, -286331154;
LBB0_193:                               // %L18145
                                        //   in Loop: Header=BB0_125 Depth=2
	setp.eq.s16 	%p250, %rs454, 2;
	@%p250 bra 	LBB0_195;
	bra.uni 	LBB0_194;
LBB0_195:                               // %pass6572
                                        //   in Loop: Header=BB0_125 Depth=2
	// begin inline asm
	neg.f16x2 %r1675, %r602;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1677, %r1675, %r1660;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1691, %r602, %r1659;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1680, %r599, %r1659, %r1677;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1694, %r599, %r1660, %r1691;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1730, %r1734}, {%r641, %r644}, {%r1680, %r1694}, {%r1347, %r1347}, %r3748, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1722, %r1701, %r1701;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1725, %r1702, %r1702, %r1722;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1729, %r1730, %r1730, %r1725;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1733, %r1734, %r1734, %r1729;
	// end inline asm
	mov.u32 	%r1738, 488578335;
	// begin inline asm
	fma.rn.f16x2 %r153, %r1738, %r1733, %r123;
	// end inline asm
	add.s32 	%r151, %r121, 1;
	setp.eq.s32 	%p251, %r151, 25;
	@%p251 bra 	LBB0_196;
	bra.uni 	LBB0_199;
LBB0_196:                               // %L18179
                                        //   in Loop: Header=BB0_125 Depth=2
	@%p204 bra 	LBB0_198;
// %bb.197:                             // %L18245
                                        //   in Loop: Header=BB0_125 Depth=2
	shl.b32 	%r1741, %r122, 9;
	or.b32  	%r1742, %r99, %r1741;
	add.s32 	%r1743, %r98, %r1742;
	mul.wide.u32 	%rd237, %r1743, 4;
	add.s64 	%rd74, %rd4, %rd237;
	st.global.u32 	[%rd74], %r153;
LBB0_198:                               // %L18398
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s32 	%r122, %r122, 1;
	mov.u32 	%r151, 0;
	mov.u32 	%r153, %r151;
LBB0_199:                               // %L18403
                                        //   in Loop: Header=BB0_125 Depth=2
	ld.shared.u32 	%r1749, [%rd60];
	ld.shared.u32 	%r1756, [%rd61];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1745, %r1746}, {%r565, %r568}, {%r1749}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1752, %r1753}, {%r565, %r568}, {%r1756}, {%r1347, %r1347};
	// end inline asm
	mov.u16 	%rs456, 2;
	mov.u32 	%r3752, 1145324612;
	@%p207 bra 	LBB0_204;
// %bb.200:                             // %L19299
                                        //   in Loop: Header=BB0_125 Depth=2
	and.b16  	%rs199, %rs2, 7;
	mov.u16 	%rs456, 2;
	add.s16 	%rs200, %rs199, -1;
	setp.lt.u16 	%p254, %rs200, 3;
	@%p254 bra 	LBB0_204;
// %bb.201:                             // %L19299
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s16 	%rs201, %rs199, -4;
	setp.lt.u16 	%p255, %rs201, 3;
	@%p255 bra 	LBB0_203;
// %bb.202:                             // %L19323
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u16 	%rs456, %rs1;
LBB0_203:                               // %L19334
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u32 	%r3752, -286331154;
LBB0_204:                               // %L19342
                                        //   in Loop: Header=BB0_125 Depth=2
	setp.eq.s16 	%p256, %rs456, 2;
	@%p256 bra 	LBB0_206;
	bra.uni 	LBB0_205;
LBB0_206:                               // %pass6988
                                        //   in Loop: Header=BB0_125 Depth=2
	// begin inline asm
	neg.f16x2 %r1759, %r602;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1761, %r1759, %r1746;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1777, %r602, %r1745;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1764, %r599, %r1745, %r1761;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1780, %r599, %r1746, %r1777;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1794, %r1795}, {%r641, %r644}, {%r1764, %r1780}, {%r1347, %r1347}, %r3752, 0;
	// end inline asm
	mov.u16 	%rs458, 2;
	mov.u32 	%r3753, 1145324612;
	@%p215 bra 	LBB0_207;
	bra.uni 	LBB0_211;
LBB0_207:                               // %L19373
                                        //   in Loop: Header=BB0_125 Depth=2
	and.b16  	%rs204, %rs2, 7;
	mov.u16 	%rs458, 2;
	add.s16 	%rs205, %rs204, -1;
	setp.lt.u16 	%p258, %rs205, 3;
	@%p258 bra 	LBB0_211;
// %bb.208:                             // %L19373
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s16 	%rs206, %rs204, -4;
	setp.lt.u16 	%p259, %rs206, 3;
	@%p259 bra 	LBB0_210;
// %bb.209:                             // %L19397
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u16 	%rs458, %rs1;
LBB0_210:                               // %L19408
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u32 	%r3753, -286331154;
LBB0_211:                               // %L19416
                                        //   in Loop: Header=BB0_125 Depth=2
	setp.eq.s16 	%p260, %rs458, 2;
	@%p260 bra 	LBB0_213;
	bra.uni 	LBB0_212;
LBB0_213:                               // %pass7000
                                        //   in Loop: Header=BB0_125 Depth=2
	// begin inline asm
	neg.f16x2 %r1768, %r602;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1770, %r1768, %r1753;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1784, %r602, %r1752;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1773, %r599, %r1752, %r1770;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1787, %r599, %r1753, %r1784;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1823, %r1827}, {%r641, %r644}, {%r1773, %r1787}, {%r1347, %r1347}, %r3753, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1815, %r1794, %r1794;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1818, %r1795, %r1795, %r1815;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1822, %r1823, %r1823, %r1818;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1826, %r1827, %r1827, %r1822;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r163, %r1738, %r1826, %r153;
	// end inline asm
	add.s32 	%r161, %r151, 1;
	setp.eq.s32 	%p261, %r161, 25;
	@%p261 bra 	LBB0_214;
	bra.uni 	LBB0_217;
LBB0_214:                               // %L19450
                                        //   in Loop: Header=BB0_125 Depth=2
	@%p204 bra 	LBB0_216;
// %bb.215:                             // %L19516
                                        //   in Loop: Header=BB0_125 Depth=2
	shl.b32 	%r1834, %r122, 9;
	or.b32  	%r1835, %r99, %r1834;
	add.s32 	%r1836, %r98, %r1835;
	mul.wide.u32 	%rd242, %r1836, 4;
	add.s64 	%rd75, %rd4, %rd242;
	st.global.u32 	[%rd75], %r163;
LBB0_216:                               // %L19669
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s32 	%r122, %r122, 1;
	mov.u32 	%r161, 0;
	mov.u32 	%r163, %r161;
LBB0_217:                               // %L19674
                                        //   in Loop: Header=BB0_125 Depth=2
	ld.shared.u32 	%r1842, [%rd62];
	ld.shared.u32 	%r1849, [%rd63];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1838, %r1839}, {%r565, %r568}, {%r1842}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1845, %r1846}, {%r565, %r568}, {%r1849}, {%r1347, %r1347};
	// end inline asm
	mov.u16 	%rs460, 2;
	mov.u32 	%r3757, 1145324612;
	@%p207 bra 	LBB0_222;
// %bb.218:                             // %L20570
                                        //   in Loop: Header=BB0_125 Depth=2
	and.b16  	%rs209, %rs2, 7;
	mov.u16 	%rs460, 2;
	add.s16 	%rs210, %rs209, -1;
	setp.lt.u16 	%p264, %rs210, 3;
	@%p264 bra 	LBB0_222;
// %bb.219:                             // %L20570
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s16 	%rs211, %rs209, -4;
	setp.lt.u16 	%p265, %rs211, 3;
	@%p265 bra 	LBB0_221;
// %bb.220:                             // %L20594
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u16 	%rs460, %rs1;
LBB0_221:                               // %L20605
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u32 	%r3757, -286331154;
LBB0_222:                               // %L20613
                                        //   in Loop: Header=BB0_125 Depth=2
	setp.eq.s16 	%p266, %rs460, 2;
	@%p266 bra 	LBB0_224;
	bra.uni 	LBB0_223;
LBB0_224:                               // %pass7416
                                        //   in Loop: Header=BB0_125 Depth=2
	// begin inline asm
	neg.f16x2 %r1852, %r602;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1854, %r1852, %r1839;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1870, %r602, %r1838;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1857, %r599, %r1838, %r1854;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1873, %r599, %r1839, %r1870;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1887, %r1888}, {%r641, %r644}, {%r1857, %r1873}, {%r1347, %r1347}, %r3757, 0;
	// end inline asm
	mov.u16 	%rs462, 2;
	mov.u32 	%r3758, 1145324612;
	@%p215 bra 	LBB0_225;
	bra.uni 	LBB0_229;
LBB0_225:                               // %L20644
                                        //   in Loop: Header=BB0_125 Depth=2
	and.b16  	%rs214, %rs2, 7;
	mov.u16 	%rs462, 2;
	add.s16 	%rs215, %rs214, -1;
	setp.lt.u16 	%p268, %rs215, 3;
	@%p268 bra 	LBB0_229;
// %bb.226:                             // %L20644
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s16 	%rs216, %rs214, -4;
	setp.lt.u16 	%p269, %rs216, 3;
	@%p269 bra 	LBB0_228;
// %bb.227:                             // %L20668
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u16 	%rs462, %rs1;
LBB0_228:                               // %L20679
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u32 	%r3758, -286331154;
LBB0_229:                               // %L20687
                                        //   in Loop: Header=BB0_125 Depth=2
	setp.eq.s16 	%p270, %rs462, 2;
	@%p270 bra 	LBB0_231;
	bra.uni 	LBB0_230;
LBB0_231:                               // %pass7428
                                        //   in Loop: Header=BB0_125 Depth=2
	// begin inline asm
	neg.f16x2 %r1861, %r602;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1863, %r1861, %r1846;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1877, %r602, %r1845;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1866, %r599, %r1845, %r1863;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1880, %r599, %r1846, %r1877;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1916, %r1920}, {%r641, %r644}, {%r1866, %r1880}, {%r1347, %r1347}, %r3758, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1908, %r1887, %r1887;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1911, %r1888, %r1888, %r1908;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1915, %r1916, %r1916, %r1911;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1919, %r1920, %r1920, %r1915;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r173, %r1738, %r1919, %r163;
	// end inline asm
	add.s32 	%r171, %r161, 1;
	setp.eq.s32 	%p271, %r171, 25;
	@%p271 bra 	LBB0_232;
	bra.uni 	LBB0_235;
LBB0_232:                               // %L20721
                                        //   in Loop: Header=BB0_125 Depth=2
	@%p204 bra 	LBB0_234;
// %bb.233:                             // %L20787
                                        //   in Loop: Header=BB0_125 Depth=2
	shl.b32 	%r1927, %r122, 9;
	or.b32  	%r1928, %r99, %r1927;
	add.s32 	%r1929, %r98, %r1928;
	mul.wide.u32 	%rd247, %r1929, 4;
	add.s64 	%rd76, %rd4, %rd247;
	st.global.u32 	[%rd76], %r173;
LBB0_234:                               // %L20940
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s32 	%r122, %r122, 1;
	mov.u32 	%r171, 0;
	mov.u32 	%r173, %r171;
LBB0_235:                               // %L20945
                                        //   in Loop: Header=BB0_125 Depth=2
	ld.shared.u32 	%r1935, [%rd64];
	ld.shared.u32 	%r1942, [%rd65];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1931, %r1932}, {%r565, %r568}, {%r1935}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1938, %r1939}, {%r565, %r568}, {%r1942}, {%r1347, %r1347};
	// end inline asm
	mov.u16 	%rs464, 2;
	mov.u32 	%r3762, 1145324612;
	@%p207 bra 	LBB0_240;
// %bb.236:                             // %L21841
                                        //   in Loop: Header=BB0_125 Depth=2
	and.b16  	%rs219, %rs2, 7;
	mov.u16 	%rs464, 2;
	add.s16 	%rs220, %rs219, -1;
	setp.lt.u16 	%p274, %rs220, 3;
	@%p274 bra 	LBB0_240;
// %bb.237:                             // %L21841
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s16 	%rs221, %rs219, -4;
	setp.lt.u16 	%p275, %rs221, 3;
	@%p275 bra 	LBB0_239;
// %bb.238:                             // %L21865
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u16 	%rs464, %rs1;
LBB0_239:                               // %L21876
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u32 	%r3762, -286331154;
LBB0_240:                               // %L21884
                                        //   in Loop: Header=BB0_125 Depth=2
	setp.eq.s16 	%p276, %rs464, 2;
	@%p276 bra 	LBB0_242;
	bra.uni 	LBB0_241;
LBB0_242:                               // %pass7844
                                        //   in Loop: Header=BB0_125 Depth=2
	// begin inline asm
	neg.f16x2 %r1945, %r602;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1947, %r1945, %r1932;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1963, %r602, %r1931;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1950, %r599, %r1931, %r1947;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1966, %r599, %r1932, %r1963;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1980, %r1981}, {%r641, %r644}, {%r1950, %r1966}, {%r1347, %r1347}, %r3762, 0;
	// end inline asm
	mov.u16 	%rs466, 2;
	mov.u32 	%r3763, 1145324612;
	@%p215 bra 	LBB0_243;
	bra.uni 	LBB0_247;
LBB0_243:                               // %L21915
                                        //   in Loop: Header=BB0_125 Depth=2
	and.b16  	%rs224, %rs2, 7;
	mov.u16 	%rs466, 2;
	add.s16 	%rs225, %rs224, -1;
	setp.lt.u16 	%p278, %rs225, 3;
	@%p278 bra 	LBB0_247;
// %bb.244:                             // %L21915
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s16 	%rs226, %rs224, -4;
	setp.lt.u16 	%p279, %rs226, 3;
	@%p279 bra 	LBB0_246;
// %bb.245:                             // %L21939
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u16 	%rs466, %rs1;
LBB0_246:                               // %L21950
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u32 	%r3763, -286331154;
LBB0_247:                               // %L21958
                                        //   in Loop: Header=BB0_125 Depth=2
	setp.eq.s16 	%p280, %rs466, 2;
	@%p280 bra 	LBB0_249;
	bra.uni 	LBB0_248;
LBB0_249:                               // %pass7856
                                        //   in Loop: Header=BB0_125 Depth=2
	// begin inline asm
	neg.f16x2 %r1954, %r602;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1956, %r1954, %r1939;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1970, %r602, %r1938;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1959, %r599, %r1938, %r1956;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1973, %r599, %r1939, %r1970;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2009, %r2013}, {%r641, %r644}, {%r1959, %r1973}, {%r1347, %r1347}, %r3763, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2001, %r1980, %r1980;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2004, %r1981, %r1981, %r2001;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2008, %r2009, %r2009, %r2004;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2012, %r2013, %r2013, %r2008;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r183, %r1738, %r2012, %r173;
	// end inline asm
	add.s32 	%r181, %r171, 1;
	setp.eq.s32 	%p281, %r181, 25;
	@%p281 bra 	LBB0_250;
	bra.uni 	LBB0_253;
LBB0_250:                               // %L21992
                                        //   in Loop: Header=BB0_125 Depth=2
	@%p204 bra 	LBB0_252;
// %bb.251:                             // %L22058
                                        //   in Loop: Header=BB0_125 Depth=2
	shl.b32 	%r2020, %r122, 9;
	or.b32  	%r2021, %r99, %r2020;
	add.s32 	%r2022, %r98, %r2021;
	mul.wide.u32 	%rd252, %r2022, 4;
	add.s64 	%rd77, %rd4, %rd252;
	st.global.u32 	[%rd77], %r183;
LBB0_252:                               // %L22211
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s32 	%r122, %r122, 1;
	mov.u32 	%r181, 0;
	mov.u32 	%r183, %r181;
LBB0_253:                               // %L22216
                                        //   in Loop: Header=BB0_125 Depth=2
	ld.shared.u32 	%r2028, [%rd66];
	ld.shared.u32 	%r2035, [%rd67];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2024, %r2025}, {%r565, %r568}, {%r2028}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2031, %r2032}, {%r565, %r568}, {%r2035}, {%r1347, %r1347};
	// end inline asm
	mov.u16 	%rs468, 2;
	mov.u32 	%r3767, 1145324612;
	@%p207 bra 	LBB0_258;
// %bb.254:                             // %L23112
                                        //   in Loop: Header=BB0_125 Depth=2
	and.b16  	%rs229, %rs2, 7;
	mov.u16 	%rs468, 2;
	add.s16 	%rs230, %rs229, -1;
	setp.lt.u16 	%p284, %rs230, 3;
	@%p284 bra 	LBB0_258;
// %bb.255:                             // %L23112
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s16 	%rs231, %rs229, -4;
	setp.lt.u16 	%p285, %rs231, 3;
	@%p285 bra 	LBB0_257;
// %bb.256:                             // %L23136
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u16 	%rs468, %rs1;
LBB0_257:                               // %L23147
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u32 	%r3767, -286331154;
LBB0_258:                               // %L23155
                                        //   in Loop: Header=BB0_125 Depth=2
	setp.eq.s16 	%p286, %rs468, 2;
	@%p286 bra 	LBB0_260;
	bra.uni 	LBB0_259;
LBB0_260:                               // %pass8272
                                        //   in Loop: Header=BB0_125 Depth=2
	// begin inline asm
	neg.f16x2 %r2038, %r602;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2040, %r2038, %r2025;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2056, %r602, %r2024;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2043, %r599, %r2024, %r2040;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2059, %r599, %r2025, %r2056;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2073, %r2074}, {%r641, %r644}, {%r2043, %r2059}, {%r1347, %r1347}, %r3767, 0;
	// end inline asm
	mov.u16 	%rs470, 2;
	mov.u32 	%r3768, 1145324612;
	@%p215 bra 	LBB0_261;
	bra.uni 	LBB0_265;
LBB0_261:                               // %L23186
                                        //   in Loop: Header=BB0_125 Depth=2
	and.b16  	%rs234, %rs2, 7;
	mov.u16 	%rs470, 2;
	add.s16 	%rs235, %rs234, -1;
	setp.lt.u16 	%p288, %rs235, 3;
	@%p288 bra 	LBB0_265;
// %bb.262:                             // %L23186
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s16 	%rs236, %rs234, -4;
	setp.lt.u16 	%p289, %rs236, 3;
	@%p289 bra 	LBB0_264;
// %bb.263:                             // %L23210
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u16 	%rs470, %rs1;
LBB0_264:                               // %L23221
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u32 	%r3768, -286331154;
LBB0_265:                               // %L23229
                                        //   in Loop: Header=BB0_125 Depth=2
	setp.eq.s16 	%p290, %rs470, 2;
	@%p290 bra 	LBB0_267;
	bra.uni 	LBB0_266;
LBB0_267:                               // %pass8284
                                        //   in Loop: Header=BB0_125 Depth=2
	// begin inline asm
	neg.f16x2 %r2047, %r602;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2049, %r2047, %r2032;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2063, %r602, %r2031;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2052, %r599, %r2031, %r2049;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2066, %r599, %r2032, %r2063;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2102, %r2106}, {%r641, %r644}, {%r2052, %r2066}, {%r1347, %r1347}, %r3768, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2094, %r2073, %r2073;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2097, %r2074, %r2074, %r2094;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2101, %r2102, %r2102, %r2097;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2105, %r2106, %r2106, %r2101;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r193, %r1738, %r2105, %r183;
	// end inline asm
	add.s32 	%r191, %r181, 1;
	setp.eq.s32 	%p291, %r191, 25;
	@%p291 bra 	LBB0_268;
	bra.uni 	LBB0_271;
LBB0_268:                               // %L23263
                                        //   in Loop: Header=BB0_125 Depth=2
	@%p204 bra 	LBB0_270;
// %bb.269:                             // %L23329
                                        //   in Loop: Header=BB0_125 Depth=2
	shl.b32 	%r2113, %r122, 9;
	or.b32  	%r2114, %r99, %r2113;
	add.s32 	%r2115, %r98, %r2114;
	mul.wide.u32 	%rd257, %r2115, 4;
	add.s64 	%rd78, %rd4, %rd257;
	st.global.u32 	[%rd78], %r193;
LBB0_270:                               // %L23482
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s32 	%r122, %r122, 1;
	mov.u32 	%r191, 0;
	mov.u32 	%r193, %r191;
LBB0_271:                               // %L23487
                                        //   in Loop: Header=BB0_125 Depth=2
	ld.shared.u32 	%r2121, [%rd68];
	ld.shared.u32 	%r2128, [%rd69];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2117, %r2118}, {%r565, %r568}, {%r2121}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2124, %r2125}, {%r565, %r568}, {%r2128}, {%r1347, %r1347};
	// end inline asm
	mov.u16 	%rs472, 2;
	mov.u32 	%r3772, 1145324612;
	@%p207 bra 	LBB0_276;
// %bb.272:                             // %L24383
                                        //   in Loop: Header=BB0_125 Depth=2
	and.b16  	%rs239, %rs2, 7;
	mov.u16 	%rs472, 2;
	add.s16 	%rs240, %rs239, -1;
	setp.lt.u16 	%p294, %rs240, 3;
	@%p294 bra 	LBB0_276;
// %bb.273:                             // %L24383
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s16 	%rs241, %rs239, -4;
	setp.lt.u16 	%p295, %rs241, 3;
	@%p295 bra 	LBB0_275;
// %bb.274:                             // %L24407
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u16 	%rs472, %rs1;
LBB0_275:                               // %L24418
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u32 	%r3772, -286331154;
LBB0_276:                               // %L24426
                                        //   in Loop: Header=BB0_125 Depth=2
	setp.eq.s16 	%p296, %rs472, 2;
	@%p296 bra 	LBB0_278;
	bra.uni 	LBB0_277;
LBB0_278:                               // %pass8700
                                        //   in Loop: Header=BB0_125 Depth=2
	// begin inline asm
	neg.f16x2 %r2131, %r602;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2133, %r2131, %r2118;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2149, %r602, %r2117;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2136, %r599, %r2117, %r2133;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2152, %r599, %r2118, %r2149;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2166, %r2167}, {%r641, %r644}, {%r2136, %r2152}, {%r1347, %r1347}, %r3772, 0;
	// end inline asm
	mov.u16 	%rs474, 2;
	mov.u32 	%r3773, 1145324612;
	@%p215 bra 	LBB0_279;
	bra.uni 	LBB0_283;
LBB0_279:                               // %L24457
                                        //   in Loop: Header=BB0_125 Depth=2
	and.b16  	%rs244, %rs2, 7;
	mov.u16 	%rs474, 2;
	add.s16 	%rs245, %rs244, -1;
	setp.lt.u16 	%p298, %rs245, 3;
	@%p298 bra 	LBB0_283;
// %bb.280:                             // %L24457
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s16 	%rs246, %rs244, -4;
	setp.lt.u16 	%p299, %rs246, 3;
	@%p299 bra 	LBB0_282;
// %bb.281:                             // %L24481
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u16 	%rs474, %rs1;
LBB0_282:                               // %L24492
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u32 	%r3773, -286331154;
LBB0_283:                               // %L24500
                                        //   in Loop: Header=BB0_125 Depth=2
	setp.eq.s16 	%p300, %rs474, 2;
	@%p300 bra 	LBB0_285;
	bra.uni 	LBB0_284;
LBB0_285:                               // %pass8712
                                        //   in Loop: Header=BB0_125 Depth=2
	// begin inline asm
	neg.f16x2 %r2140, %r602;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2142, %r2140, %r2125;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2156, %r602, %r2124;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2145, %r599, %r2124, %r2142;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2159, %r599, %r2125, %r2156;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2195, %r2199}, {%r641, %r644}, {%r2145, %r2159}, {%r1347, %r1347}, %r3773, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2187, %r2166, %r2166;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2190, %r2167, %r2167, %r2187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2194, %r2195, %r2195, %r2190;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2198, %r2199, %r2199, %r2194;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r203, %r1738, %r2198, %r193;
	// end inline asm
	add.s32 	%r201, %r191, 1;
	setp.eq.s32 	%p301, %r201, 25;
	@%p301 bra 	LBB0_286;
	bra.uni 	LBB0_289;
LBB0_286:                               // %L24534
                                        //   in Loop: Header=BB0_125 Depth=2
	@%p204 bra 	LBB0_288;
// %bb.287:                             // %L24600
                                        //   in Loop: Header=BB0_125 Depth=2
	shl.b32 	%r2206, %r122, 9;
	or.b32  	%r2207, %r99, %r2206;
	add.s32 	%r2208, %r98, %r2207;
	mul.wide.u32 	%rd262, %r2208, 4;
	add.s64 	%rd79, %rd4, %rd262;
	st.global.u32 	[%rd79], %r203;
LBB0_288:                               // %L24753
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s32 	%r122, %r122, 1;
	mov.u32 	%r201, 0;
	mov.u32 	%r203, %r201;
LBB0_289:                               // %L24758
                                        //   in Loop: Header=BB0_125 Depth=2
	ld.shared.u32 	%r2214, [%rd70];
	ld.shared.u32 	%r2221, [%rd71];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2210, %r2211}, {%r565, %r568}, {%r2214}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2217, %r2218}, {%r565, %r568}, {%r2221}, {%r1347, %r1347};
	// end inline asm
	mov.u16 	%rs476, 2;
	mov.u32 	%r3777, 1145324612;
	@%p207 bra 	LBB0_294;
// %bb.290:                             // %L25654
                                        //   in Loop: Header=BB0_125 Depth=2
	and.b16  	%rs249, %rs2, 7;
	mov.u16 	%rs476, 2;
	add.s16 	%rs250, %rs249, -1;
	setp.lt.u16 	%p304, %rs250, 3;
	@%p304 bra 	LBB0_294;
// %bb.291:                             // %L25654
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s16 	%rs251, %rs249, -4;
	setp.lt.u16 	%p305, %rs251, 3;
	@%p305 bra 	LBB0_293;
// %bb.292:                             // %L25678
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u16 	%rs476, %rs1;
LBB0_293:                               // %L25689
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u32 	%r3777, -286331154;
LBB0_294:                               // %L25697
                                        //   in Loop: Header=BB0_125 Depth=2
	setp.eq.s16 	%p306, %rs476, 2;
	@%p306 bra 	LBB0_296;
	bra.uni 	LBB0_295;
LBB0_296:                               // %pass9128
                                        //   in Loop: Header=BB0_125 Depth=2
	// begin inline asm
	neg.f16x2 %r2224, %r602;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2226, %r2224, %r2211;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2242, %r602, %r2210;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2229, %r599, %r2210, %r2226;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2245, %r599, %r2211, %r2242;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2259, %r2260}, {%r641, %r644}, {%r2229, %r2245}, {%r1347, %r1347}, %r3777, 0;
	// end inline asm
	mov.u16 	%rs478, 2;
	mov.u32 	%r3778, 1145324612;
	@%p215 bra 	LBB0_297;
	bra.uni 	LBB0_301;
LBB0_297:                               // %L25728
                                        //   in Loop: Header=BB0_125 Depth=2
	and.b16  	%rs254, %rs2, 7;
	mov.u16 	%rs478, 2;
	add.s16 	%rs255, %rs254, -1;
	setp.lt.u16 	%p308, %rs255, 3;
	@%p308 bra 	LBB0_301;
// %bb.298:                             // %L25728
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s16 	%rs256, %rs254, -4;
	setp.lt.u16 	%p309, %rs256, 3;
	@%p309 bra 	LBB0_300;
// %bb.299:                             // %L25752
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u16 	%rs478, %rs1;
LBB0_300:                               // %L25763
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u32 	%r3778, -286331154;
LBB0_301:                               // %L25771
                                        //   in Loop: Header=BB0_125 Depth=2
	setp.eq.s16 	%p310, %rs478, 2;
	@%p310 bra 	LBB0_303;
	bra.uni 	LBB0_302;
LBB0_303:                               // %pass9140
                                        //   in Loop: Header=BB0_125 Depth=2
	// begin inline asm
	neg.f16x2 %r2233, %r602;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2235, %r2233, %r2218;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2249, %r602, %r2217;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2238, %r599, %r2217, %r2235;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2252, %r599, %r2218, %r2249;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2288, %r2292}, {%r641, %r644}, {%r2238, %r2252}, {%r1347, %r1347}, %r3778, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2280, %r2259, %r2259;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2283, %r2260, %r2260, %r2280;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2287, %r2288, %r2288, %r2283;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2291, %r2292, %r2292, %r2287;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r213, %r1738, %r2291, %r203;
	// end inline asm
	add.s32 	%r211, %r201, 1;
	setp.eq.s32 	%p311, %r211, 25;
	@%p311 bra 	LBB0_304;
	bra.uni 	LBB0_307;
LBB0_304:                               // %L25805
                                        //   in Loop: Header=BB0_125 Depth=2
	@%p204 bra 	LBB0_306;
// %bb.305:                             // %L25871
                                        //   in Loop: Header=BB0_125 Depth=2
	shl.b32 	%r2299, %r122, 9;
	or.b32  	%r2300, %r99, %r2299;
	add.s32 	%r2301, %r98, %r2300;
	mul.wide.u32 	%rd267, %r2301, 4;
	add.s64 	%rd80, %rd4, %rd267;
	st.global.u32 	[%rd80], %r213;
LBB0_306:                               // %L26024
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s32 	%r122, %r122, 1;
	mov.u32 	%r211, 0;
	mov.u32 	%r213, %r211;
LBB0_307:                               // %L26029
                                        //   in Loop: Header=BB0_125 Depth=2
	ld.shared.u32 	%r2307, [%rd72];
	ld.shared.u32 	%r2314, [%rd73];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2303, %r2304}, {%r565, %r568}, {%r2307}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2310, %r2311}, {%r565, %r568}, {%r2314}, {%r1347, %r1347};
	// end inline asm
	mov.u16 	%rs480, 2;
	mov.u32 	%r3782, 1145324612;
	@%p207 bra 	LBB0_312;
// %bb.308:                             // %L26925
                                        //   in Loop: Header=BB0_125 Depth=2
	and.b16  	%rs259, %rs2, 7;
	mov.u16 	%rs480, 2;
	add.s16 	%rs260, %rs259, -1;
	setp.lt.u16 	%p314, %rs260, 3;
	@%p314 bra 	LBB0_312;
// %bb.309:                             // %L26925
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s16 	%rs261, %rs259, -4;
	setp.lt.u16 	%p315, %rs261, 3;
	@%p315 bra 	LBB0_311;
// %bb.310:                             // %L26949
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u16 	%rs480, %rs1;
LBB0_311:                               // %L26960
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u32 	%r3782, -286331154;
LBB0_312:                               // %L26968
                                        //   in Loop: Header=BB0_125 Depth=2
	setp.eq.s16 	%p316, %rs480, 2;
	@%p316 bra 	LBB0_314;
	bra.uni 	LBB0_313;
LBB0_314:                               // %pass9556
                                        //   in Loop: Header=BB0_125 Depth=2
	// begin inline asm
	neg.f16x2 %r2317, %r602;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2319, %r2317, %r2304;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2335, %r602, %r2303;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2322, %r599, %r2303, %r2319;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2338, %r599, %r2304, %r2335;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2352, %r2353}, {%r641, %r644}, {%r2322, %r2338}, {%r1347, %r1347}, %r3782, 0;
	// end inline asm
	mov.u16 	%rs482, 2;
	mov.u32 	%r3783, 1145324612;
	@%p215 bra 	LBB0_315;
	bra.uni 	LBB0_319;
LBB0_315:                               // %L26999
                                        //   in Loop: Header=BB0_125 Depth=2
	and.b16  	%rs264, %rs2, 7;
	mov.u16 	%rs482, 2;
	add.s16 	%rs265, %rs264, -1;
	setp.lt.u16 	%p318, %rs265, 3;
	@%p318 bra 	LBB0_319;
// %bb.316:                             // %L26999
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s16 	%rs266, %rs264, -4;
	setp.lt.u16 	%p319, %rs266, 3;
	@%p319 bra 	LBB0_318;
// %bb.317:                             // %L27023
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u16 	%rs482, %rs1;
LBB0_318:                               // %L27034
                                        //   in Loop: Header=BB0_125 Depth=2
	mov.u32 	%r3783, -286331154;
LBB0_319:                               // %L27042
                                        //   in Loop: Header=BB0_125 Depth=2
	setp.eq.s16 	%p320, %rs482, 2;
	@%p320 bra 	LBB0_321;
	bra.uni 	LBB0_320;
LBB0_321:                               // %pass9568
                                        //   in Loop: Header=BB0_125 Depth=2
	// begin inline asm
	neg.f16x2 %r2326, %r602;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2328, %r2326, %r2311;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2342, %r602, %r2310;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2331, %r599, %r2310, %r2328;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2345, %r599, %r2311, %r2342;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2381, %r2385}, {%r641, %r644}, {%r2331, %r2345}, {%r1347, %r1347}, %r3783, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2373, %r2352, %r2352;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2376, %r2353, %r2353, %r2373;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2380, %r2381, %r2381, %r2376;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2384, %r2385, %r2385, %r2380;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r123, %r1738, %r2384, %r213;
	// end inline asm
	add.s32 	%r121, %r211, 1;
	setp.eq.s32 	%p321, %r121, 25;
	@%p321 bra 	LBB0_322;
	bra.uni 	LBB0_325;
LBB0_322:                               // %L27076
                                        //   in Loop: Header=BB0_125 Depth=2
	@%p204 bra 	LBB0_324;
// %bb.323:                             // %L27142
                                        //   in Loop: Header=BB0_125 Depth=2
	shl.b32 	%r2392, %r122, 9;
	or.b32  	%r2393, %r99, %r2392;
	add.s32 	%r2394, %r98, %r2393;
	mul.wide.u32 	%rd272, %r2394, 4;
	add.s64 	%rd81, %rd4, %rd272;
	st.global.u32 	[%rd81], %r123;
	bra.uni 	LBB0_324;
LBB0_326:                               // %L27319.preheader
                                        //   in Loop: Header=BB0_124 Depth=1
	mov.u32 	%r225, 16;
	bra.uni 	LBB0_327;
LBB0_526:                               // %L43317
                                        //   in Loop: Header=BB0_327 Depth=2
	add.s32 	%r122, %r122, 1;
	mov.u32 	%r121, %r1347;
	mov.u32 	%r123, %r1347;
LBB0_527:                               // %L43318
                                        //   in Loop: Header=BB0_327 Depth=2
	bar.sync 	0;
	add.s32 	%r225, %r225, -8;
	setp.ne.s32 	%p440, %r225, -16;
	@%p440 bra 	LBB0_327;
	bra.uni 	LBB0_528;
LBB0_327:                               // %L27319
                                        //   Parent Loop BB0_124 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p325, %r225, 16;
	selp.b32 	%r2790, %r104, 0, %p325;
	setp.eq.s32 	%p326, %r225, 8;
	selp.b32 	%r2791, %r108, %r2790, %p326;
	setp.eq.s32 	%p327, %r225, 0;
	selp.b32 	%r2792, %r112, %r2791, %p327;
	setp.eq.s32 	%p328, %r225, -8;
	selp.b32 	%r2793, %r116, %r2792, %p328;
	selp.b32 	%r2794, %r105, 0, %p325;
	selp.b32 	%r2795, %r109, %r2794, %p326;
	selp.b32 	%r2796, %r113, %r2795, %p327;
	selp.b32 	%r2797, %r117, %r2796, %p328;
	selp.b32 	%r2798, %r106, 0, %p325;
	selp.b32 	%r2799, %r110, %r2798, %p326;
	selp.b32 	%r2800, %r114, %r2799, %p327;
	selp.b32 	%r2801, %r118, %r2800, %p328;
	selp.b32 	%r2802, %r107, 0, %p325;
	selp.b32 	%r2803, %r111, %r2802, %p326;
	selp.b32 	%r2804, %r115, %r2803, %p327;
	selp.b32 	%r2805, %r119, %r2804, %p328;
	// begin inline asm
	mov.b32 %r2424, {%rs136, %rs136};
	// end inline asm
	// begin inline asm
	mov.b32 %r2435, {%rs138, %rs138};
	// end inline asm
	shr.u32 	%r2806, %r2793, 8;
	xor.b32  	%r2434, %r2806, 8947848;
	// begin inline asm
	lop3.b32 %r2421, %r1225, %r2434, %r2424, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2425, {%rs142, %rs142};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2426, %r2424, %r2425;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2429, %r2421, %r2426;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2432, %r1236, %r2434, %r2435, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2436, {%rs142, %rs142};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2437, %r2435, %r2436;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2440, %r2432, %r2437;
	// end inline asm
	// begin inline asm
	mov.b32 %r2470, {%rs136, %rs136};
	// end inline asm
	// begin inline asm
	mov.b32 %r2481, {%rs138, %rs138};
	// end inline asm
	shr.u32 	%r2807, %r2797, 8;
	xor.b32  	%r2480, %r2807, 8947848;
	// begin inline asm
	lop3.b32 %r2467, %r1225, %r2480, %r2470, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2471, {%rs142, %rs142};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2472, %r2470, %r2471;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2475, %r2467, %r2472;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2478, %r1236, %r2480, %r2481, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2482, {%rs142, %rs142};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2483, %r2481, %r2482;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2486, %r2478, %r2483;
	// end inline asm
	// begin inline asm
	mov.b32 %r2516, {%rs136, %rs136};
	// end inline asm
	// begin inline asm
	mov.b32 %r2527, {%rs138, %rs138};
	// end inline asm
	shr.u32 	%r2808, %r2801, 8;
	xor.b32  	%r2526, %r2808, 8947848;
	// begin inline asm
	lop3.b32 %r2513, %r1225, %r2526, %r2516, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2517, {%rs142, %rs142};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2518, %r2516, %r2517;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2521, %r2513, %r2518;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2524, %r1236, %r2526, %r2527, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2528, {%rs142, %rs142};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2529, %r2527, %r2528;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2532, %r2524, %r2529;
	// end inline asm
	// begin inline asm
	mov.b32 %r2562, {%rs136, %rs136};
	// end inline asm
	// begin inline asm
	mov.b32 %r2573, {%rs138, %rs138};
	// end inline asm
	shr.u32 	%r2809, %r2805, 8;
	xor.b32  	%r2572, %r2809, 8947848;
	// begin inline asm
	lop3.b32 %r2559, %r1225, %r2572, %r2562, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2563, {%rs142, %rs142};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2564, %r2562, %r2563;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2567, %r2559, %r2564;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2570, %r1236, %r2572, %r2573, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2574, {%rs142, %rs142};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2575, %r2573, %r2574;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2578, %r2570, %r2575;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r91;
    mov.b32 {%r2re, %r2im}, %r2429;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2581, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r92;
    mov.b32 {%r2re, %r2im}, %r2440;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2584, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r91;
    mov.b32 {%r2re, %r2im}, %r2475;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2587, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r92;
    mov.b32 {%r2re, %r2im}, %r2486;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2590, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r91;
    mov.b32 {%r2re, %r2im}, %r2521;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2593, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r92;
    mov.b32 {%r2re, %r2im}, %r2532;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2596, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r91;
    mov.b32 {%r2re, %r2im}, %r2567;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2599, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r92;
    mov.b32 {%r2re, %r2im}, %r2578;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2602, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2605, %r2606}, {%r469, %r472}, {%r2581}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2612, %r2613}, {%r469, %r472}, {%r2584}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2619, %r2620}, {%r469, %r472}, {%r2587}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2626, %r2627}, {%r469, %r472}, {%r2590}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2633, %r2634}, {%r469, %r472}, {%r2593}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2640, %r2641}, {%r469, %r472}, {%r2596}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2647, %r2648}, {%r469, %r472}, {%r2599}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2654, %r2655}, {%r469, %r472}, {%r2602}, {%r1347, %r1347};
	// end inline asm
	mov.u16 	%rs484, 2;
	mov.u32 	%r3791, 1145324612;
	@%p207 bra 	LBB0_332;
// %bb.328:                             // %L27869
                                        //   in Loop: Header=BB0_327 Depth=2
	and.b16  	%rs317, %rs2, 7;
	mov.u16 	%rs484, 2;
	add.s16 	%rs318, %rs317, -1;
	setp.lt.u16 	%p329, %rs318, 3;
	@%p329 bra 	LBB0_332;
// %bb.329:                             // %L27869
                                        //   in Loop: Header=BB0_327 Depth=2
	add.s16 	%rs319, %rs317, -4;
	setp.lt.u16 	%p330, %rs319, 3;
	@%p330 bra 	LBB0_331;
// %bb.330:                             // %L27893
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u16 	%rs484, %rs1;
LBB0_331:                               // %L27904
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u32 	%r3791, -286331154;
LBB0_332:                               // %L27912
                                        //   in Loop: Header=BB0_327 Depth=2
	setp.eq.s16 	%p331, %rs484, 2;
	@%p331 bra 	LBB0_334;
	bra.uni 	LBB0_333;
LBB0_334:                               // %pass9661
                                        //   in Loop: Header=BB0_327 Depth=2
	// begin inline asm
	neg.f16x2 %r2661, %r509;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2663, %r2661, %r2606;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2733, %r509, %r2605;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2666, %r506, %r2605, %r2663;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2736, %r506, %r2606, %r2733;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2812, %r2813}, {%r553, %r556}, {%r2666, %r2736}, {%r1347, %r1347}, %r3791, 0;
	// end inline asm
	mov.u16 	%rs486, 2;
	mov.u32 	%r3792, 1145324612;
	@%p215 bra 	LBB0_335;
	bra.uni 	LBB0_339;
LBB0_335:                               // %L27943
                                        //   in Loop: Header=BB0_327 Depth=2
	and.b16  	%rs322, %rs2, 7;
	mov.u16 	%rs486, 2;
	add.s16 	%rs323, %rs322, -1;
	setp.lt.u16 	%p333, %rs323, 3;
	@%p333 bra 	LBB0_339;
// %bb.336:                             // %L27943
                                        //   in Loop: Header=BB0_327 Depth=2
	add.s16 	%rs324, %rs322, -4;
	setp.lt.u16 	%p334, %rs324, 3;
	@%p334 bra 	LBB0_338;
// %bb.337:                             // %L27967
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u16 	%rs486, %rs1;
LBB0_338:                               // %L27978
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u32 	%r3792, -286331154;
LBB0_339:                               // %L27986
                                        //   in Loop: Header=BB0_327 Depth=2
	setp.eq.s16 	%p335, %rs486, 2;
	@%p335 bra 	LBB0_341;
	bra.uni 	LBB0_340;
LBB0_341:                               // %pass9673
                                        //   in Loop: Header=BB0_327 Depth=2
	// begin inline asm
	neg.f16x2 %r2670, %r509;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2672, %r2670, %r2613;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2740, %r509, %r2612;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2675, %r506, %r2612, %r2672;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2743, %r506, %r2613, %r2740;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2824, %r2825}, {%r553, %r556}, {%r2675, %r2743}, {%r1347, %r1347}, %r3792, 0;
	// end inline asm
	mov.u16 	%rs488, 2;
	mov.u32 	%r3793, 1145324612;
	@%p215 bra 	LBB0_342;
	bra.uni 	LBB0_346;
LBB0_342:                               // %L28017
                                        //   in Loop: Header=BB0_327 Depth=2
	and.b16  	%rs327, %rs2, 7;
	mov.u16 	%rs488, 2;
	add.s16 	%rs328, %rs327, -1;
	setp.lt.u16 	%p337, %rs328, 3;
	@%p337 bra 	LBB0_346;
// %bb.343:                             // %L28017
                                        //   in Loop: Header=BB0_327 Depth=2
	add.s16 	%rs329, %rs327, -4;
	setp.lt.u16 	%p338, %rs329, 3;
	@%p338 bra 	LBB0_345;
// %bb.344:                             // %L28041
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u16 	%rs488, %rs1;
LBB0_345:                               // %L28052
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u32 	%r3793, -286331154;
LBB0_346:                               // %L28060
                                        //   in Loop: Header=BB0_327 Depth=2
	setp.eq.s16 	%p339, %rs488, 2;
	@%p339 bra 	LBB0_348;
	bra.uni 	LBB0_347;
LBB0_348:                               // %pass9685
                                        //   in Loop: Header=BB0_327 Depth=2
	// begin inline asm
	neg.f16x2 %r2679, %r509;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2681, %r2679, %r2620;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2747, %r509, %r2619;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2684, %r506, %r2619, %r2681;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2750, %r506, %r2620, %r2747;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2836, %r2837}, {%r553, %r556}, {%r2684, %r2750}, {%r1347, %r1347}, %r3793, 0;
	// end inline asm
	mov.u16 	%rs490, 2;
	mov.u32 	%r3794, 1145324612;
	@%p215 bra 	LBB0_349;
	bra.uni 	LBB0_353;
LBB0_349:                               // %L28091
                                        //   in Loop: Header=BB0_327 Depth=2
	and.b16  	%rs332, %rs2, 7;
	mov.u16 	%rs490, 2;
	add.s16 	%rs333, %rs332, -1;
	setp.lt.u16 	%p341, %rs333, 3;
	@%p341 bra 	LBB0_353;
// %bb.350:                             // %L28091
                                        //   in Loop: Header=BB0_327 Depth=2
	add.s16 	%rs334, %rs332, -4;
	setp.lt.u16 	%p342, %rs334, 3;
	@%p342 bra 	LBB0_352;
// %bb.351:                             // %L28115
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u16 	%rs490, %rs1;
LBB0_352:                               // %L28126
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u32 	%r3794, -286331154;
LBB0_353:                               // %L28134
                                        //   in Loop: Header=BB0_327 Depth=2
	setp.eq.s16 	%p343, %rs490, 2;
	@%p343 bra 	LBB0_355;
	bra.uni 	LBB0_354;
LBB0_355:                               // %pass9697
                                        //   in Loop: Header=BB0_327 Depth=2
	// begin inline asm
	neg.f16x2 %r2688, %r509;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2690, %r2688, %r2627;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2754, %r509, %r2626;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2693, %r506, %r2626, %r2690;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2757, %r506, %r2627, %r2754;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2848, %r2849}, {%r553, %r556}, {%r2693, %r2757}, {%r1347, %r1347}, %r3794, 0;
	// end inline asm
	mov.u16 	%rs492, 2;
	mov.u32 	%r3795, 1145324612;
	@%p215 bra 	LBB0_356;
	bra.uni 	LBB0_360;
LBB0_356:                               // %L28165
                                        //   in Loop: Header=BB0_327 Depth=2
	and.b16  	%rs337, %rs2, 7;
	mov.u16 	%rs492, 2;
	add.s16 	%rs338, %rs337, -1;
	setp.lt.u16 	%p345, %rs338, 3;
	@%p345 bra 	LBB0_360;
// %bb.357:                             // %L28165
                                        //   in Loop: Header=BB0_327 Depth=2
	add.s16 	%rs339, %rs337, -4;
	setp.lt.u16 	%p346, %rs339, 3;
	@%p346 bra 	LBB0_359;
// %bb.358:                             // %L28189
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u16 	%rs492, %rs1;
LBB0_359:                               // %L28200
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u32 	%r3795, -286331154;
LBB0_360:                               // %L28208
                                        //   in Loop: Header=BB0_327 Depth=2
	setp.eq.s16 	%p347, %rs492, 2;
	@%p347 bra 	LBB0_362;
	bra.uni 	LBB0_361;
LBB0_362:                               // %pass9709
                                        //   in Loop: Header=BB0_327 Depth=2
	// begin inline asm
	neg.f16x2 %r2697, %r509;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2699, %r2697, %r2634;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2761, %r509, %r2633;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2702, %r506, %r2633, %r2699;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2764, %r506, %r2634, %r2761;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2860, %r2861}, {%r553, %r556}, {%r2702, %r2764}, {%r1347, %r1347}, %r3795, 0;
	// end inline asm
	mov.u16 	%rs494, 2;
	mov.u32 	%r3796, 1145324612;
	@%p215 bra 	LBB0_363;
	bra.uni 	LBB0_367;
LBB0_363:                               // %L28239
                                        //   in Loop: Header=BB0_327 Depth=2
	and.b16  	%rs342, %rs2, 7;
	mov.u16 	%rs494, 2;
	add.s16 	%rs343, %rs342, -1;
	setp.lt.u16 	%p349, %rs343, 3;
	@%p349 bra 	LBB0_367;
// %bb.364:                             // %L28239
                                        //   in Loop: Header=BB0_327 Depth=2
	add.s16 	%rs344, %rs342, -4;
	setp.lt.u16 	%p350, %rs344, 3;
	@%p350 bra 	LBB0_366;
// %bb.365:                             // %L28263
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u16 	%rs494, %rs1;
LBB0_366:                               // %L28274
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u32 	%r3796, -286331154;
LBB0_367:                               // %L28282
                                        //   in Loop: Header=BB0_327 Depth=2
	setp.eq.s16 	%p351, %rs494, 2;
	@%p351 bra 	LBB0_369;
	bra.uni 	LBB0_368;
LBB0_369:                               // %pass9721
                                        //   in Loop: Header=BB0_327 Depth=2
	// begin inline asm
	neg.f16x2 %r2706, %r509;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2708, %r2706, %r2641;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2768, %r509, %r2640;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2711, %r506, %r2640, %r2708;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2771, %r506, %r2641, %r2768;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2872, %r2873}, {%r553, %r556}, {%r2711, %r2771}, {%r1347, %r1347}, %r3796, 0;
	// end inline asm
	mov.u16 	%rs496, 2;
	mov.u32 	%r3797, 1145324612;
	@%p215 bra 	LBB0_370;
	bra.uni 	LBB0_374;
LBB0_370:                               // %L28313
                                        //   in Loop: Header=BB0_327 Depth=2
	and.b16  	%rs347, %rs2, 7;
	mov.u16 	%rs496, 2;
	add.s16 	%rs348, %rs347, -1;
	setp.lt.u16 	%p353, %rs348, 3;
	@%p353 bra 	LBB0_374;
// %bb.371:                             // %L28313
                                        //   in Loop: Header=BB0_327 Depth=2
	add.s16 	%rs349, %rs347, -4;
	setp.lt.u16 	%p354, %rs349, 3;
	@%p354 bra 	LBB0_373;
// %bb.372:                             // %L28337
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u16 	%rs496, %rs1;
LBB0_373:                               // %L28348
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u32 	%r3797, -286331154;
LBB0_374:                               // %L28356
                                        //   in Loop: Header=BB0_327 Depth=2
	setp.eq.s16 	%p355, %rs496, 2;
	@%p355 bra 	LBB0_376;
	bra.uni 	LBB0_375;
LBB0_376:                               // %pass9733
                                        //   in Loop: Header=BB0_327 Depth=2
	// begin inline asm
	neg.f16x2 %r2715, %r509;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2717, %r2715, %r2648;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2775, %r509, %r2647;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2720, %r506, %r2647, %r2717;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2778, %r506, %r2648, %r2775;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2884, %r2885}, {%r553, %r556}, {%r2720, %r2778}, {%r1347, %r1347}, %r3797, 0;
	// end inline asm
	mov.u16 	%rs498, 2;
	mov.u32 	%r3798, 1145324612;
	@%p215 bra 	LBB0_377;
	bra.uni 	LBB0_381;
LBB0_377:                               // %L28387
                                        //   in Loop: Header=BB0_327 Depth=2
	and.b16  	%rs352, %rs2, 7;
	mov.u16 	%rs498, 2;
	add.s16 	%rs353, %rs352, -1;
	setp.lt.u16 	%p357, %rs353, 3;
	@%p357 bra 	LBB0_381;
// %bb.378:                             // %L28387
                                        //   in Loop: Header=BB0_327 Depth=2
	add.s16 	%rs354, %rs352, -4;
	setp.lt.u16 	%p358, %rs354, 3;
	@%p358 bra 	LBB0_380;
// %bb.379:                             // %L28411
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u16 	%rs498, %rs1;
LBB0_380:                               // %L28422
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u32 	%r3798, -286331154;
LBB0_381:                               // %L28430
                                        //   in Loop: Header=BB0_327 Depth=2
	setp.eq.s16 	%p359, %rs498, 2;
	@%p359 bra 	LBB0_383;
	bra.uni 	LBB0_382;
LBB0_383:                               // %pass9745
                                        //   in Loop: Header=BB0_327 Depth=2
	// begin inline asm
	neg.f16x2 %r2724, %r509;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2726, %r2724, %r2655;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2782, %r509, %r2654;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2729, %r506, %r2654, %r2726;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2785, %r506, %r2655, %r2782;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2962, %r2963}, {%r553, %r556}, {%r2729, %r2785}, {%r1347, %r1347}, %r3798, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2905, %r2812, %r2813, %r986;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2909, %r2812, %r2813, %r990;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2913, %r2824, %r2825, %r986;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2917, %r2824, %r2825, %r990;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2921, %r2836, %r2837, %r986;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2925, %r2836, %r2837, %r990;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2929, %r2848, %r2849, %r986;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2933, %r2848, %r2849, %r990;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2937, %r2860, %r2861, %r986;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2941, %r2860, %r2861, %r990;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2945, %r2872, %r2873, %r986;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2949, %r2872, %r2873, %r990;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2953, %r2884, %r2885, %r986;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2957, %r2884, %r2885, %r990;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2961, %r2962, %r2963, %r986;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2965, %r2962, %r2963, %r990;
	// end inline asm
	st.shared.u32 	[%rd42], %r2905;
	st.shared.u32 	[%rd43], %r2909;
	st.shared.u32 	[%rd44], %r2913;
	st.shared.u32 	[%rd45], %r2917;
	st.shared.u32 	[%rd46], %r2921;
	st.shared.u32 	[%rd47], %r2925;
	st.shared.u32 	[%rd48], %r2929;
	st.shared.u32 	[%rd49], %r2933;
	st.shared.u32 	[%rd50], %r2937;
	st.shared.u32 	[%rd51], %r2941;
	st.shared.u32 	[%rd52], %r2945;
	st.shared.u32 	[%rd53], %r2949;
	st.shared.u32 	[%rd54], %r2953;
	st.shared.u32 	[%rd55], %r2957;
	st.shared.u32 	[%rd56], %r2961;
	st.shared.u32 	[%rd57], %r2965;
	bar.sync 	0;
	ld.shared.u32 	%r2973, [%rd58];
	ld.shared.u32 	%r2980, [%rd59];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2969, %r2970}, {%r565, %r568}, {%r2973}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2976, %r2977}, {%r565, %r568}, {%r2980}, {%r1347, %r1347};
	// end inline asm
	mov.u16 	%rs500, 2;
	mov.u32 	%r3799, 1145324612;
	@%p215 bra 	LBB0_384;
	bra.uni 	LBB0_388;
LBB0_384:                               // %L34050
                                        //   in Loop: Header=BB0_327 Depth=2
	and.b16  	%rs357, %rs2, 7;
	mov.u16 	%rs500, 2;
	add.s16 	%rs358, %rs357, -1;
	setp.lt.u16 	%p361, %rs358, 3;
	@%p361 bra 	LBB0_388;
// %bb.385:                             // %L34050
                                        //   in Loop: Header=BB0_327 Depth=2
	add.s16 	%rs359, %rs357, -4;
	setp.lt.u16 	%p362, %rs359, 3;
	@%p362 bra 	LBB0_387;
// %bb.386:                             // %L34074
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u16 	%rs500, %rs1;
LBB0_387:                               // %L34085
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u32 	%r3799, -286331154;
LBB0_388:                               // %L34093
                                        //   in Loop: Header=BB0_327 Depth=2
	setp.eq.s16 	%p363, %rs500, 2;
	@%p363 bra 	LBB0_390;
	bra.uni 	LBB0_389;
LBB0_390:                               // %pass12061
                                        //   in Loop: Header=BB0_327 Depth=2
	// begin inline asm
	neg.f16x2 %r2983, %r602;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2985, %r2983, %r2970;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3001, %r602, %r2969;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2988, %r599, %r2969, %r2985;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3004, %r599, %r2970, %r3001;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3018, %r3019}, {%r641, %r644}, {%r2988, %r3004}, {%r1347, %r1347}, %r3799, 0;
	// end inline asm
	mov.u16 	%rs502, 2;
	mov.u32 	%r3800, 1145324612;
	@%p215 bra 	LBB0_391;
	bra.uni 	LBB0_395;
LBB0_391:                               // %L34124
                                        //   in Loop: Header=BB0_327 Depth=2
	and.b16  	%rs362, %rs2, 7;
	mov.u16 	%rs502, 2;
	add.s16 	%rs363, %rs362, -1;
	setp.lt.u16 	%p365, %rs363, 3;
	@%p365 bra 	LBB0_395;
// %bb.392:                             // %L34124
                                        //   in Loop: Header=BB0_327 Depth=2
	add.s16 	%rs364, %rs362, -4;
	setp.lt.u16 	%p366, %rs364, 3;
	@%p366 bra 	LBB0_394;
// %bb.393:                             // %L34148
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u16 	%rs502, %rs1;
LBB0_394:                               // %L34159
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u32 	%r3800, -286331154;
LBB0_395:                               // %L34167
                                        //   in Loop: Header=BB0_327 Depth=2
	setp.eq.s16 	%p367, %rs502, 2;
	@%p367 bra 	LBB0_397;
	bra.uni 	LBB0_396;
LBB0_397:                               // %pass12073
                                        //   in Loop: Header=BB0_327 Depth=2
	// begin inline asm
	neg.f16x2 %r2992, %r602;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2994, %r2992, %r2977;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3008, %r602, %r2976;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2997, %r599, %r2976, %r2994;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3011, %r599, %r2977, %r3008;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3047, %r3051}, {%r641, %r644}, {%r2997, %r3011}, {%r1347, %r1347}, %r3800, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3039, %r3018, %r3018;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3042, %r3019, %r3019, %r3039;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3046, %r3047, %r3047, %r3042;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3050, %r3051, %r3051, %r3046;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r258, %r1738, %r3050, %r123;
	// end inline asm
	add.s32 	%r256, %r121, 1;
	setp.eq.s32 	%p368, %r256, 25;
	@%p368 bra 	LBB0_398;
	bra.uni 	LBB0_401;
LBB0_398:                               // %L34201
                                        //   in Loop: Header=BB0_327 Depth=2
	@%p204 bra 	LBB0_400;
// %bb.399:                             // %L34267
                                        //   in Loop: Header=BB0_327 Depth=2
	shl.b32 	%r3058, %r122, 9;
	or.b32  	%r3059, %r99, %r3058;
	add.s32 	%r3060, %r98, %r3059;
	mul.wide.u32 	%rd293, %r3060, 4;
	add.s64 	%rd82, %rd4, %rd293;
	st.global.u32 	[%rd82], %r258;
LBB0_400:                               // %L34420
                                        //   in Loop: Header=BB0_327 Depth=2
	add.s32 	%r122, %r122, 1;
	mov.u32 	%r256, 0;
	mov.u32 	%r258, %r256;
LBB0_401:                               // %L34425
                                        //   in Loop: Header=BB0_327 Depth=2
	ld.shared.u32 	%r3066, [%rd60];
	ld.shared.u32 	%r3073, [%rd61];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3062, %r3063}, {%r565, %r568}, {%r3066}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3069, %r3070}, {%r565, %r568}, {%r3073}, {%r1347, %r1347};
	// end inline asm
	mov.u16 	%rs504, 2;
	mov.u32 	%r3804, 1145324612;
	@%p207 bra 	LBB0_406;
// %bb.402:                             // %L35321
                                        //   in Loop: Header=BB0_327 Depth=2
	and.b16  	%rs367, %rs2, 7;
	mov.u16 	%rs504, 2;
	add.s16 	%rs368, %rs367, -1;
	setp.lt.u16 	%p371, %rs368, 3;
	@%p371 bra 	LBB0_406;
// %bb.403:                             // %L35321
                                        //   in Loop: Header=BB0_327 Depth=2
	add.s16 	%rs369, %rs367, -4;
	setp.lt.u16 	%p372, %rs369, 3;
	@%p372 bra 	LBB0_405;
// %bb.404:                             // %L35345
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u16 	%rs504, %rs1;
LBB0_405:                               // %L35356
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u32 	%r3804, -286331154;
LBB0_406:                               // %L35364
                                        //   in Loop: Header=BB0_327 Depth=2
	setp.eq.s16 	%p373, %rs504, 2;
	@%p373 bra 	LBB0_408;
	bra.uni 	LBB0_407;
LBB0_408:                               // %pass12489
                                        //   in Loop: Header=BB0_327 Depth=2
	// begin inline asm
	neg.f16x2 %r3076, %r602;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3078, %r3076, %r3063;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3094, %r602, %r3062;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3081, %r599, %r3062, %r3078;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3097, %r599, %r3063, %r3094;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3111, %r3112}, {%r641, %r644}, {%r3081, %r3097}, {%r1347, %r1347}, %r3804, 0;
	// end inline asm
	mov.u16 	%rs506, 2;
	mov.u32 	%r3805, 1145324612;
	@%p215 bra 	LBB0_409;
	bra.uni 	LBB0_413;
LBB0_409:                               // %L35395
                                        //   in Loop: Header=BB0_327 Depth=2
	and.b16  	%rs372, %rs2, 7;
	mov.u16 	%rs506, 2;
	add.s16 	%rs373, %rs372, -1;
	setp.lt.u16 	%p375, %rs373, 3;
	@%p375 bra 	LBB0_413;
// %bb.410:                             // %L35395
                                        //   in Loop: Header=BB0_327 Depth=2
	add.s16 	%rs374, %rs372, -4;
	setp.lt.u16 	%p376, %rs374, 3;
	@%p376 bra 	LBB0_412;
// %bb.411:                             // %L35419
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u16 	%rs506, %rs1;
LBB0_412:                               // %L35430
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u32 	%r3805, -286331154;
LBB0_413:                               // %L35438
                                        //   in Loop: Header=BB0_327 Depth=2
	setp.eq.s16 	%p377, %rs506, 2;
	@%p377 bra 	LBB0_415;
	bra.uni 	LBB0_414;
LBB0_415:                               // %pass12501
                                        //   in Loop: Header=BB0_327 Depth=2
	// begin inline asm
	neg.f16x2 %r3085, %r602;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3087, %r3085, %r3070;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3101, %r602, %r3069;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3090, %r599, %r3069, %r3087;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3104, %r599, %r3070, %r3101;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3140, %r3144}, {%r641, %r644}, {%r3090, %r3104}, {%r1347, %r1347}, %r3805, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3132, %r3111, %r3111;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3135, %r3112, %r3112, %r3132;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3139, %r3140, %r3140, %r3135;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3143, %r3144, %r3144, %r3139;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r268, %r1738, %r3143, %r258;
	// end inline asm
	add.s32 	%r266, %r256, 1;
	setp.eq.s32 	%p378, %r266, 25;
	@%p378 bra 	LBB0_416;
	bra.uni 	LBB0_419;
LBB0_416:                               // %L35472
                                        //   in Loop: Header=BB0_327 Depth=2
	@%p204 bra 	LBB0_418;
// %bb.417:                             // %L35538
                                        //   in Loop: Header=BB0_327 Depth=2
	shl.b32 	%r3151, %r122, 9;
	or.b32  	%r3152, %r99, %r3151;
	add.s32 	%r3153, %r98, %r3152;
	mul.wide.u32 	%rd298, %r3153, 4;
	add.s64 	%rd83, %rd4, %rd298;
	st.global.u32 	[%rd83], %r268;
LBB0_418:                               // %L35691
                                        //   in Loop: Header=BB0_327 Depth=2
	add.s32 	%r122, %r122, 1;
	mov.u32 	%r266, 0;
	mov.u32 	%r268, %r266;
LBB0_419:                               // %L35696
                                        //   in Loop: Header=BB0_327 Depth=2
	ld.shared.u32 	%r3159, [%rd62];
	ld.shared.u32 	%r3166, [%rd63];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3155, %r3156}, {%r565, %r568}, {%r3159}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3162, %r3163}, {%r565, %r568}, {%r3166}, {%r1347, %r1347};
	// end inline asm
	mov.u16 	%rs508, 2;
	mov.u32 	%r3809, 1145324612;
	@%p207 bra 	LBB0_424;
// %bb.420:                             // %L36592
                                        //   in Loop: Header=BB0_327 Depth=2
	and.b16  	%rs377, %rs2, 7;
	mov.u16 	%rs508, 2;
	add.s16 	%rs378, %rs377, -1;
	setp.lt.u16 	%p381, %rs378, 3;
	@%p381 bra 	LBB0_424;
// %bb.421:                             // %L36592
                                        //   in Loop: Header=BB0_327 Depth=2
	add.s16 	%rs379, %rs377, -4;
	setp.lt.u16 	%p382, %rs379, 3;
	@%p382 bra 	LBB0_423;
// %bb.422:                             // %L36616
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u16 	%rs508, %rs1;
LBB0_423:                               // %L36627
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u32 	%r3809, -286331154;
LBB0_424:                               // %L36635
                                        //   in Loop: Header=BB0_327 Depth=2
	setp.eq.s16 	%p383, %rs508, 2;
	@%p383 bra 	LBB0_426;
	bra.uni 	LBB0_425;
LBB0_426:                               // %pass12917
                                        //   in Loop: Header=BB0_327 Depth=2
	// begin inline asm
	neg.f16x2 %r3169, %r602;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3171, %r3169, %r3156;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3187, %r602, %r3155;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3174, %r599, %r3155, %r3171;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3190, %r599, %r3156, %r3187;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3204, %r3205}, {%r641, %r644}, {%r3174, %r3190}, {%r1347, %r1347}, %r3809, 0;
	// end inline asm
	mov.u16 	%rs510, 2;
	mov.u32 	%r3810, 1145324612;
	@%p215 bra 	LBB0_427;
	bra.uni 	LBB0_431;
LBB0_427:                               // %L36666
                                        //   in Loop: Header=BB0_327 Depth=2
	and.b16  	%rs382, %rs2, 7;
	mov.u16 	%rs510, 2;
	add.s16 	%rs383, %rs382, -1;
	setp.lt.u16 	%p385, %rs383, 3;
	@%p385 bra 	LBB0_431;
// %bb.428:                             // %L36666
                                        //   in Loop: Header=BB0_327 Depth=2
	add.s16 	%rs384, %rs382, -4;
	setp.lt.u16 	%p386, %rs384, 3;
	@%p386 bra 	LBB0_430;
// %bb.429:                             // %L36690
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u16 	%rs510, %rs1;
LBB0_430:                               // %L36701
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u32 	%r3810, -286331154;
LBB0_431:                               // %L36709
                                        //   in Loop: Header=BB0_327 Depth=2
	setp.eq.s16 	%p387, %rs510, 2;
	@%p387 bra 	LBB0_433;
	bra.uni 	LBB0_432;
LBB0_433:                               // %pass12929
                                        //   in Loop: Header=BB0_327 Depth=2
	// begin inline asm
	neg.f16x2 %r3178, %r602;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3180, %r3178, %r3163;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3194, %r602, %r3162;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3183, %r599, %r3162, %r3180;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3197, %r599, %r3163, %r3194;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3233, %r3237}, {%r641, %r644}, {%r3183, %r3197}, {%r1347, %r1347}, %r3810, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3225, %r3204, %r3204;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3228, %r3205, %r3205, %r3225;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3232, %r3233, %r3233, %r3228;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3236, %r3237, %r3237, %r3232;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r278, %r1738, %r3236, %r268;
	// end inline asm
	add.s32 	%r276, %r266, 1;
	setp.eq.s32 	%p388, %r276, 25;
	@%p388 bra 	LBB0_434;
	bra.uni 	LBB0_437;
LBB0_434:                               // %L36743
                                        //   in Loop: Header=BB0_327 Depth=2
	@%p204 bra 	LBB0_436;
// %bb.435:                             // %L36809
                                        //   in Loop: Header=BB0_327 Depth=2
	shl.b32 	%r3244, %r122, 9;
	or.b32  	%r3245, %r99, %r3244;
	add.s32 	%r3246, %r98, %r3245;
	mul.wide.u32 	%rd303, %r3246, 4;
	add.s64 	%rd84, %rd4, %rd303;
	st.global.u32 	[%rd84], %r278;
LBB0_436:                               // %L36962
                                        //   in Loop: Header=BB0_327 Depth=2
	add.s32 	%r122, %r122, 1;
	mov.u32 	%r276, 0;
	mov.u32 	%r278, %r276;
LBB0_437:                               // %L36967
                                        //   in Loop: Header=BB0_327 Depth=2
	ld.shared.u32 	%r3252, [%rd64];
	ld.shared.u32 	%r3259, [%rd65];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3248, %r3249}, {%r565, %r568}, {%r3252}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3255, %r3256}, {%r565, %r568}, {%r3259}, {%r1347, %r1347};
	// end inline asm
	mov.u16 	%rs512, 2;
	mov.u32 	%r3814, 1145324612;
	@%p207 bra 	LBB0_442;
// %bb.438:                             // %L37863
                                        //   in Loop: Header=BB0_327 Depth=2
	and.b16  	%rs387, %rs2, 7;
	mov.u16 	%rs512, 2;
	add.s16 	%rs388, %rs387, -1;
	setp.lt.u16 	%p391, %rs388, 3;
	@%p391 bra 	LBB0_442;
// %bb.439:                             // %L37863
                                        //   in Loop: Header=BB0_327 Depth=2
	add.s16 	%rs389, %rs387, -4;
	setp.lt.u16 	%p392, %rs389, 3;
	@%p392 bra 	LBB0_441;
// %bb.440:                             // %L37887
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u16 	%rs512, %rs1;
LBB0_441:                               // %L37898
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u32 	%r3814, -286331154;
LBB0_442:                               // %L37906
                                        //   in Loop: Header=BB0_327 Depth=2
	setp.eq.s16 	%p393, %rs512, 2;
	@%p393 bra 	LBB0_444;
	bra.uni 	LBB0_443;
LBB0_444:                               // %pass13345
                                        //   in Loop: Header=BB0_327 Depth=2
	// begin inline asm
	neg.f16x2 %r3262, %r602;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3264, %r3262, %r3249;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3280, %r602, %r3248;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3267, %r599, %r3248, %r3264;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3283, %r599, %r3249, %r3280;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3297, %r3298}, {%r641, %r644}, {%r3267, %r3283}, {%r1347, %r1347}, %r3814, 0;
	// end inline asm
	mov.u16 	%rs514, 2;
	mov.u32 	%r3815, 1145324612;
	@%p215 bra 	LBB0_445;
	bra.uni 	LBB0_449;
LBB0_445:                               // %L37937
                                        //   in Loop: Header=BB0_327 Depth=2
	and.b16  	%rs392, %rs2, 7;
	mov.u16 	%rs514, 2;
	add.s16 	%rs393, %rs392, -1;
	setp.lt.u16 	%p395, %rs393, 3;
	@%p395 bra 	LBB0_449;
// %bb.446:                             // %L37937
                                        //   in Loop: Header=BB0_327 Depth=2
	add.s16 	%rs394, %rs392, -4;
	setp.lt.u16 	%p396, %rs394, 3;
	@%p396 bra 	LBB0_448;
// %bb.447:                             // %L37961
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u16 	%rs514, %rs1;
LBB0_448:                               // %L37972
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u32 	%r3815, -286331154;
LBB0_449:                               // %L37980
                                        //   in Loop: Header=BB0_327 Depth=2
	setp.eq.s16 	%p397, %rs514, 2;
	@%p397 bra 	LBB0_451;
	bra.uni 	LBB0_450;
LBB0_451:                               // %pass13357
                                        //   in Loop: Header=BB0_327 Depth=2
	// begin inline asm
	neg.f16x2 %r3271, %r602;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3273, %r3271, %r3256;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3287, %r602, %r3255;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3276, %r599, %r3255, %r3273;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3290, %r599, %r3256, %r3287;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3326, %r3330}, {%r641, %r644}, {%r3276, %r3290}, {%r1347, %r1347}, %r3815, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3318, %r3297, %r3297;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3321, %r3298, %r3298, %r3318;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3325, %r3326, %r3326, %r3321;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3329, %r3330, %r3330, %r3325;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r288, %r1738, %r3329, %r278;
	// end inline asm
	add.s32 	%r286, %r276, 1;
	setp.eq.s32 	%p398, %r286, 25;
	@%p398 bra 	LBB0_452;
	bra.uni 	LBB0_455;
LBB0_452:                               // %L38014
                                        //   in Loop: Header=BB0_327 Depth=2
	@%p204 bra 	LBB0_454;
// %bb.453:                             // %L38080
                                        //   in Loop: Header=BB0_327 Depth=2
	shl.b32 	%r3337, %r122, 9;
	or.b32  	%r3338, %r99, %r3337;
	add.s32 	%r3339, %r98, %r3338;
	mul.wide.u32 	%rd308, %r3339, 4;
	add.s64 	%rd85, %rd4, %rd308;
	st.global.u32 	[%rd85], %r288;
LBB0_454:                               // %L38233
                                        //   in Loop: Header=BB0_327 Depth=2
	add.s32 	%r122, %r122, 1;
	mov.u32 	%r286, 0;
	mov.u32 	%r288, %r286;
LBB0_455:                               // %L38238
                                        //   in Loop: Header=BB0_327 Depth=2
	ld.shared.u32 	%r3345, [%rd66];
	ld.shared.u32 	%r3352, [%rd67];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3341, %r3342}, {%r565, %r568}, {%r3345}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3348, %r3349}, {%r565, %r568}, {%r3352}, {%r1347, %r1347};
	// end inline asm
	mov.u16 	%rs516, 2;
	mov.u32 	%r3819, 1145324612;
	@%p207 bra 	LBB0_460;
// %bb.456:                             // %L39134
                                        //   in Loop: Header=BB0_327 Depth=2
	and.b16  	%rs397, %rs2, 7;
	mov.u16 	%rs516, 2;
	add.s16 	%rs398, %rs397, -1;
	setp.lt.u16 	%p401, %rs398, 3;
	@%p401 bra 	LBB0_460;
// %bb.457:                             // %L39134
                                        //   in Loop: Header=BB0_327 Depth=2
	add.s16 	%rs399, %rs397, -4;
	setp.lt.u16 	%p402, %rs399, 3;
	@%p402 bra 	LBB0_459;
// %bb.458:                             // %L39158
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u16 	%rs516, %rs1;
LBB0_459:                               // %L39169
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u32 	%r3819, -286331154;
LBB0_460:                               // %L39177
                                        //   in Loop: Header=BB0_327 Depth=2
	setp.eq.s16 	%p403, %rs516, 2;
	@%p403 bra 	LBB0_462;
	bra.uni 	LBB0_461;
LBB0_462:                               // %pass13773
                                        //   in Loop: Header=BB0_327 Depth=2
	// begin inline asm
	neg.f16x2 %r3355, %r602;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3357, %r3355, %r3342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3373, %r602, %r3341;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3360, %r599, %r3341, %r3357;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3376, %r599, %r3342, %r3373;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3390, %r3391}, {%r641, %r644}, {%r3360, %r3376}, {%r1347, %r1347}, %r3819, 0;
	// end inline asm
	mov.u16 	%rs518, 2;
	mov.u32 	%r3820, 1145324612;
	@%p215 bra 	LBB0_463;
	bra.uni 	LBB0_467;
LBB0_463:                               // %L39208
                                        //   in Loop: Header=BB0_327 Depth=2
	and.b16  	%rs402, %rs2, 7;
	mov.u16 	%rs518, 2;
	add.s16 	%rs403, %rs402, -1;
	setp.lt.u16 	%p405, %rs403, 3;
	@%p405 bra 	LBB0_467;
// %bb.464:                             // %L39208
                                        //   in Loop: Header=BB0_327 Depth=2
	add.s16 	%rs404, %rs402, -4;
	setp.lt.u16 	%p406, %rs404, 3;
	@%p406 bra 	LBB0_466;
// %bb.465:                             // %L39232
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u16 	%rs518, %rs1;
LBB0_466:                               // %L39243
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u32 	%r3820, -286331154;
LBB0_467:                               // %L39251
                                        //   in Loop: Header=BB0_327 Depth=2
	setp.eq.s16 	%p407, %rs518, 2;
	@%p407 bra 	LBB0_469;
	bra.uni 	LBB0_468;
LBB0_469:                               // %pass13785
                                        //   in Loop: Header=BB0_327 Depth=2
	// begin inline asm
	neg.f16x2 %r3364, %r602;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3366, %r3364, %r3349;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3380, %r602, %r3348;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3369, %r599, %r3348, %r3366;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3383, %r599, %r3349, %r3380;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3419, %r3423}, {%r641, %r644}, {%r3369, %r3383}, {%r1347, %r1347}, %r3820, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3411, %r3390, %r3390;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3414, %r3391, %r3391, %r3411;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3418, %r3419, %r3419, %r3414;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3422, %r3423, %r3423, %r3418;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r298, %r1738, %r3422, %r288;
	// end inline asm
	add.s32 	%r296, %r286, 1;
	setp.eq.s32 	%p408, %r296, 25;
	@%p408 bra 	LBB0_470;
	bra.uni 	LBB0_473;
LBB0_470:                               // %L39285
                                        //   in Loop: Header=BB0_327 Depth=2
	@%p204 bra 	LBB0_472;
// %bb.471:                             // %L39351
                                        //   in Loop: Header=BB0_327 Depth=2
	shl.b32 	%r3430, %r122, 9;
	or.b32  	%r3431, %r99, %r3430;
	add.s32 	%r3432, %r98, %r3431;
	mul.wide.u32 	%rd313, %r3432, 4;
	add.s64 	%rd86, %rd4, %rd313;
	st.global.u32 	[%rd86], %r298;
LBB0_472:                               // %L39504
                                        //   in Loop: Header=BB0_327 Depth=2
	add.s32 	%r122, %r122, 1;
	mov.u32 	%r296, 0;
	mov.u32 	%r298, %r296;
LBB0_473:                               // %L39509
                                        //   in Loop: Header=BB0_327 Depth=2
	ld.shared.u32 	%r3438, [%rd68];
	ld.shared.u32 	%r3445, [%rd69];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3434, %r3435}, {%r565, %r568}, {%r3438}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3441, %r3442}, {%r565, %r568}, {%r3445}, {%r1347, %r1347};
	// end inline asm
	mov.u16 	%rs520, 2;
	mov.u32 	%r3824, 1145324612;
	@%p207 bra 	LBB0_478;
// %bb.474:                             // %L40405
                                        //   in Loop: Header=BB0_327 Depth=2
	and.b16  	%rs407, %rs2, 7;
	mov.u16 	%rs520, 2;
	add.s16 	%rs408, %rs407, -1;
	setp.lt.u16 	%p411, %rs408, 3;
	@%p411 bra 	LBB0_478;
// %bb.475:                             // %L40405
                                        //   in Loop: Header=BB0_327 Depth=2
	add.s16 	%rs409, %rs407, -4;
	setp.lt.u16 	%p412, %rs409, 3;
	@%p412 bra 	LBB0_477;
// %bb.476:                             // %L40429
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u16 	%rs520, %rs1;
LBB0_477:                               // %L40440
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u32 	%r3824, -286331154;
LBB0_478:                               // %L40448
                                        //   in Loop: Header=BB0_327 Depth=2
	setp.eq.s16 	%p413, %rs520, 2;
	@%p413 bra 	LBB0_480;
	bra.uni 	LBB0_479;
LBB0_480:                               // %pass14201
                                        //   in Loop: Header=BB0_327 Depth=2
	// begin inline asm
	neg.f16x2 %r3448, %r602;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3450, %r3448, %r3435;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3466, %r602, %r3434;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3453, %r599, %r3434, %r3450;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3469, %r599, %r3435, %r3466;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3483, %r3484}, {%r641, %r644}, {%r3453, %r3469}, {%r1347, %r1347}, %r3824, 0;
	// end inline asm
	mov.u16 	%rs522, 2;
	mov.u32 	%r3825, 1145324612;
	@%p215 bra 	LBB0_481;
	bra.uni 	LBB0_485;
LBB0_481:                               // %L40479
                                        //   in Loop: Header=BB0_327 Depth=2
	and.b16  	%rs412, %rs2, 7;
	mov.u16 	%rs522, 2;
	add.s16 	%rs413, %rs412, -1;
	setp.lt.u16 	%p415, %rs413, 3;
	@%p415 bra 	LBB0_485;
// %bb.482:                             // %L40479
                                        //   in Loop: Header=BB0_327 Depth=2
	add.s16 	%rs414, %rs412, -4;
	setp.lt.u16 	%p416, %rs414, 3;
	@%p416 bra 	LBB0_484;
// %bb.483:                             // %L40503
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u16 	%rs522, %rs1;
LBB0_484:                               // %L40514
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u32 	%r3825, -286331154;
LBB0_485:                               // %L40522
                                        //   in Loop: Header=BB0_327 Depth=2
	setp.eq.s16 	%p417, %rs522, 2;
	@%p417 bra 	LBB0_487;
	bra.uni 	LBB0_486;
LBB0_487:                               // %pass14213
                                        //   in Loop: Header=BB0_327 Depth=2
	// begin inline asm
	neg.f16x2 %r3457, %r602;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3459, %r3457, %r3442;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3473, %r602, %r3441;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3462, %r599, %r3441, %r3459;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3476, %r599, %r3442, %r3473;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3512, %r3516}, {%r641, %r644}, {%r3462, %r3476}, {%r1347, %r1347}, %r3825, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3504, %r3483, %r3483;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3507, %r3484, %r3484, %r3504;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3511, %r3512, %r3512, %r3507;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3515, %r3516, %r3516, %r3511;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r308, %r1738, %r3515, %r298;
	// end inline asm
	add.s32 	%r306, %r296, 1;
	setp.eq.s32 	%p418, %r306, 25;
	@%p418 bra 	LBB0_488;
	bra.uni 	LBB0_491;
LBB0_488:                               // %L40556
                                        //   in Loop: Header=BB0_327 Depth=2
	@%p204 bra 	LBB0_490;
// %bb.489:                             // %L40622
                                        //   in Loop: Header=BB0_327 Depth=2
	shl.b32 	%r3523, %r122, 9;
	or.b32  	%r3524, %r99, %r3523;
	add.s32 	%r3525, %r98, %r3524;
	mul.wide.u32 	%rd318, %r3525, 4;
	add.s64 	%rd87, %rd4, %rd318;
	st.global.u32 	[%rd87], %r308;
LBB0_490:                               // %L40775
                                        //   in Loop: Header=BB0_327 Depth=2
	add.s32 	%r122, %r122, 1;
	mov.u32 	%r306, 0;
	mov.u32 	%r308, %r306;
LBB0_491:                               // %L40780
                                        //   in Loop: Header=BB0_327 Depth=2
	ld.shared.u32 	%r3531, [%rd70];
	ld.shared.u32 	%r3538, [%rd71];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3527, %r3528}, {%r565, %r568}, {%r3531}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3534, %r3535}, {%r565, %r568}, {%r3538}, {%r1347, %r1347};
	// end inline asm
	mov.u16 	%rs524, 2;
	mov.u32 	%r3829, 1145324612;
	@%p207 bra 	LBB0_496;
// %bb.492:                             // %L41676
                                        //   in Loop: Header=BB0_327 Depth=2
	and.b16  	%rs417, %rs2, 7;
	mov.u16 	%rs524, 2;
	add.s16 	%rs418, %rs417, -1;
	setp.lt.u16 	%p421, %rs418, 3;
	@%p421 bra 	LBB0_496;
// %bb.493:                             // %L41676
                                        //   in Loop: Header=BB0_327 Depth=2
	add.s16 	%rs419, %rs417, -4;
	setp.lt.u16 	%p422, %rs419, 3;
	@%p422 bra 	LBB0_495;
// %bb.494:                             // %L41700
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u16 	%rs524, %rs1;
LBB0_495:                               // %L41711
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u32 	%r3829, -286331154;
LBB0_496:                               // %L41719
                                        //   in Loop: Header=BB0_327 Depth=2
	setp.eq.s16 	%p423, %rs524, 2;
	@%p423 bra 	LBB0_498;
	bra.uni 	LBB0_497;
LBB0_498:                               // %pass14629
                                        //   in Loop: Header=BB0_327 Depth=2
	// begin inline asm
	neg.f16x2 %r3541, %r602;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3543, %r3541, %r3528;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3559, %r602, %r3527;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3546, %r599, %r3527, %r3543;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3562, %r599, %r3528, %r3559;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3576, %r3577}, {%r641, %r644}, {%r3546, %r3562}, {%r1347, %r1347}, %r3829, 0;
	// end inline asm
	mov.u16 	%rs526, 2;
	mov.u32 	%r3830, 1145324612;
	@%p215 bra 	LBB0_499;
	bra.uni 	LBB0_503;
LBB0_499:                               // %L41750
                                        //   in Loop: Header=BB0_327 Depth=2
	and.b16  	%rs422, %rs2, 7;
	mov.u16 	%rs526, 2;
	add.s16 	%rs423, %rs422, -1;
	setp.lt.u16 	%p425, %rs423, 3;
	@%p425 bra 	LBB0_503;
// %bb.500:                             // %L41750
                                        //   in Loop: Header=BB0_327 Depth=2
	add.s16 	%rs424, %rs422, -4;
	setp.lt.u16 	%p426, %rs424, 3;
	@%p426 bra 	LBB0_502;
// %bb.501:                             // %L41774
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u16 	%rs526, %rs1;
LBB0_502:                               // %L41785
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u32 	%r3830, -286331154;
LBB0_503:                               // %L41793
                                        //   in Loop: Header=BB0_327 Depth=2
	setp.eq.s16 	%p427, %rs526, 2;
	@%p427 bra 	LBB0_505;
	bra.uni 	LBB0_504;
LBB0_505:                               // %pass14641
                                        //   in Loop: Header=BB0_327 Depth=2
	// begin inline asm
	neg.f16x2 %r3550, %r602;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3552, %r3550, %r3535;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3566, %r602, %r3534;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3555, %r599, %r3534, %r3552;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3569, %r599, %r3535, %r3566;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3605, %r3609}, {%r641, %r644}, {%r3555, %r3569}, {%r1347, %r1347}, %r3830, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3597, %r3576, %r3576;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3600, %r3577, %r3577, %r3597;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3604, %r3605, %r3605, %r3600;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3608, %r3609, %r3609, %r3604;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r318, %r1738, %r3608, %r308;
	// end inline asm
	add.s32 	%r316, %r306, 1;
	setp.eq.s32 	%p428, %r316, 25;
	@%p428 bra 	LBB0_506;
	bra.uni 	LBB0_509;
LBB0_506:                               // %L41827
                                        //   in Loop: Header=BB0_327 Depth=2
	@%p204 bra 	LBB0_508;
// %bb.507:                             // %L41893
                                        //   in Loop: Header=BB0_327 Depth=2
	shl.b32 	%r3616, %r122, 9;
	or.b32  	%r3617, %r99, %r3616;
	add.s32 	%r3618, %r98, %r3617;
	mul.wide.u32 	%rd323, %r3618, 4;
	add.s64 	%rd88, %rd4, %rd323;
	st.global.u32 	[%rd88], %r318;
LBB0_508:                               // %L42046
                                        //   in Loop: Header=BB0_327 Depth=2
	add.s32 	%r122, %r122, 1;
	mov.u32 	%r316, 0;
	mov.u32 	%r318, %r316;
LBB0_509:                               // %L42051
                                        //   in Loop: Header=BB0_327 Depth=2
	ld.shared.u32 	%r3624, [%rd72];
	ld.shared.u32 	%r3631, [%rd73];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3620, %r3621}, {%r565, %r568}, {%r3624}, {%r1347, %r1347};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3627, %r3628}, {%r565, %r568}, {%r3631}, {%r1347, %r1347};
	// end inline asm
	mov.u16 	%rs528, 2;
	mov.u32 	%r3834, 1145324612;
	@%p207 bra 	LBB0_514;
// %bb.510:                             // %L42947
                                        //   in Loop: Header=BB0_327 Depth=2
	and.b16  	%rs427, %rs2, 7;
	mov.u16 	%rs528, 2;
	add.s16 	%rs428, %rs427, -1;
	setp.lt.u16 	%p431, %rs428, 3;
	@%p431 bra 	LBB0_514;
// %bb.511:                             // %L42947
                                        //   in Loop: Header=BB0_327 Depth=2
	add.s16 	%rs429, %rs427, -4;
	setp.lt.u16 	%p432, %rs429, 3;
	@%p432 bra 	LBB0_513;
// %bb.512:                             // %L42971
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u16 	%rs528, %rs1;
LBB0_513:                               // %L42982
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u32 	%r3834, -286331154;
LBB0_514:                               // %L42990
                                        //   in Loop: Header=BB0_327 Depth=2
	setp.eq.s16 	%p433, %rs528, 2;
	@%p433 bra 	LBB0_516;
	bra.uni 	LBB0_515;
LBB0_516:                               // %pass15057
                                        //   in Loop: Header=BB0_327 Depth=2
	// begin inline asm
	neg.f16x2 %r3634, %r602;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3636, %r3634, %r3621;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3652, %r602, %r3620;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3639, %r599, %r3620, %r3636;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3655, %r599, %r3621, %r3652;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3669, %r3670}, {%r641, %r644}, {%r3639, %r3655}, {%r1347, %r1347}, %r3834, 0;
	// end inline asm
	mov.u16 	%rs530, 2;
	mov.u32 	%r3835, 1145324612;
	@%p215 bra 	LBB0_517;
	bra.uni 	LBB0_521;
LBB0_517:                               // %L43021
                                        //   in Loop: Header=BB0_327 Depth=2
	and.b16  	%rs432, %rs2, 7;
	mov.u16 	%rs530, 2;
	add.s16 	%rs433, %rs432, -1;
	setp.lt.u16 	%p435, %rs433, 3;
	@%p435 bra 	LBB0_521;
// %bb.518:                             // %L43021
                                        //   in Loop: Header=BB0_327 Depth=2
	add.s16 	%rs434, %rs432, -4;
	setp.lt.u16 	%p436, %rs434, 3;
	@%p436 bra 	LBB0_520;
// %bb.519:                             // %L43045
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u16 	%rs530, %rs1;
LBB0_520:                               // %L43056
                                        //   in Loop: Header=BB0_327 Depth=2
	mov.u32 	%r3835, -286331154;
LBB0_521:                               // %L43064
                                        //   in Loop: Header=BB0_327 Depth=2
	setp.eq.s16 	%p437, %rs530, 2;
	@%p437 bra 	LBB0_523;
	bra.uni 	LBB0_522;
LBB0_523:                               // %pass15069
                                        //   in Loop: Header=BB0_327 Depth=2
	// begin inline asm
	neg.f16x2 %r3643, %r602;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3645, %r3643, %r3628;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3659, %r602, %r3627;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3648, %r599, %r3627, %r3645;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3662, %r599, %r3628, %r3659;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3698, %r3702}, {%r641, %r644}, {%r3648, %r3662}, {%r1347, %r1347}, %r3835, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3690, %r3669, %r3669;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3693, %r3670, %r3670, %r3690;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3697, %r3698, %r3698, %r3693;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3701, %r3702, %r3702, %r3697;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r123, %r1738, %r3701, %r318;
	// end inline asm
	add.s32 	%r121, %r316, 1;
	setp.eq.s32 	%p438, %r121, 25;
	@%p438 bra 	LBB0_524;
	bra.uni 	LBB0_527;
LBB0_524:                               // %L43098
                                        //   in Loop: Header=BB0_327 Depth=2
	@%p204 bra 	LBB0_526;
// %bb.525:                             // %L43164
                                        //   in Loop: Header=BB0_327 Depth=2
	shl.b32 	%r3709, %r122, 9;
	or.b32  	%r3710, %r99, %r3709;
	add.s32 	%r3711, %r98, %r3710;
	mul.wide.u32 	%rd328, %r3711, 4;
	add.s64 	%rd89, %rd4, %rd328;
	st.global.u32 	[%rd89], %r123;
	bra.uni 	LBB0_526;
LBB0_529:                               // %L43353
	st.global.u32 	[%rd5], %r1347;
	ret;
LBB0_131:                               // %post_box_union
	mov.u64 	%rd217, exception3242;
	cvta.global.u64 	%rd218, %rd217;
	{ // callseq 102, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd218;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 102
	{ // callseq 103, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 103
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_138:                               // %post_box_union4168
	mov.u64 	%rd219, exception3242;
	cvta.global.u64 	%rd220, %rd219;
	{ // callseq 104, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd220;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 104
	{ // callseq 105, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 105
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_145:                               // %post_box_union4180
	mov.u64 	%rd221, exception3242;
	cvta.global.u64 	%rd222, %rd221;
	{ // callseq 106, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd222;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 106
	{ // callseq 107, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 107
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_152:                               // %post_box_union4192
	mov.u64 	%rd223, exception3242;
	cvta.global.u64 	%rd224, %rd223;
	{ // callseq 108, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd224;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 108
	{ // callseq 109, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 109
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_159:                               // %post_box_union4204
	mov.u64 	%rd225, exception3242;
	cvta.global.u64 	%rd226, %rd225;
	{ // callseq 110, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd226;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 110
	{ // callseq 111, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 111
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_166:                               // %post_box_union4216
	mov.u64 	%rd227, exception3242;
	cvta.global.u64 	%rd228, %rd227;
	{ // callseq 112, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd228;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 112
	{ // callseq 113, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 113
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_173:                               // %post_box_union4228
	mov.u64 	%rd229, exception3242;
	cvta.global.u64 	%rd230, %rd229;
	{ // callseq 114, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd230;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 114
	{ // callseq 115, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 115
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_180:                               // %post_box_union4240
	mov.u64 	%rd231, exception3242;
	cvta.global.u64 	%rd232, %rd231;
	{ // callseq 116, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd232;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 116
	{ // callseq 117, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 117
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_187:                               // %post_box_union6556
	mov.u64 	%rd233, exception3242;
	cvta.global.u64 	%rd234, %rd233;
	{ // callseq 118, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd234;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 118
	{ // callseq 119, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 119
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_194:                               // %post_box_union6568
	mov.u64 	%rd235, exception3242;
	cvta.global.u64 	%rd236, %rd235;
	{ // callseq 120, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd236;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 120
	{ // callseq 121, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 121
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_205:                               // %post_box_union6984
	mov.u64 	%rd238, exception3242;
	cvta.global.u64 	%rd239, %rd238;
	{ // callseq 122, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd239;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 122
	{ // callseq 123, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 123
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_212:                               // %post_box_union6996
	mov.u64 	%rd240, exception3242;
	cvta.global.u64 	%rd241, %rd240;
	{ // callseq 124, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd241;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 124
	{ // callseq 125, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 125
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_223:                               // %post_box_union7412
	mov.u64 	%rd243, exception3242;
	cvta.global.u64 	%rd244, %rd243;
	{ // callseq 126, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd244;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 126
	{ // callseq 127, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 127
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_230:                               // %post_box_union7424
	mov.u64 	%rd245, exception3242;
	cvta.global.u64 	%rd246, %rd245;
	{ // callseq 128, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd246;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 128
	{ // callseq 129, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 129
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_241:                               // %post_box_union7840
	mov.u64 	%rd248, exception3242;
	cvta.global.u64 	%rd249, %rd248;
	{ // callseq 130, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd249;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 130
	{ // callseq 131, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 131
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_248:                               // %post_box_union7852
	mov.u64 	%rd250, exception3242;
	cvta.global.u64 	%rd251, %rd250;
	{ // callseq 132, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd251;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 132
	{ // callseq 133, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 133
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_259:                               // %post_box_union8268
	mov.u64 	%rd253, exception3242;
	cvta.global.u64 	%rd254, %rd253;
	{ // callseq 134, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd254;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 134
	{ // callseq 135, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 135
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_266:                               // %post_box_union8280
	mov.u64 	%rd255, exception3242;
	cvta.global.u64 	%rd256, %rd255;
	{ // callseq 136, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd256;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 136
	{ // callseq 137, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 137
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_277:                               // %post_box_union8696
	mov.u64 	%rd258, exception3242;
	cvta.global.u64 	%rd259, %rd258;
	{ // callseq 138, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd259;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 138
	{ // callseq 139, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 139
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_284:                               // %post_box_union8708
	mov.u64 	%rd260, exception3242;
	cvta.global.u64 	%rd261, %rd260;
	{ // callseq 140, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd261;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 140
	{ // callseq 141, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 141
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_295:                               // %post_box_union9124
	mov.u64 	%rd263, exception3242;
	cvta.global.u64 	%rd264, %rd263;
	{ // callseq 142, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd264;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 142
	{ // callseq 143, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 143
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_302:                               // %post_box_union9136
	mov.u64 	%rd265, exception3242;
	cvta.global.u64 	%rd266, %rd265;
	{ // callseq 144, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd266;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 144
	{ // callseq 145, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 145
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_313:                               // %post_box_union9552
	mov.u64 	%rd268, exception3242;
	cvta.global.u64 	%rd269, %rd268;
	{ // callseq 146, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd269;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 146
	{ // callseq 147, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 147
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_320:                               // %post_box_union9564
	mov.u64 	%rd270, exception3242;
	cvta.global.u64 	%rd271, %rd270;
	{ // callseq 148, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd271;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 148
	{ // callseq 149, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 149
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_333:                               // %post_box_union9657
	mov.u64 	%rd273, exception3242;
	cvta.global.u64 	%rd274, %rd273;
	{ // callseq 150, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd274;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 150
	{ // callseq 151, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 151
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_340:                               // %post_box_union9669
	mov.u64 	%rd275, exception3242;
	cvta.global.u64 	%rd276, %rd275;
	{ // callseq 152, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd276;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 152
	{ // callseq 153, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 153
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_347:                               // %post_box_union9681
	mov.u64 	%rd277, exception3242;
	cvta.global.u64 	%rd278, %rd277;
	{ // callseq 154, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd278;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 154
	{ // callseq 155, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 155
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_354:                               // %post_box_union9693
	mov.u64 	%rd279, exception3242;
	cvta.global.u64 	%rd280, %rd279;
	{ // callseq 156, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd280;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 156
	{ // callseq 157, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 157
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_361:                               // %post_box_union9705
	mov.u64 	%rd281, exception3242;
	cvta.global.u64 	%rd282, %rd281;
	{ // callseq 158, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd282;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 158
	{ // callseq 159, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 159
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_368:                               // %post_box_union9717
	mov.u64 	%rd283, exception3242;
	cvta.global.u64 	%rd284, %rd283;
	{ // callseq 160, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd284;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 160
	{ // callseq 161, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 161
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_375:                               // %post_box_union9729
	mov.u64 	%rd285, exception3242;
	cvta.global.u64 	%rd286, %rd285;
	{ // callseq 162, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd286;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 162
	{ // callseq 163, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 163
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_382:                               // %post_box_union9741
	mov.u64 	%rd287, exception3242;
	cvta.global.u64 	%rd288, %rd287;
	{ // callseq 164, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd288;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 164
	{ // callseq 165, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 165
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_389:                               // %post_box_union12057
	mov.u64 	%rd289, exception3242;
	cvta.global.u64 	%rd290, %rd289;
	{ // callseq 166, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd290;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 166
	{ // callseq 167, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 167
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_396:                               // %post_box_union12069
	mov.u64 	%rd291, exception3242;
	cvta.global.u64 	%rd292, %rd291;
	{ // callseq 168, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd292;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 168
	{ // callseq 169, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 169
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_407:                               // %post_box_union12485
	mov.u64 	%rd294, exception3242;
	cvta.global.u64 	%rd295, %rd294;
	{ // callseq 170, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd295;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 170
	{ // callseq 171, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 171
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_414:                               // %post_box_union12497
	mov.u64 	%rd296, exception3242;
	cvta.global.u64 	%rd297, %rd296;
	{ // callseq 172, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd297;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 172
	{ // callseq 173, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 173
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_425:                               // %post_box_union12913
	mov.u64 	%rd299, exception3242;
	cvta.global.u64 	%rd300, %rd299;
	{ // callseq 174, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd300;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 174
	{ // callseq 175, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 175
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_432:                               // %post_box_union12925
	mov.u64 	%rd301, exception3242;
	cvta.global.u64 	%rd302, %rd301;
	{ // callseq 176, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd302;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 176
	{ // callseq 177, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 177
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_443:                               // %post_box_union13341
	mov.u64 	%rd304, exception3242;
	cvta.global.u64 	%rd305, %rd304;
	{ // callseq 178, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd305;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 178
	{ // callseq 179, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 179
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_450:                               // %post_box_union13353
	mov.u64 	%rd306, exception3242;
	cvta.global.u64 	%rd307, %rd306;
	{ // callseq 180, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd307;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 180
	{ // callseq 181, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 181
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_461:                               // %post_box_union13769
	mov.u64 	%rd309, exception3242;
	cvta.global.u64 	%rd310, %rd309;
	{ // callseq 182, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd310;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 182
	{ // callseq 183, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 183
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_468:                               // %post_box_union13781
	mov.u64 	%rd311, exception3242;
	cvta.global.u64 	%rd312, %rd311;
	{ // callseq 184, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd312;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 184
	{ // callseq 185, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 185
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_479:                               // %post_box_union14197
	mov.u64 	%rd314, exception3242;
	cvta.global.u64 	%rd315, %rd314;
	{ // callseq 186, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd315;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 186
	{ // callseq 187, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 187
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_486:                               // %post_box_union14209
	mov.u64 	%rd316, exception3242;
	cvta.global.u64 	%rd317, %rd316;
	{ // callseq 188, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd317;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 188
	{ // callseq 189, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 189
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_497:                               // %post_box_union14625
	mov.u64 	%rd319, exception3242;
	cvta.global.u64 	%rd320, %rd319;
	{ // callseq 190, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd320;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 190
	{ // callseq 191, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 191
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_504:                               // %post_box_union14637
	mov.u64 	%rd321, exception3242;
	cvta.global.u64 	%rd322, %rd321;
	{ // callseq 192, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd322;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 192
	{ // callseq 193, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 193
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_515:                               // %post_box_union15053
	mov.u64 	%rd324, exception3242;
	cvta.global.u64 	%rd325, %rd324;
	{ // callseq 194, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd325;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 194
	{ // callseq 195, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 195
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_522:                               // %post_box_union15065
	mov.u64 	%rd326, exception3242;
	cvta.global.u64 	%rd327, %rd326;
	{ // callseq 196, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd327;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 196
	{ // callseq 197, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 197
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
LBB0_1:                                 // %L9
	mov.u64 	%rd95, exception1;
	cvta.global.u64 	%rd96, %rd95;
	{ // callseq 100, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd96;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 100
	{ // callseq 101, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd90;
	st.param.b32 	[param0+8], %r455;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 101
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
