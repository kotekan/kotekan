// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE // -- Begin function _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception3262[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception13274[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.visible .entry _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE(
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5[32]
)
.reqntid 512, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<269>;
	.reg .b16 	%rs<97>;
	.reg .b32 	%r<3540>;
	.reg .f32 	%f<752>;
	.reg .b64 	%rd<318>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r275, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd89, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r276, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r276, 34943;
	@%p2 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_1;
$L__BB0_188:                            // %L10
	ld.param.u64 	%rd90, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r3, %r2, 9;
	mov.u32 	%r4, %tid.y;
	shl.b32 	%r5, %r4, 5;
	or.b32  	%r277, %r3, %r1;
	or.b32  	%r278, %r277, %r5;
	mul.wide.u32 	%rd96, %r278, 4;
	add.s64 	%rd5, %rd90, %rd96;
	mov.u32 	%r279, 1;
	st.global.u32 	[%rd5], %r279;
	and.b32  	%r6, %r1, 3;
	shr.u32 	%r7, %r1, 2;
	mul.lo.s32 	%r280, %r6, %r7;
	and.b32  	%r281, %r280, 7;
	cvt.rn.f32.s32 	%f185, %r281;
	mov.f32 	%f186, 0f40800000;
	div.approx.f32 	%f1, %f185, %f186;
	abs.f32 	%f750, %f1;
	setp.lt.f32 	%p3, %f750, 0f40000000;
	mov.f32 	%f703, 0f40000000;
	setp.gtu.f32 	%p264, %f750, 0f4B800000;
	mov.f32 	%f746, %f750;
	@%p3 bra 	$L__BB0_200;
// %bb.189:
	@%p264 bra 	$L__BB0_196;
	bra.uni 	$L__BB0_190;
$L__BB0_196:
	mov.b32 	%r163, %f750;
	and.b32  	%r282, %r163, 8388607;
	or.b32  	%r3493, %r282, 1065353216;
	mov.b32 	%f745, %r3493;
	add.s32 	%r283, %r163, -1073741824;
	and.b32  	%r3494, %r283, -8388608;
	setp.eq.s32 	%p10, %r3494, 0;
	@%p10 bra 	$L__BB0_199;
// %bb.197:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f196, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f195,%f196;
	// end inline asm
$L__BB0_198:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r284, %r3494, 192937984;
	add.s32 	%r285, %r3493, %r284;
	mov.b32 	%f197, %r285;
	mul.f32 	%f198, %f195, %f197;
	sub.f32 	%f199, %f197, %f198;
	fma.rn.f32 	%f200, %f199, %f195, %f198;
	sub.f32 	%f201, %f197, %f200;
	fma.rz.f32 	%f202, %f201, %f195, %f200;
	cvt.rzi.f32.f32 	%f203, %f202;
	sub.f32 	%f745, %f197, %f203;
	sub.s32 	%r3494, %r3494, %r284;
	mov.b32 	%r3493, %f745;
	setp.ne.s32 	%p11, %r3494, 0;
	setp.ne.s32 	%p12, %r3493, 0;
	and.pred  	%p13, %p11, %p12;
	@%p13 bra 	$L__BB0_198;
$L__BB0_199:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p14, %r163, 2139095039;
	selp.f32 	%f204, 0f7FFFFFFF, 0f4B800000, %p14;
	mul.f32 	%f205, %f745, 0f34000000;
	mul.f32 	%f746, %f204, %f205;
	bra.uni 	$L__BB0_200;
$L__BB0_190:                            // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f188, %f750, %f703;
	cvt.rzi.f32.f32 	%f744, %f188;
	fma.rn.f32 	%f154, %f744, 0fC0000000, %f750;
	mov.b32 	%r162, %f154;
	setp.lt.u32 	%p5, %r162, 1073741824;
	@%p5 bra 	$L__BB0_195;
// %bb.191:
	setp.lt.u32 	%p6, %r162, -2147483647;
	@%p6 bra 	$L__BB0_193;
// %bb.192:
	add.f32 	%f193, %f744, 0fBF800000;
	setp.lt.f32 	%p9, %f154, 0fC0000000;
	add.f32 	%f194, %f193, 0fBF800000;
	selp.f32 	%f744, %f194, %f193, %p9;
	bra.uni 	$L__BB0_195;
$L__BB0_193:
	add.f32 	%f744, %f744, 0f3F800000;
	setp.ltu.f32 	%p7, %f154, 0f40800000;
	@%p7 bra 	$L__BB0_195;
// %bb.194:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f189, %f744, 0f3F800000;
	fma.rn.f32 	%f191, %f703, 0fC0400000, %f154;
	setp.ge.f32 	%p8, %f191, 0f00000000;
	add.f32 	%f192, %f189, 0f3F800000;
	selp.f32 	%f744, %f192, %f189, %p8;
$L__BB0_195:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f746, %f744, 0fC0000000, %f750;
$L__BB0_200:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f206, %f746;
	setp.gtu.f32 	%p15, %f206, 0f7F800000;
	mov.b32 	%r286, %f1;
	and.b32  	%r170, %r286, -2147483648;
	@%p15 bra 	$L__BB0_202;
// %bb.201:
	mov.b32 	%r287, %f746;
	or.b32  	%r288, %r170, %r287;
	mov.b32 	%f746, %r288;
$L__BB0_202:                            // %__nv_fmodf.exit
	add.f32 	%f207, %f746, %f746;
	mov.b32 	%r295, %f207;
	and.b32  	%r296, %r295, -2147483648;
	shl.b32 	%r173, %r1, 1;
	and.b32  	%r303, %r173, 2;
	mul.lo.s32 	%r174, %r303, %r7;
	cvt.rn.f32.s32 	%f239, %r174;
	mov.f32 	%f240, 0f41800000;
	div.approx.f32 	%f168, %f239, %f240;
	abs.f32 	%f726, %f168;
	setp.lt.f32 	%p23, %f726, 0f40000000;
	setp.gtu.f32 	%p265, %f726, 0f4B800000;
	mov.f32 	%f706, %f726;
	@%p23 bra 	$L__BB0_13;
// %bb.2:
	@%p265 bra 	$L__BB0_9;
	bra.uni 	$L__BB0_3;
$L__BB0_9:
	mov.b32 	%r9, %f726;
	and.b32  	%r304, %r9, 8388607;
	or.b32  	%r3459, %r304, 1065353216;
	mov.b32 	%f705, %r3459;
	add.s32 	%r305, %r9, -1073741824;
	and.b32  	%r3460, %r305, -8388608;
	setp.eq.s32 	%p30, %r3460, 0;
	@%p30 bra 	$L__BB0_12;
// %bb.10:                              // %__nv_fmaf_rn.exit4.i.i.i2331.preheader
	mov.f32 	%f250, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f249,%f250;
	// end inline asm
$L__BB0_11:                             // %__nv_fmaf_rn.exit4.i.i.i2331
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r306, %r3460, 192937984;
	add.s32 	%r307, %r3459, %r306;
	mov.b32 	%f251, %r307;
	mul.f32 	%f252, %f249, %f251;
	sub.f32 	%f253, %f251, %f252;
	fma.rn.f32 	%f254, %f253, %f249, %f252;
	sub.f32 	%f255, %f251, %f254;
	fma.rz.f32 	%f256, %f255, %f249, %f254;
	cvt.rzi.f32.f32 	%f257, %f256;
	sub.f32 	%f705, %f251, %f257;
	sub.s32 	%r3460, %r3460, %r306;
	mov.b32 	%r3459, %f705;
	setp.ne.s32 	%p31, %r3460, 0;
	setp.ne.s32 	%p32, %r3459, 0;
	and.pred  	%p33, %p31, %p32;
	@%p33 bra 	$L__BB0_11;
$L__BB0_12:                             // %__internal_fmodf_slowpath_mod.exit.i.i2333
	setp.gt.u32 	%p34, %r9, 2139095039;
	selp.f32 	%f258, 0f7FFFFFFF, 0f4B800000, %p34;
	mul.f32 	%f259, %f705, 0f34000000;
	mul.f32 	%f706, %f258, %f259;
	bra.uni 	$L__BB0_13;
$L__BB0_3:                              // %__nv_fast_fdividef.exit.i.i.i2310
	div.approx.f32 	%f242, %f726, %f703;
	cvt.rzi.f32.f32 	%f704, %f242;
	fma.rn.f32 	%f4, %f704, 0fC0000000, %f726;
	mov.b32 	%r8, %f4;
	setp.lt.u32 	%p25, %r8, 1073741824;
	@%p25 bra 	$L__BB0_8;
// %bb.4:
	setp.lt.u32 	%p26, %r8, -2147483647;
	@%p26 bra 	$L__BB0_6;
// %bb.5:
	add.f32 	%f247, %f704, 0fBF800000;
	setp.lt.f32 	%p29, %f4, 0fC0000000;
	add.f32 	%f248, %f247, 0fBF800000;
	selp.f32 	%f704, %f248, %f247, %p29;
	bra.uni 	$L__BB0_8;
$L__BB0_6:
	add.f32 	%f704, %f704, 0f3F800000;
	setp.ltu.f32 	%p27, %f4, 0f40800000;
	@%p27 bra 	$L__BB0_8;
// %bb.7:                               // %__nv_fmaf_rn.exit.i.i.i2314
	add.f32 	%f243, %f704, 0f3F800000;
	fma.rn.f32 	%f245, %f703, 0fC0400000, %f4;
	setp.ge.f32 	%p28, %f245, 0f00000000;
	add.f32 	%f246, %f243, 0f3F800000;
	selp.f32 	%f704, %f246, %f243, %p28;
$L__BB0_8:                              // %__internal_fmodf_fastpath_quot.exit.i.i2317
	fma.rn.f32 	%f706, %f704, 0fC0000000, %f726;
$L__BB0_13:                             // %__internal_fmodf_kernel.exit.i2336
	or.b32  	%r297, %r296, 1056964608;
	abs.f32 	%f260, %f706;
	setp.gtu.f32 	%p35, %f260, 0f7F800000;
	mov.b32 	%r308, %f168;
	and.b32  	%r16, %r308, -2147483648;
	@%p35 bra 	$L__BB0_15;
// %bb.14:
	mov.b32 	%r309, %f706;
	or.b32  	%r310, %r16, %r309;
	mov.b32 	%f706, %r310;
$L__BB0_15:                             // %__nv_fmodf.exit2337
	mov.b32 	%f208, %r297;
	add.f32 	%f261, %f706, %f706;
	mov.b32 	%r311, %f261;
	and.b32  	%r312, %r311, -2147483648;
	or.b32  	%r313, %r312, 1056964608;
	add.s32 	%r319, %r174, %r7;
	cvt.rn.f32.s32 	%f291, %r319;
	div.approx.f32 	%f20, %f291, %f240;
	abs.f32 	%f730, %f20;
	setp.lt.f32 	%p43, %f730, 0f40000000;
	setp.gtu.f32 	%p266, %f730, 0f4B800000;
	mov.f32 	%f710, %f730;
	@%p43 bra 	$L__BB0_27;
// %bb.16:
	@%p266 bra 	$L__BB0_23;
	bra.uni 	$L__BB0_17;
$L__BB0_23:
	mov.b32 	%r18, %f730;
	and.b32  	%r320, %r18, 8388607;
	or.b32  	%r3461, %r320, 1065353216;
	mov.b32 	%f709, %r3461;
	add.s32 	%r321, %r18, -1073741824;
	and.b32  	%r3462, %r321, -8388608;
	setp.eq.s32 	%p50, %r3462, 0;
	@%p50 bra 	$L__BB0_26;
// %bb.24:                              // %__nv_fmaf_rn.exit4.i.i.i2362.preheader
	mov.f32 	%f302, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f301,%f302;
	// end inline asm
$L__BB0_25:                             // %__nv_fmaf_rn.exit4.i.i.i2362
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r322, %r3462, 192937984;
	add.s32 	%r323, %r3461, %r322;
	mov.b32 	%f303, %r323;
	mul.f32 	%f304, %f301, %f303;
	sub.f32 	%f305, %f303, %f304;
	fma.rn.f32 	%f306, %f305, %f301, %f304;
	sub.f32 	%f307, %f303, %f306;
	fma.rz.f32 	%f308, %f307, %f301, %f306;
	cvt.rzi.f32.f32 	%f309, %f308;
	sub.f32 	%f709, %f303, %f309;
	sub.s32 	%r3462, %r3462, %r322;
	mov.b32 	%r3461, %f709;
	setp.ne.s32 	%p51, %r3462, 0;
	setp.ne.s32 	%p52, %r3461, 0;
	and.pred  	%p53, %p51, %p52;
	@%p53 bra 	$L__BB0_25;
$L__BB0_26:                             // %__internal_fmodf_slowpath_mod.exit.i.i2364
	setp.gt.u32 	%p54, %r18, 2139095039;
	selp.f32 	%f310, 0f7FFFFFFF, 0f4B800000, %p54;
	mul.f32 	%f311, %f709, 0f34000000;
	mul.f32 	%f710, %f310, %f311;
	bra.uni 	$L__BB0_27;
$L__BB0_17:                             // %__nv_fast_fdividef.exit.i.i.i2341
	div.approx.f32 	%f294, %f730, %f703;
	cvt.rzi.f32.f32 	%f708, %f294;
	fma.rn.f32 	%f23, %f708, 0fC0000000, %f730;
	mov.b32 	%r17, %f23;
	setp.lt.u32 	%p45, %r17, 1073741824;
	@%p45 bra 	$L__BB0_22;
// %bb.18:
	setp.lt.u32 	%p46, %r17, -2147483647;
	@%p46 bra 	$L__BB0_20;
// %bb.19:
	add.f32 	%f299, %f708, 0fBF800000;
	setp.lt.f32 	%p49, %f23, 0fC0000000;
	add.f32 	%f300, %f299, 0fBF800000;
	selp.f32 	%f708, %f300, %f299, %p49;
	bra.uni 	$L__BB0_22;
$L__BB0_20:
	add.f32 	%f708, %f708, 0f3F800000;
	setp.ltu.f32 	%p47, %f23, 0f40800000;
	@%p47 bra 	$L__BB0_22;
// %bb.21:                              // %__nv_fmaf_rn.exit.i.i.i2345
	add.f32 	%f295, %f708, 0f3F800000;
	fma.rn.f32 	%f297, %f703, 0fC0400000, %f23;
	setp.ge.f32 	%p48, %f297, 0f00000000;
	add.f32 	%f298, %f295, 0f3F800000;
	selp.f32 	%f708, %f298, %f295, %p48;
$L__BB0_22:                             // %__internal_fmodf_fastpath_quot.exit.i.i2348
	fma.rn.f32 	%f710, %f708, 0fC0000000, %f730;
$L__BB0_27:                             // %__internal_fmodf_kernel.exit.i2367
	add.f32 	%f209, %f207, %f208;
	abs.f32 	%f211, %f207;
	mov.b32 	%f262, %r313;
	abs.f32 	%f312, %f710;
	setp.gtu.f32 	%p55, %f312, 0f7F800000;
	mov.b32 	%r324, %f20;
	and.b32  	%r25, %r324, -2147483648;
	@%p55 bra 	$L__BB0_29;
// %bb.28:
	mov.b32 	%r325, %f710;
	or.b32  	%r326, %r25, %r325;
	mov.b32 	%f710, %r326;
$L__BB0_29:                             // %__nv_fmodf.exit2368
	cvt.rzi.f32.f32 	%f210, %f209;
	setp.gt.f32 	%p16, %f211, 0f4B000000;
	add.f32 	%f263, %f261, %f262;
	abs.f32 	%f265, %f261;
	add.f32 	%f313, %f710, %f710;
	mov.b32 	%r333, %f313;
	and.b32  	%r334, %r333, -2147483648;
	or.b32  	%r335, %r334, 1056964608;
	mov.b32 	%f314, %r335;
	add.f32 	%f315, %f313, %f314;
	abs.f32 	%f317, %f313;
	mul.lo.s32 	%r28, %r173, %r7;
	and.b32  	%r341, %r28, 2;
	cvt.rn.f32.s32 	%f345, %r341;
	div.approx.f32 	%f37, %f345, %f703;
	abs.f32 	%f734, %f37;
	setp.lt.f32 	%p63, %f734, 0f40000000;
	setp.gtu.f32 	%p267, %f734, 0f4B800000;
	mov.f32 	%f714, %f734;
	@%p63 bra 	$L__BB0_41;
// %bb.30:
	@%p267 bra 	$L__BB0_37;
	bra.uni 	$L__BB0_31;
$L__BB0_37:
	mov.b32 	%r30, %f734;
	and.b32  	%r342, %r30, 8388607;
	or.b32  	%r3463, %r342, 1065353216;
	mov.b32 	%f713, %r3463;
	add.s32 	%r343, %r30, -1073741824;
	and.b32  	%r3464, %r343, -8388608;
	setp.eq.s32 	%p70, %r3464, 0;
	@%p70 bra 	$L__BB0_40;
// %bb.38:                              // %__nv_fmaf_rn.exit4.i.i.i2393.preheader
	mov.f32 	%f356, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f355,%f356;
	// end inline asm
$L__BB0_39:                             // %__nv_fmaf_rn.exit4.i.i.i2393
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r344, %r3464, 192937984;
	add.s32 	%r345, %r3463, %r344;
	mov.b32 	%f357, %r345;
	mul.f32 	%f358, %f355, %f357;
	sub.f32 	%f359, %f357, %f358;
	fma.rn.f32 	%f360, %f359, %f355, %f358;
	sub.f32 	%f361, %f357, %f360;
	fma.rz.f32 	%f362, %f361, %f355, %f360;
	cvt.rzi.f32.f32 	%f363, %f362;
	sub.f32 	%f713, %f357, %f363;
	sub.s32 	%r3464, %r3464, %r344;
	mov.b32 	%r3463, %f713;
	setp.ne.s32 	%p71, %r3464, 0;
	setp.ne.s32 	%p72, %r3463, 0;
	and.pred  	%p73, %p71, %p72;
	@%p73 bra 	$L__BB0_39;
$L__BB0_40:                             // %__internal_fmodf_slowpath_mod.exit.i.i2395
	setp.gt.u32 	%p74, %r30, 2139095039;
	selp.f32 	%f364, 0f7FFFFFFF, 0f4B800000, %p74;
	mul.f32 	%f365, %f713, 0f34000000;
	mul.f32 	%f714, %f364, %f365;
	bra.uni 	$L__BB0_41;
$L__BB0_31:                             // %__nv_fast_fdividef.exit.i.i.i2372
	div.approx.f32 	%f348, %f734, %f703;
	cvt.rzi.f32.f32 	%f712, %f348;
	fma.rn.f32 	%f40, %f712, 0fC0000000, %f734;
	mov.b32 	%r29, %f40;
	setp.lt.u32 	%p65, %r29, 1073741824;
	@%p65 bra 	$L__BB0_36;
// %bb.32:
	setp.lt.u32 	%p66, %r29, -2147483647;
	@%p66 bra 	$L__BB0_34;
// %bb.33:
	add.f32 	%f353, %f712, 0fBF800000;
	setp.lt.f32 	%p69, %f40, 0fC0000000;
	add.f32 	%f354, %f353, 0fBF800000;
	selp.f32 	%f712, %f354, %f353, %p69;
	bra.uni 	$L__BB0_36;
$L__BB0_34:
	add.f32 	%f712, %f712, 0f3F800000;
	setp.ltu.f32 	%p67, %f40, 0f40800000;
	@%p67 bra 	$L__BB0_36;
// %bb.35:                              // %__nv_fmaf_rn.exit.i.i.i2376
	add.f32 	%f349, %f712, 0f3F800000;
	fma.rn.f32 	%f351, %f703, 0fC0400000, %f40;
	setp.ge.f32 	%p68, %f351, 0f00000000;
	add.f32 	%f352, %f349, 0f3F800000;
	selp.f32 	%f712, %f352, %f349, %p68;
$L__BB0_36:                             // %__internal_fmodf_fastpath_quot.exit.i.i2379
	fma.rn.f32 	%f714, %f712, 0fC0000000, %f734;
$L__BB0_41:                             // %__internal_fmodf_kernel.exit.i2398
	selp.f32 	%f212, %f207, %f210, %p16;
	cvt.rzi.f32.f32 	%f213, %f207;
	setp.lt.f32 	%p17, %f211, 0f3F000000;
	cvt.rzi.f32.f32 	%f264, %f263;
	setp.gt.f32 	%p36, %f265, 0f4B000000;
	cvt.rzi.f32.f32 	%f316, %f315;
	setp.gt.f32 	%p56, %f317, 0f4B000000;
	mov.f32 	%f230, 0f00000000;
	abs.f32 	%f366, %f714;
	setp.gtu.f32 	%p75, %f366, 0f7F800000;
	mov.b32 	%r346, %f37;
	and.b32  	%r37, %r346, -2147483648;
	@%p75 bra 	$L__BB0_43;
// %bb.42:
	mov.b32 	%r347, %f714;
	or.b32  	%r348, %r37, %r347;
	mov.b32 	%f714, %r348;
$L__BB0_43:                             // %__nv_fmodf.exit2399
	selp.f32 	%f214, %f213, %f212, %p17;
	selp.f32 	%f266, %f261, %f264, %p36;
	cvt.rzi.f32.f32 	%f267, %f261;
	setp.lt.f32 	%p37, %f265, 0f3F000000;
	selp.f32 	%f318, %f313, %f316, %p56;
	cvt.rzi.f32.f32 	%f319, %f313;
	setp.lt.f32 	%p57, %f317, 0f3F000000;
	add.f32 	%f367, %f714, %f714;
	mov.b32 	%r349, %f367;
	and.b32  	%r350, %r349, -2147483648;
	or.b32  	%r351, %r350, 1056964608;
	mov.b32 	%f368, %r351;
	add.f32 	%f369, %f367, %f368;
	cvt.rzi.f32.f32 	%f370, %f369;
	abs.f32 	%f371, %f367;
	setp.gt.f32 	%p76, %f371, 0f4B000000;
	selp.f32 	%f372, %f367, %f370, %p76;
	cvt.rzi.f32.f32 	%f373, %f367;
	setp.lt.f32 	%p77, %f371, 0f3F000000;
	selp.f32 	%f374, %f373, %f372, %p77;
	cvt.rzi.s32.f32 	%r352, %f374;
	fma.rn.f32 	%f375, %f374, 0fBF000000, %f714;
	mul.f32 	%f376, %f375, %f375;
	fma.rn.f32 	%f377, %f376, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f378, %f376, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f379, %f377, %f376, 0fC0A55DF6;
	fma.rn.f32 	%f380, %f378, %f376, 0f4081E0CF;
	fma.rn.f32 	%f381, %f376, %f375, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f376, 0fC09DE9E6;
	fma.rn.f32 	%f383, %f379, %f381, 0f00000000;
	fma.rn.f32 	%f384, %f382, %f376, 0f3F800000;
	fma.rn.f32 	%f385, %f375, 0f40490FDB, %f383;
	and.b32  	%r353, %r352, 1;
	setp.eq.b32 	%p78, %r353, 1;
	selp.f32 	%f386, %f384, %f385, %p78;
	selp.f32 	%f387, %f385, %f384, %p78;
	and.b32  	%r354, %r352, 2;
	setp.eq.s32 	%p79, %r354, 0;
	neg.f32 	%f388, %f386;
	selp.f32 	%f389, %f386, %f388, %p79;
	add.s32 	%r355, %r352, 1;
	and.b32  	%r356, %r355, 2;
	setp.eq.s32 	%p80, %r356, 0;
	sub.f32 	%f391, %f230, %f387;
	cvt.rzi.f32.f32 	%f393, %f714;
	setp.eq.f32 	%p81, %f393, %f714;
	mul.f32 	%f394, %f714, 0f00000000;
	selp.f32 	%f721, %f394, %f389, %p81;
	abs.f32 	%f395, %f714;
	add.s32 	%r357, %r28, %r7;
	and.b32  	%r358, %r357, 3;
	cvt.rn.f32.s32 	%f397, %r358;
	div.approx.f32 	%f56, %f397, %f703;
	abs.f32 	%f738, %f56;
	setp.lt.f32 	%p83, %f738, 0f40000000;
	setp.gtu.f32 	%p268, %f738, 0f4B800000;
	mov.f32 	%f718, %f738;
	@%p83 bra 	$L__BB0_55;
// %bb.44:
	@%p268 bra 	$L__BB0_51;
	bra.uni 	$L__BB0_45;
$L__BB0_51:
	mov.b32 	%r39, %f738;
	and.b32  	%r359, %r39, 8388607;
	or.b32  	%r3465, %r359, 1065353216;
	mov.b32 	%f717, %r3465;
	add.s32 	%r360, %r39, -1073741824;
	and.b32  	%r3466, %r360, -8388608;
	setp.eq.s32 	%p90, %r3466, 0;
	@%p90 bra 	$L__BB0_54;
// %bb.52:                              // %__nv_fmaf_rn.exit4.i.i.i2424.preheader
	mov.f32 	%f408, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f407,%f408;
	// end inline asm
$L__BB0_53:                             // %__nv_fmaf_rn.exit4.i.i.i2424
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r361, %r3466, 192937984;
	add.s32 	%r362, %r3465, %r361;
	mov.b32 	%f409, %r362;
	mul.f32 	%f410, %f407, %f409;
	sub.f32 	%f411, %f409, %f410;
	fma.rn.f32 	%f412, %f411, %f407, %f410;
	sub.f32 	%f413, %f409, %f412;
	fma.rz.f32 	%f414, %f413, %f407, %f412;
	cvt.rzi.f32.f32 	%f415, %f414;
	sub.f32 	%f717, %f409, %f415;
	sub.s32 	%r3466, %r3466, %r361;
	mov.b32 	%r3465, %f717;
	setp.ne.s32 	%p91, %r3466, 0;
	setp.ne.s32 	%p92, %r3465, 0;
	and.pred  	%p93, %p91, %p92;
	@%p93 bra 	$L__BB0_53;
$L__BB0_54:                             // %__internal_fmodf_slowpath_mod.exit.i.i2426
	setp.gt.u32 	%p94, %r39, 2139095039;
	selp.f32 	%f416, 0f7FFFFFFF, 0f4B800000, %p94;
	mul.f32 	%f417, %f717, 0f34000000;
	mul.f32 	%f718, %f416, %f417;
	bra.uni 	$L__BB0_55;
$L__BB0_45:                             // %__nv_fast_fdividef.exit.i.i.i2403
	div.approx.f32 	%f400, %f738, %f703;
	cvt.rzi.f32.f32 	%f716, %f400;
	fma.rn.f32 	%f59, %f716, 0fC0000000, %f738;
	mov.b32 	%r38, %f59;
	setp.lt.u32 	%p85, %r38, 1073741824;
	@%p85 bra 	$L__BB0_50;
// %bb.46:
	setp.lt.u32 	%p86, %r38, -2147483647;
	@%p86 bra 	$L__BB0_48;
// %bb.47:
	add.f32 	%f405, %f716, 0fBF800000;
	setp.lt.f32 	%p89, %f59, 0fC0000000;
	add.f32 	%f406, %f405, 0fBF800000;
	selp.f32 	%f716, %f406, %f405, %p89;
	bra.uni 	$L__BB0_50;
$L__BB0_48:
	add.f32 	%f716, %f716, 0f3F800000;
	setp.ltu.f32 	%p87, %f59, 0f40800000;
	@%p87 bra 	$L__BB0_50;
// %bb.49:                              // %__nv_fmaf_rn.exit.i.i.i2407
	add.f32 	%f401, %f716, 0f3F800000;
	fma.rn.f32 	%f403, %f703, 0fC0400000, %f59;
	setp.ge.f32 	%p88, %f403, 0f00000000;
	add.f32 	%f404, %f401, 0f3F800000;
	selp.f32 	%f716, %f404, %f401, %p88;
$L__BB0_50:                             // %__internal_fmodf_fastpath_quot.exit.i.i2410
	fma.rn.f32 	%f718, %f716, 0fC0000000, %f738;
$L__BB0_55:                             // %__internal_fmodf_kernel.exit.i2429
	fma.rn.f32 	%f215, %f214, 0fBF000000, %f746;
	selp.f32 	%f268, %f267, %f266, %p37;
	selp.f32 	%f320, %f319, %f318, %p57;
	selp.f32 	%f392, %f387, %f391, %p80;
	setp.gt.f32 	%p82, %f395, 0f4B800000;
	add.f32 	%f396, %f721, 0f3F800000;
	abs.f32 	%f418, %f718;
	setp.gtu.f32 	%p95, %f418, 0f7F800000;
	mov.b32 	%r363, %f56;
	and.b32  	%r46, %r363, -2147483648;
	@%p95 bra 	$L__BB0_57;
// %bb.56:
	mov.b32 	%r364, %f718;
	or.b32  	%r365, %r46, %r364;
	mov.b32 	%f718, %r365;
$L__BB0_57:                             // %__nv_fmodf.exit2430
	mul.f32 	%f216, %f215, %f215;
	fma.rn.f32 	%f269, %f268, 0fBF000000, %f706;
	fma.rn.f32 	%f321, %f320, 0fBF000000, %f710;
	selp.f32 	%f55, %f396, %f392, %p82;
	add.f32 	%f419, %f718, %f718;
	mov.b32 	%r366, %f419;
	and.b32  	%r367, %r366, -2147483648;
	or.b32  	%r368, %r367, 1056964608;
	mov.b32 	%f420, %r368;
	add.f32 	%f421, %f419, %f420;
	cvt.rzi.f32.f32 	%f422, %f421;
	abs.f32 	%f423, %f419;
	setp.gt.f32 	%p96, %f423, 0f4B000000;
	selp.f32 	%f424, %f419, %f422, %p96;
	cvt.rzi.f32.f32 	%f425, %f419;
	setp.lt.f32 	%p97, %f423, 0f3F000000;
	selp.f32 	%f426, %f425, %f424, %p97;
	cvt.rzi.s32.f32 	%r369, %f426;
	fma.rn.f32 	%f427, %f426, 0fBF000000, %f718;
	mul.f32 	%f428, %f427, %f427;
	fma.rn.f32 	%f429, %f428, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f430, %f428, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f431, %f429, %f428, 0fC0A55DF6;
	fma.rn.f32 	%f432, %f430, %f428, 0f4081E0CF;
	fma.rn.f32 	%f433, %f428, %f427, 0f00000000;
	fma.rn.f32 	%f434, %f432, %f428, 0fC09DE9E6;
	fma.rn.f32 	%f435, %f431, %f433, 0f00000000;
	fma.rn.f32 	%f436, %f434, %f428, 0f3F800000;
	fma.rn.f32 	%f437, %f427, 0f40490FDB, %f435;
	and.b32  	%r370, %r369, 1;
	setp.eq.b32 	%p98, %r370, 1;
	selp.f32 	%f438, %f436, %f437, %p98;
	selp.f32 	%f439, %f437, %f436, %p98;
	and.b32  	%r371, %r369, 2;
	setp.eq.s32 	%p99, %r371, 0;
	neg.f32 	%f440, %f438;
	selp.f32 	%f441, %f438, %f440, %p99;
	add.s32 	%r372, %r369, 1;
	and.b32  	%r373, %r372, 2;
	setp.eq.s32 	%p100, %r373, 0;
	sub.f32 	%f443, %f230, %f439;
	selp.f32 	%f444, %f439, %f443, %p100;
	cvt.rzi.f32.f32 	%f445, %f718;
	setp.eq.f32 	%p101, %f445, %f718;
	mul.f32 	%f446, %f718, 0f00000000;
	selp.f32 	%f723, %f446, %f441, %p101;
	abs.f32 	%f447, %f718;
	setp.gt.f32 	%p102, %f447, 0f4B800000;
	add.f32 	%f448, %f723, 0f3F800000;
	selp.f32 	%f74, %f448, %f444, %p102;
	and.b32  	%r47, %r1, 2;
	setp.eq.s32 	%p103, %r47, 0;
	mov.f32 	%f720, %f55;
	mov.f32 	%f722, %f74;
	@%p103 bra 	$L__BB0_59;
// %bb.58:                              // %L399
	neg.f32 	%f722, %f723;
	neg.f32 	%f720, %f721;
	mov.f32 	%f721, %f55;
	mov.f32 	%f723, %f74;
$L__BB0_59:                             // %L401
	fma.rn.f32 	%f217, %f216, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f218, %f216, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f270, %f269, %f269;
	mul.f32 	%f322, %f321, %f321;
	@%p3 bra 	$L__BB0_210;
// %bb.60:
	@%p264 bra 	$L__BB0_206;
	bra.uni 	$L__BB0_61;
$L__BB0_206:
	mov.b32 	%r176, %f750;
	and.b32  	%r380, %r176, 8388607;
	or.b32  	%r3495, %r380, 1065353216;
	mov.b32 	%f749, %r3495;
	add.s32 	%r381, %r176, -1073741824;
	and.b32  	%r3496, %r381, -8388608;
	setp.eq.s32 	%p111, %r3496, 0;
	@%p111 bra 	$L__BB0_209;
// %bb.207:                             // %__nv_fmaf_rn.exit4.i.i.i2455.preheader
	mov.f32 	%f458, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f457,%f458;
	// end inline asm
$L__BB0_208:                            // %__nv_fmaf_rn.exit4.i.i.i2455
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r382, %r3496, 192937984;
	add.s32 	%r383, %r3495, %r382;
	mov.b32 	%f459, %r383;
	mul.f32 	%f460, %f457, %f459;
	sub.f32 	%f461, %f459, %f460;
	fma.rn.f32 	%f462, %f461, %f457, %f460;
	sub.f32 	%f463, %f459, %f462;
	fma.rz.f32 	%f464, %f463, %f457, %f462;
	cvt.rzi.f32.f32 	%f465, %f464;
	sub.f32 	%f749, %f459, %f465;
	sub.s32 	%r3496, %r3496, %r382;
	mov.b32 	%r3495, %f749;
	setp.ne.s32 	%p112, %r3496, 0;
	setp.ne.s32 	%p113, %r3495, 0;
	and.pred  	%p114, %p112, %p113;
	@%p114 bra 	$L__BB0_208;
$L__BB0_209:                            // %__internal_fmodf_slowpath_mod.exit.i.i2457
	setp.gt.u32 	%p115, %r176, 2139095039;
	selp.f32 	%f466, 0f7FFFFFFF, 0f4B800000, %p115;
	mul.f32 	%f467, %f749, 0f34000000;
	mul.f32 	%f750, %f466, %f467;
	bra.uni 	$L__BB0_210;
$L__BB0_61:                             // %__nv_fast_fdividef.exit.i.i.i2434
	div.approx.f32 	%f450, %f750, %f703;
	cvt.rzi.f32.f32 	%f748, %f450;
	fma.rn.f32 	%f171, %f748, 0fC0000000, %f750;
	mov.b32 	%r175, %f171;
	setp.lt.u32 	%p106, %r175, 1073741824;
	@%p106 bra 	$L__BB0_205;
// %bb.62:
	setp.lt.u32 	%p107, %r175, -2147483647;
	@%p107 bra 	$L__BB0_203;
// %bb.63:
	add.f32 	%f455, %f748, 0fBF800000;
	setp.lt.f32 	%p110, %f171, 0fC0000000;
	add.f32 	%f456, %f455, 0fBF800000;
	selp.f32 	%f748, %f456, %f455, %p110;
	bra.uni 	$L__BB0_205;
$L__BB0_203:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p108, %f171, 0f40800000;
	@%p108 bra 	$L__BB0_205;
// %bb.204:                             // %__nv_fmaf_rn.exit.i.i.i2438
	add.f32 	%f451, %f748, 0f3F800000;
	fma.rn.f32 	%f453, %f703, 0fC0400000, %f171;
	setp.ge.f32 	%p109, %f453, 0f00000000;
	add.f32 	%f454, %f451, 0f3F800000;
	selp.f32 	%f748, %f454, %f451, %p109;
$L__BB0_205:                            // %__internal_fmodf_fastpath_quot.exit.i.i2441
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_210:                            // %__internal_fmodf_kernel.exit.i2460
	cvt.rzi.s32.f32 	%r298, %f214;
	fma.rn.f32 	%f219, %f217, %f216, 0fC0A55DF6;
	fma.rn.f32 	%f220, %f218, %f216, 0f4081E0CF;
	fma.rn.f32 	%f221, %f216, %f215, 0f00000000;
	fma.rn.f32 	%f271, %f270, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f272, %f270, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f323, %f322, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f324, %f322, 0f3E684E12, 0fBFAAD2E0;
	abs.f32 	%f468, %f750;
	setp.gtu.f32 	%p116, %f468, 0f7F800000;
	@%p116 bra 	$L__BB0_212;
// %bb.211:
	mov.b32 	%r384, %f750;
	or.b32  	%r385, %r170, %r384;
	mov.b32 	%f750, %r385;
$L__BB0_212:                            // %__nv_fmodf.exit2461
	fma.rn.f32 	%f222, %f220, %f216, 0fC09DE9E6;
	fma.rn.f32 	%f223, %f219, %f221, 0f00000000;
	and.b32  	%r299, %r298, 1;
	cvt.rzi.s32.f32 	%r314, %f268;
	fma.rn.f32 	%f273, %f271, %f270, 0fC0A55DF6;
	fma.rn.f32 	%f274, %f272, %f270, 0f4081E0CF;
	fma.rn.f32 	%f275, %f270, %f269, 0f00000000;
	cvt.rzi.s32.f32 	%r336, %f320;
	fma.rn.f32 	%f325, %f323, %f322, 0fC0A55DF6;
	fma.rn.f32 	%f326, %f324, %f322, 0f4081E0CF;
	fma.rn.f32 	%f327, %f322, %f321, 0f00000000;
	add.f32 	%f469, %f750, %f750;
	mov.b32 	%r392, %f469;
	and.b32  	%r393, %r392, -2147483648;
	or.b32  	%r394, %r393, 1056964608;
	mov.b32 	%f470, %r394;
	add.f32 	%f471, %f469, %f470;
	cvt.rzi.f32.f32 	%f472, %f471;
	abs.f32 	%f473, %f469;
	setp.gt.f32 	%p118, %f473, 0f4B000000;
	selp.f32 	%f474, %f469, %f472, %p118;
	cvt.rzi.f32.f32 	%f475, %f469;
	setp.lt.f32 	%p119, %f473, 0f3F000000;
	selp.f32 	%f476, %f475, %f474, %p119;
	cvt.rzi.s32.f32 	%r395, %f476;
	fma.rn.f32 	%f477, %f476, 0fBF000000, %f750;
	mul.f32 	%f478, %f477, %f477;
	fma.rn.f32 	%f479, %f478, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f480, %f478, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f481, %f479, %f478, 0fC0A55DF6;
	fma.rn.f32 	%f482, %f480, %f478, 0f4081E0CF;
	fma.rn.f32 	%f483, %f478, %f477, 0f00000000;
	fma.rn.f32 	%f484, %f482, %f478, 0fC09DE9E6;
	fma.rn.f32 	%f485, %f481, %f483, 0f00000000;
	and.b32  	%r396, %r395, 1;
	@%p23 bra 	$L__BB0_75;
// %bb.64:
	@%p265 bra 	$L__BB0_71;
	bra.uni 	$L__BB0_65;
$L__BB0_71:
	mov.b32 	%r51, %f726;
	and.b32  	%r400, %r51, 8388607;
	or.b32  	%r3467, %r400, 1065353216;
	mov.b32 	%f725, %r3467;
	add.s32 	%r401, %r51, -1073741824;
	and.b32  	%r3468, %r401, -8388608;
	setp.eq.s32 	%p131, %r3468, 0;
	@%p131 bra 	$L__BB0_74;
// %bb.72:                              // %__nv_fmaf_rn.exit4.i.i.i2486.preheader
	mov.f32 	%f510, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f509,%f510;
	// end inline asm
$L__BB0_73:                             // %__nv_fmaf_rn.exit4.i.i.i2486
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r402, %r3468, 192937984;
	add.s32 	%r403, %r3467, %r402;
	mov.b32 	%f511, %r403;
	mul.f32 	%f512, %f509, %f511;
	sub.f32 	%f513, %f511, %f512;
	fma.rn.f32 	%f514, %f513, %f509, %f512;
	sub.f32 	%f515, %f511, %f514;
	fma.rz.f32 	%f516, %f515, %f509, %f514;
	cvt.rzi.f32.f32 	%f517, %f516;
	sub.f32 	%f725, %f511, %f517;
	sub.s32 	%r3468, %r3468, %r402;
	mov.b32 	%r3467, %f725;
	setp.ne.s32 	%p132, %r3468, 0;
	setp.ne.s32 	%p133, %r3467, 0;
	and.pred  	%p134, %p132, %p133;
	@%p134 bra 	$L__BB0_73;
$L__BB0_74:                             // %__internal_fmodf_slowpath_mod.exit.i.i2488
	setp.gt.u32 	%p135, %r51, 2139095039;
	selp.f32 	%f518, 0f7FFFFFFF, 0f4B800000, %p135;
	mul.f32 	%f519, %f725, 0f34000000;
	mul.f32 	%f726, %f518, %f519;
	bra.uni 	$L__BB0_75;
$L__BB0_65:                             // %__nv_fast_fdividef.exit.i.i.i2465
	div.approx.f32 	%f502, %f726, %f703;
	cvt.rzi.f32.f32 	%f724, %f502;
	fma.rn.f32 	%f82, %f724, 0fC0000000, %f726;
	mov.b32 	%r50, %f82;
	setp.lt.u32 	%p126, %r50, 1073741824;
	@%p126 bra 	$L__BB0_70;
// %bb.66:
	setp.lt.u32 	%p127, %r50, -2147483647;
	@%p127 bra 	$L__BB0_68;
// %bb.67:
	add.f32 	%f507, %f724, 0fBF800000;
	setp.lt.f32 	%p130, %f82, 0fC0000000;
	add.f32 	%f508, %f507, 0fBF800000;
	selp.f32 	%f724, %f508, %f507, %p130;
	bra.uni 	$L__BB0_70;
$L__BB0_68:
	add.f32 	%f724, %f724, 0f3F800000;
	setp.ltu.f32 	%p128, %f82, 0f40800000;
	@%p128 bra 	$L__BB0_70;
// %bb.69:                              // %__nv_fmaf_rn.exit.i.i.i2469
	add.f32 	%f503, %f724, 0f3F800000;
	fma.rn.f32 	%f505, %f703, 0fC0400000, %f82;
	setp.ge.f32 	%p129, %f505, 0f00000000;
	add.f32 	%f506, %f503, 0f3F800000;
	selp.f32 	%f724, %f506, %f503, %p129;
$L__BB0_70:                             // %__internal_fmodf_fastpath_quot.exit.i.i2472
	fma.rn.f32 	%f726, %f724, 0fC0000000, %f726;
$L__BB0_75:                             // %__internal_fmodf_kernel.exit.i2491
	fma.rn.f32 	%f224, %f222, %f216, 0f3F800000;
	fma.rn.f32 	%f225, %f215, 0f40490FDB, %f223;
	setp.eq.b32 	%p18, %r299, 1;
	fma.rn.f32 	%f276, %f274, %f270, 0fC09DE9E6;
	fma.rn.f32 	%f277, %f273, %f275, 0f00000000;
	and.b32  	%r315, %r314, 1;
	fma.rn.f32 	%f328, %f326, %f322, 0fC09DE9E6;
	fma.rn.f32 	%f329, %f325, %f327, 0f00000000;
	and.b32  	%r337, %r336, 1;
	fma.rn.f32 	%f486, %f484, %f478, 0f3F800000;
	fma.rn.f32 	%f487, %f477, 0f40490FDB, %f485;
	setp.eq.b32 	%p120, %r396, 1;
	abs.f32 	%f520, %f726;
	setp.gtu.f32 	%p136, %f520, 0f7F800000;
	@%p136 bra 	$L__BB0_77;
// %bb.76:
	mov.b32 	%r404, %f726;
	or.b32  	%r405, %r16, %r404;
	mov.b32 	%f726, %r405;
$L__BB0_77:                             // %__nv_fmodf.exit2492
	selp.f32 	%f226, %f224, %f225, %p18;
	and.b32  	%r300, %r298, 2;
	fma.rn.f32 	%f278, %f276, %f270, 0f3F800000;
	fma.rn.f32 	%f279, %f269, 0f40490FDB, %f277;
	setp.eq.b32 	%p38, %r315, 1;
	fma.rn.f32 	%f330, %f328, %f322, 0f3F800000;
	fma.rn.f32 	%f331, %f321, 0f40490FDB, %f329;
	setp.eq.b32 	%p58, %r337, 1;
	selp.f32 	%f488, %f486, %f487, %p120;
	and.b32  	%r397, %r395, 2;
	add.f32 	%f521, %f726, %f726;
	mov.b32 	%r406, %f521;
	and.b32  	%r407, %r406, -2147483648;
	or.b32  	%r408, %r407, 1056964608;
	mov.b32 	%f522, %r408;
	add.f32 	%f523, %f521, %f522;
	cvt.rzi.f32.f32 	%f524, %f523;
	abs.f32 	%f525, %f521;
	setp.gt.f32 	%p138, %f525, 0f4B000000;
	selp.f32 	%f526, %f521, %f524, %p138;
	cvt.rzi.f32.f32 	%f527, %f521;
	setp.lt.f32 	%p139, %f525, 0f3F000000;
	selp.f32 	%f528, %f527, %f526, %p139;
	cvt.rzi.s32.f32 	%r409, %f528;
	fma.rn.f32 	%f529, %f528, 0fBF000000, %f726;
	mul.f32 	%f530, %f529, %f529;
	fma.rn.f32 	%f531, %f530, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f532, %f530, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f533, %f531, %f530, 0fC0A55DF6;
	fma.rn.f32 	%f534, %f532, %f530, 0f4081E0CF;
	fma.rn.f32 	%f535, %f530, %f529, 0f00000000;
	fma.rn.f32 	%f536, %f534, %f530, 0fC09DE9E6;
	fma.rn.f32 	%f537, %f533, %f535, 0f00000000;
	fma.rn.f32 	%f538, %f536, %f530, 0f3F800000;
	fma.rn.f32 	%f539, %f529, 0f40490FDB, %f537;
	and.b32  	%r410, %r409, 1;
	setp.eq.b32 	%p140, %r410, 1;
	@%p43 bra 	$L__BB0_89;
// %bb.78:
	@%p266 bra 	$L__BB0_85;
	bra.uni 	$L__BB0_79;
$L__BB0_85:
	mov.b32 	%r59, %f730;
	and.b32  	%r414, %r59, 8388607;
	or.b32  	%r3469, %r414, 1065353216;
	mov.b32 	%f729, %r3469;
	add.s32 	%r415, %r59, -1073741824;
	and.b32  	%r3470, %r415, -8388608;
	setp.eq.s32 	%p151, %r3470, 0;
	@%p151 bra 	$L__BB0_88;
// %bb.86:                              // %__nv_fmaf_rn.exit4.i.i.i2517.preheader
	mov.f32 	%f560, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f559,%f560;
	// end inline asm
$L__BB0_87:                             // %__nv_fmaf_rn.exit4.i.i.i2517
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r416, %r3470, 192937984;
	add.s32 	%r417, %r3469, %r416;
	mov.b32 	%f561, %r417;
	mul.f32 	%f562, %f559, %f561;
	sub.f32 	%f563, %f561, %f562;
	fma.rn.f32 	%f564, %f563, %f559, %f562;
	sub.f32 	%f565, %f561, %f564;
	fma.rz.f32 	%f566, %f565, %f559, %f564;
	cvt.rzi.f32.f32 	%f567, %f566;
	sub.f32 	%f729, %f561, %f567;
	sub.s32 	%r3470, %r3470, %r416;
	mov.b32 	%r3469, %f729;
	setp.ne.s32 	%p152, %r3470, 0;
	setp.ne.s32 	%p153, %r3469, 0;
	and.pred  	%p154, %p152, %p153;
	@%p154 bra 	$L__BB0_87;
$L__BB0_88:                             // %__internal_fmodf_slowpath_mod.exit.i.i2519
	setp.gt.u32 	%p155, %r59, 2139095039;
	selp.f32 	%f568, 0f7FFFFFFF, 0f4B800000, %p155;
	mul.f32 	%f569, %f729, 0f34000000;
	mul.f32 	%f730, %f568, %f569;
	bra.uni 	$L__BB0_89;
$L__BB0_79:                             // %__nv_fast_fdividef.exit.i.i.i2496
	div.approx.f32 	%f552, %f730, %f703;
	cvt.rzi.f32.f32 	%f728, %f552;
	fma.rn.f32 	%f99, %f728, 0fC0000000, %f730;
	mov.b32 	%r58, %f99;
	setp.lt.u32 	%p146, %r58, 1073741824;
	@%p146 bra 	$L__BB0_84;
// %bb.80:
	setp.lt.u32 	%p147, %r58, -2147483647;
	@%p147 bra 	$L__BB0_82;
// %bb.81:
	add.f32 	%f557, %f728, 0fBF800000;
	setp.lt.f32 	%p150, %f99, 0fC0000000;
	add.f32 	%f558, %f557, 0fBF800000;
	selp.f32 	%f728, %f558, %f557, %p150;
	bra.uni 	$L__BB0_84;
$L__BB0_82:
	add.f32 	%f728, %f728, 0f3F800000;
	setp.ltu.f32 	%p148, %f99, 0f40800000;
	@%p148 bra 	$L__BB0_84;
// %bb.83:                              // %__nv_fmaf_rn.exit.i.i.i2500
	add.f32 	%f553, %f728, 0f3F800000;
	fma.rn.f32 	%f555, %f703, 0fC0400000, %f99;
	setp.ge.f32 	%p149, %f555, 0f00000000;
	add.f32 	%f556, %f553, 0f3F800000;
	selp.f32 	%f728, %f556, %f553, %p149;
$L__BB0_84:                             // %__internal_fmodf_fastpath_quot.exit.i.i2503
	fma.rn.f32 	%f730, %f728, 0fC0000000, %f730;
$L__BB0_89:                             // %__internal_fmodf_kernel.exit.i2522
	setp.eq.s32 	%p19, %r300, 0;
	neg.f32 	%f228, %f226;
	add.s32 	%r301, %r298, 1;
	cvt.rzi.f32.f32 	%f233, %f746;
	selp.f32 	%f280, %f278, %f279, %p38;
	and.b32  	%r316, %r314, 2;
	selp.f32 	%f332, %f330, %f331, %p58;
	and.b32  	%r338, %r336, 2;
	setp.eq.s32 	%p121, %r397, 0;
	neg.f32 	%f490, %f488;
	add.s32 	%r398, %r395, 1;
	cvt.rzi.f32.f32 	%f495, %f750;
	selp.f32 	%f540, %f538, %f539, %p140;
	and.b32  	%r411, %r409, 2;
	abs.f32 	%f570, %f730;
	setp.gtu.f32 	%p156, %f570, 0f7F800000;
	@%p156 bra 	$L__BB0_91;
// %bb.90:
	mov.b32 	%r418, %f730;
	or.b32  	%r419, %r25, %r418;
	mov.b32 	%f730, %r419;
$L__BB0_91:                             // %__nv_fmodf.exit2523
	selp.f32 	%f227, %f225, %f224, %p18;
	selp.f32 	%f229, %f226, %f228, %p19;
	and.b32  	%r302, %r301, 2;
	setp.eq.f32 	%p21, %f233, %f746;
	mul.f32 	%f234, %f746, 0f00000000;
	setp.eq.s32 	%p39, %r316, 0;
	neg.f32 	%f282, %f280;
	add.s32 	%r317, %r314, 1;
	cvt.rzi.f32.f32 	%f287, %f706;
	setp.eq.s32 	%p59, %r338, 0;
	neg.f32 	%f334, %f332;
	add.s32 	%r339, %r336, 1;
	cvt.rzi.f32.f32 	%f339, %f710;
	selp.f32 	%f489, %f487, %f486, %p120;
	selp.f32 	%f491, %f488, %f490, %p121;
	and.b32  	%r399, %r398, 2;
	setp.eq.f32 	%p123, %f495, %f750;
	mul.f32 	%f496, %f750, 0f00000000;
	setp.eq.s32 	%p141, %r411, 0;
	neg.f32 	%f542, %f540;
	add.s32 	%r412, %r409, 1;
	cvt.rzi.f32.f32 	%f547, %f726;
	add.f32 	%f571, %f730, %f730;
	mov.b32 	%r426, %f571;
	and.b32  	%r427, %r426, -2147483648;
	or.b32  	%r428, %r427, 1056964608;
	mov.b32 	%f572, %r428;
	add.f32 	%f573, %f571, %f572;
	cvt.rzi.f32.f32 	%f574, %f573;
	abs.f32 	%f575, %f571;
	setp.gt.f32 	%p158, %f575, 0f4B000000;
	selp.f32 	%f576, %f571, %f574, %p158;
	cvt.rzi.f32.f32 	%f577, %f571;
	setp.lt.f32 	%p159, %f575, 0f3F000000;
	selp.f32 	%f578, %f577, %f576, %p159;
	cvt.rzi.s32.f32 	%r429, %f578;
	fma.rn.f32 	%f579, %f578, 0fBF000000, %f730;
	mul.f32 	%f580, %f579, %f579;
	fma.rn.f32 	%f581, %f580, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f582, %f580, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f583, %f581, %f580, 0fC0A55DF6;
	fma.rn.f32 	%f584, %f582, %f580, 0f4081E0CF;
	fma.rn.f32 	%f585, %f580, %f579, 0f00000000;
	fma.rn.f32 	%f586, %f584, %f580, 0fC09DE9E6;
	fma.rn.f32 	%f587, %f583, %f585, 0f00000000;
	fma.rn.f32 	%f588, %f586, %f580, 0f3F800000;
	fma.rn.f32 	%f589, %f579, 0f40490FDB, %f587;
	and.b32  	%r430, %r429, 1;
	setp.eq.b32 	%p160, %r430, 1;
	selp.f32 	%f590, %f588, %f589, %p160;
	and.b32  	%r431, %r429, 2;
	setp.eq.s32 	%p161, %r431, 0;
	neg.f32 	%f592, %f590;
	add.s32 	%r432, %r429, 1;
	cvt.rzi.f32.f32 	%f597, %f730;
	@%p63 bra 	$L__BB0_103;
// %bb.92:
	@%p267 bra 	$L__BB0_99;
	bra.uni 	$L__BB0_93;
$L__BB0_99:
	mov.b32 	%r69, %f734;
	and.b32  	%r434, %r69, 8388607;
	or.b32  	%r3471, %r434, 1065353216;
	mov.b32 	%f733, %r3471;
	add.s32 	%r435, %r69, -1073741824;
	and.b32  	%r3472, %r435, -8388608;
	setp.eq.s32 	%p171, %r3472, 0;
	@%p171 bra 	$L__BB0_102;
// %bb.100:                             // %__nv_fmaf_rn.exit4.i.i.i2548.preheader
	mov.f32 	%f612, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f611,%f612;
	// end inline asm
$L__BB0_101:                            // %__nv_fmaf_rn.exit4.i.i.i2548
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r436, %r3472, 192937984;
	add.s32 	%r437, %r3471, %r436;
	mov.b32 	%f613, %r437;
	mul.f32 	%f614, %f611, %f613;
	sub.f32 	%f615, %f613, %f614;
	fma.rn.f32 	%f616, %f615, %f611, %f614;
	sub.f32 	%f617, %f613, %f616;
	fma.rz.f32 	%f618, %f617, %f611, %f616;
	cvt.rzi.f32.f32 	%f619, %f618;
	sub.f32 	%f733, %f613, %f619;
	sub.s32 	%r3472, %r3472, %r436;
	mov.b32 	%r3471, %f733;
	setp.ne.s32 	%p172, %r3472, 0;
	setp.ne.s32 	%p173, %r3471, 0;
	and.pred  	%p174, %p172, %p173;
	@%p174 bra 	$L__BB0_101;
$L__BB0_102:                            // %__internal_fmodf_slowpath_mod.exit.i.i2550
	setp.gt.u32 	%p175, %r69, 2139095039;
	selp.f32 	%f620, 0f7FFFFFFF, 0f4B800000, %p175;
	mul.f32 	%f621, %f733, 0f34000000;
	mul.f32 	%f734, %f620, %f621;
	bra.uni 	$L__BB0_103;
$L__BB0_93:                             // %__nv_fast_fdividef.exit.i.i.i2527
	div.approx.f32 	%f604, %f734, %f703;
	cvt.rzi.f32.f32 	%f732, %f604;
	fma.rn.f32 	%f114, %f732, 0fC0000000, %f734;
	mov.b32 	%r68, %f114;
	setp.lt.u32 	%p166, %r68, 1073741824;
	@%p166 bra 	$L__BB0_98;
// %bb.94:
	setp.lt.u32 	%p167, %r68, -2147483647;
	@%p167 bra 	$L__BB0_96;
// %bb.95:
	add.f32 	%f609, %f732, 0fBF800000;
	setp.lt.f32 	%p170, %f114, 0fC0000000;
	add.f32 	%f610, %f609, 0fBF800000;
	selp.f32 	%f732, %f610, %f609, %p170;
	bra.uni 	$L__BB0_98;
$L__BB0_96:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p168, %f114, 0f40800000;
	@%p168 bra 	$L__BB0_98;
// %bb.97:                              // %__nv_fmaf_rn.exit.i.i.i2531
	add.f32 	%f605, %f732, 0f3F800000;
	fma.rn.f32 	%f607, %f703, 0fC0400000, %f114;
	setp.ge.f32 	%p169, %f607, 0f00000000;
	add.f32 	%f608, %f605, 0f3F800000;
	selp.f32 	%f732, %f608, %f605, %p169;
$L__BB0_98:                             // %__internal_fmodf_fastpath_quot.exit.i.i2534
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_103:                            // %__internal_fmodf_kernel.exit.i2553
	setp.eq.s32 	%p20, %r302, 0;
	sub.f32 	%f231, %f230, %f227;
	selp.f32 	%f235, %f234, %f229, %p21;
	abs.f32 	%f236, %f746;
	selp.f32 	%f281, %f279, %f278, %p38;
	selp.f32 	%f283, %f280, %f282, %p39;
	and.b32  	%r318, %r317, 2;
	setp.eq.f32 	%p41, %f287, %f706;
	mul.f32 	%f288, %f706, 0f00000000;
	selp.f32 	%f333, %f331, %f330, %p58;
	selp.f32 	%f335, %f332, %f334, %p59;
	and.b32  	%r340, %r339, 2;
	setp.eq.f32 	%p61, %f339, %f710;
	mul.f32 	%f340, %f710, 0f00000000;
	setp.eq.s32 	%p122, %r399, 0;
	sub.f32 	%f493, %f230, %f489;
	selp.f32 	%f497, %f496, %f491, %p123;
	abs.f32 	%f498, %f750;
	selp.f32 	%f541, %f539, %f538, %p140;
	selp.f32 	%f543, %f540, %f542, %p141;
	and.b32  	%r413, %r412, 2;
	setp.eq.f32 	%p143, %f547, %f726;
	mul.f32 	%f548, %f726, 0f00000000;
	selp.f32 	%f591, %f589, %f588, %p160;
	selp.f32 	%f593, %f590, %f592, %p161;
	and.b32  	%r433, %r432, 2;
	setp.eq.f32 	%p163, %f597, %f730;
	mul.f32 	%f598, %f730, 0f00000000;
	abs.f32 	%f622, %f734;
	setp.gtu.f32 	%p176, %f622, 0f7F800000;
	@%p176 bra 	$L__BB0_105;
// %bb.104:
	mov.b32 	%r438, %f734;
	or.b32  	%r439, %r37, %r438;
	mov.b32 	%f734, %r439;
$L__BB0_105:                            // %__nv_fmodf.exit2554
	selp.f32 	%f232, %f227, %f231, %p20;
	setp.gt.f32 	%p22, %f236, 0f4B800000;
	add.f32 	%f237, %f235, 0f3F800000;
	setp.eq.s32 	%p40, %r318, 0;
	sub.f32 	%f285, %f230, %f281;
	selp.f32 	%f18, %f288, %f283, %p41;
	abs.f32 	%f289, %f706;
	setp.eq.s32 	%p60, %r340, 0;
	sub.f32 	%f337, %f230, %f333;
	selp.f32 	%f341, %f340, %f335, %p61;
	abs.f32 	%f342, %f710;
	selp.f32 	%f494, %f489, %f493, %p122;
	setp.gt.f32 	%p124, %f498, 0f4B800000;
	add.f32 	%f499, %f497, 0f3F800000;
	setp.eq.s32 	%p142, %r413, 0;
	sub.f32 	%f545, %f230, %f541;
	selp.f32 	%f96, %f548, %f543, %p143;
	abs.f32 	%f549, %f726;
	setp.eq.s32 	%p162, %r433, 0;
	sub.f32 	%f595, %f230, %f591;
	selp.f32 	%f599, %f598, %f593, %p163;
	abs.f32 	%f600, %f730;
	add.f32 	%f623, %f734, %f734;
	mov.b32 	%r440, %f623;
	and.b32  	%r441, %r440, -2147483648;
	or.b32  	%r442, %r441, 1056964608;
	mov.b32 	%f624, %r442;
	add.f32 	%f625, %f623, %f624;
	cvt.rzi.f32.f32 	%f626, %f625;
	abs.f32 	%f627, %f623;
	setp.gt.f32 	%p178, %f627, 0f4B000000;
	selp.f32 	%f628, %f623, %f626, %p178;
	cvt.rzi.f32.f32 	%f629, %f623;
	setp.lt.f32 	%p179, %f627, 0f3F000000;
	selp.f32 	%f630, %f629, %f628, %p179;
	cvt.rzi.s32.f32 	%r443, %f630;
	fma.rn.f32 	%f631, %f630, 0fBF000000, %f734;
	mul.f32 	%f632, %f631, %f631;
	fma.rn.f32 	%f633, %f632, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f634, %f632, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f635, %f633, %f632, 0fC0A55DF6;
	fma.rn.f32 	%f636, %f634, %f632, 0f4081E0CF;
	fma.rn.f32 	%f637, %f632, %f631, 0f00000000;
	fma.rn.f32 	%f638, %f636, %f632, 0fC09DE9E6;
	fma.rn.f32 	%f639, %f635, %f637, 0f00000000;
	fma.rn.f32 	%f640, %f638, %f632, 0f3F800000;
	fma.rn.f32 	%f641, %f631, 0f40490FDB, %f639;
	and.b32  	%r444, %r443, 1;
	setp.eq.b32 	%p180, %r444, 1;
	selp.f32 	%f642, %f640, %f641, %p180;
	selp.f32 	%f643, %f641, %f640, %p180;
	and.b32  	%r445, %r443, 2;
	setp.eq.s32 	%p181, %r445, 0;
	neg.f32 	%f644, %f642;
	selp.f32 	%f645, %f642, %f644, %p181;
	add.s32 	%r446, %r443, 1;
	and.b32  	%r447, %r446, 2;
	setp.eq.s32 	%p182, %r447, 0;
	sub.f32 	%f647, %f230, %f643;
	cvt.rzi.f32.f32 	%f649, %f734;
	setp.eq.f32 	%p183, %f649, %f734;
	mul.f32 	%f650, %f734, 0f00000000;
	selp.f32 	%f741, %f650, %f645, %p183;
	abs.f32 	%f651, %f734;
	@%p83 bra 	$L__BB0_117;
// %bb.106:
	@%p268 bra 	$L__BB0_113;
	bra.uni 	$L__BB0_107;
$L__BB0_113:
	mov.b32 	%r77, %f738;
	and.b32  	%r448, %r77, 8388607;
	or.b32  	%r3473, %r448, 1065353216;
	mov.b32 	%f737, %r3473;
	add.s32 	%r449, %r77, -1073741824;
	and.b32  	%r3474, %r449, -8388608;
	setp.eq.s32 	%p191, %r3474, 0;
	@%p191 bra 	$L__BB0_116;
// %bb.114:                             // %__nv_fmaf_rn.exit4.i.i.i2579.preheader
	mov.f32 	%f662, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f661,%f662;
	// end inline asm
$L__BB0_115:                            // %__nv_fmaf_rn.exit4.i.i.i2579
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r450, %r3474, 192937984;
	add.s32 	%r451, %r3473, %r450;
	mov.b32 	%f663, %r451;
	mul.f32 	%f664, %f661, %f663;
	sub.f32 	%f665, %f663, %f664;
	fma.rn.f32 	%f666, %f665, %f661, %f664;
	sub.f32 	%f667, %f663, %f666;
	fma.rz.f32 	%f668, %f667, %f661, %f666;
	cvt.rzi.f32.f32 	%f669, %f668;
	sub.f32 	%f737, %f663, %f669;
	sub.s32 	%r3474, %r3474, %r450;
	mov.b32 	%r3473, %f737;
	setp.ne.s32 	%p192, %r3474, 0;
	setp.ne.s32 	%p193, %r3473, 0;
	and.pred  	%p194, %p192, %p193;
	@%p194 bra 	$L__BB0_115;
$L__BB0_116:                            // %__internal_fmodf_slowpath_mod.exit.i.i2581
	setp.gt.u32 	%p195, %r77, 2139095039;
	selp.f32 	%f670, 0f7FFFFFFF, 0f4B800000, %p195;
	mul.f32 	%f671, %f737, 0f34000000;
	mul.f32 	%f738, %f670, %f671;
	bra.uni 	$L__BB0_117;
$L__BB0_107:                            // %__nv_fast_fdividef.exit.i.i.i2558
	div.approx.f32 	%f654, %f738, %f703;
	cvt.rzi.f32.f32 	%f736, %f654;
	fma.rn.f32 	%f131, %f736, 0fC0000000, %f738;
	mov.b32 	%r76, %f131;
	setp.lt.u32 	%p186, %r76, 1073741824;
	@%p186 bra 	$L__BB0_112;
// %bb.108:
	setp.lt.u32 	%p187, %r76, -2147483647;
	@%p187 bra 	$L__BB0_110;
// %bb.109:
	add.f32 	%f659, %f736, 0fBF800000;
	setp.lt.f32 	%p190, %f131, 0fC0000000;
	add.f32 	%f660, %f659, 0fBF800000;
	selp.f32 	%f736, %f660, %f659, %p190;
	bra.uni 	$L__BB0_112;
$L__BB0_110:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p188, %f131, 0f40800000;
	@%p188 bra 	$L__BB0_112;
// %bb.111:                             // %__nv_fmaf_rn.exit.i.i.i2562
	add.f32 	%f655, %f736, 0f3F800000;
	fma.rn.f32 	%f657, %f703, 0fC0400000, %f131;
	setp.ge.f32 	%p189, %f657, 0f00000000;
	add.f32 	%f658, %f655, 0f3F800000;
	selp.f32 	%f736, %f658, %f655, %p189;
$L__BB0_112:                            // %__internal_fmodf_fastpath_quot.exit.i.i2565
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_117:                            // %__internal_fmodf_kernel.exit.i2584
	selp.f32 	%f238, %f237, %f232, %p22;
	selp.f32 	%f286, %f281, %f285, %p40;
	setp.gt.f32 	%p42, %f289, 0f4B800000;
	add.f32 	%f290, %f18, 0f3F800000;
	selp.f32 	%f338, %f333, %f337, %p60;
	setp.gt.f32 	%p62, %f342, 0f4B800000;
	add.f32 	%f343, %f341, 0f3F800000;
	selp.f32 	%f500, %f499, %f494, %p124;
	selp.f32 	%f546, %f541, %f545, %p142;
	setp.gt.f32 	%p144, %f549, 0f4B800000;
	add.f32 	%f550, %f96, 0f3F800000;
	selp.f32 	%f596, %f591, %f595, %p162;
	setp.gt.f32 	%p164, %f600, 0f4B800000;
	add.f32 	%f601, %f599, 0f3F800000;
	selp.f32 	%f648, %f643, %f647, %p182;
	setp.gt.f32 	%p184, %f651, 0f4B800000;
	add.f32 	%f652, %f741, 0f3F800000;
	abs.f32 	%f672, %f738;
	setp.gtu.f32 	%p196, %f672, 0f7F800000;
	@%p196 bra 	$L__BB0_119;
// %bb.118:
	mov.b32 	%r452, %f738;
	or.b32  	%r453, %r46, %r452;
	mov.b32 	%f738, %r453;
$L__BB0_119:                            // %__nv_fmodf.exit2585
	mov.b32 	%r291, %f238;
	mov.b32 	%r294, %f235;
	selp.f32 	%f19, %f290, %f286, %p42;
	selp.f32 	%f344, %f343, %f338, %p62;
	mov.b32 	%r388, %f500;
	mov.b32 	%r391, %f497;
	selp.f32 	%f97, %f550, %f546, %p144;
	selp.f32 	%f602, %f601, %f596, %p164;
	selp.f32 	%f129, %f652, %f648, %p184;
	add.f32 	%f673, %f738, %f738;
	mov.b32 	%r454, %f673;
	and.b32  	%r455, %r454, -2147483648;
	or.b32  	%r456, %r455, 1056964608;
	mov.b32 	%f674, %r456;
	add.f32 	%f675, %f673, %f674;
	cvt.rzi.f32.f32 	%f676, %f675;
	abs.f32 	%f677, %f673;
	setp.gt.f32 	%p198, %f677, 0f4B000000;
	selp.f32 	%f678, %f673, %f676, %p198;
	cvt.rzi.f32.f32 	%f679, %f673;
	setp.lt.f32 	%p199, %f677, 0f3F000000;
	selp.f32 	%f680, %f679, %f678, %p199;
	cvt.rzi.s32.f32 	%r457, %f680;
	fma.rn.f32 	%f681, %f680, 0fBF000000, %f738;
	mul.f32 	%f682, %f681, %f681;
	fma.rn.f32 	%f683, %f682, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f684, %f682, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f685, %f683, %f682, 0fC0A55DF6;
	fma.rn.f32 	%f686, %f684, %f682, 0f4081E0CF;
	fma.rn.f32 	%f687, %f682, %f681, 0f00000000;
	fma.rn.f32 	%f688, %f686, %f682, 0fC09DE9E6;
	fma.rn.f32 	%f689, %f685, %f687, 0f00000000;
	fma.rn.f32 	%f690, %f688, %f682, 0f3F800000;
	fma.rn.f32 	%f691, %f681, 0f40490FDB, %f689;
	and.b32  	%r458, %r457, 1;
	setp.eq.b32 	%p200, %r458, 1;
	selp.f32 	%f692, %f690, %f691, %p200;
	selp.f32 	%f693, %f691, %f690, %p200;
	and.b32  	%r459, %r457, 2;
	setp.eq.s32 	%p201, %r459, 0;
	neg.f32 	%f694, %f692;
	selp.f32 	%f695, %f692, %f694, %p201;
	add.s32 	%r460, %r457, 1;
	and.b32  	%r461, %r460, 2;
	setp.eq.s32 	%p202, %r461, 0;
	sub.f32 	%f697, %f230, %f693;
	selp.f32 	%f698, %f693, %f697, %p202;
	cvt.rzi.f32.f32 	%f699, %f738;
	setp.eq.f32 	%p203, %f699, %f738;
	mul.f32 	%f700, %f738, 0f00000000;
	selp.f32 	%f743, %f700, %f695, %p203;
	abs.f32 	%f701, %f738;
	setp.gt.f32 	%p204, %f701, 0f4B800000;
	add.f32 	%f702, %f743, 0f3F800000;
	selp.f32 	%f146, %f702, %f698, %p204;
	mov.f32 	%f740, %f129;
	mov.f32 	%f742, %f146;
	@%p103 bra 	$L__BB0_121;
// %bb.120:                             // %L692
	neg.f32 	%f742, %f743;
	neg.f32 	%f740, %f741;
	mov.f32 	%f741, %f129;
	mov.f32 	%f743, %f146;
$L__BB0_121:                            // %L694
	xor.b32  	%r290, %r294, -2147483648;
	ld.param.u64 	%rd2, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2];
	mov.b32 	%r329, %f344;
	mov.b32 	%r328, %f19;
	mov.b32 	%r332, %f341;
	mov.b32 	%r331, %f18;
	mov.b32 	%r375, %f720;
	mov.b32 	%r376, %f722;
	mov.b32 	%r378, %f721;
	mov.b32 	%r379, %f723;
	xor.b32  	%r387, %r391, -2147483648;
	mov.b32 	%r422, %f602;
	mov.b32 	%r421, %f97;
	mov.b32 	%r425, %f599;
	mov.b32 	%r424, %f96;
	mov.b32 	%r463, %f740;
	mov.b32 	%r464, %f742;
	mov.b32 	%r466, %f741;
	mov.b32 	%r467, %f743;
	setp.gt.u32 	%p205, %r1, 15;
	mov.u32 	%r185, 999999999;
	@%p205 bra 	$L__BB0_123;
// %bb.122:                             // %L724
	ld.param.u64 	%rd1, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1];
	shl.b32 	%r469, %r1, 4;
	and.b32  	%r470, %r469, 240;
	or.b32  	%r471, %r470, %r4;
	mul.wide.u32 	%rd97, %r471, 4;
	add.s64 	%rd98, %rd1, %rd97;
	ld.global.u32 	%r472, [%rd98];
	cvt.s32.s16 	%r473, %r472;
	shr.s32 	%r474, %r472, 16;
	mul.lo.s32 	%r475, %r474, 546;
	mad.lo.s32 	%r185, %r473, 33, %r475;
$L__BB0_123:                            // %pass376
	ld.param.u64 	%rd3, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3];
	ld.param.u64 	%rd4, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4];
	// begin inline asm
	cvt.rn.f16x2.f32 %r289, %r291, %r290;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r292, %r294, %r291;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r327, %r329, %r328;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r330, %r332, %r331;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r374, %r376, %r375;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r377, %r379, %r378;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r386, %r388, %r387;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r389, %r391, %r388;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r420, %r422, %r421;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r423, %r425, %r424;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r462, %r464, %r463;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r465, %r467, %r466;
	// end inline asm
	shr.u32 	%r477, %r1, 3;
	bfe.u32 	%r478, %r1, 3, 1;
	shl.b32 	%r479, %r4, 1;
	and.b32  	%r480, %r479, 14;
	or.b32  	%r481, %r478, %r480;
	shl.b32 	%r482, %r1, 6;
	and.b32  	%r483, %r482, 192;
	and.b32  	%r484, %r7, 1;
	and.b32  	%r485, %r477, 2;
	or.b32  	%r486, %r484, %r485;
	shl.b32 	%r487, %r486, 4;
	or.b32  	%r488, %r481, %r3;
	or.b32  	%r489, %r488, %r483;
	or.b32  	%r490, %r489, %r487;
	mul.wide.u32 	%rd99, %r490, 4;
	add.s64 	%rd100, %rd2, %rd99;
	ld.global.u32 	%r186, [%rd100];
	ld.global.u32 	%r187, [%rd100+1024];
	shl.b32 	%r491, %r2, 7;
	shl.b32 	%r492, %r1, 2;
	or.b32  	%r188, %r492, %r491;
	and.b32  	%r189, %r1, 16;
	shr.u32 	%r493, %r1, 4;
	and.b32  	%r494, %r173, 30;
	or.b32  	%r495, %r494, %r493;
	mul.lo.s32 	%r496, %r495, 257;
	shr.u32 	%r190, %r4, 3;
	and.b32  	%r497, %r5, 224;
	mad.lo.s32 	%r498, %r190, 257, %r497;
	or.b32  	%r499, %r190, 2;
	mad.lo.s32 	%r500, %r499, 257, %r497;
	or.b32  	%r501, %r190, 4;
	mad.lo.s32 	%r502, %r501, 257, %r497;
	or.b32  	%r503, %r190, 6;
	mad.lo.s32 	%r504, %r503, 257, %r497;
	or.b32  	%r505, %r190, 8;
	mad.lo.s32 	%r506, %r505, 257, %r497;
	or.b32  	%r507, %r190, 10;
	mad.lo.s32 	%r508, %r507, 257, %r497;
	or.b32  	%r509, %r190, 12;
	mad.lo.s32 	%r510, %r509, 257, %r497;
	or.b32  	%r511, %r190, 14;
	mad.lo.s32 	%r512, %r511, 257, %r497;
	or.b32  	%r513, %r190, 16;
	mad.lo.s32 	%r514, %r513, 257, %r497;
	or.b32  	%r515, %r190, 18;
	mad.lo.s32 	%r516, %r515, 257, %r497;
	or.b32  	%r517, %r190, 20;
	mad.lo.s32 	%r518, %r517, 257, %r497;
	or.b32  	%r519, %r190, 22;
	mad.lo.s32 	%r520, %r519, 257, %r497;
	or.b32  	%r521, %r190, 24;
	mad.lo.s32 	%r522, %r521, 257, %r497;
	or.b32  	%r523, %r190, 26;
	mad.lo.s32 	%r524, %r523, 257, %r497;
	or.b32  	%r525, %r190, 28;
	mad.lo.s32 	%r526, %r525, 257, %r497;
	or.b32  	%r527, %r190, 30;
	mad.lo.s32 	%r528, %r527, 257, %r497;
	mul.lo.s32 	%r529, %r6, 2184;
	mad.lo.s32 	%r530, %r481, 33, %r529;
	mad.lo.s32 	%r531, %r486, 546, %r530;
	setp.lt.u32 	%p207, %r1, 4;
	setp.eq.s32 	%p208, %r7, 4;
	setp.eq.s32 	%p209, %r7, 5;
	selp.b32 	%r191, 0, 1032, %p103;
	bfe.s32 	%r532, %r1, 3, 1;
	and.b32  	%r533, %r1, 8;
	setp.eq.s32 	%p210, %r533, 0;
	and.b32  	%r192, %r532, 258;
	bfe.s32 	%r534, %r1, 2, 1;
	and.b32  	%r193, %r534, 516;
	or.b32  	%r194, %r480, %r493;
	and.b32  	%r535, %r1, 1;
	neg.s32 	%r536, %r535;
	setp.eq.b32 	%p211, %r535, 1;
	and.b32  	%r195, %r536, 2064;
	or.b32  	%r537, %r191, %r192;
	or.b32  	%r538, %r537, %r193;
	add.s32 	%r539, %r538, %r194;
	add.s32 	%r196, %r539, %r195;
	selp.b32 	%r540, 4144, 5176, %p103;
	or.b32  	%r541, %r540, %r192;
	or.b32  	%r542, %r541, %r193;
	add.s32 	%r543, %r542, %r194;
	add.s32 	%r197, %r543, %r195;
	add.s32 	%r198, %r197, 16;
	bfe.s32 	%r544, %r4, 1, 1;
	and.b32  	%r545, %r4, 2;
	setp.eq.s32 	%p212, %r545, 0;
	and.b32  	%r546, %r544, 1032;
	and.b32  	%r547, %r532, 4144;
	mul.lo.s32 	%r548, %r190, 258;
	and.b32  	%r549, %r492, 12;
	bfe.s32 	%r550, %r4, 2, 1;
	and.b32  	%r551, %r4, 4;
	setp.eq.s32 	%p213, %r551, 0;
	and.b32  	%r552, %r550, 516;
	and.b32  	%r553, %r4, 1;
	neg.s32 	%r554, %r553;
	setp.eq.b32 	%p214, %r553, 1;
	and.b32  	%r555, %r554, 2064;
	add.s32 	%r556, %r486, %r548;
	add.s32 	%r557, %r556, %r549;
	add.s32 	%r558, %r557, %r547;
	add.s32 	%r559, %r558, %r546;
	add.s32 	%r560, %r559, %r552;
	add.s32 	%r561, %r560, %r555;
	mul.wide.u32 	%rd101, %r561, 4;
	mov.u64 	%rd102, shmem;
	add.s64 	%rd22, %rd102, %rd101;
	selp.b64 	%rd103, 2064, 0, %p214;
	selp.b64 	%rd104, 0, 516, %p213;
	selp.b64 	%rd105, 0, 1032, %p212;
	selp.b64 	%rd106, 0, 4144, %p210;
	cvt.u64.u32 	%rd107, %r549;
	cvt.u64.u32 	%rd108, %r548;
	cvt.u64.u32 	%rd109, %r486;
	add.s64 	%rd110, %rd109, %rd108;
	add.s64 	%rd111, %rd110, %rd107;
	add.s64 	%rd112, %rd111, %rd106;
	add.s64 	%rd113, %rd112, %rd105;
	add.s64 	%rd114, %rd113, %rd104;
	add.s64 	%rd115, %rd114, %rd103;
	shl.b64 	%rd116, %rd115, 2;
	add.s64 	%rd23, %rd102, %rd116;
	mul.lo.s32 	%r199, %r2, 2560;
	and.b32  	%r200, %r1, 15;
	or.b32  	%r201, %r5, %r189;
	add.s32 	%r562, %r4, %r496;
	mul.wide.u32 	%rd117, %r562, 4;
	add.s64 	%rd24, %rd102, %rd117;
	cvt.u64.u32 	%rd118, %r4;
	cvt.u64.u32 	%rd25, %r496;
	add.s64 	%rd119, %rd25, %rd118;
	shl.b64 	%rd120, %rd119, 2;
	add.s64 	%rd26, %rd102, %rd120;
	add.s32 	%r563, %r498, %r1;
	mul.wide.u32 	%rd121, %r563, 4;
	add.s64 	%rd27, %rd102, %rd121;
	add.s32 	%r564, %r500, %r1;
	mul.wide.u32 	%rd122, %r564, 4;
	add.s64 	%rd28, %rd102, %rd122;
	add.s32 	%r565, %r502, %r1;
	mul.wide.u32 	%rd123, %r565, 4;
	add.s64 	%rd29, %rd102, %rd123;
	add.s32 	%r566, %r504, %r1;
	mul.wide.u32 	%rd124, %r566, 4;
	add.s64 	%rd30, %rd102, %rd124;
	add.s32 	%r567, %r506, %r1;
	mul.wide.u32 	%rd125, %r567, 4;
	add.s64 	%rd31, %rd102, %rd125;
	add.s32 	%r568, %r508, %r1;
	mul.wide.u32 	%rd126, %r568, 4;
	add.s64 	%rd32, %rd102, %rd126;
	add.s32 	%r569, %r510, %r1;
	mul.wide.u32 	%rd127, %r569, 4;
	add.s64 	%rd33, %rd102, %rd127;
	add.s32 	%r570, %r512, %r1;
	mul.wide.u32 	%rd128, %r570, 4;
	add.s64 	%rd34, %rd102, %rd128;
	add.s32 	%r571, %r514, %r1;
	mul.wide.u32 	%rd129, %r571, 4;
	add.s64 	%rd35, %rd102, %rd129;
	add.s32 	%r572, %r516, %r1;
	mul.wide.u32 	%rd130, %r572, 4;
	add.s64 	%rd36, %rd102, %rd130;
	add.s32 	%r573, %r518, %r1;
	mul.wide.u32 	%rd131, %r573, 4;
	add.s64 	%rd37, %rd102, %rd131;
	add.s32 	%r574, %r520, %r1;
	mul.wide.u32 	%rd132, %r574, 4;
	add.s64 	%rd38, %rd102, %rd132;
	add.s32 	%r575, %r522, %r1;
	mul.wide.u32 	%rd133, %r575, 4;
	add.s64 	%rd39, %rd102, %rd133;
	add.s32 	%r576, %r524, %r1;
	mul.wide.u32 	%rd134, %r576, 4;
	add.s64 	%rd40, %rd102, %rd134;
	add.s32 	%r577, %r526, %r1;
	mul.wide.u32 	%rd135, %r577, 4;
	add.s64 	%rd41, %rd102, %rd135;
	add.s32 	%r578, %r528, %r1;
	mul.wide.u32 	%rd136, %r578, 4;
	add.s64 	%rd42, %rd102, %rd136;
	add.s32 	%r579, %r531, %r190;
	mul.wide.u32 	%rd137, %r579, 4;
	add.s64 	%rd43, %rd102, %rd137;
	add.s32 	%r580, %r531, %r499;
	mul.wide.u32 	%rd138, %r580, 4;
	add.s64 	%rd44, %rd102, %rd138;
	add.s32 	%r581, %r531, %r501;
	mul.wide.u32 	%rd139, %r581, 4;
	add.s64 	%rd45, %rd102, %rd139;
	add.s32 	%r582, %r531, %r503;
	mul.wide.u32 	%rd140, %r582, 4;
	add.s64 	%rd46, %rd102, %rd140;
	add.s32 	%r583, %r531, %r505;
	mul.wide.u32 	%rd141, %r583, 4;
	add.s64 	%rd47, %rd102, %rd141;
	add.s32 	%r584, %r531, %r507;
	mul.wide.u32 	%rd142, %r584, 4;
	add.s64 	%rd48, %rd102, %rd142;
	add.s32 	%r585, %r531, %r509;
	mul.wide.u32 	%rd143, %r585, 4;
	add.s64 	%rd49, %rd102, %rd143;
	add.s32 	%r586, %r531, %r511;
	mul.wide.u32 	%rd144, %r586, 4;
	add.s64 	%rd50, %rd102, %rd144;
	add.s32 	%r587, %r531, %r513;
	mul.wide.u32 	%rd145, %r587, 4;
	add.s64 	%rd51, %rd102, %rd145;
	add.s32 	%r588, %r531, %r515;
	mul.wide.u32 	%rd146, %r588, 4;
	add.s64 	%rd52, %rd102, %rd146;
	add.s32 	%r589, %r531, %r517;
	mul.wide.u32 	%rd147, %r589, 4;
	add.s64 	%rd53, %rd102, %rd147;
	add.s32 	%r590, %r531, %r519;
	mul.wide.u32 	%rd148, %r590, 4;
	add.s64 	%rd54, %rd102, %rd148;
	add.s32 	%r591, %r531, %r521;
	mul.wide.u32 	%rd149, %r591, 4;
	add.s64 	%rd55, %rd102, %rd149;
	add.s32 	%r592, %r531, %r523;
	mul.wide.u32 	%rd150, %r592, 4;
	add.s64 	%rd56, %rd102, %rd150;
	add.s32 	%r593, %r531, %r525;
	mul.wide.u32 	%rd151, %r593, 4;
	add.s64 	%rd57, %rd102, %rd151;
	add.s32 	%r594, %r531, %r527;
	mul.wide.u32 	%rd152, %r594, 4;
	add.s64 	%rd58, %rd102, %rd152;
	add.s32 	%r595, %r7, -1;
	setp.lt.u32 	%p215, %r595, 3;
	or.pred  	%p216, %p207, %p215;
	or.pred  	%p217, %p216, %p208;
	and.b32  	%r596, %r1, 24;
	setp.eq.s32 	%p218, %r596, 24;
	or.pred  	%p219, %p209, %p218;
	selp.b32 	%r202, 1145324612, -286331154, %p216;
	or.pred  	%p1, %p217, %p219;
	shl.b32 	%r597, %r190, 5;
	add.s32 	%r598, %r196, %r597;
	mul.wide.u32 	%rd153, %r598, 4;
	add.s64 	%rd59, %rd102, %rd153;
	add.s32 	%r599, %r197, %r597;
	mul.wide.u32 	%rd154, %r599, 4;
	add.s64 	%rd60, %rd102, %rd154;
	cvt.u64.u32 	%rd155, %r597;
	selp.b64 	%rd156, 2064, 0, %p211;
	cvt.u64.u32 	%rd157, %r194;
	cvt.u64.u32 	%rd158, %r538;
	add.s64 	%rd159, %rd158, %rd157;
	add.s64 	%rd160, %rd159, %rd156;
	add.s64 	%rd161, %rd160, %rd155;
	shl.b64 	%rd162, %rd161, 2;
	add.s64 	%rd61, %rd102, %rd162;
	cvt.u64.u32 	%rd163, %r542;
	add.s64 	%rd164, %rd163, %rd157;
	add.s64 	%rd165, %rd164, %rd156;
	add.s64 	%rd166, %rd165, %rd155;
	shl.b64 	%rd167, %rd166, 2;
	add.s64 	%rd62, %rd102, %rd167;
	shl.b32 	%r600, %r499, 5;
	add.s32 	%r601, %r196, %r600;
	mul.wide.u32 	%rd168, %r601, 4;
	add.s64 	%rd63, %rd102, %rd168;
	add.s32 	%r602, %r197, %r600;
	mul.wide.u32 	%rd169, %r602, 4;
	add.s64 	%rd64, %rd102, %rd169;
	cvt.u64.u32 	%rd170, %r600;
	add.s64 	%rd171, %rd160, %rd170;
	shl.b64 	%rd172, %rd171, 2;
	add.s64 	%rd65, %rd102, %rd172;
	add.s64 	%rd173, %rd165, %rd170;
	shl.b64 	%rd174, %rd173, 2;
	add.s64 	%rd66, %rd102, %rd174;
	shl.b32 	%r603, %r501, 5;
	add.s32 	%r604, %r196, %r603;
	mul.wide.u32 	%rd175, %r604, 4;
	add.s64 	%rd67, %rd102, %rd175;
	add.s32 	%r605, %r197, %r603;
	mul.wide.u32 	%rd176, %r605, 4;
	add.s64 	%rd68, %rd102, %rd176;
	cvt.u64.u32 	%rd177, %r603;
	add.s64 	%rd178, %rd160, %rd177;
	shl.b64 	%rd179, %rd178, 2;
	add.s64 	%rd69, %rd102, %rd179;
	add.s64 	%rd180, %rd165, %rd177;
	shl.b64 	%rd181, %rd180, 2;
	add.s64 	%rd70, %rd102, %rd181;
	shl.b32 	%r606, %r503, 5;
	add.s32 	%r607, %r196, %r606;
	mul.wide.u32 	%rd182, %r607, 4;
	add.s64 	%rd71, %rd102, %rd182;
	add.s32 	%r608, %r197, %r606;
	mul.wide.u32 	%rd183, %r608, 4;
	add.s64 	%rd72, %rd102, %rd183;
	cvt.u64.u32 	%rd184, %r606;
	add.s64 	%rd185, %rd160, %rd184;
	shl.b64 	%rd186, %rd185, 2;
	add.s64 	%rd73, %rd102, %rd186;
	add.s64 	%rd187, %rd165, %rd184;
	shl.b64 	%rd188, %rd187, 2;
	add.s64 	%rd74, %rd102, %rd188;
	add.s32 	%r609, %r561, 32;
	mul.wide.u32 	%rd189, %r609, 4;
	add.s64 	%rd75, %rd102, %rd189;
	add.s32 	%r610, %r561, 48;
	mul.wide.u32 	%rd190, %r610, 4;
	add.s64 	%rd76, %rd102, %rd190;
	add.s32 	%r611, %r561, 64;
	mul.wide.u32 	%rd191, %r611, 4;
	add.s64 	%rd77, %rd102, %rd191;
	add.s32 	%r612, %r561, 80;
	mul.wide.u32 	%rd192, %r612, 4;
	add.s64 	%rd78, %rd102, %rd192;
	add.s32 	%r613, %r561, 96;
	mul.wide.u32 	%rd193, %r613, 4;
	add.s64 	%rd79, %rd102, %rd193;
	add.s32 	%r614, %r561, 112;
	mul.wide.u32 	%rd194, %r614, 4;
	add.s64 	%rd80, %rd102, %rd194;
	add.s32 	%r615, %r561, 128;
	mul.wide.u32 	%rd195, %r615, 4;
	add.s64 	%rd81, %rd102, %rd195;
	add.s32 	%r616, %r561, 144;
	mul.wide.u32 	%rd196, %r616, 4;
	add.s64 	%rd82, %rd102, %rd196;
	add.s32 	%r617, %r561, 160;
	mul.wide.u32 	%rd197, %r617, 4;
	add.s64 	%rd83, %rd102, %rd197;
	add.s32 	%r618, %r561, 176;
	mul.wide.u32 	%rd198, %r618, 4;
	add.s64 	%rd84, %rd102, %rd198;
	add.s32 	%r619, %r561, 192;
	mul.wide.u32 	%rd199, %r619, 4;
	add.s64 	%rd85, %rd102, %rd199;
	add.s32 	%r620, %r561, 208;
	mul.wide.u32 	%rd200, %r620, 4;
	add.s64 	%rd86, %rd102, %rd200;
	add.s32 	%r621, %r561, 224;
	mul.wide.u32 	%rd201, %r621, 4;
	add.s64 	%rd87, %rd102, %rd201;
	add.s32 	%r622, %r561, 240;
	mul.wide.u32 	%rd202, %r622, 4;
	add.s64 	%rd88, %rd102, %rd202;
	mov.u32 	%r3475, 0;
	setp.eq.s32 	%p220, %r189, 0;
	mov.u16 	%rs38, 25600;
	mov.u16 	%rs40, 21504;
	mov.u16 	%rs44, 18432;
	mov.u32 	%r3480, %r3475;
	mov.u32 	%r3499, %r3475;
	mov.u32 	%r3482, %r3475;
	bra.uni 	$L__BB0_124;
$L__BB0_186:                            // %L38488
                                        //   in Loop: Header=BB0_124 Depth=1
	add.s32 	%r161, %r3475, 64;
	setp.ne.s32 	%p263, %r3475, 64;
	mov.u32 	%r3475, %r161;
	@%p263 bra 	$L__BB0_124;
	bra.uni 	$L__BB0_187;
$L__BB0_124:                            // %L1153
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_125 Depth 2
                                        //     Child Loop BB0_153 Depth 2
	cvt.u32.u64 	%r816, %rd25;
	or.b32  	%r817, %r3475, %r4;
	shl.b32 	%r818, %r817, 17;
	and.b32  	%r819, %r818, 10354688;
	or.b32  	%r820, %r188, %r819;
	shl.b32 	%r821, %r820, 2;
	cvt.u64.u32 	%rd203, %r821;
	add.s64 	%rd204, %rd3, %rd203;
	ld.global.v4.u32 	{%r822, %r823, %r824, %r825}, [%rd204];
	or.b32  	%r826, %r817, 16;
	shl.b32 	%r827, %r826, 17;
	and.b32  	%r828, %r827, 12451840;
	or.b32  	%r829, %r188, %r828;
	shl.b32 	%r830, %r829, 2;
	cvt.u64.u32 	%rd205, %r830;
	add.s64 	%rd206, %rd3, %rd205;
	ld.global.v4.u32 	{%r831, %r832, %r833, %r834}, [%rd206];
	and.b32  	%r835, %r3475, 64;
	or.b32  	%r836, %r4, %r835;
	shl.b32 	%r837, %r836, 19;
	shl.b32 	%r838, %r188, 2;
	or.b32  	%r839, %r837, %r838;
	or.b32  	%r840, %r839, 16777216;
	cvt.u64.u32 	%rd207, %r840;
	add.s64 	%rd208, %rd3, %rd207;
	ld.global.v4.u32 	{%r841, %r842, %r843, %r844}, [%rd208];
	or.b32  	%r845, %r839, 25165824;
	cvt.u64.u32 	%rd209, %r845;
	add.s64 	%rd210, %rd3, %rd209;
	ld.global.v4.u32 	{%r846, %r847, %r848, %r849}, [%rd210];
	selp.b32 	%r850, %r824, %r822, %p220;
	shfl.sync.bfly.b32	%r851, %r850, 16, 31, -1;
	selp.b32 	%r625, %r822, %r851, %p220;
	selp.b32 	%r630, %r851, %r824, %p220;
	selp.b32 	%r852, %r825, %r823, %p220;
	shfl.sync.bfly.b32	%r853, %r852, 16, 31, -1;
	selp.b32 	%r633, %r823, %r853, %p220;
	selp.b32 	%r638, %r853, %r825, %p220;
	selp.b32 	%r854, %r833, %r831, %p220;
	shfl.sync.bfly.b32	%r855, %r854, 16, 31, -1;
	selp.b32 	%r641, %r831, %r855, %p220;
	selp.b32 	%r646, %r855, %r833, %p220;
	selp.b32 	%r856, %r834, %r832, %p220;
	shfl.sync.bfly.b32	%r857, %r856, 16, 31, -1;
	selp.b32 	%r649, %r832, %r857, %p220;
	selp.b32 	%r654, %r857, %r834, %p220;
	selp.b32 	%r858, %r843, %r841, %p220;
	shfl.sync.bfly.b32	%r859, %r858, 16, 31, -1;
	selp.b32 	%r657, %r841, %r859, %p220;
	selp.b32 	%r662, %r859, %r843, %p220;
	selp.b32 	%r860, %r844, %r842, %p220;
	shfl.sync.bfly.b32	%r861, %r860, 16, 31, -1;
	selp.b32 	%r665, %r842, %r861, %p220;
	selp.b32 	%r670, %r861, %r844, %p220;
	selp.b32 	%r862, %r848, %r846, %p220;
	shfl.sync.bfly.b32	%r863, %r862, 16, 31, -1;
	selp.b32 	%r673, %r846, %r863, %p220;
	selp.b32 	%r678, %r863, %r848, %p220;
	selp.b32 	%r864, %r849, %r847, %p220;
	shfl.sync.bfly.b32	%r865, %r864, 16, 31, -1;
	selp.b32 	%r681, %r847, %r865, %p220;
	selp.b32 	%r686, %r865, %r849, %p220;
	shl.b32 	%r626, %r630, 4;
	mov.u32 	%r624, 252645135;
	// begin inline asm
	lop3.b32 %r688, %r624, %r625, %r626, 202;
	// end inline asm
	shr.u32 	%r629, %r625, 4;
	// begin inline asm
	lop3.b32 %r704, %r624, %r629, %r630, 202;
	// end inline asm
	shl.b32 	%r634, %r638, 4;
	// begin inline asm
	lop3.b32 %r696, %r624, %r633, %r634, 202;
	// end inline asm
	shr.u32 	%r637, %r633, 4;
	// begin inline asm
	lop3.b32 %r712, %r624, %r637, %r638, 202;
	// end inline asm
	shl.b32 	%r642, %r646, 4;
	// begin inline asm
	lop3.b32 %r720, %r624, %r641, %r642, 202;
	// end inline asm
	shr.u32 	%r645, %r641, 4;
	// begin inline asm
	lop3.b32 %r736, %r624, %r645, %r646, 202;
	// end inline asm
	shl.b32 	%r650, %r654, 4;
	// begin inline asm
	lop3.b32 %r728, %r624, %r649, %r650, 202;
	// end inline asm
	shr.u32 	%r653, %r649, 4;
	// begin inline asm
	lop3.b32 %r744, %r624, %r653, %r654, 202;
	// end inline asm
	shl.b32 	%r658, %r662, 4;
	// begin inline asm
	lop3.b32 %r689, %r624, %r657, %r658, 202;
	// end inline asm
	shr.u32 	%r661, %r657, 4;
	// begin inline asm
	lop3.b32 %r705, %r624, %r661, %r662, 202;
	// end inline asm
	shl.b32 	%r666, %r670, 4;
	// begin inline asm
	lop3.b32 %r697, %r624, %r665, %r666, 202;
	// end inline asm
	shr.u32 	%r669, %r665, 4;
	// begin inline asm
	lop3.b32 %r713, %r624, %r669, %r670, 202;
	// end inline asm
	shl.b32 	%r674, %r678, 4;
	// begin inline asm
	lop3.b32 %r721, %r624, %r673, %r674, 202;
	// end inline asm
	shr.u32 	%r677, %r673, 4;
	// begin inline asm
	lop3.b32 %r737, %r624, %r677, %r678, 202;
	// end inline asm
	shl.b32 	%r682, %r686, 4;
	// begin inline asm
	lop3.b32 %r729, %r624, %r681, %r682, 202;
	// end inline asm
	shr.u32 	%r685, %r681, 4;
	// begin inline asm
	lop3.b32 %r745, %r624, %r685, %r686, 202;
	// end inline asm
	mov.u32 	%r690, 25152;
	// begin inline asm
	prmt.b32 %r752, %r688, %r689, %r690;
	// end inline asm
	mov.u32 	%r694, 29521;
	// begin inline asm
	prmt.b32 %r784, %r688, %r689, %r694;
	// end inline asm
	// begin inline asm
	prmt.b32 %r760, %r696, %r697, %r690;
	// end inline asm
	// begin inline asm
	prmt.b32 %r792, %r696, %r697, %r694;
	// end inline asm
	// begin inline asm
	prmt.b32 %r753, %r704, %r705, %r690;
	// end inline asm
	// begin inline asm
	prmt.b32 %r785, %r704, %r705, %r694;
	// end inline asm
	// begin inline asm
	prmt.b32 %r761, %r712, %r713, %r690;
	// end inline asm
	// begin inline asm
	prmt.b32 %r793, %r712, %r713, %r694;
	// end inline asm
	// begin inline asm
	prmt.b32 %r768, %r720, %r721, %r690;
	// end inline asm
	// begin inline asm
	prmt.b32 %r800, %r720, %r721, %r694;
	// end inline asm
	// begin inline asm
	prmt.b32 %r776, %r728, %r729, %r690;
	// end inline asm
	// begin inline asm
	prmt.b32 %r808, %r728, %r729, %r694;
	// end inline asm
	// begin inline asm
	prmt.b32 %r769, %r736, %r737, %r690;
	// end inline asm
	// begin inline asm
	prmt.b32 %r801, %r736, %r737, %r694;
	// end inline asm
	// begin inline asm
	prmt.b32 %r777, %r744, %r745, %r690;
	// end inline asm
	// begin inline asm
	prmt.b32 %r809, %r744, %r745, %r694;
	// end inline asm
	mov.u32 	%r810, 21520;
	// begin inline asm
	prmt.b32 %r751, %r752, %r753, %r810;
	// end inline asm
	mov.u32 	%r814, 30258;
	// begin inline asm
	prmt.b32 %r755, %r752, %r753, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r759, %r760, %r761, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r763, %r760, %r761, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r767, %r768, %r769, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r771, %r768, %r769, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r775, %r776, %r777, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r779, %r776, %r777, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r783, %r784, %r785, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r787, %r784, %r785, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r791, %r792, %r793, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r795, %r792, %r793, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r799, %r800, %r801, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r803, %r800, %r801, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r807, %r808, %r809, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r811, %r808, %r809, %r814;
	// end inline asm
	st.shared.u32 	[%rd24], %r751;
	st.shared.u32 	[%rd26+512], %r759;
	st.shared.u32 	[%rd26+256], %r755;
	st.shared.u32 	[%rd26+768], %r763;
	and.b32  	%r866, %r826, 31;
	add.s32 	%r867, %r866, %r816;
	mul.wide.u32 	%rd211, %r867, 4;
	add.s64 	%rd213, %rd102, %rd211;
	st.shared.u32 	[%rd213], %r767;
	cvt.u64.u32 	%rd214, %r866;
	add.s64 	%rd215, %rd25, %rd214;
	shl.b64 	%rd216, %rd215, 2;
	add.s64 	%rd217, %rd102, %rd216;
	st.shared.u32 	[%rd217+512], %r775;
	st.shared.u32 	[%rd217+256], %r771;
	st.shared.u32 	[%rd217+768], %r779;
	st.shared.u32 	[%rd26+128], %r783;
	st.shared.u32 	[%rd26+640], %r791;
	st.shared.u32 	[%rd26+384], %r787;
	st.shared.u32 	[%rd26+896], %r795;
	st.shared.u32 	[%rd217+128], %r799;
	st.shared.u32 	[%rd217+640], %r807;
	st.shared.u32 	[%rd217+384], %r803;
	st.shared.u32 	[%rd217+896], %r811;
	bar.sync 	0;
	ld.shared.u32 	%r868, [%rd27];
	ld.shared.u32 	%r869, [%rd28];
	ld.shared.u32 	%r870, [%rd29];
	ld.shared.u32 	%r871, [%rd30];
	ld.shared.u32 	%r872, [%rd31];
	ld.shared.u32 	%r873, [%rd32];
	ld.shared.u32 	%r874, [%rd33];
	ld.shared.u32 	%r875, [%rd34];
	ld.shared.u32 	%r876, [%rd35];
	ld.shared.u32 	%r877, [%rd36];
	ld.shared.u32 	%r878, [%rd37];
	ld.shared.u32 	%r879, [%rd38];
	ld.shared.u32 	%r880, [%rd39];
	ld.shared.u32 	%r881, [%rd40];
	ld.shared.u32 	%r882, [%rd41];
	ld.shared.u32 	%r883, [%rd42];
	bar.sync 	0;
	shfl.sync.idx.b32	%r884, %r185, 0, 31, -1;
	shfl.sync.idx.b32	%r885, %r185, 1, 31, -1;
	shfl.sync.idx.b32	%r886, %r185, 2, 31, -1;
	shfl.sync.idx.b32	%r887, %r185, 3, 31, -1;
	shfl.sync.idx.b32	%r888, %r185, 4, 31, -1;
	shfl.sync.idx.b32	%r889, %r185, 5, 31, -1;
	shfl.sync.idx.b32	%r890, %r185, 6, 31, -1;
	shfl.sync.idx.b32	%r891, %r185, 7, 31, -1;
	shfl.sync.idx.b32	%r892, %r185, 8, 31, -1;
	shfl.sync.idx.b32	%r893, %r185, 9, 31, -1;
	shfl.sync.idx.b32	%r894, %r185, 10, 31, -1;
	shfl.sync.idx.b32	%r895, %r185, 11, 31, -1;
	shfl.sync.idx.b32	%r896, %r185, 12, 31, -1;
	shfl.sync.idx.b32	%r897, %r185, 13, 31, -1;
	shfl.sync.idx.b32	%r898, %r185, 14, 31, -1;
	shfl.sync.idx.b32	%r899, %r185, 15, 31, -1;
	add.s32 	%r900, %r884, %r1;
	mul.wide.s32 	%rd218, %r900, 4;
	add.s64 	%rd219, %rd102, %rd218;
	st.shared.u32 	[%rd219], %r868;
	add.s32 	%r901, %r885, %r1;
	mul.wide.s32 	%rd220, %r901, 4;
	add.s64 	%rd221, %rd102, %rd220;
	st.shared.u32 	[%rd221], %r869;
	add.s32 	%r902, %r886, %r1;
	mul.wide.s32 	%rd222, %r902, 4;
	add.s64 	%rd223, %rd102, %rd222;
	st.shared.u32 	[%rd223], %r870;
	add.s32 	%r903, %r887, %r1;
	mul.wide.s32 	%rd224, %r903, 4;
	add.s64 	%rd225, %rd102, %rd224;
	st.shared.u32 	[%rd225], %r871;
	add.s32 	%r904, %r888, %r1;
	mul.wide.s32 	%rd226, %r904, 4;
	add.s64 	%rd227, %rd102, %rd226;
	st.shared.u32 	[%rd227], %r872;
	add.s32 	%r905, %r889, %r1;
	mul.wide.s32 	%rd228, %r905, 4;
	add.s64 	%rd229, %rd102, %rd228;
	st.shared.u32 	[%rd229], %r873;
	add.s32 	%r906, %r890, %r1;
	mul.wide.s32 	%rd230, %r906, 4;
	add.s64 	%rd231, %rd102, %rd230;
	st.shared.u32 	[%rd231], %r874;
	add.s32 	%r907, %r891, %r1;
	mul.wide.s32 	%rd232, %r907, 4;
	add.s64 	%rd233, %rd102, %rd232;
	st.shared.u32 	[%rd233], %r875;
	add.s32 	%r908, %r892, %r1;
	mul.wide.s32 	%rd234, %r908, 4;
	add.s64 	%rd235, %rd102, %rd234;
	st.shared.u32 	[%rd235], %r876;
	add.s32 	%r909, %r893, %r1;
	mul.wide.s32 	%rd236, %r909, 4;
	add.s64 	%rd237, %rd102, %rd236;
	st.shared.u32 	[%rd237], %r877;
	add.s32 	%r910, %r894, %r1;
	mul.wide.s32 	%rd238, %r910, 4;
	add.s64 	%rd239, %rd102, %rd238;
	st.shared.u32 	[%rd239], %r878;
	add.s32 	%r911, %r895, %r1;
	mul.wide.s32 	%rd240, %r911, 4;
	add.s64 	%rd241, %rd102, %rd240;
	st.shared.u32 	[%rd241], %r879;
	add.s32 	%r912, %r896, %r1;
	mul.wide.s32 	%rd242, %r912, 4;
	add.s64 	%rd243, %rd102, %rd242;
	st.shared.u32 	[%rd243], %r880;
	add.s32 	%r913, %r897, %r1;
	mul.wide.s32 	%rd244, %r913, 4;
	add.s64 	%rd245, %rd102, %rd244;
	st.shared.u32 	[%rd245], %r881;
	add.s32 	%r914, %r898, %r1;
	mul.wide.s32 	%rd246, %r914, 4;
	add.s64 	%rd247, %rd102, %rd246;
	st.shared.u32 	[%rd247], %r882;
	add.s32 	%r915, %r899, %r1;
	mul.wide.s32 	%rd248, %r915, 4;
	add.s64 	%rd249, %rd102, %rd248;
	st.shared.u32 	[%rd249], %r883;
	bar.sync 	0;
	ld.shared.u32 	%r91, [%rd43];
	ld.shared.u32 	%r92, [%rd44];
	ld.shared.u32 	%r93, [%rd45];
	ld.shared.u32 	%r94, [%rd46];
	ld.shared.u32 	%r95, [%rd47];
	ld.shared.u32 	%r96, [%rd48];
	ld.shared.u32 	%r97, [%rd49];
	ld.shared.u32 	%r98, [%rd50];
	ld.shared.u32 	%r99, [%rd51];
	ld.shared.u32 	%r100, [%rd52];
	ld.shared.u32 	%r101, [%rd53];
	ld.shared.u32 	%r102, [%rd54];
	ld.shared.u32 	%r103, [%rd55];
	ld.shared.u32 	%r104, [%rd56];
	ld.shared.u32 	%r105, [%rd57];
	ld.shared.u32 	%r106, [%rd58];
	bar.sync 	0;
	mov.u32 	%r3479, 16;
	bra.uni 	$L__BB0_125;
$L__BB0_150:                            // %L24347
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s32 	%r3499, %r3499, 1;
	mov.u32 	%r3480, 0;
	mov.u32 	%r3482, %r3480;
$L__BB0_151:                            // %L24348
                                        //   in Loop: Header=BB0_125 Depth=2
	bar.sync 	0;
	add.s32 	%r3479, %r3479, -8;
	setp.ne.s32 	%p241, %r3479, -16;
	@%p241 bra 	$L__BB0_125;
	bra.uni 	$L__BB0_152;
$L__BB0_125:                            // %L10245
                                        //   Parent Loop BB0_124 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p221, %r3479, 16;
	selp.b32 	%r1308, %r91, 0, %p221;
	setp.eq.s32 	%p222, %r3479, 8;
	selp.b32 	%r1309, %r95, %r1308, %p222;
	setp.eq.s32 	%p223, %r3479, 0;
	selp.b32 	%r1310, %r99, %r1309, %p223;
	setp.eq.s32 	%p224, %r3479, -8;
	selp.b32 	%r1311, %r103, %r1310, %p224;
	selp.b32 	%r1312, %r92, 0, %p221;
	selp.b32 	%r1313, %r96, %r1312, %p222;
	selp.b32 	%r1314, %r100, %r1313, %p223;
	selp.b32 	%r1315, %r104, %r1314, %p224;
	selp.b32 	%r1316, %r93, 0, %p221;
	selp.b32 	%r1317, %r97, %r1316, %p222;
	selp.b32 	%r1318, %r101, %r1317, %p223;
	selp.b32 	%r1319, %r105, %r1318, %p224;
	selp.b32 	%r1320, %r94, 0, %p221;
	selp.b32 	%r1321, %r98, %r1320, %p222;
	selp.b32 	%r1322, %r102, %r1321, %p223;
	selp.b32 	%r1323, %r106, %r1322, %p224;
	// begin inline asm
	mov.b32 %r921, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r932, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r920, %r1311, -2004318072;
	mov.u32 	%r1057, 983055;
	// begin inline asm
	lop3.b32 %r918, %r1057, %r920, %r921, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r922, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r923, %r921, %r922;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r926, %r918, %r923;
	// end inline asm
	mov.u32 	%r1068, 15728880;
	// begin inline asm
	lop3.b32 %r929, %r1068, %r920, %r932, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r933, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r934, %r932, %r933;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r937, %r929, %r934;
	// end inline asm
	// begin inline asm
	mov.b32 %r967, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r978, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r966, %r1315, -2004318072;
	// begin inline asm
	lop3.b32 %r964, %r1057, %r966, %r967, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r968, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r969, %r967, %r968;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r972, %r964, %r969;
	// end inline asm
	// begin inline asm
	lop3.b32 %r975, %r1068, %r966, %r978, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r979, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r980, %r978, %r979;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r983, %r975, %r980;
	// end inline asm
	// begin inline asm
	mov.b32 %r1013, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1024, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1012, %r1319, -2004318072;
	// begin inline asm
	lop3.b32 %r1010, %r1057, %r1012, %r1013, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1014, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1015, %r1013, %r1014;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1018, %r1010, %r1015;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1021, %r1068, %r1012, %r1024, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1025, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1026, %r1024, %r1025;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1029, %r1021, %r1026;
	// end inline asm
	// begin inline asm
	mov.b32 %r1059, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1070, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1058, %r1323, -2004318072;
	// begin inline asm
	lop3.b32 %r1056, %r1057, %r1058, %r1059, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1060, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1061, %r1059, %r1060;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1064, %r1056, %r1061;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1067, %r1068, %r1058, %r1070, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1071, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1072, %r1070, %r1071;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1075, %r1067, %r1072;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r186;
    mov.b32 {%r2re, %r2im}, %r926;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1100, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r187;
    mov.b32 {%r2re, %r2im}, %r937;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1103, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r186;
    mov.b32 {%r2re, %r2im}, %r972;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1106, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r187;
    mov.b32 {%r2re, %r2im}, %r983;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1109, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r186;
    mov.b32 {%r2re, %r2im}, %r1018;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1112, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r187;
    mov.b32 {%r2re, %r2im}, %r1029;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1115, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r186;
    mov.b32 {%r2re, %r2im}, %r1064;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1118, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r187;
    mov.b32 {%r2re, %r2im}, %r1075;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1121, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1179, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1124, %r1125}, {%r289, %r292}, {%r1100}, {%r1179, %r1179};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1131, %r1132}, {%r289, %r292}, {%r1103}, {%r1179, %r1179};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1138, %r1139}, {%r289, %r292}, {%r1106}, {%r1179, %r1179};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1145, %r1146}, {%r289, %r292}, {%r1109}, {%r1179, %r1179};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1152, %r1153}, {%r289, %r292}, {%r1112}, {%r1179, %r1179};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1159, %r1160}, {%r289, %r292}, {%r1115}, {%r1179, %r1179};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1166, %r1167}, {%r289, %r292}, {%r1118}, {%r1179, %r1179};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1173, %r1174}, {%r289, %r292}, {%r1121}, {%r1179, %r1179};
	// end inline asm
	@%p1 bra 	$L__BB0_213;
	bra.uni 	$L__BB0_126;
$L__BB0_213:                            // %pass4679
                                        //   in Loop: Header=BB0_125 Depth=2
	// begin inline asm
	neg.f16x2 %r1180, %r330;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1182, %r1180, %r1125;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1185, %r327, %r1124, %r1182;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1189, %r330;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1191, %r1189, %r1132;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1194, %r327, %r1131, %r1191;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1198, %r330;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1200, %r1198, %r1139;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1203, %r327, %r1138, %r1200;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1207, %r330;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1209, %r1207, %r1146;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1212, %r327, %r1145, %r1209;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1216, %r330;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1218, %r1216, %r1153;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1221, %r327, %r1152, %r1218;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1225, %r330;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1227, %r1225, %r1160;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1230, %r327, %r1159, %r1227;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1234, %r330;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1236, %r1234, %r1167;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1239, %r327, %r1166, %r1236;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1243, %r330;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1245, %r1243, %r1174;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1248, %r327, %r1173, %r1245;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1252, %r330, %r1124;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1255, %r327, %r1125, %r1252;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1259, %r330, %r1131;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1262, %r327, %r1132, %r1259;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1266, %r330, %r1138;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1269, %r327, %r1139, %r1266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1273, %r330, %r1145;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1276, %r327, %r1146, %r1273;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1280, %r330, %r1152;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1283, %r327, %r1153, %r1280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1287, %r330, %r1159;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1290, %r327, %r1160, %r1287;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1294, %r330, %r1166;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1297, %r327, %r1167, %r1294;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1301, %r330, %r1173;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1304, %r327, %r1174, %r1301;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1397, %r1398}, {%r374, %r377}, {%r1185, %r1255}, {%r1179, %r1179}, %r202, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1405, %r1406}, {%r374, %r377}, {%r1194, %r1262}, {%r1179, %r1179}, %r202, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1413, %r1414}, {%r374, %r377}, {%r1203, %r1269}, {%r1179, %r1179}, %r202, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1421, %r1422}, {%r374, %r377}, {%r1212, %r1276}, {%r1179, %r1179}, %r202, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1429, %r1430}, {%r374, %r377}, {%r1221, %r1283}, {%r1179, %r1179}, %r202, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1437, %r1438}, {%r374, %r377}, {%r1230, %r1290}, {%r1179, %r1179}, %r202, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1445, %r1446}, {%r374, %r377}, {%r1239, %r1297}, {%r1179, %r1179}, %r202, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1453, %r1454}, {%r374, %r377}, {%r1248, %r1304}, {%r1179, %r1179}, %r202, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1396, %r1397, %r1398, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1400, %r1397, %r1398, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1404, %r1405, %r1406, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1408, %r1405, %r1406, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1412, %r1413, %r1414, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1416, %r1413, %r1414, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1420, %r1421, %r1422, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1424, %r1421, %r1422, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1428, %r1429, %r1430, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1432, %r1429, %r1430, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1436, %r1437, %r1438, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1440, %r1437, %r1438, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1444, %r1445, %r1446, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1448, %r1445, %r1446, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1452, %r1453, %r1454, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1456, %r1453, %r1454, %r814;
	// end inline asm
	st.shared.u32 	[%rd59], %r1396;
	st.shared.u32 	[%rd60], %r1400;
	st.shared.u32 	[%rd61+64], %r1404;
	st.shared.u32 	[%rd62+64], %r1408;
	st.shared.u32 	[%rd63], %r1412;
	st.shared.u32 	[%rd64], %r1416;
	st.shared.u32 	[%rd65+64], %r1420;
	st.shared.u32 	[%rd66+64], %r1424;
	st.shared.u32 	[%rd67], %r1428;
	st.shared.u32 	[%rd68], %r1432;
	st.shared.u32 	[%rd69+64], %r1436;
	st.shared.u32 	[%rd70+64], %r1440;
	st.shared.u32 	[%rd71], %r1444;
	st.shared.u32 	[%rd72], %r1448;
	st.shared.u32 	[%rd73+64], %r1452;
	st.shared.u32 	[%rd74+64], %r1456;
	bar.sync 	0;
	ld.shared.u32 	%r1464, [%rd22];
	ld.shared.u32 	%r1471, [%rd23+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1481, %r1478}, {%r386, %r389}, {%r1464}, {%r1179, %r1179};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1490, %r1487}, {%r386, %r389}, {%r1471}, {%r1179, %r1179};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1474, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1476, %r1474, %r1478;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1479, %r420, %r1481, %r1476;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1483, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1485, %r1483, %r1487;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1488, %r420, %r1490, %r1485;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1492, %r423, %r1481;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1495, %r420, %r1478, %r1492;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1499, %r423, %r1490;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1502, %r420, %r1487, %r1499;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1525, %r1528}, {%r462, %r465}, {%r1479, %r1495}, {%r1179, %r1179}, %r202, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1532, %r1536}, {%r462, %r465}, {%r1488, %r1502}, {%r1179, %r1179}, %r202, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1524, %r1525, %r1525;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1527, %r1528, %r1528, %r1524;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1531, %r1532, %r1532, %r1527;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1535, %r1536, %r1536, %r1531;
	// end inline asm
	mov.u32 	%r1540, 488578335;
	// begin inline asm
	fma.rn.f16x2 %r3500, %r1540, %r1535, %r3482;
	// end inline asm
	add.s32 	%r3498, %r3480, 1;
	setp.eq.s32 	%p225, %r3498, 25;
	@%p225 bra 	$L__BB0_127;
	bra.uni 	$L__BB0_214;
$L__BB0_127:                            // %L16294
                                        //   in Loop: Header=BB0_125 Depth=2
	@%p205 bra 	$L__BB0_129;
// %bb.128:                             // %L16354
                                        //   in Loop: Header=BB0_125 Depth=2
	shl.b32 	%r1543, %r3499, 9;
	add.s32 	%r1544, %r1543, %r199;
	or.b32  	%r1545, %r1544, %r200;
	or.b32  	%r1546, %r1545, %r201;
	mul.wide.u32 	%rd252, %r1546, 4;
	add.s64 	%rd6, %rd4, %rd252;
	st.global.u32 	[%rd6], %r3500;
$L__BB0_129:                            // %L16493
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s32 	%r3499, %r3499, 1;
	mov.u32 	%r3498, 0;
	mov.u32 	%r3500, %r3498;
$L__BB0_214:                            // %pass7605
                                        //   in Loop: Header=BB0_125 Depth=2
	ld.shared.u32 	%r1552, [%rd75];
	ld.shared.u32 	%r1559, [%rd76];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1569, %r1566}, {%r386, %r389}, {%r1552}, {%r1179, %r1179};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1578, %r1575}, {%r386, %r389}, {%r1559}, {%r1179, %r1179};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1562, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1564, %r1562, %r1566;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1567, %r420, %r1569, %r1564;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1571, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1573, %r1571, %r1575;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1576, %r420, %r1578, %r1573;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1580, %r423, %r1569;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1583, %r420, %r1566, %r1580;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1587, %r423, %r1578;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1590, %r420, %r1575, %r1587;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1613, %r1616}, {%r462, %r465}, {%r1567, %r1583}, {%r1179, %r1179}, %r202, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1620, %r1624}, {%r462, %r465}, {%r1576, %r1590}, {%r1179, %r1179}, %r202, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1612, %r1613, %r1613;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1615, %r1616, %r1616, %r1612;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1619, %r1620, %r1620, %r1615;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1623, %r1624, %r1624, %r1619;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3503, %r1540, %r1623, %r3500;
	// end inline asm
	add.s32 	%r3501, %r3498, 1;
	setp.eq.s32 	%p227, %r3501, 25;
	@%p227 bra 	$L__BB0_130;
	bra.uni 	$L__BB0_215;
$L__BB0_130:                            // %L17416
                                        //   in Loop: Header=BB0_125 Depth=2
	@%p205 bra 	$L__BB0_132;
// %bb.131:                             // %L17476
                                        //   in Loop: Header=BB0_125 Depth=2
	shl.b32 	%r1631, %r3499, 9;
	add.s32 	%r1632, %r1631, %r199;
	or.b32  	%r1633, %r1632, %r200;
	or.b32  	%r1634, %r1633, %r201;
	mul.wide.u32 	%rd253, %r1634, 4;
	add.s64 	%rd7, %rd4, %rd253;
	st.global.u32 	[%rd7], %r3503;
$L__BB0_132:                            // %L17615
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s32 	%r3499, %r3499, 1;
	mov.u32 	%r3501, 0;
	mov.u32 	%r3503, %r3501;
$L__BB0_215:                            // %pass8088
                                        //   in Loop: Header=BB0_125 Depth=2
	ld.shared.u32 	%r1640, [%rd77];
	ld.shared.u32 	%r1647, [%rd78];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1657, %r1654}, {%r386, %r389}, {%r1640}, {%r1179, %r1179};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1666, %r1663}, {%r386, %r389}, {%r1647}, {%r1179, %r1179};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1650, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1652, %r1650, %r1654;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1655, %r420, %r1657, %r1652;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1659, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1661, %r1659, %r1663;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1664, %r420, %r1666, %r1661;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1668, %r423, %r1657;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1671, %r420, %r1654, %r1668;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1675, %r423, %r1666;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1678, %r420, %r1663, %r1675;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1701, %r1704}, {%r462, %r465}, {%r1655, %r1671}, {%r1179, %r1179}, %r202, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1708, %r1712}, {%r462, %r465}, {%r1664, %r1678}, {%r1179, %r1179}, %r202, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1700, %r1701, %r1701;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1703, %r1704, %r1704, %r1700;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1707, %r1708, %r1708, %r1703;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1711, %r1712, %r1712, %r1707;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3506, %r1540, %r1711, %r3503;
	// end inline asm
	add.s32 	%r3504, %r3501, 1;
	setp.eq.s32 	%p229, %r3504, 25;
	@%p229 bra 	$L__BB0_133;
	bra.uni 	$L__BB0_216;
$L__BB0_133:                            // %L18538
                                        //   in Loop: Header=BB0_125 Depth=2
	@%p205 bra 	$L__BB0_135;
// %bb.134:                             // %L18598
                                        //   in Loop: Header=BB0_125 Depth=2
	shl.b32 	%r1719, %r3499, 9;
	add.s32 	%r1720, %r1719, %r199;
	or.b32  	%r1721, %r1720, %r200;
	or.b32  	%r1722, %r1721, %r201;
	mul.wide.u32 	%rd254, %r1722, 4;
	add.s64 	%rd8, %rd4, %rd254;
	st.global.u32 	[%rd8], %r3506;
$L__BB0_135:                            // %L18737
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s32 	%r3499, %r3499, 1;
	mov.u32 	%r3504, 0;
	mov.u32 	%r3506, %r3504;
$L__BB0_216:                            // %pass8571
                                        //   in Loop: Header=BB0_125 Depth=2
	ld.shared.u32 	%r1728, [%rd79];
	ld.shared.u32 	%r1735, [%rd80];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1745, %r1742}, {%r386, %r389}, {%r1728}, {%r1179, %r1179};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1754, %r1751}, {%r386, %r389}, {%r1735}, {%r1179, %r1179};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1738, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1740, %r1738, %r1742;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1743, %r420, %r1745, %r1740;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1747, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1749, %r1747, %r1751;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1752, %r420, %r1754, %r1749;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1756, %r423, %r1745;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1759, %r420, %r1742, %r1756;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1763, %r423, %r1754;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1766, %r420, %r1751, %r1763;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1789, %r1792}, {%r462, %r465}, {%r1743, %r1759}, {%r1179, %r1179}, %r202, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1796, %r1800}, {%r462, %r465}, {%r1752, %r1766}, {%r1179, %r1179}, %r202, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1788, %r1789, %r1789;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1791, %r1792, %r1792, %r1788;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1795, %r1796, %r1796, %r1791;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1799, %r1800, %r1800, %r1795;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3509, %r1540, %r1799, %r3506;
	// end inline asm
	add.s32 	%r3507, %r3504, 1;
	setp.eq.s32 	%p231, %r3507, 25;
	@%p231 bra 	$L__BB0_136;
	bra.uni 	$L__BB0_217;
$L__BB0_136:                            // %L19660
                                        //   in Loop: Header=BB0_125 Depth=2
	@%p205 bra 	$L__BB0_138;
// %bb.137:                             // %L19720
                                        //   in Loop: Header=BB0_125 Depth=2
	shl.b32 	%r1807, %r3499, 9;
	add.s32 	%r1808, %r1807, %r199;
	or.b32  	%r1809, %r1808, %r200;
	or.b32  	%r1810, %r1809, %r201;
	mul.wide.u32 	%rd255, %r1810, 4;
	add.s64 	%rd9, %rd4, %rd255;
	st.global.u32 	[%rd9], %r3509;
$L__BB0_138:                            // %L19859
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s32 	%r3499, %r3499, 1;
	mov.u32 	%r3507, 0;
	mov.u32 	%r3509, %r3507;
$L__BB0_217:                            // %pass9054
                                        //   in Loop: Header=BB0_125 Depth=2
	ld.shared.u32 	%r1816, [%rd81];
	ld.shared.u32 	%r1823, [%rd82];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1833, %r1830}, {%r386, %r389}, {%r1816}, {%r1179, %r1179};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1842, %r1839}, {%r386, %r389}, {%r1823}, {%r1179, %r1179};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1826, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1828, %r1826, %r1830;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1831, %r420, %r1833, %r1828;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1835, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1837, %r1835, %r1839;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1840, %r420, %r1842, %r1837;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1844, %r423, %r1833;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1847, %r420, %r1830, %r1844;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1851, %r423, %r1842;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1854, %r420, %r1839, %r1851;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1877, %r1880}, {%r462, %r465}, {%r1831, %r1847}, {%r1179, %r1179}, %r202, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1884, %r1888}, {%r462, %r465}, {%r1840, %r1854}, {%r1179, %r1179}, %r202, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1876, %r1877, %r1877;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1879, %r1880, %r1880, %r1876;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1883, %r1884, %r1884, %r1879;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1887, %r1888, %r1888, %r1883;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3512, %r1540, %r1887, %r3509;
	// end inline asm
	add.s32 	%r3510, %r3507, 1;
	setp.eq.s32 	%p233, %r3510, 25;
	@%p233 bra 	$L__BB0_139;
	bra.uni 	$L__BB0_218;
$L__BB0_139:                            // %L20782
                                        //   in Loop: Header=BB0_125 Depth=2
	@%p205 bra 	$L__BB0_141;
// %bb.140:                             // %L20842
                                        //   in Loop: Header=BB0_125 Depth=2
	shl.b32 	%r1895, %r3499, 9;
	add.s32 	%r1896, %r1895, %r199;
	or.b32  	%r1897, %r1896, %r200;
	or.b32  	%r1898, %r1897, %r201;
	mul.wide.u32 	%rd256, %r1898, 4;
	add.s64 	%rd10, %rd4, %rd256;
	st.global.u32 	[%rd10], %r3512;
$L__BB0_141:                            // %L20981
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s32 	%r3499, %r3499, 1;
	mov.u32 	%r3510, 0;
	mov.u32 	%r3512, %r3510;
$L__BB0_218:                            // %pass9537
                                        //   in Loop: Header=BB0_125 Depth=2
	ld.shared.u32 	%r1904, [%rd83];
	ld.shared.u32 	%r1911, [%rd84];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1921, %r1918}, {%r386, %r389}, {%r1904}, {%r1179, %r1179};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1930, %r1927}, {%r386, %r389}, {%r1911}, {%r1179, %r1179};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1914, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1916, %r1914, %r1918;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1919, %r420, %r1921, %r1916;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1923, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1925, %r1923, %r1927;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1928, %r420, %r1930, %r1925;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1932, %r423, %r1921;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1935, %r420, %r1918, %r1932;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1939, %r423, %r1930;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1942, %r420, %r1927, %r1939;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1965, %r1968}, {%r462, %r465}, {%r1919, %r1935}, {%r1179, %r1179}, %r202, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1972, %r1976}, {%r462, %r465}, {%r1928, %r1942}, {%r1179, %r1179}, %r202, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1964, %r1965, %r1965;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1967, %r1968, %r1968, %r1964;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1971, %r1972, %r1972, %r1967;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1975, %r1976, %r1976, %r1971;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3515, %r1540, %r1975, %r3512;
	// end inline asm
	add.s32 	%r3513, %r3510, 1;
	setp.eq.s32 	%p235, %r3513, 25;
	@%p235 bra 	$L__BB0_142;
	bra.uni 	$L__BB0_219;
$L__BB0_142:                            // %L21904
                                        //   in Loop: Header=BB0_125 Depth=2
	@%p205 bra 	$L__BB0_144;
// %bb.143:                             // %L21964
                                        //   in Loop: Header=BB0_125 Depth=2
	shl.b32 	%r1983, %r3499, 9;
	add.s32 	%r1984, %r1983, %r199;
	or.b32  	%r1985, %r1984, %r200;
	or.b32  	%r1986, %r1985, %r201;
	mul.wide.u32 	%rd257, %r1986, 4;
	add.s64 	%rd11, %rd4, %rd257;
	st.global.u32 	[%rd11], %r3515;
$L__BB0_144:                            // %L22103
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s32 	%r3499, %r3499, 1;
	mov.u32 	%r3513, 0;
	mov.u32 	%r3515, %r3513;
$L__BB0_219:                            // %pass10020
                                        //   in Loop: Header=BB0_125 Depth=2
	ld.shared.u32 	%r1992, [%rd85];
	ld.shared.u32 	%r1999, [%rd86];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2009, %r2006}, {%r386, %r389}, {%r1992}, {%r1179, %r1179};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2018, %r2015}, {%r386, %r389}, {%r1999}, {%r1179, %r1179};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2002, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2004, %r2002, %r2006;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2007, %r420, %r2009, %r2004;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2011, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2013, %r2011, %r2015;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2016, %r420, %r2018, %r2013;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2020, %r423, %r2009;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2023, %r420, %r2006, %r2020;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2027, %r423, %r2018;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2030, %r420, %r2015, %r2027;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2053, %r2056}, {%r462, %r465}, {%r2007, %r2023}, {%r1179, %r1179}, %r202, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2060, %r2064}, {%r462, %r465}, {%r2016, %r2030}, {%r1179, %r1179}, %r202, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2052, %r2053, %r2053;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2055, %r2056, %r2056, %r2052;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2059, %r2060, %r2060, %r2055;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2063, %r2064, %r2064, %r2059;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3518, %r1540, %r2063, %r3515;
	// end inline asm
	add.s32 	%r3516, %r3513, 1;
	setp.eq.s32 	%p237, %r3516, 25;
	@%p237 bra 	$L__BB0_145;
	bra.uni 	$L__BB0_220;
$L__BB0_145:                            // %L23026
                                        //   in Loop: Header=BB0_125 Depth=2
	@%p205 bra 	$L__BB0_147;
// %bb.146:                             // %L23086
                                        //   in Loop: Header=BB0_125 Depth=2
	shl.b32 	%r2071, %r3499, 9;
	add.s32 	%r2072, %r2071, %r199;
	or.b32  	%r2073, %r2072, %r200;
	or.b32  	%r2074, %r2073, %r201;
	mul.wide.u32 	%rd258, %r2074, 4;
	add.s64 	%rd12, %rd4, %rd258;
	st.global.u32 	[%rd12], %r3518;
$L__BB0_147:                            // %L23225
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s32 	%r3499, %r3499, 1;
	mov.u32 	%r3516, 0;
	mov.u32 	%r3518, %r3516;
$L__BB0_220:                            // %pass10503
                                        //   in Loop: Header=BB0_125 Depth=2
	ld.shared.u32 	%r2080, [%rd87];
	ld.shared.u32 	%r2087, [%rd88];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2097, %r2094}, {%r386, %r389}, {%r2080}, {%r1179, %r1179};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2106, %r2103}, {%r386, %r389}, {%r2087}, {%r1179, %r1179};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2090, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2092, %r2090, %r2094;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2095, %r420, %r2097, %r2092;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2099, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2101, %r2099, %r2103;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2104, %r420, %r2106, %r2101;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2108, %r423, %r2097;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2111, %r420, %r2094, %r2108;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2115, %r423, %r2106;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2118, %r420, %r2103, %r2115;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2141, %r2144}, {%r462, %r465}, {%r2095, %r2111}, {%r1179, %r1179}, %r202, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2148, %r2152}, {%r462, %r465}, {%r2104, %r2118}, {%r1179, %r1179}, %r202, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2140, %r2141, %r2141;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2143, %r2144, %r2144, %r2140;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2147, %r2148, %r2148, %r2143;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2151, %r2152, %r2152, %r2147;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3482, %r1540, %r2151, %r3518;
	// end inline asm
	add.s32 	%r3480, %r3516, 1;
	setp.eq.s32 	%p239, %r3480, 25;
	@%p239 bra 	$L__BB0_148;
	bra.uni 	$L__BB0_151;
$L__BB0_148:                            // %L24148
                                        //   in Loop: Header=BB0_125 Depth=2
	@%p205 bra 	$L__BB0_150;
// %bb.149:                             // %L24208
                                        //   in Loop: Header=BB0_125 Depth=2
	shl.b32 	%r2159, %r3499, 9;
	add.s32 	%r2160, %r2159, %r199;
	or.b32  	%r2161, %r2160, %r200;
	or.b32  	%r2162, %r2161, %r201;
	mul.wide.u32 	%rd259, %r2162, 4;
	add.s64 	%rd13, %rd4, %rd259;
	st.global.u32 	[%rd13], %r3482;
	bra.uni 	$L__BB0_150;
$L__BB0_152:                            // %L24369.preheader
                                        //   in Loop: Header=BB0_124 Depth=1
	or.b32  	%r139, %r3475, 32;
	or.b32  	%r140, %r3475, 34;
	or.b32  	%r141, %r3475, 36;
	or.b32  	%r142, %r3475, 38;
	mov.u32 	%r3489, %r1179;
	bra.uni 	$L__BB0_153;
$L__BB0_184:                            // %L38471
                                        //   in Loop: Header=BB0_153 Depth=2
	add.s32 	%r3499, %r3499, 1;
	mov.u32 	%r3480, %r2904;
	mov.u32 	%r3482, %r2904;
$L__BB0_185:                            // %L38472
                                        //   in Loop: Header=BB0_153 Depth=2
	bar.sync 	0;
	add.s32 	%r3489, %r3489, 8;
	setp.ne.s32 	%p262, %r3489, 32;
	@%p262 bra 	$L__BB0_153;
	bra.uni 	$L__BB0_186;
$L__BB0_153:                            // %L24369
                                        //   Parent Loop BB0_124 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p242, %r3489, 0;
	selp.b32 	%r2776, %r91, 0, %p242;
	setp.eq.s32 	%p243, %r3489, 8;
	selp.b32 	%r2777, %r95, %r2776, %p243;
	setp.eq.s32 	%p244, %r3489, 16;
	selp.b32 	%r2778, %r99, %r2777, %p244;
	setp.eq.s32 	%p245, %r3489, 24;
	selp.b32 	%r2779, %r103, %r2778, %p245;
	selp.b32 	%r2780, %r92, 0, %p242;
	selp.b32 	%r2781, %r96, %r2780, %p243;
	selp.b32 	%r2782, %r100, %r2781, %p244;
	selp.b32 	%r2783, %r104, %r2782, %p245;
	selp.b32 	%r2784, %r93, 0, %p242;
	selp.b32 	%r2785, %r97, %r2784, %p243;
	selp.b32 	%r2786, %r101, %r2785, %p244;
	selp.b32 	%r2787, %r105, %r2786, %p245;
	selp.b32 	%r2788, %r94, 0, %p242;
	selp.b32 	%r2789, %r98, %r2788, %p243;
	selp.b32 	%r2790, %r102, %r2789, %p244;
	selp.b32 	%r2791, %r106, %r2790, %p245;
	// begin inline asm
	mov.b32 %r2192, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2203, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2792, %r2779, 8;
	xor.b32  	%r2202, %r2792, 8947848;
	// begin inline asm
	lop3.b32 %r2189, %r1057, %r2202, %r2192, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2193, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2194, %r2192, %r2193;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2197, %r2189, %r2194;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2200, %r1068, %r2202, %r2203, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2204, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2205, %r2203, %r2204;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2208, %r2200, %r2205;
	// end inline asm
	// begin inline asm
	mov.b32 %r2238, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2249, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2793, %r2783, 8;
	xor.b32  	%r2248, %r2793, 8947848;
	// begin inline asm
	lop3.b32 %r2235, %r1057, %r2248, %r2238, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2239, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2240, %r2238, %r2239;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2243, %r2235, %r2240;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2246, %r1068, %r2248, %r2249, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2250, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2251, %r2249, %r2250;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2254, %r2246, %r2251;
	// end inline asm
	// begin inline asm
	mov.b32 %r2284, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2295, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2794, %r2787, 8;
	xor.b32  	%r2294, %r2794, 8947848;
	// begin inline asm
	lop3.b32 %r2281, %r1057, %r2294, %r2284, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2285, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2286, %r2284, %r2285;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2289, %r2281, %r2286;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2292, %r1068, %r2294, %r2295, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2296, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2297, %r2295, %r2296;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2300, %r2292, %r2297;
	// end inline asm
	// begin inline asm
	mov.b32 %r2330, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2341, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2795, %r2791, 8;
	xor.b32  	%r2340, %r2795, 8947848;
	// begin inline asm
	lop3.b32 %r2327, %r1057, %r2340, %r2330, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2331, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2332, %r2330, %r2331;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2335, %r2327, %r2332;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2338, %r1068, %r2340, %r2341, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2342, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2343, %r2341, %r2342;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2346, %r2338, %r2343;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r186;
    mov.b32 {%r2re, %r2im}, %r2197;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2349, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r187;
    mov.b32 {%r2re, %r2im}, %r2208;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2352, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r186;
    mov.b32 {%r2re, %r2im}, %r2243;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2355, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r187;
    mov.b32 {%r2re, %r2im}, %r2254;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2358, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r186;
    mov.b32 {%r2re, %r2im}, %r2289;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2361, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r187;
    mov.b32 {%r2re, %r2im}, %r2300;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2364, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r186;
    mov.b32 {%r2re, %r2im}, %r2335;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2367, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r187;
    mov.b32 {%r2re, %r2im}, %r2346;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2370, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2436, %r2433}, {%r289, %r292}, {%r2349}, {%r1179, %r1179};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2445, %r2442}, {%r289, %r292}, {%r2352}, {%r1179, %r1179};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2454, %r2451}, {%r289, %r292}, {%r2355}, {%r1179, %r1179};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2463, %r2460}, {%r289, %r292}, {%r2358}, {%r1179, %r1179};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2472, %r2469}, {%r289, %r292}, {%r2361}, {%r1179, %r1179};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2481, %r2478}, {%r289, %r292}, {%r2364}, {%r1179, %r1179};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2490, %r2487}, {%r289, %r292}, {%r2367}, {%r1179, %r1179};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2499, %r2496}, {%r289, %r292}, {%r2370}, {%r1179, %r1179};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2429, %r330;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2431, %r2429, %r2433;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2434, %r327, %r2436, %r2431;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2438, %r330;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2440, %r2438, %r2442;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2443, %r327, %r2445, %r2440;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2447, %r330;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2449, %r2447, %r2451;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2452, %r327, %r2454, %r2449;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2456, %r330;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2458, %r2456, %r2460;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2461, %r327, %r2463, %r2458;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2465, %r330;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2467, %r2465, %r2469;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2470, %r327, %r2472, %r2467;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2474, %r330;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2476, %r2474, %r2478;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2479, %r327, %r2481, %r2476;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2483, %r330;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2485, %r2483, %r2487;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2488, %r327, %r2490, %r2485;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2492, %r330;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2494, %r2492, %r2496;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2497, %r327, %r2499, %r2494;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2501, %r330, %r2436;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2504, %r327, %r2433, %r2501;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2508, %r330, %r2445;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2511, %r327, %r2442, %r2508;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2515, %r330, %r2454;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2518, %r327, %r2451, %r2515;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2522, %r330, %r2463;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2525, %r327, %r2460, %r2522;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2529, %r330, %r2472;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2532, %r327, %r2469, %r2529;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2536, %r330, %r2481;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2539, %r327, %r2478, %r2536;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2543, %r330, %r2490;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2546, %r327, %r2487, %r2543;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2550, %r330, %r2499;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2553, %r327, %r2496, %r2550;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2630, %r2631}, {%r374, %r377}, {%r2434, %r2504}, {%r1179, %r1179}, %r202, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2638, %r2639}, {%r374, %r377}, {%r2443, %r2511}, {%r1179, %r1179}, %r202, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2646, %r2647}, {%r374, %r377}, {%r2452, %r2518}, {%r1179, %r1179}, %r202, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2654, %r2655}, {%r374, %r377}, {%r2461, %r2525}, {%r1179, %r1179}, %r202, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2662, %r2663}, {%r374, %r377}, {%r2470, %r2532}, {%r1179, %r1179}, %r202, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2670, %r2671}, {%r374, %r377}, {%r2479, %r2539}, {%r1179, %r1179}, %r202, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2678, %r2679}, {%r374, %r377}, {%r2488, %r2546}, {%r1179, %r1179}, %r202, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2686, %r2687}, {%r374, %r377}, {%r2497, %r2553}, {%r1179, %r1179}, %r202, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2629, %r2630, %r2631, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2633, %r2630, %r2631, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2637, %r2638, %r2639, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2641, %r2638, %r2639, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2645, %r2646, %r2647, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2649, %r2646, %r2647, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2653, %r2654, %r2655, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2657, %r2654, %r2655, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2661, %r2662, %r2663, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2665, %r2662, %r2663, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2669, %r2670, %r2671, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2673, %r2670, %r2671, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2677, %r2678, %r2679, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2681, %r2678, %r2679, %r814;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2685, %r2686, %r2687, %r810;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2689, %r2686, %r2687, %r814;
	// end inline asm
	or.b32  	%r2796, %r3489, %r190;
	add.s32 	%r2797, %r139, %r2796;
	shr.s32 	%r2798, %r2797, 31;
	shr.u32 	%r2799, %r2798, 29;
	add.s32 	%r2800, %r2797, %r2799;
	and.b32  	%r2801, %r2800, 134217720;
	sub.s32 	%r2802, %r2797, %r2801;
	shl.b32 	%r2803, %r2802, 5;
	add.s32 	%r2804, %r196, %r2803;
	mul.wide.s32 	%rd260, %r2804, 4;
	add.s64 	%rd262, %rd102, %rd260;
	st.shared.u32 	[%rd262], %r2629;
	add.s32 	%r2805, %r197, %r2803;
	mul.wide.u32 	%rd263, %r2805, 4;
	add.s64 	%rd264, %rd102, %rd263;
	st.shared.u32 	[%rd264], %r2633;
	cvt.s64.s32 	%rd265, %r2803;
	cvt.u64.u32 	%rd266, %r195;
	cvt.u64.u32 	%rd268, %r193;
	cvt.u64.u32 	%rd269, %r191;
	cvt.u64.u32 	%rd270, %r192;
	add.s64 	%rd271, %rd270, %rd269;
	add.s64 	%rd272, %rd271, %rd268;
	add.s64 	%rd273, %rd272, %rd157;
	add.s64 	%rd274, %rd273, %rd266;
	add.s64 	%rd275, %rd274, %rd265;
	shl.b64 	%rd276, %rd275, 2;
	add.s64 	%rd277, %rd102, %rd276;
	st.shared.u32 	[%rd277+64], %r2637;
	add.s32 	%r2806, %r198, %r2803;
	mul.wide.u32 	%rd278, %r2806, 4;
	add.s64 	%rd279, %rd102, %rd278;
	st.shared.u32 	[%rd279], %r2641;
	add.s32 	%r2807, %r140, %r2796;
	shr.s32 	%r2808, %r2807, 31;
	shr.u32 	%r2809, %r2808, 29;
	add.s32 	%r2810, %r2807, %r2809;
	and.b32  	%r2811, %r2810, 134217720;
	sub.s32 	%r2812, %r2807, %r2811;
	shl.b32 	%r2813, %r2812, 5;
	add.s32 	%r2814, %r196, %r2813;
	mul.wide.s32 	%rd280, %r2814, 4;
	add.s64 	%rd281, %rd102, %rd280;
	st.shared.u32 	[%rd281], %r2645;
	add.s32 	%r2815, %r197, %r2813;
	mul.wide.u32 	%rd282, %r2815, 4;
	add.s64 	%rd283, %rd102, %rd282;
	st.shared.u32 	[%rd283], %r2649;
	cvt.s64.s32 	%rd284, %r2813;
	add.s64 	%rd285, %rd274, %rd284;
	shl.b64 	%rd286, %rd285, 2;
	add.s64 	%rd287, %rd102, %rd286;
	st.shared.u32 	[%rd287+64], %r2653;
	add.s32 	%r2816, %r198, %r2813;
	mul.wide.u32 	%rd288, %r2816, 4;
	add.s64 	%rd289, %rd102, %rd288;
	st.shared.u32 	[%rd289], %r2657;
	add.s32 	%r2817, %r141, %r2796;
	shr.s32 	%r2818, %r2817, 31;
	shr.u32 	%r2819, %r2818, 29;
	add.s32 	%r2820, %r2817, %r2819;
	and.b32  	%r2821, %r2820, 134217720;
	sub.s32 	%r2822, %r2817, %r2821;
	shl.b32 	%r2823, %r2822, 5;
	add.s32 	%r2824, %r196, %r2823;
	mul.wide.s32 	%rd290, %r2824, 4;
	add.s64 	%rd291, %rd102, %rd290;
	st.shared.u32 	[%rd291], %r2661;
	add.s32 	%r2825, %r197, %r2823;
	mul.wide.u32 	%rd292, %r2825, 4;
	add.s64 	%rd293, %rd102, %rd292;
	st.shared.u32 	[%rd293], %r2665;
	cvt.s64.s32 	%rd294, %r2823;
	add.s64 	%rd295, %rd274, %rd294;
	shl.b64 	%rd296, %rd295, 2;
	add.s64 	%rd297, %rd102, %rd296;
	st.shared.u32 	[%rd297+64], %r2669;
	add.s32 	%r2826, %r198, %r2823;
	mul.wide.u32 	%rd298, %r2826, 4;
	add.s64 	%rd299, %rd102, %rd298;
	st.shared.u32 	[%rd299], %r2673;
	add.s32 	%r2827, %r142, %r2796;
	shr.s32 	%r2828, %r2827, 31;
	shr.u32 	%r2829, %r2828, 29;
	add.s32 	%r2830, %r2827, %r2829;
	and.b32  	%r2831, %r2830, 134217720;
	sub.s32 	%r2832, %r2827, %r2831;
	shl.b32 	%r2833, %r2832, 5;
	add.s32 	%r2834, %r196, %r2833;
	mul.wide.s32 	%rd300, %r2834, 4;
	add.s64 	%rd301, %rd102, %rd300;
	st.shared.u32 	[%rd301], %r2677;
	add.s32 	%r2835, %r197, %r2833;
	mul.wide.u32 	%rd302, %r2835, 4;
	add.s64 	%rd303, %rd102, %rd302;
	st.shared.u32 	[%rd303], %r2681;
	cvt.s64.s32 	%rd304, %r2833;
	add.s64 	%rd305, %rd274, %rd304;
	shl.b64 	%rd306, %rd305, 2;
	add.s64 	%rd307, %rd102, %rd306;
	st.shared.u32 	[%rd307+64], %r2685;
	add.s32 	%r2836, %r198, %r2833;
	mul.wide.u32 	%rd308, %r2836, 4;
	add.s64 	%rd309, %rd102, %rd308;
	st.shared.u32 	[%rd309], %r2689;
	bar.sync 	0;
	ld.shared.u32 	%r2697, [%rd22];
	ld.shared.u32 	%r2704, [%rd23+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2714, %r2711}, {%r386, %r389}, {%r2697}, {%r1179, %r1179};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2723, %r2720}, {%r386, %r389}, {%r2704}, {%r1179, %r1179};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2707, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2709, %r2707, %r2711;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2712, %r420, %r2714, %r2709;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2716, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2718, %r2716, %r2720;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2721, %r420, %r2723, %r2718;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2725, %r423, %r2714;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2728, %r420, %r2711, %r2725;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2732, %r423, %r2723;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2735, %r420, %r2720, %r2732;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2758, %r2761}, {%r462, %r465}, {%r2712, %r2728}, {%r1179, %r1179}, %r202, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2765, %r2769}, {%r462, %r465}, {%r2721, %r2735}, {%r1179, %r1179}, %r202, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2757, %r2758, %r2758;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2760, %r2761, %r2761, %r2757;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2764, %r2765, %r2765, %r2760;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2768, %r2769, %r2769, %r2764;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3521, %r1540, %r2768, %r3482;
	// end inline asm
	add.s32 	%r3519, %r3480, 1;
	setp.ne.s32 	%p246, %r3519, 25;
	@%p246 bra 	$L__BB0_157;
// %bb.154:                             // %L30418
                                        //   in Loop: Header=BB0_153 Depth=2
	@%p205 bra 	$L__BB0_156;
// %bb.155:                             // %L30478
                                        //   in Loop: Header=BB0_153 Depth=2
	shl.b32 	%r2837, %r3499, 9;
	add.s32 	%r2838, %r2837, %r199;
	or.b32  	%r2839, %r2838, %r200;
	or.b32  	%r2840, %r2839, %r201;
	mul.wide.u32 	%rd310, %r2840, 4;
	add.s64 	%rd14, %rd4, %rd310;
	st.global.u32 	[%rd14], %r3521;
$L__BB0_156:                            // %L30617
                                        //   in Loop: Header=BB0_153 Depth=2
	add.s32 	%r3499, %r3499, 1;
	mov.u32 	%r3519, 0;
	mov.u32 	%r3521, %r3519;
$L__BB0_157:                            // %pass13798
                                        //   in Loop: Header=BB0_153 Depth=2
	ld.shared.u32 	%r2846, [%rd75];
	ld.shared.u32 	%r2853, [%rd76];
	mov.u32 	%r2904, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2863, %r2860}, {%r386, %r389}, {%r2846}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2872, %r2869}, {%r386, %r389}, {%r2853}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2856, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2858, %r2856, %r2860;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2861, %r420, %r2863, %r2858;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2865, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2867, %r2865, %r2869;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2870, %r420, %r2872, %r2867;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2874, %r423, %r2863;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2877, %r420, %r2860, %r2874;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2881, %r423, %r2872;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2884, %r420, %r2869, %r2881;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2907, %r2910}, {%r462, %r465}, {%r2861, %r2877}, {%r2904, %r2904}, %r202, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2914, %r2918}, {%r462, %r465}, {%r2870, %r2884}, {%r2904, %r2904}, %r202, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2906, %r2907, %r2907;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2909, %r2910, %r2910, %r2906;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2913, %r2914, %r2914, %r2909;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2917, %r2918, %r2918, %r2913;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3524, %r1540, %r2917, %r3521;
	// end inline asm
	add.s32 	%r3522, %r3519, 1;
	setp.eq.s32 	%p248, %r3522, 25;
	@%p248 bra 	$L__BB0_158;
	bra.uni 	$L__BB0_161;
$L__BB0_158:                            // %L31540
                                        //   in Loop: Header=BB0_153 Depth=2
	@%p205 bra 	$L__BB0_160;
// %bb.159:                             // %L31600
                                        //   in Loop: Header=BB0_153 Depth=2
	shl.b32 	%r2925, %r3499, 9;
	add.s32 	%r2926, %r2925, %r199;
	or.b32  	%r2927, %r2926, %r200;
	or.b32  	%r2928, %r2927, %r201;
	mul.wide.u32 	%rd311, %r2928, 4;
	add.s64 	%rd15, %rd4, %rd311;
	st.global.u32 	[%rd15], %r3524;
$L__BB0_160:                            // %L31739
                                        //   in Loop: Header=BB0_153 Depth=2
	add.s32 	%r3499, %r3499, 1;
	mov.u32 	%r3522, 0;
	mov.u32 	%r3524, %r3522;
$L__BB0_161:                            // %pass14281
                                        //   in Loop: Header=BB0_153 Depth=2
	ld.shared.u32 	%r2934, [%rd77];
	ld.shared.u32 	%r2941, [%rd78];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2951, %r2948}, {%r386, %r389}, {%r2934}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2960, %r2957}, {%r386, %r389}, {%r2941}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2944, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2946, %r2944, %r2948;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2949, %r420, %r2951, %r2946;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2953, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2955, %r2953, %r2957;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2958, %r420, %r2960, %r2955;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2962, %r423, %r2951;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2965, %r420, %r2948, %r2962;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2969, %r423, %r2960;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2972, %r420, %r2957, %r2969;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2995, %r2998}, {%r462, %r465}, {%r2949, %r2965}, {%r2904, %r2904}, %r202, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3002, %r3006}, {%r462, %r465}, {%r2958, %r2972}, {%r2904, %r2904}, %r202, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2994, %r2995, %r2995;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2997, %r2998, %r2998, %r2994;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3001, %r3002, %r3002, %r2997;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3005, %r3006, %r3006, %r3001;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3527, %r1540, %r3005, %r3524;
	// end inline asm
	add.s32 	%r3525, %r3522, 1;
	setp.eq.s32 	%p250, %r3525, 25;
	@%p250 bra 	$L__BB0_162;
	bra.uni 	$L__BB0_165;
$L__BB0_162:                            // %L32662
                                        //   in Loop: Header=BB0_153 Depth=2
	@%p205 bra 	$L__BB0_164;
// %bb.163:                             // %L32722
                                        //   in Loop: Header=BB0_153 Depth=2
	shl.b32 	%r3013, %r3499, 9;
	add.s32 	%r3014, %r3013, %r199;
	or.b32  	%r3015, %r3014, %r200;
	or.b32  	%r3016, %r3015, %r201;
	mul.wide.u32 	%rd312, %r3016, 4;
	add.s64 	%rd16, %rd4, %rd312;
	st.global.u32 	[%rd16], %r3527;
$L__BB0_164:                            // %L32861
                                        //   in Loop: Header=BB0_153 Depth=2
	add.s32 	%r3499, %r3499, 1;
	mov.u32 	%r3525, 0;
	mov.u32 	%r3527, %r3525;
$L__BB0_165:                            // %pass14764
                                        //   in Loop: Header=BB0_153 Depth=2
	ld.shared.u32 	%r3022, [%rd79];
	ld.shared.u32 	%r3029, [%rd80];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3039, %r3036}, {%r386, %r389}, {%r3022}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3048, %r3045}, {%r386, %r389}, {%r3029}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3032, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3034, %r3032, %r3036;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3037, %r420, %r3039, %r3034;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3041, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3043, %r3041, %r3045;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3046, %r420, %r3048, %r3043;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3050, %r423, %r3039;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3053, %r420, %r3036, %r3050;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3057, %r423, %r3048;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3060, %r420, %r3045, %r3057;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3083, %r3086}, {%r462, %r465}, {%r3037, %r3053}, {%r2904, %r2904}, %r202, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3090, %r3094}, {%r462, %r465}, {%r3046, %r3060}, {%r2904, %r2904}, %r202, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3082, %r3083, %r3083;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3085, %r3086, %r3086, %r3082;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3089, %r3090, %r3090, %r3085;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3093, %r3094, %r3094, %r3089;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3530, %r1540, %r3093, %r3527;
	// end inline asm
	add.s32 	%r3528, %r3525, 1;
	setp.eq.s32 	%p252, %r3528, 25;
	@%p252 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_169;
$L__BB0_166:                            // %L33784
                                        //   in Loop: Header=BB0_153 Depth=2
	@%p205 bra 	$L__BB0_168;
// %bb.167:                             // %L33844
                                        //   in Loop: Header=BB0_153 Depth=2
	shl.b32 	%r3101, %r3499, 9;
	add.s32 	%r3102, %r3101, %r199;
	or.b32  	%r3103, %r3102, %r200;
	or.b32  	%r3104, %r3103, %r201;
	mul.wide.u32 	%rd313, %r3104, 4;
	add.s64 	%rd17, %rd4, %rd313;
	st.global.u32 	[%rd17], %r3530;
$L__BB0_168:                            // %L33983
                                        //   in Loop: Header=BB0_153 Depth=2
	add.s32 	%r3499, %r3499, 1;
	mov.u32 	%r3528, 0;
	mov.u32 	%r3530, %r3528;
$L__BB0_169:                            // %pass15247
                                        //   in Loop: Header=BB0_153 Depth=2
	ld.shared.u32 	%r3110, [%rd81];
	ld.shared.u32 	%r3117, [%rd82];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3127, %r3124}, {%r386, %r389}, {%r3110}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3136, %r3133}, {%r386, %r389}, {%r3117}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3120, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3122, %r3120, %r3124;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3125, %r420, %r3127, %r3122;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3129, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3131, %r3129, %r3133;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3134, %r420, %r3136, %r3131;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3138, %r423, %r3127;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3141, %r420, %r3124, %r3138;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3145, %r423, %r3136;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3148, %r420, %r3133, %r3145;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3171, %r3174}, {%r462, %r465}, {%r3125, %r3141}, {%r2904, %r2904}, %r202, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3178, %r3182}, {%r462, %r465}, {%r3134, %r3148}, {%r2904, %r2904}, %r202, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3170, %r3171, %r3171;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3173, %r3174, %r3174, %r3170;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3177, %r3178, %r3178, %r3173;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3181, %r3182, %r3182, %r3177;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3533, %r1540, %r3181, %r3530;
	// end inline asm
	add.s32 	%r3531, %r3528, 1;
	setp.eq.s32 	%p254, %r3531, 25;
	@%p254 bra 	$L__BB0_170;
	bra.uni 	$L__BB0_173;
$L__BB0_170:                            // %L34906
                                        //   in Loop: Header=BB0_153 Depth=2
	@%p205 bra 	$L__BB0_172;
// %bb.171:                             // %L34966
                                        //   in Loop: Header=BB0_153 Depth=2
	shl.b32 	%r3189, %r3499, 9;
	add.s32 	%r3190, %r3189, %r199;
	or.b32  	%r3191, %r3190, %r200;
	or.b32  	%r3192, %r3191, %r201;
	mul.wide.u32 	%rd314, %r3192, 4;
	add.s64 	%rd18, %rd4, %rd314;
	st.global.u32 	[%rd18], %r3533;
$L__BB0_172:                            // %L35105
                                        //   in Loop: Header=BB0_153 Depth=2
	add.s32 	%r3499, %r3499, 1;
	mov.u32 	%r3531, 0;
	mov.u32 	%r3533, %r3531;
$L__BB0_173:                            // %pass15730
                                        //   in Loop: Header=BB0_153 Depth=2
	ld.shared.u32 	%r3198, [%rd83];
	ld.shared.u32 	%r3205, [%rd84];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3215, %r3212}, {%r386, %r389}, {%r3198}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3224, %r3221}, {%r386, %r389}, {%r3205}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3208, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3210, %r3208, %r3212;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3213, %r420, %r3215, %r3210;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3217, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3219, %r3217, %r3221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3222, %r420, %r3224, %r3219;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3226, %r423, %r3215;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3229, %r420, %r3212, %r3226;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3233, %r423, %r3224;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3236, %r420, %r3221, %r3233;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3259, %r3262}, {%r462, %r465}, {%r3213, %r3229}, {%r2904, %r2904}, %r202, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3266, %r3270}, {%r462, %r465}, {%r3222, %r3236}, {%r2904, %r2904}, %r202, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3258, %r3259, %r3259;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3261, %r3262, %r3262, %r3258;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3265, %r3266, %r3266, %r3261;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3269, %r3270, %r3270, %r3265;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3536, %r1540, %r3269, %r3533;
	// end inline asm
	add.s32 	%r3534, %r3531, 1;
	setp.eq.s32 	%p256, %r3534, 25;
	@%p256 bra 	$L__BB0_174;
	bra.uni 	$L__BB0_177;
$L__BB0_174:                            // %L36028
                                        //   in Loop: Header=BB0_153 Depth=2
	@%p205 bra 	$L__BB0_176;
// %bb.175:                             // %L36088
                                        //   in Loop: Header=BB0_153 Depth=2
	shl.b32 	%r3277, %r3499, 9;
	add.s32 	%r3278, %r3277, %r199;
	or.b32  	%r3279, %r3278, %r200;
	or.b32  	%r3280, %r3279, %r201;
	mul.wide.u32 	%rd315, %r3280, 4;
	add.s64 	%rd19, %rd4, %rd315;
	st.global.u32 	[%rd19], %r3536;
$L__BB0_176:                            // %L36227
                                        //   in Loop: Header=BB0_153 Depth=2
	add.s32 	%r3499, %r3499, 1;
	mov.u32 	%r3534, 0;
	mov.u32 	%r3536, %r3534;
$L__BB0_177:                            // %pass16213
                                        //   in Loop: Header=BB0_153 Depth=2
	ld.shared.u32 	%r3286, [%rd85];
	ld.shared.u32 	%r3293, [%rd86];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3303, %r3300}, {%r386, %r389}, {%r3286}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3312, %r3309}, {%r386, %r389}, {%r3293}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3296, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3298, %r3296, %r3300;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3301, %r420, %r3303, %r3298;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3305, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3307, %r3305, %r3309;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3310, %r420, %r3312, %r3307;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3314, %r423, %r3303;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3317, %r420, %r3300, %r3314;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3321, %r423, %r3312;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3324, %r420, %r3309, %r3321;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3347, %r3350}, {%r462, %r465}, {%r3301, %r3317}, {%r2904, %r2904}, %r202, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3354, %r3358}, {%r462, %r465}, {%r3310, %r3324}, {%r2904, %r2904}, %r202, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3346, %r3347, %r3347;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3349, %r3350, %r3350, %r3346;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3353, %r3354, %r3354, %r3349;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3357, %r3358, %r3358, %r3353;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3539, %r1540, %r3357, %r3536;
	// end inline asm
	add.s32 	%r3537, %r3534, 1;
	setp.eq.s32 	%p258, %r3537, 25;
	@%p258 bra 	$L__BB0_178;
	bra.uni 	$L__BB0_181;
$L__BB0_178:                            // %L37150
                                        //   in Loop: Header=BB0_153 Depth=2
	@%p205 bra 	$L__BB0_180;
// %bb.179:                             // %L37210
                                        //   in Loop: Header=BB0_153 Depth=2
	shl.b32 	%r3365, %r3499, 9;
	add.s32 	%r3366, %r3365, %r199;
	or.b32  	%r3367, %r3366, %r200;
	or.b32  	%r3368, %r3367, %r201;
	mul.wide.u32 	%rd316, %r3368, 4;
	add.s64 	%rd20, %rd4, %rd316;
	st.global.u32 	[%rd20], %r3539;
$L__BB0_180:                            // %L37349
                                        //   in Loop: Header=BB0_153 Depth=2
	add.s32 	%r3499, %r3499, 1;
	mov.u32 	%r3537, 0;
	mov.u32 	%r3539, %r3537;
$L__BB0_181:                            // %pass16696
                                        //   in Loop: Header=BB0_153 Depth=2
	ld.shared.u32 	%r3374, [%rd87];
	ld.shared.u32 	%r3381, [%rd88];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3391, %r3388}, {%r386, %r389}, {%r3374}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3400, %r3397}, {%r386, %r389}, {%r3381}, {%r2904, %r2904};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3384, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3386, %r3384, %r3388;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3389, %r420, %r3391, %r3386;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3393, %r423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3395, %r3393, %r3397;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3398, %r420, %r3400, %r3395;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3402, %r423, %r3391;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3405, %r420, %r3388, %r3402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3409, %r423, %r3400;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3412, %r420, %r3397, %r3409;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3435, %r3438}, {%r462, %r465}, {%r3389, %r3405}, {%r2904, %r2904}, %r202, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3442, %r3446}, {%r462, %r465}, {%r3398, %r3412}, {%r2904, %r2904}, %r202, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3434, %r3435, %r3435;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3437, %r3438, %r3438, %r3434;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3441, %r3442, %r3442, %r3437;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3445, %r3446, %r3446, %r3441;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3482, %r1540, %r3445, %r3539;
	// end inline asm
	add.s32 	%r3480, %r3537, 1;
	setp.eq.s32 	%p260, %r3480, 25;
	@%p260 bra 	$L__BB0_182;
	bra.uni 	$L__BB0_185;
$L__BB0_182:                            // %L38272
                                        //   in Loop: Header=BB0_153 Depth=2
	@%p205 bra 	$L__BB0_184;
// %bb.183:                             // %L38332
                                        //   in Loop: Header=BB0_153 Depth=2
	shl.b32 	%r3453, %r3499, 9;
	add.s32 	%r3454, %r3453, %r199;
	or.b32  	%r3455, %r3454, %r200;
	or.b32  	%r3456, %r3455, %r201;
	mul.wide.u32 	%rd317, %r3456, 4;
	add.s64 	%rd21, %rd4, %rd317;
	st.global.u32 	[%rd21], %r3482;
	bra.uni 	$L__BB0_184;
$L__BB0_187:                            // %L38503
	st.global.u32 	[%rd5], %r2904;
	ret;
$L__BB0_126:                            // %post_box_union
	mov.u64 	%rd250, exception3262;
	cvta.global.u64 	%rd251, %rd250;
	{ // callseq 8, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd251;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 8
	{ // callseq 9, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd89;
	st.param.b32 	[param0+8], %r275;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 9
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd94, exception13274;
	cvta.global.u64 	%rd95, %rd94;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd95;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd89;
	st.param.b32 	[param0+8], %r275;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
