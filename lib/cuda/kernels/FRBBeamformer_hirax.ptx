// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE // -- Begin function _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception3262[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception13274[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.visible .entry _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE(
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5[32]
)
.reqntid 512, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<269>;
	.reg .b16 	%rs<97>;
	.reg .b32 	%r<3475>;
	.reg .f32 	%f<752>;
	.reg .b64 	%rd<245>;

// %bb.0:                               // %conversion
	ld.param.u32 	%r262, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd81, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r263, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r263, 34943;
	@%p2 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_1;
$L__BB0_188:                            // %L10
	ld.param.u64 	%rd82, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r4, %ctaid.x;
	shl.b32 	%r5, %r4, 9;
	or.b32  	%r264, %r2, %r3;
	or.b32  	%r265, %r264, %r5;
	mul.wide.u32 	%rd88, %r265, 4;
	add.s64 	%rd5, %rd82, %rd88;
	mov.u32 	%r266, 1;
	st.global.u32 	[%rd5], %r266;
	and.b32  	%r6, %r3, 3;
	shr.u32 	%r7, %r3, 2;
	mul.lo.s32 	%r267, %r6, %r7;
	and.b32  	%r268, %r267, 7;
	cvt.rn.f32.s32 	%f185, %r268;
	mov.f32 	%f186, 0f40800000;
	div.approx.f32 	%f1, %f185, %f186;
	abs.f32 	%f750, %f1;
	setp.lt.f32 	%p3, %f750, 0f40000000;
	mov.f32 	%f703, 0f40000000;
	setp.gtu.f32 	%p264, %f750, 0f4B800000;
	mov.f32 	%f746, %f750;
	@%p3 bra 	$L__BB0_200;
// %bb.189:
	@%p264 bra 	$L__BB0_196;
	bra.uni 	$L__BB0_190;
$L__BB0_196:
	mov.b32 	%r159, %f750;
	and.b32  	%r269, %r159, 8388607;
	or.b32  	%r3428, %r269, 1065353216;
	mov.b32 	%f745, %r3428;
	add.s32 	%r270, %r159, -1073741824;
	and.b32  	%r3429, %r270, -8388608;
	setp.eq.s32 	%p10, %r3429, 0;
	@%p10 bra 	$L__BB0_199;
// %bb.197:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f196, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f195,%f196;
	// end inline asm
$L__BB0_198:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r271, %r3429, 192937984;
	add.s32 	%r272, %r3428, %r271;
	mov.b32 	%f197, %r272;
	mul.f32 	%f198, %f195, %f197;
	sub.f32 	%f199, %f197, %f198;
	fma.rn.f32 	%f200, %f199, %f195, %f198;
	sub.f32 	%f201, %f197, %f200;
	fma.rz.f32 	%f202, %f201, %f195, %f200;
	cvt.rzi.f32.f32 	%f203, %f202;
	sub.f32 	%f745, %f197, %f203;
	sub.s32 	%r3429, %r3429, %r271;
	mov.b32 	%r3428, %f745;
	setp.ne.s32 	%p11, %r3429, 0;
	setp.ne.s32 	%p12, %r3428, 0;
	and.pred  	%p13, %p11, %p12;
	@%p13 bra 	$L__BB0_198;
$L__BB0_199:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p14, %r159, 2139095039;
	selp.f32 	%f204, 0f7FFFFFFF, 0f4B800000, %p14;
	mul.f32 	%f205, %f745, 0f34000000;
	mul.f32 	%f746, %f204, %f205;
	bra.uni 	$L__BB0_200;
$L__BB0_190:                            // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f188, %f750, %f703;
	cvt.rzi.f32.f32 	%f744, %f188;
	fma.rn.f32 	%f154, %f744, 0fC0000000, %f750;
	mov.b32 	%r158, %f154;
	setp.lt.u32 	%p5, %r158, 1073741824;
	@%p5 bra 	$L__BB0_195;
// %bb.191:
	setp.lt.u32 	%p6, %r158, -2147483647;
	@%p6 bra 	$L__BB0_193;
// %bb.192:
	add.f32 	%f193, %f744, 0fBF800000;
	setp.lt.f32 	%p9, %f154, 0fC0000000;
	add.f32 	%f194, %f193, 0fBF800000;
	selp.f32 	%f744, %f194, %f193, %p9;
	bra.uni 	$L__BB0_195;
$L__BB0_193:
	add.f32 	%f744, %f744, 0f3F800000;
	setp.ltu.f32 	%p7, %f154, 0f40800000;
	@%p7 bra 	$L__BB0_195;
// %bb.194:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f189, %f744, 0f3F800000;
	fma.rn.f32 	%f191, %f703, 0fC0400000, %f154;
	setp.ge.f32 	%p8, %f191, 0f00000000;
	add.f32 	%f192, %f189, 0f3F800000;
	selp.f32 	%f744, %f192, %f189, %p8;
$L__BB0_195:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f746, %f744, 0fC0000000, %f750;
$L__BB0_200:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f206, %f746;
	setp.gtu.f32 	%p15, %f206, 0f7F800000;
	mov.b32 	%r273, %f1;
	and.b32  	%r166, %r273, -2147483648;
	@%p15 bra 	$L__BB0_202;
// %bb.201:
	mov.b32 	%r274, %f746;
	or.b32  	%r275, %r166, %r274;
	mov.b32 	%f746, %r275;
$L__BB0_202:                            // %__nv_fmodf.exit
	add.f32 	%f207, %f746, %f746;
	mov.b32 	%r282, %f207;
	and.b32  	%r283, %r282, -2147483648;
	shl.b32 	%r169, %r3, 1;
	and.b32  	%r290, %r169, 2;
	mul.lo.s32 	%r170, %r290, %r7;
	cvt.rn.f32.s32 	%f239, %r170;
	mov.f32 	%f240, 0f41800000;
	div.approx.f32 	%f168, %f239, %f240;
	abs.f32 	%f726, %f168;
	setp.lt.f32 	%p23, %f726, 0f40000000;
	setp.gtu.f32 	%p265, %f726, 0f4B800000;
	mov.f32 	%f706, %f726;
	@%p23 bra 	$L__BB0_13;
// %bb.2:
	@%p265 bra 	$L__BB0_9;
	bra.uni 	$L__BB0_3;
$L__BB0_9:
	mov.b32 	%r9, %f726;
	and.b32  	%r291, %r9, 8388607;
	or.b32  	%r3394, %r291, 1065353216;
	mov.b32 	%f705, %r3394;
	add.s32 	%r292, %r9, -1073741824;
	and.b32  	%r3395, %r292, -8388608;
	setp.eq.s32 	%p30, %r3395, 0;
	@%p30 bra 	$L__BB0_12;
// %bb.10:                              // %__nv_fmaf_rn.exit4.i.i.i2331.preheader
	mov.f32 	%f250, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f249,%f250;
	// end inline asm
$L__BB0_11:                             // %__nv_fmaf_rn.exit4.i.i.i2331
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r293, %r3395, 192937984;
	add.s32 	%r294, %r3394, %r293;
	mov.b32 	%f251, %r294;
	mul.f32 	%f252, %f249, %f251;
	sub.f32 	%f253, %f251, %f252;
	fma.rn.f32 	%f254, %f253, %f249, %f252;
	sub.f32 	%f255, %f251, %f254;
	fma.rz.f32 	%f256, %f255, %f249, %f254;
	cvt.rzi.f32.f32 	%f257, %f256;
	sub.f32 	%f705, %f251, %f257;
	sub.s32 	%r3395, %r3395, %r293;
	mov.b32 	%r3394, %f705;
	setp.ne.s32 	%p31, %r3395, 0;
	setp.ne.s32 	%p32, %r3394, 0;
	and.pred  	%p33, %p31, %p32;
	@%p33 bra 	$L__BB0_11;
$L__BB0_12:                             // %__internal_fmodf_slowpath_mod.exit.i.i2333
	setp.gt.u32 	%p34, %r9, 2139095039;
	selp.f32 	%f258, 0f7FFFFFFF, 0f4B800000, %p34;
	mul.f32 	%f259, %f705, 0f34000000;
	mul.f32 	%f706, %f258, %f259;
	bra.uni 	$L__BB0_13;
$L__BB0_3:                              // %__nv_fast_fdividef.exit.i.i.i2310
	div.approx.f32 	%f242, %f726, %f703;
	cvt.rzi.f32.f32 	%f704, %f242;
	fma.rn.f32 	%f4, %f704, 0fC0000000, %f726;
	mov.b32 	%r8, %f4;
	setp.lt.u32 	%p25, %r8, 1073741824;
	@%p25 bra 	$L__BB0_8;
// %bb.4:
	setp.lt.u32 	%p26, %r8, -2147483647;
	@%p26 bra 	$L__BB0_6;
// %bb.5:
	add.f32 	%f247, %f704, 0fBF800000;
	setp.lt.f32 	%p29, %f4, 0fC0000000;
	add.f32 	%f248, %f247, 0fBF800000;
	selp.f32 	%f704, %f248, %f247, %p29;
	bra.uni 	$L__BB0_8;
$L__BB0_6:
	add.f32 	%f704, %f704, 0f3F800000;
	setp.ltu.f32 	%p27, %f4, 0f40800000;
	@%p27 bra 	$L__BB0_8;
// %bb.7:                               // %__nv_fmaf_rn.exit.i.i.i2314
	add.f32 	%f243, %f704, 0f3F800000;
	fma.rn.f32 	%f245, %f703, 0fC0400000, %f4;
	setp.ge.f32 	%p28, %f245, 0f00000000;
	add.f32 	%f246, %f243, 0f3F800000;
	selp.f32 	%f704, %f246, %f243, %p28;
$L__BB0_8:                              // %__internal_fmodf_fastpath_quot.exit.i.i2317
	fma.rn.f32 	%f706, %f704, 0fC0000000, %f726;
$L__BB0_13:                             // %__internal_fmodf_kernel.exit.i2336
	or.b32  	%r284, %r283, 1056964608;
	abs.f32 	%f260, %f706;
	setp.gtu.f32 	%p35, %f260, 0f7F800000;
	mov.b32 	%r295, %f168;
	and.b32  	%r16, %r295, -2147483648;
	@%p35 bra 	$L__BB0_15;
// %bb.14:
	mov.b32 	%r296, %f706;
	or.b32  	%r297, %r16, %r296;
	mov.b32 	%f706, %r297;
$L__BB0_15:                             // %__nv_fmodf.exit2337
	mov.b32 	%f208, %r284;
	add.f32 	%f261, %f706, %f706;
	mov.b32 	%r298, %f261;
	and.b32  	%r299, %r298, -2147483648;
	or.b32  	%r300, %r299, 1056964608;
	add.s32 	%r306, %r170, %r7;
	cvt.rn.f32.s32 	%f291, %r306;
	div.approx.f32 	%f20, %f291, %f240;
	abs.f32 	%f730, %f20;
	setp.lt.f32 	%p43, %f730, 0f40000000;
	setp.gtu.f32 	%p266, %f730, 0f4B800000;
	mov.f32 	%f710, %f730;
	@%p43 bra 	$L__BB0_27;
// %bb.16:
	@%p266 bra 	$L__BB0_23;
	bra.uni 	$L__BB0_17;
$L__BB0_23:
	mov.b32 	%r18, %f730;
	and.b32  	%r307, %r18, 8388607;
	or.b32  	%r3396, %r307, 1065353216;
	mov.b32 	%f709, %r3396;
	add.s32 	%r308, %r18, -1073741824;
	and.b32  	%r3397, %r308, -8388608;
	setp.eq.s32 	%p50, %r3397, 0;
	@%p50 bra 	$L__BB0_26;
// %bb.24:                              // %__nv_fmaf_rn.exit4.i.i.i2362.preheader
	mov.f32 	%f302, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f301,%f302;
	// end inline asm
$L__BB0_25:                             // %__nv_fmaf_rn.exit4.i.i.i2362
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r309, %r3397, 192937984;
	add.s32 	%r310, %r3396, %r309;
	mov.b32 	%f303, %r310;
	mul.f32 	%f304, %f301, %f303;
	sub.f32 	%f305, %f303, %f304;
	fma.rn.f32 	%f306, %f305, %f301, %f304;
	sub.f32 	%f307, %f303, %f306;
	fma.rz.f32 	%f308, %f307, %f301, %f306;
	cvt.rzi.f32.f32 	%f309, %f308;
	sub.f32 	%f709, %f303, %f309;
	sub.s32 	%r3397, %r3397, %r309;
	mov.b32 	%r3396, %f709;
	setp.ne.s32 	%p51, %r3397, 0;
	setp.ne.s32 	%p52, %r3396, 0;
	and.pred  	%p53, %p51, %p52;
	@%p53 bra 	$L__BB0_25;
$L__BB0_26:                             // %__internal_fmodf_slowpath_mod.exit.i.i2364
	setp.gt.u32 	%p54, %r18, 2139095039;
	selp.f32 	%f310, 0f7FFFFFFF, 0f4B800000, %p54;
	mul.f32 	%f311, %f709, 0f34000000;
	mul.f32 	%f710, %f310, %f311;
	bra.uni 	$L__BB0_27;
$L__BB0_17:                             // %__nv_fast_fdividef.exit.i.i.i2341
	div.approx.f32 	%f294, %f730, %f703;
	cvt.rzi.f32.f32 	%f708, %f294;
	fma.rn.f32 	%f23, %f708, 0fC0000000, %f730;
	mov.b32 	%r17, %f23;
	setp.lt.u32 	%p45, %r17, 1073741824;
	@%p45 bra 	$L__BB0_22;
// %bb.18:
	setp.lt.u32 	%p46, %r17, -2147483647;
	@%p46 bra 	$L__BB0_20;
// %bb.19:
	add.f32 	%f299, %f708, 0fBF800000;
	setp.lt.f32 	%p49, %f23, 0fC0000000;
	add.f32 	%f300, %f299, 0fBF800000;
	selp.f32 	%f708, %f300, %f299, %p49;
	bra.uni 	$L__BB0_22;
$L__BB0_20:
	add.f32 	%f708, %f708, 0f3F800000;
	setp.ltu.f32 	%p47, %f23, 0f40800000;
	@%p47 bra 	$L__BB0_22;
// %bb.21:                              // %__nv_fmaf_rn.exit.i.i.i2345
	add.f32 	%f295, %f708, 0f3F800000;
	fma.rn.f32 	%f297, %f703, 0fC0400000, %f23;
	setp.ge.f32 	%p48, %f297, 0f00000000;
	add.f32 	%f298, %f295, 0f3F800000;
	selp.f32 	%f708, %f298, %f295, %p48;
$L__BB0_22:                             // %__internal_fmodf_fastpath_quot.exit.i.i2348
	fma.rn.f32 	%f710, %f708, 0fC0000000, %f730;
$L__BB0_27:                             // %__internal_fmodf_kernel.exit.i2367
	add.f32 	%f209, %f207, %f208;
	abs.f32 	%f211, %f207;
	mov.b32 	%f262, %r300;
	abs.f32 	%f312, %f710;
	setp.gtu.f32 	%p55, %f312, 0f7F800000;
	mov.b32 	%r311, %f20;
	and.b32  	%r25, %r311, -2147483648;
	@%p55 bra 	$L__BB0_29;
// %bb.28:
	mov.b32 	%r312, %f710;
	or.b32  	%r313, %r25, %r312;
	mov.b32 	%f710, %r313;
$L__BB0_29:                             // %__nv_fmodf.exit2368
	cvt.rzi.f32.f32 	%f210, %f209;
	setp.gt.f32 	%p16, %f211, 0f4B000000;
	add.f32 	%f263, %f261, %f262;
	abs.f32 	%f265, %f261;
	add.f32 	%f313, %f710, %f710;
	mov.b32 	%r320, %f313;
	and.b32  	%r321, %r320, -2147483648;
	or.b32  	%r322, %r321, 1056964608;
	mov.b32 	%f314, %r322;
	add.f32 	%f315, %f313, %f314;
	abs.f32 	%f317, %f313;
	mul.lo.s32 	%r28, %r169, %r7;
	and.b32  	%r328, %r28, 2;
	cvt.rn.f32.s32 	%f345, %r328;
	div.approx.f32 	%f37, %f345, %f703;
	abs.f32 	%f734, %f37;
	setp.lt.f32 	%p63, %f734, 0f40000000;
	setp.gtu.f32 	%p267, %f734, 0f4B800000;
	mov.f32 	%f714, %f734;
	@%p63 bra 	$L__BB0_41;
// %bb.30:
	@%p267 bra 	$L__BB0_37;
	bra.uni 	$L__BB0_31;
$L__BB0_37:
	mov.b32 	%r30, %f734;
	and.b32  	%r329, %r30, 8388607;
	or.b32  	%r3398, %r329, 1065353216;
	mov.b32 	%f713, %r3398;
	add.s32 	%r330, %r30, -1073741824;
	and.b32  	%r3399, %r330, -8388608;
	setp.eq.s32 	%p70, %r3399, 0;
	@%p70 bra 	$L__BB0_40;
// %bb.38:                              // %__nv_fmaf_rn.exit4.i.i.i2393.preheader
	mov.f32 	%f356, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f355,%f356;
	// end inline asm
$L__BB0_39:                             // %__nv_fmaf_rn.exit4.i.i.i2393
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r331, %r3399, 192937984;
	add.s32 	%r332, %r3398, %r331;
	mov.b32 	%f357, %r332;
	mul.f32 	%f358, %f355, %f357;
	sub.f32 	%f359, %f357, %f358;
	fma.rn.f32 	%f360, %f359, %f355, %f358;
	sub.f32 	%f361, %f357, %f360;
	fma.rz.f32 	%f362, %f361, %f355, %f360;
	cvt.rzi.f32.f32 	%f363, %f362;
	sub.f32 	%f713, %f357, %f363;
	sub.s32 	%r3399, %r3399, %r331;
	mov.b32 	%r3398, %f713;
	setp.ne.s32 	%p71, %r3399, 0;
	setp.ne.s32 	%p72, %r3398, 0;
	and.pred  	%p73, %p71, %p72;
	@%p73 bra 	$L__BB0_39;
$L__BB0_40:                             // %__internal_fmodf_slowpath_mod.exit.i.i2395
	setp.gt.u32 	%p74, %r30, 2139095039;
	selp.f32 	%f364, 0f7FFFFFFF, 0f4B800000, %p74;
	mul.f32 	%f365, %f713, 0f34000000;
	mul.f32 	%f714, %f364, %f365;
	bra.uni 	$L__BB0_41;
$L__BB0_31:                             // %__nv_fast_fdividef.exit.i.i.i2372
	div.approx.f32 	%f348, %f734, %f703;
	cvt.rzi.f32.f32 	%f712, %f348;
	fma.rn.f32 	%f40, %f712, 0fC0000000, %f734;
	mov.b32 	%r29, %f40;
	setp.lt.u32 	%p65, %r29, 1073741824;
	@%p65 bra 	$L__BB0_36;
// %bb.32:
	setp.lt.u32 	%p66, %r29, -2147483647;
	@%p66 bra 	$L__BB0_34;
// %bb.33:
	add.f32 	%f353, %f712, 0fBF800000;
	setp.lt.f32 	%p69, %f40, 0fC0000000;
	add.f32 	%f354, %f353, 0fBF800000;
	selp.f32 	%f712, %f354, %f353, %p69;
	bra.uni 	$L__BB0_36;
$L__BB0_34:
	add.f32 	%f712, %f712, 0f3F800000;
	setp.ltu.f32 	%p67, %f40, 0f40800000;
	@%p67 bra 	$L__BB0_36;
// %bb.35:                              // %__nv_fmaf_rn.exit.i.i.i2376
	add.f32 	%f349, %f712, 0f3F800000;
	fma.rn.f32 	%f351, %f703, 0fC0400000, %f40;
	setp.ge.f32 	%p68, %f351, 0f00000000;
	add.f32 	%f352, %f349, 0f3F800000;
	selp.f32 	%f712, %f352, %f349, %p68;
$L__BB0_36:                             // %__internal_fmodf_fastpath_quot.exit.i.i2379
	fma.rn.f32 	%f714, %f712, 0fC0000000, %f734;
$L__BB0_41:                             // %__internal_fmodf_kernel.exit.i2398
	selp.f32 	%f212, %f207, %f210, %p16;
	cvt.rzi.f32.f32 	%f213, %f207;
	setp.lt.f32 	%p17, %f211, 0f3F000000;
	cvt.rzi.f32.f32 	%f264, %f263;
	setp.gt.f32 	%p36, %f265, 0f4B000000;
	cvt.rzi.f32.f32 	%f316, %f315;
	setp.gt.f32 	%p56, %f317, 0f4B000000;
	mov.f32 	%f230, 0f00000000;
	abs.f32 	%f366, %f714;
	setp.gtu.f32 	%p75, %f366, 0f7F800000;
	mov.b32 	%r333, %f37;
	and.b32  	%r37, %r333, -2147483648;
	@%p75 bra 	$L__BB0_43;
// %bb.42:
	mov.b32 	%r334, %f714;
	or.b32  	%r335, %r37, %r334;
	mov.b32 	%f714, %r335;
$L__BB0_43:                             // %__nv_fmodf.exit2399
	selp.f32 	%f214, %f213, %f212, %p17;
	selp.f32 	%f266, %f261, %f264, %p36;
	cvt.rzi.f32.f32 	%f267, %f261;
	setp.lt.f32 	%p37, %f265, 0f3F000000;
	selp.f32 	%f318, %f313, %f316, %p56;
	cvt.rzi.f32.f32 	%f319, %f313;
	setp.lt.f32 	%p57, %f317, 0f3F000000;
	add.f32 	%f367, %f714, %f714;
	mov.b32 	%r336, %f367;
	and.b32  	%r337, %r336, -2147483648;
	or.b32  	%r338, %r337, 1056964608;
	mov.b32 	%f368, %r338;
	add.f32 	%f369, %f367, %f368;
	cvt.rzi.f32.f32 	%f370, %f369;
	abs.f32 	%f371, %f367;
	setp.gt.f32 	%p76, %f371, 0f4B000000;
	selp.f32 	%f372, %f367, %f370, %p76;
	cvt.rzi.f32.f32 	%f373, %f367;
	setp.lt.f32 	%p77, %f371, 0f3F000000;
	selp.f32 	%f374, %f373, %f372, %p77;
	cvt.rzi.s32.f32 	%r339, %f374;
	fma.rn.f32 	%f375, %f374, 0fBF000000, %f714;
	mul.f32 	%f376, %f375, %f375;
	fma.rn.f32 	%f377, %f376, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f378, %f376, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f379, %f377, %f376, 0fC0A55DF6;
	fma.rn.f32 	%f380, %f378, %f376, 0f4081E0CF;
	fma.rn.f32 	%f381, %f376, %f375, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f376, 0fC09DE9E6;
	fma.rn.f32 	%f383, %f379, %f381, 0f00000000;
	fma.rn.f32 	%f384, %f382, %f376, 0f3F800000;
	fma.rn.f32 	%f385, %f375, 0f40490FDB, %f383;
	and.b32  	%r340, %r339, 1;
	setp.eq.b32 	%p78, %r340, 1;
	selp.f32 	%f386, %f384, %f385, %p78;
	selp.f32 	%f387, %f385, %f384, %p78;
	and.b32  	%r341, %r339, 2;
	setp.eq.s32 	%p79, %r341, 0;
	neg.f32 	%f388, %f386;
	selp.f32 	%f389, %f386, %f388, %p79;
	add.s32 	%r342, %r339, 1;
	and.b32  	%r343, %r342, 2;
	setp.eq.s32 	%p80, %r343, 0;
	sub.f32 	%f391, %f230, %f387;
	cvt.rzi.f32.f32 	%f393, %f714;
	setp.eq.f32 	%p81, %f393, %f714;
	mul.f32 	%f394, %f714, 0f00000000;
	selp.f32 	%f721, %f394, %f389, %p81;
	abs.f32 	%f395, %f714;
	add.s32 	%r344, %r28, %r7;
	and.b32  	%r345, %r344, 3;
	cvt.rn.f32.s32 	%f397, %r345;
	div.approx.f32 	%f56, %f397, %f703;
	abs.f32 	%f738, %f56;
	setp.lt.f32 	%p83, %f738, 0f40000000;
	setp.gtu.f32 	%p268, %f738, 0f4B800000;
	mov.f32 	%f718, %f738;
	@%p83 bra 	$L__BB0_55;
// %bb.44:
	@%p268 bra 	$L__BB0_51;
	bra.uni 	$L__BB0_45;
$L__BB0_51:
	mov.b32 	%r39, %f738;
	and.b32  	%r346, %r39, 8388607;
	or.b32  	%r3400, %r346, 1065353216;
	mov.b32 	%f717, %r3400;
	add.s32 	%r347, %r39, -1073741824;
	and.b32  	%r3401, %r347, -8388608;
	setp.eq.s32 	%p90, %r3401, 0;
	@%p90 bra 	$L__BB0_54;
// %bb.52:                              // %__nv_fmaf_rn.exit4.i.i.i2424.preheader
	mov.f32 	%f408, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f407,%f408;
	// end inline asm
$L__BB0_53:                             // %__nv_fmaf_rn.exit4.i.i.i2424
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r348, %r3401, 192937984;
	add.s32 	%r349, %r3400, %r348;
	mov.b32 	%f409, %r349;
	mul.f32 	%f410, %f407, %f409;
	sub.f32 	%f411, %f409, %f410;
	fma.rn.f32 	%f412, %f411, %f407, %f410;
	sub.f32 	%f413, %f409, %f412;
	fma.rz.f32 	%f414, %f413, %f407, %f412;
	cvt.rzi.f32.f32 	%f415, %f414;
	sub.f32 	%f717, %f409, %f415;
	sub.s32 	%r3401, %r3401, %r348;
	mov.b32 	%r3400, %f717;
	setp.ne.s32 	%p91, %r3401, 0;
	setp.ne.s32 	%p92, %r3400, 0;
	and.pred  	%p93, %p91, %p92;
	@%p93 bra 	$L__BB0_53;
$L__BB0_54:                             // %__internal_fmodf_slowpath_mod.exit.i.i2426
	setp.gt.u32 	%p94, %r39, 2139095039;
	selp.f32 	%f416, 0f7FFFFFFF, 0f4B800000, %p94;
	mul.f32 	%f417, %f717, 0f34000000;
	mul.f32 	%f718, %f416, %f417;
	bra.uni 	$L__BB0_55;
$L__BB0_45:                             // %__nv_fast_fdividef.exit.i.i.i2403
	div.approx.f32 	%f400, %f738, %f703;
	cvt.rzi.f32.f32 	%f716, %f400;
	fma.rn.f32 	%f59, %f716, 0fC0000000, %f738;
	mov.b32 	%r38, %f59;
	setp.lt.u32 	%p85, %r38, 1073741824;
	@%p85 bra 	$L__BB0_50;
// %bb.46:
	setp.lt.u32 	%p86, %r38, -2147483647;
	@%p86 bra 	$L__BB0_48;
// %bb.47:
	add.f32 	%f405, %f716, 0fBF800000;
	setp.lt.f32 	%p89, %f59, 0fC0000000;
	add.f32 	%f406, %f405, 0fBF800000;
	selp.f32 	%f716, %f406, %f405, %p89;
	bra.uni 	$L__BB0_50;
$L__BB0_48:
	add.f32 	%f716, %f716, 0f3F800000;
	setp.ltu.f32 	%p87, %f59, 0f40800000;
	@%p87 bra 	$L__BB0_50;
// %bb.49:                              // %__nv_fmaf_rn.exit.i.i.i2407
	add.f32 	%f401, %f716, 0f3F800000;
	fma.rn.f32 	%f403, %f703, 0fC0400000, %f59;
	setp.ge.f32 	%p88, %f403, 0f00000000;
	add.f32 	%f404, %f401, 0f3F800000;
	selp.f32 	%f716, %f404, %f401, %p88;
$L__BB0_50:                             // %__internal_fmodf_fastpath_quot.exit.i.i2410
	fma.rn.f32 	%f718, %f716, 0fC0000000, %f738;
$L__BB0_55:                             // %__internal_fmodf_kernel.exit.i2429
	fma.rn.f32 	%f215, %f214, 0fBF000000, %f746;
	selp.f32 	%f268, %f267, %f266, %p37;
	selp.f32 	%f320, %f319, %f318, %p57;
	selp.f32 	%f392, %f387, %f391, %p80;
	setp.gt.f32 	%p82, %f395, 0f4B800000;
	add.f32 	%f396, %f721, 0f3F800000;
	abs.f32 	%f418, %f718;
	setp.gtu.f32 	%p95, %f418, 0f7F800000;
	mov.b32 	%r350, %f56;
	and.b32  	%r46, %r350, -2147483648;
	@%p95 bra 	$L__BB0_57;
// %bb.56:
	mov.b32 	%r351, %f718;
	or.b32  	%r352, %r46, %r351;
	mov.b32 	%f718, %r352;
$L__BB0_57:                             // %__nv_fmodf.exit2430
	mul.f32 	%f216, %f215, %f215;
	fma.rn.f32 	%f269, %f268, 0fBF000000, %f706;
	fma.rn.f32 	%f321, %f320, 0fBF000000, %f710;
	selp.f32 	%f55, %f396, %f392, %p82;
	add.f32 	%f419, %f718, %f718;
	mov.b32 	%r353, %f419;
	and.b32  	%r354, %r353, -2147483648;
	or.b32  	%r355, %r354, 1056964608;
	mov.b32 	%f420, %r355;
	add.f32 	%f421, %f419, %f420;
	cvt.rzi.f32.f32 	%f422, %f421;
	abs.f32 	%f423, %f419;
	setp.gt.f32 	%p96, %f423, 0f4B000000;
	selp.f32 	%f424, %f419, %f422, %p96;
	cvt.rzi.f32.f32 	%f425, %f419;
	setp.lt.f32 	%p97, %f423, 0f3F000000;
	selp.f32 	%f426, %f425, %f424, %p97;
	cvt.rzi.s32.f32 	%r356, %f426;
	fma.rn.f32 	%f427, %f426, 0fBF000000, %f718;
	mul.f32 	%f428, %f427, %f427;
	fma.rn.f32 	%f429, %f428, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f430, %f428, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f431, %f429, %f428, 0fC0A55DF6;
	fma.rn.f32 	%f432, %f430, %f428, 0f4081E0CF;
	fma.rn.f32 	%f433, %f428, %f427, 0f00000000;
	fma.rn.f32 	%f434, %f432, %f428, 0fC09DE9E6;
	fma.rn.f32 	%f435, %f431, %f433, 0f00000000;
	fma.rn.f32 	%f436, %f434, %f428, 0f3F800000;
	fma.rn.f32 	%f437, %f427, 0f40490FDB, %f435;
	and.b32  	%r357, %r356, 1;
	setp.eq.b32 	%p98, %r357, 1;
	selp.f32 	%f438, %f436, %f437, %p98;
	selp.f32 	%f439, %f437, %f436, %p98;
	and.b32  	%r358, %r356, 2;
	setp.eq.s32 	%p99, %r358, 0;
	neg.f32 	%f440, %f438;
	selp.f32 	%f441, %f438, %f440, %p99;
	add.s32 	%r359, %r356, 1;
	and.b32  	%r360, %r359, 2;
	setp.eq.s32 	%p100, %r360, 0;
	sub.f32 	%f443, %f230, %f439;
	selp.f32 	%f444, %f439, %f443, %p100;
	cvt.rzi.f32.f32 	%f445, %f718;
	setp.eq.f32 	%p101, %f445, %f718;
	mul.f32 	%f446, %f718, 0f00000000;
	selp.f32 	%f723, %f446, %f441, %p101;
	abs.f32 	%f447, %f718;
	setp.gt.f32 	%p102, %f447, 0f4B800000;
	add.f32 	%f448, %f723, 0f3F800000;
	selp.f32 	%f74, %f448, %f444, %p102;
	and.b32  	%r47, %r3, 2;
	setp.eq.s32 	%p103, %r47, 0;
	mov.f32 	%f720, %f55;
	mov.f32 	%f722, %f74;
	@%p103 bra 	$L__BB0_59;
// %bb.58:                              // %L399
	neg.f32 	%f722, %f723;
	neg.f32 	%f720, %f721;
	mov.f32 	%f721, %f55;
	mov.f32 	%f723, %f74;
$L__BB0_59:                             // %L401
	fma.rn.f32 	%f217, %f216, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f218, %f216, 0f3E684E12, 0fBFAAD2E0;
	mul.f32 	%f270, %f269, %f269;
	mul.f32 	%f322, %f321, %f321;
	@%p3 bra 	$L__BB0_210;
// %bb.60:
	@%p264 bra 	$L__BB0_206;
	bra.uni 	$L__BB0_61;
$L__BB0_206:
	mov.b32 	%r172, %f750;
	and.b32  	%r367, %r172, 8388607;
	or.b32  	%r3430, %r367, 1065353216;
	mov.b32 	%f749, %r3430;
	add.s32 	%r368, %r172, -1073741824;
	and.b32  	%r3431, %r368, -8388608;
	setp.eq.s32 	%p111, %r3431, 0;
	@%p111 bra 	$L__BB0_209;
// %bb.207:                             // %__nv_fmaf_rn.exit4.i.i.i2455.preheader
	mov.f32 	%f458, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f457,%f458;
	// end inline asm
$L__BB0_208:                            // %__nv_fmaf_rn.exit4.i.i.i2455
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r369, %r3431, 192937984;
	add.s32 	%r370, %r3430, %r369;
	mov.b32 	%f459, %r370;
	mul.f32 	%f460, %f457, %f459;
	sub.f32 	%f461, %f459, %f460;
	fma.rn.f32 	%f462, %f461, %f457, %f460;
	sub.f32 	%f463, %f459, %f462;
	fma.rz.f32 	%f464, %f463, %f457, %f462;
	cvt.rzi.f32.f32 	%f465, %f464;
	sub.f32 	%f749, %f459, %f465;
	sub.s32 	%r3431, %r3431, %r369;
	mov.b32 	%r3430, %f749;
	setp.ne.s32 	%p112, %r3431, 0;
	setp.ne.s32 	%p113, %r3430, 0;
	and.pred  	%p114, %p112, %p113;
	@%p114 bra 	$L__BB0_208;
$L__BB0_209:                            // %__internal_fmodf_slowpath_mod.exit.i.i2457
	setp.gt.u32 	%p115, %r172, 2139095039;
	selp.f32 	%f466, 0f7FFFFFFF, 0f4B800000, %p115;
	mul.f32 	%f467, %f749, 0f34000000;
	mul.f32 	%f750, %f466, %f467;
	bra.uni 	$L__BB0_210;
$L__BB0_61:                             // %__nv_fast_fdividef.exit.i.i.i2434
	div.approx.f32 	%f450, %f750, %f703;
	cvt.rzi.f32.f32 	%f748, %f450;
	fma.rn.f32 	%f171, %f748, 0fC0000000, %f750;
	mov.b32 	%r171, %f171;
	setp.lt.u32 	%p106, %r171, 1073741824;
	@%p106 bra 	$L__BB0_205;
// %bb.62:
	setp.lt.u32 	%p107, %r171, -2147483647;
	@%p107 bra 	$L__BB0_203;
// %bb.63:
	add.f32 	%f455, %f748, 0fBF800000;
	setp.lt.f32 	%p110, %f171, 0fC0000000;
	add.f32 	%f456, %f455, 0fBF800000;
	selp.f32 	%f748, %f456, %f455, %p110;
	bra.uni 	$L__BB0_205;
$L__BB0_203:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p108, %f171, 0f40800000;
	@%p108 bra 	$L__BB0_205;
// %bb.204:                             // %__nv_fmaf_rn.exit.i.i.i2438
	add.f32 	%f451, %f748, 0f3F800000;
	fma.rn.f32 	%f453, %f703, 0fC0400000, %f171;
	setp.ge.f32 	%p109, %f453, 0f00000000;
	add.f32 	%f454, %f451, 0f3F800000;
	selp.f32 	%f748, %f454, %f451, %p109;
$L__BB0_205:                            // %__internal_fmodf_fastpath_quot.exit.i.i2441
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_210:                            // %__internal_fmodf_kernel.exit.i2460
	cvt.rzi.s32.f32 	%r285, %f214;
	fma.rn.f32 	%f219, %f217, %f216, 0fC0A55DF6;
	fma.rn.f32 	%f220, %f218, %f216, 0f4081E0CF;
	fma.rn.f32 	%f221, %f216, %f215, 0f00000000;
	fma.rn.f32 	%f271, %f270, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f272, %f270, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f323, %f322, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f324, %f322, 0f3E684E12, 0fBFAAD2E0;
	abs.f32 	%f468, %f750;
	setp.gtu.f32 	%p116, %f468, 0f7F800000;
	@%p116 bra 	$L__BB0_212;
// %bb.211:
	mov.b32 	%r371, %f750;
	or.b32  	%r372, %r166, %r371;
	mov.b32 	%f750, %r372;
$L__BB0_212:                            // %__nv_fmodf.exit2461
	fma.rn.f32 	%f222, %f220, %f216, 0fC09DE9E6;
	fma.rn.f32 	%f223, %f219, %f221, 0f00000000;
	and.b32  	%r286, %r285, 1;
	cvt.rzi.s32.f32 	%r301, %f268;
	fma.rn.f32 	%f273, %f271, %f270, 0fC0A55DF6;
	fma.rn.f32 	%f274, %f272, %f270, 0f4081E0CF;
	fma.rn.f32 	%f275, %f270, %f269, 0f00000000;
	cvt.rzi.s32.f32 	%r323, %f320;
	fma.rn.f32 	%f325, %f323, %f322, 0fC0A55DF6;
	fma.rn.f32 	%f326, %f324, %f322, 0f4081E0CF;
	fma.rn.f32 	%f327, %f322, %f321, 0f00000000;
	add.f32 	%f469, %f750, %f750;
	mov.b32 	%r379, %f469;
	and.b32  	%r380, %r379, -2147483648;
	or.b32  	%r381, %r380, 1056964608;
	mov.b32 	%f470, %r381;
	add.f32 	%f471, %f469, %f470;
	cvt.rzi.f32.f32 	%f472, %f471;
	abs.f32 	%f473, %f469;
	setp.gt.f32 	%p118, %f473, 0f4B000000;
	selp.f32 	%f474, %f469, %f472, %p118;
	cvt.rzi.f32.f32 	%f475, %f469;
	setp.lt.f32 	%p119, %f473, 0f3F000000;
	selp.f32 	%f476, %f475, %f474, %p119;
	cvt.rzi.s32.f32 	%r382, %f476;
	fma.rn.f32 	%f477, %f476, 0fBF000000, %f750;
	mul.f32 	%f478, %f477, %f477;
	fma.rn.f32 	%f479, %f478, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f480, %f478, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f481, %f479, %f478, 0fC0A55DF6;
	fma.rn.f32 	%f482, %f480, %f478, 0f4081E0CF;
	fma.rn.f32 	%f483, %f478, %f477, 0f00000000;
	fma.rn.f32 	%f484, %f482, %f478, 0fC09DE9E6;
	fma.rn.f32 	%f485, %f481, %f483, 0f00000000;
	and.b32  	%r383, %r382, 1;
	@%p23 bra 	$L__BB0_75;
// %bb.64:
	@%p265 bra 	$L__BB0_71;
	bra.uni 	$L__BB0_65;
$L__BB0_71:
	mov.b32 	%r51, %f726;
	and.b32  	%r387, %r51, 8388607;
	or.b32  	%r3402, %r387, 1065353216;
	mov.b32 	%f725, %r3402;
	add.s32 	%r388, %r51, -1073741824;
	and.b32  	%r3403, %r388, -8388608;
	setp.eq.s32 	%p131, %r3403, 0;
	@%p131 bra 	$L__BB0_74;
// %bb.72:                              // %__nv_fmaf_rn.exit4.i.i.i2486.preheader
	mov.f32 	%f510, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f509,%f510;
	// end inline asm
$L__BB0_73:                             // %__nv_fmaf_rn.exit4.i.i.i2486
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r389, %r3403, 192937984;
	add.s32 	%r390, %r3402, %r389;
	mov.b32 	%f511, %r390;
	mul.f32 	%f512, %f509, %f511;
	sub.f32 	%f513, %f511, %f512;
	fma.rn.f32 	%f514, %f513, %f509, %f512;
	sub.f32 	%f515, %f511, %f514;
	fma.rz.f32 	%f516, %f515, %f509, %f514;
	cvt.rzi.f32.f32 	%f517, %f516;
	sub.f32 	%f725, %f511, %f517;
	sub.s32 	%r3403, %r3403, %r389;
	mov.b32 	%r3402, %f725;
	setp.ne.s32 	%p132, %r3403, 0;
	setp.ne.s32 	%p133, %r3402, 0;
	and.pred  	%p134, %p132, %p133;
	@%p134 bra 	$L__BB0_73;
$L__BB0_74:                             // %__internal_fmodf_slowpath_mod.exit.i.i2488
	setp.gt.u32 	%p135, %r51, 2139095039;
	selp.f32 	%f518, 0f7FFFFFFF, 0f4B800000, %p135;
	mul.f32 	%f519, %f725, 0f34000000;
	mul.f32 	%f726, %f518, %f519;
	bra.uni 	$L__BB0_75;
$L__BB0_65:                             // %__nv_fast_fdividef.exit.i.i.i2465
	div.approx.f32 	%f502, %f726, %f703;
	cvt.rzi.f32.f32 	%f724, %f502;
	fma.rn.f32 	%f82, %f724, 0fC0000000, %f726;
	mov.b32 	%r50, %f82;
	setp.lt.u32 	%p126, %r50, 1073741824;
	@%p126 bra 	$L__BB0_70;
// %bb.66:
	setp.lt.u32 	%p127, %r50, -2147483647;
	@%p127 bra 	$L__BB0_68;
// %bb.67:
	add.f32 	%f507, %f724, 0fBF800000;
	setp.lt.f32 	%p130, %f82, 0fC0000000;
	add.f32 	%f508, %f507, 0fBF800000;
	selp.f32 	%f724, %f508, %f507, %p130;
	bra.uni 	$L__BB0_70;
$L__BB0_68:
	add.f32 	%f724, %f724, 0f3F800000;
	setp.ltu.f32 	%p128, %f82, 0f40800000;
	@%p128 bra 	$L__BB0_70;
// %bb.69:                              // %__nv_fmaf_rn.exit.i.i.i2469
	add.f32 	%f503, %f724, 0f3F800000;
	fma.rn.f32 	%f505, %f703, 0fC0400000, %f82;
	setp.ge.f32 	%p129, %f505, 0f00000000;
	add.f32 	%f506, %f503, 0f3F800000;
	selp.f32 	%f724, %f506, %f503, %p129;
$L__BB0_70:                             // %__internal_fmodf_fastpath_quot.exit.i.i2472
	fma.rn.f32 	%f726, %f724, 0fC0000000, %f726;
$L__BB0_75:                             // %__internal_fmodf_kernel.exit.i2491
	fma.rn.f32 	%f224, %f222, %f216, 0f3F800000;
	fma.rn.f32 	%f225, %f215, 0f40490FDB, %f223;
	setp.eq.b32 	%p18, %r286, 1;
	fma.rn.f32 	%f276, %f274, %f270, 0fC09DE9E6;
	fma.rn.f32 	%f277, %f273, %f275, 0f00000000;
	and.b32  	%r302, %r301, 1;
	fma.rn.f32 	%f328, %f326, %f322, 0fC09DE9E6;
	fma.rn.f32 	%f329, %f325, %f327, 0f00000000;
	and.b32  	%r324, %r323, 1;
	fma.rn.f32 	%f486, %f484, %f478, 0f3F800000;
	fma.rn.f32 	%f487, %f477, 0f40490FDB, %f485;
	setp.eq.b32 	%p120, %r383, 1;
	abs.f32 	%f520, %f726;
	setp.gtu.f32 	%p136, %f520, 0f7F800000;
	@%p136 bra 	$L__BB0_77;
// %bb.76:
	mov.b32 	%r391, %f726;
	or.b32  	%r392, %r16, %r391;
	mov.b32 	%f726, %r392;
$L__BB0_77:                             // %__nv_fmodf.exit2492
	selp.f32 	%f226, %f224, %f225, %p18;
	and.b32  	%r287, %r285, 2;
	fma.rn.f32 	%f278, %f276, %f270, 0f3F800000;
	fma.rn.f32 	%f279, %f269, 0f40490FDB, %f277;
	setp.eq.b32 	%p38, %r302, 1;
	fma.rn.f32 	%f330, %f328, %f322, 0f3F800000;
	fma.rn.f32 	%f331, %f321, 0f40490FDB, %f329;
	setp.eq.b32 	%p58, %r324, 1;
	selp.f32 	%f488, %f486, %f487, %p120;
	and.b32  	%r384, %r382, 2;
	add.f32 	%f521, %f726, %f726;
	mov.b32 	%r393, %f521;
	and.b32  	%r394, %r393, -2147483648;
	or.b32  	%r395, %r394, 1056964608;
	mov.b32 	%f522, %r395;
	add.f32 	%f523, %f521, %f522;
	cvt.rzi.f32.f32 	%f524, %f523;
	abs.f32 	%f525, %f521;
	setp.gt.f32 	%p138, %f525, 0f4B000000;
	selp.f32 	%f526, %f521, %f524, %p138;
	cvt.rzi.f32.f32 	%f527, %f521;
	setp.lt.f32 	%p139, %f525, 0f3F000000;
	selp.f32 	%f528, %f527, %f526, %p139;
	cvt.rzi.s32.f32 	%r396, %f528;
	fma.rn.f32 	%f529, %f528, 0fBF000000, %f726;
	mul.f32 	%f530, %f529, %f529;
	fma.rn.f32 	%f531, %f530, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f532, %f530, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f533, %f531, %f530, 0fC0A55DF6;
	fma.rn.f32 	%f534, %f532, %f530, 0f4081E0CF;
	fma.rn.f32 	%f535, %f530, %f529, 0f00000000;
	fma.rn.f32 	%f536, %f534, %f530, 0fC09DE9E6;
	fma.rn.f32 	%f537, %f533, %f535, 0f00000000;
	fma.rn.f32 	%f538, %f536, %f530, 0f3F800000;
	fma.rn.f32 	%f539, %f529, 0f40490FDB, %f537;
	and.b32  	%r397, %r396, 1;
	setp.eq.b32 	%p140, %r397, 1;
	@%p43 bra 	$L__BB0_89;
// %bb.78:
	@%p266 bra 	$L__BB0_85;
	bra.uni 	$L__BB0_79;
$L__BB0_85:
	mov.b32 	%r59, %f730;
	and.b32  	%r401, %r59, 8388607;
	or.b32  	%r3404, %r401, 1065353216;
	mov.b32 	%f729, %r3404;
	add.s32 	%r402, %r59, -1073741824;
	and.b32  	%r3405, %r402, -8388608;
	setp.eq.s32 	%p151, %r3405, 0;
	@%p151 bra 	$L__BB0_88;
// %bb.86:                              // %__nv_fmaf_rn.exit4.i.i.i2517.preheader
	mov.f32 	%f560, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f559,%f560;
	// end inline asm
$L__BB0_87:                             // %__nv_fmaf_rn.exit4.i.i.i2517
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r403, %r3405, 192937984;
	add.s32 	%r404, %r3404, %r403;
	mov.b32 	%f561, %r404;
	mul.f32 	%f562, %f559, %f561;
	sub.f32 	%f563, %f561, %f562;
	fma.rn.f32 	%f564, %f563, %f559, %f562;
	sub.f32 	%f565, %f561, %f564;
	fma.rz.f32 	%f566, %f565, %f559, %f564;
	cvt.rzi.f32.f32 	%f567, %f566;
	sub.f32 	%f729, %f561, %f567;
	sub.s32 	%r3405, %r3405, %r403;
	mov.b32 	%r3404, %f729;
	setp.ne.s32 	%p152, %r3405, 0;
	setp.ne.s32 	%p153, %r3404, 0;
	and.pred  	%p154, %p152, %p153;
	@%p154 bra 	$L__BB0_87;
$L__BB0_88:                             // %__internal_fmodf_slowpath_mod.exit.i.i2519
	setp.gt.u32 	%p155, %r59, 2139095039;
	selp.f32 	%f568, 0f7FFFFFFF, 0f4B800000, %p155;
	mul.f32 	%f569, %f729, 0f34000000;
	mul.f32 	%f730, %f568, %f569;
	bra.uni 	$L__BB0_89;
$L__BB0_79:                             // %__nv_fast_fdividef.exit.i.i.i2496
	div.approx.f32 	%f552, %f730, %f703;
	cvt.rzi.f32.f32 	%f728, %f552;
	fma.rn.f32 	%f99, %f728, 0fC0000000, %f730;
	mov.b32 	%r58, %f99;
	setp.lt.u32 	%p146, %r58, 1073741824;
	@%p146 bra 	$L__BB0_84;
// %bb.80:
	setp.lt.u32 	%p147, %r58, -2147483647;
	@%p147 bra 	$L__BB0_82;
// %bb.81:
	add.f32 	%f557, %f728, 0fBF800000;
	setp.lt.f32 	%p150, %f99, 0fC0000000;
	add.f32 	%f558, %f557, 0fBF800000;
	selp.f32 	%f728, %f558, %f557, %p150;
	bra.uni 	$L__BB0_84;
$L__BB0_82:
	add.f32 	%f728, %f728, 0f3F800000;
	setp.ltu.f32 	%p148, %f99, 0f40800000;
	@%p148 bra 	$L__BB0_84;
// %bb.83:                              // %__nv_fmaf_rn.exit.i.i.i2500
	add.f32 	%f553, %f728, 0f3F800000;
	fma.rn.f32 	%f555, %f703, 0fC0400000, %f99;
	setp.ge.f32 	%p149, %f555, 0f00000000;
	add.f32 	%f556, %f553, 0f3F800000;
	selp.f32 	%f728, %f556, %f553, %p149;
$L__BB0_84:                             // %__internal_fmodf_fastpath_quot.exit.i.i2503
	fma.rn.f32 	%f730, %f728, 0fC0000000, %f730;
$L__BB0_89:                             // %__internal_fmodf_kernel.exit.i2522
	setp.eq.s32 	%p19, %r287, 0;
	neg.f32 	%f228, %f226;
	add.s32 	%r288, %r285, 1;
	cvt.rzi.f32.f32 	%f233, %f746;
	selp.f32 	%f280, %f278, %f279, %p38;
	and.b32  	%r303, %r301, 2;
	selp.f32 	%f332, %f330, %f331, %p58;
	and.b32  	%r325, %r323, 2;
	setp.eq.s32 	%p121, %r384, 0;
	neg.f32 	%f490, %f488;
	add.s32 	%r385, %r382, 1;
	cvt.rzi.f32.f32 	%f495, %f750;
	selp.f32 	%f540, %f538, %f539, %p140;
	and.b32  	%r398, %r396, 2;
	abs.f32 	%f570, %f730;
	setp.gtu.f32 	%p156, %f570, 0f7F800000;
	@%p156 bra 	$L__BB0_91;
// %bb.90:
	mov.b32 	%r405, %f730;
	or.b32  	%r406, %r25, %r405;
	mov.b32 	%f730, %r406;
$L__BB0_91:                             // %__nv_fmodf.exit2523
	selp.f32 	%f227, %f225, %f224, %p18;
	selp.f32 	%f229, %f226, %f228, %p19;
	and.b32  	%r289, %r288, 2;
	setp.eq.f32 	%p21, %f233, %f746;
	mul.f32 	%f234, %f746, 0f00000000;
	setp.eq.s32 	%p39, %r303, 0;
	neg.f32 	%f282, %f280;
	add.s32 	%r304, %r301, 1;
	cvt.rzi.f32.f32 	%f287, %f706;
	setp.eq.s32 	%p59, %r325, 0;
	neg.f32 	%f334, %f332;
	add.s32 	%r326, %r323, 1;
	cvt.rzi.f32.f32 	%f339, %f710;
	selp.f32 	%f489, %f487, %f486, %p120;
	selp.f32 	%f491, %f488, %f490, %p121;
	and.b32  	%r386, %r385, 2;
	setp.eq.f32 	%p123, %f495, %f750;
	mul.f32 	%f496, %f750, 0f00000000;
	setp.eq.s32 	%p141, %r398, 0;
	neg.f32 	%f542, %f540;
	add.s32 	%r399, %r396, 1;
	cvt.rzi.f32.f32 	%f547, %f726;
	add.f32 	%f571, %f730, %f730;
	mov.b32 	%r413, %f571;
	and.b32  	%r414, %r413, -2147483648;
	or.b32  	%r415, %r414, 1056964608;
	mov.b32 	%f572, %r415;
	add.f32 	%f573, %f571, %f572;
	cvt.rzi.f32.f32 	%f574, %f573;
	abs.f32 	%f575, %f571;
	setp.gt.f32 	%p158, %f575, 0f4B000000;
	selp.f32 	%f576, %f571, %f574, %p158;
	cvt.rzi.f32.f32 	%f577, %f571;
	setp.lt.f32 	%p159, %f575, 0f3F000000;
	selp.f32 	%f578, %f577, %f576, %p159;
	cvt.rzi.s32.f32 	%r416, %f578;
	fma.rn.f32 	%f579, %f578, 0fBF000000, %f730;
	mul.f32 	%f580, %f579, %f579;
	fma.rn.f32 	%f581, %f580, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f582, %f580, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f583, %f581, %f580, 0fC0A55DF6;
	fma.rn.f32 	%f584, %f582, %f580, 0f4081E0CF;
	fma.rn.f32 	%f585, %f580, %f579, 0f00000000;
	fma.rn.f32 	%f586, %f584, %f580, 0fC09DE9E6;
	fma.rn.f32 	%f587, %f583, %f585, 0f00000000;
	fma.rn.f32 	%f588, %f586, %f580, 0f3F800000;
	fma.rn.f32 	%f589, %f579, 0f40490FDB, %f587;
	and.b32  	%r417, %r416, 1;
	setp.eq.b32 	%p160, %r417, 1;
	selp.f32 	%f590, %f588, %f589, %p160;
	and.b32  	%r418, %r416, 2;
	setp.eq.s32 	%p161, %r418, 0;
	neg.f32 	%f592, %f590;
	add.s32 	%r419, %r416, 1;
	cvt.rzi.f32.f32 	%f597, %f730;
	@%p63 bra 	$L__BB0_103;
// %bb.92:
	@%p267 bra 	$L__BB0_99;
	bra.uni 	$L__BB0_93;
$L__BB0_99:
	mov.b32 	%r69, %f734;
	and.b32  	%r421, %r69, 8388607;
	or.b32  	%r3406, %r421, 1065353216;
	mov.b32 	%f733, %r3406;
	add.s32 	%r422, %r69, -1073741824;
	and.b32  	%r3407, %r422, -8388608;
	setp.eq.s32 	%p171, %r3407, 0;
	@%p171 bra 	$L__BB0_102;
// %bb.100:                             // %__nv_fmaf_rn.exit4.i.i.i2548.preheader
	mov.f32 	%f612, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f611,%f612;
	// end inline asm
$L__BB0_101:                            // %__nv_fmaf_rn.exit4.i.i.i2548
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r423, %r3407, 192937984;
	add.s32 	%r424, %r3406, %r423;
	mov.b32 	%f613, %r424;
	mul.f32 	%f614, %f611, %f613;
	sub.f32 	%f615, %f613, %f614;
	fma.rn.f32 	%f616, %f615, %f611, %f614;
	sub.f32 	%f617, %f613, %f616;
	fma.rz.f32 	%f618, %f617, %f611, %f616;
	cvt.rzi.f32.f32 	%f619, %f618;
	sub.f32 	%f733, %f613, %f619;
	sub.s32 	%r3407, %r3407, %r423;
	mov.b32 	%r3406, %f733;
	setp.ne.s32 	%p172, %r3407, 0;
	setp.ne.s32 	%p173, %r3406, 0;
	and.pred  	%p174, %p172, %p173;
	@%p174 bra 	$L__BB0_101;
$L__BB0_102:                            // %__internal_fmodf_slowpath_mod.exit.i.i2550
	setp.gt.u32 	%p175, %r69, 2139095039;
	selp.f32 	%f620, 0f7FFFFFFF, 0f4B800000, %p175;
	mul.f32 	%f621, %f733, 0f34000000;
	mul.f32 	%f734, %f620, %f621;
	bra.uni 	$L__BB0_103;
$L__BB0_93:                             // %__nv_fast_fdividef.exit.i.i.i2527
	div.approx.f32 	%f604, %f734, %f703;
	cvt.rzi.f32.f32 	%f732, %f604;
	fma.rn.f32 	%f114, %f732, 0fC0000000, %f734;
	mov.b32 	%r68, %f114;
	setp.lt.u32 	%p166, %r68, 1073741824;
	@%p166 bra 	$L__BB0_98;
// %bb.94:
	setp.lt.u32 	%p167, %r68, -2147483647;
	@%p167 bra 	$L__BB0_96;
// %bb.95:
	add.f32 	%f609, %f732, 0fBF800000;
	setp.lt.f32 	%p170, %f114, 0fC0000000;
	add.f32 	%f610, %f609, 0fBF800000;
	selp.f32 	%f732, %f610, %f609, %p170;
	bra.uni 	$L__BB0_98;
$L__BB0_96:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p168, %f114, 0f40800000;
	@%p168 bra 	$L__BB0_98;
// %bb.97:                              // %__nv_fmaf_rn.exit.i.i.i2531
	add.f32 	%f605, %f732, 0f3F800000;
	fma.rn.f32 	%f607, %f703, 0fC0400000, %f114;
	setp.ge.f32 	%p169, %f607, 0f00000000;
	add.f32 	%f608, %f605, 0f3F800000;
	selp.f32 	%f732, %f608, %f605, %p169;
$L__BB0_98:                             // %__internal_fmodf_fastpath_quot.exit.i.i2534
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_103:                            // %__internal_fmodf_kernel.exit.i2553
	setp.eq.s32 	%p20, %r289, 0;
	sub.f32 	%f231, %f230, %f227;
	selp.f32 	%f235, %f234, %f229, %p21;
	abs.f32 	%f236, %f746;
	selp.f32 	%f281, %f279, %f278, %p38;
	selp.f32 	%f283, %f280, %f282, %p39;
	and.b32  	%r305, %r304, 2;
	setp.eq.f32 	%p41, %f287, %f706;
	mul.f32 	%f288, %f706, 0f00000000;
	selp.f32 	%f333, %f331, %f330, %p58;
	selp.f32 	%f335, %f332, %f334, %p59;
	and.b32  	%r327, %r326, 2;
	setp.eq.f32 	%p61, %f339, %f710;
	mul.f32 	%f340, %f710, 0f00000000;
	setp.eq.s32 	%p122, %r386, 0;
	sub.f32 	%f493, %f230, %f489;
	selp.f32 	%f497, %f496, %f491, %p123;
	abs.f32 	%f498, %f750;
	selp.f32 	%f541, %f539, %f538, %p140;
	selp.f32 	%f543, %f540, %f542, %p141;
	and.b32  	%r400, %r399, 2;
	setp.eq.f32 	%p143, %f547, %f726;
	mul.f32 	%f548, %f726, 0f00000000;
	selp.f32 	%f591, %f589, %f588, %p160;
	selp.f32 	%f593, %f590, %f592, %p161;
	and.b32  	%r420, %r419, 2;
	setp.eq.f32 	%p163, %f597, %f730;
	mul.f32 	%f598, %f730, 0f00000000;
	abs.f32 	%f622, %f734;
	setp.gtu.f32 	%p176, %f622, 0f7F800000;
	@%p176 bra 	$L__BB0_105;
// %bb.104:
	mov.b32 	%r425, %f734;
	or.b32  	%r426, %r37, %r425;
	mov.b32 	%f734, %r426;
$L__BB0_105:                            // %__nv_fmodf.exit2554
	selp.f32 	%f232, %f227, %f231, %p20;
	setp.gt.f32 	%p22, %f236, 0f4B800000;
	add.f32 	%f237, %f235, 0f3F800000;
	setp.eq.s32 	%p40, %r305, 0;
	sub.f32 	%f285, %f230, %f281;
	selp.f32 	%f18, %f288, %f283, %p41;
	abs.f32 	%f289, %f706;
	setp.eq.s32 	%p60, %r327, 0;
	sub.f32 	%f337, %f230, %f333;
	selp.f32 	%f341, %f340, %f335, %p61;
	abs.f32 	%f342, %f710;
	selp.f32 	%f494, %f489, %f493, %p122;
	setp.gt.f32 	%p124, %f498, 0f4B800000;
	add.f32 	%f499, %f497, 0f3F800000;
	setp.eq.s32 	%p142, %r400, 0;
	sub.f32 	%f545, %f230, %f541;
	selp.f32 	%f96, %f548, %f543, %p143;
	abs.f32 	%f549, %f726;
	setp.eq.s32 	%p162, %r420, 0;
	sub.f32 	%f595, %f230, %f591;
	selp.f32 	%f599, %f598, %f593, %p163;
	abs.f32 	%f600, %f730;
	add.f32 	%f623, %f734, %f734;
	mov.b32 	%r427, %f623;
	and.b32  	%r428, %r427, -2147483648;
	or.b32  	%r429, %r428, 1056964608;
	mov.b32 	%f624, %r429;
	add.f32 	%f625, %f623, %f624;
	cvt.rzi.f32.f32 	%f626, %f625;
	abs.f32 	%f627, %f623;
	setp.gt.f32 	%p178, %f627, 0f4B000000;
	selp.f32 	%f628, %f623, %f626, %p178;
	cvt.rzi.f32.f32 	%f629, %f623;
	setp.lt.f32 	%p179, %f627, 0f3F000000;
	selp.f32 	%f630, %f629, %f628, %p179;
	cvt.rzi.s32.f32 	%r430, %f630;
	fma.rn.f32 	%f631, %f630, 0fBF000000, %f734;
	mul.f32 	%f632, %f631, %f631;
	fma.rn.f32 	%f633, %f632, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f634, %f632, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f635, %f633, %f632, 0fC0A55DF6;
	fma.rn.f32 	%f636, %f634, %f632, 0f4081E0CF;
	fma.rn.f32 	%f637, %f632, %f631, 0f00000000;
	fma.rn.f32 	%f638, %f636, %f632, 0fC09DE9E6;
	fma.rn.f32 	%f639, %f635, %f637, 0f00000000;
	fma.rn.f32 	%f640, %f638, %f632, 0f3F800000;
	fma.rn.f32 	%f641, %f631, 0f40490FDB, %f639;
	and.b32  	%r431, %r430, 1;
	setp.eq.b32 	%p180, %r431, 1;
	selp.f32 	%f642, %f640, %f641, %p180;
	selp.f32 	%f643, %f641, %f640, %p180;
	and.b32  	%r432, %r430, 2;
	setp.eq.s32 	%p181, %r432, 0;
	neg.f32 	%f644, %f642;
	selp.f32 	%f645, %f642, %f644, %p181;
	add.s32 	%r433, %r430, 1;
	and.b32  	%r434, %r433, 2;
	setp.eq.s32 	%p182, %r434, 0;
	sub.f32 	%f647, %f230, %f643;
	cvt.rzi.f32.f32 	%f649, %f734;
	setp.eq.f32 	%p183, %f649, %f734;
	mul.f32 	%f650, %f734, 0f00000000;
	selp.f32 	%f741, %f650, %f645, %p183;
	abs.f32 	%f651, %f734;
	@%p83 bra 	$L__BB0_117;
// %bb.106:
	@%p268 bra 	$L__BB0_113;
	bra.uni 	$L__BB0_107;
$L__BB0_113:
	mov.b32 	%r77, %f738;
	and.b32  	%r435, %r77, 8388607;
	or.b32  	%r3408, %r435, 1065353216;
	mov.b32 	%f737, %r3408;
	add.s32 	%r436, %r77, -1073741824;
	and.b32  	%r3409, %r436, -8388608;
	setp.eq.s32 	%p191, %r3409, 0;
	@%p191 bra 	$L__BB0_116;
// %bb.114:                             // %__nv_fmaf_rn.exit4.i.i.i2579.preheader
	mov.f32 	%f662, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f661,%f662;
	// end inline asm
$L__BB0_115:                            // %__nv_fmaf_rn.exit4.i.i.i2579
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r437, %r3409, 192937984;
	add.s32 	%r438, %r3408, %r437;
	mov.b32 	%f663, %r438;
	mul.f32 	%f664, %f661, %f663;
	sub.f32 	%f665, %f663, %f664;
	fma.rn.f32 	%f666, %f665, %f661, %f664;
	sub.f32 	%f667, %f663, %f666;
	fma.rz.f32 	%f668, %f667, %f661, %f666;
	cvt.rzi.f32.f32 	%f669, %f668;
	sub.f32 	%f737, %f663, %f669;
	sub.s32 	%r3409, %r3409, %r437;
	mov.b32 	%r3408, %f737;
	setp.ne.s32 	%p192, %r3409, 0;
	setp.ne.s32 	%p193, %r3408, 0;
	and.pred  	%p194, %p192, %p193;
	@%p194 bra 	$L__BB0_115;
$L__BB0_116:                            // %__internal_fmodf_slowpath_mod.exit.i.i2581
	setp.gt.u32 	%p195, %r77, 2139095039;
	selp.f32 	%f670, 0f7FFFFFFF, 0f4B800000, %p195;
	mul.f32 	%f671, %f737, 0f34000000;
	mul.f32 	%f738, %f670, %f671;
	bra.uni 	$L__BB0_117;
$L__BB0_107:                            // %__nv_fast_fdividef.exit.i.i.i2558
	div.approx.f32 	%f654, %f738, %f703;
	cvt.rzi.f32.f32 	%f736, %f654;
	fma.rn.f32 	%f131, %f736, 0fC0000000, %f738;
	mov.b32 	%r76, %f131;
	setp.lt.u32 	%p186, %r76, 1073741824;
	@%p186 bra 	$L__BB0_112;
// %bb.108:
	setp.lt.u32 	%p187, %r76, -2147483647;
	@%p187 bra 	$L__BB0_110;
// %bb.109:
	add.f32 	%f659, %f736, 0fBF800000;
	setp.lt.f32 	%p190, %f131, 0fC0000000;
	add.f32 	%f660, %f659, 0fBF800000;
	selp.f32 	%f736, %f660, %f659, %p190;
	bra.uni 	$L__BB0_112;
$L__BB0_110:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p188, %f131, 0f40800000;
	@%p188 bra 	$L__BB0_112;
// %bb.111:                             // %__nv_fmaf_rn.exit.i.i.i2562
	add.f32 	%f655, %f736, 0f3F800000;
	fma.rn.f32 	%f657, %f703, 0fC0400000, %f131;
	setp.ge.f32 	%p189, %f657, 0f00000000;
	add.f32 	%f658, %f655, 0f3F800000;
	selp.f32 	%f736, %f658, %f655, %p189;
$L__BB0_112:                            // %__internal_fmodf_fastpath_quot.exit.i.i2565
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_117:                            // %__internal_fmodf_kernel.exit.i2584
	selp.f32 	%f238, %f237, %f232, %p22;
	selp.f32 	%f286, %f281, %f285, %p40;
	setp.gt.f32 	%p42, %f289, 0f4B800000;
	add.f32 	%f290, %f18, 0f3F800000;
	selp.f32 	%f338, %f333, %f337, %p60;
	setp.gt.f32 	%p62, %f342, 0f4B800000;
	add.f32 	%f343, %f341, 0f3F800000;
	selp.f32 	%f500, %f499, %f494, %p124;
	selp.f32 	%f546, %f541, %f545, %p142;
	setp.gt.f32 	%p144, %f549, 0f4B800000;
	add.f32 	%f550, %f96, 0f3F800000;
	selp.f32 	%f596, %f591, %f595, %p162;
	setp.gt.f32 	%p164, %f600, 0f4B800000;
	add.f32 	%f601, %f599, 0f3F800000;
	selp.f32 	%f648, %f643, %f647, %p182;
	setp.gt.f32 	%p184, %f651, 0f4B800000;
	add.f32 	%f652, %f741, 0f3F800000;
	abs.f32 	%f672, %f738;
	setp.gtu.f32 	%p196, %f672, 0f7F800000;
	@%p196 bra 	$L__BB0_119;
// %bb.118:
	mov.b32 	%r439, %f738;
	or.b32  	%r440, %r46, %r439;
	mov.b32 	%f738, %r440;
$L__BB0_119:                            // %__nv_fmodf.exit2585
	mov.b32 	%r278, %f238;
	mov.b32 	%r281, %f235;
	selp.f32 	%f19, %f290, %f286, %p42;
	selp.f32 	%f344, %f343, %f338, %p62;
	mov.b32 	%r375, %f500;
	mov.b32 	%r378, %f497;
	selp.f32 	%f97, %f550, %f546, %p144;
	selp.f32 	%f602, %f601, %f596, %p164;
	selp.f32 	%f129, %f652, %f648, %p184;
	add.f32 	%f673, %f738, %f738;
	mov.b32 	%r441, %f673;
	and.b32  	%r442, %r441, -2147483648;
	or.b32  	%r443, %r442, 1056964608;
	mov.b32 	%f674, %r443;
	add.f32 	%f675, %f673, %f674;
	cvt.rzi.f32.f32 	%f676, %f675;
	abs.f32 	%f677, %f673;
	setp.gt.f32 	%p198, %f677, 0f4B000000;
	selp.f32 	%f678, %f673, %f676, %p198;
	cvt.rzi.f32.f32 	%f679, %f673;
	setp.lt.f32 	%p199, %f677, 0f3F000000;
	selp.f32 	%f680, %f679, %f678, %p199;
	cvt.rzi.s32.f32 	%r444, %f680;
	fma.rn.f32 	%f681, %f680, 0fBF000000, %f738;
	mul.f32 	%f682, %f681, %f681;
	fma.rn.f32 	%f683, %f682, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f684, %f682, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f685, %f683, %f682, 0fC0A55DF6;
	fma.rn.f32 	%f686, %f684, %f682, 0f4081E0CF;
	fma.rn.f32 	%f687, %f682, %f681, 0f00000000;
	fma.rn.f32 	%f688, %f686, %f682, 0fC09DE9E6;
	fma.rn.f32 	%f689, %f685, %f687, 0f00000000;
	fma.rn.f32 	%f690, %f688, %f682, 0f3F800000;
	fma.rn.f32 	%f691, %f681, 0f40490FDB, %f689;
	and.b32  	%r445, %r444, 1;
	setp.eq.b32 	%p200, %r445, 1;
	selp.f32 	%f692, %f690, %f691, %p200;
	selp.f32 	%f693, %f691, %f690, %p200;
	and.b32  	%r446, %r444, 2;
	setp.eq.s32 	%p201, %r446, 0;
	neg.f32 	%f694, %f692;
	selp.f32 	%f695, %f692, %f694, %p201;
	add.s32 	%r447, %r444, 1;
	and.b32  	%r448, %r447, 2;
	setp.eq.s32 	%p202, %r448, 0;
	sub.f32 	%f697, %f230, %f693;
	selp.f32 	%f698, %f693, %f697, %p202;
	cvt.rzi.f32.f32 	%f699, %f738;
	setp.eq.f32 	%p203, %f699, %f738;
	mul.f32 	%f700, %f738, 0f00000000;
	selp.f32 	%f743, %f700, %f695, %p203;
	abs.f32 	%f701, %f738;
	setp.gt.f32 	%p204, %f701, 0f4B800000;
	add.f32 	%f702, %f743, 0f3F800000;
	selp.f32 	%f146, %f702, %f698, %p204;
	mov.f32 	%f740, %f129;
	mov.f32 	%f742, %f146;
	@%p103 bra 	$L__BB0_121;
// %bb.120:                             // %L692
	neg.f32 	%f742, %f743;
	neg.f32 	%f740, %f741;
	mov.f32 	%f741, %f129;
	mov.f32 	%f743, %f146;
$L__BB0_121:                            // %L694
	xor.b32  	%r277, %r281, -2147483648;
	ld.param.u64 	%rd2, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2];
	mov.b32 	%r316, %f344;
	mov.b32 	%r315, %f19;
	mov.b32 	%r319, %f341;
	mov.b32 	%r318, %f18;
	mov.b32 	%r362, %f720;
	mov.b32 	%r363, %f722;
	mov.b32 	%r365, %f721;
	mov.b32 	%r366, %f723;
	xor.b32  	%r374, %r378, -2147483648;
	mov.b32 	%r409, %f602;
	mov.b32 	%r408, %f97;
	mov.b32 	%r412, %f599;
	mov.b32 	%r411, %f96;
	mov.b32 	%r450, %f740;
	mov.b32 	%r451, %f742;
	mov.b32 	%r453, %f741;
	mov.b32 	%r454, %f743;
	setp.gt.u32 	%p205, %r3, 15;
	mov.u32 	%r181, 999999999;
	@%p205 bra 	$L__BB0_123;
// %bb.122:                             // %L724
	ld.param.u64 	%rd1, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1];
	shl.b32 	%r456, %r3, 4;
	and.b32  	%r457, %r456, 240;
	or.b32  	%r458, %r457, %r1;
	mul.wide.u32 	%rd89, %r458, 4;
	add.s64 	%rd90, %rd1, %rd89;
	ld.global.u32 	%r459, [%rd90];
	cvt.s32.s16 	%r460, %r459;
	shr.s32 	%r461, %r459, 16;
	mul.lo.s32 	%r462, %r461, 546;
	mad.lo.s32 	%r181, %r460, 33, %r462;
$L__BB0_123:                            // %pass372
	ld.param.u64 	%rd3, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3];
	ld.param.u64 	%rd4, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4];
	// begin inline asm
	cvt.rn.f16x2.f32 %r276, %r278, %r277;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r279, %r281, %r278;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r314, %r316, %r315;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r317, %r319, %r318;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r361, %r363, %r362;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r364, %r366, %r365;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r373, %r375, %r374;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r376, %r378, %r375;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r407, %r409, %r408;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r410, %r412, %r411;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r449, %r451, %r450;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r452, %r454, %r453;
	// end inline asm
	shl.b32 	%r464, %r3, 6;
	and.b32  	%r465, %r464, 192;
	shl.b32 	%r466, %r1, 1;
	shr.u32 	%r467, %r3, 3;
	bfe.u32 	%r468, %r3, 3, 1;
	and.b32  	%r469, %r466, 14;
	or.b32  	%r470, %r469, %r468;
	and.b32  	%r471, %r467, 2;
	and.b32  	%r472, %r7, 1;
	or.b32  	%r473, %r471, %r472;
	shl.b32 	%r474, %r473, 4;
	or.b32  	%r475, %r465, %r470;
	or.b32  	%r476, %r475, %r5;
	or.b32  	%r477, %r476, %r474;
	mul.wide.u32 	%rd91, %r477, 4;
	add.s64 	%rd92, %rd2, %rd91;
	ld.global.u32 	%r182, [%rd92];
	ld.global.u32 	%r183, [%rd92+1024];
	shl.b32 	%r478, %r3, 2;
	and.b32  	%r479, %r478, 60;
	shl.b32 	%r480, %r4, 7;
	and.b32  	%r184, %r478, 64;
	or.b32  	%r185, %r479, %r480;
	and.b32  	%r186, %r3, 16;
	shr.u32 	%r481, %r3, 4;
	and.b32  	%r482, %r169, 30;
	or.b32  	%r483, %r482, %r481;
	mul.lo.s32 	%r484, %r483, 257;
	and.b32  	%r485, %r2, 224;
	shr.u32 	%r486, %r1, 3;
	mad.lo.s32 	%r487, %r486, 257, %r485;
	or.b32  	%r488, %r486, 2;
	mad.lo.s32 	%r489, %r488, 257, %r485;
	or.b32  	%r490, %r486, 4;
	mad.lo.s32 	%r491, %r490, 257, %r485;
	or.b32  	%r492, %r486, 6;
	mad.lo.s32 	%r493, %r492, 257, %r485;
	or.b32  	%r494, %r486, 8;
	mad.lo.s32 	%r495, %r494, 257, %r485;
	or.b32  	%r496, %r486, 10;
	mad.lo.s32 	%r497, %r496, 257, %r485;
	or.b32  	%r498, %r486, 12;
	mad.lo.s32 	%r499, %r498, 257, %r485;
	or.b32  	%r500, %r486, 14;
	mad.lo.s32 	%r501, %r500, 257, %r485;
	or.b32  	%r502, %r486, 16;
	mad.lo.s32 	%r503, %r502, 257, %r485;
	or.b32  	%r504, %r486, 18;
	mad.lo.s32 	%r505, %r504, 257, %r485;
	or.b32  	%r506, %r486, 20;
	mad.lo.s32 	%r507, %r506, 257, %r485;
	or.b32  	%r508, %r486, 22;
	mad.lo.s32 	%r509, %r508, 257, %r485;
	or.b32  	%r510, %r486, 24;
	mad.lo.s32 	%r511, %r510, 257, %r485;
	or.b32  	%r512, %r486, 26;
	mad.lo.s32 	%r513, %r512, 257, %r485;
	or.b32  	%r514, %r486, 28;
	mad.lo.s32 	%r515, %r514, 257, %r485;
	or.b32  	%r516, %r486, 30;
	mad.lo.s32 	%r517, %r516, 257, %r485;
	mul.lo.s32 	%r518, %r6, 2184;
	mad.lo.s32 	%r519, %r470, 33, %r518;
	mad.lo.s32 	%r520, %r473, 546, %r519;
	setp.lt.u32 	%p207, %r3, 4;
	setp.eq.s32 	%p208, %r7, 4;
	setp.eq.s32 	%p209, %r7, 5;
	bfe.s32 	%r521, %r3, 2, 1;
	and.b32  	%r522, %r521, 516;
	selp.b32 	%r523, 0, 1032, %p103;
	or.b32  	%r524, %r469, %r481;
	bfe.s32 	%r525, %r3, 3, 1;
	and.b32  	%r526, %r3, 8;
	setp.eq.s32 	%p210, %r526, 0;
	and.b32  	%r527, %r525, 258;
	and.b32  	%r528, %r3, 1;
	neg.s32 	%r529, %r528;
	setp.eq.b32 	%p211, %r528, 1;
	and.b32  	%r530, %r529, 2064;
	or.b32  	%r531, %r522, %r523;
	add.s32 	%r532, %r531, %r524;
	add.s32 	%r533, %r532, %r527;
	add.s32 	%r534, %r533, %r530;
	and.b32  	%r535, %r478, 12;
	bfe.s32 	%r536, %r1, 2, 1;
	and.b32  	%r537, %r1, 4;
	setp.eq.s32 	%p212, %r537, 0;
	and.b32  	%r538, %r536, 516;
	bfe.s32 	%r539, %r1, 1, 1;
	and.b32  	%r540, %r1, 2;
	setp.eq.s32 	%p213, %r540, 0;
	and.b32  	%r541, %r539, 1032;
	and.b32  	%r542, %r525, 4144;
	mul.lo.s32 	%r543, %r486, 258;
	and.b32  	%r544, %r1, 1;
	neg.s32 	%r545, %r544;
	setp.eq.b32 	%p214, %r544, 1;
	and.b32  	%r546, %r545, 2064;
	or.b32  	%r547, %r473, %r535;
	add.s32 	%r548, %r547, %r543;
	add.s32 	%r549, %r548, %r538;
	add.s32 	%r550, %r549, %r541;
	add.s32 	%r551, %r550, %r542;
	add.s32 	%r552, %r551, %r546;
	mul.wide.u32 	%rd93, %r552, 4;
	mov.u64 	%rd94, shmem;
	add.s64 	%rd22, %rd94, %rd93;
	selp.b64 	%rd95, 2064, 0, %p214;
	selp.b64 	%rd96, 0, 4144, %p210;
	selp.b64 	%rd97, 0, 1032, %p213;
	selp.b64 	%rd98, 0, 516, %p212;
	cvt.u64.u32 	%rd99, %r543;
	cvt.u64.u32 	%rd100, %r547;
	add.s64 	%rd101, %rd100, %rd99;
	add.s64 	%rd102, %rd101, %rd98;
	add.s64 	%rd103, %rd102, %rd97;
	add.s64 	%rd104, %rd103, %rd96;
	add.s64 	%rd105, %rd104, %rd95;
	shl.b64 	%rd106, %rd105, 2;
	add.s64 	%rd23, %rd94, %rd106;
	mul.lo.s32 	%r187, %r4, 2560;
	and.b32  	%r553, %r3, 15;
	or.b32  	%r554, %r186, %r2;
	or.b32  	%r188, %r554, %r553;
	add.s32 	%r555, %r1, %r484;
	mul.wide.u32 	%rd107, %r555, 4;
	add.s64 	%rd24, %rd94, %rd107;
	cvt.u64.u32 	%rd108, %r1;
	cvt.u64.u32 	%rd25, %r484;
	add.s64 	%rd109, %rd25, %rd108;
	shl.b64 	%rd110, %rd109, 2;
	add.s64 	%rd26, %rd94, %rd110;
	add.s32 	%r556, %r487, %r3;
	mul.wide.u32 	%rd111, %r556, 4;
	add.s64 	%rd27, %rd94, %rd111;
	add.s32 	%r557, %r489, %r3;
	mul.wide.u32 	%rd112, %r557, 4;
	add.s64 	%rd28, %rd94, %rd112;
	add.s32 	%r558, %r491, %r3;
	mul.wide.u32 	%rd113, %r558, 4;
	add.s64 	%rd29, %rd94, %rd113;
	add.s32 	%r559, %r493, %r3;
	mul.wide.u32 	%rd114, %r559, 4;
	add.s64 	%rd30, %rd94, %rd114;
	add.s32 	%r560, %r495, %r3;
	mul.wide.u32 	%rd115, %r560, 4;
	add.s64 	%rd31, %rd94, %rd115;
	add.s32 	%r561, %r497, %r3;
	mul.wide.u32 	%rd116, %r561, 4;
	add.s64 	%rd32, %rd94, %rd116;
	add.s32 	%r562, %r499, %r3;
	mul.wide.u32 	%rd117, %r562, 4;
	add.s64 	%rd33, %rd94, %rd117;
	add.s32 	%r563, %r501, %r3;
	mul.wide.u32 	%rd118, %r563, 4;
	add.s64 	%rd34, %rd94, %rd118;
	add.s32 	%r564, %r503, %r3;
	mul.wide.u32 	%rd119, %r564, 4;
	add.s64 	%rd35, %rd94, %rd119;
	add.s32 	%r565, %r505, %r3;
	mul.wide.u32 	%rd120, %r565, 4;
	add.s64 	%rd36, %rd94, %rd120;
	add.s32 	%r566, %r507, %r3;
	mul.wide.u32 	%rd121, %r566, 4;
	add.s64 	%rd37, %rd94, %rd121;
	add.s32 	%r567, %r509, %r3;
	mul.wide.u32 	%rd122, %r567, 4;
	add.s64 	%rd38, %rd94, %rd122;
	add.s32 	%r568, %r511, %r3;
	mul.wide.u32 	%rd123, %r568, 4;
	add.s64 	%rd39, %rd94, %rd123;
	add.s32 	%r569, %r513, %r3;
	mul.wide.u32 	%rd124, %r569, 4;
	add.s64 	%rd40, %rd94, %rd124;
	add.s32 	%r570, %r515, %r3;
	mul.wide.u32 	%rd125, %r570, 4;
	add.s64 	%rd41, %rd94, %rd125;
	add.s32 	%r571, %r517, %r3;
	mul.wide.u32 	%rd126, %r571, 4;
	add.s64 	%rd42, %rd94, %rd126;
	add.s32 	%r572, %r520, %r486;
	mul.wide.u32 	%rd127, %r572, 4;
	add.s64 	%rd43, %rd94, %rd127;
	add.s32 	%r573, %r520, %r488;
	mul.wide.u32 	%rd128, %r573, 4;
	add.s64 	%rd44, %rd94, %rd128;
	add.s32 	%r574, %r520, %r490;
	mul.wide.u32 	%rd129, %r574, 4;
	add.s64 	%rd45, %rd94, %rd129;
	add.s32 	%r575, %r520, %r492;
	mul.wide.u32 	%rd130, %r575, 4;
	add.s64 	%rd46, %rd94, %rd130;
	add.s32 	%r576, %r520, %r494;
	mul.wide.u32 	%rd131, %r576, 4;
	add.s64 	%rd47, %rd94, %rd131;
	add.s32 	%r577, %r520, %r496;
	mul.wide.u32 	%rd132, %r577, 4;
	add.s64 	%rd48, %rd94, %rd132;
	add.s32 	%r578, %r520, %r498;
	mul.wide.u32 	%rd133, %r578, 4;
	add.s64 	%rd49, %rd94, %rd133;
	add.s32 	%r579, %r520, %r500;
	mul.wide.u32 	%rd134, %r579, 4;
	add.s64 	%rd50, %rd94, %rd134;
	add.s32 	%r580, %r520, %r502;
	mul.wide.u32 	%rd135, %r580, 4;
	add.s64 	%rd51, %rd94, %rd135;
	add.s32 	%r581, %r520, %r504;
	mul.wide.u32 	%rd136, %r581, 4;
	add.s64 	%rd52, %rd94, %rd136;
	add.s32 	%r582, %r520, %r506;
	mul.wide.u32 	%rd137, %r582, 4;
	add.s64 	%rd53, %rd94, %rd137;
	add.s32 	%r583, %r520, %r508;
	mul.wide.u32 	%rd138, %r583, 4;
	add.s64 	%rd54, %rd94, %rd138;
	add.s32 	%r584, %r520, %r510;
	mul.wide.u32 	%rd139, %r584, 4;
	add.s64 	%rd55, %rd94, %rd139;
	add.s32 	%r585, %r520, %r512;
	mul.wide.u32 	%rd140, %r585, 4;
	add.s64 	%rd56, %rd94, %rd140;
	add.s32 	%r586, %r520, %r514;
	mul.wide.u32 	%rd141, %r586, 4;
	add.s64 	%rd57, %rd94, %rd141;
	add.s32 	%r587, %r520, %r516;
	mul.wide.u32 	%rd142, %r587, 4;
	add.s64 	%rd58, %rd94, %rd142;
	add.s32 	%r588, %r7, -1;
	setp.lt.u32 	%p215, %r588, 3;
	or.pred  	%p216, %p207, %p215;
	or.pred  	%p217, %p216, %p208;
	and.b32  	%r589, %r3, 24;
	setp.eq.s32 	%p218, %r589, 24;
	or.pred  	%p219, %p209, %p218;
	selp.b32 	%r189, 1145324612, -286331154, %p216;
	or.pred  	%p1, %p217, %p219;
	shl.b32 	%r590, %r486, 5;
	add.s32 	%r591, %r534, %r590;
	mul.wide.u32 	%rd143, %r591, 4;
	add.s64 	%rd59, %rd94, %rd143;
	cvt.u64.u32 	%rd144, %r590;
	selp.b64 	%rd145, 2064, 0, %p211;
	selp.b64 	%rd146, 0, 258, %p210;
	cvt.u64.u32 	%rd147, %r524;
	cvt.u64.u32 	%rd148, %r531;
	add.s64 	%rd149, %rd148, %rd147;
	add.s64 	%rd150, %rd149, %rd146;
	add.s64 	%rd151, %rd150, %rd145;
	add.s64 	%rd152, %rd151, %rd144;
	shl.b64 	%rd153, %rd152, 2;
	add.s64 	%rd60, %rd94, %rd153;
	or.b32  	%r592, %r590, 64;
	add.s32 	%r593, %r534, %r592;
	mul.wide.u32 	%rd154, %r593, 4;
	add.s64 	%rd61, %rd94, %rd154;
	cvt.u64.u32 	%rd155, %r592;
	add.s64 	%rd156, %rd151, %rd155;
	shl.b64 	%rd157, %rd156, 2;
	add.s64 	%rd62, %rd94, %rd157;
	or.b32  	%r594, %r590, 128;
	add.s32 	%r595, %r534, %r594;
	mul.wide.u32 	%rd158, %r595, 4;
	add.s64 	%rd63, %rd94, %rd158;
	cvt.u64.u32 	%rd159, %r594;
	add.s64 	%rd160, %rd151, %rd159;
	shl.b64 	%rd161, %rd160, 2;
	add.s64 	%rd64, %rd94, %rd161;
	or.b32  	%r596, %r590, 192;
	add.s32 	%r597, %r534, %r596;
	mul.wide.u32 	%rd162, %r597, 4;
	add.s64 	%rd65, %rd94, %rd162;
	cvt.u64.u32 	%rd163, %r596;
	add.s64 	%rd164, %rd151, %rd163;
	shl.b64 	%rd165, %rd164, 2;
	add.s64 	%rd66, %rd94, %rd165;
	add.s32 	%r598, %r552, 32;
	mul.wide.u32 	%rd166, %r598, 4;
	add.s64 	%rd67, %rd94, %rd166;
	add.s32 	%r599, %r552, 48;
	mul.wide.u32 	%rd167, %r599, 4;
	add.s64 	%rd68, %rd94, %rd167;
	add.s32 	%r600, %r552, 64;
	mul.wide.u32 	%rd168, %r600, 4;
	add.s64 	%rd69, %rd94, %rd168;
	add.s32 	%r601, %r552, 80;
	mul.wide.u32 	%rd169, %r601, 4;
	add.s64 	%rd70, %rd94, %rd169;
	add.s32 	%r602, %r552, 96;
	mul.wide.u32 	%rd170, %r602, 4;
	add.s64 	%rd71, %rd94, %rd170;
	add.s32 	%r603, %r552, 112;
	mul.wide.u32 	%rd171, %r603, 4;
	add.s64 	%rd72, %rd94, %rd171;
	add.s32 	%r604, %r552, 128;
	mul.wide.u32 	%rd172, %r604, 4;
	add.s64 	%rd73, %rd94, %rd172;
	add.s32 	%r605, %r552, 144;
	mul.wide.u32 	%rd173, %r605, 4;
	add.s64 	%rd74, %rd94, %rd173;
	add.s32 	%r606, %r552, 160;
	mul.wide.u32 	%rd174, %r606, 4;
	add.s64 	%rd75, %rd94, %rd174;
	add.s32 	%r607, %r552, 176;
	mul.wide.u32 	%rd175, %r607, 4;
	add.s64 	%rd76, %rd94, %rd175;
	add.s32 	%r608, %r552, 192;
	mul.wide.u32 	%rd176, %r608, 4;
	add.s64 	%rd77, %rd94, %rd176;
	add.s32 	%r609, %r552, 208;
	mul.wide.u32 	%rd177, %r609, 4;
	add.s64 	%rd78, %rd94, %rd177;
	add.s32 	%r610, %r552, 224;
	mul.wide.u32 	%rd178, %r610, 4;
	add.s64 	%rd79, %rd94, %rd178;
	add.s32 	%r611, %r552, 240;
	mul.wide.u32 	%rd179, %r611, 4;
	add.s64 	%rd80, %rd94, %rd179;
	mov.u32 	%r3410, 0;
	setp.eq.s32 	%p220, %r186, 0;
	mov.u16 	%rs38, 25600;
	mov.u16 	%rs40, 21504;
	mov.u16 	%rs44, 18432;
	mov.u32 	%r3415, %r3410;
	mov.u32 	%r3434, %r3410;
	mov.u32 	%r3417, %r3410;
	bra.uni 	$L__BB0_124;
$L__BB0_186:                            // %L38488
                                        //   in Loop: Header=BB0_124 Depth=1
	add.s32 	%r157, %r3410, 64;
	setp.ne.s32 	%p263, %r3410, 64;
	mov.u32 	%r3410, %r157;
	@%p263 bra 	$L__BB0_124;
	bra.uni 	$L__BB0_187;
$L__BB0_124:                            // %L1153
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_125 Depth 2
                                        //     Child Loop BB0_153 Depth 2
	cvt.u32.u64 	%r805, %rd25;
	or.b32  	%r806, %r3410, %r1;
	shl.b32 	%r807, %r806, 17;
	and.b32  	%r808, %r807, 10354688;
	or.b32  	%r809, %r808, %r184;
	or.b32  	%r810, %r185, %r809;
	shl.b32 	%r811, %r810, 2;
	cvt.u64.u32 	%rd180, %r811;
	add.s64 	%rd181, %rd3, %rd180;
	ld.global.v4.u32 	{%r812, %r813, %r814, %r815}, [%rd181];
	or.b32  	%r816, %r806, 16;
	shl.b32 	%r817, %r816, 17;
	and.b32  	%r818, %r817, 12451840;
	or.b32  	%r819, %r818, %r184;
	or.b32  	%r820, %r185, %r819;
	shl.b32 	%r821, %r820, 2;
	cvt.u64.u32 	%rd182, %r821;
	add.s64 	%rd183, %rd3, %rd182;
	ld.global.v4.u32 	{%r822, %r823, %r824, %r825}, [%rd183];
	and.b32  	%r826, %r3410, 64;
	or.b32  	%r827, %r1, %r826;
	shl.b32 	%r828, %r827, 17;
	or.b32  	%r829, %r828, %r184;
	or.b32  	%r830, %r829, %r185;
	shl.b32 	%r831, %r830, 2;
	or.b32  	%r832, %r831, 16777216;
	cvt.u64.u32 	%rd184, %r832;
	add.s64 	%rd185, %rd3, %rd184;
	ld.global.v4.u32 	{%r833, %r834, %r835, %r836}, [%rd185];
	or.b32  	%r837, %r831, 25165824;
	cvt.u64.u32 	%rd186, %r837;
	add.s64 	%rd187, %rd3, %rd186;
	ld.global.v4.u32 	{%r838, %r839, %r840, %r841}, [%rd187];
	selp.b32 	%r842, %r814, %r812, %p220;
	shfl.sync.bfly.b32	%r843, %r842, 16, 31, -1;
	selp.b32 	%r614, %r812, %r843, %p220;
	selp.b32 	%r619, %r843, %r814, %p220;
	selp.b32 	%r844, %r815, %r813, %p220;
	shfl.sync.bfly.b32	%r845, %r844, 16, 31, -1;
	selp.b32 	%r622, %r813, %r845, %p220;
	selp.b32 	%r627, %r845, %r815, %p220;
	selp.b32 	%r846, %r824, %r822, %p220;
	shfl.sync.bfly.b32	%r847, %r846, 16, 31, -1;
	selp.b32 	%r630, %r822, %r847, %p220;
	selp.b32 	%r635, %r847, %r824, %p220;
	selp.b32 	%r848, %r825, %r823, %p220;
	shfl.sync.bfly.b32	%r849, %r848, 16, 31, -1;
	selp.b32 	%r638, %r823, %r849, %p220;
	selp.b32 	%r643, %r849, %r825, %p220;
	selp.b32 	%r850, %r835, %r833, %p220;
	shfl.sync.bfly.b32	%r851, %r850, 16, 31, -1;
	selp.b32 	%r646, %r833, %r851, %p220;
	selp.b32 	%r651, %r851, %r835, %p220;
	selp.b32 	%r852, %r836, %r834, %p220;
	shfl.sync.bfly.b32	%r853, %r852, 16, 31, -1;
	selp.b32 	%r654, %r834, %r853, %p220;
	selp.b32 	%r659, %r853, %r836, %p220;
	selp.b32 	%r854, %r840, %r838, %p220;
	shfl.sync.bfly.b32	%r855, %r854, 16, 31, -1;
	selp.b32 	%r662, %r838, %r855, %p220;
	selp.b32 	%r667, %r855, %r840, %p220;
	selp.b32 	%r856, %r841, %r839, %p220;
	shfl.sync.bfly.b32	%r857, %r856, 16, 31, -1;
	selp.b32 	%r670, %r839, %r857, %p220;
	selp.b32 	%r675, %r857, %r841, %p220;
	shl.b32 	%r615, %r619, 4;
	mov.u32 	%r613, 252645135;
	// begin inline asm
	lop3.b32 %r677, %r613, %r614, %r615, 202;
	// end inline asm
	shr.u32 	%r618, %r614, 4;
	// begin inline asm
	lop3.b32 %r693, %r613, %r618, %r619, 202;
	// end inline asm
	shl.b32 	%r623, %r627, 4;
	// begin inline asm
	lop3.b32 %r685, %r613, %r622, %r623, 202;
	// end inline asm
	shr.u32 	%r626, %r622, 4;
	// begin inline asm
	lop3.b32 %r701, %r613, %r626, %r627, 202;
	// end inline asm
	shl.b32 	%r631, %r635, 4;
	// begin inline asm
	lop3.b32 %r709, %r613, %r630, %r631, 202;
	// end inline asm
	shr.u32 	%r634, %r630, 4;
	// begin inline asm
	lop3.b32 %r725, %r613, %r634, %r635, 202;
	// end inline asm
	shl.b32 	%r639, %r643, 4;
	// begin inline asm
	lop3.b32 %r717, %r613, %r638, %r639, 202;
	// end inline asm
	shr.u32 	%r642, %r638, 4;
	// begin inline asm
	lop3.b32 %r733, %r613, %r642, %r643, 202;
	// end inline asm
	shl.b32 	%r647, %r651, 4;
	// begin inline asm
	lop3.b32 %r678, %r613, %r646, %r647, 202;
	// end inline asm
	shr.u32 	%r650, %r646, 4;
	// begin inline asm
	lop3.b32 %r694, %r613, %r650, %r651, 202;
	// end inline asm
	shl.b32 	%r655, %r659, 4;
	// begin inline asm
	lop3.b32 %r686, %r613, %r654, %r655, 202;
	// end inline asm
	shr.u32 	%r658, %r654, 4;
	// begin inline asm
	lop3.b32 %r702, %r613, %r658, %r659, 202;
	// end inline asm
	shl.b32 	%r663, %r667, 4;
	// begin inline asm
	lop3.b32 %r710, %r613, %r662, %r663, 202;
	// end inline asm
	shr.u32 	%r666, %r662, 4;
	// begin inline asm
	lop3.b32 %r726, %r613, %r666, %r667, 202;
	// end inline asm
	shl.b32 	%r671, %r675, 4;
	// begin inline asm
	lop3.b32 %r718, %r613, %r670, %r671, 202;
	// end inline asm
	shr.u32 	%r674, %r670, 4;
	// begin inline asm
	lop3.b32 %r734, %r613, %r674, %r675, 202;
	// end inline asm
	mov.u32 	%r679, 25152;
	// begin inline asm
	prmt.b32 %r741, %r677, %r678, %r679;
	// end inline asm
	mov.u32 	%r683, 29521;
	// begin inline asm
	prmt.b32 %r773, %r677, %r678, %r683;
	// end inline asm
	// begin inline asm
	prmt.b32 %r749, %r685, %r686, %r679;
	// end inline asm
	// begin inline asm
	prmt.b32 %r781, %r685, %r686, %r683;
	// end inline asm
	// begin inline asm
	prmt.b32 %r742, %r693, %r694, %r679;
	// end inline asm
	// begin inline asm
	prmt.b32 %r774, %r693, %r694, %r683;
	// end inline asm
	// begin inline asm
	prmt.b32 %r750, %r701, %r702, %r679;
	// end inline asm
	// begin inline asm
	prmt.b32 %r782, %r701, %r702, %r683;
	// end inline asm
	// begin inline asm
	prmt.b32 %r757, %r709, %r710, %r679;
	// end inline asm
	// begin inline asm
	prmt.b32 %r789, %r709, %r710, %r683;
	// end inline asm
	// begin inline asm
	prmt.b32 %r765, %r717, %r718, %r679;
	// end inline asm
	// begin inline asm
	prmt.b32 %r797, %r717, %r718, %r683;
	// end inline asm
	// begin inline asm
	prmt.b32 %r758, %r725, %r726, %r679;
	// end inline asm
	// begin inline asm
	prmt.b32 %r790, %r725, %r726, %r683;
	// end inline asm
	// begin inline asm
	prmt.b32 %r766, %r733, %r734, %r679;
	// end inline asm
	// begin inline asm
	prmt.b32 %r798, %r733, %r734, %r683;
	// end inline asm
	mov.u32 	%r799, 21520;
	// begin inline asm
	prmt.b32 %r740, %r741, %r742, %r799;
	// end inline asm
	mov.u32 	%r803, 30258;
	// begin inline asm
	prmt.b32 %r744, %r741, %r742, %r803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r748, %r749, %r750, %r799;
	// end inline asm
	// begin inline asm
	prmt.b32 %r752, %r749, %r750, %r803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r756, %r757, %r758, %r799;
	// end inline asm
	// begin inline asm
	prmt.b32 %r760, %r757, %r758, %r803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r764, %r765, %r766, %r799;
	// end inline asm
	// begin inline asm
	prmt.b32 %r768, %r765, %r766, %r803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r772, %r773, %r774, %r799;
	// end inline asm
	// begin inline asm
	prmt.b32 %r776, %r773, %r774, %r803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r780, %r781, %r782, %r799;
	// end inline asm
	// begin inline asm
	prmt.b32 %r784, %r781, %r782, %r803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r788, %r789, %r790, %r799;
	// end inline asm
	// begin inline asm
	prmt.b32 %r792, %r789, %r790, %r803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r796, %r797, %r798, %r799;
	// end inline asm
	// begin inline asm
	prmt.b32 %r800, %r797, %r798, %r803;
	// end inline asm
	st.shared.u32 	[%rd24], %r740;
	st.shared.u32 	[%rd26+512], %r748;
	st.shared.u32 	[%rd26+256], %r744;
	st.shared.u32 	[%rd26+768], %r752;
	and.b32  	%r858, %r816, 31;
	add.s32 	%r859, %r858, %r805;
	mul.wide.u32 	%rd188, %r859, 4;
	add.s64 	%rd190, %rd94, %rd188;
	st.shared.u32 	[%rd190], %r756;
	cvt.u64.u32 	%rd191, %r858;
	add.s64 	%rd192, %rd25, %rd191;
	shl.b64 	%rd193, %rd192, 2;
	add.s64 	%rd194, %rd94, %rd193;
	st.shared.u32 	[%rd194+512], %r764;
	st.shared.u32 	[%rd194+256], %r760;
	st.shared.u32 	[%rd194+768], %r768;
	st.shared.u32 	[%rd26+128], %r772;
	st.shared.u32 	[%rd26+640], %r780;
	st.shared.u32 	[%rd26+384], %r776;
	st.shared.u32 	[%rd26+896], %r784;
	st.shared.u32 	[%rd194+128], %r788;
	st.shared.u32 	[%rd194+640], %r796;
	st.shared.u32 	[%rd194+384], %r792;
	st.shared.u32 	[%rd194+896], %r800;
	bar.sync 	0;
	ld.shared.u32 	%r860, [%rd27];
	ld.shared.u32 	%r861, [%rd28];
	ld.shared.u32 	%r862, [%rd29];
	ld.shared.u32 	%r863, [%rd30];
	ld.shared.u32 	%r864, [%rd31];
	ld.shared.u32 	%r865, [%rd32];
	ld.shared.u32 	%r866, [%rd33];
	ld.shared.u32 	%r867, [%rd34];
	ld.shared.u32 	%r868, [%rd35];
	ld.shared.u32 	%r869, [%rd36];
	ld.shared.u32 	%r870, [%rd37];
	ld.shared.u32 	%r871, [%rd38];
	ld.shared.u32 	%r872, [%rd39];
	ld.shared.u32 	%r873, [%rd40];
	ld.shared.u32 	%r874, [%rd41];
	ld.shared.u32 	%r875, [%rd42];
	bar.sync 	0;
	shfl.sync.idx.b32	%r876, %r181, 0, 31, -1;
	shfl.sync.idx.b32	%r877, %r181, 1, 31, -1;
	shfl.sync.idx.b32	%r878, %r181, 2, 31, -1;
	shfl.sync.idx.b32	%r879, %r181, 3, 31, -1;
	shfl.sync.idx.b32	%r880, %r181, 4, 31, -1;
	shfl.sync.idx.b32	%r881, %r181, 5, 31, -1;
	shfl.sync.idx.b32	%r882, %r181, 6, 31, -1;
	shfl.sync.idx.b32	%r883, %r181, 7, 31, -1;
	shfl.sync.idx.b32	%r884, %r181, 8, 31, -1;
	shfl.sync.idx.b32	%r885, %r181, 9, 31, -1;
	shfl.sync.idx.b32	%r886, %r181, 10, 31, -1;
	shfl.sync.idx.b32	%r887, %r181, 11, 31, -1;
	shfl.sync.idx.b32	%r888, %r181, 12, 31, -1;
	shfl.sync.idx.b32	%r889, %r181, 13, 31, -1;
	shfl.sync.idx.b32	%r890, %r181, 14, 31, -1;
	shfl.sync.idx.b32	%r891, %r181, 15, 31, -1;
	add.s32 	%r892, %r876, %r3;
	mul.wide.s32 	%rd195, %r892, 4;
	add.s64 	%rd196, %rd94, %rd195;
	st.shared.u32 	[%rd196], %r860;
	add.s32 	%r893, %r877, %r3;
	mul.wide.s32 	%rd197, %r893, 4;
	add.s64 	%rd198, %rd94, %rd197;
	st.shared.u32 	[%rd198], %r861;
	add.s32 	%r894, %r878, %r3;
	mul.wide.s32 	%rd199, %r894, 4;
	add.s64 	%rd200, %rd94, %rd199;
	st.shared.u32 	[%rd200], %r862;
	add.s32 	%r895, %r879, %r3;
	mul.wide.s32 	%rd201, %r895, 4;
	add.s64 	%rd202, %rd94, %rd201;
	st.shared.u32 	[%rd202], %r863;
	add.s32 	%r896, %r880, %r3;
	mul.wide.s32 	%rd203, %r896, 4;
	add.s64 	%rd204, %rd94, %rd203;
	st.shared.u32 	[%rd204], %r864;
	add.s32 	%r897, %r881, %r3;
	mul.wide.s32 	%rd205, %r897, 4;
	add.s64 	%rd206, %rd94, %rd205;
	st.shared.u32 	[%rd206], %r865;
	add.s32 	%r898, %r882, %r3;
	mul.wide.s32 	%rd207, %r898, 4;
	add.s64 	%rd208, %rd94, %rd207;
	st.shared.u32 	[%rd208], %r866;
	add.s32 	%r899, %r883, %r3;
	mul.wide.s32 	%rd209, %r899, 4;
	add.s64 	%rd210, %rd94, %rd209;
	st.shared.u32 	[%rd210], %r867;
	add.s32 	%r900, %r884, %r3;
	mul.wide.s32 	%rd211, %r900, 4;
	add.s64 	%rd212, %rd94, %rd211;
	st.shared.u32 	[%rd212], %r868;
	add.s32 	%r901, %r885, %r3;
	mul.wide.s32 	%rd213, %r901, 4;
	add.s64 	%rd214, %rd94, %rd213;
	st.shared.u32 	[%rd214], %r869;
	add.s32 	%r902, %r886, %r3;
	mul.wide.s32 	%rd215, %r902, 4;
	add.s64 	%rd216, %rd94, %rd215;
	st.shared.u32 	[%rd216], %r870;
	add.s32 	%r903, %r887, %r3;
	mul.wide.s32 	%rd217, %r903, 4;
	add.s64 	%rd218, %rd94, %rd217;
	st.shared.u32 	[%rd218], %r871;
	add.s32 	%r904, %r888, %r3;
	mul.wide.s32 	%rd219, %r904, 4;
	add.s64 	%rd220, %rd94, %rd219;
	st.shared.u32 	[%rd220], %r872;
	add.s32 	%r905, %r889, %r3;
	mul.wide.s32 	%rd221, %r905, 4;
	add.s64 	%rd222, %rd94, %rd221;
	st.shared.u32 	[%rd222], %r873;
	add.s32 	%r906, %r890, %r3;
	mul.wide.s32 	%rd223, %r906, 4;
	add.s64 	%rd224, %rd94, %rd223;
	st.shared.u32 	[%rd224], %r874;
	add.s32 	%r907, %r891, %r3;
	mul.wide.s32 	%rd225, %r907, 4;
	add.s64 	%rd226, %rd94, %rd225;
	st.shared.u32 	[%rd226], %r875;
	bar.sync 	0;
	ld.shared.u32 	%r91, [%rd43];
	ld.shared.u32 	%r92, [%rd44];
	ld.shared.u32 	%r93, [%rd45];
	ld.shared.u32 	%r94, [%rd46];
	ld.shared.u32 	%r95, [%rd47];
	ld.shared.u32 	%r96, [%rd48];
	ld.shared.u32 	%r97, [%rd49];
	ld.shared.u32 	%r98, [%rd50];
	ld.shared.u32 	%r99, [%rd51];
	ld.shared.u32 	%r100, [%rd52];
	ld.shared.u32 	%r101, [%rd53];
	ld.shared.u32 	%r102, [%rd54];
	ld.shared.u32 	%r103, [%rd55];
	ld.shared.u32 	%r104, [%rd56];
	ld.shared.u32 	%r105, [%rd57];
	ld.shared.u32 	%r106, [%rd58];
	bar.sync 	0;
	mov.u32 	%r3414, 16;
	bra.uni 	$L__BB0_125;
$L__BB0_150:                            // %L24347
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s32 	%r3434, %r3434, 1;
	mov.u32 	%r3415, 0;
	mov.u32 	%r3417, %r3415;
$L__BB0_151:                            // %L24348
                                        //   in Loop: Header=BB0_125 Depth=2
	bar.sync 	0;
	add.s32 	%r3414, %r3414, -8;
	setp.ne.s32 	%p241, %r3414, -16;
	@%p241 bra 	$L__BB0_125;
	bra.uni 	$L__BB0_152;
$L__BB0_125:                            // %L10245
                                        //   Parent Loop BB0_124 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p221, %r3414, 16;
	selp.b32 	%r1300, %r91, 0, %p221;
	setp.eq.s32 	%p222, %r3414, 8;
	selp.b32 	%r1301, %r95, %r1300, %p222;
	setp.eq.s32 	%p223, %r3414, 0;
	selp.b32 	%r1302, %r99, %r1301, %p223;
	setp.eq.s32 	%p224, %r3414, -8;
	selp.b32 	%r1303, %r103, %r1302, %p224;
	selp.b32 	%r1304, %r92, 0, %p221;
	selp.b32 	%r1305, %r96, %r1304, %p222;
	selp.b32 	%r1306, %r100, %r1305, %p223;
	selp.b32 	%r1307, %r104, %r1306, %p224;
	selp.b32 	%r1308, %r93, 0, %p221;
	selp.b32 	%r1309, %r97, %r1308, %p222;
	selp.b32 	%r1310, %r101, %r1309, %p223;
	selp.b32 	%r1311, %r105, %r1310, %p224;
	selp.b32 	%r1312, %r94, 0, %p221;
	selp.b32 	%r1313, %r98, %r1312, %p222;
	selp.b32 	%r1314, %r102, %r1313, %p223;
	selp.b32 	%r1315, %r106, %r1314, %p224;
	// begin inline asm
	mov.b32 %r913, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r924, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r912, %r1303, -2004318072;
	mov.u32 	%r1049, 983055;
	// begin inline asm
	lop3.b32 %r910, %r1049, %r912, %r913, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r914, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r915, %r913, %r914;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r918, %r910, %r915;
	// end inline asm
	mov.u32 	%r1060, 15728880;
	// begin inline asm
	lop3.b32 %r921, %r1060, %r912, %r924, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r925, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r926, %r924, %r925;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r929, %r921, %r926;
	// end inline asm
	// begin inline asm
	mov.b32 %r959, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r970, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r958, %r1307, -2004318072;
	// begin inline asm
	lop3.b32 %r956, %r1049, %r958, %r959, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r960, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r961, %r959, %r960;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r964, %r956, %r961;
	// end inline asm
	// begin inline asm
	lop3.b32 %r967, %r1060, %r958, %r970, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r971, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r972, %r970, %r971;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r975, %r967, %r972;
	// end inline asm
	// begin inline asm
	mov.b32 %r1005, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1016, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1004, %r1311, -2004318072;
	// begin inline asm
	lop3.b32 %r1002, %r1049, %r1004, %r1005, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1006, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1007, %r1005, %r1006;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1010, %r1002, %r1007;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1013, %r1060, %r1004, %r1016, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1017, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1018, %r1016, %r1017;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1021, %r1013, %r1018;
	// end inline asm
	// begin inline asm
	mov.b32 %r1051, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1062, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1050, %r1315, -2004318072;
	// begin inline asm
	lop3.b32 %r1048, %r1049, %r1050, %r1051, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1052, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1053, %r1051, %r1052;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1056, %r1048, %r1053;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1059, %r1060, %r1050, %r1062, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1063, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1064, %r1062, %r1063;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1067, %r1059, %r1064;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r182;
    mov.b32 {%r2re, %r2im}, %r918;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1092, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r183;
    mov.b32 {%r2re, %r2im}, %r929;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1095, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r182;
    mov.b32 {%r2re, %r2im}, %r964;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1098, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r183;
    mov.b32 {%r2re, %r2im}, %r975;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1101, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r182;
    mov.b32 {%r2re, %r2im}, %r1010;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1104, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r183;
    mov.b32 {%r2re, %r2im}, %r1021;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1107, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r182;
    mov.b32 {%r2re, %r2im}, %r1056;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1110, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r183;
    mov.b32 {%r2re, %r2im}, %r1067;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1113, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1171, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1116, %r1117}, {%r276, %r279}, {%r1092}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1123, %r1124}, {%r276, %r279}, {%r1095}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1130, %r1131}, {%r276, %r279}, {%r1098}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1137, %r1138}, {%r276, %r279}, {%r1101}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1144, %r1145}, {%r276, %r279}, {%r1104}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1151, %r1152}, {%r276, %r279}, {%r1107}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1158, %r1159}, {%r276, %r279}, {%r1110}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1165, %r1166}, {%r276, %r279}, {%r1113}, {%r1171, %r1171};
	// end inline asm
	@%p1 bra 	$L__BB0_213;
	bra.uni 	$L__BB0_126;
$L__BB0_213:                            // %pass4679
                                        //   in Loop: Header=BB0_125 Depth=2
	// begin inline asm
	neg.f16x2 %r1172, %r317;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1174, %r1172, %r1117;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1177, %r314, %r1116, %r1174;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1181, %r317;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1183, %r1181, %r1124;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1186, %r314, %r1123, %r1183;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1190, %r317;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1192, %r1190, %r1131;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1195, %r314, %r1130, %r1192;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1199, %r317;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1201, %r1199, %r1138;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1204, %r314, %r1137, %r1201;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1208, %r317;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1210, %r1208, %r1145;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1213, %r314, %r1144, %r1210;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1217, %r317;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1219, %r1217, %r1152;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1222, %r314, %r1151, %r1219;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1226, %r317;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1228, %r1226, %r1159;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1231, %r314, %r1158, %r1228;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1235, %r317;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1237, %r1235, %r1166;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1240, %r314, %r1165, %r1237;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1244, %r317, %r1116;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1247, %r314, %r1117, %r1244;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1251, %r317, %r1123;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1254, %r314, %r1124, %r1251;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1258, %r317, %r1130;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1261, %r314, %r1131, %r1258;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1265, %r317, %r1137;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1268, %r314, %r1138, %r1265;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1272, %r317, %r1144;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1275, %r314, %r1145, %r1272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1279, %r317, %r1151;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1282, %r314, %r1152, %r1279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1286, %r317, %r1158;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1289, %r314, %r1159, %r1286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1293, %r317, %r1165;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1296, %r314, %r1166, %r1293;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1389, %r1390}, {%r361, %r364}, {%r1177, %r1247}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1397, %r1398}, {%r361, %r364}, {%r1186, %r1254}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1405, %r1406}, {%r361, %r364}, {%r1195, %r1261}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1413, %r1414}, {%r361, %r364}, {%r1204, %r1268}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1421, %r1422}, {%r361, %r364}, {%r1213, %r1275}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1429, %r1430}, {%r361, %r364}, {%r1222, %r1282}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1437, %r1438}, {%r361, %r364}, {%r1231, %r1289}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1445, %r1446}, {%r361, %r364}, {%r1240, %r1296}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1388, %r1389, %r1390, %r799;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1392, %r1389, %r1390, %r803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1396, %r1397, %r1398, %r799;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1400, %r1397, %r1398, %r803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1404, %r1405, %r1406, %r799;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1408, %r1405, %r1406, %r803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1412, %r1413, %r1414, %r799;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1416, %r1413, %r1414, %r803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1420, %r1421, %r1422, %r799;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1424, %r1421, %r1422, %r803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1428, %r1429, %r1430, %r799;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1432, %r1429, %r1430, %r803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1436, %r1437, %r1438, %r799;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1440, %r1437, %r1438, %r803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1444, %r1445, %r1446, %r799;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1448, %r1445, %r1446, %r803;
	// end inline asm
	st.shared.u32 	[%rd59], %r1388;
	st.shared.u32 	[%rd60+16576], %r1392;
	st.shared.u32 	[%rd60+64], %r1396;
	st.shared.u32 	[%rd60+16640], %r1400;
	st.shared.u32 	[%rd61], %r1404;
	st.shared.u32 	[%rd62+16576], %r1408;
	st.shared.u32 	[%rd62+64], %r1412;
	st.shared.u32 	[%rd62+16640], %r1416;
	st.shared.u32 	[%rd63], %r1420;
	st.shared.u32 	[%rd64+16576], %r1424;
	st.shared.u32 	[%rd64+64], %r1428;
	st.shared.u32 	[%rd64+16640], %r1432;
	st.shared.u32 	[%rd65], %r1436;
	st.shared.u32 	[%rd66+16576], %r1440;
	st.shared.u32 	[%rd66+64], %r1444;
	st.shared.u32 	[%rd66+16640], %r1448;
	bar.sync 	0;
	ld.shared.u32 	%r1456, [%rd22];
	ld.shared.u32 	%r1463, [%rd23+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1473, %r1470}, {%r373, %r376}, {%r1456}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1482, %r1479}, {%r373, %r376}, {%r1463}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1466, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1468, %r1466, %r1470;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1471, %r407, %r1473, %r1468;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1475, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1477, %r1475, %r1479;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1480, %r407, %r1482, %r1477;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1484, %r410, %r1473;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1487, %r407, %r1470, %r1484;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1491, %r410, %r1482;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1494, %r407, %r1479, %r1491;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1517, %r1520}, {%r449, %r452}, {%r1471, %r1487}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1524, %r1528}, {%r449, %r452}, {%r1480, %r1494}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1516, %r1517, %r1517;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1519, %r1520, %r1520, %r1516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1523, %r1524, %r1524, %r1519;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1527, %r1528, %r1528, %r1523;
	// end inline asm
	mov.u32 	%r1532, 488578335;
	// begin inline asm
	fma.rn.f16x2 %r3435, %r1532, %r1527, %r3417;
	// end inline asm
	add.s32 	%r3433, %r3415, 1;
	setp.eq.s32 	%p225, %r3433, 25;
	@%p225 bra 	$L__BB0_127;
	bra.uni 	$L__BB0_214;
$L__BB0_127:                            // %L16294
                                        //   in Loop: Header=BB0_125 Depth=2
	@%p205 bra 	$L__BB0_129;
// %bb.128:                             // %L16354
                                        //   in Loop: Header=BB0_125 Depth=2
	shl.b32 	%r1535, %r3434, 9;
	add.s32 	%r1536, %r1535, %r187;
	or.b32  	%r1537, %r188, %r1536;
	mul.wide.u32 	%rd229, %r1537, 4;
	add.s64 	%rd6, %rd4, %rd229;
	st.global.u32 	[%rd6], %r3435;
$L__BB0_129:                            // %L16493
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s32 	%r3434, %r3434, 1;
	mov.u32 	%r3433, 0;
	mov.u32 	%r3435, %r3433;
$L__BB0_214:                            // %pass7610
                                        //   in Loop: Header=BB0_125 Depth=2
	ld.shared.u32 	%r1543, [%rd67];
	ld.shared.u32 	%r1550, [%rd68];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1560, %r1557}, {%r373, %r376}, {%r1543}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1569, %r1566}, {%r373, %r376}, {%r1550}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1553, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1555, %r1553, %r1557;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1558, %r407, %r1560, %r1555;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1562, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1564, %r1562, %r1566;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1567, %r407, %r1569, %r1564;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1571, %r410, %r1560;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1574, %r407, %r1557, %r1571;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1578, %r410, %r1569;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1581, %r407, %r1566, %r1578;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1604, %r1607}, {%r449, %r452}, {%r1558, %r1574}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1611, %r1615}, {%r449, %r452}, {%r1567, %r1581}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1603, %r1604, %r1604;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1606, %r1607, %r1607, %r1603;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1610, %r1611, %r1611, %r1606;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1614, %r1615, %r1615, %r1610;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3438, %r1532, %r1614, %r3435;
	// end inline asm
	add.s32 	%r3436, %r3433, 1;
	setp.eq.s32 	%p227, %r3436, 25;
	@%p227 bra 	$L__BB0_130;
	bra.uni 	$L__BB0_215;
$L__BB0_130:                            // %L17416
                                        //   in Loop: Header=BB0_125 Depth=2
	@%p205 bra 	$L__BB0_132;
// %bb.131:                             // %L17476
                                        //   in Loop: Header=BB0_125 Depth=2
	shl.b32 	%r1622, %r3434, 9;
	add.s32 	%r1623, %r1622, %r187;
	or.b32  	%r1624, %r188, %r1623;
	mul.wide.u32 	%rd230, %r1624, 4;
	add.s64 	%rd7, %rd4, %rd230;
	st.global.u32 	[%rd7], %r3438;
$L__BB0_132:                            // %L17615
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s32 	%r3434, %r3434, 1;
	mov.u32 	%r3436, 0;
	mov.u32 	%r3438, %r3436;
$L__BB0_215:                            // %pass8093
                                        //   in Loop: Header=BB0_125 Depth=2
	ld.shared.u32 	%r1630, [%rd69];
	ld.shared.u32 	%r1637, [%rd70];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1647, %r1644}, {%r373, %r376}, {%r1630}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1656, %r1653}, {%r373, %r376}, {%r1637}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1640, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1642, %r1640, %r1644;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1645, %r407, %r1647, %r1642;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1649, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1651, %r1649, %r1653;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1654, %r407, %r1656, %r1651;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1658, %r410, %r1647;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1661, %r407, %r1644, %r1658;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1665, %r410, %r1656;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1668, %r407, %r1653, %r1665;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1691, %r1694}, {%r449, %r452}, {%r1645, %r1661}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1698, %r1702}, {%r449, %r452}, {%r1654, %r1668}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1690, %r1691, %r1691;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1693, %r1694, %r1694, %r1690;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1697, %r1698, %r1698, %r1693;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1701, %r1702, %r1702, %r1697;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3441, %r1532, %r1701, %r3438;
	// end inline asm
	add.s32 	%r3439, %r3436, 1;
	setp.eq.s32 	%p229, %r3439, 25;
	@%p229 bra 	$L__BB0_133;
	bra.uni 	$L__BB0_216;
$L__BB0_133:                            // %L18538
                                        //   in Loop: Header=BB0_125 Depth=2
	@%p205 bra 	$L__BB0_135;
// %bb.134:                             // %L18598
                                        //   in Loop: Header=BB0_125 Depth=2
	shl.b32 	%r1709, %r3434, 9;
	add.s32 	%r1710, %r1709, %r187;
	or.b32  	%r1711, %r188, %r1710;
	mul.wide.u32 	%rd231, %r1711, 4;
	add.s64 	%rd8, %rd4, %rd231;
	st.global.u32 	[%rd8], %r3441;
$L__BB0_135:                            // %L18737
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s32 	%r3434, %r3434, 1;
	mov.u32 	%r3439, 0;
	mov.u32 	%r3441, %r3439;
$L__BB0_216:                            // %pass8576
                                        //   in Loop: Header=BB0_125 Depth=2
	ld.shared.u32 	%r1717, [%rd71];
	ld.shared.u32 	%r1724, [%rd72];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1734, %r1731}, {%r373, %r376}, {%r1717}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1743, %r1740}, {%r373, %r376}, {%r1724}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1727, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1729, %r1727, %r1731;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1732, %r407, %r1734, %r1729;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1736, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1738, %r1736, %r1740;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1741, %r407, %r1743, %r1738;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1745, %r410, %r1734;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1748, %r407, %r1731, %r1745;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1752, %r410, %r1743;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1755, %r407, %r1740, %r1752;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1778, %r1781}, {%r449, %r452}, {%r1732, %r1748}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1785, %r1789}, {%r449, %r452}, {%r1741, %r1755}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1777, %r1778, %r1778;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1780, %r1781, %r1781, %r1777;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1784, %r1785, %r1785, %r1780;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1788, %r1789, %r1789, %r1784;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3444, %r1532, %r1788, %r3441;
	// end inline asm
	add.s32 	%r3442, %r3439, 1;
	setp.eq.s32 	%p231, %r3442, 25;
	@%p231 bra 	$L__BB0_136;
	bra.uni 	$L__BB0_217;
$L__BB0_136:                            // %L19660
                                        //   in Loop: Header=BB0_125 Depth=2
	@%p205 bra 	$L__BB0_138;
// %bb.137:                             // %L19720
                                        //   in Loop: Header=BB0_125 Depth=2
	shl.b32 	%r1796, %r3434, 9;
	add.s32 	%r1797, %r1796, %r187;
	or.b32  	%r1798, %r188, %r1797;
	mul.wide.u32 	%rd232, %r1798, 4;
	add.s64 	%rd9, %rd4, %rd232;
	st.global.u32 	[%rd9], %r3444;
$L__BB0_138:                            // %L19859
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s32 	%r3434, %r3434, 1;
	mov.u32 	%r3442, 0;
	mov.u32 	%r3444, %r3442;
$L__BB0_217:                            // %pass9059
                                        //   in Loop: Header=BB0_125 Depth=2
	ld.shared.u32 	%r1804, [%rd73];
	ld.shared.u32 	%r1811, [%rd74];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1821, %r1818}, {%r373, %r376}, {%r1804}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1830, %r1827}, {%r373, %r376}, {%r1811}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1814, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1816, %r1814, %r1818;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1819, %r407, %r1821, %r1816;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1823, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1825, %r1823, %r1827;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1828, %r407, %r1830, %r1825;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1832, %r410, %r1821;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1835, %r407, %r1818, %r1832;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1839, %r410, %r1830;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1842, %r407, %r1827, %r1839;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1865, %r1868}, {%r449, %r452}, {%r1819, %r1835}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1872, %r1876}, {%r449, %r452}, {%r1828, %r1842}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1864, %r1865, %r1865;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1867, %r1868, %r1868, %r1864;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1871, %r1872, %r1872, %r1867;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1875, %r1876, %r1876, %r1871;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3447, %r1532, %r1875, %r3444;
	// end inline asm
	add.s32 	%r3445, %r3442, 1;
	setp.eq.s32 	%p233, %r3445, 25;
	@%p233 bra 	$L__BB0_139;
	bra.uni 	$L__BB0_218;
$L__BB0_139:                            // %L20782
                                        //   in Loop: Header=BB0_125 Depth=2
	@%p205 bra 	$L__BB0_141;
// %bb.140:                             // %L20842
                                        //   in Loop: Header=BB0_125 Depth=2
	shl.b32 	%r1883, %r3434, 9;
	add.s32 	%r1884, %r1883, %r187;
	or.b32  	%r1885, %r188, %r1884;
	mul.wide.u32 	%rd233, %r1885, 4;
	add.s64 	%rd10, %rd4, %rd233;
	st.global.u32 	[%rd10], %r3447;
$L__BB0_141:                            // %L20981
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s32 	%r3434, %r3434, 1;
	mov.u32 	%r3445, 0;
	mov.u32 	%r3447, %r3445;
$L__BB0_218:                            // %pass9542
                                        //   in Loop: Header=BB0_125 Depth=2
	ld.shared.u32 	%r1891, [%rd75];
	ld.shared.u32 	%r1898, [%rd76];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1908, %r1905}, {%r373, %r376}, {%r1891}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1917, %r1914}, {%r373, %r376}, {%r1898}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1901, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1903, %r1901, %r1905;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1906, %r407, %r1908, %r1903;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1910, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1912, %r1910, %r1914;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1915, %r407, %r1917, %r1912;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1919, %r410, %r1908;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1922, %r407, %r1905, %r1919;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1926, %r410, %r1917;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1929, %r407, %r1914, %r1926;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1952, %r1955}, {%r449, %r452}, {%r1906, %r1922}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1959, %r1963}, {%r449, %r452}, {%r1915, %r1929}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1951, %r1952, %r1952;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1954, %r1955, %r1955, %r1951;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1958, %r1959, %r1959, %r1954;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1962, %r1963, %r1963, %r1958;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3450, %r1532, %r1962, %r3447;
	// end inline asm
	add.s32 	%r3448, %r3445, 1;
	setp.eq.s32 	%p235, %r3448, 25;
	@%p235 bra 	$L__BB0_142;
	bra.uni 	$L__BB0_219;
$L__BB0_142:                            // %L21904
                                        //   in Loop: Header=BB0_125 Depth=2
	@%p205 bra 	$L__BB0_144;
// %bb.143:                             // %L21964
                                        //   in Loop: Header=BB0_125 Depth=2
	shl.b32 	%r1970, %r3434, 9;
	add.s32 	%r1971, %r1970, %r187;
	or.b32  	%r1972, %r188, %r1971;
	mul.wide.u32 	%rd234, %r1972, 4;
	add.s64 	%rd11, %rd4, %rd234;
	st.global.u32 	[%rd11], %r3450;
$L__BB0_144:                            // %L22103
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s32 	%r3434, %r3434, 1;
	mov.u32 	%r3448, 0;
	mov.u32 	%r3450, %r3448;
$L__BB0_219:                            // %pass10025
                                        //   in Loop: Header=BB0_125 Depth=2
	ld.shared.u32 	%r1978, [%rd77];
	ld.shared.u32 	%r1985, [%rd78];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1995, %r1992}, {%r373, %r376}, {%r1978}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2004, %r2001}, {%r373, %r376}, {%r1985}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1988, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1990, %r1988, %r1992;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1993, %r407, %r1995, %r1990;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1997, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1999, %r1997, %r2001;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2002, %r407, %r2004, %r1999;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2006, %r410, %r1995;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2009, %r407, %r1992, %r2006;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2013, %r410, %r2004;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2016, %r407, %r2001, %r2013;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2039, %r2042}, {%r449, %r452}, {%r1993, %r2009}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2046, %r2050}, {%r449, %r452}, {%r2002, %r2016}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2038, %r2039, %r2039;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2041, %r2042, %r2042, %r2038;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2045, %r2046, %r2046, %r2041;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2049, %r2050, %r2050, %r2045;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3453, %r1532, %r2049, %r3450;
	// end inline asm
	add.s32 	%r3451, %r3448, 1;
	setp.eq.s32 	%p237, %r3451, 25;
	@%p237 bra 	$L__BB0_145;
	bra.uni 	$L__BB0_220;
$L__BB0_145:                            // %L23026
                                        //   in Loop: Header=BB0_125 Depth=2
	@%p205 bra 	$L__BB0_147;
// %bb.146:                             // %L23086
                                        //   in Loop: Header=BB0_125 Depth=2
	shl.b32 	%r2057, %r3434, 9;
	add.s32 	%r2058, %r2057, %r187;
	or.b32  	%r2059, %r188, %r2058;
	mul.wide.u32 	%rd235, %r2059, 4;
	add.s64 	%rd12, %rd4, %rd235;
	st.global.u32 	[%rd12], %r3453;
$L__BB0_147:                            // %L23225
                                        //   in Loop: Header=BB0_125 Depth=2
	add.s32 	%r3434, %r3434, 1;
	mov.u32 	%r3451, 0;
	mov.u32 	%r3453, %r3451;
$L__BB0_220:                            // %pass10508
                                        //   in Loop: Header=BB0_125 Depth=2
	ld.shared.u32 	%r2065, [%rd79];
	ld.shared.u32 	%r2072, [%rd80];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2082, %r2079}, {%r373, %r376}, {%r2065}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2091, %r2088}, {%r373, %r376}, {%r2072}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2075, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2077, %r2075, %r2079;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2080, %r407, %r2082, %r2077;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2084, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2086, %r2084, %r2088;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2089, %r407, %r2091, %r2086;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2093, %r410, %r2082;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2096, %r407, %r2079, %r2093;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2100, %r410, %r2091;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2103, %r407, %r2088, %r2100;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2126, %r2129}, {%r449, %r452}, {%r2080, %r2096}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2133, %r2137}, {%r449, %r452}, {%r2089, %r2103}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2125, %r2126, %r2126;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2128, %r2129, %r2129, %r2125;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2132, %r2133, %r2133, %r2128;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2136, %r2137, %r2137, %r2132;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3417, %r1532, %r2136, %r3453;
	// end inline asm
	add.s32 	%r3415, %r3451, 1;
	setp.eq.s32 	%p239, %r3415, 25;
	@%p239 bra 	$L__BB0_148;
	bra.uni 	$L__BB0_151;
$L__BB0_148:                            // %L24148
                                        //   in Loop: Header=BB0_125 Depth=2
	@%p205 bra 	$L__BB0_150;
// %bb.149:                             // %L24208
                                        //   in Loop: Header=BB0_125 Depth=2
	shl.b32 	%r2144, %r3434, 9;
	add.s32 	%r2145, %r2144, %r187;
	or.b32  	%r2146, %r188, %r2145;
	mul.wide.u32 	%rd236, %r2146, 4;
	add.s64 	%rd13, %rd4, %rd236;
	st.global.u32 	[%rd13], %r3417;
	bra.uni 	$L__BB0_150;
$L__BB0_152:                            // %L24369.preheader
                                        //   in Loop: Header=BB0_124 Depth=1
	mov.u32 	%r3421, 16;
	bra.uni 	$L__BB0_153;
$L__BB0_184:                            // %L38471
                                        //   in Loop: Header=BB0_153 Depth=2
	add.s32 	%r3434, %r3434, 1;
	mov.u32 	%r3415, %r1171;
	mov.u32 	%r3417, %r1171;
$L__BB0_185:                            // %L38472
                                        //   in Loop: Header=BB0_153 Depth=2
	bar.sync 	0;
	add.s32 	%r3421, %r3421, -8;
	setp.ne.s32 	%p262, %r3421, -16;
	@%p262 bra 	$L__BB0_153;
	bra.uni 	$L__BB0_186;
$L__BB0_153:                            // %L24369
                                        //   Parent Loop BB0_124 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p242, %r3421, 16;
	selp.b32 	%r2760, %r91, 0, %p242;
	setp.eq.s32 	%p243, %r3421, 8;
	selp.b32 	%r2761, %r95, %r2760, %p243;
	setp.eq.s32 	%p244, %r3421, 0;
	selp.b32 	%r2762, %r99, %r2761, %p244;
	setp.eq.s32 	%p245, %r3421, -8;
	selp.b32 	%r2763, %r103, %r2762, %p245;
	selp.b32 	%r2764, %r92, 0, %p242;
	selp.b32 	%r2765, %r96, %r2764, %p243;
	selp.b32 	%r2766, %r100, %r2765, %p244;
	selp.b32 	%r2767, %r104, %r2766, %p245;
	selp.b32 	%r2768, %r93, 0, %p242;
	selp.b32 	%r2769, %r97, %r2768, %p243;
	selp.b32 	%r2770, %r101, %r2769, %p244;
	selp.b32 	%r2771, %r105, %r2770, %p245;
	selp.b32 	%r2772, %r94, 0, %p242;
	selp.b32 	%r2773, %r98, %r2772, %p243;
	selp.b32 	%r2774, %r102, %r2773, %p244;
	selp.b32 	%r2775, %r106, %r2774, %p245;
	// begin inline asm
	mov.b32 %r2176, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2187, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2776, %r2763, 8;
	xor.b32  	%r2186, %r2776, 8947848;
	// begin inline asm
	lop3.b32 %r2173, %r1049, %r2186, %r2176, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2177, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2178, %r2176, %r2177;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2181, %r2173, %r2178;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2184, %r1060, %r2186, %r2187, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2188, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2189, %r2187, %r2188;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2192, %r2184, %r2189;
	// end inline asm
	// begin inline asm
	mov.b32 %r2222, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2233, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2777, %r2767, 8;
	xor.b32  	%r2232, %r2777, 8947848;
	// begin inline asm
	lop3.b32 %r2219, %r1049, %r2232, %r2222, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2223, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2224, %r2222, %r2223;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2227, %r2219, %r2224;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2230, %r1060, %r2232, %r2233, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2234, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2235, %r2233, %r2234;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2238, %r2230, %r2235;
	// end inline asm
	// begin inline asm
	mov.b32 %r2268, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2279, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2778, %r2771, 8;
	xor.b32  	%r2278, %r2778, 8947848;
	// begin inline asm
	lop3.b32 %r2265, %r1049, %r2278, %r2268, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2269, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2270, %r2268, %r2269;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2273, %r2265, %r2270;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2276, %r1060, %r2278, %r2279, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2280, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2281, %r2279, %r2280;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2284, %r2276, %r2281;
	// end inline asm
	// begin inline asm
	mov.b32 %r2314, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2325, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2779, %r2775, 8;
	xor.b32  	%r2324, %r2779, 8947848;
	// begin inline asm
	lop3.b32 %r2311, %r1049, %r2324, %r2314, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2315, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2316, %r2314, %r2315;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2319, %r2311, %r2316;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2322, %r1060, %r2324, %r2325, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2326, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2327, %r2325, %r2326;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2330, %r2322, %r2327;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r182;
    mov.b32 {%r2re, %r2im}, %r2181;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2333, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r183;
    mov.b32 {%r2re, %r2im}, %r2192;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2336, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r182;
    mov.b32 {%r2re, %r2im}, %r2227;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2339, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r183;
    mov.b32 {%r2re, %r2im}, %r2238;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2342, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r182;
    mov.b32 {%r2re, %r2im}, %r2273;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2345, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r183;
    mov.b32 {%r2re, %r2im}, %r2284;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2348, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r182;
    mov.b32 {%r2re, %r2im}, %r2319;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2351, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r183;
    mov.b32 {%r2re, %r2im}, %r2330;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2354, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2420, %r2417}, {%r276, %r279}, {%r2333}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2429, %r2426}, {%r276, %r279}, {%r2336}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2438, %r2435}, {%r276, %r279}, {%r2339}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2447, %r2444}, {%r276, %r279}, {%r2342}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2456, %r2453}, {%r276, %r279}, {%r2345}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2465, %r2462}, {%r276, %r279}, {%r2348}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2474, %r2471}, {%r276, %r279}, {%r2351}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2483, %r2480}, {%r276, %r279}, {%r2354}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2413, %r317;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2415, %r2413, %r2417;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2418, %r314, %r2420, %r2415;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2422, %r317;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2424, %r2422, %r2426;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2427, %r314, %r2429, %r2424;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2431, %r317;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2433, %r2431, %r2435;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2436, %r314, %r2438, %r2433;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2440, %r317;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2442, %r2440, %r2444;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2445, %r314, %r2447, %r2442;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2449, %r317;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2451, %r2449, %r2453;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2454, %r314, %r2456, %r2451;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2458, %r317;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2460, %r2458, %r2462;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2463, %r314, %r2465, %r2460;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2467, %r317;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2469, %r2467, %r2471;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2472, %r314, %r2474, %r2469;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2476, %r317;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2478, %r2476, %r2480;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2481, %r314, %r2483, %r2478;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2485, %r317, %r2420;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2488, %r314, %r2417, %r2485;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2492, %r317, %r2429;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2495, %r314, %r2426, %r2492;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2499, %r317, %r2438;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2502, %r314, %r2435, %r2499;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2506, %r317, %r2447;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2509, %r314, %r2444, %r2506;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2513, %r317, %r2456;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2516, %r314, %r2453, %r2513;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2520, %r317, %r2465;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2523, %r314, %r2462, %r2520;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2527, %r317, %r2474;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2530, %r314, %r2471, %r2527;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2534, %r317, %r2483;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2537, %r314, %r2480, %r2534;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2614, %r2615}, {%r361, %r364}, {%r2418, %r2488}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2622, %r2623}, {%r361, %r364}, {%r2427, %r2495}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2630, %r2631}, {%r361, %r364}, {%r2436, %r2502}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2638, %r2639}, {%r361, %r364}, {%r2445, %r2509}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2646, %r2647}, {%r361, %r364}, {%r2454, %r2516}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2654, %r2655}, {%r361, %r364}, {%r2463, %r2523}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2662, %r2663}, {%r361, %r364}, {%r2472, %r2530}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2670, %r2671}, {%r361, %r364}, {%r2481, %r2537}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2613, %r2614, %r2615, %r799;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2617, %r2614, %r2615, %r803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2621, %r2622, %r2623, %r799;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2625, %r2622, %r2623, %r803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2629, %r2630, %r2631, %r799;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2633, %r2630, %r2631, %r803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2637, %r2638, %r2639, %r799;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2641, %r2638, %r2639, %r803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2645, %r2646, %r2647, %r799;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2649, %r2646, %r2647, %r803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2653, %r2654, %r2655, %r799;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2657, %r2654, %r2655, %r803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2661, %r2662, %r2663, %r799;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2665, %r2662, %r2663, %r803;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2669, %r2670, %r2671, %r799;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2673, %r2670, %r2671, %r803;
	// end inline asm
	st.shared.u32 	[%rd59], %r2613;
	st.shared.u32 	[%rd60+16576], %r2617;
	st.shared.u32 	[%rd60+64], %r2621;
	st.shared.u32 	[%rd60+16640], %r2625;
	st.shared.u32 	[%rd61], %r2629;
	st.shared.u32 	[%rd62+16576], %r2633;
	st.shared.u32 	[%rd62+64], %r2637;
	st.shared.u32 	[%rd62+16640], %r2641;
	st.shared.u32 	[%rd63], %r2645;
	st.shared.u32 	[%rd64+16576], %r2649;
	st.shared.u32 	[%rd64+64], %r2653;
	st.shared.u32 	[%rd64+16640], %r2657;
	st.shared.u32 	[%rd65], %r2661;
	st.shared.u32 	[%rd66+16576], %r2665;
	st.shared.u32 	[%rd66+64], %r2669;
	st.shared.u32 	[%rd66+16640], %r2673;
	bar.sync 	0;
	ld.shared.u32 	%r2681, [%rd22];
	ld.shared.u32 	%r2688, [%rd23+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2698, %r2695}, {%r373, %r376}, {%r2681}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2707, %r2704}, {%r373, %r376}, {%r2688}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2691, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2693, %r2691, %r2695;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2696, %r407, %r2698, %r2693;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2700, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2702, %r2700, %r2704;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2705, %r407, %r2707, %r2702;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2709, %r410, %r2698;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2712, %r407, %r2695, %r2709;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2716, %r410, %r2707;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2719, %r407, %r2704, %r2716;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2742, %r2745}, {%r449, %r452}, {%r2696, %r2712}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2749, %r2753}, {%r449, %r452}, {%r2705, %r2719}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2741, %r2742, %r2742;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2744, %r2745, %r2745, %r2741;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2748, %r2749, %r2749, %r2744;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2752, %r2753, %r2753, %r2748;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3456, %r1532, %r2752, %r3417;
	// end inline asm
	add.s32 	%r3454, %r3415, 1;
	setp.ne.s32 	%p246, %r3454, 25;
	@%p246 bra 	$L__BB0_157;
// %bb.154:                             // %L30418
                                        //   in Loop: Header=BB0_153 Depth=2
	@%p205 bra 	$L__BB0_156;
// %bb.155:                             // %L30478
                                        //   in Loop: Header=BB0_153 Depth=2
	shl.b32 	%r2780, %r3434, 9;
	add.s32 	%r2781, %r2780, %r187;
	or.b32  	%r2782, %r188, %r2781;
	mul.wide.u32 	%rd237, %r2782, 4;
	add.s64 	%rd14, %rd4, %rd237;
	st.global.u32 	[%rd14], %r3456;
$L__BB0_156:                            // %L30617
                                        //   in Loop: Header=BB0_153 Depth=2
	add.s32 	%r3434, %r3434, 1;
	mov.u32 	%r3454, 0;
	mov.u32 	%r3456, %r3454;
$L__BB0_157:                            // %pass13803
                                        //   in Loop: Header=BB0_153 Depth=2
	ld.shared.u32 	%r2788, [%rd67];
	ld.shared.u32 	%r2795, [%rd68];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2805, %r2802}, {%r373, %r376}, {%r2788}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2814, %r2811}, {%r373, %r376}, {%r2795}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2798, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2800, %r2798, %r2802;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2803, %r407, %r2805, %r2800;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2807, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2809, %r2807, %r2811;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2812, %r407, %r2814, %r2809;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2816, %r410, %r2805;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2819, %r407, %r2802, %r2816;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2823, %r410, %r2814;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2826, %r407, %r2811, %r2823;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2849, %r2852}, {%r449, %r452}, {%r2803, %r2819}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2856, %r2860}, {%r449, %r452}, {%r2812, %r2826}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2848, %r2849, %r2849;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2851, %r2852, %r2852, %r2848;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2855, %r2856, %r2856, %r2851;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2859, %r2860, %r2860, %r2855;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3459, %r1532, %r2859, %r3456;
	// end inline asm
	add.s32 	%r3457, %r3454, 1;
	setp.eq.s32 	%p248, %r3457, 25;
	@%p248 bra 	$L__BB0_158;
	bra.uni 	$L__BB0_161;
$L__BB0_158:                            // %L31540
                                        //   in Loop: Header=BB0_153 Depth=2
	@%p205 bra 	$L__BB0_160;
// %bb.159:                             // %L31600
                                        //   in Loop: Header=BB0_153 Depth=2
	shl.b32 	%r2867, %r3434, 9;
	add.s32 	%r2868, %r2867, %r187;
	or.b32  	%r2869, %r188, %r2868;
	mul.wide.u32 	%rd238, %r2869, 4;
	add.s64 	%rd15, %rd4, %rd238;
	st.global.u32 	[%rd15], %r3459;
$L__BB0_160:                            // %L31739
                                        //   in Loop: Header=BB0_153 Depth=2
	add.s32 	%r3434, %r3434, 1;
	mov.u32 	%r3457, 0;
	mov.u32 	%r3459, %r3457;
$L__BB0_161:                            // %pass14286
                                        //   in Loop: Header=BB0_153 Depth=2
	ld.shared.u32 	%r2875, [%rd69];
	ld.shared.u32 	%r2882, [%rd70];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2892, %r2889}, {%r373, %r376}, {%r2875}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2901, %r2898}, {%r373, %r376}, {%r2882}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2885, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2887, %r2885, %r2889;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2890, %r407, %r2892, %r2887;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2894, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2896, %r2894, %r2898;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2899, %r407, %r2901, %r2896;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2903, %r410, %r2892;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2906, %r407, %r2889, %r2903;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2910, %r410, %r2901;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2913, %r407, %r2898, %r2910;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2936, %r2939}, {%r449, %r452}, {%r2890, %r2906}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2943, %r2947}, {%r449, %r452}, {%r2899, %r2913}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2935, %r2936, %r2936;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2938, %r2939, %r2939, %r2935;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2942, %r2943, %r2943, %r2938;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2946, %r2947, %r2947, %r2942;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3462, %r1532, %r2946, %r3459;
	// end inline asm
	add.s32 	%r3460, %r3457, 1;
	setp.eq.s32 	%p250, %r3460, 25;
	@%p250 bra 	$L__BB0_162;
	bra.uni 	$L__BB0_165;
$L__BB0_162:                            // %L32662
                                        //   in Loop: Header=BB0_153 Depth=2
	@%p205 bra 	$L__BB0_164;
// %bb.163:                             // %L32722
                                        //   in Loop: Header=BB0_153 Depth=2
	shl.b32 	%r2954, %r3434, 9;
	add.s32 	%r2955, %r2954, %r187;
	or.b32  	%r2956, %r188, %r2955;
	mul.wide.u32 	%rd239, %r2956, 4;
	add.s64 	%rd16, %rd4, %rd239;
	st.global.u32 	[%rd16], %r3462;
$L__BB0_164:                            // %L32861
                                        //   in Loop: Header=BB0_153 Depth=2
	add.s32 	%r3434, %r3434, 1;
	mov.u32 	%r3460, 0;
	mov.u32 	%r3462, %r3460;
$L__BB0_165:                            // %pass14769
                                        //   in Loop: Header=BB0_153 Depth=2
	ld.shared.u32 	%r2962, [%rd71];
	ld.shared.u32 	%r2969, [%rd72];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2979, %r2976}, {%r373, %r376}, {%r2962}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2988, %r2985}, {%r373, %r376}, {%r2969}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2972, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2974, %r2972, %r2976;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2977, %r407, %r2979, %r2974;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2981, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2983, %r2981, %r2985;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2986, %r407, %r2988, %r2983;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2990, %r410, %r2979;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2993, %r407, %r2976, %r2990;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2997, %r410, %r2988;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3000, %r407, %r2985, %r2997;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3023, %r3026}, {%r449, %r452}, {%r2977, %r2993}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3030, %r3034}, {%r449, %r452}, {%r2986, %r3000}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3022, %r3023, %r3023;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3025, %r3026, %r3026, %r3022;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3029, %r3030, %r3030, %r3025;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3033, %r3034, %r3034, %r3029;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3465, %r1532, %r3033, %r3462;
	// end inline asm
	add.s32 	%r3463, %r3460, 1;
	setp.eq.s32 	%p252, %r3463, 25;
	@%p252 bra 	$L__BB0_166;
	bra.uni 	$L__BB0_169;
$L__BB0_166:                            // %L33784
                                        //   in Loop: Header=BB0_153 Depth=2
	@%p205 bra 	$L__BB0_168;
// %bb.167:                             // %L33844
                                        //   in Loop: Header=BB0_153 Depth=2
	shl.b32 	%r3041, %r3434, 9;
	add.s32 	%r3042, %r3041, %r187;
	or.b32  	%r3043, %r188, %r3042;
	mul.wide.u32 	%rd240, %r3043, 4;
	add.s64 	%rd17, %rd4, %rd240;
	st.global.u32 	[%rd17], %r3465;
$L__BB0_168:                            // %L33983
                                        //   in Loop: Header=BB0_153 Depth=2
	add.s32 	%r3434, %r3434, 1;
	mov.u32 	%r3463, 0;
	mov.u32 	%r3465, %r3463;
$L__BB0_169:                            // %pass15252
                                        //   in Loop: Header=BB0_153 Depth=2
	ld.shared.u32 	%r3049, [%rd73];
	ld.shared.u32 	%r3056, [%rd74];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3066, %r3063}, {%r373, %r376}, {%r3049}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3075, %r3072}, {%r373, %r376}, {%r3056}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3059, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3061, %r3059, %r3063;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3064, %r407, %r3066, %r3061;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3068, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3070, %r3068, %r3072;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3073, %r407, %r3075, %r3070;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3077, %r410, %r3066;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3080, %r407, %r3063, %r3077;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3084, %r410, %r3075;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3087, %r407, %r3072, %r3084;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3110, %r3113}, {%r449, %r452}, {%r3064, %r3080}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3117, %r3121}, {%r449, %r452}, {%r3073, %r3087}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3109, %r3110, %r3110;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3112, %r3113, %r3113, %r3109;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3116, %r3117, %r3117, %r3112;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3120, %r3121, %r3121, %r3116;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3468, %r1532, %r3120, %r3465;
	// end inline asm
	add.s32 	%r3466, %r3463, 1;
	setp.eq.s32 	%p254, %r3466, 25;
	@%p254 bra 	$L__BB0_170;
	bra.uni 	$L__BB0_173;
$L__BB0_170:                            // %L34906
                                        //   in Loop: Header=BB0_153 Depth=2
	@%p205 bra 	$L__BB0_172;
// %bb.171:                             // %L34966
                                        //   in Loop: Header=BB0_153 Depth=2
	shl.b32 	%r3128, %r3434, 9;
	add.s32 	%r3129, %r3128, %r187;
	or.b32  	%r3130, %r188, %r3129;
	mul.wide.u32 	%rd241, %r3130, 4;
	add.s64 	%rd18, %rd4, %rd241;
	st.global.u32 	[%rd18], %r3468;
$L__BB0_172:                            // %L35105
                                        //   in Loop: Header=BB0_153 Depth=2
	add.s32 	%r3434, %r3434, 1;
	mov.u32 	%r3466, 0;
	mov.u32 	%r3468, %r3466;
$L__BB0_173:                            // %pass15735
                                        //   in Loop: Header=BB0_153 Depth=2
	ld.shared.u32 	%r3136, [%rd75];
	ld.shared.u32 	%r3143, [%rd76];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3153, %r3150}, {%r373, %r376}, {%r3136}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3162, %r3159}, {%r373, %r376}, {%r3143}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3146, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3148, %r3146, %r3150;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3151, %r407, %r3153, %r3148;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3155, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3157, %r3155, %r3159;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3160, %r407, %r3162, %r3157;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3164, %r410, %r3153;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3167, %r407, %r3150, %r3164;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3171, %r410, %r3162;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3174, %r407, %r3159, %r3171;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3197, %r3200}, {%r449, %r452}, {%r3151, %r3167}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3204, %r3208}, {%r449, %r452}, {%r3160, %r3174}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3196, %r3197, %r3197;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3199, %r3200, %r3200, %r3196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3203, %r3204, %r3204, %r3199;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3207, %r3208, %r3208, %r3203;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3471, %r1532, %r3207, %r3468;
	// end inline asm
	add.s32 	%r3469, %r3466, 1;
	setp.eq.s32 	%p256, %r3469, 25;
	@%p256 bra 	$L__BB0_174;
	bra.uni 	$L__BB0_177;
$L__BB0_174:                            // %L36028
                                        //   in Loop: Header=BB0_153 Depth=2
	@%p205 bra 	$L__BB0_176;
// %bb.175:                             // %L36088
                                        //   in Loop: Header=BB0_153 Depth=2
	shl.b32 	%r3215, %r3434, 9;
	add.s32 	%r3216, %r3215, %r187;
	or.b32  	%r3217, %r188, %r3216;
	mul.wide.u32 	%rd242, %r3217, 4;
	add.s64 	%rd19, %rd4, %rd242;
	st.global.u32 	[%rd19], %r3471;
$L__BB0_176:                            // %L36227
                                        //   in Loop: Header=BB0_153 Depth=2
	add.s32 	%r3434, %r3434, 1;
	mov.u32 	%r3469, 0;
	mov.u32 	%r3471, %r3469;
$L__BB0_177:                            // %pass16218
                                        //   in Loop: Header=BB0_153 Depth=2
	ld.shared.u32 	%r3223, [%rd77];
	ld.shared.u32 	%r3230, [%rd78];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3240, %r3237}, {%r373, %r376}, {%r3223}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3249, %r3246}, {%r373, %r376}, {%r3230}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3233, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3235, %r3233, %r3237;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3238, %r407, %r3240, %r3235;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3242, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3244, %r3242, %r3246;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3247, %r407, %r3249, %r3244;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3251, %r410, %r3240;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3254, %r407, %r3237, %r3251;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3258, %r410, %r3249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3261, %r407, %r3246, %r3258;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3284, %r3287}, {%r449, %r452}, {%r3238, %r3254}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3291, %r3295}, {%r449, %r452}, {%r3247, %r3261}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3283, %r3284, %r3284;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3286, %r3287, %r3287, %r3283;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3290, %r3291, %r3291, %r3286;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3294, %r3295, %r3295, %r3290;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3474, %r1532, %r3294, %r3471;
	// end inline asm
	add.s32 	%r3472, %r3469, 1;
	setp.eq.s32 	%p258, %r3472, 25;
	@%p258 bra 	$L__BB0_178;
	bra.uni 	$L__BB0_181;
$L__BB0_178:                            // %L37150
                                        //   in Loop: Header=BB0_153 Depth=2
	@%p205 bra 	$L__BB0_180;
// %bb.179:                             // %L37210
                                        //   in Loop: Header=BB0_153 Depth=2
	shl.b32 	%r3302, %r3434, 9;
	add.s32 	%r3303, %r3302, %r187;
	or.b32  	%r3304, %r188, %r3303;
	mul.wide.u32 	%rd243, %r3304, 4;
	add.s64 	%rd20, %rd4, %rd243;
	st.global.u32 	[%rd20], %r3474;
$L__BB0_180:                            // %L37349
                                        //   in Loop: Header=BB0_153 Depth=2
	add.s32 	%r3434, %r3434, 1;
	mov.u32 	%r3472, 0;
	mov.u32 	%r3474, %r3472;
$L__BB0_181:                            // %pass16701
                                        //   in Loop: Header=BB0_153 Depth=2
	ld.shared.u32 	%r3310, [%rd79];
	ld.shared.u32 	%r3317, [%rd80];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3327, %r3324}, {%r373, %r376}, {%r3310}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3336, %r3333}, {%r373, %r376}, {%r3317}, {%r1171, %r1171};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3320, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3322, %r3320, %r3324;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3325, %r407, %r3327, %r3322;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3329, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3331, %r3329, %r3333;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3334, %r407, %r3336, %r3331;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3338, %r410, %r3327;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3341, %r407, %r3324, %r3338;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3345, %r410, %r3336;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3348, %r407, %r3333, %r3345;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3371, %r3374}, {%r449, %r452}, {%r3325, %r3341}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3378, %r3382}, {%r449, %r452}, {%r3334, %r3348}, {%r1171, %r1171}, %r189, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3370, %r3371, %r3371;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3373, %r3374, %r3374, %r3370;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3377, %r3378, %r3378, %r3373;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3381, %r3382, %r3382, %r3377;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3417, %r1532, %r3381, %r3474;
	// end inline asm
	add.s32 	%r3415, %r3472, 1;
	setp.eq.s32 	%p260, %r3415, 25;
	@%p260 bra 	$L__BB0_182;
	bra.uni 	$L__BB0_185;
$L__BB0_182:                            // %L38272
                                        //   in Loop: Header=BB0_153 Depth=2
	@%p205 bra 	$L__BB0_184;
// %bb.183:                             // %L38332
                                        //   in Loop: Header=BB0_153 Depth=2
	shl.b32 	%r3389, %r3434, 9;
	add.s32 	%r3390, %r3389, %r187;
	or.b32  	%r3391, %r188, %r3390;
	mul.wide.u32 	%rd244, %r3391, 4;
	add.s64 	%rd21, %rd4, %rd244;
	st.global.u32 	[%rd21], %r3417;
	bra.uni 	$L__BB0_184;
$L__BB0_187:                            // %L38503
	st.global.u32 	[%rd5], %r1171;
	ret;
$L__BB0_126:                            // %post_box_union
	mov.u64 	%rd227, exception3262;
	cvta.global.u64 	%rd228, %rd227;
	{ // callseq 8, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd228;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 8
	{ // callseq 9, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd81;
	st.param.b32 	[param0+8], %r262;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 9
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd86, exception13274;
	cvta.global.u64 	%rd87, %rd86;
	{ // callseq 6, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd87;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 6
	{ // callseq 7, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd81;
	st.param.b32 	[param0+8], %r262;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 7
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
