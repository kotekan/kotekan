// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE // -- Begin function _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.visible .entry _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE(
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<246>;
	.reg .b16 	%rs<250>;
	.reg .b32 	%r<3676>;
	.reg .f32 	%f<787>;
	.reg .b64 	%rd<244>;

// %bb.0:                               // %conversion
	// begin inline asm
	mov.u32 %r306, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p3, %r306, 76895;
	@%p3 bra 	$L__BB0_161;
	bra.uni 	$L__BB0_1;
$L__BB0_161:                            // %L10
	ld.param.u64 	%rd40, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r4, %ctaid.x;
	or.b32  	%r307, %r2, %r3;
	mad.lo.s32 	%r308, %r4, 768, %r307;
	mul.wide.u32 	%rd46, %r308, 4;
	add.s64 	%rd5, %rd40, %rd46;
	mov.u32 	%r309, 1;
	st.global.u32 	[%rd5], %r309;
	and.b32  	%r5, %r3, 3;
	shr.u32 	%r6, %r3, 2;
	mul.lo.s32 	%r310, %r5, %r6;
	and.b32  	%r311, %r310, 7;
	cvt.rn.f32.s32 	%f201, %r311;
	mov.f32 	%f202, 0f40800000;
	div.approx.f32 	%f1, %f201, %f202;
	abs.f32 	%f785, %f1;
	setp.lt.f32 	%p4, %f785, 0f40000000;
	setp.gtu.f32 	%p245, %f785, 0f4B800000;
	mov.f32 	%f781, %f785;
	@%p4 bra 	$L__BB0_173;
// %bb.162:
	@%p245 bra 	$L__BB0_169;
	bra.uni 	$L__BB0_163;
$L__BB0_169:
	mov.b32 	%r221, %f785;
	and.b32  	%r312, %r221, 8388607;
	or.b32  	%r3671, %r312, 1065353216;
	mov.b32 	%f780, %r3671;
	add.s32 	%r313, %r221, -1073741824;
	and.b32  	%r3672, %r313, -8388608;
	setp.eq.s32 	%p11, %r3672, 0;
	@%p11 bra 	$L__BB0_172;
// %bb.170:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f212, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f211,%f212;
	// end inline asm
$L__BB0_171:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r314, %r3672, 192937984;
	add.s32 	%r315, %r3671, %r314;
	mov.b32 	%f213, %r315;
	mul.f32 	%f214, %f211, %f213;
	sub.f32 	%f215, %f213, %f214;
	fma.rn.f32 	%f216, %f215, %f211, %f214;
	sub.f32 	%f217, %f213, %f216;
	fma.rz.f32 	%f218, %f217, %f211, %f216;
	cvt.rzi.f32.f32 	%f219, %f218;
	sub.f32 	%f780, %f213, %f219;
	sub.s32 	%r3672, %r3672, %r314;
	mov.b32 	%r3671, %f780;
	setp.ne.s32 	%p12, %r3672, 0;
	setp.ne.s32 	%p13, %r3671, 0;
	and.pred  	%p14, %p12, %p13;
	@%p14 bra 	$L__BB0_171;
$L__BB0_172:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p15, %r221, 2139095039;
	selp.f32 	%f220, 0f7FFFFFFF, 0f4B800000, %p15;
	mul.f32 	%f221, %f780, 0f34000000;
	mul.f32 	%f781, %f220, %f221;
	bra.uni 	$L__BB0_173;
$L__BB0_163:                            // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f203, 0f40000000;
	div.approx.f32 	%f204, %f785, %f203;
	cvt.rzi.f32.f32 	%f779, %f204;
	fma.rn.f32 	%f172, %f779, 0fC0000000, %f785;
	mov.b32 	%r220, %f172;
	setp.lt.u32 	%p6, %r220, 1073741824;
	@%p6 bra 	$L__BB0_168;
// %bb.164:
	setp.lt.u32 	%p7, %r220, -2147483647;
	@%p7 bra 	$L__BB0_166;
// %bb.165:
	add.f32 	%f209, %f779, 0fBF800000;
	setp.lt.f32 	%p10, %f172, 0fC0000000;
	add.f32 	%f210, %f209, 0fBF800000;
	selp.f32 	%f779, %f210, %f209, %p10;
	bra.uni 	$L__BB0_168;
$L__BB0_166:
	add.f32 	%f779, %f779, 0f3F800000;
	setp.ltu.f32 	%p8, %f172, 0f40800000;
	@%p8 bra 	$L__BB0_168;
// %bb.167:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f205, %f779, 0f3F800000;
	fma.rn.f32 	%f207, %f203, 0fC0400000, %f172;
	setp.ge.f32 	%p9, %f207, 0f00000000;
	add.f32 	%f208, %f205, 0f3F800000;
	selp.f32 	%f779, %f208, %f205, %p9;
$L__BB0_168:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f781, %f779, 0fC0000000, %f785;
$L__BB0_173:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f222, %f781;
	setp.gtu.f32 	%p16, %f222, 0f7F800000;
	mov.b32 	%r316, %f1;
	and.b32  	%r228, %r316, -2147483648;
	@%p16 bra 	$L__BB0_175;
// %bb.174:
	mov.b32 	%r317, %f781;
	or.b32  	%r318, %r228, %r317;
	mov.b32 	%f781, %r318;
$L__BB0_175:                            // %__nv_fmodf.exit
	add.f32 	%f224, %f781, %f781;
	mov.b32 	%r325, %f224;
	and.b32  	%r326, %r325, -2147483648;
	or.b32  	%r327, %r326, 1056964608;
	mov.b32 	%f225, %r327;
	add.f32 	%f226, %f224, %f225;
	cvt.rzi.f32.f32 	%f227, %f226;
	abs.f32 	%f228, %f224;
	setp.gt.f32 	%p17, %f228, 0f4B000000;
	selp.f32 	%f229, %f224, %f227, %p17;
	cvt.rzi.f32.f32 	%f230, %f224;
	setp.lt.f32 	%p18, %f228, 0f3F000000;
	selp.f32 	%f231, %f230, %f229, %p18;
	fma.rn.f32 	%f232, %f231, 0fBF000000, %f781;
	mul.f32 	%f233, %f232, %f232;
	fma.rn.f32 	%f234, %f233, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f235, %f233, 0f3E684E12, 0fBFAAD2E0;
	mov.f32 	%f223, 0f00000000;
	shl.b32 	%r231, %r3, 1;
	and.b32  	%r232, %r231, 6;
	or.b32  	%r233, %r232, 1;
	setp.eq.s32 	%p24, %r232, 6;
	mov.f32 	%f729, 0f41C00000;
	mul.lo.s32 	%r3570, %r232, %r6;
	mov.f32 	%f735, %f223;
	mov.f32 	%f736, %f223;
	@%p24 bra 	$L__BB0_17;
// %bb.2:                               // %L204
	cvt.u16.u32 	%rs1, %r3570;
	and.b16  	%rs2, %rs1, 255;
	mul.lo.s16 	%rs3, %rs2, 171;
	shr.u16 	%rs4, %rs3, 13;
	mul.lo.s16 	%rs5, %rs4, 48;
	sub.s16 	%rs6, %rs1, %rs5;
	and.b16  	%rs7, %rs6, 255;
	cvt.rn.f32.u16 	%f255, %rs7;
	div.approx.f32 	%f3, %f255, %f729;
	abs.f32 	%f733, %f3;
	setp.lt.f32 	%p25, %f733, 0f40000000;
	@%p25 bra 	$L__BB0_14;
// %bb.3:
	setp.gtu.f32 	%p26, %f733, 0f4B800000;
	@%p26 bra 	$L__BB0_10;
	bra.uni 	$L__BB0_4;
$L__BB0_10:
	mov.b32 	%r8, %f733;
	and.b32  	%r334, %r8, 8388607;
	or.b32  	%r3573, %r334, 1065353216;
	mov.b32 	%f732, %r3573;
	add.s32 	%r335, %r8, -1073741824;
	and.b32  	%r3574, %r335, -8388608;
	setp.eq.s32 	%p32, %r3574, 0;
	@%p32 bra 	$L__BB0_13;
// %bb.11:                              // %__nv_fmaf_rn.exit4.i.i.i991.preheader
	mov.f32 	%f266, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f265,%f266;
	// end inline asm
$L__BB0_12:                             // %__nv_fmaf_rn.exit4.i.i.i991
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r336, %r3574, 192937984;
	add.s32 	%r337, %r3573, %r336;
	mov.b32 	%f267, %r337;
	mul.f32 	%f268, %f265, %f267;
	sub.f32 	%f269, %f267, %f268;
	fma.rn.f32 	%f270, %f269, %f265, %f268;
	sub.f32 	%f271, %f267, %f270;
	fma.rz.f32 	%f272, %f271, %f265, %f270;
	cvt.rzi.f32.f32 	%f273, %f272;
	sub.f32 	%f732, %f267, %f273;
	sub.s32 	%r3574, %r3574, %r336;
	mov.b32 	%r3573, %f732;
	setp.ne.s32 	%p33, %r3574, 0;
	setp.ne.s32 	%p34, %r3573, 0;
	and.pred  	%p35, %p33, %p34;
	@%p35 bra 	$L__BB0_12;
$L__BB0_13:                             // %__internal_fmodf_slowpath_mod.exit.i.i993
	setp.gt.u32 	%p36, %r8, 2139095039;
	selp.f32 	%f274, 0f7FFFFFFF, 0f4B800000, %p36;
	mul.f32 	%f275, %f732, 0f34000000;
	mul.f32 	%f733, %f274, %f275;
	bra.uni 	$L__BB0_14;
$L__BB0_4:                              // %__nv_fast_fdividef.exit.i.i.i970
	mov.f32 	%f257, 0f40000000;
	div.approx.f32 	%f258, %f733, %f257;
	cvt.rzi.f32.f32 	%f731, %f258;
	fma.rn.f32 	%f6, %f731, 0fC0000000, %f733;
	mov.b32 	%r7, %f6;
	setp.lt.u32 	%p27, %r7, 1073741824;
	@%p27 bra 	$L__BB0_9;
// %bb.5:
	setp.lt.u32 	%p28, %r7, -2147483647;
	@%p28 bra 	$L__BB0_7;
// %bb.6:
	add.f32 	%f263, %f731, 0fBF800000;
	setp.lt.f32 	%p31, %f6, 0fC0000000;
	add.f32 	%f264, %f263, 0fBF800000;
	selp.f32 	%f731, %f264, %f263, %p31;
	bra.uni 	$L__BB0_9;
$L__BB0_7:
	add.f32 	%f731, %f731, 0f3F800000;
	setp.ltu.f32 	%p29, %f6, 0f40800000;
	@%p29 bra 	$L__BB0_9;
// %bb.8:                               // %__nv_fmaf_rn.exit.i.i.i974
	add.f32 	%f259, %f731, 0f3F800000;
	fma.rn.f32 	%f261, %f257, 0fC0400000, %f6;
	setp.ge.f32 	%p30, %f261, 0f00000000;
	add.f32 	%f262, %f259, 0f3F800000;
	selp.f32 	%f731, %f262, %f259, %p30;
$L__BB0_9:                              // %__internal_fmodf_fastpath_quot.exit.i.i977
	fma.rn.f32 	%f733, %f731, 0fC0000000, %f733;
$L__BB0_14:                             // %__internal_fmodf_kernel.exit.i996
	abs.f32 	%f276, %f733;
	setp.gtu.f32 	%p37, %f276, 0f7F800000;
	@%p37 bra 	$L__BB0_16;
// %bb.15:
	mov.b32 	%r338, %f3;
	and.b32  	%r339, %r338, -2147483648;
	mov.b32 	%r340, %f733;
	or.b32  	%r341, %r339, %r340;
	mov.b32 	%f733, %r341;
$L__BB0_16:                             // %__nv_fmodf.exit997
	add.f32 	%f277, %f733, %f733;
	mov.b32 	%r342, %f277;
	and.b32  	%r343, %r342, -2147483648;
	or.b32  	%r344, %r343, 1056964608;
	mov.b32 	%f278, %r344;
	add.f32 	%f279, %f277, %f278;
	cvt.rzi.f32.f32 	%f280, %f279;
	abs.f32 	%f281, %f277;
	setp.gt.f32 	%p38, %f281, 0f4B000000;
	selp.f32 	%f282, %f277, %f280, %p38;
	cvt.rzi.f32.f32 	%f283, %f277;
	setp.lt.f32 	%p39, %f281, 0f3F000000;
	selp.f32 	%f284, %f283, %f282, %p39;
	cvt.rzi.s32.f32 	%r345, %f284;
	fma.rn.f32 	%f285, %f284, 0fBF000000, %f733;
	mul.f32 	%f286, %f285, %f285;
	fma.rn.f32 	%f287, %f286, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f288, %f286, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f289, %f287, %f286, 0fC0A55DF6;
	fma.rn.f32 	%f290, %f288, %f286, 0f4081E0CF;
	fma.rn.f32 	%f291, %f286, %f285, 0f00000000;
	fma.rn.f32 	%f292, %f290, %f286, 0fC09DE9E6;
	fma.rn.f32 	%f293, %f289, %f291, 0f00000000;
	fma.rn.f32 	%f294, %f292, %f286, 0f3F800000;
	fma.rn.f32 	%f295, %f285, 0f40490FDB, %f293;
	and.b32  	%r346, %r345, 1;
	setp.eq.b32 	%p40, %r346, 1;
	selp.f32 	%f296, %f294, %f295, %p40;
	selp.f32 	%f297, %f295, %f294, %p40;
	and.b32  	%r347, %r345, 2;
	setp.eq.s32 	%p41, %r347, 0;
	neg.f32 	%f298, %f296;
	selp.f32 	%f299, %f296, %f298, %p41;
	add.s32 	%r348, %r345, 1;
	and.b32  	%r349, %r348, 2;
	setp.eq.s32 	%p42, %r349, 0;
	mov.f32 	%f300, 0f00000000;
	sub.f32 	%f301, %f300, %f297;
	selp.f32 	%f302, %f297, %f301, %p42;
	cvt.rzi.f32.f32 	%f303, %f733;
	setp.eq.f32 	%p43, %f303, %f733;
	mul.f32 	%f304, %f733, 0f00000000;
	selp.f32 	%f736, %f304, %f299, %p43;
	abs.f32 	%f305, %f733;
	setp.gt.f32 	%p44, %f305, 0f4B800000;
	add.f32 	%f306, %f736, 0f3F800000;
	selp.f32 	%f735, %f306, %f302, %p44;
$L__BB0_17:                             // %L238
	cvt.rzi.s32.f32 	%r328, %f231;
	fma.rn.f32 	%f236, %f234, %f233, 0fC0A55DF6;
	fma.rn.f32 	%f237, %f235, %f233, 0f4081E0CF;
	fma.rn.f32 	%f238, %f233, %f232, 0f00000000;
	setp.gt.u32 	%p45, %r233, 5;
	mul.lo.s32 	%r3571, %r233, %r6;
	mov.f32 	%f741, %f223;
	mov.f32 	%f742, %f223;
	@%p45 bra 	$L__BB0_33;
// %bb.18:                              // %L242
	mul.hi.u32 	%r351, %r3571, -1431655765;
	shr.u32 	%r352, %r351, 5;
	mul.lo.s32 	%r353, %r352, 48;
	sub.s32 	%r354, %r3571, %r353;
	cvt.rn.f32.s32 	%f308, %r354;
	div.approx.f32 	%f24, %f308, %f729;
	abs.f32 	%f739, %f24;
	setp.lt.f32 	%p46, %f739, 0f40000000;
	@%p46 bra 	$L__BB0_30;
// %bb.19:
	setp.gtu.f32 	%p47, %f739, 0f4B800000;
	@%p47 bra 	$L__BB0_26;
	bra.uni 	$L__BB0_20;
$L__BB0_26:
	mov.b32 	%r16, %f739;
	and.b32  	%r355, %r16, 8388607;
	or.b32  	%r3575, %r355, 1065353216;
	mov.b32 	%f738, %r3575;
	add.s32 	%r356, %r16, -1073741824;
	and.b32  	%r3576, %r356, -8388608;
	setp.eq.s32 	%p53, %r3576, 0;
	@%p53 bra 	$L__BB0_29;
// %bb.27:                              // %__nv_fmaf_rn.exit4.i.i.i1022.preheader
	mov.f32 	%f319, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f318,%f319;
	// end inline asm
$L__BB0_28:                             // %__nv_fmaf_rn.exit4.i.i.i1022
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r357, %r3576, 192937984;
	add.s32 	%r358, %r3575, %r357;
	mov.b32 	%f320, %r358;
	mul.f32 	%f321, %f318, %f320;
	sub.f32 	%f322, %f320, %f321;
	fma.rn.f32 	%f323, %f322, %f318, %f321;
	sub.f32 	%f324, %f320, %f323;
	fma.rz.f32 	%f325, %f324, %f318, %f323;
	cvt.rzi.f32.f32 	%f326, %f325;
	sub.f32 	%f738, %f320, %f326;
	sub.s32 	%r3576, %r3576, %r357;
	mov.b32 	%r3575, %f738;
	setp.ne.s32 	%p54, %r3576, 0;
	setp.ne.s32 	%p55, %r3575, 0;
	and.pred  	%p56, %p54, %p55;
	@%p56 bra 	$L__BB0_28;
$L__BB0_29:                             // %__internal_fmodf_slowpath_mod.exit.i.i1024
	setp.gt.u32 	%p57, %r16, 2139095039;
	selp.f32 	%f327, 0f7FFFFFFF, 0f4B800000, %p57;
	mul.f32 	%f328, %f738, 0f34000000;
	mul.f32 	%f739, %f327, %f328;
	bra.uni 	$L__BB0_30;
$L__BB0_20:                             // %__nv_fast_fdividef.exit.i.i.i1001
	mov.f32 	%f310, 0f40000000;
	div.approx.f32 	%f311, %f739, %f310;
	cvt.rzi.f32.f32 	%f737, %f311;
	fma.rn.f32 	%f27, %f737, 0fC0000000, %f739;
	mov.b32 	%r15, %f27;
	setp.lt.u32 	%p48, %r15, 1073741824;
	@%p48 bra 	$L__BB0_25;
// %bb.21:
	setp.lt.u32 	%p49, %r15, -2147483647;
	@%p49 bra 	$L__BB0_23;
// %bb.22:
	add.f32 	%f316, %f737, 0fBF800000;
	setp.lt.f32 	%p52, %f27, 0fC0000000;
	add.f32 	%f317, %f316, 0fBF800000;
	selp.f32 	%f737, %f317, %f316, %p52;
	bra.uni 	$L__BB0_25;
$L__BB0_23:
	add.f32 	%f737, %f737, 0f3F800000;
	setp.ltu.f32 	%p50, %f27, 0f40800000;
	@%p50 bra 	$L__BB0_25;
// %bb.24:                              // %__nv_fmaf_rn.exit.i.i.i1005
	add.f32 	%f312, %f737, 0f3F800000;
	fma.rn.f32 	%f314, %f310, 0fC0400000, %f27;
	setp.ge.f32 	%p51, %f314, 0f00000000;
	add.f32 	%f315, %f312, 0f3F800000;
	selp.f32 	%f737, %f315, %f312, %p51;
$L__BB0_25:                             // %__internal_fmodf_fastpath_quot.exit.i.i1008
	fma.rn.f32 	%f739, %f737, 0fC0000000, %f739;
$L__BB0_30:                             // %__internal_fmodf_kernel.exit.i1027
	abs.f32 	%f329, %f739;
	setp.gtu.f32 	%p58, %f329, 0f7F800000;
	@%p58 bra 	$L__BB0_32;
// %bb.31:
	mov.b32 	%r359, %f24;
	and.b32  	%r360, %r359, -2147483648;
	mov.b32 	%r361, %f739;
	or.b32  	%r362, %r360, %r361;
	mov.b32 	%f739, %r362;
$L__BB0_32:                             // %__nv_fmodf.exit1028
	add.f32 	%f330, %f739, %f739;
	mov.b32 	%r363, %f330;
	and.b32  	%r364, %r363, -2147483648;
	or.b32  	%r365, %r364, 1056964608;
	mov.b32 	%f331, %r365;
	add.f32 	%f332, %f330, %f331;
	cvt.rzi.f32.f32 	%f333, %f332;
	abs.f32 	%f334, %f330;
	setp.gt.f32 	%p59, %f334, 0f4B000000;
	selp.f32 	%f335, %f330, %f333, %p59;
	cvt.rzi.f32.f32 	%f336, %f330;
	setp.lt.f32 	%p60, %f334, 0f3F000000;
	selp.f32 	%f337, %f336, %f335, %p60;
	cvt.rzi.s32.f32 	%r366, %f337;
	fma.rn.f32 	%f338, %f337, 0fBF000000, %f739;
	mul.f32 	%f339, %f338, %f338;
	fma.rn.f32 	%f340, %f339, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f341, %f339, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f342, %f340, %f339, 0fC0A55DF6;
	fma.rn.f32 	%f343, %f341, %f339, 0f4081E0CF;
	fma.rn.f32 	%f344, %f339, %f338, 0f00000000;
	fma.rn.f32 	%f345, %f343, %f339, 0fC09DE9E6;
	fma.rn.f32 	%f346, %f342, %f344, 0f00000000;
	fma.rn.f32 	%f347, %f345, %f339, 0f3F800000;
	fma.rn.f32 	%f348, %f338, 0f40490FDB, %f346;
	and.b32  	%r367, %r366, 1;
	setp.eq.b32 	%p61, %r367, 1;
	selp.f32 	%f349, %f347, %f348, %p61;
	selp.f32 	%f350, %f348, %f347, %p61;
	and.b32  	%r368, %r366, 2;
	setp.eq.s32 	%p62, %r368, 0;
	neg.f32 	%f351, %f349;
	selp.f32 	%f352, %f349, %f351, %p62;
	add.s32 	%r369, %r366, 1;
	and.b32  	%r370, %r369, 2;
	setp.eq.s32 	%p63, %r370, 0;
	mov.f32 	%f353, 0f00000000;
	sub.f32 	%f354, %f353, %f350;
	selp.f32 	%f355, %f350, %f354, %p63;
	cvt.rzi.f32.f32 	%f356, %f739;
	setp.eq.f32 	%p64, %f356, %f739;
	mul.f32 	%f357, %f739, 0f00000000;
	selp.f32 	%f742, %f357, %f352, %p64;
	abs.f32 	%f358, %f739;
	setp.gt.f32 	%p65, %f358, 0f4B800000;
	add.f32 	%f359, %f742, 0f3F800000;
	selp.f32 	%f741, %f359, %f355, %p65;
$L__BB0_33:                             // %L276
	fma.rn.f32 	%f239, %f237, %f233, 0fC09DE9E6;
	fma.rn.f32 	%f240, %f236, %f238, 0f00000000;
	and.b32  	%r329, %r328, 1;
	setp.gt.u32 	%p67, %r3, 23;
	or.pred  	%p1, %p24, %p67;
	mov.f32 	%f730, 0f40400000;
	mov.f32 	%f747, %f223;
	mov.f32 	%f748, %f223;
	@%p1 bra 	$L__BB0_49;
// %bb.34:                              // %L314
	cvt.u16.u32 	%rs8, %r3570;
	and.b16  	%rs9, %rs8, 255;
	mul.lo.s16 	%rs10, %rs9, 171;
	shr.u16 	%rs11, %rs10, 10;
	mul.lo.s16 	%rs12, %rs11, 6;
	sub.s16 	%rs13, %rs8, %rs12;
	and.b16  	%rs14, %rs13, 255;
	cvt.rn.f32.u16 	%f361, %rs14;
	div.approx.f32 	%f45, %f361, %f730;
	abs.f32 	%f745, %f45;
	setp.lt.f32 	%p68, %f745, 0f40000000;
	@%p68 bra 	$L__BB0_46;
// %bb.35:
	setp.gtu.f32 	%p69, %f745, 0f4B800000;
	@%p69 bra 	$L__BB0_42;
	bra.uni 	$L__BB0_36;
$L__BB0_42:
	mov.b32 	%r26, %f745;
	and.b32  	%r378, %r26, 8388607;
	or.b32  	%r3577, %r378, 1065353216;
	mov.b32 	%f744, %r3577;
	add.s32 	%r379, %r26, -1073741824;
	and.b32  	%r3578, %r379, -8388608;
	setp.eq.s32 	%p75, %r3578, 0;
	@%p75 bra 	$L__BB0_45;
// %bb.43:                              // %__nv_fmaf_rn.exit4.i.i.i1053.preheader
	mov.f32 	%f372, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f371,%f372;
	// end inline asm
$L__BB0_44:                             // %__nv_fmaf_rn.exit4.i.i.i1053
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r380, %r3578, 192937984;
	add.s32 	%r381, %r3577, %r380;
	mov.b32 	%f373, %r381;
	mul.f32 	%f374, %f371, %f373;
	sub.f32 	%f375, %f373, %f374;
	fma.rn.f32 	%f376, %f375, %f371, %f374;
	sub.f32 	%f377, %f373, %f376;
	fma.rz.f32 	%f378, %f377, %f371, %f376;
	cvt.rzi.f32.f32 	%f379, %f378;
	sub.f32 	%f744, %f373, %f379;
	sub.s32 	%r3578, %r3578, %r380;
	mov.b32 	%r3577, %f744;
	setp.ne.s32 	%p76, %r3578, 0;
	setp.ne.s32 	%p77, %r3577, 0;
	and.pred  	%p78, %p76, %p77;
	@%p78 bra 	$L__BB0_44;
$L__BB0_45:                             // %__internal_fmodf_slowpath_mod.exit.i.i1055
	setp.gt.u32 	%p79, %r26, 2139095039;
	selp.f32 	%f380, 0f7FFFFFFF, 0f4B800000, %p79;
	mul.f32 	%f381, %f744, 0f34000000;
	mul.f32 	%f745, %f380, %f381;
	bra.uni 	$L__BB0_46;
$L__BB0_36:                             // %__nv_fast_fdividef.exit.i.i.i1032
	mov.f32 	%f363, 0f40000000;
	div.approx.f32 	%f364, %f745, %f363;
	cvt.rzi.f32.f32 	%f743, %f364;
	fma.rn.f32 	%f48, %f743, 0fC0000000, %f745;
	mov.b32 	%r25, %f48;
	setp.lt.u32 	%p70, %r25, 1073741824;
	@%p70 bra 	$L__BB0_41;
// %bb.37:
	setp.lt.u32 	%p71, %r25, -2147483647;
	@%p71 bra 	$L__BB0_39;
// %bb.38:
	add.f32 	%f369, %f743, 0fBF800000;
	setp.lt.f32 	%p74, %f48, 0fC0000000;
	add.f32 	%f370, %f369, 0fBF800000;
	selp.f32 	%f743, %f370, %f369, %p74;
	bra.uni 	$L__BB0_41;
$L__BB0_39:
	add.f32 	%f743, %f743, 0f3F800000;
	setp.ltu.f32 	%p72, %f48, 0f40800000;
	@%p72 bra 	$L__BB0_41;
// %bb.40:                              // %__nv_fmaf_rn.exit.i.i.i1036
	add.f32 	%f365, %f743, 0f3F800000;
	fma.rn.f32 	%f367, %f363, 0fC0400000, %f48;
	setp.ge.f32 	%p73, %f367, 0f00000000;
	add.f32 	%f368, %f365, 0f3F800000;
	selp.f32 	%f743, %f368, %f365, %p73;
$L__BB0_41:                             // %__internal_fmodf_fastpath_quot.exit.i.i1039
	fma.rn.f32 	%f745, %f743, 0fC0000000, %f745;
$L__BB0_46:                             // %__internal_fmodf_kernel.exit.i1058
	abs.f32 	%f382, %f745;
	setp.gtu.f32 	%p80, %f382, 0f7F800000;
	@%p80 bra 	$L__BB0_48;
// %bb.47:
	mov.b32 	%r382, %f45;
	and.b32  	%r383, %r382, -2147483648;
	mov.b32 	%r384, %f745;
	or.b32  	%r385, %r383, %r384;
	mov.b32 	%f745, %r385;
$L__BB0_48:                             // %__nv_fmodf.exit1059
	add.f32 	%f383, %f745, %f745;
	mov.b32 	%r386, %f383;
	and.b32  	%r387, %r386, -2147483648;
	or.b32  	%r388, %r387, 1056964608;
	mov.b32 	%f384, %r388;
	add.f32 	%f385, %f383, %f384;
	cvt.rzi.f32.f32 	%f386, %f385;
	abs.f32 	%f387, %f383;
	setp.gt.f32 	%p81, %f387, 0f4B000000;
	selp.f32 	%f388, %f383, %f386, %p81;
	cvt.rzi.f32.f32 	%f389, %f383;
	setp.lt.f32 	%p82, %f387, 0f3F000000;
	selp.f32 	%f390, %f389, %f388, %p82;
	cvt.rzi.s32.f32 	%r389, %f390;
	fma.rn.f32 	%f391, %f390, 0fBF000000, %f745;
	mul.f32 	%f392, %f391, %f391;
	fma.rn.f32 	%f393, %f392, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f394, %f392, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f395, %f393, %f392, 0fC0A55DF6;
	fma.rn.f32 	%f396, %f394, %f392, 0f4081E0CF;
	fma.rn.f32 	%f397, %f392, %f391, 0f00000000;
	fma.rn.f32 	%f398, %f396, %f392, 0fC09DE9E6;
	fma.rn.f32 	%f399, %f395, %f397, 0f00000000;
	fma.rn.f32 	%f400, %f398, %f392, 0f3F800000;
	fma.rn.f32 	%f401, %f391, 0f40490FDB, %f399;
	and.b32  	%r390, %r389, 1;
	setp.eq.b32 	%p83, %r390, 1;
	selp.f32 	%f402, %f400, %f401, %p83;
	selp.f32 	%f403, %f401, %f400, %p83;
	and.b32  	%r391, %r389, 2;
	setp.eq.s32 	%p84, %r391, 0;
	neg.f32 	%f404, %f402;
	selp.f32 	%f405, %f402, %f404, %p84;
	add.s32 	%r392, %r389, 1;
	and.b32  	%r393, %r392, 2;
	setp.eq.s32 	%p85, %r393, 0;
	mov.f32 	%f406, 0f00000000;
	sub.f32 	%f407, %f406, %f403;
	selp.f32 	%f408, %f403, %f407, %p85;
	cvt.rzi.f32.f32 	%f409, %f745;
	setp.eq.f32 	%p86, %f409, %f745;
	mul.f32 	%f410, %f745, 0f00000000;
	selp.f32 	%f748, %f410, %f405, %p86;
	abs.f32 	%f411, %f745;
	setp.gt.f32 	%p87, %f411, 0f4B800000;
	add.f32 	%f412, %f748, 0f3F800000;
	selp.f32 	%f747, %f412, %f408, %p87;
$L__BB0_49:                             // %L348
	fma.rn.f32 	%f241, %f239, %f233, 0f3F800000;
	fma.rn.f32 	%f242, %f232, 0f40490FDB, %f240;
	setp.eq.b32 	%p19, %r329, 1;
	or.pred  	%p2, %p45, %p67;
	mov.f32 	%f753, %f223;
	mov.f32 	%f754, %f223;
	@%p2 bra 	$L__BB0_65;
// %bb.50:                              // %L356
	mul.hi.u32 	%r395, %r3571, -1431655765;
	shr.u32 	%r396, %r395, 2;
	mul.lo.s32 	%r397, %r396, 6;
	sub.s32 	%r398, %r3571, %r397;
	cvt.rn.f32.s32 	%f414, %r398;
	div.approx.f32 	%f66, %f414, %f730;
	abs.f32 	%f751, %f66;
	setp.lt.f32 	%p90, %f751, 0f40000000;
	@%p90 bra 	$L__BB0_62;
// %bb.51:
	setp.gtu.f32 	%p91, %f751, 0f4B800000;
	@%p91 bra 	$L__BB0_58;
	bra.uni 	$L__BB0_52;
$L__BB0_58:
	mov.b32 	%r34, %f751;
	and.b32  	%r399, %r34, 8388607;
	or.b32  	%r3579, %r399, 1065353216;
	mov.b32 	%f750, %r3579;
	add.s32 	%r400, %r34, -1073741824;
	and.b32  	%r3580, %r400, -8388608;
	setp.eq.s32 	%p97, %r3580, 0;
	@%p97 bra 	$L__BB0_61;
// %bb.59:                              // %__nv_fmaf_rn.exit4.i.i.i1084.preheader
	mov.f32 	%f425, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f424,%f425;
	// end inline asm
$L__BB0_60:                             // %__nv_fmaf_rn.exit4.i.i.i1084
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r401, %r3580, 192937984;
	add.s32 	%r402, %r3579, %r401;
	mov.b32 	%f426, %r402;
	mul.f32 	%f427, %f424, %f426;
	sub.f32 	%f428, %f426, %f427;
	fma.rn.f32 	%f429, %f428, %f424, %f427;
	sub.f32 	%f430, %f426, %f429;
	fma.rz.f32 	%f431, %f430, %f424, %f429;
	cvt.rzi.f32.f32 	%f432, %f431;
	sub.f32 	%f750, %f426, %f432;
	sub.s32 	%r3580, %r3580, %r401;
	mov.b32 	%r3579, %f750;
	setp.ne.s32 	%p98, %r3580, 0;
	setp.ne.s32 	%p99, %r3579, 0;
	and.pred  	%p100, %p98, %p99;
	@%p100 bra 	$L__BB0_60;
$L__BB0_61:                             // %__internal_fmodf_slowpath_mod.exit.i.i1086
	setp.gt.u32 	%p101, %r34, 2139095039;
	selp.f32 	%f433, 0f7FFFFFFF, 0f4B800000, %p101;
	mul.f32 	%f434, %f750, 0f34000000;
	mul.f32 	%f751, %f433, %f434;
	bra.uni 	$L__BB0_62;
$L__BB0_52:                             // %__nv_fast_fdividef.exit.i.i.i1063
	mov.f32 	%f416, 0f40000000;
	div.approx.f32 	%f417, %f751, %f416;
	cvt.rzi.f32.f32 	%f749, %f417;
	fma.rn.f32 	%f69, %f749, 0fC0000000, %f751;
	mov.b32 	%r33, %f69;
	setp.lt.u32 	%p92, %r33, 1073741824;
	@%p92 bra 	$L__BB0_57;
// %bb.53:
	setp.lt.u32 	%p93, %r33, -2147483647;
	@%p93 bra 	$L__BB0_55;
// %bb.54:
	add.f32 	%f422, %f749, 0fBF800000;
	setp.lt.f32 	%p96, %f69, 0fC0000000;
	add.f32 	%f423, %f422, 0fBF800000;
	selp.f32 	%f749, %f423, %f422, %p96;
	bra.uni 	$L__BB0_57;
$L__BB0_55:
	add.f32 	%f749, %f749, 0f3F800000;
	setp.ltu.f32 	%p94, %f69, 0f40800000;
	@%p94 bra 	$L__BB0_57;
// %bb.56:                              // %__nv_fmaf_rn.exit.i.i.i1067
	add.f32 	%f418, %f749, 0f3F800000;
	fma.rn.f32 	%f420, %f416, 0fC0400000, %f69;
	setp.ge.f32 	%p95, %f420, 0f00000000;
	add.f32 	%f421, %f418, 0f3F800000;
	selp.f32 	%f749, %f421, %f418, %p95;
$L__BB0_57:                             // %__internal_fmodf_fastpath_quot.exit.i.i1070
	fma.rn.f32 	%f751, %f749, 0fC0000000, %f751;
$L__BB0_62:                             // %__internal_fmodf_kernel.exit.i1089
	abs.f32 	%f435, %f751;
	setp.gtu.f32 	%p102, %f435, 0f7F800000;
	@%p102 bra 	$L__BB0_64;
// %bb.63:
	mov.b32 	%r403, %f66;
	and.b32  	%r404, %r403, -2147483648;
	mov.b32 	%r405, %f751;
	or.b32  	%r406, %r404, %r405;
	mov.b32 	%f751, %r406;
$L__BB0_64:                             // %__nv_fmodf.exit1090
	add.f32 	%f436, %f751, %f751;
	mov.b32 	%r407, %f436;
	and.b32  	%r408, %r407, -2147483648;
	or.b32  	%r409, %r408, 1056964608;
	mov.b32 	%f437, %r409;
	add.f32 	%f438, %f436, %f437;
	cvt.rzi.f32.f32 	%f439, %f438;
	abs.f32 	%f440, %f436;
	setp.gt.f32 	%p103, %f440, 0f4B000000;
	selp.f32 	%f441, %f436, %f439, %p103;
	cvt.rzi.f32.f32 	%f442, %f436;
	setp.lt.f32 	%p104, %f440, 0f3F000000;
	selp.f32 	%f443, %f442, %f441, %p104;
	cvt.rzi.s32.f32 	%r410, %f443;
	fma.rn.f32 	%f444, %f443, 0fBF000000, %f751;
	mul.f32 	%f445, %f444, %f444;
	fma.rn.f32 	%f446, %f445, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f447, %f445, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f448, %f446, %f445, 0fC0A55DF6;
	fma.rn.f32 	%f449, %f447, %f445, 0f4081E0CF;
	fma.rn.f32 	%f450, %f445, %f444, 0f00000000;
	fma.rn.f32 	%f451, %f449, %f445, 0fC09DE9E6;
	fma.rn.f32 	%f452, %f448, %f450, 0f00000000;
	fma.rn.f32 	%f453, %f451, %f445, 0f3F800000;
	fma.rn.f32 	%f454, %f444, 0f40490FDB, %f452;
	and.b32  	%r411, %r410, 1;
	setp.eq.b32 	%p105, %r411, 1;
	selp.f32 	%f455, %f453, %f454, %p105;
	selp.f32 	%f456, %f454, %f453, %p105;
	and.b32  	%r412, %r410, 2;
	setp.eq.s32 	%p106, %r412, 0;
	neg.f32 	%f457, %f455;
	selp.f32 	%f458, %f455, %f457, %p106;
	add.s32 	%r413, %r410, 1;
	and.b32  	%r414, %r413, 2;
	setp.eq.s32 	%p107, %r414, 0;
	mov.f32 	%f459, 0f00000000;
	sub.f32 	%f460, %f459, %f456;
	selp.f32 	%f461, %f456, %f460, %p107;
	cvt.rzi.f32.f32 	%f462, %f751;
	setp.eq.f32 	%p108, %f462, %f751;
	mul.f32 	%f463, %f751, 0f00000000;
	selp.f32 	%f754, %f463, %f458, %p108;
	abs.f32 	%f464, %f751;
	setp.gt.f32 	%p109, %f464, 0f4B800000;
	add.f32 	%f465, %f754, 0f3F800000;
	selp.f32 	%f753, %f465, %f461, %p109;
$L__BB0_65:                             // %L390
	selp.f32 	%f243, %f241, %f242, %p19;
	and.b32  	%r330, %r328, 2;
	@%p4 bra 	$L__BB0_183;
// %bb.66:
	@%p245 bra 	$L__BB0_179;
	bra.uni 	$L__BB0_67;
$L__BB0_179:
	mov.b32 	%r235, %f785;
	and.b32  	%r427, %r235, 8388607;
	or.b32  	%r3673, %r427, 1065353216;
	mov.b32 	%f784, %r3673;
	add.s32 	%r428, %r235, -1073741824;
	and.b32  	%r3674, %r428, -8388608;
	setp.eq.s32 	%p117, %r3674, 0;
	@%p117 bra 	$L__BB0_182;
// %bb.180:                             // %__nv_fmaf_rn.exit4.i.i.i1115.preheader
	mov.f32 	%f475, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f474,%f475;
	// end inline asm
$L__BB0_181:                            // %__nv_fmaf_rn.exit4.i.i.i1115
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r429, %r3674, 192937984;
	add.s32 	%r430, %r3673, %r429;
	mov.b32 	%f476, %r430;
	mul.f32 	%f477, %f474, %f476;
	sub.f32 	%f478, %f476, %f477;
	fma.rn.f32 	%f479, %f478, %f474, %f477;
	sub.f32 	%f480, %f476, %f479;
	fma.rz.f32 	%f481, %f480, %f474, %f479;
	cvt.rzi.f32.f32 	%f482, %f481;
	sub.f32 	%f784, %f476, %f482;
	sub.s32 	%r3674, %r3674, %r429;
	mov.b32 	%r3673, %f784;
	setp.ne.s32 	%p118, %r3674, 0;
	setp.ne.s32 	%p119, %r3673, 0;
	and.pred  	%p120, %p118, %p119;
	@%p120 bra 	$L__BB0_181;
$L__BB0_182:                            // %__internal_fmodf_slowpath_mod.exit.i.i1117
	setp.gt.u32 	%p121, %r235, 2139095039;
	selp.f32 	%f483, 0f7FFFFFFF, 0f4B800000, %p121;
	mul.f32 	%f484, %f784, 0f34000000;
	mul.f32 	%f785, %f483, %f484;
	bra.uni 	$L__BB0_183;
$L__BB0_67:                             // %__nv_fast_fdividef.exit.i.i.i1094
	mov.f32 	%f466, 0f40000000;
	div.approx.f32 	%f467, %f785, %f466;
	cvt.rzi.f32.f32 	%f783, %f467;
	fma.rn.f32 	%f187, %f783, 0fC0000000, %f785;
	mov.b32 	%r234, %f187;
	setp.lt.u32 	%p112, %r234, 1073741824;
	@%p112 bra 	$L__BB0_178;
// %bb.68:
	setp.lt.u32 	%p113, %r234, -2147483647;
	@%p113 bra 	$L__BB0_176;
// %bb.69:
	add.f32 	%f472, %f783, 0fBF800000;
	setp.lt.f32 	%p116, %f187, 0fC0000000;
	add.f32 	%f473, %f472, 0fBF800000;
	selp.f32 	%f783, %f473, %f472, %p116;
	bra.uni 	$L__BB0_178;
$L__BB0_176:
	add.f32 	%f783, %f783, 0f3F800000;
	setp.ltu.f32 	%p114, %f187, 0f40800000;
	@%p114 bra 	$L__BB0_178;
// %bb.177:                             // %__nv_fmaf_rn.exit.i.i.i1098
	add.f32 	%f468, %f783, 0f3F800000;
	fma.rn.f32 	%f470, %f466, 0fC0400000, %f187;
	setp.ge.f32 	%p115, %f470, 0f00000000;
	add.f32 	%f471, %f468, 0f3F800000;
	selp.f32 	%f783, %f471, %f468, %p115;
$L__BB0_178:                            // %__internal_fmodf_fastpath_quot.exit.i.i1101
	fma.rn.f32 	%f785, %f783, 0fC0000000, %f785;
$L__BB0_183:                            // %__internal_fmodf_kernel.exit.i1120
	setp.eq.s32 	%p20, %r330, 0;
	neg.f32 	%f245, %f243;
	add.s32 	%r331, %r328, 1;
	cvt.rzi.f32.f32 	%f249, %f781;
	abs.f32 	%f485, %f785;
	setp.gtu.f32 	%p122, %f485, 0f7F800000;
	@%p122 bra 	$L__BB0_185;
// %bb.184:
	mov.b32 	%r431, %f785;
	or.b32  	%r432, %r228, %r431;
	mov.b32 	%f785, %r432;
$L__BB0_185:                            // %__nv_fmodf.exit1121
	selp.f32 	%f244, %f242, %f241, %p19;
	selp.f32 	%f246, %f243, %f245, %p20;
	and.b32  	%r332, %r331, 2;
	setp.eq.f32 	%p22, %f249, %f781;
	mul.f32 	%f250, %f781, 0f00000000;
	add.f32 	%f487, %f785, %f785;
	mov.b32 	%r439, %f487;
	and.b32  	%r440, %r439, -2147483648;
	or.b32  	%r441, %r440, 1056964608;
	mov.b32 	%f488, %r441;
	add.f32 	%f489, %f487, %f488;
	cvt.rzi.f32.f32 	%f490, %f489;
	abs.f32 	%f491, %f487;
	setp.gt.f32 	%p124, %f491, 0f4B000000;
	selp.f32 	%f492, %f487, %f490, %p124;
	cvt.rzi.f32.f32 	%f493, %f487;
	setp.lt.f32 	%p125, %f491, 0f3F000000;
	selp.f32 	%f494, %f493, %f492, %p125;
	cvt.rzi.s32.f32 	%r442, %f494;
	fma.rn.f32 	%f495, %f494, 0fBF000000, %f785;
	mul.f32 	%f496, %f495, %f495;
	fma.rn.f32 	%f497, %f496, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f498, %f496, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f499, %f497, %f496, 0fC0A55DF6;
	fma.rn.f32 	%f500, %f498, %f496, 0f4081E0CF;
	fma.rn.f32 	%f501, %f496, %f495, 0f00000000;
	fma.rn.f32 	%f502, %f500, %f496, 0fC09DE9E6;
	fma.rn.f32 	%f503, %f499, %f501, 0f00000000;
	fma.rn.f32 	%f504, %f502, %f496, 0f3F800000;
	fma.rn.f32 	%f505, %f495, 0f40490FDB, %f503;
	and.b32  	%r443, %r442, 1;
	setp.eq.b32 	%p126, %r443, 1;
	selp.f32 	%f506, %f504, %f505, %p126;
	selp.f32 	%f507, %f505, %f504, %p126;
	and.b32  	%r444, %r442, 2;
	setp.eq.s32 	%p127, %r444, 0;
	neg.f32 	%f508, %f506;
	selp.f32 	%f509, %f506, %f508, %p127;
	add.s32 	%r445, %r442, 1;
	and.b32  	%r446, %r445, 2;
	mov.f32 	%f777, 0f00000000;
	cvt.rzi.f32.f32 	%f512, %f785;
	setp.eq.f32 	%p129, %f512, %f785;
	mul.f32 	%f513, %f785, 0f00000000;
	mov.f32 	%f759, %f777;
	mov.f32 	%f760, %f777;
	@%p24 bra 	$L__BB0_85;
// %bb.70:                              // %L492
	cvt.u16.u32 	%rs15, %r3570;
	and.b16  	%rs16, %rs15, 255;
	mul.lo.s16 	%rs17, %rs16, 171;
	shr.u16 	%rs18, %rs17, 13;
	mul.lo.s16 	%rs19, %rs18, 48;
	sub.s16 	%rs20, %rs15, %rs19;
	and.b16  	%rs21, %rs20, 255;
	cvt.rn.f32.u16 	%f518, %rs21;
	div.approx.f32 	%f87, %f518, %f729;
	abs.f32 	%f757, %f87;
	setp.lt.f32 	%p131, %f757, 0f40000000;
	@%p131 bra 	$L__BB0_82;
// %bb.71:
	setp.gtu.f32 	%p132, %f757, 0f4B800000;
	@%p132 bra 	$L__BB0_78;
	bra.uni 	$L__BB0_72;
$L__BB0_78:
	mov.b32 	%r46, %f757;
	and.b32  	%r448, %r46, 8388607;
	or.b32  	%r3581, %r448, 1065353216;
	mov.b32 	%f756, %r3581;
	add.s32 	%r449, %r46, -1073741824;
	and.b32  	%r3582, %r449, -8388608;
	setp.eq.s32 	%p138, %r3582, 0;
	@%p138 bra 	$L__BB0_81;
// %bb.79:                              // %__nv_fmaf_rn.exit4.i.i.i1146.preheader
	mov.f32 	%f529, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f528,%f529;
	// end inline asm
$L__BB0_80:                             // %__nv_fmaf_rn.exit4.i.i.i1146
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r450, %r3582, 192937984;
	add.s32 	%r451, %r3581, %r450;
	mov.b32 	%f530, %r451;
	mul.f32 	%f531, %f528, %f530;
	sub.f32 	%f532, %f530, %f531;
	fma.rn.f32 	%f533, %f532, %f528, %f531;
	sub.f32 	%f534, %f530, %f533;
	fma.rz.f32 	%f535, %f534, %f528, %f533;
	cvt.rzi.f32.f32 	%f536, %f535;
	sub.f32 	%f756, %f530, %f536;
	sub.s32 	%r3582, %r3582, %r450;
	mov.b32 	%r3581, %f756;
	setp.ne.s32 	%p139, %r3582, 0;
	setp.ne.s32 	%p140, %r3581, 0;
	and.pred  	%p141, %p139, %p140;
	@%p141 bra 	$L__BB0_80;
$L__BB0_81:                             // %__internal_fmodf_slowpath_mod.exit.i.i1148
	setp.gt.u32 	%p142, %r46, 2139095039;
	selp.f32 	%f537, 0f7FFFFFFF, 0f4B800000, %p142;
	mul.f32 	%f538, %f756, 0f34000000;
	mul.f32 	%f757, %f537, %f538;
	bra.uni 	$L__BB0_82;
$L__BB0_72:                             // %__nv_fast_fdividef.exit.i.i.i1125
	mov.f32 	%f520, 0f40000000;
	div.approx.f32 	%f521, %f757, %f520;
	cvt.rzi.f32.f32 	%f755, %f521;
	fma.rn.f32 	%f90, %f755, 0fC0000000, %f757;
	mov.b32 	%r45, %f90;
	setp.lt.u32 	%p133, %r45, 1073741824;
	@%p133 bra 	$L__BB0_77;
// %bb.73:
	setp.lt.u32 	%p134, %r45, -2147483647;
	@%p134 bra 	$L__BB0_75;
// %bb.74:
	add.f32 	%f526, %f755, 0fBF800000;
	setp.lt.f32 	%p137, %f90, 0fC0000000;
	add.f32 	%f527, %f526, 0fBF800000;
	selp.f32 	%f755, %f527, %f526, %p137;
	bra.uni 	$L__BB0_77;
$L__BB0_75:
	add.f32 	%f755, %f755, 0f3F800000;
	setp.ltu.f32 	%p135, %f90, 0f40800000;
	@%p135 bra 	$L__BB0_77;
// %bb.76:                              // %__nv_fmaf_rn.exit.i.i.i1129
	add.f32 	%f522, %f755, 0f3F800000;
	fma.rn.f32 	%f524, %f520, 0fC0400000, %f90;
	setp.ge.f32 	%p136, %f524, 0f00000000;
	add.f32 	%f525, %f522, 0f3F800000;
	selp.f32 	%f755, %f525, %f522, %p136;
$L__BB0_77:                             // %__internal_fmodf_fastpath_quot.exit.i.i1132
	fma.rn.f32 	%f757, %f755, 0fC0000000, %f757;
$L__BB0_82:                             // %__internal_fmodf_kernel.exit.i1151
	abs.f32 	%f539, %f757;
	setp.gtu.f32 	%p143, %f539, 0f7F800000;
	@%p143 bra 	$L__BB0_84;
// %bb.83:
	mov.b32 	%r452, %f87;
	and.b32  	%r453, %r452, -2147483648;
	mov.b32 	%r454, %f757;
	or.b32  	%r455, %r453, %r454;
	mov.b32 	%f757, %r455;
$L__BB0_84:                             // %__nv_fmodf.exit1152
	add.f32 	%f540, %f757, %f757;
	mov.b32 	%r456, %f540;
	and.b32  	%r457, %r456, -2147483648;
	or.b32  	%r458, %r457, 1056964608;
	mov.b32 	%f541, %r458;
	add.f32 	%f542, %f540, %f541;
	cvt.rzi.f32.f32 	%f543, %f542;
	abs.f32 	%f544, %f540;
	setp.gt.f32 	%p144, %f544, 0f4B000000;
	selp.f32 	%f545, %f540, %f543, %p144;
	cvt.rzi.f32.f32 	%f546, %f540;
	setp.lt.f32 	%p145, %f544, 0f3F000000;
	selp.f32 	%f547, %f546, %f545, %p145;
	cvt.rzi.s32.f32 	%r459, %f547;
	fma.rn.f32 	%f548, %f547, 0fBF000000, %f757;
	mul.f32 	%f549, %f548, %f548;
	fma.rn.f32 	%f550, %f549, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f551, %f549, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f552, %f550, %f549, 0fC0A55DF6;
	fma.rn.f32 	%f553, %f551, %f549, 0f4081E0CF;
	fma.rn.f32 	%f554, %f549, %f548, 0f00000000;
	fma.rn.f32 	%f555, %f553, %f549, 0fC09DE9E6;
	fma.rn.f32 	%f556, %f552, %f554, 0f00000000;
	fma.rn.f32 	%f557, %f555, %f549, 0f3F800000;
	fma.rn.f32 	%f558, %f548, 0f40490FDB, %f556;
	and.b32  	%r460, %r459, 1;
	setp.eq.b32 	%p146, %r460, 1;
	selp.f32 	%f559, %f557, %f558, %p146;
	selp.f32 	%f560, %f558, %f557, %p146;
	and.b32  	%r461, %r459, 2;
	setp.eq.s32 	%p147, %r461, 0;
	neg.f32 	%f561, %f559;
	selp.f32 	%f562, %f559, %f561, %p147;
	add.s32 	%r462, %r459, 1;
	and.b32  	%r463, %r462, 2;
	setp.eq.s32 	%p148, %r463, 0;
	mov.f32 	%f563, 0f00000000;
	sub.f32 	%f564, %f563, %f560;
	selp.f32 	%f565, %f560, %f564, %p148;
	cvt.rzi.f32.f32 	%f566, %f757;
	setp.eq.f32 	%p149, %f566, %f757;
	mul.f32 	%f567, %f757, 0f00000000;
	selp.f32 	%f760, %f567, %f562, %p149;
	abs.f32 	%f568, %f757;
	setp.gt.f32 	%p150, %f568, 0f4B800000;
	add.f32 	%f569, %f760, 0f3F800000;
	selp.f32 	%f759, %f569, %f565, %p150;
$L__BB0_85:                             // %L526
	setp.eq.s32 	%p21, %r332, 0;
	sub.f32 	%f247, %f223, %f244;
	selp.f32 	%f251, %f250, %f246, %p22;
	abs.f32 	%f252, %f781;
	setp.eq.s32 	%p128, %r446, 0;
	sub.f32 	%f510, %f777, %f507;
	selp.f32 	%f514, %f513, %f509, %p129;
	abs.f32 	%f515, %f785;
	mov.f32 	%f765, %f777;
	mov.f32 	%f766, %f777;
	@%p45 bra 	$L__BB0_101;
// %bb.86:                              // %L530
	mul.hi.u32 	%r465, %r3571, -1431655765;
	shr.u32 	%r466, %r465, 5;
	mul.lo.s32 	%r467, %r466, 48;
	sub.s32 	%r468, %r3571, %r467;
	cvt.rn.f32.s32 	%f571, %r468;
	div.approx.f32 	%f108, %f571, %f729;
	abs.f32 	%f763, %f108;
	setp.lt.f32 	%p152, %f763, 0f40000000;
	@%p152 bra 	$L__BB0_98;
// %bb.87:
	setp.gtu.f32 	%p153, %f763, 0f4B800000;
	@%p153 bra 	$L__BB0_94;
	bra.uni 	$L__BB0_88;
$L__BB0_94:
	mov.b32 	%r54, %f763;
	and.b32  	%r469, %r54, 8388607;
	or.b32  	%r3583, %r469, 1065353216;
	mov.b32 	%f762, %r3583;
	add.s32 	%r470, %r54, -1073741824;
	and.b32  	%r3584, %r470, -8388608;
	setp.eq.s32 	%p159, %r3584, 0;
	@%p159 bra 	$L__BB0_97;
// %bb.95:                              // %__nv_fmaf_rn.exit4.i.i.i1177.preheader
	mov.f32 	%f582, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f581,%f582;
	// end inline asm
$L__BB0_96:                             // %__nv_fmaf_rn.exit4.i.i.i1177
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r471, %r3584, 192937984;
	add.s32 	%r472, %r3583, %r471;
	mov.b32 	%f583, %r472;
	mul.f32 	%f584, %f581, %f583;
	sub.f32 	%f585, %f583, %f584;
	fma.rn.f32 	%f586, %f585, %f581, %f584;
	sub.f32 	%f587, %f583, %f586;
	fma.rz.f32 	%f588, %f587, %f581, %f586;
	cvt.rzi.f32.f32 	%f589, %f588;
	sub.f32 	%f762, %f583, %f589;
	sub.s32 	%r3584, %r3584, %r471;
	mov.b32 	%r3583, %f762;
	setp.ne.s32 	%p160, %r3584, 0;
	setp.ne.s32 	%p161, %r3583, 0;
	and.pred  	%p162, %p160, %p161;
	@%p162 bra 	$L__BB0_96;
$L__BB0_97:                             // %__internal_fmodf_slowpath_mod.exit.i.i1179
	setp.gt.u32 	%p163, %r54, 2139095039;
	selp.f32 	%f590, 0f7FFFFFFF, 0f4B800000, %p163;
	mul.f32 	%f591, %f762, 0f34000000;
	mul.f32 	%f763, %f590, %f591;
	bra.uni 	$L__BB0_98;
$L__BB0_88:                             // %__nv_fast_fdividef.exit.i.i.i1156
	mov.f32 	%f573, 0f40000000;
	div.approx.f32 	%f574, %f763, %f573;
	cvt.rzi.f32.f32 	%f761, %f574;
	fma.rn.f32 	%f111, %f761, 0fC0000000, %f763;
	mov.b32 	%r53, %f111;
	setp.lt.u32 	%p154, %r53, 1073741824;
	@%p154 bra 	$L__BB0_93;
// %bb.89:
	setp.lt.u32 	%p155, %r53, -2147483647;
	@%p155 bra 	$L__BB0_91;
// %bb.90:
	add.f32 	%f579, %f761, 0fBF800000;
	setp.lt.f32 	%p158, %f111, 0fC0000000;
	add.f32 	%f580, %f579, 0fBF800000;
	selp.f32 	%f761, %f580, %f579, %p158;
	bra.uni 	$L__BB0_93;
$L__BB0_91:
	add.f32 	%f761, %f761, 0f3F800000;
	setp.ltu.f32 	%p156, %f111, 0f40800000;
	@%p156 bra 	$L__BB0_93;
// %bb.92:                              // %__nv_fmaf_rn.exit.i.i.i1160
	add.f32 	%f575, %f761, 0f3F800000;
	fma.rn.f32 	%f577, %f573, 0fC0400000, %f111;
	setp.ge.f32 	%p157, %f577, 0f00000000;
	add.f32 	%f578, %f575, 0f3F800000;
	selp.f32 	%f761, %f578, %f575, %p157;
$L__BB0_93:                             // %__internal_fmodf_fastpath_quot.exit.i.i1163
	fma.rn.f32 	%f763, %f761, 0fC0000000, %f763;
$L__BB0_98:                             // %__internal_fmodf_kernel.exit.i1182
	abs.f32 	%f592, %f763;
	setp.gtu.f32 	%p164, %f592, 0f7F800000;
	@%p164 bra 	$L__BB0_100;
// %bb.99:
	mov.b32 	%r473, %f108;
	and.b32  	%r474, %r473, -2147483648;
	mov.b32 	%r475, %f763;
	or.b32  	%r476, %r474, %r475;
	mov.b32 	%f763, %r476;
$L__BB0_100:                            // %__nv_fmodf.exit1183
	add.f32 	%f593, %f763, %f763;
	mov.b32 	%r477, %f593;
	and.b32  	%r478, %r477, -2147483648;
	or.b32  	%r479, %r478, 1056964608;
	mov.b32 	%f594, %r479;
	add.f32 	%f595, %f593, %f594;
	cvt.rzi.f32.f32 	%f596, %f595;
	abs.f32 	%f597, %f593;
	setp.gt.f32 	%p165, %f597, 0f4B000000;
	selp.f32 	%f598, %f593, %f596, %p165;
	cvt.rzi.f32.f32 	%f599, %f593;
	setp.lt.f32 	%p166, %f597, 0f3F000000;
	selp.f32 	%f600, %f599, %f598, %p166;
	cvt.rzi.s32.f32 	%r480, %f600;
	fma.rn.f32 	%f601, %f600, 0fBF000000, %f763;
	mul.f32 	%f602, %f601, %f601;
	fma.rn.f32 	%f603, %f602, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f604, %f602, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f603, %f602, 0fC0A55DF6;
	fma.rn.f32 	%f606, %f604, %f602, 0f4081E0CF;
	fma.rn.f32 	%f607, %f602, %f601, 0f00000000;
	fma.rn.f32 	%f608, %f606, %f602, 0fC09DE9E6;
	fma.rn.f32 	%f609, %f605, %f607, 0f00000000;
	fma.rn.f32 	%f610, %f608, %f602, 0f3F800000;
	fma.rn.f32 	%f611, %f601, 0f40490FDB, %f609;
	and.b32  	%r481, %r480, 1;
	setp.eq.b32 	%p167, %r481, 1;
	selp.f32 	%f612, %f610, %f611, %p167;
	selp.f32 	%f613, %f611, %f610, %p167;
	and.b32  	%r482, %r480, 2;
	setp.eq.s32 	%p168, %r482, 0;
	neg.f32 	%f614, %f612;
	selp.f32 	%f615, %f612, %f614, %p168;
	add.s32 	%r483, %r480, 1;
	and.b32  	%r484, %r483, 2;
	setp.eq.s32 	%p169, %r484, 0;
	mov.f32 	%f616, 0f00000000;
	sub.f32 	%f617, %f616, %f613;
	selp.f32 	%f618, %f613, %f617, %p169;
	cvt.rzi.f32.f32 	%f619, %f763;
	setp.eq.f32 	%p170, %f619, %f763;
	mul.f32 	%f620, %f763, 0f00000000;
	selp.f32 	%f766, %f620, %f615, %p170;
	abs.f32 	%f621, %f763;
	setp.gt.f32 	%p171, %f621, 0f4B800000;
	add.f32 	%f622, %f766, 0f3F800000;
	selp.f32 	%f765, %f622, %f618, %p171;
$L__BB0_101:                            // %L564
	selp.f32 	%f248, %f244, %f247, %p21;
	setp.gt.f32 	%p23, %f252, 0f4B800000;
	add.f32 	%f253, %f251, 0f3F800000;
	selp.f32 	%f511, %f507, %f510, %p128;
	setp.gt.f32 	%p130, %f515, 0f4B800000;
	add.f32 	%f516, %f514, 0f3F800000;
	mov.f32 	%f771, %f777;
	mov.f32 	%f772, %f777;
	@%p1 bra 	$L__BB0_117;
// %bb.102:                             // %L602
	cvt.u16.u32 	%rs22, %r3570;
	and.b16  	%rs23, %rs22, 255;
	mul.lo.s16 	%rs24, %rs23, 171;
	shr.u16 	%rs25, %rs24, 10;
	mul.lo.s16 	%rs26, %rs25, 6;
	sub.s16 	%rs27, %rs22, %rs26;
	and.b16  	%rs28, %rs27, 255;
	cvt.rn.f32.u16 	%f624, %rs28;
	div.approx.f32 	%f129, %f624, %f730;
	abs.f32 	%f769, %f129;
	setp.lt.f32 	%p172, %f769, 0f40000000;
	@%p172 bra 	$L__BB0_114;
// %bb.103:
	setp.gtu.f32 	%p173, %f769, 0f4B800000;
	@%p173 bra 	$L__BB0_110;
	bra.uni 	$L__BB0_104;
$L__BB0_110:
	mov.b32 	%r64, %f769;
	and.b32  	%r492, %r64, 8388607;
	or.b32  	%r3585, %r492, 1065353216;
	mov.b32 	%f768, %r3585;
	add.s32 	%r493, %r64, -1073741824;
	and.b32  	%r3586, %r493, -8388608;
	setp.eq.s32 	%p179, %r3586, 0;
	@%p179 bra 	$L__BB0_113;
// %bb.111:                             // %__nv_fmaf_rn.exit4.i.i.i1208.preheader
	mov.f32 	%f635, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f634,%f635;
	// end inline asm
$L__BB0_112:                            // %__nv_fmaf_rn.exit4.i.i.i1208
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r494, %r3586, 192937984;
	add.s32 	%r495, %r3585, %r494;
	mov.b32 	%f636, %r495;
	mul.f32 	%f637, %f634, %f636;
	sub.f32 	%f638, %f636, %f637;
	fma.rn.f32 	%f639, %f638, %f634, %f637;
	sub.f32 	%f640, %f636, %f639;
	fma.rz.f32 	%f641, %f640, %f634, %f639;
	cvt.rzi.f32.f32 	%f642, %f641;
	sub.f32 	%f768, %f636, %f642;
	sub.s32 	%r3586, %r3586, %r494;
	mov.b32 	%r3585, %f768;
	setp.ne.s32 	%p180, %r3586, 0;
	setp.ne.s32 	%p181, %r3585, 0;
	and.pred  	%p182, %p180, %p181;
	@%p182 bra 	$L__BB0_112;
$L__BB0_113:                            // %__internal_fmodf_slowpath_mod.exit.i.i1210
	setp.gt.u32 	%p183, %r64, 2139095039;
	selp.f32 	%f643, 0f7FFFFFFF, 0f4B800000, %p183;
	mul.f32 	%f644, %f768, 0f34000000;
	mul.f32 	%f769, %f643, %f644;
	bra.uni 	$L__BB0_114;
$L__BB0_104:                            // %__nv_fast_fdividef.exit.i.i.i1187
	mov.f32 	%f626, 0f40000000;
	div.approx.f32 	%f627, %f769, %f626;
	cvt.rzi.f32.f32 	%f767, %f627;
	fma.rn.f32 	%f132, %f767, 0fC0000000, %f769;
	mov.b32 	%r63, %f132;
	setp.lt.u32 	%p174, %r63, 1073741824;
	@%p174 bra 	$L__BB0_109;
// %bb.105:
	setp.lt.u32 	%p175, %r63, -2147483647;
	@%p175 bra 	$L__BB0_107;
// %bb.106:
	add.f32 	%f632, %f767, 0fBF800000;
	setp.lt.f32 	%p178, %f132, 0fC0000000;
	add.f32 	%f633, %f632, 0fBF800000;
	selp.f32 	%f767, %f633, %f632, %p178;
	bra.uni 	$L__BB0_109;
$L__BB0_107:
	add.f32 	%f767, %f767, 0f3F800000;
	setp.ltu.f32 	%p176, %f132, 0f40800000;
	@%p176 bra 	$L__BB0_109;
// %bb.108:                             // %__nv_fmaf_rn.exit.i.i.i1191
	add.f32 	%f628, %f767, 0f3F800000;
	fma.rn.f32 	%f630, %f626, 0fC0400000, %f132;
	setp.ge.f32 	%p177, %f630, 0f00000000;
	add.f32 	%f631, %f628, 0f3F800000;
	selp.f32 	%f767, %f631, %f628, %p177;
$L__BB0_109:                            // %__internal_fmodf_fastpath_quot.exit.i.i1194
	fma.rn.f32 	%f769, %f767, 0fC0000000, %f769;
$L__BB0_114:                            // %__internal_fmodf_kernel.exit.i1213
	abs.f32 	%f645, %f769;
	setp.gtu.f32 	%p184, %f645, 0f7F800000;
	@%p184 bra 	$L__BB0_116;
// %bb.115:
	mov.b32 	%r496, %f129;
	and.b32  	%r497, %r496, -2147483648;
	mov.b32 	%r498, %f769;
	or.b32  	%r499, %r497, %r498;
	mov.b32 	%f769, %r499;
$L__BB0_116:                            // %__nv_fmodf.exit1214
	add.f32 	%f646, %f769, %f769;
	mov.b32 	%r500, %f646;
	and.b32  	%r501, %r500, -2147483648;
	or.b32  	%r502, %r501, 1056964608;
	mov.b32 	%f647, %r502;
	add.f32 	%f648, %f646, %f647;
	cvt.rzi.f32.f32 	%f649, %f648;
	abs.f32 	%f650, %f646;
	setp.gt.f32 	%p185, %f650, 0f4B000000;
	selp.f32 	%f651, %f646, %f649, %p185;
	cvt.rzi.f32.f32 	%f652, %f646;
	setp.lt.f32 	%p186, %f650, 0f3F000000;
	selp.f32 	%f653, %f652, %f651, %p186;
	cvt.rzi.s32.f32 	%r503, %f653;
	fma.rn.f32 	%f654, %f653, 0fBF000000, %f769;
	mul.f32 	%f655, %f654, %f654;
	fma.rn.f32 	%f656, %f655, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f657, %f655, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f658, %f656, %f655, 0fC0A55DF6;
	fma.rn.f32 	%f659, %f657, %f655, 0f4081E0CF;
	fma.rn.f32 	%f660, %f655, %f654, 0f00000000;
	fma.rn.f32 	%f661, %f659, %f655, 0fC09DE9E6;
	fma.rn.f32 	%f662, %f658, %f660, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f655, 0f3F800000;
	fma.rn.f32 	%f664, %f654, 0f40490FDB, %f662;
	and.b32  	%r504, %r503, 1;
	setp.eq.b32 	%p187, %r504, 1;
	selp.f32 	%f665, %f663, %f664, %p187;
	selp.f32 	%f666, %f664, %f663, %p187;
	and.b32  	%r505, %r503, 2;
	setp.eq.s32 	%p188, %r505, 0;
	neg.f32 	%f667, %f665;
	selp.f32 	%f668, %f665, %f667, %p188;
	add.s32 	%r506, %r503, 1;
	and.b32  	%r507, %r506, 2;
	setp.eq.s32 	%p189, %r507, 0;
	mov.f32 	%f669, 0f00000000;
	sub.f32 	%f670, %f669, %f666;
	selp.f32 	%f671, %f666, %f670, %p189;
	cvt.rzi.f32.f32 	%f672, %f769;
	setp.eq.f32 	%p190, %f672, %f769;
	mul.f32 	%f673, %f769, 0f00000000;
	selp.f32 	%f772, %f673, %f668, %p190;
	abs.f32 	%f674, %f769;
	setp.gt.f32 	%p191, %f674, 0f4B800000;
	add.f32 	%f675, %f772, 0f3F800000;
	selp.f32 	%f771, %f675, %f671, %p191;
$L__BB0_117:                            // %L636
	selp.f32 	%f254, %f253, %f248, %p23;
	selp.f32 	%f517, %f516, %f511, %p130;
	mov.f32 	%f778, %f777;
	@%p2 bra 	$L__BB0_133;
// %bb.118:                             // %L644
	mul.hi.u32 	%r509, %r3571, -1431655765;
	shr.u32 	%r510, %r509, 2;
	mul.lo.s32 	%r511, %r510, 6;
	sub.s32 	%r512, %r3571, %r511;
	cvt.rn.f32.s32 	%f677, %r512;
	div.approx.f32 	%f150, %f677, %f730;
	abs.f32 	%f775, %f150;
	setp.lt.f32 	%p192, %f775, 0f40000000;
	@%p192 bra 	$L__BB0_130;
// %bb.119:
	setp.gtu.f32 	%p193, %f775, 0f4B800000;
	@%p193 bra 	$L__BB0_126;
	bra.uni 	$L__BB0_120;
$L__BB0_126:
	mov.b32 	%r72, %f775;
	and.b32  	%r513, %r72, 8388607;
	or.b32  	%r3587, %r513, 1065353216;
	mov.b32 	%f774, %r3587;
	add.s32 	%r514, %r72, -1073741824;
	and.b32  	%r3588, %r514, -8388608;
	setp.eq.s32 	%p199, %r3588, 0;
	@%p199 bra 	$L__BB0_129;
// %bb.127:                             // %__nv_fmaf_rn.exit4.i.i.i1239.preheader
	mov.f32 	%f688, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f687,%f688;
	// end inline asm
$L__BB0_128:                            // %__nv_fmaf_rn.exit4.i.i.i1239
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r515, %r3588, 192937984;
	add.s32 	%r516, %r3587, %r515;
	mov.b32 	%f689, %r516;
	mul.f32 	%f690, %f687, %f689;
	sub.f32 	%f691, %f689, %f690;
	fma.rn.f32 	%f692, %f691, %f687, %f690;
	sub.f32 	%f693, %f689, %f692;
	fma.rz.f32 	%f694, %f693, %f687, %f692;
	cvt.rzi.f32.f32 	%f695, %f694;
	sub.f32 	%f774, %f689, %f695;
	sub.s32 	%r3588, %r3588, %r515;
	mov.b32 	%r3587, %f774;
	setp.ne.s32 	%p200, %r3588, 0;
	setp.ne.s32 	%p201, %r3587, 0;
	and.pred  	%p202, %p200, %p201;
	@%p202 bra 	$L__BB0_128;
$L__BB0_129:                            // %__internal_fmodf_slowpath_mod.exit.i.i1241
	setp.gt.u32 	%p203, %r72, 2139095039;
	selp.f32 	%f696, 0f7FFFFFFF, 0f4B800000, %p203;
	mul.f32 	%f697, %f774, 0f34000000;
	mul.f32 	%f775, %f696, %f697;
	bra.uni 	$L__BB0_130;
$L__BB0_120:                            // %__nv_fast_fdividef.exit.i.i.i1218
	mov.f32 	%f679, 0f40000000;
	div.approx.f32 	%f680, %f775, %f679;
	cvt.rzi.f32.f32 	%f773, %f680;
	fma.rn.f32 	%f153, %f773, 0fC0000000, %f775;
	mov.b32 	%r71, %f153;
	setp.lt.u32 	%p194, %r71, 1073741824;
	@%p194 bra 	$L__BB0_125;
// %bb.121:
	setp.lt.u32 	%p195, %r71, -2147483647;
	@%p195 bra 	$L__BB0_123;
// %bb.122:
	add.f32 	%f685, %f773, 0fBF800000;
	setp.lt.f32 	%p198, %f153, 0fC0000000;
	add.f32 	%f686, %f685, 0fBF800000;
	selp.f32 	%f773, %f686, %f685, %p198;
	bra.uni 	$L__BB0_125;
$L__BB0_123:
	add.f32 	%f773, %f773, 0f3F800000;
	setp.ltu.f32 	%p196, %f153, 0f40800000;
	@%p196 bra 	$L__BB0_125;
// %bb.124:                             // %__nv_fmaf_rn.exit.i.i.i1222
	add.f32 	%f681, %f773, 0f3F800000;
	fma.rn.f32 	%f683, %f679, 0fC0400000, %f153;
	setp.ge.f32 	%p197, %f683, 0f00000000;
	add.f32 	%f684, %f681, 0f3F800000;
	selp.f32 	%f773, %f684, %f681, %p197;
$L__BB0_125:                            // %__internal_fmodf_fastpath_quot.exit.i.i1225
	fma.rn.f32 	%f775, %f773, 0fC0000000, %f775;
$L__BB0_130:                            // %__internal_fmodf_kernel.exit.i1244
	abs.f32 	%f698, %f775;
	setp.gtu.f32 	%p204, %f698, 0f7F800000;
	@%p204 bra 	$L__BB0_132;
// %bb.131:
	mov.b32 	%r517, %f150;
	and.b32  	%r518, %r517, -2147483648;
	mov.b32 	%r519, %f775;
	or.b32  	%r520, %r518, %r519;
	mov.b32 	%f775, %r520;
$L__BB0_132:                            // %__nv_fmodf.exit1245
	add.f32 	%f699, %f775, %f775;
	mov.b32 	%r521, %f699;
	and.b32  	%r522, %r521, -2147483648;
	or.b32  	%r523, %r522, 1056964608;
	mov.b32 	%f700, %r523;
	add.f32 	%f701, %f699, %f700;
	cvt.rzi.f32.f32 	%f702, %f701;
	abs.f32 	%f703, %f699;
	setp.gt.f32 	%p205, %f703, 0f4B000000;
	selp.f32 	%f704, %f699, %f702, %p205;
	cvt.rzi.f32.f32 	%f705, %f699;
	setp.lt.f32 	%p206, %f703, 0f3F000000;
	selp.f32 	%f706, %f705, %f704, %p206;
	cvt.rzi.s32.f32 	%r524, %f706;
	fma.rn.f32 	%f707, %f706, 0fBF000000, %f775;
	mul.f32 	%f708, %f707, %f707;
	fma.rn.f32 	%f709, %f708, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f710, %f708, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f711, %f709, %f708, 0fC0A55DF6;
	fma.rn.f32 	%f712, %f710, %f708, 0f4081E0CF;
	fma.rn.f32 	%f713, %f708, %f707, 0f00000000;
	fma.rn.f32 	%f714, %f712, %f708, 0fC09DE9E6;
	fma.rn.f32 	%f715, %f711, %f713, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f708, 0f3F800000;
	fma.rn.f32 	%f717, %f707, 0f40490FDB, %f715;
	and.b32  	%r525, %r524, 1;
	setp.eq.b32 	%p207, %r525, 1;
	selp.f32 	%f718, %f716, %f717, %p207;
	selp.f32 	%f719, %f717, %f716, %p207;
	and.b32  	%r526, %r524, 2;
	setp.eq.s32 	%p208, %r526, 0;
	neg.f32 	%f720, %f718;
	selp.f32 	%f721, %f718, %f720, %p208;
	add.s32 	%r527, %r524, 1;
	and.b32  	%r528, %r527, 2;
	setp.eq.s32 	%p209, %r528, 0;
	mov.f32 	%f722, 0f00000000;
	sub.f32 	%f723, %f722, %f719;
	selp.f32 	%f724, %f719, %f723, %p209;
	cvt.rzi.f32.f32 	%f725, %f775;
	setp.eq.f32 	%p210, %f725, %f775;
	mul.f32 	%f726, %f775, 0f00000000;
	selp.f32 	%f778, %f726, %f721, %p210;
	abs.f32 	%f727, %f775;
	setp.gt.f32 	%p211, %f727, 0f4B800000;
	add.f32 	%f728, %f778, 0f3F800000;
	selp.f32 	%f777, %f728, %f724, %p211;
$L__BB0_133:                            // %L678
	mov.b32 	%r321, %f254;
	mov.b32 	%r324, %f251;
	mov.b32 	%r416, %f747;
	mov.b32 	%r417, %f753;
	mov.b32 	%r422, %f748;
	mov.b32 	%r423, %f754;
	mov.b32 	%r435, %f517;
	mov.b32 	%r438, %f514;
	mov.b32 	%r530, %f771;
	mov.b32 	%r531, %f777;
	mov.b32 	%r536, %f772;
	mov.b32 	%r537, %f778;
	mov.u32 	%r3675, 999999999;
	cvt.u16.u32 	%rs248, %r3;
	@%p67 bra 	$L__BB0_135;
// %bb.134:                             // %L714
	ld.param.u64 	%rd1, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1];
	and.b16  	%rs30, %rs248, 255;
	mul.lo.s16 	%rs31, %rs30, 171;
	shr.u16 	%rs32, %rs31, 12;
	mul.lo.s16 	%rs33, %rs32, 24;
	sub.s16 	%rs34, %rs248, %rs33;
	cvt.u32.u16 	%r542, %rs34;
	and.b32  	%r543, %r542, 255;
	mad.lo.s32 	%r544, %r543, 24, %r1;
	cvt.u16.u32 	%rs35, %r544;
	mul.hi.u16 	%rs36, %rs35, -7281;
	shr.u16 	%rs37, %rs36, 9;
	mul.lo.s16 	%rs38, %rs37, 576;
	sub.s16 	%rs39, %rs35, %rs38;
	cvt.u32.u16 	%r545, %rs39;
	mul.wide.u32 	%rd47, %r545, 4;
	add.s64 	%rd48, %rd1, %rd47;
	ld.global.u32 	%r546, [%rd48];
	cvt.s32.s16 	%r547, %r546;
	shr.s32 	%r548, %r546, 16;
	mul.lo.s32 	%r549, %r548, 801;
	mad.lo.s32 	%r3675, %r547, 33, %r549;
$L__BB0_135:                            // %pass348
	xor.b32  	%r320, %r324, -2147483648;
	mov.b32 	%r372, %f735;
	mov.b32 	%r373, %f741;
	mov.b32 	%r375, %f736;
	mov.b32 	%r376, %f742;
	xor.b32  	%r419, %r422, -2147483648;
	xor.b32  	%r420, %r423, -2147483648;
	xor.b32  	%r434, %r438, -2147483648;
	mov.b32 	%r486, %f759;
	mov.b32 	%r487, %f765;
	mov.b32 	%r489, %f760;
	mov.b32 	%r490, %f766;
	xor.b32  	%r533, %r536, -2147483648;
	xor.b32  	%r534, %r537, -2147483648;
	and.b32  	%r550, %r3, 24;
	setp.ne.s32 	%p213, %r550, 24;
	cvt.u16.u32 	%rs249, %r6;
	@%p213 bra 	$L__BB0_136;
// %bb.186:                             // %pass348.L1048_crit_edge
	mul.lo.s16 	%rs46, %rs249, 171;
	shr.u16 	%rs47, %rs46, 10;
	mul.lo.s16 	%rs48, %rs47, 6;
	sub.s16 	%rs49, %rs249, %rs48;
	cvt.u32.u16 	%r557, %rs49;
	and.b32  	%r3589, %r557, 255;
	mov.u32 	%r3590, 0;
	mov.u32 	%r3591, %r3590;
	bra.uni 	$L__BB0_137;
$L__BB0_136:                            // %pass385
	ld.param.u64 	%rd2, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2];
	mul.lo.s32 	%r551, %r4, 1152;
	mul.lo.s16 	%rs41, %rs249, 171;
	shr.u16 	%rs42, %rs41, 10;
	mul.lo.s16 	%rs43, %rs42, 6;
	sub.s16 	%rs44, %rs249, %rs43;
	cvt.u32.u16 	%r552, %rs44;
	and.b32  	%r3589, %r552, 255;
	or.b32  	%r553, %r551, %r1;
	mad.lo.s32 	%r554, %r5, 144, %r553;
	mad.lo.s32 	%r555, %r3589, 24, %r554;
	mul.wide.u32 	%rd49, %r555, 4;
	add.s64 	%rd50, %rd2, %rd49;
	ld.global.u32 	%r3590, [%rd50];
	ld.global.u32 	%r3591, [%rd50+2304];
$L__BB0_137:                            // %L1048
	ld.param.u64 	%rd3, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3];
	ld.param.u64 	%rd4, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4];
	// begin inline asm
	cvt.rn.f16x2.f32 %r319, %r321, %r320;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r322, %r324, %r321;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r371, %r373, %r372;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r374, %r376, %r375;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r415, %r417, %r416;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r418, %r420, %r419;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r421, %r423, %r422;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r424, %r417, %r416;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r433, %r435, %r434;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r436, %r438, %r435;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r485, %r487, %r486;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r488, %r490, %r489;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r529, %r531, %r530;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r532, %r534, %r533;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r535, %r537, %r536;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r538, %r531, %r530;
	// end inline asm
	mov.u32 	%r3572, 0;
	shl.b32 	%r559, %r3, 2;
	and.b32  	%r560, %r559, 60;
	shl.b32 	%r561, %r4, 8;
	shl.b32 	%r562, %r3, 3;
	and.b32  	%r563, %r562, 128;
	or.b32  	%r564, %r560, %r561;
	or.b32  	%r87, %r564, %r563;
	or.b32  	%r565, %r561, %r559;
	or.b32  	%r566, %r565, %r563;
	or.b32  	%r88, %r566, 65;
	add.s32 	%r89, %r1, 24;
	shr.u32 	%r567, %r3, 4;
	and.b32  	%r568, %r231, 30;
	or.b32  	%r569, %r568, %r567;
	mul.lo.s32 	%r90, %r569, 257;
	or.b32  	%r570, %r231, %r567;
	or.b32  	%r571, %r570, 32;
	mul.lo.s32 	%r91, %r571, 257;
	shr.u32 	%r572, %r1, 3;
	and.b16  	%rs51, %rs248, 255;
	mul.lo.s16 	%rs52, %rs51, 171;
	shr.u16 	%rs53, %rs52, 12;
	mul.lo.s16 	%rs54, %rs53, 24;
	sub.s16 	%rs55, %rs248, %rs54;
	cvt.u32.u16 	%r573, %rs55;
	and.b32  	%r92, %r573, 255;
	and.b32  	%r574, %r2, 224;
	mad.lo.s32 	%r93, %r572, 257, %r574;
	shr.u32 	%r575, %r89, 3;
	mad.lo.s32 	%r94, %r575, 257, %r574;
	add.s32 	%r576, %r1, 48;
	shr.u32 	%r577, %r576, 3;
	mad.lo.s32 	%r95, %r577, 257, %r574;
	add.s32 	%r578, %r1, 72;
	shr.u32 	%r579, %r578, 3;
	mad.lo.s32 	%r96, %r579, 257, %r574;
	or.b32  	%r580, %r572, 12;
	mad.lo.s32 	%r97, %r580, 257, %r574;
	add.s32 	%r581, %r1, 120;
	shr.u32 	%r582, %r581, 3;
	mad.lo.s32 	%r98, %r582, 257, %r574;
	add.s32 	%r583, %r1, 144;
	shr.u32 	%r584, %r583, 3;
	mad.lo.s32 	%r99, %r584, 257, %r574;
	add.s32 	%r585, %r1, 168;
	shr.u32 	%r586, %r585, 3;
	mad.lo.s32 	%r100, %r586, 257, %r574;
	or.b32  	%r587, %r572, 24;
	mad.lo.s32 	%r101, %r587, 257, %r574;
	add.s32 	%r588, %r1, 216;
	shr.u32 	%r589, %r588, 3;
	mad.lo.s32 	%r102, %r589, 257, %r574;
	add.s32 	%r590, %r1, 240;
	shr.u32 	%r591, %r590, 3;
	mad.lo.s32 	%r103, %r591, 257, %r574;
	add.s32 	%r592, %r1, 264;
	shr.u32 	%r593, %r592, 3;
	mad.lo.s32 	%r104, %r593, 257, %r574;
	or.b32  	%r594, %r572, 36;
	mad.lo.s32 	%r105, %r594, 257, %r574;
	add.s32 	%r595, %r1, 312;
	shr.u32 	%r596, %r595, 3;
	mad.lo.s32 	%r106, %r596, 257, %r574;
	add.s32 	%r597, %r1, 336;
	shr.u32 	%r598, %r597, 3;
	mad.lo.s32 	%r107, %r598, 257, %r574;
	add.s32 	%r599, %r1, 360;
	shr.u32 	%r600, %r599, 3;
	mad.lo.s32 	%r108, %r600, 257, %r574;
	or.b32  	%r601, %r572, 48;
	mad.lo.s32 	%r109, %r601, 257, %r574;
	add.s32 	%r602, %r1, 408;
	shr.u32 	%r603, %r602, 3;
	mad.lo.s32 	%r110, %r603, 257, %r574;
	add.s32 	%r604, %r1, 432;
	shr.u32 	%r605, %r604, 3;
	mad.lo.s32 	%r111, %r605, 257, %r574;
	add.s32 	%r606, %r1, 456;
	shr.u32 	%r607, %r606, 3;
	mad.lo.s32 	%r112, %r607, 257, %r574;
	or.b32  	%r608, %r572, 60;
	mad.lo.s32 	%r113, %r608, 257, %r574;
	add.s32 	%r609, %r1, 504;
	bfe.u32 	%r610, %r609, 3, 6;
	mad.lo.s32 	%r114, %r610, 257, %r574;
	mul.lo.s32 	%r611, %r1, 33;
	mad.lo.s32 	%r612, %r5, 4806, %r611;
	mad.lo.s32 	%r613, %r3589, 801, %r612;
	bfe.s32 	%r614, %r3, 2, 1;
	and.b32  	%r615, %r614, 1028;
	mul.lo.s32 	%r616, %r567, 257;
	bfe.s32 	%r617, %r3, 3, 1;
	and.b32  	%r618, %r617, 514;
	bfe.s32 	%r619, %r3, 1, 1;
	and.b32  	%r620, %r619, 2056;
	and.b32  	%r621, %r3, 1;
	neg.s32 	%r622, %r621;
	and.b32  	%r623, %r622, 4112;
	add.s32 	%r624, %r616, %r1;
	add.s32 	%r625, %r624, %r615;
	add.s32 	%r626, %r625, %r618;
	add.s32 	%r627, %r626, %r620;
	add.s32 	%r628, %r627, %r623;
	mul.wide.u32 	%rd51, %r628, 4;
	mov.u64 	%rd52, shmem;
	add.s64 	%rd6, %rd52, %rd51;
	or.b32  	%r629, %r1, 8256;
	add.s32 	%r630, %r629, %r616;
	add.s32 	%r631, %r630, %r615;
	add.s32 	%r632, %r631, %r618;
	add.s32 	%r633, %r632, %r620;
	add.s32 	%r634, %r633, %r623;
	mul.wide.u32 	%rd53, %r634, 4;
	add.s64 	%rd7, %rd52, %rd53;
	or.b32  	%r635, %r1, 32;
	add.s32 	%r636, %r635, %r616;
	add.s32 	%r637, %r636, %r615;
	add.s32 	%r638, %r637, %r618;
	add.s32 	%r639, %r638, %r620;
	add.s32 	%r640, %r639, %r623;
	mul.wide.u32 	%rd54, %r640, 4;
	add.s64 	%rd8, %rd52, %rd54;
	or.b32  	%r641, %r1, 8288;
	add.s32 	%r642, %r641, %r616;
	add.s32 	%r643, %r642, %r615;
	add.s32 	%r644, %r643, %r618;
	add.s32 	%r645, %r644, %r620;
	add.s32 	%r646, %r645, %r623;
	mul.wide.u32 	%rd55, %r646, 4;
	add.s64 	%rd9, %rd52, %rd55;
	bfe.s32 	%r647, %r1, 3, 1;
	and.b32  	%r648, %r1, 8;
	setp.eq.s32 	%p214, %r648, 0;
	and.b32  	%r649, %r647, 1028;
	shr.u32 	%r650, %r1, 4;
	mul.lo.s32 	%r651, %r5, 6;
	bfe.s32 	%r652, %r1, 2, 1;
	and.b32  	%r653, %r652, 2056;
	bfe.s32 	%r654, %r1, 1, 1;
	and.b32  	%r655, %r654, 4112;
	and.b32  	%r656, %r1, 1;
	neg.s32 	%r657, %r656;
	and.b32  	%r658, %r657, 8256;
	mad.lo.s32 	%r659, %r650, 514, %r651;
	add.s32 	%r660, %r659, %r649;
	add.s32 	%r661, %r660, %r653;
	add.s32 	%r662, %r661, %r655;
	add.s32 	%r663, %r662, %r658;
	add.s32 	%r664, %r663, %r3589;
	mul.wide.u32 	%rd56, %r664, 4;
	add.s64 	%rd10, %rd52, %rd56;
	selp.b32 	%r665, 1028, 0, %p214;
	shr.u32 	%r666, %r89, 5;
	bfe.s32 	%r667, %r89, 4, 1;
	and.b32  	%r668, %r667, 514;
	mad.lo.s32 	%r669, %r666, 257, %r651;
	add.s32 	%r670, %r669, %r665;
	add.s32 	%r671, %r670, %r653;
	add.s32 	%r672, %r671, %r655;
	add.s32 	%r673, %r672, %r658;
	add.s32 	%r674, %r673, %r668;
	add.s32 	%r675, %r674, %r3589;
	mul.wide.u32 	%rd57, %r675, 4;
	add.s64 	%rd11, %rd52, %rd57;
	add.s32 	%r676, %r664, 32;
	mul.wide.u32 	%rd58, %r676, 4;
	add.s64 	%rd12, %rd52, %rd58;
	add.s32 	%r677, %r675, 32;
	mul.wide.u32 	%rd59, %r677, 4;
	add.s64 	%rd13, %rd52, %rd59;
	mul.lo.s32 	%r678, %r4, 58752;
	mad.lo.s32 	%r679, %r1, 24, %r678;
	add.s32 	%r115, %r679, %r92;
	cvt.u16.u32 	%rs56, %r89;
	and.b16  	%rs57, %rs56, 255;
	mul.lo.s16 	%rs58, %rs57, 171;
	shr.u16 	%rs59, %rs58, 13;
	mul.lo.s16 	%rs60, %rs59, 48;
	sub.s16 	%rs61, %rs56, %rs60;
	cvt.u32.u16 	%r680, %rs61;
	and.b32  	%r681, %r680, 255;
	or.b32  	%r682, %r678, %r92;
	mad.lo.s32 	%r116, %r681, 24, %r682;
	mul.wide.u32 	%rd60, %r613, 4;
	add.s64 	%rd14, %rd52, %rd60;
	add.s32 	%r683, %r628, 64;
	mul.wide.u32 	%rd61, %r683, 4;
	add.s64 	%rd15, %rd52, %rd61;
	add.s32 	%r684, %r634, 64;
	mul.wide.u32 	%rd62, %r684, 4;
	add.s64 	%rd16, %rd52, %rd62;
	add.s32 	%r685, %r640, 64;
	mul.wide.u32 	%rd63, %r685, 4;
	add.s64 	%rd17, %rd52, %rd63;
	add.s32 	%r686, %r646, 64;
	mul.wide.u32 	%rd64, %r686, 4;
	add.s64 	%rd18, %rd52, %rd64;
	add.s32 	%r687, %r628, 128;
	mul.wide.u32 	%rd65, %r687, 4;
	add.s64 	%rd19, %rd52, %rd65;
	add.s32 	%r688, %r634, 128;
	mul.wide.u32 	%rd66, %r688, 4;
	add.s64 	%rd20, %rd52, %rd66;
	add.s32 	%r689, %r640, 128;
	mul.wide.u32 	%rd67, %r689, 4;
	add.s64 	%rd21, %rd52, %rd67;
	add.s32 	%r690, %r646, 128;
	mul.wide.u32 	%rd68, %r690, 4;
	add.s64 	%rd22, %rd52, %rd68;
	add.s32 	%r691, %r628, 192;
	mul.wide.u32 	%rd69, %r691, 4;
	add.s64 	%rd23, %rd52, %rd69;
	add.s32 	%r692, %r634, 192;
	mul.wide.u32 	%rd70, %r692, 4;
	add.s64 	%rd24, %rd52, %rd70;
	add.s32 	%r693, %r640, 192;
	mul.wide.u32 	%rd71, %r693, 4;
	add.s64 	%rd25, %rd52, %rd71;
	add.s32 	%r694, %r646, 192;
	mul.wide.u32 	%rd72, %r694, 4;
	add.s64 	%rd26, %rd52, %rd72;
	add.s32 	%r695, %r664, 64;
	mul.wide.u32 	%rd73, %r695, 4;
	add.s64 	%rd27, %rd52, %rd73;
	add.s32 	%r696, %r675, 64;
	mul.wide.u32 	%rd74, %r696, 4;
	add.s64 	%rd28, %rd52, %rd74;
	add.s32 	%r697, %r664, 96;
	mul.wide.u32 	%rd75, %r697, 4;
	add.s64 	%rd29, %rd52, %rd75;
	add.s32 	%r698, %r675, 96;
	mul.wide.u32 	%rd76, %r698, 4;
	add.s64 	%rd30, %rd52, %rd76;
	add.s32 	%r699, %r664, 128;
	mul.wide.u32 	%rd77, %r699, 4;
	add.s64 	%rd31, %rd52, %rd77;
	add.s32 	%r700, %r675, 128;
	mul.wide.u32 	%rd78, %r700, 4;
	add.s64 	%rd32, %rd52, %rd78;
	add.s32 	%r701, %r664, 160;
	mul.wide.u32 	%rd79, %r701, 4;
	add.s64 	%rd33, %rd52, %rd79;
	add.s32 	%r702, %r675, 160;
	mul.wide.u32 	%rd80, %r702, 4;
	add.s64 	%rd34, %rd52, %rd80;
	add.s32 	%r703, %r664, 192;
	mul.wide.u32 	%rd81, %r703, 4;
	add.s64 	%rd35, %rd52, %rd81;
	add.s32 	%r704, %r675, 192;
	mul.wide.u32 	%rd82, %r704, 4;
	add.s64 	%rd36, %rd52, %rd82;
	add.s32 	%r705, %r664, 224;
	mul.wide.u32 	%rd83, %r705, 4;
	add.s64 	%rd37, %rd52, %rd83;
	add.s32 	%r706, %r675, 224;
	mul.wide.u32 	%rd84, %r706, 4;
	add.s64 	%rd38, %rd52, %rd84;
	setp.gt.u32 	%p215, %r1, 7;
	setp.lt.u32 	%p216, %r3, 16;
	setp.lt.u32 	%p217, %r3, 24;
	mov.u32 	%r3592, %r3572;
	mov.u32 	%r3622, %r3572;
	mov.u32 	%r3623, %r3572;
	mov.u32 	%r3624, %r3572;
	mov.u32 	%r3625, %r3572;
	bra.uni 	$L__BB0_138;
$L__BB0_159:                            // %L30333
                                        //   in Loop: Header=BB0_138 Depth=1
	add.s32 	%r219, %r3592, 48;
	setp.ne.s32 	%p244, %r3592, 2016;
	mov.u32 	%r3592, %r219;
	@%p244 bra 	$L__BB0_138;
	bra.uni 	$L__BB0_160;
$L__BB0_138:                            // %L1051
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_140 Depth 2
                                        //     Child Loop BB0_150 Depth 2
	mul.hi.u32 	%r900, %r3592, -1431655765;
	shr.u32 	%r901, %r900, 5;
	mul.lo.s32 	%r122, %r901, 48;
	add.s32 	%r902, %r122, %r1;
	cvt.u16.u32 	%rs62, %r902;
	mul.hi.s16 	%rs63, %rs62, 16257;
	shr.u16 	%rs64, %rs63, 15;
	shr.s16 	%rs65, %rs63, 9;
	add.s16 	%rs66, %rs65, %rs64;
	mul.lo.s16 	%rs67, %rs66, 2064;
	sub.s16 	%rs68, %rs62, %rs67;
	cvt.u32.u16 	%r903, %rs68;
	shl.b32 	%r904, %r903, 16;
	or.b32  	%r905, %r904, %r87;
	mul.wide.s32 	%rd85, %r905, 4;
	add.s64 	%rd86, %rd3, %rd85;
	ld.global.v4.u32 	{%r906, %r907, %r908, %r909}, [%rd86];
	or.b32  	%r910, %r88, %r904;
	add.s32 	%r911, %r910, -1;
	mul.wide.s32 	%rd87, %r911, 4;
	add.s64 	%rd88, %rd3, %rd87;
	ld.global.v4.u32 	{%r912, %r913, %r914, %r915}, [%rd88];
	add.s32 	%r916, %r89, %r122;
	cvt.u16.u32 	%rs69, %r916;
	mul.hi.s16 	%rs70, %rs69, 16257;
	shr.u16 	%rs71, %rs70, 15;
	shr.s16 	%rs72, %rs70, 9;
	add.s16 	%rs73, %rs72, %rs71;
	mul.lo.s16 	%rs74, %rs73, 2064;
	sub.s16 	%rs75, %rs69, %rs74;
	cvt.u32.u16 	%r917, %rs75;
	shl.b32 	%r918, %r917, 16;
	or.b32  	%r919, %r918, %r87;
	mul.wide.s32 	%rd89, %r919, 4;
	add.s64 	%rd90, %rd3, %rd89;
	ld.global.v4.u32 	{%r920, %r921, %r922, %r923}, [%rd90];
	or.b32  	%r924, %r88, %r918;
	add.s32 	%r925, %r924, -1;
	mul.wide.s32 	%rd91, %r925, 4;
	add.s64 	%rd92, %rd3, %rd91;
	ld.global.v4.u32 	{%r926, %r927, %r928, %r929}, [%rd92];
	selp.b32 	%r930, %r908, %r906, %p216;
	shfl.sync.bfly.b32	%r931, %r930, 16, 31, -1;
	selp.b32 	%r709, %r906, %r931, %p216;
	selp.b32 	%r714, %r931, %r908, %p216;
	selp.b32 	%r932, %r909, %r907, %p216;
	shfl.sync.bfly.b32	%r933, %r932, 16, 31, -1;
	selp.b32 	%r717, %r907, %r933, %p216;
	selp.b32 	%r722, %r933, %r909, %p216;
	selp.b32 	%r934, %r914, %r912, %p216;
	shfl.sync.bfly.b32	%r935, %r934, 16, 31, -1;
	selp.b32 	%r725, %r912, %r935, %p216;
	selp.b32 	%r730, %r935, %r914, %p216;
	selp.b32 	%r936, %r915, %r913, %p216;
	shfl.sync.bfly.b32	%r937, %r936, 16, 31, -1;
	selp.b32 	%r733, %r913, %r937, %p216;
	selp.b32 	%r738, %r937, %r915, %p216;
	selp.b32 	%r938, %r922, %r920, %p216;
	shfl.sync.bfly.b32	%r939, %r938, 16, 31, -1;
	selp.b32 	%r741, %r920, %r939, %p216;
	selp.b32 	%r746, %r939, %r922, %p216;
	selp.b32 	%r940, %r923, %r921, %p216;
	shfl.sync.bfly.b32	%r941, %r940, 16, 31, -1;
	selp.b32 	%r749, %r921, %r941, %p216;
	selp.b32 	%r754, %r941, %r923, %p216;
	selp.b32 	%r942, %r928, %r926, %p216;
	shfl.sync.bfly.b32	%r943, %r942, 16, 31, -1;
	selp.b32 	%r757, %r926, %r943, %p216;
	selp.b32 	%r762, %r943, %r928, %p216;
	selp.b32 	%r944, %r929, %r927, %p216;
	shfl.sync.bfly.b32	%r945, %r944, 16, 31, -1;
	selp.b32 	%r765, %r927, %r945, %p216;
	selp.b32 	%r770, %r945, %r929, %p216;
	shl.b32 	%r710, %r714, 4;
	mov.u32 	%r708, 252645135;
	// begin inline asm
	lop3.b32 %r772, %r708, %r709, %r710, 202;
	// end inline asm
	shr.u32 	%r713, %r709, 4;
	// begin inline asm
	lop3.b32 %r788, %r708, %r713, %r714, 202;
	// end inline asm
	shl.b32 	%r718, %r722, 4;
	// begin inline asm
	lop3.b32 %r780, %r708, %r717, %r718, 202;
	// end inline asm
	shr.u32 	%r721, %r717, 4;
	// begin inline asm
	lop3.b32 %r796, %r708, %r721, %r722, 202;
	// end inline asm
	shl.b32 	%r726, %r730, 4;
	// begin inline asm
	lop3.b32 %r804, %r708, %r725, %r726, 202;
	// end inline asm
	shr.u32 	%r729, %r725, 4;
	// begin inline asm
	lop3.b32 %r820, %r708, %r729, %r730, 202;
	// end inline asm
	shl.b32 	%r734, %r738, 4;
	// begin inline asm
	lop3.b32 %r812, %r708, %r733, %r734, 202;
	// end inline asm
	shr.u32 	%r737, %r733, 4;
	// begin inline asm
	lop3.b32 %r828, %r708, %r737, %r738, 202;
	// end inline asm
	shl.b32 	%r742, %r746, 4;
	// begin inline asm
	lop3.b32 %r773, %r708, %r741, %r742, 202;
	// end inline asm
	shr.u32 	%r745, %r741, 4;
	// begin inline asm
	lop3.b32 %r789, %r708, %r745, %r746, 202;
	// end inline asm
	shl.b32 	%r750, %r754, 4;
	// begin inline asm
	lop3.b32 %r781, %r708, %r749, %r750, 202;
	// end inline asm
	shr.u32 	%r753, %r749, 4;
	// begin inline asm
	lop3.b32 %r797, %r708, %r753, %r754, 202;
	// end inline asm
	shl.b32 	%r758, %r762, 4;
	// begin inline asm
	lop3.b32 %r805, %r708, %r757, %r758, 202;
	// end inline asm
	shr.u32 	%r761, %r757, 4;
	// begin inline asm
	lop3.b32 %r821, %r708, %r761, %r762, 202;
	// end inline asm
	shl.b32 	%r766, %r770, 4;
	// begin inline asm
	lop3.b32 %r813, %r708, %r765, %r766, 202;
	// end inline asm
	shr.u32 	%r769, %r765, 4;
	// begin inline asm
	lop3.b32 %r829, %r708, %r769, %r770, 202;
	// end inline asm
	mov.u32 	%r774, 25152;
	// begin inline asm
	prmt.b32 %r836, %r772, %r773, %r774;
	// end inline asm
	mov.u32 	%r778, 29521;
	// begin inline asm
	prmt.b32 %r868, %r772, %r773, %r778;
	// end inline asm
	// begin inline asm
	prmt.b32 %r844, %r780, %r781, %r774;
	// end inline asm
	// begin inline asm
	prmt.b32 %r876, %r780, %r781, %r778;
	// end inline asm
	// begin inline asm
	prmt.b32 %r837, %r788, %r789, %r774;
	// end inline asm
	// begin inline asm
	prmt.b32 %r869, %r788, %r789, %r778;
	// end inline asm
	// begin inline asm
	prmt.b32 %r845, %r796, %r797, %r774;
	// end inline asm
	// begin inline asm
	prmt.b32 %r877, %r796, %r797, %r778;
	// end inline asm
	// begin inline asm
	prmt.b32 %r852, %r804, %r805, %r774;
	// end inline asm
	// begin inline asm
	prmt.b32 %r884, %r804, %r805, %r778;
	// end inline asm
	// begin inline asm
	prmt.b32 %r860, %r812, %r813, %r774;
	// end inline asm
	// begin inline asm
	prmt.b32 %r892, %r812, %r813, %r778;
	// end inline asm
	// begin inline asm
	prmt.b32 %r853, %r820, %r821, %r774;
	// end inline asm
	// begin inline asm
	prmt.b32 %r885, %r820, %r821, %r778;
	// end inline asm
	// begin inline asm
	prmt.b32 %r861, %r828, %r829, %r774;
	// end inline asm
	// begin inline asm
	prmt.b32 %r893, %r828, %r829, %r778;
	// end inline asm
	mov.u32 	%r894, 21520;
	// begin inline asm
	prmt.b32 %r835, %r836, %r837, %r894;
	// end inline asm
	mov.u32 	%r898, 30258;
	// begin inline asm
	prmt.b32 %r839, %r836, %r837, %r898;
	// end inline asm
	// begin inline asm
	prmt.b32 %r843, %r844, %r845, %r894;
	// end inline asm
	// begin inline asm
	prmt.b32 %r847, %r844, %r845, %r898;
	// end inline asm
	// begin inline asm
	prmt.b32 %r851, %r852, %r853, %r894;
	// end inline asm
	// begin inline asm
	prmt.b32 %r855, %r852, %r853, %r898;
	// end inline asm
	// begin inline asm
	prmt.b32 %r859, %r860, %r861, %r894;
	// end inline asm
	// begin inline asm
	prmt.b32 %r863, %r860, %r861, %r898;
	// end inline asm
	// begin inline asm
	prmt.b32 %r867, %r868, %r869, %r894;
	// end inline asm
	// begin inline asm
	prmt.b32 %r871, %r868, %r869, %r898;
	// end inline asm
	// begin inline asm
	prmt.b32 %r875, %r876, %r877, %r894;
	// end inline asm
	// begin inline asm
	prmt.b32 %r879, %r876, %r877, %r898;
	// end inline asm
	// begin inline asm
	prmt.b32 %r883, %r884, %r885, %r894;
	// end inline asm
	// begin inline asm
	prmt.b32 %r887, %r884, %r885, %r898;
	// end inline asm
	// begin inline asm
	prmt.b32 %r891, %r892, %r893, %r894;
	// end inline asm
	// begin inline asm
	prmt.b32 %r895, %r892, %r893, %r898;
	// end inline asm
	mul.hi.s16 	%rs76, %rs62, 10923;
	shr.u16 	%rs77, %rs76, 15;
	shr.s16 	%rs78, %rs76, 2;
	add.s16 	%rs79, %rs78, %rs77;
	mul.lo.s16 	%rs80, %rs79, 24;
	sub.s16 	%rs81, %rs62, %rs80;
	cvt.s32.s16 	%r946, %rs81;
	add.s32 	%r947, %r90, %r946;
	mul.wide.s32 	%rd93, %r947, 4;
	add.s64 	%rd95, %rd52, %rd93;
	st.shared.u32 	[%rd95], %r835;
	add.s32 	%r948, %r947, 128;
	mul.wide.u32 	%rd96, %r948, 4;
	add.s64 	%rd97, %rd52, %rd96;
	st.shared.u32 	[%rd97], %r843;
	add.s32 	%r949, %r947, 64;
	mul.wide.u32 	%rd98, %r949, 4;
	add.s64 	%rd99, %rd52, %rd98;
	st.shared.u32 	[%rd99], %r839;
	add.s32 	%r950, %r947, 192;
	mul.wide.u32 	%rd100, %r950, 4;
	add.s64 	%rd101, %rd52, %rd100;
	st.shared.u32 	[%rd101], %r847;
	add.s32 	%r951, %r91, %r946;
	mul.wide.u32 	%rd102, %r951, 4;
	add.s64 	%rd103, %rd52, %rd102;
	st.shared.u32 	[%rd103], %r851;
	add.s32 	%r952, %r951, 128;
	mul.wide.u32 	%rd104, %r952, 4;
	add.s64 	%rd105, %rd52, %rd104;
	st.shared.u32 	[%rd105], %r859;
	add.s32 	%r953, %r951, 64;
	mul.wide.u32 	%rd106, %r953, 4;
	add.s64 	%rd107, %rd52, %rd106;
	st.shared.u32 	[%rd107], %r855;
	add.s32 	%r954, %r951, 192;
	mul.wide.u32 	%rd108, %r954, 4;
	add.s64 	%rd109, %rd52, %rd108;
	st.shared.u32 	[%rd109], %r863;
	add.s32 	%r955, %r947, 32;
	mul.wide.u32 	%rd110, %r955, 4;
	add.s64 	%rd111, %rd52, %rd110;
	st.shared.u32 	[%rd111], %r867;
	add.s32 	%r956, %r947, 160;
	mul.wide.u32 	%rd112, %r956, 4;
	add.s64 	%rd113, %rd52, %rd112;
	st.shared.u32 	[%rd113], %r875;
	add.s32 	%r957, %r947, 96;
	mul.wide.u32 	%rd114, %r957, 4;
	add.s64 	%rd115, %rd52, %rd114;
	st.shared.u32 	[%rd115], %r871;
	add.s32 	%r958, %r947, 224;
	mul.wide.u32 	%rd116, %r958, 4;
	add.s64 	%rd117, %rd52, %rd116;
	st.shared.u32 	[%rd117], %r879;
	add.s32 	%r959, %r951, 32;
	mul.wide.u32 	%rd118, %r959, 4;
	add.s64 	%rd119, %rd52, %rd118;
	st.shared.u32 	[%rd119], %r883;
	add.s32 	%r960, %r951, 160;
	mul.wide.u32 	%rd120, %r960, 4;
	add.s64 	%rd121, %rd52, %rd120;
	st.shared.u32 	[%rd121], %r891;
	add.s32 	%r961, %r951, 96;
	mul.wide.u32 	%rd122, %r961, 4;
	add.s64 	%rd123, %rd52, %rd122;
	st.shared.u32 	[%rd123], %r887;
	add.s32 	%r962, %r951, 224;
	mul.wide.u32 	%rd124, %r962, 4;
	add.s64 	%rd125, %rd52, %rd124;
	st.shared.u32 	[%rd125], %r895;
	bar.sync 	0;
	add.s32 	%r963, %r122, %r92;
	cvt.u16.u32 	%rs82, %r963;
	mul.hi.s16 	%rs83, %rs82, 10923;
	shr.u16 	%rs84, %rs83, 15;
	shr.s16 	%rs85, %rs83, 2;
	add.s16 	%rs86, %rs85, %rs84;
	mul.lo.s16 	%rs87, %rs86, 24;
	sub.s16 	%rs88, %rs82, %rs87;
	cvt.s32.s16 	%r964, %rs88;
	add.s32 	%r965, %r93, %r964;
	mul.wide.s32 	%rd126, %r965, 4;
	add.s64 	%rd127, %rd52, %rd126;
	ld.shared.u32 	%r966, [%rd127];
	add.s32 	%r967, %r94, %r964;
	mul.wide.u32 	%rd128, %r967, 4;
	add.s64 	%rd129, %rd52, %rd128;
	ld.shared.u32 	%r968, [%rd129];
	add.s32 	%r969, %r95, %r964;
	mul.wide.u32 	%rd130, %r969, 4;
	add.s64 	%rd131, %rd52, %rd130;
	ld.shared.u32 	%r970, [%rd131];
	add.s32 	%r971, %r96, %r964;
	mul.wide.u32 	%rd132, %r971, 4;
	add.s64 	%rd133, %rd52, %rd132;
	ld.shared.u32 	%r972, [%rd133];
	add.s32 	%r973, %r97, %r964;
	mul.wide.u32 	%rd134, %r973, 4;
	add.s64 	%rd135, %rd52, %rd134;
	ld.shared.u32 	%r974, [%rd135];
	add.s32 	%r975, %r98, %r964;
	mul.wide.u32 	%rd136, %r975, 4;
	add.s64 	%rd137, %rd52, %rd136;
	ld.shared.u32 	%r976, [%rd137];
	add.s32 	%r977, %r99, %r964;
	mul.wide.u32 	%rd138, %r977, 4;
	add.s64 	%rd139, %rd52, %rd138;
	ld.shared.u32 	%r978, [%rd139];
	add.s32 	%r979, %r100, %r964;
	mul.wide.u32 	%rd140, %r979, 4;
	add.s64 	%rd141, %rd52, %rd140;
	ld.shared.u32 	%r980, [%rd141];
	add.s32 	%r981, %r101, %r964;
	mul.wide.u32 	%rd142, %r981, 4;
	add.s64 	%rd143, %rd52, %rd142;
	ld.shared.u32 	%r982, [%rd143];
	add.s32 	%r983, %r102, %r964;
	mul.wide.u32 	%rd144, %r983, 4;
	add.s64 	%rd145, %rd52, %rd144;
	ld.shared.u32 	%r984, [%rd145];
	add.s32 	%r985, %r103, %r964;
	mul.wide.u32 	%rd146, %r985, 4;
	add.s64 	%rd147, %rd52, %rd146;
	ld.shared.u32 	%r986, [%rd147];
	add.s32 	%r987, %r104, %r964;
	mul.wide.u32 	%rd148, %r987, 4;
	add.s64 	%rd149, %rd52, %rd148;
	ld.shared.u32 	%r988, [%rd149];
	add.s32 	%r989, %r105, %r964;
	mul.wide.u32 	%rd150, %r989, 4;
	add.s64 	%rd151, %rd52, %rd150;
	ld.shared.u32 	%r990, [%rd151];
	add.s32 	%r991, %r106, %r964;
	mul.wide.u32 	%rd152, %r991, 4;
	add.s64 	%rd153, %rd52, %rd152;
	ld.shared.u32 	%r992, [%rd153];
	add.s32 	%r993, %r107, %r964;
	mul.wide.u32 	%rd154, %r993, 4;
	add.s64 	%rd155, %rd52, %rd154;
	ld.shared.u32 	%r994, [%rd155];
	add.s32 	%r995, %r108, %r964;
	mul.wide.u32 	%rd156, %r995, 4;
	add.s64 	%rd157, %rd52, %rd156;
	ld.shared.u32 	%r996, [%rd157];
	add.s32 	%r997, %r109, %r964;
	mul.wide.u32 	%rd158, %r997, 4;
	add.s64 	%rd159, %rd52, %rd158;
	ld.shared.u32 	%r998, [%rd159];
	add.s32 	%r999, %r110, %r964;
	mul.wide.u32 	%rd160, %r999, 4;
	add.s64 	%rd161, %rd52, %rd160;
	ld.shared.u32 	%r1000, [%rd161];
	add.s32 	%r1001, %r111, %r964;
	mul.wide.u32 	%rd162, %r1001, 4;
	add.s64 	%rd163, %rd52, %rd162;
	ld.shared.u32 	%r1002, [%rd163];
	add.s32 	%r1003, %r112, %r964;
	mul.wide.u32 	%rd164, %r1003, 4;
	add.s64 	%rd165, %rd52, %rd164;
	ld.shared.u32 	%r1004, [%rd165];
	add.s32 	%r1005, %r113, %r964;
	mul.wide.u32 	%rd166, %r1005, 4;
	add.s64 	%rd167, %rd52, %rd166;
	ld.shared.u32 	%r1006, [%rd167];
	add.s32 	%r1007, %r114, %r964;
	mul.wide.s32 	%rd168, %r1007, 4;
	add.s64 	%rd169, %rd52, %rd168;
	ld.shared.u32 	%r1008, [%rd169];
	bar.sync 	0;
	shfl.sync.idx.b32	%r1009, %r3675, 0, 31, -1;
	shfl.sync.idx.b32	%r1010, %r3675, 1, 31, -1;
	shfl.sync.idx.b32	%r1011, %r3675, 2, 31, -1;
	shfl.sync.idx.b32	%r1012, %r3675, 3, 31, -1;
	shfl.sync.idx.b32	%r1013, %r3675, 4, 31, -1;
	shfl.sync.idx.b32	%r1014, %r3675, 5, 31, -1;
	shfl.sync.idx.b32	%r1015, %r3675, 6, 31, -1;
	shfl.sync.idx.b32	%r1016, %r3675, 7, 31, -1;
	shfl.sync.idx.b32	%r1017, %r3675, 8, 31, -1;
	shfl.sync.idx.b32	%r1018, %r3675, 9, 31, -1;
	shfl.sync.idx.b32	%r1019, %r3675, 10, 31, -1;
	shfl.sync.idx.b32	%r1020, %r3675, 11, 31, -1;
	shfl.sync.idx.b32	%r1021, %r3675, 12, 31, -1;
	shfl.sync.idx.b32	%r1022, %r3675, 13, 31, -1;
	shfl.sync.idx.b32	%r1023, %r3675, 14, 31, -1;
	shfl.sync.idx.b32	%r1024, %r3675, 15, 31, -1;
	shfl.sync.idx.b32	%r1025, %r3675, 16, 31, -1;
	shfl.sync.idx.b32	%r1026, %r3675, 17, 31, -1;
	shfl.sync.idx.b32	%r1027, %r3675, 18, 31, -1;
	shfl.sync.idx.b32	%r1028, %r3675, 19, 31, -1;
	shfl.sync.idx.b32	%r1029, %r3675, 20, 31, -1;
	shfl.sync.idx.b32	%r1030, %r3675, 21, 31, -1;
	shfl.sync.idx.b32	%r1031, %r3675, 22, 31, -1;
	shfl.sync.idx.b32	%r1032, %r3675, 23, 31, -1;
	add.s32 	%r1033, %r1009, %r964;
	mul.wide.s32 	%rd170, %r1033, 4;
	add.s64 	%rd171, %rd52, %rd170;
	st.shared.u32 	[%rd171], %r966;
	add.s32 	%r1034, %r1010, %r964;
	mul.wide.s32 	%rd172, %r1034, 4;
	add.s64 	%rd173, %rd52, %rd172;
	st.shared.u32 	[%rd173], %r968;
	add.s32 	%r1035, %r1011, %r964;
	mul.wide.s32 	%rd174, %r1035, 4;
	add.s64 	%rd175, %rd52, %rd174;
	st.shared.u32 	[%rd175], %r970;
	add.s32 	%r1036, %r1012, %r964;
	mul.wide.s32 	%rd176, %r1036, 4;
	add.s64 	%rd177, %rd52, %rd176;
	st.shared.u32 	[%rd177], %r972;
	add.s32 	%r1037, %r1013, %r964;
	mul.wide.s32 	%rd178, %r1037, 4;
	add.s64 	%rd179, %rd52, %rd178;
	st.shared.u32 	[%rd179], %r974;
	add.s32 	%r1038, %r1014, %r964;
	mul.wide.s32 	%rd180, %r1038, 4;
	add.s64 	%rd181, %rd52, %rd180;
	st.shared.u32 	[%rd181], %r976;
	add.s32 	%r1039, %r1015, %r964;
	mul.wide.s32 	%rd182, %r1039, 4;
	add.s64 	%rd183, %rd52, %rd182;
	st.shared.u32 	[%rd183], %r978;
	add.s32 	%r1040, %r1016, %r964;
	mul.wide.s32 	%rd184, %r1040, 4;
	add.s64 	%rd185, %rd52, %rd184;
	st.shared.u32 	[%rd185], %r980;
	add.s32 	%r1041, %r1017, %r964;
	mul.wide.s32 	%rd186, %r1041, 4;
	add.s64 	%rd187, %rd52, %rd186;
	st.shared.u32 	[%rd187], %r982;
	add.s32 	%r1042, %r1018, %r964;
	mul.wide.s32 	%rd188, %r1042, 4;
	add.s64 	%rd189, %rd52, %rd188;
	st.shared.u32 	[%rd189], %r984;
	add.s32 	%r1043, %r1019, %r964;
	mul.wide.s32 	%rd190, %r1043, 4;
	add.s64 	%rd191, %rd52, %rd190;
	st.shared.u32 	[%rd191], %r986;
	add.s32 	%r1044, %r1020, %r964;
	mul.wide.s32 	%rd192, %r1044, 4;
	add.s64 	%rd193, %rd52, %rd192;
	st.shared.u32 	[%rd193], %r988;
	add.s32 	%r1045, %r1021, %r964;
	mul.wide.s32 	%rd194, %r1045, 4;
	add.s64 	%rd195, %rd52, %rd194;
	st.shared.u32 	[%rd195], %r990;
	add.s32 	%r1046, %r1022, %r964;
	mul.wide.s32 	%rd196, %r1046, 4;
	add.s64 	%rd197, %rd52, %rd196;
	st.shared.u32 	[%rd197], %r992;
	add.s32 	%r1047, %r1023, %r964;
	mul.wide.s32 	%rd198, %r1047, 4;
	add.s64 	%rd199, %rd52, %rd198;
	st.shared.u32 	[%rd199], %r994;
	add.s32 	%r1048, %r1024, %r964;
	mul.wide.s32 	%rd200, %r1048, 4;
	add.s64 	%rd201, %rd52, %rd200;
	st.shared.u32 	[%rd201], %r996;
	add.s32 	%r1049, %r1025, %r964;
	mul.wide.s32 	%rd202, %r1049, 4;
	add.s64 	%rd203, %rd52, %rd202;
	st.shared.u32 	[%rd203], %r998;
	add.s32 	%r1050, %r1026, %r964;
	mul.wide.s32 	%rd204, %r1050, 4;
	add.s64 	%rd205, %rd52, %rd204;
	st.shared.u32 	[%rd205], %r1000;
	add.s32 	%r1051, %r1027, %r964;
	mul.wide.s32 	%rd206, %r1051, 4;
	add.s64 	%rd207, %rd52, %rd206;
	st.shared.u32 	[%rd207], %r1002;
	add.s32 	%r1052, %r1028, %r964;
	mul.wide.s32 	%rd208, %r1052, 4;
	add.s64 	%rd209, %rd52, %rd208;
	st.shared.u32 	[%rd209], %r1004;
	add.s32 	%r1053, %r1029, %r964;
	mul.wide.s32 	%rd210, %r1053, 4;
	add.s64 	%rd211, %rd52, %rd210;
	st.shared.u32 	[%rd211], %r1006;
	selp.b32 	%r1054, 0, %r1008, %p215;
	add.s32 	%r1055, %r1030, %r964;
	mul.wide.s32 	%rd212, %r1055, 4;
	add.s64 	%rd213, %rd52, %rd212;
	st.shared.u32 	[%rd213], %r1054;
	add.s32 	%r1056, %r1031, %r964;
	mul.wide.s32 	%rd214, %r1056, 4;
	add.s64 	%rd215, %rd52, %rd214;
	st.shared.u32 	[%rd215], %r3572;
	add.s32 	%r1057, %r1032, %r964;
	mul.wide.s32 	%rd216, %r1057, 4;
	add.s64 	%rd217, %rd52, %rd216;
	st.shared.u32 	[%rd217], %r3572;
	bar.sync 	0;
	mov.u32 	%r3597, %r3572;
	mov.u32 	%r3598, %r3572;
	mov.u32 	%r3599, %r3572;
	mov.u32 	%r3600, %r3572;
	mov.u32 	%r3601, %r3572;
	mov.u32 	%r3602, %r3572;
	mov.u32 	%r3603, %r3572;
	mov.u32 	%r3604, %r3572;
	mov.u32 	%r3605, %r3572;
	mov.u32 	%r3606, %r3572;
	mov.u32 	%r3607, %r3572;
	mov.u32 	%r3608, %r3572;
	mov.u32 	%r3609, %r3572;
	mov.u32 	%r3610, %r3572;
	mov.u32 	%r3611, %r3572;
	mov.u32 	%r3612, %r3572;
	mov.u32 	%r3613, %r3572;
	mov.u32 	%r3614, %r3572;
	mov.u32 	%r3615, %r3572;
	mov.u32 	%r3616, %r3572;
	mov.u32 	%r3617, %r3572;
	mov.u32 	%r3618, %r3572;
	mov.u32 	%r3619, %r3572;
	mov.u32 	%r3620, %r3572;
	@%p217 bra 	$L__BB0_187;
	bra.uni 	$L__BB0_139;
$L__BB0_187:                            // %oksrem3787
                                        //   in Loop: Header=BB0_138 Depth=1
	cvt.u16.u32 	%rs89, %r122;
	mul.hi.s16 	%rs90, %rs89, 10923;
	shr.u16 	%rs91, %rs90, 15;
	shr.s16 	%rs92, %rs90, 2;
	add.s16 	%rs93, %rs92, %rs91;
	mul.lo.s16 	%rs94, %rs93, 24;
	sub.s16 	%rs95, %rs89, %rs94;
	cvt.s32.s16 	%r1058, %rs95;
	mul.wide.s32 	%rd218, %r1058, 4;
	add.s64 	%rd219, %rd14, %rd218;
	ld.shared.u32 	%r3597, [%rd219];
	ld.shared.u32 	%r3598, [%rd14+4];
	ld.shared.u32 	%r3599, [%rd14+8];
	ld.shared.u32 	%r3600, [%rd14+12];
	ld.shared.u32 	%r3601, [%rd14+16];
	ld.shared.u32 	%r3602, [%rd14+20];
	ld.shared.u32 	%r3603, [%rd14+24];
	ld.shared.u32 	%r3604, [%rd14+28];
	ld.shared.u32 	%r3605, [%rd14+32];
	ld.shared.u32 	%r3606, [%rd14+36];
	ld.shared.u32 	%r3607, [%rd14+40];
	ld.shared.u32 	%r3608, [%rd14+44];
	ld.shared.u32 	%r3609, [%rd14+48];
	ld.shared.u32 	%r3610, [%rd14+52];
	ld.shared.u32 	%r3611, [%rd14+56];
	ld.shared.u32 	%r3612, [%rd14+60];
	add.s16 	%rs96, %rs89, 16;
	mul.hi.s16 	%rs97, %rs96, 10923;
	shr.u16 	%rs98, %rs97, 15;
	shr.s16 	%rs99, %rs97, 2;
	add.s16 	%rs100, %rs99, %rs98;
	mul.lo.s16 	%rs101, %rs100, 24;
	sub.s16 	%rs102, %rs96, %rs101;
	cvt.s32.s16 	%r1059, %rs102;
	mul.wide.s32 	%rd220, %r1059, 4;
	add.s64 	%rd221, %rd14, %rd220;
	ld.shared.u32 	%r3613, [%rd221];
	add.s16 	%rs103, %rs89, 17;
	mul.hi.s16 	%rs104, %rs103, 10923;
	shr.u16 	%rs105, %rs104, 15;
	shr.s16 	%rs106, %rs104, 2;
	add.s16 	%rs107, %rs106, %rs105;
	mul.lo.s16 	%rs108, %rs107, 24;
	sub.s16 	%rs109, %rs103, %rs108;
	cvt.s32.s16 	%r1060, %rs109;
	mul.wide.s32 	%rd222, %r1060, 4;
	add.s64 	%rd223, %rd14, %rd222;
	ld.shared.u32 	%r3614, [%rd223];
	add.s16 	%rs110, %rs89, 18;
	mul.hi.s16 	%rs111, %rs110, 10923;
	shr.u16 	%rs112, %rs111, 15;
	shr.s16 	%rs113, %rs111, 2;
	add.s16 	%rs114, %rs113, %rs112;
	mul.lo.s16 	%rs115, %rs114, 24;
	sub.s16 	%rs116, %rs110, %rs115;
	cvt.s32.s16 	%r1061, %rs116;
	mul.wide.s32 	%rd224, %r1061, 4;
	add.s64 	%rd225, %rd14, %rd224;
	ld.shared.u32 	%r3615, [%rd225];
	add.s16 	%rs117, %rs89, 19;
	mul.hi.s16 	%rs118, %rs117, 10923;
	shr.u16 	%rs119, %rs118, 15;
	shr.s16 	%rs120, %rs118, 2;
	add.s16 	%rs121, %rs120, %rs119;
	mul.lo.s16 	%rs122, %rs121, 24;
	sub.s16 	%rs123, %rs117, %rs122;
	cvt.s32.s16 	%r1062, %rs123;
	mul.wide.s32 	%rd226, %r1062, 4;
	add.s64 	%rd227, %rd14, %rd226;
	ld.shared.u32 	%r3616, [%rd227];
	add.s16 	%rs124, %rs89, 20;
	mul.hi.s16 	%rs125, %rs124, 10923;
	shr.u16 	%rs126, %rs125, 15;
	shr.s16 	%rs127, %rs125, 2;
	add.s16 	%rs128, %rs127, %rs126;
	mul.lo.s16 	%rs129, %rs128, 24;
	sub.s16 	%rs130, %rs124, %rs129;
	cvt.s32.s16 	%r1063, %rs130;
	mul.wide.s32 	%rd228, %r1063, 4;
	add.s64 	%rd229, %rd14, %rd228;
	ld.shared.u32 	%r3617, [%rd229];
	add.s16 	%rs131, %rs89, 21;
	mul.hi.s16 	%rs132, %rs131, 10923;
	shr.u16 	%rs133, %rs132, 15;
	shr.s16 	%rs134, %rs132, 2;
	add.s16 	%rs135, %rs134, %rs133;
	mul.lo.s16 	%rs136, %rs135, 24;
	sub.s16 	%rs137, %rs131, %rs136;
	cvt.s32.s16 	%r1064, %rs137;
	mul.wide.s32 	%rd230, %r1064, 4;
	add.s64 	%rd231, %rd14, %rd230;
	ld.shared.u32 	%r3618, [%rd231];
	add.s16 	%rs138, %rs89, 22;
	mul.hi.s16 	%rs139, %rs138, 10923;
	shr.u16 	%rs140, %rs139, 15;
	shr.s16 	%rs141, %rs139, 2;
	add.s16 	%rs142, %rs141, %rs140;
	mul.lo.s16 	%rs143, %rs142, 24;
	sub.s16 	%rs144, %rs138, %rs143;
	cvt.s32.s16 	%r1065, %rs144;
	mul.wide.s32 	%rd232, %r1065, 4;
	add.s64 	%rd233, %rd14, %rd232;
	ld.shared.u32 	%r3619, [%rd233];
	add.s16 	%rs145, %rs89, 23;
	mul.hi.s16 	%rs146, %rs145, 10923;
	shr.u16 	%rs147, %rs146, 15;
	shr.s16 	%rs148, %rs146, 2;
	add.s16 	%rs149, %rs148, %rs147;
	mul.lo.s16 	%rs150, %rs149, 24;
	sub.s16 	%rs151, %rs145, %rs150;
	cvt.s32.s16 	%r1066, %rs151;
	mul.wide.s32 	%rd234, %r1066, 4;
	add.s64 	%rd235, %rd14, %rd234;
	ld.shared.u32 	%r3620, [%rd235];
$L__BB0_139:                            // %L11122
                                        //   in Loop: Header=BB0_138 Depth=1
	bar.sync 	0;
	mov.u32 	%r3621, 12;
	bra.uni 	$L__BB0_140;
$L__BB0_147:                            // %L20718
                                        //   in Loop: Header=BB0_140 Depth=2
	add.s32 	%r3623, %r3623, 1;
	mov.u32 	%r3622, 0;
	mov.u32 	%r3624, %r3622;
	mov.u32 	%r3625, %r3622;
$L__BB0_148:                            // %L20719
                                        //   in Loop: Header=BB0_140 Depth=2
	bar.sync 	0;
	add.s32 	%r3621, %r3621, -4;
	setp.ne.s32 	%p230, %r3621, -12;
	@%p230 bra 	$L__BB0_140;
	bra.uni 	$L__BB0_149;
$L__BB0_140:                            // %L11148
                                        //   Parent Loop BB0_138 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p219, %r3621, 12;
	selp.b32 	%r1605, %r3597, 0, %p219;
	setp.eq.s32 	%p220, %r3621, 8;
	selp.b32 	%r1606, %r3601, %r1605, %p220;
	setp.eq.s32 	%p221, %r3621, 4;
	selp.b32 	%r1607, %r3605, %r1606, %p221;
	setp.eq.s32 	%p222, %r3621, 0;
	selp.b32 	%r1608, %r3609, %r1607, %p222;
	setp.eq.s32 	%p223, %r3621, -4;
	selp.b32 	%r1609, %r3613, %r1608, %p223;
	setp.eq.s32 	%p224, %r3621, -8;
	selp.b32 	%r1610, %r3617, %r1609, %p224;
	selp.b32 	%r1611, %r3598, 0, %p219;
	selp.b32 	%r1612, %r3602, %r1611, %p220;
	selp.b32 	%r1613, %r3606, %r1612, %p221;
	selp.b32 	%r1614, %r3610, %r1613, %p222;
	selp.b32 	%r1615, %r3614, %r1614, %p223;
	selp.b32 	%r1616, %r3618, %r1615, %p224;
	selp.b32 	%r1617, %r3599, 0, %p219;
	selp.b32 	%r1618, %r3603, %r1617, %p220;
	selp.b32 	%r1619, %r3607, %r1618, %p221;
	selp.b32 	%r1620, %r3611, %r1619, %p222;
	selp.b32 	%r1621, %r3615, %r1620, %p223;
	selp.b32 	%r1622, %r3619, %r1621, %p224;
	selp.b32 	%r1623, %r3600, 0, %p219;
	selp.b32 	%r1624, %r3604, %r1623, %p220;
	selp.b32 	%r1625, %r3608, %r1624, %p221;
	selp.b32 	%r1626, %r3612, %r1625, %p222;
	selp.b32 	%r1627, %r3616, %r1626, %p223;
	selp.b32 	%r1628, %r3620, %r1627, %p224;
	mov.u16 	%rs189, 25600;
	// begin inline asm
	mov.b32 %r1073, {%rs189, %rs189};
	// end inline asm
	mov.u16 	%rs191, 21504;
	// begin inline asm
	mov.b32 %r1084, {%rs191, %rs191};
	// end inline asm
	xor.b32  	%r1072, %r1610, -2004318072;
	mov.u32 	%r1209, 983055;
	// begin inline asm
	lop3.b32 %r1070, %r1209, %r1072, %r1073, 202;
	// end inline asm
	mov.u16 	%rs195, 18432;
	// begin inline asm
	mov.b32 %r1074, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1075, %r1073, %r1074;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1078, %r1070, %r1075;
	// end inline asm
	mov.u32 	%r1220, 15728880;
	// begin inline asm
	lop3.b32 %r1081, %r1220, %r1072, %r1084, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1085, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1086, %r1084, %r1085;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1089, %r1081, %r1086;
	// end inline asm
	// begin inline asm
	mov.b32 %r1119, {%rs189, %rs189};
	// end inline asm
	// begin inline asm
	mov.b32 %r1130, {%rs191, %rs191};
	// end inline asm
	xor.b32  	%r1118, %r1616, -2004318072;
	// begin inline asm
	lop3.b32 %r1116, %r1209, %r1118, %r1119, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1120, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1121, %r1119, %r1120;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1124, %r1116, %r1121;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1127, %r1220, %r1118, %r1130, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1131, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1132, %r1130, %r1131;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1135, %r1127, %r1132;
	// end inline asm
	// begin inline asm
	mov.b32 %r1165, {%rs189, %rs189};
	// end inline asm
	// begin inline asm
	mov.b32 %r1176, {%rs191, %rs191};
	// end inline asm
	xor.b32  	%r1164, %r1622, -2004318072;
	// begin inline asm
	lop3.b32 %r1162, %r1209, %r1164, %r1165, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1166, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1167, %r1165, %r1166;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1170, %r1162, %r1167;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1173, %r1220, %r1164, %r1176, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1177, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1178, %r1176, %r1177;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1181, %r1173, %r1178;
	// end inline asm
	// begin inline asm
	mov.b32 %r1211, {%rs189, %rs189};
	// end inline asm
	// begin inline asm
	mov.b32 %r1222, {%rs191, %rs191};
	// end inline asm
	xor.b32  	%r1210, %r1628, -2004318072;
	// begin inline asm
	lop3.b32 %r1208, %r1209, %r1210, %r1211, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1212, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1213, %r1211, %r1212;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1216, %r1208, %r1213;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1219, %r1220, %r1210, %r1222, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1223, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1224, %r1222, %r1223;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1227, %r1219, %r1224;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3590;
    mov.b32 {%r2re, %r2im}, %r1078;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1252, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3591;
    mov.b32 {%r2re, %r2im}, %r1089;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1255, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3590;
    mov.b32 {%r2re, %r2im}, %r1124;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1258, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3591;
    mov.b32 {%r2re, %r2im}, %r1135;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1261, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3590;
    mov.b32 {%r2re, %r2im}, %r1170;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1264, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3591;
    mov.b32 {%r2re, %r2im}, %r1181;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1267, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3590;
    mov.b32 {%r2re, %r2im}, %r1216;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1270, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3591;
    mov.b32 {%r2re, %r2im}, %r1227;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1273, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1604, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1339, %r1336}, {%r319, %r322}, {%r1252}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1348, %r1345}, {%r319, %r322}, {%r1255}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1357, %r1354}, {%r319, %r322}, {%r1258}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1366, %r1363}, {%r319, %r322}, {%r1261}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1375, %r1372}, {%r319, %r322}, {%r1264}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1384, %r1381}, {%r319, %r322}, {%r1267}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1393, %r1390}, {%r319, %r322}, {%r1270}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1402, %r1399}, {%r319, %r322}, {%r1273}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1332, %r374;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1334, %r1332, %r1336;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1337, %r371, %r1339, %r1334;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1341, %r374;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1343, %r1341, %r1345;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1346, %r371, %r1348, %r1343;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1350, %r374;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1352, %r1350, %r1354;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1355, %r371, %r1357, %r1352;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1359, %r374;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1361, %r1359, %r1363;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1364, %r371, %r1366, %r1361;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1368, %r374;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1370, %r1368, %r1372;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1373, %r371, %r1375, %r1370;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1377, %r374;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1379, %r1377, %r1381;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1382, %r371, %r1384, %r1379;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1386, %r374;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1388, %r1386, %r1390;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1391, %r371, %r1393, %r1388;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1395, %r374;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1397, %r1395, %r1399;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1400, %r371, %r1402, %r1397;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1404, %r374, %r1339;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1407, %r371, %r1336, %r1404;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1411, %r374, %r1348;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1414, %r371, %r1345, %r1411;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1418, %r374, %r1357;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1421, %r371, %r1354, %r1418;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1425, %r374, %r1366;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1428, %r371, %r1363, %r1425;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1432, %r374, %r1375;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1435, %r371, %r1372, %r1432;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1439, %r374, %r1384;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1442, %r371, %r1381, %r1439;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1446, %r374, %r1393;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1449, %r371, %r1390, %r1446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1453, %r374, %r1402;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1456, %r371, %r1399, %r1453;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1541, %r1542}, {%r415, %r421, %r418, %r424}, {%r1337, %r1407}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1549, %r1550}, {%r415, %r421, %r418, %r424}, {%r1346, %r1414}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1557, %r1558}, {%r415, %r421, %r418, %r424}, {%r1355, %r1421}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1565, %r1566}, {%r415, %r421, %r418, %r424}, {%r1364, %r1428}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1573, %r1574}, {%r415, %r421, %r418, %r424}, {%r1373, %r1435}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1581, %r1582}, {%r415, %r421, %r418, %r424}, {%r1382, %r1442}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1589, %r1590}, {%r415, %r421, %r418, %r424}, {%r1391, %r1449}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1597, %r1598}, {%r415, %r421, %r418, %r424}, {%r1400, %r1456}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	prmt.b32 %r1540, %r1541, %r1542, %r894;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1544, %r1541, %r1542, %r898;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1548, %r1549, %r1550, %r894;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1552, %r1549, %r1550, %r898;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1556, %r1557, %r1558, %r894;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1560, %r1557, %r1558, %r898;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1564, %r1565, %r1566, %r894;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1568, %r1565, %r1566, %r898;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1572, %r1573, %r1574, %r894;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1576, %r1573, %r1574, %r898;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1580, %r1581, %r1582, %r894;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1584, %r1581, %r1582, %r898;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1588, %r1589, %r1590, %r894;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1592, %r1589, %r1590, %r898;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1596, %r1597, %r1598, %r894;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1600, %r1597, %r1598, %r898;
	// end inline asm
	st.shared.u32 	[%rd6], %r1540;
	st.shared.u32 	[%rd7], %r1544;
	st.shared.u32 	[%rd8], %r1548;
	st.shared.u32 	[%rd9], %r1552;
	st.shared.u32 	[%rd15], %r1556;
	st.shared.u32 	[%rd16], %r1560;
	st.shared.u32 	[%rd17], %r1564;
	st.shared.u32 	[%rd18], %r1568;
	st.shared.u32 	[%rd19], %r1572;
	st.shared.u32 	[%rd20], %r1576;
	st.shared.u32 	[%rd21], %r1580;
	st.shared.u32 	[%rd22], %r1584;
	st.shared.u32 	[%rd23], %r1588;
	st.shared.u32 	[%rd24], %r1592;
	st.shared.u32 	[%rd25], %r1596;
	st.shared.u32 	[%rd26], %r1600;
	bar.sync 	0;
	mov.u32 	%r3626, %r1604;
	mov.u32 	%r3627, %r1604;
	mov.u32 	%r3628, %r1604;
	mov.u32 	%r3629, %r1604;
	@%p217 bra 	$L__BB0_188;
	bra.uni 	$L__BB0_141;
$L__BB0_188:                            // %pass7406
                                        //   in Loop: Header=BB0_140 Depth=2
	ld.shared.u32 	%r3626, [%rd10];
	ld.shared.u32 	%r3627, [%rd11];
	ld.shared.u32 	%r3628, [%rd12];
	ld.shared.u32 	%r3629, [%rd13];
$L__BB0_141:                            // %L16653
                                        //   in Loop: Header=BB0_140 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1664, %r1661}, {%r433, %r436}, {%r3626}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1673, %r1670}, {%r433, %r436}, {%r3627}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1682, %r1679}, {%r433, %r436}, {%r3628}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1691, %r1688}, {%r433, %r436}, {%r3629}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1657, %r488;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1659, %r1657, %r1661;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1662, %r485, %r1664, %r1659;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1666, %r488;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1668, %r1666, %r1670;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1671, %r485, %r1673, %r1668;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1675, %r488;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1677, %r1675, %r1679;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1680, %r485, %r1682, %r1677;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1684, %r488;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1686, %r1684, %r1688;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1689, %r485, %r1691, %r1686;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1693, %r488, %r1664;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1696, %r485, %r1661, %r1693;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1700, %r488, %r1673;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1703, %r485, %r1670, %r1700;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1707, %r488, %r1682;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1710, %r485, %r1679, %r1707;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1714, %r488, %r1691;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1717, %r485, %r1688, %r1714;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1762, %r1765}, {%r529, %r535, %r532, %r538}, {%r1662, %r1696}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1781, %r1784}, {%r529, %r535, %r532, %r538}, {%r1671, %r1703}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1769, %r1773}, {%r529, %r535, %r532, %r538}, {%r1680, %r1710}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1788, %r1792}, {%r529, %r535, %r532, %r538}, {%r1689, %r1717}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1761, %r1762, %r1762;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1764, %r1765, %r1765, %r1761;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1768, %r1769, %r1769, %r1764;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1772, %r1773, %r1773, %r1768;
	// end inline asm
	mov.u32 	%r1796, 442899046;
	// begin inline asm
	fma.rn.f16x2 %r1776, %r1796, %r1772, %r3625;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1780, %r1781, %r1781;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1783, %r1784, %r1784, %r1780;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1787, %r1788, %r1788, %r1783;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1791, %r1792, %r1792, %r1787;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1795, %r1796, %r1791, %r3624;
	// end inline asm
	mov.u32 	%r3630, %r1604;
	mov.u32 	%r3631, %r1604;
	mov.u32 	%r3632, %r1604;
	mov.u32 	%r3633, %r1604;
	@%p217 bra 	$L__BB0_189;
	bra.uni 	$L__BB0_142;
$L__BB0_189:                            // %pass8011
                                        //   in Loop: Header=BB0_140 Depth=2
	ld.shared.u32 	%r3630, [%rd27];
	ld.shared.u32 	%r3631, [%rd28];
	ld.shared.u32 	%r3632, [%rd29];
	ld.shared.u32 	%r3633, [%rd30];
$L__BB0_142:                            // %L17860
                                        //   in Loop: Header=BB0_140 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1835, %r1832}, {%r433, %r436}, {%r3630}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1844, %r1841}, {%r433, %r436}, {%r3631}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1853, %r1850}, {%r433, %r436}, {%r3632}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1862, %r1859}, {%r433, %r436}, {%r3633}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1828, %r488;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1830, %r1828, %r1832;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1833, %r485, %r1835, %r1830;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1837, %r488;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1839, %r1837, %r1841;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1842, %r485, %r1844, %r1839;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1846, %r488;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1848, %r1846, %r1850;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1851, %r485, %r1853, %r1848;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1855, %r488;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1857, %r1855, %r1859;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1860, %r485, %r1862, %r1857;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1864, %r488, %r1835;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1867, %r485, %r1832, %r1864;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1871, %r488, %r1844;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1874, %r485, %r1841, %r1871;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1878, %r488, %r1853;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1881, %r485, %r1850, %r1878;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1885, %r488, %r1862;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1888, %r485, %r1859, %r1885;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1933, %r1936}, {%r529, %r535, %r532, %r538}, {%r1833, %r1867}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1952, %r1955}, {%r529, %r535, %r532, %r538}, {%r1842, %r1874}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1940, %r1944}, {%r529, %r535, %r532, %r538}, {%r1851, %r1881}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1959, %r1963}, {%r529, %r535, %r532, %r538}, {%r1860, %r1888}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1932, %r1933, %r1933;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1935, %r1936, %r1936, %r1932;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1939, %r1940, %r1940, %r1935;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1943, %r1944, %r1944, %r1939;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1947, %r1796, %r1943, %r1776;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1951, %r1952, %r1952;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1954, %r1955, %r1955, %r1951;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1958, %r1959, %r1959, %r1954;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1962, %r1963, %r1963, %r1958;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1966, %r1796, %r1962, %r1795;
	// end inline asm
	mov.u32 	%r3634, %r1604;
	mov.u32 	%r3635, %r1604;
	mov.u32 	%r3636, %r1604;
	mov.u32 	%r3637, %r1604;
	@%p217 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_143;
$L__BB0_190:                            // %pass8616
                                        //   in Loop: Header=BB0_140 Depth=2
	ld.shared.u32 	%r3634, [%rd31];
	ld.shared.u32 	%r3635, [%rd32];
	ld.shared.u32 	%r3636, [%rd33];
	ld.shared.u32 	%r3637, [%rd34];
$L__BB0_143:                            // %L19067
                                        //   in Loop: Header=BB0_140 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2006, %r2003}, {%r433, %r436}, {%r3634}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2015, %r2012}, {%r433, %r436}, {%r3635}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2024, %r2021}, {%r433, %r436}, {%r3636}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2033, %r2030}, {%r433, %r436}, {%r3637}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1999, %r488;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2001, %r1999, %r2003;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2004, %r485, %r2006, %r2001;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2008, %r488;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2010, %r2008, %r2012;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2013, %r485, %r2015, %r2010;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2017, %r488;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2019, %r2017, %r2021;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2022, %r485, %r2024, %r2019;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2026, %r488;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2028, %r2026, %r2030;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2031, %r485, %r2033, %r2028;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2035, %r488, %r2006;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2038, %r485, %r2003, %r2035;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2042, %r488, %r2015;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2045, %r485, %r2012, %r2042;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2049, %r488, %r2024;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2052, %r485, %r2021, %r2049;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2056, %r488, %r2033;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2059, %r485, %r2030, %r2056;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2104, %r2107}, {%r529, %r535, %r532, %r538}, {%r2004, %r2038}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2123, %r2126}, {%r529, %r535, %r532, %r538}, {%r2013, %r2045}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2111, %r2115}, {%r529, %r535, %r532, %r538}, {%r2022, %r2052}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2130, %r2134}, {%r529, %r535, %r532, %r538}, {%r2031, %r2059}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2103, %r2104, %r2104;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2106, %r2107, %r2107, %r2103;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2110, %r2111, %r2111, %r2106;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2114, %r2115, %r2115, %r2110;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2118, %r1796, %r2114, %r1947;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2122, %r2123, %r2123;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2125, %r2126, %r2126, %r2122;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2129, %r2130, %r2130, %r2125;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2133, %r2134, %r2134, %r2129;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2137, %r1796, %r2133, %r1966;
	// end inline asm
	mov.u32 	%r3638, %r1604;
	mov.u32 	%r3639, %r1604;
	mov.u32 	%r3640, %r1604;
	mov.u32 	%r3641, %r1604;
	@%p217 bra 	$L__BB0_191;
	bra.uni 	$L__BB0_144;
$L__BB0_191:                            // %pass9221
                                        //   in Loop: Header=BB0_140 Depth=2
	ld.shared.u32 	%r3638, [%rd35];
	ld.shared.u32 	%r3639, [%rd36];
	ld.shared.u32 	%r3640, [%rd37];
	ld.shared.u32 	%r3641, [%rd38];
$L__BB0_144:                            // %L20274
                                        //   in Loop: Header=BB0_140 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2177, %r2174}, {%r433, %r436}, {%r3638}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2186, %r2183}, {%r433, %r436}, {%r3639}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2195, %r2192}, {%r433, %r436}, {%r3640}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2204, %r2201}, {%r433, %r436}, {%r3641}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2170, %r488;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2172, %r2170, %r2174;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2175, %r485, %r2177, %r2172;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2179, %r488;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2181, %r2179, %r2183;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2184, %r485, %r2186, %r2181;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2188, %r488;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2190, %r2188, %r2192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2193, %r485, %r2195, %r2190;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2197, %r488;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2199, %r2197, %r2201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2202, %r485, %r2204, %r2199;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2206, %r488, %r2177;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2209, %r485, %r2174, %r2206;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2213, %r488, %r2186;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2216, %r485, %r2183, %r2213;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2220, %r488, %r2195;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2223, %r485, %r2192, %r2220;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2227, %r488, %r2204;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2230, %r485, %r2201, %r2227;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2275, %r2278}, {%r529, %r535, %r532, %r538}, {%r2175, %r2209}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2294, %r2297}, {%r529, %r535, %r532, %r538}, {%r2184, %r2216}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2282, %r2286}, {%r529, %r535, %r532, %r538}, {%r2193, %r2223}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2301, %r2305}, {%r529, %r535, %r532, %r538}, {%r2202, %r2230}, {%r1604, %r1604};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2274, %r2275, %r2275;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2277, %r2278, %r2278, %r2274;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2281, %r2282, %r2282, %r2277;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2285, %r2286, %r2286, %r2281;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3625, %r1796, %r2285, %r2118;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2293, %r2294, %r2294;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2296, %r2297, %r2297, %r2293;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2300, %r2301, %r2301, %r2296;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2304, %r2305, %r2305, %r2300;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3624, %r1796, %r2304, %r2137;
	// end inline asm
	add.s32 	%r3622, %r3622, 4;
	setp.ne.s32 	%p228, %r3622, 40;
	@%p228 bra 	$L__BB0_148;
// %bb.145:                             // %L20424
                                        //   in Loop: Header=BB0_140 Depth=2
	@%p67 bra 	$L__BB0_147;
// %bb.146:                             // %L20484
                                        //   in Loop: Header=BB0_140 Depth=2
	mul.lo.s32 	%r2312, %r3623, 1152;
	add.s32 	%r2313, %r115, %r2312;
	mul.wide.u32 	%rd236, %r2313, 4;
	add.s64 	%rd237, %rd4, %rd236;
	st.global.u32 	[%rd237], %r3625;
	add.s32 	%r2314, %r116, %r2312;
	mul.wide.u32 	%rd238, %r2314, 4;
	add.s64 	%rd239, %rd4, %rd238;
	st.global.u32 	[%rd239], %r3624;
	bra.uni 	$L__BB0_147;
$L__BB0_149:                            // %L20744.preheader
                                        //   in Loop: Header=BB0_138 Depth=1
	mov.u32 	%r3646, 12;
	bra.uni 	$L__BB0_150;
$L__BB0_157:                            // %L30314
                                        //   in Loop: Header=BB0_150 Depth=2
	add.s32 	%r3623, %r3623, 1;
	mov.u32 	%r3622, 0;
	mov.u32 	%r3624, %r3622;
	mov.u32 	%r3625, %r3622;
$L__BB0_158:                            // %L30315
                                        //   in Loop: Header=BB0_150 Depth=2
	bar.sync 	0;
	add.s32 	%r3646, %r3646, -4;
	setp.ne.s32 	%p243, %r3646, -12;
	@%p243 bra 	$L__BB0_150;
	bra.uni 	$L__BB0_159;
$L__BB0_150:                            // %L20744
                                        //   Parent Loop BB0_138 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p232, %r3646, 12;
	selp.b32 	%r2854, %r3597, 0, %p232;
	setp.eq.s32 	%p233, %r3646, 8;
	selp.b32 	%r2855, %r3601, %r2854, %p233;
	setp.eq.s32 	%p234, %r3646, 4;
	selp.b32 	%r2856, %r3605, %r2855, %p234;
	setp.eq.s32 	%p235, %r3646, 0;
	selp.b32 	%r2857, %r3609, %r2856, %p235;
	setp.eq.s32 	%p236, %r3646, -4;
	selp.b32 	%r2858, %r3613, %r2857, %p236;
	setp.eq.s32 	%p237, %r3646, -8;
	selp.b32 	%r2859, %r3617, %r2858, %p237;
	selp.b32 	%r2860, %r3598, 0, %p232;
	selp.b32 	%r2861, %r3602, %r2860, %p233;
	selp.b32 	%r2862, %r3606, %r2861, %p234;
	selp.b32 	%r2863, %r3610, %r2862, %p235;
	selp.b32 	%r2864, %r3614, %r2863, %p236;
	selp.b32 	%r2865, %r3618, %r2864, %p237;
	selp.b32 	%r2866, %r3599, 0, %p232;
	selp.b32 	%r2867, %r3603, %r2866, %p233;
	selp.b32 	%r2868, %r3607, %r2867, %p234;
	selp.b32 	%r2869, %r3611, %r2868, %p235;
	selp.b32 	%r2870, %r3615, %r2869, %p236;
	selp.b32 	%r2871, %r3619, %r2870, %p237;
	selp.b32 	%r2872, %r3600, 0, %p232;
	selp.b32 	%r2873, %r3604, %r2872, %p233;
	selp.b32 	%r2874, %r3608, %r2873, %p234;
	selp.b32 	%r2875, %r3612, %r2874, %p235;
	selp.b32 	%r2876, %r3616, %r2875, %p236;
	selp.b32 	%r2877, %r3620, %r2876, %p237;
	// begin inline asm
	mov.b32 %r2344, {%rs189, %rs189};
	// end inline asm
	// begin inline asm
	mov.b32 %r2355, {%rs191, %rs191};
	// end inline asm
	shr.u32 	%r2878, %r2859, 8;
	xor.b32  	%r2354, %r2878, 8947848;
	// begin inline asm
	lop3.b32 %r2341, %r1209, %r2354, %r2344, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2345, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2346, %r2344, %r2345;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2349, %r2341, %r2346;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2352, %r1220, %r2354, %r2355, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2356, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2357, %r2355, %r2356;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2360, %r2352, %r2357;
	// end inline asm
	// begin inline asm
	mov.b32 %r2390, {%rs189, %rs189};
	// end inline asm
	// begin inline asm
	mov.b32 %r2401, {%rs191, %rs191};
	// end inline asm
	shr.u32 	%r2879, %r2865, 8;
	xor.b32  	%r2400, %r2879, 8947848;
	// begin inline asm
	lop3.b32 %r2387, %r1209, %r2400, %r2390, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2391, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2392, %r2390, %r2391;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2395, %r2387, %r2392;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2398, %r1220, %r2400, %r2401, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2402, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2403, %r2401, %r2402;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2406, %r2398, %r2403;
	// end inline asm
	// begin inline asm
	mov.b32 %r2436, {%rs189, %rs189};
	// end inline asm
	// begin inline asm
	mov.b32 %r2447, {%rs191, %rs191};
	// end inline asm
	shr.u32 	%r2880, %r2871, 8;
	xor.b32  	%r2446, %r2880, 8947848;
	// begin inline asm
	lop3.b32 %r2433, %r1209, %r2446, %r2436, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2437, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2438, %r2436, %r2437;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2441, %r2433, %r2438;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2444, %r1220, %r2446, %r2447, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2448, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2449, %r2447, %r2448;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2452, %r2444, %r2449;
	// end inline asm
	// begin inline asm
	mov.b32 %r2482, {%rs189, %rs189};
	// end inline asm
	// begin inline asm
	mov.b32 %r2493, {%rs191, %rs191};
	// end inline asm
	shr.u32 	%r2881, %r2877, 8;
	xor.b32  	%r2492, %r2881, 8947848;
	// begin inline asm
	lop3.b32 %r2479, %r1209, %r2492, %r2482, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2483, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2484, %r2482, %r2483;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2487, %r2479, %r2484;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2490, %r1220, %r2492, %r2493, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2494, {%rs195, %rs195};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2495, %r2493, %r2494;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2498, %r2490, %r2495;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3590;
    mov.b32 {%r2re, %r2im}, %r2349;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2501, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3591;
    mov.b32 {%r2re, %r2im}, %r2360;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2504, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3590;
    mov.b32 {%r2re, %r2im}, %r2395;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2507, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3591;
    mov.b32 {%r2re, %r2im}, %r2406;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2510, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3590;
    mov.b32 {%r2re, %r2im}, %r2441;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2513, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3591;
    mov.b32 {%r2re, %r2im}, %r2452;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2516, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3590;
    mov.b32 {%r2re, %r2im}, %r2487;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2519, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3591;
    mov.b32 {%r2re, %r2im}, %r2498;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2522, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r2853, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2588, %r2585}, {%r319, %r322}, {%r2501}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2597, %r2594}, {%r319, %r322}, {%r2504}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2606, %r2603}, {%r319, %r322}, {%r2507}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2615, %r2612}, {%r319, %r322}, {%r2510}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2624, %r2621}, {%r319, %r322}, {%r2513}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2633, %r2630}, {%r319, %r322}, {%r2516}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2642, %r2639}, {%r319, %r322}, {%r2519}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2651, %r2648}, {%r319, %r322}, {%r2522}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2581, %r374;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2583, %r2581, %r2585;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2586, %r371, %r2588, %r2583;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2590, %r374;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2592, %r2590, %r2594;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2595, %r371, %r2597, %r2592;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2599, %r374;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2601, %r2599, %r2603;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2604, %r371, %r2606, %r2601;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2608, %r374;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2610, %r2608, %r2612;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2613, %r371, %r2615, %r2610;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2617, %r374;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2619, %r2617, %r2621;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2622, %r371, %r2624, %r2619;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2626, %r374;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2628, %r2626, %r2630;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2631, %r371, %r2633, %r2628;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2635, %r374;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2637, %r2635, %r2639;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2640, %r371, %r2642, %r2637;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2644, %r374;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2646, %r2644, %r2648;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2649, %r371, %r2651, %r2646;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2653, %r374, %r2588;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2656, %r371, %r2585, %r2653;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2660, %r374, %r2597;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2663, %r371, %r2594, %r2660;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2667, %r374, %r2606;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2670, %r371, %r2603, %r2667;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2674, %r374, %r2615;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2677, %r371, %r2612, %r2674;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2681, %r374, %r2624;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2684, %r371, %r2621, %r2681;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2688, %r374, %r2633;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2691, %r371, %r2630, %r2688;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2695, %r374, %r2642;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2698, %r371, %r2639, %r2695;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2702, %r374, %r2651;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2705, %r371, %r2648, %r2702;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2790, %r2791}, {%r415, %r421, %r418, %r424}, {%r2586, %r2656}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2798, %r2799}, {%r415, %r421, %r418, %r424}, {%r2595, %r2663}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2806, %r2807}, {%r415, %r421, %r418, %r424}, {%r2604, %r2670}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2814, %r2815}, {%r415, %r421, %r418, %r424}, {%r2613, %r2677}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2822, %r2823}, {%r415, %r421, %r418, %r424}, {%r2622, %r2684}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2830, %r2831}, {%r415, %r421, %r418, %r424}, {%r2631, %r2691}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2838, %r2839}, {%r415, %r421, %r418, %r424}, {%r2640, %r2698}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2846, %r2847}, {%r415, %r421, %r418, %r424}, {%r2649, %r2705}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	prmt.b32 %r2789, %r2790, %r2791, %r894;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2793, %r2790, %r2791, %r898;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2797, %r2798, %r2799, %r894;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2801, %r2798, %r2799, %r898;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2805, %r2806, %r2807, %r894;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2809, %r2806, %r2807, %r898;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2813, %r2814, %r2815, %r894;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2817, %r2814, %r2815, %r898;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2821, %r2822, %r2823, %r894;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2825, %r2822, %r2823, %r898;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2829, %r2830, %r2831, %r894;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2833, %r2830, %r2831, %r898;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2837, %r2838, %r2839, %r894;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2841, %r2838, %r2839, %r898;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2845, %r2846, %r2847, %r894;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2849, %r2846, %r2847, %r898;
	// end inline asm
	st.shared.u32 	[%rd6], %r2789;
	st.shared.u32 	[%rd7], %r2793;
	st.shared.u32 	[%rd8], %r2797;
	st.shared.u32 	[%rd9], %r2801;
	st.shared.u32 	[%rd15], %r2805;
	st.shared.u32 	[%rd16], %r2809;
	st.shared.u32 	[%rd17], %r2813;
	st.shared.u32 	[%rd18], %r2817;
	st.shared.u32 	[%rd19], %r2821;
	st.shared.u32 	[%rd20], %r2825;
	st.shared.u32 	[%rd21], %r2829;
	st.shared.u32 	[%rd22], %r2833;
	st.shared.u32 	[%rd23], %r2837;
	st.shared.u32 	[%rd24], %r2841;
	st.shared.u32 	[%rd25], %r2845;
	st.shared.u32 	[%rd26], %r2849;
	bar.sync 	0;
	mov.u32 	%r3651, %r2853;
	mov.u32 	%r3652, %r2853;
	mov.u32 	%r3653, %r2853;
	mov.u32 	%r3654, %r2853;
	@%p217 bra 	$L__BB0_192;
	bra.uni 	$L__BB0_151;
$L__BB0_192:                            // %pass12096
                                        //   in Loop: Header=BB0_150 Depth=2
	ld.shared.u32 	%r3654, [%rd10];
	ld.shared.u32 	%r3653, [%rd11];
	ld.shared.u32 	%r3652, [%rd12];
	ld.shared.u32 	%r3651, [%rd13];
$L__BB0_151:                            // %L26249
                                        //   in Loop: Header=BB0_150 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2917, %r2914}, {%r433, %r436}, {%r3654}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2926, %r2923}, {%r433, %r436}, {%r3653}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2935, %r2932}, {%r433, %r436}, {%r3652}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2944, %r2941}, {%r433, %r436}, {%r3651}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2910, %r488;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2912, %r2910, %r2914;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2915, %r485, %r2917, %r2912;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2919, %r488;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2921, %r2919, %r2923;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2924, %r485, %r2926, %r2921;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2928, %r488;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2930, %r2928, %r2932;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2933, %r485, %r2935, %r2930;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2937, %r488;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2939, %r2937, %r2941;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2942, %r485, %r2944, %r2939;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2946, %r488, %r2917;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2949, %r485, %r2914, %r2946;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2953, %r488, %r2926;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2956, %r485, %r2923, %r2953;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2960, %r488, %r2935;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2963, %r485, %r2932, %r2960;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2967, %r488, %r2944;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2970, %r485, %r2941, %r2967;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3015, %r3018}, {%r529, %r535, %r532, %r538}, {%r2915, %r2949}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3034, %r3037}, {%r529, %r535, %r532, %r538}, {%r2924, %r2956}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3022, %r3026}, {%r529, %r535, %r532, %r538}, {%r2933, %r2963}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3041, %r3045}, {%r529, %r535, %r532, %r538}, {%r2942, %r2970}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3014, %r3015, %r3015;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3017, %r3018, %r3018, %r3014;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3021, %r3022, %r3022, %r3017;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3025, %r3026, %r3026, %r3021;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3029, %r1796, %r3025, %r3625;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3033, %r3034, %r3034;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3036, %r3037, %r3037, %r3033;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3040, %r3041, %r3041, %r3036;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3044, %r3045, %r3045, %r3040;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3048, %r1796, %r3044, %r3624;
	// end inline asm
	mov.u32 	%r3655, %r2853;
	mov.u32 	%r3656, %r2853;
	mov.u32 	%r3657, %r2853;
	mov.u32 	%r3658, %r2853;
	@%p217 bra 	$L__BB0_193;
	bra.uni 	$L__BB0_152;
$L__BB0_193:                            // %pass12701
                                        //   in Loop: Header=BB0_150 Depth=2
	ld.shared.u32 	%r3658, [%rd27];
	ld.shared.u32 	%r3657, [%rd28];
	ld.shared.u32 	%r3656, [%rd29];
	ld.shared.u32 	%r3655, [%rd30];
$L__BB0_152:                            // %L27456
                                        //   in Loop: Header=BB0_150 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3088, %r3085}, {%r433, %r436}, {%r3658}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3097, %r3094}, {%r433, %r436}, {%r3657}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3106, %r3103}, {%r433, %r436}, {%r3656}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3115, %r3112}, {%r433, %r436}, {%r3655}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3081, %r488;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3083, %r3081, %r3085;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3086, %r485, %r3088, %r3083;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3090, %r488;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3092, %r3090, %r3094;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3095, %r485, %r3097, %r3092;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3099, %r488;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3101, %r3099, %r3103;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3104, %r485, %r3106, %r3101;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3108, %r488;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3110, %r3108, %r3112;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3113, %r485, %r3115, %r3110;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3117, %r488, %r3088;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3120, %r485, %r3085, %r3117;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3124, %r488, %r3097;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3127, %r485, %r3094, %r3124;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3131, %r488, %r3106;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3134, %r485, %r3103, %r3131;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3138, %r488, %r3115;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3141, %r485, %r3112, %r3138;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3186, %r3189}, {%r529, %r535, %r532, %r538}, {%r3086, %r3120}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3205, %r3208}, {%r529, %r535, %r532, %r538}, {%r3095, %r3127}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3193, %r3197}, {%r529, %r535, %r532, %r538}, {%r3104, %r3134}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3212, %r3216}, {%r529, %r535, %r532, %r538}, {%r3113, %r3141}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3185, %r3186, %r3186;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3188, %r3189, %r3189, %r3185;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3192, %r3193, %r3193, %r3188;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3196, %r3197, %r3197, %r3192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3200, %r1796, %r3196, %r3029;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3204, %r3205, %r3205;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3207, %r3208, %r3208, %r3204;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3211, %r3212, %r3212, %r3207;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3215, %r3216, %r3216, %r3211;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3219, %r1796, %r3215, %r3048;
	// end inline asm
	mov.u32 	%r3659, %r2853;
	mov.u32 	%r3660, %r2853;
	mov.u32 	%r3661, %r2853;
	mov.u32 	%r3662, %r2853;
	@%p217 bra 	$L__BB0_194;
	bra.uni 	$L__BB0_153;
$L__BB0_194:                            // %pass13306
                                        //   in Loop: Header=BB0_150 Depth=2
	ld.shared.u32 	%r3662, [%rd31];
	ld.shared.u32 	%r3661, [%rd32];
	ld.shared.u32 	%r3660, [%rd33];
	ld.shared.u32 	%r3659, [%rd34];
$L__BB0_153:                            // %L28663
                                        //   in Loop: Header=BB0_150 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3259, %r3256}, {%r433, %r436}, {%r3662}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3268, %r3265}, {%r433, %r436}, {%r3661}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3277, %r3274}, {%r433, %r436}, {%r3660}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3286, %r3283}, {%r433, %r436}, {%r3659}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3252, %r488;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3254, %r3252, %r3256;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3257, %r485, %r3259, %r3254;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3261, %r488;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3263, %r3261, %r3265;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3266, %r485, %r3268, %r3263;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3270, %r488;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3272, %r3270, %r3274;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3275, %r485, %r3277, %r3272;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3279, %r488;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3281, %r3279, %r3283;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3284, %r485, %r3286, %r3281;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3288, %r488, %r3259;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3291, %r485, %r3256, %r3288;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3295, %r488, %r3268;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3298, %r485, %r3265, %r3295;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3302, %r488, %r3277;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3305, %r485, %r3274, %r3302;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3309, %r488, %r3286;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3312, %r485, %r3283, %r3309;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3357, %r3360}, {%r529, %r535, %r532, %r538}, {%r3257, %r3291}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3376, %r3379}, {%r529, %r535, %r532, %r538}, {%r3266, %r3298}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3364, %r3368}, {%r529, %r535, %r532, %r538}, {%r3275, %r3305}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3383, %r3387}, {%r529, %r535, %r532, %r538}, {%r3284, %r3312}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3356, %r3357, %r3357;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3359, %r3360, %r3360, %r3356;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3363, %r3364, %r3364, %r3359;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3367, %r3368, %r3368, %r3363;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3371, %r1796, %r3367, %r3200;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3375, %r3376, %r3376;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3378, %r3379, %r3379, %r3375;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3382, %r3383, %r3383, %r3378;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3386, %r3387, %r3387, %r3382;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3390, %r1796, %r3386, %r3219;
	// end inline asm
	mov.u32 	%r3663, %r2853;
	mov.u32 	%r3664, %r2853;
	mov.u32 	%r3665, %r2853;
	mov.u32 	%r3666, %r2853;
	@%p217 bra 	$L__BB0_195;
	bra.uni 	$L__BB0_154;
$L__BB0_195:                            // %pass13911
                                        //   in Loop: Header=BB0_150 Depth=2
	ld.shared.u32 	%r3666, [%rd35];
	ld.shared.u32 	%r3665, [%rd36];
	ld.shared.u32 	%r3664, [%rd37];
	ld.shared.u32 	%r3663, [%rd38];
$L__BB0_154:                            // %L29870
                                        //   in Loop: Header=BB0_150 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3430, %r3427}, {%r433, %r436}, {%r3666}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3439, %r3436}, {%r433, %r436}, {%r3665}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3448, %r3445}, {%r433, %r436}, {%r3664}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3457, %r3454}, {%r433, %r436}, {%r3663}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3423, %r488;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3425, %r3423, %r3427;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3428, %r485, %r3430, %r3425;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3432, %r488;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3434, %r3432, %r3436;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3437, %r485, %r3439, %r3434;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3441, %r488;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3443, %r3441, %r3445;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3446, %r485, %r3448, %r3443;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3450, %r488;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3452, %r3450, %r3454;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3455, %r485, %r3457, %r3452;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3459, %r488, %r3430;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3462, %r485, %r3427, %r3459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3466, %r488, %r3439;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3469, %r485, %r3436, %r3466;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3473, %r488, %r3448;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3476, %r485, %r3445, %r3473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3480, %r488, %r3457;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3483, %r485, %r3454, %r3480;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3528, %r3531}, {%r529, %r535, %r532, %r538}, {%r3428, %r3462}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3547, %r3550}, {%r529, %r535, %r532, %r538}, {%r3437, %r3469}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3535, %r3539}, {%r529, %r535, %r532, %r538}, {%r3446, %r3476}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3554, %r3558}, {%r529, %r535, %r532, %r538}, {%r3455, %r3483}, {%r2853, %r2853};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3527, %r3528, %r3528;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3530, %r3531, %r3531, %r3527;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3534, %r3535, %r3535, %r3530;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3538, %r3539, %r3539, %r3534;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3625, %r1796, %r3538, %r3371;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3546, %r3547, %r3547;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3549, %r3550, %r3550, %r3546;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3553, %r3554, %r3554, %r3549;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3557, %r3558, %r3558, %r3553;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3624, %r1796, %r3557, %r3390;
	// end inline asm
	add.s32 	%r3622, %r3622, 4;
	setp.ne.s32 	%p241, %r3622, 40;
	@%p241 bra 	$L__BB0_158;
// %bb.155:                             // %L30020
                                        //   in Loop: Header=BB0_150 Depth=2
	@%p67 bra 	$L__BB0_157;
// %bb.156:                             // %L30080
                                        //   in Loop: Header=BB0_150 Depth=2
	mul.lo.s32 	%r3565, %r3623, 1152;
	add.s32 	%r3566, %r115, %r3565;
	mul.wide.u32 	%rd240, %r3566, 4;
	add.s64 	%rd241, %rd4, %rd240;
	st.global.u32 	[%rd241], %r3625;
	add.s32 	%r3567, %r116, %r3565;
	mul.wide.u32 	%rd242, %r3567, 4;
	add.s64 	%rd243, %rd4, %rd242;
	st.global.u32 	[%rd243], %r3624;
	bra.uni 	$L__BB0_157;
$L__BB0_160:                            // %L30350
	mov.u32 	%r3569, 0;
	st.global.u32 	[%rd5], %r3569;
	ret;
$L__BB0_1:                              // %L8
	ld.param.u32 	%r305, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd39, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0];
	mov.u64 	%rd44, exception1;
	cvta.global.u64 	%rd45, %rd44;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd45;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd39;
	st.param.b32 	[param0+8], %r305;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
