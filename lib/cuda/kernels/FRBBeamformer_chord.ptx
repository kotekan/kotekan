// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=768, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE // -- Begin function _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE
.visible .entry _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE(
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0[16],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4[32],
	.param .align 8 .b8 _Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5[32]
)
.reqntid 768, 1, 1
.minnctapersm 1
{
	.reg .pred 	%p<245>;
	.reg .b16 	%rs<297>;
	.reg .f32 	%f<787>;
	.reg .b32 	%r<3813>;
	.reg .b64 	%rd<291>;

// %bb.0:                               // %conversion
	// begin inline asm
	mov.u32 %r342, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p3, %r342, 76895;
	@%p3 bra 	LBB0_162;
	bra.uni 	LBB0_1;
LBB0_162:                               // %L11
	ld.param.u64 	%rd16, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_5];
	mov.u32 	%r1, %tid.y;
	shl.b32 	%r2, %r1, 5;
	mov.u32 	%r3, %ctaid.x;
	mov.u32 	%r4, %tid.x;
	mad.lo.s32 	%r343, %r3, 768, %r2;
	or.b32  	%r344, %r343, %r4;
	mul.wide.u32 	%rd22, %r344, 4;
	add.s64 	%rd5, %rd16, %rd22;
	mov.u32 	%r345, 1;
	st.global.u32 	[%rd5], %r345;
	and.b32  	%r5, %r4, 3;
	shr.u32 	%r6, %r4, 2;
	mul.lo.s32 	%r346, %r5, %r6;
	and.b32  	%r347, %r346, 7;
	cvt.rn.f32.s32 	%f201, %r347;
	mov.f32 	%f202, 0f40800000;
	div.approx.f32 	%f1, %f201, %f202;
	abs.f32 	%f785, %f1;
	setp.lt.f32 	%p4, %f785, 0f40000000;
	setp.gtu.f32 	%p244, %f785, 0f4B800000;
	mov.f32 	%f781, %f785;
	@%p4 bra 	LBB0_174;
// %bb.163:
	@%p244 bra 	LBB0_170;
	bra.uni 	LBB0_164;
LBB0_170:
	mov.b32 	%r262, %f785;
	and.b32  	%r348, %r262, 8388607;
	or.b32  	%r3809, %r348, 1065353216;
	mov.b32 	%f780, %r3809;
	add.s32 	%r349, %r262, -1073741824;
	and.b32  	%r3810, %r349, -8388608;
	setp.eq.s32 	%p11, %r3810, 0;
	@%p11 bra 	LBB0_173;
// %bb.171:                             // %.lr.ph2834.preheader
	mov.f32 	%f212, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f211,%f212;
	// end inline asm
LBB0_172:                               // %.lr.ph2834
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r350, %r3810, 192937984;
	add.s32 	%r351, %r350, %r3809;
	mov.b32 	%f213, %r351;
	mul.f32 	%f214, %f211, %f213;
	sub.f32 	%f215, %f213, %f214;
	fma.rn.f32 	%f216, %f215, %f211, %f214;
	sub.f32 	%f217, %f213, %f216;
	fma.rz.f32 	%f218, %f217, %f211, %f216;
	cvt.rzi.f32.f32 	%f219, %f218;
	sub.f32 	%f780, %f213, %f219;
	sub.s32 	%r3810, %r3810, %r350;
	mov.b32 	%r3809, %f780;
	setp.ne.s32 	%p12, %r3810, 0;
	setp.ne.s32 	%p13, %r3809, 0;
	and.pred  	%p14, %p12, %p13;
	@%p14 bra 	LBB0_172;
LBB0_173:                               // %__internal_fmodf_slowpath_mod.exit.i.i1608
	setp.gt.u32 	%p15, %r262, 2139095039;
	selp.f32 	%f220, 0f7FFFFFFF, 0f4B800000, %p15;
	mul.f32 	%f221, %f780, 0f34000000;
	mul.f32 	%f781, %f220, %f221;
	bra.uni 	LBB0_174;
LBB0_164:                               // %__nv_fast_fdividef.exit.i.i.i1574
	mov.f32 	%f203, 0f40000000;
	div.approx.f32 	%f204, %f785, %f203;
	cvt.rzi.f32.f32 	%f171, %f204;
	fma.rn.f32 	%f172, %f171, 0fC0000000, %f785;
	mov.b32 	%r261, %f172;
	setp.lt.u32 	%p6, %r261, 1073741824;
	mov.f32 	%f779, %f171;
	@%p6 bra 	LBB0_169;
// %bb.165:
	setp.lt.u32 	%p7, %r261, -2147483647;
	@%p7 bra 	LBB0_167;
// %bb.166:
	add.f32 	%f209, %f171, 0fBF800000;
	setp.lt.f32 	%p10, %f172, 0fC0000000;
	selp.f32 	%f210, %f209, %f171, %p10;
	add.f32 	%f779, %f210, 0fBF800000;
	bra.uni 	LBB0_169;
LBB0_167:
	add.f32 	%f779, %f171, 0f3F800000;
	setp.ltu.f32 	%p8, %f172, 0f40800000;
	@%p8 bra 	LBB0_169;
// %bb.168:                             // %__nv_fmaf_rn.exit.i.i.i1579
	fma.rn.f32 	%f206, %f203, 0fC0400000, %f172;
	setp.ge.f32 	%p9, %f206, 0f00000000;
	selp.f32 	%f207, %f779, %f171, %p9;
	add.f32 	%f208, %f207, 0f3F800000;
	add.f32 	%f779, %f208, 0f3F800000;
LBB0_169:                               // %__internal_fmodf_fastpath_quot.exit.i.i1582
	fma.rn.f32 	%f781, %f779, 0fC0000000, %f785;
LBB0_174:                               // %__internal_fmodf_kernel.exit.i1611
	abs.f32 	%f222, %f781;
	setp.gtu.f32 	%p16, %f222, 0f7F800000;
	mov.b32 	%r352, %f1;
	and.b32  	%r269, %r352, -2147483648;
	@%p16 bra 	LBB0_176;
// %bb.175:
	mov.b32 	%r353, %f781;
	or.b32  	%r354, %r269, %r353;
	mov.b32 	%f781, %r354;
LBB0_176:                               // %__nv_fmodf.exit1614
	add.f32 	%f224, %f781, %f781;
	mov.b32 	%r361, %f224;
	and.b32  	%r362, %r361, -2147483648;
	or.b32  	%r363, %r362, 1056964608;
	mov.b32 	%f225, %r363;
	add.f32 	%f226, %f224, %f225;
	cvt.rzi.f32.f32 	%f227, %f226;
	abs.f32 	%f228, %f224;
	setp.gt.f32 	%p17, %f228, 0f4B000000;
	selp.f32 	%f229, %f224, %f227, %p17;
	cvt.rzi.f32.f32 	%f230, %f224;
	setp.lt.f32 	%p18, %f228, 0f3F000000;
	selp.f32 	%f231, %f230, %f229, %p18;
	fma.rn.f32 	%f232, %f231, 0fBF000000, %f781;
	mul.f32 	%f233, %f232, %f232;
	fma.rn.f32 	%f234, %f233, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f235, %f233, 0f3E684E12, 0fBFAAD2E0;
	mov.f32 	%f223, 0f00000000;
	shl.b32 	%r272, %r4, 1;
	and.b32  	%r273, %r272, 6;
	or.b32  	%r274, %r273, 1;
	setp.eq.s32 	%p24, %r273, 6;
	mov.f32 	%f729, 0f41C00000;
	mul.lo.s32 	%r3705, %r273, %r6;
	mov.f32 	%f735, %f223;
	mov.f32 	%f736, %f223;
	@%p24 bra 	LBB0_17;
// %bb.2:                               // %L209
	cvt.u16.u32 	%rs3, %r3705;
	and.b16  	%rs4, %rs3, 255;
	mul.lo.s16 	%rs5, %rs4, 171;
	shr.u16 	%rs6, %rs5, 13;
	mul.lo.s16 	%rs7, %rs6, 48;
	sub.s16 	%rs8, %rs3, %rs7;
	and.b16  	%rs9, %rs8, 255;
	cvt.rn.f32.u16 	%f255, %rs9;
	div.approx.f32 	%f3, %f255, %f729;
	abs.f32 	%f733, %f3;
	setp.lt.f32 	%p25, %f733, 0f40000000;
	@%p25 bra 	LBB0_14;
// %bb.3:
	setp.gtu.f32 	%p26, %f733, 0f4B800000;
	@%p26 bra 	LBB0_10;
	bra.uni 	LBB0_4;
LBB0_10:
	mov.b32 	%r8, %f733;
	and.b32  	%r370, %r8, 8388607;
	or.b32  	%r3708, %r370, 1065353216;
	mov.b32 	%f732, %r3708;
	add.s32 	%r371, %r8, -1073741824;
	and.b32  	%r3709, %r371, -8388608;
	setp.eq.s32 	%p32, %r3709, 0;
	@%p32 bra 	LBB0_13;
// %bb.11:                              // %.lr.ph2829.preheader
	mov.f32 	%f266, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f265,%f266;
	// end inline asm
LBB0_12:                                // %.lr.ph2829
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r372, %r3709, 192937984;
	add.s32 	%r373, %r372, %r3708;
	mov.b32 	%f267, %r373;
	mul.f32 	%f268, %f265, %f267;
	sub.f32 	%f269, %f267, %f268;
	fma.rn.f32 	%f270, %f269, %f265, %f268;
	sub.f32 	%f271, %f267, %f270;
	fma.rz.f32 	%f272, %f271, %f265, %f270;
	cvt.rzi.f32.f32 	%f273, %f272;
	sub.f32 	%f732, %f267, %f273;
	sub.s32 	%r3709, %r3709, %r372;
	mov.b32 	%r3708, %f732;
	setp.ne.s32 	%p33, %r3709, 0;
	setp.ne.s32 	%p34, %r3708, 0;
	and.pred  	%p35, %p33, %p34;
	@%p35 bra 	LBB0_12;
LBB0_13:                                // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p36, %r8, 2139095039;
	selp.f32 	%f274, 0f7FFFFFFF, 0f4B800000, %p36;
	mul.f32 	%f275, %f732, 0f34000000;
	mul.f32 	%f733, %f274, %f275;
	bra.uni 	LBB0_14;
LBB0_4:                                 // %__nv_fast_fdividef.exit.i.i.i
	mov.f32 	%f257, 0f40000000;
	div.approx.f32 	%f258, %f733, %f257;
	cvt.rzi.f32.f32 	%f5, %f258;
	fma.rn.f32 	%f6, %f5, 0fC0000000, %f733;
	mov.b32 	%r7, %f6;
	setp.lt.u32 	%p27, %r7, 1073741824;
	mov.f32 	%f731, %f5;
	@%p27 bra 	LBB0_9;
// %bb.5:
	setp.lt.u32 	%p28, %r7, -2147483647;
	@%p28 bra 	LBB0_7;
// %bb.6:
	add.f32 	%f263, %f5, 0fBF800000;
	setp.lt.f32 	%p31, %f6, 0fC0000000;
	selp.f32 	%f264, %f263, %f5, %p31;
	add.f32 	%f731, %f264, 0fBF800000;
	bra.uni 	LBB0_9;
LBB0_7:
	add.f32 	%f731, %f5, 0f3F800000;
	setp.ltu.f32 	%p29, %f6, 0f40800000;
	@%p29 bra 	LBB0_9;
// %bb.8:                               // %__nv_fmaf_rn.exit.i.i.i
	fma.rn.f32 	%f260, %f257, 0fC0400000, %f6;
	setp.ge.f32 	%p30, %f260, 0f00000000;
	selp.f32 	%f261, %f731, %f5, %p30;
	add.f32 	%f262, %f261, 0f3F800000;
	add.f32 	%f731, %f262, 0f3F800000;
LBB0_9:                                 // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f733, %f731, 0fC0000000, %f733;
LBB0_14:                                // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f276, %f733;
	setp.gtu.f32 	%p37, %f276, 0f7F800000;
	@%p37 bra 	LBB0_16;
// %bb.15:
	mov.b32 	%r374, %f3;
	and.b32  	%r375, %r374, -2147483648;
	mov.b32 	%r376, %f733;
	or.b32  	%r377, %r375, %r376;
	mov.b32 	%f733, %r377;
LBB0_16:                                // %__nv_fmodf.exit
	add.f32 	%f277, %f733, %f733;
	mov.b32 	%r378, %f277;
	and.b32  	%r379, %r378, -2147483648;
	or.b32  	%r380, %r379, 1056964608;
	mov.b32 	%f278, %r380;
	add.f32 	%f279, %f277, %f278;
	cvt.rzi.f32.f32 	%f280, %f279;
	abs.f32 	%f281, %f277;
	setp.gt.f32 	%p38, %f281, 0f4B000000;
	selp.f32 	%f282, %f277, %f280, %p38;
	cvt.rzi.f32.f32 	%f283, %f277;
	setp.lt.f32 	%p39, %f281, 0f3F000000;
	selp.f32 	%f284, %f283, %f282, %p39;
	cvt.rzi.s32.f32 	%r381, %f284;
	fma.rn.f32 	%f285, %f284, 0fBF000000, %f733;
	mul.f32 	%f286, %f285, %f285;
	fma.rn.f32 	%f287, %f286, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f288, %f286, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f289, %f287, %f286, 0fC0A55DF6;
	fma.rn.f32 	%f290, %f288, %f286, 0f4081E0CF;
	fma.rn.f32 	%f291, %f286, %f285, 0f00000000;
	fma.rn.f32 	%f292, %f290, %f286, 0fC09DE9E6;
	fma.rn.f32 	%f293, %f289, %f291, 0f00000000;
	fma.rn.f32 	%f294, %f292, %f286, 0f3F800000;
	fma.rn.f32 	%f295, %f285, 0f40490FDB, %f293;
	and.b32  	%r382, %r381, 1;
	setp.eq.b32 	%p40, %r382, 1;
	selp.f32 	%f296, %f294, %f295, %p40;
	selp.f32 	%f297, %f295, %f294, %p40;
	and.b32  	%r383, %r381, 2;
	setp.eq.s32 	%p41, %r383, 0;
	neg.f32 	%f298, %f296;
	selp.f32 	%f299, %f296, %f298, %p41;
	add.s32 	%r384, %r381, 1;
	and.b32  	%r385, %r384, 2;
	setp.eq.s32 	%p42, %r385, 0;
	mov.f32 	%f300, 0f00000000;
	sub.f32 	%f301, %f300, %f297;
	selp.f32 	%f302, %f297, %f301, %p42;
	cvt.rzi.f32.f32 	%f303, %f733;
	setp.eq.f32 	%p43, %f303, %f733;
	mul.f32 	%f304, %f733, 0f00000000;
	selp.f32 	%f736, %f304, %f299, %p43;
	abs.f32 	%f305, %f733;
	setp.gt.f32 	%p44, %f305, 0f4B800000;
	add.f32 	%f306, %f736, 0f3F800000;
	selp.f32 	%f735, %f306, %f302, %p44;
LBB0_17:                                // %L225
	cvt.rzi.s32.f32 	%r364, %f231;
	fma.rn.f32 	%f236, %f234, %f233, 0fC0A55DF6;
	fma.rn.f32 	%f237, %f235, %f233, 0f4081E0CF;
	fma.rn.f32 	%f238, %f233, %f232, 0f00000000;
	setp.gt.u32 	%p45, %r274, 5;
	mul.lo.s32 	%r3706, %r274, %r6;
	mov.f32 	%f741, %f223;
	mov.f32 	%f742, %f223;
	@%p45 bra 	LBB0_33;
// %bb.18:                              // %L229
	mul.hi.u32 	%r387, %r3706, -1431655765;
	shr.u32 	%r388, %r387, 5;
	mul.lo.s32 	%r389, %r388, 48;
	sub.s32 	%r390, %r3706, %r389;
	cvt.rn.f32.s32 	%f308, %r390;
	div.approx.f32 	%f24, %f308, %f729;
	abs.f32 	%f739, %f24;
	setp.lt.f32 	%p46, %f739, 0f40000000;
	@%p46 bra 	LBB0_30;
// %bb.19:
	setp.gtu.f32 	%p47, %f739, 0f4B800000;
	@%p47 bra 	LBB0_26;
	bra.uni 	LBB0_20;
LBB0_26:
	mov.b32 	%r16, %f739;
	and.b32  	%r391, %r16, 8388607;
	or.b32  	%r3710, %r391, 1065353216;
	mov.b32 	%f738, %r3710;
	add.s32 	%r392, %r16, -1073741824;
	and.b32  	%r3711, %r392, -8388608;
	setp.eq.s32 	%p53, %r3711, 0;
	@%p53 bra 	LBB0_29;
// %bb.27:                              // %.lr.ph2824.preheader
	mov.f32 	%f319, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f318,%f319;
	// end inline asm
LBB0_28:                                // %.lr.ph2824
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r393, %r3711, 192937984;
	add.s32 	%r394, %r393, %r3710;
	mov.b32 	%f320, %r394;
	mul.f32 	%f321, %f318, %f320;
	sub.f32 	%f322, %f320, %f321;
	fma.rn.f32 	%f323, %f322, %f318, %f321;
	sub.f32 	%f324, %f320, %f323;
	fma.rz.f32 	%f325, %f324, %f318, %f323;
	cvt.rzi.f32.f32 	%f326, %f325;
	sub.f32 	%f738, %f320, %f326;
	sub.s32 	%r3711, %r3711, %r393;
	mov.b32 	%r3710, %f738;
	setp.ne.s32 	%p54, %r3711, 0;
	setp.ne.s32 	%p55, %r3710, 0;
	and.pred  	%p56, %p54, %p55;
	@%p56 bra 	LBB0_28;
LBB0_29:                                // %__internal_fmodf_slowpath_mod.exit.i.i1237
	setp.gt.u32 	%p57, %r16, 2139095039;
	selp.f32 	%f327, 0f7FFFFFFF, 0f4B800000, %p57;
	mul.f32 	%f328, %f738, 0f34000000;
	mul.f32 	%f739, %f327, %f328;
	bra.uni 	LBB0_30;
LBB0_20:                                // %__nv_fast_fdividef.exit.i.i.i1203
	mov.f32 	%f310, 0f40000000;
	div.approx.f32 	%f311, %f739, %f310;
	cvt.rzi.f32.f32 	%f26, %f311;
	fma.rn.f32 	%f27, %f26, 0fC0000000, %f739;
	mov.b32 	%r15, %f27;
	setp.lt.u32 	%p48, %r15, 1073741824;
	mov.f32 	%f737, %f26;
	@%p48 bra 	LBB0_25;
// %bb.21:
	setp.lt.u32 	%p49, %r15, -2147483647;
	@%p49 bra 	LBB0_23;
// %bb.22:
	add.f32 	%f316, %f26, 0fBF800000;
	setp.lt.f32 	%p52, %f27, 0fC0000000;
	selp.f32 	%f317, %f316, %f26, %p52;
	add.f32 	%f737, %f317, 0fBF800000;
	bra.uni 	LBB0_25;
LBB0_23:
	add.f32 	%f737, %f26, 0f3F800000;
	setp.ltu.f32 	%p50, %f27, 0f40800000;
	@%p50 bra 	LBB0_25;
// %bb.24:                              // %__nv_fmaf_rn.exit.i.i.i1208
	fma.rn.f32 	%f313, %f310, 0fC0400000, %f27;
	setp.ge.f32 	%p51, %f313, 0f00000000;
	selp.f32 	%f314, %f737, %f26, %p51;
	add.f32 	%f315, %f314, 0f3F800000;
	add.f32 	%f737, %f315, 0f3F800000;
LBB0_25:                                // %__internal_fmodf_fastpath_quot.exit.i.i1211
	fma.rn.f32 	%f739, %f737, 0fC0000000, %f739;
LBB0_30:                                // %__internal_fmodf_kernel.exit.i1240
	abs.f32 	%f329, %f739;
	setp.gtu.f32 	%p58, %f329, 0f7F800000;
	@%p58 bra 	LBB0_32;
// %bb.31:
	mov.b32 	%r395, %f24;
	and.b32  	%r396, %r395, -2147483648;
	mov.b32 	%r397, %f739;
	or.b32  	%r398, %r396, %r397;
	mov.b32 	%f739, %r398;
LBB0_32:                                // %__nv_fmodf.exit1243
	add.f32 	%f330, %f739, %f739;
	mov.b32 	%r399, %f330;
	and.b32  	%r400, %r399, -2147483648;
	or.b32  	%r401, %r400, 1056964608;
	mov.b32 	%f331, %r401;
	add.f32 	%f332, %f330, %f331;
	cvt.rzi.f32.f32 	%f333, %f332;
	abs.f32 	%f334, %f330;
	setp.gt.f32 	%p59, %f334, 0f4B000000;
	selp.f32 	%f335, %f330, %f333, %p59;
	cvt.rzi.f32.f32 	%f336, %f330;
	setp.lt.f32 	%p60, %f334, 0f3F000000;
	selp.f32 	%f337, %f336, %f335, %p60;
	cvt.rzi.s32.f32 	%r402, %f337;
	fma.rn.f32 	%f338, %f337, 0fBF000000, %f739;
	mul.f32 	%f339, %f338, %f338;
	fma.rn.f32 	%f340, %f339, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f341, %f339, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f342, %f340, %f339, 0fC0A55DF6;
	fma.rn.f32 	%f343, %f341, %f339, 0f4081E0CF;
	fma.rn.f32 	%f344, %f339, %f338, 0f00000000;
	fma.rn.f32 	%f345, %f343, %f339, 0fC09DE9E6;
	fma.rn.f32 	%f346, %f342, %f344, 0f00000000;
	fma.rn.f32 	%f347, %f345, %f339, 0f3F800000;
	fma.rn.f32 	%f348, %f338, 0f40490FDB, %f346;
	and.b32  	%r403, %r402, 1;
	setp.eq.b32 	%p61, %r403, 1;
	selp.f32 	%f349, %f347, %f348, %p61;
	selp.f32 	%f350, %f348, %f347, %p61;
	and.b32  	%r404, %r402, 2;
	setp.eq.s32 	%p62, %r404, 0;
	neg.f32 	%f351, %f349;
	selp.f32 	%f352, %f349, %f351, %p62;
	add.s32 	%r405, %r402, 1;
	and.b32  	%r406, %r405, 2;
	setp.eq.s32 	%p63, %r406, 0;
	mov.f32 	%f353, 0f00000000;
	sub.f32 	%f354, %f353, %f350;
	selp.f32 	%f355, %f350, %f354, %p63;
	cvt.rzi.f32.f32 	%f356, %f739;
	setp.eq.f32 	%p64, %f356, %f739;
	mul.f32 	%f357, %f739, 0f00000000;
	selp.f32 	%f742, %f357, %f352, %p64;
	abs.f32 	%f358, %f739;
	setp.gt.f32 	%p65, %f358, 0f4B800000;
	add.f32 	%f359, %f742, 0f3F800000;
	selp.f32 	%f741, %f359, %f355, %p65;
LBB0_33:                                // %L245
	fma.rn.f32 	%f239, %f237, %f233, 0fC09DE9E6;
	fma.rn.f32 	%f240, %f236, %f238, 0f00000000;
	and.b32  	%r365, %r364, 1;
	setp.gt.u32 	%p67, %r4, 23;
	or.pred  	%p1, %p24, %p67;
	mov.f32 	%f730, 0f40400000;
	mov.f32 	%f747, %f223;
	mov.f32 	%f748, %f223;
	@%p1 bra 	LBB0_49;
// %bb.34:                              // %L288
	cvt.u16.u32 	%rs10, %r3705;
	and.b16  	%rs11, %rs10, 255;
	mul.lo.s16 	%rs12, %rs11, 171;
	shr.u16 	%rs13, %rs12, 10;
	mul.lo.s16 	%rs14, %rs13, 6;
	sub.s16 	%rs15, %rs10, %rs14;
	and.b16  	%rs16, %rs15, 255;
	cvt.rn.f32.u16 	%f361, %rs16;
	div.approx.f32 	%f45, %f361, %f730;
	abs.f32 	%f745, %f45;
	setp.lt.f32 	%p68, %f745, 0f40000000;
	@%p68 bra 	LBB0_46;
// %bb.35:
	setp.gtu.f32 	%p69, %f745, 0f4B800000;
	@%p69 bra 	LBB0_42;
	bra.uni 	LBB0_36;
LBB0_42:
	mov.b32 	%r26, %f745;
	and.b32  	%r414, %r26, 8388607;
	or.b32  	%r3712, %r414, 1065353216;
	mov.b32 	%f744, %r3712;
	add.s32 	%r415, %r26, -1073741824;
	and.b32  	%r3713, %r415, -8388608;
	setp.eq.s32 	%p75, %r3713, 0;
	@%p75 bra 	LBB0_45;
// %bb.43:                              // %.lr.ph2819.preheader
	mov.f32 	%f372, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f371,%f372;
	// end inline asm
LBB0_44:                                // %.lr.ph2819
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r416, %r3713, 192937984;
	add.s32 	%r417, %r416, %r3712;
	mov.b32 	%f373, %r417;
	mul.f32 	%f374, %f371, %f373;
	sub.f32 	%f375, %f373, %f374;
	fma.rn.f32 	%f376, %f375, %f371, %f374;
	sub.f32 	%f377, %f373, %f376;
	fma.rz.f32 	%f378, %f377, %f371, %f376;
	cvt.rzi.f32.f32 	%f379, %f378;
	sub.f32 	%f744, %f373, %f379;
	sub.s32 	%r3713, %r3713, %r416;
	mov.b32 	%r3712, %f744;
	setp.ne.s32 	%p76, %r3713, 0;
	setp.ne.s32 	%p77, %r3712, 0;
	and.pred  	%p78, %p76, %p77;
	@%p78 bra 	LBB0_44;
LBB0_45:                                // %__internal_fmodf_slowpath_mod.exit.i.i1290
	setp.gt.u32 	%p79, %r26, 2139095039;
	selp.f32 	%f380, 0f7FFFFFFF, 0f4B800000, %p79;
	mul.f32 	%f381, %f744, 0f34000000;
	mul.f32 	%f745, %f380, %f381;
	bra.uni 	LBB0_46;
LBB0_36:                                // %__nv_fast_fdividef.exit.i.i.i1256
	mov.f32 	%f363, 0f40000000;
	div.approx.f32 	%f364, %f745, %f363;
	cvt.rzi.f32.f32 	%f47, %f364;
	fma.rn.f32 	%f48, %f47, 0fC0000000, %f745;
	mov.b32 	%r25, %f48;
	setp.lt.u32 	%p70, %r25, 1073741824;
	mov.f32 	%f743, %f47;
	@%p70 bra 	LBB0_41;
// %bb.37:
	setp.lt.u32 	%p71, %r25, -2147483647;
	@%p71 bra 	LBB0_39;
// %bb.38:
	add.f32 	%f369, %f47, 0fBF800000;
	setp.lt.f32 	%p74, %f48, 0fC0000000;
	selp.f32 	%f370, %f369, %f47, %p74;
	add.f32 	%f743, %f370, 0fBF800000;
	bra.uni 	LBB0_41;
LBB0_39:
	add.f32 	%f743, %f47, 0f3F800000;
	setp.ltu.f32 	%p72, %f48, 0f40800000;
	@%p72 bra 	LBB0_41;
// %bb.40:                              // %__nv_fmaf_rn.exit.i.i.i1261
	fma.rn.f32 	%f366, %f363, 0fC0400000, %f48;
	setp.ge.f32 	%p73, %f366, 0f00000000;
	selp.f32 	%f367, %f743, %f47, %p73;
	add.f32 	%f368, %f367, 0f3F800000;
	add.f32 	%f743, %f368, 0f3F800000;
LBB0_41:                                // %__internal_fmodf_fastpath_quot.exit.i.i1264
	fma.rn.f32 	%f745, %f743, 0fC0000000, %f745;
LBB0_46:                                // %__internal_fmodf_kernel.exit.i1293
	abs.f32 	%f382, %f745;
	setp.gtu.f32 	%p80, %f382, 0f7F800000;
	@%p80 bra 	LBB0_48;
// %bb.47:
	mov.b32 	%r418, %f45;
	and.b32  	%r419, %r418, -2147483648;
	mov.b32 	%r420, %f745;
	or.b32  	%r421, %r419, %r420;
	mov.b32 	%f745, %r421;
LBB0_48:                                // %__nv_fmodf.exit1296
	add.f32 	%f383, %f745, %f745;
	mov.b32 	%r422, %f383;
	and.b32  	%r423, %r422, -2147483648;
	or.b32  	%r424, %r423, 1056964608;
	mov.b32 	%f384, %r424;
	add.f32 	%f385, %f383, %f384;
	cvt.rzi.f32.f32 	%f386, %f385;
	abs.f32 	%f387, %f383;
	setp.gt.f32 	%p81, %f387, 0f4B000000;
	selp.f32 	%f388, %f383, %f386, %p81;
	cvt.rzi.f32.f32 	%f389, %f383;
	setp.lt.f32 	%p82, %f387, 0f3F000000;
	selp.f32 	%f390, %f389, %f388, %p82;
	cvt.rzi.s32.f32 	%r425, %f390;
	fma.rn.f32 	%f391, %f390, 0fBF000000, %f745;
	mul.f32 	%f392, %f391, %f391;
	fma.rn.f32 	%f393, %f392, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f394, %f392, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f395, %f393, %f392, 0fC0A55DF6;
	fma.rn.f32 	%f396, %f394, %f392, 0f4081E0CF;
	fma.rn.f32 	%f397, %f392, %f391, 0f00000000;
	fma.rn.f32 	%f398, %f396, %f392, 0fC09DE9E6;
	fma.rn.f32 	%f399, %f395, %f397, 0f00000000;
	fma.rn.f32 	%f400, %f398, %f392, 0f3F800000;
	fma.rn.f32 	%f401, %f391, 0f40490FDB, %f399;
	and.b32  	%r426, %r425, 1;
	setp.eq.b32 	%p83, %r426, 1;
	selp.f32 	%f402, %f400, %f401, %p83;
	selp.f32 	%f403, %f401, %f400, %p83;
	and.b32  	%r427, %r425, 2;
	setp.eq.s32 	%p84, %r427, 0;
	neg.f32 	%f404, %f402;
	selp.f32 	%f405, %f402, %f404, %p84;
	add.s32 	%r428, %r425, 1;
	and.b32  	%r429, %r428, 2;
	setp.eq.s32 	%p85, %r429, 0;
	mov.f32 	%f406, 0f00000000;
	sub.f32 	%f407, %f406, %f403;
	selp.f32 	%f408, %f403, %f407, %p85;
	cvt.rzi.f32.f32 	%f409, %f745;
	setp.eq.f32 	%p86, %f409, %f745;
	mul.f32 	%f410, %f745, 0f00000000;
	selp.f32 	%f748, %f410, %f405, %p86;
	abs.f32 	%f411, %f745;
	setp.gt.f32 	%p87, %f411, 0f4B800000;
	add.f32 	%f412, %f748, 0f3F800000;
	selp.f32 	%f747, %f412, %f408, %p87;
LBB0_49:                                // %L304
	fma.rn.f32 	%f241, %f239, %f233, 0f3F800000;
	fma.rn.f32 	%f242, %f232, 0f40490FDB, %f240;
	setp.eq.b32 	%p19, %r365, 1;
	or.pred  	%p2, %p45, %p67;
	mov.f32 	%f753, %f223;
	mov.f32 	%f754, %f223;
	@%p2 bra 	LBB0_65;
// %bb.50:                              // %L312
	mul.hi.u32 	%r431, %r3706, -1431655765;
	shr.u32 	%r432, %r431, 2;
	mul.lo.s32 	%r433, %r432, 6;
	sub.s32 	%r434, %r3706, %r433;
	cvt.rn.f32.s32 	%f414, %r434;
	div.approx.f32 	%f66, %f414, %f730;
	abs.f32 	%f751, %f66;
	setp.lt.f32 	%p90, %f751, 0f40000000;
	@%p90 bra 	LBB0_62;
// %bb.51:
	setp.gtu.f32 	%p91, %f751, 0f4B800000;
	@%p91 bra 	LBB0_58;
	bra.uni 	LBB0_52;
LBB0_58:
	mov.b32 	%r34, %f751;
	and.b32  	%r435, %r34, 8388607;
	or.b32  	%r3714, %r435, 1065353216;
	mov.b32 	%f750, %r3714;
	add.s32 	%r436, %r34, -1073741824;
	and.b32  	%r3715, %r436, -8388608;
	setp.eq.s32 	%p97, %r3715, 0;
	@%p97 bra 	LBB0_61;
// %bb.59:                              // %.lr.ph2814.preheader
	mov.f32 	%f425, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f424,%f425;
	// end inline asm
LBB0_60:                                // %.lr.ph2814
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r437, %r3715, 192937984;
	add.s32 	%r438, %r437, %r3714;
	mov.b32 	%f426, %r438;
	mul.f32 	%f427, %f424, %f426;
	sub.f32 	%f428, %f426, %f427;
	fma.rn.f32 	%f429, %f428, %f424, %f427;
	sub.f32 	%f430, %f426, %f429;
	fma.rz.f32 	%f431, %f430, %f424, %f429;
	cvt.rzi.f32.f32 	%f432, %f431;
	sub.f32 	%f750, %f426, %f432;
	sub.s32 	%r3715, %r3715, %r437;
	mov.b32 	%r3714, %f750;
	setp.ne.s32 	%p98, %r3715, 0;
	setp.ne.s32 	%p99, %r3714, 0;
	and.pred  	%p100, %p98, %p99;
	@%p100 bra 	LBB0_60;
LBB0_61:                                // %__internal_fmodf_slowpath_mod.exit.i.i1343
	setp.gt.u32 	%p101, %r34, 2139095039;
	selp.f32 	%f433, 0f7FFFFFFF, 0f4B800000, %p101;
	mul.f32 	%f434, %f750, 0f34000000;
	mul.f32 	%f751, %f433, %f434;
	bra.uni 	LBB0_62;
LBB0_52:                                // %__nv_fast_fdividef.exit.i.i.i1309
	mov.f32 	%f416, 0f40000000;
	div.approx.f32 	%f417, %f751, %f416;
	cvt.rzi.f32.f32 	%f68, %f417;
	fma.rn.f32 	%f69, %f68, 0fC0000000, %f751;
	mov.b32 	%r33, %f69;
	setp.lt.u32 	%p92, %r33, 1073741824;
	mov.f32 	%f749, %f68;
	@%p92 bra 	LBB0_57;
// %bb.53:
	setp.lt.u32 	%p93, %r33, -2147483647;
	@%p93 bra 	LBB0_55;
// %bb.54:
	add.f32 	%f422, %f68, 0fBF800000;
	setp.lt.f32 	%p96, %f69, 0fC0000000;
	selp.f32 	%f423, %f422, %f68, %p96;
	add.f32 	%f749, %f423, 0fBF800000;
	bra.uni 	LBB0_57;
LBB0_55:
	add.f32 	%f749, %f68, 0f3F800000;
	setp.ltu.f32 	%p94, %f69, 0f40800000;
	@%p94 bra 	LBB0_57;
// %bb.56:                              // %__nv_fmaf_rn.exit.i.i.i1314
	fma.rn.f32 	%f419, %f416, 0fC0400000, %f69;
	setp.ge.f32 	%p95, %f419, 0f00000000;
	selp.f32 	%f420, %f749, %f68, %p95;
	add.f32 	%f421, %f420, 0f3F800000;
	add.f32 	%f749, %f421, 0f3F800000;
LBB0_57:                                // %__internal_fmodf_fastpath_quot.exit.i.i1317
	fma.rn.f32 	%f751, %f749, 0fC0000000, %f751;
LBB0_62:                                // %__internal_fmodf_kernel.exit.i1346
	abs.f32 	%f435, %f751;
	setp.gtu.f32 	%p102, %f435, 0f7F800000;
	@%p102 bra 	LBB0_64;
// %bb.63:
	mov.b32 	%r439, %f66;
	and.b32  	%r440, %r439, -2147483648;
	mov.b32 	%r441, %f751;
	or.b32  	%r442, %r440, %r441;
	mov.b32 	%f751, %r442;
LBB0_64:                                // %__nv_fmodf.exit1349
	add.f32 	%f436, %f751, %f751;
	mov.b32 	%r443, %f436;
	and.b32  	%r444, %r443, -2147483648;
	or.b32  	%r445, %r444, 1056964608;
	mov.b32 	%f437, %r445;
	add.f32 	%f438, %f436, %f437;
	cvt.rzi.f32.f32 	%f439, %f438;
	abs.f32 	%f440, %f436;
	setp.gt.f32 	%p103, %f440, 0f4B000000;
	selp.f32 	%f441, %f436, %f439, %p103;
	cvt.rzi.f32.f32 	%f442, %f436;
	setp.lt.f32 	%p104, %f440, 0f3F000000;
	selp.f32 	%f443, %f442, %f441, %p104;
	cvt.rzi.s32.f32 	%r446, %f443;
	fma.rn.f32 	%f444, %f443, 0fBF000000, %f751;
	mul.f32 	%f445, %f444, %f444;
	fma.rn.f32 	%f446, %f445, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f447, %f445, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f448, %f446, %f445, 0fC0A55DF6;
	fma.rn.f32 	%f449, %f447, %f445, 0f4081E0CF;
	fma.rn.f32 	%f450, %f445, %f444, 0f00000000;
	fma.rn.f32 	%f451, %f449, %f445, 0fC09DE9E6;
	fma.rn.f32 	%f452, %f448, %f450, 0f00000000;
	fma.rn.f32 	%f453, %f451, %f445, 0f3F800000;
	fma.rn.f32 	%f454, %f444, 0f40490FDB, %f452;
	and.b32  	%r447, %r446, 1;
	setp.eq.b32 	%p105, %r447, 1;
	selp.f32 	%f455, %f453, %f454, %p105;
	selp.f32 	%f456, %f454, %f453, %p105;
	and.b32  	%r448, %r446, 2;
	setp.eq.s32 	%p106, %r448, 0;
	neg.f32 	%f457, %f455;
	selp.f32 	%f458, %f455, %f457, %p106;
	add.s32 	%r449, %r446, 1;
	and.b32  	%r450, %r449, 2;
	setp.eq.s32 	%p107, %r450, 0;
	mov.f32 	%f459, 0f00000000;
	sub.f32 	%f460, %f459, %f456;
	selp.f32 	%f461, %f456, %f460, %p107;
	cvt.rzi.f32.f32 	%f462, %f751;
	setp.eq.f32 	%p108, %f462, %f751;
	mul.f32 	%f463, %f751, 0f00000000;
	selp.f32 	%f754, %f463, %f458, %p108;
	abs.f32 	%f464, %f751;
	setp.gt.f32 	%p109, %f464, 0f4B800000;
	add.f32 	%f465, %f754, 0f3F800000;
	selp.f32 	%f753, %f465, %f461, %p109;
LBB0_65:                                // %L328
	selp.f32 	%f243, %f241, %f242, %p19;
	and.b32  	%r366, %r364, 2;
	@%p4 bra 	LBB0_184;
// %bb.66:
	@%p244 bra 	LBB0_180;
	bra.uni 	LBB0_67;
LBB0_180:
	mov.b32 	%r276, %f785;
	and.b32  	%r463, %r276, 8388607;
	or.b32  	%r3811, %r463, 1065353216;
	mov.b32 	%f784, %r3811;
	add.s32 	%r464, %r276, -1073741824;
	and.b32  	%r3812, %r464, -8388608;
	setp.eq.s32 	%p117, %r3812, 0;
	@%p117 bra 	LBB0_183;
// %bb.181:                             // %.lr.ph2809.preheader
	mov.f32 	%f475, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f474,%f475;
	// end inline asm
LBB0_182:                               // %.lr.ph2809
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r465, %r3812, 192937984;
	add.s32 	%r466, %r465, %r3811;
	mov.b32 	%f476, %r466;
	mul.f32 	%f477, %f474, %f476;
	sub.f32 	%f478, %f476, %f477;
	fma.rn.f32 	%f479, %f478, %f474, %f477;
	sub.f32 	%f480, %f476, %f479;
	fma.rz.f32 	%f481, %f480, %f474, %f479;
	cvt.rzi.f32.f32 	%f482, %f481;
	sub.f32 	%f784, %f476, %f482;
	sub.s32 	%r3812, %r3812, %r465;
	mov.b32 	%r3811, %f784;
	setp.ne.s32 	%p118, %r3812, 0;
	setp.ne.s32 	%p119, %r3811, 0;
	and.pred  	%p120, %p118, %p119;
	@%p120 bra 	LBB0_182;
LBB0_183:                               // %__internal_fmodf_slowpath_mod.exit.i.i1661
	setp.gt.u32 	%p121, %r276, 2139095039;
	selp.f32 	%f483, 0f7FFFFFFF, 0f4B800000, %p121;
	mul.f32 	%f484, %f784, 0f34000000;
	mul.f32 	%f785, %f483, %f484;
	bra.uni 	LBB0_184;
LBB0_67:                                // %__nv_fast_fdividef.exit.i.i.i1627
	mov.f32 	%f466, 0f40000000;
	div.approx.f32 	%f467, %f785, %f466;
	cvt.rzi.f32.f32 	%f186, %f467;
	fma.rn.f32 	%f187, %f186, 0fC0000000, %f785;
	mov.b32 	%r275, %f187;
	setp.lt.u32 	%p112, %r275, 1073741824;
	mov.f32 	%f783, %f186;
	@%p112 bra 	LBB0_179;
// %bb.68:
	setp.lt.u32 	%p113, %r275, -2147483647;
	@%p113 bra 	LBB0_177;
// %bb.69:
	add.f32 	%f472, %f186, 0fBF800000;
	setp.lt.f32 	%p116, %f187, 0fC0000000;
	selp.f32 	%f473, %f472, %f186, %p116;
	add.f32 	%f783, %f473, 0fBF800000;
	bra.uni 	LBB0_179;
LBB0_177:
	add.f32 	%f783, %f186, 0f3F800000;
	setp.ltu.f32 	%p114, %f187, 0f40800000;
	@%p114 bra 	LBB0_179;
// %bb.178:                             // %__nv_fmaf_rn.exit.i.i.i1632
	fma.rn.f32 	%f469, %f466, 0fC0400000, %f187;
	setp.ge.f32 	%p115, %f469, 0f00000000;
	selp.f32 	%f470, %f783, %f186, %p115;
	add.f32 	%f471, %f470, 0f3F800000;
	add.f32 	%f783, %f471, 0f3F800000;
LBB0_179:                               // %__internal_fmodf_fastpath_quot.exit.i.i1635
	fma.rn.f32 	%f785, %f783, 0fC0000000, %f785;
LBB0_184:                               // %__internal_fmodf_kernel.exit.i1664
	setp.eq.s32 	%p20, %r366, 0;
	neg.f32 	%f245, %f243;
	add.s32 	%r367, %r364, 1;
	cvt.rzi.f32.f32 	%f249, %f781;
	abs.f32 	%f485, %f785;
	setp.gtu.f32 	%p122, %f485, 0f7F800000;
	@%p122 bra 	LBB0_186;
// %bb.185:
	mov.b32 	%r467, %f785;
	or.b32  	%r468, %r269, %r467;
	mov.b32 	%f785, %r468;
LBB0_186:                               // %__nv_fmodf.exit1667
	selp.f32 	%f244, %f242, %f241, %p19;
	selp.f32 	%f246, %f243, %f245, %p20;
	and.b32  	%r368, %r367, 2;
	setp.eq.f32 	%p22, %f249, %f781;
	mul.f32 	%f250, %f781, 0f00000000;
	add.f32 	%f487, %f785, %f785;
	mov.b32 	%r475, %f487;
	and.b32  	%r476, %r475, -2147483648;
	or.b32  	%r477, %r476, 1056964608;
	mov.b32 	%f488, %r477;
	add.f32 	%f489, %f487, %f488;
	cvt.rzi.f32.f32 	%f490, %f489;
	abs.f32 	%f491, %f487;
	setp.gt.f32 	%p124, %f491, 0f4B000000;
	selp.f32 	%f492, %f487, %f490, %p124;
	cvt.rzi.f32.f32 	%f493, %f487;
	setp.lt.f32 	%p125, %f491, 0f3F000000;
	selp.f32 	%f494, %f493, %f492, %p125;
	cvt.rzi.s32.f32 	%r478, %f494;
	fma.rn.f32 	%f495, %f494, 0fBF000000, %f785;
	mul.f32 	%f496, %f495, %f495;
	fma.rn.f32 	%f497, %f496, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f498, %f496, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f499, %f497, %f496, 0fC0A55DF6;
	fma.rn.f32 	%f500, %f498, %f496, 0f4081E0CF;
	fma.rn.f32 	%f501, %f496, %f495, 0f00000000;
	fma.rn.f32 	%f502, %f500, %f496, 0fC09DE9E6;
	fma.rn.f32 	%f503, %f499, %f501, 0f00000000;
	fma.rn.f32 	%f504, %f502, %f496, 0f3F800000;
	fma.rn.f32 	%f505, %f495, 0f40490FDB, %f503;
	and.b32  	%r479, %r478, 1;
	setp.eq.b32 	%p126, %r479, 1;
	selp.f32 	%f506, %f504, %f505, %p126;
	selp.f32 	%f507, %f505, %f504, %p126;
	and.b32  	%r480, %r478, 2;
	setp.eq.s32 	%p127, %r480, 0;
	neg.f32 	%f508, %f506;
	selp.f32 	%f509, %f506, %f508, %p127;
	add.s32 	%r481, %r478, 1;
	and.b32  	%r482, %r481, 2;
	mov.f32 	%f777, 0f00000000;
	cvt.rzi.f32.f32 	%f512, %f785;
	setp.eq.f32 	%p129, %f512, %f785;
	mul.f32 	%f513, %f785, 0f00000000;
	mov.f32 	%f759, %f777;
	mov.f32 	%f760, %f777;
	@%p24 bra 	LBB0_85;
// %bb.70:                              // %L424
	cvt.u16.u32 	%rs17, %r3705;
	and.b16  	%rs18, %rs17, 255;
	mul.lo.s16 	%rs19, %rs18, 171;
	shr.u16 	%rs20, %rs19, 13;
	mul.lo.s16 	%rs21, %rs20, 48;
	sub.s16 	%rs22, %rs17, %rs21;
	and.b16  	%rs23, %rs22, 255;
	cvt.rn.f32.u16 	%f518, %rs23;
	div.approx.f32 	%f87, %f518, %f729;
	abs.f32 	%f757, %f87;
	setp.lt.f32 	%p131, %f757, 0f40000000;
	@%p131 bra 	LBB0_82;
// %bb.71:
	setp.gtu.f32 	%p132, %f757, 0f4B800000;
	@%p132 bra 	LBB0_78;
	bra.uni 	LBB0_72;
LBB0_78:
	mov.b32 	%r46, %f757;
	and.b32  	%r484, %r46, 8388607;
	or.b32  	%r3716, %r484, 1065353216;
	mov.b32 	%f756, %r3716;
	add.s32 	%r485, %r46, -1073741824;
	and.b32  	%r3717, %r485, -8388608;
	setp.eq.s32 	%p138, %r3717, 0;
	@%p138 bra 	LBB0_81;
// %bb.79:                              // %.lr.ph2804.preheader
	mov.f32 	%f529, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f528,%f529;
	// end inline asm
LBB0_80:                                // %.lr.ph2804
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r486, %r3717, 192937984;
	add.s32 	%r487, %r486, %r3716;
	mov.b32 	%f530, %r487;
	mul.f32 	%f531, %f528, %f530;
	sub.f32 	%f532, %f530, %f531;
	fma.rn.f32 	%f533, %f532, %f528, %f531;
	sub.f32 	%f534, %f530, %f533;
	fma.rz.f32 	%f535, %f534, %f528, %f533;
	cvt.rzi.f32.f32 	%f536, %f535;
	sub.f32 	%f756, %f530, %f536;
	sub.s32 	%r3717, %r3717, %r486;
	mov.b32 	%r3716, %f756;
	setp.ne.s32 	%p139, %r3717, 0;
	setp.ne.s32 	%p140, %r3716, 0;
	and.pred  	%p141, %p139, %p140;
	@%p141 bra 	LBB0_80;
LBB0_81:                                // %__internal_fmodf_slowpath_mod.exit.i.i1396
	setp.gt.u32 	%p142, %r46, 2139095039;
	selp.f32 	%f537, 0f7FFFFFFF, 0f4B800000, %p142;
	mul.f32 	%f538, %f756, 0f34000000;
	mul.f32 	%f757, %f537, %f538;
	bra.uni 	LBB0_82;
LBB0_72:                                // %__nv_fast_fdividef.exit.i.i.i1362
	mov.f32 	%f520, 0f40000000;
	div.approx.f32 	%f521, %f757, %f520;
	cvt.rzi.f32.f32 	%f89, %f521;
	fma.rn.f32 	%f90, %f89, 0fC0000000, %f757;
	mov.b32 	%r45, %f90;
	setp.lt.u32 	%p133, %r45, 1073741824;
	mov.f32 	%f755, %f89;
	@%p133 bra 	LBB0_77;
// %bb.73:
	setp.lt.u32 	%p134, %r45, -2147483647;
	@%p134 bra 	LBB0_75;
// %bb.74:
	add.f32 	%f526, %f89, 0fBF800000;
	setp.lt.f32 	%p137, %f90, 0fC0000000;
	selp.f32 	%f527, %f526, %f89, %p137;
	add.f32 	%f755, %f527, 0fBF800000;
	bra.uni 	LBB0_77;
LBB0_75:
	add.f32 	%f755, %f89, 0f3F800000;
	setp.ltu.f32 	%p135, %f90, 0f40800000;
	@%p135 bra 	LBB0_77;
// %bb.76:                              // %__nv_fmaf_rn.exit.i.i.i1367
	fma.rn.f32 	%f523, %f520, 0fC0400000, %f90;
	setp.ge.f32 	%p136, %f523, 0f00000000;
	selp.f32 	%f524, %f755, %f89, %p136;
	add.f32 	%f525, %f524, 0f3F800000;
	add.f32 	%f755, %f525, 0f3F800000;
LBB0_77:                                // %__internal_fmodf_fastpath_quot.exit.i.i1370
	fma.rn.f32 	%f757, %f755, 0fC0000000, %f757;
LBB0_82:                                // %__internal_fmodf_kernel.exit.i1399
	abs.f32 	%f539, %f757;
	setp.gtu.f32 	%p143, %f539, 0f7F800000;
	@%p143 bra 	LBB0_84;
// %bb.83:
	mov.b32 	%r488, %f87;
	and.b32  	%r489, %r488, -2147483648;
	mov.b32 	%r490, %f757;
	or.b32  	%r491, %r489, %r490;
	mov.b32 	%f757, %r491;
LBB0_84:                                // %__nv_fmodf.exit1402
	add.f32 	%f540, %f757, %f757;
	mov.b32 	%r492, %f540;
	and.b32  	%r493, %r492, -2147483648;
	or.b32  	%r494, %r493, 1056964608;
	mov.b32 	%f541, %r494;
	add.f32 	%f542, %f540, %f541;
	cvt.rzi.f32.f32 	%f543, %f542;
	abs.f32 	%f544, %f540;
	setp.gt.f32 	%p144, %f544, 0f4B000000;
	selp.f32 	%f545, %f540, %f543, %p144;
	cvt.rzi.f32.f32 	%f546, %f540;
	setp.lt.f32 	%p145, %f544, 0f3F000000;
	selp.f32 	%f547, %f546, %f545, %p145;
	cvt.rzi.s32.f32 	%r495, %f547;
	fma.rn.f32 	%f548, %f547, 0fBF000000, %f757;
	mul.f32 	%f549, %f548, %f548;
	fma.rn.f32 	%f550, %f549, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f551, %f549, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f552, %f550, %f549, 0fC0A55DF6;
	fma.rn.f32 	%f553, %f551, %f549, 0f4081E0CF;
	fma.rn.f32 	%f554, %f549, %f548, 0f00000000;
	fma.rn.f32 	%f555, %f553, %f549, 0fC09DE9E6;
	fma.rn.f32 	%f556, %f552, %f554, 0f00000000;
	fma.rn.f32 	%f557, %f555, %f549, 0f3F800000;
	fma.rn.f32 	%f558, %f548, 0f40490FDB, %f556;
	and.b32  	%r496, %r495, 1;
	setp.eq.b32 	%p146, %r496, 1;
	selp.f32 	%f559, %f557, %f558, %p146;
	selp.f32 	%f560, %f558, %f557, %p146;
	and.b32  	%r497, %r495, 2;
	setp.eq.s32 	%p147, %r497, 0;
	neg.f32 	%f561, %f559;
	selp.f32 	%f562, %f559, %f561, %p147;
	add.s32 	%r498, %r495, 1;
	and.b32  	%r499, %r498, 2;
	setp.eq.s32 	%p148, %r499, 0;
	mov.f32 	%f563, 0f00000000;
	sub.f32 	%f564, %f563, %f560;
	selp.f32 	%f565, %f560, %f564, %p148;
	cvt.rzi.f32.f32 	%f566, %f757;
	setp.eq.f32 	%p149, %f566, %f757;
	mul.f32 	%f567, %f757, 0f00000000;
	selp.f32 	%f760, %f567, %f562, %p149;
	abs.f32 	%f568, %f757;
	setp.gt.f32 	%p150, %f568, 0f4B800000;
	add.f32 	%f569, %f760, 0f3F800000;
	selp.f32 	%f759, %f569, %f565, %p150;
LBB0_85:                                // %L440
	setp.eq.s32 	%p21, %r368, 0;
	sub.f32 	%f247, %f223, %f244;
	selp.f32 	%f251, %f250, %f246, %p22;
	abs.f32 	%f252, %f781;
	setp.eq.s32 	%p128, %r482, 0;
	sub.f32 	%f510, %f777, %f507;
	selp.f32 	%f514, %f513, %f509, %p129;
	abs.f32 	%f515, %f785;
	mov.f32 	%f765, %f777;
	mov.f32 	%f766, %f777;
	@%p45 bra 	LBB0_101;
// %bb.86:                              // %L444
	mul.hi.u32 	%r501, %r3706, -1431655765;
	shr.u32 	%r502, %r501, 5;
	mul.lo.s32 	%r503, %r502, 48;
	sub.s32 	%r504, %r3706, %r503;
	cvt.rn.f32.s32 	%f571, %r504;
	div.approx.f32 	%f108, %f571, %f729;
	abs.f32 	%f763, %f108;
	setp.lt.f32 	%p152, %f763, 0f40000000;
	@%p152 bra 	LBB0_98;
// %bb.87:
	setp.gtu.f32 	%p153, %f763, 0f4B800000;
	@%p153 bra 	LBB0_94;
	bra.uni 	LBB0_88;
LBB0_94:
	mov.b32 	%r54, %f763;
	and.b32  	%r505, %r54, 8388607;
	or.b32  	%r3718, %r505, 1065353216;
	mov.b32 	%f762, %r3718;
	add.s32 	%r506, %r54, -1073741824;
	and.b32  	%r3719, %r506, -8388608;
	setp.eq.s32 	%p159, %r3719, 0;
	@%p159 bra 	LBB0_97;
// %bb.95:                              // %.lr.ph2799.preheader
	mov.f32 	%f582, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f581,%f582;
	// end inline asm
LBB0_96:                                // %.lr.ph2799
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r507, %r3719, 192937984;
	add.s32 	%r508, %r507, %r3718;
	mov.b32 	%f583, %r508;
	mul.f32 	%f584, %f581, %f583;
	sub.f32 	%f585, %f583, %f584;
	fma.rn.f32 	%f586, %f585, %f581, %f584;
	sub.f32 	%f587, %f583, %f586;
	fma.rz.f32 	%f588, %f587, %f581, %f586;
	cvt.rzi.f32.f32 	%f589, %f588;
	sub.f32 	%f762, %f583, %f589;
	sub.s32 	%r3719, %r3719, %r507;
	mov.b32 	%r3718, %f762;
	setp.ne.s32 	%p160, %r3719, 0;
	setp.ne.s32 	%p161, %r3718, 0;
	and.pred  	%p162, %p160, %p161;
	@%p162 bra 	LBB0_96;
LBB0_97:                                // %__internal_fmodf_slowpath_mod.exit.i.i1449
	setp.gt.u32 	%p163, %r54, 2139095039;
	selp.f32 	%f590, 0f7FFFFFFF, 0f4B800000, %p163;
	mul.f32 	%f591, %f762, 0f34000000;
	mul.f32 	%f763, %f590, %f591;
	bra.uni 	LBB0_98;
LBB0_88:                                // %__nv_fast_fdividef.exit.i.i.i1415
	mov.f32 	%f573, 0f40000000;
	div.approx.f32 	%f574, %f763, %f573;
	cvt.rzi.f32.f32 	%f110, %f574;
	fma.rn.f32 	%f111, %f110, 0fC0000000, %f763;
	mov.b32 	%r53, %f111;
	setp.lt.u32 	%p154, %r53, 1073741824;
	mov.f32 	%f761, %f110;
	@%p154 bra 	LBB0_93;
// %bb.89:
	setp.lt.u32 	%p155, %r53, -2147483647;
	@%p155 bra 	LBB0_91;
// %bb.90:
	add.f32 	%f579, %f110, 0fBF800000;
	setp.lt.f32 	%p158, %f111, 0fC0000000;
	selp.f32 	%f580, %f579, %f110, %p158;
	add.f32 	%f761, %f580, 0fBF800000;
	bra.uni 	LBB0_93;
LBB0_91:
	add.f32 	%f761, %f110, 0f3F800000;
	setp.ltu.f32 	%p156, %f111, 0f40800000;
	@%p156 bra 	LBB0_93;
// %bb.92:                              // %__nv_fmaf_rn.exit.i.i.i1420
	fma.rn.f32 	%f576, %f573, 0fC0400000, %f111;
	setp.ge.f32 	%p157, %f576, 0f00000000;
	selp.f32 	%f577, %f761, %f110, %p157;
	add.f32 	%f578, %f577, 0f3F800000;
	add.f32 	%f761, %f578, 0f3F800000;
LBB0_93:                                // %__internal_fmodf_fastpath_quot.exit.i.i1423
	fma.rn.f32 	%f763, %f761, 0fC0000000, %f763;
LBB0_98:                                // %__internal_fmodf_kernel.exit.i1452
	abs.f32 	%f592, %f763;
	setp.gtu.f32 	%p164, %f592, 0f7F800000;
	@%p164 bra 	LBB0_100;
// %bb.99:
	mov.b32 	%r509, %f108;
	and.b32  	%r510, %r509, -2147483648;
	mov.b32 	%r511, %f763;
	or.b32  	%r512, %r510, %r511;
	mov.b32 	%f763, %r512;
LBB0_100:                               // %__nv_fmodf.exit1455
	add.f32 	%f593, %f763, %f763;
	mov.b32 	%r513, %f593;
	and.b32  	%r514, %r513, -2147483648;
	or.b32  	%r515, %r514, 1056964608;
	mov.b32 	%f594, %r515;
	add.f32 	%f595, %f593, %f594;
	cvt.rzi.f32.f32 	%f596, %f595;
	abs.f32 	%f597, %f593;
	setp.gt.f32 	%p165, %f597, 0f4B000000;
	selp.f32 	%f598, %f593, %f596, %p165;
	cvt.rzi.f32.f32 	%f599, %f593;
	setp.lt.f32 	%p166, %f597, 0f3F000000;
	selp.f32 	%f600, %f599, %f598, %p166;
	cvt.rzi.s32.f32 	%r516, %f600;
	fma.rn.f32 	%f601, %f600, 0fBF000000, %f763;
	mul.f32 	%f602, %f601, %f601;
	fma.rn.f32 	%f603, %f602, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f604, %f602, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f605, %f603, %f602, 0fC0A55DF6;
	fma.rn.f32 	%f606, %f604, %f602, 0f4081E0CF;
	fma.rn.f32 	%f607, %f602, %f601, 0f00000000;
	fma.rn.f32 	%f608, %f606, %f602, 0fC09DE9E6;
	fma.rn.f32 	%f609, %f605, %f607, 0f00000000;
	fma.rn.f32 	%f610, %f608, %f602, 0f3F800000;
	fma.rn.f32 	%f611, %f601, 0f40490FDB, %f609;
	and.b32  	%r517, %r516, 1;
	setp.eq.b32 	%p167, %r517, 1;
	selp.f32 	%f612, %f610, %f611, %p167;
	selp.f32 	%f613, %f611, %f610, %p167;
	and.b32  	%r518, %r516, 2;
	setp.eq.s32 	%p168, %r518, 0;
	neg.f32 	%f614, %f612;
	selp.f32 	%f615, %f612, %f614, %p168;
	add.s32 	%r519, %r516, 1;
	and.b32  	%r520, %r519, 2;
	setp.eq.s32 	%p169, %r520, 0;
	mov.f32 	%f616, 0f00000000;
	sub.f32 	%f617, %f616, %f613;
	selp.f32 	%f618, %f613, %f617, %p169;
	cvt.rzi.f32.f32 	%f619, %f763;
	setp.eq.f32 	%p170, %f619, %f763;
	mul.f32 	%f620, %f763, 0f00000000;
	selp.f32 	%f766, %f620, %f615, %p170;
	abs.f32 	%f621, %f763;
	setp.gt.f32 	%p171, %f621, 0f4B800000;
	add.f32 	%f622, %f766, 0f3F800000;
	selp.f32 	%f765, %f622, %f618, %p171;
LBB0_101:                               // %L460
	selp.f32 	%f248, %f244, %f247, %p21;
	setp.gt.f32 	%p23, %f252, 0f4B800000;
	add.f32 	%f253, %f251, 0f3F800000;
	selp.f32 	%f511, %f507, %f510, %p128;
	setp.gt.f32 	%p130, %f515, 0f4B800000;
	add.f32 	%f516, %f514, 0f3F800000;
	mov.f32 	%f771, %f777;
	mov.f32 	%f772, %f777;
	@%p1 bra 	LBB0_117;
// %bb.102:                             // %L503
	cvt.u16.u32 	%rs24, %r3705;
	and.b16  	%rs25, %rs24, 255;
	mul.lo.s16 	%rs26, %rs25, 171;
	shr.u16 	%rs27, %rs26, 10;
	mul.lo.s16 	%rs28, %rs27, 6;
	sub.s16 	%rs29, %rs24, %rs28;
	and.b16  	%rs30, %rs29, 255;
	cvt.rn.f32.u16 	%f624, %rs30;
	div.approx.f32 	%f129, %f624, %f730;
	abs.f32 	%f769, %f129;
	setp.lt.f32 	%p172, %f769, 0f40000000;
	@%p172 bra 	LBB0_114;
// %bb.103:
	setp.gtu.f32 	%p173, %f769, 0f4B800000;
	@%p173 bra 	LBB0_110;
	bra.uni 	LBB0_104;
LBB0_110:
	mov.b32 	%r64, %f769;
	and.b32  	%r528, %r64, 8388607;
	or.b32  	%r3720, %r528, 1065353216;
	mov.b32 	%f768, %r3720;
	add.s32 	%r529, %r64, -1073741824;
	and.b32  	%r3721, %r529, -8388608;
	setp.eq.s32 	%p179, %r3721, 0;
	@%p179 bra 	LBB0_113;
// %bb.111:                             // %.lr.ph2794.preheader
	mov.f32 	%f635, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f634,%f635;
	// end inline asm
LBB0_112:                               // %.lr.ph2794
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r530, %r3721, 192937984;
	add.s32 	%r531, %r530, %r3720;
	mov.b32 	%f636, %r531;
	mul.f32 	%f637, %f634, %f636;
	sub.f32 	%f638, %f636, %f637;
	fma.rn.f32 	%f639, %f638, %f634, %f637;
	sub.f32 	%f640, %f636, %f639;
	fma.rz.f32 	%f641, %f640, %f634, %f639;
	cvt.rzi.f32.f32 	%f642, %f641;
	sub.f32 	%f768, %f636, %f642;
	sub.s32 	%r3721, %r3721, %r530;
	mov.b32 	%r3720, %f768;
	setp.ne.s32 	%p180, %r3721, 0;
	setp.ne.s32 	%p181, %r3720, 0;
	and.pred  	%p182, %p180, %p181;
	@%p182 bra 	LBB0_112;
LBB0_113:                               // %__internal_fmodf_slowpath_mod.exit.i.i1502
	setp.gt.u32 	%p183, %r64, 2139095039;
	selp.f32 	%f643, 0f7FFFFFFF, 0f4B800000, %p183;
	mul.f32 	%f644, %f768, 0f34000000;
	mul.f32 	%f769, %f643, %f644;
	bra.uni 	LBB0_114;
LBB0_104:                               // %__nv_fast_fdividef.exit.i.i.i1468
	mov.f32 	%f626, 0f40000000;
	div.approx.f32 	%f627, %f769, %f626;
	cvt.rzi.f32.f32 	%f131, %f627;
	fma.rn.f32 	%f132, %f131, 0fC0000000, %f769;
	mov.b32 	%r63, %f132;
	setp.lt.u32 	%p174, %r63, 1073741824;
	mov.f32 	%f767, %f131;
	@%p174 bra 	LBB0_109;
// %bb.105:
	setp.lt.u32 	%p175, %r63, -2147483647;
	@%p175 bra 	LBB0_107;
// %bb.106:
	add.f32 	%f632, %f131, 0fBF800000;
	setp.lt.f32 	%p178, %f132, 0fC0000000;
	selp.f32 	%f633, %f632, %f131, %p178;
	add.f32 	%f767, %f633, 0fBF800000;
	bra.uni 	LBB0_109;
LBB0_107:
	add.f32 	%f767, %f131, 0f3F800000;
	setp.ltu.f32 	%p176, %f132, 0f40800000;
	@%p176 bra 	LBB0_109;
// %bb.108:                             // %__nv_fmaf_rn.exit.i.i.i1473
	fma.rn.f32 	%f629, %f626, 0fC0400000, %f132;
	setp.ge.f32 	%p177, %f629, 0f00000000;
	selp.f32 	%f630, %f767, %f131, %p177;
	add.f32 	%f631, %f630, 0f3F800000;
	add.f32 	%f767, %f631, 0f3F800000;
LBB0_109:                               // %__internal_fmodf_fastpath_quot.exit.i.i1476
	fma.rn.f32 	%f769, %f767, 0fC0000000, %f769;
LBB0_114:                               // %__internal_fmodf_kernel.exit.i1505
	abs.f32 	%f645, %f769;
	setp.gtu.f32 	%p184, %f645, 0f7F800000;
	@%p184 bra 	LBB0_116;
// %bb.115:
	mov.b32 	%r532, %f129;
	and.b32  	%r533, %r532, -2147483648;
	mov.b32 	%r534, %f769;
	or.b32  	%r535, %r533, %r534;
	mov.b32 	%f769, %r535;
LBB0_116:                               // %__nv_fmodf.exit1508
	add.f32 	%f646, %f769, %f769;
	mov.b32 	%r536, %f646;
	and.b32  	%r537, %r536, -2147483648;
	or.b32  	%r538, %r537, 1056964608;
	mov.b32 	%f647, %r538;
	add.f32 	%f648, %f646, %f647;
	cvt.rzi.f32.f32 	%f649, %f648;
	abs.f32 	%f650, %f646;
	setp.gt.f32 	%p185, %f650, 0f4B000000;
	selp.f32 	%f651, %f646, %f649, %p185;
	cvt.rzi.f32.f32 	%f652, %f646;
	setp.lt.f32 	%p186, %f650, 0f3F000000;
	selp.f32 	%f653, %f652, %f651, %p186;
	cvt.rzi.s32.f32 	%r539, %f653;
	fma.rn.f32 	%f654, %f653, 0fBF000000, %f769;
	mul.f32 	%f655, %f654, %f654;
	fma.rn.f32 	%f656, %f655, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f657, %f655, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f658, %f656, %f655, 0fC0A55DF6;
	fma.rn.f32 	%f659, %f657, %f655, 0f4081E0CF;
	fma.rn.f32 	%f660, %f655, %f654, 0f00000000;
	fma.rn.f32 	%f661, %f659, %f655, 0fC09DE9E6;
	fma.rn.f32 	%f662, %f658, %f660, 0f00000000;
	fma.rn.f32 	%f663, %f661, %f655, 0f3F800000;
	fma.rn.f32 	%f664, %f654, 0f40490FDB, %f662;
	and.b32  	%r540, %r539, 1;
	setp.eq.b32 	%p187, %r540, 1;
	selp.f32 	%f665, %f663, %f664, %p187;
	selp.f32 	%f666, %f664, %f663, %p187;
	and.b32  	%r541, %r539, 2;
	setp.eq.s32 	%p188, %r541, 0;
	neg.f32 	%f667, %f665;
	selp.f32 	%f668, %f665, %f667, %p188;
	add.s32 	%r542, %r539, 1;
	and.b32  	%r543, %r542, 2;
	setp.eq.s32 	%p189, %r543, 0;
	mov.f32 	%f669, 0f00000000;
	sub.f32 	%f670, %f669, %f666;
	selp.f32 	%f671, %f666, %f670, %p189;
	cvt.rzi.f32.f32 	%f672, %f769;
	setp.eq.f32 	%p190, %f672, %f769;
	mul.f32 	%f673, %f769, 0f00000000;
	selp.f32 	%f772, %f673, %f668, %p190;
	abs.f32 	%f674, %f769;
	setp.gt.f32 	%p191, %f674, 0f4B800000;
	add.f32 	%f675, %f772, 0f3F800000;
	selp.f32 	%f771, %f675, %f671, %p191;
LBB0_117:                               // %L519
	selp.f32 	%f254, %f253, %f248, %p23;
	selp.f32 	%f517, %f516, %f511, %p130;
	mov.f32 	%f778, %f777;
	@%p2 bra 	LBB0_133;
// %bb.118:                             // %L527
	mul.hi.u32 	%r545, %r3706, -1431655765;
	shr.u32 	%r546, %r545, 2;
	mul.lo.s32 	%r547, %r546, 6;
	sub.s32 	%r548, %r3706, %r547;
	cvt.rn.f32.s32 	%f677, %r548;
	div.approx.f32 	%f150, %f677, %f730;
	abs.f32 	%f775, %f150;
	setp.lt.f32 	%p192, %f775, 0f40000000;
	@%p192 bra 	LBB0_130;
// %bb.119:
	setp.gtu.f32 	%p193, %f775, 0f4B800000;
	@%p193 bra 	LBB0_126;
	bra.uni 	LBB0_120;
LBB0_126:
	mov.b32 	%r72, %f775;
	and.b32  	%r549, %r72, 8388607;
	or.b32  	%r3722, %r549, 1065353216;
	mov.b32 	%f774, %r3722;
	add.s32 	%r550, %r72, -1073741824;
	and.b32  	%r3723, %r550, -8388608;
	setp.eq.s32 	%p199, %r3723, 0;
	@%p199 bra 	LBB0_129;
// %bb.127:                             // %.lr.ph.preheader
	mov.f32 	%f688, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f687,%f688;
	// end inline asm
LBB0_128:                               // %.lr.ph
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r551, %r3723, 192937984;
	add.s32 	%r552, %r551, %r3722;
	mov.b32 	%f689, %r552;
	mul.f32 	%f690, %f687, %f689;
	sub.f32 	%f691, %f689, %f690;
	fma.rn.f32 	%f692, %f691, %f687, %f690;
	sub.f32 	%f693, %f689, %f692;
	fma.rz.f32 	%f694, %f693, %f687, %f692;
	cvt.rzi.f32.f32 	%f695, %f694;
	sub.f32 	%f774, %f689, %f695;
	sub.s32 	%r3723, %r3723, %r551;
	mov.b32 	%r3722, %f774;
	setp.ne.s32 	%p200, %r3723, 0;
	setp.ne.s32 	%p201, %r3722, 0;
	and.pred  	%p202, %p200, %p201;
	@%p202 bra 	LBB0_128;
LBB0_129:                               // %__internal_fmodf_slowpath_mod.exit.i.i1555
	setp.gt.u32 	%p203, %r72, 2139095039;
	selp.f32 	%f696, 0f7FFFFFFF, 0f4B800000, %p203;
	mul.f32 	%f697, %f774, 0f34000000;
	mul.f32 	%f775, %f696, %f697;
	bra.uni 	LBB0_130;
LBB0_120:                               // %__nv_fast_fdividef.exit.i.i.i1521
	mov.f32 	%f679, 0f40000000;
	div.approx.f32 	%f680, %f775, %f679;
	cvt.rzi.f32.f32 	%f152, %f680;
	fma.rn.f32 	%f153, %f152, 0fC0000000, %f775;
	mov.b32 	%r71, %f153;
	setp.lt.u32 	%p194, %r71, 1073741824;
	mov.f32 	%f773, %f152;
	@%p194 bra 	LBB0_125;
// %bb.121:
	setp.lt.u32 	%p195, %r71, -2147483647;
	@%p195 bra 	LBB0_123;
// %bb.122:
	add.f32 	%f685, %f152, 0fBF800000;
	setp.lt.f32 	%p198, %f153, 0fC0000000;
	selp.f32 	%f686, %f685, %f152, %p198;
	add.f32 	%f773, %f686, 0fBF800000;
	bra.uni 	LBB0_125;
LBB0_123:
	add.f32 	%f773, %f152, 0f3F800000;
	setp.ltu.f32 	%p196, %f153, 0f40800000;
	@%p196 bra 	LBB0_125;
// %bb.124:                             // %__nv_fmaf_rn.exit.i.i.i1526
	fma.rn.f32 	%f682, %f679, 0fC0400000, %f153;
	setp.ge.f32 	%p197, %f682, 0f00000000;
	selp.f32 	%f683, %f773, %f152, %p197;
	add.f32 	%f684, %f683, 0f3F800000;
	add.f32 	%f773, %f684, 0f3F800000;
LBB0_125:                               // %__internal_fmodf_fastpath_quot.exit.i.i1529
	fma.rn.f32 	%f775, %f773, 0fC0000000, %f775;
LBB0_130:                               // %__internal_fmodf_kernel.exit.i1558
	abs.f32 	%f698, %f775;
	setp.gtu.f32 	%p204, %f698, 0f7F800000;
	@%p204 bra 	LBB0_132;
// %bb.131:
	mov.b32 	%r553, %f150;
	and.b32  	%r554, %r553, -2147483648;
	mov.b32 	%r555, %f775;
	or.b32  	%r556, %r554, %r555;
	mov.b32 	%f775, %r556;
LBB0_132:                               // %__nv_fmodf.exit1561
	add.f32 	%f699, %f775, %f775;
	mov.b32 	%r557, %f699;
	and.b32  	%r558, %r557, -2147483648;
	or.b32  	%r559, %r558, 1056964608;
	mov.b32 	%f700, %r559;
	add.f32 	%f701, %f699, %f700;
	cvt.rzi.f32.f32 	%f702, %f701;
	abs.f32 	%f703, %f699;
	setp.gt.f32 	%p205, %f703, 0f4B000000;
	selp.f32 	%f704, %f699, %f702, %p205;
	cvt.rzi.f32.f32 	%f705, %f699;
	setp.lt.f32 	%p206, %f703, 0f3F000000;
	selp.f32 	%f706, %f705, %f704, %p206;
	cvt.rzi.s32.f32 	%r560, %f706;
	fma.rn.f32 	%f707, %f706, 0fBF000000, %f775;
	mul.f32 	%f708, %f707, %f707;
	fma.rn.f32 	%f709, %f708, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f710, %f708, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f711, %f709, %f708, 0fC0A55DF6;
	fma.rn.f32 	%f712, %f710, %f708, 0f4081E0CF;
	fma.rn.f32 	%f713, %f708, %f707, 0f00000000;
	fma.rn.f32 	%f714, %f712, %f708, 0fC09DE9E6;
	fma.rn.f32 	%f715, %f711, %f713, 0f00000000;
	fma.rn.f32 	%f716, %f714, %f708, 0f3F800000;
	fma.rn.f32 	%f717, %f707, 0f40490FDB, %f715;
	and.b32  	%r561, %r560, 1;
	setp.eq.b32 	%p207, %r561, 1;
	selp.f32 	%f718, %f716, %f717, %p207;
	selp.f32 	%f719, %f717, %f716, %p207;
	and.b32  	%r562, %r560, 2;
	setp.eq.s32 	%p208, %r562, 0;
	neg.f32 	%f720, %f718;
	selp.f32 	%f721, %f718, %f720, %p208;
	add.s32 	%r563, %r560, 1;
	and.b32  	%r564, %r563, 2;
	setp.eq.s32 	%p209, %r564, 0;
	mov.f32 	%f722, 0f00000000;
	sub.f32 	%f723, %f722, %f719;
	selp.f32 	%f724, %f719, %f723, %p209;
	cvt.rzi.f32.f32 	%f725, %f775;
	setp.eq.f32 	%p210, %f725, %f775;
	mul.f32 	%f726, %f775, 0f00000000;
	selp.f32 	%f778, %f726, %f721, %p210;
	abs.f32 	%f727, %f775;
	setp.gt.f32 	%p211, %f727, 0f4B800000;
	add.f32 	%f728, %f778, 0f3F800000;
	selp.f32 	%f777, %f728, %f724, %p211;
LBB0_133:                               // %L543
	mov.b32 	%r357, %f254;
	mov.b32 	%r360, %f251;
	mov.b32 	%r452, %f747;
	mov.b32 	%r453, %f753;
	mov.b32 	%r458, %f748;
	mov.b32 	%r459, %f754;
	mov.b32 	%r471, %f517;
	mov.b32 	%r474, %f514;
	mov.b32 	%r566, %f771;
	mov.b32 	%r567, %f777;
	mov.b32 	%r572, %f772;
	mov.b32 	%r573, %f778;
	mov.u32 	%r3724, 999999999;
	cvt.u16.u32 	%rs295, %r4;
	@%p67 bra 	LBB0_135;
// %bb.134:                             // %L586
	ld.param.u64 	%rd1, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_1];
	and.b16  	%rs32, %rs295, 255;
	mul.lo.s16 	%rs33, %rs32, 171;
	shr.u16 	%rs34, %rs33, 12;
	mul.lo.s16 	%rs35, %rs34, 24;
	sub.s16 	%rs36, %rs295, %rs35;
	cvt.u32.u16 	%r578, %rs36;
	and.b32  	%r579, %r578, 255;
	mad.lo.s32 	%r580, %r579, 24, %r1;
	cvt.u16.u32 	%rs37, %r580;
	mul.hi.u16 	%rs38, %rs37, -7281;
	shr.u16 	%rs39, %rs38, 9;
	mul.lo.s16 	%rs40, %rs39, 576;
	sub.s16 	%rs41, %rs37, %rs40;
	cvt.u32.u16 	%r581, %rs41;
	mul.wide.u32 	%rd23, %r581, 4;
	add.s64 	%rd24, %rd1, %rd23;
	ld.global.u32 	%r582, [%rd24];
	cvt.s32.s16 	%r583, %r582;
	shr.s32 	%r584, %r582, 16;
	mul.lo.s32 	%r585, %r584, 801;
	mad.lo.s32 	%r3724, %r583, 33, %r585;
LBB0_135:                               // %L672
	xor.b32  	%r356, %r360, -2147483648;
	mov.b32 	%r408, %f735;
	mov.b32 	%r409, %f741;
	mov.b32 	%r411, %f736;
	mov.b32 	%r412, %f742;
	xor.b32  	%r455, %r458, -2147483648;
	xor.b32  	%r456, %r459, -2147483648;
	xor.b32  	%r470, %r474, -2147483648;
	mov.b32 	%r522, %f759;
	mov.b32 	%r523, %f765;
	mov.b32 	%r525, %f760;
	mov.b32 	%r526, %f766;
	xor.b32  	%r569, %r572, -2147483648;
	xor.b32  	%r570, %r573, -2147483648;
	and.b32  	%r586, %r4, 24;
	setp.ne.s32 	%p213, %r586, 24;
	cvt.u16.u32 	%rs296, %r6;
	@%p213 bra 	LBB0_137;
// %bb.136:                             // %L672.L962_crit_edge
	mul.lo.s16 	%rs49, %rs296, 171;
	shr.u16 	%rs50, %rs49, 10;
	mul.lo.s16 	%rs51, %rs50, 6;
	sub.s16 	%rs52, %rs296, %rs51;
	cvt.u32.u16 	%r599, %rs52;
	and.b32  	%r3725, %r599, 255;
	mov.u32 	%r3726, 0;
	mov.u32 	%r3727, %r3726;
	bra.uni 	LBB0_138;
LBB0_137:                               // %L701
	ld.param.u64 	%rd2, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_2];
	mul.lo.s32 	%r587, %r3, 1152;
	mul.lo.s32 	%r588, %r5, 144;
	mul.lo.s16 	%rs43, %rs296, 171;
	shr.u16 	%rs44, %rs43, 10;
	mul.lo.s16 	%rs45, %rs44, 6;
	sub.s16 	%rs46, %rs296, %rs45;
	cvt.u32.u16 	%r589, %rs46;
	and.b32  	%r3725, %r589, 255;
	and.b16  	%rs47, %rs46, 255;
	mul.wide.u16 	%r590, %rs47, 24;
	add.s32 	%r591, %r588, %r1;
	add.s32 	%r592, %r591, %r587;
	add.s32 	%r593, %r592, %r590;
	mul.wide.u32 	%rd25, %r593, 4;
	add.s64 	%rd26, %rd2, %rd25;
	ld.global.u32 	%r3726, [%rd26];
	or.b32  	%r594, %r1, 576;
	add.s32 	%r595, %r588, %r594;
	add.s32 	%r596, %r595, %r587;
	add.s32 	%r597, %r596, %r590;
	mul.wide.u32 	%rd27, %r597, 4;
	add.s64 	%rd28, %rd2, %rd27;
	ld.global.u32 	%r3727, [%rd28];
LBB0_138:                               // %L962
	ld.param.u64 	%rd3, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_3];
	ld.param.u64 	%rd4, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_4];
	// begin inline asm
	cvt.rn.f16x2.f32 %r355, %r357, %r356;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r358, %r360, %r357;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r407, %r409, %r408;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r410, %r412, %r411;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r451, %r453, %r452;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r454, %r456, %r455;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r457, %r459, %r458;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r460, %r453, %r452;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r469, %r471, %r470;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r472, %r474, %r471;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r521, %r523, %r522;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r524, %r526, %r525;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r565, %r567, %r566;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r568, %r570, %r569;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r571, %r573, %r572;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r574, %r567, %r566;
	// end inline asm
	mov.u32 	%r3707, 0;
	shl.b32 	%r92, %r4, 2;
	and.b32  	%r93, %r92, 60;
	shl.b32 	%r94, %r3, 8;
	shl.b32 	%r601, %r4, 3;
	and.b32  	%r95, %r601, 128;
	or.b32  	%r96, %r94, 64;
	shr.u32 	%r97, %r4, 4;
	and.b32  	%r602, %r272, 30;
	or.b32  	%r603, %r602, %r97;
	mul.lo.s32 	%r98, %r603, 257;
	or.b32  	%r604, %r97, %r272;
	or.b32  	%r605, %r604, 32;
	mul.lo.s32 	%r99, %r605, 257;
	and.b32  	%r606, %r2, 224;
	shr.u32 	%r607, %r1, 3;
	and.b16  	%rs54, %rs295, 255;
	mul.lo.s16 	%rs55, %rs54, 171;
	shr.u16 	%rs56, %rs55, 12;
	mul.lo.s16 	%rs57, %rs56, 24;
	sub.s16 	%rs1, %rs295, %rs57;
	cvt.u32.u16 	%r608, %rs1;
	and.b32  	%r100, %r608, 255;
	mad.lo.s32 	%r101, %r607, 257, %r606;
	add.s32 	%r609, %r1, 24;
	shr.u32 	%r610, %r609, 3;
	mad.lo.s32 	%r102, %r610, 257, %r606;
	add.s32 	%r611, %r1, 48;
	shr.u32 	%r612, %r611, 3;
	mad.lo.s32 	%r103, %r612, 257, %r606;
	add.s32 	%r613, %r1, 72;
	shr.u32 	%r614, %r613, 3;
	mad.lo.s32 	%r104, %r614, 257, %r606;
	or.b32  	%r615, %r607, 12;
	mad.lo.s32 	%r105, %r615, 257, %r606;
	add.s32 	%r616, %r1, 120;
	shr.u32 	%r617, %r616, 3;
	mad.lo.s32 	%r106, %r617, 257, %r606;
	add.s32 	%r618, %r1, 144;
	shr.u32 	%r619, %r618, 3;
	mad.lo.s32 	%r107, %r619, 257, %r606;
	add.s32 	%r620, %r1, 168;
	shr.u32 	%r621, %r620, 3;
	mad.lo.s32 	%r108, %r621, 257, %r606;
	or.b32  	%r622, %r607, 24;
	mad.lo.s32 	%r109, %r622, 257, %r606;
	add.s32 	%r623, %r1, 216;
	shr.u32 	%r624, %r623, 3;
	mad.lo.s32 	%r110, %r624, 257, %r606;
	add.s32 	%r625, %r1, 240;
	shr.u32 	%r626, %r625, 3;
	mad.lo.s32 	%r111, %r626, 257, %r606;
	add.s32 	%r627, %r1, 264;
	shr.u32 	%r628, %r627, 3;
	mad.lo.s32 	%r112, %r628, 257, %r606;
	or.b32  	%r629, %r607, 36;
	mad.lo.s32 	%r113, %r629, 257, %r606;
	add.s32 	%r630, %r1, 312;
	shr.u32 	%r631, %r630, 3;
	mad.lo.s32 	%r114, %r631, 257, %r606;
	add.s32 	%r632, %r1, 336;
	shr.u32 	%r633, %r632, 3;
	mad.lo.s32 	%r115, %r633, 257, %r606;
	add.s32 	%r634, %r1, 360;
	shr.u32 	%r635, %r634, 3;
	mad.lo.s32 	%r116, %r635, 257, %r606;
	or.b32  	%r636, %r607, 48;
	mad.lo.s32 	%r117, %r636, 257, %r606;
	add.s32 	%r637, %r1, 408;
	shr.u32 	%r638, %r637, 3;
	mad.lo.s32 	%r118, %r638, 257, %r606;
	add.s32 	%r639, %r1, 432;
	shr.u32 	%r640, %r639, 3;
	mad.lo.s32 	%r119, %r640, 257, %r606;
	add.s32 	%r641, %r1, 456;
	shr.u32 	%r642, %r641, 3;
	mad.lo.s32 	%r120, %r642, 257, %r606;
	or.b32  	%r643, %r607, 60;
	mad.lo.s32 	%r121, %r643, 257, %r606;
	add.s32 	%r644, %r1, 504;
	bfe.u32 	%r645, %r644, 3, 6;
	mad.lo.s32 	%r122, %r645, 257, %r606;
	mul.lo.s32 	%r123, %r1, 33;
	mul.lo.s32 	%r124, %r5, 4806;
	mul.lo.s32 	%r125, %r3725, 801;
	bfe.u32 	%r646, %r4, 1, 1;
	mul.lo.s32 	%r647, %r646, 2056;
	and.b32  	%r648, %r4, 1;
	mul.lo.s32 	%r649, %r648, 4112;
	mul.lo.s32 	%r650, %r97, 257;
	and.b32  	%r651, %r6, 1;
	mul.lo.s32 	%r652, %r651, 1028;
	bfe.u32 	%r653, %r4, 3, 1;
	mul.lo.s32 	%r654, %r653, 514;
	add.s32 	%r655, %r649, %r647;
	add.s32 	%r656, %r655, %r1;
	add.s32 	%r657, %r656, %r650;
	add.s32 	%r658, %r657, %r652;
	add.s32 	%r126, %r658, %r654;
	mul.wide.u32 	%rd29, %r126, 4;
	mov.u64 	%rd30, shmem;
	add.s64 	%rd6, %rd30, %rd29;
	add.s32 	%r659, %r126, 8256;
	mul.wide.u32 	%rd31, %r659, 4;
	add.s64 	%rd7, %rd30, %rd31;
	cvt.u64.u32 	%rd32, %r654;
	cvt.u64.u32 	%rd33, %r652;
	cvt.u64.u32 	%rd34, %r650;
	cvt.u64.u32 	%rd35, %r1;
	cvt.u64.u32 	%rd36, %r649;
	cvt.u64.u32 	%rd37, %r647;
	add.s64 	%rd38, %rd37, %rd36;
	add.s64 	%rd39, %rd38, %rd35;
	add.s64 	%rd40, %rd39, %rd34;
	add.s64 	%rd41, %rd40, %rd33;
	add.s64 	%rd42, %rd41, %rd32;
	shl.b64 	%rd43, %rd42, 2;
	add.s64 	%rd8, %rd30, %rd43;
	add.s32 	%r660, %r126, 8288;
	mul.wide.u32 	%rd44, %r660, 4;
	add.s64 	%rd9, %rd30, %rd44;
	bfe.u32 	%r661, %r1, 2, 1;
	mul.lo.s32 	%r662, %r661, 2056;
	bfe.u32 	%r663, %r1, 1, 1;
	and.b32  	%r664, %r1, 1;
	bfe.u32 	%r665, %r1, 3, 1;
	mul.lo.s32 	%r127, %r665, 1028;
	shr.u32 	%r666, %r1, 4;
	mul.lo.s32 	%r128, %r666, 514;
	mad.lo.s32 	%r667, %r663, 4112, %r662;
	add.s32 	%r668, %r667, %r3725;
	mad.lo.s32 	%r669, %r5, 6, %r668;
	mad.lo.s32 	%r129, %r664, 8256, %r669;
	add.s32 	%r670, %r129, %r127;
	add.s32 	%r671, %r670, %r128;
	mul.wide.u32 	%rd45, %r671, 4;
	add.s64 	%rd10, %rd30, %rd45;
	shr.u32 	%r672, %r609, 5;
	mul.lo.s32 	%r130, %r672, 257;
	add.s32 	%r673, %r1, 8;
	bfe.u32 	%r674, %r673, 3, 1;
	mul.lo.s32 	%r131, %r674, 1028;
	bfe.u32 	%r675, %r609, 4, 1;
	mul.lo.s32 	%r132, %r675, 514;
	add.s32 	%r676, %r129, %r130;
	add.s32 	%r677, %r676, %r131;
	add.s32 	%r678, %r677, %r132;
	mul.wide.u32 	%rd46, %r678, 4;
	add.s64 	%rd11, %rd30, %rd46;
	add.s32 	%r679, %r129, 32;
	add.s32 	%r680, %r679, %r127;
	add.s32 	%r681, %r680, %r128;
	mul.wide.u32 	%rd47, %r681, 4;
	add.s64 	%rd12, %rd30, %rd47;
	add.s32 	%r682, %r679, %r130;
	add.s32 	%r683, %r682, %r131;
	add.s32 	%r684, %r683, %r132;
	mul.wide.u32 	%rd48, %r684, 4;
	add.s64 	%rd13, %rd30, %rd48;
	mul.lo.s32 	%r133, %r1, 24;
	mul.lo.s32 	%r134, %r3, 3456;
	cvt.u16.u32 	%rs58, %r609;
	and.b16  	%rs59, %rs58, 255;
	mul.lo.s16 	%rs60, %rs59, 171;
	shr.u16 	%rs61, %rs60, 13;
	mul.lo.s16 	%rs62, %rs61, 48;
	sub.s16 	%rs63, %rs58, %rs62;
	and.b16  	%rs64, %rs63, 255;
	mul.wide.u16 	%r135, %rs64, 24;
	cvt.u64.u32 	%rd49, %r125;
	cvt.u64.u32 	%rd50, %r124;
	cvt.u64.u32 	%rd51, %r123;
	add.s64 	%rd52, %rd51, %rd50;
	add.s64 	%rd53, %rd52, %rd49;
	shl.b64 	%rd54, %rd53, 2;
	add.s64 	%rd14, %rd30, %rd54;
	setp.gt.u32 	%p214, %r1, 7;
	setp.eq.s32 	%p215, %r97, 1;
	setp.lt.u32 	%p216, %r4, 24;
	mov.u32 	%r3728, %r3707;
	mov.u32 	%r3759, %r3707;
	mov.u32 	%r3760, %r3707;
	mov.u32 	%r3761, %r3707;
	mov.u32 	%r3762, %r3707;
	bra.uni 	LBB0_139;
LBB0_160:                               // %L33970
                                        //   in Loop: Header=BB0_139 Depth=1
	add.s32 	%r260, %r3728, 48;
	setp.ne.s32 	%p243, %r3728, 96;
	mov.u32 	%r3728, %r260;
	@%p243 bra 	LBB0_139;
	bra.uni 	LBB0_161;
LBB0_139:                               // %L965
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_141 Depth 2
                                        //     Child Loop BB0_151 Depth 2
	mul.hi.u32 	%r878, %r3728, -1431655765;
	shr.u32 	%r879, %r878, 5;
	mul.lo.s32 	%r141, %r879, 48;
	add.s32 	%r880, %r1, %r141;
	cvt.u16.u32 	%rs65, %r880;
	mul.hi.s16 	%rs66, %rs65, 3641;
	shr.u16 	%rs67, %rs66, 15;
	shr.s16 	%rs68, %rs66, 3;
	add.s16 	%rs69, %rs68, %rs67;
	mul.lo.s16 	%rs70, %rs69, 144;
	sub.s16 	%rs71, %rs65, %rs70;
	cvt.u32.u16 	%r881, %rs71;
	shl.b32 	%r882, %r881, 16;
	or.b32  	%r883, %r95, %r882;
	or.b32  	%r884, %r883, %r94;
	or.b32  	%r885, %r884, %r93;
	mul.wide.s32 	%rd55, %r885, 4;
	add.s64 	%rd56, %rd3, %rd55;
	ld.global.v4.u32 	{%r886, %r887, %r888, %r889}, [%rd56];
	or.b32  	%r890, %r96, %r883;
	or.b32  	%r891, %r890, %r92;
	mul.wide.s32 	%rd57, %r891, 4;
	add.s64 	%rd58, %rd3, %rd57;
	ld.global.v4.u32 	{%r892, %r893, %r894, %r895}, [%rd58];
	add.s16 	%rs72, %rs65, 24;
	mul.hi.s16 	%rs73, %rs72, 3641;
	shr.u16 	%rs74, %rs73, 15;
	shr.s16 	%rs75, %rs73, 3;
	add.s16 	%rs76, %rs75, %rs74;
	mul.lo.s16 	%rs77, %rs76, 144;
	sub.s16 	%rs78, %rs72, %rs77;
	cvt.u32.u16 	%r896, %rs78;
	shl.b32 	%r897, %r896, 16;
	or.b32  	%r898, %r95, %r897;
	or.b32  	%r899, %r898, %r94;
	or.b32  	%r900, %r899, %r93;
	mul.wide.s32 	%rd59, %r900, 4;
	add.s64 	%rd60, %rd3, %rd59;
	ld.global.v4.u32 	{%r901, %r902, %r903, %r904}, [%rd60];
	or.b32  	%r905, %r96, %r898;
	or.b32  	%r906, %r905, %r92;
	mul.wide.s32 	%rd61, %r906, 4;
	add.s64 	%rd62, %rd3, %rd61;
	ld.global.v4.u32 	{%r907, %r908, %r909, %r910}, [%rd62];
	selp.b32 	%r911, %r886, %r888, %p215;
	shfl.sync.bfly.b32	%r912, %r911, 16, 31, -1;
	selp.b32 	%r687, %r912, %r886, %p215;
	selp.b32 	%r692, %r888, %r912, %p215;
	selp.b32 	%r913, %r887, %r889, %p215;
	shfl.sync.bfly.b32	%r914, %r913, 16, 31, -1;
	selp.b32 	%r695, %r914, %r887, %p215;
	selp.b32 	%r700, %r889, %r914, %p215;
	selp.b32 	%r915, %r892, %r894, %p215;
	shfl.sync.bfly.b32	%r916, %r915, 16, 31, -1;
	selp.b32 	%r703, %r916, %r892, %p215;
	selp.b32 	%r708, %r894, %r916, %p215;
	selp.b32 	%r917, %r893, %r895, %p215;
	shfl.sync.bfly.b32	%r918, %r917, 16, 31, -1;
	selp.b32 	%r711, %r918, %r893, %p215;
	selp.b32 	%r716, %r895, %r918, %p215;
	selp.b32 	%r919, %r901, %r903, %p215;
	shfl.sync.bfly.b32	%r920, %r919, 16, 31, -1;
	selp.b32 	%r719, %r920, %r901, %p215;
	selp.b32 	%r724, %r903, %r920, %p215;
	selp.b32 	%r921, %r902, %r904, %p215;
	shfl.sync.bfly.b32	%r922, %r921, 16, 31, -1;
	selp.b32 	%r727, %r922, %r902, %p215;
	selp.b32 	%r732, %r904, %r922, %p215;
	selp.b32 	%r923, %r907, %r909, %p215;
	shfl.sync.bfly.b32	%r924, %r923, 16, 31, -1;
	selp.b32 	%r735, %r924, %r907, %p215;
	selp.b32 	%r740, %r909, %r924, %p215;
	selp.b32 	%r925, %r908, %r910, %p215;
	shfl.sync.bfly.b32	%r926, %r925, 16, 31, -1;
	selp.b32 	%r743, %r926, %r908, %p215;
	selp.b32 	%r748, %r910, %r926, %p215;
	shl.b32 	%r688, %r692, 4;
	mov.u32 	%r686, 252645135;
	// begin inline asm
	lop3.b32 %r750, %r686, %r687, %r688, 202;
	// end inline asm
	shr.u32 	%r691, %r687, 4;
	// begin inline asm
	lop3.b32 %r766, %r686, %r691, %r692, 202;
	// end inline asm
	shl.b32 	%r696, %r700, 4;
	// begin inline asm
	lop3.b32 %r758, %r686, %r695, %r696, 202;
	// end inline asm
	shr.u32 	%r699, %r695, 4;
	// begin inline asm
	lop3.b32 %r774, %r686, %r699, %r700, 202;
	// end inline asm
	shl.b32 	%r704, %r708, 4;
	// begin inline asm
	lop3.b32 %r782, %r686, %r703, %r704, 202;
	// end inline asm
	shr.u32 	%r707, %r703, 4;
	// begin inline asm
	lop3.b32 %r798, %r686, %r707, %r708, 202;
	// end inline asm
	shl.b32 	%r712, %r716, 4;
	// begin inline asm
	lop3.b32 %r790, %r686, %r711, %r712, 202;
	// end inline asm
	shr.u32 	%r715, %r711, 4;
	// begin inline asm
	lop3.b32 %r806, %r686, %r715, %r716, 202;
	// end inline asm
	shl.b32 	%r720, %r724, 4;
	// begin inline asm
	lop3.b32 %r751, %r686, %r719, %r720, 202;
	// end inline asm
	shr.u32 	%r723, %r719, 4;
	// begin inline asm
	lop3.b32 %r767, %r686, %r723, %r724, 202;
	// end inline asm
	shl.b32 	%r728, %r732, 4;
	// begin inline asm
	lop3.b32 %r759, %r686, %r727, %r728, 202;
	// end inline asm
	shr.u32 	%r731, %r727, 4;
	// begin inline asm
	lop3.b32 %r775, %r686, %r731, %r732, 202;
	// end inline asm
	shl.b32 	%r736, %r740, 4;
	// begin inline asm
	lop3.b32 %r783, %r686, %r735, %r736, 202;
	// end inline asm
	shr.u32 	%r739, %r735, 4;
	// begin inline asm
	lop3.b32 %r799, %r686, %r739, %r740, 202;
	// end inline asm
	shl.b32 	%r744, %r748, 4;
	// begin inline asm
	lop3.b32 %r791, %r686, %r743, %r744, 202;
	// end inline asm
	shr.u32 	%r747, %r743, 4;
	// begin inline asm
	lop3.b32 %r807, %r686, %r747, %r748, 202;
	// end inline asm
	mov.u32 	%r752, 25152;
	// begin inline asm
	prmt.b32 %r814, %r750, %r751, %r752;
	// end inline asm
	mov.u32 	%r756, 29521;
	// begin inline asm
	prmt.b32 %r846, %r750, %r751, %r756;
	// end inline asm
	// begin inline asm
	prmt.b32 %r822, %r758, %r759, %r752;
	// end inline asm
	// begin inline asm
	prmt.b32 %r854, %r758, %r759, %r756;
	// end inline asm
	// begin inline asm
	prmt.b32 %r815, %r766, %r767, %r752;
	// end inline asm
	// begin inline asm
	prmt.b32 %r847, %r766, %r767, %r756;
	// end inline asm
	// begin inline asm
	prmt.b32 %r823, %r774, %r775, %r752;
	// end inline asm
	// begin inline asm
	prmt.b32 %r855, %r774, %r775, %r756;
	// end inline asm
	// begin inline asm
	prmt.b32 %r830, %r782, %r783, %r752;
	// end inline asm
	// begin inline asm
	prmt.b32 %r862, %r782, %r783, %r756;
	// end inline asm
	// begin inline asm
	prmt.b32 %r838, %r790, %r791, %r752;
	// end inline asm
	// begin inline asm
	prmt.b32 %r870, %r790, %r791, %r756;
	// end inline asm
	// begin inline asm
	prmt.b32 %r831, %r798, %r799, %r752;
	// end inline asm
	// begin inline asm
	prmt.b32 %r863, %r798, %r799, %r756;
	// end inline asm
	// begin inline asm
	prmt.b32 %r839, %r806, %r807, %r752;
	// end inline asm
	// begin inline asm
	prmt.b32 %r871, %r806, %r807, %r756;
	// end inline asm
	mov.u32 	%r872, 21520;
	// begin inline asm
	prmt.b32 %r813, %r814, %r815, %r872;
	// end inline asm
	mov.u32 	%r876, 30258;
	// begin inline asm
	prmt.b32 %r817, %r814, %r815, %r876;
	// end inline asm
	// begin inline asm
	prmt.b32 %r821, %r822, %r823, %r872;
	// end inline asm
	// begin inline asm
	prmt.b32 %r825, %r822, %r823, %r876;
	// end inline asm
	// begin inline asm
	prmt.b32 %r829, %r830, %r831, %r872;
	// end inline asm
	// begin inline asm
	prmt.b32 %r833, %r830, %r831, %r876;
	// end inline asm
	// begin inline asm
	prmt.b32 %r837, %r838, %r839, %r872;
	// end inline asm
	// begin inline asm
	prmt.b32 %r841, %r838, %r839, %r876;
	// end inline asm
	// begin inline asm
	prmt.b32 %r845, %r846, %r847, %r872;
	// end inline asm
	// begin inline asm
	prmt.b32 %r849, %r846, %r847, %r876;
	// end inline asm
	// begin inline asm
	prmt.b32 %r853, %r854, %r855, %r872;
	// end inline asm
	// begin inline asm
	prmt.b32 %r857, %r854, %r855, %r876;
	// end inline asm
	// begin inline asm
	prmt.b32 %r861, %r862, %r863, %r872;
	// end inline asm
	// begin inline asm
	prmt.b32 %r865, %r862, %r863, %r876;
	// end inline asm
	// begin inline asm
	prmt.b32 %r869, %r870, %r871, %r872;
	// end inline asm
	// begin inline asm
	prmt.b32 %r873, %r870, %r871, %r876;
	// end inline asm
	cvt.s16.s8 	%rs79, %rs65;
	mul.lo.s16 	%rs80, %rs79, 43;
	shr.u16 	%rs81, %rs80, 15;
	shr.s16 	%rs82, %rs80, 8;
	shr.u16 	%rs83, %rs82, 2;
	add.s16 	%rs84, %rs83, %rs81;
	mul.lo.s16 	%rs85, %rs84, 24;
	sub.s16 	%rs86, %rs65, %rs85;
	cvt.u32.u16 	%r927, %rs86;
	cvt.s32.s8 	%r928, %r927;
	add.s32 	%r929, %r98, %r928;
	mul.wide.s32 	%rd63, %r929, 4;
	add.s64 	%rd65, %rd30, %rd63;
	st.shared.u32 	[%rd65], %r813;
	st.shared.u32 	[%rd65+512], %r821;
	st.shared.u32 	[%rd65+256], %r817;
	st.shared.u32 	[%rd65+768], %r825;
	add.s32 	%r930, %r99, %r928;
	mul.wide.s32 	%rd66, %r930, 4;
	add.s64 	%rd67, %rd30, %rd66;
	st.shared.u32 	[%rd67], %r829;
	st.shared.u32 	[%rd67+512], %r837;
	st.shared.u32 	[%rd67+256], %r833;
	st.shared.u32 	[%rd67+768], %r841;
	st.shared.u32 	[%rd65+128], %r845;
	st.shared.u32 	[%rd65+640], %r853;
	st.shared.u32 	[%rd65+384], %r849;
	st.shared.u32 	[%rd65+896], %r857;
	st.shared.u32 	[%rd67+128], %r861;
	st.shared.u32 	[%rd67+640], %r869;
	st.shared.u32 	[%rd67+384], %r865;
	st.shared.u32 	[%rd67+896], %r873;
	bar.sync 	0;
	cvt.u16.u32 	%rs2, %r141;
	add.s16 	%rs87, %rs1, %rs2;
	cvt.s16.s8 	%rs88, %rs87;
	mul.lo.s16 	%rs89, %rs88, 43;
	shr.u16 	%rs90, %rs89, 15;
	shr.s16 	%rs91, %rs89, 8;
	shr.u16 	%rs92, %rs91, 2;
	add.s16 	%rs93, %rs92, %rs90;
	mul.lo.s16 	%rs94, %rs93, 24;
	sub.s16 	%rs95, %rs87, %rs94;
	cvt.u32.u16 	%r931, %rs95;
	cvt.s32.s8 	%r932, %r931;
	add.s32 	%r933, %r101, %r932;
	mul.wide.s32 	%rd68, %r933, 4;
	add.s64 	%rd69, %rd30, %rd68;
	ld.shared.u32 	%r934, [%rd69];
	add.s32 	%r935, %r102, %r932;
	mul.wide.u32 	%rd70, %r935, 4;
	add.s64 	%rd71, %rd30, %rd70;
	ld.shared.u32 	%r936, [%rd71];
	add.s32 	%r937, %r103, %r932;
	mul.wide.u32 	%rd72, %r937, 4;
	add.s64 	%rd73, %rd30, %rd72;
	ld.shared.u32 	%r938, [%rd73];
	add.s32 	%r939, %r104, %r932;
	mul.wide.u32 	%rd74, %r939, 4;
	add.s64 	%rd75, %rd30, %rd74;
	ld.shared.u32 	%r940, [%rd75];
	add.s32 	%r941, %r105, %r932;
	mul.wide.s32 	%rd76, %r941, 4;
	add.s64 	%rd77, %rd30, %rd76;
	ld.shared.u32 	%r942, [%rd77];
	add.s32 	%r943, %r106, %r932;
	mul.wide.u32 	%rd78, %r943, 4;
	add.s64 	%rd79, %rd30, %rd78;
	ld.shared.u32 	%r944, [%rd79];
	add.s32 	%r945, %r107, %r932;
	mul.wide.u32 	%rd80, %r945, 4;
	add.s64 	%rd81, %rd30, %rd80;
	ld.shared.u32 	%r946, [%rd81];
	add.s32 	%r947, %r108, %r932;
	mul.wide.u32 	%rd82, %r947, 4;
	add.s64 	%rd83, %rd30, %rd82;
	ld.shared.u32 	%r948, [%rd83];
	add.s32 	%r949, %r109, %r932;
	mul.wide.s32 	%rd84, %r949, 4;
	add.s64 	%rd85, %rd30, %rd84;
	ld.shared.u32 	%r950, [%rd85];
	add.s32 	%r951, %r110, %r932;
	mul.wide.u32 	%rd86, %r951, 4;
	add.s64 	%rd87, %rd30, %rd86;
	ld.shared.u32 	%r952, [%rd87];
	add.s32 	%r953, %r111, %r932;
	mul.wide.u32 	%rd88, %r953, 4;
	add.s64 	%rd89, %rd30, %rd88;
	ld.shared.u32 	%r954, [%rd89];
	add.s32 	%r955, %r112, %r932;
	mul.wide.u32 	%rd90, %r955, 4;
	add.s64 	%rd91, %rd30, %rd90;
	ld.shared.u32 	%r956, [%rd91];
	add.s32 	%r957, %r113, %r932;
	mul.wide.s32 	%rd92, %r957, 4;
	add.s64 	%rd93, %rd30, %rd92;
	ld.shared.u32 	%r958, [%rd93];
	add.s32 	%r959, %r114, %r932;
	mul.wide.u32 	%rd94, %r959, 4;
	add.s64 	%rd95, %rd30, %rd94;
	ld.shared.u32 	%r960, [%rd95];
	add.s32 	%r961, %r115, %r932;
	mul.wide.u32 	%rd96, %r961, 4;
	add.s64 	%rd97, %rd30, %rd96;
	ld.shared.u32 	%r962, [%rd97];
	add.s32 	%r963, %r116, %r932;
	mul.wide.u32 	%rd98, %r963, 4;
	add.s64 	%rd99, %rd30, %rd98;
	ld.shared.u32 	%r964, [%rd99];
	add.s32 	%r965, %r117, %r932;
	mul.wide.s32 	%rd100, %r965, 4;
	add.s64 	%rd101, %rd30, %rd100;
	ld.shared.u32 	%r966, [%rd101];
	add.s32 	%r967, %r118, %r932;
	mul.wide.u32 	%rd102, %r967, 4;
	add.s64 	%rd103, %rd30, %rd102;
	ld.shared.u32 	%r968, [%rd103];
	add.s32 	%r969, %r119, %r932;
	mul.wide.u32 	%rd104, %r969, 4;
	add.s64 	%rd105, %rd30, %rd104;
	ld.shared.u32 	%r970, [%rd105];
	add.s32 	%r971, %r120, %r932;
	mul.wide.u32 	%rd106, %r971, 4;
	add.s64 	%rd107, %rd30, %rd106;
	ld.shared.u32 	%r972, [%rd107];
	add.s32 	%r973, %r121, %r932;
	mul.wide.s32 	%rd108, %r973, 4;
	add.s64 	%rd109, %rd30, %rd108;
	ld.shared.u32 	%r974, [%rd109];
	add.s32 	%r975, %r122, %r932;
	mul.wide.s32 	%rd110, %r975, 4;
	add.s64 	%rd111, %rd30, %rd110;
	ld.shared.u32 	%r976, [%rd111];
	bar.sync 	0;
	shfl.sync.idx.b32	%r977, %r3724, 0, 31, -1;
	shfl.sync.idx.b32	%r978, %r3724, 1, 31, -1;
	shfl.sync.idx.b32	%r979, %r3724, 2, 31, -1;
	shfl.sync.idx.b32	%r980, %r3724, 3, 31, -1;
	shfl.sync.idx.b32	%r981, %r3724, 4, 31, -1;
	shfl.sync.idx.b32	%r982, %r3724, 5, 31, -1;
	shfl.sync.idx.b32	%r983, %r3724, 6, 31, -1;
	shfl.sync.idx.b32	%r984, %r3724, 7, 31, -1;
	shfl.sync.idx.b32	%r985, %r3724, 8, 31, -1;
	shfl.sync.idx.b32	%r986, %r3724, 9, 31, -1;
	shfl.sync.idx.b32	%r987, %r3724, 10, 31, -1;
	shfl.sync.idx.b32	%r988, %r3724, 11, 31, -1;
	shfl.sync.idx.b32	%r989, %r3724, 12, 31, -1;
	shfl.sync.idx.b32	%r990, %r3724, 13, 31, -1;
	shfl.sync.idx.b32	%r991, %r3724, 14, 31, -1;
	shfl.sync.idx.b32	%r992, %r3724, 15, 31, -1;
	shfl.sync.idx.b32	%r993, %r3724, 16, 31, -1;
	shfl.sync.idx.b32	%r994, %r3724, 17, 31, -1;
	shfl.sync.idx.b32	%r995, %r3724, 18, 31, -1;
	shfl.sync.idx.b32	%r996, %r3724, 19, 31, -1;
	shfl.sync.idx.b32	%r997, %r3724, 20, 31, -1;
	shfl.sync.idx.b32	%r998, %r3724, 21, 31, -1;
	shfl.sync.idx.b32	%r999, %r3724, 22, 31, -1;
	shfl.sync.idx.b32	%r1000, %r3724, 23, 31, -1;
	add.s32 	%r1001, %r977, %r932;
	mul.wide.s32 	%rd112, %r1001, 4;
	add.s64 	%rd113, %rd30, %rd112;
	st.shared.u32 	[%rd113], %r934;
	add.s32 	%r1002, %r978, %r932;
	mul.wide.s32 	%rd114, %r1002, 4;
	add.s64 	%rd115, %rd30, %rd114;
	st.shared.u32 	[%rd115], %r936;
	add.s32 	%r1003, %r979, %r932;
	mul.wide.s32 	%rd116, %r1003, 4;
	add.s64 	%rd117, %rd30, %rd116;
	st.shared.u32 	[%rd117], %r938;
	add.s32 	%r1004, %r980, %r932;
	mul.wide.s32 	%rd118, %r1004, 4;
	add.s64 	%rd119, %rd30, %rd118;
	st.shared.u32 	[%rd119], %r940;
	add.s32 	%r1005, %r981, %r932;
	mul.wide.s32 	%rd120, %r1005, 4;
	add.s64 	%rd121, %rd30, %rd120;
	st.shared.u32 	[%rd121], %r942;
	add.s32 	%r1006, %r982, %r932;
	mul.wide.s32 	%rd122, %r1006, 4;
	add.s64 	%rd123, %rd30, %rd122;
	st.shared.u32 	[%rd123], %r944;
	add.s32 	%r1007, %r983, %r932;
	mul.wide.s32 	%rd124, %r1007, 4;
	add.s64 	%rd125, %rd30, %rd124;
	st.shared.u32 	[%rd125], %r946;
	add.s32 	%r1008, %r984, %r932;
	mul.wide.s32 	%rd126, %r1008, 4;
	add.s64 	%rd127, %rd30, %rd126;
	st.shared.u32 	[%rd127], %r948;
	add.s32 	%r1009, %r985, %r932;
	mul.wide.s32 	%rd128, %r1009, 4;
	add.s64 	%rd129, %rd30, %rd128;
	st.shared.u32 	[%rd129], %r950;
	add.s32 	%r1010, %r986, %r932;
	mul.wide.s32 	%rd130, %r1010, 4;
	add.s64 	%rd131, %rd30, %rd130;
	st.shared.u32 	[%rd131], %r952;
	add.s32 	%r1011, %r987, %r932;
	mul.wide.s32 	%rd132, %r1011, 4;
	add.s64 	%rd133, %rd30, %rd132;
	st.shared.u32 	[%rd133], %r954;
	add.s32 	%r1012, %r988, %r932;
	mul.wide.s32 	%rd134, %r1012, 4;
	add.s64 	%rd135, %rd30, %rd134;
	st.shared.u32 	[%rd135], %r956;
	add.s32 	%r1013, %r989, %r932;
	mul.wide.s32 	%rd136, %r1013, 4;
	add.s64 	%rd137, %rd30, %rd136;
	st.shared.u32 	[%rd137], %r958;
	add.s32 	%r1014, %r990, %r932;
	mul.wide.s32 	%rd138, %r1014, 4;
	add.s64 	%rd139, %rd30, %rd138;
	st.shared.u32 	[%rd139], %r960;
	add.s32 	%r1015, %r991, %r932;
	mul.wide.s32 	%rd140, %r1015, 4;
	add.s64 	%rd141, %rd30, %rd140;
	st.shared.u32 	[%rd141], %r962;
	add.s32 	%r1016, %r992, %r932;
	mul.wide.s32 	%rd142, %r1016, 4;
	add.s64 	%rd143, %rd30, %rd142;
	st.shared.u32 	[%rd143], %r964;
	add.s32 	%r1017, %r993, %r932;
	mul.wide.s32 	%rd144, %r1017, 4;
	add.s64 	%rd145, %rd30, %rd144;
	st.shared.u32 	[%rd145], %r966;
	add.s32 	%r1018, %r994, %r932;
	mul.wide.s32 	%rd146, %r1018, 4;
	add.s64 	%rd147, %rd30, %rd146;
	st.shared.u32 	[%rd147], %r968;
	add.s32 	%r1019, %r995, %r932;
	mul.wide.s32 	%rd148, %r1019, 4;
	add.s64 	%rd149, %rd30, %rd148;
	st.shared.u32 	[%rd149], %r970;
	add.s32 	%r1020, %r996, %r932;
	mul.wide.s32 	%rd150, %r1020, 4;
	add.s64 	%rd151, %rd30, %rd150;
	st.shared.u32 	[%rd151], %r972;
	add.s32 	%r1021, %r997, %r932;
	mul.wide.s32 	%rd152, %r1021, 4;
	add.s64 	%rd153, %rd30, %rd152;
	st.shared.u32 	[%rd153], %r974;
	selp.b32 	%r1022, 0, %r976, %p214;
	add.s32 	%r1023, %r998, %r932;
	mul.wide.s32 	%rd154, %r1023, 4;
	add.s64 	%rd155, %rd30, %rd154;
	st.shared.u32 	[%rd155], %r1022;
	add.s32 	%r1024, %r999, %r932;
	mul.wide.s32 	%rd156, %r1024, 4;
	add.s64 	%rd157, %rd30, %rd156;
	st.shared.u32 	[%rd157], %r3707;
	add.s32 	%r1025, %r1000, %r932;
	mul.wide.s32 	%rd158, %r1025, 4;
	add.s64 	%rd159, %rd30, %rd158;
	st.shared.u32 	[%rd159], %r3707;
	bar.sync 	0;
	mov.u32 	%r3733, %r3707;
	mov.u32 	%r3734, %r3707;
	mov.u32 	%r3735, %r3707;
	mov.u32 	%r3736, %r3707;
	mov.u32 	%r3737, %r3707;
	mov.u32 	%r3738, %r3707;
	mov.u32 	%r3739, %r3707;
	mov.u32 	%r3740, %r3707;
	mov.u32 	%r3741, %r3707;
	mov.u32 	%r3742, %r3707;
	mov.u32 	%r3743, %r3707;
	mov.u32 	%r3744, %r3707;
	mov.u32 	%r3745, %r3707;
	mov.u32 	%r3746, %r3707;
	mov.u32 	%r3747, %r3707;
	mov.u32 	%r3748, %r3707;
	mov.u32 	%r3749, %r3707;
	mov.u32 	%r3750, %r3707;
	mov.u32 	%r3751, %r3707;
	mov.u32 	%r3752, %r3707;
	mov.u32 	%r3753, %r3707;
	mov.u32 	%r3754, %r3707;
	mov.u32 	%r3755, %r3707;
	mov.u32 	%r3756, %r3707;
	@%p216 bra 	LBB0_187;
	bra.uni 	LBB0_140;
LBB0_187:                               // %oksrem3370
                                        //   in Loop: Header=BB0_139 Depth=1
	cvt.s16.s8 	%rs96, %rs2;
	mul.lo.s16 	%rs97, %rs96, 43;
	shr.u16 	%rs98, %rs97, 15;
	shr.s16 	%rs99, %rs97, 10;
	add.s16 	%rs100, %rs99, %rs98;
	mul.lo.s16 	%rs101, %rs100, 24;
	sub.s16 	%rs102, %rs2, %rs101;
	cvt.u32.u16 	%r1026, %rs102;
	cvt.s32.s8 	%r1027, %r1026;
	add.s32 	%r1028, %r123, %r1027;
	add.s32 	%r1029, %r1028, %r124;
	add.s32 	%r1030, %r1029, %r125;
	mul.wide.s32 	%rd160, %r1030, 4;
	add.s64 	%rd162, %rd30, %rd160;
	ld.shared.u32 	%r3733, [%rd162];
	ld.shared.u32 	%r3734, [%rd14+4];
	ld.shared.u32 	%r3735, [%rd14+8];
	ld.shared.u32 	%r3736, [%rd14+12];
	ld.shared.u32 	%r3737, [%rd14+16];
	ld.shared.u32 	%r3738, [%rd14+20];
	ld.shared.u32 	%r3739, [%rd14+24];
	ld.shared.u32 	%r3740, [%rd14+28];
	ld.shared.u32 	%r3741, [%rd14+32];
	ld.shared.u32 	%r3742, [%rd14+36];
	ld.shared.u32 	%r3743, [%rd14+40];
	ld.shared.u32 	%r3744, [%rd14+44];
	ld.shared.u32 	%r3745, [%rd14+48];
	ld.shared.u32 	%r3746, [%rd14+52];
	ld.shared.u32 	%r3747, [%rd14+56];
	ld.shared.u32 	%r3748, [%rd14+60];
	add.s16 	%rs103, %rs2, 16;
	cvt.s16.s8 	%rs104, %rs103;
	mul.lo.s16 	%rs105, %rs104, 43;
	shr.u16 	%rs106, %rs105, 15;
	shr.s16 	%rs107, %rs105, 10;
	add.s16 	%rs108, %rs107, %rs106;
	mul.lo.s16 	%rs109, %rs108, 24;
	sub.s16 	%rs110, %rs103, %rs109;
	cvt.u32.u16 	%r1031, %rs110;
	cvt.s32.s8 	%r1032, %r1031;
	add.s32 	%r1033, %r123, %r1032;
	add.s32 	%r1034, %r1033, %r124;
	add.s32 	%r1035, %r1034, %r125;
	mul.wide.s32 	%rd163, %r1035, 4;
	add.s64 	%rd164, %rd30, %rd163;
	ld.shared.u32 	%r3749, [%rd164];
	add.s16 	%rs111, %rs2, 17;
	cvt.s16.s8 	%rs112, %rs111;
	mul.lo.s16 	%rs113, %rs112, 43;
	shr.u16 	%rs114, %rs113, 15;
	shr.s16 	%rs115, %rs113, 10;
	add.s16 	%rs116, %rs115, %rs114;
	mul.lo.s16 	%rs117, %rs116, 24;
	sub.s16 	%rs118, %rs111, %rs117;
	cvt.u32.u16 	%r1036, %rs118;
	cvt.s32.s8 	%r1037, %r1036;
	add.s32 	%r1038, %r123, %r1037;
	add.s32 	%r1039, %r1038, %r124;
	add.s32 	%r1040, %r1039, %r125;
	mul.wide.s32 	%rd165, %r1040, 4;
	add.s64 	%rd166, %rd30, %rd165;
	ld.shared.u32 	%r3750, [%rd166];
	add.s16 	%rs119, %rs2, 18;
	cvt.s16.s8 	%rs120, %rs119;
	mul.lo.s16 	%rs121, %rs120, 43;
	shr.u16 	%rs122, %rs121, 15;
	shr.s16 	%rs123, %rs121, 10;
	add.s16 	%rs124, %rs123, %rs122;
	mul.lo.s16 	%rs125, %rs124, 24;
	sub.s16 	%rs126, %rs119, %rs125;
	cvt.u32.u16 	%r1041, %rs126;
	cvt.s32.s8 	%r1042, %r1041;
	add.s32 	%r1043, %r123, %r1042;
	add.s32 	%r1044, %r1043, %r124;
	add.s32 	%r1045, %r1044, %r125;
	mul.wide.s32 	%rd167, %r1045, 4;
	add.s64 	%rd168, %rd30, %rd167;
	ld.shared.u32 	%r3751, [%rd168];
	add.s16 	%rs127, %rs2, 19;
	cvt.s16.s8 	%rs128, %rs127;
	mul.lo.s16 	%rs129, %rs128, 43;
	shr.u16 	%rs130, %rs129, 15;
	shr.s16 	%rs131, %rs129, 10;
	add.s16 	%rs132, %rs131, %rs130;
	mul.lo.s16 	%rs133, %rs132, 24;
	sub.s16 	%rs134, %rs127, %rs133;
	cvt.u32.u16 	%r1046, %rs134;
	cvt.s32.s8 	%r1047, %r1046;
	add.s32 	%r1048, %r123, %r1047;
	add.s32 	%r1049, %r1048, %r124;
	add.s32 	%r1050, %r1049, %r125;
	mul.wide.s32 	%rd169, %r1050, 4;
	add.s64 	%rd170, %rd30, %rd169;
	ld.shared.u32 	%r3752, [%rd170];
	add.s16 	%rs135, %rs2, 20;
	cvt.s16.s8 	%rs136, %rs135;
	mul.lo.s16 	%rs137, %rs136, 43;
	shr.u16 	%rs138, %rs137, 15;
	shr.s16 	%rs139, %rs137, 10;
	add.s16 	%rs140, %rs139, %rs138;
	mul.lo.s16 	%rs141, %rs140, 24;
	sub.s16 	%rs142, %rs135, %rs141;
	cvt.u32.u16 	%r1051, %rs142;
	cvt.s32.s8 	%r1052, %r1051;
	add.s32 	%r1053, %r123, %r1052;
	add.s32 	%r1054, %r1053, %r124;
	add.s32 	%r1055, %r1054, %r125;
	mul.wide.s32 	%rd171, %r1055, 4;
	add.s64 	%rd172, %rd30, %rd171;
	ld.shared.u32 	%r3753, [%rd172];
	add.s16 	%rs143, %rs2, 21;
	cvt.s16.s8 	%rs144, %rs143;
	mul.lo.s16 	%rs145, %rs144, 43;
	shr.u16 	%rs146, %rs145, 15;
	shr.s16 	%rs147, %rs145, 10;
	add.s16 	%rs148, %rs147, %rs146;
	mul.lo.s16 	%rs149, %rs148, 24;
	sub.s16 	%rs150, %rs143, %rs149;
	cvt.u32.u16 	%r1056, %rs150;
	cvt.s32.s8 	%r1057, %r1056;
	add.s32 	%r1058, %r123, %r1057;
	add.s32 	%r1059, %r1058, %r124;
	add.s32 	%r1060, %r1059, %r125;
	mul.wide.s32 	%rd173, %r1060, 4;
	add.s64 	%rd174, %rd30, %rd173;
	ld.shared.u32 	%r3754, [%rd174];
	add.s16 	%rs151, %rs2, 22;
	cvt.s16.s8 	%rs152, %rs151;
	mul.lo.s16 	%rs153, %rs152, 43;
	shr.u16 	%rs154, %rs153, 15;
	shr.s16 	%rs155, %rs153, 10;
	add.s16 	%rs156, %rs155, %rs154;
	mul.lo.s16 	%rs157, %rs156, 24;
	sub.s16 	%rs158, %rs151, %rs157;
	cvt.u32.u16 	%r1061, %rs158;
	cvt.s32.s8 	%r1062, %r1061;
	add.s32 	%r1063, %r123, %r1062;
	add.s32 	%r1064, %r1063, %r124;
	add.s32 	%r1065, %r1064, %r125;
	mul.wide.s32 	%rd175, %r1065, 4;
	add.s64 	%rd176, %rd30, %rd175;
	ld.shared.u32 	%r3755, [%rd176];
	add.s16 	%rs159, %rs2, 23;
	cvt.s16.s8 	%rs160, %rs159;
	mul.lo.s16 	%rs161, %rs160, 43;
	shr.u16 	%rs162, %rs161, 15;
	shr.s16 	%rs163, %rs161, 10;
	add.s16 	%rs164, %rs163, %rs162;
	mul.lo.s16 	%rs165, %rs164, 24;
	sub.s16 	%rs166, %rs159, %rs165;
	cvt.u32.u16 	%r1066, %rs166;
	cvt.s32.s8 	%r1067, %r1066;
	add.s32 	%r1068, %r123, %r1067;
	add.s32 	%r1069, %r1068, %r124;
	add.s32 	%r1070, %r1069, %r125;
	mul.wide.s32 	%rd177, %r1070, 4;
	add.s64 	%rd178, %rd30, %rd177;
	ld.shared.u32 	%r3756, [%rd178];
LBB0_140:                               // %L12291
                                        //   in Loop: Header=BB0_139 Depth=1
	bar.sync 	0;
	add.s32 	%r166, %r141, 1;
	add.s32 	%r167, %r141, 2;
	add.s32 	%r168, %r141, 3;
	mov.u32 	%r3757, 12;
	mov.u32 	%r3758, %r3707;
	bra.uni 	LBB0_141;
LBB0_148:                               // %L23119
                                        //   in Loop: Header=BB0_141 Depth=2
	add.s32 	%r3760, %r3760, 1;
	mov.u32 	%r3759, 0;
	mov.u32 	%r3761, %r3759;
	mov.u32 	%r3762, %r3759;
LBB0_149:                               // %L23120
                                        //   in Loop: Header=BB0_141 Depth=2
	bar.sync 	0;
	add.s32 	%r3758, %r3758, 1;
	add.s32 	%r3757, %r3757, -4;
	setp.ne.s32 	%p229, %r3757, -12;
	@%p229 bra 	LBB0_141;
	bra.uni 	LBB0_150;
LBB0_141:                               // %L12317
                                        //   Parent Loop BB0_139 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p218, %r3757, 12;
	selp.b32 	%r1610, %r3733, 0, %p218;
	setp.eq.s32 	%p219, %r3757, 8;
	selp.b32 	%r1611, %r3737, %r1610, %p219;
	setp.eq.s32 	%p220, %r3757, 4;
	selp.b32 	%r1612, %r3741, %r1611, %p220;
	setp.eq.s32 	%p221, %r3757, 0;
	selp.b32 	%r1613, %r3745, %r1612, %p221;
	setp.eq.s32 	%p222, %r3757, -4;
	selp.b32 	%r1614, %r3749, %r1613, %p222;
	setp.eq.s32 	%p223, %r3757, -8;
	selp.b32 	%r1615, %r3753, %r1614, %p223;
	selp.b32 	%r1616, %r3734, 0, %p218;
	selp.b32 	%r1617, %r3738, %r1616, %p219;
	selp.b32 	%r1618, %r3742, %r1617, %p220;
	selp.b32 	%r1619, %r3746, %r1618, %p221;
	selp.b32 	%r1620, %r3750, %r1619, %p222;
	selp.b32 	%r1621, %r3754, %r1620, %p223;
	selp.b32 	%r1622, %r3735, 0, %p218;
	selp.b32 	%r1623, %r3739, %r1622, %p219;
	selp.b32 	%r1624, %r3743, %r1623, %p220;
	selp.b32 	%r1625, %r3747, %r1624, %p221;
	selp.b32 	%r1626, %r3751, %r1625, %p222;
	selp.b32 	%r1627, %r3755, %r1626, %p223;
	selp.b32 	%r1628, %r3736, 0, %p218;
	selp.b32 	%r1629, %r3740, %r1628, %p219;
	selp.b32 	%r1630, %r3744, %r1629, %p220;
	selp.b32 	%r1631, %r3748, %r1630, %p221;
	selp.b32 	%r1632, %r3752, %r1631, %p222;
	selp.b32 	%r1633, %r3756, %r1632, %p223;
	mov.u16 	%rs204, 25600;
	// begin inline asm
	mov.b32 %r1078, {%rs204, %rs204};
	// end inline asm
	mov.u16 	%rs206, 21504;
	// begin inline asm
	mov.b32 %r1089, {%rs206, %rs206};
	// end inline asm
	xor.b32  	%r1077, %r1615, -2004318072;
	mov.u32 	%r1214, 983055;
	// begin inline asm
	lop3.b32 %r1075, %r1214, %r1077, %r1078, 202;
	// end inline asm
	mov.u16 	%rs210, 18432;
	// begin inline asm
	mov.b32 %r1079, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1080, %r1078, %r1079;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1083, %r1075, %r1080;
	// end inline asm
	mov.u32 	%r1225, 15728880;
	// begin inline asm
	lop3.b32 %r1086, %r1225, %r1077, %r1089, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1090, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1091, %r1089, %r1090;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1094, %r1086, %r1091;
	// end inline asm
	// begin inline asm
	mov.b32 %r1124, {%rs204, %rs204};
	// end inline asm
	// begin inline asm
	mov.b32 %r1135, {%rs206, %rs206};
	// end inline asm
	xor.b32  	%r1123, %r1621, -2004318072;
	// begin inline asm
	lop3.b32 %r1121, %r1214, %r1123, %r1124, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1125, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1126, %r1124, %r1125;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1129, %r1121, %r1126;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1132, %r1225, %r1123, %r1135, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1136, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1137, %r1135, %r1136;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1140, %r1132, %r1137;
	// end inline asm
	// begin inline asm
	mov.b32 %r1170, {%rs204, %rs204};
	// end inline asm
	// begin inline asm
	mov.b32 %r1181, {%rs206, %rs206};
	// end inline asm
	xor.b32  	%r1169, %r1627, -2004318072;
	// begin inline asm
	lop3.b32 %r1167, %r1214, %r1169, %r1170, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1171, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1172, %r1170, %r1171;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1175, %r1167, %r1172;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1178, %r1225, %r1169, %r1181, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1182, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1183, %r1181, %r1182;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1186, %r1178, %r1183;
	// end inline asm
	// begin inline asm
	mov.b32 %r1216, {%rs204, %rs204};
	// end inline asm
	// begin inline asm
	mov.b32 %r1227, {%rs206, %rs206};
	// end inline asm
	xor.b32  	%r1215, %r1633, -2004318072;
	// begin inline asm
	lop3.b32 %r1213, %r1214, %r1215, %r1216, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1217, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1218, %r1216, %r1217;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1221, %r1213, %r1218;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1224, %r1225, %r1215, %r1227, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1228, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1229, %r1227, %r1228;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1232, %r1224, %r1229;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3726;
    mov.b32 {%r2re, %r2im}, %r1083;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1257, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3727;
    mov.b32 {%r2re, %r2im}, %r1094;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1260, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3726;
    mov.b32 {%r2re, %r2im}, %r1129;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1263, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3727;
    mov.b32 {%r2re, %r2im}, %r1140;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1266, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3726;
    mov.b32 {%r2re, %r2im}, %r1175;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1269, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3727;
    mov.b32 {%r2re, %r2im}, %r1186;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1272, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3726;
    mov.b32 {%r2re, %r2im}, %r1221;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1275, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3727;
    mov.b32 {%r2re, %r2im}, %r1232;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1278, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1344, %r1341}, {%r355, %r358}, {%r1257}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1353, %r1350}, {%r355, %r358}, {%r1260}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1362, %r1359}, {%r355, %r358}, {%r1263}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1371, %r1368}, {%r355, %r358}, {%r1266}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1380, %r1377}, {%r355, %r358}, {%r1269}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1389, %r1386}, {%r355, %r358}, {%r1272}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1398, %r1395}, {%r355, %r358}, {%r1275}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1407, %r1404}, {%r355, %r358}, {%r1278}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1337, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1339, %r1337, %r1341;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1342, %r407, %r1344, %r1339;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1346, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1348, %r1346, %r1350;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1351, %r407, %r1353, %r1348;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1355, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1357, %r1355, %r1359;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1360, %r407, %r1362, %r1357;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1364, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1366, %r1364, %r1368;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1369, %r407, %r1371, %r1366;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1373, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1375, %r1373, %r1377;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1378, %r407, %r1380, %r1375;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1382, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1384, %r1382, %r1386;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1387, %r407, %r1389, %r1384;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1391, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1393, %r1391, %r1395;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1396, %r407, %r1398, %r1393;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1400, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1402, %r1400, %r1404;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1405, %r407, %r1407, %r1402;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1409, %r410, %r1344;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1412, %r407, %r1341, %r1409;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1416, %r410, %r1353;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1419, %r407, %r1350, %r1416;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1423, %r410, %r1362;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1426, %r407, %r1359, %r1423;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1430, %r410, %r1371;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1433, %r407, %r1368, %r1430;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1437, %r410, %r1380;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1440, %r407, %r1377, %r1437;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1444, %r410, %r1389;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1447, %r407, %r1386, %r1444;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1451, %r410, %r1398;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1454, %r407, %r1395, %r1451;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1458, %r410, %r1407;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1461, %r407, %r1404, %r1458;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1546, %r1547}, {%r451, %r457, %r454, %r460}, {%r1342, %r1412}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1554, %r1555}, {%r451, %r457, %r454, %r460}, {%r1351, %r1419}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1562, %r1563}, {%r451, %r457, %r454, %r460}, {%r1360, %r1426}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1570, %r1571}, {%r451, %r457, %r454, %r460}, {%r1369, %r1433}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1578, %r1579}, {%r451, %r457, %r454, %r460}, {%r1378, %r1440}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1586, %r1587}, {%r451, %r457, %r454, %r460}, {%r1387, %r1447}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1594, %r1595}, {%r451, %r457, %r454, %r460}, {%r1396, %r1454}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1602, %r1603}, {%r451, %r457, %r454, %r460}, {%r1405, %r1461}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	prmt.b32 %r1545, %r1546, %r1547, %r872;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1549, %r1546, %r1547, %r876;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1553, %r1554, %r1555, %r872;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1557, %r1554, %r1555, %r876;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1561, %r1562, %r1563, %r872;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1565, %r1562, %r1563, %r876;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1569, %r1570, %r1571, %r872;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1573, %r1570, %r1571, %r876;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1577, %r1578, %r1579, %r872;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1581, %r1578, %r1579, %r876;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1585, %r1586, %r1587, %r872;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1589, %r1586, %r1587, %r876;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1593, %r1594, %r1595, %r872;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1597, %r1594, %r1595, %r876;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1601, %r1602, %r1603, %r872;
	// end inline asm
	// begin inline asm
	prmt.b32 %r1605, %r1602, %r1603, %r876;
	// end inline asm
	st.shared.u32 	[%rd6], %r1545;
	st.shared.u32 	[%rd7], %r1549;
	st.shared.u32 	[%rd8+128], %r1553;
	st.shared.u32 	[%rd9], %r1557;
	cvt.u16.u32 	%rs215, %r3758;
	and.b16  	%rs216, %rs215, 255;
	mul.lo.s16 	%rs217, %rs216, 171;
	shr.u16 	%rs218, %rs217, 10;
	mul.lo.s16 	%rs219, %rs218, 6;
	sub.s16 	%rs220, %rs215, %rs219;
	shl.b16 	%rs221, %rs220, 2;
	cvt.u32.u16 	%r1634, %rs221;
	and.b32  	%r1635, %r1634, 252;
	add.s32 	%r1636, %r166, %r1635;
	shr.s32 	%r1637, %r1636, 31;
	shr.u32 	%r1638, %r1637, 30;
	add.s32 	%r1639, %r1636, %r1638;
	and.b32  	%r1640, %r1639, 67108860;
	sub.s32 	%r1641, %r1636, %r1640;
	shl.b32 	%r175, %r1641, 6;
	add.s32 	%r1642, %r126, %r175;
	mul.wide.s32 	%rd179, %r1642, 4;
	add.s64 	%rd181, %rd30, %rd179;
	st.shared.u32 	[%rd181], %r1561;
	add.s32 	%r1643, %r1642, 8256;
	mul.wide.u32 	%rd182, %r1643, 4;
	add.s64 	%rd183, %rd30, %rd182;
	st.shared.u32 	[%rd183], %r1565;
	or.b32  	%r176, %r175, 32;
	add.s32 	%r1644, %r126, %r176;
	mul.wide.s32 	%rd184, %r1644, 4;
	add.s64 	%rd185, %rd30, %rd184;
	st.shared.u32 	[%rd185], %r1569;
	add.s32 	%r1645, %r1642, 8288;
	mul.wide.u32 	%rd186, %r1645, 4;
	add.s64 	%rd187, %rd30, %rd186;
	st.shared.u32 	[%rd187], %r1573;
	add.s32 	%r1646, %r167, %r1635;
	shr.s32 	%r1647, %r1646, 31;
	shr.u32 	%r1648, %r1647, 30;
	add.s32 	%r1649, %r1646, %r1648;
	and.b32  	%r1650, %r1649, 67108860;
	sub.s32 	%r1651, %r1646, %r1650;
	shl.b32 	%r177, %r1651, 6;
	add.s32 	%r1652, %r126, %r177;
	mul.wide.s32 	%rd188, %r1652, 4;
	add.s64 	%rd189, %rd30, %rd188;
	st.shared.u32 	[%rd189], %r1577;
	add.s32 	%r1653, %r1652, 8256;
	mul.wide.u32 	%rd190, %r1653, 4;
	add.s64 	%rd191, %rd30, %rd190;
	st.shared.u32 	[%rd191], %r1581;
	or.b32  	%r178, %r177, 32;
	add.s32 	%r1654, %r126, %r178;
	mul.wide.s32 	%rd192, %r1654, 4;
	add.s64 	%rd193, %rd30, %rd192;
	st.shared.u32 	[%rd193], %r1585;
	add.s32 	%r1655, %r1652, 8288;
	mul.wide.u32 	%rd194, %r1655, 4;
	add.s64 	%rd195, %rd30, %rd194;
	st.shared.u32 	[%rd195], %r1589;
	add.s32 	%r1656, %r168, %r1635;
	shr.s32 	%r1657, %r1656, 31;
	shr.u32 	%r1658, %r1657, 30;
	add.s32 	%r1659, %r1656, %r1658;
	and.b32  	%r1660, %r1659, 67108860;
	sub.s32 	%r1661, %r1656, %r1660;
	shl.b32 	%r179, %r1661, 6;
	add.s32 	%r1662, %r126, %r179;
	mul.wide.s32 	%rd196, %r1662, 4;
	add.s64 	%rd197, %rd30, %rd196;
	st.shared.u32 	[%rd197], %r1593;
	add.s32 	%r1663, %r1662, 8256;
	mul.wide.u32 	%rd198, %r1663, 4;
	add.s64 	%rd199, %rd30, %rd198;
	st.shared.u32 	[%rd199], %r1597;
	or.b32  	%r180, %r179, 32;
	add.s32 	%r1664, %r126, %r180;
	mul.wide.s32 	%rd200, %r1664, 4;
	add.s64 	%rd201, %rd30, %rd200;
	st.shared.u32 	[%rd201], %r1601;
	add.s32 	%r1665, %r1662, 8288;
	mul.wide.u32 	%rd202, %r1665, 4;
	add.s64 	%rd203, %rd30, %rd202;
	st.shared.u32 	[%rd203], %r1605;
	bar.sync 	0;
	mov.u32 	%r3763, %r3707;
	mov.u32 	%r3764, %r3707;
	mov.u32 	%r3765, %r3707;
	mov.u32 	%r3766, %r3707;
	@%p216 bra 	LBB0_188;
	bra.uni 	LBB0_142;
LBB0_188:                               // %oksrem6660
                                        //   in Loop: Header=BB0_141 Depth=2
	ld.shared.u32 	%r3763, [%rd10];
	ld.shared.u32 	%r3764, [%rd11];
	ld.shared.u32 	%r3765, [%rd12];
	ld.shared.u32 	%r3766, [%rd13];
LBB0_142:                               // %L18511
                                        //   in Loop: Header=BB0_141 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1701, %r1698}, {%r469, %r472}, {%r3763}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1710, %r1707}, {%r469, %r472}, {%r3764}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1719, %r1716}, {%r469, %r472}, {%r3765}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1728, %r1725}, {%r469, %r472}, {%r3766}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1694, %r524;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1696, %r1694, %r1698;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1699, %r521, %r1701, %r1696;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1703, %r524;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1705, %r1703, %r1707;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1708, %r521, %r1710, %r1705;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1712, %r524;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1714, %r1712, %r1716;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1717, %r521, %r1719, %r1714;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1721, %r524;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1723, %r1721, %r1725;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1726, %r521, %r1728, %r1723;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1730, %r524, %r1701;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1733, %r521, %r1698, %r1730;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1737, %r524, %r1710;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1740, %r521, %r1707, %r1737;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1744, %r524, %r1719;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1747, %r521, %r1716, %r1744;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1751, %r524, %r1728;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1754, %r521, %r1725, %r1751;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1799, %r1802}, {%r565, %r571, %r568, %r574}, {%r1699, %r1733}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1818, %r1821}, {%r565, %r571, %r568, %r574}, {%r1708, %r1740}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1806, %r1810}, {%r565, %r571, %r568, %r574}, {%r1717, %r1747}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1825, %r1829}, {%r565, %r571, %r568, %r574}, {%r1726, %r1754}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1798, %r1799, %r1799;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1801, %r1802, %r1802, %r1798;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1805, %r1806, %r1806, %r1801;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1809, %r1810, %r1810, %r1805;
	// end inline asm
	mov.u32 	%r1833, 442899046;
	// begin inline asm
	fma.rn.f16x2 %r1813, %r1833, %r1809, %r3762;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1817, %r1818, %r1818;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1820, %r1821, %r1821, %r1817;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1824, %r1825, %r1825, %r1820;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1828, %r1829, %r1829, %r1824;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1832, %r1833, %r1828, %r3761;
	// end inline asm
	mov.u32 	%r3767, %r3707;
	mov.u32 	%r3768, %r3707;
	mov.u32 	%r3769, %r3707;
	mov.u32 	%r3770, %r3707;
	@%p216 bra 	LBB0_189;
	bra.uni 	LBB0_143;
LBB0_189:                               // %oksrem7207
                                        //   in Loop: Header=BB0_141 Depth=2
	add.s32 	%r1837, %r129, %r175;
	add.s32 	%r1838, %r1837, %r127;
	add.s32 	%r1839, %r1838, %r128;
	mul.wide.s32 	%rd204, %r1839, 4;
	add.s64 	%rd206, %rd30, %rd204;
	ld.shared.u32 	%r3767, [%rd206];
	add.s32 	%r1840, %r1837, %r130;
	add.s32 	%r1841, %r1840, %r131;
	add.s32 	%r1842, %r1841, %r132;
	mul.wide.s32 	%rd207, %r1842, 4;
	add.s64 	%rd208, %rd30, %rd207;
	ld.shared.u32 	%r3768, [%rd208];
	add.s32 	%r1843, %r129, %r176;
	add.s32 	%r1844, %r1843, %r127;
	add.s32 	%r1845, %r1844, %r128;
	mul.wide.s32 	%rd209, %r1845, 4;
	add.s64 	%rd210, %rd30, %rd209;
	ld.shared.u32 	%r3769, [%rd210];
	add.s32 	%r1846, %r1843, %r130;
	add.s32 	%r1847, %r1846, %r131;
	add.s32 	%r1848, %r1847, %r132;
	mul.wide.s32 	%rd211, %r1848, 4;
	add.s64 	%rd212, %rd30, %rd211;
	ld.shared.u32 	%r3770, [%rd212];
LBB0_143:                               // %L19877
                                        //   in Loop: Header=BB0_141 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1884, %r1881}, {%r469, %r472}, {%r3767}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1893, %r1890}, {%r469, %r472}, {%r3768}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1902, %r1899}, {%r469, %r472}, {%r3769}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1911, %r1908}, {%r469, %r472}, {%r3770}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1877, %r524;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1879, %r1877, %r1881;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1882, %r521, %r1884, %r1879;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1886, %r524;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1888, %r1886, %r1890;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1891, %r521, %r1893, %r1888;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1895, %r524;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1897, %r1895, %r1899;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1900, %r521, %r1902, %r1897;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1904, %r524;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1906, %r1904, %r1908;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1909, %r521, %r1911, %r1906;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1913, %r524, %r1884;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1916, %r521, %r1881, %r1913;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1920, %r524, %r1893;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1923, %r521, %r1890, %r1920;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1927, %r524, %r1902;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1930, %r521, %r1899, %r1927;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1934, %r524, %r1911;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1937, %r521, %r1908, %r1934;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1982, %r1985}, {%r565, %r571, %r568, %r574}, {%r1882, %r1916}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2001, %r2004}, {%r565, %r571, %r568, %r574}, {%r1891, %r1923}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1989, %r1993}, {%r565, %r571, %r568, %r574}, {%r1900, %r1930}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2008, %r2012}, {%r565, %r571, %r568, %r574}, {%r1909, %r1937}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1981, %r1982, %r1982;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1984, %r1985, %r1985, %r1981;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1988, %r1989, %r1989, %r1984;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1992, %r1993, %r1993, %r1988;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1996, %r1833, %r1992, %r1813;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2000, %r2001, %r2001;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2003, %r2004, %r2004, %r2000;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2007, %r2008, %r2008, %r2003;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2011, %r2012, %r2012, %r2007;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2015, %r1833, %r2011, %r1832;
	// end inline asm
	mov.u32 	%r3771, %r3707;
	mov.u32 	%r3772, %r3707;
	mov.u32 	%r3773, %r3707;
	mov.u32 	%r3774, %r3707;
	@%p216 bra 	LBB0_190;
	bra.uni 	LBB0_144;
LBB0_190:                               // %oksrem7754
                                        //   in Loop: Header=BB0_141 Depth=2
	add.s32 	%r2020, %r129, %r177;
	add.s32 	%r2021, %r2020, %r127;
	add.s32 	%r2022, %r2021, %r128;
	mul.wide.s32 	%rd213, %r2022, 4;
	add.s64 	%rd215, %rd30, %rd213;
	ld.shared.u32 	%r3771, [%rd215];
	add.s32 	%r2023, %r2020, %r130;
	add.s32 	%r2024, %r2023, %r131;
	add.s32 	%r2025, %r2024, %r132;
	mul.wide.s32 	%rd216, %r2025, 4;
	add.s64 	%rd217, %rd30, %rd216;
	ld.shared.u32 	%r3772, [%rd217];
	add.s32 	%r2026, %r129, %r178;
	add.s32 	%r2027, %r2026, %r127;
	add.s32 	%r2028, %r2027, %r128;
	mul.wide.s32 	%rd218, %r2028, 4;
	add.s64 	%rd219, %rd30, %rd218;
	ld.shared.u32 	%r3773, [%rd219];
	add.s32 	%r2029, %r2026, %r130;
	add.s32 	%r2030, %r2029, %r131;
	add.s32 	%r2031, %r2030, %r132;
	mul.wide.s32 	%rd220, %r2031, 4;
	add.s64 	%rd221, %rd30, %rd220;
	ld.shared.u32 	%r3774, [%rd221];
LBB0_144:                               // %L21243
                                        //   in Loop: Header=BB0_141 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2067, %r2064}, {%r469, %r472}, {%r3771}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2076, %r2073}, {%r469, %r472}, {%r3772}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2085, %r2082}, {%r469, %r472}, {%r3773}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2094, %r2091}, {%r469, %r472}, {%r3774}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2060, %r524;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2062, %r2060, %r2064;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2065, %r521, %r2067, %r2062;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2069, %r524;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2071, %r2069, %r2073;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2074, %r521, %r2076, %r2071;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2078, %r524;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2080, %r2078, %r2082;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2083, %r521, %r2085, %r2080;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2087, %r524;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2089, %r2087, %r2091;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2092, %r521, %r2094, %r2089;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2096, %r524, %r2067;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2099, %r521, %r2064, %r2096;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2103, %r524, %r2076;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2106, %r521, %r2073, %r2103;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2110, %r524, %r2085;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2113, %r521, %r2082, %r2110;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2117, %r524, %r2094;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2120, %r521, %r2091, %r2117;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2165, %r2168}, {%r565, %r571, %r568, %r574}, {%r2065, %r2099}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2184, %r2187}, {%r565, %r571, %r568, %r574}, {%r2074, %r2106}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2172, %r2176}, {%r565, %r571, %r568, %r574}, {%r2083, %r2113}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2191, %r2195}, {%r565, %r571, %r568, %r574}, {%r2092, %r2120}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2164, %r2165, %r2165;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2167, %r2168, %r2168, %r2164;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2171, %r2172, %r2172, %r2167;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2175, %r2176, %r2176, %r2171;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2179, %r1833, %r2175, %r1996;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2183, %r2184, %r2184;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2186, %r2187, %r2187, %r2183;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2190, %r2191, %r2191, %r2186;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2194, %r2195, %r2195, %r2190;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2198, %r1833, %r2194, %r2015;
	// end inline asm
	mov.u32 	%r3775, %r3707;
	mov.u32 	%r3776, %r3707;
	mov.u32 	%r3777, %r3707;
	mov.u32 	%r3778, %r3707;
	@%p216 bra 	LBB0_191;
	bra.uni 	LBB0_145;
LBB0_191:                               // %oksrem8301
                                        //   in Loop: Header=BB0_141 Depth=2
	add.s32 	%r2203, %r129, %r179;
	add.s32 	%r2204, %r2203, %r127;
	add.s32 	%r2205, %r2204, %r128;
	mul.wide.s32 	%rd222, %r2205, 4;
	add.s64 	%rd224, %rd30, %rd222;
	ld.shared.u32 	%r3775, [%rd224];
	add.s32 	%r2206, %r2203, %r130;
	add.s32 	%r2207, %r2206, %r131;
	add.s32 	%r2208, %r2207, %r132;
	mul.wide.s32 	%rd225, %r2208, 4;
	add.s64 	%rd226, %rd30, %rd225;
	ld.shared.u32 	%r3776, [%rd226];
	add.s32 	%r2209, %r129, %r180;
	add.s32 	%r2210, %r2209, %r127;
	add.s32 	%r2211, %r2210, %r128;
	mul.wide.s32 	%rd227, %r2211, 4;
	add.s64 	%rd228, %rd30, %rd227;
	ld.shared.u32 	%r3777, [%rd228];
	add.s32 	%r2212, %r2209, %r130;
	add.s32 	%r2213, %r2212, %r131;
	add.s32 	%r2214, %r2213, %r132;
	mul.wide.s32 	%rd229, %r2214, 4;
	add.s64 	%rd230, %rd30, %rd229;
	ld.shared.u32 	%r3778, [%rd230];
LBB0_145:                               // %L22609
                                        //   in Loop: Header=BB0_141 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2250, %r2247}, {%r469, %r472}, {%r3775}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2259, %r2256}, {%r469, %r472}, {%r3776}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2268, %r2265}, {%r469, %r472}, {%r3777}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2277, %r2274}, {%r469, %r472}, {%r3778}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2243, %r524;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2245, %r2243, %r2247;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2248, %r521, %r2250, %r2245;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2252, %r524;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2254, %r2252, %r2256;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2257, %r521, %r2259, %r2254;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2261, %r524;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2263, %r2261, %r2265;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2266, %r521, %r2268, %r2263;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2270, %r524;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2272, %r2270, %r2274;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2275, %r521, %r2277, %r2272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2279, %r524, %r2250;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2282, %r521, %r2247, %r2279;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2286, %r524, %r2259;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2289, %r521, %r2256, %r2286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2293, %r524, %r2268;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2296, %r521, %r2265, %r2293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2300, %r524, %r2277;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2303, %r521, %r2274, %r2300;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2348, %r2351}, {%r565, %r571, %r568, %r574}, {%r2248, %r2282}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2367, %r2370}, {%r565, %r571, %r568, %r574}, {%r2257, %r2289}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2355, %r2359}, {%r565, %r571, %r568, %r574}, {%r2266, %r2296}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2374, %r2378}, {%r565, %r571, %r568, %r574}, {%r2275, %r2303}, {%r3707, %r3707};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2347, %r2348, %r2348;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2350, %r2351, %r2351, %r2347;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2354, %r2355, %r2355, %r2350;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2358, %r2359, %r2359, %r2354;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3762, %r1833, %r2358, %r2179;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2366, %r2367, %r2367;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2369, %r2370, %r2370, %r2366;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2373, %r2374, %r2374, %r2369;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2377, %r2378, %r2378, %r2373;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3761, %r1833, %r2377, %r2198;
	// end inline asm
	add.s32 	%r3759, %r3759, 4;
	setp.ne.s32 	%p227, %r3759, 40;
	@%p227 bra 	LBB0_149;
// %bb.146:                             // %L22797
                                        //   in Loop: Header=BB0_141 Depth=2
	@%p67 bra 	LBB0_148;
// %bb.147:                             // %L22863
                                        //   in Loop: Header=BB0_141 Depth=2
	mul.lo.s32 	%r2385, %r3760, 1152;
	add.s32 	%r2386, %r133, %r2385;
	add.s32 	%r2387, %r2386, %r134;
	add.s32 	%r2388, %r2387, %r100;
	mul.wide.u32 	%rd231, %r2388, 4;
	add.s64 	%rd232, %rd4, %rd231;
	st.global.u32 	[%rd232], %r3762;
	add.s32 	%r2389, %r134, %r2385;
	add.s32 	%r2390, %r2389, %r135;
	add.s32 	%r2391, %r2390, %r100;
	mul.wide.u32 	%rd233, %r2391, 4;
	add.s64 	%rd234, %rd4, %rd233;
	st.global.u32 	[%rd234], %r3761;
	bra.uni 	LBB0_148;
LBB0_150:                               // %L23147.preheader
                                        //   in Loop: Header=BB0_139 Depth=1
	add.s32 	%r213, %r141, 25;
	add.s32 	%r214, %r141, 26;
	add.s32 	%r215, %r141, 27;
	mov.u32 	%r2394, 0;
	mov.u32 	%r3783, 12;
	mov.u32 	%r3784, %r2394;
	bra.uni 	LBB0_151;
LBB0_158:                               // %L33949
                                        //   in Loop: Header=BB0_151 Depth=2
	add.s32 	%r3760, %r3760, 1;
	mov.u32 	%r3759, 0;
	mov.u32 	%r3761, %r3759;
	mov.u32 	%r3762, %r3759;
LBB0_159:                               // %L33950
                                        //   in Loop: Header=BB0_151 Depth=2
	bar.sync 	0;
	add.s32 	%r3784, %r3784, 1;
	add.s32 	%r3783, %r3783, -4;
	setp.ne.s32 	%p242, %r3783, -12;
	@%p242 bra 	LBB0_151;
	bra.uni 	LBB0_160;
LBB0_151:                               // %L23147
                                        //   Parent Loop BB0_139 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p231, %r3783, 12;
	selp.b32 	%r2932, %r3733, 0, %p231;
	setp.eq.s32 	%p232, %r3783, 8;
	selp.b32 	%r2933, %r3737, %r2932, %p232;
	setp.eq.s32 	%p233, %r3783, 4;
	selp.b32 	%r2934, %r3741, %r2933, %p233;
	setp.eq.s32 	%p234, %r3783, 0;
	selp.b32 	%r2935, %r3745, %r2934, %p234;
	setp.eq.s32 	%p235, %r3783, -4;
	selp.b32 	%r2936, %r3749, %r2935, %p235;
	setp.eq.s32 	%p236, %r3783, -8;
	selp.b32 	%r2937, %r3753, %r2936, %p236;
	selp.b32 	%r2938, %r3734, 0, %p231;
	selp.b32 	%r2939, %r3738, %r2938, %p232;
	selp.b32 	%r2940, %r3742, %r2939, %p233;
	selp.b32 	%r2941, %r3746, %r2940, %p234;
	selp.b32 	%r2942, %r3750, %r2941, %p235;
	selp.b32 	%r2943, %r3754, %r2942, %p236;
	selp.b32 	%r2944, %r3735, 0, %p231;
	selp.b32 	%r2945, %r3739, %r2944, %p232;
	selp.b32 	%r2946, %r3743, %r2945, %p233;
	selp.b32 	%r2947, %r3747, %r2946, %p234;
	selp.b32 	%r2948, %r3751, %r2947, %p235;
	selp.b32 	%r2949, %r3755, %r2948, %p236;
	selp.b32 	%r2950, %r3736, 0, %p231;
	selp.b32 	%r2951, %r3740, %r2950, %p232;
	selp.b32 	%r2952, %r3744, %r2951, %p233;
	selp.b32 	%r2953, %r3748, %r2952, %p234;
	selp.b32 	%r2954, %r3752, %r2953, %p235;
	selp.b32 	%r2955, %r3756, %r2954, %p236;
	// begin inline asm
	mov.b32 %r2422, {%rs204, %rs204};
	// end inline asm
	// begin inline asm
	mov.b32 %r2433, {%rs206, %rs206};
	// end inline asm
	shr.u32 	%r2956, %r2937, 8;
	xor.b32  	%r2432, %r2956, 8947848;
	// begin inline asm
	lop3.b32 %r2419, %r1214, %r2432, %r2422, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2423, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2424, %r2422, %r2423;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2427, %r2419, %r2424;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2430, %r1225, %r2432, %r2433, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2434, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2435, %r2433, %r2434;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2438, %r2430, %r2435;
	// end inline asm
	// begin inline asm
	mov.b32 %r2468, {%rs204, %rs204};
	// end inline asm
	// begin inline asm
	mov.b32 %r2479, {%rs206, %rs206};
	// end inline asm
	shr.u32 	%r2957, %r2943, 8;
	xor.b32  	%r2478, %r2957, 8947848;
	// begin inline asm
	lop3.b32 %r2465, %r1214, %r2478, %r2468, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2469, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2470, %r2468, %r2469;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2473, %r2465, %r2470;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2476, %r1225, %r2478, %r2479, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2480, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2481, %r2479, %r2480;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2484, %r2476, %r2481;
	// end inline asm
	// begin inline asm
	mov.b32 %r2514, {%rs204, %rs204};
	// end inline asm
	// begin inline asm
	mov.b32 %r2525, {%rs206, %rs206};
	// end inline asm
	shr.u32 	%r2958, %r2949, 8;
	xor.b32  	%r2524, %r2958, 8947848;
	// begin inline asm
	lop3.b32 %r2511, %r1214, %r2524, %r2514, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2515, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2516, %r2514, %r2515;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2519, %r2511, %r2516;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2522, %r1225, %r2524, %r2525, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2526, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2527, %r2525, %r2526;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2530, %r2522, %r2527;
	// end inline asm
	// begin inline asm
	mov.b32 %r2560, {%rs204, %rs204};
	// end inline asm
	// begin inline asm
	mov.b32 %r2571, {%rs206, %rs206};
	// end inline asm
	shr.u32 	%r2959, %r2955, 8;
	xor.b32  	%r2570, %r2959, 8947848;
	// begin inline asm
	lop3.b32 %r2557, %r1214, %r2570, %r2560, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2561, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2562, %r2560, %r2561;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2565, %r2557, %r2562;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2568, %r1225, %r2570, %r2571, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2572, {%rs210, %rs210};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2573, %r2571, %r2572;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2576, %r2568, %r2573;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3726;
    mov.b32 {%r2re, %r2im}, %r2427;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2579, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3727;
    mov.b32 {%r2re, %r2im}, %r2438;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2582, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3726;
    mov.b32 {%r2re, %r2im}, %r2473;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2585, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3727;
    mov.b32 {%r2re, %r2im}, %r2484;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2588, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3726;
    mov.b32 {%r2re, %r2im}, %r2519;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2591, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3727;
    mov.b32 {%r2re, %r2im}, %r2530;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2594, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3726;
    mov.b32 {%r2re, %r2im}, %r2565;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2597, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r3727;
    mov.b32 {%r2re, %r2im}, %r2576;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2600, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2666, %r2663}, {%r355, %r358}, {%r2579}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2675, %r2672}, {%r355, %r358}, {%r2582}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2684, %r2681}, {%r355, %r358}, {%r2585}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2693, %r2690}, {%r355, %r358}, {%r2588}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2702, %r2699}, {%r355, %r358}, {%r2591}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2711, %r2708}, {%r355, %r358}, {%r2594}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2720, %r2717}, {%r355, %r358}, {%r2597}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2729, %r2726}, {%r355, %r358}, {%r2600}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2659, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2661, %r2659, %r2663;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2664, %r407, %r2666, %r2661;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2668, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2670, %r2668, %r2672;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2673, %r407, %r2675, %r2670;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2677, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2679, %r2677, %r2681;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2682, %r407, %r2684, %r2679;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2686, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2688, %r2686, %r2690;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2691, %r407, %r2693, %r2688;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2695, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2697, %r2695, %r2699;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2700, %r407, %r2702, %r2697;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2704, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2706, %r2704, %r2708;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2709, %r407, %r2711, %r2706;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2713, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2715, %r2713, %r2717;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2718, %r407, %r2720, %r2715;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2722, %r410;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2724, %r2722, %r2726;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2727, %r407, %r2729, %r2724;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2731, %r410, %r2666;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2734, %r407, %r2663, %r2731;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2738, %r410, %r2675;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2741, %r407, %r2672, %r2738;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2745, %r410, %r2684;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2748, %r407, %r2681, %r2745;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2752, %r410, %r2693;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2755, %r407, %r2690, %r2752;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2759, %r410, %r2702;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2762, %r407, %r2699, %r2759;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2766, %r410, %r2711;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2769, %r407, %r2708, %r2766;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2773, %r410, %r2720;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2776, %r407, %r2717, %r2773;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2780, %r410, %r2729;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2783, %r407, %r2726, %r2780;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2868, %r2869}, {%r451, %r457, %r454, %r460}, {%r2664, %r2734}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2876, %r2877}, {%r451, %r457, %r454, %r460}, {%r2673, %r2741}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2884, %r2885}, {%r451, %r457, %r454, %r460}, {%r2682, %r2748}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2892, %r2893}, {%r451, %r457, %r454, %r460}, {%r2691, %r2755}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2900, %r2901}, {%r451, %r457, %r454, %r460}, {%r2700, %r2762}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2908, %r2909}, {%r451, %r457, %r454, %r460}, {%r2709, %r2769}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2916, %r2917}, {%r451, %r457, %r454, %r460}, {%r2718, %r2776}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2924, %r2925}, {%r451, %r457, %r454, %r460}, {%r2727, %r2783}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	prmt.b32 %r2867, %r2868, %r2869, %r872;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2871, %r2868, %r2869, %r876;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2875, %r2876, %r2877, %r872;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2879, %r2876, %r2877, %r876;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2883, %r2884, %r2885, %r872;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2887, %r2884, %r2885, %r876;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2891, %r2892, %r2893, %r872;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2895, %r2892, %r2893, %r876;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2899, %r2900, %r2901, %r872;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2903, %r2900, %r2901, %r876;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2907, %r2908, %r2909, %r872;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2911, %r2908, %r2909, %r876;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2915, %r2916, %r2917, %r872;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2919, %r2916, %r2917, %r876;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2923, %r2924, %r2925, %r872;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2927, %r2924, %r2925, %r876;
	// end inline asm
	st.shared.u32 	[%rd6], %r2867;
	st.shared.u32 	[%rd7], %r2871;
	st.shared.u32 	[%rd8+128], %r2875;
	st.shared.u32 	[%rd9], %r2879;
	cvt.u16.u32 	%rs270, %r3784;
	and.b16  	%rs271, %rs270, 255;
	mul.lo.s16 	%rs272, %rs271, 171;
	shr.u16 	%rs273, %rs272, 10;
	mul.lo.s16 	%rs274, %rs273, 6;
	sub.s16 	%rs275, %rs270, %rs274;
	shl.b16 	%rs276, %rs275, 2;
	cvt.u32.u16 	%r2960, %rs276;
	and.b32  	%r2961, %r2960, 252;
	add.s32 	%r2962, %r213, %r2961;
	cvt.u16.u32 	%rs277, %r2962;
	shr.s16 	%rs278, %rs277, 15;
	shr.u16 	%rs279, %rs278, 14;
	add.s16 	%rs280, %rs277, %rs279;
	and.b16  	%rs281, %rs280, -4;
	sub.s16 	%rs282, %rs277, %rs281;
	mul.wide.s16 	%r222, %rs282, 64;
	add.s32 	%r2963, %r126, %r222;
	mul.wide.s32 	%rd235, %r2963, 4;
	add.s64 	%rd237, %rd30, %rd235;
	st.shared.u32 	[%rd237], %r2883;
	add.s32 	%r2964, %r2963, 8256;
	mul.wide.u32 	%rd238, %r2964, 4;
	add.s64 	%rd239, %rd30, %rd238;
	st.shared.u32 	[%rd239], %r2887;
	or.b32  	%r223, %r222, 32;
	add.s32 	%r2965, %r126, %r223;
	mul.wide.s32 	%rd240, %r2965, 4;
	add.s64 	%rd241, %rd30, %rd240;
	st.shared.u32 	[%rd241], %r2891;
	add.s32 	%r2966, %r2963, 8288;
	mul.wide.u32 	%rd242, %r2966, 4;
	add.s64 	%rd243, %rd30, %rd242;
	st.shared.u32 	[%rd243], %r2895;
	add.s32 	%r2967, %r214, %r2961;
	cvt.u16.u32 	%rs283, %r2967;
	shr.s16 	%rs284, %rs283, 15;
	shr.u16 	%rs285, %rs284, 14;
	add.s16 	%rs286, %rs283, %rs285;
	and.b16  	%rs287, %rs286, -4;
	sub.s16 	%rs288, %rs283, %rs287;
	mul.wide.s16 	%r224, %rs288, 64;
	add.s32 	%r2968, %r126, %r224;
	mul.wide.s32 	%rd244, %r2968, 4;
	add.s64 	%rd245, %rd30, %rd244;
	st.shared.u32 	[%rd245], %r2899;
	add.s32 	%r2969, %r2968, 8256;
	mul.wide.u32 	%rd246, %r2969, 4;
	add.s64 	%rd247, %rd30, %rd246;
	st.shared.u32 	[%rd247], %r2903;
	or.b32  	%r225, %r224, 32;
	add.s32 	%r2970, %r126, %r225;
	mul.wide.s32 	%rd248, %r2970, 4;
	add.s64 	%rd249, %rd30, %rd248;
	st.shared.u32 	[%rd249], %r2907;
	add.s32 	%r2971, %r2968, 8288;
	mul.wide.u32 	%rd250, %r2971, 4;
	add.s64 	%rd251, %rd30, %rd250;
	st.shared.u32 	[%rd251], %r2911;
	add.s32 	%r2972, %r215, %r2961;
	cvt.u16.u32 	%rs289, %r2972;
	shr.s16 	%rs290, %rs289, 15;
	shr.u16 	%rs291, %rs290, 14;
	add.s16 	%rs292, %rs289, %rs291;
	and.b16  	%rs293, %rs292, -4;
	sub.s16 	%rs294, %rs289, %rs293;
	mul.wide.s16 	%r226, %rs294, 64;
	add.s32 	%r2973, %r126, %r226;
	mul.wide.s32 	%rd252, %r2973, 4;
	add.s64 	%rd253, %rd30, %rd252;
	st.shared.u32 	[%rd253], %r2915;
	add.s32 	%r2974, %r2973, 8256;
	mul.wide.u32 	%rd254, %r2974, 4;
	add.s64 	%rd255, %rd30, %rd254;
	st.shared.u32 	[%rd255], %r2919;
	or.b32  	%r227, %r226, 32;
	add.s32 	%r2975, %r126, %r227;
	mul.wide.s32 	%rd256, %r2975, 4;
	add.s64 	%rd257, %rd30, %rd256;
	st.shared.u32 	[%rd257], %r2923;
	add.s32 	%r2976, %r2973, 8288;
	mul.wide.u32 	%rd258, %r2976, 4;
	add.s64 	%rd259, %rd30, %rd258;
	st.shared.u32 	[%rd259], %r2927;
	bar.sync 	0;
	mov.u32 	%r3789, %r2394;
	mov.u32 	%r3790, %r2394;
	mov.u32 	%r3791, %r2394;
	mov.u32 	%r3792, %r2394;
	@%p216 bra 	LBB0_192;
	bra.uni 	LBB0_152;
LBB0_192:                               // %oksrem10898
                                        //   in Loop: Header=BB0_151 Depth=2
	ld.shared.u32 	%r3792, [%rd10];
	ld.shared.u32 	%r3791, [%rd11];
	ld.shared.u32 	%r3790, [%rd12];
	ld.shared.u32 	%r3789, [%rd13];
LBB0_152:                               // %L29341
                                        //   in Loop: Header=BB0_151 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3012, %r3009}, {%r469, %r472}, {%r3792}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3021, %r3018}, {%r469, %r472}, {%r3791}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3030, %r3027}, {%r469, %r472}, {%r3790}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3039, %r3036}, {%r469, %r472}, {%r3789}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3005, %r524;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3007, %r3005, %r3009;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3010, %r521, %r3012, %r3007;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3014, %r524;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3016, %r3014, %r3018;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3019, %r521, %r3021, %r3016;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3023, %r524;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3025, %r3023, %r3027;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3028, %r521, %r3030, %r3025;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3032, %r524;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3034, %r3032, %r3036;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3037, %r521, %r3039, %r3034;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3041, %r524, %r3012;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3044, %r521, %r3009, %r3041;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3048, %r524, %r3021;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3051, %r521, %r3018, %r3048;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3055, %r524, %r3030;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3058, %r521, %r3027, %r3055;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3062, %r524, %r3039;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3065, %r521, %r3036, %r3062;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3110, %r3113}, {%r565, %r571, %r568, %r574}, {%r3010, %r3044}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3129, %r3132}, {%r565, %r571, %r568, %r574}, {%r3019, %r3051}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3117, %r3121}, {%r565, %r571, %r568, %r574}, {%r3028, %r3058}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3136, %r3140}, {%r565, %r571, %r568, %r574}, {%r3037, %r3065}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3109, %r3110, %r3110;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3112, %r3113, %r3113, %r3109;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3116, %r3117, %r3117, %r3112;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3120, %r3121, %r3121, %r3116;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3124, %r1833, %r3120, %r3762;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3128, %r3129, %r3129;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3131, %r3132, %r3132, %r3128;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3135, %r3136, %r3136, %r3131;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3139, %r3140, %r3140, %r3135;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3143, %r1833, %r3139, %r3761;
	// end inline asm
	mov.u32 	%r3793, %r2394;
	mov.u32 	%r3794, %r2394;
	mov.u32 	%r3795, %r2394;
	mov.u32 	%r3796, %r2394;
	@%p216 bra 	LBB0_193;
	bra.uni 	LBB0_153;
LBB0_193:                               // %oksrem11445
                                        //   in Loop: Header=BB0_151 Depth=2
	add.s32 	%r3148, %r129, %r222;
	add.s32 	%r3149, %r3148, %r127;
	add.s32 	%r3150, %r3149, %r128;
	mul.wide.s32 	%rd260, %r3150, 4;
	add.s64 	%rd262, %rd30, %rd260;
	ld.shared.u32 	%r3796, [%rd262];
	add.s32 	%r3151, %r3148, %r130;
	add.s32 	%r3152, %r3151, %r131;
	add.s32 	%r3153, %r3152, %r132;
	mul.wide.s32 	%rd263, %r3153, 4;
	add.s64 	%rd264, %rd30, %rd263;
	ld.shared.u32 	%r3795, [%rd264];
	add.s32 	%r3154, %r129, %r223;
	add.s32 	%r3155, %r3154, %r127;
	add.s32 	%r3156, %r3155, %r128;
	mul.wide.s32 	%rd265, %r3156, 4;
	add.s64 	%rd266, %rd30, %rd265;
	ld.shared.u32 	%r3794, [%rd266];
	add.s32 	%r3157, %r3154, %r130;
	add.s32 	%r3158, %r3157, %r131;
	add.s32 	%r3159, %r3158, %r132;
	mul.wide.s32 	%rd267, %r3159, 4;
	add.s64 	%rd268, %rd30, %rd267;
	ld.shared.u32 	%r3793, [%rd268];
LBB0_153:                               // %L30707
                                        //   in Loop: Header=BB0_151 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3195, %r3192}, {%r469, %r472}, {%r3796}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3204, %r3201}, {%r469, %r472}, {%r3795}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3213, %r3210}, {%r469, %r472}, {%r3794}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3222, %r3219}, {%r469, %r472}, {%r3793}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3188, %r524;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3190, %r3188, %r3192;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3193, %r521, %r3195, %r3190;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3197, %r524;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3199, %r3197, %r3201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3202, %r521, %r3204, %r3199;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3206, %r524;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3208, %r3206, %r3210;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3211, %r521, %r3213, %r3208;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3215, %r524;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3217, %r3215, %r3219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3220, %r521, %r3222, %r3217;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3224, %r524, %r3195;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3227, %r521, %r3192, %r3224;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3231, %r524, %r3204;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3234, %r521, %r3201, %r3231;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3238, %r524, %r3213;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3241, %r521, %r3210, %r3238;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3245, %r524, %r3222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3248, %r521, %r3219, %r3245;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3293, %r3296}, {%r565, %r571, %r568, %r574}, {%r3193, %r3227}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3312, %r3315}, {%r565, %r571, %r568, %r574}, {%r3202, %r3234}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3300, %r3304}, {%r565, %r571, %r568, %r574}, {%r3211, %r3241}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3319, %r3323}, {%r565, %r571, %r568, %r574}, {%r3220, %r3248}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3292, %r3293, %r3293;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3295, %r3296, %r3296, %r3292;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3299, %r3300, %r3300, %r3295;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3303, %r3304, %r3304, %r3299;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3307, %r1833, %r3303, %r3124;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3311, %r3312, %r3312;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3314, %r3315, %r3315, %r3311;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3318, %r3319, %r3319, %r3314;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3322, %r3323, %r3323, %r3318;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3326, %r1833, %r3322, %r3143;
	// end inline asm
	mov.u32 	%r3797, %r2394;
	mov.u32 	%r3798, %r2394;
	mov.u32 	%r3799, %r2394;
	mov.u32 	%r3800, %r2394;
	@%p216 bra 	LBB0_194;
	bra.uni 	LBB0_154;
LBB0_194:                               // %oksrem11992
                                        //   in Loop: Header=BB0_151 Depth=2
	add.s32 	%r3331, %r129, %r224;
	add.s32 	%r3332, %r3331, %r127;
	add.s32 	%r3333, %r3332, %r128;
	mul.wide.s32 	%rd269, %r3333, 4;
	add.s64 	%rd271, %rd30, %rd269;
	ld.shared.u32 	%r3800, [%rd271];
	add.s32 	%r3334, %r3331, %r130;
	add.s32 	%r3335, %r3334, %r131;
	add.s32 	%r3336, %r3335, %r132;
	mul.wide.s32 	%rd272, %r3336, 4;
	add.s64 	%rd273, %rd30, %rd272;
	ld.shared.u32 	%r3799, [%rd273];
	add.s32 	%r3337, %r129, %r225;
	add.s32 	%r3338, %r3337, %r127;
	add.s32 	%r3339, %r3338, %r128;
	mul.wide.s32 	%rd274, %r3339, 4;
	add.s64 	%rd275, %rd30, %rd274;
	ld.shared.u32 	%r3798, [%rd275];
	add.s32 	%r3340, %r3337, %r130;
	add.s32 	%r3341, %r3340, %r131;
	add.s32 	%r3342, %r3341, %r132;
	mul.wide.s32 	%rd276, %r3342, 4;
	add.s64 	%rd277, %rd30, %rd276;
	ld.shared.u32 	%r3797, [%rd277];
LBB0_154:                               // %L32073
                                        //   in Loop: Header=BB0_151 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3378, %r3375}, {%r469, %r472}, {%r3800}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3387, %r3384}, {%r469, %r472}, {%r3799}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3396, %r3393}, {%r469, %r472}, {%r3798}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3405, %r3402}, {%r469, %r472}, {%r3797}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3371, %r524;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3373, %r3371, %r3375;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3376, %r521, %r3378, %r3373;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3380, %r524;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3382, %r3380, %r3384;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3385, %r521, %r3387, %r3382;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3389, %r524;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3391, %r3389, %r3393;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3394, %r521, %r3396, %r3391;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3398, %r524;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3400, %r3398, %r3402;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3403, %r521, %r3405, %r3400;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3407, %r524, %r3378;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3410, %r521, %r3375, %r3407;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3414, %r524, %r3387;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3417, %r521, %r3384, %r3414;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3421, %r524, %r3396;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3424, %r521, %r3393, %r3421;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3428, %r524, %r3405;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3431, %r521, %r3402, %r3428;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3476, %r3479}, {%r565, %r571, %r568, %r574}, {%r3376, %r3410}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3495, %r3498}, {%r565, %r571, %r568, %r574}, {%r3385, %r3417}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3483, %r3487}, {%r565, %r571, %r568, %r574}, {%r3394, %r3424}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3502, %r3506}, {%r565, %r571, %r568, %r574}, {%r3403, %r3431}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3475, %r3476, %r3476;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3478, %r3479, %r3479, %r3475;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3482, %r3483, %r3483, %r3478;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3486, %r3487, %r3487, %r3482;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3490, %r1833, %r3486, %r3307;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3494, %r3495, %r3495;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3497, %r3498, %r3498, %r3494;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3501, %r3502, %r3502, %r3497;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3505, %r3506, %r3506, %r3501;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3509, %r1833, %r3505, %r3326;
	// end inline asm
	mov.u32 	%r3801, %r2394;
	mov.u32 	%r3802, %r2394;
	mov.u32 	%r3803, %r2394;
	mov.u32 	%r3804, %r2394;
	@%p216 bra 	LBB0_195;
	bra.uni 	LBB0_155;
LBB0_195:                               // %oksrem12539
                                        //   in Loop: Header=BB0_151 Depth=2
	add.s32 	%r3514, %r129, %r226;
	add.s32 	%r3515, %r3514, %r127;
	add.s32 	%r3516, %r3515, %r128;
	mul.wide.s32 	%rd278, %r3516, 4;
	add.s64 	%rd280, %rd30, %rd278;
	ld.shared.u32 	%r3804, [%rd280];
	add.s32 	%r3517, %r3514, %r130;
	add.s32 	%r3518, %r3517, %r131;
	add.s32 	%r3519, %r3518, %r132;
	mul.wide.s32 	%rd281, %r3519, 4;
	add.s64 	%rd282, %rd30, %rd281;
	ld.shared.u32 	%r3803, [%rd282];
	add.s32 	%r3520, %r129, %r227;
	add.s32 	%r3521, %r3520, %r127;
	add.s32 	%r3522, %r3521, %r128;
	mul.wide.s32 	%rd283, %r3522, 4;
	add.s64 	%rd284, %rd30, %rd283;
	ld.shared.u32 	%r3802, [%rd284];
	add.s32 	%r3523, %r3520, %r130;
	add.s32 	%r3524, %r3523, %r131;
	add.s32 	%r3525, %r3524, %r132;
	mul.wide.s32 	%rd285, %r3525, 4;
	add.s64 	%rd286, %rd30, %rd285;
	ld.shared.u32 	%r3801, [%rd286];
LBB0_155:                               // %L33439
                                        //   in Loop: Header=BB0_151 Depth=2
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3561, %r3558}, {%r469, %r472}, {%r3804}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3570, %r3567}, {%r469, %r472}, {%r3803}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3579, %r3576}, {%r469, %r472}, {%r3802}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3588, %r3585}, {%r469, %r472}, {%r3801}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3554, %r524;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3556, %r3554, %r3558;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3559, %r521, %r3561, %r3556;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3563, %r524;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3565, %r3563, %r3567;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3568, %r521, %r3570, %r3565;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3572, %r524;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3574, %r3572, %r3576;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3577, %r521, %r3579, %r3574;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3581, %r524;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3583, %r3581, %r3585;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3586, %r521, %r3588, %r3583;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3590, %r524, %r3561;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3593, %r521, %r3558, %r3590;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3597, %r524, %r3570;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3600, %r521, %r3567, %r3597;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3604, %r524, %r3579;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3607, %r521, %r3576, %r3604;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3611, %r524, %r3588;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3614, %r521, %r3585, %r3611;
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3659, %r3662}, {%r565, %r571, %r568, %r574}, {%r3559, %r3593}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3678, %r3681}, {%r565, %r571, %r568, %r574}, {%r3568, %r3600}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3666, %r3670}, {%r565, %r571, %r568, %r574}, {%r3577, %r3607}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3685, %r3689}, {%r565, %r571, %r568, %r574}, {%r3586, %r3614}, {%r2394, %r2394};
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3658, %r3659, %r3659;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3661, %r3662, %r3662, %r3658;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3665, %r3666, %r3666, %r3661;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3669, %r3670, %r3670, %r3665;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3762, %r1833, %r3669, %r3490;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3677, %r3678, %r3678;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3680, %r3681, %r3681, %r3677;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3684, %r3685, %r3685, %r3680;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3688, %r3689, %r3689, %r3684;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3761, %r1833, %r3688, %r3509;
	// end inline asm
	add.s32 	%r3759, %r3759, 4;
	setp.ne.s32 	%p240, %r3759, 40;
	@%p240 bra 	LBB0_159;
// %bb.156:                             // %L33627
                                        //   in Loop: Header=BB0_151 Depth=2
	@%p67 bra 	LBB0_158;
// %bb.157:                             // %L33693
                                        //   in Loop: Header=BB0_151 Depth=2
	mul.lo.s32 	%r3696, %r3760, 1152;
	add.s32 	%r3697, %r133, %r3696;
	add.s32 	%r3698, %r3697, %r134;
	add.s32 	%r3699, %r3698, %r100;
	mul.wide.u32 	%rd287, %r3699, 4;
	add.s64 	%rd288, %rd4, %rd287;
	st.global.u32 	[%rd288], %r3762;
	add.s32 	%r3700, %r134, %r3696;
	add.s32 	%r3701, %r3700, %r135;
	add.s32 	%r3702, %r3701, %r100;
	mul.wide.u32 	%rd289, %r3702, 4;
	add.s64 	%rd290, %rd4, %rd289;
	st.global.u32 	[%rd290], %r3761;
	bra.uni 	LBB0_158;
LBB0_161:                               // %L33989
	mov.u32 	%r3704, 0;
	st.global.u32 	[%rd5], %r3704;
	ret;
LBB0_1:                                 // %L9
	ld.param.u32 	%r341, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd15, [_Z3frb13CuDeviceArrayI7Int16x2Li1ELi1EES_I9Float16x2Li1ELi1EES_I6Int4x8Li1ELi1EES_IS1_Li1ELi1EES_I5Int32Li1ELi1EE_param_0];
	mov.u64 	%rd20, exception1;
	cvta.global.u64 	%rd21, %rd20;
	{ // callseq 4, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd21;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 4
	{ // callseq 5, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd15;
	st.param.b32 	[param0+8], %r341;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 5
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
