// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception2451[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception2499[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 512, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<323>;
	.reg .b16 	%rs<97>;
	.reg .b32 	%r<3423>;
	.reg .f32 	%f<752>;
	.reg .b64 	%rd<340>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r249, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd59, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r258, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r258, 34943;
	@%p2 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd60, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r250, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %tid.y;
	shl.b32 	%r3, %r2, 5;
	mov.u32 	%r4, %ctaid.x;
	shl.b32 	%r5, %r4, 9;
	or.b32  	%r259, %r3, %r1;
	or.b32  	%r260, %r259, %r5;
	mul.wide.u32 	%rd67, %r260, 4;
	add.s64 	%rd6, %rd60, %rd67;
	mov.u32 	%r261, 1;
	st.global.u32 	[%rd6], %r261;
	setp.gt.u32 	%p3, %r250, 1023;
	@%p3 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r251, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p4, %r251, %r250;
	setp.gt.s32 	%p5, %r251, 2047;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r252, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r251, %r250;
	and.b32  	%r262, %r6, 63;
	setp.ne.s32 	%p7, %r262, 0;
	setp.gt.u32 	%p8, %r252, 1023;
	or.pred  	%p9, %p7, %p8;
	@%p9 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r253, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p10, %r253, %r252;
	setp.lt.s32 	%p11, %r253, 2048;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r263, %r253, %r252;
	mul.hi.s32 	%r264, %r6, 715827883;
	shr.u32 	%r265, %r264, 31;
	add.s32 	%r266, %r264, %r265;
	setp.eq.s32 	%p13, %r263, %r266;
	@%p13 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L258
	ld.param.u32 	%r254, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p14, %r254, 0;
	@%p14 bra 	$L__BB0_13;
// %bb.9:                               // %L260
	ld.param.u32 	%r255, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p15, %r255, %r254;
	setp.gt.s32 	%p16, %r255, 64;
	or.pred  	%p17, %p15, %p16;
	@%p17 bra 	$L__BB0_13;
// %bb.10:                              // %L270
	ld.param.u32 	%r256, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r7, %r255, %r254;
	and.b32  	%r267, %r7, 63;
	setp.ne.s32 	%p18, %r267, 0;
	setp.lt.s32 	%p19, %r256, 0;
	or.pred  	%p20, %p18, %p19;
	@%p20 bra 	$L__BB0_13;
// %bb.11:                              // %L276
	ld.param.u32 	%r257, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p21, %r257, %r256;
	setp.gt.s32 	%p22, %r257, 2048;
	or.pred  	%p23, %p21, %p22;
	@%p23 bra 	$L__BB0_13;
// %bb.12:                              // %L286
	sub.s32 	%r268, %r257, %r256;
	and.b32  	%r269, %r268, 63;
	setp.eq.s32 	%p24, %r269, 0;
	setp.eq.s32 	%p25, %r268, %r7;
	and.pred  	%p26, %p24, %p25;
	@%p26 bra 	$L__BB0_164;
	bra.uni 	$L__BB0_13;
$L__BB0_164:                            // %pass162
	and.b32  	%r128, %r1, 3;
	shr.u32 	%r129, %r1, 2;
	mul.lo.s32 	%r270, %r128, %r129;
	and.b32  	%r271, %r270, 7;
	cvt.rn.f32.s32 	%f185, %r271;
	mov.f32 	%f186, 0f40800000;
	div.approx.f32 	%f151, %f185, %f186;
	abs.f32 	%f750, %f151;
	setp.lt.f32 	%p27, %f750, 0f40000000;
	mov.f32 	%f703, 0f40000000;
	setp.gtu.f32 	%p318, %f750, 0f4B800000;
	mov.f32 	%f746, %f750;
	@%p27 bra 	$L__BB0_176;
// %bb.165:
	@%p318 bra 	$L__BB0_172;
	bra.uni 	$L__BB0_166;
$L__BB0_172:
	mov.b32 	%r131, %f750;
	and.b32  	%r272, %r131, 8388607;
	or.b32  	%r3400, %r272, 1065353216;
	mov.b32 	%f745, %r3400;
	add.s32 	%r273, %r131, -1073741824;
	and.b32  	%r3401, %r273, -8388608;
	setp.eq.s32 	%p34, %r3401, 0;
	@%p34 bra 	$L__BB0_175;
// %bb.173:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f196, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f195,%f196;
	// end inline asm
$L__BB0_174:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r274, %r3401, 192937984;
	add.s32 	%r275, %r3400, %r274;
	mov.b32 	%f197, %r275;
	mul.f32 	%f198, %f195, %f197;
	sub.f32 	%f199, %f197, %f198;
	fma.rn.f32 	%f200, %f199, %f195, %f198;
	sub.f32 	%f201, %f197, %f200;
	fma.rz.f32 	%f202, %f201, %f195, %f200;
	cvt.rzi.f32.f32 	%f203, %f202;
	sub.f32 	%f745, %f197, %f203;
	sub.s32 	%r3401, %r3401, %r274;
	mov.b32 	%r3400, %f745;
	setp.ne.s32 	%p35, %r3401, 0;
	setp.ne.s32 	%p36, %r3400, 0;
	and.pred  	%p37, %p35, %p36;
	@%p37 bra 	$L__BB0_174;
$L__BB0_175:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p38, %r131, 2139095039;
	selp.f32 	%f204, 0f7FFFFFFF, 0f4B800000, %p38;
	mul.f32 	%f205, %f745, 0f34000000;
	mul.f32 	%f746, %f204, %f205;
	bra.uni 	$L__BB0_176;
$L__BB0_166:                            // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f188, %f750, %f703;
	cvt.rzi.f32.f32 	%f744, %f188;
	fma.rn.f32 	%f154, %f744, 0fC0000000, %f750;
	mov.b32 	%r130, %f154;
	setp.lt.u32 	%p29, %r130, 1073741824;
	@%p29 bra 	$L__BB0_171;
// %bb.167:
	setp.lt.u32 	%p30, %r130, -2147483647;
	@%p30 bra 	$L__BB0_169;
// %bb.168:
	add.f32 	%f193, %f744, 0fBF800000;
	setp.lt.f32 	%p33, %f154, 0fC0000000;
	add.f32 	%f194, %f193, 0fBF800000;
	selp.f32 	%f744, %f194, %f193, %p33;
	bra.uni 	$L__BB0_171;
$L__BB0_169:
	add.f32 	%f744, %f744, 0f3F800000;
	setp.ltu.f32 	%p31, %f154, 0f40800000;
	@%p31 bra 	$L__BB0_171;
// %bb.170:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f189, %f744, 0f3F800000;
	fma.rn.f32 	%f191, %f703, 0fC0400000, %f154;
	setp.ge.f32 	%p32, %f191, 0f00000000;
	add.f32 	%f192, %f189, 0f3F800000;
	selp.f32 	%f744, %f192, %f189, %p32;
$L__BB0_171:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f746, %f744, 0fC0000000, %f750;
$L__BB0_176:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f206, %f746;
	setp.gtu.f32 	%p39, %f206, 0f7F800000;
	mov.b32 	%r276, %f151;
	and.b32  	%r138, %r276, -2147483648;
	@%p39 bra 	$L__BB0_178;
// %bb.177:
	mov.b32 	%r277, %f746;
	or.b32  	%r278, %r138, %r277;
	mov.b32 	%f746, %r278;
$L__BB0_178:                            // %__nv_fmodf.exit
	shl.b32 	%r141, %r1, 1;
	and.b32  	%r293, %r141, 2;
	mul.lo.s32 	%r142, %r293, %r129;
	cvt.rn.f32.s32 	%f239, %r142;
	mov.f32 	%f240, 0f41800000;
	div.approx.f32 	%f168, %f239, %f240;
	abs.f32 	%f726, %f168;
	setp.lt.f32 	%p47, %f726, 0f40000000;
	setp.gtu.f32 	%p319, %f726, 0f4B800000;
	mov.f32 	%f706, %f726;
	@%p47 bra 	$L__BB0_25;
// %bb.14:
	@%p319 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_15;
$L__BB0_21:
	mov.b32 	%r9, %f726;
	and.b32  	%r294, %r9, 8388607;
	or.b32  	%r3366, %r294, 1065353216;
	mov.b32 	%f705, %r3366;
	add.s32 	%r295, %r9, -1073741824;
	and.b32  	%r3367, %r295, -8388608;
	setp.eq.s32 	%p54, %r3367, 0;
	@%p54 bra 	$L__BB0_24;
// %bb.22:                              // %__nv_fmaf_rn.exit4.i.i.i2328.preheader
	mov.f32 	%f250, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f249,%f250;
	// end inline asm
$L__BB0_23:                             // %__nv_fmaf_rn.exit4.i.i.i2328
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r296, %r3367, 192937984;
	add.s32 	%r297, %r3366, %r296;
	mov.b32 	%f251, %r297;
	mul.f32 	%f252, %f249, %f251;
	sub.f32 	%f253, %f251, %f252;
	fma.rn.f32 	%f254, %f253, %f249, %f252;
	sub.f32 	%f255, %f251, %f254;
	fma.rz.f32 	%f256, %f255, %f249, %f254;
	cvt.rzi.f32.f32 	%f257, %f256;
	sub.f32 	%f705, %f251, %f257;
	sub.s32 	%r3367, %r3367, %r296;
	mov.b32 	%r3366, %f705;
	setp.ne.s32 	%p55, %r3367, 0;
	setp.ne.s32 	%p56, %r3366, 0;
	and.pred  	%p57, %p55, %p56;
	@%p57 bra 	$L__BB0_23;
$L__BB0_24:                             // %__internal_fmodf_slowpath_mod.exit.i.i2330
	setp.gt.u32 	%p58, %r9, 2139095039;
	selp.f32 	%f258, 0f7FFFFFFF, 0f4B800000, %p58;
	mul.f32 	%f259, %f705, 0f34000000;
	mul.f32 	%f706, %f258, %f259;
	bra.uni 	$L__BB0_25;
$L__BB0_15:                             // %__nv_fast_fdividef.exit.i.i.i2307
	div.approx.f32 	%f242, %f726, %f703;
	cvt.rzi.f32.f32 	%f704, %f242;
	fma.rn.f32 	%f2, %f704, 0fC0000000, %f726;
	mov.b32 	%r8, %f2;
	setp.lt.u32 	%p49, %r8, 1073741824;
	@%p49 bra 	$L__BB0_20;
// %bb.16:
	setp.lt.u32 	%p50, %r8, -2147483647;
	@%p50 bra 	$L__BB0_18;
// %bb.17:
	add.f32 	%f247, %f704, 0fBF800000;
	setp.lt.f32 	%p53, %f2, 0fC0000000;
	add.f32 	%f248, %f247, 0fBF800000;
	selp.f32 	%f704, %f248, %f247, %p53;
	bra.uni 	$L__BB0_20;
$L__BB0_18:
	add.f32 	%f704, %f704, 0f3F800000;
	setp.ltu.f32 	%p51, %f2, 0f40800000;
	@%p51 bra 	$L__BB0_20;
// %bb.19:                              // %__nv_fmaf_rn.exit.i.i.i2311
	add.f32 	%f243, %f704, 0f3F800000;
	fma.rn.f32 	%f245, %f703, 0fC0400000, %f2;
	setp.ge.f32 	%p52, %f245, 0f00000000;
	add.f32 	%f246, %f243, 0f3F800000;
	selp.f32 	%f704, %f246, %f243, %p52;
$L__BB0_20:                             // %__internal_fmodf_fastpath_quot.exit.i.i2314
	fma.rn.f32 	%f706, %f704, 0fC0000000, %f726;
$L__BB0_25:                             // %__internal_fmodf_kernel.exit.i2333
	abs.f32 	%f260, %f706;
	setp.gtu.f32 	%p59, %f260, 0f7F800000;
	mov.b32 	%r298, %f168;
	and.b32  	%r16, %r298, -2147483648;
	@%p59 bra 	$L__BB0_27;
// %bb.26:
	mov.b32 	%r299, %f706;
	or.b32  	%r300, %r16, %r299;
	mov.b32 	%f706, %r300;
$L__BB0_27:                             // %__nv_fmodf.exit2334
	add.s32 	%r309, %r142, %r129;
	cvt.rn.f32.s32 	%f291, %r309;
	div.approx.f32 	%f18, %f291, %f240;
	abs.f32 	%f730, %f18;
	setp.lt.f32 	%p67, %f730, 0f40000000;
	setp.gtu.f32 	%p320, %f730, 0f4B800000;
	mov.f32 	%f710, %f730;
	@%p67 bra 	$L__BB0_39;
// %bb.28:
	@%p320 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_29;
$L__BB0_35:
	mov.b32 	%r18, %f730;
	and.b32  	%r310, %r18, 8388607;
	or.b32  	%r3368, %r310, 1065353216;
	mov.b32 	%f709, %r3368;
	add.s32 	%r311, %r18, -1073741824;
	and.b32  	%r3369, %r311, -8388608;
	setp.eq.s32 	%p74, %r3369, 0;
	@%p74 bra 	$L__BB0_38;
// %bb.36:                              // %__nv_fmaf_rn.exit4.i.i.i2359.preheader
	mov.f32 	%f302, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f301,%f302;
	// end inline asm
$L__BB0_37:                             // %__nv_fmaf_rn.exit4.i.i.i2359
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r312, %r3369, 192937984;
	add.s32 	%r313, %r3368, %r312;
	mov.b32 	%f303, %r313;
	mul.f32 	%f304, %f301, %f303;
	sub.f32 	%f305, %f303, %f304;
	fma.rn.f32 	%f306, %f305, %f301, %f304;
	sub.f32 	%f307, %f303, %f306;
	fma.rz.f32 	%f308, %f307, %f301, %f306;
	cvt.rzi.f32.f32 	%f309, %f308;
	sub.f32 	%f709, %f303, %f309;
	sub.s32 	%r3369, %r3369, %r312;
	mov.b32 	%r3368, %f709;
	setp.ne.s32 	%p75, %r3369, 0;
	setp.ne.s32 	%p76, %r3368, 0;
	and.pred  	%p77, %p75, %p76;
	@%p77 bra 	$L__BB0_37;
$L__BB0_38:                             // %__internal_fmodf_slowpath_mod.exit.i.i2361
	setp.gt.u32 	%p78, %r18, 2139095039;
	selp.f32 	%f310, 0f7FFFFFFF, 0f4B800000, %p78;
	mul.f32 	%f311, %f709, 0f34000000;
	mul.f32 	%f710, %f310, %f311;
	bra.uni 	$L__BB0_39;
$L__BB0_29:                             // %__nv_fast_fdividef.exit.i.i.i2338
	div.approx.f32 	%f294, %f730, %f703;
	cvt.rzi.f32.f32 	%f708, %f294;
	fma.rn.f32 	%f21, %f708, 0fC0000000, %f730;
	mov.b32 	%r17, %f21;
	setp.lt.u32 	%p69, %r17, 1073741824;
	@%p69 bra 	$L__BB0_34;
// %bb.30:
	setp.lt.u32 	%p70, %r17, -2147483647;
	@%p70 bra 	$L__BB0_32;
// %bb.31:
	add.f32 	%f299, %f708, 0fBF800000;
	setp.lt.f32 	%p73, %f21, 0fC0000000;
	add.f32 	%f300, %f299, 0fBF800000;
	selp.f32 	%f708, %f300, %f299, %p73;
	bra.uni 	$L__BB0_34;
$L__BB0_32:
	add.f32 	%f708, %f708, 0f3F800000;
	setp.ltu.f32 	%p71, %f21, 0f40800000;
	@%p71 bra 	$L__BB0_34;
// %bb.33:                              // %__nv_fmaf_rn.exit.i.i.i2342
	add.f32 	%f295, %f708, 0f3F800000;
	fma.rn.f32 	%f297, %f703, 0fC0400000, %f21;
	setp.ge.f32 	%p72, %f297, 0f00000000;
	add.f32 	%f298, %f295, 0f3F800000;
	selp.f32 	%f708, %f298, %f295, %p72;
$L__BB0_34:                             // %__internal_fmodf_fastpath_quot.exit.i.i2345
	fma.rn.f32 	%f710, %f708, 0fC0000000, %f730;
$L__BB0_39:                             // %__internal_fmodf_kernel.exit.i2364
	abs.f32 	%f312, %f710;
	setp.gtu.f32 	%p79, %f312, 0f7F800000;
	mov.b32 	%r314, %f18;
	and.b32  	%r25, %r314, -2147483648;
	@%p79 bra 	$L__BB0_41;
// %bb.40:
	mov.b32 	%r315, %f710;
	or.b32  	%r316, %r25, %r315;
	mov.b32 	%f710, %r316;
$L__BB0_41:                             // %__nv_fmodf.exit2365
	mul.lo.s32 	%r28, %r141, %r129;
	and.b32  	%r331, %r28, 2;
	cvt.rn.f32.s32 	%f345, %r331;
	div.approx.f32 	%f35, %f345, %f703;
	abs.f32 	%f734, %f35;
	setp.lt.f32 	%p87, %f734, 0f40000000;
	setp.gtu.f32 	%p321, %f734, 0f4B800000;
	mov.f32 	%f714, %f734;
	@%p87 bra 	$L__BB0_53;
// %bb.42:
	@%p321 bra 	$L__BB0_49;
	bra.uni 	$L__BB0_43;
$L__BB0_49:
	mov.b32 	%r30, %f734;
	and.b32  	%r332, %r30, 8388607;
	or.b32  	%r3370, %r332, 1065353216;
	mov.b32 	%f713, %r3370;
	add.s32 	%r333, %r30, -1073741824;
	and.b32  	%r3371, %r333, -8388608;
	setp.eq.s32 	%p94, %r3371, 0;
	@%p94 bra 	$L__BB0_52;
// %bb.50:                              // %__nv_fmaf_rn.exit4.i.i.i2390.preheader
	mov.f32 	%f356, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f355,%f356;
	// end inline asm
$L__BB0_51:                             // %__nv_fmaf_rn.exit4.i.i.i2390
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r334, %r3371, 192937984;
	add.s32 	%r335, %r3370, %r334;
	mov.b32 	%f357, %r335;
	mul.f32 	%f358, %f355, %f357;
	sub.f32 	%f359, %f357, %f358;
	fma.rn.f32 	%f360, %f359, %f355, %f358;
	sub.f32 	%f361, %f357, %f360;
	fma.rz.f32 	%f362, %f361, %f355, %f360;
	cvt.rzi.f32.f32 	%f363, %f362;
	sub.f32 	%f713, %f357, %f363;
	sub.s32 	%r3371, %r3371, %r334;
	mov.b32 	%r3370, %f713;
	setp.ne.s32 	%p95, %r3371, 0;
	setp.ne.s32 	%p96, %r3370, 0;
	and.pred  	%p97, %p95, %p96;
	@%p97 bra 	$L__BB0_51;
$L__BB0_52:                             // %__internal_fmodf_slowpath_mod.exit.i.i2392
	setp.gt.u32 	%p98, %r30, 2139095039;
	selp.f32 	%f364, 0f7FFFFFFF, 0f4B800000, %p98;
	mul.f32 	%f365, %f713, 0f34000000;
	mul.f32 	%f714, %f364, %f365;
	bra.uni 	$L__BB0_53;
$L__BB0_43:                             // %__nv_fast_fdividef.exit.i.i.i2369
	div.approx.f32 	%f348, %f734, %f703;
	cvt.rzi.f32.f32 	%f712, %f348;
	fma.rn.f32 	%f38, %f712, 0fC0000000, %f734;
	mov.b32 	%r29, %f38;
	setp.lt.u32 	%p89, %r29, 1073741824;
	@%p89 bra 	$L__BB0_48;
// %bb.44:
	setp.lt.u32 	%p90, %r29, -2147483647;
	@%p90 bra 	$L__BB0_46;
// %bb.45:
	add.f32 	%f353, %f712, 0fBF800000;
	setp.lt.f32 	%p93, %f38, 0fC0000000;
	add.f32 	%f354, %f353, 0fBF800000;
	selp.f32 	%f712, %f354, %f353, %p93;
	bra.uni 	$L__BB0_48;
$L__BB0_46:
	add.f32 	%f712, %f712, 0f3F800000;
	setp.ltu.f32 	%p91, %f38, 0f40800000;
	@%p91 bra 	$L__BB0_48;
// %bb.47:                              // %__nv_fmaf_rn.exit.i.i.i2373
	add.f32 	%f349, %f712, 0f3F800000;
	fma.rn.f32 	%f351, %f703, 0fC0400000, %f38;
	setp.ge.f32 	%p92, %f351, 0f00000000;
	add.f32 	%f352, %f349, 0f3F800000;
	selp.f32 	%f712, %f352, %f349, %p92;
$L__BB0_48:                             // %__internal_fmodf_fastpath_quot.exit.i.i2376
	fma.rn.f32 	%f714, %f712, 0fC0000000, %f734;
$L__BB0_53:                             // %__internal_fmodf_kernel.exit.i2395
	mov.f32 	%f230, 0f00000000;
	abs.f32 	%f366, %f714;
	setp.gtu.f32 	%p99, %f366, 0f7F800000;
	mov.b32 	%r336, %f35;
	and.b32  	%r37, %r336, -2147483648;
	@%p99 bra 	$L__BB0_55;
// %bb.54:
	mov.b32 	%r337, %f714;
	or.b32  	%r338, %r37, %r337;
	mov.b32 	%f714, %r338;
$L__BB0_55:                             // %__nv_fmodf.exit2396
	add.f32 	%f367, %f714, %f714;
	mov.b32 	%r339, %f367;
	and.b32  	%r340, %r339, -2147483648;
	or.b32  	%r341, %r340, 1056964608;
	mov.b32 	%f368, %r341;
	add.f32 	%f369, %f367, %f368;
	cvt.rzi.f32.f32 	%f370, %f369;
	abs.f32 	%f371, %f367;
	setp.gt.f32 	%p100, %f371, 0f4B000000;
	selp.f32 	%f372, %f367, %f370, %p100;
	cvt.rzi.f32.f32 	%f373, %f367;
	setp.lt.f32 	%p101, %f371, 0f3F000000;
	selp.f32 	%f374, %f373, %f372, %p101;
	cvt.rzi.s32.f32 	%r342, %f374;
	fma.rn.f32 	%f375, %f374, 0fBF000000, %f714;
	mul.f32 	%f376, %f375, %f375;
	fma.rn.f32 	%f377, %f376, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f378, %f376, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f379, %f377, %f376, 0fC0A55DF6;
	fma.rn.f32 	%f380, %f378, %f376, 0f4081E0CF;
	fma.rn.f32 	%f381, %f376, %f375, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f376, 0fC09DE9E6;
	fma.rn.f32 	%f383, %f379, %f381, 0f00000000;
	fma.rn.f32 	%f384, %f382, %f376, 0f3F800000;
	fma.rn.f32 	%f385, %f375, 0f40490FDB, %f383;
	and.b32  	%r343, %r342, 1;
	setp.eq.b32 	%p102, %r343, 1;
	selp.f32 	%f386, %f384, %f385, %p102;
	selp.f32 	%f387, %f385, %f384, %p102;
	and.b32  	%r344, %r342, 2;
	setp.eq.s32 	%p103, %r344, 0;
	neg.f32 	%f388, %f386;
	selp.f32 	%f389, %f386, %f388, %p103;
	add.s32 	%r345, %r342, 1;
	and.b32  	%r346, %r345, 2;
	setp.eq.s32 	%p104, %r346, 0;
	sub.f32 	%f391, %f230, %f387;
	cvt.rzi.f32.f32 	%f393, %f714;
	setp.eq.f32 	%p105, %f393, %f714;
	mul.f32 	%f394, %f714, 0f00000000;
	selp.f32 	%f76, %f394, %f389, %p105;
	abs.f32 	%f395, %f714;
	add.s32 	%r347, %r28, %r129;
	and.b32  	%r348, %r347, 3;
	cvt.rn.f32.s32 	%f397, %r348;
	div.approx.f32 	%f54, %f397, %f703;
	abs.f32 	%f738, %f54;
	setp.lt.f32 	%p107, %f738, 0f40000000;
	setp.gtu.f32 	%p322, %f738, 0f4B800000;
	mov.f32 	%f718, %f738;
	@%p107 bra 	$L__BB0_67;
// %bb.56:
	@%p322 bra 	$L__BB0_63;
	bra.uni 	$L__BB0_57;
$L__BB0_63:
	mov.b32 	%r39, %f738;
	and.b32  	%r349, %r39, 8388607;
	or.b32  	%r3372, %r349, 1065353216;
	mov.b32 	%f717, %r3372;
	add.s32 	%r350, %r39, -1073741824;
	and.b32  	%r3373, %r350, -8388608;
	setp.eq.s32 	%p114, %r3373, 0;
	@%p114 bra 	$L__BB0_66;
// %bb.64:                              // %__nv_fmaf_rn.exit4.i.i.i2421.preheader
	mov.f32 	%f408, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f407,%f408;
	// end inline asm
$L__BB0_65:                             // %__nv_fmaf_rn.exit4.i.i.i2421
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r351, %r3373, 192937984;
	add.s32 	%r352, %r3372, %r351;
	mov.b32 	%f409, %r352;
	mul.f32 	%f410, %f407, %f409;
	sub.f32 	%f411, %f409, %f410;
	fma.rn.f32 	%f412, %f411, %f407, %f410;
	sub.f32 	%f413, %f409, %f412;
	fma.rz.f32 	%f414, %f413, %f407, %f412;
	cvt.rzi.f32.f32 	%f415, %f414;
	sub.f32 	%f717, %f409, %f415;
	sub.s32 	%r3373, %r3373, %r351;
	mov.b32 	%r3372, %f717;
	setp.ne.s32 	%p115, %r3373, 0;
	setp.ne.s32 	%p116, %r3372, 0;
	and.pred  	%p117, %p115, %p116;
	@%p117 bra 	$L__BB0_65;
$L__BB0_66:                             // %__internal_fmodf_slowpath_mod.exit.i.i2423
	setp.gt.u32 	%p118, %r39, 2139095039;
	selp.f32 	%f416, 0f7FFFFFFF, 0f4B800000, %p118;
	mul.f32 	%f417, %f717, 0f34000000;
	mul.f32 	%f718, %f416, %f417;
	bra.uni 	$L__BB0_67;
$L__BB0_57:                             // %__nv_fast_fdividef.exit.i.i.i2400
	div.approx.f32 	%f400, %f738, %f703;
	cvt.rzi.f32.f32 	%f716, %f400;
	fma.rn.f32 	%f57, %f716, 0fC0000000, %f738;
	mov.b32 	%r38, %f57;
	setp.lt.u32 	%p109, %r38, 1073741824;
	@%p109 bra 	$L__BB0_62;
// %bb.58:
	setp.lt.u32 	%p110, %r38, -2147483647;
	@%p110 bra 	$L__BB0_60;
// %bb.59:
	add.f32 	%f405, %f716, 0fBF800000;
	setp.lt.f32 	%p113, %f57, 0fC0000000;
	add.f32 	%f406, %f405, 0fBF800000;
	selp.f32 	%f716, %f406, %f405, %p113;
	bra.uni 	$L__BB0_62;
$L__BB0_60:
	add.f32 	%f716, %f716, 0f3F800000;
	setp.ltu.f32 	%p111, %f57, 0f40800000;
	@%p111 bra 	$L__BB0_62;
// %bb.61:                              // %__nv_fmaf_rn.exit.i.i.i2404
	add.f32 	%f401, %f716, 0f3F800000;
	fma.rn.f32 	%f403, %f703, 0fC0400000, %f57;
	setp.ge.f32 	%p112, %f403, 0f00000000;
	add.f32 	%f404, %f401, 0f3F800000;
	selp.f32 	%f716, %f404, %f401, %p112;
$L__BB0_62:                             // %__internal_fmodf_fastpath_quot.exit.i.i2407
	fma.rn.f32 	%f718, %f716, 0fC0000000, %f738;
$L__BB0_67:                             // %__internal_fmodf_kernel.exit.i2426
	selp.f32 	%f392, %f387, %f391, %p104;
	setp.gt.f32 	%p106, %f395, 0f4B800000;
	add.f32 	%f396, %f76, 0f3F800000;
	abs.f32 	%f418, %f718;
	setp.gtu.f32 	%p119, %f418, 0f7F800000;
	mov.b32 	%r353, %f54;
	and.b32  	%r46, %r353, -2147483648;
	@%p119 bra 	$L__BB0_69;
// %bb.68:
	mov.b32 	%r354, %f718;
	or.b32  	%r355, %r46, %r354;
	mov.b32 	%f718, %r355;
$L__BB0_69:                             // %__nv_fmodf.exit2427
	selp.f32 	%f53, %f396, %f392, %p106;
	add.f32 	%f419, %f718, %f718;
	mov.b32 	%r356, %f419;
	and.b32  	%r357, %r356, -2147483648;
	or.b32  	%r358, %r357, 1056964608;
	mov.b32 	%f420, %r358;
	add.f32 	%f421, %f419, %f420;
	cvt.rzi.f32.f32 	%f422, %f421;
	abs.f32 	%f423, %f419;
	setp.gt.f32 	%p120, %f423, 0f4B000000;
	selp.f32 	%f424, %f419, %f422, %p120;
	cvt.rzi.f32.f32 	%f425, %f419;
	setp.lt.f32 	%p121, %f423, 0f3F000000;
	selp.f32 	%f426, %f425, %f424, %p121;
	cvt.rzi.s32.f32 	%r359, %f426;
	fma.rn.f32 	%f427, %f426, 0fBF000000, %f718;
	mul.f32 	%f428, %f427, %f427;
	fma.rn.f32 	%f429, %f428, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f430, %f428, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f431, %f429, %f428, 0fC0A55DF6;
	fma.rn.f32 	%f432, %f430, %f428, 0f4081E0CF;
	fma.rn.f32 	%f433, %f428, %f427, 0f00000000;
	fma.rn.f32 	%f434, %f432, %f428, 0fC09DE9E6;
	fma.rn.f32 	%f435, %f431, %f433, 0f00000000;
	fma.rn.f32 	%f436, %f434, %f428, 0f3F800000;
	fma.rn.f32 	%f437, %f427, 0f40490FDB, %f435;
	and.b32  	%r360, %r359, 1;
	setp.eq.b32 	%p122, %r360, 1;
	selp.f32 	%f438, %f436, %f437, %p122;
	selp.f32 	%f439, %f437, %f436, %p122;
	and.b32  	%r361, %r359, 2;
	setp.eq.s32 	%p123, %r361, 0;
	neg.f32 	%f440, %f438;
	selp.f32 	%f441, %f438, %f440, %p123;
	add.s32 	%r362, %r359, 1;
	and.b32  	%r363, %r362, 2;
	setp.eq.s32 	%p124, %r363, 0;
	sub.f32 	%f443, %f230, %f439;
	selp.f32 	%f444, %f439, %f443, %p124;
	cvt.rzi.f32.f32 	%f445, %f718;
	setp.eq.f32 	%p125, %f445, %f718;
	mul.f32 	%f446, %f718, 0f00000000;
	selp.f32 	%f78, %f446, %f441, %p125;
	abs.f32 	%f447, %f718;
	setp.gt.f32 	%p126, %f447, 0f4B800000;
	add.f32 	%f448, %f78, 0f3F800000;
	selp.f32 	%f72, %f448, %f444, %p126;
	and.b32  	%r47, %r1, 2;
	setp.eq.s32 	%p127, %r47, 0;
	mov.f32 	%f75, %f53;
	mov.f32 	%f77, %f72;
	@%p127 bra 	$L__BB0_71;
// %bb.70:                              // %L682
	neg.f32 	%f77, %f78;
	neg.f32 	%f75, %f76;
	mov.f32 	%f76, %f53;
	mov.f32 	%f78, %f72;
$L__BB0_71:                             // %L684
	@%p27 bra 	$L__BB0_186;
// %bb.72:
	@%p318 bra 	$L__BB0_182;
	bra.uni 	$L__BB0_73;
$L__BB0_182:
	mov.b32 	%r144, %f750;
	and.b32  	%r370, %r144, 8388607;
	or.b32  	%r3402, %r370, 1065353216;
	mov.b32 	%f749, %r3402;
	add.s32 	%r371, %r144, -1073741824;
	and.b32  	%r3403, %r371, -8388608;
	setp.eq.s32 	%p135, %r3403, 0;
	@%p135 bra 	$L__BB0_185;
// %bb.183:                             // %__nv_fmaf_rn.exit4.i.i.i2452.preheader
	mov.f32 	%f458, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f457,%f458;
	// end inline asm
$L__BB0_184:                            // %__nv_fmaf_rn.exit4.i.i.i2452
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r372, %r3403, 192937984;
	add.s32 	%r373, %r3402, %r372;
	mov.b32 	%f459, %r373;
	mul.f32 	%f460, %f457, %f459;
	sub.f32 	%f461, %f459, %f460;
	fma.rn.f32 	%f462, %f461, %f457, %f460;
	sub.f32 	%f463, %f459, %f462;
	fma.rz.f32 	%f464, %f463, %f457, %f462;
	cvt.rzi.f32.f32 	%f465, %f464;
	sub.f32 	%f749, %f459, %f465;
	sub.s32 	%r3403, %r3403, %r372;
	mov.b32 	%r3402, %f749;
	setp.ne.s32 	%p136, %r3403, 0;
	setp.ne.s32 	%p137, %r3402, 0;
	and.pred  	%p138, %p136, %p137;
	@%p138 bra 	$L__BB0_184;
$L__BB0_185:                            // %__internal_fmodf_slowpath_mod.exit.i.i2454
	setp.gt.u32 	%p139, %r144, 2139095039;
	selp.f32 	%f466, 0f7FFFFFFF, 0f4B800000, %p139;
	mul.f32 	%f467, %f749, 0f34000000;
	mul.f32 	%f750, %f466, %f467;
	bra.uni 	$L__BB0_186;
$L__BB0_73:                             // %__nv_fast_fdividef.exit.i.i.i2431
	div.approx.f32 	%f450, %f750, %f703;
	cvt.rzi.f32.f32 	%f748, %f450;
	fma.rn.f32 	%f171, %f748, 0fC0000000, %f750;
	mov.b32 	%r143, %f171;
	setp.lt.u32 	%p130, %r143, 1073741824;
	@%p130 bra 	$L__BB0_181;
// %bb.74:
	setp.lt.u32 	%p131, %r143, -2147483647;
	@%p131 bra 	$L__BB0_179;
// %bb.75:
	add.f32 	%f455, %f748, 0fBF800000;
	setp.lt.f32 	%p134, %f171, 0fC0000000;
	add.f32 	%f456, %f455, 0fBF800000;
	selp.f32 	%f748, %f456, %f455, %p134;
	bra.uni 	$L__BB0_181;
$L__BB0_179:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p132, %f171, 0f40800000;
	@%p132 bra 	$L__BB0_181;
// %bb.180:                             // %__nv_fmaf_rn.exit.i.i.i2435
	add.f32 	%f451, %f748, 0f3F800000;
	fma.rn.f32 	%f453, %f703, 0fC0400000, %f171;
	setp.ge.f32 	%p133, %f453, 0f00000000;
	add.f32 	%f454, %f451, 0f3F800000;
	selp.f32 	%f748, %f454, %f451, %p133;
$L__BB0_181:                            // %__internal_fmodf_fastpath_quot.exit.i.i2438
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_186:                            // %__internal_fmodf_kernel.exit.i2457
	abs.f32 	%f468, %f750;
	setp.gtu.f32 	%p140, %f468, 0f7F800000;
	@%p140 bra 	$L__BB0_188;
// %bb.187:
	mov.b32 	%r374, %f750;
	or.b32  	%r375, %r138, %r374;
	mov.b32 	%f750, %r375;
$L__BB0_188:                            // %__nv_fmodf.exit2458
	@%p47 bra 	$L__BB0_87;
// %bb.76:
	@%p319 bra 	$L__BB0_83;
	bra.uni 	$L__BB0_77;
$L__BB0_83:
	mov.b32 	%r51, %f726;
	and.b32  	%r390, %r51, 8388607;
	or.b32  	%r3374, %r390, 1065353216;
	mov.b32 	%f725, %r3374;
	add.s32 	%r391, %r51, -1073741824;
	and.b32  	%r3375, %r391, -8388608;
	setp.eq.s32 	%p155, %r3375, 0;
	@%p155 bra 	$L__BB0_86;
// %bb.84:                              // %__nv_fmaf_rn.exit4.i.i.i2483.preheader
	mov.f32 	%f510, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f509,%f510;
	// end inline asm
$L__BB0_85:                             // %__nv_fmaf_rn.exit4.i.i.i2483
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r392, %r3375, 192937984;
	add.s32 	%r393, %r3374, %r392;
	mov.b32 	%f511, %r393;
	mul.f32 	%f512, %f509, %f511;
	sub.f32 	%f513, %f511, %f512;
	fma.rn.f32 	%f514, %f513, %f509, %f512;
	sub.f32 	%f515, %f511, %f514;
	fma.rz.f32 	%f516, %f515, %f509, %f514;
	cvt.rzi.f32.f32 	%f517, %f516;
	sub.f32 	%f725, %f511, %f517;
	sub.s32 	%r3375, %r3375, %r392;
	mov.b32 	%r3374, %f725;
	setp.ne.s32 	%p156, %r3375, 0;
	setp.ne.s32 	%p157, %r3374, 0;
	and.pred  	%p158, %p156, %p157;
	@%p158 bra 	$L__BB0_85;
$L__BB0_86:                             // %__internal_fmodf_slowpath_mod.exit.i.i2485
	setp.gt.u32 	%p159, %r51, 2139095039;
	selp.f32 	%f518, 0f7FFFFFFF, 0f4B800000, %p159;
	mul.f32 	%f519, %f725, 0f34000000;
	mul.f32 	%f726, %f518, %f519;
	bra.uni 	$L__BB0_87;
$L__BB0_77:                             // %__nv_fast_fdividef.exit.i.i.i2462
	div.approx.f32 	%f502, %f726, %f703;
	cvt.rzi.f32.f32 	%f724, %f502;
	fma.rn.f32 	%f80, %f724, 0fC0000000, %f726;
	mov.b32 	%r50, %f80;
	setp.lt.u32 	%p150, %r50, 1073741824;
	@%p150 bra 	$L__BB0_82;
// %bb.78:
	setp.lt.u32 	%p151, %r50, -2147483647;
	@%p151 bra 	$L__BB0_80;
// %bb.79:
	add.f32 	%f507, %f724, 0fBF800000;
	setp.lt.f32 	%p154, %f80, 0fC0000000;
	add.f32 	%f508, %f507, 0fBF800000;
	selp.f32 	%f724, %f508, %f507, %p154;
	bra.uni 	$L__BB0_82;
$L__BB0_80:
	add.f32 	%f724, %f724, 0f3F800000;
	setp.ltu.f32 	%p152, %f80, 0f40800000;
	@%p152 bra 	$L__BB0_82;
// %bb.81:                              // %__nv_fmaf_rn.exit.i.i.i2466
	add.f32 	%f503, %f724, 0f3F800000;
	fma.rn.f32 	%f505, %f703, 0fC0400000, %f80;
	setp.ge.f32 	%p153, %f505, 0f00000000;
	add.f32 	%f506, %f503, 0f3F800000;
	selp.f32 	%f724, %f506, %f503, %p153;
$L__BB0_82:                             // %__internal_fmodf_fastpath_quot.exit.i.i2469
	fma.rn.f32 	%f726, %f724, 0fC0000000, %f726;
$L__BB0_87:                             // %__internal_fmodf_kernel.exit.i2488
	abs.f32 	%f520, %f726;
	setp.gtu.f32 	%p160, %f520, 0f7F800000;
	@%p160 bra 	$L__BB0_89;
// %bb.88:
	mov.b32 	%r394, %f726;
	or.b32  	%r395, %r16, %r394;
	mov.b32 	%f726, %r395;
$L__BB0_89:                             // %__nv_fmodf.exit2489
	@%p67 bra 	$L__BB0_101;
// %bb.90:
	@%p320 bra 	$L__BB0_97;
	bra.uni 	$L__BB0_91;
$L__BB0_97:
	mov.b32 	%r59, %f730;
	and.b32  	%r404, %r59, 8388607;
	or.b32  	%r3376, %r404, 1065353216;
	mov.b32 	%f729, %r3376;
	add.s32 	%r405, %r59, -1073741824;
	and.b32  	%r3377, %r405, -8388608;
	setp.eq.s32 	%p175, %r3377, 0;
	@%p175 bra 	$L__BB0_100;
// %bb.98:                              // %__nv_fmaf_rn.exit4.i.i.i2514.preheader
	mov.f32 	%f560, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f559,%f560;
	// end inline asm
$L__BB0_99:                             // %__nv_fmaf_rn.exit4.i.i.i2514
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r406, %r3377, 192937984;
	add.s32 	%r407, %r3376, %r406;
	mov.b32 	%f561, %r407;
	mul.f32 	%f562, %f559, %f561;
	sub.f32 	%f563, %f561, %f562;
	fma.rn.f32 	%f564, %f563, %f559, %f562;
	sub.f32 	%f565, %f561, %f564;
	fma.rz.f32 	%f566, %f565, %f559, %f564;
	cvt.rzi.f32.f32 	%f567, %f566;
	sub.f32 	%f729, %f561, %f567;
	sub.s32 	%r3377, %r3377, %r406;
	mov.b32 	%r3376, %f729;
	setp.ne.s32 	%p176, %r3377, 0;
	setp.ne.s32 	%p177, %r3376, 0;
	and.pred  	%p178, %p176, %p177;
	@%p178 bra 	$L__BB0_99;
$L__BB0_100:                            // %__internal_fmodf_slowpath_mod.exit.i.i2516
	setp.gt.u32 	%p179, %r59, 2139095039;
	selp.f32 	%f568, 0f7FFFFFFF, 0f4B800000, %p179;
	mul.f32 	%f569, %f729, 0f34000000;
	mul.f32 	%f730, %f568, %f569;
	bra.uni 	$L__BB0_101;
$L__BB0_91:                             // %__nv_fast_fdividef.exit.i.i.i2493
	div.approx.f32 	%f552, %f730, %f703;
	cvt.rzi.f32.f32 	%f728, %f552;
	fma.rn.f32 	%f97, %f728, 0fC0000000, %f730;
	mov.b32 	%r58, %f97;
	setp.lt.u32 	%p170, %r58, 1073741824;
	@%p170 bra 	$L__BB0_96;
// %bb.92:
	setp.lt.u32 	%p171, %r58, -2147483647;
	@%p171 bra 	$L__BB0_94;
// %bb.93:
	add.f32 	%f557, %f728, 0fBF800000;
	setp.lt.f32 	%p174, %f97, 0fC0000000;
	add.f32 	%f558, %f557, 0fBF800000;
	selp.f32 	%f728, %f558, %f557, %p174;
	bra.uni 	$L__BB0_96;
$L__BB0_94:
	add.f32 	%f728, %f728, 0f3F800000;
	setp.ltu.f32 	%p172, %f97, 0f40800000;
	@%p172 bra 	$L__BB0_96;
// %bb.95:                              // %__nv_fmaf_rn.exit.i.i.i2497
	add.f32 	%f553, %f728, 0f3F800000;
	fma.rn.f32 	%f555, %f703, 0fC0400000, %f97;
	setp.ge.f32 	%p173, %f555, 0f00000000;
	add.f32 	%f556, %f553, 0f3F800000;
	selp.f32 	%f728, %f556, %f553, %p173;
$L__BB0_96:                             // %__internal_fmodf_fastpath_quot.exit.i.i2500
	fma.rn.f32 	%f730, %f728, 0fC0000000, %f730;
$L__BB0_101:                            // %__internal_fmodf_kernel.exit.i2519
	abs.f32 	%f570, %f730;
	setp.gtu.f32 	%p180, %f570, 0f7F800000;
	@%p180 bra 	$L__BB0_103;
// %bb.102:
	mov.b32 	%r408, %f730;
	or.b32  	%r409, %r25, %r408;
	mov.b32 	%f730, %r409;
$L__BB0_103:                            // %__nv_fmodf.exit2520
	@%p87 bra 	$L__BB0_115;
// %bb.104:
	@%p321 bra 	$L__BB0_111;
	bra.uni 	$L__BB0_105;
$L__BB0_111:
	mov.b32 	%r69, %f734;
	and.b32  	%r424, %r69, 8388607;
	or.b32  	%r3378, %r424, 1065353216;
	mov.b32 	%f733, %r3378;
	add.s32 	%r425, %r69, -1073741824;
	and.b32  	%r3379, %r425, -8388608;
	setp.eq.s32 	%p195, %r3379, 0;
	@%p195 bra 	$L__BB0_114;
// %bb.112:                             // %__nv_fmaf_rn.exit4.i.i.i2545.preheader
	mov.f32 	%f612, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f611,%f612;
	// end inline asm
$L__BB0_113:                            // %__nv_fmaf_rn.exit4.i.i.i2545
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r426, %r3379, 192937984;
	add.s32 	%r427, %r3378, %r426;
	mov.b32 	%f613, %r427;
	mul.f32 	%f614, %f611, %f613;
	sub.f32 	%f615, %f613, %f614;
	fma.rn.f32 	%f616, %f615, %f611, %f614;
	sub.f32 	%f617, %f613, %f616;
	fma.rz.f32 	%f618, %f617, %f611, %f616;
	cvt.rzi.f32.f32 	%f619, %f618;
	sub.f32 	%f733, %f613, %f619;
	sub.s32 	%r3379, %r3379, %r426;
	mov.b32 	%r3378, %f733;
	setp.ne.s32 	%p196, %r3379, 0;
	setp.ne.s32 	%p197, %r3378, 0;
	and.pred  	%p198, %p196, %p197;
	@%p198 bra 	$L__BB0_113;
$L__BB0_114:                            // %__internal_fmodf_slowpath_mod.exit.i.i2547
	setp.gt.u32 	%p199, %r69, 2139095039;
	selp.f32 	%f620, 0f7FFFFFFF, 0f4B800000, %p199;
	mul.f32 	%f621, %f733, 0f34000000;
	mul.f32 	%f734, %f620, %f621;
	bra.uni 	$L__BB0_115;
$L__BB0_105:                            // %__nv_fast_fdividef.exit.i.i.i2524
	div.approx.f32 	%f604, %f734, %f703;
	cvt.rzi.f32.f32 	%f732, %f604;
	fma.rn.f32 	%f112, %f732, 0fC0000000, %f734;
	mov.b32 	%r68, %f112;
	setp.lt.u32 	%p190, %r68, 1073741824;
	@%p190 bra 	$L__BB0_110;
// %bb.106:
	setp.lt.u32 	%p191, %r68, -2147483647;
	@%p191 bra 	$L__BB0_108;
// %bb.107:
	add.f32 	%f609, %f732, 0fBF800000;
	setp.lt.f32 	%p194, %f112, 0fC0000000;
	add.f32 	%f610, %f609, 0fBF800000;
	selp.f32 	%f732, %f610, %f609, %p194;
	bra.uni 	$L__BB0_110;
$L__BB0_108:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p192, %f112, 0f40800000;
	@%p192 bra 	$L__BB0_110;
// %bb.109:                             // %__nv_fmaf_rn.exit.i.i.i2528
	add.f32 	%f605, %f732, 0f3F800000;
	fma.rn.f32 	%f607, %f703, 0fC0400000, %f112;
	setp.ge.f32 	%p193, %f607, 0f00000000;
	add.f32 	%f608, %f605, 0f3F800000;
	selp.f32 	%f732, %f608, %f605, %p193;
$L__BB0_110:                            // %__internal_fmodf_fastpath_quot.exit.i.i2531
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_115:                            // %__internal_fmodf_kernel.exit.i2550
	abs.f32 	%f622, %f734;
	setp.gtu.f32 	%p200, %f622, 0f7F800000;
	@%p200 bra 	$L__BB0_117;
// %bb.116:
	mov.b32 	%r428, %f734;
	or.b32  	%r429, %r37, %r428;
	mov.b32 	%f734, %r429;
$L__BB0_117:                            // %__nv_fmodf.exit2551
	add.f32 	%f623, %f734, %f734;
	mov.b32 	%r430, %f623;
	and.b32  	%r431, %r430, -2147483648;
	or.b32  	%r432, %r431, 1056964608;
	mov.b32 	%f624, %r432;
	add.f32 	%f625, %f623, %f624;
	cvt.rzi.f32.f32 	%f626, %f625;
	abs.f32 	%f627, %f623;
	setp.gt.f32 	%p202, %f627, 0f4B000000;
	selp.f32 	%f628, %f623, %f626, %p202;
	cvt.rzi.f32.f32 	%f629, %f623;
	setp.lt.f32 	%p203, %f627, 0f3F000000;
	selp.f32 	%f630, %f629, %f628, %p203;
	cvt.rzi.s32.f32 	%r433, %f630;
	fma.rn.f32 	%f631, %f630, 0fBF000000, %f734;
	mul.f32 	%f632, %f631, %f631;
	fma.rn.f32 	%f633, %f632, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f634, %f632, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f635, %f633, %f632, 0fC0A55DF6;
	fma.rn.f32 	%f636, %f634, %f632, 0f4081E0CF;
	fma.rn.f32 	%f637, %f632, %f631, 0f00000000;
	fma.rn.f32 	%f638, %f636, %f632, 0fC09DE9E6;
	fma.rn.f32 	%f639, %f635, %f637, 0f00000000;
	fma.rn.f32 	%f640, %f638, %f632, 0f3F800000;
	fma.rn.f32 	%f641, %f631, 0f40490FDB, %f639;
	and.b32  	%r434, %r433, 1;
	setp.eq.b32 	%p204, %r434, 1;
	selp.f32 	%f642, %f640, %f641, %p204;
	selp.f32 	%f643, %f641, %f640, %p204;
	and.b32  	%r435, %r433, 2;
	setp.eq.s32 	%p205, %r435, 0;
	neg.f32 	%f644, %f642;
	selp.f32 	%f645, %f642, %f644, %p205;
	add.s32 	%r436, %r433, 1;
	and.b32  	%r437, %r436, 2;
	setp.eq.s32 	%p206, %r437, 0;
	sub.f32 	%f647, %f230, %f643;
	cvt.rzi.f32.f32 	%f649, %f734;
	setp.eq.f32 	%p207, %f649, %f734;
	mul.f32 	%f650, %f734, 0f00000000;
	selp.f32 	%f148, %f650, %f645, %p207;
	abs.f32 	%f651, %f734;
	@%p107 bra 	$L__BB0_129;
// %bb.118:
	@%p322 bra 	$L__BB0_125;
	bra.uni 	$L__BB0_119;
$L__BB0_125:
	mov.b32 	%r77, %f738;
	and.b32  	%r438, %r77, 8388607;
	or.b32  	%r3380, %r438, 1065353216;
	mov.b32 	%f737, %r3380;
	add.s32 	%r439, %r77, -1073741824;
	and.b32  	%r3381, %r439, -8388608;
	setp.eq.s32 	%p215, %r3381, 0;
	@%p215 bra 	$L__BB0_128;
// %bb.126:                             // %__nv_fmaf_rn.exit4.i.i.i2576.preheader
	mov.f32 	%f662, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f661,%f662;
	// end inline asm
$L__BB0_127:                            // %__nv_fmaf_rn.exit4.i.i.i2576
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r440, %r3381, 192937984;
	add.s32 	%r441, %r3380, %r440;
	mov.b32 	%f663, %r441;
	mul.f32 	%f664, %f661, %f663;
	sub.f32 	%f665, %f663, %f664;
	fma.rn.f32 	%f666, %f665, %f661, %f664;
	sub.f32 	%f667, %f663, %f666;
	fma.rz.f32 	%f668, %f667, %f661, %f666;
	cvt.rzi.f32.f32 	%f669, %f668;
	sub.f32 	%f737, %f663, %f669;
	sub.s32 	%r3381, %r3381, %r440;
	mov.b32 	%r3380, %f737;
	setp.ne.s32 	%p216, %r3381, 0;
	setp.ne.s32 	%p217, %r3380, 0;
	and.pred  	%p218, %p216, %p217;
	@%p218 bra 	$L__BB0_127;
$L__BB0_128:                            // %__internal_fmodf_slowpath_mod.exit.i.i2578
	setp.gt.u32 	%p219, %r77, 2139095039;
	selp.f32 	%f670, 0f7FFFFFFF, 0f4B800000, %p219;
	mul.f32 	%f671, %f737, 0f34000000;
	mul.f32 	%f738, %f670, %f671;
	bra.uni 	$L__BB0_129;
$L__BB0_119:                            // %__nv_fast_fdividef.exit.i.i.i2555
	div.approx.f32 	%f654, %f738, %f703;
	cvt.rzi.f32.f32 	%f736, %f654;
	fma.rn.f32 	%f129, %f736, 0fC0000000, %f738;
	mov.b32 	%r76, %f129;
	setp.lt.u32 	%p210, %r76, 1073741824;
	@%p210 bra 	$L__BB0_124;
// %bb.120:
	setp.lt.u32 	%p211, %r76, -2147483647;
	@%p211 bra 	$L__BB0_122;
// %bb.121:
	add.f32 	%f659, %f736, 0fBF800000;
	setp.lt.f32 	%p214, %f129, 0fC0000000;
	add.f32 	%f660, %f659, 0fBF800000;
	selp.f32 	%f736, %f660, %f659, %p214;
	bra.uni 	$L__BB0_124;
$L__BB0_122:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p212, %f129, 0f40800000;
	@%p212 bra 	$L__BB0_124;
// %bb.123:                             // %__nv_fmaf_rn.exit.i.i.i2559
	add.f32 	%f655, %f736, 0f3F800000;
	fma.rn.f32 	%f657, %f703, 0fC0400000, %f129;
	setp.ge.f32 	%p213, %f657, 0f00000000;
	add.f32 	%f658, %f655, 0f3F800000;
	selp.f32 	%f736, %f658, %f655, %p213;
$L__BB0_124:                            // %__internal_fmodf_fastpath_quot.exit.i.i2562
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_129:                            // %__internal_fmodf_kernel.exit.i2581
	selp.f32 	%f648, %f643, %f647, %p206;
	setp.gt.f32 	%p208, %f651, 0f4B800000;
	add.f32 	%f652, %f148, 0f3F800000;
	abs.f32 	%f672, %f738;
	setp.gtu.f32 	%p220, %f672, 0f7F800000;
	@%p220 bra 	$L__BB0_131;
// %bb.130:
	mov.b32 	%r442, %f738;
	or.b32  	%r443, %r46, %r442;
	mov.b32 	%f738, %r443;
$L__BB0_131:                            // %__nv_fmodf.exit2582
	selp.f32 	%f127, %f652, %f648, %p208;
	add.f32 	%f673, %f738, %f738;
	mov.b32 	%r444, %f673;
	and.b32  	%r445, %r444, -2147483648;
	or.b32  	%r446, %r445, 1056964608;
	mov.b32 	%f674, %r446;
	add.f32 	%f675, %f673, %f674;
	cvt.rzi.f32.f32 	%f676, %f675;
	abs.f32 	%f677, %f673;
	setp.gt.f32 	%p222, %f677, 0f4B000000;
	selp.f32 	%f678, %f673, %f676, %p222;
	cvt.rzi.f32.f32 	%f679, %f673;
	setp.lt.f32 	%p223, %f677, 0f3F000000;
	selp.f32 	%f680, %f679, %f678, %p223;
	cvt.rzi.s32.f32 	%r447, %f680;
	fma.rn.f32 	%f681, %f680, 0fBF000000, %f738;
	mul.f32 	%f682, %f681, %f681;
	fma.rn.f32 	%f683, %f682, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f684, %f682, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f685, %f683, %f682, 0fC0A55DF6;
	fma.rn.f32 	%f686, %f684, %f682, 0f4081E0CF;
	fma.rn.f32 	%f687, %f682, %f681, 0f00000000;
	fma.rn.f32 	%f688, %f686, %f682, 0fC09DE9E6;
	fma.rn.f32 	%f689, %f685, %f687, 0f00000000;
	fma.rn.f32 	%f690, %f688, %f682, 0f3F800000;
	fma.rn.f32 	%f691, %f681, 0f40490FDB, %f689;
	and.b32  	%r448, %r447, 1;
	setp.eq.b32 	%p224, %r448, 1;
	selp.f32 	%f692, %f690, %f691, %p224;
	selp.f32 	%f693, %f691, %f690, %p224;
	and.b32  	%r449, %r447, 2;
	setp.eq.s32 	%p225, %r449, 0;
	neg.f32 	%f694, %f692;
	selp.f32 	%f695, %f692, %f694, %p225;
	add.s32 	%r450, %r447, 1;
	and.b32  	%r451, %r450, 2;
	setp.eq.s32 	%p226, %r451, 0;
	sub.f32 	%f697, %f230, %f693;
	selp.f32 	%f698, %f693, %f697, %p226;
	cvt.rzi.f32.f32 	%f699, %f738;
	setp.eq.f32 	%p227, %f699, %f738;
	mul.f32 	%f700, %f738, 0f00000000;
	selp.f32 	%f150, %f700, %f695, %p227;
	abs.f32 	%f701, %f738;
	setp.gt.f32 	%p228, %f701, 0f4B800000;
	add.f32 	%f702, %f150, 0f3F800000;
	selp.f32 	%f144, %f702, %f698, %p228;
	mov.f32 	%f147, %f127;
	mov.f32 	%f149, %f144;
	@%p127 bra 	$L__BB0_133;
// %bb.132:                             // %L975
	neg.f32 	%f149, %f150;
	neg.f32 	%f147, %f148;
	mov.f32 	%f148, %f127;
	mov.f32 	%f150, %f144;
$L__BB0_133:                            // %L977
	setp.gt.u32 	%p229, %r1, 15;
	mov.u32 	%r153, 999999999;
	@%p229 bra 	$L__BB0_190;
// %bb.134:                             // %L1007
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	shl.b32 	%r459, %r1, 4;
	and.b32  	%r460, %r459, 240;
	or.b32  	%r461, %r460, %r2;
	mul.wide.u32 	%rd68, %r461, 4;
	add.s64 	%rd69, %rd1, %rd68;
	ld.global.u32 	%r462, [%rd69];
	shl.b32 	%r463, %r462, 16;
	cvt.s32.s16 	%r86, %r462;
	shr.s32 	%r87, %r462, 16;
	or.b32  	%r464, %r463, 65535;
	setp.lt.u32 	%p230, %r464, 1114111;
	setp.lt.u32 	%p231, %r462, 1048576;
	and.pred  	%p232, %p230, %p231;
	@%p232 bra 	$L__BB0_189;
	bra.uni 	$L__BB0_135;
$L__BB0_189:                            // %L1247
	mul.lo.s32 	%r468, %r87, 546;
	mad.lo.s32 	%r153, %r86, 33, %r468;
$L__BB0_190:                            // %pass542
	add.f32 	%f207, %f746, %f746;
	mov.b32 	%r285, %f207;
	add.f32 	%f469, %f750, %f750;
	and.b32  	%r286, %r285, -2147483648;
	add.f32 	%f261, %f706, %f706;
	add.f32 	%f313, %f710, %f710;
	mov.b32 	%r382, %f469;
	or.b32  	%r287, %r286, 1056964608;
	mov.b32 	%r301, %f261;
	mov.b32 	%r323, %f313;
	and.b32  	%r383, %r382, -2147483648;
	add.f32 	%f521, %f726, %f726;
	add.f32 	%f571, %f730, %f730;
	mov.b32 	%f208, %r287;
	and.b32  	%r302, %r301, -2147483648;
	and.b32  	%r324, %r323, -2147483648;
	or.b32  	%r384, %r383, 1056964608;
	mov.b32 	%r396, %f521;
	mov.b32 	%r416, %f571;
	add.f32 	%f209, %f207, %f208;
	abs.f32 	%f211, %f207;
	or.b32  	%r303, %r302, 1056964608;
	or.b32  	%r325, %r324, 1056964608;
	mov.b32 	%f470, %r384;
	and.b32  	%r397, %r396, -2147483648;
	and.b32  	%r417, %r416, -2147483648;
	cvt.rzi.f32.f32 	%f210, %f209;
	setp.gt.f32 	%p40, %f211, 0f4B000000;
	mov.b32 	%f262, %r303;
	mov.b32 	%f314, %r325;
	add.f32 	%f471, %f469, %f470;
	abs.f32 	%f473, %f469;
	or.b32  	%r398, %r397, 1056964608;
	or.b32  	%r418, %r417, 1056964608;
	selp.f32 	%f212, %f207, %f210, %p40;
	cvt.rzi.f32.f32 	%f213, %f207;
	setp.lt.f32 	%p41, %f211, 0f3F000000;
	add.f32 	%f263, %f261, %f262;
	abs.f32 	%f265, %f261;
	add.f32 	%f315, %f313, %f314;
	abs.f32 	%f317, %f313;
	cvt.rzi.f32.f32 	%f472, %f471;
	setp.gt.f32 	%p142, %f473, 0f4B000000;
	mov.b32 	%f522, %r398;
	mov.b32 	%f572, %r418;
	selp.f32 	%f214, %f213, %f212, %p41;
	cvt.rzi.f32.f32 	%f264, %f263;
	setp.gt.f32 	%p60, %f265, 0f4B000000;
	cvt.rzi.f32.f32 	%f316, %f315;
	setp.gt.f32 	%p80, %f317, 0f4B000000;
	selp.f32 	%f474, %f469, %f472, %p142;
	cvt.rzi.f32.f32 	%f475, %f469;
	setp.lt.f32 	%p143, %f473, 0f3F000000;
	add.f32 	%f523, %f521, %f522;
	abs.f32 	%f525, %f521;
	add.f32 	%f573, %f571, %f572;
	abs.f32 	%f575, %f571;
	fma.rn.f32 	%f215, %f214, 0fBF000000, %f746;
	selp.f32 	%f266, %f261, %f264, %p60;
	cvt.rzi.f32.f32 	%f267, %f261;
	setp.lt.f32 	%p61, %f265, 0f3F000000;
	selp.f32 	%f318, %f313, %f316, %p80;
	cvt.rzi.f32.f32 	%f319, %f313;
	setp.lt.f32 	%p81, %f317, 0f3F000000;
	selp.f32 	%f476, %f475, %f474, %p143;
	cvt.rzi.f32.f32 	%f524, %f523;
	setp.gt.f32 	%p162, %f525, 0f4B000000;
	cvt.rzi.f32.f32 	%f574, %f573;
	setp.gt.f32 	%p182, %f575, 0f4B000000;
	mul.f32 	%f216, %f215, %f215;
	selp.f32 	%f268, %f267, %f266, %p61;
	selp.f32 	%f320, %f319, %f318, %p81;
	fma.rn.f32 	%f477, %f476, 0fBF000000, %f750;
	selp.f32 	%f526, %f521, %f524, %p162;
	cvt.rzi.f32.f32 	%f527, %f521;
	setp.lt.f32 	%p163, %f525, 0f3F000000;
	selp.f32 	%f576, %f571, %f574, %p182;
	cvt.rzi.f32.f32 	%f577, %f571;
	setp.lt.f32 	%p183, %f575, 0f3F000000;
	fma.rn.f32 	%f217, %f216, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f218, %f216, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f269, %f268, 0fBF000000, %f706;
	fma.rn.f32 	%f321, %f320, 0fBF000000, %f710;
	mul.f32 	%f478, %f477, %f477;
	selp.f32 	%f528, %f527, %f526, %p163;
	selp.f32 	%f578, %f577, %f576, %p183;
	cvt.rzi.s32.f32 	%r288, %f214;
	fma.rn.f32 	%f219, %f217, %f216, 0fC0A55DF6;
	fma.rn.f32 	%f220, %f218, %f216, 0f4081E0CF;
	fma.rn.f32 	%f221, %f216, %f215, 0f00000000;
	mul.f32 	%f270, %f269, %f269;
	mul.f32 	%f322, %f321, %f321;
	fma.rn.f32 	%f479, %f478, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f480, %f478, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f529, %f528, 0fBF000000, %f726;
	fma.rn.f32 	%f579, %f578, 0fBF000000, %f730;
	fma.rn.f32 	%f222, %f220, %f216, 0fC09DE9E6;
	fma.rn.f32 	%f223, %f219, %f221, 0f00000000;
	and.b32  	%r289, %r288, 1;
	fma.rn.f32 	%f271, %f270, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f272, %f270, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f323, %f322, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f324, %f322, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r385, %f476;
	fma.rn.f32 	%f481, %f479, %f478, 0fC0A55DF6;
	fma.rn.f32 	%f482, %f480, %f478, 0f4081E0CF;
	fma.rn.f32 	%f483, %f478, %f477, 0f00000000;
	mul.f32 	%f530, %f529, %f529;
	mul.f32 	%f580, %f579, %f579;
	fma.rn.f32 	%f224, %f222, %f216, 0f3F800000;
	fma.rn.f32 	%f225, %f215, 0f40490FDB, %f223;
	setp.eq.b32 	%p42, %r289, 1;
	cvt.rzi.s32.f32 	%r304, %f268;
	fma.rn.f32 	%f273, %f271, %f270, 0fC0A55DF6;
	fma.rn.f32 	%f274, %f272, %f270, 0f4081E0CF;
	fma.rn.f32 	%f275, %f270, %f269, 0f00000000;
	cvt.rzi.s32.f32 	%r326, %f320;
	fma.rn.f32 	%f325, %f323, %f322, 0fC0A55DF6;
	fma.rn.f32 	%f326, %f324, %f322, 0f4081E0CF;
	fma.rn.f32 	%f327, %f322, %f321, 0f00000000;
	fma.rn.f32 	%f484, %f482, %f478, 0fC09DE9E6;
	fma.rn.f32 	%f485, %f481, %f483, 0f00000000;
	and.b32  	%r386, %r385, 1;
	fma.rn.f32 	%f531, %f530, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f532, %f530, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f581, %f580, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f582, %f580, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f226, %f224, %f225, %p42;
	and.b32  	%r290, %r288, 2;
	fma.rn.f32 	%f276, %f274, %f270, 0fC09DE9E6;
	fma.rn.f32 	%f277, %f273, %f275, 0f00000000;
	and.b32  	%r305, %r304, 1;
	fma.rn.f32 	%f328, %f326, %f322, 0fC09DE9E6;
	fma.rn.f32 	%f329, %f325, %f327, 0f00000000;
	and.b32  	%r327, %r326, 1;
	fma.rn.f32 	%f486, %f484, %f478, 0f3F800000;
	fma.rn.f32 	%f487, %f477, 0f40490FDB, %f485;
	setp.eq.b32 	%p144, %r386, 1;
	cvt.rzi.s32.f32 	%r399, %f528;
	fma.rn.f32 	%f533, %f531, %f530, 0fC0A55DF6;
	fma.rn.f32 	%f534, %f532, %f530, 0f4081E0CF;
	fma.rn.f32 	%f535, %f530, %f529, 0f00000000;
	cvt.rzi.s32.f32 	%r419, %f578;
	fma.rn.f32 	%f583, %f581, %f580, 0fC0A55DF6;
	fma.rn.f32 	%f584, %f582, %f580, 0f4081E0CF;
	fma.rn.f32 	%f585, %f580, %f579, 0f00000000;
	setp.eq.s32 	%p43, %r290, 0;
	neg.f32 	%f228, %f226;
	add.s32 	%r291, %r288, 1;
	cvt.rzi.f32.f32 	%f233, %f746;
	fma.rn.f32 	%f278, %f276, %f270, 0f3F800000;
	fma.rn.f32 	%f279, %f269, 0f40490FDB, %f277;
	setp.eq.b32 	%p62, %r305, 1;
	fma.rn.f32 	%f330, %f328, %f322, 0f3F800000;
	fma.rn.f32 	%f331, %f321, 0f40490FDB, %f329;
	setp.eq.b32 	%p82, %r327, 1;
	selp.f32 	%f488, %f486, %f487, %p144;
	and.b32  	%r387, %r385, 2;
	fma.rn.f32 	%f536, %f534, %f530, 0fC09DE9E6;
	fma.rn.f32 	%f537, %f533, %f535, 0f00000000;
	and.b32  	%r400, %r399, 1;
	fma.rn.f32 	%f586, %f584, %f580, 0fC09DE9E6;
	fma.rn.f32 	%f587, %f583, %f585, 0f00000000;
	and.b32  	%r420, %r419, 1;
	selp.f32 	%f227, %f225, %f224, %p42;
	selp.f32 	%f229, %f226, %f228, %p43;
	and.b32  	%r292, %r291, 2;
	setp.eq.f32 	%p45, %f233, %f746;
	mul.f32 	%f234, %f746, 0f00000000;
	selp.f32 	%f280, %f278, %f279, %p62;
	and.b32  	%r306, %r304, 2;
	selp.f32 	%f332, %f330, %f331, %p82;
	and.b32  	%r328, %r326, 2;
	setp.eq.s32 	%p145, %r387, 0;
	neg.f32 	%f490, %f488;
	add.s32 	%r388, %r385, 1;
	cvt.rzi.f32.f32 	%f495, %f750;
	fma.rn.f32 	%f538, %f536, %f530, 0f3F800000;
	fma.rn.f32 	%f539, %f529, 0f40490FDB, %f537;
	setp.eq.b32 	%p164, %r400, 1;
	fma.rn.f32 	%f588, %f586, %f580, 0f3F800000;
	fma.rn.f32 	%f589, %f579, 0f40490FDB, %f587;
	setp.eq.b32 	%p184, %r420, 1;
	setp.eq.s32 	%p44, %r292, 0;
	sub.f32 	%f231, %f230, %f227;
	selp.f32 	%f235, %f234, %f229, %p45;
	abs.f32 	%f236, %f746;
	setp.eq.s32 	%p63, %r306, 0;
	neg.f32 	%f282, %f280;
	add.s32 	%r307, %r304, 1;
	cvt.rzi.f32.f32 	%f287, %f706;
	setp.eq.s32 	%p83, %r328, 0;
	neg.f32 	%f334, %f332;
	add.s32 	%r329, %r326, 1;
	cvt.rzi.f32.f32 	%f339, %f710;
	selp.f32 	%f489, %f487, %f486, %p144;
	selp.f32 	%f491, %f488, %f490, %p145;
	and.b32  	%r389, %r388, 2;
	setp.eq.f32 	%p147, %f495, %f750;
	mul.f32 	%f496, %f750, 0f00000000;
	selp.f32 	%f540, %f538, %f539, %p164;
	and.b32  	%r401, %r399, 2;
	selp.f32 	%f590, %f588, %f589, %p184;
	and.b32  	%r421, %r419, 2;
	selp.f32 	%f232, %f227, %f231, %p44;
	setp.gt.f32 	%p46, %f236, 0f4B800000;
	add.f32 	%f237, %f235, 0f3F800000;
	selp.f32 	%f281, %f279, %f278, %p62;
	selp.f32 	%f283, %f280, %f282, %p63;
	and.b32  	%r308, %r307, 2;
	setp.eq.f32 	%p65, %f287, %f706;
	mul.f32 	%f288, %f706, 0f00000000;
	selp.f32 	%f333, %f331, %f330, %p82;
	selp.f32 	%f335, %f332, %f334, %p83;
	and.b32  	%r330, %r329, 2;
	setp.eq.f32 	%p85, %f339, %f710;
	mul.f32 	%f340, %f710, 0f00000000;
	setp.eq.s32 	%p146, %r389, 0;
	sub.f32 	%f493, %f230, %f489;
	selp.f32 	%f497, %f496, %f491, %p147;
	abs.f32 	%f498, %f750;
	setp.eq.s32 	%p165, %r401, 0;
	neg.f32 	%f542, %f540;
	add.s32 	%r402, %r399, 1;
	cvt.rzi.f32.f32 	%f547, %f726;
	setp.eq.s32 	%p185, %r421, 0;
	neg.f32 	%f592, %f590;
	add.s32 	%r422, %r419, 1;
	cvt.rzi.f32.f32 	%f597, %f730;
	selp.f32 	%f238, %f237, %f232, %p46;
	setp.eq.s32 	%p64, %r308, 0;
	sub.f32 	%f285, %f230, %f281;
	selp.f32 	%f16, %f288, %f283, %p65;
	abs.f32 	%f289, %f706;
	setp.eq.s32 	%p84, %r330, 0;
	sub.f32 	%f337, %f230, %f333;
	selp.f32 	%f341, %f340, %f335, %p85;
	abs.f32 	%f342, %f710;
	selp.f32 	%f494, %f489, %f493, %p146;
	setp.gt.f32 	%p148, %f498, 0f4B800000;
	add.f32 	%f499, %f497, 0f3F800000;
	selp.f32 	%f541, %f539, %f538, %p164;
	selp.f32 	%f543, %f540, %f542, %p165;
	and.b32  	%r403, %r402, 2;
	setp.eq.f32 	%p167, %f547, %f726;
	mul.f32 	%f548, %f726, 0f00000000;
	selp.f32 	%f591, %f589, %f588, %p184;
	selp.f32 	%f593, %f590, %f592, %p185;
	and.b32  	%r423, %r422, 2;
	setp.eq.f32 	%p187, %f597, %f730;
	mul.f32 	%f598, %f730, 0f00000000;
	mov.b32 	%r281, %f238;
	mov.b32 	%r284, %f235;
	selp.f32 	%f286, %f281, %f285, %p64;
	setp.gt.f32 	%p66, %f289, 0f4B800000;
	add.f32 	%f290, %f16, 0f3F800000;
	selp.f32 	%f338, %f333, %f337, %p84;
	setp.gt.f32 	%p86, %f342, 0f4B800000;
	add.f32 	%f343, %f341, 0f3F800000;
	selp.f32 	%f500, %f499, %f494, %p148;
	setp.eq.s32 	%p166, %r403, 0;
	sub.f32 	%f545, %f230, %f541;
	selp.f32 	%f94, %f548, %f543, %p167;
	abs.f32 	%f549, %f726;
	setp.eq.s32 	%p186, %r423, 0;
	sub.f32 	%f595, %f230, %f591;
	selp.f32 	%f599, %f598, %f593, %p187;
	abs.f32 	%f600, %f730;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r280, %r284, -2147483648;
	selp.f32 	%f17, %f290, %f286, %p66;
	selp.f32 	%f344, %f343, %f338, %p86;
	mov.b32 	%r378, %f500;
	mov.b32 	%r381, %f497;
	selp.f32 	%f546, %f541, %f545, %p166;
	setp.gt.f32 	%p168, %f549, 0f4B800000;
	add.f32 	%f550, %f94, 0f3F800000;
	selp.f32 	%f596, %f591, %f595, %p186;
	setp.gt.f32 	%p188, %f600, 0f4B800000;
	add.f32 	%f601, %f599, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r279, %r281, %r280;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r282, %r284, %r281;
	// end inline asm
	mov.b32 	%r319, %f344;
	mov.b32 	%r318, %f17;
	mov.b32 	%r322, %f341;
	mov.b32 	%r321, %f16;
	mov.b32 	%r365, %f75;
	mov.b32 	%r366, %f77;
	mov.b32 	%r368, %f76;
	mov.b32 	%r369, %f78;
	xor.b32  	%r377, %r381, -2147483648;
	selp.f32 	%f95, %f550, %f546, %p168;
	selp.f32 	%f602, %f601, %f596, %p188;
	// begin inline asm
	cvt.rn.f16x2.f32 %r317, %r319, %r318;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r320, %r322, %r321;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r364, %r366, %r365;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r367, %r369, %r368;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r376, %r378, %r377;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r379, %r381, %r378;
	// end inline asm
	mov.b32 	%r412, %f602;
	mov.b32 	%r411, %f95;
	mov.b32 	%r415, %f599;
	mov.b32 	%r414, %f94;
	// begin inline asm
	cvt.rn.f16x2.f32 %r410, %r412, %r411;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r413, %r415, %r414;
	// end inline asm
	mov.b32 	%r453, %f147;
	mov.b32 	%r454, %f149;
	// begin inline asm
	cvt.rn.f16x2.f32 %r452, %r454, %r453;
	// end inline asm
	mov.b32 	%r456, %f148;
	mov.b32 	%r457, %f150;
	// begin inline asm
	cvt.rn.f16x2.f32 %r455, %r457, %r456;
	// end inline asm
	shr.u32 	%r470, %r1, 3;
	bfe.u32 	%r471, %r1, 3, 1;
	shl.b32 	%r472, %r2, 1;
	and.b32  	%r473, %r472, 14;
	or.b32  	%r474, %r471, %r473;
	shl.b32 	%r475, %r1, 6;
	and.b32  	%r476, %r475, 192;
	and.b32  	%r477, %r129, 1;
	and.b32  	%r478, %r470, 2;
	or.b32  	%r479, %r477, %r478;
	shl.b32 	%r480, %r479, 4;
	or.b32  	%r481, %r474, %r5;
	or.b32  	%r482, %r481, %r476;
	or.b32  	%r483, %r482, %r480;
	mul.wide.u32 	%rd75, %r483, 4;
	add.s64 	%rd76, %rd2, %rd75;
	ld.global.u32 	%r154, [%rd76];
	ld.global.u32 	%r155, [%rd76+1024];
	shl.b32 	%r484, %r250, 13;
	shl.b32 	%r485, %r254, 7;
	add.s32 	%r156, %r485, %r484;
	shl.b32 	%r486, %r1, 2;
	shl.b32 	%r487, %r4, 7;
	or.b32  	%r157, %r486, %r487;
	and.b32  	%r158, %r1, 16;
	shr.u32 	%r488, %r1, 4;
	and.b32  	%r489, %r141, 30;
	or.b32  	%r490, %r489, %r488;
	mul.lo.s32 	%r491, %r490, 257;
	shr.u32 	%r492, %r2, 3;
	and.b32  	%r493, %r3, 224;
	mad.lo.s32 	%r494, %r492, 257, %r493;
	or.b32  	%r495, %r492, 2;
	mad.lo.s32 	%r496, %r495, 257, %r493;
	or.b32  	%r497, %r492, 4;
	mad.lo.s32 	%r498, %r497, 257, %r493;
	or.b32  	%r499, %r492, 6;
	mad.lo.s32 	%r500, %r499, 257, %r493;
	or.b32  	%r501, %r492, 8;
	mad.lo.s32 	%r502, %r501, 257, %r493;
	or.b32  	%r503, %r492, 10;
	mad.lo.s32 	%r504, %r503, 257, %r493;
	or.b32  	%r505, %r492, 12;
	mad.lo.s32 	%r506, %r505, 257, %r493;
	or.b32  	%r507, %r492, 14;
	mad.lo.s32 	%r508, %r507, 257, %r493;
	or.b32  	%r509, %r492, 16;
	mad.lo.s32 	%r510, %r509, 257, %r493;
	or.b32  	%r511, %r492, 18;
	mad.lo.s32 	%r512, %r511, 257, %r493;
	or.b32  	%r513, %r492, 20;
	mad.lo.s32 	%r514, %r513, 257, %r493;
	or.b32  	%r515, %r492, 22;
	mad.lo.s32 	%r516, %r515, 257, %r493;
	or.b32  	%r517, %r492, 24;
	mad.lo.s32 	%r518, %r517, 257, %r493;
	or.b32  	%r519, %r492, 26;
	mad.lo.s32 	%r520, %r519, 257, %r493;
	or.b32  	%r521, %r492, 28;
	mad.lo.s32 	%r522, %r521, 257, %r493;
	or.b32  	%r523, %r492, 30;
	mad.lo.s32 	%r524, %r523, 257, %r493;
	mul.lo.s32 	%r525, %r128, 2184;
	mad.lo.s32 	%r526, %r474, 33, %r525;
	mad.lo.s32 	%r527, %r479, 546, %r526;
	setp.lt.u32 	%p233, %r1, 4;
	setp.eq.s32 	%p234, %r129, 4;
	setp.eq.s32 	%p235, %r129, 5;
	and.b32  	%r528, %r2, 1;
	neg.s32 	%r529, %r528;
	setp.eq.b32 	%p236, %r528, 1;
	and.b32  	%r530, %r529, 2064;
	mul.lo.s32 	%r531, %r492, 258;
	bfe.s32 	%r532, %r2, 1, 1;
	and.b32  	%r533, %r2, 2;
	setp.eq.s32 	%p237, %r533, 0;
	and.b32  	%r534, %r532, 1032;
	and.b32  	%r535, %r486, 12;
	bfe.s32 	%r536, %r2, 2, 1;
	and.b32  	%r537, %r2, 4;
	setp.eq.s32 	%p238, %r537, 0;
	and.b32  	%r538, %r536, 516;
	bfe.s32 	%r539, %r1, 3, 1;
	and.b32  	%r540, %r1, 8;
	setp.eq.s32 	%p239, %r540, 0;
	and.b32  	%r541, %r539, 4144;
	add.s32 	%r542, %r479, %r531;
	add.s32 	%r543, %r542, %r535;
	add.s32 	%r544, %r543, %r530;
	add.s32 	%r545, %r544, %r534;
	add.s32 	%r546, %r545, %r538;
	add.s32 	%r547, %r546, %r541;
	mul.wide.u32 	%rd77, %r547, 4;
	mov.u64 	%rd78, shmem;
	add.s64 	%rd7, %rd78, %rd77;
	selp.b64 	%rd79, 0, 4144, %p239;
	selp.b64 	%rd80, 0, 516, %p238;
	selp.b64 	%rd81, 0, 1032, %p237;
	selp.b64 	%rd82, 2064, 0, %p236;
	cvt.u64.u32 	%rd83, %r535;
	cvt.u64.u32 	%rd84, %r531;
	cvt.u64.u32 	%rd85, %r479;
	add.s64 	%rd86, %rd85, %rd84;
	add.s64 	%rd87, %rd86, %rd83;
	add.s64 	%rd88, %rd87, %rd82;
	add.s64 	%rd89, %rd88, %rd81;
	add.s64 	%rd90, %rd89, %rd80;
	add.s64 	%rd91, %rd90, %rd79;
	shl.b64 	%rd92, %rd91, 2;
	add.s64 	%rd8, %rd78, %rd92;
	shl.b32 	%r548, %r252, 20;
	shl.b32 	%r549, %r256, 9;
	add.s32 	%r550, %r549, %r548;
	and.b32  	%r551, %r1, 15;
	or.b32  	%r552, %r3, %r158;
	or.b32  	%r553, %r551, %r5;
	or.b32  	%r159, %r553, %r552;
	cvt.s64.s32 	%rd9, %r550;
	add.s32 	%r554, %r2, %r491;
	mul.wide.u32 	%rd93, %r554, 4;
	add.s64 	%rd10, %rd78, %rd93;
	cvt.u64.u32 	%rd94, %r2;
	cvt.u64.u32 	%rd11, %r491;
	add.s64 	%rd95, %rd11, %rd94;
	shl.b64 	%rd96, %rd95, 2;
	add.s64 	%rd12, %rd78, %rd96;
	add.s32 	%r555, %r494, %r1;
	mul.wide.u32 	%rd97, %r555, 4;
	add.s64 	%rd13, %rd78, %rd97;
	add.s32 	%r556, %r496, %r1;
	mul.wide.u32 	%rd98, %r556, 4;
	add.s64 	%rd14, %rd78, %rd98;
	add.s32 	%r557, %r498, %r1;
	mul.wide.u32 	%rd99, %r557, 4;
	add.s64 	%rd15, %rd78, %rd99;
	add.s32 	%r558, %r500, %r1;
	mul.wide.u32 	%rd100, %r558, 4;
	add.s64 	%rd16, %rd78, %rd100;
	add.s32 	%r559, %r502, %r1;
	mul.wide.u32 	%rd101, %r559, 4;
	add.s64 	%rd17, %rd78, %rd101;
	add.s32 	%r560, %r504, %r1;
	mul.wide.u32 	%rd102, %r560, 4;
	add.s64 	%rd18, %rd78, %rd102;
	add.s32 	%r561, %r506, %r1;
	mul.wide.u32 	%rd103, %r561, 4;
	add.s64 	%rd19, %rd78, %rd103;
	add.s32 	%r562, %r508, %r1;
	mul.wide.u32 	%rd104, %r562, 4;
	add.s64 	%rd20, %rd78, %rd104;
	add.s32 	%r563, %r510, %r1;
	mul.wide.u32 	%rd105, %r563, 4;
	add.s64 	%rd21, %rd78, %rd105;
	add.s32 	%r564, %r512, %r1;
	mul.wide.u32 	%rd106, %r564, 4;
	add.s64 	%rd22, %rd78, %rd106;
	add.s32 	%r565, %r514, %r1;
	mul.wide.u32 	%rd107, %r565, 4;
	add.s64 	%rd23, %rd78, %rd107;
	add.s32 	%r566, %r516, %r1;
	mul.wide.u32 	%rd108, %r566, 4;
	add.s64 	%rd24, %rd78, %rd108;
	add.s32 	%r567, %r518, %r1;
	mul.wide.u32 	%rd109, %r567, 4;
	add.s64 	%rd25, %rd78, %rd109;
	add.s32 	%r568, %r520, %r1;
	mul.wide.u32 	%rd110, %r568, 4;
	add.s64 	%rd26, %rd78, %rd110;
	add.s32 	%r569, %r522, %r1;
	mul.wide.u32 	%rd111, %r569, 4;
	add.s64 	%rd27, %rd78, %rd111;
	add.s32 	%r570, %r524, %r1;
	mul.wide.u32 	%rd112, %r570, 4;
	add.s64 	%rd28, %rd78, %rd112;
	add.s32 	%r571, %r527, %r492;
	mul.wide.u32 	%rd113, %r571, 4;
	add.s64 	%rd29, %rd78, %rd113;
	add.s32 	%r572, %r527, %r495;
	mul.wide.u32 	%rd114, %r572, 4;
	add.s64 	%rd30, %rd78, %rd114;
	add.s32 	%r573, %r527, %r497;
	mul.wide.u32 	%rd115, %r573, 4;
	add.s64 	%rd31, %rd78, %rd115;
	add.s32 	%r574, %r527, %r499;
	mul.wide.u32 	%rd116, %r574, 4;
	add.s64 	%rd32, %rd78, %rd116;
	add.s32 	%r575, %r527, %r501;
	mul.wide.u32 	%rd117, %r575, 4;
	add.s64 	%rd33, %rd78, %rd117;
	add.s32 	%r576, %r527, %r503;
	mul.wide.u32 	%rd118, %r576, 4;
	add.s64 	%rd34, %rd78, %rd118;
	add.s32 	%r577, %r527, %r505;
	mul.wide.u32 	%rd119, %r577, 4;
	add.s64 	%rd35, %rd78, %rd119;
	add.s32 	%r578, %r527, %r507;
	mul.wide.u32 	%rd120, %r578, 4;
	add.s64 	%rd36, %rd78, %rd120;
	add.s32 	%r579, %r527, %r509;
	mul.wide.u32 	%rd121, %r579, 4;
	add.s64 	%rd37, %rd78, %rd121;
	add.s32 	%r580, %r527, %r511;
	mul.wide.u32 	%rd122, %r580, 4;
	add.s64 	%rd38, %rd78, %rd122;
	add.s32 	%r581, %r527, %r513;
	mul.wide.u32 	%rd123, %r581, 4;
	add.s64 	%rd39, %rd78, %rd123;
	add.s32 	%r582, %r527, %r515;
	mul.wide.u32 	%rd124, %r582, 4;
	add.s64 	%rd40, %rd78, %rd124;
	add.s32 	%r583, %r527, %r517;
	mul.wide.u32 	%rd125, %r583, 4;
	add.s64 	%rd41, %rd78, %rd125;
	add.s32 	%r584, %r527, %r519;
	mul.wide.u32 	%rd126, %r584, 4;
	add.s64 	%rd42, %rd78, %rd126;
	add.s32 	%r585, %r527, %r521;
	mul.wide.u32 	%rd127, %r585, 4;
	add.s64 	%rd43, %rd78, %rd127;
	add.s32 	%r586, %r527, %r523;
	mul.wide.u32 	%rd128, %r586, 4;
	add.s64 	%rd44, %rd78, %rd128;
	add.s32 	%r587, %r129, -1;
	setp.lt.u32 	%p240, %r587, 3;
	or.pred  	%p241, %p233, %p240;
	or.pred  	%p242, %p241, %p234;
	and.b32  	%r588, %r1, 24;
	setp.eq.s32 	%p243, %r588, 24;
	or.pred  	%p244, %p235, %p243;
	selp.b32 	%r160, 1145324612, -286331154, %p241;
	or.pred  	%p1, %p242, %p244;
	add.s32 	%r589, %r547, 32;
	mul.wide.u32 	%rd129, %r589, 4;
	add.s64 	%rd45, %rd78, %rd129;
	add.s32 	%r590, %r547, 48;
	mul.wide.u32 	%rd130, %r590, 4;
	add.s64 	%rd46, %rd78, %rd130;
	add.s32 	%r591, %r547, 64;
	mul.wide.u32 	%rd131, %r591, 4;
	add.s64 	%rd47, %rd78, %rd131;
	add.s32 	%r592, %r547, 80;
	mul.wide.u32 	%rd132, %r592, 4;
	add.s64 	%rd48, %rd78, %rd132;
	add.s32 	%r593, %r547, 96;
	mul.wide.u32 	%rd133, %r593, 4;
	add.s64 	%rd49, %rd78, %rd133;
	add.s32 	%r594, %r547, 112;
	mul.wide.u32 	%rd134, %r594, 4;
	add.s64 	%rd50, %rd78, %rd134;
	add.s32 	%r595, %r547, 128;
	mul.wide.u32 	%rd135, %r595, 4;
	add.s64 	%rd51, %rd78, %rd135;
	add.s32 	%r596, %r547, 144;
	mul.wide.u32 	%rd136, %r596, 4;
	add.s64 	%rd52, %rd78, %rd136;
	add.s32 	%r597, %r547, 160;
	mul.wide.u32 	%rd137, %r597, 4;
	add.s64 	%rd53, %rd78, %rd137;
	add.s32 	%r598, %r547, 176;
	mul.wide.u32 	%rd138, %r598, 4;
	add.s64 	%rd54, %rd78, %rd138;
	add.s32 	%r599, %r547, 192;
	mul.wide.u32 	%rd139, %r599, 4;
	add.s64 	%rd55, %rd78, %rd139;
	add.s32 	%r600, %r547, 208;
	mul.wide.u32 	%rd140, %r600, 4;
	add.s64 	%rd56, %rd78, %rd140;
	add.s32 	%r601, %r547, 224;
	mul.wide.u32 	%rd141, %r601, 4;
	add.s64 	%rd57, %rd78, %rd141;
	add.s32 	%r602, %r547, 240;
	mul.wide.u32 	%rd142, %r602, 4;
	add.s64 	%rd58, %rd78, %rd142;
	mov.u32 	%r89, 0;
	setp.eq.s32 	%p246, %r158, 0;
	mov.u16 	%rs38, 25600;
	mov.u16 	%rs40, 21504;
	mov.u16 	%rs44, 18432;
	mov.u32 	%r3394, %r89;
	mov.u32 	%r3395, %r89;
	mov.u32 	%r3396, %r89;
	bra.uni 	$L__BB0_191;
$L__BB0_162:                            // %L30737
                                        //   in Loop: Header=BB0_191 Depth=1
	add.s32 	%r127, %r89, 64;
	setp.ne.s32 	%p317, %r89, 960;
	mov.u32 	%r89, %r127;
	@%p317 bra 	$L__BB0_191;
	bra.uni 	$L__BB0_163;
$L__BB0_191:                            // %L1602
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_209 Depth 2
                                        //     Child Loop BB0_154 Depth 2
	add.s32 	%r603, %r89, %r250;
	setp.lt.s32 	%p245, %r603, %r251;
	@%p245 bra 	$L__BB0_192;
	bra.uni 	$L__BB0_163;
$L__BB0_192:                            // %pass780
                                        //   in Loop: Header=BB0_191 Depth=1
	cvt.u32.u64 	%r796, %rd11;
	or.b32  	%r797, %r89, %r2;
	shl.b32 	%r798, %r797, 13;
	and.b32  	%r799, %r798, 7987200;
	or.b32  	%r800, %r799, %r157;
	add.s32 	%r801, %r156, %r800;
	shr.s32 	%r802, %r801, 31;
	shr.u32 	%r803, %r802, 9;
	add.s32 	%r804, %r801, %r803;
	shr.s32 	%r805, %r804, 23;
	setp.lt.s32 	%p247, %r801, 0;
	and.b32  	%r806, %r804, -8388608;
	setp.ne.s32 	%p248, %r806, %r801;
	and.pred  	%p249, %p247, %p248;
	selp.u32 	%r807, 1, 0, %p249;
	sub.s32 	%r808, %r807, %r805;
	shl.b32 	%r809, %r808, 23;
	add.s32 	%r810, %r809, %r801;
	mul.wide.s32 	%rd143, %r810, 4;
	add.s64 	%rd144, %rd3, %rd143;
	ld.global.v4.u32 	{%r811, %r812, %r813, %r814}, [%rd144];
	or.b32  	%r815, %r797, 16;
	shl.b32 	%r816, %r815, 13;
	and.b32  	%r817, %r816, 8118272;
	or.b32  	%r818, %r817, %r157;
	add.s32 	%r819, %r156, %r818;
	shr.s32 	%r820, %r819, 31;
	shr.u32 	%r821, %r820, 9;
	add.s32 	%r822, %r819, %r821;
	shr.s32 	%r823, %r822, 23;
	setp.lt.s32 	%p250, %r819, 0;
	and.b32  	%r824, %r822, -8388608;
	setp.ne.s32 	%p251, %r824, %r819;
	and.pred  	%p252, %p250, %p251;
	selp.u32 	%r825, 1, 0, %p252;
	sub.s32 	%r826, %r825, %r823;
	shl.b32 	%r827, %r826, 23;
	add.s32 	%r828, %r827, %r819;
	mul.wide.s32 	%rd145, %r828, 4;
	add.s64 	%rd146, %rd3, %rd145;
	ld.global.v4.u32 	{%r829, %r830, %r831, %r832}, [%rd146];
	and.b32  	%r833, %r89, 960;
	or.b32  	%r834, %r2, %r833;
	shl.b32 	%r835, %r834, 13;
	or.b32  	%r836, %r835, %r157;
	or.b32  	%r837, %r836, 262144;
	add.s32 	%r838, %r156, %r837;
	shr.s32 	%r839, %r838, 31;
	shr.u32 	%r840, %r839, 9;
	add.s32 	%r841, %r838, %r840;
	shr.s32 	%r842, %r841, 23;
	setp.lt.s32 	%p253, %r838, 0;
	and.b32  	%r843, %r841, -8388608;
	setp.ne.s32 	%p254, %r843, %r838;
	and.pred  	%p255, %p253, %p254;
	selp.u32 	%r844, 1, 0, %p255;
	sub.s32 	%r845, %r844, %r842;
	shl.b32 	%r846, %r845, 23;
	add.s32 	%r847, %r846, %r838;
	mul.wide.s32 	%rd147, %r847, 4;
	add.s64 	%rd148, %rd3, %rd147;
	ld.global.v4.u32 	{%r848, %r849, %r850, %r851}, [%rd148];
	or.b32  	%r852, %r836, 393216;
	add.s32 	%r853, %r156, %r852;
	shr.s32 	%r854, %r853, 31;
	shr.u32 	%r855, %r854, 9;
	add.s32 	%r856, %r853, %r855;
	shr.s32 	%r857, %r856, 23;
	setp.lt.s32 	%p256, %r853, 0;
	and.b32  	%r858, %r856, -8388608;
	setp.ne.s32 	%p257, %r858, %r853;
	and.pred  	%p258, %p256, %p257;
	selp.u32 	%r859, 1, 0, %p258;
	sub.s32 	%r860, %r859, %r857;
	shl.b32 	%r861, %r860, 23;
	add.s32 	%r862, %r861, %r853;
	mul.wide.s32 	%rd149, %r862, 4;
	add.s64 	%rd150, %rd3, %rd149;
	ld.global.v4.u32 	{%r863, %r864, %r865, %r866}, [%rd150];
	selp.b32 	%r867, %r813, %r811, %p246;
	shfl.sync.bfly.b32	%r868, %r867, 16, 31, -1;
	selp.b32 	%r606, %r811, %r868, %p246;
	selp.b32 	%r611, %r868, %r813, %p246;
	selp.b32 	%r869, %r814, %r812, %p246;
	shfl.sync.bfly.b32	%r870, %r869, 16, 31, -1;
	selp.b32 	%r614, %r812, %r870, %p246;
	selp.b32 	%r619, %r870, %r814, %p246;
	selp.b32 	%r871, %r831, %r829, %p246;
	shfl.sync.bfly.b32	%r872, %r871, 16, 31, -1;
	selp.b32 	%r622, %r829, %r872, %p246;
	selp.b32 	%r627, %r872, %r831, %p246;
	selp.b32 	%r873, %r832, %r830, %p246;
	shfl.sync.bfly.b32	%r874, %r873, 16, 31, -1;
	selp.b32 	%r630, %r830, %r874, %p246;
	selp.b32 	%r635, %r874, %r832, %p246;
	selp.b32 	%r875, %r850, %r848, %p246;
	shfl.sync.bfly.b32	%r876, %r875, 16, 31, -1;
	selp.b32 	%r638, %r848, %r876, %p246;
	selp.b32 	%r643, %r876, %r850, %p246;
	selp.b32 	%r877, %r851, %r849, %p246;
	shfl.sync.bfly.b32	%r878, %r877, 16, 31, -1;
	selp.b32 	%r646, %r849, %r878, %p246;
	selp.b32 	%r651, %r878, %r851, %p246;
	selp.b32 	%r879, %r865, %r863, %p246;
	shfl.sync.bfly.b32	%r880, %r879, 16, 31, -1;
	selp.b32 	%r654, %r863, %r880, %p246;
	selp.b32 	%r659, %r880, %r865, %p246;
	selp.b32 	%r881, %r866, %r864, %p246;
	shfl.sync.bfly.b32	%r882, %r881, 16, 31, -1;
	selp.b32 	%r662, %r864, %r882, %p246;
	selp.b32 	%r667, %r882, %r866, %p246;
	shl.b32 	%r607, %r611, 4;
	mov.u32 	%r605, 252645135;
	// begin inline asm
	lop3.b32 %r669, %r605, %r606, %r607, 202;
	// end inline asm
	shr.u32 	%r610, %r606, 4;
	// begin inline asm
	lop3.b32 %r685, %r605, %r610, %r611, 202;
	// end inline asm
	shl.b32 	%r615, %r619, 4;
	// begin inline asm
	lop3.b32 %r677, %r605, %r614, %r615, 202;
	// end inline asm
	shr.u32 	%r618, %r614, 4;
	// begin inline asm
	lop3.b32 %r693, %r605, %r618, %r619, 202;
	// end inline asm
	shl.b32 	%r623, %r627, 4;
	// begin inline asm
	lop3.b32 %r701, %r605, %r622, %r623, 202;
	// end inline asm
	shr.u32 	%r626, %r622, 4;
	// begin inline asm
	lop3.b32 %r717, %r605, %r626, %r627, 202;
	// end inline asm
	shl.b32 	%r631, %r635, 4;
	// begin inline asm
	lop3.b32 %r709, %r605, %r630, %r631, 202;
	// end inline asm
	shr.u32 	%r634, %r630, 4;
	// begin inline asm
	lop3.b32 %r725, %r605, %r634, %r635, 202;
	// end inline asm
	shl.b32 	%r639, %r643, 4;
	// begin inline asm
	lop3.b32 %r670, %r605, %r638, %r639, 202;
	// end inline asm
	shr.u32 	%r642, %r638, 4;
	// begin inline asm
	lop3.b32 %r686, %r605, %r642, %r643, 202;
	// end inline asm
	shl.b32 	%r647, %r651, 4;
	// begin inline asm
	lop3.b32 %r678, %r605, %r646, %r647, 202;
	// end inline asm
	shr.u32 	%r650, %r646, 4;
	// begin inline asm
	lop3.b32 %r694, %r605, %r650, %r651, 202;
	// end inline asm
	shl.b32 	%r655, %r659, 4;
	// begin inline asm
	lop3.b32 %r702, %r605, %r654, %r655, 202;
	// end inline asm
	shr.u32 	%r658, %r654, 4;
	// begin inline asm
	lop3.b32 %r718, %r605, %r658, %r659, 202;
	// end inline asm
	shl.b32 	%r663, %r667, 4;
	// begin inline asm
	lop3.b32 %r710, %r605, %r662, %r663, 202;
	// end inline asm
	shr.u32 	%r666, %r662, 4;
	// begin inline asm
	lop3.b32 %r726, %r605, %r666, %r667, 202;
	// end inline asm
	mov.u32 	%r671, 25152;
	// begin inline asm
	prmt.b32 %r733, %r669, %r670, %r671;
	// end inline asm
	mov.u32 	%r675, 29521;
	// begin inline asm
	prmt.b32 %r765, %r669, %r670, %r675;
	// end inline asm
	// begin inline asm
	prmt.b32 %r741, %r677, %r678, %r671;
	// end inline asm
	// begin inline asm
	prmt.b32 %r773, %r677, %r678, %r675;
	// end inline asm
	// begin inline asm
	prmt.b32 %r734, %r685, %r686, %r671;
	// end inline asm
	// begin inline asm
	prmt.b32 %r766, %r685, %r686, %r675;
	// end inline asm
	// begin inline asm
	prmt.b32 %r742, %r693, %r694, %r671;
	// end inline asm
	// begin inline asm
	prmt.b32 %r774, %r693, %r694, %r675;
	// end inline asm
	// begin inline asm
	prmt.b32 %r749, %r701, %r702, %r671;
	// end inline asm
	// begin inline asm
	prmt.b32 %r781, %r701, %r702, %r675;
	// end inline asm
	// begin inline asm
	prmt.b32 %r757, %r709, %r710, %r671;
	// end inline asm
	// begin inline asm
	prmt.b32 %r789, %r709, %r710, %r675;
	// end inline asm
	// begin inline asm
	prmt.b32 %r750, %r717, %r718, %r671;
	// end inline asm
	// begin inline asm
	prmt.b32 %r782, %r717, %r718, %r675;
	// end inline asm
	// begin inline asm
	prmt.b32 %r758, %r725, %r726, %r671;
	// end inline asm
	// begin inline asm
	prmt.b32 %r790, %r725, %r726, %r675;
	// end inline asm
	mov.u32 	%r735, 21520;
	// begin inline asm
	prmt.b32 %r732, %r733, %r734, %r735;
	// end inline asm
	mov.u32 	%r739, 30258;
	// begin inline asm
	prmt.b32 %r736, %r733, %r734, %r739;
	// end inline asm
	// begin inline asm
	prmt.b32 %r740, %r741, %r742, %r735;
	// end inline asm
	// begin inline asm
	prmt.b32 %r744, %r741, %r742, %r739;
	// end inline asm
	// begin inline asm
	prmt.b32 %r748, %r749, %r750, %r735;
	// end inline asm
	// begin inline asm
	prmt.b32 %r752, %r749, %r750, %r739;
	// end inline asm
	// begin inline asm
	prmt.b32 %r756, %r757, %r758, %r735;
	// end inline asm
	// begin inline asm
	prmt.b32 %r760, %r757, %r758, %r739;
	// end inline asm
	// begin inline asm
	prmt.b32 %r764, %r765, %r766, %r735;
	// end inline asm
	// begin inline asm
	prmt.b32 %r768, %r765, %r766, %r739;
	// end inline asm
	// begin inline asm
	prmt.b32 %r772, %r773, %r774, %r735;
	// end inline asm
	// begin inline asm
	prmt.b32 %r776, %r773, %r774, %r739;
	// end inline asm
	// begin inline asm
	prmt.b32 %r780, %r781, %r782, %r735;
	// end inline asm
	// begin inline asm
	prmt.b32 %r784, %r781, %r782, %r739;
	// end inline asm
	// begin inline asm
	prmt.b32 %r788, %r789, %r790, %r735;
	// end inline asm
	// begin inline asm
	prmt.b32 %r792, %r789, %r790, %r739;
	// end inline asm
	st.shared.u32 	[%rd10], %r732;
	st.shared.u32 	[%rd12+512], %r740;
	st.shared.u32 	[%rd12+256], %r736;
	st.shared.u32 	[%rd12+768], %r744;
	and.b32  	%r883, %r815, 31;
	add.s32 	%r884, %r883, %r796;
	mul.wide.u32 	%rd151, %r884, 4;
	add.s64 	%rd153, %rd78, %rd151;
	st.shared.u32 	[%rd153], %r748;
	cvt.u64.u32 	%rd154, %r883;
	add.s64 	%rd155, %rd11, %rd154;
	shl.b64 	%rd156, %rd155, 2;
	add.s64 	%rd157, %rd78, %rd156;
	st.shared.u32 	[%rd157+512], %r756;
	st.shared.u32 	[%rd157+256], %r752;
	st.shared.u32 	[%rd157+768], %r760;
	st.shared.u32 	[%rd12+128], %r764;
	st.shared.u32 	[%rd12+640], %r772;
	st.shared.u32 	[%rd12+384], %r768;
	st.shared.u32 	[%rd12+896], %r776;
	st.shared.u32 	[%rd157+128], %r780;
	st.shared.u32 	[%rd157+640], %r788;
	st.shared.u32 	[%rd157+384], %r784;
	st.shared.u32 	[%rd157+896], %r792;
	bar.sync 	0;
	ld.shared.u32 	%r161, [%rd13];
	ld.shared.u32 	%r162, [%rd14];
	ld.shared.u32 	%r163, [%rd15];
	ld.shared.u32 	%r164, [%rd16];
	ld.shared.u32 	%r165, [%rd17];
	ld.shared.u32 	%r166, [%rd18];
	ld.shared.u32 	%r167, [%rd19];
	ld.shared.u32 	%r168, [%rd20];
	ld.shared.u32 	%r169, [%rd21];
	ld.shared.u32 	%r170, [%rd22];
	ld.shared.u32 	%r171, [%rd23];
	ld.shared.u32 	%r172, [%rd24];
	ld.shared.u32 	%r173, [%rd25];
	ld.shared.u32 	%r174, [%rd26];
	ld.shared.u32 	%r175, [%rd27];
	ld.shared.u32 	%r176, [%rd28];
	bar.sync 	0;
	shfl.sync.idx.b32	%r177, %r153, 0, 31, -1;
	shfl.sync.idx.b32	%r178, %r153, 1, 31, -1;
	shfl.sync.idx.b32	%r179, %r153, 2, 31, -1;
	shfl.sync.idx.b32	%r180, %r153, 3, 31, -1;
	shfl.sync.idx.b32	%r181, %r153, 4, 31, -1;
	shfl.sync.idx.b32	%r182, %r153, 5, 31, -1;
	shfl.sync.idx.b32	%r183, %r153, 6, 31, -1;
	shfl.sync.idx.b32	%r184, %r153, 7, 31, -1;
	shfl.sync.idx.b32	%r185, %r153, 8, 31, -1;
	shfl.sync.idx.b32	%r186, %r153, 9, 31, -1;
	shfl.sync.idx.b32	%r187, %r153, 10, 31, -1;
	shfl.sync.idx.b32	%r188, %r153, 11, 31, -1;
	shfl.sync.idx.b32	%r189, %r153, 12, 31, -1;
	shfl.sync.idx.b32	%r190, %r153, 13, 31, -1;
	shfl.sync.idx.b32	%r191, %r153, 14, 31, -1;
	shfl.sync.idx.b32	%r192, %r153, 15, 31, -1;
	setp.eq.s32 	%p259, %r177, 999999999;
	@%p259 bra 	$L__BB0_136;
// %bb.193:                             // %pass3077
                                        //   in Loop: Header=BB0_191 Depth=1
	add.s32 	%r885, %r177, %r1;
	mul.wide.s32 	%rd158, %r885, 4;
	add.s64 	%rd160, %rd78, %rd158;
	st.shared.u32 	[%rd160], %r161;
	setp.eq.s32 	%p260, %r178, 999999999;
	@%p260 bra 	$L__BB0_137;
// %bb.194:                             // %pass3145
                                        //   in Loop: Header=BB0_191 Depth=1
	add.s32 	%r886, %r178, %r1;
	mul.wide.s32 	%rd161, %r886, 4;
	add.s64 	%rd163, %rd78, %rd161;
	st.shared.u32 	[%rd163], %r162;
	setp.eq.s32 	%p261, %r179, 999999999;
	@%p261 bra 	$L__BB0_138;
// %bb.195:                             // %pass3213
                                        //   in Loop: Header=BB0_191 Depth=1
	add.s32 	%r887, %r179, %r1;
	mul.wide.s32 	%rd164, %r887, 4;
	add.s64 	%rd166, %rd78, %rd164;
	st.shared.u32 	[%rd166], %r163;
	setp.eq.s32 	%p262, %r180, 999999999;
	@%p262 bra 	$L__BB0_139;
// %bb.196:                             // %pass3281
                                        //   in Loop: Header=BB0_191 Depth=1
	add.s32 	%r888, %r180, %r1;
	mul.wide.s32 	%rd167, %r888, 4;
	add.s64 	%rd169, %rd78, %rd167;
	st.shared.u32 	[%rd169], %r164;
	setp.eq.s32 	%p263, %r181, 999999999;
	@%p263 bra 	$L__BB0_140;
// %bb.197:                             // %pass3349
                                        //   in Loop: Header=BB0_191 Depth=1
	add.s32 	%r889, %r181, %r1;
	mul.wide.s32 	%rd170, %r889, 4;
	add.s64 	%rd172, %rd78, %rd170;
	st.shared.u32 	[%rd172], %r165;
	setp.eq.s32 	%p264, %r182, 999999999;
	@%p264 bra 	$L__BB0_141;
// %bb.198:                             // %pass3417
                                        //   in Loop: Header=BB0_191 Depth=1
	add.s32 	%r890, %r182, %r1;
	mul.wide.s32 	%rd173, %r890, 4;
	add.s64 	%rd175, %rd78, %rd173;
	st.shared.u32 	[%rd175], %r166;
	setp.eq.s32 	%p265, %r183, 999999999;
	@%p265 bra 	$L__BB0_142;
// %bb.199:                             // %pass3485
                                        //   in Loop: Header=BB0_191 Depth=1
	add.s32 	%r891, %r183, %r1;
	mul.wide.s32 	%rd176, %r891, 4;
	add.s64 	%rd178, %rd78, %rd176;
	st.shared.u32 	[%rd178], %r167;
	setp.eq.s32 	%p266, %r184, 999999999;
	@%p266 bra 	$L__BB0_143;
// %bb.200:                             // %pass3553
                                        //   in Loop: Header=BB0_191 Depth=1
	add.s32 	%r892, %r184, %r1;
	mul.wide.s32 	%rd179, %r892, 4;
	add.s64 	%rd181, %rd78, %rd179;
	st.shared.u32 	[%rd181], %r168;
	setp.eq.s32 	%p267, %r185, 999999999;
	@%p267 bra 	$L__BB0_144;
// %bb.201:                             // %pass3621
                                        //   in Loop: Header=BB0_191 Depth=1
	add.s32 	%r893, %r185, %r1;
	mul.wide.s32 	%rd182, %r893, 4;
	add.s64 	%rd184, %rd78, %rd182;
	st.shared.u32 	[%rd184], %r169;
	setp.eq.s32 	%p268, %r186, 999999999;
	@%p268 bra 	$L__BB0_145;
// %bb.202:                             // %pass3689
                                        //   in Loop: Header=BB0_191 Depth=1
	add.s32 	%r894, %r186, %r1;
	mul.wide.s32 	%rd185, %r894, 4;
	add.s64 	%rd187, %rd78, %rd185;
	st.shared.u32 	[%rd187], %r170;
	setp.eq.s32 	%p269, %r187, 999999999;
	@%p269 bra 	$L__BB0_146;
// %bb.203:                             // %pass3757
                                        //   in Loop: Header=BB0_191 Depth=1
	add.s32 	%r895, %r187, %r1;
	mul.wide.s32 	%rd188, %r895, 4;
	add.s64 	%rd190, %rd78, %rd188;
	st.shared.u32 	[%rd190], %r171;
	setp.eq.s32 	%p270, %r188, 999999999;
	@%p270 bra 	$L__BB0_147;
// %bb.204:                             // %pass3825
                                        //   in Loop: Header=BB0_191 Depth=1
	add.s32 	%r896, %r188, %r1;
	mul.wide.s32 	%rd191, %r896, 4;
	add.s64 	%rd193, %rd78, %rd191;
	st.shared.u32 	[%rd193], %r172;
	setp.eq.s32 	%p271, %r189, 999999999;
	@%p271 bra 	$L__BB0_148;
// %bb.205:                             // %pass3893
                                        //   in Loop: Header=BB0_191 Depth=1
	add.s32 	%r897, %r189, %r1;
	mul.wide.s32 	%rd194, %r897, 4;
	add.s64 	%rd196, %rd78, %rd194;
	st.shared.u32 	[%rd196], %r173;
	setp.eq.s32 	%p272, %r190, 999999999;
	@%p272 bra 	$L__BB0_149;
// %bb.206:                             // %pass3961
                                        //   in Loop: Header=BB0_191 Depth=1
	add.s32 	%r898, %r190, %r1;
	mul.wide.s32 	%rd197, %r898, 4;
	add.s64 	%rd199, %rd78, %rd197;
	st.shared.u32 	[%rd199], %r174;
	setp.eq.s32 	%p273, %r191, 999999999;
	@%p273 bra 	$L__BB0_150;
// %bb.207:                             // %pass4029
                                        //   in Loop: Header=BB0_191 Depth=1
	add.s32 	%r899, %r191, %r1;
	mul.wide.s32 	%rd200, %r899, 4;
	add.s64 	%rd202, %rd78, %rd200;
	st.shared.u32 	[%rd202], %r175;
	setp.eq.s32 	%p274, %r192, 999999999;
	@%p274 bra 	$L__BB0_151;
// %bb.208:                             // %pass4097
                                        //   in Loop: Header=BB0_191 Depth=1
	add.s32 	%r901, %r192, %r1;
	mul.wide.s32 	%rd203, %r901, 4;
	add.s64 	%rd205, %rd78, %rd203;
	st.shared.u32 	[%rd205], %r176;
	bar.sync 	0;
	ld.shared.u32 	%r193, [%rd29];
	ld.shared.u32 	%r194, [%rd30];
	ld.shared.u32 	%r195, [%rd31];
	ld.shared.u32 	%r196, [%rd32];
	ld.shared.u32 	%r197, [%rd33];
	ld.shared.u32 	%r198, [%rd34];
	ld.shared.u32 	%r199, [%rd35];
	ld.shared.u32 	%r200, [%rd36];
	ld.shared.u32 	%r201, [%rd37];
	ld.shared.u32 	%r202, [%rd38];
	ld.shared.u32 	%r203, [%rd39];
	ld.shared.u32 	%r204, [%rd40];
	ld.shared.u32 	%r205, [%rd41];
	ld.shared.u32 	%r206, [%rd42];
	ld.shared.u32 	%r207, [%rd43];
	ld.shared.u32 	%r208, [%rd44];
	bar.sync 	0;
	mov.u32 	%r3386, 16;
	bra.uni 	$L__BB0_209;
$L__BB0_152:                            // %L21481
                                        //   in Loop: Header=BB0_209 Depth=2
	bar.sync 	0;
	add.s32 	%r3386, %r3386, -8;
	setp.ne.s32 	%p295, %r3386, -16;
	@%p295 bra 	$L__BB0_209;
	bra.uni 	$L__BB0_153;
$L__BB0_209:                            // %L12262
                                        //   Parent Loop BB0_191 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p275, %r3386, 16;
	selp.b32 	%r1294, %r193, 0, %p275;
	setp.eq.s32 	%p276, %r3386, 8;
	selp.b32 	%r1295, %r197, %r1294, %p276;
	setp.eq.s32 	%p277, %r3386, 0;
	selp.b32 	%r1296, %r201, %r1295, %p277;
	setp.eq.s32 	%p278, %r3386, -8;
	selp.b32 	%r1297, %r205, %r1296, %p278;
	selp.b32 	%r1298, %r194, 0, %p275;
	selp.b32 	%r1299, %r198, %r1298, %p276;
	selp.b32 	%r1300, %r202, %r1299, %p277;
	selp.b32 	%r1301, %r206, %r1300, %p278;
	selp.b32 	%r1302, %r195, 0, %p275;
	selp.b32 	%r1303, %r199, %r1302, %p276;
	selp.b32 	%r1304, %r203, %r1303, %p277;
	selp.b32 	%r1305, %r207, %r1304, %p278;
	selp.b32 	%r1306, %r196, 0, %p275;
	selp.b32 	%r1307, %r200, %r1306, %p276;
	selp.b32 	%r1308, %r204, %r1307, %p277;
	selp.b32 	%r1309, %r208, %r1308, %p278;
	// begin inline asm
	mov.b32 %r907, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r918, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r906, %r1297, -2004318072;
	mov.u32 	%r1043, 983055;
	// begin inline asm
	lop3.b32 %r904, %r1043, %r906, %r907, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r908, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r909, %r907, %r908;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r912, %r904, %r909;
	// end inline asm
	mov.u32 	%r1054, 15728880;
	// begin inline asm
	lop3.b32 %r915, %r1054, %r906, %r918, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r919, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r920, %r918, %r919;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r923, %r915, %r920;
	// end inline asm
	// begin inline asm
	mov.b32 %r953, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r964, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r952, %r1301, -2004318072;
	// begin inline asm
	lop3.b32 %r950, %r1043, %r952, %r953, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r954, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r955, %r953, %r954;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r958, %r950, %r955;
	// end inline asm
	// begin inline asm
	lop3.b32 %r961, %r1054, %r952, %r964, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r965, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r966, %r964, %r965;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r969, %r961, %r966;
	// end inline asm
	// begin inline asm
	mov.b32 %r999, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1010, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r998, %r1305, -2004318072;
	// begin inline asm
	lop3.b32 %r996, %r1043, %r998, %r999, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1000, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1001, %r999, %r1000;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1004, %r996, %r1001;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1007, %r1054, %r998, %r1010, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1011, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1012, %r1010, %r1011;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1015, %r1007, %r1012;
	// end inline asm
	// begin inline asm
	mov.b32 %r1045, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1056, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1044, %r1309, -2004318072;
	// begin inline asm
	lop3.b32 %r1042, %r1043, %r1044, %r1045, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1046, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1047, %r1045, %r1046;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1050, %r1042, %r1047;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1053, %r1054, %r1044, %r1056, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1057, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1058, %r1056, %r1057;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1061, %r1053, %r1058;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r912;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1086, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r923;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1089, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r958;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1092, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r969;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1095, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r1004;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1098, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r1015;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1101, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r1050;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1104, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r1061;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1107, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1165, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1110, %r1111}, {%r279, %r282}, {%r1086}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1117, %r1118}, {%r279, %r282}, {%r1089}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1124, %r1125}, {%r279, %r282}, {%r1092}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1131, %r1132}, {%r279, %r282}, {%r1095}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1138, %r1139}, {%r279, %r282}, {%r1098}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1145, %r1146}, {%r279, %r282}, {%r1101}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1152, %r1153}, {%r279, %r282}, {%r1104}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1159, %r1160}, {%r279, %r282}, {%r1107}, {%r1165, %r1165};
	// end inline asm
	@%p1 bra 	$L__BB0_211;
	bra.uni 	$L__BB0_210;
$L__BB0_211:                            // %pass5517
                                        //   in Loop: Header=BB0_209 Depth=2
	// begin inline asm
	neg.f16x2 %r1166, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1168, %r1166, %r1111;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1171, %r317, %r1110, %r1168;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1175, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1177, %r1175, %r1118;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1180, %r317, %r1117, %r1177;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1184, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1186, %r1184, %r1125;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1189, %r317, %r1124, %r1186;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1193, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1195, %r1193, %r1132;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1198, %r317, %r1131, %r1195;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1202, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1204, %r1202, %r1139;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1207, %r317, %r1138, %r1204;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1211, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1213, %r1211, %r1146;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1216, %r317, %r1145, %r1213;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1220, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1222, %r1220, %r1153;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1225, %r317, %r1152, %r1222;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1229, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1231, %r1229, %r1160;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1234, %r317, %r1159, %r1231;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1238, %r320, %r1110;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1241, %r317, %r1111, %r1238;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1245, %r320, %r1117;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1248, %r317, %r1118, %r1245;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1252, %r320, %r1124;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1255, %r317, %r1125, %r1252;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1259, %r320, %r1131;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1262, %r317, %r1132, %r1259;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1266, %r320, %r1138;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1269, %r317, %r1139, %r1266;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1273, %r320, %r1145;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1276, %r317, %r1146, %r1273;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1280, %r320, %r1152;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1283, %r317, %r1153, %r1280;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1287, %r320, %r1159;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1290, %r317, %r1160, %r1287;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1310, %r1311}, {%r364, %r367}, {%r1171, %r1241}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1319, %r1320}, {%r364, %r367}, {%r1180, %r1248}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1328, %r1329}, {%r364, %r367}, {%r1189, %r1255}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1337, %r1338}, {%r364, %r367}, {%r1198, %r1262}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1346, %r1347}, {%r364, %r367}, {%r1207, %r1269}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1355, %r1356}, {%r364, %r367}, {%r1216, %r1276}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1364, %r1365}, {%r364, %r367}, {%r1225, %r1283}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1373, %r1374}, {%r364, %r367}, {%r1234, %r1290}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	bar.sync 	0;
	ld.shared.u32 	%r1450, [%rd7];
	ld.shared.u32 	%r1457, [%rd8+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1467, %r1464}, {%r376, %r379}, {%r1450}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1476, %r1473}, {%r376, %r379}, {%r1457}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1460, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1462, %r1460, %r1464;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1465, %r410, %r1467, %r1462;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1469, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1471, %r1469, %r1473;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1474, %r410, %r1476, %r1471;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1478, %r413, %r1467;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1481, %r410, %r1464, %r1478;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1485, %r413, %r1476;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1488, %r410, %r1473, %r1485;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1511, %r1514}, {%r452, %r455}, {%r1465, %r1481}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1518, %r1522}, {%r452, %r455}, {%r1474, %r1488}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1510, %r1511, %r1511;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1513, %r1514, %r1514, %r1510;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1517, %r1518, %r1518, %r1513;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1521, %r1522, %r1522, %r1517;
	// end inline asm
	mov.u32 	%r1609, 626337109;
	// begin inline asm
	fma.rn.f16x2 %r1525, %r1609, %r1521, %r3396;
	// end inline asm
	ld.shared.u32 	%r1533, [%rd45];
	ld.shared.u32 	%r1540, [%rd46];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1550, %r1547}, {%r376, %r379}, {%r1533}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1559, %r1556}, {%r376, %r379}, {%r1540}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1543, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1545, %r1543, %r1547;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1548, %r410, %r1550, %r1545;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1552, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1554, %r1552, %r1556;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1557, %r410, %r1559, %r1554;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1561, %r413, %r1550;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1564, %r410, %r1547, %r1561;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1568, %r413, %r1559;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1571, %r410, %r1556, %r1568;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1594, %r1597}, {%r452, %r455}, {%r1548, %r1564}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1601, %r1605}, {%r452, %r455}, {%r1557, %r1571}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1593, %r1594, %r1594;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1596, %r1597, %r1597, %r1593;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1600, %r1601, %r1601, %r1596;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1604, %r1605, %r1605, %r1600;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3407, %r1609, %r1604, %r1525;
	// end inline asm
	add.s32 	%r3405, %r3394, 2;
	setp.ne.s32 	%p279, %r3405, 6;
	@%p279 bra 	$L__BB0_213;
// %bb.212:                             // %pass6481
                                        //   in Loop: Header=BB0_209 Depth=2
	shl.b32 	%r1613, %r3395, 20;
	or.b32  	%r1614, %r159, %r1613;
	cvt.u64.u32 	%rd208, %r1614;
	add.s64 	%rd209, %rd208, %rd9;
	shr.u64 	%rd210, %rd209, 34;
	add.s64 	%rd211, %rd209, %rd210;
	shr.s64 	%rd212, %rd211, 30;
	setp.lt.s64 	%p280, %rd209, 0;
	and.b64  	%rd213, %rd211, -1073741824;
	setp.ne.s64 	%p281, %rd213, %rd209;
	and.pred  	%p282, %p280, %p281;
	selp.u64 	%rd214, 1, 0, %p282;
	sub.s64 	%rd215, %rd214, %rd212;
	shl.b64 	%rd216, %rd215, 30;
	add.s64 	%rd217, %rd216, %rd209;
	shl.b64 	%rd218, %rd217, 2;
	add.s64 	%rd219, %rd4, %rd218;
	st.global.u32 	[%rd219], %r3407;
	add.s32 	%r3395, %r3395, 1;
	mov.u32 	%r3405, 0;
	mov.u32 	%r3407, %r3405;
$L__BB0_213:                            // %pass6732
                                        //   in Loop: Header=BB0_209 Depth=2
	ld.shared.u32 	%r1619, [%rd47];
	ld.shared.u32 	%r1626, [%rd48];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1636, %r1633}, {%r376, %r379}, {%r1619}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1645, %r1642}, {%r376, %r379}, {%r1626}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1629, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1631, %r1629, %r1633;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1634, %r410, %r1636, %r1631;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1638, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1640, %r1638, %r1642;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1643, %r410, %r1645, %r1640;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1647, %r413, %r1636;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1650, %r410, %r1633, %r1647;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1654, %r413, %r1645;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1657, %r410, %r1642, %r1654;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1680, %r1683}, {%r452, %r455}, {%r1634, %r1650}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1687, %r1691}, {%r452, %r455}, {%r1643, %r1657}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1679, %r1680, %r1680;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1682, %r1683, %r1683, %r1679;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1686, %r1687, %r1687, %r1682;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1690, %r1691, %r1691, %r1686;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1694, %r1609, %r1690, %r3407;
	// end inline asm
	ld.shared.u32 	%r1702, [%rd49];
	ld.shared.u32 	%r1709, [%rd50];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1719, %r1716}, {%r376, %r379}, {%r1702}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1728, %r1725}, {%r376, %r379}, {%r1709}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1712, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1714, %r1712, %r1716;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1717, %r410, %r1719, %r1714;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1721, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1723, %r1721, %r1725;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1726, %r410, %r1728, %r1723;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1730, %r413, %r1719;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1733, %r410, %r1716, %r1730;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1737, %r413, %r1728;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1740, %r410, %r1725, %r1737;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1763, %r1766}, {%r452, %r455}, {%r1717, %r1733}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1770, %r1774}, {%r452, %r455}, {%r1726, %r1740}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1762, %r1763, %r1763;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1765, %r1766, %r1766, %r1762;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1769, %r1770, %r1770, %r1765;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1773, %r1774, %r1774, %r1769;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3410, %r1609, %r1773, %r1694;
	// end inline asm
	add.s32 	%r3408, %r3405, 2;
	setp.ne.s32 	%p283, %r3408, 6;
	@%p283 bra 	$L__BB0_215;
// %bb.214:                             // %pass7397
                                        //   in Loop: Header=BB0_209 Depth=2
	shl.b32 	%r1782, %r3395, 20;
	or.b32  	%r1783, %r159, %r1782;
	cvt.u64.u32 	%rd220, %r1783;
	add.s64 	%rd221, %rd220, %rd9;
	shr.u64 	%rd222, %rd221, 34;
	add.s64 	%rd223, %rd221, %rd222;
	shr.s64 	%rd224, %rd223, 30;
	setp.lt.s64 	%p284, %rd221, 0;
	and.b64  	%rd225, %rd223, -1073741824;
	setp.ne.s64 	%p285, %rd225, %rd221;
	and.pred  	%p286, %p284, %p285;
	selp.u64 	%rd226, 1, 0, %p286;
	sub.s64 	%rd227, %rd226, %rd224;
	shl.b64 	%rd228, %rd227, 30;
	add.s64 	%rd229, %rd228, %rd221;
	shl.b64 	%rd230, %rd229, 2;
	add.s64 	%rd231, %rd4, %rd230;
	st.global.u32 	[%rd231], %r3410;
	add.s32 	%r3395, %r3395, 1;
	mov.u32 	%r3408, 0;
	mov.u32 	%r3410, %r3408;
$L__BB0_215:                            // %pass7648
                                        //   in Loop: Header=BB0_209 Depth=2
	ld.shared.u32 	%r1788, [%rd51];
	ld.shared.u32 	%r1795, [%rd52];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1805, %r1802}, {%r376, %r379}, {%r1788}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1814, %r1811}, {%r376, %r379}, {%r1795}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1798, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1800, %r1798, %r1802;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1803, %r410, %r1805, %r1800;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1807, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1809, %r1807, %r1811;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1812, %r410, %r1814, %r1809;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1816, %r413, %r1805;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1819, %r410, %r1802, %r1816;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1823, %r413, %r1814;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1826, %r410, %r1811, %r1823;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1849, %r1852}, {%r452, %r455}, {%r1803, %r1819}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1856, %r1860}, {%r452, %r455}, {%r1812, %r1826}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1848, %r1849, %r1849;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1851, %r1852, %r1852, %r1848;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1855, %r1856, %r1856, %r1851;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1859, %r1860, %r1860, %r1855;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1863, %r1609, %r1859, %r3410;
	// end inline asm
	ld.shared.u32 	%r1871, [%rd53];
	ld.shared.u32 	%r1878, [%rd54];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1888, %r1885}, {%r376, %r379}, {%r1871}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1897, %r1894}, {%r376, %r379}, {%r1878}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1881, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1883, %r1881, %r1885;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1886, %r410, %r1888, %r1883;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1890, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1892, %r1890, %r1894;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1895, %r410, %r1897, %r1892;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1899, %r413, %r1888;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1902, %r410, %r1885, %r1899;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1906, %r413, %r1897;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1909, %r410, %r1894, %r1906;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1932, %r1935}, {%r452, %r455}, {%r1886, %r1902}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1939, %r1943}, {%r452, %r455}, {%r1895, %r1909}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1931, %r1932, %r1932;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1934, %r1935, %r1935, %r1931;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1938, %r1939, %r1939, %r1934;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1942, %r1943, %r1943, %r1938;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3413, %r1609, %r1942, %r1863;
	// end inline asm
	add.s32 	%r3411, %r3408, 2;
	setp.ne.s32 	%p287, %r3411, 6;
	@%p287 bra 	$L__BB0_217;
// %bb.216:                             // %pass8313
                                        //   in Loop: Header=BB0_209 Depth=2
	shl.b32 	%r1951, %r3395, 20;
	or.b32  	%r1952, %r159, %r1951;
	cvt.u64.u32 	%rd232, %r1952;
	add.s64 	%rd233, %rd232, %rd9;
	shr.u64 	%rd234, %rd233, 34;
	add.s64 	%rd235, %rd233, %rd234;
	shr.s64 	%rd236, %rd235, 30;
	setp.lt.s64 	%p288, %rd233, 0;
	and.b64  	%rd237, %rd235, -1073741824;
	setp.ne.s64 	%p289, %rd237, %rd233;
	and.pred  	%p290, %p288, %p289;
	selp.u64 	%rd238, 1, 0, %p290;
	sub.s64 	%rd239, %rd238, %rd236;
	shl.b64 	%rd240, %rd239, 30;
	add.s64 	%rd241, %rd240, %rd233;
	shl.b64 	%rd242, %rd241, 2;
	add.s64 	%rd243, %rd4, %rd242;
	st.global.u32 	[%rd243], %r3413;
	add.s32 	%r3395, %r3395, 1;
	mov.u32 	%r3411, 0;
	mov.u32 	%r3413, %r3411;
$L__BB0_217:                            // %pass8564
                                        //   in Loop: Header=BB0_209 Depth=2
	ld.shared.u32 	%r1957, [%rd55];
	ld.shared.u32 	%r1964, [%rd56];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1974, %r1971}, {%r376, %r379}, {%r1957}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1983, %r1980}, {%r376, %r379}, {%r1964}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1967, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1969, %r1967, %r1971;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1972, %r410, %r1974, %r1969;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1976, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1978, %r1976, %r1980;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1981, %r410, %r1983, %r1978;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1985, %r413, %r1974;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1988, %r410, %r1971, %r1985;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1992, %r413, %r1983;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1995, %r410, %r1980, %r1992;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2018, %r2021}, {%r452, %r455}, {%r1972, %r1988}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2025, %r2029}, {%r452, %r455}, {%r1981, %r1995}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2017, %r2018, %r2018;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2020, %r2021, %r2021, %r2017;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2024, %r2025, %r2025, %r2020;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2028, %r2029, %r2029, %r2024;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2032, %r1609, %r2028, %r3413;
	// end inline asm
	ld.shared.u32 	%r2040, [%rd57];
	ld.shared.u32 	%r2047, [%rd58];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2057, %r2054}, {%r376, %r379}, {%r2040}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2066, %r2063}, {%r376, %r379}, {%r2047}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2050, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2052, %r2050, %r2054;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2055, %r410, %r2057, %r2052;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2059, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2061, %r2059, %r2063;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2064, %r410, %r2066, %r2061;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2068, %r413, %r2057;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2071, %r410, %r2054, %r2068;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2075, %r413, %r2066;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2078, %r410, %r2063, %r2075;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2101, %r2104}, {%r452, %r455}, {%r2055, %r2071}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2108, %r2112}, {%r452, %r455}, {%r2064, %r2078}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2100, %r2101, %r2101;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2103, %r2104, %r2104, %r2100;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2107, %r2108, %r2108, %r2103;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2111, %r2112, %r2112, %r2107;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3396, %r1609, %r2111, %r2032;
	// end inline asm
	add.s32 	%r3394, %r3411, 2;
	setp.ne.s32 	%p291, %r3394, 6;
	@%p291 bra 	$L__BB0_152;
// %bb.218:                             // %pass9229
                                        //   in Loop: Header=BB0_209 Depth=2
	shl.b32 	%r2120, %r3395, 20;
	or.b32  	%r2121, %r159, %r2120;
	cvt.u64.u32 	%rd244, %r2121;
	add.s64 	%rd245, %rd244, %rd9;
	shr.u64 	%rd246, %rd245, 34;
	add.s64 	%rd247, %rd245, %rd246;
	shr.s64 	%rd248, %rd247, 30;
	setp.lt.s64 	%p292, %rd245, 0;
	and.b64  	%rd249, %rd247, -1073741824;
	setp.ne.s64 	%p293, %rd249, %rd245;
	and.pred  	%p294, %p292, %p293;
	selp.u64 	%rd250, 1, 0, %p294;
	sub.s64 	%rd251, %rd250, %rd248;
	shl.b64 	%rd252, %rd251, 30;
	add.s64 	%rd253, %rd252, %rd245;
	shl.b64 	%rd254, %rd253, 2;
	add.s64 	%rd255, %rd4, %rd254;
	st.global.u32 	[%rd255], %r3396;
	add.s32 	%r3395, %r3395, 1;
	mov.u32 	%r3394, 0;
	mov.u32 	%r3396, %r3394;
	bra.uni 	$L__BB0_152;
$L__BB0_153:                            // %L21502.preheader
                                        //   in Loop: Header=BB0_191 Depth=1
	mov.u32 	%r3393, 16;
	bra.uni 	$L__BB0_154;
$L__BB0_161:                            // %L30721
                                        //   in Loop: Header=BB0_154 Depth=2
	bar.sync 	0;
	add.s32 	%r3393, %r3393, -8;
	setp.ne.s32 	%p316, %r3393, -16;
	@%p316 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_162;
$L__BB0_154:                            // %L21502
                                        //   Parent Loop BB0_191 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p296, %r3393, 16;
	selp.b32 	%r2817, %r193, 0, %p296;
	setp.eq.s32 	%p297, %r3393, 8;
	selp.b32 	%r2818, %r197, %r2817, %p297;
	setp.eq.s32 	%p298, %r3393, 0;
	selp.b32 	%r2819, %r201, %r2818, %p298;
	setp.eq.s32 	%p299, %r3393, -8;
	selp.b32 	%r2820, %r205, %r2819, %p299;
	selp.b32 	%r2821, %r194, 0, %p296;
	selp.b32 	%r2822, %r198, %r2821, %p297;
	selp.b32 	%r2823, %r202, %r2822, %p298;
	selp.b32 	%r2824, %r206, %r2823, %p299;
	selp.b32 	%r2825, %r195, 0, %p296;
	selp.b32 	%r2826, %r199, %r2825, %p297;
	selp.b32 	%r2827, %r203, %r2826, %p298;
	selp.b32 	%r2828, %r207, %r2827, %p299;
	selp.b32 	%r2829, %r196, 0, %p296;
	selp.b32 	%r2830, %r200, %r2829, %p297;
	selp.b32 	%r2831, %r204, %r2830, %p298;
	selp.b32 	%r2832, %r208, %r2831, %p299;
	// begin inline asm
	mov.b32 %r2150, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2161, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2833, %r2820, 8;
	xor.b32  	%r2160, %r2833, 8947848;
	// begin inline asm
	lop3.b32 %r2147, %r1043, %r2160, %r2150, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2151, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2152, %r2150, %r2151;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2155, %r2147, %r2152;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2158, %r1054, %r2160, %r2161, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2162, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2163, %r2161, %r2162;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2166, %r2158, %r2163;
	// end inline asm
	// begin inline asm
	mov.b32 %r2196, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2207, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2834, %r2824, 8;
	xor.b32  	%r2206, %r2834, 8947848;
	// begin inline asm
	lop3.b32 %r2193, %r1043, %r2206, %r2196, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2197, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2198, %r2196, %r2197;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2201, %r2193, %r2198;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2204, %r1054, %r2206, %r2207, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2208, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2209, %r2207, %r2208;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2212, %r2204, %r2209;
	// end inline asm
	// begin inline asm
	mov.b32 %r2242, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2253, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2835, %r2828, 8;
	xor.b32  	%r2252, %r2835, 8947848;
	// begin inline asm
	lop3.b32 %r2239, %r1043, %r2252, %r2242, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2243, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2244, %r2242, %r2243;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2247, %r2239, %r2244;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2250, %r1054, %r2252, %r2253, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2254, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2255, %r2253, %r2254;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2258, %r2250, %r2255;
	// end inline asm
	// begin inline asm
	mov.b32 %r2288, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2299, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2836, %r2832, 8;
	xor.b32  	%r2298, %r2836, 8947848;
	// begin inline asm
	lop3.b32 %r2285, %r1043, %r2298, %r2288, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2289, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2290, %r2288, %r2289;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2293, %r2285, %r2290;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2296, %r1054, %r2298, %r2299, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2300, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2301, %r2299, %r2300;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2304, %r2296, %r2301;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2155;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2307, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r2166;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2310, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2201;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2313, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r2212;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2316, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2247;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2319, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r2258;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2322, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r154;
    mov.b32 {%r2re, %r2im}, %r2293;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2325, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r155;
    mov.b32 {%r2re, %r2im}, %r2304;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2328, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2394, %r2391}, {%r279, %r282}, {%r2307}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2403, %r2400}, {%r279, %r282}, {%r2310}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2412, %r2409}, {%r279, %r282}, {%r2313}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2421, %r2418}, {%r279, %r282}, {%r2316}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2430, %r2427}, {%r279, %r282}, {%r2319}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2439, %r2436}, {%r279, %r282}, {%r2322}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2448, %r2445}, {%r279, %r282}, {%r2325}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2457, %r2454}, {%r279, %r282}, {%r2328}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2387, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2389, %r2387, %r2391;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2392, %r317, %r2394, %r2389;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2396, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2398, %r2396, %r2400;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2401, %r317, %r2403, %r2398;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2405, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2407, %r2405, %r2409;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2410, %r317, %r2412, %r2407;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2414, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2416, %r2414, %r2418;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2419, %r317, %r2421, %r2416;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2423, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2425, %r2423, %r2427;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2428, %r317, %r2430, %r2425;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2432, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2434, %r2432, %r2436;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2437, %r317, %r2439, %r2434;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2441, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2443, %r2441, %r2445;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2446, %r317, %r2448, %r2443;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2450, %r320;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2452, %r2450, %r2454;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2455, %r317, %r2457, %r2452;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2459, %r320, %r2394;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2462, %r317, %r2391, %r2459;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2466, %r320, %r2403;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2469, %r317, %r2400, %r2466;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2473, %r320, %r2412;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2476, %r317, %r2409, %r2473;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2480, %r320, %r2421;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2483, %r317, %r2418, %r2480;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2487, %r320, %r2430;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2490, %r317, %r2427, %r2487;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2494, %r320, %r2439;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2497, %r317, %r2436, %r2494;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2501, %r320, %r2448;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2504, %r317, %r2445, %r2501;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2508, %r320, %r2457;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2511, %r317, %r2454, %r2508;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2515, %r2516}, {%r364, %r367}, {%r2392, %r2462}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2524, %r2525}, {%r364, %r367}, {%r2401, %r2469}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2533, %r2534}, {%r364, %r367}, {%r2410, %r2476}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2542, %r2543}, {%r364, %r367}, {%r2419, %r2483}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2551, %r2552}, {%r364, %r367}, {%r2428, %r2490}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2560, %r2561}, {%r364, %r367}, {%r2437, %r2497}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2569, %r2570}, {%r364, %r367}, {%r2446, %r2504}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2578, %r2579}, {%r364, %r367}, {%r2455, %r2511}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	bar.sync 	0;
	ld.shared.u32 	%r2655, [%rd7];
	ld.shared.u32 	%r2662, [%rd8+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2672, %r2669}, {%r376, %r379}, {%r2655}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2681, %r2678}, {%r376, %r379}, {%r2662}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2665, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2667, %r2665, %r2669;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2670, %r410, %r2672, %r2667;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2674, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2676, %r2674, %r2678;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2679, %r410, %r2681, %r2676;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2683, %r413, %r2672;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2686, %r410, %r2669, %r2683;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2690, %r413, %r2681;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2693, %r410, %r2678, %r2690;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2716, %r2719}, {%r452, %r455}, {%r2670, %r2686}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2723, %r2727}, {%r452, %r455}, {%r2679, %r2693}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2715, %r2716, %r2716;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2718, %r2719, %r2719, %r2715;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2722, %r2723, %r2723, %r2718;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2726, %r2727, %r2727, %r2722;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2730, %r1609, %r2726, %r3396;
	// end inline asm
	ld.shared.u32 	%r2738, [%rd45];
	ld.shared.u32 	%r2745, [%rd46];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2755, %r2752}, {%r376, %r379}, {%r2738}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2764, %r2761}, {%r376, %r379}, {%r2745}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2748, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2750, %r2748, %r2752;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2753, %r410, %r2755, %r2750;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2757, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2759, %r2757, %r2761;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2762, %r410, %r2764, %r2759;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2766, %r413, %r2755;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2769, %r410, %r2752, %r2766;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2773, %r413, %r2764;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2776, %r410, %r2761, %r2773;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2799, %r2802}, {%r452, %r455}, {%r2753, %r2769}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2806, %r2810}, {%r452, %r455}, {%r2762, %r2776}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2798, %r2799, %r2799;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2801, %r2802, %r2802, %r2798;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2805, %r2806, %r2806, %r2801;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2809, %r2810, %r2810, %r2805;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3416, %r1609, %r2809, %r2730;
	// end inline asm
	add.s32 	%r3414, %r3394, 2;
	setp.eq.s32 	%p300, %r3414, 6;
	@%p300 bra 	$L__BB0_155;
	bra.uni 	$L__BB0_156;
$L__BB0_155:                            // %pass10330
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r2838, %r3395, 20;
	or.b32  	%r2839, %r159, %r2838;
	cvt.u64.u32 	%rd256, %r2839;
	add.s64 	%rd257, %rd256, %rd9;
	shr.u64 	%rd258, %rd257, 34;
	add.s64 	%rd259, %rd257, %rd258;
	shr.s64 	%rd260, %rd259, 30;
	setp.lt.s64 	%p301, %rd257, 0;
	and.b64  	%rd261, %rd259, -1073741824;
	setp.ne.s64 	%p302, %rd261, %rd257;
	and.pred  	%p303, %p301, %p302;
	selp.u64 	%rd262, 1, 0, %p303;
	sub.s64 	%rd263, %rd262, %rd260;
	shl.b64 	%rd264, %rd263, 30;
	add.s64 	%rd265, %rd264, %rd257;
	shl.b64 	%rd266, %rd265, 2;
	add.s64 	%rd267, %rd4, %rd266;
	st.global.u32 	[%rd267], %r3416;
	add.s32 	%r3395, %r3395, 1;
	mov.u32 	%r3414, 0;
	mov.u32 	%r3416, %r3414;
$L__BB0_156:                            // %pass10581
                                        //   in Loop: Header=BB0_154 Depth=2
	ld.shared.u32 	%r2844, [%rd47];
	ld.shared.u32 	%r2851, [%rd48];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2861, %r2858}, {%r376, %r379}, {%r2844}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2870, %r2867}, {%r376, %r379}, {%r2851}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2854, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2856, %r2854, %r2858;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2859, %r410, %r2861, %r2856;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2863, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2865, %r2863, %r2867;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2868, %r410, %r2870, %r2865;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2872, %r413, %r2861;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2875, %r410, %r2858, %r2872;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2879, %r413, %r2870;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2882, %r410, %r2867, %r2879;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2905, %r2908}, {%r452, %r455}, {%r2859, %r2875}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2912, %r2916}, {%r452, %r455}, {%r2868, %r2882}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2904, %r2905, %r2905;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2907, %r2908, %r2908, %r2904;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2911, %r2912, %r2912, %r2907;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2915, %r2916, %r2916, %r2911;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2919, %r1609, %r2915, %r3416;
	// end inline asm
	ld.shared.u32 	%r2927, [%rd49];
	ld.shared.u32 	%r2934, [%rd50];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2944, %r2941}, {%r376, %r379}, {%r2927}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2953, %r2950}, {%r376, %r379}, {%r2934}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2937, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2939, %r2937, %r2941;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2942, %r410, %r2944, %r2939;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2946, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2948, %r2946, %r2950;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2951, %r410, %r2953, %r2948;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2955, %r413, %r2944;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2958, %r410, %r2941, %r2955;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2962, %r413, %r2953;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2965, %r410, %r2950, %r2962;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2988, %r2991}, {%r452, %r455}, {%r2942, %r2958}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2995, %r2999}, {%r452, %r455}, {%r2951, %r2965}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2987, %r2988, %r2988;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2990, %r2991, %r2991, %r2987;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2994, %r2995, %r2995, %r2990;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2998, %r2999, %r2999, %r2994;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3419, %r1609, %r2998, %r2919;
	// end inline asm
	add.s32 	%r3417, %r3414, 2;
	setp.ne.s32 	%p304, %r3417, 6;
	@%p304 bra 	$L__BB0_158;
// %bb.157:                             // %pass11246
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r3007, %r3395, 20;
	or.b32  	%r3008, %r159, %r3007;
	cvt.u64.u32 	%rd268, %r3008;
	add.s64 	%rd269, %rd268, %rd9;
	shr.u64 	%rd270, %rd269, 34;
	add.s64 	%rd271, %rd269, %rd270;
	shr.s64 	%rd272, %rd271, 30;
	setp.lt.s64 	%p305, %rd269, 0;
	and.b64  	%rd273, %rd271, -1073741824;
	setp.ne.s64 	%p306, %rd273, %rd269;
	and.pred  	%p307, %p305, %p306;
	selp.u64 	%rd274, 1, 0, %p307;
	sub.s64 	%rd275, %rd274, %rd272;
	shl.b64 	%rd276, %rd275, 30;
	add.s64 	%rd277, %rd276, %rd269;
	shl.b64 	%rd278, %rd277, 2;
	add.s64 	%rd279, %rd4, %rd278;
	st.global.u32 	[%rd279], %r3419;
	add.s32 	%r3395, %r3395, 1;
	mov.u32 	%r3417, 0;
	mov.u32 	%r3419, %r3417;
$L__BB0_158:                            // %pass11497
                                        //   in Loop: Header=BB0_154 Depth=2
	ld.shared.u32 	%r3013, [%rd51];
	ld.shared.u32 	%r3020, [%rd52];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3030, %r3027}, {%r376, %r379}, {%r3013}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3039, %r3036}, {%r376, %r379}, {%r3020}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3023, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3025, %r3023, %r3027;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3028, %r410, %r3030, %r3025;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3032, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3034, %r3032, %r3036;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3037, %r410, %r3039, %r3034;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3041, %r413, %r3030;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3044, %r410, %r3027, %r3041;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3048, %r413, %r3039;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3051, %r410, %r3036, %r3048;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3074, %r3077}, {%r452, %r455}, {%r3028, %r3044}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3081, %r3085}, {%r452, %r455}, {%r3037, %r3051}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3073, %r3074, %r3074;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3076, %r3077, %r3077, %r3073;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3080, %r3081, %r3081, %r3076;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3084, %r3085, %r3085, %r3080;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3088, %r1609, %r3084, %r3419;
	// end inline asm
	ld.shared.u32 	%r3096, [%rd53];
	ld.shared.u32 	%r3103, [%rd54];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3113, %r3110}, {%r376, %r379}, {%r3096}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3122, %r3119}, {%r376, %r379}, {%r3103}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3106, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3108, %r3106, %r3110;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3111, %r410, %r3113, %r3108;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3115, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3117, %r3115, %r3119;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3120, %r410, %r3122, %r3117;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3124, %r413, %r3113;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3127, %r410, %r3110, %r3124;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3131, %r413, %r3122;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3134, %r410, %r3119, %r3131;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3157, %r3160}, {%r452, %r455}, {%r3111, %r3127}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3164, %r3168}, {%r452, %r455}, {%r3120, %r3134}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3156, %r3157, %r3157;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3159, %r3160, %r3160, %r3156;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3163, %r3164, %r3164, %r3159;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3167, %r3168, %r3168, %r3163;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3422, %r1609, %r3167, %r3088;
	// end inline asm
	add.s32 	%r3420, %r3417, 2;
	setp.ne.s32 	%p308, %r3420, 6;
	@%p308 bra 	$L__BB0_160;
// %bb.159:                             // %pass12162
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r3176, %r3395, 20;
	or.b32  	%r3177, %r159, %r3176;
	cvt.u64.u32 	%rd280, %r3177;
	add.s64 	%rd281, %rd280, %rd9;
	shr.u64 	%rd282, %rd281, 34;
	add.s64 	%rd283, %rd281, %rd282;
	shr.s64 	%rd284, %rd283, 30;
	setp.lt.s64 	%p309, %rd281, 0;
	and.b64  	%rd285, %rd283, -1073741824;
	setp.ne.s64 	%p310, %rd285, %rd281;
	and.pred  	%p311, %p309, %p310;
	selp.u64 	%rd286, 1, 0, %p311;
	sub.s64 	%rd287, %rd286, %rd284;
	shl.b64 	%rd288, %rd287, 30;
	add.s64 	%rd289, %rd288, %rd281;
	shl.b64 	%rd290, %rd289, 2;
	add.s64 	%rd291, %rd4, %rd290;
	st.global.u32 	[%rd291], %r3422;
	add.s32 	%r3395, %r3395, 1;
	mov.u32 	%r3420, 0;
	mov.u32 	%r3422, %r3420;
$L__BB0_160:                            // %pass12413
                                        //   in Loop: Header=BB0_154 Depth=2
	ld.shared.u32 	%r3182, [%rd55];
	ld.shared.u32 	%r3189, [%rd56];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3199, %r3196}, {%r376, %r379}, {%r3182}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3208, %r3205}, {%r376, %r379}, {%r3189}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3192, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3194, %r3192, %r3196;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3197, %r410, %r3199, %r3194;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3201, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3203, %r3201, %r3205;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3206, %r410, %r3208, %r3203;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3210, %r413, %r3199;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3213, %r410, %r3196, %r3210;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3217, %r413, %r3208;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3220, %r410, %r3205, %r3217;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3243, %r3246}, {%r452, %r455}, {%r3197, %r3213}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3250, %r3254}, {%r452, %r455}, {%r3206, %r3220}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3242, %r3243, %r3243;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3245, %r3246, %r3246, %r3242;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3249, %r3250, %r3250, %r3245;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3253, %r3254, %r3254, %r3249;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3257, %r1609, %r3253, %r3422;
	// end inline asm
	ld.shared.u32 	%r3265, [%rd57];
	ld.shared.u32 	%r3272, [%rd58];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3282, %r3279}, {%r376, %r379}, {%r3265}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3291, %r3288}, {%r376, %r379}, {%r3272}, {%r1165, %r1165};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3275, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3277, %r3275, %r3279;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3280, %r410, %r3282, %r3277;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3284, %r413;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3286, %r3284, %r3288;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3289, %r410, %r3291, %r3286;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3293, %r413, %r3282;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3296, %r410, %r3279, %r3293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3300, %r413, %r3291;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3303, %r410, %r3288, %r3300;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3326, %r3329}, {%r452, %r455}, {%r3280, %r3296}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3333, %r3337}, {%r452, %r455}, {%r3289, %r3303}, {%r1165, %r1165}, %r160, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3325, %r3326, %r3326;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3328, %r3329, %r3329, %r3325;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3332, %r3333, %r3333, %r3328;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3336, %r3337, %r3337, %r3332;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3396, %r1609, %r3336, %r3257;
	// end inline asm
	add.s32 	%r3394, %r3420, 2;
	setp.ne.s32 	%p312, %r3394, 6;
	@%p312 bra 	$L__BB0_161;
// %bb.219:                             // %pass13078
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r3345, %r3395, 20;
	or.b32  	%r3346, %r159, %r3345;
	cvt.u64.u32 	%rd292, %r3346;
	add.s64 	%rd293, %rd292, %rd9;
	shr.u64 	%rd294, %rd293, 34;
	add.s64 	%rd295, %rd293, %rd294;
	shr.s64 	%rd296, %rd295, 30;
	setp.lt.s64 	%p313, %rd293, 0;
	and.b64  	%rd297, %rd295, -1073741824;
	setp.ne.s64 	%p314, %rd297, %rd293;
	and.pred  	%p315, %p313, %p314;
	selp.u64 	%rd298, 1, 0, %p315;
	sub.s64 	%rd299, %rd298, %rd296;
	shl.b64 	%rd300, %rd299, 30;
	add.s64 	%rd301, %rd300, %rd293;
	shl.b64 	%rd302, %rd301, 2;
	add.s64 	%rd303, %rd4, %rd302;
	st.global.u32 	[%rd303], %r3396;
	add.s32 	%r3395, %r3395, 1;
	mov.u32 	%r3394, %r1165;
	mov.u32 	%r3396, %r1165;
	bra.uni 	$L__BB0_161;
$L__BB0_163:                            // %L30752
	mov.u32 	%r3347, 0;
	st.global.u32 	[%rd6], %r3347;
	ret;
$L__BB0_210:                            // %post_box_union
	mov.u64 	%rd206, exception2499;
	cvta.global.u64 	%rd207, %rd206;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd207;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r249;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_136:                            // %L6855
	mov.u32 	%r3363, 5;
	st.global.u32 	[%rd6], %r3363;
	mov.u64 	%rd334, exception2451;
	cvta.global.u64 	%rd335, %rd334;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd335;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r249;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_137:                            // %L7011
	mov.u32 	%r3362, 5;
	st.global.u32 	[%rd6], %r3362;
	mov.u64 	%rd332, exception2451;
	cvta.global.u64 	%rd333, %rd332;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd333;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r249;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_138:                            // %L7167
	mov.u32 	%r3361, 5;
	st.global.u32 	[%rd6], %r3361;
	mov.u64 	%rd330, exception2451;
	cvta.global.u64 	%rd331, %rd330;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd331;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r249;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_139:                            // %L7323
	mov.u32 	%r3360, 5;
	st.global.u32 	[%rd6], %r3360;
	mov.u64 	%rd328, exception2451;
	cvta.global.u64 	%rd329, %rd328;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd329;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r249;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_140:                            // %L7479
	mov.u32 	%r3359, 5;
	st.global.u32 	[%rd6], %r3359;
	mov.u64 	%rd326, exception2451;
	cvta.global.u64 	%rd327, %rd326;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd327;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r249;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_141:                            // %L7635
	mov.u32 	%r3358, 5;
	st.global.u32 	[%rd6], %r3358;
	mov.u64 	%rd324, exception2451;
	cvta.global.u64 	%rd325, %rd324;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd325;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r249;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_142:                            // %L7791
	mov.u32 	%r3357, 5;
	st.global.u32 	[%rd6], %r3357;
	mov.u64 	%rd322, exception2451;
	cvta.global.u64 	%rd323, %rd322;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd323;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r249;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_143:                            // %L7947
	mov.u32 	%r3356, 5;
	st.global.u32 	[%rd6], %r3356;
	mov.u64 	%rd320, exception2451;
	cvta.global.u64 	%rd321, %rd320;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd321;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r249;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_144:                            // %L8103
	mov.u32 	%r3355, 5;
	st.global.u32 	[%rd6], %r3355;
	mov.u64 	%rd318, exception2451;
	cvta.global.u64 	%rd319, %rd318;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd319;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r249;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L8259
	mov.u32 	%r3354, 5;
	st.global.u32 	[%rd6], %r3354;
	mov.u64 	%rd316, exception2451;
	cvta.global.u64 	%rd317, %rd316;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd317;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r249;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L8415
	mov.u32 	%r3353, 5;
	st.global.u32 	[%rd6], %r3353;
	mov.u64 	%rd314, exception2451;
	cvta.global.u64 	%rd315, %rd314;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd315;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r249;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L8571
	mov.u32 	%r3352, 5;
	st.global.u32 	[%rd6], %r3352;
	mov.u64 	%rd312, exception2451;
	cvta.global.u64 	%rd313, %rd312;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd313;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r249;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L8727
	mov.u32 	%r3351, 5;
	st.global.u32 	[%rd6], %r3351;
	mov.u64 	%rd310, exception2451;
	cvta.global.u64 	%rd311, %rd310;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd311;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r249;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L8883
	mov.u32 	%r3350, 5;
	st.global.u32 	[%rd6], %r3350;
	mov.u64 	%rd308, exception2451;
	cvta.global.u64 	%rd309, %rd308;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd309;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r249;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L9039
	mov.u32 	%r3349, 5;
	st.global.u32 	[%rd6], %r3349;
	mov.u64 	%rd306, exception2451;
	cvta.global.u64 	%rd307, %rd306;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd307;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r249;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_151:                            // %L9195
	mov.u32 	%r3348, 5;
	st.global.u32 	[%rd6], %r3348;
	mov.u64 	%rd304, exception2451;
	cvta.global.u64 	%rd305, %rd304;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd305;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r249;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L166
	mov.u32 	%r3365, 2;
	st.global.u32 	[%rd6], %r3365;
	mov.u64 	%rd338, exception2451;
	cvta.global.u64 	%rd339, %rd338;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd339;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r249;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_13:                             // %L307
	mov.u32 	%r3364, 3;
	st.global.u32 	[%rd6], %r3364;
	mov.u64 	%rd336, exception2451;
	cvta.global.u64 	%rd337, %rd336;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd337;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r249;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd65, exception1;
	cvta.global.u64 	%rd66, %rd65;
	{ // callseq 45, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd66;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 45
	{ // callseq 46, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r249;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 46
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_135:                            // %L1153
	add.u64 	%rd64, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r1, %r2};
	st.local.v2.u32 	[%rd5+8], {%r4, %r86};
	st.local.u32 	[%rd5+16], %r87;
	mov.u64 	%rd70, __unnamed_1;
	cvta.global.u64 	%rd71, %rd70;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd71;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd64;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r465, [retval0+0];
	} // callseq 47
	mov.u32 	%r467, 4;
	st.global.u32 	[%rd6], %r467;
	mov.u64 	%rd73, exception2451;
	cvta.global.u64 	%rd74, %rd73;
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd74;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 48
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd59;
	st.param.b32 	[param0+8], %r249;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 49
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
