// PTX kernel code for CUDA frb beamformer
// This file has been generated automatically by `frb.jl`.
// Do not modify this file, your changes will be lost.

// PTX CompilerJob of MethodInstance for frb(::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::Int32, ::CuDeviceVector{Int16x2, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int4x8, 1}, ::CuDeviceVector{Float16x2, 1}, ::CuDeviceVector{Int32, 1}) for sm_86, minthreads=512, blocks_per_sm=1

//
// Generated by LLVM NVPTX Back-End
//

.version 8.2
.target sm_86
.address_size 64

	// .globl	_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE // -- Begin function _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.func gpu_report_exception
(
	.param .b64 gpu_report_exception_param_0
)
.noreturn
{
	trap;
}
.func gpu_signal_exception
(
	.param .align 8 .b8 gpu_signal_exception_param_0[16]
)
.noreturn
{
	trap;
}
.extern .shared .align 32 .b8 shmem[];
.global .align 1 .b8 __unnamed_1[40] = {116, 104, 114, 101, 97, 100, 61, 37, 100, 32, 119, 97, 114, 112, 61, 37, 100, 32, 98, 108, 111, 99, 107, 61, 37, 100, 32, 83, 109, 61, 37, 100, 32, 83, 110, 61, 37, 100, 10, 0};
.global .align 1 .b8 exception4180[6] = {101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception4228[11] = {116, 121, 112, 101, 32, 101, 114, 114, 111, 114, 0};
.global .align 1 .b8 exception1[10] = {101, 120, 99, 101, 112, 116, 105, 111, 110, 0};
                                        // @_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE
.visible .entry _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE(
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0[16],
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7,
	.param .u32 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8,
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12[32],
	.param .align 8 .b8 _Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13[32]
)
.reqntid 512, 1, 1
.minnctapersm 1
{
	.local .align 8 .b8 	__local_depot0[24];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<327>;
	.reg .b16 	%rs<97>;
	.reg .b32 	%r<3485>;
	.reg .f32 	%f<752>;
	.reg .b64 	%rd<371>;

// %bb.0:                               // %conversion
	mov.u64 	%SPL, __local_depot0;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r282, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0+8];
	ld.param.u64 	%rd67, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_0];
	// begin inline asm
	mov.u32 %r291, %dynamic_smem_size;
	// end inline asm
	setp.gt.u32 	%p2, %r291, 34943;
	@%p2 bra 	$L__BB0_2;
	bra.uni 	$L__BB0_1;
$L__BB0_2:                              // %L16
	ld.param.u64 	%rd68, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_13];
	ld.param.u32 	%r283, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_1];
	mov.u32 	%r1, %tid.x;
	mov.u32 	%r2, %ctaid.x;
	shl.b32 	%r3, %r2, 9;
	mov.u32 	%r4, %tid.y;
	shl.b32 	%r5, %r4, 5;
	or.b32  	%r292, %r3, %r1;
	or.b32  	%r293, %r292, %r5;
	mul.wide.u32 	%rd75, %r293, 4;
	add.s64 	%rd6, %rd68, %rd75;
	mov.u32 	%r294, 1;
	st.global.u32 	[%rd6], %r294;
	setp.gt.u32 	%p3, %r283, 1023;
	@%p3 bra 	$L__BB0_6;
// %bb.3:                               // %L120
	ld.param.u32 	%r284, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_2];
	setp.lt.s32 	%p4, %r284, %r283;
	setp.gt.s32 	%p5, %r284, 2047;
	or.pred  	%p6, %p4, %p5;
	@%p6 bra 	$L__BB0_6;
// %bb.4:                               // %L127
	ld.param.u32 	%r285, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_3];
	sub.s32 	%r6, %r284, %r283;
	and.b32  	%r295, %r6, 63;
	setp.ne.s32 	%p7, %r295, 0;
	setp.gt.u32 	%p8, %r285, 1023;
	or.pred  	%p9, %p7, %p8;
	@%p9 bra 	$L__BB0_6;
// %bb.5:                               // %L138
	ld.param.u32 	%r286, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_4];
	setp.ge.s32 	%p10, %r286, %r285;
	setp.lt.s32 	%p11, %r286, 2048;
	and.pred  	%p12, %p10, %p11;
	@%p12 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              // %pass51
	sub.s32 	%r296, %r286, %r285;
	mul.hi.s32 	%r297, %r6, 715827883;
	shr.u32 	%r298, %r297, 31;
	add.s32 	%r299, %r297, %r298;
	setp.eq.s32 	%p13, %r296, %r299;
	@%p13 bra 	$L__BB0_8;
	bra.uni 	$L__BB0_6;
$L__BB0_8:                              // %L258
	ld.param.u32 	%r287, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_5];
	setp.lt.s32 	%p14, %r287, 0;
	@%p14 bra 	$L__BB0_13;
// %bb.9:                               // %L260
	ld.param.u32 	%r288, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_6];
	setp.lt.s32 	%p15, %r288, %r287;
	setp.gt.s32 	%p16, %r288, 64;
	or.pred  	%p17, %p15, %p16;
	@%p17 bra 	$L__BB0_13;
// %bb.10:                              // %L270
	ld.param.u32 	%r289, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_7];
	sub.s32 	%r7, %r288, %r287;
	and.b32  	%r300, %r7, 63;
	setp.ne.s32 	%p18, %r300, 0;
	setp.lt.s32 	%p19, %r289, 0;
	or.pred  	%p20, %p18, %p19;
	@%p20 bra 	$L__BB0_13;
// %bb.11:                              // %L276
	ld.param.u32 	%r290, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_8];
	setp.lt.s32 	%p21, %r290, %r289;
	setp.gt.s32 	%p22, %r290, 2048;
	or.pred  	%p23, %p21, %p22;
	@%p23 bra 	$L__BB0_13;
// %bb.12:                              // %L286
	sub.s32 	%r301, %r290, %r289;
	and.b32  	%r302, %r301, 63;
	setp.eq.s32 	%p24, %r302, 0;
	setp.eq.s32 	%p25, %r301, %r7;
	and.pred  	%p26, %p24, %p25;
	@%p26 bra 	$L__BB0_165;
	bra.uni 	$L__BB0_13;
$L__BB0_165:                            // %pass162
	and.b32  	%r146, %r1, 3;
	shr.u32 	%r147, %r1, 2;
	mul.lo.s32 	%r303, %r146, %r147;
	and.b32  	%r304, %r303, 7;
	cvt.rn.f32.s32 	%f185, %r304;
	mov.f32 	%f186, 0f40800000;
	div.approx.f32 	%f151, %f185, %f186;
	abs.f32 	%f750, %f151;
	setp.lt.f32 	%p27, %f750, 0f40000000;
	mov.f32 	%f703, 0f40000000;
	setp.gtu.f32 	%p322, %f750, 0f4B800000;
	mov.f32 	%f746, %f750;
	@%p27 bra 	$L__BB0_177;
// %bb.166:
	@%p322 bra 	$L__BB0_173;
	bra.uni 	$L__BB0_167;
$L__BB0_173:
	mov.b32 	%r149, %f750;
	and.b32  	%r305, %r149, 8388607;
	or.b32  	%r3462, %r305, 1065353216;
	mov.b32 	%f745, %r3462;
	add.s32 	%r306, %r149, -1073741824;
	and.b32  	%r3463, %r306, -8388608;
	setp.eq.s32 	%p34, %r3463, 0;
	@%p34 bra 	$L__BB0_176;
// %bb.174:                             // %__nv_fmaf_rn.exit4.i.i.i.preheader
	mov.f32 	%f196, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f195,%f196;
	// end inline asm
$L__BB0_175:                            // %__nv_fmaf_rn.exit4.i.i.i
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r307, %r3463, 192937984;
	add.s32 	%r308, %r3462, %r307;
	mov.b32 	%f197, %r308;
	mul.f32 	%f198, %f195, %f197;
	sub.f32 	%f199, %f197, %f198;
	fma.rn.f32 	%f200, %f199, %f195, %f198;
	sub.f32 	%f201, %f197, %f200;
	fma.rz.f32 	%f202, %f201, %f195, %f200;
	cvt.rzi.f32.f32 	%f203, %f202;
	sub.f32 	%f745, %f197, %f203;
	sub.s32 	%r3463, %r3463, %r307;
	mov.b32 	%r3462, %f745;
	setp.ne.s32 	%p35, %r3463, 0;
	setp.ne.s32 	%p36, %r3462, 0;
	and.pred  	%p37, %p35, %p36;
	@%p37 bra 	$L__BB0_175;
$L__BB0_176:                            // %__internal_fmodf_slowpath_mod.exit.i.i
	setp.gt.u32 	%p38, %r149, 2139095039;
	selp.f32 	%f204, 0f7FFFFFFF, 0f4B800000, %p38;
	mul.f32 	%f205, %f745, 0f34000000;
	mul.f32 	%f746, %f204, %f205;
	bra.uni 	$L__BB0_177;
$L__BB0_167:                            // %__nv_fast_fdividef.exit.i.i.i
	div.approx.f32 	%f188, %f750, %f703;
	cvt.rzi.f32.f32 	%f744, %f188;
	fma.rn.f32 	%f154, %f744, 0fC0000000, %f750;
	mov.b32 	%r148, %f154;
	setp.lt.u32 	%p29, %r148, 1073741824;
	@%p29 bra 	$L__BB0_172;
// %bb.168:
	setp.lt.u32 	%p30, %r148, -2147483647;
	@%p30 bra 	$L__BB0_170;
// %bb.169:
	add.f32 	%f193, %f744, 0fBF800000;
	setp.lt.f32 	%p33, %f154, 0fC0000000;
	add.f32 	%f194, %f193, 0fBF800000;
	selp.f32 	%f744, %f194, %f193, %p33;
	bra.uni 	$L__BB0_172;
$L__BB0_170:
	add.f32 	%f744, %f744, 0f3F800000;
	setp.ltu.f32 	%p31, %f154, 0f40800000;
	@%p31 bra 	$L__BB0_172;
// %bb.171:                             // %__nv_fmaf_rn.exit.i.i.i
	add.f32 	%f189, %f744, 0f3F800000;
	fma.rn.f32 	%f191, %f703, 0fC0400000, %f154;
	setp.ge.f32 	%p32, %f191, 0f00000000;
	add.f32 	%f192, %f189, 0f3F800000;
	selp.f32 	%f744, %f192, %f189, %p32;
$L__BB0_172:                            // %__internal_fmodf_fastpath_quot.exit.i.i
	fma.rn.f32 	%f746, %f744, 0fC0000000, %f750;
$L__BB0_177:                            // %__internal_fmodf_kernel.exit.i
	abs.f32 	%f206, %f746;
	setp.gtu.f32 	%p39, %f206, 0f7F800000;
	mov.b32 	%r309, %f151;
	and.b32  	%r156, %r309, -2147483648;
	@%p39 bra 	$L__BB0_179;
// %bb.178:
	mov.b32 	%r310, %f746;
	or.b32  	%r311, %r156, %r310;
	mov.b32 	%f746, %r311;
$L__BB0_179:                            // %__nv_fmodf.exit
	shl.b32 	%r159, %r1, 1;
	and.b32  	%r326, %r159, 2;
	mul.lo.s32 	%r160, %r326, %r147;
	cvt.rn.f32.s32 	%f239, %r160;
	mov.f32 	%f240, 0f41800000;
	div.approx.f32 	%f168, %f239, %f240;
	abs.f32 	%f726, %f168;
	setp.lt.f32 	%p47, %f726, 0f40000000;
	setp.gtu.f32 	%p323, %f726, 0f4B800000;
	mov.f32 	%f706, %f726;
	@%p47 bra 	$L__BB0_25;
// %bb.14:
	@%p323 bra 	$L__BB0_21;
	bra.uni 	$L__BB0_15;
$L__BB0_21:
	mov.b32 	%r9, %f726;
	and.b32  	%r327, %r9, 8388607;
	or.b32  	%r3428, %r327, 1065353216;
	mov.b32 	%f705, %r3428;
	add.s32 	%r328, %r9, -1073741824;
	and.b32  	%r3429, %r328, -8388608;
	setp.eq.s32 	%p54, %r3429, 0;
	@%p54 bra 	$L__BB0_24;
// %bb.22:                              // %__nv_fmaf_rn.exit4.i.i.i2360.preheader
	mov.f32 	%f250, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f249,%f250;
	// end inline asm
$L__BB0_23:                             // %__nv_fmaf_rn.exit4.i.i.i2360
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r329, %r3429, 192937984;
	add.s32 	%r330, %r3428, %r329;
	mov.b32 	%f251, %r330;
	mul.f32 	%f252, %f249, %f251;
	sub.f32 	%f253, %f251, %f252;
	fma.rn.f32 	%f254, %f253, %f249, %f252;
	sub.f32 	%f255, %f251, %f254;
	fma.rz.f32 	%f256, %f255, %f249, %f254;
	cvt.rzi.f32.f32 	%f257, %f256;
	sub.f32 	%f705, %f251, %f257;
	sub.s32 	%r3429, %r3429, %r329;
	mov.b32 	%r3428, %f705;
	setp.ne.s32 	%p55, %r3429, 0;
	setp.ne.s32 	%p56, %r3428, 0;
	and.pred  	%p57, %p55, %p56;
	@%p57 bra 	$L__BB0_23;
$L__BB0_24:                             // %__internal_fmodf_slowpath_mod.exit.i.i2362
	setp.gt.u32 	%p58, %r9, 2139095039;
	selp.f32 	%f258, 0f7FFFFFFF, 0f4B800000, %p58;
	mul.f32 	%f259, %f705, 0f34000000;
	mul.f32 	%f706, %f258, %f259;
	bra.uni 	$L__BB0_25;
$L__BB0_15:                             // %__nv_fast_fdividef.exit.i.i.i2339
	div.approx.f32 	%f242, %f726, %f703;
	cvt.rzi.f32.f32 	%f704, %f242;
	fma.rn.f32 	%f2, %f704, 0fC0000000, %f726;
	mov.b32 	%r8, %f2;
	setp.lt.u32 	%p49, %r8, 1073741824;
	@%p49 bra 	$L__BB0_20;
// %bb.16:
	setp.lt.u32 	%p50, %r8, -2147483647;
	@%p50 bra 	$L__BB0_18;
// %bb.17:
	add.f32 	%f247, %f704, 0fBF800000;
	setp.lt.f32 	%p53, %f2, 0fC0000000;
	add.f32 	%f248, %f247, 0fBF800000;
	selp.f32 	%f704, %f248, %f247, %p53;
	bra.uni 	$L__BB0_20;
$L__BB0_18:
	add.f32 	%f704, %f704, 0f3F800000;
	setp.ltu.f32 	%p51, %f2, 0f40800000;
	@%p51 bra 	$L__BB0_20;
// %bb.19:                              // %__nv_fmaf_rn.exit.i.i.i2343
	add.f32 	%f243, %f704, 0f3F800000;
	fma.rn.f32 	%f245, %f703, 0fC0400000, %f2;
	setp.ge.f32 	%p52, %f245, 0f00000000;
	add.f32 	%f246, %f243, 0f3F800000;
	selp.f32 	%f704, %f246, %f243, %p52;
$L__BB0_20:                             // %__internal_fmodf_fastpath_quot.exit.i.i2346
	fma.rn.f32 	%f706, %f704, 0fC0000000, %f726;
$L__BB0_25:                             // %__internal_fmodf_kernel.exit.i2365
	abs.f32 	%f260, %f706;
	setp.gtu.f32 	%p59, %f260, 0f7F800000;
	mov.b32 	%r331, %f168;
	and.b32  	%r16, %r331, -2147483648;
	@%p59 bra 	$L__BB0_27;
// %bb.26:
	mov.b32 	%r332, %f706;
	or.b32  	%r333, %r16, %r332;
	mov.b32 	%f706, %r333;
$L__BB0_27:                             // %__nv_fmodf.exit2366
	add.s32 	%r342, %r160, %r147;
	cvt.rn.f32.s32 	%f291, %r342;
	div.approx.f32 	%f18, %f291, %f240;
	abs.f32 	%f730, %f18;
	setp.lt.f32 	%p67, %f730, 0f40000000;
	setp.gtu.f32 	%p324, %f730, 0f4B800000;
	mov.f32 	%f710, %f730;
	@%p67 bra 	$L__BB0_39;
// %bb.28:
	@%p324 bra 	$L__BB0_35;
	bra.uni 	$L__BB0_29;
$L__BB0_35:
	mov.b32 	%r18, %f730;
	and.b32  	%r343, %r18, 8388607;
	or.b32  	%r3430, %r343, 1065353216;
	mov.b32 	%f709, %r3430;
	add.s32 	%r344, %r18, -1073741824;
	and.b32  	%r3431, %r344, -8388608;
	setp.eq.s32 	%p74, %r3431, 0;
	@%p74 bra 	$L__BB0_38;
// %bb.36:                              // %__nv_fmaf_rn.exit4.i.i.i2391.preheader
	mov.f32 	%f302, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f301,%f302;
	// end inline asm
$L__BB0_37:                             // %__nv_fmaf_rn.exit4.i.i.i2391
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r345, %r3431, 192937984;
	add.s32 	%r346, %r3430, %r345;
	mov.b32 	%f303, %r346;
	mul.f32 	%f304, %f301, %f303;
	sub.f32 	%f305, %f303, %f304;
	fma.rn.f32 	%f306, %f305, %f301, %f304;
	sub.f32 	%f307, %f303, %f306;
	fma.rz.f32 	%f308, %f307, %f301, %f306;
	cvt.rzi.f32.f32 	%f309, %f308;
	sub.f32 	%f709, %f303, %f309;
	sub.s32 	%r3431, %r3431, %r345;
	mov.b32 	%r3430, %f709;
	setp.ne.s32 	%p75, %r3431, 0;
	setp.ne.s32 	%p76, %r3430, 0;
	and.pred  	%p77, %p75, %p76;
	@%p77 bra 	$L__BB0_37;
$L__BB0_38:                             // %__internal_fmodf_slowpath_mod.exit.i.i2393
	setp.gt.u32 	%p78, %r18, 2139095039;
	selp.f32 	%f310, 0f7FFFFFFF, 0f4B800000, %p78;
	mul.f32 	%f311, %f709, 0f34000000;
	mul.f32 	%f710, %f310, %f311;
	bra.uni 	$L__BB0_39;
$L__BB0_29:                             // %__nv_fast_fdividef.exit.i.i.i2370
	div.approx.f32 	%f294, %f730, %f703;
	cvt.rzi.f32.f32 	%f708, %f294;
	fma.rn.f32 	%f21, %f708, 0fC0000000, %f730;
	mov.b32 	%r17, %f21;
	setp.lt.u32 	%p69, %r17, 1073741824;
	@%p69 bra 	$L__BB0_34;
// %bb.30:
	setp.lt.u32 	%p70, %r17, -2147483647;
	@%p70 bra 	$L__BB0_32;
// %bb.31:
	add.f32 	%f299, %f708, 0fBF800000;
	setp.lt.f32 	%p73, %f21, 0fC0000000;
	add.f32 	%f300, %f299, 0fBF800000;
	selp.f32 	%f708, %f300, %f299, %p73;
	bra.uni 	$L__BB0_34;
$L__BB0_32:
	add.f32 	%f708, %f708, 0f3F800000;
	setp.ltu.f32 	%p71, %f21, 0f40800000;
	@%p71 bra 	$L__BB0_34;
// %bb.33:                              // %__nv_fmaf_rn.exit.i.i.i2374
	add.f32 	%f295, %f708, 0f3F800000;
	fma.rn.f32 	%f297, %f703, 0fC0400000, %f21;
	setp.ge.f32 	%p72, %f297, 0f00000000;
	add.f32 	%f298, %f295, 0f3F800000;
	selp.f32 	%f708, %f298, %f295, %p72;
$L__BB0_34:                             // %__internal_fmodf_fastpath_quot.exit.i.i2377
	fma.rn.f32 	%f710, %f708, 0fC0000000, %f730;
$L__BB0_39:                             // %__internal_fmodf_kernel.exit.i2396
	abs.f32 	%f312, %f710;
	setp.gtu.f32 	%p79, %f312, 0f7F800000;
	mov.b32 	%r347, %f18;
	and.b32  	%r25, %r347, -2147483648;
	@%p79 bra 	$L__BB0_41;
// %bb.40:
	mov.b32 	%r348, %f710;
	or.b32  	%r349, %r25, %r348;
	mov.b32 	%f710, %r349;
$L__BB0_41:                             // %__nv_fmodf.exit2397
	mul.lo.s32 	%r28, %r159, %r147;
	and.b32  	%r364, %r28, 2;
	cvt.rn.f32.s32 	%f345, %r364;
	div.approx.f32 	%f35, %f345, %f703;
	abs.f32 	%f734, %f35;
	setp.lt.f32 	%p87, %f734, 0f40000000;
	setp.gtu.f32 	%p325, %f734, 0f4B800000;
	mov.f32 	%f714, %f734;
	@%p87 bra 	$L__BB0_53;
// %bb.42:
	@%p325 bra 	$L__BB0_49;
	bra.uni 	$L__BB0_43;
$L__BB0_49:
	mov.b32 	%r30, %f734;
	and.b32  	%r365, %r30, 8388607;
	or.b32  	%r3432, %r365, 1065353216;
	mov.b32 	%f713, %r3432;
	add.s32 	%r366, %r30, -1073741824;
	and.b32  	%r3433, %r366, -8388608;
	setp.eq.s32 	%p94, %r3433, 0;
	@%p94 bra 	$L__BB0_52;
// %bb.50:                              // %__nv_fmaf_rn.exit4.i.i.i2422.preheader
	mov.f32 	%f356, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f355,%f356;
	// end inline asm
$L__BB0_51:                             // %__nv_fmaf_rn.exit4.i.i.i2422
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r367, %r3433, 192937984;
	add.s32 	%r368, %r3432, %r367;
	mov.b32 	%f357, %r368;
	mul.f32 	%f358, %f355, %f357;
	sub.f32 	%f359, %f357, %f358;
	fma.rn.f32 	%f360, %f359, %f355, %f358;
	sub.f32 	%f361, %f357, %f360;
	fma.rz.f32 	%f362, %f361, %f355, %f360;
	cvt.rzi.f32.f32 	%f363, %f362;
	sub.f32 	%f713, %f357, %f363;
	sub.s32 	%r3433, %r3433, %r367;
	mov.b32 	%r3432, %f713;
	setp.ne.s32 	%p95, %r3433, 0;
	setp.ne.s32 	%p96, %r3432, 0;
	and.pred  	%p97, %p95, %p96;
	@%p97 bra 	$L__BB0_51;
$L__BB0_52:                             // %__internal_fmodf_slowpath_mod.exit.i.i2424
	setp.gt.u32 	%p98, %r30, 2139095039;
	selp.f32 	%f364, 0f7FFFFFFF, 0f4B800000, %p98;
	mul.f32 	%f365, %f713, 0f34000000;
	mul.f32 	%f714, %f364, %f365;
	bra.uni 	$L__BB0_53;
$L__BB0_43:                             // %__nv_fast_fdividef.exit.i.i.i2401
	div.approx.f32 	%f348, %f734, %f703;
	cvt.rzi.f32.f32 	%f712, %f348;
	fma.rn.f32 	%f38, %f712, 0fC0000000, %f734;
	mov.b32 	%r29, %f38;
	setp.lt.u32 	%p89, %r29, 1073741824;
	@%p89 bra 	$L__BB0_48;
// %bb.44:
	setp.lt.u32 	%p90, %r29, -2147483647;
	@%p90 bra 	$L__BB0_46;
// %bb.45:
	add.f32 	%f353, %f712, 0fBF800000;
	setp.lt.f32 	%p93, %f38, 0fC0000000;
	add.f32 	%f354, %f353, 0fBF800000;
	selp.f32 	%f712, %f354, %f353, %p93;
	bra.uni 	$L__BB0_48;
$L__BB0_46:
	add.f32 	%f712, %f712, 0f3F800000;
	setp.ltu.f32 	%p91, %f38, 0f40800000;
	@%p91 bra 	$L__BB0_48;
// %bb.47:                              // %__nv_fmaf_rn.exit.i.i.i2405
	add.f32 	%f349, %f712, 0f3F800000;
	fma.rn.f32 	%f351, %f703, 0fC0400000, %f38;
	setp.ge.f32 	%p92, %f351, 0f00000000;
	add.f32 	%f352, %f349, 0f3F800000;
	selp.f32 	%f712, %f352, %f349, %p92;
$L__BB0_48:                             // %__internal_fmodf_fastpath_quot.exit.i.i2408
	fma.rn.f32 	%f714, %f712, 0fC0000000, %f734;
$L__BB0_53:                             // %__internal_fmodf_kernel.exit.i2427
	mov.f32 	%f230, 0f00000000;
	abs.f32 	%f366, %f714;
	setp.gtu.f32 	%p99, %f366, 0f7F800000;
	mov.b32 	%r369, %f35;
	and.b32  	%r37, %r369, -2147483648;
	@%p99 bra 	$L__BB0_55;
// %bb.54:
	mov.b32 	%r370, %f714;
	or.b32  	%r371, %r37, %r370;
	mov.b32 	%f714, %r371;
$L__BB0_55:                             // %__nv_fmodf.exit2428
	add.f32 	%f367, %f714, %f714;
	mov.b32 	%r372, %f367;
	and.b32  	%r373, %r372, -2147483648;
	or.b32  	%r374, %r373, 1056964608;
	mov.b32 	%f368, %r374;
	add.f32 	%f369, %f367, %f368;
	cvt.rzi.f32.f32 	%f370, %f369;
	abs.f32 	%f371, %f367;
	setp.gt.f32 	%p100, %f371, 0f4B000000;
	selp.f32 	%f372, %f367, %f370, %p100;
	cvt.rzi.f32.f32 	%f373, %f367;
	setp.lt.f32 	%p101, %f371, 0f3F000000;
	selp.f32 	%f374, %f373, %f372, %p101;
	cvt.rzi.s32.f32 	%r375, %f374;
	fma.rn.f32 	%f375, %f374, 0fBF000000, %f714;
	mul.f32 	%f376, %f375, %f375;
	fma.rn.f32 	%f377, %f376, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f378, %f376, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f379, %f377, %f376, 0fC0A55DF6;
	fma.rn.f32 	%f380, %f378, %f376, 0f4081E0CF;
	fma.rn.f32 	%f381, %f376, %f375, 0f00000000;
	fma.rn.f32 	%f382, %f380, %f376, 0fC09DE9E6;
	fma.rn.f32 	%f383, %f379, %f381, 0f00000000;
	fma.rn.f32 	%f384, %f382, %f376, 0f3F800000;
	fma.rn.f32 	%f385, %f375, 0f40490FDB, %f383;
	and.b32  	%r376, %r375, 1;
	setp.eq.b32 	%p102, %r376, 1;
	selp.f32 	%f386, %f384, %f385, %p102;
	selp.f32 	%f387, %f385, %f384, %p102;
	and.b32  	%r377, %r375, 2;
	setp.eq.s32 	%p103, %r377, 0;
	neg.f32 	%f388, %f386;
	selp.f32 	%f389, %f386, %f388, %p103;
	add.s32 	%r378, %r375, 1;
	and.b32  	%r379, %r378, 2;
	setp.eq.s32 	%p104, %r379, 0;
	sub.f32 	%f391, %f230, %f387;
	cvt.rzi.f32.f32 	%f393, %f714;
	setp.eq.f32 	%p105, %f393, %f714;
	mul.f32 	%f394, %f714, 0f00000000;
	selp.f32 	%f76, %f394, %f389, %p105;
	abs.f32 	%f395, %f714;
	add.s32 	%r380, %r28, %r147;
	and.b32  	%r381, %r380, 3;
	cvt.rn.f32.s32 	%f397, %r381;
	div.approx.f32 	%f54, %f397, %f703;
	abs.f32 	%f738, %f54;
	setp.lt.f32 	%p107, %f738, 0f40000000;
	setp.gtu.f32 	%p326, %f738, 0f4B800000;
	mov.f32 	%f718, %f738;
	@%p107 bra 	$L__BB0_67;
// %bb.56:
	@%p326 bra 	$L__BB0_63;
	bra.uni 	$L__BB0_57;
$L__BB0_63:
	mov.b32 	%r39, %f738;
	and.b32  	%r382, %r39, 8388607;
	or.b32  	%r3434, %r382, 1065353216;
	mov.b32 	%f717, %r3434;
	add.s32 	%r383, %r39, -1073741824;
	and.b32  	%r3435, %r383, -8388608;
	setp.eq.s32 	%p114, %r3435, 0;
	@%p114 bra 	$L__BB0_66;
// %bb.64:                              // %__nv_fmaf_rn.exit4.i.i.i2453.preheader
	mov.f32 	%f408, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f407,%f408;
	// end inline asm
$L__BB0_65:                             // %__nv_fmaf_rn.exit4.i.i.i2453
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r384, %r3435, 192937984;
	add.s32 	%r385, %r3434, %r384;
	mov.b32 	%f409, %r385;
	mul.f32 	%f410, %f407, %f409;
	sub.f32 	%f411, %f409, %f410;
	fma.rn.f32 	%f412, %f411, %f407, %f410;
	sub.f32 	%f413, %f409, %f412;
	fma.rz.f32 	%f414, %f413, %f407, %f412;
	cvt.rzi.f32.f32 	%f415, %f414;
	sub.f32 	%f717, %f409, %f415;
	sub.s32 	%r3435, %r3435, %r384;
	mov.b32 	%r3434, %f717;
	setp.ne.s32 	%p115, %r3435, 0;
	setp.ne.s32 	%p116, %r3434, 0;
	and.pred  	%p117, %p115, %p116;
	@%p117 bra 	$L__BB0_65;
$L__BB0_66:                             // %__internal_fmodf_slowpath_mod.exit.i.i2455
	setp.gt.u32 	%p118, %r39, 2139095039;
	selp.f32 	%f416, 0f7FFFFFFF, 0f4B800000, %p118;
	mul.f32 	%f417, %f717, 0f34000000;
	mul.f32 	%f718, %f416, %f417;
	bra.uni 	$L__BB0_67;
$L__BB0_57:                             // %__nv_fast_fdividef.exit.i.i.i2432
	div.approx.f32 	%f400, %f738, %f703;
	cvt.rzi.f32.f32 	%f716, %f400;
	fma.rn.f32 	%f57, %f716, 0fC0000000, %f738;
	mov.b32 	%r38, %f57;
	setp.lt.u32 	%p109, %r38, 1073741824;
	@%p109 bra 	$L__BB0_62;
// %bb.58:
	setp.lt.u32 	%p110, %r38, -2147483647;
	@%p110 bra 	$L__BB0_60;
// %bb.59:
	add.f32 	%f405, %f716, 0fBF800000;
	setp.lt.f32 	%p113, %f57, 0fC0000000;
	add.f32 	%f406, %f405, 0fBF800000;
	selp.f32 	%f716, %f406, %f405, %p113;
	bra.uni 	$L__BB0_62;
$L__BB0_60:
	add.f32 	%f716, %f716, 0f3F800000;
	setp.ltu.f32 	%p111, %f57, 0f40800000;
	@%p111 bra 	$L__BB0_62;
// %bb.61:                              // %__nv_fmaf_rn.exit.i.i.i2436
	add.f32 	%f401, %f716, 0f3F800000;
	fma.rn.f32 	%f403, %f703, 0fC0400000, %f57;
	setp.ge.f32 	%p112, %f403, 0f00000000;
	add.f32 	%f404, %f401, 0f3F800000;
	selp.f32 	%f716, %f404, %f401, %p112;
$L__BB0_62:                             // %__internal_fmodf_fastpath_quot.exit.i.i2439
	fma.rn.f32 	%f718, %f716, 0fC0000000, %f738;
$L__BB0_67:                             // %__internal_fmodf_kernel.exit.i2458
	selp.f32 	%f392, %f387, %f391, %p104;
	setp.gt.f32 	%p106, %f395, 0f4B800000;
	add.f32 	%f396, %f76, 0f3F800000;
	abs.f32 	%f418, %f718;
	setp.gtu.f32 	%p119, %f418, 0f7F800000;
	mov.b32 	%r386, %f54;
	and.b32  	%r46, %r386, -2147483648;
	@%p119 bra 	$L__BB0_69;
// %bb.68:
	mov.b32 	%r387, %f718;
	or.b32  	%r388, %r46, %r387;
	mov.b32 	%f718, %r388;
$L__BB0_69:                             // %__nv_fmodf.exit2459
	selp.f32 	%f53, %f396, %f392, %p106;
	add.f32 	%f419, %f718, %f718;
	mov.b32 	%r389, %f419;
	and.b32  	%r390, %r389, -2147483648;
	or.b32  	%r391, %r390, 1056964608;
	mov.b32 	%f420, %r391;
	add.f32 	%f421, %f419, %f420;
	cvt.rzi.f32.f32 	%f422, %f421;
	abs.f32 	%f423, %f419;
	setp.gt.f32 	%p120, %f423, 0f4B000000;
	selp.f32 	%f424, %f419, %f422, %p120;
	cvt.rzi.f32.f32 	%f425, %f419;
	setp.lt.f32 	%p121, %f423, 0f3F000000;
	selp.f32 	%f426, %f425, %f424, %p121;
	cvt.rzi.s32.f32 	%r392, %f426;
	fma.rn.f32 	%f427, %f426, 0fBF000000, %f718;
	mul.f32 	%f428, %f427, %f427;
	fma.rn.f32 	%f429, %f428, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f430, %f428, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f431, %f429, %f428, 0fC0A55DF6;
	fma.rn.f32 	%f432, %f430, %f428, 0f4081E0CF;
	fma.rn.f32 	%f433, %f428, %f427, 0f00000000;
	fma.rn.f32 	%f434, %f432, %f428, 0fC09DE9E6;
	fma.rn.f32 	%f435, %f431, %f433, 0f00000000;
	fma.rn.f32 	%f436, %f434, %f428, 0f3F800000;
	fma.rn.f32 	%f437, %f427, 0f40490FDB, %f435;
	and.b32  	%r393, %r392, 1;
	setp.eq.b32 	%p122, %r393, 1;
	selp.f32 	%f438, %f436, %f437, %p122;
	selp.f32 	%f439, %f437, %f436, %p122;
	and.b32  	%r394, %r392, 2;
	setp.eq.s32 	%p123, %r394, 0;
	neg.f32 	%f440, %f438;
	selp.f32 	%f441, %f438, %f440, %p123;
	add.s32 	%r395, %r392, 1;
	and.b32  	%r396, %r395, 2;
	setp.eq.s32 	%p124, %r396, 0;
	sub.f32 	%f443, %f230, %f439;
	selp.f32 	%f444, %f439, %f443, %p124;
	cvt.rzi.f32.f32 	%f445, %f718;
	setp.eq.f32 	%p125, %f445, %f718;
	mul.f32 	%f446, %f718, 0f00000000;
	selp.f32 	%f78, %f446, %f441, %p125;
	abs.f32 	%f447, %f718;
	setp.gt.f32 	%p126, %f447, 0f4B800000;
	add.f32 	%f448, %f78, 0f3F800000;
	selp.f32 	%f72, %f448, %f444, %p126;
	and.b32  	%r47, %r1, 2;
	setp.eq.s32 	%p127, %r47, 0;
	mov.f32 	%f75, %f53;
	mov.f32 	%f77, %f72;
	@%p127 bra 	$L__BB0_71;
// %bb.70:                              // %L682
	neg.f32 	%f77, %f78;
	neg.f32 	%f75, %f76;
	mov.f32 	%f76, %f53;
	mov.f32 	%f78, %f72;
$L__BB0_71:                             // %L684
	@%p27 bra 	$L__BB0_187;
// %bb.72:
	@%p322 bra 	$L__BB0_183;
	bra.uni 	$L__BB0_73;
$L__BB0_183:
	mov.b32 	%r162, %f750;
	and.b32  	%r403, %r162, 8388607;
	or.b32  	%r3464, %r403, 1065353216;
	mov.b32 	%f749, %r3464;
	add.s32 	%r404, %r162, -1073741824;
	and.b32  	%r3465, %r404, -8388608;
	setp.eq.s32 	%p135, %r3465, 0;
	@%p135 bra 	$L__BB0_186;
// %bb.184:                             // %__nv_fmaf_rn.exit4.i.i.i2484.preheader
	mov.f32 	%f458, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f457,%f458;
	// end inline asm
$L__BB0_185:                            // %__nv_fmaf_rn.exit4.i.i.i2484
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r405, %r3465, 192937984;
	add.s32 	%r406, %r3464, %r405;
	mov.b32 	%f459, %r406;
	mul.f32 	%f460, %f457, %f459;
	sub.f32 	%f461, %f459, %f460;
	fma.rn.f32 	%f462, %f461, %f457, %f460;
	sub.f32 	%f463, %f459, %f462;
	fma.rz.f32 	%f464, %f463, %f457, %f462;
	cvt.rzi.f32.f32 	%f465, %f464;
	sub.f32 	%f749, %f459, %f465;
	sub.s32 	%r3465, %r3465, %r405;
	mov.b32 	%r3464, %f749;
	setp.ne.s32 	%p136, %r3465, 0;
	setp.ne.s32 	%p137, %r3464, 0;
	and.pred  	%p138, %p136, %p137;
	@%p138 bra 	$L__BB0_185;
$L__BB0_186:                            // %__internal_fmodf_slowpath_mod.exit.i.i2486
	setp.gt.u32 	%p139, %r162, 2139095039;
	selp.f32 	%f466, 0f7FFFFFFF, 0f4B800000, %p139;
	mul.f32 	%f467, %f749, 0f34000000;
	mul.f32 	%f750, %f466, %f467;
	bra.uni 	$L__BB0_187;
$L__BB0_73:                             // %__nv_fast_fdividef.exit.i.i.i2463
	div.approx.f32 	%f450, %f750, %f703;
	cvt.rzi.f32.f32 	%f748, %f450;
	fma.rn.f32 	%f171, %f748, 0fC0000000, %f750;
	mov.b32 	%r161, %f171;
	setp.lt.u32 	%p130, %r161, 1073741824;
	@%p130 bra 	$L__BB0_182;
// %bb.74:
	setp.lt.u32 	%p131, %r161, -2147483647;
	@%p131 bra 	$L__BB0_180;
// %bb.75:
	add.f32 	%f455, %f748, 0fBF800000;
	setp.lt.f32 	%p134, %f171, 0fC0000000;
	add.f32 	%f456, %f455, 0fBF800000;
	selp.f32 	%f748, %f456, %f455, %p134;
	bra.uni 	$L__BB0_182;
$L__BB0_180:
	add.f32 	%f748, %f748, 0f3F800000;
	setp.ltu.f32 	%p132, %f171, 0f40800000;
	@%p132 bra 	$L__BB0_182;
// %bb.181:                             // %__nv_fmaf_rn.exit.i.i.i2467
	add.f32 	%f451, %f748, 0f3F800000;
	fma.rn.f32 	%f453, %f703, 0fC0400000, %f171;
	setp.ge.f32 	%p133, %f453, 0f00000000;
	add.f32 	%f454, %f451, 0f3F800000;
	selp.f32 	%f748, %f454, %f451, %p133;
$L__BB0_182:                            // %__internal_fmodf_fastpath_quot.exit.i.i2470
	fma.rn.f32 	%f750, %f748, 0fC0000000, %f750;
$L__BB0_187:                            // %__internal_fmodf_kernel.exit.i2489
	abs.f32 	%f468, %f750;
	setp.gtu.f32 	%p140, %f468, 0f7F800000;
	@%p140 bra 	$L__BB0_189;
// %bb.188:
	mov.b32 	%r407, %f750;
	or.b32  	%r408, %r156, %r407;
	mov.b32 	%f750, %r408;
$L__BB0_189:                            // %__nv_fmodf.exit2490
	@%p47 bra 	$L__BB0_87;
// %bb.76:
	@%p323 bra 	$L__BB0_83;
	bra.uni 	$L__BB0_77;
$L__BB0_83:
	mov.b32 	%r51, %f726;
	and.b32  	%r423, %r51, 8388607;
	or.b32  	%r3436, %r423, 1065353216;
	mov.b32 	%f725, %r3436;
	add.s32 	%r424, %r51, -1073741824;
	and.b32  	%r3437, %r424, -8388608;
	setp.eq.s32 	%p155, %r3437, 0;
	@%p155 bra 	$L__BB0_86;
// %bb.84:                              // %__nv_fmaf_rn.exit4.i.i.i2515.preheader
	mov.f32 	%f510, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f509,%f510;
	// end inline asm
$L__BB0_85:                             // %__nv_fmaf_rn.exit4.i.i.i2515
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r425, %r3437, 192937984;
	add.s32 	%r426, %r3436, %r425;
	mov.b32 	%f511, %r426;
	mul.f32 	%f512, %f509, %f511;
	sub.f32 	%f513, %f511, %f512;
	fma.rn.f32 	%f514, %f513, %f509, %f512;
	sub.f32 	%f515, %f511, %f514;
	fma.rz.f32 	%f516, %f515, %f509, %f514;
	cvt.rzi.f32.f32 	%f517, %f516;
	sub.f32 	%f725, %f511, %f517;
	sub.s32 	%r3437, %r3437, %r425;
	mov.b32 	%r3436, %f725;
	setp.ne.s32 	%p156, %r3437, 0;
	setp.ne.s32 	%p157, %r3436, 0;
	and.pred  	%p158, %p156, %p157;
	@%p158 bra 	$L__BB0_85;
$L__BB0_86:                             // %__internal_fmodf_slowpath_mod.exit.i.i2517
	setp.gt.u32 	%p159, %r51, 2139095039;
	selp.f32 	%f518, 0f7FFFFFFF, 0f4B800000, %p159;
	mul.f32 	%f519, %f725, 0f34000000;
	mul.f32 	%f726, %f518, %f519;
	bra.uni 	$L__BB0_87;
$L__BB0_77:                             // %__nv_fast_fdividef.exit.i.i.i2494
	div.approx.f32 	%f502, %f726, %f703;
	cvt.rzi.f32.f32 	%f724, %f502;
	fma.rn.f32 	%f80, %f724, 0fC0000000, %f726;
	mov.b32 	%r50, %f80;
	setp.lt.u32 	%p150, %r50, 1073741824;
	@%p150 bra 	$L__BB0_82;
// %bb.78:
	setp.lt.u32 	%p151, %r50, -2147483647;
	@%p151 bra 	$L__BB0_80;
// %bb.79:
	add.f32 	%f507, %f724, 0fBF800000;
	setp.lt.f32 	%p154, %f80, 0fC0000000;
	add.f32 	%f508, %f507, 0fBF800000;
	selp.f32 	%f724, %f508, %f507, %p154;
	bra.uni 	$L__BB0_82;
$L__BB0_80:
	add.f32 	%f724, %f724, 0f3F800000;
	setp.ltu.f32 	%p152, %f80, 0f40800000;
	@%p152 bra 	$L__BB0_82;
// %bb.81:                              // %__nv_fmaf_rn.exit.i.i.i2498
	add.f32 	%f503, %f724, 0f3F800000;
	fma.rn.f32 	%f505, %f703, 0fC0400000, %f80;
	setp.ge.f32 	%p153, %f505, 0f00000000;
	add.f32 	%f506, %f503, 0f3F800000;
	selp.f32 	%f724, %f506, %f503, %p153;
$L__BB0_82:                             // %__internal_fmodf_fastpath_quot.exit.i.i2501
	fma.rn.f32 	%f726, %f724, 0fC0000000, %f726;
$L__BB0_87:                             // %__internal_fmodf_kernel.exit.i2520
	abs.f32 	%f520, %f726;
	setp.gtu.f32 	%p160, %f520, 0f7F800000;
	@%p160 bra 	$L__BB0_89;
// %bb.88:
	mov.b32 	%r427, %f726;
	or.b32  	%r428, %r16, %r427;
	mov.b32 	%f726, %r428;
$L__BB0_89:                             // %__nv_fmodf.exit2521
	@%p67 bra 	$L__BB0_101;
// %bb.90:
	@%p324 bra 	$L__BB0_97;
	bra.uni 	$L__BB0_91;
$L__BB0_97:
	mov.b32 	%r59, %f730;
	and.b32  	%r437, %r59, 8388607;
	or.b32  	%r3438, %r437, 1065353216;
	mov.b32 	%f729, %r3438;
	add.s32 	%r438, %r59, -1073741824;
	and.b32  	%r3439, %r438, -8388608;
	setp.eq.s32 	%p175, %r3439, 0;
	@%p175 bra 	$L__BB0_100;
// %bb.98:                              // %__nv_fmaf_rn.exit4.i.i.i2546.preheader
	mov.f32 	%f560, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f559,%f560;
	// end inline asm
$L__BB0_99:                             // %__nv_fmaf_rn.exit4.i.i.i2546
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r439, %r3439, 192937984;
	add.s32 	%r440, %r3438, %r439;
	mov.b32 	%f561, %r440;
	mul.f32 	%f562, %f559, %f561;
	sub.f32 	%f563, %f561, %f562;
	fma.rn.f32 	%f564, %f563, %f559, %f562;
	sub.f32 	%f565, %f561, %f564;
	fma.rz.f32 	%f566, %f565, %f559, %f564;
	cvt.rzi.f32.f32 	%f567, %f566;
	sub.f32 	%f729, %f561, %f567;
	sub.s32 	%r3439, %r3439, %r439;
	mov.b32 	%r3438, %f729;
	setp.ne.s32 	%p176, %r3439, 0;
	setp.ne.s32 	%p177, %r3438, 0;
	and.pred  	%p178, %p176, %p177;
	@%p178 bra 	$L__BB0_99;
$L__BB0_100:                            // %__internal_fmodf_slowpath_mod.exit.i.i2548
	setp.gt.u32 	%p179, %r59, 2139095039;
	selp.f32 	%f568, 0f7FFFFFFF, 0f4B800000, %p179;
	mul.f32 	%f569, %f729, 0f34000000;
	mul.f32 	%f730, %f568, %f569;
	bra.uni 	$L__BB0_101;
$L__BB0_91:                             // %__nv_fast_fdividef.exit.i.i.i2525
	div.approx.f32 	%f552, %f730, %f703;
	cvt.rzi.f32.f32 	%f728, %f552;
	fma.rn.f32 	%f97, %f728, 0fC0000000, %f730;
	mov.b32 	%r58, %f97;
	setp.lt.u32 	%p170, %r58, 1073741824;
	@%p170 bra 	$L__BB0_96;
// %bb.92:
	setp.lt.u32 	%p171, %r58, -2147483647;
	@%p171 bra 	$L__BB0_94;
// %bb.93:
	add.f32 	%f557, %f728, 0fBF800000;
	setp.lt.f32 	%p174, %f97, 0fC0000000;
	add.f32 	%f558, %f557, 0fBF800000;
	selp.f32 	%f728, %f558, %f557, %p174;
	bra.uni 	$L__BB0_96;
$L__BB0_94:
	add.f32 	%f728, %f728, 0f3F800000;
	setp.ltu.f32 	%p172, %f97, 0f40800000;
	@%p172 bra 	$L__BB0_96;
// %bb.95:                              // %__nv_fmaf_rn.exit.i.i.i2529
	add.f32 	%f553, %f728, 0f3F800000;
	fma.rn.f32 	%f555, %f703, 0fC0400000, %f97;
	setp.ge.f32 	%p173, %f555, 0f00000000;
	add.f32 	%f556, %f553, 0f3F800000;
	selp.f32 	%f728, %f556, %f553, %p173;
$L__BB0_96:                             // %__internal_fmodf_fastpath_quot.exit.i.i2532
	fma.rn.f32 	%f730, %f728, 0fC0000000, %f730;
$L__BB0_101:                            // %__internal_fmodf_kernel.exit.i2551
	abs.f32 	%f570, %f730;
	setp.gtu.f32 	%p180, %f570, 0f7F800000;
	@%p180 bra 	$L__BB0_103;
// %bb.102:
	mov.b32 	%r441, %f730;
	or.b32  	%r442, %r25, %r441;
	mov.b32 	%f730, %r442;
$L__BB0_103:                            // %__nv_fmodf.exit2552
	@%p87 bra 	$L__BB0_115;
// %bb.104:
	@%p325 bra 	$L__BB0_111;
	bra.uni 	$L__BB0_105;
$L__BB0_111:
	mov.b32 	%r69, %f734;
	and.b32  	%r457, %r69, 8388607;
	or.b32  	%r3440, %r457, 1065353216;
	mov.b32 	%f733, %r3440;
	add.s32 	%r458, %r69, -1073741824;
	and.b32  	%r3441, %r458, -8388608;
	setp.eq.s32 	%p195, %r3441, 0;
	@%p195 bra 	$L__BB0_114;
// %bb.112:                             // %__nv_fmaf_rn.exit4.i.i.i2577.preheader
	mov.f32 	%f612, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f611,%f612;
	// end inline asm
$L__BB0_113:                            // %__nv_fmaf_rn.exit4.i.i.i2577
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r459, %r3441, 192937984;
	add.s32 	%r460, %r3440, %r459;
	mov.b32 	%f613, %r460;
	mul.f32 	%f614, %f611, %f613;
	sub.f32 	%f615, %f613, %f614;
	fma.rn.f32 	%f616, %f615, %f611, %f614;
	sub.f32 	%f617, %f613, %f616;
	fma.rz.f32 	%f618, %f617, %f611, %f616;
	cvt.rzi.f32.f32 	%f619, %f618;
	sub.f32 	%f733, %f613, %f619;
	sub.s32 	%r3441, %r3441, %r459;
	mov.b32 	%r3440, %f733;
	setp.ne.s32 	%p196, %r3441, 0;
	setp.ne.s32 	%p197, %r3440, 0;
	and.pred  	%p198, %p196, %p197;
	@%p198 bra 	$L__BB0_113;
$L__BB0_114:                            // %__internal_fmodf_slowpath_mod.exit.i.i2579
	setp.gt.u32 	%p199, %r69, 2139095039;
	selp.f32 	%f620, 0f7FFFFFFF, 0f4B800000, %p199;
	mul.f32 	%f621, %f733, 0f34000000;
	mul.f32 	%f734, %f620, %f621;
	bra.uni 	$L__BB0_115;
$L__BB0_105:                            // %__nv_fast_fdividef.exit.i.i.i2556
	div.approx.f32 	%f604, %f734, %f703;
	cvt.rzi.f32.f32 	%f732, %f604;
	fma.rn.f32 	%f112, %f732, 0fC0000000, %f734;
	mov.b32 	%r68, %f112;
	setp.lt.u32 	%p190, %r68, 1073741824;
	@%p190 bra 	$L__BB0_110;
// %bb.106:
	setp.lt.u32 	%p191, %r68, -2147483647;
	@%p191 bra 	$L__BB0_108;
// %bb.107:
	add.f32 	%f609, %f732, 0fBF800000;
	setp.lt.f32 	%p194, %f112, 0fC0000000;
	add.f32 	%f610, %f609, 0fBF800000;
	selp.f32 	%f732, %f610, %f609, %p194;
	bra.uni 	$L__BB0_110;
$L__BB0_108:
	add.f32 	%f732, %f732, 0f3F800000;
	setp.ltu.f32 	%p192, %f112, 0f40800000;
	@%p192 bra 	$L__BB0_110;
// %bb.109:                             // %__nv_fmaf_rn.exit.i.i.i2560
	add.f32 	%f605, %f732, 0f3F800000;
	fma.rn.f32 	%f607, %f703, 0fC0400000, %f112;
	setp.ge.f32 	%p193, %f607, 0f00000000;
	add.f32 	%f608, %f605, 0f3F800000;
	selp.f32 	%f732, %f608, %f605, %p193;
$L__BB0_110:                            // %__internal_fmodf_fastpath_quot.exit.i.i2563
	fma.rn.f32 	%f734, %f732, 0fC0000000, %f734;
$L__BB0_115:                            // %__internal_fmodf_kernel.exit.i2582
	abs.f32 	%f622, %f734;
	setp.gtu.f32 	%p200, %f622, 0f7F800000;
	@%p200 bra 	$L__BB0_117;
// %bb.116:
	mov.b32 	%r461, %f734;
	or.b32  	%r462, %r37, %r461;
	mov.b32 	%f734, %r462;
$L__BB0_117:                            // %__nv_fmodf.exit2583
	add.f32 	%f623, %f734, %f734;
	mov.b32 	%r463, %f623;
	and.b32  	%r464, %r463, -2147483648;
	or.b32  	%r465, %r464, 1056964608;
	mov.b32 	%f624, %r465;
	add.f32 	%f625, %f623, %f624;
	cvt.rzi.f32.f32 	%f626, %f625;
	abs.f32 	%f627, %f623;
	setp.gt.f32 	%p202, %f627, 0f4B000000;
	selp.f32 	%f628, %f623, %f626, %p202;
	cvt.rzi.f32.f32 	%f629, %f623;
	setp.lt.f32 	%p203, %f627, 0f3F000000;
	selp.f32 	%f630, %f629, %f628, %p203;
	cvt.rzi.s32.f32 	%r466, %f630;
	fma.rn.f32 	%f631, %f630, 0fBF000000, %f734;
	mul.f32 	%f632, %f631, %f631;
	fma.rn.f32 	%f633, %f632, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f634, %f632, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f635, %f633, %f632, 0fC0A55DF6;
	fma.rn.f32 	%f636, %f634, %f632, 0f4081E0CF;
	fma.rn.f32 	%f637, %f632, %f631, 0f00000000;
	fma.rn.f32 	%f638, %f636, %f632, 0fC09DE9E6;
	fma.rn.f32 	%f639, %f635, %f637, 0f00000000;
	fma.rn.f32 	%f640, %f638, %f632, 0f3F800000;
	fma.rn.f32 	%f641, %f631, 0f40490FDB, %f639;
	and.b32  	%r467, %r466, 1;
	setp.eq.b32 	%p204, %r467, 1;
	selp.f32 	%f642, %f640, %f641, %p204;
	selp.f32 	%f643, %f641, %f640, %p204;
	and.b32  	%r468, %r466, 2;
	setp.eq.s32 	%p205, %r468, 0;
	neg.f32 	%f644, %f642;
	selp.f32 	%f645, %f642, %f644, %p205;
	add.s32 	%r469, %r466, 1;
	and.b32  	%r470, %r469, 2;
	setp.eq.s32 	%p206, %r470, 0;
	sub.f32 	%f647, %f230, %f643;
	cvt.rzi.f32.f32 	%f649, %f734;
	setp.eq.f32 	%p207, %f649, %f734;
	mul.f32 	%f650, %f734, 0f00000000;
	selp.f32 	%f148, %f650, %f645, %p207;
	abs.f32 	%f651, %f734;
	@%p107 bra 	$L__BB0_129;
// %bb.118:
	@%p326 bra 	$L__BB0_125;
	bra.uni 	$L__BB0_119;
$L__BB0_125:
	mov.b32 	%r77, %f738;
	and.b32  	%r471, %r77, 8388607;
	or.b32  	%r3442, %r471, 1065353216;
	mov.b32 	%f737, %r3442;
	add.s32 	%r472, %r77, -1073741824;
	and.b32  	%r3443, %r472, -8388608;
	setp.eq.s32 	%p215, %r3443, 0;
	@%p215 bra 	$L__BB0_128;
// %bb.126:                             // %__nv_fmaf_rn.exit4.i.i.i2608.preheader
	mov.f32 	%f662, 0f3F800000;
	// begin inline asm
	rcp.approx.ftz.f32 %f661,%f662;
	// end inline asm
$L__BB0_127:                            // %__nv_fmaf_rn.exit4.i.i.i2608
                                        // =>This Inner Loop Header: Depth=1
	min.u32 	%r473, %r3443, 192937984;
	add.s32 	%r474, %r3442, %r473;
	mov.b32 	%f663, %r474;
	mul.f32 	%f664, %f661, %f663;
	sub.f32 	%f665, %f663, %f664;
	fma.rn.f32 	%f666, %f665, %f661, %f664;
	sub.f32 	%f667, %f663, %f666;
	fma.rz.f32 	%f668, %f667, %f661, %f666;
	cvt.rzi.f32.f32 	%f669, %f668;
	sub.f32 	%f737, %f663, %f669;
	sub.s32 	%r3443, %r3443, %r473;
	mov.b32 	%r3442, %f737;
	setp.ne.s32 	%p216, %r3443, 0;
	setp.ne.s32 	%p217, %r3442, 0;
	and.pred  	%p218, %p216, %p217;
	@%p218 bra 	$L__BB0_127;
$L__BB0_128:                            // %__internal_fmodf_slowpath_mod.exit.i.i2610
	setp.gt.u32 	%p219, %r77, 2139095039;
	selp.f32 	%f670, 0f7FFFFFFF, 0f4B800000, %p219;
	mul.f32 	%f671, %f737, 0f34000000;
	mul.f32 	%f738, %f670, %f671;
	bra.uni 	$L__BB0_129;
$L__BB0_119:                            // %__nv_fast_fdividef.exit.i.i.i2587
	div.approx.f32 	%f654, %f738, %f703;
	cvt.rzi.f32.f32 	%f736, %f654;
	fma.rn.f32 	%f129, %f736, 0fC0000000, %f738;
	mov.b32 	%r76, %f129;
	setp.lt.u32 	%p210, %r76, 1073741824;
	@%p210 bra 	$L__BB0_124;
// %bb.120:
	setp.lt.u32 	%p211, %r76, -2147483647;
	@%p211 bra 	$L__BB0_122;
// %bb.121:
	add.f32 	%f659, %f736, 0fBF800000;
	setp.lt.f32 	%p214, %f129, 0fC0000000;
	add.f32 	%f660, %f659, 0fBF800000;
	selp.f32 	%f736, %f660, %f659, %p214;
	bra.uni 	$L__BB0_124;
$L__BB0_122:
	add.f32 	%f736, %f736, 0f3F800000;
	setp.ltu.f32 	%p212, %f129, 0f40800000;
	@%p212 bra 	$L__BB0_124;
// %bb.123:                             // %__nv_fmaf_rn.exit.i.i.i2591
	add.f32 	%f655, %f736, 0f3F800000;
	fma.rn.f32 	%f657, %f703, 0fC0400000, %f129;
	setp.ge.f32 	%p213, %f657, 0f00000000;
	add.f32 	%f658, %f655, 0f3F800000;
	selp.f32 	%f736, %f658, %f655, %p213;
$L__BB0_124:                            // %__internal_fmodf_fastpath_quot.exit.i.i2594
	fma.rn.f32 	%f738, %f736, 0fC0000000, %f738;
$L__BB0_129:                            // %__internal_fmodf_kernel.exit.i2613
	selp.f32 	%f648, %f643, %f647, %p206;
	setp.gt.f32 	%p208, %f651, 0f4B800000;
	add.f32 	%f652, %f148, 0f3F800000;
	abs.f32 	%f672, %f738;
	setp.gtu.f32 	%p220, %f672, 0f7F800000;
	@%p220 bra 	$L__BB0_131;
// %bb.130:
	mov.b32 	%r475, %f738;
	or.b32  	%r476, %r46, %r475;
	mov.b32 	%f738, %r476;
$L__BB0_131:                            // %__nv_fmodf.exit2614
	selp.f32 	%f127, %f652, %f648, %p208;
	add.f32 	%f673, %f738, %f738;
	mov.b32 	%r477, %f673;
	and.b32  	%r478, %r477, -2147483648;
	or.b32  	%r479, %r478, 1056964608;
	mov.b32 	%f674, %r479;
	add.f32 	%f675, %f673, %f674;
	cvt.rzi.f32.f32 	%f676, %f675;
	abs.f32 	%f677, %f673;
	setp.gt.f32 	%p222, %f677, 0f4B000000;
	selp.f32 	%f678, %f673, %f676, %p222;
	cvt.rzi.f32.f32 	%f679, %f673;
	setp.lt.f32 	%p223, %f677, 0f3F000000;
	selp.f32 	%f680, %f679, %f678, %p223;
	cvt.rzi.s32.f32 	%r480, %f680;
	fma.rn.f32 	%f681, %f680, 0fBF000000, %f738;
	mul.f32 	%f682, %f681, %f681;
	fma.rn.f32 	%f683, %f682, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f684, %f682, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f685, %f683, %f682, 0fC0A55DF6;
	fma.rn.f32 	%f686, %f684, %f682, 0f4081E0CF;
	fma.rn.f32 	%f687, %f682, %f681, 0f00000000;
	fma.rn.f32 	%f688, %f686, %f682, 0fC09DE9E6;
	fma.rn.f32 	%f689, %f685, %f687, 0f00000000;
	fma.rn.f32 	%f690, %f688, %f682, 0f3F800000;
	fma.rn.f32 	%f691, %f681, 0f40490FDB, %f689;
	and.b32  	%r481, %r480, 1;
	setp.eq.b32 	%p224, %r481, 1;
	selp.f32 	%f692, %f690, %f691, %p224;
	selp.f32 	%f693, %f691, %f690, %p224;
	and.b32  	%r482, %r480, 2;
	setp.eq.s32 	%p225, %r482, 0;
	neg.f32 	%f694, %f692;
	selp.f32 	%f695, %f692, %f694, %p225;
	add.s32 	%r483, %r480, 1;
	and.b32  	%r484, %r483, 2;
	setp.eq.s32 	%p226, %r484, 0;
	sub.f32 	%f697, %f230, %f693;
	selp.f32 	%f698, %f693, %f697, %p226;
	cvt.rzi.f32.f32 	%f699, %f738;
	setp.eq.f32 	%p227, %f699, %f738;
	mul.f32 	%f700, %f738, 0f00000000;
	selp.f32 	%f150, %f700, %f695, %p227;
	abs.f32 	%f701, %f738;
	setp.gt.f32 	%p228, %f701, 0f4B800000;
	add.f32 	%f702, %f150, 0f3F800000;
	selp.f32 	%f144, %f702, %f698, %p228;
	mov.f32 	%f147, %f127;
	mov.f32 	%f149, %f144;
	@%p127 bra 	$L__BB0_133;
// %bb.132:                             // %L975
	neg.f32 	%f149, %f150;
	neg.f32 	%f147, %f148;
	mov.f32 	%f148, %f127;
	mov.f32 	%f150, %f144;
$L__BB0_133:                            // %L977
	setp.gt.u32 	%p229, %r1, 15;
	mov.u32 	%r171, 999999999;
	@%p229 bra 	$L__BB0_191;
// %bb.134:                             // %L1007
	ld.param.u64 	%rd1, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_9];
	shl.b32 	%r492, %r1, 4;
	and.b32  	%r493, %r492, 240;
	or.b32  	%r494, %r493, %r4;
	mul.wide.u32 	%rd76, %r494, 4;
	add.s64 	%rd77, %rd1, %rd76;
	ld.global.u32 	%r495, [%rd77];
	shl.b32 	%r496, %r495, 16;
	cvt.s32.s16 	%r86, %r495;
	shr.s32 	%r87, %r495, 16;
	or.b32  	%r497, %r496, 65535;
	setp.lt.u32 	%p230, %r497, 1114111;
	setp.lt.u32 	%p231, %r495, 1048576;
	and.pred  	%p232, %p230, %p231;
	@%p232 bra 	$L__BB0_190;
	bra.uni 	$L__BB0_135;
$L__BB0_190:                            // %L1247
	mul.lo.s32 	%r501, %r87, 546;
	mad.lo.s32 	%r171, %r86, 33, %r501;
$L__BB0_191:                            // %pass527
	add.f32 	%f207, %f746, %f746;
	mov.b32 	%r318, %f207;
	add.f32 	%f469, %f750, %f750;
	and.b32  	%r319, %r318, -2147483648;
	add.f32 	%f261, %f706, %f706;
	add.f32 	%f313, %f710, %f710;
	mov.b32 	%r415, %f469;
	or.b32  	%r320, %r319, 1056964608;
	mov.b32 	%r334, %f261;
	mov.b32 	%r356, %f313;
	and.b32  	%r416, %r415, -2147483648;
	add.f32 	%f521, %f726, %f726;
	add.f32 	%f571, %f730, %f730;
	mov.b32 	%f208, %r320;
	and.b32  	%r335, %r334, -2147483648;
	and.b32  	%r357, %r356, -2147483648;
	or.b32  	%r417, %r416, 1056964608;
	mov.b32 	%r429, %f521;
	mov.b32 	%r449, %f571;
	add.f32 	%f209, %f207, %f208;
	abs.f32 	%f211, %f207;
	or.b32  	%r336, %r335, 1056964608;
	or.b32  	%r358, %r357, 1056964608;
	mov.b32 	%f470, %r417;
	and.b32  	%r430, %r429, -2147483648;
	and.b32  	%r450, %r449, -2147483648;
	cvt.rzi.f32.f32 	%f210, %f209;
	setp.gt.f32 	%p40, %f211, 0f4B000000;
	mov.b32 	%f262, %r336;
	mov.b32 	%f314, %r358;
	add.f32 	%f471, %f469, %f470;
	abs.f32 	%f473, %f469;
	or.b32  	%r431, %r430, 1056964608;
	or.b32  	%r451, %r450, 1056964608;
	selp.f32 	%f212, %f207, %f210, %p40;
	cvt.rzi.f32.f32 	%f213, %f207;
	setp.lt.f32 	%p41, %f211, 0f3F000000;
	add.f32 	%f263, %f261, %f262;
	abs.f32 	%f265, %f261;
	add.f32 	%f315, %f313, %f314;
	abs.f32 	%f317, %f313;
	cvt.rzi.f32.f32 	%f472, %f471;
	setp.gt.f32 	%p142, %f473, 0f4B000000;
	mov.b32 	%f522, %r431;
	mov.b32 	%f572, %r451;
	selp.f32 	%f214, %f213, %f212, %p41;
	cvt.rzi.f32.f32 	%f264, %f263;
	setp.gt.f32 	%p60, %f265, 0f4B000000;
	cvt.rzi.f32.f32 	%f316, %f315;
	setp.gt.f32 	%p80, %f317, 0f4B000000;
	selp.f32 	%f474, %f469, %f472, %p142;
	cvt.rzi.f32.f32 	%f475, %f469;
	setp.lt.f32 	%p143, %f473, 0f3F000000;
	add.f32 	%f523, %f521, %f522;
	abs.f32 	%f525, %f521;
	add.f32 	%f573, %f571, %f572;
	abs.f32 	%f575, %f571;
	fma.rn.f32 	%f215, %f214, 0fBF000000, %f746;
	selp.f32 	%f266, %f261, %f264, %p60;
	cvt.rzi.f32.f32 	%f267, %f261;
	setp.lt.f32 	%p61, %f265, 0f3F000000;
	selp.f32 	%f318, %f313, %f316, %p80;
	cvt.rzi.f32.f32 	%f319, %f313;
	setp.lt.f32 	%p81, %f317, 0f3F000000;
	selp.f32 	%f476, %f475, %f474, %p143;
	cvt.rzi.f32.f32 	%f524, %f523;
	setp.gt.f32 	%p162, %f525, 0f4B000000;
	cvt.rzi.f32.f32 	%f574, %f573;
	setp.gt.f32 	%p182, %f575, 0f4B000000;
	mul.f32 	%f216, %f215, %f215;
	selp.f32 	%f268, %f267, %f266, %p61;
	selp.f32 	%f320, %f319, %f318, %p81;
	fma.rn.f32 	%f477, %f476, 0fBF000000, %f750;
	selp.f32 	%f526, %f521, %f524, %p162;
	cvt.rzi.f32.f32 	%f527, %f521;
	setp.lt.f32 	%p163, %f525, 0f3F000000;
	selp.f32 	%f576, %f571, %f574, %p182;
	cvt.rzi.f32.f32 	%f577, %f571;
	setp.lt.f32 	%p183, %f575, 0f3F000000;
	fma.rn.f32 	%f217, %f216, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f218, %f216, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f269, %f268, 0fBF000000, %f706;
	fma.rn.f32 	%f321, %f320, 0fBF000000, %f710;
	mul.f32 	%f478, %f477, %f477;
	selp.f32 	%f528, %f527, %f526, %p163;
	selp.f32 	%f578, %f577, %f576, %p183;
	cvt.rzi.s32.f32 	%r321, %f214;
	fma.rn.f32 	%f219, %f217, %f216, 0fC0A55DF6;
	fma.rn.f32 	%f220, %f218, %f216, 0f4081E0CF;
	fma.rn.f32 	%f221, %f216, %f215, 0f00000000;
	mul.f32 	%f270, %f269, %f269;
	mul.f32 	%f322, %f321, %f321;
	fma.rn.f32 	%f479, %f478, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f480, %f478, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f529, %f528, 0fBF000000, %f726;
	fma.rn.f32 	%f579, %f578, 0fBF000000, %f730;
	fma.rn.f32 	%f222, %f220, %f216, 0fC09DE9E6;
	fma.rn.f32 	%f223, %f219, %f221, 0f00000000;
	and.b32  	%r322, %r321, 1;
	fma.rn.f32 	%f271, %f270, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f272, %f270, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f323, %f322, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f324, %f322, 0f3E684E12, 0fBFAAD2E0;
	cvt.rzi.s32.f32 	%r418, %f476;
	fma.rn.f32 	%f481, %f479, %f478, 0fC0A55DF6;
	fma.rn.f32 	%f482, %f480, %f478, 0f4081E0CF;
	fma.rn.f32 	%f483, %f478, %f477, 0f00000000;
	mul.f32 	%f530, %f529, %f529;
	mul.f32 	%f580, %f579, %f579;
	fma.rn.f32 	%f224, %f222, %f216, 0f3F800000;
	fma.rn.f32 	%f225, %f215, 0f40490FDB, %f223;
	setp.eq.b32 	%p42, %r322, 1;
	cvt.rzi.s32.f32 	%r337, %f268;
	fma.rn.f32 	%f273, %f271, %f270, 0fC0A55DF6;
	fma.rn.f32 	%f274, %f272, %f270, 0f4081E0CF;
	fma.rn.f32 	%f275, %f270, %f269, 0f00000000;
	cvt.rzi.s32.f32 	%r359, %f320;
	fma.rn.f32 	%f325, %f323, %f322, 0fC0A55DF6;
	fma.rn.f32 	%f326, %f324, %f322, 0f4081E0CF;
	fma.rn.f32 	%f327, %f322, %f321, 0f00000000;
	fma.rn.f32 	%f484, %f482, %f478, 0fC09DE9E6;
	fma.rn.f32 	%f485, %f481, %f483, 0f00000000;
	and.b32  	%r419, %r418, 1;
	fma.rn.f32 	%f531, %f530, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f532, %f530, 0f3E684E12, 0fBFAAD2E0;
	fma.rn.f32 	%f581, %f580, 0fBF17ACC9, 0f40233590;
	fma.rn.f32 	%f582, %f580, 0f3E684E12, 0fBFAAD2E0;
	selp.f32 	%f226, %f224, %f225, %p42;
	and.b32  	%r323, %r321, 2;
	fma.rn.f32 	%f276, %f274, %f270, 0fC09DE9E6;
	fma.rn.f32 	%f277, %f273, %f275, 0f00000000;
	and.b32  	%r338, %r337, 1;
	fma.rn.f32 	%f328, %f326, %f322, 0fC09DE9E6;
	fma.rn.f32 	%f329, %f325, %f327, 0f00000000;
	and.b32  	%r360, %r359, 1;
	fma.rn.f32 	%f486, %f484, %f478, 0f3F800000;
	fma.rn.f32 	%f487, %f477, 0f40490FDB, %f485;
	setp.eq.b32 	%p144, %r419, 1;
	cvt.rzi.s32.f32 	%r432, %f528;
	fma.rn.f32 	%f533, %f531, %f530, 0fC0A55DF6;
	fma.rn.f32 	%f534, %f532, %f530, 0f4081E0CF;
	fma.rn.f32 	%f535, %f530, %f529, 0f00000000;
	cvt.rzi.s32.f32 	%r452, %f578;
	fma.rn.f32 	%f583, %f581, %f580, 0fC0A55DF6;
	fma.rn.f32 	%f584, %f582, %f580, 0f4081E0CF;
	fma.rn.f32 	%f585, %f580, %f579, 0f00000000;
	setp.eq.s32 	%p43, %r323, 0;
	neg.f32 	%f228, %f226;
	add.s32 	%r324, %r321, 1;
	cvt.rzi.f32.f32 	%f233, %f746;
	fma.rn.f32 	%f278, %f276, %f270, 0f3F800000;
	fma.rn.f32 	%f279, %f269, 0f40490FDB, %f277;
	setp.eq.b32 	%p62, %r338, 1;
	fma.rn.f32 	%f330, %f328, %f322, 0f3F800000;
	fma.rn.f32 	%f331, %f321, 0f40490FDB, %f329;
	setp.eq.b32 	%p82, %r360, 1;
	selp.f32 	%f488, %f486, %f487, %p144;
	and.b32  	%r420, %r418, 2;
	fma.rn.f32 	%f536, %f534, %f530, 0fC09DE9E6;
	fma.rn.f32 	%f537, %f533, %f535, 0f00000000;
	and.b32  	%r433, %r432, 1;
	fma.rn.f32 	%f586, %f584, %f580, 0fC09DE9E6;
	fma.rn.f32 	%f587, %f583, %f585, 0f00000000;
	and.b32  	%r453, %r452, 1;
	selp.f32 	%f227, %f225, %f224, %p42;
	selp.f32 	%f229, %f226, %f228, %p43;
	and.b32  	%r325, %r324, 2;
	setp.eq.f32 	%p45, %f233, %f746;
	mul.f32 	%f234, %f746, 0f00000000;
	selp.f32 	%f280, %f278, %f279, %p62;
	and.b32  	%r339, %r337, 2;
	selp.f32 	%f332, %f330, %f331, %p82;
	and.b32  	%r361, %r359, 2;
	setp.eq.s32 	%p145, %r420, 0;
	neg.f32 	%f490, %f488;
	add.s32 	%r421, %r418, 1;
	cvt.rzi.f32.f32 	%f495, %f750;
	fma.rn.f32 	%f538, %f536, %f530, 0f3F800000;
	fma.rn.f32 	%f539, %f529, 0f40490FDB, %f537;
	setp.eq.b32 	%p164, %r433, 1;
	fma.rn.f32 	%f588, %f586, %f580, 0f3F800000;
	fma.rn.f32 	%f589, %f579, 0f40490FDB, %f587;
	setp.eq.b32 	%p184, %r453, 1;
	setp.eq.s32 	%p44, %r325, 0;
	sub.f32 	%f231, %f230, %f227;
	selp.f32 	%f235, %f234, %f229, %p45;
	abs.f32 	%f236, %f746;
	setp.eq.s32 	%p63, %r339, 0;
	neg.f32 	%f282, %f280;
	add.s32 	%r340, %r337, 1;
	cvt.rzi.f32.f32 	%f287, %f706;
	setp.eq.s32 	%p83, %r361, 0;
	neg.f32 	%f334, %f332;
	add.s32 	%r362, %r359, 1;
	cvt.rzi.f32.f32 	%f339, %f710;
	selp.f32 	%f489, %f487, %f486, %p144;
	selp.f32 	%f491, %f488, %f490, %p145;
	and.b32  	%r422, %r421, 2;
	setp.eq.f32 	%p147, %f495, %f750;
	mul.f32 	%f496, %f750, 0f00000000;
	selp.f32 	%f540, %f538, %f539, %p164;
	and.b32  	%r434, %r432, 2;
	selp.f32 	%f590, %f588, %f589, %p184;
	and.b32  	%r454, %r452, 2;
	selp.f32 	%f232, %f227, %f231, %p44;
	setp.gt.f32 	%p46, %f236, 0f4B800000;
	add.f32 	%f237, %f235, 0f3F800000;
	selp.f32 	%f281, %f279, %f278, %p62;
	selp.f32 	%f283, %f280, %f282, %p63;
	and.b32  	%r341, %r340, 2;
	setp.eq.f32 	%p65, %f287, %f706;
	mul.f32 	%f288, %f706, 0f00000000;
	selp.f32 	%f333, %f331, %f330, %p82;
	selp.f32 	%f335, %f332, %f334, %p83;
	and.b32  	%r363, %r362, 2;
	setp.eq.f32 	%p85, %f339, %f710;
	mul.f32 	%f340, %f710, 0f00000000;
	setp.eq.s32 	%p146, %r422, 0;
	sub.f32 	%f493, %f230, %f489;
	selp.f32 	%f497, %f496, %f491, %p147;
	abs.f32 	%f498, %f750;
	setp.eq.s32 	%p165, %r434, 0;
	neg.f32 	%f542, %f540;
	add.s32 	%r435, %r432, 1;
	cvt.rzi.f32.f32 	%f547, %f726;
	setp.eq.s32 	%p185, %r454, 0;
	neg.f32 	%f592, %f590;
	add.s32 	%r455, %r452, 1;
	cvt.rzi.f32.f32 	%f597, %f730;
	selp.f32 	%f238, %f237, %f232, %p46;
	setp.eq.s32 	%p64, %r341, 0;
	sub.f32 	%f285, %f230, %f281;
	selp.f32 	%f16, %f288, %f283, %p65;
	abs.f32 	%f289, %f706;
	setp.eq.s32 	%p84, %r363, 0;
	sub.f32 	%f337, %f230, %f333;
	selp.f32 	%f341, %f340, %f335, %p85;
	abs.f32 	%f342, %f710;
	selp.f32 	%f494, %f489, %f493, %p146;
	setp.gt.f32 	%p148, %f498, 0f4B800000;
	add.f32 	%f499, %f497, 0f3F800000;
	selp.f32 	%f541, %f539, %f538, %p164;
	selp.f32 	%f543, %f540, %f542, %p165;
	and.b32  	%r436, %r435, 2;
	setp.eq.f32 	%p167, %f547, %f726;
	mul.f32 	%f548, %f726, 0f00000000;
	selp.f32 	%f591, %f589, %f588, %p184;
	selp.f32 	%f593, %f590, %f592, %p185;
	and.b32  	%r456, %r455, 2;
	setp.eq.f32 	%p187, %f597, %f730;
	mul.f32 	%f598, %f730, 0f00000000;
	mov.b32 	%r314, %f238;
	mov.b32 	%r317, %f235;
	selp.f32 	%f286, %f281, %f285, %p64;
	setp.gt.f32 	%p66, %f289, 0f4B800000;
	add.f32 	%f290, %f16, 0f3F800000;
	selp.f32 	%f338, %f333, %f337, %p84;
	setp.gt.f32 	%p86, %f342, 0f4B800000;
	add.f32 	%f343, %f341, 0f3F800000;
	selp.f32 	%f500, %f499, %f494, %p148;
	setp.eq.s32 	%p166, %r436, 0;
	sub.f32 	%f545, %f230, %f541;
	selp.f32 	%f94, %f548, %f543, %p167;
	abs.f32 	%f549, %f726;
	setp.eq.s32 	%p186, %r456, 0;
	sub.f32 	%f595, %f230, %f591;
	selp.f32 	%f599, %f598, %f593, %p187;
	abs.f32 	%f600, %f730;
	ld.param.u64 	%rd2, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_10];
	ld.param.u64 	%rd3, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_11];
	ld.param.u64 	%rd4, [_Z3frb5Int32S_S_S_S_S_S_S_13CuDeviceArrayI7Int16x2Li1ELi1EES0_I9Float16x2Li1ELi1EES0_I6Int4x8Li1ELi1EES0_IS2_Li1ELi1EES0_IS_Li1ELi1EE_param_12];
	xor.b32  	%r313, %r317, -2147483648;
	selp.f32 	%f17, %f290, %f286, %p66;
	selp.f32 	%f344, %f343, %f338, %p86;
	mov.b32 	%r411, %f500;
	mov.b32 	%r414, %f497;
	selp.f32 	%f546, %f541, %f545, %p166;
	setp.gt.f32 	%p168, %f549, 0f4B800000;
	add.f32 	%f550, %f94, 0f3F800000;
	selp.f32 	%f596, %f591, %f595, %p186;
	setp.gt.f32 	%p188, %f600, 0f4B800000;
	add.f32 	%f601, %f599, 0f3F800000;
	// begin inline asm
	cvt.rn.f16x2.f32 %r312, %r314, %r313;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r315, %r317, %r314;
	// end inline asm
	mov.b32 	%r352, %f344;
	mov.b32 	%r351, %f17;
	mov.b32 	%r355, %f341;
	mov.b32 	%r354, %f16;
	mov.b32 	%r398, %f75;
	mov.b32 	%r399, %f77;
	mov.b32 	%r401, %f76;
	mov.b32 	%r402, %f78;
	xor.b32  	%r410, %r414, -2147483648;
	selp.f32 	%f95, %f550, %f546, %p168;
	selp.f32 	%f602, %f601, %f596, %p188;
	// begin inline asm
	cvt.rn.f16x2.f32 %r350, %r352, %r351;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r353, %r355, %r354;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r397, %r399, %r398;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r400, %r402, %r401;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r409, %r411, %r410;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r412, %r414, %r411;
	// end inline asm
	mov.b32 	%r445, %f602;
	mov.b32 	%r444, %f95;
	mov.b32 	%r448, %f599;
	mov.b32 	%r447, %f94;
	// begin inline asm
	cvt.rn.f16x2.f32 %r443, %r445, %r444;
	// end inline asm
	// begin inline asm
	cvt.rn.f16x2.f32 %r446, %r448, %r447;
	// end inline asm
	mov.b32 	%r486, %f147;
	mov.b32 	%r487, %f149;
	// begin inline asm
	cvt.rn.f16x2.f32 %r485, %r487, %r486;
	// end inline asm
	mov.b32 	%r489, %f148;
	mov.b32 	%r490, %f150;
	// begin inline asm
	cvt.rn.f16x2.f32 %r488, %r490, %r489;
	// end inline asm
	shl.b32 	%r503, %r1, 6;
	and.b32  	%r504, %r503, 192;
	shr.u32 	%r505, %r1, 3;
	bfe.u32 	%r506, %r1, 3, 1;
	shl.b32 	%r507, %r4, 1;
	and.b32  	%r508, %r507, 14;
	or.b32  	%r509, %r506, %r508;
	and.b32  	%r510, %r505, 2;
	and.b32  	%r511, %r147, 1;
	or.b32  	%r512, %r510, %r511;
	shl.b32 	%r513, %r512, 4;
	or.b32  	%r514, %r504, %r3;
	or.b32  	%r515, %r514, %r509;
	or.b32  	%r516, %r515, %r513;
	mul.wide.u32 	%rd83, %r516, 4;
	add.s64 	%rd84, %rd2, %rd83;
	ld.global.u32 	%r172, [%rd84];
	ld.global.u32 	%r173, [%rd84+1024];
	shl.b32 	%r517, %r283, 13;
	shl.b32 	%r518, %r287, 7;
	add.s32 	%r174, %r518, %r517;
	shl.b32 	%r519, %r1, 2;
	and.b32  	%r175, %r519, 64;
	shl.b32 	%r520, %r2, 7;
	and.b32  	%r521, %r519, 60;
	or.b32  	%r176, %r521, %r520;
	and.b32  	%r177, %r1, 16;
	shr.u32 	%r522, %r1, 4;
	and.b32  	%r523, %r159, 30;
	or.b32  	%r524, %r523, %r522;
	mul.lo.s32 	%r525, %r524, 257;
	shr.u32 	%r526, %r4, 3;
	and.b32  	%r527, %r5, 224;
	mad.lo.s32 	%r528, %r526, 257, %r527;
	or.b32  	%r529, %r526, 2;
	mad.lo.s32 	%r530, %r529, 257, %r527;
	or.b32  	%r531, %r526, 4;
	mad.lo.s32 	%r532, %r531, 257, %r527;
	or.b32  	%r533, %r526, 6;
	mad.lo.s32 	%r534, %r533, 257, %r527;
	or.b32  	%r535, %r526, 8;
	mad.lo.s32 	%r536, %r535, 257, %r527;
	or.b32  	%r537, %r526, 10;
	mad.lo.s32 	%r538, %r537, 257, %r527;
	or.b32  	%r539, %r526, 12;
	mad.lo.s32 	%r540, %r539, 257, %r527;
	or.b32  	%r541, %r526, 14;
	mad.lo.s32 	%r542, %r541, 257, %r527;
	or.b32  	%r543, %r526, 16;
	mad.lo.s32 	%r544, %r543, 257, %r527;
	or.b32  	%r545, %r526, 18;
	mad.lo.s32 	%r546, %r545, 257, %r527;
	or.b32  	%r547, %r526, 20;
	mad.lo.s32 	%r548, %r547, 257, %r527;
	or.b32  	%r549, %r526, 22;
	mad.lo.s32 	%r550, %r549, 257, %r527;
	or.b32  	%r551, %r526, 24;
	mad.lo.s32 	%r552, %r551, 257, %r527;
	or.b32  	%r553, %r526, 26;
	mad.lo.s32 	%r554, %r553, 257, %r527;
	or.b32  	%r555, %r526, 28;
	mad.lo.s32 	%r556, %r555, 257, %r527;
	or.b32  	%r557, %r526, 30;
	mad.lo.s32 	%r558, %r557, 257, %r527;
	mul.lo.s32 	%r559, %r146, 2184;
	mad.lo.s32 	%r560, %r509, 33, %r559;
	mad.lo.s32 	%r561, %r512, 546, %r560;
	setp.lt.u32 	%p234, %r1, 4;
	setp.eq.s32 	%p235, %r147, 4;
	setp.eq.s32 	%p236, %r147, 5;
	selp.b32 	%r562, 0, 1032, %p127;
	or.b32  	%r563, %r508, %r522;
	and.b32  	%r564, %r1, 1;
	neg.s32 	%r565, %r564;
	setp.eq.b32 	%p237, %r564, 1;
	and.b32  	%r566, %r565, 2064;
	bfe.s32 	%r567, %r1, 3, 1;
	and.b32  	%r568, %r1, 8;
	setp.eq.s32 	%p238, %r568, 0;
	and.b32  	%r569, %r567, 258;
	bfe.s32 	%r570, %r1, 2, 1;
	and.b32  	%r571, %r1, 4;
	setp.eq.s32 	%p239, %r571, 0;
	and.b32  	%r572, %r570, 516;
	add.s32 	%r573, %r563, %r562;
	add.s32 	%r574, %r573, %r566;
	add.s32 	%r575, %r574, %r569;
	add.s32 	%r576, %r575, %r572;
	bfe.s32 	%r577, %r4, 1, 1;
	and.b32  	%r578, %r577, 1032;
	and.b32  	%r579, %r567, 4144;
	and.b32  	%r580, %r4, 1;
	neg.s32 	%r581, %r580;
	setp.eq.b32 	%p240, %r580, 1;
	and.b32  	%r582, %r581, 2064;
	and.b32  	%r583, %r519, 12;
	mul.lo.s32 	%r584, %r526, 258;
	bfe.s32 	%r585, %r4, 2, 1;
	and.b32  	%r586, %r4, 4;
	setp.eq.s32 	%p241, %r586, 0;
	and.b32  	%r587, %r585, 516;
	or.b32  	%r588, %r578, %r512;
	add.s32 	%r589, %r584, %r583;
	add.s32 	%r590, %r589, %r579;
	add.s32 	%r591, %r590, %r582;
	add.s32 	%r592, %r591, %r587;
	add.s32 	%r593, %r592, %r588;
	mul.wide.u32 	%rd85, %r593, 4;
	mov.u64 	%rd86, shmem;
	add.s64 	%rd7, %rd86, %rd85;
	cvt.u64.u32 	%rd87, %r588;
	selp.b64 	%rd88, 0, 516, %p241;
	selp.b64 	%rd89, 2064, 0, %p240;
	selp.b64 	%rd90, 0, 4144, %p238;
	cvt.u64.u32 	%rd91, %r584;
	cvt.u64.u32 	%rd92, %r583;
	add.s64 	%rd93, %rd92, %rd91;
	add.s64 	%rd94, %rd93, %rd90;
	add.s64 	%rd95, %rd94, %rd89;
	add.s64 	%rd96, %rd95, %rd88;
	add.s64 	%rd97, %rd96, %rd87;
	shl.b64 	%rd98, %rd97, 2;
	add.s64 	%rd8, %rd86, %rd98;
	add.s32 	%r594, %r589, %r512;
	add.s32 	%r595, %r594, %r578;
	add.s32 	%r596, %r595, %r579;
	add.s32 	%r597, %r596, %r582;
	add.s32 	%r598, %r597, %r587;
	shl.b32 	%r599, %r285, 20;
	shl.b32 	%r600, %r289, 9;
	add.s32 	%r601, %r600, %r599;
	or.b32  	%r602, %r177, %r5;
	and.b32  	%r603, %r1, 15;
	or.b32  	%r604, %r602, %r603;
	or.b32  	%r178, %r604, %r3;
	cvt.s64.s32 	%rd9, %r601;
	add.s32 	%r605, %r4, %r525;
	mul.wide.u32 	%rd99, %r605, 4;
	add.s64 	%rd10, %rd86, %rd99;
	cvt.u64.u32 	%rd100, %r4;
	cvt.u64.u32 	%rd11, %r525;
	add.s64 	%rd101, %rd11, %rd100;
	shl.b64 	%rd102, %rd101, 2;
	add.s64 	%rd12, %rd86, %rd102;
	add.s32 	%r606, %r528, %r1;
	mul.wide.u32 	%rd103, %r606, 4;
	add.s64 	%rd13, %rd86, %rd103;
	add.s32 	%r607, %r530, %r1;
	mul.wide.u32 	%rd104, %r607, 4;
	add.s64 	%rd14, %rd86, %rd104;
	add.s32 	%r608, %r532, %r1;
	mul.wide.u32 	%rd105, %r608, 4;
	add.s64 	%rd15, %rd86, %rd105;
	add.s32 	%r609, %r534, %r1;
	mul.wide.u32 	%rd106, %r609, 4;
	add.s64 	%rd16, %rd86, %rd106;
	add.s32 	%r610, %r536, %r1;
	mul.wide.u32 	%rd107, %r610, 4;
	add.s64 	%rd17, %rd86, %rd107;
	add.s32 	%r611, %r538, %r1;
	mul.wide.u32 	%rd108, %r611, 4;
	add.s64 	%rd18, %rd86, %rd108;
	add.s32 	%r612, %r540, %r1;
	mul.wide.u32 	%rd109, %r612, 4;
	add.s64 	%rd19, %rd86, %rd109;
	add.s32 	%r613, %r542, %r1;
	mul.wide.u32 	%rd110, %r613, 4;
	add.s64 	%rd20, %rd86, %rd110;
	add.s32 	%r614, %r544, %r1;
	mul.wide.u32 	%rd111, %r614, 4;
	add.s64 	%rd21, %rd86, %rd111;
	add.s32 	%r615, %r546, %r1;
	mul.wide.u32 	%rd112, %r615, 4;
	add.s64 	%rd22, %rd86, %rd112;
	add.s32 	%r616, %r548, %r1;
	mul.wide.u32 	%rd113, %r616, 4;
	add.s64 	%rd23, %rd86, %rd113;
	add.s32 	%r617, %r550, %r1;
	mul.wide.u32 	%rd114, %r617, 4;
	add.s64 	%rd24, %rd86, %rd114;
	add.s32 	%r618, %r552, %r1;
	mul.wide.u32 	%rd115, %r618, 4;
	add.s64 	%rd25, %rd86, %rd115;
	add.s32 	%r619, %r554, %r1;
	mul.wide.u32 	%rd116, %r619, 4;
	add.s64 	%rd26, %rd86, %rd116;
	add.s32 	%r620, %r556, %r1;
	mul.wide.u32 	%rd117, %r620, 4;
	add.s64 	%rd27, %rd86, %rd117;
	add.s32 	%r621, %r558, %r1;
	mul.wide.u32 	%rd118, %r621, 4;
	add.s64 	%rd28, %rd86, %rd118;
	add.s32 	%r622, %r561, %r526;
	mul.wide.u32 	%rd119, %r622, 4;
	add.s64 	%rd29, %rd86, %rd119;
	add.s32 	%r623, %r561, %r529;
	mul.wide.u32 	%rd120, %r623, 4;
	add.s64 	%rd30, %rd86, %rd120;
	add.s32 	%r624, %r561, %r531;
	mul.wide.u32 	%rd121, %r624, 4;
	add.s64 	%rd31, %rd86, %rd121;
	add.s32 	%r625, %r561, %r533;
	mul.wide.u32 	%rd122, %r625, 4;
	add.s64 	%rd32, %rd86, %rd122;
	add.s32 	%r626, %r561, %r535;
	mul.wide.u32 	%rd123, %r626, 4;
	add.s64 	%rd33, %rd86, %rd123;
	add.s32 	%r627, %r561, %r537;
	mul.wide.u32 	%rd124, %r627, 4;
	add.s64 	%rd34, %rd86, %rd124;
	add.s32 	%r628, %r561, %r539;
	mul.wide.u32 	%rd125, %r628, 4;
	add.s64 	%rd35, %rd86, %rd125;
	add.s32 	%r629, %r561, %r541;
	mul.wide.u32 	%rd126, %r629, 4;
	add.s64 	%rd36, %rd86, %rd126;
	add.s32 	%r630, %r561, %r543;
	mul.wide.u32 	%rd127, %r630, 4;
	add.s64 	%rd37, %rd86, %rd127;
	add.s32 	%r631, %r561, %r545;
	mul.wide.u32 	%rd128, %r631, 4;
	add.s64 	%rd38, %rd86, %rd128;
	add.s32 	%r632, %r561, %r547;
	mul.wide.u32 	%rd129, %r632, 4;
	add.s64 	%rd39, %rd86, %rd129;
	add.s32 	%r633, %r561, %r549;
	mul.wide.u32 	%rd130, %r633, 4;
	add.s64 	%rd40, %rd86, %rd130;
	add.s32 	%r634, %r561, %r551;
	mul.wide.u32 	%rd131, %r634, 4;
	add.s64 	%rd41, %rd86, %rd131;
	add.s32 	%r635, %r561, %r553;
	mul.wide.u32 	%rd132, %r635, 4;
	add.s64 	%rd42, %rd86, %rd132;
	add.s32 	%r636, %r561, %r555;
	mul.wide.u32 	%rd133, %r636, 4;
	add.s64 	%rd43, %rd86, %rd133;
	add.s32 	%r637, %r561, %r557;
	mul.wide.u32 	%rd134, %r637, 4;
	add.s64 	%rd44, %rd86, %rd134;
	add.s32 	%r638, %r147, -1;
	setp.lt.u32 	%p242, %r638, 3;
	or.pred  	%p243, %p234, %p242;
	or.pred  	%p244, %p243, %p235;
	and.b32  	%r639, %r1, 24;
	setp.eq.s32 	%p245, %r639, 24;
	or.pred  	%p246, %p236, %p245;
	selp.b32 	%r179, 1145324612, -286331154, %p243;
	or.pred  	%p1, %p244, %p246;
	shl.b32 	%r640, %r526, 5;
	add.s32 	%r641, %r576, %r640;
	mul.wide.u32 	%rd135, %r641, 4;
	add.s64 	%rd45, %rd86, %rd135;
	cvt.u64.u32 	%rd136, %r640;
	selp.b64 	%rd137, 0, 516, %p239;
	selp.b64 	%rd138, 0, 258, %p238;
	selp.b64 	%rd139, 2064, 0, %p237;
	cvt.u64.u32 	%rd140, %r563;
	selp.b64 	%rd141, 0, 1032, %p127;
	add.s64 	%rd142, %rd141, %rd140;
	add.s64 	%rd143, %rd142, %rd139;
	add.s64 	%rd144, %rd143, %rd138;
	add.s64 	%rd145, %rd144, %rd137;
	add.s64 	%rd146, %rd145, %rd136;
	shl.b64 	%rd147, %rd146, 2;
	add.s64 	%rd46, %rd86, %rd147;
	or.b32  	%r642, %r640, 64;
	add.s32 	%r643, %r576, %r642;
	mul.wide.u32 	%rd148, %r643, 4;
	add.s64 	%rd47, %rd86, %rd148;
	cvt.u64.u32 	%rd149, %r642;
	add.s64 	%rd150, %rd145, %rd149;
	shl.b64 	%rd151, %rd150, 2;
	add.s64 	%rd48, %rd86, %rd151;
	or.b32  	%r644, %r640, 128;
	add.s32 	%r645, %r576, %r644;
	mul.wide.u32 	%rd152, %r645, 4;
	add.s64 	%rd49, %rd86, %rd152;
	cvt.u64.u32 	%rd153, %r644;
	add.s64 	%rd154, %rd145, %rd153;
	shl.b64 	%rd155, %rd154, 2;
	add.s64 	%rd50, %rd86, %rd155;
	or.b32  	%r646, %r640, 192;
	add.s32 	%r647, %r576, %r646;
	mul.wide.u32 	%rd156, %r647, 4;
	add.s64 	%rd51, %rd86, %rd156;
	cvt.u64.u32 	%rd157, %r646;
	add.s64 	%rd158, %rd145, %rd157;
	shl.b64 	%rd159, %rd158, 2;
	add.s64 	%rd52, %rd86, %rd159;
	add.s32 	%r648, %r598, 32;
	mul.wide.u32 	%rd160, %r648, 4;
	add.s64 	%rd53, %rd86, %rd160;
	add.s32 	%r649, %r598, 48;
	mul.wide.u32 	%rd161, %r649, 4;
	add.s64 	%rd54, %rd86, %rd161;
	add.s32 	%r650, %r598, 64;
	mul.wide.u32 	%rd162, %r650, 4;
	add.s64 	%rd55, %rd86, %rd162;
	add.s32 	%r651, %r598, 80;
	mul.wide.u32 	%rd163, %r651, 4;
	add.s64 	%rd56, %rd86, %rd163;
	add.s32 	%r652, %r598, 96;
	mul.wide.u32 	%rd164, %r652, 4;
	add.s64 	%rd57, %rd86, %rd164;
	add.s32 	%r653, %r598, 112;
	mul.wide.u32 	%rd165, %r653, 4;
	add.s64 	%rd58, %rd86, %rd165;
	add.s32 	%r654, %r598, 128;
	mul.wide.u32 	%rd166, %r654, 4;
	add.s64 	%rd59, %rd86, %rd166;
	add.s32 	%r655, %r598, 144;
	mul.wide.u32 	%rd167, %r655, 4;
	add.s64 	%rd60, %rd86, %rd167;
	add.s32 	%r656, %r598, 160;
	mul.wide.u32 	%rd168, %r656, 4;
	add.s64 	%rd61, %rd86, %rd168;
	add.s32 	%r657, %r598, 176;
	mul.wide.u32 	%rd169, %r657, 4;
	add.s64 	%rd62, %rd86, %rd169;
	add.s32 	%r658, %r598, 192;
	mul.wide.u32 	%rd170, %r658, 4;
	add.s64 	%rd63, %rd86, %rd170;
	add.s32 	%r659, %r598, 208;
	mul.wide.u32 	%rd171, %r659, 4;
	add.s64 	%rd64, %rd86, %rd171;
	add.s32 	%r660, %r598, 224;
	mul.wide.u32 	%rd172, %r660, 4;
	add.s64 	%rd65, %rd86, %rd172;
	add.s32 	%r661, %r598, 240;
	mul.wide.u32 	%rd173, %r661, 4;
	add.s64 	%rd66, %rd86, %rd173;
	mov.u32 	%r89, 0;
	mov.u16 	%rs38, 25600;
	mov.u16 	%rs40, 21504;
	mov.u16 	%rs44, 18432;
	mov.u32 	%r3456, %r89;
	mov.u32 	%r3457, %r89;
	mov.u32 	%r3458, %r89;
	bra.uni 	$L__BB0_192;
$L__BB0_163:                            // %L47585
                                        //   in Loop: Header=BB0_192 Depth=1
	add.s32 	%r145, %r89, 64;
	setp.ne.s32 	%p321, %r89, 960;
	mov.u32 	%r89, %r145;
	@%p321 bra 	$L__BB0_192;
	bra.uni 	$L__BB0_164;
$L__BB0_192:                            // %L1602
                                        // =>This Loop Header: Depth=1
                                        //     Child Loop BB0_210 Depth 2
                                        //     Child Loop BB0_154 Depth 2
	add.s32 	%r662, %r89, %r283;
	setp.lt.s32 	%p247, %r662, %r284;
	@%p247 bra 	$L__BB0_193;
	bra.uni 	$L__BB0_164;
$L__BB0_193:                            // %pass780
                                        //   in Loop: Header=BB0_192 Depth=1
	cvt.u32.u64 	%r855, %rd11;
	setp.eq.s32 	%p248, %r177, 0;
	or.b32  	%r856, %r89, %r4;
	shl.b32 	%r857, %r856, 13;
	and.b32  	%r858, %r857, 7987200;
	or.b32  	%r859, %r858, %r175;
	or.b32  	%r860, %r176, %r859;
	add.s32 	%r861, %r174, %r860;
	shr.s32 	%r862, %r861, 31;
	shr.u32 	%r863, %r862, 9;
	add.s32 	%r864, %r861, %r863;
	shr.s32 	%r865, %r864, 23;
	setp.lt.s32 	%p249, %r861, 0;
	and.b32  	%r866, %r864, -8388608;
	setp.ne.s32 	%p250, %r866, %r861;
	and.pred  	%p251, %p249, %p250;
	selp.u32 	%r867, 1, 0, %p251;
	sub.s32 	%r868, %r867, %r865;
	shl.b32 	%r869, %r868, 23;
	add.s32 	%r870, %r869, %r861;
	mul.wide.s32 	%rd174, %r870, 4;
	add.s64 	%rd175, %rd3, %rd174;
	ld.global.v4.u32 	{%r871, %r872, %r873, %r874}, [%rd175];
	or.b32  	%r875, %r856, 16;
	shl.b32 	%r876, %r875, 13;
	and.b32  	%r877, %r876, 8118272;
	or.b32  	%r878, %r877, %r175;
	or.b32  	%r879, %r176, %r878;
	add.s32 	%r880, %r174, %r879;
	shr.s32 	%r881, %r880, 31;
	shr.u32 	%r882, %r881, 9;
	add.s32 	%r883, %r880, %r882;
	shr.s32 	%r884, %r883, 23;
	setp.lt.s32 	%p252, %r880, 0;
	and.b32  	%r885, %r883, -8388608;
	setp.ne.s32 	%p253, %r885, %r880;
	and.pred  	%p254, %p252, %p253;
	selp.u32 	%r886, 1, 0, %p254;
	sub.s32 	%r887, %r886, %r884;
	shl.b32 	%r888, %r887, 23;
	add.s32 	%r889, %r888, %r880;
	mul.wide.s32 	%rd176, %r889, 4;
	add.s64 	%rd177, %rd3, %rd176;
	ld.global.v4.u32 	{%r890, %r891, %r892, %r893}, [%rd177];
	and.b32  	%r894, %r89, 960;
	or.b32  	%r895, %r4, %r894;
	shl.b32 	%r896, %r895, 13;
	or.b32  	%r897, %r896, %r175;
	or.b32  	%r898, %r897, %r176;
	or.b32  	%r899, %r898, 262144;
	add.s32 	%r900, %r174, %r899;
	shr.s32 	%r901, %r900, 31;
	shr.u32 	%r902, %r901, 9;
	add.s32 	%r903, %r900, %r902;
	shr.s32 	%r904, %r903, 23;
	setp.lt.s32 	%p255, %r900, 0;
	and.b32  	%r905, %r903, -8388608;
	setp.ne.s32 	%p256, %r905, %r900;
	and.pred  	%p257, %p255, %p256;
	selp.u32 	%r906, 1, 0, %p257;
	sub.s32 	%r907, %r906, %r904;
	shl.b32 	%r908, %r907, 23;
	add.s32 	%r909, %r908, %r900;
	mul.wide.s32 	%rd178, %r909, 4;
	add.s64 	%rd179, %rd3, %rd178;
	ld.global.v4.u32 	{%r910, %r911, %r912, %r913}, [%rd179];
	or.b32  	%r914, %r898, 393216;
	add.s32 	%r915, %r174, %r914;
	shr.s32 	%r916, %r915, 31;
	shr.u32 	%r917, %r916, 9;
	add.s32 	%r918, %r915, %r917;
	shr.s32 	%r919, %r918, 23;
	setp.lt.s32 	%p258, %r915, 0;
	and.b32  	%r920, %r918, -8388608;
	setp.ne.s32 	%p259, %r920, %r915;
	and.pred  	%p260, %p258, %p259;
	selp.u32 	%r921, 1, 0, %p260;
	sub.s32 	%r922, %r921, %r919;
	shl.b32 	%r923, %r922, 23;
	add.s32 	%r924, %r923, %r915;
	mul.wide.s32 	%rd180, %r924, 4;
	add.s64 	%rd181, %rd3, %rd180;
	ld.global.v4.u32 	{%r925, %r926, %r927, %r928}, [%rd181];
	selp.b32 	%r929, %r873, %r871, %p248;
	shfl.sync.bfly.b32	%r930, %r929, 16, 31, -1;
	selp.b32 	%r665, %r871, %r930, %p248;
	selp.b32 	%r670, %r930, %r873, %p248;
	selp.b32 	%r931, %r874, %r872, %p248;
	shfl.sync.bfly.b32	%r932, %r931, 16, 31, -1;
	selp.b32 	%r673, %r872, %r932, %p248;
	selp.b32 	%r678, %r932, %r874, %p248;
	selp.b32 	%r933, %r892, %r890, %p248;
	shfl.sync.bfly.b32	%r934, %r933, 16, 31, -1;
	selp.b32 	%r681, %r890, %r934, %p248;
	selp.b32 	%r686, %r934, %r892, %p248;
	selp.b32 	%r935, %r893, %r891, %p248;
	shfl.sync.bfly.b32	%r936, %r935, 16, 31, -1;
	selp.b32 	%r689, %r891, %r936, %p248;
	selp.b32 	%r694, %r936, %r893, %p248;
	selp.b32 	%r937, %r912, %r910, %p248;
	shfl.sync.bfly.b32	%r938, %r937, 16, 31, -1;
	selp.b32 	%r697, %r910, %r938, %p248;
	selp.b32 	%r702, %r938, %r912, %p248;
	selp.b32 	%r939, %r913, %r911, %p248;
	shfl.sync.bfly.b32	%r940, %r939, 16, 31, -1;
	selp.b32 	%r705, %r911, %r940, %p248;
	selp.b32 	%r710, %r940, %r913, %p248;
	selp.b32 	%r941, %r927, %r925, %p248;
	shfl.sync.bfly.b32	%r942, %r941, 16, 31, -1;
	selp.b32 	%r713, %r925, %r942, %p248;
	selp.b32 	%r718, %r942, %r927, %p248;
	selp.b32 	%r943, %r928, %r926, %p248;
	shfl.sync.bfly.b32	%r944, %r943, 16, 31, -1;
	selp.b32 	%r721, %r926, %r944, %p248;
	selp.b32 	%r726, %r944, %r928, %p248;
	shl.b32 	%r666, %r670, 4;
	mov.u32 	%r664, 252645135;
	// begin inline asm
	lop3.b32 %r728, %r664, %r665, %r666, 202;
	// end inline asm
	shr.u32 	%r669, %r665, 4;
	// begin inline asm
	lop3.b32 %r744, %r664, %r669, %r670, 202;
	// end inline asm
	shl.b32 	%r674, %r678, 4;
	// begin inline asm
	lop3.b32 %r736, %r664, %r673, %r674, 202;
	// end inline asm
	shr.u32 	%r677, %r673, 4;
	// begin inline asm
	lop3.b32 %r752, %r664, %r677, %r678, 202;
	// end inline asm
	shl.b32 	%r682, %r686, 4;
	// begin inline asm
	lop3.b32 %r760, %r664, %r681, %r682, 202;
	// end inline asm
	shr.u32 	%r685, %r681, 4;
	// begin inline asm
	lop3.b32 %r776, %r664, %r685, %r686, 202;
	// end inline asm
	shl.b32 	%r690, %r694, 4;
	// begin inline asm
	lop3.b32 %r768, %r664, %r689, %r690, 202;
	// end inline asm
	shr.u32 	%r693, %r689, 4;
	// begin inline asm
	lop3.b32 %r784, %r664, %r693, %r694, 202;
	// end inline asm
	shl.b32 	%r698, %r702, 4;
	// begin inline asm
	lop3.b32 %r729, %r664, %r697, %r698, 202;
	// end inline asm
	shr.u32 	%r701, %r697, 4;
	// begin inline asm
	lop3.b32 %r745, %r664, %r701, %r702, 202;
	// end inline asm
	shl.b32 	%r706, %r710, 4;
	// begin inline asm
	lop3.b32 %r737, %r664, %r705, %r706, 202;
	// end inline asm
	shr.u32 	%r709, %r705, 4;
	// begin inline asm
	lop3.b32 %r753, %r664, %r709, %r710, 202;
	// end inline asm
	shl.b32 	%r714, %r718, 4;
	// begin inline asm
	lop3.b32 %r761, %r664, %r713, %r714, 202;
	// end inline asm
	shr.u32 	%r717, %r713, 4;
	// begin inline asm
	lop3.b32 %r777, %r664, %r717, %r718, 202;
	// end inline asm
	shl.b32 	%r722, %r726, 4;
	// begin inline asm
	lop3.b32 %r769, %r664, %r721, %r722, 202;
	// end inline asm
	shr.u32 	%r725, %r721, 4;
	// begin inline asm
	lop3.b32 %r785, %r664, %r725, %r726, 202;
	// end inline asm
	mov.u32 	%r730, 25152;
	// begin inline asm
	prmt.b32 %r792, %r728, %r729, %r730;
	// end inline asm
	mov.u32 	%r734, 29521;
	// begin inline asm
	prmt.b32 %r824, %r728, %r729, %r734;
	// end inline asm
	// begin inline asm
	prmt.b32 %r800, %r736, %r737, %r730;
	// end inline asm
	// begin inline asm
	prmt.b32 %r832, %r736, %r737, %r734;
	// end inline asm
	// begin inline asm
	prmt.b32 %r793, %r744, %r745, %r730;
	// end inline asm
	// begin inline asm
	prmt.b32 %r825, %r744, %r745, %r734;
	// end inline asm
	// begin inline asm
	prmt.b32 %r801, %r752, %r753, %r730;
	// end inline asm
	// begin inline asm
	prmt.b32 %r833, %r752, %r753, %r734;
	// end inline asm
	// begin inline asm
	prmt.b32 %r808, %r760, %r761, %r730;
	// end inline asm
	// begin inline asm
	prmt.b32 %r840, %r760, %r761, %r734;
	// end inline asm
	// begin inline asm
	prmt.b32 %r816, %r768, %r769, %r730;
	// end inline asm
	// begin inline asm
	prmt.b32 %r848, %r768, %r769, %r734;
	// end inline asm
	// begin inline asm
	prmt.b32 %r809, %r776, %r777, %r730;
	// end inline asm
	// begin inline asm
	prmt.b32 %r841, %r776, %r777, %r734;
	// end inline asm
	// begin inline asm
	prmt.b32 %r817, %r784, %r785, %r730;
	// end inline asm
	// begin inline asm
	prmt.b32 %r849, %r784, %r785, %r734;
	// end inline asm
	mov.u32 	%r850, 21520;
	// begin inline asm
	prmt.b32 %r791, %r792, %r793, %r850;
	// end inline asm
	mov.u32 	%r854, 30258;
	// begin inline asm
	prmt.b32 %r795, %r792, %r793, %r854;
	// end inline asm
	// begin inline asm
	prmt.b32 %r799, %r800, %r801, %r850;
	// end inline asm
	// begin inline asm
	prmt.b32 %r803, %r800, %r801, %r854;
	// end inline asm
	// begin inline asm
	prmt.b32 %r807, %r808, %r809, %r850;
	// end inline asm
	// begin inline asm
	prmt.b32 %r811, %r808, %r809, %r854;
	// end inline asm
	// begin inline asm
	prmt.b32 %r815, %r816, %r817, %r850;
	// end inline asm
	// begin inline asm
	prmt.b32 %r819, %r816, %r817, %r854;
	// end inline asm
	// begin inline asm
	prmt.b32 %r823, %r824, %r825, %r850;
	// end inline asm
	// begin inline asm
	prmt.b32 %r827, %r824, %r825, %r854;
	// end inline asm
	// begin inline asm
	prmt.b32 %r831, %r832, %r833, %r850;
	// end inline asm
	// begin inline asm
	prmt.b32 %r835, %r832, %r833, %r854;
	// end inline asm
	// begin inline asm
	prmt.b32 %r839, %r840, %r841, %r850;
	// end inline asm
	// begin inline asm
	prmt.b32 %r843, %r840, %r841, %r854;
	// end inline asm
	// begin inline asm
	prmt.b32 %r847, %r848, %r849, %r850;
	// end inline asm
	// begin inline asm
	prmt.b32 %r851, %r848, %r849, %r854;
	// end inline asm
	st.shared.u32 	[%rd10], %r791;
	st.shared.u32 	[%rd12+512], %r799;
	st.shared.u32 	[%rd12+256], %r795;
	st.shared.u32 	[%rd12+768], %r803;
	and.b32  	%r945, %r875, 31;
	add.s32 	%r946, %r945, %r855;
	mul.wide.u32 	%rd182, %r946, 4;
	add.s64 	%rd184, %rd86, %rd182;
	st.shared.u32 	[%rd184], %r807;
	cvt.u64.u32 	%rd185, %r945;
	add.s64 	%rd186, %rd11, %rd185;
	shl.b64 	%rd187, %rd186, 2;
	add.s64 	%rd188, %rd86, %rd187;
	st.shared.u32 	[%rd188+512], %r815;
	st.shared.u32 	[%rd188+256], %r811;
	st.shared.u32 	[%rd188+768], %r819;
	st.shared.u32 	[%rd12+128], %r823;
	st.shared.u32 	[%rd12+640], %r831;
	st.shared.u32 	[%rd12+384], %r827;
	st.shared.u32 	[%rd12+896], %r835;
	st.shared.u32 	[%rd188+128], %r839;
	st.shared.u32 	[%rd188+640], %r847;
	st.shared.u32 	[%rd188+384], %r843;
	st.shared.u32 	[%rd188+896], %r851;
	bar.sync 	0;
	ld.shared.u32 	%r180, [%rd13];
	ld.shared.u32 	%r181, [%rd14];
	ld.shared.u32 	%r182, [%rd15];
	ld.shared.u32 	%r183, [%rd16];
	ld.shared.u32 	%r184, [%rd17];
	ld.shared.u32 	%r185, [%rd18];
	ld.shared.u32 	%r186, [%rd19];
	ld.shared.u32 	%r187, [%rd20];
	ld.shared.u32 	%r188, [%rd21];
	ld.shared.u32 	%r189, [%rd22];
	ld.shared.u32 	%r190, [%rd23];
	ld.shared.u32 	%r191, [%rd24];
	ld.shared.u32 	%r192, [%rd25];
	ld.shared.u32 	%r193, [%rd26];
	ld.shared.u32 	%r194, [%rd27];
	ld.shared.u32 	%r195, [%rd28];
	bar.sync 	0;
	shfl.sync.idx.b32	%r196, %r171, 0, 31, -1;
	shfl.sync.idx.b32	%r197, %r171, 1, 31, -1;
	shfl.sync.idx.b32	%r198, %r171, 2, 31, -1;
	shfl.sync.idx.b32	%r199, %r171, 3, 31, -1;
	shfl.sync.idx.b32	%r200, %r171, 4, 31, -1;
	shfl.sync.idx.b32	%r201, %r171, 5, 31, -1;
	shfl.sync.idx.b32	%r202, %r171, 6, 31, -1;
	shfl.sync.idx.b32	%r203, %r171, 7, 31, -1;
	shfl.sync.idx.b32	%r204, %r171, 8, 31, -1;
	shfl.sync.idx.b32	%r205, %r171, 9, 31, -1;
	shfl.sync.idx.b32	%r206, %r171, 10, 31, -1;
	shfl.sync.idx.b32	%r207, %r171, 11, 31, -1;
	shfl.sync.idx.b32	%r208, %r171, 12, 31, -1;
	shfl.sync.idx.b32	%r209, %r171, 13, 31, -1;
	shfl.sync.idx.b32	%r210, %r171, 14, 31, -1;
	shfl.sync.idx.b32	%r211, %r171, 15, 31, -1;
	setp.eq.s32 	%p261, %r196, 999999999;
	@%p261 bra 	$L__BB0_136;
// %bb.194:                             // %pass3083
                                        //   in Loop: Header=BB0_192 Depth=1
	add.s32 	%r947, %r196, %r1;
	mul.wide.s32 	%rd189, %r947, 4;
	add.s64 	%rd191, %rd86, %rd189;
	st.shared.u32 	[%rd191], %r180;
	setp.eq.s32 	%p262, %r197, 999999999;
	@%p262 bra 	$L__BB0_137;
// %bb.195:                             // %pass3151
                                        //   in Loop: Header=BB0_192 Depth=1
	add.s32 	%r948, %r197, %r1;
	mul.wide.s32 	%rd192, %r948, 4;
	add.s64 	%rd194, %rd86, %rd192;
	st.shared.u32 	[%rd194], %r181;
	setp.eq.s32 	%p263, %r198, 999999999;
	@%p263 bra 	$L__BB0_138;
// %bb.196:                             // %pass3219
                                        //   in Loop: Header=BB0_192 Depth=1
	add.s32 	%r949, %r198, %r1;
	mul.wide.s32 	%rd195, %r949, 4;
	add.s64 	%rd197, %rd86, %rd195;
	st.shared.u32 	[%rd197], %r182;
	setp.eq.s32 	%p264, %r199, 999999999;
	@%p264 bra 	$L__BB0_139;
// %bb.197:                             // %pass3287
                                        //   in Loop: Header=BB0_192 Depth=1
	add.s32 	%r950, %r199, %r1;
	mul.wide.s32 	%rd198, %r950, 4;
	add.s64 	%rd200, %rd86, %rd198;
	st.shared.u32 	[%rd200], %r183;
	setp.eq.s32 	%p265, %r200, 999999999;
	@%p265 bra 	$L__BB0_140;
// %bb.198:                             // %pass3355
                                        //   in Loop: Header=BB0_192 Depth=1
	add.s32 	%r951, %r200, %r1;
	mul.wide.s32 	%rd201, %r951, 4;
	add.s64 	%rd203, %rd86, %rd201;
	st.shared.u32 	[%rd203], %r184;
	setp.eq.s32 	%p266, %r201, 999999999;
	@%p266 bra 	$L__BB0_141;
// %bb.199:                             // %pass3423
                                        //   in Loop: Header=BB0_192 Depth=1
	add.s32 	%r952, %r201, %r1;
	mul.wide.s32 	%rd204, %r952, 4;
	add.s64 	%rd206, %rd86, %rd204;
	st.shared.u32 	[%rd206], %r185;
	setp.eq.s32 	%p267, %r202, 999999999;
	@%p267 bra 	$L__BB0_142;
// %bb.200:                             // %pass3491
                                        //   in Loop: Header=BB0_192 Depth=1
	add.s32 	%r953, %r202, %r1;
	mul.wide.s32 	%rd207, %r953, 4;
	add.s64 	%rd209, %rd86, %rd207;
	st.shared.u32 	[%rd209], %r186;
	setp.eq.s32 	%p268, %r203, 999999999;
	@%p268 bra 	$L__BB0_143;
// %bb.201:                             // %pass3559
                                        //   in Loop: Header=BB0_192 Depth=1
	add.s32 	%r954, %r203, %r1;
	mul.wide.s32 	%rd210, %r954, 4;
	add.s64 	%rd212, %rd86, %rd210;
	st.shared.u32 	[%rd212], %r187;
	setp.eq.s32 	%p269, %r204, 999999999;
	@%p269 bra 	$L__BB0_144;
// %bb.202:                             // %pass3627
                                        //   in Loop: Header=BB0_192 Depth=1
	add.s32 	%r955, %r204, %r1;
	mul.wide.s32 	%rd213, %r955, 4;
	add.s64 	%rd215, %rd86, %rd213;
	st.shared.u32 	[%rd215], %r188;
	setp.eq.s32 	%p270, %r205, 999999999;
	@%p270 bra 	$L__BB0_145;
// %bb.203:                             // %pass3695
                                        //   in Loop: Header=BB0_192 Depth=1
	add.s32 	%r956, %r205, %r1;
	mul.wide.s32 	%rd216, %r956, 4;
	add.s64 	%rd218, %rd86, %rd216;
	st.shared.u32 	[%rd218], %r189;
	setp.eq.s32 	%p271, %r206, 999999999;
	@%p271 bra 	$L__BB0_146;
// %bb.204:                             // %pass3763
                                        //   in Loop: Header=BB0_192 Depth=1
	add.s32 	%r957, %r206, %r1;
	mul.wide.s32 	%rd219, %r957, 4;
	add.s64 	%rd221, %rd86, %rd219;
	st.shared.u32 	[%rd221], %r190;
	setp.eq.s32 	%p272, %r207, 999999999;
	@%p272 bra 	$L__BB0_147;
// %bb.205:                             // %pass3831
                                        //   in Loop: Header=BB0_192 Depth=1
	add.s32 	%r958, %r207, %r1;
	mul.wide.s32 	%rd222, %r958, 4;
	add.s64 	%rd224, %rd86, %rd222;
	st.shared.u32 	[%rd224], %r191;
	setp.eq.s32 	%p273, %r208, 999999999;
	@%p273 bra 	$L__BB0_148;
// %bb.206:                             // %pass3899
                                        //   in Loop: Header=BB0_192 Depth=1
	add.s32 	%r959, %r208, %r1;
	mul.wide.s32 	%rd225, %r959, 4;
	add.s64 	%rd227, %rd86, %rd225;
	st.shared.u32 	[%rd227], %r192;
	setp.eq.s32 	%p274, %r209, 999999999;
	@%p274 bra 	$L__BB0_149;
// %bb.207:                             // %pass3967
                                        //   in Loop: Header=BB0_192 Depth=1
	add.s32 	%r960, %r209, %r1;
	mul.wide.s32 	%rd228, %r960, 4;
	add.s64 	%rd230, %rd86, %rd228;
	st.shared.u32 	[%rd230], %r193;
	setp.eq.s32 	%p275, %r210, 999999999;
	@%p275 bra 	$L__BB0_150;
// %bb.208:                             // %pass4035
                                        //   in Loop: Header=BB0_192 Depth=1
	add.s32 	%r961, %r210, %r1;
	mul.wide.s32 	%rd231, %r961, 4;
	add.s64 	%rd233, %rd86, %rd231;
	st.shared.u32 	[%rd233], %r194;
	setp.eq.s32 	%p276, %r211, 999999999;
	@%p276 bra 	$L__BB0_151;
// %bb.209:                             // %pass4103
                                        //   in Loop: Header=BB0_192 Depth=1
	add.s32 	%r963, %r211, %r1;
	mul.wide.s32 	%rd234, %r963, 4;
	add.s64 	%rd236, %rd86, %rd234;
	st.shared.u32 	[%rd236], %r195;
	bar.sync 	0;
	ld.shared.u32 	%r212, [%rd29];
	ld.shared.u32 	%r213, [%rd30];
	ld.shared.u32 	%r214, [%rd31];
	ld.shared.u32 	%r215, [%rd32];
	ld.shared.u32 	%r216, [%rd33];
	ld.shared.u32 	%r217, [%rd34];
	ld.shared.u32 	%r218, [%rd35];
	ld.shared.u32 	%r219, [%rd36];
	ld.shared.u32 	%r220, [%rd37];
	ld.shared.u32 	%r221, [%rd38];
	ld.shared.u32 	%r222, [%rd39];
	ld.shared.u32 	%r223, [%rd40];
	ld.shared.u32 	%r224, [%rd41];
	ld.shared.u32 	%r225, [%rd42];
	ld.shared.u32 	%r226, [%rd43];
	ld.shared.u32 	%r227, [%rd44];
	bar.sync 	0;
	mov.u32 	%r3448, 16;
	bra.uni 	$L__BB0_210;
$L__BB0_152:                            // %L29905
                                        //   in Loop: Header=BB0_210 Depth=2
	bar.sync 	0;
	add.s32 	%r3448, %r3448, -8;
	setp.ne.s32 	%p298, %r3448, -16;
	@%p298 bra 	$L__BB0_210;
	bra.uni 	$L__BB0_153;
$L__BB0_210:                            // %L12262
                                        //   Parent Loop BB0_192 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.eq.s32 	%p277, %r3448, 16;
	selp.b32 	%r1356, %r212, 0, %p277;
	setp.eq.s32 	%p278, %r3448, 8;
	selp.b32 	%r1357, %r216, %r1356, %p278;
	setp.eq.s32 	%p279, %r3448, 0;
	selp.b32 	%r1358, %r220, %r1357, %p279;
	setp.eq.s32 	%p280, %r3448, -8;
	selp.b32 	%r1359, %r224, %r1358, %p280;
	selp.b32 	%r1360, %r213, 0, %p277;
	selp.b32 	%r1361, %r217, %r1360, %p278;
	selp.b32 	%r1362, %r221, %r1361, %p279;
	selp.b32 	%r1363, %r225, %r1362, %p280;
	selp.b32 	%r1364, %r214, 0, %p277;
	selp.b32 	%r1365, %r218, %r1364, %p278;
	selp.b32 	%r1366, %r222, %r1365, %p279;
	selp.b32 	%r1367, %r226, %r1366, %p280;
	selp.b32 	%r1368, %r215, 0, %p277;
	selp.b32 	%r1369, %r219, %r1368, %p278;
	selp.b32 	%r1370, %r223, %r1369, %p279;
	selp.b32 	%r1371, %r227, %r1370, %p280;
	// begin inline asm
	mov.b32 %r969, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r980, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r968, %r1359, -2004318072;
	mov.u32 	%r1105, 983055;
	// begin inline asm
	lop3.b32 %r966, %r1105, %r968, %r969, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r970, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r971, %r969, %r970;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r974, %r966, %r971;
	// end inline asm
	mov.u32 	%r1116, 15728880;
	// begin inline asm
	lop3.b32 %r977, %r1116, %r968, %r980, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r981, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r982, %r980, %r981;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r985, %r977, %r982;
	// end inline asm
	// begin inline asm
	mov.b32 %r1015, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1026, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1014, %r1363, -2004318072;
	// begin inline asm
	lop3.b32 %r1012, %r1105, %r1014, %r1015, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1016, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1017, %r1015, %r1016;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1020, %r1012, %r1017;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1023, %r1116, %r1014, %r1026, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1027, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1028, %r1026, %r1027;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1031, %r1023, %r1028;
	// end inline asm
	// begin inline asm
	mov.b32 %r1061, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1072, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1060, %r1367, -2004318072;
	// begin inline asm
	lop3.b32 %r1058, %r1105, %r1060, %r1061, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1062, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1063, %r1061, %r1062;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1066, %r1058, %r1063;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1069, %r1116, %r1060, %r1072, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1073, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1074, %r1072, %r1073;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1077, %r1069, %r1074;
	// end inline asm
	// begin inline asm
	mov.b32 %r1107, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r1118, {%rs40, %rs40};
	// end inline asm
	xor.b32  	%r1106, %r1371, -2004318072;
	// begin inline asm
	lop3.b32 %r1104, %r1105, %r1106, %r1107, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1108, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1109, %r1107, %r1108;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1112, %r1104, %r1109;
	// end inline asm
	// begin inline asm
	lop3.b32 %r1115, %r1116, %r1106, %r1118, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r1119, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r1120, %r1118, %r1119;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r1123, %r1115, %r1120;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r974;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1148, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r985;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1151, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r1020;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1154, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r1031;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1157, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r1066;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1160, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r1077;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1163, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r1112;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1166, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r1123;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r1169, {%r0re, %r0im};
}

	// end inline asm
	mov.u32 	%r1227, 0;
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1172, %r1173}, {%r312, %r315}, {%r1148}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1179, %r1180}, {%r312, %r315}, {%r1151}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1186, %r1187}, {%r312, %r315}, {%r1154}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1193, %r1194}, {%r312, %r315}, {%r1157}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1200, %r1201}, {%r312, %r315}, {%r1160}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1207, %r1208}, {%r312, %r315}, {%r1163}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1214, %r1215}, {%r312, %r315}, {%r1166}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1221, %r1222}, {%r312, %r315}, {%r1169}, {%r1227, %r1227};
	// end inline asm
	@%p1 bra 	$L__BB0_212;
	bra.uni 	$L__BB0_211;
$L__BB0_212:                            // %pass5517
                                        //   in Loop: Header=BB0_210 Depth=2
	// begin inline asm
	neg.f16x2 %r1228, %r353;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1230, %r1228, %r1173;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1233, %r350, %r1172, %r1230;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1237, %r353;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1239, %r1237, %r1180;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1242, %r350, %r1179, %r1239;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1246, %r353;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1248, %r1246, %r1187;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1251, %r350, %r1186, %r1248;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1255, %r353;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1257, %r1255, %r1194;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1260, %r350, %r1193, %r1257;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1264, %r353;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1266, %r1264, %r1201;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1269, %r350, %r1200, %r1266;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1273, %r353;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1275, %r1273, %r1208;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1278, %r350, %r1207, %r1275;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1282, %r353;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1284, %r1282, %r1215;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1287, %r350, %r1214, %r1284;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1291, %r353;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1293, %r1291, %r1222;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1296, %r350, %r1221, %r1293;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1300, %r353, %r1172;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1303, %r350, %r1173, %r1300;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1307, %r353, %r1179;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1310, %r350, %r1180, %r1307;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1314, %r353, %r1186;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1317, %r350, %r1187, %r1314;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1321, %r353, %r1193;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1324, %r350, %r1194, %r1321;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1328, %r353, %r1200;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1331, %r350, %r1201, %r1328;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1335, %r353, %r1207;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1338, %r350, %r1208, %r1335;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1342, %r353, %r1214;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1345, %r350, %r1215, %r1342;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1349, %r353, %r1221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1352, %r350, %r1222, %r1349;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1445, %r1446}, {%r397, %r400}, {%r1233, %r1303}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1453, %r1454}, {%r397, %r400}, {%r1242, %r1310}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1461, %r1462}, {%r397, %r400}, {%r1251, %r1317}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1469, %r1470}, {%r397, %r400}, {%r1260, %r1324}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1477, %r1478}, {%r397, %r400}, {%r1269, %r1331}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1485, %r1486}, {%r397, %r400}, {%r1278, %r1338}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1493, %r1494}, {%r397, %r400}, {%r1287, %r1345}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1501, %r1502}, {%r397, %r400}, {%r1296, %r1352}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r228, %r1445, %r1446, %r850;
	// end inline asm
	// begin inline asm
	prmt.b32 %r229, %r1445, %r1446, %r854;
	// end inline asm
	// begin inline asm
	prmt.b32 %r230, %r1453, %r1454, %r850;
	// end inline asm
	// begin inline asm
	prmt.b32 %r231, %r1453, %r1454, %r854;
	// end inline asm
	// begin inline asm
	prmt.b32 %r232, %r1461, %r1462, %r850;
	// end inline asm
	// begin inline asm
	prmt.b32 %r233, %r1461, %r1462, %r854;
	// end inline asm
	// begin inline asm
	prmt.b32 %r234, %r1469, %r1470, %r850;
	// end inline asm
	// begin inline asm
	prmt.b32 %r235, %r1469, %r1470, %r854;
	// end inline asm
	// begin inline asm
	prmt.b32 %r236, %r1477, %r1478, %r850;
	// end inline asm
	// begin inline asm
	prmt.b32 %r237, %r1477, %r1478, %r854;
	// end inline asm
	// begin inline asm
	prmt.b32 %r238, %r1485, %r1486, %r850;
	// end inline asm
	// begin inline asm
	prmt.b32 %r239, %r1485, %r1486, %r854;
	// end inline asm
	// begin inline asm
	prmt.b32 %r240, %r1493, %r1494, %r850;
	// end inline asm
	// begin inline asm
	prmt.b32 %r241, %r1493, %r1494, %r854;
	// end inline asm
	// begin inline asm
	prmt.b32 %r242, %r1501, %r1502, %r850;
	// end inline asm
	// begin inline asm
	prmt.b32 %r243, %r1501, %r1502, %r854;
	// end inline asm
	st.shared.u32 	[%rd45], %r228;
	st.shared.u32 	[%rd46+16576], %r229;
	st.shared.u32 	[%rd46+64], %r230;
	st.shared.u32 	[%rd46+16640], %r231;
	st.shared.u32 	[%rd47], %r232;
	st.shared.u32 	[%rd48+16576], %r233;
	st.shared.u32 	[%rd48+64], %r234;
	st.shared.u32 	[%rd48+16640], %r235;
	st.shared.u32 	[%rd49], %r236;
	st.shared.u32 	[%rd50+16576], %r237;
	st.shared.u32 	[%rd50+64], %r238;
	st.shared.u32 	[%rd50+16640], %r239;
	st.shared.u32 	[%rd51], %r240;
	st.shared.u32 	[%rd52+16576], %r241;
	st.shared.u32 	[%rd52+64], %r242;
	st.shared.u32 	[%rd52+16640], %r243;
	@%p229 bra 	$L__BB0_214;
// %bb.213:                             // %pass7916
                                        //   in Loop: Header=BB0_210 Depth=2
	st.shared.u32 	[%rd45], %r228;
	st.shared.u32 	[%rd46+16576], %r229;
	st.shared.u32 	[%rd46+64], %r230;
	st.shared.u32 	[%rd46+16640], %r231;
	st.shared.u32 	[%rd47], %r232;
	st.shared.u32 	[%rd48+16576], %r233;
	st.shared.u32 	[%rd48+64], %r234;
	st.shared.u32 	[%rd48+16640], %r235;
	st.shared.u32 	[%rd49], %r236;
	st.shared.u32 	[%rd50+16576], %r237;
	st.shared.u32 	[%rd50+64], %r238;
	st.shared.u32 	[%rd50+16640], %r239;
	st.shared.u32 	[%rd51], %r240;
	st.shared.u32 	[%rd52+16576], %r241;
	st.shared.u32 	[%rd52+64], %r242;
	st.shared.u32 	[%rd52+16640], %r243;
$L__BB0_214:                            // %L21619
                                        //   in Loop: Header=BB0_210 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r1512, [%rd7];
	ld.shared.u32 	%r1519, [%rd8+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1529, %r1526}, {%r409, %r412}, {%r1512}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1538, %r1535}, {%r409, %r412}, {%r1519}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1522, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1524, %r1522, %r1526;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1527, %r443, %r1529, %r1524;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1531, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1533, %r1531, %r1535;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1536, %r443, %r1538, %r1533;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1540, %r446, %r1529;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1543, %r443, %r1526, %r1540;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1547, %r446, %r1538;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1550, %r443, %r1535, %r1547;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1573, %r1576}, {%r485, %r488}, {%r1527, %r1543}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1580, %r1584}, {%r485, %r488}, {%r1536, %r1550}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1572, %r1573, %r1573;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1575, %r1576, %r1576, %r1572;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1579, %r1580, %r1580, %r1575;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1583, %r1584, %r1584, %r1579;
	// end inline asm
	mov.u32 	%r1671, 626337109;
	// begin inline asm
	fma.rn.f16x2 %r1587, %r1671, %r1583, %r3458;
	// end inline asm
	ld.shared.u32 	%r1595, [%rd53];
	ld.shared.u32 	%r1602, [%rd54];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1612, %r1609}, {%r409, %r412}, {%r1595}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1621, %r1618}, {%r409, %r412}, {%r1602}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1605, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1607, %r1605, %r1609;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1610, %r443, %r1612, %r1607;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1614, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1616, %r1614, %r1618;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1619, %r443, %r1621, %r1616;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1623, %r446, %r1612;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1626, %r443, %r1609, %r1623;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1630, %r446, %r1621;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1633, %r443, %r1618, %r1630;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1656, %r1659}, {%r485, %r488}, {%r1610, %r1626}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1663, %r1667}, {%r485, %r488}, {%r1619, %r1633}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1655, %r1656, %r1656;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1658, %r1659, %r1659, %r1655;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1662, %r1663, %r1663, %r1658;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1666, %r1667, %r1667, %r1662;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3469, %r1671, %r1666, %r1587;
	// end inline asm
	add.s32 	%r3467, %r3456, 2;
	setp.eq.s32 	%p282, %r3467, 6;
	@%p282 bra 	$L__BB0_215;
	bra.uni 	$L__BB0_216;
$L__BB0_215:                            // %pass10789
                                        //   in Loop: Header=BB0_210 Depth=2
	shl.b32 	%r1675, %r3457, 20;
	or.b32  	%r1676, %r178, %r1675;
	cvt.u64.u32 	%rd239, %r1676;
	add.s64 	%rd240, %rd239, %rd9;
	shr.u64 	%rd241, %rd240, 34;
	add.s64 	%rd242, %rd240, %rd241;
	shr.s64 	%rd243, %rd242, 30;
	setp.lt.s64 	%p283, %rd240, 0;
	and.b64  	%rd244, %rd242, -1073741824;
	setp.ne.s64 	%p284, %rd244, %rd240;
	and.pred  	%p285, %p283, %p284;
	selp.u64 	%rd245, 1, 0, %p285;
	sub.s64 	%rd246, %rd245, %rd243;
	shl.b64 	%rd247, %rd246, 30;
	add.s64 	%rd248, %rd247, %rd240;
	shl.b64 	%rd249, %rd248, 2;
	add.s64 	%rd250, %rd4, %rd249;
	st.global.u32 	[%rd250], %r3469;
	add.s32 	%r3457, %r3457, 1;
	mov.u32 	%r3467, 0;
	mov.u32 	%r3469, %r3467;
$L__BB0_216:                            // %pass11010
                                        //   in Loop: Header=BB0_210 Depth=2
	ld.shared.u32 	%r1681, [%rd55];
	ld.shared.u32 	%r1688, [%rd56];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1698, %r1695}, {%r409, %r412}, {%r1681}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1707, %r1704}, {%r409, %r412}, {%r1688}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1691, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1693, %r1691, %r1695;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1696, %r443, %r1698, %r1693;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1700, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1702, %r1700, %r1704;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1705, %r443, %r1707, %r1702;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1709, %r446, %r1698;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1712, %r443, %r1695, %r1709;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1716, %r446, %r1707;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1719, %r443, %r1704, %r1716;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1742, %r1745}, {%r485, %r488}, {%r1696, %r1712}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1749, %r1753}, {%r485, %r488}, {%r1705, %r1719}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1741, %r1742, %r1742;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1744, %r1745, %r1745, %r1741;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1748, %r1749, %r1749, %r1744;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1752, %r1753, %r1753, %r1748;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1756, %r1671, %r1752, %r3469;
	// end inline asm
	ld.shared.u32 	%r1764, [%rd57];
	ld.shared.u32 	%r1771, [%rd58];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1781, %r1778}, {%r409, %r412}, {%r1764}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1790, %r1787}, {%r409, %r412}, {%r1771}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1774, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1776, %r1774, %r1778;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1779, %r443, %r1781, %r1776;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1783, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1785, %r1783, %r1787;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1788, %r443, %r1790, %r1785;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1792, %r446, %r1781;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1795, %r443, %r1778, %r1792;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1799, %r446, %r1790;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1802, %r443, %r1787, %r1799;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1825, %r1828}, {%r485, %r488}, {%r1779, %r1795}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1832, %r1836}, {%r485, %r488}, {%r1788, %r1802}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1824, %r1825, %r1825;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1827, %r1828, %r1828, %r1824;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1831, %r1832, %r1832, %r1827;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1835, %r1836, %r1836, %r1831;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3472, %r1671, %r1835, %r1756;
	// end inline asm
	add.s32 	%r3470, %r3467, 2;
	setp.ne.s32 	%p286, %r3470, 6;
	@%p286 bra 	$L__BB0_218;
// %bb.217:                             // %pass11705
                                        //   in Loop: Header=BB0_210 Depth=2
	shl.b32 	%r1844, %r3457, 20;
	or.b32  	%r1845, %r178, %r1844;
	cvt.u64.u32 	%rd251, %r1845;
	add.s64 	%rd252, %rd251, %rd9;
	shr.u64 	%rd253, %rd252, 34;
	add.s64 	%rd254, %rd252, %rd253;
	shr.s64 	%rd255, %rd254, 30;
	setp.lt.s64 	%p287, %rd252, 0;
	and.b64  	%rd256, %rd254, -1073741824;
	setp.ne.s64 	%p288, %rd256, %rd252;
	and.pred  	%p289, %p287, %p288;
	selp.u64 	%rd257, 1, 0, %p289;
	sub.s64 	%rd258, %rd257, %rd255;
	shl.b64 	%rd259, %rd258, 30;
	add.s64 	%rd260, %rd259, %rd252;
	shl.b64 	%rd261, %rd260, 2;
	add.s64 	%rd262, %rd4, %rd261;
	st.global.u32 	[%rd262], %r3472;
	add.s32 	%r3457, %r3457, 1;
	mov.u32 	%r3470, 0;
	mov.u32 	%r3472, %r3470;
$L__BB0_218:                            // %pass11926
                                        //   in Loop: Header=BB0_210 Depth=2
	ld.shared.u32 	%r1850, [%rd59];
	ld.shared.u32 	%r1857, [%rd60];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1867, %r1864}, {%r409, %r412}, {%r1850}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1876, %r1873}, {%r409, %r412}, {%r1857}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1860, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1862, %r1860, %r1864;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1865, %r443, %r1867, %r1862;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1869, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1871, %r1869, %r1873;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1874, %r443, %r1876, %r1871;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1878, %r446, %r1867;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1881, %r443, %r1864, %r1878;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1885, %r446, %r1876;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1888, %r443, %r1873, %r1885;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1911, %r1914}, {%r485, %r488}, {%r1865, %r1881}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1918, %r1922}, {%r485, %r488}, {%r1874, %r1888}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1910, %r1911, %r1911;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1913, %r1914, %r1914, %r1910;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1917, %r1918, %r1918, %r1913;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1921, %r1922, %r1922, %r1917;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1925, %r1671, %r1921, %r3472;
	// end inline asm
	ld.shared.u32 	%r1933, [%rd61];
	ld.shared.u32 	%r1940, [%rd62];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1950, %r1947}, {%r409, %r412}, {%r1933}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r1959, %r1956}, {%r409, %r412}, {%r1940}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1943, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1945, %r1943, %r1947;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1948, %r443, %r1950, %r1945;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r1952, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1954, %r1952, %r1956;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1957, %r443, %r1959, %r1954;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1961, %r446, %r1950;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1964, %r443, %r1947, %r1961;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1968, %r446, %r1959;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1971, %r443, %r1956, %r1968;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r1994, %r1997}, {%r485, %r488}, {%r1948, %r1964}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2001, %r2005}, {%r485, %r488}, {%r1957, %r1971}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r1993, %r1994, %r1994;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r1996, %r1997, %r1997, %r1993;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2000, %r2001, %r2001, %r1996;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2004, %r2005, %r2005, %r2000;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3475, %r1671, %r2004, %r1925;
	// end inline asm
	add.s32 	%r3473, %r3470, 2;
	setp.ne.s32 	%p290, %r3473, 6;
	@%p290 bra 	$L__BB0_220;
// %bb.219:                             // %pass12621
                                        //   in Loop: Header=BB0_210 Depth=2
	shl.b32 	%r2013, %r3457, 20;
	or.b32  	%r2014, %r178, %r2013;
	cvt.u64.u32 	%rd263, %r2014;
	add.s64 	%rd264, %rd263, %rd9;
	shr.u64 	%rd265, %rd264, 34;
	add.s64 	%rd266, %rd264, %rd265;
	shr.s64 	%rd267, %rd266, 30;
	setp.lt.s64 	%p291, %rd264, 0;
	and.b64  	%rd268, %rd266, -1073741824;
	setp.ne.s64 	%p292, %rd268, %rd264;
	and.pred  	%p293, %p291, %p292;
	selp.u64 	%rd269, 1, 0, %p293;
	sub.s64 	%rd270, %rd269, %rd267;
	shl.b64 	%rd271, %rd270, 30;
	add.s64 	%rd272, %rd271, %rd264;
	shl.b64 	%rd273, %rd272, 2;
	add.s64 	%rd274, %rd4, %rd273;
	st.global.u32 	[%rd274], %r3475;
	add.s32 	%r3457, %r3457, 1;
	mov.u32 	%r3473, 0;
	mov.u32 	%r3475, %r3473;
$L__BB0_220:                            // %pass12842
                                        //   in Loop: Header=BB0_210 Depth=2
	ld.shared.u32 	%r2019, [%rd63];
	ld.shared.u32 	%r2026, [%rd64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2036, %r2033}, {%r409, %r412}, {%r2019}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2045, %r2042}, {%r409, %r412}, {%r2026}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2029, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2031, %r2029, %r2033;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2034, %r443, %r2036, %r2031;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2038, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2040, %r2038, %r2042;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2043, %r443, %r2045, %r2040;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2047, %r446, %r2036;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2050, %r443, %r2033, %r2047;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2054, %r446, %r2045;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2057, %r443, %r2042, %r2054;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2080, %r2083}, {%r485, %r488}, {%r2034, %r2050}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2087, %r2091}, {%r485, %r488}, {%r2043, %r2057}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2079, %r2080, %r2080;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2082, %r2083, %r2083, %r2079;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2086, %r2087, %r2087, %r2082;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2090, %r2091, %r2091, %r2086;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2094, %r1671, %r2090, %r3475;
	// end inline asm
	ld.shared.u32 	%r2102, [%rd65];
	ld.shared.u32 	%r2109, [%rd66];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2119, %r2116}, {%r409, %r412}, {%r2102}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2128, %r2125}, {%r409, %r412}, {%r2109}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2112, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2114, %r2112, %r2116;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2117, %r443, %r2119, %r2114;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2121, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2123, %r2121, %r2125;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2126, %r443, %r2128, %r2123;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2130, %r446, %r2119;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2133, %r443, %r2116, %r2130;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2137, %r446, %r2128;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2140, %r443, %r2125, %r2137;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2163, %r2166}, {%r485, %r488}, {%r2117, %r2133}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2170, %r2174}, {%r485, %r488}, {%r2126, %r2140}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2162, %r2163, %r2163;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2165, %r2166, %r2166, %r2162;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2169, %r2170, %r2170, %r2165;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2173, %r2174, %r2174, %r2169;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3458, %r1671, %r2173, %r2094;
	// end inline asm
	add.s32 	%r3456, %r3473, 2;
	setp.ne.s32 	%p294, %r3456, 6;
	@%p294 bra 	$L__BB0_152;
// %bb.221:                             // %pass13537
                                        //   in Loop: Header=BB0_210 Depth=2
	shl.b32 	%r2182, %r3457, 20;
	or.b32  	%r2183, %r178, %r2182;
	cvt.u64.u32 	%rd275, %r2183;
	add.s64 	%rd276, %rd275, %rd9;
	shr.u64 	%rd277, %rd276, 34;
	add.s64 	%rd278, %rd276, %rd277;
	shr.s64 	%rd279, %rd278, 30;
	setp.lt.s64 	%p295, %rd276, 0;
	and.b64  	%rd280, %rd278, -1073741824;
	setp.ne.s64 	%p296, %rd280, %rd276;
	and.pred  	%p297, %p295, %p296;
	selp.u64 	%rd281, 1, 0, %p297;
	sub.s64 	%rd282, %rd281, %rd279;
	shl.b64 	%rd283, %rd282, 30;
	add.s64 	%rd284, %rd283, %rd276;
	shl.b64 	%rd285, %rd284, 2;
	add.s64 	%rd286, %rd4, %rd285;
	st.global.u32 	[%rd286], %r3458;
	add.s32 	%r3457, %r3457, 1;
	mov.u32 	%r3456, 0;
	mov.u32 	%r3458, %r3456;
	bra.uni 	$L__BB0_152;
$L__BB0_153:                            // %L29926.preheader
                                        //   in Loop: Header=BB0_192 Depth=1
	mov.u32 	%r3455, 16;
	bra.uni 	$L__BB0_154;
$L__BB0_162:                            // %L47569
                                        //   in Loop: Header=BB0_154 Depth=2
	bar.sync 	0;
	add.s32 	%r3455, %r3455, -8;
	setp.ne.s32 	%p320, %r3455, -16;
	@%p320 bra 	$L__BB0_154;
	bra.uni 	$L__BB0_163;
$L__BB0_154:                            // %L29926
                                        //   Parent Loop BB0_192 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	setp.lt.u32 	%p299, %r1, 16;
	setp.eq.s32 	%p300, %r3455, 16;
	selp.b32 	%r2713, %r212, 0, %p300;
	setp.eq.s32 	%p301, %r3455, 8;
	selp.b32 	%r2714, %r216, %r2713, %p301;
	setp.eq.s32 	%p302, %r3455, 0;
	selp.b32 	%r2715, %r220, %r2714, %p302;
	setp.eq.s32 	%p303, %r3455, -8;
	selp.b32 	%r2716, %r224, %r2715, %p303;
	selp.b32 	%r2717, %r213, 0, %p300;
	selp.b32 	%r2718, %r217, %r2717, %p301;
	selp.b32 	%r2719, %r221, %r2718, %p302;
	selp.b32 	%r2720, %r225, %r2719, %p303;
	selp.b32 	%r2721, %r214, 0, %p300;
	selp.b32 	%r2722, %r218, %r2721, %p301;
	selp.b32 	%r2723, %r222, %r2722, %p302;
	selp.b32 	%r2724, %r226, %r2723, %p303;
	selp.b32 	%r2725, %r215, 0, %p300;
	selp.b32 	%r2726, %r219, %r2725, %p301;
	selp.b32 	%r2727, %r223, %r2726, %p302;
	selp.b32 	%r2728, %r227, %r2727, %p303;
	// begin inline asm
	mov.b32 %r2212, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2223, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2729, %r2716, 8;
	xor.b32  	%r2222, %r2729, 8947848;
	// begin inline asm
	lop3.b32 %r2209, %r1105, %r2222, %r2212, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2213, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2214, %r2212, %r2213;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2217, %r2209, %r2214;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2220, %r1116, %r2222, %r2223, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2224, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2225, %r2223, %r2224;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2228, %r2220, %r2225;
	// end inline asm
	// begin inline asm
	mov.b32 %r2258, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2269, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2730, %r2720, 8;
	xor.b32  	%r2268, %r2730, 8947848;
	// begin inline asm
	lop3.b32 %r2255, %r1105, %r2268, %r2258, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2259, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2260, %r2258, %r2259;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2263, %r2255, %r2260;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2266, %r1116, %r2268, %r2269, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2270, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2271, %r2269, %r2270;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2274, %r2266, %r2271;
	// end inline asm
	// begin inline asm
	mov.b32 %r2304, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2315, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2731, %r2724, 8;
	xor.b32  	%r2314, %r2731, 8947848;
	// begin inline asm
	lop3.b32 %r2301, %r1105, %r2314, %r2304, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2305, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2306, %r2304, %r2305;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2309, %r2301, %r2306;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2312, %r1116, %r2314, %r2315, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2316, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2317, %r2315, %r2316;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2320, %r2312, %r2317;
	// end inline asm
	// begin inline asm
	mov.b32 %r2350, {%rs38, %rs38};
	// end inline asm
	// begin inline asm
	mov.b32 %r2361, {%rs40, %rs40};
	// end inline asm
	shr.u32 	%r2732, %r2728, 8;
	xor.b32  	%r2360, %r2732, 8947848;
	// begin inline asm
	lop3.b32 %r2347, %r1105, %r2360, %r2350, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2351, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2352, %r2350, %r2351;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2355, %r2347, %r2352;
	// end inline asm
	// begin inline asm
	lop3.b32 %r2358, %r1116, %r2360, %r2361, 202;
	// end inline asm
	// begin inline asm
	mov.b32 %r2362, {%rs44, %rs44};
	// end inline asm
	// begin inline asm
	add.rn.f16x2 %r2363, %r2361, %r2362;
	// end inline asm
	// begin inline asm
	sub.rn.f16x2 %r2366, %r2358, %r2363;
	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2217;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2369, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r2228;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2372, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2263;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2375, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r2274;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2378, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2309;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2381, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r2320;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2384, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r172;
    mov.b32 {%r2re, %r2im}, %r2355;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2387, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	{
    .reg .f16 %r1re, %r1im, %r2re, %r2im, %r1imneg, %retmp, %r0re, %imtmp, %r0im;
    mov.b32 {%r1re, %r1im}, %r173;
    mov.b32 {%r2re, %r2im}, %r2366;
    mul.f16 %retmp, %r1re, %r2re;
    mul.f16 %imtmp, %r1re, %r2im;
    neg.f16 %r1imneg, %r1im;
    fma.rn.f16 %r0re, %r1imneg, %r2im, %retmp;
    fma.rn.f16 %r0im, %r1im, %r2re, %imtmp;
    mov.b32 %r2390, {%r0re, %r0im};
}

	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2456, %r2453}, {%r312, %r315}, {%r2369}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2465, %r2462}, {%r312, %r315}, {%r2372}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2474, %r2471}, {%r312, %r315}, {%r2375}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2483, %r2480}, {%r312, %r315}, {%r2378}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2492, %r2489}, {%r312, %r315}, {%r2381}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2501, %r2498}, {%r312, %r315}, {%r2384}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2510, %r2507}, {%r312, %r315}, {%r2387}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2519, %r2516}, {%r312, %r315}, {%r2390}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2449, %r353;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2451, %r2449, %r2453;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2454, %r350, %r2456, %r2451;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2458, %r353;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2460, %r2458, %r2462;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2463, %r350, %r2465, %r2460;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2467, %r353;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2469, %r2467, %r2471;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2472, %r350, %r2474, %r2469;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2476, %r353;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2478, %r2476, %r2480;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2481, %r350, %r2483, %r2478;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2485, %r353;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2487, %r2485, %r2489;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2490, %r350, %r2492, %r2487;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2494, %r353;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2496, %r2494, %r2498;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2499, %r350, %r2501, %r2496;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2503, %r353;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2505, %r2503, %r2507;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2508, %r350, %r2510, %r2505;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2512, %r353;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2514, %r2512, %r2516;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2517, %r350, %r2519, %r2514;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2521, %r353, %r2456;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2524, %r350, %r2453, %r2521;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2528, %r353, %r2465;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2531, %r350, %r2462, %r2528;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2535, %r353, %r2474;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2538, %r350, %r2471, %r2535;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2542, %r353, %r2483;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2545, %r350, %r2480, %r2542;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2549, %r353, %r2492;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2552, %r350, %r2489, %r2549;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2556, %r353, %r2501;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2559, %r350, %r2498, %r2556;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2563, %r353, %r2510;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2566, %r350, %r2507, %r2563;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2570, %r353, %r2519;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2573, %r350, %r2516, %r2570;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2650, %r2651}, {%r397, %r400}, {%r2454, %r2524}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2658, %r2659}, {%r397, %r400}, {%r2463, %r2531}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2666, %r2667}, {%r397, %r400}, {%r2472, %r2538}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2674, %r2675}, {%r397, %r400}, {%r2481, %r2545}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2682, %r2683}, {%r397, %r400}, {%r2490, %r2552}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2690, %r2691}, {%r397, %r400}, {%r2499, %r2559}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2698, %r2699}, {%r397, %r400}, {%r2508, %r2566}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2706, %r2707}, {%r397, %r400}, {%r2517, %r2573}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2649, %r2650, %r2651, %r850;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2653, %r2650, %r2651, %r854;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2657, %r2658, %r2659, %r850;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2661, %r2658, %r2659, %r854;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2665, %r2666, %r2667, %r850;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2669, %r2666, %r2667, %r854;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2673, %r2674, %r2675, %r850;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2677, %r2674, %r2675, %r854;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2681, %r2682, %r2683, %r850;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2685, %r2682, %r2683, %r854;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2689, %r2690, %r2691, %r850;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2693, %r2690, %r2691, %r854;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2697, %r2698, %r2699, %r850;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2701, %r2698, %r2699, %r854;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2705, %r2706, %r2707, %r850;
	// end inline asm
	// begin inline asm
	prmt.b32 %r2709, %r2706, %r2707, %r854;
	// end inline asm
	st.shared.u32 	[%rd45], %r2649;
	st.shared.u32 	[%rd46+16576], %r2653;
	st.shared.u32 	[%rd46+64], %r2657;
	st.shared.u32 	[%rd46+16640], %r2661;
	st.shared.u32 	[%rd47], %r2665;
	st.shared.u32 	[%rd48+16576], %r2669;
	st.shared.u32 	[%rd48+64], %r2673;
	st.shared.u32 	[%rd48+16640], %r2677;
	st.shared.u32 	[%rd49], %r2681;
	st.shared.u32 	[%rd50+16576], %r2685;
	st.shared.u32 	[%rd50+64], %r2689;
	st.shared.u32 	[%rd50+16640], %r2693;
	st.shared.u32 	[%rd51], %r2697;
	st.shared.u32 	[%rd52+16576], %r2701;
	st.shared.u32 	[%rd52+64], %r2705;
	st.shared.u32 	[%rd52+16640], %r2709;
	@%p299 bra 	$L__BB0_222;
	bra.uni 	$L__BB0_155;
$L__BB0_222:                            // %pass16038
                                        //   in Loop: Header=BB0_154 Depth=2
	st.shared.u32 	[%rd45], %r2649;
	st.shared.u32 	[%rd46+16576], %r2653;
	st.shared.u32 	[%rd46+64], %r2657;
	st.shared.u32 	[%rd46+16640], %r2661;
	st.shared.u32 	[%rd47], %r2665;
	st.shared.u32 	[%rd48+16576], %r2669;
	st.shared.u32 	[%rd48+64], %r2673;
	st.shared.u32 	[%rd48+16640], %r2677;
	st.shared.u32 	[%rd49], %r2681;
	st.shared.u32 	[%rd50+16576], %r2685;
	st.shared.u32 	[%rd50+64], %r2689;
	st.shared.u32 	[%rd50+16640], %r2693;
	st.shared.u32 	[%rd51], %r2697;
	st.shared.u32 	[%rd52+16576], %r2701;
	st.shared.u32 	[%rd52+64], %r2705;
	st.shared.u32 	[%rd52+16640], %r2709;
$L__BB0_155:                            // %L39283
                                        //   in Loop: Header=BB0_154 Depth=2
	bar.sync 	0;
	ld.shared.u32 	%r2737, [%rd7];
	ld.shared.u32 	%r2744, [%rd8+64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2754, %r2751}, {%r409, %r412}, {%r2737}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2763, %r2760}, {%r409, %r412}, {%r2744}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2747, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2749, %r2747, %r2751;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2752, %r443, %r2754, %r2749;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2756, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2758, %r2756, %r2760;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2761, %r443, %r2763, %r2758;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2765, %r446, %r2754;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2768, %r443, %r2751, %r2765;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2772, %r446, %r2763;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2775, %r443, %r2760, %r2772;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2798, %r2801}, {%r485, %r488}, {%r2752, %r2768}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2805, %r2809}, {%r485, %r488}, {%r2761, %r2775}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2797, %r2798, %r2798;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2800, %r2801, %r2801, %r2797;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2804, %r2805, %r2805, %r2800;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2808, %r2809, %r2809, %r2804;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2812, %r1671, %r2808, %r3458;
	// end inline asm
	ld.shared.u32 	%r2820, [%rd53];
	ld.shared.u32 	%r2827, [%rd54];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2837, %r2834}, {%r409, %r412}, {%r2820}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2846, %r2843}, {%r409, %r412}, {%r2827}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2830, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2832, %r2830, %r2834;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2835, %r443, %r2837, %r2832;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2839, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2841, %r2839, %r2843;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2844, %r443, %r2846, %r2841;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2848, %r446, %r2837;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2851, %r443, %r2834, %r2848;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2855, %r446, %r2846;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2858, %r443, %r2843, %r2855;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2881, %r2884}, {%r485, %r488}, {%r2835, %r2851}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2888, %r2892}, {%r485, %r488}, {%r2844, %r2858}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2880, %r2881, %r2881;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2883, %r2884, %r2884, %r2880;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2887, %r2888, %r2888, %r2883;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2891, %r2892, %r2892, %r2887;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3478, %r1671, %r2891, %r2812;
	// end inline asm
	add.s32 	%r3476, %r3456, 2;
	setp.eq.s32 	%p304, %r3476, 6;
	@%p304 bra 	$L__BB0_156;
	bra.uni 	$L__BB0_157;
$L__BB0_156:                            // %pass18911
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r2900, %r3457, 20;
	or.b32  	%r2901, %r178, %r2900;
	cvt.u64.u32 	%rd287, %r2901;
	add.s64 	%rd288, %rd287, %rd9;
	shr.u64 	%rd289, %rd288, 34;
	add.s64 	%rd290, %rd288, %rd289;
	shr.s64 	%rd291, %rd290, 30;
	setp.lt.s64 	%p305, %rd288, 0;
	and.b64  	%rd292, %rd290, -1073741824;
	setp.ne.s64 	%p306, %rd292, %rd288;
	and.pred  	%p307, %p305, %p306;
	selp.u64 	%rd293, 1, 0, %p307;
	sub.s64 	%rd294, %rd293, %rd291;
	shl.b64 	%rd295, %rd294, 30;
	add.s64 	%rd296, %rd295, %rd288;
	shl.b64 	%rd297, %rd296, 2;
	add.s64 	%rd298, %rd4, %rd297;
	st.global.u32 	[%rd298], %r3478;
	add.s32 	%r3457, %r3457, 1;
	mov.u32 	%r3476, 0;
	mov.u32 	%r3478, %r3476;
$L__BB0_157:                            // %pass19132
                                        //   in Loop: Header=BB0_154 Depth=2
	ld.shared.u32 	%r2906, [%rd55];
	ld.shared.u32 	%r2913, [%rd56];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2923, %r2920}, {%r409, %r412}, {%r2906}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r2932, %r2929}, {%r409, %r412}, {%r2913}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2916, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2918, %r2916, %r2920;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2921, %r443, %r2923, %r2918;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2925, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2927, %r2925, %r2929;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2930, %r443, %r2932, %r2927;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2934, %r446, %r2923;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2937, %r443, %r2920, %r2934;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2941, %r446, %r2932;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2944, %r443, %r2929, %r2941;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2967, %r2970}, {%r485, %r488}, {%r2921, %r2937}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r2974, %r2978}, {%r485, %r488}, {%r2930, %r2944}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r2966, %r2967, %r2967;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2969, %r2970, %r2970, %r2966;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2973, %r2974, %r2974, %r2969;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2977, %r2978, %r2978, %r2973;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r2981, %r1671, %r2977, %r3478;
	// end inline asm
	ld.shared.u32 	%r2989, [%rd57];
	ld.shared.u32 	%r2996, [%rd58];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3006, %r3003}, {%r409, %r412}, {%r2989}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3015, %r3012}, {%r409, %r412}, {%r2996}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r2999, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3001, %r2999, %r3003;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3004, %r443, %r3006, %r3001;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3008, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3010, %r3008, %r3012;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3013, %r443, %r3015, %r3010;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3017, %r446, %r3006;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3020, %r443, %r3003, %r3017;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3024, %r446, %r3015;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3027, %r443, %r3012, %r3024;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3050, %r3053}, {%r485, %r488}, {%r3004, %r3020}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3057, %r3061}, {%r485, %r488}, {%r3013, %r3027}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3049, %r3050, %r3050;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3052, %r3053, %r3053, %r3049;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3056, %r3057, %r3057, %r3052;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3060, %r3061, %r3061, %r3056;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3481, %r1671, %r3060, %r2981;
	// end inline asm
	add.s32 	%r3479, %r3476, 2;
	setp.ne.s32 	%p308, %r3479, 6;
	@%p308 bra 	$L__BB0_159;
// %bb.158:                             // %pass19827
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r3069, %r3457, 20;
	or.b32  	%r3070, %r178, %r3069;
	cvt.u64.u32 	%rd299, %r3070;
	add.s64 	%rd300, %rd299, %rd9;
	shr.u64 	%rd301, %rd300, 34;
	add.s64 	%rd302, %rd300, %rd301;
	shr.s64 	%rd303, %rd302, 30;
	setp.lt.s64 	%p309, %rd300, 0;
	and.b64  	%rd304, %rd302, -1073741824;
	setp.ne.s64 	%p310, %rd304, %rd300;
	and.pred  	%p311, %p309, %p310;
	selp.u64 	%rd305, 1, 0, %p311;
	sub.s64 	%rd306, %rd305, %rd303;
	shl.b64 	%rd307, %rd306, 30;
	add.s64 	%rd308, %rd307, %rd300;
	shl.b64 	%rd309, %rd308, 2;
	add.s64 	%rd310, %rd4, %rd309;
	st.global.u32 	[%rd310], %r3481;
	add.s32 	%r3457, %r3457, 1;
	mov.u32 	%r3479, 0;
	mov.u32 	%r3481, %r3479;
$L__BB0_159:                            // %pass20048
                                        //   in Loop: Header=BB0_154 Depth=2
	ld.shared.u32 	%r3075, [%rd59];
	ld.shared.u32 	%r3082, [%rd60];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3092, %r3089}, {%r409, %r412}, {%r3075}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3101, %r3098}, {%r409, %r412}, {%r3082}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3085, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3087, %r3085, %r3089;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3090, %r443, %r3092, %r3087;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3094, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3096, %r3094, %r3098;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3099, %r443, %r3101, %r3096;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3103, %r446, %r3092;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3106, %r443, %r3089, %r3103;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3110, %r446, %r3101;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3113, %r443, %r3098, %r3110;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3136, %r3139}, {%r485, %r488}, {%r3090, %r3106}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3143, %r3147}, {%r485, %r488}, {%r3099, %r3113}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3135, %r3136, %r3136;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3138, %r3139, %r3139, %r3135;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3142, %r3143, %r3143, %r3138;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3146, %r3147, %r3147, %r3142;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3150, %r1671, %r3146, %r3481;
	// end inline asm
	ld.shared.u32 	%r3158, [%rd61];
	ld.shared.u32 	%r3165, [%rd62];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3175, %r3172}, {%r409, %r412}, {%r3158}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3184, %r3181}, {%r409, %r412}, {%r3165}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3168, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3170, %r3168, %r3172;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3173, %r443, %r3175, %r3170;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3177, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3179, %r3177, %r3181;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3182, %r443, %r3184, %r3179;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3186, %r446, %r3175;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3189, %r443, %r3172, %r3186;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3193, %r446, %r3184;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3196, %r443, %r3181, %r3193;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3219, %r3222}, {%r485, %r488}, {%r3173, %r3189}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3226, %r3230}, {%r485, %r488}, {%r3182, %r3196}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3218, %r3219, %r3219;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3221, %r3222, %r3222, %r3218;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3225, %r3226, %r3226, %r3221;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3229, %r3230, %r3230, %r3225;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3484, %r1671, %r3229, %r3150;
	// end inline asm
	add.s32 	%r3482, %r3479, 2;
	setp.ne.s32 	%p312, %r3482, 6;
	@%p312 bra 	$L__BB0_161;
// %bb.160:                             // %pass20743
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r3238, %r3457, 20;
	or.b32  	%r3239, %r178, %r3238;
	cvt.u64.u32 	%rd311, %r3239;
	add.s64 	%rd312, %rd311, %rd9;
	shr.u64 	%rd313, %rd312, 34;
	add.s64 	%rd314, %rd312, %rd313;
	shr.s64 	%rd315, %rd314, 30;
	setp.lt.s64 	%p313, %rd312, 0;
	and.b64  	%rd316, %rd314, -1073741824;
	setp.ne.s64 	%p314, %rd316, %rd312;
	and.pred  	%p315, %p313, %p314;
	selp.u64 	%rd317, 1, 0, %p315;
	sub.s64 	%rd318, %rd317, %rd315;
	shl.b64 	%rd319, %rd318, 30;
	add.s64 	%rd320, %rd319, %rd312;
	shl.b64 	%rd321, %rd320, 2;
	add.s64 	%rd322, %rd4, %rd321;
	st.global.u32 	[%rd322], %r3484;
	add.s32 	%r3457, %r3457, 1;
	mov.u32 	%r3482, 0;
	mov.u32 	%r3484, %r3482;
$L__BB0_161:                            // %pass20964
                                        //   in Loop: Header=BB0_154 Depth=2
	ld.shared.u32 	%r3244, [%rd63];
	ld.shared.u32 	%r3251, [%rd64];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3261, %r3258}, {%r409, %r412}, {%r3244}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3270, %r3267}, {%r409, %r412}, {%r3251}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3254, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3256, %r3254, %r3258;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3259, %r443, %r3261, %r3256;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3263, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3265, %r3263, %r3267;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3268, %r443, %r3270, %r3265;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3272, %r446, %r3261;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3275, %r443, %r3258, %r3272;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3279, %r446, %r3270;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3282, %r443, %r3267, %r3279;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3305, %r3308}, {%r485, %r488}, {%r3259, %r3275}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3312, %r3316}, {%r485, %r488}, {%r3268, %r3282}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3304, %r3305, %r3305;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3307, %r3308, %r3308, %r3304;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3311, %r3312, %r3312, %r3307;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3315, %r3316, %r3316, %r3311;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3319, %r1671, %r3315, %r3484;
	// end inline asm
	ld.shared.u32 	%r3327, [%rd65];
	ld.shared.u32 	%r3334, [%rd66];
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3344, %r3341}, {%r409, %r412}, {%r3327}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k8.row.col.f16.f16.f16.f16 {%r3353, %r3350}, {%r409, %r412}, {%r3334}, {%r1227, %r1227};
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3337, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3339, %r3337, %r3341;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3342, %r443, %r3344, %r3339;
	// end inline asm
	// begin inline asm
	neg.f16x2 %r3346, %r446;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3348, %r3346, %r3350;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3351, %r443, %r3353, %r3348;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3355, %r446, %r3344;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3358, %r443, %r3341, %r3355;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3362, %r446, %r3353;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3365, %r443, %r3350, %r3362;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3388, %r3391}, {%r485, %r488}, {%r3342, %r3358}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mma.sp.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 {%r3395, %r3399}, {%r485, %r488}, {%r3351, %r3365}, {%r1227, %r1227}, %r179, 0;
	// end inline asm
	// begin inline asm
	mul.rn.f16x2 %r3387, %r3388, %r3388;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3390, %r3391, %r3391, %r3387;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3394, %r3395, %r3395, %r3390;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3398, %r3399, %r3399, %r3394;
	// end inline asm
	// begin inline asm
	fma.rn.f16x2 %r3458, %r1671, %r3398, %r3319;
	// end inline asm
	add.s32 	%r3456, %r3482, 2;
	setp.ne.s32 	%p316, %r3456, 6;
	@%p316 bra 	$L__BB0_162;
// %bb.223:                             // %pass21659
                                        //   in Loop: Header=BB0_154 Depth=2
	shl.b32 	%r3407, %r3457, 20;
	or.b32  	%r3408, %r178, %r3407;
	cvt.u64.u32 	%rd323, %r3408;
	add.s64 	%rd324, %rd323, %rd9;
	shr.u64 	%rd325, %rd324, 34;
	add.s64 	%rd326, %rd324, %rd325;
	shr.s64 	%rd327, %rd326, 30;
	setp.lt.s64 	%p317, %rd324, 0;
	and.b64  	%rd328, %rd326, -1073741824;
	setp.ne.s64 	%p318, %rd328, %rd324;
	and.pred  	%p319, %p317, %p318;
	selp.u64 	%rd329, 1, 0, %p319;
	sub.s64 	%rd330, %rd329, %rd327;
	shl.b64 	%rd331, %rd330, 30;
	add.s64 	%rd332, %rd331, %rd324;
	shl.b64 	%rd333, %rd332, 2;
	add.s64 	%rd334, %rd4, %rd333;
	st.global.u32 	[%rd334], %r3458;
	add.s32 	%r3457, %r3457, 1;
	mov.u32 	%r3456, %r1227;
	mov.u32 	%r3458, %r1227;
	bra.uni 	$L__BB0_162;
$L__BB0_164:                            // %L47600
	mov.u32 	%r3409, 0;
	st.global.u32 	[%rd6], %r3409;
	ret;
$L__BB0_211:                            // %post_box_union
	mov.u64 	%rd237, exception4228;
	cvta.global.u64 	%rd238, %rd237;
	{ // callseq 50, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd238;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 50
	{ // callseq 51, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 51
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_136:                            // %L6855
	mov.u32 	%r3425, 5;
	st.global.u32 	[%rd6], %r3425;
	mov.u64 	%rd365, exception4180;
	cvta.global.u64 	%rd366, %rd365;
	{ // callseq 82, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd366;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 82
	{ // callseq 83, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 83
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_137:                            // %L7011
	mov.u32 	%r3424, 5;
	st.global.u32 	[%rd6], %r3424;
	mov.u64 	%rd363, exception4180;
	cvta.global.u64 	%rd364, %rd363;
	{ // callseq 80, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd364;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 80
	{ // callseq 81, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 81
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_138:                            // %L7167
	mov.u32 	%r3423, 5;
	st.global.u32 	[%rd6], %r3423;
	mov.u64 	%rd361, exception4180;
	cvta.global.u64 	%rd362, %rd361;
	{ // callseq 78, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd362;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 78
	{ // callseq 79, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 79
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_139:                            // %L7323
	mov.u32 	%r3422, 5;
	st.global.u32 	[%rd6], %r3422;
	mov.u64 	%rd359, exception4180;
	cvta.global.u64 	%rd360, %rd359;
	{ // callseq 76, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd360;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 76
	{ // callseq 77, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 77
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_140:                            // %L7479
	mov.u32 	%r3421, 5;
	st.global.u32 	[%rd6], %r3421;
	mov.u64 	%rd357, exception4180;
	cvta.global.u64 	%rd358, %rd357;
	{ // callseq 74, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd358;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 74
	{ // callseq 75, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 75
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_141:                            // %L7635
	mov.u32 	%r3420, 5;
	st.global.u32 	[%rd6], %r3420;
	mov.u64 	%rd355, exception4180;
	cvta.global.u64 	%rd356, %rd355;
	{ // callseq 72, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd356;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 72
	{ // callseq 73, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 73
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_142:                            // %L7791
	mov.u32 	%r3419, 5;
	st.global.u32 	[%rd6], %r3419;
	mov.u64 	%rd353, exception4180;
	cvta.global.u64 	%rd354, %rd353;
	{ // callseq 70, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd354;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 70
	{ // callseq 71, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 71
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_143:                            // %L7947
	mov.u32 	%r3418, 5;
	st.global.u32 	[%rd6], %r3418;
	mov.u64 	%rd351, exception4180;
	cvta.global.u64 	%rd352, %rd351;
	{ // callseq 68, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd352;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 68
	{ // callseq 69, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 69
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_144:                            // %L8103
	mov.u32 	%r3417, 5;
	st.global.u32 	[%rd6], %r3417;
	mov.u64 	%rd349, exception4180;
	cvta.global.u64 	%rd350, %rd349;
	{ // callseq 66, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd350;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 66
	{ // callseq 67, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 67
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_145:                            // %L8259
	mov.u32 	%r3416, 5;
	st.global.u32 	[%rd6], %r3416;
	mov.u64 	%rd347, exception4180;
	cvta.global.u64 	%rd348, %rd347;
	{ // callseq 64, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd348;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 64
	{ // callseq 65, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 65
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_146:                            // %L8415
	mov.u32 	%r3415, 5;
	st.global.u32 	[%rd6], %r3415;
	mov.u64 	%rd345, exception4180;
	cvta.global.u64 	%rd346, %rd345;
	{ // callseq 62, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd346;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 62
	{ // callseq 63, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 63
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_147:                            // %L8571
	mov.u32 	%r3414, 5;
	st.global.u32 	[%rd6], %r3414;
	mov.u64 	%rd343, exception4180;
	cvta.global.u64 	%rd344, %rd343;
	{ // callseq 60, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd344;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 60
	{ // callseq 61, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 61
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_148:                            // %L8727
	mov.u32 	%r3413, 5;
	st.global.u32 	[%rd6], %r3413;
	mov.u64 	%rd341, exception4180;
	cvta.global.u64 	%rd342, %rd341;
	{ // callseq 58, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd342;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 58
	{ // callseq 59, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 59
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_149:                            // %L8883
	mov.u32 	%r3412, 5;
	st.global.u32 	[%rd6], %r3412;
	mov.u64 	%rd339, exception4180;
	cvta.global.u64 	%rd340, %rd339;
	{ // callseq 56, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd340;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 56
	{ // callseq 57, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 57
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_150:                            // %L9039
	mov.u32 	%r3411, 5;
	st.global.u32 	[%rd6], %r3411;
	mov.u64 	%rd337, exception4180;
	cvta.global.u64 	%rd338, %rd337;
	{ // callseq 54, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd338;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 54
	{ // callseq 55, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 55
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_151:                            // %L9195
	mov.u32 	%r3410, 5;
	st.global.u32 	[%rd6], %r3410;
	mov.u64 	%rd335, exception4180;
	cvta.global.u64 	%rd336, %rd335;
	{ // callseq 52, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd336;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 52
	{ // callseq 53, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 53
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_6:                              // %L166
	mov.u32 	%r3427, 2;
	st.global.u32 	[%rd6], %r3427;
	mov.u64 	%rd369, exception4180;
	cvta.global.u64 	%rd370, %rd369;
	{ // callseq 86, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd370;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 86
	{ // callseq 87, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 87
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_13:                             // %L307
	mov.u32 	%r3426, 3;
	st.global.u32 	[%rd6], %r3426;
	mov.u64 	%rd367, exception4180;
	cvta.global.u64 	%rd368, %rd367;
	{ // callseq 84, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd368;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 84
	{ // callseq 85, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 85
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_1:                              // %L8
	mov.u64 	%rd73, exception1;
	cvta.global.u64 	%rd74, %rd73;
	{ // callseq 45, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd74;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 45
	{ // callseq 46, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 46
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
$L__BB0_135:                            // %L1153
	add.u64 	%rd72, %SP, 0;
	add.u64 	%rd5, %SPL, 0;
	st.local.v2.u32 	[%rd5], {%r1, %r4};
	st.local.v2.u32 	[%rd5+8], {%r2, %r86};
	st.local.u32 	[%rd5+16], %r87;
	mov.u64 	%rd78, __unnamed_1;
	cvta.global.u64 	%rd79, %rd78;
	{ // callseq 47, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd79;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd72;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r498, [retval0+0];
	} // callseq 47
	mov.u32 	%r500, 4;
	st.global.u32 	[%rd6], %r500;
	mov.u64 	%rd81, exception4180;
	cvta.global.u64 	%rd82, %rd81;
	{ // callseq 48, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd82;
	call.uni 
	gpu_report_exception, 
	(
	param0
	);
	} // callseq 48
	{ // callseq 49, 0
	.reg .b32 temp_param_reg;
	.param .align 8 .b8 param0[16];
	st.param.b64 	[param0+0], %rd67;
	st.param.b32 	[param0+8], %r282;
	call.uni 
	gpu_signal_exception, 
	(
	param0
	);
	} // callseq 49
	trap;
	trap;
	// begin inline asm
	exit;
	// end inline asm
                                        // -- End function
}
